(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object? () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array? () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun class._System.__default () T@U)
(declare-fun Tagclass._System.__default () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun Tagclass._System.___hFunc3 () T@U)
(declare-fun Tagclass._System.___hPartialFunc3 () T@U)
(declare-fun Tagclass._System.___hTotalFunc3 () T@U)
(declare-fun Tagclass._System.___hFunc4 () T@U)
(declare-fun Tagclass._System.___hPartialFunc4 () T@U)
(declare-fun Tagclass._System.___hTotalFunc4 () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._System.Tuple2 () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun class._System.Tuple0 () T@U)
(declare-fun |##MutableMapModel.Slot.Slot| () T@U)
(declare-fun Tagclass.MutableMapModel.Slot () T@U)
(declare-fun class.MutableMapModel.Slot () T@U)
(declare-fun |##MutableMapModel.Item.Empty| () T@U)
(declare-fun Tagclass.MutableMapModel.Item () T@U)
(declare-fun |##MutableMapModel.Item.Entry| () T@U)
(declare-fun Tagclass.NativeTypes.uint64 () T@U)
(declare-fun |##MutableMapModel.Item.Tombstone| () T@U)
(declare-fun class.MutableMapModel.Item () T@U)
(declare-fun |##MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| () T@U)
(declare-fun Tagclass.Options.Option () T@U)
(declare-fun Tagclass.MutableMapModel.FixedSizeLinearHashMap () T@U)
(declare-fun class.MutableMapModel.FixedSizeLinearHashMap () T@U)
(declare-fun |##MutableMapModel.ProbeResult.ProbeResult| () T@U)
(declare-fun Tagclass.MutableMapModel.ProbeResult () T@U)
(declare-fun class.MutableMapModel.ProbeResult () T@U)
(declare-fun |##MutableMapModel.LinearHashMap.LinearHashMap| () T@U)
(declare-fun Tagclass.MutableMapModel.LinearHashMap () T@U)
(declare-fun class.MutableMapModel.LinearHashMap () T@U)
(declare-fun |##MutableMapModel.IteratorOutput.Next| () T@U)
(declare-fun Tagclass.MutableMapModel.IteratorOutput () T@U)
(declare-fun |##MutableMapModel.IteratorOutput.Done| () T@U)
(declare-fun class.MutableMapModel.IteratorOutput () T@U)
(declare-fun |##MutableMapModel.Iterator.Iterator| () T@U)
(declare-fun Tagclass.MutableMapModel.Iterator () T@U)
(declare-fun class.MutableMapModel.Iterator () T@U)
(declare-fun |##MutableMapModel.SimpleIterator.SimpleIterator| () T@U)
(declare-fun Tagclass.MutableMapModel.SimpleIterator () T@U)
(declare-fun class.MutableMapModel.SimpleIterator () T@U)
(declare-fun class.MutableMapModel.__default () T@U)
(declare-fun Tagclass.MutableMapModel.__default () T@U)
(declare-fun Tagclass.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.sbyte () T@U)
(declare-fun Tagclass.NativeTypes.byte () T@U)
(declare-fun class.NativeTypes.byte () T@U)
(declare-fun Tagclass.NativeTypes.int16 () T@U)
(declare-fun class.NativeTypes.int16 () T@U)
(declare-fun Tagclass.NativeTypes.uint16 () T@U)
(declare-fun class.NativeTypes.uint16 () T@U)
(declare-fun Tagclass.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.NativeTypes.nat8 () T@U)
(declare-fun class.NativeTypes.nat8 () T@U)
(declare-fun Tagclass.NativeTypes.nat16 () T@U)
(declare-fun class.NativeTypes.nat16 () T@U)
(declare-fun Tagclass.NativeTypes.nat32 () T@U)
(declare-fun class.NativeTypes.nat32 () T@U)
(declare-fun Tagclass.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.nat64 () T@U)
(declare-fun Tagclass.NativeTypes.uint128 () T@U)
(declare-fun class.NativeTypes.uint128 () T@U)
(declare-fun class.NativeTypes.__default () T@U)
(declare-fun Tagclass.NativeTypes.__default () T@U)
(declare-fun |##Options.Option.None| () T@U)
(declare-fun |##Options.Option.Some| () T@U)
(declare-fun class.Options.Option () T@U)
(declare-fun class.Options.__default () T@U)
(declare-fun Tagclass.Options.__default () T@U)
(declare-fun class.SequencesLite.__default () T@U)
(declare-fun Tagclass.SequencesLite.__default () T@U)
(declare-fun class.Mathematics.__default () T@U)
(declare-fun Tagclass.Mathematics.__default () T@U)
(declare-fun class.Sequences.__default () T@U)
(declare-fun Tagclass.Sequences.__default () T@U)
(declare-fun class.Sets.__default () T@U)
(declare-fun Tagclass.Sets.__default () T@U)
(declare-fun class.MapRemove_s.__default () T@U)
(declare-fun Tagclass.MapRemove_s.__default () T@U)
(declare-fun class.Maps.__default () T@U)
(declare-fun Tagclass.Maps.__default () T@U)
(declare-fun class.SetBijectivity.__default () T@U)
(declare-fun Tagclass.SetBijectivity.__default () T@U)
(declare-fun class.NativeArithmetic.__default () T@U)
(declare-fun Tagclass.NativeArithmetic.__default () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1| () T@U)
(declare-fun |tytagFamily$_#Func0| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0| () T@U)
(declare-fun tytagFamily$_default () T@U)
(declare-fun |tytagFamily$_#Func2| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2| () T@U)
(declare-fun |tytagFamily$_#Func3| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3| () T@U)
(declare-fun |tytagFamily$_#Func4| () T@U)
(declare-fun |tytagFamily$_#PartialFunc4| () T@U)
(declare-fun |tytagFamily$_#TotalFunc4| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun |tytagFamily$_tuple#0| () T@U)
(declare-fun tytagFamily$Slot () T@U)
(declare-fun tytagFamily$Item () T@U)
(declare-fun tytagFamily$uint64 () T@U)
(declare-fun tytagFamily$Option () T@U)
(declare-fun tytagFamily$FixedSizeLinearHashMap () T@U)
(declare-fun tytagFamily$ProbeResult () T@U)
(declare-fun tytagFamily$LinearHashMap () T@U)
(declare-fun tytagFamily$IteratorOutput () T@U)
(declare-fun tytagFamily$Iterator () T@U)
(declare-fun tytagFamily$SimpleIterator () T@U)
(declare-fun tytagFamily$uint32 () T@U)
(declare-fun tytagFamily$sbyte () T@U)
(declare-fun tytagFamily$byte () T@U)
(declare-fun tytagFamily$int16 () T@U)
(declare-fun tytagFamily$uint16 () T@U)
(declare-fun tytagFamily$int32 () T@U)
(declare-fun tytagFamily$int64 () T@U)
(declare-fun tytagFamily$nat8 () T@U)
(declare-fun tytagFamily$nat16 () T@U)
(declare-fun tytagFamily$nat32 () T@U)
(declare-fun tytagFamily$nat64 () T@U)
(declare-fun tytagFamily$uint128 () T@U)
(declare-fun TyType () T@T)
(declare-fun TyTagType () T@T)
(declare-fun ClassNameType () T@T)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun NameFamilyType () T@T)
(declare-fun DtCtorIdType () T@T)
(declare-fun TyTagFamilyType () T@T)
(declare-fun $$Language$Dafny () Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun $Box (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#Plus| (T@U T@U) T@U)
(declare-fun |char#Minus| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun MapType1Type () T@T)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DatatypeTypeType () T@T)
(declare-fun DtRank (T@U) Int)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#LessThanLimit| (T@U T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $OneHeap () T@U)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun |Seq#Create| (T@U T@U Int T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Merge| (T@U T@U) T@U)
(declare-fun |Map#Subtract| (T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun |IMap#Merge| (T@U T@U) T@U)
(declare-fun |IMap#Subtract| (T@U T@U) T@U)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun _System.__default.rank__is__less__than (T@U T@U T@U T@U) Bool)
(declare-fun bv64Type () T@T)
(declare-fun bv64_2_U ((_ BitVec 64)) T@U)
(declare-fun U_2_bv64 (T@U) (_ BitVec 64))
(declare-fun nat_from_bv64 ((_ BitVec 64)) Int)
(declare-fun Tclass._System.nat () T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T) T@T)
(declare-fun MapType2Select (T@U T@U T@U) T@U)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2TypeInv2 (T@T) T@T)
(declare-fun MapType2Store (T@U T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.__default () T@U)
(declare-fun |_System.__default.rank__is__less__than#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |_System.__default.rank__is__less__than#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T T@T) T@T)
(declare-fun MapType3Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType3TypeInv0 (T@T) T@T)
(declare-fun MapType3TypeInv1 (T@T) T@T)
(declare-fun MapType3TypeInv2 (T@T) T@T)
(declare-fun MapType3TypeInv3 (T@T) T@T)
(declare-fun MapType3Store (T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_3 (T@U) T@U)
(declare-fun Apply3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle3 (T@U T@U T@U) T@U)
(declare-fun MapType4Type (T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType4Select (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType4TypeInv0 (T@T) T@T)
(declare-fun MapType4TypeInv1 (T@T) T@T)
(declare-fun MapType4TypeInv2 (T@T) T@T)
(declare-fun MapType4TypeInv3 (T@T) T@T)
(declare-fun MapType4TypeInv4 (T@T) T@T)
(declare-fun MapType4Store (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_4 (T@U) T@U)
(declare-fun Apply4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle4 (T@U T@U T@U) T@U)
(declare-fun MapType5Type (T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType5Select (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType5TypeInv0 (T@T) T@T)
(declare-fun MapType5TypeInv1 (T@T) T@T)
(declare-fun MapType5TypeInv2 (T@T) T@T)
(declare-fun MapType5TypeInv3 (T@T) T@T)
(declare-fun MapType5TypeInv4 (T@T) T@T)
(declare-fun MapType5TypeInv5 (T@T) T@T)
(declare-fun MapType5Store (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_4 (T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2| (T@U) Bool)
(declare-fun |_System.Tuple2#Equal| (T@U T@U) Bool)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun |#MutableMapModel.Slot.Slot| (Int) T@U)
(declare-fun MutableMapModel.Slot.Slot_q (T@U) Bool)
(declare-fun Tclass.MutableMapModel.Slot () T@U)
(declare-fun MutableMapModel.Slot.slot (T@U) Int)
(declare-fun |$IsA#MutableMapModel.Slot| (T@U) Bool)
(declare-fun |MutableMapModel.Slot#Equal| (T@U T@U) Bool)
(declare-fun |#MutableMapModel.Item.Empty| () T@U)
(declare-fun MutableMapModel.Item.Empty_q (T@U) Bool)
(declare-fun Tclass.MutableMapModel.Item (T@U) T@U)
(declare-fun Tclass.MutableMapModel.Item_0 (T@U) T@U)
(declare-fun |#MutableMapModel.Item.Entry| (Int T@U) T@U)
(declare-fun MutableMapModel.Item.Entry_q (T@U) Bool)
(declare-fun Tclass.NativeTypes.uint64 () T@U)
(declare-fun MutableMapModel.Item.key (T@U) Int)
(declare-fun MutableMapModel.Item.value (T@U) T@U)
(declare-fun |#MutableMapModel.Item.Tombstone| (Int) T@U)
(declare-fun MutableMapModel.Item.Tombstone_q (T@U) Bool)
(declare-fun |$IsA#MutableMapModel.Item| (T@U) Bool)
(declare-fun |MutableMapModel.Item#Equal| (T@U T@U) Bool)
(declare-fun |#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| (T@U Int T@U) T@U)
(declare-fun MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (T@U) Bool)
(declare-fun Tclass.Options.Option (T@U) T@U)
(declare-fun Tclass.Options.Option_0 (T@U) T@U)
(declare-fun Tclass.MutableMapModel.FixedSizeLinearHashMap (T@U) T@U)
(declare-fun Tclass.MutableMapModel.FixedSizeLinearHashMap_0 (T@U) T@U)
(declare-fun MutableMapModel.FixedSizeLinearHashMap.storage (T@U) T@U)
(declare-fun MutableMapModel.FixedSizeLinearHashMap.count (T@U) Int)
(declare-fun MutableMapModel.FixedSizeLinearHashMap.contents (T@U) T@U)
(declare-fun |$IsA#MutableMapModel.FixedSizeLinearHashMap| (T@U) Bool)
(declare-fun |MutableMapModel.FixedSizeLinearHashMap#Equal| (T@U T@U) Bool)
(declare-fun |#MutableMapModel.ProbeResult.ProbeResult| (Int Int Int) T@U)
(declare-fun MutableMapModel.ProbeResult.ProbeResult_q (T@U) Bool)
(declare-fun Tclass.MutableMapModel.ProbeResult (T@U) T@U)
(declare-fun Tclass.MutableMapModel.ProbeResult_0 (T@U) T@U)
(declare-fun MutableMapModel.ProbeResult.slotIdx (T@U) Int)
(declare-fun MutableMapModel.ProbeResult.startSlotIdx (T@U) Int)
(declare-fun MutableMapModel.ProbeResult.ghostSkips (T@U) Int)
(declare-fun |$IsA#MutableMapModel.ProbeResult| (T@U) Bool)
(declare-fun |MutableMapModel.ProbeResult#Equal| (T@U T@U) Bool)
(declare-fun |#MutableMapModel.LinearHashMap.LinearHashMap| (T@U Int T@U) T@U)
(declare-fun MutableMapModel.LinearHashMap.LinearHashMap_q (T@U) Bool)
(declare-fun Tclass.MutableMapModel.LinearHashMap (T@U) T@U)
(declare-fun Tclass.MutableMapModel.LinearHashMap_0 (T@U) T@U)
(declare-fun MutableMapModel.LinearHashMap.underlying (T@U) T@U)
(declare-fun MutableMapModel.LinearHashMap.count (T@U) Int)
(declare-fun MutableMapModel.LinearHashMap.contents (T@U) T@U)
(declare-fun |$IsA#MutableMapModel.LinearHashMap| (T@U) Bool)
(declare-fun |MutableMapModel.LinearHashMap#Equal| (T@U T@U) Bool)
(declare-fun |#MutableMapModel.IteratorOutput.Next| (Int T@U) T@U)
(declare-fun MutableMapModel.IteratorOutput.Next_q (T@U) Bool)
(declare-fun Tclass.MutableMapModel.IteratorOutput (T@U) T@U)
(declare-fun Tclass.MutableMapModel.IteratorOutput_0 (T@U) T@U)
(declare-fun MutableMapModel.IteratorOutput.key (T@U) Int)
(declare-fun MutableMapModel.IteratorOutput.value (T@U) T@U)
(declare-fun |#MutableMapModel.IteratorOutput.Done| () T@U)
(declare-fun MutableMapModel.IteratorOutput.Done_q (T@U) Bool)
(declare-fun |$IsA#MutableMapModel.IteratorOutput| (T@U) Bool)
(declare-fun |MutableMapModel.IteratorOutput#Equal| (T@U T@U) Bool)
(declare-fun |#MutableMapModel.Iterator.Iterator| (Int T@U T@U T@U) T@U)
(declare-fun MutableMapModel.Iterator.Iterator_q (T@U) Bool)
(declare-fun Tclass.MutableMapModel.Iterator (T@U) T@U)
(declare-fun Tclass.MutableMapModel.Iterator_0 (T@U) T@U)
(declare-fun MutableMapModel.Iterator.i (T@U) Int)
(declare-fun MutableMapModel.Iterator.s (T@U) T@U)
(declare-fun MutableMapModel.Iterator.decreaser (T@U) T@U)
(declare-fun MutableMapModel.Iterator.next (T@U) T@U)
(declare-fun |$IsA#MutableMapModel.Iterator| (T@U) Bool)
(declare-fun |MutableMapModel.Iterator#Equal| (T@U T@U) Bool)
(declare-fun |#MutableMapModel.SimpleIterator.SimpleIterator| (Int T@U T@U) T@U)
(declare-fun MutableMapModel.SimpleIterator.SimpleIterator_q (T@U) Bool)
(declare-fun Tclass.MutableMapModel.SimpleIterator () T@U)
(declare-fun MutableMapModel.SimpleIterator.i (T@U) Int)
(declare-fun MutableMapModel.SimpleIterator.s (T@U) T@U)
(declare-fun MutableMapModel.SimpleIterator.decreaser (T@U) T@U)
(declare-fun |$IsA#MutableMapModel.SimpleIterator| (T@U) Bool)
(declare-fun |MutableMapModel.SimpleIterator#Equal| (T@U T@U) Bool)
(declare-fun Tclass.MutableMapModel.__default () T@U)
(declare-fun MutableMapModel.__default.lshift (T@U Int Int) Int)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun $FunctionContextHeight () Int)
(declare-fun |MutableMapModel.__default.lshift#canCall| (Int Int) Bool)
(declare-fun |MutableMapModel.__default.lshift#requires| (T@U Int Int) Bool)
(declare-fun MutableMapModel.__default.rshift (T@U Int Int) Int)
(declare-fun |MutableMapModel.__default.rshift#canCall| (Int Int) Bool)
(declare-fun |MutableMapModel.__default.rshift#requires| (T@U Int Int) Bool)
(declare-fun MutableMapModel.__default.bitnot (T@U Int) Int)
(declare-fun |MutableMapModel.__default.bitnot#canCall| (Int) Bool)
(declare-fun |MutableMapModel.__default.bitnot#requires| (T@U Int) Bool)
(declare-fun MutableMapModel.__default.bitxor (T@U Int Int) Int)
(declare-fun |MutableMapModel.__default.bitxor#canCall| (Int Int) Bool)
(declare-fun |MutableMapModel.__default.bitxor#requires| (T@U Int Int) Bool)
(declare-fun MutableMapModel.__default.hash64 (T@U Int) Int)
(declare-fun |MutableMapModel.__default.hash64#canCall| (Int) Bool)
(declare-fun |MutableMapModel.__default.hash64#requires| (T@U Int) Bool)
(declare-fun |NativeArithmetic.__default.u64add#canCall| (Int Int) Bool)
(declare-fun StartFuel_MutableMapModel._default.bitnot () T@U)
(declare-fun StartFuel_MutableMapModel._default.lshift () T@U)
(declare-fun NativeArithmetic.__default.u64add (Int Int) Int)
(declare-fun StartFuel_MutableMapModel._default.rshift () T@U)
(declare-fun StartFuel_MutableMapModel._default.bitxor () T@U)
(declare-fun Tclass.NativeTypes.uint32 () T@U)
(declare-fun MutableMapModel.__default.ValidSlot (Int T@U) Bool)
(declare-fun |MutableMapModel.__default.ValidSlot#canCall| (Int T@U) Bool)
(declare-fun |MutableMapModel.__default.ValidSlot#requires| (Int T@U) Bool)
(declare-fun MutableMapModel.__default.ValidElements (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.ValidElements#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.ValidElements#requires| (T@U T@U) Bool)
(declare-fun MutableMapModel.__default.SlotForKey (Int Int) T@U)
(declare-fun |MutableMapModel.__default.SlotForKey#canCall| (Int Int) Bool)
(declare-fun |MutableMapModel.__default.SlotForKey#requires| (Int Int) Bool)
(declare-fun StartFuel_MutableMapModel._default.hash64 () T@U)
(declare-fun MutableMapModel.__default.Uint64SlotForKey (T@U T@U Int) Int)
(declare-fun |MutableMapModel.__default.Uint64SlotForKey#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.Uint64SlotForKey#requires| (T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.SlotSuccessor (Int T@U) T@U)
(declare-fun |MutableMapModel.__default.SlotSuccessor#canCall| (Int T@U) Bool)
(declare-fun |MutableMapModel.__default.SlotSuccessor#requires| (Int T@U) Bool)
(declare-fun MutableMapModel.__default.KthSlotSuccessor (T@U Int T@U Int) T@U)
(declare-fun |MutableMapModel.__default.KthSlotSuccessor#canCall| (Int T@U Int) Bool)
(declare-fun |MutableMapModel.__default.KthSlotSuccessor#requires| (T@U Int T@U Int) Bool)
(declare-fun MutableMapModel.__default.SlotIsEmpty (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SlotIsEmpty#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SlotIsEmpty#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.SlotIsEntry (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SlotIsEntry#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SlotIsEntry#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.SlotIsTombstone (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SlotIsTombstone#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SlotIsTombstone#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.FilledWithOtherKey (T@U T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.FilledWithOtherKey#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.FilledWithOtherKey#requires| (T@U T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.FilledWithOtherKeys (T@U T@U T@U Int Int) Bool)
(declare-fun |MutableMapModel.__default.FilledWithOtherKeys#canCall| (T@U T@U T@U Int Int) Bool)
(declare-fun |MutableMapModel.__default.FilledWithOtherKeys#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun MutableMapModel.__default.FilledWithKey (T@U T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.FilledWithKey#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.FilledWithKey#requires| (T@U T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.FilledWithEntryKey (T@U T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.FilledWithEntryKey#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.FilledWithEntryKey#requires| (T@U T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.SlotExplainsKey (T@U T@U Int Int) Bool)
(declare-fun |MutableMapModel.__default.SlotExplainsKey#canCall| (T@U T@U Int Int) Bool)
(declare-fun |MutableMapModel.__default.SlotExplainsKey#requires| (T@U T@U Int Int) Bool)
(declare-fun MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey (T@U T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey#requires| (T@U T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.SameSlot (Int T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SameSlot#canCall| (Int T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SameSlot#requires| (Int T@U T@U) Bool)
(declare-fun MutableMapModel.__default.CantEquivocateStorageKey (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.CantEquivocateStorageKey#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.CantEquivocateStorageKey#requires| (T@U T@U) Bool)
(declare-fun MutableMapModel.__default.KeyInSlotIsInContents (T@U T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.KeyInSlotIsInContents#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.KeyInSlotIsInContents#requires| (T@U T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.SeqMatchesContentKeys (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SeqMatchesContentKeys#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SeqMatchesContentKeys#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.EntryInSlotMatchesContents (T@U T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.EntryInSlotMatchesContents#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.EntryInSlotMatchesContents#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |$IsA#Options.Option| (T@U) Bool)
(declare-fun |Options.Option#Equal| (T@U T@U) Bool)
(declare-fun |#Options.Option.Some| (T@U) T@U)
(declare-fun MutableMapModel.__default.TombstoneInSlotMatchesContents (T@U T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.TombstoneInSlotMatchesContents#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.TombstoneInSlotMatchesContents#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Options.Option.None_q (T@U) Bool)
(declare-fun MutableMapModel.__default.EntriesMatchContentValue (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.EntriesMatchContentValue#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.EntriesMatchContentValue#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.TombstonesMatchContentValue (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.TombstonesMatchContentValue#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.TombstonesMatchContentValue#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.FixedSizeInv (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.FixedSizeInv#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.FixedSizeInv#requires| (T@U T@U) Bool)
(declare-fun MutableMapModel.__default.IndexSetThrough (T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.IndexSetThrough#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.IndexSetThrough#requires| (T@U T@U Int) Bool)
(declare-fun |lambda#56| (T@U Int Int T@U T@U) T@U)
(declare-fun MutableMapModel.__default.IndexSet (T@U T@U) T@U)
(declare-fun |MutableMapModel.__default.IndexSet#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.IndexSet#requires| (T@U T@U) Bool)
(declare-fun MutableMapModel.__default.Count1 (T@U T@U) Int)
(declare-fun |MutableMapModel.__default.Count1#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.Count1#requires| (T@U T@U) Bool)
(declare-fun MutableMapModel.__default.CountFilled (T@U T@U T@U) Int)
(declare-fun |MutableMapModel.__default.CountFilled#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.CountFilled#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.ConstructorFromSize (T@U Int) T@U)
(declare-fun |MutableMapModel.__default.ConstructorFromSize#canCall| (T@U Int) Bool)
(declare-fun |MutableMapModel.__default.ConstructorFromSize#requires| (T@U Int) Bool)
(declare-fun |Sequences.__default.SeqOfLength#canCall| (T@U Int T@U) Bool)
(declare-fun Sequences.__default.SeqOfLength (T@U T@U Int T@U) T@U)
(declare-fun StartFuel_Sequences._default.SeqOfLength () T@U)
(declare-fun MutableMapModel.__default.ConstructorFromStorage (T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.ConstructorFromStorage#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.ConstructorFromStorage#requires| (T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.View (T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.View#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.View#requires| (T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.Uint64SlotSuccessor (Int Int) Int)
(declare-fun |MutableMapModel.__default.Uint64SlotSuccessor#canCall| (Int Int) Bool)
(declare-fun |MutableMapModel.__default.Uint64SlotSuccessor#requires| (Int Int) Bool)
(declare-fun MutableMapModel.__default.getEmptyWitness (T@U T@U T@U Int) Int)
(declare-fun |MutableMapModel.__default.getEmptyWitness#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.getEmptyWitness#requires| (T@U T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.ProbeIterate (T@U T@U T@U Int Int) Int)
(declare-fun |MutableMapModel.__default.ProbeIterate#canCall| (T@U T@U Int Int) Bool)
(declare-fun |MutableMapModel.__default.ProbeIterate#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun MutableMapModel.__default.Probe (T@U T@U T@U Int) Int)
(declare-fun |MutableMapModel.__default.Probe#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.Probe#requires| (T@U T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.FixedSizeInsert (T@U T@U T@U Int T@U) T@U)
(declare-fun |MutableMapModel.__default.FixedSizeInsert#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |MutableMapModel.__default.FixedSizeInsert#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun StartFuel_MutableMapModel._default.Probe () T@U)
(declare-fun |#Options.Option.None| () T@U)
(declare-fun MutableMapModel.__default.FixedSizeUpdateBySlot (T@U T@U Int T@U) T@U)
(declare-fun |MutableMapModel.__default.FixedSizeUpdateBySlot#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |MutableMapModel.__default.FixedSizeUpdateBySlot#requires| (T@U T@U Int T@U) Bool)
(declare-fun MutableMapModel.__default.FixedSizeGet (T@U T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.FixedSizeGet#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.FixedSizeGet#requires| (T@U T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.FixedSizeRemove (T@U T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.FixedSizeRemove#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.FixedSizeRemove#requires| (T@U T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.MapFromStorage (T@U T@U T@U) T@U)
(declare-fun |MutableMapModel.__default.MapFromStorage#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.MapFromStorage#requires| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun Sequences.__default.DropLast (T@U T@U) T@U)
(declare-fun Sequences.__default.Last (T@U T@U) T@U)
(declare-fun MutableMapModel.__default.CantEquivocate (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.CantEquivocate#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.CantEquivocate#requires| (T@U T@U) Bool)
(declare-fun MutableMapModel.__default.UnderlyingContentsMatchesContents (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.UnderlyingContentsMatchesContents#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.UnderlyingInv (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.UnderlyingInv#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.UnderlyingInv#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.Inv (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.Inv#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.Inv#requires| (T@U T@U) Bool)
(declare-fun MutableMapModel.__default.Constructor (T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.Constructor#canCall| (T@U Int) Bool)
(declare-fun |MutableMapModel.__default.Constructor#requires| (T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.ReallocIterate (T@U T@U T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.ReallocIterate#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.ReallocIterate#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun StartFuel_MutableMapModel._default.FixedSizeInsert () T@U)
(declare-fun MutableMapModel.__default.ReallocInternal (T@U T@U T@U) T@U)
(declare-fun |MutableMapModel.__default.ReallocInternal#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.ReallocInternal#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.Realloc (T@U T@U) T@U)
(declare-fun |MutableMapModel.__default.Realloc#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.Realloc#requires| (T@U T@U) Bool)
(declare-fun StartFuel_MutableMapModel._default.ReallocInternal () T@U)
(declare-fun MutableMapModel.__default.InsertAndGetOld (T@U T@U T@U Int T@U) T@U)
(declare-fun |MutableMapModel.__default.InsertAndGetOld#canCall| (T@U T@U Int T@U) Bool)
(declare-fun Options.Option.Some_q (T@U) Bool)
(declare-fun Maps.__default.MapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun Options.Option.value (T@U) T@U)
(declare-fun |MutableMapModel.__default.InsertAndGetOld#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun MutableMapModel.__default.Insert (T@U T@U T@U Int T@U) T@U)
(declare-fun |MutableMapModel.__default.Insert#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |MutableMapModel.__default.Insert#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun StartFuel_MutableMapModel._default.InsertAndGetOld () T@U)
(declare-fun MutableMapModel.__default.RemoveInternal (T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.RemoveInternal#canCall| (T@U T@U Int) Bool)
(declare-fun StartFuel_MutableMapModel._default.FixedSizeRemove () T@U)
(declare-fun |MutableMapModel.__default.RemoveInternal#requires| (T@U T@U Int) Bool)
(declare-fun |lambda#145| (T@U T@U Int) T@U)
(declare-fun |lambda#146| (T@U) T@U)
(declare-fun MutableMapModel.__default.RemoveAndGet (T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.RemoveAndGet#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.RemoveAndGet#requires| (T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.Remove (T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.Remove#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.Remove#requires| (T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.Get (T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.Get#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.Get#requires| (T@U T@U Int) Bool)
(declare-fun StartFuel_MutableMapModel._default.FixedSizeGet () T@U)
(declare-fun MutableMapModel.__default.NextExplainedByI (T@U T@U Int T@U) Bool)
(declare-fun |MutableMapModel.__default.NextExplainedByI#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |MutableMapModel.__default.NextExplainedByI#requires| (T@U T@U Int T@U) Bool)
(declare-fun MutableMapModel.__default.ValidI (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.ValidI#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.ValidI#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex (T@U T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex#requires| (T@U T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.WFIter (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.WFIter#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.WFIter#requires| (T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.WFSimpleIter (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.WFSimpleIter#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.WFSimpleIter#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.indexOutput (T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.indexOutput#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.indexOutput#requires| (T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.SimpleIterOutput (T@U T@U T@U) T@U)
(declare-fun |MutableMapModel.__default.SimpleIterOutput#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SimpleIterOutput#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.iterToNext (T@U T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.iterToNext#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.iterToNext#requires| (T@U T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.simpleIterToNext (T@U T@U T@U Int) Int)
(declare-fun |MutableMapModel.__default.simpleIterToNext#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.simpleIterToNext#requires| (T@U T@U T@U Int) Bool)
(declare-fun MutableMapModel.__default.IterStart (T@U T@U T@U) T@U)
(declare-fun |MutableMapModel.__default.IterStart#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.IterStart#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.SimpleIterStart (T@U T@U T@U) T@U)
(declare-fun |MutableMapModel.__default.SimpleIterStart#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SimpleIterStart#requires| (T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.IterInc (T@U T@U T@U T@U) T@U)
(declare-fun |MutableMapModel.__default.IterInc#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.IterInc#requires| (T@U T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.SimpleIterInc (T@U T@U T@U T@U) T@U)
(declare-fun |MutableMapModel.__default.SimpleIterInc#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.SimpleIterInc#requires| (T@U T@U T@U T@U) Bool)
(declare-fun MutableMapModel.__default.MaxKeyIterate (T@U T@U T@U T@U Int) Int)
(declare-fun |MutableMapModel.__default.MaxKeyIterate#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.MaxKeyIterate#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun StartFuel_MutableMapModel._default.IterInc () T@U)
(declare-fun MutableMapModel.__default.MaxKey (T@U T@U T@U) Int)
(declare-fun |MutableMapModel.__default.MaxKey#canCall| (T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.MaxKey#requires| (T@U T@U T@U) Bool)
(declare-fun StartFuel_MutableMapModel._default.IterStart () T@U)
(declare-fun MutableMapModel.__default.UpdateByIter (T@U T@U T@U T@U T@U) T@U)
(declare-fun |MutableMapModel.__default.UpdateByIter#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.UpdateByIter#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |MutableMapModel.__default.UpdateByIter#Handle| (T@U T@U) T@U)
(declare-fun MutableMapModel.__default.setUpTo (T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.setUpTo#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.setUpTo#requires| (T@U T@U Int) Bool)
(declare-fun |lambda#221| (Int Int T@U T@U T@U) T@U)
(declare-fun MutableMapModel.__default.FindSimpleIter (T@U T@U T@U Int) T@U)
(declare-fun |MutableMapModel.__default.FindSimpleIter#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableMapModel.__default.FindSimpleIter#requires| (T@U T@U T@U Int) Bool)
(declare-fun Tclass.NativeTypes.sbyte () T@U)
(declare-fun Tclass.NativeTypes.byte () T@U)
(declare-fun Tclass.NativeTypes.int16 () T@U)
(declare-fun Tclass.NativeTypes.uint16 () T@U)
(declare-fun Tclass.NativeTypes.int32 () T@U)
(declare-fun Tclass.NativeTypes.int64 () T@U)
(declare-fun Tclass.NativeTypes.nat8 () T@U)
(declare-fun Tclass.NativeTypes.nat16 () T@U)
(declare-fun Tclass.NativeTypes.nat32 () T@U)
(declare-fun Tclass.NativeTypes.nat64 () T@U)
(declare-fun Tclass.NativeTypes.uint128 () T@U)
(declare-fun Tclass.NativeTypes.__default () T@U)
(declare-fun NativeTypes.__default.Uint64Size () Int)
(declare-fun |NativeTypes.__default.Uint64Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32Size () Int)
(declare-fun |NativeTypes.__default.Uint32Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint16Size () Int)
(declare-fun |NativeTypes.__default.Uint16Size#requires| () Bool)
(declare-fun |NativeTypes.__default.Uint64UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint64UpperBound () Int)
(declare-fun |NativeTypes.__default.Uint32UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32UpperBound () Int)
(declare-fun Tclass.Options.__default () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun Options.__default.MapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.MapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.MapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Options.__default.FlatMapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.FlatMapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.FlatMapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Tclass.SequencesLite.__default () T@U)
(declare-fun SequencesLite.__default.Last (T@U T@U) T@U)
(declare-fun |SequencesLite.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun |SequencesLite.__default.Last#requires| (T@U T@U) Bool)
(declare-fun SequencesLite.__default.DropLast (T@U T@U) T@U)
(declare-fun |SequencesLite.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun |SequencesLite.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun Tclass.Mathematics.__default () T@U)
(declare-fun Mathematics.__default.min (Int Int) Int)
(declare-fun |Mathematics.__default.min#requires| (Int Int) Bool)
(declare-fun Mathematics.__default.max (Int Int) Int)
(declare-fun |Mathematics.__default.max#requires| (Int Int) Bool)
(declare-fun Mathematics.__default.Set (T@U T@U) T@U)
(declare-fun |Mathematics.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.Set#requires| (T@U T@U) Bool)
(declare-fun |lambda#230| (T@U T@U Int) T@U)
(declare-fun Mathematics.__default.ISet (T@U T@U) T@U)
(declare-fun |Mathematics.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun |lambda#232| (T@U T@U) T@U)
(declare-fun Tclass.Sequences.__default () T@U)
(declare-fun |Sequences.__default.Last#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.FirstOpt (T@U T@U) T@U)
(declare-fun |Sequences.__default.FirstOpt#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FirstOpt#requires| (T@U T@U) Bool)
(declare-fun |Sequences.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Set (T@U T@U) T@U)
(declare-fun |Sequences.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Set#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.ISet (T@U T@U) T@U)
(declare-fun |Sequences.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.NoDupes (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IndexOf (T@U T@U T@U) Int)
(declare-fun |Sequences.__default.IndexOf#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IndexOf#requires| (T@U T@U T@U) Bool)
(declare-fun |$let#0_i| (T@U T@U T@U) Int)
(declare-fun |$let#0$canCall| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Range (T@U Int) T@U)
(declare-fun |Sequences.__default.Range#canCall| (Int) Bool)
(declare-fun |Sequences.__default.Range#requires| (T@U Int) Bool)
(declare-fun Sequences.__default.Apply (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Apply#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Apply#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.ApplyOpaque (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.ApplyOpaque#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.ApplyOpaque#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Filter (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Filter#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Filter#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldLeft (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldLeft#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldLeft#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldFromRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldFromRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldFromRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.remove (T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.remove#canCall| (T@U T@U Int) Bool)
(declare-fun |Sequences.__default.remove#requires| (T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.RemoveOneValue (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.RemoveOneValue#canCall| (T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.NoDupes () T@U)
(declare-fun |Sequences.__default.RemoveOneValue#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |$let#4_i| (T@U T@U T@U) Int)
(declare-fun |$let#4$canCall| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.NoDupes0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.NoDupes () T@U)
(declare-fun MoreFuel_Sequences._default.NoDupes1 () T@U)
(declare-fun MoreFuel_Sequences._default.NoDupes2 () T@U)
(declare-fun Sequences.__default.insert (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.insert#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.insert#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace1with2 (T@U T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace1with2#canCall| (T@U T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace1with2#requires| (T@U T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace2with1 (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace2with1#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace2with1#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.concat (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concat3 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat3#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat3#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concatSeq (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concatSeq#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.concatSeq#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsPrefix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsSuffix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.SeqIndexIterate (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.SeqIndexIterate#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.SeqIndexIterate#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.SeqIndex (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.SeqIndex#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.SeqIndex#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.SeqIndexIterate () T@U)
(declare-fun |Sequences.__default.SeqOfLength#requires| (T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.SeqIndexUpdate (T@U T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqIndexUpdate#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqIndexUpdate#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.Zip (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Zip#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Zip#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Unzip (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Unzip#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Unzip#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenShape (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FlattenShape#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FlattenShape#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenLength (T@U T@U) Int)
(declare-fun |Sequences.__default.FlattenLength#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.FlattenLength#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Flatten (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Flatten#canCall| (T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuel_Sequences._default.FlattenShape () T@U)
(declare-fun |Sequences.__default.Flatten#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenShape0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenShape () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenShape1 () T@U)
(declare-fun Sequences.__default.FlattenIndex (T@U Int Int) Int)
(declare-fun |Sequences.__default.FlattenIndex#canCall| (T@U Int Int) Bool)
(declare-fun |Sequences.__default.FlattenIndex#requires| (T@U Int Int) Bool)
(declare-fun Sequences.__default.UnflattenIndex (T@U T@U Int) T@U)
(declare-fun |Sequences.__default.UnflattenIndex#canCall| (T@U Int) Bool)
(declare-fun |Sequences.__default.UnflattenIndex#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenLength0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenLength () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenLength1 () T@U)
(declare-fun Sequences.__default.seqMax (T@U T@U) Int)
(declare-fun |Sequences.__default.seqMax#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.seqMax#requires| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.max#canCall| (Int Int) Bool)
(declare-fun Sequences.__default.fill (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.fill#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.fill#requires| (T@U T@U Int T@U) Bool)
(declare-fun Tclass.Sets.__default () T@U)
(declare-fun Sets.__default.SetRange (Int) T@U)
(declare-fun |Sets.__default.SetRange#requires| (Int) Bool)
(declare-fun |lambda#84| (T@U Int Int) T@U)
(declare-fun Tclass.MapRemove_s.__default () T@U)
(declare-fun MapRemove_s.__default.MapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |MapRemove_s.__default.MapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MapRemove_s.__default.MapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#241| (T@U T@U T@U) T@U)
(declare-fun Tclass.Maps.__default () T@U)
(declare-fun Maps.__default.IMapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubIMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#247| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapRemoveStrong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemoveStrong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemoveStrong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove0 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove1 () T@U)
(declare-fun Maps.__default.MapRemove1 (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove1#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_MapRemove_s._default.MapRemove1 () T@U)
(declare-fun Maps.__default.MapRemove1Strong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove1Strong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove1Strong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun MoreFuel_MapRemove_s._default.MapRemove10 () T@U)
(declare-fun StartFuelAssert_MapRemove_s._default.MapRemove1 () T@U)
(declare-fun MoreFuel_MapRemove_s._default.MapRemove11 () T@U)
(declare-fun MoreFuel_MapRemove_s._default.MapRemove12 () T@U)
(declare-fun Maps.__default.IMapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#259| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapIRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapIRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapIRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapDisjointUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapDisjointUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapDisjointUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#274| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapUnionPreferA () T@U)
(declare-fun Maps.__default.IMapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.IMapUnionPreferA () T@U)
(declare-fun Maps.__default.MapDisjointUnion3 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapDisjointUnion3#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapDisjointUnion () T@U)
(declare-fun |Maps.__default.MapDisjointUnion3#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#294| (T@U T@U T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapToImap (T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapToImap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapToImap#requires| (T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.ImapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.ImapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.ImapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass.SetBijectivity.__default () T@U)
(declare-fun Tclass.NativeArithmetic.__default () T@U)
(declare-fun |NativeArithmetic.__default.u64add#requires| (Int Int) Bool)
(declare-fun MapType6Select (T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType6Type (T@T T@T) T@T)
(declare-fun MapType6TypeInv0 (T@T) T@T)
(declare-fun MapType6TypeInv1 (T@T) T@T)
(declare-fun MapType6Store (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#1| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#3| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#4| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#5| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#6| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#7| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#8| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#9| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#10| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#11| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#12| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#13| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#14| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#15| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#16| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#17| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#18| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#19| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#20| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#21| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#22| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#23| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#24| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#25| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#26| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#27| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#28| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#29| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#30| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#31| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#32| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#33| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#34| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#35| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#36| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#37| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#38| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#39| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#40| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#41| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#42| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#43| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#44| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#45| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#46| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#47| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#48| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#49| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#50| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#51| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#52| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#53| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#54| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#55| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#58| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#59| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#61| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#62| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#63| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#64| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#65| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#66| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#67| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#68| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#69| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#70| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#71| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#72| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#73| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#74| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#75| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#76| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#77| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#78| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#79| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#80| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#81| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#82| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#83| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#85| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#86| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#87| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#88| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#89| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#90| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#91| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#92| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#93| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#94| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#95| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#96| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#97| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#98| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#99| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#100| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#101| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#102| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#103| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#104| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#105| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#106| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#107| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#108| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#109| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#110| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#111| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#112| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#113| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#114| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#115| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#116| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#117| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#118| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#119| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#120| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#121| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#122| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#123| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#124| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#125| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#126| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#127| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#128| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#129| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#130| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#131| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#132| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#133| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#134| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#135| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#136| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#137| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#138| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#139| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#140| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#141| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#142| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#143| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#144| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#153| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#154| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#157| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#158| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#163| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#164| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#173| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#174| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#177| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#178| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#179| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#180| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#181| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#182| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#183| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#184| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#185| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#186| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#187| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#188| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#189| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#190| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#191| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#192| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#193| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#194| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#195| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#196| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#197| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#198| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#199| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#200| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#201| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#202| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#203| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#204| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#205| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#206| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#207| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#208| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#209| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#210| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#211| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#212| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#213| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#214| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#215| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#216| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#217| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#218| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#219| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#220| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#223| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#224| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#226| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#227| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#228| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#229| (T@U T@U T@U Bool) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0) :qid |typeInv:U_2_int| :pattern ( (int_2_U arg0)) ))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :qid |cast:U_2_int| :pattern ( (U_2_int x)) ))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType) :qid |funType:int_2_U| :pattern ( (int_2_U arg0@@0)) ))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :qid |typeInv:U_2_real| :pattern ( (real_2_U arg0@@1)) ))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :qid |cast:U_2_real| :pattern ( (U_2_real x@@0)) ))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType) :qid |funType:real_2_U| :pattern ( (real_2_U arg0@@2)) ))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :qid |typeInv:U_2_bool| :pattern ( (bool_2_U arg0@@3)) ))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :qid |cast:U_2_bool| :pattern ( (U_2_bool x@@1)) ))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType) :qid |funType:bool_2_U| :pattern ( (bool_2_U arg0@@4)) ))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :qid |typeInv:U_2_rmode| :pattern ( (rmode_2_U arg0@@5)) ))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2)) :qid |cast:U_2_rmode| :pattern ( (U_2_rmode x@@2)) ))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType) :qid |funType:rmode_2_U| :pattern ( (rmode_2_U arg0@@6)) ))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7) :qid |typeInv:U_2_string| :pattern ( (string_2_U arg0@@7)) ))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3)) :qid |cast:U_2_string| :pattern ( (U_2_string x@@3)) ))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType) :qid |funType:string_2_U| :pattern ( (string_2_U arg0@@8)) ))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9) :qid |typeInv:U_2_regex| :pattern ( (regex_2_U arg0@@9)) ))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4)) :qid |cast:U_2_regex| :pattern ( (U_2_regex x@@4)) ))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType) :qid |funType:regex_2_U| :pattern ( (regex_2_U arg0@@10)) ))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5) :qid |bg:subtype-refl| :no-pattern (U_2_int x@@5) :no-pattern (U_2_bool x@@5) )))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6))) (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z))) :qid |bg:subtype-trans| :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z)) )))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7))) (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0)))) :qid |bg:subtype-antisymm| :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor TyType) 6) (= (type TBool) TyType)) (= (type TChar) TyType)) (= (type TInt) TyType)) (= (type TReal) TyType)) (= (type TORDINAL) TyType)) (= (Ctor TyTagType) 7)) (= (type TagBool) TyTagType)) (= (type TagChar) TyTagType)) (= (type TagInt) TyTagType)) (= (type TagReal) TyTagType)) (= (type TagORDINAL) TyTagType)) (= (type TagSet) TyTagType)) (= (type TagISet) TyTagType)) (= (type TagMultiSet) TyTagType)) (= (type TagSeq) TyTagType)) (= (type TagMap) TyTagType)) (= (type TagIMap) TyTagType)) (= (type TagClass) TyTagType)) (= (Ctor ClassNameType) 8)) (= (type class._System.int) ClassNameType)) (= (type class._System.bool) ClassNameType)) (= (type class._System.set) ClassNameType)) (= (type class._System.seq) ClassNameType)) (= (type class._System.multiset) ClassNameType)) (forall ((arg0@@11 T@T) ) (! (= (Ctor (FieldType arg0@@11)) 9) :qid |ctor:FieldType| ))) (forall ((arg0@@12 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12)) arg0@@12) :qid |typeInv:FieldTypeInv0| :pattern ( (FieldType arg0@@12)) ))) (= (type alloc) (FieldType boolType))) (= (Ctor NameFamilyType) 10)) (= (type allocName) NameFamilyType)) (= (type Tagclass._System.nat) TyTagType)) (= (type class._System.object?) ClassNameType)) (= (type Tagclass._System.object?) TyTagType)) (= (type Tagclass._System.object) TyTagType)) (= (type class._System.array?) ClassNameType)) (= (type Tagclass._System.array?) TyTagType)) (= (type Tagclass._System.array) TyTagType)) (= (type Tagclass._System.___hFunc1) TyTagType)) (= (type Tagclass._System.___hPartialFunc1) TyTagType)) (= (type Tagclass._System.___hTotalFunc1) TyTagType)) (= (type Tagclass._System.___hFunc0) TyTagType)) (= (type Tagclass._System.___hPartialFunc0) TyTagType)) (= (type Tagclass._System.___hTotalFunc0) TyTagType)) (= (type class._System.__default) ClassNameType)) (= (type Tagclass._System.__default) TyTagType)) (= (type Tagclass._System.___hFunc2) TyTagType)) (= (type Tagclass._System.___hPartialFunc2) TyTagType)) (= (type Tagclass._System.___hTotalFunc2) TyTagType)) (= (type Tagclass._System.___hFunc3) TyTagType)) (= (type Tagclass._System.___hPartialFunc3) TyTagType)) (= (type Tagclass._System.___hTotalFunc3) TyTagType)) (= (type Tagclass._System.___hFunc4) TyTagType)) (= (type Tagclass._System.___hPartialFunc4) TyTagType)) (= (type Tagclass._System.___hTotalFunc4) TyTagType)) (= (Ctor DtCtorIdType) 11)) (= (type |##_System._tuple#2._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2) TyTagType)) (= (type class._System.Tuple2) ClassNameType)) (= (type |##_System._tuple#0._#Make0|) DtCtorIdType)) (= (type Tagclass._System.Tuple0) TyTagType)) (= (type class._System.Tuple0) ClassNameType)) (= (type |##MutableMapModel.Slot.Slot|) DtCtorIdType)) (= (type Tagclass.MutableMapModel.Slot) TyTagType)) (= (type class.MutableMapModel.Slot) ClassNameType)) (= (type |##MutableMapModel.Item.Empty|) DtCtorIdType)) (= (type Tagclass.MutableMapModel.Item) TyTagType)) (= (type |##MutableMapModel.Item.Entry|) DtCtorIdType)) (= (type Tagclass.NativeTypes.uint64) TyTagType)) (= (type |##MutableMapModel.Item.Tombstone|) DtCtorIdType)) (= (type class.MutableMapModel.Item) ClassNameType)) (= (type |##MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap|) DtCtorIdType)) (= (type Tagclass.Options.Option) TyTagType)) (= (type Tagclass.MutableMapModel.FixedSizeLinearHashMap) TyTagType)) (= (type class.MutableMapModel.FixedSizeLinearHashMap) ClassNameType)) (= (type |##MutableMapModel.ProbeResult.ProbeResult|) DtCtorIdType)) (= (type Tagclass.MutableMapModel.ProbeResult) TyTagType)) (= (type class.MutableMapModel.ProbeResult) ClassNameType)) (= (type |##MutableMapModel.LinearHashMap.LinearHashMap|) DtCtorIdType)) (= (type Tagclass.MutableMapModel.LinearHashMap) TyTagType)) (= (type class.MutableMapModel.LinearHashMap) ClassNameType)) (= (type |##MutableMapModel.IteratorOutput.Next|) DtCtorIdType)) (= (type Tagclass.MutableMapModel.IteratorOutput) TyTagType)) (= (type |##MutableMapModel.IteratorOutput.Done|) DtCtorIdType)) (= (type class.MutableMapModel.IteratorOutput) ClassNameType)) (= (type |##MutableMapModel.Iterator.Iterator|) DtCtorIdType)) (= (type Tagclass.MutableMapModel.Iterator) TyTagType)) (= (type class.MutableMapModel.Iterator) ClassNameType)) (= (type |##MutableMapModel.SimpleIterator.SimpleIterator|) DtCtorIdType)) (= (type Tagclass.MutableMapModel.SimpleIterator) TyTagType)) (= (type class.MutableMapModel.SimpleIterator) ClassNameType)) (= (type class.MutableMapModel.__default) ClassNameType)) (= (type Tagclass.MutableMapModel.__default) TyTagType)) (= (type Tagclass.NativeTypes.uint32) TyTagType)) (= (type Tagclass.NativeTypes.sbyte) TyTagType)) (= (type class.NativeTypes.sbyte) ClassNameType)) (= (type Tagclass.NativeTypes.byte) TyTagType)) (= (type class.NativeTypes.byte) ClassNameType)) (= (type Tagclass.NativeTypes.int16) TyTagType)) (= (type class.NativeTypes.int16) ClassNameType)) (= (type Tagclass.NativeTypes.uint16) TyTagType)) (= (type class.NativeTypes.uint16) ClassNameType)) (= (type Tagclass.NativeTypes.int32) TyTagType)) (= (type class.NativeTypes.int32) ClassNameType)) (= (type class.NativeTypes.uint32) ClassNameType)) (= (type Tagclass.NativeTypes.int64) TyTagType)) (= (type class.NativeTypes.int64) ClassNameType)) (= (type class.NativeTypes.uint64) ClassNameType)) (= (type Tagclass.NativeTypes.nat8) TyTagType)) (= (type class.NativeTypes.nat8) ClassNameType)) (= (type Tagclass.NativeTypes.nat16) TyTagType)) (= (type class.NativeTypes.nat16) ClassNameType)) (= (type Tagclass.NativeTypes.nat32) TyTagType)) (= (type class.NativeTypes.nat32) ClassNameType)) (= (type Tagclass.NativeTypes.nat64) TyTagType)) (= (type class.NativeTypes.nat64) ClassNameType)) (= (type Tagclass.NativeTypes.uint128) TyTagType)) (= (type class.NativeTypes.uint128) ClassNameType)) (= (type class.NativeTypes.__default) ClassNameType)) (= (type Tagclass.NativeTypes.__default) TyTagType)) (= (type |##Options.Option.None|) DtCtorIdType)) (= (type |##Options.Option.Some|) DtCtorIdType)) (= (type class.Options.Option) ClassNameType)) (= (type class.Options.__default) ClassNameType)) (= (type Tagclass.Options.__default) TyTagType)) (= (type class.SequencesLite.__default) ClassNameType)) (= (type Tagclass.SequencesLite.__default) TyTagType)) (= (type class.Mathematics.__default) ClassNameType)) (= (type Tagclass.Mathematics.__default) TyTagType)) (= (type class.Sequences.__default) ClassNameType)) (= (type Tagclass.Sequences.__default) TyTagType)) (= (type class.Sets.__default) ClassNameType)) (= (type Tagclass.Sets.__default) TyTagType)) (= (type class.MapRemove_s.__default) ClassNameType)) (= (type Tagclass.MapRemove_s.__default) TyTagType)) (= (type class.Maps.__default) ClassNameType)) (= (type Tagclass.Maps.__default) TyTagType)) (= (type class.SetBijectivity.__default) ClassNameType)) (= (type Tagclass.SetBijectivity.__default) TyTagType)) (= (type class.NativeArithmetic.__default) ClassNameType)) (= (type Tagclass.NativeArithmetic.__default) TyTagType)) (= (Ctor TyTagFamilyType) 12)) (= (type tytagFamily$nat) TyTagFamilyType)) (= (type tytagFamily$object) TyTagFamilyType)) (= (type tytagFamily$array) TyTagFamilyType)) (= (type |tytagFamily$_#Func1|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1|) TyTagFamilyType)) (= (type |tytagFamily$_#Func0|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc0|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc0|) TyTagFamilyType)) (= (type tytagFamily$_default) TyTagFamilyType)) (= (type |tytagFamily$_#Func2|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3|) TyTagFamilyType)) (= (type |tytagFamily$_#Func4|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc4|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc4|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#2|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#0|) TyTagFamilyType)) (= (type tytagFamily$Slot) TyTagFamilyType)) (= (type tytagFamily$Item) TyTagFamilyType)) (= (type tytagFamily$uint64) TyTagFamilyType)) (= (type tytagFamily$Option) TyTagFamilyType)) (= (type tytagFamily$FixedSizeLinearHashMap) TyTagFamilyType)) (= (type tytagFamily$ProbeResult) TyTagFamilyType)) (= (type tytagFamily$LinearHashMap) TyTagFamilyType)) (= (type tytagFamily$IteratorOutput) TyTagFamilyType)) (= (type tytagFamily$Iterator) TyTagFamilyType)) (= (type tytagFamily$SimpleIterator) TyTagFamilyType)) (= (type tytagFamily$uint32) TyTagFamilyType)) (= (type tytagFamily$sbyte) TyTagFamilyType)) (= (type tytagFamily$byte) TyTagFamilyType)) (= (type tytagFamily$int16) TyTagFamilyType)) (= (type tytagFamily$uint16) TyTagFamilyType)) (= (type tytagFamily$int32) TyTagFamilyType)) (= (type tytagFamily$int64) TyTagFamilyType)) (= (type tytagFamily$nat8) TyTagFamilyType)) (= (type tytagFamily$nat16) TyTagFamilyType)) (= (type tytagFamily$nat32) TyTagFamilyType)) (= (type tytagFamily$nat64) TyTagFamilyType)) (= (type tytagFamily$uint128) TyTagFamilyType)))
(assert (distinct TBool TChar TInt TReal TORDINAL TagBool TagChar TagInt TagReal TagORDINAL TagSet TagISet TagMultiSet TagSeq TagMap TagIMap TagClass class._System.int class._System.bool class._System.set class._System.seq class._System.multiset alloc allocName Tagclass._System.nat class._System.object? Tagclass._System.object? Tagclass._System.object class._System.array? Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass._System.___hFunc0 Tagclass._System.___hPartialFunc0 Tagclass._System.___hTotalFunc0 class._System.__default Tagclass._System.__default Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 Tagclass._System.___hFunc3 Tagclass._System.___hPartialFunc3 Tagclass._System.___hTotalFunc3 Tagclass._System.___hFunc4 Tagclass._System.___hPartialFunc4 Tagclass._System.___hTotalFunc4 |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 class._System.Tuple2 |##_System._tuple#0._#Make0| Tagclass._System.Tuple0 class._System.Tuple0 |##MutableMapModel.Slot.Slot| Tagclass.MutableMapModel.Slot class.MutableMapModel.Slot |##MutableMapModel.Item.Empty| Tagclass.MutableMapModel.Item |##MutableMapModel.Item.Entry| Tagclass.NativeTypes.uint64 |##MutableMapModel.Item.Tombstone| class.MutableMapModel.Item |##MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| Tagclass.Options.Option Tagclass.MutableMapModel.FixedSizeLinearHashMap class.MutableMapModel.FixedSizeLinearHashMap |##MutableMapModel.ProbeResult.ProbeResult| Tagclass.MutableMapModel.ProbeResult class.MutableMapModel.ProbeResult |##MutableMapModel.LinearHashMap.LinearHashMap| Tagclass.MutableMapModel.LinearHashMap class.MutableMapModel.LinearHashMap |##MutableMapModel.IteratorOutput.Next| Tagclass.MutableMapModel.IteratorOutput |##MutableMapModel.IteratorOutput.Done| class.MutableMapModel.IteratorOutput |##MutableMapModel.Iterator.Iterator| Tagclass.MutableMapModel.Iterator class.MutableMapModel.Iterator |##MutableMapModel.SimpleIterator.SimpleIterator| Tagclass.MutableMapModel.SimpleIterator class.MutableMapModel.SimpleIterator class.MutableMapModel.__default Tagclass.MutableMapModel.__default Tagclass.NativeTypes.uint32 Tagclass.NativeTypes.sbyte class.NativeTypes.sbyte Tagclass.NativeTypes.byte class.NativeTypes.byte Tagclass.NativeTypes.int16 class.NativeTypes.int16 Tagclass.NativeTypes.uint16 class.NativeTypes.uint16 Tagclass.NativeTypes.int32 class.NativeTypes.int32 class.NativeTypes.uint32 Tagclass.NativeTypes.int64 class.NativeTypes.int64 class.NativeTypes.uint64 Tagclass.NativeTypes.nat8 class.NativeTypes.nat8 Tagclass.NativeTypes.nat16 class.NativeTypes.nat16 Tagclass.NativeTypes.nat32 class.NativeTypes.nat32 Tagclass.NativeTypes.nat64 class.NativeTypes.nat64 Tagclass.NativeTypes.uint128 class.NativeTypes.uint128 class.NativeTypes.__default Tagclass.NativeTypes.__default |##Options.Option.None| |##Options.Option.Some| class.Options.Option class.Options.__default Tagclass.Options.__default class.SequencesLite.__default Tagclass.SequencesLite.__default class.Mathematics.__default Tagclass.Mathematics.__default class.Sequences.__default Tagclass.Sequences.__default class.Sets.__default Tagclass.Sets.__default class.MapRemove_s.__default Tagclass.MapRemove_s.__default class.Maps.__default Tagclass.Maps.__default class.SetBijectivity.__default Tagclass.SetBijectivity.__default class.NativeArithmetic.__default Tagclass.NativeArithmetic.__default tytagFamily$nat tytagFamily$object tytagFamily$array |tytagFamily$_#Func1| |tytagFamily$_#PartialFunc1| |tytagFamily$_#TotalFunc1| |tytagFamily$_#Func0| |tytagFamily$_#PartialFunc0| |tytagFamily$_#TotalFunc0| tytagFamily$_default |tytagFamily$_#Func2| |tytagFamily$_#PartialFunc2| |tytagFamily$_#TotalFunc2| |tytagFamily$_#Func3| |tytagFamily$_#PartialFunc3| |tytagFamily$_#TotalFunc3| |tytagFamily$_#Func4| |tytagFamily$_#PartialFunc4| |tytagFamily$_#TotalFunc4| |tytagFamily$_tuple#2| |tytagFamily$_tuple#0| tytagFamily$Slot tytagFamily$Item tytagFamily$uint64 tytagFamily$Option tytagFamily$FixedSizeLinearHashMap tytagFamily$ProbeResult tytagFamily$LinearHashMap tytagFamily$IteratorOutput tytagFamily$Iterator tytagFamily$SimpleIterator tytagFamily$uint32 tytagFamily$sbyte tytagFamily$byte tytagFamily$int16 tytagFamily$uint16 tytagFamily$int32 tytagFamily$int64 tytagFamily$nat8 tytagFamily$nat16 tytagFamily$nat32 tytagFamily$nat64 tytagFamily$uint128) )
(assert $$Language$Dafny)
(assert (forall ((arg0@@13 Int) ) (! (= (type (TBitvector arg0@@13)) TyType) :qid |funType:TBitvector| :pattern ( (TBitvector arg0@@13)) )))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w) :qid |DafnyPreludebpl.34:15| :skolemid |347| :pattern ( (TBitvector w)) )))
(assert  (and (forall ((arg0@@14 T@U) ) (! (= (type (TSet arg0@@14)) TyType) :qid |funType:TSet| :pattern ( (TSet arg0@@14)) )) (forall ((arg0@@15 T@U) ) (! (= (type (Inv0_TSet arg0@@15)) TyType) :qid |funType:Inv0_TSet| :pattern ( (Inv0_TSet arg0@@15)) ))))
(assert (forall ((t T@U) ) (!  (=> (= (type t) TyType) (= (Inv0_TSet (TSet t)) t)) :qid |DafnyPreludebpl.36:15| :skolemid |348| :pattern ( (TSet t)) )))
(assert  (and (forall ((arg0@@16 T@U) ) (! (= (type (TISet arg0@@16)) TyType) :qid |funType:TISet| :pattern ( (TISet arg0@@16)) )) (forall ((arg0@@17 T@U) ) (! (= (type (Inv0_TISet arg0@@17)) TyType) :qid |funType:Inv0_TISet| :pattern ( (Inv0_TISet arg0@@17)) ))))
(assert (forall ((t@@0 T@U) ) (!  (=> (= (type t@@0) TyType) (= (Inv0_TISet (TISet t@@0)) t@@0)) :qid |DafnyPreludebpl.38:15| :skolemid |349| :pattern ( (TISet t@@0)) )))
(assert  (and (forall ((arg0@@18 T@U) ) (! (= (type (TSeq arg0@@18)) TyType) :qid |funType:TSeq| :pattern ( (TSeq arg0@@18)) )) (forall ((arg0@@19 T@U) ) (! (= (type (Inv0_TSeq arg0@@19)) TyType) :qid |funType:Inv0_TSeq| :pattern ( (Inv0_TSeq arg0@@19)) ))))
(assert (forall ((t@@1 T@U) ) (!  (=> (= (type t@@1) TyType) (= (Inv0_TSeq (TSeq t@@1)) t@@1)) :qid |DafnyPreludebpl.40:15| :skolemid |350| :pattern ( (TSeq t@@1)) )))
(assert  (and (forall ((arg0@@20 T@U) ) (! (= (type (TMultiSet arg0@@20)) TyType) :qid |funType:TMultiSet| :pattern ( (TMultiSet arg0@@20)) )) (forall ((arg0@@21 T@U) ) (! (= (type (Inv0_TMultiSet arg0@@21)) TyType) :qid |funType:Inv0_TMultiSet| :pattern ( (Inv0_TMultiSet arg0@@21)) ))))
(assert (forall ((t@@2 T@U) ) (!  (=> (= (type t@@2) TyType) (= (Inv0_TMultiSet (TMultiSet t@@2)) t@@2)) :qid |DafnyPreludebpl.42:15| :skolemid |351| :pattern ( (TMultiSet t@@2)) )))
(assert  (and (forall ((arg0@@22 T@U) (arg1 T@U) ) (! (= (type (TMap arg0@@22 arg1)) TyType) :qid |funType:TMap| :pattern ( (TMap arg0@@22 arg1)) )) (forall ((arg0@@23 T@U) ) (! (= (type (Inv0_TMap arg0@@23)) TyType) :qid |funType:Inv0_TMap| :pattern ( (Inv0_TMap arg0@@23)) ))))
(assert (forall ((t@@3 T@U) (u T@U) ) (!  (=> (and (= (type t@@3) TyType) (= (type u) TyType)) (= (Inv0_TMap (TMap t@@3 u)) t@@3)) :qid |DafnyPreludebpl.45:15| :skolemid |352| :pattern ( (TMap t@@3 u)) )))
(assert (forall ((arg0@@24 T@U) ) (! (= (type (Inv1_TMap arg0@@24)) TyType) :qid |funType:Inv1_TMap| :pattern ( (Inv1_TMap arg0@@24)) )))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (!  (=> (and (= (type t@@4) TyType) (= (type u@@0) TyType)) (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)) :qid |DafnyPreludebpl.46:15| :skolemid |353| :pattern ( (TMap t@@4 u@@0)) )))
(assert  (and (forall ((arg0@@25 T@U) (arg1@@0 T@U) ) (! (= (type (TIMap arg0@@25 arg1@@0)) TyType) :qid |funType:TIMap| :pattern ( (TIMap arg0@@25 arg1@@0)) )) (forall ((arg0@@26 T@U) ) (! (= (type (Inv0_TIMap arg0@@26)) TyType) :qid |funType:Inv0_TIMap| :pattern ( (Inv0_TIMap arg0@@26)) ))))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (!  (=> (and (= (type t@@5) TyType) (= (type u@@1) TyType)) (= (Inv0_TIMap (TIMap t@@5 u@@1)) t@@5)) :qid |DafnyPreludebpl.49:15| :skolemid |354| :pattern ( (TIMap t@@5 u@@1)) )))
(assert (forall ((arg0@@27 T@U) ) (! (= (type (Inv1_TIMap arg0@@27)) TyType) :qid |funType:Inv1_TIMap| :pattern ( (Inv1_TIMap arg0@@27)) )))
(assert (forall ((t@@6 T@U) (u@@2 T@U) ) (!  (=> (and (= (type t@@6) TyType) (= (type u@@2) TyType)) (= (Inv1_TIMap (TIMap t@@6 u@@2)) u@@2)) :qid |DafnyPreludebpl.50:15| :skolemid |355| :pattern ( (TIMap t@@6 u@@2)) )))
(assert (forall ((arg0@@28 T@U) ) (! (= (type (Tag arg0@@28)) TyTagType) :qid |funType:Tag| :pattern ( (Tag arg0@@28)) )))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (Tag TORDINAL) TagORDINAL))
(assert (forall ((t@@7 T@U) ) (!  (=> (= (type t@@7) TyType) (= (Tag (TSet t@@7)) TagSet)) :qid |DafnyPreludebpl.76:15| :skolemid |356| :pattern ( (TSet t@@7)) )))
(assert (forall ((t@@8 T@U) ) (!  (=> (= (type t@@8) TyType) (= (Tag (TISet t@@8)) TagISet)) :qid |DafnyPreludebpl.77:15| :skolemid |357| :pattern ( (TISet t@@8)) )))
(assert (forall ((t@@9 T@U) ) (!  (=> (= (type t@@9) TyType) (= (Tag (TMultiSet t@@9)) TagMultiSet)) :qid |DafnyPreludebpl.78:15| :skolemid |358| :pattern ( (TMultiSet t@@9)) )))
(assert (forall ((t@@10 T@U) ) (!  (=> (= (type t@@10) TyType) (= (Tag (TSeq t@@10)) TagSeq)) :qid |DafnyPreludebpl.79:15| :skolemid |359| :pattern ( (TSeq t@@10)) )))
(assert (forall ((t@@11 T@U) (u@@3 T@U) ) (!  (=> (and (= (type t@@11) TyType) (= (type u@@3) TyType)) (= (Tag (TMap t@@11 u@@3)) TagMap)) :qid |DafnyPreludebpl.80:15| :skolemid |360| :pattern ( (TMap t@@11 u@@3)) )))
(assert (forall ((t@@12 T@U) (u@@4 T@U) ) (!  (=> (and (= (type t@@12) TyType) (= (type u@@4) TyType)) (= (Tag (TIMap t@@12 u@@4)) TagIMap)) :qid |DafnyPreludebpl.81:15| :skolemid |361| :pattern ( (TIMap t@@12 u@@4)) )))
(assert (forall ((arg0@@29 T@U) ) (! (let ((T (type arg0@@29))) (= (type (Lit arg0@@29)) T)) :qid |funType:Lit| :pattern ( (Lit arg0@@29)) )))
(assert (forall ((x@@8 T@U) ) (! (= (Lit x@@8) x@@8) :qid |DafnyPreludebpl.89:29| :skolemid |362| :pattern ( (Lit x@@8)) )))
(assert  (and (= (Ctor BoxType) 13) (forall ((arg0@@30 T@U) ) (! (= (type ($Box arg0@@30)) BoxType) :qid |funType:$Box| :pattern ( ($Box arg0@@30)) ))))
(assert (forall ((x@@9 T@U) ) (! (= ($Box (Lit x@@9)) (Lit ($Box x@@9))) :qid |DafnyPreludebpl.90:18| :skolemid |363| :pattern ( ($Box (Lit x@@9))) )))
(assert (forall ((x@@10 Int) ) (! (= (LitInt x@@10) x@@10) :qid |DafnyPreludebpl.95:29| :skolemid |364| :pattern ( (LitInt x@@10)) )))
(assert (forall ((x@@11 Int) ) (! (= ($Box (int_2_U (LitInt x@@11))) (Lit ($Box (int_2_U x@@11)))) :qid |DafnyPreludebpl.96:15| :skolemid |365| :pattern ( ($Box (int_2_U (LitInt x@@11)))) )))
(assert (forall ((x@@12 Real) ) (! (= (LitReal x@@12) x@@12) :qid |DafnyPreludebpl.97:30| :skolemid |366| :pattern ( (LitReal x@@12)) )))
(assert (forall ((x@@13 Real) ) (! (= ($Box (real_2_U (LitReal x@@13))) (Lit ($Box (real_2_U x@@13)))) :qid |DafnyPreludebpl.98:15| :skolemid |367| :pattern ( ($Box (real_2_U (LitReal x@@13)))) )))
(assert  (and (= (Ctor charType) 14) (forall ((arg0@@31 Int) ) (! (= (type (|char#FromInt| arg0@@31)) charType) :qid |funType:char#FromInt| :pattern ( (|char#FromInt| arg0@@31)) ))))
(assert (forall ((ch T@U) ) (!  (=> (= (type ch) charType) (and (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (<= 0 (|char#ToInt| ch))) (< (|char#ToInt| ch) 65536))) :qid |DafnyPreludebpl.107:15| :skolemid |368| :pattern ( (|char#ToInt| ch)) )))
(assert (forall ((n Int) ) (!  (=> (and (<= 0 n) (< n 65536)) (= (|char#ToInt| (|char#FromInt| n)) n)) :qid |DafnyPreludebpl.111:15| :skolemid |369| :pattern ( (|char#FromInt| n)) )))
(assert (forall ((arg0@@32 T@U) (arg1@@1 T@U) ) (! (= (type (|char#Plus| arg0@@32 arg1@@1)) charType) :qid |funType:char#Plus| :pattern ( (|char#Plus| arg0@@32 arg1@@1)) )))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (= (type a) charType) (= (type b) charType)) (= (|char#Plus| a b) (|char#FromInt| (+ (|char#ToInt| a) (|char#ToInt| b))))) :qid |DafnyPreludebpl.117:15| :skolemid |370| :pattern ( (|char#Plus| a b)) )))
(assert (forall ((arg0@@33 T@U) (arg1@@2 T@U) ) (! (= (type (|char#Minus| arg0@@33 arg1@@2)) charType) :qid |funType:char#Minus| :pattern ( (|char#Minus| arg0@@33 arg1@@2)) )))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (= (type a@@0) charType) (= (type b@@0) charType)) (= (|char#Minus| a@@0 b@@0) (|char#FromInt| (- (|char#ToInt| a@@0) (|char#ToInt| b@@0))))) :qid |DafnyPreludebpl.120:15| :skolemid |371| :pattern ( (|char#Minus| a@@0 b@@0)) )))
(assert (forall ((T@@0 T@T) (arg0@@34 T@U) ) (! (= (type ($Unbox T@@0 arg0@@34)) T@@0) :qid |funType:$Unbox| :pattern ( ($Unbox T@@0 arg0@@34)) )))
(assert (forall ((x@@14 T@U) ) (! (let ((T@@1 (type x@@14))) (= ($Unbox T@@1 ($Box x@@14)) x@@14)) :qid |DafnyPreludebpl.141:18| :skolemid |372| :pattern ( ($Box x@@14)) )))
(assert (forall ((bx T@U) ) (!  (=> (and (= (type bx) BoxType) ($IsBox bx TInt)) (and (= ($Box ($Unbox intType bx)) bx) ($Is ($Unbox intType bx) TInt))) :qid |DafnyPreludebpl.143:15| :skolemid |373| :pattern ( ($IsBox bx TInt)) )))
(assert (forall ((bx@@0 T@U) ) (!  (=> (and (= (type bx@@0) BoxType) ($IsBox bx@@0 TReal)) (and (= ($Box ($Unbox realType bx@@0)) bx@@0) ($Is ($Unbox realType bx@@0) TReal))) :qid |DafnyPreludebpl.146:15| :skolemid |374| :pattern ( ($IsBox bx@@0 TReal)) )))
(assert (forall ((bx@@1 T@U) ) (!  (=> (and (= (type bx@@1) BoxType) ($IsBox bx@@1 TBool)) (and (= ($Box ($Unbox boolType bx@@1)) bx@@1) ($Is ($Unbox boolType bx@@1) TBool))) :qid |DafnyPreludebpl.149:15| :skolemid |375| :pattern ( ($IsBox bx@@1 TBool)) )))
(assert (forall ((bx@@2 T@U) ) (!  (=> (and (= (type bx@@2) BoxType) ($IsBox bx@@2 TChar)) (and (= ($Box ($Unbox charType bx@@2)) bx@@2) ($Is ($Unbox charType bx@@2) TChar))) :qid |DafnyPreludebpl.152:15| :skolemid |376| :pattern ( ($IsBox bx@@2 TChar)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@35 T@T) (arg1@@3 T@T) ) (! (= (Ctor (MapType0Type arg0@@35 arg1@@3)) 15) :qid |ctor:MapType0Type| )) (forall ((arg0@@36 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@36 arg1@@4)) arg0@@36) :qid |typeInv:MapType0TypeInv0| :pattern ( (MapType0Type arg0@@36 arg1@@4)) ))) (forall ((arg0@@37 T@T) (arg1@@5 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@37 arg1@@5)) arg1@@5) :qid |typeInv:MapType0TypeInv1| :pattern ( (MapType0Type arg0@@37 arg1@@5)) ))) (forall ((arg0@@38 T@U) (arg1@@6 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@38)))) (= (type (MapType0Select arg0@@38 arg1@@6)) aVar1)) :qid |funType:MapType0Select| :pattern ( (MapType0Select arg0@@38 arg1@@6)) ))) (forall ((arg0@@39 T@U) (arg1@@7 T@U) (arg2 T@U) ) (! (let ((aVar1@@0 (type arg2))) (let ((aVar0 (type arg1@@7))) (= (type (MapType0Store arg0@@39 arg1@@7 arg2)) (MapType0Type aVar0 aVar1@@0)))) :qid |funType:MapType0Store| :pattern ( (MapType0Store arg0@@39 arg1@@7 arg2)) ))) (forall ((m T@U) (x0 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m)))) (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 val) x0) val))) :qid |mapAx0:MapType0Select| :weight 0 ))) (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 val@@0) y0) (MapType0Select m@@0 y0))) :qid |mapAx1:MapType0Select:0| :weight 0 )) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (y0@@0 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@1 x0@@1 val@@1) y0@@0) (MapType0Select m@@1 y0@@0))) :qid |mapAx2:MapType0Select| :weight 0 )))))
(assert (forall ((bx@@3 T@U) ) (!  (=> (and (= (type bx@@3) BoxType) ($IsBox bx@@3 (TBitvector 0))) (and (= ($Box ($Unbox intType bx@@3)) bx@@3) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@3) (TBitvector 0)))) :qid |DafnyPreludebpl.158:15| :skolemid |377| :pattern ( ($IsBox bx@@3 (TBitvector 0))) )))
(assert (forall ((bx@@4 T@U) (t@@13 T@U) ) (!  (=> (and (and (= (type bx@@4) BoxType) (= (type t@@13) TyType)) ($IsBox bx@@4 (TSet t@@13))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@4)) bx@@4) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@4) (TSet t@@13)))) :qid |DafnyPreludebpl.162:15| :skolemid |378| :pattern ( ($IsBox bx@@4 (TSet t@@13))) )))
(assert (forall ((bx@@5 T@U) (t@@14 T@U) ) (!  (=> (and (and (= (type bx@@5) BoxType) (= (type t@@14) TyType)) ($IsBox bx@@5 (TISet t@@14))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@5)) bx@@5) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@5) (TISet t@@14)))) :qid |DafnyPreludebpl.165:15| :skolemid |379| :pattern ( ($IsBox bx@@5 (TISet t@@14))) )))
(assert (forall ((bx@@6 T@U) (t@@15 T@U) ) (!  (=> (and (and (= (type bx@@6) BoxType) (= (type t@@15) TyType)) ($IsBox bx@@6 (TMultiSet t@@15))) (and (= ($Box ($Unbox (MapType0Type BoxType intType) bx@@6)) bx@@6) ($Is ($Unbox (MapType0Type BoxType intType) bx@@6) (TMultiSet t@@15)))) :qid |DafnyPreludebpl.168:15| :skolemid |380| :pattern ( ($IsBox bx@@6 (TMultiSet t@@15))) )))
(assert  (and (forall ((arg0@@40 T@T) ) (! (= (Ctor (SeqType arg0@@40)) 16) :qid |ctor:SeqType| )) (forall ((arg0@@41 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@41)) arg0@@41) :qid |typeInv:SeqTypeInv0| :pattern ( (SeqType arg0@@41)) ))))
(assert (forall ((bx@@7 T@U) (t@@16 T@U) ) (!  (=> (and (and (= (type bx@@7) BoxType) (= (type t@@16) TyType)) ($IsBox bx@@7 (TSeq t@@16))) (and (= ($Box ($Unbox (SeqType BoxType) bx@@7)) bx@@7) ($Is ($Unbox (SeqType BoxType) bx@@7) (TSeq t@@16)))) :qid |DafnyPreludebpl.171:15| :skolemid |381| :pattern ( ($IsBox bx@@7 (TSeq t@@16))) )))
(assert  (and (and (forall ((arg0@@42 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType arg0@@42 arg1@@8)) 17) :qid |ctor:MapType| )) (forall ((arg0@@43 T@T) (arg1@@9 T@T) ) (! (= (MapTypeInv0 (MapType arg0@@43 arg1@@9)) arg0@@43) :qid |typeInv:MapTypeInv0| :pattern ( (MapType arg0@@43 arg1@@9)) ))) (forall ((arg0@@44 T@T) (arg1@@10 T@T) ) (! (= (MapTypeInv1 (MapType arg0@@44 arg1@@10)) arg1@@10) :qid |typeInv:MapTypeInv1| :pattern ( (MapType arg0@@44 arg1@@10)) ))))
(assert (forall ((bx@@8 T@U) (s T@U) (t@@17 T@U) ) (!  (=> (and (and (and (= (type bx@@8) BoxType) (= (type s) TyType)) (= (type t@@17) TyType)) ($IsBox bx@@8 (TMap s t@@17))) (and (= ($Box ($Unbox (MapType BoxType BoxType) bx@@8)) bx@@8) ($Is ($Unbox (MapType BoxType BoxType) bx@@8) (TMap s t@@17)))) :qid |DafnyPreludebpl.174:15| :skolemid |382| :pattern ( ($IsBox bx@@8 (TMap s t@@17))) )))
(assert  (and (and (forall ((arg0@@45 T@T) (arg1@@11 T@T) ) (! (= (Ctor (IMapType arg0@@45 arg1@@11)) 18) :qid |ctor:IMapType| )) (forall ((arg0@@46 T@T) (arg1@@12 T@T) ) (! (= (IMapTypeInv0 (IMapType arg0@@46 arg1@@12)) arg0@@46) :qid |typeInv:IMapTypeInv0| :pattern ( (IMapType arg0@@46 arg1@@12)) ))) (forall ((arg0@@47 T@T) (arg1@@13 T@T) ) (! (= (IMapTypeInv1 (IMapType arg0@@47 arg1@@13)) arg1@@13) :qid |typeInv:IMapTypeInv1| :pattern ( (IMapType arg0@@47 arg1@@13)) ))))
(assert (forall ((bx@@9 T@U) (s@@0 T@U) (t@@18 T@U) ) (!  (=> (and (and (and (= (type bx@@9) BoxType) (= (type s@@0) TyType)) (= (type t@@18) TyType)) ($IsBox bx@@9 (TIMap s@@0 t@@18))) (and (= ($Box ($Unbox (IMapType BoxType BoxType) bx@@9)) bx@@9) ($Is ($Unbox (IMapType BoxType BoxType) bx@@9) (TIMap s@@0 t@@18)))) :qid |DafnyPreludebpl.177:15| :skolemid |383| :pattern ( ($IsBox bx@@9 (TIMap s@@0 t@@18))) )))
(assert (forall ((v T@U) (t@@19 T@U) ) (!  (=> (= (type t@@19) TyType) (= ($IsBox ($Box v) t@@19) ($Is v t@@19))) :qid |DafnyPreludebpl.181:18| :skolemid |384| :pattern ( ($IsBox ($Box v) t@@19)) )))
(assert  (and (and (and (and (and (forall ((arg0@@48 T@U) (arg1@@14 T@U) ) (! (let ((alpha@@1 (FieldTypeInv0 (type arg1@@14)))) (= (type (MapType1Select arg0@@48 arg1@@14)) alpha@@1)) :qid |funType:MapType1Select| :pattern ( (MapType1Select arg0@@48 arg1@@14)) )) (= (Ctor MapType1Type) 19)) (forall ((arg0@@49 T@U) (arg1@@15 T@U) (arg2@@0 T@U) ) (! (= (type (MapType1Store arg0@@49 arg1@@15 arg2@@0)) MapType1Type) :qid |funType:MapType1Store| :pattern ( (MapType1Store arg0@@49 arg1@@15 arg2@@0)) ))) (forall ((m@@2 T@U) (x0@@2 T@U) (val@@2 T@U) ) (! (let ((alpha@@2 (FieldTypeInv0 (type x0@@2)))) (=> (= (type val@@2) alpha@@2) (= (MapType1Select (MapType1Store m@@2 x0@@2 val@@2) x0@@2) val@@2))) :qid |mapAx0:MapType1Select| :weight 0 ))) (and (forall ((val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) y0@@1) (MapType1Select m@@3 y0@@1))) :qid |mapAx1:MapType1Select:0| :weight 0 )) (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2))) :qid |mapAx2:MapType1Select| :weight 0 )))) (= (Ctor refType) 20)))
(assert (forall ((v@@0 T@U) (t@@20 T@U) (h T@U) ) (!  (=> (and (= (type t@@20) TyType) (= (type h) (MapType0Type refType MapType1Type))) (= ($IsAllocBox ($Box v@@0) t@@20 h) ($IsAlloc v@@0 t@@20 h))) :qid |DafnyPreludebpl.184:18| :skolemid |385| :pattern ( ($IsAllocBox ($Box v@@0) t@@20 h)) )))
(assert (forall ((v@@1 T@U) ) (!  (=> (= (type v@@1) intType) ($Is v@@1 TInt)) :qid |DafnyPreludebpl.202:14| :skolemid |386| :pattern ( ($Is v@@1 TInt)) )))
(assert (forall ((v@@2 T@U) ) (!  (=> (= (type v@@2) realType) ($Is v@@2 TReal)) :qid |DafnyPreludebpl.203:14| :skolemid |387| :pattern ( ($Is v@@2 TReal)) )))
(assert (forall ((v@@3 T@U) ) (!  (=> (= (type v@@3) boolType) ($Is v@@3 TBool)) :qid |DafnyPreludebpl.204:14| :skolemid |388| :pattern ( ($Is v@@3 TBool)) )))
(assert (forall ((v@@4 T@U) ) (!  (=> (= (type v@@4) charType) ($Is v@@4 TChar)) :qid |DafnyPreludebpl.205:14| :skolemid |389| :pattern ( ($Is v@@4 TChar)) )))
(assert (forall ((v@@5 T@U) ) (!  (=> (= (type v@@5) BoxType) ($Is v@@5 TORDINAL)) :qid |DafnyPreludebpl.206:14| :skolemid |390| :pattern ( ($Is v@@5 TORDINAL)) )))
(assert (forall ((h@@0 T@U) (v@@6 T@U) ) (!  (=> (and (= (type h@@0) (MapType0Type refType MapType1Type)) (= (type v@@6) intType)) ($IsAlloc v@@6 TInt h@@0)) :qid |DafnyPreludebpl.208:14| :skolemid |391| :pattern ( ($IsAlloc v@@6 TInt h@@0)) )))
(assert (forall ((h@@1 T@U) (v@@7 T@U) ) (!  (=> (and (= (type h@@1) (MapType0Type refType MapType1Type)) (= (type v@@7) realType)) ($IsAlloc v@@7 TReal h@@1)) :qid |DafnyPreludebpl.209:14| :skolemid |392| :pattern ( ($IsAlloc v@@7 TReal h@@1)) )))
(assert (forall ((h@@2 T@U) (v@@8 T@U) ) (!  (=> (and (= (type h@@2) (MapType0Type refType MapType1Type)) (= (type v@@8) boolType)) ($IsAlloc v@@8 TBool h@@2)) :qid |DafnyPreludebpl.210:14| :skolemid |393| :pattern ( ($IsAlloc v@@8 TBool h@@2)) )))
(assert (forall ((h@@3 T@U) (v@@9 T@U) ) (!  (=> (and (= (type h@@3) (MapType0Type refType MapType1Type)) (= (type v@@9) charType)) ($IsAlloc v@@9 TChar h@@3)) :qid |DafnyPreludebpl.211:14| :skolemid |394| :pattern ( ($IsAlloc v@@9 TChar h@@3)) )))
(assert (forall ((h@@4 T@U) (v@@10 T@U) ) (!  (=> (and (= (type h@@4) (MapType0Type refType MapType1Type)) (= (type v@@10) BoxType)) ($IsAlloc v@@10 TORDINAL h@@4)) :qid |DafnyPreludebpl.212:14| :skolemid |395| :pattern ( ($IsAlloc v@@10 TORDINAL h@@4)) )))
(assert (forall ((v@@11 T@U) ) (!  (=> (= (type v@@11) intType) ($Is v@@11 (TBitvector 0))) :qid |DafnyPreludebpl.216:15| :skolemid |396| :pattern ( ($Is v@@11 (TBitvector 0))) )))
(assert (forall ((v@@12 T@U) (h@@5 T@U) ) (!  (=> (and (= (type v@@12) intType) (= (type h@@5) (MapType0Type refType MapType1Type))) ($IsAlloc v@@12 (TBitvector 0) h@@5)) :qid |DafnyPreludebpl.217:15| :skolemid |397| :pattern ( ($IsAlloc v@@12 (TBitvector 0) h@@5)) )))
(assert (forall ((v@@13 T@U) (t0 T@U) ) (!  (=> (and (= (type v@@13) (MapType0Type BoxType boolType)) (= (type t0) TyType)) (= ($Is v@@13 (TSet t0)) (forall ((bx@@10 T@U) ) (!  (=> (and (= (type bx@@10) BoxType) (U_2_bool (MapType0Select v@@13 bx@@10))) ($IsBox bx@@10 t0)) :qid |DafnyPreludebpl.221:11| :skolemid |398| :pattern ( (MapType0Select v@@13 bx@@10)) )))) :qid |DafnyPreludebpl.219:15| :skolemid |399| :pattern ( ($Is v@@13 (TSet t0))) )))
(assert (forall ((v@@14 T@U) (t0@@0 T@U) ) (!  (=> (and (= (type v@@14) (MapType0Type BoxType boolType)) (= (type t0@@0) TyType)) (= ($Is v@@14 (TISet t0@@0)) (forall ((bx@@11 T@U) ) (!  (=> (and (= (type bx@@11) BoxType) (U_2_bool (MapType0Select v@@14 bx@@11))) ($IsBox bx@@11 t0@@0)) :qid |DafnyPreludebpl.225:11| :skolemid |400| :pattern ( (MapType0Select v@@14 bx@@11)) )))) :qid |DafnyPreludebpl.223:15| :skolemid |401| :pattern ( ($Is v@@14 (TISet t0@@0))) )))
(assert (forall ((v@@15 T@U) (t0@@1 T@U) ) (!  (=> (and (= (type v@@15) (MapType0Type BoxType intType)) (= (type t0@@1) TyType)) (= ($Is v@@15 (TMultiSet t0@@1)) (forall ((bx@@12 T@U) ) (!  (=> (and (= (type bx@@12) BoxType) (< 0 (U_2_int (MapType0Select v@@15 bx@@12)))) ($IsBox bx@@12 t0@@1)) :qid |DafnyPreludebpl.229:11| :skolemid |402| :pattern ( (MapType0Select v@@15 bx@@12)) )))) :qid |DafnyPreludebpl.227:15| :skolemid |403| :pattern ( ($Is v@@15 (TMultiSet t0@@1))) )))
(assert (forall ((v@@16 T@U) (t0@@2 T@U) ) (!  (=> (and (and (= (type v@@16) (MapType0Type BoxType intType)) (= (type t0@@2) TyType)) ($Is v@@16 (TMultiSet t0@@2))) ($IsGoodMultiSet v@@16)) :qid |DafnyPreludebpl.231:15| :skolemid |404| :pattern ( ($Is v@@16 (TMultiSet t0@@2))) )))
(assert (forall ((arg0@@50 T@U) (arg1@@16 Int) ) (! (let ((T@@2 (SeqTypeInv0 (type arg0@@50)))) (= (type (|Seq#Index| arg0@@50 arg1@@16)) T@@2)) :qid |funType:Seq#Index| :pattern ( (|Seq#Index| arg0@@50 arg1@@16)) )))
(assert (forall ((v@@17 T@U) (t0@@3 T@U) ) (!  (=> (and (= (type v@@17) (SeqType BoxType)) (= (type t0@@3) TyType)) (= ($Is v@@17 (TSeq t0@@3)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@17))) ($IsBox (|Seq#Index| v@@17 i) t0@@3)) :qid |DafnyPreludebpl.235:11| :skolemid |405| :pattern ( (|Seq#Index| v@@17 i)) )))) :qid |DafnyPreludebpl.233:15| :skolemid |406| :pattern ( ($Is v@@17 (TSeq t0@@3))) )))
(assert (forall ((v@@18 T@U) (t0@@4 T@U) (h@@6 T@U) ) (!  (=> (and (and (= (type v@@18) (MapType0Type BoxType boolType)) (= (type t0@@4) TyType)) (= (type h@@6) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@18 (TSet t0@@4) h@@6) (forall ((bx@@13 T@U) ) (!  (=> (and (= (type bx@@13) BoxType) (U_2_bool (MapType0Select v@@18 bx@@13))) ($IsAllocBox bx@@13 t0@@4 h@@6)) :qid |DafnyPreludebpl.240:11| :skolemid |407| :pattern ( (MapType0Select v@@18 bx@@13)) )))) :qid |DafnyPreludebpl.238:15| :skolemid |408| :pattern ( ($IsAlloc v@@18 (TSet t0@@4) h@@6)) )))
(assert (forall ((v@@19 T@U) (t0@@5 T@U) (h@@7 T@U) ) (!  (=> (and (and (= (type v@@19) (MapType0Type BoxType boolType)) (= (type t0@@5) TyType)) (= (type h@@7) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@19 (TISet t0@@5) h@@7) (forall ((bx@@14 T@U) ) (!  (=> (and (= (type bx@@14) BoxType) (U_2_bool (MapType0Select v@@19 bx@@14))) ($IsAllocBox bx@@14 t0@@5 h@@7)) :qid |DafnyPreludebpl.244:11| :skolemid |409| :pattern ( (MapType0Select v@@19 bx@@14)) )))) :qid |DafnyPreludebpl.242:15| :skolemid |410| :pattern ( ($IsAlloc v@@19 (TISet t0@@5) h@@7)) )))
(assert (forall ((v@@20 T@U) (t0@@6 T@U) (h@@8 T@U) ) (!  (=> (and (and (= (type v@@20) (MapType0Type BoxType intType)) (= (type t0@@6) TyType)) (= (type h@@8) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@20 (TMultiSet t0@@6) h@@8) (forall ((bx@@15 T@U) ) (!  (=> (and (= (type bx@@15) BoxType) (< 0 (U_2_int (MapType0Select v@@20 bx@@15)))) ($IsAllocBox bx@@15 t0@@6 h@@8)) :qid |DafnyPreludebpl.248:11| :skolemid |411| :pattern ( (MapType0Select v@@20 bx@@15)) )))) :qid |DafnyPreludebpl.246:15| :skolemid |412| :pattern ( ($IsAlloc v@@20 (TMultiSet t0@@6) h@@8)) )))
(assert (forall ((v@@21 T@U) (t0@@7 T@U) (h@@9 T@U) ) (!  (=> (and (and (= (type v@@21) (SeqType BoxType)) (= (type t0@@7) TyType)) (= (type h@@9) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@21 (TSeq t0@@7) h@@9) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@21))) ($IsAllocBox (|Seq#Index| v@@21 i@@0) t0@@7 h@@9)) :qid |DafnyPreludebpl.252:11| :skolemid |413| :pattern ( (|Seq#Index| v@@21 i@@0)) )))) :qid |DafnyPreludebpl.250:15| :skolemid |414| :pattern ( ($IsAlloc v@@21 (TSeq t0@@7) h@@9)) )))
(assert  (and (forall ((arg0@@51 T@U) ) (! (let ((V (MapTypeInv1 (type arg0@@51)))) (let ((U (MapTypeInv0 (type arg0@@51)))) (= (type (|Map#Elements| arg0@@51)) (MapType0Type U V)))) :qid |funType:Map#Elements| :pattern ( (|Map#Elements| arg0@@51)) )) (forall ((arg0@@52 T@U) ) (! (let ((U@@0 (MapTypeInv0 (type arg0@@52)))) (= (type (|Map#Domain| arg0@@52)) (MapType0Type U@@0 boolType))) :qid |funType:Map#Domain| :pattern ( (|Map#Domain| arg0@@52)) ))))
(assert (forall ((v@@22 T@U) (t0@@8 T@U) (t1 T@U) ) (!  (=> (and (and (= (type v@@22) (MapType BoxType BoxType)) (= (type t0@@8) TyType)) (= (type t1) TyType)) (= ($Is v@@22 (TMap t0@@8 t1)) (forall ((bx@@16 T@U) ) (!  (=> (and (= (type bx@@16) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@22) bx@@16))) (and ($IsBox (MapType0Select (|Map#Elements| v@@22) bx@@16) t1) ($IsBox bx@@16 t0@@8))) :qid |DafnyPreludebpl.259:19| :skolemid |415| :pattern ( (MapType0Select (|Map#Elements| v@@22) bx@@16)) :pattern ( (MapType0Select (|Map#Domain| v@@22) bx@@16)) )))) :qid |DafnyPreludebpl.256:15| :skolemid |416| :pattern ( ($Is v@@22 (TMap t0@@8 t1))) )))
(assert (forall ((v@@23 T@U) (t0@@9 T@U) (t1@@0 T@U) (h@@10 T@U) ) (!  (=> (and (and (and (= (type v@@23) (MapType BoxType BoxType)) (= (type t0@@9) TyType)) (= (type t1@@0) TyType)) (= (type h@@10) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@23 (TMap t0@@9 t1@@0) h@@10) (forall ((bx@@17 T@U) ) (!  (=> (and (= (type bx@@17) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@23) bx@@17))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@23) bx@@17) t1@@0 h@@10) ($IsAllocBox bx@@17 t0@@9 h@@10))) :qid |DafnyPreludebpl.267:19| :skolemid |417| :pattern ( (MapType0Select (|Map#Elements| v@@23) bx@@17)) :pattern ( (MapType0Select (|Map#Domain| v@@23) bx@@17)) )))) :qid |DafnyPreludebpl.264:15| :skolemid |418| :pattern ( ($IsAlloc v@@23 (TMap t0@@9 t1@@0) h@@10)) )))
(assert  (and (and (forall ((arg0@@53 T@U) ) (! (let ((V@@0 (MapTypeInv1 (type arg0@@53)))) (= (type (|Map#Values| arg0@@53)) (MapType0Type V@@0 boolType))) :qid |funType:Map#Values| :pattern ( (|Map#Values| arg0@@53)) )) (forall ((arg0@@54 T@U) ) (! (= (type (|Map#Items| arg0@@54)) (MapType0Type BoxType boolType)) :qid |funType:Map#Items| :pattern ( (|Map#Items| arg0@@54)) ))) (forall ((arg0@@55 T@U) (arg1@@17 T@U) ) (! (= (type (Tclass._System.Tuple2 arg0@@55 arg1@@17)) TyType) :qid |funType:Tclass._System.Tuple2| :pattern ( (Tclass._System.Tuple2 arg0@@55 arg1@@17)) ))))
(assert (forall ((v@@24 T@U) (t0@@10 T@U) (t1@@1 T@U) ) (!  (=> (and (and (and (= (type v@@24) (MapType BoxType BoxType)) (= (type t0@@10) TyType)) (= (type t1@@1) TyType)) ($Is v@@24 (TMap t0@@10 t1@@1))) (and (and ($Is (|Map#Domain| v@@24) (TSet t0@@10)) ($Is (|Map#Values| v@@24) (TSet t1@@1))) ($Is (|Map#Items| v@@24) (TSet (Tclass._System.Tuple2 t0@@10 t1@@1))))) :qid |DafnyPreludebpl.272:15| :skolemid |419| :pattern ( ($Is v@@24 (TMap t0@@10 t1@@1))) )))
(assert  (and (forall ((arg0@@56 T@U) ) (! (let ((V@@1 (IMapTypeInv1 (type arg0@@56)))) (let ((U@@1 (IMapTypeInv0 (type arg0@@56)))) (= (type (|IMap#Elements| arg0@@56)) (MapType0Type U@@1 V@@1)))) :qid |funType:IMap#Elements| :pattern ( (|IMap#Elements| arg0@@56)) )) (forall ((arg0@@57 T@U) ) (! (let ((U@@2 (IMapTypeInv0 (type arg0@@57)))) (= (type (|IMap#Domain| arg0@@57)) (MapType0Type U@@2 boolType))) :qid |funType:IMap#Domain| :pattern ( (|IMap#Domain| arg0@@57)) ))))
(assert (forall ((v@@25 T@U) (t0@@11 T@U) (t1@@2 T@U) ) (!  (=> (and (and (= (type v@@25) (IMapType BoxType BoxType)) (= (type t0@@11) TyType)) (= (type t1@@2) TyType)) (= ($Is v@@25 (TIMap t0@@11 t1@@2)) (forall ((bx@@18 T@U) ) (!  (=> (and (= (type bx@@18) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@25) bx@@18))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@25) bx@@18) t1@@2) ($IsBox bx@@18 t0@@11))) :qid |DafnyPreludebpl.282:19| :skolemid |420| :pattern ( (MapType0Select (|IMap#Elements| v@@25) bx@@18)) :pattern ( (MapType0Select (|IMap#Domain| v@@25) bx@@18)) )))) :qid |DafnyPreludebpl.279:15| :skolemid |421| :pattern ( ($Is v@@25 (TIMap t0@@11 t1@@2))) )))
(assert (forall ((v@@26 T@U) (t0@@12 T@U) (t1@@3 T@U) (h@@11 T@U) ) (!  (=> (and (and (and (= (type v@@26) (IMapType BoxType BoxType)) (= (type t0@@12) TyType)) (= (type t1@@3) TyType)) (= (type h@@11) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@26 (TIMap t0@@12 t1@@3) h@@11) (forall ((bx@@19 T@U) ) (!  (=> (and (= (type bx@@19) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@26) bx@@19))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@26) bx@@19) t1@@3 h@@11) ($IsAllocBox bx@@19 t0@@12 h@@11))) :qid |DafnyPreludebpl.290:19| :skolemid |422| :pattern ( (MapType0Select (|IMap#Elements| v@@26) bx@@19)) :pattern ( (MapType0Select (|IMap#Domain| v@@26) bx@@19)) )))) :qid |DafnyPreludebpl.287:15| :skolemid |423| :pattern ( ($IsAlloc v@@26 (TIMap t0@@12 t1@@3) h@@11)) )))
(assert  (and (forall ((arg0@@58 T@U) ) (! (let ((V@@2 (IMapTypeInv1 (type arg0@@58)))) (= (type (|IMap#Values| arg0@@58)) (MapType0Type V@@2 boolType))) :qid |funType:IMap#Values| :pattern ( (|IMap#Values| arg0@@58)) )) (forall ((arg0@@59 T@U) ) (! (= (type (|IMap#Items| arg0@@59)) (MapType0Type BoxType boolType)) :qid |funType:IMap#Items| :pattern ( (|IMap#Items| arg0@@59)) ))))
(assert (forall ((v@@27 T@U) (t0@@13 T@U) (t1@@4 T@U) ) (!  (=> (and (and (and (= (type v@@27) (IMapType BoxType BoxType)) (= (type t0@@13) TyType)) (= (type t1@@4) TyType)) ($Is v@@27 (TIMap t0@@13 t1@@4))) (and (and ($Is (|IMap#Domain| v@@27) (TISet t0@@13)) ($Is (|IMap#Values| v@@27) (TISet t1@@4))) ($Is (|IMap#Items| v@@27) (TISet (Tclass._System.Tuple2 t0@@13 t1@@4))))) :qid |DafnyPreludebpl.295:15| :skolemid |424| :pattern ( ($Is v@@27 (TIMap t0@@13 t1@@4))) )))
(assert  (and (and (forall ((arg0@@60 T@U) (arg1@@18 T@U) ) (! (= (type (TypeTuple arg0@@60 arg1@@18)) ClassNameType) :qid |funType:TypeTuple| :pattern ( (TypeTuple arg0@@60 arg1@@18)) )) (forall ((arg0@@61 T@U) ) (! (= (type (TypeTupleCar arg0@@61)) ClassNameType) :qid |funType:TypeTupleCar| :pattern ( (TypeTupleCar arg0@@61)) ))) (forall ((arg0@@62 T@U) ) (! (= (type (TypeTupleCdr arg0@@62)) ClassNameType) :qid |funType:TypeTupleCdr| :pattern ( (TypeTupleCdr arg0@@62)) ))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (= (type a@@1) ClassNameType) (= (type b@@1) ClassNameType)) (and (= (TypeTupleCar (TypeTuple a@@1 b@@1)) a@@1) (= (TypeTupleCdr (TypeTuple a@@1 b@@1)) b@@1))) :qid |DafnyPreludebpl.322:15| :skolemid |425| :pattern ( (TypeTuple a@@1 b@@1)) )))
(assert (forall ((arg0@@63 T@U) ) (! (= (type (SetRef_to_SetBox arg0@@63)) (MapType0Type BoxType boolType)) :qid |funType:SetRef_to_SetBox| :pattern ( (SetRef_to_SetBox arg0@@63)) )))
(assert (forall ((s@@1 T@U) (bx@@20 T@U) ) (!  (=> (and (= (type s@@1) (MapType0Type refType boolType)) (= (type bx@@20) BoxType)) (= (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@20)) (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@20))))) :qid |DafnyPreludebpl.331:15| :skolemid |426| :pattern ( (MapType0Select (SetRef_to_SetBox s@@1) bx@@20)) )))
(assert (= (type Tclass._System.object?) TyType))
(assert (forall ((s@@2 T@U) ) (!  (=> (= (type s@@2) (MapType0Type refType boolType)) ($Is (SetRef_to_SetBox s@@2) (TSet Tclass._System.object?))) :qid |DafnyPreludebpl.333:15| :skolemid |427| :pattern ( (SetRef_to_SetBox s@@2)) )))
(assert (= (Ctor DatatypeTypeType) 21))
(assert (forall ((d T@U) ) (!  (=> (= (type d) DatatypeTypeType) (= (BoxRank ($Box d)) (DtRank d))) :qid |DafnyPreludebpl.352:15| :skolemid |428| :pattern ( (BoxRank ($Box d))) )))
(assert (forall ((o T@U) ) (!  (=> (= (type o) BoxType) (<= 0 (|ORD#Offset| o))) :qid |DafnyPreludebpl.367:15| :skolemid |429| :pattern ( (|ORD#Offset| o)) )))
(assert (forall ((arg0@@64 Int) ) (! (= (type (|ORD#FromNat| arg0@@64)) BoxType) :qid |funType:ORD#FromNat| :pattern ( (|ORD#FromNat| arg0@@64)) )))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0))) :qid |DafnyPreludebpl.373:15| :skolemid |430| :pattern ( (|ORD#FromNat| n@@0)) )))
(assert (forall ((o@@0 T@U) ) (!  (=> (and (= (type o@@0) BoxType) (|ORD#IsNat| o@@0)) (= o@@0 (|ORD#FromNat| (|ORD#Offset| o@@0)))) :qid |DafnyPreludebpl.375:15| :skolemid |431| :pattern ( (|ORD#Offset| o@@0)) :pattern ( (|ORD#IsNat| o@@0)) )))
(assert (forall ((o@@1 T@U) (p T@U) ) (!  (=> (and (= (type o@@1) BoxType) (= (type p) BoxType)) (and (and (and (=> (|ORD#Less| o@@1 p) (not (= o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (not (|ORD#IsNat| p))) (|ORD#Less| o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (|ORD#IsNat| p)) (= (|ORD#Less| o@@1 p) (< (|ORD#Offset| o@@1) (|ORD#Offset| p))))) (=> (and (|ORD#Less| o@@1 p) (|ORD#IsNat| p)) (|ORD#IsNat| o@@1)))) :qid |DafnyPreludebpl.379:15| :skolemid |432| :pattern ( (|ORD#Less| o@@1 p)) )))
(assert (forall ((o@@2 T@U) (p@@0 T@U) ) (!  (=> (and (= (type o@@2) BoxType) (= (type p@@0) BoxType)) (or (or (|ORD#Less| o@@2 p@@0) (= o@@2 p@@0)) (|ORD#Less| p@@0 o@@2))) :qid |DafnyPreludebpl.385:15| :skolemid |433| :pattern ( (|ORD#Less| o@@2 p@@0) (|ORD#Less| p@@0 o@@2)) )))
(assert (forall ((o@@3 T@U) (p@@1 T@U) (r T@U) ) (!  (=> (and (and (and (= (type o@@3) BoxType) (= (type p@@1) BoxType)) (= (type r) BoxType)) (and (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r))) (|ORD#Less| o@@3 r)) :qid |DafnyPreludebpl.388:15| :skolemid |434| :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r)) :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| o@@3 r)) )))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (=> (and (= (type o@@4) BoxType) (= (type p@@2) BoxType)) (= (|ORD#LessThanLimit| o@@4 p@@2) (|ORD#Less| o@@4 p@@2))) :qid |DafnyPreludebpl.395:15| :skolemid |435| :pattern ( (|ORD#LessThanLimit| o@@4 p@@2)) )))
(assert (forall ((arg0@@65 T@U) (arg1@@19 T@U) ) (! (= (type (|ORD#Plus| arg0@@65 arg1@@19)) BoxType) :qid |funType:ORD#Plus| :pattern ( (|ORD#Plus| arg0@@65 arg1@@19)) )))
(assert (forall ((o@@5 T@U) (p@@3 T@U) ) (!  (=> (and (= (type o@@5) BoxType) (= (type p@@3) BoxType)) (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (and (|ORD#IsNat| o@@5) (|ORD#IsNat| p@@3))) (=> (|ORD#IsNat| p@@3) (and (= (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (|ORD#IsNat| o@@5)) (= (|ORD#Offset| (|ORD#Plus| o@@5 p@@3)) (+ (|ORD#Offset| o@@5) (|ORD#Offset| p@@3))))))) :qid |DafnyPreludebpl.399:15| :skolemid |436| :pattern ( (|ORD#Plus| o@@5 p@@3)) )))
(assert (forall ((o@@6 T@U) (p@@4 T@U) ) (!  (=> (and (= (type o@@6) BoxType) (= (type p@@4) BoxType)) (and (or (= o@@6 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| o@@6 (|ORD#Plus| o@@6 p@@4))) (or (= p@@4 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| p@@4 (|ORD#Plus| o@@6 p@@4))))) :qid |DafnyPreludebpl.404:15| :skolemid |437| :pattern ( (|ORD#Plus| o@@6 p@@4)) )))
(assert (forall ((o@@7 T@U) (p@@5 T@U) ) (!  (=> (and (= (type o@@7) BoxType) (= (type p@@5) BoxType)) (and (=> (= o@@7 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) p@@5)) (=> (= p@@5 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) o@@7)))) :qid |DafnyPreludebpl.407:15| :skolemid |438| :pattern ( (|ORD#Plus| o@@7 p@@5)) )))
(assert (forall ((arg0@@66 T@U) (arg1@@20 T@U) ) (! (= (type (|ORD#Minus| arg0@@66 arg1@@20)) BoxType) :qid |funType:ORD#Minus| :pattern ( (|ORD#Minus| arg0@@66 arg1@@20)) )))
(assert (forall ((o@@8 T@U) (p@@6 T@U) ) (!  (=> (and (and (= (type o@@8) BoxType) (= (type p@@6) BoxType)) (and (|ORD#IsNat| p@@6) (<= (|ORD#Offset| p@@6) (|ORD#Offset| o@@8)))) (and (= (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)) (|ORD#IsNat| o@@8)) (= (|ORD#Offset| (|ORD#Minus| o@@8 p@@6)) (- (|ORD#Offset| o@@8) (|ORD#Offset| p@@6))))) :qid |DafnyPreludebpl.412:15| :skolemid |439| :pattern ( (|ORD#Minus| o@@8 p@@6)) )))
(assert (forall ((o@@9 T@U) (p@@7 T@U) ) (!  (=> (and (and (= (type o@@9) BoxType) (= (type p@@7) BoxType)) (and (|ORD#IsNat| p@@7) (<= (|ORD#Offset| p@@7) (|ORD#Offset| o@@9)))) (or (and (= p@@7 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@9 p@@7) o@@9)) (and (not (= p@@7 (|ORD#FromNat| 0))) (|ORD#Less| (|ORD#Minus| o@@9 p@@7) o@@9)))) :qid |DafnyPreludebpl.416:15| :skolemid |440| :pattern ( (|ORD#Minus| o@@9 p@@7)) )))
(assert (forall ((o@@10 T@U) (m@@5 Int) (n@@1 Int) ) (!  (=> (= (type o@@10) BoxType) (=> (and (<= 0 m@@5) (<= 0 n@@1)) (= (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)) (|ORD#Plus| o@@10 (|ORD#FromNat| (+ m@@5 n@@1)))))) :qid |DafnyPreludebpl.422:15| :skolemid |441| :pattern ( (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1))) )))
(assert (forall ((o@@11 T@U) (m@@6 Int) (n@@2 Int) ) (!  (=> (= (type o@@11) BoxType) (=> (and (and (<= 0 m@@6) (<= 0 n@@2)) (<= (+ m@@6 n@@2) (|ORD#Offset| o@@11))) (= (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)) (|ORD#Minus| o@@11 (|ORD#FromNat| (+ m@@6 n@@2)))))) :qid |DafnyPreludebpl.427:15| :skolemid |442| :pattern ( (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2))) )))
(assert (forall ((o@@12 T@U) (m@@7 Int) (n@@3 Int) ) (!  (=> (= (type o@@12) BoxType) (=> (and (and (<= 0 m@@7) (<= 0 n@@3)) (<= n@@3 (+ (|ORD#Offset| o@@12) m@@7))) (and (=> (<= 0 (- m@@7 n@@3)) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Plus| o@@12 (|ORD#FromNat| (- m@@7 n@@3))))) (=> (<= (- m@@7 n@@3) 0) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Minus| o@@12 (|ORD#FromNat| (- n@@3 m@@7)))))))) :qid |DafnyPreludebpl.432:15| :skolemid |443| :pattern ( (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3))) )))
(assert (forall ((o@@13 T@U) (m@@8 Int) (n@@4 Int) ) (!  (=> (= (type o@@13) BoxType) (=> (and (and (<= 0 m@@8) (<= 0 n@@4)) (<= n@@4 (+ (|ORD#Offset| o@@13) m@@8))) (and (=> (<= 0 (- m@@8 n@@4)) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Minus| o@@13 (|ORD#FromNat| (- m@@8 n@@4))))) (=> (<= (- m@@8 n@@4) 0) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Plus| o@@13 (|ORD#FromNat| (- n@@4 m@@8)))))))) :qid |DafnyPreludebpl.438:15| :skolemid |444| :pattern ( (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4))) )))
(assert  (and (= (Ctor LayerTypeType) 22) (forall ((arg0@@67 T@U) (arg1@@21 T@U) ) (! (let ((A (MapType0TypeInv1 (type arg0@@67)))) (= (type (AtLayer arg0@@67 arg1@@21)) A)) :qid |funType:AtLayer| :pattern ( (AtLayer arg0@@67 arg1@@21)) ))))
(assert (forall ((f T@U) (ly T@U) ) (! (let ((A@@0 (MapType0TypeInv1 (type f)))) (=> (and (= (type f) (MapType0Type LayerTypeType A@@0)) (= (type ly) LayerTypeType)) (= (AtLayer f ly) (MapType0Select f ly)))) :qid |DafnyPreludebpl.462:18| :skolemid |445| :pattern ( (AtLayer f ly)) )))
(assert (forall ((arg0@@68 T@U) ) (! (= (type ($LS arg0@@68)) LayerTypeType) :qid |funType:$LS| :pattern ( ($LS arg0@@68)) )))
(assert (forall ((f@@0 T@U) (ly@@0 T@U) ) (! (let ((A@@1 (MapType0TypeInv1 (type f@@0)))) (=> (and (= (type f@@0) (MapType0Type LayerTypeType A@@1)) (= (type ly@@0) LayerTypeType)) (= (AtLayer f@@0 ($LS ly@@0)) (AtLayer f@@0 ly@@0)))) :qid |DafnyPreludebpl.463:18| :skolemid |446| :pattern ( (AtLayer f@@0 ($LS ly@@0))) )))
(assert (forall ((arg0@@69 Int) ) (! (= (type (IndexField arg0@@69)) (FieldType BoxType)) :qid |funType:IndexField| :pattern ( (IndexField arg0@@69)) )))
(assert (forall ((i@@1 Int) ) (! (= (FDim (IndexField i@@1)) 1) :qid |DafnyPreludebpl.474:15| :skolemid |447| :pattern ( (IndexField i@@1)) )))
(assert (forall ((i@@2 Int) ) (! (= (IndexField_Inverse (IndexField i@@2)) i@@2) :qid |DafnyPreludebpl.476:15| :skolemid |448| :pattern ( (IndexField i@@2)) )))
(assert (forall ((arg0@@70 T@U) (arg1@@22 Int) ) (! (= (type (MultiIndexField arg0@@70 arg1@@22)) (FieldType BoxType)) :qid |funType:MultiIndexField| :pattern ( (MultiIndexField arg0@@70 arg1@@22)) )))
(assert (forall ((f@@1 T@U) (i@@3 Int) ) (!  (=> (= (type f@@1) (FieldType BoxType)) (= (FDim (MultiIndexField f@@1 i@@3)) (+ (FDim f@@1) 1))) :qid |DafnyPreludebpl.479:15| :skolemid |449| :pattern ( (MultiIndexField f@@1 i@@3)) )))
(assert (forall ((arg0@@71 T@U) ) (! (let ((T@@3 (FieldTypeInv0 (type arg0@@71)))) (= (type (MultiIndexField_Inverse0 arg0@@71)) (FieldType T@@3))) :qid |funType:MultiIndexField_Inverse0| :pattern ( (MultiIndexField_Inverse0 arg0@@71)) )))
(assert (forall ((f@@2 T@U) (i@@4 Int) ) (!  (=> (= (type f@@2) (FieldType BoxType)) (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@2 i@@4)) f@@2) (= (MultiIndexField_Inverse1 (MultiIndexField f@@2 i@@4)) i@@4))) :qid |DafnyPreludebpl.482:15| :skolemid |450| :pattern ( (MultiIndexField f@@2 i@@4)) )))
(assert  (and (and (forall ((alpha@@3 T@T) (arg0@@72 T@U) (arg1@@23 T@U) ) (! (= (type (FieldOfDecl alpha@@3 arg0@@72 arg1@@23)) (FieldType alpha@@3)) :qid |funType:FieldOfDecl| :pattern ( (FieldOfDecl alpha@@3 arg0@@72 arg1@@23)) )) (forall ((arg0@@73 T@U) ) (! (= (type (DeclType arg0@@73)) ClassNameType) :qid |funType:DeclType| :pattern ( (DeclType arg0@@73)) ))) (forall ((arg0@@74 T@U) ) (! (= (type (DeclName arg0@@74)) NameFamilyType) :qid |funType:DeclName| :pattern ( (DeclName arg0@@74)) ))))
(assert (forall ((cl T@U) (nm T@U) (T@@4 T@T) ) (!  (=> (and (= (type cl) ClassNameType) (= (type nm) NameFamilyType)) (and (= (DeclType (FieldOfDecl T@@4 cl nm)) cl) (= (DeclName (FieldOfDecl T@@4 cl nm)) nm))) :qid |DafnyPreludebpl.491:18| :skolemid |451| :pattern ( (FieldOfDecl T@@4 cl nm)) )))
(assert (forall ((h@@12 T@U) (k T@U) (v@@28 T@U) (t@@21 T@U) ) (!  (=> (and (and (and (and (= (type h@@12) (MapType0Type refType MapType1Type)) (= (type k) (MapType0Type refType MapType1Type))) (= (type t@@21) TyType)) ($HeapSucc h@@12 k)) ($IsAlloc v@@28 t@@21 h@@12)) ($IsAlloc v@@28 t@@21 k)) :qid |DafnyPreludebpl.504:17| :skolemid |452| :pattern ( ($HeapSucc h@@12 k) ($IsAlloc v@@28 t@@21 h@@12)) )))
(assert (forall ((h@@13 T@U) (k@@0 T@U) (bx@@21 T@U) (t@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@13) (MapType0Type refType MapType1Type)) (= (type k@@0) (MapType0Type refType MapType1Type))) (= (type bx@@21) BoxType)) (= (type t@@22) TyType)) ($HeapSucc h@@13 k@@0)) ($IsAllocBox bx@@21 t@@22 h@@13)) ($IsAllocBox bx@@21 t@@22 k@@0)) :qid |DafnyPreludebpl.507:14| :skolemid |453| :pattern ( ($HeapSucc h@@13 k@@0) ($IsAllocBox bx@@21 t@@22 h@@13)) )))
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (not ($IsGhostField alloc)))
(assert (forall ((o@@14 T@U) ) (!  (=> (= (type o@@14) refType) (<= 0 (_System.array.Length o@@14))) :qid |DafnyPreludebpl.524:15| :skolemid |454| :no-pattern (type o@@14) :no-pattern (U_2_int o@@14) :no-pattern (U_2_bool o@@14) )))
(assert (forall ((x@@15 Real) ) (! (= (q@Int x@@15) (to_int x@@15)) :qid |DafnyPreludebpl.530:14| :skolemid |455| :pattern ( (q@Int x@@15)) )))
(assert (forall ((x@@16 Int) ) (! (= (q@Real x@@16) (to_real x@@16)) :qid |DafnyPreludebpl.531:15| :skolemid |456| :pattern ( (q@Real x@@16)) )))
(assert (forall ((i@@5 Int) ) (! (= (q@Int (q@Real i@@5)) i@@5) :qid |DafnyPreludebpl.532:15| :skolemid |457| :pattern ( (q@Int (q@Real i@@5))) )))
(assert (= (type $OneHeap) (MapType0Type refType MapType1Type)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((h@@14 T@U) (r@@0 T@U) (f@@3 T@U) (x@@17 T@U) ) (! (let ((alpha@@4 (type x@@17))) (=> (and (and (and (= (type h@@14) (MapType0Type refType MapType1Type)) (= (type r@@0) refType)) (= (type f@@3) (FieldType alpha@@4))) ($IsGoodHeap (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17)))) ($HeapSucc h@@14 (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17))))) :qid |DafnyPreludebpl.554:22| :skolemid |458| :pattern ( (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17))) )))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (and (and (and (and (= (type a@@2) (MapType0Type refType MapType1Type)) (= (type b@@2) (MapType0Type refType MapType1Type))) (= (type c) (MapType0Type refType MapType1Type))) (not (= a@@2 c))) (and ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))) ($HeapSucc a@@2 c)) :qid |DafnyPreludebpl.557:15| :skolemid |459| :pattern ( ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) )))
(assert (forall ((h@@15 T@U) (k@@1 T@U) ) (!  (=> (and (and (= (type h@@15) (MapType0Type refType MapType1Type)) (= (type k@@1) (MapType0Type refType MapType1Type))) ($HeapSucc h@@15 k@@1)) (forall ((o@@15 T@U) ) (!  (=> (and (= (type o@@15) refType) (U_2_bool (MapType1Select (MapType0Select h@@15 o@@15) alloc))) (U_2_bool (MapType1Select (MapType0Select k@@1 o@@15) alloc))) :qid |DafnyPreludebpl.560:30| :skolemid |460| :pattern ( (MapType1Select (MapType0Select k@@1 o@@15) alloc)) ))) :qid |DafnyPreludebpl.559:15| :skolemid |461| :pattern ( ($HeapSucc h@@15 k@@1)) )))
(assert (forall ((h@@16 T@U) (k@@2 T@U) ) (!  (=> (and (and (= (type h@@16) (MapType0Type refType MapType1Type)) (= (type k@@2) (MapType0Type refType MapType1Type))) ($HeapSuccGhost h@@16 k@@2)) (and ($HeapSucc h@@16 k@@2) (forall ((o@@16 T@U) (f@@4 T@U) ) (! (let ((alpha@@5 (FieldTypeInv0 (type f@@4)))) (=> (and (and (= (type o@@16) refType) (= (type f@@4) (FieldType alpha@@5))) (not ($IsGhostField f@@4))) (= (MapType1Select (MapType0Select h@@16 o@@16) f@@4) (MapType1Select (MapType0Select k@@2 o@@16) f@@4)))) :qid |DafnyPreludebpl.566:20| :skolemid |462| :pattern ( (MapType1Select (MapType0Select k@@2 o@@16) f@@4)) )))) :qid |DafnyPreludebpl.563:15| :skolemid |463| :pattern ( ($HeapSuccGhost h@@16 k@@2)) )))
(assert (forall ((s@@3 T@U) ) (! (let ((T@@5 (MapType0TypeInv0 (type s@@3)))) (=> (= (type s@@3) (MapType0Type T@@5 boolType)) (<= 0 (|Set#Card| s@@3)))) :qid |DafnyPreludebpl.624:18| :skolemid |468| :pattern ( (|Set#Card| s@@3)) )))
(assert (forall ((T@@6 T@T) ) (! (= (type (|Set#Empty| T@@6)) (MapType0Type T@@6 boolType)) :qid |funType:Set#Empty| :pattern ( (|Set#Empty| T@@6)) )))
(assert (forall ((o@@17 T@U) ) (! (let ((T@@7 (type o@@17))) (not (U_2_bool (MapType0Select (|Set#Empty| T@@7) o@@17)))) :qid |DafnyPreludebpl.627:18| :skolemid |469| :pattern ( (let ((T@@7 (type o@@17))) (MapType0Select (|Set#Empty| T@@7) o@@17))) )))
(assert (forall ((s@@4 T@U) ) (! (let ((T@@8 (MapType0TypeInv0 (type s@@4)))) (=> (= (type s@@4) (MapType0Type T@@8 boolType)) (and (= (= (|Set#Card| s@@4) 0) (= s@@4 (|Set#Empty| T@@8))) (=> (not (= (|Set#Card| s@@4) 0)) (exists ((x@@18 T@U) ) (!  (and (= (type x@@18) T@@8) (U_2_bool (MapType0Select s@@4 x@@18))) :qid |DafnyPreludebpl.630:33| :skolemid |470| :no-pattern (type x@@18) :no-pattern (U_2_int x@@18) :no-pattern (U_2_bool x@@18) )))))) :qid |DafnyPreludebpl.628:18| :skolemid |471| :pattern ( (|Set#Card| s@@4)) )))
(assert (forall ((arg0@@75 T@U) ) (! (let ((T@@9 (type arg0@@75))) (= (type (|Set#Singleton| arg0@@75)) (MapType0Type T@@9 boolType))) :qid |funType:Set#Singleton| :pattern ( (|Set#Singleton| arg0@@75)) )))
(assert (forall ((r@@1 T@U) ) (! (U_2_bool (MapType0Select (|Set#Singleton| r@@1) r@@1)) :qid |DafnyPreludebpl.636:18| :skolemid |472| :pattern ( (|Set#Singleton| r@@1)) )))
(assert (forall ((r@@2 T@U) (o@@18 T@U) ) (! (let ((T@@10 (type r@@2))) (=> (= (type o@@18) T@@10) (= (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)) (= r@@2 o@@18)))) :qid |DafnyPreludebpl.637:18| :skolemid |473| :pattern ( (MapType0Select (|Set#Singleton| r@@2) o@@18)) )))
(assert (forall ((r@@3 T@U) ) (! (= (|Set#Card| (|Set#Singleton| r@@3)) 1) :qid |DafnyPreludebpl.638:18| :skolemid |474| :pattern ( (|Set#Card| (|Set#Singleton| r@@3))) )))
(assert (forall ((arg0@@76 T@U) (arg1@@24 T@U) ) (! (let ((T@@11 (type arg1@@24))) (= (type (|Set#UnionOne| arg0@@76 arg1@@24)) (MapType0Type T@@11 boolType))) :qid |funType:Set#UnionOne| :pattern ( (|Set#UnionOne| arg0@@76 arg1@@24)) )))
(assert (forall ((a@@3 T@U) (x@@19 T@U) (o@@19 T@U) ) (! (let ((T@@12 (type x@@19))) (=> (and (= (type a@@3) (MapType0Type T@@12 boolType)) (= (type o@@19) T@@12)) (= (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@19) o@@19))  (or (= o@@19 x@@19) (U_2_bool (MapType0Select a@@3 o@@19)))))) :qid |DafnyPreludebpl.641:18| :skolemid |475| :pattern ( (MapType0Select (|Set#UnionOne| a@@3 x@@19) o@@19)) )))
(assert (forall ((a@@4 T@U) (x@@20 T@U) ) (! (let ((T@@13 (type x@@20))) (=> (= (type a@@4) (MapType0Type T@@13 boolType)) (U_2_bool (MapType0Select (|Set#UnionOne| a@@4 x@@20) x@@20)))) :qid |DafnyPreludebpl.643:18| :skolemid |476| :pattern ( (|Set#UnionOne| a@@4 x@@20)) )))
(assert (forall ((a@@5 T@U) (x@@21 T@U) (y@@1 T@U) ) (! (let ((T@@14 (type x@@21))) (=> (and (and (= (type a@@5) (MapType0Type T@@14 boolType)) (= (type y@@1) T@@14)) (U_2_bool (MapType0Select a@@5 y@@1))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@5 x@@21) y@@1)))) :qid |DafnyPreludebpl.645:18| :skolemid |477| :pattern ( (|Set#UnionOne| a@@5 x@@21) (MapType0Select a@@5 y@@1)) )))
(assert (forall ((a@@6 T@U) (x@@22 T@U) ) (! (let ((T@@15 (type x@@22))) (=> (and (= (type a@@6) (MapType0Type T@@15 boolType)) (U_2_bool (MapType0Select a@@6 x@@22))) (= (|Set#Card| (|Set#UnionOne| a@@6 x@@22)) (|Set#Card| a@@6)))) :qid |DafnyPreludebpl.647:18| :skolemid |478| :pattern ( (|Set#Card| (|Set#UnionOne| a@@6 x@@22))) )))
(assert (forall ((a@@7 T@U) (x@@23 T@U) ) (! (let ((T@@16 (type x@@23))) (=> (and (= (type a@@7) (MapType0Type T@@16 boolType)) (not (U_2_bool (MapType0Select a@@7 x@@23)))) (= (|Set#Card| (|Set#UnionOne| a@@7 x@@23)) (+ (|Set#Card| a@@7) 1)))) :qid |DafnyPreludebpl.649:18| :skolemid |479| :pattern ( (|Set#Card| (|Set#UnionOne| a@@7 x@@23))) )))
(assert (forall ((arg0@@77 T@U) (arg1@@25 T@U) ) (! (let ((T@@17 (MapType0TypeInv0 (type arg0@@77)))) (= (type (|Set#Union| arg0@@77 arg1@@25)) (MapType0Type T@@17 boolType))) :qid |funType:Set#Union| :pattern ( (|Set#Union| arg0@@77 arg1@@25)) )))
(assert (forall ((a@@8 T@U) (b@@3 T@U) (o@@20 T@U) ) (! (let ((T@@18 (type o@@20))) (=> (and (= (type a@@8) (MapType0Type T@@18 boolType)) (= (type b@@3) (MapType0Type T@@18 boolType))) (= (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20))  (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20)))))) :qid |DafnyPreludebpl.653:18| :skolemid |480| :pattern ( (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) )))
(assert (forall ((a@@9 T@U) (b@@4 T@U) (y@@2 T@U) ) (! (let ((T@@19 (type y@@2))) (=> (and (and (= (type a@@9) (MapType0Type T@@19 boolType)) (= (type b@@4) (MapType0Type T@@19 boolType))) (U_2_bool (MapType0Select a@@9 y@@2))) (U_2_bool (MapType0Select (|Set#Union| a@@9 b@@4) y@@2)))) :qid |DafnyPreludebpl.655:18| :skolemid |481| :pattern ( (|Set#Union| a@@9 b@@4) (MapType0Select a@@9 y@@2)) )))
(assert (forall ((a@@10 T@U) (b@@5 T@U) (y@@3 T@U) ) (! (let ((T@@20 (type y@@3))) (=> (and (and (= (type a@@10) (MapType0Type T@@20 boolType)) (= (type b@@5) (MapType0Type T@@20 boolType))) (U_2_bool (MapType0Select b@@5 y@@3))) (U_2_bool (MapType0Select (|Set#Union| a@@10 b@@5) y@@3)))) :qid |DafnyPreludebpl.657:18| :skolemid |482| :pattern ( (|Set#Union| a@@10 b@@5) (MapType0Select b@@5 y@@3)) )))
(assert (forall ((arg0@@78 T@U) (arg1@@26 T@U) ) (! (let ((T@@21 (MapType0TypeInv0 (type arg0@@78)))) (= (type (|Set#Difference| arg0@@78 arg1@@26)) (MapType0Type T@@21 boolType))) :qid |funType:Set#Difference| :pattern ( (|Set#Difference| arg0@@78 arg1@@26)) )))
(assert (forall ((a@@11 T@U) (b@@6 T@U) ) (! (let ((T@@22 (MapType0TypeInv0 (type a@@11)))) (=> (and (and (= (type a@@11) (MapType0Type T@@22 boolType)) (= (type b@@6) (MapType0Type T@@22 boolType))) (|Set#Disjoint| a@@11 b@@6)) (and (= (|Set#Difference| (|Set#Union| a@@11 b@@6) a@@11) b@@6) (= (|Set#Difference| (|Set#Union| a@@11 b@@6) b@@6) a@@11)))) :qid |DafnyPreludebpl.659:18| :skolemid |483| :pattern ( (|Set#Union| a@@11 b@@6)) )))
(assert (forall ((arg0@@79 T@U) (arg1@@27 T@U) ) (! (let ((T@@23 (MapType0TypeInv0 (type arg0@@79)))) (= (type (|Set#Intersection| arg0@@79 arg1@@27)) (MapType0Type T@@23 boolType))) :qid |funType:Set#Intersection| :pattern ( (|Set#Intersection| arg0@@79 arg1@@27)) )))
(assert (forall ((a@@12 T@U) (b@@7 T@U) (o@@21 T@U) ) (! (let ((T@@24 (type o@@21))) (=> (and (= (type a@@12) (MapType0Type T@@24 boolType)) (= (type b@@7) (MapType0Type T@@24 boolType))) (= (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21))  (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21)))))) :qid |DafnyPreludebpl.669:18| :skolemid |484| :pattern ( (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) )))
(assert (forall ((a@@13 T@U) (b@@8 T@U) ) (! (let ((T@@25 (MapType0TypeInv0 (type a@@13)))) (=> (and (= (type a@@13) (MapType0Type T@@25 boolType)) (= (type b@@8) (MapType0Type T@@25 boolType))) (= (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8) (|Set#Union| a@@13 b@@8)))) :qid |DafnyPreludebpl.672:18| :skolemid |485| :pattern ( (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8)) )))
(assert (forall ((a@@14 T@U) (b@@9 T@U) ) (! (let ((T@@26 (MapType0TypeInv0 (type a@@14)))) (=> (and (= (type a@@14) (MapType0Type T@@26 boolType)) (= (type b@@9) (MapType0Type T@@26 boolType))) (= (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9)) (|Set#Union| a@@14 b@@9)))) :qid |DafnyPreludebpl.674:18| :skolemid |486| :pattern ( (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9))) )))
(assert (forall ((a@@15 T@U) (b@@10 T@U) ) (! (let ((T@@27 (MapType0TypeInv0 (type a@@15)))) (=> (and (= (type a@@15) (MapType0Type T@@27 boolType)) (= (type b@@10) (MapType0Type T@@27 boolType))) (= (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10) (|Set#Intersection| a@@15 b@@10)))) :qid |DafnyPreludebpl.676:18| :skolemid |487| :pattern ( (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10)) )))
(assert (forall ((a@@16 T@U) (b@@11 T@U) ) (! (let ((T@@28 (MapType0TypeInv0 (type a@@16)))) (=> (and (= (type a@@16) (MapType0Type T@@28 boolType)) (= (type b@@11) (MapType0Type T@@28 boolType))) (= (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11)) (|Set#Intersection| a@@16 b@@11)))) :qid |DafnyPreludebpl.678:18| :skolemid |488| :pattern ( (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11))) )))
(assert (forall ((a@@17 T@U) (b@@12 T@U) ) (! (let ((T@@29 (MapType0TypeInv0 (type a@@17)))) (=> (and (= (type a@@17) (MapType0Type T@@29 boolType)) (= (type b@@12) (MapType0Type T@@29 boolType))) (= (+ (|Set#Card| (|Set#Union| a@@17 b@@12)) (|Set#Card| (|Set#Intersection| a@@17 b@@12))) (+ (|Set#Card| a@@17) (|Set#Card| b@@12))))) :qid |DafnyPreludebpl.680:18| :skolemid |489| :pattern ( (|Set#Card| (|Set#Union| a@@17 b@@12))) :pattern ( (|Set#Card| (|Set#Intersection| a@@17 b@@12))) )))
(assert (forall ((a@@18 T@U) (b@@13 T@U) (o@@22 T@U) ) (! (let ((T@@30 (type o@@22))) (=> (and (= (type a@@18) (MapType0Type T@@30 boolType)) (= (type b@@13) (MapType0Type T@@30 boolType))) (= (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22))  (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22))))))) :qid |DafnyPreludebpl.684:18| :skolemid |490| :pattern ( (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) )))
(assert (forall ((a@@19 T@U) (b@@14 T@U) (y@@4 T@U) ) (! (let ((T@@31 (type y@@4))) (=> (and (and (= (type a@@19) (MapType0Type T@@31 boolType)) (= (type b@@14) (MapType0Type T@@31 boolType))) (U_2_bool (MapType0Select b@@14 y@@4))) (not (U_2_bool (MapType0Select (|Set#Difference| a@@19 b@@14) y@@4))))) :qid |DafnyPreludebpl.686:18| :skolemid |491| :pattern ( (|Set#Difference| a@@19 b@@14) (MapType0Select b@@14 y@@4)) )))
(assert (forall ((a@@20 T@U) (b@@15 T@U) ) (! (let ((T@@32 (MapType0TypeInv0 (type a@@20)))) (=> (and (= (type a@@20) (MapType0Type T@@32 boolType)) (= (type b@@15) (MapType0Type T@@32 boolType))) (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@20 b@@15)) (|Set#Card| (|Set#Difference| b@@15 a@@20))) (|Set#Card| (|Set#Intersection| a@@20 b@@15))) (|Set#Card| (|Set#Union| a@@20 b@@15))) (= (|Set#Card| (|Set#Difference| a@@20 b@@15)) (- (|Set#Card| a@@20) (|Set#Card| (|Set#Intersection| a@@20 b@@15))))))) :qid |DafnyPreludebpl.688:18| :skolemid |492| :pattern ( (|Set#Card| (|Set#Difference| a@@20 b@@15))) )))
(assert (forall ((a@@21 T@U) (b@@16 T@U) ) (! (let ((T@@33 (MapType0TypeInv0 (type a@@21)))) (=> (and (= (type a@@21) (MapType0Type T@@33 boolType)) (= (type b@@16) (MapType0Type T@@33 boolType))) (= (|Set#Subset| a@@21 b@@16) (forall ((o@@23 T@U) ) (!  (=> (and (= (type o@@23) T@@33) (U_2_bool (MapType0Select a@@21 o@@23))) (U_2_bool (MapType0Select b@@16 o@@23))) :qid |DafnyPreludebpl.697:32| :skolemid |493| :pattern ( (MapType0Select a@@21 o@@23)) :pattern ( (MapType0Select b@@16 o@@23)) ))))) :qid |DafnyPreludebpl.696:17| :skolemid |494| :pattern ( (|Set#Subset| a@@21 b@@16)) )))
(assert (forall ((a@@22 T@U) (b@@17 T@U) ) (! (let ((T@@34 (MapType0TypeInv0 (type a@@22)))) (=> (and (= (type a@@22) (MapType0Type T@@34 boolType)) (= (type b@@17) (MapType0Type T@@34 boolType))) (= (|Set#Equal| a@@22 b@@17) (forall ((o@@24 T@U) ) (!  (=> (= (type o@@24) T@@34) (= (U_2_bool (MapType0Select a@@22 o@@24)) (U_2_bool (MapType0Select b@@17 o@@24)))) :qid |DafnyPreludebpl.705:31| :skolemid |495| :pattern ( (MapType0Select a@@22 o@@24)) :pattern ( (MapType0Select b@@17 o@@24)) ))))) :qid |DafnyPreludebpl.704:17| :skolemid |496| :pattern ( (|Set#Equal| a@@22 b@@17)) )))
(assert (forall ((a@@23 T@U) (b@@18 T@U) ) (! (let ((T@@35 (MapType0TypeInv0 (type a@@23)))) (=> (and (and (= (type a@@23) (MapType0Type T@@35 boolType)) (= (type b@@18) (MapType0Type T@@35 boolType))) (|Set#Equal| a@@23 b@@18)) (= a@@23 b@@18))) :qid |DafnyPreludebpl.706:17| :skolemid |497| :pattern ( (|Set#Equal| a@@23 b@@18)) )))
(assert (forall ((a@@24 T@U) (b@@19 T@U) ) (! (let ((T@@36 (MapType0TypeInv0 (type a@@24)))) (=> (and (= (type a@@24) (MapType0Type T@@36 boolType)) (= (type b@@19) (MapType0Type T@@36 boolType))) (= (|Set#Disjoint| a@@24 b@@19) (forall ((o@@25 T@U) ) (!  (=> (= (type o@@25) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@25))) (not (U_2_bool (MapType0Select b@@19 o@@25))))) :qid |DafnyPreludebpl.711:34| :skolemid |498| :pattern ( (MapType0Select a@@24 o@@25)) :pattern ( (MapType0Select b@@19 o@@25)) ))))) :qid |DafnyPreludebpl.710:18| :skolemid |499| :pattern ( (|Set#Disjoint| a@@24 b@@19)) )))
(assert (forall ((T@@37 T@T) ) (! (= (type (|ISet#Empty| T@@37)) (MapType0Type T@@37 boolType)) :qid |funType:ISet#Empty| :pattern ( (|ISet#Empty| T@@37)) )))
(assert (forall ((o@@26 T@U) ) (! (let ((T@@38 (type o@@26))) (not (U_2_bool (MapType0Select (|ISet#Empty| T@@38) o@@26)))) :qid |DafnyPreludebpl.720:18| :skolemid |500| :pattern ( (let ((T@@38 (type o@@26))) (MapType0Select (|ISet#Empty| T@@38) o@@26))) )))
(assert (forall ((arg0@@80 T@U) (arg1@@28 T@U) ) (! (let ((T@@39 (type arg1@@28))) (= (type (|ISet#UnionOne| arg0@@80 arg1@@28)) (MapType0Type T@@39 boolType))) :qid |funType:ISet#UnionOne| :pattern ( (|ISet#UnionOne| arg0@@80 arg1@@28)) )))
(assert (forall ((a@@25 T@U) (x@@24 T@U) (o@@27 T@U) ) (! (let ((T@@40 (type x@@24))) (=> (and (= (type a@@25) (MapType0Type T@@40 boolType)) (= (type o@@27) T@@40)) (= (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@24) o@@27))  (or (= o@@27 x@@24) (U_2_bool (MapType0Select a@@25 o@@27)))))) :qid |DafnyPreludebpl.727:18| :skolemid |501| :pattern ( (MapType0Select (|ISet#UnionOne| a@@25 x@@24) o@@27)) )))
(assert (forall ((a@@26 T@U) (x@@25 T@U) ) (! (let ((T@@41 (type x@@25))) (=> (= (type a@@26) (MapType0Type T@@41 boolType)) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@26 x@@25) x@@25)))) :qid |DafnyPreludebpl.729:18| :skolemid |502| :pattern ( (|ISet#UnionOne| a@@26 x@@25)) )))
(assert (forall ((a@@27 T@U) (x@@26 T@U) (y@@5 T@U) ) (! (let ((T@@42 (type x@@26))) (=> (and (and (= (type a@@27) (MapType0Type T@@42 boolType)) (= (type y@@5) T@@42)) (U_2_bool (MapType0Select a@@27 y@@5))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@27 x@@26) y@@5)))) :qid |DafnyPreludebpl.731:18| :skolemid |503| :pattern ( (|ISet#UnionOne| a@@27 x@@26) (MapType0Select a@@27 y@@5)) )))
(assert (forall ((arg0@@81 T@U) (arg1@@29 T@U) ) (! (let ((T@@43 (MapType0TypeInv0 (type arg0@@81)))) (= (type (|ISet#Union| arg0@@81 arg1@@29)) (MapType0Type T@@43 boolType))) :qid |funType:ISet#Union| :pattern ( (|ISet#Union| arg0@@81 arg1@@29)) )))
(assert (forall ((a@@28 T@U) (b@@20 T@U) (o@@28 T@U) ) (! (let ((T@@44 (type o@@28))) (=> (and (= (type a@@28) (MapType0Type T@@44 boolType)) (= (type b@@20) (MapType0Type T@@44 boolType))) (= (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@28))  (or (U_2_bool (MapType0Select a@@28 o@@28)) (U_2_bool (MapType0Select b@@20 o@@28)))))) :qid |DafnyPreludebpl.735:18| :skolemid |504| :pattern ( (MapType0Select (|ISet#Union| a@@28 b@@20) o@@28)) )))
(assert (forall ((a@@29 T@U) (b@@21 T@U) (y@@6 T@U) ) (! (let ((T@@45 (type y@@6))) (=> (and (and (= (type a@@29) (MapType0Type T@@45 boolType)) (= (type b@@21) (MapType0Type T@@45 boolType))) (U_2_bool (MapType0Select a@@29 y@@6))) (U_2_bool (MapType0Select (|ISet#Union| a@@29 b@@21) y@@6)))) :qid |DafnyPreludebpl.737:18| :skolemid |505| :pattern ( (|ISet#Union| a@@29 b@@21) (MapType0Select a@@29 y@@6)) )))
(assert (forall ((a@@30 T@U) (b@@22 T@U) (y@@7 T@U) ) (! (let ((T@@46 (type y@@7))) (=> (and (and (= (type a@@30) (MapType0Type T@@46 boolType)) (= (type b@@22) (MapType0Type T@@46 boolType))) (U_2_bool (MapType0Select b@@22 y@@7))) (U_2_bool (MapType0Select (|ISet#Union| a@@30 b@@22) y@@7)))) :qid |DafnyPreludebpl.739:18| :skolemid |506| :pattern ( (|ISet#Union| a@@30 b@@22) (MapType0Select b@@22 y@@7)) )))
(assert (forall ((arg0@@82 T@U) (arg1@@30 T@U) ) (! (let ((T@@47 (MapType0TypeInv0 (type arg0@@82)))) (= (type (|ISet#Difference| arg0@@82 arg1@@30)) (MapType0Type T@@47 boolType))) :qid |funType:ISet#Difference| :pattern ( (|ISet#Difference| arg0@@82 arg1@@30)) )))
(assert (forall ((a@@31 T@U) (b@@23 T@U) ) (! (let ((T@@48 (MapType0TypeInv0 (type a@@31)))) (=> (and (and (= (type a@@31) (MapType0Type T@@48 boolType)) (= (type b@@23) (MapType0Type T@@48 boolType))) (|ISet#Disjoint| a@@31 b@@23)) (and (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) a@@31) b@@23) (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) b@@23) a@@31)))) :qid |DafnyPreludebpl.741:18| :skolemid |507| :pattern ( (|ISet#Union| a@@31 b@@23)) )))
(assert (forall ((arg0@@83 T@U) (arg1@@31 T@U) ) (! (let ((T@@49 (MapType0TypeInv0 (type arg0@@83)))) (= (type (|ISet#Intersection| arg0@@83 arg1@@31)) (MapType0Type T@@49 boolType))) :qid |funType:ISet#Intersection| :pattern ( (|ISet#Intersection| arg0@@83 arg1@@31)) )))
(assert (forall ((a@@32 T@U) (b@@24 T@U) (o@@29 T@U) ) (! (let ((T@@50 (type o@@29))) (=> (and (= (type a@@32) (MapType0Type T@@50 boolType)) (= (type b@@24) (MapType0Type T@@50 boolType))) (= (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@29))  (and (U_2_bool (MapType0Select a@@32 o@@29)) (U_2_bool (MapType0Select b@@24 o@@29)))))) :qid |DafnyPreludebpl.747:18| :skolemid |508| :pattern ( (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@29)) )))
(assert (forall ((a@@33 T@U) (b@@25 T@U) ) (! (let ((T@@51 (MapType0TypeInv0 (type a@@33)))) (=> (and (= (type a@@33) (MapType0Type T@@51 boolType)) (= (type b@@25) (MapType0Type T@@51 boolType))) (= (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25) (|ISet#Union| a@@33 b@@25)))) :qid |DafnyPreludebpl.750:18| :skolemid |509| :pattern ( (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25)) )))
(assert (forall ((a@@34 T@U) (b@@26 T@U) ) (! (let ((T@@52 (MapType0TypeInv0 (type a@@34)))) (=> (and (= (type a@@34) (MapType0Type T@@52 boolType)) (= (type b@@26) (MapType0Type T@@52 boolType))) (= (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26)) (|ISet#Union| a@@34 b@@26)))) :qid |DafnyPreludebpl.752:18| :skolemid |510| :pattern ( (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26))) )))
(assert (forall ((a@@35 T@U) (b@@27 T@U) ) (! (let ((T@@53 (MapType0TypeInv0 (type a@@35)))) (=> (and (= (type a@@35) (MapType0Type T@@53 boolType)) (= (type b@@27) (MapType0Type T@@53 boolType))) (= (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27) (|ISet#Intersection| a@@35 b@@27)))) :qid |DafnyPreludebpl.754:18| :skolemid |511| :pattern ( (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27)) )))
(assert (forall ((a@@36 T@U) (b@@28 T@U) ) (! (let ((T@@54 (MapType0TypeInv0 (type a@@36)))) (=> (and (= (type a@@36) (MapType0Type T@@54 boolType)) (= (type b@@28) (MapType0Type T@@54 boolType))) (= (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28)) (|ISet#Intersection| a@@36 b@@28)))) :qid |DafnyPreludebpl.756:18| :skolemid |512| :pattern ( (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28))) )))
(assert (forall ((a@@37 T@U) (b@@29 T@U) (o@@30 T@U) ) (! (let ((T@@55 (type o@@30))) (=> (and (= (type a@@37) (MapType0Type T@@55 boolType)) (= (type b@@29) (MapType0Type T@@55 boolType))) (= (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@30))  (and (U_2_bool (MapType0Select a@@37 o@@30)) (not (U_2_bool (MapType0Select b@@29 o@@30))))))) :qid |DafnyPreludebpl.761:18| :skolemid |513| :pattern ( (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@30)) )))
(assert (forall ((a@@38 T@U) (b@@30 T@U) (y@@8 T@U) ) (! (let ((T@@56 (type y@@8))) (=> (and (and (= (type a@@38) (MapType0Type T@@56 boolType)) (= (type b@@30) (MapType0Type T@@56 boolType))) (U_2_bool (MapType0Select b@@30 y@@8))) (not (U_2_bool (MapType0Select (|ISet#Difference| a@@38 b@@30) y@@8))))) :qid |DafnyPreludebpl.763:18| :skolemid |514| :pattern ( (|ISet#Difference| a@@38 b@@30) (MapType0Select b@@30 y@@8)) )))
(assert (forall ((a@@39 T@U) (b@@31 T@U) ) (! (let ((T@@57 (MapType0TypeInv0 (type a@@39)))) (=> (and (= (type a@@39) (MapType0Type T@@57 boolType)) (= (type b@@31) (MapType0Type T@@57 boolType))) (= (|ISet#Subset| a@@39 b@@31) (forall ((o@@31 T@U) ) (!  (=> (and (= (type o@@31) T@@57) (U_2_bool (MapType0Select a@@39 o@@31))) (U_2_bool (MapType0Select b@@31 o@@31))) :qid |DafnyPreludebpl.768:33| :skolemid |515| :pattern ( (MapType0Select a@@39 o@@31)) :pattern ( (MapType0Select b@@31 o@@31)) ))))) :qid |DafnyPreludebpl.767:17| :skolemid |516| :pattern ( (|ISet#Subset| a@@39 b@@31)) )))
(assert (forall ((a@@40 T@U) (b@@32 T@U) ) (! (let ((T@@58 (MapType0TypeInv0 (type a@@40)))) (=> (and (= (type a@@40) (MapType0Type T@@58 boolType)) (= (type b@@32) (MapType0Type T@@58 boolType))) (= (|ISet#Equal| a@@40 b@@32) (forall ((o@@32 T@U) ) (!  (=> (= (type o@@32) T@@58) (= (U_2_bool (MapType0Select a@@40 o@@32)) (U_2_bool (MapType0Select b@@32 o@@32)))) :qid |DafnyPreludebpl.772:32| :skolemid |517| :pattern ( (MapType0Select a@@40 o@@32)) :pattern ( (MapType0Select b@@32 o@@32)) ))))) :qid |DafnyPreludebpl.771:17| :skolemid |518| :pattern ( (|ISet#Equal| a@@40 b@@32)) )))
(assert (forall ((a@@41 T@U) (b@@33 T@U) ) (! (let ((T@@59 (MapType0TypeInv0 (type a@@41)))) (=> (and (and (= (type a@@41) (MapType0Type T@@59 boolType)) (= (type b@@33) (MapType0Type T@@59 boolType))) (|ISet#Equal| a@@41 b@@33)) (= a@@41 b@@33))) :qid |DafnyPreludebpl.773:17| :skolemid |519| :pattern ( (|ISet#Equal| a@@41 b@@33)) )))
(assert (forall ((a@@42 T@U) (b@@34 T@U) ) (! (let ((T@@60 (MapType0TypeInv0 (type a@@42)))) (=> (and (= (type a@@42) (MapType0Type T@@60 boolType)) (= (type b@@34) (MapType0Type T@@60 boolType))) (= (|ISet#Disjoint| a@@42 b@@34) (forall ((o@@33 T@U) ) (!  (=> (= (type o@@33) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@33))) (not (U_2_bool (MapType0Select b@@34 o@@33))))) :qid |DafnyPreludebpl.778:35| :skolemid |520| :pattern ( (MapType0Select a@@42 o@@33)) :pattern ( (MapType0Select b@@34 o@@33)) ))))) :qid |DafnyPreludebpl.777:18| :skolemid |521| :pattern ( (|ISet#Disjoint| a@@42 b@@34)) )))
(assert (forall ((a@@43 Int) (b@@35 Int) ) (! (= (<= a@@43 b@@35) (= (|Math#min| a@@43 b@@35) a@@43)) :qid |DafnyPreludebpl.785:15| :skolemid |522| :pattern ( (|Math#min| a@@43 b@@35)) )))
(assert (forall ((a@@44 Int) (b@@36 Int) ) (! (= (<= b@@36 a@@44) (= (|Math#min| a@@44 b@@36) b@@36)) :qid |DafnyPreludebpl.786:15| :skolemid |523| :pattern ( (|Math#min| a@@44 b@@36)) )))
(assert (forall ((a@@45 Int) (b@@37 Int) ) (!  (or (= (|Math#min| a@@45 b@@37) a@@45) (= (|Math#min| a@@45 b@@37) b@@37)) :qid |DafnyPreludebpl.787:15| :skolemid |524| :pattern ( (|Math#min| a@@45 b@@37)) )))
(assert (forall ((a@@46 Int) ) (!  (=> (<= 0 a@@46) (= (|Math#clip| a@@46) a@@46)) :qid |DafnyPreludebpl.790:15| :skolemid |525| :pattern ( (|Math#clip| a@@46)) )))
(assert (forall ((a@@47 Int) ) (!  (=> (< a@@47 0) (= (|Math#clip| a@@47) 0)) :qid |DafnyPreludebpl.791:15| :skolemid |526| :pattern ( (|Math#clip| a@@47)) )))
(assert (forall ((ms T@U) ) (! (let ((T@@61 (MapType0TypeInv0 (type ms)))) (=> (= (type ms) (MapType0Type T@@61 intType)) (= ($IsGoodMultiSet ms) (forall ((bx@@22 T@U) ) (!  (=> (= (type bx@@22) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@22))) (<= (U_2_int (MapType0Select ms bx@@22)) (|MultiSet#Card| ms)))) :qid |DafnyPreludebpl.799:11| :skolemid |527| :pattern ( (MapType0Select ms bx@@22)) ))))) :qid |DafnyPreludebpl.797:18| :skolemid |528| :pattern ( ($IsGoodMultiSet ms)) )))
(assert (forall ((s@@5 T@U) ) (! (let ((T@@62 (MapType0TypeInv0 (type s@@5)))) (=> (= (type s@@5) (MapType0Type T@@62 intType)) (<= 0 (|MultiSet#Card| s@@5)))) :qid |DafnyPreludebpl.802:18| :skolemid |529| :pattern ( (|MultiSet#Card| s@@5)) )))
(assert (forall ((s@@6 T@U) (x@@27 T@U) (n@@5 T@U) ) (! (let ((T@@63 (type x@@27))) (=> (and (and (= (type s@@6) (MapType0Type T@@63 intType)) (= (type n@@5) intType)) (<= 0 (U_2_int n@@5))) (= (|MultiSet#Card| (MapType0Store s@@6 x@@27 n@@5)) (+ (- (|MultiSet#Card| s@@6) (U_2_int (MapType0Select s@@6 x@@27))) (U_2_int n@@5))))) :qid |DafnyPreludebpl.803:18| :skolemid |530| :pattern ( (|MultiSet#Card| (MapType0Store s@@6 x@@27 n@@5))) )))
(assert (forall ((T@@64 T@T) ) (! (= (type (|MultiSet#Empty| T@@64)) (MapType0Type T@@64 intType)) :qid |funType:MultiSet#Empty| :pattern ( (|MultiSet#Empty| T@@64)) )))
(assert (forall ((o@@34 T@U) ) (! (let ((T@@65 (type o@@34))) (= (U_2_int (MapType0Select (|MultiSet#Empty| T@@65) o@@34)) 0)) :qid |DafnyPreludebpl.807:18| :skolemid |531| :pattern ( (let ((T@@65 (type o@@34))) (MapType0Select (|MultiSet#Empty| T@@65) o@@34))) )))
(assert (forall ((s@@7 T@U) ) (! (let ((T@@66 (MapType0TypeInv0 (type s@@7)))) (=> (= (type s@@7) (MapType0Type T@@66 intType)) (and (= (= (|MultiSet#Card| s@@7) 0) (= s@@7 (|MultiSet#Empty| T@@66))) (=> (not (= (|MultiSet#Card| s@@7) 0)) (exists ((x@@28 T@U) ) (!  (and (= (type x@@28) T@@66) (< 0 (U_2_int (MapType0Select s@@7 x@@28)))) :qid |DafnyPreludebpl.810:38| :skolemid |532| :no-pattern (type x@@28) :no-pattern (U_2_int x@@28) :no-pattern (U_2_bool x@@28) )))))) :qid |DafnyPreludebpl.808:18| :skolemid |533| :pattern ( (|MultiSet#Card| s@@7)) )))
(assert (forall ((arg0@@84 T@U) ) (! (let ((T@@67 (type arg0@@84))) (= (type (|MultiSet#Singleton| arg0@@84)) (MapType0Type T@@67 intType))) :qid |funType:MultiSet#Singleton| :pattern ( (|MultiSet#Singleton| arg0@@84)) )))
(assert (forall ((r@@4 T@U) (o@@35 T@U) ) (! (let ((T@@68 (type r@@4))) (=> (= (type o@@35) T@@68) (and (= (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) 1) (= r@@4 o@@35)) (= (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) 0) (not (= r@@4 o@@35)))))) :qid |DafnyPreludebpl.813:18| :skolemid |534| :pattern ( (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) )))
(assert (forall ((arg0@@85 T@U) (arg1@@32 T@U) ) (! (let ((T@@69 (type arg1@@32))) (= (type (|MultiSet#UnionOne| arg0@@85 arg1@@32)) (MapType0Type T@@69 intType))) :qid |funType:MultiSet#UnionOne| :pattern ( (|MultiSet#UnionOne| arg0@@85 arg1@@32)) )))
(assert (forall ((r@@5 T@U) ) (! (let ((T@@70 (type r@@5))) (= (|MultiSet#Singleton| r@@5) (|MultiSet#UnionOne| (|MultiSet#Empty| T@@70) r@@5))) :qid |DafnyPreludebpl.815:18| :skolemid |535| :pattern ( (|MultiSet#Singleton| r@@5)) )))
(assert (forall ((a@@48 T@U) (x@@29 T@U) (o@@36 T@U) ) (! (let ((T@@71 (type x@@29))) (=> (and (= (type a@@48) (MapType0Type T@@71 intType)) (= (type o@@36) T@@71)) (= (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@29) o@@36)))  (or (= o@@36 x@@29) (< 0 (U_2_int (MapType0Select a@@48 o@@36))))))) :qid |DafnyPreludebpl.819:18| :skolemid |536| :pattern ( (MapType0Select (|MultiSet#UnionOne| a@@48 x@@29) o@@36)) )))
(assert (forall ((a@@49 T@U) (x@@30 T@U) ) (! (let ((T@@72 (type x@@30))) (=> (= (type a@@49) (MapType0Type T@@72 intType)) (= (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@49 x@@30) x@@30)) (+ (U_2_int (MapType0Select a@@49 x@@30)) 1)))) :qid |DafnyPreludebpl.822:18| :skolemid |537| :pattern ( (|MultiSet#UnionOne| a@@49 x@@30)) )))
(assert (forall ((a@@50 T@U) (x@@31 T@U) (y@@9 T@U) ) (! (let ((T@@73 (type x@@31))) (=> (and (and (= (type a@@50) (MapType0Type T@@73 intType)) (= (type y@@9) T@@73)) (< 0 (U_2_int (MapType0Select a@@50 y@@9)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@50 x@@31) y@@9))))) :qid |DafnyPreludebpl.825:18| :skolemid |538| :pattern ( (|MultiSet#UnionOne| a@@50 x@@31) (MapType0Select a@@50 y@@9)) )))
(assert (forall ((a@@51 T@U) (x@@32 T@U) (y@@10 T@U) ) (! (let ((T@@74 (type x@@32))) (=> (and (and (= (type a@@51) (MapType0Type T@@74 intType)) (= (type y@@10) T@@74)) (not (= x@@32 y@@10))) (= (U_2_int (MapType0Select a@@51 y@@10)) (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@51 x@@32) y@@10))))) :qid |DafnyPreludebpl.828:18| :skolemid |539| :pattern ( (|MultiSet#UnionOne| a@@51 x@@32) (MapType0Select a@@51 y@@10)) )))
(assert (forall ((a@@52 T@U) (x@@33 T@U) ) (! (let ((T@@75 (type x@@33))) (=> (= (type a@@52) (MapType0Type T@@75 intType)) (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@33)) (+ (|MultiSet#Card| a@@52) 1)))) :qid |DafnyPreludebpl.830:18| :skolemid |540| :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@33))) )))
(assert (forall ((arg0@@86 T@U) (arg1@@33 T@U) ) (! (let ((T@@76 (MapType0TypeInv0 (type arg0@@86)))) (= (type (|MultiSet#Union| arg0@@86 arg1@@33)) (MapType0Type T@@76 intType))) :qid |funType:MultiSet#Union| :pattern ( (|MultiSet#Union| arg0@@86 arg1@@33)) )))
(assert (forall ((a@@53 T@U) (b@@38 T@U) (o@@37 T@U) ) (! (let ((T@@77 (type o@@37))) (=> (and (= (type a@@53) (MapType0Type T@@77 intType)) (= (type b@@38) (MapType0Type T@@77 intType))) (= (U_2_int (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@37)) (+ (U_2_int (MapType0Select a@@53 o@@37)) (U_2_int (MapType0Select b@@38 o@@37)))))) :qid |DafnyPreludebpl.836:18| :skolemid |541| :pattern ( (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@37)) )))
(assert (forall ((a@@54 T@U) (b@@39 T@U) ) (! (let ((T@@78 (MapType0TypeInv0 (type a@@54)))) (=> (and (= (type a@@54) (MapType0Type T@@78 intType)) (= (type b@@39) (MapType0Type T@@78 intType))) (= (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39)) (+ (|MultiSet#Card| a@@54) (|MultiSet#Card| b@@39))))) :qid |DafnyPreludebpl.838:18| :skolemid |542| :pattern ( (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39))) )))
(assert (forall ((arg0@@87 T@U) (arg1@@34 T@U) ) (! (let ((T@@79 (MapType0TypeInv0 (type arg0@@87)))) (= (type (|MultiSet#Intersection| arg0@@87 arg1@@34)) (MapType0Type T@@79 intType))) :qid |funType:MultiSet#Intersection| :pattern ( (|MultiSet#Intersection| arg0@@87 arg1@@34)) )))
(assert (forall ((a@@55 T@U) (b@@40 T@U) (o@@38 T@U) ) (! (let ((T@@80 (type o@@38))) (=> (and (= (type a@@55) (MapType0Type T@@80 intType)) (= (type b@@40) (MapType0Type T@@80 intType))) (= (U_2_int (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@38)) (|Math#min| (U_2_int (MapType0Select a@@55 o@@38)) (U_2_int (MapType0Select b@@40 o@@38)))))) :qid |DafnyPreludebpl.842:18| :skolemid |543| :pattern ( (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@38)) )))
(assert (forall ((a@@56 T@U) (b@@41 T@U) ) (! (let ((T@@81 (MapType0TypeInv0 (type a@@56)))) (=> (and (= (type a@@56) (MapType0Type T@@81 intType)) (= (type b@@41) (MapType0Type T@@81 intType))) (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41) (|MultiSet#Intersection| a@@56 b@@41)))) :qid |DafnyPreludebpl.846:18| :skolemid |544| :pattern ( (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41)) )))
(assert (forall ((a@@57 T@U) (b@@42 T@U) ) (! (let ((T@@82 (MapType0TypeInv0 (type a@@57)))) (=> (and (= (type a@@57) (MapType0Type T@@82 intType)) (= (type b@@42) (MapType0Type T@@82 intType))) (= (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42)) (|MultiSet#Intersection| a@@57 b@@42)))) :qid |DafnyPreludebpl.848:18| :skolemid |545| :pattern ( (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42))) )))
(assert (forall ((arg0@@88 T@U) (arg1@@35 T@U) ) (! (let ((T@@83 (MapType0TypeInv0 (type arg0@@88)))) (= (type (|MultiSet#Difference| arg0@@88 arg1@@35)) (MapType0Type T@@83 intType))) :qid |funType:MultiSet#Difference| :pattern ( (|MultiSet#Difference| arg0@@88 arg1@@35)) )))
(assert (forall ((a@@58 T@U) (b@@43 T@U) (o@@39 T@U) ) (! (let ((T@@84 (type o@@39))) (=> (and (= (type a@@58) (MapType0Type T@@84 intType)) (= (type b@@43) (MapType0Type T@@84 intType))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@39)) (|Math#clip| (- (U_2_int (MapType0Select a@@58 o@@39)) (U_2_int (MapType0Select b@@43 o@@39))))))) :qid |DafnyPreludebpl.853:18| :skolemid |546| :pattern ( (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@39)) )))
(assert (forall ((a@@59 T@U) (b@@44 T@U) (y@@11 T@U) ) (! (let ((T@@85 (type y@@11))) (=> (and (and (= (type a@@59) (MapType0Type T@@85 intType)) (= (type b@@44) (MapType0Type T@@85 intType))) (<= (U_2_int (MapType0Select a@@59 y@@11)) (U_2_int (MapType0Select b@@44 y@@11)))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@59 b@@44) y@@11)) 0))) :qid |DafnyPreludebpl.855:18| :skolemid |547| :pattern ( (|MultiSet#Difference| a@@59 b@@44) (MapType0Select b@@44 y@@11) (MapType0Select a@@59 y@@11)) )))
(assert (forall ((a@@60 T@U) (b@@45 T@U) ) (! (let ((T@@86 (MapType0TypeInv0 (type a@@60)))) (=> (and (= (type a@@60) (MapType0Type T@@86 intType)) (= (type b@@45) (MapType0Type T@@86 intType))) (and (= (+ (+ (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (|MultiSet#Card| (|MultiSet#Difference| b@@45 a@@60))) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45)))) (|MultiSet#Card| (|MultiSet#Union| a@@60 b@@45))) (= (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (- (|MultiSet#Card| a@@60) (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45))))))) :qid |DafnyPreludebpl.857:18| :skolemid |548| :pattern ( (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45))) )))
(assert (forall ((a@@61 T@U) (b@@46 T@U) ) (! (let ((T@@87 (MapType0TypeInv0 (type a@@61)))) (=> (and (= (type a@@61) (MapType0Type T@@87 intType)) (= (type b@@46) (MapType0Type T@@87 intType))) (= (|MultiSet#Subset| a@@61 b@@46) (forall ((o@@40 T@U) ) (!  (=> (= (type o@@40) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@40)) (U_2_int (MapType0Select b@@46 o@@40)))) :qid |DafnyPreludebpl.867:37| :skolemid |549| :pattern ( (MapType0Select a@@61 o@@40)) :pattern ( (MapType0Select b@@46 o@@40)) ))))) :qid |DafnyPreludebpl.866:17| :skolemid |550| :pattern ( (|MultiSet#Subset| a@@61 b@@46)) )))
(assert (forall ((a@@62 T@U) (b@@47 T@U) ) (! (let ((T@@88 (MapType0TypeInv0 (type a@@62)))) (=> (and (= (type a@@62) (MapType0Type T@@88 intType)) (= (type b@@47) (MapType0Type T@@88 intType))) (= (|MultiSet#Equal| a@@62 b@@47) (forall ((o@@41 T@U) ) (!  (=> (= (type o@@41) T@@88) (= (U_2_int (MapType0Select a@@62 o@@41)) (U_2_int (MapType0Select b@@47 o@@41)))) :qid |DafnyPreludebpl.871:36| :skolemid |551| :pattern ( (MapType0Select a@@62 o@@41)) :pattern ( (MapType0Select b@@47 o@@41)) ))))) :qid |DafnyPreludebpl.870:17| :skolemid |552| :pattern ( (|MultiSet#Equal| a@@62 b@@47)) )))
(assert (forall ((a@@63 T@U) (b@@48 T@U) ) (! (let ((T@@89 (MapType0TypeInv0 (type a@@63)))) (=> (and (and (= (type a@@63) (MapType0Type T@@89 intType)) (= (type b@@48) (MapType0Type T@@89 intType))) (|MultiSet#Equal| a@@63 b@@48)) (= a@@63 b@@48))) :qid |DafnyPreludebpl.873:17| :skolemid |553| :pattern ( (|MultiSet#Equal| a@@63 b@@48)) )))
(assert (forall ((a@@64 T@U) (b@@49 T@U) ) (! (let ((T@@90 (MapType0TypeInv0 (type a@@64)))) (=> (and (= (type a@@64) (MapType0Type T@@90 intType)) (= (type b@@49) (MapType0Type T@@90 intType))) (= (|MultiSet#Disjoint| a@@64 b@@49) (forall ((o@@42 T@U) ) (!  (=> (= (type o@@42) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@42)) 0) (= (U_2_int (MapType0Select b@@49 o@@42)) 0))) :qid |DafnyPreludebpl.878:39| :skolemid |554| :pattern ( (MapType0Select a@@64 o@@42)) :pattern ( (MapType0Select b@@49 o@@42)) ))))) :qid |DafnyPreludebpl.877:18| :skolemid |555| :pattern ( (|MultiSet#Disjoint| a@@64 b@@49)) )))
(assert (forall ((arg0@@89 T@U) ) (! (let ((T@@91 (MapType0TypeInv0 (type arg0@@89)))) (= (type (|MultiSet#FromSet| arg0@@89)) (MapType0Type T@@91 intType))) :qid |funType:MultiSet#FromSet| :pattern ( (|MultiSet#FromSet| arg0@@89)) )))
(assert (forall ((s@@8 T@U) (a@@65 T@U) ) (! (let ((T@@92 (type a@@65))) (=> (= (type s@@8) (MapType0Type T@@92 boolType)) (and (= (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0)  (not (U_2_bool (MapType0Select s@@8 a@@65)))) (= (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1) (U_2_bool (MapType0Select s@@8 a@@65)))))) :qid |DafnyPreludebpl.882:18| :skolemid |556| :pattern ( (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) )))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@93 (MapType0TypeInv0 (type s@@9)))) (=> (= (type s@@9) (MapType0Type T@@93 boolType)) (= (|MultiSet#Card| (|MultiSet#FromSet| s@@9)) (|Set#Card| s@@9)))) :qid |DafnyPreludebpl.885:18| :skolemid |557| :pattern ( (|MultiSet#Card| (|MultiSet#FromSet| s@@9))) )))
(assert (forall ((arg0@@90 T@U) ) (! (let ((T@@94 (SeqTypeInv0 (type arg0@@90)))) (= (type (|MultiSet#FromSeq| arg0@@90)) (MapType0Type T@@94 intType))) :qid |funType:MultiSet#FromSeq| :pattern ( (|MultiSet#FromSeq| arg0@@90)) )))
(assert (forall ((s@@10 T@U) ) (! (let ((T@@95 (SeqTypeInv0 (type s@@10)))) (=> (= (type s@@10) (SeqType T@@95)) ($IsGoodMultiSet (|MultiSet#FromSeq| s@@10)))) :qid |DafnyPreludebpl.891:18| :skolemid |558| :pattern ( (|MultiSet#FromSeq| s@@10)) )))
(assert (forall ((s@@11 T@U) ) (! (let ((T@@96 (SeqTypeInv0 (type s@@11)))) (=> (= (type s@@11) (SeqType T@@96)) (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@11)) (|Seq#Length| s@@11)))) :qid |DafnyPreludebpl.893:18| :skolemid |559| :pattern ( (|MultiSet#Card| (|MultiSet#FromSeq| s@@11))) )))
(assert (forall ((arg0@@91 T@U) (arg1@@36 T@U) ) (! (let ((T@@97 (type arg1@@36))) (= (type (|Seq#Build| arg0@@91 arg1@@36)) (SeqType T@@97))) :qid |funType:Seq#Build| :pattern ( (|Seq#Build| arg0@@91 arg1@@36)) )))
(assert (forall ((s@@12 T@U) (v@@29 T@U) ) (! (let ((T@@98 (type v@@29))) (=> (= (type s@@12) (SeqType T@@98)) (= (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@29)) (|MultiSet#UnionOne| (|MultiSet#FromSeq| s@@12) v@@29)))) :qid |DafnyPreludebpl.897:18| :skolemid |560| :pattern ( (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@29))) )))
(assert (forall ((T@@99 T@T) ) (! (= (type (|Seq#Empty| T@@99)) (SeqType T@@99)) :qid |funType:Seq#Empty| :pattern ( (|Seq#Empty| T@@99)) )))
(assert (forall ((T@@100 T@T) ) (! (= (|MultiSet#FromSeq| (|Seq#Empty| T@@100)) (|MultiSet#Empty| T@@100)) :skolemid |561| )))
(assert (forall ((arg0@@92 T@U) (arg1@@37 T@U) ) (! (let ((T@@101 (SeqTypeInv0 (type arg0@@92)))) (= (type (|Seq#Append| arg0@@92 arg1@@37)) (SeqType T@@101))) :qid |funType:Seq#Append| :pattern ( (|Seq#Append| arg0@@92 arg1@@37)) )))
(assert (forall ((a@@66 T@U) (b@@50 T@U) ) (! (let ((T@@102 (SeqTypeInv0 (type a@@66)))) (=> (and (= (type a@@66) (SeqType T@@102)) (= (type b@@50) (SeqType T@@102))) (= (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50)) (|MultiSet#Union| (|MultiSet#FromSeq| a@@66) (|MultiSet#FromSeq| b@@50))))) :qid |DafnyPreludebpl.904:18| :skolemid |562| :pattern ( (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50))) )))
(assert (forall ((arg0@@93 T@U) (arg1@@38 Int) (arg2@@1 T@U) ) (! (let ((T@@103 (type arg2@@1))) (= (type (|Seq#Update| arg0@@93 arg1@@38 arg2@@1)) (SeqType T@@103))) :qid |funType:Seq#Update| :pattern ( (|Seq#Update| arg0@@93 arg1@@38 arg2@@1)) )))
(assert (forall ((s@@13 T@U) (i@@6 Int) (v@@30 T@U) (x@@34 T@U) ) (! (let ((T@@104 (type v@@30))) (=> (and (and (= (type s@@13) (SeqType T@@104)) (= (type x@@34) T@@104)) (and (<= 0 i@@6) (< i@@6 (|Seq#Length| s@@13)))) (= (U_2_int (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@6 v@@30)) x@@34)) (U_2_int (MapType0Select (|MultiSet#Union| (|MultiSet#Difference| (|MultiSet#FromSeq| s@@13) (|MultiSet#Singleton| (|Seq#Index| s@@13 i@@6))) (|MultiSet#Singleton| v@@30)) x@@34))))) :qid |DafnyPreludebpl.909:18| :skolemid |563| :pattern ( (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@6 v@@30)) x@@34)) )))
(assert (forall ((s@@14 T@U) (x@@35 T@U) ) (! (let ((T@@105 (type x@@35))) (=> (= (type s@@14) (SeqType T@@105)) (= (exists ((i@@7 Int) ) (!  (and (and (<= 0 i@@7) (< i@@7 (|Seq#Length| s@@14))) (= x@@35 (|Seq#Index| s@@14 i@@7))) :qid |DafnyPreludebpl.916:11| :skolemid |564| :pattern ( (|Seq#Index| s@@14 i@@7)) )) (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@35)))))) :qid |DafnyPreludebpl.915:18| :skolemid |565| :pattern ( (MapType0Select (|MultiSet#FromSeq| s@@14) x@@35)) )))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@106 (SeqTypeInv0 (type s@@15)))) (=> (= (type s@@15) (SeqType T@@106)) (<= 0 (|Seq#Length| s@@15)))) :qid |DafnyPreludebpl.925:18| :skolemid |566| :pattern ( (|Seq#Length| s@@15)) )))
(assert (forall ((T@@107 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@107)) 0) :skolemid |567| :pattern ( (|Seq#Empty| T@@107)) )))
(assert (forall ((s@@16 T@U) ) (! (let ((T@@108 (SeqTypeInv0 (type s@@16)))) (=> (and (= (type s@@16) (SeqType T@@108)) (= (|Seq#Length| s@@16) 0)) (= s@@16 (|Seq#Empty| T@@108)))) :qid |DafnyPreludebpl.929:18| :skolemid |568| :pattern ( (|Seq#Length| s@@16)) )))
(assert (forall ((arg0@@94 T@U) ) (! (let ((T@@109 (type arg0@@94))) (= (type (|Seq#Singleton| arg0@@94)) (SeqType T@@109))) :qid |funType:Seq#Singleton| :pattern ( (|Seq#Singleton| arg0@@94)) )))
(assert (forall ((t@@23 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@23)) 1) :qid |DafnyPreludebpl.942:18| :skolemid |569| :pattern ( (|Seq#Length| (|Seq#Singleton| t@@23))) )))
(assert  (and (forall ((arg0@@95 T@U) ) (! (let ((T@@110 (SeqTypeInv0 (type arg0@@95)))) (= (type (|Seq#Build_inv0| arg0@@95)) (SeqType T@@110))) :qid |funType:Seq#Build_inv0| :pattern ( (|Seq#Build_inv0| arg0@@95)) )) (forall ((arg0@@96 T@U) ) (! (let ((T@@111 (SeqTypeInv0 (type arg0@@96)))) (= (type (|Seq#Build_inv1| arg0@@96)) T@@111)) :qid |funType:Seq#Build_inv1| :pattern ( (|Seq#Build_inv1| arg0@@96)) ))))
(assert (forall ((s@@17 T@U) (val@@5 T@U) ) (! (let ((T@@112 (type val@@5))) (=> (= (type s@@17) (SeqType T@@112)) (and (= (|Seq#Build_inv0| (|Seq#Build| s@@17 val@@5)) s@@17) (= (|Seq#Build_inv1| (|Seq#Build| s@@17 val@@5)) val@@5)))) :qid |DafnyPreludebpl.947:18| :skolemid |570| :pattern ( (|Seq#Build| s@@17 val@@5)) )))
(assert (forall ((s@@18 T@U) (v@@31 T@U) ) (! (let ((T@@113 (type v@@31))) (=> (= (type s@@18) (SeqType T@@113)) (= (|Seq#Length| (|Seq#Build| s@@18 v@@31)) (+ 1 (|Seq#Length| s@@18))))) :qid |DafnyPreludebpl.952:18| :skolemid |571| :pattern ( (|Seq#Build| s@@18 v@@31)) )))
(assert (forall ((s@@19 T@U) (i@@8 Int) (v@@32 T@U) ) (! (let ((T@@114 (type v@@32))) (=> (= (type s@@19) (SeqType T@@114)) (and (=> (= i@@8 (|Seq#Length| s@@19)) (= (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8) v@@32)) (=> (not (= i@@8 (|Seq#Length| s@@19))) (= (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8) (|Seq#Index| s@@19 i@@8)))))) :qid |DafnyPreludebpl.955:18| :skolemid |572| :pattern ( (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8)) )))
(assert (forall ((s@@20 T@U) (bx@@23 T@U) (t@@24 T@U) ) (!  (=> (and (and (and (= (type s@@20) (SeqType BoxType)) (= (type bx@@23) BoxType)) (= (type t@@24) TyType)) (and ($Is s@@20 (TSeq t@@24)) ($IsBox bx@@23 t@@24))) ($Is (|Seq#Build| s@@20 bx@@23) (TSeq t@@24))) :qid |DafnyPreludebpl.960:15| :skolemid |573| :pattern ( ($Is (|Seq#Build| s@@20 bx@@23) (TSeq t@@24))) )))
(assert  (and (= (Ctor HandleTypeType) 23) (forall ((arg0@@97 T@U) (arg1@@39 T@U) (arg2@@2 Int) (arg3 T@U) ) (! (= (type (|Seq#Create| arg0@@97 arg1@@39 arg2@@2 arg3)) (SeqType BoxType)) :qid |funType:Seq#Create| :pattern ( (|Seq#Create| arg0@@97 arg1@@39 arg2@@2 arg3)) ))))
(assert (forall ((ty T@U) (heap T@U) (len Int) (init T@U) ) (!  (=> (and (and (and (= (type ty) TyType) (= (type heap) (MapType0Type refType MapType1Type))) (= (type init) HandleTypeType)) (and ($IsGoodHeap heap) (<= 0 len))) (= (|Seq#Length| (|Seq#Create| ty heap len init)) len)) :qid |DafnyPreludebpl.964:15| :skolemid |574| :pattern ( (|Seq#Length| (|Seq#Create| ty heap len init))) )))
(assert (forall ((arg0@@98 T@U) (arg1@@40 T@U) (arg2@@3 T@U) (arg3@@0 T@U) (arg4 T@U) ) (! (= (type (Apply1 arg0@@98 arg1@@40 arg2@@3 arg3@@0 arg4)) BoxType) :qid |funType:Apply1| :pattern ( (Apply1 arg0@@98 arg1@@40 arg2@@3 arg3@@0 arg4)) )))
(assert (forall ((ty@@0 T@U) (heap@@0 T@U) (len@@0 Int) (init@@0 T@U) (i@@9 Int) ) (!  (=> (and (and (and (= (type ty@@0) TyType) (= (type heap@@0) (MapType0Type refType MapType1Type))) (= (type init@@0) HandleTypeType)) (and (and ($IsGoodHeap heap@@0) (<= 0 i@@9)) (< i@@9 len@@0))) (= (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@9) (Apply1 TInt (TSeq ty@@0) heap@@0 init@@0 ($Box (int_2_U i@@9))))) :qid |DafnyPreludebpl.968:15| :skolemid |575| :pattern ( (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@9)) )))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (let ((T@@115 (SeqTypeInv0 (type s0)))) (=> (and (= (type s0) (SeqType T@@115)) (= (type s1) (SeqType T@@115))) (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1))))) :qid |DafnyPreludebpl.974:18| :skolemid |576| :pattern ( (|Seq#Length| (|Seq#Append| s0 s1))) )))
(assert (forall ((t@@25 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@25) 0) t@@25) :qid |DafnyPreludebpl.978:18| :skolemid |577| :pattern ( (|Seq#Index| (|Seq#Singleton| t@@25) 0)) )))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (n@@6 Int) ) (! (let ((T@@116 (SeqTypeInv0 (type s0@@0)))) (=> (and (= (type s0@@0) (SeqType T@@116)) (= (type s1@@0) (SeqType T@@116))) (and (=> (< n@@6 (|Seq#Length| s0@@0)) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6) (|Seq#Index| s0@@0 n@@6))) (=> (<= (|Seq#Length| s0@@0) n@@6) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6) (|Seq#Index| s1@@0 (- n@@6 (|Seq#Length| s0@@0)))))))) :qid |DafnyPreludebpl.979:18| :skolemid |578| :pattern ( (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6)) )))
(assert (forall ((s@@21 T@U) (i@@10 Int) (v@@33 T@U) ) (! (let ((T@@117 (type v@@33))) (=> (= (type s@@21) (SeqType T@@117)) (=> (and (<= 0 i@@10) (< i@@10 (|Seq#Length| s@@21))) (= (|Seq#Length| (|Seq#Update| s@@21 i@@10 v@@33)) (|Seq#Length| s@@21))))) :qid |DafnyPreludebpl.984:18| :skolemid |579| :pattern ( (|Seq#Length| (|Seq#Update| s@@21 i@@10 v@@33))) )))
(assert (forall ((s@@22 T@U) (i@@11 Int) (v@@34 T@U) (n@@7 Int) ) (! (let ((T@@118 (type v@@34))) (=> (= (type s@@22) (SeqType T@@118)) (=> (and (<= 0 n@@7) (< n@@7 (|Seq#Length| s@@22))) (and (=> (= i@@11 n@@7) (= (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7) v@@34)) (=> (not (= i@@11 n@@7)) (= (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7) (|Seq#Index| s@@22 n@@7))))))) :qid |DafnyPreludebpl.986:18| :skolemid |580| :pattern ( (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7)) )))
(assert (forall ((s@@23 T@U) (x@@36 T@U) ) (! (let ((T@@119 (type x@@36))) (=> (= (type s@@23) (SeqType T@@119)) (= (|Seq#Contains| s@@23 x@@36) (exists ((i@@12 Int) ) (!  (and (and (<= 0 i@@12) (< i@@12 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@12) x@@36)) :qid |DafnyPreludebpl.994:13| :skolemid |581| :pattern ( (|Seq#Index| s@@23 i@@12)) ))))) :qid |DafnyPreludebpl.992:18| :skolemid |582| :pattern ( (|Seq#Contains| s@@23 x@@36)) )))
(assert (forall ((x@@37 T@U) ) (! (let ((T@@120 (type x@@37))) (not (|Seq#Contains| (|Seq#Empty| T@@120) x@@37))) :qid |DafnyPreludebpl.995:18| :skolemid |583| :pattern ( (let ((T@@120 (type x@@37))) (|Seq#Contains| (|Seq#Empty| T@@120) x@@37))) )))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (x@@38 T@U) ) (! (let ((T@@121 (type x@@38))) (=> (and (= (type s0@@1) (SeqType T@@121)) (= (type s1@@1) (SeqType T@@121))) (= (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@38)  (or (|Seq#Contains| s0@@1 x@@38) (|Seq#Contains| s1@@1 x@@38))))) :qid |DafnyPreludebpl.999:18| :skolemid |584| :pattern ( (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@38)) )))
(assert (forall ((s@@24 T@U) (v@@35 T@U) (x@@39 T@U) ) (! (let ((T@@122 (type v@@35))) (=> (and (= (type s@@24) (SeqType T@@122)) (= (type x@@39) T@@122)) (= (|Seq#Contains| (|Seq#Build| s@@24 v@@35) x@@39)  (or (= v@@35 x@@39) (|Seq#Contains| s@@24 x@@39))))) :qid |DafnyPreludebpl.1004:18| :skolemid |585| :pattern ( (|Seq#Contains| (|Seq#Build| s@@24 v@@35) x@@39)) )))
(assert (forall ((arg0@@99 T@U) (arg1@@41 Int) ) (! (let ((T@@123 (SeqTypeInv0 (type arg0@@99)))) (= (type (|Seq#Take| arg0@@99 arg1@@41)) (SeqType T@@123))) :qid |funType:Seq#Take| :pattern ( (|Seq#Take| arg0@@99 arg1@@41)) )))
(assert (forall ((s@@25 T@U) (n@@8 Int) (x@@40 T@U) ) (! (let ((T@@124 (type x@@40))) (=> (= (type s@@25) (SeqType T@@124)) (= (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@40) (exists ((i@@13 Int) ) (!  (and (and (and (<= 0 i@@13) (< i@@13 n@@8)) (< i@@13 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@13) x@@40)) :qid |DafnyPreludebpl.1011:13| :skolemid |586| :pattern ( (|Seq#Index| s@@25 i@@13)) ))))) :qid |DafnyPreludebpl.1008:18| :skolemid |587| :pattern ( (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@40)) )))
(assert (forall ((arg0@@100 T@U) (arg1@@42 Int) ) (! (let ((T@@125 (SeqTypeInv0 (type arg0@@100)))) (= (type (|Seq#Drop| arg0@@100 arg1@@42)) (SeqType T@@125))) :qid |funType:Seq#Drop| :pattern ( (|Seq#Drop| arg0@@100 arg1@@42)) )))
(assert (forall ((s@@26 T@U) (n@@9 Int) (x@@41 T@U) ) (! (let ((T@@126 (type x@@41))) (=> (= (type s@@26) (SeqType T@@126)) (= (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@41) (exists ((i@@14 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@14)) (< i@@14 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@14) x@@41)) :qid |DafnyPreludebpl.1016:13| :skolemid |588| :pattern ( (|Seq#Index| s@@26 i@@14)) ))))) :qid |DafnyPreludebpl.1013:18| :skolemid |589| :pattern ( (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@41)) )))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) ) (! (let ((T@@127 (SeqTypeInv0 (type s0@@2)))) (=> (and (= (type s0@@2) (SeqType T@@127)) (= (type s1@@2) (SeqType T@@127))) (= (|Seq#Equal| s0@@2 s1@@2)  (and (= (|Seq#Length| s0@@2) (|Seq#Length| s1@@2)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0@@2))) (= (|Seq#Index| s0@@2 j) (|Seq#Index| s1@@2 j))) :qid |DafnyPreludebpl.1023:13| :skolemid |590| :pattern ( (|Seq#Index| s0@@2 j)) :pattern ( (|Seq#Index| s1@@2 j)) )))))) :qid |DafnyPreludebpl.1020:18| :skolemid |591| :pattern ( (|Seq#Equal| s0@@2 s1@@2)) )))
(assert (forall ((a@@67 T@U) (b@@51 T@U) ) (! (let ((T@@128 (SeqTypeInv0 (type a@@67)))) (=> (and (and (= (type a@@67) (SeqType T@@128)) (= (type b@@51) (SeqType T@@128))) (|Seq#Equal| a@@67 b@@51)) (= a@@67 b@@51))) :qid |DafnyPreludebpl.1025:18| :skolemid |592| :pattern ( (|Seq#Equal| a@@67 b@@51)) )))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) (n@@10 Int) ) (! (let ((T@@129 (SeqTypeInv0 (type s0@@3)))) (=> (and (= (type s0@@3) (SeqType T@@129)) (= (type s1@@3) (SeqType T@@129))) (= (|Seq#SameUntil| s0@@3 s1@@3 n@@10) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 n@@10)) (= (|Seq#Index| s0@@3 j@@0) (|Seq#Index| s1@@3 j@@0))) :qid |DafnyPreludebpl.1031:13| :skolemid |593| :pattern ( (|Seq#Index| s0@@3 j@@0)) :pattern ( (|Seq#Index| s1@@3 j@@0)) ))))) :qid |DafnyPreludebpl.1029:18| :skolemid |594| :pattern ( (|Seq#SameUntil| s0@@3 s1@@3 n@@10)) )))
(assert (forall ((s@@27 T@U) (n@@11 Int) ) (! (let ((T@@130 (SeqTypeInv0 (type s@@27)))) (=> (= (type s@@27) (SeqType T@@130)) (=> (and (<= 0 n@@11) (<= n@@11 (|Seq#Length| s@@27))) (= (|Seq#Length| (|Seq#Take| s@@27 n@@11)) n@@11)))) :qid |DafnyPreludebpl.1035:18| :skolemid |595| :pattern ( (|Seq#Length| (|Seq#Take| s@@27 n@@11))) )))
(assert (forall ((s@@28 T@U) (n@@12 Int) (j@@1 Int) ) (! (let ((T@@131 (SeqTypeInv0 (type s@@28)))) (=> (= (type s@@28) (SeqType T@@131)) (=> (and (and (<= 0 j@@1) (< j@@1 n@@12)) (< j@@1 (|Seq#Length| s@@28))) (= (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@1) (|Seq#Index| s@@28 j@@1))))) :qid |DafnyPreludebpl.1037:18| :weight 25 :skolemid |596| :pattern ( (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@1)) :pattern ( (|Seq#Index| s@@28 j@@1) (|Seq#Take| s@@28 n@@12)) )))
(assert (forall ((s@@29 T@U) (n@@13 Int) ) (! (let ((T@@132 (SeqTypeInv0 (type s@@29)))) (=> (= (type s@@29) (SeqType T@@132)) (=> (and (<= 0 n@@13) (<= n@@13 (|Seq#Length| s@@29))) (= (|Seq#Length| (|Seq#Drop| s@@29 n@@13)) (- (|Seq#Length| s@@29) n@@13))))) :qid |DafnyPreludebpl.1045:18| :skolemid |597| :pattern ( (|Seq#Length| (|Seq#Drop| s@@29 n@@13))) )))
(assert (forall ((s@@30 T@U) (n@@14 Int) (j@@2 Int) ) (! (let ((T@@133 (SeqTypeInv0 (type s@@30)))) (=> (= (type s@@30) (SeqType T@@133)) (=> (and (and (<= 0 n@@14) (<= 0 j@@2)) (< j@@2 (- (|Seq#Length| s@@30) n@@14))) (= (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@2) (|Seq#Index| s@@30 (+ j@@2 n@@14)))))) :qid |DafnyPreludebpl.1047:18| :weight 25 :skolemid |598| :pattern ( (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@2)) )))
(assert (forall ((s@@31 T@U) (n@@15 Int) (k@@3 Int) ) (! (let ((T@@134 (SeqTypeInv0 (type s@@31)))) (=> (= (type s@@31) (SeqType T@@134)) (=> (and (and (<= 0 n@@15) (<= n@@15 k@@3)) (< k@@3 (|Seq#Length| s@@31))) (= (|Seq#Index| (|Seq#Drop| s@@31 n@@15) (- k@@3 n@@15)) (|Seq#Index| s@@31 k@@3))))) :qid |DafnyPreludebpl.1052:18| :weight 25 :skolemid |599| :pattern ( (|Seq#Index| s@@31 k@@3) (|Seq#Drop| s@@31 n@@15)) )))
(assert (forall ((s@@32 T@U) (t@@26 T@U) (n@@16 Int) ) (! (let ((T@@135 (SeqTypeInv0 (type s@@32)))) (=> (and (and (= (type s@@32) (SeqType T@@135)) (= (type t@@26) (SeqType T@@135))) (= n@@16 (|Seq#Length| s@@32))) (and (= (|Seq#Take| (|Seq#Append| s@@32 t@@26) n@@16) s@@32) (= (|Seq#Drop| (|Seq#Append| s@@32 t@@26) n@@16) t@@26)))) :qid |DafnyPreludebpl.1058:18| :skolemid |600| :pattern ( (|Seq#Take| (|Seq#Append| s@@32 t@@26) n@@16)) :pattern ( (|Seq#Drop| (|Seq#Append| s@@32 t@@26) n@@16)) )))
(assert (forall ((arg0@@101 T@U) (arg1@@43 T@U) ) (! (= (type (|Seq#FromArray| arg0@@101 arg1@@43)) (SeqType BoxType)) :qid |funType:Seq#FromArray| :pattern ( (|Seq#FromArray| arg0@@101 arg1@@43)) )))
(assert (forall ((h@@17 T@U) (a@@68 T@U) ) (!  (=> (and (= (type h@@17) (MapType0Type refType MapType1Type)) (= (type a@@68) refType)) (= (|Seq#Length| (|Seq#FromArray| h@@17 a@@68)) (_System.array.Length a@@68))) :qid |DafnyPreludebpl.1067:15| :skolemid |601| :pattern ( (|Seq#Length| (|Seq#FromArray| h@@17 a@@68))) )))
(assert (forall ((h@@18 T@U) (a@@69 T@U) ) (!  (=> (and (= (type h@@18) (MapType0Type refType MapType1Type)) (= (type a@@69) refType)) (forall ((i@@15 Int) ) (!  (=> (and (<= 0 i@@15) (< i@@15 (|Seq#Length| (|Seq#FromArray| h@@18 a@@69)))) (= (|Seq#Index| (|Seq#FromArray| h@@18 a@@69) i@@15) (MapType1Select (MapType0Select h@@18 a@@69) (IndexField i@@15)))) :qid |DafnyPreludebpl.1072:11| :skolemid |602| :pattern ( (MapType1Select (MapType0Select h@@18 a@@69) (IndexField i@@15))) :pattern ( (|Seq#Index| (|Seq#FromArray| h@@18 a@@69) i@@15)) ))) :qid |DafnyPreludebpl.1070:15| :skolemid |603| :pattern ( (|Seq#FromArray| h@@18 a@@69)) )))
(assert (forall ((h0 T@U) (h1 T@U) (a@@70 T@U) ) (!  (=> (and (and (= (type h0) (MapType0Type refType MapType1Type)) (= (type h1) (MapType0Type refType MapType1Type))) (= (type a@@70) refType)) (=> (and (and (and ($IsGoodHeap h0) ($IsGoodHeap h1)) ($HeapSucc h0 h1)) (= (MapType0Select h0 a@@70) (MapType0Select h1 a@@70))) (= (|Seq#FromArray| h0 a@@70) (|Seq#FromArray| h1 a@@70)))) :qid |DafnyPreludebpl.1082:15| :skolemid |604| :pattern ( (|Seq#FromArray| h1 a@@70) ($HeapSucc h0 h1)) )))
(assert (forall ((h@@19 T@U) (i@@16 Int) (v@@36 T@U) (a@@71 T@U) ) (!  (=> (and (and (and (= (type h@@19) (MapType0Type refType MapType1Type)) (= (type v@@36) BoxType)) (= (type a@@71) refType)) (and (<= 0 i@@16) (< i@@16 (_System.array.Length a@@71)))) (= (|Seq#FromArray| (MapType0Store h@@19 a@@71 (MapType1Store (MapType0Select h@@19 a@@71) (IndexField i@@16) v@@36)) a@@71) (|Seq#Update| (|Seq#FromArray| h@@19 a@@71) i@@16 v@@36))) :qid |DafnyPreludebpl.1087:15| :skolemid |605| :pattern ( (|Seq#FromArray| (MapType0Store h@@19 a@@71 (MapType1Store (MapType0Select h@@19 a@@71) (IndexField i@@16) v@@36)) a@@71)) )))
(assert (forall ((s@@33 T@U) (i@@17 Int) (v@@37 T@U) (n@@17 Int) ) (! (let ((T@@136 (type v@@37))) (=> (= (type s@@33) (SeqType T@@136)) (=> (and (and (<= 0 i@@17) (< i@@17 n@@17)) (<= n@@17 (|Seq#Length| s@@33))) (= (|Seq#Take| (|Seq#Update| s@@33 i@@17 v@@37) n@@17) (|Seq#Update| (|Seq#Take| s@@33 n@@17) i@@17 v@@37))))) :qid |DafnyPreludebpl.1092:18| :skolemid |606| :pattern ( (|Seq#Take| (|Seq#Update| s@@33 i@@17 v@@37) n@@17)) )))
(assert (forall ((s@@34 T@U) (i@@18 Int) (v@@38 T@U) (n@@18 Int) ) (! (let ((T@@137 (type v@@38))) (=> (= (type s@@34) (SeqType T@@137)) (=> (and (<= n@@18 i@@18) (< i@@18 (|Seq#Length| s@@34))) (= (|Seq#Take| (|Seq#Update| s@@34 i@@18 v@@38) n@@18) (|Seq#Take| s@@34 n@@18))))) :qid |DafnyPreludebpl.1095:18| :skolemid |607| :pattern ( (|Seq#Take| (|Seq#Update| s@@34 i@@18 v@@38) n@@18)) )))
(assert (forall ((s@@35 T@U) (i@@19 Int) (v@@39 T@U) (n@@19 Int) ) (! (let ((T@@138 (type v@@39))) (=> (= (type s@@35) (SeqType T@@138)) (=> (and (and (<= 0 n@@19) (<= n@@19 i@@19)) (< i@@19 (|Seq#Length| s@@35))) (= (|Seq#Drop| (|Seq#Update| s@@35 i@@19 v@@39) n@@19) (|Seq#Update| (|Seq#Drop| s@@35 n@@19) (- i@@19 n@@19) v@@39))))) :qid |DafnyPreludebpl.1098:18| :skolemid |608| :pattern ( (|Seq#Drop| (|Seq#Update| s@@35 i@@19 v@@39) n@@19)) )))
(assert (forall ((s@@36 T@U) (i@@20 Int) (v@@40 T@U) (n@@20 Int) ) (! (let ((T@@139 (type v@@40))) (=> (= (type s@@36) (SeqType T@@139)) (=> (and (and (<= 0 i@@20) (< i@@20 n@@20)) (< n@@20 (|Seq#Length| s@@36))) (= (|Seq#Drop| (|Seq#Update| s@@36 i@@20 v@@40) n@@20) (|Seq#Drop| s@@36 n@@20))))) :qid |DafnyPreludebpl.1101:18| :skolemid |609| :pattern ( (|Seq#Drop| (|Seq#Update| s@@36 i@@20 v@@40) n@@20)) )))
(assert (forall ((h@@20 T@U) (a@@72 T@U) (n0 Int) (n1 Int) ) (!  (=> (and (= (type h@@20) (MapType0Type refType MapType1Type)) (= (type a@@72) refType)) (=> (and (and (= (+ n0 1) n1) (<= 0 n0)) (<= n1 (_System.array.Length a@@72))) (= (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n0) (MapType1Select (MapType0Select h@@20 a@@72) (IndexField n0)))))) :qid |DafnyPreludebpl.1105:15| :skolemid |610| :pattern ( (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n0) (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n1)) )))
(assert (forall ((s@@37 T@U) (v@@41 T@U) (n@@21 Int) ) (! (let ((T@@140 (type v@@41))) (=> (= (type s@@37) (SeqType T@@140)) (=> (and (<= 0 n@@21) (<= n@@21 (|Seq#Length| s@@37))) (= (|Seq#Drop| (|Seq#Build| s@@37 v@@41) n@@21) (|Seq#Build| (|Seq#Drop| s@@37 n@@21) v@@41))))) :qid |DafnyPreludebpl.1109:18| :skolemid |611| :pattern ( (|Seq#Drop| (|Seq#Build| s@@37 v@@41) n@@21)) )))
(assert (forall ((s@@38 T@U) (i@@21 Int) ) (!  (=> (= (type s@@38) (SeqType BoxType)) (=> (and (<= 0 i@@21) (< i@@21 (|Seq#Length| s@@38))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@21))) (|Seq#Rank| s@@38)))) :qid |DafnyPreludebpl.1114:15| :skolemid |612| :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@21)))) )))
(assert (forall ((s@@39 T@U) (i@@22 Int) ) (! (let ((T@@141 (SeqTypeInv0 (type s@@39)))) (=> (= (type s@@39) (SeqType T@@141)) (=> (and (< 0 i@@22) (<= i@@22 (|Seq#Length| s@@39))) (< (|Seq#Rank| (|Seq#Drop| s@@39 i@@22)) (|Seq#Rank| s@@39))))) :qid |DafnyPreludebpl.1117:18| :skolemid |613| :pattern ( (|Seq#Rank| (|Seq#Drop| s@@39 i@@22))) )))
(assert (forall ((s@@40 T@U) (i@@23 Int) ) (! (let ((T@@142 (SeqTypeInv0 (type s@@40)))) (=> (= (type s@@40) (SeqType T@@142)) (=> (and (<= 0 i@@23) (< i@@23 (|Seq#Length| s@@40))) (< (|Seq#Rank| (|Seq#Take| s@@40 i@@23)) (|Seq#Rank| s@@40))))) :qid |DafnyPreludebpl.1120:18| :skolemid |614| :pattern ( (|Seq#Rank| (|Seq#Take| s@@40 i@@23))) )))
(assert (forall ((s@@41 T@U) (i@@24 Int) (j@@3 Int) ) (! (let ((T@@143 (SeqTypeInv0 (type s@@41)))) (=> (= (type s@@41) (SeqType T@@143)) (=> (and (and (<= 0 i@@24) (< i@@24 j@@3)) (<= j@@3 (|Seq#Length| s@@41))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@24) (|Seq#Drop| s@@41 j@@3))) (|Seq#Rank| s@@41))))) :qid |DafnyPreludebpl.1123:18| :skolemid |615| :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@24) (|Seq#Drop| s@@41 j@@3)))) )))
(assert (forall ((s@@42 T@U) (n@@22 Int) ) (! (let ((T@@144 (SeqTypeInv0 (type s@@42)))) (=> (and (= (type s@@42) (SeqType T@@144)) (= n@@22 0)) (= (|Seq#Drop| s@@42 n@@22) s@@42))) :qid |DafnyPreludebpl.1128:18| :skolemid |616| :pattern ( (|Seq#Drop| s@@42 n@@22)) )))
(assert (forall ((s@@43 T@U) (n@@23 Int) ) (! (let ((T@@145 (SeqTypeInv0 (type s@@43)))) (=> (and (= (type s@@43) (SeqType T@@145)) (= n@@23 0)) (= (|Seq#Take| s@@43 n@@23) (|Seq#Empty| T@@145)))) :qid |DafnyPreludebpl.1130:18| :skolemid |617| :pattern ( (|Seq#Take| s@@43 n@@23)) )))
(assert (forall ((s@@44 T@U) (m@@9 Int) (n@@24 Int) ) (! (let ((T@@146 (SeqTypeInv0 (type s@@44)))) (=> (= (type s@@44) (SeqType T@@146)) (=> (and (and (<= 0 m@@9) (<= 0 n@@24)) (<= (+ m@@9 n@@24) (|Seq#Length| s@@44))) (= (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24) (|Seq#Drop| s@@44 (+ m@@9 n@@24)))))) :qid |DafnyPreludebpl.1132:18| :skolemid |618| :pattern ( (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24)) )))
(assert (forall ((m@@10 T@U) ) (! (let ((V@@3 (MapTypeInv1 (type m@@10)))) (let ((U@@3 (MapTypeInv0 (type m@@10)))) (=> (= (type m@@10) (MapType U@@3 V@@3)) (<= 0 (|Map#Card| m@@10))))) :qid |DafnyPreludebpl.1150:20| :skolemid |619| :pattern ( (|Map#Card| m@@10)) )))
(assert (forall ((U@@4 T@T) (V@@4 T@T) ) (! (= (type (|Map#Empty| U@@4 V@@4)) (MapType U@@4 V@@4)) :qid |funType:Map#Empty| :pattern ( (|Map#Empty| U@@4 V@@4)) )))
(assert (forall ((m@@11 T@U) ) (! (let ((V@@5 (MapTypeInv1 (type m@@11)))) (let ((U@@5 (MapTypeInv0 (type m@@11)))) (=> (= (type m@@11) (MapType U@@5 V@@5)) (= (= (|Map#Card| m@@11) 0) (= m@@11 (|Map#Empty| U@@5 V@@5)))))) :qid |DafnyPreludebpl.1152:21| :skolemid |620| :pattern ( (|Map#Card| m@@11)) )))
(assert (forall ((m@@12 T@U) ) (! (let ((V@@6 (MapTypeInv1 (type m@@12)))) (let ((U@@6 (MapTypeInv0 (type m@@12)))) (=> (= (type m@@12) (MapType U@@6 V@@6)) (or (= m@@12 (|Map#Empty| U@@6 V@@6)) (exists ((k@@4 T@U) ) (!  (and (= (type k@@4) U@@6) (U_2_bool (MapType0Select (|Map#Domain| m@@12) k@@4))) :qid |DafnyPreludebpl.1158:31| :skolemid |621| :no-pattern (type k@@4) :no-pattern (U_2_int k@@4) :no-pattern (U_2_bool k@@4) )))))) :qid |DafnyPreludebpl.1156:21| :skolemid |622| :pattern ( (|Map#Domain| m@@12)) )))
(assert (forall ((m@@13 T@U) ) (! (let ((V@@7 (MapTypeInv1 (type m@@13)))) (let ((U@@7 (MapTypeInv0 (type m@@13)))) (=> (= (type m@@13) (MapType U@@7 V@@7)) (or (= m@@13 (|Map#Empty| U@@7 V@@7)) (exists ((v@@42 T@U) ) (!  (and (= (type v@@42) V@@7) (U_2_bool (MapType0Select (|Map#Values| m@@13) v@@42))) :qid |DafnyPreludebpl.1161:31| :skolemid |623| :no-pattern (type v@@42) :no-pattern (U_2_int v@@42) :no-pattern (U_2_bool v@@42) )))))) :qid |DafnyPreludebpl.1159:21| :skolemid |624| :pattern ( (|Map#Values| m@@13)) )))
(assert (forall ((arg0@@102 T@U) (arg1@@44 T@U) ) (! (= (type (|#_System._tuple#2._#Make2| arg0@@102 arg1@@44)) DatatypeTypeType) :qid |funType:#_System._tuple#2._#Make2| :pattern ( (|#_System._tuple#2._#Make2| arg0@@102 arg1@@44)) )))
(assert (forall ((m@@14 T@U) ) (! (let ((V@@8 (MapTypeInv1 (type m@@14)))) (let ((U@@8 (MapTypeInv0 (type m@@14)))) (=> (= (type m@@14) (MapType U@@8 V@@8)) (or (= m@@14 (|Map#Empty| U@@8 V@@8)) (exists ((k@@5 T@U) (v@@43 T@U) ) (!  (and (and (= (type k@@5) BoxType) (= (type v@@43) BoxType)) (U_2_bool (MapType0Select (|Map#Items| m@@14) ($Box (|#_System._tuple#2._#Make2| k@@5 v@@43))))) :qid |DafnyPreludebpl.1164:31| :skolemid |625| :no-pattern (type k@@5) :no-pattern (type v@@43) :no-pattern (U_2_int k@@5) :no-pattern (U_2_bool k@@5) :no-pattern (U_2_int v@@43) :no-pattern (U_2_bool v@@43) )))))) :qid |DafnyPreludebpl.1162:21| :skolemid |626| :pattern ( (|Map#Items| m@@14)) )))
(assert (forall ((m@@15 T@U) ) (! (let ((V@@9 (MapTypeInv1 (type m@@15)))) (let ((U@@9 (MapTypeInv0 (type m@@15)))) (=> (= (type m@@15) (MapType U@@9 V@@9)) (= (|Set#Card| (|Map#Domain| m@@15)) (|Map#Card| m@@15))))) :qid |DafnyPreludebpl.1166:21| :skolemid |627| :pattern ( (|Set#Card| (|Map#Domain| m@@15))) )))
(assert (forall ((m@@16 T@U) ) (! (let ((V@@10 (MapTypeInv1 (type m@@16)))) (let ((U@@10 (MapTypeInv0 (type m@@16)))) (=> (= (type m@@16) (MapType U@@10 V@@10)) (<= (|Set#Card| (|Map#Values| m@@16)) (|Map#Card| m@@16))))) :qid |DafnyPreludebpl.1169:21| :skolemid |628| :pattern ( (|Set#Card| (|Map#Values| m@@16))) )))
(assert (forall ((m@@17 T@U) ) (! (let ((V@@11 (MapTypeInv1 (type m@@17)))) (let ((U@@11 (MapTypeInv0 (type m@@17)))) (=> (= (type m@@17) (MapType U@@11 V@@11)) (= (|Set#Card| (|Map#Items| m@@17)) (|Map#Card| m@@17))))) :qid |DafnyPreludebpl.1172:21| :skolemid |629| :pattern ( (|Set#Card| (|Map#Items| m@@17))) )))
(assert (forall ((m@@18 T@U) (v@@44 T@U) ) (! (let ((V@@12 (type v@@44))) (let ((U@@12 (MapTypeInv0 (type m@@18)))) (=> (= (type m@@18) (MapType U@@12 V@@12)) (= (U_2_bool (MapType0Select (|Map#Values| m@@18) v@@44)) (exists ((u@@5 T@U) ) (!  (and (= (type u@@5) U@@12) (and (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@5)) (= v@@44 (MapType0Select (|Map#Elements| m@@18) u@@5)))) :qid |DafnyPreludebpl.1185:10| :skolemid |630| :pattern ( (MapType0Select (|Map#Domain| m@@18) u@@5)) :pattern ( (MapType0Select (|Map#Elements| m@@18) u@@5)) )))))) :qid |DafnyPreludebpl.1183:20| :skolemid |631| :pattern ( (MapType0Select (|Map#Values| m@@18) v@@44)) )))
(assert  (and (forall ((arg0@@103 T@U) ) (! (= (type (_System.Tuple2._0 arg0@@103)) BoxType) :qid |funType:_System.Tuple2._0| :pattern ( (_System.Tuple2._0 arg0@@103)) )) (forall ((arg0@@104 T@U) ) (! (= (type (_System.Tuple2._1 arg0@@104)) BoxType) :qid |funType:_System.Tuple2._1| :pattern ( (_System.Tuple2._1 arg0@@104)) ))))
(assert (forall ((m@@19 T@U) (item T@U) ) (!  (=> (and (= (type m@@19) (MapType BoxType BoxType)) (= (type item) BoxType)) (= (U_2_bool (MapType0Select (|Map#Items| m@@19) item))  (and (U_2_bool (MapType0Select (|Map#Domain| m@@19) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@19) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))) :qid |DafnyPreludebpl.1204:15| :skolemid |632| :pattern ( (MapType0Select (|Map#Items| m@@19) item)) )))
(assert (forall ((u@@6 T@U) (V@@13 T@T) ) (! (let ((U@@13 (type u@@6))) (not (U_2_bool (MapType0Select (|Map#Domain| (|Map#Empty| U@@13 V@@13)) u@@6)))) :qid |DafnyPreludebpl.1212:21| :skolemid |633| :pattern ( (let ((U@@13 (type u@@6))) (MapType0Select (|Map#Domain| (|Map#Empty| U@@13 V@@13)) u@@6))) )))
(assert (forall ((arg0@@105 T@U) (arg1@@45 T@U) (arg2@@4 T@U) ) (! (let ((V@@14 (MapType0TypeInv1 (type arg1@@45)))) (let ((U@@14 (MapType0TypeInv0 (type arg0@@105)))) (= (type (|Map#Glue| arg0@@105 arg1@@45 arg2@@4)) (MapType U@@14 V@@14)))) :qid |funType:Map#Glue| :pattern ( (|Map#Glue| arg0@@105 arg1@@45 arg2@@4)) )))
(assert (forall ((a@@73 T@U) (b@@52 T@U) (t@@27 T@U) ) (! (let ((V@@15 (MapType0TypeInv1 (type b@@52)))) (let ((U@@15 (MapType0TypeInv0 (type a@@73)))) (=> (and (and (= (type a@@73) (MapType0Type U@@15 boolType)) (= (type b@@52) (MapType0Type U@@15 V@@15))) (= (type t@@27) TyType)) (= (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27)) a@@73)))) :qid |DafnyPreludebpl.1217:21| :skolemid |634| :pattern ( (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27))) )))
(assert (forall ((a@@74 T@U) (b@@53 T@U) (t@@28 T@U) ) (! (let ((V@@16 (MapType0TypeInv1 (type b@@53)))) (let ((U@@16 (MapType0TypeInv0 (type a@@74)))) (=> (and (and (= (type a@@74) (MapType0Type U@@16 boolType)) (= (type b@@53) (MapType0Type U@@16 V@@16))) (= (type t@@28) TyType)) (= (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@28)) b@@53)))) :qid |DafnyPreludebpl.1220:21| :skolemid |635| :pattern ( (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@28))) )))
(assert (forall ((a@@75 T@U) (b@@54 T@U) (t0@@14 T@U) (t1@@5 T@U) ) (!  (=> (and (and (and (and (= (type a@@75) (MapType0Type BoxType boolType)) (= (type b@@54) (MapType0Type BoxType BoxType))) (= (type t0@@14) TyType)) (= (type t1@@5) TyType)) (forall ((bx@@24 T@U) ) (!  (=> (and (= (type bx@@24) BoxType) (U_2_bool (MapType0Select a@@75 bx@@24))) (and ($IsBox bx@@24 t0@@14) ($IsBox (MapType0Select b@@54 bx@@24) t1@@5))) :qid |DafnyPreludebpl.1226:11| :skolemid |636| :no-pattern (type bx@@24) :no-pattern (U_2_int bx@@24) :no-pattern (U_2_bool bx@@24) ))) ($Is (|Map#Glue| a@@75 b@@54 (TMap t0@@14 t1@@5)) (TMap t0@@14 t1@@5))) :qid |DafnyPreludebpl.1223:15| :skolemid |637| :pattern ( (|Map#Glue| a@@75 b@@54 (TMap t0@@14 t1@@5))) )))
(assert (forall ((arg0@@106 T@U) (arg1@@46 T@U) (arg2@@5 T@U) ) (! (let ((V@@17 (type arg2@@5))) (let ((U@@17 (type arg1@@46))) (= (type (|Map#Build| arg0@@106 arg1@@46 arg2@@5)) (MapType U@@17 V@@17)))) :qid |funType:Map#Build| :pattern ( (|Map#Build| arg0@@106 arg1@@46 arg2@@5)) )))
(assert (forall ((m@@20 T@U) (u@@7 T@U) (|u'| T@U) (v@@45 T@U) ) (! (let ((V@@18 (type v@@45))) (let ((U@@18 (type u@@7))) (=> (and (= (type m@@20) (MapType U@@18 V@@18)) (= (type |u'|) U@@18)) (and (=> (= |u'| u@@7) (and (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|) v@@45))) (=> (not (= |u'| u@@7)) (and (= (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| m@@20) |u'|))) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|) (MapType0Select (|Map#Elements| m@@20) |u'|)))))))) :qid |DafnyPreludebpl.1237:21| :skolemid |638| :pattern ( (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) :pattern ( (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) )))
(assert (forall ((m@@21 T@U) (u@@8 T@U) (v@@46 T@U) ) (! (let ((V@@19 (type v@@46))) (let ((U@@19 (type u@@8))) (=> (and (= (type m@@21) (MapType U@@19 V@@19)) (U_2_bool (MapType0Select (|Map#Domain| m@@21) u@@8))) (= (|Map#Card| (|Map#Build| m@@21 u@@8 v@@46)) (|Map#Card| m@@21))))) :qid |DafnyPreludebpl.1243:21| :skolemid |639| :pattern ( (|Map#Card| (|Map#Build| m@@21 u@@8 v@@46))) )))
(assert (forall ((m@@22 T@U) (u@@9 T@U) (v@@47 T@U) ) (! (let ((V@@20 (type v@@47))) (let ((U@@20 (type u@@9))) (=> (and (= (type m@@22) (MapType U@@20 V@@20)) (not (U_2_bool (MapType0Select (|Map#Domain| m@@22) u@@9)))) (= (|Map#Card| (|Map#Build| m@@22 u@@9 v@@47)) (+ (|Map#Card| m@@22) 1))))) :qid |DafnyPreludebpl.1245:21| :skolemid |640| :pattern ( (|Map#Card| (|Map#Build| m@@22 u@@9 v@@47))) )))
(assert (forall ((arg0@@107 T@U) (arg1@@47 T@U) ) (! (let ((V@@21 (MapTypeInv1 (type arg0@@107)))) (let ((U@@21 (MapTypeInv0 (type arg0@@107)))) (= (type (|Map#Merge| arg0@@107 arg1@@47)) (MapType U@@21 V@@21)))) :qid |funType:Map#Merge| :pattern ( (|Map#Merge| arg0@@107 arg1@@47)) )))
(assert (forall ((m@@23 T@U) (n@@25 T@U) ) (! (let ((V@@22 (MapTypeInv1 (type m@@23)))) (let ((U@@22 (MapTypeInv0 (type m@@23)))) (=> (and (= (type m@@23) (MapType U@@22 V@@22)) (= (type n@@25) (MapType U@@22 V@@22))) (= (|Map#Domain| (|Map#Merge| m@@23 n@@25)) (|Set#Union| (|Map#Domain| m@@23) (|Map#Domain| n@@25)))))) :qid |DafnyPreludebpl.1250:21| :skolemid |641| :pattern ( (|Map#Domain| (|Map#Merge| m@@23 n@@25))) )))
(assert (forall ((m@@24 T@U) (n@@26 T@U) (u@@10 T@U) ) (! (let ((V@@23 (MapTypeInv1 (type m@@24)))) (let ((U@@23 (type u@@10))) (=> (and (and (= (type m@@24) (MapType U@@23 V@@23)) (= (type n@@26) (MapType U@@23 V@@23))) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Merge| m@@24 n@@26)) u@@10))) (and (=> (not (U_2_bool (MapType0Select (|Map#Domain| n@@26) u@@10))) (= (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10) (MapType0Select (|Map#Elements| m@@24) u@@10))) (=> (U_2_bool (MapType0Select (|Map#Domain| n@@26) u@@10)) (= (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10) (MapType0Select (|Map#Elements| n@@26) u@@10))))))) :qid |DafnyPreludebpl.1253:21| :skolemid |642| :pattern ( (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10)) )))
(assert (forall ((arg0@@108 T@U) (arg1@@48 T@U) ) (! (let ((V@@24 (MapTypeInv1 (type arg0@@108)))) (let ((U@@24 (MapTypeInv0 (type arg0@@108)))) (= (type (|Map#Subtract| arg0@@108 arg1@@48)) (MapType U@@24 V@@24)))) :qid |funType:Map#Subtract| :pattern ( (|Map#Subtract| arg0@@108 arg1@@48)) )))
(assert (forall ((m@@25 T@U) (s@@45 T@U) ) (! (let ((V@@25 (MapTypeInv1 (type m@@25)))) (let ((U@@25 (MapTypeInv0 (type m@@25)))) (=> (and (= (type m@@25) (MapType U@@25 V@@25)) (= (type s@@45) (MapType0Type U@@25 boolType))) (= (|Map#Domain| (|Map#Subtract| m@@25 s@@45)) (|Set#Difference| (|Map#Domain| m@@25) s@@45))))) :qid |DafnyPreludebpl.1260:21| :skolemid |643| :pattern ( (|Map#Domain| (|Map#Subtract| m@@25 s@@45))) )))
(assert (forall ((m@@26 T@U) (s@@46 T@U) (u@@11 T@U) ) (! (let ((V@@26 (MapTypeInv1 (type m@@26)))) (let ((U@@26 (type u@@11))) (=> (and (and (= (type m@@26) (MapType U@@26 V@@26)) (= (type s@@46) (MapType0Type U@@26 boolType))) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Subtract| m@@26 s@@46)) u@@11))) (= (MapType0Select (|Map#Elements| (|Map#Subtract| m@@26 s@@46)) u@@11) (MapType0Select (|Map#Elements| m@@26) u@@11))))) :qid |DafnyPreludebpl.1263:21| :skolemid |644| :pattern ( (MapType0Select (|Map#Elements| (|Map#Subtract| m@@26 s@@46)) u@@11)) )))
(assert (forall ((m@@27 T@U) (|m'| T@U) ) (! (let ((V@@27 (MapTypeInv1 (type m@@27)))) (let ((U@@27 (MapTypeInv0 (type m@@27)))) (=> (and (= (type m@@27) (MapType U@@27 V@@27)) (= (type |m'|) (MapType U@@27 V@@27))) (= (|Map#Equal| m@@27 |m'|)  (and (forall ((u@@12 T@U) ) (!  (=> (= (type u@@12) U@@27) (= (U_2_bool (MapType0Select (|Map#Domain| m@@27) u@@12)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@12)))) :qid |DafnyPreludebpl.1272:35| :skolemid |645| :no-pattern (type u@@12) :no-pattern (U_2_int u@@12) :no-pattern (U_2_bool u@@12) )) (forall ((u@@13 T@U) ) (!  (=> (and (= (type u@@13) U@@27) (U_2_bool (MapType0Select (|Map#Domain| m@@27) u@@13))) (= (MapType0Select (|Map#Elements| m@@27) u@@13) (MapType0Select (|Map#Elements| |m'|) u@@13))) :qid |DafnyPreludebpl.1273:35| :skolemid |646| :no-pattern (type u@@13) :no-pattern (U_2_int u@@13) :no-pattern (U_2_bool u@@13) ))))))) :qid |DafnyPreludebpl.1270:21| :skolemid |647| :pattern ( (|Map#Equal| m@@27 |m'|)) )))
(assert (forall ((m@@28 T@U) (|m'@@0| T@U) ) (! (let ((V@@28 (MapTypeInv1 (type m@@28)))) (let ((U@@28 (MapTypeInv0 (type m@@28)))) (=> (and (and (= (type m@@28) (MapType U@@28 V@@28)) (= (type |m'@@0|) (MapType U@@28 V@@28))) (|Map#Equal| m@@28 |m'@@0|)) (= m@@28 |m'@@0|)))) :qid |DafnyPreludebpl.1275:21| :skolemid |648| :pattern ( (|Map#Equal| m@@28 |m'@@0|)) )))
(assert (forall ((m@@29 T@U) (|m'@@1| T@U) ) (! (let ((V@@29 (MapTypeInv1 (type m@@29)))) (let ((U@@29 (MapTypeInv0 (type m@@29)))) (=> (and (= (type m@@29) (MapType U@@29 V@@29)) (= (type |m'@@1|) (MapType U@@29 V@@29))) (= (|Map#Disjoint| m@@29 |m'@@1|) (forall ((o@@43 T@U) ) (!  (=> (= (type o@@43) U@@29) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@29) o@@43))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@43))))) :qid |DafnyPreludebpl.1282:38| :skolemid |649| :pattern ( (MapType0Select (|Map#Domain| m@@29) o@@43)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@43)) )))))) :qid |DafnyPreludebpl.1280:21| :skolemid |650| :pattern ( (|Map#Disjoint| m@@29 |m'@@1|)) )))
(assert (forall ((U@@30 T@T) (V@@30 T@T) ) (! (= (type (|IMap#Empty| U@@30 V@@30)) (IMapType U@@30 V@@30)) :qid |funType:IMap#Empty| :pattern ( (|IMap#Empty| U@@30 V@@30)) )))
(assert (forall ((m@@30 T@U) ) (! (let ((V@@31 (IMapTypeInv1 (type m@@30)))) (let ((U@@31 (IMapTypeInv0 (type m@@30)))) (=> (= (type m@@30) (IMapType U@@31 V@@31)) (or (= m@@30 (|IMap#Empty| U@@31 V@@31)) (exists ((k@@6 T@U) ) (!  (and (= (type k@@6) U@@31) (U_2_bool (MapType0Select (|IMap#Domain| m@@30) k@@6))) :qid |DafnyPreludebpl.1298:32| :skolemid |651| :no-pattern (type k@@6) :no-pattern (U_2_int k@@6) :no-pattern (U_2_bool k@@6) )))))) :qid |DafnyPreludebpl.1296:21| :skolemid |652| :pattern ( (|IMap#Domain| m@@30)) )))
(assert (forall ((m@@31 T@U) ) (! (let ((V@@32 (IMapTypeInv1 (type m@@31)))) (let ((U@@32 (IMapTypeInv0 (type m@@31)))) (=> (= (type m@@31) (IMapType U@@32 V@@32)) (or (= m@@31 (|IMap#Empty| U@@32 V@@32)) (exists ((v@@48 T@U) ) (!  (and (= (type v@@48) V@@32) (U_2_bool (MapType0Select (|IMap#Values| m@@31) v@@48))) :qid |DafnyPreludebpl.1301:32| :skolemid |653| :no-pattern (type v@@48) :no-pattern (U_2_int v@@48) :no-pattern (U_2_bool v@@48) )))))) :qid |DafnyPreludebpl.1299:21| :skolemid |654| :pattern ( (|IMap#Values| m@@31)) )))
(assert (forall ((m@@32 T@U) ) (! (let ((V@@33 (IMapTypeInv1 (type m@@32)))) (let ((U@@33 (IMapTypeInv0 (type m@@32)))) (=> (= (type m@@32) (IMapType U@@33 V@@33)) (or (= m@@32 (|IMap#Empty| U@@33 V@@33)) (exists ((k@@7 T@U) (v@@49 T@U) ) (!  (and (and (= (type k@@7) BoxType) (= (type v@@49) BoxType)) (U_2_bool (MapType0Select (|IMap#Items| m@@32) ($Box (|#_System._tuple#2._#Make2| k@@7 v@@49))))) :qid |DafnyPreludebpl.1304:32| :skolemid |655| :no-pattern (type k@@7) :no-pattern (type v@@49) :no-pattern (U_2_int k@@7) :no-pattern (U_2_bool k@@7) :no-pattern (U_2_int v@@49) :no-pattern (U_2_bool v@@49) )))))) :qid |DafnyPreludebpl.1302:21| :skolemid |656| :pattern ( (|IMap#Items| m@@32)) )))
(assert (forall ((m@@33 T@U) ) (! (let ((V@@34 (IMapTypeInv1 (type m@@33)))) (let ((U@@34 (IMapTypeInv0 (type m@@33)))) (=> (= (type m@@33) (IMapType U@@34 V@@34)) (= (= m@@33 (|IMap#Empty| U@@34 V@@34)) (= (|IMap#Domain| m@@33) (|ISet#Empty| U@@34)))))) :qid |DafnyPreludebpl.1306:21| :skolemid |657| :pattern ( (|IMap#Domain| m@@33)) )))
(assert (forall ((m@@34 T@U) ) (! (let ((V@@35 (IMapTypeInv1 (type m@@34)))) (let ((U@@35 (IMapTypeInv0 (type m@@34)))) (=> (= (type m@@34) (IMapType U@@35 V@@35)) (= (= m@@34 (|IMap#Empty| U@@35 V@@35)) (= (|IMap#Values| m@@34) (|ISet#Empty| V@@35)))))) :qid |DafnyPreludebpl.1309:21| :skolemid |658| :pattern ( (|IMap#Values| m@@34)) )))
(assert (forall ((m@@35 T@U) ) (! (let ((V@@36 (IMapTypeInv1 (type m@@35)))) (let ((U@@36 (IMapTypeInv0 (type m@@35)))) (=> (= (type m@@35) (IMapType U@@36 V@@36)) (= (= m@@35 (|IMap#Empty| U@@36 V@@36)) (= (|IMap#Items| m@@35) (|ISet#Empty| BoxType)))))) :qid |DafnyPreludebpl.1312:21| :skolemid |659| :pattern ( (|IMap#Items| m@@35)) )))
(assert (forall ((m@@36 T@U) (v@@50 T@U) ) (! (let ((V@@37 (type v@@50))) (let ((U@@37 (IMapTypeInv0 (type m@@36)))) (=> (= (type m@@36) (IMapType U@@37 V@@37)) (= (U_2_bool (MapType0Select (|IMap#Values| m@@36) v@@50)) (exists ((u@@14 T@U) ) (!  (and (= (type u@@14) U@@37) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@36) u@@14)) (= v@@50 (MapType0Select (|IMap#Elements| m@@36) u@@14)))) :qid |DafnyPreludebpl.1325:10| :skolemid |660| :pattern ( (MapType0Select (|IMap#Domain| m@@36) u@@14)) :pattern ( (MapType0Select (|IMap#Elements| m@@36) u@@14)) )))))) :qid |DafnyPreludebpl.1323:20| :skolemid |661| :pattern ( (MapType0Select (|IMap#Values| m@@36) v@@50)) )))
(assert (forall ((m@@37 T@U) (item@@0 T@U) ) (!  (=> (and (= (type m@@37) (IMapType BoxType BoxType)) (= (type item@@0) BoxType)) (= (U_2_bool (MapType0Select (|IMap#Items| m@@37) item@@0))  (and (U_2_bool (MapType0Select (|IMap#Domain| m@@37) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@37) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0)))))) :qid |DafnyPreludebpl.1340:15| :skolemid |662| :pattern ( (MapType0Select (|IMap#Items| m@@37) item@@0)) )))
(assert (forall ((u@@15 T@U) (V@@38 T@T) ) (! (let ((U@@38 (type u@@15))) (not (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@38 V@@38)) u@@15)))) :qid |DafnyPreludebpl.1347:21| :skolemid |663| :pattern ( (let ((U@@38 (type u@@15))) (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@38 V@@38)) u@@15))) )))
(assert (forall ((arg0@@109 T@U) (arg1@@49 T@U) (arg2@@6 T@U) ) (! (let ((V@@39 (MapType0TypeInv1 (type arg1@@49)))) (let ((U@@39 (MapType0TypeInv0 (type arg0@@109)))) (= (type (|IMap#Glue| arg0@@109 arg1@@49 arg2@@6)) (IMapType U@@39 V@@39)))) :qid |funType:IMap#Glue| :pattern ( (|IMap#Glue| arg0@@109 arg1@@49 arg2@@6)) )))
(assert (forall ((a@@76 T@U) (b@@55 T@U) (t@@29 T@U) ) (! (let ((V@@40 (MapType0TypeInv1 (type b@@55)))) (let ((U@@40 (MapType0TypeInv0 (type a@@76)))) (=> (and (and (= (type a@@76) (MapType0Type U@@40 boolType)) (= (type b@@55) (MapType0Type U@@40 V@@40))) (= (type t@@29) TyType)) (= (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@29)) a@@76)))) :qid |DafnyPreludebpl.1352:21| :skolemid |664| :pattern ( (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@29))) )))
(assert (forall ((a@@77 T@U) (b@@56 T@U) (t@@30 T@U) ) (! (let ((V@@41 (MapType0TypeInv1 (type b@@56)))) (let ((U@@41 (MapType0TypeInv0 (type a@@77)))) (=> (and (and (= (type a@@77) (MapType0Type U@@41 boolType)) (= (type b@@56) (MapType0Type U@@41 V@@41))) (= (type t@@30) TyType)) (= (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@30)) b@@56)))) :qid |DafnyPreludebpl.1355:21| :skolemid |665| :pattern ( (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@30))) )))
(assert (forall ((a@@78 T@U) (b@@57 T@U) (t0@@15 T@U) (t1@@6 T@U) ) (!  (=> (and (and (and (and (= (type a@@78) (MapType0Type BoxType boolType)) (= (type b@@57) (MapType0Type BoxType BoxType))) (= (type t0@@15) TyType)) (= (type t1@@6) TyType)) (forall ((bx@@25 T@U) ) (!  (=> (and (= (type bx@@25) BoxType) (U_2_bool (MapType0Select a@@78 bx@@25))) (and ($IsBox bx@@25 t0@@15) ($IsBox (MapType0Select b@@57 bx@@25) t1@@6))) :qid |DafnyPreludebpl.1361:11| :skolemid |666| :no-pattern (type bx@@25) :no-pattern (U_2_int bx@@25) :no-pattern (U_2_bool bx@@25) ))) ($Is (|Map#Glue| a@@78 b@@57 (TIMap t0@@15 t1@@6)) (TIMap t0@@15 t1@@6))) :qid |DafnyPreludebpl.1358:15| :skolemid |667| :pattern ( (|IMap#Glue| a@@78 b@@57 (TIMap t0@@15 t1@@6))) )))
(assert (forall ((arg0@@110 T@U) (arg1@@50 T@U) (arg2@@7 T@U) ) (! (let ((V@@42 (type arg2@@7))) (let ((U@@42 (type arg1@@50))) (= (type (|IMap#Build| arg0@@110 arg1@@50 arg2@@7)) (IMapType U@@42 V@@42)))) :qid |funType:IMap#Build| :pattern ( (|IMap#Build| arg0@@110 arg1@@50 arg2@@7)) )))
(assert (forall ((m@@38 T@U) (u@@16 T@U) (|u'@@0| T@U) (v@@51 T@U) ) (! (let ((V@@43 (type v@@51))) (let ((U@@43 (type u@@16))) (=> (and (= (type m@@38) (IMapType U@@43 V@@43)) (= (type |u'@@0|) U@@43)) (and (=> (= |u'@@0| u@@16) (and (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|) v@@51))) (=> (not (= |u'@@0| u@@16)) (and (= (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| m@@38) |u'@@0|))) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|) (MapType0Select (|IMap#Elements| m@@38) |u'@@0|)))))))) :qid |DafnyPreludebpl.1371:21| :skolemid |668| :pattern ( (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) )))
(assert (forall ((m@@39 T@U) (|m'@@2| T@U) ) (! (let ((V@@44 (IMapTypeInv1 (type m@@39)))) (let ((U@@44 (IMapTypeInv0 (type m@@39)))) (=> (and (= (type m@@39) (IMapType U@@44 V@@44)) (= (type |m'@@2|) (IMapType U@@44 V@@44))) (= (|IMap#Equal| m@@39 |m'@@2|)  (and (forall ((u@@17 T@U) ) (!  (=> (= (type u@@17) U@@44) (= (U_2_bool (MapType0Select (|IMap#Domain| m@@39) u@@17)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@17)))) :qid |DafnyPreludebpl.1382:36| :skolemid |669| :no-pattern (type u@@17) :no-pattern (U_2_int u@@17) :no-pattern (U_2_bool u@@17) )) (forall ((u@@18 T@U) ) (!  (=> (and (= (type u@@18) U@@44) (U_2_bool (MapType0Select (|IMap#Domain| m@@39) u@@18))) (= (MapType0Select (|IMap#Elements| m@@39) u@@18) (MapType0Select (|IMap#Elements| |m'@@2|) u@@18))) :qid |DafnyPreludebpl.1383:35| :skolemid |670| :no-pattern (type u@@18) :no-pattern (U_2_int u@@18) :no-pattern (U_2_bool u@@18) ))))))) :qid |DafnyPreludebpl.1380:21| :skolemid |671| :pattern ( (|IMap#Equal| m@@39 |m'@@2|)) )))
(assert (forall ((m@@40 T@U) (|m'@@3| T@U) ) (! (let ((V@@45 (IMapTypeInv1 (type m@@40)))) (let ((U@@45 (IMapTypeInv0 (type m@@40)))) (=> (and (and (= (type m@@40) (IMapType U@@45 V@@45)) (= (type |m'@@3|) (IMapType U@@45 V@@45))) (|IMap#Equal| m@@40 |m'@@3|)) (= m@@40 |m'@@3|)))) :qid |DafnyPreludebpl.1385:21| :skolemid |672| :pattern ( (|IMap#Equal| m@@40 |m'@@3|)) )))
(assert (forall ((arg0@@111 T@U) (arg1@@51 T@U) ) (! (let ((V@@46 (IMapTypeInv1 (type arg0@@111)))) (let ((U@@46 (IMapTypeInv0 (type arg0@@111)))) (= (type (|IMap#Merge| arg0@@111 arg1@@51)) (IMapType U@@46 V@@46)))) :qid |funType:IMap#Merge| :pattern ( (|IMap#Merge| arg0@@111 arg1@@51)) )))
(assert (forall ((m@@41 T@U) (n@@27 T@U) ) (! (let ((V@@47 (IMapTypeInv1 (type m@@41)))) (let ((U@@47 (IMapTypeInv0 (type m@@41)))) (=> (and (= (type m@@41) (IMapType U@@47 V@@47)) (= (type n@@27) (IMapType U@@47 V@@47))) (= (|IMap#Domain| (|IMap#Merge| m@@41 n@@27)) (|Set#Union| (|IMap#Domain| m@@41) (|IMap#Domain| n@@27)))))) :qid |DafnyPreludebpl.1391:21| :skolemid |673| :pattern ( (|IMap#Domain| (|IMap#Merge| m@@41 n@@27))) )))
(assert (forall ((m@@42 T@U) (n@@28 T@U) (u@@19 T@U) ) (! (let ((V@@48 (IMapTypeInv1 (type m@@42)))) (let ((U@@48 (type u@@19))) (=> (and (and (= (type m@@42) (IMapType U@@48 V@@48)) (= (type n@@28) (IMapType U@@48 V@@48))) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Merge| m@@42 n@@28)) u@@19))) (and (=> (not (U_2_bool (MapType0Select (|IMap#Domain| n@@28) u@@19))) (= (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19) (MapType0Select (|IMap#Elements| m@@42) u@@19))) (=> (U_2_bool (MapType0Select (|IMap#Domain| n@@28) u@@19)) (= (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19) (MapType0Select (|IMap#Elements| n@@28) u@@19))))))) :qid |DafnyPreludebpl.1394:21| :skolemid |674| :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19)) )))
(assert (forall ((arg0@@112 T@U) (arg1@@52 T@U) ) (! (let ((V@@49 (IMapTypeInv1 (type arg0@@112)))) (let ((U@@49 (IMapTypeInv0 (type arg0@@112)))) (= (type (|IMap#Subtract| arg0@@112 arg1@@52)) (IMapType U@@49 V@@49)))) :qid |funType:IMap#Subtract| :pattern ( (|IMap#Subtract| arg0@@112 arg1@@52)) )))
(assert (forall ((m@@43 T@U) (s@@47 T@U) ) (! (let ((V@@50 (IMapTypeInv1 (type m@@43)))) (let ((U@@50 (IMapTypeInv0 (type m@@43)))) (=> (and (= (type m@@43) (IMapType U@@50 V@@50)) (= (type s@@47) (MapType0Type U@@50 boolType))) (= (|IMap#Domain| (|IMap#Subtract| m@@43 s@@47)) (|Set#Difference| (|IMap#Domain| m@@43) s@@47))))) :qid |DafnyPreludebpl.1401:21| :skolemid |675| :pattern ( (|IMap#Domain| (|IMap#Subtract| m@@43 s@@47))) )))
(assert (forall ((m@@44 T@U) (s@@48 T@U) (u@@20 T@U) ) (! (let ((V@@51 (IMapTypeInv1 (type m@@44)))) (let ((U@@51 (type u@@20))) (=> (and (and (= (type m@@44) (IMapType U@@51 V@@51)) (= (type s@@48) (MapType0Type U@@51 boolType))) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Subtract| m@@44 s@@48)) u@@20))) (= (MapType0Select (|IMap#Elements| (|IMap#Subtract| m@@44 s@@48)) u@@20) (MapType0Select (|IMap#Elements| m@@44) u@@20))))) :qid |DafnyPreludebpl.1404:21| :skolemid |676| :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Subtract| m@@44 s@@48)) u@@20)) )))
(assert (forall ((x@@42 Int) (y@@12 Int) ) (! (= (INTERNAL_add_boogie x@@42 y@@12) (+ x@@42 y@@12)) :qid |DafnyPreludebpl.1413:30| :skolemid |677| :pattern ( (INTERNAL_add_boogie x@@42 y@@12)) )))
(assert (forall ((x@@43 Int) (y@@13 Int) ) (! (= (INTERNAL_sub_boogie x@@43 y@@13) (- x@@43 y@@13)) :qid |DafnyPreludebpl.1414:30| :skolemid |678| :pattern ( (INTERNAL_sub_boogie x@@43 y@@13)) )))
(assert (forall ((x@@44 Int) (y@@14 Int) ) (! (= (INTERNAL_mul_boogie x@@44 y@@14) (* x@@44 y@@14)) :qid |DafnyPreludebpl.1415:30| :skolemid |679| :pattern ( (INTERNAL_mul_boogie x@@44 y@@14)) )))
(assert (forall ((x@@45 Int) (y@@15 Int) ) (! (= (INTERNAL_div_boogie x@@45 y@@15) (div x@@45 y@@15)) :qid |DafnyPreludebpl.1416:30| :skolemid |680| :pattern ( (INTERNAL_div_boogie x@@45 y@@15)) )))
(assert (forall ((x@@46 Int) (y@@16 Int) ) (! (= (INTERNAL_mod_boogie x@@46 y@@16) (mod x@@46 y@@16)) :qid |DafnyPreludebpl.1417:30| :skolemid |681| :pattern ( (INTERNAL_mod_boogie x@@46 y@@16)) )))
(assert (forall ((x@@47 Int) (y@@17 Int) ) (! (= (INTERNAL_lt_boogie x@@47 y@@17) (< x@@47 y@@17)) :qid |DafnyPreludebpl.1418:51| :skolemid |682| :pattern ( (INTERNAL_lt_boogie x@@47 y@@17)) )))
(assert (forall ((x@@48 Int) (y@@18 Int) ) (! (= (INTERNAL_le_boogie x@@48 y@@18) (<= x@@48 y@@18)) :qid |DafnyPreludebpl.1419:51| :skolemid |683| :pattern ( (INTERNAL_le_boogie x@@48 y@@18)) )))
(assert (forall ((x@@49 Int) (y@@19 Int) ) (! (= (INTERNAL_gt_boogie x@@49 y@@19) (> x@@49 y@@19)) :qid |DafnyPreludebpl.1420:51| :skolemid |684| :pattern ( (INTERNAL_gt_boogie x@@49 y@@19)) )))
(assert (forall ((x@@50 Int) (y@@20 Int) ) (! (= (INTERNAL_ge_boogie x@@50 y@@20) (>= x@@50 y@@20)) :qid |DafnyPreludebpl.1421:51| :skolemid |685| :pattern ( (INTERNAL_ge_boogie x@@50 y@@20)) )))
(assert (forall ((x@@51 Int) (y@@21 Int) ) (! (= (Mul x@@51 y@@21) (* x@@51 y@@21)) :qid |DafnyPreludebpl.1423:14| :skolemid |686| :pattern ( (Mul x@@51 y@@21)) )))
(assert (forall ((x@@52 Int) (y@@22 Int) ) (! (= (Div x@@52 y@@22) (div x@@52 y@@22)) :qid |DafnyPreludebpl.1424:14| :skolemid |687| :pattern ( (Div x@@52 y@@22)) )))
(assert (forall ((x@@53 Int) (y@@23 Int) ) (! (= (Mod x@@53 y@@23) (mod x@@53 y@@23)) :qid |DafnyPreludebpl.1425:14| :skolemid |688| :pattern ( (Mod x@@53 y@@23)) )))
(assert (forall ((x@@54 Int) (y@@24 Int) ) (! (= (Add x@@54 y@@24) (+ x@@54 y@@24)) :qid |DafnyPreludebpl.1426:14| :skolemid |689| :pattern ( (Add x@@54 y@@24)) )))
(assert (forall ((x@@55 Int) (y@@25 Int) ) (! (= (Sub x@@55 y@@25) (- x@@55 y@@25)) :qid |DafnyPreludebpl.1427:14| :skolemid |690| :pattern ( (Sub x@@55 y@@25)) )))
(assert (forall ((A@@2 T@U) (B T@U) (a@@79 T@U) (b@@58 T@U) ) (!  (=> (and (and (and (and (= (type A@@2) TyType) (= (type B) TyType)) (= (type a@@79) BoxType)) (= (type b@@58) BoxType)) (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58)) (< (BoxRank a@@79) (BoxRank b@@58))) :qid |DafnyPreludebpl.1468:15| :skolemid |691| :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank a@@79)) :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank b@@58)) )))
(assert (forall ((A@@3 T@U) (B@@0 T@U) (a@@80 T@U) (b@@59 T@U) ) (!  (=> (and (and (and (and (= (type A@@3) TyType) (= (type B@@0) TyType)) (= (type a@@80) BoxType)) (= (type b@@59) (SeqType BoxType))) (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59))) (< (BoxRank a@@80) (|Seq#Rank| b@@59))) :qid |DafnyPreludebpl.1473:15| :skolemid |692| :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (BoxRank a@@80)) :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (|Seq#Rank| b@@59)) )))
(assert (forall ((A@@4 T@U) (B@@1 T@U) (a@@81 T@U) (b@@60 T@U) ) (!  (=> (and (and (and (and (= (type A@@4) TyType) (= (type B@@1) TyType)) (= (type a@@81) (SeqType BoxType))) (= (type b@@60) BoxType)) (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60)) (< (|Seq#Rank| a@@81) (BoxRank b@@60))) :qid |DafnyPreludebpl.1478:15| :skolemid |693| :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (|Seq#Rank| a@@81)) :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (BoxRank b@@60)) )))
(assert (= (Ctor bv64Type) 24))
(assert (forall ((bx@@26 T@U) ) (!  (=> (and (= (type bx@@26) BoxType) ($IsBox bx@@26 (TBitvector 64))) (and (= ($Box ($Unbox bv64Type bx@@26)) bx@@26) ($Is ($Unbox bv64Type bx@@26) (TBitvector 64)))) :qid |unknown.0:0| :skolemid |694| :pattern ( ($IsBox bx@@26 (TBitvector 64))) )))
(assert  (and (and (forall ((arg0@@113 (_ BitVec 64)) ) (! (= (U_2_bv64 (bv64_2_U arg0@@113)) arg0@@113) :qid |typeInv:U_2_bv64| :pattern ( (bv64_2_U arg0@@113)) )) (forall ((x@@56 T@U) ) (!  (=> (= (type x@@56) bv64Type) (= (bv64_2_U (U_2_bv64 x@@56)) x@@56)) :qid |cast:U_2_bv64| :pattern ( (U_2_bv64 x@@56)) ))) (forall ((arg0@@114 (_ BitVec 64)) ) (! (= (type (bv64_2_U arg0@@114)) bv64Type) :qid |funType:bv64_2_U| :pattern ( (bv64_2_U arg0@@114)) ))))
(assert (forall ((v@@52 T@U) ) (!  (=> (= (type v@@52) bv64Type) ($Is v@@52 (TBitvector 64))) :qid |unknown.0:0| :skolemid |695| :pattern ( ($Is v@@52 (TBitvector 64))) )))
(assert (forall ((v@@53 T@U) (heap@@1 T@U) ) (!  (=> (and (= (type v@@53) bv64Type) (= (type heap@@1) (MapType0Type refType MapType1Type))) ($IsAlloc v@@53 (TBitvector 64) heap@@1)) :qid |unknown.0:0| :skolemid |696| :pattern ( ($IsAlloc v@@53 (TBitvector 64) heap@@1)) )))
(assert (forall ((b@@61 (_ BitVec 64)) ) (!  (and (and (<= 0 (nat_from_bv64 b@@61)) (< (nat_from_bv64 b@@61) 18446744073709551616)) (= (nat_from_bv64 b@@61) (bv2int b@@61))) :qid |unknown.0:0| :skolemid |697| :pattern ( (nat_from_bv64 b@@61)) )))
(assert (= (type Tclass._System.nat) TyType))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (forall ((arg0@@115 T@U) ) (! (= (type (TagFamily arg0@@115)) TyTagFamilyType) :qid |funType:TagFamily| :pattern ( (TagFamily arg0@@115)) )))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (forall ((bx@@27 T@U) ) (!  (=> (and (= (type bx@@27) BoxType) ($IsBox bx@@27 Tclass._System.nat)) (and (= ($Box ($Unbox intType bx@@27)) bx@@27) ($Is ($Unbox intType bx@@27) Tclass._System.nat))) :qid |unknown.0:0| :skolemid |698| :pattern ( ($IsBox bx@@27 Tclass._System.nat)) )))
(assert (forall ((|x#0| T@U) ) (!  (=> (= (type |x#0|) intType) (= ($Is |x#0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0|)))) :qid |unknown.0:0| :skolemid |699| :pattern ( ($Is |x#0| Tclass._System.nat)) )))
(assert (forall ((|x#0@@0| T@U) ($h T@U) ) (!  (=> (and (= (type |x#0@@0|) intType) (= (type $h) (MapType0Type refType MapType1Type))) ($IsAlloc |x#0@@0| Tclass._System.nat $h)) :qid |unknown.0:0| :skolemid |700| :pattern ( ($IsAlloc |x#0@@0| Tclass._System.nat $h)) )))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (forall ((bx@@28 T@U) ) (!  (=> (and (= (type bx@@28) BoxType) ($IsBox bx@@28 Tclass._System.object?)) (and (= ($Box ($Unbox refType bx@@28)) bx@@28) ($Is ($Unbox refType bx@@28) Tclass._System.object?))) :qid |unknown.0:0| :skolemid |701| :pattern ( ($IsBox bx@@28 Tclass._System.object?)) )))
(assert (forall (($o T@U) ) (!  (=> (= (type $o) refType) ($Is $o Tclass._System.object?)) :qid |unknown.0:0| :skolemid |702| :pattern ( ($Is $o Tclass._System.object?)) )))
(assert (= (type null) refType))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (!  (=> (and (= (type $o@@0) refType) (= (type $h@@0) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@0 Tclass._System.object? $h@@0)  (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc))))) :qid |unknown.0:0| :skolemid |703| :pattern ( ($IsAlloc $o@@0 Tclass._System.object? $h@@0)) )))
(assert (= (type Tclass._System.object) TyType))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((bx@@29 T@U) ) (!  (=> (and (= (type bx@@29) BoxType) ($IsBox bx@@29 Tclass._System.object)) (and (= ($Box ($Unbox refType bx@@29)) bx@@29) ($Is ($Unbox refType bx@@29) Tclass._System.object))) :qid |unknown.0:0| :skolemid |704| :pattern ( ($IsBox bx@@29 Tclass._System.object)) )))
(assert (forall ((|c#0| T@U) ) (!  (=> (= (type |c#0|) refType) (= ($Is |c#0| Tclass._System.object)  (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null))))) :qid |unknown.0:0| :skolemid |705| :pattern ( ($Is |c#0| Tclass._System.object)) )))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (!  (=> (and (= (type |c#0@@0|) refType) (= (type $h@@1) (MapType0Type refType MapType1Type))) (= ($IsAlloc |c#0@@0| Tclass._System.object $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1))) :qid |unknown.0:0| :skolemid |706| :pattern ( ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)) )))
(assert (forall ((arg0@@116 T@U) ) (! (= (type (Tclass._System.array? arg0@@116)) TyType) :qid |funType:Tclass._System.array?| :pattern ( (Tclass._System.array? arg0@@116)) )))
(assert (forall ((_System.array$arg T@U) ) (!  (=> (= (type _System.array$arg) TyType) (and (= (Tag (Tclass._System.array? _System.array$arg)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg)) tytagFamily$array))) :qid |unknown.0:0| :skolemid |707| :pattern ( (Tclass._System.array? _System.array$arg)) )))
(assert (forall ((arg0@@117 T@U) ) (! (= (type (Tclass._System.array?_0 arg0@@117)) TyType) :qid |funType:Tclass._System.array?_0| :pattern ( (Tclass._System.array?_0 arg0@@117)) )))
(assert (forall ((_System.array$arg@@0 T@U) ) (!  (=> (= (type _System.array$arg@@0) TyType) (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@0)) _System.array$arg@@0)) :qid |unknown.0:0| :skolemid |708| :pattern ( (Tclass._System.array? _System.array$arg@@0)) )))
(assert (forall ((_System.array$arg@@1 T@U) (bx@@30 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@1) TyType) (= (type bx@@30) BoxType)) ($IsBox bx@@30 (Tclass._System.array? _System.array$arg@@1))) (and (= ($Box ($Unbox refType bx@@30)) bx@@30) ($Is ($Unbox refType bx@@30) (Tclass._System.array? _System.array$arg@@1)))) :qid |unknown.0:0| :skolemid |709| :pattern ( ($IsBox bx@@30 (Tclass._System.array? _System.array$arg@@1))) )))
(assert (forall ((arg0@@118 T@U) ) (! (= (type (dtype arg0@@118)) TyType) :qid |funType:dtype| :pattern ( (dtype arg0@@118)) )))
(assert (forall ((_System.array$arg@@2 T@U) ($h@@2 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and (= (type _System.array$arg@@2) TyType) (= (type $h@@2) (MapType0Type refType MapType1Type))) (= (type $o@@1) refType)) (and (and ($IsGoodHeap $h@@2) (and (not (= $o@@1 null)) (= (dtype $o@@1) (Tclass._System.array? _System.array$arg@@2)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1))))) ($IsBox (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) _System.array$arg@@2)) :qid |unknown.0:0| :skolemid |710| :pattern ( (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) (Tclass._System.array? _System.array$arg@@2)) )))
(assert (forall ((_System.array$arg@@3 T@U) ($h@@3 T@U) ($o@@2 T@U) ($i0@@0 Int) ) (!  (=> (and (and (= (type _System.array$arg@@3) TyType) (= (type $h@@3) (MapType0Type refType MapType1Type))) (= (type $o@@2) refType)) (=> (and (and (and ($IsGoodHeap $h@@3) (and (not (= $o@@2 null)) (= (dtype $o@@2) (Tclass._System.array? _System.array$arg@@3)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@2)))) (U_2_bool (MapType1Select (MapType0Select $h@@3 $o@@2) alloc))) ($IsAllocBox (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) _System.array$arg@@3 $h@@3))) :qid |unknown.0:0| :skolemid |711| :pattern ( (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) (Tclass._System.array? _System.array$arg@@3)) )))
(assert (forall ((_System.array$arg@@4 T@U) ($o@@3 T@U) ) (!  (=> (and (= (type _System.array$arg@@4) TyType) (= (type $o@@3) refType)) (= ($Is $o@@3 (Tclass._System.array? _System.array$arg@@4))  (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? _System.array$arg@@4))))) :qid |unknown.0:0| :skolemid |712| :pattern ( ($Is $o@@3 (Tclass._System.array? _System.array$arg@@4))) )))
(assert (forall ((_System.array$arg@@5 T@U) ($o@@4 T@U) ($h@@4 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@5) TyType) (= (type $o@@4) refType)) (= (type $h@@4) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@4 (Tclass._System.array? _System.array$arg@@5) $h@@4)  (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc))))) :qid |unknown.0:0| :skolemid |713| :pattern ( ($IsAlloc $o@@4 (Tclass._System.array? _System.array$arg@@5) $h@@4)) )))
(assert (forall ((_System.array$arg@@6 T@U) ($o@@5 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@6) TyType) (= (type $o@@5) refType)) (and (not (= $o@@5 null)) (= (dtype $o@@5) (Tclass._System.array? _System.array$arg@@6)))) ($Is (int_2_U (_System.array.Length $o@@5)) TInt)) :qid |unknown.0:0| :skolemid |714| :pattern ( (_System.array.Length $o@@5) (Tclass._System.array? _System.array$arg@@6)) )))
(assert (forall ((_System.array$arg@@7 T@U) ($h@@5 T@U) ($o@@6 T@U) ) (!  (=> (and (and (and (= (type _System.array$arg@@7) TyType) (= (type $h@@5) (MapType0Type refType MapType1Type))) (= (type $o@@6) refType)) (and (and ($IsGoodHeap $h@@5) (and (not (= $o@@6 null)) (= (dtype $o@@6) (Tclass._System.array? _System.array$arg@@7)))) (U_2_bool (MapType1Select (MapType0Select $h@@5 $o@@6) alloc)))) ($IsAlloc (int_2_U (_System.array.Length $o@@6)) TInt $h@@5)) :qid |unknown.0:0| :skolemid |715| :pattern ( (_System.array.Length $o@@6) (MapType1Select (MapType0Select $h@@5 $o@@6) alloc) (Tclass._System.array? _System.array$arg@@7)) )))
(assert (forall ((arg0@@119 T@U) ) (! (= (type (Tclass._System.array arg0@@119)) TyType) :qid |funType:Tclass._System.array| :pattern ( (Tclass._System.array arg0@@119)) )))
(assert (forall ((_System.array$arg@@8 T@U) ) (!  (=> (= (type _System.array$arg@@8) TyType) (and (= (Tag (Tclass._System.array _System.array$arg@@8)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@8)) tytagFamily$array))) :qid |unknown.0:0| :skolemid |716| :pattern ( (Tclass._System.array _System.array$arg@@8)) )))
(assert (forall ((arg0@@120 T@U) ) (! (= (type (Tclass._System.array_0 arg0@@120)) TyType) :qid |funType:Tclass._System.array_0| :pattern ( (Tclass._System.array_0 arg0@@120)) )))
(assert (forall ((_System.array$arg@@9 T@U) ) (!  (=> (= (type _System.array$arg@@9) TyType) (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@9)) _System.array$arg@@9)) :qid |unknown.0:0| :skolemid |717| :pattern ( (Tclass._System.array _System.array$arg@@9)) )))
(assert (forall ((_System.array$arg@@10 T@U) (bx@@31 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@10) TyType) (= (type bx@@31) BoxType)) ($IsBox bx@@31 (Tclass._System.array _System.array$arg@@10))) (and (= ($Box ($Unbox refType bx@@31)) bx@@31) ($Is ($Unbox refType bx@@31) (Tclass._System.array _System.array$arg@@10)))) :qid |unknown.0:0| :skolemid |718| :pattern ( ($IsBox bx@@31 (Tclass._System.array _System.array$arg@@10))) )))
(assert (forall ((_System.array$arg@@11 T@U) (|c#0@@1| T@U) ) (!  (=> (and (= (type _System.array$arg@@11) TyType) (= (type |c#0@@1|) refType)) (= ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@11))  (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@11)) (not (= |c#0@@1| null))))) :qid |unknown.0:0| :skolemid |719| :pattern ( ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@11))) )))
(assert (forall ((_System.array$arg@@12 T@U) (|c#0@@2| T@U) ($h@@6 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@12) TyType) (= (type |c#0@@2|) refType)) (= (type $h@@6) (MapType0Type refType MapType1Type))) (= ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@12) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@12) $h@@6))) :qid |unknown.0:0| :skolemid |720| :pattern ( ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@12) $h@@6)) )))
(assert (forall ((arg0@@121 T@U) (arg1@@53 T@U) ) (! (= (type (Tclass._System.___hFunc1 arg0@@121 arg1@@53)) TyType) :qid |funType:Tclass._System.___hFunc1| :pattern ( (Tclass._System.___hFunc1 arg0@@121 arg1@@53)) )))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) ) (!  (=> (and (= (type |#$T0|) TyType) (= (type |#$R|) TyType)) (and (= (Tag (Tclass._System.___hFunc1 |#$T0| |#$R|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0| |#$R|)) |tytagFamily$_#Func1|))) :qid |unknown.0:0| :skolemid |721| :pattern ( (Tclass._System.___hFunc1 |#$T0| |#$R|)) )))
(assert (forall ((arg0@@122 T@U) ) (! (= (type (Tclass._System.___hFunc1_0 arg0@@122)) TyType) :qid |funType:Tclass._System.___hFunc1_0| :pattern ( (Tclass._System.___hFunc1_0 arg0@@122)) )))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) ) (!  (=> (and (= (type |#$T0@@0|) TyType) (= (type |#$R@@0|) TyType)) (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) |#$T0@@0|)) :qid |unknown.0:0| :skolemid |722| :pattern ( (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) )))
(assert (forall ((arg0@@123 T@U) ) (! (= (type (Tclass._System.___hFunc1_1 arg0@@123)) TyType) :qid |funType:Tclass._System.___hFunc1_1| :pattern ( (Tclass._System.___hFunc1_1 arg0@@123)) )))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) ) (!  (=> (and (= (type |#$T0@@1|) TyType) (= (type |#$R@@1|) TyType)) (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) |#$R@@1|)) :qid |unknown.0:0| :skolemid |723| :pattern ( (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) )))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) (bx@@32 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@2|) TyType) (= (type |#$R@@2|) TyType)) (= (type bx@@32) BoxType)) ($IsBox bx@@32 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))) (and (= ($Box ($Unbox HandleTypeType bx@@32)) bx@@32) ($Is ($Unbox HandleTypeType bx@@32) (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)))) :qid |unknown.0:0| :skolemid |724| :pattern ( ($IsBox bx@@32 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))) )))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@124 T@T) (arg1@@54 T@T) (arg2@@8 T@T) ) (! (= (Ctor (MapType2Type arg0@@124 arg1@@54 arg2@@8)) 25) :qid |ctor:MapType2Type| )) (forall ((arg0@@125 T@T) (arg1@@55 T@T) (arg2@@9 T@T) ) (! (= (MapType2TypeInv0 (MapType2Type arg0@@125 arg1@@55 arg2@@9)) arg0@@125) :qid |typeInv:MapType2TypeInv0| :pattern ( (MapType2Type arg0@@125 arg1@@55 arg2@@9)) ))) (forall ((arg0@@126 T@T) (arg1@@56 T@T) (arg2@@10 T@T) ) (! (= (MapType2TypeInv1 (MapType2Type arg0@@126 arg1@@56 arg2@@10)) arg1@@56) :qid |typeInv:MapType2TypeInv1| :pattern ( (MapType2Type arg0@@126 arg1@@56 arg2@@10)) ))) (forall ((arg0@@127 T@T) (arg1@@57 T@T) (arg2@@11 T@T) ) (! (= (MapType2TypeInv2 (MapType2Type arg0@@127 arg1@@57 arg2@@11)) arg2@@11) :qid |typeInv:MapType2TypeInv2| :pattern ( (MapType2Type arg0@@127 arg1@@57 arg2@@11)) ))) (forall ((arg0@@128 T@U) (arg1@@58 T@U) (arg2@@12 T@U) ) (! (let ((aVar2 (MapType2TypeInv2 (type arg0@@128)))) (= (type (MapType2Select arg0@@128 arg1@@58 arg2@@12)) aVar2)) :qid |funType:MapType2Select| :pattern ( (MapType2Select arg0@@128 arg1@@58 arg2@@12)) ))) (forall ((arg0@@129 T@U) (arg1@@59 T@U) (arg2@@13 T@U) (arg3@@1 T@U) ) (! (let ((aVar2@@0 (type arg3@@1))) (let ((aVar1@@2 (type arg2@@13))) (let ((aVar0@@0 (type arg1@@59))) (= (type (MapType2Store arg0@@129 arg1@@59 arg2@@13 arg3@@1)) (MapType2Type aVar0@@0 aVar1@@2 aVar2@@0))))) :qid |funType:MapType2Store| :pattern ( (MapType2Store arg0@@129 arg1@@59 arg2@@13 arg3@@1)) ))) (forall ((m@@45 T@U) (x0@@5 T@U) (x1 T@U) (val@@6 T@U) ) (! (let ((aVar2@@1 (MapType2TypeInv2 (type m@@45)))) (=> (= (type val@@6) aVar2@@1) (= (MapType2Select (MapType2Store m@@45 x0@@5 x1 val@@6) x0@@5 x1) val@@6))) :qid |mapAx0:MapType2Select| :weight 0 ))) (and (and (forall ((val@@7 T@U) (m@@46 T@U) (x0@@6 T@U) (x1@@0 T@U) (y0@@3 T@U) (y1 T@U) ) (!  (or (= x0@@6 y0@@3) (= (MapType2Select (MapType2Store m@@46 x0@@6 x1@@0 val@@7) y0@@3 y1) (MapType2Select m@@46 y0@@3 y1))) :qid |mapAx1:MapType2Select:0| :weight 0 )) (forall ((val@@8 T@U) (m@@47 T@U) (x0@@7 T@U) (x1@@1 T@U) (y0@@4 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType2Select (MapType2Store m@@47 x0@@7 x1@@1 val@@8) y0@@4 y1@@0) (MapType2Select m@@47 y0@@4 y1@@0))) :qid |mapAx1:MapType2Select:1| :weight 0 ))) (forall ((val@@9 T@U) (m@@48 T@U) (x0@@8 T@U) (x1@@2 T@U) (y0@@5 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType2Select (MapType2Store m@@48 x0@@8 x1@@2 val@@9) y0@@5 y1@@1) (MapType2Select m@@48 y0@@5 y1@@1))) :qid |mapAx2:MapType2Select| :weight 0 )))) (forall ((arg0@@130 T@U) (arg1@@60 T@U) (arg2@@14 T@U) ) (! (= (type (Handle1 arg0@@130 arg1@@60 arg2@@14)) HandleTypeType) :qid |funType:Handle1| :pattern ( (Handle1 arg0@@130 arg1@@60 arg2@@14)) ))))
(assert (forall ((t0@@16 T@U) (t1@@7 T@U) (heap@@2 T@U) (h@@21 T@U) (r@@6 T@U) (rd T@U) (bx0 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@16) TyType) (= (type t1@@7) TyType)) (= (type heap@@2) (MapType0Type refType MapType1Type))) (= (type h@@21) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@6) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0) BoxType)) (= (Apply1 t0@@16 t1@@7 heap@@2 (Handle1 h@@21 r@@6 rd) bx0) (MapType2Select h@@21 heap@@2 bx0))) :qid |unknown.0:0| :skolemid |725| :pattern ( (Apply1 t0@@16 t1@@7 heap@@2 (Handle1 h@@21 r@@6 rd) bx0)) )))
(assert (forall ((t0@@17 T@U) (t1@@8 T@U) (heap@@3 T@U) (h@@22 T@U) (r@@7 T@U) (rd@@0 T@U) (bx0@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@17) TyType) (= (type t1@@8) TyType)) (= (type heap@@3) (MapType0Type refType MapType1Type))) (= (type h@@22) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@7) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@0) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@0) BoxType)) (U_2_bool (MapType2Select r@@7 heap@@3 bx0@@0))) (Requires1 t0@@17 t1@@8 heap@@3 (Handle1 h@@22 r@@7 rd@@0) bx0@@0)) :qid |unknown.0:0| :skolemid |726| :pattern ( (Requires1 t0@@17 t1@@8 heap@@3 (Handle1 h@@22 r@@7 rd@@0) bx0@@0)) )))
(assert (forall ((arg0@@131 T@U) (arg1@@61 T@U) (arg2@@15 T@U) (arg3@@2 T@U) (arg4@@0 T@U) ) (! (= (type (Reads1 arg0@@131 arg1@@61 arg2@@15 arg3@@2 arg4@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads1| :pattern ( (Reads1 arg0@@131 arg1@@61 arg2@@15 arg3@@2 arg4@@0)) )))
(assert (forall ((t0@@18 T@U) (t1@@9 T@U) (heap@@4 T@U) (h@@23 T@U) (r@@8 T@U) (rd@@1 T@U) (bx0@@1 T@U) (bx@@33 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@18) TyType) (= (type t1@@9) TyType)) (= (type heap@@4) (MapType0Type refType MapType1Type))) (= (type h@@23) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@8) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@1) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@1) BoxType)) (= (type bx@@33) BoxType)) (= (U_2_bool (MapType0Select (Reads1 t0@@18 t1@@9 heap@@4 (Handle1 h@@23 r@@8 rd@@1) bx0@@1) bx@@33)) (U_2_bool (MapType0Select (MapType2Select rd@@1 heap@@4 bx0@@1) bx@@33)))) :qid |unknown.0:0| :skolemid |727| :pattern ( (MapType0Select (Reads1 t0@@18 t1@@9 heap@@4 (Handle1 h@@23 r@@8 rd@@1) bx0@@1) bx@@33)) )))
(assert (forall ((t0@@19 T@U) (t1@@10 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@5 T@U) (bx0@@2 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@19) TyType) (= (type t1@@10) TyType)) (= (type h0@@0) (MapType0Type refType MapType1Type))) (= (type h1@@0) (MapType0Type refType MapType1Type))) (= (type f@@5) HandleTypeType)) (= (type bx0@@2) BoxType)) (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and ($IsBox bx0@@2 t0@@19) ($Is f@@5 (Tclass._System.___hFunc1 t0@@19 t1@@10)))) (forall ((o@@44 T@U) (fld T@U) ) (! (let ((a@@82 (FieldTypeInv0 (type fld)))) (=> (and (and (= (type o@@44) refType) (= (type fld) (FieldType a@@82))) (and (not (= o@@44 null)) (U_2_bool (MapType0Select (Reads1 t0@@19 t1@@10 h0@@0 f@@5 bx0@@2) ($Box o@@44))))) (= (MapType1Select (MapType0Select h0@@0 o@@44) fld) (MapType1Select (MapType0Select h1@@0 o@@44) fld)))) :qid |unknown.0:0| :skolemid |728| :no-pattern (type o@@44) :no-pattern (type fld) :no-pattern (U_2_int o@@44) :no-pattern (U_2_bool o@@44) :no-pattern (U_2_int fld) :no-pattern (U_2_bool fld) )))) (= (Reads1 t0@@19 t1@@10 h0@@0 f@@5 bx0@@2) (Reads1 t0@@19 t1@@10 h1@@0 f@@5 bx0@@2))) :qid |unknown.0:0| :skolemid |729| :pattern ( ($HeapSucc h0@@0 h1@@0) (Reads1 t0@@19 t1@@10 h1@@0 f@@5 bx0@@2)) )))
(assert (forall ((t0@@20 T@U) (t1@@11 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@6 T@U) (bx0@@3 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@20) TyType) (= (type t1@@11) TyType)) (= (type h0@@1) (MapType0Type refType MapType1Type))) (= (type h1@@1) (MapType0Type refType MapType1Type))) (= (type f@@6) HandleTypeType)) (= (type bx0@@3) BoxType)) (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and ($IsBox bx0@@3 t0@@20) ($Is f@@6 (Tclass._System.___hFunc1 t0@@20 t1@@11)))) (forall ((o@@45 T@U) (fld@@0 T@U) ) (! (let ((a@@83 (FieldTypeInv0 (type fld@@0)))) (=> (and (and (= (type o@@45) refType) (= (type fld@@0) (FieldType a@@83))) (and (not (= o@@45 null)) (U_2_bool (MapType0Select (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3) ($Box o@@45))))) (= (MapType1Select (MapType0Select h0@@1 o@@45) fld@@0) (MapType1Select (MapType0Select h1@@1 o@@45) fld@@0)))) :qid |unknown.0:0| :skolemid |730| :no-pattern (type o@@45) :no-pattern (type fld@@0) :no-pattern (U_2_int o@@45) :no-pattern (U_2_bool o@@45) :no-pattern (U_2_int fld@@0) :no-pattern (U_2_bool fld@@0) )))) (= (Reads1 t0@@20 t1@@11 h0@@1 f@@6 bx0@@3) (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3))) :qid |unknown.0:0| :skolemid |731| :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3)) )))
(assert (forall ((t0@@21 T@U) (t1@@12 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@7 T@U) (bx0@@4 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@21) TyType) (= (type t1@@12) TyType)) (= (type h0@@2) (MapType0Type refType MapType1Type))) (= (type h1@@2) (MapType0Type refType MapType1Type))) (= (type f@@7) HandleTypeType)) (= (type bx0@@4) BoxType)) (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and ($IsBox bx0@@4 t0@@21) ($Is f@@7 (Tclass._System.___hFunc1 t0@@21 t1@@12)))) (forall ((o@@46 T@U) (fld@@1 T@U) ) (! (let ((a@@84 (FieldTypeInv0 (type fld@@1)))) (=> (and (and (= (type o@@46) refType) (= (type fld@@1) (FieldType a@@84))) (and (not (= o@@46 null)) (U_2_bool (MapType0Select (Reads1 t0@@21 t1@@12 h0@@2 f@@7 bx0@@4) ($Box o@@46))))) (= (MapType1Select (MapType0Select h0@@2 o@@46) fld@@1) (MapType1Select (MapType0Select h1@@2 o@@46) fld@@1)))) :qid |unknown.0:0| :skolemid |732| :no-pattern (type o@@46) :no-pattern (type fld@@1) :no-pattern (U_2_int o@@46) :no-pattern (U_2_bool o@@46) :no-pattern (U_2_int fld@@1) :no-pattern (U_2_bool fld@@1) )))) (= (Requires1 t0@@21 t1@@12 h0@@2 f@@7 bx0@@4) (Requires1 t0@@21 t1@@12 h1@@2 f@@7 bx0@@4))) :qid |unknown.0:0| :skolemid |733| :pattern ( ($HeapSucc h0@@2 h1@@2) (Requires1 t0@@21 t1@@12 h1@@2 f@@7 bx0@@4)) )))
(assert (forall ((t0@@22 T@U) (t1@@13 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@8 T@U) (bx0@@5 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@22) TyType) (= (type t1@@13) TyType)) (= (type h0@@3) (MapType0Type refType MapType1Type))) (= (type h1@@3) (MapType0Type refType MapType1Type))) (= (type f@@8) HandleTypeType)) (= (type bx0@@5) BoxType)) (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and ($IsBox bx0@@5 t0@@22) ($Is f@@8 (Tclass._System.___hFunc1 t0@@22 t1@@13)))) (forall ((o@@47 T@U) (fld@@2 T@U) ) (! (let ((a@@85 (FieldTypeInv0 (type fld@@2)))) (=> (and (and (= (type o@@47) refType) (= (type fld@@2) (FieldType a@@85))) (and (not (= o@@47 null)) (U_2_bool (MapType0Select (Reads1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5) ($Box o@@47))))) (= (MapType1Select (MapType0Select h0@@3 o@@47) fld@@2) (MapType1Select (MapType0Select h1@@3 o@@47) fld@@2)))) :qid |unknown.0:0| :skolemid |734| :no-pattern (type o@@47) :no-pattern (type fld@@2) :no-pattern (U_2_int o@@47) :no-pattern (U_2_bool o@@47) :no-pattern (U_2_int fld@@2) :no-pattern (U_2_bool fld@@2) )))) (= (Requires1 t0@@22 t1@@13 h0@@3 f@@8 bx0@@5) (Requires1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5))) :qid |unknown.0:0| :skolemid |735| :pattern ( ($HeapSucc h0@@3 h1@@3) (Requires1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5)) )))
(assert (forall ((t0@@23 T@U) (t1@@14 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@9 T@U) (bx0@@6 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@23) TyType) (= (type t1@@14) TyType)) (= (type h0@@4) (MapType0Type refType MapType1Type))) (= (type h1@@4) (MapType0Type refType MapType1Type))) (= (type f@@9) HandleTypeType)) (= (type bx0@@6) BoxType)) (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and ($IsBox bx0@@6 t0@@23) ($Is f@@9 (Tclass._System.___hFunc1 t0@@23 t1@@14)))) (forall ((o@@48 T@U) (fld@@3 T@U) ) (! (let ((a@@86 (FieldTypeInv0 (type fld@@3)))) (=> (and (and (= (type o@@48) refType) (= (type fld@@3) (FieldType a@@86))) (and (not (= o@@48 null)) (U_2_bool (MapType0Select (Reads1 t0@@23 t1@@14 h0@@4 f@@9 bx0@@6) ($Box o@@48))))) (= (MapType1Select (MapType0Select h0@@4 o@@48) fld@@3) (MapType1Select (MapType0Select h1@@4 o@@48) fld@@3)))) :qid |unknown.0:0| :skolemid |736| :no-pattern (type o@@48) :no-pattern (type fld@@3) :no-pattern (U_2_int o@@48) :no-pattern (U_2_bool o@@48) :no-pattern (U_2_int fld@@3) :no-pattern (U_2_bool fld@@3) )))) (= (Apply1 t0@@23 t1@@14 h0@@4 f@@9 bx0@@6) (Apply1 t0@@23 t1@@14 h1@@4 f@@9 bx0@@6))) :qid |unknown.0:0| :skolemid |737| :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply1 t0@@23 t1@@14 h1@@4 f@@9 bx0@@6)) )))
(assert (forall ((t0@@24 T@U) (t1@@15 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@10 T@U) (bx0@@7 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@24) TyType) (= (type t1@@15) TyType)) (= (type h0@@5) (MapType0Type refType MapType1Type))) (= (type h1@@5) (MapType0Type refType MapType1Type))) (= (type f@@10) HandleTypeType)) (= (type bx0@@7) BoxType)) (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) (and ($IsBox bx0@@7 t0@@24) ($Is f@@10 (Tclass._System.___hFunc1 t0@@24 t1@@15)))) (forall ((o@@49 T@U) (fld@@4 T@U) ) (! (let ((a@@87 (FieldTypeInv0 (type fld@@4)))) (=> (and (and (= (type o@@49) refType) (= (type fld@@4) (FieldType a@@87))) (and (not (= o@@49 null)) (U_2_bool (MapType0Select (Reads1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7) ($Box o@@49))))) (= (MapType1Select (MapType0Select h0@@5 o@@49) fld@@4) (MapType1Select (MapType0Select h1@@5 o@@49) fld@@4)))) :qid |unknown.0:0| :skolemid |738| :no-pattern (type o@@49) :no-pattern (type fld@@4) :no-pattern (U_2_int o@@49) :no-pattern (U_2_bool o@@49) :no-pattern (U_2_int fld@@4) :no-pattern (U_2_bool fld@@4) )))) (= (Apply1 t0@@24 t1@@15 h0@@5 f@@10 bx0@@7) (Apply1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7))) :qid |unknown.0:0| :skolemid |739| :pattern ( ($HeapSucc h0@@5 h1@@5) (Apply1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7)) )))
(assert (forall ((t0@@25 T@U) (t1@@16 T@U) (heap@@5 T@U) (f@@11 T@U) (bx0@@8 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@25) TyType) (= (type t1@@16) TyType)) (= (type heap@@5) (MapType0Type refType MapType1Type))) (= (type f@@11) HandleTypeType)) (= (type bx0@@8) BoxType)) (and ($IsGoodHeap heap@@5) (and ($IsBox bx0@@8 t0@@25) ($Is f@@11 (Tclass._System.___hFunc1 t0@@25 t1@@16))))) (= (|Set#Equal| (Reads1 t0@@25 t1@@16 $OneHeap f@@11 bx0@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@25 t1@@16 heap@@5 f@@11 bx0@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |740| :pattern ( (Reads1 t0@@25 t1@@16 $OneHeap f@@11 bx0@@8) ($IsGoodHeap heap@@5)) :pattern ( (Reads1 t0@@25 t1@@16 heap@@5 f@@11 bx0@@8)) )))
(assert (forall ((t0@@26 T@U) (t1@@17 T@U) (heap@@6 T@U) (f@@12 T@U) (bx0@@9 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@26) TyType) (= (type t1@@17) TyType)) (= (type heap@@6) (MapType0Type refType MapType1Type))) (= (type f@@12) HandleTypeType)) (= (type bx0@@9) BoxType)) (and (and ($IsGoodHeap heap@@6) (and ($IsBox bx0@@9 t0@@26) ($Is f@@12 (Tclass._System.___hFunc1 t0@@26 t1@@17)))) (|Set#Equal| (Reads1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) (|Set#Empty| BoxType)))) (= (Requires1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) (Requires1 t0@@26 t1@@17 heap@@6 f@@12 bx0@@9))) :qid |unknown.0:0| :skolemid |741| :pattern ( (Requires1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) ($IsGoodHeap heap@@6)) :pattern ( (Requires1 t0@@26 t1@@17 heap@@6 f@@12 bx0@@9)) )))
(assert (forall ((f@@13 T@U) (t0@@27 T@U) (t1@@18 T@U) ) (!  (=> (and (and (= (type f@@13) HandleTypeType) (= (type t0@@27) TyType)) (= (type t1@@18) TyType)) (= ($Is f@@13 (Tclass._System.___hFunc1 t0@@27 t1@@18)) (forall ((h@@24 T@U) (bx0@@10 T@U) ) (!  (=> (and (= (type h@@24) (MapType0Type refType MapType1Type)) (= (type bx0@@10) BoxType)) (=> (and (and ($IsGoodHeap h@@24) ($IsBox bx0@@10 t0@@27)) (Requires1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10)) ($IsBox (Apply1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10) t1@@18))) :qid |DafnyPreludebpl.545:12| :skolemid |742| :pattern ( (Apply1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10)) )))) :qid |unknown.0:0| :skolemid |743| :pattern ( ($Is f@@13 (Tclass._System.___hFunc1 t0@@27 t1@@18))) )))
(assert (forall ((f@@14 T@U) (t0@@28 T@U) (t1@@19 T@U) (u0 T@U) (u1 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@14) HandleTypeType) (= (type t0@@28) TyType)) (= (type t1@@19) TyType)) (= (type u0) TyType)) (= (type u1) TyType)) (and (and ($Is f@@14 (Tclass._System.___hFunc1 t0@@28 t1@@19)) (forall ((bx@@34 T@U) ) (!  (=> (and (= (type bx@@34) BoxType) ($IsBox bx@@34 u0)) ($IsBox bx@@34 t0@@28)) :qid |unknown.0:0| :skolemid |744| :pattern ( ($IsBox bx@@34 u0)) :pattern ( ($IsBox bx@@34 t0@@28)) ))) (forall ((bx@@35 T@U) ) (!  (=> (and (= (type bx@@35) BoxType) ($IsBox bx@@35 t1@@19)) ($IsBox bx@@35 u1)) :qid |unknown.0:0| :skolemid |745| :pattern ( ($IsBox bx@@35 t1@@19)) :pattern ( ($IsBox bx@@35 u1)) )))) ($Is f@@14 (Tclass._System.___hFunc1 u0 u1))) :qid |unknown.0:0| :skolemid |746| :pattern ( ($Is f@@14 (Tclass._System.___hFunc1 t0@@28 t1@@19)) ($Is f@@14 (Tclass._System.___hFunc1 u0 u1))) )))
(assert (forall ((f@@15 T@U) (t0@@29 T@U) (t1@@20 T@U) (h@@25 T@U) ) (!  (=> (and (and (and (and (= (type f@@15) HandleTypeType) (= (type t0@@29) TyType)) (= (type t1@@20) TyType)) (= (type h@@25) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@25)) (= ($IsAlloc f@@15 (Tclass._System.___hFunc1 t0@@29 t1@@20) h@@25) (forall ((bx0@@11 T@U) ) (!  (=> (= (type bx0@@11) BoxType) (=> (and (and ($IsBox bx0@@11 t0@@29) ($IsAllocBox bx0@@11 t0@@29 h@@25)) (Requires1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) (forall ((r@@9 T@U) ) (!  (=> (= (type r@@9) refType) (=> (and (not (= r@@9 null)) (U_2_bool (MapType0Select (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11) ($Box r@@9)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@9) alloc)))) :qid |unknown.0:0| :skolemid |747| :pattern ( (MapType0Select (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11) ($Box r@@9))) )))) :qid |unknown.0:0| :skolemid |748| :pattern ( (Apply1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) :pattern ( (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) )))) :qid |unknown.0:0| :skolemid |749| :pattern ( ($IsAlloc f@@15 (Tclass._System.___hFunc1 t0@@29 t1@@20) h@@25)) )))
(assert (forall ((f@@16 T@U) (t0@@30 T@U) (t1@@21 T@U) (h@@26 T@U) ) (!  (=> (and (and (and (and (= (type f@@16) HandleTypeType) (= (type t0@@30) TyType)) (= (type t1@@21) TyType)) (= (type h@@26) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@26) ($IsAlloc f@@16 (Tclass._System.___hFunc1 t0@@30 t1@@21) h@@26))) (forall ((bx0@@12 T@U) ) (!  (=> (= (type bx0@@12) BoxType) (=> (and ($IsAllocBox bx0@@12 t0@@30 h@@26) (Requires1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12)) ($IsAllocBox (Apply1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12) t1@@21 h@@26))) :qid |unknown.0:0| :skolemid |750| :pattern ( (Apply1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12)) ))) :qid |unknown.0:0| :skolemid |751| :pattern ( ($IsAlloc f@@16 (Tclass._System.___hFunc1 t0@@30 t1@@21) h@@26)) )))
(assert (forall ((arg0@@132 T@U) (arg1@@62 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1 arg0@@132 arg1@@62)) TyType) :qid |funType:Tclass._System.___hPartialFunc1| :pattern ( (Tclass._System.___hPartialFunc1 arg0@@132 arg1@@62)) )))
(assert (forall ((|#$T0@@3| T@U) (|#$R@@3| T@U) ) (!  (=> (and (= (type |#$T0@@3|) TyType) (= (type |#$R@@3|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) |tytagFamily$_#PartialFunc1|))) :qid |unknown.0:0| :skolemid |752| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) )))
(assert (forall ((arg0@@133 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_0 arg0@@133)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_0| :pattern ( (Tclass._System.___hPartialFunc1_0 arg0@@133)) )))
(assert (forall ((|#$T0@@4| T@U) (|#$R@@4| T@U) ) (!  (=> (and (= (type |#$T0@@4|) TyType) (= (type |#$R@@4|) TyType)) (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) |#$T0@@4|)) :qid |unknown.0:0| :skolemid |753| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) )))
(assert (forall ((arg0@@134 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_1 arg0@@134)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_1| :pattern ( (Tclass._System.___hPartialFunc1_1 arg0@@134)) )))
(assert (forall ((|#$T0@@5| T@U) (|#$R@@5| T@U) ) (!  (=> (and (= (type |#$T0@@5|) TyType) (= (type |#$R@@5|) TyType)) (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|)) |#$R@@5|)) :qid |unknown.0:0| :skolemid |754| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|)) )))
(assert (forall ((|#$T0@@6| T@U) (|#$R@@6| T@U) (bx@@36 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@6|) TyType) (= (type |#$R@@6|) TyType)) (= (type bx@@36) BoxType)) ($IsBox bx@@36 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))) (and (= ($Box ($Unbox HandleTypeType bx@@36)) bx@@36) ($Is ($Unbox HandleTypeType bx@@36) (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|)))) :qid |unknown.0:0| :skolemid |755| :pattern ( ($IsBox bx@@36 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))) )))
(assert (forall ((|#$T0@@7| T@U) (|#$R@@7| T@U) (|f#0| T@U) ) (!  (=> (and (and (= (type |#$T0@@7|) TyType) (= (type |#$R@@7|) TyType)) (= (type |f#0|) HandleTypeType)) (= ($Is |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|))  (and ($Is |f#0| (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@7|)) (forall ((|x0#0| T@U) ) (!  (=> (and (= (type |x0#0|) BoxType) ($IsBox |x0#0| |#$T0@@7|)) (|Set#Equal| (Reads1 |#$T0@@7| |#$R@@7| $OneHeap |f#0| |x0#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |756| :no-pattern (type |x0#0|) :no-pattern (U_2_int |x0#0|) :no-pattern (U_2_bool |x0#0|) ))))) :qid |unknown.0:0| :skolemid |757| :pattern ( ($Is |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|))) )))
(assert (forall ((|#$T0@@8| T@U) (|#$R@@8| T@U) (|f#0@@0| T@U) ($h@@7 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@8|) TyType) (= (type |#$R@@8|) TyType)) (= (type |f#0@@0|) HandleTypeType)) (= (type $h@@7) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hFunc1 |#$T0@@8| |#$R@@8|) $h@@7))) :qid |unknown.0:0| :skolemid |758| :pattern ( ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|) $h@@7)) )))
(assert (forall ((arg0@@135 T@U) (arg1@@63 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1 arg0@@135 arg1@@63)) TyType) :qid |funType:Tclass._System.___hTotalFunc1| :pattern ( (Tclass._System.___hTotalFunc1 arg0@@135 arg1@@63)) )))
(assert (forall ((|#$T0@@9| T@U) (|#$R@@9| T@U) ) (!  (=> (and (= (type |#$T0@@9|) TyType) (= (type |#$R@@9|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) Tagclass._System.___hTotalFunc1) (= (TagFamily (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) |tytagFamily$_#TotalFunc1|))) :qid |unknown.0:0| :skolemid |759| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) )))
(assert (forall ((arg0@@136 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_0 arg0@@136)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_0| :pattern ( (Tclass._System.___hTotalFunc1_0 arg0@@136)) )))
(assert (forall ((|#$T0@@10| T@U) (|#$R@@10| T@U) ) (!  (=> (and (= (type |#$T0@@10|) TyType) (= (type |#$R@@10|) TyType)) (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@10| |#$R@@10|)) |#$T0@@10|)) :qid |unknown.0:0| :skolemid |760| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@10| |#$R@@10|)) )))
(assert (forall ((arg0@@137 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_1 arg0@@137)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_1| :pattern ( (Tclass._System.___hTotalFunc1_1 arg0@@137)) )))
(assert (forall ((|#$T0@@11| T@U) (|#$R@@11| T@U) ) (!  (=> (and (= (type |#$T0@@11|) TyType) (= (type |#$R@@11|) TyType)) (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) |#$R@@11|)) :qid |unknown.0:0| :skolemid |761| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) )))
(assert (forall ((|#$T0@@12| T@U) (|#$R@@12| T@U) (bx@@37 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@12|) TyType) (= (type |#$R@@12|) TyType)) (= (type bx@@37) BoxType)) ($IsBox bx@@37 (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|))) (and (= ($Box ($Unbox HandleTypeType bx@@37)) bx@@37) ($Is ($Unbox HandleTypeType bx@@37) (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|)))) :qid |unknown.0:0| :skolemid |762| :pattern ( ($IsBox bx@@37 (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|))) )))
(assert (forall ((|#$T0@@13| T@U) (|#$R@@13| T@U) (|f#0@@1| T@U) ) (!  (=> (and (and (= (type |#$T0@@13|) TyType) (= (type |#$R@@13|) TyType)) (= (type |f#0@@1|) HandleTypeType)) (= ($Is |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@13| |#$R@@13|))  (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|)) (forall ((|x0#0@@0| T@U) ) (!  (=> (and (= (type |x0#0@@0|) BoxType) ($IsBox |x0#0@@0| |#$T0@@13|)) (Requires1 |#$T0@@13| |#$R@@13| $OneHeap |f#0@@1| |x0#0@@0|)) :qid |unknown.0:0| :skolemid |763| :no-pattern (type |x0#0@@0|) :no-pattern (U_2_int |x0#0@@0|) :no-pattern (U_2_bool |x0#0@@0|) ))))) :qid |unknown.0:0| :skolemid |764| :pattern ( ($Is |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@13| |#$R@@13|))) )))
(assert (forall ((|#$T0@@14| T@U) (|#$R@@14| T@U) (|f#0@@2| T@U) ($h@@8 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@14|) TyType) (= (type |#$R@@14|) TyType)) (= (type |f#0@@2|) HandleTypeType)) (= (type $h@@8) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@14| |#$R@@14|) $h@@8))) :qid |unknown.0:0| :skolemid |765| :pattern ( ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|) $h@@8)) )))
(assert (forall ((arg0@@138 T@U) ) (! (= (type (Tclass._System.___hFunc0 arg0@@138)) TyType) :qid |funType:Tclass._System.___hFunc0| :pattern ( (Tclass._System.___hFunc0 arg0@@138)) )))
(assert (forall ((|#$R@@15| T@U) ) (!  (=> (= (type |#$R@@15|) TyType) (and (= (Tag (Tclass._System.___hFunc0 |#$R@@15|)) Tagclass._System.___hFunc0) (= (TagFamily (Tclass._System.___hFunc0 |#$R@@15|)) |tytagFamily$_#Func0|))) :qid |unknown.0:0| :skolemid |766| :pattern ( (Tclass._System.___hFunc0 |#$R@@15|)) )))
(assert (forall ((arg0@@139 T@U) ) (! (= (type (Tclass._System.___hFunc0_0 arg0@@139)) TyType) :qid |funType:Tclass._System.___hFunc0_0| :pattern ( (Tclass._System.___hFunc0_0 arg0@@139)) )))
(assert (forall ((|#$R@@16| T@U) ) (!  (=> (= (type |#$R@@16|) TyType) (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@16|)) |#$R@@16|)) :qid |unknown.0:0| :skolemid |767| :pattern ( (Tclass._System.___hFunc0 |#$R@@16|)) )))
(assert (forall ((|#$R@@17| T@U) (bx@@38 T@U) ) (!  (=> (and (and (= (type |#$R@@17|) TyType) (= (type bx@@38) BoxType)) ($IsBox bx@@38 (Tclass._System.___hFunc0 |#$R@@17|))) (and (= ($Box ($Unbox HandleTypeType bx@@38)) bx@@38) ($Is ($Unbox HandleTypeType bx@@38) (Tclass._System.___hFunc0 |#$R@@17|)))) :qid |unknown.0:0| :skolemid |768| :pattern ( ($IsBox bx@@38 (Tclass._System.___hFunc0 |#$R@@17|))) )))
(assert  (and (forall ((arg0@@140 T@U) (arg1@@64 T@U) (arg2@@16 T@U) ) (! (= (type (Apply0 arg0@@140 arg1@@64 arg2@@16)) BoxType) :qid |funType:Apply0| :pattern ( (Apply0 arg0@@140 arg1@@64 arg2@@16)) )) (forall ((arg0@@141 T@U) (arg1@@65 T@U) (arg2@@17 T@U) ) (! (= (type (Handle0 arg0@@141 arg1@@65 arg2@@17)) HandleTypeType) :qid |funType:Handle0| :pattern ( (Handle0 arg0@@141 arg1@@65 arg2@@17)) ))))
(assert (forall ((t0@@31 T@U) (heap@@7 T@U) (h@@27 T@U) (r@@10 T@U) (rd@@2 T@U) ) (!  (=> (and (and (and (and (= (type t0@@31) TyType) (= (type heap@@7) (MapType0Type refType MapType1Type))) (= (type h@@27) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@10) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@2) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (Apply0 t0@@31 heap@@7 (Handle0 h@@27 r@@10 rd@@2)) (MapType0Select h@@27 heap@@7))) :qid |unknown.0:0| :skolemid |769| :pattern ( (Apply0 t0@@31 heap@@7 (Handle0 h@@27 r@@10 rd@@2))) )))
(assert (forall ((t0@@32 T@U) (heap@@8 T@U) (h@@28 T@U) (r@@11 T@U) (rd@@3 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@32) TyType) (= (type heap@@8) (MapType0Type refType MapType1Type))) (= (type h@@28) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@11) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@3) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (U_2_bool (MapType0Select r@@11 heap@@8))) (Requires0 t0@@32 heap@@8 (Handle0 h@@28 r@@11 rd@@3))) :qid |unknown.0:0| :skolemid |770| :pattern ( (Requires0 t0@@32 heap@@8 (Handle0 h@@28 r@@11 rd@@3))) )))
(assert (forall ((arg0@@142 T@U) (arg1@@66 T@U) (arg2@@18 T@U) ) (! (= (type (Reads0 arg0@@142 arg1@@66 arg2@@18)) (MapType0Type BoxType boolType)) :qid |funType:Reads0| :pattern ( (Reads0 arg0@@142 arg1@@66 arg2@@18)) )))
(assert (forall ((t0@@33 T@U) (heap@@9 T@U) (h@@29 T@U) (r@@12 T@U) (rd@@4 T@U) (bx@@39 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@33) TyType) (= (type heap@@9) (MapType0Type refType MapType1Type))) (= (type h@@29) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@12) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@4) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (type bx@@39) BoxType)) (= (U_2_bool (MapType0Select (Reads0 t0@@33 heap@@9 (Handle0 h@@29 r@@12 rd@@4)) bx@@39)) (U_2_bool (MapType0Select (MapType0Select rd@@4 heap@@9) bx@@39)))) :qid |unknown.0:0| :skolemid |771| :pattern ( (MapType0Select (Reads0 t0@@33 heap@@9 (Handle0 h@@29 r@@12 rd@@4)) bx@@39)) )))
(assert (forall ((t0@@34 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@17 T@U) ) (!  (=> (and (and (and (and (= (type t0@@34) TyType) (= (type h0@@6) (MapType0Type refType MapType1Type))) (= (type h1@@6) (MapType0Type refType MapType1Type))) (= (type f@@17) HandleTypeType)) (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) ($Is f@@17 (Tclass._System.___hFunc0 t0@@34))) (forall ((o@@50 T@U) (fld@@5 T@U) ) (! (let ((a@@88 (FieldTypeInv0 (type fld@@5)))) (=> (and (and (= (type o@@50) refType) (= (type fld@@5) (FieldType a@@88))) (and (not (= o@@50 null)) (U_2_bool (MapType0Select (Reads0 t0@@34 h0@@6 f@@17) ($Box o@@50))))) (= (MapType1Select (MapType0Select h0@@6 o@@50) fld@@5) (MapType1Select (MapType0Select h1@@6 o@@50) fld@@5)))) :qid |unknown.0:0| :skolemid |772| :no-pattern (type o@@50) :no-pattern (type fld@@5) :no-pattern (U_2_int o@@50) :no-pattern (U_2_bool o@@50) :no-pattern (U_2_int fld@@5) :no-pattern (U_2_bool fld@@5) )))) (= (Reads0 t0@@34 h0@@6 f@@17) (Reads0 t0@@34 h1@@6 f@@17))) :qid |unknown.0:0| :skolemid |773| :pattern ( ($HeapSucc h0@@6 h1@@6) (Reads0 t0@@34 h1@@6 f@@17)) )))
(assert (forall ((t0@@35 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@18 T@U) ) (!  (=> (and (and (and (and (= (type t0@@35) TyType) (= (type h0@@7) (MapType0Type refType MapType1Type))) (= (type h1@@7) (MapType0Type refType MapType1Type))) (= (type f@@18) HandleTypeType)) (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) ($Is f@@18 (Tclass._System.___hFunc0 t0@@35))) (forall ((o@@51 T@U) (fld@@6 T@U) ) (! (let ((a@@89 (FieldTypeInv0 (type fld@@6)))) (=> (and (and (= (type o@@51) refType) (= (type fld@@6) (FieldType a@@89))) (and (not (= o@@51 null)) (U_2_bool (MapType0Select (Reads0 t0@@35 h1@@7 f@@18) ($Box o@@51))))) (= (MapType1Select (MapType0Select h0@@7 o@@51) fld@@6) (MapType1Select (MapType0Select h1@@7 o@@51) fld@@6)))) :qid |unknown.0:0| :skolemid |774| :no-pattern (type o@@51) :no-pattern (type fld@@6) :no-pattern (U_2_int o@@51) :no-pattern (U_2_bool o@@51) :no-pattern (U_2_int fld@@6) :no-pattern (U_2_bool fld@@6) )))) (= (Reads0 t0@@35 h0@@7 f@@18) (Reads0 t0@@35 h1@@7 f@@18))) :qid |unknown.0:0| :skolemid |775| :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads0 t0@@35 h1@@7 f@@18)) )))
(assert (forall ((t0@@36 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@19 T@U) ) (!  (=> (and (and (and (and (= (type t0@@36) TyType) (= (type h0@@8) (MapType0Type refType MapType1Type))) (= (type h1@@8) (MapType0Type refType MapType1Type))) (= (type f@@19) HandleTypeType)) (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) ($Is f@@19 (Tclass._System.___hFunc0 t0@@36))) (forall ((o@@52 T@U) (fld@@7 T@U) ) (! (let ((a@@90 (FieldTypeInv0 (type fld@@7)))) (=> (and (and (= (type o@@52) refType) (= (type fld@@7) (FieldType a@@90))) (and (not (= o@@52 null)) (U_2_bool (MapType0Select (Reads0 t0@@36 h0@@8 f@@19) ($Box o@@52))))) (= (MapType1Select (MapType0Select h0@@8 o@@52) fld@@7) (MapType1Select (MapType0Select h1@@8 o@@52) fld@@7)))) :qid |unknown.0:0| :skolemid |776| :no-pattern (type o@@52) :no-pattern (type fld@@7) :no-pattern (U_2_int o@@52) :no-pattern (U_2_bool o@@52) :no-pattern (U_2_int fld@@7) :no-pattern (U_2_bool fld@@7) )))) (= (Requires0 t0@@36 h0@@8 f@@19) (Requires0 t0@@36 h1@@8 f@@19))) :qid |unknown.0:0| :skolemid |777| :pattern ( ($HeapSucc h0@@8 h1@@8) (Requires0 t0@@36 h1@@8 f@@19)) )))
(assert (forall ((t0@@37 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@20 T@U) ) (!  (=> (and (and (and (and (= (type t0@@37) TyType) (= (type h0@@9) (MapType0Type refType MapType1Type))) (= (type h1@@9) (MapType0Type refType MapType1Type))) (= (type f@@20) HandleTypeType)) (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) ($Is f@@20 (Tclass._System.___hFunc0 t0@@37))) (forall ((o@@53 T@U) (fld@@8 T@U) ) (! (let ((a@@91 (FieldTypeInv0 (type fld@@8)))) (=> (and (and (= (type o@@53) refType) (= (type fld@@8) (FieldType a@@91))) (and (not (= o@@53 null)) (U_2_bool (MapType0Select (Reads0 t0@@37 h1@@9 f@@20) ($Box o@@53))))) (= (MapType1Select (MapType0Select h0@@9 o@@53) fld@@8) (MapType1Select (MapType0Select h1@@9 o@@53) fld@@8)))) :qid |unknown.0:0| :skolemid |778| :no-pattern (type o@@53) :no-pattern (type fld@@8) :no-pattern (U_2_int o@@53) :no-pattern (U_2_bool o@@53) :no-pattern (U_2_int fld@@8) :no-pattern (U_2_bool fld@@8) )))) (= (Requires0 t0@@37 h0@@9 f@@20) (Requires0 t0@@37 h1@@9 f@@20))) :qid |unknown.0:0| :skolemid |779| :pattern ( ($HeapSucc h0@@9 h1@@9) (Requires0 t0@@37 h1@@9 f@@20)) )))
(assert (forall ((t0@@38 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@21 T@U) ) (!  (=> (and (and (and (and (= (type t0@@38) TyType) (= (type h0@@10) (MapType0Type refType MapType1Type))) (= (type h1@@10) (MapType0Type refType MapType1Type))) (= (type f@@21) HandleTypeType)) (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) ($Is f@@21 (Tclass._System.___hFunc0 t0@@38))) (forall ((o@@54 T@U) (fld@@9 T@U) ) (! (let ((a@@92 (FieldTypeInv0 (type fld@@9)))) (=> (and (and (= (type o@@54) refType) (= (type fld@@9) (FieldType a@@92))) (and (not (= o@@54 null)) (U_2_bool (MapType0Select (Reads0 t0@@38 h0@@10 f@@21) ($Box o@@54))))) (= (MapType1Select (MapType0Select h0@@10 o@@54) fld@@9) (MapType1Select (MapType0Select h1@@10 o@@54) fld@@9)))) :qid |unknown.0:0| :skolemid |780| :no-pattern (type o@@54) :no-pattern (type fld@@9) :no-pattern (U_2_int o@@54) :no-pattern (U_2_bool o@@54) :no-pattern (U_2_int fld@@9) :no-pattern (U_2_bool fld@@9) )))) (= (Apply0 t0@@38 h0@@10 f@@21) (Apply0 t0@@38 h1@@10 f@@21))) :qid |unknown.0:0| :skolemid |781| :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply0 t0@@38 h1@@10 f@@21)) )))
(assert (forall ((t0@@39 T@U) (h0@@11 T@U) (h1@@11 T@U) (f@@22 T@U) ) (!  (=> (and (and (and (and (= (type t0@@39) TyType) (= (type h0@@11) (MapType0Type refType MapType1Type))) (= (type h1@@11) (MapType0Type refType MapType1Type))) (= (type f@@22) HandleTypeType)) (and (and (and ($HeapSucc h0@@11 h1@@11) (and ($IsGoodHeap h0@@11) ($IsGoodHeap h1@@11))) ($Is f@@22 (Tclass._System.___hFunc0 t0@@39))) (forall ((o@@55 T@U) (fld@@10 T@U) ) (! (let ((a@@93 (FieldTypeInv0 (type fld@@10)))) (=> (and (and (= (type o@@55) refType) (= (type fld@@10) (FieldType a@@93))) (and (not (= o@@55 null)) (U_2_bool (MapType0Select (Reads0 t0@@39 h1@@11 f@@22) ($Box o@@55))))) (= (MapType1Select (MapType0Select h0@@11 o@@55) fld@@10) (MapType1Select (MapType0Select h1@@11 o@@55) fld@@10)))) :qid |unknown.0:0| :skolemid |782| :no-pattern (type o@@55) :no-pattern (type fld@@10) :no-pattern (U_2_int o@@55) :no-pattern (U_2_bool o@@55) :no-pattern (U_2_int fld@@10) :no-pattern (U_2_bool fld@@10) )))) (= (Apply0 t0@@39 h0@@11 f@@22) (Apply0 t0@@39 h1@@11 f@@22))) :qid |unknown.0:0| :skolemid |783| :pattern ( ($HeapSucc h0@@11 h1@@11) (Apply0 t0@@39 h1@@11 f@@22)) )))
(assert (forall ((t0@@40 T@U) (heap@@10 T@U) (f@@23 T@U) ) (!  (=> (and (and (and (= (type t0@@40) TyType) (= (type heap@@10) (MapType0Type refType MapType1Type))) (= (type f@@23) HandleTypeType)) (and ($IsGoodHeap heap@@10) ($Is f@@23 (Tclass._System.___hFunc0 t0@@40)))) (= (|Set#Equal| (Reads0 t0@@40 $OneHeap f@@23) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@40 heap@@10 f@@23) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |784| :pattern ( (Reads0 t0@@40 $OneHeap f@@23) ($IsGoodHeap heap@@10)) :pattern ( (Reads0 t0@@40 heap@@10 f@@23)) )))
(assert (forall ((t0@@41 T@U) (heap@@11 T@U) (f@@24 T@U) ) (!  (=> (and (and (and (= (type t0@@41) TyType) (= (type heap@@11) (MapType0Type refType MapType1Type))) (= (type f@@24) HandleTypeType)) (and (and ($IsGoodHeap heap@@11) ($Is f@@24 (Tclass._System.___hFunc0 t0@@41))) (|Set#Equal| (Reads0 t0@@41 $OneHeap f@@24) (|Set#Empty| BoxType)))) (= (Requires0 t0@@41 $OneHeap f@@24) (Requires0 t0@@41 heap@@11 f@@24))) :qid |unknown.0:0| :skolemid |785| :pattern ( (Requires0 t0@@41 $OneHeap f@@24) ($IsGoodHeap heap@@11)) :pattern ( (Requires0 t0@@41 heap@@11 f@@24)) )))
(assert (forall ((f@@25 T@U) (t0@@42 T@U) ) (!  (=> (and (= (type f@@25) HandleTypeType) (= (type t0@@42) TyType)) (= ($Is f@@25 (Tclass._System.___hFunc0 t0@@42)) (forall ((h@@30 T@U) ) (!  (=> (= (type h@@30) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@30) (Requires0 t0@@42 h@@30 f@@25)) ($IsBox (Apply0 t0@@42 h@@30 f@@25) t0@@42))) :qid |DafnyPreludebpl.545:12| :skolemid |786| :pattern ( (Apply0 t0@@42 h@@30 f@@25)) )))) :qid |unknown.0:0| :skolemid |787| :pattern ( ($Is f@@25 (Tclass._System.___hFunc0 t0@@42))) )))
(assert (forall ((f@@26 T@U) (t0@@43 T@U) (u0@@0 T@U) ) (!  (=> (and (and (and (= (type f@@26) HandleTypeType) (= (type t0@@43) TyType)) (= (type u0@@0) TyType)) (and ($Is f@@26 (Tclass._System.___hFunc0 t0@@43)) (forall ((bx@@40 T@U) ) (!  (=> (and (= (type bx@@40) BoxType) ($IsBox bx@@40 t0@@43)) ($IsBox bx@@40 u0@@0)) :qid |unknown.0:0| :skolemid |788| :pattern ( ($IsBox bx@@40 t0@@43)) :pattern ( ($IsBox bx@@40 u0@@0)) )))) ($Is f@@26 (Tclass._System.___hFunc0 u0@@0))) :qid |unknown.0:0| :skolemid |789| :pattern ( ($Is f@@26 (Tclass._System.___hFunc0 t0@@43)) ($Is f@@26 (Tclass._System.___hFunc0 u0@@0))) )))
(assert (forall ((f@@27 T@U) (t0@@44 T@U) (h@@31 T@U) ) (!  (=> (and (and (and (= (type f@@27) HandleTypeType) (= (type t0@@44) TyType)) (= (type h@@31) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@31)) (= ($IsAlloc f@@27 (Tclass._System.___hFunc0 t0@@44) h@@31)  (=> (Requires0 t0@@44 h@@31 f@@27) (forall ((r@@13 T@U) ) (!  (=> (= (type r@@13) refType) (=> (and (not (= r@@13 null)) (U_2_bool (MapType0Select (Reads0 t0@@44 h@@31 f@@27) ($Box r@@13)))) (U_2_bool (MapType1Select (MapType0Select h@@31 r@@13) alloc)))) :qid |unknown.0:0| :skolemid |790| :pattern ( (MapType0Select (Reads0 t0@@44 h@@31 f@@27) ($Box r@@13))) ))))) :qid |unknown.0:0| :skolemid |791| :pattern ( ($IsAlloc f@@27 (Tclass._System.___hFunc0 t0@@44) h@@31)) )))
(assert (forall ((f@@28 T@U) (t0@@45 T@U) (h@@32 T@U) ) (!  (=> (and (and (and (and (= (type f@@28) HandleTypeType) (= (type t0@@45) TyType)) (= (type h@@32) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@32) ($IsAlloc f@@28 (Tclass._System.___hFunc0 t0@@45) h@@32))) (Requires0 t0@@45 h@@32 f@@28)) ($IsAllocBox (Apply0 t0@@45 h@@32 f@@28) t0@@45 h@@32)) :qid |unknown.0:0| :skolemid |792| :pattern ( ($IsAlloc f@@28 (Tclass._System.___hFunc0 t0@@45) h@@32)) )))
(assert (forall ((arg0@@143 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0 arg0@@143)) TyType) :qid |funType:Tclass._System.___hPartialFunc0| :pattern ( (Tclass._System.___hPartialFunc0 arg0@@143)) )))
(assert (forall ((|#$R@@18| T@U) ) (!  (=> (= (type |#$R@@18|) TyType) (and (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@18|)) Tagclass._System.___hPartialFunc0) (= (TagFamily (Tclass._System.___hPartialFunc0 |#$R@@18|)) |tytagFamily$_#PartialFunc0|))) :qid |unknown.0:0| :skolemid |793| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@18|)) )))
(assert (forall ((arg0@@144 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0_0 arg0@@144)) TyType) :qid |funType:Tclass._System.___hPartialFunc0_0| :pattern ( (Tclass._System.___hPartialFunc0_0 arg0@@144)) )))
(assert (forall ((|#$R@@19| T@U) ) (!  (=> (= (type |#$R@@19|) TyType) (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@19|)) |#$R@@19|)) :qid |unknown.0:0| :skolemid |794| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@19|)) )))
(assert (forall ((|#$R@@20| T@U) (bx@@41 T@U) ) (!  (=> (and (and (= (type |#$R@@20|) TyType) (= (type bx@@41) BoxType)) ($IsBox bx@@41 (Tclass._System.___hPartialFunc0 |#$R@@20|))) (and (= ($Box ($Unbox HandleTypeType bx@@41)) bx@@41) ($Is ($Unbox HandleTypeType bx@@41) (Tclass._System.___hPartialFunc0 |#$R@@20|)))) :qid |unknown.0:0| :skolemid |795| :pattern ( ($IsBox bx@@41 (Tclass._System.___hPartialFunc0 |#$R@@20|))) )))
(assert (forall ((|#$R@@21| T@U) (|f#0@@3| T@U) ) (!  (=> (and (= (type |#$R@@21|) TyType) (= (type |f#0@@3|) HandleTypeType)) (= ($Is |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@21|))  (and ($Is |f#0@@3| (Tclass._System.___hFunc0 |#$R@@21|)) (|Set#Equal| (Reads0 |#$R@@21| $OneHeap |f#0@@3|) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |796| :pattern ( ($Is |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@21|))) )))
(assert (forall ((|#$R@@22| T@U) (|f#0@@4| T@U) ($h@@9 T@U) ) (!  (=> (and (and (= (type |#$R@@22|) TyType) (= (type |f#0@@4|) HandleTypeType)) (= (type $h@@9) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc0 |#$R@@22|) $h@@9) ($IsAlloc |f#0@@4| (Tclass._System.___hFunc0 |#$R@@22|) $h@@9))) :qid |unknown.0:0| :skolemid |797| :pattern ( ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc0 |#$R@@22|) $h@@9)) )))
(assert (forall ((arg0@@145 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0 arg0@@145)) TyType) :qid |funType:Tclass._System.___hTotalFunc0| :pattern ( (Tclass._System.___hTotalFunc0 arg0@@145)) )))
(assert (forall ((|#$R@@23| T@U) ) (!  (=> (= (type |#$R@@23|) TyType) (and (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@23|)) Tagclass._System.___hTotalFunc0) (= (TagFamily (Tclass._System.___hTotalFunc0 |#$R@@23|)) |tytagFamily$_#TotalFunc0|))) :qid |unknown.0:0| :skolemid |798| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@23|)) )))
(assert (forall ((arg0@@146 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0_0 arg0@@146)) TyType) :qid |funType:Tclass._System.___hTotalFunc0_0| :pattern ( (Tclass._System.___hTotalFunc0_0 arg0@@146)) )))
(assert (forall ((|#$R@@24| T@U) ) (!  (=> (= (type |#$R@@24|) TyType) (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@24|)) |#$R@@24|)) :qid |unknown.0:0| :skolemid |799| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@24|)) )))
(assert (forall ((|#$R@@25| T@U) (bx@@42 T@U) ) (!  (=> (and (and (= (type |#$R@@25|) TyType) (= (type bx@@42) BoxType)) ($IsBox bx@@42 (Tclass._System.___hTotalFunc0 |#$R@@25|))) (and (= ($Box ($Unbox HandleTypeType bx@@42)) bx@@42) ($Is ($Unbox HandleTypeType bx@@42) (Tclass._System.___hTotalFunc0 |#$R@@25|)))) :qid |unknown.0:0| :skolemid |800| :pattern ( ($IsBox bx@@42 (Tclass._System.___hTotalFunc0 |#$R@@25|))) )))
(assert (forall ((|#$R@@26| T@U) (|f#0@@5| T@U) ) (!  (=> (and (= (type |#$R@@26|) TyType) (= (type |f#0@@5|) HandleTypeType)) (= ($Is |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|))  (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc0 |#$R@@26|)) (Requires0 |#$R@@26| $OneHeap |f#0@@5|)))) :qid |unknown.0:0| :skolemid |801| :pattern ( ($Is |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|))) )))
(assert (forall ((|#$R@@27| T@U) (|f#0@@6| T@U) ($h@@10 T@U) ) (!  (=> (and (and (= (type |#$R@@27|) TyType) (= (type |f#0@@6|) HandleTypeType)) (= (type $h@@10) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc0 |#$R@@27|) $h@@10) ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc0 |#$R@@27|) $h@@10))) :qid |unknown.0:0| :skolemid |802| :pattern ( ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc0 |#$R@@27|) $h@@10)) )))
(assert (= (type Tclass._System.__default) TyType))
(assert (= (Tag Tclass._System.__default) Tagclass._System.__default))
(assert (= (TagFamily Tclass._System.__default) tytagFamily$_default))
(assert (forall ((bx@@43 T@U) ) (!  (=> (and (= (type bx@@43) BoxType) ($IsBox bx@@43 Tclass._System.__default)) (and (= ($Box ($Unbox refType bx@@43)) bx@@43) ($Is ($Unbox refType bx@@43) Tclass._System.__default))) :qid |unknown.0:0| :skolemid |803| :pattern ( ($IsBox bx@@43 Tclass._System.__default)) )))
(assert (forall (($o@@7 T@U) ) (!  (=> (= (type $o@@7) refType) (= ($Is $o@@7 Tclass._System.__default)  (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default)))) :qid |unknown.0:0| :skolemid |804| :pattern ( ($Is $o@@7 Tclass._System.__default)) )))
(assert (forall (($o@@8 T@U) ($h@@11 T@U) ) (!  (=> (and (= (type $o@@8) refType) (= (type $h@@11) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@8 Tclass._System.__default $h@@11)  (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@11 $o@@8) alloc))))) :qid |unknown.0:0| :skolemid |805| :pattern ( ($IsAlloc $o@@8 Tclass._System.__default $h@@11)) )))
(assert  (=> true (forall ((|#$A| T@U) (|#$B| T@U) (|a#0| T@U) (|b#0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A|) TyType) (= (type |#$B|) TyType)) (= (type |a#0|) BoxType)) (= (type |b#0|) BoxType)) (or (|_System.__default.rank__is__less__than#canCall| |#$A| |#$B| |a#0| |b#0|) (and ($IsBox |a#0| |#$A|) ($IsBox |b#0| |#$B|)))) true) :qid |unknown.0:0| :skolemid |806| :pattern ( (_System.__default.rank__is__less__than |#$A| |#$B| |a#0| |b#0|)) ))))
(assert (forall ((|#$A@@0| T@U) (|#$B@@0| T@U) (|a#0@@0| T@U) (|b#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A@@0|) TyType) (= (type |#$B@@0|) TyType)) (= (type |a#0@@0|) BoxType)) (= (type |b#0@@0|) BoxType)) (and ($IsBox |a#0@@0| |#$A@@0|) ($IsBox |b#0@@0| |#$B@@0|))) (= (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|) true)) :qid |unknown.0:0| :skolemid |807| :pattern ( (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)) )))
(assert (forall ((arg0@@147 T@U) (arg1@@67 T@U) (arg2@@19 T@U) ) (! (= (type (Tclass._System.___hFunc2 arg0@@147 arg1@@67 arg2@@19)) TyType) :qid |funType:Tclass._System.___hFunc2| :pattern ( (Tclass._System.___hFunc2 arg0@@147 arg1@@67 arg2@@19)) )))
(assert (forall ((|#$T0@@15| T@U) (|#$T1| T@U) (|#$R@@28| T@U) ) (!  (=> (and (and (= (type |#$T0@@15|) TyType) (= (type |#$T1|) TyType)) (= (type |#$R@@28|) TyType)) (and (= (Tag (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) Tagclass._System.___hFunc2) (= (TagFamily (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) |tytagFamily$_#Func2|))) :qid |unknown.0:0| :skolemid |808| :pattern ( (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) )))
(assert (forall ((arg0@@148 T@U) ) (! (= (type (Tclass._System.___hFunc2_0 arg0@@148)) TyType) :qid |funType:Tclass._System.___hFunc2_0| :pattern ( (Tclass._System.___hFunc2_0 arg0@@148)) )))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@0| T@U) (|#$R@@29| T@U) ) (!  (=> (and (and (= (type |#$T0@@16|) TyType) (= (type |#$T1@@0|) TyType)) (= (type |#$R@@29|) TyType)) (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@0| |#$R@@29|)) |#$T0@@16|)) :qid |unknown.0:0| :skolemid |809| :pattern ( (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@0| |#$R@@29|)) )))
(assert (forall ((arg0@@149 T@U) ) (! (= (type (Tclass._System.___hFunc2_1 arg0@@149)) TyType) :qid |funType:Tclass._System.___hFunc2_1| :pattern ( (Tclass._System.___hFunc2_1 arg0@@149)) )))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@1| T@U) (|#$R@@30| T@U) ) (!  (=> (and (and (= (type |#$T0@@17|) TyType) (= (type |#$T1@@1|) TyType)) (= (type |#$R@@30|) TyType)) (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@17| |#$T1@@1| |#$R@@30|)) |#$T1@@1|)) :qid |unknown.0:0| :skolemid |810| :pattern ( (Tclass._System.___hFunc2 |#$T0@@17| |#$T1@@1| |#$R@@30|)) )))
(assert (forall ((arg0@@150 T@U) ) (! (= (type (Tclass._System.___hFunc2_2 arg0@@150)) TyType) :qid |funType:Tclass._System.___hFunc2_2| :pattern ( (Tclass._System.___hFunc2_2 arg0@@150)) )))
(assert (forall ((|#$T0@@18| T@U) (|#$T1@@2| T@U) (|#$R@@31| T@U) ) (!  (=> (and (and (= (type |#$T0@@18|) TyType) (= (type |#$T1@@2|) TyType)) (= (type |#$R@@31|) TyType)) (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@18| |#$T1@@2| |#$R@@31|)) |#$R@@31|)) :qid |unknown.0:0| :skolemid |811| :pattern ( (Tclass._System.___hFunc2 |#$T0@@18| |#$T1@@2| |#$R@@31|)) )))
(assert (forall ((|#$T0@@19| T@U) (|#$T1@@3| T@U) (|#$R@@32| T@U) (bx@@44 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@19|) TyType) (= (type |#$T1@@3|) TyType)) (= (type |#$R@@32|) TyType)) (= (type bx@@44) BoxType)) ($IsBox bx@@44 (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|))) (and (= ($Box ($Unbox HandleTypeType bx@@44)) bx@@44) ($Is ($Unbox HandleTypeType bx@@44) (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|)))) :qid |unknown.0:0| :skolemid |812| :pattern ( ($IsBox bx@@44 (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@151 T@T) (arg1@@68 T@T) (arg2@@20 T@T) (arg3@@3 T@T) ) (! (= (Ctor (MapType3Type arg0@@151 arg1@@68 arg2@@20 arg3@@3)) 26) :qid |ctor:MapType3Type| )) (forall ((arg0@@152 T@T) (arg1@@69 T@T) (arg2@@21 T@T) (arg3@@4 T@T) ) (! (= (MapType3TypeInv0 (MapType3Type arg0@@152 arg1@@69 arg2@@21 arg3@@4)) arg0@@152) :qid |typeInv:MapType3TypeInv0| :pattern ( (MapType3Type arg0@@152 arg1@@69 arg2@@21 arg3@@4)) ))) (forall ((arg0@@153 T@T) (arg1@@70 T@T) (arg2@@22 T@T) (arg3@@5 T@T) ) (! (= (MapType3TypeInv1 (MapType3Type arg0@@153 arg1@@70 arg2@@22 arg3@@5)) arg1@@70) :qid |typeInv:MapType3TypeInv1| :pattern ( (MapType3Type arg0@@153 arg1@@70 arg2@@22 arg3@@5)) ))) (forall ((arg0@@154 T@T) (arg1@@71 T@T) (arg2@@23 T@T) (arg3@@6 T@T) ) (! (= (MapType3TypeInv2 (MapType3Type arg0@@154 arg1@@71 arg2@@23 arg3@@6)) arg2@@23) :qid |typeInv:MapType3TypeInv2| :pattern ( (MapType3Type arg0@@154 arg1@@71 arg2@@23 arg3@@6)) ))) (forall ((arg0@@155 T@T) (arg1@@72 T@T) (arg2@@24 T@T) (arg3@@7 T@T) ) (! (= (MapType3TypeInv3 (MapType3Type arg0@@155 arg1@@72 arg2@@24 arg3@@7)) arg3@@7) :qid |typeInv:MapType3TypeInv3| :pattern ( (MapType3Type arg0@@155 arg1@@72 arg2@@24 arg3@@7)) ))) (forall ((arg0@@156 T@U) (arg1@@73 T@U) (arg2@@25 T@U) (arg3@@8 T@U) ) (! (let ((aVar3 (MapType3TypeInv3 (type arg0@@156)))) (= (type (MapType3Select arg0@@156 arg1@@73 arg2@@25 arg3@@8)) aVar3)) :qid |funType:MapType3Select| :pattern ( (MapType3Select arg0@@156 arg1@@73 arg2@@25 arg3@@8)) ))) (forall ((arg0@@157 T@U) (arg1@@74 T@U) (arg2@@26 T@U) (arg3@@9 T@U) (arg4@@1 T@U) ) (! (let ((aVar3@@0 (type arg4@@1))) (let ((aVar2@@2 (type arg3@@9))) (let ((aVar1@@3 (type arg2@@26))) (let ((aVar0@@1 (type arg1@@74))) (= (type (MapType3Store arg0@@157 arg1@@74 arg2@@26 arg3@@9 arg4@@1)) (MapType3Type aVar0@@1 aVar1@@3 aVar2@@2 aVar3@@0)))))) :qid |funType:MapType3Store| :pattern ( (MapType3Store arg0@@157 arg1@@74 arg2@@26 arg3@@9 arg4@@1)) ))) (forall ((m@@49 T@U) (x0@@9 T@U) (x1@@3 T@U) (x2 T@U) (val@@10 T@U) ) (! (let ((aVar3@@1 (MapType3TypeInv3 (type m@@49)))) (=> (= (type val@@10) aVar3@@1) (= (MapType3Select (MapType3Store m@@49 x0@@9 x1@@3 x2 val@@10) x0@@9 x1@@3 x2) val@@10))) :qid |mapAx0:MapType3Select| :weight 0 ))) (and (and (and (forall ((val@@11 T@U) (m@@50 T@U) (x0@@10 T@U) (x1@@4 T@U) (x2@@0 T@U) (y0@@6 T@U) (y1@@2 T@U) (y2 T@U) ) (!  (or (= x0@@10 y0@@6) (= (MapType3Select (MapType3Store m@@50 x0@@10 x1@@4 x2@@0 val@@11) y0@@6 y1@@2 y2) (MapType3Select m@@50 y0@@6 y1@@2 y2))) :qid |mapAx1:MapType3Select:0| :weight 0 )) (forall ((val@@12 T@U) (m@@51 T@U) (x0@@11 T@U) (x1@@5 T@U) (x2@@1 T@U) (y0@@7 T@U) (y1@@3 T@U) (y2@@0 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType3Select (MapType3Store m@@51 x0@@11 x1@@5 x2@@1 val@@12) y0@@7 y1@@3 y2@@0) (MapType3Select m@@51 y0@@7 y1@@3 y2@@0))) :qid |mapAx1:MapType3Select:1| :weight 0 ))) (forall ((val@@13 T@U) (m@@52 T@U) (x0@@12 T@U) (x1@@6 T@U) (x2@@2 T@U) (y0@@8 T@U) (y1@@4 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType3Select (MapType3Store m@@52 x0@@12 x1@@6 x2@@2 val@@13) y0@@8 y1@@4 y2@@1) (MapType3Select m@@52 y0@@8 y1@@4 y2@@1))) :qid |mapAx1:MapType3Select:2| :weight 0 ))) (forall ((val@@14 T@U) (m@@53 T@U) (x0@@13 T@U) (x1@@7 T@U) (x2@@3 T@U) (y0@@9 T@U) (y1@@5 T@U) (y2@@2 T@U) ) (!  (or true (= (MapType3Select (MapType3Store m@@53 x0@@13 x1@@7 x2@@3 val@@14) y0@@9 y1@@5 y2@@2) (MapType3Select m@@53 y0@@9 y1@@5 y2@@2))) :qid |mapAx2:MapType3Select| :weight 0 )))) (forall ((arg0@@158 T@U) (arg1@@75 T@U) (arg2@@27 T@U) (arg3@@10 T@U) (arg4@@2 T@U) (arg5 T@U) (arg6 T@U) ) (! (= (type (Apply2 arg0@@158 arg1@@75 arg2@@27 arg3@@10 arg4@@2 arg5 arg6)) BoxType) :qid |funType:Apply2| :pattern ( (Apply2 arg0@@158 arg1@@75 arg2@@27 arg3@@10 arg4@@2 arg5 arg6)) ))) (forall ((arg0@@159 T@U) (arg1@@76 T@U) (arg2@@28 T@U) ) (! (= (type (Handle2 arg0@@159 arg1@@76 arg2@@28)) HandleTypeType) :qid |funType:Handle2| :pattern ( (Handle2 arg0@@159 arg1@@76 arg2@@28)) ))))
(assert (forall ((t0@@46 T@U) (t1@@22 T@U) (t2 T@U) (heap@@12 T@U) (h@@33 T@U) (r@@14 T@U) (rd@@5 T@U) (bx0@@13 T@U) (bx1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@46) TyType) (= (type t1@@22) TyType)) (= (type t2) TyType)) (= (type heap@@12) (MapType0Type refType MapType1Type))) (= (type h@@33) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@14) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@5) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@13) BoxType)) (= (type bx1) BoxType)) (= (Apply2 t0@@46 t1@@22 t2 heap@@12 (Handle2 h@@33 r@@14 rd@@5) bx0@@13 bx1) (MapType3Select h@@33 heap@@12 bx0@@13 bx1))) :qid |unknown.0:0| :skolemid |813| :pattern ( (Apply2 t0@@46 t1@@22 t2 heap@@12 (Handle2 h@@33 r@@14 rd@@5) bx0@@13 bx1)) )))
(assert (forall ((t0@@47 T@U) (t1@@23 T@U) (t2@@0 T@U) (heap@@13 T@U) (h@@34 T@U) (r@@15 T@U) (rd@@6 T@U) (bx0@@14 T@U) (bx1@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@47) TyType) (= (type t1@@23) TyType)) (= (type t2@@0) TyType)) (= (type heap@@13) (MapType0Type refType MapType1Type))) (= (type h@@34) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@15) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@6) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@14) BoxType)) (= (type bx1@@0) BoxType)) (U_2_bool (MapType3Select r@@15 heap@@13 bx0@@14 bx1@@0))) (Requires2 t0@@47 t1@@23 t2@@0 heap@@13 (Handle2 h@@34 r@@15 rd@@6) bx0@@14 bx1@@0)) :qid |unknown.0:0| :skolemid |814| :pattern ( (Requires2 t0@@47 t1@@23 t2@@0 heap@@13 (Handle2 h@@34 r@@15 rd@@6) bx0@@14 bx1@@0)) )))
(assert (forall ((arg0@@160 T@U) (arg1@@77 T@U) (arg2@@29 T@U) (arg3@@11 T@U) (arg4@@3 T@U) (arg5@@0 T@U) (arg6@@0 T@U) ) (! (= (type (Reads2 arg0@@160 arg1@@77 arg2@@29 arg3@@11 arg4@@3 arg5@@0 arg6@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads2| :pattern ( (Reads2 arg0@@160 arg1@@77 arg2@@29 arg3@@11 arg4@@3 arg5@@0 arg6@@0)) )))
(assert (forall ((t0@@48 T@U) (t1@@24 T@U) (t2@@1 T@U) (heap@@14 T@U) (h@@35 T@U) (r@@16 T@U) (rd@@7 T@U) (bx0@@15 T@U) (bx1@@1 T@U) (bx@@45 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@48) TyType) (= (type t1@@24) TyType)) (= (type t2@@1) TyType)) (= (type heap@@14) (MapType0Type refType MapType1Type))) (= (type h@@35) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@16) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@7) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@15) BoxType)) (= (type bx1@@1) BoxType)) (= (type bx@@45) BoxType)) (= (U_2_bool (MapType0Select (Reads2 t0@@48 t1@@24 t2@@1 heap@@14 (Handle2 h@@35 r@@16 rd@@7) bx0@@15 bx1@@1) bx@@45)) (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@14 bx0@@15 bx1@@1) bx@@45)))) :qid |unknown.0:0| :skolemid |815| :pattern ( (MapType0Select (Reads2 t0@@48 t1@@24 t2@@1 heap@@14 (Handle2 h@@35 r@@16 rd@@7) bx0@@15 bx1@@1) bx@@45)) )))
(assert (forall ((t0@@49 T@U) (t1@@25 T@U) (t2@@2 T@U) (h0@@12 T@U) (h1@@12 T@U) (f@@29 T@U) (bx0@@16 T@U) (bx1@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@49) TyType) (= (type t1@@25) TyType)) (= (type t2@@2) TyType)) (= (type h0@@12) (MapType0Type refType MapType1Type))) (= (type h1@@12) (MapType0Type refType MapType1Type))) (= (type f@@29) HandleTypeType)) (= (type bx0@@16) BoxType)) (= (type bx1@@2) BoxType)) (and (and (and ($HeapSucc h0@@12 h1@@12) (and ($IsGoodHeap h0@@12) ($IsGoodHeap h1@@12))) (and (and ($IsBox bx0@@16 t0@@49) ($IsBox bx1@@2 t1@@25)) ($Is f@@29 (Tclass._System.___hFunc2 t0@@49 t1@@25 t2@@2)))) (forall ((o@@56 T@U) (fld@@11 T@U) ) (! (let ((a@@94 (FieldTypeInv0 (type fld@@11)))) (=> (and (and (= (type o@@56) refType) (= (type fld@@11) (FieldType a@@94))) (and (not (= o@@56 null)) (U_2_bool (MapType0Select (Reads2 t0@@49 t1@@25 t2@@2 h0@@12 f@@29 bx0@@16 bx1@@2) ($Box o@@56))))) (= (MapType1Select (MapType0Select h0@@12 o@@56) fld@@11) (MapType1Select (MapType0Select h1@@12 o@@56) fld@@11)))) :qid |unknown.0:0| :skolemid |816| :no-pattern (type o@@56) :no-pattern (type fld@@11) :no-pattern (U_2_int o@@56) :no-pattern (U_2_bool o@@56) :no-pattern (U_2_int fld@@11) :no-pattern (U_2_bool fld@@11) )))) (= (Reads2 t0@@49 t1@@25 t2@@2 h0@@12 f@@29 bx0@@16 bx1@@2) (Reads2 t0@@49 t1@@25 t2@@2 h1@@12 f@@29 bx0@@16 bx1@@2))) :qid |unknown.0:0| :skolemid |817| :pattern ( ($HeapSucc h0@@12 h1@@12) (Reads2 t0@@49 t1@@25 t2@@2 h1@@12 f@@29 bx0@@16 bx1@@2)) )))
(assert (forall ((t0@@50 T@U) (t1@@26 T@U) (t2@@3 T@U) (h0@@13 T@U) (h1@@13 T@U) (f@@30 T@U) (bx0@@17 T@U) (bx1@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@50) TyType) (= (type t1@@26) TyType)) (= (type t2@@3) TyType)) (= (type h0@@13) (MapType0Type refType MapType1Type))) (= (type h1@@13) (MapType0Type refType MapType1Type))) (= (type f@@30) HandleTypeType)) (= (type bx0@@17) BoxType)) (= (type bx1@@3) BoxType)) (and (and (and ($HeapSucc h0@@13 h1@@13) (and ($IsGoodHeap h0@@13) ($IsGoodHeap h1@@13))) (and (and ($IsBox bx0@@17 t0@@50) ($IsBox bx1@@3 t1@@26)) ($Is f@@30 (Tclass._System.___hFunc2 t0@@50 t1@@26 t2@@3)))) (forall ((o@@57 T@U) (fld@@12 T@U) ) (! (let ((a@@95 (FieldTypeInv0 (type fld@@12)))) (=> (and (and (= (type o@@57) refType) (= (type fld@@12) (FieldType a@@95))) (and (not (= o@@57 null)) (U_2_bool (MapType0Select (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3) ($Box o@@57))))) (= (MapType1Select (MapType0Select h0@@13 o@@57) fld@@12) (MapType1Select (MapType0Select h1@@13 o@@57) fld@@12)))) :qid |unknown.0:0| :skolemid |818| :no-pattern (type o@@57) :no-pattern (type fld@@12) :no-pattern (U_2_int o@@57) :no-pattern (U_2_bool o@@57) :no-pattern (U_2_int fld@@12) :no-pattern (U_2_bool fld@@12) )))) (= (Reads2 t0@@50 t1@@26 t2@@3 h0@@13 f@@30 bx0@@17 bx1@@3) (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3))) :qid |unknown.0:0| :skolemid |819| :pattern ( ($HeapSucc h0@@13 h1@@13) (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3)) )))
(assert (forall ((t0@@51 T@U) (t1@@27 T@U) (t2@@4 T@U) (h0@@14 T@U) (h1@@14 T@U) (f@@31 T@U) (bx0@@18 T@U) (bx1@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@51) TyType) (= (type t1@@27) TyType)) (= (type t2@@4) TyType)) (= (type h0@@14) (MapType0Type refType MapType1Type))) (= (type h1@@14) (MapType0Type refType MapType1Type))) (= (type f@@31) HandleTypeType)) (= (type bx0@@18) BoxType)) (= (type bx1@@4) BoxType)) (and (and (and ($HeapSucc h0@@14 h1@@14) (and ($IsGoodHeap h0@@14) ($IsGoodHeap h1@@14))) (and (and ($IsBox bx0@@18 t0@@51) ($IsBox bx1@@4 t1@@27)) ($Is f@@31 (Tclass._System.___hFunc2 t0@@51 t1@@27 t2@@4)))) (forall ((o@@58 T@U) (fld@@13 T@U) ) (! (let ((a@@96 (FieldTypeInv0 (type fld@@13)))) (=> (and (and (= (type o@@58) refType) (= (type fld@@13) (FieldType a@@96))) (and (not (= o@@58 null)) (U_2_bool (MapType0Select (Reads2 t0@@51 t1@@27 t2@@4 h0@@14 f@@31 bx0@@18 bx1@@4) ($Box o@@58))))) (= (MapType1Select (MapType0Select h0@@14 o@@58) fld@@13) (MapType1Select (MapType0Select h1@@14 o@@58) fld@@13)))) :qid |unknown.0:0| :skolemid |820| :no-pattern (type o@@58) :no-pattern (type fld@@13) :no-pattern (U_2_int o@@58) :no-pattern (U_2_bool o@@58) :no-pattern (U_2_int fld@@13) :no-pattern (U_2_bool fld@@13) )))) (= (Requires2 t0@@51 t1@@27 t2@@4 h0@@14 f@@31 bx0@@18 bx1@@4) (Requires2 t0@@51 t1@@27 t2@@4 h1@@14 f@@31 bx0@@18 bx1@@4))) :qid |unknown.0:0| :skolemid |821| :pattern ( ($HeapSucc h0@@14 h1@@14) (Requires2 t0@@51 t1@@27 t2@@4 h1@@14 f@@31 bx0@@18 bx1@@4)) )))
(assert (forall ((t0@@52 T@U) (t1@@28 T@U) (t2@@5 T@U) (h0@@15 T@U) (h1@@15 T@U) (f@@32 T@U) (bx0@@19 T@U) (bx1@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@52) TyType) (= (type t1@@28) TyType)) (= (type t2@@5) TyType)) (= (type h0@@15) (MapType0Type refType MapType1Type))) (= (type h1@@15) (MapType0Type refType MapType1Type))) (= (type f@@32) HandleTypeType)) (= (type bx0@@19) BoxType)) (= (type bx1@@5) BoxType)) (and (and (and ($HeapSucc h0@@15 h1@@15) (and ($IsGoodHeap h0@@15) ($IsGoodHeap h1@@15))) (and (and ($IsBox bx0@@19 t0@@52) ($IsBox bx1@@5 t1@@28)) ($Is f@@32 (Tclass._System.___hFunc2 t0@@52 t1@@28 t2@@5)))) (forall ((o@@59 T@U) (fld@@14 T@U) ) (! (let ((a@@97 (FieldTypeInv0 (type fld@@14)))) (=> (and (and (= (type o@@59) refType) (= (type fld@@14) (FieldType a@@97))) (and (not (= o@@59 null)) (U_2_bool (MapType0Select (Reads2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5) ($Box o@@59))))) (= (MapType1Select (MapType0Select h0@@15 o@@59) fld@@14) (MapType1Select (MapType0Select h1@@15 o@@59) fld@@14)))) :qid |unknown.0:0| :skolemid |822| :no-pattern (type o@@59) :no-pattern (type fld@@14) :no-pattern (U_2_int o@@59) :no-pattern (U_2_bool o@@59) :no-pattern (U_2_int fld@@14) :no-pattern (U_2_bool fld@@14) )))) (= (Requires2 t0@@52 t1@@28 t2@@5 h0@@15 f@@32 bx0@@19 bx1@@5) (Requires2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5))) :qid |unknown.0:0| :skolemid |823| :pattern ( ($HeapSucc h0@@15 h1@@15) (Requires2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5)) )))
(assert (forall ((t0@@53 T@U) (t1@@29 T@U) (t2@@6 T@U) (h0@@16 T@U) (h1@@16 T@U) (f@@33 T@U) (bx0@@20 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@53) TyType) (= (type t1@@29) TyType)) (= (type t2@@6) TyType)) (= (type h0@@16) (MapType0Type refType MapType1Type))) (= (type h1@@16) (MapType0Type refType MapType1Type))) (= (type f@@33) HandleTypeType)) (= (type bx0@@20) BoxType)) (= (type bx1@@6) BoxType)) (and (and (and ($HeapSucc h0@@16 h1@@16) (and ($IsGoodHeap h0@@16) ($IsGoodHeap h1@@16))) (and (and ($IsBox bx0@@20 t0@@53) ($IsBox bx1@@6 t1@@29)) ($Is f@@33 (Tclass._System.___hFunc2 t0@@53 t1@@29 t2@@6)))) (forall ((o@@60 T@U) (fld@@15 T@U) ) (! (let ((a@@98 (FieldTypeInv0 (type fld@@15)))) (=> (and (and (= (type o@@60) refType) (= (type fld@@15) (FieldType a@@98))) (and (not (= o@@60 null)) (U_2_bool (MapType0Select (Reads2 t0@@53 t1@@29 t2@@6 h0@@16 f@@33 bx0@@20 bx1@@6) ($Box o@@60))))) (= (MapType1Select (MapType0Select h0@@16 o@@60) fld@@15) (MapType1Select (MapType0Select h1@@16 o@@60) fld@@15)))) :qid |unknown.0:0| :skolemid |824| :no-pattern (type o@@60) :no-pattern (type fld@@15) :no-pattern (U_2_int o@@60) :no-pattern (U_2_bool o@@60) :no-pattern (U_2_int fld@@15) :no-pattern (U_2_bool fld@@15) )))) (= (Apply2 t0@@53 t1@@29 t2@@6 h0@@16 f@@33 bx0@@20 bx1@@6) (Apply2 t0@@53 t1@@29 t2@@6 h1@@16 f@@33 bx0@@20 bx1@@6))) :qid |unknown.0:0| :skolemid |825| :pattern ( ($HeapSucc h0@@16 h1@@16) (Apply2 t0@@53 t1@@29 t2@@6 h1@@16 f@@33 bx0@@20 bx1@@6)) )))
(assert (forall ((t0@@54 T@U) (t1@@30 T@U) (t2@@7 T@U) (h0@@17 T@U) (h1@@17 T@U) (f@@34 T@U) (bx0@@21 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@54) TyType) (= (type t1@@30) TyType)) (= (type t2@@7) TyType)) (= (type h0@@17) (MapType0Type refType MapType1Type))) (= (type h1@@17) (MapType0Type refType MapType1Type))) (= (type f@@34) HandleTypeType)) (= (type bx0@@21) BoxType)) (= (type bx1@@7) BoxType)) (and (and (and ($HeapSucc h0@@17 h1@@17) (and ($IsGoodHeap h0@@17) ($IsGoodHeap h1@@17))) (and (and ($IsBox bx0@@21 t0@@54) ($IsBox bx1@@7 t1@@30)) ($Is f@@34 (Tclass._System.___hFunc2 t0@@54 t1@@30 t2@@7)))) (forall ((o@@61 T@U) (fld@@16 T@U) ) (! (let ((a@@99 (FieldTypeInv0 (type fld@@16)))) (=> (and (and (= (type o@@61) refType) (= (type fld@@16) (FieldType a@@99))) (and (not (= o@@61 null)) (U_2_bool (MapType0Select (Reads2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7) ($Box o@@61))))) (= (MapType1Select (MapType0Select h0@@17 o@@61) fld@@16) (MapType1Select (MapType0Select h1@@17 o@@61) fld@@16)))) :qid |unknown.0:0| :skolemid |826| :no-pattern (type o@@61) :no-pattern (type fld@@16) :no-pattern (U_2_int o@@61) :no-pattern (U_2_bool o@@61) :no-pattern (U_2_int fld@@16) :no-pattern (U_2_bool fld@@16) )))) (= (Apply2 t0@@54 t1@@30 t2@@7 h0@@17 f@@34 bx0@@21 bx1@@7) (Apply2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7))) :qid |unknown.0:0| :skolemid |827| :pattern ( ($HeapSucc h0@@17 h1@@17) (Apply2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7)) )))
(assert (forall ((t0@@55 T@U) (t1@@31 T@U) (t2@@8 T@U) (heap@@15 T@U) (f@@35 T@U) (bx0@@22 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@55) TyType) (= (type t1@@31) TyType)) (= (type t2@@8) TyType)) (= (type heap@@15) (MapType0Type refType MapType1Type))) (= (type f@@35) HandleTypeType)) (= (type bx0@@22) BoxType)) (= (type bx1@@8) BoxType)) (and ($IsGoodHeap heap@@15) (and (and ($IsBox bx0@@22 t0@@55) ($IsBox bx1@@8 t1@@31)) ($Is f@@35 (Tclass._System.___hFunc2 t0@@55 t1@@31 t2@@8))))) (= (|Set#Equal| (Reads2 t0@@55 t1@@31 t2@@8 $OneHeap f@@35 bx0@@22 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@55 t1@@31 t2@@8 heap@@15 f@@35 bx0@@22 bx1@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |828| :pattern ( (Reads2 t0@@55 t1@@31 t2@@8 $OneHeap f@@35 bx0@@22 bx1@@8) ($IsGoodHeap heap@@15)) :pattern ( (Reads2 t0@@55 t1@@31 t2@@8 heap@@15 f@@35 bx0@@22 bx1@@8)) )))
(assert (forall ((t0@@56 T@U) (t1@@32 T@U) (t2@@9 T@U) (heap@@16 T@U) (f@@36 T@U) (bx0@@23 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@56) TyType) (= (type t1@@32) TyType)) (= (type t2@@9) TyType)) (= (type heap@@16) (MapType0Type refType MapType1Type))) (= (type f@@36) HandleTypeType)) (= (type bx0@@23) BoxType)) (= (type bx1@@9) BoxType)) (and (and ($IsGoodHeap heap@@16) (and (and ($IsBox bx0@@23 t0@@56) ($IsBox bx1@@9 t1@@32)) ($Is f@@36 (Tclass._System.___hFunc2 t0@@56 t1@@32 t2@@9)))) (|Set#Equal| (Reads2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) (|Set#Empty| BoxType)))) (= (Requires2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) (Requires2 t0@@56 t1@@32 t2@@9 heap@@16 f@@36 bx0@@23 bx1@@9))) :qid |unknown.0:0| :skolemid |829| :pattern ( (Requires2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) ($IsGoodHeap heap@@16)) :pattern ( (Requires2 t0@@56 t1@@32 t2@@9 heap@@16 f@@36 bx0@@23 bx1@@9)) )))
(assert (forall ((f@@37 T@U) (t0@@57 T@U) (t1@@33 T@U) (t2@@10 T@U) ) (!  (=> (and (and (and (= (type f@@37) HandleTypeType) (= (type t0@@57) TyType)) (= (type t1@@33) TyType)) (= (type t2@@10) TyType)) (= ($Is f@@37 (Tclass._System.___hFunc2 t0@@57 t1@@33 t2@@10)) (forall ((h@@36 T@U) (bx0@@24 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and (= (type h@@36) (MapType0Type refType MapType1Type)) (= (type bx0@@24) BoxType)) (= (type bx1@@10) BoxType)) (and (and ($IsGoodHeap h@@36) (and ($IsBox bx0@@24 t0@@57) ($IsBox bx1@@10 t1@@33))) (Requires2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10))) ($IsBox (Apply2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10) t2@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |830| :pattern ( (Apply2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10)) )))) :qid |unknown.0:0| :skolemid |831| :pattern ( ($Is f@@37 (Tclass._System.___hFunc2 t0@@57 t1@@33 t2@@10))) )))
(assert (forall ((f@@38 T@U) (t0@@58 T@U) (t1@@34 T@U) (t2@@11 T@U) (u0@@1 T@U) (u1@@0 T@U) (u2 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@38) HandleTypeType) (= (type t0@@58) TyType)) (= (type t1@@34) TyType)) (= (type t2@@11) TyType)) (= (type u0@@1) TyType)) (= (type u1@@0) TyType)) (= (type u2) TyType)) (and (and (and ($Is f@@38 (Tclass._System.___hFunc2 t0@@58 t1@@34 t2@@11)) (forall ((bx@@46 T@U) ) (!  (=> (and (= (type bx@@46) BoxType) ($IsBox bx@@46 u0@@1)) ($IsBox bx@@46 t0@@58)) :qid |unknown.0:0| :skolemid |832| :pattern ( ($IsBox bx@@46 u0@@1)) :pattern ( ($IsBox bx@@46 t0@@58)) ))) (forall ((bx@@47 T@U) ) (!  (=> (and (= (type bx@@47) BoxType) ($IsBox bx@@47 u1@@0)) ($IsBox bx@@47 t1@@34)) :qid |unknown.0:0| :skolemid |833| :pattern ( ($IsBox bx@@47 u1@@0)) :pattern ( ($IsBox bx@@47 t1@@34)) ))) (forall ((bx@@48 T@U) ) (!  (=> (and (= (type bx@@48) BoxType) ($IsBox bx@@48 t2@@11)) ($IsBox bx@@48 u2)) :qid |unknown.0:0| :skolemid |834| :pattern ( ($IsBox bx@@48 t2@@11)) :pattern ( ($IsBox bx@@48 u2)) )))) ($Is f@@38 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2))) :qid |unknown.0:0| :skolemid |835| :pattern ( ($Is f@@38 (Tclass._System.___hFunc2 t0@@58 t1@@34 t2@@11)) ($Is f@@38 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2))) )))
(assert (forall ((f@@39 T@U) (t0@@59 T@U) (t1@@35 T@U) (t2@@12 T@U) (h@@37 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@39) HandleTypeType) (= (type t0@@59) TyType)) (= (type t1@@35) TyType)) (= (type t2@@12) TyType)) (= (type h@@37) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@37)) (= ($IsAlloc f@@39 (Tclass._System.___hFunc2 t0@@59 t1@@35 t2@@12) h@@37) (forall ((bx0@@25 T@U) (bx1@@11 T@U) ) (!  (=> (and (= (type bx0@@25) BoxType) (= (type bx1@@11) BoxType)) (=> (and (and (and ($IsBox bx0@@25 t0@@59) ($IsAllocBox bx0@@25 t0@@59 h@@37)) (and ($IsBox bx1@@11 t1@@35) ($IsAllocBox bx1@@11 t1@@35 h@@37))) (Requires2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) (forall ((r@@17 T@U) ) (!  (=> (= (type r@@17) refType) (=> (and (not (= r@@17 null)) (U_2_bool (MapType0Select (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11) ($Box r@@17)))) (U_2_bool (MapType1Select (MapType0Select h@@37 r@@17) alloc)))) :qid |unknown.0:0| :skolemid |836| :pattern ( (MapType0Select (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11) ($Box r@@17))) )))) :qid |unknown.0:0| :skolemid |837| :pattern ( (Apply2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) :pattern ( (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) )))) :qid |unknown.0:0| :skolemid |838| :pattern ( ($IsAlloc f@@39 (Tclass._System.___hFunc2 t0@@59 t1@@35 t2@@12) h@@37)) )))
(assert (forall ((f@@40 T@U) (t0@@60 T@U) (t1@@36 T@U) (t2@@13 T@U) (h@@38 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@40) HandleTypeType) (= (type t0@@60) TyType)) (= (type t1@@36) TyType)) (= (type t2@@13) TyType)) (= (type h@@38) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@38) ($IsAlloc f@@40 (Tclass._System.___hFunc2 t0@@60 t1@@36 t2@@13) h@@38))) (forall ((bx0@@26 T@U) (bx1@@12 T@U) ) (!  (=> (and (= (type bx0@@26) BoxType) (= (type bx1@@12) BoxType)) (=> (and (and ($IsAllocBox bx0@@26 t0@@60 h@@38) ($IsAllocBox bx1@@12 t1@@36 h@@38)) (Requires2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12)) ($IsAllocBox (Apply2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12) t2@@13 h@@38))) :qid |unknown.0:0| :skolemid |839| :pattern ( (Apply2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12)) ))) :qid |unknown.0:0| :skolemid |840| :pattern ( ($IsAlloc f@@40 (Tclass._System.___hFunc2 t0@@60 t1@@36 t2@@13) h@@38)) )))
(assert (forall ((arg0@@161 T@U) (arg1@@78 T@U) (arg2@@30 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2 arg0@@161 arg1@@78 arg2@@30)) TyType) :qid |funType:Tclass._System.___hPartialFunc2| :pattern ( (Tclass._System.___hPartialFunc2 arg0@@161 arg1@@78 arg2@@30)) )))
(assert (forall ((|#$T0@@20| T@U) (|#$T1@@4| T@U) (|#$R@@33| T@U) ) (!  (=> (and (and (= (type |#$T0@@20|) TyType) (= (type |#$T1@@4|) TyType)) (= (type |#$R@@33|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) Tagclass._System.___hPartialFunc2) (= (TagFamily (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) |tytagFamily$_#PartialFunc2|))) :qid |unknown.0:0| :skolemid |841| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) )))
(assert (forall ((arg0@@162 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_0 arg0@@162)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_0| :pattern ( (Tclass._System.___hPartialFunc2_0 arg0@@162)) )))
(assert (forall ((|#$T0@@21| T@U) (|#$T1@@5| T@U) (|#$R@@34| T@U) ) (!  (=> (and (and (= (type |#$T0@@21|) TyType) (= (type |#$T1@@5|) TyType)) (= (type |#$R@@34|) TyType)) (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@21| |#$T1@@5| |#$R@@34|)) |#$T0@@21|)) :qid |unknown.0:0| :skolemid |842| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@21| |#$T1@@5| |#$R@@34|)) )))
(assert (forall ((arg0@@163 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_1 arg0@@163)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_1| :pattern ( (Tclass._System.___hPartialFunc2_1 arg0@@163)) )))
(assert (forall ((|#$T0@@22| T@U) (|#$T1@@6| T@U) (|#$R@@35| T@U) ) (!  (=> (and (and (= (type |#$T0@@22|) TyType) (= (type |#$T1@@6|) TyType)) (= (type |#$R@@35|) TyType)) (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@22| |#$T1@@6| |#$R@@35|)) |#$T1@@6|)) :qid |unknown.0:0| :skolemid |843| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@22| |#$T1@@6| |#$R@@35|)) )))
(assert (forall ((arg0@@164 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_2 arg0@@164)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_2| :pattern ( (Tclass._System.___hPartialFunc2_2 arg0@@164)) )))
(assert (forall ((|#$T0@@23| T@U) (|#$T1@@7| T@U) (|#$R@@36| T@U) ) (!  (=> (and (and (= (type |#$T0@@23|) TyType) (= (type |#$T1@@7|) TyType)) (= (type |#$R@@36|) TyType)) (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@23| |#$T1@@7| |#$R@@36|)) |#$R@@36|)) :qid |unknown.0:0| :skolemid |844| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@23| |#$T1@@7| |#$R@@36|)) )))
(assert (forall ((|#$T0@@24| T@U) (|#$T1@@8| T@U) (|#$R@@37| T@U) (bx@@49 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@24|) TyType) (= (type |#$T1@@8|) TyType)) (= (type |#$R@@37|) TyType)) (= (type bx@@49) BoxType)) ($IsBox bx@@49 (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|))) (and (= ($Box ($Unbox HandleTypeType bx@@49)) bx@@49) ($Is ($Unbox HandleTypeType bx@@49) (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|)))) :qid |unknown.0:0| :skolemid |845| :pattern ( ($IsBox bx@@49 (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|))) )))
(assert (forall ((|#$T0@@25| T@U) (|#$T1@@9| T@U) (|#$R@@38| T@U) (|f#0@@7| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@25|) TyType) (= (type |#$T1@@9|) TyType)) (= (type |#$R@@38|) TyType)) (= (type |f#0@@7|) HandleTypeType)) (= ($Is |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|))  (and ($Is |f#0@@7| (Tclass._System.___hFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|)) (forall ((|x0#0@@1| T@U) (|x1#0| T@U) ) (!  (=> (and (and (= (type |x0#0@@1|) BoxType) (= (type |x1#0|) BoxType)) (and ($IsBox |x0#0@@1| |#$T0@@25|) ($IsBox |x1#0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@25| |#$T1@@9| |#$R@@38| $OneHeap |f#0@@7| |x0#0@@1| |x1#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |846| :no-pattern (type |x0#0@@1|) :no-pattern (type |x1#0|) :no-pattern (U_2_int |x0#0@@1|) :no-pattern (U_2_bool |x0#0@@1|) :no-pattern (U_2_int |x1#0|) :no-pattern (U_2_bool |x1#0|) ))))) :qid |unknown.0:0| :skolemid |847| :pattern ( ($Is |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|))) )))
(assert (forall ((|#$T0@@26| T@U) (|#$T1@@10| T@U) (|#$R@@39| T@U) (|f#0@@8| T@U) ($h@@12 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@26|) TyType) (= (type |#$T1@@10|) TyType)) (= (type |#$R@@39|) TyType)) (= (type |f#0@@8|) HandleTypeType)) (= (type $h@@12) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12))) :qid |unknown.0:0| :skolemid |848| :pattern ( ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12)) )))
(assert (forall ((arg0@@165 T@U) (arg1@@79 T@U) (arg2@@31 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2 arg0@@165 arg1@@79 arg2@@31)) TyType) :qid |funType:Tclass._System.___hTotalFunc2| :pattern ( (Tclass._System.___hTotalFunc2 arg0@@165 arg1@@79 arg2@@31)) )))
(assert (forall ((|#$T0@@27| T@U) (|#$T1@@11| T@U) (|#$R@@40| T@U) ) (!  (=> (and (and (= (type |#$T0@@27|) TyType) (= (type |#$T1@@11|) TyType)) (= (type |#$R@@40|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) Tagclass._System.___hTotalFunc2) (= (TagFamily (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) |tytagFamily$_#TotalFunc2|))) :qid |unknown.0:0| :skolemid |849| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) )))
(assert (forall ((arg0@@166 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_0 arg0@@166)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_0| :pattern ( (Tclass._System.___hTotalFunc2_0 arg0@@166)) )))
(assert (forall ((|#$T0@@28| T@U) (|#$T1@@12| T@U) (|#$R@@41| T@U) ) (!  (=> (and (and (= (type |#$T0@@28|) TyType) (= (type |#$T1@@12|) TyType)) (= (type |#$R@@41|) TyType)) (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@28| |#$T1@@12| |#$R@@41|)) |#$T0@@28|)) :qid |unknown.0:0| :skolemid |850| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@28| |#$T1@@12| |#$R@@41|)) )))
(assert (forall ((arg0@@167 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_1 arg0@@167)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_1| :pattern ( (Tclass._System.___hTotalFunc2_1 arg0@@167)) )))
(assert (forall ((|#$T0@@29| T@U) (|#$T1@@13| T@U) (|#$R@@42| T@U) ) (!  (=> (and (and (= (type |#$T0@@29|) TyType) (= (type |#$T1@@13|) TyType)) (= (type |#$R@@42|) TyType)) (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@29| |#$T1@@13| |#$R@@42|)) |#$T1@@13|)) :qid |unknown.0:0| :skolemid |851| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@29| |#$T1@@13| |#$R@@42|)) )))
(assert (forall ((arg0@@168 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_2 arg0@@168)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_2| :pattern ( (Tclass._System.___hTotalFunc2_2 arg0@@168)) )))
(assert (forall ((|#$T0@@30| T@U) (|#$T1@@14| T@U) (|#$R@@43| T@U) ) (!  (=> (and (and (= (type |#$T0@@30|) TyType) (= (type |#$T1@@14|) TyType)) (= (type |#$R@@43|) TyType)) (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@14| |#$R@@43|)) |#$R@@43|)) :qid |unknown.0:0| :skolemid |852| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@14| |#$R@@43|)) )))
(assert (forall ((|#$T0@@31| T@U) (|#$T1@@15| T@U) (|#$R@@44| T@U) (bx@@50 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@31|) TyType) (= (type |#$T1@@15|) TyType)) (= (type |#$R@@44|) TyType)) (= (type bx@@50) BoxType)) ($IsBox bx@@50 (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|))) (and (= ($Box ($Unbox HandleTypeType bx@@50)) bx@@50) ($Is ($Unbox HandleTypeType bx@@50) (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|)))) :qid |unknown.0:0| :skolemid |853| :pattern ( ($IsBox bx@@50 (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|))) )))
(assert (forall ((|#$T0@@32| T@U) (|#$T1@@16| T@U) (|#$R@@45| T@U) (|f#0@@9| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@32|) TyType) (= (type |#$T1@@16|) TyType)) (= (type |#$R@@45|) TyType)) (= (type |f#0@@9|) HandleTypeType)) (= ($Is |f#0@@9| (Tclass._System.___hTotalFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|))  (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|)) (forall ((|x0#0@@2| T@U) (|x1#0@@0| T@U) ) (!  (=> (and (and (= (type |x0#0@@2|) BoxType) (= (type |x1#0@@0|) BoxType)) (and ($IsBox |x0#0@@2| |#$T0@@32|) ($IsBox |x1#0@@0| |#$T1@@16|))) (Requires2 |#$T0@@32| |#$T1@@16| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@2| |x1#0@@0|)) :qid |unknown.0:0| :skolemid |854| :no-pattern (type |x0#0@@2|) :no-pattern (type |x1#0@@0|) :no-pattern (U_2_int |x0#0@@2|) :no-pattern (U_2_bool |x0#0@@2|) :no-pattern (U_2_int |x1#0@@0|) :no-pattern (U_2_bool |x1#0@@0|) ))))) :qid |unknown.0:0| :skolemid |855| :pattern ( ($Is |f#0@@9| (Tclass._System.___hTotalFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|))) )))
(assert (forall ((|#$T0@@33| T@U) (|#$T1@@17| T@U) (|#$R@@46| T@U) (|f#0@@10| T@U) ($h@@13 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@33|) TyType) (= (type |#$T1@@17|) TyType)) (= (type |#$R@@46|) TyType)) (= (type |f#0@@10|) HandleTypeType)) (= (type $h@@13) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13))) :qid |unknown.0:0| :skolemid |856| :pattern ( ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13)) )))
(assert (forall ((arg0@@169 T@U) (arg1@@80 T@U) (arg2@@32 T@U) (arg3@@12 T@U) ) (! (= (type (Tclass._System.___hFunc3 arg0@@169 arg1@@80 arg2@@32 arg3@@12)) TyType) :qid |funType:Tclass._System.___hFunc3| :pattern ( (Tclass._System.___hFunc3 arg0@@169 arg1@@80 arg2@@32 arg3@@12)) )))
(assert (forall ((|#$T0@@34| T@U) (|#$T1@@18| T@U) (|#$T2| T@U) (|#$R@@47| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@34|) TyType) (= (type |#$T1@@18|) TyType)) (= (type |#$T2|) TyType)) (= (type |#$R@@47|) TyType)) (and (= (Tag (Tclass._System.___hFunc3 |#$T0@@34| |#$T1@@18| |#$T2| |#$R@@47|)) Tagclass._System.___hFunc3) (= (TagFamily (Tclass._System.___hFunc3 |#$T0@@34| |#$T1@@18| |#$T2| |#$R@@47|)) |tytagFamily$_#Func3|))) :qid |unknown.0:0| :skolemid |857| :pattern ( (Tclass._System.___hFunc3 |#$T0@@34| |#$T1@@18| |#$T2| |#$R@@47|)) )))
(assert (forall ((arg0@@170 T@U) ) (! (= (type (Tclass._System.___hFunc3_0 arg0@@170)) TyType) :qid |funType:Tclass._System.___hFunc3_0| :pattern ( (Tclass._System.___hFunc3_0 arg0@@170)) )))
(assert (forall ((|#$T0@@35| T@U) (|#$T1@@19| T@U) (|#$T2@@0| T@U) (|#$R@@48| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@35|) TyType) (= (type |#$T1@@19|) TyType)) (= (type |#$T2@@0|) TyType)) (= (type |#$R@@48|) TyType)) (= (Tclass._System.___hFunc3_0 (Tclass._System.___hFunc3 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$R@@48|)) |#$T0@@35|)) :qid |unknown.0:0| :skolemid |858| :pattern ( (Tclass._System.___hFunc3 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$R@@48|)) )))
(assert (forall ((arg0@@171 T@U) ) (! (= (type (Tclass._System.___hFunc3_1 arg0@@171)) TyType) :qid |funType:Tclass._System.___hFunc3_1| :pattern ( (Tclass._System.___hFunc3_1 arg0@@171)) )))
(assert (forall ((|#$T0@@36| T@U) (|#$T1@@20| T@U) (|#$T2@@1| T@U) (|#$R@@49| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@36|) TyType) (= (type |#$T1@@20|) TyType)) (= (type |#$T2@@1|) TyType)) (= (type |#$R@@49|) TyType)) (= (Tclass._System.___hFunc3_1 (Tclass._System.___hFunc3 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$R@@49|)) |#$T1@@20|)) :qid |unknown.0:0| :skolemid |859| :pattern ( (Tclass._System.___hFunc3 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$R@@49|)) )))
(assert (forall ((arg0@@172 T@U) ) (! (= (type (Tclass._System.___hFunc3_2 arg0@@172)) TyType) :qid |funType:Tclass._System.___hFunc3_2| :pattern ( (Tclass._System.___hFunc3_2 arg0@@172)) )))
(assert (forall ((|#$T0@@37| T@U) (|#$T1@@21| T@U) (|#$T2@@2| T@U) (|#$R@@50| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@37|) TyType) (= (type |#$T1@@21|) TyType)) (= (type |#$T2@@2|) TyType)) (= (type |#$R@@50|) TyType)) (= (Tclass._System.___hFunc3_2 (Tclass._System.___hFunc3 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$R@@50|)) |#$T2@@2|)) :qid |unknown.0:0| :skolemid |860| :pattern ( (Tclass._System.___hFunc3 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$R@@50|)) )))
(assert (forall ((arg0@@173 T@U) ) (! (= (type (Tclass._System.___hFunc3_3 arg0@@173)) TyType) :qid |funType:Tclass._System.___hFunc3_3| :pattern ( (Tclass._System.___hFunc3_3 arg0@@173)) )))
(assert (forall ((|#$T0@@38| T@U) (|#$T1@@22| T@U) (|#$T2@@3| T@U) (|#$R@@51| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@38|) TyType) (= (type |#$T1@@22|) TyType)) (= (type |#$T2@@3|) TyType)) (= (type |#$R@@51|) TyType)) (= (Tclass._System.___hFunc3_3 (Tclass._System.___hFunc3 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$R@@51|)) |#$R@@51|)) :qid |unknown.0:0| :skolemid |861| :pattern ( (Tclass._System.___hFunc3 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$R@@51|)) )))
(assert (forall ((|#$T0@@39| T@U) (|#$T1@@23| T@U) (|#$T2@@4| T@U) (|#$R@@52| T@U) (bx@@51 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@39|) TyType) (= (type |#$T1@@23|) TyType)) (= (type |#$T2@@4|) TyType)) (= (type |#$R@@52|) TyType)) (= (type bx@@51) BoxType)) ($IsBox bx@@51 (Tclass._System.___hFunc3 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$R@@52|))) (and (= ($Box ($Unbox HandleTypeType bx@@51)) bx@@51) ($Is ($Unbox HandleTypeType bx@@51) (Tclass._System.___hFunc3 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$R@@52|)))) :qid |unknown.0:0| :skolemid |862| :pattern ( ($IsBox bx@@51 (Tclass._System.___hFunc3 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$R@@52|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@174 T@T) (arg1@@81 T@T) (arg2@@33 T@T) (arg3@@13 T@T) (arg4@@4 T@T) ) (! (= (Ctor (MapType4Type arg0@@174 arg1@@81 arg2@@33 arg3@@13 arg4@@4)) 27) :qid |ctor:MapType4Type| )) (forall ((arg0@@175 T@T) (arg1@@82 T@T) (arg2@@34 T@T) (arg3@@14 T@T) (arg4@@5 T@T) ) (! (= (MapType4TypeInv0 (MapType4Type arg0@@175 arg1@@82 arg2@@34 arg3@@14 arg4@@5)) arg0@@175) :qid |typeInv:MapType4TypeInv0| :pattern ( (MapType4Type arg0@@175 arg1@@82 arg2@@34 arg3@@14 arg4@@5)) ))) (forall ((arg0@@176 T@T) (arg1@@83 T@T) (arg2@@35 T@T) (arg3@@15 T@T) (arg4@@6 T@T) ) (! (= (MapType4TypeInv1 (MapType4Type arg0@@176 arg1@@83 arg2@@35 arg3@@15 arg4@@6)) arg1@@83) :qid |typeInv:MapType4TypeInv1| :pattern ( (MapType4Type arg0@@176 arg1@@83 arg2@@35 arg3@@15 arg4@@6)) ))) (forall ((arg0@@177 T@T) (arg1@@84 T@T) (arg2@@36 T@T) (arg3@@16 T@T) (arg4@@7 T@T) ) (! (= (MapType4TypeInv2 (MapType4Type arg0@@177 arg1@@84 arg2@@36 arg3@@16 arg4@@7)) arg2@@36) :qid |typeInv:MapType4TypeInv2| :pattern ( (MapType4Type arg0@@177 arg1@@84 arg2@@36 arg3@@16 arg4@@7)) ))) (forall ((arg0@@178 T@T) (arg1@@85 T@T) (arg2@@37 T@T) (arg3@@17 T@T) (arg4@@8 T@T) ) (! (= (MapType4TypeInv3 (MapType4Type arg0@@178 arg1@@85 arg2@@37 arg3@@17 arg4@@8)) arg3@@17) :qid |typeInv:MapType4TypeInv3| :pattern ( (MapType4Type arg0@@178 arg1@@85 arg2@@37 arg3@@17 arg4@@8)) ))) (forall ((arg0@@179 T@T) (arg1@@86 T@T) (arg2@@38 T@T) (arg3@@18 T@T) (arg4@@9 T@T) ) (! (= (MapType4TypeInv4 (MapType4Type arg0@@179 arg1@@86 arg2@@38 arg3@@18 arg4@@9)) arg4@@9) :qid |typeInv:MapType4TypeInv4| :pattern ( (MapType4Type arg0@@179 arg1@@86 arg2@@38 arg3@@18 arg4@@9)) ))) (forall ((arg0@@180 T@U) (arg1@@87 T@U) (arg2@@39 T@U) (arg3@@19 T@U) (arg4@@10 T@U) ) (! (let ((aVar4 (MapType4TypeInv4 (type arg0@@180)))) (= (type (MapType4Select arg0@@180 arg1@@87 arg2@@39 arg3@@19 arg4@@10)) aVar4)) :qid |funType:MapType4Select| :pattern ( (MapType4Select arg0@@180 arg1@@87 arg2@@39 arg3@@19 arg4@@10)) ))) (forall ((arg0@@181 T@U) (arg1@@88 T@U) (arg2@@40 T@U) (arg3@@20 T@U) (arg4@@11 T@U) (arg5@@1 T@U) ) (! (let ((aVar4@@0 (type arg5@@1))) (let ((aVar3@@2 (type arg4@@11))) (let ((aVar2@@3 (type arg3@@20))) (let ((aVar1@@4 (type arg2@@40))) (let ((aVar0@@2 (type arg1@@88))) (= (type (MapType4Store arg0@@181 arg1@@88 arg2@@40 arg3@@20 arg4@@11 arg5@@1)) (MapType4Type aVar0@@2 aVar1@@4 aVar2@@3 aVar3@@2 aVar4@@0))))))) :qid |funType:MapType4Store| :pattern ( (MapType4Store arg0@@181 arg1@@88 arg2@@40 arg3@@20 arg4@@11 arg5@@1)) ))) (forall ((m@@54 T@U) (x0@@14 T@U) (x1@@8 T@U) (x2@@4 T@U) (x3 T@U) (val@@15 T@U) ) (! (let ((aVar4@@1 (MapType4TypeInv4 (type m@@54)))) (=> (= (type val@@15) aVar4@@1) (= (MapType4Select (MapType4Store m@@54 x0@@14 x1@@8 x2@@4 x3 val@@15) x0@@14 x1@@8 x2@@4 x3) val@@15))) :qid |mapAx0:MapType4Select| :weight 0 ))) (and (and (and (and (forall ((val@@16 T@U) (m@@55 T@U) (x0@@15 T@U) (x1@@9 T@U) (x2@@5 T@U) (x3@@0 T@U) (y0@@10 T@U) (y1@@6 T@U) (y2@@3 T@U) (y3 T@U) ) (!  (or (= x0@@15 y0@@10) (= (MapType4Select (MapType4Store m@@55 x0@@15 x1@@9 x2@@5 x3@@0 val@@16) y0@@10 y1@@6 y2@@3 y3) (MapType4Select m@@55 y0@@10 y1@@6 y2@@3 y3))) :qid |mapAx1:MapType4Select:0| :weight 0 )) (forall ((val@@17 T@U) (m@@56 T@U) (x0@@16 T@U) (x1@@10 T@U) (x2@@6 T@U) (x3@@1 T@U) (y0@@11 T@U) (y1@@7 T@U) (y2@@4 T@U) (y3@@0 T@U) ) (!  (or (= x1@@10 y1@@7) (= (MapType4Select (MapType4Store m@@56 x0@@16 x1@@10 x2@@6 x3@@1 val@@17) y0@@11 y1@@7 y2@@4 y3@@0) (MapType4Select m@@56 y0@@11 y1@@7 y2@@4 y3@@0))) :qid |mapAx1:MapType4Select:1| :weight 0 ))) (forall ((val@@18 T@U) (m@@57 T@U) (x0@@17 T@U) (x1@@11 T@U) (x2@@7 T@U) (x3@@2 T@U) (y0@@12 T@U) (y1@@8 T@U) (y2@@5 T@U) (y3@@1 T@U) ) (!  (or (= x2@@7 y2@@5) (= (MapType4Select (MapType4Store m@@57 x0@@17 x1@@11 x2@@7 x3@@2 val@@18) y0@@12 y1@@8 y2@@5 y3@@1) (MapType4Select m@@57 y0@@12 y1@@8 y2@@5 y3@@1))) :qid |mapAx1:MapType4Select:2| :weight 0 ))) (forall ((val@@19 T@U) (m@@58 T@U) (x0@@18 T@U) (x1@@12 T@U) (x2@@8 T@U) (x3@@3 T@U) (y0@@13 T@U) (y1@@9 T@U) (y2@@6 T@U) (y3@@2 T@U) ) (!  (or (= x3@@3 y3@@2) (= (MapType4Select (MapType4Store m@@58 x0@@18 x1@@12 x2@@8 x3@@3 val@@19) y0@@13 y1@@9 y2@@6 y3@@2) (MapType4Select m@@58 y0@@13 y1@@9 y2@@6 y3@@2))) :qid |mapAx1:MapType4Select:3| :weight 0 ))) (forall ((val@@20 T@U) (m@@59 T@U) (x0@@19 T@U) (x1@@13 T@U) (x2@@9 T@U) (x3@@4 T@U) (y0@@14 T@U) (y1@@10 T@U) (y2@@7 T@U) (y3@@3 T@U) ) (!  (or true (= (MapType4Select (MapType4Store m@@59 x0@@19 x1@@13 x2@@9 x3@@4 val@@20) y0@@14 y1@@10 y2@@7 y3@@3) (MapType4Select m@@59 y0@@14 y1@@10 y2@@7 y3@@3))) :qid |mapAx2:MapType4Select| :weight 0 )))) (forall ((arg0@@182 T@U) (arg1@@89 T@U) (arg2@@41 T@U) (arg3@@21 T@U) (arg4@@12 T@U) (arg5@@2 T@U) (arg6@@1 T@U) (arg7 T@U) (arg8 T@U) ) (! (= (type (Apply3 arg0@@182 arg1@@89 arg2@@41 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8)) BoxType) :qid |funType:Apply3| :pattern ( (Apply3 arg0@@182 arg1@@89 arg2@@41 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8)) ))) (forall ((arg0@@183 T@U) (arg1@@90 T@U) (arg2@@42 T@U) ) (! (= (type (Handle3 arg0@@183 arg1@@90 arg2@@42)) HandleTypeType) :qid |funType:Handle3| :pattern ( (Handle3 arg0@@183 arg1@@90 arg2@@42)) ))))
(assert (forall ((t0@@61 T@U) (t1@@37 T@U) (t2@@14 T@U) (t3 T@U) (heap@@17 T@U) (h@@39 T@U) (r@@18 T@U) (rd@@8 T@U) (bx0@@27 T@U) (bx1@@13 T@U) (bx2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@61) TyType) (= (type t1@@37) TyType)) (= (type t2@@14) TyType)) (= (type t3) TyType)) (= (type heap@@17) (MapType0Type refType MapType1Type))) (= (type h@@39) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@18) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@8) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@27) BoxType)) (= (type bx1@@13) BoxType)) (= (type bx2) BoxType)) (= (Apply3 t0@@61 t1@@37 t2@@14 t3 heap@@17 (Handle3 h@@39 r@@18 rd@@8) bx0@@27 bx1@@13 bx2) (MapType4Select h@@39 heap@@17 bx0@@27 bx1@@13 bx2))) :qid |unknown.0:0| :skolemid |863| :pattern ( (Apply3 t0@@61 t1@@37 t2@@14 t3 heap@@17 (Handle3 h@@39 r@@18 rd@@8) bx0@@27 bx1@@13 bx2)) )))
(assert (forall ((t0@@62 T@U) (t1@@38 T@U) (t2@@15 T@U) (t3@@0 T@U) (heap@@18 T@U) (h@@40 T@U) (r@@19 T@U) (rd@@9 T@U) (bx0@@28 T@U) (bx1@@14 T@U) (bx2@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@62) TyType) (= (type t1@@38) TyType)) (= (type t2@@15) TyType)) (= (type t3@@0) TyType)) (= (type heap@@18) (MapType0Type refType MapType1Type))) (= (type h@@40) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@19) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@9) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@28) BoxType)) (= (type bx1@@14) BoxType)) (= (type bx2@@0) BoxType)) (U_2_bool (MapType4Select r@@19 heap@@18 bx0@@28 bx1@@14 bx2@@0))) (Requires3 t0@@62 t1@@38 t2@@15 t3@@0 heap@@18 (Handle3 h@@40 r@@19 rd@@9) bx0@@28 bx1@@14 bx2@@0)) :qid |unknown.0:0| :skolemid |864| :pattern ( (Requires3 t0@@62 t1@@38 t2@@15 t3@@0 heap@@18 (Handle3 h@@40 r@@19 rd@@9) bx0@@28 bx1@@14 bx2@@0)) )))
(assert (forall ((arg0@@184 T@U) (arg1@@91 T@U) (arg2@@43 T@U) (arg3@@22 T@U) (arg4@@13 T@U) (arg5@@3 T@U) (arg6@@2 T@U) (arg7@@0 T@U) (arg8@@0 T@U) ) (! (= (type (Reads3 arg0@@184 arg1@@91 arg2@@43 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads3| :pattern ( (Reads3 arg0@@184 arg1@@91 arg2@@43 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) )))
(assert (forall ((t0@@63 T@U) (t1@@39 T@U) (t2@@16 T@U) (t3@@1 T@U) (heap@@19 T@U) (h@@41 T@U) (r@@20 T@U) (rd@@10 T@U) (bx0@@29 T@U) (bx1@@15 T@U) (bx2@@1 T@U) (bx@@52 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@63) TyType) (= (type t1@@39) TyType)) (= (type t2@@16) TyType)) (= (type t3@@1) TyType)) (= (type heap@@19) (MapType0Type refType MapType1Type))) (= (type h@@41) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@20) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@10) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@29) BoxType)) (= (type bx1@@15) BoxType)) (= (type bx2@@1) BoxType)) (= (type bx@@52) BoxType)) (= (U_2_bool (MapType0Select (Reads3 t0@@63 t1@@39 t2@@16 t3@@1 heap@@19 (Handle3 h@@41 r@@20 rd@@10) bx0@@29 bx1@@15 bx2@@1) bx@@52)) (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@19 bx0@@29 bx1@@15 bx2@@1) bx@@52)))) :qid |unknown.0:0| :skolemid |865| :pattern ( (MapType0Select (Reads3 t0@@63 t1@@39 t2@@16 t3@@1 heap@@19 (Handle3 h@@41 r@@20 rd@@10) bx0@@29 bx1@@15 bx2@@1) bx@@52)) )))
(assert (forall ((t0@@64 T@U) (t1@@40 T@U) (t2@@17 T@U) (t3@@2 T@U) (h0@@18 T@U) (h1@@18 T@U) (f@@41 T@U) (bx0@@30 T@U) (bx1@@16 T@U) (bx2@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@64) TyType) (= (type t1@@40) TyType)) (= (type t2@@17) TyType)) (= (type t3@@2) TyType)) (= (type h0@@18) (MapType0Type refType MapType1Type))) (= (type h1@@18) (MapType0Type refType MapType1Type))) (= (type f@@41) HandleTypeType)) (= (type bx0@@30) BoxType)) (= (type bx1@@16) BoxType)) (= (type bx2@@2) BoxType)) (and (and (and ($HeapSucc h0@@18 h1@@18) (and ($IsGoodHeap h0@@18) ($IsGoodHeap h1@@18))) (and (and (and ($IsBox bx0@@30 t0@@64) ($IsBox bx1@@16 t1@@40)) ($IsBox bx2@@2 t2@@17)) ($Is f@@41 (Tclass._System.___hFunc3 t0@@64 t1@@40 t2@@17 t3@@2)))) (forall ((o@@62 T@U) (fld@@17 T@U) ) (! (let ((a@@100 (FieldTypeInv0 (type fld@@17)))) (=> (and (and (= (type o@@62) refType) (= (type fld@@17) (FieldType a@@100))) (and (not (= o@@62 null)) (U_2_bool (MapType0Select (Reads3 t0@@64 t1@@40 t2@@17 t3@@2 h0@@18 f@@41 bx0@@30 bx1@@16 bx2@@2) ($Box o@@62))))) (= (MapType1Select (MapType0Select h0@@18 o@@62) fld@@17) (MapType1Select (MapType0Select h1@@18 o@@62) fld@@17)))) :qid |unknown.0:0| :skolemid |866| :no-pattern (type o@@62) :no-pattern (type fld@@17) :no-pattern (U_2_int o@@62) :no-pattern (U_2_bool o@@62) :no-pattern (U_2_int fld@@17) :no-pattern (U_2_bool fld@@17) )))) (= (Reads3 t0@@64 t1@@40 t2@@17 t3@@2 h0@@18 f@@41 bx0@@30 bx1@@16 bx2@@2) (Reads3 t0@@64 t1@@40 t2@@17 t3@@2 h1@@18 f@@41 bx0@@30 bx1@@16 bx2@@2))) :qid |unknown.0:0| :skolemid |867| :pattern ( ($HeapSucc h0@@18 h1@@18) (Reads3 t0@@64 t1@@40 t2@@17 t3@@2 h1@@18 f@@41 bx0@@30 bx1@@16 bx2@@2)) )))
(assert (forall ((t0@@65 T@U) (t1@@41 T@U) (t2@@18 T@U) (t3@@3 T@U) (h0@@19 T@U) (h1@@19 T@U) (f@@42 T@U) (bx0@@31 T@U) (bx1@@17 T@U) (bx2@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@65) TyType) (= (type t1@@41) TyType)) (= (type t2@@18) TyType)) (= (type t3@@3) TyType)) (= (type h0@@19) (MapType0Type refType MapType1Type))) (= (type h1@@19) (MapType0Type refType MapType1Type))) (= (type f@@42) HandleTypeType)) (= (type bx0@@31) BoxType)) (= (type bx1@@17) BoxType)) (= (type bx2@@3) BoxType)) (and (and (and ($HeapSucc h0@@19 h1@@19) (and ($IsGoodHeap h0@@19) ($IsGoodHeap h1@@19))) (and (and (and ($IsBox bx0@@31 t0@@65) ($IsBox bx1@@17 t1@@41)) ($IsBox bx2@@3 t2@@18)) ($Is f@@42 (Tclass._System.___hFunc3 t0@@65 t1@@41 t2@@18 t3@@3)))) (forall ((o@@63 T@U) (fld@@18 T@U) ) (! (let ((a@@101 (FieldTypeInv0 (type fld@@18)))) (=> (and (and (= (type o@@63) refType) (= (type fld@@18) (FieldType a@@101))) (and (not (= o@@63 null)) (U_2_bool (MapType0Select (Reads3 t0@@65 t1@@41 t2@@18 t3@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3) ($Box o@@63))))) (= (MapType1Select (MapType0Select h0@@19 o@@63) fld@@18) (MapType1Select (MapType0Select h1@@19 o@@63) fld@@18)))) :qid |unknown.0:0| :skolemid |868| :no-pattern (type o@@63) :no-pattern (type fld@@18) :no-pattern (U_2_int o@@63) :no-pattern (U_2_bool o@@63) :no-pattern (U_2_int fld@@18) :no-pattern (U_2_bool fld@@18) )))) (= (Reads3 t0@@65 t1@@41 t2@@18 t3@@3 h0@@19 f@@42 bx0@@31 bx1@@17 bx2@@3) (Reads3 t0@@65 t1@@41 t2@@18 t3@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3))) :qid |unknown.0:0| :skolemid |869| :pattern ( ($HeapSucc h0@@19 h1@@19) (Reads3 t0@@65 t1@@41 t2@@18 t3@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3)) )))
(assert (forall ((t0@@66 T@U) (t1@@42 T@U) (t2@@19 T@U) (t3@@4 T@U) (h0@@20 T@U) (h1@@20 T@U) (f@@43 T@U) (bx0@@32 T@U) (bx1@@18 T@U) (bx2@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@66) TyType) (= (type t1@@42) TyType)) (= (type t2@@19) TyType)) (= (type t3@@4) TyType)) (= (type h0@@20) (MapType0Type refType MapType1Type))) (= (type h1@@20) (MapType0Type refType MapType1Type))) (= (type f@@43) HandleTypeType)) (= (type bx0@@32) BoxType)) (= (type bx1@@18) BoxType)) (= (type bx2@@4) BoxType)) (and (and (and ($HeapSucc h0@@20 h1@@20) (and ($IsGoodHeap h0@@20) ($IsGoodHeap h1@@20))) (and (and (and ($IsBox bx0@@32 t0@@66) ($IsBox bx1@@18 t1@@42)) ($IsBox bx2@@4 t2@@19)) ($Is f@@43 (Tclass._System.___hFunc3 t0@@66 t1@@42 t2@@19 t3@@4)))) (forall ((o@@64 T@U) (fld@@19 T@U) ) (! (let ((a@@102 (FieldTypeInv0 (type fld@@19)))) (=> (and (and (= (type o@@64) refType) (= (type fld@@19) (FieldType a@@102))) (and (not (= o@@64 null)) (U_2_bool (MapType0Select (Reads3 t0@@66 t1@@42 t2@@19 t3@@4 h0@@20 f@@43 bx0@@32 bx1@@18 bx2@@4) ($Box o@@64))))) (= (MapType1Select (MapType0Select h0@@20 o@@64) fld@@19) (MapType1Select (MapType0Select h1@@20 o@@64) fld@@19)))) :qid |unknown.0:0| :skolemid |870| :no-pattern (type o@@64) :no-pattern (type fld@@19) :no-pattern (U_2_int o@@64) :no-pattern (U_2_bool o@@64) :no-pattern (U_2_int fld@@19) :no-pattern (U_2_bool fld@@19) )))) (= (Requires3 t0@@66 t1@@42 t2@@19 t3@@4 h0@@20 f@@43 bx0@@32 bx1@@18 bx2@@4) (Requires3 t0@@66 t1@@42 t2@@19 t3@@4 h1@@20 f@@43 bx0@@32 bx1@@18 bx2@@4))) :qid |unknown.0:0| :skolemid |871| :pattern ( ($HeapSucc h0@@20 h1@@20) (Requires3 t0@@66 t1@@42 t2@@19 t3@@4 h1@@20 f@@43 bx0@@32 bx1@@18 bx2@@4)) )))
(assert (forall ((t0@@67 T@U) (t1@@43 T@U) (t2@@20 T@U) (t3@@5 T@U) (h0@@21 T@U) (h1@@21 T@U) (f@@44 T@U) (bx0@@33 T@U) (bx1@@19 T@U) (bx2@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@67) TyType) (= (type t1@@43) TyType)) (= (type t2@@20) TyType)) (= (type t3@@5) TyType)) (= (type h0@@21) (MapType0Type refType MapType1Type))) (= (type h1@@21) (MapType0Type refType MapType1Type))) (= (type f@@44) HandleTypeType)) (= (type bx0@@33) BoxType)) (= (type bx1@@19) BoxType)) (= (type bx2@@5) BoxType)) (and (and (and ($HeapSucc h0@@21 h1@@21) (and ($IsGoodHeap h0@@21) ($IsGoodHeap h1@@21))) (and (and (and ($IsBox bx0@@33 t0@@67) ($IsBox bx1@@19 t1@@43)) ($IsBox bx2@@5 t2@@20)) ($Is f@@44 (Tclass._System.___hFunc3 t0@@67 t1@@43 t2@@20 t3@@5)))) (forall ((o@@65 T@U) (fld@@20 T@U) ) (! (let ((a@@103 (FieldTypeInv0 (type fld@@20)))) (=> (and (and (= (type o@@65) refType) (= (type fld@@20) (FieldType a@@103))) (and (not (= o@@65 null)) (U_2_bool (MapType0Select (Reads3 t0@@67 t1@@43 t2@@20 t3@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5) ($Box o@@65))))) (= (MapType1Select (MapType0Select h0@@21 o@@65) fld@@20) (MapType1Select (MapType0Select h1@@21 o@@65) fld@@20)))) :qid |unknown.0:0| :skolemid |872| :no-pattern (type o@@65) :no-pattern (type fld@@20) :no-pattern (U_2_int o@@65) :no-pattern (U_2_bool o@@65) :no-pattern (U_2_int fld@@20) :no-pattern (U_2_bool fld@@20) )))) (= (Requires3 t0@@67 t1@@43 t2@@20 t3@@5 h0@@21 f@@44 bx0@@33 bx1@@19 bx2@@5) (Requires3 t0@@67 t1@@43 t2@@20 t3@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5))) :qid |unknown.0:0| :skolemid |873| :pattern ( ($HeapSucc h0@@21 h1@@21) (Requires3 t0@@67 t1@@43 t2@@20 t3@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5)) )))
(assert (forall ((t0@@68 T@U) (t1@@44 T@U) (t2@@21 T@U) (t3@@6 T@U) (h0@@22 T@U) (h1@@22 T@U) (f@@45 T@U) (bx0@@34 T@U) (bx1@@20 T@U) (bx2@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@68) TyType) (= (type t1@@44) TyType)) (= (type t2@@21) TyType)) (= (type t3@@6) TyType)) (= (type h0@@22) (MapType0Type refType MapType1Type))) (= (type h1@@22) (MapType0Type refType MapType1Type))) (= (type f@@45) HandleTypeType)) (= (type bx0@@34) BoxType)) (= (type bx1@@20) BoxType)) (= (type bx2@@6) BoxType)) (and (and (and ($HeapSucc h0@@22 h1@@22) (and ($IsGoodHeap h0@@22) ($IsGoodHeap h1@@22))) (and (and (and ($IsBox bx0@@34 t0@@68) ($IsBox bx1@@20 t1@@44)) ($IsBox bx2@@6 t2@@21)) ($Is f@@45 (Tclass._System.___hFunc3 t0@@68 t1@@44 t2@@21 t3@@6)))) (forall ((o@@66 T@U) (fld@@21 T@U) ) (! (let ((a@@104 (FieldTypeInv0 (type fld@@21)))) (=> (and (and (= (type o@@66) refType) (= (type fld@@21) (FieldType a@@104))) (and (not (= o@@66 null)) (U_2_bool (MapType0Select (Reads3 t0@@68 t1@@44 t2@@21 t3@@6 h0@@22 f@@45 bx0@@34 bx1@@20 bx2@@6) ($Box o@@66))))) (= (MapType1Select (MapType0Select h0@@22 o@@66) fld@@21) (MapType1Select (MapType0Select h1@@22 o@@66) fld@@21)))) :qid |unknown.0:0| :skolemid |874| :no-pattern (type o@@66) :no-pattern (type fld@@21) :no-pattern (U_2_int o@@66) :no-pattern (U_2_bool o@@66) :no-pattern (U_2_int fld@@21) :no-pattern (U_2_bool fld@@21) )))) (= (Apply3 t0@@68 t1@@44 t2@@21 t3@@6 h0@@22 f@@45 bx0@@34 bx1@@20 bx2@@6) (Apply3 t0@@68 t1@@44 t2@@21 t3@@6 h1@@22 f@@45 bx0@@34 bx1@@20 bx2@@6))) :qid |unknown.0:0| :skolemid |875| :pattern ( ($HeapSucc h0@@22 h1@@22) (Apply3 t0@@68 t1@@44 t2@@21 t3@@6 h1@@22 f@@45 bx0@@34 bx1@@20 bx2@@6)) )))
(assert (forall ((t0@@69 T@U) (t1@@45 T@U) (t2@@22 T@U) (t3@@7 T@U) (h0@@23 T@U) (h1@@23 T@U) (f@@46 T@U) (bx0@@35 T@U) (bx1@@21 T@U) (bx2@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@69) TyType) (= (type t1@@45) TyType)) (= (type t2@@22) TyType)) (= (type t3@@7) TyType)) (= (type h0@@23) (MapType0Type refType MapType1Type))) (= (type h1@@23) (MapType0Type refType MapType1Type))) (= (type f@@46) HandleTypeType)) (= (type bx0@@35) BoxType)) (= (type bx1@@21) BoxType)) (= (type bx2@@7) BoxType)) (and (and (and ($HeapSucc h0@@23 h1@@23) (and ($IsGoodHeap h0@@23) ($IsGoodHeap h1@@23))) (and (and (and ($IsBox bx0@@35 t0@@69) ($IsBox bx1@@21 t1@@45)) ($IsBox bx2@@7 t2@@22)) ($Is f@@46 (Tclass._System.___hFunc3 t0@@69 t1@@45 t2@@22 t3@@7)))) (forall ((o@@67 T@U) (fld@@22 T@U) ) (! (let ((a@@105 (FieldTypeInv0 (type fld@@22)))) (=> (and (and (= (type o@@67) refType) (= (type fld@@22) (FieldType a@@105))) (and (not (= o@@67 null)) (U_2_bool (MapType0Select (Reads3 t0@@69 t1@@45 t2@@22 t3@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7) ($Box o@@67))))) (= (MapType1Select (MapType0Select h0@@23 o@@67) fld@@22) (MapType1Select (MapType0Select h1@@23 o@@67) fld@@22)))) :qid |unknown.0:0| :skolemid |876| :no-pattern (type o@@67) :no-pattern (type fld@@22) :no-pattern (U_2_int o@@67) :no-pattern (U_2_bool o@@67) :no-pattern (U_2_int fld@@22) :no-pattern (U_2_bool fld@@22) )))) (= (Apply3 t0@@69 t1@@45 t2@@22 t3@@7 h0@@23 f@@46 bx0@@35 bx1@@21 bx2@@7) (Apply3 t0@@69 t1@@45 t2@@22 t3@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7))) :qid |unknown.0:0| :skolemid |877| :pattern ( ($HeapSucc h0@@23 h1@@23) (Apply3 t0@@69 t1@@45 t2@@22 t3@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7)) )))
(assert (forall ((t0@@70 T@U) (t1@@46 T@U) (t2@@23 T@U) (t3@@8 T@U) (heap@@20 T@U) (f@@47 T@U) (bx0@@36 T@U) (bx1@@22 T@U) (bx2@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@70) TyType) (= (type t1@@46) TyType)) (= (type t2@@23) TyType)) (= (type t3@@8) TyType)) (= (type heap@@20) (MapType0Type refType MapType1Type))) (= (type f@@47) HandleTypeType)) (= (type bx0@@36) BoxType)) (= (type bx1@@22) BoxType)) (= (type bx2@@8) BoxType)) (and ($IsGoodHeap heap@@20) (and (and (and ($IsBox bx0@@36 t0@@70) ($IsBox bx1@@22 t1@@46)) ($IsBox bx2@@8 t2@@23)) ($Is f@@47 (Tclass._System.___hFunc3 t0@@70 t1@@46 t2@@23 t3@@8))))) (= (|Set#Equal| (Reads3 t0@@70 t1@@46 t2@@23 t3@@8 $OneHeap f@@47 bx0@@36 bx1@@22 bx2@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@70 t1@@46 t2@@23 t3@@8 heap@@20 f@@47 bx0@@36 bx1@@22 bx2@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |878| :pattern ( (Reads3 t0@@70 t1@@46 t2@@23 t3@@8 $OneHeap f@@47 bx0@@36 bx1@@22 bx2@@8) ($IsGoodHeap heap@@20)) :pattern ( (Reads3 t0@@70 t1@@46 t2@@23 t3@@8 heap@@20 f@@47 bx0@@36 bx1@@22 bx2@@8)) )))
(assert (forall ((t0@@71 T@U) (t1@@47 T@U) (t2@@24 T@U) (t3@@9 T@U) (heap@@21 T@U) (f@@48 T@U) (bx0@@37 T@U) (bx1@@23 T@U) (bx2@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@71) TyType) (= (type t1@@47) TyType)) (= (type t2@@24) TyType)) (= (type t3@@9) TyType)) (= (type heap@@21) (MapType0Type refType MapType1Type))) (= (type f@@48) HandleTypeType)) (= (type bx0@@37) BoxType)) (= (type bx1@@23) BoxType)) (= (type bx2@@9) BoxType)) (and (and ($IsGoodHeap heap@@21) (and (and (and ($IsBox bx0@@37 t0@@71) ($IsBox bx1@@23 t1@@47)) ($IsBox bx2@@9 t2@@24)) ($Is f@@48 (Tclass._System.___hFunc3 t0@@71 t1@@47 t2@@24 t3@@9)))) (|Set#Equal| (Reads3 t0@@71 t1@@47 t2@@24 t3@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9) (|Set#Empty| BoxType)))) (= (Requires3 t0@@71 t1@@47 t2@@24 t3@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9) (Requires3 t0@@71 t1@@47 t2@@24 t3@@9 heap@@21 f@@48 bx0@@37 bx1@@23 bx2@@9))) :qid |unknown.0:0| :skolemid |879| :pattern ( (Requires3 t0@@71 t1@@47 t2@@24 t3@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9) ($IsGoodHeap heap@@21)) :pattern ( (Requires3 t0@@71 t1@@47 t2@@24 t3@@9 heap@@21 f@@48 bx0@@37 bx1@@23 bx2@@9)) )))
(assert (forall ((f@@49 T@U) (t0@@72 T@U) (t1@@48 T@U) (t2@@25 T@U) (t3@@10 T@U) ) (!  (=> (and (and (and (and (= (type f@@49) HandleTypeType) (= (type t0@@72) TyType)) (= (type t1@@48) TyType)) (= (type t2@@25) TyType)) (= (type t3@@10) TyType)) (= ($Is f@@49 (Tclass._System.___hFunc3 t0@@72 t1@@48 t2@@25 t3@@10)) (forall ((h@@42 T@U) (bx0@@38 T@U) (bx1@@24 T@U) (bx2@@10 T@U) ) (!  (=> (and (and (and (and (= (type h@@42) (MapType0Type refType MapType1Type)) (= (type bx0@@38) BoxType)) (= (type bx1@@24) BoxType)) (= (type bx2@@10) BoxType)) (and (and ($IsGoodHeap h@@42) (and (and ($IsBox bx0@@38 t0@@72) ($IsBox bx1@@24 t1@@48)) ($IsBox bx2@@10 t2@@25))) (Requires3 t0@@72 t1@@48 t2@@25 t3@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10))) ($IsBox (Apply3 t0@@72 t1@@48 t2@@25 t3@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10) t3@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |880| :pattern ( (Apply3 t0@@72 t1@@48 t2@@25 t3@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10)) )))) :qid |unknown.0:0| :skolemid |881| :pattern ( ($Is f@@49 (Tclass._System.___hFunc3 t0@@72 t1@@48 t2@@25 t3@@10))) )))
(assert (forall ((f@@50 T@U) (t0@@73 T@U) (t1@@49 T@U) (t2@@26 T@U) (t3@@11 T@U) (u0@@2 T@U) (u1@@1 T@U) (u2@@0 T@U) (u3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@50) HandleTypeType) (= (type t0@@73) TyType)) (= (type t1@@49) TyType)) (= (type t2@@26) TyType)) (= (type t3@@11) TyType)) (= (type u0@@2) TyType)) (= (type u1@@1) TyType)) (= (type u2@@0) TyType)) (= (type u3) TyType)) (and (and (and (and ($Is f@@50 (Tclass._System.___hFunc3 t0@@73 t1@@49 t2@@26 t3@@11)) (forall ((bx@@53 T@U) ) (!  (=> (and (= (type bx@@53) BoxType) ($IsBox bx@@53 u0@@2)) ($IsBox bx@@53 t0@@73)) :qid |unknown.0:0| :skolemid |882| :pattern ( ($IsBox bx@@53 u0@@2)) :pattern ( ($IsBox bx@@53 t0@@73)) ))) (forall ((bx@@54 T@U) ) (!  (=> (and (= (type bx@@54) BoxType) ($IsBox bx@@54 u1@@1)) ($IsBox bx@@54 t1@@49)) :qid |unknown.0:0| :skolemid |883| :pattern ( ($IsBox bx@@54 u1@@1)) :pattern ( ($IsBox bx@@54 t1@@49)) ))) (forall ((bx@@55 T@U) ) (!  (=> (and (= (type bx@@55) BoxType) ($IsBox bx@@55 u2@@0)) ($IsBox bx@@55 t2@@26)) :qid |unknown.0:0| :skolemid |884| :pattern ( ($IsBox bx@@55 u2@@0)) :pattern ( ($IsBox bx@@55 t2@@26)) ))) (forall ((bx@@56 T@U) ) (!  (=> (and (= (type bx@@56) BoxType) ($IsBox bx@@56 t3@@11)) ($IsBox bx@@56 u3)) :qid |unknown.0:0| :skolemid |885| :pattern ( ($IsBox bx@@56 t3@@11)) :pattern ( ($IsBox bx@@56 u3)) )))) ($Is f@@50 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3))) :qid |unknown.0:0| :skolemid |886| :pattern ( ($Is f@@50 (Tclass._System.___hFunc3 t0@@73 t1@@49 t2@@26 t3@@11)) ($Is f@@50 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3))) )))
(assert (forall ((f@@51 T@U) (t0@@74 T@U) (t1@@50 T@U) (t2@@27 T@U) (t3@@12 T@U) (h@@43 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@51) HandleTypeType) (= (type t0@@74) TyType)) (= (type t1@@50) TyType)) (= (type t2@@27) TyType)) (= (type t3@@12) TyType)) (= (type h@@43) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@43)) (= ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@74 t1@@50 t2@@27 t3@@12) h@@43) (forall ((bx0@@39 T@U) (bx1@@25 T@U) (bx2@@11 T@U) ) (!  (=> (and (and (= (type bx0@@39) BoxType) (= (type bx1@@25) BoxType)) (= (type bx2@@11) BoxType)) (=> (and (and (and (and ($IsBox bx0@@39 t0@@74) ($IsAllocBox bx0@@39 t0@@74 h@@43)) (and ($IsBox bx1@@25 t1@@50) ($IsAllocBox bx1@@25 t1@@50 h@@43))) (and ($IsBox bx2@@11 t2@@27) ($IsAllocBox bx2@@11 t2@@27 h@@43))) (Requires3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11)) (forall ((r@@21 T@U) ) (!  (=> (= (type r@@21) refType) (=> (and (not (= r@@21 null)) (U_2_bool (MapType0Select (Reads3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11) ($Box r@@21)))) (U_2_bool (MapType1Select (MapType0Select h@@43 r@@21) alloc)))) :qid |unknown.0:0| :skolemid |887| :pattern ( (MapType0Select (Reads3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11) ($Box r@@21))) )))) :qid |unknown.0:0| :skolemid |888| :pattern ( (Apply3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11)) :pattern ( (Reads3 t0@@74 t1@@50 t2@@27 t3@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11)) )))) :qid |unknown.0:0| :skolemid |889| :pattern ( ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@74 t1@@50 t2@@27 t3@@12) h@@43)) )))
(assert (forall ((f@@52 T@U) (t0@@75 T@U) (t1@@51 T@U) (t2@@28 T@U) (t3@@13 T@U) (h@@44 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@52) HandleTypeType) (= (type t0@@75) TyType)) (= (type t1@@51) TyType)) (= (type t2@@28) TyType)) (= (type t3@@13) TyType)) (= (type h@@44) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@44) ($IsAlloc f@@52 (Tclass._System.___hFunc3 t0@@75 t1@@51 t2@@28 t3@@13) h@@44))) (forall ((bx0@@40 T@U) (bx1@@26 T@U) (bx2@@12 T@U) ) (!  (=> (and (and (= (type bx0@@40) BoxType) (= (type bx1@@26) BoxType)) (= (type bx2@@12) BoxType)) (=> (and (and (and ($IsAllocBox bx0@@40 t0@@75 h@@44) ($IsAllocBox bx1@@26 t1@@51 h@@44)) ($IsAllocBox bx2@@12 t2@@28 h@@44)) (Requires3 t0@@75 t1@@51 t2@@28 t3@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12)) ($IsAllocBox (Apply3 t0@@75 t1@@51 t2@@28 t3@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12) t3@@13 h@@44))) :qid |unknown.0:0| :skolemid |890| :pattern ( (Apply3 t0@@75 t1@@51 t2@@28 t3@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12)) ))) :qid |unknown.0:0| :skolemid |891| :pattern ( ($IsAlloc f@@52 (Tclass._System.___hFunc3 t0@@75 t1@@51 t2@@28 t3@@13) h@@44)) )))
(assert (forall ((arg0@@185 T@U) (arg1@@92 T@U) (arg2@@44 T@U) (arg3@@23 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3 arg0@@185 arg1@@92 arg2@@44 arg3@@23)) TyType) :qid |funType:Tclass._System.___hPartialFunc3| :pattern ( (Tclass._System.___hPartialFunc3 arg0@@185 arg1@@92 arg2@@44 arg3@@23)) )))
(assert (forall ((|#$T0@@40| T@U) (|#$T1@@24| T@U) (|#$T2@@5| T@U) (|#$R@@53| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@40|) TyType) (= (type |#$T1@@24|) TyType)) (= (type |#$T2@@5|) TyType)) (= (type |#$R@@53|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$R@@53|)) Tagclass._System.___hPartialFunc3) (= (TagFamily (Tclass._System.___hPartialFunc3 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$R@@53|)) |tytagFamily$_#PartialFunc3|))) :qid |unknown.0:0| :skolemid |892| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$R@@53|)) )))
(assert (forall ((arg0@@186 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_0 arg0@@186)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_0| :pattern ( (Tclass._System.___hPartialFunc3_0 arg0@@186)) )))
(assert (forall ((|#$T0@@41| T@U) (|#$T1@@25| T@U) (|#$T2@@6| T@U) (|#$R@@54| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@41|) TyType) (= (type |#$T1@@25|) TyType)) (= (type |#$T2@@6|) TyType)) (= (type |#$R@@54|) TyType)) (= (Tclass._System.___hPartialFunc3_0 (Tclass._System.___hPartialFunc3 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$R@@54|)) |#$T0@@41|)) :qid |unknown.0:0| :skolemid |893| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$R@@54|)) )))
(assert (forall ((arg0@@187 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_1 arg0@@187)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_1| :pattern ( (Tclass._System.___hPartialFunc3_1 arg0@@187)) )))
(assert (forall ((|#$T0@@42| T@U) (|#$T1@@26| T@U) (|#$T2@@7| T@U) (|#$R@@55| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@42|) TyType) (= (type |#$T1@@26|) TyType)) (= (type |#$T2@@7|) TyType)) (= (type |#$R@@55|) TyType)) (= (Tclass._System.___hPartialFunc3_1 (Tclass._System.___hPartialFunc3 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$R@@55|)) |#$T1@@26|)) :qid |unknown.0:0| :skolemid |894| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$R@@55|)) )))
(assert (forall ((arg0@@188 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_2 arg0@@188)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_2| :pattern ( (Tclass._System.___hPartialFunc3_2 arg0@@188)) )))
(assert (forall ((|#$T0@@43| T@U) (|#$T1@@27| T@U) (|#$T2@@8| T@U) (|#$R@@56| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@43|) TyType) (= (type |#$T1@@27|) TyType)) (= (type |#$T2@@8|) TyType)) (= (type |#$R@@56|) TyType)) (= (Tclass._System.___hPartialFunc3_2 (Tclass._System.___hPartialFunc3 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$R@@56|)) |#$T2@@8|)) :qid |unknown.0:0| :skolemid |895| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$R@@56|)) )))
(assert (forall ((arg0@@189 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_3 arg0@@189)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_3| :pattern ( (Tclass._System.___hPartialFunc3_3 arg0@@189)) )))
(assert (forall ((|#$T0@@44| T@U) (|#$T1@@28| T@U) (|#$T2@@9| T@U) (|#$R@@57| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@44|) TyType) (= (type |#$T1@@28|) TyType)) (= (type |#$T2@@9|) TyType)) (= (type |#$R@@57|) TyType)) (= (Tclass._System.___hPartialFunc3_3 (Tclass._System.___hPartialFunc3 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$R@@57|)) |#$R@@57|)) :qid |unknown.0:0| :skolemid |896| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$R@@57|)) )))
(assert (forall ((|#$T0@@45| T@U) (|#$T1@@29| T@U) (|#$T2@@10| T@U) (|#$R@@58| T@U) (bx@@57 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@45|) TyType) (= (type |#$T1@@29|) TyType)) (= (type |#$T2@@10|) TyType)) (= (type |#$R@@58|) TyType)) (= (type bx@@57) BoxType)) ($IsBox bx@@57 (Tclass._System.___hPartialFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$R@@58|))) (and (= ($Box ($Unbox HandleTypeType bx@@57)) bx@@57) ($Is ($Unbox HandleTypeType bx@@57) (Tclass._System.___hPartialFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$R@@58|)))) :qid |unknown.0:0| :skolemid |897| :pattern ( ($IsBox bx@@57 (Tclass._System.___hPartialFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$R@@58|))) )))
(assert (forall ((|#$T0@@46| T@U) (|#$T1@@30| T@U) (|#$T2@@11| T@U) (|#$R@@59| T@U) (|f#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@46|) TyType) (= (type |#$T1@@30|) TyType)) (= (type |#$T2@@11|) TyType)) (= (type |#$R@@59|) TyType)) (= (type |f#0@@11|) HandleTypeType)) (= ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59|))  (and ($Is |f#0@@11| (Tclass._System.___hFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59|)) (forall ((|x0#0@@3| T@U) (|x1#0@@1| T@U) (|x2#0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@3|) BoxType) (= (type |x1#0@@1|) BoxType)) (= (type |x2#0|) BoxType)) (and (and ($IsBox |x0#0@@3| |#$T0@@46|) ($IsBox |x1#0@@1| |#$T1@@30|)) ($IsBox |x2#0| |#$T2@@11|))) (|Set#Equal| (Reads3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59| $OneHeap |f#0@@11| |x0#0@@3| |x1#0@@1| |x2#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |898| :no-pattern (type |x0#0@@3|) :no-pattern (type |x1#0@@1|) :no-pattern (type |x2#0|) :no-pattern (U_2_int |x0#0@@3|) :no-pattern (U_2_bool |x0#0@@3|) :no-pattern (U_2_int |x1#0@@1|) :no-pattern (U_2_bool |x1#0@@1|) :no-pattern (U_2_int |x2#0|) :no-pattern (U_2_bool |x2#0|) ))))) :qid |unknown.0:0| :skolemid |899| :pattern ( ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$R@@59|))) )))
(assert (forall ((|#$T0@@47| T@U) (|#$T1@@31| T@U) (|#$T2@@12| T@U) (|#$R@@60| T@U) (|f#0@@12| T@U) ($h@@14 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@47|) TyType) (= (type |#$T1@@31|) TyType)) (= (type |#$T2@@12|) TyType)) (= (type |#$R@@60|) TyType)) (= (type |f#0@@12|) HandleTypeType)) (= (type $h@@14) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$R@@60|) $h@@14) ($IsAlloc |f#0@@12| (Tclass._System.___hFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$R@@60|) $h@@14))) :qid |unknown.0:0| :skolemid |900| :pattern ( ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$R@@60|) $h@@14)) )))
(assert (forall ((arg0@@190 T@U) (arg1@@93 T@U) (arg2@@45 T@U) (arg3@@24 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3 arg0@@190 arg1@@93 arg2@@45 arg3@@24)) TyType) :qid |funType:Tclass._System.___hTotalFunc3| :pattern ( (Tclass._System.___hTotalFunc3 arg0@@190 arg1@@93 arg2@@45 arg3@@24)) )))
(assert (forall ((|#$T0@@48| T@U) (|#$T1@@32| T@U) (|#$T2@@13| T@U) (|#$R@@61| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@48|) TyType) (= (type |#$T1@@32|) TyType)) (= (type |#$T2@@13|) TyType)) (= (type |#$R@@61|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$R@@61|)) Tagclass._System.___hTotalFunc3) (= (TagFamily (Tclass._System.___hTotalFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$R@@61|)) |tytagFamily$_#TotalFunc3|))) :qid |unknown.0:0| :skolemid |901| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$R@@61|)) )))
(assert (forall ((arg0@@191 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_0 arg0@@191)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_0| :pattern ( (Tclass._System.___hTotalFunc3_0 arg0@@191)) )))
(assert (forall ((|#$T0@@49| T@U) (|#$T1@@33| T@U) (|#$T2@@14| T@U) (|#$R@@62| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@49|) TyType) (= (type |#$T1@@33|) TyType)) (= (type |#$T2@@14|) TyType)) (= (type |#$R@@62|) TyType)) (= (Tclass._System.___hTotalFunc3_0 (Tclass._System.___hTotalFunc3 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$R@@62|)) |#$T0@@49|)) :qid |unknown.0:0| :skolemid |902| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$R@@62|)) )))
(assert (forall ((arg0@@192 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_1 arg0@@192)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_1| :pattern ( (Tclass._System.___hTotalFunc3_1 arg0@@192)) )))
(assert (forall ((|#$T0@@50| T@U) (|#$T1@@34| T@U) (|#$T2@@15| T@U) (|#$R@@63| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@50|) TyType) (= (type |#$T1@@34|) TyType)) (= (type |#$T2@@15|) TyType)) (= (type |#$R@@63|) TyType)) (= (Tclass._System.___hTotalFunc3_1 (Tclass._System.___hTotalFunc3 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$R@@63|)) |#$T1@@34|)) :qid |unknown.0:0| :skolemid |903| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$R@@63|)) )))
(assert (forall ((arg0@@193 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_2 arg0@@193)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_2| :pattern ( (Tclass._System.___hTotalFunc3_2 arg0@@193)) )))
(assert (forall ((|#$T0@@51| T@U) (|#$T1@@35| T@U) (|#$T2@@16| T@U) (|#$R@@64| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@51|) TyType) (= (type |#$T1@@35|) TyType)) (= (type |#$T2@@16|) TyType)) (= (type |#$R@@64|) TyType)) (= (Tclass._System.___hTotalFunc3_2 (Tclass._System.___hTotalFunc3 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$R@@64|)) |#$T2@@16|)) :qid |unknown.0:0| :skolemid |904| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$R@@64|)) )))
(assert (forall ((arg0@@194 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_3 arg0@@194)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_3| :pattern ( (Tclass._System.___hTotalFunc3_3 arg0@@194)) )))
(assert (forall ((|#$T0@@52| T@U) (|#$T1@@36| T@U) (|#$T2@@17| T@U) (|#$R@@65| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@52|) TyType) (= (type |#$T1@@36|) TyType)) (= (type |#$T2@@17|) TyType)) (= (type |#$R@@65|) TyType)) (= (Tclass._System.___hTotalFunc3_3 (Tclass._System.___hTotalFunc3 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$R@@65|)) |#$R@@65|)) :qid |unknown.0:0| :skolemid |905| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$R@@65|)) )))
(assert (forall ((|#$T0@@53| T@U) (|#$T1@@37| T@U) (|#$T2@@18| T@U) (|#$R@@66| T@U) (bx@@58 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@53|) TyType) (= (type |#$T1@@37|) TyType)) (= (type |#$T2@@18|) TyType)) (= (type |#$R@@66|) TyType)) (= (type bx@@58) BoxType)) ($IsBox bx@@58 (Tclass._System.___hTotalFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$R@@66|))) (and (= ($Box ($Unbox HandleTypeType bx@@58)) bx@@58) ($Is ($Unbox HandleTypeType bx@@58) (Tclass._System.___hTotalFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$R@@66|)))) :qid |unknown.0:0| :skolemid |906| :pattern ( ($IsBox bx@@58 (Tclass._System.___hTotalFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$R@@66|))) )))
(assert (forall ((|#$T0@@54| T@U) (|#$T1@@38| T@U) (|#$T2@@19| T@U) (|#$R@@67| T@U) (|f#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@54|) TyType) (= (type |#$T1@@38|) TyType)) (= (type |#$T2@@19|) TyType)) (= (type |#$R@@67|) TyType)) (= (type |f#0@@13|) HandleTypeType)) (= ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67|))  (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67|)) (forall ((|x0#0@@4| T@U) (|x1#0@@2| T@U) (|x2#0@@0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@4|) BoxType) (= (type |x1#0@@2|) BoxType)) (= (type |x2#0@@0|) BoxType)) (and (and ($IsBox |x0#0@@4| |#$T0@@54|) ($IsBox |x1#0@@2| |#$T1@@38|)) ($IsBox |x2#0@@0| |#$T2@@19|))) (Requires3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67| $OneHeap |f#0@@13| |x0#0@@4| |x1#0@@2| |x2#0@@0|)) :qid |unknown.0:0| :skolemid |907| :no-pattern (type |x0#0@@4|) :no-pattern (type |x1#0@@2|) :no-pattern (type |x2#0@@0|) :no-pattern (U_2_int |x0#0@@4|) :no-pattern (U_2_bool |x0#0@@4|) :no-pattern (U_2_int |x1#0@@2|) :no-pattern (U_2_bool |x1#0@@2|) :no-pattern (U_2_int |x2#0@@0|) :no-pattern (U_2_bool |x2#0@@0|) ))))) :qid |unknown.0:0| :skolemid |908| :pattern ( ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$R@@67|))) )))
(assert (forall ((|#$T0@@55| T@U) (|#$T1@@39| T@U) (|#$T2@@20| T@U) (|#$R@@68| T@U) (|f#0@@14| T@U) ($h@@15 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@55|) TyType) (= (type |#$T1@@39|) TyType)) (= (type |#$T2@@20|) TyType)) (= (type |#$R@@68|) TyType)) (= (type |f#0@@14|) HandleTypeType)) (= (type $h@@15) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$R@@68|) $h@@15) ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$R@@68|) $h@@15))) :qid |unknown.0:0| :skolemid |909| :pattern ( ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$R@@68|) $h@@15)) )))
(assert (forall ((arg0@@195 T@U) (arg1@@94 T@U) (arg2@@46 T@U) (arg3@@25 T@U) (arg4@@14 T@U) ) (! (= (type (Tclass._System.___hFunc4 arg0@@195 arg1@@94 arg2@@46 arg3@@25 arg4@@14)) TyType) :qid |funType:Tclass._System.___hFunc4| :pattern ( (Tclass._System.___hFunc4 arg0@@195 arg1@@94 arg2@@46 arg3@@25 arg4@@14)) )))
(assert (forall ((|#$T0@@56| T@U) (|#$T1@@40| T@U) (|#$T2@@21| T@U) (|#$T3| T@U) (|#$R@@69| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@56|) TyType) (= (type |#$T1@@40|) TyType)) (= (type |#$T2@@21|) TyType)) (= (type |#$T3|) TyType)) (= (type |#$R@@69|) TyType)) (and (= (Tag (Tclass._System.___hFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3| |#$R@@69|)) Tagclass._System.___hFunc4) (= (TagFamily (Tclass._System.___hFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3| |#$R@@69|)) |tytagFamily$_#Func4|))) :qid |unknown.0:0| :skolemid |910| :pattern ( (Tclass._System.___hFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3| |#$R@@69|)) )))
(assert (forall ((arg0@@196 T@U) ) (! (= (type (Tclass._System.___hFunc4_0 arg0@@196)) TyType) :qid |funType:Tclass._System.___hFunc4_0| :pattern ( (Tclass._System.___hFunc4_0 arg0@@196)) )))
(assert (forall ((|#$T0@@57| T@U) (|#$T1@@41| T@U) (|#$T2@@22| T@U) (|#$T3@@0| T@U) (|#$R@@70| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@57|) TyType) (= (type |#$T1@@41|) TyType)) (= (type |#$T2@@22|) TyType)) (= (type |#$T3@@0|) TyType)) (= (type |#$R@@70|) TyType)) (= (Tclass._System.___hFunc4_0 (Tclass._System.___hFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@0| |#$R@@70|)) |#$T0@@57|)) :qid |unknown.0:0| :skolemid |911| :pattern ( (Tclass._System.___hFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@0| |#$R@@70|)) )))
(assert (forall ((arg0@@197 T@U) ) (! (= (type (Tclass._System.___hFunc4_1 arg0@@197)) TyType) :qid |funType:Tclass._System.___hFunc4_1| :pattern ( (Tclass._System.___hFunc4_1 arg0@@197)) )))
(assert (forall ((|#$T0@@58| T@U) (|#$T1@@42| T@U) (|#$T2@@23| T@U) (|#$T3@@1| T@U) (|#$R@@71| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@58|) TyType) (= (type |#$T1@@42|) TyType)) (= (type |#$T2@@23|) TyType)) (= (type |#$T3@@1|) TyType)) (= (type |#$R@@71|) TyType)) (= (Tclass._System.___hFunc4_1 (Tclass._System.___hFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@1| |#$R@@71|)) |#$T1@@42|)) :qid |unknown.0:0| :skolemid |912| :pattern ( (Tclass._System.___hFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@1| |#$R@@71|)) )))
(assert (forall ((arg0@@198 T@U) ) (! (= (type (Tclass._System.___hFunc4_2 arg0@@198)) TyType) :qid |funType:Tclass._System.___hFunc4_2| :pattern ( (Tclass._System.___hFunc4_2 arg0@@198)) )))
(assert (forall ((|#$T0@@59| T@U) (|#$T1@@43| T@U) (|#$T2@@24| T@U) (|#$T3@@2| T@U) (|#$R@@72| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@59|) TyType) (= (type |#$T1@@43|) TyType)) (= (type |#$T2@@24|) TyType)) (= (type |#$T3@@2|) TyType)) (= (type |#$R@@72|) TyType)) (= (Tclass._System.___hFunc4_2 (Tclass._System.___hFunc4 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$T3@@2| |#$R@@72|)) |#$T2@@24|)) :qid |unknown.0:0| :skolemid |913| :pattern ( (Tclass._System.___hFunc4 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$T3@@2| |#$R@@72|)) )))
(assert (forall ((arg0@@199 T@U) ) (! (= (type (Tclass._System.___hFunc4_3 arg0@@199)) TyType) :qid |funType:Tclass._System.___hFunc4_3| :pattern ( (Tclass._System.___hFunc4_3 arg0@@199)) )))
(assert (forall ((|#$T0@@60| T@U) (|#$T1@@44| T@U) (|#$T2@@25| T@U) (|#$T3@@3| T@U) (|#$R@@73| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@60|) TyType) (= (type |#$T1@@44|) TyType)) (= (type |#$T2@@25|) TyType)) (= (type |#$T3@@3|) TyType)) (= (type |#$R@@73|) TyType)) (= (Tclass._System.___hFunc4_3 (Tclass._System.___hFunc4 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$T3@@3| |#$R@@73|)) |#$T3@@3|)) :qid |unknown.0:0| :skolemid |914| :pattern ( (Tclass._System.___hFunc4 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$T3@@3| |#$R@@73|)) )))
(assert (forall ((arg0@@200 T@U) ) (! (= (type (Tclass._System.___hFunc4_4 arg0@@200)) TyType) :qid |funType:Tclass._System.___hFunc4_4| :pattern ( (Tclass._System.___hFunc4_4 arg0@@200)) )))
(assert (forall ((|#$T0@@61| T@U) (|#$T1@@45| T@U) (|#$T2@@26| T@U) (|#$T3@@4| T@U) (|#$R@@74| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@61|) TyType) (= (type |#$T1@@45|) TyType)) (= (type |#$T2@@26|) TyType)) (= (type |#$T3@@4|) TyType)) (= (type |#$R@@74|) TyType)) (= (Tclass._System.___hFunc4_4 (Tclass._System.___hFunc4 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$T3@@4| |#$R@@74|)) |#$R@@74|)) :qid |unknown.0:0| :skolemid |915| :pattern ( (Tclass._System.___hFunc4 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$T3@@4| |#$R@@74|)) )))
(assert (forall ((|#$T0@@62| T@U) (|#$T1@@46| T@U) (|#$T2@@27| T@U) (|#$T3@@5| T@U) (|#$R@@75| T@U) (bx@@59 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@62|) TyType) (= (type |#$T1@@46|) TyType)) (= (type |#$T2@@27|) TyType)) (= (type |#$T3@@5|) TyType)) (= (type |#$R@@75|) TyType)) (= (type bx@@59) BoxType)) ($IsBox bx@@59 (Tclass._System.___hFunc4 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$T3@@5| |#$R@@75|))) (and (= ($Box ($Unbox HandleTypeType bx@@59)) bx@@59) ($Is ($Unbox HandleTypeType bx@@59) (Tclass._System.___hFunc4 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$T3@@5| |#$R@@75|)))) :qid |unknown.0:0| :skolemid |916| :pattern ( ($IsBox bx@@59 (Tclass._System.___hFunc4 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$T3@@5| |#$R@@75|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@201 T@T) (arg1@@95 T@T) (arg2@@47 T@T) (arg3@@26 T@T) (arg4@@15 T@T) (arg5@@4 T@T) ) (! (= (Ctor (MapType5Type arg0@@201 arg1@@95 arg2@@47 arg3@@26 arg4@@15 arg5@@4)) 28) :qid |ctor:MapType5Type| )) (forall ((arg0@@202 T@T) (arg1@@96 T@T) (arg2@@48 T@T) (arg3@@27 T@T) (arg4@@16 T@T) (arg5@@5 T@T) ) (! (= (MapType5TypeInv0 (MapType5Type arg0@@202 arg1@@96 arg2@@48 arg3@@27 arg4@@16 arg5@@5)) arg0@@202) :qid |typeInv:MapType5TypeInv0| :pattern ( (MapType5Type arg0@@202 arg1@@96 arg2@@48 arg3@@27 arg4@@16 arg5@@5)) ))) (forall ((arg0@@203 T@T) (arg1@@97 T@T) (arg2@@49 T@T) (arg3@@28 T@T) (arg4@@17 T@T) (arg5@@6 T@T) ) (! (= (MapType5TypeInv1 (MapType5Type arg0@@203 arg1@@97 arg2@@49 arg3@@28 arg4@@17 arg5@@6)) arg1@@97) :qid |typeInv:MapType5TypeInv1| :pattern ( (MapType5Type arg0@@203 arg1@@97 arg2@@49 arg3@@28 arg4@@17 arg5@@6)) ))) (forall ((arg0@@204 T@T) (arg1@@98 T@T) (arg2@@50 T@T) (arg3@@29 T@T) (arg4@@18 T@T) (arg5@@7 T@T) ) (! (= (MapType5TypeInv2 (MapType5Type arg0@@204 arg1@@98 arg2@@50 arg3@@29 arg4@@18 arg5@@7)) arg2@@50) :qid |typeInv:MapType5TypeInv2| :pattern ( (MapType5Type arg0@@204 arg1@@98 arg2@@50 arg3@@29 arg4@@18 arg5@@7)) ))) (forall ((arg0@@205 T@T) (arg1@@99 T@T) (arg2@@51 T@T) (arg3@@30 T@T) (arg4@@19 T@T) (arg5@@8 T@T) ) (! (= (MapType5TypeInv3 (MapType5Type arg0@@205 arg1@@99 arg2@@51 arg3@@30 arg4@@19 arg5@@8)) arg3@@30) :qid |typeInv:MapType5TypeInv3| :pattern ( (MapType5Type arg0@@205 arg1@@99 arg2@@51 arg3@@30 arg4@@19 arg5@@8)) ))) (forall ((arg0@@206 T@T) (arg1@@100 T@T) (arg2@@52 T@T) (arg3@@31 T@T) (arg4@@20 T@T) (arg5@@9 T@T) ) (! (= (MapType5TypeInv4 (MapType5Type arg0@@206 arg1@@100 arg2@@52 arg3@@31 arg4@@20 arg5@@9)) arg4@@20) :qid |typeInv:MapType5TypeInv4| :pattern ( (MapType5Type arg0@@206 arg1@@100 arg2@@52 arg3@@31 arg4@@20 arg5@@9)) ))) (forall ((arg0@@207 T@T) (arg1@@101 T@T) (arg2@@53 T@T) (arg3@@32 T@T) (arg4@@21 T@T) (arg5@@10 T@T) ) (! (= (MapType5TypeInv5 (MapType5Type arg0@@207 arg1@@101 arg2@@53 arg3@@32 arg4@@21 arg5@@10)) arg5@@10) :qid |typeInv:MapType5TypeInv5| :pattern ( (MapType5Type arg0@@207 arg1@@101 arg2@@53 arg3@@32 arg4@@21 arg5@@10)) ))) (forall ((arg0@@208 T@U) (arg1@@102 T@U) (arg2@@54 T@U) (arg3@@33 T@U) (arg4@@22 T@U) (arg5@@11 T@U) ) (! (let ((aVar5 (MapType5TypeInv5 (type arg0@@208)))) (= (type (MapType5Select arg0@@208 arg1@@102 arg2@@54 arg3@@33 arg4@@22 arg5@@11)) aVar5)) :qid |funType:MapType5Select| :pattern ( (MapType5Select arg0@@208 arg1@@102 arg2@@54 arg3@@33 arg4@@22 arg5@@11)) ))) (forall ((arg0@@209 T@U) (arg1@@103 T@U) (arg2@@55 T@U) (arg3@@34 T@U) (arg4@@23 T@U) (arg5@@12 T@U) (arg6@@3 T@U) ) (! (let ((aVar5@@0 (type arg6@@3))) (let ((aVar4@@2 (type arg5@@12))) (let ((aVar3@@3 (type arg4@@23))) (let ((aVar2@@4 (type arg3@@34))) (let ((aVar1@@5 (type arg2@@55))) (let ((aVar0@@3 (type arg1@@103))) (= (type (MapType5Store arg0@@209 arg1@@103 arg2@@55 arg3@@34 arg4@@23 arg5@@12 arg6@@3)) (MapType5Type aVar0@@3 aVar1@@5 aVar2@@4 aVar3@@3 aVar4@@2 aVar5@@0)))))))) :qid |funType:MapType5Store| :pattern ( (MapType5Store arg0@@209 arg1@@103 arg2@@55 arg3@@34 arg4@@23 arg5@@12 arg6@@3)) ))) (forall ((m@@60 T@U) (x0@@20 T@U) (x1@@14 T@U) (x2@@10 T@U) (x3@@5 T@U) (x4 T@U) (val@@21 T@U) ) (! (let ((aVar5@@1 (MapType5TypeInv5 (type m@@60)))) (=> (= (type val@@21) aVar5@@1) (= (MapType5Select (MapType5Store m@@60 x0@@20 x1@@14 x2@@10 x3@@5 x4 val@@21) x0@@20 x1@@14 x2@@10 x3@@5 x4) val@@21))) :qid |mapAx0:MapType5Select| :weight 0 ))) (and (and (and (and (and (forall ((val@@22 T@U) (m@@61 T@U) (x0@@21 T@U) (x1@@15 T@U) (x2@@11 T@U) (x3@@6 T@U) (x4@@0 T@U) (y0@@15 T@U) (y1@@11 T@U) (y2@@8 T@U) (y3@@4 T@U) (y4 T@U) ) (!  (or (= x0@@21 y0@@15) (= (MapType5Select (MapType5Store m@@61 x0@@21 x1@@15 x2@@11 x3@@6 x4@@0 val@@22) y0@@15 y1@@11 y2@@8 y3@@4 y4) (MapType5Select m@@61 y0@@15 y1@@11 y2@@8 y3@@4 y4))) :qid |mapAx1:MapType5Select:0| :weight 0 )) (forall ((val@@23 T@U) (m@@62 T@U) (x0@@22 T@U) (x1@@16 T@U) (x2@@12 T@U) (x3@@7 T@U) (x4@@1 T@U) (y0@@16 T@U) (y1@@12 T@U) (y2@@9 T@U) (y3@@5 T@U) (y4@@0 T@U) ) (!  (or (= x1@@16 y1@@12) (= (MapType5Select (MapType5Store m@@62 x0@@22 x1@@16 x2@@12 x3@@7 x4@@1 val@@23) y0@@16 y1@@12 y2@@9 y3@@5 y4@@0) (MapType5Select m@@62 y0@@16 y1@@12 y2@@9 y3@@5 y4@@0))) :qid |mapAx1:MapType5Select:1| :weight 0 ))) (forall ((val@@24 T@U) (m@@63 T@U) (x0@@23 T@U) (x1@@17 T@U) (x2@@13 T@U) (x3@@8 T@U) (x4@@2 T@U) (y0@@17 T@U) (y1@@13 T@U) (y2@@10 T@U) (y3@@6 T@U) (y4@@1 T@U) ) (!  (or (= x2@@13 y2@@10) (= (MapType5Select (MapType5Store m@@63 x0@@23 x1@@17 x2@@13 x3@@8 x4@@2 val@@24) y0@@17 y1@@13 y2@@10 y3@@6 y4@@1) (MapType5Select m@@63 y0@@17 y1@@13 y2@@10 y3@@6 y4@@1))) :qid |mapAx1:MapType5Select:2| :weight 0 ))) (forall ((val@@25 T@U) (m@@64 T@U) (x0@@24 T@U) (x1@@18 T@U) (x2@@14 T@U) (x3@@9 T@U) (x4@@3 T@U) (y0@@18 T@U) (y1@@14 T@U) (y2@@11 T@U) (y3@@7 T@U) (y4@@2 T@U) ) (!  (or (= x3@@9 y3@@7) (= (MapType5Select (MapType5Store m@@64 x0@@24 x1@@18 x2@@14 x3@@9 x4@@3 val@@25) y0@@18 y1@@14 y2@@11 y3@@7 y4@@2) (MapType5Select m@@64 y0@@18 y1@@14 y2@@11 y3@@7 y4@@2))) :qid |mapAx1:MapType5Select:3| :weight 0 ))) (forall ((val@@26 T@U) (m@@65 T@U) (x0@@25 T@U) (x1@@19 T@U) (x2@@15 T@U) (x3@@10 T@U) (x4@@4 T@U) (y0@@19 T@U) (y1@@15 T@U) (y2@@12 T@U) (y3@@8 T@U) (y4@@3 T@U) ) (!  (or (= x4@@4 y4@@3) (= (MapType5Select (MapType5Store m@@65 x0@@25 x1@@19 x2@@15 x3@@10 x4@@4 val@@26) y0@@19 y1@@15 y2@@12 y3@@8 y4@@3) (MapType5Select m@@65 y0@@19 y1@@15 y2@@12 y3@@8 y4@@3))) :qid |mapAx1:MapType5Select:4| :weight 0 ))) (forall ((val@@27 T@U) (m@@66 T@U) (x0@@26 T@U) (x1@@20 T@U) (x2@@16 T@U) (x3@@11 T@U) (x4@@5 T@U) (y0@@20 T@U) (y1@@16 T@U) (y2@@13 T@U) (y3@@9 T@U) (y4@@4 T@U) ) (!  (or true (= (MapType5Select (MapType5Store m@@66 x0@@26 x1@@20 x2@@16 x3@@11 x4@@5 val@@27) y0@@20 y1@@16 y2@@13 y3@@9 y4@@4) (MapType5Select m@@66 y0@@20 y1@@16 y2@@13 y3@@9 y4@@4))) :qid |mapAx2:MapType5Select| :weight 0 )))) (forall ((arg0@@210 T@U) (arg1@@104 T@U) (arg2@@56 T@U) (arg3@@35 T@U) (arg4@@24 T@U) (arg5@@13 T@U) (arg6@@4 T@U) (arg7@@1 T@U) (arg8@@1 T@U) (arg9 T@U) (arg10 T@U) ) (! (= (type (Apply4 arg0@@210 arg1@@104 arg2@@56 arg3@@35 arg4@@24 arg5@@13 arg6@@4 arg7@@1 arg8@@1 arg9 arg10)) BoxType) :qid |funType:Apply4| :pattern ( (Apply4 arg0@@210 arg1@@104 arg2@@56 arg3@@35 arg4@@24 arg5@@13 arg6@@4 arg7@@1 arg8@@1 arg9 arg10)) ))) (forall ((arg0@@211 T@U) (arg1@@105 T@U) (arg2@@57 T@U) ) (! (= (type (Handle4 arg0@@211 arg1@@105 arg2@@57)) HandleTypeType) :qid |funType:Handle4| :pattern ( (Handle4 arg0@@211 arg1@@105 arg2@@57)) ))))
(assert (forall ((t0@@76 T@U) (t1@@52 T@U) (t2@@29 T@U) (t3@@14 T@U) (t4 T@U) (heap@@22 T@U) (h@@45 T@U) (r@@22 T@U) (rd@@11 T@U) (bx0@@41 T@U) (bx1@@27 T@U) (bx2@@13 T@U) (bx3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@76) TyType) (= (type t1@@52) TyType)) (= (type t2@@29) TyType)) (= (type t3@@14) TyType)) (= (type t4) TyType)) (= (type heap@@22) (MapType0Type refType MapType1Type))) (= (type h@@45) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@22) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@11) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@41) BoxType)) (= (type bx1@@27) BoxType)) (= (type bx2@@13) BoxType)) (= (type bx3) BoxType)) (= (Apply4 t0@@76 t1@@52 t2@@29 t3@@14 t4 heap@@22 (Handle4 h@@45 r@@22 rd@@11) bx0@@41 bx1@@27 bx2@@13 bx3) (MapType5Select h@@45 heap@@22 bx0@@41 bx1@@27 bx2@@13 bx3))) :qid |unknown.0:0| :skolemid |917| :pattern ( (Apply4 t0@@76 t1@@52 t2@@29 t3@@14 t4 heap@@22 (Handle4 h@@45 r@@22 rd@@11) bx0@@41 bx1@@27 bx2@@13 bx3)) )))
(assert (forall ((t0@@77 T@U) (t1@@53 T@U) (t2@@30 T@U) (t3@@15 T@U) (t4@@0 T@U) (heap@@23 T@U) (h@@46 T@U) (r@@23 T@U) (rd@@12 T@U) (bx0@@42 T@U) (bx1@@28 T@U) (bx2@@14 T@U) (bx3@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@77) TyType) (= (type t1@@53) TyType)) (= (type t2@@30) TyType)) (= (type t3@@15) TyType)) (= (type t4@@0) TyType)) (= (type heap@@23) (MapType0Type refType MapType1Type))) (= (type h@@46) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@23) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@12) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@42) BoxType)) (= (type bx1@@28) BoxType)) (= (type bx2@@14) BoxType)) (= (type bx3@@0) BoxType)) (U_2_bool (MapType5Select r@@23 heap@@23 bx0@@42 bx1@@28 bx2@@14 bx3@@0))) (Requires4 t0@@77 t1@@53 t2@@30 t3@@15 t4@@0 heap@@23 (Handle4 h@@46 r@@23 rd@@12) bx0@@42 bx1@@28 bx2@@14 bx3@@0)) :qid |unknown.0:0| :skolemid |918| :pattern ( (Requires4 t0@@77 t1@@53 t2@@30 t3@@15 t4@@0 heap@@23 (Handle4 h@@46 r@@23 rd@@12) bx0@@42 bx1@@28 bx2@@14 bx3@@0)) )))
(assert (forall ((arg0@@212 T@U) (arg1@@106 T@U) (arg2@@58 T@U) (arg3@@36 T@U) (arg4@@25 T@U) (arg5@@14 T@U) (arg6@@5 T@U) (arg7@@2 T@U) (arg8@@2 T@U) (arg9@@0 T@U) (arg10@@0 T@U) ) (! (= (type (Reads4 arg0@@212 arg1@@106 arg2@@58 arg3@@36 arg4@@25 arg5@@14 arg6@@5 arg7@@2 arg8@@2 arg9@@0 arg10@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads4| :pattern ( (Reads4 arg0@@212 arg1@@106 arg2@@58 arg3@@36 arg4@@25 arg5@@14 arg6@@5 arg7@@2 arg8@@2 arg9@@0 arg10@@0)) )))
(assert (forall ((t0@@78 T@U) (t1@@54 T@U) (t2@@31 T@U) (t3@@16 T@U) (t4@@1 T@U) (heap@@24 T@U) (h@@47 T@U) (r@@24 T@U) (rd@@13 T@U) (bx0@@43 T@U) (bx1@@29 T@U) (bx2@@15 T@U) (bx3@@1 T@U) (bx@@60 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@78) TyType) (= (type t1@@54) TyType)) (= (type t2@@31) TyType)) (= (type t3@@16) TyType)) (= (type t4@@1) TyType)) (= (type heap@@24) (MapType0Type refType MapType1Type))) (= (type h@@47) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@24) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@13) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@43) BoxType)) (= (type bx1@@29) BoxType)) (= (type bx2@@15) BoxType)) (= (type bx3@@1) BoxType)) (= (type bx@@60) BoxType)) (= (U_2_bool (MapType0Select (Reads4 t0@@78 t1@@54 t2@@31 t3@@16 t4@@1 heap@@24 (Handle4 h@@47 r@@24 rd@@13) bx0@@43 bx1@@29 bx2@@15 bx3@@1) bx@@60)) (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@24 bx0@@43 bx1@@29 bx2@@15 bx3@@1) bx@@60)))) :qid |unknown.0:0| :skolemid |919| :pattern ( (MapType0Select (Reads4 t0@@78 t1@@54 t2@@31 t3@@16 t4@@1 heap@@24 (Handle4 h@@47 r@@24 rd@@13) bx0@@43 bx1@@29 bx2@@15 bx3@@1) bx@@60)) )))
(assert (forall ((t0@@79 T@U) (t1@@55 T@U) (t2@@32 T@U) (t3@@17 T@U) (t4@@2 T@U) (h0@@24 T@U) (h1@@24 T@U) (f@@53 T@U) (bx0@@44 T@U) (bx1@@30 T@U) (bx2@@16 T@U) (bx3@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@79) TyType) (= (type t1@@55) TyType)) (= (type t2@@32) TyType)) (= (type t3@@17) TyType)) (= (type t4@@2) TyType)) (= (type h0@@24) (MapType0Type refType MapType1Type))) (= (type h1@@24) (MapType0Type refType MapType1Type))) (= (type f@@53) HandleTypeType)) (= (type bx0@@44) BoxType)) (= (type bx1@@30) BoxType)) (= (type bx2@@16) BoxType)) (= (type bx3@@2) BoxType)) (and (and (and ($HeapSucc h0@@24 h1@@24) (and ($IsGoodHeap h0@@24) ($IsGoodHeap h1@@24))) (and (and (and (and ($IsBox bx0@@44 t0@@79) ($IsBox bx1@@30 t1@@55)) ($IsBox bx2@@16 t2@@32)) ($IsBox bx3@@2 t3@@17)) ($Is f@@53 (Tclass._System.___hFunc4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2)))) (forall ((o@@68 T@U) (fld@@23 T@U) ) (! (let ((a@@106 (FieldTypeInv0 (type fld@@23)))) (=> (and (and (= (type o@@68) refType) (= (type fld@@23) (FieldType a@@106))) (and (not (= o@@68 null)) (U_2_bool (MapType0Select (Reads4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2 h0@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@2) ($Box o@@68))))) (= (MapType1Select (MapType0Select h0@@24 o@@68) fld@@23) (MapType1Select (MapType0Select h1@@24 o@@68) fld@@23)))) :qid |unknown.0:0| :skolemid |920| :no-pattern (type o@@68) :no-pattern (type fld@@23) :no-pattern (U_2_int o@@68) :no-pattern (U_2_bool o@@68) :no-pattern (U_2_int fld@@23) :no-pattern (U_2_bool fld@@23) )))) (= (Reads4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2 h0@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@2) (Reads4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2 h1@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@2))) :qid |unknown.0:0| :skolemid |921| :pattern ( ($HeapSucc h0@@24 h1@@24) (Reads4 t0@@79 t1@@55 t2@@32 t3@@17 t4@@2 h1@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@2)) )))
(assert (forall ((t0@@80 T@U) (t1@@56 T@U) (t2@@33 T@U) (t3@@18 T@U) (t4@@3 T@U) (h0@@25 T@U) (h1@@25 T@U) (f@@54 T@U) (bx0@@45 T@U) (bx1@@31 T@U) (bx2@@17 T@U) (bx3@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@80) TyType) (= (type t1@@56) TyType)) (= (type t2@@33) TyType)) (= (type t3@@18) TyType)) (= (type t4@@3) TyType)) (= (type h0@@25) (MapType0Type refType MapType1Type))) (= (type h1@@25) (MapType0Type refType MapType1Type))) (= (type f@@54) HandleTypeType)) (= (type bx0@@45) BoxType)) (= (type bx1@@31) BoxType)) (= (type bx2@@17) BoxType)) (= (type bx3@@3) BoxType)) (and (and (and ($HeapSucc h0@@25 h1@@25) (and ($IsGoodHeap h0@@25) ($IsGoodHeap h1@@25))) (and (and (and (and ($IsBox bx0@@45 t0@@80) ($IsBox bx1@@31 t1@@56)) ($IsBox bx2@@17 t2@@33)) ($IsBox bx3@@3 t3@@18)) ($Is f@@54 (Tclass._System.___hFunc4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3)))) (forall ((o@@69 T@U) (fld@@24 T@U) ) (! (let ((a@@107 (FieldTypeInv0 (type fld@@24)))) (=> (and (and (= (type o@@69) refType) (= (type fld@@24) (FieldType a@@107))) (and (not (= o@@69 null)) (U_2_bool (MapType0Select (Reads4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@3) ($Box o@@69))))) (= (MapType1Select (MapType0Select h0@@25 o@@69) fld@@24) (MapType1Select (MapType0Select h1@@25 o@@69) fld@@24)))) :qid |unknown.0:0| :skolemid |922| :no-pattern (type o@@69) :no-pattern (type fld@@24) :no-pattern (U_2_int o@@69) :no-pattern (U_2_bool o@@69) :no-pattern (U_2_int fld@@24) :no-pattern (U_2_bool fld@@24) )))) (= (Reads4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3 h0@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@3) (Reads4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@3))) :qid |unknown.0:0| :skolemid |923| :pattern ( ($HeapSucc h0@@25 h1@@25) (Reads4 t0@@80 t1@@56 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@3)) )))
(assert (forall ((t0@@81 T@U) (t1@@57 T@U) (t2@@34 T@U) (t3@@19 T@U) (t4@@4 T@U) (h0@@26 T@U) (h1@@26 T@U) (f@@55 T@U) (bx0@@46 T@U) (bx1@@32 T@U) (bx2@@18 T@U) (bx3@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@81) TyType) (= (type t1@@57) TyType)) (= (type t2@@34) TyType)) (= (type t3@@19) TyType)) (= (type t4@@4) TyType)) (= (type h0@@26) (MapType0Type refType MapType1Type))) (= (type h1@@26) (MapType0Type refType MapType1Type))) (= (type f@@55) HandleTypeType)) (= (type bx0@@46) BoxType)) (= (type bx1@@32) BoxType)) (= (type bx2@@18) BoxType)) (= (type bx3@@4) BoxType)) (and (and (and ($HeapSucc h0@@26 h1@@26) (and ($IsGoodHeap h0@@26) ($IsGoodHeap h1@@26))) (and (and (and (and ($IsBox bx0@@46 t0@@81) ($IsBox bx1@@32 t1@@57)) ($IsBox bx2@@18 t2@@34)) ($IsBox bx3@@4 t3@@19)) ($Is f@@55 (Tclass._System.___hFunc4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4)))) (forall ((o@@70 T@U) (fld@@25 T@U) ) (! (let ((a@@108 (FieldTypeInv0 (type fld@@25)))) (=> (and (and (= (type o@@70) refType) (= (type fld@@25) (FieldType a@@108))) (and (not (= o@@70 null)) (U_2_bool (MapType0Select (Reads4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@4) ($Box o@@70))))) (= (MapType1Select (MapType0Select h0@@26 o@@70) fld@@25) (MapType1Select (MapType0Select h1@@26 o@@70) fld@@25)))) :qid |unknown.0:0| :skolemid |924| :no-pattern (type o@@70) :no-pattern (type fld@@25) :no-pattern (U_2_int o@@70) :no-pattern (U_2_bool o@@70) :no-pattern (U_2_int fld@@25) :no-pattern (U_2_bool fld@@25) )))) (= (Requires4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@4) (Requires4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@4))) :qid |unknown.0:0| :skolemid |925| :pattern ( ($HeapSucc h0@@26 h1@@26) (Requires4 t0@@81 t1@@57 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@4)) )))
(assert (forall ((t0@@82 T@U) (t1@@58 T@U) (t2@@35 T@U) (t3@@20 T@U) (t4@@5 T@U) (h0@@27 T@U) (h1@@27 T@U) (f@@56 T@U) (bx0@@47 T@U) (bx1@@33 T@U) (bx2@@19 T@U) (bx3@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@82) TyType) (= (type t1@@58) TyType)) (= (type t2@@35) TyType)) (= (type t3@@20) TyType)) (= (type t4@@5) TyType)) (= (type h0@@27) (MapType0Type refType MapType1Type))) (= (type h1@@27) (MapType0Type refType MapType1Type))) (= (type f@@56) HandleTypeType)) (= (type bx0@@47) BoxType)) (= (type bx1@@33) BoxType)) (= (type bx2@@19) BoxType)) (= (type bx3@@5) BoxType)) (and (and (and ($HeapSucc h0@@27 h1@@27) (and ($IsGoodHeap h0@@27) ($IsGoodHeap h1@@27))) (and (and (and (and ($IsBox bx0@@47 t0@@82) ($IsBox bx1@@33 t1@@58)) ($IsBox bx2@@19 t2@@35)) ($IsBox bx3@@5 t3@@20)) ($Is f@@56 (Tclass._System.___hFunc4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5)))) (forall ((o@@71 T@U) (fld@@26 T@U) ) (! (let ((a@@109 (FieldTypeInv0 (type fld@@26)))) (=> (and (and (= (type o@@71) refType) (= (type fld@@26) (FieldType a@@109))) (and (not (= o@@71 null)) (U_2_bool (MapType0Select (Reads4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@5) ($Box o@@71))))) (= (MapType1Select (MapType0Select h0@@27 o@@71) fld@@26) (MapType1Select (MapType0Select h1@@27 o@@71) fld@@26)))) :qid |unknown.0:0| :skolemid |926| :no-pattern (type o@@71) :no-pattern (type fld@@26) :no-pattern (U_2_int o@@71) :no-pattern (U_2_bool o@@71) :no-pattern (U_2_int fld@@26) :no-pattern (U_2_bool fld@@26) )))) (= (Requires4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5 h0@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@5) (Requires4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@5))) :qid |unknown.0:0| :skolemid |927| :pattern ( ($HeapSucc h0@@27 h1@@27) (Requires4 t0@@82 t1@@58 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@5)) )))
(assert (forall ((t0@@83 T@U) (t1@@59 T@U) (t2@@36 T@U) (t3@@21 T@U) (t4@@6 T@U) (h0@@28 T@U) (h1@@28 T@U) (f@@57 T@U) (bx0@@48 T@U) (bx1@@34 T@U) (bx2@@20 T@U) (bx3@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@83) TyType) (= (type t1@@59) TyType)) (= (type t2@@36) TyType)) (= (type t3@@21) TyType)) (= (type t4@@6) TyType)) (= (type h0@@28) (MapType0Type refType MapType1Type))) (= (type h1@@28) (MapType0Type refType MapType1Type))) (= (type f@@57) HandleTypeType)) (= (type bx0@@48) BoxType)) (= (type bx1@@34) BoxType)) (= (type bx2@@20) BoxType)) (= (type bx3@@6) BoxType)) (and (and (and ($HeapSucc h0@@28 h1@@28) (and ($IsGoodHeap h0@@28) ($IsGoodHeap h1@@28))) (and (and (and (and ($IsBox bx0@@48 t0@@83) ($IsBox bx1@@34 t1@@59)) ($IsBox bx2@@20 t2@@36)) ($IsBox bx3@@6 t3@@21)) ($Is f@@57 (Tclass._System.___hFunc4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6)))) (forall ((o@@72 T@U) (fld@@27 T@U) ) (! (let ((a@@110 (FieldTypeInv0 (type fld@@27)))) (=> (and (and (= (type o@@72) refType) (= (type fld@@27) (FieldType a@@110))) (and (not (= o@@72 null)) (U_2_bool (MapType0Select (Reads4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6 h0@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@6) ($Box o@@72))))) (= (MapType1Select (MapType0Select h0@@28 o@@72) fld@@27) (MapType1Select (MapType0Select h1@@28 o@@72) fld@@27)))) :qid |unknown.0:0| :skolemid |928| :no-pattern (type o@@72) :no-pattern (type fld@@27) :no-pattern (U_2_int o@@72) :no-pattern (U_2_bool o@@72) :no-pattern (U_2_int fld@@27) :no-pattern (U_2_bool fld@@27) )))) (= (Apply4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6 h0@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@6) (Apply4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6 h1@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@6))) :qid |unknown.0:0| :skolemid |929| :pattern ( ($HeapSucc h0@@28 h1@@28) (Apply4 t0@@83 t1@@59 t2@@36 t3@@21 t4@@6 h1@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@6)) )))
(assert (forall ((t0@@84 T@U) (t1@@60 T@U) (t2@@37 T@U) (t3@@22 T@U) (t4@@7 T@U) (h0@@29 T@U) (h1@@29 T@U) (f@@58 T@U) (bx0@@49 T@U) (bx1@@35 T@U) (bx2@@21 T@U) (bx3@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@84) TyType) (= (type t1@@60) TyType)) (= (type t2@@37) TyType)) (= (type t3@@22) TyType)) (= (type t4@@7) TyType)) (= (type h0@@29) (MapType0Type refType MapType1Type))) (= (type h1@@29) (MapType0Type refType MapType1Type))) (= (type f@@58) HandleTypeType)) (= (type bx0@@49) BoxType)) (= (type bx1@@35) BoxType)) (= (type bx2@@21) BoxType)) (= (type bx3@@7) BoxType)) (and (and (and ($HeapSucc h0@@29 h1@@29) (and ($IsGoodHeap h0@@29) ($IsGoodHeap h1@@29))) (and (and (and (and ($IsBox bx0@@49 t0@@84) ($IsBox bx1@@35 t1@@60)) ($IsBox bx2@@21 t2@@37)) ($IsBox bx3@@7 t3@@22)) ($Is f@@58 (Tclass._System.___hFunc4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7)))) (forall ((o@@73 T@U) (fld@@28 T@U) ) (! (let ((a@@111 (FieldTypeInv0 (type fld@@28)))) (=> (and (and (= (type o@@73) refType) (= (type fld@@28) (FieldType a@@111))) (and (not (= o@@73 null)) (U_2_bool (MapType0Select (Reads4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@7) ($Box o@@73))))) (= (MapType1Select (MapType0Select h0@@29 o@@73) fld@@28) (MapType1Select (MapType0Select h1@@29 o@@73) fld@@28)))) :qid |unknown.0:0| :skolemid |930| :no-pattern (type o@@73) :no-pattern (type fld@@28) :no-pattern (U_2_int o@@73) :no-pattern (U_2_bool o@@73) :no-pattern (U_2_int fld@@28) :no-pattern (U_2_bool fld@@28) )))) (= (Apply4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7 h0@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@7) (Apply4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@7))) :qid |unknown.0:0| :skolemid |931| :pattern ( ($HeapSucc h0@@29 h1@@29) (Apply4 t0@@84 t1@@60 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@7)) )))
(assert (forall ((t0@@85 T@U) (t1@@61 T@U) (t2@@38 T@U) (t3@@23 T@U) (t4@@8 T@U) (heap@@25 T@U) (f@@59 T@U) (bx0@@50 T@U) (bx1@@36 T@U) (bx2@@22 T@U) (bx3@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@85) TyType) (= (type t1@@61) TyType)) (= (type t2@@38) TyType)) (= (type t3@@23) TyType)) (= (type t4@@8) TyType)) (= (type heap@@25) (MapType0Type refType MapType1Type))) (= (type f@@59) HandleTypeType)) (= (type bx0@@50) BoxType)) (= (type bx1@@36) BoxType)) (= (type bx2@@22) BoxType)) (= (type bx3@@8) BoxType)) (and ($IsGoodHeap heap@@25) (and (and (and (and ($IsBox bx0@@50 t0@@85) ($IsBox bx1@@36 t1@@61)) ($IsBox bx2@@22 t2@@38)) ($IsBox bx3@@8 t3@@23)) ($Is f@@59 (Tclass._System.___hFunc4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8))))) (= (|Set#Equal| (Reads4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8 heap@@25 f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |932| :pattern ( (Reads4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@8) ($IsGoodHeap heap@@25)) :pattern ( (Reads4 t0@@85 t1@@61 t2@@38 t3@@23 t4@@8 heap@@25 f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@8)) )))
(assert (forall ((t0@@86 T@U) (t1@@62 T@U) (t2@@39 T@U) (t3@@24 T@U) (t4@@9 T@U) (heap@@26 T@U) (f@@60 T@U) (bx0@@51 T@U) (bx1@@37 T@U) (bx2@@23 T@U) (bx3@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@86) TyType) (= (type t1@@62) TyType)) (= (type t2@@39) TyType)) (= (type t3@@24) TyType)) (= (type t4@@9) TyType)) (= (type heap@@26) (MapType0Type refType MapType1Type))) (= (type f@@60) HandleTypeType)) (= (type bx0@@51) BoxType)) (= (type bx1@@37) BoxType)) (= (type bx2@@23) BoxType)) (= (type bx3@@9) BoxType)) (and (and ($IsGoodHeap heap@@26) (and (and (and (and ($IsBox bx0@@51 t0@@86) ($IsBox bx1@@37 t1@@62)) ($IsBox bx2@@23 t2@@39)) ($IsBox bx3@@9 t3@@24)) ($Is f@@60 (Tclass._System.___hFunc4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9)))) (|Set#Equal| (Reads4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9) (|Set#Empty| BoxType)))) (= (Requires4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9) (Requires4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 heap@@26 f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9))) :qid |unknown.0:0| :skolemid |933| :pattern ( (Requires4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9) ($IsGoodHeap heap@@26)) :pattern ( (Requires4 t0@@86 t1@@62 t2@@39 t3@@24 t4@@9 heap@@26 f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@9)) )))
(assert (forall ((f@@61 T@U) (t0@@87 T@U) (t1@@63 T@U) (t2@@40 T@U) (t3@@25 T@U) (t4@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@61) HandleTypeType) (= (type t0@@87) TyType)) (= (type t1@@63) TyType)) (= (type t2@@40) TyType)) (= (type t3@@25) TyType)) (= (type t4@@10) TyType)) (= ($Is f@@61 (Tclass._System.___hFunc4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10)) (forall ((h@@48 T@U) (bx0@@52 T@U) (bx1@@38 T@U) (bx2@@24 T@U) (bx3@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@48) (MapType0Type refType MapType1Type)) (= (type bx0@@52) BoxType)) (= (type bx1@@38) BoxType)) (= (type bx2@@24) BoxType)) (= (type bx3@@10) BoxType)) (and (and ($IsGoodHeap h@@48) (and (and (and ($IsBox bx0@@52 t0@@87) ($IsBox bx1@@38 t1@@63)) ($IsBox bx2@@24 t2@@40)) ($IsBox bx3@@10 t3@@25))) (Requires4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24 bx3@@10))) ($IsBox (Apply4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24 bx3@@10) t4@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |934| :pattern ( (Apply4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24 bx3@@10)) )))) :qid |unknown.0:0| :skolemid |935| :pattern ( ($Is f@@61 (Tclass._System.___hFunc4 t0@@87 t1@@63 t2@@40 t3@@25 t4@@10))) )))
(assert (forall ((f@@62 T@U) (t0@@88 T@U) (t1@@64 T@U) (t2@@41 T@U) (t3@@26 T@U) (t4@@11 T@U) (u0@@3 T@U) (u1@@2 T@U) (u2@@1 T@U) (u3@@0 T@U) (u4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type f@@62) HandleTypeType) (= (type t0@@88) TyType)) (= (type t1@@64) TyType)) (= (type t2@@41) TyType)) (= (type t3@@26) TyType)) (= (type t4@@11) TyType)) (= (type u0@@3) TyType)) (= (type u1@@2) TyType)) (= (type u2@@1) TyType)) (= (type u3@@0) TyType)) (= (type u4) TyType)) (and (and (and (and (and ($Is f@@62 (Tclass._System.___hFunc4 t0@@88 t1@@64 t2@@41 t3@@26 t4@@11)) (forall ((bx@@61 T@U) ) (!  (=> (and (= (type bx@@61) BoxType) ($IsBox bx@@61 u0@@3)) ($IsBox bx@@61 t0@@88)) :qid |unknown.0:0| :skolemid |936| :pattern ( ($IsBox bx@@61 u0@@3)) :pattern ( ($IsBox bx@@61 t0@@88)) ))) (forall ((bx@@62 T@U) ) (!  (=> (and (= (type bx@@62) BoxType) ($IsBox bx@@62 u1@@2)) ($IsBox bx@@62 t1@@64)) :qid |unknown.0:0| :skolemid |937| :pattern ( ($IsBox bx@@62 u1@@2)) :pattern ( ($IsBox bx@@62 t1@@64)) ))) (forall ((bx@@63 T@U) ) (!  (=> (and (= (type bx@@63) BoxType) ($IsBox bx@@63 u2@@1)) ($IsBox bx@@63 t2@@41)) :qid |unknown.0:0| :skolemid |938| :pattern ( ($IsBox bx@@63 u2@@1)) :pattern ( ($IsBox bx@@63 t2@@41)) ))) (forall ((bx@@64 T@U) ) (!  (=> (and (= (type bx@@64) BoxType) ($IsBox bx@@64 u3@@0)) ($IsBox bx@@64 t3@@26)) :qid |unknown.0:0| :skolemid |939| :pattern ( ($IsBox bx@@64 u3@@0)) :pattern ( ($IsBox bx@@64 t3@@26)) ))) (forall ((bx@@65 T@U) ) (!  (=> (and (= (type bx@@65) BoxType) ($IsBox bx@@65 t4@@11)) ($IsBox bx@@65 u4)) :qid |unknown.0:0| :skolemid |940| :pattern ( ($IsBox bx@@65 t4@@11)) :pattern ( ($IsBox bx@@65 u4)) )))) ($Is f@@62 (Tclass._System.___hFunc4 u0@@3 u1@@2 u2@@1 u3@@0 u4))) :qid |unknown.0:0| :skolemid |941| :pattern ( ($Is f@@62 (Tclass._System.___hFunc4 t0@@88 t1@@64 t2@@41 t3@@26 t4@@11)) ($Is f@@62 (Tclass._System.___hFunc4 u0@@3 u1@@2 u2@@1 u3@@0 u4))) )))
(assert (forall ((f@@63 T@U) (t0@@89 T@U) (t1@@65 T@U) (t2@@42 T@U) (t3@@27 T@U) (t4@@12 T@U) (h@@49 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@63) HandleTypeType) (= (type t0@@89) TyType)) (= (type t1@@65) TyType)) (= (type t2@@42) TyType)) (= (type t3@@27) TyType)) (= (type t4@@12) TyType)) (= (type h@@49) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@49)) (= ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12) h@@49) (forall ((bx0@@53 T@U) (bx1@@39 T@U) (bx2@@25 T@U) (bx3@@11 T@U) ) (!  (=> (and (and (and (= (type bx0@@53) BoxType) (= (type bx1@@39) BoxType)) (= (type bx2@@25) BoxType)) (= (type bx3@@11) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@53 t0@@89) ($IsAllocBox bx0@@53 t0@@89 h@@49)) (and ($IsBox bx1@@39 t1@@65) ($IsAllocBox bx1@@39 t1@@65 h@@49))) (and ($IsBox bx2@@25 t2@@42) ($IsAllocBox bx2@@25 t2@@42 h@@49))) (and ($IsBox bx3@@11 t3@@27) ($IsAllocBox bx3@@11 t3@@27 h@@49))) (Requires4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11)) (forall ((r@@25 T@U) ) (!  (=> (= (type r@@25) refType) (=> (and (not (= r@@25 null)) (U_2_bool (MapType0Select (Reads4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11) ($Box r@@25)))) (U_2_bool (MapType1Select (MapType0Select h@@49 r@@25) alloc)))) :qid |unknown.0:0| :skolemid |942| :pattern ( (MapType0Select (Reads4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11) ($Box r@@25))) )))) :qid |unknown.0:0| :skolemid |943| :pattern ( (Apply4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11)) :pattern ( (Reads4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@11)) )))) :qid |unknown.0:0| :skolemid |944| :pattern ( ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@89 t1@@65 t2@@42 t3@@27 t4@@12) h@@49)) )))
(assert (forall ((f@@64 T@U) (t0@@90 T@U) (t1@@66 T@U) (t2@@43 T@U) (t3@@28 T@U) (t4@@13 T@U) (h@@50 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@64) HandleTypeType) (= (type t0@@90) TyType)) (= (type t1@@66) TyType)) (= (type t2@@43) TyType)) (= (type t3@@28) TyType)) (= (type t4@@13) TyType)) (= (type h@@50) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@50) ($IsAlloc f@@64 (Tclass._System.___hFunc4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13) h@@50))) (forall ((bx0@@54 T@U) (bx1@@40 T@U) (bx2@@26 T@U) (bx3@@12 T@U) ) (!  (=> (and (and (and (= (type bx0@@54) BoxType) (= (type bx1@@40) BoxType)) (= (type bx2@@26) BoxType)) (= (type bx3@@12) BoxType)) (=> (and (and (and (and ($IsAllocBox bx0@@54 t0@@90 h@@50) ($IsAllocBox bx1@@40 t1@@66 h@@50)) ($IsAllocBox bx2@@26 t2@@43 h@@50)) ($IsAllocBox bx3@@12 t3@@28 h@@50)) (Requires4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26 bx3@@12)) ($IsAllocBox (Apply4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26 bx3@@12) t4@@13 h@@50))) :qid |unknown.0:0| :skolemid |945| :pattern ( (Apply4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26 bx3@@12)) ))) :qid |unknown.0:0| :skolemid |946| :pattern ( ($IsAlloc f@@64 (Tclass._System.___hFunc4 t0@@90 t1@@66 t2@@43 t3@@28 t4@@13) h@@50)) )))
(assert (forall ((arg0@@213 T@U) (arg1@@107 T@U) (arg2@@59 T@U) (arg3@@37 T@U) (arg4@@26 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4 arg0@@213 arg1@@107 arg2@@59 arg3@@37 arg4@@26)) TyType) :qid |funType:Tclass._System.___hPartialFunc4| :pattern ( (Tclass._System.___hPartialFunc4 arg0@@213 arg1@@107 arg2@@59 arg3@@37 arg4@@26)) )))
(assert (forall ((|#$T0@@63| T@U) (|#$T1@@47| T@U) (|#$T2@@28| T@U) (|#$T3@@6| T@U) (|#$R@@76| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@63|) TyType) (= (type |#$T1@@47|) TyType)) (= (type |#$T2@@28|) TyType)) (= (type |#$T3@@6|) TyType)) (= (type |#$R@@76|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc4 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$T3@@6| |#$R@@76|)) Tagclass._System.___hPartialFunc4) (= (TagFamily (Tclass._System.___hPartialFunc4 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$T3@@6| |#$R@@76|)) |tytagFamily$_#PartialFunc4|))) :qid |unknown.0:0| :skolemid |947| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$T3@@6| |#$R@@76|)) )))
(assert (forall ((arg0@@214 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_0 arg0@@214)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_0| :pattern ( (Tclass._System.___hPartialFunc4_0 arg0@@214)) )))
(assert (forall ((|#$T0@@64| T@U) (|#$T1@@48| T@U) (|#$T2@@29| T@U) (|#$T3@@7| T@U) (|#$R@@77| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@64|) TyType) (= (type |#$T1@@48|) TyType)) (= (type |#$T2@@29|) TyType)) (= (type |#$T3@@7|) TyType)) (= (type |#$R@@77|) TyType)) (= (Tclass._System.___hPartialFunc4_0 (Tclass._System.___hPartialFunc4 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$T3@@7| |#$R@@77|)) |#$T0@@64|)) :qid |unknown.0:0| :skolemid |948| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$T3@@7| |#$R@@77|)) )))
(assert (forall ((arg0@@215 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_1 arg0@@215)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_1| :pattern ( (Tclass._System.___hPartialFunc4_1 arg0@@215)) )))
(assert (forall ((|#$T0@@65| T@U) (|#$T1@@49| T@U) (|#$T2@@30| T@U) (|#$T3@@8| T@U) (|#$R@@78| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@65|) TyType) (= (type |#$T1@@49|) TyType)) (= (type |#$T2@@30|) TyType)) (= (type |#$T3@@8|) TyType)) (= (type |#$R@@78|) TyType)) (= (Tclass._System.___hPartialFunc4_1 (Tclass._System.___hPartialFunc4 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$T3@@8| |#$R@@78|)) |#$T1@@49|)) :qid |unknown.0:0| :skolemid |949| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$T3@@8| |#$R@@78|)) )))
(assert (forall ((arg0@@216 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_2 arg0@@216)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_2| :pattern ( (Tclass._System.___hPartialFunc4_2 arg0@@216)) )))
(assert (forall ((|#$T0@@66| T@U) (|#$T1@@50| T@U) (|#$T2@@31| T@U) (|#$T3@@9| T@U) (|#$R@@79| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@66|) TyType) (= (type |#$T1@@50|) TyType)) (= (type |#$T2@@31|) TyType)) (= (type |#$T3@@9|) TyType)) (= (type |#$R@@79|) TyType)) (= (Tclass._System.___hPartialFunc4_2 (Tclass._System.___hPartialFunc4 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$T3@@9| |#$R@@79|)) |#$T2@@31|)) :qid |unknown.0:0| :skolemid |950| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$T3@@9| |#$R@@79|)) )))
(assert (forall ((arg0@@217 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_3 arg0@@217)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_3| :pattern ( (Tclass._System.___hPartialFunc4_3 arg0@@217)) )))
(assert (forall ((|#$T0@@67| T@U) (|#$T1@@51| T@U) (|#$T2@@32| T@U) (|#$T3@@10| T@U) (|#$R@@80| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@67|) TyType) (= (type |#$T1@@51|) TyType)) (= (type |#$T2@@32|) TyType)) (= (type |#$T3@@10|) TyType)) (= (type |#$R@@80|) TyType)) (= (Tclass._System.___hPartialFunc4_3 (Tclass._System.___hPartialFunc4 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$T3@@10| |#$R@@80|)) |#$T3@@10|)) :qid |unknown.0:0| :skolemid |951| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$T3@@10| |#$R@@80|)) )))
(assert (forall ((arg0@@218 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_4 arg0@@218)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_4| :pattern ( (Tclass._System.___hPartialFunc4_4 arg0@@218)) )))
(assert (forall ((|#$T0@@68| T@U) (|#$T1@@52| T@U) (|#$T2@@33| T@U) (|#$T3@@11| T@U) (|#$R@@81| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@68|) TyType) (= (type |#$T1@@52|) TyType)) (= (type |#$T2@@33|) TyType)) (= (type |#$T3@@11|) TyType)) (= (type |#$R@@81|) TyType)) (= (Tclass._System.___hPartialFunc4_4 (Tclass._System.___hPartialFunc4 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$T3@@11| |#$R@@81|)) |#$R@@81|)) :qid |unknown.0:0| :skolemid |952| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$T3@@11| |#$R@@81|)) )))
(assert (forall ((|#$T0@@69| T@U) (|#$T1@@53| T@U) (|#$T2@@34| T@U) (|#$T3@@12| T@U) (|#$R@@82| T@U) (bx@@66 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@69|) TyType) (= (type |#$T1@@53|) TyType)) (= (type |#$T2@@34|) TyType)) (= (type |#$T3@@12|) TyType)) (= (type |#$R@@82|) TyType)) (= (type bx@@66) BoxType)) ($IsBox bx@@66 (Tclass._System.___hPartialFunc4 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$T3@@12| |#$R@@82|))) (and (= ($Box ($Unbox HandleTypeType bx@@66)) bx@@66) ($Is ($Unbox HandleTypeType bx@@66) (Tclass._System.___hPartialFunc4 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$T3@@12| |#$R@@82|)))) :qid |unknown.0:0| :skolemid |953| :pattern ( ($IsBox bx@@66 (Tclass._System.___hPartialFunc4 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$T3@@12| |#$R@@82|))) )))
(assert (forall ((|#$T0@@70| T@U) (|#$T1@@54| T@U) (|#$T2@@35| T@U) (|#$T3@@13| T@U) (|#$R@@83| T@U) (|f#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@70|) TyType) (= (type |#$T1@@54|) TyType)) (= (type |#$T2@@35|) TyType)) (= (type |#$T3@@13|) TyType)) (= (type |#$R@@83|) TyType)) (= (type |f#0@@15|) HandleTypeType)) (= ($Is |f#0@@15| (Tclass._System.___hPartialFunc4 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$R@@83|))  (and ($Is |f#0@@15| (Tclass._System.___hFunc4 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$R@@83|)) (forall ((|x0#0@@5| T@U) (|x1#0@@3| T@U) (|x2#0@@1| T@U) (|x3#0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@5|) BoxType) (= (type |x1#0@@3|) BoxType)) (= (type |x2#0@@1|) BoxType)) (= (type |x3#0|) BoxType)) (and (and (and ($IsBox |x0#0@@5| |#$T0@@70|) ($IsBox |x1#0@@3| |#$T1@@54|)) ($IsBox |x2#0@@1| |#$T2@@35|)) ($IsBox |x3#0| |#$T3@@13|))) (|Set#Equal| (Reads4 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$R@@83| $OneHeap |f#0@@15| |x0#0@@5| |x1#0@@3| |x2#0@@1| |x3#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |954| :no-pattern (type |x0#0@@5|) :no-pattern (type |x1#0@@3|) :no-pattern (type |x2#0@@1|) :no-pattern (type |x3#0|) :no-pattern (U_2_int |x0#0@@5|) :no-pattern (U_2_bool |x0#0@@5|) :no-pattern (U_2_int |x1#0@@3|) :no-pattern (U_2_bool |x1#0@@3|) :no-pattern (U_2_int |x2#0@@1|) :no-pattern (U_2_bool |x2#0@@1|) :no-pattern (U_2_int |x3#0|) :no-pattern (U_2_bool |x3#0|) ))))) :qid |unknown.0:0| :skolemid |955| :pattern ( ($Is |f#0@@15| (Tclass._System.___hPartialFunc4 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@13| |#$R@@83|))) )))
(assert (forall ((|#$T0@@71| T@U) (|#$T1@@55| T@U) (|#$T2@@36| T@U) (|#$T3@@14| T@U) (|#$R@@84| T@U) (|f#0@@16| T@U) ($h@@16 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@71|) TyType) (= (type |#$T1@@55|) TyType)) (= (type |#$T2@@36|) TyType)) (= (type |#$T3@@14|) TyType)) (= (type |#$R@@84|) TyType)) (= (type |f#0@@16|) HandleTypeType)) (= (type $h@@16) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc4 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@16) ($IsAlloc |f#0@@16| (Tclass._System.___hFunc4 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@16))) :qid |unknown.0:0| :skolemid |956| :pattern ( ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc4 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$T3@@14| |#$R@@84|) $h@@16)) )))
(assert (forall ((arg0@@219 T@U) (arg1@@108 T@U) (arg2@@60 T@U) (arg3@@38 T@U) (arg4@@27 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4 arg0@@219 arg1@@108 arg2@@60 arg3@@38 arg4@@27)) TyType) :qid |funType:Tclass._System.___hTotalFunc4| :pattern ( (Tclass._System.___hTotalFunc4 arg0@@219 arg1@@108 arg2@@60 arg3@@38 arg4@@27)) )))
(assert (forall ((|#$T0@@72| T@U) (|#$T1@@56| T@U) (|#$T2@@37| T@U) (|#$T3@@15| T@U) (|#$R@@85| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@72|) TyType) (= (type |#$T1@@56|) TyType)) (= (type |#$T2@@37|) TyType)) (= (type |#$T3@@15|) TyType)) (= (type |#$R@@85|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc4 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@15| |#$R@@85|)) Tagclass._System.___hTotalFunc4) (= (TagFamily (Tclass._System.___hTotalFunc4 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@15| |#$R@@85|)) |tytagFamily$_#TotalFunc4|))) :qid |unknown.0:0| :skolemid |957| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@15| |#$R@@85|)) )))
(assert (forall ((arg0@@220 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_0 arg0@@220)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_0| :pattern ( (Tclass._System.___hTotalFunc4_0 arg0@@220)) )))
(assert (forall ((|#$T0@@73| T@U) (|#$T1@@57| T@U) (|#$T2@@38| T@U) (|#$T3@@16| T@U) (|#$R@@86| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@73|) TyType) (= (type |#$T1@@57|) TyType)) (= (type |#$T2@@38|) TyType)) (= (type |#$T3@@16|) TyType)) (= (type |#$R@@86|) TyType)) (= (Tclass._System.___hTotalFunc4_0 (Tclass._System.___hTotalFunc4 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$T3@@16| |#$R@@86|)) |#$T0@@73|)) :qid |unknown.0:0| :skolemid |958| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$T3@@16| |#$R@@86|)) )))
(assert (forall ((arg0@@221 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_1 arg0@@221)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_1| :pattern ( (Tclass._System.___hTotalFunc4_1 arg0@@221)) )))
(assert (forall ((|#$T0@@74| T@U) (|#$T1@@58| T@U) (|#$T2@@39| T@U) (|#$T3@@17| T@U) (|#$R@@87| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@74|) TyType) (= (type |#$T1@@58|) TyType)) (= (type |#$T2@@39|) TyType)) (= (type |#$T3@@17|) TyType)) (= (type |#$R@@87|) TyType)) (= (Tclass._System.___hTotalFunc4_1 (Tclass._System.___hTotalFunc4 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$T3@@17| |#$R@@87|)) |#$T1@@58|)) :qid |unknown.0:0| :skolemid |959| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$T3@@17| |#$R@@87|)) )))
(assert (forall ((arg0@@222 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_2 arg0@@222)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_2| :pattern ( (Tclass._System.___hTotalFunc4_2 arg0@@222)) )))
(assert (forall ((|#$T0@@75| T@U) (|#$T1@@59| T@U) (|#$T2@@40| T@U) (|#$T3@@18| T@U) (|#$R@@88| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@75|) TyType) (= (type |#$T1@@59|) TyType)) (= (type |#$T2@@40|) TyType)) (= (type |#$T3@@18|) TyType)) (= (type |#$R@@88|) TyType)) (= (Tclass._System.___hTotalFunc4_2 (Tclass._System.___hTotalFunc4 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$T3@@18| |#$R@@88|)) |#$T2@@40|)) :qid |unknown.0:0| :skolemid |960| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$T3@@18| |#$R@@88|)) )))
(assert (forall ((arg0@@223 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_3 arg0@@223)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_3| :pattern ( (Tclass._System.___hTotalFunc4_3 arg0@@223)) )))
(assert (forall ((|#$T0@@76| T@U) (|#$T1@@60| T@U) (|#$T2@@41| T@U) (|#$T3@@19| T@U) (|#$R@@89| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@76|) TyType) (= (type |#$T1@@60|) TyType)) (= (type |#$T2@@41|) TyType)) (= (type |#$T3@@19|) TyType)) (= (type |#$R@@89|) TyType)) (= (Tclass._System.___hTotalFunc4_3 (Tclass._System.___hTotalFunc4 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$T3@@19| |#$R@@89|)) |#$T3@@19|)) :qid |unknown.0:0| :skolemid |961| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$T3@@19| |#$R@@89|)) )))
(assert (forall ((arg0@@224 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_4 arg0@@224)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_4| :pattern ( (Tclass._System.___hTotalFunc4_4 arg0@@224)) )))
(assert (forall ((|#$T0@@77| T@U) (|#$T1@@61| T@U) (|#$T2@@42| T@U) (|#$T3@@20| T@U) (|#$R@@90| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@77|) TyType) (= (type |#$T1@@61|) TyType)) (= (type |#$T2@@42|) TyType)) (= (type |#$T3@@20|) TyType)) (= (type |#$R@@90|) TyType)) (= (Tclass._System.___hTotalFunc4_4 (Tclass._System.___hTotalFunc4 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$T3@@20| |#$R@@90|)) |#$R@@90|)) :qid |unknown.0:0| :skolemid |962| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$T3@@20| |#$R@@90|)) )))
(assert (forall ((|#$T0@@78| T@U) (|#$T1@@62| T@U) (|#$T2@@43| T@U) (|#$T3@@21| T@U) (|#$R@@91| T@U) (bx@@67 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@78|) TyType) (= (type |#$T1@@62|) TyType)) (= (type |#$T2@@43|) TyType)) (= (type |#$T3@@21|) TyType)) (= (type |#$R@@91|) TyType)) (= (type bx@@67) BoxType)) ($IsBox bx@@67 (Tclass._System.___hTotalFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$T3@@21| |#$R@@91|))) (and (= ($Box ($Unbox HandleTypeType bx@@67)) bx@@67) ($Is ($Unbox HandleTypeType bx@@67) (Tclass._System.___hTotalFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$T3@@21| |#$R@@91|)))) :qid |unknown.0:0| :skolemid |963| :pattern ( ($IsBox bx@@67 (Tclass._System.___hTotalFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$T3@@21| |#$R@@91|))) )))
(assert (forall ((|#$T0@@79| T@U) (|#$T1@@63| T@U) (|#$T2@@44| T@U) (|#$T3@@22| T@U) (|#$R@@92| T@U) (|f#0@@17| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@79|) TyType) (= (type |#$T1@@63|) TyType)) (= (type |#$T2@@44|) TyType)) (= (type |#$T3@@22|) TyType)) (= (type |#$R@@92|) TyType)) (= (type |f#0@@17|) HandleTypeType)) (= ($Is |f#0@@17| (Tclass._System.___hTotalFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$R@@92|))  (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$R@@92|)) (forall ((|x0#0@@6| T@U) (|x1#0@@4| T@U) (|x2#0@@2| T@U) (|x3#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@6|) BoxType) (= (type |x1#0@@4|) BoxType)) (= (type |x2#0@@2|) BoxType)) (= (type |x3#0@@0|) BoxType)) (and (and (and ($IsBox |x0#0@@6| |#$T0@@79|) ($IsBox |x1#0@@4| |#$T1@@63|)) ($IsBox |x2#0@@2| |#$T2@@44|)) ($IsBox |x3#0@@0| |#$T3@@22|))) (Requires4 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$R@@92| $OneHeap |f#0@@17| |x0#0@@6| |x1#0@@4| |x2#0@@2| |x3#0@@0|)) :qid |unknown.0:0| :skolemid |964| :no-pattern (type |x0#0@@6|) :no-pattern (type |x1#0@@4|) :no-pattern (type |x2#0@@2|) :no-pattern (type |x3#0@@0|) :no-pattern (U_2_int |x0#0@@6|) :no-pattern (U_2_bool |x0#0@@6|) :no-pattern (U_2_int |x1#0@@4|) :no-pattern (U_2_bool |x1#0@@4|) :no-pattern (U_2_int |x2#0@@2|) :no-pattern (U_2_bool |x2#0@@2|) :no-pattern (U_2_int |x3#0@@0|) :no-pattern (U_2_bool |x3#0@@0|) ))))) :qid |unknown.0:0| :skolemid |965| :pattern ( ($Is |f#0@@17| (Tclass._System.___hTotalFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@22| |#$R@@92|))) )))
(assert (forall ((|#$T0@@80| T@U) (|#$T1@@64| T@U) (|#$T2@@45| T@U) (|#$T3@@23| T@U) (|#$R@@93| T@U) (|f#0@@18| T@U) ($h@@17 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@80|) TyType) (= (type |#$T1@@64|) TyType)) (= (type |#$T2@@45|) TyType)) (= (type |#$T3@@23|) TyType)) (= (type |#$R@@93|) TyType)) (= (type |f#0@@18|) HandleTypeType)) (= (type $h@@17) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@17) ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@17))) :qid |unknown.0:0| :skolemid |966| :pattern ( ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$T3@@23| |#$R@@93|) $h@@17)) )))
(assert (forall ((arg0@@225 T@U) ) (! (= (type (DatatypeCtorId arg0@@225)) DtCtorIdType) :qid |funType:DatatypeCtorId| :pattern ( (DatatypeCtorId arg0@@225)) )))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (!  (=> (and (= (type |a#0#0#0|) BoxType) (= (type |a#0#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)) :qid |unknown.0:0| :skolemid |967| :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) )))
(assert (forall ((d@@0 T@U) ) (!  (=> (= (type d@@0) DatatypeTypeType) (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))) :qid |unknown.0:0| :skolemid |968| :pattern ( (_System.Tuple2.___hMake2_q d@@0)) )))
(assert (forall ((d@@1 T@U) ) (!  (=> (and (= (type d@@1) DatatypeTypeType) (_System.Tuple2.___hMake2_q d@@1)) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (!  (and (and (= (type |a#1#0#0|) BoxType) (= (type |a#1#1#0|) BoxType)) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))) :qid |unknown.0:0| :skolemid |969| :no-pattern (type |a#1#0#0|) :no-pattern (type |a#1#1#0|) :no-pattern (U_2_int |a#1#0#0|) :no-pattern (U_2_bool |a#1#0#0|) :no-pattern (U_2_int |a#1#1#0|) :no-pattern (U_2_bool |a#1#1#0|) ))) :qid |unknown.0:0| :skolemid |970| :pattern ( (_System.Tuple2.___hMake2_q d@@1)) )))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0|) TyType) (= (type |_System._tuple#2$T1|) TyType)) (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) |tytagFamily$_tuple#2|))) :qid |unknown.0:0| :skolemid |971| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) )))
(assert (forall ((arg0@@226 T@U) ) (! (= (type (Tclass._System.Tuple2_0 arg0@@226)) TyType) :qid |funType:Tclass._System.Tuple2_0| :pattern ( (Tclass._System.Tuple2_0 arg0@@226)) )))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0@@0|) TyType) (= (type |_System._tuple#2$T1@@0|) TyType)) (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)) |_System._tuple#2$T0@@0|)) :qid |unknown.0:0| :skolemid |972| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)) )))
(assert (forall ((arg0@@227 T@U) ) (! (= (type (Tclass._System.Tuple2_1 arg0@@227)) TyType) :qid |funType:Tclass._System.Tuple2_1| :pattern ( (Tclass._System.Tuple2_1 arg0@@227)) )))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0@@1|) TyType) (= (type |_System._tuple#2$T1@@1|) TyType)) (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|)) |_System._tuple#2$T1@@1|)) :qid |unknown.0:0| :skolemid |973| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|)) )))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) (bx@@68 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@2|) TyType) (= (type |_System._tuple#2$T1@@2|) TyType)) (= (type bx@@68) BoxType)) ($IsBox bx@@68 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@68)) bx@@68) ($Is ($Unbox DatatypeTypeType bx@@68) (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)))) :qid |unknown.0:0| :skolemid |974| :pattern ( ($IsBox bx@@68 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))) )))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@3|) TyType) (= (type |_System._tuple#2$T1@@3|) TyType)) (= (type |a#2#0#0|) BoxType)) (= (type |a#2#1#0|) BoxType)) (= ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@3|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@3|)))) :qid |unknown.0:0| :skolemid |975| :pattern ( ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))) )))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (|a#3#0#0| T@U) (|a#3#1#0| T@U) ($h@@18 T@U) ) (!  (=> (and (and (and (and (and (= (type |_System._tuple#2$T0@@4|) TyType) (= (type |_System._tuple#2$T1@@4|) TyType)) (= (type |a#3#0#0|) BoxType)) (= (type |a#3#1#0|) BoxType)) (= (type $h@@18) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@18)) (= ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|) $h@@18)  (and ($IsAllocBox |a#3#0#0| |_System._tuple#2$T0@@4| $h@@18) ($IsAllocBox |a#3#1#0| |_System._tuple#2$T1@@4| $h@@18)))) :qid |unknown.0:0| :skolemid |976| :pattern ( ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|) $h@@18)) )))
(assert (forall ((d@@2 T@U) (|_System._tuple#2$T0@@5| T@U) ($h@@19 T@U) ) (!  (=> (and (and (and (= (type d@@2) DatatypeTypeType) (= (type |_System._tuple#2$T0@@5|) TyType)) (= (type $h@@19) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@19) (and (_System.Tuple2.___hMake2_q d@@2) (exists ((|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (type |_System._tuple#2$T1@@5|) TyType) ($IsAlloc d@@2 (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|) $h@@19)) :qid |unknown.0:0| :skolemid |977| :pattern ( ($IsAlloc d@@2 (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|) $h@@19)) ))))) ($IsAllocBox (_System.Tuple2._0 d@@2) |_System._tuple#2$T0@@5| $h@@19)) :qid |unknown.0:0| :skolemid |978| :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@2) |_System._tuple#2$T0@@5| $h@@19)) )))
(assert (forall ((d@@3 T@U) (|_System._tuple#2$T1@@6| T@U) ($h@@20 T@U) ) (!  (=> (and (and (and (= (type d@@3) DatatypeTypeType) (= (type |_System._tuple#2$T1@@6|) TyType)) (= (type $h@@20) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@20) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|_System._tuple#2$T0@@6| T@U) ) (!  (and (= (type |_System._tuple#2$T0@@6|) TyType) ($IsAlloc d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@20)) :qid |unknown.0:0| :skolemid |979| :pattern ( ($IsAlloc d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@20)) ))))) ($IsAllocBox (_System.Tuple2._1 d@@3) |_System._tuple#2$T1@@6| $h@@20)) :qid |unknown.0:0| :skolemid |980| :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@3) |_System._tuple#2$T1@@6| $h@@20)) )))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (!  (=> (and (= (type |a#4#0#0|) BoxType) (= (type |a#4#1#0|) BoxType)) (= (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|)) (Lit (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)))) :qid |unknown.0:0| :skolemid |981| :pattern ( (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|))) )))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (!  (=> (and (= (type |a#5#0#0|) BoxType) (= (type |a#5#1#0|) BoxType)) (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) |a#5#0#0|)) :qid |unknown.0:0| :skolemid |982| :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) )))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (!  (=> (and (= (type |a#6#0#0|) BoxType) (= (type |a#6#1#0|) BoxType)) (< (BoxRank |a#6#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)))) :qid |unknown.0:0| :skolemid |983| :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) )))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (!  (=> (and (= (type |a#7#0#0|) BoxType) (= (type |a#7#1#0|) BoxType)) (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) |a#7#1#0|)) :qid |unknown.0:0| :skolemid |984| :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) )))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (!  (=> (and (= (type |a#8#0#0|) BoxType) (= (type |a#8#1#0|) BoxType)) (< (BoxRank |a#8#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)))) :qid |unknown.0:0| :skolemid |985| :pattern ( (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)) )))
(assert (forall ((d@@4 T@U) ) (!  (=> (and (= (type d@@4) DatatypeTypeType) (|$IsA#_System.Tuple2| d@@4)) (_System.Tuple2.___hMake2_q d@@4)) :qid |unknown.0:0| :skolemid |986| :pattern ( (|$IsA#_System.Tuple2| d@@4)) )))
(assert (forall ((|_System._tuple#2$T0@@7| T@U) (|_System._tuple#2$T1@@7| T@U) (d@@5 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@7|) TyType) (= (type |_System._tuple#2$T1@@7|) TyType)) (= (type d@@5) DatatypeTypeType)) ($Is d@@5 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|))) (_System.Tuple2.___hMake2_q d@@5)) :qid |unknown.0:0| :skolemid |987| :pattern ( (_System.Tuple2.___hMake2_q d@@5) ($Is d@@5 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|))) )))
(assert (forall ((a@@112 T@U) (b@@62 T@U) ) (!  (=> (and (and (= (type a@@112) DatatypeTypeType) (= (type b@@62) DatatypeTypeType)) true) (= (|_System.Tuple2#Equal| a@@112 b@@62)  (and (= (_System.Tuple2._0 a@@112) (_System.Tuple2._0 b@@62)) (= (_System.Tuple2._1 a@@112) (_System.Tuple2._1 b@@62))))) :qid |unknown.0:0| :skolemid |988| :pattern ( (|_System.Tuple2#Equal| a@@112 b@@62)) )))
(assert (forall ((a@@113 T@U) (b@@63 T@U) ) (!  (=> (and (= (type a@@113) DatatypeTypeType) (= (type b@@63) DatatypeTypeType)) (= (|_System.Tuple2#Equal| a@@113 b@@63) (= a@@113 b@@63))) :qid |unknown.0:0| :skolemid |989| :pattern ( (|_System.Tuple2#Equal| a@@113 b@@63)) )))
(assert (= (type |#_System._tuple#0._#Make0|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_System._tuple#0._#Make0|) |##_System._tuple#0._#Make0|))
(assert (forall ((d@@6 T@U) ) (!  (=> (= (type d@@6) DatatypeTypeType) (= (_System.Tuple0.___hMake0_q d@@6) (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|))) :qid |unknown.0:0| :skolemid |990| :pattern ( (_System.Tuple0.___hMake0_q d@@6)) )))
(assert (forall ((d@@7 T@U) ) (!  (=> (and (= (type d@@7) DatatypeTypeType) (_System.Tuple0.___hMake0_q d@@7)) (= d@@7 |#_System._tuple#0._#Make0|)) :qid |unknown.0:0| :skolemid |991| :pattern ( (_System.Tuple0.___hMake0_q d@@7)) )))
(assert (= (type Tclass._System.Tuple0) TyType))
(assert (= (Tag Tclass._System.Tuple0) Tagclass._System.Tuple0))
(assert (= (TagFamily Tclass._System.Tuple0) |tytagFamily$_tuple#0|))
(assert (forall ((bx@@69 T@U) ) (!  (=> (and (= (type bx@@69) BoxType) ($IsBox bx@@69 Tclass._System.Tuple0)) (and (= ($Box ($Unbox DatatypeTypeType bx@@69)) bx@@69) ($Is ($Unbox DatatypeTypeType bx@@69) Tclass._System.Tuple0))) :qid |unknown.0:0| :skolemid |992| :pattern ( ($IsBox bx@@69 Tclass._System.Tuple0)) )))
(assert ($Is |#_System._tuple#0._#Make0| Tclass._System.Tuple0))
(assert (forall (($h@@21 T@U) ) (!  (=> (and (= (type $h@@21) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@21)) ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@21)) :qid |DafnyPreludebpl.545:12| :skolemid |993| :pattern ( ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@21)) )))
(assert (= |#_System._tuple#0._#Make0| (Lit |#_System._tuple#0._#Make0|)))
(assert (forall ((d@@8 T@U) ) (!  (=> (and (= (type d@@8) DatatypeTypeType) (|$IsA#_System.Tuple0| d@@8)) (_System.Tuple0.___hMake0_q d@@8)) :qid |unknown.0:0| :skolemid |994| :pattern ( (|$IsA#_System.Tuple0| d@@8)) )))
(assert (forall ((d@@9 T@U) ) (!  (=> (and (= (type d@@9) DatatypeTypeType) ($Is d@@9 Tclass._System.Tuple0)) (_System.Tuple0.___hMake0_q d@@9)) :qid |unknown.0:0| :skolemid |995| :pattern ( (_System.Tuple0.___hMake0_q d@@9) ($Is d@@9 Tclass._System.Tuple0)) )))
(assert (forall ((a@@114 T@U) (b@@64 T@U) ) (!  (=> (and (and (= (type a@@114) DatatypeTypeType) (= (type b@@64) DatatypeTypeType)) true) (= (|_System.Tuple0#Equal| a@@114 b@@64) true)) :qid |unknown.0:0| :skolemid |996| :pattern ( (|_System.Tuple0#Equal| a@@114 b@@64)) )))
(assert (forall ((a@@115 T@U) (b@@65 T@U) ) (!  (=> (and (= (type a@@115) DatatypeTypeType) (= (type b@@65) DatatypeTypeType)) (= (|_System.Tuple0#Equal| a@@115 b@@65) (= a@@115 b@@65))) :qid |unknown.0:0| :skolemid |997| :pattern ( (|_System.Tuple0#Equal| a@@115 b@@65)) )))
(assert (forall ((arg0@@228 Int) ) (! (= (type (|#MutableMapModel.Slot.Slot| arg0@@228)) DatatypeTypeType) :qid |funType:#MutableMapModel.Slot.Slot| :pattern ( (|#MutableMapModel.Slot.Slot| arg0@@228)) )))
(assert (forall ((|a#14#0#0| Int) ) (! (= (DatatypeCtorId (|#MutableMapModel.Slot.Slot| |a#14#0#0|)) |##MutableMapModel.Slot.Slot|) :qid |MutableMapModelidfy.74:30| :skolemid |998| :pattern ( (|#MutableMapModel.Slot.Slot| |a#14#0#0|)) )))
(assert (forall ((d@@10 T@U) ) (!  (=> (= (type d@@10) DatatypeTypeType) (= (MutableMapModel.Slot.Slot_q d@@10) (= (DatatypeCtorId d@@10) |##MutableMapModel.Slot.Slot|))) :qid |unknown.0:0| :skolemid |999| :pattern ( (MutableMapModel.Slot.Slot_q d@@10)) )))
(assert (forall ((d@@11 T@U) ) (!  (=> (and (= (type d@@11) DatatypeTypeType) (MutableMapModel.Slot.Slot_q d@@11)) (exists ((|a#15#0#0| Int) ) (! (= d@@11 (|#MutableMapModel.Slot.Slot| |a#15#0#0|)) :qid |MutableMapModelidfy.74:30| :skolemid |1000| ))) :qid |unknown.0:0| :skolemid |1001| :pattern ( (MutableMapModel.Slot.Slot_q d@@11)) )))
(assert (= (type Tclass.MutableMapModel.Slot) TyType))
(assert (= (Tag Tclass.MutableMapModel.Slot) Tagclass.MutableMapModel.Slot))
(assert (= (TagFamily Tclass.MutableMapModel.Slot) tytagFamily$Slot))
(assert (forall ((bx@@70 T@U) ) (!  (=> (and (= (type bx@@70) BoxType) ($IsBox bx@@70 Tclass.MutableMapModel.Slot)) (and (= ($Box ($Unbox DatatypeTypeType bx@@70)) bx@@70) ($Is ($Unbox DatatypeTypeType bx@@70) Tclass.MutableMapModel.Slot))) :qid |unknown.0:0| :skolemid |1002| :pattern ( ($IsBox bx@@70 Tclass.MutableMapModel.Slot)) )))
(assert (forall ((|a#16#0#0| Int) ) (! (= ($Is (|#MutableMapModel.Slot.Slot| |a#16#0#0|) Tclass.MutableMapModel.Slot) ($Is (int_2_U |a#16#0#0|) Tclass._System.nat)) :qid |MutableMapModelidfy.74:30| :skolemid |1003| :pattern ( ($Is (|#MutableMapModel.Slot.Slot| |a#16#0#0|) Tclass.MutableMapModel.Slot)) )))
(assert (forall ((|a#17#0#0| Int) ($h@@22 T@U) ) (!  (=> (and (= (type $h@@22) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@22)) (= ($IsAlloc (|#MutableMapModel.Slot.Slot| |a#17#0#0|) Tclass.MutableMapModel.Slot $h@@22) ($IsAlloc (int_2_U |a#17#0#0|) Tclass._System.nat $h@@22))) :qid |MutableMapModelidfy.74:30| :skolemid |1004| :pattern ( ($IsAlloc (|#MutableMapModel.Slot.Slot| |a#17#0#0|) Tclass.MutableMapModel.Slot $h@@22)) )))
(assert (forall ((d@@12 T@U) ($h@@23 T@U) ) (!  (=> (and (and (= (type d@@12) DatatypeTypeType) (= (type $h@@23) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@23) (and (MutableMapModel.Slot.Slot_q d@@12) ($IsAlloc d@@12 Tclass.MutableMapModel.Slot $h@@23)))) ($IsAlloc (int_2_U (MutableMapModel.Slot.slot d@@12)) Tclass._System.nat $h@@23)) :qid |unknown.0:0| :skolemid |1005| :pattern ( ($IsAlloc (int_2_U (MutableMapModel.Slot.slot d@@12)) Tclass._System.nat $h@@23)) )))
(assert (forall ((|a#18#0#0| Int) ) (! (= (|#MutableMapModel.Slot.Slot| (LitInt |a#18#0#0|)) (Lit (|#MutableMapModel.Slot.Slot| |a#18#0#0|))) :qid |MutableMapModelidfy.74:30| :skolemid |1006| :pattern ( (|#MutableMapModel.Slot.Slot| (LitInt |a#18#0#0|))) )))
(assert (forall ((|a#19#0#0| Int) ) (! (= (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |a#19#0#0|)) |a#19#0#0|) :qid |MutableMapModelidfy.74:30| :skolemid |1007| :pattern ( (|#MutableMapModel.Slot.Slot| |a#19#0#0|)) )))
(assert (forall ((d@@13 T@U) ) (!  (=> (and (= (type d@@13) DatatypeTypeType) (|$IsA#MutableMapModel.Slot| d@@13)) (MutableMapModel.Slot.Slot_q d@@13)) :qid |unknown.0:0| :skolemid |1008| :pattern ( (|$IsA#MutableMapModel.Slot| d@@13)) )))
(assert (forall ((d@@14 T@U) ) (!  (=> (and (= (type d@@14) DatatypeTypeType) ($Is d@@14 Tclass.MutableMapModel.Slot)) (MutableMapModel.Slot.Slot_q d@@14)) :qid |unknown.0:0| :skolemid |1009| :pattern ( (MutableMapModel.Slot.Slot_q d@@14) ($Is d@@14 Tclass.MutableMapModel.Slot)) )))
(assert (forall ((a@@116 T@U) (b@@66 T@U) ) (!  (=> (and (and (= (type a@@116) DatatypeTypeType) (= (type b@@66) DatatypeTypeType)) true) (= (|MutableMapModel.Slot#Equal| a@@116 b@@66) (= (MutableMapModel.Slot.slot a@@116) (MutableMapModel.Slot.slot b@@66)))) :qid |unknown.0:0| :skolemid |1010| :pattern ( (|MutableMapModel.Slot#Equal| a@@116 b@@66)) )))
(assert (forall ((a@@117 T@U) (b@@67 T@U) ) (!  (=> (and (= (type a@@117) DatatypeTypeType) (= (type b@@67) DatatypeTypeType)) (= (|MutableMapModel.Slot#Equal| a@@117 b@@67) (= a@@117 b@@67))) :qid |unknown.0:0| :skolemid |1011| :pattern ( (|MutableMapModel.Slot#Equal| a@@117 b@@67)) )))
(assert (= (type |#MutableMapModel.Item.Empty|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#MutableMapModel.Item.Empty|) |##MutableMapModel.Item.Empty|))
(assert (forall ((d@@15 T@U) ) (!  (=> (= (type d@@15) DatatypeTypeType) (= (MutableMapModel.Item.Empty_q d@@15) (= (DatatypeCtorId d@@15) |##MutableMapModel.Item.Empty|))) :qid |unknown.0:0| :skolemid |1012| :pattern ( (MutableMapModel.Item.Empty_q d@@15)) )))
(assert (forall ((d@@16 T@U) ) (!  (=> (and (= (type d@@16) DatatypeTypeType) (MutableMapModel.Item.Empty_q d@@16)) (= d@@16 |#MutableMapModel.Item.Empty|)) :qid |unknown.0:0| :skolemid |1013| :pattern ( (MutableMapModel.Item.Empty_q d@@16)) )))
(assert (forall ((arg0@@229 T@U) ) (! (= (type (Tclass.MutableMapModel.Item arg0@@229)) TyType) :qid |funType:Tclass.MutableMapModel.Item| :pattern ( (Tclass.MutableMapModel.Item arg0@@229)) )))
(assert (forall ((MutableMapModel.Item$V T@U) ) (!  (=> (= (type MutableMapModel.Item$V) TyType) (and (= (Tag (Tclass.MutableMapModel.Item MutableMapModel.Item$V)) Tagclass.MutableMapModel.Item) (= (TagFamily (Tclass.MutableMapModel.Item MutableMapModel.Item$V)) tytagFamily$Item))) :qid |unknown.0:0| :skolemid |1014| :pattern ( (Tclass.MutableMapModel.Item MutableMapModel.Item$V)) )))
(assert (forall ((arg0@@230 T@U) ) (! (= (type (Tclass.MutableMapModel.Item_0 arg0@@230)) TyType) :qid |funType:Tclass.MutableMapModel.Item_0| :pattern ( (Tclass.MutableMapModel.Item_0 arg0@@230)) )))
(assert (forall ((MutableMapModel.Item$V@@0 T@U) ) (!  (=> (= (type MutableMapModel.Item$V@@0) TyType) (= (Tclass.MutableMapModel.Item_0 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@0)) MutableMapModel.Item$V@@0)) :qid |unknown.0:0| :skolemid |1015| :pattern ( (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@0)) )))
(assert (forall ((MutableMapModel.Item$V@@1 T@U) (bx@@71 T@U) ) (!  (=> (and (and (= (type MutableMapModel.Item$V@@1) TyType) (= (type bx@@71) BoxType)) ($IsBox bx@@71 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@71)) bx@@71) ($Is ($Unbox DatatypeTypeType bx@@71) (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@1)))) :qid |unknown.0:0| :skolemid |1016| :pattern ( ($IsBox bx@@71 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@1))) )))
(assert (forall ((MutableMapModel.Item$V@@2 T@U) ) (!  (=> (= (type MutableMapModel.Item$V@@2) TyType) ($Is |#MutableMapModel.Item.Empty| (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@2))) :qid |unknown.0:0| :skolemid |1017| :pattern ( ($Is |#MutableMapModel.Item.Empty| (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@2))) )))
(assert (forall ((MutableMapModel.Item$V@@3 T@U) ($h@@24 T@U) ) (!  (=> (and (and (= (type MutableMapModel.Item$V@@3) TyType) (= (type $h@@24) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@24)) ($IsAlloc |#MutableMapModel.Item.Empty| (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@3) $h@@24)) :qid |unknown.0:0| :skolemid |1018| :pattern ( ($IsAlloc |#MutableMapModel.Item.Empty| (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@3) $h@@24)) )))
(assert (= |#MutableMapModel.Item.Empty| (Lit |#MutableMapModel.Item.Empty|)))
(assert (forall ((arg0@@231 Int) (arg1@@109 T@U) ) (! (= (type (|#MutableMapModel.Item.Entry| arg0@@231 arg1@@109)) DatatypeTypeType) :qid |funType:#MutableMapModel.Item.Entry| :pattern ( (|#MutableMapModel.Item.Entry| arg0@@231 arg1@@109)) )))
(assert (forall ((|a#25#0#0| Int) (|a#25#1#0| T@U) ) (!  (=> (= (type |a#25#1#0|) BoxType) (= (DatatypeCtorId (|#MutableMapModel.Item.Entry| |a#25#0#0| |a#25#1#0|)) |##MutableMapModel.Item.Entry|)) :qid |MutableMapModelidfy.76:36| :skolemid |1019| :pattern ( (|#MutableMapModel.Item.Entry| |a#25#0#0| |a#25#1#0|)) )))
(assert (forall ((d@@17 T@U) ) (!  (=> (= (type d@@17) DatatypeTypeType) (= (MutableMapModel.Item.Entry_q d@@17) (= (DatatypeCtorId d@@17) |##MutableMapModel.Item.Entry|))) :qid |unknown.0:0| :skolemid |1020| :pattern ( (MutableMapModel.Item.Entry_q d@@17)) )))
(assert (forall ((d@@18 T@U) ) (!  (=> (and (= (type d@@18) DatatypeTypeType) (MutableMapModel.Item.Entry_q d@@18)) (exists ((|a#26#0#0| Int) (|a#26#1#0| T@U) ) (!  (and (= (type |a#26#1#0|) BoxType) (= d@@18 (|#MutableMapModel.Item.Entry| |a#26#0#0| |a#26#1#0|))) :qid |MutableMapModelidfy.76:36| :skolemid |1021| :no-pattern (type |a#26#1#0|) :no-pattern (U_2_int |a#26#1#0|) :no-pattern (U_2_bool |a#26#1#0|) ))) :qid |unknown.0:0| :skolemid |1022| :pattern ( (MutableMapModel.Item.Entry_q d@@18)) )))
(assert (= (type Tclass.NativeTypes.uint64) TyType))
(assert (= (Tag Tclass.NativeTypes.uint64) Tagclass.NativeTypes.uint64))
(assert (= (TagFamily Tclass.NativeTypes.uint64) tytagFamily$uint64))
(assert (forall ((bx@@72 T@U) ) (!  (=> (and (= (type bx@@72) BoxType) ($IsBox bx@@72 Tclass.NativeTypes.uint64)) (and (= ($Box ($Unbox intType bx@@72)) bx@@72) ($Is ($Unbox intType bx@@72) Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |1023| :pattern ( ($IsBox bx@@72 Tclass.NativeTypes.uint64)) )))
(assert (forall ((MutableMapModel.Item$V@@4 T@U) (|a#27#0#0| Int) (|a#27#1#0| T@U) ) (!  (=> (and (= (type MutableMapModel.Item$V@@4) TyType) (= (type |a#27#1#0|) BoxType)) (= ($Is (|#MutableMapModel.Item.Entry| |a#27#0#0| |a#27#1#0|) (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@4))  (and ($Is (int_2_U |a#27#0#0|) Tclass.NativeTypes.uint64) ($IsBox |a#27#1#0| MutableMapModel.Item$V@@4)))) :qid |unknown.0:0| :skolemid |1024| :pattern ( ($Is (|#MutableMapModel.Item.Entry| |a#27#0#0| |a#27#1#0|) (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@4))) )))
(assert (forall ((MutableMapModel.Item$V@@5 T@U) (|a#28#0#0| Int) (|a#28#1#0| T@U) ($h@@25 T@U) ) (!  (=> (and (and (and (= (type MutableMapModel.Item$V@@5) TyType) (= (type |a#28#1#0|) BoxType)) (= (type $h@@25) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@25)) (= ($IsAlloc (|#MutableMapModel.Item.Entry| |a#28#0#0| |a#28#1#0|) (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@5) $h@@25)  (and ($IsAlloc (int_2_U |a#28#0#0|) Tclass.NativeTypes.uint64 $h@@25) ($IsAllocBox |a#28#1#0| MutableMapModel.Item$V@@5 $h@@25)))) :qid |unknown.0:0| :skolemid |1025| :pattern ( ($IsAlloc (|#MutableMapModel.Item.Entry| |a#28#0#0| |a#28#1#0|) (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@5) $h@@25)) )))
(assert (forall ((d@@19 T@U) ($h@@26 T@U) ) (!  (=> (and (and (= (type d@@19) DatatypeTypeType) (= (type $h@@26) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@26) (and (MutableMapModel.Item.Entry_q d@@19) (exists ((MutableMapModel.Item$V@@6 T@U) ) (!  (and (= (type MutableMapModel.Item$V@@6) TyType) ($IsAlloc d@@19 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@6) $h@@26)) :qid |unknown.0:0| :skolemid |1026| :pattern ( ($IsAlloc d@@19 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@6) $h@@26)) ))))) ($IsAlloc (int_2_U (MutableMapModel.Item.key d@@19)) Tclass.NativeTypes.uint64 $h@@26)) :qid |unknown.0:0| :skolemid |1027| :pattern ( ($IsAlloc (int_2_U (MutableMapModel.Item.key d@@19)) Tclass.NativeTypes.uint64 $h@@26)) )))
(assert (forall ((arg0@@232 T@U) ) (! (= (type (MutableMapModel.Item.value arg0@@232)) BoxType) :qid |funType:MutableMapModel.Item.value| :pattern ( (MutableMapModel.Item.value arg0@@232)) )))
(assert (forall ((d@@20 T@U) (MutableMapModel.Item$V@@7 T@U) ($h@@27 T@U) ) (!  (=> (and (and (and (= (type d@@20) DatatypeTypeType) (= (type MutableMapModel.Item$V@@7) TyType)) (= (type $h@@27) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@27) (and (MutableMapModel.Item.Entry_q d@@20) ($IsAlloc d@@20 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@7) $h@@27)))) ($IsAllocBox (MutableMapModel.Item.value d@@20) MutableMapModel.Item$V@@7 $h@@27)) :qid |unknown.0:0| :skolemid |1028| :pattern ( ($IsAllocBox (MutableMapModel.Item.value d@@20) MutableMapModel.Item$V@@7 $h@@27)) )))
(assert (forall ((|a#29#0#0| Int) (|a#29#1#0| T@U) ) (!  (=> (= (type |a#29#1#0|) BoxType) (= (|#MutableMapModel.Item.Entry| (LitInt |a#29#0#0|) (Lit |a#29#1#0|)) (Lit (|#MutableMapModel.Item.Entry| |a#29#0#0| |a#29#1#0|)))) :qid |MutableMapModelidfy.76:36| :skolemid |1029| :pattern ( (|#MutableMapModel.Item.Entry| (LitInt |a#29#0#0|) (Lit |a#29#1#0|))) )))
(assert (forall ((|a#30#0#0| Int) (|a#30#1#0| T@U) ) (!  (=> (= (type |a#30#1#0|) BoxType) (= (MutableMapModel.Item.key (|#MutableMapModel.Item.Entry| |a#30#0#0| |a#30#1#0|)) |a#30#0#0|)) :qid |MutableMapModelidfy.76:36| :skolemid |1030| :pattern ( (|#MutableMapModel.Item.Entry| |a#30#0#0| |a#30#1#0|)) )))
(assert (forall ((|a#31#0#0| Int) (|a#31#1#0| T@U) ) (!  (=> (= (type |a#31#1#0|) BoxType) (= (MutableMapModel.Item.value (|#MutableMapModel.Item.Entry| |a#31#0#0| |a#31#1#0|)) |a#31#1#0|)) :qid |MutableMapModelidfy.76:36| :skolemid |1031| :pattern ( (|#MutableMapModel.Item.Entry| |a#31#0#0| |a#31#1#0|)) )))
(assert (forall ((|a#32#0#0| Int) (|a#32#1#0| T@U) ) (!  (=> (= (type |a#32#1#0|) BoxType) (< (BoxRank |a#32#1#0|) (DtRank (|#MutableMapModel.Item.Entry| |a#32#0#0| |a#32#1#0|)))) :qid |MutableMapModelidfy.76:36| :skolemid |1032| :pattern ( (|#MutableMapModel.Item.Entry| |a#32#0#0| |a#32#1#0|)) )))
(assert (forall ((arg0@@233 Int) ) (! (= (type (|#MutableMapModel.Item.Tombstone| arg0@@233)) DatatypeTypeType) :qid |funType:#MutableMapModel.Item.Tombstone| :pattern ( (|#MutableMapModel.Item.Tombstone| arg0@@233)) )))
(assert (forall ((|a#33#0#0| Int) ) (! (= (DatatypeCtorId (|#MutableMapModel.Item.Tombstone| |a#33#0#0|)) |##MutableMapModel.Item.Tombstone|) :qid |MutableMapModelidfy.76:71| :skolemid |1033| :pattern ( (|#MutableMapModel.Item.Tombstone| |a#33#0#0|)) )))
(assert (forall ((d@@21 T@U) ) (!  (=> (= (type d@@21) DatatypeTypeType) (= (MutableMapModel.Item.Tombstone_q d@@21) (= (DatatypeCtorId d@@21) |##MutableMapModel.Item.Tombstone|))) :qid |unknown.0:0| :skolemid |1034| :pattern ( (MutableMapModel.Item.Tombstone_q d@@21)) )))
(assert (forall ((d@@22 T@U) ) (!  (=> (and (= (type d@@22) DatatypeTypeType) (MutableMapModel.Item.Tombstone_q d@@22)) (exists ((|a#34#0#0| Int) ) (! (= d@@22 (|#MutableMapModel.Item.Tombstone| |a#34#0#0|)) :qid |MutableMapModelidfy.76:71| :skolemid |1035| ))) :qid |unknown.0:0| :skolemid |1036| :pattern ( (MutableMapModel.Item.Tombstone_q d@@22)) )))
(assert (forall ((MutableMapModel.Item$V@@8 T@U) (|a#35#0#0| Int) ) (!  (=> (= (type MutableMapModel.Item$V@@8) TyType) (= ($Is (|#MutableMapModel.Item.Tombstone| |a#35#0#0|) (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@8)) ($Is (int_2_U |a#35#0#0|) Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |1037| :pattern ( ($Is (|#MutableMapModel.Item.Tombstone| |a#35#0#0|) (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@8))) )))
(assert (forall ((MutableMapModel.Item$V@@9 T@U) (|a#36#0#0| Int) ($h@@28 T@U) ) (!  (=> (and (and (= (type MutableMapModel.Item$V@@9) TyType) (= (type $h@@28) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@28)) (= ($IsAlloc (|#MutableMapModel.Item.Tombstone| |a#36#0#0|) (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@9) $h@@28) ($IsAlloc (int_2_U |a#36#0#0|) Tclass.NativeTypes.uint64 $h@@28))) :qid |unknown.0:0| :skolemid |1038| :pattern ( ($IsAlloc (|#MutableMapModel.Item.Tombstone| |a#36#0#0|) (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@9) $h@@28)) )))
(assert (forall ((d@@23 T@U) ($h@@29 T@U) ) (!  (=> (and (and (= (type d@@23) DatatypeTypeType) (= (type $h@@29) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@29) (and (MutableMapModel.Item.Tombstone_q d@@23) (exists ((MutableMapModel.Item$V@@10 T@U) ) (!  (and (= (type MutableMapModel.Item$V@@10) TyType) ($IsAlloc d@@23 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@10) $h@@29)) :qid |unknown.0:0| :skolemid |1039| :pattern ( ($IsAlloc d@@23 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@10) $h@@29)) ))))) ($IsAlloc (int_2_U (MutableMapModel.Item.key d@@23)) Tclass.NativeTypes.uint64 $h@@29)) :qid |unknown.0:0| :skolemid |1040| :pattern ( ($IsAlloc (int_2_U (MutableMapModel.Item.key d@@23)) Tclass.NativeTypes.uint64 $h@@29)) )))
(assert (forall ((|a#37#0#0| Int) ) (! (= (|#MutableMapModel.Item.Tombstone| (LitInt |a#37#0#0|)) (Lit (|#MutableMapModel.Item.Tombstone| |a#37#0#0|))) :qid |MutableMapModelidfy.76:71| :skolemid |1041| :pattern ( (|#MutableMapModel.Item.Tombstone| (LitInt |a#37#0#0|))) )))
(assert (forall ((|a#38#0#0| Int) ) (! (= (MutableMapModel.Item.key (|#MutableMapModel.Item.Tombstone| |a#38#0#0|)) |a#38#0#0|) :qid |MutableMapModelidfy.76:71| :skolemid |1042| :pattern ( (|#MutableMapModel.Item.Tombstone| |a#38#0#0|)) )))
(assert (forall ((d@@24 T@U) ) (!  (=> (and (= (type d@@24) DatatypeTypeType) (|$IsA#MutableMapModel.Item| d@@24)) (or (or (MutableMapModel.Item.Empty_q d@@24) (MutableMapModel.Item.Entry_q d@@24)) (MutableMapModel.Item.Tombstone_q d@@24))) :qid |unknown.0:0| :skolemid |1043| :pattern ( (|$IsA#MutableMapModel.Item| d@@24)) )))
(assert (forall ((MutableMapModel.Item$V@@11 T@U) (d@@25 T@U) ) (!  (=> (and (and (= (type MutableMapModel.Item$V@@11) TyType) (= (type d@@25) DatatypeTypeType)) ($Is d@@25 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@11))) (or (or (MutableMapModel.Item.Empty_q d@@25) (MutableMapModel.Item.Entry_q d@@25)) (MutableMapModel.Item.Tombstone_q d@@25))) :qid |unknown.0:0| :skolemid |1044| :pattern ( (MutableMapModel.Item.Tombstone_q d@@25) ($Is d@@25 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@11))) :pattern ( (MutableMapModel.Item.Entry_q d@@25) ($Is d@@25 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@11))) :pattern ( (MutableMapModel.Item.Empty_q d@@25) ($Is d@@25 (Tclass.MutableMapModel.Item MutableMapModel.Item$V@@11))) )))
(assert (forall ((a@@118 T@U) (b@@68 T@U) ) (!  (=> (and (and (= (type a@@118) DatatypeTypeType) (= (type b@@68) DatatypeTypeType)) (and (MutableMapModel.Item.Empty_q a@@118) (MutableMapModel.Item.Empty_q b@@68))) (= (|MutableMapModel.Item#Equal| a@@118 b@@68) true)) :qid |unknown.0:0| :skolemid |1045| :pattern ( (|MutableMapModel.Item#Equal| a@@118 b@@68) (MutableMapModel.Item.Empty_q a@@118)) :pattern ( (|MutableMapModel.Item#Equal| a@@118 b@@68) (MutableMapModel.Item.Empty_q b@@68)) )))
(assert (forall ((a@@119 T@U) (b@@69 T@U) ) (!  (=> (and (and (= (type a@@119) DatatypeTypeType) (= (type b@@69) DatatypeTypeType)) (and (MutableMapModel.Item.Entry_q a@@119) (MutableMapModel.Item.Entry_q b@@69))) (= (|MutableMapModel.Item#Equal| a@@119 b@@69)  (and (= (MutableMapModel.Item.key a@@119) (MutableMapModel.Item.key b@@69)) (= (MutableMapModel.Item.value a@@119) (MutableMapModel.Item.value b@@69))))) :qid |unknown.0:0| :skolemid |1046| :pattern ( (|MutableMapModel.Item#Equal| a@@119 b@@69) (MutableMapModel.Item.Entry_q a@@119)) :pattern ( (|MutableMapModel.Item#Equal| a@@119 b@@69) (MutableMapModel.Item.Entry_q b@@69)) )))
(assert (forall ((a@@120 T@U) (b@@70 T@U) ) (!  (=> (and (and (= (type a@@120) DatatypeTypeType) (= (type b@@70) DatatypeTypeType)) (and (MutableMapModel.Item.Tombstone_q a@@120) (MutableMapModel.Item.Tombstone_q b@@70))) (= (|MutableMapModel.Item#Equal| a@@120 b@@70) (= (MutableMapModel.Item.key a@@120) (MutableMapModel.Item.key b@@70)))) :qid |unknown.0:0| :skolemid |1047| :pattern ( (|MutableMapModel.Item#Equal| a@@120 b@@70) (MutableMapModel.Item.Tombstone_q a@@120)) :pattern ( (|MutableMapModel.Item#Equal| a@@120 b@@70) (MutableMapModel.Item.Tombstone_q b@@70)) )))
(assert (forall ((a@@121 T@U) (b@@71 T@U) ) (!  (=> (and (= (type a@@121) DatatypeTypeType) (= (type b@@71) DatatypeTypeType)) (= (|MutableMapModel.Item#Equal| a@@121 b@@71) (= a@@121 b@@71))) :qid |unknown.0:0| :skolemid |1048| :pattern ( (|MutableMapModel.Item#Equal| a@@121 b@@71)) )))
(assert (forall ((arg0@@234 T@U) (arg1@@110 Int) (arg2@@61 T@U) ) (! (= (type (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| arg0@@234 arg1@@110 arg2@@61)) DatatypeTypeType) :qid |funType:#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| :pattern ( (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| arg0@@234 arg1@@110 arg2@@61)) )))
(assert (forall ((|a#39#0#0| T@U) (|a#39#1#0| Int) (|a#39#2#0| T@U) ) (!  (=> (and (= (type |a#39#0#0|) (SeqType BoxType)) (= (type |a#39#2#0|) (MapType BoxType BoxType))) (= (DatatypeCtorId (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#39#0#0| |a#39#1#0| |a#39#2#0|)) |##MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap|)) :qid |MutableMapModelidfy.84:5| :skolemid |1049| :pattern ( (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#39#0#0| |a#39#1#0| |a#39#2#0|)) )))
(assert (forall ((d@@26 T@U) ) (!  (=> (= (type d@@26) DatatypeTypeType) (= (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@26) (= (DatatypeCtorId d@@26) |##MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap|))) :qid |unknown.0:0| :skolemid |1050| :pattern ( (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@26)) )))
(assert (forall ((d@@27 T@U) ) (!  (=> (and (= (type d@@27) DatatypeTypeType) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@27)) (exists ((|a#40#0#0| T@U) (|a#40#1#0| Int) (|a#40#2#0| T@U) ) (!  (and (and (= (type |a#40#0#0|) (SeqType BoxType)) (= (type |a#40#2#0|) (MapType BoxType BoxType))) (= d@@27 (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#40#0#0| |a#40#1#0| |a#40#2#0|))) :qid |MutableMapModelidfy.84:5| :skolemid |1051| :no-pattern (type |a#40#0#0|) :no-pattern (type |a#40#2#0|) :no-pattern (U_2_int |a#40#0#0|) :no-pattern (U_2_bool |a#40#0#0|) :no-pattern (U_2_int |a#40#2#0|) :no-pattern (U_2_bool |a#40#2#0|) ))) :qid |unknown.0:0| :skolemid |1052| :pattern ( (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@27)) )))
(assert (forall ((arg0@@235 T@U) ) (! (= (type (Tclass.Options.Option arg0@@235)) TyType) :qid |funType:Tclass.Options.Option| :pattern ( (Tclass.Options.Option arg0@@235)) )))
(assert (forall ((Options.Option$V T@U) ) (!  (=> (= (type Options.Option$V) TyType) (and (= (Tag (Tclass.Options.Option Options.Option$V)) Tagclass.Options.Option) (= (TagFamily (Tclass.Options.Option Options.Option$V)) tytagFamily$Option))) :qid |unknown.0:0| :skolemid |1053| :pattern ( (Tclass.Options.Option Options.Option$V)) )))
(assert (forall ((arg0@@236 T@U) ) (! (= (type (Tclass.Options.Option_0 arg0@@236)) TyType) :qid |funType:Tclass.Options.Option_0| :pattern ( (Tclass.Options.Option_0 arg0@@236)) )))
(assert (forall ((Options.Option$V@@0 T@U) ) (!  (=> (= (type Options.Option$V@@0) TyType) (= (Tclass.Options.Option_0 (Tclass.Options.Option Options.Option$V@@0)) Options.Option$V@@0)) :qid |unknown.0:0| :skolemid |1054| :pattern ( (Tclass.Options.Option Options.Option$V@@0)) )))
(assert (forall ((Options.Option$V@@1 T@U) (bx@@73 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@1) TyType) (= (type bx@@73) BoxType)) ($IsBox bx@@73 (Tclass.Options.Option Options.Option$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@73)) bx@@73) ($Is ($Unbox DatatypeTypeType bx@@73) (Tclass.Options.Option Options.Option$V@@1)))) :qid |unknown.0:0| :skolemid |1055| :pattern ( ($IsBox bx@@73 (Tclass.Options.Option Options.Option$V@@1))) )))
(assert (forall ((arg0@@237 T@U) ) (! (= (type (Tclass.MutableMapModel.FixedSizeLinearHashMap arg0@@237)) TyType) :qid |funType:Tclass.MutableMapModel.FixedSizeLinearHashMap| :pattern ( (Tclass.MutableMapModel.FixedSizeLinearHashMap arg0@@237)) )))
(assert (forall ((MutableMapModel.FixedSizeLinearHashMap$V T@U) ) (!  (=> (= (type MutableMapModel.FixedSizeLinearHashMap$V) TyType) (and (= (Tag (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V)) Tagclass.MutableMapModel.FixedSizeLinearHashMap) (= (TagFamily (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V)) tytagFamily$FixedSizeLinearHashMap))) :qid |unknown.0:0| :skolemid |1056| :pattern ( (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V)) )))
(assert (forall ((arg0@@238 T@U) ) (! (= (type (Tclass.MutableMapModel.FixedSizeLinearHashMap_0 arg0@@238)) TyType) :qid |funType:Tclass.MutableMapModel.FixedSizeLinearHashMap_0| :pattern ( (Tclass.MutableMapModel.FixedSizeLinearHashMap_0 arg0@@238)) )))
(assert (forall ((MutableMapModel.FixedSizeLinearHashMap$V@@0 T@U) ) (!  (=> (= (type MutableMapModel.FixedSizeLinearHashMap$V@@0) TyType) (= (Tclass.MutableMapModel.FixedSizeLinearHashMap_0 (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@0)) MutableMapModel.FixedSizeLinearHashMap$V@@0)) :qid |unknown.0:0| :skolemid |1057| :pattern ( (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@0)) )))
(assert (forall ((MutableMapModel.FixedSizeLinearHashMap$V@@1 T@U) (bx@@74 T@U) ) (!  (=> (and (and (= (type MutableMapModel.FixedSizeLinearHashMap$V@@1) TyType) (= (type bx@@74) BoxType)) ($IsBox bx@@74 (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@74)) bx@@74) ($Is ($Unbox DatatypeTypeType bx@@74) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@1)))) :qid |unknown.0:0| :skolemid |1058| :pattern ( ($IsBox bx@@74 (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@1))) )))
(assert (forall ((MutableMapModel.FixedSizeLinearHashMap$V@@2 T@U) (|a#41#0#0| T@U) (|a#41#1#0| Int) (|a#41#2#0| T@U) ) (!  (=> (and (and (= (type MutableMapModel.FixedSizeLinearHashMap$V@@2) TyType) (= (type |a#41#0#0|) (SeqType BoxType))) (= (type |a#41#2#0|) (MapType BoxType BoxType))) (= ($Is (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#41#0#0| |a#41#1#0| |a#41#2#0|) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@2))  (and (and ($Is |a#41#0#0| (TSeq (Tclass.MutableMapModel.Item MutableMapModel.FixedSizeLinearHashMap$V@@2))) ($Is (int_2_U |a#41#1#0|) Tclass.NativeTypes.uint64)) ($Is |a#41#2#0| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel.FixedSizeLinearHashMap$V@@2)))))) :qid |unknown.0:0| :skolemid |1059| :pattern ( ($Is (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#41#0#0| |a#41#1#0| |a#41#2#0|) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@2))) )))
(assert (forall ((MutableMapModel.FixedSizeLinearHashMap$V@@3 T@U) (|a#42#0#0| T@U) (|a#42#1#0| Int) (|a#42#2#0| T@U) ($h@@30 T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel.FixedSizeLinearHashMap$V@@3) TyType) (= (type |a#42#0#0|) (SeqType BoxType))) (= (type |a#42#2#0|) (MapType BoxType BoxType))) (= (type $h@@30) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@30)) (= ($IsAlloc (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#42#0#0| |a#42#1#0| |a#42#2#0|) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@3) $h@@30)  (and (and ($IsAlloc |a#42#0#0| (TSeq (Tclass.MutableMapModel.Item MutableMapModel.FixedSizeLinearHashMap$V@@3)) $h@@30) ($IsAlloc (int_2_U |a#42#1#0|) Tclass.NativeTypes.uint64 $h@@30)) ($IsAlloc |a#42#2#0| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel.FixedSizeLinearHashMap$V@@3)) $h@@30)))) :qid |unknown.0:0| :skolemid |1060| :pattern ( ($IsAlloc (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#42#0#0| |a#42#1#0| |a#42#2#0|) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@3) $h@@30)) )))
(assert (forall ((arg0@@239 T@U) ) (! (= (type (MutableMapModel.FixedSizeLinearHashMap.storage arg0@@239)) (SeqType BoxType)) :qid |funType:MutableMapModel.FixedSizeLinearHashMap.storage| :pattern ( (MutableMapModel.FixedSizeLinearHashMap.storage arg0@@239)) )))
(assert (forall ((d@@28 T@U) (MutableMapModel.FixedSizeLinearHashMap$V@@4 T@U) ($h@@31 T@U) ) (!  (=> (and (and (and (= (type d@@28) DatatypeTypeType) (= (type MutableMapModel.FixedSizeLinearHashMap$V@@4) TyType)) (= (type $h@@31) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@31) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@28) ($IsAlloc d@@28 (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@4) $h@@31)))) ($IsAlloc (MutableMapModel.FixedSizeLinearHashMap.storage d@@28) (TSeq (Tclass.MutableMapModel.Item MutableMapModel.FixedSizeLinearHashMap$V@@4)) $h@@31)) :qid |unknown.0:0| :skolemid |1061| :pattern ( ($IsAlloc (MutableMapModel.FixedSizeLinearHashMap.storage d@@28) (TSeq (Tclass.MutableMapModel.Item MutableMapModel.FixedSizeLinearHashMap$V@@4)) $h@@31)) )))
(assert (forall ((d@@29 T@U) ($h@@32 T@U) ) (!  (=> (and (and (= (type d@@29) DatatypeTypeType) (= (type $h@@32) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@32) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@29) (exists ((MutableMapModel.FixedSizeLinearHashMap$V@@5 T@U) ) (!  (and (= (type MutableMapModel.FixedSizeLinearHashMap$V@@5) TyType) ($IsAlloc d@@29 (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@5) $h@@32)) :qid |unknown.0:0| :skolemid |1062| :pattern ( ($IsAlloc d@@29 (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@5) $h@@32)) ))))) ($IsAlloc (int_2_U (MutableMapModel.FixedSizeLinearHashMap.count d@@29)) Tclass.NativeTypes.uint64 $h@@32)) :qid |unknown.0:0| :skolemid |1063| :pattern ( ($IsAlloc (int_2_U (MutableMapModel.FixedSizeLinearHashMap.count d@@29)) Tclass.NativeTypes.uint64 $h@@32)) )))
(assert (forall ((arg0@@240 T@U) ) (! (= (type (MutableMapModel.FixedSizeLinearHashMap.contents arg0@@240)) (MapType BoxType BoxType)) :qid |funType:MutableMapModel.FixedSizeLinearHashMap.contents| :pattern ( (MutableMapModel.FixedSizeLinearHashMap.contents arg0@@240)) )))
(assert (forall ((d@@30 T@U) (MutableMapModel.FixedSizeLinearHashMap$V@@6 T@U) ($h@@33 T@U) ) (!  (=> (and (and (and (= (type d@@30) DatatypeTypeType) (= (type MutableMapModel.FixedSizeLinearHashMap$V@@6) TyType)) (= (type $h@@33) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@33) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@30) ($IsAlloc d@@30 (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@6) $h@@33)))) ($IsAlloc (MutableMapModel.FixedSizeLinearHashMap.contents d@@30) (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel.FixedSizeLinearHashMap$V@@6)) $h@@33)) :qid |unknown.0:0| :skolemid |1064| :pattern ( ($IsAlloc (MutableMapModel.FixedSizeLinearHashMap.contents d@@30) (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel.FixedSizeLinearHashMap$V@@6)) $h@@33)) )))
(assert (forall ((|a#43#0#0| T@U) (|a#43#1#0| Int) (|a#43#2#0| T@U) ) (!  (=> (and (= (type |a#43#0#0|) (SeqType BoxType)) (= (type |a#43#2#0|) (MapType BoxType BoxType))) (= (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| (Lit |a#43#0#0|) (LitInt |a#43#1#0|) (Lit |a#43#2#0|)) (Lit (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#43#0#0| |a#43#1#0| |a#43#2#0|)))) :qid |MutableMapModelidfy.84:5| :skolemid |1065| :pattern ( (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| (Lit |a#43#0#0|) (LitInt |a#43#1#0|) (Lit |a#43#2#0|))) )))
(assert (forall ((|a#44#0#0| T@U) (|a#44#1#0| Int) (|a#44#2#0| T@U) ) (!  (=> (and (= (type |a#44#0#0|) (SeqType BoxType)) (= (type |a#44#2#0|) (MapType BoxType BoxType))) (= (MutableMapModel.FixedSizeLinearHashMap.storage (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#44#0#0| |a#44#1#0| |a#44#2#0|)) |a#44#0#0|)) :qid |MutableMapModelidfy.84:5| :skolemid |1066| :pattern ( (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#44#0#0| |a#44#1#0| |a#44#2#0|)) )))
(assert (forall ((|a#45#0#0| T@U) (|a#45#1#0| Int) (|a#45#2#0| T@U) (i@@25 Int) ) (!  (=> (and (and (= (type |a#45#0#0|) (SeqType BoxType)) (= (type |a#45#2#0|) (MapType BoxType BoxType))) (and (<= 0 i@@25) (< i@@25 (|Seq#Length| |a#45#0#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#45#0#0| i@@25))) (DtRank (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#45#0#0| |a#45#1#0| |a#45#2#0|)))) :qid |MutableMapModelidfy.84:5| :skolemid |1067| :pattern ( (|Seq#Index| |a#45#0#0| i@@25) (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#45#0#0| |a#45#1#0| |a#45#2#0|)) )))
(assert (forall ((|a#46#0#0| T@U) (|a#46#1#0| Int) (|a#46#2#0| T@U) ) (!  (=> (and (= (type |a#46#0#0|) (SeqType BoxType)) (= (type |a#46#2#0|) (MapType BoxType BoxType))) (< (|Seq#Rank| |a#46#0#0|) (DtRank (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#46#0#0| |a#46#1#0| |a#46#2#0|)))) :qid |MutableMapModelidfy.84:5| :skolemid |1068| :pattern ( (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#46#0#0| |a#46#1#0| |a#46#2#0|)) )))
(assert (forall ((|a#47#0#0| T@U) (|a#47#1#0| Int) (|a#47#2#0| T@U) ) (!  (=> (and (= (type |a#47#0#0|) (SeqType BoxType)) (= (type |a#47#2#0|) (MapType BoxType BoxType))) (= (MutableMapModel.FixedSizeLinearHashMap.count (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#47#0#0| |a#47#1#0| |a#47#2#0|)) |a#47#1#0|)) :qid |MutableMapModelidfy.84:5| :skolemid |1069| :pattern ( (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#47#0#0| |a#47#1#0| |a#47#2#0|)) )))
(assert (forall ((|a#48#0#0| T@U) (|a#48#1#0| Int) (|a#48#2#0| T@U) ) (!  (=> (and (= (type |a#48#0#0|) (SeqType BoxType)) (= (type |a#48#2#0|) (MapType BoxType BoxType))) (= (MutableMapModel.FixedSizeLinearHashMap.contents (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#48#0#0| |a#48#1#0| |a#48#2#0|)) |a#48#2#0|)) :qid |MutableMapModelidfy.84:5| :skolemid |1070| :pattern ( (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#48#0#0| |a#48#1#0| |a#48#2#0|)) )))
(assert (forall ((|a#49#0#0| T@U) (|a#49#1#0| Int) (|a#49#2#0| T@U) (d@@31 T@U) ) (!  (=> (and (and (and (= (type |a#49#0#0|) (SeqType BoxType)) (= (type |a#49#2#0|) (MapType BoxType BoxType))) (= (type d@@31) DatatypeTypeType)) (U_2_bool (MapType0Select (|Map#Domain| |a#49#2#0|) ($Box d@@31)))) (< (DtRank d@@31) (DtRank (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#49#0#0| |a#49#1#0| |a#49#2#0|)))) :qid |MutableMapModelidfy.84:5| :skolemid |1071| :pattern ( (MapType0Select (|Map#Domain| |a#49#2#0|) ($Box d@@31)) (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#49#0#0| |a#49#1#0| |a#49#2#0|)) )))
(assert (forall ((|a#50#0#0| T@U) (|a#50#1#0| Int) (|a#50#2#0| T@U) (bx@@75 T@U) ) (!  (=> (and (and (and (= (type |a#50#0#0|) (SeqType BoxType)) (= (type |a#50#2#0|) (MapType BoxType BoxType))) (= (type bx@@75) BoxType)) (U_2_bool (MapType0Select (|Map#Domain| |a#50#2#0|) bx@@75))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#50#2#0|) bx@@75))) (DtRank (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#50#0#0| |a#50#1#0| |a#50#2#0|)))) :qid |MutableMapModelidfy.84:5| :skolemid |1072| :pattern ( (MapType0Select (|Map#Domain| |a#50#2#0|) bx@@75) (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |a#50#0#0| |a#50#1#0| |a#50#2#0|)) )))
(assert (forall ((d@@32 T@U) ) (!  (=> (and (= (type d@@32) DatatypeTypeType) (|$IsA#MutableMapModel.FixedSizeLinearHashMap| d@@32)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@32)) :qid |unknown.0:0| :skolemid |1073| :pattern ( (|$IsA#MutableMapModel.FixedSizeLinearHashMap| d@@32)) )))
(assert (forall ((MutableMapModel.FixedSizeLinearHashMap$V@@7 T@U) (d@@33 T@U) ) (!  (=> (and (and (= (type MutableMapModel.FixedSizeLinearHashMap$V@@7) TyType) (= (type d@@33) DatatypeTypeType)) ($Is d@@33 (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@7))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@33)) :qid |unknown.0:0| :skolemid |1074| :pattern ( (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q d@@33) ($Is d@@33 (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.FixedSizeLinearHashMap$V@@7))) )))
(assert (forall ((a@@122 T@U) (b@@72 T@U) ) (!  (=> (and (and (= (type a@@122) DatatypeTypeType) (= (type b@@72) DatatypeTypeType)) true) (= (|MutableMapModel.FixedSizeLinearHashMap#Equal| a@@122 b@@72)  (and (and (|Seq#Equal| (MutableMapModel.FixedSizeLinearHashMap.storage a@@122) (MutableMapModel.FixedSizeLinearHashMap.storage b@@72)) (= (MutableMapModel.FixedSizeLinearHashMap.count a@@122) (MutableMapModel.FixedSizeLinearHashMap.count b@@72))) (|Map#Equal| (MutableMapModel.FixedSizeLinearHashMap.contents a@@122) (MutableMapModel.FixedSizeLinearHashMap.contents b@@72))))) :qid |unknown.0:0| :skolemid |1075| :pattern ( (|MutableMapModel.FixedSizeLinearHashMap#Equal| a@@122 b@@72)) )))
(assert (forall ((a@@123 T@U) (b@@73 T@U) ) (!  (=> (and (= (type a@@123) DatatypeTypeType) (= (type b@@73) DatatypeTypeType)) (= (|MutableMapModel.FixedSizeLinearHashMap#Equal| a@@123 b@@73) (= a@@123 b@@73))) :qid |unknown.0:0| :skolemid |1076| :pattern ( (|MutableMapModel.FixedSizeLinearHashMap#Equal| a@@123 b@@73)) )))
(assert (forall ((arg0@@241 Int) (arg1@@111 Int) (arg2@@62 Int) ) (! (= (type (|#MutableMapModel.ProbeResult.ProbeResult| arg0@@241 arg1@@111 arg2@@62)) DatatypeTypeType) :qid |funType:#MutableMapModel.ProbeResult.ProbeResult| :pattern ( (|#MutableMapModel.ProbeResult.ProbeResult| arg0@@241 arg1@@111 arg2@@62)) )))
(assert (forall ((|a#51#0#0| Int) (|a#51#1#0| Int) (|a#51#2#0| Int) ) (! (= (DatatypeCtorId (|#MutableMapModel.ProbeResult.ProbeResult| |a#51#0#0| |a#51#1#0| |a#51#2#0|)) |##MutableMapModel.ProbeResult.ProbeResult|) :qid |MutableMapModelidfy.498:7| :skolemid |1077| :pattern ( (|#MutableMapModel.ProbeResult.ProbeResult| |a#51#0#0| |a#51#1#0| |a#51#2#0|)) )))
(assert (forall ((d@@34 T@U) ) (!  (=> (= (type d@@34) DatatypeTypeType) (= (MutableMapModel.ProbeResult.ProbeResult_q d@@34) (= (DatatypeCtorId d@@34) |##MutableMapModel.ProbeResult.ProbeResult|))) :qid |unknown.0:0| :skolemid |1078| :pattern ( (MutableMapModel.ProbeResult.ProbeResult_q d@@34)) )))
(assert (forall ((d@@35 T@U) ) (!  (=> (and (= (type d@@35) DatatypeTypeType) (MutableMapModel.ProbeResult.ProbeResult_q d@@35)) (exists ((|a#52#0#0| Int) (|a#52#1#0| Int) (|a#52#2#0| Int) ) (! (= d@@35 (|#MutableMapModel.ProbeResult.ProbeResult| |a#52#0#0| |a#52#1#0| |a#52#2#0|)) :qid |MutableMapModelidfy.498:7| :skolemid |1079| ))) :qid |unknown.0:0| :skolemid |1080| :pattern ( (MutableMapModel.ProbeResult.ProbeResult_q d@@35)) )))
(assert (forall ((arg0@@242 T@U) ) (! (= (type (Tclass.MutableMapModel.ProbeResult arg0@@242)) TyType) :qid |funType:Tclass.MutableMapModel.ProbeResult| :pattern ( (Tclass.MutableMapModel.ProbeResult arg0@@242)) )))
(assert (forall ((MutableMapModel.ProbeResult$V T@U) ) (!  (=> (= (type MutableMapModel.ProbeResult$V) TyType) (and (= (Tag (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V)) Tagclass.MutableMapModel.ProbeResult) (= (TagFamily (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V)) tytagFamily$ProbeResult))) :qid |unknown.0:0| :skolemid |1081| :pattern ( (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V)) )))
(assert (forall ((arg0@@243 T@U) ) (! (= (type (Tclass.MutableMapModel.ProbeResult_0 arg0@@243)) TyType) :qid |funType:Tclass.MutableMapModel.ProbeResult_0| :pattern ( (Tclass.MutableMapModel.ProbeResult_0 arg0@@243)) )))
(assert (forall ((MutableMapModel.ProbeResult$V@@0 T@U) ) (!  (=> (= (type MutableMapModel.ProbeResult$V@@0) TyType) (= (Tclass.MutableMapModel.ProbeResult_0 (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@0)) MutableMapModel.ProbeResult$V@@0)) :qid |unknown.0:0| :skolemid |1082| :pattern ( (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@0)) )))
(assert (forall ((MutableMapModel.ProbeResult$V@@1 T@U) (bx@@76 T@U) ) (!  (=> (and (and (= (type MutableMapModel.ProbeResult$V@@1) TyType) (= (type bx@@76) BoxType)) ($IsBox bx@@76 (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@76)) bx@@76) ($Is ($Unbox DatatypeTypeType bx@@76) (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@1)))) :qid |unknown.0:0| :skolemid |1083| :pattern ( ($IsBox bx@@76 (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@1))) )))
(assert (forall ((MutableMapModel.ProbeResult$V@@2 T@U) (|a#53#0#0| Int) (|a#53#1#0| Int) (|a#53#2#0| Int) ) (!  (=> (= (type MutableMapModel.ProbeResult$V@@2) TyType) (= ($Is (|#MutableMapModel.ProbeResult.ProbeResult| |a#53#0#0| |a#53#1#0| |a#53#2#0|) (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@2))  (and (and ($Is (int_2_U |a#53#0#0|) Tclass.NativeTypes.uint64) ($Is (int_2_U |a#53#1#0|) Tclass.NativeTypes.uint64)) ($Is (int_2_U |a#53#2#0|) Tclass.NativeTypes.uint64)))) :qid |unknown.0:0| :skolemid |1084| :pattern ( ($Is (|#MutableMapModel.ProbeResult.ProbeResult| |a#53#0#0| |a#53#1#0| |a#53#2#0|) (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@2))) )))
(assert (forall ((MutableMapModel.ProbeResult$V@@3 T@U) (|a#54#0#0| Int) (|a#54#1#0| Int) (|a#54#2#0| Int) ($h@@34 T@U) ) (!  (=> (and (and (= (type MutableMapModel.ProbeResult$V@@3) TyType) (= (type $h@@34) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@34)) (= ($IsAlloc (|#MutableMapModel.ProbeResult.ProbeResult| |a#54#0#0| |a#54#1#0| |a#54#2#0|) (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@3) $h@@34)  (and (and ($IsAlloc (int_2_U |a#54#0#0|) Tclass.NativeTypes.uint64 $h@@34) ($IsAlloc (int_2_U |a#54#1#0|) Tclass.NativeTypes.uint64 $h@@34)) ($IsAlloc (int_2_U |a#54#2#0|) Tclass.NativeTypes.uint64 $h@@34)))) :qid |unknown.0:0| :skolemid |1085| :pattern ( ($IsAlloc (|#MutableMapModel.ProbeResult.ProbeResult| |a#54#0#0| |a#54#1#0| |a#54#2#0|) (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@3) $h@@34)) )))
(assert (forall ((d@@36 T@U) ($h@@35 T@U) ) (!  (=> (and (and (= (type d@@36) DatatypeTypeType) (= (type $h@@35) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@35) (and (MutableMapModel.ProbeResult.ProbeResult_q d@@36) (exists ((MutableMapModel.ProbeResult$V@@4 T@U) ) (!  (and (= (type MutableMapModel.ProbeResult$V@@4) TyType) ($IsAlloc d@@36 (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@4) $h@@35)) :qid |unknown.0:0| :skolemid |1086| :pattern ( ($IsAlloc d@@36 (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@4) $h@@35)) ))))) ($IsAlloc (int_2_U (MutableMapModel.ProbeResult.slotIdx d@@36)) Tclass.NativeTypes.uint64 $h@@35)) :qid |unknown.0:0| :skolemid |1087| :pattern ( ($IsAlloc (int_2_U (MutableMapModel.ProbeResult.slotIdx d@@36)) Tclass.NativeTypes.uint64 $h@@35)) )))
(assert (forall ((d@@37 T@U) ($h@@36 T@U) ) (!  (=> (and (and (= (type d@@37) DatatypeTypeType) (= (type $h@@36) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@36) (and (MutableMapModel.ProbeResult.ProbeResult_q d@@37) (exists ((MutableMapModel.ProbeResult$V@@5 T@U) ) (!  (and (= (type MutableMapModel.ProbeResult$V@@5) TyType) ($IsAlloc d@@37 (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@5) $h@@36)) :qid |unknown.0:0| :skolemid |1088| :pattern ( ($IsAlloc d@@37 (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@5) $h@@36)) ))))) ($IsAlloc (int_2_U (MutableMapModel.ProbeResult.startSlotIdx d@@37)) Tclass.NativeTypes.uint64 $h@@36)) :qid |unknown.0:0| :skolemid |1089| :pattern ( ($IsAlloc (int_2_U (MutableMapModel.ProbeResult.startSlotIdx d@@37)) Tclass.NativeTypes.uint64 $h@@36)) )))
(assert (forall ((d@@38 T@U) ($h@@37 T@U) ) (!  (=> (and (and (= (type d@@38) DatatypeTypeType) (= (type $h@@37) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@37) (and (MutableMapModel.ProbeResult.ProbeResult_q d@@38) (exists ((MutableMapModel.ProbeResult$V@@6 T@U) ) (!  (and (= (type MutableMapModel.ProbeResult$V@@6) TyType) ($IsAlloc d@@38 (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@6) $h@@37)) :qid |unknown.0:0| :skolemid |1090| :pattern ( ($IsAlloc d@@38 (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@6) $h@@37)) ))))) ($IsAlloc (int_2_U (MutableMapModel.ProbeResult.ghostSkips d@@38)) Tclass.NativeTypes.uint64 $h@@37)) :qid |unknown.0:0| :skolemid |1091| :pattern ( ($IsAlloc (int_2_U (MutableMapModel.ProbeResult.ghostSkips d@@38)) Tclass.NativeTypes.uint64 $h@@37)) )))
(assert (forall ((|a#55#0#0| Int) (|a#55#1#0| Int) (|a#55#2#0| Int) ) (! (= (|#MutableMapModel.ProbeResult.ProbeResult| (LitInt |a#55#0#0|) (LitInt |a#55#1#0|) (LitInt |a#55#2#0|)) (Lit (|#MutableMapModel.ProbeResult.ProbeResult| |a#55#0#0| |a#55#1#0| |a#55#2#0|))) :qid |MutableMapModelidfy.498:7| :skolemid |1092| :pattern ( (|#MutableMapModel.ProbeResult.ProbeResult| (LitInt |a#55#0#0|) (LitInt |a#55#1#0|) (LitInt |a#55#2#0|))) )))
(assert (forall ((|a#56#0#0| Int) (|a#56#1#0| Int) (|a#56#2#0| Int) ) (! (= (MutableMapModel.ProbeResult.slotIdx (|#MutableMapModel.ProbeResult.ProbeResult| |a#56#0#0| |a#56#1#0| |a#56#2#0|)) |a#56#0#0|) :qid |MutableMapModelidfy.498:7| :skolemid |1093| :pattern ( (|#MutableMapModel.ProbeResult.ProbeResult| |a#56#0#0| |a#56#1#0| |a#56#2#0|)) )))
(assert (forall ((|a#57#0#0| Int) (|a#57#1#0| Int) (|a#57#2#0| Int) ) (! (= (MutableMapModel.ProbeResult.startSlotIdx (|#MutableMapModel.ProbeResult.ProbeResult| |a#57#0#0| |a#57#1#0| |a#57#2#0|)) |a#57#1#0|) :qid |MutableMapModelidfy.498:7| :skolemid |1094| :pattern ( (|#MutableMapModel.ProbeResult.ProbeResult| |a#57#0#0| |a#57#1#0| |a#57#2#0|)) )))
(assert (forall ((|a#58#0#0| Int) (|a#58#1#0| Int) (|a#58#2#0| Int) ) (! (= (MutableMapModel.ProbeResult.ghostSkips (|#MutableMapModel.ProbeResult.ProbeResult| |a#58#0#0| |a#58#1#0| |a#58#2#0|)) |a#58#2#0|) :qid |MutableMapModelidfy.498:7| :skolemid |1095| :pattern ( (|#MutableMapModel.ProbeResult.ProbeResult| |a#58#0#0| |a#58#1#0| |a#58#2#0|)) )))
(assert (forall ((d@@39 T@U) ) (!  (=> (and (= (type d@@39) DatatypeTypeType) (|$IsA#MutableMapModel.ProbeResult| d@@39)) (MutableMapModel.ProbeResult.ProbeResult_q d@@39)) :qid |unknown.0:0| :skolemid |1096| :pattern ( (|$IsA#MutableMapModel.ProbeResult| d@@39)) )))
(assert (forall ((MutableMapModel.ProbeResult$V@@7 T@U) (d@@40 T@U) ) (!  (=> (and (and (= (type MutableMapModel.ProbeResult$V@@7) TyType) (= (type d@@40) DatatypeTypeType)) ($Is d@@40 (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@7))) (MutableMapModel.ProbeResult.ProbeResult_q d@@40)) :qid |unknown.0:0| :skolemid |1097| :pattern ( (MutableMapModel.ProbeResult.ProbeResult_q d@@40) ($Is d@@40 (Tclass.MutableMapModel.ProbeResult MutableMapModel.ProbeResult$V@@7))) )))
(assert (forall ((a@@124 T@U) (b@@74 T@U) ) (!  (=> (and (and (= (type a@@124) DatatypeTypeType) (= (type b@@74) DatatypeTypeType)) true) (= (|MutableMapModel.ProbeResult#Equal| a@@124 b@@74)  (and (and (= (MutableMapModel.ProbeResult.slotIdx a@@124) (MutableMapModel.ProbeResult.slotIdx b@@74)) (= (MutableMapModel.ProbeResult.startSlotIdx a@@124) (MutableMapModel.ProbeResult.startSlotIdx b@@74))) (= (MutableMapModel.ProbeResult.ghostSkips a@@124) (MutableMapModel.ProbeResult.ghostSkips b@@74))))) :qid |unknown.0:0| :skolemid |1098| :pattern ( (|MutableMapModel.ProbeResult#Equal| a@@124 b@@74)) )))
(assert (forall ((a@@125 T@U) (b@@75 T@U) ) (!  (=> (and (= (type a@@125) DatatypeTypeType) (= (type b@@75) DatatypeTypeType)) (= (|MutableMapModel.ProbeResult#Equal| a@@125 b@@75) (= a@@125 b@@75))) :qid |unknown.0:0| :skolemid |1099| :pattern ( (|MutableMapModel.ProbeResult#Equal| a@@125 b@@75)) )))
(assert (forall ((arg0@@244 T@U) (arg1@@112 Int) (arg2@@63 T@U) ) (! (= (type (|#MutableMapModel.LinearHashMap.LinearHashMap| arg0@@244 arg1@@112 arg2@@63)) DatatypeTypeType) :qid |funType:#MutableMapModel.LinearHashMap.LinearHashMap| :pattern ( (|#MutableMapModel.LinearHashMap.LinearHashMap| arg0@@244 arg1@@112 arg2@@63)) )))
(assert (forall ((|a#59#0#0| T@U) (|a#59#1#0| Int) (|a#59#2#0| T@U) ) (!  (=> (and (= (type |a#59#0#0|) DatatypeTypeType) (= (type |a#59#2#0|) (MapType BoxType BoxType))) (= (DatatypeCtorId (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#59#0#0| |a#59#1#0| |a#59#2#0|)) |##MutableMapModel.LinearHashMap.LinearHashMap|)) :qid |MutableMapModelidfy.824:5| :skolemid |1100| :pattern ( (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#59#0#0| |a#59#1#0| |a#59#2#0|)) )))
(assert (forall ((d@@41 T@U) ) (!  (=> (= (type d@@41) DatatypeTypeType) (= (MutableMapModel.LinearHashMap.LinearHashMap_q d@@41) (= (DatatypeCtorId d@@41) |##MutableMapModel.LinearHashMap.LinearHashMap|))) :qid |unknown.0:0| :skolemid |1101| :pattern ( (MutableMapModel.LinearHashMap.LinearHashMap_q d@@41)) )))
(assert (forall ((d@@42 T@U) ) (!  (=> (and (= (type d@@42) DatatypeTypeType) (MutableMapModel.LinearHashMap.LinearHashMap_q d@@42)) (exists ((|a#60#0#0| T@U) (|a#60#1#0| Int) (|a#60#2#0| T@U) ) (!  (and (and (= (type |a#60#0#0|) DatatypeTypeType) (= (type |a#60#2#0|) (MapType BoxType BoxType))) (= d@@42 (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#60#0#0| |a#60#1#0| |a#60#2#0|))) :qid |MutableMapModelidfy.824:5| :skolemid |1102| :no-pattern (type |a#60#0#0|) :no-pattern (type |a#60#2#0|) :no-pattern (U_2_int |a#60#0#0|) :no-pattern (U_2_bool |a#60#0#0|) :no-pattern (U_2_int |a#60#2#0|) :no-pattern (U_2_bool |a#60#2#0|) ))) :qid |unknown.0:0| :skolemid |1103| :pattern ( (MutableMapModel.LinearHashMap.LinearHashMap_q d@@42)) )))
(assert (forall ((arg0@@245 T@U) ) (! (= (type (Tclass.MutableMapModel.LinearHashMap arg0@@245)) TyType) :qid |funType:Tclass.MutableMapModel.LinearHashMap| :pattern ( (Tclass.MutableMapModel.LinearHashMap arg0@@245)) )))
(assert (forall ((MutableMapModel.LinearHashMap$V T@U) ) (!  (=> (= (type MutableMapModel.LinearHashMap$V) TyType) (and (= (Tag (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V)) Tagclass.MutableMapModel.LinearHashMap) (= (TagFamily (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V)) tytagFamily$LinearHashMap))) :qid |unknown.0:0| :skolemid |1104| :pattern ( (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V)) )))
(assert (forall ((arg0@@246 T@U) ) (! (= (type (Tclass.MutableMapModel.LinearHashMap_0 arg0@@246)) TyType) :qid |funType:Tclass.MutableMapModel.LinearHashMap_0| :pattern ( (Tclass.MutableMapModel.LinearHashMap_0 arg0@@246)) )))
(assert (forall ((MutableMapModel.LinearHashMap$V@@0 T@U) ) (!  (=> (= (type MutableMapModel.LinearHashMap$V@@0) TyType) (= (Tclass.MutableMapModel.LinearHashMap_0 (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@0)) MutableMapModel.LinearHashMap$V@@0)) :qid |unknown.0:0| :skolemid |1105| :pattern ( (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@0)) )))
(assert (forall ((MutableMapModel.LinearHashMap$V@@1 T@U) (bx@@77 T@U) ) (!  (=> (and (and (= (type MutableMapModel.LinearHashMap$V@@1) TyType) (= (type bx@@77) BoxType)) ($IsBox bx@@77 (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@77)) bx@@77) ($Is ($Unbox DatatypeTypeType bx@@77) (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@1)))) :qid |unknown.0:0| :skolemid |1106| :pattern ( ($IsBox bx@@77 (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@1))) )))
(assert (forall ((MutableMapModel.LinearHashMap$V@@2 T@U) (|a#61#0#0| T@U) (|a#61#1#0| Int) (|a#61#2#0| T@U) ) (!  (=> (and (and (= (type MutableMapModel.LinearHashMap$V@@2) TyType) (= (type |a#61#0#0|) DatatypeTypeType)) (= (type |a#61#2#0|) (MapType BoxType BoxType))) (= ($Is (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#61#0#0| |a#61#1#0| |a#61#2#0|) (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@2))  (and (and ($Is |a#61#0#0| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.LinearHashMap$V@@2)) ($Is (int_2_U |a#61#1#0|) Tclass.NativeTypes.uint64)) ($Is |a#61#2#0| (TMap Tclass.NativeTypes.uint64 MutableMapModel.LinearHashMap$V@@2))))) :qid |unknown.0:0| :skolemid |1107| :pattern ( ($Is (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#61#0#0| |a#61#1#0| |a#61#2#0|) (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@2))) )))
(assert (forall ((MutableMapModel.LinearHashMap$V@@3 T@U) (|a#62#0#0| T@U) (|a#62#1#0| Int) (|a#62#2#0| T@U) ($h@@38 T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel.LinearHashMap$V@@3) TyType) (= (type |a#62#0#0|) DatatypeTypeType)) (= (type |a#62#2#0|) (MapType BoxType BoxType))) (= (type $h@@38) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@38)) (= ($IsAlloc (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#62#0#0| |a#62#1#0| |a#62#2#0|) (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@3) $h@@38)  (and (and ($IsAlloc |a#62#0#0| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.LinearHashMap$V@@3) $h@@38) ($IsAlloc (int_2_U |a#62#1#0|) Tclass.NativeTypes.uint64 $h@@38)) ($IsAlloc |a#62#2#0| (TMap Tclass.NativeTypes.uint64 MutableMapModel.LinearHashMap$V@@3) $h@@38)))) :qid |unknown.0:0| :skolemid |1108| :pattern ( ($IsAlloc (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#62#0#0| |a#62#1#0| |a#62#2#0|) (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@3) $h@@38)) )))
(assert (forall ((arg0@@247 T@U) ) (! (= (type (MutableMapModel.LinearHashMap.underlying arg0@@247)) DatatypeTypeType) :qid |funType:MutableMapModel.LinearHashMap.underlying| :pattern ( (MutableMapModel.LinearHashMap.underlying arg0@@247)) )))
(assert (forall ((d@@43 T@U) (MutableMapModel.LinearHashMap$V@@4 T@U) ($h@@39 T@U) ) (!  (=> (and (and (and (= (type d@@43) DatatypeTypeType) (= (type MutableMapModel.LinearHashMap$V@@4) TyType)) (= (type $h@@39) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@39) (and (MutableMapModel.LinearHashMap.LinearHashMap_q d@@43) ($IsAlloc d@@43 (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@4) $h@@39)))) ($IsAlloc (MutableMapModel.LinearHashMap.underlying d@@43) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.LinearHashMap$V@@4) $h@@39)) :qid |unknown.0:0| :skolemid |1109| :pattern ( ($IsAlloc (MutableMapModel.LinearHashMap.underlying d@@43) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel.LinearHashMap$V@@4) $h@@39)) )))
(assert (forall ((d@@44 T@U) ($h@@40 T@U) ) (!  (=> (and (and (= (type d@@44) DatatypeTypeType) (= (type $h@@40) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@40) (and (MutableMapModel.LinearHashMap.LinearHashMap_q d@@44) (exists ((MutableMapModel.LinearHashMap$V@@5 T@U) ) (!  (and (= (type MutableMapModel.LinearHashMap$V@@5) TyType) ($IsAlloc d@@44 (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@5) $h@@40)) :qid |unknown.0:0| :skolemid |1110| :pattern ( ($IsAlloc d@@44 (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@5) $h@@40)) ))))) ($IsAlloc (int_2_U (MutableMapModel.LinearHashMap.count d@@44)) Tclass.NativeTypes.uint64 $h@@40)) :qid |unknown.0:0| :skolemid |1111| :pattern ( ($IsAlloc (int_2_U (MutableMapModel.LinearHashMap.count d@@44)) Tclass.NativeTypes.uint64 $h@@40)) )))
(assert (forall ((arg0@@248 T@U) ) (! (= (type (MutableMapModel.LinearHashMap.contents arg0@@248)) (MapType BoxType BoxType)) :qid |funType:MutableMapModel.LinearHashMap.contents| :pattern ( (MutableMapModel.LinearHashMap.contents arg0@@248)) )))
(assert (forall ((d@@45 T@U) (MutableMapModel.LinearHashMap$V@@6 T@U) ($h@@41 T@U) ) (!  (=> (and (and (and (= (type d@@45) DatatypeTypeType) (= (type MutableMapModel.LinearHashMap$V@@6) TyType)) (= (type $h@@41) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@41) (and (MutableMapModel.LinearHashMap.LinearHashMap_q d@@45) ($IsAlloc d@@45 (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@6) $h@@41)))) ($IsAlloc (MutableMapModel.LinearHashMap.contents d@@45) (TMap Tclass.NativeTypes.uint64 MutableMapModel.LinearHashMap$V@@6) $h@@41)) :qid |unknown.0:0| :skolemid |1112| :pattern ( ($IsAlloc (MutableMapModel.LinearHashMap.contents d@@45) (TMap Tclass.NativeTypes.uint64 MutableMapModel.LinearHashMap$V@@6) $h@@41)) )))
(assert (forall ((|a#63#0#0| T@U) (|a#63#1#0| Int) (|a#63#2#0| T@U) ) (!  (=> (and (= (type |a#63#0#0|) DatatypeTypeType) (= (type |a#63#2#0|) (MapType BoxType BoxType))) (= (|#MutableMapModel.LinearHashMap.LinearHashMap| (Lit |a#63#0#0|) (LitInt |a#63#1#0|) (Lit |a#63#2#0|)) (Lit (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#63#0#0| |a#63#1#0| |a#63#2#0|)))) :qid |MutableMapModelidfy.824:5| :skolemid |1113| :pattern ( (|#MutableMapModel.LinearHashMap.LinearHashMap| (Lit |a#63#0#0|) (LitInt |a#63#1#0|) (Lit |a#63#2#0|))) )))
(assert (forall ((|a#64#0#0| T@U) (|a#64#1#0| Int) (|a#64#2#0| T@U) ) (!  (=> (and (= (type |a#64#0#0|) DatatypeTypeType) (= (type |a#64#2#0|) (MapType BoxType BoxType))) (= (MutableMapModel.LinearHashMap.underlying (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#64#0#0| |a#64#1#0| |a#64#2#0|)) |a#64#0#0|)) :qid |MutableMapModelidfy.824:5| :skolemid |1114| :pattern ( (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#64#0#0| |a#64#1#0| |a#64#2#0|)) )))
(assert (forall ((|a#65#0#0| T@U) (|a#65#1#0| Int) (|a#65#2#0| T@U) ) (!  (=> (and (= (type |a#65#0#0|) DatatypeTypeType) (= (type |a#65#2#0|) (MapType BoxType BoxType))) (< (DtRank |a#65#0#0|) (DtRank (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#65#0#0| |a#65#1#0| |a#65#2#0|)))) :qid |MutableMapModelidfy.824:5| :skolemid |1115| :pattern ( (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#65#0#0| |a#65#1#0| |a#65#2#0|)) )))
(assert (forall ((|a#66#0#0| T@U) (|a#66#1#0| Int) (|a#66#2#0| T@U) ) (!  (=> (and (= (type |a#66#0#0|) DatatypeTypeType) (= (type |a#66#2#0|) (MapType BoxType BoxType))) (= (MutableMapModel.LinearHashMap.count (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#66#0#0| |a#66#1#0| |a#66#2#0|)) |a#66#1#0|)) :qid |MutableMapModelidfy.824:5| :skolemid |1116| :pattern ( (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#66#0#0| |a#66#1#0| |a#66#2#0|)) )))
(assert (forall ((|a#67#0#0| T@U) (|a#67#1#0| Int) (|a#67#2#0| T@U) ) (!  (=> (and (= (type |a#67#0#0|) DatatypeTypeType) (= (type |a#67#2#0|) (MapType BoxType BoxType))) (= (MutableMapModel.LinearHashMap.contents (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#67#0#0| |a#67#1#0| |a#67#2#0|)) |a#67#2#0|)) :qid |MutableMapModelidfy.824:5| :skolemid |1117| :pattern ( (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#67#0#0| |a#67#1#0| |a#67#2#0|)) )))
(assert (forall ((|a#68#0#0| T@U) (|a#68#1#0| Int) (|a#68#2#0| T@U) (d@@46 T@U) ) (!  (=> (and (and (and (= (type |a#68#0#0|) DatatypeTypeType) (= (type |a#68#2#0|) (MapType BoxType BoxType))) (= (type d@@46) DatatypeTypeType)) (U_2_bool (MapType0Select (|Map#Domain| |a#68#2#0|) ($Box d@@46)))) (< (DtRank d@@46) (DtRank (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#68#0#0| |a#68#1#0| |a#68#2#0|)))) :qid |MutableMapModelidfy.824:5| :skolemid |1118| :pattern ( (MapType0Select (|Map#Domain| |a#68#2#0|) ($Box d@@46)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#68#0#0| |a#68#1#0| |a#68#2#0|)) )))
(assert (forall ((|a#69#0#0| T@U) (|a#69#1#0| Int) (|a#69#2#0| T@U) (bx@@78 T@U) ) (!  (=> (and (and (and (= (type |a#69#0#0|) DatatypeTypeType) (= (type |a#69#2#0|) (MapType BoxType BoxType))) (= (type bx@@78) BoxType)) (U_2_bool (MapType0Select (|Map#Domain| |a#69#2#0|) bx@@78))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#69#2#0|) bx@@78))) (DtRank (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#69#0#0| |a#69#1#0| |a#69#2#0|)))) :qid |MutableMapModelidfy.824:5| :skolemid |1119| :pattern ( (MapType0Select (|Map#Domain| |a#69#2#0|) bx@@78) (|#MutableMapModel.LinearHashMap.LinearHashMap| |a#69#0#0| |a#69#1#0| |a#69#2#0|)) )))
(assert (forall ((d@@47 T@U) ) (!  (=> (and (= (type d@@47) DatatypeTypeType) (|$IsA#MutableMapModel.LinearHashMap| d@@47)) (MutableMapModel.LinearHashMap.LinearHashMap_q d@@47)) :qid |unknown.0:0| :skolemid |1120| :pattern ( (|$IsA#MutableMapModel.LinearHashMap| d@@47)) )))
(assert (forall ((MutableMapModel.LinearHashMap$V@@7 T@U) (d@@48 T@U) ) (!  (=> (and (and (= (type MutableMapModel.LinearHashMap$V@@7) TyType) (= (type d@@48) DatatypeTypeType)) ($Is d@@48 (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@7))) (MutableMapModel.LinearHashMap.LinearHashMap_q d@@48)) :qid |unknown.0:0| :skolemid |1121| :pattern ( (MutableMapModel.LinearHashMap.LinearHashMap_q d@@48) ($Is d@@48 (Tclass.MutableMapModel.LinearHashMap MutableMapModel.LinearHashMap$V@@7))) )))
(assert (forall ((a@@126 T@U) (b@@76 T@U) ) (!  (=> (and (and (= (type a@@126) DatatypeTypeType) (= (type b@@76) DatatypeTypeType)) true) (= (|MutableMapModel.LinearHashMap#Equal| a@@126 b@@76)  (and (and (|MutableMapModel.FixedSizeLinearHashMap#Equal| (MutableMapModel.LinearHashMap.underlying a@@126) (MutableMapModel.LinearHashMap.underlying b@@76)) (= (MutableMapModel.LinearHashMap.count a@@126) (MutableMapModel.LinearHashMap.count b@@76))) (|Map#Equal| (MutableMapModel.LinearHashMap.contents a@@126) (MutableMapModel.LinearHashMap.contents b@@76))))) :qid |unknown.0:0| :skolemid |1122| :pattern ( (|MutableMapModel.LinearHashMap#Equal| a@@126 b@@76)) )))
(assert (forall ((a@@127 T@U) (b@@77 T@U) ) (!  (=> (and (= (type a@@127) DatatypeTypeType) (= (type b@@77) DatatypeTypeType)) (= (|MutableMapModel.LinearHashMap#Equal| a@@127 b@@77) (= a@@127 b@@77))) :qid |unknown.0:0| :skolemid |1123| :pattern ( (|MutableMapModel.LinearHashMap#Equal| a@@127 b@@77)) )))
(assert (forall ((arg0@@249 Int) (arg1@@113 T@U) ) (! (= (type (|#MutableMapModel.IteratorOutput.Next| arg0@@249 arg1@@113)) DatatypeTypeType) :qid |funType:#MutableMapModel.IteratorOutput.Next| :pattern ( (|#MutableMapModel.IteratorOutput.Next| arg0@@249 arg1@@113)) )))
(assert (forall ((|a#70#0#0| Int) (|a#70#1#0| T@U) ) (!  (=> (= (type |a#70#1#0|) BoxType) (= (DatatypeCtorId (|#MutableMapModel.IteratorOutput.Next| |a#70#0#0| |a#70#1#0|)) |##MutableMapModel.IteratorOutput.Next|)) :qid |MutableMapModelidfy.1401:37| :skolemid |1124| :pattern ( (|#MutableMapModel.IteratorOutput.Next| |a#70#0#0| |a#70#1#0|)) )))
(assert (forall ((d@@49 T@U) ) (!  (=> (= (type d@@49) DatatypeTypeType) (= (MutableMapModel.IteratorOutput.Next_q d@@49) (= (DatatypeCtorId d@@49) |##MutableMapModel.IteratorOutput.Next|))) :qid |unknown.0:0| :skolemid |1125| :pattern ( (MutableMapModel.IteratorOutput.Next_q d@@49)) )))
(assert (forall ((d@@50 T@U) ) (!  (=> (and (= (type d@@50) DatatypeTypeType) (MutableMapModel.IteratorOutput.Next_q d@@50)) (exists ((|a#71#0#0| Int) (|a#71#1#0| T@U) ) (!  (and (= (type |a#71#1#0|) BoxType) (= d@@50 (|#MutableMapModel.IteratorOutput.Next| |a#71#0#0| |a#71#1#0|))) :qid |MutableMapModelidfy.1401:37| :skolemid |1126| :no-pattern (type |a#71#1#0|) :no-pattern (U_2_int |a#71#1#0|) :no-pattern (U_2_bool |a#71#1#0|) ))) :qid |unknown.0:0| :skolemid |1127| :pattern ( (MutableMapModel.IteratorOutput.Next_q d@@50)) )))
(assert (forall ((arg0@@250 T@U) ) (! (= (type (Tclass.MutableMapModel.IteratorOutput arg0@@250)) TyType) :qid |funType:Tclass.MutableMapModel.IteratorOutput| :pattern ( (Tclass.MutableMapModel.IteratorOutput arg0@@250)) )))
(assert (forall ((MutableMapModel.IteratorOutput$V T@U) ) (!  (=> (= (type MutableMapModel.IteratorOutput$V) TyType) (and (= (Tag (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V)) Tagclass.MutableMapModel.IteratorOutput) (= (TagFamily (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V)) tytagFamily$IteratorOutput))) :qid |unknown.0:0| :skolemid |1128| :pattern ( (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V)) )))
(assert (forall ((arg0@@251 T@U) ) (! (= (type (Tclass.MutableMapModel.IteratorOutput_0 arg0@@251)) TyType) :qid |funType:Tclass.MutableMapModel.IteratorOutput_0| :pattern ( (Tclass.MutableMapModel.IteratorOutput_0 arg0@@251)) )))
(assert (forall ((MutableMapModel.IteratorOutput$V@@0 T@U) ) (!  (=> (= (type MutableMapModel.IteratorOutput$V@@0) TyType) (= (Tclass.MutableMapModel.IteratorOutput_0 (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@0)) MutableMapModel.IteratorOutput$V@@0)) :qid |unknown.0:0| :skolemid |1129| :pattern ( (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@0)) )))
(assert (forall ((MutableMapModel.IteratorOutput$V@@1 T@U) (bx@@79 T@U) ) (!  (=> (and (and (= (type MutableMapModel.IteratorOutput$V@@1) TyType) (= (type bx@@79) BoxType)) ($IsBox bx@@79 (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@79)) bx@@79) ($Is ($Unbox DatatypeTypeType bx@@79) (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@1)))) :qid |unknown.0:0| :skolemid |1130| :pattern ( ($IsBox bx@@79 (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@1))) )))
(assert (forall ((MutableMapModel.IteratorOutput$V@@2 T@U) (|a#72#0#0| Int) (|a#72#1#0| T@U) ) (!  (=> (and (= (type MutableMapModel.IteratorOutput$V@@2) TyType) (= (type |a#72#1#0|) BoxType)) (= ($Is (|#MutableMapModel.IteratorOutput.Next| |a#72#0#0| |a#72#1#0|) (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@2))  (and ($Is (int_2_U |a#72#0#0|) Tclass.NativeTypes.uint64) ($IsBox |a#72#1#0| MutableMapModel.IteratorOutput$V@@2)))) :qid |unknown.0:0| :skolemid |1131| :pattern ( ($Is (|#MutableMapModel.IteratorOutput.Next| |a#72#0#0| |a#72#1#0|) (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@2))) )))
(assert (forall ((MutableMapModel.IteratorOutput$V@@3 T@U) (|a#73#0#0| Int) (|a#73#1#0| T@U) ($h@@42 T@U) ) (!  (=> (and (and (and (= (type MutableMapModel.IteratorOutput$V@@3) TyType) (= (type |a#73#1#0|) BoxType)) (= (type $h@@42) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@42)) (= ($IsAlloc (|#MutableMapModel.IteratorOutput.Next| |a#73#0#0| |a#73#1#0|) (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@3) $h@@42)  (and ($IsAlloc (int_2_U |a#73#0#0|) Tclass.NativeTypes.uint64 $h@@42) ($IsAllocBox |a#73#1#0| MutableMapModel.IteratorOutput$V@@3 $h@@42)))) :qid |unknown.0:0| :skolemid |1132| :pattern ( ($IsAlloc (|#MutableMapModel.IteratorOutput.Next| |a#73#0#0| |a#73#1#0|) (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@3) $h@@42)) )))
(assert (forall ((d@@51 T@U) ($h@@43 T@U) ) (!  (=> (and (and (= (type d@@51) DatatypeTypeType) (= (type $h@@43) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@43) (and (MutableMapModel.IteratorOutput.Next_q d@@51) (exists ((MutableMapModel.IteratorOutput$V@@4 T@U) ) (!  (and (= (type MutableMapModel.IteratorOutput$V@@4) TyType) ($IsAlloc d@@51 (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@4) $h@@43)) :qid |unknown.0:0| :skolemid |1133| :pattern ( ($IsAlloc d@@51 (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@4) $h@@43)) ))))) ($IsAlloc (int_2_U (MutableMapModel.IteratorOutput.key d@@51)) Tclass.NativeTypes.uint64 $h@@43)) :qid |unknown.0:0| :skolemid |1134| :pattern ( ($IsAlloc (int_2_U (MutableMapModel.IteratorOutput.key d@@51)) Tclass.NativeTypes.uint64 $h@@43)) )))
(assert (forall ((arg0@@252 T@U) ) (! (= (type (MutableMapModel.IteratorOutput.value arg0@@252)) BoxType) :qid |funType:MutableMapModel.IteratorOutput.value| :pattern ( (MutableMapModel.IteratorOutput.value arg0@@252)) )))
(assert (forall ((d@@52 T@U) (MutableMapModel.IteratorOutput$V@@5 T@U) ($h@@44 T@U) ) (!  (=> (and (and (and (= (type d@@52) DatatypeTypeType) (= (type MutableMapModel.IteratorOutput$V@@5) TyType)) (= (type $h@@44) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@44) (and (MutableMapModel.IteratorOutput.Next_q d@@52) ($IsAlloc d@@52 (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@5) $h@@44)))) ($IsAllocBox (MutableMapModel.IteratorOutput.value d@@52) MutableMapModel.IteratorOutput$V@@5 $h@@44)) :qid |unknown.0:0| :skolemid |1135| :pattern ( ($IsAllocBox (MutableMapModel.IteratorOutput.value d@@52) MutableMapModel.IteratorOutput$V@@5 $h@@44)) )))
(assert (forall ((|a#74#0#0| Int) (|a#74#1#0| T@U) ) (!  (=> (= (type |a#74#1#0|) BoxType) (= (|#MutableMapModel.IteratorOutput.Next| (LitInt |a#74#0#0|) (Lit |a#74#1#0|)) (Lit (|#MutableMapModel.IteratorOutput.Next| |a#74#0#0| |a#74#1#0|)))) :qid |MutableMapModelidfy.1401:37| :skolemid |1136| :pattern ( (|#MutableMapModel.IteratorOutput.Next| (LitInt |a#74#0#0|) (Lit |a#74#1#0|))) )))
(assert (forall ((|a#75#0#0| Int) (|a#75#1#0| T@U) ) (!  (=> (= (type |a#75#1#0|) BoxType) (= (MutableMapModel.IteratorOutput.key (|#MutableMapModel.IteratorOutput.Next| |a#75#0#0| |a#75#1#0|)) |a#75#0#0|)) :qid |MutableMapModelidfy.1401:37| :skolemid |1137| :pattern ( (|#MutableMapModel.IteratorOutput.Next| |a#75#0#0| |a#75#1#0|)) )))
(assert (forall ((|a#76#0#0| Int) (|a#76#1#0| T@U) ) (!  (=> (= (type |a#76#1#0|) BoxType) (= (MutableMapModel.IteratorOutput.value (|#MutableMapModel.IteratorOutput.Next| |a#76#0#0| |a#76#1#0|)) |a#76#1#0|)) :qid |MutableMapModelidfy.1401:37| :skolemid |1138| :pattern ( (|#MutableMapModel.IteratorOutput.Next| |a#76#0#0| |a#76#1#0|)) )))
(assert (forall ((|a#77#0#0| Int) (|a#77#1#0| T@U) ) (!  (=> (= (type |a#77#1#0|) BoxType) (< (BoxRank |a#77#1#0|) (DtRank (|#MutableMapModel.IteratorOutput.Next| |a#77#0#0| |a#77#1#0|)))) :qid |MutableMapModelidfy.1401:37| :skolemid |1139| :pattern ( (|#MutableMapModel.IteratorOutput.Next| |a#77#0#0| |a#77#1#0|)) )))
(assert (= (type |#MutableMapModel.IteratorOutput.Done|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#MutableMapModel.IteratorOutput.Done|) |##MutableMapModel.IteratorOutput.Done|))
(assert (forall ((d@@53 T@U) ) (!  (=> (= (type d@@53) DatatypeTypeType) (= (MutableMapModel.IteratorOutput.Done_q d@@53) (= (DatatypeCtorId d@@53) |##MutableMapModel.IteratorOutput.Done|))) :qid |unknown.0:0| :skolemid |1140| :pattern ( (MutableMapModel.IteratorOutput.Done_q d@@53)) )))
(assert (forall ((d@@54 T@U) ) (!  (=> (and (= (type d@@54) DatatypeTypeType) (MutableMapModel.IteratorOutput.Done_q d@@54)) (= d@@54 |#MutableMapModel.IteratorOutput.Done|)) :qid |unknown.0:0| :skolemid |1141| :pattern ( (MutableMapModel.IteratorOutput.Done_q d@@54)) )))
(assert (forall ((MutableMapModel.IteratorOutput$V@@6 T@U) ) (!  (=> (= (type MutableMapModel.IteratorOutput$V@@6) TyType) ($Is |#MutableMapModel.IteratorOutput.Done| (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@6))) :qid |unknown.0:0| :skolemid |1142| :pattern ( ($Is |#MutableMapModel.IteratorOutput.Done| (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@6))) )))
(assert (forall ((MutableMapModel.IteratorOutput$V@@7 T@U) ($h@@45 T@U) ) (!  (=> (and (and (= (type MutableMapModel.IteratorOutput$V@@7) TyType) (= (type $h@@45) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@45)) ($IsAlloc |#MutableMapModel.IteratorOutput.Done| (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@7) $h@@45)) :qid |unknown.0:0| :skolemid |1143| :pattern ( ($IsAlloc |#MutableMapModel.IteratorOutput.Done| (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@7) $h@@45)) )))
(assert (= |#MutableMapModel.IteratorOutput.Done| (Lit |#MutableMapModel.IteratorOutput.Done|)))
(assert (forall ((d@@55 T@U) ) (!  (=> (and (= (type d@@55) DatatypeTypeType) (|$IsA#MutableMapModel.IteratorOutput| d@@55)) (or (MutableMapModel.IteratorOutput.Next_q d@@55) (MutableMapModel.IteratorOutput.Done_q d@@55))) :qid |unknown.0:0| :skolemid |1144| :pattern ( (|$IsA#MutableMapModel.IteratorOutput| d@@55)) )))
(assert (forall ((MutableMapModel.IteratorOutput$V@@8 T@U) (d@@56 T@U) ) (!  (=> (and (and (= (type MutableMapModel.IteratorOutput$V@@8) TyType) (= (type d@@56) DatatypeTypeType)) ($Is d@@56 (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@8))) (or (MutableMapModel.IteratorOutput.Next_q d@@56) (MutableMapModel.IteratorOutput.Done_q d@@56))) :qid |unknown.0:0| :skolemid |1145| :pattern ( (MutableMapModel.IteratorOutput.Done_q d@@56) ($Is d@@56 (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@8))) :pattern ( (MutableMapModel.IteratorOutput.Next_q d@@56) ($Is d@@56 (Tclass.MutableMapModel.IteratorOutput MutableMapModel.IteratorOutput$V@@8))) )))
(assert (forall ((a@@128 T@U) (b@@78 T@U) ) (!  (=> (and (and (= (type a@@128) DatatypeTypeType) (= (type b@@78) DatatypeTypeType)) (and (MutableMapModel.IteratorOutput.Next_q a@@128) (MutableMapModel.IteratorOutput.Next_q b@@78))) (= (|MutableMapModel.IteratorOutput#Equal| a@@128 b@@78)  (and (= (MutableMapModel.IteratorOutput.key a@@128) (MutableMapModel.IteratorOutput.key b@@78)) (= (MutableMapModel.IteratorOutput.value a@@128) (MutableMapModel.IteratorOutput.value b@@78))))) :qid |unknown.0:0| :skolemid |1146| :pattern ( (|MutableMapModel.IteratorOutput#Equal| a@@128 b@@78) (MutableMapModel.IteratorOutput.Next_q a@@128)) :pattern ( (|MutableMapModel.IteratorOutput#Equal| a@@128 b@@78) (MutableMapModel.IteratorOutput.Next_q b@@78)) )))
(assert (forall ((a@@129 T@U) (b@@79 T@U) ) (!  (=> (and (and (= (type a@@129) DatatypeTypeType) (= (type b@@79) DatatypeTypeType)) (and (MutableMapModel.IteratorOutput.Done_q a@@129) (MutableMapModel.IteratorOutput.Done_q b@@79))) (= (|MutableMapModel.IteratorOutput#Equal| a@@129 b@@79) true)) :qid |unknown.0:0| :skolemid |1147| :pattern ( (|MutableMapModel.IteratorOutput#Equal| a@@129 b@@79) (MutableMapModel.IteratorOutput.Done_q a@@129)) :pattern ( (|MutableMapModel.IteratorOutput#Equal| a@@129 b@@79) (MutableMapModel.IteratorOutput.Done_q b@@79)) )))
(assert (forall ((a@@130 T@U) (b@@80 T@U) ) (!  (=> (and (= (type a@@130) DatatypeTypeType) (= (type b@@80) DatatypeTypeType)) (= (|MutableMapModel.IteratorOutput#Equal| a@@130 b@@80) (= a@@130 b@@80))) :qid |unknown.0:0| :skolemid |1148| :pattern ( (|MutableMapModel.IteratorOutput#Equal| a@@130 b@@80)) )))
(assert (forall ((arg0@@253 Int) (arg1@@114 T@U) (arg2@@64 T@U) (arg3@@39 T@U) ) (! (= (type (|#MutableMapModel.Iterator.Iterator| arg0@@253 arg1@@114 arg2@@64 arg3@@39)) DatatypeTypeType) :qid |funType:#MutableMapModel.Iterator.Iterator| :pattern ( (|#MutableMapModel.Iterator.Iterator| arg0@@253 arg1@@114 arg2@@64 arg3@@39)) )))
(assert (forall ((|a#83#0#0| Int) (|a#83#1#0| T@U) (|a#83#2#0| T@U) (|a#83#3#0| T@U) ) (!  (=> (and (and (= (type |a#83#1#0|) (MapType0Type BoxType boolType)) (= (type |a#83#2#0|) BoxType)) (= (type |a#83#3#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#MutableMapModel.Iterator.Iterator| |a#83#0#0| |a#83#1#0| |a#83#2#0| |a#83#3#0|)) |##MutableMapModel.Iterator.Iterator|)) :qid |MutableMapModelidfy.1404:5| :skolemid |1149| :pattern ( (|#MutableMapModel.Iterator.Iterator| |a#83#0#0| |a#83#1#0| |a#83#2#0| |a#83#3#0|)) )))
(assert (forall ((d@@57 T@U) ) (!  (=> (= (type d@@57) DatatypeTypeType) (= (MutableMapModel.Iterator.Iterator_q d@@57) (= (DatatypeCtorId d@@57) |##MutableMapModel.Iterator.Iterator|))) :qid |unknown.0:0| :skolemid |1150| :pattern ( (MutableMapModel.Iterator.Iterator_q d@@57)) )))
(assert (forall ((d@@58 T@U) ) (!  (=> (and (= (type d@@58) DatatypeTypeType) (MutableMapModel.Iterator.Iterator_q d@@58)) (exists ((|a#84#0#0| Int) (|a#84#1#0| T@U) (|a#84#2#0| T@U) (|a#84#3#0| T@U) ) (!  (and (and (and (= (type |a#84#1#0|) (MapType0Type BoxType boolType)) (= (type |a#84#2#0|) BoxType)) (= (type |a#84#3#0|) DatatypeTypeType)) (= d@@58 (|#MutableMapModel.Iterator.Iterator| |a#84#0#0| |a#84#1#0| |a#84#2#0| |a#84#3#0|))) :qid |MutableMapModelidfy.1404:5| :skolemid |1151| :no-pattern (type |a#84#1#0|) :no-pattern (type |a#84#2#0|) :no-pattern (type |a#84#3#0|) :no-pattern (U_2_int |a#84#1#0|) :no-pattern (U_2_bool |a#84#1#0|) :no-pattern (U_2_int |a#84#2#0|) :no-pattern (U_2_bool |a#84#2#0|) :no-pattern (U_2_int |a#84#3#0|) :no-pattern (U_2_bool |a#84#3#0|) ))) :qid |unknown.0:0| :skolemid |1152| :pattern ( (MutableMapModel.Iterator.Iterator_q d@@58)) )))
(assert (forall ((arg0@@254 T@U) ) (! (= (type (Tclass.MutableMapModel.Iterator arg0@@254)) TyType) :qid |funType:Tclass.MutableMapModel.Iterator| :pattern ( (Tclass.MutableMapModel.Iterator arg0@@254)) )))
(assert (forall ((MutableMapModel.Iterator$V T@U) ) (!  (=> (= (type MutableMapModel.Iterator$V) TyType) (and (= (Tag (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V)) Tagclass.MutableMapModel.Iterator) (= (TagFamily (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V)) tytagFamily$Iterator))) :qid |unknown.0:0| :skolemid |1153| :pattern ( (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V)) )))
(assert (forall ((arg0@@255 T@U) ) (! (= (type (Tclass.MutableMapModel.Iterator_0 arg0@@255)) TyType) :qid |funType:Tclass.MutableMapModel.Iterator_0| :pattern ( (Tclass.MutableMapModel.Iterator_0 arg0@@255)) )))
(assert (forall ((MutableMapModel.Iterator$V@@0 T@U) ) (!  (=> (= (type MutableMapModel.Iterator$V@@0) TyType) (= (Tclass.MutableMapModel.Iterator_0 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@0)) MutableMapModel.Iterator$V@@0)) :qid |unknown.0:0| :skolemid |1154| :pattern ( (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@0)) )))
(assert (forall ((MutableMapModel.Iterator$V@@1 T@U) (bx@@80 T@U) ) (!  (=> (and (and (= (type MutableMapModel.Iterator$V@@1) TyType) (= (type bx@@80) BoxType)) ($IsBox bx@@80 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@80)) bx@@80) ($Is ($Unbox DatatypeTypeType bx@@80) (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@1)))) :qid |unknown.0:0| :skolemid |1155| :pattern ( ($IsBox bx@@80 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@1))) )))
(assert (forall ((MutableMapModel.Iterator$V@@2 T@U) (|a#85#0#0| Int) (|a#85#1#0| T@U) (|a#85#2#0| T@U) (|a#85#3#0| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel.Iterator$V@@2) TyType) (= (type |a#85#1#0|) (MapType0Type BoxType boolType))) (= (type |a#85#2#0|) BoxType)) (= (type |a#85#3#0|) DatatypeTypeType)) (= ($Is (|#MutableMapModel.Iterator.Iterator| |a#85#0#0| |a#85#1#0| |a#85#2#0| |a#85#3#0|) (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@2))  (and (and (and ($Is (int_2_U |a#85#0#0|) Tclass.NativeTypes.uint64) ($Is |a#85#1#0| (TSet Tclass.NativeTypes.uint64))) ($Is |a#85#2#0| TORDINAL)) ($Is |a#85#3#0| (Tclass.MutableMapModel.IteratorOutput MutableMapModel.Iterator$V@@2))))) :qid |unknown.0:0| :skolemid |1156| :pattern ( ($Is (|#MutableMapModel.Iterator.Iterator| |a#85#0#0| |a#85#1#0| |a#85#2#0| |a#85#3#0|) (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@2))) )))
(assert (forall ((MutableMapModel.Iterator$V@@3 T@U) (|a#86#0#0| Int) (|a#86#1#0| T@U) (|a#86#2#0| T@U) (|a#86#3#0| T@U) ($h@@46 T@U) ) (!  (=> (and (and (and (and (and (= (type MutableMapModel.Iterator$V@@3) TyType) (= (type |a#86#1#0|) (MapType0Type BoxType boolType))) (= (type |a#86#2#0|) BoxType)) (= (type |a#86#3#0|) DatatypeTypeType)) (= (type $h@@46) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@46)) (= ($IsAlloc (|#MutableMapModel.Iterator.Iterator| |a#86#0#0| |a#86#1#0| |a#86#2#0| |a#86#3#0|) (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@3) $h@@46)  (and (and (and ($IsAlloc (int_2_U |a#86#0#0|) Tclass.NativeTypes.uint64 $h@@46) ($IsAlloc |a#86#1#0| (TSet Tclass.NativeTypes.uint64) $h@@46)) ($IsAlloc |a#86#2#0| TORDINAL $h@@46)) ($IsAlloc |a#86#3#0| (Tclass.MutableMapModel.IteratorOutput MutableMapModel.Iterator$V@@3) $h@@46)))) :qid |unknown.0:0| :skolemid |1157| :pattern ( ($IsAlloc (|#MutableMapModel.Iterator.Iterator| |a#86#0#0| |a#86#1#0| |a#86#2#0| |a#86#3#0|) (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@3) $h@@46)) )))
(assert (forall ((d@@59 T@U) ($h@@47 T@U) ) (!  (=> (and (and (= (type d@@59) DatatypeTypeType) (= (type $h@@47) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@47) (and (MutableMapModel.Iterator.Iterator_q d@@59) (exists ((MutableMapModel.Iterator$V@@4 T@U) ) (!  (and (= (type MutableMapModel.Iterator$V@@4) TyType) ($IsAlloc d@@59 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@4) $h@@47)) :qid |unknown.0:0| :skolemid |1158| :pattern ( ($IsAlloc d@@59 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@4) $h@@47)) ))))) ($IsAlloc (int_2_U (MutableMapModel.Iterator.i d@@59)) Tclass.NativeTypes.uint64 $h@@47)) :qid |unknown.0:0| :skolemid |1159| :pattern ( ($IsAlloc (int_2_U (MutableMapModel.Iterator.i d@@59)) Tclass.NativeTypes.uint64 $h@@47)) )))
(assert (forall ((arg0@@256 T@U) ) (! (= (type (MutableMapModel.Iterator.s arg0@@256)) (MapType0Type BoxType boolType)) :qid |funType:MutableMapModel.Iterator.s| :pattern ( (MutableMapModel.Iterator.s arg0@@256)) )))
(assert (forall ((d@@60 T@U) ($h@@48 T@U) ) (!  (=> (and (and (= (type d@@60) DatatypeTypeType) (= (type $h@@48) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@48) (and (MutableMapModel.Iterator.Iterator_q d@@60) (exists ((MutableMapModel.Iterator$V@@5 T@U) ) (!  (and (= (type MutableMapModel.Iterator$V@@5) TyType) ($IsAlloc d@@60 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@5) $h@@48)) :qid |unknown.0:0| :skolemid |1160| :pattern ( ($IsAlloc d@@60 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@5) $h@@48)) ))))) ($IsAlloc (MutableMapModel.Iterator.s d@@60) (TSet Tclass.NativeTypes.uint64) $h@@48)) :qid |unknown.0:0| :skolemid |1161| :pattern ( ($IsAlloc (MutableMapModel.Iterator.s d@@60) (TSet Tclass.NativeTypes.uint64) $h@@48)) )))
(assert (forall ((arg0@@257 T@U) ) (! (= (type (MutableMapModel.Iterator.decreaser arg0@@257)) BoxType) :qid |funType:MutableMapModel.Iterator.decreaser| :pattern ( (MutableMapModel.Iterator.decreaser arg0@@257)) )))
(assert (forall ((d@@61 T@U) ($h@@49 T@U) ) (!  (=> (and (and (= (type d@@61) DatatypeTypeType) (= (type $h@@49) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@49) (and (MutableMapModel.Iterator.Iterator_q d@@61) (exists ((MutableMapModel.Iterator$V@@6 T@U) ) (!  (and (= (type MutableMapModel.Iterator$V@@6) TyType) ($IsAlloc d@@61 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@6) $h@@49)) :qid |unknown.0:0| :skolemid |1162| :pattern ( ($IsAlloc d@@61 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@6) $h@@49)) ))))) ($IsAlloc (MutableMapModel.Iterator.decreaser d@@61) TORDINAL $h@@49)) :qid |unknown.0:0| :skolemid |1163| :pattern ( ($IsAlloc (MutableMapModel.Iterator.decreaser d@@61) TORDINAL $h@@49)) )))
(assert (forall ((arg0@@258 T@U) ) (! (= (type (MutableMapModel.Iterator.next arg0@@258)) DatatypeTypeType) :qid |funType:MutableMapModel.Iterator.next| :pattern ( (MutableMapModel.Iterator.next arg0@@258)) )))
(assert (forall ((d@@62 T@U) (MutableMapModel.Iterator$V@@7 T@U) ($h@@50 T@U) ) (!  (=> (and (and (and (= (type d@@62) DatatypeTypeType) (= (type MutableMapModel.Iterator$V@@7) TyType)) (= (type $h@@50) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@50) (and (MutableMapModel.Iterator.Iterator_q d@@62) ($IsAlloc d@@62 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@7) $h@@50)))) ($IsAlloc (MutableMapModel.Iterator.next d@@62) (Tclass.MutableMapModel.IteratorOutput MutableMapModel.Iterator$V@@7) $h@@50)) :qid |unknown.0:0| :skolemid |1164| :pattern ( ($IsAlloc (MutableMapModel.Iterator.next d@@62) (Tclass.MutableMapModel.IteratorOutput MutableMapModel.Iterator$V@@7) $h@@50)) )))
(assert (forall ((|a#87#0#0| Int) (|a#87#1#0| T@U) (|a#87#2#0| T@U) (|a#87#3#0| T@U) ) (!  (=> (and (and (= (type |a#87#1#0|) (MapType0Type BoxType boolType)) (= (type |a#87#2#0|) BoxType)) (= (type |a#87#3#0|) DatatypeTypeType)) (= (|#MutableMapModel.Iterator.Iterator| (LitInt |a#87#0#0|) (Lit |a#87#1#0|) (Lit |a#87#2#0|) (Lit |a#87#3#0|)) (Lit (|#MutableMapModel.Iterator.Iterator| |a#87#0#0| |a#87#1#0| |a#87#2#0| |a#87#3#0|)))) :qid |MutableMapModelidfy.1404:5| :skolemid |1165| :pattern ( (|#MutableMapModel.Iterator.Iterator| (LitInt |a#87#0#0|) (Lit |a#87#1#0|) (Lit |a#87#2#0|) (Lit |a#87#3#0|))) )))
(assert (forall ((|a#88#0#0| Int) (|a#88#1#0| T@U) (|a#88#2#0| T@U) (|a#88#3#0| T@U) ) (!  (=> (and (and (= (type |a#88#1#0|) (MapType0Type BoxType boolType)) (= (type |a#88#2#0|) BoxType)) (= (type |a#88#3#0|) DatatypeTypeType)) (= (MutableMapModel.Iterator.i (|#MutableMapModel.Iterator.Iterator| |a#88#0#0| |a#88#1#0| |a#88#2#0| |a#88#3#0|)) |a#88#0#0|)) :qid |MutableMapModelidfy.1404:5| :skolemid |1166| :pattern ( (|#MutableMapModel.Iterator.Iterator| |a#88#0#0| |a#88#1#0| |a#88#2#0| |a#88#3#0|)) )))
(assert (forall ((|a#89#0#0| Int) (|a#89#1#0| T@U) (|a#89#2#0| T@U) (|a#89#3#0| T@U) ) (!  (=> (and (and (= (type |a#89#1#0|) (MapType0Type BoxType boolType)) (= (type |a#89#2#0|) BoxType)) (= (type |a#89#3#0|) DatatypeTypeType)) (= (MutableMapModel.Iterator.s (|#MutableMapModel.Iterator.Iterator| |a#89#0#0| |a#89#1#0| |a#89#2#0| |a#89#3#0|)) |a#89#1#0|)) :qid |MutableMapModelidfy.1404:5| :skolemid |1167| :pattern ( (|#MutableMapModel.Iterator.Iterator| |a#89#0#0| |a#89#1#0| |a#89#2#0| |a#89#3#0|)) )))
(assert (forall ((|a#90#0#0| Int) (|a#90#1#0| T@U) (|a#90#2#0| T@U) (|a#90#3#0| T@U) (d@@63 T@U) ) (!  (=> (and (and (and (and (= (type |a#90#1#0|) (MapType0Type BoxType boolType)) (= (type |a#90#2#0|) BoxType)) (= (type |a#90#3#0|) DatatypeTypeType)) (= (type d@@63) DatatypeTypeType)) (U_2_bool (MapType0Select |a#90#1#0| ($Box d@@63)))) (< (DtRank d@@63) (DtRank (|#MutableMapModel.Iterator.Iterator| |a#90#0#0| |a#90#1#0| |a#90#2#0| |a#90#3#0|)))) :qid |MutableMapModelidfy.1404:5| :skolemid |1168| :pattern ( (MapType0Select |a#90#1#0| ($Box d@@63)) (|#MutableMapModel.Iterator.Iterator| |a#90#0#0| |a#90#1#0| |a#90#2#0| |a#90#3#0|)) )))
(assert (forall ((|a#91#0#0| Int) (|a#91#1#0| T@U) (|a#91#2#0| T@U) (|a#91#3#0| T@U) ) (!  (=> (and (and (= (type |a#91#1#0|) (MapType0Type BoxType boolType)) (= (type |a#91#2#0|) BoxType)) (= (type |a#91#3#0|) DatatypeTypeType)) (= (MutableMapModel.Iterator.decreaser (|#MutableMapModel.Iterator.Iterator| |a#91#0#0| |a#91#1#0| |a#91#2#0| |a#91#3#0|)) |a#91#2#0|)) :qid |MutableMapModelidfy.1404:5| :skolemid |1169| :pattern ( (|#MutableMapModel.Iterator.Iterator| |a#91#0#0| |a#91#1#0| |a#91#2#0| |a#91#3#0|)) )))
(assert (forall ((|a#92#0#0| Int) (|a#92#1#0| T@U) (|a#92#2#0| T@U) (|a#92#3#0| T@U) ) (!  (=> (and (and (= (type |a#92#1#0|) (MapType0Type BoxType boolType)) (= (type |a#92#2#0|) BoxType)) (= (type |a#92#3#0|) DatatypeTypeType)) (= (MutableMapModel.Iterator.next (|#MutableMapModel.Iterator.Iterator| |a#92#0#0| |a#92#1#0| |a#92#2#0| |a#92#3#0|)) |a#92#3#0|)) :qid |MutableMapModelidfy.1404:5| :skolemid |1170| :pattern ( (|#MutableMapModel.Iterator.Iterator| |a#92#0#0| |a#92#1#0| |a#92#2#0| |a#92#3#0|)) )))
(assert (forall ((|a#93#0#0| Int) (|a#93#1#0| T@U) (|a#93#2#0| T@U) (|a#93#3#0| T@U) ) (!  (=> (and (and (= (type |a#93#1#0|) (MapType0Type BoxType boolType)) (= (type |a#93#2#0|) BoxType)) (= (type |a#93#3#0|) DatatypeTypeType)) (< (DtRank |a#93#3#0|) (DtRank (|#MutableMapModel.Iterator.Iterator| |a#93#0#0| |a#93#1#0| |a#93#2#0| |a#93#3#0|)))) :qid |MutableMapModelidfy.1404:5| :skolemid |1171| :pattern ( (|#MutableMapModel.Iterator.Iterator| |a#93#0#0| |a#93#1#0| |a#93#2#0| |a#93#3#0|)) )))
(assert (forall ((d@@64 T@U) ) (!  (=> (and (= (type d@@64) DatatypeTypeType) (|$IsA#MutableMapModel.Iterator| d@@64)) (MutableMapModel.Iterator.Iterator_q d@@64)) :qid |unknown.0:0| :skolemid |1172| :pattern ( (|$IsA#MutableMapModel.Iterator| d@@64)) )))
(assert (forall ((MutableMapModel.Iterator$V@@8 T@U) (d@@65 T@U) ) (!  (=> (and (and (= (type MutableMapModel.Iterator$V@@8) TyType) (= (type d@@65) DatatypeTypeType)) ($Is d@@65 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@8))) (MutableMapModel.Iterator.Iterator_q d@@65)) :qid |unknown.0:0| :skolemid |1173| :pattern ( (MutableMapModel.Iterator.Iterator_q d@@65) ($Is d@@65 (Tclass.MutableMapModel.Iterator MutableMapModel.Iterator$V@@8))) )))
(assert (forall ((a@@131 T@U) (b@@81 T@U) ) (!  (=> (and (and (= (type a@@131) DatatypeTypeType) (= (type b@@81) DatatypeTypeType)) true) (= (|MutableMapModel.Iterator#Equal| a@@131 b@@81)  (and (and (and (= (MutableMapModel.Iterator.i a@@131) (MutableMapModel.Iterator.i b@@81)) (|Set#Equal| (MutableMapModel.Iterator.s a@@131) (MutableMapModel.Iterator.s b@@81))) (= (MutableMapModel.Iterator.decreaser a@@131) (MutableMapModel.Iterator.decreaser b@@81))) (|MutableMapModel.IteratorOutput#Equal| (MutableMapModel.Iterator.next a@@131) (MutableMapModel.Iterator.next b@@81))))) :qid |unknown.0:0| :skolemid |1174| :pattern ( (|MutableMapModel.Iterator#Equal| a@@131 b@@81)) )))
(assert (forall ((a@@132 T@U) (b@@82 T@U) ) (!  (=> (and (= (type a@@132) DatatypeTypeType) (= (type b@@82) DatatypeTypeType)) (= (|MutableMapModel.Iterator#Equal| a@@132 b@@82) (= a@@132 b@@82))) :qid |unknown.0:0| :skolemid |1175| :pattern ( (|MutableMapModel.Iterator#Equal| a@@132 b@@82)) )))
(assert (forall ((arg0@@259 Int) (arg1@@115 T@U) (arg2@@65 T@U) ) (! (= (type (|#MutableMapModel.SimpleIterator.SimpleIterator| arg0@@259 arg1@@115 arg2@@65)) DatatypeTypeType) :qid |funType:#MutableMapModel.SimpleIterator.SimpleIterator| :pattern ( (|#MutableMapModel.SimpleIterator.SimpleIterator| arg0@@259 arg1@@115 arg2@@65)) )))
(assert (forall ((|a#94#0#0| Int) (|a#94#1#0| T@U) (|a#94#2#0| T@U) ) (!  (=> (and (= (type |a#94#1#0|) (MapType0Type BoxType boolType)) (= (type |a#94#2#0|) BoxType)) (= (DatatypeCtorId (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#94#0#0| |a#94#1#0| |a#94#2#0|)) |##MutableMapModel.SimpleIterator.SimpleIterator|)) :qid |MutableMapModelidfy.1410:5| :skolemid |1176| :pattern ( (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#94#0#0| |a#94#1#0| |a#94#2#0|)) )))
(assert (forall ((d@@66 T@U) ) (!  (=> (= (type d@@66) DatatypeTypeType) (= (MutableMapModel.SimpleIterator.SimpleIterator_q d@@66) (= (DatatypeCtorId d@@66) |##MutableMapModel.SimpleIterator.SimpleIterator|))) :qid |unknown.0:0| :skolemid |1177| :pattern ( (MutableMapModel.SimpleIterator.SimpleIterator_q d@@66)) )))
(assert (forall ((d@@67 T@U) ) (!  (=> (and (= (type d@@67) DatatypeTypeType) (MutableMapModel.SimpleIterator.SimpleIterator_q d@@67)) (exists ((|a#95#0#0| Int) (|a#95#1#0| T@U) (|a#95#2#0| T@U) ) (!  (and (and (= (type |a#95#1#0|) (MapType0Type BoxType boolType)) (= (type |a#95#2#0|) BoxType)) (= d@@67 (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#95#0#0| |a#95#1#0| |a#95#2#0|))) :qid |MutableMapModelidfy.1410:5| :skolemid |1178| :no-pattern (type |a#95#1#0|) :no-pattern (type |a#95#2#0|) :no-pattern (U_2_int |a#95#1#0|) :no-pattern (U_2_bool |a#95#1#0|) :no-pattern (U_2_int |a#95#2#0|) :no-pattern (U_2_bool |a#95#2#0|) ))) :qid |unknown.0:0| :skolemid |1179| :pattern ( (MutableMapModel.SimpleIterator.SimpleIterator_q d@@67)) )))
(assert (= (type Tclass.MutableMapModel.SimpleIterator) TyType))
(assert (= (Tag Tclass.MutableMapModel.SimpleIterator) Tagclass.MutableMapModel.SimpleIterator))
(assert (= (TagFamily Tclass.MutableMapModel.SimpleIterator) tytagFamily$SimpleIterator))
(assert (forall ((bx@@81 T@U) ) (!  (=> (and (= (type bx@@81) BoxType) ($IsBox bx@@81 Tclass.MutableMapModel.SimpleIterator)) (and (= ($Box ($Unbox DatatypeTypeType bx@@81)) bx@@81) ($Is ($Unbox DatatypeTypeType bx@@81) Tclass.MutableMapModel.SimpleIterator))) :qid |unknown.0:0| :skolemid |1180| :pattern ( ($IsBox bx@@81 Tclass.MutableMapModel.SimpleIterator)) )))
(assert (forall ((|a#96#0#0| Int) (|a#96#1#0| T@U) (|a#96#2#0| T@U) ) (!  (=> (and (= (type |a#96#1#0|) (MapType0Type BoxType boolType)) (= (type |a#96#2#0|) BoxType)) (= ($Is (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#96#0#0| |a#96#1#0| |a#96#2#0|) Tclass.MutableMapModel.SimpleIterator)  (and (and ($Is (int_2_U |a#96#0#0|) Tclass.NativeTypes.uint64) ($Is |a#96#1#0| (TSet Tclass.NativeTypes.uint64))) ($Is |a#96#2#0| TORDINAL)))) :qid |MutableMapModelidfy.1410:5| :skolemid |1181| :pattern ( ($Is (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#96#0#0| |a#96#1#0| |a#96#2#0|) Tclass.MutableMapModel.SimpleIterator)) )))
(assert (forall ((|a#97#0#0| Int) (|a#97#1#0| T@U) (|a#97#2#0| T@U) ($h@@51 T@U) ) (!  (=> (and (and (and (= (type |a#97#1#0|) (MapType0Type BoxType boolType)) (= (type |a#97#2#0|) BoxType)) (= (type $h@@51) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@51)) (= ($IsAlloc (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#97#0#0| |a#97#1#0| |a#97#2#0|) Tclass.MutableMapModel.SimpleIterator $h@@51)  (and (and ($IsAlloc (int_2_U |a#97#0#0|) Tclass.NativeTypes.uint64 $h@@51) ($IsAlloc |a#97#1#0| (TSet Tclass.NativeTypes.uint64) $h@@51)) ($IsAlloc |a#97#2#0| TORDINAL $h@@51)))) :qid |MutableMapModelidfy.1410:5| :skolemid |1182| :pattern ( ($IsAlloc (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#97#0#0| |a#97#1#0| |a#97#2#0|) Tclass.MutableMapModel.SimpleIterator $h@@51)) )))
(assert (forall ((d@@68 T@U) ($h@@52 T@U) ) (!  (=> (and (and (= (type d@@68) DatatypeTypeType) (= (type $h@@52) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@52) (and (MutableMapModel.SimpleIterator.SimpleIterator_q d@@68) ($IsAlloc d@@68 Tclass.MutableMapModel.SimpleIterator $h@@52)))) ($IsAlloc (int_2_U (MutableMapModel.SimpleIterator.i d@@68)) Tclass.NativeTypes.uint64 $h@@52)) :qid |unknown.0:0| :skolemid |1183| :pattern ( ($IsAlloc (int_2_U (MutableMapModel.SimpleIterator.i d@@68)) Tclass.NativeTypes.uint64 $h@@52)) )))
(assert (forall ((arg0@@260 T@U) ) (! (= (type (MutableMapModel.SimpleIterator.s arg0@@260)) (MapType0Type BoxType boolType)) :qid |funType:MutableMapModel.SimpleIterator.s| :pattern ( (MutableMapModel.SimpleIterator.s arg0@@260)) )))
(assert (forall ((d@@69 T@U) ($h@@53 T@U) ) (!  (=> (and (and (= (type d@@69) DatatypeTypeType) (= (type $h@@53) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@53) (and (MutableMapModel.SimpleIterator.SimpleIterator_q d@@69) ($IsAlloc d@@69 Tclass.MutableMapModel.SimpleIterator $h@@53)))) ($IsAlloc (MutableMapModel.SimpleIterator.s d@@69) (TSet Tclass.NativeTypes.uint64) $h@@53)) :qid |unknown.0:0| :skolemid |1184| :pattern ( ($IsAlloc (MutableMapModel.SimpleIterator.s d@@69) (TSet Tclass.NativeTypes.uint64) $h@@53)) )))
(assert (forall ((arg0@@261 T@U) ) (! (= (type (MutableMapModel.SimpleIterator.decreaser arg0@@261)) BoxType) :qid |funType:MutableMapModel.SimpleIterator.decreaser| :pattern ( (MutableMapModel.SimpleIterator.decreaser arg0@@261)) )))
(assert (forall ((d@@70 T@U) ($h@@54 T@U) ) (!  (=> (and (and (= (type d@@70) DatatypeTypeType) (= (type $h@@54) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@54) (and (MutableMapModel.SimpleIterator.SimpleIterator_q d@@70) ($IsAlloc d@@70 Tclass.MutableMapModel.SimpleIterator $h@@54)))) ($IsAlloc (MutableMapModel.SimpleIterator.decreaser d@@70) TORDINAL $h@@54)) :qid |unknown.0:0| :skolemid |1185| :pattern ( ($IsAlloc (MutableMapModel.SimpleIterator.decreaser d@@70) TORDINAL $h@@54)) )))
(assert (forall ((|a#98#0#0| Int) (|a#98#1#0| T@U) (|a#98#2#0| T@U) ) (!  (=> (and (= (type |a#98#1#0|) (MapType0Type BoxType boolType)) (= (type |a#98#2#0|) BoxType)) (= (|#MutableMapModel.SimpleIterator.SimpleIterator| (LitInt |a#98#0#0|) (Lit |a#98#1#0|) (Lit |a#98#2#0|)) (Lit (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#98#0#0| |a#98#1#0| |a#98#2#0|)))) :qid |MutableMapModelidfy.1410:5| :skolemid |1186| :pattern ( (|#MutableMapModel.SimpleIterator.SimpleIterator| (LitInt |a#98#0#0|) (Lit |a#98#1#0|) (Lit |a#98#2#0|))) )))
(assert (forall ((|a#99#0#0| Int) (|a#99#1#0| T@U) (|a#99#2#0| T@U) ) (!  (=> (and (= (type |a#99#1#0|) (MapType0Type BoxType boolType)) (= (type |a#99#2#0|) BoxType)) (= (MutableMapModel.SimpleIterator.i (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#99#0#0| |a#99#1#0| |a#99#2#0|)) |a#99#0#0|)) :qid |MutableMapModelidfy.1410:5| :skolemid |1187| :pattern ( (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#99#0#0| |a#99#1#0| |a#99#2#0|)) )))
(assert (forall ((|a#100#0#0| Int) (|a#100#1#0| T@U) (|a#100#2#0| T@U) ) (!  (=> (and (= (type |a#100#1#0|) (MapType0Type BoxType boolType)) (= (type |a#100#2#0|) BoxType)) (= (MutableMapModel.SimpleIterator.s (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#100#0#0| |a#100#1#0| |a#100#2#0|)) |a#100#1#0|)) :qid |MutableMapModelidfy.1410:5| :skolemid |1188| :pattern ( (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#100#0#0| |a#100#1#0| |a#100#2#0|)) )))
(assert (forall ((|a#101#0#0| Int) (|a#101#1#0| T@U) (|a#101#2#0| T@U) (d@@71 T@U) ) (!  (=> (and (and (and (= (type |a#101#1#0|) (MapType0Type BoxType boolType)) (= (type |a#101#2#0|) BoxType)) (= (type d@@71) DatatypeTypeType)) (U_2_bool (MapType0Select |a#101#1#0| ($Box d@@71)))) (< (DtRank d@@71) (DtRank (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#101#0#0| |a#101#1#0| |a#101#2#0|)))) :qid |MutableMapModelidfy.1410:5| :skolemid |1189| :pattern ( (MapType0Select |a#101#1#0| ($Box d@@71)) (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#101#0#0| |a#101#1#0| |a#101#2#0|)) )))
(assert (forall ((|a#102#0#0| Int) (|a#102#1#0| T@U) (|a#102#2#0| T@U) ) (!  (=> (and (= (type |a#102#1#0|) (MapType0Type BoxType boolType)) (= (type |a#102#2#0|) BoxType)) (= (MutableMapModel.SimpleIterator.decreaser (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#102#0#0| |a#102#1#0| |a#102#2#0|)) |a#102#2#0|)) :qid |MutableMapModelidfy.1410:5| :skolemid |1190| :pattern ( (|#MutableMapModel.SimpleIterator.SimpleIterator| |a#102#0#0| |a#102#1#0| |a#102#2#0|)) )))
(assert (forall ((d@@72 T@U) ) (!  (=> (and (= (type d@@72) DatatypeTypeType) (|$IsA#MutableMapModel.SimpleIterator| d@@72)) (MutableMapModel.SimpleIterator.SimpleIterator_q d@@72)) :qid |unknown.0:0| :skolemid |1191| :pattern ( (|$IsA#MutableMapModel.SimpleIterator| d@@72)) )))
(assert (forall ((d@@73 T@U) ) (!  (=> (and (= (type d@@73) DatatypeTypeType) ($Is d@@73 Tclass.MutableMapModel.SimpleIterator)) (MutableMapModel.SimpleIterator.SimpleIterator_q d@@73)) :qid |unknown.0:0| :skolemid |1192| :pattern ( (MutableMapModel.SimpleIterator.SimpleIterator_q d@@73) ($Is d@@73 Tclass.MutableMapModel.SimpleIterator)) )))
(assert (forall ((a@@133 T@U) (b@@83 T@U) ) (!  (=> (and (and (= (type a@@133) DatatypeTypeType) (= (type b@@83) DatatypeTypeType)) true) (= (|MutableMapModel.SimpleIterator#Equal| a@@133 b@@83)  (and (and (= (MutableMapModel.SimpleIterator.i a@@133) (MutableMapModel.SimpleIterator.i b@@83)) (|Set#Equal| (MutableMapModel.SimpleIterator.s a@@133) (MutableMapModel.SimpleIterator.s b@@83))) (= (MutableMapModel.SimpleIterator.decreaser a@@133) (MutableMapModel.SimpleIterator.decreaser b@@83))))) :qid |unknown.0:0| :skolemid |1193| :pattern ( (|MutableMapModel.SimpleIterator#Equal| a@@133 b@@83)) )))
(assert (forall ((a@@134 T@U) (b@@84 T@U) ) (!  (=> (and (= (type a@@134) DatatypeTypeType) (= (type b@@84) DatatypeTypeType)) (= (|MutableMapModel.SimpleIterator#Equal| a@@134 b@@84) (= a@@134 b@@84))) :qid |unknown.0:0| :skolemid |1194| :pattern ( (|MutableMapModel.SimpleIterator#Equal| a@@134 b@@84)) )))
(assert (= (type Tclass.MutableMapModel.__default) TyType))
(assert (= (Tag Tclass.MutableMapModel.__default) Tagclass.MutableMapModel.__default))
(assert (= (TagFamily Tclass.MutableMapModel.__default) tytagFamily$_default))
(assert (forall ((bx@@82 T@U) ) (!  (=> (and (= (type bx@@82) BoxType) ($IsBox bx@@82 Tclass.MutableMapModel.__default)) (and (= ($Box ($Unbox refType bx@@82)) bx@@82) ($Is ($Unbox refType bx@@82) Tclass.MutableMapModel.__default))) :qid |unknown.0:0| :skolemid |1195| :pattern ( ($IsBox bx@@82 Tclass.MutableMapModel.__default)) )))
(assert (forall (($o@@9 T@U) ) (!  (=> (= (type $o@@9) refType) (= ($Is $o@@9 Tclass.MutableMapModel.__default)  (or (= $o@@9 null) (= (dtype $o@@9) Tclass.MutableMapModel.__default)))) :qid |unknown.0:0| :skolemid |1196| :pattern ( ($Is $o@@9 Tclass.MutableMapModel.__default)) )))
(assert (forall (($o@@10 T@U) ($h@@55 T@U) ) (!  (=> (and (= (type $o@@10) refType) (= (type $h@@55) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@10 Tclass.MutableMapModel.__default $h@@55)  (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@55 $o@@10) alloc))))) :qid |unknown.0:0| :skolemid |1197| :pattern ( ($IsAlloc $o@@10 Tclass.MutableMapModel.__default $h@@55)) )))
(assert (forall (($ly T@U) (|a#0@@1| Int) (|b#0@@1| Int) ) (!  (=> (= (type $ly) LayerTypeType) (= (MutableMapModel.__default.lshift ($LS $ly) |a#0@@1| |b#0@@1|) (MutableMapModel.__default.lshift $ly |a#0@@1| |b#0@@1|))) :qid |MutableMapModelidfy.39:29| :skolemid |1198| :pattern ( (MutableMapModel.__default.lshift ($LS $ly) |a#0@@1| |b#0@@1|)) )))
(assert  (and (forall ((arg0@@262 T@U) ) (! (= (type (AsFuelBottom arg0@@262)) LayerTypeType) :qid |funType:AsFuelBottom| :pattern ( (AsFuelBottom arg0@@262)) )) (= (type $LZ) LayerTypeType)))
(assert (forall (($ly@@0 T@U) (|a#0@@2| Int) (|b#0@@2| Int) ) (!  (=> (= (type $ly@@0) LayerTypeType) (= (MutableMapModel.__default.lshift $ly@@0 |a#0@@2| |b#0@@2|) (MutableMapModel.__default.lshift $LZ |a#0@@2| |b#0@@2|))) :qid |MutableMapModelidfy.39:29| :skolemid |1199| :pattern ( (MutableMapModel.__default.lshift (AsFuelBottom $ly@@0) |a#0@@2| |b#0@@2|)) )))
(assert  (=> (<= 12 $FunctionContextHeight) (forall (($ly@@1 T@U) (|a#0@@3| Int) (|b#0@@3| Int) ) (!  (=> (and (= (type $ly@@1) LayerTypeType) (or (|MutableMapModel.__default.lshift#canCall| |a#0@@3| |b#0@@3|) (and (not (= 12 $FunctionContextHeight)) (and (and (and (<= (LitInt 0) |a#0@@3|) (< |a#0@@3| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@3|) (< |b#0@@3| 4294967296))) (and (<= (LitInt 0) |b#0@@3|) (< |b#0@@3| 64)))))) (and (<= (LitInt 0) (MutableMapModel.__default.lshift $ly@@1 |a#0@@3| |b#0@@3|)) (< (MutableMapModel.__default.lshift $ly@@1 |a#0@@3| |b#0@@3|) 18446744073709551616))) :qid |MutableMapModelidfy.39:29| :skolemid |1200| :pattern ( (MutableMapModel.__default.lshift $ly@@1 |a#0@@3| |b#0@@3|)) ))))
(assert (forall (($ly@@2 T@U) (|a#0@@4| Int) (|b#0@@4| Int) ) (!  (=> (= (type $ly@@2) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@4|) (< |a#0@@4| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@4|) (< |b#0@@4| 4294967296))) (= (|MutableMapModel.__default.lshift#requires| $ly@@2 |a#0@@4| |b#0@@4|)  (and (<= (LitInt 0) |b#0@@4|) (< |b#0@@4| 64))))) :qid |MutableMapModelidfy.39:29| :skolemid |1201| :pattern ( (|MutableMapModel.__default.lshift#requires| $ly@@2 |a#0@@4| |b#0@@4|)) )))
(assert  (=> (<= 12 $FunctionContextHeight) (forall (($ly@@3 T@U) (|a#0@@5| Int) (|b#0@@5| Int) ) (!  (=> (and (= (type $ly@@3) LayerTypeType) (or (|MutableMapModel.__default.lshift#canCall| |a#0@@5| |b#0@@5|) (and (not (= 12 $FunctionContextHeight)) (and (and (and (<= (LitInt 0) |a#0@@5|) (< |a#0@@5| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@5|) (< |b#0@@5| 4294967296))) (and (<= (LitInt 0) |b#0@@5|) (< |b#0@@5| 64)))))) (= (MutableMapModel.__default.lshift ($LS $ly@@3) |a#0@@5| |b#0@@5|) (nat_from_bv64 (bvshl ((_ int2bv 64) |a#0@@5|) ((_ int2bv 64) |b#0@@5|))))) :qid |MutableMapModelidfy.39:29| :skolemid |1202| :pattern ( (MutableMapModel.__default.lshift ($LS $ly@@3) |a#0@@5| |b#0@@5|)) ))))
(assert  (=> (<= 12 $FunctionContextHeight) (forall (($ly@@4 T@U) (|a#0@@6| Int) (|b#0@@6| Int) ) (!  (=> (and (= (type $ly@@4) LayerTypeType) (or (|MutableMapModel.__default.lshift#canCall| (LitInt |a#0@@6|) (LitInt |b#0@@6|)) (and (not (= 12 $FunctionContextHeight)) (and (and (and (<= (LitInt 0) |a#0@@6|) (< |a#0@@6| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@6|) (< |b#0@@6| 4294967296))) (and (<= (LitInt 0) (LitInt |b#0@@6|)) (< |b#0@@6| 64)))))) (= (MutableMapModel.__default.lshift ($LS $ly@@4) (LitInt |a#0@@6|) (LitInt |b#0@@6|)) (nat_from_bv64 (bvshl ((_ int2bv 64) (LitInt |a#0@@6|)) ((_ int2bv 64) |b#0@@6|))))) :qid |MutableMapModelidfy.39:29| :weight 3 :skolemid |1203| :pattern ( (MutableMapModel.__default.lshift ($LS $ly@@4) (LitInt |a#0@@6|) (LitInt |b#0@@6|))) ))))
(assert (forall (($ly@@5 T@U) (|a#0@@7| Int) (|b#0@@7| Int) ) (!  (=> (= (type $ly@@5) LayerTypeType) (= (MutableMapModel.__default.rshift ($LS $ly@@5) |a#0@@7| |b#0@@7|) (MutableMapModel.__default.rshift $ly@@5 |a#0@@7| |b#0@@7|))) :qid |MutableMapModelidfy.45:29| :skolemid |1204| :pattern ( (MutableMapModel.__default.rshift ($LS $ly@@5) |a#0@@7| |b#0@@7|)) )))
(assert (forall (($ly@@6 T@U) (|a#0@@8| Int) (|b#0@@8| Int) ) (!  (=> (= (type $ly@@6) LayerTypeType) (= (MutableMapModel.__default.rshift $ly@@6 |a#0@@8| |b#0@@8|) (MutableMapModel.__default.rshift $LZ |a#0@@8| |b#0@@8|))) :qid |MutableMapModelidfy.45:29| :skolemid |1205| :pattern ( (MutableMapModel.__default.rshift (AsFuelBottom $ly@@6) |a#0@@8| |b#0@@8|)) )))
(assert  (=> (<= 13 $FunctionContextHeight) (forall (($ly@@7 T@U) (|a#0@@9| Int) (|b#0@@9| Int) ) (!  (=> (and (= (type $ly@@7) LayerTypeType) (or (|MutableMapModel.__default.rshift#canCall| |a#0@@9| |b#0@@9|) (and (not (= 13 $FunctionContextHeight)) (and (and (and (<= (LitInt 0) |a#0@@9|) (< |a#0@@9| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@9|) (< |b#0@@9| 4294967296))) (and (<= (LitInt 0) |b#0@@9|) (< |b#0@@9| 64)))))) (and (<= (LitInt 0) (MutableMapModel.__default.rshift $ly@@7 |a#0@@9| |b#0@@9|)) (< (MutableMapModel.__default.rshift $ly@@7 |a#0@@9| |b#0@@9|) 18446744073709551616))) :qid |MutableMapModelidfy.45:29| :skolemid |1206| :pattern ( (MutableMapModel.__default.rshift $ly@@7 |a#0@@9| |b#0@@9|)) ))))
(assert (forall (($ly@@8 T@U) (|a#0@@10| Int) (|b#0@@10| Int) ) (!  (=> (= (type $ly@@8) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@10|) (< |a#0@@10| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@10|) (< |b#0@@10| 4294967296))) (= (|MutableMapModel.__default.rshift#requires| $ly@@8 |a#0@@10| |b#0@@10|)  (and (<= (LitInt 0) |b#0@@10|) (< |b#0@@10| 64))))) :qid |MutableMapModelidfy.45:29| :skolemid |1207| :pattern ( (|MutableMapModel.__default.rshift#requires| $ly@@8 |a#0@@10| |b#0@@10|)) )))
(assert  (=> (<= 13 $FunctionContextHeight) (forall (($ly@@9 T@U) (|a#0@@11| Int) (|b#0@@11| Int) ) (!  (=> (and (= (type $ly@@9) LayerTypeType) (or (|MutableMapModel.__default.rshift#canCall| |a#0@@11| |b#0@@11|) (and (not (= 13 $FunctionContextHeight)) (and (and (and (<= (LitInt 0) |a#0@@11|) (< |a#0@@11| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@11|) (< |b#0@@11| 4294967296))) (and (<= (LitInt 0) |b#0@@11|) (< |b#0@@11| 64)))))) (= (MutableMapModel.__default.rshift ($LS $ly@@9) |a#0@@11| |b#0@@11|) (nat_from_bv64 (bvlshr ((_ int2bv 64) |a#0@@11|) ((_ int2bv 64) |b#0@@11|))))) :qid |MutableMapModelidfy.45:29| :skolemid |1208| :pattern ( (MutableMapModel.__default.rshift ($LS $ly@@9) |a#0@@11| |b#0@@11|)) ))))
(assert  (=> (<= 13 $FunctionContextHeight) (forall (($ly@@10 T@U) (|a#0@@12| Int) (|b#0@@12| Int) ) (!  (=> (and (= (type $ly@@10) LayerTypeType) (or (|MutableMapModel.__default.rshift#canCall| (LitInt |a#0@@12|) (LitInt |b#0@@12|)) (and (not (= 13 $FunctionContextHeight)) (and (and (and (<= (LitInt 0) |a#0@@12|) (< |a#0@@12| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@12|) (< |b#0@@12| 4294967296))) (and (<= (LitInt 0) (LitInt |b#0@@12|)) (< |b#0@@12| 64)))))) (= (MutableMapModel.__default.rshift ($LS $ly@@10) (LitInt |a#0@@12|) (LitInt |b#0@@12|)) (nat_from_bv64 (bvlshr ((_ int2bv 64) (LitInt |a#0@@12|)) ((_ int2bv 64) |b#0@@12|))))) :qid |MutableMapModelidfy.45:29| :weight 3 :skolemid |1209| :pattern ( (MutableMapModel.__default.rshift ($LS $ly@@10) (LitInt |a#0@@12|) (LitInt |b#0@@12|))) ))))
(assert (forall (($ly@@11 T@U) (|a#0@@13| Int) ) (!  (=> (= (type $ly@@11) LayerTypeType) (= (MutableMapModel.__default.bitnot ($LS $ly@@11) |a#0@@13|) (MutableMapModel.__default.bitnot $ly@@11 |a#0@@13|))) :qid |MutableMapModelidfy.51:29| :skolemid |1210| :pattern ( (MutableMapModel.__default.bitnot ($LS $ly@@11) |a#0@@13|)) )))
(assert (forall (($ly@@12 T@U) (|a#0@@14| Int) ) (!  (=> (= (type $ly@@12) LayerTypeType) (= (MutableMapModel.__default.bitnot $ly@@12 |a#0@@14|) (MutableMapModel.__default.bitnot $LZ |a#0@@14|))) :qid |MutableMapModelidfy.51:29| :skolemid |1211| :pattern ( (MutableMapModel.__default.bitnot (AsFuelBottom $ly@@12) |a#0@@14|)) )))
(assert  (=> (<= 14 $FunctionContextHeight) (forall (($ly@@13 T@U) (|a#0@@15| Int) ) (!  (=> (and (= (type $ly@@13) LayerTypeType) (or (|MutableMapModel.__default.bitnot#canCall| |a#0@@15|) (and (not (= 14 $FunctionContextHeight)) (and (<= (LitInt 0) |a#0@@15|) (< |a#0@@15| 18446744073709551616))))) (and (<= (LitInt 0) (MutableMapModel.__default.bitnot $ly@@13 |a#0@@15|)) (< (MutableMapModel.__default.bitnot $ly@@13 |a#0@@15|) 18446744073709551616))) :qid |MutableMapModelidfy.51:29| :skolemid |1212| :pattern ( (MutableMapModel.__default.bitnot $ly@@13 |a#0@@15|)) ))))
(assert (forall (($ly@@14 T@U) (|a#0@@16| Int) ) (!  (=> (= (type $ly@@14) LayerTypeType) (=> (and (<= (LitInt 0) |a#0@@16|) (< |a#0@@16| 18446744073709551616)) (= (|MutableMapModel.__default.bitnot#requires| $ly@@14 |a#0@@16|) true))) :qid |MutableMapModelidfy.51:29| :skolemid |1213| :pattern ( (|MutableMapModel.__default.bitnot#requires| $ly@@14 |a#0@@16|)) )))
(assert  (=> (<= 14 $FunctionContextHeight) (forall (($ly@@15 T@U) (|a#0@@17| Int) ) (!  (=> (and (= (type $ly@@15) LayerTypeType) (or (|MutableMapModel.__default.bitnot#canCall| |a#0@@17|) (and (not (= 14 $FunctionContextHeight)) (and (<= (LitInt 0) |a#0@@17|) (< |a#0@@17| 18446744073709551616))))) (= (MutableMapModel.__default.bitnot ($LS $ly@@15) |a#0@@17|) (nat_from_bv64 (bvxor ((_ int2bv 64) |a#0@@17|) #xffffffffffffffff)))) :qid |MutableMapModelidfy.51:29| :skolemid |1214| :pattern ( (MutableMapModel.__default.bitnot ($LS $ly@@15) |a#0@@17|)) ))))
(assert  (=> (<= 14 $FunctionContextHeight) (forall (($ly@@16 T@U) (|a#0@@18| Int) ) (!  (=> (and (= (type $ly@@16) LayerTypeType) (or (|MutableMapModel.__default.bitnot#canCall| (LitInt |a#0@@18|)) (and (not (= 14 $FunctionContextHeight)) (and (<= (LitInt 0) |a#0@@18|) (< |a#0@@18| 18446744073709551616))))) (= (MutableMapModel.__default.bitnot ($LS $ly@@16) (LitInt |a#0@@18|)) (nat_from_bv64 (bvxor ((_ int2bv 64) (LitInt |a#0@@18|)) #xffffffffffffffff)))) :qid |MutableMapModelidfy.51:29| :weight 3 :skolemid |1215| :pattern ( (MutableMapModel.__default.bitnot ($LS $ly@@16) (LitInt |a#0@@18|))) ))))
(assert (forall (($ly@@17 T@U) (|a#0@@19| Int) (|b#0@@13| Int) ) (!  (=> (= (type $ly@@17) LayerTypeType) (= (MutableMapModel.__default.bitxor ($LS $ly@@17) |a#0@@19| |b#0@@13|) (MutableMapModel.__default.bitxor $ly@@17 |a#0@@19| |b#0@@13|))) :qid |MutableMapModelidfy.56:29| :skolemid |1216| :pattern ( (MutableMapModel.__default.bitxor ($LS $ly@@17) |a#0@@19| |b#0@@13|)) )))
(assert (forall (($ly@@18 T@U) (|a#0@@20| Int) (|b#0@@14| Int) ) (!  (=> (= (type $ly@@18) LayerTypeType) (= (MutableMapModel.__default.bitxor $ly@@18 |a#0@@20| |b#0@@14|) (MutableMapModel.__default.bitxor $LZ |a#0@@20| |b#0@@14|))) :qid |MutableMapModelidfy.56:29| :skolemid |1217| :pattern ( (MutableMapModel.__default.bitxor (AsFuelBottom $ly@@18) |a#0@@20| |b#0@@14|)) )))
(assert  (=> (<= 15 $FunctionContextHeight) (forall (($ly@@19 T@U) (|a#0@@21| Int) (|b#0@@15| Int) ) (!  (=> (and (= (type $ly@@19) LayerTypeType) (or (|MutableMapModel.__default.bitxor#canCall| |a#0@@21| |b#0@@15|) (and (not (= 15 $FunctionContextHeight)) (and (and (<= (LitInt 0) |a#0@@21|) (< |a#0@@21| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@15|) (< |b#0@@15| 18446744073709551616)))))) (and (<= (LitInt 0) (MutableMapModel.__default.bitxor $ly@@19 |a#0@@21| |b#0@@15|)) (< (MutableMapModel.__default.bitxor $ly@@19 |a#0@@21| |b#0@@15|) 18446744073709551616))) :qid |MutableMapModelidfy.56:29| :skolemid |1218| :pattern ( (MutableMapModel.__default.bitxor $ly@@19 |a#0@@21| |b#0@@15|)) ))))
(assert (forall (($ly@@20 T@U) (|a#0@@22| Int) (|b#0@@16| Int) ) (!  (=> (= (type $ly@@20) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@22|) (< |a#0@@22| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@16|) (< |b#0@@16| 18446744073709551616))) (= (|MutableMapModel.__default.bitxor#requires| $ly@@20 |a#0@@22| |b#0@@16|) true))) :qid |MutableMapModelidfy.56:29| :skolemid |1219| :pattern ( (|MutableMapModel.__default.bitxor#requires| $ly@@20 |a#0@@22| |b#0@@16|)) )))
(assert  (=> (<= 15 $FunctionContextHeight) (forall (($ly@@21 T@U) (|a#0@@23| Int) (|b#0@@17| Int) ) (!  (=> (and (= (type $ly@@21) LayerTypeType) (or (|MutableMapModel.__default.bitxor#canCall| |a#0@@23| |b#0@@17|) (and (not (= 15 $FunctionContextHeight)) (and (and (<= (LitInt 0) |a#0@@23|) (< |a#0@@23| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@17|) (< |b#0@@17| 18446744073709551616)))))) (= (MutableMapModel.__default.bitxor ($LS $ly@@21) |a#0@@23| |b#0@@17|) (nat_from_bv64 (bvxor ((_ int2bv 64) |a#0@@23|) ((_ int2bv 64) |b#0@@17|))))) :qid |MutableMapModelidfy.56:29| :skolemid |1220| :pattern ( (MutableMapModel.__default.bitxor ($LS $ly@@21) |a#0@@23| |b#0@@17|)) ))))
(assert  (=> (<= 15 $FunctionContextHeight) (forall (($ly@@22 T@U) (|a#0@@24| Int) (|b#0@@18| Int) ) (!  (=> (and (= (type $ly@@22) LayerTypeType) (or (|MutableMapModel.__default.bitxor#canCall| (LitInt |a#0@@24|) (LitInt |b#0@@18|)) (and (not (= 15 $FunctionContextHeight)) (and (and (<= (LitInt 0) |a#0@@24|) (< |a#0@@24| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@18|) (< |b#0@@18| 18446744073709551616)))))) (= (MutableMapModel.__default.bitxor ($LS $ly@@22) (LitInt |a#0@@24|) (LitInt |b#0@@18|)) (nat_from_bv64 (bvxor ((_ int2bv 64) (LitInt |a#0@@24|)) ((_ int2bv 64) (LitInt |b#0@@18|)))))) :qid |MutableMapModelidfy.56:29| :weight 3 :skolemid |1221| :pattern ( (MutableMapModel.__default.bitxor ($LS $ly@@22) (LitInt |a#0@@24|) (LitInt |b#0@@18|))) ))))
(assert (forall (($ly@@23 T@U) (|k#0| Int) ) (!  (=> (= (type $ly@@23) LayerTypeType) (= (MutableMapModel.__default.hash64 ($LS $ly@@23) |k#0|) (MutableMapModel.__default.hash64 $ly@@23 |k#0|))) :qid |MutableMapModelidfy.61:29| :skolemid |1222| :pattern ( (MutableMapModel.__default.hash64 ($LS $ly@@23) |k#0|)) )))
(assert (forall (($ly@@24 T@U) (|k#0@@0| Int) ) (!  (=> (= (type $ly@@24) LayerTypeType) (= (MutableMapModel.__default.hash64 $ly@@24 |k#0@@0|) (MutableMapModel.__default.hash64 $LZ |k#0@@0|))) :qid |MutableMapModelidfy.61:29| :skolemid |1223| :pattern ( (MutableMapModel.__default.hash64 (AsFuelBottom $ly@@24) |k#0@@0|)) )))
(assert  (=> (<= 16 $FunctionContextHeight) (forall (($ly@@25 T@U) (|k#0@@1| Int) ) (!  (=> (and (= (type $ly@@25) LayerTypeType) (or (|MutableMapModel.__default.hash64#canCall| |k#0@@1|) (and (not (= 16 $FunctionContextHeight)) (and (<= (LitInt 0) |k#0@@1|) (< |k#0@@1| 18446744073709551616))))) (and (<= (LitInt 0) (MutableMapModel.__default.hash64 $ly@@25 |k#0@@1|)) (< (MutableMapModel.__default.hash64 $ly@@25 |k#0@@1|) 18446744073709551616))) :qid |MutableMapModelidfy.61:29| :skolemid |1224| :pattern ( (MutableMapModel.__default.hash64 $ly@@25 |k#0@@1|)) ))))
(assert (forall (($ly@@26 T@U) (|k#0@@2| Int) ) (!  (=> (= (type $ly@@26) LayerTypeType) (=> (and (<= (LitInt 0) |k#0@@2|) (< |k#0@@2| 18446744073709551616)) (= (|MutableMapModel.__default.hash64#requires| $ly@@26 |k#0@@2|) true))) :qid |MutableMapModelidfy.61:29| :skolemid |1225| :pattern ( (|MutableMapModel.__default.hash64#requires| $ly@@26 |k#0@@2|)) )))
(assert  (and (and (and (= (type StartFuel_MutableMapModel._default.bitnot) LayerTypeType) (= (type StartFuel_MutableMapModel._default.lshift) LayerTypeType)) (= (type StartFuel_MutableMapModel._default.rshift) LayerTypeType)) (= (type StartFuel_MutableMapModel._default.bitxor) LayerTypeType)))
(assert  (=> (<= 16 $FunctionContextHeight) (forall (($ly@@27 T@U) (|k#0@@3| Int) ) (!  (=> (and (= (type $ly@@27) LayerTypeType) (or (|MutableMapModel.__default.hash64#canCall| |k#0@@3|) (and (not (= 16 $FunctionContextHeight)) (and (<= (LitInt 0) |k#0@@3|) (< |k#0@@3| 18446744073709551616))))) (and (and (and (and (|MutableMapModel.__default.bitnot#canCall| |k#0@@3|) (|MutableMapModel.__default.lshift#canCall| |k#0@@3| (LitInt 21))) (|NativeArithmetic.__default.u64add#canCall| (MutableMapModel.__default.bitnot StartFuel_MutableMapModel._default.bitnot |k#0@@3|) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k#0@@3| (LitInt 21)))) (let ((|k0#0| (NativeArithmetic.__default.u64add (MutableMapModel.__default.bitnot StartFuel_MutableMapModel._default.bitnot |k#0@@3|) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k#0@@3| (LitInt 21))))) (and (and (|MutableMapModel.__default.rshift#canCall| |k0#0| (LitInt 24)) (|MutableMapModel.__default.bitxor#canCall| |k0#0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k0#0| (LitInt 24)))) (let ((|k1#0| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k0#0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k0#0| (LitInt 24))))) (and (and (and (and (|MutableMapModel.__default.lshift#canCall| |k1#0| (LitInt 3)) (|NativeArithmetic.__default.u64add#canCall| |k1#0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#0| (LitInt 3)))) (|MutableMapModel.__default.lshift#canCall| |k1#0| (LitInt 8))) (|NativeArithmetic.__default.u64add#canCall| (NativeArithmetic.__default.u64add |k1#0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#0| (LitInt 3))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#0| (LitInt 8)))) (let ((|k2#0| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k1#0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#0| (LitInt 3))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#0| (LitInt 8))))) (and (and (|MutableMapModel.__default.rshift#canCall| |k2#0| (LitInt 14)) (|MutableMapModel.__default.bitxor#canCall| |k2#0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k2#0| (LitInt 14)))) (let ((|k3#0| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k2#0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k2#0| (LitInt 14))))) (and (and (and (and (|MutableMapModel.__default.lshift#canCall| |k3#0| (LitInt 2)) (|NativeArithmetic.__default.u64add#canCall| |k3#0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#0| (LitInt 2)))) (|MutableMapModel.__default.lshift#canCall| |k3#0| (LitInt 4))) (|NativeArithmetic.__default.u64add#canCall| (NativeArithmetic.__default.u64add |k3#0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#0| (LitInt 2))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#0| (LitInt 4)))) (let ((|k4#0| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k3#0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#0| (LitInt 2))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#0| (LitInt 4))))) (and (and (|MutableMapModel.__default.rshift#canCall| |k4#0| (LitInt 28)) (|MutableMapModel.__default.bitxor#canCall| |k4#0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k4#0| (LitInt 28)))) (let ((|k5#0| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k4#0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k4#0| (LitInt 28))))) (and (|MutableMapModel.__default.lshift#canCall| |k5#0| (LitInt 31)) (|NativeArithmetic.__default.u64add#canCall| |k5#0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k5#0| (LitInt 31)))))))))))))))) (= (MutableMapModel.__default.hash64 ($LS $ly@@27) |k#0@@3|) (let ((|k0#0@@0| (NativeArithmetic.__default.u64add (MutableMapModel.__default.bitnot StartFuel_MutableMapModel._default.bitnot |k#0@@3|) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k#0@@3| (LitInt 21))))) (let ((|k1#0@@0| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k0#0@@0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k0#0@@0| (LitInt 24))))) (let ((|k2#0@@0| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k1#0@@0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#0@@0| (LitInt 3))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#0@@0| (LitInt 8))))) (let ((|k3#0@@0| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k2#0@@0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k2#0@@0| (LitInt 14))))) (let ((|k4#0@@0| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k3#0@@0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#0@@0| (LitInt 2))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#0@@0| (LitInt 4))))) (let ((|k5#0@@0| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k4#0@@0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k4#0@@0| (LitInt 28))))) (let ((|k6#0| (NativeArithmetic.__default.u64add |k5#0@@0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k5#0@@0| (LitInt 31))))) |k6#0|)))))))))) :qid |MutableMapModelidfy.61:29| :skolemid |1226| :pattern ( (MutableMapModel.__default.hash64 ($LS $ly@@27) |k#0@@3|)) ))))
(assert  (=> (<= 16 $FunctionContextHeight) (forall (($ly@@28 T@U) (|k#0@@4| Int) ) (!  (=> (and (= (type $ly@@28) LayerTypeType) (or (|MutableMapModel.__default.hash64#canCall| (LitInt |k#0@@4|)) (and (not (= 16 $FunctionContextHeight)) (and (<= (LitInt 0) |k#0@@4|) (< |k#0@@4| 18446744073709551616))))) (and (and (and (and (|MutableMapModel.__default.bitnot#canCall| (LitInt |k#0@@4|)) (|MutableMapModel.__default.lshift#canCall| (LitInt |k#0@@4|) (LitInt 21))) (|NativeArithmetic.__default.u64add#canCall| (MutableMapModel.__default.bitnot StartFuel_MutableMapModel._default.bitnot (LitInt |k#0@@4|)) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift (LitInt |k#0@@4|) (LitInt 21)))) (let ((|k0#1| (NativeArithmetic.__default.u64add (MutableMapModel.__default.bitnot StartFuel_MutableMapModel._default.bitnot (LitInt |k#0@@4|)) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift (LitInt |k#0@@4|) (LitInt 21))))) (and (and (|MutableMapModel.__default.rshift#canCall| |k0#1| (LitInt 24)) (|MutableMapModel.__default.bitxor#canCall| |k0#1| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k0#1| (LitInt 24)))) (let ((|k1#1| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k0#1| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k0#1| (LitInt 24))))) (and (and (and (and (|MutableMapModel.__default.lshift#canCall| |k1#1| (LitInt 3)) (|NativeArithmetic.__default.u64add#canCall| |k1#1| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#1| (LitInt 3)))) (|MutableMapModel.__default.lshift#canCall| |k1#1| (LitInt 8))) (|NativeArithmetic.__default.u64add#canCall| (NativeArithmetic.__default.u64add |k1#1| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#1| (LitInt 3))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#1| (LitInt 8)))) (let ((|k2#1| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k1#1| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#1| (LitInt 3))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#1| (LitInt 8))))) (and (and (|MutableMapModel.__default.rshift#canCall| |k2#1| (LitInt 14)) (|MutableMapModel.__default.bitxor#canCall| |k2#1| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k2#1| (LitInt 14)))) (let ((|k3#1| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k2#1| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k2#1| (LitInt 14))))) (and (and (and (and (|MutableMapModel.__default.lshift#canCall| |k3#1| (LitInt 2)) (|NativeArithmetic.__default.u64add#canCall| |k3#1| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#1| (LitInt 2)))) (|MutableMapModel.__default.lshift#canCall| |k3#1| (LitInt 4))) (|NativeArithmetic.__default.u64add#canCall| (NativeArithmetic.__default.u64add |k3#1| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#1| (LitInt 2))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#1| (LitInt 4)))) (let ((|k4#1| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k3#1| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#1| (LitInt 2))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#1| (LitInt 4))))) (and (and (|MutableMapModel.__default.rshift#canCall| |k4#1| (LitInt 28)) (|MutableMapModel.__default.bitxor#canCall| |k4#1| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k4#1| (LitInt 28)))) (let ((|k5#1| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k4#1| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k4#1| (LitInt 28))))) (and (|MutableMapModel.__default.lshift#canCall| |k5#1| (LitInt 31)) (|NativeArithmetic.__default.u64add#canCall| |k5#1| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k5#1| (LitInt 31)))))))))))))))) (= (MutableMapModel.__default.hash64 ($LS $ly@@28) (LitInt |k#0@@4|)) (let ((|k0#1@@0| (NativeArithmetic.__default.u64add (MutableMapModel.__default.bitnot StartFuel_MutableMapModel._default.bitnot (LitInt |k#0@@4|)) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift (LitInt |k#0@@4|) (LitInt 21))))) (let ((|k1#1@@0| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k0#1@@0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k0#1@@0| (LitInt 24))))) (let ((|k2#1@@0| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k1#1@@0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#1@@0| (LitInt 3))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k1#1@@0| (LitInt 8))))) (let ((|k3#1@@0| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k2#1@@0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k2#1@@0| (LitInt 14))))) (let ((|k4#1@@0| (NativeArithmetic.__default.u64add (NativeArithmetic.__default.u64add |k3#1@@0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#1@@0| (LitInt 2))) (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k3#1@@0| (LitInt 4))))) (let ((|k5#1@@0| (MutableMapModel.__default.bitxor StartFuel_MutableMapModel._default.bitxor |k4#1@@0| (MutableMapModel.__default.rshift StartFuel_MutableMapModel._default.rshift |k4#1@@0| (LitInt 28))))) (let ((|k6#1| (NativeArithmetic.__default.u64add |k5#1@@0| (MutableMapModel.__default.lshift StartFuel_MutableMapModel._default.lshift |k5#1@@0| (LitInt 31))))) |k6#1|)))))))))) :qid |MutableMapModelidfy.61:29| :weight 3 :skolemid |1227| :pattern ( (MutableMapModel.__default.hash64 ($LS $ly@@28) (LitInt |k#0@@4|))) ))))
(assert (= (type Tclass.NativeTypes.uint32) TyType))
(assert (= (Tag Tclass.NativeTypes.uint32) Tagclass.NativeTypes.uint32))
(assert (= (TagFamily Tclass.NativeTypes.uint32) tytagFamily$uint32))
(assert (forall ((bx@@83 T@U) ) (!  (=> (and (= (type bx@@83) BoxType) ($IsBox bx@@83 Tclass.NativeTypes.uint32)) (and (= ($Box ($Unbox intType bx@@83)) bx@@83) ($Is ($Unbox intType bx@@83) Tclass.NativeTypes.uint32))) :qid |unknown.0:0| :skolemid |1229| :pattern ( ($IsBox bx@@83 Tclass.NativeTypes.uint32)) )))
(assert  (=> (<= 17 $FunctionContextHeight) (forall ((|elementsLength#0| Int) (|slot#0| T@U) ) (!  (=> (and (= (type |slot#0|) DatatypeTypeType) (or (|MutableMapModel.__default.ValidSlot#canCall| |elementsLength#0| |slot#0|) (and (not (= 17 $FunctionContextHeight)) (and (<= (LitInt 0) |elementsLength#0|) ($Is |slot#0| Tclass.MutableMapModel.Slot))))) true) :qid |MutableMapModelidfy.78:23| :skolemid |1248| :pattern ( (MutableMapModel.__default.ValidSlot |elementsLength#0| |slot#0|)) ))))
(assert (forall ((|elementsLength#0@@0| Int) (|slot#0@@0| T@U) ) (!  (=> (= (type |slot#0@@0|) DatatypeTypeType) (=> (and (<= (LitInt 0) |elementsLength#0@@0|) ($Is |slot#0@@0| Tclass.MutableMapModel.Slot)) (= (|MutableMapModel.__default.ValidSlot#requires| |elementsLength#0@@0| |slot#0@@0|) true))) :qid |MutableMapModelidfy.78:23| :skolemid |1249| :pattern ( (|MutableMapModel.__default.ValidSlot#requires| |elementsLength#0@@0| |slot#0@@0|)) )))
(assert  (=> (<= 17 $FunctionContextHeight) (forall ((|elementsLength#0@@1| Int) (|slot#0@@1| T@U) ) (!  (=> (and (= (type |slot#0@@1|) DatatypeTypeType) (or (|MutableMapModel.__default.ValidSlot#canCall| |elementsLength#0@@1| |slot#0@@1|) (and (not (= 17 $FunctionContextHeight)) (and (<= (LitInt 0) |elementsLength#0@@1|) ($Is |slot#0@@1| Tclass.MutableMapModel.Slot))))) (and (MutableMapModel.Slot.Slot_q |slot#0@@1|) (= (MutableMapModel.__default.ValidSlot |elementsLength#0@@1| |slot#0@@1|) (< (MutableMapModel.Slot.slot |slot#0@@1|) |elementsLength#0@@1|)))) :qid |MutableMapModelidfy.78:23| :skolemid |1250| :pattern ( (MutableMapModel.__default.ValidSlot |elementsLength#0@@1| |slot#0@@1|)) ))))
(assert  (=> (<= 17 $FunctionContextHeight) (forall ((|elementsLength#0@@2| Int) (|slot#0@@2| T@U) ) (!  (=> (and (= (type |slot#0@@2|) DatatypeTypeType) (or (|MutableMapModel.__default.ValidSlot#canCall| (LitInt |elementsLength#0@@2|) (Lit |slot#0@@2|)) (and (not (= 17 $FunctionContextHeight)) (and (<= (LitInt 0) |elementsLength#0@@2|) ($Is |slot#0@@2| Tclass.MutableMapModel.Slot))))) (and (MutableMapModel.Slot.Slot_q (Lit |slot#0@@2|)) (= (MutableMapModel.__default.ValidSlot (LitInt |elementsLength#0@@2|) (Lit |slot#0@@2|)) (U_2_bool (Lit (bool_2_U (< (MutableMapModel.Slot.slot (Lit |slot#0@@2|)) |elementsLength#0@@2|))))))) :qid |MutableMapModelidfy.78:23| :weight 3 :skolemid |1251| :pattern ( (MutableMapModel.__default.ValidSlot (LitInt |elementsLength#0@@2|) (Lit |slot#0@@2|))) ))))
(assert  (=> (<= 18 $FunctionContextHeight) (forall ((MutableMapModel._default.ValidElements$V T@U) (|elements#0| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.ValidElements$V) TyType) (= (type |elements#0|) (SeqType BoxType))) (or (|MutableMapModel.__default.ValidElements#canCall| MutableMapModel._default.ValidElements$V |elements#0|) (and (not (= 18 $FunctionContextHeight)) ($Is |elements#0| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.ValidElements$V)))))) true) :qid |unknown.0:0| :skolemid |1252| :pattern ( (MutableMapModel.__default.ValidElements MutableMapModel._default.ValidElements$V |elements#0|)) ))))
(assert (forall ((MutableMapModel._default.ValidElements$V@@0 T@U) (|elements#0@@0| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.ValidElements$V@@0) TyType) (= (type |elements#0@@0|) (SeqType BoxType))) ($Is |elements#0@@0| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.ValidElements$V@@0)))) (= (|MutableMapModel.__default.ValidElements#requires| MutableMapModel._default.ValidElements$V@@0 |elements#0@@0|) true)) :qid |unknown.0:0| :skolemid |1253| :pattern ( (|MutableMapModel.__default.ValidElements#requires| MutableMapModel._default.ValidElements$V@@0 |elements#0@@0|)) )))
(assert  (=> (<= 18 $FunctionContextHeight) (forall ((MutableMapModel._default.ValidElements$V@@1 T@U) (|elements#0@@1| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.ValidElements$V@@1) TyType) (= (type |elements#0@@1|) (SeqType BoxType))) (or (|MutableMapModel.__default.ValidElements#canCall| MutableMapModel._default.ValidElements$V@@1 |elements#0@@1|) (and (not (= 18 $FunctionContextHeight)) ($Is |elements#0@@1| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.ValidElements$V@@1)))))) (= (MutableMapModel.__default.ValidElements MutableMapModel._default.ValidElements$V@@1 |elements#0@@1|)  (and true (and (< 0 (|Seq#Length| |elements#0@@1|)) (< (|Seq#Length| |elements#0@@1|) 18446744073709551616))))) :qid |unknown.0:0| :skolemid |1254| :pattern ( (MutableMapModel.__default.ValidElements MutableMapModel._default.ValidElements$V@@1 |elements#0@@1|)) ))))
(assert  (=> (<= 18 $FunctionContextHeight) (forall ((MutableMapModel._default.ValidElements$V@@2 T@U) (|elements#0@@2| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.ValidElements$V@@2) TyType) (= (type |elements#0@@2|) (SeqType BoxType))) (or (|MutableMapModel.__default.ValidElements#canCall| MutableMapModel._default.ValidElements$V@@2 (Lit |elements#0@@2|)) (and (not (= 18 $FunctionContextHeight)) ($Is |elements#0@@2| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.ValidElements$V@@2)))))) (= (MutableMapModel.__default.ValidElements MutableMapModel._default.ValidElements$V@@2 (Lit |elements#0@@2|))  (and true (and (< 0 (|Seq#Length| (Lit |elements#0@@2|))) (< (|Seq#Length| (Lit |elements#0@@2|)) 18446744073709551616))))) :qid |unknown.0:0| :weight 3 :skolemid |1255| :pattern ( (MutableMapModel.__default.ValidElements MutableMapModel._default.ValidElements$V@@2 (Lit |elements#0@@2|))) ))))
(assert (forall ((arg0@@263 Int) (arg1@@116 Int) ) (! (= (type (MutableMapModel.__default.SlotForKey arg0@@263 arg1@@116)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.SlotForKey| :pattern ( (MutableMapModel.__default.SlotForKey arg0@@263 arg1@@116)) )))
(assert  (=> (<= 19 $FunctionContextHeight) (forall ((|elementsLength#0@@3| Int) (|key#0| Int) ) (!  (=> (or (|MutableMapModel.__default.SlotForKey#canCall| |elementsLength#0@@3| |key#0|) (and (not (= 19 $FunctionContextHeight)) (and (and (<= (LitInt 0) |elementsLength#0@@3|) (and (<= (LitInt 0) |key#0|) (< |key#0| 18446744073709551616))) (< 0 |elementsLength#0@@3|)))) (and (MutableMapModel.__default.ValidSlot |elementsLength#0@@3| (MutableMapModel.__default.SlotForKey |elementsLength#0@@3| |key#0|)) ($Is (MutableMapModel.__default.SlotForKey |elementsLength#0@@3| |key#0|) Tclass.MutableMapModel.Slot))) :qid |MutableMapModelidfy.93:23| :skolemid |1256| :pattern ( (MutableMapModel.__default.SlotForKey |elementsLength#0@@3| |key#0|)) ))))
(assert (forall ((|elementsLength#0@@4| Int) (|key#0@@0| Int) ) (!  (=> (and (<= (LitInt 0) |elementsLength#0@@4|) (and (<= (LitInt 0) |key#0@@0|) (< |key#0@@0| 18446744073709551616))) (= (|MutableMapModel.__default.SlotForKey#requires| |elementsLength#0@@4| |key#0@@0|) (< 0 |elementsLength#0@@4|))) :qid |MutableMapModelidfy.93:23| :skolemid |1257| :pattern ( (|MutableMapModel.__default.SlotForKey#requires| |elementsLength#0@@4| |key#0@@0|)) )))
(assert (= (type StartFuel_MutableMapModel._default.hash64) LayerTypeType))
(assert  (=> (<= 19 $FunctionContextHeight) (forall ((|elementsLength#0@@5| Int) (|key#0@@1| Int) ) (!  (=> (or (|MutableMapModel.__default.SlotForKey#canCall| |elementsLength#0@@5| |key#0@@1|) (and (not (= 19 $FunctionContextHeight)) (and (and (<= (LitInt 0) |elementsLength#0@@5|) (and (<= (LitInt 0) |key#0@@1|) (< |key#0@@1| 18446744073709551616))) (< 0 |elementsLength#0@@5|)))) (and (|MutableMapModel.__default.hash64#canCall| |key#0@@1|) (= (MutableMapModel.__default.SlotForKey |elementsLength#0@@5| |key#0@@1|) (let ((|h#0| (MutableMapModel.__default.hash64 StartFuel_MutableMapModel._default.hash64 |key#0@@1|))) (|#MutableMapModel.Slot.Slot| (Mod |h#0| |elementsLength#0@@5|)))))) :qid |MutableMapModelidfy.93:23| :skolemid |1258| :pattern ( (MutableMapModel.__default.SlotForKey |elementsLength#0@@5| |key#0@@1|)) ))))
(assert  (=> (<= 19 $FunctionContextHeight) (forall ((|elementsLength#0@@6| Int) (|key#0@@2| Int) ) (!  (=> (or (|MutableMapModel.__default.SlotForKey#canCall| (LitInt |elementsLength#0@@6|) (LitInt |key#0@@2|)) (and (not (= 19 $FunctionContextHeight)) (and (and (<= (LitInt 0) |elementsLength#0@@6|) (and (<= (LitInt 0) |key#0@@2|) (< |key#0@@2| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (< 0 |elementsLength#0@@6|))))))) (and (|MutableMapModel.__default.hash64#canCall| (LitInt |key#0@@2|)) (= (MutableMapModel.__default.SlotForKey (LitInt |elementsLength#0@@6|) (LitInt |key#0@@2|)) (let ((|h#1| (MutableMapModel.__default.hash64 StartFuel_MutableMapModel._default.hash64 (LitInt |key#0@@2|)))) (|#MutableMapModel.Slot.Slot| (Mod |h#1| (LitInt |elementsLength#0@@6|))))))) :qid |MutableMapModelidfy.93:23| :weight 3 :skolemid |1259| :pattern ( (MutableMapModel.__default.SlotForKey (LitInt |elementsLength#0@@6|) (LitInt |key#0@@2|))) ))))
(assert  (=> (<= 20 $FunctionContextHeight) (forall ((MutableMapModel._default.Uint64SlotForKey$V T@U) (|self#0| T@U) (|key#0@@3| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Uint64SlotForKey$V) TyType) (= (type |self#0|) DatatypeTypeType)) (or (|MutableMapModel.__default.Uint64SlotForKey#canCall| MutableMapModel._default.Uint64SlotForKey$V |self#0| |key#0@@3|) (and (not (= 20 $FunctionContextHeight)) (and (and ($Is |self#0| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.Uint64SlotForKey$V)) (and (<= (LitInt 0) |key#0@@3|) (< |key#0@@3| 18446744073709551616))) (and (< 0 (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0|))) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0|)) 18446744073709551616)))))) (and (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0|)) (|#MutableMapModel.Slot.Slot| (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Uint64SlotForKey$V |self#0| |key#0@@3|))) (|MutableMapModel.Slot#Equal| (|#MutableMapModel.Slot.Slot| (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Uint64SlotForKey$V |self#0| |key#0@@3|)) (MutableMapModel.__default.SlotForKey (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0|)) |key#0@@3|))) (and (<= (LitInt 0) (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Uint64SlotForKey$V |self#0| |key#0@@3|)) (< (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Uint64SlotForKey$V |self#0| |key#0@@3|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1261| :pattern ( (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Uint64SlotForKey$V |self#0| |key#0@@3|)) ))))
(assert (forall ((MutableMapModel._default.Uint64SlotForKey$V@@0 T@U) (|self#0@@0| T@U) (|key#0@@4| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Uint64SlotForKey$V@@0) TyType) (= (type |self#0@@0|) DatatypeTypeType)) (and ($Is |self#0@@0| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.Uint64SlotForKey$V@@0)) (and (<= (LitInt 0) |key#0@@4|) (< |key#0@@4| 18446744073709551616)))) (= (|MutableMapModel.__default.Uint64SlotForKey#requires| MutableMapModel._default.Uint64SlotForKey$V@@0 |self#0@@0| |key#0@@4|)  (and (< 0 (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@0|))) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@0|)) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1262| :pattern ( (|MutableMapModel.__default.Uint64SlotForKey#requires| MutableMapModel._default.Uint64SlotForKey$V@@0 |self#0@@0| |key#0@@4|)) )))
(assert  (=> (<= 20 $FunctionContextHeight) (forall ((MutableMapModel._default.Uint64SlotForKey$V@@1 T@U) (|self#0@@1| T@U) (|key#0@@5| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Uint64SlotForKey$V@@1) TyType) (= (type |self#0@@1|) DatatypeTypeType)) (or (|MutableMapModel.__default.Uint64SlotForKey#canCall| MutableMapModel._default.Uint64SlotForKey$V@@1 |self#0@@1| |key#0@@5|) (and (not (= 20 $FunctionContextHeight)) (and (and ($Is |self#0@@1| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.Uint64SlotForKey$V@@1)) (and (<= (LitInt 0) |key#0@@5|) (< |key#0@@5| 18446744073709551616))) (and (< 0 (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@1|))) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@1|)) 18446744073709551616)))))) (and (and (|MutableMapModel.__default.hash64#canCall| |key#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@1|)) (= (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Uint64SlotForKey$V@@1 |self#0@@1| |key#0@@5|) (let ((|h#0@@0| (MutableMapModel.__default.hash64 StartFuel_MutableMapModel._default.hash64 |key#0@@5|))) (Mod |h#0@@0| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@1|))))))) :qid |unknown.0:0| :skolemid |1263| :pattern ( (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Uint64SlotForKey$V@@1 |self#0@@1| |key#0@@5|)) ))))
(assert  (=> (<= 20 $FunctionContextHeight) (forall ((MutableMapModel._default.Uint64SlotForKey$V@@2 T@U) (|self#0@@2| T@U) (|key#0@@6| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Uint64SlotForKey$V@@2) TyType) (= (type |self#0@@2|) DatatypeTypeType)) (or (|MutableMapModel.__default.Uint64SlotForKey#canCall| MutableMapModel._default.Uint64SlotForKey$V@@2 (Lit |self#0@@2|) (LitInt |key#0@@6|)) (and (not (= 20 $FunctionContextHeight)) (and (and ($Is |self#0@@2| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.Uint64SlotForKey$V@@2)) (and (<= (LitInt 0) |key#0@@6|) (< |key#0@@6| 18446744073709551616))) (and (< 0 (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@2|))))) (< (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@2|)))) 18446744073709551616)))))) (and (and (|MutableMapModel.__default.hash64#canCall| (LitInt |key#0@@6|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@2|))) (= (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Uint64SlotForKey$V@@2 (Lit |self#0@@2|) (LitInt |key#0@@6|)) (let ((|h#1@@0| (MutableMapModel.__default.hash64 StartFuel_MutableMapModel._default.hash64 (LitInt |key#0@@6|)))) (Mod |h#1@@0| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@2|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1264| :pattern ( (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Uint64SlotForKey$V@@2 (Lit |self#0@@2|) (LitInt |key#0@@6|))) ))))
(assert (forall ((arg0@@264 Int) (arg1@@117 T@U) ) (! (= (type (MutableMapModel.__default.SlotSuccessor arg0@@264 arg1@@117)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.SlotSuccessor| :pattern ( (MutableMapModel.__default.SlotSuccessor arg0@@264 arg1@@117)) )))
(assert  (=> (<= 21 $FunctionContextHeight) (forall ((|elementsLength#0@@7| Int) (|slot#0@@3| T@U) ) (!  (=> (and (= (type |slot#0@@3|) DatatypeTypeType) (or (|MutableMapModel.__default.SlotSuccessor#canCall| |elementsLength#0@@7| |slot#0@@3|) (and (not (= 21 $FunctionContextHeight)) (and (and (<= (LitInt 0) |elementsLength#0@@7|) ($Is |slot#0@@3| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot |elementsLength#0@@7| |slot#0@@3|))))) (and (MutableMapModel.__default.ValidSlot |elementsLength#0@@7| (MutableMapModel.__default.SlotSuccessor |elementsLength#0@@7| |slot#0@@3|)) ($Is (MutableMapModel.__default.SlotSuccessor |elementsLength#0@@7| |slot#0@@3|) Tclass.MutableMapModel.Slot))) :qid |MutableMapModelidfy.110:26| :skolemid |1266| :pattern ( (MutableMapModel.__default.SlotSuccessor |elementsLength#0@@7| |slot#0@@3|)) ))))
(assert (forall ((|elementsLength#0@@8| Int) (|slot#0@@4| T@U) ) (!  (=> (= (type |slot#0@@4|) DatatypeTypeType) (=> (and (<= (LitInt 0) |elementsLength#0@@8|) ($Is |slot#0@@4| Tclass.MutableMapModel.Slot)) (= (|MutableMapModel.__default.SlotSuccessor#requires| |elementsLength#0@@8| |slot#0@@4|) (MutableMapModel.__default.ValidSlot |elementsLength#0@@8| |slot#0@@4|)))) :qid |MutableMapModelidfy.110:26| :skolemid |1267| :pattern ( (|MutableMapModel.__default.SlotSuccessor#requires| |elementsLength#0@@8| |slot#0@@4|)) )))
(assert  (=> (<= 21 $FunctionContextHeight) (forall ((|elementsLength#0@@9| Int) (|slot#0@@5| T@U) ) (!  (=> (and (= (type |slot#0@@5|) DatatypeTypeType) (or (|MutableMapModel.__default.SlotSuccessor#canCall| |elementsLength#0@@9| |slot#0@@5|) (and (not (= 21 $FunctionContextHeight)) (and (and (<= (LitInt 0) |elementsLength#0@@9|) ($Is |slot#0@@5| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot |elementsLength#0@@9| |slot#0@@5|))))) (and (and (MutableMapModel.Slot.Slot_q |slot#0@@5|) (=> (not (= (MutableMapModel.Slot.slot |slot#0@@5|) (- |elementsLength#0@@9| 1))) (MutableMapModel.Slot.Slot_q |slot#0@@5|))) (= (MutableMapModel.__default.SlotSuccessor |elementsLength#0@@9| |slot#0@@5|) (|#MutableMapModel.Slot.Slot| (ite (= (MutableMapModel.Slot.slot |slot#0@@5|) (- |elementsLength#0@@9| 1)) 0 (+ (MutableMapModel.Slot.slot |slot#0@@5|) 1)))))) :qid |MutableMapModelidfy.110:26| :skolemid |1268| :pattern ( (MutableMapModel.__default.SlotSuccessor |elementsLength#0@@9| |slot#0@@5|)) ))))
(assert  (=> (<= 21 $FunctionContextHeight) (forall ((|elementsLength#0@@10| Int) (|slot#0@@6| T@U) ) (!  (=> (and (= (type |slot#0@@6|) DatatypeTypeType) (or (|MutableMapModel.__default.SlotSuccessor#canCall| (LitInt |elementsLength#0@@10|) (Lit |slot#0@@6|)) (and (not (= 21 $FunctionContextHeight)) (and (and (<= (LitInt 0) |elementsLength#0@@10|) ($Is |slot#0@@6| Tclass.MutableMapModel.Slot)) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidSlot (LitInt |elementsLength#0@@10|) (Lit |slot#0@@6|))))))))) (and (and (MutableMapModel.Slot.Slot_q (Lit |slot#0@@6|)) (=> (not (= (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@6|))) (LitInt (- |elementsLength#0@@10| 1)))) (MutableMapModel.Slot.Slot_q (Lit |slot#0@@6|)))) (= (MutableMapModel.__default.SlotSuccessor (LitInt |elementsLength#0@@10|) (Lit |slot#0@@6|)) (|#MutableMapModel.Slot.Slot| (ite (= (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@6|))) (LitInt (- |elementsLength#0@@10| 1))) 0 (+ (MutableMapModel.Slot.slot (Lit |slot#0@@6|)) 1)))))) :qid |MutableMapModelidfy.110:26| :weight 3 :skolemid |1269| :pattern ( (MutableMapModel.__default.SlotSuccessor (LitInt |elementsLength#0@@10|) (Lit |slot#0@@6|))) ))))
(assert (forall ((arg0@@265 T@U) (arg1@@118 Int) (arg2@@66 T@U) (arg3@@40 Int) ) (! (= (type (MutableMapModel.__default.KthSlotSuccessor arg0@@265 arg1@@118 arg2@@66 arg3@@40)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.KthSlotSuccessor| :pattern ( (MutableMapModel.__default.KthSlotSuccessor arg0@@265 arg1@@118 arg2@@66 arg3@@40)) )))
(assert (forall (($ly@@29 T@U) (|elementsLength#0@@11| Int) (|slot#0@@7| T@U) (|k#0@@5| Int) ) (!  (=> (and (= (type $ly@@29) LayerTypeType) (= (type |slot#0@@7|) DatatypeTypeType)) (= (MutableMapModel.__default.KthSlotSuccessor ($LS $ly@@29) |elementsLength#0@@11| |slot#0@@7| |k#0@@5|) (MutableMapModel.__default.KthSlotSuccessor $ly@@29 |elementsLength#0@@11| |slot#0@@7| |k#0@@5|))) :qid |MutableMapModelidfy.120:12| :skolemid |1271| :pattern ( (MutableMapModel.__default.KthSlotSuccessor ($LS $ly@@29) |elementsLength#0@@11| |slot#0@@7| |k#0@@5|)) )))
(assert (forall (($ly@@30 T@U) (|elementsLength#0@@12| Int) (|slot#0@@8| T@U) (|k#0@@6| Int) ) (!  (=> (and (= (type $ly@@30) LayerTypeType) (= (type |slot#0@@8|) DatatypeTypeType)) (= (MutableMapModel.__default.KthSlotSuccessor $ly@@30 |elementsLength#0@@12| |slot#0@@8| |k#0@@6|) (MutableMapModel.__default.KthSlotSuccessor $LZ |elementsLength#0@@12| |slot#0@@8| |k#0@@6|))) :qid |MutableMapModelidfy.120:12| :skolemid |1272| :pattern ( (MutableMapModel.__default.KthSlotSuccessor (AsFuelBottom $ly@@30) |elementsLength#0@@12| |slot#0@@8| |k#0@@6|)) )))
(assert  (=> (<= 22 $FunctionContextHeight) (forall (($ly@@31 T@U) (|elementsLength#0@@13| Int) (|slot#0@@9| T@U) (|k#0@@7| Int) ) (!  (=> (and (and (= (type $ly@@31) LayerTypeType) (= (type |slot#0@@9|) DatatypeTypeType)) (or (|MutableMapModel.__default.KthSlotSuccessor#canCall| |elementsLength#0@@13| |slot#0@@9| |k#0@@7|) (and (not (= 22 $FunctionContextHeight)) (and (and (and (<= (LitInt 0) |elementsLength#0@@13|) ($Is |slot#0@@9| Tclass.MutableMapModel.Slot)) (<= (LitInt 0) |k#0@@7|)) (and (>= |k#0@@7| (LitInt 0)) (MutableMapModel.__default.ValidSlot |elementsLength#0@@13| |slot#0@@9|)))))) (and (MutableMapModel.__default.ValidSlot |elementsLength#0@@13| (MutableMapModel.__default.KthSlotSuccessor $ly@@31 |elementsLength#0@@13| |slot#0@@9| |k#0@@7|)) ($Is (MutableMapModel.__default.KthSlotSuccessor $ly@@31 |elementsLength#0@@13| |slot#0@@9| |k#0@@7|) Tclass.MutableMapModel.Slot))) :qid |MutableMapModelidfy.120:12| :skolemid |1273| :pattern ( (MutableMapModel.__default.KthSlotSuccessor $ly@@31 |elementsLength#0@@13| |slot#0@@9| |k#0@@7|)) ))))
(assert (forall (($ly@@32 T@U) (|elementsLength#0@@14| Int) (|slot#0@@10| T@U) (|k#0@@8| Int) ) (!  (=> (and (= (type $ly@@32) LayerTypeType) (= (type |slot#0@@10|) DatatypeTypeType)) (=> (and (and (<= (LitInt 0) |elementsLength#0@@14|) ($Is |slot#0@@10| Tclass.MutableMapModel.Slot)) (<= (LitInt 0) |k#0@@8|)) (= (|MutableMapModel.__default.KthSlotSuccessor#requires| $ly@@32 |elementsLength#0@@14| |slot#0@@10| |k#0@@8|)  (and (>= |k#0@@8| (LitInt 0)) (MutableMapModel.__default.ValidSlot |elementsLength#0@@14| |slot#0@@10|))))) :qid |MutableMapModelidfy.120:12| :skolemid |1274| :pattern ( (|MutableMapModel.__default.KthSlotSuccessor#requires| $ly@@32 |elementsLength#0@@14| |slot#0@@10| |k#0@@8|)) )))
(assert  (=> (<= 22 $FunctionContextHeight) (forall (($ly@@33 T@U) (|elementsLength#0@@15| Int) (|slot#0@@11| T@U) (|k#0@@9| Int) ) (!  (=> (and (and (= (type $ly@@33) LayerTypeType) (= (type |slot#0@@11|) DatatypeTypeType)) (or (|MutableMapModel.__default.KthSlotSuccessor#canCall| |elementsLength#0@@15| |slot#0@@11| |k#0@@9|) (and (not (= 22 $FunctionContextHeight)) (and (and (and (<= (LitInt 0) |elementsLength#0@@15|) ($Is |slot#0@@11| Tclass.MutableMapModel.Slot)) (<= (LitInt 0) |k#0@@9|)) (and (>= |k#0@@9| (LitInt 0)) (MutableMapModel.__default.ValidSlot |elementsLength#0@@15| |slot#0@@11|)))))) (and (=> (not (= |k#0@@9| (LitInt 0))) (and (|MutableMapModel.__default.KthSlotSuccessor#canCall| |elementsLength#0@@15| |slot#0@@11| (- |k#0@@9| 1)) (|MutableMapModel.__default.SlotSuccessor#canCall| |elementsLength#0@@15| (MutableMapModel.__default.KthSlotSuccessor $ly@@33 |elementsLength#0@@15| |slot#0@@11| (- |k#0@@9| 1))))) (= (MutableMapModel.__default.KthSlotSuccessor ($LS $ly@@33) |elementsLength#0@@15| |slot#0@@11| |k#0@@9|) (ite (= |k#0@@9| (LitInt 0)) |slot#0@@11| (MutableMapModel.__default.SlotSuccessor |elementsLength#0@@15| (MutableMapModel.__default.KthSlotSuccessor $ly@@33 |elementsLength#0@@15| |slot#0@@11| (- |k#0@@9| 1))))))) :qid |MutableMapModelidfy.120:12| :skolemid |1275| :pattern ( (MutableMapModel.__default.KthSlotSuccessor ($LS $ly@@33) |elementsLength#0@@15| |slot#0@@11| |k#0@@9|)) ))))
(assert  (=> (<= 22 $FunctionContextHeight) (forall (($ly@@34 T@U) (|elementsLength#0@@16| Int) (|slot#0@@12| T@U) (|k#0@@10| Int) ) (!  (=> (and (and (= (type $ly@@34) LayerTypeType) (= (type |slot#0@@12|) DatatypeTypeType)) (or (|MutableMapModel.__default.KthSlotSuccessor#canCall| (LitInt |elementsLength#0@@16|) (Lit |slot#0@@12|) (LitInt |k#0@@10|)) (and (not (= 22 $FunctionContextHeight)) (and (and (and (<= (LitInt 0) |elementsLength#0@@16|) ($Is |slot#0@@12| Tclass.MutableMapModel.Slot)) (<= (LitInt 0) |k#0@@10|)) (and (>= (LitInt |k#0@@10|) (LitInt 0)) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidSlot (LitInt |elementsLength#0@@16|) (Lit |slot#0@@12|)))))))))) (and (=> (not (= (LitInt |k#0@@10|) (LitInt 0))) (and (|MutableMapModel.__default.KthSlotSuccessor#canCall| (LitInt |elementsLength#0@@16|) (Lit |slot#0@@12|) (LitInt (- |k#0@@10| 1))) (|MutableMapModel.__default.SlotSuccessor#canCall| (LitInt |elementsLength#0@@16|) (Lit (MutableMapModel.__default.KthSlotSuccessor ($LS $ly@@34) (LitInt |elementsLength#0@@16|) (Lit |slot#0@@12|) (LitInt (- |k#0@@10| 1))))))) (= (MutableMapModel.__default.KthSlotSuccessor ($LS $ly@@34) (LitInt |elementsLength#0@@16|) (Lit |slot#0@@12|) (LitInt |k#0@@10|)) (ite (= (LitInt |k#0@@10|) (LitInt 0)) |slot#0@@12| (MutableMapModel.__default.SlotSuccessor (LitInt |elementsLength#0@@16|) (Lit (MutableMapModel.__default.KthSlotSuccessor ($LS $ly@@34) (LitInt |elementsLength#0@@16|) (Lit |slot#0@@12|) (LitInt (- |k#0@@10| 1))))))))) :qid |MutableMapModelidfy.120:12| :weight 3 :skolemid |1276| :pattern ( (MutableMapModel.__default.KthSlotSuccessor ($LS $ly@@34) (LitInt |elementsLength#0@@16|) (Lit |slot#0@@12|) (LitInt |k#0@@10|))) ))))
(assert  (=> (<= 24 $FunctionContextHeight) (forall ((MutableMapModel._default.SlotIsEmpty$V T@U) (|elements#0@@3| T@U) (|slot#0@@13| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsEmpty$V) TyType) (= (type |elements#0@@3|) (SeqType BoxType))) (= (type |slot#0@@13|) DatatypeTypeType)) (or (|MutableMapModel.__default.SlotIsEmpty#canCall| MutableMapModel._default.SlotIsEmpty$V |elements#0@@3| |slot#0@@13|) (and (not (= 24 $FunctionContextHeight)) (and (and ($Is |elements#0@@3| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsEmpty$V))) ($Is |slot#0@@13| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@3|) |slot#0@@13|))))) true) :qid |unknown.0:0| :skolemid |1281| :pattern ( (MutableMapModel.__default.SlotIsEmpty MutableMapModel._default.SlotIsEmpty$V |elements#0@@3| |slot#0@@13|)) ))))
(assert (forall ((MutableMapModel._default.SlotIsEmpty$V@@0 T@U) (|elements#0@@4| T@U) (|slot#0@@14| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsEmpty$V@@0) TyType) (= (type |elements#0@@4|) (SeqType BoxType))) (= (type |slot#0@@14|) DatatypeTypeType)) (and ($Is |elements#0@@4| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsEmpty$V@@0))) ($Is |slot#0@@14| Tclass.MutableMapModel.Slot))) (= (|MutableMapModel.__default.SlotIsEmpty#requires| MutableMapModel._default.SlotIsEmpty$V@@0 |elements#0@@4| |slot#0@@14|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@4|) |slot#0@@14|))) :qid |unknown.0:0| :skolemid |1282| :pattern ( (|MutableMapModel.__default.SlotIsEmpty#requires| MutableMapModel._default.SlotIsEmpty$V@@0 |elements#0@@4| |slot#0@@14|)) )))
(assert  (=> (<= 24 $FunctionContextHeight) (forall ((MutableMapModel._default.SlotIsEmpty$V@@1 T@U) (|elements#0@@5| T@U) (|slot#0@@15| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsEmpty$V@@1) TyType) (= (type |elements#0@@5|) (SeqType BoxType))) (= (type |slot#0@@15|) DatatypeTypeType)) (or (|MutableMapModel.__default.SlotIsEmpty#canCall| MutableMapModel._default.SlotIsEmpty$V@@1 |elements#0@@5| |slot#0@@15|) (and (not (= 24 $FunctionContextHeight)) (and (and ($Is |elements#0@@5| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsEmpty$V@@1))) ($Is |slot#0@@15| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@5|) |slot#0@@15|))))) (and (MutableMapModel.Slot.Slot_q |slot#0@@15|) (= (MutableMapModel.__default.SlotIsEmpty MutableMapModel._default.SlotIsEmpty$V@@1 |elements#0@@5| |slot#0@@15|) (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@5| (MutableMapModel.Slot.slot |slot#0@@15|))))))) :qid |unknown.0:0| :skolemid |1283| :pattern ( (MutableMapModel.__default.SlotIsEmpty MutableMapModel._default.SlotIsEmpty$V@@1 |elements#0@@5| |slot#0@@15|)) ))))
(assert  (=> (<= 24 $FunctionContextHeight) (forall ((MutableMapModel._default.SlotIsEmpty$V@@2 T@U) (|elements#0@@6| T@U) (|slot#0@@16| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsEmpty$V@@2) TyType) (= (type |elements#0@@6|) (SeqType BoxType))) (= (type |slot#0@@16|) DatatypeTypeType)) (or (|MutableMapModel.__default.SlotIsEmpty#canCall| MutableMapModel._default.SlotIsEmpty$V@@2 (Lit |elements#0@@6|) (Lit |slot#0@@16|)) (and (not (= 24 $FunctionContextHeight)) (and (and ($Is |elements#0@@6| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsEmpty$V@@2))) ($Is |slot#0@@16| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@6|)) (Lit |slot#0@@16|)))))) (and (MutableMapModel.Slot.Slot_q (Lit |slot#0@@16|)) (= (MutableMapModel.__default.SlotIsEmpty MutableMapModel._default.SlotIsEmpty$V@@2 (Lit |elements#0@@6|) (Lit |slot#0@@16|)) (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@6|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@16|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1284| :pattern ( (MutableMapModel.__default.SlotIsEmpty MutableMapModel._default.SlotIsEmpty$V@@2 (Lit |elements#0@@6|) (Lit |slot#0@@16|))) ))))
(assert  (=> (<= 25 $FunctionContextHeight) (forall ((MutableMapModel._default.SlotIsEntry$V T@U) (|elements#0@@7| T@U) (|slot#0@@17| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsEntry$V) TyType) (= (type |elements#0@@7|) (SeqType BoxType))) (= (type |slot#0@@17|) DatatypeTypeType)) (or (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.SlotIsEntry$V |elements#0@@7| |slot#0@@17|) (and (not (= 25 $FunctionContextHeight)) (and (and ($Is |elements#0@@7| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsEntry$V))) ($Is |slot#0@@17| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@7|) |slot#0@@17|))))) true) :qid |unknown.0:0| :skolemid |1286| :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SlotIsEntry$V |elements#0@@7| |slot#0@@17|)) ))))
(assert (forall ((MutableMapModel._default.SlotIsEntry$V@@0 T@U) (|elements#0@@8| T@U) (|slot#0@@18| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsEntry$V@@0) TyType) (= (type |elements#0@@8|) (SeqType BoxType))) (= (type |slot#0@@18|) DatatypeTypeType)) (and ($Is |elements#0@@8| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsEntry$V@@0))) ($Is |slot#0@@18| Tclass.MutableMapModel.Slot))) (= (|MutableMapModel.__default.SlotIsEntry#requires| MutableMapModel._default.SlotIsEntry$V@@0 |elements#0@@8| |slot#0@@18|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@8|) |slot#0@@18|))) :qid |unknown.0:0| :skolemid |1287| :pattern ( (|MutableMapModel.__default.SlotIsEntry#requires| MutableMapModel._default.SlotIsEntry$V@@0 |elements#0@@8| |slot#0@@18|)) )))
(assert  (=> (<= 25 $FunctionContextHeight) (forall ((MutableMapModel._default.SlotIsEntry$V@@1 T@U) (|elements#0@@9| T@U) (|slot#0@@19| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsEntry$V@@1) TyType) (= (type |elements#0@@9|) (SeqType BoxType))) (= (type |slot#0@@19|) DatatypeTypeType)) (or (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.SlotIsEntry$V@@1 |elements#0@@9| |slot#0@@19|) (and (not (= 25 $FunctionContextHeight)) (and (and ($Is |elements#0@@9| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsEntry$V@@1))) ($Is |slot#0@@19| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@9|) |slot#0@@19|))))) (and (MutableMapModel.Slot.Slot_q |slot#0@@19|) (= (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SlotIsEntry$V@@1 |elements#0@@9| |slot#0@@19|) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@9| (MutableMapModel.Slot.slot |slot#0@@19|))))))) :qid |unknown.0:0| :skolemid |1288| :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SlotIsEntry$V@@1 |elements#0@@9| |slot#0@@19|)) ))))
(assert  (=> (<= 25 $FunctionContextHeight) (forall ((MutableMapModel._default.SlotIsEntry$V@@2 T@U) (|elements#0@@10| T@U) (|slot#0@@20| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsEntry$V@@2) TyType) (= (type |elements#0@@10|) (SeqType BoxType))) (= (type |slot#0@@20|) DatatypeTypeType)) (or (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.SlotIsEntry$V@@2 (Lit |elements#0@@10|) (Lit |slot#0@@20|)) (and (not (= 25 $FunctionContextHeight)) (and (and ($Is |elements#0@@10| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsEntry$V@@2))) ($Is |slot#0@@20| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@10|)) (Lit |slot#0@@20|)))))) (and (MutableMapModel.Slot.Slot_q (Lit |slot#0@@20|)) (= (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SlotIsEntry$V@@2 (Lit |elements#0@@10|) (Lit |slot#0@@20|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@10|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@20|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1289| :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SlotIsEntry$V@@2 (Lit |elements#0@@10|) (Lit |slot#0@@20|))) ))))
(assert  (=> (<= 26 $FunctionContextHeight) (forall ((MutableMapModel._default.SlotIsTombstone$V T@U) (|elements#0@@11| T@U) (|slot#0@@21| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsTombstone$V) TyType) (= (type |elements#0@@11|) (SeqType BoxType))) (= (type |slot#0@@21|) DatatypeTypeType)) (or (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.SlotIsTombstone$V |elements#0@@11| |slot#0@@21|) (and (not (= 26 $FunctionContextHeight)) (and (and ($Is |elements#0@@11| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsTombstone$V))) ($Is |slot#0@@21| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@11|) |slot#0@@21|))))) true) :qid |unknown.0:0| :skolemid |1291| :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SlotIsTombstone$V |elements#0@@11| |slot#0@@21|)) ))))
(assert (forall ((MutableMapModel._default.SlotIsTombstone$V@@0 T@U) (|elements#0@@12| T@U) (|slot#0@@22| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsTombstone$V@@0) TyType) (= (type |elements#0@@12|) (SeqType BoxType))) (= (type |slot#0@@22|) DatatypeTypeType)) (and ($Is |elements#0@@12| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsTombstone$V@@0))) ($Is |slot#0@@22| Tclass.MutableMapModel.Slot))) (= (|MutableMapModel.__default.SlotIsTombstone#requires| MutableMapModel._default.SlotIsTombstone$V@@0 |elements#0@@12| |slot#0@@22|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@12|) |slot#0@@22|))) :qid |unknown.0:0| :skolemid |1292| :pattern ( (|MutableMapModel.__default.SlotIsTombstone#requires| MutableMapModel._default.SlotIsTombstone$V@@0 |elements#0@@12| |slot#0@@22|)) )))
(assert  (=> (<= 26 $FunctionContextHeight) (forall ((MutableMapModel._default.SlotIsTombstone$V@@1 T@U) (|elements#0@@13| T@U) (|slot#0@@23| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsTombstone$V@@1) TyType) (= (type |elements#0@@13|) (SeqType BoxType))) (= (type |slot#0@@23|) DatatypeTypeType)) (or (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.SlotIsTombstone$V@@1 |elements#0@@13| |slot#0@@23|) (and (not (= 26 $FunctionContextHeight)) (and (and ($Is |elements#0@@13| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsTombstone$V@@1))) ($Is |slot#0@@23| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@13|) |slot#0@@23|))))) (and (MutableMapModel.Slot.Slot_q |slot#0@@23|) (= (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SlotIsTombstone$V@@1 |elements#0@@13| |slot#0@@23|) (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@13| (MutableMapModel.Slot.slot |slot#0@@23|))))))) :qid |unknown.0:0| :skolemid |1293| :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SlotIsTombstone$V@@1 |elements#0@@13| |slot#0@@23|)) ))))
(assert  (=> (<= 26 $FunctionContextHeight) (forall ((MutableMapModel._default.SlotIsTombstone$V@@2 T@U) (|elements#0@@14| T@U) (|slot#0@@24| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SlotIsTombstone$V@@2) TyType) (= (type |elements#0@@14|) (SeqType BoxType))) (= (type |slot#0@@24|) DatatypeTypeType)) (or (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.SlotIsTombstone$V@@2 (Lit |elements#0@@14|) (Lit |slot#0@@24|)) (and (not (= 26 $FunctionContextHeight)) (and (and ($Is |elements#0@@14| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotIsTombstone$V@@2))) ($Is |slot#0@@24| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@14|)) (Lit |slot#0@@24|)))))) (and (MutableMapModel.Slot.Slot_q (Lit |slot#0@@24|)) (= (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SlotIsTombstone$V@@2 (Lit |elements#0@@14|) (Lit |slot#0@@24|)) (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@14|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@24|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1294| :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SlotIsTombstone$V@@2 (Lit |elements#0@@14|) (Lit |slot#0@@24|))) ))))
(assert  (=> (<= 27 $FunctionContextHeight) (forall ((MutableMapModel._default.FilledWithOtherKey$V T@U) (|elements#0@@15| T@U) (|slot#0@@25| T@U) (|excludingKey#0| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithOtherKey$V) TyType) (= (type |elements#0@@15|) (SeqType BoxType))) (= (type |slot#0@@25|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithOtherKey#canCall| MutableMapModel._default.FilledWithOtherKey$V |elements#0@@15| |slot#0@@25| |excludingKey#0|) (and (not (= 27 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@15| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithOtherKey$V))) ($Is |slot#0@@25| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |excludingKey#0|) (< |excludingKey#0| 18446744073709551616))) (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithOtherKey$V |elements#0@@15|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@15|) |slot#0@@25|)))))) true) :qid |unknown.0:0| :skolemid |1296| :pattern ( (MutableMapModel.__default.FilledWithOtherKey MutableMapModel._default.FilledWithOtherKey$V |elements#0@@15| |slot#0@@25| |excludingKey#0|)) ))))
(assert (forall ((MutableMapModel._default.FilledWithOtherKey$V@@0 T@U) (|elements#0@@16| T@U) (|slot#0@@26| T@U) (|excludingKey#0@@0| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithOtherKey$V@@0) TyType) (= (type |elements#0@@16|) (SeqType BoxType))) (= (type |slot#0@@26|) DatatypeTypeType)) (and (and ($Is |elements#0@@16| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithOtherKey$V@@0))) ($Is |slot#0@@26| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |excludingKey#0@@0|) (< |excludingKey#0@@0| 18446744073709551616)))) (= (|MutableMapModel.__default.FilledWithOtherKey#requires| MutableMapModel._default.FilledWithOtherKey$V@@0 |elements#0@@16| |slot#0@@26| |excludingKey#0@@0|)  (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithOtherKey$V@@0 |elements#0@@16|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@16|) |slot#0@@26|)))) :qid |unknown.0:0| :skolemid |1297| :pattern ( (|MutableMapModel.__default.FilledWithOtherKey#requires| MutableMapModel._default.FilledWithOtherKey$V@@0 |elements#0@@16| |slot#0@@26| |excludingKey#0@@0|)) )))
(assert  (=> (<= 27 $FunctionContextHeight) (forall ((MutableMapModel._default.FilledWithOtherKey$V@@1 T@U) (|elements#0@@17| T@U) (|slot#0@@27| T@U) (|excludingKey#0@@1| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithOtherKey$V@@1) TyType) (= (type |elements#0@@17|) (SeqType BoxType))) (= (type |slot#0@@27|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithOtherKey#canCall| MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17| |slot#0@@27| |excludingKey#0@@1|) (and (not (= 27 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@17| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithOtherKey$V@@1))) ($Is |slot#0@@27| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |excludingKey#0@@1|) (< |excludingKey#0@@1| 18446744073709551616))) (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@17|) |slot#0@@27|)))))) (and (and (and (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17| |slot#0@@27|) (=> (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17| |slot#0@@27|) (MutableMapModel.Slot.Slot_q |slot#0@@27|))) (=> (not (and (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17| |slot#0@@27|) (not (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@17| (MutableMapModel.Slot.slot |slot#0@@27|)))) |excludingKey#0@@1|)))) (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17| |slot#0@@27|) (=> (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17| |slot#0@@27|) (MutableMapModel.Slot.Slot_q |slot#0@@27|))))) (= (MutableMapModel.__default.FilledWithOtherKey MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17| |slot#0@@27| |excludingKey#0@@1|)  (or (and (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17| |slot#0@@27|) (not (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@17| (MutableMapModel.Slot.slot |slot#0@@27|)))) |excludingKey#0@@1|))) (and (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17| |slot#0@@27|) (not (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@17| (MutableMapModel.Slot.slot |slot#0@@27|)))) |excludingKey#0@@1|))))))) :qid |unknown.0:0| :skolemid |1298| :pattern ( (MutableMapModel.__default.FilledWithOtherKey MutableMapModel._default.FilledWithOtherKey$V@@1 |elements#0@@17| |slot#0@@27| |excludingKey#0@@1|)) ))))
(assert  (=> (<= 27 $FunctionContextHeight) (forall ((MutableMapModel._default.FilledWithOtherKey$V@@2 T@U) (|elements#0@@18| T@U) (|slot#0@@28| T@U) (|excludingKey#0@@2| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithOtherKey$V@@2) TyType) (= (type |elements#0@@18|) (SeqType BoxType))) (= (type |slot#0@@28|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithOtherKey#canCall| MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|) (Lit |slot#0@@28|) (LitInt |excludingKey#0@@2|)) (and (not (= 27 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@18| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithOtherKey$V@@2))) ($Is |slot#0@@28| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |excludingKey#0@@2|) (< |excludingKey#0@@2| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|))))) (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@18|)) (Lit |slot#0@@28|))))))) (and (and (and (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|) (Lit |slot#0@@28|)) (=> (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|) (Lit |slot#0@@28|))))) (MutableMapModel.Slot.Slot_q (Lit |slot#0@@28|)))) (=> (not (and (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|) (Lit |slot#0@@28|)) (not (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@18|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@28|)))))) |excludingKey#0@@2|)))) (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|) (Lit |slot#0@@28|)) (=> (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|) (Lit |slot#0@@28|))))) (MutableMapModel.Slot.Slot_q (Lit |slot#0@@28|)))))) (= (MutableMapModel.__default.FilledWithOtherKey MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|) (Lit |slot#0@@28|) (LitInt |excludingKey#0@@2|))  (or (and (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|) (Lit |slot#0@@28|)) (not (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@18|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@28|)))))) |excludingKey#0@@2|))) (and (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|) (Lit |slot#0@@28|)) (not (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@18|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@28|)))))) |excludingKey#0@@2|))))))) :qid |unknown.0:0| :weight 3 :skolemid |1299| :pattern ( (MutableMapModel.__default.FilledWithOtherKey MutableMapModel._default.FilledWithOtherKey$V@@2 (Lit |elements#0@@18|) (Lit |slot#0@@28|) (LitInt |excludingKey#0@@2|))) ))))
(assert  (=> (<= 28 $FunctionContextHeight) (forall ((MutableMapModel._default.FilledWithOtherKeys$V T@U) (|elements#0@@19| T@U) (|start#0| T@U) (|count#0| Int) (|excludingKey#0@@3| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithOtherKeys$V) TyType) (= (type |elements#0@@19|) (SeqType BoxType))) (= (type |start#0|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithOtherKeys#canCall| MutableMapModel._default.FilledWithOtherKeys$V |elements#0@@19| |start#0| |count#0| |excludingKey#0@@3|) (and (not (= 28 $FunctionContextHeight)) (and (and (and (and ($Is |elements#0@@19| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithOtherKeys$V))) ($Is |start#0| Tclass.MutableMapModel.Slot)) (<= (LitInt 0) |count#0|)) (and (<= (LitInt 0) |excludingKey#0@@3|) (< |excludingKey#0@@3| 18446744073709551616))) (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithOtherKeys$V |elements#0@@19|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@19|) |start#0|)))))) true) :qid |unknown.0:0| :skolemid |1304| :pattern ( (MutableMapModel.__default.FilledWithOtherKeys MutableMapModel._default.FilledWithOtherKeys$V |elements#0@@19| |start#0| |count#0| |excludingKey#0@@3|)) ))))
(assert (forall ((MutableMapModel._default.FilledWithOtherKeys$V@@0 T@U) (|elements#0@@20| T@U) (|start#0@@0| T@U) (|count#0@@0| Int) (|excludingKey#0@@4| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.FilledWithOtherKeys$V@@0) TyType) (= (type |elements#0@@20|) (SeqType BoxType))) (= (type |start#0@@0|) DatatypeTypeType)) (=> (and (and (and ($Is |elements#0@@20| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithOtherKeys$V@@0))) ($Is |start#0@@0| Tclass.MutableMapModel.Slot)) (<= (LitInt 0) |count#0@@0|)) (and (<= (LitInt 0) |excludingKey#0@@4|) (< |excludingKey#0@@4| 18446744073709551616))) (= (|MutableMapModel.__default.FilledWithOtherKeys#requires| MutableMapModel._default.FilledWithOtherKeys$V@@0 |elements#0@@20| |start#0@@0| |count#0@@0| |excludingKey#0@@4|)  (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithOtherKeys$V@@0 |elements#0@@20|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@20|) |start#0@@0|))))) :qid |unknown.0:0| :skolemid |1305| :pattern ( (|MutableMapModel.__default.FilledWithOtherKeys#requires| MutableMapModel._default.FilledWithOtherKeys$V@@0 |elements#0@@20| |start#0@@0| |count#0@@0| |excludingKey#0@@4|)) )))
(assert  (=> (<= 28 $FunctionContextHeight) (forall ((MutableMapModel._default.FilledWithOtherKeys$V@@1 T@U) (|elements#0@@21| T@U) (|start#0@@1| T@U) (|count#0@@1| Int) (|excludingKey#0@@5| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithOtherKeys$V@@1) TyType) (= (type |elements#0@@21|) (SeqType BoxType))) (= (type |start#0@@1|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithOtherKeys#canCall| MutableMapModel._default.FilledWithOtherKeys$V@@1 |elements#0@@21| |start#0@@1| |count#0@@1| |excludingKey#0@@5|) (and (not (= 28 $FunctionContextHeight)) (and (and (and (and ($Is |elements#0@@21| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithOtherKeys$V@@1))) ($Is |start#0@@1| Tclass.MutableMapModel.Slot)) (<= (LitInt 0) |count#0@@1|)) (and (<= (LitInt 0) |excludingKey#0@@5|) (< |excludingKey#0@@5| 18446744073709551616))) (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithOtherKeys$V@@1 |elements#0@@21|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@21|) |start#0@@1|)))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|offset#0| Int) ) (!  (=> (<= (LitInt 0) |offset#0|) (=> (< |offset#0| |count#0@@1|) (and (|MutableMapModel.__default.KthSlotSuccessor#canCall| (|Seq#Length| |elements#0@@21|) |start#0@@1| |offset#0|) (|MutableMapModel.__default.FilledWithOtherKey#canCall| MutableMapModel._default.FilledWithOtherKeys$V@@1 |elements#0@@21| (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@21|) |start#0@@1| |offset#0|) |excludingKey#0@@5|)))) :qid |MutableMapModelidfy.192:16| :skolemid |1307| :pattern ( (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@21|) |start#0@@1| |offset#0|)) ))) (= (MutableMapModel.__default.FilledWithOtherKeys MutableMapModel._default.FilledWithOtherKeys$V@@1 |elements#0@@21| |start#0@@1| |count#0@@1| |excludingKey#0@@5|)  (and true (forall ((|offset#0@@0| Int) ) (!  (=> (<= (LitInt 0) |offset#0@@0|) (=> (< |offset#0@@0| |count#0@@1|) (MutableMapModel.__default.FilledWithOtherKey MutableMapModel._default.FilledWithOtherKeys$V@@1 |elements#0@@21| (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@21|) |start#0@@1| |offset#0@@0|) |excludingKey#0@@5|))) :qid |MutableMapModelidfy.192:16| :skolemid |1306| :pattern ( (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@21|) |start#0@@1| |offset#0@@0|)) )))))) :qid |unknown.0:0| :skolemid |1308| :pattern ( (MutableMapModel.__default.FilledWithOtherKeys MutableMapModel._default.FilledWithOtherKeys$V@@1 |elements#0@@21| |start#0@@1| |count#0@@1| |excludingKey#0@@5|)) ))))
(assert  (=> (<= 28 $FunctionContextHeight) (forall ((MutableMapModel._default.FilledWithOtherKeys$V@@2 T@U) (|elements#0@@22| T@U) (|start#0@@2| T@U) (|count#0@@2| Int) (|excludingKey#0@@6| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithOtherKeys$V@@2) TyType) (= (type |elements#0@@22|) (SeqType BoxType))) (= (type |start#0@@2|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithOtherKeys#canCall| MutableMapModel._default.FilledWithOtherKeys$V@@2 (Lit |elements#0@@22|) (Lit |start#0@@2|) (LitInt |count#0@@2|) (LitInt |excludingKey#0@@6|)) (and (not (= 28 $FunctionContextHeight)) (and (and (and (and ($Is |elements#0@@22| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithOtherKeys$V@@2))) ($Is |start#0@@2| Tclass.MutableMapModel.Slot)) (<= (LitInt 0) |count#0@@2|)) (and (<= (LitInt 0) |excludingKey#0@@6|) (< |excludingKey#0@@6| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithOtherKeys$V@@2 (Lit |elements#0@@22|))))) (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@22|)) (Lit |start#0@@2|))))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|offset#1| Int) ) (!  (=> (<= (LitInt 0) |offset#1|) (=> (< |offset#1| |count#0@@2|) (and (|MutableMapModel.__default.KthSlotSuccessor#canCall| (|Seq#Length| (Lit |elements#0@@22|)) (Lit |start#0@@2|) |offset#1|) (|MutableMapModel.__default.FilledWithOtherKey#canCall| MutableMapModel._default.FilledWithOtherKeys$V@@2 (Lit |elements#0@@22|) (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| (Lit |elements#0@@22|)) (Lit |start#0@@2|) |offset#1|) (LitInt |excludingKey#0@@6|))))) :qid |MutableMapModelidfy.192:16| :skolemid |1310| :pattern ( (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@22|) |start#0@@2| |offset#1|)) ))) (= (MutableMapModel.__default.FilledWithOtherKeys MutableMapModel._default.FilledWithOtherKeys$V@@2 (Lit |elements#0@@22|) (Lit |start#0@@2|) (LitInt |count#0@@2|) (LitInt |excludingKey#0@@6|))  (and true (forall ((|offset#1@@0| Int) ) (!  (=> (<= (LitInt 0) |offset#1@@0|) (=> (< |offset#1@@0| |count#0@@2|) (MutableMapModel.__default.FilledWithOtherKey MutableMapModel._default.FilledWithOtherKeys$V@@2 (Lit |elements#0@@22|) (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| (Lit |elements#0@@22|)) (Lit |start#0@@2|) |offset#1@@0|) (LitInt |excludingKey#0@@6|)))) :qid |MutableMapModelidfy.192:16| :skolemid |1309| :pattern ( (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@22|) |start#0@@2| |offset#1@@0|)) )))))) :qid |unknown.0:0| :weight 3 :skolemid |1311| :pattern ( (MutableMapModel.__default.FilledWithOtherKeys MutableMapModel._default.FilledWithOtherKeys$V@@2 (Lit |elements#0@@22|) (Lit |start#0@@2|) (LitInt |count#0@@2|) (LitInt |excludingKey#0@@6|))) ))))
(assert  (=> (<= 29 $FunctionContextHeight) (forall ((MutableMapModel._default.FilledWithKey$V T@U) (|elements#0@@23| T@U) (|slot#0@@29| T@U) (|key#0@@7| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithKey$V) TyType) (= (type |elements#0@@23|) (SeqType BoxType))) (= (type |slot#0@@29|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithKey#canCall| MutableMapModel._default.FilledWithKey$V |elements#0@@23| |slot#0@@29| |key#0@@7|) (and (not (= 29 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@23| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithKey$V))) ($Is |slot#0@@29| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |key#0@@7|) (< |key#0@@7| 18446744073709551616))) (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithKey$V |elements#0@@23|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@23|) |slot#0@@29|)))))) true) :qid |unknown.0:0| :skolemid |1318| :pattern ( (MutableMapModel.__default.FilledWithKey MutableMapModel._default.FilledWithKey$V |elements#0@@23| |slot#0@@29| |key#0@@7|)) ))))
(assert (forall ((MutableMapModel._default.FilledWithKey$V@@0 T@U) (|elements#0@@24| T@U) (|slot#0@@30| T@U) (|key#0@@8| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithKey$V@@0) TyType) (= (type |elements#0@@24|) (SeqType BoxType))) (= (type |slot#0@@30|) DatatypeTypeType)) (and (and ($Is |elements#0@@24| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithKey$V@@0))) ($Is |slot#0@@30| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |key#0@@8|) (< |key#0@@8| 18446744073709551616)))) (= (|MutableMapModel.__default.FilledWithKey#requires| MutableMapModel._default.FilledWithKey$V@@0 |elements#0@@24| |slot#0@@30| |key#0@@8|)  (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithKey$V@@0 |elements#0@@24|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@24|) |slot#0@@30|)))) :qid |unknown.0:0| :skolemid |1319| :pattern ( (|MutableMapModel.__default.FilledWithKey#requires| MutableMapModel._default.FilledWithKey$V@@0 |elements#0@@24| |slot#0@@30| |key#0@@8|)) )))
(assert  (=> (<= 29 $FunctionContextHeight) (forall ((MutableMapModel._default.FilledWithKey$V@@1 T@U) (|elements#0@@25| T@U) (|slot#0@@31| T@U) (|key#0@@9| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithKey$V@@1) TyType) (= (type |elements#0@@25|) (SeqType BoxType))) (= (type |slot#0@@31|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithKey#canCall| MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25| |slot#0@@31| |key#0@@9|) (and (not (= 29 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@25| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithKey$V@@1))) ($Is |slot#0@@31| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |key#0@@9|) (< |key#0@@9| 18446744073709551616))) (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@25|) |slot#0@@31|)))))) (and (and (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25| |slot#0@@31|) (=> (not (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25| |slot#0@@31|)) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25| |slot#0@@31|))) (=> (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25| |slot#0@@31|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25| |slot#0@@31|)) (MutableMapModel.Slot.Slot_q |slot#0@@31|))) (= (MutableMapModel.__default.FilledWithKey MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25| |slot#0@@31| |key#0@@9|)  (and (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25| |slot#0@@31|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25| |slot#0@@31|)) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@25| (MutableMapModel.Slot.slot |slot#0@@31|)))) |key#0@@9|))))) :qid |unknown.0:0| :skolemid |1320| :pattern ( (MutableMapModel.__default.FilledWithKey MutableMapModel._default.FilledWithKey$V@@1 |elements#0@@25| |slot#0@@31| |key#0@@9|)) ))))
(assert  (=> (<= 29 $FunctionContextHeight) (forall ((MutableMapModel._default.FilledWithKey$V@@2 T@U) (|elements#0@@26| T@U) (|slot#0@@32| T@U) (|key#0@@10| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithKey$V@@2) TyType) (= (type |elements#0@@26|) (SeqType BoxType))) (= (type |slot#0@@32|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithKey#canCall| MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|) (Lit |slot#0@@32|) (LitInt |key#0@@10|)) (and (not (= 29 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@26| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithKey$V@@2))) ($Is |slot#0@@32| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |key#0@@10|) (< |key#0@@10| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|))))) (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@26|)) (Lit |slot#0@@32|))))))) (and (and (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|) (Lit |slot#0@@32|)) (=> (not (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|) (Lit |slot#0@@32|)))))) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|) (Lit |slot#0@@32|)))) (=> (U_2_bool (Lit (bool_2_U  (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|) (Lit |slot#0@@32|)) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|) (Lit |slot#0@@32|)))))) (MutableMapModel.Slot.Slot_q (Lit |slot#0@@32|)))) (= (MutableMapModel.__default.FilledWithKey MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|) (Lit |slot#0@@32|) (LitInt |key#0@@10|))  (and (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|) (Lit |slot#0@@32|)) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|) (Lit |slot#0@@32|))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@26|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@32|)))))) (LitInt |key#0@@10|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1321| :pattern ( (MutableMapModel.__default.FilledWithKey MutableMapModel._default.FilledWithKey$V@@2 (Lit |elements#0@@26|) (Lit |slot#0@@32|) (LitInt |key#0@@10|))) ))))
(assert  (=> (<= 30 $FunctionContextHeight) (forall ((MutableMapModel._default.FilledWithEntryKey$V T@U) (|elements#0@@27| T@U) (|slot#0@@33| T@U) (|key#0@@11| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithEntryKey$V) TyType) (= (type |elements#0@@27|) (SeqType BoxType))) (= (type |slot#0@@33|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithEntryKey#canCall| MutableMapModel._default.FilledWithEntryKey$V |elements#0@@27| |slot#0@@33| |key#0@@11|) (and (not (= 30 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@27| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithEntryKey$V))) ($Is |slot#0@@33| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |key#0@@11|) (< |key#0@@11| 18446744073709551616))) (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithEntryKey$V |elements#0@@27|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@27|) |slot#0@@33|)))))) true) :qid |unknown.0:0| :skolemid |1326| :pattern ( (MutableMapModel.__default.FilledWithEntryKey MutableMapModel._default.FilledWithEntryKey$V |elements#0@@27| |slot#0@@33| |key#0@@11|)) ))))
(assert (forall ((MutableMapModel._default.FilledWithEntryKey$V@@0 T@U) (|elements#0@@28| T@U) (|slot#0@@34| T@U) (|key#0@@12| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithEntryKey$V@@0) TyType) (= (type |elements#0@@28|) (SeqType BoxType))) (= (type |slot#0@@34|) DatatypeTypeType)) (and (and ($Is |elements#0@@28| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithEntryKey$V@@0))) ($Is |slot#0@@34| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |key#0@@12|) (< |key#0@@12| 18446744073709551616)))) (= (|MutableMapModel.__default.FilledWithEntryKey#requires| MutableMapModel._default.FilledWithEntryKey$V@@0 |elements#0@@28| |slot#0@@34| |key#0@@12|)  (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithEntryKey$V@@0 |elements#0@@28|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@28|) |slot#0@@34|)))) :qid |unknown.0:0| :skolemid |1327| :pattern ( (|MutableMapModel.__default.FilledWithEntryKey#requires| MutableMapModel._default.FilledWithEntryKey$V@@0 |elements#0@@28| |slot#0@@34| |key#0@@12|)) )))
(assert  (=> (<= 30 $FunctionContextHeight) (forall ((MutableMapModel._default.FilledWithEntryKey$V@@1 T@U) (|elements#0@@29| T@U) (|slot#0@@35| T@U) (|key#0@@13| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithEntryKey$V@@1) TyType) (= (type |elements#0@@29|) (SeqType BoxType))) (= (type |slot#0@@35|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithEntryKey#canCall| MutableMapModel._default.FilledWithEntryKey$V@@1 |elements#0@@29| |slot#0@@35| |key#0@@13|) (and (not (= 30 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@29| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithEntryKey$V@@1))) ($Is |slot#0@@35| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |key#0@@13|) (< |key#0@@13| 18446744073709551616))) (and (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithEntryKey$V@@1 |elements#0@@29|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@29|) |slot#0@@35|)))))) (and (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.FilledWithEntryKey$V@@1 |elements#0@@29| |slot#0@@35|) (=> (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithEntryKey$V@@1 |elements#0@@29| |slot#0@@35|) (MutableMapModel.Slot.Slot_q |slot#0@@35|))) (= (MutableMapModel.__default.FilledWithEntryKey MutableMapModel._default.FilledWithEntryKey$V@@1 |elements#0@@29| |slot#0@@35| |key#0@@13|)  (and (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithEntryKey$V@@1 |elements#0@@29| |slot#0@@35|) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@29| (MutableMapModel.Slot.slot |slot#0@@35|)))) |key#0@@13|))))) :qid |unknown.0:0| :skolemid |1328| :pattern ( (MutableMapModel.__default.FilledWithEntryKey MutableMapModel._default.FilledWithEntryKey$V@@1 |elements#0@@29| |slot#0@@35| |key#0@@13|)) ))))
(assert  (=> (<= 30 $FunctionContextHeight) (forall ((MutableMapModel._default.FilledWithEntryKey$V@@2 T@U) (|elements#0@@30| T@U) (|slot#0@@36| T@U) (|key#0@@14| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FilledWithEntryKey$V@@2) TyType) (= (type |elements#0@@30|) (SeqType BoxType))) (= (type |slot#0@@36|) DatatypeTypeType)) (or (|MutableMapModel.__default.FilledWithEntryKey#canCall| MutableMapModel._default.FilledWithEntryKey$V@@2 (Lit |elements#0@@30|) (Lit |slot#0@@36|) (LitInt |key#0@@14|)) (and (not (= 30 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@30| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.FilledWithEntryKey$V@@2))) ($Is |slot#0@@36| Tclass.MutableMapModel.Slot)) (and (<= (LitInt 0) |key#0@@14|) (< |key#0@@14| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidElements MutableMapModel._default.FilledWithEntryKey$V@@2 (Lit |elements#0@@30|))))) (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@30|)) (Lit |slot#0@@36|))))))) (and (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.FilledWithEntryKey$V@@2 (Lit |elements#0@@30|) (Lit |slot#0@@36|)) (=> (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithEntryKey$V@@2 (Lit |elements#0@@30|) (Lit |slot#0@@36|))))) (MutableMapModel.Slot.Slot_q (Lit |slot#0@@36|)))) (= (MutableMapModel.__default.FilledWithEntryKey MutableMapModel._default.FilledWithEntryKey$V@@2 (Lit |elements#0@@30|) (Lit |slot#0@@36|) (LitInt |key#0@@14|))  (and (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.FilledWithEntryKey$V@@2 (Lit |elements#0@@30|) (Lit |slot#0@@36|)) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@30|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@36|)))))) (LitInt |key#0@@14|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1329| :pattern ( (MutableMapModel.__default.FilledWithEntryKey MutableMapModel._default.FilledWithEntryKey$V@@2 (Lit |elements#0@@30|) (Lit |slot#0@@36|) (LitInt |key#0@@14|))) ))))
(assert  (=> (<= 31 $FunctionContextHeight) (forall ((MutableMapModel._default.SlotExplainsKey$V T@U) (|elements#0@@31| T@U) (|skips#0| Int) (|key#0@@15| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.SlotExplainsKey$V) TyType) (= (type |elements#0@@31|) (SeqType BoxType))) (or (|MutableMapModel.__default.SlotExplainsKey#canCall| MutableMapModel._default.SlotExplainsKey$V |elements#0@@31| |skips#0| |key#0@@15|) (and (not (= 31 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@31| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotExplainsKey$V))) (<= (LitInt 0) |skips#0|)) (and (<= (LitInt 0) |key#0@@15|) (< |key#0@@15| 18446744073709551616))) (MutableMapModel.__default.ValidElements MutableMapModel._default.SlotExplainsKey$V |elements#0@@31|))))) true) :qid |unknown.0:0| :skolemid |1333| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SlotExplainsKey$V |elements#0@@31| |skips#0| |key#0@@15|)) ))))
(assert (forall ((MutableMapModel._default.SlotExplainsKey$V@@0 T@U) (|elements#0@@32| T@U) (|skips#0@@0| Int) (|key#0@@16| Int) ) (!  (=> (and (= (type MutableMapModel._default.SlotExplainsKey$V@@0) TyType) (= (type |elements#0@@32|) (SeqType BoxType))) (=> (and (and ($Is |elements#0@@32| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotExplainsKey$V@@0))) (<= (LitInt 0) |skips#0@@0|)) (and (<= (LitInt 0) |key#0@@16|) (< |key#0@@16| 18446744073709551616))) (= (|MutableMapModel.__default.SlotExplainsKey#requires| MutableMapModel._default.SlotExplainsKey$V@@0 |elements#0@@32| |skips#0@@0| |key#0@@16|) (MutableMapModel.__default.ValidElements MutableMapModel._default.SlotExplainsKey$V@@0 |elements#0@@32|)))) :qid |unknown.0:0| :skolemid |1334| :pattern ( (|MutableMapModel.__default.SlotExplainsKey#requires| MutableMapModel._default.SlotExplainsKey$V@@0 |elements#0@@32| |skips#0@@0| |key#0@@16|)) )))
(assert  (=> (<= 31 $FunctionContextHeight) (forall ((MutableMapModel._default.SlotExplainsKey$V@@1 T@U) (|elements#0@@33| T@U) (|skips#0@@1| Int) (|key#0@@17| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.SlotExplainsKey$V@@1) TyType) (= (type |elements#0@@33|) (SeqType BoxType))) (or (|MutableMapModel.__default.SlotExplainsKey#canCall| MutableMapModel._default.SlotExplainsKey$V@@1 |elements#0@@33| |skips#0@@1| |key#0@@17|) (and (not (= 31 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@33| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotExplainsKey$V@@1))) (<= (LitInt 0) |skips#0@@1|)) (and (<= (LitInt 0) |key#0@@17|) (< |key#0@@17| 18446744073709551616))) (MutableMapModel.__default.ValidElements MutableMapModel._default.SlotExplainsKey$V@@1 |elements#0@@33|))))) (and (and (and (|MutableMapModel.__default.SlotForKey#canCall| (|Seq#Length| |elements#0@@33|) |key#0@@17|) (|MutableMapModel.__default.KthSlotSuccessor#canCall| (|Seq#Length| |elements#0@@33|) (MutableMapModel.__default.SlotForKey (|Seq#Length| |elements#0@@33|) |key#0@@17|) |skips#0@@1|)) (let ((|foundSlot#0| (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@33|) (MutableMapModel.__default.SlotForKey (|Seq#Length| |elements#0@@33|) |key#0@@17|) |skips#0@@1|))) (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@33|) |foundSlot#0|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@33|) |foundSlot#0|) (and (and (|MutableMapModel.__default.SlotForKey#canCall| (|Seq#Length| |elements#0@@33|) |key#0@@17|) (|MutableMapModel.__default.FilledWithOtherKeys#canCall| MutableMapModel._default.SlotExplainsKey$V@@1 |elements#0@@33| (MutableMapModel.__default.SlotForKey (|Seq#Length| |elements#0@@33|) |key#0@@17|) |skips#0@@1| |key#0@@17|)) (=> (MutableMapModel.__default.FilledWithOtherKeys MutableMapModel._default.SlotExplainsKey$V@@1 |elements#0@@33| (MutableMapModel.__default.SlotForKey (|Seq#Length| |elements#0@@33|) |key#0@@17|) |skips#0@@1| |key#0@@17|) (|MutableMapModel.__default.FilledWithKey#canCall| MutableMapModel._default.SlotExplainsKey$V@@1 |elements#0@@33| |foundSlot#0| |key#0@@17|))))))) (= (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SlotExplainsKey$V@@1 |elements#0@@33| |skips#0@@1| |key#0@@17|) (let ((|foundSlot#0@@0| (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| |elements#0@@33|) (MutableMapModel.__default.SlotForKey (|Seq#Length| |elements#0@@33|) |key#0@@17|) |skips#0@@1|))) (and (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@33|) |foundSlot#0@@0|) (MutableMapModel.__default.FilledWithOtherKeys MutableMapModel._default.SlotExplainsKey$V@@1 |elements#0@@33| (MutableMapModel.__default.SlotForKey (|Seq#Length| |elements#0@@33|) |key#0@@17|) |skips#0@@1| |key#0@@17|)) (MutableMapModel.__default.FilledWithKey MutableMapModel._default.SlotExplainsKey$V@@1 |elements#0@@33| |foundSlot#0@@0| |key#0@@17|)))))) :qid |unknown.0:0| :skolemid |1335| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SlotExplainsKey$V@@1 |elements#0@@33| |skips#0@@1| |key#0@@17|)) ))))
(assert  (=> (<= 31 $FunctionContextHeight) (forall ((MutableMapModel._default.SlotExplainsKey$V@@2 T@U) (|elements#0@@34| T@U) (|skips#0@@2| Int) (|key#0@@18| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.SlotExplainsKey$V@@2) TyType) (= (type |elements#0@@34|) (SeqType BoxType))) (or (|MutableMapModel.__default.SlotExplainsKey#canCall| MutableMapModel._default.SlotExplainsKey$V@@2 (Lit |elements#0@@34|) (LitInt |skips#0@@2|) (LitInt |key#0@@18|)) (and (not (= 31 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@34| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SlotExplainsKey$V@@2))) (<= (LitInt 0) |skips#0@@2|)) (and (<= (LitInt 0) |key#0@@18|) (< |key#0@@18| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidElements MutableMapModel._default.SlotExplainsKey$V@@2 (Lit |elements#0@@34|))))))))) (and (and (and (|MutableMapModel.__default.SlotForKey#canCall| (|Seq#Length| (Lit |elements#0@@34|)) (LitInt |key#0@@18|)) (|MutableMapModel.__default.KthSlotSuccessor#canCall| (|Seq#Length| (Lit |elements#0@@34|)) (MutableMapModel.__default.SlotForKey (|Seq#Length| (Lit |elements#0@@34|)) (LitInt |key#0@@18|)) (LitInt |skips#0@@2|))) (let ((|foundSlot#1| (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| (Lit |elements#0@@34|)) (MutableMapModel.__default.SlotForKey (|Seq#Length| (Lit |elements#0@@34|)) (LitInt |key#0@@18|)) (LitInt |skips#0@@2|)))) (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@34|)) |foundSlot#1|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@34|)) |foundSlot#1|) (and (and (|MutableMapModel.__default.SlotForKey#canCall| (|Seq#Length| (Lit |elements#0@@34|)) (LitInt |key#0@@18|)) (|MutableMapModel.__default.FilledWithOtherKeys#canCall| MutableMapModel._default.SlotExplainsKey$V@@2 (Lit |elements#0@@34|) (MutableMapModel.__default.SlotForKey (|Seq#Length| (Lit |elements#0@@34|)) (LitInt |key#0@@18|)) (LitInt |skips#0@@2|) (LitInt |key#0@@18|))) (=> (MutableMapModel.__default.FilledWithOtherKeys MutableMapModel._default.SlotExplainsKey$V@@2 (Lit |elements#0@@34|) (MutableMapModel.__default.SlotForKey (|Seq#Length| (Lit |elements#0@@34|)) (LitInt |key#0@@18|)) (LitInt |skips#0@@2|) (LitInt |key#0@@18|)) (|MutableMapModel.__default.FilledWithKey#canCall| MutableMapModel._default.SlotExplainsKey$V@@2 (Lit |elements#0@@34|) |foundSlot#1| (LitInt |key#0@@18|)))))))) (= (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SlotExplainsKey$V@@2 (Lit |elements#0@@34|) (LitInt |skips#0@@2|) (LitInt |key#0@@18|)) (let ((|foundSlot#1@@0| (MutableMapModel.__default.KthSlotSuccessor ($LS $LZ) (|Seq#Length| (Lit |elements#0@@34|)) (MutableMapModel.__default.SlotForKey (|Seq#Length| (Lit |elements#0@@34|)) (LitInt |key#0@@18|)) (LitInt |skips#0@@2|)))) (and (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@34|)) |foundSlot#1@@0|) (MutableMapModel.__default.FilledWithOtherKeys MutableMapModel._default.SlotExplainsKey$V@@2 (Lit |elements#0@@34|) (MutableMapModel.__default.SlotForKey (|Seq#Length| (Lit |elements#0@@34|)) (LitInt |key#0@@18|)) (LitInt |skips#0@@2|) (LitInt |key#0@@18|))) (MutableMapModel.__default.FilledWithKey MutableMapModel._default.SlotExplainsKey$V@@2 (Lit |elements#0@@34|) |foundSlot#1@@0| (LitInt |key#0@@18|))))))) :qid |unknown.0:0| :weight 3 :skolemid |1336| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SlotExplainsKey$V@@2 (Lit |elements#0@@34|) (LitInt |skips#0@@2|) (LitInt |key#0@@18|))) ))))
(assert  (=> (<= 32 $FunctionContextHeight) (forall ((MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V T@U) (|elements#0@@35| T@U) (|slot1#0| T@U) (|slot2#0| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V) TyType) (= (type |elements#0@@35|) (SeqType BoxType))) (= (type |slot1#0|) DatatypeTypeType)) (= (type |slot2#0|) DatatypeTypeType)) (or (|MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V |elements#0@@35| |slot1#0| |slot2#0|) (and (not (= 32 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@35| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V))) ($Is |slot1#0| Tclass.MutableMapModel.Slot)) ($Is |slot2#0| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidElements MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V |elements#0@@35|))))) true) :qid |unknown.0:0| :skolemid |1344| :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V |elements#0@@35| |slot1#0| |slot2#0|)) ))))
(assert (forall ((MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@0 T@U) (|elements#0@@36| T@U) (|slot1#0@@0| T@U) (|slot2#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@0) TyType) (= (type |elements#0@@36|) (SeqType BoxType))) (= (type |slot1#0@@0|) DatatypeTypeType)) (= (type |slot2#0@@0|) DatatypeTypeType)) (and (and ($Is |elements#0@@36| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@0))) ($Is |slot1#0@@0| Tclass.MutableMapModel.Slot)) ($Is |slot2#0@@0| Tclass.MutableMapModel.Slot))) (= (|MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey#requires| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@0 |elements#0@@36| |slot1#0@@0| |slot2#0@@0|) (MutableMapModel.__default.ValidElements MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@0 |elements#0@@36|))) :qid |unknown.0:0| :skolemid |1345| :pattern ( (|MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey#requires| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@0 |elements#0@@36| |slot1#0@@0| |slot2#0@@0|)) )))
(assert  (=> (<= 32 $FunctionContextHeight) (forall ((MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 T@U) (|elements#0@@37| T@U) (|slot1#0@@1| T@U) (|slot2#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1) TyType) (= (type |elements#0@@37|) (SeqType BoxType))) (= (type |slot1#0@@1|) DatatypeTypeType)) (= (type |slot2#0@@1|) DatatypeTypeType)) (or (|MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1| |slot2#0@@1|) (and (not (= 32 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@37| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1))) ($Is |slot1#0@@1| Tclass.MutableMapModel.Slot)) ($Is |slot2#0@@1| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidElements MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37|))))) (and (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@37|) |slot1#0@@1|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@37|) |slot1#0@@1|) (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@37|) |slot2#0@@1|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@37|) |slot2#0@@1|) (and (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1|) (=> (not (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1|)) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1|))) (=> (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1|)) (and (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot2#0@@1|) (=> (not (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot2#0@@1|)) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot2#0@@1|))) (=> (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot2#0@@1|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot2#0@@1|)) (and (MutableMapModel.Slot.Slot_q |slot1#0@@1|) (MutableMapModel.Slot.Slot_q |slot2#0@@1|)))))))))) (= (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1| |slot2#0@@1|)  (and (and (and (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@37|) |slot1#0@@1|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@37|) |slot2#0@@1|)) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1|))) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot2#0@@1|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot2#0@@1|))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@37| (MutableMapModel.Slot.slot |slot1#0@@1|)))) (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@37| (MutableMapModel.Slot.slot |slot2#0@@1|))))))))) :qid |unknown.0:0| :skolemid |1346| :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@1 |elements#0@@37| |slot1#0@@1| |slot2#0@@1|)) ))))
(assert  (=> (<= 32 $FunctionContextHeight) (forall ((MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 T@U) (|elements#0@@38| T@U) (|slot1#0@@2| T@U) (|slot2#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2) TyType) (= (type |elements#0@@38|) (SeqType BoxType))) (= (type |slot1#0@@2|) DatatypeTypeType)) (= (type |slot2#0@@2|) DatatypeTypeType)) (or (|MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|) (Lit |slot2#0@@2|)) (and (not (= 32 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@38| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2))) ($Is |slot1#0@@2| Tclass.MutableMapModel.Slot)) ($Is |slot2#0@@2| Tclass.MutableMapModel.Slot)) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidElements MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|))))))))) (and (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@38|)) (Lit |slot1#0@@2|)) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@38|)) (Lit |slot1#0@@2|)) (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@38|)) (Lit |slot2#0@@2|)) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@38|)) (Lit |slot2#0@@2|)) (and (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|)) (=> (not (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|)))))) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U  (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|)) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|)))))) (and (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot2#0@@2|)) (=> (not (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot2#0@@2|)))))) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot2#0@@2|)))) (=> (U_2_bool (Lit (bool_2_U  (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot2#0@@2|)) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot2#0@@2|)))))) (and (MutableMapModel.Slot.Slot_q (Lit |slot1#0@@2|)) (MutableMapModel.Slot.Slot_q (Lit |slot2#0@@2|))))))))))) (= (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|) (Lit |slot2#0@@2|))  (and (and (and (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@38|)) (Lit |slot1#0@@2|)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@38|)) (Lit |slot2#0@@2|))) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|)) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|)))) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot2#0@@2|)) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot2#0@@2|)))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@38|) (LitInt (MutableMapModel.Slot.slot (Lit |slot1#0@@2|)))))) (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@38|) (LitInt (MutableMapModel.Slot.slot (Lit |slot2#0@@2|))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1347| :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.TwoNonEmptyValidSlotsWithSameKey$V@@2 (Lit |elements#0@@38|) (Lit |slot1#0@@2|) (Lit |slot2#0@@2|))) ))))
(assert  (=> (<= 33 $FunctionContextHeight) (forall ((|elementsLength#0@@17| Int) (|slot1#0@@3| T@U) (|slot2#0@@3| T@U) ) (!  (=> (and (and (= (type |slot1#0@@3|) DatatypeTypeType) (= (type |slot2#0@@3|) DatatypeTypeType)) (or (|MutableMapModel.__default.SameSlot#canCall| |elementsLength#0@@17| |slot1#0@@3| |slot2#0@@3|) (and (not (= 33 $FunctionContextHeight)) (and (and (and (<= (LitInt 0) |elementsLength#0@@17|) ($Is |slot1#0@@3| Tclass.MutableMapModel.Slot)) ($Is |slot2#0@@3| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot |elementsLength#0@@17| |slot1#0@@3|) (MutableMapModel.__default.ValidSlot |elementsLength#0@@17| |slot2#0@@3|)))))) true) :qid |MutableMapModelidfy.232:22| :skolemid |1355| :pattern ( (MutableMapModel.__default.SameSlot |elementsLength#0@@17| |slot1#0@@3| |slot2#0@@3|)) ))))
(assert (forall ((|elementsLength#0@@18| Int) (|slot1#0@@4| T@U) (|slot2#0@@4| T@U) ) (!  (=> (and (= (type |slot1#0@@4|) DatatypeTypeType) (= (type |slot2#0@@4|) DatatypeTypeType)) (=> (and (and (<= (LitInt 0) |elementsLength#0@@18|) ($Is |slot1#0@@4| Tclass.MutableMapModel.Slot)) ($Is |slot2#0@@4| Tclass.MutableMapModel.Slot)) (= (|MutableMapModel.__default.SameSlot#requires| |elementsLength#0@@18| |slot1#0@@4| |slot2#0@@4|)  (and (MutableMapModel.__default.ValidSlot |elementsLength#0@@18| |slot1#0@@4|) (MutableMapModel.__default.ValidSlot |elementsLength#0@@18| |slot2#0@@4|))))) :qid |MutableMapModelidfy.232:22| :skolemid |1356| :pattern ( (|MutableMapModel.__default.SameSlot#requires| |elementsLength#0@@18| |slot1#0@@4| |slot2#0@@4|)) )))
(assert  (=> (<= 33 $FunctionContextHeight) (forall ((|elementsLength#0@@19| Int) (|slot1#0@@5| T@U) (|slot2#0@@5| T@U) ) (!  (=> (and (and (= (type |slot1#0@@5|) DatatypeTypeType) (= (type |slot2#0@@5|) DatatypeTypeType)) (or (|MutableMapModel.__default.SameSlot#canCall| |elementsLength#0@@19| |slot1#0@@5| |slot2#0@@5|) (and (not (= 33 $FunctionContextHeight)) (and (and (and (<= (LitInt 0) |elementsLength#0@@19|) ($Is |slot1#0@@5| Tclass.MutableMapModel.Slot)) ($Is |slot2#0@@5| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot |elementsLength#0@@19| |slot1#0@@5|) (MutableMapModel.__default.ValidSlot |elementsLength#0@@19| |slot2#0@@5|)))))) (and (and (|$IsA#MutableMapModel.Slot| |slot1#0@@5|) (|$IsA#MutableMapModel.Slot| |slot2#0@@5|)) (= (MutableMapModel.__default.SameSlot |elementsLength#0@@19| |slot1#0@@5| |slot2#0@@5|) (|MutableMapModel.Slot#Equal| |slot1#0@@5| |slot2#0@@5|)))) :qid |MutableMapModelidfy.232:22| :skolemid |1357| :pattern ( (MutableMapModel.__default.SameSlot |elementsLength#0@@19| |slot1#0@@5| |slot2#0@@5|)) ))))
(assert  (=> (<= 33 $FunctionContextHeight) (forall ((|elementsLength#0@@20| Int) (|slot1#0@@6| T@U) (|slot2#0@@6| T@U) ) (!  (=> (and (and (= (type |slot1#0@@6|) DatatypeTypeType) (= (type |slot2#0@@6|) DatatypeTypeType)) (or (|MutableMapModel.__default.SameSlot#canCall| (LitInt |elementsLength#0@@20|) (Lit |slot1#0@@6|) (Lit |slot2#0@@6|)) (and (not (= 33 $FunctionContextHeight)) (and (and (and (<= (LitInt 0) |elementsLength#0@@20|) ($Is |slot1#0@@6| Tclass.MutableMapModel.Slot)) ($Is |slot2#0@@6| Tclass.MutableMapModel.Slot)) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidSlot (LitInt |elementsLength#0@@20|) (Lit |slot1#0@@6|))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidSlot (LitInt |elementsLength#0@@20|) (Lit |slot2#0@@6|)))))))))) (and (and (|$IsA#MutableMapModel.Slot| (Lit |slot1#0@@6|)) (|$IsA#MutableMapModel.Slot| (Lit |slot2#0@@6|))) (= (MutableMapModel.__default.SameSlot (LitInt |elementsLength#0@@20|) (Lit |slot1#0@@6|) (Lit |slot2#0@@6|)) (|MutableMapModel.Slot#Equal| |slot1#0@@6| |slot2#0@@6|)))) :qid |MutableMapModelidfy.232:22| :weight 3 :skolemid |1358| :pattern ( (MutableMapModel.__default.SameSlot (LitInt |elementsLength#0@@20|) (Lit |slot1#0@@6|) (Lit |slot2#0@@6|))) ))))
(assert  (=> (<= 34 $FunctionContextHeight) (forall ((MutableMapModel._default.CantEquivocateStorageKey$V T@U) (|elements#0@@39| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.CantEquivocateStorageKey$V) TyType) (= (type |elements#0@@39|) (SeqType BoxType))) (or (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.CantEquivocateStorageKey$V |elements#0@@39|) (and (not (= 34 $FunctionContextHeight)) (and ($Is |elements#0@@39| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CantEquivocateStorageKey$V))) (MutableMapModel.__default.ValidElements MutableMapModel._default.CantEquivocateStorageKey$V |elements#0@@39|))))) true) :qid |unknown.0:0| :skolemid |1361| :pattern ( (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.CantEquivocateStorageKey$V |elements#0@@39|)) ))))
(assert (forall ((MutableMapModel._default.CantEquivocateStorageKey$V@@0 T@U) (|elements#0@@40| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.CantEquivocateStorageKey$V@@0) TyType) (= (type |elements#0@@40|) (SeqType BoxType))) ($Is |elements#0@@40| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CantEquivocateStorageKey$V@@0)))) (= (|MutableMapModel.__default.CantEquivocateStorageKey#requires| MutableMapModel._default.CantEquivocateStorageKey$V@@0 |elements#0@@40|) (MutableMapModel.__default.ValidElements MutableMapModel._default.CantEquivocateStorageKey$V@@0 |elements#0@@40|))) :qid |unknown.0:0| :skolemid |1362| :pattern ( (|MutableMapModel.__default.CantEquivocateStorageKey#requires| MutableMapModel._default.CantEquivocateStorageKey$V@@0 |elements#0@@40|)) )))
(assert  (=> (<= 34 $FunctionContextHeight) (forall ((MutableMapModel._default.CantEquivocateStorageKey$V@@1 T@U) (|elements#0@@41| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.CantEquivocateStorageKey$V@@1) TyType) (= (type |elements#0@@41|) (SeqType BoxType))) (or (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.CantEquivocateStorageKey$V@@1 |elements#0@@41|) (and (not (= 34 $FunctionContextHeight)) (and ($Is |elements#0@@41| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CantEquivocateStorageKey$V@@1))) (MutableMapModel.__default.ValidElements MutableMapModel._default.CantEquivocateStorageKey$V@@1 |elements#0@@41|))))) (and (forall ((|slot1#0@@7| T@U) (|slot2#0@@7| T@U) ) (!  (=> (and (and (= (type |slot1#0@@7|) DatatypeTypeType) (= (type |slot2#0@@7|) DatatypeTypeType)) (and ($Is |slot1#0@@7| Tclass.MutableMapModel.Slot) ($Is |slot2#0@@7| Tclass.MutableMapModel.Slot))) (and (|MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| MutableMapModel._default.CantEquivocateStorageKey$V@@1 |elements#0@@41| |slot1#0@@7| |slot2#0@@7|) (=> (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.CantEquivocateStorageKey$V@@1 |elements#0@@41| |slot1#0@@7| |slot2#0@@7|) (|MutableMapModel.__default.SameSlot#canCall| (|Seq#Length| |elements#0@@41|) |slot1#0@@7| |slot2#0@@7|)))) :qid |MutableMapModelidfy.242:12| :skolemid |1364| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| |elements#0@@41|) |slot1#0@@7| |slot2#0@@7|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.CantEquivocateStorageKey$V@@1 |elements#0@@41| |slot1#0@@7| |slot2#0@@7|)) )) (= (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.CantEquivocateStorageKey$V@@1 |elements#0@@41|) (forall ((|slot1#0@@8| T@U) (|slot2#0@@8| T@U) ) (!  (=> (and (and (and (= (type |slot1#0@@8|) DatatypeTypeType) (= (type |slot2#0@@8|) DatatypeTypeType)) (and ($Is |slot1#0@@8| Tclass.MutableMapModel.Slot) ($Is |slot2#0@@8| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.CantEquivocateStorageKey$V@@1 |elements#0@@41| |slot1#0@@8| |slot2#0@@8|)) (MutableMapModel.__default.SameSlot (|Seq#Length| |elements#0@@41|) |slot1#0@@8| |slot2#0@@8|)) :qid |MutableMapModelidfy.242:12| :skolemid |1363| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| |elements#0@@41|) |slot1#0@@8| |slot2#0@@8|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.CantEquivocateStorageKey$V@@1 |elements#0@@41| |slot1#0@@8| |slot2#0@@8|)) ))))) :qid |unknown.0:0| :skolemid |1365| :pattern ( (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.CantEquivocateStorageKey$V@@1 |elements#0@@41|)) ))))
(assert  (=> (<= 34 $FunctionContextHeight) (forall ((MutableMapModel._default.CantEquivocateStorageKey$V@@2 T@U) (|elements#0@@42| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.CantEquivocateStorageKey$V@@2) TyType) (= (type |elements#0@@42|) (SeqType BoxType))) (or (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.CantEquivocateStorageKey$V@@2 (Lit |elements#0@@42|)) (and (not (= 34 $FunctionContextHeight)) (and ($Is |elements#0@@42| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CantEquivocateStorageKey$V@@2))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidElements MutableMapModel._default.CantEquivocateStorageKey$V@@2 (Lit |elements#0@@42|))))))))) (and (forall ((|slot1#1| T@U) (|slot2#1| T@U) ) (!  (=> (and (and (= (type |slot1#1|) DatatypeTypeType) (= (type |slot2#1|) DatatypeTypeType)) (and ($Is |slot1#1| Tclass.MutableMapModel.Slot) ($Is |slot2#1| Tclass.MutableMapModel.Slot))) (and (|MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey#canCall| MutableMapModel._default.CantEquivocateStorageKey$V@@2 (Lit |elements#0@@42|) |slot1#1| |slot2#1|) (=> (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.CantEquivocateStorageKey$V@@2 (Lit |elements#0@@42|) |slot1#1| |slot2#1|) (|MutableMapModel.__default.SameSlot#canCall| (|Seq#Length| (Lit |elements#0@@42|)) |slot1#1| |slot2#1|)))) :qid |MutableMapModelidfy.242:12| :skolemid |1367| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| |elements#0@@42|) |slot1#1| |slot2#1|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.CantEquivocateStorageKey$V@@2 |elements#0@@42| |slot1#1| |slot2#1|)) )) (= (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.CantEquivocateStorageKey$V@@2 (Lit |elements#0@@42|)) (forall ((|slot1#1@@0| T@U) (|slot2#1@@0| T@U) ) (!  (=> (and (and (and (= (type |slot1#1@@0|) DatatypeTypeType) (= (type |slot2#1@@0|) DatatypeTypeType)) (and ($Is |slot1#1@@0| Tclass.MutableMapModel.Slot) ($Is |slot2#1@@0| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.CantEquivocateStorageKey$V@@2 (Lit |elements#0@@42|) |slot1#1@@0| |slot2#1@@0|)) (MutableMapModel.__default.SameSlot (|Seq#Length| (Lit |elements#0@@42|)) |slot1#1@@0| |slot2#1@@0|)) :qid |MutableMapModelidfy.242:12| :skolemid |1366| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| |elements#0@@42|) |slot1#1@@0| |slot2#1@@0|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.CantEquivocateStorageKey$V@@2 |elements#0@@42| |slot1#1@@0| |slot2#1@@0|)) ))))) :qid |unknown.0:0| :weight 3 :skolemid |1368| :pattern ( (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.CantEquivocateStorageKey$V@@2 (Lit |elements#0@@42|))) ))))
(assert  (=> (<= 35 $FunctionContextHeight) (forall ((MutableMapModel._default.KeyInSlotIsInContents$V T@U) (|elements#0@@43| T@U) (|contents#0| T@U) (|slot#0@@37| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.KeyInSlotIsInContents$V) TyType) (= (type |elements#0@@43|) (SeqType BoxType))) (= (type |contents#0|) (MapType BoxType BoxType))) (= (type |slot#0@@37|) DatatypeTypeType)) (or (|MutableMapModel.__default.KeyInSlotIsInContents#canCall| MutableMapModel._default.KeyInSlotIsInContents$V |elements#0@@43| |contents#0| |slot#0@@37|) (and (not (= 35 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@43| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.KeyInSlotIsInContents$V))) ($Is |contents#0| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.KeyInSlotIsInContents$V)))) ($Is |slot#0@@37| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@43|) |slot#0@@37|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.KeyInSlotIsInContents$V |elements#0@@43| |slot#0@@37|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.KeyInSlotIsInContents$V |elements#0@@43| |slot#0@@37|))))))) true) :qid |unknown.0:0| :skolemid |1374| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.KeyInSlotIsInContents$V |elements#0@@43| |contents#0| |slot#0@@37|)) ))))
(assert (forall ((MutableMapModel._default.KeyInSlotIsInContents$V@@0 T@U) (|elements#0@@44| T@U) (|contents#0@@0| T@U) (|slot#0@@38| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.KeyInSlotIsInContents$V@@0) TyType) (= (type |elements#0@@44|) (SeqType BoxType))) (= (type |contents#0@@0|) (MapType BoxType BoxType))) (= (type |slot#0@@38|) DatatypeTypeType)) (and (and ($Is |elements#0@@44| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.KeyInSlotIsInContents$V@@0))) ($Is |contents#0@@0| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.KeyInSlotIsInContents$V@@0)))) ($Is |slot#0@@38| Tclass.MutableMapModel.Slot))) (= (|MutableMapModel.__default.KeyInSlotIsInContents#requires| MutableMapModel._default.KeyInSlotIsInContents$V@@0 |elements#0@@44| |contents#0@@0| |slot#0@@38|)  (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@44|) |slot#0@@38|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.KeyInSlotIsInContents$V@@0 |elements#0@@44| |slot#0@@38|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.KeyInSlotIsInContents$V@@0 |elements#0@@44| |slot#0@@38|))))) :qid |unknown.0:0| :skolemid |1375| :pattern ( (|MutableMapModel.__default.KeyInSlotIsInContents#requires| MutableMapModel._default.KeyInSlotIsInContents$V@@0 |elements#0@@44| |contents#0@@0| |slot#0@@38|)) )))
(assert  (=> (<= 35 $FunctionContextHeight) (forall ((MutableMapModel._default.KeyInSlotIsInContents$V@@1 T@U) (|elements#0@@45| T@U) (|contents#0@@1| T@U) (|slot#0@@39| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.KeyInSlotIsInContents$V@@1) TyType) (= (type |elements#0@@45|) (SeqType BoxType))) (= (type |contents#0@@1|) (MapType BoxType BoxType))) (= (type |slot#0@@39|) DatatypeTypeType)) (or (|MutableMapModel.__default.KeyInSlotIsInContents#canCall| MutableMapModel._default.KeyInSlotIsInContents$V@@1 |elements#0@@45| |contents#0@@1| |slot#0@@39|) (and (not (= 35 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@45| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.KeyInSlotIsInContents$V@@1))) ($Is |contents#0@@1| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.KeyInSlotIsInContents$V@@1)))) ($Is |slot#0@@39| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@45|) |slot#0@@39|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.KeyInSlotIsInContents$V@@1 |elements#0@@45| |slot#0@@39|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.KeyInSlotIsInContents$V@@1 |elements#0@@45| |slot#0@@39|))))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (MutableMapModel.Slot.Slot_q |slot#0@@39|)) (= (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.KeyInSlotIsInContents$V@@1 |elements#0@@45| |contents#0@@1| |slot#0@@39|)  (and true (let ((|key#0@@19| (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@45| (MutableMapModel.Slot.slot |slot#0@@39|)))))) (and true (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@1|) ($Box (int_2_U |key#0@@19|)))))))))) :qid |unknown.0:0| :skolemid |1376| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.KeyInSlotIsInContents$V@@1 |elements#0@@45| |contents#0@@1| |slot#0@@39|)) ))))
(assert  (=> (<= 35 $FunctionContextHeight) (forall ((MutableMapModel._default.KeyInSlotIsInContents$V@@2 T@U) (|elements#0@@46| T@U) (|contents#0@@2| T@U) (|slot#0@@40| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.KeyInSlotIsInContents$V@@2) TyType) (= (type |elements#0@@46|) (SeqType BoxType))) (= (type |contents#0@@2|) (MapType BoxType BoxType))) (= (type |slot#0@@40|) DatatypeTypeType)) (or (|MutableMapModel.__default.KeyInSlotIsInContents#canCall| MutableMapModel._default.KeyInSlotIsInContents$V@@2 (Lit |elements#0@@46|) (Lit |contents#0@@2|) (Lit |slot#0@@40|)) (and (not (= 35 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@46| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.KeyInSlotIsInContents$V@@2))) ($Is |contents#0@@2| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.KeyInSlotIsInContents$V@@2)))) ($Is |slot#0@@40| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@46|)) (Lit |slot#0@@40|)) (U_2_bool (Lit (bool_2_U  (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.KeyInSlotIsInContents$V@@2 (Lit |elements#0@@46|) (Lit |slot#0@@40|)) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.KeyInSlotIsInContents$V@@2 (Lit |elements#0@@46|) (Lit |slot#0@@40|))))))))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (MutableMapModel.Slot.Slot_q (Lit |slot#0@@40|))) (= (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.KeyInSlotIsInContents$V@@2 (Lit |elements#0@@46|) (Lit |contents#0@@2|) (Lit |slot#0@@40|))  (and true (let ((|key#1| (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@46|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@40|)))))))) (and true (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@2|) ($Box (int_2_U |key#1|)))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1377| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.KeyInSlotIsInContents$V@@2 (Lit |elements#0@@46|) (Lit |contents#0@@2|) (Lit |slot#0@@40|))) ))))
(assert  (=> (<= 36 $FunctionContextHeight) (forall ((MutableMapModel._default.SeqMatchesContentKeys$V T@U) (|elements#0@@47| T@U) (|contents#0@@3| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SeqMatchesContentKeys$V) TyType) (= (type |elements#0@@47|) (SeqType BoxType))) (= (type |contents#0@@3|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.SeqMatchesContentKeys$V |elements#0@@47| |contents#0@@3|) (and (not (= 36 $FunctionContextHeight)) (and (and ($Is |elements#0@@47| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SeqMatchesContentKeys$V))) ($Is |contents#0@@3| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.SeqMatchesContentKeys$V)))) (MutableMapModel.__default.ValidElements MutableMapModel._default.SeqMatchesContentKeys$V |elements#0@@47|))))) true) :qid |unknown.0:0| :skolemid |1381| :pattern ( (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.SeqMatchesContentKeys$V |elements#0@@47| |contents#0@@3|)) ))))
(assert (forall ((MutableMapModel._default.SeqMatchesContentKeys$V@@0 T@U) (|elements#0@@48| T@U) (|contents#0@@4| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SeqMatchesContentKeys$V@@0) TyType) (= (type |elements#0@@48|) (SeqType BoxType))) (= (type |contents#0@@4|) (MapType BoxType BoxType))) (and ($Is |elements#0@@48| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SeqMatchesContentKeys$V@@0))) ($Is |contents#0@@4| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.SeqMatchesContentKeys$V@@0))))) (= (|MutableMapModel.__default.SeqMatchesContentKeys#requires| MutableMapModel._default.SeqMatchesContentKeys$V@@0 |elements#0@@48| |contents#0@@4|) (MutableMapModel.__default.ValidElements MutableMapModel._default.SeqMatchesContentKeys$V@@0 |elements#0@@48|))) :qid |unknown.0:0| :skolemid |1382| :pattern ( (|MutableMapModel.__default.SeqMatchesContentKeys#requires| MutableMapModel._default.SeqMatchesContentKeys$V@@0 |elements#0@@48| |contents#0@@4|)) )))
(assert  (=> (<= 36 $FunctionContextHeight) (forall ((MutableMapModel._default.SeqMatchesContentKeys$V@@1 T@U) (|elements#0@@49| T@U) (|contents#0@@5| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SeqMatchesContentKeys$V@@1) TyType) (= (type |elements#0@@49|) (SeqType BoxType))) (= (type |contents#0@@5|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |contents#0@@5|) (and (not (= 36 $FunctionContextHeight)) (and (and ($Is |elements#0@@49| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SeqMatchesContentKeys$V@@1))) ($Is |contents#0@@5| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.SeqMatchesContentKeys$V@@1)))) (MutableMapModel.__default.ValidElements MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49|))))) (and (and (forall ((|key#0@@20| T@U) ) (!  (=> (= (type |key#0@@20|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0@@20|)) (< (U_2_int |key#0@@20|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@5|) ($Box |key#0@@20|))) (forall ((|skips#0@@3| Int) ) (!  (=> (<= (LitInt 0) |skips#0@@3|) (|MutableMapModel.__default.SlotExplainsKey#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |skips#0@@3| (U_2_int |key#0@@20|))) :qid |MutableMapModelidfy.257:50| :skolemid |1386| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |skips#0@@3| (U_2_int |key#0@@20|))) ))))) :qid |MutableMapModelidfy.257:16| :skolemid |1387| :pattern ( (MapType0Select (|Map#Domain| |contents#0@@5|) ($Box |key#0@@20|))) )) (=> (forall ((|key#0@@21| Int) ) (!  (=> (and (<= (LitInt 0) |key#0@@21|) (< |key#0@@21| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@5|) ($Box (int_2_U |key#0@@21|)))) (exists ((|skips#0@@4| Int) ) (!  (and (<= (LitInt 0) |skips#0@@4|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |skips#0@@4| |key#0@@21|)) :qid |MutableMapModelidfy.257:50| :skolemid |1390| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |skips#0@@4| |key#0@@21|)) )))) :qid |MutableMapModelidfy.257:16| :skolemid |1391| :pattern ( (MapType0Select (|Map#Domain| |contents#0@@5|) ($Box (int_2_U |key#0@@21|)))) )) (and (forall ((|slot#0@@41| T@U) ) (!  (=> (and (= (type |slot#0@@41|) DatatypeTypeType) ($Is |slot#0@@41| Tclass.MutableMapModel.Slot)) (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@49|) |slot#0@@41|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@49|) |slot#0@@41|) (and (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@41|) (=> (not (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@41|)) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@41|))) (=> (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@41|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@41|)) (|MutableMapModel.__default.KeyInSlotIsInContents#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |contents#0@@5| |slot#0@@41|)))))) :qid |MutableMapModelidfy.258:16| :skolemid |1388| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |contents#0@@5| |slot#0@@41|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@41|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@41|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@49|) |slot#0@@41|)) )) (=> (forall ((|slot#0@@42| T@U) ) (!  (=> (and (and (= (type |slot#0@@42|) DatatypeTypeType) ($Is |slot#0@@42| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@49|) |slot#0@@42|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@42|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@42|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |contents#0@@5| |slot#0@@42|)) :qid |MutableMapModelidfy.258:16| :skolemid |1389| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |contents#0@@5| |slot#0@@42|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@42|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@42|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@49|) |slot#0@@42|)) )) (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49|))))) (= (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |contents#0@@5|)  (and (and (forall ((|key#0@@22| Int) ) (!  (=> (and (<= (LitInt 0) |key#0@@22|) (< |key#0@@22| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@5|) ($Box (int_2_U |key#0@@22|)))) (exists ((|skips#0@@5| Int) ) (!  (and (<= (LitInt 0) |skips#0@@5|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |skips#0@@5| |key#0@@22|)) :qid |MutableMapModelidfy.257:50| :skolemid |1383| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |skips#0@@5| |key#0@@22|)) )))) :qid |MutableMapModelidfy.257:16| :skolemid |1384| :pattern ( (MapType0Select (|Map#Domain| |contents#0@@5|) ($Box (int_2_U |key#0@@22|)))) )) (forall ((|slot#0@@43| T@U) ) (!  (=> (and (and (= (type |slot#0@@43|) DatatypeTypeType) ($Is |slot#0@@43| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@49|) |slot#0@@43|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@43|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@43|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |contents#0@@5| |slot#0@@43|)) :qid |MutableMapModelidfy.258:16| :skolemid |1385| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |contents#0@@5| |slot#0@@43|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@43|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |slot#0@@43|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@49|) |slot#0@@43|)) ))) (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49|))))) :qid |unknown.0:0| :skolemid |1392| :pattern ( (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.SeqMatchesContentKeys$V@@1 |elements#0@@49| |contents#0@@5|)) ))))
(assert  (=> (<= 36 $FunctionContextHeight) (forall ((MutableMapModel._default.SeqMatchesContentKeys$V@@2 T@U) (|elements#0@@50| T@U) (|contents#0@@6| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SeqMatchesContentKeys$V@@2) TyType) (= (type |elements#0@@50|) (SeqType BoxType))) (= (type |contents#0@@6|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) (Lit |contents#0@@6|)) (and (not (= 36 $FunctionContextHeight)) (and (and ($Is |elements#0@@50| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.SeqMatchesContentKeys$V@@2))) ($Is |contents#0@@6| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.SeqMatchesContentKeys$V@@2)))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidElements MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|))))))))) (and (and (forall ((|key#1@@0| T@U) ) (!  (=> (= (type |key#1@@0|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#1@@0|)) (< (U_2_int |key#1@@0|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@6|) ($Box |key#1@@0|))) (forall ((|skips#1| Int) ) (!  (=> (<= (LitInt 0) |skips#1|) (|MutableMapModel.__default.SlotExplainsKey#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |skips#1| (U_2_int |key#1@@0|))) :qid |MutableMapModelidfy.257:50| :skolemid |1396| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |skips#1| (U_2_int |key#1@@0|))) ))))) :qid |MutableMapModelidfy.257:16| :skolemid |1397| :pattern ( (MapType0Select (|Map#Domain| |contents#0@@6|) ($Box |key#1@@0|))) )) (=> (forall ((|key#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |key#1@@1|) (< |key#1@@1| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@6|) ($Box (int_2_U |key#1@@1|)))) (exists ((|skips#1@@0| Int) ) (!  (and (<= (LitInt 0) |skips#1@@0|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |skips#1@@0| |key#1@@1|)) :qid |MutableMapModelidfy.257:50| :skolemid |1400| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |skips#1@@0| |key#1@@1|)) )))) :qid |MutableMapModelidfy.257:16| :skolemid |1401| :pattern ( (MapType0Select (|Map#Domain| |contents#0@@6|) ($Box (int_2_U |key#1@@1|)))) )) (and (forall ((|slot#1| T@U) ) (!  (=> (and (= (type |slot#1|) DatatypeTypeType) ($Is |slot#1| Tclass.MutableMapModel.Slot)) (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@50|)) |slot#1|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@50|)) |slot#1|) (and (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1|) (=> (not (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1|)) (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1|))) (=> (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1|)) (|MutableMapModel.__default.KeyInSlotIsInContents#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) (Lit |contents#0@@6|) |slot#1|)))))) :qid |MutableMapModelidfy.258:16| :skolemid |1398| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |contents#0@@6| |slot#1|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |slot#1|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |slot#1|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@50|) |slot#1|)) )) (=> (forall ((|slot#1@@0| T@U) ) (!  (=> (and (and (= (type |slot#1@@0|) DatatypeTypeType) ($Is |slot#1@@0| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@50|)) |slot#1@@0|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1@@0|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1@@0|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) (Lit |contents#0@@6|) |slot#1@@0|)) :qid |MutableMapModelidfy.258:16| :skolemid |1399| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |contents#0@@6| |slot#1@@0|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |slot#1@@0|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |slot#1@@0|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@50|) |slot#1@@0|)) )) (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|)))))) (= (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) (Lit |contents#0@@6|))  (and (and (forall ((|key#1@@2| Int) ) (!  (=> (and (<= (LitInt 0) |key#1@@2|) (< |key#1@@2| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@6|) ($Box (int_2_U |key#1@@2|)))) (exists ((|skips#1@@1| Int) ) (!  (and (<= (LitInt 0) |skips#1@@1|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |skips#1@@1| |key#1@@2|)) :qid |MutableMapModelidfy.257:50| :skolemid |1393| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |skips#1@@1| |key#1@@2|)) )))) :qid |MutableMapModelidfy.257:16| :skolemid |1394| :pattern ( (MapType0Select (|Map#Domain| |contents#0@@6|) ($Box (int_2_U |key#1@@2|)))) )) (forall ((|slot#1@@1| T@U) ) (!  (=> (and (and (= (type |slot#1@@1|) DatatypeTypeType) ($Is |slot#1@@1| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@50|)) |slot#1@@1|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1@@1|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) |slot#1@@1|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) (Lit |contents#0@@6|) |slot#1@@1|)) :qid |MutableMapModelidfy.258:16| :skolemid |1395| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |contents#0@@6| |slot#1@@1|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |slot#1@@1|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.SeqMatchesContentKeys$V@@2 |elements#0@@50| |slot#1@@1|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@50|) |slot#1@@1|)) ))) (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1402| :pattern ( (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.SeqMatchesContentKeys$V@@2 (Lit |elements#0@@50|) (Lit |contents#0@@6|))) ))))
(assert  (=> (<= 37 $FunctionContextHeight) (forall ((MutableMapModel._default.EntryInSlotMatchesContents$V T@U) (|elements#0@@51| T@U) (|slot#0@@44| T@U) (|contents#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.EntryInSlotMatchesContents$V) TyType) (= (type |elements#0@@51|) (SeqType BoxType))) (= (type |slot#0@@44|) DatatypeTypeType)) (= (type |contents#0@@7|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.EntryInSlotMatchesContents#canCall| MutableMapModel._default.EntryInSlotMatchesContents$V |elements#0@@51| |slot#0@@44| |contents#0@@7|) (and (not (= 37 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@51| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.EntryInSlotMatchesContents$V))) ($Is |slot#0@@44| Tclass.MutableMapModel.Slot)) ($Is |contents#0@@7| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.EntryInSlotMatchesContents$V)))) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@51|) |slot#0@@44|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntryInSlotMatchesContents$V |elements#0@@51| |slot#0@@44|)))))) true) :qid |unknown.0:0| :skolemid |1424| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntryInSlotMatchesContents$V |elements#0@@51| |slot#0@@44| |contents#0@@7|)) ))))
(assert (forall ((MutableMapModel._default.EntryInSlotMatchesContents$V@@0 T@U) (|elements#0@@52| T@U) (|slot#0@@45| T@U) (|contents#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.EntryInSlotMatchesContents$V@@0) TyType) (= (type |elements#0@@52|) (SeqType BoxType))) (= (type |slot#0@@45|) DatatypeTypeType)) (= (type |contents#0@@8|) (MapType BoxType BoxType))) (and (and ($Is |elements#0@@52| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.EntryInSlotMatchesContents$V@@0))) ($Is |slot#0@@45| Tclass.MutableMapModel.Slot)) ($Is |contents#0@@8| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.EntryInSlotMatchesContents$V@@0))))) (= (|MutableMapModel.__default.EntryInSlotMatchesContents#requires| MutableMapModel._default.EntryInSlotMatchesContents$V@@0 |elements#0@@52| |slot#0@@45| |contents#0@@8|)  (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@52|) |slot#0@@45|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntryInSlotMatchesContents$V@@0 |elements#0@@52| |slot#0@@45|)))) :qid |unknown.0:0| :skolemid |1425| :pattern ( (|MutableMapModel.__default.EntryInSlotMatchesContents#requires| MutableMapModel._default.EntryInSlotMatchesContents$V@@0 |elements#0@@52| |slot#0@@45| |contents#0@@8|)) )))
(assert (forall ((arg0@@266 T@U) ) (! (= (type (|#Options.Option.Some| arg0@@266)) DatatypeTypeType) :qid |funType:#Options.Option.Some| :pattern ( (|#Options.Option.Some| arg0@@266)) )))
(assert  (=> (<= 37 $FunctionContextHeight) (forall ((MutableMapModel._default.EntryInSlotMatchesContents$V@@1 T@U) (|elements#0@@53| T@U) (|slot#0@@46| T@U) (|contents#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.EntryInSlotMatchesContents$V@@1) TyType) (= (type |elements#0@@53|) (SeqType BoxType))) (= (type |slot#0@@46|) DatatypeTypeType)) (= (type |contents#0@@9|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.EntryInSlotMatchesContents#canCall| MutableMapModel._default.EntryInSlotMatchesContents$V@@1 |elements#0@@53| |slot#0@@46| |contents#0@@9|) (and (not (= 37 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@53| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.EntryInSlotMatchesContents$V@@1))) ($Is |slot#0@@46| Tclass.MutableMapModel.Slot)) ($Is |contents#0@@9| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.EntryInSlotMatchesContents$V@@1)))) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@53|) |slot#0@@46|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntryInSlotMatchesContents$V@@1 |elements#0@@53| |slot#0@@46|)))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (MutableMapModel.Slot.Slot_q |slot#0@@46|) (let ((|item#0| ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@53| (MutableMapModel.Slot.slot |slot#0@@46|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@9|) ($Box (int_2_U (MutableMapModel.Item.key |item#0|))))) (|$IsA#Options.Option| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |contents#0@@9|) ($Box (int_2_U (MutableMapModel.Item.key |item#0|)))))))))) (= (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntryInSlotMatchesContents$V@@1 |elements#0@@53| |slot#0@@46| |contents#0@@9|)  (and true (let ((|item#0@@0| ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@53| (MutableMapModel.Slot.slot |slot#0@@46|))))) (and (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@9|) ($Box (int_2_U (MutableMapModel.Item.key |item#0@@0|))))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |contents#0@@9|) ($Box (int_2_U (MutableMapModel.Item.key |item#0@@0|))))) (|#Options.Option.Some| (MutableMapModel.Item.value |item#0@@0|))))))))) :qid |unknown.0:0| :skolemid |1426| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntryInSlotMatchesContents$V@@1 |elements#0@@53| |slot#0@@46| |contents#0@@9|)) ))))
(assert  (=> (<= 37 $FunctionContextHeight) (forall ((MutableMapModel._default.EntryInSlotMatchesContents$V@@2 T@U) (|elements#0@@54| T@U) (|slot#0@@47| T@U) (|contents#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.EntryInSlotMatchesContents$V@@2) TyType) (= (type |elements#0@@54|) (SeqType BoxType))) (= (type |slot#0@@47|) DatatypeTypeType)) (= (type |contents#0@@10|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.EntryInSlotMatchesContents#canCall| MutableMapModel._default.EntryInSlotMatchesContents$V@@2 (Lit |elements#0@@54|) (Lit |slot#0@@47|) (Lit |contents#0@@10|)) (and (not (= 37 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@54| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.EntryInSlotMatchesContents$V@@2))) ($Is |slot#0@@47| Tclass.MutableMapModel.Slot)) ($Is |contents#0@@10| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.EntryInSlotMatchesContents$V@@2)))) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@54|)) (Lit |slot#0@@47|)) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntryInSlotMatchesContents$V@@2 (Lit |elements#0@@54|) (Lit |slot#0@@47|)))))))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (MutableMapModel.Slot.Slot_q (Lit |slot#0@@47|)) (let ((|item#1| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@54|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@47|))))))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@10|) ($Box (int_2_U (MutableMapModel.Item.key |item#1|))))) (|$IsA#Options.Option| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |contents#0@@10|)) ($Box (int_2_U (MutableMapModel.Item.key |item#1|)))))))))) (= (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntryInSlotMatchesContents$V@@2 (Lit |elements#0@@54|) (Lit |slot#0@@47|) (Lit |contents#0@@10|))  (and true (let ((|item#1@@0| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@54|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@47|))))))) (and (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@10|) ($Box (int_2_U (MutableMapModel.Item.key |item#1@@0|))))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |contents#0@@10|)) ($Box (int_2_U (MutableMapModel.Item.key |item#1@@0|))))) (|#Options.Option.Some| (MutableMapModel.Item.value |item#1@@0|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1427| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntryInSlotMatchesContents$V@@2 (Lit |elements#0@@54|) (Lit |slot#0@@47|) (Lit |contents#0@@10|))) ))))
(assert  (=> (<= 38 $FunctionContextHeight) (forall ((MutableMapModel._default.TombstoneInSlotMatchesContents$V T@U) (|elements#0@@55| T@U) (|slot#0@@48| T@U) (|contents#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.TombstoneInSlotMatchesContents$V) TyType) (= (type |elements#0@@55|) (SeqType BoxType))) (= (type |slot#0@@48|) DatatypeTypeType)) (= (type |contents#0@@11|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.TombstoneInSlotMatchesContents#canCall| MutableMapModel._default.TombstoneInSlotMatchesContents$V |elements#0@@55| |slot#0@@48| |contents#0@@11|) (and (not (= 38 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@55| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TombstoneInSlotMatchesContents$V))) ($Is |slot#0@@48| Tclass.MutableMapModel.Slot)) ($Is |contents#0@@11| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.TombstoneInSlotMatchesContents$V)))) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@55|) |slot#0@@48|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstoneInSlotMatchesContents$V |elements#0@@55| |slot#0@@48|)))))) true) :qid |unknown.0:0| :skolemid |1430| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstoneInSlotMatchesContents$V |elements#0@@55| |slot#0@@48| |contents#0@@11|)) ))))
(assert (forall ((MutableMapModel._default.TombstoneInSlotMatchesContents$V@@0 T@U) (|elements#0@@56| T@U) (|slot#0@@49| T@U) (|contents#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.TombstoneInSlotMatchesContents$V@@0) TyType) (= (type |elements#0@@56|) (SeqType BoxType))) (= (type |slot#0@@49|) DatatypeTypeType)) (= (type |contents#0@@12|) (MapType BoxType BoxType))) (and (and ($Is |elements#0@@56| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TombstoneInSlotMatchesContents$V@@0))) ($Is |slot#0@@49| Tclass.MutableMapModel.Slot)) ($Is |contents#0@@12| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.TombstoneInSlotMatchesContents$V@@0))))) (= (|MutableMapModel.__default.TombstoneInSlotMatchesContents#requires| MutableMapModel._default.TombstoneInSlotMatchesContents$V@@0 |elements#0@@56| |slot#0@@49| |contents#0@@12|)  (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@56|) |slot#0@@49|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstoneInSlotMatchesContents$V@@0 |elements#0@@56| |slot#0@@49|)))) :qid |unknown.0:0| :skolemid |1431| :pattern ( (|MutableMapModel.__default.TombstoneInSlotMatchesContents#requires| MutableMapModel._default.TombstoneInSlotMatchesContents$V@@0 |elements#0@@56| |slot#0@@49| |contents#0@@12|)) )))
(assert  (=> (<= 38 $FunctionContextHeight) (forall ((MutableMapModel._default.TombstoneInSlotMatchesContents$V@@1 T@U) (|elements#0@@57| T@U) (|slot#0@@50| T@U) (|contents#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.TombstoneInSlotMatchesContents$V@@1) TyType) (= (type |elements#0@@57|) (SeqType BoxType))) (= (type |slot#0@@50|) DatatypeTypeType)) (= (type |contents#0@@13|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.TombstoneInSlotMatchesContents#canCall| MutableMapModel._default.TombstoneInSlotMatchesContents$V@@1 |elements#0@@57| |slot#0@@50| |contents#0@@13|) (and (not (= 38 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@57| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TombstoneInSlotMatchesContents$V@@1))) ($Is |slot#0@@50| Tclass.MutableMapModel.Slot)) ($Is |contents#0@@13| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.TombstoneInSlotMatchesContents$V@@1)))) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@57|) |slot#0@@50|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstoneInSlotMatchesContents$V@@1 |elements#0@@57| |slot#0@@50|)))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (MutableMapModel.Slot.Slot_q |slot#0@@50|)) (= (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstoneInSlotMatchesContents$V@@1 |elements#0@@57| |slot#0@@50| |contents#0@@13|)  (and true (let ((|item#0@@1| ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@57| (MutableMapModel.Slot.slot |slot#0@@50|))))) (and (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@13|) ($Box (int_2_U (MutableMapModel.Item.key |item#0@@1|))))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |contents#0@@13|) ($Box (int_2_U (MutableMapModel.Item.key |item#0@@1|)))))))))))) :qid |unknown.0:0| :skolemid |1432| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstoneInSlotMatchesContents$V@@1 |elements#0@@57| |slot#0@@50| |contents#0@@13|)) ))))
(assert  (=> (<= 38 $FunctionContextHeight) (forall ((MutableMapModel._default.TombstoneInSlotMatchesContents$V@@2 T@U) (|elements#0@@58| T@U) (|slot#0@@51| T@U) (|contents#0@@14| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.TombstoneInSlotMatchesContents$V@@2) TyType) (= (type |elements#0@@58|) (SeqType BoxType))) (= (type |slot#0@@51|) DatatypeTypeType)) (= (type |contents#0@@14|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.TombstoneInSlotMatchesContents#canCall| MutableMapModel._default.TombstoneInSlotMatchesContents$V@@2 (Lit |elements#0@@58|) (Lit |slot#0@@51|) (Lit |contents#0@@14|)) (and (not (= 38 $FunctionContextHeight)) (and (and (and ($Is |elements#0@@58| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TombstoneInSlotMatchesContents$V@@2))) ($Is |slot#0@@51| Tclass.MutableMapModel.Slot)) ($Is |contents#0@@14| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.TombstoneInSlotMatchesContents$V@@2)))) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@58|)) (Lit |slot#0@@51|)) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstoneInSlotMatchesContents$V@@2 (Lit |elements#0@@58|) (Lit |slot#0@@51|)))))))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (MutableMapModel.Slot.Slot_q (Lit |slot#0@@51|))) (= (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstoneInSlotMatchesContents$V@@2 (Lit |elements#0@@58|) (Lit |slot#0@@51|) (Lit |contents#0@@14|))  (and true (let ((|item#1@@1| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@58|) (LitInt (MutableMapModel.Slot.slot (Lit |slot#0@@51|))))))) (and (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@14|) ($Box (int_2_U (MutableMapModel.Item.key |item#1@@1|))))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |contents#0@@14|)) ($Box (int_2_U (MutableMapModel.Item.key |item#1@@1|)))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1433| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstoneInSlotMatchesContents$V@@2 (Lit |elements#0@@58|) (Lit |slot#0@@51|) (Lit |contents#0@@14|))) ))))
(assert  (=> (<= 39 $FunctionContextHeight) (forall ((MutableMapModel._default.EntriesMatchContentValue$V T@U) (|elements#0@@59| T@U) (|contents#0@@15| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.EntriesMatchContentValue$V) TyType) (= (type |elements#0@@59|) (SeqType BoxType))) (= (type |contents#0@@15|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.EntriesMatchContentValue$V |elements#0@@59| |contents#0@@15|) (and (not (= 39 $FunctionContextHeight)) (and (and ($Is |elements#0@@59| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.EntriesMatchContentValue$V))) ($Is |contents#0@@15| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.EntriesMatchContentValue$V)))) (MutableMapModel.__default.ValidElements MutableMapModel._default.EntriesMatchContentValue$V |elements#0@@59|))))) true) :qid |unknown.0:0| :skolemid |1436| :pattern ( (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.EntriesMatchContentValue$V |elements#0@@59| |contents#0@@15|)) ))))
(assert (forall ((MutableMapModel._default.EntriesMatchContentValue$V@@0 T@U) (|elements#0@@60| T@U) (|contents#0@@16| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.EntriesMatchContentValue$V@@0) TyType) (= (type |elements#0@@60|) (SeqType BoxType))) (= (type |contents#0@@16|) (MapType BoxType BoxType))) (and ($Is |elements#0@@60| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.EntriesMatchContentValue$V@@0))) ($Is |contents#0@@16| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.EntriesMatchContentValue$V@@0))))) (= (|MutableMapModel.__default.EntriesMatchContentValue#requires| MutableMapModel._default.EntriesMatchContentValue$V@@0 |elements#0@@60| |contents#0@@16|) (MutableMapModel.__default.ValidElements MutableMapModel._default.EntriesMatchContentValue$V@@0 |elements#0@@60|))) :qid |unknown.0:0| :skolemid |1437| :pattern ( (|MutableMapModel.__default.EntriesMatchContentValue#requires| MutableMapModel._default.EntriesMatchContentValue$V@@0 |elements#0@@60| |contents#0@@16|)) )))
(assert  (=> (<= 39 $FunctionContextHeight) (forall ((MutableMapModel._default.EntriesMatchContentValue$V@@1 T@U) (|elements#0@@61| T@U) (|contents#0@@17| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.EntriesMatchContentValue$V@@1) TyType) (= (type |elements#0@@61|) (SeqType BoxType))) (= (type |contents#0@@17|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |contents#0@@17|) (and (not (= 39 $FunctionContextHeight)) (and (and ($Is |elements#0@@61| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.EntriesMatchContentValue$V@@1))) ($Is |contents#0@@17| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.EntriesMatchContentValue$V@@1)))) (MutableMapModel.__default.ValidElements MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61|))))) (and (forall ((|slot#0@@52| T@U) ) (!  (=> (and (= (type |slot#0@@52|) DatatypeTypeType) ($Is |slot#0@@52| Tclass.MutableMapModel.Slot)) (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@61|) |slot#0@@52|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@61|) |slot#0@@52|) (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |slot#0@@52|) (=> (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |slot#0@@52|) (|MutableMapModel.__default.EntryInSlotMatchesContents#canCall| MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |slot#0@@52| |contents#0@@17|)))))) :qid |MutableMapModelidfy.284:12| :skolemid |1439| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |slot#0@@52| |contents#0@@17|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |slot#0@@52|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@61|) |slot#0@@52|)) )) (= (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |contents#0@@17|) (forall ((|slot#0@@53| T@U) ) (!  (=> (and (and (= (type |slot#0@@53|) DatatypeTypeType) ($Is |slot#0@@53| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@61|) |slot#0@@53|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |slot#0@@53|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |slot#0@@53| |contents#0@@17|)) :qid |MutableMapModelidfy.284:12| :skolemid |1438| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |slot#0@@53| |contents#0@@17|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |slot#0@@53|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@61|) |slot#0@@53|)) ))))) :qid |unknown.0:0| :skolemid |1440| :pattern ( (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.EntriesMatchContentValue$V@@1 |elements#0@@61| |contents#0@@17|)) ))))
(assert  (=> (<= 39 $FunctionContextHeight) (forall ((MutableMapModel._default.EntriesMatchContentValue$V@@2 T@U) (|elements#0@@62| T@U) (|contents#0@@18| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.EntriesMatchContentValue$V@@2) TyType) (= (type |elements#0@@62|) (SeqType BoxType))) (= (type |contents#0@@18|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@62|) (Lit |contents#0@@18|)) (and (not (= 39 $FunctionContextHeight)) (and (and ($Is |elements#0@@62| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.EntriesMatchContentValue$V@@2))) ($Is |contents#0@@18| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.EntriesMatchContentValue$V@@2)))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidElements MutableMapModel._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@62|))))))))) (and (forall ((|slot#1@@2| T@U) ) (!  (=> (and (= (type |slot#1@@2|) DatatypeTypeType) ($Is |slot#1@@2| Tclass.MutableMapModel.Slot)) (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@62|)) |slot#1@@2|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@62|)) |slot#1@@2|) (and (|MutableMapModel.__default.SlotIsEntry#canCall| MutableMapModel._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@62|) |slot#1@@2|) (=> (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@62|) |slot#1@@2|) (|MutableMapModel.__default.EntryInSlotMatchesContents#canCall| MutableMapModel._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@62|) |slot#1@@2| (Lit |contents#0@@18|))))))) :qid |MutableMapModelidfy.284:12| :skolemid |1442| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntriesMatchContentValue$V@@2 |elements#0@@62| |slot#1@@2| |contents#0@@18|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntriesMatchContentValue$V@@2 |elements#0@@62| |slot#1@@2|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@62|) |slot#1@@2|)) )) (= (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@62|) (Lit |contents#0@@18|)) (forall ((|slot#1@@3| T@U) ) (!  (=> (and (and (= (type |slot#1@@3|) DatatypeTypeType) ($Is |slot#1@@3| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@62|)) |slot#1@@3|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@62|) |slot#1@@3|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@62|) |slot#1@@3| (Lit |contents#0@@18|))) :qid |MutableMapModelidfy.284:12| :skolemid |1441| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.EntriesMatchContentValue$V@@2 |elements#0@@62| |slot#1@@3| |contents#0@@18|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.EntriesMatchContentValue$V@@2 |elements#0@@62| |slot#1@@3|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@62|) |slot#1@@3|)) ))))) :qid |unknown.0:0| :weight 3 :skolemid |1443| :pattern ( (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.EntriesMatchContentValue$V@@2 (Lit |elements#0@@62|) (Lit |contents#0@@18|))) ))))
(assert  (=> (<= 40 $FunctionContextHeight) (forall ((MutableMapModel._default.TombstonesMatchContentValue$V T@U) (|elements#0@@63| T@U) (|contents#0@@19| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.TombstonesMatchContentValue$V) TyType) (= (type |elements#0@@63|) (SeqType BoxType))) (= (type |contents#0@@19|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.TombstonesMatchContentValue$V |elements#0@@63| |contents#0@@19|) (and (not (= 40 $FunctionContextHeight)) (and (and ($Is |elements#0@@63| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TombstonesMatchContentValue$V))) ($Is |contents#0@@19| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.TombstonesMatchContentValue$V)))) (MutableMapModel.__default.ValidElements MutableMapModel._default.TombstonesMatchContentValue$V |elements#0@@63|))))) true) :qid |unknown.0:0| :skolemid |1450| :pattern ( (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.TombstonesMatchContentValue$V |elements#0@@63| |contents#0@@19|)) ))))
(assert (forall ((MutableMapModel._default.TombstonesMatchContentValue$V@@0 T@U) (|elements#0@@64| T@U) (|contents#0@@20| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.TombstonesMatchContentValue$V@@0) TyType) (= (type |elements#0@@64|) (SeqType BoxType))) (= (type |contents#0@@20|) (MapType BoxType BoxType))) (and ($Is |elements#0@@64| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TombstonesMatchContentValue$V@@0))) ($Is |contents#0@@20| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.TombstonesMatchContentValue$V@@0))))) (= (|MutableMapModel.__default.TombstonesMatchContentValue#requires| MutableMapModel._default.TombstonesMatchContentValue$V@@0 |elements#0@@64| |contents#0@@20|) (MutableMapModel.__default.ValidElements MutableMapModel._default.TombstonesMatchContentValue$V@@0 |elements#0@@64|))) :qid |unknown.0:0| :skolemid |1451| :pattern ( (|MutableMapModel.__default.TombstonesMatchContentValue#requires| MutableMapModel._default.TombstonesMatchContentValue$V@@0 |elements#0@@64| |contents#0@@20|)) )))
(assert  (=> (<= 40 $FunctionContextHeight) (forall ((MutableMapModel._default.TombstonesMatchContentValue$V@@1 T@U) (|elements#0@@65| T@U) (|contents#0@@21| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.TombstonesMatchContentValue$V@@1) TyType) (= (type |elements#0@@65|) (SeqType BoxType))) (= (type |contents#0@@21|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |contents#0@@21|) (and (not (= 40 $FunctionContextHeight)) (and (and ($Is |elements#0@@65| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TombstonesMatchContentValue$V@@1))) ($Is |contents#0@@21| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.TombstonesMatchContentValue$V@@1)))) (MutableMapModel.__default.ValidElements MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65|))))) (and (forall ((|slot#0@@54| T@U) ) (!  (=> (and (= (type |slot#0@@54|) DatatypeTypeType) ($Is |slot#0@@54| Tclass.MutableMapModel.Slot)) (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@65|) |slot#0@@54|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@65|) |slot#0@@54|) (and (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |slot#0@@54|) (=> (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |slot#0@@54|) (|MutableMapModel.__default.TombstoneInSlotMatchesContents#canCall| MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |slot#0@@54| |contents#0@@21|)))))) :qid |MutableMapModelidfy.291:12| :skolemid |1453| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |slot#0@@54| |contents#0@@21|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |slot#0@@54|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@65|) |slot#0@@54|)) )) (= (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |contents#0@@21|) (forall ((|slot#0@@55| T@U) ) (!  (=> (and (and (= (type |slot#0@@55|) DatatypeTypeType) ($Is |slot#0@@55| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@65|) |slot#0@@55|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |slot#0@@55|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |slot#0@@55| |contents#0@@21|)) :qid |MutableMapModelidfy.291:12| :skolemid |1452| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |slot#0@@55| |contents#0@@21|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |slot#0@@55|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@65|) |slot#0@@55|)) ))))) :qid |unknown.0:0| :skolemid |1454| :pattern ( (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.TombstonesMatchContentValue$V@@1 |elements#0@@65| |contents#0@@21|)) ))))
(assert  (=> (<= 40 $FunctionContextHeight) (forall ((MutableMapModel._default.TombstonesMatchContentValue$V@@2 T@U) (|elements#0@@66| T@U) (|contents#0@@22| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.TombstonesMatchContentValue$V@@2) TyType) (= (type |elements#0@@66|) (SeqType BoxType))) (= (type |contents#0@@22|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@66|) (Lit |contents#0@@22|)) (and (not (= 40 $FunctionContextHeight)) (and (and ($Is |elements#0@@66| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.TombstonesMatchContentValue$V@@2))) ($Is |contents#0@@22| (TMap Tclass.NativeTypes.uint64 (Tclass.Options.Option MutableMapModel._default.TombstonesMatchContentValue$V@@2)))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidElements MutableMapModel._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@66|))))))))) (and (forall ((|slot#1@@4| T@U) ) (!  (=> (and (= (type |slot#1@@4|) DatatypeTypeType) ($Is |slot#1@@4| Tclass.MutableMapModel.Slot)) (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@66|)) |slot#1@@4|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@66|)) |slot#1@@4|) (and (|MutableMapModel.__default.SlotIsTombstone#canCall| MutableMapModel._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@66|) |slot#1@@4|) (=> (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@66|) |slot#1@@4|) (|MutableMapModel.__default.TombstoneInSlotMatchesContents#canCall| MutableMapModel._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@66|) |slot#1@@4| (Lit |contents#0@@22|))))))) :qid |MutableMapModelidfy.291:12| :skolemid |1456| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstonesMatchContentValue$V@@2 |elements#0@@66| |slot#1@@4| |contents#0@@22|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstonesMatchContentValue$V@@2 |elements#0@@66| |slot#1@@4|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@66|) |slot#1@@4|)) )) (= (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@66|) (Lit |contents#0@@22|)) (forall ((|slot#1@@5| T@U) ) (!  (=> (and (and (= (type |slot#1@@5|) DatatypeTypeType) ($Is |slot#1@@5| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@66|)) |slot#1@@5|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@66|) |slot#1@@5|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@66|) |slot#1@@5| (Lit |contents#0@@22|))) :qid |MutableMapModelidfy.291:12| :skolemid |1455| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.TombstonesMatchContentValue$V@@2 |elements#0@@66| |slot#1@@5| |contents#0@@22|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.TombstonesMatchContentValue$V@@2 |elements#0@@66| |slot#1@@5|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@66|) |slot#1@@5|)) ))))) :qid |unknown.0:0| :weight 3 :skolemid |1457| :pattern ( (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.TombstonesMatchContentValue$V@@2 (Lit |elements#0@@66|) (Lit |contents#0@@22|))) ))))
(assert  (=> (<= 41 $FunctionContextHeight) (forall ((MutableMapModel._default.FixedSizeInv$V T@U) (|self#0@@3| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.FixedSizeInv$V) TyType) (= (type |self#0@@3|) DatatypeTypeType)) (or (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.FixedSizeInv$V |self#0@@3|) (and (not (= 41 $FunctionContextHeight)) ($Is |self#0@@3| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeInv$V))))) true) :qid |unknown.0:0| :skolemid |1464| :pattern ( (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeInv$V |self#0@@3|)) ))))
(assert (forall ((MutableMapModel._default.FixedSizeInv$V@@0 T@U) (|self#0@@4| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.FixedSizeInv$V@@0) TyType) (= (type |self#0@@4|) DatatypeTypeType)) ($Is |self#0@@4| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeInv$V@@0))) (= (|MutableMapModel.__default.FixedSizeInv#requires| MutableMapModel._default.FixedSizeInv$V@@0 |self#0@@4|) true)) :qid |unknown.0:0| :skolemid |1465| :pattern ( (|MutableMapModel.__default.FixedSizeInv#requires| MutableMapModel._default.FixedSizeInv$V@@0 |self#0@@4|)) )))
(assert  (=> (<= 41 $FunctionContextHeight) (forall ((MutableMapModel._default.FixedSizeInv$V@@1 T@U) (|self#0@@5| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.FixedSizeInv$V@@1) TyType) (= (type |self#0@@5|) DatatypeTypeType)) (or (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.FixedSizeInv$V@@1 |self#0@@5|) (and (not (= 41 $FunctionContextHeight)) ($Is |self#0@@5| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeInv$V@@1))))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (=> (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (=> (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|)) 18446744073709551616) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (=> (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@5|) 18446744073709551616) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|)) (=> (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@5|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|)) (=> (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|)) (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@5|)) (and (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|)) (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.FixedSizeInv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|))) (=> (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.FixedSizeInv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|)) (and (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|)) (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.FixedSizeInv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|))) (=> (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.FixedSizeInv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|)) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@5|)) (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.FixedSizeInv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|))))))))))))))))) (= (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeInv$V@@1 |self#0@@5|)  (and (and (and (and (and (and (and (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|))) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|)) 18446744073709551616)) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@5|) 18446744073709551616)) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@5|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|)))) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|)) (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@5|))) (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.FixedSizeInv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|))) (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.FixedSizeInv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|))) (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.FixedSizeInv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@5|)))))) :qid |unknown.0:0| :skolemid |1466| :pattern ( (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeInv$V@@1 |self#0@@5|)) ))))
(assert  (=> (<= 41 $FunctionContextHeight) (forall ((MutableMapModel._default.FixedSizeInv$V@@2 T@U) (|self#0@@6| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.FixedSizeInv$V@@2) TyType) (= (type |self#0@@6|) DatatypeTypeType)) (or (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.FixedSizeInv$V@@2 (Lit |self#0@@6|)) (and (not (= 41 $FunctionContextHeight)) ($Is |self#0@@6| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeInv$V@@2))))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (=> (<= (LitInt 128) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (=> (< (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|)))) 18446744073709551616) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (=> (U_2_bool (Lit (bool_2_U (< (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@6|)) 18446744073709551616)))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|))) (=> (< (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@6|)) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|))) (=> (= (|Map#Card| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|)))) (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@6|)))) (and (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|))) (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.FixedSizeInv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))) (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))) (=> (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.FixedSizeInv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))) (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))))) (and (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|))) (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.FixedSizeInv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))) (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))) (=> (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.FixedSizeInv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))) (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@6|))) (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.FixedSizeInv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))) (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))))))))))))))))) (= (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeInv$V@@2 (Lit |self#0@@6|))  (and (and (and (and (and (and (and (<= (LitInt 128) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))))) (< (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|)))) 18446744073709551616)) (< (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@6|)) 18446744073709551616)) (< (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@6|)) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|)))))) (= (|Map#Card| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|)))) (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@6|))))) (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.FixedSizeInv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))) (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))) (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.FixedSizeInv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))) (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|))))) (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.FixedSizeInv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@6|))) (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@6|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1467| :pattern ( (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeInv$V@@2 (Lit |self#0@@6|))) ))))
(assert (forall ((arg0@@267 T@U) (arg1@@119 T@U) (arg2@@67 Int) ) (! (= (type (MutableMapModel.__default.IndexSetThrough arg0@@267 arg1@@119 arg2@@67)) (MapType0Type BoxType boolType)) :qid |funType:MutableMapModel.__default.IndexSetThrough| :pattern ( (MutableMapModel.__default.IndexSetThrough arg0@@267 arg1@@119 arg2@@67)) )))
(assert  (=> (<= 42 $FunctionContextHeight) (forall ((MutableMapModel._default.IndexSetThrough$V T@U) (|elements#0@@67| T@U) (|through#0| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.IndexSetThrough$V) TyType) (= (type |elements#0@@67|) (SeqType BoxType))) (or (|MutableMapModel.__default.IndexSetThrough#canCall| MutableMapModel._default.IndexSetThrough$V |elements#0@@67| |through#0|) (and (not (= 42 $FunctionContextHeight)) (and (and ($Is |elements#0@@67| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.IndexSetThrough$V))) (<= (LitInt 0) |through#0|)) (<= |through#0| (|Seq#Length| |elements#0@@67|)))))) ($Is (MutableMapModel.__default.IndexSetThrough MutableMapModel._default.IndexSetThrough$V |elements#0@@67| |through#0|) (TSet TInt))) :qid |unknown.0:0| :skolemid |1471| :pattern ( (MutableMapModel.__default.IndexSetThrough MutableMapModel._default.IndexSetThrough$V |elements#0@@67| |through#0|)) ))))
(assert (forall ((MutableMapModel._default.IndexSetThrough$V@@0 T@U) (|elements#0@@68| T@U) (|through#0@@0| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.IndexSetThrough$V@@0) TyType) (= (type |elements#0@@68|) (SeqType BoxType))) (and ($Is |elements#0@@68| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.IndexSetThrough$V@@0))) (<= (LitInt 0) |through#0@@0|))) (= (|MutableMapModel.__default.IndexSetThrough#requires| MutableMapModel._default.IndexSetThrough$V@@0 |elements#0@@68| |through#0@@0|) (<= |through#0@@0| (|Seq#Length| |elements#0@@68|)))) :qid |unknown.0:0| :skolemid |1472| :pattern ( (|MutableMapModel.__default.IndexSetThrough#requires| MutableMapModel._default.IndexSetThrough$V@@0 |elements#0@@68| |through#0@@0|)) )))
(assert (forall ((arg0@@268 T@U) (arg1@@120 Int) (arg2@@68 Int) (arg3@@41 T@U) (arg4@@28 T@U) ) (! (= (type (|lambda#56| arg0@@268 arg1@@120 arg2@@68 arg3@@41 arg4@@28)) (MapType0Type BoxType boolType)) :qid |funType:lambda#56| :pattern ( (|lambda#56| arg0@@268 arg1@@120 arg2@@68 arg3@@41 arg4@@28)) )))
(assert  (=> (<= 42 $FunctionContextHeight) (forall ((MutableMapModel._default.IndexSetThrough$V@@1 T@U) (|elements#0@@69| T@U) (|through#0@@1| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.IndexSetThrough$V@@1) TyType) (= (type |elements#0@@69|) (SeqType BoxType))) (or (|MutableMapModel.__default.IndexSetThrough#canCall| MutableMapModel._default.IndexSetThrough$V@@1 |elements#0@@69| |through#0@@1|) (and (not (= 42 $FunctionContextHeight)) (and (and ($Is |elements#0@@69| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.IndexSetThrough$V@@1))) (<= (LitInt 0) |through#0@@1|)) (<= |through#0@@1| (|Seq#Length| |elements#0@@69|)))))) (= (MutableMapModel.__default.IndexSetThrough MutableMapModel._default.IndexSetThrough$V@@1 |elements#0@@69| |through#0@@1|) (|lambda#56| TInt (LitInt 0) |through#0@@1| |elements#0@@69| |elements#0@@69|))) :qid |unknown.0:0| :skolemid |1473| :pattern ( (MutableMapModel.__default.IndexSetThrough MutableMapModel._default.IndexSetThrough$V@@1 |elements#0@@69| |through#0@@1|)) ))))
(assert  (=> (<= 42 $FunctionContextHeight) (forall ((MutableMapModel._default.IndexSetThrough$V@@2 T@U) (|elements#0@@70| T@U) (|through#0@@2| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.IndexSetThrough$V@@2) TyType) (= (type |elements#0@@70|) (SeqType BoxType))) (or (|MutableMapModel.__default.IndexSetThrough#canCall| MutableMapModel._default.IndexSetThrough$V@@2 (Lit |elements#0@@70|) (LitInt |through#0@@2|)) (and (not (= 42 $FunctionContextHeight)) (and (and ($Is |elements#0@@70| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.IndexSetThrough$V@@2))) (<= (LitInt 0) |through#0@@2|)) (<= (LitInt |through#0@@2|) (|Seq#Length| (Lit |elements#0@@70|))))))) (= (MutableMapModel.__default.IndexSetThrough MutableMapModel._default.IndexSetThrough$V@@2 (Lit |elements#0@@70|) (LitInt |through#0@@2|)) (|lambda#56| TInt (LitInt 0) |through#0@@2| (Lit |elements#0@@70|) (Lit |elements#0@@70|)))) :qid |unknown.0:0| :weight 3 :skolemid |1474| :pattern ( (MutableMapModel.__default.IndexSetThrough MutableMapModel._default.IndexSetThrough$V@@2 (Lit |elements#0@@70|) (LitInt |through#0@@2|))) ))))
(assert (forall ((arg0@@269 T@U) (arg1@@121 T@U) ) (! (= (type (MutableMapModel.__default.IndexSet arg0@@269 arg1@@121)) (MapType0Type BoxType boolType)) :qid |funType:MutableMapModel.__default.IndexSet| :pattern ( (MutableMapModel.__default.IndexSet arg0@@269 arg1@@121)) )))
(assert  (=> (<= 43 $FunctionContextHeight) (forall ((MutableMapModel._default.IndexSet$V T@U) (|elements#0@@71| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.IndexSet$V) TyType) (= (type |elements#0@@71|) (SeqType BoxType))) (or (|MutableMapModel.__default.IndexSet#canCall| MutableMapModel._default.IndexSet$V |elements#0@@71|) (and (not (= 43 $FunctionContextHeight)) ($Is |elements#0@@71| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.IndexSet$V)))))) ($Is (MutableMapModel.__default.IndexSet MutableMapModel._default.IndexSet$V |elements#0@@71|) (TSet TInt))) :qid |unknown.0:0| :skolemid |1475| :pattern ( (MutableMapModel.__default.IndexSet MutableMapModel._default.IndexSet$V |elements#0@@71|)) ))))
(assert (forall ((MutableMapModel._default.IndexSet$V@@0 T@U) (|elements#0@@72| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.IndexSet$V@@0) TyType) (= (type |elements#0@@72|) (SeqType BoxType))) ($Is |elements#0@@72| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.IndexSet$V@@0)))) (= (|MutableMapModel.__default.IndexSet#requires| MutableMapModel._default.IndexSet$V@@0 |elements#0@@72|) true)) :qid |unknown.0:0| :skolemid |1476| :pattern ( (|MutableMapModel.__default.IndexSet#requires| MutableMapModel._default.IndexSet$V@@0 |elements#0@@72|)) )))
(assert  (=> (<= 43 $FunctionContextHeight) (forall ((MutableMapModel._default.IndexSet$V@@1 T@U) (|elements#0@@73| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.IndexSet$V@@1) TyType) (= (type |elements#0@@73|) (SeqType BoxType))) (or (|MutableMapModel.__default.IndexSet#canCall| MutableMapModel._default.IndexSet$V@@1 |elements#0@@73|) (and (not (= 43 $FunctionContextHeight)) ($Is |elements#0@@73| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.IndexSet$V@@1)))))) (and (|MutableMapModel.__default.IndexSetThrough#canCall| MutableMapModel._default.IndexSet$V@@1 |elements#0@@73| (|Seq#Length| |elements#0@@73|)) (= (MutableMapModel.__default.IndexSet MutableMapModel._default.IndexSet$V@@1 |elements#0@@73|) (MutableMapModel.__default.IndexSetThrough MutableMapModel._default.IndexSet$V@@1 |elements#0@@73| (|Seq#Length| |elements#0@@73|))))) :qid |unknown.0:0| :skolemid |1477| :pattern ( (MutableMapModel.__default.IndexSet MutableMapModel._default.IndexSet$V@@1 |elements#0@@73|)) ))))
(assert  (=> (<= 43 $FunctionContextHeight) (forall ((MutableMapModel._default.IndexSet$V@@2 T@U) (|elements#0@@74| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.IndexSet$V@@2) TyType) (= (type |elements#0@@74|) (SeqType BoxType))) (or (|MutableMapModel.__default.IndexSet#canCall| MutableMapModel._default.IndexSet$V@@2 (Lit |elements#0@@74|)) (and (not (= 43 $FunctionContextHeight)) ($Is |elements#0@@74| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.IndexSet$V@@2)))))) (and (|MutableMapModel.__default.IndexSetThrough#canCall| MutableMapModel._default.IndexSet$V@@2 (Lit |elements#0@@74|) (|Seq#Length| (Lit |elements#0@@74|))) (= (MutableMapModel.__default.IndexSet MutableMapModel._default.IndexSet$V@@2 (Lit |elements#0@@74|)) (MutableMapModel.__default.IndexSetThrough MutableMapModel._default.IndexSet$V@@2 (Lit |elements#0@@74|) (|Seq#Length| (Lit |elements#0@@74|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1478| :pattern ( (MutableMapModel.__default.IndexSet MutableMapModel._default.IndexSet$V@@2 (Lit |elements#0@@74|))) ))))
(assert  (=> (<= 44 $FunctionContextHeight) (forall ((MutableMapModel._default.Count1$V T@U) (|item#0@@2| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.Count1$V) TyType) (= (type |item#0@@2|) DatatypeTypeType)) (or (|MutableMapModel.__default.Count1#canCall| MutableMapModel._default.Count1$V |item#0@@2|) (and (not (= 44 $FunctionContextHeight)) ($Is |item#0@@2| (Tclass.MutableMapModel.Item MutableMapModel._default.Count1$V))))) (<= (LitInt 0) (MutableMapModel.__default.Count1 MutableMapModel._default.Count1$V |item#0@@2|))) :qid |unknown.0:0| :skolemid |1480| :pattern ( (MutableMapModel.__default.Count1 MutableMapModel._default.Count1$V |item#0@@2|)) ))))
(assert (forall ((MutableMapModel._default.Count1$V@@0 T@U) (|item#0@@3| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.Count1$V@@0) TyType) (= (type |item#0@@3|) DatatypeTypeType)) ($Is |item#0@@3| (Tclass.MutableMapModel.Item MutableMapModel._default.Count1$V@@0))) (= (|MutableMapModel.__default.Count1#requires| MutableMapModel._default.Count1$V@@0 |item#0@@3|) true)) :qid |unknown.0:0| :skolemid |1481| :pattern ( (|MutableMapModel.__default.Count1#requires| MutableMapModel._default.Count1$V@@0 |item#0@@3|)) )))
(assert  (=> (<= 44 $FunctionContextHeight) (forall ((MutableMapModel._default.Count1$V@@1 T@U) (|item#0@@4| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.Count1$V@@1) TyType) (= (type |item#0@@4|) DatatypeTypeType)) (or (|MutableMapModel.__default.Count1#canCall| MutableMapModel._default.Count1$V@@1 |item#0@@4|) (and (not (= 44 $FunctionContextHeight)) ($Is |item#0@@4| (Tclass.MutableMapModel.Item MutableMapModel._default.Count1$V@@1))))) (= (MutableMapModel.__default.Count1 MutableMapModel._default.Count1$V@@1 |item#0@@4|) (ite  (or (MutableMapModel.Item.Entry_q |item#0@@4|) (MutableMapModel.Item.Tombstone_q |item#0@@4|)) 1 0))) :qid |unknown.0:0| :skolemid |1482| :pattern ( (MutableMapModel.__default.Count1 MutableMapModel._default.Count1$V@@1 |item#0@@4|)) ))))
(assert  (=> (<= 44 $FunctionContextHeight) (forall ((MutableMapModel._default.Count1$V@@2 T@U) (|item#0@@5| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.Count1$V@@2) TyType) (= (type |item#0@@5|) DatatypeTypeType)) (or (|MutableMapModel.__default.Count1#canCall| MutableMapModel._default.Count1$V@@2 (Lit |item#0@@5|)) (and (not (= 44 $FunctionContextHeight)) ($Is |item#0@@5| (Tclass.MutableMapModel.Item MutableMapModel._default.Count1$V@@2))))) (= (MutableMapModel.__default.Count1 MutableMapModel._default.Count1$V@@2 (Lit |item#0@@5|)) (ite  (or (MutableMapModel.Item.Entry_q (Lit |item#0@@5|)) (MutableMapModel.Item.Tombstone_q (Lit |item#0@@5|))) 1 0))) :qid |unknown.0:0| :weight 3 :skolemid |1483| :pattern ( (MutableMapModel.__default.Count1 MutableMapModel._default.Count1$V@@2 (Lit |item#0@@5|))) ))))
(assert (forall ((MutableMapModel._default.CountFilled$V T@U) ($ly@@35 T@U) (|view#0| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.CountFilled$V) TyType) (= (type $ly@@35) LayerTypeType)) (= (type |view#0|) (SeqType BoxType))) (= (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V ($LS $ly@@35) |view#0|) (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V $ly@@35 |view#0|))) :qid |unknown.0:0| :skolemid |1484| :pattern ( (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V ($LS $ly@@35) |view#0|)) )))
(assert (forall ((MutableMapModel._default.CountFilled$V@@0 T@U) ($ly@@36 T@U) (|view#0@@0| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.CountFilled$V@@0) TyType) (= (type $ly@@36) LayerTypeType)) (= (type |view#0@@0|) (SeqType BoxType))) (= (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V@@0 $ly@@36 |view#0@@0|) (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V@@0 $LZ |view#0@@0|))) :qid |unknown.0:0| :skolemid |1485| :pattern ( (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V@@0 (AsFuelBottom $ly@@36) |view#0@@0|)) )))
(assert  (=> (<= 45 $FunctionContextHeight) (forall ((MutableMapModel._default.CountFilled$V@@1 T@U) ($ly@@37 T@U) (|view#0@@1| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.CountFilled$V@@1) TyType) (= (type $ly@@37) LayerTypeType)) (= (type |view#0@@1|) (SeqType BoxType))) (or (|MutableMapModel.__default.CountFilled#canCall| MutableMapModel._default.CountFilled$V@@1 |view#0@@1|) (and (not (= 45 $FunctionContextHeight)) ($Is |view#0@@1| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CountFilled$V@@1)))))) (<= (LitInt 0) (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V@@1 $ly@@37 |view#0@@1|))) :qid |unknown.0:0| :skolemid |1486| :pattern ( (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V@@1 $ly@@37 |view#0@@1|)) ))))
(assert (forall ((MutableMapModel._default.CountFilled$V@@2 T@U) ($ly@@38 T@U) (|view#0@@2| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.CountFilled$V@@2) TyType) (= (type $ly@@38) LayerTypeType)) (= (type |view#0@@2|) (SeqType BoxType))) ($Is |view#0@@2| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CountFilled$V@@2)))) (= (|MutableMapModel.__default.CountFilled#requires| MutableMapModel._default.CountFilled$V@@2 $ly@@38 |view#0@@2|) true)) :qid |unknown.0:0| :skolemid |1487| :pattern ( (|MutableMapModel.__default.CountFilled#requires| MutableMapModel._default.CountFilled$V@@2 $ly@@38 |view#0@@2|)) )))
(assert  (=> (<= 45 $FunctionContextHeight) (forall ((MutableMapModel._default.CountFilled$V@@3 T@U) ($ly@@39 T@U) (|view#0@@3| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.CountFilled$V@@3) TyType) (= (type $ly@@39) LayerTypeType)) (= (type |view#0@@3|) (SeqType BoxType))) (or (|MutableMapModel.__default.CountFilled#canCall| MutableMapModel._default.CountFilled$V@@3 |view#0@@3|) (and (not (= 45 $FunctionContextHeight)) ($Is |view#0@@3| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CountFilled$V@@3)))))) (and (=> (not (= (|Seq#Length| |view#0@@3|) (LitInt 0))) (and (|MutableMapModel.__default.CountFilled#canCall| MutableMapModel._default.CountFilled$V@@3 (|Seq#Drop| |view#0@@3| (LitInt 1))) (|MutableMapModel.__default.Count1#canCall| MutableMapModel._default.CountFilled$V@@3 ($Unbox DatatypeTypeType (|Seq#Index| |view#0@@3| (LitInt 0)))))) (= (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V@@3 ($LS $ly@@39) |view#0@@3|) (ite (= (|Seq#Length| |view#0@@3|) (LitInt 0)) 0 (+ (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V@@3 $ly@@39 (|Seq#Drop| |view#0@@3| (LitInt 1))) (MutableMapModel.__default.Count1 MutableMapModel._default.CountFilled$V@@3 ($Unbox DatatypeTypeType (|Seq#Index| |view#0@@3| (LitInt 0))))))))) :qid |unknown.0:0| :skolemid |1488| :pattern ( (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V@@3 ($LS $ly@@39) |view#0@@3|)) ))))
(assert  (=> (<= 45 $FunctionContextHeight) (forall ((MutableMapModel._default.CountFilled$V@@4 T@U) ($ly@@40 T@U) (|view#0@@4| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.CountFilled$V@@4) TyType) (= (type $ly@@40) LayerTypeType)) (= (type |view#0@@4|) (SeqType BoxType))) (or (|MutableMapModel.__default.CountFilled#canCall| MutableMapModel._default.CountFilled$V@@4 (Lit |view#0@@4|)) (and (not (= 45 $FunctionContextHeight)) ($Is |view#0@@4| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CountFilled$V@@4)))))) (and (=> (not (= (|Seq#Length| (Lit |view#0@@4|)) (LitInt 0))) (and (|MutableMapModel.__default.CountFilled#canCall| MutableMapModel._default.CountFilled$V@@4 (Lit (|Seq#Drop| (Lit |view#0@@4|) (LitInt 1)))) (|MutableMapModel.__default.Count1#canCall| MutableMapModel._default.CountFilled$V@@4 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |view#0@@4|) (LitInt 0)))))) (= (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V@@4 ($LS $ly@@40) (Lit |view#0@@4|)) (ite (= (|Seq#Length| (Lit |view#0@@4|)) (LitInt 0)) 0 (+ (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V@@4 ($LS $ly@@40) (Lit (|Seq#Drop| (Lit |view#0@@4|) (LitInt 1)))) (MutableMapModel.__default.Count1 MutableMapModel._default.CountFilled$V@@4 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |view#0@@4|) (LitInt 0))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1489| :pattern ( (MutableMapModel.__default.CountFilled MutableMapModel._default.CountFilled$V@@4 ($LS $ly@@40) (Lit |view#0@@4|))) ))))
(assert (forall ((arg0@@270 T@U) (arg1@@122 Int) ) (! (= (type (MutableMapModel.__default.ConstructorFromSize arg0@@270 arg1@@122)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.ConstructorFromSize| :pattern ( (MutableMapModel.__default.ConstructorFromSize arg0@@270 arg1@@122)) )))
(assert  (=> (<= 49 $FunctionContextHeight) (forall ((MutableMapModel._default.ConstructorFromSize$V T@U) (|size#0| Int) ) (!  (=> (and (= (type MutableMapModel._default.ConstructorFromSize$V) TyType) (or (|MutableMapModel.__default.ConstructorFromSize#canCall| MutableMapModel._default.ConstructorFromSize$V |size#0|) (and (not (= 49 $FunctionContextHeight)) (and (and (<= (LitInt 0) |size#0|) (< |size#0| 18446744073709551616)) (<= (LitInt 128) |size#0|))))) (and (and (and (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ConstructorFromSize$V (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V |size#0|)) (forall ((|slot#0@@56| T@U) ) (!  (=> (and (and (= (type |slot#0@@56|) DatatypeTypeType) ($Is |slot#0@@56| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V |size#0|))) |slot#0@@56|)) (MutableMapModel.__default.SlotIsEmpty MutableMapModel._default.ConstructorFromSize$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V |size#0|)) |slot#0@@56|)) :qid |MutableMapModelidfy.380:18| :skolemid |1520| :pattern ( (MutableMapModel.__default.SlotIsEmpty MutableMapModel._default.ConstructorFromSize$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V |size#0|)) |slot#0@@56|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V |size#0|))) |slot#0@@56|)) ))) (|Map#Equal| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V |size#0|)) (|Map#Empty| BoxType BoxType))) (= |size#0| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V |size#0|))))) ($Is (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V |size#0|) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ConstructorFromSize$V)))) :qid |unknown.0:0| :skolemid |1521| :pattern ( (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V |size#0|)) ))))
(assert (forall ((MutableMapModel._default.ConstructorFromSize$V@@0 T@U) (|size#0@@0| Int) ) (!  (=> (= (type MutableMapModel._default.ConstructorFromSize$V@@0) TyType) (=> (and (<= (LitInt 0) |size#0@@0|) (< |size#0@@0| 18446744073709551616)) (= (|MutableMapModel.__default.ConstructorFromSize#requires| MutableMapModel._default.ConstructorFromSize$V@@0 |size#0@@0|) (<= (LitInt 128) |size#0@@0|)))) :qid |unknown.0:0| :skolemid |1522| :pattern ( (|MutableMapModel.__default.ConstructorFromSize#requires| MutableMapModel._default.ConstructorFromSize$V@@0 |size#0@@0|)) )))
(assert  (and (forall ((arg0@@271 T@U) (arg1@@123 T@U) (arg2@@69 Int) (arg3@@42 T@U) ) (! (= (type (Sequences.__default.SeqOfLength arg0@@271 arg1@@123 arg2@@69 arg3@@42)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqOfLength| :pattern ( (Sequences.__default.SeqOfLength arg0@@271 arg1@@123 arg2@@69 arg3@@42)) )) (= (type StartFuel_Sequences._default.SeqOfLength) LayerTypeType)))
(assert  (=> (<= 49 $FunctionContextHeight) (forall ((MutableMapModel._default.ConstructorFromSize$V@@1 T@U) (|size#0@@1| Int) ) (!  (=> (and (= (type MutableMapModel._default.ConstructorFromSize$V@@1) TyType) (or (|MutableMapModel.__default.ConstructorFromSize#canCall| MutableMapModel._default.ConstructorFromSize$V@@1 |size#0@@1|) (and (not (= 49 $FunctionContextHeight)) (and (and (<= (LitInt 0) |size#0@@1|) (< |size#0@@1| 18446744073709551616)) (<= (LitInt 128) |size#0@@1|))))) (and (|Sequences.__default.SeqOfLength#canCall| (Tclass.MutableMapModel.Item MutableMapModel._default.ConstructorFromSize$V@@1) |size#0@@1| ($Box (Lit |#MutableMapModel.Item.Empty|))) (= (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V@@1 |size#0@@1|) (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| (Sequences.__default.SeqOfLength (Tclass.MutableMapModel.Item MutableMapModel._default.ConstructorFromSize$V@@1) StartFuel_Sequences._default.SeqOfLength |size#0@@1| ($Box (Lit |#MutableMapModel.Item.Empty|))) (LitInt 0) (Lit (|Map#Empty| BoxType BoxType)))))) :qid |unknown.0:0| :skolemid |1523| :pattern ( (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V@@1 |size#0@@1|)) ))))
(assert  (=> (<= 49 $FunctionContextHeight) (forall ((MutableMapModel._default.ConstructorFromSize$V@@2 T@U) (|size#0@@2| Int) ) (!  (=> (and (= (type MutableMapModel._default.ConstructorFromSize$V@@2) TyType) (or (|MutableMapModel.__default.ConstructorFromSize#canCall| MutableMapModel._default.ConstructorFromSize$V@@2 (LitInt |size#0@@2|)) (and (not (= 49 $FunctionContextHeight)) (and (and (<= (LitInt 0) |size#0@@2|) (< |size#0@@2| 18446744073709551616)) (<= (LitInt 128) (LitInt |size#0@@2|)))))) (and (|Sequences.__default.SeqOfLength#canCall| (Tclass.MutableMapModel.Item MutableMapModel._default.ConstructorFromSize$V@@2) (LitInt |size#0@@2|) ($Box (Lit |#MutableMapModel.Item.Empty|))) (= (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V@@2 (LitInt |size#0@@2|)) (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| (Sequences.__default.SeqOfLength (Tclass.MutableMapModel.Item MutableMapModel._default.ConstructorFromSize$V@@2) StartFuel_Sequences._default.SeqOfLength (LitInt |size#0@@2|) ($Box (Lit |#MutableMapModel.Item.Empty|))) (LitInt 0) (Lit (|Map#Empty| BoxType BoxType)))))) :qid |unknown.0:0| :weight 3 :skolemid |1524| :pattern ( (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ConstructorFromSize$V@@2 (LitInt |size#0@@2|))) ))))
(assert (forall ((arg0@@272 T@U) (arg1@@124 T@U) (arg2@@70 Int) ) (! (= (type (MutableMapModel.__default.ConstructorFromStorage arg0@@272 arg1@@124 arg2@@70)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.ConstructorFromStorage| :pattern ( (MutableMapModel.__default.ConstructorFromStorage arg0@@272 arg1@@124 arg2@@70)) )))
(assert  (=> (<= 50 $FunctionContextHeight) (forall ((MutableMapModel._default.ConstructorFromStorage$V T@U) (|storage#0| T@U) (|count#0@@3| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.ConstructorFromStorage$V) TyType) (= (type |storage#0|) (SeqType BoxType))) (or (|MutableMapModel.__default.ConstructorFromStorage#canCall| MutableMapModel._default.ConstructorFromStorage$V |storage#0| |count#0@@3|) (and (not (= 50 $FunctionContextHeight)) (and (and ($Is |storage#0| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.ConstructorFromStorage$V))) (and (<= (LitInt 0) |count#0@@3|) (< |count#0@@3| 18446744073709551616))) (<= (LitInt 128) (|Seq#Length| |storage#0|)))))) (and (and (and (and (|Seq#Equal| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V |storage#0| |count#0@@3|)) |storage#0|) (forall ((|slot#0@@57| T@U) ) (!  (=> (and (and (= (type |slot#0@@57|) DatatypeTypeType) ($Is |slot#0@@57| Tclass.MutableMapModel.Slot)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V |storage#0| |count#0@@3|))) |slot#0@@57|)) (|MutableMapModel.Item#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V |storage#0| |count#0@@3|)) (MutableMapModel.Slot.slot |slot#0@@57|))) ($Unbox DatatypeTypeType (|Seq#Index| |storage#0| (MutableMapModel.Slot.slot |slot#0@@57|))))) :qid |MutableMapModelidfy.395:18| :skolemid |1540| :pattern ( (MutableMapModel.Slot.slot |slot#0@@57|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V |storage#0| |count#0@@3|))) |slot#0@@57|)) ))) (= (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V |storage#0| |count#0@@3|)) |count#0@@3|)) (|Map#Equal| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V |storage#0| |count#0@@3|)) (|Map#Empty| BoxType BoxType))) ($Is (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V |storage#0| |count#0@@3|) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ConstructorFromStorage$V)))) :qid |unknown.0:0| :skolemid |1541| :pattern ( (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V |storage#0| |count#0@@3|)) ))))
(assert (forall ((MutableMapModel._default.ConstructorFromStorage$V@@0 T@U) (|storage#0@@0| T@U) (|count#0@@4| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.ConstructorFromStorage$V@@0) TyType) (= (type |storage#0@@0|) (SeqType BoxType))) (and ($Is |storage#0@@0| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.ConstructorFromStorage$V@@0))) (and (<= (LitInt 0) |count#0@@4|) (< |count#0@@4| 18446744073709551616)))) (= (|MutableMapModel.__default.ConstructorFromStorage#requires| MutableMapModel._default.ConstructorFromStorage$V@@0 |storage#0@@0| |count#0@@4|) (<= (LitInt 128) (|Seq#Length| |storage#0@@0|)))) :qid |unknown.0:0| :skolemid |1542| :pattern ( (|MutableMapModel.__default.ConstructorFromStorage#requires| MutableMapModel._default.ConstructorFromStorage$V@@0 |storage#0@@0| |count#0@@4|)) )))
(assert  (=> (<= 50 $FunctionContextHeight) (forall ((MutableMapModel._default.ConstructorFromStorage$V@@1 T@U) (|storage#0@@1| T@U) (|count#0@@5| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.ConstructorFromStorage$V@@1) TyType) (= (type |storage#0@@1|) (SeqType BoxType))) (or (|MutableMapModel.__default.ConstructorFromStorage#canCall| MutableMapModel._default.ConstructorFromStorage$V@@1 |storage#0@@1| |count#0@@5|) (and (not (= 50 $FunctionContextHeight)) (and (and ($Is |storage#0@@1| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.ConstructorFromStorage$V@@1))) (and (<= (LitInt 0) |count#0@@5|) (< |count#0@@5| 18446744073709551616))) (<= (LitInt 128) (|Seq#Length| |storage#0@@1|)))))) (= (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V@@1 |storage#0@@1| |count#0@@5|) (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage#0@@1| |count#0@@5| (Lit (|Map#Empty| BoxType BoxType))))) :qid |unknown.0:0| :skolemid |1543| :pattern ( (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V@@1 |storage#0@@1| |count#0@@5|)) ))))
(assert  (=> (<= 50 $FunctionContextHeight) (forall ((MutableMapModel._default.ConstructorFromStorage$V@@2 T@U) (|storage#0@@2| T@U) (|count#0@@6| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.ConstructorFromStorage$V@@2) TyType) (= (type |storage#0@@2|) (SeqType BoxType))) (or (|MutableMapModel.__default.ConstructorFromStorage#canCall| MutableMapModel._default.ConstructorFromStorage$V@@2 (Lit |storage#0@@2|) (LitInt |count#0@@6|)) (and (not (= 50 $FunctionContextHeight)) (and (and ($Is |storage#0@@2| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.ConstructorFromStorage$V@@2))) (and (<= (LitInt 0) |count#0@@6|) (< |count#0@@6| 18446744073709551616))) (<= (LitInt 128) (|Seq#Length| (Lit |storage#0@@2|))))))) (= (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V@@2 (Lit |storage#0@@2|) (LitInt |count#0@@6|)) (Lit (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| (Lit |storage#0@@2|) (LitInt |count#0@@6|) (Lit (|Map#Empty| BoxType BoxType)))))) :qid |unknown.0:0| :weight 3 :skolemid |1544| :pattern ( (MutableMapModel.__default.ConstructorFromStorage MutableMapModel._default.ConstructorFromStorage$V@@2 (Lit |storage#0@@2|) (LitInt |count#0@@6|))) ))))
(assert (forall ((arg0@@273 T@U) (arg1@@125 T@U) (arg2@@71 Int) ) (! (= (type (MutableMapModel.__default.View arg0@@273 arg1@@125 arg2@@71)) (SeqType BoxType)) :qid |funType:MutableMapModel.__default.View| :pattern ( (MutableMapModel.__default.View arg0@@273 arg1@@125 arg2@@71)) )))
(assert  (=> (<= 51 $FunctionContextHeight) (forall ((MutableMapModel._default.View$V T@U) (|elements#0@@75| T@U) (|start#0@@3| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.View$V) TyType) (= (type |elements#0@@75|) (SeqType BoxType))) (or (|MutableMapModel.__default.View#canCall| MutableMapModel._default.View$V |elements#0@@75| |start#0@@3|) (and (not (= 51 $FunctionContextHeight)) (and (and ($Is |elements#0@@75| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.View$V))) (<= (LitInt 0) |start#0@@3|)) (< |start#0@@3| (|Seq#Length| |elements#0@@75|)))))) (and (= (|Seq#Length| (MutableMapModel.__default.View MutableMapModel._default.View$V |elements#0@@75| |start#0@@3|)) (|Seq#Length| |elements#0@@75|)) ($Is (MutableMapModel.__default.View MutableMapModel._default.View$V |elements#0@@75| |start#0@@3|) (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.View$V))))) :qid |unknown.0:0| :skolemid |1547| :pattern ( (MutableMapModel.__default.View MutableMapModel._default.View$V |elements#0@@75| |start#0@@3|)) ))))
(assert (forall ((MutableMapModel._default.View$V@@0 T@U) (|elements#0@@76| T@U) (|start#0@@4| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.View$V@@0) TyType) (= (type |elements#0@@76|) (SeqType BoxType))) (and ($Is |elements#0@@76| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.View$V@@0))) (<= (LitInt 0) |start#0@@4|))) (= (|MutableMapModel.__default.View#requires| MutableMapModel._default.View$V@@0 |elements#0@@76| |start#0@@4|) (< |start#0@@4| (|Seq#Length| |elements#0@@76|)))) :qid |unknown.0:0| :skolemid |1548| :pattern ( (|MutableMapModel.__default.View#requires| MutableMapModel._default.View$V@@0 |elements#0@@76| |start#0@@4|)) )))
(assert  (=> (<= 51 $FunctionContextHeight) (forall ((MutableMapModel._default.View$V@@1 T@U) (|elements#0@@77| T@U) (|start#0@@5| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.View$V@@1) TyType) (= (type |elements#0@@77|) (SeqType BoxType))) (or (|MutableMapModel.__default.View#canCall| MutableMapModel._default.View$V@@1 |elements#0@@77| |start#0@@5|) (and (not (= 51 $FunctionContextHeight)) (and (and ($Is |elements#0@@77| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.View$V@@1))) (<= (LitInt 0) |start#0@@5|)) (< |start#0@@5| (|Seq#Length| |elements#0@@77|)))))) (= (MutableMapModel.__default.View MutableMapModel._default.View$V@@1 |elements#0@@77| |start#0@@5|) (|Seq#Append| (|Seq#Drop| |elements#0@@77| |start#0@@5|) (|Seq#Take| |elements#0@@77| |start#0@@5|)))) :qid |unknown.0:0| :skolemid |1549| :pattern ( (MutableMapModel.__default.View MutableMapModel._default.View$V@@1 |elements#0@@77| |start#0@@5|)) ))))
(assert  (=> (<= 51 $FunctionContextHeight) (forall ((MutableMapModel._default.View$V@@2 T@U) (|elements#0@@78| T@U) (|start#0@@6| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.View$V@@2) TyType) (= (type |elements#0@@78|) (SeqType BoxType))) (or (|MutableMapModel.__default.View#canCall| MutableMapModel._default.View$V@@2 (Lit |elements#0@@78|) (LitInt |start#0@@6|)) (and (not (= 51 $FunctionContextHeight)) (and (and ($Is |elements#0@@78| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.View$V@@2))) (<= (LitInt 0) |start#0@@6|)) (< |start#0@@6| (|Seq#Length| (Lit |elements#0@@78|))))))) (= (MutableMapModel.__default.View MutableMapModel._default.View$V@@2 (Lit |elements#0@@78|) (LitInt |start#0@@6|)) (|Seq#Append| (|Seq#Drop| (Lit |elements#0@@78|) (LitInt |start#0@@6|)) (|Seq#Take| (Lit |elements#0@@78|) (LitInt |start#0@@6|))))) :qid |unknown.0:0| :weight 3 :skolemid |1550| :pattern ( (MutableMapModel.__default.View MutableMapModel._default.View$V@@2 (Lit |elements#0@@78|) (LitInt |start#0@@6|))) ))))
(assert  (=> (<= 53 $FunctionContextHeight) (forall ((|elementsLength#0@@21| Int) (|slot#0@@58| Int) ) (!  (=> (or (|MutableMapModel.__default.Uint64SlotSuccessor#canCall| |elementsLength#0@@21| |slot#0@@58|) (and (not (= 53 $FunctionContextHeight)) (and (and (<= (LitInt 0) |elementsLength#0@@21|) (and (<= (LitInt 0) |slot#0@@58|) (< |slot#0@@58| 18446744073709551616))) (and (< |elementsLength#0@@21| 18446744073709551616) (MutableMapModel.__default.ValidSlot |elementsLength#0@@21| (|#MutableMapModel.Slot.Slot| |slot#0@@58|)))))) (and (and (MutableMapModel.__default.ValidSlot |elementsLength#0@@21| (|#MutableMapModel.Slot.Slot| (MutableMapModel.__default.Uint64SlotSuccessor |elementsLength#0@@21| |slot#0@@58|))) (|MutableMapModel.Slot#Equal| (|#MutableMapModel.Slot.Slot| (MutableMapModel.__default.Uint64SlotSuccessor |elementsLength#0@@21| |slot#0@@58|)) (MutableMapModel.__default.SlotSuccessor |elementsLength#0@@21| (|#MutableMapModel.Slot.Slot| |slot#0@@58|)))) (and (<= (LitInt 0) (MutableMapModel.__default.Uint64SlotSuccessor |elementsLength#0@@21| |slot#0@@58|)) (< (MutableMapModel.__default.Uint64SlotSuccessor |elementsLength#0@@21| |slot#0@@58|) 18446744073709551616)))) :qid |MutableMapModelidfy.425:32| :skolemid |1554| :pattern ( (MutableMapModel.__default.Uint64SlotSuccessor |elementsLength#0@@21| |slot#0@@58|)) ))))
(assert (forall ((|elementsLength#0@@22| Int) (|slot#0@@59| Int) ) (!  (=> (and (<= (LitInt 0) |elementsLength#0@@22|) (and (<= (LitInt 0) |slot#0@@59|) (< |slot#0@@59| 18446744073709551616))) (= (|MutableMapModel.__default.Uint64SlotSuccessor#requires| |elementsLength#0@@22| |slot#0@@59|)  (and (< |elementsLength#0@@22| 18446744073709551616) (MutableMapModel.__default.ValidSlot |elementsLength#0@@22| (|#MutableMapModel.Slot.Slot| |slot#0@@59|))))) :qid |MutableMapModelidfy.425:32| :skolemid |1555| :pattern ( (|MutableMapModel.__default.Uint64SlotSuccessor#requires| |elementsLength#0@@22| |slot#0@@59|)) )))
(assert  (=> (<= 53 $FunctionContextHeight) (forall ((|elementsLength#0@@23| Int) (|slot#0@@60| Int) ) (!  (=> (or (|MutableMapModel.__default.Uint64SlotSuccessor#canCall| |elementsLength#0@@23| |slot#0@@60|) (and (not (= 53 $FunctionContextHeight)) (and (and (<= (LitInt 0) |elementsLength#0@@23|) (and (<= (LitInt 0) |slot#0@@60|) (< |slot#0@@60| 18446744073709551616))) (and (< |elementsLength#0@@23| 18446744073709551616) (MutableMapModel.__default.ValidSlot |elementsLength#0@@23| (|#MutableMapModel.Slot.Slot| |slot#0@@60|)))))) (= (MutableMapModel.__default.Uint64SlotSuccessor |elementsLength#0@@23| |slot#0@@60|) (ite (= |slot#0@@60| (- |elementsLength#0@@23| 1)) 0 (+ |slot#0@@60| 1)))) :qid |MutableMapModelidfy.425:32| :skolemid |1556| :pattern ( (MutableMapModel.__default.Uint64SlotSuccessor |elementsLength#0@@23| |slot#0@@60|)) ))))
(assert  (=> (<= 53 $FunctionContextHeight) (forall ((|elementsLength#0@@24| Int) (|slot#0@@61| Int) ) (!  (=> (or (|MutableMapModel.__default.Uint64SlotSuccessor#canCall| (LitInt |elementsLength#0@@24|) (LitInt |slot#0@@61|)) (and (not (= 53 $FunctionContextHeight)) (and (and (<= (LitInt 0) |elementsLength#0@@24|) (and (<= (LitInt 0) |slot#0@@61|) (< |slot#0@@61| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (< |elementsLength#0@@24| 18446744073709551616)))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidSlot (LitInt |elementsLength#0@@24|) (Lit (|#MutableMapModel.Slot.Slot| (LitInt |slot#0@@61|))))))))))) (= (MutableMapModel.__default.Uint64SlotSuccessor (LitInt |elementsLength#0@@24|) (LitInt |slot#0@@61|)) (ite (= (LitInt |slot#0@@61|) (LitInt (- |elementsLength#0@@24| 1))) 0 (+ |slot#0@@61| 1)))) :qid |MutableMapModelidfy.425:32| :weight 3 :skolemid |1557| :pattern ( (MutableMapModel.__default.Uint64SlotSuccessor (LitInt |elementsLength#0@@24|) (LitInt |slot#0@@61|))) ))))
(assert (forall ((MutableMapModel._default.getEmptyWitness$V T@U) ($ly@@41 T@U) (|self#0@@7| T@U) (|i#0| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.getEmptyWitness$V) TyType) (= (type $ly@@41) LayerTypeType)) (= (type |self#0@@7|) DatatypeTypeType)) (= (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V ($LS $ly@@41) |self#0@@7| |i#0|) (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V $ly@@41 |self#0@@7| |i#0|))) :qid |unknown.0:0| :skolemid |1594| :pattern ( (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V ($LS $ly@@41) |self#0@@7| |i#0|)) )))
(assert (forall ((MutableMapModel._default.getEmptyWitness$V@@0 T@U) ($ly@@42 T@U) (|self#0@@8| T@U) (|i#0@@0| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.getEmptyWitness$V@@0) TyType) (= (type $ly@@42) LayerTypeType)) (= (type |self#0@@8|) DatatypeTypeType)) (= (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@0 $ly@@42 |self#0@@8| |i#0@@0|) (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@0 $LZ |self#0@@8| |i#0@@0|))) :qid |unknown.0:0| :skolemid |1595| :pattern ( (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@0 (AsFuelBottom $ly@@42) |self#0@@8| |i#0@@0|)) )))
(assert  (=> (<= 55 $FunctionContextHeight) (forall ((MutableMapModel._default.getEmptyWitness$V@@1 T@U) ($ly@@43 T@U) (|self#0@@9| T@U) (|i#0@@1| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.getEmptyWitness$V@@1) TyType) (= (type $ly@@43) LayerTypeType)) (= (type |self#0@@9|) DatatypeTypeType)) (or (|MutableMapModel.__default.getEmptyWitness#canCall| MutableMapModel._default.getEmptyWitness$V@@1 |self#0@@9| |i#0@@1|) (and (not (= 55 $FunctionContextHeight)) (and (and ($Is |self#0@@9| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.getEmptyWitness$V@@1)) (and (<= (LitInt 0) |i#0@@1|) (< |i#0@@1| 18446744073709551616))) (and (and (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.getEmptyWitness$V@@1 |self#0@@9|) (and (<= (LitInt 0) |i#0@@1|) (<= |i#0@@1| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@9|))))) (forall ((|j#0| Int) ) (!  (=> (and (and (<= (LitInt 0) |j#0|) (< |j#0| 18446744073709551616)) (and (<= (LitInt 0) |j#0|) (< |j#0| |i#0@@1|))) (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@9|) |j#0|))))) :qid |MutableMapModelidfy.454:19| :skolemid |1596| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@9|) |j#0|))) ))) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@9|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@9|)))))))) (and (and (and (<= (LitInt 0) (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@1 $ly@@43 |self#0@@9| |i#0@@1|)) (< (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@1 $ly@@43 |self#0@@9| |i#0@@1|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@9|)))) (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@9|) (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@1 $ly@@43 |self#0@@9| |i#0@@1|))))) (and (<= (LitInt 0) (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@1 $ly@@43 |self#0@@9| |i#0@@1|)) (< (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@1 $ly@@43 |self#0@@9| |i#0@@1|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1597| :pattern ( (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@1 $ly@@43 |self#0@@9| |i#0@@1|)) ))))
(assert (forall ((MutableMapModel._default.getEmptyWitness$V@@2 T@U) ($ly@@44 T@U) (|self#0@@10| T@U) (|i#0@@2| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.getEmptyWitness$V@@2) TyType) (= (type $ly@@44) LayerTypeType)) (= (type |self#0@@10|) DatatypeTypeType)) (and ($Is |self#0@@10| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.getEmptyWitness$V@@2)) (and (<= (LitInt 0) |i#0@@2|) (< |i#0@@2| 18446744073709551616)))) (= (|MutableMapModel.__default.getEmptyWitness#requires| MutableMapModel._default.getEmptyWitness$V@@2 $ly@@44 |self#0@@10| |i#0@@2|)  (and (and (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.getEmptyWitness$V@@2 |self#0@@10|) (and (<= (LitInt 0) |i#0@@2|) (<= |i#0@@2| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@10|))))) (forall ((|j#1| Int) ) (!  (=> (and (and (<= (LitInt 0) |j#1|) (< |j#1| 18446744073709551616)) (and (<= (LitInt 0) |j#1|) (< |j#1| |i#0@@2|))) (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@10|) |j#1|))))) :qid |MutableMapModelidfy.454:19| :skolemid |1598| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@10|) |j#1|))) ))) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@10|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@10|)))))) :qid |unknown.0:0| :skolemid |1599| :pattern ( (|MutableMapModel.__default.getEmptyWitness#requires| MutableMapModel._default.getEmptyWitness$V@@2 $ly@@44 |self#0@@10| |i#0@@2|)) )))
(assert  (=> (<= 55 $FunctionContextHeight) (forall ((MutableMapModel._default.getEmptyWitness$V@@3 T@U) ($ly@@45 T@U) (|self#0@@11| T@U) (|i#0@@3| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.getEmptyWitness$V@@3) TyType) (= (type $ly@@45) LayerTypeType)) (= (type |self#0@@11|) DatatypeTypeType)) (or (|MutableMapModel.__default.getEmptyWitness#canCall| MutableMapModel._default.getEmptyWitness$V@@3 |self#0@@11| |i#0@@3|) (and (not (= 55 $FunctionContextHeight)) (and (and ($Is |self#0@@11| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.getEmptyWitness$V@@3)) (and (<= (LitInt 0) |i#0@@3|) (< |i#0@@3| 18446744073709551616))) (and (and (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.getEmptyWitness$V@@3 |self#0@@11|) (and (<= (LitInt 0) |i#0@@3|) (<= |i#0@@3| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@11|))))) (forall ((|j#1@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |j#1@@0|) (< |j#1@@0| 18446744073709551616)) (and (<= (LitInt 0) |j#1@@0|) (< |j#1@@0| |i#0@@3|))) (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@11|) |j#1@@0|))))) :qid |MutableMapModelidfy.454:19| :skolemid |1598| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@11|) |j#1@@0|))) ))) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@11|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@11|)))))))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@11|) (=> (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@11|) |i#0@@3|)))) (|MutableMapModel.__default.getEmptyWitness#canCall| MutableMapModel._default.getEmptyWitness$V@@3 |self#0@@11| (+ |i#0@@3| 1)))) (= (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@3 ($LS $ly@@45) |self#0@@11| |i#0@@3|) (ite (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@11|) |i#0@@3|))) |i#0@@3| (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@3 $ly@@45 |self#0@@11| (+ |i#0@@3| 1)))))) :qid |unknown.0:0| :skolemid |1600| :pattern ( (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@3 ($LS $ly@@45) |self#0@@11| |i#0@@3|)) ))))
(assert  (=> (<= 55 $FunctionContextHeight) (forall ((MutableMapModel._default.getEmptyWitness$V@@4 T@U) ($ly@@46 T@U) (|self#0@@12| T@U) (|i#0@@4| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.getEmptyWitness$V@@4) TyType) (= (type $ly@@46) LayerTypeType)) (= (type |self#0@@12|) DatatypeTypeType)) (or (|MutableMapModel.__default.getEmptyWitness#canCall| MutableMapModel._default.getEmptyWitness$V@@4 (Lit |self#0@@12|) (LitInt |i#0@@4|)) (and (not (= 55 $FunctionContextHeight)) (and (and ($Is |self#0@@12| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.getEmptyWitness$V@@4)) (and (<= (LitInt 0) |i#0@@4|) (< |i#0@@4| 18446744073709551616))) (and (and (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.getEmptyWitness$V@@4 (Lit |self#0@@12|))))) (and (<= (LitInt 0) (LitInt |i#0@@4|)) (<= (LitInt |i#0@@4|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@12|))))))) (forall ((|j#2| Int) ) (!  (=> (and (and (<= (LitInt 0) |j#2|) (< |j#2| 18446744073709551616)) (and (<= (LitInt 0) |j#2|) (< |j#2| |i#0@@4|))) (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@12|))) |j#2|))))) :qid |MutableMapModelidfy.454:19| :skolemid |1601| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@12|) |j#2|))) ))) (< (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@12|)) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@12|)))))))))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@12|)) (=> (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@12|))) (LitInt |i#0@@4|))))) (|MutableMapModel.__default.getEmptyWitness#canCall| MutableMapModel._default.getEmptyWitness$V@@4 (Lit |self#0@@12|) (LitInt (+ |i#0@@4| 1))))) (= (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@4 ($LS $ly@@46) (Lit |self#0@@12|) (LitInt |i#0@@4|)) (ite (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@12|))) (LitInt |i#0@@4|)))) |i#0@@4| (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@4 ($LS $ly@@46) (Lit |self#0@@12|) (LitInt (+ |i#0@@4| 1))))))) :qid |unknown.0:0| :weight 3 :skolemid |1602| :pattern ( (MutableMapModel.__default.getEmptyWitness MutableMapModel._default.getEmptyWitness$V@@4 ($LS $ly@@46) (Lit |self#0@@12|) (LitInt |i#0@@4|))) ))))
(assert (forall ((MutableMapModel._default.ProbeIterate$V T@U) ($ly@@47 T@U) (|self#0@@13| T@U) (|key#0@@23| Int) (|slotIdx#0| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.ProbeIterate$V) TyType) (= (type $ly@@47) LayerTypeType)) (= (type |self#0@@13|) DatatypeTypeType)) (= (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V ($LS $ly@@47) |self#0@@13| |key#0@@23| |slotIdx#0|) (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V $ly@@47 |self#0@@13| |key#0@@23| |slotIdx#0|))) :qid |unknown.0:0| :skolemid |1620| :pattern ( (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V ($LS $ly@@47) |self#0@@13| |key#0@@23| |slotIdx#0|)) )))
(assert (forall ((MutableMapModel._default.ProbeIterate$V@@0 T@U) ($ly@@48 T@U) (|self#0@@14| T@U) (|key#0@@24| Int) (|slotIdx#0@@0| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.ProbeIterate$V@@0) TyType) (= (type $ly@@48) LayerTypeType)) (= (type |self#0@@14|) DatatypeTypeType)) (= (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@0 $ly@@48 |self#0@@14| |key#0@@24| |slotIdx#0@@0|) (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@0 $LZ |self#0@@14| |key#0@@24| |slotIdx#0@@0|))) :qid |unknown.0:0| :skolemid |1621| :pattern ( (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@0 (AsFuelBottom $ly@@48) |self#0@@14| |key#0@@24| |slotIdx#0@@0|)) )))
(assert  (=> (<= 56 $FunctionContextHeight) (forall ((MutableMapModel._default.ProbeIterate$V@@1 T@U) ($ly@@49 T@U) (|self#0@@15| T@U) (|key#0@@25| Int) (|slotIdx#0@@1| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ProbeIterate$V@@1) TyType) (= (type $ly@@49) LayerTypeType)) (= (type |self#0@@15|) DatatypeTypeType)) (or (|MutableMapModel.__default.ProbeIterate#canCall| MutableMapModel._default.ProbeIterate$V@@1 |self#0@@15| |key#0@@25| |slotIdx#0@@1|) (and (not (= 56 $FunctionContextHeight)) (and (and (and ($Is |self#0@@15| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ProbeIterate$V@@1)) (and (<= (LitInt 0) |key#0@@25|) (< |key#0@@25| 18446744073709551616))) (and (<= (LitInt 0) |slotIdx#0@@1|) (< |slotIdx#0@@1| 18446744073709551616))) (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ProbeIterate$V@@1 |self#0@@15|) (and (<= (LitInt 0) |slotIdx#0@@1|) (< |slotIdx#0@@1| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@15|))))))))) (and (and (<= (LitInt 0) (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@1 $ly@@49 |self#0@@15| |key#0@@25| |slotIdx#0@@1|)) (< (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@1 $ly@@49 |self#0@@15| |key#0@@25| |slotIdx#0@@1|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@15|)))) (and (<= (LitInt 0) (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@1 $ly@@49 |self#0@@15| |key#0@@25| |slotIdx#0@@1|)) (< (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@1 $ly@@49 |self#0@@15| |key#0@@25| |slotIdx#0@@1|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1622| :pattern ( (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@1 $ly@@49 |self#0@@15| |key#0@@25| |slotIdx#0@@1|)) ))))
(assert (forall ((MutableMapModel._default.ProbeIterate$V@@2 T@U) ($ly@@50 T@U) (|self#0@@16| T@U) (|key#0@@26| Int) (|slotIdx#0@@2| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ProbeIterate$V@@2) TyType) (= (type $ly@@50) LayerTypeType)) (= (type |self#0@@16|) DatatypeTypeType)) (and (and ($Is |self#0@@16| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ProbeIterate$V@@2)) (and (<= (LitInt 0) |key#0@@26|) (< |key#0@@26| 18446744073709551616))) (and (<= (LitInt 0) |slotIdx#0@@2|) (< |slotIdx#0@@2| 18446744073709551616)))) (= (|MutableMapModel.__default.ProbeIterate#requires| MutableMapModel._default.ProbeIterate$V@@2 $ly@@50 |self#0@@16| |key#0@@26| |slotIdx#0@@2|)  (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ProbeIterate$V@@2 |self#0@@16|) (and (<= (LitInt 0) |slotIdx#0@@2|) (< |slotIdx#0@@2| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@16|))))))) :qid |unknown.0:0| :skolemid |1623| :pattern ( (|MutableMapModel.__default.ProbeIterate#requires| MutableMapModel._default.ProbeIterate$V@@2 $ly@@50 |self#0@@16| |key#0@@26| |slotIdx#0@@2|)) )))
(assert  (=> (<= 56 $FunctionContextHeight) (forall ((MutableMapModel._default.ProbeIterate$V@@3 T@U) ($ly@@51 T@U) (|self#0@@17| T@U) (|key#0@@27| Int) (|slotIdx#0@@3| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ProbeIterate$V@@3) TyType) (= (type $ly@@51) LayerTypeType)) (= (type |self#0@@17|) DatatypeTypeType)) (or (|MutableMapModel.__default.ProbeIterate#canCall| MutableMapModel._default.ProbeIterate$V@@3 |self#0@@17| |key#0@@27| |slotIdx#0@@3|) (and (not (= 56 $FunctionContextHeight)) (and (and (and ($Is |self#0@@17| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ProbeIterate$V@@3)) (and (<= (LitInt 0) |key#0@@27|) (< |key#0@@27| 18446744073709551616))) (and (<= (LitInt 0) |slotIdx#0@@3|) (< |slotIdx#0@@3| 18446744073709551616))) (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ProbeIterate$V@@3 |self#0@@17|) (and (<= (LitInt 0) |slotIdx#0@@3|) (< |slotIdx#0@@3| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@17|))))))))) (and (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@17|) (=> (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@17|) |slotIdx#0@@3|)))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@17|))) (=> (not (or (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@17|) |slotIdx#0@@3|))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@17|) |slotIdx#0@@3|))) |key#0@@27|))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@17|) (|MutableMapModel.__default.Uint64SlotSuccessor#canCall| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@17|)) |slotIdx#0@@3|)) (|MutableMapModel.__default.ProbeIterate#canCall| MutableMapModel._default.ProbeIterate$V@@3 |self#0@@17| |key#0@@27| (MutableMapModel.__default.Uint64SlotSuccessor (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@17|)) |slotIdx#0@@3|))))) (= (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@3 ($LS $ly@@51) |self#0@@17| |key#0@@27| |slotIdx#0@@3|) (ite  (or (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@17|) |slotIdx#0@@3|))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@17|) |slotIdx#0@@3|))) |key#0@@27|)) |slotIdx#0@@3| (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@3 $ly@@51 |self#0@@17| |key#0@@27| (MutableMapModel.__default.Uint64SlotSuccessor (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@17|)) |slotIdx#0@@3|)))))) :qid |unknown.0:0| :skolemid |1624| :pattern ( (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@3 ($LS $ly@@51) |self#0@@17| |key#0@@27| |slotIdx#0@@3|)) ))))
(assert  (=> (<= 56 $FunctionContextHeight) (forall ((MutableMapModel._default.ProbeIterate$V@@4 T@U) ($ly@@52 T@U) (|self#0@@18| T@U) (|key#0@@28| Int) (|slotIdx#0@@4| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ProbeIterate$V@@4) TyType) (= (type $ly@@52) LayerTypeType)) (= (type |self#0@@18|) DatatypeTypeType)) (or (|MutableMapModel.__default.ProbeIterate#canCall| MutableMapModel._default.ProbeIterate$V@@4 (Lit |self#0@@18|) |key#0@@28| (LitInt |slotIdx#0@@4|)) (and (not (= 56 $FunctionContextHeight)) (and (and (and ($Is |self#0@@18| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ProbeIterate$V@@4)) (and (<= (LitInt 0) |key#0@@28|) (< |key#0@@28| 18446744073709551616))) (and (<= (LitInt 0) |slotIdx#0@@4|) (< |slotIdx#0@@4| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ProbeIterate$V@@4 (Lit |self#0@@18|))))) (and (<= (LitInt 0) (LitInt |slotIdx#0@@4|)) (< |slotIdx#0@@4| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@18|))))))))))) (and (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@18|)) (=> (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@18|))) (LitInt |slotIdx#0@@4|))))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@18|)))) (=> (not (or (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@18|))) (LitInt |slotIdx#0@@4|)))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@18|))) (LitInt |slotIdx#0@@4|)))) |key#0@@28|))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@18|)) (|MutableMapModel.__default.Uint64SlotSuccessor#canCall| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@18|)))) (LitInt |slotIdx#0@@4|))) (|MutableMapModel.__default.ProbeIterate#canCall| MutableMapModel._default.ProbeIterate$V@@4 (Lit |self#0@@18|) |key#0@@28| (MutableMapModel.__default.Uint64SlotSuccessor (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@18|)))) (LitInt |slotIdx#0@@4|)))))) (= (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@4 ($LS $ly@@52) (Lit |self#0@@18|) |key#0@@28| (LitInt |slotIdx#0@@4|)) (ite  (or (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@18|))) (LitInt |slotIdx#0@@4|)))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@18|))) (LitInt |slotIdx#0@@4|)))) |key#0@@28|)) |slotIdx#0@@4| (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@4 ($LS $ly@@52) (Lit |self#0@@18|) |key#0@@28| (MutableMapModel.__default.Uint64SlotSuccessor (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@18|)))) (LitInt |slotIdx#0@@4|))))))) :qid |unknown.0:0| :weight 3 :skolemid |1625| :pattern ( (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@4 ($LS $ly@@52) (Lit |self#0@@18|) |key#0@@28| (LitInt |slotIdx#0@@4|))) ))))
(assert  (=> (<= 56 $FunctionContextHeight) (forall ((MutableMapModel._default.ProbeIterate$V@@5 T@U) ($ly@@53 T@U) (|self#0@@19| T@U) (|key#0@@29| Int) (|slotIdx#0@@5| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ProbeIterate$V@@5) TyType) (= (type $ly@@53) LayerTypeType)) (= (type |self#0@@19|) DatatypeTypeType)) (or (|MutableMapModel.__default.ProbeIterate#canCall| MutableMapModel._default.ProbeIterate$V@@5 (Lit |self#0@@19|) (LitInt |key#0@@29|) (LitInt |slotIdx#0@@5|)) (and (not (= 56 $FunctionContextHeight)) (and (and (and ($Is |self#0@@19| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ProbeIterate$V@@5)) (and (<= (LitInt 0) |key#0@@29|) (< |key#0@@29| 18446744073709551616))) (and (<= (LitInt 0) |slotIdx#0@@5|) (< |slotIdx#0@@5| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ProbeIterate$V@@5 (Lit |self#0@@19|))))) (and (<= (LitInt 0) (LitInt |slotIdx#0@@5|)) (< |slotIdx#0@@5| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@19|))))))))))) (and (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@19|)) (=> (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@19|))) (LitInt |slotIdx#0@@5|))))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@19|)))) (=> (not (or (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@19|))) (LitInt |slotIdx#0@@5|)))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@19|))) (LitInt |slotIdx#0@@5|)))) (LitInt |key#0@@29|)))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@19|)) (|MutableMapModel.__default.Uint64SlotSuccessor#canCall| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@19|)))) (LitInt |slotIdx#0@@5|))) (|MutableMapModel.__default.ProbeIterate#canCall| MutableMapModel._default.ProbeIterate$V@@5 (Lit |self#0@@19|) (LitInt |key#0@@29|) (MutableMapModel.__default.Uint64SlotSuccessor (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@19|)))) (LitInt |slotIdx#0@@5|)))))) (= (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@5 ($LS $ly@@53) (Lit |self#0@@19|) (LitInt |key#0@@29|) (LitInt |slotIdx#0@@5|)) (ite  (or (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@19|))) (LitInt |slotIdx#0@@5|)))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@19|))) (LitInt |slotIdx#0@@5|)))) (LitInt |key#0@@29|))) |slotIdx#0@@5| (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@5 ($LS $ly@@53) (Lit |self#0@@19|) (LitInt |key#0@@29|) (MutableMapModel.__default.Uint64SlotSuccessor (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@19|)))) (LitInt |slotIdx#0@@5|))))))) :qid |unknown.0:0| :weight 3 :skolemid |1626| :pattern ( (MutableMapModel.__default.ProbeIterate MutableMapModel._default.ProbeIterate$V@@5 ($LS $ly@@53) (Lit |self#0@@19|) (LitInt |key#0@@29|) (LitInt |slotIdx#0@@5|))) ))))
(assert (forall ((MutableMapModel._default.Probe$V T@U) ($ly@@54 T@U) (|self#0@@20| T@U) (|key#0@@30| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Probe$V) TyType) (= (type $ly@@54) LayerTypeType)) (= (type |self#0@@20|) DatatypeTypeType)) (= (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V ($LS $ly@@54) |self#0@@20| |key#0@@30|) (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V $ly@@54 |self#0@@20| |key#0@@30|))) :qid |unknown.0:0| :skolemid |1656| :pattern ( (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V ($LS $ly@@54) |self#0@@20| |key#0@@30|)) )))
(assert (forall ((MutableMapModel._default.Probe$V@@0 T@U) ($ly@@55 T@U) (|self#0@@21| T@U) (|key#0@@31| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Probe$V@@0) TyType) (= (type $ly@@55) LayerTypeType)) (= (type |self#0@@21|) DatatypeTypeType)) (= (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@0 $ly@@55 |self#0@@21| |key#0@@31|) (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@0 $LZ |self#0@@21| |key#0@@31|))) :qid |unknown.0:0| :skolemid |1657| :pattern ( (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@0 (AsFuelBottom $ly@@55) |self#0@@21| |key#0@@31|)) )))
(assert  (=> (<= 57 $FunctionContextHeight) (forall ((MutableMapModel._default.Probe$V@@1 T@U) ($ly@@56 T@U) (|self#0@@22| T@U) (|key#0@@32| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.Probe$V@@1) TyType) (= (type $ly@@56) LayerTypeType)) (= (type |self#0@@22|) DatatypeTypeType)) (or (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.Probe$V@@1 |self#0@@22| |key#0@@32|) (and (not (= 57 $FunctionContextHeight)) (and (and ($Is |self#0@@22| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.Probe$V@@1)) (and (<= (LitInt 0) |key#0@@32|) (< |key#0@@32| 18446744073709551616))) (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.Probe$V@@1 |self#0@@22|) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@22|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@22|)))))))) (and (and (<= (LitInt 0) (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@1 $ly@@56 |self#0@@22| |key#0@@32|)) (< (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@1 $ly@@56 |self#0@@22| |key#0@@32|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@22|)))) (and (<= (LitInt 0) (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@1 $ly@@56 |self#0@@22| |key#0@@32|)) (< (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@1 $ly@@56 |self#0@@22| |key#0@@32|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |1658| :pattern ( (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@1 $ly@@56 |self#0@@22| |key#0@@32|)) ))))
(assert (forall ((MutableMapModel._default.Probe$V@@2 T@U) ($ly@@57 T@U) (|self#0@@23| T@U) (|key#0@@33| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.Probe$V@@2) TyType) (= (type $ly@@57) LayerTypeType)) (= (type |self#0@@23|) DatatypeTypeType)) (and ($Is |self#0@@23| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.Probe$V@@2)) (and (<= (LitInt 0) |key#0@@33|) (< |key#0@@33| 18446744073709551616)))) (= (|MutableMapModel.__default.Probe#requires| MutableMapModel._default.Probe$V@@2 $ly@@57 |self#0@@23| |key#0@@33|)  (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.Probe$V@@2 |self#0@@23|) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@23|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@23|)))))) :qid |unknown.0:0| :skolemid |1659| :pattern ( (|MutableMapModel.__default.Probe#requires| MutableMapModel._default.Probe$V@@2 $ly@@57 |self#0@@23| |key#0@@33|)) )))
(assert  (=> (<= 57 $FunctionContextHeight) (forall ((MutableMapModel._default.Probe$V@@3 T@U) ($ly@@58 T@U) (|self#0@@24| T@U) (|key#0@@34| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.Probe$V@@3) TyType) (= (type $ly@@58) LayerTypeType)) (= (type |self#0@@24|) DatatypeTypeType)) (or (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.Probe$V@@3 |self#0@@24| |key#0@@34|) (and (not (= 57 $FunctionContextHeight)) (and (and ($Is |self#0@@24| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.Probe$V@@3)) (and (<= (LitInt 0) |key#0@@34|) (< |key#0@@34| 18446744073709551616))) (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.Probe$V@@3 |self#0@@24|) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@24|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@24|)))))))) (and (and (|MutableMapModel.__default.Uint64SlotForKey#canCall| MutableMapModel._default.Probe$V@@3 |self#0@@24| |key#0@@34|) (|MutableMapModel.__default.ProbeIterate#canCall| MutableMapModel._default.Probe$V@@3 |self#0@@24| |key#0@@34| (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Probe$V@@3 |self#0@@24| |key#0@@34|))) (= (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@3 ($LS $ly@@58) |self#0@@24| |key#0@@34|) (MutableMapModel.__default.ProbeIterate MutableMapModel._default.Probe$V@@3 ($LS $LZ) |self#0@@24| |key#0@@34| (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Probe$V@@3 |self#0@@24| |key#0@@34|))))) :qid |unknown.0:0| :skolemid |1660| :pattern ( (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@3 ($LS $ly@@58) |self#0@@24| |key#0@@34|)) ))))
(assert  (=> (<= 57 $FunctionContextHeight) (forall ((MutableMapModel._default.Probe$V@@4 T@U) ($ly@@59 T@U) (|self#0@@25| T@U) (|key#0@@35| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.Probe$V@@4) TyType) (= (type $ly@@59) LayerTypeType)) (= (type |self#0@@25|) DatatypeTypeType)) (or (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.Probe$V@@4 (Lit |self#0@@25|) (LitInt |key#0@@35|)) (and (not (= 57 $FunctionContextHeight)) (and (and ($Is |self#0@@25| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.Probe$V@@4)) (and (<= (LitInt 0) |key#0@@35|) (< |key#0@@35| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.Probe$V@@4 (Lit |self#0@@25|))))) (< (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@25|)) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@25|)))))))))) (and (and (|MutableMapModel.__default.Uint64SlotForKey#canCall| MutableMapModel._default.Probe$V@@4 (Lit |self#0@@25|) (LitInt |key#0@@35|)) (|MutableMapModel.__default.ProbeIterate#canCall| MutableMapModel._default.Probe$V@@4 (Lit |self#0@@25|) (LitInt |key#0@@35|) (LitInt (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Probe$V@@4 (Lit |self#0@@25|) (LitInt |key#0@@35|))))) (= (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@4 ($LS $ly@@59) (Lit |self#0@@25|) (LitInt |key#0@@35|)) (LitInt (MutableMapModel.__default.ProbeIterate MutableMapModel._default.Probe$V@@4 ($LS $LZ) (Lit |self#0@@25|) (LitInt |key#0@@35|) (LitInt (MutableMapModel.__default.Uint64SlotForKey MutableMapModel._default.Probe$V@@4 (Lit |self#0@@25|) (LitInt |key#0@@35|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1661| :pattern ( (MutableMapModel.__default.Probe MutableMapModel._default.Probe$V@@4 ($LS $ly@@59) (Lit |self#0@@25|) (LitInt |key#0@@35|))) ))))
(assert (forall ((arg0@@274 T@U) (arg1@@126 T@U) (arg2@@72 T@U) (arg3@@43 Int) (arg4@@29 T@U) ) (! (= (type (MutableMapModel.__default.FixedSizeInsert arg0@@274 arg1@@126 arg2@@72 arg3@@43 arg4@@29)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.FixedSizeInsert| :pattern ( (MutableMapModel.__default.FixedSizeInsert arg0@@274 arg1@@126 arg2@@72 arg3@@43 arg4@@29)) )))
(assert (forall ((MutableMapModel._default.FixedSizeInsert$V T@U) ($ly@@60 T@U) (|self#0@@26| T@U) (|key#0@@36| Int) (|value#0| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeInsert$V) TyType) (= (type $ly@@60) LayerTypeType)) (= (type |self#0@@26|) DatatypeTypeType)) (= (type |value#0|) BoxType)) (= (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V ($LS $ly@@60) |self#0@@26| |key#0@@36| |value#0|) (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V $ly@@60 |self#0@@26| |key#0@@36| |value#0|))) :qid |unknown.0:0| :skolemid |1793| :pattern ( (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V ($LS $ly@@60) |self#0@@26| |key#0@@36| |value#0|)) )))
(assert (forall ((MutableMapModel._default.FixedSizeInsert$V@@0 T@U) ($ly@@61 T@U) (|self#0@@27| T@U) (|key#0@@37| Int) (|value#0@@0| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeInsert$V@@0) TyType) (= (type $ly@@61) LayerTypeType)) (= (type |self#0@@27|) DatatypeTypeType)) (= (type |value#0@@0|) BoxType)) (= (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V@@0 $ly@@61 |self#0@@27| |key#0@@37| |value#0@@0|) (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V@@0 $LZ |self#0@@27| |key#0@@37| |value#0@@0|))) :qid |unknown.0:0| :skolemid |1794| :pattern ( (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V@@0 (AsFuelBottom $ly@@61) |self#0@@27| |key#0@@37| |value#0@@0|)) )))
(assert  (=> (<= 61 $FunctionContextHeight) (forall ((MutableMapModel._default.FixedSizeInsert$V@@1 T@U) ($ly@@62 T@U) (|self#0@@28| T@U) (|key#0@@38| Int) (|value#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.FixedSizeInsert$V@@1) TyType) (= (type $ly@@62) LayerTypeType)) (= (type |self#0@@28|) DatatypeTypeType)) (= (type |value#0@@1|) BoxType)) (or (|MutableMapModel.__default.FixedSizeInsert#canCall| MutableMapModel._default.FixedSizeInsert$V@@1 |self#0@@28| |key#0@@38| |value#0@@1|) (and (not (= 61 $FunctionContextHeight)) (and (and (and ($Is |self#0@@28| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeInsert$V@@1)) (and (<= (LitInt 0) |key#0@@38|) (< |key#0@@38| 18446744073709551616))) ($IsBox |value#0@@1| MutableMapModel._default.FixedSizeInsert$V@@1)) (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeInsert$V@@1 |self#0@@28|) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@28|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@28|)) 1))))))) ($Is (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V@@1 $ly@@62 |self#0@@28| |key#0@@38| |value#0@@1|) (Tclass._System.Tuple2 (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeInsert$V@@1) (Tclass.Options.Option MutableMapModel._default.FixedSizeInsert$V@@1)))) :qid |unknown.0:0| :skolemid |1795| :pattern ( (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V@@1 $ly@@62 |self#0@@28| |key#0@@38| |value#0@@1|)) ))))
(assert (forall ((MutableMapModel._default.FixedSizeInsert$V@@2 T@U) ($ly@@63 T@U) (|self#0@@29| T@U) (|key#0@@39| Int) (|value#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.FixedSizeInsert$V@@2) TyType) (= (type $ly@@63) LayerTypeType)) (= (type |self#0@@29|) DatatypeTypeType)) (= (type |value#0@@2|) BoxType)) (and (and ($Is |self#0@@29| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeInsert$V@@2)) (and (<= (LitInt 0) |key#0@@39|) (< |key#0@@39| 18446744073709551616))) ($IsBox |value#0@@2| MutableMapModel._default.FixedSizeInsert$V@@2))) (= (|MutableMapModel.__default.FixedSizeInsert#requires| MutableMapModel._default.FixedSizeInsert$V@@2 $ly@@63 |self#0@@29| |key#0@@39| |value#0@@2|)  (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeInsert$V@@2 |self#0@@29|) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@29|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@29|)) 1))))) :qid |unknown.0:0| :skolemid |1796| :pattern ( (|MutableMapModel.__default.FixedSizeInsert#requires| MutableMapModel._default.FixedSizeInsert$V@@2 $ly@@63 |self#0@@29| |key#0@@39| |value#0@@2|)) )))
(assert  (and (= (type StartFuel_MutableMapModel._default.Probe) LayerTypeType) (= (type |#Options.Option.None|) DatatypeTypeType)))
(assert  (=> (<= 61 $FunctionContextHeight) (forall ((MutableMapModel._default.FixedSizeInsert$V@@3 T@U) ($ly@@64 T@U) (|self#0@@30| T@U) (|key#0@@40| Int) (|value#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.FixedSizeInsert$V@@3) TyType) (= (type $ly@@64) LayerTypeType)) (= (type |self#0@@30|) DatatypeTypeType)) (= (type |value#0@@3|) BoxType)) (or (|MutableMapModel.__default.FixedSizeInsert#canCall| MutableMapModel._default.FixedSizeInsert$V@@3 |self#0@@30| |key#0@@40| |value#0@@3|) (and (not (= 61 $FunctionContextHeight)) (and (and (and ($Is |self#0@@30| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeInsert$V@@3)) (and (<= (LitInt 0) |key#0@@40|) (< |key#0@@40| 18446744073709551616))) ($IsBox |value#0@@3| MutableMapModel._default.FixedSizeInsert$V@@3)) (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeInsert$V@@3 |self#0@@30|) (< (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@30|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@30|)) 1))))))) (and (and (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.FixedSizeInsert$V@@3 |self#0@@30| |key#0@@40|) (let ((|slotIdx#0@@6| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeInsert$V@@3 StartFuel_MutableMapModel._default.Probe |self#0@@30| |key#0@@40|))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@30|) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@30|) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@30|) (=> (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@30|) |slotIdx#0@@6|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@30|))) (=> (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@30|) |slotIdx#0@@6|)))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@30|) (=> (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@30|) |slotIdx#0@@6|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@30|))) (=> (not (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@30|) |slotIdx#0@@6|)))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@30|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@30|)))))))))) (= (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V@@3 ($LS $ly@@64) |self#0@@30| |key#0@@40| |value#0@@3|) (let ((|slotIdx#0@@7| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeInsert$V@@3 StartFuel_MutableMapModel._default.Probe |self#0@@30| |key#0@@40|))) (let ((|storage#0@@3| (|Seq#Update| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@30|) |slotIdx#0@@7| ($Box (|#MutableMapModel.Item.Entry| |key#0@@40| |value#0@@3|))))) (let ((|contents#0@@23| (|Map#Build| (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@30|) ($Box (int_2_U |key#0@@40|)) ($Box (|#Options.Option.Some| |value#0@@3|))))) (ite (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@30|) |slotIdx#0@@7|))) (|#_System._tuple#2._#Make2| ($Box (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage#0@@3| (+ (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@30|) 1) |contents#0@@23|)) ($Box (Lit |#Options.Option.None|))) (ite (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@30|) |slotIdx#0@@7|))) (|#_System._tuple#2._#Make2| ($Box (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage#0@@3| (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@30|) |contents#0@@23|)) ($Box (Lit |#Options.Option.None|))) (let ((|replaced#0| (|#Options.Option.Some| (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@30|) |slotIdx#0@@7|)))))) (|#_System._tuple#2._#Make2| ($Box (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage#0@@3| (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@30|) |contents#0@@23|)) ($Box |replaced#0|))))))))))) :qid |unknown.0:0| :skolemid |1797| :pattern ( (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V@@3 ($LS $ly@@64) |self#0@@30| |key#0@@40| |value#0@@3|)) ))))
(assert  (=> (<= 61 $FunctionContextHeight) (forall ((MutableMapModel._default.FixedSizeInsert$V@@4 T@U) ($ly@@65 T@U) (|self#0@@31| T@U) (|key#0@@41| Int) (|value#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.FixedSizeInsert$V@@4) TyType) (= (type $ly@@65) LayerTypeType)) (= (type |self#0@@31|) DatatypeTypeType)) (= (type |value#0@@4|) BoxType)) (or (|MutableMapModel.__default.FixedSizeInsert#canCall| MutableMapModel._default.FixedSizeInsert$V@@4 (Lit |self#0@@31|) (LitInt |key#0@@41|) |value#0@@4|) (and (not (= 61 $FunctionContextHeight)) (and (and (and ($Is |self#0@@31| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeInsert$V@@4)) (and (<= (LitInt 0) |key#0@@41|) (< |key#0@@41| 18446744073709551616))) ($IsBox |value#0@@4| MutableMapModel._default.FixedSizeInsert$V@@4)) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeInsert$V@@4 (Lit |self#0@@31|))))) (< (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@31|)) (- (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@31|)))) 1))))))) (and (and (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.FixedSizeInsert$V@@4 (Lit |self#0@@31|) (LitInt |key#0@@41|)) (let ((|slotIdx#1| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeInsert$V@@4 StartFuel_MutableMapModel._default.Probe (Lit |self#0@@31|) (LitInt |key#0@@41|)))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@31|)) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@31|)) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@31|)) (=> (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@31|))) |slotIdx#1|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@31|)))) (=> (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@31|))) |slotIdx#1|)))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@31|)) (=> (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@31|))) |slotIdx#1|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@31|)))) (=> (not (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@31|))) |slotIdx#1|)))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@31|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@31|))))))))))) (= (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V@@4 ($LS $ly@@65) (Lit |self#0@@31|) (LitInt |key#0@@41|) |value#0@@4|) (let ((|slotIdx#1@@0| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeInsert$V@@4 StartFuel_MutableMapModel._default.Probe (Lit |self#0@@31|) (LitInt |key#0@@41|)))) (let ((|storage#1| (|Seq#Update| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@31|))) |slotIdx#1@@0| ($Box (|#MutableMapModel.Item.Entry| (LitInt |key#0@@41|) |value#0@@4|))))) (let ((|contents#1| (|Map#Build| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@31|))) ($Box (int_2_U (LitInt |key#0@@41|))) ($Box (|#Options.Option.Some| |value#0@@4|))))) (ite (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@31|))) |slotIdx#1@@0|))) (|#_System._tuple#2._#Make2| ($Box (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage#1| (LitInt (+ (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@31|)) 1)) |contents#1|)) ($Box (Lit |#Options.Option.None|))) (ite (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@31|))) |slotIdx#1@@0|))) (|#_System._tuple#2._#Make2| ($Box (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage#1| (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@31|))) |contents#1|)) ($Box (Lit |#Options.Option.None|))) (let ((|replaced#1| (|#Options.Option.Some| (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@31|))) |slotIdx#1@@0|)))))) (|#_System._tuple#2._#Make2| ($Box (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage#1| (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@31|))) |contents#1|)) ($Box |replaced#1|))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1798| :pattern ( (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V@@4 ($LS $ly@@65) (Lit |self#0@@31|) (LitInt |key#0@@41|) |value#0@@4|)) ))))
(assert  (=> (<= 61 $FunctionContextHeight) (forall ((MutableMapModel._default.FixedSizeInsert$V@@5 T@U) ($ly@@66 T@U) (|self#0@@32| T@U) (|key#0@@42| Int) (|value#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.FixedSizeInsert$V@@5) TyType) (= (type $ly@@66) LayerTypeType)) (= (type |self#0@@32|) DatatypeTypeType)) (= (type |value#0@@5|) BoxType)) (or (|MutableMapModel.__default.FixedSizeInsert#canCall| MutableMapModel._default.FixedSizeInsert$V@@5 (Lit |self#0@@32|) (LitInt |key#0@@42|) (Lit |value#0@@5|)) (and (not (= 61 $FunctionContextHeight)) (and (and (and ($Is |self#0@@32| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeInsert$V@@5)) (and (<= (LitInt 0) |key#0@@42|) (< |key#0@@42| 18446744073709551616))) ($IsBox |value#0@@5| MutableMapModel._default.FixedSizeInsert$V@@5)) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeInsert$V@@5 (Lit |self#0@@32|))))) (< (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@32|)) (- (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@32|)))) 1))))))) (and (and (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.FixedSizeInsert$V@@5 (Lit |self#0@@32|) (LitInt |key#0@@42|)) (let ((|slotIdx#2| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeInsert$V@@5 StartFuel_MutableMapModel._default.Probe (Lit |self#0@@32|) (LitInt |key#0@@42|)))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@32|)) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@32|)) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@32|)) (=> (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@32|))) |slotIdx#2|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@32|)))) (=> (not (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@32|))) |slotIdx#2|)))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@32|)) (=> (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@32|))) |slotIdx#2|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@32|)))) (=> (not (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@32|))) |slotIdx#2|)))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@32|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@32|))))))))))) (= (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V@@5 ($LS $ly@@66) (Lit |self#0@@32|) (LitInt |key#0@@42|) (Lit |value#0@@5|)) (let ((|slotIdx#2@@0| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeInsert$V@@5 StartFuel_MutableMapModel._default.Probe (Lit |self#0@@32|) (LitInt |key#0@@42|)))) (let ((|storage#2| (|Seq#Update| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@32|))) |slotIdx#2@@0| ($Box (Lit (|#MutableMapModel.Item.Entry| (LitInt |key#0@@42|) (Lit |value#0@@5|))))))) (let ((|contents#2| (|Map#Build| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@32|))) ($Box (int_2_U (LitInt |key#0@@42|))) ($Box (Lit (|#Options.Option.Some| (Lit |value#0@@5|))))))) (ite (MutableMapModel.Item.Empty_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@32|))) |slotIdx#2@@0|))) (|#_System._tuple#2._#Make2| ($Box (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage#2| (LitInt (+ (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@32|)) 1)) |contents#2|)) ($Box (Lit |#Options.Option.None|))) (ite (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@32|))) |slotIdx#2@@0|))) (|#_System._tuple#2._#Make2| ($Box (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage#2| (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@32|))) |contents#2|)) ($Box (Lit |#Options.Option.None|))) (let ((|replaced#2| (|#Options.Option.Some| (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@32|))) |slotIdx#2@@0|)))))) (|#_System._tuple#2._#Make2| ($Box (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage#2| (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@32|))) |contents#2|)) ($Box |replaced#2|))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1799| :pattern ( (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.FixedSizeInsert$V@@5 ($LS $ly@@66) (Lit |self#0@@32|) (LitInt |key#0@@42|) (Lit |value#0@@5|))) ))))
(assert (forall ((arg0@@275 T@U) (arg1@@127 T@U) (arg2@@73 Int) (arg3@@44 T@U) ) (! (= (type (MutableMapModel.__default.FixedSizeUpdateBySlot arg0@@275 arg1@@127 arg2@@73 arg3@@44)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.FixedSizeUpdateBySlot| :pattern ( (MutableMapModel.__default.FixedSizeUpdateBySlot arg0@@275 arg1@@127 arg2@@73 arg3@@44)) )))
(assert  (=> (<= 64 $FunctionContextHeight) (forall ((MutableMapModel._default.FixedSizeUpdateBySlot$V T@U) (|self#0@@33| T@U) (|slotIdx#0@@8| Int) (|value#0@@6| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeUpdateBySlot$V) TyType) (= (type |self#0@@33|) DatatypeTypeType)) (= (type |value#0@@6|) BoxType)) (or (|MutableMapModel.__default.FixedSizeUpdateBySlot#canCall| MutableMapModel._default.FixedSizeUpdateBySlot$V |self#0@@33| |slotIdx#0@@8| |value#0@@6|) (and (not (= 64 $FunctionContextHeight)) (and (and (and ($Is |self#0@@33| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeUpdateBySlot$V)) (and (<= (LitInt 0) |slotIdx#0@@8|) (< |slotIdx#0@@8| 18446744073709551616))) ($IsBox |value#0@@6| MutableMapModel._default.FixedSizeUpdateBySlot$V)) (and (and (<= (LitInt 0) |slotIdx#0@@8|) (< |slotIdx#0@@8| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@33|)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@33|) |slotIdx#0@@8|)))))))) ($Is (MutableMapModel.__default.FixedSizeUpdateBySlot MutableMapModel._default.FixedSizeUpdateBySlot$V |self#0@@33| |slotIdx#0@@8| |value#0@@6|) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeUpdateBySlot$V))) :qid |unknown.0:0| :skolemid |1913| :pattern ( (MutableMapModel.__default.FixedSizeUpdateBySlot MutableMapModel._default.FixedSizeUpdateBySlot$V |self#0@@33| |slotIdx#0@@8| |value#0@@6|)) ))))
(assert (forall ((MutableMapModel._default.FixedSizeUpdateBySlot$V@@0 T@U) (|self#0@@34| T@U) (|slotIdx#0@@9| Int) (|value#0@@7| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeUpdateBySlot$V@@0) TyType) (= (type |self#0@@34|) DatatypeTypeType)) (= (type |value#0@@7|) BoxType)) (and (and ($Is |self#0@@34| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeUpdateBySlot$V@@0)) (and (<= (LitInt 0) |slotIdx#0@@9|) (< |slotIdx#0@@9| 18446744073709551616))) ($IsBox |value#0@@7| MutableMapModel._default.FixedSizeUpdateBySlot$V@@0))) (= (|MutableMapModel.__default.FixedSizeUpdateBySlot#requires| MutableMapModel._default.FixedSizeUpdateBySlot$V@@0 |self#0@@34| |slotIdx#0@@9| |value#0@@7|)  (and (and (<= (LitInt 0) |slotIdx#0@@9|) (< |slotIdx#0@@9| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@34|)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@34|) |slotIdx#0@@9|)))))) :qid |unknown.0:0| :skolemid |1914| :pattern ( (|MutableMapModel.__default.FixedSizeUpdateBySlot#requires| MutableMapModel._default.FixedSizeUpdateBySlot$V@@0 |self#0@@34| |slotIdx#0@@9| |value#0@@7|)) )))
(assert  (=> (<= 64 $FunctionContextHeight) (forall ((MutableMapModel._default.FixedSizeUpdateBySlot$V@@1 T@U) (|self#0@@35| T@U) (|slotIdx#0@@10| Int) (|value#0@@8| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeUpdateBySlot$V@@1) TyType) (= (type |self#0@@35|) DatatypeTypeType)) (= (type |value#0@@8|) BoxType)) (or (|MutableMapModel.__default.FixedSizeUpdateBySlot#canCall| MutableMapModel._default.FixedSizeUpdateBySlot$V@@1 |self#0@@35| |slotIdx#0@@10| |value#0@@8|) (and (not (= 64 $FunctionContextHeight)) (and (and (and ($Is |self#0@@35| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeUpdateBySlot$V@@1)) (and (<= (LitInt 0) |slotIdx#0@@10|) (< |slotIdx#0@@10| 18446744073709551616))) ($IsBox |value#0@@8| MutableMapModel._default.FixedSizeUpdateBySlot$V@@1)) (and (and (<= (LitInt 0) |slotIdx#0@@10|) (< |slotIdx#0@@10| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@35|)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@35|) |slotIdx#0@@10|)))))))) (and (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@35|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@35|)) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@35|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@35|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@35|))) (= (MutableMapModel.__default.FixedSizeUpdateBySlot MutableMapModel._default.FixedSizeUpdateBySlot$V@@1 |self#0@@35| |slotIdx#0@@10| |value#0@@8|) (let ((|storage'#0| (|Seq#Update| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@35|) |slotIdx#0@@10| ($Box (let ((|dt_update_tmp#0#0| ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@35|) |slotIdx#0@@10|)))) (let ((|dt_update#value#0#0| |value#0@@8|)) (|#MutableMapModel.Item.Entry| (MutableMapModel.Item.key |dt_update_tmp#0#0|) |dt_update#value#0#0|))))))) (let ((|contents'#0| (|Map#Build| (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@35|) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@35|) |slotIdx#0@@10|))))) ($Box (|#Options.Option.Some| |value#0@@8|))))) (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage'#0| (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@35|) |contents'#0|)))))) :qid |unknown.0:0| :skolemid |1915| :pattern ( (MutableMapModel.__default.FixedSizeUpdateBySlot MutableMapModel._default.FixedSizeUpdateBySlot$V@@1 |self#0@@35| |slotIdx#0@@10| |value#0@@8|)) ))))
(assert  (=> (<= 64 $FunctionContextHeight) (forall ((MutableMapModel._default.FixedSizeUpdateBySlot$V@@2 T@U) (|self#0@@36| T@U) (|slotIdx#0@@11| Int) (|value#0@@9| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeUpdateBySlot$V@@2) TyType) (= (type |self#0@@36|) DatatypeTypeType)) (= (type |value#0@@9|) BoxType)) (or (|MutableMapModel.__default.FixedSizeUpdateBySlot#canCall| MutableMapModel._default.FixedSizeUpdateBySlot$V@@2 (Lit |self#0@@36|) (LitInt |slotIdx#0@@11|) |value#0@@9|) (and (not (= 64 $FunctionContextHeight)) (and (and (and ($Is |self#0@@36| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeUpdateBySlot$V@@2)) (and (<= (LitInt 0) |slotIdx#0@@11|) (< |slotIdx#0@@11| 18446744073709551616))) ($IsBox |value#0@@9| MutableMapModel._default.FixedSizeUpdateBySlot$V@@2)) (and (and (<= (LitInt 0) (LitInt |slotIdx#0@@11|)) (< |slotIdx#0@@11| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@36|)))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@36|))) (LitInt |slotIdx#0@@11|))))))))) (and (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@36|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@36|))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@36|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@36|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@36|)))) (= (MutableMapModel.__default.FixedSizeUpdateBySlot MutableMapModel._default.FixedSizeUpdateBySlot$V@@2 (Lit |self#0@@36|) (LitInt |slotIdx#0@@11|) |value#0@@9|) (let ((|storage'#1| (|Seq#Update| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@36|))) (LitInt |slotIdx#0@@11|) ($Box (let ((|dt_update_tmp#0#1| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@36|))) (LitInt |slotIdx#0@@11|))))) (let ((|dt_update#value#0#1| |value#0@@9|)) (|#MutableMapModel.Item.Entry| (MutableMapModel.Item.key |dt_update_tmp#0#1|) |dt_update#value#0#1|))))))) (let ((|contents'#1| (|Map#Build| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@36|))) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@36|))) (LitInt |slotIdx#0@@11|)))))) ($Box (|#Options.Option.Some| |value#0@@9|))))) (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage'#1| (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@36|))) |contents'#1|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1916| :pattern ( (MutableMapModel.__default.FixedSizeUpdateBySlot MutableMapModel._default.FixedSizeUpdateBySlot$V@@2 (Lit |self#0@@36|) (LitInt |slotIdx#0@@11|) |value#0@@9|)) ))))
(assert  (=> (<= 64 $FunctionContextHeight) (forall ((MutableMapModel._default.FixedSizeUpdateBySlot$V@@3 T@U) (|self#0@@37| T@U) (|slotIdx#0@@12| Int) (|value#0@@10| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeUpdateBySlot$V@@3) TyType) (= (type |self#0@@37|) DatatypeTypeType)) (= (type |value#0@@10|) BoxType)) (or (|MutableMapModel.__default.FixedSizeUpdateBySlot#canCall| MutableMapModel._default.FixedSizeUpdateBySlot$V@@3 (Lit |self#0@@37|) (LitInt |slotIdx#0@@12|) (Lit |value#0@@10|)) (and (not (= 64 $FunctionContextHeight)) (and (and (and ($Is |self#0@@37| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeUpdateBySlot$V@@3)) (and (<= (LitInt 0) |slotIdx#0@@12|) (< |slotIdx#0@@12| 18446744073709551616))) ($IsBox |value#0@@10| MutableMapModel._default.FixedSizeUpdateBySlot$V@@3)) (and (and (<= (LitInt 0) (LitInt |slotIdx#0@@12|)) (< |slotIdx#0@@12| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@37|)))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@37|))) (LitInt |slotIdx#0@@12|))))))))) (and (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@37|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@37|))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@37|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@37|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@37|)))) (= (MutableMapModel.__default.FixedSizeUpdateBySlot MutableMapModel._default.FixedSizeUpdateBySlot$V@@3 (Lit |self#0@@37|) (LitInt |slotIdx#0@@12|) (Lit |value#0@@10|)) (let ((|storage'#2| (|Seq#Update| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@37|))) (LitInt |slotIdx#0@@12|) ($Box (let ((|dt_update_tmp#0#2| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@37|))) (LitInt |slotIdx#0@@12|))))) (let ((|dt_update#value#0#2| (Lit |value#0@@10|))) (|#MutableMapModel.Item.Entry| (MutableMapModel.Item.key |dt_update_tmp#0#2|) |dt_update#value#0#2|))))))) (let ((|contents'#2| (|Map#Build| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@37|))) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@37|))) (LitInt |slotIdx#0@@12|)))))) ($Box (Lit (|#Options.Option.Some| (Lit |value#0@@10|))))))) (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| |storage'#2| (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@37|))) |contents'#2|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1917| :pattern ( (MutableMapModel.__default.FixedSizeUpdateBySlot MutableMapModel._default.FixedSizeUpdateBySlot$V@@3 (Lit |self#0@@37|) (LitInt |slotIdx#0@@12|) (Lit |value#0@@10|))) ))))
(assert (forall ((arg0@@276 T@U) (arg1@@128 T@U) (arg2@@74 T@U) (arg3@@45 Int) ) (! (= (type (MutableMapModel.__default.FixedSizeGet arg0@@276 arg1@@128 arg2@@74 arg3@@45)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.FixedSizeGet| :pattern ( (MutableMapModel.__default.FixedSizeGet arg0@@276 arg1@@128 arg2@@74 arg3@@45)) )))
(assert (forall ((MutableMapModel._default.FixedSizeGet$V T@U) ($ly@@67 T@U) (|self#0@@38| T@U) (|key#0@@43| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.FixedSizeGet$V) TyType) (= (type $ly@@67) LayerTypeType)) (= (type |self#0@@38|) DatatypeTypeType)) (= (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V ($LS $ly@@67) |self#0@@38| |key#0@@43|) (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V $ly@@67 |self#0@@38| |key#0@@43|))) :qid |unknown.0:0| :skolemid |1975| :pattern ( (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V ($LS $ly@@67) |self#0@@38| |key#0@@43|)) )))
(assert (forall ((MutableMapModel._default.FixedSizeGet$V@@0 T@U) ($ly@@68 T@U) (|self#0@@39| T@U) (|key#0@@44| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.FixedSizeGet$V@@0) TyType) (= (type $ly@@68) LayerTypeType)) (= (type |self#0@@39|) DatatypeTypeType)) (= (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V@@0 $ly@@68 |self#0@@39| |key#0@@44|) (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V@@0 $LZ |self#0@@39| |key#0@@44|))) :qid |unknown.0:0| :skolemid |1976| :pattern ( (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V@@0 (AsFuelBottom $ly@@68) |self#0@@39| |key#0@@44|)) )))
(assert  (=> (<= 66 $FunctionContextHeight) (forall ((MutableMapModel._default.FixedSizeGet$V@@1 T@U) ($ly@@69 T@U) (|self#0@@40| T@U) (|key#0@@45| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeGet$V@@1) TyType) (= (type $ly@@69) LayerTypeType)) (= (type |self#0@@40|) DatatypeTypeType)) (or (|MutableMapModel.__default.FixedSizeGet#canCall| MutableMapModel._default.FixedSizeGet$V@@1 |self#0@@40| |key#0@@45|) (and (not (= 66 $FunctionContextHeight)) (and (and ($Is |self#0@@40| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeGet$V@@1)) (and (<= (LitInt 0) |key#0@@45|) (< |key#0@@45| 18446744073709551616))) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeGet$V@@1 |self#0@@40|))))) ($Is (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V@@1 $ly@@69 |self#0@@40| |key#0@@45|) (Tclass.Options.Option MutableMapModel._default.FixedSizeGet$V@@1))) :qid |unknown.0:0| :skolemid |1977| :pattern ( (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V@@1 $ly@@69 |self#0@@40| |key#0@@45|)) ))))
(assert (forall ((MutableMapModel._default.FixedSizeGet$V@@2 T@U) ($ly@@70 T@U) (|self#0@@41| T@U) (|key#0@@46| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeGet$V@@2) TyType) (= (type $ly@@70) LayerTypeType)) (= (type |self#0@@41|) DatatypeTypeType)) (and ($Is |self#0@@41| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeGet$V@@2)) (and (<= (LitInt 0) |key#0@@46|) (< |key#0@@46| 18446744073709551616)))) (= (|MutableMapModel.__default.FixedSizeGet#requires| MutableMapModel._default.FixedSizeGet$V@@2 $ly@@70 |self#0@@41| |key#0@@46|) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeGet$V@@2 |self#0@@41|))) :qid |unknown.0:0| :skolemid |1978| :pattern ( (|MutableMapModel.__default.FixedSizeGet#requires| MutableMapModel._default.FixedSizeGet$V@@2 $ly@@70 |self#0@@41| |key#0@@46|)) )))
(assert  (=> (<= 66 $FunctionContextHeight) (forall ((MutableMapModel._default.FixedSizeGet$V@@3 T@U) ($ly@@71 T@U) (|self#0@@42| T@U) (|key#0@@47| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeGet$V@@3) TyType) (= (type $ly@@71) LayerTypeType)) (= (type |self#0@@42|) DatatypeTypeType)) (or (|MutableMapModel.__default.FixedSizeGet#canCall| MutableMapModel._default.FixedSizeGet$V@@3 |self#0@@42| |key#0@@47|) (and (not (= 66 $FunctionContextHeight)) (and (and ($Is |self#0@@42| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeGet$V@@3)) (and (<= (LitInt 0) |key#0@@47|) (< |key#0@@47| 18446744073709551616))) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeGet$V@@3 |self#0@@42|))))) (and (and (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.FixedSizeGet$V@@3 |self#0@@42| |key#0@@47|) (let ((|slotIdx#0@@13| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeGet$V@@3 StartFuel_MutableMapModel._default.Probe |self#0@@42| |key#0@@47|))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@42|) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@42|) |slotIdx#0@@13|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@42|))))) (= (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V@@3 ($LS $ly@@71) |self#0@@42| |key#0@@47|) (let ((|slotIdx#0@@14| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeGet$V@@3 StartFuel_MutableMapModel._default.Probe |self#0@@42| |key#0@@47|))) (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@42|) |slotIdx#0@@14|))) (|#Options.Option.Some| (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@42|) |slotIdx#0@@14|)))) |#Options.Option.None|))))) :qid |unknown.0:0| :skolemid |1979| :pattern ( (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V@@3 ($LS $ly@@71) |self#0@@42| |key#0@@47|)) ))))
(assert  (=> (<= 66 $FunctionContextHeight) (forall ((MutableMapModel._default.FixedSizeGet$V@@4 T@U) ($ly@@72 T@U) (|self#0@@43| T@U) (|key#0@@48| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeGet$V@@4) TyType) (= (type $ly@@72) LayerTypeType)) (= (type |self#0@@43|) DatatypeTypeType)) (or (|MutableMapModel.__default.FixedSizeGet#canCall| MutableMapModel._default.FixedSizeGet$V@@4 (Lit |self#0@@43|) (LitInt |key#0@@48|)) (and (not (= 66 $FunctionContextHeight)) (and (and ($Is |self#0@@43| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeGet$V@@4)) (and (<= (LitInt 0) |key#0@@48|) (< |key#0@@48| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeGet$V@@4 (Lit |self#0@@43|))))))))) (and (and (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.FixedSizeGet$V@@4 (Lit |self#0@@43|) (LitInt |key#0@@48|)) (let ((|slotIdx#1@@1| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeGet$V@@4 StartFuel_MutableMapModel._default.Probe (Lit |self#0@@43|) (LitInt |key#0@@48|)))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@43|)) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@43|))) |slotIdx#1@@1|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@43|)))))) (= (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V@@4 ($LS $ly@@72) (Lit |self#0@@43|) (LitInt |key#0@@48|)) (let ((|slotIdx#1@@2| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeGet$V@@4 StartFuel_MutableMapModel._default.Probe (Lit |self#0@@43|) (LitInt |key#0@@48|)))) (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@43|))) |slotIdx#1@@2|))) (|#Options.Option.Some| (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@43|))) |slotIdx#1@@2|)))) |#Options.Option.None|))))) :qid |unknown.0:0| :weight 3 :skolemid |1980| :pattern ( (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.FixedSizeGet$V@@4 ($LS $ly@@72) (Lit |self#0@@43|) (LitInt |key#0@@48|))) ))))
(assert (forall ((arg0@@277 T@U) (arg1@@129 T@U) (arg2@@75 T@U) (arg3@@46 Int) ) (! (= (type (MutableMapModel.__default.FixedSizeRemove arg0@@277 arg1@@129 arg2@@75 arg3@@46)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.FixedSizeRemove| :pattern ( (MutableMapModel.__default.FixedSizeRemove arg0@@277 arg1@@129 arg2@@75 arg3@@46)) )))
(assert (forall ((MutableMapModel._default.FixedSizeRemove$V T@U) ($ly@@73 T@U) (|self#0@@44| T@U) (|key#0@@49| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.FixedSizeRemove$V) TyType) (= (type $ly@@73) LayerTypeType)) (= (type |self#0@@44|) DatatypeTypeType)) (= (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V ($LS $ly@@73) |self#0@@44| |key#0@@49|) (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V $ly@@73 |self#0@@44| |key#0@@49|))) :qid |unknown.0:0| :skolemid |2033| :pattern ( (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V ($LS $ly@@73) |self#0@@44| |key#0@@49|)) )))
(assert (forall ((MutableMapModel._default.FixedSizeRemove$V@@0 T@U) ($ly@@74 T@U) (|self#0@@45| T@U) (|key#0@@50| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.FixedSizeRemove$V@@0) TyType) (= (type $ly@@74) LayerTypeType)) (= (type |self#0@@45|) DatatypeTypeType)) (= (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V@@0 $ly@@74 |self#0@@45| |key#0@@50|) (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V@@0 $LZ |self#0@@45| |key#0@@50|))) :qid |unknown.0:0| :skolemid |2034| :pattern ( (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V@@0 (AsFuelBottom $ly@@74) |self#0@@45| |key#0@@50|)) )))
(assert  (=> (<= 69 $FunctionContextHeight) (forall ((MutableMapModel._default.FixedSizeRemove$V@@1 T@U) ($ly@@75 T@U) (|self#0@@46| T@U) (|key#0@@51| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeRemove$V@@1) TyType) (= (type $ly@@75) LayerTypeType)) (= (type |self#0@@46|) DatatypeTypeType)) (or (|MutableMapModel.__default.FixedSizeRemove#canCall| MutableMapModel._default.FixedSizeRemove$V@@1 |self#0@@46| |key#0@@51|) (and (not (= 69 $FunctionContextHeight)) (and (and ($Is |self#0@@46| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeRemove$V@@1)) (and (<= (LitInt 0) |key#0@@51|) (< |key#0@@51| 18446744073709551616))) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeRemove$V@@1 |self#0@@46|))))) ($Is (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V@@1 $ly@@75 |self#0@@46| |key#0@@51|) (Tclass._System.Tuple2 (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeRemove$V@@1) (Tclass.Options.Option MutableMapModel._default.FixedSizeRemove$V@@1)))) :qid |unknown.0:0| :skolemid |2035| :pattern ( (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V@@1 $ly@@75 |self#0@@46| |key#0@@51|)) ))))
(assert (forall ((MutableMapModel._default.FixedSizeRemove$V@@2 T@U) ($ly@@76 T@U) (|self#0@@47| T@U) (|key#0@@52| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeRemove$V@@2) TyType) (= (type $ly@@76) LayerTypeType)) (= (type |self#0@@47|) DatatypeTypeType)) (and ($Is |self#0@@47| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeRemove$V@@2)) (and (<= (LitInt 0) |key#0@@52|) (< |key#0@@52| 18446744073709551616)))) (= (|MutableMapModel.__default.FixedSizeRemove#requires| MutableMapModel._default.FixedSizeRemove$V@@2 $ly@@76 |self#0@@47| |key#0@@52|) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeRemove$V@@2 |self#0@@47|))) :qid |unknown.0:0| :skolemid |2036| :pattern ( (|MutableMapModel.__default.FixedSizeRemove#requires| MutableMapModel._default.FixedSizeRemove$V@@2 $ly@@76 |self#0@@47| |key#0@@52|)) )))
(assert  (=> (<= 69 $FunctionContextHeight) (forall ((MutableMapModel._default.FixedSizeRemove$V@@3 T@U) ($ly@@77 T@U) (|self#0@@48| T@U) (|key#0@@53| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeRemove$V@@3) TyType) (= (type $ly@@77) LayerTypeType)) (= (type |self#0@@48|) DatatypeTypeType)) (or (|MutableMapModel.__default.FixedSizeRemove#canCall| MutableMapModel._default.FixedSizeRemove$V@@3 |self#0@@48| |key#0@@53|) (and (not (= 69 $FunctionContextHeight)) (and (and ($Is |self#0@@48| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeRemove$V@@3)) (and (<= (LitInt 0) |key#0@@53|) (< |key#0@@53| 18446744073709551616))) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeRemove$V@@3 |self#0@@48|))))) (and (and (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.FixedSizeRemove$V@@3 |self#0@@48| |key#0@@53|) (let ((|slotIdx#0@@15| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeRemove$V@@3 StartFuel_MutableMapModel._default.Probe |self#0@@48| |key#0@@53|))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@48|) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@48|) |slotIdx#0@@15|))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@48|) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@48|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@48|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self#0@@48|))))))) (= (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V@@3 ($LS $ly@@77) |self#0@@48| |key#0@@53|) (let ((|slotIdx#0@@16| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeRemove$V@@3 StartFuel_MutableMapModel._default.Probe |self#0@@48| |key#0@@53|))) (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@48|) |slotIdx#0@@16|))) (let ((|removed#0| (|#Options.Option.Some| (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@48|) |slotIdx#0@@16|)))))) (let ((|self'#0| (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| (|Seq#Update| (MutableMapModel.FixedSizeLinearHashMap.storage |self#0@@48|) |slotIdx#0@@16| ($Box (|#MutableMapModel.Item.Tombstone| |key#0@@53|))) (MutableMapModel.FixedSizeLinearHashMap.count |self#0@@48|) (|Map#Build| (MutableMapModel.FixedSizeLinearHashMap.contents |self#0@@48|) ($Box (int_2_U |key#0@@53|)) ($Box (Lit |#Options.Option.None|)))))) (|#_System._tuple#2._#Make2| ($Box |self'#0|) ($Box |removed#0|)))) (|#_System._tuple#2._#Make2| ($Box |self#0@@48|) ($Box (Lit |#Options.Option.None|)))))))) :qid |unknown.0:0| :skolemid |2037| :pattern ( (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V@@3 ($LS $ly@@77) |self#0@@48| |key#0@@53|)) ))))
(assert  (=> (<= 69 $FunctionContextHeight) (forall ((MutableMapModel._default.FixedSizeRemove$V@@4 T@U) ($ly@@78 T@U) (|self#0@@49| T@U) (|key#0@@54| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FixedSizeRemove$V@@4) TyType) (= (type $ly@@78) LayerTypeType)) (= (type |self#0@@49|) DatatypeTypeType)) (or (|MutableMapModel.__default.FixedSizeRemove#canCall| MutableMapModel._default.FixedSizeRemove$V@@4 (Lit |self#0@@49|) (LitInt |key#0@@54|)) (and (not (= 69 $FunctionContextHeight)) (and (and ($Is |self#0@@49| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.FixedSizeRemove$V@@4)) (and (<= (LitInt 0) |key#0@@54|) (< |key#0@@54| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.FixedSizeRemove$V@@4 (Lit |self#0@@49|))))))))) (and (and (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.FixedSizeRemove$V@@4 (Lit |self#0@@49|) (LitInt |key#0@@54|)) (let ((|slotIdx#1@@3| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeRemove$V@@4 StartFuel_MutableMapModel._default.Probe (Lit |self#0@@49|) (LitInt |key#0@@54|)))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@49|)) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@49|))) |slotIdx#1@@3|))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@49|)) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@49|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@49|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |self#0@@49|)))))))) (= (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V@@4 ($LS $ly@@78) (Lit |self#0@@49|) (LitInt |key#0@@54|)) (let ((|slotIdx#1@@4| (MutableMapModel.__default.Probe MutableMapModel._default.FixedSizeRemove$V@@4 StartFuel_MutableMapModel._default.Probe (Lit |self#0@@49|) (LitInt |key#0@@54|)))) (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@49|))) |slotIdx#1@@4|))) (let ((|removed#1| (|#Options.Option.Some| (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@49|))) |slotIdx#1@@4|)))))) (let ((|self'#1| (|#MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap| (|Seq#Update| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |self#0@@49|))) |slotIdx#1@@4| ($Box (Lit (|#MutableMapModel.Item.Tombstone| (LitInt |key#0@@54|))))) (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit |self#0@@49|))) (|Map#Build| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |self#0@@49|))) ($Box (int_2_U (LitInt |key#0@@54|))) ($Box (Lit |#Options.Option.None|)))))) (|#_System._tuple#2._#Make2| ($Box |self'#1|) ($Box |removed#1|)))) (|#_System._tuple#2._#Make2| ($Box (Lit |self#0@@49|)) ($Box (Lit |#Options.Option.None|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2038| :pattern ( (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.FixedSizeRemove$V@@4 ($LS $ly@@78) (Lit |self#0@@49|) (LitInt |key#0@@54|))) ))))
(assert (forall ((arg0@@278 T@U) (arg1@@130 T@U) (arg2@@76 T@U) ) (! (= (type (MutableMapModel.__default.MapFromStorage arg0@@278 arg1@@130 arg2@@76)) (MapType BoxType BoxType)) :qid |funType:MutableMapModel.__default.MapFromStorage| :pattern ( (MutableMapModel.__default.MapFromStorage arg0@@278 arg1@@130 arg2@@76)) )))
(assert (forall ((MutableMapModel._default.MapFromStorage$V T@U) ($ly@@79 T@U) (|elements#0@@79| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.MapFromStorage$V) TyType) (= (type $ly@@79) LayerTypeType)) (= (type |elements#0@@79|) (SeqType BoxType))) (= (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V ($LS $ly@@79) |elements#0@@79|) (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V $ly@@79 |elements#0@@79|))) :qid |unknown.0:0| :skolemid |2141| :pattern ( (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V ($LS $ly@@79) |elements#0@@79|)) )))
(assert (forall ((MutableMapModel._default.MapFromStorage$V@@0 T@U) ($ly@@80 T@U) (|elements#0@@80| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.MapFromStorage$V@@0) TyType) (= (type $ly@@80) LayerTypeType)) (= (type |elements#0@@80|) (SeqType BoxType))) (= (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V@@0 $ly@@80 |elements#0@@80|) (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V@@0 $LZ |elements#0@@80|))) :qid |unknown.0:0| :skolemid |2142| :pattern ( (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V@@0 (AsFuelBottom $ly@@80) |elements#0@@80|)) )))
(assert  (=> (<= 72 $FunctionContextHeight) (forall ((MutableMapModel._default.MapFromStorage$V@@1 T@U) ($ly@@81 T@U) (|elements#0@@81| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.MapFromStorage$V@@1) TyType) (= (type $ly@@81) LayerTypeType)) (= (type |elements#0@@81|) (SeqType BoxType))) (or (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.MapFromStorage$V@@1 |elements#0@@81|) (and (not (= 72 $FunctionContextHeight)) ($Is |elements#0@@81| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@1)))))) ($Is (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V@@1 $ly@@81 |elements#0@@81|) (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.MapFromStorage$V@@1))) :qid |unknown.0:0| :skolemid |2143| :pattern ( (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V@@1 $ly@@81 |elements#0@@81|)) ))))
(assert (forall ((MutableMapModel._default.MapFromStorage$V@@2 T@U) ($ly@@82 T@U) (|elements#0@@82| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.MapFromStorage$V@@2) TyType) (= (type $ly@@82) LayerTypeType)) (= (type |elements#0@@82|) (SeqType BoxType))) ($Is |elements#0@@82| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@2)))) (= (|MutableMapModel.__default.MapFromStorage#requires| MutableMapModel._default.MapFromStorage$V@@2 $ly@@82 |elements#0@@82|) true)) :qid |unknown.0:0| :skolemid |2144| :pattern ( (|MutableMapModel.__default.MapFromStorage#requires| MutableMapModel._default.MapFromStorage$V@@2 $ly@@82 |elements#0@@82|)) )))
(assert  (and (forall ((arg0@@279 T@U) (arg1@@131 T@U) ) (! (= (type (Sequences.__default.DropLast arg0@@279 arg1@@131)) (SeqType BoxType)) :qid |funType:Sequences.__default.DropLast| :pattern ( (Sequences.__default.DropLast arg0@@279 arg1@@131)) )) (forall ((arg0@@280 T@U) (arg1@@132 T@U) ) (! (= (type (Sequences.__default.Last arg0@@280 arg1@@132)) BoxType) :qid |funType:Sequences.__default.Last| :pattern ( (Sequences.__default.Last arg0@@280 arg1@@132)) ))))
(assert  (=> (<= 72 $FunctionContextHeight) (forall ((MutableMapModel._default.MapFromStorage$V@@3 T@U) ($ly@@83 T@U) (|elements#0@@83| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.MapFromStorage$V@@3) TyType) (= (type $ly@@83) LayerTypeType)) (= (type |elements#0@@83|) (SeqType BoxType))) (or (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.MapFromStorage$V@@3 |elements#0@@83|) (and (not (= 72 $FunctionContextHeight)) ($Is |elements#0@@83| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@3)))))) (and (=> (not (= (|Seq#Length| |elements#0@@83|) (LitInt 0))) (and (|Sequences.__default.Last#canCall| (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@3) |elements#0@@83|) (and (|Sequences.__default.DropLast#canCall| (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@3) |elements#0@@83|) (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.MapFromStorage$V@@3 (Sequences.__default.DropLast (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@3) |elements#0@@83|))))) (= (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V@@3 ($LS $ly@@83) |elements#0@@83|) (ite (= (|Seq#Length| |elements#0@@83|) (LitInt 0)) (|Map#Empty| BoxType BoxType) (let ((|item#0@@6| ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@3) |elements#0@@83|)))) (let ((|dropLastMap#0| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V@@3 $ly@@83 (Sequences.__default.DropLast (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@3) |elements#0@@83|)))) (ite (MutableMapModel.Item.Entry_q |item#0@@6|) (|Map#Build| |dropLastMap#0| ($Box (int_2_U (MutableMapModel.Item.key |item#0@@6|))) (MutableMapModel.Item.value |item#0@@6|)) |dropLastMap#0|))))))) :qid |unknown.0:0| :skolemid |2145| :pattern ( (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V@@3 ($LS $ly@@83) |elements#0@@83|)) ))))
(assert  (=> (<= 72 $FunctionContextHeight) (forall ((MutableMapModel._default.MapFromStorage$V@@4 T@U) ($ly@@84 T@U) (|elements#0@@84| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.MapFromStorage$V@@4) TyType) (= (type $ly@@84) LayerTypeType)) (= (type |elements#0@@84|) (SeqType BoxType))) (or (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.MapFromStorage$V@@4 (Lit |elements#0@@84|)) (and (not (= 72 $FunctionContextHeight)) ($Is |elements#0@@84| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@4)))))) (and (=> (not (= (|Seq#Length| (Lit |elements#0@@84|)) (LitInt 0))) (and (|Sequences.__default.Last#canCall| (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@4) (Lit |elements#0@@84|)) (and (|Sequences.__default.DropLast#canCall| (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@4) (Lit |elements#0@@84|)) (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.MapFromStorage$V@@4 (Lit (Sequences.__default.DropLast (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@4) (Lit |elements#0@@84|))))))) (= (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V@@4 ($LS $ly@@84) (Lit |elements#0@@84|)) (ite (= (|Seq#Length| (Lit |elements#0@@84|)) (LitInt 0)) (|Map#Empty| BoxType BoxType) (let ((|item#1@@2| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@4) (Lit |elements#0@@84|)))))) (let ((|dropLastMap#1| (Lit (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V@@4 ($LS $ly@@84) (Lit (Sequences.__default.DropLast (Tclass.MutableMapModel.Item MutableMapModel._default.MapFromStorage$V@@4) (Lit |elements#0@@84|))))))) (ite (MutableMapModel.Item.Entry_q |item#1@@2|) (|Map#Build| |dropLastMap#1| ($Box (int_2_U (LitInt (MutableMapModel.Item.key |item#1@@2|)))) (Lit (MutableMapModel.Item.value |item#1@@2|))) |dropLastMap#1|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2146| :pattern ( (MutableMapModel.__default.MapFromStorage MutableMapModel._default.MapFromStorage$V@@4 ($LS $ly@@84) (Lit |elements#0@@84|))) ))))
(assert  (=> (<= 73 $FunctionContextHeight) (forall ((MutableMapModel._default.CantEquivocate$V T@U) (|elements#0@@85| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.CantEquivocate$V) TyType) (= (type |elements#0@@85|) (SeqType BoxType))) (or (|MutableMapModel.__default.CantEquivocate#canCall| MutableMapModel._default.CantEquivocate$V |elements#0@@85|) (and (not (= 73 $FunctionContextHeight)) ($Is |elements#0@@85| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CantEquivocate$V)))))) true) :qid |unknown.0:0| :skolemid |2150| :pattern ( (MutableMapModel.__default.CantEquivocate MutableMapModel._default.CantEquivocate$V |elements#0@@85|)) ))))
(assert (forall ((MutableMapModel._default.CantEquivocate$V@@0 T@U) (|elements#0@@86| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.CantEquivocate$V@@0) TyType) (= (type |elements#0@@86|) (SeqType BoxType))) ($Is |elements#0@@86| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CantEquivocate$V@@0)))) (= (|MutableMapModel.__default.CantEquivocate#requires| MutableMapModel._default.CantEquivocate$V@@0 |elements#0@@86|) true)) :qid |unknown.0:0| :skolemid |2151| :pattern ( (|MutableMapModel.__default.CantEquivocate#requires| MutableMapModel._default.CantEquivocate$V@@0 |elements#0@@86|)) )))
(assert  (=> (<= 73 $FunctionContextHeight) (forall ((MutableMapModel._default.CantEquivocate$V@@1 T@U) (|elements#0@@87| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.CantEquivocate$V@@1) TyType) (= (type |elements#0@@87|) (SeqType BoxType))) (or (|MutableMapModel.__default.CantEquivocate#canCall| MutableMapModel._default.CantEquivocate$V@@1 |elements#0@@87|) (and (not (= 73 $FunctionContextHeight)) ($Is |elements#0@@87| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CantEquivocate$V@@1)))))) (and (forall ((|slot1#0@@9| T@U) (|slot2#0@@9| T@U) ) (!  (=> (and (and (= (type |slot1#0@@9|) DatatypeTypeType) (= (type |slot2#0@@9|) DatatypeTypeType)) (and ($Is |slot1#0@@9| Tclass.MutableMapModel.Slot) ($Is |slot2#0@@9| Tclass.MutableMapModel.Slot))) (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@87|) |slot1#0@@9|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot1#0@@9|) (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| |elements#0@@87|) |slot2#0@@9|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot2#0@@9|) (and (MutableMapModel.Slot.Slot_q |slot1#0@@9|) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@87| (MutableMapModel.Slot.slot |slot1#0@@9|)))) (and (MutableMapModel.Slot.Slot_q |slot2#0@@9|) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@87| (MutableMapModel.Slot.slot |slot2#0@@9|)))) (and (and (MutableMapModel.Slot.Slot_q |slot1#0@@9|) (MutableMapModel.Slot.Slot_q |slot2#0@@9|)) (=> (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@87| (MutableMapModel.Slot.slot |slot1#0@@9|)))) (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@87| (MutableMapModel.Slot.slot |slot2#0@@9|))))) (and (|$IsA#MutableMapModel.Slot| |slot1#0@@9|) (|$IsA#MutableMapModel.Slot| |slot2#0@@9|))))))))))))) :qid |MutableMapModelidfy.846:12| :skolemid |2153| :pattern ( (MutableMapModel.Slot.slot |slot2#0@@9|) (MutableMapModel.Slot.slot |slot1#0@@9|)) :pattern ( (MutableMapModel.Slot.slot |slot2#0@@9|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot1#0@@9|)) :pattern ( (MutableMapModel.Slot.slot |slot1#0@@9|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot2#0@@9|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot2#0@@9|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot1#0@@9|)) )) (= (MutableMapModel.__default.CantEquivocate MutableMapModel._default.CantEquivocate$V@@1 |elements#0@@87|) (forall ((|slot1#0@@10| T@U) (|slot2#0@@10| T@U) ) (!  (=> (and (and (= (type |slot1#0@@10|) DatatypeTypeType) (= (type |slot2#0@@10|) DatatypeTypeType)) (and ($Is |slot1#0@@10| Tclass.MutableMapModel.Slot) ($Is |slot2#0@@10| Tclass.MutableMapModel.Slot))) (=> (and (and (and (and (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot1#0@@10|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot2#0@@10|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@87| (MutableMapModel.Slot.slot |slot1#0@@10|))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@87| (MutableMapModel.Slot.slot |slot2#0@@10|))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@87| (MutableMapModel.Slot.slot |slot1#0@@10|)))) (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |elements#0@@87| (MutableMapModel.Slot.slot |slot2#0@@10|)))))) (|MutableMapModel.Slot#Equal| |slot1#0@@10| |slot2#0@@10|))) :qid |MutableMapModelidfy.846:12| :skolemid |2152| :pattern ( (MutableMapModel.Slot.slot |slot2#0@@10|) (MutableMapModel.Slot.slot |slot1#0@@10|)) :pattern ( (MutableMapModel.Slot.slot |slot2#0@@10|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot1#0@@10|)) :pattern ( (MutableMapModel.Slot.slot |slot1#0@@10|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot2#0@@10|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot2#0@@10|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@87|) |slot1#0@@10|)) ))))) :qid |unknown.0:0| :skolemid |2154| :pattern ( (MutableMapModel.__default.CantEquivocate MutableMapModel._default.CantEquivocate$V@@1 |elements#0@@87|)) ))))
(assert  (=> (<= 73 $FunctionContextHeight) (forall ((MutableMapModel._default.CantEquivocate$V@@2 T@U) (|elements#0@@88| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.CantEquivocate$V@@2) TyType) (= (type |elements#0@@88|) (SeqType BoxType))) (or (|MutableMapModel.__default.CantEquivocate#canCall| MutableMapModel._default.CantEquivocate$V@@2 (Lit |elements#0@@88|)) (and (not (= 73 $FunctionContextHeight)) ($Is |elements#0@@88| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.CantEquivocate$V@@2)))))) (and (forall ((|slot1#1@@1| T@U) (|slot2#1@@1| T@U) ) (!  (=> (and (and (= (type |slot1#1@@1|) DatatypeTypeType) (= (type |slot2#1@@1|) DatatypeTypeType)) (and ($Is |slot1#1@@1| Tclass.MutableMapModel.Slot) ($Is |slot2#1@@1| Tclass.MutableMapModel.Slot))) (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@88|)) |slot1#1@@1|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@88|)) |slot1#1@@1|) (and (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (Lit |elements#0@@88|)) |slot2#1@@1|) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@88|)) |slot2#1@@1|) (and (MutableMapModel.Slot.Slot_q |slot1#1@@1|) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@88|) (MutableMapModel.Slot.slot |slot1#1@@1|)))) (and (MutableMapModel.Slot.Slot_q |slot2#1@@1|) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@88|) (MutableMapModel.Slot.slot |slot2#1@@1|)))) (and (and (MutableMapModel.Slot.Slot_q |slot1#1@@1|) (MutableMapModel.Slot.Slot_q |slot2#1@@1|)) (=> (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@88|) (MutableMapModel.Slot.slot |slot1#1@@1|)))) (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@88|) (MutableMapModel.Slot.slot |slot2#1@@1|))))) (and (|$IsA#MutableMapModel.Slot| |slot1#1@@1|) (|$IsA#MutableMapModel.Slot| |slot2#1@@1|))))))))))))) :qid |MutableMapModelidfy.846:12| :skolemid |2156| :pattern ( (MutableMapModel.Slot.slot |slot2#1@@1|) (MutableMapModel.Slot.slot |slot1#1@@1|)) :pattern ( (MutableMapModel.Slot.slot |slot2#1@@1|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@88|) |slot1#1@@1|)) :pattern ( (MutableMapModel.Slot.slot |slot1#1@@1|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@88|) |slot2#1@@1|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@88|) |slot2#1@@1|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@88|) |slot1#1@@1|)) )) (= (MutableMapModel.__default.CantEquivocate MutableMapModel._default.CantEquivocate$V@@2 (Lit |elements#0@@88|)) (forall ((|slot1#1@@2| T@U) (|slot2#1@@2| T@U) ) (!  (=> (and (and (= (type |slot1#1@@2|) DatatypeTypeType) (= (type |slot2#1@@2|) DatatypeTypeType)) (and ($Is |slot1#1@@2| Tclass.MutableMapModel.Slot) ($Is |slot2#1@@2| Tclass.MutableMapModel.Slot))) (=> (and (and (and (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@88|)) |slot1#1@@2|) (MutableMapModel.__default.ValidSlot (|Seq#Length| (Lit |elements#0@@88|)) |slot2#1@@2|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@88|) (MutableMapModel.Slot.slot |slot1#1@@2|))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@88|) (MutableMapModel.Slot.slot |slot2#1@@2|))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@88|) (MutableMapModel.Slot.slot |slot1#1@@2|)))) (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |elements#0@@88|) (MutableMapModel.Slot.slot |slot2#1@@2|)))))) (|MutableMapModel.Slot#Equal| |slot1#1@@2| |slot2#1@@2|))) :qid |MutableMapModelidfy.846:12| :skolemid |2155| :pattern ( (MutableMapModel.Slot.slot |slot2#1@@2|) (MutableMapModel.Slot.slot |slot1#1@@2|)) :pattern ( (MutableMapModel.Slot.slot |slot2#1@@2|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@88|) |slot1#1@@2|)) :pattern ( (MutableMapModel.Slot.slot |slot1#1@@2|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@88|) |slot2#1@@2|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@88|) |slot2#1@@2|) (MutableMapModel.__default.ValidSlot (|Seq#Length| |elements#0@@88|) |slot1#1@@2|)) ))))) :qid |unknown.0:0| :weight 3 :skolemid |2157| :pattern ( (MutableMapModel.__default.CantEquivocate MutableMapModel._default.CantEquivocate$V@@2 (Lit |elements#0@@88|))) ))))
(assert  (=> (<= 76 $FunctionContextHeight) (forall ((MutableMapModel._default.UnderlyingContentsMatchesContents$V T@U) (|underlying#0| T@U) (|contents#0@@24| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.UnderlyingContentsMatchesContents$V) TyType) (= (type |underlying#0|) DatatypeTypeType)) (= (type |contents#0@@24|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.UnderlyingContentsMatchesContents$V |underlying#0| |contents#0@@24|) (and (not (= 76 $FunctionContextHeight)) (and ($Is |underlying#0| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.UnderlyingContentsMatchesContents$V)) ($Is |contents#0@@24| (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.UnderlyingContentsMatchesContents$V)))))) true) :qid |unknown.0:0| :skolemid |2244| :pattern ( (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.UnderlyingContentsMatchesContents$V |underlying#0| |contents#0@@24|)) ))))
(assert (forall ((MutableMapModel._default.UnderlyingContentsMatchesContents$V@@0 T@U) (|underlying#0@@0| T@U) (|contents#0@@25| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.UnderlyingContentsMatchesContents$V@@0) TyType) (= (type |underlying#0@@0|) DatatypeTypeType)) (= (type |contents#0@@25|) (MapType BoxType BoxType))) (and ($Is |underlying#0@@0| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.UnderlyingContentsMatchesContents$V@@0)) ($Is |contents#0@@25| (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.UnderlyingContentsMatchesContents$V@@0)))) (= (|MutableMapModel.__default.UnderlyingContentsMatchesContents#requires| MutableMapModel._default.UnderlyingContentsMatchesContents$V@@0 |underlying#0@@0| |contents#0@@25|) true)) :qid |unknown.0:0| :skolemid |2245| :pattern ( (|MutableMapModel.__default.UnderlyingContentsMatchesContents#requires| MutableMapModel._default.UnderlyingContentsMatchesContents$V@@0 |underlying#0@@0| |contents#0@@25|)) )))
(assert  (=> (<= 76 $FunctionContextHeight) (forall ((MutableMapModel._default.UnderlyingContentsMatchesContents$V@@1 T@U) (|underlying#0@@1| T@U) (|contents#0@@26| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.UnderlyingContentsMatchesContents$V@@1) TyType) (= (type |underlying#0@@1|) DatatypeTypeType)) (= (type |contents#0@@26|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.UnderlyingContentsMatchesContents$V@@1 |underlying#0@@1| |contents#0@@26|) (and (not (= 76 $FunctionContextHeight)) (and ($Is |underlying#0@@1| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.UnderlyingContentsMatchesContents$V@@1)) ($Is |contents#0@@26| (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.UnderlyingContentsMatchesContents$V@@1)))))) (and (and (forall ((|key#0@@55| T@U) ) (!  (=> (= (type |key#0@@55|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0@@55|)) (< (U_2_int |key#0@@55|) 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box |key#0@@55|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |underlying#0@@1|)) (=> (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box |key#0@@55|))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#0@@55|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box |key#0@@55|))) (and (|$IsA#Options.Option| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#0@@55|)))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |underlying#0@@1|))))))) :qid |MutableMapModelidfy.932:16| :skolemid |2248| :pattern ( (MapType0Select (|Map#Elements| |contents#0@@26|) ($Box |key#0@@55|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#0@@55|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#0@@55|))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box |key#0@@55|))) )) (=> (forall ((|key#0@@56| Int) ) (!  (=> (and (<= (LitInt 0) |key#0@@56|) (< |key#0@@56| 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box (int_2_U |key#0@@56|)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@56|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box (int_2_U |key#0@@56|)))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@56|)))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |contents#0@@26|) ($Box (int_2_U |key#0@@56|)))))))) :qid |MutableMapModelidfy.932:16| :skolemid |2250| :pattern ( (MapType0Select (|Map#Elements| |contents#0@@26|) ($Box (int_2_U |key#0@@56|)))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@56|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@56|)))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box (int_2_U |key#0@@56|)))) )) (forall ((|key#1@@3| T@U) ) (!  (=> (= (type |key#1@@3|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#1@@3|)) (< (U_2_int |key#1@@3|) 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box |key#1@@3|)))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |underlying#0@@1|) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#1@@3|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |underlying#0@@1|)))))) :qid |MutableMapModelidfy.933:16| :skolemid |2249| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#1@@3|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box |key#1@@3|))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box |key#1@@3|))) )))) (= (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.UnderlyingContentsMatchesContents$V@@1 |underlying#0@@1| |contents#0@@26|)  (and (forall ((|key#0@@57| Int) ) (!  (=> (and (<= (LitInt 0) |key#0@@57|) (< |key#0@@57| 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box (int_2_U |key#0@@57|)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@57|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box (int_2_U |key#0@@57|)))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@57|)))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |contents#0@@26|) ($Box (int_2_U |key#0@@57|)))))))) :qid |MutableMapModelidfy.932:16| :skolemid |2246| :pattern ( (MapType0Select (|Map#Elements| |contents#0@@26|) ($Box (int_2_U |key#0@@57|)))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@57|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#0@@57|)))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box (int_2_U |key#0@@57|)))) )) (forall ((|key#1@@4| Int) ) (!  (=> (and (<= (LitInt 0) |key#1@@4|) (< |key#1@@4| 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box (int_2_U |key#1@@4|))))) (or (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#1@@4|))))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#1@@4|)))))))) :qid |MutableMapModelidfy.933:16| :skolemid |2247| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#1@@4|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@1|)) ($Box (int_2_U |key#1@@4|)))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@26|) ($Box (int_2_U |key#1@@4|)))) )))))) :qid |unknown.0:0| :skolemid |2251| :pattern ( (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.UnderlyingContentsMatchesContents$V@@1 |underlying#0@@1| |contents#0@@26|)) ))))
(assert  (=> (<= 76 $FunctionContextHeight) (forall ((MutableMapModel._default.UnderlyingContentsMatchesContents$V@@2 T@U) (|underlying#0@@2| T@U) (|contents#0@@27| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.UnderlyingContentsMatchesContents$V@@2) TyType) (= (type |underlying#0@@2|) DatatypeTypeType)) (= (type |contents#0@@27|) (MapType BoxType BoxType))) (or (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.UnderlyingContentsMatchesContents$V@@2 (Lit |underlying#0@@2|) (Lit |contents#0@@27|)) (and (not (= 76 $FunctionContextHeight)) (and ($Is |underlying#0@@2| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.UnderlyingContentsMatchesContents$V@@2)) ($Is |contents#0@@27| (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.UnderlyingContentsMatchesContents$V@@2)))))) (and (and (forall ((|key#2| T@U) ) (!  (=> (= (type |key#2|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#2|)) (< (U_2_int |key#2|) 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box |key#2|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |underlying#0@@2|))) (=> (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box |key#2|))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|))) ($Box |key#2|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box |key#2|))) (and (|$IsA#Options.Option| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|)))) ($Box |key#2|)))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |underlying#0@@2|)))))))) :qid |MutableMapModelidfy.932:16| :skolemid |2254| :pattern ( (MapType0Select (|Map#Elements| |contents#0@@27|) ($Box |key#2|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box |key#2|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box |key#2|))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box |key#2|))) )) (=> (forall ((|key#2@@0| Int) ) (!  (=> (and (<= (LitInt 0) |key#2@@0|) (< |key#2@@0| 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box (int_2_U |key#2@@0|)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|))) ($Box (int_2_U |key#2@@0|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box (int_2_U |key#2@@0|)))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|)))) ($Box (int_2_U |key#2@@0|)))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |contents#0@@27|)) ($Box (int_2_U |key#2@@0|)))))))) :qid |MutableMapModelidfy.932:16| :skolemid |2256| :pattern ( (MapType0Select (|Map#Elements| |contents#0@@27|) ($Box (int_2_U |key#2@@0|)))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box (int_2_U |key#2@@0|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box (int_2_U |key#2@@0|)))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box (int_2_U |key#2@@0|)))) )) (forall ((|key#3| T@U) ) (!  (=> (= (type |key#3|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#3|)) (< (U_2_int |key#3|) 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box |key#3|)))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |underlying#0@@2|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|))) ($Box |key#3|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |underlying#0@@2|))))))) :qid |MutableMapModelidfy.933:16| :skolemid |2255| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box |key#3|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box |key#3|))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box |key#3|))) )))) (= (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.UnderlyingContentsMatchesContents$V@@2 (Lit |underlying#0@@2|) (Lit |contents#0@@27|))  (and (forall ((|key#2@@1| Int) ) (!  (=> (and (<= (LitInt 0) |key#2@@1|) (< |key#2@@1| 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box (int_2_U |key#2@@1|)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|))) ($Box (int_2_U |key#2@@1|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box (int_2_U |key#2@@1|)))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|)))) ($Box (int_2_U |key#2@@1|)))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |contents#0@@27|)) ($Box (int_2_U |key#2@@1|)))))))) :qid |MutableMapModelidfy.932:16| :skolemid |2252| :pattern ( (MapType0Select (|Map#Elements| |contents#0@@27|) ($Box (int_2_U |key#2@@1|)))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box (int_2_U |key#2@@1|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box (int_2_U |key#2@@1|)))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box (int_2_U |key#2@@1|)))) )) (forall ((|key#3@@0| Int) ) (!  (=> (and (<= (LitInt 0) |key#3@@0|) (< |key#3@@0| 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box (int_2_U |key#3@@0|))))) (or (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|))) ($Box (int_2_U |key#3@@0|))))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |underlying#0@@2|)))) ($Box (int_2_U |key#3@@0|)))))))) :qid |MutableMapModelidfy.933:16| :skolemid |2253| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box (int_2_U |key#3@@0|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying#0@@2|)) ($Box (int_2_U |key#3@@0|)))) :pattern ( (MapType0Select (|Map#Domain| |contents#0@@27|) ($Box (int_2_U |key#3@@0|)))) )))))) :qid |unknown.0:0| :weight 3 :skolemid |2257| :pattern ( (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.UnderlyingContentsMatchesContents$V@@2 (Lit |underlying#0@@2|) (Lit |contents#0@@27|))) ))))
(assert  (=> (<= 77 $FunctionContextHeight) (forall ((MutableMapModel._default.UnderlyingInv$V T@U) (|self#0@@50| T@U) (|underlying#0@@3| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.UnderlyingInv$V) TyType) (= (type |self#0@@50|) DatatypeTypeType)) (= (type |underlying#0@@3|) DatatypeTypeType)) (or (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.UnderlyingInv$V |self#0@@50| |underlying#0@@3|) (and (not (= 77 $FunctionContextHeight)) (and ($Is |self#0@@50| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UnderlyingInv$V)) ($Is |underlying#0@@3| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.UnderlyingInv$V)))))) true) :qid |unknown.0:0| :skolemid |2264| :pattern ( (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.UnderlyingInv$V |self#0@@50| |underlying#0@@3|)) ))))
(assert (forall ((MutableMapModel._default.UnderlyingInv$V@@0 T@U) (|self#0@@51| T@U) (|underlying#0@@4| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.UnderlyingInv$V@@0) TyType) (= (type |self#0@@51|) DatatypeTypeType)) (= (type |underlying#0@@4|) DatatypeTypeType)) (and ($Is |self#0@@51| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UnderlyingInv$V@@0)) ($Is |underlying#0@@4| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.UnderlyingInv$V@@0)))) (= (|MutableMapModel.__default.UnderlyingInv#requires| MutableMapModel._default.UnderlyingInv$V@@0 |self#0@@51| |underlying#0@@4|) true)) :qid |unknown.0:0| :skolemid |2265| :pattern ( (|MutableMapModel.__default.UnderlyingInv#requires| MutableMapModel._default.UnderlyingInv$V@@0 |self#0@@51| |underlying#0@@4|)) )))
(assert  (=> (<= 77 $FunctionContextHeight) (forall ((MutableMapModel._default.UnderlyingInv$V@@1 T@U) (|self#0@@52| T@U) (|underlying#0@@5| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.UnderlyingInv$V@@1) TyType) (= (type |self#0@@52|) DatatypeTypeType)) (= (type |underlying#0@@5|) DatatypeTypeType)) (or (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.UnderlyingInv$V@@1 |self#0@@52| |underlying#0@@5|) (and (not (= 77 $FunctionContextHeight)) (and ($Is |self#0@@52| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UnderlyingInv$V@@1)) ($Is |underlying#0@@5| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.UnderlyingInv$V@@1)))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@52|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@52|)) (=> (= (|Map#Card| (MutableMapModel.LinearHashMap.contents |self#0@@52|)) (MutableMapModel.LinearHashMap.count |self#0@@52|)) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@52|) (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.UnderlyingInv$V@@1 |underlying#0@@5| (MutableMapModel.LinearHashMap.contents |self#0@@52|))) (=> (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.UnderlyingInv$V@@1 |underlying#0@@5| (MutableMapModel.LinearHashMap.contents |self#0@@52|)) (and (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.UnderlyingInv$V@@1 |underlying#0@@5|) (=> (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.UnderlyingInv$V@@1 |underlying#0@@5|) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |underlying#0@@5|) (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.UnderlyingInv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage |underlying#0@@5|))) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@52|)))))))) (= (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.UnderlyingInv$V@@1 |self#0@@52| |underlying#0@@5|)  (and (and (and (= (|Map#Card| (MutableMapModel.LinearHashMap.contents |self#0@@52|)) (MutableMapModel.LinearHashMap.count |self#0@@52|)) (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.UnderlyingInv$V@@1 |underlying#0@@5| (MutableMapModel.LinearHashMap.contents |self#0@@52|))) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.UnderlyingInv$V@@1 |underlying#0@@5|)) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.UnderlyingInv$V@@1 ($LS $LZ) (MutableMapModel.FixedSizeLinearHashMap.storage |underlying#0@@5|)) (MutableMapModel.LinearHashMap.contents |self#0@@52|)))))) :qid |unknown.0:0| :skolemid |2266| :pattern ( (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.UnderlyingInv$V@@1 |self#0@@52| |underlying#0@@5|)) ))))
(assert  (=> (<= 77 $FunctionContextHeight) (forall ((MutableMapModel._default.UnderlyingInv$V@@2 T@U) (|self#0@@53| T@U) (|underlying#0@@6| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.UnderlyingInv$V@@2) TyType) (= (type |self#0@@53|) DatatypeTypeType)) (= (type |underlying#0@@6|) DatatypeTypeType)) (or (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.UnderlyingInv$V@@2 (Lit |self#0@@53|) (Lit |underlying#0@@6|)) (and (not (= 77 $FunctionContextHeight)) (and ($Is |self#0@@53| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UnderlyingInv$V@@2)) ($Is |underlying#0@@6| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.UnderlyingInv$V@@2)))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@53|)) (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@53|))) (=> (= (|Map#Card| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@53|)))) (LitInt (MutableMapModel.LinearHashMap.count (Lit |self#0@@53|)))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@53|)) (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.UnderlyingInv$V@@2 (Lit |underlying#0@@6|) (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@53|))))) (=> (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.UnderlyingInv$V@@2 (Lit |underlying#0@@6|) (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@53|))))))) (and (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.UnderlyingInv$V@@2 (Lit |underlying#0@@6|)) (=> (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.UnderlyingInv$V@@2 (Lit |underlying#0@@6|))))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit |underlying#0@@6|)) (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.UnderlyingInv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |underlying#0@@6|))))) (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@53|))))))))) (= (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.UnderlyingInv$V@@2 (Lit |self#0@@53|) (Lit |underlying#0@@6|))  (and (and (and (= (|Map#Card| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@53|)))) (LitInt (MutableMapModel.LinearHashMap.count (Lit |self#0@@53|)))) (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.UnderlyingInv$V@@2 (Lit |underlying#0@@6|) (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@53|))))) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.UnderlyingInv$V@@2 (Lit |underlying#0@@6|))) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.UnderlyingInv$V@@2 ($LS $LZ) (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |underlying#0@@6|)))) (MutableMapModel.LinearHashMap.contents (Lit |self#0@@53|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2267| :pattern ( (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.UnderlyingInv$V@@2 (Lit |self#0@@53|) (Lit |underlying#0@@6|))) ))))
(assert  (=> (<= 79 $FunctionContextHeight) (forall ((MutableMapModel._default.Inv$V T@U) (|self#0@@54| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.Inv$V) TyType) (= (type |self#0@@54|) DatatypeTypeType)) (or (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.Inv$V |self#0@@54|) (and (not (= 79 $FunctionContextHeight)) ($Is |self#0@@54| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Inv$V))))) (MutableMapModel.__default.Inv MutableMapModel._default.Inv$V |self#0@@54|)) (= (|Map#Card| (MutableMapModel.LinearHashMap.contents |self#0@@54|)) (MutableMapModel.LinearHashMap.count |self#0@@54|))) :qid |unknown.0:0| :skolemid |2305| :pattern ( (MutableMapModel.__default.Inv MutableMapModel._default.Inv$V |self#0@@54|)) ))))
(assert (forall ((MutableMapModel._default.Inv$V@@0 T@U) (|self#0@@55| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.Inv$V@@0) TyType) (= (type |self#0@@55|) DatatypeTypeType)) ($Is |self#0@@55| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Inv$V@@0))) (= (|MutableMapModel.__default.Inv#requires| MutableMapModel._default.Inv$V@@0 |self#0@@55|) true)) :qid |unknown.0:0| :skolemid |2306| :pattern ( (|MutableMapModel.__default.Inv#requires| MutableMapModel._default.Inv$V@@0 |self#0@@55|)) )))
(assert  (=> (<= 79 $FunctionContextHeight) (forall ((MutableMapModel._default.Inv$V@@1 T@U) (|self#0@@56| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.Inv$V@@1) TyType) (= (type |self#0@@56|) DatatypeTypeType)) (or (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.Inv$V@@1 |self#0@@56|) (and (not (= 79 $FunctionContextHeight)) ($Is |self#0@@56| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Inv$V@@1))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@56|) (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.Inv$V@@1 |self#0@@56| (MutableMapModel.LinearHashMap.underlying |self#0@@56|))) (=> (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.Inv$V@@1 |self#0@@56| (MutableMapModel.LinearHashMap.underlying |self#0@@56|)) (and (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@56|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@56|))) (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.Inv$V@@1 (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@56|)))) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@56|)) (=> (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.Inv$V@@1 ($LS $LZ) (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@56|))) (MutableMapModel.LinearHashMap.contents |self#0@@56|)) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@56|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@56|)) (=> (= (|Map#Card| (MutableMapModel.LinearHashMap.contents |self#0@@56|)) (MutableMapModel.LinearHashMap.count |self#0@@56|)) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@56|))))))) (= (MutableMapModel.__default.Inv MutableMapModel._default.Inv$V@@1 |self#0@@56|)  (and (and (and (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.Inv$V@@1 |self#0@@56| (MutableMapModel.LinearHashMap.underlying |self#0@@56|)) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.Inv$V@@1 ($LS $LZ) (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@56|))) (MutableMapModel.LinearHashMap.contents |self#0@@56|))) (= (|Map#Card| (MutableMapModel.LinearHashMap.contents |self#0@@56|)) (MutableMapModel.LinearHashMap.count |self#0@@56|))) (<= (MutableMapModel.LinearHashMap.count |self#0@@56|) (LitInt (Div 18446744073709551616 (LitInt 8)))))))) :qid |unknown.0:0| :skolemid |2307| :pattern ( (MutableMapModel.__default.Inv MutableMapModel._default.Inv$V@@1 |self#0@@56|)) ))))
(assert  (=> (<= 79 $FunctionContextHeight) (forall ((MutableMapModel._default.Inv$V@@2 T@U) (|self#0@@57| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.Inv$V@@2) TyType) (= (type |self#0@@57|) DatatypeTypeType)) (or (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.Inv$V@@2 (Lit |self#0@@57|)) (and (not (= 79 $FunctionContextHeight)) ($Is |self#0@@57| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Inv$V@@2))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@57|)) (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.Inv$V@@2 (Lit |self#0@@57|) (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@57|))))) (=> (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.Inv$V@@2 (Lit |self#0@@57|) (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@57|))))))) (and (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@57|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@57|))))) (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.Inv$V@@2 (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@57|))))))) (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@57|))) (=> (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.Inv$V@@2 ($LS $LZ) (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@57|)))))) (MutableMapModel.LinearHashMap.contents (Lit |self#0@@57|))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@57|)) (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@57|))) (=> (= (|Map#Card| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@57|)))) (LitInt (MutableMapModel.LinearHashMap.count (Lit |self#0@@57|)))) (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@57|)))))))) (= (MutableMapModel.__default.Inv MutableMapModel._default.Inv$V@@2 (Lit |self#0@@57|))  (and (and (and (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.Inv$V@@2 (Lit |self#0@@57|) (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@57|)))) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.Inv$V@@2 ($LS $LZ) (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@57|)))))) (MutableMapModel.LinearHashMap.contents (Lit |self#0@@57|)))) (= (|Map#Card| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@57|)))) (LitInt (MutableMapModel.LinearHashMap.count (Lit |self#0@@57|))))) (<= (LitInt (MutableMapModel.LinearHashMap.count (Lit |self#0@@57|))) (LitInt (Div 18446744073709551616 (LitInt 8)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2308| :pattern ( (MutableMapModel.__default.Inv MutableMapModel._default.Inv$V@@2 (Lit |self#0@@57|))) ))))
(assert (forall ((arg0@@281 T@U) (arg1@@133 T@U) (arg2@@77 Int) ) (! (= (type (MutableMapModel.__default.Constructor arg0@@281 arg1@@133 arg2@@77)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.Constructor| :pattern ( (MutableMapModel.__default.Constructor arg0@@281 arg1@@133 arg2@@77)) )))
(assert (forall ((MutableMapModel._default.Constructor$V T@U) ($ly@@85 T@U) (|size#0@@3| Int) ) (!  (=> (and (= (type MutableMapModel._default.Constructor$V) TyType) (= (type $ly@@85) LayerTypeType)) (= (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V ($LS $ly@@85) |size#0@@3|) (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V $ly@@85 |size#0@@3|))) :qid |unknown.0:0| :skolemid |2407| :pattern ( (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V ($LS $ly@@85) |size#0@@3|)) )))
(assert (forall ((MutableMapModel._default.Constructor$V@@0 T@U) ($ly@@86 T@U) (|size#0@@4| Int) ) (!  (=> (and (= (type MutableMapModel._default.Constructor$V@@0) TyType) (= (type $ly@@86) LayerTypeType)) (= (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V@@0 $ly@@86 |size#0@@4|) (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V@@0 $LZ |size#0@@4|))) :qid |unknown.0:0| :skolemid |2408| :pattern ( (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V@@0 (AsFuelBottom $ly@@86) |size#0@@4|)) )))
(assert  (=> (<= 82 $FunctionContextHeight) (forall ((MutableMapModel._default.Constructor$V@@1 T@U) ($ly@@87 T@U) (|size#0@@5| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Constructor$V@@1) TyType) (= (type $ly@@87) LayerTypeType)) (or (|MutableMapModel.__default.Constructor#canCall| MutableMapModel._default.Constructor$V@@1 |size#0@@5|) (and (not (= 82 $FunctionContextHeight)) (and (and (<= (LitInt 0) |size#0@@5|) (< |size#0@@5| 18446744073709551616)) (<= (LitInt 128) |size#0@@5|))))) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.Constructor$V@@1 (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V@@1 $ly@@87 |size#0@@5|)) (|Map#Equal| (MutableMapModel.LinearHashMap.contents (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V@@1 $ly@@87 |size#0@@5|)) (|Map#Empty| BoxType BoxType))) ($Is (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V@@1 $ly@@87 |size#0@@5|) (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Constructor$V@@1)))) :qid |unknown.0:0| :skolemid |2409| :pattern ( (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V@@1 $ly@@87 |size#0@@5|)) ))))
(assert (forall ((MutableMapModel._default.Constructor$V@@2 T@U) ($ly@@88 T@U) (|size#0@@6| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Constructor$V@@2) TyType) (= (type $ly@@88) LayerTypeType)) (and (<= (LitInt 0) |size#0@@6|) (< |size#0@@6| 18446744073709551616))) (= (|MutableMapModel.__default.Constructor#requires| MutableMapModel._default.Constructor$V@@2 $ly@@88 |size#0@@6|) (<= (LitInt 128) |size#0@@6|))) :qid |unknown.0:0| :skolemid |2410| :pattern ( (|MutableMapModel.__default.Constructor#requires| MutableMapModel._default.Constructor$V@@2 $ly@@88 |size#0@@6|)) )))
(assert  (=> (<= 82 $FunctionContextHeight) (forall ((MutableMapModel._default.Constructor$V@@3 T@U) ($ly@@89 T@U) (|size#0@@7| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Constructor$V@@3) TyType) (= (type $ly@@89) LayerTypeType)) (or (|MutableMapModel.__default.Constructor#canCall| MutableMapModel._default.Constructor$V@@3 |size#0@@7|) (and (not (= 82 $FunctionContextHeight)) (and (and (<= (LitInt 0) |size#0@@7|) (< |size#0@@7| 18446744073709551616)) (<= (LitInt 128) |size#0@@7|))))) (and (|MutableMapModel.__default.ConstructorFromSize#canCall| MutableMapModel._default.Constructor$V@@3 |size#0@@7|) (= (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V@@3 ($LS $ly@@89) |size#0@@7|) (let ((|self#0@@58| (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.Constructor$V@@3 |size#0@@7|) (LitInt 0) (Lit (|Map#Empty| BoxType BoxType))))) |self#0@@58|)))) :qid |unknown.0:0| :skolemid |2411| :pattern ( (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V@@3 ($LS $ly@@89) |size#0@@7|)) ))))
(assert  (=> (<= 82 $FunctionContextHeight) (forall ((MutableMapModel._default.Constructor$V@@4 T@U) ($ly@@90 T@U) (|size#0@@8| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Constructor$V@@4) TyType) (= (type $ly@@90) LayerTypeType)) (or (|MutableMapModel.__default.Constructor#canCall| MutableMapModel._default.Constructor$V@@4 (LitInt |size#0@@8|)) (and (not (= 82 $FunctionContextHeight)) (and (and (<= (LitInt 0) |size#0@@8|) (< |size#0@@8| 18446744073709551616)) (<= (LitInt 128) (LitInt |size#0@@8|)))))) (and (|MutableMapModel.__default.ConstructorFromSize#canCall| MutableMapModel._default.Constructor$V@@4 (LitInt |size#0@@8|)) (= (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V@@4 ($LS $ly@@90) (LitInt |size#0@@8|)) (let ((|self#1| (Lit (|#MutableMapModel.LinearHashMap.LinearHashMap| (Lit (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.Constructor$V@@4 (LitInt |size#0@@8|))) (LitInt 0) (Lit (|Map#Empty| BoxType BoxType)))))) |self#1|)))) :qid |unknown.0:0| :weight 3 :skolemid |2412| :pattern ( (MutableMapModel.__default.Constructor MutableMapModel._default.Constructor$V@@4 ($LS $ly@@90) (LitInt |size#0@@8|))) ))))
(assert (forall ((arg0@@282 T@U) (arg1@@134 T@U) (arg2@@78 T@U) (arg3@@47 T@U) (arg4@@30 Int) ) (! (= (type (MutableMapModel.__default.ReallocIterate arg0@@282 arg1@@134 arg2@@78 arg3@@47 arg4@@30)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.ReallocIterate| :pattern ( (MutableMapModel.__default.ReallocIterate arg0@@282 arg1@@134 arg2@@78 arg3@@47 arg4@@30)) )))
(assert (forall ((MutableMapModel._default.ReallocIterate$V T@U) ($ly@@91 T@U) (|self#0@@59| T@U) (|newUnderlying#0| T@U) (|i#0@@5| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ReallocIterate$V) TyType) (= (type $ly@@91) LayerTypeType)) (= (type |self#0@@59|) DatatypeTypeType)) (= (type |newUnderlying#0|) DatatypeTypeType)) (= (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V ($LS $ly@@91) |self#0@@59| |newUnderlying#0| |i#0@@5|) (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V $ly@@91 |self#0@@59| |newUnderlying#0| |i#0@@5|))) :qid |unknown.0:0| :skolemid |2465| :pattern ( (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V ($LS $ly@@91) |self#0@@59| |newUnderlying#0| |i#0@@5|)) )))
(assert (forall ((MutableMapModel._default.ReallocIterate$V@@0 T@U) ($ly@@92 T@U) (|self#0@@60| T@U) (|newUnderlying#0@@0| T@U) (|i#0@@6| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ReallocIterate$V@@0) TyType) (= (type $ly@@92) LayerTypeType)) (= (type |self#0@@60|) DatatypeTypeType)) (= (type |newUnderlying#0@@0|) DatatypeTypeType)) (= (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@0 $ly@@92 |self#0@@60| |newUnderlying#0@@0| |i#0@@6|) (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@0 $LZ |self#0@@60| |newUnderlying#0@@0| |i#0@@6|))) :qid |unknown.0:0| :skolemid |2466| :pattern ( (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@0 (AsFuelBottom $ly@@92) |self#0@@60| |newUnderlying#0@@0| |i#0@@6|)) )))
(assert  (=> (<= 84 $FunctionContextHeight) (forall ((MutableMapModel._default.ReallocIterate$V@@1 T@U) ($ly@@93 T@U) (|self#0@@61| T@U) (|newUnderlying#0@@1| T@U) (|i#0@@7| Int) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.ReallocIterate$V@@1) TyType) (= (type $ly@@93) LayerTypeType)) (= (type |self#0@@61|) DatatypeTypeType)) (= (type |newUnderlying#0@@1|) DatatypeTypeType)) (or (|MutableMapModel.__default.ReallocIterate#canCall| MutableMapModel._default.ReallocIterate$V@@1 |self#0@@61| |newUnderlying#0@@1| |i#0@@7|) (and (not (= 84 $FunctionContextHeight)) (and (and (and ($Is |self#0@@61| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ReallocIterate$V@@1)) ($Is |newUnderlying#0@@1| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ReallocIterate$V@@1))) (and (<= (LitInt 0) |i#0@@7|) (< |i#0@@7| 18446744073709551616))) (and (and (and (and (MutableMapModel.__default.Inv MutableMapModel._default.ReallocIterate$V@@1 |self#0@@61|) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ReallocIterate$V@@1 |newUnderlying#0@@1|)) (and (<= (LitInt 0) |i#0@@7|) (<= |i#0@@7| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@61|)))))) (< (MutableMapModel.LinearHashMap.count |self#0@@61|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@1|)) 1))) (|Set#Subset| (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@1|)) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@61|)))))))) ($Is (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@1 $ly@@93 |self#0@@61| |newUnderlying#0@@1| |i#0@@7|) (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ReallocIterate$V@@1))) :qid |unknown.0:0| :skolemid |2467| :pattern ( (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@1 $ly@@93 |self#0@@61| |newUnderlying#0@@1| |i#0@@7|)) ))))
(assert (forall ((MutableMapModel._default.ReallocIterate$V@@2 T@U) ($ly@@94 T@U) (|self#0@@62| T@U) (|newUnderlying#0@@2| T@U) (|i#0@@8| Int) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.ReallocIterate$V@@2) TyType) (= (type $ly@@94) LayerTypeType)) (= (type |self#0@@62|) DatatypeTypeType)) (= (type |newUnderlying#0@@2|) DatatypeTypeType)) (and (and ($Is |self#0@@62| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ReallocIterate$V@@2)) ($Is |newUnderlying#0@@2| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ReallocIterate$V@@2))) (and (<= (LitInt 0) |i#0@@8|) (< |i#0@@8| 18446744073709551616)))) (= (|MutableMapModel.__default.ReallocIterate#requires| MutableMapModel._default.ReallocIterate$V@@2 $ly@@94 |self#0@@62| |newUnderlying#0@@2| |i#0@@8|)  (and (and (and (and (MutableMapModel.__default.Inv MutableMapModel._default.ReallocIterate$V@@2 |self#0@@62|) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ReallocIterate$V@@2 |newUnderlying#0@@2|)) (and (<= (LitInt 0) |i#0@@8|) (<= |i#0@@8| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@62|)))))) (< (MutableMapModel.LinearHashMap.count |self#0@@62|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@2|)) 1))) (|Set#Subset| (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@2|)) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@62|)))))) :qid |unknown.0:0| :skolemid |2468| :pattern ( (|MutableMapModel.__default.ReallocIterate#requires| MutableMapModel._default.ReallocIterate$V@@2 $ly@@94 |self#0@@62| |newUnderlying#0@@2| |i#0@@8|)) )))
(assert (= (type StartFuel_MutableMapModel._default.FixedSizeInsert) LayerTypeType))
(assert  (=> (<= 84 $FunctionContextHeight) (forall ((MutableMapModel._default.ReallocIterate$V@@3 T@U) ($ly@@95 T@U) (|self#0@@63| T@U) (|newUnderlying#0@@3| T@U) (|i#0@@9| Int) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.ReallocIterate$V@@3) TyType) (= (type $ly@@95) LayerTypeType)) (= (type |self#0@@63|) DatatypeTypeType)) (= (type |newUnderlying#0@@3|) DatatypeTypeType)) (or (|MutableMapModel.__default.ReallocIterate#canCall| MutableMapModel._default.ReallocIterate$V@@3 |self#0@@63| |newUnderlying#0@@3| |i#0@@9|) (and (not (= 84 $FunctionContextHeight)) (and (and (and ($Is |self#0@@63| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ReallocIterate$V@@3)) ($Is |newUnderlying#0@@3| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ReallocIterate$V@@3))) (and (<= (LitInt 0) |i#0@@9|) (< |i#0@@9| 18446744073709551616))) (and (and (and (and (MutableMapModel.__default.Inv MutableMapModel._default.ReallocIterate$V@@3 |self#0@@63|) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ReallocIterate$V@@3 |newUnderlying#0@@3|)) (and (<= (LitInt 0) |i#0@@9|) (<= |i#0@@9| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@63|)))))) (< (MutableMapModel.LinearHashMap.count |self#0@@63|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@3|)) 1))) (|Set#Subset| (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@3|)) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@63|)))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@63|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@63|))) (=> (not (= |i#0@@9| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@63|))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@63|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@63|))) (let ((|item#0@@7| ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@63|)) |i#0@@9|)))) (and (=> (MutableMapModel.Item.Entry_q |item#0@@7|) (and (|MutableMapModel.__default.FixedSizeInsert#canCall| MutableMapModel._default.ReallocIterate$V@@3 |newUnderlying#0@@3| (MutableMapModel.Item.key |item#0@@7|) (MutableMapModel.Item.value |item#0@@7|)) (_System.Tuple2.___hMake2_q (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.ReallocIterate$V@@3 StartFuel_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@3| (MutableMapModel.Item.key |item#0@@7|) (MutableMapModel.Item.value |item#0@@7|))))) (let ((|newUnderlying'#0| (ite (MutableMapModel.Item.Entry_q |item#0@@7|) ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.ReallocIterate$V@@3 StartFuel_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@3| (MutableMapModel.Item.key |item#0@@7|) (MutableMapModel.Item.value |item#0@@7|)))) |newUnderlying#0@@3|))) (|MutableMapModel.__default.ReallocIterate#canCall| MutableMapModel._default.ReallocIterate$V@@3 |self#0@@63| |newUnderlying'#0| (+ |i#0@@9| 1)))))))) (= (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@3 ($LS $ly@@95) |self#0@@63| |newUnderlying#0@@3| |i#0@@9|) (ite (= |i#0@@9| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@63|)))) |newUnderlying#0@@3| (let ((|item#0@@8| ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@63|)) |i#0@@9|)))) (let ((|newUnderlying'#0@@0| (ite (MutableMapModel.Item.Entry_q |item#0@@8|) ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.ReallocIterate$V@@3 StartFuel_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@3| (MutableMapModel.Item.key |item#0@@8|) (MutableMapModel.Item.value |item#0@@8|)))) |newUnderlying#0@@3|))) (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@3 $ly@@95 |self#0@@63| |newUnderlying'#0@@0| (+ |i#0@@9| 1)))))))) :qid |unknown.0:0| :skolemid |2469| :pattern ( (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@3 ($LS $ly@@95) |self#0@@63| |newUnderlying#0@@3| |i#0@@9|)) ))))
(assert  (=> (<= 84 $FunctionContextHeight) (forall ((MutableMapModel._default.ReallocIterate$V@@4 T@U) ($ly@@96 T@U) (|self#0@@64| T@U) (|newUnderlying#0@@4| T@U) (|i#0@@10| Int) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.ReallocIterate$V@@4) TyType) (= (type $ly@@96) LayerTypeType)) (= (type |self#0@@64|) DatatypeTypeType)) (= (type |newUnderlying#0@@4|) DatatypeTypeType)) (or (|MutableMapModel.__default.ReallocIterate#canCall| MutableMapModel._default.ReallocIterate$V@@4 (Lit |self#0@@64|) |newUnderlying#0@@4| (LitInt |i#0@@10|)) (and (not (= 84 $FunctionContextHeight)) (and (and (and ($Is |self#0@@64| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ReallocIterate$V@@4)) ($Is |newUnderlying#0@@4| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ReallocIterate$V@@4))) (and (<= (LitInt 0) |i#0@@10|) (< |i#0@@10| 18446744073709551616))) (and (and (and (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.ReallocIterate$V@@4 (Lit |self#0@@64|))))) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ReallocIterate$V@@4 |newUnderlying#0@@4|)) (and (<= (LitInt 0) (LitInt |i#0@@10|)) (<= (LitInt |i#0@@10|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@64|))))))))) (< (MutableMapModel.LinearHashMap.count (Lit |self#0@@64|)) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@4|)) 1))) (|Set#Subset| (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@4|)) (|Map#Domain| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@64|)))))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@64|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@64|))))) (=> (not (= (LitInt |i#0@@10|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@64|)))))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@64|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@64|))))) (let ((|item#1@@3| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@64|))))) (LitInt |i#0@@10|))))) (and (=> (MutableMapModel.Item.Entry_q |item#1@@3|) (and (|MutableMapModel.__default.FixedSizeInsert#canCall| MutableMapModel._default.ReallocIterate$V@@4 |newUnderlying#0@@4| (MutableMapModel.Item.key |item#1@@3|) (MutableMapModel.Item.value |item#1@@3|)) (_System.Tuple2.___hMake2_q (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.ReallocIterate$V@@4 StartFuel_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@4| (MutableMapModel.Item.key |item#1@@3|) (MutableMapModel.Item.value |item#1@@3|))))) (let ((|newUnderlying'#1| (ite (MutableMapModel.Item.Entry_q |item#1@@3|) ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.ReallocIterate$V@@4 StartFuel_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@4| (MutableMapModel.Item.key |item#1@@3|) (MutableMapModel.Item.value |item#1@@3|)))) |newUnderlying#0@@4|))) (|MutableMapModel.__default.ReallocIterate#canCall| MutableMapModel._default.ReallocIterate$V@@4 (Lit |self#0@@64|) |newUnderlying'#1| (LitInt (+ |i#0@@10| 1))))))))) (= (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@4 ($LS $ly@@96) (Lit |self#0@@64|) |newUnderlying#0@@4| (LitInt |i#0@@10|)) (ite (= (LitInt |i#0@@10|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@64|))))))) |newUnderlying#0@@4| (let ((|item#1@@4| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@64|))))) (LitInt |i#0@@10|))))) (let ((|newUnderlying'#1@@0| (ite (MutableMapModel.Item.Entry_q |item#1@@4|) ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.ReallocIterate$V@@4 StartFuel_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@4| (MutableMapModel.Item.key |item#1@@4|) (MutableMapModel.Item.value |item#1@@4|)))) |newUnderlying#0@@4|))) (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@4 ($LS $ly@@96) (Lit |self#0@@64|) |newUnderlying'#1@@0| (LitInt (+ |i#0@@10| 1))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2470| :pattern ( (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@4 ($LS $ly@@96) (Lit |self#0@@64|) |newUnderlying#0@@4| (LitInt |i#0@@10|))) ))))
(assert  (=> (<= 84 $FunctionContextHeight) (forall ((MutableMapModel._default.ReallocIterate$V@@5 T@U) ($ly@@97 T@U) (|self#0@@65| T@U) (|newUnderlying#0@@5| T@U) (|i#0@@11| Int) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.ReallocIterate$V@@5) TyType) (= (type $ly@@97) LayerTypeType)) (= (type |self#0@@65|) DatatypeTypeType)) (= (type |newUnderlying#0@@5|) DatatypeTypeType)) (or (|MutableMapModel.__default.ReallocIterate#canCall| MutableMapModel._default.ReallocIterate$V@@5 (Lit |self#0@@65|) (Lit |newUnderlying#0@@5|) (LitInt |i#0@@11|)) (and (not (= 84 $FunctionContextHeight)) (and (and (and ($Is |self#0@@65| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ReallocIterate$V@@5)) ($Is |newUnderlying#0@@5| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.ReallocIterate$V@@5))) (and (<= (LitInt 0) |i#0@@11|) (< |i#0@@11| 18446744073709551616))) (and (and (and (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.ReallocIterate$V@@5 (Lit |self#0@@65|))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.ReallocIterate$V@@5 (Lit |newUnderlying#0@@5|)))))) (and (<= (LitInt 0) (LitInt |i#0@@11|)) (<= (LitInt |i#0@@11|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@65|))))))))) (< (MutableMapModel.LinearHashMap.count (Lit |self#0@@65|)) (- (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit |newUnderlying#0@@5|)))) 1))) (|Set#Subset| (|Map#Domain| (Lit (MutableMapModel.FixedSizeLinearHashMap.contents (Lit |newUnderlying#0@@5|)))) (|Map#Domain| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@65|)))))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@65|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@65|))))) (=> (not (= (LitInt |i#0@@11|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@65|)))))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@65|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@65|))))) (let ((|item#2| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@65|))))) (LitInt |i#0@@11|))))) (and (=> (MutableMapModel.Item.Entry_q |item#2|) (and (|MutableMapModel.__default.FixedSizeInsert#canCall| MutableMapModel._default.ReallocIterate$V@@5 (Lit |newUnderlying#0@@5|) (MutableMapModel.Item.key |item#2|) (MutableMapModel.Item.value |item#2|)) (_System.Tuple2.___hMake2_q (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.ReallocIterate$V@@5 StartFuel_MutableMapModel._default.FixedSizeInsert (Lit |newUnderlying#0@@5|) (MutableMapModel.Item.key |item#2|) (MutableMapModel.Item.value |item#2|))))) (let ((|newUnderlying'#2| (ite (MutableMapModel.Item.Entry_q |item#2|) ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.ReallocIterate$V@@5 StartFuel_MutableMapModel._default.FixedSizeInsert (Lit |newUnderlying#0@@5|) (MutableMapModel.Item.key |item#2|) (MutableMapModel.Item.value |item#2|)))) |newUnderlying#0@@5|))) (|MutableMapModel.__default.ReallocIterate#canCall| MutableMapModel._default.ReallocIterate$V@@5 (Lit |self#0@@65|) |newUnderlying'#2| (LitInt (+ |i#0@@11| 1))))))))) (= (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@5 ($LS $ly@@97) (Lit |self#0@@65|) (Lit |newUnderlying#0@@5|) (LitInt |i#0@@11|)) (ite (= (LitInt |i#0@@11|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@65|))))))) |newUnderlying#0@@5| (let ((|item#2@@0| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@65|))))) (LitInt |i#0@@11|))))) (let ((|newUnderlying'#2@@0| (ite (MutableMapModel.Item.Entry_q |item#2@@0|) ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.ReallocIterate$V@@5 StartFuel_MutableMapModel._default.FixedSizeInsert (Lit |newUnderlying#0@@5|) (MutableMapModel.Item.key |item#2@@0|) (MutableMapModel.Item.value |item#2@@0|)))) |newUnderlying#0@@5|))) (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@5 ($LS $ly@@97) (Lit |self#0@@65|) |newUnderlying'#2@@0| (LitInt (+ |i#0@@11| 1))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2471| :pattern ( (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocIterate$V@@5 ($LS $ly@@97) (Lit |self#0@@65|) (Lit |newUnderlying#0@@5|) (LitInt |i#0@@11|))) ))))
(assert (forall ((arg0@@283 T@U) (arg1@@135 T@U) (arg2@@79 T@U) ) (! (= (type (MutableMapModel.__default.ReallocInternal arg0@@283 arg1@@135 arg2@@79)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.ReallocInternal| :pattern ( (MutableMapModel.__default.ReallocInternal arg0@@283 arg1@@135 arg2@@79)) )))
(assert (forall ((MutableMapModel._default.ReallocInternal$V T@U) ($ly@@98 T@U) (|self#0@@66| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.ReallocInternal$V) TyType) (= (type $ly@@98) LayerTypeType)) (= (type |self#0@@66|) DatatypeTypeType)) (= (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V ($LS $ly@@98) |self#0@@66|) (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V $ly@@98 |self#0@@66|))) :qid |unknown.0:0| :skolemid |2516| :pattern ( (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V ($LS $ly@@98) |self#0@@66|)) )))
(assert (forall ((MutableMapModel._default.ReallocInternal$V@@0 T@U) ($ly@@99 T@U) (|self#0@@67| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.ReallocInternal$V@@0) TyType) (= (type $ly@@99) LayerTypeType)) (= (type |self#0@@67|) DatatypeTypeType)) (= (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V@@0 $ly@@99 |self#0@@67|) (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V@@0 $LZ |self#0@@67|))) :qid |unknown.0:0| :skolemid |2517| :pattern ( (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V@@0 (AsFuelBottom $ly@@99) |self#0@@67|)) )))
(assert  (=> (<= 85 $FunctionContextHeight) (forall ((MutableMapModel._default.ReallocInternal$V@@1 T@U) ($ly@@100 T@U) (|self#0@@68| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ReallocInternal$V@@1) TyType) (= (type $ly@@100) LayerTypeType)) (= (type |self#0@@68|) DatatypeTypeType)) (or (|MutableMapModel.__default.ReallocInternal#canCall| MutableMapModel._default.ReallocInternal$V@@1 |self#0@@68|) (and (not (= 85 $FunctionContextHeight)) (and ($Is |self#0@@68| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ReallocInternal$V@@1)) (and (< (MutableMapModel.LinearHashMap.count |self#0@@68|) (Div 18446744073709551616 (LitInt 8))) (MutableMapModel.__default.Inv MutableMapModel._default.ReallocInternal$V@@1 |self#0@@68|)))))) ($Is (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V@@1 $ly@@100 |self#0@@68|) (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ReallocInternal$V@@1))) :qid |unknown.0:0| :skolemid |2518| :pattern ( (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V@@1 $ly@@100 |self#0@@68|)) ))))
(assert (forall ((MutableMapModel._default.ReallocInternal$V@@2 T@U) ($ly@@101 T@U) (|self#0@@69| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ReallocInternal$V@@2) TyType) (= (type $ly@@101) LayerTypeType)) (= (type |self#0@@69|) DatatypeTypeType)) ($Is |self#0@@69| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ReallocInternal$V@@2))) (= (|MutableMapModel.__default.ReallocInternal#requires| MutableMapModel._default.ReallocInternal$V@@2 $ly@@101 |self#0@@69|)  (and (< (MutableMapModel.LinearHashMap.count |self#0@@69|) (Div 18446744073709551616 (LitInt 8))) (MutableMapModel.__default.Inv MutableMapModel._default.ReallocInternal$V@@2 |self#0@@69|)))) :qid |unknown.0:0| :skolemid |2519| :pattern ( (|MutableMapModel.__default.ReallocInternal#requires| MutableMapModel._default.ReallocInternal$V@@2 $ly@@101 |self#0@@69|)) )))
(assert  (=> (<= 85 $FunctionContextHeight) (forall ((MutableMapModel._default.ReallocInternal$V@@3 T@U) ($ly@@102 T@U) (|self#0@@70| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ReallocInternal$V@@3) TyType) (= (type $ly@@102) LayerTypeType)) (= (type |self#0@@70|) DatatypeTypeType)) (or (|MutableMapModel.__default.ReallocInternal#canCall| MutableMapModel._default.ReallocInternal$V@@3 |self#0@@70|) (and (not (= 85 $FunctionContextHeight)) (and ($Is |self#0@@70| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ReallocInternal$V@@3)) (and (< (MutableMapModel.LinearHashMap.count |self#0@@70|) (Div 18446744073709551616 (LitInt 8))) (MutableMapModel.__default.Inv MutableMapModel._default.ReallocInternal$V@@3 |self#0@@70|)))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@70|) (let ((|newSize#0| (Mul (+ 128 (MutableMapModel.LinearHashMap.count |self#0@@70|)) (LitInt 4)))) (and (and (|MutableMapModel.__default.ConstructorFromSize#canCall| MutableMapModel._default.ReallocInternal$V@@3 |newSize#0|) (|MutableMapModel.__default.ReallocIterate#canCall| MutableMapModel._default.ReallocInternal$V@@3 |self#0@@70| (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ReallocInternal$V@@3 |newSize#0|) (LitInt 0))) (let ((|dt_update_tmp#0#0@@0| |self#0@@70|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#0@@0|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#0@@0|)))))) (= (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V@@3 ($LS $ly@@102) |self#0@@70|) (let ((|newSize#0@@0| (Mul (+ 128 (MutableMapModel.LinearHashMap.count |self#0@@70|)) (LitInt 4)))) (let ((|newUnderlying#0@@6| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocInternal$V@@3 ($LS $LZ) |self#0@@70| (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ReallocInternal$V@@3 |newSize#0@@0|) (LitInt 0)))) (let ((|dt_update_tmp#0#0@@1| |self#0@@70|)) (let ((|dt_update#underlying#0#0| |newUnderlying#0@@6|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#0| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#0@@1|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#0@@1|))))))))) :qid |unknown.0:0| :skolemid |2520| :pattern ( (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V@@3 ($LS $ly@@102) |self#0@@70|)) ))))
(assert  (=> (<= 85 $FunctionContextHeight) (forall ((MutableMapModel._default.ReallocInternal$V@@4 T@U) ($ly@@103 T@U) (|self#0@@71| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ReallocInternal$V@@4) TyType) (= (type $ly@@103) LayerTypeType)) (= (type |self#0@@71|) DatatypeTypeType)) (or (|MutableMapModel.__default.ReallocInternal#canCall| MutableMapModel._default.ReallocInternal$V@@4 (Lit |self#0@@71|)) (and (not (= 85 $FunctionContextHeight)) (and ($Is |self#0@@71| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ReallocInternal$V@@4)) (and (U_2_bool (Lit (bool_2_U (< (MutableMapModel.LinearHashMap.count (Lit |self#0@@71|)) (Div 18446744073709551616 (LitInt 8)))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.ReallocInternal$V@@4 (Lit |self#0@@71|)))))))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@71|)) (let ((|newSize#1| (LitInt (Mul (LitInt (+ 128 (MutableMapModel.LinearHashMap.count (Lit |self#0@@71|)))) (LitInt 4))))) (and (and (|MutableMapModel.__default.ConstructorFromSize#canCall| MutableMapModel._default.ReallocInternal$V@@4 |newSize#1|) (|MutableMapModel.__default.ReallocIterate#canCall| MutableMapModel._default.ReallocInternal$V@@4 (Lit |self#0@@71|) (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ReallocInternal$V@@4 |newSize#1|) (LitInt 0))) (let ((|dt_update_tmp#0#1@@0| (Lit |self#0@@71|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#1@@0|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#1@@0|)))))) (= (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V@@4 ($LS $ly@@103) (Lit |self#0@@71|)) (let ((|newSize#1@@0| (LitInt (Mul (LitInt (+ 128 (MutableMapModel.LinearHashMap.count (Lit |self#0@@71|)))) (LitInt 4))))) (let ((|newUnderlying#1| (Lit (MutableMapModel.__default.ReallocIterate MutableMapModel._default.ReallocInternal$V@@4 ($LS $LZ) (Lit |self#0@@71|) (Lit (MutableMapModel.__default.ConstructorFromSize MutableMapModel._default.ReallocInternal$V@@4 |newSize#1@@0|)) (LitInt 0))))) (let ((|dt_update_tmp#0#1@@1| (Lit |self#0@@71|))) (let ((|dt_update#underlying#0#1| |newUnderlying#1|)) (Lit (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1| (LitInt (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@1|)) (Lit (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@1|))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2521| :pattern ( (MutableMapModel.__default.ReallocInternal MutableMapModel._default.ReallocInternal$V@@4 ($LS $ly@@103) (Lit |self#0@@71|))) ))))
(assert (forall ((arg0@@284 T@U) (arg1@@136 T@U) ) (! (= (type (MutableMapModel.__default.Realloc arg0@@284 arg1@@136)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.Realloc| :pattern ( (MutableMapModel.__default.Realloc arg0@@284 arg1@@136)) )))
(assert  (=> (<= 89 $FunctionContextHeight) (forall ((MutableMapModel._default.Realloc$V T@U) (|self#0@@72| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.Realloc$V) TyType) (= (type |self#0@@72|) DatatypeTypeType)) (or (|MutableMapModel.__default.Realloc#canCall| MutableMapModel._default.Realloc$V |self#0@@72|) (and (not (= 89 $FunctionContextHeight)) (and ($Is |self#0@@72| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Realloc$V)) (and (< (MutableMapModel.LinearHashMap.count |self#0@@72|) (Div 18446744073709551616 (LitInt 8))) (MutableMapModel.__default.Inv MutableMapModel._default.Realloc$V |self#0@@72|)))))) (and (and (and (MutableMapModel.__default.Inv MutableMapModel._default.Realloc$V (MutableMapModel.__default.Realloc MutableMapModel._default.Realloc$V |self#0@@72|)) (|Map#Equal| (MutableMapModel.LinearHashMap.contents (MutableMapModel.__default.Realloc MutableMapModel._default.Realloc$V |self#0@@72|)) (MutableMapModel.LinearHashMap.contents |self#0@@72|))) (< (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying (MutableMapModel.__default.Realloc MutableMapModel._default.Realloc$V |self#0@@72|))) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying (MutableMapModel.__default.Realloc MutableMapModel._default.Realloc$V |self#0@@72|)))) 2))) ($Is (MutableMapModel.__default.Realloc MutableMapModel._default.Realloc$V |self#0@@72|) (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Realloc$V)))) :qid |unknown.0:0| :skolemid |2553| :pattern ( (MutableMapModel.__default.Realloc MutableMapModel._default.Realloc$V |self#0@@72|)) ))))
(assert (forall ((MutableMapModel._default.Realloc$V@@0 T@U) (|self#0@@73| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.Realloc$V@@0) TyType) (= (type |self#0@@73|) DatatypeTypeType)) ($Is |self#0@@73| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Realloc$V@@0))) (= (|MutableMapModel.__default.Realloc#requires| MutableMapModel._default.Realloc$V@@0 |self#0@@73|)  (and (< (MutableMapModel.LinearHashMap.count |self#0@@73|) (Div 18446744073709551616 (LitInt 8))) (MutableMapModel.__default.Inv MutableMapModel._default.Realloc$V@@0 |self#0@@73|)))) :qid |unknown.0:0| :skolemid |2554| :pattern ( (|MutableMapModel.__default.Realloc#requires| MutableMapModel._default.Realloc$V@@0 |self#0@@73|)) )))
(assert (= (type StartFuel_MutableMapModel._default.ReallocInternal) LayerTypeType))
(assert  (=> (<= 89 $FunctionContextHeight) (forall ((MutableMapModel._default.Realloc$V@@1 T@U) (|self#0@@74| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.Realloc$V@@1) TyType) (= (type |self#0@@74|) DatatypeTypeType)) (or (|MutableMapModel.__default.Realloc#canCall| MutableMapModel._default.Realloc$V@@1 |self#0@@74|) (and (not (= 89 $FunctionContextHeight)) (and ($Is |self#0@@74| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Realloc$V@@1)) (and (< (MutableMapModel.LinearHashMap.count |self#0@@74|) (Div 18446744073709551616 (LitInt 8))) (MutableMapModel.__default.Inv MutableMapModel._default.Realloc$V@@1 |self#0@@74|)))))) (and (|MutableMapModel.__default.ReallocInternal#canCall| MutableMapModel._default.Realloc$V@@1 |self#0@@74|) (= (MutableMapModel.__default.Realloc MutableMapModel._default.Realloc$V@@1 |self#0@@74|) (let ((|self'#0@@0| (MutableMapModel.__default.ReallocInternal MutableMapModel._default.Realloc$V@@1 StartFuel_MutableMapModel._default.ReallocInternal |self#0@@74|))) |self'#0@@0|)))) :qid |unknown.0:0| :skolemid |2555| :pattern ( (MutableMapModel.__default.Realloc MutableMapModel._default.Realloc$V@@1 |self#0@@74|)) ))))
(assert  (=> (<= 89 $FunctionContextHeight) (forall ((MutableMapModel._default.Realloc$V@@2 T@U) (|self#0@@75| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.Realloc$V@@2) TyType) (= (type |self#0@@75|) DatatypeTypeType)) (or (|MutableMapModel.__default.Realloc#canCall| MutableMapModel._default.Realloc$V@@2 (Lit |self#0@@75|)) (and (not (= 89 $FunctionContextHeight)) (and ($Is |self#0@@75| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Realloc$V@@2)) (and (U_2_bool (Lit (bool_2_U (< (MutableMapModel.LinearHashMap.count (Lit |self#0@@75|)) (Div 18446744073709551616 (LitInt 8)))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.Realloc$V@@2 (Lit |self#0@@75|)))))))))) (and (|MutableMapModel.__default.ReallocInternal#canCall| MutableMapModel._default.Realloc$V@@2 (Lit |self#0@@75|)) (= (MutableMapModel.__default.Realloc MutableMapModel._default.Realloc$V@@2 (Lit |self#0@@75|)) (let ((|self'#1@@0| (MutableMapModel.__default.ReallocInternal MutableMapModel._default.Realloc$V@@2 StartFuel_MutableMapModel._default.ReallocInternal (Lit |self#0@@75|)))) |self'#1@@0|)))) :qid |unknown.0:0| :weight 3 :skolemid |2556| :pattern ( (MutableMapModel.__default.Realloc MutableMapModel._default.Realloc$V@@2 (Lit |self#0@@75|))) ))))
(assert (forall ((arg0@@285 T@U) (arg1@@137 T@U) (arg2@@80 T@U) (arg3@@48 Int) (arg4@@31 T@U) ) (! (= (type (MutableMapModel.__default.InsertAndGetOld arg0@@285 arg1@@137 arg2@@80 arg3@@48 arg4@@31)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.InsertAndGetOld| :pattern ( (MutableMapModel.__default.InsertAndGetOld arg0@@285 arg1@@137 arg2@@80 arg3@@48 arg4@@31)) )))
(assert (forall ((MutableMapModel._default.InsertAndGetOld$V T@U) ($ly@@104 T@U) (|self#0@@76| T@U) (|key#0@@58| Int) (|value#0@@11| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.InsertAndGetOld$V) TyType) (= (type $ly@@104) LayerTypeType)) (= (type |self#0@@76|) DatatypeTypeType)) (= (type |value#0@@11|) BoxType)) (= (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V ($LS $ly@@104) |self#0@@76| |key#0@@58| |value#0@@11|) (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V $ly@@104 |self#0@@76| |key#0@@58| |value#0@@11|))) :qid |unknown.0:0| :skolemid |3038| :pattern ( (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V ($LS $ly@@104) |self#0@@76| |key#0@@58| |value#0@@11|)) )))
(assert (forall ((MutableMapModel._default.InsertAndGetOld$V@@0 T@U) ($ly@@105 T@U) (|self#0@@77| T@U) (|key#0@@59| Int) (|value#0@@12| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.InsertAndGetOld$V@@0) TyType) (= (type $ly@@105) LayerTypeType)) (= (type |self#0@@77|) DatatypeTypeType)) (= (type |value#0@@12|) BoxType)) (= (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@0 $ly@@105 |self#0@@77| |key#0@@59| |value#0@@12|) (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@0 $LZ |self#0@@77| |key#0@@59| |value#0@@12|))) :qid |unknown.0:0| :skolemid |3039| :pattern ( (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@0 (AsFuelBottom $ly@@105) |self#0@@77| |key#0@@59| |value#0@@12|)) )))
(assert (forall ((arg0@@286 T@U) ) (! (= (type (Options.Option.value arg0@@286)) BoxType) :qid |funType:Options.Option.value| :pattern ( (Options.Option.value arg0@@286)) )))
(assert  (=> (<= 90 $FunctionContextHeight) (forall ((MutableMapModel._default.InsertAndGetOld$V@@1 T@U) ($ly@@106 T@U) (|self#0@@78| T@U) (|key#0@@60| Int) (|value#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.InsertAndGetOld$V@@1) TyType) (= (type $ly@@106) LayerTypeType)) (= (type |self#0@@78|) DatatypeTypeType)) (= (type |value#0@@13|) BoxType)) (or (|MutableMapModel.__default.InsertAndGetOld#canCall| MutableMapModel._default.InsertAndGetOld$V@@1 |self#0@@78| |key#0@@60| |value#0@@13|) (and (not (= 90 $FunctionContextHeight)) (and (and (and ($Is |self#0@@78| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.InsertAndGetOld$V@@1)) (and (<= (LitInt 0) |key#0@@60|) (< |key#0@@60| 18446744073709551616))) ($IsBox |value#0@@13| MutableMapModel._default.InsertAndGetOld$V@@1)) (and (MutableMapModel.__default.Inv MutableMapModel._default.InsertAndGetOld$V@@1 |self#0@@78|) (< (MutableMapModel.LinearHashMap.count |self#0@@78|) (Div 18446744073709551616 (LitInt 8)))))))) (and (let ((|replaced#0@@0| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@1 $ly@@106 |self#0@@78| |key#0@@60| |value#0@@13|))))) (let ((|self'#0@@1| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@1 $ly@@106 |self#0@@78| |key#0@@60| |value#0@@13|))))) (and (and (and (and (MutableMapModel.__default.Inv MutableMapModel._default.InsertAndGetOld$V@@1 |self'#0@@1|) (|Map#Equal| (MutableMapModel.LinearHashMap.contents |self'#0@@1|) (|Map#Build| (MutableMapModel.LinearHashMap.contents |self#0@@78|) ($Box (int_2_U |key#0@@60|)) |value#0@@13|))) (= (MutableMapModel.LinearHashMap.count |self'#0@@1|) (+ (MutableMapModel.LinearHashMap.count |self#0@@78|) (ite (Options.Option.Some_q |replaced#0@@0|) 0 1)))) (=> (Options.Option.Some_q |replaced#0@@0|) (Maps.__default.MapsTo Tclass.NativeTypes.uint64 MutableMapModel._default.InsertAndGetOld$V@@1 (MutableMapModel.LinearHashMap.contents |self#0@@78|) ($Box (int_2_U |key#0@@60|)) (Options.Option.value |replaced#0@@0|)))) (=> (Options.Option.None_q |replaced#0@@0|) (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@78|)) ($Box (int_2_U |key#0@@60|))))))))) ($Is (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@1 $ly@@106 |self#0@@78| |key#0@@60| |value#0@@13|) (Tclass._System.Tuple2 (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.InsertAndGetOld$V@@1) (Tclass.Options.Option MutableMapModel._default.InsertAndGetOld$V@@1))))) :qid |unknown.0:0| :skolemid |3040| :pattern ( (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@1 $ly@@106 |self#0@@78| |key#0@@60| |value#0@@13|)) ))))
(assert (forall ((MutableMapModel._default.InsertAndGetOld$V@@2 T@U) ($ly@@107 T@U) (|self#0@@79| T@U) (|key#0@@61| Int) (|value#0@@14| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.InsertAndGetOld$V@@2) TyType) (= (type $ly@@107) LayerTypeType)) (= (type |self#0@@79|) DatatypeTypeType)) (= (type |value#0@@14|) BoxType)) (and (and ($Is |self#0@@79| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.InsertAndGetOld$V@@2)) (and (<= (LitInt 0) |key#0@@61|) (< |key#0@@61| 18446744073709551616))) ($IsBox |value#0@@14| MutableMapModel._default.InsertAndGetOld$V@@2))) (= (|MutableMapModel.__default.InsertAndGetOld#requires| MutableMapModel._default.InsertAndGetOld$V@@2 $ly@@107 |self#0@@79| |key#0@@61| |value#0@@14|)  (and (MutableMapModel.__default.Inv MutableMapModel._default.InsertAndGetOld$V@@2 |self#0@@79|) (< (MutableMapModel.LinearHashMap.count |self#0@@79|) (Div 18446744073709551616 (LitInt 8)))))) :qid |unknown.0:0| :skolemid |3041| :pattern ( (|MutableMapModel.__default.InsertAndGetOld#requires| MutableMapModel._default.InsertAndGetOld$V@@2 $ly@@107 |self#0@@79| |key#0@@61| |value#0@@14|)) )))
(assert  (=> (<= 90 $FunctionContextHeight) (forall ((MutableMapModel._default.InsertAndGetOld$V@@3 T@U) ($ly@@108 T@U) (|self#0@@80| T@U) (|key#0@@62| Int) (|value#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.InsertAndGetOld$V@@3) TyType) (= (type $ly@@108) LayerTypeType)) (= (type |self#0@@80|) DatatypeTypeType)) (= (type |value#0@@15|) BoxType)) (or (|MutableMapModel.__default.InsertAndGetOld#canCall| MutableMapModel._default.InsertAndGetOld$V@@3 |self#0@@80| |key#0@@62| |value#0@@15|) (and (not (= 90 $FunctionContextHeight)) (and (and (and ($Is |self#0@@80| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.InsertAndGetOld$V@@3)) (and (<= (LitInt 0) |key#0@@62|) (< |key#0@@62| 18446744073709551616))) ($IsBox |value#0@@15| MutableMapModel._default.InsertAndGetOld$V@@3)) (and (MutableMapModel.__default.Inv MutableMapModel._default.InsertAndGetOld$V@@3 |self#0@@80|) (< (MutableMapModel.LinearHashMap.count |self#0@@80|) (Div 18446744073709551616 (LitInt 8)))))))) (and (and (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@80|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@80|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@80|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@80|)))) (=> (<= (Div (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@80|))) (LitInt 2)) (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self#0@@80|))) (|MutableMapModel.__default.Realloc#canCall| MutableMapModel._default.InsertAndGetOld$V@@3 |self#0@@80|))) (let ((|self1#0| (ite (<= (Div (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@80|))) (LitInt 2)) (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self#0@@80|))) (MutableMapModel.__default.Realloc MutableMapModel._default.InsertAndGetOld$V@@3 |self#0@@80|) |self#0@@80|))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#0|) (|MutableMapModel.__default.FixedSizeInsert#canCall| MutableMapModel._default.InsertAndGetOld$V@@3 (MutableMapModel.LinearHashMap.underlying |self1#0|) |key#0@@62| |value#0@@15|)) (let ((|replaced#1@@0| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@3 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#0|) |key#0@@62| |value#0@@15|))))) (let ((|underlying'#0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@3 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#0|) |key#0@@62| |value#0@@15|))))) (and (and (let ((|dt_update_tmp#0#0@@2| |self1#0|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#0@@2|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#0@@2|))) (let ((|dt_update_tmp#1#0| (let ((|dt_update_tmp#0#0@@3| |self1#0|)) (let ((|dt_update#underlying#0#0@@0| |underlying'#0|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#0@@0| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#0@@3|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#0@@3|)))))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#0|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#0|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#0|))))) (let ((|dt_update_tmp#2#0| (let ((|dt_update_tmp#1#0@@0| (let ((|dt_update_tmp#0#0@@4| |self1#0|)) (let ((|dt_update#underlying#0#0@@1| |underlying'#0|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#0@@1| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#0@@4|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#0@@4|)))))) (let ((|dt_update#contents#0#0| (|Map#Build| (MutableMapModel.LinearHashMap.contents |self1#0|) ($Box (int_2_U |key#0@@62|)) |value#0@@15|))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#1#0@@0|) (MutableMapModel.LinearHashMap.count |dt_update_tmp#1#0@@0|) |dt_update#contents#0#0|))))) (and (and (=> (Options.Option.None_q |replaced#1@@0|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#0|)) (=> (not (Options.Option.None_q |replaced#1@@0|)) (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#0|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#2#0|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#2#0|)))))))))) (= (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@3 ($LS $ly@@108) |self#0@@80| |key#0@@62| |value#0@@15|) (let ((|self1#0@@0| (ite (<= (Div (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@80|))) (LitInt 2)) (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self#0@@80|))) (MutableMapModel.__default.Realloc MutableMapModel._default.InsertAndGetOld$V@@3 |self#0@@80|) |self#0@@80|))) (let ((|replaced#1@@1| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@3 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#0@@0|) |key#0@@62| |value#0@@15|))))) (let ((|underlying'#0@@0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@3 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#0@@0|) |key#0@@62| |value#0@@15|))))) (let ((|self'#1@@1| (let ((|dt_update_tmp#2#0@@0| (let ((|dt_update_tmp#1#0@@1| (let ((|dt_update_tmp#0#0@@5| |self1#0@@0|)) (let ((|dt_update#underlying#0#0@@2| |underlying'#0@@0|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#0@@2| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#0@@5|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#0@@5|)))))) (let ((|dt_update#contents#0#0@@0| (|Map#Build| (MutableMapModel.LinearHashMap.contents |self1#0@@0|) ($Box (int_2_U |key#0@@62|)) |value#0@@15|))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#1#0@@1|) (MutableMapModel.LinearHashMap.count |dt_update_tmp#1#0@@1|) |dt_update#contents#0#0@@0|))))) (let ((|dt_update#count#0#0| (ite (Options.Option.None_q |replaced#1@@1|) (+ (MutableMapModel.LinearHashMap.count |self1#0@@0|) 1) (MutableMapModel.LinearHashMap.count |self1#0@@0|)))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#2#0@@0|) |dt_update#count#0#0| (MutableMapModel.LinearHashMap.contents |dt_update_tmp#2#0@@0|)))))) (|#_System._tuple#2._#Make2| ($Box |self'#1@@1|) ($Box |replaced#1@@1|))))))))) :qid |unknown.0:0| :skolemid |3042| :pattern ( (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@3 ($LS $ly@@108) |self#0@@80| |key#0@@62| |value#0@@15|)) ))))
(assert  (=> (<= 90 $FunctionContextHeight) (forall ((MutableMapModel._default.InsertAndGetOld$V@@4 T@U) ($ly@@109 T@U) (|self#0@@81| T@U) (|key#0@@63| Int) (|value#0@@16| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.InsertAndGetOld$V@@4) TyType) (= (type $ly@@109) LayerTypeType)) (= (type |self#0@@81|) DatatypeTypeType)) (= (type |value#0@@16|) BoxType)) (or (|MutableMapModel.__default.InsertAndGetOld#canCall| MutableMapModel._default.InsertAndGetOld$V@@4 (Lit |self#0@@81|) (LitInt |key#0@@63|) |value#0@@16|) (and (not (= 90 $FunctionContextHeight)) (and (and (and ($Is |self#0@@81| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.InsertAndGetOld$V@@4)) (and (<= (LitInt 0) |key#0@@63|) (< |key#0@@63| 18446744073709551616))) ($IsBox |value#0@@16| MutableMapModel._default.InsertAndGetOld$V@@4)) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.InsertAndGetOld$V@@4 (Lit |self#0@@81|))))) (U_2_bool (Lit (bool_2_U (< (MutableMapModel.LinearHashMap.count (Lit |self#0@@81|)) (Div 18446744073709551616 (LitInt 8))))))))))) (and (and (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@81|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@81|))))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@81|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@81|)))))) (=> (<= (Div (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@81|)))))) (LitInt 2)) (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@81|)))))) (|MutableMapModel.__default.Realloc#canCall| MutableMapModel._default.InsertAndGetOld$V@@4 (Lit |self#0@@81|)))) (let ((|self1#1| (ite (<= (Div (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@81|)))))) (LitInt 2)) (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@81|)))))) (MutableMapModel.__default.Realloc MutableMapModel._default.InsertAndGetOld$V@@4 (Lit |self#0@@81|)) |self#0@@81|))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#1|) (|MutableMapModel.__default.FixedSizeInsert#canCall| MutableMapModel._default.InsertAndGetOld$V@@4 (MutableMapModel.LinearHashMap.underlying |self1#1|) (LitInt |key#0@@63|) |value#0@@16|)) (let ((|replaced#2@@0| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@4 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#1|) (LitInt |key#0@@63|) |value#0@@16|))))) (let ((|underlying'#1| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@4 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#1|) (LitInt |key#0@@63|) |value#0@@16|))))) (and (and (let ((|dt_update_tmp#0#1@@2| |self1#1|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#1@@2|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#1@@2|))) (let ((|dt_update_tmp#1#1| (let ((|dt_update_tmp#0#1@@3| |self1#1|)) (let ((|dt_update#underlying#0#1@@0| |underlying'#1|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@0| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@3|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@3|)))))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#1|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#1|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#1|))))) (let ((|dt_update_tmp#2#1| (let ((|dt_update_tmp#1#1@@0| (let ((|dt_update_tmp#0#1@@4| |self1#1|)) (let ((|dt_update#underlying#0#1@@1| |underlying'#1|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@1| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@4|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@4|)))))) (let ((|dt_update#contents#0#1| (|Map#Build| (MutableMapModel.LinearHashMap.contents |self1#1|) ($Box (int_2_U (LitInt |key#0@@63|))) |value#0@@16|))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#1#1@@0|) (MutableMapModel.LinearHashMap.count |dt_update_tmp#1#1@@0|) |dt_update#contents#0#1|))))) (and (and (=> (Options.Option.None_q |replaced#2@@0|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#1|)) (=> (not (Options.Option.None_q |replaced#2@@0|)) (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#1|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#2#1|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#2#1|)))))))))) (= (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@4 ($LS $ly@@109) (Lit |self#0@@81|) (LitInt |key#0@@63|) |value#0@@16|) (let ((|self1#1@@0| (ite (<= (Div (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@81|)))))) (LitInt 2)) (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@81|)))))) (MutableMapModel.__default.Realloc MutableMapModel._default.InsertAndGetOld$V@@4 (Lit |self#0@@81|)) |self#0@@81|))) (let ((|replaced#2@@1| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@4 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#1@@0|) (LitInt |key#0@@63|) |value#0@@16|))))) (let ((|underlying'#1@@0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@4 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#1@@0|) (LitInt |key#0@@63|) |value#0@@16|))))) (let ((|self'#2| (let ((|dt_update_tmp#2#1@@0| (let ((|dt_update_tmp#1#1@@1| (let ((|dt_update_tmp#0#1@@5| |self1#1@@0|)) (let ((|dt_update#underlying#0#1@@2| |underlying'#1@@0|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@2| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@5|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@5|)))))) (let ((|dt_update#contents#0#1@@0| (|Map#Build| (MutableMapModel.LinearHashMap.contents |self1#1@@0|) ($Box (int_2_U (LitInt |key#0@@63|))) |value#0@@16|))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#1#1@@1|) (MutableMapModel.LinearHashMap.count |dt_update_tmp#1#1@@1|) |dt_update#contents#0#1@@0|))))) (let ((|dt_update#count#0#1| (ite (Options.Option.None_q |replaced#2@@1|) (+ (MutableMapModel.LinearHashMap.count |self1#1@@0|) 1) (MutableMapModel.LinearHashMap.count |self1#1@@0|)))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#2#1@@0|) |dt_update#count#0#1| (MutableMapModel.LinearHashMap.contents |dt_update_tmp#2#1@@0|)))))) (|#_System._tuple#2._#Make2| ($Box |self'#2|) ($Box |replaced#2@@1|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |3043| :pattern ( (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@4 ($LS $ly@@109) (Lit |self#0@@81|) (LitInt |key#0@@63|) |value#0@@16|)) ))))
(assert  (=> (<= 90 $FunctionContextHeight) (forall ((MutableMapModel._default.InsertAndGetOld$V@@5 T@U) ($ly@@110 T@U) (|self#0@@82| T@U) (|key#0@@64| Int) (|value#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.InsertAndGetOld$V@@5) TyType) (= (type $ly@@110) LayerTypeType)) (= (type |self#0@@82|) DatatypeTypeType)) (= (type |value#0@@17|) BoxType)) (or (|MutableMapModel.__default.InsertAndGetOld#canCall| MutableMapModel._default.InsertAndGetOld$V@@5 (Lit |self#0@@82|) (LitInt |key#0@@64|) (Lit |value#0@@17|)) (and (not (= 90 $FunctionContextHeight)) (and (and (and ($Is |self#0@@82| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.InsertAndGetOld$V@@5)) (and (<= (LitInt 0) |key#0@@64|) (< |key#0@@64| 18446744073709551616))) ($IsBox |value#0@@17| MutableMapModel._default.InsertAndGetOld$V@@5)) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.InsertAndGetOld$V@@5 (Lit |self#0@@82|))))) (U_2_bool (Lit (bool_2_U (< (MutableMapModel.LinearHashMap.count (Lit |self#0@@82|)) (Div 18446744073709551616 (LitInt 8))))))))))) (and (and (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@82|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@82|))))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@82|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@82|)))))) (=> (<= (Div (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@82|)))))) (LitInt 2)) (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@82|)))))) (|MutableMapModel.__default.Realloc#canCall| MutableMapModel._default.InsertAndGetOld$V@@5 (Lit |self#0@@82|)))) (let ((|self1#2| (ite (<= (Div (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@82|)))))) (LitInt 2)) (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@82|)))))) (MutableMapModel.__default.Realloc MutableMapModel._default.InsertAndGetOld$V@@5 (Lit |self#0@@82|)) |self#0@@82|))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#2|) (|MutableMapModel.__default.FixedSizeInsert#canCall| MutableMapModel._default.InsertAndGetOld$V@@5 (MutableMapModel.LinearHashMap.underlying |self1#2|) (LitInt |key#0@@64|) (Lit |value#0@@17|))) (let ((|replaced#3| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@5 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#2|) (LitInt |key#0@@64|) (Lit |value#0@@17|)))))) (let ((|underlying'#2| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@5 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#2|) (LitInt |key#0@@64|) (Lit |value#0@@17|)))))) (and (and (let ((|dt_update_tmp#0#2@@0| |self1#2|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#2@@0|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#2@@0|))) (let ((|dt_update_tmp#1#2| (let ((|dt_update_tmp#0#2@@1| |self1#2|)) (let ((|dt_update#underlying#0#2| |underlying'#2|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#2| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#2@@1|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#2@@1|)))))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#2|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#2|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#2|))))) (let ((|dt_update_tmp#2#2| (let ((|dt_update_tmp#1#2@@0| (let ((|dt_update_tmp#0#2@@2| |self1#2|)) (let ((|dt_update#underlying#0#2@@0| |underlying'#2|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#2@@0| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#2@@2|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#2@@2|)))))) (let ((|dt_update#contents#0#2| (|Map#Build| (MutableMapModel.LinearHashMap.contents |self1#2|) ($Box (int_2_U (LitInt |key#0@@64|))) (Lit |value#0@@17|)))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#1#2@@0|) (MutableMapModel.LinearHashMap.count |dt_update_tmp#1#2@@0|) |dt_update#contents#0#2|))))) (and (and (=> (Options.Option.None_q |replaced#3|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#2|)) (=> (not (Options.Option.None_q |replaced#3|)) (MutableMapModel.LinearHashMap.LinearHashMap_q |self1#2|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#2#2|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#2#2|)))))))))) (= (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@5 ($LS $ly@@110) (Lit |self#0@@82|) (LitInt |key#0@@64|) (Lit |value#0@@17|)) (let ((|self1#2@@0| (ite (<= (Div (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@82|)))))) (LitInt 2)) (LitInt (MutableMapModel.FixedSizeLinearHashMap.count (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@82|)))))) (MutableMapModel.__default.Realloc MutableMapModel._default.InsertAndGetOld$V@@5 (Lit |self#0@@82|)) |self#0@@82|))) (let ((|replaced#3@@0| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@5 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#2@@0|) (LitInt |key#0@@64|) (Lit |value#0@@17|)))))) (let ((|underlying'#2@@0| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.InsertAndGetOld$V@@5 StartFuel_MutableMapModel._default.FixedSizeInsert (MutableMapModel.LinearHashMap.underlying |self1#2@@0|) (LitInt |key#0@@64|) (Lit |value#0@@17|)))))) (let ((|self'#3| (let ((|dt_update_tmp#2#2@@0| (let ((|dt_update_tmp#1#2@@1| (let ((|dt_update_tmp#0#2@@3| |self1#2@@0|)) (let ((|dt_update#underlying#0#2@@1| |underlying'#2@@0|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#2@@1| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#2@@3|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#2@@3|)))))) (let ((|dt_update#contents#0#2@@0| (|Map#Build| (MutableMapModel.LinearHashMap.contents |self1#2@@0|) ($Box (int_2_U (LitInt |key#0@@64|))) (Lit |value#0@@17|)))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#1#2@@1|) (MutableMapModel.LinearHashMap.count |dt_update_tmp#1#2@@1|) |dt_update#contents#0#2@@0|))))) (let ((|dt_update#count#0#2| (ite (Options.Option.None_q |replaced#3@@0|) (+ (MutableMapModel.LinearHashMap.count |self1#2@@0|) 1) (MutableMapModel.LinearHashMap.count |self1#2@@0|)))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#2#2@@0|) |dt_update#count#0#2| (MutableMapModel.LinearHashMap.contents |dt_update_tmp#2#2@@0|)))))) (|#_System._tuple#2._#Make2| ($Box |self'#3|) ($Box |replaced#3@@0|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |3044| :pattern ( (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.InsertAndGetOld$V@@5 ($LS $ly@@110) (Lit |self#0@@82|) (LitInt |key#0@@64|) (Lit |value#0@@17|))) ))))
(assert (forall ((arg0@@287 T@U) (arg1@@138 T@U) (arg2@@81 T@U) (arg3@@49 Int) (arg4@@32 T@U) ) (! (= (type (MutableMapModel.__default.Insert arg0@@287 arg1@@138 arg2@@81 arg3@@49 arg4@@32)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.Insert| :pattern ( (MutableMapModel.__default.Insert arg0@@287 arg1@@138 arg2@@81 arg3@@49 arg4@@32)) )))
(assert (forall ((MutableMapModel._default.Insert$V T@U) ($ly@@111 T@U) (|self#0@@83| T@U) (|key#0@@65| Int) (|value#0@@18| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.Insert$V) TyType) (= (type $ly@@111) LayerTypeType)) (= (type |self#0@@83|) DatatypeTypeType)) (= (type |value#0@@18|) BoxType)) (= (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V ($LS $ly@@111) |self#0@@83| |key#0@@65| |value#0@@18|) (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V $ly@@111 |self#0@@83| |key#0@@65| |value#0@@18|))) :qid |unknown.0:0| :skolemid |3092| :pattern ( (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V ($LS $ly@@111) |self#0@@83| |key#0@@65| |value#0@@18|)) )))
(assert (forall ((MutableMapModel._default.Insert$V@@0 T@U) ($ly@@112 T@U) (|self#0@@84| T@U) (|key#0@@66| Int) (|value#0@@19| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.Insert$V@@0) TyType) (= (type $ly@@112) LayerTypeType)) (= (type |self#0@@84|) DatatypeTypeType)) (= (type |value#0@@19|) BoxType)) (= (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@0 $ly@@112 |self#0@@84| |key#0@@66| |value#0@@19|) (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@0 $LZ |self#0@@84| |key#0@@66| |value#0@@19|))) :qid |unknown.0:0| :skolemid |3093| :pattern ( (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@0 (AsFuelBottom $ly@@112) |self#0@@84| |key#0@@66| |value#0@@19|)) )))
(assert  (=> (<= 91 $FunctionContextHeight) (forall ((MutableMapModel._default.Insert$V@@1 T@U) ($ly@@113 T@U) (|self#0@@85| T@U) (|key#0@@67| Int) (|value#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.Insert$V@@1) TyType) (= (type $ly@@113) LayerTypeType)) (= (type |self#0@@85|) DatatypeTypeType)) (= (type |value#0@@20|) BoxType)) (or (|MutableMapModel.__default.Insert#canCall| MutableMapModel._default.Insert$V@@1 |self#0@@85| |key#0@@67| |value#0@@20|) (and (not (= 91 $FunctionContextHeight)) (and (and (and ($Is |self#0@@85| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Insert$V@@1)) (and (<= (LitInt 0) |key#0@@67|) (< |key#0@@67| 18446744073709551616))) ($IsBox |value#0@@20| MutableMapModel._default.Insert$V@@1)) (and (MutableMapModel.__default.Inv MutableMapModel._default.Insert$V@@1 |self#0@@85|) (< (MutableMapModel.LinearHashMap.count |self#0@@85|) (Div 18446744073709551616 (LitInt 8)))))))) (and (and (and (MutableMapModel.__default.Inv MutableMapModel._default.Insert$V@@1 (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@1 $ly@@113 |self#0@@85| |key#0@@67| |value#0@@20|)) (|Map#Equal| (MutableMapModel.LinearHashMap.contents (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@1 $ly@@113 |self#0@@85| |key#0@@67| |value#0@@20|)) (|Map#Build| (MutableMapModel.LinearHashMap.contents |self#0@@85|) ($Box (int_2_U |key#0@@67|)) |value#0@@20|))) (or (= (MutableMapModel.LinearHashMap.count (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@1 $ly@@113 |self#0@@85| |key#0@@67| |value#0@@20|)) (MutableMapModel.LinearHashMap.count |self#0@@85|)) (= (MutableMapModel.LinearHashMap.count (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@1 $ly@@113 |self#0@@85| |key#0@@67| |value#0@@20|)) (+ (MutableMapModel.LinearHashMap.count |self#0@@85|) 1)))) ($Is (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@1 $ly@@113 |self#0@@85| |key#0@@67| |value#0@@20|) (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Insert$V@@1)))) :qid |unknown.0:0| :skolemid |3094| :pattern ( (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@1 $ly@@113 |self#0@@85| |key#0@@67| |value#0@@20|)) ))))
(assert (forall ((MutableMapModel._default.Insert$V@@2 T@U) ($ly@@114 T@U) (|self#0@@86| T@U) (|key#0@@68| Int) (|value#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.Insert$V@@2) TyType) (= (type $ly@@114) LayerTypeType)) (= (type |self#0@@86|) DatatypeTypeType)) (= (type |value#0@@21|) BoxType)) (and (and ($Is |self#0@@86| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Insert$V@@2)) (and (<= (LitInt 0) |key#0@@68|) (< |key#0@@68| 18446744073709551616))) ($IsBox |value#0@@21| MutableMapModel._default.Insert$V@@2))) (= (|MutableMapModel.__default.Insert#requires| MutableMapModel._default.Insert$V@@2 $ly@@114 |self#0@@86| |key#0@@68| |value#0@@21|)  (and (MutableMapModel.__default.Inv MutableMapModel._default.Insert$V@@2 |self#0@@86|) (< (MutableMapModel.LinearHashMap.count |self#0@@86|) (Div 18446744073709551616 (LitInt 8)))))) :qid |unknown.0:0| :skolemid |3095| :pattern ( (|MutableMapModel.__default.Insert#requires| MutableMapModel._default.Insert$V@@2 $ly@@114 |self#0@@86| |key#0@@68| |value#0@@21|)) )))
(assert (= (type StartFuel_MutableMapModel._default.InsertAndGetOld) LayerTypeType))
(assert  (=> (<= 91 $FunctionContextHeight) (forall ((MutableMapModel._default.Insert$V@@3 T@U) ($ly@@115 T@U) (|self#0@@87| T@U) (|key#0@@69| Int) (|value#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.Insert$V@@3) TyType) (= (type $ly@@115) LayerTypeType)) (= (type |self#0@@87|) DatatypeTypeType)) (= (type |value#0@@22|) BoxType)) (or (|MutableMapModel.__default.Insert#canCall| MutableMapModel._default.Insert$V@@3 |self#0@@87| |key#0@@69| |value#0@@22|) (and (not (= 91 $FunctionContextHeight)) (and (and (and ($Is |self#0@@87| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Insert$V@@3)) (and (<= (LitInt 0) |key#0@@69|) (< |key#0@@69| 18446744073709551616))) ($IsBox |value#0@@22| MutableMapModel._default.Insert$V@@3)) (and (MutableMapModel.__default.Inv MutableMapModel._default.Insert$V@@3 |self#0@@87|) (< (MutableMapModel.LinearHashMap.count |self#0@@87|) (Div 18446744073709551616 (LitInt 8)))))))) (and (and (|MutableMapModel.__default.InsertAndGetOld#canCall| MutableMapModel._default.Insert$V@@3 |self#0@@87| |key#0@@69| |value#0@@22|) (_System.Tuple2.___hMake2_q (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.Insert$V@@3 StartFuel_MutableMapModel._default.InsertAndGetOld |self#0@@87| |key#0@@69| |value#0@@22|))) (= (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@3 ($LS $ly@@115) |self#0@@87| |key#0@@69| |value#0@@22|) ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.Insert$V@@3 StartFuel_MutableMapModel._default.InsertAndGetOld |self#0@@87| |key#0@@69| |value#0@@22|)))))) :qid |unknown.0:0| :skolemid |3096| :pattern ( (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@3 ($LS $ly@@115) |self#0@@87| |key#0@@69| |value#0@@22|)) ))))
(assert  (=> (<= 91 $FunctionContextHeight) (forall ((MutableMapModel._default.Insert$V@@4 T@U) ($ly@@116 T@U) (|self#0@@88| T@U) (|key#0@@70| Int) (|value#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.Insert$V@@4) TyType) (= (type $ly@@116) LayerTypeType)) (= (type |self#0@@88|) DatatypeTypeType)) (= (type |value#0@@23|) BoxType)) (or (|MutableMapModel.__default.Insert#canCall| MutableMapModel._default.Insert$V@@4 (Lit |self#0@@88|) (LitInt |key#0@@70|) |value#0@@23|) (and (not (= 91 $FunctionContextHeight)) (and (and (and ($Is |self#0@@88| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Insert$V@@4)) (and (<= (LitInt 0) |key#0@@70|) (< |key#0@@70| 18446744073709551616))) ($IsBox |value#0@@23| MutableMapModel._default.Insert$V@@4)) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.Insert$V@@4 (Lit |self#0@@88|))))) (U_2_bool (Lit (bool_2_U (< (MutableMapModel.LinearHashMap.count (Lit |self#0@@88|)) (Div 18446744073709551616 (LitInt 8))))))))))) (and (and (|MutableMapModel.__default.InsertAndGetOld#canCall| MutableMapModel._default.Insert$V@@4 (Lit |self#0@@88|) (LitInt |key#0@@70|) |value#0@@23|) (_System.Tuple2.___hMake2_q (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.Insert$V@@4 StartFuel_MutableMapModel._default.InsertAndGetOld (Lit |self#0@@88|) (LitInt |key#0@@70|) |value#0@@23|))) (= (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@4 ($LS $ly@@116) (Lit |self#0@@88|) (LitInt |key#0@@70|) |value#0@@23|) ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.Insert$V@@4 StartFuel_MutableMapModel._default.InsertAndGetOld (Lit |self#0@@88|) (LitInt |key#0@@70|) |value#0@@23|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3097| :pattern ( (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@4 ($LS $ly@@116) (Lit |self#0@@88|) (LitInt |key#0@@70|) |value#0@@23|)) ))))
(assert  (=> (<= 91 $FunctionContextHeight) (forall ((MutableMapModel._default.Insert$V@@5 T@U) ($ly@@117 T@U) (|self#0@@89| T@U) (|key#0@@71| Int) (|value#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.Insert$V@@5) TyType) (= (type $ly@@117) LayerTypeType)) (= (type |self#0@@89|) DatatypeTypeType)) (= (type |value#0@@24|) BoxType)) (or (|MutableMapModel.__default.Insert#canCall| MutableMapModel._default.Insert$V@@5 (Lit |self#0@@89|) (LitInt |key#0@@71|) (Lit |value#0@@24|)) (and (not (= 91 $FunctionContextHeight)) (and (and (and ($Is |self#0@@89| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Insert$V@@5)) (and (<= (LitInt 0) |key#0@@71|) (< |key#0@@71| 18446744073709551616))) ($IsBox |value#0@@24| MutableMapModel._default.Insert$V@@5)) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.Insert$V@@5 (Lit |self#0@@89|))))) (U_2_bool (Lit (bool_2_U (< (MutableMapModel.LinearHashMap.count (Lit |self#0@@89|)) (Div 18446744073709551616 (LitInt 8))))))))))) (and (and (|MutableMapModel.__default.InsertAndGetOld#canCall| MutableMapModel._default.Insert$V@@5 (Lit |self#0@@89|) (LitInt |key#0@@71|) (Lit |value#0@@24|)) (_System.Tuple2.___hMake2_q (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.Insert$V@@5 StartFuel_MutableMapModel._default.InsertAndGetOld (Lit |self#0@@89|) (LitInt |key#0@@71|) (Lit |value#0@@24|)))) (= (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@5 ($LS $ly@@117) (Lit |self#0@@89|) (LitInt |key#0@@71|) (Lit |value#0@@24|)) ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.InsertAndGetOld MutableMapModel._default.Insert$V@@5 StartFuel_MutableMapModel._default.InsertAndGetOld (Lit |self#0@@89|) (LitInt |key#0@@71|) (Lit |value#0@@24|))))))) :qid |unknown.0:0| :weight 3 :skolemid |3098| :pattern ( (MutableMapModel.__default.Insert MutableMapModel._default.Insert$V@@5 ($LS $ly@@117) (Lit |self#0@@89|) (LitInt |key#0@@71|) (Lit |value#0@@24|))) ))))
(assert  (and (forall ((arg0@@288 T@U) (arg1@@139 T@U) (arg2@@82 Int) ) (! (= (type (MutableMapModel.__default.RemoveInternal arg0@@288 arg1@@139 arg2@@82)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.RemoveInternal| :pattern ( (MutableMapModel.__default.RemoveInternal arg0@@288 arg1@@139 arg2@@82)) )) (= (type StartFuel_MutableMapModel._default.FixedSizeRemove) LayerTypeType)))
(assert  (=> (<= 92 $FunctionContextHeight) (forall ((MutableMapModel._default.RemoveInternal$V T@U) (|self#0@@90| T@U) (|key#0@@72| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.RemoveInternal$V) TyType) (= (type |self#0@@90|) DatatypeTypeType)) (or (|MutableMapModel.__default.RemoveInternal#canCall| MutableMapModel._default.RemoveInternal$V |self#0@@90| |key#0@@72|) (and (not (= 92 $FunctionContextHeight)) (and (and ($Is |self#0@@90| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.RemoveInternal$V)) (and (<= (LitInt 0) |key#0@@72|) (< |key#0@@72| 18446744073709551616))) (MutableMapModel.__default.Inv MutableMapModel._default.RemoveInternal$V |self#0@@90|))))) (and (let ((|removed#0@@0| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveInternal$V |self#0@@90| |key#0@@72|))))) (let ((|self'#0@@2| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveInternal$V |self#0@@90| |key#0@@72|))))) (and (and (and (and (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| ($Box (MutableMapModel.LinearHashMap.underlying |self'#0@@2|)) ($Box |removed#0@@0|)) (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.RemoveInternal$V StartFuel_MutableMapModel._default.FixedSizeRemove (MutableMapModel.LinearHashMap.underlying |self#0@@90|) |key#0@@72|)) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.RemoveInternal$V (MutableMapModel.LinearHashMap.underlying |self'#0@@2|))) (|Map#Equal| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0@@2|)) (ite (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@90|))) ($Box (int_2_U |key#0@@72|)))) (|Map#Build| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@90|)) ($Box (int_2_U |key#0@@72|)) ($Box (Lit |#Options.Option.None|))) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@90|))))) (|Options.Option#Equal| |removed#0@@0| (ite  (and (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@90|))) ($Box (int_2_U |key#0@@72|)))) (Options.Option.Some_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@90|))) ($Box (int_2_U |key#0@@72|)))))) (|#Options.Option.Some| (Options.Option.value ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@90|))) ($Box (int_2_U |key#0@@72|)))))) |#Options.Option.None|))) (= (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self'#0@@2|)) (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self#0@@90|)))))) ($Is (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveInternal$V |self#0@@90| |key#0@@72|) (Tclass._System.Tuple2 (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.RemoveInternal$V) (Tclass.Options.Option MutableMapModel._default.RemoveInternal$V))))) :qid |unknown.0:0| :skolemid |3133| :pattern ( (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveInternal$V |self#0@@90| |key#0@@72|)) ))))
(assert (forall ((MutableMapModel._default.RemoveInternal$V@@0 T@U) (|self#0@@91| T@U) (|key#0@@73| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.RemoveInternal$V@@0) TyType) (= (type |self#0@@91|) DatatypeTypeType)) (and ($Is |self#0@@91| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.RemoveInternal$V@@0)) (and (<= (LitInt 0) |key#0@@73|) (< |key#0@@73| 18446744073709551616)))) (= (|MutableMapModel.__default.RemoveInternal#requires| MutableMapModel._default.RemoveInternal$V@@0 |self#0@@91| |key#0@@73|) (MutableMapModel.__default.Inv MutableMapModel._default.RemoveInternal$V@@0 |self#0@@91|))) :qid |unknown.0:0| :skolemid |3134| :pattern ( (|MutableMapModel.__default.RemoveInternal#requires| MutableMapModel._default.RemoveInternal$V@@0 |self#0@@91| |key#0@@73|)) )))
(assert  (and (forall ((arg0@@289 T@U) (arg1@@140 T@U) (arg2@@83 Int) ) (! (= (type (|lambda#145| arg0@@289 arg1@@140 arg2@@83)) (MapType0Type BoxType boolType)) :qid |funType:lambda#145| :pattern ( (|lambda#145| arg0@@289 arg1@@140 arg2@@83)) )) (forall ((arg0@@290 T@U) ) (! (= (type (|lambda#146| arg0@@290)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#146| :pattern ( (|lambda#146| arg0@@290)) ))))
(assert  (=> (<= 92 $FunctionContextHeight) (forall ((MutableMapModel._default.RemoveInternal$V@@1 T@U) (|self#0@@92| T@U) (|key#0@@74| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.RemoveInternal$V@@1) TyType) (= (type |self#0@@92|) DatatypeTypeType)) (or (|MutableMapModel.__default.RemoveInternal#canCall| MutableMapModel._default.RemoveInternal$V@@1 |self#0@@92| |key#0@@74|) (and (not (= 92 $FunctionContextHeight)) (and (and ($Is |self#0@@92| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.RemoveInternal$V@@1)) (and (<= (LitInt 0) |key#0@@74|) (< |key#0@@74| 18446744073709551616))) (MutableMapModel.__default.Inv MutableMapModel._default.RemoveInternal$V@@1 |self#0@@92|))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@92|) (|MutableMapModel.__default.FixedSizeRemove#canCall| MutableMapModel._default.RemoveInternal$V@@1 (MutableMapModel.LinearHashMap.underlying |self#0@@92|) |key#0@@74|)) (let ((|removed#1@@0| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.RemoveInternal$V@@1 StartFuel_MutableMapModel._default.FixedSizeRemove (MutableMapModel.LinearHashMap.underlying |self#0@@92|) |key#0@@74|))))) (let ((|underlying'#0@@1| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.RemoveInternal$V@@1 StartFuel_MutableMapModel._default.FixedSizeRemove (MutableMapModel.LinearHashMap.underlying |self#0@@92|) |key#0@@74|))))) (and (and (let ((|dt_update_tmp#0#0@@6| |self#0@@92|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#0@@6|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#0@@6|))) (let ((|dt_update_tmp#1#0@@2| (let ((|dt_update_tmp#0#0@@7| |self#0@@92|)) (let ((|dt_update#underlying#0#0@@3| |underlying'#0@@1|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#0@@3| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#0@@7|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#0@@7|)))))) (and (forall ((|k#0@@11| T@U) ) (!  (=> (= (type |k#0@@11|) intType) (=> (and (<= (LitInt 0) (U_2_int |k#0@@11|)) (< (U_2_int |k#0@@11|) 18446744073709551616)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@92|) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@92|)) ($Box |k#0@@11|))) (not (= (U_2_int |k#0@@11|) |key#0@@74|))) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@92|))))) :qid |MutableMapModelidfy.1313:25| :skolemid |3135| :pattern ( (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@92|)) ($Box |k#0@@11|))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@92|)) ($Box |k#0@@11|))) )) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#0@@2|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#0@@2|))))) (let ((|dt_update_tmp#2#0@@1| (let ((|dt_update_tmp#1#0@@3| (let ((|dt_update_tmp#0#0@@8| |self#0@@92|)) (let ((|dt_update#underlying#0#0@@4| |underlying'#0@@1|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#0@@4| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#0@@8|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#0@@8|)))))) (let ((|dt_update#contents#0#0@@1| (|Map#Glue| (|lambda#145| Tclass.NativeTypes.uint64 (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@92|)) |key#0@@74|) (|lambda#146| (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@92|))) (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.RemoveInternal$V@@1)))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#1#0@@3|) (MutableMapModel.LinearHashMap.count |dt_update_tmp#1#0@@3|) |dt_update#contents#0#0@@1|))))) (and (and (=> (Options.Option.Some_q |removed#1@@0|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@92|)) (=> (not (Options.Option.Some_q |removed#1@@0|)) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@92|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#2#0@@1|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#2#0@@1|)))))))) (= (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveInternal$V@@1 |self#0@@92| |key#0@@74|) (let ((|removed#1@@1| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.RemoveInternal$V@@1 StartFuel_MutableMapModel._default.FixedSizeRemove (MutableMapModel.LinearHashMap.underlying |self#0@@92|) |key#0@@74|))))) (let ((|underlying'#0@@2| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.RemoveInternal$V@@1 StartFuel_MutableMapModel._default.FixedSizeRemove (MutableMapModel.LinearHashMap.underlying |self#0@@92|) |key#0@@74|))))) (let ((|self'#1@@2| (let ((|dt_update_tmp#2#0@@2| (let ((|dt_update_tmp#1#0@@4| (let ((|dt_update_tmp#0#0@@9| |self#0@@92|)) (let ((|dt_update#underlying#0#0@@5| |underlying'#0@@2|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#0@@5| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#0@@9|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#0@@9|)))))) (let ((|dt_update#contents#0#0@@2| (|Map#Glue| (|lambda#145| Tclass.NativeTypes.uint64 (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@92|)) |key#0@@74|) (|lambda#146| (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@92|))) (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.RemoveInternal$V@@1)))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#1#0@@4|) (MutableMapModel.LinearHashMap.count |dt_update_tmp#1#0@@4|) |dt_update#contents#0#0@@2|))))) (let ((|dt_update#count#0#0@@0| (ite (Options.Option.Some_q |removed#1@@1|) (- (MutableMapModel.LinearHashMap.count |self#0@@92|) 1) (MutableMapModel.LinearHashMap.count |self#0@@92|)))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#2#0@@2|) |dt_update#count#0#0@@0| (MutableMapModel.LinearHashMap.contents |dt_update_tmp#2#0@@2|)))))) (|#_System._tuple#2._#Make2| ($Box |self'#1@@2|) ($Box |removed#1@@1|)))))))) :qid |unknown.0:0| :skolemid |3136| :pattern ( (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveInternal$V@@1 |self#0@@92| |key#0@@74|)) ))))
(assert  (=> (<= 92 $FunctionContextHeight) (forall ((MutableMapModel._default.RemoveInternal$V@@2 T@U) (|self#0@@93| T@U) (|key#0@@75| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.RemoveInternal$V@@2) TyType) (= (type |self#0@@93|) DatatypeTypeType)) (or (|MutableMapModel.__default.RemoveInternal#canCall| MutableMapModel._default.RemoveInternal$V@@2 (Lit |self#0@@93|) (LitInt |key#0@@75|)) (and (not (= 92 $FunctionContextHeight)) (and (and ($Is |self#0@@93| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.RemoveInternal$V@@2)) (and (<= (LitInt 0) |key#0@@75|) (< |key#0@@75| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.RemoveInternal$V@@2 (Lit |self#0@@93|))))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@93|)) (|MutableMapModel.__default.FixedSizeRemove#canCall| MutableMapModel._default.RemoveInternal$V@@2 (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@93|))) (LitInt |key#0@@75|))) (let ((|removed#2| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.RemoveInternal$V@@2 StartFuel_MutableMapModel._default.FixedSizeRemove (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@93|))) (LitInt |key#0@@75|)))))) (let ((|underlying'#1@@1| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.RemoveInternal$V@@2 StartFuel_MutableMapModel._default.FixedSizeRemove (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@93|))) (LitInt |key#0@@75|)))))) (and (and (let ((|dt_update_tmp#0#1@@6| (Lit |self#0@@93|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#1@@6|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#1@@6|))) (let ((|dt_update_tmp#1#1@@2| (let ((|dt_update_tmp#0#1@@7| (Lit |self#0@@93|))) (let ((|dt_update#underlying#0#1@@3| |underlying'#1@@1|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@3| (LitInt (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@7|)) (Lit (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@7|))))))) (and (forall ((|k#0@@12| T@U) ) (!  (=> (= (type |k#0@@12|) intType) (=> (and (<= (LitInt 0) (U_2_int |k#0@@12|)) (< (U_2_int |k#0@@12|) 18446744073709551616)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@93|)) (=> (and (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (Lit |self#0@@93|))) ($Box |k#0@@12|))) (not (= (U_2_int |k#0@@12|) |key#0@@75|))) (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@93|)))))) :qid |MutableMapModelidfy.1313:25| :skolemid |3137| :pattern ( (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@93|)) ($Box |k#0@@12|))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@93|)) ($Box |k#0@@12|))) )) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#1@@2|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#1@@2|))))) (let ((|dt_update_tmp#2#1@@1| (let ((|dt_update_tmp#1#1@@3| (let ((|dt_update_tmp#0#1@@8| (Lit |self#0@@93|))) (let ((|dt_update#underlying#0#1@@4| |underlying'#1@@1|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@4| (LitInt (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@8|)) (Lit (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@8|))))))) (let ((|dt_update#contents#0#1@@1| (|Map#Glue| (|lambda#145| Tclass.NativeTypes.uint64 (|Map#Domain| (MutableMapModel.LinearHashMap.contents (Lit |self#0@@93|))) |key#0@@75|) (|lambda#146| (|Map#Elements| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@93|))))) (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.RemoveInternal$V@@2)))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#1#1@@3|) (MutableMapModel.LinearHashMap.count |dt_update_tmp#1#1@@3|) |dt_update#contents#0#1@@1|))))) (and (and (=> (Options.Option.Some_q |removed#2|) (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@93|))) (=> (not (Options.Option.Some_q |removed#2|)) (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@93|)))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#2#1@@1|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#2#1@@1|)))))))) (= (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveInternal$V@@2 (Lit |self#0@@93|) (LitInt |key#0@@75|)) (let ((|removed#2@@0| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.RemoveInternal$V@@2 StartFuel_MutableMapModel._default.FixedSizeRemove (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@93|))) (LitInt |key#0@@75|)))))) (let ((|underlying'#1@@2| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeRemove MutableMapModel._default.RemoveInternal$V@@2 StartFuel_MutableMapModel._default.FixedSizeRemove (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@93|))) (LitInt |key#0@@75|)))))) (let ((|self'#2@@0| (let ((|dt_update_tmp#2#1@@2| (let ((|dt_update_tmp#1#1@@4| (let ((|dt_update_tmp#0#1@@9| (Lit |self#0@@93|))) (let ((|dt_update#underlying#0#1@@5| |underlying'#1@@2|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@5| (LitInt (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@9|)) (Lit (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@9|))))))) (let ((|dt_update#contents#0#1@@2| (|Map#Glue| (|lambda#145| Tclass.NativeTypes.uint64 (|Map#Domain| (MutableMapModel.LinearHashMap.contents (Lit |self#0@@93|))) |key#0@@75|) (|lambda#146| (|Map#Elements| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@93|))))) (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.RemoveInternal$V@@2)))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#1#1@@4|) (MutableMapModel.LinearHashMap.count |dt_update_tmp#1#1@@4|) |dt_update#contents#0#1@@2|))))) (let ((|dt_update#count#0#1@@0| (ite (Options.Option.Some_q |removed#2@@0|) (- (MutableMapModel.LinearHashMap.count (Lit |self#0@@93|)) 1) (MutableMapModel.LinearHashMap.count (Lit |self#0@@93|))))) (|#MutableMapModel.LinearHashMap.LinearHashMap| (MutableMapModel.LinearHashMap.underlying |dt_update_tmp#2#1@@2|) |dt_update#count#0#1@@0| (MutableMapModel.LinearHashMap.contents |dt_update_tmp#2#1@@2|)))))) (|#_System._tuple#2._#Make2| ($Box |self'#2@@0|) ($Box |removed#2@@0|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |3138| :pattern ( (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveInternal$V@@2 (Lit |self#0@@93|) (LitInt |key#0@@75|))) ))))
(assert (forall ((arg0@@291 T@U) (arg1@@141 T@U) (arg2@@84 Int) ) (! (= (type (MutableMapModel.__default.RemoveAndGet arg0@@291 arg1@@141 arg2@@84)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.RemoveAndGet| :pattern ( (MutableMapModel.__default.RemoveAndGet arg0@@291 arg1@@141 arg2@@84)) )))
(assert  (=> (<= 94 $FunctionContextHeight) (forall ((MutableMapModel._default.RemoveAndGet$V T@U) (|self#0@@94| T@U) (|key#0@@76| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.RemoveAndGet$V) TyType) (= (type |self#0@@94|) DatatypeTypeType)) (or (|MutableMapModel.__default.RemoveAndGet#canCall| MutableMapModel._default.RemoveAndGet$V |self#0@@94| |key#0@@76|) (and (not (= 94 $FunctionContextHeight)) (and (and ($Is |self#0@@94| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.RemoveAndGet$V)) (and (<= (LitInt 0) |key#0@@76|) (< |key#0@@76| 18446744073709551616))) (MutableMapModel.__default.Inv MutableMapModel._default.RemoveAndGet$V |self#0@@94|))))) (and (let ((|removed#0@@1| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.RemoveAndGet$V |self#0@@94| |key#0@@76|))))) (let ((|self'#0@@3| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.RemoveAndGet$V |self#0@@94| |key#0@@76|))))) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.RemoveAndGet$V |self'#0@@3|) (|Map#Equal| (MutableMapModel.LinearHashMap.contents |self'#0@@3|) (ite (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@94|)) ($Box (int_2_U |key#0@@76|)))) (|Map#Glue| (|lambda#145| Tclass.NativeTypes.uint64 (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@94|)) |key#0@@76|) (|lambda#146| (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@94|))) (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.RemoveAndGet$V)) (MutableMapModel.LinearHashMap.contents |self#0@@94|)))) (|Options.Option#Equal| |removed#0@@1| (ite (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@94|)) ($Box (int_2_U |key#0@@76|)))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@94|)) ($Box (int_2_U |key#0@@76|)))) |#Options.Option.None|))))) ($Is (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.RemoveAndGet$V |self#0@@94| |key#0@@76|) (Tclass._System.Tuple2 (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.RemoveAndGet$V) (Tclass.Options.Option MutableMapModel._default.RemoveAndGet$V))))) :qid |unknown.0:0| :skolemid |3226| :pattern ( (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.RemoveAndGet$V |self#0@@94| |key#0@@76|)) ))))
(assert (forall ((MutableMapModel._default.RemoveAndGet$V@@0 T@U) (|self#0@@95| T@U) (|key#0@@77| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.RemoveAndGet$V@@0) TyType) (= (type |self#0@@95|) DatatypeTypeType)) (and ($Is |self#0@@95| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.RemoveAndGet$V@@0)) (and (<= (LitInt 0) |key#0@@77|) (< |key#0@@77| 18446744073709551616)))) (= (|MutableMapModel.__default.RemoveAndGet#requires| MutableMapModel._default.RemoveAndGet$V@@0 |self#0@@95| |key#0@@77|) (MutableMapModel.__default.Inv MutableMapModel._default.RemoveAndGet$V@@0 |self#0@@95|))) :qid |unknown.0:0| :skolemid |3227| :pattern ( (|MutableMapModel.__default.RemoveAndGet#requires| MutableMapModel._default.RemoveAndGet$V@@0 |self#0@@95| |key#0@@77|)) )))
(assert  (=> (<= 94 $FunctionContextHeight) (forall ((MutableMapModel._default.RemoveAndGet$V@@1 T@U) (|self#0@@96| T@U) (|key#0@@78| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.RemoveAndGet$V@@1) TyType) (= (type |self#0@@96|) DatatypeTypeType)) (or (|MutableMapModel.__default.RemoveAndGet#canCall| MutableMapModel._default.RemoveAndGet$V@@1 |self#0@@96| |key#0@@78|) (and (not (= 94 $FunctionContextHeight)) (and (and ($Is |self#0@@96| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.RemoveAndGet$V@@1)) (and (<= (LitInt 0) |key#0@@78|) (< |key#0@@78| 18446744073709551616))) (MutableMapModel.__default.Inv MutableMapModel._default.RemoveAndGet$V@@1 |self#0@@96|))))) (and (|MutableMapModel.__default.RemoveInternal#canCall| MutableMapModel._default.RemoveAndGet$V@@1 |self#0@@96| |key#0@@78|) (= (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.RemoveAndGet$V@@1 |self#0@@96| |key#0@@78|) (let ((|removed#1@@2| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveAndGet$V@@1 |self#0@@96| |key#0@@78|))))) (let ((|self'#1@@3| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveAndGet$V@@1 |self#0@@96| |key#0@@78|))))) (|#_System._tuple#2._#Make2| ($Box |self'#1@@3|) ($Box |removed#1@@2|))))))) :qid |unknown.0:0| :skolemid |3228| :pattern ( (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.RemoveAndGet$V@@1 |self#0@@96| |key#0@@78|)) ))))
(assert  (=> (<= 94 $FunctionContextHeight) (forall ((MutableMapModel._default.RemoveAndGet$V@@2 T@U) (|self#0@@97| T@U) (|key#0@@79| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.RemoveAndGet$V@@2) TyType) (= (type |self#0@@97|) DatatypeTypeType)) (or (|MutableMapModel.__default.RemoveAndGet#canCall| MutableMapModel._default.RemoveAndGet$V@@2 (Lit |self#0@@97|) (LitInt |key#0@@79|)) (and (not (= 94 $FunctionContextHeight)) (and (and ($Is |self#0@@97| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.RemoveAndGet$V@@2)) (and (<= (LitInt 0) |key#0@@79|) (< |key#0@@79| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.RemoveAndGet$V@@2 (Lit |self#0@@97|))))))))) (and (|MutableMapModel.__default.RemoveInternal#canCall| MutableMapModel._default.RemoveAndGet$V@@2 (Lit |self#0@@97|) (LitInt |key#0@@79|)) (= (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.RemoveAndGet$V@@2 (Lit |self#0@@97|) (LitInt |key#0@@79|)) (let ((|removed#2@@1| ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveAndGet$V@@2 (Lit |self#0@@97|) (LitInt |key#0@@79|))))))) (let ((|self'#2@@1| ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (MutableMapModel.__default.RemoveInternal MutableMapModel._default.RemoveAndGet$V@@2 (Lit |self#0@@97|) (LitInt |key#0@@79|))))))) (|#_System._tuple#2._#Make2| ($Box |self'#2@@1|) ($Box |removed#2@@1|))))))) :qid |unknown.0:0| :weight 3 :skolemid |3229| :pattern ( (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.RemoveAndGet$V@@2 (Lit |self#0@@97|) (LitInt |key#0@@79|))) ))))
(assert (forall ((arg0@@292 T@U) (arg1@@142 T@U) (arg2@@85 Int) ) (! (= (type (MutableMapModel.__default.Remove arg0@@292 arg1@@142 arg2@@85)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.Remove| :pattern ( (MutableMapModel.__default.Remove arg0@@292 arg1@@142 arg2@@85)) )))
(assert  (=> (<= 95 $FunctionContextHeight) (forall ((MutableMapModel._default.Remove$V T@U) (|self#0@@98| T@U) (|key#0@@80| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Remove$V) TyType) (= (type |self#0@@98|) DatatypeTypeType)) (or (|MutableMapModel.__default.Remove#canCall| MutableMapModel._default.Remove$V |self#0@@98| |key#0@@80|) (and (not (= 95 $FunctionContextHeight)) (and (and ($Is |self#0@@98| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Remove$V)) (and (<= (LitInt 0) |key#0@@80|) (< |key#0@@80| 18446744073709551616))) (MutableMapModel.__default.Inv MutableMapModel._default.Remove$V |self#0@@98|))))) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.Remove$V (MutableMapModel.__default.Remove MutableMapModel._default.Remove$V |self#0@@98| |key#0@@80|)) (|Map#Equal| (MutableMapModel.LinearHashMap.contents (MutableMapModel.__default.Remove MutableMapModel._default.Remove$V |self#0@@98| |key#0@@80|)) (ite (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@98|)) ($Box (int_2_U |key#0@@80|)))) (|Map#Glue| (|lambda#145| Tclass.NativeTypes.uint64 (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@98|)) |key#0@@80|) (|lambda#146| (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@98|))) (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.Remove$V)) (MutableMapModel.LinearHashMap.contents |self#0@@98|)))) ($Is (MutableMapModel.__default.Remove MutableMapModel._default.Remove$V |self#0@@98| |key#0@@80|) (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Remove$V)))) :qid |unknown.0:0| :skolemid |3264| :pattern ( (MutableMapModel.__default.Remove MutableMapModel._default.Remove$V |self#0@@98| |key#0@@80|)) ))))
(assert (forall ((MutableMapModel._default.Remove$V@@0 T@U) (|self#0@@99| T@U) (|key#0@@81| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Remove$V@@0) TyType) (= (type |self#0@@99|) DatatypeTypeType)) (and ($Is |self#0@@99| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Remove$V@@0)) (and (<= (LitInt 0) |key#0@@81|) (< |key#0@@81| 18446744073709551616)))) (= (|MutableMapModel.__default.Remove#requires| MutableMapModel._default.Remove$V@@0 |self#0@@99| |key#0@@81|) (MutableMapModel.__default.Inv MutableMapModel._default.Remove$V@@0 |self#0@@99|))) :qid |unknown.0:0| :skolemid |3265| :pattern ( (|MutableMapModel.__default.Remove#requires| MutableMapModel._default.Remove$V@@0 |self#0@@99| |key#0@@81|)) )))
(assert  (=> (<= 95 $FunctionContextHeight) (forall ((MutableMapModel._default.Remove$V@@1 T@U) (|self#0@@100| T@U) (|key#0@@82| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Remove$V@@1) TyType) (= (type |self#0@@100|) DatatypeTypeType)) (or (|MutableMapModel.__default.Remove#canCall| MutableMapModel._default.Remove$V@@1 |self#0@@100| |key#0@@82|) (and (not (= 95 $FunctionContextHeight)) (and (and ($Is |self#0@@100| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Remove$V@@1)) (and (<= (LitInt 0) |key#0@@82|) (< |key#0@@82| 18446744073709551616))) (MutableMapModel.__default.Inv MutableMapModel._default.Remove$V@@1 |self#0@@100|))))) (and (and (|MutableMapModel.__default.RemoveAndGet#canCall| MutableMapModel._default.Remove$V@@1 |self#0@@100| |key#0@@82|) (_System.Tuple2.___hMake2_q (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.Remove$V@@1 |self#0@@100| |key#0@@82|))) (= (MutableMapModel.__default.Remove MutableMapModel._default.Remove$V@@1 |self#0@@100| |key#0@@82|) ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.Remove$V@@1 |self#0@@100| |key#0@@82|)))))) :qid |unknown.0:0| :skolemid |3266| :pattern ( (MutableMapModel.__default.Remove MutableMapModel._default.Remove$V@@1 |self#0@@100| |key#0@@82|)) ))))
(assert  (=> (<= 95 $FunctionContextHeight) (forall ((MutableMapModel._default.Remove$V@@2 T@U) (|self#0@@101| T@U) (|key#0@@83| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Remove$V@@2) TyType) (= (type |self#0@@101|) DatatypeTypeType)) (or (|MutableMapModel.__default.Remove#canCall| MutableMapModel._default.Remove$V@@2 (Lit |self#0@@101|) (LitInt |key#0@@83|)) (and (not (= 95 $FunctionContextHeight)) (and (and ($Is |self#0@@101| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Remove$V@@2)) (and (<= (LitInt 0) |key#0@@83|) (< |key#0@@83| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.Remove$V@@2 (Lit |self#0@@101|))))))))) (and (and (|MutableMapModel.__default.RemoveAndGet#canCall| MutableMapModel._default.Remove$V@@2 (Lit |self#0@@101|) (LitInt |key#0@@83|)) (_System.Tuple2.___hMake2_q (Lit (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.Remove$V@@2 (Lit |self#0@@101|) (LitInt |key#0@@83|))))) (= (MutableMapModel.__default.Remove MutableMapModel._default.Remove$V@@2 (Lit |self#0@@101|) (LitInt |key#0@@83|)) (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (MutableMapModel.__default.RemoveAndGet MutableMapModel._default.Remove$V@@2 (Lit |self#0@@101|) (LitInt |key#0@@83|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |3267| :pattern ( (MutableMapModel.__default.Remove MutableMapModel._default.Remove$V@@2 (Lit |self#0@@101|) (LitInt |key#0@@83|))) ))))
(assert (forall ((arg0@@293 T@U) (arg1@@143 T@U) (arg2@@86 Int) ) (! (= (type (MutableMapModel.__default.Get arg0@@293 arg1@@143 arg2@@86)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.Get| :pattern ( (MutableMapModel.__default.Get arg0@@293 arg1@@143 arg2@@86)) )))
(assert  (=> (<= 96 $FunctionContextHeight) (forall ((MutableMapModel._default.Get$V T@U) (|self#0@@102| T@U) (|key#0@@84| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Get$V) TyType) (= (type |self#0@@102|) DatatypeTypeType)) (or (|MutableMapModel.__default.Get#canCall| MutableMapModel._default.Get$V |self#0@@102| |key#0@@84|) (and (not (= 96 $FunctionContextHeight)) (and (and ($Is |self#0@@102| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Get$V)) (and (<= (LitInt 0) |key#0@@84|) (< |key#0@@84| 18446744073709551616))) (MutableMapModel.__default.Inv MutableMapModel._default.Get$V |self#0@@102|))))) (and (and (ite (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@102|)) ($Box (int_2_U |key#0@@84|)))) (|Options.Option#Equal| (MutableMapModel.__default.Get MutableMapModel._default.Get$V |self#0@@102| |key#0@@84|) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@102|)) ($Box (int_2_U |key#0@@84|))))) (Options.Option.None_q (MutableMapModel.__default.Get MutableMapModel._default.Get$V |self#0@@102| |key#0@@84|))) (= (Options.Option.Some_q (MutableMapModel.__default.Get MutableMapModel._default.Get$V |self#0@@102| |key#0@@84|)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@102|)) ($Box (int_2_U |key#0@@84|)))))) ($Is (MutableMapModel.__default.Get MutableMapModel._default.Get$V |self#0@@102| |key#0@@84|) (Tclass.Options.Option MutableMapModel._default.Get$V)))) :qid |unknown.0:0| :skolemid |3302| :pattern ( (MutableMapModel.__default.Get MutableMapModel._default.Get$V |self#0@@102| |key#0@@84|)) ))))
(assert (forall ((MutableMapModel._default.Get$V@@0 T@U) (|self#0@@103| T@U) (|key#0@@85| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Get$V@@0) TyType) (= (type |self#0@@103|) DatatypeTypeType)) (and ($Is |self#0@@103| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Get$V@@0)) (and (<= (LitInt 0) |key#0@@85|) (< |key#0@@85| 18446744073709551616)))) (= (|MutableMapModel.__default.Get#requires| MutableMapModel._default.Get$V@@0 |self#0@@103| |key#0@@85|) (MutableMapModel.__default.Inv MutableMapModel._default.Get$V@@0 |self#0@@103|))) :qid |unknown.0:0| :skolemid |3303| :pattern ( (|MutableMapModel.__default.Get#requires| MutableMapModel._default.Get$V@@0 |self#0@@103| |key#0@@85|)) )))
(assert (= (type StartFuel_MutableMapModel._default.FixedSizeGet) LayerTypeType))
(assert  (=> (<= 96 $FunctionContextHeight) (forall ((MutableMapModel._default.Get$V@@1 T@U) (|self#0@@104| T@U) (|key#0@@86| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Get$V@@1) TyType) (= (type |self#0@@104|) DatatypeTypeType)) (or (|MutableMapModel.__default.Get#canCall| MutableMapModel._default.Get$V@@1 |self#0@@104| |key#0@@86|) (and (not (= 96 $FunctionContextHeight)) (and (and ($Is |self#0@@104| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Get$V@@1)) (and (<= (LitInt 0) |key#0@@86|) (< |key#0@@86| 18446744073709551616))) (MutableMapModel.__default.Inv MutableMapModel._default.Get$V@@1 |self#0@@104|))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@104|) (|MutableMapModel.__default.FixedSizeGet#canCall| MutableMapModel._default.Get$V@@1 (MutableMapModel.LinearHashMap.underlying |self#0@@104|) |key#0@@86|)) (= (MutableMapModel.__default.Get MutableMapModel._default.Get$V@@1 |self#0@@104| |key#0@@86|) (let ((|found#0| (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.Get$V@@1 StartFuel_MutableMapModel._default.FixedSizeGet (MutableMapModel.LinearHashMap.underlying |self#0@@104|) |key#0@@86|))) |found#0|)))) :qid |unknown.0:0| :skolemid |3304| :pattern ( (MutableMapModel.__default.Get MutableMapModel._default.Get$V@@1 |self#0@@104| |key#0@@86|)) ))))
(assert  (=> (<= 96 $FunctionContextHeight) (forall ((MutableMapModel._default.Get$V@@2 T@U) (|self#0@@105| T@U) (|key#0@@87| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.Get$V@@2) TyType) (= (type |self#0@@105|) DatatypeTypeType)) (or (|MutableMapModel.__default.Get#canCall| MutableMapModel._default.Get$V@@2 (Lit |self#0@@105|) (LitInt |key#0@@87|)) (and (not (= 96 $FunctionContextHeight)) (and (and ($Is |self#0@@105| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.Get$V@@2)) (and (<= (LitInt 0) |key#0@@87|) (< |key#0@@87| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.Get$V@@2 (Lit |self#0@@105|))))))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@105|)) (|MutableMapModel.__default.FixedSizeGet#canCall| MutableMapModel._default.Get$V@@2 (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@105|))) (LitInt |key#0@@87|))) (= (MutableMapModel.__default.Get MutableMapModel._default.Get$V@@2 (Lit |self#0@@105|) (LitInt |key#0@@87|)) (let ((|found#1| (MutableMapModel.__default.FixedSizeGet MutableMapModel._default.Get$V@@2 StartFuel_MutableMapModel._default.FixedSizeGet (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@105|))) (LitInt |key#0@@87|)))) |found#1|)))) :qid |unknown.0:0| :weight 3 :skolemid |3305| :pattern ( (MutableMapModel.__default.Get MutableMapModel._default.Get$V@@2 (Lit |self#0@@105|) (LitInt |key#0@@87|))) ))))
(assert  (=> (<= 97 $FunctionContextHeight) (forall ((MutableMapModel._default.NextExplainedByI$V T@U) (|self#0@@106| T@U) (|i#0@@12| Int) (|output#0| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.NextExplainedByI$V) TyType) (= (type |self#0@@106|) DatatypeTypeType)) (= (type |output#0|) DatatypeTypeType)) (or (|MutableMapModel.__default.NextExplainedByI#canCall| MutableMapModel._default.NextExplainedByI$V |self#0@@106| |i#0@@12| |output#0|) (and (not (= 97 $FunctionContextHeight)) (and (and ($Is |self#0@@106| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.NextExplainedByI$V)) (and (<= (LitInt 0) |i#0@@12|) (< |i#0@@12| 18446744073709551616))) ($Is |output#0| (Tclass.MutableMapModel.IteratorOutput MutableMapModel._default.NextExplainedByI$V)))))) true) :qid |unknown.0:0| :skolemid |3320| :pattern ( (MutableMapModel.__default.NextExplainedByI MutableMapModel._default.NextExplainedByI$V |self#0@@106| |i#0@@12| |output#0|)) ))))
(assert (forall ((MutableMapModel._default.NextExplainedByI$V@@0 T@U) (|self#0@@107| T@U) (|i#0@@13| Int) (|output#0@@0| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.NextExplainedByI$V@@0) TyType) (= (type |self#0@@107|) DatatypeTypeType)) (= (type |output#0@@0|) DatatypeTypeType)) (and (and ($Is |self#0@@107| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.NextExplainedByI$V@@0)) (and (<= (LitInt 0) |i#0@@13|) (< |i#0@@13| 18446744073709551616))) ($Is |output#0@@0| (Tclass.MutableMapModel.IteratorOutput MutableMapModel._default.NextExplainedByI$V@@0)))) (= (|MutableMapModel.__default.NextExplainedByI#requires| MutableMapModel._default.NextExplainedByI$V@@0 |self#0@@107| |i#0@@13| |output#0@@0|) true)) :qid |unknown.0:0| :skolemid |3321| :pattern ( (|MutableMapModel.__default.NextExplainedByI#requires| MutableMapModel._default.NextExplainedByI$V@@0 |self#0@@107| |i#0@@13| |output#0@@0|)) )))
(assert  (=> (<= 97 $FunctionContextHeight) (forall ((MutableMapModel._default.NextExplainedByI$V@@1 T@U) (|self#0@@108| T@U) (|i#0@@14| Int) (|output#0@@1| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.NextExplainedByI$V@@1) TyType) (= (type |self#0@@108|) DatatypeTypeType)) (= (type |output#0@@1|) DatatypeTypeType)) (or (|MutableMapModel.__default.NextExplainedByI#canCall| MutableMapModel._default.NextExplainedByI$V@@1 |self#0@@108| |i#0@@14| |output#0@@1|) (and (not (= 97 $FunctionContextHeight)) (and (and ($Is |self#0@@108| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.NextExplainedByI$V@@1)) (and (<= (LitInt 0) |i#0@@14|) (< |i#0@@14| 18446744073709551616))) ($Is |output#0@@1| (Tclass.MutableMapModel.IteratorOutput MutableMapModel._default.NextExplainedByI$V@@1)))))) (and (and (=> (MutableMapModel.IteratorOutput.Next_q |output#0@@1|) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@108|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@108|))) (=> (< |i#0@@14| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@108|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@108|))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)) |i#0@@14|))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@108|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@108|))) (=> (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)) |i#0@@14|))) (MutableMapModel.IteratorOutput.key |output#0@@1|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@108|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@108|)))))))))) (=> (=> (MutableMapModel.IteratorOutput.Next_q |output#0@@1|) (and (and (and (< |i#0@@14| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)) |i#0@@14|)))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)) |i#0@@14|))) (MutableMapModel.IteratorOutput.key |output#0@@1|))) (= (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)) |i#0@@14|))) (MutableMapModel.IteratorOutput.value |output#0@@1|)))) (=> (MutableMapModel.IteratorOutput.Done_q |output#0@@1|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@108|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@108|)))))) (= (MutableMapModel.__default.NextExplainedByI MutableMapModel._default.NextExplainedByI$V@@1 |self#0@@108| |i#0@@14| |output#0@@1|)  (and (=> (MutableMapModel.IteratorOutput.Next_q |output#0@@1|) (and (and (and (< |i#0@@14| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)) |i#0@@14|)))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)) |i#0@@14|))) (MutableMapModel.IteratorOutput.key |output#0@@1|))) (= (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|)) |i#0@@14|))) (MutableMapModel.IteratorOutput.value |output#0@@1|)))) (=> (MutableMapModel.IteratorOutput.Done_q |output#0@@1|) (= |i#0@@14| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@108|))))))))) :qid |unknown.0:0| :skolemid |3322| :pattern ( (MutableMapModel.__default.NextExplainedByI MutableMapModel._default.NextExplainedByI$V@@1 |self#0@@108| |i#0@@14| |output#0@@1|)) ))))
(assert  (=> (<= 97 $FunctionContextHeight) (forall ((MutableMapModel._default.NextExplainedByI$V@@2 T@U) (|self#0@@109| T@U) (|i#0@@15| Int) (|output#0@@2| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.NextExplainedByI$V@@2) TyType) (= (type |self#0@@109|) DatatypeTypeType)) (= (type |output#0@@2|) DatatypeTypeType)) (or (|MutableMapModel.__default.NextExplainedByI#canCall| MutableMapModel._default.NextExplainedByI$V@@2 (Lit |self#0@@109|) (LitInt |i#0@@15|) (Lit |output#0@@2|)) (and (not (= 97 $FunctionContextHeight)) (and (and ($Is |self#0@@109| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.NextExplainedByI$V@@2)) (and (<= (LitInt 0) |i#0@@15|) (< |i#0@@15| 18446744073709551616))) ($Is |output#0@@2| (Tclass.MutableMapModel.IteratorOutput MutableMapModel._default.NextExplainedByI$V@@2)))))) (and (and (=> (U_2_bool (Lit (bool_2_U (MutableMapModel.IteratorOutput.Next_q (Lit |output#0@@2|))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@109|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (=> (< |i#0@@15| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@109|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (LitInt |i#0@@15|)))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@109|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (=> (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (LitInt |i#0@@15|)))) (LitInt (MutableMapModel.IteratorOutput.key (Lit |output#0@@2|)))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@109|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|)))))))))))) (=> (=> (MutableMapModel.IteratorOutput.Next_q (Lit |output#0@@2|)) (and (and (and (< |i#0@@15| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (LitInt |i#0@@15|))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (LitInt |i#0@@15|)))) (LitInt (MutableMapModel.IteratorOutput.key (Lit |output#0@@2|))))) (= (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (LitInt |i#0@@15|)))) (Lit (MutableMapModel.IteratorOutput.value (Lit |output#0@@2|)))))) (=> (U_2_bool (Lit (bool_2_U (MutableMapModel.IteratorOutput.Done_q (Lit |output#0@@2|))))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@109|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|)))))))) (= (MutableMapModel.__default.NextExplainedByI MutableMapModel._default.NextExplainedByI$V@@2 (Lit |self#0@@109|) (LitInt |i#0@@15|) (Lit |output#0@@2|))  (and (=> (MutableMapModel.IteratorOutput.Next_q (Lit |output#0@@2|)) (and (and (and (< |i#0@@15| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (LitInt |i#0@@15|))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (LitInt |i#0@@15|)))) (LitInt (MutableMapModel.IteratorOutput.key (Lit |output#0@@2|))))) (= (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|))))) (LitInt |i#0@@15|)))) (Lit (MutableMapModel.IteratorOutput.value (Lit |output#0@@2|)))))) (=> (MutableMapModel.IteratorOutput.Done_q (Lit |output#0@@2|)) (= (LitInt |i#0@@15|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@109|)))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |3323| :pattern ( (MutableMapModel.__default.NextExplainedByI MutableMapModel._default.NextExplainedByI$V@@2 (Lit |self#0@@109|) (LitInt |i#0@@15|) (Lit |output#0@@2|))) ))))
(assert  (=> (<= 98 $FunctionContextHeight) (forall ((MutableMapModel._default.ValidI$V T@U) (|self#0@@110| T@U) (|it#0| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ValidI$V) TyType) (= (type |self#0@@110|) DatatypeTypeType)) (= (type |it#0|) DatatypeTypeType)) (or (|MutableMapModel.__default.ValidI#canCall| MutableMapModel._default.ValidI$V |self#0@@110| |it#0|) (and (not (= 98 $FunctionContextHeight)) (and ($Is |self#0@@110| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ValidI$V)) ($Is |it#0| (Tclass.MutableMapModel.Iterator MutableMapModel._default.ValidI$V)))))) true) :qid |unknown.0:0| :skolemid |3324| :pattern ( (MutableMapModel.__default.ValidI MutableMapModel._default.ValidI$V |self#0@@110| |it#0|)) ))))
(assert (forall ((MutableMapModel._default.ValidI$V@@0 T@U) (|self#0@@111| T@U) (|it#0@@0| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ValidI$V@@0) TyType) (= (type |self#0@@111|) DatatypeTypeType)) (= (type |it#0@@0|) DatatypeTypeType)) (and ($Is |self#0@@111| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ValidI$V@@0)) ($Is |it#0@@0| (Tclass.MutableMapModel.Iterator MutableMapModel._default.ValidI$V@@0)))) (= (|MutableMapModel.__default.ValidI#requires| MutableMapModel._default.ValidI$V@@0 |self#0@@111| |it#0@@0|) true)) :qid |unknown.0:0| :skolemid |3325| :pattern ( (|MutableMapModel.__default.ValidI#requires| MutableMapModel._default.ValidI$V@@0 |self#0@@111| |it#0@@0|)) )))
(assert  (=> (<= 98 $FunctionContextHeight) (forall ((MutableMapModel._default.ValidI$V@@1 T@U) (|self#0@@112| T@U) (|it#0@@1| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ValidI$V@@1) TyType) (= (type |self#0@@112|) DatatypeTypeType)) (= (type |it#0@@1|) DatatypeTypeType)) (or (|MutableMapModel.__default.ValidI#canCall| MutableMapModel._default.ValidI$V@@1 |self#0@@112| |it#0@@1|) (and (not (= 98 $FunctionContextHeight)) (and ($Is |self#0@@112| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ValidI$V@@1)) ($Is |it#0@@1| (Tclass.MutableMapModel.Iterator MutableMapModel._default.ValidI$V@@1)))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (MutableMapModel.Iterator.Iterator_q |it#0@@1|) (=> (<= (LitInt 0) (MutableMapModel.Iterator.i |it#0@@1|)) (and (MutableMapModel.Iterator.Iterator_q |it#0@@1|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@112|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@112|))))))) (= (MutableMapModel.__default.ValidI MutableMapModel._default.ValidI$V@@1 |self#0@@112| |it#0@@1|)  (and true (and (<= (LitInt 0) (MutableMapModel.Iterator.i |it#0@@1|)) (<= (MutableMapModel.Iterator.i |it#0@@1|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@112|))))))))) :qid |unknown.0:0| :skolemid |3326| :pattern ( (MutableMapModel.__default.ValidI MutableMapModel._default.ValidI$V@@1 |self#0@@112| |it#0@@1|)) ))))
(assert  (=> (<= 98 $FunctionContextHeight) (forall ((MutableMapModel._default.ValidI$V@@2 T@U) (|self#0@@113| T@U) (|it#0@@2| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.ValidI$V@@2) TyType) (= (type |self#0@@113|) DatatypeTypeType)) (= (type |it#0@@2|) DatatypeTypeType)) (or (|MutableMapModel.__default.ValidI#canCall| MutableMapModel._default.ValidI$V@@2 (Lit |self#0@@113|) (Lit |it#0@@2|)) (and (not (= 98 $FunctionContextHeight)) (and ($Is |self#0@@113| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.ValidI$V@@2)) ($Is |it#0@@2| (Tclass.MutableMapModel.Iterator MutableMapModel._default.ValidI$V@@2)))))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@2|)) (=> (<= (LitInt 0) (LitInt (MutableMapModel.Iterator.i (Lit |it#0@@2|)))) (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@2|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@113|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@113|))))))))) (= (MutableMapModel.__default.ValidI MutableMapModel._default.ValidI$V@@2 (Lit |self#0@@113|) (Lit |it#0@@2|))  (and true (and (<= (LitInt 0) (LitInt (MutableMapModel.Iterator.i (Lit |it#0@@2|)))) (<= (LitInt (MutableMapModel.Iterator.i (Lit |it#0@@2|))) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@113|)))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |3327| :pattern ( (MutableMapModel.__default.ValidI MutableMapModel._default.ValidI$V@@2 (Lit |self#0@@113|) (Lit |it#0@@2|))) ))))
(assert  (=> (<= 99 $FunctionContextHeight) (forall ((MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V T@U) (|self#0@@114| T@U) (|s#0| T@U) (|i#0@@16| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V) TyType) (= (type |self#0@@114|) DatatypeTypeType)) (= (type |s#0|) (MapType0Type BoxType boolType))) (or (|MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex#canCall| MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V |self#0@@114| |s#0| |i#0@@16|) (and (not (= 99 $FunctionContextHeight)) (and (and (and ($Is |self#0@@114| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V)) ($Is |s#0| (TSet Tclass.NativeTypes.uint64))) (and (<= (LitInt 0) |i#0@@16|) (< |i#0@@16| 18446744073709551616))) (and (<= (LitInt 0) |i#0@@16|) (<= |i#0@@16| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@114|))))))))) true) :qid |unknown.0:0| :skolemid |3328| :pattern ( (MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V |self#0@@114| |s#0| |i#0@@16|)) ))))
(assert (forall ((MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@0 T@U) (|self#0@@115| T@U) (|s#0@@0| T@U) (|i#0@@17| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@0) TyType) (= (type |self#0@@115|) DatatypeTypeType)) (= (type |s#0@@0|) (MapType0Type BoxType boolType))) (and (and ($Is |self#0@@115| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@0)) ($Is |s#0@@0| (TSet Tclass.NativeTypes.uint64))) (and (<= (LitInt 0) |i#0@@17|) (< |i#0@@17| 18446744073709551616)))) (= (|MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex#requires| MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@0 |self#0@@115| |s#0@@0| |i#0@@17|)  (and (<= (LitInt 0) |i#0@@17|) (<= |i#0@@17| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@115|))))))) :qid |unknown.0:0| :skolemid |3329| :pattern ( (|MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex#requires| MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@0 |self#0@@115| |s#0@@0| |i#0@@17|)) )))
(assert  (=> (<= 99 $FunctionContextHeight) (forall ((MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@1 T@U) (|self#0@@116| T@U) (|s#0@@1| T@U) (|i#0@@18| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@1) TyType) (= (type |self#0@@116|) DatatypeTypeType)) (= (type |s#0@@1|) (MapType0Type BoxType boolType))) (or (|MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex#canCall| MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@1 |self#0@@116| |s#0@@1| |i#0@@18|) (and (not (= 99 $FunctionContextHeight)) (and (and (and ($Is |self#0@@116| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@1)) ($Is |s#0@@1| (TSet Tclass.NativeTypes.uint64))) (and (<= (LitInt 0) |i#0@@18|) (< |i#0@@18| 18446744073709551616))) (and (<= (LitInt 0) |i#0@@18|) (<= |i#0@@18| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@116|))))))))) (and (forall ((|key#0@@88| T@U) ) (!  (=> (= (type |key#0@@88|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0@@88|)) (< (U_2_int |key#0@@88|) 18446744073709551616)) (=> (U_2_bool (MapType0Select |s#0@@1| ($Box |key#0@@88|))) (forall ((|j#0@@0| Int) ) (!  (=> (and (<= (LitInt 0) |j#0@@0|) (< |j#0@@0| |i#0@@18|)) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@116|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@116|))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@116|)) |j#0@@0|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@116|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@116|)))))) :qid |MutableMapModelidfy.1433:16| :skolemid |3332| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@116|)) |j#0@@0|))) ))))) :qid |MutableMapModelidfy.1432:12| :skolemid |3333| :pattern ( (MapType0Select |s#0@@1| ($Box |key#0@@88|))) )) (= (MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@1 |self#0@@116| |s#0@@1| |i#0@@18|) (forall ((|key#0@@89| Int) ) (!  (=> (and (and (<= (LitInt 0) |key#0@@89|) (< |key#0@@89| 18446744073709551616)) (U_2_bool (MapType0Select |s#0@@1| ($Box (int_2_U |key#0@@89|))))) (exists ((|j#0@@1| Int) ) (!  (and (and (<= (LitInt 0) |j#0@@1|) (< |j#0@@1| |i#0@@18|)) (and (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@116|)) |j#0@@1|))) (= |key#0@@89| (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@116|)) |j#0@@1|)))))) :qid |MutableMapModelidfy.1433:16| :skolemid |3330| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@116|)) |j#0@@1|))) ))) :qid |MutableMapModelidfy.1432:12| :skolemid |3331| :pattern ( (MapType0Select |s#0@@1| ($Box (int_2_U |key#0@@89|)))) ))))) :qid |unknown.0:0| :skolemid |3334| :pattern ( (MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@1 |self#0@@116| |s#0@@1| |i#0@@18|)) ))))
(assert  (=> (<= 99 $FunctionContextHeight) (forall ((MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@2 T@U) (|self#0@@117| T@U) (|s#0@@2| T@U) (|i#0@@19| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@2) TyType) (= (type |self#0@@117|) DatatypeTypeType)) (= (type |s#0@@2|) (MapType0Type BoxType boolType))) (or (|MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex#canCall| MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@2 (Lit |self#0@@117|) (Lit |s#0@@2|) (LitInt |i#0@@19|)) (and (not (= 99 $FunctionContextHeight)) (and (and (and ($Is |self#0@@117| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@2)) ($Is |s#0@@2| (TSet Tclass.NativeTypes.uint64))) (and (<= (LitInt 0) |i#0@@19|) (< |i#0@@19| 18446744073709551616))) (and (<= (LitInt 0) (LitInt |i#0@@19|)) (<= (LitInt |i#0@@19|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@117|)))))))))))) (and (forall ((|key#1@@5| T@U) ) (!  (=> (= (type |key#1@@5|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#1@@5|)) (< (U_2_int |key#1@@5|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (Lit |s#0@@2|) ($Box |key#1@@5|))) (forall ((|j#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |j#1@@1|) (< |j#1@@1| |i#0@@19|)) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@117|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@117|))))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@117|))))) |j#1@@1|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@117|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@117|)))))))) :qid |MutableMapModelidfy.1433:16| :skolemid |3337| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@117|)) |j#1@@1|))) ))))) :qid |MutableMapModelidfy.1432:12| :skolemid |3338| :pattern ( (MapType0Select |s#0@@2| ($Box |key#1@@5|))) )) (= (MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@2 (Lit |self#0@@117|) (Lit |s#0@@2|) (LitInt |i#0@@19|)) (forall ((|key#1@@6| Int) ) (!  (=> (and (and (<= (LitInt 0) |key#1@@6|) (< |key#1@@6| 18446744073709551616)) (U_2_bool (MapType0Select (Lit |s#0@@2|) ($Box (int_2_U |key#1@@6|))))) (exists ((|j#1@@2| Int) ) (!  (and (and (<= (LitInt 0) |j#1@@2|) (< |j#1@@2| |i#0@@19|)) (and (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@117|))))) |j#1@@2|))) (= |key#1@@6| (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@117|))))) |j#1@@2|)))))) :qid |MutableMapModelidfy.1433:16| :skolemid |3335| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@117|)) |j#1@@2|))) ))) :qid |MutableMapModelidfy.1432:12| :skolemid |3336| :pattern ( (MapType0Select |s#0@@2| ($Box (int_2_U |key#1@@6|)))) ))))) :qid |unknown.0:0| :weight 3 :skolemid |3339| :pattern ( (MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex MutableMapModel._default.EachReturnedKeyExplainedByPassedIndex$V@@2 (Lit |self#0@@117|) (Lit |s#0@@2|) (LitInt |i#0@@19|))) ))))
(assert  (=> (<= 100 $FunctionContextHeight) (forall ((MutableMapModel._default.WFIter$V T@U) (|self#0@@118| T@U) (|it#0@@3| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.WFIter$V) TyType) (= (type |self#0@@118|) DatatypeTypeType)) (= (type |it#0@@3|) DatatypeTypeType)) (or (|MutableMapModel.__default.WFIter#canCall| MutableMapModel._default.WFIter$V |self#0@@118| |it#0@@3|) (and (not (= 100 $FunctionContextHeight)) (and ($Is |self#0@@118| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.WFIter$V)) ($Is |it#0@@3| (Tclass.MutableMapModel.Iterator MutableMapModel._default.WFIter$V)))))) (and (and (and (=> (MutableMapModel.__default.WFIter MutableMapModel._default.WFIter$V |self#0@@118| |it#0@@3|) (=> (MutableMapModel.IteratorOutput.Done_q (MutableMapModel.Iterator.next |it#0@@3|)) (|Set#Equal| (MutableMapModel.Iterator.s |it#0@@3|) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@118|))))) (=> (MutableMapModel.__default.WFIter MutableMapModel._default.WFIter$V |self#0@@118| |it#0@@3|) (=> (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.Iterator.next |it#0@@3|)) (Maps.__default.MapsTo Tclass.NativeTypes.uint64 MutableMapModel._default.WFIter$V (MutableMapModel.LinearHashMap.contents |self#0@@118|) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.Iterator.next |it#0@@3|)))) (MutableMapModel.IteratorOutput.value (MutableMapModel.Iterator.next |it#0@@3|)))))) (=> (MutableMapModel.__default.WFIter MutableMapModel._default.WFIter$V |self#0@@118| |it#0@@3|) (=> (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.Iterator.next |it#0@@3|)) (not (U_2_bool (MapType0Select (MutableMapModel.Iterator.s |it#0@@3|) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.Iterator.next |it#0@@3|)))))))))) (=> (MutableMapModel.__default.WFIter MutableMapModel._default.WFIter$V |self#0@@118| |it#0@@3|) (|Set#Subset| (MutableMapModel.Iterator.s |it#0@@3|) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@118|)))))) :qid |unknown.0:0| :skolemid |3344| :pattern ( (MutableMapModel.__default.WFIter MutableMapModel._default.WFIter$V |self#0@@118| |it#0@@3|)) ))))
(assert (forall ((MutableMapModel._default.WFIter$V@@0 T@U) (|self#0@@119| T@U) (|it#0@@4| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.WFIter$V@@0) TyType) (= (type |self#0@@119|) DatatypeTypeType)) (= (type |it#0@@4|) DatatypeTypeType)) (and ($Is |self#0@@119| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.WFIter$V@@0)) ($Is |it#0@@4| (Tclass.MutableMapModel.Iterator MutableMapModel._default.WFIter$V@@0)))) (= (|MutableMapModel.__default.WFIter#requires| MutableMapModel._default.WFIter$V@@0 |self#0@@119| |it#0@@4|) true)) :qid |unknown.0:0| :skolemid |3345| :pattern ( (|MutableMapModel.__default.WFIter#requires| MutableMapModel._default.WFIter$V@@0 |self#0@@119| |it#0@@4|)) )))
(assert  (=> (<= 100 $FunctionContextHeight) (forall ((MutableMapModel._default.WFIter$V@@1 T@U) (|self#0@@120| T@U) (|it#0@@5| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.WFIter$V@@1) TyType) (= (type |self#0@@120|) DatatypeTypeType)) (= (type |it#0@@5|) DatatypeTypeType)) (or (|MutableMapModel.__default.WFIter#canCall| MutableMapModel._default.WFIter$V@@1 |self#0@@120| |it#0@@5|) (and (not (= 100 $FunctionContextHeight)) (and ($Is |self#0@@120| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.WFIter$V@@1)) ($Is |it#0@@5| (Tclass.MutableMapModel.Iterator MutableMapModel._default.WFIter$V@@1)))))) (and (and (|MutableMapModel.__default.ValidI#canCall| MutableMapModel._default.WFIter$V@@1 |self#0@@120| |it#0@@5|) (=> (MutableMapModel.__default.ValidI MutableMapModel._default.WFIter$V@@1 |self#0@@120| |it#0@@5|) (and (and (and (MutableMapModel.Iterator.Iterator_q |it#0@@5|) (MutableMapModel.Iterator.Iterator_q |it#0@@5|)) (|MutableMapModel.__default.NextExplainedByI#canCall| MutableMapModel._default.WFIter$V@@1 |self#0@@120| (MutableMapModel.Iterator.i |it#0@@5|) (MutableMapModel.Iterator.next |it#0@@5|))) (=> (MutableMapModel.__default.NextExplainedByI MutableMapModel._default.WFIter$V@@1 |self#0@@120| (MutableMapModel.Iterator.i |it#0@@5|) (MutableMapModel.Iterator.next |it#0@@5|)) (and (and (MutableMapModel.Iterator.Iterator_q |it#0@@5|) (=> (MutableMapModel.IteratorOutput.Done_q (MutableMapModel.Iterator.next |it#0@@5|)) (and (MutableMapModel.Iterator.Iterator_q |it#0@@5|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@120|)))) (=> (=> (MutableMapModel.IteratorOutput.Done_q (MutableMapModel.Iterator.next |it#0@@5|)) (|Set#Equal| (MutableMapModel.Iterator.s |it#0@@5|) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@120|)))) (and (forall ((|j#0@@2| Int) ) (!  (and (=> (<= (LitInt 0) |j#0@@2|) (MutableMapModel.Iterator.Iterator_q |it#0@@5|)) (=> (and (<= (LitInt 0) |j#0@@2|) (< |j#0@@2| (MutableMapModel.Iterator.i |it#0@@5|))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@120|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@120|))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@120|)) |j#0@@2|))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@120|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@120|))) (MutableMapModel.Iterator.Iterator_q |it#0@@5|)))))) :qid |MutableMapModelidfy.1451:16| :skolemid |3347| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@120|)) |j#0@@2|))) )) (=> (forall ((|j#0@@3| Int) ) (!  (=> (and (<= (LitInt 0) |j#0@@3|) (< |j#0@@3| (MutableMapModel.Iterator.i |it#0@@5|))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@120|)) |j#0@@3|))) (U_2_bool (MapType0Select (MutableMapModel.Iterator.s |it#0@@5|) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@120|)) |j#0@@3|))))))))) :qid |MutableMapModelidfy.1451:16| :skolemid |3348| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@120|)) |j#0@@3|))) )) (and (and (and (MutableMapModel.Iterator.Iterator_q |it#0@@5|) (MutableMapModel.Iterator.Iterator_q |it#0@@5|)) (|MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex#canCall| MutableMapModel._default.WFIter$V@@1 |self#0@@120| (MutableMapModel.Iterator.s |it#0@@5|) (MutableMapModel.Iterator.i |it#0@@5|))) (=> (MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex MutableMapModel._default.WFIter$V@@1 |self#0@@120| (MutableMapModel.Iterator.s |it#0@@5|) (MutableMapModel.Iterator.i |it#0@@5|)) (and (and (MutableMapModel.Iterator.Iterator_q |it#0@@5|) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@120|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@120|))) (MutableMapModel.Iterator.Iterator_q |it#0@@5|))) (=> (= (MutableMapModel.Iterator.decreaser |it#0@@5|) (|ORD#FromNat| (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@120|))) (MutableMapModel.Iterator.i |it#0@@5|)))) (and (and (MutableMapModel.Iterator.Iterator_q |it#0@@5|) (=> (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.Iterator.next |it#0@@5|)) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@120|) (MutableMapModel.Iterator.Iterator_q |it#0@@5|)) (MutableMapModel.Iterator.Iterator_q |it#0@@5|)) (|Maps.__default.MapsTo#canCall| Tclass.NativeTypes.uint64 MutableMapModel._default.WFIter$V@@1 (MutableMapModel.LinearHashMap.contents |self#0@@120|) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.Iterator.next |it#0@@5|)))) (MutableMapModel.IteratorOutput.value (MutableMapModel.Iterator.next |it#0@@5|)))))) (=> (=> (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.Iterator.next |it#0@@5|)) (Maps.__default.MapsTo Tclass.NativeTypes.uint64 MutableMapModel._default.WFIter$V@@1 (MutableMapModel.LinearHashMap.contents |self#0@@120|) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.Iterator.next |it#0@@5|)))) (MutableMapModel.IteratorOutput.value (MutableMapModel.Iterator.next |it#0@@5|)))) (and (and (MutableMapModel.Iterator.Iterator_q |it#0@@5|) (=> (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.Iterator.next |it#0@@5|)) (and (MutableMapModel.Iterator.Iterator_q |it#0@@5|) (MutableMapModel.Iterator.Iterator_q |it#0@@5|)))) (=> (=> (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.Iterator.next |it#0@@5|)) (not (U_2_bool (MapType0Select (MutableMapModel.Iterator.s |it#0@@5|) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.Iterator.next |it#0@@5|)))))))) (and (MutableMapModel.Iterator.Iterator_q |it#0@@5|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@120|)))))))))))))))))) (= (MutableMapModel.__default.WFIter MutableMapModel._default.WFIter$V@@1 |self#0@@120| |it#0@@5|)  (and (and (and (and (and (and (and (and (MutableMapModel.__default.ValidI MutableMapModel._default.WFIter$V@@1 |self#0@@120| |it#0@@5|) (MutableMapModel.__default.NextExplainedByI MutableMapModel._default.WFIter$V@@1 |self#0@@120| (MutableMapModel.Iterator.i |it#0@@5|) (MutableMapModel.Iterator.next |it#0@@5|))) (=> (MutableMapModel.IteratorOutput.Done_q (MutableMapModel.Iterator.next |it#0@@5|)) (|Set#Equal| (MutableMapModel.Iterator.s |it#0@@5|) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@120|))))) (forall ((|j#0@@4| Int) ) (!  (=> (and (<= (LitInt 0) |j#0@@4|) (< |j#0@@4| (MutableMapModel.Iterator.i |it#0@@5|))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@120|)) |j#0@@4|))) (U_2_bool (MapType0Select (MutableMapModel.Iterator.s |it#0@@5|) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@120|)) |j#0@@4|))))))))) :qid |MutableMapModelidfy.1451:16| :skolemid |3346| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@120|)) |j#0@@4|))) ))) (MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex MutableMapModel._default.WFIter$V@@1 |self#0@@120| (MutableMapModel.Iterator.s |it#0@@5|) (MutableMapModel.Iterator.i |it#0@@5|))) (= (MutableMapModel.Iterator.decreaser |it#0@@5|) (|ORD#FromNat| (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@120|))) (MutableMapModel.Iterator.i |it#0@@5|))))) (=> (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.Iterator.next |it#0@@5|)) (Maps.__default.MapsTo Tclass.NativeTypes.uint64 MutableMapModel._default.WFIter$V@@1 (MutableMapModel.LinearHashMap.contents |self#0@@120|) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.Iterator.next |it#0@@5|)))) (MutableMapModel.IteratorOutput.value (MutableMapModel.Iterator.next |it#0@@5|))))) (=> (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.Iterator.next |it#0@@5|)) (not (U_2_bool (MapType0Select (MutableMapModel.Iterator.s |it#0@@5|) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.Iterator.next |it#0@@5|))))))))) (|Set#Subset| (MutableMapModel.Iterator.s |it#0@@5|) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@120|))))))) :qid |unknown.0:0| :skolemid |3349| :pattern ( (MutableMapModel.__default.WFIter MutableMapModel._default.WFIter$V@@1 |self#0@@120| |it#0@@5|)) ))))
(assert  (=> (<= 100 $FunctionContextHeight) (forall ((MutableMapModel._default.WFIter$V@@2 T@U) (|self#0@@121| T@U) (|it#0@@6| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.WFIter$V@@2) TyType) (= (type |self#0@@121|) DatatypeTypeType)) (= (type |it#0@@6|) DatatypeTypeType)) (or (|MutableMapModel.__default.WFIter#canCall| MutableMapModel._default.WFIter$V@@2 (Lit |self#0@@121|) (Lit |it#0@@6|)) (and (not (= 100 $FunctionContextHeight)) (and ($Is |self#0@@121| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.WFIter$V@@2)) ($Is |it#0@@6| (Tclass.MutableMapModel.Iterator MutableMapModel._default.WFIter$V@@2)))))) (and (and (|MutableMapModel.__default.ValidI#canCall| MutableMapModel._default.WFIter$V@@2 (Lit |self#0@@121|) (Lit |it#0@@6|)) (=> (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.ValidI MutableMapModel._default.WFIter$V@@2 (Lit |self#0@@121|) (Lit |it#0@@6|))))) (and (and (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@6|)) (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@6|))) (|MutableMapModel.__default.NextExplainedByI#canCall| MutableMapModel._default.WFIter$V@@2 (Lit |self#0@@121|) (LitInt (MutableMapModel.Iterator.i (Lit |it#0@@6|))) (Lit (MutableMapModel.Iterator.next (Lit |it#0@@6|))))) (=> (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.NextExplainedByI MutableMapModel._default.WFIter$V@@2 (Lit |self#0@@121|) (LitInt (MutableMapModel.Iterator.i (Lit |it#0@@6|))) (Lit (MutableMapModel.Iterator.next (Lit |it#0@@6|))))))) (and (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@6|)) (=> (U_2_bool (Lit (bool_2_U (MutableMapModel.IteratorOutput.Done_q (Lit (MutableMapModel.Iterator.next (Lit |it#0@@6|))))))) (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@6|)) (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@121|))))) (=> (=> (MutableMapModel.IteratorOutput.Done_q (Lit (MutableMapModel.Iterator.next (Lit |it#0@@6|)))) (|Set#Equal| (MutableMapModel.Iterator.s (Lit |it#0@@6|)) (|Map#Domain| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@121|)))))) (and (forall ((|j#1@@3| Int) ) (!  (and (=> (<= (LitInt 0) |j#1@@3|) (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@6|))) (=> (and (<= (LitInt 0) |j#1@@3|) (< |j#1@@3| (MutableMapModel.Iterator.i (Lit |it#0@@6|)))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@121|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@121|))))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@121|))))) |j#1@@3|))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@121|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@121|))))) (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@6|))))))) :qid |MutableMapModelidfy.1451:16| :skolemid |3351| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@121|)) |j#1@@3|))) )) (=> (forall ((|j#1@@4| Int) ) (!  (=> (and (<= (LitInt 0) |j#1@@4|) (< |j#1@@4| (MutableMapModel.Iterator.i (Lit |it#0@@6|)))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@121|))))) |j#1@@4|))) (U_2_bool (MapType0Select (Lit (MutableMapModel.Iterator.s (Lit |it#0@@6|))) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@121|))))) |j#1@@4|))))))))) :qid |MutableMapModelidfy.1451:16| :skolemid |3352| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@121|)) |j#1@@4|))) )) (and (and (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@6|)) (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@6|))) (|MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex#canCall| MutableMapModel._default.WFIter$V@@2 (Lit |self#0@@121|) (Lit (MutableMapModel.Iterator.s (Lit |it#0@@6|))) (LitInt (MutableMapModel.Iterator.i (Lit |it#0@@6|))))) (=> (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex MutableMapModel._default.WFIter$V@@2 (Lit |self#0@@121|) (Lit (MutableMapModel.Iterator.s (Lit |it#0@@6|))) (LitInt (MutableMapModel.Iterator.i (Lit |it#0@@6|))))))) (and (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@6|)) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@121|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@121|))))) (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@6|)))) (=> (= (Lit (MutableMapModel.Iterator.decreaser (Lit |it#0@@6|))) (|ORD#FromNat| (- (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@121|)))))) (MutableMapModel.Iterator.i (Lit |it#0@@6|))))) (and (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@6|)) (=> (U_2_bool (Lit (bool_2_U (MutableMapModel.IteratorOutput.Next_q (Lit (MutableMapModel.Iterator.next (Lit |it#0@@6|))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@121|)) (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@6|))) (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@6|))) (|Maps.__default.MapsTo#canCall| Tclass.NativeTypes.uint64 MutableMapModel._default.WFIter$V@@2 (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@121|))) ($Box (int_2_U (LitInt (MutableMapModel.IteratorOutput.key (Lit (MutableMapModel.Iterator.next (Lit |it#0@@6|))))))) (Lit (MutableMapModel.IteratorOutput.value (Lit (MutableMapModel.Iterator.next (Lit |it#0@@6|))))))))) (=> (U_2_bool (Lit (bool_2_U  (=> (MutableMapModel.IteratorOutput.Next_q (Lit (MutableMapModel.Iterator.next (Lit |it#0@@6|)))) (Maps.__default.MapsTo Tclass.NativeTypes.uint64 MutableMapModel._default.WFIter$V@@2 (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@121|))) ($Box (int_2_U (LitInt (MutableMapModel.IteratorOutput.key (Lit (MutableMapModel.Iterator.next (Lit |it#0@@6|))))))) (Lit (MutableMapModel.IteratorOutput.value (Lit (MutableMapModel.Iterator.next (Lit |it#0@@6|)))))))))) (and (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@6|)) (=> (U_2_bool (Lit (bool_2_U (MutableMapModel.IteratorOutput.Next_q (Lit (MutableMapModel.Iterator.next (Lit |it#0@@6|))))))) (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@6|)) (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@6|))))) (=> (=> (MutableMapModel.IteratorOutput.Next_q (Lit (MutableMapModel.Iterator.next (Lit |it#0@@6|)))) (not (U_2_bool (MapType0Select (Lit (MutableMapModel.Iterator.s (Lit |it#0@@6|))) ($Box (int_2_U (LitInt (MutableMapModel.IteratorOutput.key (Lit (MutableMapModel.Iterator.next (Lit |it#0@@6|))))))))))) (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@6|)) (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@121|))))))))))))))))))) (= (MutableMapModel.__default.WFIter MutableMapModel._default.WFIter$V@@2 (Lit |self#0@@121|) (Lit |it#0@@6|))  (and (and (and (and (and (and (and (and (MutableMapModel.__default.ValidI MutableMapModel._default.WFIter$V@@2 (Lit |self#0@@121|) (Lit |it#0@@6|)) (MutableMapModel.__default.NextExplainedByI MutableMapModel._default.WFIter$V@@2 (Lit |self#0@@121|) (LitInt (MutableMapModel.Iterator.i (Lit |it#0@@6|))) (Lit (MutableMapModel.Iterator.next (Lit |it#0@@6|))))) (=> (MutableMapModel.IteratorOutput.Done_q (Lit (MutableMapModel.Iterator.next (Lit |it#0@@6|)))) (|Set#Equal| (MutableMapModel.Iterator.s (Lit |it#0@@6|)) (|Map#Domain| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@121|))))))) (forall ((|j#1@@5| Int) ) (!  (=> (and (<= (LitInt 0) |j#1@@5|) (< |j#1@@5| (MutableMapModel.Iterator.i (Lit |it#0@@6|)))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@121|))))) |j#1@@5|))) (U_2_bool (MapType0Select (Lit (MutableMapModel.Iterator.s (Lit |it#0@@6|))) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@121|))))) |j#1@@5|))))))))) :qid |MutableMapModelidfy.1451:16| :skolemid |3350| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@121|)) |j#1@@5|))) ))) (MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex MutableMapModel._default.WFIter$V@@2 (Lit |self#0@@121|) (Lit (MutableMapModel.Iterator.s (Lit |it#0@@6|))) (LitInt (MutableMapModel.Iterator.i (Lit |it#0@@6|))))) (= (Lit (MutableMapModel.Iterator.decreaser (Lit |it#0@@6|))) (|ORD#FromNat| (- (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@121|)))))) (MutableMapModel.Iterator.i (Lit |it#0@@6|)))))) (=> (MutableMapModel.IteratorOutput.Next_q (Lit (MutableMapModel.Iterator.next (Lit |it#0@@6|)))) (Maps.__default.MapsTo Tclass.NativeTypes.uint64 MutableMapModel._default.WFIter$V@@2 (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@121|))) ($Box (int_2_U (LitInt (MutableMapModel.IteratorOutput.key (Lit (MutableMapModel.Iterator.next (Lit |it#0@@6|))))))) (Lit (MutableMapModel.IteratorOutput.value (Lit (MutableMapModel.Iterator.next (Lit |it#0@@6|)))))))) (=> (MutableMapModel.IteratorOutput.Next_q (Lit (MutableMapModel.Iterator.next (Lit |it#0@@6|)))) (not (U_2_bool (MapType0Select (Lit (MutableMapModel.Iterator.s (Lit |it#0@@6|))) ($Box (int_2_U (LitInt (MutableMapModel.IteratorOutput.key (Lit (MutableMapModel.Iterator.next (Lit |it#0@@6|)))))))))))) (|Set#Subset| (MutableMapModel.Iterator.s (Lit |it#0@@6|)) (|Map#Domain| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@121|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |3353| :pattern ( (MutableMapModel.__default.WFIter MutableMapModel._default.WFIter$V@@2 (Lit |self#0@@121|) (Lit |it#0@@6|))) ))))
(assert  (=> (<= 101 $FunctionContextHeight) (forall ((MutableMapModel._default.WFSimpleIter$V T@U) (|self#0@@122| T@U) (|it#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.WFSimpleIter$V) TyType) (= (type |self#0@@122|) DatatypeTypeType)) (= (type |it#0@@7|) DatatypeTypeType)) (or (|MutableMapModel.__default.WFSimpleIter#canCall| MutableMapModel._default.WFSimpleIter$V |self#0@@122| |it#0@@7|) (and (not (= 101 $FunctionContextHeight)) (and ($Is |self#0@@122| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.WFSimpleIter$V)) ($Is |it#0@@7| Tclass.MutableMapModel.SimpleIterator))))) (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.WFSimpleIter$V |self#0@@122| |it#0@@7|)) (|Set#Subset| (MutableMapModel.SimpleIterator.s |it#0@@7|) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@122|)))) :qid |unknown.0:0| :skolemid |3366| :pattern ( (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.WFSimpleIter$V |self#0@@122| |it#0@@7|)) ))))
(assert (forall ((MutableMapModel._default.WFSimpleIter$V@@0 T@U) (|self#0@@123| T@U) (|it#0@@8| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.WFSimpleIter$V@@0) TyType) (= (type |self#0@@123|) DatatypeTypeType)) (= (type |it#0@@8|) DatatypeTypeType)) (and ($Is |self#0@@123| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.WFSimpleIter$V@@0)) ($Is |it#0@@8| Tclass.MutableMapModel.SimpleIterator))) (= (|MutableMapModel.__default.WFSimpleIter#requires| MutableMapModel._default.WFSimpleIter$V@@0 |self#0@@123| |it#0@@8|) true)) :qid |unknown.0:0| :skolemid |3367| :pattern ( (|MutableMapModel.__default.WFSimpleIter#requires| MutableMapModel._default.WFSimpleIter$V@@0 |self#0@@123| |it#0@@8|)) )))
(assert  (=> (<= 101 $FunctionContextHeight) (forall ((MutableMapModel._default.WFSimpleIter$V@@1 T@U) (|self#0@@124| T@U) (|it#0@@9| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.WFSimpleIter$V@@1) TyType) (= (type |self#0@@124|) DatatypeTypeType)) (= (type |it#0@@9|) DatatypeTypeType)) (or (|MutableMapModel.__default.WFSimpleIter#canCall| MutableMapModel._default.WFSimpleIter$V@@1 |self#0@@124| |it#0@@9|) (and (not (= 101 $FunctionContextHeight)) (and ($Is |self#0@@124| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.WFSimpleIter$V@@1)) ($Is |it#0@@9| Tclass.MutableMapModel.SimpleIterator))))) (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@9|) (=> (<= (LitInt 0) (MutableMapModel.SimpleIterator.i |it#0@@9|)) (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@9|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@124|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@124|)))) (=> (<= (MutableMapModel.SimpleIterator.i |it#0@@9|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)))) (and (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@9|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@124|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@124|)))) (=> (= (MutableMapModel.SimpleIterator.i |it#0@@9|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)))) (and (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@9|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@124|)))) (=> (=> (= (MutableMapModel.SimpleIterator.i |it#0@@9|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)))) (|Set#Equal| (MutableMapModel.SimpleIterator.s |it#0@@9|) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@124|)))) (and (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@9|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@124|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@124|)))) (=> (< (MutableMapModel.SimpleIterator.i |it#0@@9|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@124|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@124|))) (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@9|)))) (=> (=> (< (MutableMapModel.SimpleIterator.i |it#0@@9|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)) (MutableMapModel.SimpleIterator.i |it#0@@9|))))) (and (forall ((|j#0@@5| Int) ) (!  (and (=> (<= (LitInt 0) |j#0@@5|) (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@9|)) (=> (and (<= (LitInt 0) |j#0@@5|) (< |j#0@@5| (MutableMapModel.SimpleIterator.i |it#0@@9|))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@124|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@124|))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)) |j#0@@5|))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@124|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@124|))) (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@9|)))))) :qid |MutableMapModelidfy.1468:16| :skolemid |3369| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)) |j#0@@5|))) )) (=> (forall ((|j#0@@6| Int) ) (!  (=> (and (<= (LitInt 0) |j#0@@6|) (< |j#0@@6| (MutableMapModel.SimpleIterator.i |it#0@@9|))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)) |j#0@@6|))) (U_2_bool (MapType0Select (MutableMapModel.SimpleIterator.s |it#0@@9|) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)) |j#0@@6|))))))))) :qid |MutableMapModelidfy.1468:16| :skolemid |3370| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)) |j#0@@6|))) )) (and (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@9|) (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@9|)) (|MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex#canCall| MutableMapModel._default.WFSimpleIter$V@@1 |self#0@@124| (MutableMapModel.SimpleIterator.s |it#0@@9|) (MutableMapModel.SimpleIterator.i |it#0@@9|))) (=> (MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex MutableMapModel._default.WFSimpleIter$V@@1 |self#0@@124| (MutableMapModel.SimpleIterator.s |it#0@@9|) (MutableMapModel.SimpleIterator.i |it#0@@9|)) (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@9|) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@124|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@124|))) (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@9|))) (=> (= (MutableMapModel.SimpleIterator.decreaser |it#0@@9|) (|ORD#FromNat| (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|))) (MutableMapModel.SimpleIterator.i |it#0@@9|)))) (and (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@9|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@124|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@124|)))) (=> (< (MutableMapModel.SimpleIterator.i |it#0@@9|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)))) (and (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@124|) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@124|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@124|))) (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@9|))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@124|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@124|))) (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@9|))) (|Maps.__default.MapsTo#canCall| Tclass.NativeTypes.uint64 MutableMapModel._default.WFSimpleIter$V@@1 (MutableMapModel.LinearHashMap.contents |self#0@@124|) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)) (MutableMapModel.SimpleIterator.i |it#0@@9|)))))) (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)) (MutableMapModel.SimpleIterator.i |it#0@@9|)))))) (=> (Maps.__default.MapsTo Tclass.NativeTypes.uint64 MutableMapModel._default.WFSimpleIter$V@@1 (MutableMapModel.LinearHashMap.contents |self#0@@124|) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)) (MutableMapModel.SimpleIterator.i |it#0@@9|)))))) (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)) (MutableMapModel.SimpleIterator.i |it#0@@9|))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@124|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@124|))) (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@9|)) (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@9|)))))) (=> (=> (< (MutableMapModel.SimpleIterator.i |it#0@@9|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)))) (and (Maps.__default.MapsTo Tclass.NativeTypes.uint64 MutableMapModel._default.WFSimpleIter$V@@1 (MutableMapModel.LinearHashMap.contents |self#0@@124|) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)) (MutableMapModel.SimpleIterator.i |it#0@@9|)))))) (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)) (MutableMapModel.SimpleIterator.i |it#0@@9|))))) (not (U_2_bool (MapType0Select (MutableMapModel.SimpleIterator.s |it#0@@9|) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)) (MutableMapModel.SimpleIterator.i |it#0@@9|))))))))))) (and (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@9|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@124|)))))))))))))))))) (= (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.WFSimpleIter$V@@1 |self#0@@124| |it#0@@9|)  (and (and (and (and (and (and (and (and (<= (LitInt 0) (MutableMapModel.SimpleIterator.i |it#0@@9|)) (<= (MutableMapModel.SimpleIterator.i |it#0@@9|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|))))) (=> (= (MutableMapModel.SimpleIterator.i |it#0@@9|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)))) (|Set#Equal| (MutableMapModel.SimpleIterator.s |it#0@@9|) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@124|))))) (=> (< (MutableMapModel.SimpleIterator.i |it#0@@9|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)) (MutableMapModel.SimpleIterator.i |it#0@@9|)))))) (forall ((|j#0@@7| Int) ) (!  (=> (and (<= (LitInt 0) |j#0@@7|) (< |j#0@@7| (MutableMapModel.SimpleIterator.i |it#0@@9|))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)) |j#0@@7|))) (U_2_bool (MapType0Select (MutableMapModel.SimpleIterator.s |it#0@@9|) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)) |j#0@@7|))))))))) :qid |MutableMapModelidfy.1468:16| :skolemid |3368| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)) |j#0@@7|))) ))) (MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex MutableMapModel._default.WFSimpleIter$V@@1 |self#0@@124| (MutableMapModel.SimpleIterator.s |it#0@@9|) (MutableMapModel.SimpleIterator.i |it#0@@9|))) (= (MutableMapModel.SimpleIterator.decreaser |it#0@@9|) (|ORD#FromNat| (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|))) (MutableMapModel.SimpleIterator.i |it#0@@9|))))) (=> (< (MutableMapModel.SimpleIterator.i |it#0@@9|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)))) (and (Maps.__default.MapsTo Tclass.NativeTypes.uint64 MutableMapModel._default.WFSimpleIter$V@@1 (MutableMapModel.LinearHashMap.contents |self#0@@124|) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)) (MutableMapModel.SimpleIterator.i |it#0@@9|)))))) (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)) (MutableMapModel.SimpleIterator.i |it#0@@9|))))) (not (U_2_bool (MapType0Select (MutableMapModel.SimpleIterator.s |it#0@@9|) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@124|)) (MutableMapModel.SimpleIterator.i |it#0@@9|)))))))))))) (|Set#Subset| (MutableMapModel.SimpleIterator.s |it#0@@9|) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@124|))))))) :qid |unknown.0:0| :skolemid |3371| :pattern ( (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.WFSimpleIter$V@@1 |self#0@@124| |it#0@@9|)) ))))
(assert  (=> (<= 101 $FunctionContextHeight) (forall ((MutableMapModel._default.WFSimpleIter$V@@2 T@U) (|self#0@@125| T@U) (|it#0@@10| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.WFSimpleIter$V@@2) TyType) (= (type |self#0@@125|) DatatypeTypeType)) (= (type |it#0@@10|) DatatypeTypeType)) (or (|MutableMapModel.__default.WFSimpleIter#canCall| MutableMapModel._default.WFSimpleIter$V@@2 (Lit |self#0@@125|) (Lit |it#0@@10|)) (and (not (= 101 $FunctionContextHeight)) (and ($Is |self#0@@125| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.WFSimpleIter$V@@2)) ($Is |it#0@@10| Tclass.MutableMapModel.SimpleIterator))))) (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@10|)) (=> (<= (LitInt 0) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|)))) (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@10|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@125|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|)))))) (=> (<= (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|))) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))))) (and (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@10|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@125|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|)))))) (=> (= (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|))) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))))) (and (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@10|)) (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@125|))))) (=> (=> (= (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|))) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))))) (|Set#Equal| (MutableMapModel.SimpleIterator.s (Lit |it#0@@10|)) (|Map#Domain| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@125|)))))) (and (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@10|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@125|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|)))))) (=> (< (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|)) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@125|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@10|))))) (=> (=> (< (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|)) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|))))))) (and (forall ((|j#1@@6| Int) ) (!  (and (=> (<= (LitInt 0) |j#1@@6|) (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@10|))) (=> (and (<= (LitInt 0) |j#1@@6|) (< |j#1@@6| (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|)))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@125|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) |j#1@@6|))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@125|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@10|))))))) :qid |MutableMapModelidfy.1468:16| :skolemid |3373| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@125|)) |j#1@@6|))) )) (=> (forall ((|j#1@@7| Int) ) (!  (=> (and (<= (LitInt 0) |j#1@@7|) (< |j#1@@7| (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|)))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) |j#1@@7|))) (U_2_bool (MapType0Select (Lit (MutableMapModel.SimpleIterator.s (Lit |it#0@@10|))) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) |j#1@@7|))))))))) :qid |MutableMapModelidfy.1468:16| :skolemid |3374| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@125|)) |j#1@@7|))) )) (and (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@10|)) (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@10|))) (|MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex#canCall| MutableMapModel._default.WFSimpleIter$V@@2 (Lit |self#0@@125|) (Lit (MutableMapModel.SimpleIterator.s (Lit |it#0@@10|))) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|))))) (=> (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex MutableMapModel._default.WFSimpleIter$V@@2 (Lit |self#0@@125|) (Lit (MutableMapModel.SimpleIterator.s (Lit |it#0@@10|))) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|))))))) (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@10|)) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@125|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@10|)))) (=> (= (Lit (MutableMapModel.SimpleIterator.decreaser (Lit |it#0@@10|))) (|ORD#FromNat| (- (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|)))))) (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|))))) (and (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@10|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@125|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|)))))) (=> (< (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|)) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))))) (and (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@125|)) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@125|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@10|)))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@125|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@10|)))) (|Maps.__default.MapsTo#canCall| Tclass.NativeTypes.uint64 MutableMapModel._default.WFSimpleIter$V@@2 (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@125|))) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|)))))))) (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|)))))))) (=> (Maps.__default.MapsTo Tclass.NativeTypes.uint64 MutableMapModel._default.WFSimpleIter$V@@2 (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@125|))) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|)))))))) (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@125|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@10|))) (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@10|))))))) (=> (=> (< (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|)) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))))) (and (Maps.__default.MapsTo Tclass.NativeTypes.uint64 MutableMapModel._default.WFSimpleIter$V@@2 (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@125|))) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|)))))))) (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|))))))) (not (U_2_bool (MapType0Select (Lit (MutableMapModel.SimpleIterator.s (Lit |it#0@@10|))) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|))))))))))))) (and (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@10|)) (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@125|))))))))))))))))))) (= (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.WFSimpleIter$V@@2 (Lit |self#0@@125|) (Lit |it#0@@10|))  (and (and (and (and (and (and (and (and (<= (LitInt 0) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|)))) (<= (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|))) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|)))))))) (=> (= (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|))) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))))) (|Set#Equal| (MutableMapModel.SimpleIterator.s (Lit |it#0@@10|)) (|Map#Domain| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@125|))))))) (=> (< (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|)) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|)))))))) (forall ((|j#1@@8| Int) ) (!  (=> (and (<= (LitInt 0) |j#1@@8|) (< |j#1@@8| (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|)))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) |j#1@@8|))) (U_2_bool (MapType0Select (Lit (MutableMapModel.SimpleIterator.s (Lit |it#0@@10|))) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) |j#1@@8|))))))))) :qid |MutableMapModelidfy.1468:16| :skolemid |3372| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@125|)) |j#1@@8|))) ))) (MutableMapModel.__default.EachReturnedKeyExplainedByPassedIndex MutableMapModel._default.WFSimpleIter$V@@2 (Lit |self#0@@125|) (Lit (MutableMapModel.SimpleIterator.s (Lit |it#0@@10|))) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|))))) (= (Lit (MutableMapModel.SimpleIterator.decreaser (Lit |it#0@@10|))) (|ORD#FromNat| (- (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|)))))) (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|)))))) (=> (< (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|)) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))))) (and (Maps.__default.MapsTo Tclass.NativeTypes.uint64 MutableMapModel._default.WFSimpleIter$V@@2 (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@125|))) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|)))))))) (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|))))))) (not (U_2_bool (MapType0Select (Lit (MutableMapModel.SimpleIterator.s (Lit |it#0@@10|))) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@125|))))) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@10|)))))))))))))) (|Set#Subset| (MutableMapModel.SimpleIterator.s (Lit |it#0@@10|)) (|Map#Domain| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@125|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |3375| :pattern ( (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.WFSimpleIter$V@@2 (Lit |self#0@@125|) (Lit |it#0@@10|))) ))))
(assert (forall ((arg0@@294 T@U) (arg1@@144 T@U) (arg2@@87 Int) ) (! (= (type (MutableMapModel.__default.indexOutput arg0@@294 arg1@@144 arg2@@87)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.indexOutput| :pattern ( (MutableMapModel.__default.indexOutput arg0@@294 arg1@@144 arg2@@87)) )))
(assert  (=> (<= 102 $FunctionContextHeight) (forall ((MutableMapModel._default.indexOutput$V T@U) (|self#0@@126| T@U) (|i#0@@20| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.indexOutput$V) TyType) (= (type |self#0@@126|) DatatypeTypeType)) (or (|MutableMapModel.__default.indexOutput#canCall| MutableMapModel._default.indexOutput$V |self#0@@126| |i#0@@20|) (and (not (= 102 $FunctionContextHeight)) (and (and ($Is |self#0@@126| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.indexOutput$V)) (and (<= (LitInt 0) |i#0@@20|) (< |i#0@@20| 18446744073709551616))) (and (and (<= (LitInt 0) |i#0@@20|) (<= |i#0@@20| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@126|))))) (=> (< |i#0@@20| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@126|)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@126|)) |i#0@@20|))))))))) ($Is (MutableMapModel.__default.indexOutput MutableMapModel._default.indexOutput$V |self#0@@126| |i#0@@20|) (Tclass.MutableMapModel.IteratorOutput MutableMapModel._default.indexOutput$V))) :qid |unknown.0:0| :skolemid |3385| :pattern ( (MutableMapModel.__default.indexOutput MutableMapModel._default.indexOutput$V |self#0@@126| |i#0@@20|)) ))))
(assert (forall ((MutableMapModel._default.indexOutput$V@@0 T@U) (|self#0@@127| T@U) (|i#0@@21| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.indexOutput$V@@0) TyType) (= (type |self#0@@127|) DatatypeTypeType)) (and ($Is |self#0@@127| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.indexOutput$V@@0)) (and (<= (LitInt 0) |i#0@@21|) (< |i#0@@21| 18446744073709551616)))) (= (|MutableMapModel.__default.indexOutput#requires| MutableMapModel._default.indexOutput$V@@0 |self#0@@127| |i#0@@21|)  (and (and (<= (LitInt 0) |i#0@@21|) (<= |i#0@@21| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@127|))))) (=> (< |i#0@@21| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@127|)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@127|)) |i#0@@21|))))))) :qid |unknown.0:0| :skolemid |3386| :pattern ( (|MutableMapModel.__default.indexOutput#requires| MutableMapModel._default.indexOutput$V@@0 |self#0@@127| |i#0@@21|)) )))
(assert  (=> (<= 102 $FunctionContextHeight) (forall ((MutableMapModel._default.indexOutput$V@@1 T@U) (|self#0@@128| T@U) (|i#0@@22| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.indexOutput$V@@1) TyType) (= (type |self#0@@128|) DatatypeTypeType)) (or (|MutableMapModel.__default.indexOutput#canCall| MutableMapModel._default.indexOutput$V@@1 |self#0@@128| |i#0@@22|) (and (not (= 102 $FunctionContextHeight)) (and (and ($Is |self#0@@128| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.indexOutput$V@@1)) (and (<= (LitInt 0) |i#0@@22|) (< |i#0@@22| 18446744073709551616))) (and (and (<= (LitInt 0) |i#0@@22|) (<= |i#0@@22| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@128|))))) (=> (< |i#0@@22| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@128|)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@128|)) |i#0@@22|))))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@128|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@128|))) (=> (not (= |i#0@@22| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@128|))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@128|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@128|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@128|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@128|)))))) (= (MutableMapModel.__default.indexOutput MutableMapModel._default.indexOutput$V@@1 |self#0@@128| |i#0@@22|) (ite (= |i#0@@22| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@128|)))) |#MutableMapModel.IteratorOutput.Done| (|#MutableMapModel.IteratorOutput.Next| (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@128|)) |i#0@@22|))) (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@128|)) |i#0@@22|)))))))) :qid |unknown.0:0| :skolemid |3387| :pattern ( (MutableMapModel.__default.indexOutput MutableMapModel._default.indexOutput$V@@1 |self#0@@128| |i#0@@22|)) ))))
(assert  (=> (<= 102 $FunctionContextHeight) (forall ((MutableMapModel._default.indexOutput$V@@2 T@U) (|self#0@@129| T@U) (|i#0@@23| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.indexOutput$V@@2) TyType) (= (type |self#0@@129|) DatatypeTypeType)) (or (|MutableMapModel.__default.indexOutput#canCall| MutableMapModel._default.indexOutput$V@@2 (Lit |self#0@@129|) (LitInt |i#0@@23|)) (and (not (= 102 $FunctionContextHeight)) (and (and ($Is |self#0@@129| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.indexOutput$V@@2)) (and (<= (LitInt 0) |i#0@@23|) (< |i#0@@23| 18446744073709551616))) (and (and (<= (LitInt 0) (LitInt |i#0@@23|)) (<= (LitInt |i#0@@23|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@129|)))))))) (=> (< |i#0@@23| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@129|))))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@129|))))) (LitInt |i#0@@23|)))))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@129|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@129|))))) (=> (not (= (LitInt |i#0@@23|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@129|)))))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@129|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@129|))))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@129|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@129|)))))))) (= (MutableMapModel.__default.indexOutput MutableMapModel._default.indexOutput$V@@2 (Lit |self#0@@129|) (LitInt |i#0@@23|)) (ite (= (LitInt |i#0@@23|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@129|))))))) |#MutableMapModel.IteratorOutput.Done| (|#MutableMapModel.IteratorOutput.Next| (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@129|))))) (LitInt |i#0@@23|)))) (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@129|))))) (LitInt |i#0@@23|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |3388| :pattern ( (MutableMapModel.__default.indexOutput MutableMapModel._default.indexOutput$V@@2 (Lit |self#0@@129|) (LitInt |i#0@@23|))) ))))
(assert (forall ((arg0@@295 T@U) (arg1@@145 T@U) (arg2@@88 T@U) ) (! (= (type (MutableMapModel.__default.SimpleIterOutput arg0@@295 arg1@@145 arg2@@88)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.SimpleIterOutput| :pattern ( (MutableMapModel.__default.SimpleIterOutput arg0@@295 arg1@@145 arg2@@88)) )))
(assert  (=> (<= 103 $FunctionContextHeight) (forall ((MutableMapModel._default.SimpleIterOutput$V T@U) (|self#0@@130| T@U) (|it#0@@11| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SimpleIterOutput$V) TyType) (= (type |self#0@@130|) DatatypeTypeType)) (= (type |it#0@@11|) DatatypeTypeType)) (or (|MutableMapModel.__default.SimpleIterOutput#canCall| MutableMapModel._default.SimpleIterOutput$V |self#0@@130| |it#0@@11|) (and (not (= 103 $FunctionContextHeight)) (and (and ($Is |self#0@@130| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterOutput$V)) ($Is |it#0@@11| Tclass.MutableMapModel.SimpleIterator)) (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.SimpleIterOutput$V |self#0@@130| |it#0@@11|))))) (and (and (and (=> (MutableMapModel.IteratorOutput.Done_q (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterOutput$V |self#0@@130| |it#0@@11|)) (|Set#Equal| (MutableMapModel.SimpleIterator.s |it#0@@11|) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@130|)))) (=> (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterOutput$V |self#0@@130| |it#0@@11|)) (Maps.__default.MapsTo Tclass.NativeTypes.uint64 MutableMapModel._default.SimpleIterOutput$V (MutableMapModel.LinearHashMap.contents |self#0@@130|) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterOutput$V |self#0@@130| |it#0@@11|)))) (MutableMapModel.IteratorOutput.value (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterOutput$V |self#0@@130| |it#0@@11|))))) (=> (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterOutput$V |self#0@@130| |it#0@@11|)) (not (U_2_bool (MapType0Select (MutableMapModel.SimpleIterator.s |it#0@@11|) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterOutput$V |self#0@@130| |it#0@@11|))))))))) ($Is (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterOutput$V |self#0@@130| |it#0@@11|) (Tclass.MutableMapModel.IteratorOutput MutableMapModel._default.SimpleIterOutput$V)))) :qid |unknown.0:0| :skolemid |3389| :pattern ( (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterOutput$V |self#0@@130| |it#0@@11|)) ))))
(assert (forall ((MutableMapModel._default.SimpleIterOutput$V@@0 T@U) (|self#0@@131| T@U) (|it#0@@12| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SimpleIterOutput$V@@0) TyType) (= (type |self#0@@131|) DatatypeTypeType)) (= (type |it#0@@12|) DatatypeTypeType)) (and ($Is |self#0@@131| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterOutput$V@@0)) ($Is |it#0@@12| Tclass.MutableMapModel.SimpleIterator))) (= (|MutableMapModel.__default.SimpleIterOutput#requires| MutableMapModel._default.SimpleIterOutput$V@@0 |self#0@@131| |it#0@@12|) (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.SimpleIterOutput$V@@0 |self#0@@131| |it#0@@12|))) :qid |unknown.0:0| :skolemid |3390| :pattern ( (|MutableMapModel.__default.SimpleIterOutput#requires| MutableMapModel._default.SimpleIterOutput$V@@0 |self#0@@131| |it#0@@12|)) )))
(assert  (=> (<= 103 $FunctionContextHeight) (forall ((MutableMapModel._default.SimpleIterOutput$V@@1 T@U) (|self#0@@132| T@U) (|it#0@@13| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SimpleIterOutput$V@@1) TyType) (= (type |self#0@@132|) DatatypeTypeType)) (= (type |it#0@@13|) DatatypeTypeType)) (or (|MutableMapModel.__default.SimpleIterOutput#canCall| MutableMapModel._default.SimpleIterOutput$V@@1 |self#0@@132| |it#0@@13|) (and (not (= 103 $FunctionContextHeight)) (and (and ($Is |self#0@@132| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterOutput$V@@1)) ($Is |it#0@@13| Tclass.MutableMapModel.SimpleIterator)) (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.SimpleIterOutput$V@@1 |self#0@@132| |it#0@@13|))))) (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@13|) (|MutableMapModel.__default.indexOutput#canCall| MutableMapModel._default.SimpleIterOutput$V@@1 |self#0@@132| (MutableMapModel.SimpleIterator.i |it#0@@13|))) (= (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterOutput$V@@1 |self#0@@132| |it#0@@13|) (MutableMapModel.__default.indexOutput MutableMapModel._default.SimpleIterOutput$V@@1 |self#0@@132| (MutableMapModel.SimpleIterator.i |it#0@@13|))))) :qid |unknown.0:0| :skolemid |3391| :pattern ( (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterOutput$V@@1 |self#0@@132| |it#0@@13|)) ))))
(assert  (=> (<= 103 $FunctionContextHeight) (forall ((MutableMapModel._default.SimpleIterOutput$V@@2 T@U) (|self#0@@133| T@U) (|it#0@@14| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SimpleIterOutput$V@@2) TyType) (= (type |self#0@@133|) DatatypeTypeType)) (= (type |it#0@@14|) DatatypeTypeType)) (or (|MutableMapModel.__default.SimpleIterOutput#canCall| MutableMapModel._default.SimpleIterOutput$V@@2 (Lit |self#0@@133|) (Lit |it#0@@14|)) (and (not (= 103 $FunctionContextHeight)) (and (and ($Is |self#0@@133| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterOutput$V@@2)) ($Is |it#0@@14| Tclass.MutableMapModel.SimpleIterator)) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.SimpleIterOutput$V@@2 (Lit |self#0@@133|) (Lit |it#0@@14|))))))))) (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@14|)) (|MutableMapModel.__default.indexOutput#canCall| MutableMapModel._default.SimpleIterOutput$V@@2 (Lit |self#0@@133|) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@14|))))) (= (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterOutput$V@@2 (Lit |self#0@@133|) (Lit |it#0@@14|)) (Lit (MutableMapModel.__default.indexOutput MutableMapModel._default.SimpleIterOutput$V@@2 (Lit |self#0@@133|) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@14|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |3392| :pattern ( (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterOutput$V@@2 (Lit |self#0@@133|) (Lit |it#0@@14|))) ))))
(assert (forall ((arg0@@296 T@U) (arg1@@146 T@U) (arg2@@89 T@U) (arg3@@50 Int) ) (! (= (type (MutableMapModel.__default.iterToNext arg0@@296 arg1@@146 arg2@@89 arg3@@50)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.iterToNext| :pattern ( (MutableMapModel.__default.iterToNext arg0@@296 arg1@@146 arg2@@89 arg3@@50)) )))
(assert (forall ((MutableMapModel._default.iterToNext$V T@U) ($ly@@118 T@U) (|self#0@@134| T@U) (|i#0@@24| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.iterToNext$V) TyType) (= (type $ly@@118) LayerTypeType)) (= (type |self#0@@134|) DatatypeTypeType)) (= (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V ($LS $ly@@118) |self#0@@134| |i#0@@24|) (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V $ly@@118 |self#0@@134| |i#0@@24|))) :qid |unknown.0:0| :skolemid |3456| :pattern ( (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V ($LS $ly@@118) |self#0@@134| |i#0@@24|)) )))
(assert (forall ((MutableMapModel._default.iterToNext$V@@0 T@U) ($ly@@119 T@U) (|self#0@@135| T@U) (|i#0@@25| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.iterToNext$V@@0) TyType) (= (type $ly@@119) LayerTypeType)) (= (type |self#0@@135|) DatatypeTypeType)) (= (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@0 $ly@@119 |self#0@@135| |i#0@@25|) (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@0 $LZ |self#0@@135| |i#0@@25|))) :qid |unknown.0:0| :skolemid |3457| :pattern ( (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@0 (AsFuelBottom $ly@@119) |self#0@@135| |i#0@@25|)) )))
(assert  (=> (<= 108 $FunctionContextHeight) (forall ((MutableMapModel._default.iterToNext$V@@1 T@U) ($ly@@120 T@U) (|self#0@@136| T@U) (|i#0@@26| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.iterToNext$V@@1) TyType) (= (type $ly@@120) LayerTypeType)) (= (type |self#0@@136|) DatatypeTypeType)) (or (|MutableMapModel.__default.iterToNext#canCall| MutableMapModel._default.iterToNext$V@@1 |self#0@@136| |i#0@@26|) (and (not (= 108 $FunctionContextHeight)) (and (and ($Is |self#0@@136| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.iterToNext$V@@1)) (and (<= (LitInt 0) |i#0@@26|) (< |i#0@@26| 18446744073709551616))) (and (MutableMapModel.__default.Inv MutableMapModel._default.iterToNext$V@@1 |self#0@@136|) (and (<= (LitInt 0) |i#0@@26|) (<= |i#0@@26| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@136|)))))))))) (and (and (and (MutableMapModel.__default.NextExplainedByI MutableMapModel._default.iterToNext$V@@1 |self#0@@136| (U_2_int ($Unbox intType (_System.Tuple2._0 (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@1 $ly@@120 |self#0@@136| |i#0@@26|)))) ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@1 $ly@@120 |self#0@@136| |i#0@@26|)))) (forall ((|j#0@@8| Int) ) (!  (=> (and (and (<= (LitInt 0) |j#0@@8|) (< |j#0@@8| 18446744073709551616)) (and (<= |i#0@@26| |j#0@@8|) (< |j#0@@8| (U_2_int ($Unbox intType (_System.Tuple2._0 (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@1 $ly@@120 |self#0@@136| |i#0@@26|))))))) (not (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@136|)) |j#0@@8|))))) :qid |MutableMapModelidfy.1549:18| :skolemid |3458| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@136|)) |j#0@@8|))) ))) (<= |i#0@@26| (U_2_int ($Unbox intType (_System.Tuple2._0 (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@1 $ly@@120 |self#0@@136| |i#0@@26|)))))) ($Is (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@1 $ly@@120 |self#0@@136| |i#0@@26|) (Tclass._System.Tuple2 Tclass.NativeTypes.uint64 (Tclass.MutableMapModel.IteratorOutput MutableMapModel._default.iterToNext$V@@1))))) :qid |unknown.0:0| :skolemid |3459| :pattern ( (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@1 $ly@@120 |self#0@@136| |i#0@@26|)) ))))
(assert (forall ((MutableMapModel._default.iterToNext$V@@2 T@U) ($ly@@121 T@U) (|self#0@@137| T@U) (|i#0@@27| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.iterToNext$V@@2) TyType) (= (type $ly@@121) LayerTypeType)) (= (type |self#0@@137|) DatatypeTypeType)) (and ($Is |self#0@@137| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.iterToNext$V@@2)) (and (<= (LitInt 0) |i#0@@27|) (< |i#0@@27| 18446744073709551616)))) (= (|MutableMapModel.__default.iterToNext#requires| MutableMapModel._default.iterToNext$V@@2 $ly@@121 |self#0@@137| |i#0@@27|)  (and (MutableMapModel.__default.Inv MutableMapModel._default.iterToNext$V@@2 |self#0@@137|) (and (<= (LitInt 0) |i#0@@27|) (<= |i#0@@27| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@137|)))))))) :qid |unknown.0:0| :skolemid |3460| :pattern ( (|MutableMapModel.__default.iterToNext#requires| MutableMapModel._default.iterToNext$V@@2 $ly@@121 |self#0@@137| |i#0@@27|)) )))
(assert  (=> (<= 108 $FunctionContextHeight) (forall ((MutableMapModel._default.iterToNext$V@@3 T@U) ($ly@@122 T@U) (|self#0@@138| T@U) (|i#0@@28| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.iterToNext$V@@3) TyType) (= (type $ly@@122) LayerTypeType)) (= (type |self#0@@138|) DatatypeTypeType)) (or (|MutableMapModel.__default.iterToNext#canCall| MutableMapModel._default.iterToNext$V@@3 |self#0@@138| |i#0@@28|) (and (not (= 108 $FunctionContextHeight)) (and (and ($Is |self#0@@138| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.iterToNext$V@@3)) (and (<= (LitInt 0) |i#0@@28|) (< |i#0@@28| 18446744073709551616))) (and (MutableMapModel.__default.Inv MutableMapModel._default.iterToNext$V@@3 |self#0@@138|) (and (<= (LitInt 0) |i#0@@28|) (<= |i#0@@28| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@138|)))))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@138|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@138|))) (=> (not (= |i#0@@28| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@138|))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@138|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@138|))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@138|)) |i#0@@28|))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@138|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@138|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@138|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@138|)))))) (=> (not (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@138|)) |i#0@@28|)))) (|MutableMapModel.__default.iterToNext#canCall| MutableMapModel._default.iterToNext$V@@3 |self#0@@138| (+ |i#0@@28| 1)))))) (= (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@3 ($LS $ly@@122) |self#0@@138| |i#0@@28|) (ite (= |i#0@@28| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@138|)))) (|#_System._tuple#2._#Make2| ($Box (int_2_U |i#0@@28|)) ($Box (Lit |#MutableMapModel.IteratorOutput.Done|))) (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@138|)) |i#0@@28|))) (|#_System._tuple#2._#Make2| ($Box (int_2_U |i#0@@28|)) ($Box (|#MutableMapModel.IteratorOutput.Next| (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@138|)) |i#0@@28|))) (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@138|)) |i#0@@28|)))))) (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@3 $ly@@122 |self#0@@138| (+ |i#0@@28| 1))))))) :qid |unknown.0:0| :skolemid |3461| :pattern ( (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@3 ($LS $ly@@122) |self#0@@138| |i#0@@28|)) ))))
(assert  (=> (<= 108 $FunctionContextHeight) (forall ((MutableMapModel._default.iterToNext$V@@4 T@U) ($ly@@123 T@U) (|self#0@@139| T@U) (|i#0@@29| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.iterToNext$V@@4) TyType) (= (type $ly@@123) LayerTypeType)) (= (type |self#0@@139|) DatatypeTypeType)) (or (|MutableMapModel.__default.iterToNext#canCall| MutableMapModel._default.iterToNext$V@@4 (Lit |self#0@@139|) (LitInt |i#0@@29|)) (and (not (= 108 $FunctionContextHeight)) (and (and ($Is |self#0@@139| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.iterToNext$V@@4)) (and (<= (LitInt 0) |i#0@@29|) (< |i#0@@29| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.iterToNext$V@@4 (Lit |self#0@@139|))))) (and (<= (LitInt 0) (LitInt |i#0@@29|)) (<= (LitInt |i#0@@29|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|))))))))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@139|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|))))) (=> (not (= (LitInt |i#0@@29|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|)))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@139|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|))))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|))))) (LitInt |i#0@@29|)))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@139|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|))))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@139|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|)))))))) (=> (not (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|))))) (LitInt |i#0@@29|))))) (|MutableMapModel.__default.iterToNext#canCall| MutableMapModel._default.iterToNext$V@@4 (Lit |self#0@@139|) (LitInt (+ |i#0@@29| 1))))))) (= (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@4 ($LS $ly@@123) (Lit |self#0@@139|) (LitInt |i#0@@29|)) (ite (= (LitInt |i#0@@29|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|))))))) (|#_System._tuple#2._#Make2| ($Box (int_2_U (LitInt |i#0@@29|))) ($Box (Lit |#MutableMapModel.IteratorOutput.Done|))) (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|))))) (LitInt |i#0@@29|)))) (|#_System._tuple#2._#Make2| ($Box (int_2_U (LitInt |i#0@@29|))) ($Box (|#MutableMapModel.IteratorOutput.Next| (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|))))) (LitInt |i#0@@29|)))) (MutableMapModel.Item.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@139|))))) (LitInt |i#0@@29|))))))) (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@4 ($LS $ly@@123) (Lit |self#0@@139|) (LitInt (+ |i#0@@29| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |3462| :pattern ( (MutableMapModel.__default.iterToNext MutableMapModel._default.iterToNext$V@@4 ($LS $ly@@123) (Lit |self#0@@139|) (LitInt |i#0@@29|))) ))))
(assert (forall ((MutableMapModel._default.simpleIterToNext$V T@U) ($ly@@124 T@U) (|self#0@@140| T@U) (|i#0@@30| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.simpleIterToNext$V) TyType) (= (type $ly@@124) LayerTypeType)) (= (type |self#0@@140|) DatatypeTypeType)) (= (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V ($LS $ly@@124) |self#0@@140| |i#0@@30|) (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V $ly@@124 |self#0@@140| |i#0@@30|))) :qid |unknown.0:0| :skolemid |3483| :pattern ( (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V ($LS $ly@@124) |self#0@@140| |i#0@@30|)) )))
(assert (forall ((MutableMapModel._default.simpleIterToNext$V@@0 T@U) ($ly@@125 T@U) (|self#0@@141| T@U) (|i#0@@31| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.simpleIterToNext$V@@0) TyType) (= (type $ly@@125) LayerTypeType)) (= (type |self#0@@141|) DatatypeTypeType)) (= (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@0 $ly@@125 |self#0@@141| |i#0@@31|) (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@0 $LZ |self#0@@141| |i#0@@31|))) :qid |unknown.0:0| :skolemid |3484| :pattern ( (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@0 (AsFuelBottom $ly@@125) |self#0@@141| |i#0@@31|)) )))
(assert  (=> (<= 109 $FunctionContextHeight) (forall ((MutableMapModel._default.simpleIterToNext$V@@1 T@U) ($ly@@126 T@U) (|self#0@@142| T@U) (|i#0@@32| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.simpleIterToNext$V@@1) TyType) (= (type $ly@@126) LayerTypeType)) (= (type |self#0@@142|) DatatypeTypeType)) (or (|MutableMapModel.__default.simpleIterToNext#canCall| MutableMapModel._default.simpleIterToNext$V@@1 |self#0@@142| |i#0@@32|) (and (not (= 109 $FunctionContextHeight)) (and (and ($Is |self#0@@142| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.simpleIterToNext$V@@1)) (and (<= (LitInt 0) |i#0@@32|) (< |i#0@@32| 18446744073709551616))) (and (MutableMapModel.__default.Inv MutableMapModel._default.simpleIterToNext$V@@1 |self#0@@142|) (and (<= (LitInt 0) |i#0@@32|) (<= |i#0@@32| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@142|)))))))))) (and (and (and (and (and (<= (LitInt 0) (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@1 $ly@@126 |self#0@@142| |i#0@@32|)) (<= (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@1 $ly@@126 |self#0@@142| |i#0@@32|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@142|))))) (forall ((|j#0@@9| Int) ) (!  (=> (and (and (<= (LitInt 0) |j#0@@9|) (< |j#0@@9| 18446744073709551616)) (and (<= |i#0@@32| |j#0@@9|) (< |j#0@@9| (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@1 $ly@@126 |self#0@@142| |i#0@@32|)))) (not (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@142|)) |j#0@@9|))))) :qid |MutableMapModelidfy.1566:18| :skolemid |3485| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@142|)) |j#0@@9|))) ))) (=> (< (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@1 $ly@@126 |self#0@@142| |i#0@@32|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@142|)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@142|)) (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@1 $ly@@126 |self#0@@142| |i#0@@32|)))))) (<= |i#0@@32| (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@1 $ly@@126 |self#0@@142| |i#0@@32|))) (and (<= (LitInt 0) (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@1 $ly@@126 |self#0@@142| |i#0@@32|)) (< (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@1 $ly@@126 |self#0@@142| |i#0@@32|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |3486| :pattern ( (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@1 $ly@@126 |self#0@@142| |i#0@@32|)) ))))
(assert (forall ((MutableMapModel._default.simpleIterToNext$V@@2 T@U) ($ly@@127 T@U) (|self#0@@143| T@U) (|i#0@@33| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.simpleIterToNext$V@@2) TyType) (= (type $ly@@127) LayerTypeType)) (= (type |self#0@@143|) DatatypeTypeType)) (and ($Is |self#0@@143| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.simpleIterToNext$V@@2)) (and (<= (LitInt 0) |i#0@@33|) (< |i#0@@33| 18446744073709551616)))) (= (|MutableMapModel.__default.simpleIterToNext#requires| MutableMapModel._default.simpleIterToNext$V@@2 $ly@@127 |self#0@@143| |i#0@@33|)  (and (MutableMapModel.__default.Inv MutableMapModel._default.simpleIterToNext$V@@2 |self#0@@143|) (and (<= (LitInt 0) |i#0@@33|) (<= |i#0@@33| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@143|)))))))) :qid |unknown.0:0| :skolemid |3487| :pattern ( (|MutableMapModel.__default.simpleIterToNext#requires| MutableMapModel._default.simpleIterToNext$V@@2 $ly@@127 |self#0@@143| |i#0@@33|)) )))
(assert  (=> (<= 109 $FunctionContextHeight) (forall ((MutableMapModel._default.simpleIterToNext$V@@3 T@U) ($ly@@128 T@U) (|self#0@@144| T@U) (|i#0@@34| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.simpleIterToNext$V@@3) TyType) (= (type $ly@@128) LayerTypeType)) (= (type |self#0@@144|) DatatypeTypeType)) (or (|MutableMapModel.__default.simpleIterToNext#canCall| MutableMapModel._default.simpleIterToNext$V@@3 |self#0@@144| |i#0@@34|) (and (not (= 109 $FunctionContextHeight)) (and (and ($Is |self#0@@144| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.simpleIterToNext$V@@3)) (and (<= (LitInt 0) |i#0@@34|) (< |i#0@@34| 18446744073709551616))) (and (MutableMapModel.__default.Inv MutableMapModel._default.simpleIterToNext$V@@3 |self#0@@144|) (and (<= (LitInt 0) |i#0@@34|) (<= |i#0@@34| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@144|)))))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@144|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@144|))) (=> (not (= |i#0@@34| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@144|))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@144|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@144|))) (=> (not (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@144|)) |i#0@@34|)))) (|MutableMapModel.__default.simpleIterToNext#canCall| MutableMapModel._default.simpleIterToNext$V@@3 |self#0@@144| (+ |i#0@@34| 1)))))) (= (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@3 ($LS $ly@@128) |self#0@@144| |i#0@@34|) (ite (= |i#0@@34| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@144|)))) |i#0@@34| (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@144|)) |i#0@@34|))) |i#0@@34| (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@3 $ly@@128 |self#0@@144| (+ |i#0@@34| 1))))))) :qid |unknown.0:0| :skolemid |3488| :pattern ( (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@3 ($LS $ly@@128) |self#0@@144| |i#0@@34|)) ))))
(assert  (=> (<= 109 $FunctionContextHeight) (forall ((MutableMapModel._default.simpleIterToNext$V@@4 T@U) ($ly@@129 T@U) (|self#0@@145| T@U) (|i#0@@35| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.simpleIterToNext$V@@4) TyType) (= (type $ly@@129) LayerTypeType)) (= (type |self#0@@145|) DatatypeTypeType)) (or (|MutableMapModel.__default.simpleIterToNext#canCall| MutableMapModel._default.simpleIterToNext$V@@4 (Lit |self#0@@145|) (LitInt |i#0@@35|)) (and (not (= 109 $FunctionContextHeight)) (and (and ($Is |self#0@@145| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.simpleIterToNext$V@@4)) (and (<= (LitInt 0) |i#0@@35|) (< |i#0@@35| 18446744073709551616))) (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.simpleIterToNext$V@@4 (Lit |self#0@@145|))))) (and (<= (LitInt 0) (LitInt |i#0@@35|)) (<= (LitInt |i#0@@35|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@145|))))))))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@145|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@145|))))) (=> (not (= (LitInt |i#0@@35|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@145|)))))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@145|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@145|))))) (=> (not (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@145|))))) (LitInt |i#0@@35|))))) (|MutableMapModel.__default.simpleIterToNext#canCall| MutableMapModel._default.simpleIterToNext$V@@4 (Lit |self#0@@145|) (LitInt (+ |i#0@@35| 1))))))) (= (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@4 ($LS $ly@@129) (Lit |self#0@@145|) (LitInt |i#0@@35|)) (ite (= (LitInt |i#0@@35|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@145|))))))) |i#0@@35| (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@145|))))) (LitInt |i#0@@35|)))) |i#0@@35| (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@4 ($LS $ly@@129) (Lit |self#0@@145|) (LitInt (+ |i#0@@35| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |3489| :pattern ( (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.simpleIterToNext$V@@4 ($LS $ly@@129) (Lit |self#0@@145|) (LitInt |i#0@@35|))) ))))
(assert (forall ((arg0@@297 T@U) (arg1@@147 T@U) (arg2@@90 T@U) ) (! (= (type (MutableMapModel.__default.IterStart arg0@@297 arg1@@147 arg2@@90)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.IterStart| :pattern ( (MutableMapModel.__default.IterStart arg0@@297 arg1@@147 arg2@@90)) )))
(assert (forall ((MutableMapModel._default.IterStart$V T@U) ($ly@@130 T@U) (|self#0@@146| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.IterStart$V) TyType) (= (type $ly@@130) LayerTypeType)) (= (type |self#0@@146|) DatatypeTypeType)) (= (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V ($LS $ly@@130) |self#0@@146|) (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V $ly@@130 |self#0@@146|))) :qid |unknown.0:0| :skolemid |3626| :pattern ( (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V ($LS $ly@@130) |self#0@@146|)) )))
(assert (forall ((MutableMapModel._default.IterStart$V@@0 T@U) ($ly@@131 T@U) (|self#0@@147| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.IterStart$V@@0) TyType) (= (type $ly@@131) LayerTypeType)) (= (type |self#0@@147|) DatatypeTypeType)) (= (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V@@0 $ly@@131 |self#0@@147|) (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V@@0 $LZ |self#0@@147|))) :qid |unknown.0:0| :skolemid |3627| :pattern ( (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V@@0 (AsFuelBottom $ly@@131) |self#0@@147|)) )))
(assert  (=> (<= 111 $FunctionContextHeight) (forall ((MutableMapModel._default.IterStart$V@@1 T@U) ($ly@@132 T@U) (|self#0@@148| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.IterStart$V@@1) TyType) (= (type $ly@@132) LayerTypeType)) (= (type |self#0@@148|) DatatypeTypeType)) (or (|MutableMapModel.__default.IterStart#canCall| MutableMapModel._default.IterStart$V@@1 |self#0@@148|) (and (not (= 111 $FunctionContextHeight)) (and ($Is |self#0@@148| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.IterStart$V@@1)) (MutableMapModel.__default.Inv MutableMapModel._default.IterStart$V@@1 |self#0@@148|))))) (and (and (MutableMapModel.__default.WFIter MutableMapModel._default.IterStart$V@@1 |self#0@@148| (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V@@1 $ly@@132 |self#0@@148|)) (|Set#Equal| (MutableMapModel.Iterator.s (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V@@1 $ly@@132 |self#0@@148|)) (|Set#Empty| BoxType))) ($Is (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V@@1 $ly@@132 |self#0@@148|) (Tclass.MutableMapModel.Iterator MutableMapModel._default.IterStart$V@@1)))) :qid |unknown.0:0| :skolemid |3628| :pattern ( (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V@@1 $ly@@132 |self#0@@148|)) ))))
(assert (forall ((MutableMapModel._default.IterStart$V@@2 T@U) ($ly@@133 T@U) (|self#0@@149| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.IterStart$V@@2) TyType) (= (type $ly@@133) LayerTypeType)) (= (type |self#0@@149|) DatatypeTypeType)) ($Is |self#0@@149| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.IterStart$V@@2))) (= (|MutableMapModel.__default.IterStart#requires| MutableMapModel._default.IterStart$V@@2 $ly@@133 |self#0@@149|) (MutableMapModel.__default.Inv MutableMapModel._default.IterStart$V@@2 |self#0@@149|))) :qid |unknown.0:0| :skolemid |3629| :pattern ( (|MutableMapModel.__default.IterStart#requires| MutableMapModel._default.IterStart$V@@2 $ly@@133 |self#0@@149|)) )))
(assert  (=> (<= 111 $FunctionContextHeight) (forall ((MutableMapModel._default.IterStart$V@@3 T@U) ($ly@@134 T@U) (|self#0@@150| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.IterStart$V@@3) TyType) (= (type $ly@@134) LayerTypeType)) (= (type |self#0@@150|) DatatypeTypeType)) (or (|MutableMapModel.__default.IterStart#canCall| MutableMapModel._default.IterStart$V@@3 |self#0@@150|) (and (not (= 111 $FunctionContextHeight)) (and ($Is |self#0@@150| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.IterStart$V@@3)) (MutableMapModel.__default.Inv MutableMapModel._default.IterStart$V@@3 |self#0@@150|))))) (and (and (|MutableMapModel.__default.iterToNext#canCall| MutableMapModel._default.IterStart$V@@3 |self#0@@150| (LitInt 0)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@150|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@150|)))) (= (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V@@3 ($LS $ly@@134) |self#0@@150|) (let ((|next#0| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.iterToNext MutableMapModel._default.IterStart$V@@3 ($LS $LZ) |self#0@@150| (LitInt 0)))))) (let ((|i#0@@36| (U_2_int ($Unbox intType (_System.Tuple2._0 (MutableMapModel.__default.iterToNext MutableMapModel._default.IterStart$V@@3 ($LS $LZ) |self#0@@150| (LitInt 0))))))) (let ((|it'#0| (|#MutableMapModel.Iterator.Iterator| |i#0@@36| (Lit (|Set#Empty| BoxType)) (|ORD#FromNat| (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@150|))) |i#0@@36|)) |next#0|))) |it'#0|)))))) :qid |unknown.0:0| :skolemid |3630| :pattern ( (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V@@3 ($LS $ly@@134) |self#0@@150|)) ))))
(assert  (=> (<= 111 $FunctionContextHeight) (forall ((MutableMapModel._default.IterStart$V@@4 T@U) ($ly@@135 T@U) (|self#0@@151| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.IterStart$V@@4) TyType) (= (type $ly@@135) LayerTypeType)) (= (type |self#0@@151|) DatatypeTypeType)) (or (|MutableMapModel.__default.IterStart#canCall| MutableMapModel._default.IterStart$V@@4 (Lit |self#0@@151|)) (and (not (= 111 $FunctionContextHeight)) (and ($Is |self#0@@151| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.IterStart$V@@4)) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.IterStart$V@@4 (Lit |self#0@@151|))))))))) (and (and (|MutableMapModel.__default.iterToNext#canCall| MutableMapModel._default.IterStart$V@@4 (Lit |self#0@@151|) (LitInt 0)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@151|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@151|)))))) (= (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V@@4 ($LS $ly@@135) (Lit |self#0@@151|)) (let ((|next#1| ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (MutableMapModel.__default.iterToNext MutableMapModel._default.IterStart$V@@4 ($LS $LZ) (Lit |self#0@@151|) (LitInt 0))))))) (let ((|i#1| (U_2_int ($Unbox intType (_System.Tuple2._0 (Lit (MutableMapModel.__default.iterToNext MutableMapModel._default.IterStart$V@@4 ($LS $LZ) (Lit |self#0@@151|) (LitInt 0)))))))) (let ((|it'#1| (|#MutableMapModel.Iterator.Iterator| |i#1| (Lit (|Set#Empty| BoxType)) (|ORD#FromNat| (- (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@151|)))))) |i#1|)) |next#1|))) |it'#1|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3631| :pattern ( (MutableMapModel.__default.IterStart MutableMapModel._default.IterStart$V@@4 ($LS $ly@@135) (Lit |self#0@@151|))) ))))
(assert (forall ((arg0@@298 T@U) (arg1@@148 T@U) (arg2@@91 T@U) ) (! (= (type (MutableMapModel.__default.SimpleIterStart arg0@@298 arg1@@148 arg2@@91)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.SimpleIterStart| :pattern ( (MutableMapModel.__default.SimpleIterStart arg0@@298 arg1@@148 arg2@@91)) )))
(assert (forall ((MutableMapModel._default.SimpleIterStart$V T@U) ($ly@@136 T@U) (|self#0@@152| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.SimpleIterStart$V) TyType) (= (type $ly@@136) LayerTypeType)) (= (type |self#0@@152|) DatatypeTypeType)) (= (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V ($LS $ly@@136) |self#0@@152|) (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V $ly@@136 |self#0@@152|))) :qid |unknown.0:0| :skolemid |3656| :pattern ( (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V ($LS $ly@@136) |self#0@@152|)) )))
(assert (forall ((MutableMapModel._default.SimpleIterStart$V@@0 T@U) ($ly@@137 T@U) (|self#0@@153| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.SimpleIterStart$V@@0) TyType) (= (type $ly@@137) LayerTypeType)) (= (type |self#0@@153|) DatatypeTypeType)) (= (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V@@0 $ly@@137 |self#0@@153|) (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V@@0 $LZ |self#0@@153|))) :qid |unknown.0:0| :skolemid |3657| :pattern ( (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V@@0 (AsFuelBottom $ly@@137) |self#0@@153|)) )))
(assert  (=> (<= 112 $FunctionContextHeight) (forall ((MutableMapModel._default.SimpleIterStart$V@@1 T@U) ($ly@@138 T@U) (|self#0@@154| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SimpleIterStart$V@@1) TyType) (= (type $ly@@138) LayerTypeType)) (= (type |self#0@@154|) DatatypeTypeType)) (or (|MutableMapModel.__default.SimpleIterStart#canCall| MutableMapModel._default.SimpleIterStart$V@@1 |self#0@@154|) (and (not (= 112 $FunctionContextHeight)) (and ($Is |self#0@@154| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterStart$V@@1)) (MutableMapModel.__default.Inv MutableMapModel._default.SimpleIterStart$V@@1 |self#0@@154|))))) (and (and (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.SimpleIterStart$V@@1 |self#0@@154| (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V@@1 $ly@@138 |self#0@@154|)) (|Set#Equal| (MutableMapModel.SimpleIterator.s (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V@@1 $ly@@138 |self#0@@154|)) (|Set#Empty| BoxType))) ($Is (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V@@1 $ly@@138 |self#0@@154|) Tclass.MutableMapModel.SimpleIterator))) :qid |unknown.0:0| :skolemid |3658| :pattern ( (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V@@1 $ly@@138 |self#0@@154|)) ))))
(assert (forall ((MutableMapModel._default.SimpleIterStart$V@@2 T@U) ($ly@@139 T@U) (|self#0@@155| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SimpleIterStart$V@@2) TyType) (= (type $ly@@139) LayerTypeType)) (= (type |self#0@@155|) DatatypeTypeType)) ($Is |self#0@@155| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterStart$V@@2))) (= (|MutableMapModel.__default.SimpleIterStart#requires| MutableMapModel._default.SimpleIterStart$V@@2 $ly@@139 |self#0@@155|) (MutableMapModel.__default.Inv MutableMapModel._default.SimpleIterStart$V@@2 |self#0@@155|))) :qid |unknown.0:0| :skolemid |3659| :pattern ( (|MutableMapModel.__default.SimpleIterStart#requires| MutableMapModel._default.SimpleIterStart$V@@2 $ly@@139 |self#0@@155|)) )))
(assert  (=> (<= 112 $FunctionContextHeight) (forall ((MutableMapModel._default.SimpleIterStart$V@@3 T@U) ($ly@@140 T@U) (|self#0@@156| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SimpleIterStart$V@@3) TyType) (= (type $ly@@140) LayerTypeType)) (= (type |self#0@@156|) DatatypeTypeType)) (or (|MutableMapModel.__default.SimpleIterStart#canCall| MutableMapModel._default.SimpleIterStart$V@@3 |self#0@@156|) (and (not (= 112 $FunctionContextHeight)) (and ($Is |self#0@@156| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterStart$V@@3)) (MutableMapModel.__default.Inv MutableMapModel._default.SimpleIterStart$V@@3 |self#0@@156|))))) (and (and (|MutableMapModel.__default.simpleIterToNext#canCall| MutableMapModel._default.SimpleIterStart$V@@3 |self#0@@156| (LitInt 0)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@156|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@156|)))) (= (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V@@3 ($LS $ly@@140) |self#0@@156|) (let ((|i#0@@37| (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.SimpleIterStart$V@@3 ($LS $LZ) |self#0@@156| (LitInt 0)))) (let ((|it'#0@@0| (|#MutableMapModel.SimpleIterator.SimpleIterator| |i#0@@37| (Lit (|Set#Empty| BoxType)) (|ORD#FromNat| (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@156|))) |i#0@@37|))))) |it'#0@@0|))))) :qid |unknown.0:0| :skolemid |3660| :pattern ( (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V@@3 ($LS $ly@@140) |self#0@@156|)) ))))
(assert  (=> (<= 112 $FunctionContextHeight) (forall ((MutableMapModel._default.SimpleIterStart$V@@4 T@U) ($ly@@141 T@U) (|self#0@@157| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SimpleIterStart$V@@4) TyType) (= (type $ly@@141) LayerTypeType)) (= (type |self#0@@157|) DatatypeTypeType)) (or (|MutableMapModel.__default.SimpleIterStart#canCall| MutableMapModel._default.SimpleIterStart$V@@4 (Lit |self#0@@157|)) (and (not (= 112 $FunctionContextHeight)) (and ($Is |self#0@@157| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterStart$V@@4)) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.SimpleIterStart$V@@4 (Lit |self#0@@157|))))))))) (and (and (|MutableMapModel.__default.simpleIterToNext#canCall| MutableMapModel._default.SimpleIterStart$V@@4 (Lit |self#0@@157|) (LitInt 0)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@157|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@157|)))))) (= (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V@@4 ($LS $ly@@141) (Lit |self#0@@157|)) (let ((|i#1@@0| (LitInt (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.SimpleIterStart$V@@4 ($LS $LZ) (Lit |self#0@@157|) (LitInt 0))))) (let ((|it'#1@@0| (|#MutableMapModel.SimpleIterator.SimpleIterator| |i#1@@0| (Lit (|Set#Empty| BoxType)) (|ORD#FromNat| (- (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@157|)))))) |i#1@@0|))))) |it'#1@@0|))))) :qid |unknown.0:0| :weight 3 :skolemid |3661| :pattern ( (MutableMapModel.__default.SimpleIterStart MutableMapModel._default.SimpleIterStart$V@@4 ($LS $ly@@141) (Lit |self#0@@157|))) ))))
(assert (forall ((arg0@@299 T@U) (arg1@@149 T@U) (arg2@@92 T@U) (arg3@@51 T@U) ) (! (= (type (MutableMapModel.__default.IterInc arg0@@299 arg1@@149 arg2@@92 arg3@@51)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.IterInc| :pattern ( (MutableMapModel.__default.IterInc arg0@@299 arg1@@149 arg2@@92 arg3@@51)) )))
(assert (forall ((MutableMapModel._default.IterInc$V T@U) ($ly@@142 T@U) (|self#0@@158| T@U) (|it#0@@15| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.IterInc$V) TyType) (= (type $ly@@142) LayerTypeType)) (= (type |self#0@@158|) DatatypeTypeType)) (= (type |it#0@@15|) DatatypeTypeType)) (= (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V ($LS $ly@@142) |self#0@@158| |it#0@@15|) (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V $ly@@142 |self#0@@158| |it#0@@15|))) :qid |unknown.0:0| :skolemid |3686| :pattern ( (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V ($LS $ly@@142) |self#0@@158| |it#0@@15|)) )))
(assert (forall ((MutableMapModel._default.IterInc$V@@0 T@U) ($ly@@143 T@U) (|self#0@@159| T@U) (|it#0@@16| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.IterInc$V@@0) TyType) (= (type $ly@@143) LayerTypeType)) (= (type |self#0@@159|) DatatypeTypeType)) (= (type |it#0@@16|) DatatypeTypeType)) (= (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@0 $ly@@143 |self#0@@159| |it#0@@16|) (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@0 $LZ |self#0@@159| |it#0@@16|))) :qid |unknown.0:0| :skolemid |3687| :pattern ( (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@0 (AsFuelBottom $ly@@143) |self#0@@159| |it#0@@16|)) )))
(assert  (=> (<= 113 $FunctionContextHeight) (forall ((MutableMapModel._default.IterInc$V@@1 T@U) ($ly@@144 T@U) (|self#0@@160| T@U) (|it#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.IterInc$V@@1) TyType) (= (type $ly@@144) LayerTypeType)) (= (type |self#0@@160|) DatatypeTypeType)) (= (type |it#0@@17|) DatatypeTypeType)) (or (|MutableMapModel.__default.IterInc#canCall| MutableMapModel._default.IterInc$V@@1 |self#0@@160| |it#0@@17|) (and (not (= 113 $FunctionContextHeight)) (and (and ($Is |self#0@@160| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.IterInc$V@@1)) ($Is |it#0@@17| (Tclass.MutableMapModel.Iterator MutableMapModel._default.IterInc$V@@1))) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.IterInc$V@@1 |self#0@@160|) (MutableMapModel.__default.WFIter MutableMapModel._default.IterInc$V@@1 |self#0@@160| |it#0@@17|)) (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.Iterator.next |it#0@@17|))))))) (and (and (and (and (MutableMapModel.__default.WFIter MutableMapModel._default.IterInc$V@@1 |self#0@@160| (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@1 $ly@@144 |self#0@@160| |it#0@@17|)) (|Set#Equal| (MutableMapModel.Iterator.s (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@1 $ly@@144 |self#0@@160| |it#0@@17|)) (|Set#Union| (MutableMapModel.Iterator.s |it#0@@17|) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.Iterator.next |it#0@@17|)))))))) (=> (MutableMapModel.IteratorOutput.Done_q (MutableMapModel.Iterator.next (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@1 $ly@@144 |self#0@@160| |it#0@@17|))) (|Set#Equal| (MutableMapModel.Iterator.s (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@1 $ly@@144 |self#0@@160| |it#0@@17|)) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@160|))))) (|ORD#Less| (MutableMapModel.Iterator.decreaser (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@1 $ly@@144 |self#0@@160| |it#0@@17|)) (MutableMapModel.Iterator.decreaser |it#0@@17|))) ($Is (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@1 $ly@@144 |self#0@@160| |it#0@@17|) (Tclass.MutableMapModel.Iterator MutableMapModel._default.IterInc$V@@1)))) :qid |unknown.0:0| :skolemid |3688| :pattern ( (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@1 $ly@@144 |self#0@@160| |it#0@@17|)) ))))
(assert (forall ((MutableMapModel._default.IterInc$V@@2 T@U) ($ly@@145 T@U) (|self#0@@161| T@U) (|it#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.IterInc$V@@2) TyType) (= (type $ly@@145) LayerTypeType)) (= (type |self#0@@161|) DatatypeTypeType)) (= (type |it#0@@18|) DatatypeTypeType)) (and ($Is |self#0@@161| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.IterInc$V@@2)) ($Is |it#0@@18| (Tclass.MutableMapModel.Iterator MutableMapModel._default.IterInc$V@@2)))) (= (|MutableMapModel.__default.IterInc#requires| MutableMapModel._default.IterInc$V@@2 $ly@@145 |self#0@@161| |it#0@@18|)  (and (and (MutableMapModel.__default.Inv MutableMapModel._default.IterInc$V@@2 |self#0@@161|) (MutableMapModel.__default.WFIter MutableMapModel._default.IterInc$V@@2 |self#0@@161| |it#0@@18|)) (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.Iterator.next |it#0@@18|))))) :qid |unknown.0:0| :skolemid |3689| :pattern ( (|MutableMapModel.__default.IterInc#requires| MutableMapModel._default.IterInc$V@@2 $ly@@145 |self#0@@161| |it#0@@18|)) )))
(assert  (=> (<= 113 $FunctionContextHeight) (forall ((MutableMapModel._default.IterInc$V@@3 T@U) ($ly@@146 T@U) (|self#0@@162| T@U) (|it#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.IterInc$V@@3) TyType) (= (type $ly@@146) LayerTypeType)) (= (type |self#0@@162|) DatatypeTypeType)) (= (type |it#0@@19|) DatatypeTypeType)) (or (|MutableMapModel.__default.IterInc#canCall| MutableMapModel._default.IterInc$V@@3 |self#0@@162| |it#0@@19|) (and (not (= 113 $FunctionContextHeight)) (and (and ($Is |self#0@@162| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.IterInc$V@@3)) ($Is |it#0@@19| (Tclass.MutableMapModel.Iterator MutableMapModel._default.IterInc$V@@3))) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.IterInc$V@@3 |self#0@@162|) (MutableMapModel.__default.WFIter MutableMapModel._default.IterInc$V@@3 |self#0@@162| |it#0@@19|)) (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.Iterator.next |it#0@@19|))))))) (and (and (and (MutableMapModel.Iterator.Iterator_q |it#0@@19|) (|MutableMapModel.__default.iterToNext#canCall| MutableMapModel._default.IterInc$V@@3 |self#0@@162| (+ (MutableMapModel.Iterator.i |it#0@@19|) 1))) (and (and (MutableMapModel.Iterator.Iterator_q |it#0@@19|) (MutableMapModel.Iterator.Iterator_q |it#0@@19|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@162|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@162|))))) (= (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@3 ($LS $ly@@146) |self#0@@162| |it#0@@19|) (let ((|next#0@@0| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.iterToNext MutableMapModel._default.IterInc$V@@3 ($LS $LZ) |self#0@@162| (+ (MutableMapModel.Iterator.i |it#0@@19|) 1)))))) (let ((|i#0@@38| (U_2_int ($Unbox intType (_System.Tuple2._0 (MutableMapModel.__default.iterToNext MutableMapModel._default.IterInc$V@@3 ($LS $LZ) |self#0@@162| (+ (MutableMapModel.Iterator.i |it#0@@19|) 1))))))) (let ((|it'#0@@1| (|#MutableMapModel.Iterator.Iterator| |i#0@@38| (|Set#Union| (MutableMapModel.Iterator.s |it#0@@19|) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.Iterator.next |it#0@@19|)))))) (|ORD#FromNat| (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@162|))) |i#0@@38|)) |next#0@@0|))) |it'#0@@1|)))))) :qid |unknown.0:0| :skolemid |3690| :pattern ( (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@3 ($LS $ly@@146) |self#0@@162| |it#0@@19|)) ))))
(assert  (=> (<= 113 $FunctionContextHeight) (forall ((MutableMapModel._default.IterInc$V@@4 T@U) ($ly@@147 T@U) (|self#0@@163| T@U) (|it#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.IterInc$V@@4) TyType) (= (type $ly@@147) LayerTypeType)) (= (type |self#0@@163|) DatatypeTypeType)) (= (type |it#0@@20|) DatatypeTypeType)) (or (|MutableMapModel.__default.IterInc#canCall| MutableMapModel._default.IterInc$V@@4 (Lit |self#0@@163|) (Lit |it#0@@20|)) (and (not (= 113 $FunctionContextHeight)) (and (and ($Is |self#0@@163| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.IterInc$V@@4)) ($Is |it#0@@20| (Tclass.MutableMapModel.Iterator MutableMapModel._default.IterInc$V@@4))) (and (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.IterInc$V@@4 (Lit |self#0@@163|))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.WFIter MutableMapModel._default.IterInc$V@@4 (Lit |self#0@@163|) (Lit |it#0@@20|)))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.IteratorOutput.Next_q (Lit (MutableMapModel.Iterator.next (Lit |it#0@@20|)))))))))))) (and (and (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@20|)) (|MutableMapModel.__default.iterToNext#canCall| MutableMapModel._default.IterInc$V@@4 (Lit |self#0@@163|) (LitInt (+ (MutableMapModel.Iterator.i (Lit |it#0@@20|)) 1)))) (and (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@20|)) (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@20|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@163|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@163|))))))) (= (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@4 ($LS $ly@@147) (Lit |self#0@@163|) (Lit |it#0@@20|)) (let ((|next#1@@0| ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (MutableMapModel.__default.iterToNext MutableMapModel._default.IterInc$V@@4 ($LS $LZ) (Lit |self#0@@163|) (LitInt (+ (MutableMapModel.Iterator.i (Lit |it#0@@20|)) 1)))))))) (let ((|i#1@@1| (U_2_int ($Unbox intType (_System.Tuple2._0 (Lit (MutableMapModel.__default.iterToNext MutableMapModel._default.IterInc$V@@4 ($LS $LZ) (Lit |self#0@@163|) (LitInt (+ (MutableMapModel.Iterator.i (Lit |it#0@@20|)) 1))))))))) (let ((|it'#1@@1| (|#MutableMapModel.Iterator.Iterator| |i#1@@1| (|Set#Union| (MutableMapModel.Iterator.s (Lit |it#0@@20|)) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (LitInt (MutableMapModel.IteratorOutput.key (Lit (MutableMapModel.Iterator.next (Lit |it#0@@20|))))))))) (|ORD#FromNat| (- (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@163|)))))) |i#1@@1|)) |next#1@@0|))) |it'#1@@1|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3691| :pattern ( (MutableMapModel.__default.IterInc MutableMapModel._default.IterInc$V@@4 ($LS $ly@@147) (Lit |self#0@@163|) (Lit |it#0@@20|))) ))))
(assert (forall ((arg0@@300 T@U) (arg1@@150 T@U) (arg2@@93 T@U) (arg3@@52 T@U) ) (! (= (type (MutableMapModel.__default.SimpleIterInc arg0@@300 arg1@@150 arg2@@93 arg3@@52)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.SimpleIterInc| :pattern ( (MutableMapModel.__default.SimpleIterInc arg0@@300 arg1@@150 arg2@@93 arg3@@52)) )))
(assert (forall ((MutableMapModel._default.SimpleIterInc$V T@U) ($ly@@148 T@U) (|self#0@@164| T@U) (|it#0@@21| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SimpleIterInc$V) TyType) (= (type $ly@@148) LayerTypeType)) (= (type |self#0@@164|) DatatypeTypeType)) (= (type |it#0@@21|) DatatypeTypeType)) (= (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V ($LS $ly@@148) |self#0@@164| |it#0@@21|) (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V $ly@@148 |self#0@@164| |it#0@@21|))) :qid |unknown.0:0| :skolemid |3723| :pattern ( (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V ($LS $ly@@148) |self#0@@164| |it#0@@21|)) )))
(assert (forall ((MutableMapModel._default.SimpleIterInc$V@@0 T@U) ($ly@@149 T@U) (|self#0@@165| T@U) (|it#0@@22| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.SimpleIterInc$V@@0) TyType) (= (type $ly@@149) LayerTypeType)) (= (type |self#0@@165|) DatatypeTypeType)) (= (type |it#0@@22|) DatatypeTypeType)) (= (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@0 $ly@@149 |self#0@@165| |it#0@@22|) (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@0 $LZ |self#0@@165| |it#0@@22|))) :qid |unknown.0:0| :skolemid |3724| :pattern ( (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@0 (AsFuelBottom $ly@@149) |self#0@@165| |it#0@@22|)) )))
(assert  (=> (<= 114 $FunctionContextHeight) (forall ((MutableMapModel._default.SimpleIterInc$V@@1 T@U) ($ly@@150 T@U) (|self#0@@166| T@U) (|it#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.SimpleIterInc$V@@1) TyType) (= (type $ly@@150) LayerTypeType)) (= (type |self#0@@166|) DatatypeTypeType)) (= (type |it#0@@23|) DatatypeTypeType)) (or (|MutableMapModel.__default.SimpleIterInc#canCall| MutableMapModel._default.SimpleIterInc$V@@1 |self#0@@166| |it#0@@23|) (and (not (= 114 $FunctionContextHeight)) (and (and ($Is |self#0@@166| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterInc$V@@1)) ($Is |it#0@@23| Tclass.MutableMapModel.SimpleIterator)) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.SimpleIterInc$V@@1 |self#0@@166|) (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.SimpleIterInc$V@@1 |self#0@@166| |it#0@@23|)) (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterInc$V@@1 |self#0@@166| |it#0@@23|))))))) (and (and (and (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.SimpleIterInc$V@@1 |self#0@@166| (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@1 $ly@@150 |self#0@@166| |it#0@@23|)) (|Set#Equal| (MutableMapModel.SimpleIterator.s (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@1 $ly@@150 |self#0@@166| |it#0@@23|)) (|Set#Union| (MutableMapModel.SimpleIterator.s |it#0@@23|) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterInc$V@@1 |self#0@@166| |it#0@@23|)))))))) (|ORD#Less| (MutableMapModel.SimpleIterator.decreaser (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@1 $ly@@150 |self#0@@166| |it#0@@23|)) (MutableMapModel.SimpleIterator.decreaser |it#0@@23|))) ($Is (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@1 $ly@@150 |self#0@@166| |it#0@@23|) Tclass.MutableMapModel.SimpleIterator))) :qid |unknown.0:0| :skolemid |3725| :pattern ( (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@1 $ly@@150 |self#0@@166| |it#0@@23|)) ))))
(assert (forall ((MutableMapModel._default.SimpleIterInc$V@@2 T@U) ($ly@@151 T@U) (|self#0@@167| T@U) (|it#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.SimpleIterInc$V@@2) TyType) (= (type $ly@@151) LayerTypeType)) (= (type |self#0@@167|) DatatypeTypeType)) (= (type |it#0@@24|) DatatypeTypeType)) (and ($Is |self#0@@167| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterInc$V@@2)) ($Is |it#0@@24| Tclass.MutableMapModel.SimpleIterator))) (= (|MutableMapModel.__default.SimpleIterInc#requires| MutableMapModel._default.SimpleIterInc$V@@2 $ly@@151 |self#0@@167| |it#0@@24|)  (and (and (MutableMapModel.__default.Inv MutableMapModel._default.SimpleIterInc$V@@2 |self#0@@167|) (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.SimpleIterInc$V@@2 |self#0@@167| |it#0@@24|)) (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterInc$V@@2 |self#0@@167| |it#0@@24|))))) :qid |unknown.0:0| :skolemid |3726| :pattern ( (|MutableMapModel.__default.SimpleIterInc#requires| MutableMapModel._default.SimpleIterInc$V@@2 $ly@@151 |self#0@@167| |it#0@@24|)) )))
(assert  (=> (<= 114 $FunctionContextHeight) (forall ((MutableMapModel._default.SimpleIterInc$V@@3 T@U) ($ly@@152 T@U) (|self#0@@168| T@U) (|it#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.SimpleIterInc$V@@3) TyType) (= (type $ly@@152) LayerTypeType)) (= (type |self#0@@168|) DatatypeTypeType)) (= (type |it#0@@25|) DatatypeTypeType)) (or (|MutableMapModel.__default.SimpleIterInc#canCall| MutableMapModel._default.SimpleIterInc$V@@3 |self#0@@168| |it#0@@25|) (and (not (= 114 $FunctionContextHeight)) (and (and ($Is |self#0@@168| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterInc$V@@3)) ($Is |it#0@@25| Tclass.MutableMapModel.SimpleIterator)) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.SimpleIterInc$V@@3 |self#0@@168|) (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.SimpleIterInc$V@@3 |self#0@@168| |it#0@@25|)) (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterInc$V@@3 |self#0@@168| |it#0@@25|))))))) (and (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@25|) (|MutableMapModel.__default.simpleIterToNext#canCall| MutableMapModel._default.SimpleIterInc$V@@3 |self#0@@168| (+ (MutableMapModel.SimpleIterator.i |it#0@@25|) 1))) (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@25|) (|MutableMapModel.__default.SimpleIterOutput#canCall| MutableMapModel._default.SimpleIterInc$V@@3 |self#0@@168| |it#0@@25|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@168|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@168|))))) (= (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@3 ($LS $ly@@152) |self#0@@168| |it#0@@25|) (let ((|i#0@@39| (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.SimpleIterInc$V@@3 ($LS $LZ) |self#0@@168| (+ (MutableMapModel.SimpleIterator.i |it#0@@25|) 1)))) (let ((|it'#0@@2| (|#MutableMapModel.SimpleIterator.SimpleIterator| |i#0@@39| (|Set#Union| (MutableMapModel.SimpleIterator.s |it#0@@25|) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterInc$V@@3 |self#0@@168| |it#0@@25|)))))) (|ORD#FromNat| (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@168|))) |i#0@@39|))))) |it'#0@@2|))))) :qid |unknown.0:0| :skolemid |3727| :pattern ( (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@3 ($LS $ly@@152) |self#0@@168| |it#0@@25|)) ))))
(assert  (=> (<= 114 $FunctionContextHeight) (forall ((MutableMapModel._default.SimpleIterInc$V@@4 T@U) ($ly@@153 T@U) (|self#0@@169| T@U) (|it#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.SimpleIterInc$V@@4) TyType) (= (type $ly@@153) LayerTypeType)) (= (type |self#0@@169|) DatatypeTypeType)) (= (type |it#0@@26|) DatatypeTypeType)) (or (|MutableMapModel.__default.SimpleIterInc#canCall| MutableMapModel._default.SimpleIterInc$V@@4 (Lit |self#0@@169|) (Lit |it#0@@26|)) (and (not (= 114 $FunctionContextHeight)) (and (and ($Is |self#0@@169| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.SimpleIterInc$V@@4)) ($Is |it#0@@26| Tclass.MutableMapModel.SimpleIterator)) (and (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.SimpleIterInc$V@@4 (Lit |self#0@@169|))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.SimpleIterInc$V@@4 (Lit |self#0@@169|) (Lit |it#0@@26|)))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.IteratorOutput.Next_q (Lit (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterInc$V@@4 (Lit |self#0@@169|) (Lit |it#0@@26|)))))))))))) (and (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@26|)) (|MutableMapModel.__default.simpleIterToNext#canCall| MutableMapModel._default.SimpleIterInc$V@@4 (Lit |self#0@@169|) (LitInt (+ (MutableMapModel.SimpleIterator.i (Lit |it#0@@26|)) 1)))) (and (and (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@26|)) (|MutableMapModel.__default.SimpleIterOutput#canCall| MutableMapModel._default.SimpleIterInc$V@@4 (Lit |self#0@@169|) (Lit |it#0@@26|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@169|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@169|))))))) (= (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@4 ($LS $ly@@153) (Lit |self#0@@169|) (Lit |it#0@@26|)) (let ((|i#1@@2| (LitInt (MutableMapModel.__default.simpleIterToNext MutableMapModel._default.SimpleIterInc$V@@4 ($LS $LZ) (Lit |self#0@@169|) (LitInt (+ (MutableMapModel.SimpleIterator.i (Lit |it#0@@26|)) 1)))))) (let ((|it'#1@@2| (|#MutableMapModel.SimpleIterator.SimpleIterator| |i#1@@2| (|Set#Union| (MutableMapModel.SimpleIterator.s (Lit |it#0@@26|)) (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (LitInt (MutableMapModel.IteratorOutput.key (Lit (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.SimpleIterInc$V@@4 (Lit |self#0@@169|) (Lit |it#0@@26|))))))))) (|ORD#FromNat| (- (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@169|)))))) |i#1@@2|))))) |it'#1@@2|))))) :qid |unknown.0:0| :weight 3 :skolemid |3728| :pattern ( (MutableMapModel.__default.SimpleIterInc MutableMapModel._default.SimpleIterInc$V@@4 ($LS $ly@@153) (Lit |self#0@@169|) (Lit |it#0@@26|))) ))))
(assert (forall ((MutableMapModel._default.MaxKeyIterate$V T@U) ($ly@@154 T@U) (|self#0@@170| T@U) (|it#0@@27| T@U) (|m#0| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.MaxKeyIterate$V) TyType) (= (type $ly@@154) LayerTypeType)) (= (type |self#0@@170|) DatatypeTypeType)) (= (type |it#0@@27|) DatatypeTypeType)) (= (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V ($LS $ly@@154) |self#0@@170| |it#0@@27| |m#0|) (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V $ly@@154 |self#0@@170| |it#0@@27| |m#0|))) :qid |unknown.0:0| :skolemid |3825| :pattern ( (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V ($LS $ly@@154) |self#0@@170| |it#0@@27| |m#0|)) )))
(assert (forall ((MutableMapModel._default.MaxKeyIterate$V@@0 T@U) ($ly@@155 T@U) (|self#0@@171| T@U) (|it#0@@28| T@U) (|m#0@@0| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.MaxKeyIterate$V@@0) TyType) (= (type $ly@@155) LayerTypeType)) (= (type |self#0@@171|) DatatypeTypeType)) (= (type |it#0@@28|) DatatypeTypeType)) (= (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@0 $ly@@155 |self#0@@171| |it#0@@28| |m#0@@0|) (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@0 $LZ |self#0@@171| |it#0@@28| |m#0@@0|))) :qid |unknown.0:0| :skolemid |3826| :pattern ( (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@0 (AsFuelBottom $ly@@155) |self#0@@171| |it#0@@28| |m#0@@0|)) )))
(assert  (=> (<= 116 $FunctionContextHeight) (forall ((MutableMapModel._default.MaxKeyIterate$V@@1 T@U) ($ly@@156 T@U) (|self#0@@172| T@U) (|it#0@@29| T@U) (|m#0@@1| Int) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.MaxKeyIterate$V@@1) TyType) (= (type $ly@@156) LayerTypeType)) (= (type |self#0@@172|) DatatypeTypeType)) (= (type |it#0@@29|) DatatypeTypeType)) (or (|MutableMapModel.__default.MaxKeyIterate#canCall| MutableMapModel._default.MaxKeyIterate$V@@1 |self#0@@172| |it#0@@29| |m#0@@1|) (and (not (= 116 $FunctionContextHeight)) (and (and (and ($Is |self#0@@172| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.MaxKeyIterate$V@@1)) ($Is |it#0@@29| (Tclass.MutableMapModel.Iterator MutableMapModel._default.MaxKeyIterate$V@@1))) (and (<= (LitInt 0) |m#0@@1|) (< |m#0@@1| 18446744073709551616))) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.MaxKeyIterate$V@@1 |self#0@@172|) (MutableMapModel.__default.WFIter MutableMapModel._default.MaxKeyIterate$V@@1 |self#0@@172| |it#0@@29|)) (forall ((|key#0@@90| Int) ) (!  (=> (and (and (<= (LitInt 0) |key#0@@90|) (< |key#0@@90| 18446744073709551616)) (U_2_bool (MapType0Select (MutableMapModel.Iterator.s |it#0@@29|) ($Box (int_2_U |key#0@@90|))))) (<= |key#0@@90| |m#0@@1|)) :qid |MutableMapModelidfy.1692:19| :skolemid |3827| :pattern ( (MapType0Select (MutableMapModel.Iterator.s |it#0@@29|) ($Box (int_2_U |key#0@@90|)))) ))))))) (and (forall ((|key#1@@7| T@U) ) (!  (=> (= (type |key#1@@7|) intType) (=> (and (and (<= (LitInt 0) (U_2_int |key#1@@7|)) (< (U_2_int |key#1@@7|) 18446744073709551616)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@172|)) ($Box |key#1@@7|)))) (<= (U_2_int |key#1@@7|) (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@1 $ly@@156 |self#0@@172| |it#0@@29| |m#0@@1|)))) :qid |MutableMapModelidfy.1693:18| :skolemid |3828| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@172|)) ($Box |key#1@@7|))) )) (and (<= (LitInt 0) (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@1 $ly@@156 |self#0@@172| |it#0@@29| |m#0@@1|)) (< (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@1 $ly@@156 |self#0@@172| |it#0@@29| |m#0@@1|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |3829| :pattern ( (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@1 $ly@@156 |self#0@@172| |it#0@@29| |m#0@@1|)) ))))
(assert (forall ((MutableMapModel._default.MaxKeyIterate$V@@2 T@U) ($ly@@157 T@U) (|self#0@@173| T@U) (|it#0@@30| T@U) (|m#0@@2| Int) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.MaxKeyIterate$V@@2) TyType) (= (type $ly@@157) LayerTypeType)) (= (type |self#0@@173|) DatatypeTypeType)) (= (type |it#0@@30|) DatatypeTypeType)) (and (and ($Is |self#0@@173| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.MaxKeyIterate$V@@2)) ($Is |it#0@@30| (Tclass.MutableMapModel.Iterator MutableMapModel._default.MaxKeyIterate$V@@2))) (and (<= (LitInt 0) |m#0@@2|) (< |m#0@@2| 18446744073709551616)))) (= (|MutableMapModel.__default.MaxKeyIterate#requires| MutableMapModel._default.MaxKeyIterate$V@@2 $ly@@157 |self#0@@173| |it#0@@30| |m#0@@2|)  (and (and (MutableMapModel.__default.Inv MutableMapModel._default.MaxKeyIterate$V@@2 |self#0@@173|) (MutableMapModel.__default.WFIter MutableMapModel._default.MaxKeyIterate$V@@2 |self#0@@173| |it#0@@30|)) (forall ((|key#2@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |key#2@@2|) (< |key#2@@2| 18446744073709551616)) (U_2_bool (MapType0Select (MutableMapModel.Iterator.s |it#0@@30|) ($Box (int_2_U |key#2@@2|))))) (<= |key#2@@2| |m#0@@2|)) :qid |MutableMapModelidfy.1692:19| :skolemid |3830| :pattern ( (MapType0Select (MutableMapModel.Iterator.s |it#0@@30|) ($Box (int_2_U |key#2@@2|)))) ))))) :qid |unknown.0:0| :skolemid |3831| :pattern ( (|MutableMapModel.__default.MaxKeyIterate#requires| MutableMapModel._default.MaxKeyIterate$V@@2 $ly@@157 |self#0@@173| |it#0@@30| |m#0@@2|)) )))
(assert (= (type StartFuel_MutableMapModel._default.IterInc) LayerTypeType))
(assert  (=> (<= 116 $FunctionContextHeight) (forall ((MutableMapModel._default.MaxKeyIterate$V@@3 T@U) ($ly@@158 T@U) (|self#0@@174| T@U) (|it#0@@31| T@U) (|m#0@@3| Int) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.MaxKeyIterate$V@@3) TyType) (= (type $ly@@158) LayerTypeType)) (= (type |self#0@@174|) DatatypeTypeType)) (= (type |it#0@@31|) DatatypeTypeType)) (or (|MutableMapModel.__default.MaxKeyIterate#canCall| MutableMapModel._default.MaxKeyIterate$V@@3 |self#0@@174| |it#0@@31| |m#0@@3|) (and (not (= 116 $FunctionContextHeight)) (and (and (and ($Is |self#0@@174| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.MaxKeyIterate$V@@3)) ($Is |it#0@@31| (Tclass.MutableMapModel.Iterator MutableMapModel._default.MaxKeyIterate$V@@3))) (and (<= (LitInt 0) |m#0@@3|) (< |m#0@@3| 18446744073709551616))) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.MaxKeyIterate$V@@3 |self#0@@174|) (MutableMapModel.__default.WFIter MutableMapModel._default.MaxKeyIterate$V@@3 |self#0@@174| |it#0@@31|)) (forall ((|key#2@@3| Int) ) (!  (=> (and (and (<= (LitInt 0) |key#2@@3|) (< |key#2@@3| 18446744073709551616)) (U_2_bool (MapType0Select (MutableMapModel.Iterator.s |it#0@@31|) ($Box (int_2_U |key#2@@3|))))) (<= |key#2@@3| |m#0@@3|)) :qid |MutableMapModelidfy.1692:19| :skolemid |3830| :pattern ( (MapType0Select (MutableMapModel.Iterator.s |it#0@@31|) ($Box (int_2_U |key#2@@3|)))) ))))))) (and (and (MutableMapModel.Iterator.Iterator_q |it#0@@31|) (=> (not (MutableMapModel.IteratorOutput.Done_q (MutableMapModel.Iterator.next |it#0@@31|))) (and (MutableMapModel.Iterator.Iterator_q |it#0@@31|) (let ((|key#3@@1| (MutableMapModel.IteratorOutput.key (MutableMapModel.Iterator.next |it#0@@31|)))) (and (|MutableMapModel.__default.IterInc#canCall| MutableMapModel._default.MaxKeyIterate$V@@3 |self#0@@174| |it#0@@31|) (|MutableMapModel.__default.MaxKeyIterate#canCall| MutableMapModel._default.MaxKeyIterate$V@@3 |self#0@@174| (MutableMapModel.__default.IterInc MutableMapModel._default.MaxKeyIterate$V@@3 StartFuel_MutableMapModel._default.IterInc |self#0@@174| |it#0@@31|) (ite (< |m#0@@3| |key#3@@1|) |key#3@@1| |m#0@@3|))))))) (= (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@3 ($LS $ly@@158) |self#0@@174| |it#0@@31| |m#0@@3|) (ite (MutableMapModel.IteratorOutput.Done_q (MutableMapModel.Iterator.next |it#0@@31|)) |m#0@@3| (let ((|key#3@@2| (MutableMapModel.IteratorOutput.key (MutableMapModel.Iterator.next |it#0@@31|)))) (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@3 $ly@@158 |self#0@@174| (MutableMapModel.__default.IterInc MutableMapModel._default.MaxKeyIterate$V@@3 StartFuel_MutableMapModel._default.IterInc |self#0@@174| |it#0@@31|) (ite (< |m#0@@3| |key#3@@2|) |key#3@@2| |m#0@@3|))))))) :qid |unknown.0:0| :skolemid |3832| :pattern ( (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@3 ($LS $ly@@158) |self#0@@174| |it#0@@31| |m#0@@3|)) ))))
(assert  (=> (<= 116 $FunctionContextHeight) (forall ((MutableMapModel._default.MaxKeyIterate$V@@4 T@U) ($ly@@159 T@U) (|self#0@@175| T@U) (|it#0@@32| T@U) (|m#0@@4| Int) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.MaxKeyIterate$V@@4) TyType) (= (type $ly@@159) LayerTypeType)) (= (type |self#0@@175|) DatatypeTypeType)) (= (type |it#0@@32|) DatatypeTypeType)) (or (|MutableMapModel.__default.MaxKeyIterate#canCall| MutableMapModel._default.MaxKeyIterate$V@@4 |self#0@@175| (Lit |it#0@@32|) |m#0@@4|) (and (not (= 116 $FunctionContextHeight)) (and (and (and ($Is |self#0@@175| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.MaxKeyIterate$V@@4)) ($Is |it#0@@32| (Tclass.MutableMapModel.Iterator MutableMapModel._default.MaxKeyIterate$V@@4))) (and (<= (LitInt 0) |m#0@@4|) (< |m#0@@4| 18446744073709551616))) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.MaxKeyIterate$V@@4 |self#0@@175|) (MutableMapModel.__default.WFIter MutableMapModel._default.MaxKeyIterate$V@@4 |self#0@@175| (Lit |it#0@@32|))) (forall ((|key#4| Int) ) (!  (=> (and (and (<= (LitInt 0) |key#4|) (< |key#4| 18446744073709551616)) (U_2_bool (MapType0Select (Lit (MutableMapModel.Iterator.s (Lit |it#0@@32|))) ($Box (int_2_U |key#4|))))) (<= |key#4| |m#0@@4|)) :qid |MutableMapModelidfy.1692:19| :skolemid |3833| :pattern ( (MapType0Select (MutableMapModel.Iterator.s |it#0@@32|) ($Box (int_2_U |key#4|)))) ))))))) (and (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@32|)) (=> (not (U_2_bool (Lit (bool_2_U (MutableMapModel.IteratorOutput.Done_q (Lit (MutableMapModel.Iterator.next (Lit |it#0@@32|)))))))) (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@32|)) (let ((|key#5| (LitInt (MutableMapModel.IteratorOutput.key (Lit (MutableMapModel.Iterator.next (Lit |it#0@@32|))))))) (and (|MutableMapModel.__default.IterInc#canCall| MutableMapModel._default.MaxKeyIterate$V@@4 |self#0@@175| (Lit |it#0@@32|)) (|MutableMapModel.__default.MaxKeyIterate#canCall| MutableMapModel._default.MaxKeyIterate$V@@4 |self#0@@175| (MutableMapModel.__default.IterInc MutableMapModel._default.MaxKeyIterate$V@@4 StartFuel_MutableMapModel._default.IterInc |self#0@@175| (Lit |it#0@@32|)) (ite (< |m#0@@4| |key#5|) |key#5| |m#0@@4|))))))) (= (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@4 ($LS $ly@@159) |self#0@@175| (Lit |it#0@@32|) |m#0@@4|) (ite (MutableMapModel.IteratorOutput.Done_q (Lit (MutableMapModel.Iterator.next (Lit |it#0@@32|)))) |m#0@@4| (let ((|key#5@@0| (LitInt (MutableMapModel.IteratorOutput.key (Lit (MutableMapModel.Iterator.next (Lit |it#0@@32|))))))) (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@4 ($LS $ly@@159) |self#0@@175| (MutableMapModel.__default.IterInc MutableMapModel._default.MaxKeyIterate$V@@4 StartFuel_MutableMapModel._default.IterInc |self#0@@175| (Lit |it#0@@32|)) (ite (< |m#0@@4| |key#5@@0|) |key#5@@0| |m#0@@4|))))))) :qid |unknown.0:0| :weight 3 :skolemid |3834| :pattern ( (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@4 ($LS $ly@@159) |self#0@@175| (Lit |it#0@@32|) |m#0@@4|)) ))))
(assert  (=> (<= 116 $FunctionContextHeight) (forall ((MutableMapModel._default.MaxKeyIterate$V@@5 T@U) ($ly@@160 T@U) (|self#0@@176| T@U) (|it#0@@33| T@U) (|m#0@@5| Int) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.MaxKeyIterate$V@@5) TyType) (= (type $ly@@160) LayerTypeType)) (= (type |self#0@@176|) DatatypeTypeType)) (= (type |it#0@@33|) DatatypeTypeType)) (or (|MutableMapModel.__default.MaxKeyIterate#canCall| MutableMapModel._default.MaxKeyIterate$V@@5 (Lit |self#0@@176|) (Lit |it#0@@33|) (LitInt |m#0@@5|)) (and (not (= 116 $FunctionContextHeight)) (and (and (and ($Is |self#0@@176| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.MaxKeyIterate$V@@5)) ($Is |it#0@@33| (Tclass.MutableMapModel.Iterator MutableMapModel._default.MaxKeyIterate$V@@5))) (and (<= (LitInt 0) |m#0@@5|) (< |m#0@@5| 18446744073709551616))) (and (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.MaxKeyIterate$V@@5 (Lit |self#0@@176|))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.WFIter MutableMapModel._default.MaxKeyIterate$V@@5 (Lit |self#0@@176|) (Lit |it#0@@33|)))))) (forall ((|key#6| Int) ) (!  (=> (and (and (<= (LitInt 0) |key#6|) (< |key#6| 18446744073709551616)) (U_2_bool (MapType0Select (Lit (MutableMapModel.Iterator.s (Lit |it#0@@33|))) ($Box (int_2_U |key#6|))))) (<= |key#6| (LitInt |m#0@@5|))) :qid |MutableMapModelidfy.1692:19| :skolemid |3835| :pattern ( (MapType0Select (MutableMapModel.Iterator.s |it#0@@33|) ($Box (int_2_U |key#6|)))) ))))))) (and (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@33|)) (=> (not (U_2_bool (Lit (bool_2_U (MutableMapModel.IteratorOutput.Done_q (Lit (MutableMapModel.Iterator.next (Lit |it#0@@33|)))))))) (and (MutableMapModel.Iterator.Iterator_q (Lit |it#0@@33|)) (let ((|key#7| (LitInt (MutableMapModel.IteratorOutput.key (Lit (MutableMapModel.Iterator.next (Lit |it#0@@33|))))))) (and (|MutableMapModel.__default.IterInc#canCall| MutableMapModel._default.MaxKeyIterate$V@@5 (Lit |self#0@@176|) (Lit |it#0@@33|)) (|MutableMapModel.__default.MaxKeyIterate#canCall| MutableMapModel._default.MaxKeyIterate$V@@5 (Lit |self#0@@176|) (MutableMapModel.__default.IterInc MutableMapModel._default.MaxKeyIterate$V@@5 StartFuel_MutableMapModel._default.IterInc (Lit |self#0@@176|) (Lit |it#0@@33|)) (ite (< |m#0@@5| |key#7|) |key#7| |m#0@@5|))))))) (= (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@5 ($LS $ly@@160) (Lit |self#0@@176|) (Lit |it#0@@33|) (LitInt |m#0@@5|)) (ite (MutableMapModel.IteratorOutput.Done_q (Lit (MutableMapModel.Iterator.next (Lit |it#0@@33|)))) |m#0@@5| (let ((|key#7@@0| (LitInt (MutableMapModel.IteratorOutput.key (Lit (MutableMapModel.Iterator.next (Lit |it#0@@33|))))))) (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@5 ($LS $ly@@160) (Lit |self#0@@176|) (MutableMapModel.__default.IterInc MutableMapModel._default.MaxKeyIterate$V@@5 StartFuel_MutableMapModel._default.IterInc (Lit |self#0@@176|) (Lit |it#0@@33|)) (ite (< |m#0@@5| |key#7@@0|) |key#7@@0| |m#0@@5|))))))) :qid |unknown.0:0| :weight 3 :skolemid |3836| :pattern ( (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKeyIterate$V@@5 ($LS $ly@@160) (Lit |self#0@@176|) (Lit |it#0@@33|) (LitInt |m#0@@5|))) ))))
(assert (forall ((MutableMapModel._default.MaxKey$V T@U) ($ly@@161 T@U) (|self#0@@177| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.MaxKey$V) TyType) (= (type $ly@@161) LayerTypeType)) (= (type |self#0@@177|) DatatypeTypeType)) (= (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V ($LS $ly@@161) |self#0@@177|) (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V $ly@@161 |self#0@@177|))) :qid |unknown.0:0| :skolemid |3890| :pattern ( (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V ($LS $ly@@161) |self#0@@177|)) )))
(assert (forall ((MutableMapModel._default.MaxKey$V@@0 T@U) ($ly@@162 T@U) (|self#0@@178| T@U) ) (!  (=> (and (and (= (type MutableMapModel._default.MaxKey$V@@0) TyType) (= (type $ly@@162) LayerTypeType)) (= (type |self#0@@178|) DatatypeTypeType)) (= (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V@@0 $ly@@162 |self#0@@178|) (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V@@0 $LZ |self#0@@178|))) :qid |unknown.0:0| :skolemid |3891| :pattern ( (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V@@0 (AsFuelBottom $ly@@162) |self#0@@178|)) )))
(assert  (=> (<= 117 $FunctionContextHeight) (forall ((MutableMapModel._default.MaxKey$V@@1 T@U) ($ly@@163 T@U) (|self#0@@179| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.MaxKey$V@@1) TyType) (= (type $ly@@163) LayerTypeType)) (= (type |self#0@@179|) DatatypeTypeType)) (or (|MutableMapModel.__default.MaxKey#canCall| MutableMapModel._default.MaxKey$V@@1 |self#0@@179|) (and (not (= 117 $FunctionContextHeight)) (and ($Is |self#0@@179| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.MaxKey$V@@1)) (MutableMapModel.__default.Inv MutableMapModel._default.MaxKey$V@@1 |self#0@@179|))))) (and (forall ((|key#0@@91| T@U) ) (!  (=> (= (type |key#0@@91|) intType) (=> (and (and (<= (LitInt 0) (U_2_int |key#0@@91|)) (< (U_2_int |key#0@@91|) 18446744073709551616)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@179|)) ($Box |key#0@@91|)))) (<= (U_2_int |key#0@@91|) (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V@@1 $ly@@163 |self#0@@179|)))) :qid |MutableMapModelidfy.1706:18| :skolemid |3892| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@179|)) ($Box |key#0@@91|))) )) (and (<= (LitInt 0) (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V@@1 $ly@@163 |self#0@@179|)) (< (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V@@1 $ly@@163 |self#0@@179|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |3893| :pattern ( (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V@@1 $ly@@163 |self#0@@179|)) ))))
(assert (forall ((MutableMapModel._default.MaxKey$V@@2 T@U) ($ly@@164 T@U) (|self#0@@180| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.MaxKey$V@@2) TyType) (= (type $ly@@164) LayerTypeType)) (= (type |self#0@@180|) DatatypeTypeType)) ($Is |self#0@@180| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.MaxKey$V@@2))) (= (|MutableMapModel.__default.MaxKey#requires| MutableMapModel._default.MaxKey$V@@2 $ly@@164 |self#0@@180|) (MutableMapModel.__default.Inv MutableMapModel._default.MaxKey$V@@2 |self#0@@180|))) :qid |unknown.0:0| :skolemid |3894| :pattern ( (|MutableMapModel.__default.MaxKey#requires| MutableMapModel._default.MaxKey$V@@2 $ly@@164 |self#0@@180|)) )))
(assert (= (type StartFuel_MutableMapModel._default.IterStart) LayerTypeType))
(assert  (=> (<= 117 $FunctionContextHeight) (forall ((MutableMapModel._default.MaxKey$V@@3 T@U) ($ly@@165 T@U) (|self#0@@181| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.MaxKey$V@@3) TyType) (= (type $ly@@165) LayerTypeType)) (= (type |self#0@@181|) DatatypeTypeType)) (or (|MutableMapModel.__default.MaxKey#canCall| MutableMapModel._default.MaxKey$V@@3 |self#0@@181|) (and (not (= 117 $FunctionContextHeight)) (and ($Is |self#0@@181| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.MaxKey$V@@3)) (MutableMapModel.__default.Inv MutableMapModel._default.MaxKey$V@@3 |self#0@@181|))))) (and (and (|MutableMapModel.__default.IterStart#canCall| MutableMapModel._default.MaxKey$V@@3 |self#0@@181|) (|MutableMapModel.__default.MaxKeyIterate#canCall| MutableMapModel._default.MaxKey$V@@3 |self#0@@181| (MutableMapModel.__default.IterStart MutableMapModel._default.MaxKey$V@@3 StartFuel_MutableMapModel._default.IterStart |self#0@@181|) (LitInt 0))) (= (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V@@3 ($LS $ly@@165) |self#0@@181|) (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKey$V@@3 ($LS $LZ) |self#0@@181| (MutableMapModel.__default.IterStart MutableMapModel._default.MaxKey$V@@3 StartFuel_MutableMapModel._default.IterStart |self#0@@181|) (LitInt 0))))) :qid |unknown.0:0| :skolemid |3895| :pattern ( (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V@@3 ($LS $ly@@165) |self#0@@181|)) ))))
(assert  (=> (<= 117 $FunctionContextHeight) (forall ((MutableMapModel._default.MaxKey$V@@4 T@U) ($ly@@166 T@U) (|self#0@@182| T@U) ) (!  (=> (and (and (and (= (type MutableMapModel._default.MaxKey$V@@4) TyType) (= (type $ly@@166) LayerTypeType)) (= (type |self#0@@182|) DatatypeTypeType)) (or (|MutableMapModel.__default.MaxKey#canCall| MutableMapModel._default.MaxKey$V@@4 (Lit |self#0@@182|)) (and (not (= 117 $FunctionContextHeight)) (and ($Is |self#0@@182| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.MaxKey$V@@4)) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.MaxKey$V@@4 (Lit |self#0@@182|))))))))) (and (and (|MutableMapModel.__default.IterStart#canCall| MutableMapModel._default.MaxKey$V@@4 (Lit |self#0@@182|)) (|MutableMapModel.__default.MaxKeyIterate#canCall| MutableMapModel._default.MaxKey$V@@4 (Lit |self#0@@182|) (MutableMapModel.__default.IterStart MutableMapModel._default.MaxKey$V@@4 StartFuel_MutableMapModel._default.IterStart (Lit |self#0@@182|)) (LitInt 0))) (= (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V@@4 ($LS $ly@@166) (Lit |self#0@@182|)) (MutableMapModel.__default.MaxKeyIterate MutableMapModel._default.MaxKey$V@@4 ($LS $LZ) (Lit |self#0@@182|) (MutableMapModel.__default.IterStart MutableMapModel._default.MaxKey$V@@4 StartFuel_MutableMapModel._default.IterStart (Lit |self#0@@182|)) (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |3896| :pattern ( (MutableMapModel.__default.MaxKey MutableMapModel._default.MaxKey$V@@4 ($LS $ly@@166) (Lit |self#0@@182|))) ))))
(assert (forall ((arg0@@301 T@U) (arg1@@151 T@U) (arg2@@94 T@U) (arg3@@53 T@U) (arg4@@33 T@U) ) (! (= (type (MutableMapModel.__default.UpdateByIter arg0@@301 arg1@@151 arg2@@94 arg3@@53 arg4@@33)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.UpdateByIter| :pattern ( (MutableMapModel.__default.UpdateByIter arg0@@301 arg1@@151 arg2@@94 arg3@@53 arg4@@33)) )))
(assert (forall ((MutableMapModel._default.UpdateByIter$V T@U) ($ly@@167 T@U) (|self#0@@183| T@U) (|it#0@@34| T@U) (|value#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.UpdateByIter$V) TyType) (= (type $ly@@167) LayerTypeType)) (= (type |self#0@@183|) DatatypeTypeType)) (= (type |it#0@@34|) DatatypeTypeType)) (= (type |value#0@@25|) BoxType)) (= (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V ($LS $ly@@167) |self#0@@183| |it#0@@34| |value#0@@25|) (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V $ly@@167 |self#0@@183| |it#0@@34| |value#0@@25|))) :qid |unknown.0:0| :skolemid |3942| :pattern ( (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V ($LS $ly@@167) |self#0@@183| |it#0@@34| |value#0@@25|)) )))
(assert (forall ((MutableMapModel._default.UpdateByIter$V@@0 T@U) ($ly@@168 T@U) (|self#0@@184| T@U) (|it#0@@35| T@U) (|value#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type MutableMapModel._default.UpdateByIter$V@@0) TyType) (= (type $ly@@168) LayerTypeType)) (= (type |self#0@@184|) DatatypeTypeType)) (= (type |it#0@@35|) DatatypeTypeType)) (= (type |value#0@@26|) BoxType)) (= (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@0 $ly@@168 |self#0@@184| |it#0@@35| |value#0@@26|) (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@0 $LZ |self#0@@184| |it#0@@35| |value#0@@26|))) :qid |unknown.0:0| :skolemid |3943| :pattern ( (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@0 (AsFuelBottom $ly@@168) |self#0@@184| |it#0@@35| |value#0@@26|)) )))
(assert  (=> (<= 118 $FunctionContextHeight) (forall ((MutableMapModel._default.UpdateByIter$V@@1 T@U) ($ly@@169 T@U) (|self#0@@185| T@U) (|it#0@@36| T@U) (|value#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type MutableMapModel._default.UpdateByIter$V@@1) TyType) (= (type $ly@@169) LayerTypeType)) (= (type |self#0@@185|) DatatypeTypeType)) (= (type |it#0@@36|) DatatypeTypeType)) (= (type |value#0@@27|) BoxType)) (or (|MutableMapModel.__default.UpdateByIter#canCall| MutableMapModel._default.UpdateByIter$V@@1 |self#0@@185| |it#0@@36| |value#0@@27|) (and (not (= 118 $FunctionContextHeight)) (and (and (and ($Is |self#0@@185| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@1)) ($Is |it#0@@36| Tclass.MutableMapModel.SimpleIterator)) ($IsBox |value#0@@27| MutableMapModel._default.UpdateByIter$V@@1)) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.UpdateByIter$V@@1 |self#0@@185|) (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.UpdateByIter$V@@1 |self#0@@185| |it#0@@36|)) (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.UpdateByIter$V@@1 |self#0@@185| |it#0@@36|))))))) (and (and (and (MutableMapModel.__default.Inv MutableMapModel._default.UpdateByIter$V@@1 (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@1 $ly@@169 |self#0@@185| |it#0@@36| |value#0@@27|)) (|Map#Equal| (MutableMapModel.LinearHashMap.contents (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@1 $ly@@169 |self#0@@185| |it#0@@36| |value#0@@27|)) (|Map#Build| (MutableMapModel.LinearHashMap.contents |self#0@@185|) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.UpdateByIter$V@@1 |self#0@@185| |it#0@@36|)))) |value#0@@27|))) (= (MutableMapModel.LinearHashMap.count (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@1 $ly@@169 |self#0@@185| |it#0@@36| |value#0@@27|)) (MutableMapModel.LinearHashMap.count |self#0@@185|))) ($Is (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@1 $ly@@169 |self#0@@185| |it#0@@36| |value#0@@27|) (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@1)))) :qid |unknown.0:0| :skolemid |3944| :pattern ( (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@1 $ly@@169 |self#0@@185| |it#0@@36| |value#0@@27|)) ))))
(assert (forall ((MutableMapModel._default.UpdateByIter$V@@2 T@U) ($ly@@170 T@U) (|self#0@@186| T@U) (|it#0@@37| T@U) (|value#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type MutableMapModel._default.UpdateByIter$V@@2) TyType) (= (type $ly@@170) LayerTypeType)) (= (type |self#0@@186|) DatatypeTypeType)) (= (type |it#0@@37|) DatatypeTypeType)) (= (type |value#0@@28|) BoxType)) (and (and ($Is |self#0@@186| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@2)) ($Is |it#0@@37| Tclass.MutableMapModel.SimpleIterator)) ($IsBox |value#0@@28| MutableMapModel._default.UpdateByIter$V@@2))) (= (|MutableMapModel.__default.UpdateByIter#requires| MutableMapModel._default.UpdateByIter$V@@2 $ly@@170 |self#0@@186| |it#0@@37| |value#0@@28|)  (and (and (MutableMapModel.__default.Inv MutableMapModel._default.UpdateByIter$V@@2 |self#0@@186|) (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.UpdateByIter$V@@2 |self#0@@186| |it#0@@37|)) (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.UpdateByIter$V@@2 |self#0@@186| |it#0@@37|))))) :qid |unknown.0:0| :skolemid |3945| :pattern ( (|MutableMapModel.__default.UpdateByIter#requires| MutableMapModel._default.UpdateByIter$V@@2 $ly@@170 |self#0@@186| |it#0@@37| |value#0@@28|)) )))
(assert  (=> (<= 118 $FunctionContextHeight) (forall ((MutableMapModel._default.UpdateByIter$V@@3 T@U) ($ly@@171 T@U) (|self#0@@187| T@U) (|it#0@@38| T@U) (|value#0@@29| T@U) ) (!  (=> (and (and (and (and (and (= (type MutableMapModel._default.UpdateByIter$V@@3) TyType) (= (type $ly@@171) LayerTypeType)) (= (type |self#0@@187|) DatatypeTypeType)) (= (type |it#0@@38|) DatatypeTypeType)) (= (type |value#0@@29|) BoxType)) (or (|MutableMapModel.__default.UpdateByIter#canCall| MutableMapModel._default.UpdateByIter$V@@3 |self#0@@187| |it#0@@38| |value#0@@29|) (and (not (= 118 $FunctionContextHeight)) (and (and (and ($Is |self#0@@187| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@3)) ($Is |it#0@@38| Tclass.MutableMapModel.SimpleIterator)) ($IsBox |value#0@@29| MutableMapModel._default.UpdateByIter$V@@3)) (and (and (MutableMapModel.__default.Inv MutableMapModel._default.UpdateByIter$V@@3 |self#0@@187|) (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.UpdateByIter$V@@3 |self#0@@187| |it#0@@38|)) (MutableMapModel.IteratorOutput.Next_q (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.UpdateByIter$V@@3 |self#0@@187| |it#0@@38|))))))) (and (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@187|) (MutableMapModel.SimpleIterator.SimpleIterator_q |it#0@@38|)) (|MutableMapModel.__default.FixedSizeUpdateBySlot#canCall| MutableMapModel._default.UpdateByIter$V@@3 (MutableMapModel.LinearHashMap.underlying |self#0@@187|) (MutableMapModel.SimpleIterator.i |it#0@@38|) |value#0@@29|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@187|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@187|) (|MutableMapModel.__default.SimpleIterOutput#canCall| MutableMapModel._default.UpdateByIter$V@@3 |self#0@@187| |it#0@@38|)))) (= (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@3 ($LS $ly@@171) |self#0@@187| |it#0@@38| |value#0@@29|) (let ((|underlying#0@@7| (MutableMapModel.__default.FixedSizeUpdateBySlot MutableMapModel._default.UpdateByIter$V@@3 (MutableMapModel.LinearHashMap.underlying |self#0@@187|) (MutableMapModel.SimpleIterator.i |it#0@@38|) |value#0@@29|))) (let ((|self'#0@@4| (|#MutableMapModel.LinearHashMap.LinearHashMap| |underlying#0@@7| (MutableMapModel.LinearHashMap.count |self#0@@187|) (|Map#Build| (MutableMapModel.LinearHashMap.contents |self#0@@187|) ($Box (int_2_U (MutableMapModel.IteratorOutput.key (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.UpdateByIter$V@@3 |self#0@@187| |it#0@@38|)))) |value#0@@29|)))) |self'#0@@4|))))) :qid |unknown.0:0| :skolemid |3946| :pattern ( (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@3 ($LS $ly@@171) |self#0@@187| |it#0@@38| |value#0@@29|)) ))))
(assert  (=> (<= 118 $FunctionContextHeight) (forall ((MutableMapModel._default.UpdateByIter$V@@4 T@U) ($ly@@172 T@U) (|self#0@@188| T@U) (|it#0@@39| T@U) (|value#0@@30| T@U) ) (!  (=> (and (and (and (and (and (= (type MutableMapModel._default.UpdateByIter$V@@4) TyType) (= (type $ly@@172) LayerTypeType)) (= (type |self#0@@188|) DatatypeTypeType)) (= (type |it#0@@39|) DatatypeTypeType)) (= (type |value#0@@30|) BoxType)) (or (|MutableMapModel.__default.UpdateByIter#canCall| MutableMapModel._default.UpdateByIter$V@@4 (Lit |self#0@@188|) (Lit |it#0@@39|) |value#0@@30|) (and (not (= 118 $FunctionContextHeight)) (and (and (and ($Is |self#0@@188| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@4)) ($Is |it#0@@39| Tclass.MutableMapModel.SimpleIterator)) ($IsBox |value#0@@30| MutableMapModel._default.UpdateByIter$V@@4)) (and (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.UpdateByIter$V@@4 (Lit |self#0@@188|))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.UpdateByIter$V@@4 (Lit |self#0@@188|) (Lit |it#0@@39|)))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.IteratorOutput.Next_q (Lit (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.UpdateByIter$V@@4 (Lit |self#0@@188|) (Lit |it#0@@39|)))))))))))) (and (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@188|)) (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@39|))) (|MutableMapModel.__default.FixedSizeUpdateBySlot#canCall| MutableMapModel._default.UpdateByIter$V@@4 (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@188|))) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@39|))) |value#0@@30|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@188|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@188|)) (|MutableMapModel.__default.SimpleIterOutput#canCall| MutableMapModel._default.UpdateByIter$V@@4 (Lit |self#0@@188|) (Lit |it#0@@39|))))) (= (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@4 ($LS $ly@@172) (Lit |self#0@@188|) (Lit |it#0@@39|) |value#0@@30|) (let ((|underlying#1| (MutableMapModel.__default.FixedSizeUpdateBySlot MutableMapModel._default.UpdateByIter$V@@4 (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@188|))) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@39|))) |value#0@@30|))) (let ((|self'#1@@4| (|#MutableMapModel.LinearHashMap.LinearHashMap| |underlying#1| (LitInt (MutableMapModel.LinearHashMap.count (Lit |self#0@@188|))) (|Map#Build| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@188|))) ($Box (int_2_U (LitInt (MutableMapModel.IteratorOutput.key (Lit (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.UpdateByIter$V@@4 (Lit |self#0@@188|) (Lit |it#0@@39|))))))) |value#0@@30|)))) |self'#1@@4|))))) :qid |unknown.0:0| :weight 3 :skolemid |3947| :pattern ( (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@4 ($LS $ly@@172) (Lit |self#0@@188|) (Lit |it#0@@39|) |value#0@@30|)) ))))
(assert  (=> (<= 118 $FunctionContextHeight) (forall ((MutableMapModel._default.UpdateByIter$V@@5 T@U) ($ly@@173 T@U) (|self#0@@189| T@U) (|it#0@@40| T@U) (|value#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type MutableMapModel._default.UpdateByIter$V@@5) TyType) (= (type $ly@@173) LayerTypeType)) (= (type |self#0@@189|) DatatypeTypeType)) (= (type |it#0@@40|) DatatypeTypeType)) (= (type |value#0@@31|) BoxType)) (or (|MutableMapModel.__default.UpdateByIter#canCall| MutableMapModel._default.UpdateByIter$V@@5 (Lit |self#0@@189|) (Lit |it#0@@40|) (Lit |value#0@@31|)) (and (not (= 118 $FunctionContextHeight)) (and (and (and ($Is |self#0@@189| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@5)) ($Is |it#0@@40| Tclass.MutableMapModel.SimpleIterator)) ($IsBox |value#0@@31| MutableMapModel._default.UpdateByIter$V@@5)) (and (and (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.UpdateByIter$V@@5 (Lit |self#0@@189|))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.UpdateByIter$V@@5 (Lit |self#0@@189|) (Lit |it#0@@40|)))))) (U_2_bool (Lit (bool_2_U (MutableMapModel.IteratorOutput.Next_q (Lit (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.UpdateByIter$V@@5 (Lit |self#0@@189|) (Lit |it#0@@40|)))))))))))) (and (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@189|)) (MutableMapModel.SimpleIterator.SimpleIterator_q (Lit |it#0@@40|))) (|MutableMapModel.__default.FixedSizeUpdateBySlot#canCall| MutableMapModel._default.UpdateByIter$V@@5 (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@189|))) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@40|))) (Lit |value#0@@31|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@189|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@189|)) (|MutableMapModel.__default.SimpleIterOutput#canCall| MutableMapModel._default.UpdateByIter$V@@5 (Lit |self#0@@189|) (Lit |it#0@@40|))))) (= (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@5 ($LS $ly@@173) (Lit |self#0@@189|) (Lit |it#0@@40|) (Lit |value#0@@31|)) (let ((|underlying#2| (Lit (MutableMapModel.__default.FixedSizeUpdateBySlot MutableMapModel._default.UpdateByIter$V@@5 (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@189|))) (LitInt (MutableMapModel.SimpleIterator.i (Lit |it#0@@40|))) (Lit |value#0@@31|))))) (let ((|self'#2@@2| (|#MutableMapModel.LinearHashMap.LinearHashMap| |underlying#2| (LitInt (MutableMapModel.LinearHashMap.count (Lit |self#0@@189|))) (|Map#Build| (Lit (MutableMapModel.LinearHashMap.contents (Lit |self#0@@189|))) ($Box (int_2_U (LitInt (MutableMapModel.IteratorOutput.key (Lit (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.UpdateByIter$V@@5 (Lit |self#0@@189|) (Lit |it#0@@40|))))))) (Lit |value#0@@31|))))) |self'#2@@2|))))) :qid |unknown.0:0| :weight 3 :skolemid |3948| :pattern ( (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@5 ($LS $ly@@173) (Lit |self#0@@189|) (Lit |it#0@@40|) (Lit |value#0@@31|))) ))))
(assert (forall ((arg0@@302 T@U) (arg1@@152 T@U) ) (! (= (type (|MutableMapModel.__default.UpdateByIter#Handle| arg0@@302 arg1@@152)) HandleTypeType) :qid |funType:MutableMapModel.__default.UpdateByIter#Handle| :pattern ( (|MutableMapModel.__default.UpdateByIter#Handle| arg0@@302 arg1@@152)) )))
(assert (forall ((MutableMapModel._default.UpdateByIter$V@@6 T@U) ($ly@@174 T@U) ($heap T@U) (|$fh$0x#0| T@U) (|$fh$0x#1| T@U) (|$fh$0x#2| T@U) ) (!  (=> (and (and (and (and (and (= (type MutableMapModel._default.UpdateByIter$V@@6) TyType) (= (type $ly@@174) LayerTypeType)) (= (type $heap) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0|) BoxType)) (= (type |$fh$0x#1|) BoxType)) (= (type |$fh$0x#2|) BoxType)) (= (Apply3 (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@6) Tclass.MutableMapModel.SimpleIterator MutableMapModel._default.UpdateByIter$V@@6 (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@6) $heap (|MutableMapModel.__default.UpdateByIter#Handle| MutableMapModel._default.UpdateByIter$V@@6 $ly@@174) |$fh$0x#0| |$fh$0x#1| |$fh$0x#2|) ($Box (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@6 $ly@@174 ($Unbox DatatypeTypeType |$fh$0x#0|) ($Unbox DatatypeTypeType |$fh$0x#1|) |$fh$0x#2|)))) :qid |unknown.0:0| :skolemid |3988| :pattern ( (Apply3 (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@6) Tclass.MutableMapModel.SimpleIterator MutableMapModel._default.UpdateByIter$V@@6 (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@6) $heap (|MutableMapModel.__default.UpdateByIter#Handle| MutableMapModel._default.UpdateByIter$V@@6 $ly@@174) |$fh$0x#0| |$fh$0x#1| |$fh$0x#2|)) )))
(assert (forall ((MutableMapModel._default.UpdateByIter$V@@7 T@U) ($ly@@175 T@U) ($heap@@0 T@U) (|$fh$0x#0@@0| T@U) (|$fh$0x#1@@0| T@U) (|$fh$0x#2@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type MutableMapModel._default.UpdateByIter$V@@7) TyType) (= (type $ly@@175) LayerTypeType)) (= (type $heap@@0) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0@@0|) BoxType)) (= (type |$fh$0x#1@@0|) BoxType)) (= (type |$fh$0x#2@@0|) BoxType)) (= (Requires3 (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@7) Tclass.MutableMapModel.SimpleIterator MutableMapModel._default.UpdateByIter$V@@7 (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@7) $heap@@0 (|MutableMapModel.__default.UpdateByIter#Handle| MutableMapModel._default.UpdateByIter$V@@7 $ly@@175) |$fh$0x#0@@0| |$fh$0x#1@@0| |$fh$0x#2@@0|) (|MutableMapModel.__default.UpdateByIter#requires| MutableMapModel._default.UpdateByIter$V@@7 $ly@@175 ($Unbox DatatypeTypeType |$fh$0x#0@@0|) ($Unbox DatatypeTypeType |$fh$0x#1@@0|) |$fh$0x#2@@0|))) :qid |unknown.0:0| :skolemid |3989| :pattern ( (Requires3 (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@7) Tclass.MutableMapModel.SimpleIterator MutableMapModel._default.UpdateByIter$V@@7 (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@7) $heap@@0 (|MutableMapModel.__default.UpdateByIter#Handle| MutableMapModel._default.UpdateByIter$V@@7 $ly@@175) |$fh$0x#0@@0| |$fh$0x#1@@0| |$fh$0x#2@@0|)) )))
(assert (forall (($bx T@U) (MutableMapModel._default.UpdateByIter$V@@8 T@U) ($ly@@176 T@U) ($heap@@1 T@U) (|$fh$0x#0@@1| T@U) (|$fh$0x#1@@1| T@U) (|$fh$0x#2@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $bx) BoxType) (= (type MutableMapModel._default.UpdateByIter$V@@8) TyType)) (= (type $ly@@176) LayerTypeType)) (= (type $heap@@1) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0@@1|) BoxType)) (= (type |$fh$0x#1@@1|) BoxType)) (= (type |$fh$0x#2@@1|) BoxType)) (= (U_2_bool (MapType0Select (Reads3 (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@8) Tclass.MutableMapModel.SimpleIterator MutableMapModel._default.UpdateByIter$V@@8 (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@8) $heap@@1 (|MutableMapModel.__default.UpdateByIter#Handle| MutableMapModel._default.UpdateByIter$V@@8 $ly@@176) |$fh$0x#0@@1| |$fh$0x#1@@1| |$fh$0x#2@@1|) $bx)) false)) :qid |unknown.0:0| :skolemid |3990| :pattern ( (MapType0Select (Reads3 (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@8) Tclass.MutableMapModel.SimpleIterator MutableMapModel._default.UpdateByIter$V@@8 (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@8) $heap@@1 (|MutableMapModel.__default.UpdateByIter#Handle| MutableMapModel._default.UpdateByIter$V@@8 $ly@@176) |$fh$0x#0@@1| |$fh$0x#1@@1| |$fh$0x#2@@1|) $bx)) )))
(assert (forall ((MutableMapModel._default.UpdateByIter$V@@9 T@U) ($ly@@177 T@U) ($heap@@2 T@U) (|$fh$0x#0@@2| T@U) (|$fh$0x#1@@2| T@U) (|$fh$0x#2@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type MutableMapModel._default.UpdateByIter$V@@9) TyType) (= (type $ly@@177) LayerTypeType)) (= (type $heap@@2) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0@@2|) DatatypeTypeType)) (= (type |$fh$0x#1@@2|) DatatypeTypeType)) (= (type |$fh$0x#2@@2|) BoxType)) (= (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@9 $ly@@177 |$fh$0x#0@@2| |$fh$0x#1@@2| |$fh$0x#2@@2|) ($Unbox DatatypeTypeType (Apply3 (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@9) Tclass.MutableMapModel.SimpleIterator MutableMapModel._default.UpdateByIter$V@@9 (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.UpdateByIter$V@@9) $heap@@2 (|MutableMapModel.__default.UpdateByIter#Handle| MutableMapModel._default.UpdateByIter$V@@9 $ly@@177) ($Box |$fh$0x#0@@2|) ($Box |$fh$0x#1@@2|) |$fh$0x#2@@2|)))) :qid |unknown.0:0| :skolemid |3991| :pattern ( (MutableMapModel.__default.UpdateByIter MutableMapModel._default.UpdateByIter$V@@9 $ly@@177 |$fh$0x#0@@2| |$fh$0x#1@@2| |$fh$0x#2@@2|) ($IsGoodHeap $heap@@2)) )))
(assert (forall ((arg0@@303 T@U) (arg1@@153 T@U) (arg2@@95 Int) ) (! (= (type (MutableMapModel.__default.setUpTo arg0@@303 arg1@@153 arg2@@95)) (MapType0Type BoxType boolType)) :qid |funType:MutableMapModel.__default.setUpTo| :pattern ( (MutableMapModel.__default.setUpTo arg0@@303 arg1@@153 arg2@@95)) )))
(assert  (=> (<= 121 $FunctionContextHeight) (forall ((MutableMapModel._default.setUpTo$V T@U) (|self#0@@190| T@U) (|i#0@@40| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.setUpTo$V) TyType) (= (type |self#0@@190|) DatatypeTypeType)) (or (|MutableMapModel.__default.setUpTo#canCall| MutableMapModel._default.setUpTo$V |self#0@@190| |i#0@@40|) (and (not (= 121 $FunctionContextHeight)) (and ($Is |self#0@@190| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.setUpTo$V)) (and (<= (LitInt 0) |i#0@@40|) (<= |i#0@@40| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@190|))))))))) ($Is (MutableMapModel.__default.setUpTo MutableMapModel._default.setUpTo$V |self#0@@190| |i#0@@40|) (TSet Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |4072| :pattern ( (MutableMapModel.__default.setUpTo MutableMapModel._default.setUpTo$V |self#0@@190| |i#0@@40|)) ))))
(assert (forall ((MutableMapModel._default.setUpTo$V@@0 T@U) (|self#0@@191| T@U) (|i#0@@41| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.setUpTo$V@@0) TyType) (= (type |self#0@@191|) DatatypeTypeType)) ($Is |self#0@@191| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.setUpTo$V@@0))) (= (|MutableMapModel.__default.setUpTo#requires| MutableMapModel._default.setUpTo$V@@0 |self#0@@191| |i#0@@41|)  (and (<= (LitInt 0) |i#0@@41|) (<= |i#0@@41| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@191|))))))) :qid |unknown.0:0| :skolemid |4073| :pattern ( (|MutableMapModel.__default.setUpTo#requires| MutableMapModel._default.setUpTo$V@@0 |self#0@@191| |i#0@@41|)) )))
(assert (forall ((arg0@@304 Int) (arg1@@154 Int) (arg2@@96 T@U) (arg3@@54 T@U) (arg4@@34 T@U) ) (! (= (type (|lambda#221| arg0@@304 arg1@@154 arg2@@96 arg3@@54 arg4@@34)) (MapType0Type BoxType boolType)) :qid |funType:lambda#221| :pattern ( (|lambda#221| arg0@@304 arg1@@154 arg2@@96 arg3@@54 arg4@@34)) )))
(assert  (=> (<= 121 $FunctionContextHeight) (forall ((MutableMapModel._default.setUpTo$V@@1 T@U) (|self#0@@192| T@U) (|i#0@@42| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.setUpTo$V@@1) TyType) (= (type |self#0@@192|) DatatypeTypeType)) (or (|MutableMapModel.__default.setUpTo#canCall| MutableMapModel._default.setUpTo$V@@1 |self#0@@192| |i#0@@42|) (and (not (= 121 $FunctionContextHeight)) (and ($Is |self#0@@192| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.setUpTo$V@@1)) (and (<= (LitInt 0) |i#0@@42|) (<= |i#0@@42| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@192|))))))))) (and (forall ((|j#0@@10| Int) ) (!  (and (=> (<= (LitInt 0) |j#0@@10|) (=> (< |j#0@@10| |i#0@@42|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@192|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@192|))))) (=> (and (and (<= (LitInt 0) |j#0@@10|) (< |j#0@@10| |i#0@@42|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@192|)) |j#0@@10|)))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@192|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@192|))))) :qid |MutableMapModelidfy.1760:9| :skolemid |4075| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@192|)) |j#0@@10|))) )) (= (MutableMapModel.__default.setUpTo MutableMapModel._default.setUpTo$V@@1 |self#0@@192| |i#0@@42|) (|lambda#221| (LitInt 0) |i#0@@42| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@192|)) (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@192|)) (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@192|)))))) :qid |unknown.0:0| :skolemid |4076| :pattern ( (MutableMapModel.__default.setUpTo MutableMapModel._default.setUpTo$V@@1 |self#0@@192| |i#0@@42|)) ))))
(assert  (=> (<= 121 $FunctionContextHeight) (forall ((MutableMapModel._default.setUpTo$V@@2 T@U) (|self#0@@193| T@U) (|i#0@@43| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.setUpTo$V@@2) TyType) (= (type |self#0@@193|) DatatypeTypeType)) (or (|MutableMapModel.__default.setUpTo#canCall| MutableMapModel._default.setUpTo$V@@2 (Lit |self#0@@193|) (LitInt |i#0@@43|)) (and (not (= 121 $FunctionContextHeight)) (and ($Is |self#0@@193| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.setUpTo$V@@2)) (and (<= (LitInt 0) (LitInt |i#0@@43|)) (<= (LitInt |i#0@@43|) (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@193|)))))))))))) (and (forall ((|j#1@@9| Int) ) (!  (and (=> (<= (LitInt 0) |j#1@@9|) (=> (< |j#1@@9| |i#0@@43|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@193|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@193|))))))) (=> (and (and (<= (LitInt 0) |j#1@@9|) (< |j#1@@9| |i#0@@43|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@193|))))) |j#1@@9|)))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@193|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@193|))))))) :qid |MutableMapModelidfy.1760:9| :skolemid |4078| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@193|)) |j#1@@9|))) )) (= (MutableMapModel.__default.setUpTo MutableMapModel._default.setUpTo$V@@2 (Lit |self#0@@193|) (LitInt |i#0@@43|)) (|lambda#221| (LitInt 0) |i#0@@43| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@193|))))) (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@193|))))) (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@193|)))))) :qid |unknown.0:0| :weight 3 :skolemid |4079| :pattern ( (MutableMapModel.__default.setUpTo MutableMapModel._default.setUpTo$V@@2 (Lit |self#0@@193|) (LitInt |i#0@@43|))) ))))
(assert (forall ((arg0@@305 T@U) (arg1@@155 T@U) (arg2@@97 T@U) (arg3@@55 Int) ) (! (= (type (MutableMapModel.__default.FindSimpleIter arg0@@305 arg1@@155 arg2@@97 arg3@@55)) DatatypeTypeType) :qid |funType:MutableMapModel.__default.FindSimpleIter| :pattern ( (MutableMapModel.__default.FindSimpleIter arg0@@305 arg1@@155 arg2@@97 arg3@@55)) )))
(assert (forall ((MutableMapModel._default.FindSimpleIter$V T@U) ($ly@@178 T@U) (|self#0@@194| T@U) (|key#0@@92| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.FindSimpleIter$V) TyType) (= (type $ly@@178) LayerTypeType)) (= (type |self#0@@194|) DatatypeTypeType)) (= (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V ($LS $ly@@178) |self#0@@194| |key#0@@92|) (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V $ly@@178 |self#0@@194| |key#0@@92|))) :qid |unknown.0:0| :skolemid |4117| :pattern ( (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V ($LS $ly@@178) |self#0@@194| |key#0@@92|)) )))
(assert (forall ((MutableMapModel._default.FindSimpleIter$V@@0 T@U) ($ly@@179 T@U) (|self#0@@195| T@U) (|key#0@@93| Int) ) (!  (=> (and (and (= (type MutableMapModel._default.FindSimpleIter$V@@0) TyType) (= (type $ly@@179) LayerTypeType)) (= (type |self#0@@195|) DatatypeTypeType)) (= (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@0 $ly@@179 |self#0@@195| |key#0@@93|) (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@0 $LZ |self#0@@195| |key#0@@93|))) :qid |unknown.0:0| :skolemid |4118| :pattern ( (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@0 (AsFuelBottom $ly@@179) |self#0@@195| |key#0@@93|)) )))
(assert  (=> (<= 123 $FunctionContextHeight) (forall ((MutableMapModel._default.FindSimpleIter$V@@1 T@U) ($ly@@180 T@U) (|self#0@@196| T@U) (|key#0@@94| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FindSimpleIter$V@@1) TyType) (= (type $ly@@180) LayerTypeType)) (= (type |self#0@@196|) DatatypeTypeType)) (or (|MutableMapModel.__default.FindSimpleIter#canCall| MutableMapModel._default.FindSimpleIter$V@@1 |self#0@@196| |key#0@@94|) (and (not (= 123 $FunctionContextHeight)) (and (and ($Is |self#0@@196| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.FindSimpleIter$V@@1)) (and (<= (LitInt 0) |key#0@@94|) (< |key#0@@94| 18446744073709551616))) (MutableMapModel.__default.Inv MutableMapModel._default.FindSimpleIter$V@@1 |self#0@@196|))))) (and (and (and (MutableMapModel.__default.WFSimpleIter MutableMapModel._default.FindSimpleIter$V@@1 |self#0@@196| (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@1 $ly@@180 |self#0@@196| |key#0@@94|)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@196|)) ($Box (int_2_U |key#0@@94|)))) (|MutableMapModel.IteratorOutput#Equal| (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.FindSimpleIter$V@@1 |self#0@@196| (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@1 $ly@@180 |self#0@@196| |key#0@@94|)) (|#MutableMapModel.IteratorOutput.Next| |key#0@@94| (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@196|)) ($Box (int_2_U |key#0@@94|))))))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@196|)) ($Box (int_2_U |key#0@@94|))))) (|MutableMapModel.IteratorOutput#Equal| (MutableMapModel.__default.SimpleIterOutput MutableMapModel._default.FindSimpleIter$V@@1 |self#0@@196| (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@1 $ly@@180 |self#0@@196| |key#0@@94|)) |#MutableMapModel.IteratorOutput.Done|))) ($Is (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@1 $ly@@180 |self#0@@196| |key#0@@94|) Tclass.MutableMapModel.SimpleIterator))) :qid |unknown.0:0| :skolemid |4119| :pattern ( (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@1 $ly@@180 |self#0@@196| |key#0@@94|)) ))))
(assert (forall ((MutableMapModel._default.FindSimpleIter$V@@2 T@U) ($ly@@181 T@U) (|self#0@@197| T@U) (|key#0@@95| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FindSimpleIter$V@@2) TyType) (= (type $ly@@181) LayerTypeType)) (= (type |self#0@@197|) DatatypeTypeType)) (and ($Is |self#0@@197| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.FindSimpleIter$V@@2)) (and (<= (LitInt 0) |key#0@@95|) (< |key#0@@95| 18446744073709551616)))) (= (|MutableMapModel.__default.FindSimpleIter#requires| MutableMapModel._default.FindSimpleIter$V@@2 $ly@@181 |self#0@@197| |key#0@@95|) (MutableMapModel.__default.Inv MutableMapModel._default.FindSimpleIter$V@@2 |self#0@@197|))) :qid |unknown.0:0| :skolemid |4120| :pattern ( (|MutableMapModel.__default.FindSimpleIter#requires| MutableMapModel._default.FindSimpleIter$V@@2 $ly@@181 |self#0@@197| |key#0@@95|)) )))
(assert  (=> (<= 123 $FunctionContextHeight) (forall ((MutableMapModel._default.FindSimpleIter$V@@3 T@U) ($ly@@182 T@U) (|self#0@@198| T@U) (|key#0@@96| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FindSimpleIter$V@@3) TyType) (= (type $ly@@182) LayerTypeType)) (= (type |self#0@@198|) DatatypeTypeType)) (or (|MutableMapModel.__default.FindSimpleIter#canCall| MutableMapModel._default.FindSimpleIter$V@@3 |self#0@@198| |key#0@@96|) (and (not (= 123 $FunctionContextHeight)) (and (and ($Is |self#0@@198| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.FindSimpleIter$V@@3)) (and (<= (LitInt 0) |key#0@@96|) (< |key#0@@96| 18446744073709551616))) (MutableMapModel.__default.Inv MutableMapModel._default.FindSimpleIter$V@@3 |self#0@@198|))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@198|) (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.FindSimpleIter$V@@3 (MutableMapModel.LinearHashMap.underlying |self#0@@198|) |key#0@@96|)) (let ((|idx#0| (MutableMapModel.__default.Probe MutableMapModel._default.FindSimpleIter$V@@3 StartFuel_MutableMapModel._default.Probe (MutableMapModel.LinearHashMap.underlying |self#0@@198|) |key#0@@96|))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@198|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@198|))) (=> (not (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@198|)) |idx#0|)))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@198|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@198|))))) (let ((|i#0@@44| (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@198|)) |idx#0|))) |idx#0| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@198|)))))) (and (|MutableMapModel.__default.setUpTo#canCall| MutableMapModel._default.FindSimpleIter$V@@3 |self#0@@198| |i#0@@44|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@198|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@198|)))))))) (= (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@3 ($LS $ly@@182) |self#0@@198| |key#0@@96|) (let ((|idx#0@@0| (MutableMapModel.__default.Probe MutableMapModel._default.FindSimpleIter$V@@3 StartFuel_MutableMapModel._default.Probe (MutableMapModel.LinearHashMap.underlying |self#0@@198|) |key#0@@96|))) (let ((|i#0@@45| (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@198|)) |idx#0@@0|))) |idx#0@@0| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@198|)))))) (let ((|it#0@@41| (|#MutableMapModel.SimpleIterator.SimpleIterator| |i#0@@45| (MutableMapModel.__default.setUpTo MutableMapModel._default.FindSimpleIter$V@@3 |self#0@@198| |i#0@@45|) (|ORD#FromNat| (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@198|))) |i#0@@45|))))) |it#0@@41|)))))) :qid |unknown.0:0| :skolemid |4121| :pattern ( (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@3 ($LS $ly@@182) |self#0@@198| |key#0@@96|)) ))))
(assert  (=> (<= 123 $FunctionContextHeight) (forall ((MutableMapModel._default.FindSimpleIter$V@@4 T@U) ($ly@@183 T@U) (|self#0@@199| T@U) (|key#0@@97| Int) ) (!  (=> (and (and (and (= (type MutableMapModel._default.FindSimpleIter$V@@4) TyType) (= (type $ly@@183) LayerTypeType)) (= (type |self#0@@199|) DatatypeTypeType)) (or (|MutableMapModel.__default.FindSimpleIter#canCall| MutableMapModel._default.FindSimpleIter$V@@4 (Lit |self#0@@199|) (LitInt |key#0@@97|)) (and (not (= 123 $FunctionContextHeight)) (and (and ($Is |self#0@@199| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.FindSimpleIter$V@@4)) (and (<= (LitInt 0) |key#0@@97|) (< |key#0@@97| 18446744073709551616))) (U_2_bool (Lit (bool_2_U (MutableMapModel.__default.Inv MutableMapModel._default.FindSimpleIter$V@@4 (Lit |self#0@@199|))))))))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@199|)) (|MutableMapModel.__default.Probe#canCall| MutableMapModel._default.FindSimpleIter$V@@4 (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|))) (LitInt |key#0@@97|))) (let ((|idx#1| (MutableMapModel.__default.Probe MutableMapModel._default.FindSimpleIter$V@@4 StartFuel_MutableMapModel._default.Probe (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|))) (LitInt |key#0@@97|)))) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@199|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|))))) (=> (not (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|))))) |idx#1|)))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@199|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|))))))) (let ((|i#1@@3| (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|))))) |idx#1|))) |idx#1| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|))))))))) (and (|MutableMapModel.__default.setUpTo#canCall| MutableMapModel._default.FindSimpleIter$V@@4 (Lit |self#0@@199|) |i#1@@3|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q (Lit |self#0@@199|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|)))))))))) (= (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@4 ($LS $ly@@183) (Lit |self#0@@199|) (LitInt |key#0@@97|)) (let ((|idx#1@@0| (MutableMapModel.__default.Probe MutableMapModel._default.FindSimpleIter$V@@4 StartFuel_MutableMapModel._default.Probe (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|))) (LitInt |key#0@@97|)))) (let ((|i#1@@4| (ite (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|))))) |idx#1@@0|))) |idx#1@@0| (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|))))))))) (let ((|it#1| (|#MutableMapModel.SimpleIterator.SimpleIterator| |i#1@@4| (MutableMapModel.__default.setUpTo MutableMapModel._default.FindSimpleIter$V@@4 (Lit |self#0@@199|) |i#1@@4|) (|ORD#FromNat| (- (|Seq#Length| (Lit (MutableMapModel.FixedSizeLinearHashMap.storage (Lit (MutableMapModel.LinearHashMap.underlying (Lit |self#0@@199|)))))) |i#1@@4|))))) |it#1|)))))) :qid |unknown.0:0| :weight 3 :skolemid |4122| :pattern ( (MutableMapModel.__default.FindSimpleIter MutableMapModel._default.FindSimpleIter$V@@4 ($LS $ly@@183) (Lit |self#0@@199|) (LitInt |key#0@@97|))) ))))
(assert (= (type Tclass.NativeTypes.sbyte) TyType))
(assert (= (Tag Tclass.NativeTypes.sbyte) Tagclass.NativeTypes.sbyte))
(assert (= (TagFamily Tclass.NativeTypes.sbyte) tytagFamily$sbyte))
(assert (forall ((bx@@84 T@U) ) (!  (=> (and (= (type bx@@84) BoxType) ($IsBox bx@@84 Tclass.NativeTypes.sbyte)) (and (= ($Box ($Unbox intType bx@@84)) bx@@84) ($Is ($Unbox intType bx@@84) Tclass.NativeTypes.sbyte))) :qid |unknown.0:0| :skolemid |4175| :pattern ( ($IsBox bx@@84 Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@46| T@U) ) (!  (=> (= (type |i#0@@46|) intType) (= ($Is |i#0@@46| Tclass.NativeTypes.sbyte)  (and (<= (LitInt (- 0 128)) (U_2_int |i#0@@46|)) (< (U_2_int |i#0@@46|) 128)))) :qid |unknown.0:0| :skolemid |4176| :pattern ( ($Is |i#0@@46| Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@47| T@U) ($h@@56 T@U) ) (!  (=> (and (= (type |i#0@@47|) intType) (= (type $h@@56) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@47| Tclass.NativeTypes.sbyte $h@@56)) :qid |unknown.0:0| :skolemid |4177| :pattern ( ($IsAlloc |i#0@@47| Tclass.NativeTypes.sbyte $h@@56)) )))
(assert (= (type Tclass.NativeTypes.byte) TyType))
(assert (= (Tag Tclass.NativeTypes.byte) Tagclass.NativeTypes.byte))
(assert (= (TagFamily Tclass.NativeTypes.byte) tytagFamily$byte))
(assert (forall ((bx@@85 T@U) ) (!  (=> (and (= (type bx@@85) BoxType) ($IsBox bx@@85 Tclass.NativeTypes.byte)) (and (= ($Box ($Unbox intType bx@@85)) bx@@85) ($Is ($Unbox intType bx@@85) Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |4178| :pattern ( ($IsBox bx@@85 Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@48| T@U) ) (!  (=> (= (type |i#0@@48|) intType) (= ($Is |i#0@@48| Tclass.NativeTypes.byte)  (and (<= (LitInt 0) (U_2_int |i#0@@48|)) (< (U_2_int |i#0@@48|) 256)))) :qid |unknown.0:0| :skolemid |4179| :pattern ( ($Is |i#0@@48| Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@49| T@U) ($h@@57 T@U) ) (!  (=> (and (= (type |i#0@@49|) intType) (= (type $h@@57) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@49| Tclass.NativeTypes.byte $h@@57)) :qid |unknown.0:0| :skolemid |4180| :pattern ( ($IsAlloc |i#0@@49| Tclass.NativeTypes.byte $h@@57)) )))
(assert (= (type Tclass.NativeTypes.int16) TyType))
(assert (= (Tag Tclass.NativeTypes.int16) Tagclass.NativeTypes.int16))
(assert (= (TagFamily Tclass.NativeTypes.int16) tytagFamily$int16))
(assert (forall ((bx@@86 T@U) ) (!  (=> (and (= (type bx@@86) BoxType) ($IsBox bx@@86 Tclass.NativeTypes.int16)) (and (= ($Box ($Unbox intType bx@@86)) bx@@86) ($Is ($Unbox intType bx@@86) Tclass.NativeTypes.int16))) :qid |unknown.0:0| :skolemid |4181| :pattern ( ($IsBox bx@@86 Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@50| T@U) ) (!  (=> (= (type |i#0@@50|) intType) (= ($Is |i#0@@50| Tclass.NativeTypes.int16)  (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@50|)) (< (U_2_int |i#0@@50|) 32768)))) :qid |unknown.0:0| :skolemid |4182| :pattern ( ($Is |i#0@@50| Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@51| T@U) ($h@@58 T@U) ) (!  (=> (and (= (type |i#0@@51|) intType) (= (type $h@@58) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@51| Tclass.NativeTypes.int16 $h@@58)) :qid |unknown.0:0| :skolemid |4183| :pattern ( ($IsAlloc |i#0@@51| Tclass.NativeTypes.int16 $h@@58)) )))
(assert (= (type Tclass.NativeTypes.uint16) TyType))
(assert (= (Tag Tclass.NativeTypes.uint16) Tagclass.NativeTypes.uint16))
(assert (= (TagFamily Tclass.NativeTypes.uint16) tytagFamily$uint16))
(assert (forall ((bx@@87 T@U) ) (!  (=> (and (= (type bx@@87) BoxType) ($IsBox bx@@87 Tclass.NativeTypes.uint16)) (and (= ($Box ($Unbox intType bx@@87)) bx@@87) ($Is ($Unbox intType bx@@87) Tclass.NativeTypes.uint16))) :qid |unknown.0:0| :skolemid |4184| :pattern ( ($IsBox bx@@87 Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@52| T@U) ) (!  (=> (= (type |i#0@@52|) intType) (= ($Is |i#0@@52| Tclass.NativeTypes.uint16)  (and (<= (LitInt 0) (U_2_int |i#0@@52|)) (< (U_2_int |i#0@@52|) 65536)))) :qid |unknown.0:0| :skolemid |4185| :pattern ( ($Is |i#0@@52| Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@53| T@U) ($h@@59 T@U) ) (!  (=> (and (= (type |i#0@@53|) intType) (= (type $h@@59) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@53| Tclass.NativeTypes.uint16 $h@@59)) :qid |unknown.0:0| :skolemid |4186| :pattern ( ($IsAlloc |i#0@@53| Tclass.NativeTypes.uint16 $h@@59)) )))
(assert (= (type Tclass.NativeTypes.int32) TyType))
(assert (= (Tag Tclass.NativeTypes.int32) Tagclass.NativeTypes.int32))
(assert (= (TagFamily Tclass.NativeTypes.int32) tytagFamily$int32))
(assert (forall ((bx@@88 T@U) ) (!  (=> (and (= (type bx@@88) BoxType) ($IsBox bx@@88 Tclass.NativeTypes.int32)) (and (= ($Box ($Unbox intType bx@@88)) bx@@88) ($Is ($Unbox intType bx@@88) Tclass.NativeTypes.int32))) :qid |unknown.0:0| :skolemid |4187| :pattern ( ($IsBox bx@@88 Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@54| T@U) ) (!  (=> (= (type |i#0@@54|) intType) (= ($Is |i#0@@54| Tclass.NativeTypes.int32)  (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@54|)) (< (U_2_int |i#0@@54|) 2147483648)))) :qid |unknown.0:0| :skolemid |4188| :pattern ( ($Is |i#0@@54| Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@55| T@U) ($h@@60 T@U) ) (!  (=> (and (= (type |i#0@@55|) intType) (= (type $h@@60) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@55| Tclass.NativeTypes.int32 $h@@60)) :qid |unknown.0:0| :skolemid |4189| :pattern ( ($IsAlloc |i#0@@55| Tclass.NativeTypes.int32 $h@@60)) )))
(assert (forall ((|i#0@@56| T@U) ) (!  (=> (= (type |i#0@@56|) intType) (= ($Is |i#0@@56| Tclass.NativeTypes.uint32)  (and (<= (LitInt 0) (U_2_int |i#0@@56|)) (< (U_2_int |i#0@@56|) 4294967296)))) :qid |unknown.0:0| :skolemid |4190| :pattern ( ($Is |i#0@@56| Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@57| T@U) ($h@@61 T@U) ) (!  (=> (and (= (type |i#0@@57|) intType) (= (type $h@@61) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@57| Tclass.NativeTypes.uint32 $h@@61)) :qid |unknown.0:0| :skolemid |4191| :pattern ( ($IsAlloc |i#0@@57| Tclass.NativeTypes.uint32 $h@@61)) )))
(assert (= (type Tclass.NativeTypes.int64) TyType))
(assert (= (Tag Tclass.NativeTypes.int64) Tagclass.NativeTypes.int64))
(assert (= (TagFamily Tclass.NativeTypes.int64) tytagFamily$int64))
(assert (forall ((bx@@89 T@U) ) (!  (=> (and (= (type bx@@89) BoxType) ($IsBox bx@@89 Tclass.NativeTypes.int64)) (and (= ($Box ($Unbox intType bx@@89)) bx@@89) ($Is ($Unbox intType bx@@89) Tclass.NativeTypes.int64))) :qid |unknown.0:0| :skolemid |4192| :pattern ( ($IsBox bx@@89 Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@58| T@U) ) (!  (=> (= (type |i#0@@58|) intType) (= ($Is |i#0@@58| Tclass.NativeTypes.int64)  (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@58|)) (< (U_2_int |i#0@@58|) 9223372036854775808)))) :qid |unknown.0:0| :skolemid |4193| :pattern ( ($Is |i#0@@58| Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@59| T@U) ($h@@62 T@U) ) (!  (=> (and (= (type |i#0@@59|) intType) (= (type $h@@62) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@59| Tclass.NativeTypes.int64 $h@@62)) :qid |unknown.0:0| :skolemid |4194| :pattern ( ($IsAlloc |i#0@@59| Tclass.NativeTypes.int64 $h@@62)) )))
(assert (forall ((|i#0@@60| T@U) ) (!  (=> (= (type |i#0@@60|) intType) (= ($Is |i#0@@60| Tclass.NativeTypes.uint64)  (and (<= (LitInt 0) (U_2_int |i#0@@60|)) (< (U_2_int |i#0@@60|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |4195| :pattern ( ($Is |i#0@@60| Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@61| T@U) ($h@@63 T@U) ) (!  (=> (and (= (type |i#0@@61|) intType) (= (type $h@@63) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@61| Tclass.NativeTypes.uint64 $h@@63)) :qid |unknown.0:0| :skolemid |4196| :pattern ( ($IsAlloc |i#0@@61| Tclass.NativeTypes.uint64 $h@@63)) )))
(assert (= (type Tclass.NativeTypes.nat8) TyType))
(assert (= (Tag Tclass.NativeTypes.nat8) Tagclass.NativeTypes.nat8))
(assert (= (TagFamily Tclass.NativeTypes.nat8) tytagFamily$nat8))
(assert (forall ((bx@@90 T@U) ) (!  (=> (and (= (type bx@@90) BoxType) ($IsBox bx@@90 Tclass.NativeTypes.nat8)) (and (= ($Box ($Unbox intType bx@@90)) bx@@90) ($Is ($Unbox intType bx@@90) Tclass.NativeTypes.nat8))) :qid |unknown.0:0| :skolemid |4197| :pattern ( ($IsBox bx@@90 Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@62| T@U) ) (!  (=> (= (type |i#0@@62|) intType) (= ($Is |i#0@@62| Tclass.NativeTypes.nat8)  (and (<= (LitInt 0) (U_2_int |i#0@@62|)) (< (U_2_int |i#0@@62|) 128)))) :qid |unknown.0:0| :skolemid |4198| :pattern ( ($Is |i#0@@62| Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@63| T@U) ($h@@64 T@U) ) (!  (=> (and (= (type |i#0@@63|) intType) (= (type $h@@64) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@63| Tclass.NativeTypes.nat8 $h@@64)) :qid |unknown.0:0| :skolemid |4199| :pattern ( ($IsAlloc |i#0@@63| Tclass.NativeTypes.nat8 $h@@64)) )))
(assert (= (type Tclass.NativeTypes.nat16) TyType))
(assert (= (Tag Tclass.NativeTypes.nat16) Tagclass.NativeTypes.nat16))
(assert (= (TagFamily Tclass.NativeTypes.nat16) tytagFamily$nat16))
(assert (forall ((bx@@91 T@U) ) (!  (=> (and (= (type bx@@91) BoxType) ($IsBox bx@@91 Tclass.NativeTypes.nat16)) (and (= ($Box ($Unbox intType bx@@91)) bx@@91) ($Is ($Unbox intType bx@@91) Tclass.NativeTypes.nat16))) :qid |unknown.0:0| :skolemid |4200| :pattern ( ($IsBox bx@@91 Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@64| T@U) ) (!  (=> (= (type |i#0@@64|) intType) (= ($Is |i#0@@64| Tclass.NativeTypes.nat16)  (and (<= (LitInt 0) (U_2_int |i#0@@64|)) (< (U_2_int |i#0@@64|) 32768)))) :qid |unknown.0:0| :skolemid |4201| :pattern ( ($Is |i#0@@64| Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@65| T@U) ($h@@65 T@U) ) (!  (=> (and (= (type |i#0@@65|) intType) (= (type $h@@65) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@65| Tclass.NativeTypes.nat16 $h@@65)) :qid |unknown.0:0| :skolemid |4202| :pattern ( ($IsAlloc |i#0@@65| Tclass.NativeTypes.nat16 $h@@65)) )))
(assert (= (type Tclass.NativeTypes.nat32) TyType))
(assert (= (Tag Tclass.NativeTypes.nat32) Tagclass.NativeTypes.nat32))
(assert (= (TagFamily Tclass.NativeTypes.nat32) tytagFamily$nat32))
(assert (forall ((bx@@92 T@U) ) (!  (=> (and (= (type bx@@92) BoxType) ($IsBox bx@@92 Tclass.NativeTypes.nat32)) (and (= ($Box ($Unbox intType bx@@92)) bx@@92) ($Is ($Unbox intType bx@@92) Tclass.NativeTypes.nat32))) :qid |unknown.0:0| :skolemid |4203| :pattern ( ($IsBox bx@@92 Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@66| T@U) ) (!  (=> (= (type |i#0@@66|) intType) (= ($Is |i#0@@66| Tclass.NativeTypes.nat32)  (and (<= (LitInt 0) (U_2_int |i#0@@66|)) (< (U_2_int |i#0@@66|) 2147483648)))) :qid |unknown.0:0| :skolemid |4204| :pattern ( ($Is |i#0@@66| Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@67| T@U) ($h@@66 T@U) ) (!  (=> (and (= (type |i#0@@67|) intType) (= (type $h@@66) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@67| Tclass.NativeTypes.nat32 $h@@66)) :qid |unknown.0:0| :skolemid |4205| :pattern ( ($IsAlloc |i#0@@67| Tclass.NativeTypes.nat32 $h@@66)) )))
(assert (= (type Tclass.NativeTypes.nat64) TyType))
(assert (= (Tag Tclass.NativeTypes.nat64) Tagclass.NativeTypes.nat64))
(assert (= (TagFamily Tclass.NativeTypes.nat64) tytagFamily$nat64))
(assert (forall ((bx@@93 T@U) ) (!  (=> (and (= (type bx@@93) BoxType) ($IsBox bx@@93 Tclass.NativeTypes.nat64)) (and (= ($Box ($Unbox intType bx@@93)) bx@@93) ($Is ($Unbox intType bx@@93) Tclass.NativeTypes.nat64))) :qid |unknown.0:0| :skolemid |4206| :pattern ( ($IsBox bx@@93 Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@68| T@U) ) (!  (=> (= (type |i#0@@68|) intType) (= ($Is |i#0@@68| Tclass.NativeTypes.nat64)  (and (<= (LitInt 0) (U_2_int |i#0@@68|)) (< (U_2_int |i#0@@68|) 9223372036854775808)))) :qid |unknown.0:0| :skolemid |4207| :pattern ( ($Is |i#0@@68| Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@69| T@U) ($h@@67 T@U) ) (!  (=> (and (= (type |i#0@@69|) intType) (= (type $h@@67) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@69| Tclass.NativeTypes.nat64 $h@@67)) :qid |unknown.0:0| :skolemid |4208| :pattern ( ($IsAlloc |i#0@@69| Tclass.NativeTypes.nat64 $h@@67)) )))
(assert (= (type Tclass.NativeTypes.uint128) TyType))
(assert (= (Tag Tclass.NativeTypes.uint128) Tagclass.NativeTypes.uint128))
(assert (= (TagFamily Tclass.NativeTypes.uint128) tytagFamily$uint128))
(assert (forall ((bx@@94 T@U) ) (!  (=> (and (= (type bx@@94) BoxType) ($IsBox bx@@94 Tclass.NativeTypes.uint128)) (and (= ($Box ($Unbox intType bx@@94)) bx@@94) ($Is ($Unbox intType bx@@94) Tclass.NativeTypes.uint128))) :qid |unknown.0:0| :skolemid |4209| :pattern ( ($IsBox bx@@94 Tclass.NativeTypes.uint128)) )))
(assert (forall ((|i#0@@70| T@U) ) (!  (=> (= (type |i#0@@70|) intType) (= ($Is |i#0@@70| Tclass.NativeTypes.uint128)  (and (<= (LitInt 0) (U_2_int |i#0@@70|)) (< (U_2_int |i#0@@70|) 340282366920938463463374607431768211456)))) :qid |unknown.0:0| :skolemid |4210| :pattern ( ($Is |i#0@@70| Tclass.NativeTypes.uint128)) )))
(assert (forall ((|i#0@@71| T@U) ($h@@68 T@U) ) (!  (=> (and (= (type |i#0@@71|) intType) (= (type $h@@68) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@71| Tclass.NativeTypes.uint128 $h@@68)) :qid |unknown.0:0| :skolemid |4211| :pattern ( ($IsAlloc |i#0@@71| Tclass.NativeTypes.uint128 $h@@68)) )))
(assert (= (type Tclass.NativeTypes.__default) TyType))
(assert (= (Tag Tclass.NativeTypes.__default) Tagclass.NativeTypes.__default))
(assert (= (TagFamily Tclass.NativeTypes.__default) tytagFamily$_default))
(assert (forall ((bx@@95 T@U) ) (!  (=> (and (= (type bx@@95) BoxType) ($IsBox bx@@95 Tclass.NativeTypes.__default)) (and (= ($Box ($Unbox refType bx@@95)) bx@@95) ($Is ($Unbox refType bx@@95) Tclass.NativeTypes.__default))) :qid |unknown.0:0| :skolemid |4212| :pattern ( ($IsBox bx@@95 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@11 T@U) ) (!  (=> (= (type $o@@11) refType) (= ($Is $o@@11 Tclass.NativeTypes.__default)  (or (= $o@@11 null) (= (dtype $o@@11) Tclass.NativeTypes.__default)))) :qid |unknown.0:0| :skolemid |4213| :pattern ( ($Is $o@@11 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@12 T@U) ($h@@69 T@U) ) (!  (=> (and (= (type $o@@12) refType) (= (type $h@@69) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@12 Tclass.NativeTypes.__default $h@@69)  (or (= $o@@12 null) (U_2_bool (MapType1Select (MapType0Select $h@@69 $o@@12) alloc))))) :qid |unknown.0:0| :skolemid |4214| :pattern ( ($IsAlloc $o@@12 Tclass.NativeTypes.__default $h@@69)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint64Size) (< NativeTypes.__default.Uint64Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint64Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint32Size) (< NativeTypes.__default.Uint32Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint32Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint16Size) (< NativeTypes.__default.Uint16Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint16Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true true)))
(assert (= |NativeTypes.__default.Uint64UpperBound#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true true)))
(assert (= |NativeTypes.__default.Uint32UpperBound#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert (= (DatatypeCtorId |#Options.Option.None|) |##Options.Option.None|))
(assert (forall ((d@@74 T@U) ) (!  (=> (= (type d@@74) DatatypeTypeType) (= (Options.Option.None_q d@@74) (= (DatatypeCtorId d@@74) |##Options.Option.None|))) :qid |unknown.0:0| :skolemid |4215| :pattern ( (Options.Option.None_q d@@74)) )))
(assert (forall ((d@@75 T@U) ) (!  (=> (and (= (type d@@75) DatatypeTypeType) (Options.Option.None_q d@@75)) (= d@@75 |#Options.Option.None|)) :qid |unknown.0:0| :skolemid |4216| :pattern ( (Options.Option.None_q d@@75)) )))
(assert (forall ((Options.Option$V@@2 T@U) ) (!  (=> (= (type Options.Option$V@@2) TyType) ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) :qid |unknown.0:0| :skolemid |4217| :pattern ( ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) )))
(assert (forall ((Options.Option$V@@3 T@U) ($h@@70 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@3) TyType) (= (type $h@@70) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@70)) ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@70)) :qid |unknown.0:0| :skolemid |4218| :pattern ( ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@70)) )))
(assert (= |#Options.Option.None| (Lit |#Options.Option.None|)))
(assert (forall ((|a#5#0#0@@0| T@U) ) (!  (=> (= (type |a#5#0#0@@0|) BoxType) (= (DatatypeCtorId (|#Options.Option.Some| |a#5#0#0@@0|)) |##Options.Option.Some|)) :qid |Optionsdfy.5:36| :skolemid |4219| :pattern ( (|#Options.Option.Some| |a#5#0#0@@0|)) )))
(assert (forall ((d@@76 T@U) ) (!  (=> (= (type d@@76) DatatypeTypeType) (= (Options.Option.Some_q d@@76) (= (DatatypeCtorId d@@76) |##Options.Option.Some|))) :qid |unknown.0:0| :skolemid |4220| :pattern ( (Options.Option.Some_q d@@76)) )))
(assert (forall ((d@@77 T@U) ) (!  (=> (and (= (type d@@77) DatatypeTypeType) (Options.Option.Some_q d@@77)) (exists ((|a#6#0#0@@0| T@U) ) (!  (and (= (type |a#6#0#0@@0|) BoxType) (= d@@77 (|#Options.Option.Some| |a#6#0#0@@0|))) :qid |Optionsdfy.5:36| :skolemid |4221| :no-pattern (type |a#6#0#0@@0|) :no-pattern (U_2_int |a#6#0#0@@0|) :no-pattern (U_2_bool |a#6#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |4222| :pattern ( (Options.Option.Some_q d@@77)) )))
(assert (forall ((Options.Option$V@@4 T@U) (|a#7#0#0@@0| T@U) ) (!  (=> (and (= (type Options.Option$V@@4) TyType) (= (type |a#7#0#0@@0|) BoxType)) (= ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4)) ($IsBox |a#7#0#0@@0| Options.Option$V@@4))) :qid |unknown.0:0| :skolemid |4223| :pattern ( ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4))) )))
(assert (forall ((Options.Option$V@@5 T@U) (|a#8#0#0@@0| T@U) ($h@@71 T@U) ) (!  (=> (and (and (and (= (type Options.Option$V@@5) TyType) (= (type |a#8#0#0@@0|) BoxType)) (= (type $h@@71) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@71)) (= ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@71) ($IsAllocBox |a#8#0#0@@0| Options.Option$V@@5 $h@@71))) :qid |unknown.0:0| :skolemid |4224| :pattern ( ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@71)) )))
(assert (forall ((d@@78 T@U) (Options.Option$V@@6 T@U) ($h@@72 T@U) ) (!  (=> (and (and (and (= (type d@@78) DatatypeTypeType) (= (type Options.Option$V@@6) TyType)) (= (type $h@@72) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@72) (and (Options.Option.Some_q d@@78) ($IsAlloc d@@78 (Tclass.Options.Option Options.Option$V@@6) $h@@72)))) ($IsAllocBox (Options.Option.value d@@78) Options.Option$V@@6 $h@@72)) :qid |unknown.0:0| :skolemid |4225| :pattern ( ($IsAllocBox (Options.Option.value d@@78) Options.Option$V@@6 $h@@72)) )))
(assert (forall ((|a#9#0#0| T@U) ) (!  (=> (= (type |a#9#0#0|) BoxType) (= (|#Options.Option.Some| (Lit |a#9#0#0|)) (Lit (|#Options.Option.Some| |a#9#0#0|)))) :qid |Optionsdfy.5:36| :skolemid |4226| :pattern ( (|#Options.Option.Some| (Lit |a#9#0#0|))) )))
(assert (forall ((|a#10#0#0| T@U) ) (!  (=> (= (type |a#10#0#0|) BoxType) (= (Options.Option.value (|#Options.Option.Some| |a#10#0#0|)) |a#10#0#0|)) :qid |Optionsdfy.5:36| :skolemid |4227| :pattern ( (|#Options.Option.Some| |a#10#0#0|)) )))
(assert (forall ((|a#11#0#0| T@U) ) (!  (=> (= (type |a#11#0#0|) BoxType) (< (BoxRank |a#11#0#0|) (DtRank (|#Options.Option.Some| |a#11#0#0|)))) :qid |Optionsdfy.5:36| :skolemid |4228| :pattern ( (|#Options.Option.Some| |a#11#0#0|)) )))
(assert (forall ((d@@79 T@U) ) (!  (=> (and (= (type d@@79) DatatypeTypeType) (|$IsA#Options.Option| d@@79)) (or (Options.Option.None_q d@@79) (Options.Option.Some_q d@@79))) :qid |unknown.0:0| :skolemid |4229| :pattern ( (|$IsA#Options.Option| d@@79)) )))
(assert (forall ((Options.Option$V@@7 T@U) (d@@80 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@7) TyType) (= (type d@@80) DatatypeTypeType)) ($Is d@@80 (Tclass.Options.Option Options.Option$V@@7))) (or (Options.Option.None_q d@@80) (Options.Option.Some_q d@@80))) :qid |unknown.0:0| :skolemid |4230| :pattern ( (Options.Option.Some_q d@@80) ($Is d@@80 (Tclass.Options.Option Options.Option$V@@7))) :pattern ( (Options.Option.None_q d@@80) ($Is d@@80 (Tclass.Options.Option Options.Option$V@@7))) )))
(assert (forall ((a@@135 T@U) (b@@85 T@U) ) (!  (=> (and (and (= (type a@@135) DatatypeTypeType) (= (type b@@85) DatatypeTypeType)) (and (Options.Option.None_q a@@135) (Options.Option.None_q b@@85))) (= (|Options.Option#Equal| a@@135 b@@85) true)) :qid |unknown.0:0| :skolemid |4231| :pattern ( (|Options.Option#Equal| a@@135 b@@85) (Options.Option.None_q a@@135)) :pattern ( (|Options.Option#Equal| a@@135 b@@85) (Options.Option.None_q b@@85)) )))
(assert (forall ((a@@136 T@U) (b@@86 T@U) ) (!  (=> (and (and (= (type a@@136) DatatypeTypeType) (= (type b@@86) DatatypeTypeType)) (and (Options.Option.Some_q a@@136) (Options.Option.Some_q b@@86))) (= (|Options.Option#Equal| a@@136 b@@86) (= (Options.Option.value a@@136) (Options.Option.value b@@86)))) :qid |unknown.0:0| :skolemid |4232| :pattern ( (|Options.Option#Equal| a@@136 b@@86) (Options.Option.Some_q a@@136)) :pattern ( (|Options.Option#Equal| a@@136 b@@86) (Options.Option.Some_q b@@86)) )))
(assert (forall ((a@@137 T@U) (b@@87 T@U) ) (!  (=> (and (= (type a@@137) DatatypeTypeType) (= (type b@@87) DatatypeTypeType)) (= (|Options.Option#Equal| a@@137 b@@87) (= a@@137 b@@87))) :qid |unknown.0:0| :skolemid |4233| :pattern ( (|Options.Option#Equal| a@@137 b@@87)) )))
(assert (= (type Tclass.Options.__default) TyType))
(assert (= (Tag Tclass.Options.__default) Tagclass.Options.__default))
(assert (= (TagFamily Tclass.Options.__default) tytagFamily$_default))
(assert (forall ((bx@@96 T@U) ) (!  (=> (and (= (type bx@@96) BoxType) ($IsBox bx@@96 Tclass.Options.__default)) (and (= ($Box ($Unbox refType bx@@96)) bx@@96) ($Is ($Unbox refType bx@@96) Tclass.Options.__default))) :qid |unknown.0:0| :skolemid |4234| :pattern ( ($IsBox bx@@96 Tclass.Options.__default)) )))
(assert (forall (($o@@13 T@U) ) (!  (=> (= (type $o@@13) refType) (= ($Is $o@@13 Tclass.Options.__default)  (or (= $o@@13 null) (= (dtype $o@@13) Tclass.Options.__default)))) :qid |unknown.0:0| :skolemid |4235| :pattern ( ($Is $o@@13 Tclass.Options.__default)) )))
(assert (forall (($o@@14 T@U) ($h@@73 T@U) ) (!  (=> (and (= (type $o@@14) refType) (= (type $h@@73) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@14 Tclass.Options.__default $h@@73)  (or (= $o@@14 null) (U_2_bool (MapType1Select (MapType0Select $h@@73 $o@@14) alloc))))) :qid |unknown.0:0| :skolemid |4236| :pattern ( ($IsAlloc $o@@14 Tclass.Options.__default $h@@73)) )))
(assert (forall ((arg0@@306 T@U) (arg1@@156 T@U) (arg2@@98 T@U) (arg3@@56 T@U) (arg4@@35 T@U) ) (! (= (type (Options.__default.MapOption arg0@@306 arg1@@156 arg2@@98 arg3@@56 arg4@@35)) DatatypeTypeType) :qid |funType:Options.__default.MapOption| :pattern ( (Options.__default.MapOption arg0@@306 arg1@@156 arg2@@98 arg3@@56 arg4@@35)) )))
(assert (forall ((Options._default.MapOption$V0 T@U) (Options._default.MapOption$V1 T@U) ($h0 T@U) ($h1 T@U) (|opt#0| T@U) (|f#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.MapOption$V0) TyType) (= (type Options._default.MapOption$V1) TyType)) (= (type $h0) (MapType0Type refType MapType1Type))) (= (type $h1) (MapType0Type refType MapType1Type))) (= (type |opt#0|) DatatypeTypeType)) (= (type |f#0@@19|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@19|) (and ($Is |opt#0| (Tclass.Options.Option Options._default.MapOption$V0)) ($Is |f#0@@19| (Tclass._System.___hFunc1 Options._default.MapOption$V0 Options._default.MapOption$V1))))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1)))) (forall (($o@@15 T@U) ($f T@U) ) (! (let ((alpha@@6 (FieldTypeInv0 (type $f)))) (=> (and (and (= (type $o@@15) refType) (= (type $f) (FieldType alpha@@6))) (and (not (= $o@@15 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0|) (Reads1 Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |f#0@@19| (Options.Option.value |opt#0|)) (|Set#Empty| BoxType)) ($Box $o@@15))))) (= (MapType1Select (MapType0Select $h0 $o@@15) $f) (MapType1Select (MapType0Select $h1 $o@@15) $f)))) :qid |unknown.0:0| :skolemid |4237| :no-pattern (type $o@@15) :no-pattern (type $f) :no-pattern (U_2_int $o@@15) :no-pattern (U_2_bool $o@@15) :no-pattern (U_2_int $f) :no-pattern (U_2_bool $f) ))) (= (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@19|) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@19|))) :qid |unknown.0:0| :skolemid |4238| :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@19|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@0 T@U) (Options._default.MapOption$V1@@0 T@U) ($Heap T@U) (|opt#0@@0| T@U) (|f#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@0) TyType) (= (type Options._default.MapOption$V1@@0) TyType)) (= (type $Heap) (MapType0Type refType MapType1Type))) (= (type |opt#0@@0|) DatatypeTypeType)) (= (type |f#0@@20|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@20|) (and (and (and ($IsGoodHeap $Heap) ($Is |opt#0@@0| (Tclass.Options.Option Options._default.MapOption$V0@@0))) ($Is |f#0@@20| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0))) (=> (Options.Option.Some_q |opt#0@@0|) (Requires1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |f#0@@20| (Options.Option.value |opt#0@@0|)))))) (and (and (= (Options.Option.Some_q |opt#0@@0|) (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@20|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@20|)) (= (Options.Option.value (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@20|)) (Apply1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |f#0@@20| (Options.Option.value |opt#0@@0|))))) ($Is (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@20|) (Tclass.Options.Option Options._default.MapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |4239| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@20|)) ))))
(assert (forall ((Options._default.MapOption$V0@@1 T@U) (Options._default.MapOption$V1@@1 T@U) ($Heap@@0 T@U) (|opt#0@@1| T@U) (|f#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@1) TyType) (= (type Options._default.MapOption$V1@@1) TyType)) (= (type $Heap@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0@@1|) DatatypeTypeType)) (= (type |f#0@@21|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@0) ($Is |opt#0@@1| (Tclass.Options.Option Options._default.MapOption$V0@@1))) ($Is |f#0@@21| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1)))) (= (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |opt#0@@1| |f#0@@21|)  (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |f#0@@21| (Options.Option.value |opt#0@@1|))))) :qid |unknown.0:0| :skolemid |4240| :pattern ( (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |opt#0@@1| |f#0@@21|) ($IsGoodHeap $Heap@@0)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@2 T@U) (Options._default.MapOption$V1@@2 T@U) ($Heap@@1 T@U) (|opt#0@@2| T@U) (|f#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@2) TyType) (= (type Options._default.MapOption$V1@@2) TyType)) (= (type $Heap@@1) (MapType0Type refType MapType1Type))) (= (type |opt#0@@2|) DatatypeTypeType)) (= (type |f#0@@22|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@22|) (and (and (and ($IsGoodHeap $Heap@@1) ($Is |opt#0@@2| (Tclass.Options.Option Options._default.MapOption$V0@@2))) ($Is |f#0@@22| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2))) (=> (Options.Option.Some_q |opt#0@@2|) (Requires1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |f#0@@22| (Options.Option.value |opt#0@@2|)))))) (= (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@22|) (ite (Options.Option.None_q |opt#0@@2|) |#Options.Option.None| (let ((|v#0| (Options.Option.value |opt#0@@2|))) (|#Options.Option.Some| (Apply1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |f#0@@22| |v#0|)))))) :qid |unknown.0:0| :skolemid |4241| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@22|) ($IsGoodHeap $Heap@@1)) ))))
(assert (forall ((arg0@@307 T@U) (arg1@@157 T@U) (arg2@@99 T@U) (arg3@@57 T@U) (arg4@@36 T@U) ) (! (= (type (Options.__default.FlatMapOption arg0@@307 arg1@@157 arg2@@99 arg3@@57 arg4@@36)) DatatypeTypeType) :qid |funType:Options.__default.FlatMapOption| :pattern ( (Options.__default.FlatMapOption arg0@@307 arg1@@157 arg2@@99 arg3@@57 arg4@@36)) )))
(assert (forall ((Options._default.FlatMapOption$V0 T@U) (Options._default.FlatMapOption$V1 T@U) ($h0@@0 T@U) ($h1@@0 T@U) (|opt#0@@3| T@U) (|f#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.FlatMapOption$V0) TyType) (= (type Options._default.FlatMapOption$V1) TyType)) (= (type $h0@@0) (MapType0Type refType MapType1Type))) (= (type $h1@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0@@3|) DatatypeTypeType)) (= (type |f#0@@23|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@23|) (and ($Is |opt#0@@3| (Tclass.Options.Option Options._default.FlatMapOption$V0)) ($Is |f#0@@23| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1)))))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0)))) (forall (($o@@16 T@U) ($f@@0 T@U) ) (! (let ((alpha@@7 (FieldTypeInv0 (type $f@@0)))) (=> (and (and (= (type $o@@16) refType) (= (type $f@@0) (FieldType alpha@@7))) (and (not (= $o@@16 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0@@3|) (Reads1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1) $h0@@0 |f#0@@23| (Options.Option.value |opt#0@@3|)) (|Set#Empty| BoxType)) ($Box $o@@16))))) (= (MapType1Select (MapType0Select $h0@@0 $o@@16) $f@@0) (MapType1Select (MapType0Select $h1@@0 $o@@16) $f@@0)))) :qid |unknown.0:0| :skolemid |4242| :no-pattern (type $o@@16) :no-pattern (type $f@@0) :no-pattern (U_2_int $o@@16) :no-pattern (U_2_bool $o@@16) :no-pattern (U_2_int $f@@0) :no-pattern (U_2_bool $f@@0) ))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@23|) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@23|))) :qid |unknown.0:0| :skolemid |4243| :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@23|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@0 T@U) (Options._default.FlatMapOption$V1@@0 T@U) ($Heap@@2 T@U) (|opt#0@@4| T@U) (|f#0@@24| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@0) TyType) (= (type Options._default.FlatMapOption$V1@@0) TyType)) (= (type $Heap@@2) (MapType0Type refType MapType1Type))) (= (type |opt#0@@4|) DatatypeTypeType)) (= (type |f#0@@24|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@24|) (and (and (and ($IsGoodHeap $Heap@@2) ($Is |opt#0@@4| (Tclass.Options.Option Options._default.FlatMapOption$V0@@0))) ($Is |f#0@@24| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) (=> (Options.Option.Some_q |opt#0@@4|) (Requires1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@24| (Options.Option.value |opt#0@@4|)))))) (and (and (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@24| (Options.Option.value |opt#0@@4|))))) (Options.Option.Some_q (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@24|))) (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@24| (Options.Option.value |opt#0@@4|))))) (= (Options.Option.value (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@24|)) (Options.Option.value ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@24| (Options.Option.value |opt#0@@4|))))))) ($Is (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@24|) (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |4244| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@24|)) ))))
(assert (forall ((Options._default.FlatMapOption$V0@@1 T@U) (Options._default.FlatMapOption$V1@@1 T@U) ($Heap@@3 T@U) (|opt#0@@5| T@U) (|f#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@1) TyType) (= (type Options._default.FlatMapOption$V1@@1) TyType)) (= (type $Heap@@3) (MapType0Type refType MapType1Type))) (= (type |opt#0@@5|) DatatypeTypeType)) (= (type |f#0@@25|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@3) ($Is |opt#0@@5| (Tclass.Options.Option Options._default.FlatMapOption$V0@@1))) ($Is |f#0@@25| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1))))) (= (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@3 |opt#0@@5| |f#0@@25|)  (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@3 |f#0@@25| (Options.Option.value |opt#0@@5|))))) :qid |unknown.0:0| :skolemid |4245| :pattern ( (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@3 |opt#0@@5| |f#0@@25|) ($IsGoodHeap $Heap@@3)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@2 T@U) (Options._default.FlatMapOption$V1@@2 T@U) ($Heap@@4 T@U) (|opt#0@@6| T@U) (|f#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@2) TyType) (= (type Options._default.FlatMapOption$V1@@2) TyType)) (= (type $Heap@@4) (MapType0Type refType MapType1Type))) (= (type |opt#0@@6|) DatatypeTypeType)) (= (type |f#0@@26|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@26|) (and (and (and ($IsGoodHeap $Heap@@4) ($Is |opt#0@@6| (Tclass.Options.Option Options._default.FlatMapOption$V0@@2))) ($Is |f#0@@26| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2)))) (=> (Options.Option.Some_q |opt#0@@6|) (Requires1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@4 |f#0@@26| (Options.Option.value |opt#0@@6|)))))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@26|) (ite (Options.Option.None_q |opt#0@@6|) |#Options.Option.None| (let ((|v#0@@0| (Options.Option.value |opt#0@@6|))) ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@4 |f#0@@26| |v#0@@0|)))))) :qid |unknown.0:0| :skolemid |4246| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@26|) ($IsGoodHeap $Heap@@4)) ))))
(assert (= (type Tclass.SequencesLite.__default) TyType))
(assert (= (Tag Tclass.SequencesLite.__default) Tagclass.SequencesLite.__default))
(assert (= (TagFamily Tclass.SequencesLite.__default) tytagFamily$_default))
(assert (forall ((bx@@97 T@U) ) (!  (=> (and (= (type bx@@97) BoxType) ($IsBox bx@@97 Tclass.SequencesLite.__default)) (and (= ($Box ($Unbox refType bx@@97)) bx@@97) ($Is ($Unbox refType bx@@97) Tclass.SequencesLite.__default))) :qid |unknown.0:0| :skolemid |4247| :pattern ( ($IsBox bx@@97 Tclass.SequencesLite.__default)) )))
(assert (forall (($o@@17 T@U) ) (!  (=> (= (type $o@@17) refType) (= ($Is $o@@17 Tclass.SequencesLite.__default)  (or (= $o@@17 null) (= (dtype $o@@17) Tclass.SequencesLite.__default)))) :qid |unknown.0:0| :skolemid |4248| :pattern ( ($Is $o@@17 Tclass.SequencesLite.__default)) )))
(assert (forall (($o@@18 T@U) ($h@@74 T@U) ) (!  (=> (and (= (type $o@@18) refType) (= (type $h@@74) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@18 Tclass.SequencesLite.__default $h@@74)  (or (= $o@@18 null) (U_2_bool (MapType1Select (MapType0Select $h@@74 $o@@18) alloc))))) :qid |unknown.0:0| :skolemid |4249| :pattern ( ($IsAlloc $o@@18 Tclass.SequencesLite.__default $h@@74)) )))
(assert (forall ((arg0@@308 T@U) (arg1@@158 T@U) ) (! (= (type (SequencesLite.__default.Last arg0@@308 arg1@@158)) BoxType) :qid |funType:SequencesLite.__default.Last| :pattern ( (SequencesLite.__default.Last arg0@@308 arg1@@158)) )))
(assert  (=> true (forall ((SequencesLite._default.Last$E T@U) (|run#0| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E) TyType) (= (type |run#0|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E |run#0|) (and ($Is |run#0| (TSeq SequencesLite._default.Last$E)) (> (|Seq#Length| |run#0|) 0)))) ($IsBox (SequencesLite.__default.Last SequencesLite._default.Last$E |run#0|) SequencesLite._default.Last$E)) :qid |unknown.0:0| :skolemid |4250| :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E |run#0|)) ))))
(assert (forall ((SequencesLite._default.Last$E@@0 T@U) (|run#0@@0| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@0) TyType) (= (type |run#0@@0|) (SeqType BoxType))) ($Is |run#0@@0| (TSeq SequencesLite._default.Last$E@@0))) (= (|SequencesLite.__default.Last#requires| SequencesLite._default.Last$E@@0 |run#0@@0|) (> (|Seq#Length| |run#0@@0|) 0))) :qid |unknown.0:0| :skolemid |4251| :pattern ( (|SequencesLite.__default.Last#requires| SequencesLite._default.Last$E@@0 |run#0@@0|)) )))
(assert  (=> true (forall ((SequencesLite._default.Last$E@@1 T@U) (|run#0@@1| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@1) TyType) (= (type |run#0@@1|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E@@1 |run#0@@1|) (and ($Is |run#0@@1| (TSeq SequencesLite._default.Last$E@@1)) (> (|Seq#Length| |run#0@@1|) 0)))) (= (SequencesLite.__default.Last SequencesLite._default.Last$E@@1 |run#0@@1|) (|Seq#Index| |run#0@@1| (- (|Seq#Length| |run#0@@1|) 1)))) :qid |unknown.0:0| :skolemid |4252| :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E@@1 |run#0@@1|)) ))))
(assert  (=> true (forall ((SequencesLite._default.Last$E@@2 T@U) (|run#0@@2| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@2) TyType) (= (type |run#0@@2|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E@@2 (Lit |run#0@@2|)) (and ($Is |run#0@@2| (TSeq SequencesLite._default.Last$E@@2)) (> (|Seq#Length| (Lit |run#0@@2|)) 0)))) (= (SequencesLite.__default.Last SequencesLite._default.Last$E@@2 (Lit |run#0@@2|)) (|Seq#Index| (Lit |run#0@@2|) (- (|Seq#Length| (Lit |run#0@@2|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |4253| :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E@@2 (Lit |run#0@@2|))) ))))
(assert (forall ((arg0@@309 T@U) (arg1@@159 T@U) ) (! (= (type (SequencesLite.__default.DropLast arg0@@309 arg1@@159)) (SeqType BoxType)) :qid |funType:SequencesLite.__default.DropLast| :pattern ( (SequencesLite.__default.DropLast arg0@@309 arg1@@159)) )))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E T@U) (|run#0@@3| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E) TyType) (= (type |run#0@@3|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E |run#0@@3|) (and ($Is |run#0@@3| (TSeq SequencesLite._default.DropLast$E)) (> (|Seq#Length| |run#0@@3|) 0)))) ($Is (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E |run#0@@3|) (TSeq SequencesLite._default.DropLast$E))) :qid |unknown.0:0| :skolemid |4254| :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E |run#0@@3|)) ))))
(assert (forall ((SequencesLite._default.DropLast$E@@0 T@U) (|run#0@@4| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@0) TyType) (= (type |run#0@@4|) (SeqType BoxType))) ($Is |run#0@@4| (TSeq SequencesLite._default.DropLast$E@@0))) (= (|SequencesLite.__default.DropLast#requires| SequencesLite._default.DropLast$E@@0 |run#0@@4|) (> (|Seq#Length| |run#0@@4|) 0))) :qid |unknown.0:0| :skolemid |4255| :pattern ( (|SequencesLite.__default.DropLast#requires| SequencesLite._default.DropLast$E@@0 |run#0@@4|)) )))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E@@1 T@U) (|run#0@@5| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@1) TyType) (= (type |run#0@@5|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E@@1 |run#0@@5|) (and ($Is |run#0@@5| (TSeq SequencesLite._default.DropLast$E@@1)) (> (|Seq#Length| |run#0@@5|) 0)))) (= (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@1 |run#0@@5|) (|Seq#Take| |run#0@@5| (- (|Seq#Length| |run#0@@5|) 1)))) :qid |unknown.0:0| :skolemid |4256| :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@1 |run#0@@5|)) ))))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E@@2 T@U) (|run#0@@6| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@2) TyType) (= (type |run#0@@6|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E@@2 (Lit |run#0@@6|)) (and ($Is |run#0@@6| (TSeq SequencesLite._default.DropLast$E@@2)) (> (|Seq#Length| (Lit |run#0@@6|)) 0)))) (= (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@2 (Lit |run#0@@6|)) (|Seq#Take| (Lit |run#0@@6|) (- (|Seq#Length| (Lit |run#0@@6|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |4257| :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@2 (Lit |run#0@@6|))) ))))
(assert (= (type Tclass.Mathematics.__default) TyType))
(assert (= (Tag Tclass.Mathematics.__default) Tagclass.Mathematics.__default))
(assert (= (TagFamily Tclass.Mathematics.__default) tytagFamily$_default))
(assert (forall ((bx@@98 T@U) ) (!  (=> (and (= (type bx@@98) BoxType) ($IsBox bx@@98 Tclass.Mathematics.__default)) (and (= ($Box ($Unbox refType bx@@98)) bx@@98) ($Is ($Unbox refType bx@@98) Tclass.Mathematics.__default))) :qid |unknown.0:0| :skolemid |4258| :pattern ( ($IsBox bx@@98 Tclass.Mathematics.__default)) )))
(assert (forall (($o@@19 T@U) ) (!  (=> (= (type $o@@19) refType) (= ($Is $o@@19 Tclass.Mathematics.__default)  (or (= $o@@19 null) (= (dtype $o@@19) Tclass.Mathematics.__default)))) :qid |unknown.0:0| :skolemid |4259| :pattern ( ($Is $o@@19 Tclass.Mathematics.__default)) )))
(assert (forall (($o@@20 T@U) ($h@@75 T@U) ) (!  (=> (and (= (type $o@@20) refType) (= (type $h@@75) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@20 Tclass.Mathematics.__default $h@@75)  (or (= $o@@20 null) (U_2_bool (MapType1Select (MapType0Select $h@@75 $o@@20) alloc))))) :qid |unknown.0:0| :skolemid |4260| :pattern ( ($IsAlloc $o@@20 Tclass.Mathematics.__default $h@@75)) )))
(assert  (=> true (forall ((|a#0@@25| Int) (|b#0@@19| Int) ) (!  (=> true true) :qid |mathematicsidfy.6:15| :skolemid |4261| :pattern ( (Mathematics.__default.min |a#0@@25| |b#0@@19|)) ))))
(assert (forall ((|a#0@@26| Int) (|b#0@@20| Int) ) (! (= (|Mathematics.__default.min#requires| |a#0@@26| |b#0@@20|) true) :qid |mathematicsidfy.6:15| :skolemid |4262| :pattern ( (|Mathematics.__default.min#requires| |a#0@@26| |b#0@@20|)) )))
(assert  (=> true (forall ((|a#0@@27| Int) (|b#0@@21| Int) ) (!  (=> true (= (Mathematics.__default.min |a#0@@27| |b#0@@21|) (ite (< |a#0@@27| |b#0@@21|) |a#0@@27| |b#0@@21|))) :qid |mathematicsidfy.6:15| :skolemid |4263| :pattern ( (Mathematics.__default.min |a#0@@27| |b#0@@21|)) ))))
(assert  (=> true (forall ((|a#0@@28| Int) (|b#0@@22| Int) ) (!  (=> true (= (Mathematics.__default.min (LitInt |a#0@@28|) (LitInt |b#0@@22|)) (ite (< |a#0@@28| |b#0@@22|) |a#0@@28| |b#0@@22|))) :qid |mathematicsidfy.6:15| :weight 3 :skolemid |4264| :pattern ( (Mathematics.__default.min (LitInt |a#0@@28|) (LitInt |b#0@@22|))) ))))
(assert  (=> true (forall ((|a#0@@29| Int) (|b#0@@23| Int) ) (!  (=> true true) :qid |mathematicsidfy.14:15| :skolemid |4265| :pattern ( (Mathematics.__default.max |a#0@@29| |b#0@@23|)) ))))
(assert (forall ((|a#0@@30| Int) (|b#0@@24| Int) ) (! (= (|Mathematics.__default.max#requires| |a#0@@30| |b#0@@24|) true) :qid |mathematicsidfy.14:15| :skolemid |4266| :pattern ( (|Mathematics.__default.max#requires| |a#0@@30| |b#0@@24|)) )))
(assert  (=> true (forall ((|a#0@@31| Int) (|b#0@@25| Int) ) (!  (=> true (= (Mathematics.__default.max |a#0@@31| |b#0@@25|) (ite (< |a#0@@31| |b#0@@25|) |b#0@@25| |a#0@@31|))) :qid |mathematicsidfy.14:15| :skolemid |4267| :pattern ( (Mathematics.__default.max |a#0@@31| |b#0@@25|)) ))))
(assert  (=> true (forall ((|a#0@@32| Int) (|b#0@@26| Int) ) (!  (=> true (= (Mathematics.__default.max (LitInt |a#0@@32|) (LitInt |b#0@@26|)) (ite (< |a#0@@32| |b#0@@26|) |b#0@@26| |a#0@@32|))) :qid |mathematicsidfy.14:15| :weight 3 :skolemid |4268| :pattern ( (Mathematics.__default.max (LitInt |a#0@@32|) (LitInt |b#0@@26|))) ))))
(assert (forall ((arg0@@310 T@U) (arg1@@160 T@U) ) (! (= (type (Mathematics.__default.Set arg0@@310 arg1@@160)) (MapType0Type BoxType boolType)) :qid |funType:Mathematics.__default.Set| :pattern ( (Mathematics.__default.Set arg0@@310 arg1@@160)) )))
(assert  (=> true (forall ((Mathematics._default.Set$T T@U) (|ms#0| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T) TyType) (= (type |ms#0|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T |ms#0|) ($Is |ms#0| (TMultiSet Mathematics._default.Set$T)))) ($Is (Mathematics.__default.Set Mathematics._default.Set$T |ms#0|) (TSet Mathematics._default.Set$T))) :qid |unknown.0:0| :skolemid |4269| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T |ms#0|)) ))))
(assert (forall ((Mathematics._default.Set$T@@0 T@U) (|ms#0@@0| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@0) TyType) (= (type |ms#0@@0|) (MapType0Type BoxType intType))) ($Is |ms#0@@0| (TMultiSet Mathematics._default.Set$T@@0))) (= (|Mathematics.__default.Set#requires| Mathematics._default.Set$T@@0 |ms#0@@0|) true)) :qid |unknown.0:0| :skolemid |4270| :pattern ( (|Mathematics.__default.Set#requires| Mathematics._default.Set$T@@0 |ms#0@@0|)) )))
(assert (forall ((arg0@@311 T@U) (arg1@@161 T@U) (arg2@@100 Int) ) (! (= (type (|lambda#230| arg0@@311 arg1@@161 arg2@@100)) (MapType0Type BoxType boolType)) :qid |funType:lambda#230| :pattern ( (|lambda#230| arg0@@311 arg1@@161 arg2@@100)) )))
(assert  (=> true (forall ((Mathematics._default.Set$T@@1 T@U) (|ms#0@@1| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@1) TyType) (= (type |ms#0@@1|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T@@1 |ms#0@@1|) ($Is |ms#0@@1| (TMultiSet Mathematics._default.Set$T@@1)))) (= (Mathematics.__default.Set Mathematics._default.Set$T@@1 |ms#0@@1|) (|lambda#230| Mathematics._default.Set$T@@1 |ms#0@@1| 0))) :qid |unknown.0:0| :skolemid |4271| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T@@1 |ms#0@@1|)) ))))
(assert  (=> true (forall ((Mathematics._default.Set$T@@2 T@U) (|ms#0@@2| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@2) TyType) (= (type |ms#0@@2|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T@@2 (Lit |ms#0@@2|)) ($Is |ms#0@@2| (TMultiSet Mathematics._default.Set$T@@2)))) (= (Mathematics.__default.Set Mathematics._default.Set$T@@2 (Lit |ms#0@@2|)) (|lambda#230| Mathematics._default.Set$T@@2 (Lit |ms#0@@2|) 0))) :qid |unknown.0:0| :weight 3 :skolemid |4272| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T@@2 (Lit |ms#0@@2|))) ))))
(assert (forall ((arg0@@312 T@U) (arg1@@162 T@U) ) (! (= (type (Mathematics.__default.ISet arg0@@312 arg1@@162)) (MapType0Type BoxType boolType)) :qid |funType:Mathematics.__default.ISet| :pattern ( (Mathematics.__default.ISet arg0@@312 arg1@@162)) )))
(assert  (=> true (forall ((Mathematics._default.ISet$T T@U) (|ms#0@@3| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T) TyType) (= (type |ms#0@@3|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T |ms#0@@3|) ($Is |ms#0@@3| (TSet Mathematics._default.ISet$T)))) ($Is (Mathematics.__default.ISet Mathematics._default.ISet$T |ms#0@@3|) (TISet Mathematics._default.ISet$T))) :qid |unknown.0:0| :skolemid |4273| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T |ms#0@@3|)) ))))
(assert (forall ((Mathematics._default.ISet$T@@0 T@U) (|ms#0@@4| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@0) TyType) (= (type |ms#0@@4|) (MapType0Type BoxType boolType))) ($Is |ms#0@@4| (TSet Mathematics._default.ISet$T@@0))) (= (|Mathematics.__default.ISet#requires| Mathematics._default.ISet$T@@0 |ms#0@@4|) true)) :qid |unknown.0:0| :skolemid |4274| :pattern ( (|Mathematics.__default.ISet#requires| Mathematics._default.ISet$T@@0 |ms#0@@4|)) )))
(assert (forall ((arg0@@313 T@U) (arg1@@163 T@U) ) (! (= (type (|lambda#232| arg0@@313 arg1@@163)) (MapType0Type BoxType boolType)) :qid |funType:lambda#232| :pattern ( (|lambda#232| arg0@@313 arg1@@163)) )))
(assert  (=> true (forall ((Mathematics._default.ISet$T@@1 T@U) (|ms#0@@5| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@1) TyType) (= (type |ms#0@@5|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T@@1 |ms#0@@5|) ($Is |ms#0@@5| (TSet Mathematics._default.ISet$T@@1)))) (= (Mathematics.__default.ISet Mathematics._default.ISet$T@@1 |ms#0@@5|) (|lambda#232| Mathematics._default.ISet$T@@1 |ms#0@@5|))) :qid |unknown.0:0| :skolemid |4275| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T@@1 |ms#0@@5|)) ))))
(assert  (=> true (forall ((Mathematics._default.ISet$T@@2 T@U) (|ms#0@@6| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@2) TyType) (= (type |ms#0@@6|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)) ($Is |ms#0@@6| (TSet Mathematics._default.ISet$T@@2)))) (= (Mathematics.__default.ISet Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)) (|lambda#232| Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)))) :qid |unknown.0:0| :weight 3 :skolemid |4276| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|))) ))))
(assert (= (type Tclass.Sequences.__default) TyType))
(assert (= (Tag Tclass.Sequences.__default) Tagclass.Sequences.__default))
(assert (= (TagFamily Tclass.Sequences.__default) tytagFamily$_default))
(assert (forall ((bx@@99 T@U) ) (!  (=> (and (= (type bx@@99) BoxType) ($IsBox bx@@99 Tclass.Sequences.__default)) (and (= ($Box ($Unbox refType bx@@99)) bx@@99) ($Is ($Unbox refType bx@@99) Tclass.Sequences.__default))) :qid |unknown.0:0| :skolemid |4277| :pattern ( ($IsBox bx@@99 Tclass.Sequences.__default)) )))
(assert (forall (($o@@21 T@U) ) (!  (=> (= (type $o@@21) refType) (= ($Is $o@@21 Tclass.Sequences.__default)  (or (= $o@@21 null) (= (dtype $o@@21) Tclass.Sequences.__default)))) :qid |unknown.0:0| :skolemid |4278| :pattern ( ($Is $o@@21 Tclass.Sequences.__default)) )))
(assert (forall (($o@@22 T@U) ($h@@76 T@U) ) (!  (=> (and (= (type $o@@22) refType) (= (type $h@@76) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@22 Tclass.Sequences.__default $h@@76)  (or (= $o@@22 null) (U_2_bool (MapType1Select (MapType0Select $h@@76 $o@@22) alloc))))) :qid |unknown.0:0| :skolemid |4279| :pattern ( ($IsAlloc $o@@22 Tclass.Sequences.__default $h@@76)) )))
(assert  (=> true (forall ((Sequences._default.Last$E T@U) (|run#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E) TyType) (= (type |run#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E |run#0@@7|) (and ($Is |run#0@@7| (TSeq Sequences._default.Last$E)) (> (|Seq#Length| |run#0@@7|) 0)))) ($IsBox (Sequences.__default.Last Sequences._default.Last$E |run#0@@7|) Sequences._default.Last$E)) :qid |unknown.0:0| :skolemid |4280| :pattern ( (Sequences.__default.Last Sequences._default.Last$E |run#0@@7|)) ))))
(assert (forall ((Sequences._default.Last$E@@0 T@U) (|run#0@@8| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@0) TyType) (= (type |run#0@@8|) (SeqType BoxType))) ($Is |run#0@@8| (TSeq Sequences._default.Last$E@@0))) (= (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@8|) (> (|Seq#Length| |run#0@@8|) 0))) :qid |unknown.0:0| :skolemid |4281| :pattern ( (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.Last$E@@1 T@U) (|run#0@@9| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@1) TyType) (= (type |run#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@1 |run#0@@9|) (and ($Is |run#0@@9| (TSeq Sequences._default.Last$E@@1)) (> (|Seq#Length| |run#0@@9|) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@9|) (|Seq#Index| |run#0@@9| (- (|Seq#Length| |run#0@@9|) 1)))) :qid |unknown.0:0| :skolemid |4282| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.Last$E@@2 T@U) (|run#0@@10| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@2) TyType) (= (type |run#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@2 (Lit |run#0@@10|)) (and ($Is |run#0@@10| (TSeq Sequences._default.Last$E@@2)) (> (|Seq#Length| (Lit |run#0@@10|)) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@10|)) (|Seq#Index| (Lit |run#0@@10|) (- (|Seq#Length| (Lit |run#0@@10|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |4283| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@10|))) ))))
(assert (forall ((arg0@@314 T@U) (arg1@@164 T@U) ) (! (= (type (Sequences.__default.FirstOpt arg0@@314 arg1@@164)) DatatypeTypeType) :qid |funType:Sequences.__default.FirstOpt| :pattern ( (Sequences.__default.FirstOpt arg0@@314 arg1@@164)) )))
(assert  (=> true (forall ((Sequences._default.FirstOpt$E T@U) (|run#0@@11| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E) TyType) (= (type |run#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E |run#0@@11|) ($Is |run#0@@11| (TSeq Sequences._default.FirstOpt$E)))) ($Is (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E |run#0@@11|) (Tclass.Options.Option Sequences._default.FirstOpt$E))) :qid |unknown.0:0| :skolemid |4284| :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E |run#0@@11|)) ))))
(assert (forall ((Sequences._default.FirstOpt$E@@0 T@U) (|run#0@@12| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@0) TyType) (= (type |run#0@@12|) (SeqType BoxType))) ($Is |run#0@@12| (TSeq Sequences._default.FirstOpt$E@@0))) (= (|Sequences.__default.FirstOpt#requires| Sequences._default.FirstOpt$E@@0 |run#0@@12|) true)) :qid |unknown.0:0| :skolemid |4285| :pattern ( (|Sequences.__default.FirstOpt#requires| Sequences._default.FirstOpt$E@@0 |run#0@@12|)) )))
(assert  (=> true (forall ((Sequences._default.FirstOpt$E@@1 T@U) (|run#0@@13| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@1) TyType) (= (type |run#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E@@1 |run#0@@13|) ($Is |run#0@@13| (TSeq Sequences._default.FirstOpt$E@@1)))) (= (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@1 |run#0@@13|) (ite (= (|Seq#Length| |run#0@@13|) (LitInt 0)) |#Options.Option.None| (|#Options.Option.Some| (|Seq#Index| |run#0@@13| (LitInt 0)))))) :qid |unknown.0:0| :skolemid |4286| :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@1 |run#0@@13|)) ))))
(assert  (=> true (forall ((Sequences._default.FirstOpt$E@@2 T@U) (|run#0@@14| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@2) TyType) (= (type |run#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E@@2 (Lit |run#0@@14|)) ($Is |run#0@@14| (TSeq Sequences._default.FirstOpt$E@@2)))) (= (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@2 (Lit |run#0@@14|)) (ite (= (|Seq#Length| (Lit |run#0@@14|)) (LitInt 0)) |#Options.Option.None| (|#Options.Option.Some| (|Seq#Index| (Lit |run#0@@14|) (LitInt 0)))))) :qid |unknown.0:0| :weight 3 :skolemid |4287| :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@2 (Lit |run#0@@14|))) ))))
(assert  (=> true (forall ((Sequences._default.DropLast$E T@U) (|run#0@@15| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E) TyType) (= (type |run#0@@15|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E |run#0@@15|) (and ($Is |run#0@@15| (TSeq Sequences._default.DropLast$E)) (> (|Seq#Length| |run#0@@15|) 0)))) ($Is (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@15|) (TSeq Sequences._default.DropLast$E))) :qid |unknown.0:0| :skolemid |4288| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@15|)) ))))
(assert (forall ((Sequences._default.DropLast$E@@0 T@U) (|run#0@@16| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@0) TyType) (= (type |run#0@@16|) (SeqType BoxType))) ($Is |run#0@@16| (TSeq Sequences._default.DropLast$E@@0))) (= (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@16|) (> (|Seq#Length| |run#0@@16|) 0))) :qid |unknown.0:0| :skolemid |4289| :pattern ( (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@16|)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@1 T@U) (|run#0@@17| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@1) TyType) (= (type |run#0@@17|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@1 |run#0@@17|) (and ($Is |run#0@@17| (TSeq Sequences._default.DropLast$E@@1)) (> (|Seq#Length| |run#0@@17|) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@17|) (|Seq#Take| |run#0@@17| (- (|Seq#Length| |run#0@@17|) 1)))) :qid |unknown.0:0| :skolemid |4290| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@17|)) ))))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@2 T@U) (|run#0@@18| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@2) TyType) (= (type |run#0@@18|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@2 (Lit |run#0@@18|)) (and ($Is |run#0@@18| (TSeq Sequences._default.DropLast$E@@2)) (> (|Seq#Length| (Lit |run#0@@18|)) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@18|)) (|Seq#Take| (Lit |run#0@@18|) (- (|Seq#Length| (Lit |run#0@@18|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |4291| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@18|))) ))))
(assert (forall ((arg0@@315 T@U) (arg1@@165 T@U) ) (! (= (type (Sequences.__default.Set arg0@@315 arg1@@165)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.Set| :pattern ( (Sequences.__default.Set arg0@@315 arg1@@165)) )))
(assert  (=> true (forall ((Sequences._default.Set$T T@U) (|run#0@@19| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T) TyType) (= (type |run#0@@19|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T |run#0@@19|) ($Is |run#0@@19| (TSeq Sequences._default.Set$T)))) ($Is (Sequences.__default.Set Sequences._default.Set$T |run#0@@19|) (TSet Sequences._default.Set$T))) :qid |unknown.0:0| :skolemid |4292| :pattern ( (Sequences.__default.Set Sequences._default.Set$T |run#0@@19|)) ))))
(assert (forall ((Sequences._default.Set$T@@0 T@U) (|run#0@@20| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@0) TyType) (= (type |run#0@@20|) (SeqType BoxType))) ($Is |run#0@@20| (TSeq Sequences._default.Set$T@@0))) (= (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@20|) true)) :qid |unknown.0:0| :skolemid |4293| :pattern ( (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.Set$T@@1 T@U) (|run#0@@21| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@1) TyType) (= (type |run#0@@21|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@1 |run#0@@21|) ($Is |run#0@@21| (TSeq Sequences._default.Set$T@@1)))) (= (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@21|) (|lambda#230| Sequences._default.Set$T@@1 (|MultiSet#FromSeq| |run#0@@21|) 0))) :qid |unknown.0:0| :skolemid |4294| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@21|)) ))))
(assert  (=> true (forall ((Sequences._default.Set$T@@2 T@U) (|run#0@@22| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@2) TyType) (= (type |run#0@@22|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@2 (Lit |run#0@@22|)) ($Is |run#0@@22| (TSeq Sequences._default.Set$T@@2)))) (= (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@22|)) (|lambda#230| Sequences._default.Set$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@22|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |4295| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@22|))) ))))
(assert (forall ((arg0@@316 T@U) (arg1@@166 T@U) ) (! (= (type (Sequences.__default.ISet arg0@@316 arg1@@166)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.ISet| :pattern ( (Sequences.__default.ISet arg0@@316 arg1@@166)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T T@U) (|run#0@@23| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T) TyType) (= (type |run#0@@23|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T |run#0@@23|) ($Is |run#0@@23| (TSeq Sequences._default.ISet$T)))) ($Is (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@23|) (TISet Sequences._default.ISet$T))) :qid |unknown.0:0| :skolemid |4296| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@23|)) ))))
(assert (forall ((Sequences._default.ISet$T@@0 T@U) (|run#0@@24| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@0) TyType) (= (type |run#0@@24|) (SeqType BoxType))) ($Is |run#0@@24| (TSeq Sequences._default.ISet$T@@0))) (= (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@24|) true)) :qid |unknown.0:0| :skolemid |4297| :pattern ( (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@24|)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T@@1 T@U) (|run#0@@25| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@1) TyType) (= (type |run#0@@25|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@1 |run#0@@25|) ($Is |run#0@@25| (TSeq Sequences._default.ISet$T@@1)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@25|) (|lambda#230| Sequences._default.ISet$T@@1 (|MultiSet#FromSeq| |run#0@@25|) 0))) :qid |unknown.0:0| :skolemid |4298| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@25|)) ))))
(assert  (=> true (forall ((Sequences._default.ISet$T@@2 T@U) (|run#0@@26| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@2) TyType) (= (type |run#0@@26|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@2 (Lit |run#0@@26|)) ($Is |run#0@@26| (TSeq Sequences._default.ISet$T@@2)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@26|)) (|lambda#230| Sequences._default.ISet$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@26|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |4299| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@26|))) ))))
(assert (forall ((Sequences._default.NoDupes$T T@U) ($ly@@184 T@U) (|a#0@@33| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T) TyType) (= (type $ly@@184) LayerTypeType)) (= (type |a#0@@33|) (SeqType BoxType))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@184) |a#0@@33|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly@@184 |a#0@@33|))) :qid |unknown.0:0| :skolemid |4300| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@184) |a#0@@33|)) )))
(assert (forall ((Sequences._default.NoDupes$T@@0 T@U) ($ly@@185 T@U) (|a#0@@34| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T@@0) TyType) (= (type $ly@@185) LayerTypeType)) (= (type |a#0@@34|) (SeqType BoxType))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@185 |a#0@@34|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@34|))) :qid |unknown.0:0| :skolemid |4301| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 (AsFuelBottom $ly@@185) |a#0@@34|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@1 T@U) ($ly@@186 T@U) (|a#0@@35| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@1) TyType) (= (type $ly@@186) LayerTypeType)) (= (type |a#0@@35|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@1 |a#0@@35|) ($Is |a#0@@35| (TSeq Sequences._default.NoDupes$T@@1)))) true) :qid |unknown.0:0| :skolemid |4302| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@1 $ly@@186 |a#0@@35|)) ))))
(assert (forall ((Sequences._default.NoDupes$T@@2 T@U) ($ly@@187 T@U) (|a#0@@36| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@2) TyType) (= (type $ly@@187) LayerTypeType)) (= (type |a#0@@36|) (SeqType BoxType))) ($Is |a#0@@36| (TSeq Sequences._default.NoDupes$T@@2))) (= (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@187 |a#0@@36|) true)) :qid |unknown.0:0| :skolemid |4303| :pattern ( (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@187 |a#0@@36|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@3 T@U) ($ly@@188 T@U) (|a#0@@37| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@3) TyType) (= (type $ly@@188) LayerTypeType)) (= (type |a#0@@37|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@3 |a#0@@37|) ($Is |a#0@@37| (TSeq Sequences._default.NoDupes$T@@3)))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@188) |a#0@@37|) (forall ((|i#0@@72| Int) (|j#0@@11| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@72|) (< |i#0@@72| (|Seq#Length| |a#0@@37|))) (and (<= (LitInt 0) |j#0@@11|) (< |j#0@@11| (|Seq#Length| |a#0@@37|)))) (not (= |i#0@@72| |j#0@@11|))) (not (= (|Seq#Index| |a#0@@37| |i#0@@72|) (|Seq#Index| |a#0@@37| |j#0@@11|))))) :qid |Sequencesidfy.66:13| :skolemid |4304| :pattern ( (|Seq#Index| |a#0@@37| |j#0@@11|) (|Seq#Index| |a#0@@37| |i#0@@72|)) )))) :qid |unknown.0:0| :skolemid |4305| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@188) |a#0@@37|)) ))))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@4 T@U) ($ly@@189 T@U) (|a#0@@38| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@4) TyType) (= (type $ly@@189) LayerTypeType)) (= (type |a#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@4 (Lit |a#0@@38|)) ($Is |a#0@@38| (TSeq Sequences._default.NoDupes$T@@4)))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@189) (Lit |a#0@@38|)) (forall ((|i#1@@5| Int) (|j#1@@10| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@5|) (< |i#1@@5| (|Seq#Length| (Lit |a#0@@38|)))) (and (<= (LitInt 0) |j#1@@10|) (< |j#1@@10| (|Seq#Length| (Lit |a#0@@38|))))) (not (= |i#1@@5| |j#1@@10|))) (not (= (|Seq#Index| (Lit |a#0@@38|) |i#1@@5|) (|Seq#Index| (Lit |a#0@@38|) |j#1@@10|))))) :qid |Sequencesidfy.66:13| :skolemid |4306| :pattern ( (|Seq#Index| |a#0@@38| |j#1@@10|) (|Seq#Index| |a#0@@38| |i#1@@5|)) )))) :qid |unknown.0:0| :weight 3 :skolemid |4307| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@189) (Lit |a#0@@38|))) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T T@U) (|s#0@@3| T@U) (|e#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T) TyType) (= (type |s#0@@3|) (SeqType BoxType))) (= (type |e#0|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T |s#0@@3| |e#0|) (and (and ($Is |s#0@@3| (TSeq Sequences._default.IndexOf$T)) ($IsBox |e#0| Sequences._default.IndexOf$T)) (|Seq#Contains| |s#0@@3| |e#0|)))) (and (and (<= (LitInt 0) (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@3| |e#0|)) (< (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@3| |e#0|) (|Seq#Length| |s#0@@3|))) (= (|Seq#Index| |s#0@@3| (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@3| |e#0|)) |e#0|))) :qid |unknown.0:0| :skolemid |4308| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0@@3| |e#0|)) ))))
(assert (forall ((Sequences._default.IndexOf$T@@0 T@U) ($Heap@@5 T@U) (|s#0@@4| T@U) (|e#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@0) TyType) (= (type $Heap@@5) (MapType0Type refType MapType1Type))) (= (type |s#0@@4|) (SeqType BoxType))) (= (type |e#0@@0|) BoxType)) (and (and ($IsGoodHeap $Heap@@5) ($Is |s#0@@4| (TSeq Sequences._default.IndexOf$T@@0))) ($IsBox |e#0@@0| Sequences._default.IndexOf$T@@0))) (= (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@4| |e#0@@0|) (|Seq#Contains| |s#0@@4| |e#0@@0|))) :qid |unknown.0:0| :skolemid |4309| :pattern ( (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@4| |e#0@@0|) ($IsGoodHeap $Heap@@5)) )))
(assert (forall ((Sequences._default.IndexOf$T@@1 T@U) (s@@49 T@U) (e T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T@@1) TyType) (= (type s@@49) (SeqType BoxType))) (= (type e) BoxType)) (|$let#0$canCall| Sequences._default.IndexOf$T@@1 s@@49 e)) (and (and (<= (LitInt 0) (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e)) (< (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e) (|Seq#Length| s@@49))) (= (|Seq#Index| s@@49 (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e)) e))) :qid |Sequencesidfy.117:5| :skolemid |4310| :pattern ( (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e)) )))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@2 T@U) ($Heap@@6 T@U) (|s#0@@5| T@U) (|e#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@2) TyType) (= (type $Heap@@6) (MapType0Type refType MapType1Type))) (= (type |s#0@@5|) (SeqType BoxType))) (= (type |e#0@@1|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@2 |s#0@@5| |e#0@@1|) (and (and (and ($IsGoodHeap $Heap@@6) ($Is |s#0@@5| (TSeq Sequences._default.IndexOf$T@@2))) ($IsBox |e#0@@1| Sequences._default.IndexOf$T@@2)) (|Seq#Contains| |s#0@@5| |e#0@@1|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@2 |s#0@@5| |e#0@@1|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@5| |e#0@@1|) (let ((|i#0@@73| (|$let#0_i| Sequences._default.IndexOf$T@@2 |s#0@@5| |e#0@@1|))) |i#0@@73|)))) :qid |unknown.0:0| :skolemid |4311| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@5| |e#0@@1|) ($IsGoodHeap $Heap@@6)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@3 T@U) ($Heap@@7 T@U) (|s#0@@6| T@U) (|e#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@3) TyType) (= (type $Heap@@7) (MapType0Type refType MapType1Type))) (= (type |s#0@@6|) (SeqType BoxType))) (= (type |e#0@@2|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@6|) |e#0@@2|) (and (and (and ($IsGoodHeap $Heap@@7) ($Is |s#0@@6| (TSeq Sequences._default.IndexOf$T@@3))) ($IsBox |e#0@@2| Sequences._default.IndexOf$T@@3)) (|Seq#Contains| |s#0@@6| |e#0@@2|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@6|) |e#0@@2|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@6|) |e#0@@2|) (let ((|i#1@@6| (|$let#0_i| Sequences._default.IndexOf$T@@3 (Lit |s#0@@6|) |e#0@@2|))) |i#1@@6|)))) :qid |unknown.0:0| :weight 3 :skolemid |4312| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@6|) |e#0@@2|) ($IsGoodHeap $Heap@@7)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@4 T@U) ($Heap@@8 T@U) (|s#0@@7| T@U) (|e#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@4) TyType) (= (type $Heap@@8) (MapType0Type refType MapType1Type))) (= (type |s#0@@7|) (SeqType BoxType))) (= (type |e#0@@3|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@7|) (Lit |e#0@@3|)) (and (and (and ($IsGoodHeap $Heap@@8) ($Is |s#0@@7| (TSeq Sequences._default.IndexOf$T@@4))) ($IsBox |e#0@@3| Sequences._default.IndexOf$T@@4)) (|Seq#Contains| |s#0@@7| |e#0@@3|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@7|) (Lit |e#0@@3|)) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@7|) (Lit |e#0@@3|)) (let ((|i#2| (|$let#0_i| Sequences._default.IndexOf$T@@4 (Lit |s#0@@7|) (Lit |e#0@@3|)))) |i#2|)))) :qid |unknown.0:0| :weight 3 :skolemid |4313| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@7|) (Lit |e#0@@3|)) ($IsGoodHeap $Heap@@8)) ))))
(assert (forall ((arg0@@317 T@U) (arg1@@167 Int) ) (! (= (type (Sequences.__default.Range arg0@@317 arg1@@167)) (SeqType BoxType)) :qid |funType:Sequences.__default.Range| :pattern ( (Sequences.__default.Range arg0@@317 arg1@@167)) )))
(assert (forall (($ly@@190 T@U) (|n#0| Int) ) (!  (=> (= (type $ly@@190) LayerTypeType) (= (Sequences.__default.Range ($LS $ly@@190) |n#0|) (Sequences.__default.Range $ly@@190 |n#0|))) :qid |Sequencesidfy.121:22| :skolemid |4314| :pattern ( (Sequences.__default.Range ($LS $ly@@190) |n#0|)) )))
(assert (forall (($ly@@191 T@U) (|n#0@@0| Int) ) (!  (=> (= (type $ly@@191) LayerTypeType) (= (Sequences.__default.Range $ly@@191 |n#0@@0|) (Sequences.__default.Range $LZ |n#0@@0|))) :qid |Sequencesidfy.121:22| :skolemid |4315| :pattern ( (Sequences.__default.Range (AsFuelBottom $ly@@191) |n#0@@0|)) )))
(assert  (=> true (forall (($ly@@192 T@U) (|n#0@@1| Int) ) (!  (=> (and (= (type $ly@@192) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@1|) (>= |n#0@@1| (LitInt 0)))) (and (and (= (|Seq#Length| (Sequences.__default.Range $ly@@192 |n#0@@1|)) |n#0@@1|) (forall ((|i#0@@74| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@74|) (< |i#0@@74| |n#0@@1|)) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@192 |n#0@@1|) |i#0@@74|))) |i#0@@74|)) :qid |Sequencesidfy.124:20| :skolemid |4316| :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@192 |n#0@@1|) |i#0@@74|))) ))) ($Is (Sequences.__default.Range $ly@@192 |n#0@@1|) (TSeq TInt)))) :qid |Sequencesidfy.121:22| :skolemid |4317| :pattern ( (Sequences.__default.Range $ly@@192 |n#0@@1|)) ))))
(assert (forall (($ly@@193 T@U) (|n#0@@2| Int) ) (!  (=> (= (type $ly@@193) LayerTypeType) (= (|Sequences.__default.Range#requires| $ly@@193 |n#0@@2|) (>= |n#0@@2| (LitInt 0)))) :qid |Sequencesidfy.121:22| :skolemid |4318| :pattern ( (|Sequences.__default.Range#requires| $ly@@193 |n#0@@2|)) )))
(assert  (=> true (forall (($ly@@194 T@U) (|n#0@@3| Int) ) (!  (=> (and (= (type $ly@@194) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@3|) (>= |n#0@@3| (LitInt 0)))) (and (=> (not (= |n#0@@3| (LitInt 0))) (|Sequences.__default.Range#canCall| (- |n#0@@3| 1))) (= (Sequences.__default.Range ($LS $ly@@194) |n#0@@3|) (ite (= |n#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range $ly@@194 (- |n#0@@3| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (- |n#0@@3| 1))))))))) :qid |Sequencesidfy.121:22| :skolemid |4319| :pattern ( (Sequences.__default.Range ($LS $ly@@194) |n#0@@3|)) ))))
(assert  (=> true (forall (($ly@@195 T@U) (|n#0@@4| Int) ) (!  (=> (and (= (type $ly@@195) LayerTypeType) (or (|Sequences.__default.Range#canCall| (LitInt |n#0@@4|)) (>= (LitInt |n#0@@4|) (LitInt 0)))) (and (=> (not (= (LitInt |n#0@@4|) (LitInt 0))) (|Sequences.__default.Range#canCall| (LitInt (- |n#0@@4| 1)))) (= (Sequences.__default.Range ($LS $ly@@195) (LitInt |n#0@@4|)) (ite (= (LitInt |n#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range ($LS $ly@@195) (LitInt (- |n#0@@4| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt (- |n#0@@4| 1)))))))))) :qid |Sequencesidfy.121:22| :weight 3 :skolemid |4320| :pattern ( (Sequences.__default.Range ($LS $ly@@195) (LitInt |n#0@@4|))) ))))
(assert (forall ((arg0@@318 T@U) (arg1@@168 T@U) (arg2@@101 T@U) (arg3@@58 T@U) (arg4@@37 T@U) (arg5@@15 T@U) ) (! (= (type (Sequences.__default.Apply arg0@@318 arg1@@168 arg2@@101 arg3@@58 arg4@@37 arg5@@15)) (SeqType BoxType)) :qid |funType:Sequences.__default.Apply| :pattern ( (Sequences.__default.Apply arg0@@318 arg1@@168 arg2@@101 arg3@@58 arg4@@37 arg5@@15)) )))
(assert (forall ((Sequences._default.Apply$E T@U) (Sequences._default.Apply$R T@U) ($ly@@196 T@U) ($Heap@@9 T@U) (|f#0@@27| T@U) (|run#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E) TyType) (= (type Sequences._default.Apply$R) TyType)) (= (type $ly@@196) LayerTypeType)) (= (type $Heap@@9) (MapType0Type refType MapType1Type))) (= (type |f#0@@27|) HandleTypeType)) (= (type |run#0@@27|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@196) $Heap@@9 |f#0@@27| |run#0@@27|) (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R $ly@@196 $Heap@@9 |f#0@@27| |run#0@@27|))) :qid |unknown.0:0| :skolemid |4321| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@196) $Heap@@9 |f#0@@27| |run#0@@27|)) )))
(assert (forall ((Sequences._default.Apply$E@@0 T@U) (Sequences._default.Apply$R@@0 T@U) ($ly@@197 T@U) ($Heap@@10 T@U) (|f#0@@28| T@U) (|run#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E@@0) TyType) (= (type Sequences._default.Apply$R@@0) TyType)) (= (type $ly@@197) LayerTypeType)) (= (type $Heap@@10) (MapType0Type refType MapType1Type))) (= (type |f#0@@28|) HandleTypeType)) (= (type |run#0@@28|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $ly@@197 $Heap@@10 |f#0@@28| |run#0@@28|) (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $LZ $Heap@@10 |f#0@@28| |run#0@@28|))) :qid |unknown.0:0| :skolemid |4322| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 (AsFuelBottom $ly@@197) $Heap@@10 |f#0@@28| |run#0@@28|)) )))
(assert (forall ((Sequences._default.Apply$E@@1 T@U) (Sequences._default.Apply$R@@1 T@U) ($ly@@198 T@U) ($h0@@1 T@U) ($h1@@1 T@U) (|f#0@@29| T@U) (|run#0@@29| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@1) TyType) (= (type Sequences._default.Apply$R@@1) TyType)) (= (type $ly@@198) LayerTypeType)) (= (type $h0@@1) (MapType0Type refType MapType1Type))) (= (type $h1@@1) (MapType0Type refType MapType1Type))) (= (type |f#0@@29|) HandleTypeType)) (= (type |run#0@@29|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@1) ($IsGoodHeap $h1@@1)) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@29| |run#0@@29|) (and ($Is |f#0@@29| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1)) ($Is |run#0@@29| (TSeq Sequences._default.Apply$E@@1))))) (and ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1)))) (forall (($o@@23 T@U) ($f@@1 T@U) ) (! (let ((alpha@@8 (FieldTypeInv0 (type $f@@1)))) (=> (and (and (= (type $o@@23) refType) (= (type $f@@1) (FieldType alpha@@8))) (and (not (= $o@@23 null)) (exists ((|i#0@@75| Int) (|o#0| T@U) ) (!  (and (= (type |o#0|) refType) (and (and ($Is |o#0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@75|) (< |i#0@@75| (|Seq#Length| |run#0@@29|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@29| (|Seq#Index| |run#0@@29| |i#0@@75|)) ($Box |o#0|))))) (= ($Box $o@@23) ($Box |o#0|)))) :qid |Sequencesidfy.133:15| :skolemid |4323| :pattern ( (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@29| (|Seq#Index| |run#0@@29| |i#0@@75|)) ($Box |o#0|))) )))) (= (MapType1Select (MapType0Select $h0@@1 $o@@23) $f@@1) (MapType1Select (MapType0Select $h1@@1 $o@@23) $f@@1)))) :qid |unknown.0:0| :skolemid |4324| :no-pattern (type $o@@23) :no-pattern (type $f@@1) :no-pattern (U_2_int $o@@23) :no-pattern (U_2_bool $o@@23) :no-pattern (U_2_int $f@@1) :no-pattern (U_2_bool $f@@1) ))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@198 $h0@@1 |f#0@@29| |run#0@@29|) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@198 $h1@@1 |f#0@@29| |run#0@@29|))) :qid |unknown.0:0| :skolemid |4325| :pattern ( ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@198 $h1@@1 |f#0@@29| |run#0@@29|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@2 T@U) (Sequences._default.Apply$R@@2 T@U) ($ly@@199 T@U) ($Heap@@11 T@U) (|f#0@@30| T@U) (|run#0@@30| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@2) TyType) (= (type Sequences._default.Apply$R@@2) TyType)) (= (type $ly@@199) LayerTypeType)) (= (type $Heap@@11) (MapType0Type refType MapType1Type))) (= (type |f#0@@30|) HandleTypeType)) (= (type |run#0@@30|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@11 |f#0@@30| |run#0@@30|) (and (and (and ($IsGoodHeap $Heap@@11) ($Is |f#0@@30| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2))) ($Is |run#0@@30| (TSeq Sequences._default.Apply$E@@2))) (forall ((|i#1@@7| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@7|) (< |i#1@@7| (|Seq#Length| |run#0@@30|))) (Requires1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@11 |f#0@@30| (|Seq#Index| |run#0@@30| |i#1@@7|)))) :qid |Sequencesidfy.130:21| :skolemid |4326| :pattern ( (|Seq#Index| |run#0@@30| |i#1@@7|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@199 $Heap@@11 |f#0@@30| |run#0@@30|)) (|Seq#Length| |run#0@@30|)) (forall ((|i#2@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@0|) (< |i#2@@0| (|Seq#Length| |run#0@@30|))) (= (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@199 $Heap@@11 |f#0@@30| |run#0@@30|) |i#2@@0|) (Apply1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@11 |f#0@@30| (|Seq#Index| |run#0@@30| |i#2@@0|))))) :qid |Sequencesidfy.132:20| :skolemid |4327| :pattern ( (|Seq#Index| |run#0@@30| |i#2@@0|)) :pattern ( (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@199 $Heap@@11 |f#0@@30| |run#0@@30|) |i#2@@0|)) ))) ($Is (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@199 $Heap@@11 |f#0@@30| |run#0@@30|) (TSeq Sequences._default.Apply$R@@2)))) :qid |unknown.0:0| :skolemid |4328| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@199 $Heap@@11 |f#0@@30| |run#0@@30|)) ))))
(assert (forall ((Sequences._default.Apply$E@@3 T@U) (Sequences._default.Apply$R@@3 T@U) ($ly@@200 T@U) ($Heap@@12 T@U) (|f#0@@31| T@U) (|run#0@@31| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@3) TyType) (= (type Sequences._default.Apply$R@@3) TyType)) (= (type $ly@@200) LayerTypeType)) (= (type $Heap@@12) (MapType0Type refType MapType1Type))) (= (type |f#0@@31|) HandleTypeType)) (= (type |run#0@@31|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@12) ($Is |f#0@@31| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3))) ($Is |run#0@@31| (TSeq Sequences._default.Apply$E@@3)))) (= (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@200 $Heap@@12 |f#0@@31| |run#0@@31|) (forall ((|i#3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3|) (< |i#3| (|Seq#Length| |run#0@@31|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@12 |f#0@@31| (|Seq#Index| |run#0@@31| |i#3|)))) :qid |Sequencesidfy.130:21| :skolemid |4329| :pattern ( (|Seq#Index| |run#0@@31| |i#3|)) )))) :qid |unknown.0:0| :skolemid |4330| :pattern ( (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@200 $Heap@@12 |f#0@@31| |run#0@@31|) ($IsGoodHeap $Heap@@12)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@4 T@U) (Sequences._default.Apply$R@@4 T@U) ($ly@@201 T@U) ($Heap@@13 T@U) (|f#0@@32| T@U) (|run#0@@32| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@4) TyType) (= (type Sequences._default.Apply$R@@4) TyType)) (= (type $ly@@201) LayerTypeType)) (= (type $Heap@@13) (MapType0Type refType MapType1Type))) (= (type |f#0@@32|) HandleTypeType)) (= (type |run#0@@32|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@32| |run#0@@32|) (and (and (and ($IsGoodHeap $Heap@@13) ($Is |f#0@@32| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4))) ($Is |run#0@@32| (TSeq Sequences._default.Apply$E@@4))) (forall ((|i#3@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@0|) (< |i#3@@0| (|Seq#Length| |run#0@@32|))) (Requires1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@32| (|Seq#Index| |run#0@@32| |i#3@@0|)))) :qid |Sequencesidfy.130:21| :skolemid |4329| :pattern ( (|Seq#Index| |run#0@@32| |i#3@@0|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@32|) (LitInt 0))) (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@32| (|Seq#Drop| |run#0@@32| (LitInt 1)))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@201) $Heap@@13 |f#0@@32| |run#0@@32|) (ite (= (|Seq#Length| |run#0@@32|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Apply1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@32| (|Seq#Index| |run#0@@32| (LitInt 0)))) (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $ly@@201 $Heap@@13 |f#0@@32| (|Seq#Drop| |run#0@@32| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |4331| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@201) $Heap@@13 |f#0@@32| |run#0@@32|) ($IsGoodHeap $Heap@@13)) ))))
(assert (forall ((arg0@@319 T@U) (arg1@@169 T@U) (arg2@@102 T@U) (arg3@@59 T@U) (arg4@@38 T@U) (arg5@@16 T@U) ) (! (= (type (Sequences.__default.ApplyOpaque arg0@@319 arg1@@169 arg2@@102 arg3@@59 arg4@@38 arg5@@16)) (SeqType BoxType)) :qid |funType:Sequences.__default.ApplyOpaque| :pattern ( (Sequences.__default.ApplyOpaque arg0@@319 arg1@@169 arg2@@102 arg3@@59 arg4@@38 arg5@@16)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E T@U) (Sequences._default.ApplyOpaque$R T@U) ($ly@@202 T@U) ($Heap@@14 T@U) (|f#0@@33| T@U) (|run#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E) TyType) (= (type Sequences._default.ApplyOpaque$R) TyType)) (= (type $ly@@202) LayerTypeType)) (= (type $Heap@@14) (MapType0Type refType MapType1Type))) (= (type |f#0@@33|) HandleTypeType)) (= (type |run#0@@33|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@202) $Heap@@14 |f#0@@33| |run#0@@33|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R $ly@@202 $Heap@@14 |f#0@@33| |run#0@@33|))) :qid |unknown.0:0| :skolemid |4332| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@202) $Heap@@14 |f#0@@33| |run#0@@33|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@0 T@U) (Sequences._default.ApplyOpaque$R@@0 T@U) ($ly@@203 T@U) ($Heap@@15 T@U) (|f#0@@34| T@U) (|run#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@0) TyType) (= (type Sequences._default.ApplyOpaque$R@@0) TyType)) (= (type $ly@@203) LayerTypeType)) (= (type $Heap@@15) (MapType0Type refType MapType1Type))) (= (type |f#0@@34|) HandleTypeType)) (= (type |run#0@@34|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $ly@@203 $Heap@@15 |f#0@@34| |run#0@@34|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $LZ $Heap@@15 |f#0@@34| |run#0@@34|))) :qid |unknown.0:0| :skolemid |4333| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 (AsFuelBottom $ly@@203) $Heap@@15 |f#0@@34| |run#0@@34|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@1 T@U) (Sequences._default.ApplyOpaque$R@@1 T@U) ($ly@@204 T@U) ($h0@@2 T@U) ($h1@@2 T@U) (|f#0@@35| T@U) (|run#0@@35| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@1) TyType) (= (type Sequences._default.ApplyOpaque$R@@1) TyType)) (= (type $ly@@204) LayerTypeType)) (= (type $h0@@2) (MapType0Type refType MapType1Type))) (= (type $h1@@2) (MapType0Type refType MapType1Type))) (= (type |f#0@@35|) HandleTypeType)) (= (type |run#0@@35|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@2) ($IsGoodHeap $h1@@2)) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@35| |run#0@@35|) (and ($Is |f#0@@35| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1)) ($Is |run#0@@35| (TSeq Sequences._default.ApplyOpaque$E@@1))))) (and ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2)))) (forall (($o@@24 T@U) ($f@@2 T@U) ) (! (let ((alpha@@9 (FieldTypeInv0 (type $f@@2)))) (=> (and (and (= (type $o@@24) refType) (= (type $f@@2) (FieldType alpha@@9))) (and (not (= $o@@24 null)) (exists ((|i#0@@76| Int) (|o#0@@0| T@U) ) (!  (and (= (type |o#0@@0|) refType) (and (and ($Is |o#0@@0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@76|) (< |i#0@@76| (|Seq#Length| |run#0@@35|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@35| (|Seq#Index| |run#0@@35| |i#0@@76|)) ($Box |o#0@@0|))))) (= ($Box $o@@24) ($Box |o#0@@0|)))) :qid |Sequencesidfy.144:15| :skolemid |4334| :pattern ( (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@35| (|Seq#Index| |run#0@@35| |i#0@@76|)) ($Box |o#0@@0|))) )))) (= (MapType1Select (MapType0Select $h0@@2 $o@@24) $f@@2) (MapType1Select (MapType0Select $h1@@2 $o@@24) $f@@2)))) :qid |unknown.0:0| :skolemid |4335| :no-pattern (type $o@@24) :no-pattern (type $f@@2) :no-pattern (U_2_int $o@@24) :no-pattern (U_2_bool $o@@24) :no-pattern (U_2_int $f@@2) :no-pattern (U_2_bool $f@@2) ))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@204 $h0@@2 |f#0@@35| |run#0@@35|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@204 $h1@@2 |f#0@@35| |run#0@@35|))) :qid |unknown.0:0| :skolemid |4336| :pattern ( ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@204 $h1@@2 |f#0@@35| |run#0@@35|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@2 T@U) (Sequences._default.ApplyOpaque$R@@2 T@U) ($ly@@205 T@U) ($Heap@@16 T@U) (|f#0@@36| T@U) (|run#0@@36| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@2) TyType) (= (type Sequences._default.ApplyOpaque$R@@2) TyType)) (= (type $ly@@205) LayerTypeType)) (= (type $Heap@@16) (MapType0Type refType MapType1Type))) (= (type |f#0@@36|) HandleTypeType)) (= (type |run#0@@36|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@16 |f#0@@36| |run#0@@36|) (and (and (and ($IsGoodHeap $Heap@@16) ($Is |f#0@@36| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2))) ($Is |run#0@@36| (TSeq Sequences._default.ApplyOpaque$E@@2))) (forall ((|i#1@@8| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@8|) (< |i#1@@8| (|Seq#Length| |run#0@@36|))) (Requires1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@16 |f#0@@36| (|Seq#Index| |run#0@@36| |i#1@@8|)))) :qid |Sequencesidfy.141:21| :skolemid |4337| :pattern ( (|Seq#Index| |run#0@@36| |i#1@@8|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@205 $Heap@@16 |f#0@@36| |run#0@@36|)) (|Seq#Length| |run#0@@36|)) (forall ((|i#2@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@1|) (< |i#2@@1| (|Seq#Length| |run#0@@36|))) (= (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@205 $Heap@@16 |f#0@@36| |run#0@@36|) |i#2@@1|) (Apply1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@16 |f#0@@36| (|Seq#Index| |run#0@@36| |i#2@@1|))))) :qid |Sequencesidfy.143:20| :skolemid |4338| :pattern ( (|Seq#Index| |run#0@@36| |i#2@@1|)) :pattern ( (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@205 $Heap@@16 |f#0@@36| |run#0@@36|) |i#2@@1|)) ))) ($Is (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@205 $Heap@@16 |f#0@@36| |run#0@@36|) (TSeq Sequences._default.ApplyOpaque$R@@2)))) :qid |unknown.0:0| :skolemid |4339| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@205 $Heap@@16 |f#0@@36| |run#0@@36|)) ))))
(assert (forall ((Sequences._default.ApplyOpaque$E@@3 T@U) (Sequences._default.ApplyOpaque$R@@3 T@U) ($ly@@206 T@U) ($Heap@@17 T@U) (|f#0@@37| T@U) (|run#0@@37| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@3) TyType) (= (type Sequences._default.ApplyOpaque$R@@3) TyType)) (= (type $ly@@206) LayerTypeType)) (= (type $Heap@@17) (MapType0Type refType MapType1Type))) (= (type |f#0@@37|) HandleTypeType)) (= (type |run#0@@37|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@17) ($Is |f#0@@37| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3))) ($Is |run#0@@37| (TSeq Sequences._default.ApplyOpaque$E@@3)))) (= (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@206 $Heap@@17 |f#0@@37| |run#0@@37|) (forall ((|i#3@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@1|) (< |i#3@@1| (|Seq#Length| |run#0@@37|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@17 |f#0@@37| (|Seq#Index| |run#0@@37| |i#3@@1|)))) :qid |Sequencesidfy.141:21| :skolemid |4340| :pattern ( (|Seq#Index| |run#0@@37| |i#3@@1|)) )))) :qid |unknown.0:0| :skolemid |4341| :pattern ( (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@206 $Heap@@17 |f#0@@37| |run#0@@37|) ($IsGoodHeap $Heap@@17)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@4 T@U) (Sequences._default.ApplyOpaque$R@@4 T@U) ($ly@@207 T@U) ($Heap@@18 T@U) (|f#0@@38| T@U) (|run#0@@38| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@4) TyType) (= (type Sequences._default.ApplyOpaque$R@@4) TyType)) (= (type $ly@@207) LayerTypeType)) (= (type $Heap@@18) (MapType0Type refType MapType1Type))) (= (type |f#0@@38|) HandleTypeType)) (= (type |run#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@18 |f#0@@38| |run#0@@38|) (and (and (and ($IsGoodHeap $Heap@@18) ($Is |f#0@@38| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4))) ($Is |run#0@@38| (TSeq Sequences._default.ApplyOpaque$E@@4))) (forall ((|i#3@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@2|) (< |i#3@@2| (|Seq#Length| |run#0@@38|))) (Requires1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@18 |f#0@@38| (|Seq#Index| |run#0@@38| |i#3@@2|)))) :qid |Sequencesidfy.141:21| :skolemid |4340| :pattern ( (|Seq#Index| |run#0@@38| |i#3@@2|)) ))))) (and (|Sequences.__default.Apply#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@18 |f#0@@38| |run#0@@38|) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@207) $Heap@@18 |f#0@@38| |run#0@@38|) (Sequences.__default.Apply Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $LZ) $Heap@@18 |f#0@@38| |run#0@@38|)))) :qid |unknown.0:0| :skolemid |4342| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@207) $Heap@@18 |f#0@@38| |run#0@@38|) ($IsGoodHeap $Heap@@18)) ))))
(assert (forall ((arg0@@320 T@U) (arg1@@170 T@U) (arg2@@103 T@U) (arg3@@60 T@U) (arg4@@39 T@U) ) (! (= (type (Sequences.__default.Filter arg0@@320 arg1@@170 arg2@@103 arg3@@60 arg4@@39)) (SeqType BoxType)) :qid |funType:Sequences.__default.Filter| :pattern ( (Sequences.__default.Filter arg0@@320 arg1@@170 arg2@@103 arg3@@60 arg4@@39)) )))
(assert (forall ((Sequences._default.Filter$E T@U) ($ly@@208 T@U) ($Heap@@19 T@U) (|f#0@@39| T@U) (|run#0@@39| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E) TyType) (= (type $ly@@208) LayerTypeType)) (= (type $Heap@@19) (MapType0Type refType MapType1Type))) (= (type |f#0@@39|) HandleTypeType)) (= (type |run#0@@39|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@208) $Heap@@19 |f#0@@39| |run#0@@39|) (Sequences.__default.Filter Sequences._default.Filter$E $ly@@208 $Heap@@19 |f#0@@39| |run#0@@39|))) :qid |unknown.0:0| :skolemid |4343| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@208) $Heap@@19 |f#0@@39| |run#0@@39|)) )))
(assert (forall ((Sequences._default.Filter$E@@0 T@U) ($ly@@209 T@U) ($Heap@@20 T@U) (|f#0@@40| T@U) (|run#0@@40| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E@@0) TyType) (= (type $ly@@209) LayerTypeType)) (= (type $Heap@@20) (MapType0Type refType MapType1Type))) (= (type |f#0@@40|) HandleTypeType)) (= (type |run#0@@40|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@0 $ly@@209 $Heap@@20 |f#0@@40| |run#0@@40|) (Sequences.__default.Filter Sequences._default.Filter$E@@0 $LZ $Heap@@20 |f#0@@40| |run#0@@40|))) :qid |unknown.0:0| :skolemid |4344| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@0 (AsFuelBottom $ly@@209) $Heap@@20 |f#0@@40| |run#0@@40|)) )))
(assert (forall ((Sequences._default.Filter$E@@1 T@U) ($ly@@210 T@U) ($h0@@3 T@U) ($h1@@3 T@U) (|f#0@@41| T@U) (|run#0@@41| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.Filter$E@@1) TyType) (= (type $ly@@210) LayerTypeType)) (= (type $h0@@3) (MapType0Type refType MapType1Type))) (= (type $h1@@3) (MapType0Type refType MapType1Type))) (= (type |f#0@@41|) HandleTypeType)) (= (type |run#0@@41|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@3) ($IsGoodHeap $h1@@3)) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@1 $h0@@3 |f#0@@41| |run#0@@41|) (and ($Is |f#0@@41| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@1 TBool)) ($Is |run#0@@41| (TSeq Sequences._default.Filter$E@@1))))) (and ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3)))) (forall (($o@@25 T@U) ($f@@3 T@U) ) (! (let ((alpha@@10 (FieldTypeInv0 (type $f@@3)))) (=> (and (and (= (type $o@@25) refType) (= (type $f@@3) (FieldType alpha@@10))) (and (not (= $o@@25 null)) (exists ((|_x0#0| T@U) (|_o0#0| T@U) ) (!  (and (and (= (type |_x0#0|) BoxType) (= (type |_o0#0|) refType)) (and (and (and ($IsBox |_x0#0| Sequences._default.Filter$E@@1) ($Is |_o0#0| Tclass._System.object?)) (U_2_bool (MapType0Select (Reads1 Sequences._default.Filter$E@@1 TBool $h0@@3 |f#0@@41| |_x0#0|) ($Box |_o0#0|)))) (= ($Box $o@@25) ($Box |_o0#0|)))) :qid |Sequencesidfy.153:13| :skolemid |4345| :no-pattern (type |_x0#0|) :no-pattern (type |_o0#0|) :no-pattern (U_2_int |_x0#0|) :no-pattern (U_2_bool |_x0#0|) :no-pattern (U_2_int |_o0#0|) :no-pattern (U_2_bool |_o0#0|) )))) (= (MapType1Select (MapType0Select $h0@@3 $o@@25) $f@@3) (MapType1Select (MapType0Select $h1@@3 $o@@25) $f@@3)))) :qid |unknown.0:0| :skolemid |4346| :no-pattern (type $o@@25) :no-pattern (type $f@@3) :no-pattern (U_2_int $o@@25) :no-pattern (U_2_bool $o@@25) :no-pattern (U_2_int $f@@3) :no-pattern (U_2_bool $f@@3) ))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@210 $h0@@3 |f#0@@41| |run#0@@41|) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@210 $h1@@3 |f#0@@41| |run#0@@41|))) :qid |unknown.0:0| :skolemid |4347| :pattern ( ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@210 $h1@@3 |f#0@@41| |run#0@@41|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@2 T@U) ($ly@@211 T@U) ($Heap@@21 T@U) (|f#0@@42| T@U) (|run#0@@42| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@2) TyType) (= (type $ly@@211) LayerTypeType)) (= (type $Heap@@21) (MapType0Type refType MapType1Type))) (= (type |f#0@@42|) HandleTypeType)) (= (type |run#0@@42|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@2 $Heap@@21 |f#0@@42| |run#0@@42|) (and (and (and ($IsGoodHeap $Heap@@21) ($Is |f#0@@42| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@2 TBool))) ($Is |run#0@@42| (TSeq Sequences._default.Filter$E@@2))) (forall ((|i#0@@77| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@77|) (< |i#0@@77| (|Seq#Length| |run#0@@42|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@21 |f#0@@42| (|Seq#Index| |run#0@@42| |i#0@@77|)))) :qid |Sequencesidfy.150:21| :skolemid |4348| :pattern ( (|Seq#Index| |run#0@@42| |i#0@@77|)) ))))) (and (and (<= (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@211 $Heap@@21 |f#0@@42| |run#0@@42|)) (|Seq#Length| |run#0@@42|)) (forall ((|i#1@@9| Int) ) (!  (=> (<= (LitInt 0) |i#1@@9|) (=> (and (< |i#1@@9| (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@211 $Heap@@21 |f#0@@42| |run#0@@42|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@21 |f#0@@42| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@211 $Heap@@21 |f#0@@42| |run#0@@42|) |i#1@@9|))) (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@2 TBool $Heap@@21 |f#0@@42| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@211 $Heap@@21 |f#0@@42| |run#0@@42|) |i#1@@9|)))))) :qid |Sequencesidfy.152:20| :skolemid |4349| :pattern ( (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@211 $Heap@@21 |f#0@@42| |run#0@@42|) |i#1@@9|)) ))) ($Is (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@211 $Heap@@21 |f#0@@42| |run#0@@42|) (TSeq Sequences._default.Filter$E@@2)))) :qid |unknown.0:0| :skolemid |4350| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@211 $Heap@@21 |f#0@@42| |run#0@@42|)) ))))
(assert (forall ((Sequences._default.Filter$E@@3 T@U) ($ly@@212 T@U) ($Heap@@22 T@U) (|f#0@@43| T@U) (|run#0@@43| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@3) TyType) (= (type $ly@@212) LayerTypeType)) (= (type $Heap@@22) (MapType0Type refType MapType1Type))) (= (type |f#0@@43|) HandleTypeType)) (= (type |run#0@@43|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@22) ($Is |f#0@@43| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@3 TBool))) ($Is |run#0@@43| (TSeq Sequences._default.Filter$E@@3)))) (= (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@212 $Heap@@22 |f#0@@43| |run#0@@43|) (forall ((|i#2@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@2|) (< |i#2@@2| (|Seq#Length| |run#0@@43|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@22 |f#0@@43| (|Seq#Index| |run#0@@43| |i#2@@2|)))) :qid |Sequencesidfy.150:21| :skolemid |4351| :pattern ( (|Seq#Index| |run#0@@43| |i#2@@2|)) )))) :qid |unknown.0:0| :skolemid |4352| :pattern ( (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@212 $Heap@@22 |f#0@@43| |run#0@@43|) ($IsGoodHeap $Heap@@22)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@4 T@U) ($ly@@213 T@U) ($Heap@@23 T@U) (|f#0@@44| T@U) (|run#0@@44| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@4) TyType) (= (type $ly@@213) LayerTypeType)) (= (type $Heap@@23) (MapType0Type refType MapType1Type))) (= (type |f#0@@44|) HandleTypeType)) (= (type |run#0@@44|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@23 |f#0@@44| |run#0@@44|) (and (and (and ($IsGoodHeap $Heap@@23) ($Is |f#0@@44| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@4 TBool))) ($Is |run#0@@44| (TSeq Sequences._default.Filter$E@@4))) (forall ((|i#2@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@3|) (< |i#2@@3| (|Seq#Length| |run#0@@44|))) (Requires1 Sequences._default.Filter$E@@4 TBool $Heap@@23 |f#0@@44| (|Seq#Index| |run#0@@44| |i#2@@3|)))) :qid |Sequencesidfy.150:21| :skolemid |4351| :pattern ( (|Seq#Index| |run#0@@44| |i#2@@3|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@44|) (LitInt 0))) (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@23 |f#0@@44| (|Seq#Drop| |run#0@@44| (LitInt 1)))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@213) $Heap@@23 |f#0@@44| |run#0@@44|) (ite (= (|Seq#Length| |run#0@@44|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ite (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@4 TBool $Heap@@23 |f#0@@44| (|Seq#Index| |run#0@@44| (LitInt 0))))) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |run#0@@44| (LitInt 0))) (|Seq#Empty| BoxType)) (Sequences.__default.Filter Sequences._default.Filter$E@@4 $ly@@213 $Heap@@23 |f#0@@44| (|Seq#Drop| |run#0@@44| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |4353| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@213) $Heap@@23 |f#0@@44| |run#0@@44|) ($IsGoodHeap $Heap@@23)) ))))
(assert (forall ((arg0@@321 T@U) (arg1@@171 T@U) (arg2@@104 T@U) (arg3@@61 T@U) (arg4@@40 T@U) (arg5@@17 T@U) ) (! (= (type (Sequences.__default.FoldLeft arg0@@321 arg1@@171 arg2@@104 arg3@@61 arg4@@40 arg5@@17)) BoxType) :qid |funType:Sequences.__default.FoldLeft| :pattern ( (Sequences.__default.FoldLeft arg0@@321 arg1@@171 arg2@@104 arg3@@61 arg4@@40 arg5@@17)) )))
(assert (forall ((Sequences._default.FoldLeft$A T@U) (Sequences._default.FoldLeft$E T@U) ($ly@@214 T@U) (|f#0@@45| T@U) (|init#0| T@U) (|run#0@@45| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A) TyType) (= (type Sequences._default.FoldLeft$E) TyType)) (= (type $ly@@214) LayerTypeType)) (= (type |f#0@@45|) HandleTypeType)) (= (type |init#0|) BoxType)) (= (type |run#0@@45|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@214) |f#0@@45| |init#0| |run#0@@45|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E $ly@@214 |f#0@@45| |init#0| |run#0@@45|))) :qid |unknown.0:0| :skolemid |4354| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@214) |f#0@@45| |init#0| |run#0@@45|)) )))
(assert (forall ((Sequences._default.FoldLeft$A@@0 T@U) (Sequences._default.FoldLeft$E@@0 T@U) ($ly@@215 T@U) (|f#0@@46| T@U) (|init#0@@0| T@U) (|run#0@@46| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@0) TyType) (= (type Sequences._default.FoldLeft$E@@0) TyType)) (= (type $ly@@215) LayerTypeType)) (= (type |f#0@@46|) HandleTypeType)) (= (type |init#0@@0|) BoxType)) (= (type |run#0@@46|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $ly@@215 |f#0@@46| |init#0@@0| |run#0@@46|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $LZ |f#0@@46| |init#0@@0| |run#0@@46|))) :qid |unknown.0:0| :skolemid |4355| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 (AsFuelBottom $ly@@215) |f#0@@46| |init#0@@0| |run#0@@46|)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@1 T@U) (Sequences._default.FoldLeft$E@@1 T@U) ($ly@@216 T@U) (|f#0@@47| T@U) (|init#0@@1| T@U) (|run#0@@47| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@1) TyType) (= (type Sequences._default.FoldLeft$E@@1) TyType)) (= (type $ly@@216) LayerTypeType)) (= (type |f#0@@47|) HandleTypeType)) (= (type |init#0@@1|) BoxType)) (= (type |run#0@@47|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 |f#0@@47| |init#0@@1| |run#0@@47|) (and (and ($Is |f#0@@47| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 Sequences._default.FoldLeft$A@@1)) ($IsBox |init#0@@1| Sequences._default.FoldLeft$A@@1)) ($Is |run#0@@47| (TSeq Sequences._default.FoldLeft$E@@1))))) ($IsBox (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@216 |f#0@@47| |init#0@@1| |run#0@@47|) Sequences._default.FoldLeft$A@@1)) :qid |unknown.0:0| :skolemid |4356| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@216 |f#0@@47| |init#0@@1| |run#0@@47|)) ))))
(assert (forall ((Sequences._default.FoldLeft$A@@2 T@U) (Sequences._default.FoldLeft$E@@2 T@U) ($ly@@217 T@U) ($Heap@@24 T@U) (|f#0@@48| T@U) (|init#0@@2| T@U) (|run#0@@48| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@2) TyType) (= (type Sequences._default.FoldLeft$E@@2) TyType)) (= (type $ly@@217) LayerTypeType)) (= (type $Heap@@24) (MapType0Type refType MapType1Type))) (= (type |f#0@@48|) HandleTypeType)) (= (type |init#0@@2|) BoxType)) (= (type |run#0@@48|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@24) ($Is |f#0@@48| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 Sequences._default.FoldLeft$A@@2))) ($IsBox |init#0@@2| Sequences._default.FoldLeft$A@@2)) ($Is |run#0@@48| (TSeq Sequences._default.FoldLeft$E@@2)))) (= (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@217 |f#0@@48| |init#0@@2| |run#0@@48|) true)) :qid |unknown.0:0| :skolemid |4357| :pattern ( (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@217 |f#0@@48| |init#0@@2| |run#0@@48|) ($IsGoodHeap $Heap@@24)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@3 T@U) (Sequences._default.FoldLeft$E@@3 T@U) ($ly@@218 T@U) ($Heap@@25 T@U) (|f#0@@49| T@U) (|init#0@@3| T@U) (|run#0@@49| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@3) TyType) (= (type Sequences._default.FoldLeft$E@@3) TyType)) (= (type $ly@@218) LayerTypeType)) (= (type $Heap@@25) (MapType0Type refType MapType1Type))) (= (type |f#0@@49|) HandleTypeType)) (= (type |init#0@@3|) BoxType)) (= (type |run#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@49| |init#0@@3| |run#0@@49|) (and (and (and ($IsGoodHeap $Heap@@25) ($Is |f#0@@49| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3))) ($IsBox |init#0@@3| Sequences._default.FoldLeft$A@@3)) ($Is |run#0@@49| (TSeq Sequences._default.FoldLeft$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@49|) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@49| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@25 |f#0@@49| |init#0@@3| (|Seq#Index| |run#0@@49| (LitInt 0))) (|Seq#Drop| |run#0@@49| (LitInt 1)))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@218) |f#0@@49| |init#0@@3| |run#0@@49|) (ite (= (|Seq#Length| |run#0@@49|) (LitInt 0)) |init#0@@3| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 $ly@@218 |f#0@@49| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@25 |f#0@@49| |init#0@@3| (|Seq#Index| |run#0@@49| (LitInt 0))) (|Seq#Drop| |run#0@@49| (LitInt 1))))))) :qid |unknown.0:0| :skolemid |4358| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@218) |f#0@@49| |init#0@@3| |run#0@@49|) ($IsGoodHeap $Heap@@25)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@4 T@U) (Sequences._default.FoldLeft$E@@4 T@U) ($ly@@219 T@U) ($Heap@@26 T@U) (|f#0@@50| T@U) (|init#0@@4| T@U) (|run#0@@50| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@4) TyType) (= (type Sequences._default.FoldLeft$E@@4) TyType)) (= (type $ly@@219) LayerTypeType)) (= (type $Heap@@26) (MapType0Type refType MapType1Type))) (= (type |f#0@@50|) HandleTypeType)) (= (type |init#0@@4|) BoxType)) (= (type |run#0@@50|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@50| |init#0@@4| (Lit |run#0@@50|)) (and (and (and ($IsGoodHeap $Heap@@26) ($Is |f#0@@50| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4))) ($IsBox |init#0@@4| Sequences._default.FoldLeft$A@@4)) ($Is |run#0@@50| (TSeq Sequences._default.FoldLeft$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@50|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@50| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@26 |f#0@@50| |init#0@@4| (|Seq#Index| (Lit |run#0@@50|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@50|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@219) |f#0@@50| |init#0@@4| (Lit |run#0@@50|)) (ite (= (|Seq#Length| (Lit |run#0@@50|)) (LitInt 0)) |init#0@@4| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@219) |f#0@@50| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@26 |f#0@@50| |init#0@@4| (|Seq#Index| (Lit |run#0@@50|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@50|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |4359| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@219) |f#0@@50| |init#0@@4| (Lit |run#0@@50|)) ($IsGoodHeap $Heap@@26)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@5 T@U) (Sequences._default.FoldLeft$E@@5 T@U) ($ly@@220 T@U) ($Heap@@27 T@U) (|f#0@@51| T@U) (|init#0@@5| T@U) (|run#0@@51| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@5) TyType) (= (type Sequences._default.FoldLeft$E@@5) TyType)) (= (type $ly@@220) LayerTypeType)) (= (type $Heap@@27) (MapType0Type refType MapType1Type))) (= (type |f#0@@51|) HandleTypeType)) (= (type |init#0@@5|) BoxType)) (= (type |run#0@@51|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@51|) (Lit |init#0@@5|) (Lit |run#0@@51|)) (and (and (and ($IsGoodHeap $Heap@@27) ($Is |f#0@@51| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5))) ($IsBox |init#0@@5| Sequences._default.FoldLeft$A@@5)) ($Is |run#0@@51| (TSeq Sequences._default.FoldLeft$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@51|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@51|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@27 (Lit |f#0@@51|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@51|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@51|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@220) (Lit |f#0@@51|) (Lit |init#0@@5|) (Lit |run#0@@51|)) (ite (= (|Seq#Length| (Lit |run#0@@51|)) (LitInt 0)) |init#0@@5| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@220) (Lit |f#0@@51|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@27 (Lit |f#0@@51|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@51|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@51|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |4360| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@220) (Lit |f#0@@51|) (Lit |init#0@@5|) (Lit |run#0@@51|)) ($IsGoodHeap $Heap@@27)) ))))
(assert (forall ((arg0@@322 T@U) (arg1@@172 T@U) (arg2@@105 T@U) (arg3@@62 T@U) (arg4@@41 T@U) (arg5@@18 T@U) ) (! (= (type (Sequences.__default.FoldRight arg0@@322 arg1@@172 arg2@@105 arg3@@62 arg4@@41 arg5@@18)) BoxType) :qid |funType:Sequences.__default.FoldRight| :pattern ( (Sequences.__default.FoldRight arg0@@322 arg1@@172 arg2@@105 arg3@@62 arg4@@41 arg5@@18)) )))
(assert (forall ((Sequences._default.FoldRight$A T@U) (Sequences._default.FoldRight$E T@U) ($ly@@221 T@U) (|f#0@@52| T@U) (|init#0@@6| T@U) (|run#0@@52| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A) TyType) (= (type Sequences._default.FoldRight$E) TyType)) (= (type $ly@@221) LayerTypeType)) (= (type |f#0@@52|) HandleTypeType)) (= (type |init#0@@6|) BoxType)) (= (type |run#0@@52|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@221) |f#0@@52| |init#0@@6| |run#0@@52|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E $ly@@221 |f#0@@52| |init#0@@6| |run#0@@52|))) :qid |unknown.0:0| :skolemid |4361| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@221) |f#0@@52| |init#0@@6| |run#0@@52|)) )))
(assert (forall ((Sequences._default.FoldRight$A@@0 T@U) (Sequences._default.FoldRight$E@@0 T@U) ($ly@@222 T@U) (|f#0@@53| T@U) (|init#0@@7| T@U) (|run#0@@53| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@0) TyType) (= (type Sequences._default.FoldRight$E@@0) TyType)) (= (type $ly@@222) LayerTypeType)) (= (type |f#0@@53|) HandleTypeType)) (= (type |init#0@@7|) BoxType)) (= (type |run#0@@53|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $ly@@222 |f#0@@53| |init#0@@7| |run#0@@53|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $LZ |f#0@@53| |init#0@@7| |run#0@@53|))) :qid |unknown.0:0| :skolemid |4362| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 (AsFuelBottom $ly@@222) |f#0@@53| |init#0@@7| |run#0@@53|)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@1 T@U) (Sequences._default.FoldRight$E@@1 T@U) ($ly@@223 T@U) (|f#0@@54| T@U) (|init#0@@8| T@U) (|run#0@@54| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@1) TyType) (= (type Sequences._default.FoldRight$E@@1) TyType)) (= (type $ly@@223) LayerTypeType)) (= (type |f#0@@54|) HandleTypeType)) (= (type |init#0@@8|) BoxType)) (= (type |run#0@@54|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 |f#0@@54| |init#0@@8| |run#0@@54|) (and (and ($Is |f#0@@54| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 Sequences._default.FoldRight$A@@1)) ($IsBox |init#0@@8| Sequences._default.FoldRight$A@@1)) ($Is |run#0@@54| (TSeq Sequences._default.FoldRight$E@@1))))) ($IsBox (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@223 |f#0@@54| |init#0@@8| |run#0@@54|) Sequences._default.FoldRight$A@@1)) :qid |unknown.0:0| :skolemid |4363| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@223 |f#0@@54| |init#0@@8| |run#0@@54|)) ))))
(assert (forall ((Sequences._default.FoldRight$A@@2 T@U) (Sequences._default.FoldRight$E@@2 T@U) ($ly@@224 T@U) ($Heap@@28 T@U) (|f#0@@55| T@U) (|init#0@@9| T@U) (|run#0@@55| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@2) TyType) (= (type Sequences._default.FoldRight$E@@2) TyType)) (= (type $ly@@224) LayerTypeType)) (= (type $Heap@@28) (MapType0Type refType MapType1Type))) (= (type |f#0@@55|) HandleTypeType)) (= (type |init#0@@9|) BoxType)) (= (type |run#0@@55|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@28) ($Is |f#0@@55| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 Sequences._default.FoldRight$A@@2))) ($IsBox |init#0@@9| Sequences._default.FoldRight$A@@2)) ($Is |run#0@@55| (TSeq Sequences._default.FoldRight$E@@2)))) (= (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@224 |f#0@@55| |init#0@@9| |run#0@@55|) true)) :qid |unknown.0:0| :skolemid |4364| :pattern ( (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@224 |f#0@@55| |init#0@@9| |run#0@@55|) ($IsGoodHeap $Heap@@28)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@3 T@U) (Sequences._default.FoldRight$E@@3 T@U) ($ly@@225 T@U) ($Heap@@29 T@U) (|f#0@@56| T@U) (|init#0@@10| T@U) (|run#0@@56| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@3) TyType) (= (type Sequences._default.FoldRight$E@@3) TyType)) (= (type $ly@@225) LayerTypeType)) (= (type $Heap@@29) (MapType0Type refType MapType1Type))) (= (type |f#0@@56|) HandleTypeType)) (= (type |init#0@@10|) BoxType)) (= (type |run#0@@56|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@56| |init#0@@10| |run#0@@56|) (and (and (and ($IsGoodHeap $Heap@@29) ($Is |f#0@@56| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3))) ($IsBox |init#0@@10| Sequences._default.FoldRight$A@@3)) ($Is |run#0@@56| (TSeq Sequences._default.FoldRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@56|) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@56| |init#0@@10| (|Seq#Drop| |run#0@@56| (LitInt 1)))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@225) |f#0@@56| |init#0@@10| |run#0@@56|) (ite (= (|Seq#Length| |run#0@@56|) (LitInt 0)) |init#0@@10| (Apply2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3 $Heap@@29 |f#0@@56| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 $ly@@225 |f#0@@56| |init#0@@10| (|Seq#Drop| |run#0@@56| (LitInt 1))) (|Seq#Index| |run#0@@56| (LitInt 0))))))) :qid |unknown.0:0| :skolemid |4365| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@225) |f#0@@56| |init#0@@10| |run#0@@56|) ($IsGoodHeap $Heap@@29)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@4 T@U) (Sequences._default.FoldRight$E@@4 T@U) ($ly@@226 T@U) ($Heap@@30 T@U) (|f#0@@57| T@U) (|init#0@@11| T@U) (|run#0@@57| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@4) TyType) (= (type Sequences._default.FoldRight$E@@4) TyType)) (= (type $ly@@226) LayerTypeType)) (= (type $Heap@@30) (MapType0Type refType MapType1Type))) (= (type |f#0@@57|) HandleTypeType)) (= (type |init#0@@11|) BoxType)) (= (type |run#0@@57|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@57| |init#0@@11| (Lit |run#0@@57|)) (and (and (and ($IsGoodHeap $Heap@@30) ($Is |f#0@@57| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4))) ($IsBox |init#0@@11| Sequences._default.FoldRight$A@@4)) ($Is |run#0@@57| (TSeq Sequences._default.FoldRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@57|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@57| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@57|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@226) |f#0@@57| |init#0@@11| (Lit |run#0@@57|)) (ite (= (|Seq#Length| (Lit |run#0@@57|)) (LitInt 0)) |init#0@@11| (Apply2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4 $Heap@@30 |f#0@@57| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@226) |f#0@@57| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@57|) (LitInt 1)))) (|Seq#Index| (Lit |run#0@@57|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |4366| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@226) |f#0@@57| |init#0@@11| (Lit |run#0@@57|)) ($IsGoodHeap $Heap@@30)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@5 T@U) (Sequences._default.FoldRight$E@@5 T@U) ($ly@@227 T@U) ($Heap@@31 T@U) (|f#0@@58| T@U) (|init#0@@12| T@U) (|run#0@@58| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@5) TyType) (= (type Sequences._default.FoldRight$E@@5) TyType)) (= (type $ly@@227) LayerTypeType)) (= (type $Heap@@31) (MapType0Type refType MapType1Type))) (= (type |f#0@@58|) HandleTypeType)) (= (type |init#0@@12|) BoxType)) (= (type |run#0@@58|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit |run#0@@58|)) (and (and (and ($IsGoodHeap $Heap@@31) ($Is |f#0@@58| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5))) ($IsBox |init#0@@12| Sequences._default.FoldRight$A@@5)) ($Is |run#0@@58| (TSeq Sequences._default.FoldRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@58|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@58|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@227) (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit |run#0@@58|)) (ite (= (|Seq#Length| (Lit |run#0@@58|)) (LitInt 0)) |init#0@@12| (Apply2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5 $Heap@@31 (Lit |f#0@@58|) (Lit (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@227) (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@58|) (LitInt 1))))) (|Seq#Index| (Lit |run#0@@58|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |4367| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@227) (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit |run#0@@58|)) ($IsGoodHeap $Heap@@31)) ))))
(assert (forall ((arg0@@323 T@U) (arg1@@173 T@U) (arg2@@106 T@U) (arg3@@63 T@U) (arg4@@42 T@U) (arg5@@19 T@U) ) (! (= (type (Sequences.__default.FoldFromRight arg0@@323 arg1@@173 arg2@@106 arg3@@63 arg4@@42 arg5@@19)) BoxType) :qid |funType:Sequences.__default.FoldFromRight| :pattern ( (Sequences.__default.FoldFromRight arg0@@323 arg1@@173 arg2@@106 arg3@@63 arg4@@42 arg5@@19)) )))
(assert (forall ((Sequences._default.FoldFromRight$A T@U) (Sequences._default.FoldFromRight$E T@U) ($ly@@228 T@U) (|f#0@@59| T@U) (|init#0@@13| T@U) (|run#0@@59| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A) TyType) (= (type Sequences._default.FoldFromRight$E) TyType)) (= (type $ly@@228) LayerTypeType)) (= (type |f#0@@59|) HandleTypeType)) (= (type |init#0@@13|) BoxType)) (= (type |run#0@@59|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@228) |f#0@@59| |init#0@@13| |run#0@@59|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E $ly@@228 |f#0@@59| |init#0@@13| |run#0@@59|))) :qid |unknown.0:0| :skolemid |4368| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@228) |f#0@@59| |init#0@@13| |run#0@@59|)) )))
(assert (forall ((Sequences._default.FoldFromRight$A@@0 T@U) (Sequences._default.FoldFromRight$E@@0 T@U) ($ly@@229 T@U) (|f#0@@60| T@U) (|init#0@@14| T@U) (|run#0@@60| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@0) TyType) (= (type Sequences._default.FoldFromRight$E@@0) TyType)) (= (type $ly@@229) LayerTypeType)) (= (type |f#0@@60|) HandleTypeType)) (= (type |init#0@@14|) BoxType)) (= (type |run#0@@60|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $ly@@229 |f#0@@60| |init#0@@14| |run#0@@60|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $LZ |f#0@@60| |init#0@@14| |run#0@@60|))) :qid |unknown.0:0| :skolemid |4369| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 (AsFuelBottom $ly@@229) |f#0@@60| |init#0@@14| |run#0@@60|)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@1 T@U) (Sequences._default.FoldFromRight$E@@1 T@U) ($ly@@230 T@U) (|f#0@@61| T@U) (|init#0@@15| T@U) (|run#0@@61| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@1) TyType) (= (type Sequences._default.FoldFromRight$E@@1) TyType)) (= (type $ly@@230) LayerTypeType)) (= (type |f#0@@61|) HandleTypeType)) (= (type |init#0@@15|) BoxType)) (= (type |run#0@@61|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 |f#0@@61| |init#0@@15| |run#0@@61|) (and (and ($Is |f#0@@61| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 Sequences._default.FoldFromRight$A@@1)) ($IsBox |init#0@@15| Sequences._default.FoldFromRight$A@@1)) ($Is |run#0@@61| (TSeq Sequences._default.FoldFromRight$E@@1))))) ($IsBox (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@230 |f#0@@61| |init#0@@15| |run#0@@61|) Sequences._default.FoldFromRight$A@@1)) :qid |unknown.0:0| :skolemid |4370| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@230 |f#0@@61| |init#0@@15| |run#0@@61|)) ))))
(assert (forall ((Sequences._default.FoldFromRight$A@@2 T@U) (Sequences._default.FoldFromRight$E@@2 T@U) ($ly@@231 T@U) ($Heap@@32 T@U) (|f#0@@62| T@U) (|init#0@@16| T@U) (|run#0@@62| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@2) TyType) (= (type Sequences._default.FoldFromRight$E@@2) TyType)) (= (type $ly@@231) LayerTypeType)) (= (type $Heap@@32) (MapType0Type refType MapType1Type))) (= (type |f#0@@62|) HandleTypeType)) (= (type |init#0@@16|) BoxType)) (= (type |run#0@@62|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@32) ($Is |f#0@@62| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 Sequences._default.FoldFromRight$A@@2))) ($IsBox |init#0@@16| Sequences._default.FoldFromRight$A@@2)) ($Is |run#0@@62| (TSeq Sequences._default.FoldFromRight$E@@2)))) (= (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@231 |f#0@@62| |init#0@@16| |run#0@@62|) true)) :qid |unknown.0:0| :skolemid |4371| :pattern ( (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@231 |f#0@@62| |init#0@@16| |run#0@@62|) ($IsGoodHeap $Heap@@32)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@3 T@U) (Sequences._default.FoldFromRight$E@@3 T@U) ($ly@@232 T@U) ($Heap@@33 T@U) (|f#0@@63| T@U) (|init#0@@17| T@U) (|run#0@@63| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@3) TyType) (= (type Sequences._default.FoldFromRight$E@@3) TyType)) (= (type $ly@@232) LayerTypeType)) (= (type $Heap@@33) (MapType0Type refType MapType1Type))) (= (type |f#0@@63|) HandleTypeType)) (= (type |init#0@@17|) BoxType)) (= (type |run#0@@63|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@63| |init#0@@17| |run#0@@63|) (and (and (and ($IsGoodHeap $Heap@@33) ($Is |f#0@@63| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3))) ($IsBox |init#0@@17| Sequences._default.FoldFromRight$A@@3)) ($Is |run#0@@63| (TSeq Sequences._default.FoldFromRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@63|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@63|) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@63| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@63|))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@63|))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@232) |f#0@@63| |init#0@@17| |run#0@@63|) (ite (= (|Seq#Length| |run#0@@63|) (LitInt 0)) |init#0@@17| (Apply2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3 $Heap@@33 |f#0@@63| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 $ly@@232 |f#0@@63| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@63|)) (Sequences.__default.Last Sequences._default.FoldFromRight$E@@3 |run#0@@63|)))))) :qid |unknown.0:0| :skolemid |4372| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@232) |f#0@@63| |init#0@@17| |run#0@@63|) ($IsGoodHeap $Heap@@33)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@4 T@U) (Sequences._default.FoldFromRight$E@@4 T@U) ($ly@@233 T@U) ($Heap@@34 T@U) (|f#0@@64| T@U) (|init#0@@18| T@U) (|run#0@@64| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@4) TyType) (= (type Sequences._default.FoldFromRight$E@@4) TyType)) (= (type $ly@@233) LayerTypeType)) (= (type $Heap@@34) (MapType0Type refType MapType1Type))) (= (type |f#0@@64|) HandleTypeType)) (= (type |init#0@@18|) BoxType)) (= (type |run#0@@64|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@64| |init#0@@18| (Lit |run#0@@64|)) (and (and (and ($IsGoodHeap $Heap@@34) ($Is |f#0@@64| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4))) ($IsBox |init#0@@18| Sequences._default.FoldFromRight$A@@4)) ($Is |run#0@@64| (TSeq Sequences._default.FoldFromRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@64|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@64| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@233) |f#0@@64| |init#0@@18| (Lit |run#0@@64|)) (ite (= (|Seq#Length| (Lit |run#0@@64|)) (LitInt 0)) |init#0@@18| (Apply2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4 $Heap@@34 |f#0@@64| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@233) |f#0@@64| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |4373| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@233) |f#0@@64| |init#0@@18| (Lit |run#0@@64|)) ($IsGoodHeap $Heap@@34)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@5 T@U) (Sequences._default.FoldFromRight$E@@5 T@U) ($ly@@234 T@U) ($Heap@@35 T@U) (|f#0@@65| T@U) (|init#0@@19| T@U) (|run#0@@65| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@5) TyType) (= (type Sequences._default.FoldFromRight$E@@5) TyType)) (= (type $ly@@234) LayerTypeType)) (= (type $Heap@@35) (MapType0Type refType MapType1Type))) (= (type |f#0@@65|) HandleTypeType)) (= (type |init#0@@19|) BoxType)) (= (type |run#0@@65|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit |run#0@@65|)) (and (and (and ($IsGoodHeap $Heap@@35) ($Is |f#0@@65| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5))) ($IsBox |init#0@@19| Sequences._default.FoldFromRight$A@@5)) ($Is |run#0@@65| (TSeq Sequences._default.FoldFromRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@65|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@234) (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit |run#0@@65|)) (ite (= (|Seq#Length| (Lit |run#0@@65|)) (LitInt 0)) |init#0@@19| (Apply2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5 $Heap@@35 (Lit |f#0@@65|) (Lit (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@234) (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|))))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |4374| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@234) (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit |run#0@@65|)) ($IsGoodHeap $Heap@@35)) ))))
(assert (forall ((arg0@@324 T@U) (arg1@@174 T@U) (arg2@@107 T@U) (arg3@@64 Int) ) (! (= (type (Sequences.__default.remove arg0@@324 arg1@@174 arg2@@107 arg3@@64)) (SeqType BoxType)) :qid |funType:Sequences.__default.remove| :pattern ( (Sequences.__default.remove arg0@@324 arg1@@174 arg2@@107 arg3@@64)) )))
(assert (forall ((Sequences._default.remove$A T@U) ($ly@@235 T@U) (|s#0@@8| T@U) (|pos#0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A) TyType) (= (type $ly@@235) LayerTypeType)) (= (type |s#0@@8|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@235) |s#0@@8| |pos#0|) (Sequences.__default.remove Sequences._default.remove$A $ly@@235 |s#0@@8| |pos#0|))) :qid |unknown.0:0| :skolemid |4375| :pattern ( (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@235) |s#0@@8| |pos#0|)) )))
(assert (forall ((Sequences._default.remove$A@@0 T@U) ($ly@@236 T@U) (|s#0@@9| T@U) (|pos#0@@0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A@@0) TyType) (= (type $ly@@236) LayerTypeType)) (= (type |s#0@@9|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A@@0 $ly@@236 |s#0@@9| |pos#0@@0|) (Sequences.__default.remove Sequences._default.remove$A@@0 $LZ |s#0@@9| |pos#0@@0|))) :qid |unknown.0:0| :skolemid |4376| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@0 (AsFuelBottom $ly@@236) |s#0@@9| |pos#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@1 T@U) ($ly@@237 T@U) (|s#0@@10| T@U) (|pos#0@@1| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@1) TyType) (= (type $ly@@237) LayerTypeType)) (= (type |s#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@1 |s#0@@10| |pos#0@@1|) (and ($Is |s#0@@10| (TSeq Sequences._default.remove$A@@1)) (and (<= (LitInt 0) |pos#0@@1|) (< |pos#0@@1| (|Seq#Length| |s#0@@10|)))))) (and (and (and (= (|Seq#Length| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@237 |s#0@@10| |pos#0@@1|)) (- (|Seq#Length| |s#0@@10|) 1)) (forall ((|i#0@@78| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@78|) (< |i#0@@78| |pos#0@@1|)) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@237 |s#0@@10| |pos#0@@1|) |i#0@@78|) (|Seq#Index| |s#0@@10| |i#0@@78|))) :qid |Sequencesidfy.180:18| :skolemid |4377| :pattern ( (|Seq#Index| |s#0@@10| |i#0@@78|)) :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@237 |s#0@@10| |pos#0@@1|) |i#0@@78|)) ))) (forall ((|i#1@@10| Int) ) (!  (=> (and (<= |pos#0@@1| |i#1@@10|) (< |i#1@@10| (- (|Seq#Length| |s#0@@10|) 1))) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@237 |s#0@@10| |pos#0@@1|) |i#1@@10|) (|Seq#Index| |s#0@@10| (+ |i#1@@10| 1)))) :qid |Sequencesidfy.181:18| :skolemid |4378| :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@237 |s#0@@10| |pos#0@@1|) |i#1@@10|)) ))) ($Is (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@237 |s#0@@10| |pos#0@@1|) (TSeq Sequences._default.remove$A@@1)))) :qid |unknown.0:0| :skolemid |4379| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@237 |s#0@@10| |pos#0@@1|)) ))))
(assert (forall ((Sequences._default.remove$A@@2 T@U) ($ly@@238 T@U) (|s#0@@11| T@U) (|pos#0@@2| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@2) TyType) (= (type $ly@@238) LayerTypeType)) (= (type |s#0@@11|) (SeqType BoxType))) ($Is |s#0@@11| (TSeq Sequences._default.remove$A@@2))) (= (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@238 |s#0@@11| |pos#0@@2|)  (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@11|))))) :qid |unknown.0:0| :skolemid |4380| :pattern ( (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@238 |s#0@@11| |pos#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@3 T@U) ($ly@@239 T@U) (|s#0@@12| T@U) (|pos#0@@3| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@3) TyType) (= (type $ly@@239) LayerTypeType)) (= (type |s#0@@12|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@3 |s#0@@12| |pos#0@@3|) (and ($Is |s#0@@12| (TSeq Sequences._default.remove$A@@3)) (and (<= (LitInt 0) |pos#0@@3|) (< |pos#0@@3| (|Seq#Length| |s#0@@12|)))))) (= (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@239) |s#0@@12| |pos#0@@3|) (|Seq#Append| (|Seq#Take| |s#0@@12| |pos#0@@3|) (|Seq#Drop| |s#0@@12| (+ |pos#0@@3| 1))))) :qid |unknown.0:0| :skolemid |4381| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@239) |s#0@@12| |pos#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.remove$A@@4 T@U) ($ly@@240 T@U) (|s#0@@13| T@U) (|pos#0@@4| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@4) TyType) (= (type $ly@@240) LayerTypeType)) (= (type |s#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@4 (Lit |s#0@@13|) (LitInt |pos#0@@4|)) (and ($Is |s#0@@13| (TSeq Sequences._default.remove$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@4|)) (< |pos#0@@4| (|Seq#Length| (Lit |s#0@@13|))))))) (= (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@240) (Lit |s#0@@13|) (LitInt |pos#0@@4|)) (|Seq#Append| (|Seq#Take| (Lit |s#0@@13|) (LitInt |pos#0@@4|)) (|Seq#Drop| (Lit |s#0@@13|) (LitInt (+ |pos#0@@4| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |4382| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@240) (Lit |s#0@@13|) (LitInt |pos#0@@4|))) ))))
(assert (forall ((arg0@@325 T@U) (arg1@@175 T@U) (arg2@@108 T@U) (arg3@@65 T@U) ) (! (= (type (Sequences.__default.RemoveOneValue arg0@@325 arg1@@175 arg2@@108 arg3@@65)) (SeqType BoxType)) :qid |funType:Sequences.__default.RemoveOneValue| :pattern ( (Sequences.__default.RemoveOneValue arg0@@325 arg1@@175 arg2@@108 arg3@@65)) )))
(assert (forall ((Sequences._default.RemoveOneValue$V T@U) ($ly@@241 T@U) (|s#0@@14| T@U) (|v#0@@1| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V) TyType) (= (type $ly@@241) LayerTypeType)) (= (type |s#0@@14|) (SeqType BoxType))) (= (type |v#0@@1|) BoxType)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V ($LS $ly@@241) |s#0@@14| |v#0@@1|) (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V $ly@@241 |s#0@@14| |v#0@@1|))) :qid |unknown.0:0| :skolemid |4383| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V ($LS $ly@@241) |s#0@@14| |v#0@@1|)) )))
(assert (forall ((Sequences._default.RemoveOneValue$V@@0 T@U) ($ly@@242 T@U) (|s#0@@15| T@U) (|v#0@@2| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V@@0) TyType) (= (type $ly@@242) LayerTypeType)) (= (type |s#0@@15|) (SeqType BoxType))) (= (type |v#0@@2|) BoxType)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 $ly@@242 |s#0@@15| |v#0@@2|) (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 $LZ |s#0@@15| |v#0@@2|))) :qid |unknown.0:0| :skolemid |4384| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 (AsFuelBottom $ly@@242) |s#0@@15| |v#0@@2|)) )))
(assert (= (type StartFuel_Sequences._default.NoDupes) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@1 T@U) ($ly@@243 T@U) (|s#0@@16| T@U) (|v#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@1) TyType) (= (type $ly@@243) LayerTypeType)) (= (type |s#0@@16|) (SeqType BoxType))) (= (type |v#0@@3|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@1 |s#0@@16| |v#0@@3|) (and ($Is |s#0@@16| (TSeq Sequences._default.RemoveOneValue$V@@1)) ($IsBox |v#0@@3| Sequences._default.RemoveOneValue$V@@1)))) (and (=> (Sequences.__default.NoDupes Sequences._default.RemoveOneValue$V@@1 StartFuel_Sequences._default.NoDupes |s#0@@16|) (and (Sequences.__default.NoDupes Sequences._default.RemoveOneValue$V@@1 StartFuel_Sequences._default.NoDupes (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@243 |s#0@@16| |v#0@@3|)) (|Set#Equal| (Sequences.__default.Set Sequences._default.RemoveOneValue$V@@1 (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@243 |s#0@@16| |v#0@@3|)) (|Set#Difference| (Sequences.__default.Set Sequences._default.RemoveOneValue$V@@1 |s#0@@16|) (|Set#UnionOne| (|Set#Empty| BoxType) |v#0@@3|))))) ($Is (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@243 |s#0@@16| |v#0@@3|) (TSeq Sequences._default.RemoveOneValue$V@@1)))) :qid |unknown.0:0| :skolemid |4385| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@243 |s#0@@16| |v#0@@3|)) ))))
(assert (forall ((Sequences._default.RemoveOneValue$V@@2 T@U) ($ly@@244 T@U) ($Heap@@36 T@U) (|s#0@@17| T@U) (|v#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@2) TyType) (= (type $ly@@244) LayerTypeType)) (= (type $Heap@@36) (MapType0Type refType MapType1Type))) (= (type |s#0@@17|) (SeqType BoxType))) (= (type |v#0@@4|) BoxType)) (and (and ($IsGoodHeap $Heap@@36) ($Is |s#0@@17| (TSeq Sequences._default.RemoveOneValue$V@@2))) ($IsBox |v#0@@4| Sequences._default.RemoveOneValue$V@@2))) (= (|Sequences.__default.RemoveOneValue#requires| Sequences._default.RemoveOneValue$V@@2 $ly@@244 |s#0@@17| |v#0@@4|) true)) :qid |unknown.0:0| :skolemid |4386| :pattern ( (|Sequences.__default.RemoveOneValue#requires| Sequences._default.RemoveOneValue$V@@2 $ly@@244 |s#0@@17| |v#0@@4|) ($IsGoodHeap $Heap@@36)) )))
(assert (forall ((Sequences._default.RemoveOneValue$V@@3 T@U) (s@@50 T@U) (v@@54 T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V@@3) TyType) (= (type s@@50) (SeqType BoxType))) (= (type v@@54) BoxType)) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@54)) (and (and (<= (LitInt 0) (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@54)) (< (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@54) (|Seq#Length| s@@50))) (= (|Seq#Index| s@@50 (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@54)) v@@54))) :qid |Sequencesidfy.191:5| :skolemid |4387| :pattern ( (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@54)) )))
(assert  (and (= (type MoreFuel_Sequences._default.NoDupes0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.NoDupes) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@4 T@U) ($ly@@245 T@U) ($Heap@@37 T@U) (|s#0@@18| T@U) (|v#0@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@4) TyType) (= (type $ly@@245) LayerTypeType)) (= (type $Heap@@37) (MapType0Type refType MapType1Type))) (= (type |s#0@@18|) (SeqType BoxType))) (= (type |v#0@@5|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@4 |s#0@@18| |v#0@@5|) (and (and ($IsGoodHeap $Heap@@37) ($Is |s#0@@18| (TSeq Sequences._default.RemoveOneValue$V@@4))) ($IsBox |v#0@@5| Sequences._default.RemoveOneValue$V@@4)))) (and (=> (|Seq#Contains| |s#0@@18| |v#0@@5|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@4 |s#0@@18| |v#0@@5|)) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes0)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes0)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes0) MoreFuel_Sequences._default.NoDupes0)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@4 ($LS $ly@@245) |s#0@@18| |v#0@@5|) (ite  (not (|Seq#Contains| |s#0@@18| |v#0@@5|)) |s#0@@18| (let ((|i#0@@79| (|$let#4_i| Sequences._default.RemoveOneValue$V@@4 |s#0@@18| |v#0@@5|))) (|Seq#Append| (|Seq#Take| |s#0@@18| |i#0@@79|) (|Seq#Drop| |s#0@@18| (+ |i#0@@79| 1))))))))) :qid |unknown.0:0| :skolemid |4388| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@4 ($LS $ly@@245) |s#0@@18| |v#0@@5|) ($IsGoodHeap $Heap@@37)) ))))
(assert (= (type MoreFuel_Sequences._default.NoDupes1) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@5 T@U) ($ly@@246 T@U) ($Heap@@38 T@U) (|s#0@@19| T@U) (|v#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@5) TyType) (= (type $ly@@246) LayerTypeType)) (= (type $Heap@@38) (MapType0Type refType MapType1Type))) (= (type |s#0@@19|) (SeqType BoxType))) (= (type |v#0@@6|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@19|) |v#0@@6|) (and (and ($IsGoodHeap $Heap@@38) ($Is |s#0@@19| (TSeq Sequences._default.RemoveOneValue$V@@5))) ($IsBox |v#0@@6| Sequences._default.RemoveOneValue$V@@5)))) (and (=> (|Seq#Contains| |s#0@@19| |v#0@@6|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@19|) |v#0@@6|)) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes1)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes1)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes1) MoreFuel_Sequences._default.NoDupes1)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@5 ($LS $ly@@246) (Lit |s#0@@19|) |v#0@@6|) (ite  (not (|Seq#Contains| |s#0@@19| |v#0@@6|)) |s#0@@19| (let ((|i#1@@11| (|$let#4_i| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@19|) |v#0@@6|))) (|Seq#Append| (|Seq#Take| (Lit |s#0@@19|) |i#1@@11|) (|Seq#Drop| (Lit |s#0@@19|) (+ |i#1@@11| 1))))))))) :qid |unknown.0:0| :weight 3 :skolemid |4389| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@5 ($LS $ly@@246) (Lit |s#0@@19|) |v#0@@6|) ($IsGoodHeap $Heap@@38)) ))))
(assert (= (type MoreFuel_Sequences._default.NoDupes2) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@6 T@U) ($ly@@247 T@U) ($Heap@@39 T@U) (|s#0@@20| T@U) (|v#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@6) TyType) (= (type $ly@@247) LayerTypeType)) (= (type $Heap@@39) (MapType0Type refType MapType1Type))) (= (type |s#0@@20|) (SeqType BoxType))) (= (type |v#0@@7|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@20|) (Lit |v#0@@7|)) (and (and ($IsGoodHeap $Heap@@39) ($Is |s#0@@20| (TSeq Sequences._default.RemoveOneValue$V@@6))) ($IsBox |v#0@@7| Sequences._default.RemoveOneValue$V@@6)))) (and (=> (|Seq#Contains| |s#0@@20| |v#0@@7|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@20|) (Lit |v#0@@7|))) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes2)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes2)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes2) MoreFuel_Sequences._default.NoDupes2)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@6 ($LS $ly@@247) (Lit |s#0@@20|) (Lit |v#0@@7|)) (ite  (not (|Seq#Contains| |s#0@@20| |v#0@@7|)) |s#0@@20| (let ((|i#2@@4| (|$let#4_i| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@20|) (Lit |v#0@@7|)))) (|Seq#Append| (|Seq#Take| (Lit |s#0@@20|) |i#2@@4|) (|Seq#Drop| (Lit |s#0@@20|) (+ |i#2@@4| 1))))))))) :qid |unknown.0:0| :weight 3 :skolemid |4390| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@6 ($LS $ly@@247) (Lit |s#0@@20|) (Lit |v#0@@7|)) ($IsGoodHeap $Heap@@39)) ))))
(assert (forall ((arg0@@326 T@U) (arg1@@176 T@U) (arg2@@109 T@U) (arg3@@66 T@U) (arg4@@43 Int) ) (! (= (type (Sequences.__default.insert arg0@@326 arg1@@176 arg2@@109 arg3@@66 arg4@@43)) (SeqType BoxType)) :qid |funType:Sequences.__default.insert| :pattern ( (Sequences.__default.insert arg0@@326 arg1@@176 arg2@@109 arg3@@66 arg4@@43)) )))
(assert (forall ((Sequences._default.insert$A T@U) ($ly@@248 T@U) (|s#0@@21| T@U) (|a#0@@39| T@U) (|pos#0@@5| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A) TyType) (= (type $ly@@248) LayerTypeType)) (= (type |s#0@@21|) (SeqType BoxType))) (= (type |a#0@@39|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@248) |s#0@@21| |a#0@@39| |pos#0@@5|) (Sequences.__default.insert Sequences._default.insert$A $ly@@248 |s#0@@21| |a#0@@39| |pos#0@@5|))) :qid |unknown.0:0| :skolemid |4391| :pattern ( (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@248) |s#0@@21| |a#0@@39| |pos#0@@5|)) )))
(assert (forall ((Sequences._default.insert$A@@0 T@U) ($ly@@249 T@U) (|s#0@@22| T@U) (|a#0@@40| T@U) (|pos#0@@6| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A@@0) TyType) (= (type $ly@@249) LayerTypeType)) (= (type |s#0@@22|) (SeqType BoxType))) (= (type |a#0@@40|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A@@0 $ly@@249 |s#0@@22| |a#0@@40| |pos#0@@6|) (Sequences.__default.insert Sequences._default.insert$A@@0 $LZ |s#0@@22| |a#0@@40| |pos#0@@6|))) :qid |unknown.0:0| :skolemid |4392| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@0 (AsFuelBottom $ly@@249) |s#0@@22| |a#0@@40| |pos#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@1 T@U) ($ly@@250 T@U) (|s#0@@23| T@U) (|a#0@@41| T@U) (|pos#0@@7| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@1) TyType) (= (type $ly@@250) LayerTypeType)) (= (type |s#0@@23|) (SeqType BoxType))) (= (type |a#0@@41|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@1 |s#0@@23| |a#0@@41| |pos#0@@7|) (and (and ($Is |s#0@@23| (TSeq Sequences._default.insert$A@@1)) ($IsBox |a#0@@41| Sequences._default.insert$A@@1)) (and (<= (LitInt 0) |pos#0@@7|) (<= |pos#0@@7| (|Seq#Length| |s#0@@23|)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@250 |s#0@@23| |a#0@@41| |pos#0@@7|)) (+ (|Seq#Length| |s#0@@23|) 1)) (forall ((|i#0@@80| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@80|) (< |i#0@@80| |pos#0@@7|)) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@250 |s#0@@23| |a#0@@41| |pos#0@@7|) |i#0@@80|) (|Seq#Index| |s#0@@23| |i#0@@80|)))) :qid |Sequencesidfy.198:18| :skolemid |4393| :pattern ( (|Seq#Index| |s#0@@23| |i#0@@80|)) :pattern ( (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@250 |s#0@@23| |a#0@@41| |pos#0@@7|) |i#0@@80|)) ))) (forall ((|i#1@@12| Int) ) (!  (=> true (=> (and (<= |pos#0@@7| |i#1@@12|) (< |i#1@@12| (|Seq#Length| |s#0@@23|))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@250 |s#0@@23| |a#0@@41| |pos#0@@7|) (+ |i#1@@12| 1)) (|Seq#Index| |s#0@@23| |i#1@@12|)))) :qid |Sequencesidfy.199:18| :skolemid |4394| :pattern ( (|Seq#Index| |s#0@@23| |i#1@@12|)) ))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@250 |s#0@@23| |a#0@@41| |pos#0@@7|) |pos#0@@7|) |a#0@@41|)) ($Is (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@250 |s#0@@23| |a#0@@41| |pos#0@@7|) (TSeq Sequences._default.insert$A@@1)))) :qid |unknown.0:0| :skolemid |4395| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@250 |s#0@@23| |a#0@@41| |pos#0@@7|)) ))))
(assert (forall ((Sequences._default.insert$A@@2 T@U) ($ly@@251 T@U) (|s#0@@24| T@U) (|a#0@@42| T@U) (|pos#0@@8| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@2) TyType) (= (type $ly@@251) LayerTypeType)) (= (type |s#0@@24|) (SeqType BoxType))) (= (type |a#0@@42|) BoxType)) (and ($Is |s#0@@24| (TSeq Sequences._default.insert$A@@2)) ($IsBox |a#0@@42| Sequences._default.insert$A@@2))) (= (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@251 |s#0@@24| |a#0@@42| |pos#0@@8|)  (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@24|))))) :qid |unknown.0:0| :skolemid |4396| :pattern ( (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@251 |s#0@@24| |a#0@@42| |pos#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@3 T@U) ($ly@@252 T@U) (|s#0@@25| T@U) (|a#0@@43| T@U) (|pos#0@@9| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@3) TyType) (= (type $ly@@252) LayerTypeType)) (= (type |s#0@@25|) (SeqType BoxType))) (= (type |a#0@@43|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@3 |s#0@@25| |a#0@@43| |pos#0@@9|) (and (and ($Is |s#0@@25| (TSeq Sequences._default.insert$A@@3)) ($IsBox |a#0@@43| Sequences._default.insert$A@@3)) (and (<= (LitInt 0) |pos#0@@9|) (<= |pos#0@@9| (|Seq#Length| |s#0@@25|)))))) (= (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@252) |s#0@@25| |a#0@@43| |pos#0@@9|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@25| |pos#0@@9|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@43|)) (|Seq#Drop| |s#0@@25| |pos#0@@9|)))) :qid |unknown.0:0| :skolemid |4397| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@252) |s#0@@25| |a#0@@43| |pos#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@4 T@U) ($ly@@253 T@U) (|s#0@@26| T@U) (|a#0@@44| T@U) (|pos#0@@10| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@4) TyType) (= (type $ly@@253) LayerTypeType)) (= (type |s#0@@26|) (SeqType BoxType))) (= (type |a#0@@44|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@4 (Lit |s#0@@26|) |a#0@@44| (LitInt |pos#0@@10|)) (and (and ($Is |s#0@@26| (TSeq Sequences._default.insert$A@@4)) ($IsBox |a#0@@44| Sequences._default.insert$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@10|)) (<= (LitInt |pos#0@@10|) (|Seq#Length| (Lit |s#0@@26|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@253) (Lit |s#0@@26|) |a#0@@44| (LitInt |pos#0@@10|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@26|) (LitInt |pos#0@@10|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@44|)) (|Seq#Drop| (Lit |s#0@@26|) (LitInt |pos#0@@10|))))) :qid |unknown.0:0| :weight 3 :skolemid |4398| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@253) (Lit |s#0@@26|) |a#0@@44| (LitInt |pos#0@@10|))) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@5 T@U) ($ly@@254 T@U) (|s#0@@27| T@U) (|a#0@@45| T@U) (|pos#0@@11| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@5) TyType) (= (type $ly@@254) LayerTypeType)) (= (type |s#0@@27|) (SeqType BoxType))) (= (type |a#0@@45|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@5 (Lit |s#0@@27|) (Lit |a#0@@45|) (LitInt |pos#0@@11|)) (and (and ($Is |s#0@@27| (TSeq Sequences._default.insert$A@@5)) ($IsBox |a#0@@45| Sequences._default.insert$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@11|)) (<= (LitInt |pos#0@@11|) (|Seq#Length| (Lit |s#0@@27|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@254) (Lit |s#0@@27|) (Lit |a#0@@45|) (LitInt |pos#0@@11|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@27|) (LitInt |pos#0@@11|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@45|))) (|Seq#Drop| (Lit |s#0@@27|) (LitInt |pos#0@@11|))))) :qid |unknown.0:0| :weight 3 :skolemid |4399| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@254) (Lit |s#0@@27|) (Lit |a#0@@45|) (LitInt |pos#0@@11|))) ))))
(assert (forall ((arg0@@327 T@U) (arg1@@177 T@U) (arg2@@110 T@U) (arg3@@67 T@U) (arg4@@44 T@U) (arg5@@20 Int) ) (! (= (type (Sequences.__default.replace1with2 arg0@@327 arg1@@177 arg2@@110 arg3@@67 arg4@@44 arg5@@20)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace1with2| :pattern ( (Sequences.__default.replace1with2 arg0@@327 arg1@@177 arg2@@110 arg3@@67 arg4@@44 arg5@@20)) )))
(assert (forall ((Sequences._default.replace1with2$A T@U) ($ly@@255 T@U) (|s#0@@28| T@U) (|a#0@@46| T@U) (|b#0@@27| T@U) (|pos#0@@12| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A) TyType) (= (type $ly@@255) LayerTypeType)) (= (type |s#0@@28|) (SeqType BoxType))) (= (type |a#0@@46|) BoxType)) (= (type |b#0@@27|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@255) |s#0@@28| |a#0@@46| |b#0@@27| |pos#0@@12|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A $ly@@255 |s#0@@28| |a#0@@46| |b#0@@27| |pos#0@@12|))) :qid |unknown.0:0| :skolemid |4400| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@255) |s#0@@28| |a#0@@46| |b#0@@27| |pos#0@@12|)) )))
(assert (forall ((Sequences._default.replace1with2$A@@0 T@U) ($ly@@256 T@U) (|s#0@@29| T@U) (|a#0@@47| T@U) (|b#0@@28| T@U) (|pos#0@@13| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A@@0) TyType) (= (type $ly@@256) LayerTypeType)) (= (type |s#0@@29|) (SeqType BoxType))) (= (type |a#0@@47|) BoxType)) (= (type |b#0@@28|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $ly@@256 |s#0@@29| |a#0@@47| |b#0@@28| |pos#0@@13|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $LZ |s#0@@29| |a#0@@47| |b#0@@28| |pos#0@@13|))) :qid |unknown.0:0| :skolemid |4401| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 (AsFuelBottom $ly@@256) |s#0@@29| |a#0@@47| |b#0@@28| |pos#0@@13|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@1 T@U) ($ly@@257 T@U) (|s#0@@30| T@U) (|a#0@@48| T@U) (|b#0@@29| T@U) (|pos#0@@14| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@1) TyType) (= (type $ly@@257) LayerTypeType)) (= (type |s#0@@30|) (SeqType BoxType))) (= (type |a#0@@48|) BoxType)) (= (type |b#0@@29|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@1 |s#0@@30| |a#0@@48| |b#0@@29| |pos#0@@14|) (and (and (and ($Is |s#0@@30| (TSeq Sequences._default.replace1with2$A@@1)) ($IsBox |a#0@@48| Sequences._default.replace1with2$A@@1)) ($IsBox |b#0@@29| Sequences._default.replace1with2$A@@1)) (and (<= (LitInt 0) |pos#0@@14|) (< |pos#0@@14| (|Seq#Length| |s#0@@30|)))))) (and (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@257 |s#0@@30| |a#0@@48| |b#0@@29| |pos#0@@14|)) (+ (|Seq#Length| |s#0@@30|) 1)) (forall ((|i#0@@81| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@81|) (< |i#0@@81| |pos#0@@14|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@257 |s#0@@30| |a#0@@48| |b#0@@29| |pos#0@@14|) |i#0@@81|) (|Seq#Index| |s#0@@30| |i#0@@81|)))) :qid |Sequencesidfy.223:18| :skolemid |4402| :pattern ( (|Seq#Index| |s#0@@30| |i#0@@81|)) :pattern ( (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@257 |s#0@@30| |a#0@@48| |b#0@@29| |pos#0@@14|) |i#0@@81|)) ))) (forall ((|i#1@@13| Int) ) (!  (=> true (=> (and (< |pos#0@@14| |i#1@@13|) (< |i#1@@13| (|Seq#Length| |s#0@@30|))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@257 |s#0@@30| |a#0@@48| |b#0@@29| |pos#0@@14|) (+ |i#1@@13| 1)) (|Seq#Index| |s#0@@30| |i#1@@13|)))) :qid |Sequencesidfy.224:18| :skolemid |4403| :pattern ( (|Seq#Index| |s#0@@30| |i#1@@13|)) ))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@257 |s#0@@30| |a#0@@48| |b#0@@29| |pos#0@@14|) |pos#0@@14|) |a#0@@48|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@257 |s#0@@30| |a#0@@48| |b#0@@29| |pos#0@@14|) (+ |pos#0@@14| 1)) |b#0@@29|)) ($Is (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@257 |s#0@@30| |a#0@@48| |b#0@@29| |pos#0@@14|) (TSeq Sequences._default.replace1with2$A@@1)))) :qid |unknown.0:0| :skolemid |4404| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@257 |s#0@@30| |a#0@@48| |b#0@@29| |pos#0@@14|)) ))))
(assert (forall ((Sequences._default.replace1with2$A@@2 T@U) ($ly@@258 T@U) (|s#0@@31| T@U) (|a#0@@49| T@U) (|b#0@@30| T@U) (|pos#0@@15| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@2) TyType) (= (type $ly@@258) LayerTypeType)) (= (type |s#0@@31|) (SeqType BoxType))) (= (type |a#0@@49|) BoxType)) (= (type |b#0@@30|) BoxType)) (and (and ($Is |s#0@@31| (TSeq Sequences._default.replace1with2$A@@2)) ($IsBox |a#0@@49| Sequences._default.replace1with2$A@@2)) ($IsBox |b#0@@30| Sequences._default.replace1with2$A@@2))) (= (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@258 |s#0@@31| |a#0@@49| |b#0@@30| |pos#0@@15|)  (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@31|))))) :qid |unknown.0:0| :skolemid |4405| :pattern ( (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@258 |s#0@@31| |a#0@@49| |b#0@@30| |pos#0@@15|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@3 T@U) ($ly@@259 T@U) (|s#0@@32| T@U) (|a#0@@50| T@U) (|b#0@@31| T@U) (|pos#0@@16| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@3) TyType) (= (type $ly@@259) LayerTypeType)) (= (type |s#0@@32|) (SeqType BoxType))) (= (type |a#0@@50|) BoxType)) (= (type |b#0@@31|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@3 |s#0@@32| |a#0@@50| |b#0@@31| |pos#0@@16|) (and (and (and ($Is |s#0@@32| (TSeq Sequences._default.replace1with2$A@@3)) ($IsBox |a#0@@50| Sequences._default.replace1with2$A@@3)) ($IsBox |b#0@@31| Sequences._default.replace1with2$A@@3)) (and (<= (LitInt 0) |pos#0@@16|) (< |pos#0@@16| (|Seq#Length| |s#0@@32|)))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@259) |s#0@@32| |a#0@@50| |b#0@@31| |pos#0@@16|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@32| |pos#0@@16|) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@50|) |b#0@@31|)) (|Seq#Drop| |s#0@@32| (+ |pos#0@@16| 1))))) :qid |unknown.0:0| :skolemid |4406| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@259) |s#0@@32| |a#0@@50| |b#0@@31| |pos#0@@16|)) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@4 T@U) ($ly@@260 T@U) (|s#0@@33| T@U) (|a#0@@51| T@U) (|b#0@@32| T@U) (|pos#0@@17| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@4) TyType) (= (type $ly@@260) LayerTypeType)) (= (type |s#0@@33|) (SeqType BoxType))) (= (type |a#0@@51|) BoxType)) (= (type |b#0@@32|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@4 (Lit |s#0@@33|) |a#0@@51| |b#0@@32| (LitInt |pos#0@@17|)) (and (and (and ($Is |s#0@@33| (TSeq Sequences._default.replace1with2$A@@4)) ($IsBox |a#0@@51| Sequences._default.replace1with2$A@@4)) ($IsBox |b#0@@32| Sequences._default.replace1with2$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@17|)) (< |pos#0@@17| (|Seq#Length| (Lit |s#0@@33|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@260) (Lit |s#0@@33|) |a#0@@51| |b#0@@32| (LitInt |pos#0@@17|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@33|) (LitInt |pos#0@@17|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@51|) |b#0@@32|)) (|Seq#Drop| (Lit |s#0@@33|) (LitInt (+ |pos#0@@17| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |4407| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@260) (Lit |s#0@@33|) |a#0@@51| |b#0@@32| (LitInt |pos#0@@17|))) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@5 T@U) ($ly@@261 T@U) (|s#0@@34| T@U) (|a#0@@52| T@U) (|b#0@@33| T@U) (|pos#0@@18| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@5) TyType) (= (type $ly@@261) LayerTypeType)) (= (type |s#0@@34|) (SeqType BoxType))) (= (type |a#0@@52|) BoxType)) (= (type |b#0@@33|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@5 (Lit |s#0@@34|) (Lit |a#0@@52|) (Lit |b#0@@33|) (LitInt |pos#0@@18|)) (and (and (and ($Is |s#0@@34| (TSeq Sequences._default.replace1with2$A@@5)) ($IsBox |a#0@@52| Sequences._default.replace1with2$A@@5)) ($IsBox |b#0@@33| Sequences._default.replace1with2$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@18|)) (< |pos#0@@18| (|Seq#Length| (Lit |s#0@@34|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@261) (Lit |s#0@@34|) (Lit |a#0@@52|) (Lit |b#0@@33|) (LitInt |pos#0@@18|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@34|) (LitInt |pos#0@@18|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@52|)) (Lit |b#0@@33|))) (|Seq#Drop| (Lit |s#0@@34|) (LitInt (+ |pos#0@@18| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |4408| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@261) (Lit |s#0@@34|) (Lit |a#0@@52|) (Lit |b#0@@33|) (LitInt |pos#0@@18|))) ))))
(assert (forall ((arg0@@328 T@U) (arg1@@178 T@U) (arg2@@111 T@U) (arg3@@68 T@U) (arg4@@45 Int) ) (! (= (type (Sequences.__default.replace2with1 arg0@@328 arg1@@178 arg2@@111 arg3@@68 arg4@@45)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace2with1| :pattern ( (Sequences.__default.replace2with1 arg0@@328 arg1@@178 arg2@@111 arg3@@68 arg4@@45)) )))
(assert (forall ((Sequences._default.replace2with1$A T@U) ($ly@@262 T@U) (|s#0@@35| T@U) (|a#0@@53| T@U) (|pos#0@@19| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A) TyType) (= (type $ly@@262) LayerTypeType)) (= (type |s#0@@35|) (SeqType BoxType))) (= (type |a#0@@53|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@262) |s#0@@35| |a#0@@53| |pos#0@@19|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A $ly@@262 |s#0@@35| |a#0@@53| |pos#0@@19|))) :qid |unknown.0:0| :skolemid |4409| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@262) |s#0@@35| |a#0@@53| |pos#0@@19|)) )))
(assert (forall ((Sequences._default.replace2with1$A@@0 T@U) ($ly@@263 T@U) (|s#0@@36| T@U) (|a#0@@54| T@U) (|pos#0@@20| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A@@0) TyType) (= (type $ly@@263) LayerTypeType)) (= (type |s#0@@36|) (SeqType BoxType))) (= (type |a#0@@54|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $ly@@263 |s#0@@36| |a#0@@54| |pos#0@@20|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $LZ |s#0@@36| |a#0@@54| |pos#0@@20|))) :qid |unknown.0:0| :skolemid |4410| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 (AsFuelBottom $ly@@263) |s#0@@36| |a#0@@54| |pos#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@1 T@U) ($ly@@264 T@U) (|s#0@@37| T@U) (|a#0@@55| T@U) (|pos#0@@21| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@1) TyType) (= (type $ly@@264) LayerTypeType)) (= (type |s#0@@37|) (SeqType BoxType))) (= (type |a#0@@55|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@1 |s#0@@37| |a#0@@55| |pos#0@@21|) (and (and ($Is |s#0@@37| (TSeq Sequences._default.replace2with1$A@@1)) ($IsBox |a#0@@55| Sequences._default.replace2with1$A@@1)) (and (<= (LitInt 0) |pos#0@@21|) (< |pos#0@@21| (- (|Seq#Length| |s#0@@37|) 1)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@264 |s#0@@37| |a#0@@55| |pos#0@@21|)) (- (|Seq#Length| |s#0@@37|) 1)) (forall ((|i#0@@82| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@82|) (< |i#0@@82| |pos#0@@21|)) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@264 |s#0@@37| |a#0@@55| |pos#0@@21|) |i#0@@82|) (|Seq#Index| |s#0@@37| |i#0@@82|)))) :qid |Sequencesidfy.242:18| :skolemid |4411| :pattern ( (|Seq#Index| |s#0@@37| |i#0@@82|)) :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@264 |s#0@@37| |a#0@@55| |pos#0@@21|) |i#0@@82|)) ))) (forall ((|i#1@@14| Int) ) (!  (=> true (=> (and (< |pos#0@@21| |i#1@@14|) (< |i#1@@14| (- (|Seq#Length| |s#0@@37|) 1))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@264 |s#0@@37| |a#0@@55| |pos#0@@21|) |i#1@@14|) (|Seq#Index| |s#0@@37| (+ |i#1@@14| 1))))) :qid |Sequencesidfy.243:18| :skolemid |4412| :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@264 |s#0@@37| |a#0@@55| |pos#0@@21|) |i#1@@14|)) ))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@264 |s#0@@37| |a#0@@55| |pos#0@@21|) |pos#0@@21|) |a#0@@55|)) ($Is (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@264 |s#0@@37| |a#0@@55| |pos#0@@21|) (TSeq Sequences._default.replace2with1$A@@1)))) :qid |unknown.0:0| :skolemid |4413| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@264 |s#0@@37| |a#0@@55| |pos#0@@21|)) ))))
(assert (forall ((Sequences._default.replace2with1$A@@2 T@U) ($ly@@265 T@U) (|s#0@@38| T@U) (|a#0@@56| T@U) (|pos#0@@22| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@2) TyType) (= (type $ly@@265) LayerTypeType)) (= (type |s#0@@38|) (SeqType BoxType))) (= (type |a#0@@56|) BoxType)) (and ($Is |s#0@@38| (TSeq Sequences._default.replace2with1$A@@2)) ($IsBox |a#0@@56| Sequences._default.replace2with1$A@@2))) (= (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@265 |s#0@@38| |a#0@@56| |pos#0@@22|)  (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@38|) 1))))) :qid |unknown.0:0| :skolemid |4414| :pattern ( (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@265 |s#0@@38| |a#0@@56| |pos#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@3 T@U) ($ly@@266 T@U) (|s#0@@39| T@U) (|a#0@@57| T@U) (|pos#0@@23| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@3) TyType) (= (type $ly@@266) LayerTypeType)) (= (type |s#0@@39|) (SeqType BoxType))) (= (type |a#0@@57|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@3 |s#0@@39| |a#0@@57| |pos#0@@23|) (and (and ($Is |s#0@@39| (TSeq Sequences._default.replace2with1$A@@3)) ($IsBox |a#0@@57| Sequences._default.replace2with1$A@@3)) (and (<= (LitInt 0) |pos#0@@23|) (< |pos#0@@23| (- (|Seq#Length| |s#0@@39|) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@266) |s#0@@39| |a#0@@57| |pos#0@@23|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@39| |pos#0@@23|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@57|)) (|Seq#Drop| |s#0@@39| (+ |pos#0@@23| 2))))) :qid |unknown.0:0| :skolemid |4415| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@266) |s#0@@39| |a#0@@57| |pos#0@@23|)) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@4 T@U) ($ly@@267 T@U) (|s#0@@40| T@U) (|a#0@@58| T@U) (|pos#0@@24| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@4) TyType) (= (type $ly@@267) LayerTypeType)) (= (type |s#0@@40|) (SeqType BoxType))) (= (type |a#0@@58|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@4 (Lit |s#0@@40|) |a#0@@58| (LitInt |pos#0@@24|)) (and (and ($Is |s#0@@40| (TSeq Sequences._default.replace2with1$A@@4)) ($IsBox |a#0@@58| Sequences._default.replace2with1$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@24|)) (< |pos#0@@24| (- (|Seq#Length| (Lit |s#0@@40|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@267) (Lit |s#0@@40|) |a#0@@58| (LitInt |pos#0@@24|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@40|) (LitInt |pos#0@@24|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@58|)) (|Seq#Drop| (Lit |s#0@@40|) (LitInt (+ |pos#0@@24| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |4416| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@267) (Lit |s#0@@40|) |a#0@@58| (LitInt |pos#0@@24|))) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@5 T@U) ($ly@@268 T@U) (|s#0@@41| T@U) (|a#0@@59| T@U) (|pos#0@@25| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@5) TyType) (= (type $ly@@268) LayerTypeType)) (= (type |s#0@@41|) (SeqType BoxType))) (= (type |a#0@@59|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@5 (Lit |s#0@@41|) (Lit |a#0@@59|) (LitInt |pos#0@@25|)) (and (and ($Is |s#0@@41| (TSeq Sequences._default.replace2with1$A@@5)) ($IsBox |a#0@@59| Sequences._default.replace2with1$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@25|)) (< |pos#0@@25| (- (|Seq#Length| (Lit |s#0@@41|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@268) (Lit |s#0@@41|) (Lit |a#0@@59|) (LitInt |pos#0@@25|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@41|) (LitInt |pos#0@@25|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@59|))) (|Seq#Drop| (Lit |s#0@@41|) (LitInt (+ |pos#0@@25| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |4417| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@268) (Lit |s#0@@41|) (Lit |a#0@@59|) (LitInt |pos#0@@25|))) ))))
(assert (forall ((arg0@@329 T@U) (arg1@@179 T@U) (arg2@@112 T@U) (arg3@@69 T@U) ) (! (= (type (Sequences.__default.concat arg0@@329 arg1@@179 arg2@@112 arg3@@69)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat| :pattern ( (Sequences.__default.concat arg0@@329 arg1@@179 arg2@@112 arg3@@69)) )))
(assert (forall ((Sequences._default.concat$A T@U) ($ly@@269 T@U) (|a#0@@60| T@U) (|b#0@@34| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A) TyType) (= (type $ly@@269) LayerTypeType)) (= (type |a#0@@60|) (SeqType BoxType))) (= (type |b#0@@34|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@269) |a#0@@60| |b#0@@34|) (Sequences.__default.concat Sequences._default.concat$A $ly@@269 |a#0@@60| |b#0@@34|))) :qid |unknown.0:0| :skolemid |4418| :pattern ( (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@269) |a#0@@60| |b#0@@34|)) )))
(assert (forall ((Sequences._default.concat$A@@0 T@U) ($ly@@270 T@U) (|a#0@@61| T@U) (|b#0@@35| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A@@0) TyType) (= (type $ly@@270) LayerTypeType)) (= (type |a#0@@61|) (SeqType BoxType))) (= (type |b#0@@35|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A@@0 $ly@@270 |a#0@@61| |b#0@@35|) (Sequences.__default.concat Sequences._default.concat$A@@0 $LZ |a#0@@61| |b#0@@35|))) :qid |unknown.0:0| :skolemid |4419| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@0 (AsFuelBottom $ly@@270) |a#0@@61| |b#0@@35|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@1 T@U) ($ly@@271 T@U) (|a#0@@62| T@U) (|b#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@1) TyType) (= (type $ly@@271) LayerTypeType)) (= (type |a#0@@62|) (SeqType BoxType))) (= (type |b#0@@36|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@1 |a#0@@62| |b#0@@36|) (and ($Is |a#0@@62| (TSeq Sequences._default.concat$A@@1)) ($Is |b#0@@36| (TSeq Sequences._default.concat$A@@1))))) (and (and (and (= (|Seq#Length| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@271 |a#0@@62| |b#0@@36|)) (+ (|Seq#Length| |a#0@@62|) (|Seq#Length| |b#0@@36|))) (forall ((|i#0@@83| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@83|) (< |i#0@@83| (|Seq#Length| |a#0@@62|))) (= (|Seq#Index| |a#0@@62| |i#0@@83|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@271 |a#0@@62| |b#0@@36|) |i#0@@83|)))) :qid |Sequencesidfy.251:18| :skolemid |4420| :pattern ( (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@271 |a#0@@62| |b#0@@36|) |i#0@@83|)) :pattern ( (|Seq#Index| |a#0@@62| |i#0@@83|)) ))) (forall ((|i#1@@15| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@15|) (< |i#1@@15| (|Seq#Length| |b#0@@36|))) (= (|Seq#Index| |b#0@@36| |i#1@@15|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@271 |a#0@@62| |b#0@@36|) (+ (|Seq#Length| |a#0@@62|) |i#1@@15|))))) :qid |Sequencesidfy.252:18| :skolemid |4421| :pattern ( (|Seq#Index| |b#0@@36| |i#1@@15|)) ))) ($Is (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@271 |a#0@@62| |b#0@@36|) (TSeq Sequences._default.concat$A@@1)))) :qid |unknown.0:0| :skolemid |4422| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@271 |a#0@@62| |b#0@@36|)) ))))
(assert (forall ((Sequences._default.concat$A@@2 T@U) ($ly@@272 T@U) (|a#0@@63| T@U) (|b#0@@37| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@2) TyType) (= (type $ly@@272) LayerTypeType)) (= (type |a#0@@63|) (SeqType BoxType))) (= (type |b#0@@37|) (SeqType BoxType))) (and ($Is |a#0@@63| (TSeq Sequences._default.concat$A@@2)) ($Is |b#0@@37| (TSeq Sequences._default.concat$A@@2)))) (= (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@272 |a#0@@63| |b#0@@37|) true)) :qid |unknown.0:0| :skolemid |4423| :pattern ( (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@272 |a#0@@63| |b#0@@37|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@3 T@U) ($ly@@273 T@U) (|a#0@@64| T@U) (|b#0@@38| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@3) TyType) (= (type $ly@@273) LayerTypeType)) (= (type |a#0@@64|) (SeqType BoxType))) (= (type |b#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@3 |a#0@@64| |b#0@@38|) (and ($Is |a#0@@64| (TSeq Sequences._default.concat$A@@3)) ($Is |b#0@@38| (TSeq Sequences._default.concat$A@@3))))) (= (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@273) |a#0@@64| |b#0@@38|) (|Seq#Append| |a#0@@64| |b#0@@38|))) :qid |unknown.0:0| :skolemid |4424| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@273) |a#0@@64| |b#0@@38|)) ))))
(assert  (=> true (forall ((Sequences._default.concat$A@@4 T@U) ($ly@@274 T@U) (|a#0@@65| T@U) (|b#0@@39| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@4) TyType) (= (type $ly@@274) LayerTypeType)) (= (type |a#0@@65|) (SeqType BoxType))) (= (type |b#0@@39|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@4 (Lit |a#0@@65|) (Lit |b#0@@39|)) (and ($Is |a#0@@65| (TSeq Sequences._default.concat$A@@4)) ($Is |b#0@@39| (TSeq Sequences._default.concat$A@@4))))) (= (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@274) (Lit |a#0@@65|) (Lit |b#0@@39|)) (|Seq#Append| |a#0@@65| |b#0@@39|))) :qid |unknown.0:0| :weight 3 :skolemid |4425| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@274) (Lit |a#0@@65|) (Lit |b#0@@39|))) ))))
(assert (forall ((arg0@@330 T@U) (arg1@@180 T@U) (arg2@@113 T@U) (arg3@@70 T@U) (arg4@@46 T@U) ) (! (= (type (Sequences.__default.concat3 arg0@@330 arg1@@180 arg2@@113 arg3@@70 arg4@@46)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat3| :pattern ( (Sequences.__default.concat3 arg0@@330 arg1@@180 arg2@@113 arg3@@70 arg4@@46)) )))
(assert (forall ((Sequences._default.concat3$A T@U) ($ly@@275 T@U) (|a#0@@66| T@U) (|b#0@@40| T@U) (|c#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A) TyType) (= (type $ly@@275) LayerTypeType)) (= (type |a#0@@66|) (SeqType BoxType))) (= (type |b#0@@40|) BoxType)) (= (type |c#0@@3|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@275) |a#0@@66| |b#0@@40| |c#0@@3|) (Sequences.__default.concat3 Sequences._default.concat3$A $ly@@275 |a#0@@66| |b#0@@40| |c#0@@3|))) :qid |unknown.0:0| :skolemid |4426| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@275) |a#0@@66| |b#0@@40| |c#0@@3|)) )))
(assert (forall ((Sequences._default.concat3$A@@0 T@U) ($ly@@276 T@U) (|a#0@@67| T@U) (|b#0@@41| T@U) (|c#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A@@0) TyType) (= (type $ly@@276) LayerTypeType)) (= (type |a#0@@67|) (SeqType BoxType))) (= (type |b#0@@41|) BoxType)) (= (type |c#0@@4|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $ly@@276 |a#0@@67| |b#0@@41| |c#0@@4|) (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $LZ |a#0@@67| |b#0@@41| |c#0@@4|))) :qid |unknown.0:0| :skolemid |4427| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@0 (AsFuelBottom $ly@@276) |a#0@@67| |b#0@@41| |c#0@@4|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@1 T@U) ($ly@@277 T@U) (|a#0@@68| T@U) (|b#0@@42| T@U) (|c#0@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@1) TyType) (= (type $ly@@277) LayerTypeType)) (= (type |a#0@@68|) (SeqType BoxType))) (= (type |b#0@@42|) BoxType)) (= (type |c#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@1 |a#0@@68| |b#0@@42| |c#0@@5|) (and (and ($Is |a#0@@68| (TSeq Sequences._default.concat3$A@@1)) ($IsBox |b#0@@42| Sequences._default.concat3$A@@1)) ($Is |c#0@@5| (TSeq Sequences._default.concat3$A@@1))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@277 |a#0@@68| |b#0@@42| |c#0@@5|)) (+ (+ (|Seq#Length| |a#0@@68|) (|Seq#Length| |c#0@@5|)) 1)) (forall ((|i#0@@84| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@84|) (< |i#0@@84| (|Seq#Length| |a#0@@68|))) (= (|Seq#Index| |a#0@@68| |i#0@@84|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@277 |a#0@@68| |b#0@@42| |c#0@@5|) |i#0@@84|)))) :qid |Sequencesidfy.259:18| :skolemid |4428| :pattern ( (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@277 |a#0@@68| |b#0@@42| |c#0@@5|) |i#0@@84|)) :pattern ( (|Seq#Index| |a#0@@68| |i#0@@84|)) ))) (= (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@277 |a#0@@68| |b#0@@42| |c#0@@5|) (|Seq#Length| |a#0@@68|)) |b#0@@42|)) (forall ((|i#1@@16| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@16|) (< |i#1@@16| (|Seq#Length| |c#0@@5|))) (= (|Seq#Index| |c#0@@5| |i#1@@16|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@277 |a#0@@68| |b#0@@42| |c#0@@5|) (+ (+ (|Seq#Length| |a#0@@68|) 1) |i#1@@16|))))) :qid |Sequencesidfy.261:18| :skolemid |4429| :pattern ( (|Seq#Index| |c#0@@5| |i#1@@16|)) ))) ($Is (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@277 |a#0@@68| |b#0@@42| |c#0@@5|) (TSeq Sequences._default.concat3$A@@1)))) :qid |unknown.0:0| :skolemid |4430| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@277 |a#0@@68| |b#0@@42| |c#0@@5|)) ))))
(assert (forall ((Sequences._default.concat3$A@@2 T@U) ($ly@@278 T@U) (|a#0@@69| T@U) (|b#0@@43| T@U) (|c#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@2) TyType) (= (type $ly@@278) LayerTypeType)) (= (type |a#0@@69|) (SeqType BoxType))) (= (type |b#0@@43|) BoxType)) (= (type |c#0@@6|) (SeqType BoxType))) (and (and ($Is |a#0@@69| (TSeq Sequences._default.concat3$A@@2)) ($IsBox |b#0@@43| Sequences._default.concat3$A@@2)) ($Is |c#0@@6| (TSeq Sequences._default.concat3$A@@2)))) (= (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@278 |a#0@@69| |b#0@@43| |c#0@@6|) true)) :qid |unknown.0:0| :skolemid |4431| :pattern ( (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@278 |a#0@@69| |b#0@@43| |c#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@3 T@U) ($ly@@279 T@U) (|a#0@@70| T@U) (|b#0@@44| T@U) (|c#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@3) TyType) (= (type $ly@@279) LayerTypeType)) (= (type |a#0@@70|) (SeqType BoxType))) (= (type |b#0@@44|) BoxType)) (= (type |c#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@3 |a#0@@70| |b#0@@44| |c#0@@7|) (and (and ($Is |a#0@@70| (TSeq Sequences._default.concat3$A@@3)) ($IsBox |b#0@@44| Sequences._default.concat3$A@@3)) ($Is |c#0@@7| (TSeq Sequences._default.concat3$A@@3))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@279) |a#0@@70| |b#0@@44| |c#0@@7|) (|Seq#Append| (|Seq#Append| |a#0@@70| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@44|)) |c#0@@7|))) :qid |unknown.0:0| :skolemid |4432| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@279) |a#0@@70| |b#0@@44| |c#0@@7|)) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@4 T@U) ($ly@@280 T@U) (|a#0@@71| T@U) (|b#0@@45| T@U) (|c#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@4) TyType) (= (type $ly@@280) LayerTypeType)) (= (type |a#0@@71|) (SeqType BoxType))) (= (type |b#0@@45|) BoxType)) (= (type |c#0@@8|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@4 (Lit |a#0@@71|) |b#0@@45| (Lit |c#0@@8|)) (and (and ($Is |a#0@@71| (TSeq Sequences._default.concat3$A@@4)) ($IsBox |b#0@@45| Sequences._default.concat3$A@@4)) ($Is |c#0@@8| (TSeq Sequences._default.concat3$A@@4))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@280) (Lit |a#0@@71|) |b#0@@45| (Lit |c#0@@8|)) (|Seq#Append| (|Seq#Append| |a#0@@71| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@45|)) |c#0@@8|))) :qid |unknown.0:0| :weight 3 :skolemid |4433| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@280) (Lit |a#0@@71|) |b#0@@45| (Lit |c#0@@8|))) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@5 T@U) ($ly@@281 T@U) (|a#0@@72| T@U) (|b#0@@46| T@U) (|c#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@5) TyType) (= (type $ly@@281) LayerTypeType)) (= (type |a#0@@72|) (SeqType BoxType))) (= (type |b#0@@46|) BoxType)) (= (type |c#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@5 (Lit |a#0@@72|) (Lit |b#0@@46|) (Lit |c#0@@9|)) (and (and ($Is |a#0@@72| (TSeq Sequences._default.concat3$A@@5)) ($IsBox |b#0@@46| Sequences._default.concat3$A@@5)) ($Is |c#0@@9| (TSeq Sequences._default.concat3$A@@5))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@281) (Lit |a#0@@72|) (Lit |b#0@@46|) (Lit |c#0@@9|)) (|Seq#Append| (|Seq#Append| |a#0@@72| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |b#0@@46|))) |c#0@@9|))) :qid |unknown.0:0| :weight 3 :skolemid |4434| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@281) (Lit |a#0@@72|) (Lit |b#0@@46|) (Lit |c#0@@9|))) ))))
(assert (forall ((arg0@@331 T@U) (arg1@@181 T@U) (arg2@@114 T@U) ) (! (= (type (Sequences.__default.concatSeq arg0@@331 arg1@@181 arg2@@114)) (SeqType BoxType)) :qid |funType:Sequences.__default.concatSeq| :pattern ( (Sequences.__default.concatSeq arg0@@331 arg1@@181 arg2@@114)) )))
(assert (forall ((Sequences._default.concatSeq$A T@U) ($ly@@282 T@U) (|a#0@@73| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A) TyType) (= (type $ly@@282) LayerTypeType)) (= (type |a#0@@73|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@282) |a#0@@73|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A $ly@@282 |a#0@@73|))) :qid |unknown.0:0| :skolemid |4435| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@282) |a#0@@73|)) )))
(assert (forall ((Sequences._default.concatSeq$A@@0 T@U) ($ly@@283 T@U) (|a#0@@74| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A@@0) TyType) (= (type $ly@@283) LayerTypeType)) (= (type |a#0@@74|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $ly@@283 |a#0@@74|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $LZ |a#0@@74|))) :qid |unknown.0:0| :skolemid |4436| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 (AsFuelBottom $ly@@283) |a#0@@74|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@1 T@U) ($ly@@284 T@U) (|a#0@@75| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@1) TyType) (= (type $ly@@284) LayerTypeType)) (= (type |a#0@@75|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@1 |a#0@@75|) ($Is |a#0@@75| (TSeq (TSeq Sequences._default.concatSeq$A@@1))))) ($Is (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@284 |a#0@@75|) (TSeq Sequences._default.concatSeq$A@@1))) :qid |unknown.0:0| :skolemid |4437| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@284 |a#0@@75|)) ))))
(assert (forall ((Sequences._default.concatSeq$A@@2 T@U) ($ly@@285 T@U) (|a#0@@76| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@2) TyType) (= (type $ly@@285) LayerTypeType)) (= (type |a#0@@76|) (SeqType BoxType))) ($Is |a#0@@76| (TSeq (TSeq Sequences._default.concatSeq$A@@2)))) (= (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@285 |a#0@@76|) true)) :qid |unknown.0:0| :skolemid |4438| :pattern ( (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@285 |a#0@@76|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@3 T@U) ($ly@@286 T@U) (|a#0@@77| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@3) TyType) (= (type $ly@@286) LayerTypeType)) (= (type |a#0@@77|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 |a#0@@77|) ($Is |a#0@@77| (TSeq (TSeq Sequences._default.concatSeq$A@@3))))) (and (=> (not (= (|Seq#Length| |a#0@@77|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@77|) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@77|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@77|))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@286) |a#0@@77|) (ite (= (|Seq#Length| |a#0@@77|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 $ly@@286 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@77|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@3) |a#0@@77|))))))) :qid |unknown.0:0| :skolemid |4439| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@286) |a#0@@77|)) ))))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@4 T@U) ($ly@@287 T@U) (|a#0@@78| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@4) TyType) (= (type $ly@@287) LayerTypeType)) (= (type |a#0@@78|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit |a#0@@78|)) ($Is |a#0@@78| (TSeq (TSeq Sequences._default.concatSeq$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@78|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@78|)) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@78|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@78|)))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@287) (Lit |a#0@@78|)) (ite (= (|Seq#Length| (Lit |a#0@@78|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@287) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@78|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@78|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |4440| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@287) (Lit |a#0@@78|))) ))))
(assert (forall ((Sequences._default.IsPrefix$A T@U) ($ly@@288 T@U) (|a#0@@79| T@U) (|b#0@@47| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A) TyType) (= (type $ly@@288) LayerTypeType)) (= (type |a#0@@79|) (SeqType BoxType))) (= (type |b#0@@47|) (SeqType BoxType))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@288) |a#0@@79| |b#0@@47|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@288 |a#0@@79| |b#0@@47|))) :qid |unknown.0:0| :skolemid |4441| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@288) |a#0@@79| |b#0@@47|)) )))
(assert (forall ((Sequences._default.IsPrefix$A@@0 T@U) ($ly@@289 T@U) (|a#0@@80| T@U) (|b#0@@48| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A@@0) TyType) (= (type $ly@@289) LayerTypeType)) (= (type |a#0@@80|) (SeqType BoxType))) (= (type |b#0@@48|) (SeqType BoxType))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@289 |a#0@@80| |b#0@@48|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@80| |b#0@@48|))) :qid |unknown.0:0| :skolemid |4442| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 (AsFuelBottom $ly@@289) |a#0@@80| |b#0@@48|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@1 T@U) ($ly@@290 T@U) (|a#0@@81| T@U) (|b#0@@49| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.IsPrefix$A@@1) TyType) (= (type $ly@@290) LayerTypeType)) (= (type |a#0@@81|) (SeqType BoxType))) (= (type |b#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@1 |a#0@@81| |b#0@@49|) (and ($Is |a#0@@81| (TSeq Sequences._default.IsPrefix$A@@1)) ($Is |b#0@@49| (TSeq Sequences._default.IsPrefix$A@@1))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@290 |a#0@@81| |b#0@@49|)) (<= (|Seq#Length| |a#0@@81|) (|Seq#Length| |b#0@@49|))) :qid |unknown.0:0| :skolemid |4443| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@290 |a#0@@81| |b#0@@49|)) ))))
(assert (forall ((Sequences._default.IsPrefix$A@@2 T@U) ($ly@@291 T@U) (|a#0@@82| T@U) (|b#0@@50| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@2) TyType) (= (type $ly@@291) LayerTypeType)) (= (type |a#0@@82|) (SeqType BoxType))) (= (type |b#0@@50|) (SeqType BoxType))) (and ($Is |a#0@@82| (TSeq Sequences._default.IsPrefix$A@@2)) ($Is |b#0@@50| (TSeq Sequences._default.IsPrefix$A@@2)))) (= (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@291 |a#0@@82| |b#0@@50|) true)) :qid |unknown.0:0| :skolemid |4444| :pattern ( (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@291 |a#0@@82| |b#0@@50|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@3 T@U) ($ly@@292 T@U) (|a#0@@83| T@U) (|b#0@@51| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@3) TyType) (= (type $ly@@292) LayerTypeType)) (= (type |a#0@@83|) (SeqType BoxType))) (= (type |b#0@@51|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@3 |a#0@@83| |b#0@@51|) (and ($Is |a#0@@83| (TSeq Sequences._default.IsPrefix$A@@3)) ($Is |b#0@@51| (TSeq Sequences._default.IsPrefix$A@@3))))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@292) |a#0@@83| |b#0@@51|)  (and (<= (|Seq#Length| |a#0@@83|) (|Seq#Length| |b#0@@51|)) (|Seq#Equal| |a#0@@83| (|Seq#Take| |b#0@@51| (|Seq#Length| |a#0@@83|)))))) :qid |unknown.0:0| :skolemid |4445| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@292) |a#0@@83| |b#0@@51|)) ))))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@4 T@U) ($ly@@293 T@U) (|a#0@@84| T@U) (|b#0@@52| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@4) TyType) (= (type $ly@@293) LayerTypeType)) (= (type |a#0@@84|) (SeqType BoxType))) (= (type |b#0@@52|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@4 (Lit |a#0@@84|) (Lit |b#0@@52|)) (and ($Is |a#0@@84| (TSeq Sequences._default.IsPrefix$A@@4)) ($Is |b#0@@52| (TSeq Sequences._default.IsPrefix$A@@4))))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@293) (Lit |a#0@@84|) (Lit |b#0@@52|))  (and (<= (|Seq#Length| (Lit |a#0@@84|)) (|Seq#Length| (Lit |b#0@@52|))) (|Seq#Equal| |a#0@@84| (|Seq#Take| (Lit |b#0@@52|) (|Seq#Length| (Lit |a#0@@84|))))))) :qid |unknown.0:0| :weight 3 :skolemid |4446| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@293) (Lit |a#0@@84|) (Lit |b#0@@52|))) ))))
(assert (forall ((Sequences._default.IsSuffix$A T@U) ($ly@@294 T@U) (|a#0@@85| T@U) (|b#0@@53| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A) TyType) (= (type $ly@@294) LayerTypeType)) (= (type |a#0@@85|) (SeqType BoxType))) (= (type |b#0@@53|) (SeqType BoxType))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@294) |a#0@@85| |b#0@@53|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@294 |a#0@@85| |b#0@@53|))) :qid |unknown.0:0| :skolemid |4447| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@294) |a#0@@85| |b#0@@53|)) )))
(assert (forall ((Sequences._default.IsSuffix$A@@0 T@U) ($ly@@295 T@U) (|a#0@@86| T@U) (|b#0@@54| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A@@0) TyType) (= (type $ly@@295) LayerTypeType)) (= (type |a#0@@86|) (SeqType BoxType))) (= (type |b#0@@54|) (SeqType BoxType))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@295 |a#0@@86| |b#0@@54|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@86| |b#0@@54|))) :qid |unknown.0:0| :skolemid |4448| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 (AsFuelBottom $ly@@295) |a#0@@86| |b#0@@54|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@1 T@U) ($ly@@296 T@U) (|a#0@@87| T@U) (|b#0@@55| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@1) TyType) (= (type $ly@@296) LayerTypeType)) (= (type |a#0@@87|) (SeqType BoxType))) (= (type |b#0@@55|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@1 |a#0@@87| |b#0@@55|) (and ($Is |a#0@@87| (TSeq Sequences._default.IsSuffix$A@@1)) ($Is |b#0@@55| (TSeq Sequences._default.IsSuffix$A@@1))))) true) :qid |unknown.0:0| :skolemid |4449| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@1 $ly@@296 |a#0@@87| |b#0@@55|)) ))))
(assert (forall ((Sequences._default.IsSuffix$A@@2 T@U) ($ly@@297 T@U) (|a#0@@88| T@U) (|b#0@@56| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@2) TyType) (= (type $ly@@297) LayerTypeType)) (= (type |a#0@@88|) (SeqType BoxType))) (= (type |b#0@@56|) (SeqType BoxType))) (and ($Is |a#0@@88| (TSeq Sequences._default.IsSuffix$A@@2)) ($Is |b#0@@56| (TSeq Sequences._default.IsSuffix$A@@2)))) (= (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@297 |a#0@@88| |b#0@@56|) true)) :qid |unknown.0:0| :skolemid |4450| :pattern ( (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@297 |a#0@@88| |b#0@@56|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@3 T@U) ($ly@@298 T@U) (|a#0@@89| T@U) (|b#0@@57| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@3) TyType) (= (type $ly@@298) LayerTypeType)) (= (type |a#0@@89|) (SeqType BoxType))) (= (type |b#0@@57|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@3 |a#0@@89| |b#0@@57|) (and ($Is |a#0@@89| (TSeq Sequences._default.IsSuffix$A@@3)) ($Is |b#0@@57| (TSeq Sequences._default.IsSuffix$A@@3))))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@298) |a#0@@89| |b#0@@57|)  (and (<= (|Seq#Length| |a#0@@89|) (|Seq#Length| |b#0@@57|)) (|Seq#Equal| |a#0@@89| (|Seq#Drop| |b#0@@57| (- (|Seq#Length| |b#0@@57|) (|Seq#Length| |a#0@@89|))))))) :qid |unknown.0:0| :skolemid |4451| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@298) |a#0@@89| |b#0@@57|)) ))))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@4 T@U) ($ly@@299 T@U) (|a#0@@90| T@U) (|b#0@@58| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@4) TyType) (= (type $ly@@299) LayerTypeType)) (= (type |a#0@@90|) (SeqType BoxType))) (= (type |b#0@@58|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@4 (Lit |a#0@@90|) (Lit |b#0@@58|)) (and ($Is |a#0@@90| (TSeq Sequences._default.IsSuffix$A@@4)) ($Is |b#0@@58| (TSeq Sequences._default.IsSuffix$A@@4))))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@299) (Lit |a#0@@90|) (Lit |b#0@@58|))  (and (<= (|Seq#Length| (Lit |a#0@@90|)) (|Seq#Length| (Lit |b#0@@58|))) (|Seq#Equal| |a#0@@90| (|Seq#Drop| (Lit |b#0@@58|) (- (|Seq#Length| (Lit |b#0@@58|)) (|Seq#Length| (Lit |a#0@@90|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |4452| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@299) (Lit |a#0@@90|) (Lit |b#0@@58|))) ))))
(assert (forall ((arg0@@332 T@U) (arg1@@182 T@U) (arg2@@115 T@U) (arg3@@71 T@U) (arg4@@47 Int) ) (! (= (type (Sequences.__default.SeqIndexIterate arg0@@332 arg1@@182 arg2@@115 arg3@@71 arg4@@47)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndexIterate| :pattern ( (Sequences.__default.SeqIndexIterate arg0@@332 arg1@@182 arg2@@115 arg3@@71 arg4@@47)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A T@U) ($ly@@300 T@U) (|run#0@@66| T@U) (|needle#0| T@U) (|i#0@@85| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A) TyType) (= (type $ly@@300) LayerTypeType)) (= (type |run#0@@66|) (SeqType BoxType))) (= (type |needle#0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@300) |run#0@@66| |needle#0| |i#0@@85|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A $ly@@300 |run#0@@66| |needle#0| |i#0@@85|))) :qid |unknown.0:0| :skolemid |4453| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@300) |run#0@@66| |needle#0| |i#0@@85|)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@0 T@U) ($ly@@301 T@U) (|run#0@@67| T@U) (|needle#0@@0| T@U) (|i#0@@86| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@0) TyType) (= (type $ly@@301) LayerTypeType)) (= (type |run#0@@67|) (SeqType BoxType))) (= (type |needle#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $ly@@301 |run#0@@67| |needle#0@@0| |i#0@@86|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $LZ |run#0@@67| |needle#0@@0| |i#0@@86|))) :qid |unknown.0:0| :skolemid |4454| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 (AsFuelBottom $ly@@301) |run#0@@67| |needle#0@@0| |i#0@@86|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@1 T@U) ($ly@@302 T@U) (|run#0@@68| T@U) (|needle#0@@1| T@U) (|i#0@@87| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@1) TyType) (= (type $ly@@302) LayerTypeType)) (= (type |run#0@@68|) (SeqType BoxType))) (= (type |needle#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@1 |run#0@@68| |needle#0@@1| |i#0@@87|) (and (and ($Is |run#0@@68| (TSeq Sequences._default.SeqIndexIterate$A@@1)) ($IsBox |needle#0@@1| Sequences._default.SeqIndexIterate$A@@1)) (and (<= (LitInt 0) |i#0@@87|) (<= |i#0@@87| (|Seq#Length| |run#0@@68|)))))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@302 |run#0@@68| |needle#0@@1| |i#0@@87|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@302 |run#0@@68| |needle#0@@1| |i#0@@87|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@302 |run#0@@68| |needle#0@@1| |i#0@@87|)))) (|Seq#Length| |run#0@@68|))) (= (|Seq#Index| |run#0@@68| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@302 |run#0@@68| |needle#0@@1| |i#0@@87|))))) |needle#0@@1|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@302 |run#0@@68| |needle#0@@1| |i#0@@87|)) (forall ((|j#0@@12| Int) ) (!  (=> (and (<= |i#0@@87| |j#0@@12|) (< |j#0@@12| (|Seq#Length| |run#0@@68|))) (not (= (|Seq#Index| |run#0@@68| |j#0@@12|) |needle#0@@1|))) :qid |Sequencesidfy.341:32| :skolemid |4455| :pattern ( (|Seq#Index| |run#0@@68| |j#0@@12|)) )))) ($Is (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@302 |run#0@@68| |needle#0@@1| |i#0@@87|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |4456| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@302 |run#0@@68| |needle#0@@1| |i#0@@87|)) ))))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@2 T@U) ($ly@@303 T@U) (|run#0@@69| T@U) (|needle#0@@2| T@U) (|i#0@@88| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@2) TyType) (= (type $ly@@303) LayerTypeType)) (= (type |run#0@@69|) (SeqType BoxType))) (= (type |needle#0@@2|) BoxType)) (and ($Is |run#0@@69| (TSeq Sequences._default.SeqIndexIterate$A@@2)) ($IsBox |needle#0@@2| Sequences._default.SeqIndexIterate$A@@2))) (= (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@303 |run#0@@69| |needle#0@@2| |i#0@@88|)  (and (<= (LitInt 0) |i#0@@88|) (<= |i#0@@88| (|Seq#Length| |run#0@@69|))))) :qid |unknown.0:0| :skolemid |4457| :pattern ( (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@303 |run#0@@69| |needle#0@@2| |i#0@@88|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@3 T@U) ($ly@@304 T@U) (|run#0@@70| T@U) (|needle#0@@3| T@U) (|i#0@@89| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@3) TyType) (= (type $ly@@304) LayerTypeType)) (= (type |run#0@@70|) (SeqType BoxType))) (= (type |needle#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@70| |needle#0@@3| |i#0@@89|) (and (and ($Is |run#0@@70| (TSeq Sequences._default.SeqIndexIterate$A@@3)) ($IsBox |needle#0@@3| Sequences._default.SeqIndexIterate$A@@3)) (and (<= (LitInt 0) |i#0@@89|) (<= |i#0@@89| (|Seq#Length| |run#0@@70|)))))) (and (=> (not (= |i#0@@89| (|Seq#Length| |run#0@@70|))) (=> (not (= (|Seq#Index| |run#0@@70| |i#0@@89|) |needle#0@@3|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@70| |needle#0@@3| (+ |i#0@@89| 1)))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@304) |run#0@@70| |needle#0@@3| |i#0@@89|) (ite (= |i#0@@89| (|Seq#Length| |run#0@@70|)) |#Options.Option.None| (ite (= (|Seq#Index| |run#0@@70| |i#0@@89|) |needle#0@@3|) (|#Options.Option.Some| ($Box (int_2_U |i#0@@89|))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 $ly@@304 |run#0@@70| |needle#0@@3| (+ |i#0@@89| 1))))))) :qid |unknown.0:0| :skolemid |4458| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@304) |run#0@@70| |needle#0@@3| |i#0@@89|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@4 T@U) ($ly@@305 T@U) (|run#0@@71| T@U) (|needle#0@@4| T@U) (|i#0@@90| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@4) TyType) (= (type $ly@@305) LayerTypeType)) (= (type |run#0@@71|) (SeqType BoxType))) (= (type |needle#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@71|) |needle#0@@4| (LitInt |i#0@@90|)) (and (and ($Is |run#0@@71| (TSeq Sequences._default.SeqIndexIterate$A@@4)) ($IsBox |needle#0@@4| Sequences._default.SeqIndexIterate$A@@4)) (and (<= (LitInt 0) (LitInt |i#0@@90|)) (<= (LitInt |i#0@@90|) (|Seq#Length| (Lit |run#0@@71|))))))) (and (=> (not (= (LitInt |i#0@@90|) (|Seq#Length| (Lit |run#0@@71|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@71|) (LitInt |i#0@@90|)) |needle#0@@4|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@71|) |needle#0@@4| (LitInt (+ |i#0@@90| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@305) (Lit |run#0@@71|) |needle#0@@4| (LitInt |i#0@@90|)) (ite (= (LitInt |i#0@@90|) (|Seq#Length| (Lit |run#0@@71|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@71|) (LitInt |i#0@@90|)) |needle#0@@4|) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@90|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@305) (Lit |run#0@@71|) |needle#0@@4| (LitInt (+ |i#0@@90| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |4459| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@305) (Lit |run#0@@71|) |needle#0@@4| (LitInt |i#0@@90|))) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@5 T@U) ($ly@@306 T@U) (|run#0@@72| T@U) (|needle#0@@5| T@U) (|i#0@@91| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@5) TyType) (= (type $ly@@306) LayerTypeType)) (= (type |run#0@@72|) (SeqType BoxType))) (= (type |needle#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt |i#0@@91|)) (and (and ($Is |run#0@@72| (TSeq Sequences._default.SeqIndexIterate$A@@5)) ($IsBox |needle#0@@5| Sequences._default.SeqIndexIterate$A@@5)) (and (<= (LitInt 0) (LitInt |i#0@@91|)) (<= (LitInt |i#0@@91|) (|Seq#Length| (Lit |run#0@@72|))))))) (and (=> (not (= (LitInt |i#0@@91|) (|Seq#Length| (Lit |run#0@@72|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@72|) (LitInt |i#0@@91|)) (Lit |needle#0@@5|))) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@91| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@306) (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt |i#0@@91|)) (ite (= (LitInt |i#0@@91|) (|Seq#Length| (Lit |run#0@@72|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@72|) (LitInt |i#0@@91|)) (Lit |needle#0@@5|)) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@91|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@306) (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@91| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |4460| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@306) (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt |i#0@@91|))) ))))
(assert (forall ((arg0@@333 T@U) (arg1@@183 T@U) (arg2@@116 T@U) (arg3@@72 T@U) ) (! (= (type (Sequences.__default.SeqIndex arg0@@333 arg1@@183 arg2@@116 arg3@@72)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndex| :pattern ( (Sequences.__default.SeqIndex arg0@@333 arg1@@183 arg2@@116 arg3@@72)) )))
(assert (forall ((Sequences._default.SeqIndex$A T@U) ($ly@@307 T@U) (|run#0@@73| T@U) (|needle#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A) TyType) (= (type $ly@@307) LayerTypeType)) (= (type |run#0@@73|) (SeqType BoxType))) (= (type |needle#0@@6|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@307) |run#0@@73| |needle#0@@6|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A $ly@@307 |run#0@@73| |needle#0@@6|))) :qid |unknown.0:0| :skolemid |4461| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@307) |run#0@@73| |needle#0@@6|)) )))
(assert (forall ((Sequences._default.SeqIndex$A@@0 T@U) ($ly@@308 T@U) (|run#0@@74| T@U) (|needle#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A@@0) TyType) (= (type $ly@@308) LayerTypeType)) (= (type |run#0@@74|) (SeqType BoxType))) (= (type |needle#0@@7|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $ly@@308 |run#0@@74| |needle#0@@7|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $LZ |run#0@@74| |needle#0@@7|))) :qid |unknown.0:0| :skolemid |4462| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 (AsFuelBottom $ly@@308) |run#0@@74| |needle#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@1 T@U) ($ly@@309 T@U) (|run#0@@75| T@U) (|needle#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@1) TyType) (= (type $ly@@309) LayerTypeType)) (= (type |run#0@@75|) (SeqType BoxType))) (= (type |needle#0@@8|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@1 |run#0@@75| |needle#0@@8|) (and ($Is |run#0@@75| (TSeq Sequences._default.SeqIndex$A@@1)) ($IsBox |needle#0@@8| Sequences._default.SeqIndex$A@@1)))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@309 |run#0@@75| |needle#0@@8|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@309 |run#0@@75| |needle#0@@8|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@309 |run#0@@75| |needle#0@@8|)))) (|Seq#Length| |run#0@@75|))) (= (|Seq#Index| |run#0@@75| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@309 |run#0@@75| |needle#0@@8|))))) |needle#0@@8|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@309 |run#0@@75| |needle#0@@8|)) (forall ((|i#0@@92| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@92|) (< |i#0@@92| (|Seq#Length| |run#0@@75|))) (not (= (|Seq#Index| |run#0@@75| |i#0@@92|) |needle#0@@8|))) :qid |Sequencesidfy.351:32| :skolemid |4463| :pattern ( (|Seq#Index| |run#0@@75| |i#0@@92|)) )))) ($Is (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@309 |run#0@@75| |needle#0@@8|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |4464| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@309 |run#0@@75| |needle#0@@8|)) ))))
(assert (forall ((Sequences._default.SeqIndex$A@@2 T@U) ($ly@@310 T@U) (|run#0@@76| T@U) (|needle#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@2) TyType) (= (type $ly@@310) LayerTypeType)) (= (type |run#0@@76|) (SeqType BoxType))) (= (type |needle#0@@9|) BoxType)) (and ($Is |run#0@@76| (TSeq Sequences._default.SeqIndex$A@@2)) ($IsBox |needle#0@@9| Sequences._default.SeqIndex$A@@2))) (= (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@310 |run#0@@76| |needle#0@@9|) true)) :qid |unknown.0:0| :skolemid |4465| :pattern ( (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@310 |run#0@@76| |needle#0@@9|)) )))
(assert (= (type StartFuel_Sequences._default.SeqIndexIterate) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@3 T@U) ($ly@@311 T@U) (|run#0@@77| T@U) (|needle#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@3) TyType) (= (type $ly@@311) LayerTypeType)) (= (type |run#0@@77|) (SeqType BoxType))) (= (type |needle#0@@10|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@77| |needle#0@@10|) (and ($Is |run#0@@77| (TSeq Sequences._default.SeqIndex$A@@3)) ($IsBox |needle#0@@10| Sequences._default.SeqIndex$A@@3)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@77| |needle#0@@10| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@311) |run#0@@77| |needle#0@@10|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@3 StartFuel_Sequences._default.SeqIndexIterate |run#0@@77| |needle#0@@10| (LitInt 0))))) :qid |unknown.0:0| :skolemid |4466| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@311) |run#0@@77| |needle#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@4 T@U) ($ly@@312 T@U) (|run#0@@78| T@U) (|needle#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@4) TyType) (= (type $ly@@312) LayerTypeType)) (= (type |run#0@@78|) (SeqType BoxType))) (= (type |needle#0@@11|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@78|) |needle#0@@11|) (and ($Is |run#0@@78| (TSeq Sequences._default.SeqIndex$A@@4)) ($IsBox |needle#0@@11| Sequences._default.SeqIndex$A@@4)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@78|) |needle#0@@11| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@312) (Lit |run#0@@78|) |needle#0@@11|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@4 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@78|) |needle#0@@11| (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |4467| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@312) (Lit |run#0@@78|) |needle#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@5 T@U) ($ly@@313 T@U) (|run#0@@79| T@U) (|needle#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@5) TyType) (= (type $ly@@313) LayerTypeType)) (= (type |run#0@@79|) (SeqType BoxType))) (= (type |needle#0@@12|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@79|) (Lit |needle#0@@12|)) (and ($Is |run#0@@79| (TSeq Sequences._default.SeqIndex$A@@5)) ($IsBox |needle#0@@12| Sequences._default.SeqIndex$A@@5)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@79|) (Lit |needle#0@@12|) (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@313) (Lit |run#0@@79|) (Lit |needle#0@@12|)) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@5 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@79|) (Lit |needle#0@@12|) (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |4468| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@313) (Lit |run#0@@79|) (Lit |needle#0@@12|))) ))))
(assert (forall ((Sequences._default.SeqOfLength$V T@U) ($ly@@314 T@U) (|length#0| Int) (|v#0@@8| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V) TyType) (= (type $ly@@314) LayerTypeType)) (= (type |v#0@@8|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@314) |length#0| |v#0@@8|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V $ly@@314 |length#0| |v#0@@8|))) :qid |unknown.0:0| :skolemid |4469| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@314) |length#0| |v#0@@8|)) )))
(assert (forall ((Sequences._default.SeqOfLength$V@@0 T@U) ($ly@@315 T@U) (|length#0@@0| Int) (|v#0@@9| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V@@0) TyType) (= (type $ly@@315) LayerTypeType)) (= (type |v#0@@9|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $ly@@315 |length#0@@0| |v#0@@9|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $LZ |length#0@@0| |v#0@@9|))) :qid |unknown.0:0| :skolemid |4470| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 (AsFuelBottom $ly@@315) |length#0@@0| |v#0@@9|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@1 T@U) ($ly@@316 T@U) (|length#0@@1| Int) (|v#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@1) TyType) (= (type $ly@@316) LayerTypeType)) (= (type |v#0@@10|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@1 |length#0@@1| |v#0@@10|) (and (<= (LitInt 0) |length#0@@1|) ($IsBox |v#0@@10| Sequences._default.SeqOfLength$V@@1)))) (and (and (= (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@316 |length#0@@1| |v#0@@10|)) |length#0@@1|) (forall ((|i#0@@93| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@93|) (< |i#0@@93| (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@316 |length#0@@1| |v#0@@10|)))) (= (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@316 |length#0@@1| |v#0@@10|) |i#0@@93|) |v#0@@10|)) :qid |Sequencesidfy.358:18| :skolemid |4471| :pattern ( (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@316 |length#0@@1| |v#0@@10|) |i#0@@93|)) ))) ($Is (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@316 |length#0@@1| |v#0@@10|) (TSeq Sequences._default.SeqOfLength$V@@1)))) :qid |unknown.0:0| :skolemid |4472| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@316 |length#0@@1| |v#0@@10|)) ))))
(assert (forall ((Sequences._default.SeqOfLength$V@@2 T@U) ($ly@@317 T@U) (|length#0@@2| Int) (|v#0@@11| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@2) TyType) (= (type $ly@@317) LayerTypeType)) (= (type |v#0@@11|) BoxType)) (and (<= (LitInt 0) |length#0@@2|) ($IsBox |v#0@@11| Sequences._default.SeqOfLength$V@@2))) (= (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@317 |length#0@@2| |v#0@@11|) true)) :qid |unknown.0:0| :skolemid |4473| :pattern ( (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@317 |length#0@@2| |v#0@@11|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@3 T@U) ($ly@@318 T@U) (|length#0@@3| Int) (|v#0@@12| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@3) TyType) (= (type $ly@@318) LayerTypeType)) (= (type |v#0@@12|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 |length#0@@3| |v#0@@12|) (and (<= (LitInt 0) |length#0@@3|) ($IsBox |v#0@@12| Sequences._default.SeqOfLength$V@@3)))) (and (=> (not (= |length#0@@3| (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 (- |length#0@@3| 1) |v#0@@12|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@318) |length#0@@3| |v#0@@12|) (ite (= |length#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@12|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 $ly@@318 (- |length#0@@3| 1) |v#0@@12|)))))) :qid |unknown.0:0| :skolemid |4474| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@318) |length#0@@3| |v#0@@12|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@4 T@U) ($ly@@319 T@U) (|length#0@@4| Int) (|v#0@@13| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@4) TyType) (= (type $ly@@319) LayerTypeType)) (= (type |v#0@@13|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt |length#0@@4|) |v#0@@13|) (and (<= (LitInt 0) |length#0@@4|) ($IsBox |v#0@@13| Sequences._default.SeqOfLength$V@@4)))) (and (=> (not (= (LitInt |length#0@@4|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt (- |length#0@@4| 1)) |v#0@@13|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@319) (LitInt |length#0@@4|) |v#0@@13|) (ite (= (LitInt |length#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@13|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@319) (LitInt (- |length#0@@4| 1)) |v#0@@13|)))))) :qid |unknown.0:0| :weight 3 :skolemid |4475| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@319) (LitInt |length#0@@4|) |v#0@@13|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@5 T@U) ($ly@@320 T@U) (|length#0@@5| Int) (|v#0@@14| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@5) TyType) (= (type $ly@@320) LayerTypeType)) (= (type |v#0@@14|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt |length#0@@5|) (Lit |v#0@@14|)) (and (<= (LitInt 0) |length#0@@5|) ($IsBox |v#0@@14| Sequences._default.SeqOfLength$V@@5)))) (and (=> (not (= (LitInt |length#0@@5|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt (- |length#0@@5| 1)) (Lit |v#0@@14|))) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@320) (LitInt |length#0@@5|) (Lit |v#0@@14|)) (ite (= (LitInt |length#0@@5|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |v#0@@14|)) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@320) (LitInt (- |length#0@@5| 1)) (Lit |v#0@@14|))))))) :qid |unknown.0:0| :weight 3 :skolemid |4476| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@320) (LitInt |length#0@@5|) (Lit |v#0@@14|))) ))))
(assert (forall ((arg0@@334 T@U) (arg1@@184 T@U) (arg2@@117 T@U) (arg3@@73 Int) (arg4@@48 T@U) ) (! (= (type (Sequences.__default.SeqIndexUpdate arg0@@334 arg1@@184 arg2@@117 arg3@@73 arg4@@48)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqIndexUpdate| :pattern ( (Sequences.__default.SeqIndexUpdate arg0@@334 arg1@@184 arg2@@117 arg3@@73 arg4@@48)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T T@U) ($ly@@321 T@U) (|s#0@@42| T@U) (|i#0@@94| Int) (|t#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T) TyType) (= (type $ly@@321) LayerTypeType)) (= (type |s#0@@42|) (SeqType BoxType))) (= (type |t#0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@321) |s#0@@42| |i#0@@94| |t#0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T $ly@@321 |s#0@@42| |i#0@@94| |t#0|))) :qid |unknown.0:0| :skolemid |4477| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@321) |s#0@@42| |i#0@@94| |t#0|)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@0 T@U) ($ly@@322 T@U) (|s#0@@43| T@U) (|i#0@@95| Int) (|t#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@0) TyType) (= (type $ly@@322) LayerTypeType)) (= (type |s#0@@43|) (SeqType BoxType))) (= (type |t#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $ly@@322 |s#0@@43| |i#0@@95| |t#0@@0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $LZ |s#0@@43| |i#0@@95| |t#0@@0|))) :qid |unknown.0:0| :skolemid |4478| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 (AsFuelBottom $ly@@322) |s#0@@43| |i#0@@95| |t#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@1 T@U) ($ly@@323 T@U) (|s#0@@44| T@U) (|i#0@@96| Int) (|t#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@1) TyType) (= (type $ly@@323) LayerTypeType)) (= (type |s#0@@44|) (SeqType BoxType))) (= (type |t#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@1 |s#0@@44| |i#0@@96| |t#0@@1|) (and (and (and ($Is |s#0@@44| (TSeq Sequences._default.SeqIndexUpdate$T@@1)) (and (<= (LitInt 0) |i#0@@96|) (< |i#0@@96| 18446744073709551616))) ($IsBox |t#0@@1| Sequences._default.SeqIndexUpdate$T@@1)) (and (< (+ |i#0@@96| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@96|) (< |i#0@@96| (|Seq#Length| |s#0@@44|))))))) (and (|Seq#Equal| (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@323 |s#0@@44| |i#0@@96| |t#0@@1|) (|Seq#Update| |s#0@@44| |i#0@@96| |t#0@@1|)) ($Is (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@323 |s#0@@44| |i#0@@96| |t#0@@1|) (TSeq Sequences._default.SeqIndexUpdate$T@@1)))) :qid |unknown.0:0| :skolemid |4479| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@323 |s#0@@44| |i#0@@96| |t#0@@1|)) ))))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@2 T@U) ($ly@@324 T@U) (|s#0@@45| T@U) (|i#0@@97| Int) (|t#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@2) TyType) (= (type $ly@@324) LayerTypeType)) (= (type |s#0@@45|) (SeqType BoxType))) (= (type |t#0@@2|) BoxType)) (and (and ($Is |s#0@@45| (TSeq Sequences._default.SeqIndexUpdate$T@@2)) (and (<= (LitInt 0) |i#0@@97|) (< |i#0@@97| 18446744073709551616))) ($IsBox |t#0@@2| Sequences._default.SeqIndexUpdate$T@@2))) (= (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@324 |s#0@@45| |i#0@@97| |t#0@@2|)  (and (< (+ |i#0@@97| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@97|) (< |i#0@@97| (|Seq#Length| |s#0@@45|)))))) :qid |unknown.0:0| :skolemid |4480| :pattern ( (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@324 |s#0@@45| |i#0@@97| |t#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@3 T@U) ($ly@@325 T@U) (|s#0@@46| T@U) (|i#0@@98| Int) (|t#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@3) TyType) (= (type $ly@@325) LayerTypeType)) (= (type |s#0@@46|) (SeqType BoxType))) (= (type |t#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@3 |s#0@@46| |i#0@@98| |t#0@@3|) (and (and (and ($Is |s#0@@46| (TSeq Sequences._default.SeqIndexUpdate$T@@3)) (and (<= (LitInt 0) |i#0@@98|) (< |i#0@@98| 18446744073709551616))) ($IsBox |t#0@@3| Sequences._default.SeqIndexUpdate$T@@3)) (and (< (+ |i#0@@98| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@98|) (< |i#0@@98| (|Seq#Length| |s#0@@46|))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@325) |s#0@@46| |i#0@@98| |t#0@@3|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@46| |i#0@@98|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@3|)) (|Seq#Drop| |s#0@@46| (+ |i#0@@98| 1))))) :qid |unknown.0:0| :skolemid |4481| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@325) |s#0@@46| |i#0@@98| |t#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@4 T@U) ($ly@@326 T@U) (|s#0@@47| T@U) (|i#0@@99| Int) (|t#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@4) TyType) (= (type $ly@@326) LayerTypeType)) (= (type |s#0@@47|) (SeqType BoxType))) (= (type |t#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@4 (Lit |s#0@@47|) (LitInt |i#0@@99|) |t#0@@4|) (and (and (and ($Is |s#0@@47| (TSeq Sequences._default.SeqIndexUpdate$T@@4)) (and (<= (LitInt 0) |i#0@@99|) (< |i#0@@99| 18446744073709551616))) ($IsBox |t#0@@4| Sequences._default.SeqIndexUpdate$T@@4)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@99| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@99|)) (< |i#0@@99| (|Seq#Length| (Lit |s#0@@47|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@326) (Lit |s#0@@47|) (LitInt |i#0@@99|) |t#0@@4|) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@47|) (LitInt |i#0@@99|)) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@4|)) (|Seq#Drop| (Lit |s#0@@47|) (LitInt (+ |i#0@@99| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |4482| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@326) (Lit |s#0@@47|) (LitInt |i#0@@99|) |t#0@@4|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@5 T@U) ($ly@@327 T@U) (|s#0@@48| T@U) (|i#0@@100| Int) (|t#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@5) TyType) (= (type $ly@@327) LayerTypeType)) (= (type |s#0@@48|) (SeqType BoxType))) (= (type |t#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@5 (Lit |s#0@@48|) (LitInt |i#0@@100|) (Lit |t#0@@5|)) (and (and (and ($Is |s#0@@48| (TSeq Sequences._default.SeqIndexUpdate$T@@5)) (and (<= (LitInt 0) |i#0@@100|) (< |i#0@@100| 18446744073709551616))) ($IsBox |t#0@@5| Sequences._default.SeqIndexUpdate$T@@5)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@100| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@100|)) (< |i#0@@100| (|Seq#Length| (Lit |s#0@@48|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@327) (Lit |s#0@@48|) (LitInt |i#0@@100|) (Lit |t#0@@5|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@48|) (LitInt |i#0@@100|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@5|))) (|Seq#Drop| (Lit |s#0@@48|) (LitInt (+ |i#0@@100| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |4483| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@327) (Lit |s#0@@48|) (LitInt |i#0@@100|) (Lit |t#0@@5|))) ))))
(assert (forall ((arg0@@335 T@U) (arg1@@185 T@U) (arg2@@118 T@U) (arg3@@74 T@U) (arg4@@49 T@U) ) (! (= (type (Sequences.__default.Zip arg0@@335 arg1@@185 arg2@@118 arg3@@74 arg4@@49)) (SeqType BoxType)) :qid |funType:Sequences.__default.Zip| :pattern ( (Sequences.__default.Zip arg0@@335 arg1@@185 arg2@@118 arg3@@74 arg4@@49)) )))
(assert (forall ((Sequences._default.Zip$A T@U) (Sequences._default.Zip$B T@U) ($ly@@328 T@U) (|a#0@@91| T@U) (|b#0@@59| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A) TyType) (= (type Sequences._default.Zip$B) TyType)) (= (type $ly@@328) LayerTypeType)) (= (type |a#0@@91|) (SeqType BoxType))) (= (type |b#0@@59|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@328) |a#0@@91| |b#0@@59|) (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B $ly@@328 |a#0@@91| |b#0@@59|))) :qid |unknown.0:0| :skolemid |4484| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@328) |a#0@@91| |b#0@@59|)) )))
(assert (forall ((Sequences._default.Zip$A@@0 T@U) (Sequences._default.Zip$B@@0 T@U) ($ly@@329 T@U) (|a#0@@92| T@U) (|b#0@@60| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A@@0) TyType) (= (type Sequences._default.Zip$B@@0) TyType)) (= (type $ly@@329) LayerTypeType)) (= (type |a#0@@92|) (SeqType BoxType))) (= (type |b#0@@60|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $ly@@329 |a#0@@92| |b#0@@60|) (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $LZ |a#0@@92| |b#0@@60|))) :qid |unknown.0:0| :skolemid |4485| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 (AsFuelBottom $ly@@329) |a#0@@92| |b#0@@60|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@1 T@U) (Sequences._default.Zip$B@@1 T@U) ($ly@@330 T@U) (|a#0@@93| T@U) (|b#0@@61| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@1) TyType) (= (type Sequences._default.Zip$B@@1) TyType)) (= (type $ly@@330) LayerTypeType)) (= (type |a#0@@93|) (SeqType BoxType))) (= (type |b#0@@61|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 |a#0@@93| |b#0@@61|) (and (and ($Is |a#0@@93| (TSeq Sequences._default.Zip$A@@1)) ($Is |b#0@@61| (TSeq Sequences._default.Zip$B@@1))) (= (|Seq#Length| |a#0@@93|) (|Seq#Length| |b#0@@61|))))) (and (and (= (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@330 |a#0@@93| |b#0@@61|)) (|Seq#Length| |a#0@@93|)) (forall ((|i#0@@101| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@101|) (< |i#0@@101| (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@330 |a#0@@93| |b#0@@61|)))) (|_System.Tuple2#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@330 |a#0@@93| |b#0@@61|) |i#0@@101|)) (|#_System._tuple#2._#Make2| (|Seq#Index| |a#0@@93| |i#0@@101|) (|Seq#Index| |b#0@@61| |i#0@@101|))))) :qid |Sequencesidfy.379:20| :skolemid |4486| :pattern ( (|Seq#Index| |b#0@@61| |i#0@@101|)) :pattern ( (|Seq#Index| |a#0@@93| |i#0@@101|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@330 |a#0@@93| |b#0@@61|) |i#0@@101|))) ))) ($Is (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@330 |a#0@@93| |b#0@@61|) (TSeq (Tclass._System.Tuple2 Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1))))) :qid |unknown.0:0| :skolemid |4487| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@330 |a#0@@93| |b#0@@61|)) ))))
(assert (forall ((Sequences._default.Zip$A@@2 T@U) (Sequences._default.Zip$B@@2 T@U) ($ly@@331 T@U) (|a#0@@94| T@U) (|b#0@@62| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@2) TyType) (= (type Sequences._default.Zip$B@@2) TyType)) (= (type $ly@@331) LayerTypeType)) (= (type |a#0@@94|) (SeqType BoxType))) (= (type |b#0@@62|) (SeqType BoxType))) (and ($Is |a#0@@94| (TSeq Sequences._default.Zip$A@@2)) ($Is |b#0@@62| (TSeq Sequences._default.Zip$B@@2)))) (= (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@331 |a#0@@94| |b#0@@62|) (= (|Seq#Length| |a#0@@94|) (|Seq#Length| |b#0@@62|)))) :qid |unknown.0:0| :skolemid |4488| :pattern ( (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@331 |a#0@@94| |b#0@@62|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@3 T@U) (Sequences._default.Zip$B@@3 T@U) ($ly@@332 T@U) (|a#0@@95| T@U) (|b#0@@63| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@3) TyType) (= (type Sequences._default.Zip$B@@3) TyType)) (= (type $ly@@332) LayerTypeType)) (= (type |a#0@@95|) (SeqType BoxType))) (= (type |b#0@@63|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 |a#0@@95| |b#0@@63|) (and (and ($Is |a#0@@95| (TSeq Sequences._default.Zip$A@@3)) ($Is |b#0@@63| (TSeq Sequences._default.Zip$B@@3))) (= (|Seq#Length| |a#0@@95|) (|Seq#Length| |b#0@@63|))))) (and (=> (not (= (|Seq#Length| |a#0@@95|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@3 |a#0@@95|) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@3 |b#0@@63|)) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@95|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@63|))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@3 |a#0@@95|) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@3 |b#0@@63|)))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@332) |a#0@@95| |b#0@@63|) (ite (= (|Seq#Length| |a#0@@95|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 $ly@@332 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@95|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@63|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#_System._tuple#2._#Make2| (Sequences.__default.Last Sequences._default.Zip$A@@3 |a#0@@95|) (Sequences.__default.Last Sequences._default.Zip$B@@3 |b#0@@63|))))))))) :qid |unknown.0:0| :skolemid |4489| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@332) |a#0@@95| |b#0@@63|)) ))))
(assert  (=> true (forall ((Sequences._default.Zip$A@@4 T@U) (Sequences._default.Zip$B@@4 T@U) ($ly@@333 T@U) (|a#0@@96| T@U) (|b#0@@64| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@4) TyType) (= (type Sequences._default.Zip$B@@4) TyType)) (= (type $ly@@333) LayerTypeType)) (= (type |a#0@@96|) (SeqType BoxType))) (= (type |b#0@@64|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit |a#0@@96|) (Lit |b#0@@64|)) (and (and ($Is |a#0@@96| (TSeq Sequences._default.Zip$A@@4)) ($Is |b#0@@64| (TSeq Sequences._default.Zip$B@@4))) (= (|Seq#Length| (Lit |a#0@@96|)) (|Seq#Length| (Lit |b#0@@64|)))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@96|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@96|)) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@64|))) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@96|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@64|))))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@96|)) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@64|))))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@333) (Lit |a#0@@96|) (Lit |b#0@@64|)) (ite (= (|Seq#Length| (Lit |a#0@@96|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@333) (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@96|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@64|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#_System._tuple#2._#Make2| (Lit (Sequences.__default.Last Sequences._default.Zip$A@@4 (Lit |a#0@@96|))) (Lit (Sequences.__default.Last Sequences._default.Zip$B@@4 (Lit |b#0@@64|)))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |4490| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@333) (Lit |a#0@@96|) (Lit |b#0@@64|))) ))))
(assert (forall ((arg0@@336 T@U) (arg1@@186 T@U) (arg2@@119 T@U) (arg3@@75 T@U) ) (! (= (type (Sequences.__default.Unzip arg0@@336 arg1@@186 arg2@@119 arg3@@75)) DatatypeTypeType) :qid |funType:Sequences.__default.Unzip| :pattern ( (Sequences.__default.Unzip arg0@@336 arg1@@186 arg2@@119 arg3@@75)) )))
(assert (forall ((Sequences._default.Unzip$A T@U) (Sequences._default.Unzip$B T@U) ($ly@@334 T@U) (|z#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A) TyType) (= (type Sequences._default.Unzip$B) TyType)) (= (type $ly@@334) LayerTypeType)) (= (type |z#0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@334) |z#0|) (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B $ly@@334 |z#0|))) :qid |unknown.0:0| :skolemid |4491| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@334) |z#0|)) )))
(assert (forall ((Sequences._default.Unzip$A@@0 T@U) (Sequences._default.Unzip$B@@0 T@U) ($ly@@335 T@U) (|z#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A@@0) TyType) (= (type Sequences._default.Unzip$B@@0) TyType)) (= (type $ly@@335) LayerTypeType)) (= (type |z#0@@0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $ly@@335 |z#0@@0|) (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $LZ |z#0@@0|))) :qid |unknown.0:0| :skolemid |4492| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 (AsFuelBottom $ly@@335) |z#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@1 T@U) (Sequences._default.Unzip$B@@1 T@U) ($ly@@336 T@U) (|z#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@1) TyType) (= (type Sequences._default.Unzip$B@@1) TyType)) (= (type $ly@@336) LayerTypeType)) (= (type |z#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 |z#0@@1|) ($Is |z#0@@1| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1))))) (and (and (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@336 |z#0@@1|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@336 |z#0@@1|))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@336 |z#0@@1|)))) (|Seq#Length| |z#0@@1|))) (forall ((|i#0@@102| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@102|) (< |i#0@@102| (|Seq#Length| |z#0@@1|))) (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@336 |z#0@@1|))) |i#0@@102|) (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@336 |z#0@@1|))) |i#0@@102|)) ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@102|))))) :qid |Sequencesidfy.387:20| :skolemid |4493| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@102|))) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@336 |z#0@@1|))) |i#0@@102|)) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@336 |z#0@@1|))) |i#0@@102|)) ))) ($Is (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@336 |z#0@@1|) (Tclass._System.Tuple2 (TSeq Sequences._default.Unzip$A@@1) (TSeq Sequences._default.Unzip$B@@1))))) :qid |unknown.0:0| :skolemid |4494| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@336 |z#0@@1|)) ))))
(assert (forall ((Sequences._default.Unzip$A@@2 T@U) (Sequences._default.Unzip$B@@2 T@U) ($ly@@337 T@U) (|z#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@2) TyType) (= (type Sequences._default.Unzip$B@@2) TyType)) (= (type $ly@@337) LayerTypeType)) (= (type |z#0@@2|) (SeqType BoxType))) ($Is |z#0@@2| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2)))) (= (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@337 |z#0@@2|) true)) :qid |unknown.0:0| :skolemid |4495| :pattern ( (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@337 |z#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@3 T@U) (Sequences._default.Unzip$B@@3 T@U) ($ly@@338 T@U) (|z#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@3) TyType) (= (type Sequences._default.Unzip$B@@3) TyType)) (= (type $ly@@338) LayerTypeType)) (= (type |z#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 |z#0@@3|) ($Is |z#0@@3| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3))))) (and (=> (not (= (|Seq#Length| |z#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@338) |z#0@@3|) (ite (= (|Seq#Length| |z#0@@3|) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#0@@65| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@338 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (let ((|a#0@@97| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@338 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#0@@97| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) ($Box (|Seq#Append| |b#0@@65| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._1 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))))))))) :qid |unknown.0:0| :skolemid |4496| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@338) |z#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@4 T@U) (Sequences._default.Unzip$B@@4 T@U) ($ly@@339 T@U) (|z#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@4) TyType) (= (type Sequences._default.Unzip$B@@4) TyType)) (= (type $ly@@339) LayerTypeType)) (= (type |z#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit |z#0@@4|)) ($Is |z#0@@4| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4))))) (and (=> (not (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@339) (Lit |z#0@@4|)) (ite (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@339) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (let ((|a#1| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@339) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._0 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) ($Box (|Seq#Append| |b#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._1 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |4497| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@339) (Lit |z#0@@4|))) ))))
(assert (forall ((arg0@@337 T@U) (arg1@@187 T@U) (arg2@@120 T@U) ) (! (= (type (Sequences.__default.FlattenShape arg0@@337 arg1@@187 arg2@@120)) (SeqType BoxType)) :qid |funType:Sequences.__default.FlattenShape| :pattern ( (Sequences.__default.FlattenShape arg0@@337 arg1@@187 arg2@@120)) )))
(assert (forall ((Sequences._default.FlattenShape$A T@U) ($ly@@340 T@U) (|seqs#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A) TyType) (= (type $ly@@340) LayerTypeType)) (= (type |seqs#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@340) |seqs#0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A $ly@@340 |seqs#0|))) :qid |unknown.0:0| :skolemid |4498| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@340) |seqs#0|)) )))
(assert (forall ((Sequences._default.FlattenShape$A@@0 T@U) ($ly@@341 T@U) (|seqs#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A@@0) TyType) (= (type $ly@@341) LayerTypeType)) (= (type |seqs#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $ly@@341 |seqs#0@@0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $LZ |seqs#0@@0|))) :qid |unknown.0:0| :skolemid |4499| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 (AsFuelBottom $ly@@341) |seqs#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@1 T@U) ($ly@@342 T@U) (|seqs#0@@1| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@1) TyType) (= (type $ly@@342) LayerTypeType)) (= (type |seqs#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@1 |seqs#0@@1|) ($Is |seqs#0@@1| (TSeq (TSeq Sequences._default.FlattenShape$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@342 |seqs#0@@1|)) (|Seq#Length| |seqs#0@@1|)) (forall ((|i#0@@103| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@103|) (< |i#0@@103| (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@342 |seqs#0@@1|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@342 |seqs#0@@1|) |i#0@@103|))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@103|)))))) :qid |Sequencesidfy.409:20| :skolemid |4500| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@103|))) :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@342 |seqs#0@@1|) |i#0@@103|))) ))) ($Is (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@342 |seqs#0@@1|) (TSeq Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |4501| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@342 |seqs#0@@1|)) ))))
(assert (forall ((Sequences._default.FlattenShape$A@@2 T@U) ($ly@@343 T@U) (|seqs#0@@2| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@2) TyType) (= (type $ly@@343) LayerTypeType)) (= (type |seqs#0@@2|) (SeqType BoxType))) ($Is |seqs#0@@2| (TSeq (TSeq Sequences._default.FlattenShape$A@@2)))) (= (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@343 |seqs#0@@2|) true)) :qid |unknown.0:0| :skolemid |4502| :pattern ( (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@343 |seqs#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@3 T@U) ($ly@@344 T@U) (|seqs#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@3) TyType) (= (type $ly@@344) LayerTypeType)) (= (type |seqs#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 |seqs#0@@3|) ($Is |seqs#0@@3| (TSeq (TSeq Sequences._default.FlattenShape$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@344) |seqs#0@@3|) (ite (= (|Seq#Length| |seqs#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 $ly@@344 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))))))))))) :qid |unknown.0:0| :skolemid |4503| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@344) |seqs#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@4 T@U) ($ly@@345 T@U) (|seqs#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@4) TyType) (= (type $ly@@345) LayerTypeType)) (= (type |seqs#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit |seqs#0@@4|)) ($Is |seqs#0@@4| (TSeq (TSeq Sequences._default.FlattenShape$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@345) (Lit |seqs#0@@4|)) (ite (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@345) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |4504| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@345) (Lit |seqs#0@@4|))) ))))
(assert (forall (($ly@@346 T@U) (|shape#0| T@U) ) (!  (=> (and (= (type $ly@@346) LayerTypeType) (= (type |shape#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength ($LS $ly@@346) |shape#0|) (Sequences.__default.FlattenLength $ly@@346 |shape#0|))) :qid |Sequencesidfy.420:22| :skolemid |4505| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@346) |shape#0|)) )))
(assert (forall (($ly@@347 T@U) (|shape#0@@0| T@U) ) (!  (=> (and (= (type $ly@@347) LayerTypeType) (= (type |shape#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength $ly@@347 |shape#0@@0|) (Sequences.__default.FlattenLength $LZ |shape#0@@0|))) :qid |Sequencesidfy.420:22| :skolemid |4506| :pattern ( (Sequences.__default.FlattenLength (AsFuelBottom $ly@@347) |shape#0@@0|)) )))
(assert  (=> true (forall (($ly@@348 T@U) (|shape#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@348) LayerTypeType) (= (type |shape#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@1|) ($Is |shape#0@@1| (TSeq Tclass._System.nat)))) (and (=> (= (|Seq#Length| |shape#0@@1|) (LitInt 0)) (= (Sequences.__default.FlattenLength $ly@@348 |shape#0@@1|) (LitInt 0))) (<= (LitInt 0) (Sequences.__default.FlattenLength $ly@@348 |shape#0@@1|)))) :qid |Sequencesidfy.420:22| :skolemid |4507| :pattern ( (Sequences.__default.FlattenLength $ly@@348 |shape#0@@1|)) ))))
(assert (forall (($ly@@349 T@U) (|shape#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@349) LayerTypeType) (= (type |shape#0@@2|) (SeqType BoxType))) ($Is |shape#0@@2| (TSeq Tclass._System.nat))) (= (|Sequences.__default.FlattenLength#requires| $ly@@349 |shape#0@@2|) true)) :qid |Sequencesidfy.420:22| :skolemid |4508| :pattern ( (|Sequences.__default.FlattenLength#requires| $ly@@349 |shape#0@@2|)) )))
(assert  (=> true (forall (($ly@@350 T@U) (|shape#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@350) LayerTypeType) (= (type |shape#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@3|) ($Is |shape#0@@3| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| |shape#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@3|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|))) (|Sequences.__default.Last#canCall| Tclass._System.nat |shape#0@@3|))) (= (Sequences.__default.FlattenLength ($LS $ly@@350) |shape#0@@3|) (ite (= (|Seq#Length| |shape#0@@3|) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength $ly@@350 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|)) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat |shape#0@@3|)))))))) :qid |Sequencesidfy.420:22| :skolemid |4509| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@350) |shape#0@@3|)) ))))
(assert  (=> true (forall (($ly@@351 T@U) (|shape#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@351) LayerTypeType) (= (type |shape#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| (Lit |shape#0@@4|)) ($Is |shape#0@@4| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@4|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|))))) (|Sequences.__default.Last#canCall| Tclass._System.nat (Lit |shape#0@@4|)))) (= (Sequences.__default.FlattenLength ($LS $ly@@351) (Lit |shape#0@@4|)) (ite (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength ($LS $ly@@351) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|)))) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat (Lit |shape#0@@4|))))))))) :qid |Sequencesidfy.420:22| :weight 3 :skolemid |4510| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@351) (Lit |shape#0@@4|))) ))))
(assert (forall ((arg0@@338 T@U) (arg1@@188 T@U) (arg2@@121 T@U) ) (! (= (type (Sequences.__default.Flatten arg0@@338 arg1@@188 arg2@@121)) (SeqType BoxType)) :qid |funType:Sequences.__default.Flatten| :pattern ( (Sequences.__default.Flatten arg0@@338 arg1@@188 arg2@@121)) )))
(assert (forall ((Sequences._default.Flatten$A T@U) ($ly@@352 T@U) (|seqs#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A) TyType) (= (type $ly@@352) LayerTypeType)) (= (type |seqs#0@@5|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@352) |seqs#0@@5|) (Sequences.__default.Flatten Sequences._default.Flatten$A $ly@@352 |seqs#0@@5|))) :qid |unknown.0:0| :skolemid |4511| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@352) |seqs#0@@5|)) )))
(assert (forall ((Sequences._default.Flatten$A@@0 T@U) ($ly@@353 T@U) (|seqs#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A@@0) TyType) (= (type $ly@@353) LayerTypeType)) (= (type |seqs#0@@6|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $ly@@353 |seqs#0@@6|) (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $LZ |seqs#0@@6|))) :qid |unknown.0:0| :skolemid |4512| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 (AsFuelBottom $ly@@353) |seqs#0@@6|)) )))
(assert  (and (= (type StartFuel_Sequences._default.FlattenLength) LayerTypeType) (= (type StartFuel_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@1 T@U) ($ly@@354 T@U) (|seqs#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@1) TyType) (= (type $ly@@354) LayerTypeType)) (= (type |seqs#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@1 |seqs#0@@7|) ($Is |seqs#0@@7| (TSeq (TSeq Sequences._default.Flatten$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@354 |seqs#0@@7|)) (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.FlattenShape Sequences._default.Flatten$A@@1 StartFuel_Sequences._default.FlattenShape |seqs#0@@7|))) (=> (= (|Seq#Length| |seqs#0@@7|) (LitInt 0)) (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@354 |seqs#0@@7|)) (LitInt 0)))) ($Is (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@354 |seqs#0@@7|) (TSeq Sequences._default.Flatten$A@@1)))) :qid |unknown.0:0| :skolemid |4513| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@354 |seqs#0@@7|)) ))))
(assert (forall ((Sequences._default.Flatten$A@@2 T@U) ($ly@@355 T@U) (|seqs#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@2) TyType) (= (type $ly@@355) LayerTypeType)) (= (type |seqs#0@@8|) (SeqType BoxType))) ($Is |seqs#0@@8| (TSeq (TSeq Sequences._default.Flatten$A@@2)))) (= (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@355 |seqs#0@@8|) true)) :qid |unknown.0:0| :skolemid |4514| :pattern ( (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@355 |seqs#0@@8|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenShape0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@3 T@U) ($ly@@356 T@U) (|seqs#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@3) TyType) (= (type $ly@@356) LayerTypeType)) (= (type |seqs#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 |seqs#0@@9|) ($Is |seqs#0@@9| (TSeq (TSeq Sequences._default.Flatten$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@9|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape0)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape0) MoreFuel_Sequences._default.FlattenShape0)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@356) |seqs#0@@9|) (ite (= (|Seq#Length| |seqs#0@@9|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 $ly@@356 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)))))))) :qid |unknown.0:0| :skolemid |4515| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@356) |seqs#0@@9|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenShape1) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@4 T@U) ($ly@@357 T@U) (|seqs#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@4) TyType) (= (type $ly@@357) LayerTypeType)) (= (type |seqs#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit |seqs#0@@10|)) ($Is |seqs#0@@10| (TSeq (TSeq Sequences._default.Flatten$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape1)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape1) MoreFuel_Sequences._default.FlattenShape1)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@357) (Lit |seqs#0@@10|)) (ite (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@357) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |4516| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@357) (Lit |seqs#0@@10|))) ))))
(assert  (=> true (forall ((|shape#0@@5| T@U) (|i#0@@104| Int) (|j#0@@13| Int) ) (!  (=> (and (= (type |shape#0@@5|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@5| |i#0@@104| |j#0@@13|) (and (and (and ($Is |shape#0@@5| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@104|)) (<= (LitInt 0) |j#0@@13|)) (and (< |i#0@@104| (|Seq#Length| |shape#0@@5|)) (< |j#0@@13| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@5| |i#0@@104|)))))))) (<= (LitInt 0) (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@104| |j#0@@13|))) :qid |Sequencesidfy.489:25| :skolemid |4517| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@104| |j#0@@13|)) ))))
(assert (forall ((|shape#0@@6| T@U) (|i#0@@105| Int) (|j#0@@14| Int) ) (!  (=> (= (type |shape#0@@6|) (SeqType BoxType)) (=> (and (and ($Is |shape#0@@6| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@105|)) (<= (LitInt 0) |j#0@@14|)) (= (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@105| |j#0@@14|)  (and (< |i#0@@105| (|Seq#Length| |shape#0@@6|)) (< |j#0@@14| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@105|)))))))) :qid |Sequencesidfy.489:25| :skolemid |4518| :pattern ( (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@105| |j#0@@14|)) )))
(assert  (=> true (forall ((|shape#0@@7| T@U) (|i#0@@106| Int) (|j#0@@15| Int) ) (!  (=> (and (= (type |shape#0@@7|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@7| |i#0@@106| |j#0@@15|) (and (and (and ($Is |shape#0@@7| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@106|)) (<= (LitInt 0) |j#0@@15|)) (and (< |i#0@@106| (|Seq#Length| |shape#0@@7|)) (< |j#0@@15| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@7| |i#0@@106|)))))))) (and (|Sequences.__default.FlattenLength#canCall| (|Seq#Take| |shape#0@@7| |i#0@@106|)) (= (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@106| |j#0@@15|) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (|Seq#Take| |shape#0@@7| |i#0@@106|)) |j#0@@15|)))) :qid |Sequencesidfy.489:25| :skolemid |4519| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@106| |j#0@@15|)) ))))
(assert  (=> true (forall ((|shape#0@@8| T@U) (|i#0@@107| Int) (|j#0@@16| Int) ) (!  (=> (and (= (type |shape#0@@8|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| (Lit |shape#0@@8|) (LitInt |i#0@@107|) (LitInt |j#0@@16|)) (and (and (and ($Is |shape#0@@8| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@107|)) (<= (LitInt 0) |j#0@@16|)) (and (< |i#0@@107| (|Seq#Length| (Lit |shape#0@@8|))) (< |j#0@@16| (U_2_int ($Unbox intType (|Seq#Index| (Lit |shape#0@@8|) (LitInt |i#0@@107|))))))))) (and (|Sequences.__default.FlattenLength#canCall| (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@107|)))) (= (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@107|) (LitInt |j#0@@16|)) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@107|)))) |j#0@@16|)))) :qid |Sequencesidfy.489:25| :weight 3 :skolemid |4520| :pattern ( (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@107|) (LitInt |j#0@@16|))) ))))
(assert (forall ((arg0@@339 T@U) (arg1@@189 T@U) (arg2@@122 Int) ) (! (= (type (Sequences.__default.UnflattenIndex arg0@@339 arg1@@189 arg2@@122)) DatatypeTypeType) :qid |funType:Sequences.__default.UnflattenIndex| :pattern ( (Sequences.__default.UnflattenIndex arg0@@339 arg1@@189 arg2@@122)) )))
(assert (forall (($ly@@358 T@U) (|shape#0@@9| T@U) (|i#0@@108| Int) ) (!  (=> (and (= (type $ly@@358) LayerTypeType) (= (type |shape#0@@9|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex ($LS $ly@@358) |shape#0@@9| |i#0@@108|) (Sequences.__default.UnflattenIndex $ly@@358 |shape#0@@9| |i#0@@108|))) :qid |Sequencesidfy.496:12| :skolemid |4521| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@358) |shape#0@@9| |i#0@@108|)) )))
(assert (forall (($ly@@359 T@U) (|shape#0@@10| T@U) (|i#0@@109| Int) ) (!  (=> (and (= (type $ly@@359) LayerTypeType) (= (type |shape#0@@10|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex $ly@@359 |shape#0@@10| |i#0@@109|) (Sequences.__default.UnflattenIndex $LZ |shape#0@@10| |i#0@@109|))) :qid |Sequencesidfy.496:12| :skolemid |4522| :pattern ( (Sequences.__default.UnflattenIndex (AsFuelBottom $ly@@359) |shape#0@@10| |i#0@@109|)) )))
(assert  (=> true (forall (($ly@@360 T@U) (|shape#0@@11| T@U) (|i#0@@110| Int) ) (!  (=> (and (and (= (type $ly@@360) LayerTypeType) (= (type |shape#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@11| |i#0@@110|) (and (and ($Is |shape#0@@11| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@110|)) (< |i#0@@110| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@11|))))) ($Is (Sequences.__default.UnflattenIndex $ly@@360 |shape#0@@11| |i#0@@110|) (Tclass._System.Tuple2 Tclass._System.nat Tclass._System.nat))) :qid |Sequencesidfy.496:12| :skolemid |4523| :pattern ( (Sequences.__default.UnflattenIndex $ly@@360 |shape#0@@11| |i#0@@110|)) ))))
(assert (forall (($ly@@361 T@U) (|shape#0@@12| T@U) (|i#0@@111| Int) ) (!  (=> (and (and (= (type $ly@@361) LayerTypeType) (= (type |shape#0@@12|) (SeqType BoxType))) (and ($Is |shape#0@@12| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@111|))) (= (|Sequences.__default.UnflattenIndex#requires| $ly@@361 |shape#0@@12| |i#0@@111|) (< |i#0@@111| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|)))) :qid |Sequencesidfy.496:12| :skolemid |4524| :pattern ( (|Sequences.__default.UnflattenIndex#requires| $ly@@361 |shape#0@@12| |i#0@@111|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenLength0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenLength) LayerTypeType)))
(assert  (=> true (forall (($ly@@362 T@U) (|shape#0@@13| T@U) (|i#0@@112| Int) ) (!  (=> (and (and (= (type $ly@@362) LayerTypeType) (= (type |shape#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@13| |i#0@@112|) (and (and ($Is |shape#0@@13| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@112|)) (< |i#0@@112| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@13|))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (=> (< |i#0@@112| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@112|)))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|)) |i#0@@112|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength0)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength0) MoreFuel_Sequences._default.FlattenLength0)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@362) |shape#0@@13| |i#0@@112|) (ite (< |i#0@@112| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (Sequences.__default.UnflattenIndex $ly@@362 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@112|) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| |shape#0@@13|) 1))) ($Box (int_2_U (- |i#0@@112| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))))))))) :qid |Sequencesidfy.496:12| :skolemid |4525| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@362) |shape#0@@13| |i#0@@112|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenLength1) LayerTypeType))
(assert  (=> true (forall (($ly@@363 T@U) (|shape#0@@14| T@U) (|i#0@@113| Int) ) (!  (=> (and (and (= (type $ly@@363) LayerTypeType) (= (type |shape#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| (Lit |shape#0@@14|) (LitInt |i#0@@113|)) (and (and ($Is |shape#0@@14| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@113|)) (< |i#0@@113| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit |shape#0@@14|)))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (=> (< |i#0@@113| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.UnflattenIndex#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@113|))))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|)))) |i#0@@113|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength1)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength1) MoreFuel_Sequences._default.FlattenLength1)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@363) (Lit |shape#0@@14|) (LitInt |i#0@@113|)) (ite (< |i#0@@113| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (Sequences.__default.UnflattenIndex ($LS $ly@@363) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@113|)) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| (Lit |shape#0@@14|)) 1))) ($Box (int_2_U (- |i#0@@113| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))))))))) :qid |Sequencesidfy.496:12| :weight 3 :skolemid |4526| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@363) (Lit |shape#0@@14|) (LitInt |i#0@@113|))) ))))
(assert (forall (($ly@@364 T@U) (|s#0@@49| T@U) ) (!  (=> (and (= (type $ly@@364) LayerTypeType) (= (type |s#0@@49|) (SeqType BoxType))) (= (Sequences.__default.seqMax ($LS $ly@@364) |s#0@@49|) (Sequences.__default.seqMax $ly@@364 |s#0@@49|))) :qid |Sequencesidfy.606:22| :skolemid |4527| :pattern ( (Sequences.__default.seqMax ($LS $ly@@364) |s#0@@49|)) )))
(assert (forall (($ly@@365 T@U) (|s#0@@50| T@U) ) (!  (=> (and (= (type $ly@@365) LayerTypeType) (= (type |s#0@@50|) (SeqType BoxType))) (= (Sequences.__default.seqMax $ly@@365 |s#0@@50|) (Sequences.__default.seqMax $LZ |s#0@@50|))) :qid |Sequencesidfy.606:22| :skolemid |4528| :pattern ( (Sequences.__default.seqMax (AsFuelBottom $ly@@365) |s#0@@50|)) )))
(assert  (=> true (forall (($ly@@366 T@U) (|s#0@@51| T@U) ) (!  (=> (and (and (= (type $ly@@366) LayerTypeType) (= (type |s#0@@51|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| |s#0@@51|) (and ($Is |s#0@@51| (TSeq TInt)) (< 0 (|Seq#Length| |s#0@@51|))))) (and (forall ((|k#0@@13| T@U) ) (!  (=> (and (and (= (type |k#0@@13|) intType) true) (|Seq#Contains| |s#0@@51| ($Box |k#0@@13|))) (>= (Sequences.__default.seqMax $ly@@366 |s#0@@51|) (U_2_int |k#0@@13|))) :qid |Sequencesidfy.608:20| :skolemid |4529| :pattern ( (|Seq#Contains| |s#0@@51| ($Box |k#0@@13|))) )) (|Seq#Contains| |s#0@@51| ($Box (int_2_U (Sequences.__default.seqMax $ly@@366 |s#0@@51|)))))) :qid |Sequencesidfy.606:22| :skolemid |4530| :pattern ( (Sequences.__default.seqMax $ly@@366 |s#0@@51|)) ))))
(assert (forall (($ly@@367 T@U) (|s#0@@52| T@U) ) (!  (=> (and (and (= (type $ly@@367) LayerTypeType) (= (type |s#0@@52|) (SeqType BoxType))) ($Is |s#0@@52| (TSeq TInt))) (= (|Sequences.__default.seqMax#requires| $ly@@367 |s#0@@52|) (< 0 (|Seq#Length| |s#0@@52|)))) :qid |Sequencesidfy.606:22| :skolemid |4531| :pattern ( (|Sequences.__default.seqMax#requires| $ly@@367 |s#0@@52|)) )))
(assert  (=> true (forall (($ly@@368 T@U) (|s#0@@53| T@U) ) (!  (=> (and (and (= (type $ly@@368) LayerTypeType) (= (type |s#0@@53|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| |s#0@@53|) (and ($Is |s#0@@53| (TSeq TInt)) (< 0 (|Seq#Length| |s#0@@53|))))) (and (=> (not (= (|Seq#Length| |s#0@@53|) (LitInt 1))) (and (and (and (|Sequences.__default.DropLast#canCall| TInt |s#0@@53|) (|Sequences.__default.seqMax#canCall| (Sequences.__default.DropLast TInt |s#0@@53|))) (|Sequences.__default.Last#canCall| TInt |s#0@@53|)) (|Mathematics.__default.max#canCall| (Sequences.__default.seqMax $ly@@368 (Sequences.__default.DropLast TInt |s#0@@53|)) (U_2_int ($Unbox intType (Sequences.__default.Last TInt |s#0@@53|)))))) (= (Sequences.__default.seqMax ($LS $ly@@368) |s#0@@53|) (ite (= (|Seq#Length| |s#0@@53|) (LitInt 1)) (U_2_int ($Unbox intType (|Seq#Index| |s#0@@53| (LitInt 0)))) (Mathematics.__default.max (Sequences.__default.seqMax $ly@@368 (Sequences.__default.DropLast TInt |s#0@@53|)) (U_2_int ($Unbox intType (Sequences.__default.Last TInt |s#0@@53|)))))))) :qid |Sequencesidfy.606:22| :skolemid |4532| :pattern ( (Sequences.__default.seqMax ($LS $ly@@368) |s#0@@53|)) ))))
(assert  (=> true (forall (($ly@@369 T@U) (|s#0@@54| T@U) ) (!  (=> (and (and (= (type $ly@@369) LayerTypeType) (= (type |s#0@@54|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| (Lit |s#0@@54|)) (and ($Is |s#0@@54| (TSeq TInt)) (< 0 (|Seq#Length| (Lit |s#0@@54|)))))) (and (=> (not (= (|Seq#Length| (Lit |s#0@@54|)) (LitInt 1))) (and (and (and (|Sequences.__default.DropLast#canCall| TInt (Lit |s#0@@54|)) (|Sequences.__default.seqMax#canCall| (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@54|))))) (|Sequences.__default.Last#canCall| TInt (Lit |s#0@@54|))) (|Mathematics.__default.max#canCall| (Sequences.__default.seqMax ($LS $ly@@369) (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@54|)))) (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |s#0@@54|)))))))) (= (Sequences.__default.seqMax ($LS $ly@@369) (Lit |s#0@@54|)) (ite (= (|Seq#Length| (Lit |s#0@@54|)) (LitInt 1)) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@54|) (LitInt 0)))) (Mathematics.__default.max (Sequences.__default.seqMax ($LS $ly@@369) (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@54|)))) (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |s#0@@54|)))))))))) :qid |Sequencesidfy.606:22| :weight 3 :skolemid |4533| :pattern ( (Sequences.__default.seqMax ($LS $ly@@369) (Lit |s#0@@54|))) ))))
(assert (forall ((arg0@@340 T@U) (arg1@@190 T@U) (arg2@@123 Int) (arg3@@76 T@U) ) (! (= (type (Sequences.__default.fill arg0@@340 arg1@@190 arg2@@123 arg3@@76)) (SeqType BoxType)) :qid |funType:Sequences.__default.fill| :pattern ( (Sequences.__default.fill arg0@@340 arg1@@190 arg2@@123 arg3@@76)) )))
(assert (forall ((Sequences._default.fill$T T@U) ($ly@@370 T@U) (|n#0@@5| Int) (|t#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T) TyType) (= (type $ly@@370) LayerTypeType)) (= (type |t#0@@6|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@370) |n#0@@5| |t#0@@6|) (Sequences.__default.fill Sequences._default.fill$T $ly@@370 |n#0@@5| |t#0@@6|))) :qid |unknown.0:0| :skolemid |4534| :pattern ( (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@370) |n#0@@5| |t#0@@6|)) )))
(assert (forall ((Sequences._default.fill$T@@0 T@U) ($ly@@371 T@U) (|n#0@@6| Int) (|t#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T@@0) TyType) (= (type $ly@@371) LayerTypeType)) (= (type |t#0@@7|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T@@0 $ly@@371 |n#0@@6| |t#0@@7|) (Sequences.__default.fill Sequences._default.fill$T@@0 $LZ |n#0@@6| |t#0@@7|))) :qid |unknown.0:0| :skolemid |4535| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@0 (AsFuelBottom $ly@@371) |n#0@@6| |t#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@1 T@U) ($ly@@372 T@U) (|n#0@@7| Int) (|t#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@1) TyType) (= (type $ly@@372) LayerTypeType)) (= (type |t#0@@8|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@1 |n#0@@7| |t#0@@8|) (and ($IsBox |t#0@@8| Sequences._default.fill$T@@1) (>= |n#0@@7| (LitInt 0))))) (and (and (= (|Seq#Length| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@372 |n#0@@7| |t#0@@8|)) |n#0@@7|) (forall ((|i#0@@114| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@114|) (< |i#0@@114| |n#0@@7|)) (= (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@372 |n#0@@7| |t#0@@8|) |i#0@@114|) |t#0@@8|)) :qid |Sequencesidfy.695:18| :skolemid |4536| :pattern ( (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@372 |n#0@@7| |t#0@@8|) |i#0@@114|)) ))) ($Is (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@372 |n#0@@7| |t#0@@8|) (TSeq Sequences._default.fill$T@@1)))) :qid |unknown.0:0| :skolemid |4537| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@372 |n#0@@7| |t#0@@8|)) ))))
(assert (forall ((Sequences._default.fill$T@@2 T@U) ($ly@@373 T@U) (|n#0@@8| Int) (|t#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@2) TyType) (= (type $ly@@373) LayerTypeType)) (= (type |t#0@@9|) BoxType)) ($IsBox |t#0@@9| Sequences._default.fill$T@@2)) (= (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@373 |n#0@@8| |t#0@@9|) (>= |n#0@@8| (LitInt 0)))) :qid |unknown.0:0| :skolemid |4538| :pattern ( (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@373 |n#0@@8| |t#0@@9|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@3 T@U) ($ly@@374 T@U) (|n#0@@9| Int) (|t#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@3) TyType) (= (type $ly@@374) LayerTypeType)) (= (type |t#0@@10|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 |n#0@@9| |t#0@@10|) (and ($IsBox |t#0@@10| Sequences._default.fill$T@@3) (>= |n#0@@9| (LitInt 0))))) (and (=> (not (= |n#0@@9| (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 (- |n#0@@9| 1) |t#0@@10|)) (= (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@374) |n#0@@9| |t#0@@10|) (ite (= |n#0@@9| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@3 $ly@@374 (- |n#0@@9| 1) |t#0@@10|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@10|)))))) :qid |unknown.0:0| :skolemid |4539| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@374) |n#0@@9| |t#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@4 T@U) ($ly@@375 T@U) (|n#0@@10| Int) (|t#0@@11| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@4) TyType) (= (type $ly@@375) LayerTypeType)) (= (type |t#0@@11|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt |n#0@@10|) |t#0@@11|) (and ($IsBox |t#0@@11| Sequences._default.fill$T@@4) (>= (LitInt |n#0@@10|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@10|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt (- |n#0@@10| 1)) |t#0@@11|)) (= (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@375) (LitInt |n#0@@10|) |t#0@@11|) (ite (= (LitInt |n#0@@10|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@375) (LitInt (- |n#0@@10| 1)) |t#0@@11|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@11|)))))) :qid |unknown.0:0| :weight 3 :skolemid |4540| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@375) (LitInt |n#0@@10|) |t#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@5 T@U) ($ly@@376 T@U) (|n#0@@11| Int) (|t#0@@12| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@5) TyType) (= (type $ly@@376) LayerTypeType)) (= (type |t#0@@12|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt |n#0@@11|) (Lit |t#0@@12|)) (and ($IsBox |t#0@@12| Sequences._default.fill$T@@5) (>= (LitInt |n#0@@11|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@11|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|))) (= (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@376) (LitInt |n#0@@11|) (Lit |t#0@@12|)) (ite (= (LitInt |n#0@@11|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@376) (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@12|))))))) :qid |unknown.0:0| :weight 3 :skolemid |4541| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@376) (LitInt |n#0@@11|) (Lit |t#0@@12|))) ))))
(assert (= (type Tclass.Sets.__default) TyType))
(assert (= (Tag Tclass.Sets.__default) Tagclass.Sets.__default))
(assert (= (TagFamily Tclass.Sets.__default) tytagFamily$_default))
(assert (forall ((bx@@100 T@U) ) (!  (=> (and (= (type bx@@100) BoxType) ($IsBox bx@@100 Tclass.Sets.__default)) (and (= ($Box ($Unbox refType bx@@100)) bx@@100) ($Is ($Unbox refType bx@@100) Tclass.Sets.__default))) :qid |unknown.0:0| :skolemid |4542| :pattern ( ($IsBox bx@@100 Tclass.Sets.__default)) )))
(assert (forall (($o@@26 T@U) ) (!  (=> (= (type $o@@26) refType) (= ($Is $o@@26 Tclass.Sets.__default)  (or (= $o@@26 null) (= (dtype $o@@26) Tclass.Sets.__default)))) :qid |unknown.0:0| :skolemid |4543| :pattern ( ($Is $o@@26 Tclass.Sets.__default)) )))
(assert (forall (($o@@27 T@U) ($h@@77 T@U) ) (!  (=> (and (= (type $o@@27) refType) (= (type $h@@77) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@27 Tclass.Sets.__default $h@@77)  (or (= $o@@27 null) (U_2_bool (MapType1Select (MapType0Select $h@@77 $o@@27) alloc))))) :qid |unknown.0:0| :skolemid |4544| :pattern ( ($IsAlloc $o@@27 Tclass.Sets.__default $h@@77)) )))
(assert (forall ((arg0@@341 Int) ) (! (= (type (Sets.__default.SetRange arg0@@341)) (MapType0Type BoxType boolType)) :qid |funType:Sets.__default.SetRange| :pattern ( (Sets.__default.SetRange arg0@@341)) )))
(assert  (=> true (forall ((|n#0@@12| Int) ) (!  (=> true ($Is (Sets.__default.SetRange |n#0@@12|) (TSet TInt))) :qid |Setsidfy.35:21| :skolemid |4545| :pattern ( (Sets.__default.SetRange |n#0@@12|)) ))))
(assert (forall ((|n#0@@13| Int) ) (! (= (|Sets.__default.SetRange#requires| |n#0@@13|) true) :qid |Setsidfy.35:21| :skolemid |4546| :pattern ( (|Sets.__default.SetRange#requires| |n#0@@13|)) )))
(assert (forall ((arg0@@342 T@U) (arg1@@191 Int) (arg2@@124 Int) ) (! (= (type (|lambda#84| arg0@@342 arg1@@191 arg2@@124)) (MapType0Type BoxType boolType)) :qid |funType:lambda#84| :pattern ( (|lambda#84| arg0@@342 arg1@@191 arg2@@124)) )))
(assert  (=> true (forall ((|n#0@@14| Int) ) (!  (=> true (= (Sets.__default.SetRange |n#0@@14|) (|lambda#84| TInt (LitInt 0) |n#0@@14|))) :qid |Setsidfy.35:21| :skolemid |4547| :pattern ( (Sets.__default.SetRange |n#0@@14|)) ))))
(assert  (=> true (forall ((|n#0@@15| Int) ) (!  (=> true (= (Sets.__default.SetRange (LitInt |n#0@@15|)) (|lambda#84| TInt (LitInt 0) |n#0@@15|))) :qid |Setsidfy.35:21| :weight 3 :skolemid |4548| :pattern ( (Sets.__default.SetRange (LitInt |n#0@@15|))) ))))
(assert (= (type Tclass.MapRemove_s.__default) TyType))
(assert (= (Tag Tclass.MapRemove_s.__default) Tagclass.MapRemove_s.__default))
(assert (= (TagFamily Tclass.MapRemove_s.__default) tytagFamily$_default))
(assert (forall ((bx@@101 T@U) ) (!  (=> (and (= (type bx@@101) BoxType) ($IsBox bx@@101 Tclass.MapRemove_s.__default)) (and (= ($Box ($Unbox refType bx@@101)) bx@@101) ($Is ($Unbox refType bx@@101) Tclass.MapRemove_s.__default))) :qid |unknown.0:0| :skolemid |4549| :pattern ( ($IsBox bx@@101 Tclass.MapRemove_s.__default)) )))
(assert (forall (($o@@28 T@U) ) (!  (=> (= (type $o@@28) refType) (= ($Is $o@@28 Tclass.MapRemove_s.__default)  (or (= $o@@28 null) (= (dtype $o@@28) Tclass.MapRemove_s.__default)))) :qid |unknown.0:0| :skolemid |4550| :pattern ( ($Is $o@@28 Tclass.MapRemove_s.__default)) )))
(assert (forall (($o@@29 T@U) ($h@@78 T@U) ) (!  (=> (and (= (type $o@@29) refType) (= (type $h@@78) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@29 Tclass.MapRemove_s.__default $h@@78)  (or (= $o@@29 null) (U_2_bool (MapType1Select (MapType0Select $h@@78 $o@@29) alloc))))) :qid |unknown.0:0| :skolemid |4551| :pattern ( ($IsAlloc $o@@29 Tclass.MapRemove_s.__default $h@@78)) )))
(assert (forall ((arg0@@343 T@U) (arg1@@192 T@U) (arg2@@125 T@U) (arg3@@77 T@U) (arg4@@50 T@U) ) (! (= (type (MapRemove_s.__default.MapRemove1 arg0@@343 arg1@@192 arg2@@125 arg3@@77 arg4@@50)) (MapType BoxType BoxType)) :qid |funType:MapRemove_s.__default.MapRemove1| :pattern ( (MapRemove_s.__default.MapRemove1 arg0@@343 arg1@@192 arg2@@125 arg3@@77 arg4@@50)) )))
(assert (forall ((MapRemove_s._default.MapRemove1$K T@U) (MapRemove_s._default.MapRemove1$V T@U) ($ly@@377 T@U) (|m#0@@6| T@U) (|k#0@@14| T@U) ) (!  (=> (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K) TyType) (= (type MapRemove_s._default.MapRemove1$V) TyType)) (= (type $ly@@377) LayerTypeType)) (= (type |m#0@@6|) (MapType BoxType BoxType))) (= (type |k#0@@14|) BoxType)) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K MapRemove_s._default.MapRemove1$V ($LS $ly@@377) |m#0@@6| |k#0@@14|) (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K MapRemove_s._default.MapRemove1$V $ly@@377 |m#0@@6| |k#0@@14|))) :qid |unknown.0:0| :skolemid |4552| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K MapRemove_s._default.MapRemove1$V ($LS $ly@@377) |m#0@@6| |k#0@@14|)) )))
(assert (forall ((MapRemove_s._default.MapRemove1$K@@0 T@U) (MapRemove_s._default.MapRemove1$V@@0 T@U) ($ly@@378 T@U) (|m#0@@7| T@U) (|k#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@0) TyType) (= (type MapRemove_s._default.MapRemove1$V@@0) TyType)) (= (type $ly@@378) LayerTypeType)) (= (type |m#0@@7|) (MapType BoxType BoxType))) (= (type |k#0@@15|) BoxType)) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@0 MapRemove_s._default.MapRemove1$V@@0 $ly@@378 |m#0@@7| |k#0@@15|) (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@0 MapRemove_s._default.MapRemove1$V@@0 $LZ |m#0@@7| |k#0@@15|))) :qid |unknown.0:0| :skolemid |4553| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@0 MapRemove_s._default.MapRemove1$V@@0 (AsFuelBottom $ly@@378) |m#0@@7| |k#0@@15|)) )))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@1 T@U) (MapRemove_s._default.MapRemove1$V@@1 T@U) ($ly@@379 T@U) (|m#0@@8| T@U) (|k#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@1) TyType) (= (type MapRemove_s._default.MapRemove1$V@@1) TyType)) (= (type $ly@@379) LayerTypeType)) (= (type |m#0@@8|) (MapType BoxType BoxType))) (= (type |k#0@@16|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 |m#0@@8| |k#0@@16|) (and ($Is |m#0@@8| (TMap MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1)) ($IsBox |k#0@@16| MapRemove_s._default.MapRemove1$K@@1)))) (and (and (and (and (and (and (forall ((|j#0@@17| T@U) ) (!  (=> (and (and (= (type |j#0@@17|) BoxType) ($IsBox |j#0@@17| MapRemove_s._default.MapRemove1$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@8|) |j#0@@17|)) (not (= |j#0@@17| |k#0@@16|)))) (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@379 |m#0@@8| |k#0@@16|)) |j#0@@17|))) :qid |MapRemovesdfy.15:20| :skolemid |4554| :pattern ( (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@379 |m#0@@8| |k#0@@16|)) |j#0@@17|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@8|) |j#0@@17|)) )) (forall ((|j#1@@11| T@U) ) (!  (=> (and (= (type |j#1@@11|) BoxType) ($IsBox |j#1@@11| MapRemove_s._default.MapRemove1$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@379 |m#0@@8| |k#0@@16|)) |j#1@@11|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@8|) |j#1@@11|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@379 |m#0@@8| |k#0@@16|)) |j#1@@11|)) (not (= |j#1@@11| |k#0@@16|))))) :qid |MapRemovesdfy.16:20| :skolemid |4555| :pattern ( (MapType0Select (|Map#Domain| |m#0@@8|) |j#1@@11|)) :pattern ( (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@379 |m#0@@8| |k#0@@16|)) |j#1@@11|)) ))) (forall ((|j#2@@0| T@U) ) (!  (=> (and (and (= (type |j#2@@0|) BoxType) ($IsBox |j#2@@0| MapRemove_s._default.MapRemove1$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@379 |m#0@@8| |k#0@@16|)) |j#2@@0|))) (= (MapType0Select (|Map#Elements| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@379 |m#0@@8| |k#0@@16|)) |j#2@@0|) (MapType0Select (|Map#Elements| |m#0@@8|) |j#2@@0|))) :qid |MapRemovesdfy.17:20| :skolemid |4556| :pattern ( (MapType0Select (|Map#Elements| |m#0@@8|) |j#2@@0|)) :pattern ( (MapType0Select (|Map#Elements| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@379 |m#0@@8| |k#0@@16|)) |j#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@379 |m#0@@8| |k#0@@16|)) |j#2@@0|)) ))) (<= (|Set#Card| (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@379 |m#0@@8| |k#0@@16|))) (|Set#Card| (|Map#Domain| |m#0@@8|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@8|) |k#0@@16|)) (= (|Map#Card| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@379 |m#0@@8| |k#0@@16|)) (- (|Map#Card| |m#0@@8|) 1)))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@8|) |k#0@@16|))) (= (|Map#Card| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@379 |m#0@@8| |k#0@@16|)) (|Map#Card| |m#0@@8|)))) ($Is (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@379 |m#0@@8| |k#0@@16|) (TMap MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |4557| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@379 |m#0@@8| |k#0@@16|)) ))))
(assert (forall ((MapRemove_s._default.MapRemove1$K@@2 T@U) (MapRemove_s._default.MapRemove1$V@@2 T@U) ($ly@@380 T@U) (|m#0@@9| T@U) (|k#0@@17| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@2) TyType) (= (type MapRemove_s._default.MapRemove1$V@@2) TyType)) (= (type $ly@@380) LayerTypeType)) (= (type |m#0@@9|) (MapType BoxType BoxType))) (= (type |k#0@@17|) BoxType)) (and ($Is |m#0@@9| (TMap MapRemove_s._default.MapRemove1$K@@2 MapRemove_s._default.MapRemove1$V@@2)) ($IsBox |k#0@@17| MapRemove_s._default.MapRemove1$K@@2))) (= (|MapRemove_s.__default.MapRemove1#requires| MapRemove_s._default.MapRemove1$K@@2 MapRemove_s._default.MapRemove1$V@@2 $ly@@380 |m#0@@9| |k#0@@17|) true)) :qid |unknown.0:0| :skolemid |4558| :pattern ( (|MapRemove_s.__default.MapRemove1#requires| MapRemove_s._default.MapRemove1$K@@2 MapRemove_s._default.MapRemove1$V@@2 $ly@@380 |m#0@@9| |k#0@@17|)) )))
(assert (forall ((arg0@@344 T@U) (arg1@@193 T@U) (arg2@@126 T@U) ) (! (= (type (|lambda#241| arg0@@344 arg1@@193 arg2@@126)) (MapType0Type BoxType boolType)) :qid |funType:lambda#241| :pattern ( (|lambda#241| arg0@@344 arg1@@193 arg2@@126)) )))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@3 T@U) (MapRemove_s._default.MapRemove1$V@@3 T@U) ($ly@@381 T@U) (|m#0@@10| T@U) (|k#0@@18| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@3) TyType) (= (type MapRemove_s._default.MapRemove1$V@@3) TyType)) (= (type $ly@@381) LayerTypeType)) (= (type |m#0@@10|) (MapType BoxType BoxType))) (= (type |k#0@@18|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3 |m#0@@10| |k#0@@18|) (and ($Is |m#0@@10| (TMap MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3)) ($IsBox |k#0@@18| MapRemove_s._default.MapRemove1$K@@3)))) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3 ($LS $ly@@381) |m#0@@10| |k#0@@18|) (let ((|m'#0| (|Map#Glue| (|lambda#241| MapRemove_s._default.MapRemove1$K@@3 (|Map#Domain| |m#0@@10|) |k#0@@18|) (|lambda#146| (|Map#Elements| |m#0@@10|)) (TMap MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3)))) |m'#0|))) :qid |unknown.0:0| :skolemid |4559| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3 ($LS $ly@@381) |m#0@@10| |k#0@@18|)) ))))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@4 T@U) (MapRemove_s._default.MapRemove1$V@@4 T@U) ($ly@@382 T@U) (|m#0@@11| T@U) (|k#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@4) TyType) (= (type MapRemove_s._default.MapRemove1$V@@4) TyType)) (= (type $ly@@382) LayerTypeType)) (= (type |m#0@@11|) (MapType BoxType BoxType))) (= (type |k#0@@19|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4 (Lit |m#0@@11|) |k#0@@19|) (and ($Is |m#0@@11| (TMap MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4)) ($IsBox |k#0@@19| MapRemove_s._default.MapRemove1$K@@4)))) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4 ($LS $ly@@382) (Lit |m#0@@11|) |k#0@@19|) (let ((|m'#1| (|Map#Glue| (|lambda#241| MapRemove_s._default.MapRemove1$K@@4 (|Map#Domain| |m#0@@11|) |k#0@@19|) (|lambda#146| (|Map#Elements| (Lit |m#0@@11|))) (TMap MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4)))) |m'#1|))) :qid |unknown.0:0| :weight 3 :skolemid |4560| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4 ($LS $ly@@382) (Lit |m#0@@11|) |k#0@@19|)) ))))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@5 T@U) (MapRemove_s._default.MapRemove1$V@@5 T@U) ($ly@@383 T@U) (|m#0@@12| T@U) (|k#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@5) TyType) (= (type MapRemove_s._default.MapRemove1$V@@5) TyType)) (= (type $ly@@383) LayerTypeType)) (= (type |m#0@@12|) (MapType BoxType BoxType))) (= (type |k#0@@20|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5 (Lit |m#0@@12|) (Lit |k#0@@20|)) (and ($Is |m#0@@12| (TMap MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5)) ($IsBox |k#0@@20| MapRemove_s._default.MapRemove1$K@@5)))) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5 ($LS $ly@@383) (Lit |m#0@@12|) (Lit |k#0@@20|)) (let ((|m'#2| (|Map#Glue| (|lambda#241| MapRemove_s._default.MapRemove1$K@@5 (|Map#Domain| |m#0@@12|) |k#0@@20|) (|lambda#146| (|Map#Elements| (Lit |m#0@@12|))) (TMap MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5)))) |m'#2|))) :qid |unknown.0:0| :weight 3 :skolemid |4561| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5 ($LS $ly@@383) (Lit |m#0@@12|) (Lit |k#0@@20|))) ))))
(assert (= (type Tclass.Maps.__default) TyType))
(assert (= (Tag Tclass.Maps.__default) Tagclass.Maps.__default))
(assert (= (TagFamily Tclass.Maps.__default) tytagFamily$_default))
(assert (forall ((bx@@102 T@U) ) (!  (=> (and (= (type bx@@102) BoxType) ($IsBox bx@@102 Tclass.Maps.__default)) (and (= ($Box ($Unbox refType bx@@102)) bx@@102) ($Is ($Unbox refType bx@@102) Tclass.Maps.__default))) :qid |unknown.0:0| :skolemid |4562| :pattern ( ($IsBox bx@@102 Tclass.Maps.__default)) )))
(assert (forall (($o@@30 T@U) ) (!  (=> (= (type $o@@30) refType) (= ($Is $o@@30 Tclass.Maps.__default)  (or (= $o@@30 null) (= (dtype $o@@30) Tclass.Maps.__default)))) :qid |unknown.0:0| :skolemid |4563| :pattern ( ($Is $o@@30 Tclass.Maps.__default)) )))
(assert (forall (($o@@31 T@U) ($h@@79 T@U) ) (!  (=> (and (= (type $o@@31) refType) (= (type $h@@79) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@31 Tclass.Maps.__default $h@@79)  (or (= $o@@31 null) (U_2_bool (MapType1Select (MapType0Select $h@@79 $o@@31) alloc))))) :qid |unknown.0:0| :skolemid |4564| :pattern ( ($IsAlloc $o@@31 Tclass.Maps.__default $h@@79)) )))
(assert  (=> true (forall ((Maps._default.IMapsTo$K T@U) (Maps._default.IMapsTo$V T@U) (|m#0@@13| T@U) (|k#0@@21| T@U) (|v#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K) TyType) (= (type Maps._default.IMapsTo$V) TyType)) (= (type |m#0@@13|) (IMapType BoxType BoxType))) (= (type |k#0@@21|) BoxType)) (= (type |v#0@@15|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0@@13| |k#0@@21| |v#0@@15|) (and (and ($Is |m#0@@13| (TIMap Maps._default.IMapsTo$K Maps._default.IMapsTo$V)) ($IsBox |k#0@@21| Maps._default.IMapsTo$K)) ($IsBox |v#0@@15| Maps._default.IMapsTo$V)))) true) :qid |unknown.0:0| :skolemid |4565| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0@@13| |k#0@@21| |v#0@@15|)) ))))
(assert (forall ((Maps._default.IMapsTo$K@@0 T@U) (Maps._default.IMapsTo$V@@0 T@U) (|m#0@@14| T@U) (|k#0@@22| T@U) (|v#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@0) TyType) (= (type Maps._default.IMapsTo$V@@0) TyType)) (= (type |m#0@@14|) (IMapType BoxType BoxType))) (= (type |k#0@@22|) BoxType)) (= (type |v#0@@16|) BoxType)) (and (and ($Is |m#0@@14| (TIMap Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0)) ($IsBox |k#0@@22| Maps._default.IMapsTo$K@@0)) ($IsBox |v#0@@16| Maps._default.IMapsTo$V@@0))) (= (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@14| |k#0@@22| |v#0@@16|) true)) :qid |unknown.0:0| :skolemid |4566| :pattern ( (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@14| |k#0@@22| |v#0@@16|)) )))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@1 T@U) (Maps._default.IMapsTo$V@@1 T@U) (|m#0@@15| T@U) (|k#0@@23| T@U) (|v#0@@17| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@1) TyType) (= (type Maps._default.IMapsTo$V@@1) TyType)) (= (type |m#0@@15|) (IMapType BoxType BoxType))) (= (type |k#0@@23|) BoxType)) (= (type |v#0@@17|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@15| |k#0@@23| |v#0@@17|) (and (and ($Is |m#0@@15| (TIMap Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1)) ($IsBox |k#0@@23| Maps._default.IMapsTo$K@@1)) ($IsBox |v#0@@17| Maps._default.IMapsTo$V@@1)))) (= (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@15| |k#0@@23| |v#0@@17|)  (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@15|) |k#0@@23|)) (= (MapType0Select (|IMap#Elements| |m#0@@15|) |k#0@@23|) |v#0@@17|)))) :qid |unknown.0:0| :skolemid |4567| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@15| |k#0@@23| |v#0@@17|)) ))))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@2 T@U) (Maps._default.IMapsTo$V@@2 T@U) (|m#0@@16| T@U) (|k#0@@24| T@U) (|v#0@@18| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@2) TyType) (= (type Maps._default.IMapsTo$V@@2) TyType)) (= (type |m#0@@16|) (IMapType BoxType BoxType))) (= (type |k#0@@24|) BoxType)) (= (type |v#0@@18|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@16|) (Lit |k#0@@24|) (Lit |v#0@@18|)) (and (and ($Is |m#0@@16| (TIMap Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2)) ($IsBox |k#0@@24| Maps._default.IMapsTo$K@@2)) ($IsBox |v#0@@18| Maps._default.IMapsTo$V@@2)))) (= (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@16|) (Lit |k#0@@24|) (Lit |v#0@@18|))  (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@16|) |k#0@@24|)) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@16|)) (Lit |k#0@@24|)) (Lit |v#0@@18|))))) :qid |unknown.0:0| :weight 3 :skolemid |4568| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@16|) (Lit |k#0@@24|) (Lit |v#0@@18|))) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K T@U) (Maps._default.MapsTo$V T@U) (|m#0@@17| T@U) (|k#0@@25| T@U) (|v#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K) TyType) (= (type Maps._default.MapsTo$V) TyType)) (= (type |m#0@@17|) (MapType BoxType BoxType))) (= (type |k#0@@25|) BoxType)) (= (type |v#0@@19|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@17| |k#0@@25| |v#0@@19|) (and (and ($Is |m#0@@17| (TMap Maps._default.MapsTo$K Maps._default.MapsTo$V)) ($IsBox |k#0@@25| Maps._default.MapsTo$K)) ($IsBox |v#0@@19| Maps._default.MapsTo$V)))) true) :qid |unknown.0:0| :skolemid |4569| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@17| |k#0@@25| |v#0@@19|)) ))))
(assert (forall ((Maps._default.MapsTo$K@@0 T@U) (Maps._default.MapsTo$V@@0 T@U) (|m#0@@18| T@U) (|k#0@@26| T@U) (|v#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@0) TyType) (= (type Maps._default.MapsTo$V@@0) TyType)) (= (type |m#0@@18|) (MapType BoxType BoxType))) (= (type |k#0@@26|) BoxType)) (= (type |v#0@@20|) BoxType)) (and (and ($Is |m#0@@18| (TMap Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0)) ($IsBox |k#0@@26| Maps._default.MapsTo$K@@0)) ($IsBox |v#0@@20| Maps._default.MapsTo$V@@0))) (= (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@18| |k#0@@26| |v#0@@20|) true)) :qid |unknown.0:0| :skolemid |4570| :pattern ( (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@18| |k#0@@26| |v#0@@20|)) )))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@1 T@U) (Maps._default.MapsTo$V@@1 T@U) (|m#0@@19| T@U) (|k#0@@27| T@U) (|v#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@1) TyType) (= (type Maps._default.MapsTo$V@@1) TyType)) (= (type |m#0@@19|) (MapType BoxType BoxType))) (= (type |k#0@@27|) BoxType)) (= (type |v#0@@21|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@19| |k#0@@27| |v#0@@21|) (and (and ($Is |m#0@@19| (TMap Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1)) ($IsBox |k#0@@27| Maps._default.MapsTo$K@@1)) ($IsBox |v#0@@21| Maps._default.MapsTo$V@@1)))) (= (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@19| |k#0@@27| |v#0@@21|)  (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@19|) |k#0@@27|)) (= (MapType0Select (|Map#Elements| |m#0@@19|) |k#0@@27|) |v#0@@21|)))) :qid |unknown.0:0| :skolemid |4571| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@19| |k#0@@27| |v#0@@21|)) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@2 T@U) (Maps._default.MapsTo$V@@2 T@U) (|m#0@@20| T@U) (|k#0@@28| T@U) (|v#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@2) TyType) (= (type Maps._default.MapsTo$V@@2) TyType)) (= (type |m#0@@20|) (MapType BoxType BoxType))) (= (type |k#0@@28|) BoxType)) (= (type |v#0@@22|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@20|) |k#0@@28| |v#0@@22|) (and (and ($Is |m#0@@20| (TMap Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2)) ($IsBox |k#0@@28| Maps._default.MapsTo$K@@2)) ($IsBox |v#0@@22| Maps._default.MapsTo$V@@2)))) (= (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@20|) |k#0@@28| |v#0@@22|)  (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@20|) |k#0@@28|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@20|)) |k#0@@28|) |v#0@@22|)))) :qid |unknown.0:0| :weight 3 :skolemid |4572| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@20|) |k#0@@28| |v#0@@22|)) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@3 T@U) (Maps._default.MapsTo$V@@3 T@U) (|m#0@@21| T@U) (|k#0@@29| T@U) (|v#0@@23| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@3) TyType) (= (type Maps._default.MapsTo$V@@3) TyType)) (= (type |m#0@@21|) (MapType BoxType BoxType))) (= (type |k#0@@29|) BoxType)) (= (type |v#0@@23|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@21|) (Lit |k#0@@29|) (Lit |v#0@@23|)) (and (and ($Is |m#0@@21| (TMap Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3)) ($IsBox |k#0@@29| Maps._default.MapsTo$K@@3)) ($IsBox |v#0@@23| Maps._default.MapsTo$V@@3)))) (= (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@21|) (Lit |k#0@@29|) (Lit |v#0@@23|))  (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@21|) |k#0@@29|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@21|)) (Lit |k#0@@29|)) (Lit |v#0@@23|))))) :qid |unknown.0:0| :weight 3 :skolemid |4573| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@21|) (Lit |k#0@@29|) (Lit |v#0@@23|))) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K T@U) (Maps._default.MapsAgreeOnKey$V T@U) (|m#0@@22| T@U) (|m'#0@@0| T@U) (|k#0@@30| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K) TyType) (= (type Maps._default.MapsAgreeOnKey$V) TyType)) (= (type |m#0@@22|) (MapType BoxType BoxType))) (= (type |m'#0@@0|) (MapType BoxType BoxType))) (= (type |k#0@@30|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@22| |m'#0@@0| |k#0@@30|) (and (and ($Is |m#0@@22| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V)) ($Is |m'#0@@0| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V))) ($IsBox |k#0@@30| Maps._default.MapsAgreeOnKey$K)))) true) :qid |unknown.0:0| :skolemid |4574| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@22| |m'#0@@0| |k#0@@30|)) ))))
(assert (forall ((Maps._default.MapsAgreeOnKey$K@@0 T@U) (Maps._default.MapsAgreeOnKey$V@@0 T@U) (|m#0@@23| T@U) (|m'#0@@1| T@U) (|k#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@23|) (MapType BoxType BoxType))) (= (type |m'#0@@1|) (MapType BoxType BoxType))) (= (type |k#0@@31|) BoxType)) (and (and ($Is |m#0@@23| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0)) ($Is |m'#0@@1| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0))) ($IsBox |k#0@@31| Maps._default.MapsAgreeOnKey$K@@0))) (= (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@23| |m'#0@@1| |k#0@@31|) true)) :qid |unknown.0:0| :skolemid |4575| :pattern ( (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@23| |m'#0@@1| |k#0@@31|)) )))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@1 T@U) (Maps._default.MapsAgreeOnKey$V@@1 T@U) (|m#0@@24| T@U) (|m'#0@@2| T@U) (|k#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@24|) (MapType BoxType BoxType))) (= (type |m'#0@@2|) (MapType BoxType BoxType))) (= (type |k#0@@32|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@24| |m'#0@@2| |k#0@@32|) (and (and ($Is |m#0@@24| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1)) ($Is |m'#0@@2| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1))) ($IsBox |k#0@@32| Maps._default.MapsAgreeOnKey$K@@1)))) (= (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@24| |m'#0@@2| |k#0@@32|)  (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@24|) |k#0@@32|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@32|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@24|) |k#0@@32|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@32|))) (= (MapType0Select (|Map#Elements| |m#0@@24|) |k#0@@32|) (MapType0Select (|Map#Elements| |m'#0@@2|) |k#0@@32|)))))) :qid |unknown.0:0| :skolemid |4576| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@24| |m'#0@@2| |k#0@@32|)) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@2 T@U) (Maps._default.MapsAgreeOnKey$V@@2 T@U) (|m#0@@25| T@U) (|m'#0@@3| T@U) (|k#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@25|) (MapType BoxType BoxType))) (= (type |m'#0@@3|) (MapType BoxType BoxType))) (= (type |k#0@@33|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@25|) (Lit |m'#0@@3|) |k#0@@33|) (and (and ($Is |m#0@@25| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2)) ($Is |m'#0@@3| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2))) ($IsBox |k#0@@33| Maps._default.MapsAgreeOnKey$K@@2)))) (= (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@25|) (Lit |m'#0@@3|) |k#0@@33|)  (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@25|) |k#0@@33|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@33|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@25|) |k#0@@33|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@33|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@25|)) |k#0@@33|) (MapType0Select (|Map#Elements| (Lit |m'#0@@3|)) |k#0@@33|)))))) :qid |unknown.0:0| :weight 3 :skolemid |4577| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@25|) (Lit |m'#0@@3|) |k#0@@33|)) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@3 T@U) (Maps._default.MapsAgreeOnKey$V@@3 T@U) (|m#0@@26| T@U) (|m'#0@@4| T@U) (|k#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@3) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@3) TyType)) (= (type |m#0@@26|) (MapType BoxType BoxType))) (= (type |m'#0@@4|) (MapType BoxType BoxType))) (= (type |k#0@@34|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@26|) (Lit |m'#0@@4|) (Lit |k#0@@34|)) (and (and ($Is |m#0@@26| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3)) ($Is |m'#0@@4| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3))) ($IsBox |k#0@@34| Maps._default.MapsAgreeOnKey$K@@3)))) (= (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@26|) (Lit |m'#0@@4|) (Lit |k#0@@34|))  (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@26|) |k#0@@34|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@4|) |k#0@@34|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@26|) |k#0@@34|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@4|) |k#0@@34|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@26|)) (Lit |k#0@@34|)) (MapType0Select (|Map#Elements| (Lit |m'#0@@4|)) (Lit |k#0@@34|))))))) :qid |unknown.0:0| :weight 3 :skolemid |4578| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@26|) (Lit |m'#0@@4|) (Lit |k#0@@34|))) ))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K T@U) (Maps._default.IMapsAgreeOnKey$V T@U) (|m#0@@27| T@U) (|m'#0@@5| T@U) (|k#0@@35| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K) TyType) (= (type Maps._default.IMapsAgreeOnKey$V) TyType)) (= (type |m#0@@27|) (IMapType BoxType BoxType))) (= (type |m'#0@@5|) (IMapType BoxType BoxType))) (= (type |k#0@@35|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@27| |m'#0@@5| |k#0@@35|) (and (and ($Is |m#0@@27| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V)) ($Is |m'#0@@5| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V))) ($IsBox |k#0@@35| Maps._default.IMapsAgreeOnKey$K)))) true) :qid |unknown.0:0| :skolemid |4579| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@27| |m'#0@@5| |k#0@@35|)) ))))
(assert (forall ((Maps._default.IMapsAgreeOnKey$K@@0 T@U) (Maps._default.IMapsAgreeOnKey$V@@0 T@U) (|m#0@@28| T@U) (|m'#0@@6| T@U) (|k#0@@36| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@28|) (IMapType BoxType BoxType))) (= (type |m'#0@@6|) (IMapType BoxType BoxType))) (= (type |k#0@@36|) BoxType)) (and (and ($Is |m#0@@28| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0)) ($Is |m'#0@@6| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0))) ($IsBox |k#0@@36| Maps._default.IMapsAgreeOnKey$K@@0))) (= (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@28| |m'#0@@6| |k#0@@36|) true)) :qid |unknown.0:0| :skolemid |4580| :pattern ( (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@28| |m'#0@@6| |k#0@@36|)) )))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@1 T@U) (Maps._default.IMapsAgreeOnKey$V@@1 T@U) (|m#0@@29| T@U) (|m'#0@@7| T@U) (|k#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@29|) (IMapType BoxType BoxType))) (= (type |m'#0@@7|) (IMapType BoxType BoxType))) (= (type |k#0@@37|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@29| |m'#0@@7| |k#0@@37|) (and (and ($Is |m#0@@29| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1)) ($Is |m'#0@@7| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1))) ($IsBox |k#0@@37| Maps._default.IMapsAgreeOnKey$K@@1)))) (= (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@29| |m'#0@@7| |k#0@@37|)  (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@29|) |k#0@@37|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@37|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@29|) |k#0@@37|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@37|))) (= (MapType0Select (|IMap#Elements| |m#0@@29|) |k#0@@37|) (MapType0Select (|IMap#Elements| |m'#0@@7|) |k#0@@37|)))))) :qid |unknown.0:0| :skolemid |4581| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@29| |m'#0@@7| |k#0@@37|)) ))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@2 T@U) (Maps._default.IMapsAgreeOnKey$V@@2 T@U) (|m#0@@30| T@U) (|m'#0@@8| T@U) (|k#0@@38| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@30|) (IMapType BoxType BoxType))) (= (type |m'#0@@8|) (IMapType BoxType BoxType))) (= (type |k#0@@38|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@30|) (Lit |m'#0@@8|) (Lit |k#0@@38|)) (and (and ($Is |m#0@@30| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2)) ($Is |m'#0@@8| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2))) ($IsBox |k#0@@38| Maps._default.IMapsAgreeOnKey$K@@2)))) (= (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@30|) (Lit |m'#0@@8|) (Lit |k#0@@38|))  (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@30|) |k#0@@38|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@8|) |k#0@@38|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@30|) |k#0@@38|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@8|) |k#0@@38|))) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@30|)) (Lit |k#0@@38|)) (MapType0Select (|IMap#Elements| (Lit |m'#0@@8|)) (Lit |k#0@@38|))))))) :qid |unknown.0:0| :weight 3 :skolemid |4582| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@30|) (Lit |m'#0@@8|) (Lit |k#0@@38|))) ))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K T@U) (Maps._default.IsSubIMap$V T@U) (|sub#0| T@U) (|sup#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K) TyType) (= (type Maps._default.IsSubIMap$V) TyType)) (= (type |sub#0|) (IMapType BoxType BoxType))) (= (type |sup#0|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0| |sup#0|) (and ($Is |sub#0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V)) ($Is |sup#0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V))))) true) :qid |unknown.0:0| :skolemid |4583| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0| |sup#0|)) ))))
(assert (forall ((Maps._default.IsSubIMap$K@@0 T@U) (Maps._default.IsSubIMap$V@@0 T@U) (|sub#0@@0| T@U) (|sup#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@0) TyType) (= (type Maps._default.IsSubIMap$V@@0) TyType)) (= (type |sub#0@@0|) (IMapType BoxType BoxType))) (= (type |sup#0@@0|) (IMapType BoxType BoxType))) (and ($Is |sub#0@@0| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)) ($Is |sup#0@@0| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)))) (= (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|) true)) :qid |unknown.0:0| :skolemid |4584| :pattern ( (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@1 T@U) (Maps._default.IsSubIMap$V@@1 T@U) (|sub#0@@1| T@U) (|sup#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@1) TyType) (= (type Maps._default.IsSubIMap$V@@1) TyType)) (= (type |sub#0@@1|) (IMapType BoxType BoxType))) (= (type |sup#0@@1|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|) (and ($Is |sub#0@@1| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1)) ($Is |sup#0@@1| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1))))) (and (=> (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0@@98| T@U) ) (!  (=> (and (and (= (type |key#0@@98|) BoxType) ($IsBox |key#0@@98| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@98|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@98|)) :qid |Mapsidfy.31:16| :skolemid |4586| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@98|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@98|)) ))) (= (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|)  (and (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0@@99| T@U) ) (!  (=> (and (and (= (type |key#0@@99|) BoxType) ($IsBox |key#0@@99| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@99|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@99|)) :qid |Mapsidfy.31:16| :skolemid |4585| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@99|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@99|)) )))))) :qid |unknown.0:0| :skolemid |4587| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|)) ))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@2 T@U) (Maps._default.IsSubIMap$V@@2 T@U) (|sub#0@@2| T@U) (|sup#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@2) TyType) (= (type Maps._default.IsSubIMap$V@@2) TyType)) (= (type |sub#0@@2|) (IMapType BoxType BoxType))) (= (type |sup#0@@2|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)) (and ($Is |sub#0@@2| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2)) ($Is |sup#0@@2| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2))))) (and (=> (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1@@8| T@U) ) (!  (=> (and (and (= (type |key#1@@8|) BoxType) ($IsBox |key#1@@8| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#1@@8|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#1@@8|)) :qid |Mapsidfy.31:16| :skolemid |4589| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#1@@8|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#1@@8|)) ))) (= (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|))  (and (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1@@9| T@U) ) (!  (=> (and (and (= (type |key#1@@9|) BoxType) ($IsBox |key#1@@9| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#1@@9|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#1@@9|)) :qid |Mapsidfy.31:16| :skolemid |4588| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#1@@9|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#1@@9|)) )))))) :qid |unknown.0:0| :weight 3 :skolemid |4590| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|))) ))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K T@U) (Maps._default.IsSubMap$V T@U) (|sub#0@@3| T@U) (|sup#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K) TyType) (= (type Maps._default.IsSubMap$V) TyType)) (= (type |sub#0@@3|) (MapType BoxType BoxType))) (= (type |sup#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@3| |sup#0@@3|) (and ($Is |sub#0@@3| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V)) ($Is |sup#0@@3| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V))))) true) :qid |unknown.0:0| :skolemid |4591| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@3| |sup#0@@3|)) ))))
(assert (forall ((Maps._default.IsSubMap$K@@0 T@U) (Maps._default.IsSubMap$V@@0 T@U) (|sub#0@@4| T@U) (|sup#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@0) TyType) (= (type Maps._default.IsSubMap$V@@0) TyType)) (= (type |sub#0@@4|) (MapType BoxType BoxType))) (= (type |sup#0@@4|) (MapType BoxType BoxType))) (and ($Is |sub#0@@4| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)) ($Is |sup#0@@4| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)))) (= (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|) true)) :qid |unknown.0:0| :skolemid |4592| :pattern ( (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|)) )))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@1 T@U) (Maps._default.IsSubMap$V@@1 T@U) (|sub#0@@5| T@U) (|sup#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@1) TyType) (= (type Maps._default.IsSubMap$V@@1) TyType)) (= (type |sub#0@@5|) (MapType BoxType BoxType))) (= (type |sup#0@@5|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|) (and ($Is |sub#0@@5| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1)) ($Is |sup#0@@5| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1))))) (and (=> (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@100| T@U) ) (!  (=> (and (and (= (type |key#0@@100|) BoxType) ($IsBox |key#0@@100| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@100|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@100|)) :qid |Mapsidfy.36:16| :skolemid |4594| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@100|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@100|)) ))) (= (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|)  (and (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@101| T@U) ) (!  (=> (and (and (= (type |key#0@@101|) BoxType) ($IsBox |key#0@@101| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@101|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@101|)) :qid |Mapsidfy.36:16| :skolemid |4593| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@101|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@101|)) )))))) :qid |unknown.0:0| :skolemid |4595| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|)) ))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@2 T@U) (Maps._default.IsSubMap$V@@2 T@U) (|sub#0@@6| T@U) (|sup#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@2) TyType) (= (type Maps._default.IsSubMap$V@@2) TyType)) (= (type |sub#0@@6|) (MapType BoxType BoxType))) (= (type |sup#0@@6|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)) (and ($Is |sub#0@@6| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2)) ($Is |sup#0@@6| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2))))) (and (=> (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@10| T@U) ) (!  (=> (and (and (= (type |key#1@@10|) BoxType) ($IsBox |key#1@@10| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#1@@10|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#1@@10|)) :qid |Mapsidfy.36:16| :skolemid |4597| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#1@@10|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#1@@10|)) ))) (= (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|))  (and (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@11| T@U) ) (!  (=> (and (and (= (type |key#1@@11|) BoxType) ($IsBox |key#1@@11| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#1@@11|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#1@@11|)) :qid |Mapsidfy.36:16| :skolemid |4596| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#1@@11|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#1@@11|)) )))))) :qid |unknown.0:0| :weight 3 :skolemid |4598| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|))) ))))
(assert (forall ((arg0@@345 T@U) (arg1@@194 T@U) (arg2@@127 T@U) (arg3@@78 T@U) (arg4@@51 T@U) ) (! (= (type (Maps.__default.MapRemove arg0@@345 arg1@@194 arg2@@127 arg3@@78 arg4@@51)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove| :pattern ( (Maps.__default.MapRemove arg0@@345 arg1@@194 arg2@@127 arg3@@78 arg4@@51)) )))
(assert (forall ((Maps._default.MapRemove$K T@U) (Maps._default.MapRemove$V T@U) ($ly@@384 T@U) (|m#0@@31| T@U) (|ks#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K) TyType) (= (type Maps._default.MapRemove$V) TyType)) (= (type $ly@@384) LayerTypeType)) (= (type |m#0@@31|) (MapType BoxType BoxType))) (= (type |ks#0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@384) |m#0@@31| |ks#0|) (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V $ly@@384 |m#0@@31| |ks#0|))) :qid |unknown.0:0| :skolemid |4599| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@384) |m#0@@31| |ks#0|)) )))
(assert (forall ((Maps._default.MapRemove$K@@0 T@U) (Maps._default.MapRemove$V@@0 T@U) ($ly@@385 T@U) (|m#0@@32| T@U) (|ks#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K@@0) TyType) (= (type Maps._default.MapRemove$V@@0) TyType)) (= (type $ly@@385) LayerTypeType)) (= (type |m#0@@32|) (MapType BoxType BoxType))) (= (type |ks#0@@0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $ly@@385 |m#0@@32| |ks#0@@0|) (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $LZ |m#0@@32| |ks#0@@0|))) :qid |unknown.0:0| :skolemid |4600| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 (AsFuelBottom $ly@@385) |m#0@@32| |ks#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@1 T@U) (Maps._default.MapRemove$V@@1 T@U) ($ly@@386 T@U) (|m#0@@33| T@U) (|ks#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@1) TyType) (= (type Maps._default.MapRemove$V@@1) TyType)) (= (type $ly@@386) LayerTypeType)) (= (type |m#0@@33|) (MapType BoxType BoxType))) (= (type |ks#0@@1|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 |m#0@@33| |ks#0@@1|) (and ($Is |m#0@@33| (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1)) ($Is |ks#0@@1| (TSet Maps._default.MapRemove$K@@1))))) (and (and (and (and (and (forall ((|k#0@@39| T@U) ) (!  (=> (and (and (= (type |k#0@@39|) BoxType) ($IsBox |k#0@@39| Maps._default.MapRemove$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@33|) |k#0@@39|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#0@@39|))))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@386 |m#0@@33| |ks#0@@1|)) |k#0@@39|))) :qid |Mapsidfy.40:20| :skolemid |4601| :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@386 |m#0@@33| |ks#0@@1|)) |k#0@@39|)) :pattern ( (MapType0Select |ks#0@@1| |k#0@@39|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@33|) |k#0@@39|)) )) (forall ((|k#1| T@U) ) (!  (=> (and (= (type |k#1|) BoxType) ($IsBox |k#1| Maps._default.MapRemove$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@386 |m#0@@33| |ks#0@@1|)) |k#1|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@33|) |k#1|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@386 |m#0@@33| |ks#0@@1|)) |k#1|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#1|)))))) :qid |Mapsidfy.41:20| :skolemid |4602| :pattern ( (MapType0Select |ks#0@@1| |k#1|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@33|) |k#1|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@386 |m#0@@33| |ks#0@@1|)) |k#1|)) ))) (forall ((|j#0@@18| T@U) ) (!  (=> (and (and (= (type |j#0@@18|) BoxType) ($IsBox |j#0@@18| Maps._default.MapRemove$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@386 |m#0@@33| |ks#0@@1|)) |j#0@@18|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@386 |m#0@@33| |ks#0@@1|)) |j#0@@18|) (MapType0Select (|Map#Elements| |m#0@@33|) |j#0@@18|))) :qid |Mapsidfy.42:20| :skolemid |4603| :pattern ( (MapType0Select (|Map#Elements| |m#0@@33|) |j#0@@18|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@386 |m#0@@33| |ks#0@@1|)) |j#0@@18|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@386 |m#0@@33| |ks#0@@1|)) |j#0@@18|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@386 |m#0@@33| |ks#0@@1|))) (|Set#Card| (|Map#Domain| |m#0@@33|)))) (<= (|Map#Card| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@386 |m#0@@33| |ks#0@@1|)) (|Map#Card| |m#0@@33|))) ($Is (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@386 |m#0@@33| |ks#0@@1|) (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1)))) :qid |unknown.0:0| :skolemid |4604| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@386 |m#0@@33| |ks#0@@1|)) ))))
(assert (forall ((Maps._default.MapRemove$K@@2 T@U) (Maps._default.MapRemove$V@@2 T@U) ($ly@@387 T@U) (|m#0@@34| T@U) (|ks#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@2) TyType) (= (type Maps._default.MapRemove$V@@2) TyType)) (= (type $ly@@387) LayerTypeType)) (= (type |m#0@@34|) (MapType BoxType BoxType))) (= (type |ks#0@@2|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@34| (TMap Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2)) ($Is |ks#0@@2| (TSet Maps._default.MapRemove$K@@2)))) (= (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@387 |m#0@@34| |ks#0@@2|) true)) :qid |unknown.0:0| :skolemid |4605| :pattern ( (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@387 |m#0@@34| |ks#0@@2|)) )))
(assert (forall ((arg0@@346 T@U) (arg1@@195 T@U) (arg2@@128 T@U) ) (! (= (type (|lambda#247| arg0@@346 arg1@@195 arg2@@128)) (MapType0Type BoxType boolType)) :qid |funType:lambda#247| :pattern ( (|lambda#247| arg0@@346 arg1@@195 arg2@@128)) )))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@3 T@U) (Maps._default.MapRemove$V@@3 T@U) ($ly@@388 T@U) (|m#0@@35| T@U) (|ks#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@3) TyType) (= (type Maps._default.MapRemove$V@@3) TyType)) (= (type $ly@@388) LayerTypeType)) (= (type |m#0@@35|) (MapType BoxType BoxType))) (= (type |ks#0@@3|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 |m#0@@35| |ks#0@@3|) (and ($Is |m#0@@35| (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3)) ($Is |ks#0@@3| (TSet Maps._default.MapRemove$K@@3))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@388) |m#0@@35| |ks#0@@3|) (let ((|m'#0@@9| (|Map#Glue| (|lambda#247| Maps._default.MapRemove$K@@3 (|Map#Domain| |m#0@@35|) |ks#0@@3|) (|lambda#146| (|Map#Elements| |m#0@@35|)) (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3)))) |m'#0@@9|))) :qid |unknown.0:0| :skolemid |4606| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@388) |m#0@@35| |ks#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@4 T@U) (Maps._default.MapRemove$V@@4 T@U) ($ly@@389 T@U) (|m#0@@36| T@U) (|ks#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@4) TyType) (= (type Maps._default.MapRemove$V@@4) TyType)) (= (type $ly@@389) LayerTypeType)) (= (type |m#0@@36|) (MapType BoxType BoxType))) (= (type |ks#0@@4|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 (Lit |m#0@@36|) (Lit |ks#0@@4|)) (and ($Is |m#0@@36| (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4)) ($Is |ks#0@@4| (TSet Maps._default.MapRemove$K@@4))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@389) (Lit |m#0@@36|) (Lit |ks#0@@4|)) (let ((|m'#1@@0| (|Map#Glue| (|lambda#247| Maps._default.MapRemove$K@@4 (|Map#Domain| |m#0@@36|) (Lit |ks#0@@4|)) (|lambda#146| (|Map#Elements| (Lit |m#0@@36|))) (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4)))) |m'#1@@0|))) :qid |unknown.0:0| :weight 3 :skolemid |4607| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@389) (Lit |m#0@@36|) (Lit |ks#0@@4|))) ))))
(assert (forall ((arg0@@347 T@U) (arg1@@196 T@U) (arg2@@129 T@U) (arg3@@79 T@U) (arg4@@52 T@U) ) (! (= (type (Maps.__default.MapRemoveStrong arg0@@347 arg1@@196 arg2@@129 arg3@@79 arg4@@52)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemoveStrong| :pattern ( (Maps.__default.MapRemoveStrong arg0@@347 arg1@@196 arg2@@129 arg3@@79 arg4@@52)) )))
(assert (forall ((Maps._default.MapRemoveStrong$K T@U) (Maps._default.MapRemoveStrong$V T@U) ($ly@@390 T@U) (|m#0@@37| T@U) (|ks#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K) TyType) (= (type Maps._default.MapRemoveStrong$V) TyType)) (= (type $ly@@390) LayerTypeType)) (= (type |m#0@@37|) (MapType BoxType BoxType))) (= (type |ks#0@@5|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@390) |m#0@@37| |ks#0@@5|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V $ly@@390 |m#0@@37| |ks#0@@5|))) :qid |unknown.0:0| :skolemid |4608| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@390) |m#0@@37| |ks#0@@5|)) )))
(assert (forall ((Maps._default.MapRemoveStrong$K@@0 T@U) (Maps._default.MapRemoveStrong$V@@0 T@U) ($ly@@391 T@U) (|m#0@@38| T@U) (|ks#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@0) TyType) (= (type Maps._default.MapRemoveStrong$V@@0) TyType)) (= (type $ly@@391) LayerTypeType)) (= (type |m#0@@38|) (MapType BoxType BoxType))) (= (type |ks#0@@6|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $ly@@391 |m#0@@38| |ks#0@@6|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $LZ |m#0@@38| |ks#0@@6|))) :qid |unknown.0:0| :skolemid |4609| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 (AsFuelBottom $ly@@391) |m#0@@38| |ks#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@1 T@U) (Maps._default.MapRemoveStrong$V@@1 T@U) ($ly@@392 T@U) (|m#0@@39| T@U) (|ks#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@1) TyType) (= (type Maps._default.MapRemoveStrong$V@@1) TyType)) (= (type $ly@@392) LayerTypeType)) (= (type |m#0@@39|) (MapType BoxType BoxType))) (= (type |ks#0@@7|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 |m#0@@39| |ks#0@@7|) (and ($Is |m#0@@39| (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1)) ($Is |ks#0@@7| (TSet Maps._default.MapRemoveStrong$K@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@392 |m#0@@39| |ks#0@@7|)) (|Set#Difference| (|Map#Domain| |m#0@@39|) |ks#0@@7|)) (forall ((|j#0@@19| T@U) ) (!  (=> (and (and (= (type |j#0@@19|) BoxType) ($IsBox |j#0@@19| Maps._default.MapRemoveStrong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@392 |m#0@@39| |ks#0@@7|)) |j#0@@19|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@392 |m#0@@39| |ks#0@@7|)) |j#0@@19|) (MapType0Select (|Map#Elements| |m#0@@39|) |j#0@@19|))) :qid |Mapsidfy.53:20| :skolemid |4610| :pattern ( (MapType0Select (|Map#Elements| |m#0@@39|) |j#0@@19|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@392 |m#0@@39| |ks#0@@7|)) |j#0@@19|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@392 |m#0@@39| |ks#0@@7|)) |j#0@@19|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@392 |m#0@@39| |ks#0@@7|))) (|Set#Card| (|Map#Domain| |m#0@@39|)))) (<= (|Map#Card| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@392 |m#0@@39| |ks#0@@7|)) (|Map#Card| |m#0@@39|))) ($Is (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@392 |m#0@@39| |ks#0@@7|) (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1)))) :qid |unknown.0:0| :skolemid |4611| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@392 |m#0@@39| |ks#0@@7|)) ))))
(assert (forall ((Maps._default.MapRemoveStrong$K@@2 T@U) (Maps._default.MapRemoveStrong$V@@2 T@U) ($ly@@393 T@U) (|m#0@@40| T@U) (|ks#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@2) TyType) (= (type Maps._default.MapRemoveStrong$V@@2) TyType)) (= (type $ly@@393) LayerTypeType)) (= (type |m#0@@40|) (MapType BoxType BoxType))) (= (type |ks#0@@8|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@40| (TMap Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2)) ($Is |ks#0@@8| (TSet Maps._default.MapRemoveStrong$K@@2)))) (= (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@393 |m#0@@40| |ks#0@@8|) true)) :qid |unknown.0:0| :skolemid |4612| :pattern ( (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@393 |m#0@@40| |ks#0@@8|)) )))
(assert  (and (and (= (type StartFuel_Maps._default.MapRemove) LayerTypeType) (= (type MoreFuel_Maps._default.MapRemove0) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@3 T@U) (Maps._default.MapRemoveStrong$V@@3 T@U) ($ly@@394 T@U) (|m#0@@41| T@U) (|ks#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@3) TyType) (= (type Maps._default.MapRemoveStrong$V@@3) TyType)) (= (type $ly@@394) LayerTypeType)) (= (type |m#0@@41|) (MapType BoxType BoxType))) (= (type |ks#0@@9|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@41| |ks#0@@9|) (and ($Is |m#0@@41| (TMap Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3)) ($Is |ks#0@@9| (TSet Maps._default.MapRemoveStrong$K@@3))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@41| |ks#0@@9|) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove0)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove0)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove0) MoreFuel_Maps._default.MapRemove0)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@394) |m#0@@41| |ks#0@@9|) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 StartFuel_Maps._default.MapRemove |m#0@@41| |ks#0@@9|))))) :qid |unknown.0:0| :skolemid |4613| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@394) |m#0@@41| |ks#0@@9|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove1) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@4 T@U) (Maps._default.MapRemoveStrong$V@@4 T@U) ($ly@@395 T@U) (|m#0@@42| T@U) (|ks#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@4) TyType) (= (type Maps._default.MapRemoveStrong$V@@4) TyType)) (= (type $ly@@395) LayerTypeType)) (= (type |m#0@@42|) (MapType BoxType BoxType))) (= (type |ks#0@@10|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@42|) (Lit |ks#0@@10|)) (and ($Is |m#0@@42| (TMap Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4)) ($Is |ks#0@@10| (TSet Maps._default.MapRemoveStrong$K@@4))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@42|) (Lit |ks#0@@10|)) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove1)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove1)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove1) MoreFuel_Maps._default.MapRemove1)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@395) (Lit |m#0@@42|) (Lit |ks#0@@10|)) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 StartFuel_Maps._default.MapRemove (Lit |m#0@@42|) (Lit |ks#0@@10|)))))) :qid |unknown.0:0| :weight 3 :skolemid |4614| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@395) (Lit |m#0@@42|) (Lit |ks#0@@10|))) ))))
(assert (forall ((arg0@@348 T@U) (arg1@@197 T@U) (arg2@@130 T@U) (arg3@@80 T@U) ) (! (= (type (Maps.__default.MapRemove1 arg0@@348 arg1@@197 arg2@@130 arg3@@80)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove1| :pattern ( (Maps.__default.MapRemove1 arg0@@348 arg1@@197 arg2@@130 arg3@@80)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1$K T@U) (Maps._default.MapRemove1$V T@U) (|m#0@@43| T@U) (|k#0@@40| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K) TyType) (= (type Maps._default.MapRemove1$V) TyType)) (= (type |m#0@@43|) (MapType BoxType BoxType))) (= (type |k#0@@40|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@43| |k#0@@40|) (and ($Is |m#0@@43| (TMap Maps._default.MapRemove1$K Maps._default.MapRemove1$V)) ($IsBox |k#0@@40| Maps._default.MapRemove1$K)))) (and (and (and (and (and (and (forall ((|j#0@@20| T@U) ) (!  (=> (and (and (= (type |j#0@@20|) BoxType) ($IsBox |j#0@@20| Maps._default.MapRemove1$K)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@43|) |j#0@@20|)) (not (= |j#0@@20| |k#0@@40|)))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@43| |k#0@@40|)) |j#0@@20|))) :qid |Mapsidfy.62:18| :skolemid |4615| :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@43| |k#0@@40|)) |j#0@@20|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@43|) |j#0@@20|)) )) (forall ((|j#1@@12| T@U) ) (!  (=> (and (= (type |j#1@@12|) BoxType) ($IsBox |j#1@@12| Maps._default.MapRemove1$K)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@43| |k#0@@40|)) |j#1@@12|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@43|) |j#1@@12|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@43| |k#0@@40|)) |j#1@@12|)) (not (= |j#1@@12| |k#0@@40|))))) :qid |Mapsidfy.63:18| :skolemid |4616| :pattern ( (MapType0Select (|Map#Domain| |m#0@@43|) |j#1@@12|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@43| |k#0@@40|)) |j#1@@12|)) ))) (forall ((|j#2@@1| T@U) ) (!  (=> (and (and (= (type |j#2@@1|) BoxType) ($IsBox |j#2@@1| Maps._default.MapRemove1$K)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@43| |k#0@@40|)) |j#2@@1|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@43| |k#0@@40|)) |j#2@@1|) (MapType0Select (|Map#Elements| |m#0@@43|) |j#2@@1|))) :qid |Mapsidfy.64:18| :skolemid |4617| :pattern ( (MapType0Select (|Map#Elements| |m#0@@43|) |j#2@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@43| |k#0@@40|)) |j#2@@1|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@43| |k#0@@40|)) |j#2@@1|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@43| |k#0@@40|))) (|Set#Card| (|Map#Domain| |m#0@@43|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@43|) |k#0@@40|)) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@43| |k#0@@40|)) (- (|Map#Card| |m#0@@43|) 1)))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@43|) |k#0@@40|))) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@43| |k#0@@40|)) (|Map#Card| |m#0@@43|)))) ($Is (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@43| |k#0@@40|) (TMap Maps._default.MapRemove1$K Maps._default.MapRemove1$V)))) :qid |unknown.0:0| :skolemid |4618| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@43| |k#0@@40|)) ))))
(assert (forall ((Maps._default.MapRemove1$K@@0 T@U) (Maps._default.MapRemove1$V@@0 T@U) (|m#0@@44| T@U) (|k#0@@41| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@0) TyType) (= (type Maps._default.MapRemove1$V@@0) TyType)) (= (type |m#0@@44|) (MapType BoxType BoxType))) (= (type |k#0@@41|) BoxType)) (and ($Is |m#0@@44| (TMap Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0)) ($IsBox |k#0@@41| Maps._default.MapRemove1$K@@0))) (= (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 |m#0@@44| |k#0@@41|) true)) :qid |unknown.0:0| :skolemid |4619| :pattern ( (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 |m#0@@44| |k#0@@41|)) )))
(assert (= (type StartFuel_MapRemove_s._default.MapRemove1) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@1 T@U) (Maps._default.MapRemove1$V@@1 T@U) (|m#0@@45| T@U) (|k#0@@42| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@1) TyType) (= (type Maps._default.MapRemove1$V@@1) TyType)) (= (type |m#0@@45|) (MapType BoxType BoxType))) (= (type |k#0@@42|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@45| |k#0@@42|) (and ($Is |m#0@@45| (TMap Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1)) ($IsBox |k#0@@42| Maps._default.MapRemove1$K@@1)))) (and (|MapRemove_s.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@45| |k#0@@42|) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@45| |k#0@@42|) (MapRemove_s.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 StartFuel_MapRemove_s._default.MapRemove1 |m#0@@45| |k#0@@42|)))) :qid |unknown.0:0| :skolemid |4620| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@45| |k#0@@42|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@2 T@U) (Maps._default.MapRemove1$V@@2 T@U) (|m#0@@46| T@U) (|k#0@@43| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@2) TyType) (= (type Maps._default.MapRemove1$V@@2) TyType)) (= (type |m#0@@46|) (MapType BoxType BoxType))) (= (type |k#0@@43|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 (Lit |m#0@@46|) |k#0@@43|) (and ($Is |m#0@@46| (TMap Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2)) ($IsBox |k#0@@43| Maps._default.MapRemove1$K@@2)))) (and (|MapRemove_s.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 (Lit |m#0@@46|) |k#0@@43|) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 (Lit |m#0@@46|) |k#0@@43|) (MapRemove_s.__default.MapRemove1 Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 StartFuel_MapRemove_s._default.MapRemove1 (Lit |m#0@@46|) |k#0@@43|)))) :qid |unknown.0:0| :weight 3 :skolemid |4621| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 (Lit |m#0@@46|) |k#0@@43|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@3 T@U) (Maps._default.MapRemove1$V@@3 T@U) (|m#0@@47| T@U) (|k#0@@44| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@3) TyType) (= (type Maps._default.MapRemove1$V@@3) TyType)) (= (type |m#0@@47|) (MapType BoxType BoxType))) (= (type |k#0@@44|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 (Lit |m#0@@47|) (Lit |k#0@@44|)) (and ($Is |m#0@@47| (TMap Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3)) ($IsBox |k#0@@44| Maps._default.MapRemove1$K@@3)))) (and (|MapRemove_s.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 (Lit |m#0@@47|) (Lit |k#0@@44|)) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 (Lit |m#0@@47|) (Lit |k#0@@44|)) (MapRemove_s.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 StartFuel_MapRemove_s._default.MapRemove1 (Lit |m#0@@47|) (Lit |k#0@@44|))))) :qid |unknown.0:0| :weight 3 :skolemid |4622| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 (Lit |m#0@@47|) (Lit |k#0@@44|))) ))))
(assert (forall ((arg0@@349 T@U) (arg1@@198 T@U) (arg2@@131 T@U) (arg3@@81 T@U) (arg4@@53 T@U) ) (! (= (type (Maps.__default.MapRemove1Strong arg0@@349 arg1@@198 arg2@@131 arg3@@81 arg4@@53)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove1Strong| :pattern ( (Maps.__default.MapRemove1Strong arg0@@349 arg1@@198 arg2@@131 arg3@@81 arg4@@53)) )))
(assert (forall ((Maps._default.MapRemove1Strong$K T@U) (Maps._default.MapRemove1Strong$V T@U) ($ly@@396 T@U) (|m#0@@48| T@U) (|k#0@@45| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K) TyType) (= (type Maps._default.MapRemove1Strong$V) TyType)) (= (type $ly@@396) LayerTypeType)) (= (type |m#0@@48|) (MapType BoxType BoxType))) (= (type |k#0@@45|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@396) |m#0@@48| |k#0@@45|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V $ly@@396 |m#0@@48| |k#0@@45|))) :qid |unknown.0:0| :skolemid |4623| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@396) |m#0@@48| |k#0@@45|)) )))
(assert (forall ((Maps._default.MapRemove1Strong$K@@0 T@U) (Maps._default.MapRemove1Strong$V@@0 T@U) ($ly@@397 T@U) (|m#0@@49| T@U) (|k#0@@46| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@0) TyType) (= (type Maps._default.MapRemove1Strong$V@@0) TyType)) (= (type $ly@@397) LayerTypeType)) (= (type |m#0@@49|) (MapType BoxType BoxType))) (= (type |k#0@@46|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $ly@@397 |m#0@@49| |k#0@@46|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $LZ |m#0@@49| |k#0@@46|))) :qid |unknown.0:0| :skolemid |4624| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 (AsFuelBottom $ly@@397) |m#0@@49| |k#0@@46|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@1 T@U) (Maps._default.MapRemove1Strong$V@@1 T@U) ($ly@@398 T@U) (|m#0@@50| T@U) (|k#0@@47| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@1) TyType) (= (type Maps._default.MapRemove1Strong$V@@1) TyType)) (= (type $ly@@398) LayerTypeType)) (= (type |m#0@@50|) (MapType BoxType BoxType))) (= (type |k#0@@47|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 |m#0@@50| |k#0@@47|) (and ($Is |m#0@@50| (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1)) ($IsBox |k#0@@47| Maps._default.MapRemove1Strong$K@@1)))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@398 |m#0@@50| |k#0@@47|)) (|Set#Difference| (|Map#Domain| |m#0@@50|) (|Set#UnionOne| (|Set#Empty| BoxType) |k#0@@47|))) (forall ((|j#0@@21| T@U) ) (!  (=> (and (and (= (type |j#0@@21|) BoxType) ($IsBox |j#0@@21| Maps._default.MapRemove1Strong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@398 |m#0@@50| |k#0@@47|)) |j#0@@21|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@398 |m#0@@50| |k#0@@47|)) |j#0@@21|) (MapType0Select (|Map#Elements| |m#0@@50|) |j#0@@21|))) :qid |Mapsidfy.74:20| :skolemid |4625| :pattern ( (MapType0Select (|Map#Elements| |m#0@@50|) |j#0@@21|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@398 |m#0@@50| |k#0@@47|)) |j#0@@21|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@398 |m#0@@50| |k#0@@47|)) |j#0@@21|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@398 |m#0@@50| |k#0@@47|))) (|Set#Card| (|Map#Domain| |m#0@@50|)))) (<= (|Map#Card| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@398 |m#0@@50| |k#0@@47|)) (|Map#Card| |m#0@@50|))) ($Is (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@398 |m#0@@50| |k#0@@47|) (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1)))) :qid |unknown.0:0| :skolemid |4626| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@398 |m#0@@50| |k#0@@47|)) ))))
(assert (forall ((Maps._default.MapRemove1Strong$K@@2 T@U) (Maps._default.MapRemove1Strong$V@@2 T@U) ($ly@@399 T@U) (|m#0@@51| T@U) (|k#0@@48| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@2) TyType) (= (type Maps._default.MapRemove1Strong$V@@2) TyType)) (= (type $ly@@399) LayerTypeType)) (= (type |m#0@@51|) (MapType BoxType BoxType))) (= (type |k#0@@48|) BoxType)) (and ($Is |m#0@@51| (TMap Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2)) ($IsBox |k#0@@48| Maps._default.MapRemove1Strong$K@@2))) (= (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@399 |m#0@@51| |k#0@@48|) true)) :qid |unknown.0:0| :skolemid |4627| :pattern ( (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@399 |m#0@@51| |k#0@@48|)) )))
(assert  (and (= (type MoreFuel_MapRemove_s._default.MapRemove10) LayerTypeType) (= (type StartFuelAssert_MapRemove_s._default.MapRemove1) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@3 T@U) (Maps._default.MapRemove1Strong$V@@3 T@U) ($ly@@400 T@U) (|m#0@@52| T@U) (|k#0@@49| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@3) TyType) (= (type Maps._default.MapRemove1Strong$V@@3) TyType)) (= (type $ly@@400) LayerTypeType)) (= (type |m#0@@52|) (MapType BoxType BoxType))) (= (type |k#0@@49|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@52| |k#0@@49|) (and ($Is |m#0@@52| (TMap Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3)) ($IsBox |k#0@@49| Maps._default.MapRemove1Strong$K@@3)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@52| |k#0@@49|) (and (and (and (= StartFuel_MapRemove_s._default.MapRemove1 ($LS MoreFuel_MapRemove_s._default.MapRemove10)) (= StartFuelAssert_MapRemove_s._default.MapRemove1 ($LS ($LS MoreFuel_MapRemove_s._default.MapRemove10)))) (= (AsFuelBottom MoreFuel_MapRemove_s._default.MapRemove10) MoreFuel_MapRemove_s._default.MapRemove10)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@400) |m#0@@52| |k#0@@49|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@52| |k#0@@49|))))) :qid |unknown.0:0| :skolemid |4628| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@400) |m#0@@52| |k#0@@49|)) ))))
(assert (= (type MoreFuel_MapRemove_s._default.MapRemove11) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@4 T@U) (Maps._default.MapRemove1Strong$V@@4 T@U) ($ly@@401 T@U) (|m#0@@53| T@U) (|k#0@@50| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@4) TyType) (= (type Maps._default.MapRemove1Strong$V@@4) TyType)) (= (type $ly@@401) LayerTypeType)) (= (type |m#0@@53|) (MapType BoxType BoxType))) (= (type |k#0@@50|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@53|) |k#0@@50|) (and ($Is |m#0@@53| (TMap Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4)) ($IsBox |k#0@@50| Maps._default.MapRemove1Strong$K@@4)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@53|) |k#0@@50|) (and (and (and (= StartFuel_MapRemove_s._default.MapRemove1 ($LS MoreFuel_MapRemove_s._default.MapRemove11)) (= StartFuelAssert_MapRemove_s._default.MapRemove1 ($LS ($LS MoreFuel_MapRemove_s._default.MapRemove11)))) (= (AsFuelBottom MoreFuel_MapRemove_s._default.MapRemove11) MoreFuel_MapRemove_s._default.MapRemove11)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@401) (Lit |m#0@@53|) |k#0@@50|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@53|) |k#0@@50|))))) :qid |unknown.0:0| :weight 3 :skolemid |4629| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@401) (Lit |m#0@@53|) |k#0@@50|)) ))))
(assert (= (type MoreFuel_MapRemove_s._default.MapRemove12) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@5 T@U) (Maps._default.MapRemove1Strong$V@@5 T@U) ($ly@@402 T@U) (|m#0@@54| T@U) (|k#0@@51| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@5) TyType) (= (type Maps._default.MapRemove1Strong$V@@5) TyType)) (= (type $ly@@402) LayerTypeType)) (= (type |m#0@@54|) (MapType BoxType BoxType))) (= (type |k#0@@51|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@54|) (Lit |k#0@@51|)) (and ($Is |m#0@@54| (TMap Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5)) ($IsBox |k#0@@51| Maps._default.MapRemove1Strong$K@@5)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@54|) (Lit |k#0@@51|)) (and (and (and (= StartFuel_MapRemove_s._default.MapRemove1 ($LS MoreFuel_MapRemove_s._default.MapRemove12)) (= StartFuelAssert_MapRemove_s._default.MapRemove1 ($LS ($LS MoreFuel_MapRemove_s._default.MapRemove12)))) (= (AsFuelBottom MoreFuel_MapRemove_s._default.MapRemove12) MoreFuel_MapRemove_s._default.MapRemove12)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@402) (Lit |m#0@@54|) (Lit |k#0@@51|)) (Lit (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@54|) (Lit |k#0@@51|))))))) :qid |unknown.0:0| :weight 3 :skolemid |4630| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@402) (Lit |m#0@@54|) (Lit |k#0@@51|))) ))))
(assert (forall ((arg0@@350 T@U) (arg1@@199 T@U) (arg2@@132 T@U) (arg3@@82 T@U) (arg4@@54 T@U) ) (! (= (type (Maps.__default.IMapRemove arg0@@350 arg1@@199 arg2@@132 arg3@@82 arg4@@54)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRemove| :pattern ( (Maps.__default.IMapRemove arg0@@350 arg1@@199 arg2@@132 arg3@@82 arg4@@54)) )))
(assert (forall ((Maps._default.IMapRemove$K T@U) (Maps._default.IMapRemove$V T@U) ($ly@@403 T@U) (|m#0@@55| T@U) (|ks#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K) TyType) (= (type Maps._default.IMapRemove$V) TyType)) (= (type $ly@@403) LayerTypeType)) (= (type |m#0@@55|) (IMapType BoxType BoxType))) (= (type |ks#0@@11|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@403) |m#0@@55| |ks#0@@11|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V $ly@@403 |m#0@@55| |ks#0@@11|))) :qid |unknown.0:0| :skolemid |4631| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@403) |m#0@@55| |ks#0@@11|)) )))
(assert (forall ((Maps._default.IMapRemove$K@@0 T@U) (Maps._default.IMapRemove$V@@0 T@U) ($ly@@404 T@U) (|m#0@@56| T@U) (|ks#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K@@0) TyType) (= (type Maps._default.IMapRemove$V@@0) TyType)) (= (type $ly@@404) LayerTypeType)) (= (type |m#0@@56|) (IMapType BoxType BoxType))) (= (type |ks#0@@12|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $ly@@404 |m#0@@56| |ks#0@@12|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $LZ |m#0@@56| |ks#0@@12|))) :qid |unknown.0:0| :skolemid |4632| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 (AsFuelBottom $ly@@404) |m#0@@56| |ks#0@@12|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@1 T@U) (Maps._default.IMapRemove$V@@1 T@U) ($ly@@405 T@U) (|m#0@@57| T@U) (|ks#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@1) TyType) (= (type Maps._default.IMapRemove$V@@1) TyType)) (= (type $ly@@405) LayerTypeType)) (= (type |m#0@@57|) (IMapType BoxType BoxType))) (= (type |ks#0@@13|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 |m#0@@57| |ks#0@@13|) (and ($Is |m#0@@57| (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1)) ($Is |ks#0@@13| (TISet Maps._default.IMapRemove$K@@1))))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@405 |m#0@@57| |ks#0@@13|)) (|ISet#Difference| (|IMap#Domain| |m#0@@57|) |ks#0@@13|)) (forall ((|j#0@@22| T@U) ) (!  (=> (and (and (= (type |j#0@@22|) BoxType) ($IsBox |j#0@@22| Maps._default.IMapRemove$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@405 |m#0@@57| |ks#0@@13|)) |j#0@@22|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@405 |m#0@@57| |ks#0@@13|)) |j#0@@22|) (MapType0Select (|IMap#Elements| |m#0@@57|) |j#0@@22|))) :qid |Mapsidfy.84:20| :skolemid |4633| :pattern ( (MapType0Select (|IMap#Elements| |m#0@@57|) |j#0@@22|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@405 |m#0@@57| |ks#0@@13|)) |j#0@@22|)) :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@405 |m#0@@57| |ks#0@@13|)) |j#0@@22|)) ))) ($Is (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@405 |m#0@@57| |ks#0@@13|) (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1)))) :qid |unknown.0:0| :skolemid |4634| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@405 |m#0@@57| |ks#0@@13|)) ))))
(assert (forall ((Maps._default.IMapRemove$K@@2 T@U) (Maps._default.IMapRemove$V@@2 T@U) ($ly@@406 T@U) (|m#0@@58| T@U) (|ks#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@2) TyType) (= (type Maps._default.IMapRemove$V@@2) TyType)) (= (type $ly@@406) LayerTypeType)) (= (type |m#0@@58|) (IMapType BoxType BoxType))) (= (type |ks#0@@14|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@58| (TIMap Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2)) ($Is |ks#0@@14| (TISet Maps._default.IMapRemove$K@@2)))) (= (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@406 |m#0@@58| |ks#0@@14|) true)) :qid |unknown.0:0| :skolemid |4635| :pattern ( (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@406 |m#0@@58| |ks#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@3 T@U) (Maps._default.IMapRemove$V@@3 T@U) ($ly@@407 T@U) (|m#0@@59| T@U) (|ks#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@3) TyType) (= (type Maps._default.IMapRemove$V@@3) TyType)) (= (type $ly@@407) LayerTypeType)) (= (type |m#0@@59|) (IMapType BoxType BoxType))) (= (type |ks#0@@15|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 |m#0@@59| |ks#0@@15|) (and ($Is |m#0@@59| (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3)) ($Is |ks#0@@15| (TISet Maps._default.IMapRemove$K@@3))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@407) |m#0@@59| |ks#0@@15|) (|IMap#Glue| (|lambda#247| Maps._default.IMapRemove$K@@3 (|IMap#Domain| |m#0@@59|) |ks#0@@15|) (|lambda#146| (|IMap#Elements| |m#0@@59|)) (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3)))) :qid |unknown.0:0| :skolemid |4636| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@407) |m#0@@59| |ks#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@4 T@U) (Maps._default.IMapRemove$V@@4 T@U) ($ly@@408 T@U) (|m#0@@60| T@U) (|ks#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@4) TyType) (= (type Maps._default.IMapRemove$V@@4) TyType)) (= (type $ly@@408) LayerTypeType)) (= (type |m#0@@60|) (IMapType BoxType BoxType))) (= (type |ks#0@@16|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 (Lit |m#0@@60|) (Lit |ks#0@@16|)) (and ($Is |m#0@@60| (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4)) ($Is |ks#0@@16| (TISet Maps._default.IMapRemove$K@@4))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@408) (Lit |m#0@@60|) (Lit |ks#0@@16|)) (|IMap#Glue| (|lambda#247| Maps._default.IMapRemove$K@@4 (|IMap#Domain| |m#0@@60|) (Lit |ks#0@@16|)) (|lambda#146| (|IMap#Elements| (Lit |m#0@@60|))) (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |4637| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@408) (Lit |m#0@@60|) (Lit |ks#0@@16|))) ))))
(assert (forall ((arg0@@351 T@U) (arg1@@200 T@U) (arg2@@133 T@U) (arg3@@83 T@U) (arg4@@55 T@U) ) (! (= (type (Maps.__default.IMapRemove1 arg0@@351 arg1@@200 arg2@@133 arg3@@83 arg4@@55)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRemove1| :pattern ( (Maps.__default.IMapRemove1 arg0@@351 arg1@@200 arg2@@133 arg3@@83 arg4@@55)) )))
(assert (forall ((Maps._default.IMapRemove1$K T@U) (Maps._default.IMapRemove1$V T@U) ($ly@@409 T@U) (|m#0@@61| T@U) (|k#0@@52| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K) TyType) (= (type Maps._default.IMapRemove1$V) TyType)) (= (type $ly@@409) LayerTypeType)) (= (type |m#0@@61|) (IMapType BoxType BoxType))) (= (type |k#0@@52|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@409) |m#0@@61| |k#0@@52|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V $ly@@409 |m#0@@61| |k#0@@52|))) :qid |unknown.0:0| :skolemid |4638| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@409) |m#0@@61| |k#0@@52|)) )))
(assert (forall ((Maps._default.IMapRemove1$K@@0 T@U) (Maps._default.IMapRemove1$V@@0 T@U) ($ly@@410 T@U) (|m#0@@62| T@U) (|k#0@@53| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K@@0) TyType) (= (type Maps._default.IMapRemove1$V@@0) TyType)) (= (type $ly@@410) LayerTypeType)) (= (type |m#0@@62|) (IMapType BoxType BoxType))) (= (type |k#0@@53|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $ly@@410 |m#0@@62| |k#0@@53|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $LZ |m#0@@62| |k#0@@53|))) :qid |unknown.0:0| :skolemid |4639| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 (AsFuelBottom $ly@@410) |m#0@@62| |k#0@@53|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@1 T@U) (Maps._default.IMapRemove1$V@@1 T@U) ($ly@@411 T@U) (|m#0@@63| T@U) (|k#0@@54| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@1) TyType) (= (type Maps._default.IMapRemove1$V@@1) TyType)) (= (type $ly@@411) LayerTypeType)) (= (type |m#0@@63|) (IMapType BoxType BoxType))) (= (type |k#0@@54|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 |m#0@@63| |k#0@@54|) (and ($Is |m#0@@63| (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1)) ($IsBox |k#0@@54| Maps._default.IMapRemove1$K@@1)))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@411 |m#0@@63| |k#0@@54|)) (|ISet#Difference| (|IMap#Domain| |m#0@@63|) (|ISet#UnionOne| (|ISet#Empty| BoxType) |k#0@@54|))) (forall ((|j#0@@23| T@U) ) (!  (=> (and (and (= (type |j#0@@23|) BoxType) ($IsBox |j#0@@23| Maps._default.IMapRemove1$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@411 |m#0@@63| |k#0@@54|)) |j#0@@23|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@411 |m#0@@63| |k#0@@54|)) |j#0@@23|) (MapType0Select (|IMap#Elements| |m#0@@63|) |j#0@@23|))) :qid |Mapsidfy.91:20| :skolemid |4640| :pattern ( (MapType0Select (|IMap#Elements| |m#0@@63|) |j#0@@23|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@411 |m#0@@63| |k#0@@54|)) |j#0@@23|)) :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@411 |m#0@@63| |k#0@@54|)) |j#0@@23|)) ))) ($Is (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@411 |m#0@@63| |k#0@@54|) (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |4641| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@411 |m#0@@63| |k#0@@54|)) ))))
(assert (forall ((Maps._default.IMapRemove1$K@@2 T@U) (Maps._default.IMapRemove1$V@@2 T@U) ($ly@@412 T@U) (|m#0@@64| T@U) (|k#0@@55| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@2) TyType) (= (type Maps._default.IMapRemove1$V@@2) TyType)) (= (type $ly@@412) LayerTypeType)) (= (type |m#0@@64|) (IMapType BoxType BoxType))) (= (type |k#0@@55|) BoxType)) (and ($Is |m#0@@64| (TIMap Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2)) ($IsBox |k#0@@55| Maps._default.IMapRemove1$K@@2))) (= (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@412 |m#0@@64| |k#0@@55|) true)) :qid |unknown.0:0| :skolemid |4642| :pattern ( (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@412 |m#0@@64| |k#0@@55|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@3 T@U) (Maps._default.IMapRemove1$V@@3 T@U) ($ly@@413 T@U) (|m#0@@65| T@U) (|k#0@@56| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@3) TyType) (= (type Maps._default.IMapRemove1$V@@3) TyType)) (= (type $ly@@413) LayerTypeType)) (= (type |m#0@@65|) (IMapType BoxType BoxType))) (= (type |k#0@@56|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 |m#0@@65| |k#0@@56|) (and ($Is |m#0@@65| (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3)) ($IsBox |k#0@@56| Maps._default.IMapRemove1$K@@3)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@413) |m#0@@65| |k#0@@56|) (|IMap#Glue| (|lambda#241| Maps._default.IMapRemove1$K@@3 (|IMap#Domain| |m#0@@65|) |k#0@@56|) (|lambda#146| (|IMap#Elements| |m#0@@65|)) (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3)))) :qid |unknown.0:0| :skolemid |4643| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@413) |m#0@@65| |k#0@@56|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@4 T@U) (Maps._default.IMapRemove1$V@@4 T@U) ($ly@@414 T@U) (|m#0@@66| T@U) (|k#0@@57| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@4) TyType) (= (type Maps._default.IMapRemove1$V@@4) TyType)) (= (type $ly@@414) LayerTypeType)) (= (type |m#0@@66|) (IMapType BoxType BoxType))) (= (type |k#0@@57|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 (Lit |m#0@@66|) (Lit |k#0@@57|)) (and ($Is |m#0@@66| (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4)) ($IsBox |k#0@@57| Maps._default.IMapRemove1$K@@4)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@414) (Lit |m#0@@66|) (Lit |k#0@@57|)) (|IMap#Glue| (|lambda#241| Maps._default.IMapRemove1$K@@4 (|IMap#Domain| |m#0@@66|) |k#0@@57|) (|lambda#146| (|IMap#Elements| (Lit |m#0@@66|))) (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |4644| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@414) (Lit |m#0@@66|) (Lit |k#0@@57|))) ))))
(assert (forall ((arg0@@352 T@U) (arg1@@201 T@U) (arg2@@134 T@U) (arg3@@84 T@U) ) (! (= (type (Maps.__default.MapRestrict arg0@@352 arg1@@201 arg2@@134 arg3@@84)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRestrict| :pattern ( (Maps.__default.MapRestrict arg0@@352 arg1@@201 arg2@@134 arg3@@84)) )))
(assert  (=> true (forall ((Maps._default.MapRestrict$K T@U) (Maps._default.MapRestrict$V T@U) (|m#0@@67| T@U) (|ks#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K) TyType) (= (type Maps._default.MapRestrict$V) TyType)) (= (type |m#0@@67|) (MapType BoxType BoxType))) (= (type |ks#0@@17|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@67| |ks#0@@17|) (and ($Is |m#0@@67| (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V)) ($Is |ks#0@@17| (TSet Maps._default.MapRestrict$K))))) ($Is (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@67| |ks#0@@17|) (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V))) :qid |unknown.0:0| :skolemid |4645| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@67| |ks#0@@17|)) ))))
(assert (forall ((Maps._default.MapRestrict$K@@0 T@U) (Maps._default.MapRestrict$V@@0 T@U) (|m#0@@68| T@U) (|ks#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@0) TyType) (= (type Maps._default.MapRestrict$V@@0) TyType)) (= (type |m#0@@68|) (MapType BoxType BoxType))) (= (type |ks#0@@18|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@68| (TMap Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0)) ($Is |ks#0@@18| (TSet Maps._default.MapRestrict$K@@0)))) (= (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@68| |ks#0@@18|) true)) :qid |unknown.0:0| :skolemid |4646| :pattern ( (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@68| |ks#0@@18|)) )))
(assert (forall ((arg0@@353 T@U) (arg1@@202 T@U) (arg2@@135 T@U) ) (! (= (type (|lambda#259| arg0@@353 arg1@@202 arg2@@135)) (MapType0Type BoxType boolType)) :qid |funType:lambda#259| :pattern ( (|lambda#259| arg0@@353 arg1@@202 arg2@@135)) )))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@1 T@U) (Maps._default.MapRestrict$V@@1 T@U) (|m#0@@69| T@U) (|ks#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@1) TyType) (= (type Maps._default.MapRestrict$V@@1) TyType)) (= (type |m#0@@69|) (MapType BoxType BoxType))) (= (type |ks#0@@19|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@69| |ks#0@@19|) (and ($Is |m#0@@69| (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1)) ($Is |ks#0@@19| (TSet Maps._default.MapRestrict$K@@1))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@69| |ks#0@@19|) (|Map#Glue| (|lambda#259| Maps._default.MapRestrict$K@@1 |ks#0@@19| (|Map#Domain| |m#0@@69|)) (|lambda#146| (|Map#Elements| |m#0@@69|)) (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |4647| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@69| |ks#0@@19|)) ))))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@2 T@U) (Maps._default.MapRestrict$V@@2 T@U) (|m#0@@70| T@U) (|ks#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@2) TyType) (= (type Maps._default.MapRestrict$V@@2) TyType)) (= (type |m#0@@70|) (MapType BoxType BoxType))) (= (type |ks#0@@20|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@70|) (Lit |ks#0@@20|)) (and ($Is |m#0@@70| (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2)) ($Is |ks#0@@20| (TSet Maps._default.MapRestrict$K@@2))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@70|) (Lit |ks#0@@20|)) (|Map#Glue| (|lambda#259| Maps._default.MapRestrict$K@@2 (Lit |ks#0@@20|) (|Map#Domain| |m#0@@70|)) (|lambda#146| (|Map#Elements| (Lit |m#0@@70|))) (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |4648| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@70|) (Lit |ks#0@@20|))) ))))
(assert (forall ((arg0@@354 T@U) (arg1@@203 T@U) (arg2@@136 T@U) (arg3@@85 T@U) ) (! (= (type (Maps.__default.MapIRestrict arg0@@354 arg1@@203 arg2@@136 arg3@@85)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapIRestrict| :pattern ( (Maps.__default.MapIRestrict arg0@@354 arg1@@203 arg2@@136 arg3@@85)) )))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K T@U) (Maps._default.MapIRestrict$V T@U) (|m#0@@71| T@U) (|ks#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K) TyType) (= (type Maps._default.MapIRestrict$V) TyType)) (= (type |m#0@@71|) (MapType BoxType BoxType))) (= (type |ks#0@@21|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@71| |ks#0@@21|) (and ($Is |m#0@@71| (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V)) ($Is |ks#0@@21| (TISet Maps._default.MapIRestrict$K))))) ($Is (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@71| |ks#0@@21|) (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V))) :qid |unknown.0:0| :skolemid |4649| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@71| |ks#0@@21|)) ))))
(assert (forall ((Maps._default.MapIRestrict$K@@0 T@U) (Maps._default.MapIRestrict$V@@0 T@U) (|m#0@@72| T@U) (|ks#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@0) TyType) (= (type Maps._default.MapIRestrict$V@@0) TyType)) (= (type |m#0@@72|) (MapType BoxType BoxType))) (= (type |ks#0@@22|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@72| (TMap Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0)) ($Is |ks#0@@22| (TISet Maps._default.MapIRestrict$K@@0)))) (= (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@72| |ks#0@@22|) true)) :qid |unknown.0:0| :skolemid |4650| :pattern ( (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@72| |ks#0@@22|)) )))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@1 T@U) (Maps._default.MapIRestrict$V@@1 T@U) (|m#0@@73| T@U) (|ks#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@1) TyType) (= (type Maps._default.MapIRestrict$V@@1) TyType)) (= (type |m#0@@73|) (MapType BoxType BoxType))) (= (type |ks#0@@23|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@73| |ks#0@@23|) (and ($Is |m#0@@73| (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1)) ($Is |ks#0@@23| (TISet Maps._default.MapIRestrict$K@@1))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@73| |ks#0@@23|) (|Map#Glue| (|lambda#259| Maps._default.MapIRestrict$K@@1 (|Map#Domain| |m#0@@73|) |ks#0@@23|) (|lambda#146| (|Map#Elements| |m#0@@73|)) (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |4651| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@73| |ks#0@@23|)) ))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@2 T@U) (Maps._default.MapIRestrict$V@@2 T@U) (|m#0@@74| T@U) (|ks#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@2) TyType) (= (type Maps._default.MapIRestrict$V@@2) TyType)) (= (type |m#0@@74|) (MapType BoxType BoxType))) (= (type |ks#0@@24|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@74|) |ks#0@@24|) (and ($Is |m#0@@74| (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2)) ($Is |ks#0@@24| (TISet Maps._default.MapIRestrict$K@@2))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@74|) |ks#0@@24|) (|Map#Glue| (|lambda#259| Maps._default.MapIRestrict$K@@2 (|Map#Domain| |m#0@@74|) |ks#0@@24|) (|lambda#146| (|Map#Elements| (Lit |m#0@@74|))) (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |4652| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@74|) |ks#0@@24|)) ))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@3 T@U) (Maps._default.MapIRestrict$V@@3 T@U) (|m#0@@75| T@U) (|ks#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@3) TyType) (= (type Maps._default.MapIRestrict$V@@3) TyType)) (= (type |m#0@@75|) (MapType BoxType BoxType))) (= (type |ks#0@@25|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@75|) (Lit |ks#0@@25|)) (and ($Is |m#0@@75| (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3)) ($Is |ks#0@@25| (TISet Maps._default.MapIRestrict$K@@3))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@75|) (Lit |ks#0@@25|)) (|Map#Glue| (|lambda#259| Maps._default.MapIRestrict$K@@3 (|Map#Domain| |m#0@@75|) (Lit |ks#0@@25|)) (|lambda#146| (|Map#Elements| (Lit |m#0@@75|))) (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3)))) :qid |unknown.0:0| :weight 3 :skolemid |4653| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@75|) (Lit |ks#0@@25|))) ))))
(assert (forall ((arg0@@355 T@U) (arg1@@204 T@U) (arg2@@137 T@U) (arg3@@86 T@U) ) (! (= (type (Maps.__default.IMapRestrict arg0@@355 arg1@@204 arg2@@137 arg3@@86)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRestrict| :pattern ( (Maps.__default.IMapRestrict arg0@@355 arg1@@204 arg2@@137 arg3@@86)) )))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K T@U) (Maps._default.IMapRestrict$V T@U) (|m#0@@76| T@U) (|ks#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K) TyType) (= (type Maps._default.IMapRestrict$V) TyType)) (= (type |m#0@@76|) (IMapType BoxType BoxType))) (= (type |ks#0@@26|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@76| |ks#0@@26|) (and ($Is |m#0@@76| (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V)) ($Is |ks#0@@26| (TISet Maps._default.IMapRestrict$K))))) ($Is (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@76| |ks#0@@26|) (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V))) :qid |unknown.0:0| :skolemid |4654| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@76| |ks#0@@26|)) ))))
(assert (forall ((Maps._default.IMapRestrict$K@@0 T@U) (Maps._default.IMapRestrict$V@@0 T@U) (|m#0@@77| T@U) (|ks#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@0) TyType) (= (type Maps._default.IMapRestrict$V@@0) TyType)) (= (type |m#0@@77|) (IMapType BoxType BoxType))) (= (type |ks#0@@27|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@77| (TIMap Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0)) ($Is |ks#0@@27| (TISet Maps._default.IMapRestrict$K@@0)))) (= (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@77| |ks#0@@27|) true)) :qid |unknown.0:0| :skolemid |4655| :pattern ( (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@77| |ks#0@@27|)) )))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@1 T@U) (Maps._default.IMapRestrict$V@@1 T@U) (|m#0@@78| T@U) (|ks#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@1) TyType) (= (type Maps._default.IMapRestrict$V@@1) TyType)) (= (type |m#0@@78|) (IMapType BoxType BoxType))) (= (type |ks#0@@28|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@78| |ks#0@@28|) (and ($Is |m#0@@78| (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1)) ($Is |ks#0@@28| (TISet Maps._default.IMapRestrict$K@@1))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@78| |ks#0@@28|) (|IMap#Glue| (|lambda#259| Maps._default.IMapRestrict$K@@1 |ks#0@@28| (|IMap#Domain| |m#0@@78|)) (|lambda#146| (|IMap#Elements| |m#0@@78|)) (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |4656| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@78| |ks#0@@28|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@2 T@U) (Maps._default.IMapRestrict$V@@2 T@U) (|m#0@@79| T@U) (|ks#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@2) TyType) (= (type Maps._default.IMapRestrict$V@@2) TyType)) (= (type |m#0@@79|) (IMapType BoxType BoxType))) (= (type |ks#0@@29|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@79|) (Lit |ks#0@@29|)) (and ($Is |m#0@@79| (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2)) ($Is |ks#0@@29| (TISet Maps._default.IMapRestrict$K@@2))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@79|) (Lit |ks#0@@29|)) (|IMap#Glue| (|lambda#259| Maps._default.IMapRestrict$K@@2 (Lit |ks#0@@29|) (|IMap#Domain| |m#0@@79|)) (|lambda#146| (|IMap#Elements| (Lit |m#0@@79|))) (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |4657| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@79|) (Lit |ks#0@@29|))) ))))
(assert (forall ((arg0@@356 T@U) (arg1@@205 T@U) (arg2@@138 T@U) (arg3@@87 T@U) (arg4@@56 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion arg0@@356 arg1@@205 arg2@@138 arg3@@87 arg4@@56)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapDisjointUnion| :pattern ( (Maps.__default.MapDisjointUnion arg0@@356 arg1@@205 arg2@@138 arg3@@87 arg4@@56)) )))
(assert (forall ((Maps._default.MapDisjointUnion$U T@U) (Maps._default.MapDisjointUnion$T T@U) ($ly@@415 T@U) (|mapa#0| T@U) (|mapb#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U) TyType) (= (type Maps._default.MapDisjointUnion$T) TyType)) (= (type $ly@@415) LayerTypeType)) (= (type |mapa#0|) (MapType BoxType BoxType))) (= (type |mapb#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@415) |mapa#0| |mapb#0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T $ly@@415 |mapa#0| |mapb#0|))) :qid |unknown.0:0| :skolemid |4658| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@415) |mapa#0| |mapb#0|)) )))
(assert (forall ((Maps._default.MapDisjointUnion$U@@0 T@U) (Maps._default.MapDisjointUnion$T@@0 T@U) ($ly@@416 T@U) (|mapa#0@@0| T@U) (|mapb#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@0) TyType) (= (type Maps._default.MapDisjointUnion$T@@0) TyType)) (= (type $ly@@416) LayerTypeType)) (= (type |mapa#0@@0|) (MapType BoxType BoxType))) (= (type |mapb#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $ly@@416 |mapa#0@@0| |mapb#0@@0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $LZ |mapa#0@@0| |mapb#0@@0|))) :qid |unknown.0:0| :skolemid |4659| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 (AsFuelBottom $ly@@416) |mapa#0@@0| |mapb#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@1 T@U) (Maps._default.MapDisjointUnion$T@@1 T@U) ($ly@@417 T@U) (|mapa#0@@1| T@U) (|mapb#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@1) TyType) (= (type Maps._default.MapDisjointUnion$T@@1) TyType)) (= (type $ly@@417) LayerTypeType)) (= (type |mapa#0@@1|) (MapType BoxType BoxType))) (= (type |mapb#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 |mapa#0@@1| |mapb#0@@1|) (and (and ($Is |mapa#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)) ($Is |mapb#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))))) (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@417 |mapa#0@@1| |mapb#0@@1|)) (|Set#Union| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))) (forall ((|k#0@@58| T@U) ) (!  (=> (and (and (= (type |k#0@@58|) BoxType) ($IsBox |k#0@@58| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#0@@58|))) (= (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#0@@58|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@417 |mapa#0@@1| |mapb#0@@1|)) |k#0@@58|))) :qid |Mapsidfy.112:18| :skolemid |4660| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@417 |mapa#0@@1| |mapb#0@@1|)) |k#0@@58|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#0@@58|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#0@@58|)) ))) (forall ((|k#1@@0| T@U) ) (!  (=> (and (and (= (type |k#1@@0|) BoxType) ($IsBox |k#1@@0| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#1@@0|))) (= (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#1@@0|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@417 |mapa#0@@1| |mapb#0@@1|)) |k#1@@0|))) :qid |Mapsidfy.113:18| :skolemid |4661| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@417 |mapa#0@@1| |mapb#0@@1|)) |k#1@@0|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#1@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#1@@0|)) ))) ($Is (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@417 |mapa#0@@1| |mapb#0@@1|) (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)))) :qid |unknown.0:0| :skolemid |4662| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@417 |mapa#0@@1| |mapb#0@@1|)) ))))
(assert (forall ((Maps._default.MapDisjointUnion$U@@2 T@U) (Maps._default.MapDisjointUnion$T@@2 T@U) ($ly@@418 T@U) (|mapa#0@@2| T@U) (|mapb#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@2) TyType) (= (type Maps._default.MapDisjointUnion$T@@2) TyType)) (= (type $ly@@418) LayerTypeType)) (= (type |mapa#0@@2|) (MapType BoxType BoxType))) (= (type |mapb#0@@2|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)) ($Is |mapb#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)))) (= (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@418 |mapa#0@@2| |mapb#0@@2|) (|Set#Disjoint| (|Map#Domain| |mapa#0@@2|) (|Map#Domain| |mapb#0@@2|)))) :qid |unknown.0:0| :skolemid |4663| :pattern ( (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@418 |mapa#0@@2| |mapb#0@@2|)) )))
(assert (forall ((arg0@@357 T@U) (arg1@@206 T@U) (arg2@@139 T@U) ) (! (= (type (|lambda#274| arg0@@357 arg1@@206 arg2@@139)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#274| :pattern ( (|lambda#274| arg0@@357 arg1@@206 arg2@@139)) )))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@3 T@U) (Maps._default.MapDisjointUnion$T@@3 T@U) ($ly@@419 T@U) (|mapa#0@@3| T@U) (|mapb#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@3) TyType) (= (type Maps._default.MapDisjointUnion$T@@3) TyType)) (= (type $ly@@419) LayerTypeType)) (= (type |mapa#0@@3|) (MapType BoxType BoxType))) (= (type |mapb#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 |mapa#0@@3| |mapb#0@@3|) (and (and ($Is |mapa#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3)) ($Is |mapb#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@419) |mapa#0@@3| |mapb#0@@3|) (|Map#Glue| (|lambda#232| Maps._default.MapDisjointUnion$U@@3 (|Set#Union| (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|))) (|lambda#274| (|Map#Domain| |mapa#0@@3|) (|Map#Elements| |mapa#0@@3|) (|Map#Elements| |mapb#0@@3|)) (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3)))) :qid |unknown.0:0| :skolemid |4664| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@419) |mapa#0@@3| |mapb#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@4 T@U) (Maps._default.MapDisjointUnion$T@@4 T@U) ($ly@@420 T@U) (|mapa#0@@4| T@U) (|mapb#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@4) TyType) (= (type Maps._default.MapDisjointUnion$T@@4) TyType)) (= (type $ly@@420) LayerTypeType)) (= (type |mapa#0@@4|) (MapType BoxType BoxType))) (= (type |mapb#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (and (and ($Is |mapa#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4)) ($Is |mapb#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@4|)) (|Map#Domain| (Lit |mapb#0@@4|)))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@420) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (|Map#Glue| (|lambda#232| Maps._default.MapDisjointUnion$U@@4 (|Set#Union| (|Map#Domain| (Lit |mapa#0@@4|)) (|Map#Domain| (Lit |mapb#0@@4|)))) (|lambda#274| (|Map#Domain| |mapa#0@@4|) (|Map#Elements| (Lit |mapa#0@@4|)) (|Map#Elements| (Lit |mapb#0@@4|))) (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |4665| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@420) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|))) ))))
(assert (forall ((arg0@@358 T@U) (arg1@@207 T@U) (arg2@@140 T@U) (arg3@@88 T@U) (arg4@@57 T@U) ) (! (= (type (Maps.__default.MapUnionPreferA arg0@@358 arg1@@207 arg2@@140 arg3@@88 arg4@@57)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnionPreferA| :pattern ( (Maps.__default.MapUnionPreferA arg0@@358 arg1@@207 arg2@@140 arg3@@88 arg4@@57)) )))
(assert (forall ((Maps._default.MapUnionPreferA$U T@U) (Maps._default.MapUnionPreferA$T T@U) ($ly@@421 T@U) (|mapa#0@@5| T@U) (|mapb#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U) TyType) (= (type Maps._default.MapUnionPreferA$T) TyType)) (= (type $ly@@421) LayerTypeType)) (= (type |mapa#0@@5|) (MapType BoxType BoxType))) (= (type |mapb#0@@5|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@421) |mapa#0@@5| |mapb#0@@5|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T $ly@@421 |mapa#0@@5| |mapb#0@@5|))) :qid |unknown.0:0| :skolemid |4666| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@421) |mapa#0@@5| |mapb#0@@5|)) )))
(assert (forall ((Maps._default.MapUnionPreferA$U@@0 T@U) (Maps._default.MapUnionPreferA$T@@0 T@U) ($ly@@422 T@U) (|mapa#0@@6| T@U) (|mapb#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@0) TyType) (= (type Maps._default.MapUnionPreferA$T@@0) TyType)) (= (type $ly@@422) LayerTypeType)) (= (type |mapa#0@@6|) (MapType BoxType BoxType))) (= (type |mapb#0@@6|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $ly@@422 |mapa#0@@6| |mapb#0@@6|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $LZ |mapa#0@@6| |mapb#0@@6|))) :qid |unknown.0:0| :skolemid |4667| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 (AsFuelBottom $ly@@422) |mapa#0@@6| |mapb#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@1 T@U) (Maps._default.MapUnionPreferA$T@@1 T@U) ($ly@@423 T@U) (|mapa#0@@7| T@U) (|mapb#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@1) TyType) (= (type Maps._default.MapUnionPreferA$T@@1) TyType)) (= (type $ly@@423) LayerTypeType)) (= (type |mapa#0@@7|) (MapType BoxType BoxType))) (= (type |mapb#0@@7|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 |mapa#0@@7| |mapb#0@@7|) (and ($Is |mapa#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1)) ($Is |mapb#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@423 |mapa#0@@7| |mapb#0@@7|)) (|Set#Union| (|Map#Domain| |mapa#0@@7|) (|Map#Domain| |mapb#0@@7|))) (forall ((|k#0@@59| T@U) ) (!  (=> (and (and (= (type |k#0@@59|) BoxType) ($IsBox |k#0@@59| Maps._default.MapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#0@@59|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@423 |mapa#0@@7| |mapb#0@@7|)) |k#0@@59|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#0@@59|))) :qid |Mapsidfy.122:20| :skolemid |4668| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#0@@59|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@423 |mapa#0@@7| |mapb#0@@7|)) |k#0@@59|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#0@@59|)) ))) (forall ((|k#1@@1| T@U) ) (!  (=> (and (and (= (type |k#1@@1|) BoxType) ($IsBox |k#1@@1| Maps._default.MapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|Set#Difference| (|Map#Domain| |mapb#0@@7|) (|Map#Domain| |mapa#0@@7|)) |k#1@@1|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@423 |mapa#0@@7| |mapb#0@@7|)) |k#1@@1|) (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#1@@1|))) :qid |Mapsidfy.123:20| :skolemid |4669| :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#1@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@423 |mapa#0@@7| |mapb#0@@7|)) |k#1@@1|)) :pattern ( (MapType0Select (|Set#Difference| (|Map#Domain| |mapb#0@@7|) (|Map#Domain| |mapa#0@@7|)) |k#1@@1|)) ))) (forall ((|k#2| T@U) ) (!  (=> (and (and (= (type |k#2|) BoxType) ($IsBox |k#2| Maps._default.MapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#2|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#2|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@423 |mapa#0@@7| |mapb#0@@7|)) |k#2|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#2|))) :qid |Mapsidfy.124:20| :skolemid |4670| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#2|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@423 |mapa#0@@7| |mapb#0@@7|)) |k#2|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#2|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#2|)) ))) ($Is (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@423 |mapa#0@@7| |mapb#0@@7|) (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1)))) :qid |unknown.0:0| :skolemid |4671| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@423 |mapa#0@@7| |mapb#0@@7|)) ))))
(assert (forall ((Maps._default.MapUnionPreferA$U@@2 T@U) (Maps._default.MapUnionPreferA$T@@2 T@U) ($ly@@424 T@U) (|mapa#0@@8| T@U) (|mapb#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@2) TyType) (= (type Maps._default.MapUnionPreferA$T@@2) TyType)) (= (type $ly@@424) LayerTypeType)) (= (type |mapa#0@@8|) (MapType BoxType BoxType))) (= (type |mapb#0@@8|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)) ($Is |mapb#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)))) (= (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@424 |mapa#0@@8| |mapb#0@@8|) true)) :qid |unknown.0:0| :skolemid |4672| :pattern ( (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@424 |mapa#0@@8| |mapb#0@@8|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@3 T@U) (Maps._default.MapUnionPreferA$T@@3 T@U) ($ly@@425 T@U) (|mapa#0@@9| T@U) (|mapb#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@3) TyType) (= (type Maps._default.MapUnionPreferA$T@@3) TyType)) (= (type $ly@@425) LayerTypeType)) (= (type |mapa#0@@9|) (MapType BoxType BoxType))) (= (type |mapb#0@@9|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 |mapa#0@@9| |mapb#0@@9|) (and ($Is |mapa#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3)) ($Is |mapb#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@425) |mapa#0@@9| |mapb#0@@9|) (|Map#Glue| (|lambda#232| Maps._default.MapUnionPreferA$U@@3 (|Set#Union| (|Map#Domain| |mapa#0@@9|) (|Map#Domain| |mapb#0@@9|))) (|lambda#274| (|Map#Domain| |mapa#0@@9|) (|Map#Elements| |mapa#0@@9|) (|Map#Elements| |mapb#0@@9|)) (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3)))) :qid |unknown.0:0| :skolemid |4673| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@425) |mapa#0@@9| |mapb#0@@9|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@4 T@U) (Maps._default.MapUnionPreferA$T@@4 T@U) ($ly@@426 T@U) (|mapa#0@@10| T@U) (|mapb#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@4) TyType) (= (type Maps._default.MapUnionPreferA$T@@4) TyType)) (= (type $ly@@426) LayerTypeType)) (= (type |mapa#0@@10|) (MapType BoxType BoxType))) (= (type |mapb#0@@10|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (and ($Is |mapa#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4)) ($Is |mapb#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@426) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (|Map#Glue| (|lambda#232| Maps._default.MapUnionPreferA$U@@4 (|Set#Union| (|Map#Domain| (Lit |mapa#0@@10|)) (|Map#Domain| (Lit |mapb#0@@10|)))) (|lambda#274| (|Map#Domain| |mapa#0@@10|) (|Map#Elements| (Lit |mapa#0@@10|)) (|Map#Elements| (Lit |mapb#0@@10|))) (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |4674| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@426) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|))) ))))
(assert (forall ((arg0@@359 T@U) (arg1@@208 T@U) (arg2@@141 T@U) (arg3@@89 T@U) (arg4@@58 T@U) ) (! (= (type (Maps.__default.MapUnionPreferB arg0@@359 arg1@@208 arg2@@141 arg3@@89 arg4@@58)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnionPreferB| :pattern ( (Maps.__default.MapUnionPreferB arg0@@359 arg1@@208 arg2@@141 arg3@@89 arg4@@58)) )))
(assert (forall ((Maps._default.MapUnionPreferB$U T@U) (Maps._default.MapUnionPreferB$T T@U) ($ly@@427 T@U) (|mapa#0@@11| T@U) (|mapb#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U) TyType) (= (type Maps._default.MapUnionPreferB$T) TyType)) (= (type $ly@@427) LayerTypeType)) (= (type |mapa#0@@11|) (MapType BoxType BoxType))) (= (type |mapb#0@@11|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@427) |mapa#0@@11| |mapb#0@@11|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T $ly@@427 |mapa#0@@11| |mapb#0@@11|))) :qid |unknown.0:0| :skolemid |4675| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@427) |mapa#0@@11| |mapb#0@@11|)) )))
(assert (forall ((Maps._default.MapUnionPreferB$U@@0 T@U) (Maps._default.MapUnionPreferB$T@@0 T@U) ($ly@@428 T@U) (|mapa#0@@12| T@U) (|mapb#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@0) TyType) (= (type Maps._default.MapUnionPreferB$T@@0) TyType)) (= (type $ly@@428) LayerTypeType)) (= (type |mapa#0@@12|) (MapType BoxType BoxType))) (= (type |mapb#0@@12|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $ly@@428 |mapa#0@@12| |mapb#0@@12|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $LZ |mapa#0@@12| |mapb#0@@12|))) :qid |unknown.0:0| :skolemid |4676| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 (AsFuelBottom $ly@@428) |mapa#0@@12| |mapb#0@@12|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@1 T@U) (Maps._default.MapUnionPreferB$T@@1 T@U) ($ly@@429 T@U) (|mapa#0@@13| T@U) (|mapb#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@1) TyType) (= (type Maps._default.MapUnionPreferB$T@@1) TyType)) (= (type $ly@@429) LayerTypeType)) (= (type |mapa#0@@13|) (MapType BoxType BoxType))) (= (type |mapb#0@@13|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 |mapa#0@@13| |mapb#0@@13|) (and ($Is |mapa#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1)) ($Is |mapb#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@429 |mapa#0@@13| |mapb#0@@13|)) (|Set#Union| (|Map#Domain| |mapa#0@@13|) (|Map#Domain| |mapb#0@@13|))) (forall ((|k#0@@60| T@U) ) (!  (=> (and (and (= (type |k#0@@60|) BoxType) ($IsBox |k#0@@60| Maps._default.MapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#0@@60|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@429 |mapa#0@@13| |mapb#0@@13|)) |k#0@@60|) (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#0@@60|))) :qid |Mapsidfy.131:20| :skolemid |4677| :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#0@@60|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@429 |mapa#0@@13| |mapb#0@@13|)) |k#0@@60|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#0@@60|)) ))) (forall ((|k#1@@2| T@U) ) (!  (=> (and (and (= (type |k#1@@2|) BoxType) ($IsBox |k#1@@2| Maps._default.MapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|Set#Difference| (|Map#Domain| |mapa#0@@13|) (|Map#Domain| |mapb#0@@13|)) |k#1@@2|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@429 |mapa#0@@13| |mapb#0@@13|)) |k#1@@2|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#1@@2|))) :qid |Mapsidfy.132:20| :skolemid |4678| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#1@@2|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@429 |mapa#0@@13| |mapb#0@@13|)) |k#1@@2|)) :pattern ( (MapType0Select (|Set#Difference| (|Map#Domain| |mapa#0@@13|) (|Map#Domain| |mapb#0@@13|)) |k#1@@2|)) ))) (forall ((|k#2@@0| T@U) ) (!  (=> (and (and (= (type |k#2@@0|) BoxType) ($IsBox |k#2@@0| Maps._default.MapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#2@@0|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#2@@0|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@429 |mapa#0@@13| |mapb#0@@13|)) |k#2@@0|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#2@@0|))) :qid |Mapsidfy.133:20| :skolemid |4679| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@429 |mapa#0@@13| |mapb#0@@13|)) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#2@@0|)) ))) ($Is (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@429 |mapa#0@@13| |mapb#0@@13|) (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1)))) :qid |unknown.0:0| :skolemid |4680| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@429 |mapa#0@@13| |mapb#0@@13|)) ))))
(assert (forall ((Maps._default.MapUnionPreferB$U@@2 T@U) (Maps._default.MapUnionPreferB$T@@2 T@U) ($ly@@430 T@U) (|mapa#0@@14| T@U) (|mapb#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@2) TyType) (= (type Maps._default.MapUnionPreferB$T@@2) TyType)) (= (type $ly@@430) LayerTypeType)) (= (type |mapa#0@@14|) (MapType BoxType BoxType))) (= (type |mapb#0@@14|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)) ($Is |mapb#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)))) (= (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@430 |mapa#0@@14| |mapb#0@@14|) true)) :qid |unknown.0:0| :skolemid |4681| :pattern ( (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@430 |mapa#0@@14| |mapb#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@3 T@U) (Maps._default.MapUnionPreferB$T@@3 T@U) ($ly@@431 T@U) (|mapa#0@@15| T@U) (|mapb#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@3) TyType) (= (type Maps._default.MapUnionPreferB$T@@3) TyType)) (= (type $ly@@431) LayerTypeType)) (= (type |mapa#0@@15|) (MapType BoxType BoxType))) (= (type |mapb#0@@15|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 |mapa#0@@15| |mapb#0@@15|) (and ($Is |mapa#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3)) ($Is |mapb#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@431) |mapa#0@@15| |mapb#0@@15|) (|Map#Glue| (|lambda#232| Maps._default.MapUnionPreferB$U@@3 (|Set#Union| (|Map#Domain| |mapa#0@@15|) (|Map#Domain| |mapb#0@@15|))) (|lambda#274| (|Map#Domain| |mapb#0@@15|) (|Map#Elements| |mapb#0@@15|) (|Map#Elements| |mapa#0@@15|)) (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3)))) :qid |unknown.0:0| :skolemid |4682| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@431) |mapa#0@@15| |mapb#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@4 T@U) (Maps._default.MapUnionPreferB$T@@4 T@U) ($ly@@432 T@U) (|mapa#0@@16| T@U) (|mapb#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@4) TyType) (= (type Maps._default.MapUnionPreferB$T@@4) TyType)) (= (type $ly@@432) LayerTypeType)) (= (type |mapa#0@@16|) (MapType BoxType BoxType))) (= (type |mapb#0@@16|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (and ($Is |mapa#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4)) ($Is |mapb#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@432) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (|Map#Glue| (|lambda#232| Maps._default.MapUnionPreferB$U@@4 (|Set#Union| (|Map#Domain| (Lit |mapa#0@@16|)) (|Map#Domain| (Lit |mapb#0@@16|)))) (|lambda#274| (|Map#Domain| |mapb#0@@16|) (|Map#Elements| (Lit |mapb#0@@16|)) (|Map#Elements| (Lit |mapa#0@@16|))) (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |4683| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@432) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|))) ))))
(assert (forall ((arg0@@360 T@U) (arg1@@209 T@U) (arg2@@142 T@U) (arg3@@90 T@U) (arg4@@59 T@U) ) (! (= (type (Maps.__default.MapUnion arg0@@360 arg1@@209 arg2@@142 arg3@@90 arg4@@59)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnion| :pattern ( (Maps.__default.MapUnion arg0@@360 arg1@@209 arg2@@142 arg3@@90 arg4@@59)) )))
(assert (forall ((Maps._default.MapUnion$U T@U) (Maps._default.MapUnion$T T@U) ($ly@@433 T@U) (|mapa#0@@17| T@U) (|mapb#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U) TyType) (= (type Maps._default.MapUnion$T) TyType)) (= (type $ly@@433) LayerTypeType)) (= (type |mapa#0@@17|) (MapType BoxType BoxType))) (= (type |mapb#0@@17|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@433) |mapa#0@@17| |mapb#0@@17|) (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T $ly@@433 |mapa#0@@17| |mapb#0@@17|))) :qid |unknown.0:0| :skolemid |4684| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@433) |mapa#0@@17| |mapb#0@@17|)) )))
(assert (forall ((Maps._default.MapUnion$U@@0 T@U) (Maps._default.MapUnion$T@@0 T@U) ($ly@@434 T@U) (|mapa#0@@18| T@U) (|mapb#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U@@0) TyType) (= (type Maps._default.MapUnion$T@@0) TyType)) (= (type $ly@@434) LayerTypeType)) (= (type |mapa#0@@18|) (MapType BoxType BoxType))) (= (type |mapb#0@@18|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $ly@@434 |mapa#0@@18| |mapb#0@@18|) (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $LZ |mapa#0@@18| |mapb#0@@18|))) :qid |unknown.0:0| :skolemid |4685| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 (AsFuelBottom $ly@@434) |mapa#0@@18| |mapb#0@@18|)) )))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@1 T@U) (Maps._default.MapUnion$T@@1 T@U) ($ly@@435 T@U) (|mapa#0@@19| T@U) (|mapb#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@1) TyType) (= (type Maps._default.MapUnion$T@@1) TyType)) (= (type $ly@@435) LayerTypeType)) (= (type |mapa#0@@19|) (MapType BoxType BoxType))) (= (type |mapb#0@@19|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 |mapa#0@@19| |mapb#0@@19|) (and ($Is |mapa#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1)) ($Is |mapb#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@435 |mapa#0@@19| |mapb#0@@19|)) (|Set#Union| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|))) (forall ((|k#0@@61| T@U) ) (!  (=> (and (and (= (type |k#0@@61|) BoxType) ($IsBox |k#0@@61| Maps._default.MapUnion$U@@1)) (U_2_bool (MapType0Select (|Set#Difference| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|)) |k#0@@61|))) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#0@@61|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@435 |mapa#0@@19| |mapb#0@@19|)) |k#0@@61|))) :qid |Mapsidfy.142:18| :skolemid |4686| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@435 |mapa#0@@19| |mapb#0@@19|)) |k#0@@61|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#0@@61|)) :pattern ( (MapType0Select (|Set#Difference| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|)) |k#0@@61|)) ))) (forall ((|k#1@@3| T@U) ) (!  (=> (and (and (= (type |k#1@@3|) BoxType) ($IsBox |k#1@@3| Maps._default.MapUnion$U@@1)) (U_2_bool (MapType0Select (|Set#Difference| (|Map#Domain| |mapb#0@@19|) (|Map#Domain| |mapa#0@@19|)) |k#1@@3|))) (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#1@@3|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@435 |mapa#0@@19| |mapb#0@@19|)) |k#1@@3|))) :qid |Mapsidfy.143:18| :skolemid |4687| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@435 |mapa#0@@19| |mapb#0@@19|)) |k#1@@3|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#1@@3|)) :pattern ( (MapType0Select (|Set#Difference| (|Map#Domain| |mapb#0@@19|) (|Map#Domain| |mapa#0@@19|)) |k#1@@3|)) ))) (forall ((|k#2@@1| T@U) ) (!  (=> (and (and (= (type |k#2@@1|) BoxType) ($IsBox |k#2@@1| Maps._default.MapUnion$U@@1)) (U_2_bool (MapType0Select (|Set#Intersection| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|)) |k#2@@1|))) (or (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#2@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@435 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#2@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@435 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)))) :qid |Mapsidfy.144:18| :skolemid |4688| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#2@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@435 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#2@@1|)) :pattern ( (MapType0Select (|Set#Intersection| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|)) |k#2@@1|)) ))) ($Is (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@435 |mapa#0@@19| |mapb#0@@19|) (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1)))) :qid |unknown.0:0| :skolemid |4689| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@435 |mapa#0@@19| |mapb#0@@19|)) ))))
(assert (forall ((Maps._default.MapUnion$U@@2 T@U) (Maps._default.MapUnion$T@@2 T@U) ($ly@@436 T@U) (|mapa#0@@20| T@U) (|mapb#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@2) TyType) (= (type Maps._default.MapUnion$T@@2) TyType)) (= (type $ly@@436) LayerTypeType)) (= (type |mapa#0@@20|) (MapType BoxType BoxType))) (= (type |mapb#0@@20|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)) ($Is |mapb#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)))) (= (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@436 |mapa#0@@20| |mapb#0@@20|) true)) :qid |unknown.0:0| :skolemid |4690| :pattern ( (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@436 |mapa#0@@20| |mapb#0@@20|)) )))
(assert (= (type StartFuel_Maps._default.MapUnionPreferA) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@3 T@U) (Maps._default.MapUnion$T@@3 T@U) ($ly@@437 T@U) (|mapa#0@@21| T@U) (|mapb#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@3) TyType) (= (type Maps._default.MapUnion$T@@3) TyType)) (= (type $ly@@437) LayerTypeType)) (= (type |mapa#0@@21|) (MapType BoxType BoxType))) (= (type |mapb#0@@21|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (and ($Is |mapa#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3)) ($Is |mapb#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@437) |mapa#0@@21| |mapb#0@@21|) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 StartFuel_Maps._default.MapUnionPreferA |mapa#0@@21| |mapb#0@@21|)))) :qid |unknown.0:0| :skolemid |4691| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@437) |mapa#0@@21| |mapb#0@@21|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@4 T@U) (Maps._default.MapUnion$T@@4 T@U) ($ly@@438 T@U) (|mapa#0@@22| T@U) (|mapb#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@4) TyType) (= (type Maps._default.MapUnion$T@@4) TyType)) (= (type $ly@@438) LayerTypeType)) (= (type |mapa#0@@22|) (MapType BoxType BoxType))) (= (type |mapb#0@@22|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (and ($Is |mapa#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4)) ($Is |mapb#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@438) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 StartFuel_Maps._default.MapUnionPreferA (Lit |mapa#0@@22|) (Lit |mapb#0@@22|))))) :qid |unknown.0:0| :weight 3 :skolemid |4692| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@438) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|))) ))))
(assert (forall ((arg0@@361 T@U) (arg1@@210 T@U) (arg2@@143 T@U) (arg3@@91 T@U) (arg4@@60 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferA arg0@@361 arg1@@210 arg2@@143 arg3@@91 arg4@@60)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnionPreferA| :pattern ( (Maps.__default.IMapUnionPreferA arg0@@361 arg1@@210 arg2@@143 arg3@@91 arg4@@60)) )))
(assert (forall ((Maps._default.IMapUnionPreferA$U T@U) (Maps._default.IMapUnionPreferA$T T@U) ($ly@@439 T@U) (|mapa#0@@23| T@U) (|mapb#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U) TyType) (= (type Maps._default.IMapUnionPreferA$T) TyType)) (= (type $ly@@439) LayerTypeType)) (= (type |mapa#0@@23|) (IMapType BoxType BoxType))) (= (type |mapb#0@@23|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@439) |mapa#0@@23| |mapb#0@@23|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T $ly@@439 |mapa#0@@23| |mapb#0@@23|))) :qid |unknown.0:0| :skolemid |4693| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@439) |mapa#0@@23| |mapb#0@@23|)) )))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@0 T@U) (Maps._default.IMapUnionPreferA$T@@0 T@U) ($ly@@440 T@U) (|mapa#0@@24| T@U) (|mapb#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@0) TyType) (= (type Maps._default.IMapUnionPreferA$T@@0) TyType)) (= (type $ly@@440) LayerTypeType)) (= (type |mapa#0@@24|) (IMapType BoxType BoxType))) (= (type |mapb#0@@24|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $ly@@440 |mapa#0@@24| |mapb#0@@24|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $LZ |mapa#0@@24| |mapb#0@@24|))) :qid |unknown.0:0| :skolemid |4694| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 (AsFuelBottom $ly@@440) |mapa#0@@24| |mapb#0@@24|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@1 T@U) (Maps._default.IMapUnionPreferA$T@@1 T@U) ($ly@@441 T@U) (|mapa#0@@25| T@U) (|mapb#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@1) TyType) (= (type Maps._default.IMapUnionPreferA$T@@1) TyType)) (= (type $ly@@441) LayerTypeType)) (= (type |mapa#0@@25|) (IMapType BoxType BoxType))) (= (type |mapb#0@@25|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 |mapa#0@@25| |mapb#0@@25|) (and ($Is |mapa#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1)) ($Is |mapb#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@441 |mapa#0@@25| |mapb#0@@25|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@25|) (|IMap#Domain| |mapb#0@@25|))) (forall ((|k#0@@62| T@U) ) (!  (=> (and (and (= (type |k#0@@62|) BoxType) ($IsBox |k#0@@62| Maps._default.IMapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#0@@62|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@441 |mapa#0@@25| |mapb#0@@25|)) |k#0@@62|) (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#0@@62|))) :qid |Mapsidfy.151:20| :skolemid |4695| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#0@@62|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@441 |mapa#0@@25| |mapb#0@@25|)) |k#0@@62|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#0@@62|)) ))) (forall ((|k#1@@4| T@U) ) (!  (=> (and (and (= (type |k#1@@4|) BoxType) ($IsBox |k#1@@4| Maps._default.IMapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapb#0@@25|) (|IMap#Domain| |mapa#0@@25|)) |k#1@@4|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@441 |mapa#0@@25| |mapb#0@@25|)) |k#1@@4|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#1@@4|))) :qid |Mapsidfy.152:20| :skolemid |4696| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#1@@4|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@441 |mapa#0@@25| |mapb#0@@25|)) |k#1@@4|)) :pattern ( (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapb#0@@25|) (|IMap#Domain| |mapa#0@@25|)) |k#1@@4|)) ))) (forall ((|k#2@@2| T@U) ) (!  (=> (and (and (= (type |k#2@@2|) BoxType) ($IsBox |k#2@@2| Maps._default.IMapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#2@@2|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#2@@2|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@441 |mapa#0@@25| |mapb#0@@25|)) |k#2@@2|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#2@@2|))) :qid |Mapsidfy.153:20| :skolemid |4697| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@441 |mapa#0@@25| |mapb#0@@25|)) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#2@@2|)) ))) ($Is (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@441 |mapa#0@@25| |mapb#0@@25|) (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1)))) :qid |unknown.0:0| :skolemid |4698| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@441 |mapa#0@@25| |mapb#0@@25|)) ))))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@2 T@U) (Maps._default.IMapUnionPreferA$T@@2 T@U) ($ly@@442 T@U) (|mapa#0@@26| T@U) (|mapb#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@2) TyType) (= (type Maps._default.IMapUnionPreferA$T@@2) TyType)) (= (type $ly@@442) LayerTypeType)) (= (type |mapa#0@@26|) (IMapType BoxType BoxType))) (= (type |mapb#0@@26|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)) ($Is |mapb#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)))) (= (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@442 |mapa#0@@26| |mapb#0@@26|) true)) :qid |unknown.0:0| :skolemid |4699| :pattern ( (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@442 |mapa#0@@26| |mapb#0@@26|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@3 T@U) (Maps._default.IMapUnionPreferA$T@@3 T@U) ($ly@@443 T@U) (|mapa#0@@27| T@U) (|mapb#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@3) TyType) (= (type Maps._default.IMapUnionPreferA$T@@3) TyType)) (= (type $ly@@443) LayerTypeType)) (= (type |mapa#0@@27|) (IMapType BoxType BoxType))) (= (type |mapb#0@@27|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 |mapa#0@@27| |mapb#0@@27|) (and ($Is |mapa#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3)) ($Is |mapb#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@443) |mapa#0@@27| |mapb#0@@27|) (|IMap#Glue| (|lambda#232| Maps._default.IMapUnionPreferA$U@@3 (|ISet#Union| (|IMap#Domain| |mapa#0@@27|) (|IMap#Domain| |mapb#0@@27|))) (|lambda#274| (|IMap#Domain| |mapa#0@@27|) (|IMap#Elements| |mapa#0@@27|) (|IMap#Elements| |mapb#0@@27|)) (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3)))) :qid |unknown.0:0| :skolemid |4700| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@443) |mapa#0@@27| |mapb#0@@27|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@4 T@U) (Maps._default.IMapUnionPreferA$T@@4 T@U) ($ly@@444 T@U) (|mapa#0@@28| T@U) (|mapb#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@4) TyType) (= (type Maps._default.IMapUnionPreferA$T@@4) TyType)) (= (type $ly@@444) LayerTypeType)) (= (type |mapa#0@@28|) (IMapType BoxType BoxType))) (= (type |mapb#0@@28|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (and ($Is |mapa#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4)) ($Is |mapb#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@444) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (|IMap#Glue| (|lambda#232| Maps._default.IMapUnionPreferA$U@@4 (|ISet#Union| (|IMap#Domain| (Lit |mapa#0@@28|)) (|IMap#Domain| (Lit |mapb#0@@28|)))) (|lambda#274| (|IMap#Domain| |mapa#0@@28|) (|IMap#Elements| (Lit |mapa#0@@28|)) (|IMap#Elements| (Lit |mapb#0@@28|))) (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |4701| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@444) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|))) ))))
(assert (forall ((arg0@@362 T@U) (arg1@@211 T@U) (arg2@@144 T@U) (arg3@@92 T@U) (arg4@@61 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferB arg0@@362 arg1@@211 arg2@@144 arg3@@92 arg4@@61)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnionPreferB| :pattern ( (Maps.__default.IMapUnionPreferB arg0@@362 arg1@@211 arg2@@144 arg3@@92 arg4@@61)) )))
(assert (forall ((Maps._default.IMapUnionPreferB$U T@U) (Maps._default.IMapUnionPreferB$T T@U) ($ly@@445 T@U) (|mapa#0@@29| T@U) (|mapb#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U) TyType) (= (type Maps._default.IMapUnionPreferB$T) TyType)) (= (type $ly@@445) LayerTypeType)) (= (type |mapa#0@@29|) (IMapType BoxType BoxType))) (= (type |mapb#0@@29|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@445) |mapa#0@@29| |mapb#0@@29|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T $ly@@445 |mapa#0@@29| |mapb#0@@29|))) :qid |unknown.0:0| :skolemid |4702| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@445) |mapa#0@@29| |mapb#0@@29|)) )))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@0 T@U) (Maps._default.IMapUnionPreferB$T@@0 T@U) ($ly@@446 T@U) (|mapa#0@@30| T@U) (|mapb#0@@30| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@0) TyType) (= (type Maps._default.IMapUnionPreferB$T@@0) TyType)) (= (type $ly@@446) LayerTypeType)) (= (type |mapa#0@@30|) (IMapType BoxType BoxType))) (= (type |mapb#0@@30|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $ly@@446 |mapa#0@@30| |mapb#0@@30|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $LZ |mapa#0@@30| |mapb#0@@30|))) :qid |unknown.0:0| :skolemid |4703| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 (AsFuelBottom $ly@@446) |mapa#0@@30| |mapb#0@@30|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@1 T@U) (Maps._default.IMapUnionPreferB$T@@1 T@U) ($ly@@447 T@U) (|mapa#0@@31| T@U) (|mapb#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@1) TyType) (= (type Maps._default.IMapUnionPreferB$T@@1) TyType)) (= (type $ly@@447) LayerTypeType)) (= (type |mapa#0@@31|) (IMapType BoxType BoxType))) (= (type |mapb#0@@31|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 |mapa#0@@31| |mapb#0@@31|) (and ($Is |mapa#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1)) ($Is |mapb#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@447 |mapa#0@@31| |mapb#0@@31|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@31|) (|IMap#Domain| |mapb#0@@31|))) (forall ((|k#0@@63| T@U) ) (!  (=> (and (and (= (type |k#0@@63|) BoxType) ($IsBox |k#0@@63| Maps._default.IMapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#0@@63|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@447 |mapa#0@@31| |mapb#0@@31|)) |k#0@@63|) (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#0@@63|))) :qid |Mapsidfy.160:20| :skolemid |4704| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#0@@63|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@447 |mapa#0@@31| |mapb#0@@31|)) |k#0@@63|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#0@@63|)) ))) (forall ((|k#1@@5| T@U) ) (!  (=> (and (and (= (type |k#1@@5|) BoxType) ($IsBox |k#1@@5| Maps._default.IMapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapa#0@@31|) (|IMap#Domain| |mapb#0@@31|)) |k#1@@5|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@447 |mapa#0@@31| |mapb#0@@31|)) |k#1@@5|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#1@@5|))) :qid |Mapsidfy.161:20| :skolemid |4705| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#1@@5|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@447 |mapa#0@@31| |mapb#0@@31|)) |k#1@@5|)) :pattern ( (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapa#0@@31|) (|IMap#Domain| |mapb#0@@31|)) |k#1@@5|)) ))) (forall ((|k#2@@3| T@U) ) (!  (=> (and (and (= (type |k#2@@3|) BoxType) ($IsBox |k#2@@3| Maps._default.IMapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#2@@3|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#2@@3|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@447 |mapa#0@@31| |mapb#0@@31|)) |k#2@@3|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#2@@3|))) :qid |Mapsidfy.162:20| :skolemid |4706| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@447 |mapa#0@@31| |mapb#0@@31|)) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#2@@3|)) ))) ($Is (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@447 |mapa#0@@31| |mapb#0@@31|) (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1)))) :qid |unknown.0:0| :skolemid |4707| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@447 |mapa#0@@31| |mapb#0@@31|)) ))))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@2 T@U) (Maps._default.IMapUnionPreferB$T@@2 T@U) ($ly@@448 T@U) (|mapa#0@@32| T@U) (|mapb#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@2) TyType) (= (type Maps._default.IMapUnionPreferB$T@@2) TyType)) (= (type $ly@@448) LayerTypeType)) (= (type |mapa#0@@32|) (IMapType BoxType BoxType))) (= (type |mapb#0@@32|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)) ($Is |mapb#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)))) (= (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@448 |mapa#0@@32| |mapb#0@@32|) true)) :qid |unknown.0:0| :skolemid |4708| :pattern ( (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@448 |mapa#0@@32| |mapb#0@@32|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@3 T@U) (Maps._default.IMapUnionPreferB$T@@3 T@U) ($ly@@449 T@U) (|mapa#0@@33| T@U) (|mapb#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@3) TyType) (= (type Maps._default.IMapUnionPreferB$T@@3) TyType)) (= (type $ly@@449) LayerTypeType)) (= (type |mapa#0@@33|) (IMapType BoxType BoxType))) (= (type |mapb#0@@33|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 |mapa#0@@33| |mapb#0@@33|) (and ($Is |mapa#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3)) ($Is |mapb#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@449) |mapa#0@@33| |mapb#0@@33|) (|IMap#Glue| (|lambda#232| Maps._default.IMapUnionPreferB$U@@3 (|ISet#Union| (|IMap#Domain| |mapa#0@@33|) (|IMap#Domain| |mapb#0@@33|))) (|lambda#274| (|IMap#Domain| |mapb#0@@33|) (|IMap#Elements| |mapb#0@@33|) (|IMap#Elements| |mapa#0@@33|)) (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3)))) :qid |unknown.0:0| :skolemid |4709| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@449) |mapa#0@@33| |mapb#0@@33|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@4 T@U) (Maps._default.IMapUnionPreferB$T@@4 T@U) ($ly@@450 T@U) (|mapa#0@@34| T@U) (|mapb#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@4) TyType) (= (type Maps._default.IMapUnionPreferB$T@@4) TyType)) (= (type $ly@@450) LayerTypeType)) (= (type |mapa#0@@34|) (IMapType BoxType BoxType))) (= (type |mapb#0@@34|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (and ($Is |mapa#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4)) ($Is |mapb#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@450) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (|IMap#Glue| (|lambda#232| Maps._default.IMapUnionPreferB$U@@4 (|ISet#Union| (|IMap#Domain| (Lit |mapa#0@@34|)) (|IMap#Domain| (Lit |mapb#0@@34|)))) (|lambda#274| (|IMap#Domain| |mapb#0@@34|) (|IMap#Elements| (Lit |mapb#0@@34|)) (|IMap#Elements| (Lit |mapa#0@@34|))) (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |4710| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@450) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|))) ))))
(assert (forall ((arg0@@363 T@U) (arg1@@212 T@U) (arg2@@145 T@U) (arg3@@93 T@U) (arg4@@62 T@U) ) (! (= (type (Maps.__default.IMapUnion arg0@@363 arg1@@212 arg2@@145 arg3@@93 arg4@@62)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnion| :pattern ( (Maps.__default.IMapUnion arg0@@363 arg1@@212 arg2@@145 arg3@@93 arg4@@62)) )))
(assert (forall ((Maps._default.IMapUnion$U T@U) (Maps._default.IMapUnion$T T@U) ($ly@@451 T@U) (|mapa#0@@35| T@U) (|mapb#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U) TyType) (= (type Maps._default.IMapUnion$T) TyType)) (= (type $ly@@451) LayerTypeType)) (= (type |mapa#0@@35|) (IMapType BoxType BoxType))) (= (type |mapb#0@@35|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@451) |mapa#0@@35| |mapb#0@@35|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T $ly@@451 |mapa#0@@35| |mapb#0@@35|))) :qid |unknown.0:0| :skolemid |4711| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@451) |mapa#0@@35| |mapb#0@@35|)) )))
(assert (forall ((Maps._default.IMapUnion$U@@0 T@U) (Maps._default.IMapUnion$T@@0 T@U) ($ly@@452 T@U) (|mapa#0@@36| T@U) (|mapb#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U@@0) TyType) (= (type Maps._default.IMapUnion$T@@0) TyType)) (= (type $ly@@452) LayerTypeType)) (= (type |mapa#0@@36|) (IMapType BoxType BoxType))) (= (type |mapb#0@@36|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $ly@@452 |mapa#0@@36| |mapb#0@@36|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $LZ |mapa#0@@36| |mapb#0@@36|))) :qid |unknown.0:0| :skolemid |4712| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 (AsFuelBottom $ly@@452) |mapa#0@@36| |mapb#0@@36|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@1 T@U) (Maps._default.IMapUnion$T@@1 T@U) ($ly@@453 T@U) (|mapa#0@@37| T@U) (|mapb#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@1) TyType) (= (type Maps._default.IMapUnion$T@@1) TyType)) (= (type $ly@@453) LayerTypeType)) (= (type |mapa#0@@37|) (IMapType BoxType BoxType))) (= (type |mapb#0@@37|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 |mapa#0@@37| |mapb#0@@37|) (and ($Is |mapa#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1)) ($Is |mapb#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@453 |mapa#0@@37| |mapb#0@@37|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|))) (forall ((|k#0@@64| T@U) ) (!  (=> (and (and (= (type |k#0@@64|) BoxType) ($IsBox |k#0@@64| Maps._default.IMapUnion$U@@1)) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|)) |k#0@@64|))) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#0@@64|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@453 |mapa#0@@37| |mapb#0@@37|)) |k#0@@64|))) :qid |Mapsidfy.171:18| :skolemid |4713| :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@453 |mapa#0@@37| |mapb#0@@37|)) |k#0@@64|)) :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#0@@64|)) :pattern ( (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|)) |k#0@@64|)) ))) (forall ((|k#1@@6| T@U) ) (!  (=> (and (and (= (type |k#1@@6|) BoxType) ($IsBox |k#1@@6| Maps._default.IMapUnion$U@@1)) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapb#0@@37|) (|IMap#Domain| |mapa#0@@37|)) |k#1@@6|))) (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#1@@6|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@453 |mapa#0@@37| |mapb#0@@37|)) |k#1@@6|))) :qid |Mapsidfy.172:18| :skolemid |4714| :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@453 |mapa#0@@37| |mapb#0@@37|)) |k#1@@6|)) :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#1@@6|)) :pattern ( (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapb#0@@37|) (|IMap#Domain| |mapa#0@@37|)) |k#1@@6|)) ))) (forall ((|k#2@@4| T@U) ) (!  (=> (and (and (= (type |k#2@@4|) BoxType) ($IsBox |k#2@@4| Maps._default.IMapUnion$U@@1)) (U_2_bool (MapType0Select (|ISet#Intersection| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|)) |k#2@@4|))) (or (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#2@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@453 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#2@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@453 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)))) :qid |Mapsidfy.173:18| :skolemid |4715| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#2@@4|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@453 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)) :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#2@@4|)) :pattern ( (MapType0Select (|ISet#Intersection| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|)) |k#2@@4|)) ))) ($Is (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@453 |mapa#0@@37| |mapb#0@@37|) (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1)))) :qid |unknown.0:0| :skolemid |4716| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@453 |mapa#0@@37| |mapb#0@@37|)) ))))
(assert (forall ((Maps._default.IMapUnion$U@@2 T@U) (Maps._default.IMapUnion$T@@2 T@U) ($ly@@454 T@U) (|mapa#0@@38| T@U) (|mapb#0@@38| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@2) TyType) (= (type Maps._default.IMapUnion$T@@2) TyType)) (= (type $ly@@454) LayerTypeType)) (= (type |mapa#0@@38|) (IMapType BoxType BoxType))) (= (type |mapb#0@@38|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)) ($Is |mapb#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)))) (= (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@454 |mapa#0@@38| |mapb#0@@38|) true)) :qid |unknown.0:0| :skolemid |4717| :pattern ( (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@454 |mapa#0@@38| |mapb#0@@38|)) )))
(assert (= (type StartFuel_Maps._default.IMapUnionPreferA) LayerTypeType))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@3 T@U) (Maps._default.IMapUnion$T@@3 T@U) ($ly@@455 T@U) (|mapa#0@@39| T@U) (|mapb#0@@39| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@3) TyType) (= (type Maps._default.IMapUnion$T@@3) TyType)) (= (type $ly@@455) LayerTypeType)) (= (type |mapa#0@@39|) (IMapType BoxType BoxType))) (= (type |mapb#0@@39|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (and ($Is |mapa#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3)) ($Is |mapb#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@455) |mapa#0@@39| |mapb#0@@39|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 StartFuel_Maps._default.IMapUnionPreferA |mapa#0@@39| |mapb#0@@39|)))) :qid |unknown.0:0| :skolemid |4718| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@455) |mapa#0@@39| |mapb#0@@39|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@4 T@U) (Maps._default.IMapUnion$T@@4 T@U) ($ly@@456 T@U) (|mapa#0@@40| T@U) (|mapb#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@4) TyType) (= (type Maps._default.IMapUnion$T@@4) TyType)) (= (type $ly@@456) LayerTypeType)) (= (type |mapa#0@@40|) (IMapType BoxType BoxType))) (= (type |mapb#0@@40|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (and ($Is |mapa#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4)) ($Is |mapb#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@456) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 StartFuel_Maps._default.IMapUnionPreferA (Lit |mapa#0@@40|) (Lit |mapb#0@@40|))))) :qid |unknown.0:0| :weight 3 :skolemid |4719| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@456) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|))) ))))
(assert (forall ((arg0@@364 T@U) (arg1@@213 T@U) (arg2@@146 T@U) (arg3@@94 T@U) (arg4@@63 T@U) (arg5@@21 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion3 arg0@@364 arg1@@213 arg2@@146 arg3@@94 arg4@@63 arg5@@21)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapDisjointUnion3| :pattern ( (Maps.__default.MapDisjointUnion3 arg0@@364 arg1@@213 arg2@@146 arg3@@94 arg4@@63 arg5@@21)) )))
(assert (forall ((Maps._default.MapDisjointUnion3$U T@U) (Maps._default.MapDisjointUnion3$T T@U) ($ly@@457 T@U) (|mapa#0@@41| T@U) (|mapb#0@@41| T@U) (|mapc#0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U) TyType) (= (type Maps._default.MapDisjointUnion3$T) TyType)) (= (type $ly@@457) LayerTypeType)) (= (type |mapa#0@@41|) (MapType BoxType BoxType))) (= (type |mapb#0@@41|) (MapType BoxType BoxType))) (= (type |mapc#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@457) |mapa#0@@41| |mapb#0@@41| |mapc#0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T $ly@@457 |mapa#0@@41| |mapb#0@@41| |mapc#0|))) :qid |unknown.0:0| :skolemid |4720| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@457) |mapa#0@@41| |mapb#0@@41| |mapc#0|)) )))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@0 T@U) (Maps._default.MapDisjointUnion3$T@@0 T@U) ($ly@@458 T@U) (|mapa#0@@42| T@U) (|mapb#0@@42| T@U) (|mapc#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@0) TyType) (= (type Maps._default.MapDisjointUnion3$T@@0) TyType)) (= (type $ly@@458) LayerTypeType)) (= (type |mapa#0@@42|) (MapType BoxType BoxType))) (= (type |mapb#0@@42|) (MapType BoxType BoxType))) (= (type |mapc#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $ly@@458 |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $LZ |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|))) :qid |unknown.0:0| :skolemid |4721| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 (AsFuelBottom $ly@@458) |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|)) )))
(assert (= (type StartFuel_Maps._default.MapDisjointUnion) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@1 T@U) (Maps._default.MapDisjointUnion3$T@@1 T@U) ($ly@@459 T@U) (|mapa#0@@43| T@U) (|mapb#0@@43| T@U) (|mapc#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@1) TyType) (= (type Maps._default.MapDisjointUnion3$T@@1) TyType)) (= (type $ly@@459) LayerTypeType)) (= (type |mapa#0@@43|) (MapType BoxType BoxType))) (= (type |mapb#0@@43|) (MapType BoxType BoxType))) (= (type |mapc#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (and (and (and ($Is |mapa#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1)) ($Is |mapb#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) ($Is |mapc#0@@1| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|)))))) (and (and (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@459 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Union| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|))) (=> (or (or (not (|Set#Equal| (|Map#Domain| |mapa#0@@43|) (|Set#Empty| BoxType))) (not (|Set#Equal| (|Map#Domain| |mapb#0@@43|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| |mapc#0@@1|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@459 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Empty| BoxType))))) (forall ((|k#0@@65| T@U) ) (!  (=> (and (and (= (type |k#0@@65|) BoxType) ($IsBox |k#0@@65| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#0@@65|))) (= (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#0@@65|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@459 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#0@@65|))) :qid |Mapsidfy.183:18| :skolemid |4722| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@459 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#0@@65|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#0@@65|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#0@@65|)) ))) (forall ((|k#1@@7| T@U) ) (!  (=> (and (and (= (type |k#1@@7|) BoxType) ($IsBox |k#1@@7| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#1@@7|))) (= (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#1@@7|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@459 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#1@@7|))) :qid |Mapsidfy.184:18| :skolemid |4723| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@459 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#1@@7|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#1@@7|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#1@@7|)) ))) (forall ((|k#2@@5| T@U) ) (!  (=> (and (and (= (type |k#2@@5|) BoxType) ($IsBox |k#2@@5| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#2@@5|))) (= (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#2@@5|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@459 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#2@@5|))) :qid |Mapsidfy.185:18| :skolemid |4724| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@459 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#2@@5|)) :pattern ( (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#2@@5|)) :pattern ( (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#2@@5|)) ))) (and (|Map#Equal| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@459 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|))) (|Map#Equal| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|)) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| |mapb#0@@43|) |mapc#0@@1|)))) ($Is (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@459 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1)))) :qid |unknown.0:0| :skolemid |4725| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@459 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) ))))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@2 T@U) (Maps._default.MapDisjointUnion3$T@@2 T@U) ($ly@@460 T@U) (|mapa#0@@44| T@U) (|mapb#0@@44| T@U) (|mapc#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@2) TyType) (= (type Maps._default.MapDisjointUnion3$T@@2) TyType)) (= (type $ly@@460) LayerTypeType)) (= (type |mapa#0@@44|) (MapType BoxType BoxType))) (= (type |mapb#0@@44|) (MapType BoxType BoxType))) (= (type |mapc#0@@2|) (MapType BoxType BoxType))) (and (and ($Is |mapa#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)) ($Is |mapb#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2))) ($Is |mapc#0@@2| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)))) (= (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@460 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|)  (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Map#Domain| |mapc#0@@2|))))) :qid |unknown.0:0| :skolemid |4726| :pattern ( (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@460 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|)) )))
(assert (forall ((arg0@@365 T@U) (arg1@@214 T@U) (arg2@@147 T@U) (arg3@@95 T@U) (arg4@@64 T@U) ) (! (= (type (|lambda#294| arg0@@365 arg1@@214 arg2@@147 arg3@@95 arg4@@64)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#294| :pattern ( (|lambda#294| arg0@@365 arg1@@214 arg2@@147 arg3@@95 arg4@@64)) )))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@3 T@U) (Maps._default.MapDisjointUnion3$T@@3 T@U) ($ly@@461 T@U) (|mapa#0@@45| T@U) (|mapb#0@@45| T@U) (|mapc#0@@3| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@3) TyType) (= (type Maps._default.MapDisjointUnion3$T@@3) TyType)) (= (type $ly@@461) LayerTypeType)) (= (type |mapa#0@@45|) (MapType BoxType BoxType))) (= (type |mapb#0@@45|) (MapType BoxType BoxType))) (= (type |mapc#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (and (and (and ($Is |mapa#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3)) ($Is |mapb#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) ($Is |mapc#0@@3| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Map#Domain| |mapc#0@@3|)))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@461) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (|Map#Glue| (|lambda#232| Maps._default.MapDisjointUnion3$U@@3 (|Set#Union| (|Set#Union| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Map#Domain| |mapc#0@@3|))) (|lambda#294| (|Map#Domain| |mapa#0@@45|) (|Map#Elements| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|) (|Map#Elements| |mapb#0@@45|) (|Map#Elements| |mapc#0@@3|)) (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3)))) :qid |unknown.0:0| :skolemid |4727| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@461) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@4 T@U) (Maps._default.MapDisjointUnion3$T@@4 T@U) ($ly@@462 T@U) (|mapa#0@@46| T@U) (|mapb#0@@46| T@U) (|mapc#0@@4| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@4) TyType) (= (type Maps._default.MapDisjointUnion3$T@@4) TyType)) (= (type $ly@@462) LayerTypeType)) (= (type |mapa#0@@46|) (MapType BoxType BoxType))) (= (type |mapb#0@@46|) (MapType BoxType BoxType))) (= (type |mapc#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (and (and (and ($Is |mapa#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4)) ($Is |mapb#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) ($Is |mapc#0@@4| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) (and (and (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|)))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Map#Domain| (Lit |mapc#0@@4|))))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@462) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (|Map#Glue| (|lambda#232| Maps._default.MapDisjointUnion3$U@@4 (|Set#Union| (|Set#Union| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Map#Domain| (Lit |mapc#0@@4|)))) (|lambda#294| (|Map#Domain| |mapa#0@@46|) (|Map#Elements| (Lit |mapa#0@@46|)) (|Map#Domain| |mapb#0@@46|) (|Map#Elements| (Lit |mapb#0@@46|)) (|Map#Elements| (Lit |mapc#0@@4|))) (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |4728| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@462) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|))) ))))
(assert (forall ((arg0@@366 T@U) (arg1@@215 T@U) (arg2@@148 T@U) ) (! (= (type (Maps.__default.MapToImap arg0@@366 arg1@@215 arg2@@148)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.MapToImap| :pattern ( (Maps.__default.MapToImap arg0@@366 arg1@@215 arg2@@148)) )))
(assert  (=> true (forall ((Maps._default.MapToImap$K T@U) (Maps._default.MapToImap$V T@U) (|m#0@@80| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K) TyType) (= (type Maps._default.MapToImap$V) TyType)) (= (type |m#0@@80|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@80|) ($Is |m#0@@80| (TMap Maps._default.MapToImap$K Maps._default.MapToImap$V)))) ($Is (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@80|) (TIMap Maps._default.MapToImap$K Maps._default.MapToImap$V))) :qid |unknown.0:0| :skolemid |4729| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@80|)) ))))
(assert (forall ((Maps._default.MapToImap$K@@0 T@U) (Maps._default.MapToImap$V@@0 T@U) (|m#0@@81| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@0) TyType) (= (type Maps._default.MapToImap$V@@0) TyType)) (= (type |m#0@@81|) (MapType BoxType BoxType))) ($Is |m#0@@81| (TMap Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0))) (= (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@81|) true)) :qid |unknown.0:0| :skolemid |4730| :pattern ( (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@81|)) )))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@1 T@U) (Maps._default.MapToImap$V@@1 T@U) (|m#0@@82| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@1) TyType) (= (type Maps._default.MapToImap$V@@1) TyType)) (= (type |m#0@@82|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@82|) ($Is |m#0@@82| (TMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@82|) (|IMap#Glue| (|lambda#232| Maps._default.MapToImap$K@@1 (|Map#Domain| |m#0@@82|)) (|lambda#146| (|Map#Elements| |m#0@@82|)) (TIMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1)))) :qid |unknown.0:0| :skolemid |4731| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@82|)) ))))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@2 T@U) (Maps._default.MapToImap$V@@2 T@U) (|m#0@@83| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@2) TyType) (= (type Maps._default.MapToImap$V@@2) TyType)) (= (type |m#0@@83|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@83|)) ($Is |m#0@@83| (TMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@83|)) (|IMap#Glue| (|lambda#232| Maps._default.MapToImap$K@@2 (|Map#Domain| |m#0@@83|)) (|lambda#146| (|Map#Elements| (Lit |m#0@@83|))) (TIMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |4732| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@83|))) ))))
(assert (forall ((arg0@@367 T@U) (arg1@@216 T@U) (arg2@@149 T@U) (arg3@@96 T@U) ) (! (= (type (Maps.__default.MapLookupOption arg0@@367 arg1@@216 arg2@@149 arg3@@96)) DatatypeTypeType) :qid |funType:Maps.__default.MapLookupOption| :pattern ( (Maps.__default.MapLookupOption arg0@@367 arg1@@216 arg2@@149 arg3@@96)) )))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K T@U) (Maps._default.MapLookupOption$V T@U) (|m#0@@84| T@U) (|key#0@@102| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K) TyType) (= (type Maps._default.MapLookupOption$V) TyType)) (= (type |m#0@@84|) (MapType BoxType BoxType))) (= (type |key#0@@102|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@84| |key#0@@102|) (and ($Is |m#0@@84| (TMap Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V)) ($IsBox |key#0@@102| Maps._default.MapLookupOption$K)))) ($Is (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@84| |key#0@@102|) (Tclass.Options.Option Maps._default.MapLookupOption$V))) :qid |unknown.0:0| :skolemid |4733| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@84| |key#0@@102|)) ))))
(assert (forall ((Maps._default.MapLookupOption$K@@0 T@U) (Maps._default.MapLookupOption$V@@0 T@U) (|m#0@@85| T@U) (|key#0@@103| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@0) TyType) (= (type Maps._default.MapLookupOption$V@@0) TyType)) (= (type |m#0@@85|) (MapType BoxType BoxType))) (= (type |key#0@@103|) BoxType)) (and ($Is |m#0@@85| (TMap Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0)) ($IsBox |key#0@@103| Maps._default.MapLookupOption$K@@0))) (= (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@85| |key#0@@103|) true)) :qid |unknown.0:0| :skolemid |4734| :pattern ( (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@85| |key#0@@103|)) )))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@1 T@U) (Maps._default.MapLookupOption$V@@1 T@U) (|m#0@@86| T@U) (|key#0@@104| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@1) TyType) (= (type Maps._default.MapLookupOption$V@@1) TyType)) (= (type |m#0@@86|) (MapType BoxType BoxType))) (= (type |key#0@@104|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@86| |key#0@@104|) (and ($Is |m#0@@86| (TMap Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1)) ($IsBox |key#0@@104| Maps._default.MapLookupOption$K@@1)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@86| |key#0@@104|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@86|) |key#0@@104|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |m#0@@86|) |key#0@@104|)) |#Options.Option.None|))) :qid |unknown.0:0| :skolemid |4735| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@86| |key#0@@104|)) ))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@2 T@U) (Maps._default.MapLookupOption$V@@2 T@U) (|m#0@@87| T@U) (|key#0@@105| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@2) TyType) (= (type Maps._default.MapLookupOption$V@@2) TyType)) (= (type |m#0@@87|) (MapType BoxType BoxType))) (= (type |key#0@@105|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@87|) |key#0@@105|) (and ($Is |m#0@@87| (TMap Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2)) ($IsBox |key#0@@105| Maps._default.MapLookupOption$K@@2)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@87|) |key#0@@105|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@87|) |key#0@@105|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@87|)) |key#0@@105|)) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |4736| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@87|) |key#0@@105|)) ))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@3 T@U) (Maps._default.MapLookupOption$V@@3 T@U) (|m#0@@88| T@U) (|key#0@@106| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@3) TyType) (= (type Maps._default.MapLookupOption$V@@3) TyType)) (= (type |m#0@@88|) (MapType BoxType BoxType))) (= (type |key#0@@106|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@88|) (Lit |key#0@@106|)) (and ($Is |m#0@@88| (TMap Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3)) ($IsBox |key#0@@106| Maps._default.MapLookupOption$K@@3)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@88|) (Lit |key#0@@106|)) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@88|) |key#0@@106|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@88|)) (Lit |key#0@@106|))) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |4737| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@88|) (Lit |key#0@@106|))) ))))
(assert (forall ((arg0@@368 T@U) (arg1@@217 T@U) (arg2@@150 T@U) (arg3@@97 T@U) ) (! (= (type (Maps.__default.ImapLookupOption arg0@@368 arg1@@217 arg2@@150 arg3@@97)) DatatypeTypeType) :qid |funType:Maps.__default.ImapLookupOption| :pattern ( (Maps.__default.ImapLookupOption arg0@@368 arg1@@217 arg2@@150 arg3@@97)) )))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K T@U) (Maps._default.ImapLookupOption$V T@U) (|m#0@@89| T@U) (|key#0@@107| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K) TyType) (= (type Maps._default.ImapLookupOption$V) TyType)) (= (type |m#0@@89|) (IMapType BoxType BoxType))) (= (type |key#0@@107|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@89| |key#0@@107|) (and ($Is |m#0@@89| (TIMap Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V)) ($IsBox |key#0@@107| Maps._default.ImapLookupOption$K)))) ($Is (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@89| |key#0@@107|) (Tclass.Options.Option Maps._default.ImapLookupOption$V))) :qid |unknown.0:0| :skolemid |4738| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@89| |key#0@@107|)) ))))
(assert (forall ((Maps._default.ImapLookupOption$K@@0 T@U) (Maps._default.ImapLookupOption$V@@0 T@U) (|m#0@@90| T@U) (|key#0@@108| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@0) TyType) (= (type Maps._default.ImapLookupOption$V@@0) TyType)) (= (type |m#0@@90|) (IMapType BoxType BoxType))) (= (type |key#0@@108|) BoxType)) (and ($Is |m#0@@90| (TIMap Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0)) ($IsBox |key#0@@108| Maps._default.ImapLookupOption$K@@0))) (= (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@90| |key#0@@108|) true)) :qid |unknown.0:0| :skolemid |4739| :pattern ( (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@90| |key#0@@108|)) )))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@1 T@U) (Maps._default.ImapLookupOption$V@@1 T@U) (|m#0@@91| T@U) (|key#0@@109| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@1) TyType) (= (type Maps._default.ImapLookupOption$V@@1) TyType)) (= (type |m#0@@91|) (IMapType BoxType BoxType))) (= (type |key#0@@109|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@91| |key#0@@109|) (and ($Is |m#0@@91| (TIMap Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1)) ($IsBox |key#0@@109| Maps._default.ImapLookupOption$K@@1)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@91| |key#0@@109|) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@91|) |key#0@@109|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| |m#0@@91|) |key#0@@109|)) |#Options.Option.None|))) :qid |unknown.0:0| :skolemid |4740| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@91| |key#0@@109|)) ))))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@2 T@U) (Maps._default.ImapLookupOption$V@@2 T@U) (|m#0@@92| T@U) (|key#0@@110| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@2) TyType) (= (type Maps._default.ImapLookupOption$V@@2) TyType)) (= (type |m#0@@92|) (IMapType BoxType BoxType))) (= (type |key#0@@110|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@92|) (Lit |key#0@@110|)) (and ($Is |m#0@@92| (TIMap Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2)) ($IsBox |key#0@@110| Maps._default.ImapLookupOption$K@@2)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@92|) (Lit |key#0@@110|)) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@92|) |key#0@@110|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| (Lit |m#0@@92|)) (Lit |key#0@@110|))) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |4741| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@92|) (Lit |key#0@@110|))) ))))
(assert (= (type Tclass.SetBijectivity.__default) TyType))
(assert (= (Tag Tclass.SetBijectivity.__default) Tagclass.SetBijectivity.__default))
(assert (= (TagFamily Tclass.SetBijectivity.__default) tytagFamily$_default))
(assert (forall ((bx@@103 T@U) ) (!  (=> (and (= (type bx@@103) BoxType) ($IsBox bx@@103 Tclass.SetBijectivity.__default)) (and (= ($Box ($Unbox refType bx@@103)) bx@@103) ($Is ($Unbox refType bx@@103) Tclass.SetBijectivity.__default))) :qid |unknown.0:0| :skolemid |4742| :pattern ( ($IsBox bx@@103 Tclass.SetBijectivity.__default)) )))
(assert (forall (($o@@32 T@U) ) (!  (=> (= (type $o@@32) refType) (= ($Is $o@@32 Tclass.SetBijectivity.__default)  (or (= $o@@32 null) (= (dtype $o@@32) Tclass.SetBijectivity.__default)))) :qid |unknown.0:0| :skolemid |4743| :pattern ( ($Is $o@@32 Tclass.SetBijectivity.__default)) )))
(assert (forall (($o@@33 T@U) ($h@@80 T@U) ) (!  (=> (and (= (type $o@@33) refType) (= (type $h@@80) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@33 Tclass.SetBijectivity.__default $h@@80)  (or (= $o@@33 null) (U_2_bool (MapType1Select (MapType0Select $h@@80 $o@@33) alloc))))) :qid |unknown.0:0| :skolemid |4744| :pattern ( ($IsAlloc $o@@33 Tclass.SetBijectivity.__default $h@@80)) )))
(assert (= (type Tclass.NativeArithmetic.__default) TyType))
(assert (= (Tag Tclass.NativeArithmetic.__default) Tagclass.NativeArithmetic.__default))
(assert (= (TagFamily Tclass.NativeArithmetic.__default) tytagFamily$_default))
(assert (forall ((bx@@104 T@U) ) (!  (=> (and (= (type bx@@104) BoxType) ($IsBox bx@@104 Tclass.NativeArithmetic.__default)) (and (= ($Box ($Unbox refType bx@@104)) bx@@104) ($Is ($Unbox refType bx@@104) Tclass.NativeArithmetic.__default))) :qid |unknown.0:0| :skolemid |4751| :pattern ( ($IsBox bx@@104 Tclass.NativeArithmetic.__default)) )))
(assert (forall (($o@@34 T@U) ) (!  (=> (= (type $o@@34) refType) (= ($Is $o@@34 Tclass.NativeArithmetic.__default)  (or (= $o@@34 null) (= (dtype $o@@34) Tclass.NativeArithmetic.__default)))) :qid |unknown.0:0| :skolemid |4752| :pattern ( ($Is $o@@34 Tclass.NativeArithmetic.__default)) )))
(assert (forall (($o@@35 T@U) ($h@@81 T@U) ) (!  (=> (and (= (type $o@@35) refType) (= (type $h@@81) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@35 Tclass.NativeArithmetic.__default $h@@81)  (or (= $o@@35 null) (U_2_bool (MapType1Select (MapType0Select $h@@81 $o@@35) alloc))))) :qid |unknown.0:0| :skolemid |4753| :pattern ( ($IsAlloc $o@@35 Tclass.NativeArithmetic.__default $h@@81)) )))
(assert  (=> true (forall ((|a#0@@98| Int) (|b#0@@66| Int) ) (!  (=> (or (|NativeArithmetic.__default.u64add#canCall| |a#0@@98| |b#0@@66|) (and (and (<= (LitInt 0) |a#0@@98|) (< |a#0@@98| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@66|) (< |b#0@@66| 18446744073709551616)))) (and (= (NativeArithmetic.__default.u64add |a#0@@98| |b#0@@66|) (ite (< (+ |a#0@@98| |b#0@@66|) 18446744073709551616) (+ |a#0@@98| |b#0@@66|) (- (+ |a#0@@98| |b#0@@66|) 18446744073709551616))) (and (<= (LitInt 0) (NativeArithmetic.__default.u64add |a#0@@98| |b#0@@66|)) (< (NativeArithmetic.__default.u64add |a#0@@98| |b#0@@66|) 18446744073709551616)))) :qid |Arithmeticsdfy.12:10| :skolemid |4754| :pattern ( (NativeArithmetic.__default.u64add |a#0@@98| |b#0@@66|)) ))))
(assert (forall ((|a#0@@99| Int) (|b#0@@67| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@99|) (< |a#0@@99| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@67|) (< |b#0@@67| 18446744073709551616))) (= (|NativeArithmetic.__default.u64add#requires| |a#0@@99| |b#0@@67|) true)) :qid |Arithmeticsdfy.12:10| :skolemid |4755| :pattern ( (|NativeArithmetic.__default.u64add#requires| |a#0@@99| |b#0@@67|)) )))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@369 T@T) (arg1@@218 T@T) ) (! (= (Ctor (MapType6Type arg0@@369 arg1@@218)) 29) :qid |ctor:MapType6Type| )) (forall ((arg0@@370 T@T) (arg1@@219 T@T) ) (! (= (MapType6TypeInv0 (MapType6Type arg0@@370 arg1@@219)) arg0@@370) :qid |typeInv:MapType6TypeInv0| :pattern ( (MapType6Type arg0@@370 arg1@@219)) ))) (forall ((arg0@@371 T@T) (arg1@@220 T@T) ) (! (= (MapType6TypeInv1 (MapType6Type arg0@@371 arg1@@220)) arg1@@220) :qid |typeInv:MapType6TypeInv1| :pattern ( (MapType6Type arg0@@371 arg1@@220)) ))) (forall ((arg0@@372 T@U) (arg1@@221 T@U) (arg2@@151 T@U) ) (! (let ((aVar1@@6 (MapType6TypeInv1 (type arg0@@372)))) (= (type (MapType6Select arg0@@372 arg1@@221 arg2@@151)) aVar1@@6)) :qid |funType:MapType6Select| :pattern ( (MapType6Select arg0@@372 arg1@@221 arg2@@151)) ))) (forall ((arg0@@373 T@U) (arg1@@222 T@U) (arg2@@152 T@U) (arg3@@98 T@U) ) (! (let ((aVar1@@7 (type arg3@@98))) (let ((aVar0@@4 (type arg1@@222))) (= (type (MapType6Store arg0@@373 arg1@@222 arg2@@152 arg3@@98)) (MapType6Type aVar0@@4 aVar1@@7)))) :qid |funType:MapType6Store| :pattern ( (MapType6Store arg0@@373 arg1@@222 arg2@@152 arg3@@98)) ))) (forall ((m@@67 T@U) (x0@@27 T@U) (x1@@21 T@U) (val@@28 T@U) ) (! (let ((aVar1@@8 (MapType6TypeInv1 (type m@@67)))) (=> (= (type val@@28) aVar1@@8) (= (MapType6Select (MapType6Store m@@67 x0@@27 x1@@21 val@@28) x0@@27 x1@@21) val@@28))) :qid |mapAx0:MapType6Select| :weight 0 ))) (and (and (forall ((val@@29 T@U) (m@@68 T@U) (x0@@28 T@U) (x1@@22 T@U) (y0@@21 T@U) (y1@@17 T@U) ) (!  (or (= x0@@28 y0@@21) (= (MapType6Select (MapType6Store m@@68 x0@@28 x1@@22 val@@29) y0@@21 y1@@17) (MapType6Select m@@68 y0@@21 y1@@17))) :qid |mapAx1:MapType6Select:0| :weight 0 )) (forall ((val@@30 T@U) (m@@69 T@U) (x0@@29 T@U) (x1@@23 T@U) (y0@@22 T@U) (y1@@18 T@U) ) (!  (or (= x1@@23 y1@@18) (= (MapType6Select (MapType6Store m@@69 x0@@29 x1@@23 val@@30) y0@@22 y1@@18) (MapType6Select m@@69 y0@@22 y1@@18))) :qid |mapAx1:MapType6Select:1| :weight 0 ))) (forall ((val@@31 T@U) (m@@70 T@U) (x0@@30 T@U) (x1@@24 T@U) (y0@@23 T@U) (y1@@19 T@U) ) (!  (or true (= (MapType6Select (MapType6Store m@@70 x0@@30 x1@@24 val@@31) y0@@23 y1@@19) (MapType6Select m@@70 y0@@23 y1@@19))) :qid |mapAx2:MapType6Select| :weight 0 )))) (forall ((arg0@@374 T@U) (arg1@@223 T@U) (arg2@@153 T@U) (arg3@@99 Bool) ) (! (= (type (|lambda#0| arg0@@374 arg1@@223 arg2@@153 arg3@@99)) (MapType6Type refType boolType)) :qid |funType:lambda#0| :pattern ( (|lambda#0| arg0@@374 arg1@@223 arg2@@153 arg3@@99)) ))))
(assert (forall ((|l#0| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@36 T@U) ($f@@4 T@U) ) (! (let ((alpha@@11 (FieldTypeInv0 (type $f@@4)))) (=> (and (and (and (and (= (type |l#0|) refType) (= (type |l#1|) (MapType0Type refType MapType1Type))) (= (type |l#2|) (FieldType boolType))) (= (type $o@@36) refType)) (= (type $f@@4) (FieldType alpha@@11))) (= (U_2_bool (MapType6Select (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@36 $f@@4))  (=> (and (not (= $o@@36 |l#0|)) (U_2_bool (MapType1Select (MapType0Select |l#1| $o@@36) |l#2|))) |l#3|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4756| :pattern ( (MapType6Select (|lambda#0| |l#0| |l#1| |l#2| |l#3|) $o@@36 $f@@4)) )))
(assert (forall ((arg0@@375 T@U) (arg1@@224 T@U) (arg2@@154 T@U) (arg3@@100 Bool) ) (! (= (type (|lambda#1| arg0@@375 arg1@@224 arg2@@154 arg3@@100)) (MapType6Type refType boolType)) :qid |funType:lambda#1| :pattern ( (|lambda#1| arg0@@375 arg1@@224 arg2@@154 arg3@@100)) )))
(assert (forall ((|l#0@@0| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| Bool) ($o@@37 T@U) ($f@@5 T@U) ) (! (let ((alpha@@12 (FieldTypeInv0 (type $f@@5)))) (=> (and (and (and (and (= (type |l#0@@0|) refType) (= (type |l#1@@0|) (MapType0Type refType MapType1Type))) (= (type |l#2@@0|) (FieldType boolType))) (= (type $o@@37) refType)) (= (type $f@@5) (FieldType alpha@@12))) (= (U_2_bool (MapType6Select (|lambda#1| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@37 $f@@5))  (=> (and (not (= $o@@37 |l#0@@0|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@0| $o@@37) |l#2@@0|))) |l#3@@0|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4757| :pattern ( (MapType6Select (|lambda#1| |l#0@@0| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@37 $f@@5)) )))
(assert (forall ((arg0@@376 T@U) (arg1@@225 T@U) (arg2@@155 T@U) (arg3@@101 Bool) ) (! (= (type (|lambda#2| arg0@@376 arg1@@225 arg2@@155 arg3@@101)) (MapType6Type refType boolType)) :qid |funType:lambda#2| :pattern ( (|lambda#2| arg0@@376 arg1@@225 arg2@@155 arg3@@101)) )))
(assert (forall ((|l#0@@1| T@U) (|l#1@@1| T@U) (|l#2@@1| T@U) (|l#3@@1| Bool) ($o@@38 T@U) ($f@@6 T@U) ) (! (let ((alpha@@13 (FieldTypeInv0 (type $f@@6)))) (=> (and (and (and (and (= (type |l#0@@1|) refType) (= (type |l#1@@1|) (MapType0Type refType MapType1Type))) (= (type |l#2@@1|) (FieldType boolType))) (= (type $o@@38) refType)) (= (type $f@@6) (FieldType alpha@@13))) (= (U_2_bool (MapType6Select (|lambda#2| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@38 $f@@6))  (=> (and (not (= $o@@38 |l#0@@1|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@1| $o@@38) |l#2@@1|))) |l#3@@1|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4758| :pattern ( (MapType6Select (|lambda#2| |l#0@@1| |l#1@@1| |l#2@@1| |l#3@@1|) $o@@38 $f@@6)) )))
(assert (forall ((arg0@@377 T@U) (arg1@@226 T@U) (arg2@@156 T@U) (arg3@@102 Bool) ) (! (= (type (|lambda#3| arg0@@377 arg1@@226 arg2@@156 arg3@@102)) (MapType6Type refType boolType)) :qid |funType:lambda#3| :pattern ( (|lambda#3| arg0@@377 arg1@@226 arg2@@156 arg3@@102)) )))
(assert (forall ((|l#0@@2| T@U) (|l#1@@2| T@U) (|l#2@@2| T@U) (|l#3@@2| Bool) ($o@@39 T@U) ($f@@7 T@U) ) (! (let ((alpha@@14 (FieldTypeInv0 (type $f@@7)))) (=> (and (and (and (and (= (type |l#0@@2|) refType) (= (type |l#1@@2|) (MapType0Type refType MapType1Type))) (= (type |l#2@@2|) (FieldType boolType))) (= (type $o@@39) refType)) (= (type $f@@7) (FieldType alpha@@14))) (= (U_2_bool (MapType6Select (|lambda#3| |l#0@@2| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@39 $f@@7))  (=> (and (not (= $o@@39 |l#0@@2|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@2| $o@@39) |l#2@@2|))) |l#3@@2|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4759| :pattern ( (MapType6Select (|lambda#3| |l#0@@2| |l#1@@2| |l#2@@2| |l#3@@2|) $o@@39 $f@@7)) )))
(assert (forall ((arg0@@378 T@U) (arg1@@227 T@U) (arg2@@157 T@U) (arg3@@103 Bool) ) (! (= (type (|lambda#4| arg0@@378 arg1@@227 arg2@@157 arg3@@103)) (MapType6Type refType boolType)) :qid |funType:lambda#4| :pattern ( (|lambda#4| arg0@@378 arg1@@227 arg2@@157 arg3@@103)) )))
(assert (forall ((|l#0@@3| T@U) (|l#1@@3| T@U) (|l#2@@3| T@U) (|l#3@@3| Bool) ($o@@40 T@U) ($f@@8 T@U) ) (! (let ((alpha@@15 (FieldTypeInv0 (type $f@@8)))) (=> (and (and (and (and (= (type |l#0@@3|) refType) (= (type |l#1@@3|) (MapType0Type refType MapType1Type))) (= (type |l#2@@3|) (FieldType boolType))) (= (type $o@@40) refType)) (= (type $f@@8) (FieldType alpha@@15))) (= (U_2_bool (MapType6Select (|lambda#4| |l#0@@3| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@40 $f@@8))  (=> (and (not (= $o@@40 |l#0@@3|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@3| $o@@40) |l#2@@3|))) |l#3@@3|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4760| :pattern ( (MapType6Select (|lambda#4| |l#0@@3| |l#1@@3| |l#2@@3| |l#3@@3|) $o@@40 $f@@8)) )))
(assert (forall ((arg0@@379 T@U) (arg1@@228 T@U) (arg2@@158 T@U) (arg3@@104 Bool) ) (! (= (type (|lambda#5| arg0@@379 arg1@@228 arg2@@158 arg3@@104)) (MapType6Type refType boolType)) :qid |funType:lambda#5| :pattern ( (|lambda#5| arg0@@379 arg1@@228 arg2@@158 arg3@@104)) )))
(assert (forall ((|l#0@@4| T@U) (|l#1@@4| T@U) (|l#2@@4| T@U) (|l#3@@4| Bool) ($o@@41 T@U) ($f@@9 T@U) ) (! (let ((alpha@@16 (FieldTypeInv0 (type $f@@9)))) (=> (and (and (and (and (= (type |l#0@@4|) refType) (= (type |l#1@@4|) (MapType0Type refType MapType1Type))) (= (type |l#2@@4|) (FieldType boolType))) (= (type $o@@41) refType)) (= (type $f@@9) (FieldType alpha@@16))) (= (U_2_bool (MapType6Select (|lambda#5| |l#0@@4| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@41 $f@@9))  (=> (and (not (= $o@@41 |l#0@@4|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@4| $o@@41) |l#2@@4|))) |l#3@@4|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4761| :pattern ( (MapType6Select (|lambda#5| |l#0@@4| |l#1@@4| |l#2@@4| |l#3@@4|) $o@@41 $f@@9)) )))
(assert (forall ((arg0@@380 T@U) (arg1@@229 T@U) (arg2@@159 T@U) (arg3@@105 Bool) ) (! (= (type (|lambda#6| arg0@@380 arg1@@229 arg2@@159 arg3@@105)) (MapType6Type refType boolType)) :qid |funType:lambda#6| :pattern ( (|lambda#6| arg0@@380 arg1@@229 arg2@@159 arg3@@105)) )))
(assert (forall ((|l#0@@5| T@U) (|l#1@@5| T@U) (|l#2@@5| T@U) (|l#3@@5| Bool) ($o@@42 T@U) ($f@@10 T@U) ) (! (let ((alpha@@17 (FieldTypeInv0 (type $f@@10)))) (=> (and (and (and (and (= (type |l#0@@5|) refType) (= (type |l#1@@5|) (MapType0Type refType MapType1Type))) (= (type |l#2@@5|) (FieldType boolType))) (= (type $o@@42) refType)) (= (type $f@@10) (FieldType alpha@@17))) (= (U_2_bool (MapType6Select (|lambda#6| |l#0@@5| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@42 $f@@10))  (=> (and (not (= $o@@42 |l#0@@5|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@5| $o@@42) |l#2@@5|))) |l#3@@5|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4762| :pattern ( (MapType6Select (|lambda#6| |l#0@@5| |l#1@@5| |l#2@@5| |l#3@@5|) $o@@42 $f@@10)) )))
(assert (forall ((arg0@@381 T@U) (arg1@@230 T@U) (arg2@@160 T@U) (arg3@@106 Bool) ) (! (= (type (|lambda#7| arg0@@381 arg1@@230 arg2@@160 arg3@@106)) (MapType6Type refType boolType)) :qid |funType:lambda#7| :pattern ( (|lambda#7| arg0@@381 arg1@@230 arg2@@160 arg3@@106)) )))
(assert (forall ((|l#0@@6| T@U) (|l#1@@6| T@U) (|l#2@@6| T@U) (|l#3@@6| Bool) ($o@@43 T@U) ($f@@11 T@U) ) (! (let ((alpha@@18 (FieldTypeInv0 (type $f@@11)))) (=> (and (and (and (and (= (type |l#0@@6|) refType) (= (type |l#1@@6|) (MapType0Type refType MapType1Type))) (= (type |l#2@@6|) (FieldType boolType))) (= (type $o@@43) refType)) (= (type $f@@11) (FieldType alpha@@18))) (= (U_2_bool (MapType6Select (|lambda#7| |l#0@@6| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@43 $f@@11))  (=> (and (not (= $o@@43 |l#0@@6|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@6| $o@@43) |l#2@@6|))) |l#3@@6|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4763| :pattern ( (MapType6Select (|lambda#7| |l#0@@6| |l#1@@6| |l#2@@6| |l#3@@6|) $o@@43 $f@@11)) )))
(assert (forall ((arg0@@382 T@U) (arg1@@231 T@U) (arg2@@161 T@U) (arg3@@107 Bool) ) (! (= (type (|lambda#8| arg0@@382 arg1@@231 arg2@@161 arg3@@107)) (MapType6Type refType boolType)) :qid |funType:lambda#8| :pattern ( (|lambda#8| arg0@@382 arg1@@231 arg2@@161 arg3@@107)) )))
(assert (forall ((|l#0@@7| T@U) (|l#1@@7| T@U) (|l#2@@7| T@U) (|l#3@@7| Bool) ($o@@44 T@U) ($f@@12 T@U) ) (! (let ((alpha@@19 (FieldTypeInv0 (type $f@@12)))) (=> (and (and (and (and (= (type |l#0@@7|) refType) (= (type |l#1@@7|) (MapType0Type refType MapType1Type))) (= (type |l#2@@7|) (FieldType boolType))) (= (type $o@@44) refType)) (= (type $f@@12) (FieldType alpha@@19))) (= (U_2_bool (MapType6Select (|lambda#8| |l#0@@7| |l#1@@7| |l#2@@7| |l#3@@7|) $o@@44 $f@@12))  (=> (and (not (= $o@@44 |l#0@@7|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@7| $o@@44) |l#2@@7|))) |l#3@@7|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4764| :pattern ( (MapType6Select (|lambda#8| |l#0@@7| |l#1@@7| |l#2@@7| |l#3@@7|) $o@@44 $f@@12)) )))
(assert (forall ((arg0@@383 T@U) (arg1@@232 T@U) (arg2@@162 T@U) (arg3@@108 Bool) ) (! (= (type (|lambda#9| arg0@@383 arg1@@232 arg2@@162 arg3@@108)) (MapType6Type refType boolType)) :qid |funType:lambda#9| :pattern ( (|lambda#9| arg0@@383 arg1@@232 arg2@@162 arg3@@108)) )))
(assert (forall ((|l#0@@8| T@U) (|l#1@@8| T@U) (|l#2@@8| T@U) (|l#3@@8| Bool) ($o@@45 T@U) ($f@@13 T@U) ) (! (let ((alpha@@20 (FieldTypeInv0 (type $f@@13)))) (=> (and (and (and (and (= (type |l#0@@8|) refType) (= (type |l#1@@8|) (MapType0Type refType MapType1Type))) (= (type |l#2@@8|) (FieldType boolType))) (= (type $o@@45) refType)) (= (type $f@@13) (FieldType alpha@@20))) (= (U_2_bool (MapType6Select (|lambda#9| |l#0@@8| |l#1@@8| |l#2@@8| |l#3@@8|) $o@@45 $f@@13))  (=> (and (not (= $o@@45 |l#0@@8|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@8| $o@@45) |l#2@@8|))) |l#3@@8|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4765| :pattern ( (MapType6Select (|lambda#9| |l#0@@8| |l#1@@8| |l#2@@8| |l#3@@8|) $o@@45 $f@@13)) )))
(assert (forall ((arg0@@384 T@U) (arg1@@233 T@U) (arg2@@163 T@U) (arg3@@109 Bool) ) (! (= (type (|lambda#10| arg0@@384 arg1@@233 arg2@@163 arg3@@109)) (MapType6Type refType boolType)) :qid |funType:lambda#10| :pattern ( (|lambda#10| arg0@@384 arg1@@233 arg2@@163 arg3@@109)) )))
(assert (forall ((|l#0@@9| T@U) (|l#1@@9| T@U) (|l#2@@9| T@U) (|l#3@@9| Bool) ($o@@46 T@U) ($f@@14 T@U) ) (! (let ((alpha@@21 (FieldTypeInv0 (type $f@@14)))) (=> (and (and (and (and (= (type |l#0@@9|) refType) (= (type |l#1@@9|) (MapType0Type refType MapType1Type))) (= (type |l#2@@9|) (FieldType boolType))) (= (type $o@@46) refType)) (= (type $f@@14) (FieldType alpha@@21))) (= (U_2_bool (MapType6Select (|lambda#10| |l#0@@9| |l#1@@9| |l#2@@9| |l#3@@9|) $o@@46 $f@@14))  (=> (and (not (= $o@@46 |l#0@@9|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@9| $o@@46) |l#2@@9|))) |l#3@@9|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4766| :pattern ( (MapType6Select (|lambda#10| |l#0@@9| |l#1@@9| |l#2@@9| |l#3@@9|) $o@@46 $f@@14)) )))
(assert (forall ((arg0@@385 T@U) (arg1@@234 T@U) (arg2@@164 T@U) (arg3@@110 Bool) ) (! (= (type (|lambda#11| arg0@@385 arg1@@234 arg2@@164 arg3@@110)) (MapType6Type refType boolType)) :qid |funType:lambda#11| :pattern ( (|lambda#11| arg0@@385 arg1@@234 arg2@@164 arg3@@110)) )))
(assert (forall ((|l#0@@10| T@U) (|l#1@@10| T@U) (|l#2@@10| T@U) (|l#3@@10| Bool) ($o@@47 T@U) ($f@@15 T@U) ) (! (let ((alpha@@22 (FieldTypeInv0 (type $f@@15)))) (=> (and (and (and (and (= (type |l#0@@10|) refType) (= (type |l#1@@10|) (MapType0Type refType MapType1Type))) (= (type |l#2@@10|) (FieldType boolType))) (= (type $o@@47) refType)) (= (type $f@@15) (FieldType alpha@@22))) (= (U_2_bool (MapType6Select (|lambda#11| |l#0@@10| |l#1@@10| |l#2@@10| |l#3@@10|) $o@@47 $f@@15))  (=> (and (not (= $o@@47 |l#0@@10|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@10| $o@@47) |l#2@@10|))) |l#3@@10|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4767| :pattern ( (MapType6Select (|lambda#11| |l#0@@10| |l#1@@10| |l#2@@10| |l#3@@10|) $o@@47 $f@@15)) )))
(assert (forall ((arg0@@386 T@U) (arg1@@235 T@U) (arg2@@165 T@U) (arg3@@111 Bool) ) (! (= (type (|lambda#12| arg0@@386 arg1@@235 arg2@@165 arg3@@111)) (MapType6Type refType boolType)) :qid |funType:lambda#12| :pattern ( (|lambda#12| arg0@@386 arg1@@235 arg2@@165 arg3@@111)) )))
(assert (forall ((|l#0@@11| T@U) (|l#1@@11| T@U) (|l#2@@11| T@U) (|l#3@@11| Bool) ($o@@48 T@U) ($f@@16 T@U) ) (! (let ((alpha@@23 (FieldTypeInv0 (type $f@@16)))) (=> (and (and (and (and (= (type |l#0@@11|) refType) (= (type |l#1@@11|) (MapType0Type refType MapType1Type))) (= (type |l#2@@11|) (FieldType boolType))) (= (type $o@@48) refType)) (= (type $f@@16) (FieldType alpha@@23))) (= (U_2_bool (MapType6Select (|lambda#12| |l#0@@11| |l#1@@11| |l#2@@11| |l#3@@11|) $o@@48 $f@@16))  (=> (and (not (= $o@@48 |l#0@@11|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@11| $o@@48) |l#2@@11|))) |l#3@@11|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4768| :pattern ( (MapType6Select (|lambda#12| |l#0@@11| |l#1@@11| |l#2@@11| |l#3@@11|) $o@@48 $f@@16)) )))
(assert (forall ((arg0@@387 T@U) (arg1@@236 T@U) (arg2@@166 T@U) (arg3@@112 Bool) ) (! (= (type (|lambda#13| arg0@@387 arg1@@236 arg2@@166 arg3@@112)) (MapType6Type refType boolType)) :qid |funType:lambda#13| :pattern ( (|lambda#13| arg0@@387 arg1@@236 arg2@@166 arg3@@112)) )))
(assert (forall ((|l#0@@12| T@U) (|l#1@@12| T@U) (|l#2@@12| T@U) (|l#3@@12| Bool) ($o@@49 T@U) ($f@@17 T@U) ) (! (let ((alpha@@24 (FieldTypeInv0 (type $f@@17)))) (=> (and (and (and (and (= (type |l#0@@12|) refType) (= (type |l#1@@12|) (MapType0Type refType MapType1Type))) (= (type |l#2@@12|) (FieldType boolType))) (= (type $o@@49) refType)) (= (type $f@@17) (FieldType alpha@@24))) (= (U_2_bool (MapType6Select (|lambda#13| |l#0@@12| |l#1@@12| |l#2@@12| |l#3@@12|) $o@@49 $f@@17))  (=> (and (not (= $o@@49 |l#0@@12|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@12| $o@@49) |l#2@@12|))) |l#3@@12|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4769| :pattern ( (MapType6Select (|lambda#13| |l#0@@12| |l#1@@12| |l#2@@12| |l#3@@12|) $o@@49 $f@@17)) )))
(assert (forall ((arg0@@388 T@U) (arg1@@237 T@U) (arg2@@167 T@U) (arg3@@113 Bool) ) (! (= (type (|lambda#14| arg0@@388 arg1@@237 arg2@@167 arg3@@113)) (MapType6Type refType boolType)) :qid |funType:lambda#14| :pattern ( (|lambda#14| arg0@@388 arg1@@237 arg2@@167 arg3@@113)) )))
(assert (forall ((|l#0@@13| T@U) (|l#1@@13| T@U) (|l#2@@13| T@U) (|l#3@@13| Bool) ($o@@50 T@U) ($f@@18 T@U) ) (! (let ((alpha@@25 (FieldTypeInv0 (type $f@@18)))) (=> (and (and (and (and (= (type |l#0@@13|) refType) (= (type |l#1@@13|) (MapType0Type refType MapType1Type))) (= (type |l#2@@13|) (FieldType boolType))) (= (type $o@@50) refType)) (= (type $f@@18) (FieldType alpha@@25))) (= (U_2_bool (MapType6Select (|lambda#14| |l#0@@13| |l#1@@13| |l#2@@13| |l#3@@13|) $o@@50 $f@@18))  (=> (and (not (= $o@@50 |l#0@@13|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@13| $o@@50) |l#2@@13|))) |l#3@@13|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4770| :pattern ( (MapType6Select (|lambda#14| |l#0@@13| |l#1@@13| |l#2@@13| |l#3@@13|) $o@@50 $f@@18)) )))
(assert (forall ((arg0@@389 T@U) (arg1@@238 T@U) (arg2@@168 T@U) (arg3@@114 Bool) ) (! (= (type (|lambda#15| arg0@@389 arg1@@238 arg2@@168 arg3@@114)) (MapType6Type refType boolType)) :qid |funType:lambda#15| :pattern ( (|lambda#15| arg0@@389 arg1@@238 arg2@@168 arg3@@114)) )))
(assert (forall ((|l#0@@14| T@U) (|l#1@@14| T@U) (|l#2@@14| T@U) (|l#3@@14| Bool) ($o@@51 T@U) ($f@@19 T@U) ) (! (let ((alpha@@26 (FieldTypeInv0 (type $f@@19)))) (=> (and (and (and (and (= (type |l#0@@14|) refType) (= (type |l#1@@14|) (MapType0Type refType MapType1Type))) (= (type |l#2@@14|) (FieldType boolType))) (= (type $o@@51) refType)) (= (type $f@@19) (FieldType alpha@@26))) (= (U_2_bool (MapType6Select (|lambda#15| |l#0@@14| |l#1@@14| |l#2@@14| |l#3@@14|) $o@@51 $f@@19))  (=> (and (not (= $o@@51 |l#0@@14|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@14| $o@@51) |l#2@@14|))) |l#3@@14|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4771| :pattern ( (MapType6Select (|lambda#15| |l#0@@14| |l#1@@14| |l#2@@14| |l#3@@14|) $o@@51 $f@@19)) )))
(assert (forall ((arg0@@390 T@U) (arg1@@239 T@U) (arg2@@169 T@U) (arg3@@115 Bool) ) (! (= (type (|lambda#16| arg0@@390 arg1@@239 arg2@@169 arg3@@115)) (MapType6Type refType boolType)) :qid |funType:lambda#16| :pattern ( (|lambda#16| arg0@@390 arg1@@239 arg2@@169 arg3@@115)) )))
(assert (forall ((|l#0@@15| T@U) (|l#1@@15| T@U) (|l#2@@15| T@U) (|l#3@@15| Bool) ($o@@52 T@U) ($f@@20 T@U) ) (! (let ((alpha@@27 (FieldTypeInv0 (type $f@@20)))) (=> (and (and (and (and (= (type |l#0@@15|) refType) (= (type |l#1@@15|) (MapType0Type refType MapType1Type))) (= (type |l#2@@15|) (FieldType boolType))) (= (type $o@@52) refType)) (= (type $f@@20) (FieldType alpha@@27))) (= (U_2_bool (MapType6Select (|lambda#16| |l#0@@15| |l#1@@15| |l#2@@15| |l#3@@15|) $o@@52 $f@@20))  (=> (and (not (= $o@@52 |l#0@@15|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@15| $o@@52) |l#2@@15|))) |l#3@@15|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4772| :pattern ( (MapType6Select (|lambda#16| |l#0@@15| |l#1@@15| |l#2@@15| |l#3@@15|) $o@@52 $f@@20)) )))
(assert (forall ((arg0@@391 T@U) (arg1@@240 T@U) (arg2@@170 T@U) (arg3@@116 Bool) ) (! (= (type (|lambda#17| arg0@@391 arg1@@240 arg2@@170 arg3@@116)) (MapType6Type refType boolType)) :qid |funType:lambda#17| :pattern ( (|lambda#17| arg0@@391 arg1@@240 arg2@@170 arg3@@116)) )))
(assert (forall ((|l#0@@16| T@U) (|l#1@@16| T@U) (|l#2@@16| T@U) (|l#3@@16| Bool) ($o@@53 T@U) ($f@@21 T@U) ) (! (let ((alpha@@28 (FieldTypeInv0 (type $f@@21)))) (=> (and (and (and (and (= (type |l#0@@16|) refType) (= (type |l#1@@16|) (MapType0Type refType MapType1Type))) (= (type |l#2@@16|) (FieldType boolType))) (= (type $o@@53) refType)) (= (type $f@@21) (FieldType alpha@@28))) (= (U_2_bool (MapType6Select (|lambda#17| |l#0@@16| |l#1@@16| |l#2@@16| |l#3@@16|) $o@@53 $f@@21))  (=> (and (not (= $o@@53 |l#0@@16|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@16| $o@@53) |l#2@@16|))) |l#3@@16|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4773| :pattern ( (MapType6Select (|lambda#17| |l#0@@16| |l#1@@16| |l#2@@16| |l#3@@16|) $o@@53 $f@@21)) )))
(assert (forall ((arg0@@392 T@U) (arg1@@241 T@U) (arg2@@171 T@U) (arg3@@117 Bool) ) (! (= (type (|lambda#18| arg0@@392 arg1@@241 arg2@@171 arg3@@117)) (MapType6Type refType boolType)) :qid |funType:lambda#18| :pattern ( (|lambda#18| arg0@@392 arg1@@241 arg2@@171 arg3@@117)) )))
(assert (forall ((|l#0@@17| T@U) (|l#1@@17| T@U) (|l#2@@17| T@U) (|l#3@@17| Bool) ($o@@54 T@U) ($f@@22 T@U) ) (! (let ((alpha@@29 (FieldTypeInv0 (type $f@@22)))) (=> (and (and (and (and (= (type |l#0@@17|) refType) (= (type |l#1@@17|) (MapType0Type refType MapType1Type))) (= (type |l#2@@17|) (FieldType boolType))) (= (type $o@@54) refType)) (= (type $f@@22) (FieldType alpha@@29))) (= (U_2_bool (MapType6Select (|lambda#18| |l#0@@17| |l#1@@17| |l#2@@17| |l#3@@17|) $o@@54 $f@@22))  (=> (and (not (= $o@@54 |l#0@@17|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@17| $o@@54) |l#2@@17|))) |l#3@@17|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4774| :pattern ( (MapType6Select (|lambda#18| |l#0@@17| |l#1@@17| |l#2@@17| |l#3@@17|) $o@@54 $f@@22)) )))
(assert (forall ((arg0@@393 T@U) (arg1@@242 T@U) (arg2@@172 T@U) (arg3@@118 Bool) ) (! (= (type (|lambda#19| arg0@@393 arg1@@242 arg2@@172 arg3@@118)) (MapType6Type refType boolType)) :qid |funType:lambda#19| :pattern ( (|lambda#19| arg0@@393 arg1@@242 arg2@@172 arg3@@118)) )))
(assert (forall ((|l#0@@18| T@U) (|l#1@@18| T@U) (|l#2@@18| T@U) (|l#3@@18| Bool) ($o@@55 T@U) ($f@@23 T@U) ) (! (let ((alpha@@30 (FieldTypeInv0 (type $f@@23)))) (=> (and (and (and (and (= (type |l#0@@18|) refType) (= (type |l#1@@18|) (MapType0Type refType MapType1Type))) (= (type |l#2@@18|) (FieldType boolType))) (= (type $o@@55) refType)) (= (type $f@@23) (FieldType alpha@@30))) (= (U_2_bool (MapType6Select (|lambda#19| |l#0@@18| |l#1@@18| |l#2@@18| |l#3@@18|) $o@@55 $f@@23))  (=> (and (not (= $o@@55 |l#0@@18|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@18| $o@@55) |l#2@@18|))) |l#3@@18|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4775| :pattern ( (MapType6Select (|lambda#19| |l#0@@18| |l#1@@18| |l#2@@18| |l#3@@18|) $o@@55 $f@@23)) )))
(assert (forall ((arg0@@394 T@U) (arg1@@243 T@U) (arg2@@173 T@U) (arg3@@119 Bool) ) (! (= (type (|lambda#20| arg0@@394 arg1@@243 arg2@@173 arg3@@119)) (MapType6Type refType boolType)) :qid |funType:lambda#20| :pattern ( (|lambda#20| arg0@@394 arg1@@243 arg2@@173 arg3@@119)) )))
(assert (forall ((|l#0@@19| T@U) (|l#1@@19| T@U) (|l#2@@19| T@U) (|l#3@@19| Bool) ($o@@56 T@U) ($f@@24 T@U) ) (! (let ((alpha@@31 (FieldTypeInv0 (type $f@@24)))) (=> (and (and (and (and (= (type |l#0@@19|) refType) (= (type |l#1@@19|) (MapType0Type refType MapType1Type))) (= (type |l#2@@19|) (FieldType boolType))) (= (type $o@@56) refType)) (= (type $f@@24) (FieldType alpha@@31))) (= (U_2_bool (MapType6Select (|lambda#20| |l#0@@19| |l#1@@19| |l#2@@19| |l#3@@19|) $o@@56 $f@@24))  (=> (and (not (= $o@@56 |l#0@@19|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@19| $o@@56) |l#2@@19|))) |l#3@@19|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4776| :pattern ( (MapType6Select (|lambda#20| |l#0@@19| |l#1@@19| |l#2@@19| |l#3@@19|) $o@@56 $f@@24)) )))
(assert (forall ((arg0@@395 T@U) (arg1@@244 T@U) (arg2@@174 T@U) (arg3@@120 Bool) ) (! (= (type (|lambda#21| arg0@@395 arg1@@244 arg2@@174 arg3@@120)) (MapType6Type refType boolType)) :qid |funType:lambda#21| :pattern ( (|lambda#21| arg0@@395 arg1@@244 arg2@@174 arg3@@120)) )))
(assert (forall ((|l#0@@20| T@U) (|l#1@@20| T@U) (|l#2@@20| T@U) (|l#3@@20| Bool) ($o@@57 T@U) ($f@@25 T@U) ) (! (let ((alpha@@32 (FieldTypeInv0 (type $f@@25)))) (=> (and (and (and (and (= (type |l#0@@20|) refType) (= (type |l#1@@20|) (MapType0Type refType MapType1Type))) (= (type |l#2@@20|) (FieldType boolType))) (= (type $o@@57) refType)) (= (type $f@@25) (FieldType alpha@@32))) (= (U_2_bool (MapType6Select (|lambda#21| |l#0@@20| |l#1@@20| |l#2@@20| |l#3@@20|) $o@@57 $f@@25))  (=> (and (not (= $o@@57 |l#0@@20|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@20| $o@@57) |l#2@@20|))) |l#3@@20|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4777| :pattern ( (MapType6Select (|lambda#21| |l#0@@20| |l#1@@20| |l#2@@20| |l#3@@20|) $o@@57 $f@@25)) )))
(assert (forall ((arg0@@396 T@U) (arg1@@245 T@U) (arg2@@175 T@U) (arg3@@121 Bool) ) (! (= (type (|lambda#22| arg0@@396 arg1@@245 arg2@@175 arg3@@121)) (MapType6Type refType boolType)) :qid |funType:lambda#22| :pattern ( (|lambda#22| arg0@@396 arg1@@245 arg2@@175 arg3@@121)) )))
(assert (forall ((|l#0@@21| T@U) (|l#1@@21| T@U) (|l#2@@21| T@U) (|l#3@@21| Bool) ($o@@58 T@U) ($f@@26 T@U) ) (! (let ((alpha@@33 (FieldTypeInv0 (type $f@@26)))) (=> (and (and (and (and (= (type |l#0@@21|) refType) (= (type |l#1@@21|) (MapType0Type refType MapType1Type))) (= (type |l#2@@21|) (FieldType boolType))) (= (type $o@@58) refType)) (= (type $f@@26) (FieldType alpha@@33))) (= (U_2_bool (MapType6Select (|lambda#22| |l#0@@21| |l#1@@21| |l#2@@21| |l#3@@21|) $o@@58 $f@@26))  (=> (and (not (= $o@@58 |l#0@@21|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@21| $o@@58) |l#2@@21|))) |l#3@@21|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4778| :pattern ( (MapType6Select (|lambda#22| |l#0@@21| |l#1@@21| |l#2@@21| |l#3@@21|) $o@@58 $f@@26)) )))
(assert (forall ((arg0@@397 T@U) (arg1@@246 T@U) (arg2@@176 T@U) (arg3@@122 Bool) ) (! (= (type (|lambda#23| arg0@@397 arg1@@246 arg2@@176 arg3@@122)) (MapType6Type refType boolType)) :qid |funType:lambda#23| :pattern ( (|lambda#23| arg0@@397 arg1@@246 arg2@@176 arg3@@122)) )))
(assert (forall ((|l#0@@22| T@U) (|l#1@@22| T@U) (|l#2@@22| T@U) (|l#3@@22| Bool) ($o@@59 T@U) ($f@@27 T@U) ) (! (let ((alpha@@34 (FieldTypeInv0 (type $f@@27)))) (=> (and (and (and (and (= (type |l#0@@22|) refType) (= (type |l#1@@22|) (MapType0Type refType MapType1Type))) (= (type |l#2@@22|) (FieldType boolType))) (= (type $o@@59) refType)) (= (type $f@@27) (FieldType alpha@@34))) (= (U_2_bool (MapType6Select (|lambda#23| |l#0@@22| |l#1@@22| |l#2@@22| |l#3@@22|) $o@@59 $f@@27))  (=> (and (not (= $o@@59 |l#0@@22|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@22| $o@@59) |l#2@@22|))) |l#3@@22|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4779| :pattern ( (MapType6Select (|lambda#23| |l#0@@22| |l#1@@22| |l#2@@22| |l#3@@22|) $o@@59 $f@@27)) )))
(assert (forall ((arg0@@398 T@U) (arg1@@247 T@U) (arg2@@177 T@U) (arg3@@123 Bool) ) (! (= (type (|lambda#24| arg0@@398 arg1@@247 arg2@@177 arg3@@123)) (MapType6Type refType boolType)) :qid |funType:lambda#24| :pattern ( (|lambda#24| arg0@@398 arg1@@247 arg2@@177 arg3@@123)) )))
(assert (forall ((|l#0@@23| T@U) (|l#1@@23| T@U) (|l#2@@23| T@U) (|l#3@@23| Bool) ($o@@60 T@U) ($f@@28 T@U) ) (! (let ((alpha@@35 (FieldTypeInv0 (type $f@@28)))) (=> (and (and (and (and (= (type |l#0@@23|) refType) (= (type |l#1@@23|) (MapType0Type refType MapType1Type))) (= (type |l#2@@23|) (FieldType boolType))) (= (type $o@@60) refType)) (= (type $f@@28) (FieldType alpha@@35))) (= (U_2_bool (MapType6Select (|lambda#24| |l#0@@23| |l#1@@23| |l#2@@23| |l#3@@23|) $o@@60 $f@@28))  (=> (and (not (= $o@@60 |l#0@@23|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@23| $o@@60) |l#2@@23|))) |l#3@@23|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4780| :pattern ( (MapType6Select (|lambda#24| |l#0@@23| |l#1@@23| |l#2@@23| |l#3@@23|) $o@@60 $f@@28)) )))
(assert (forall ((arg0@@399 T@U) (arg1@@248 T@U) (arg2@@178 T@U) (arg3@@124 Bool) ) (! (= (type (|lambda#25| arg0@@399 arg1@@248 arg2@@178 arg3@@124)) (MapType6Type refType boolType)) :qid |funType:lambda#25| :pattern ( (|lambda#25| arg0@@399 arg1@@248 arg2@@178 arg3@@124)) )))
(assert (forall ((|l#0@@24| T@U) (|l#1@@24| T@U) (|l#2@@24| T@U) (|l#3@@24| Bool) ($o@@61 T@U) ($f@@29 T@U) ) (! (let ((alpha@@36 (FieldTypeInv0 (type $f@@29)))) (=> (and (and (and (and (= (type |l#0@@24|) refType) (= (type |l#1@@24|) (MapType0Type refType MapType1Type))) (= (type |l#2@@24|) (FieldType boolType))) (= (type $o@@61) refType)) (= (type $f@@29) (FieldType alpha@@36))) (= (U_2_bool (MapType6Select (|lambda#25| |l#0@@24| |l#1@@24| |l#2@@24| |l#3@@24|) $o@@61 $f@@29))  (=> (and (not (= $o@@61 |l#0@@24|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@24| $o@@61) |l#2@@24|))) |l#3@@24|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4781| :pattern ( (MapType6Select (|lambda#25| |l#0@@24| |l#1@@24| |l#2@@24| |l#3@@24|) $o@@61 $f@@29)) )))
(assert (forall ((arg0@@400 T@U) (arg1@@249 T@U) (arg2@@179 T@U) (arg3@@125 Bool) ) (! (= (type (|lambda#26| arg0@@400 arg1@@249 arg2@@179 arg3@@125)) (MapType6Type refType boolType)) :qid |funType:lambda#26| :pattern ( (|lambda#26| arg0@@400 arg1@@249 arg2@@179 arg3@@125)) )))
(assert (forall ((|l#0@@25| T@U) (|l#1@@25| T@U) (|l#2@@25| T@U) (|l#3@@25| Bool) ($o@@62 T@U) ($f@@30 T@U) ) (! (let ((alpha@@37 (FieldTypeInv0 (type $f@@30)))) (=> (and (and (and (and (= (type |l#0@@25|) refType) (= (type |l#1@@25|) (MapType0Type refType MapType1Type))) (= (type |l#2@@25|) (FieldType boolType))) (= (type $o@@62) refType)) (= (type $f@@30) (FieldType alpha@@37))) (= (U_2_bool (MapType6Select (|lambda#26| |l#0@@25| |l#1@@25| |l#2@@25| |l#3@@25|) $o@@62 $f@@30))  (=> (and (not (= $o@@62 |l#0@@25|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@25| $o@@62) |l#2@@25|))) |l#3@@25|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4782| :pattern ( (MapType6Select (|lambda#26| |l#0@@25| |l#1@@25| |l#2@@25| |l#3@@25|) $o@@62 $f@@30)) )))
(assert (forall ((arg0@@401 T@U) (arg1@@250 T@U) (arg2@@180 T@U) (arg3@@126 Bool) ) (! (= (type (|lambda#27| arg0@@401 arg1@@250 arg2@@180 arg3@@126)) (MapType6Type refType boolType)) :qid |funType:lambda#27| :pattern ( (|lambda#27| arg0@@401 arg1@@250 arg2@@180 arg3@@126)) )))
(assert (forall ((|l#0@@26| T@U) (|l#1@@26| T@U) (|l#2@@26| T@U) (|l#3@@26| Bool) ($o@@63 T@U) ($f@@31 T@U) ) (! (let ((alpha@@38 (FieldTypeInv0 (type $f@@31)))) (=> (and (and (and (and (= (type |l#0@@26|) refType) (= (type |l#1@@26|) (MapType0Type refType MapType1Type))) (= (type |l#2@@26|) (FieldType boolType))) (= (type $o@@63) refType)) (= (type $f@@31) (FieldType alpha@@38))) (= (U_2_bool (MapType6Select (|lambda#27| |l#0@@26| |l#1@@26| |l#2@@26| |l#3@@26|) $o@@63 $f@@31))  (=> (and (not (= $o@@63 |l#0@@26|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@26| $o@@63) |l#2@@26|))) |l#3@@26|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4783| :pattern ( (MapType6Select (|lambda#27| |l#0@@26| |l#1@@26| |l#2@@26| |l#3@@26|) $o@@63 $f@@31)) )))
(assert (forall ((arg0@@402 T@U) (arg1@@251 T@U) (arg2@@181 T@U) (arg3@@127 Bool) ) (! (= (type (|lambda#28| arg0@@402 arg1@@251 arg2@@181 arg3@@127)) (MapType6Type refType boolType)) :qid |funType:lambda#28| :pattern ( (|lambda#28| arg0@@402 arg1@@251 arg2@@181 arg3@@127)) )))
(assert (forall ((|l#0@@27| T@U) (|l#1@@27| T@U) (|l#2@@27| T@U) (|l#3@@27| Bool) ($o@@64 T@U) ($f@@32 T@U) ) (! (let ((alpha@@39 (FieldTypeInv0 (type $f@@32)))) (=> (and (and (and (and (= (type |l#0@@27|) refType) (= (type |l#1@@27|) (MapType0Type refType MapType1Type))) (= (type |l#2@@27|) (FieldType boolType))) (= (type $o@@64) refType)) (= (type $f@@32) (FieldType alpha@@39))) (= (U_2_bool (MapType6Select (|lambda#28| |l#0@@27| |l#1@@27| |l#2@@27| |l#3@@27|) $o@@64 $f@@32))  (=> (and (not (= $o@@64 |l#0@@27|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@27| $o@@64) |l#2@@27|))) |l#3@@27|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4784| :pattern ( (MapType6Select (|lambda#28| |l#0@@27| |l#1@@27| |l#2@@27| |l#3@@27|) $o@@64 $f@@32)) )))
(assert (forall ((arg0@@403 T@U) (arg1@@252 T@U) (arg2@@182 T@U) (arg3@@128 Bool) ) (! (= (type (|lambda#29| arg0@@403 arg1@@252 arg2@@182 arg3@@128)) (MapType6Type refType boolType)) :qid |funType:lambda#29| :pattern ( (|lambda#29| arg0@@403 arg1@@252 arg2@@182 arg3@@128)) )))
(assert (forall ((|l#0@@28| T@U) (|l#1@@28| T@U) (|l#2@@28| T@U) (|l#3@@28| Bool) ($o@@65 T@U) ($f@@33 T@U) ) (! (let ((alpha@@40 (FieldTypeInv0 (type $f@@33)))) (=> (and (and (and (and (= (type |l#0@@28|) refType) (= (type |l#1@@28|) (MapType0Type refType MapType1Type))) (= (type |l#2@@28|) (FieldType boolType))) (= (type $o@@65) refType)) (= (type $f@@33) (FieldType alpha@@40))) (= (U_2_bool (MapType6Select (|lambda#29| |l#0@@28| |l#1@@28| |l#2@@28| |l#3@@28|) $o@@65 $f@@33))  (=> (and (not (= $o@@65 |l#0@@28|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@28| $o@@65) |l#2@@28|))) |l#3@@28|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4785| :pattern ( (MapType6Select (|lambda#29| |l#0@@28| |l#1@@28| |l#2@@28| |l#3@@28|) $o@@65 $f@@33)) )))
(assert (forall ((arg0@@404 T@U) (arg1@@253 T@U) (arg2@@183 T@U) (arg3@@129 Bool) ) (! (= (type (|lambda#30| arg0@@404 arg1@@253 arg2@@183 arg3@@129)) (MapType6Type refType boolType)) :qid |funType:lambda#30| :pattern ( (|lambda#30| arg0@@404 arg1@@253 arg2@@183 arg3@@129)) )))
(assert (forall ((|l#0@@29| T@U) (|l#1@@29| T@U) (|l#2@@29| T@U) (|l#3@@29| Bool) ($o@@66 T@U) ($f@@34 T@U) ) (! (let ((alpha@@41 (FieldTypeInv0 (type $f@@34)))) (=> (and (and (and (and (= (type |l#0@@29|) refType) (= (type |l#1@@29|) (MapType0Type refType MapType1Type))) (= (type |l#2@@29|) (FieldType boolType))) (= (type $o@@66) refType)) (= (type $f@@34) (FieldType alpha@@41))) (= (U_2_bool (MapType6Select (|lambda#30| |l#0@@29| |l#1@@29| |l#2@@29| |l#3@@29|) $o@@66 $f@@34))  (=> (and (not (= $o@@66 |l#0@@29|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@29| $o@@66) |l#2@@29|))) |l#3@@29|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4786| :pattern ( (MapType6Select (|lambda#30| |l#0@@29| |l#1@@29| |l#2@@29| |l#3@@29|) $o@@66 $f@@34)) )))
(assert (forall ((arg0@@405 T@U) (arg1@@254 T@U) (arg2@@184 T@U) (arg3@@130 Bool) ) (! (= (type (|lambda#31| arg0@@405 arg1@@254 arg2@@184 arg3@@130)) (MapType6Type refType boolType)) :qid |funType:lambda#31| :pattern ( (|lambda#31| arg0@@405 arg1@@254 arg2@@184 arg3@@130)) )))
(assert (forall ((|l#0@@30| T@U) (|l#1@@30| T@U) (|l#2@@30| T@U) (|l#3@@30| Bool) ($o@@67 T@U) ($f@@35 T@U) ) (! (let ((alpha@@42 (FieldTypeInv0 (type $f@@35)))) (=> (and (and (and (and (= (type |l#0@@30|) refType) (= (type |l#1@@30|) (MapType0Type refType MapType1Type))) (= (type |l#2@@30|) (FieldType boolType))) (= (type $o@@67) refType)) (= (type $f@@35) (FieldType alpha@@42))) (= (U_2_bool (MapType6Select (|lambda#31| |l#0@@30| |l#1@@30| |l#2@@30| |l#3@@30|) $o@@67 $f@@35))  (=> (and (not (= $o@@67 |l#0@@30|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@30| $o@@67) |l#2@@30|))) |l#3@@30|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4787| :pattern ( (MapType6Select (|lambda#31| |l#0@@30| |l#1@@30| |l#2@@30| |l#3@@30|) $o@@67 $f@@35)) )))
(assert (forall ((arg0@@406 T@U) (arg1@@255 T@U) (arg2@@185 T@U) (arg3@@131 Bool) ) (! (= (type (|lambda#32| arg0@@406 arg1@@255 arg2@@185 arg3@@131)) (MapType6Type refType boolType)) :qid |funType:lambda#32| :pattern ( (|lambda#32| arg0@@406 arg1@@255 arg2@@185 arg3@@131)) )))
(assert (forall ((|l#0@@31| T@U) (|l#1@@31| T@U) (|l#2@@31| T@U) (|l#3@@31| Bool) ($o@@68 T@U) ($f@@36 T@U) ) (! (let ((alpha@@43 (FieldTypeInv0 (type $f@@36)))) (=> (and (and (and (and (= (type |l#0@@31|) refType) (= (type |l#1@@31|) (MapType0Type refType MapType1Type))) (= (type |l#2@@31|) (FieldType boolType))) (= (type $o@@68) refType)) (= (type $f@@36) (FieldType alpha@@43))) (= (U_2_bool (MapType6Select (|lambda#32| |l#0@@31| |l#1@@31| |l#2@@31| |l#3@@31|) $o@@68 $f@@36))  (=> (and (not (= $o@@68 |l#0@@31|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@31| $o@@68) |l#2@@31|))) |l#3@@31|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4788| :pattern ( (MapType6Select (|lambda#32| |l#0@@31| |l#1@@31| |l#2@@31| |l#3@@31|) $o@@68 $f@@36)) )))
(assert (forall ((arg0@@407 T@U) (arg1@@256 T@U) (arg2@@186 T@U) (arg3@@132 Bool) ) (! (= (type (|lambda#33| arg0@@407 arg1@@256 arg2@@186 arg3@@132)) (MapType6Type refType boolType)) :qid |funType:lambda#33| :pattern ( (|lambda#33| arg0@@407 arg1@@256 arg2@@186 arg3@@132)) )))
(assert (forall ((|l#0@@32| T@U) (|l#1@@32| T@U) (|l#2@@32| T@U) (|l#3@@32| Bool) ($o@@69 T@U) ($f@@37 T@U) ) (! (let ((alpha@@44 (FieldTypeInv0 (type $f@@37)))) (=> (and (and (and (and (= (type |l#0@@32|) refType) (= (type |l#1@@32|) (MapType0Type refType MapType1Type))) (= (type |l#2@@32|) (FieldType boolType))) (= (type $o@@69) refType)) (= (type $f@@37) (FieldType alpha@@44))) (= (U_2_bool (MapType6Select (|lambda#33| |l#0@@32| |l#1@@32| |l#2@@32| |l#3@@32|) $o@@69 $f@@37))  (=> (and (not (= $o@@69 |l#0@@32|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@32| $o@@69) |l#2@@32|))) |l#3@@32|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4789| :pattern ( (MapType6Select (|lambda#33| |l#0@@32| |l#1@@32| |l#2@@32| |l#3@@32|) $o@@69 $f@@37)) )))
(assert (forall ((arg0@@408 T@U) (arg1@@257 T@U) (arg2@@187 T@U) (arg3@@133 Bool) ) (! (= (type (|lambda#34| arg0@@408 arg1@@257 arg2@@187 arg3@@133)) (MapType6Type refType boolType)) :qid |funType:lambda#34| :pattern ( (|lambda#34| arg0@@408 arg1@@257 arg2@@187 arg3@@133)) )))
(assert (forall ((|l#0@@33| T@U) (|l#1@@33| T@U) (|l#2@@33| T@U) (|l#3@@33| Bool) ($o@@70 T@U) ($f@@38 T@U) ) (! (let ((alpha@@45 (FieldTypeInv0 (type $f@@38)))) (=> (and (and (and (and (= (type |l#0@@33|) refType) (= (type |l#1@@33|) (MapType0Type refType MapType1Type))) (= (type |l#2@@33|) (FieldType boolType))) (= (type $o@@70) refType)) (= (type $f@@38) (FieldType alpha@@45))) (= (U_2_bool (MapType6Select (|lambda#34| |l#0@@33| |l#1@@33| |l#2@@33| |l#3@@33|) $o@@70 $f@@38))  (=> (and (not (= $o@@70 |l#0@@33|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@33| $o@@70) |l#2@@33|))) |l#3@@33|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4790| :pattern ( (MapType6Select (|lambda#34| |l#0@@33| |l#1@@33| |l#2@@33| |l#3@@33|) $o@@70 $f@@38)) )))
(assert (forall ((arg0@@409 T@U) (arg1@@258 T@U) (arg2@@188 T@U) (arg3@@134 Bool) ) (! (= (type (|lambda#35| arg0@@409 arg1@@258 arg2@@188 arg3@@134)) (MapType6Type refType boolType)) :qid |funType:lambda#35| :pattern ( (|lambda#35| arg0@@409 arg1@@258 arg2@@188 arg3@@134)) )))
(assert (forall ((|l#0@@34| T@U) (|l#1@@34| T@U) (|l#2@@34| T@U) (|l#3@@34| Bool) ($o@@71 T@U) ($f@@39 T@U) ) (! (let ((alpha@@46 (FieldTypeInv0 (type $f@@39)))) (=> (and (and (and (and (= (type |l#0@@34|) refType) (= (type |l#1@@34|) (MapType0Type refType MapType1Type))) (= (type |l#2@@34|) (FieldType boolType))) (= (type $o@@71) refType)) (= (type $f@@39) (FieldType alpha@@46))) (= (U_2_bool (MapType6Select (|lambda#35| |l#0@@34| |l#1@@34| |l#2@@34| |l#3@@34|) $o@@71 $f@@39))  (=> (and (not (= $o@@71 |l#0@@34|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@34| $o@@71) |l#2@@34|))) |l#3@@34|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4791| :pattern ( (MapType6Select (|lambda#35| |l#0@@34| |l#1@@34| |l#2@@34| |l#3@@34|) $o@@71 $f@@39)) )))
(assert (forall ((arg0@@410 T@U) (arg1@@259 T@U) (arg2@@189 T@U) (arg3@@135 Bool) ) (! (= (type (|lambda#36| arg0@@410 arg1@@259 arg2@@189 arg3@@135)) (MapType6Type refType boolType)) :qid |funType:lambda#36| :pattern ( (|lambda#36| arg0@@410 arg1@@259 arg2@@189 arg3@@135)) )))
(assert (forall ((|l#0@@35| T@U) (|l#1@@35| T@U) (|l#2@@35| T@U) (|l#3@@35| Bool) ($o@@72 T@U) ($f@@40 T@U) ) (! (let ((alpha@@47 (FieldTypeInv0 (type $f@@40)))) (=> (and (and (and (and (= (type |l#0@@35|) refType) (= (type |l#1@@35|) (MapType0Type refType MapType1Type))) (= (type |l#2@@35|) (FieldType boolType))) (= (type $o@@72) refType)) (= (type $f@@40) (FieldType alpha@@47))) (= (U_2_bool (MapType6Select (|lambda#36| |l#0@@35| |l#1@@35| |l#2@@35| |l#3@@35|) $o@@72 $f@@40))  (=> (and (not (= $o@@72 |l#0@@35|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@35| $o@@72) |l#2@@35|))) |l#3@@35|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4792| :pattern ( (MapType6Select (|lambda#36| |l#0@@35| |l#1@@35| |l#2@@35| |l#3@@35|) $o@@72 $f@@40)) )))
(assert (forall ((arg0@@411 T@U) (arg1@@260 T@U) (arg2@@190 T@U) (arg3@@136 Bool) ) (! (= (type (|lambda#37| arg0@@411 arg1@@260 arg2@@190 arg3@@136)) (MapType6Type refType boolType)) :qid |funType:lambda#37| :pattern ( (|lambda#37| arg0@@411 arg1@@260 arg2@@190 arg3@@136)) )))
(assert (forall ((|l#0@@36| T@U) (|l#1@@36| T@U) (|l#2@@36| T@U) (|l#3@@36| Bool) ($o@@73 T@U) ($f@@41 T@U) ) (! (let ((alpha@@48 (FieldTypeInv0 (type $f@@41)))) (=> (and (and (and (and (= (type |l#0@@36|) refType) (= (type |l#1@@36|) (MapType0Type refType MapType1Type))) (= (type |l#2@@36|) (FieldType boolType))) (= (type $o@@73) refType)) (= (type $f@@41) (FieldType alpha@@48))) (= (U_2_bool (MapType6Select (|lambda#37| |l#0@@36| |l#1@@36| |l#2@@36| |l#3@@36|) $o@@73 $f@@41))  (=> (and (not (= $o@@73 |l#0@@36|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@36| $o@@73) |l#2@@36|))) |l#3@@36|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4793| :pattern ( (MapType6Select (|lambda#37| |l#0@@36| |l#1@@36| |l#2@@36| |l#3@@36|) $o@@73 $f@@41)) )))
(assert (forall ((arg0@@412 T@U) (arg1@@261 T@U) (arg2@@191 T@U) (arg3@@137 Bool) ) (! (= (type (|lambda#38| arg0@@412 arg1@@261 arg2@@191 arg3@@137)) (MapType6Type refType boolType)) :qid |funType:lambda#38| :pattern ( (|lambda#38| arg0@@412 arg1@@261 arg2@@191 arg3@@137)) )))
(assert (forall ((|l#0@@37| T@U) (|l#1@@37| T@U) (|l#2@@37| T@U) (|l#3@@37| Bool) ($o@@74 T@U) ($f@@42 T@U) ) (! (let ((alpha@@49 (FieldTypeInv0 (type $f@@42)))) (=> (and (and (and (and (= (type |l#0@@37|) refType) (= (type |l#1@@37|) (MapType0Type refType MapType1Type))) (= (type |l#2@@37|) (FieldType boolType))) (= (type $o@@74) refType)) (= (type $f@@42) (FieldType alpha@@49))) (= (U_2_bool (MapType6Select (|lambda#38| |l#0@@37| |l#1@@37| |l#2@@37| |l#3@@37|) $o@@74 $f@@42))  (=> (and (not (= $o@@74 |l#0@@37|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@37| $o@@74) |l#2@@37|))) |l#3@@37|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4794| :pattern ( (MapType6Select (|lambda#38| |l#0@@37| |l#1@@37| |l#2@@37| |l#3@@37|) $o@@74 $f@@42)) )))
(assert (forall ((arg0@@413 T@U) (arg1@@262 T@U) (arg2@@192 T@U) (arg3@@138 Bool) ) (! (= (type (|lambda#39| arg0@@413 arg1@@262 arg2@@192 arg3@@138)) (MapType6Type refType boolType)) :qid |funType:lambda#39| :pattern ( (|lambda#39| arg0@@413 arg1@@262 arg2@@192 arg3@@138)) )))
(assert (forall ((|l#0@@38| T@U) (|l#1@@38| T@U) (|l#2@@38| T@U) (|l#3@@38| Bool) ($o@@75 T@U) ($f@@43 T@U) ) (! (let ((alpha@@50 (FieldTypeInv0 (type $f@@43)))) (=> (and (and (and (and (= (type |l#0@@38|) refType) (= (type |l#1@@38|) (MapType0Type refType MapType1Type))) (= (type |l#2@@38|) (FieldType boolType))) (= (type $o@@75) refType)) (= (type $f@@43) (FieldType alpha@@50))) (= (U_2_bool (MapType6Select (|lambda#39| |l#0@@38| |l#1@@38| |l#2@@38| |l#3@@38|) $o@@75 $f@@43))  (=> (and (not (= $o@@75 |l#0@@38|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@38| $o@@75) |l#2@@38|))) |l#3@@38|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4795| :pattern ( (MapType6Select (|lambda#39| |l#0@@38| |l#1@@38| |l#2@@38| |l#3@@38|) $o@@75 $f@@43)) )))
(assert (forall ((arg0@@414 T@U) (arg1@@263 T@U) (arg2@@193 T@U) (arg3@@139 Bool) ) (! (= (type (|lambda#40| arg0@@414 arg1@@263 arg2@@193 arg3@@139)) (MapType6Type refType boolType)) :qid |funType:lambda#40| :pattern ( (|lambda#40| arg0@@414 arg1@@263 arg2@@193 arg3@@139)) )))
(assert (forall ((|l#0@@39| T@U) (|l#1@@39| T@U) (|l#2@@39| T@U) (|l#3@@39| Bool) ($o@@76 T@U) ($f@@44 T@U) ) (! (let ((alpha@@51 (FieldTypeInv0 (type $f@@44)))) (=> (and (and (and (and (= (type |l#0@@39|) refType) (= (type |l#1@@39|) (MapType0Type refType MapType1Type))) (= (type |l#2@@39|) (FieldType boolType))) (= (type $o@@76) refType)) (= (type $f@@44) (FieldType alpha@@51))) (= (U_2_bool (MapType6Select (|lambda#40| |l#0@@39| |l#1@@39| |l#2@@39| |l#3@@39|) $o@@76 $f@@44))  (=> (and (not (= $o@@76 |l#0@@39|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@39| $o@@76) |l#2@@39|))) |l#3@@39|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4796| :pattern ( (MapType6Select (|lambda#40| |l#0@@39| |l#1@@39| |l#2@@39| |l#3@@39|) $o@@76 $f@@44)) )))
(assert (forall ((arg0@@415 T@U) (arg1@@264 T@U) (arg2@@194 T@U) (arg3@@140 Bool) ) (! (= (type (|lambda#41| arg0@@415 arg1@@264 arg2@@194 arg3@@140)) (MapType6Type refType boolType)) :qid |funType:lambda#41| :pattern ( (|lambda#41| arg0@@415 arg1@@264 arg2@@194 arg3@@140)) )))
(assert (forall ((|l#0@@40| T@U) (|l#1@@40| T@U) (|l#2@@40| T@U) (|l#3@@40| Bool) ($o@@77 T@U) ($f@@45 T@U) ) (! (let ((alpha@@52 (FieldTypeInv0 (type $f@@45)))) (=> (and (and (and (and (= (type |l#0@@40|) refType) (= (type |l#1@@40|) (MapType0Type refType MapType1Type))) (= (type |l#2@@40|) (FieldType boolType))) (= (type $o@@77) refType)) (= (type $f@@45) (FieldType alpha@@52))) (= (U_2_bool (MapType6Select (|lambda#41| |l#0@@40| |l#1@@40| |l#2@@40| |l#3@@40|) $o@@77 $f@@45))  (=> (and (not (= $o@@77 |l#0@@40|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@40| $o@@77) |l#2@@40|))) |l#3@@40|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4797| :pattern ( (MapType6Select (|lambda#41| |l#0@@40| |l#1@@40| |l#2@@40| |l#3@@40|) $o@@77 $f@@45)) )))
(assert (forall ((arg0@@416 T@U) (arg1@@265 T@U) (arg2@@195 T@U) (arg3@@141 Bool) ) (! (= (type (|lambda#42| arg0@@416 arg1@@265 arg2@@195 arg3@@141)) (MapType6Type refType boolType)) :qid |funType:lambda#42| :pattern ( (|lambda#42| arg0@@416 arg1@@265 arg2@@195 arg3@@141)) )))
(assert (forall ((|l#0@@41| T@U) (|l#1@@41| T@U) (|l#2@@41| T@U) (|l#3@@41| Bool) ($o@@78 T@U) ($f@@46 T@U) ) (! (let ((alpha@@53 (FieldTypeInv0 (type $f@@46)))) (=> (and (and (and (and (= (type |l#0@@41|) refType) (= (type |l#1@@41|) (MapType0Type refType MapType1Type))) (= (type |l#2@@41|) (FieldType boolType))) (= (type $o@@78) refType)) (= (type $f@@46) (FieldType alpha@@53))) (= (U_2_bool (MapType6Select (|lambda#42| |l#0@@41| |l#1@@41| |l#2@@41| |l#3@@41|) $o@@78 $f@@46))  (=> (and (not (= $o@@78 |l#0@@41|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@41| $o@@78) |l#2@@41|))) |l#3@@41|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4798| :pattern ( (MapType6Select (|lambda#42| |l#0@@41| |l#1@@41| |l#2@@41| |l#3@@41|) $o@@78 $f@@46)) )))
(assert (forall ((arg0@@417 T@U) (arg1@@266 T@U) (arg2@@196 T@U) (arg3@@142 Bool) ) (! (= (type (|lambda#43| arg0@@417 arg1@@266 arg2@@196 arg3@@142)) (MapType6Type refType boolType)) :qid |funType:lambda#43| :pattern ( (|lambda#43| arg0@@417 arg1@@266 arg2@@196 arg3@@142)) )))
(assert (forall ((|l#0@@42| T@U) (|l#1@@42| T@U) (|l#2@@42| T@U) (|l#3@@42| Bool) ($o@@79 T@U) ($f@@47 T@U) ) (! (let ((alpha@@54 (FieldTypeInv0 (type $f@@47)))) (=> (and (and (and (and (= (type |l#0@@42|) refType) (= (type |l#1@@42|) (MapType0Type refType MapType1Type))) (= (type |l#2@@42|) (FieldType boolType))) (= (type $o@@79) refType)) (= (type $f@@47) (FieldType alpha@@54))) (= (U_2_bool (MapType6Select (|lambda#43| |l#0@@42| |l#1@@42| |l#2@@42| |l#3@@42|) $o@@79 $f@@47))  (=> (and (not (= $o@@79 |l#0@@42|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@42| $o@@79) |l#2@@42|))) |l#3@@42|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4799| :pattern ( (MapType6Select (|lambda#43| |l#0@@42| |l#1@@42| |l#2@@42| |l#3@@42|) $o@@79 $f@@47)) )))
(assert (forall ((arg0@@418 T@U) (arg1@@267 T@U) (arg2@@197 T@U) (arg3@@143 Bool) ) (! (= (type (|lambda#44| arg0@@418 arg1@@267 arg2@@197 arg3@@143)) (MapType6Type refType boolType)) :qid |funType:lambda#44| :pattern ( (|lambda#44| arg0@@418 arg1@@267 arg2@@197 arg3@@143)) )))
(assert (forall ((|l#0@@43| T@U) (|l#1@@43| T@U) (|l#2@@43| T@U) (|l#3@@43| Bool) ($o@@80 T@U) ($f@@48 T@U) ) (! (let ((alpha@@55 (FieldTypeInv0 (type $f@@48)))) (=> (and (and (and (and (= (type |l#0@@43|) refType) (= (type |l#1@@43|) (MapType0Type refType MapType1Type))) (= (type |l#2@@43|) (FieldType boolType))) (= (type $o@@80) refType)) (= (type $f@@48) (FieldType alpha@@55))) (= (U_2_bool (MapType6Select (|lambda#44| |l#0@@43| |l#1@@43| |l#2@@43| |l#3@@43|) $o@@80 $f@@48))  (=> (and (not (= $o@@80 |l#0@@43|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@43| $o@@80) |l#2@@43|))) |l#3@@43|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4800| :pattern ( (MapType6Select (|lambda#44| |l#0@@43| |l#1@@43| |l#2@@43| |l#3@@43|) $o@@80 $f@@48)) )))
(assert (forall ((arg0@@419 T@U) (arg1@@268 T@U) (arg2@@198 T@U) (arg3@@144 Bool) ) (! (= (type (|lambda#45| arg0@@419 arg1@@268 arg2@@198 arg3@@144)) (MapType6Type refType boolType)) :qid |funType:lambda#45| :pattern ( (|lambda#45| arg0@@419 arg1@@268 arg2@@198 arg3@@144)) )))
(assert (forall ((|l#0@@44| T@U) (|l#1@@44| T@U) (|l#2@@44| T@U) (|l#3@@44| Bool) ($o@@81 T@U) ($f@@49 T@U) ) (! (let ((alpha@@56 (FieldTypeInv0 (type $f@@49)))) (=> (and (and (and (and (= (type |l#0@@44|) refType) (= (type |l#1@@44|) (MapType0Type refType MapType1Type))) (= (type |l#2@@44|) (FieldType boolType))) (= (type $o@@81) refType)) (= (type $f@@49) (FieldType alpha@@56))) (= (U_2_bool (MapType6Select (|lambda#45| |l#0@@44| |l#1@@44| |l#2@@44| |l#3@@44|) $o@@81 $f@@49))  (=> (and (not (= $o@@81 |l#0@@44|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@44| $o@@81) |l#2@@44|))) |l#3@@44|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4801| :pattern ( (MapType6Select (|lambda#45| |l#0@@44| |l#1@@44| |l#2@@44| |l#3@@44|) $o@@81 $f@@49)) )))
(assert (forall ((arg0@@420 T@U) (arg1@@269 T@U) (arg2@@199 T@U) (arg3@@145 Bool) ) (! (= (type (|lambda#46| arg0@@420 arg1@@269 arg2@@199 arg3@@145)) (MapType6Type refType boolType)) :qid |funType:lambda#46| :pattern ( (|lambda#46| arg0@@420 arg1@@269 arg2@@199 arg3@@145)) )))
(assert (forall ((|l#0@@45| T@U) (|l#1@@45| T@U) (|l#2@@45| T@U) (|l#3@@45| Bool) ($o@@82 T@U) ($f@@50 T@U) ) (! (let ((alpha@@57 (FieldTypeInv0 (type $f@@50)))) (=> (and (and (and (and (= (type |l#0@@45|) refType) (= (type |l#1@@45|) (MapType0Type refType MapType1Type))) (= (type |l#2@@45|) (FieldType boolType))) (= (type $o@@82) refType)) (= (type $f@@50) (FieldType alpha@@57))) (= (U_2_bool (MapType6Select (|lambda#46| |l#0@@45| |l#1@@45| |l#2@@45| |l#3@@45|) $o@@82 $f@@50))  (=> (and (not (= $o@@82 |l#0@@45|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@45| $o@@82) |l#2@@45|))) |l#3@@45|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4802| :pattern ( (MapType6Select (|lambda#46| |l#0@@45| |l#1@@45| |l#2@@45| |l#3@@45|) $o@@82 $f@@50)) )))
(assert (forall ((arg0@@421 T@U) (arg1@@270 T@U) (arg2@@200 T@U) (arg3@@146 Bool) ) (! (= (type (|lambda#47| arg0@@421 arg1@@270 arg2@@200 arg3@@146)) (MapType6Type refType boolType)) :qid |funType:lambda#47| :pattern ( (|lambda#47| arg0@@421 arg1@@270 arg2@@200 arg3@@146)) )))
(assert (forall ((|l#0@@46| T@U) (|l#1@@46| T@U) (|l#2@@46| T@U) (|l#3@@46| Bool) ($o@@83 T@U) ($f@@51 T@U) ) (! (let ((alpha@@58 (FieldTypeInv0 (type $f@@51)))) (=> (and (and (and (and (= (type |l#0@@46|) refType) (= (type |l#1@@46|) (MapType0Type refType MapType1Type))) (= (type |l#2@@46|) (FieldType boolType))) (= (type $o@@83) refType)) (= (type $f@@51) (FieldType alpha@@58))) (= (U_2_bool (MapType6Select (|lambda#47| |l#0@@46| |l#1@@46| |l#2@@46| |l#3@@46|) $o@@83 $f@@51))  (=> (and (not (= $o@@83 |l#0@@46|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@46| $o@@83) |l#2@@46|))) |l#3@@46|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4803| :pattern ( (MapType6Select (|lambda#47| |l#0@@46| |l#1@@46| |l#2@@46| |l#3@@46|) $o@@83 $f@@51)) )))
(assert (forall ((arg0@@422 T@U) (arg1@@271 T@U) (arg2@@201 T@U) (arg3@@147 Bool) ) (! (= (type (|lambda#48| arg0@@422 arg1@@271 arg2@@201 arg3@@147)) (MapType6Type refType boolType)) :qid |funType:lambda#48| :pattern ( (|lambda#48| arg0@@422 arg1@@271 arg2@@201 arg3@@147)) )))
(assert (forall ((|l#0@@47| T@U) (|l#1@@47| T@U) (|l#2@@47| T@U) (|l#3@@47| Bool) ($o@@84 T@U) ($f@@52 T@U) ) (! (let ((alpha@@59 (FieldTypeInv0 (type $f@@52)))) (=> (and (and (and (and (= (type |l#0@@47|) refType) (= (type |l#1@@47|) (MapType0Type refType MapType1Type))) (= (type |l#2@@47|) (FieldType boolType))) (= (type $o@@84) refType)) (= (type $f@@52) (FieldType alpha@@59))) (= (U_2_bool (MapType6Select (|lambda#48| |l#0@@47| |l#1@@47| |l#2@@47| |l#3@@47|) $o@@84 $f@@52))  (=> (and (not (= $o@@84 |l#0@@47|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@47| $o@@84) |l#2@@47|))) |l#3@@47|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4804| :pattern ( (MapType6Select (|lambda#48| |l#0@@47| |l#1@@47| |l#2@@47| |l#3@@47|) $o@@84 $f@@52)) )))
(assert (forall ((arg0@@423 T@U) (arg1@@272 T@U) (arg2@@202 T@U) (arg3@@148 Bool) ) (! (= (type (|lambda#49| arg0@@423 arg1@@272 arg2@@202 arg3@@148)) (MapType6Type refType boolType)) :qid |funType:lambda#49| :pattern ( (|lambda#49| arg0@@423 arg1@@272 arg2@@202 arg3@@148)) )))
(assert (forall ((|l#0@@48| T@U) (|l#1@@48| T@U) (|l#2@@48| T@U) (|l#3@@48| Bool) ($o@@85 T@U) ($f@@53 T@U) ) (! (let ((alpha@@60 (FieldTypeInv0 (type $f@@53)))) (=> (and (and (and (and (= (type |l#0@@48|) refType) (= (type |l#1@@48|) (MapType0Type refType MapType1Type))) (= (type |l#2@@48|) (FieldType boolType))) (= (type $o@@85) refType)) (= (type $f@@53) (FieldType alpha@@60))) (= (U_2_bool (MapType6Select (|lambda#49| |l#0@@48| |l#1@@48| |l#2@@48| |l#3@@48|) $o@@85 $f@@53))  (=> (and (not (= $o@@85 |l#0@@48|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@48| $o@@85) |l#2@@48|))) |l#3@@48|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4805| :pattern ( (MapType6Select (|lambda#49| |l#0@@48| |l#1@@48| |l#2@@48| |l#3@@48|) $o@@85 $f@@53)) )))
(assert (forall ((arg0@@424 T@U) (arg1@@273 T@U) (arg2@@203 T@U) (arg3@@149 Bool) ) (! (= (type (|lambda#50| arg0@@424 arg1@@273 arg2@@203 arg3@@149)) (MapType6Type refType boolType)) :qid |funType:lambda#50| :pattern ( (|lambda#50| arg0@@424 arg1@@273 arg2@@203 arg3@@149)) )))
(assert (forall ((|l#0@@49| T@U) (|l#1@@49| T@U) (|l#2@@49| T@U) (|l#3@@49| Bool) ($o@@86 T@U) ($f@@54 T@U) ) (! (let ((alpha@@61 (FieldTypeInv0 (type $f@@54)))) (=> (and (and (and (and (= (type |l#0@@49|) refType) (= (type |l#1@@49|) (MapType0Type refType MapType1Type))) (= (type |l#2@@49|) (FieldType boolType))) (= (type $o@@86) refType)) (= (type $f@@54) (FieldType alpha@@61))) (= (U_2_bool (MapType6Select (|lambda#50| |l#0@@49| |l#1@@49| |l#2@@49| |l#3@@49|) $o@@86 $f@@54))  (=> (and (not (= $o@@86 |l#0@@49|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@49| $o@@86) |l#2@@49|))) |l#3@@49|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4806| :pattern ( (MapType6Select (|lambda#50| |l#0@@49| |l#1@@49| |l#2@@49| |l#3@@49|) $o@@86 $f@@54)) )))
(assert (forall ((arg0@@425 T@U) (arg1@@274 T@U) (arg2@@204 T@U) (arg3@@150 Bool) ) (! (= (type (|lambda#51| arg0@@425 arg1@@274 arg2@@204 arg3@@150)) (MapType6Type refType boolType)) :qid |funType:lambda#51| :pattern ( (|lambda#51| arg0@@425 arg1@@274 arg2@@204 arg3@@150)) )))
(assert (forall ((|l#0@@50| T@U) (|l#1@@50| T@U) (|l#2@@50| T@U) (|l#3@@50| Bool) ($o@@87 T@U) ($f@@55 T@U) ) (! (let ((alpha@@62 (FieldTypeInv0 (type $f@@55)))) (=> (and (and (and (and (= (type |l#0@@50|) refType) (= (type |l#1@@50|) (MapType0Type refType MapType1Type))) (= (type |l#2@@50|) (FieldType boolType))) (= (type $o@@87) refType)) (= (type $f@@55) (FieldType alpha@@62))) (= (U_2_bool (MapType6Select (|lambda#51| |l#0@@50| |l#1@@50| |l#2@@50| |l#3@@50|) $o@@87 $f@@55))  (=> (and (not (= $o@@87 |l#0@@50|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@50| $o@@87) |l#2@@50|))) |l#3@@50|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4807| :pattern ( (MapType6Select (|lambda#51| |l#0@@50| |l#1@@50| |l#2@@50| |l#3@@50|) $o@@87 $f@@55)) )))
(assert (forall ((arg0@@426 T@U) (arg1@@275 T@U) (arg2@@205 T@U) (arg3@@151 Bool) ) (! (= (type (|lambda#52| arg0@@426 arg1@@275 arg2@@205 arg3@@151)) (MapType6Type refType boolType)) :qid |funType:lambda#52| :pattern ( (|lambda#52| arg0@@426 arg1@@275 arg2@@205 arg3@@151)) )))
(assert (forall ((|l#0@@51| T@U) (|l#1@@51| T@U) (|l#2@@51| T@U) (|l#3@@51| Bool) ($o@@88 T@U) ($f@@56 T@U) ) (! (let ((alpha@@63 (FieldTypeInv0 (type $f@@56)))) (=> (and (and (and (and (= (type |l#0@@51|) refType) (= (type |l#1@@51|) (MapType0Type refType MapType1Type))) (= (type |l#2@@51|) (FieldType boolType))) (= (type $o@@88) refType)) (= (type $f@@56) (FieldType alpha@@63))) (= (U_2_bool (MapType6Select (|lambda#52| |l#0@@51| |l#1@@51| |l#2@@51| |l#3@@51|) $o@@88 $f@@56))  (=> (and (not (= $o@@88 |l#0@@51|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@51| $o@@88) |l#2@@51|))) |l#3@@51|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4808| :pattern ( (MapType6Select (|lambda#52| |l#0@@51| |l#1@@51| |l#2@@51| |l#3@@51|) $o@@88 $f@@56)) )))
(assert (forall ((arg0@@427 T@U) (arg1@@276 T@U) (arg2@@206 T@U) (arg3@@152 Bool) ) (! (= (type (|lambda#53| arg0@@427 arg1@@276 arg2@@206 arg3@@152)) (MapType6Type refType boolType)) :qid |funType:lambda#53| :pattern ( (|lambda#53| arg0@@427 arg1@@276 arg2@@206 arg3@@152)) )))
(assert (forall ((|l#0@@52| T@U) (|l#1@@52| T@U) (|l#2@@52| T@U) (|l#3@@52| Bool) ($o@@89 T@U) ($f@@57 T@U) ) (! (let ((alpha@@64 (FieldTypeInv0 (type $f@@57)))) (=> (and (and (and (and (= (type |l#0@@52|) refType) (= (type |l#1@@52|) (MapType0Type refType MapType1Type))) (= (type |l#2@@52|) (FieldType boolType))) (= (type $o@@89) refType)) (= (type $f@@57) (FieldType alpha@@64))) (= (U_2_bool (MapType6Select (|lambda#53| |l#0@@52| |l#1@@52| |l#2@@52| |l#3@@52|) $o@@89 $f@@57))  (=> (and (not (= $o@@89 |l#0@@52|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@52| $o@@89) |l#2@@52|))) |l#3@@52|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4809| :pattern ( (MapType6Select (|lambda#53| |l#0@@52| |l#1@@52| |l#2@@52| |l#3@@52|) $o@@89 $f@@57)) )))
(assert (forall ((arg0@@428 T@U) (arg1@@277 T@U) (arg2@@207 T@U) (arg3@@153 Bool) ) (! (= (type (|lambda#54| arg0@@428 arg1@@277 arg2@@207 arg3@@153)) (MapType6Type refType boolType)) :qid |funType:lambda#54| :pattern ( (|lambda#54| arg0@@428 arg1@@277 arg2@@207 arg3@@153)) )))
(assert (forall ((|l#0@@53| T@U) (|l#1@@53| T@U) (|l#2@@53| T@U) (|l#3@@53| Bool) ($o@@90 T@U) ($f@@58 T@U) ) (! (let ((alpha@@65 (FieldTypeInv0 (type $f@@58)))) (=> (and (and (and (and (= (type |l#0@@53|) refType) (= (type |l#1@@53|) (MapType0Type refType MapType1Type))) (= (type |l#2@@53|) (FieldType boolType))) (= (type $o@@90) refType)) (= (type $f@@58) (FieldType alpha@@65))) (= (U_2_bool (MapType6Select (|lambda#54| |l#0@@53| |l#1@@53| |l#2@@53| |l#3@@53|) $o@@90 $f@@58))  (=> (and (not (= $o@@90 |l#0@@53|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@53| $o@@90) |l#2@@53|))) |l#3@@53|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4810| :pattern ( (MapType6Select (|lambda#54| |l#0@@53| |l#1@@53| |l#2@@53| |l#3@@53|) $o@@90 $f@@58)) )))
(assert (forall ((arg0@@429 T@U) (arg1@@278 T@U) (arg2@@208 T@U) (arg3@@154 Bool) ) (! (= (type (|lambda#55| arg0@@429 arg1@@278 arg2@@208 arg3@@154)) (MapType6Type refType boolType)) :qid |funType:lambda#55| :pattern ( (|lambda#55| arg0@@429 arg1@@278 arg2@@208 arg3@@154)) )))
(assert (forall ((|l#0@@54| T@U) (|l#1@@54| T@U) (|l#2@@54| T@U) (|l#3@@54| Bool) ($o@@91 T@U) ($f@@59 T@U) ) (! (let ((alpha@@66 (FieldTypeInv0 (type $f@@59)))) (=> (and (and (and (and (= (type |l#0@@54|) refType) (= (type |l#1@@54|) (MapType0Type refType MapType1Type))) (= (type |l#2@@54|) (FieldType boolType))) (= (type $o@@91) refType)) (= (type $f@@59) (FieldType alpha@@66))) (= (U_2_bool (MapType6Select (|lambda#55| |l#0@@54| |l#1@@54| |l#2@@54| |l#3@@54|) $o@@91 $f@@59))  (=> (and (not (= $o@@91 |l#0@@54|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@54| $o@@91) |l#2@@54|))) |l#3@@54|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4811| :pattern ( (MapType6Select (|lambda#55| |l#0@@54| |l#1@@54| |l#2@@54| |l#3@@54|) $o@@91 $f@@59)) )))
(assert (forall ((|l#0@@55| T@U) (|l#1@@55| Int) (|l#2@@55| Int) (|l#3@@55| T@U) (|l#4| T@U) (|$y#0| T@U) ) (!  (=> (and (and (and (= (type |l#0@@55|) TyType) (= (type |l#3@@55|) (SeqType BoxType))) (= (type |l#4|) (SeqType BoxType))) (= (type |$y#0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#56| |l#0@@55| |l#1@@55| |l#2@@55| |l#3@@55| |l#4|) |$y#0|))  (and ($IsBox |$y#0| |l#0@@55|) (and (and (<= |l#1@@55| (U_2_int ($Unbox intType |$y#0|))) (< (U_2_int ($Unbox intType |$y#0|)) |l#2@@55|)) (or (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| |l#3@@55| (U_2_int ($Unbox intType |$y#0|))))) (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| |l#4| (U_2_int ($Unbox intType |$y#0|)))))))))) :qid |DafnyPreludebpl.22:1| :skolemid |4812| :pattern ( (MapType0Select (|lambda#56| |l#0@@55| |l#1@@55| |l#2@@55| |l#3@@55| |l#4|) |$y#0|)) )))
(assert (forall ((arg0@@430 T@U) (arg1@@279 T@U) (arg2@@209 T@U) (arg3@@155 Bool) ) (! (= (type (|lambda#58| arg0@@430 arg1@@279 arg2@@209 arg3@@155)) (MapType6Type refType boolType)) :qid |funType:lambda#58| :pattern ( (|lambda#58| arg0@@430 arg1@@279 arg2@@209 arg3@@155)) )))
(assert (forall ((|l#0@@56| T@U) (|l#1@@56| T@U) (|l#2@@56| T@U) (|l#3@@56| Bool) ($o@@92 T@U) ($f@@60 T@U) ) (! (let ((alpha@@67 (FieldTypeInv0 (type $f@@60)))) (=> (and (and (and (and (= (type |l#0@@56|) refType) (= (type |l#1@@56|) (MapType0Type refType MapType1Type))) (= (type |l#2@@56|) (FieldType boolType))) (= (type $o@@92) refType)) (= (type $f@@60) (FieldType alpha@@67))) (= (U_2_bool (MapType6Select (|lambda#58| |l#0@@56| |l#1@@56| |l#2@@56| |l#3@@56|) $o@@92 $f@@60))  (=> (and (not (= $o@@92 |l#0@@56|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@56| $o@@92) |l#2@@56|))) |l#3@@56|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4813| :pattern ( (MapType6Select (|lambda#58| |l#0@@56| |l#1@@56| |l#2@@56| |l#3@@56|) $o@@92 $f@@60)) )))
(assert (forall ((arg0@@431 T@U) (arg1@@280 T@U) (arg2@@210 T@U) (arg3@@156 Bool) ) (! (= (type (|lambda#59| arg0@@431 arg1@@280 arg2@@210 arg3@@156)) (MapType6Type refType boolType)) :qid |funType:lambda#59| :pattern ( (|lambda#59| arg0@@431 arg1@@280 arg2@@210 arg3@@156)) )))
(assert (forall ((|l#0@@57| T@U) (|l#1@@57| T@U) (|l#2@@57| T@U) (|l#3@@57| Bool) ($o@@93 T@U) ($f@@61 T@U) ) (! (let ((alpha@@68 (FieldTypeInv0 (type $f@@61)))) (=> (and (and (and (and (= (type |l#0@@57|) refType) (= (type |l#1@@57|) (MapType0Type refType MapType1Type))) (= (type |l#2@@57|) (FieldType boolType))) (= (type $o@@93) refType)) (= (type $f@@61) (FieldType alpha@@68))) (= (U_2_bool (MapType6Select (|lambda#59| |l#0@@57| |l#1@@57| |l#2@@57| |l#3@@57|) $o@@93 $f@@61))  (=> (and (not (= $o@@93 |l#0@@57|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@57| $o@@93) |l#2@@57|))) |l#3@@57|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4814| :pattern ( (MapType6Select (|lambda#59| |l#0@@57| |l#1@@57| |l#2@@57| |l#3@@57|) $o@@93 $f@@61)) )))
(assert (forall ((arg0@@432 T@U) (arg1@@281 T@U) (arg2@@211 T@U) (arg3@@157 Bool) ) (! (= (type (|lambda#61| arg0@@432 arg1@@281 arg2@@211 arg3@@157)) (MapType6Type refType boolType)) :qid |funType:lambda#61| :pattern ( (|lambda#61| arg0@@432 arg1@@281 arg2@@211 arg3@@157)) )))
(assert (forall ((|l#0@@58| T@U) (|l#1@@58| T@U) (|l#2@@58| T@U) (|l#3@@58| Bool) ($o@@94 T@U) ($f@@62 T@U) ) (! (let ((alpha@@69 (FieldTypeInv0 (type $f@@62)))) (=> (and (and (and (and (= (type |l#0@@58|) refType) (= (type |l#1@@58|) (MapType0Type refType MapType1Type))) (= (type |l#2@@58|) (FieldType boolType))) (= (type $o@@94) refType)) (= (type $f@@62) (FieldType alpha@@69))) (= (U_2_bool (MapType6Select (|lambda#61| |l#0@@58| |l#1@@58| |l#2@@58| |l#3@@58|) $o@@94 $f@@62))  (=> (and (not (= $o@@94 |l#0@@58|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@58| $o@@94) |l#2@@58|))) |l#3@@58|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4815| :pattern ( (MapType6Select (|lambda#61| |l#0@@58| |l#1@@58| |l#2@@58| |l#3@@58|) $o@@94 $f@@62)) )))
(assert (forall ((arg0@@433 T@U) (arg1@@282 T@U) (arg2@@212 T@U) (arg3@@158 Bool) ) (! (= (type (|lambda#62| arg0@@433 arg1@@282 arg2@@212 arg3@@158)) (MapType6Type refType boolType)) :qid |funType:lambda#62| :pattern ( (|lambda#62| arg0@@433 arg1@@282 arg2@@212 arg3@@158)) )))
(assert (forall ((|l#0@@59| T@U) (|l#1@@59| T@U) (|l#2@@59| T@U) (|l#3@@59| Bool) ($o@@95 T@U) ($f@@63 T@U) ) (! (let ((alpha@@70 (FieldTypeInv0 (type $f@@63)))) (=> (and (and (and (and (= (type |l#0@@59|) refType) (= (type |l#1@@59|) (MapType0Type refType MapType1Type))) (= (type |l#2@@59|) (FieldType boolType))) (= (type $o@@95) refType)) (= (type $f@@63) (FieldType alpha@@70))) (= (U_2_bool (MapType6Select (|lambda#62| |l#0@@59| |l#1@@59| |l#2@@59| |l#3@@59|) $o@@95 $f@@63))  (=> (and (not (= $o@@95 |l#0@@59|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@59| $o@@95) |l#2@@59|))) |l#3@@59|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4816| :pattern ( (MapType6Select (|lambda#62| |l#0@@59| |l#1@@59| |l#2@@59| |l#3@@59|) $o@@95 $f@@63)) )))
(assert (forall ((arg0@@434 T@U) (arg1@@283 T@U) (arg2@@213 T@U) (arg3@@159 Bool) ) (! (= (type (|lambda#63| arg0@@434 arg1@@283 arg2@@213 arg3@@159)) (MapType6Type refType boolType)) :qid |funType:lambda#63| :pattern ( (|lambda#63| arg0@@434 arg1@@283 arg2@@213 arg3@@159)) )))
(assert (forall ((|l#0@@60| T@U) (|l#1@@60| T@U) (|l#2@@60| T@U) (|l#3@@60| Bool) ($o@@96 T@U) ($f@@64 T@U) ) (! (let ((alpha@@71 (FieldTypeInv0 (type $f@@64)))) (=> (and (and (and (and (= (type |l#0@@60|) refType) (= (type |l#1@@60|) (MapType0Type refType MapType1Type))) (= (type |l#2@@60|) (FieldType boolType))) (= (type $o@@96) refType)) (= (type $f@@64) (FieldType alpha@@71))) (= (U_2_bool (MapType6Select (|lambda#63| |l#0@@60| |l#1@@60| |l#2@@60| |l#3@@60|) $o@@96 $f@@64))  (=> (and (not (= $o@@96 |l#0@@60|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@60| $o@@96) |l#2@@60|))) |l#3@@60|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4817| :pattern ( (MapType6Select (|lambda#63| |l#0@@60| |l#1@@60| |l#2@@60| |l#3@@60|) $o@@96 $f@@64)) )))
(assert (forall ((arg0@@435 T@U) (arg1@@284 T@U) (arg2@@214 T@U) (arg3@@160 Bool) ) (! (= (type (|lambda#64| arg0@@435 arg1@@284 arg2@@214 arg3@@160)) (MapType6Type refType boolType)) :qid |funType:lambda#64| :pattern ( (|lambda#64| arg0@@435 arg1@@284 arg2@@214 arg3@@160)) )))
(assert (forall ((|l#0@@61| T@U) (|l#1@@61| T@U) (|l#2@@61| T@U) (|l#3@@61| Bool) ($o@@97 T@U) ($f@@65 T@U) ) (! (let ((alpha@@72 (FieldTypeInv0 (type $f@@65)))) (=> (and (and (and (and (= (type |l#0@@61|) refType) (= (type |l#1@@61|) (MapType0Type refType MapType1Type))) (= (type |l#2@@61|) (FieldType boolType))) (= (type $o@@97) refType)) (= (type $f@@65) (FieldType alpha@@72))) (= (U_2_bool (MapType6Select (|lambda#64| |l#0@@61| |l#1@@61| |l#2@@61| |l#3@@61|) $o@@97 $f@@65))  (=> (and (not (= $o@@97 |l#0@@61|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@61| $o@@97) |l#2@@61|))) |l#3@@61|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4818| :pattern ( (MapType6Select (|lambda#64| |l#0@@61| |l#1@@61| |l#2@@61| |l#3@@61|) $o@@97 $f@@65)) )))
(assert (forall ((arg0@@436 T@U) (arg1@@285 T@U) (arg2@@215 T@U) (arg3@@161 Bool) ) (! (= (type (|lambda#65| arg0@@436 arg1@@285 arg2@@215 arg3@@161)) (MapType6Type refType boolType)) :qid |funType:lambda#65| :pattern ( (|lambda#65| arg0@@436 arg1@@285 arg2@@215 arg3@@161)) )))
(assert (forall ((|l#0@@62| T@U) (|l#1@@62| T@U) (|l#2@@62| T@U) (|l#3@@62| Bool) ($o@@98 T@U) ($f@@66 T@U) ) (! (let ((alpha@@73 (FieldTypeInv0 (type $f@@66)))) (=> (and (and (and (and (= (type |l#0@@62|) refType) (= (type |l#1@@62|) (MapType0Type refType MapType1Type))) (= (type |l#2@@62|) (FieldType boolType))) (= (type $o@@98) refType)) (= (type $f@@66) (FieldType alpha@@73))) (= (U_2_bool (MapType6Select (|lambda#65| |l#0@@62| |l#1@@62| |l#2@@62| |l#3@@62|) $o@@98 $f@@66))  (=> (and (not (= $o@@98 |l#0@@62|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@62| $o@@98) |l#2@@62|))) |l#3@@62|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4819| :pattern ( (MapType6Select (|lambda#65| |l#0@@62| |l#1@@62| |l#2@@62| |l#3@@62|) $o@@98 $f@@66)) )))
(assert (forall ((arg0@@437 T@U) (arg1@@286 T@U) (arg2@@216 T@U) (arg3@@162 Bool) ) (! (= (type (|lambda#66| arg0@@437 arg1@@286 arg2@@216 arg3@@162)) (MapType6Type refType boolType)) :qid |funType:lambda#66| :pattern ( (|lambda#66| arg0@@437 arg1@@286 arg2@@216 arg3@@162)) )))
(assert (forall ((|l#0@@63| T@U) (|l#1@@63| T@U) (|l#2@@63| T@U) (|l#3@@63| Bool) ($o@@99 T@U) ($f@@67 T@U) ) (! (let ((alpha@@74 (FieldTypeInv0 (type $f@@67)))) (=> (and (and (and (and (= (type |l#0@@63|) refType) (= (type |l#1@@63|) (MapType0Type refType MapType1Type))) (= (type |l#2@@63|) (FieldType boolType))) (= (type $o@@99) refType)) (= (type $f@@67) (FieldType alpha@@74))) (= (U_2_bool (MapType6Select (|lambda#66| |l#0@@63| |l#1@@63| |l#2@@63| |l#3@@63|) $o@@99 $f@@67))  (=> (and (not (= $o@@99 |l#0@@63|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@63| $o@@99) |l#2@@63|))) |l#3@@63|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4820| :pattern ( (MapType6Select (|lambda#66| |l#0@@63| |l#1@@63| |l#2@@63| |l#3@@63|) $o@@99 $f@@67)) )))
(assert (forall ((arg0@@438 T@U) (arg1@@287 T@U) (arg2@@217 T@U) (arg3@@163 Bool) ) (! (= (type (|lambda#67| arg0@@438 arg1@@287 arg2@@217 arg3@@163)) (MapType6Type refType boolType)) :qid |funType:lambda#67| :pattern ( (|lambda#67| arg0@@438 arg1@@287 arg2@@217 arg3@@163)) )))
(assert (forall ((|l#0@@64| T@U) (|l#1@@64| T@U) (|l#2@@64| T@U) (|l#3@@64| Bool) ($o@@100 T@U) ($f@@68 T@U) ) (! (let ((alpha@@75 (FieldTypeInv0 (type $f@@68)))) (=> (and (and (and (and (= (type |l#0@@64|) refType) (= (type |l#1@@64|) (MapType0Type refType MapType1Type))) (= (type |l#2@@64|) (FieldType boolType))) (= (type $o@@100) refType)) (= (type $f@@68) (FieldType alpha@@75))) (= (U_2_bool (MapType6Select (|lambda#67| |l#0@@64| |l#1@@64| |l#2@@64| |l#3@@64|) $o@@100 $f@@68))  (=> (and (not (= $o@@100 |l#0@@64|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@64| $o@@100) |l#2@@64|))) |l#3@@64|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4821| :pattern ( (MapType6Select (|lambda#67| |l#0@@64| |l#1@@64| |l#2@@64| |l#3@@64|) $o@@100 $f@@68)) )))
(assert (forall ((arg0@@439 T@U) (arg1@@288 T@U) (arg2@@218 T@U) (arg3@@164 Bool) ) (! (= (type (|lambda#68| arg0@@439 arg1@@288 arg2@@218 arg3@@164)) (MapType6Type refType boolType)) :qid |funType:lambda#68| :pattern ( (|lambda#68| arg0@@439 arg1@@288 arg2@@218 arg3@@164)) )))
(assert (forall ((|l#0@@65| T@U) (|l#1@@65| T@U) (|l#2@@65| T@U) (|l#3@@65| Bool) ($o@@101 T@U) ($f@@69 T@U) ) (! (let ((alpha@@76 (FieldTypeInv0 (type $f@@69)))) (=> (and (and (and (and (= (type |l#0@@65|) refType) (= (type |l#1@@65|) (MapType0Type refType MapType1Type))) (= (type |l#2@@65|) (FieldType boolType))) (= (type $o@@101) refType)) (= (type $f@@69) (FieldType alpha@@76))) (= (U_2_bool (MapType6Select (|lambda#68| |l#0@@65| |l#1@@65| |l#2@@65| |l#3@@65|) $o@@101 $f@@69))  (=> (and (not (= $o@@101 |l#0@@65|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@65| $o@@101) |l#2@@65|))) |l#3@@65|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4822| :pattern ( (MapType6Select (|lambda#68| |l#0@@65| |l#1@@65| |l#2@@65| |l#3@@65|) $o@@101 $f@@69)) )))
(assert (forall ((arg0@@440 T@U) (arg1@@289 T@U) (arg2@@219 T@U) (arg3@@165 Bool) ) (! (= (type (|lambda#69| arg0@@440 arg1@@289 arg2@@219 arg3@@165)) (MapType6Type refType boolType)) :qid |funType:lambda#69| :pattern ( (|lambda#69| arg0@@440 arg1@@289 arg2@@219 arg3@@165)) )))
(assert (forall ((|l#0@@66| T@U) (|l#1@@66| T@U) (|l#2@@66| T@U) (|l#3@@66| Bool) ($o@@102 T@U) ($f@@70 T@U) ) (! (let ((alpha@@77 (FieldTypeInv0 (type $f@@70)))) (=> (and (and (and (and (= (type |l#0@@66|) refType) (= (type |l#1@@66|) (MapType0Type refType MapType1Type))) (= (type |l#2@@66|) (FieldType boolType))) (= (type $o@@102) refType)) (= (type $f@@70) (FieldType alpha@@77))) (= (U_2_bool (MapType6Select (|lambda#69| |l#0@@66| |l#1@@66| |l#2@@66| |l#3@@66|) $o@@102 $f@@70))  (=> (and (not (= $o@@102 |l#0@@66|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@66| $o@@102) |l#2@@66|))) |l#3@@66|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4823| :pattern ( (MapType6Select (|lambda#69| |l#0@@66| |l#1@@66| |l#2@@66| |l#3@@66|) $o@@102 $f@@70)) )))
(assert (forall ((arg0@@441 T@U) (arg1@@290 T@U) (arg2@@220 T@U) (arg3@@166 T@U) ) (! (= (type (|lambda#70| arg0@@441 arg1@@290 arg2@@220 arg3@@166)) (MapType0Type BoxType boolType)) :qid |funType:lambda#70| :pattern ( (|lambda#70| arg0@@441 arg1@@290 arg2@@220 arg3@@166)) )))
(assert (forall ((|l#0@@67| T@U) (|l#1@@67| T@U) (|l#2@@67| T@U) (|l#3@@67| T@U) (|$y#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |l#0@@67|) (MapType0Type BoxType boolType)) (= (type |l#1@@67|) (SeqType BoxType))) (= (type |l#2@@67|) (MapType0Type BoxType boolType))) (= (type |l#3@@67|) (SeqType BoxType))) (= (type |$y#0@@0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#70| |l#0@@67| |l#1@@67| |l#2@@67| |l#3@@67|) |$y#0@@0|)) (exists ((|i#1@@17| Int) ) (!  (and (U_2_bool (MapType0Select |l#0@@67| ($Box (int_2_U |i#1@@17|)))) (= |$y#0@@0| ($Box (|#_System._tuple#2._#Make2| ($Box (int_2_U |i#1@@17|)) ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |l#1@@67| |i#1@@17|))))))))) :qid |MutableMapModelidfy.357:26| :skolemid |1511| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |l#3@@67| |i#1@@17|))) :pattern ( (MapType0Select |l#2@@67| ($Box (int_2_U |i#1@@17|)))) )))) :qid |MutableMapModelidfy.357:35| :skolemid |4824| :pattern ( (MapType0Select (|lambda#70| |l#0@@67| |l#1@@67| |l#2@@67| |l#3@@67|) |$y#0@@0|)) )))
(assert (forall ((arg0@@442 T@U) (arg1@@291 T@U) (arg2@@221 T@U) (arg3@@167 Bool) ) (! (= (type (|lambda#71| arg0@@442 arg1@@291 arg2@@221 arg3@@167)) (MapType6Type refType boolType)) :qid |funType:lambda#71| :pattern ( (|lambda#71| arg0@@442 arg1@@291 arg2@@221 arg3@@167)) )))
(assert (forall ((|l#0@@68| T@U) (|l#1@@68| T@U) (|l#2@@68| T@U) (|l#3@@68| Bool) ($o@@103 T@U) ($f@@71 T@U) ) (! (let ((alpha@@78 (FieldTypeInv0 (type $f@@71)))) (=> (and (and (and (and (= (type |l#0@@68|) refType) (= (type |l#1@@68|) (MapType0Type refType MapType1Type))) (= (type |l#2@@68|) (FieldType boolType))) (= (type $o@@103) refType)) (= (type $f@@71) (FieldType alpha@@78))) (= (U_2_bool (MapType6Select (|lambda#71| |l#0@@68| |l#1@@68| |l#2@@68| |l#3@@68|) $o@@103 $f@@71))  (=> (and (not (= $o@@103 |l#0@@68|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@68| $o@@103) |l#2@@68|))) |l#3@@68|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4825| :pattern ( (MapType6Select (|lambda#71| |l#0@@68| |l#1@@68| |l#2@@68| |l#3@@68|) $o@@103 $f@@71)) )))
(assert (forall ((arg0@@443 T@U) (arg1@@292 T@U) (arg2@@222 T@U) (arg3@@168 Bool) ) (! (= (type (|lambda#72| arg0@@443 arg1@@292 arg2@@222 arg3@@168)) (MapType6Type refType boolType)) :qid |funType:lambda#72| :pattern ( (|lambda#72| arg0@@443 arg1@@292 arg2@@222 arg3@@168)) )))
(assert (forall ((|l#0@@69| T@U) (|l#1@@69| T@U) (|l#2@@69| T@U) (|l#3@@69| Bool) ($o@@104 T@U) ($f@@72 T@U) ) (! (let ((alpha@@79 (FieldTypeInv0 (type $f@@72)))) (=> (and (and (and (and (= (type |l#0@@69|) refType) (= (type |l#1@@69|) (MapType0Type refType MapType1Type))) (= (type |l#2@@69|) (FieldType boolType))) (= (type $o@@104) refType)) (= (type $f@@72) (FieldType alpha@@79))) (= (U_2_bool (MapType6Select (|lambda#72| |l#0@@69| |l#1@@69| |l#2@@69| |l#3@@69|) $o@@104 $f@@72))  (=> (and (not (= $o@@104 |l#0@@69|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@69| $o@@104) |l#2@@69|))) |l#3@@69|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4826| :pattern ( (MapType6Select (|lambda#72| |l#0@@69| |l#1@@69| |l#2@@69| |l#3@@69|) $o@@104 $f@@72)) )))
(assert (forall ((arg0@@444 T@U) (arg1@@293 T@U) (arg2@@223 T@U) (arg3@@169 Bool) ) (! (= (type (|lambda#73| arg0@@444 arg1@@293 arg2@@223 arg3@@169)) (MapType6Type refType boolType)) :qid |funType:lambda#73| :pattern ( (|lambda#73| arg0@@444 arg1@@293 arg2@@223 arg3@@169)) )))
(assert (forall ((|l#0@@70| T@U) (|l#1@@70| T@U) (|l#2@@70| T@U) (|l#3@@70| Bool) ($o@@105 T@U) ($f@@73 T@U) ) (! (let ((alpha@@80 (FieldTypeInv0 (type $f@@73)))) (=> (and (and (and (and (= (type |l#0@@70|) refType) (= (type |l#1@@70|) (MapType0Type refType MapType1Type))) (= (type |l#2@@70|) (FieldType boolType))) (= (type $o@@105) refType)) (= (type $f@@73) (FieldType alpha@@80))) (= (U_2_bool (MapType6Select (|lambda#73| |l#0@@70| |l#1@@70| |l#2@@70| |l#3@@70|) $o@@105 $f@@73))  (=> (and (not (= $o@@105 |l#0@@70|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@70| $o@@105) |l#2@@70|))) |l#3@@70|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4827| :pattern ( (MapType6Select (|lambda#73| |l#0@@70| |l#1@@70| |l#2@@70| |l#3@@70|) $o@@105 $f@@73)) )))
(assert (forall ((arg0@@445 T@U) (arg1@@294 T@U) (arg2@@224 T@U) (arg3@@170 Bool) ) (! (= (type (|lambda#74| arg0@@445 arg1@@294 arg2@@224 arg3@@170)) (MapType6Type refType boolType)) :qid |funType:lambda#74| :pattern ( (|lambda#74| arg0@@445 arg1@@294 arg2@@224 arg3@@170)) )))
(assert (forall ((|l#0@@71| T@U) (|l#1@@71| T@U) (|l#2@@71| T@U) (|l#3@@71| Bool) ($o@@106 T@U) ($f@@74 T@U) ) (! (let ((alpha@@81 (FieldTypeInv0 (type $f@@74)))) (=> (and (and (and (and (= (type |l#0@@71|) refType) (= (type |l#1@@71|) (MapType0Type refType MapType1Type))) (= (type |l#2@@71|) (FieldType boolType))) (= (type $o@@106) refType)) (= (type $f@@74) (FieldType alpha@@81))) (= (U_2_bool (MapType6Select (|lambda#74| |l#0@@71| |l#1@@71| |l#2@@71| |l#3@@71|) $o@@106 $f@@74))  (=> (and (not (= $o@@106 |l#0@@71|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@71| $o@@106) |l#2@@71|))) |l#3@@71|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4828| :pattern ( (MapType6Select (|lambda#74| |l#0@@71| |l#1@@71| |l#2@@71| |l#3@@71|) $o@@106 $f@@74)) )))
(assert (forall ((arg0@@446 T@U) (arg1@@295 T@U) (arg2@@225 T@U) (arg3@@171 Bool) ) (! (= (type (|lambda#75| arg0@@446 arg1@@295 arg2@@225 arg3@@171)) (MapType6Type refType boolType)) :qid |funType:lambda#75| :pattern ( (|lambda#75| arg0@@446 arg1@@295 arg2@@225 arg3@@171)) )))
(assert (forall ((|l#0@@72| T@U) (|l#1@@72| T@U) (|l#2@@72| T@U) (|l#3@@72| Bool) ($o@@107 T@U) ($f@@75 T@U) ) (! (let ((alpha@@82 (FieldTypeInv0 (type $f@@75)))) (=> (and (and (and (and (= (type |l#0@@72|) refType) (= (type |l#1@@72|) (MapType0Type refType MapType1Type))) (= (type |l#2@@72|) (FieldType boolType))) (= (type $o@@107) refType)) (= (type $f@@75) (FieldType alpha@@82))) (= (U_2_bool (MapType6Select (|lambda#75| |l#0@@72| |l#1@@72| |l#2@@72| |l#3@@72|) $o@@107 $f@@75))  (=> (and (not (= $o@@107 |l#0@@72|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@72| $o@@107) |l#2@@72|))) |l#3@@72|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4829| :pattern ( (MapType6Select (|lambda#75| |l#0@@72| |l#1@@72| |l#2@@72| |l#3@@72|) $o@@107 $f@@75)) )))
(assert (forall ((arg0@@447 T@U) (arg1@@296 T@U) (arg2@@226 T@U) (arg3@@172 Bool) ) (! (= (type (|lambda#76| arg0@@447 arg1@@296 arg2@@226 arg3@@172)) (MapType6Type refType boolType)) :qid |funType:lambda#76| :pattern ( (|lambda#76| arg0@@447 arg1@@296 arg2@@226 arg3@@172)) )))
(assert (forall ((|l#0@@73| T@U) (|l#1@@73| T@U) (|l#2@@73| T@U) (|l#3@@73| Bool) ($o@@108 T@U) ($f@@76 T@U) ) (! (let ((alpha@@83 (FieldTypeInv0 (type $f@@76)))) (=> (and (and (and (and (= (type |l#0@@73|) refType) (= (type |l#1@@73|) (MapType0Type refType MapType1Type))) (= (type |l#2@@73|) (FieldType boolType))) (= (type $o@@108) refType)) (= (type $f@@76) (FieldType alpha@@83))) (= (U_2_bool (MapType6Select (|lambda#76| |l#0@@73| |l#1@@73| |l#2@@73| |l#3@@73|) $o@@108 $f@@76))  (=> (and (not (= $o@@108 |l#0@@73|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@73| $o@@108) |l#2@@73|))) |l#3@@73|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4830| :pattern ( (MapType6Select (|lambda#76| |l#0@@73| |l#1@@73| |l#2@@73| |l#3@@73|) $o@@108 $f@@76)) )))
(assert (forall ((arg0@@448 T@U) (arg1@@297 T@U) (arg2@@227 T@U) (arg3@@173 Bool) ) (! (= (type (|lambda#77| arg0@@448 arg1@@297 arg2@@227 arg3@@173)) (MapType6Type refType boolType)) :qid |funType:lambda#77| :pattern ( (|lambda#77| arg0@@448 arg1@@297 arg2@@227 arg3@@173)) )))
(assert (forall ((|l#0@@74| T@U) (|l#1@@74| T@U) (|l#2@@74| T@U) (|l#3@@74| Bool) ($o@@109 T@U) ($f@@77 T@U) ) (! (let ((alpha@@84 (FieldTypeInv0 (type $f@@77)))) (=> (and (and (and (and (= (type |l#0@@74|) refType) (= (type |l#1@@74|) (MapType0Type refType MapType1Type))) (= (type |l#2@@74|) (FieldType boolType))) (= (type $o@@109) refType)) (= (type $f@@77) (FieldType alpha@@84))) (= (U_2_bool (MapType6Select (|lambda#77| |l#0@@74| |l#1@@74| |l#2@@74| |l#3@@74|) $o@@109 $f@@77))  (=> (and (not (= $o@@109 |l#0@@74|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@74| $o@@109) |l#2@@74|))) |l#3@@74|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4831| :pattern ( (MapType6Select (|lambda#77| |l#0@@74| |l#1@@74| |l#2@@74| |l#3@@74|) $o@@109 $f@@77)) )))
(assert (forall ((arg0@@449 T@U) (arg1@@298 T@U) (arg2@@228 T@U) (arg3@@174 Bool) ) (! (= (type (|lambda#78| arg0@@449 arg1@@298 arg2@@228 arg3@@174)) (MapType6Type refType boolType)) :qid |funType:lambda#78| :pattern ( (|lambda#78| arg0@@449 arg1@@298 arg2@@228 arg3@@174)) )))
(assert (forall ((|l#0@@75| T@U) (|l#1@@75| T@U) (|l#2@@75| T@U) (|l#3@@75| Bool) ($o@@110 T@U) ($f@@78 T@U) ) (! (let ((alpha@@85 (FieldTypeInv0 (type $f@@78)))) (=> (and (and (and (and (= (type |l#0@@75|) refType) (= (type |l#1@@75|) (MapType0Type refType MapType1Type))) (= (type |l#2@@75|) (FieldType boolType))) (= (type $o@@110) refType)) (= (type $f@@78) (FieldType alpha@@85))) (= (U_2_bool (MapType6Select (|lambda#78| |l#0@@75| |l#1@@75| |l#2@@75| |l#3@@75|) $o@@110 $f@@78))  (=> (and (not (= $o@@110 |l#0@@75|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@75| $o@@110) |l#2@@75|))) |l#3@@75|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4832| :pattern ( (MapType6Select (|lambda#78| |l#0@@75| |l#1@@75| |l#2@@75| |l#3@@75|) $o@@110 $f@@78)) )))
(assert (forall ((arg0@@450 T@U) (arg1@@299 T@U) (arg2@@229 T@U) (arg3@@175 Bool) ) (! (= (type (|lambda#79| arg0@@450 arg1@@299 arg2@@229 arg3@@175)) (MapType6Type refType boolType)) :qid |funType:lambda#79| :pattern ( (|lambda#79| arg0@@450 arg1@@299 arg2@@229 arg3@@175)) )))
(assert (forall ((|l#0@@76| T@U) (|l#1@@76| T@U) (|l#2@@76| T@U) (|l#3@@76| Bool) ($o@@111 T@U) ($f@@79 T@U) ) (! (let ((alpha@@86 (FieldTypeInv0 (type $f@@79)))) (=> (and (and (and (and (= (type |l#0@@76|) refType) (= (type |l#1@@76|) (MapType0Type refType MapType1Type))) (= (type |l#2@@76|) (FieldType boolType))) (= (type $o@@111) refType)) (= (type $f@@79) (FieldType alpha@@86))) (= (U_2_bool (MapType6Select (|lambda#79| |l#0@@76| |l#1@@76| |l#2@@76| |l#3@@76|) $o@@111 $f@@79))  (=> (and (not (= $o@@111 |l#0@@76|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@76| $o@@111) |l#2@@76|))) |l#3@@76|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4833| :pattern ( (MapType6Select (|lambda#79| |l#0@@76| |l#1@@76| |l#2@@76| |l#3@@76|) $o@@111 $f@@79)) )))
(assert (forall ((arg0@@451 T@U) (arg1@@300 T@U) (arg2@@230 T@U) (arg3@@176 Bool) ) (! (= (type (|lambda#80| arg0@@451 arg1@@300 arg2@@230 arg3@@176)) (MapType6Type refType boolType)) :qid |funType:lambda#80| :pattern ( (|lambda#80| arg0@@451 arg1@@300 arg2@@230 arg3@@176)) )))
(assert (forall ((|l#0@@77| T@U) (|l#1@@77| T@U) (|l#2@@77| T@U) (|l#3@@77| Bool) ($o@@112 T@U) ($f@@80 T@U) ) (! (let ((alpha@@87 (FieldTypeInv0 (type $f@@80)))) (=> (and (and (and (and (= (type |l#0@@77|) refType) (= (type |l#1@@77|) (MapType0Type refType MapType1Type))) (= (type |l#2@@77|) (FieldType boolType))) (= (type $o@@112) refType)) (= (type $f@@80) (FieldType alpha@@87))) (= (U_2_bool (MapType6Select (|lambda#80| |l#0@@77| |l#1@@77| |l#2@@77| |l#3@@77|) $o@@112 $f@@80))  (=> (and (not (= $o@@112 |l#0@@77|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@77| $o@@112) |l#2@@77|))) |l#3@@77|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4834| :pattern ( (MapType6Select (|lambda#80| |l#0@@77| |l#1@@77| |l#2@@77| |l#3@@77|) $o@@112 $f@@80)) )))
(assert (forall ((arg0@@452 T@U) (arg1@@301 T@U) (arg2@@231 T@U) (arg3@@177 Bool) ) (! (= (type (|lambda#81| arg0@@452 arg1@@301 arg2@@231 arg3@@177)) (MapType6Type refType boolType)) :qid |funType:lambda#81| :pattern ( (|lambda#81| arg0@@452 arg1@@301 arg2@@231 arg3@@177)) )))
(assert (forall ((|l#0@@78| T@U) (|l#1@@78| T@U) (|l#2@@78| T@U) (|l#3@@78| Bool) ($o@@113 T@U) ($f@@81 T@U) ) (! (let ((alpha@@88 (FieldTypeInv0 (type $f@@81)))) (=> (and (and (and (and (= (type |l#0@@78|) refType) (= (type |l#1@@78|) (MapType0Type refType MapType1Type))) (= (type |l#2@@78|) (FieldType boolType))) (= (type $o@@113) refType)) (= (type $f@@81) (FieldType alpha@@88))) (= (U_2_bool (MapType6Select (|lambda#81| |l#0@@78| |l#1@@78| |l#2@@78| |l#3@@78|) $o@@113 $f@@81))  (=> (and (not (= $o@@113 |l#0@@78|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@78| $o@@113) |l#2@@78|))) |l#3@@78|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4835| :pattern ( (MapType6Select (|lambda#81| |l#0@@78| |l#1@@78| |l#2@@78| |l#3@@78|) $o@@113 $f@@81)) )))
(assert (forall ((arg0@@453 T@U) (arg1@@302 T@U) (arg2@@232 T@U) (arg3@@178 Bool) ) (! (= (type (|lambda#82| arg0@@453 arg1@@302 arg2@@232 arg3@@178)) (MapType6Type refType boolType)) :qid |funType:lambda#82| :pattern ( (|lambda#82| arg0@@453 arg1@@302 arg2@@232 arg3@@178)) )))
(assert (forall ((|l#0@@79| T@U) (|l#1@@79| T@U) (|l#2@@79| T@U) (|l#3@@79| Bool) ($o@@114 T@U) ($f@@82 T@U) ) (! (let ((alpha@@89 (FieldTypeInv0 (type $f@@82)))) (=> (and (and (and (and (= (type |l#0@@79|) refType) (= (type |l#1@@79|) (MapType0Type refType MapType1Type))) (= (type |l#2@@79|) (FieldType boolType))) (= (type $o@@114) refType)) (= (type $f@@82) (FieldType alpha@@89))) (= (U_2_bool (MapType6Select (|lambda#82| |l#0@@79| |l#1@@79| |l#2@@79| |l#3@@79|) $o@@114 $f@@82))  (=> (and (not (= $o@@114 |l#0@@79|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@79| $o@@114) |l#2@@79|))) |l#3@@79|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4836| :pattern ( (MapType6Select (|lambda#82| |l#0@@79| |l#1@@79| |l#2@@79| |l#3@@79|) $o@@114 $f@@82)) )))
(assert (forall ((arg0@@454 T@U) (arg1@@303 T@U) (arg2@@233 T@U) (arg3@@179 Bool) ) (! (= (type (|lambda#83| arg0@@454 arg1@@303 arg2@@233 arg3@@179)) (MapType6Type refType boolType)) :qid |funType:lambda#83| :pattern ( (|lambda#83| arg0@@454 arg1@@303 arg2@@233 arg3@@179)) )))
(assert (forall ((|l#0@@80| T@U) (|l#1@@80| T@U) (|l#2@@80| T@U) (|l#3@@80| Bool) ($o@@115 T@U) ($f@@83 T@U) ) (! (let ((alpha@@90 (FieldTypeInv0 (type $f@@83)))) (=> (and (and (and (and (= (type |l#0@@80|) refType) (= (type |l#1@@80|) (MapType0Type refType MapType1Type))) (= (type |l#2@@80|) (FieldType boolType))) (= (type $o@@115) refType)) (= (type $f@@83) (FieldType alpha@@90))) (= (U_2_bool (MapType6Select (|lambda#83| |l#0@@80| |l#1@@80| |l#2@@80| |l#3@@80|) $o@@115 $f@@83))  (=> (and (not (= $o@@115 |l#0@@80|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@80| $o@@115) |l#2@@80|))) |l#3@@80|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4837| :pattern ( (MapType6Select (|lambda#83| |l#0@@80| |l#1@@80| |l#2@@80| |l#3@@80|) $o@@115 $f@@83)) )))
(assert (forall ((|l#0@@81| T@U) (|l#1@@81| Int) (|l#2@@81| Int) (|$y#0_0| T@U) ) (!  (=> (and (= (type |l#0@@81|) TyType) (= (type |$y#0_0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#84| |l#0@@81| |l#1@@81| |l#2@@81|) |$y#0_0|))  (and ($IsBox |$y#0_0| |l#0@@81|) (and (<= |l#1@@81| (U_2_int ($Unbox intType |$y#0_0|))) (< (U_2_int ($Unbox intType |$y#0_0|)) |l#2@@81|))))) :qid |DafnyPreludebpl.22:1| :skolemid |4838| :pattern ( (MapType0Select (|lambda#84| |l#0@@81| |l#1@@81| |l#2@@81|) |$y#0_0|)) )))
(assert (forall ((arg0@@455 T@U) (arg1@@304 T@U) (arg2@@234 T@U) (arg3@@180 Bool) ) (! (= (type (|lambda#85| arg0@@455 arg1@@304 arg2@@234 arg3@@180)) (MapType6Type refType boolType)) :qid |funType:lambda#85| :pattern ( (|lambda#85| arg0@@455 arg1@@304 arg2@@234 arg3@@180)) )))
(assert (forall ((|l#0@@82| T@U) (|l#1@@82| T@U) (|l#2@@82| T@U) (|l#3@@81| Bool) ($o@@116 T@U) ($f@@84 T@U) ) (! (let ((alpha@@91 (FieldTypeInv0 (type $f@@84)))) (=> (and (and (and (and (= (type |l#0@@82|) refType) (= (type |l#1@@82|) (MapType0Type refType MapType1Type))) (= (type |l#2@@82|) (FieldType boolType))) (= (type $o@@116) refType)) (= (type $f@@84) (FieldType alpha@@91))) (= (U_2_bool (MapType6Select (|lambda#85| |l#0@@82| |l#1@@82| |l#2@@82| |l#3@@81|) $o@@116 $f@@84))  (=> (and (not (= $o@@116 |l#0@@82|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@82| $o@@116) |l#2@@82|))) |l#3@@81|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4839| :pattern ( (MapType6Select (|lambda#85| |l#0@@82| |l#1@@82| |l#2@@82| |l#3@@81|) $o@@116 $f@@84)) )))
(assert (forall ((arg0@@456 T@U) (arg1@@305 T@U) (arg2@@235 T@U) (arg3@@181 Bool) ) (! (= (type (|lambda#86| arg0@@456 arg1@@305 arg2@@235 arg3@@181)) (MapType6Type refType boolType)) :qid |funType:lambda#86| :pattern ( (|lambda#86| arg0@@456 arg1@@305 arg2@@235 arg3@@181)) )))
(assert (forall ((|l#0@@83| T@U) (|l#1@@83| T@U) (|l#2@@83| T@U) (|l#3@@82| Bool) ($o@@117 T@U) ($f@@85 T@U) ) (! (let ((alpha@@92 (FieldTypeInv0 (type $f@@85)))) (=> (and (and (and (and (= (type |l#0@@83|) refType) (= (type |l#1@@83|) (MapType0Type refType MapType1Type))) (= (type |l#2@@83|) (FieldType boolType))) (= (type $o@@117) refType)) (= (type $f@@85) (FieldType alpha@@92))) (= (U_2_bool (MapType6Select (|lambda#86| |l#0@@83| |l#1@@83| |l#2@@83| |l#3@@82|) $o@@117 $f@@85))  (=> (and (not (= $o@@117 |l#0@@83|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@83| $o@@117) |l#2@@83|))) |l#3@@82|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4840| :pattern ( (MapType6Select (|lambda#86| |l#0@@83| |l#1@@83| |l#2@@83| |l#3@@82|) $o@@117 $f@@85)) )))
(assert (forall ((arg0@@457 T@U) (arg1@@306 T@U) (arg2@@236 T@U) (arg3@@182 Bool) ) (! (= (type (|lambda#87| arg0@@457 arg1@@306 arg2@@236 arg3@@182)) (MapType6Type refType boolType)) :qid |funType:lambda#87| :pattern ( (|lambda#87| arg0@@457 arg1@@306 arg2@@236 arg3@@182)) )))
(assert (forall ((|l#0@@84| T@U) (|l#1@@84| T@U) (|l#2@@84| T@U) (|l#3@@83| Bool) ($o@@118 T@U) ($f@@86 T@U) ) (! (let ((alpha@@93 (FieldTypeInv0 (type $f@@86)))) (=> (and (and (and (and (= (type |l#0@@84|) refType) (= (type |l#1@@84|) (MapType0Type refType MapType1Type))) (= (type |l#2@@84|) (FieldType boolType))) (= (type $o@@118) refType)) (= (type $f@@86) (FieldType alpha@@93))) (= (U_2_bool (MapType6Select (|lambda#87| |l#0@@84| |l#1@@84| |l#2@@84| |l#3@@83|) $o@@118 $f@@86))  (=> (and (not (= $o@@118 |l#0@@84|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@84| $o@@118) |l#2@@84|))) |l#3@@83|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4841| :pattern ( (MapType6Select (|lambda#87| |l#0@@84| |l#1@@84| |l#2@@84| |l#3@@83|) $o@@118 $f@@86)) )))
(assert (forall ((arg0@@458 T@U) (arg1@@307 T@U) (arg2@@237 T@U) (arg3@@183 Bool) ) (! (= (type (|lambda#88| arg0@@458 arg1@@307 arg2@@237 arg3@@183)) (MapType6Type refType boolType)) :qid |funType:lambda#88| :pattern ( (|lambda#88| arg0@@458 arg1@@307 arg2@@237 arg3@@183)) )))
(assert (forall ((|l#0@@85| T@U) (|l#1@@85| T@U) (|l#2@@85| T@U) (|l#3@@84| Bool) ($o@@119 T@U) ($f@@87 T@U) ) (! (let ((alpha@@94 (FieldTypeInv0 (type $f@@87)))) (=> (and (and (and (and (= (type |l#0@@85|) refType) (= (type |l#1@@85|) (MapType0Type refType MapType1Type))) (= (type |l#2@@85|) (FieldType boolType))) (= (type $o@@119) refType)) (= (type $f@@87) (FieldType alpha@@94))) (= (U_2_bool (MapType6Select (|lambda#88| |l#0@@85| |l#1@@85| |l#2@@85| |l#3@@84|) $o@@119 $f@@87))  (=> (and (not (= $o@@119 |l#0@@85|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@85| $o@@119) |l#2@@85|))) |l#3@@84|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4842| :pattern ( (MapType6Select (|lambda#88| |l#0@@85| |l#1@@85| |l#2@@85| |l#3@@84|) $o@@119 $f@@87)) )))
(assert (forall ((arg0@@459 T@U) (arg1@@308 T@U) (arg2@@238 T@U) (arg3@@184 Bool) ) (! (= (type (|lambda#89| arg0@@459 arg1@@308 arg2@@238 arg3@@184)) (MapType6Type refType boolType)) :qid |funType:lambda#89| :pattern ( (|lambda#89| arg0@@459 arg1@@308 arg2@@238 arg3@@184)) )))
(assert (forall ((|l#0@@86| T@U) (|l#1@@86| T@U) (|l#2@@86| T@U) (|l#3@@85| Bool) ($o@@120 T@U) ($f@@88 T@U) ) (! (let ((alpha@@95 (FieldTypeInv0 (type $f@@88)))) (=> (and (and (and (and (= (type |l#0@@86|) refType) (= (type |l#1@@86|) (MapType0Type refType MapType1Type))) (= (type |l#2@@86|) (FieldType boolType))) (= (type $o@@120) refType)) (= (type $f@@88) (FieldType alpha@@95))) (= (U_2_bool (MapType6Select (|lambda#89| |l#0@@86| |l#1@@86| |l#2@@86| |l#3@@85|) $o@@120 $f@@88))  (=> (and (not (= $o@@120 |l#0@@86|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@86| $o@@120) |l#2@@86|))) |l#3@@85|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4843| :pattern ( (MapType6Select (|lambda#89| |l#0@@86| |l#1@@86| |l#2@@86| |l#3@@85|) $o@@120 $f@@88)) )))
(assert (forall ((arg0@@460 T@U) (arg1@@309 T@U) (arg2@@239 T@U) (arg3@@185 Bool) ) (! (= (type (|lambda#90| arg0@@460 arg1@@309 arg2@@239 arg3@@185)) (MapType6Type refType boolType)) :qid |funType:lambda#90| :pattern ( (|lambda#90| arg0@@460 arg1@@309 arg2@@239 arg3@@185)) )))
(assert (forall ((|l#0@@87| T@U) (|l#1@@87| T@U) (|l#2@@87| T@U) (|l#3@@86| Bool) ($o@@121 T@U) ($f@@89 T@U) ) (! (let ((alpha@@96 (FieldTypeInv0 (type $f@@89)))) (=> (and (and (and (and (= (type |l#0@@87|) refType) (= (type |l#1@@87|) (MapType0Type refType MapType1Type))) (= (type |l#2@@87|) (FieldType boolType))) (= (type $o@@121) refType)) (= (type $f@@89) (FieldType alpha@@96))) (= (U_2_bool (MapType6Select (|lambda#90| |l#0@@87| |l#1@@87| |l#2@@87| |l#3@@86|) $o@@121 $f@@89))  (=> (and (not (= $o@@121 |l#0@@87|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@87| $o@@121) |l#2@@87|))) |l#3@@86|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4844| :pattern ( (MapType6Select (|lambda#90| |l#0@@87| |l#1@@87| |l#2@@87| |l#3@@86|) $o@@121 $f@@89)) )))
(assert (forall ((arg0@@461 T@U) (arg1@@310 T@U) (arg2@@240 T@U) (arg3@@186 Bool) ) (! (= (type (|lambda#91| arg0@@461 arg1@@310 arg2@@240 arg3@@186)) (MapType6Type refType boolType)) :qid |funType:lambda#91| :pattern ( (|lambda#91| arg0@@461 arg1@@310 arg2@@240 arg3@@186)) )))
(assert (forall ((|l#0@@88| T@U) (|l#1@@88| T@U) (|l#2@@88| T@U) (|l#3@@87| Bool) ($o@@122 T@U) ($f@@90 T@U) ) (! (let ((alpha@@97 (FieldTypeInv0 (type $f@@90)))) (=> (and (and (and (and (= (type |l#0@@88|) refType) (= (type |l#1@@88|) (MapType0Type refType MapType1Type))) (= (type |l#2@@88|) (FieldType boolType))) (= (type $o@@122) refType)) (= (type $f@@90) (FieldType alpha@@97))) (= (U_2_bool (MapType6Select (|lambda#91| |l#0@@88| |l#1@@88| |l#2@@88| |l#3@@87|) $o@@122 $f@@90))  (=> (and (not (= $o@@122 |l#0@@88|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@88| $o@@122) |l#2@@88|))) |l#3@@87|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4845| :pattern ( (MapType6Select (|lambda#91| |l#0@@88| |l#1@@88| |l#2@@88| |l#3@@87|) $o@@122 $f@@90)) )))
(assert (forall ((arg0@@462 T@U) (arg1@@311 T@U) (arg2@@241 T@U) (arg3@@187 Bool) ) (! (= (type (|lambda#92| arg0@@462 arg1@@311 arg2@@241 arg3@@187)) (MapType6Type refType boolType)) :qid |funType:lambda#92| :pattern ( (|lambda#92| arg0@@462 arg1@@311 arg2@@241 arg3@@187)) )))
(assert (forall ((|l#0@@89| T@U) (|l#1@@89| T@U) (|l#2@@89| T@U) (|l#3@@88| Bool) ($o@@123 T@U) ($f@@91 T@U) ) (! (let ((alpha@@98 (FieldTypeInv0 (type $f@@91)))) (=> (and (and (and (and (= (type |l#0@@89|) refType) (= (type |l#1@@89|) (MapType0Type refType MapType1Type))) (= (type |l#2@@89|) (FieldType boolType))) (= (type $o@@123) refType)) (= (type $f@@91) (FieldType alpha@@98))) (= (U_2_bool (MapType6Select (|lambda#92| |l#0@@89| |l#1@@89| |l#2@@89| |l#3@@88|) $o@@123 $f@@91))  (=> (and (not (= $o@@123 |l#0@@89|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@89| $o@@123) |l#2@@89|))) |l#3@@88|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4846| :pattern ( (MapType6Select (|lambda#92| |l#0@@89| |l#1@@89| |l#2@@89| |l#3@@88|) $o@@123 $f@@91)) )))
(assert (forall ((arg0@@463 T@U) (arg1@@312 T@U) (arg2@@242 T@U) (arg3@@188 Bool) ) (! (= (type (|lambda#93| arg0@@463 arg1@@312 arg2@@242 arg3@@188)) (MapType6Type refType boolType)) :qid |funType:lambda#93| :pattern ( (|lambda#93| arg0@@463 arg1@@312 arg2@@242 arg3@@188)) )))
(assert (forall ((|l#0@@90| T@U) (|l#1@@90| T@U) (|l#2@@90| T@U) (|l#3@@89| Bool) ($o@@124 T@U) ($f@@92 T@U) ) (! (let ((alpha@@99 (FieldTypeInv0 (type $f@@92)))) (=> (and (and (and (and (= (type |l#0@@90|) refType) (= (type |l#1@@90|) (MapType0Type refType MapType1Type))) (= (type |l#2@@90|) (FieldType boolType))) (= (type $o@@124) refType)) (= (type $f@@92) (FieldType alpha@@99))) (= (U_2_bool (MapType6Select (|lambda#93| |l#0@@90| |l#1@@90| |l#2@@90| |l#3@@89|) $o@@124 $f@@92))  (=> (and (not (= $o@@124 |l#0@@90|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@90| $o@@124) |l#2@@90|))) |l#3@@89|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4847| :pattern ( (MapType6Select (|lambda#93| |l#0@@90| |l#1@@90| |l#2@@90| |l#3@@89|) $o@@124 $f@@92)) )))
(assert (forall ((arg0@@464 T@U) (arg1@@313 T@U) (arg2@@243 T@U) (arg3@@189 Bool) ) (! (= (type (|lambda#94| arg0@@464 arg1@@313 arg2@@243 arg3@@189)) (MapType6Type refType boolType)) :qid |funType:lambda#94| :pattern ( (|lambda#94| arg0@@464 arg1@@313 arg2@@243 arg3@@189)) )))
(assert (forall ((|l#0@@91| T@U) (|l#1@@91| T@U) (|l#2@@91| T@U) (|l#3@@90| Bool) ($o@@125 T@U) ($f@@93 T@U) ) (! (let ((alpha@@100 (FieldTypeInv0 (type $f@@93)))) (=> (and (and (and (and (= (type |l#0@@91|) refType) (= (type |l#1@@91|) (MapType0Type refType MapType1Type))) (= (type |l#2@@91|) (FieldType boolType))) (= (type $o@@125) refType)) (= (type $f@@93) (FieldType alpha@@100))) (= (U_2_bool (MapType6Select (|lambda#94| |l#0@@91| |l#1@@91| |l#2@@91| |l#3@@90|) $o@@125 $f@@93))  (=> (and (not (= $o@@125 |l#0@@91|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@91| $o@@125) |l#2@@91|))) |l#3@@90|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4848| :pattern ( (MapType6Select (|lambda#94| |l#0@@91| |l#1@@91| |l#2@@91| |l#3@@90|) $o@@125 $f@@93)) )))
(assert (forall ((arg0@@465 T@U) (arg1@@314 T@U) (arg2@@244 T@U) (arg3@@190 Bool) ) (! (= (type (|lambda#95| arg0@@465 arg1@@314 arg2@@244 arg3@@190)) (MapType6Type refType boolType)) :qid |funType:lambda#95| :pattern ( (|lambda#95| arg0@@465 arg1@@314 arg2@@244 arg3@@190)) )))
(assert (forall ((|l#0@@92| T@U) (|l#1@@92| T@U) (|l#2@@92| T@U) (|l#3@@91| Bool) ($o@@126 T@U) ($f@@94 T@U) ) (! (let ((alpha@@101 (FieldTypeInv0 (type $f@@94)))) (=> (and (and (and (and (= (type |l#0@@92|) refType) (= (type |l#1@@92|) (MapType0Type refType MapType1Type))) (= (type |l#2@@92|) (FieldType boolType))) (= (type $o@@126) refType)) (= (type $f@@94) (FieldType alpha@@101))) (= (U_2_bool (MapType6Select (|lambda#95| |l#0@@92| |l#1@@92| |l#2@@92| |l#3@@91|) $o@@126 $f@@94))  (=> (and (not (= $o@@126 |l#0@@92|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@92| $o@@126) |l#2@@92|))) |l#3@@91|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4849| :pattern ( (MapType6Select (|lambda#95| |l#0@@92| |l#1@@92| |l#2@@92| |l#3@@91|) $o@@126 $f@@94)) )))
(assert (forall ((arg0@@466 T@U) (arg1@@315 T@U) (arg2@@245 T@U) (arg3@@191 Bool) ) (! (= (type (|lambda#96| arg0@@466 arg1@@315 arg2@@245 arg3@@191)) (MapType6Type refType boolType)) :qid |funType:lambda#96| :pattern ( (|lambda#96| arg0@@466 arg1@@315 arg2@@245 arg3@@191)) )))
(assert (forall ((|l#0@@93| T@U) (|l#1@@93| T@U) (|l#2@@93| T@U) (|l#3@@92| Bool) ($o@@127 T@U) ($f@@95 T@U) ) (! (let ((alpha@@102 (FieldTypeInv0 (type $f@@95)))) (=> (and (and (and (and (= (type |l#0@@93|) refType) (= (type |l#1@@93|) (MapType0Type refType MapType1Type))) (= (type |l#2@@93|) (FieldType boolType))) (= (type $o@@127) refType)) (= (type $f@@95) (FieldType alpha@@102))) (= (U_2_bool (MapType6Select (|lambda#96| |l#0@@93| |l#1@@93| |l#2@@93| |l#3@@92|) $o@@127 $f@@95))  (=> (and (not (= $o@@127 |l#0@@93|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@93| $o@@127) |l#2@@93|))) |l#3@@92|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4850| :pattern ( (MapType6Select (|lambda#96| |l#0@@93| |l#1@@93| |l#2@@93| |l#3@@92|) $o@@127 $f@@95)) )))
(assert (forall ((arg0@@467 T@U) (arg1@@316 T@U) (arg2@@246 T@U) (arg3@@192 Bool) ) (! (= (type (|lambda#97| arg0@@467 arg1@@316 arg2@@246 arg3@@192)) (MapType6Type refType boolType)) :qid |funType:lambda#97| :pattern ( (|lambda#97| arg0@@467 arg1@@316 arg2@@246 arg3@@192)) )))
(assert (forall ((|l#0@@94| T@U) (|l#1@@94| T@U) (|l#2@@94| T@U) (|l#3@@93| Bool) ($o@@128 T@U) ($f@@96 T@U) ) (! (let ((alpha@@103 (FieldTypeInv0 (type $f@@96)))) (=> (and (and (and (and (= (type |l#0@@94|) refType) (= (type |l#1@@94|) (MapType0Type refType MapType1Type))) (= (type |l#2@@94|) (FieldType boolType))) (= (type $o@@128) refType)) (= (type $f@@96) (FieldType alpha@@103))) (= (U_2_bool (MapType6Select (|lambda#97| |l#0@@94| |l#1@@94| |l#2@@94| |l#3@@93|) $o@@128 $f@@96))  (=> (and (not (= $o@@128 |l#0@@94|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@94| $o@@128) |l#2@@94|))) |l#3@@93|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4851| :pattern ( (MapType6Select (|lambda#97| |l#0@@94| |l#1@@94| |l#2@@94| |l#3@@93|) $o@@128 $f@@96)) )))
(assert (forall ((arg0@@468 T@U) (arg1@@317 T@U) (arg2@@247 T@U) (arg3@@193 Bool) ) (! (= (type (|lambda#98| arg0@@468 arg1@@317 arg2@@247 arg3@@193)) (MapType6Type refType boolType)) :qid |funType:lambda#98| :pattern ( (|lambda#98| arg0@@468 arg1@@317 arg2@@247 arg3@@193)) )))
(assert (forall ((|l#0@@95| T@U) (|l#1@@95| T@U) (|l#2@@95| T@U) (|l#3@@94| Bool) ($o@@129 T@U) ($f@@97 T@U) ) (! (let ((alpha@@104 (FieldTypeInv0 (type $f@@97)))) (=> (and (and (and (and (= (type |l#0@@95|) refType) (= (type |l#1@@95|) (MapType0Type refType MapType1Type))) (= (type |l#2@@95|) (FieldType boolType))) (= (type $o@@129) refType)) (= (type $f@@97) (FieldType alpha@@104))) (= (U_2_bool (MapType6Select (|lambda#98| |l#0@@95| |l#1@@95| |l#2@@95| |l#3@@94|) $o@@129 $f@@97))  (=> (and (not (= $o@@129 |l#0@@95|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@95| $o@@129) |l#2@@95|))) |l#3@@94|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4852| :pattern ( (MapType6Select (|lambda#98| |l#0@@95| |l#1@@95| |l#2@@95| |l#3@@94|) $o@@129 $f@@97)) )))
(assert (forall ((arg0@@469 T@U) (arg1@@318 T@U) (arg2@@248 T@U) (arg3@@194 Bool) ) (! (= (type (|lambda#99| arg0@@469 arg1@@318 arg2@@248 arg3@@194)) (MapType6Type refType boolType)) :qid |funType:lambda#99| :pattern ( (|lambda#99| arg0@@469 arg1@@318 arg2@@248 arg3@@194)) )))
(assert (forall ((|l#0@@96| T@U) (|l#1@@96| T@U) (|l#2@@96| T@U) (|l#3@@95| Bool) ($o@@130 T@U) ($f@@98 T@U) ) (! (let ((alpha@@105 (FieldTypeInv0 (type $f@@98)))) (=> (and (and (and (and (= (type |l#0@@96|) refType) (= (type |l#1@@96|) (MapType0Type refType MapType1Type))) (= (type |l#2@@96|) (FieldType boolType))) (= (type $o@@130) refType)) (= (type $f@@98) (FieldType alpha@@105))) (= (U_2_bool (MapType6Select (|lambda#99| |l#0@@96| |l#1@@96| |l#2@@96| |l#3@@95|) $o@@130 $f@@98))  (=> (and (not (= $o@@130 |l#0@@96|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@96| $o@@130) |l#2@@96|))) |l#3@@95|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4853| :pattern ( (MapType6Select (|lambda#99| |l#0@@96| |l#1@@96| |l#2@@96| |l#3@@95|) $o@@130 $f@@98)) )))
(assert (forall ((arg0@@470 T@U) (arg1@@319 T@U) (arg2@@249 T@U) (arg3@@195 Bool) ) (! (= (type (|lambda#100| arg0@@470 arg1@@319 arg2@@249 arg3@@195)) (MapType6Type refType boolType)) :qid |funType:lambda#100| :pattern ( (|lambda#100| arg0@@470 arg1@@319 arg2@@249 arg3@@195)) )))
(assert (forall ((|l#0@@97| T@U) (|l#1@@97| T@U) (|l#2@@97| T@U) (|l#3@@96| Bool) ($o@@131 T@U) ($f@@99 T@U) ) (! (let ((alpha@@106 (FieldTypeInv0 (type $f@@99)))) (=> (and (and (and (and (= (type |l#0@@97|) refType) (= (type |l#1@@97|) (MapType0Type refType MapType1Type))) (= (type |l#2@@97|) (FieldType boolType))) (= (type $o@@131) refType)) (= (type $f@@99) (FieldType alpha@@106))) (= (U_2_bool (MapType6Select (|lambda#100| |l#0@@97| |l#1@@97| |l#2@@97| |l#3@@96|) $o@@131 $f@@99))  (=> (and (not (= $o@@131 |l#0@@97|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@97| $o@@131) |l#2@@97|))) |l#3@@96|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4854| :pattern ( (MapType6Select (|lambda#100| |l#0@@97| |l#1@@97| |l#2@@97| |l#3@@96|) $o@@131 $f@@99)) )))
(assert (forall ((arg0@@471 T@U) (arg1@@320 T@U) (arg2@@250 T@U) (arg3@@196 Bool) ) (! (= (type (|lambda#101| arg0@@471 arg1@@320 arg2@@250 arg3@@196)) (MapType6Type refType boolType)) :qid |funType:lambda#101| :pattern ( (|lambda#101| arg0@@471 arg1@@320 arg2@@250 arg3@@196)) )))
(assert (forall ((|l#0@@98| T@U) (|l#1@@98| T@U) (|l#2@@98| T@U) (|l#3@@97| Bool) ($o@@132 T@U) ($f@@100 T@U) ) (! (let ((alpha@@107 (FieldTypeInv0 (type $f@@100)))) (=> (and (and (and (and (= (type |l#0@@98|) refType) (= (type |l#1@@98|) (MapType0Type refType MapType1Type))) (= (type |l#2@@98|) (FieldType boolType))) (= (type $o@@132) refType)) (= (type $f@@100) (FieldType alpha@@107))) (= (U_2_bool (MapType6Select (|lambda#101| |l#0@@98| |l#1@@98| |l#2@@98| |l#3@@97|) $o@@132 $f@@100))  (=> (and (not (= $o@@132 |l#0@@98|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@98| $o@@132) |l#2@@98|))) |l#3@@97|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4855| :pattern ( (MapType6Select (|lambda#101| |l#0@@98| |l#1@@98| |l#2@@98| |l#3@@97|) $o@@132 $f@@100)) )))
(assert (forall ((arg0@@472 T@U) (arg1@@321 T@U) (arg2@@251 T@U) (arg3@@197 Bool) ) (! (= (type (|lambda#102| arg0@@472 arg1@@321 arg2@@251 arg3@@197)) (MapType6Type refType boolType)) :qid |funType:lambda#102| :pattern ( (|lambda#102| arg0@@472 arg1@@321 arg2@@251 arg3@@197)) )))
(assert (forall ((|l#0@@99| T@U) (|l#1@@99| T@U) (|l#2@@99| T@U) (|l#3@@98| Bool) ($o@@133 T@U) ($f@@101 T@U) ) (! (let ((alpha@@108 (FieldTypeInv0 (type $f@@101)))) (=> (and (and (and (and (= (type |l#0@@99|) refType) (= (type |l#1@@99|) (MapType0Type refType MapType1Type))) (= (type |l#2@@99|) (FieldType boolType))) (= (type $o@@133) refType)) (= (type $f@@101) (FieldType alpha@@108))) (= (U_2_bool (MapType6Select (|lambda#102| |l#0@@99| |l#1@@99| |l#2@@99| |l#3@@98|) $o@@133 $f@@101))  (=> (and (not (= $o@@133 |l#0@@99|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@99| $o@@133) |l#2@@99|))) |l#3@@98|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4856| :pattern ( (MapType6Select (|lambda#102| |l#0@@99| |l#1@@99| |l#2@@99| |l#3@@98|) $o@@133 $f@@101)) )))
(assert (forall ((arg0@@473 T@U) (arg1@@322 T@U) (arg2@@252 T@U) (arg3@@198 Bool) ) (! (= (type (|lambda#103| arg0@@473 arg1@@322 arg2@@252 arg3@@198)) (MapType6Type refType boolType)) :qid |funType:lambda#103| :pattern ( (|lambda#103| arg0@@473 arg1@@322 arg2@@252 arg3@@198)) )))
(assert (forall ((|l#0@@100| T@U) (|l#1@@100| T@U) (|l#2@@100| T@U) (|l#3@@99| Bool) ($o@@134 T@U) ($f@@102 T@U) ) (! (let ((alpha@@109 (FieldTypeInv0 (type $f@@102)))) (=> (and (and (and (and (= (type |l#0@@100|) refType) (= (type |l#1@@100|) (MapType0Type refType MapType1Type))) (= (type |l#2@@100|) (FieldType boolType))) (= (type $o@@134) refType)) (= (type $f@@102) (FieldType alpha@@109))) (= (U_2_bool (MapType6Select (|lambda#103| |l#0@@100| |l#1@@100| |l#2@@100| |l#3@@99|) $o@@134 $f@@102))  (=> (and (not (= $o@@134 |l#0@@100|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@100| $o@@134) |l#2@@100|))) |l#3@@99|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4857| :pattern ( (MapType6Select (|lambda#103| |l#0@@100| |l#1@@100| |l#2@@100| |l#3@@99|) $o@@134 $f@@102)) )))
(assert (forall ((arg0@@474 T@U) (arg1@@323 T@U) (arg2@@253 T@U) (arg3@@199 Bool) ) (! (= (type (|lambda#104| arg0@@474 arg1@@323 arg2@@253 arg3@@199)) (MapType6Type refType boolType)) :qid |funType:lambda#104| :pattern ( (|lambda#104| arg0@@474 arg1@@323 arg2@@253 arg3@@199)) )))
(assert (forall ((|l#0@@101| T@U) (|l#1@@101| T@U) (|l#2@@101| T@U) (|l#3@@100| Bool) ($o@@135 T@U) ($f@@103 T@U) ) (! (let ((alpha@@110 (FieldTypeInv0 (type $f@@103)))) (=> (and (and (and (and (= (type |l#0@@101|) refType) (= (type |l#1@@101|) (MapType0Type refType MapType1Type))) (= (type |l#2@@101|) (FieldType boolType))) (= (type $o@@135) refType)) (= (type $f@@103) (FieldType alpha@@110))) (= (U_2_bool (MapType6Select (|lambda#104| |l#0@@101| |l#1@@101| |l#2@@101| |l#3@@100|) $o@@135 $f@@103))  (=> (and (not (= $o@@135 |l#0@@101|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@101| $o@@135) |l#2@@101|))) |l#3@@100|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4858| :pattern ( (MapType6Select (|lambda#104| |l#0@@101| |l#1@@101| |l#2@@101| |l#3@@100|) $o@@135 $f@@103)) )))
(assert (forall ((arg0@@475 T@U) (arg1@@324 T@U) (arg2@@254 T@U) (arg3@@200 Bool) ) (! (= (type (|lambda#105| arg0@@475 arg1@@324 arg2@@254 arg3@@200)) (MapType6Type refType boolType)) :qid |funType:lambda#105| :pattern ( (|lambda#105| arg0@@475 arg1@@324 arg2@@254 arg3@@200)) )))
(assert (forall ((|l#0@@102| T@U) (|l#1@@102| T@U) (|l#2@@102| T@U) (|l#3@@101| Bool) ($o@@136 T@U) ($f@@104 T@U) ) (! (let ((alpha@@111 (FieldTypeInv0 (type $f@@104)))) (=> (and (and (and (and (= (type |l#0@@102|) refType) (= (type |l#1@@102|) (MapType0Type refType MapType1Type))) (= (type |l#2@@102|) (FieldType boolType))) (= (type $o@@136) refType)) (= (type $f@@104) (FieldType alpha@@111))) (= (U_2_bool (MapType6Select (|lambda#105| |l#0@@102| |l#1@@102| |l#2@@102| |l#3@@101|) $o@@136 $f@@104))  (=> (and (not (= $o@@136 |l#0@@102|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@102| $o@@136) |l#2@@102|))) |l#3@@101|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4859| :pattern ( (MapType6Select (|lambda#105| |l#0@@102| |l#1@@102| |l#2@@102| |l#3@@101|) $o@@136 $f@@104)) )))
(assert (forall ((arg0@@476 T@U) (arg1@@325 T@U) (arg2@@255 T@U) (arg3@@201 Bool) ) (! (= (type (|lambda#106| arg0@@476 arg1@@325 arg2@@255 arg3@@201)) (MapType6Type refType boolType)) :qid |funType:lambda#106| :pattern ( (|lambda#106| arg0@@476 arg1@@325 arg2@@255 arg3@@201)) )))
(assert (forall ((|l#0@@103| T@U) (|l#1@@103| T@U) (|l#2@@103| T@U) (|l#3@@102| Bool) ($o@@137 T@U) ($f@@105 T@U) ) (! (let ((alpha@@112 (FieldTypeInv0 (type $f@@105)))) (=> (and (and (and (and (= (type |l#0@@103|) refType) (= (type |l#1@@103|) (MapType0Type refType MapType1Type))) (= (type |l#2@@103|) (FieldType boolType))) (= (type $o@@137) refType)) (= (type $f@@105) (FieldType alpha@@112))) (= (U_2_bool (MapType6Select (|lambda#106| |l#0@@103| |l#1@@103| |l#2@@103| |l#3@@102|) $o@@137 $f@@105))  (=> (and (not (= $o@@137 |l#0@@103|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@103| $o@@137) |l#2@@103|))) |l#3@@102|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4860| :pattern ( (MapType6Select (|lambda#106| |l#0@@103| |l#1@@103| |l#2@@103| |l#3@@102|) $o@@137 $f@@105)) )))
(assert (forall ((arg0@@477 T@U) (arg1@@326 T@U) (arg2@@256 T@U) (arg3@@202 Bool) ) (! (= (type (|lambda#107| arg0@@477 arg1@@326 arg2@@256 arg3@@202)) (MapType6Type refType boolType)) :qid |funType:lambda#107| :pattern ( (|lambda#107| arg0@@477 arg1@@326 arg2@@256 arg3@@202)) )))
(assert (forall ((|l#0@@104| T@U) (|l#1@@104| T@U) (|l#2@@104| T@U) (|l#3@@103| Bool) ($o@@138 T@U) ($f@@106 T@U) ) (! (let ((alpha@@113 (FieldTypeInv0 (type $f@@106)))) (=> (and (and (and (and (= (type |l#0@@104|) refType) (= (type |l#1@@104|) (MapType0Type refType MapType1Type))) (= (type |l#2@@104|) (FieldType boolType))) (= (type $o@@138) refType)) (= (type $f@@106) (FieldType alpha@@113))) (= (U_2_bool (MapType6Select (|lambda#107| |l#0@@104| |l#1@@104| |l#2@@104| |l#3@@103|) $o@@138 $f@@106))  (=> (and (not (= $o@@138 |l#0@@104|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@104| $o@@138) |l#2@@104|))) |l#3@@103|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4861| :pattern ( (MapType6Select (|lambda#107| |l#0@@104| |l#1@@104| |l#2@@104| |l#3@@103|) $o@@138 $f@@106)) )))
(assert (forall ((arg0@@478 T@U) (arg1@@327 T@U) (arg2@@257 T@U) (arg3@@203 Bool) ) (! (= (type (|lambda#108| arg0@@478 arg1@@327 arg2@@257 arg3@@203)) (MapType6Type refType boolType)) :qid |funType:lambda#108| :pattern ( (|lambda#108| arg0@@478 arg1@@327 arg2@@257 arg3@@203)) )))
(assert (forall ((|l#0@@105| T@U) (|l#1@@105| T@U) (|l#2@@105| T@U) (|l#3@@104| Bool) ($o@@139 T@U) ($f@@107 T@U) ) (! (let ((alpha@@114 (FieldTypeInv0 (type $f@@107)))) (=> (and (and (and (and (= (type |l#0@@105|) refType) (= (type |l#1@@105|) (MapType0Type refType MapType1Type))) (= (type |l#2@@105|) (FieldType boolType))) (= (type $o@@139) refType)) (= (type $f@@107) (FieldType alpha@@114))) (= (U_2_bool (MapType6Select (|lambda#108| |l#0@@105| |l#1@@105| |l#2@@105| |l#3@@104|) $o@@139 $f@@107))  (=> (and (not (= $o@@139 |l#0@@105|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@105| $o@@139) |l#2@@105|))) |l#3@@104|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4862| :pattern ( (MapType6Select (|lambda#108| |l#0@@105| |l#1@@105| |l#2@@105| |l#3@@104|) $o@@139 $f@@107)) )))
(assert (forall ((arg0@@479 T@U) (arg1@@328 T@U) (arg2@@258 T@U) (arg3@@204 Bool) ) (! (= (type (|lambda#109| arg0@@479 arg1@@328 arg2@@258 arg3@@204)) (MapType6Type refType boolType)) :qid |funType:lambda#109| :pattern ( (|lambda#109| arg0@@479 arg1@@328 arg2@@258 arg3@@204)) )))
(assert (forall ((|l#0@@106| T@U) (|l#1@@106| T@U) (|l#2@@106| T@U) (|l#3@@105| Bool) ($o@@140 T@U) ($f@@108 T@U) ) (! (let ((alpha@@115 (FieldTypeInv0 (type $f@@108)))) (=> (and (and (and (and (= (type |l#0@@106|) refType) (= (type |l#1@@106|) (MapType0Type refType MapType1Type))) (= (type |l#2@@106|) (FieldType boolType))) (= (type $o@@140) refType)) (= (type $f@@108) (FieldType alpha@@115))) (= (U_2_bool (MapType6Select (|lambda#109| |l#0@@106| |l#1@@106| |l#2@@106| |l#3@@105|) $o@@140 $f@@108))  (=> (and (not (= $o@@140 |l#0@@106|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@106| $o@@140) |l#2@@106|))) |l#3@@105|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4863| :pattern ( (MapType6Select (|lambda#109| |l#0@@106| |l#1@@106| |l#2@@106| |l#3@@105|) $o@@140 $f@@108)) )))
(assert (forall ((arg0@@480 T@U) (arg1@@329 T@U) (arg2@@259 T@U) (arg3@@205 Bool) ) (! (= (type (|lambda#110| arg0@@480 arg1@@329 arg2@@259 arg3@@205)) (MapType6Type refType boolType)) :qid |funType:lambda#110| :pattern ( (|lambda#110| arg0@@480 arg1@@329 arg2@@259 arg3@@205)) )))
(assert (forall ((|l#0@@107| T@U) (|l#1@@107| T@U) (|l#2@@107| T@U) (|l#3@@106| Bool) ($o@@141 T@U) ($f@@109 T@U) ) (! (let ((alpha@@116 (FieldTypeInv0 (type $f@@109)))) (=> (and (and (and (and (= (type |l#0@@107|) refType) (= (type |l#1@@107|) (MapType0Type refType MapType1Type))) (= (type |l#2@@107|) (FieldType boolType))) (= (type $o@@141) refType)) (= (type $f@@109) (FieldType alpha@@116))) (= (U_2_bool (MapType6Select (|lambda#110| |l#0@@107| |l#1@@107| |l#2@@107| |l#3@@106|) $o@@141 $f@@109))  (=> (and (not (= $o@@141 |l#0@@107|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@107| $o@@141) |l#2@@107|))) |l#3@@106|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4864| :pattern ( (MapType6Select (|lambda#110| |l#0@@107| |l#1@@107| |l#2@@107| |l#3@@106|) $o@@141 $f@@109)) )))
(assert (forall ((arg0@@481 T@U) (arg1@@330 T@U) (arg2@@260 T@U) (arg3@@206 Bool) ) (! (= (type (|lambda#111| arg0@@481 arg1@@330 arg2@@260 arg3@@206)) (MapType6Type refType boolType)) :qid |funType:lambda#111| :pattern ( (|lambda#111| arg0@@481 arg1@@330 arg2@@260 arg3@@206)) )))
(assert (forall ((|l#0@@108| T@U) (|l#1@@108| T@U) (|l#2@@108| T@U) (|l#3@@107| Bool) ($o@@142 T@U) ($f@@110 T@U) ) (! (let ((alpha@@117 (FieldTypeInv0 (type $f@@110)))) (=> (and (and (and (and (= (type |l#0@@108|) refType) (= (type |l#1@@108|) (MapType0Type refType MapType1Type))) (= (type |l#2@@108|) (FieldType boolType))) (= (type $o@@142) refType)) (= (type $f@@110) (FieldType alpha@@117))) (= (U_2_bool (MapType6Select (|lambda#111| |l#0@@108| |l#1@@108| |l#2@@108| |l#3@@107|) $o@@142 $f@@110))  (=> (and (not (= $o@@142 |l#0@@108|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@108| $o@@142) |l#2@@108|))) |l#3@@107|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4865| :pattern ( (MapType6Select (|lambda#111| |l#0@@108| |l#1@@108| |l#2@@108| |l#3@@107|) $o@@142 $f@@110)) )))
(assert (forall ((arg0@@482 T@U) (arg1@@331 T@U) (arg2@@261 T@U) (arg3@@207 Bool) ) (! (= (type (|lambda#112| arg0@@482 arg1@@331 arg2@@261 arg3@@207)) (MapType6Type refType boolType)) :qid |funType:lambda#112| :pattern ( (|lambda#112| arg0@@482 arg1@@331 arg2@@261 arg3@@207)) )))
(assert (forall ((|l#0@@109| T@U) (|l#1@@109| T@U) (|l#2@@109| T@U) (|l#3@@108| Bool) ($o@@143 T@U) ($f@@111 T@U) ) (! (let ((alpha@@118 (FieldTypeInv0 (type $f@@111)))) (=> (and (and (and (and (= (type |l#0@@109|) refType) (= (type |l#1@@109|) (MapType0Type refType MapType1Type))) (= (type |l#2@@109|) (FieldType boolType))) (= (type $o@@143) refType)) (= (type $f@@111) (FieldType alpha@@118))) (= (U_2_bool (MapType6Select (|lambda#112| |l#0@@109| |l#1@@109| |l#2@@109| |l#3@@108|) $o@@143 $f@@111))  (=> (and (not (= $o@@143 |l#0@@109|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@109| $o@@143) |l#2@@109|))) |l#3@@108|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4866| :pattern ( (MapType6Select (|lambda#112| |l#0@@109| |l#1@@109| |l#2@@109| |l#3@@108|) $o@@143 $f@@111)) )))
(assert (forall ((arg0@@483 T@U) (arg1@@332 T@U) (arg2@@262 T@U) (arg3@@208 Bool) ) (! (= (type (|lambda#113| arg0@@483 arg1@@332 arg2@@262 arg3@@208)) (MapType6Type refType boolType)) :qid |funType:lambda#113| :pattern ( (|lambda#113| arg0@@483 arg1@@332 arg2@@262 arg3@@208)) )))
(assert (forall ((|l#0@@110| T@U) (|l#1@@110| T@U) (|l#2@@110| T@U) (|l#3@@109| Bool) ($o@@144 T@U) ($f@@112 T@U) ) (! (let ((alpha@@119 (FieldTypeInv0 (type $f@@112)))) (=> (and (and (and (and (= (type |l#0@@110|) refType) (= (type |l#1@@110|) (MapType0Type refType MapType1Type))) (= (type |l#2@@110|) (FieldType boolType))) (= (type $o@@144) refType)) (= (type $f@@112) (FieldType alpha@@119))) (= (U_2_bool (MapType6Select (|lambda#113| |l#0@@110| |l#1@@110| |l#2@@110| |l#3@@109|) $o@@144 $f@@112))  (=> (and (not (= $o@@144 |l#0@@110|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@110| $o@@144) |l#2@@110|))) |l#3@@109|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4867| :pattern ( (MapType6Select (|lambda#113| |l#0@@110| |l#1@@110| |l#2@@110| |l#3@@109|) $o@@144 $f@@112)) )))
(assert (forall ((arg0@@484 T@U) (arg1@@333 T@U) (arg2@@263 T@U) (arg3@@209 Bool) ) (! (= (type (|lambda#114| arg0@@484 arg1@@333 arg2@@263 arg3@@209)) (MapType6Type refType boolType)) :qid |funType:lambda#114| :pattern ( (|lambda#114| arg0@@484 arg1@@333 arg2@@263 arg3@@209)) )))
(assert (forall ((|l#0@@111| T@U) (|l#1@@111| T@U) (|l#2@@111| T@U) (|l#3@@110| Bool) ($o@@145 T@U) ($f@@113 T@U) ) (! (let ((alpha@@120 (FieldTypeInv0 (type $f@@113)))) (=> (and (and (and (and (= (type |l#0@@111|) refType) (= (type |l#1@@111|) (MapType0Type refType MapType1Type))) (= (type |l#2@@111|) (FieldType boolType))) (= (type $o@@145) refType)) (= (type $f@@113) (FieldType alpha@@120))) (= (U_2_bool (MapType6Select (|lambda#114| |l#0@@111| |l#1@@111| |l#2@@111| |l#3@@110|) $o@@145 $f@@113))  (=> (and (not (= $o@@145 |l#0@@111|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@111| $o@@145) |l#2@@111|))) |l#3@@110|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4868| :pattern ( (MapType6Select (|lambda#114| |l#0@@111| |l#1@@111| |l#2@@111| |l#3@@110|) $o@@145 $f@@113)) )))
(assert (forall ((arg0@@485 T@U) (arg1@@334 T@U) (arg2@@264 T@U) (arg3@@210 Bool) ) (! (= (type (|lambda#115| arg0@@485 arg1@@334 arg2@@264 arg3@@210)) (MapType6Type refType boolType)) :qid |funType:lambda#115| :pattern ( (|lambda#115| arg0@@485 arg1@@334 arg2@@264 arg3@@210)) )))
(assert (forall ((|l#0@@112| T@U) (|l#1@@112| T@U) (|l#2@@112| T@U) (|l#3@@111| Bool) ($o@@146 T@U) ($f@@114 T@U) ) (! (let ((alpha@@121 (FieldTypeInv0 (type $f@@114)))) (=> (and (and (and (and (= (type |l#0@@112|) refType) (= (type |l#1@@112|) (MapType0Type refType MapType1Type))) (= (type |l#2@@112|) (FieldType boolType))) (= (type $o@@146) refType)) (= (type $f@@114) (FieldType alpha@@121))) (= (U_2_bool (MapType6Select (|lambda#115| |l#0@@112| |l#1@@112| |l#2@@112| |l#3@@111|) $o@@146 $f@@114))  (=> (and (not (= $o@@146 |l#0@@112|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@112| $o@@146) |l#2@@112|))) |l#3@@111|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4869| :pattern ( (MapType6Select (|lambda#115| |l#0@@112| |l#1@@112| |l#2@@112| |l#3@@111|) $o@@146 $f@@114)) )))
(assert (forall ((arg0@@486 T@U) (arg1@@335 T@U) (arg2@@265 T@U) (arg3@@211 Bool) ) (! (= (type (|lambda#116| arg0@@486 arg1@@335 arg2@@265 arg3@@211)) (MapType6Type refType boolType)) :qid |funType:lambda#116| :pattern ( (|lambda#116| arg0@@486 arg1@@335 arg2@@265 arg3@@211)) )))
(assert (forall ((|l#0@@113| T@U) (|l#1@@113| T@U) (|l#2@@113| T@U) (|l#3@@112| Bool) ($o@@147 T@U) ($f@@115 T@U) ) (! (let ((alpha@@122 (FieldTypeInv0 (type $f@@115)))) (=> (and (and (and (and (= (type |l#0@@113|) refType) (= (type |l#1@@113|) (MapType0Type refType MapType1Type))) (= (type |l#2@@113|) (FieldType boolType))) (= (type $o@@147) refType)) (= (type $f@@115) (FieldType alpha@@122))) (= (U_2_bool (MapType6Select (|lambda#116| |l#0@@113| |l#1@@113| |l#2@@113| |l#3@@112|) $o@@147 $f@@115))  (=> (and (not (= $o@@147 |l#0@@113|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@113| $o@@147) |l#2@@113|))) |l#3@@112|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4870| :pattern ( (MapType6Select (|lambda#116| |l#0@@113| |l#1@@113| |l#2@@113| |l#3@@112|) $o@@147 $f@@115)) )))
(assert (forall ((arg0@@487 T@U) (arg1@@336 T@U) (arg2@@266 T@U) (arg3@@212 Bool) ) (! (= (type (|lambda#117| arg0@@487 arg1@@336 arg2@@266 arg3@@212)) (MapType6Type refType boolType)) :qid |funType:lambda#117| :pattern ( (|lambda#117| arg0@@487 arg1@@336 arg2@@266 arg3@@212)) )))
(assert (forall ((|l#0@@114| T@U) (|l#1@@114| T@U) (|l#2@@114| T@U) (|l#3@@113| Bool) ($o@@148 T@U) ($f@@116 T@U) ) (! (let ((alpha@@123 (FieldTypeInv0 (type $f@@116)))) (=> (and (and (and (and (= (type |l#0@@114|) refType) (= (type |l#1@@114|) (MapType0Type refType MapType1Type))) (= (type |l#2@@114|) (FieldType boolType))) (= (type $o@@148) refType)) (= (type $f@@116) (FieldType alpha@@123))) (= (U_2_bool (MapType6Select (|lambda#117| |l#0@@114| |l#1@@114| |l#2@@114| |l#3@@113|) $o@@148 $f@@116))  (=> (and (not (= $o@@148 |l#0@@114|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@114| $o@@148) |l#2@@114|))) |l#3@@113|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4871| :pattern ( (MapType6Select (|lambda#117| |l#0@@114| |l#1@@114| |l#2@@114| |l#3@@113|) $o@@148 $f@@116)) )))
(assert (forall ((arg0@@488 T@U) (arg1@@337 T@U) (arg2@@267 T@U) (arg3@@213 Bool) ) (! (= (type (|lambda#118| arg0@@488 arg1@@337 arg2@@267 arg3@@213)) (MapType6Type refType boolType)) :qid |funType:lambda#118| :pattern ( (|lambda#118| arg0@@488 arg1@@337 arg2@@267 arg3@@213)) )))
(assert (forall ((|l#0@@115| T@U) (|l#1@@115| T@U) (|l#2@@115| T@U) (|l#3@@114| Bool) ($o@@149 T@U) ($f@@117 T@U) ) (! (let ((alpha@@124 (FieldTypeInv0 (type $f@@117)))) (=> (and (and (and (and (= (type |l#0@@115|) refType) (= (type |l#1@@115|) (MapType0Type refType MapType1Type))) (= (type |l#2@@115|) (FieldType boolType))) (= (type $o@@149) refType)) (= (type $f@@117) (FieldType alpha@@124))) (= (U_2_bool (MapType6Select (|lambda#118| |l#0@@115| |l#1@@115| |l#2@@115| |l#3@@114|) $o@@149 $f@@117))  (=> (and (not (= $o@@149 |l#0@@115|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@115| $o@@149) |l#2@@115|))) |l#3@@114|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4872| :pattern ( (MapType6Select (|lambda#118| |l#0@@115| |l#1@@115| |l#2@@115| |l#3@@114|) $o@@149 $f@@117)) )))
(assert (forall ((arg0@@489 T@U) (arg1@@338 T@U) (arg2@@268 T@U) (arg3@@214 Bool) ) (! (= (type (|lambda#119| arg0@@489 arg1@@338 arg2@@268 arg3@@214)) (MapType6Type refType boolType)) :qid |funType:lambda#119| :pattern ( (|lambda#119| arg0@@489 arg1@@338 arg2@@268 arg3@@214)) )))
(assert (forall ((|l#0@@116| T@U) (|l#1@@116| T@U) (|l#2@@116| T@U) (|l#3@@115| Bool) ($o@@150 T@U) ($f@@118 T@U) ) (! (let ((alpha@@125 (FieldTypeInv0 (type $f@@118)))) (=> (and (and (and (and (= (type |l#0@@116|) refType) (= (type |l#1@@116|) (MapType0Type refType MapType1Type))) (= (type |l#2@@116|) (FieldType boolType))) (= (type $o@@150) refType)) (= (type $f@@118) (FieldType alpha@@125))) (= (U_2_bool (MapType6Select (|lambda#119| |l#0@@116| |l#1@@116| |l#2@@116| |l#3@@115|) $o@@150 $f@@118))  (=> (and (not (= $o@@150 |l#0@@116|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@116| $o@@150) |l#2@@116|))) |l#3@@115|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4873| :pattern ( (MapType6Select (|lambda#119| |l#0@@116| |l#1@@116| |l#2@@116| |l#3@@115|) $o@@150 $f@@118)) )))
(assert (forall ((arg0@@490 T@U) (arg1@@339 T@U) (arg2@@269 T@U) (arg3@@215 Bool) ) (! (= (type (|lambda#120| arg0@@490 arg1@@339 arg2@@269 arg3@@215)) (MapType6Type refType boolType)) :qid |funType:lambda#120| :pattern ( (|lambda#120| arg0@@490 arg1@@339 arg2@@269 arg3@@215)) )))
(assert (forall ((|l#0@@117| T@U) (|l#1@@117| T@U) (|l#2@@117| T@U) (|l#3@@116| Bool) ($o@@151 T@U) ($f@@119 T@U) ) (! (let ((alpha@@126 (FieldTypeInv0 (type $f@@119)))) (=> (and (and (and (and (= (type |l#0@@117|) refType) (= (type |l#1@@117|) (MapType0Type refType MapType1Type))) (= (type |l#2@@117|) (FieldType boolType))) (= (type $o@@151) refType)) (= (type $f@@119) (FieldType alpha@@126))) (= (U_2_bool (MapType6Select (|lambda#120| |l#0@@117| |l#1@@117| |l#2@@117| |l#3@@116|) $o@@151 $f@@119))  (=> (and (not (= $o@@151 |l#0@@117|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@117| $o@@151) |l#2@@117|))) |l#3@@116|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4874| :pattern ( (MapType6Select (|lambda#120| |l#0@@117| |l#1@@117| |l#2@@117| |l#3@@116|) $o@@151 $f@@119)) )))
(assert (forall ((arg0@@491 T@U) (arg1@@340 T@U) (arg2@@270 T@U) (arg3@@216 Bool) ) (! (= (type (|lambda#121| arg0@@491 arg1@@340 arg2@@270 arg3@@216)) (MapType6Type refType boolType)) :qid |funType:lambda#121| :pattern ( (|lambda#121| arg0@@491 arg1@@340 arg2@@270 arg3@@216)) )))
(assert (forall ((|l#0@@118| T@U) (|l#1@@118| T@U) (|l#2@@118| T@U) (|l#3@@117| Bool) ($o@@152 T@U) ($f@@120 T@U) ) (! (let ((alpha@@127 (FieldTypeInv0 (type $f@@120)))) (=> (and (and (and (and (= (type |l#0@@118|) refType) (= (type |l#1@@118|) (MapType0Type refType MapType1Type))) (= (type |l#2@@118|) (FieldType boolType))) (= (type $o@@152) refType)) (= (type $f@@120) (FieldType alpha@@127))) (= (U_2_bool (MapType6Select (|lambda#121| |l#0@@118| |l#1@@118| |l#2@@118| |l#3@@117|) $o@@152 $f@@120))  (=> (and (not (= $o@@152 |l#0@@118|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@118| $o@@152) |l#2@@118|))) |l#3@@117|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4875| :pattern ( (MapType6Select (|lambda#121| |l#0@@118| |l#1@@118| |l#2@@118| |l#3@@117|) $o@@152 $f@@120)) )))
(assert (forall ((arg0@@492 T@U) (arg1@@341 T@U) (arg2@@271 T@U) (arg3@@217 Bool) ) (! (= (type (|lambda#122| arg0@@492 arg1@@341 arg2@@271 arg3@@217)) (MapType6Type refType boolType)) :qid |funType:lambda#122| :pattern ( (|lambda#122| arg0@@492 arg1@@341 arg2@@271 arg3@@217)) )))
(assert (forall ((|l#0@@119| T@U) (|l#1@@119| T@U) (|l#2@@119| T@U) (|l#3@@118| Bool) ($o@@153 T@U) ($f@@121 T@U) ) (! (let ((alpha@@128 (FieldTypeInv0 (type $f@@121)))) (=> (and (and (and (and (= (type |l#0@@119|) refType) (= (type |l#1@@119|) (MapType0Type refType MapType1Type))) (= (type |l#2@@119|) (FieldType boolType))) (= (type $o@@153) refType)) (= (type $f@@121) (FieldType alpha@@128))) (= (U_2_bool (MapType6Select (|lambda#122| |l#0@@119| |l#1@@119| |l#2@@119| |l#3@@118|) $o@@153 $f@@121))  (=> (and (not (= $o@@153 |l#0@@119|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@119| $o@@153) |l#2@@119|))) |l#3@@118|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4876| :pattern ( (MapType6Select (|lambda#122| |l#0@@119| |l#1@@119| |l#2@@119| |l#3@@118|) $o@@153 $f@@121)) )))
(assert (forall ((arg0@@493 T@U) (arg1@@342 T@U) (arg2@@272 T@U) (arg3@@218 Bool) ) (! (= (type (|lambda#123| arg0@@493 arg1@@342 arg2@@272 arg3@@218)) (MapType6Type refType boolType)) :qid |funType:lambda#123| :pattern ( (|lambda#123| arg0@@493 arg1@@342 arg2@@272 arg3@@218)) )))
(assert (forall ((|l#0@@120| T@U) (|l#1@@120| T@U) (|l#2@@120| T@U) (|l#3@@119| Bool) ($o@@154 T@U) ($f@@122 T@U) ) (! (let ((alpha@@129 (FieldTypeInv0 (type $f@@122)))) (=> (and (and (and (and (= (type |l#0@@120|) refType) (= (type |l#1@@120|) (MapType0Type refType MapType1Type))) (= (type |l#2@@120|) (FieldType boolType))) (= (type $o@@154) refType)) (= (type $f@@122) (FieldType alpha@@129))) (= (U_2_bool (MapType6Select (|lambda#123| |l#0@@120| |l#1@@120| |l#2@@120| |l#3@@119|) $o@@154 $f@@122))  (=> (and (not (= $o@@154 |l#0@@120|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@120| $o@@154) |l#2@@120|))) |l#3@@119|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4877| :pattern ( (MapType6Select (|lambda#123| |l#0@@120| |l#1@@120| |l#2@@120| |l#3@@119|) $o@@154 $f@@122)) )))
(assert (forall ((arg0@@494 T@U) (arg1@@343 T@U) (arg2@@273 T@U) (arg3@@219 Bool) ) (! (= (type (|lambda#124| arg0@@494 arg1@@343 arg2@@273 arg3@@219)) (MapType6Type refType boolType)) :qid |funType:lambda#124| :pattern ( (|lambda#124| arg0@@494 arg1@@343 arg2@@273 arg3@@219)) )))
(assert (forall ((|l#0@@121| T@U) (|l#1@@121| T@U) (|l#2@@121| T@U) (|l#3@@120| Bool) ($o@@155 T@U) ($f@@123 T@U) ) (! (let ((alpha@@130 (FieldTypeInv0 (type $f@@123)))) (=> (and (and (and (and (= (type |l#0@@121|) refType) (= (type |l#1@@121|) (MapType0Type refType MapType1Type))) (= (type |l#2@@121|) (FieldType boolType))) (= (type $o@@155) refType)) (= (type $f@@123) (FieldType alpha@@130))) (= (U_2_bool (MapType6Select (|lambda#124| |l#0@@121| |l#1@@121| |l#2@@121| |l#3@@120|) $o@@155 $f@@123))  (=> (and (not (= $o@@155 |l#0@@121|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@121| $o@@155) |l#2@@121|))) |l#3@@120|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4878| :pattern ( (MapType6Select (|lambda#124| |l#0@@121| |l#1@@121| |l#2@@121| |l#3@@120|) $o@@155 $f@@123)) )))
(assert (forall ((arg0@@495 T@U) (arg1@@344 T@U) (arg2@@274 T@U) (arg3@@220 Bool) ) (! (= (type (|lambda#125| arg0@@495 arg1@@344 arg2@@274 arg3@@220)) (MapType6Type refType boolType)) :qid |funType:lambda#125| :pattern ( (|lambda#125| arg0@@495 arg1@@344 arg2@@274 arg3@@220)) )))
(assert (forall ((|l#0@@122| T@U) (|l#1@@122| T@U) (|l#2@@122| T@U) (|l#3@@121| Bool) ($o@@156 T@U) ($f@@124 T@U) ) (! (let ((alpha@@131 (FieldTypeInv0 (type $f@@124)))) (=> (and (and (and (and (= (type |l#0@@122|) refType) (= (type |l#1@@122|) (MapType0Type refType MapType1Type))) (= (type |l#2@@122|) (FieldType boolType))) (= (type $o@@156) refType)) (= (type $f@@124) (FieldType alpha@@131))) (= (U_2_bool (MapType6Select (|lambda#125| |l#0@@122| |l#1@@122| |l#2@@122| |l#3@@121|) $o@@156 $f@@124))  (=> (and (not (= $o@@156 |l#0@@122|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@122| $o@@156) |l#2@@122|))) |l#3@@121|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4879| :pattern ( (MapType6Select (|lambda#125| |l#0@@122| |l#1@@122| |l#2@@122| |l#3@@121|) $o@@156 $f@@124)) )))
(assert (forall ((arg0@@496 T@U) (arg1@@345 T@U) (arg2@@275 T@U) (arg3@@221 Bool) ) (! (= (type (|lambda#126| arg0@@496 arg1@@345 arg2@@275 arg3@@221)) (MapType6Type refType boolType)) :qid |funType:lambda#126| :pattern ( (|lambda#126| arg0@@496 arg1@@345 arg2@@275 arg3@@221)) )))
(assert (forall ((|l#0@@123| T@U) (|l#1@@123| T@U) (|l#2@@123| T@U) (|l#3@@122| Bool) ($o@@157 T@U) ($f@@125 T@U) ) (! (let ((alpha@@132 (FieldTypeInv0 (type $f@@125)))) (=> (and (and (and (and (= (type |l#0@@123|) refType) (= (type |l#1@@123|) (MapType0Type refType MapType1Type))) (= (type |l#2@@123|) (FieldType boolType))) (= (type $o@@157) refType)) (= (type $f@@125) (FieldType alpha@@132))) (= (U_2_bool (MapType6Select (|lambda#126| |l#0@@123| |l#1@@123| |l#2@@123| |l#3@@122|) $o@@157 $f@@125))  (=> (and (not (= $o@@157 |l#0@@123|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@123| $o@@157) |l#2@@123|))) |l#3@@122|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4880| :pattern ( (MapType6Select (|lambda#126| |l#0@@123| |l#1@@123| |l#2@@123| |l#3@@122|) $o@@157 $f@@125)) )))
(assert (forall ((arg0@@497 T@U) (arg1@@346 T@U) (arg2@@276 T@U) (arg3@@222 Bool) ) (! (= (type (|lambda#127| arg0@@497 arg1@@346 arg2@@276 arg3@@222)) (MapType6Type refType boolType)) :qid |funType:lambda#127| :pattern ( (|lambda#127| arg0@@497 arg1@@346 arg2@@276 arg3@@222)) )))
(assert (forall ((|l#0@@124| T@U) (|l#1@@124| T@U) (|l#2@@124| T@U) (|l#3@@123| Bool) ($o@@158 T@U) ($f@@126 T@U) ) (! (let ((alpha@@133 (FieldTypeInv0 (type $f@@126)))) (=> (and (and (and (and (= (type |l#0@@124|) refType) (= (type |l#1@@124|) (MapType0Type refType MapType1Type))) (= (type |l#2@@124|) (FieldType boolType))) (= (type $o@@158) refType)) (= (type $f@@126) (FieldType alpha@@133))) (= (U_2_bool (MapType6Select (|lambda#127| |l#0@@124| |l#1@@124| |l#2@@124| |l#3@@123|) $o@@158 $f@@126))  (=> (and (not (= $o@@158 |l#0@@124|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@124| $o@@158) |l#2@@124|))) |l#3@@123|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4881| :pattern ( (MapType6Select (|lambda#127| |l#0@@124| |l#1@@124| |l#2@@124| |l#3@@123|) $o@@158 $f@@126)) )))
(assert (forall ((arg0@@498 T@U) (arg1@@347 T@U) (arg2@@277 T@U) (arg3@@223 Bool) ) (! (= (type (|lambda#128| arg0@@498 arg1@@347 arg2@@277 arg3@@223)) (MapType6Type refType boolType)) :qid |funType:lambda#128| :pattern ( (|lambda#128| arg0@@498 arg1@@347 arg2@@277 arg3@@223)) )))
(assert (forall ((|l#0@@125| T@U) (|l#1@@125| T@U) (|l#2@@125| T@U) (|l#3@@124| Bool) ($o@@159 T@U) ($f@@127 T@U) ) (! (let ((alpha@@134 (FieldTypeInv0 (type $f@@127)))) (=> (and (and (and (and (= (type |l#0@@125|) refType) (= (type |l#1@@125|) (MapType0Type refType MapType1Type))) (= (type |l#2@@125|) (FieldType boolType))) (= (type $o@@159) refType)) (= (type $f@@127) (FieldType alpha@@134))) (= (U_2_bool (MapType6Select (|lambda#128| |l#0@@125| |l#1@@125| |l#2@@125| |l#3@@124|) $o@@159 $f@@127))  (=> (and (not (= $o@@159 |l#0@@125|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@125| $o@@159) |l#2@@125|))) |l#3@@124|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4882| :pattern ( (MapType6Select (|lambda#128| |l#0@@125| |l#1@@125| |l#2@@125| |l#3@@124|) $o@@159 $f@@127)) )))
(assert (forall ((arg0@@499 T@U) (arg1@@348 T@U) (arg2@@278 T@U) (arg3@@224 Bool) ) (! (= (type (|lambda#129| arg0@@499 arg1@@348 arg2@@278 arg3@@224)) (MapType6Type refType boolType)) :qid |funType:lambda#129| :pattern ( (|lambda#129| arg0@@499 arg1@@348 arg2@@278 arg3@@224)) )))
(assert (forall ((|l#0@@126| T@U) (|l#1@@126| T@U) (|l#2@@126| T@U) (|l#3@@125| Bool) ($o@@160 T@U) ($f@@128 T@U) ) (! (let ((alpha@@135 (FieldTypeInv0 (type $f@@128)))) (=> (and (and (and (and (= (type |l#0@@126|) refType) (= (type |l#1@@126|) (MapType0Type refType MapType1Type))) (= (type |l#2@@126|) (FieldType boolType))) (= (type $o@@160) refType)) (= (type $f@@128) (FieldType alpha@@135))) (= (U_2_bool (MapType6Select (|lambda#129| |l#0@@126| |l#1@@126| |l#2@@126| |l#3@@125|) $o@@160 $f@@128))  (=> (and (not (= $o@@160 |l#0@@126|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@126| $o@@160) |l#2@@126|))) |l#3@@125|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4883| :pattern ( (MapType6Select (|lambda#129| |l#0@@126| |l#1@@126| |l#2@@126| |l#3@@125|) $o@@160 $f@@128)) )))
(assert (forall ((arg0@@500 T@U) (arg1@@349 T@U) (arg2@@279 T@U) (arg3@@225 Bool) ) (! (= (type (|lambda#130| arg0@@500 arg1@@349 arg2@@279 arg3@@225)) (MapType6Type refType boolType)) :qid |funType:lambda#130| :pattern ( (|lambda#130| arg0@@500 arg1@@349 arg2@@279 arg3@@225)) )))
(assert (forall ((|l#0@@127| T@U) (|l#1@@127| T@U) (|l#2@@127| T@U) (|l#3@@126| Bool) ($o@@161 T@U) ($f@@129 T@U) ) (! (let ((alpha@@136 (FieldTypeInv0 (type $f@@129)))) (=> (and (and (and (and (= (type |l#0@@127|) refType) (= (type |l#1@@127|) (MapType0Type refType MapType1Type))) (= (type |l#2@@127|) (FieldType boolType))) (= (type $o@@161) refType)) (= (type $f@@129) (FieldType alpha@@136))) (= (U_2_bool (MapType6Select (|lambda#130| |l#0@@127| |l#1@@127| |l#2@@127| |l#3@@126|) $o@@161 $f@@129))  (=> (and (not (= $o@@161 |l#0@@127|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@127| $o@@161) |l#2@@127|))) |l#3@@126|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4884| :pattern ( (MapType6Select (|lambda#130| |l#0@@127| |l#1@@127| |l#2@@127| |l#3@@126|) $o@@161 $f@@129)) )))
(assert (forall ((arg0@@501 T@U) (arg1@@350 T@U) (arg2@@280 T@U) (arg3@@226 Bool) ) (! (= (type (|lambda#131| arg0@@501 arg1@@350 arg2@@280 arg3@@226)) (MapType6Type refType boolType)) :qid |funType:lambda#131| :pattern ( (|lambda#131| arg0@@501 arg1@@350 arg2@@280 arg3@@226)) )))
(assert (forall ((|l#0@@128| T@U) (|l#1@@128| T@U) (|l#2@@128| T@U) (|l#3@@127| Bool) ($o@@162 T@U) ($f@@130 T@U) ) (! (let ((alpha@@137 (FieldTypeInv0 (type $f@@130)))) (=> (and (and (and (and (= (type |l#0@@128|) refType) (= (type |l#1@@128|) (MapType0Type refType MapType1Type))) (= (type |l#2@@128|) (FieldType boolType))) (= (type $o@@162) refType)) (= (type $f@@130) (FieldType alpha@@137))) (= (U_2_bool (MapType6Select (|lambda#131| |l#0@@128| |l#1@@128| |l#2@@128| |l#3@@127|) $o@@162 $f@@130))  (=> (and (not (= $o@@162 |l#0@@128|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@128| $o@@162) |l#2@@128|))) |l#3@@127|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4885| :pattern ( (MapType6Select (|lambda#131| |l#0@@128| |l#1@@128| |l#2@@128| |l#3@@127|) $o@@162 $f@@130)) )))
(assert (forall ((arg0@@502 T@U) (arg1@@351 T@U) (arg2@@281 T@U) (arg3@@227 Bool) ) (! (= (type (|lambda#132| arg0@@502 arg1@@351 arg2@@281 arg3@@227)) (MapType6Type refType boolType)) :qid |funType:lambda#132| :pattern ( (|lambda#132| arg0@@502 arg1@@351 arg2@@281 arg3@@227)) )))
(assert (forall ((|l#0@@129| T@U) (|l#1@@129| T@U) (|l#2@@129| T@U) (|l#3@@128| Bool) ($o@@163 T@U) ($f@@131 T@U) ) (! (let ((alpha@@138 (FieldTypeInv0 (type $f@@131)))) (=> (and (and (and (and (= (type |l#0@@129|) refType) (= (type |l#1@@129|) (MapType0Type refType MapType1Type))) (= (type |l#2@@129|) (FieldType boolType))) (= (type $o@@163) refType)) (= (type $f@@131) (FieldType alpha@@138))) (= (U_2_bool (MapType6Select (|lambda#132| |l#0@@129| |l#1@@129| |l#2@@129| |l#3@@128|) $o@@163 $f@@131))  (=> (and (not (= $o@@163 |l#0@@129|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@129| $o@@163) |l#2@@129|))) |l#3@@128|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4886| :pattern ( (MapType6Select (|lambda#132| |l#0@@129| |l#1@@129| |l#2@@129| |l#3@@128|) $o@@163 $f@@131)) )))
(assert (forall ((arg0@@503 T@U) (arg1@@352 T@U) (arg2@@282 T@U) (arg3@@228 Bool) ) (! (= (type (|lambda#133| arg0@@503 arg1@@352 arg2@@282 arg3@@228)) (MapType6Type refType boolType)) :qid |funType:lambda#133| :pattern ( (|lambda#133| arg0@@503 arg1@@352 arg2@@282 arg3@@228)) )))
(assert (forall ((|l#0@@130| T@U) (|l#1@@130| T@U) (|l#2@@130| T@U) (|l#3@@129| Bool) ($o@@164 T@U) ($f@@132 T@U) ) (! (let ((alpha@@139 (FieldTypeInv0 (type $f@@132)))) (=> (and (and (and (and (= (type |l#0@@130|) refType) (= (type |l#1@@130|) (MapType0Type refType MapType1Type))) (= (type |l#2@@130|) (FieldType boolType))) (= (type $o@@164) refType)) (= (type $f@@132) (FieldType alpha@@139))) (= (U_2_bool (MapType6Select (|lambda#133| |l#0@@130| |l#1@@130| |l#2@@130| |l#3@@129|) $o@@164 $f@@132))  (=> (and (not (= $o@@164 |l#0@@130|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@130| $o@@164) |l#2@@130|))) |l#3@@129|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4887| :pattern ( (MapType6Select (|lambda#133| |l#0@@130| |l#1@@130| |l#2@@130| |l#3@@129|) $o@@164 $f@@132)) )))
(assert (forall ((arg0@@504 T@U) (arg1@@353 T@U) (arg2@@283 T@U) (arg3@@229 Bool) ) (! (= (type (|lambda#134| arg0@@504 arg1@@353 arg2@@283 arg3@@229)) (MapType6Type refType boolType)) :qid |funType:lambda#134| :pattern ( (|lambda#134| arg0@@504 arg1@@353 arg2@@283 arg3@@229)) )))
(assert (forall ((|l#0@@131| T@U) (|l#1@@131| T@U) (|l#2@@131| T@U) (|l#3@@130| Bool) ($o@@165 T@U) ($f@@133 T@U) ) (! (let ((alpha@@140 (FieldTypeInv0 (type $f@@133)))) (=> (and (and (and (and (= (type |l#0@@131|) refType) (= (type |l#1@@131|) (MapType0Type refType MapType1Type))) (= (type |l#2@@131|) (FieldType boolType))) (= (type $o@@165) refType)) (= (type $f@@133) (FieldType alpha@@140))) (= (U_2_bool (MapType6Select (|lambda#134| |l#0@@131| |l#1@@131| |l#2@@131| |l#3@@130|) $o@@165 $f@@133))  (=> (and (not (= $o@@165 |l#0@@131|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@131| $o@@165) |l#2@@131|))) |l#3@@130|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4888| :pattern ( (MapType6Select (|lambda#134| |l#0@@131| |l#1@@131| |l#2@@131| |l#3@@130|) $o@@165 $f@@133)) )))
(assert (forall ((arg0@@505 T@U) (arg1@@354 T@U) (arg2@@284 T@U) (arg3@@230 Bool) ) (! (= (type (|lambda#135| arg0@@505 arg1@@354 arg2@@284 arg3@@230)) (MapType6Type refType boolType)) :qid |funType:lambda#135| :pattern ( (|lambda#135| arg0@@505 arg1@@354 arg2@@284 arg3@@230)) )))
(assert (forall ((|l#0@@132| T@U) (|l#1@@132| T@U) (|l#2@@132| T@U) (|l#3@@131| Bool) ($o@@166 T@U) ($f@@134 T@U) ) (! (let ((alpha@@141 (FieldTypeInv0 (type $f@@134)))) (=> (and (and (and (and (= (type |l#0@@132|) refType) (= (type |l#1@@132|) (MapType0Type refType MapType1Type))) (= (type |l#2@@132|) (FieldType boolType))) (= (type $o@@166) refType)) (= (type $f@@134) (FieldType alpha@@141))) (= (U_2_bool (MapType6Select (|lambda#135| |l#0@@132| |l#1@@132| |l#2@@132| |l#3@@131|) $o@@166 $f@@134))  (=> (and (not (= $o@@166 |l#0@@132|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@132| $o@@166) |l#2@@132|))) |l#3@@131|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4889| :pattern ( (MapType6Select (|lambda#135| |l#0@@132| |l#1@@132| |l#2@@132| |l#3@@131|) $o@@166 $f@@134)) )))
(assert (forall ((arg0@@506 T@U) (arg1@@355 T@U) (arg2@@285 T@U) (arg3@@231 Bool) ) (! (= (type (|lambda#136| arg0@@506 arg1@@355 arg2@@285 arg3@@231)) (MapType6Type refType boolType)) :qid |funType:lambda#136| :pattern ( (|lambda#136| arg0@@506 arg1@@355 arg2@@285 arg3@@231)) )))
(assert (forall ((|l#0@@133| T@U) (|l#1@@133| T@U) (|l#2@@133| T@U) (|l#3@@132| Bool) ($o@@167 T@U) ($f@@135 T@U) ) (! (let ((alpha@@142 (FieldTypeInv0 (type $f@@135)))) (=> (and (and (and (and (= (type |l#0@@133|) refType) (= (type |l#1@@133|) (MapType0Type refType MapType1Type))) (= (type |l#2@@133|) (FieldType boolType))) (= (type $o@@167) refType)) (= (type $f@@135) (FieldType alpha@@142))) (= (U_2_bool (MapType6Select (|lambda#136| |l#0@@133| |l#1@@133| |l#2@@133| |l#3@@132|) $o@@167 $f@@135))  (=> (and (not (= $o@@167 |l#0@@133|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@133| $o@@167) |l#2@@133|))) |l#3@@132|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4890| :pattern ( (MapType6Select (|lambda#136| |l#0@@133| |l#1@@133| |l#2@@133| |l#3@@132|) $o@@167 $f@@135)) )))
(assert (forall ((arg0@@507 T@U) (arg1@@356 T@U) (arg2@@286 T@U) (arg3@@232 Bool) ) (! (= (type (|lambda#137| arg0@@507 arg1@@356 arg2@@286 arg3@@232)) (MapType6Type refType boolType)) :qid |funType:lambda#137| :pattern ( (|lambda#137| arg0@@507 arg1@@356 arg2@@286 arg3@@232)) )))
(assert (forall ((|l#0@@134| T@U) (|l#1@@134| T@U) (|l#2@@134| T@U) (|l#3@@133| Bool) ($o@@168 T@U) ($f@@136 T@U) ) (! (let ((alpha@@143 (FieldTypeInv0 (type $f@@136)))) (=> (and (and (and (and (= (type |l#0@@134|) refType) (= (type |l#1@@134|) (MapType0Type refType MapType1Type))) (= (type |l#2@@134|) (FieldType boolType))) (= (type $o@@168) refType)) (= (type $f@@136) (FieldType alpha@@143))) (= (U_2_bool (MapType6Select (|lambda#137| |l#0@@134| |l#1@@134| |l#2@@134| |l#3@@133|) $o@@168 $f@@136))  (=> (and (not (= $o@@168 |l#0@@134|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@134| $o@@168) |l#2@@134|))) |l#3@@133|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4891| :pattern ( (MapType6Select (|lambda#137| |l#0@@134| |l#1@@134| |l#2@@134| |l#3@@133|) $o@@168 $f@@136)) )))
(assert (forall ((arg0@@508 T@U) (arg1@@357 T@U) (arg2@@287 T@U) (arg3@@233 Bool) ) (! (= (type (|lambda#138| arg0@@508 arg1@@357 arg2@@287 arg3@@233)) (MapType6Type refType boolType)) :qid |funType:lambda#138| :pattern ( (|lambda#138| arg0@@508 arg1@@357 arg2@@287 arg3@@233)) )))
(assert (forall ((|l#0@@135| T@U) (|l#1@@135| T@U) (|l#2@@135| T@U) (|l#3@@134| Bool) ($o@@169 T@U) ($f@@137 T@U) ) (! (let ((alpha@@144 (FieldTypeInv0 (type $f@@137)))) (=> (and (and (and (and (= (type |l#0@@135|) refType) (= (type |l#1@@135|) (MapType0Type refType MapType1Type))) (= (type |l#2@@135|) (FieldType boolType))) (= (type $o@@169) refType)) (= (type $f@@137) (FieldType alpha@@144))) (= (U_2_bool (MapType6Select (|lambda#138| |l#0@@135| |l#1@@135| |l#2@@135| |l#3@@134|) $o@@169 $f@@137))  (=> (and (not (= $o@@169 |l#0@@135|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@135| $o@@169) |l#2@@135|))) |l#3@@134|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4892| :pattern ( (MapType6Select (|lambda#138| |l#0@@135| |l#1@@135| |l#2@@135| |l#3@@134|) $o@@169 $f@@137)) )))
(assert (forall ((arg0@@509 T@U) (arg1@@358 T@U) (arg2@@288 T@U) (arg3@@234 Bool) ) (! (= (type (|lambda#139| arg0@@509 arg1@@358 arg2@@288 arg3@@234)) (MapType6Type refType boolType)) :qid |funType:lambda#139| :pattern ( (|lambda#139| arg0@@509 arg1@@358 arg2@@288 arg3@@234)) )))
(assert (forall ((|l#0@@136| T@U) (|l#1@@136| T@U) (|l#2@@136| T@U) (|l#3@@135| Bool) ($o@@170 T@U) ($f@@138 T@U) ) (! (let ((alpha@@145 (FieldTypeInv0 (type $f@@138)))) (=> (and (and (and (and (= (type |l#0@@136|) refType) (= (type |l#1@@136|) (MapType0Type refType MapType1Type))) (= (type |l#2@@136|) (FieldType boolType))) (= (type $o@@170) refType)) (= (type $f@@138) (FieldType alpha@@145))) (= (U_2_bool (MapType6Select (|lambda#139| |l#0@@136| |l#1@@136| |l#2@@136| |l#3@@135|) $o@@170 $f@@138))  (=> (and (not (= $o@@170 |l#0@@136|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@136| $o@@170) |l#2@@136|))) |l#3@@135|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4893| :pattern ( (MapType6Select (|lambda#139| |l#0@@136| |l#1@@136| |l#2@@136| |l#3@@135|) $o@@170 $f@@138)) )))
(assert (forall ((arg0@@510 T@U) (arg1@@359 T@U) (arg2@@289 T@U) (arg3@@235 Bool) ) (! (= (type (|lambda#140| arg0@@510 arg1@@359 arg2@@289 arg3@@235)) (MapType6Type refType boolType)) :qid |funType:lambda#140| :pattern ( (|lambda#140| arg0@@510 arg1@@359 arg2@@289 arg3@@235)) )))
(assert (forall ((|l#0@@137| T@U) (|l#1@@137| T@U) (|l#2@@137| T@U) (|l#3@@136| Bool) ($o@@171 T@U) ($f@@139 T@U) ) (! (let ((alpha@@146 (FieldTypeInv0 (type $f@@139)))) (=> (and (and (and (and (= (type |l#0@@137|) refType) (= (type |l#1@@137|) (MapType0Type refType MapType1Type))) (= (type |l#2@@137|) (FieldType boolType))) (= (type $o@@171) refType)) (= (type $f@@139) (FieldType alpha@@146))) (= (U_2_bool (MapType6Select (|lambda#140| |l#0@@137| |l#1@@137| |l#2@@137| |l#3@@136|) $o@@171 $f@@139))  (=> (and (not (= $o@@171 |l#0@@137|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@137| $o@@171) |l#2@@137|))) |l#3@@136|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4894| :pattern ( (MapType6Select (|lambda#140| |l#0@@137| |l#1@@137| |l#2@@137| |l#3@@136|) $o@@171 $f@@139)) )))
(assert (forall ((arg0@@511 T@U) (arg1@@360 T@U) (arg2@@290 T@U) (arg3@@236 Bool) ) (! (= (type (|lambda#141| arg0@@511 arg1@@360 arg2@@290 arg3@@236)) (MapType6Type refType boolType)) :qid |funType:lambda#141| :pattern ( (|lambda#141| arg0@@511 arg1@@360 arg2@@290 arg3@@236)) )))
(assert (forall ((|l#0@@138| T@U) (|l#1@@138| T@U) (|l#2@@138| T@U) (|l#3@@137| Bool) ($o@@172 T@U) ($f@@140 T@U) ) (! (let ((alpha@@147 (FieldTypeInv0 (type $f@@140)))) (=> (and (and (and (and (= (type |l#0@@138|) refType) (= (type |l#1@@138|) (MapType0Type refType MapType1Type))) (= (type |l#2@@138|) (FieldType boolType))) (= (type $o@@172) refType)) (= (type $f@@140) (FieldType alpha@@147))) (= (U_2_bool (MapType6Select (|lambda#141| |l#0@@138| |l#1@@138| |l#2@@138| |l#3@@137|) $o@@172 $f@@140))  (=> (and (not (= $o@@172 |l#0@@138|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@138| $o@@172) |l#2@@138|))) |l#3@@137|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4895| :pattern ( (MapType6Select (|lambda#141| |l#0@@138| |l#1@@138| |l#2@@138| |l#3@@137|) $o@@172 $f@@140)) )))
(assert (forall ((arg0@@512 T@U) (arg1@@361 T@U) (arg2@@291 T@U) (arg3@@237 Bool) ) (! (= (type (|lambda#142| arg0@@512 arg1@@361 arg2@@291 arg3@@237)) (MapType6Type refType boolType)) :qid |funType:lambda#142| :pattern ( (|lambda#142| arg0@@512 arg1@@361 arg2@@291 arg3@@237)) )))
(assert (forall ((|l#0@@139| T@U) (|l#1@@139| T@U) (|l#2@@139| T@U) (|l#3@@138| Bool) ($o@@173 T@U) ($f@@141 T@U) ) (! (let ((alpha@@148 (FieldTypeInv0 (type $f@@141)))) (=> (and (and (and (and (= (type |l#0@@139|) refType) (= (type |l#1@@139|) (MapType0Type refType MapType1Type))) (= (type |l#2@@139|) (FieldType boolType))) (= (type $o@@173) refType)) (= (type $f@@141) (FieldType alpha@@148))) (= (U_2_bool (MapType6Select (|lambda#142| |l#0@@139| |l#1@@139| |l#2@@139| |l#3@@138|) $o@@173 $f@@141))  (=> (and (not (= $o@@173 |l#0@@139|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@139| $o@@173) |l#2@@139|))) |l#3@@138|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4896| :pattern ( (MapType6Select (|lambda#142| |l#0@@139| |l#1@@139| |l#2@@139| |l#3@@138|) $o@@173 $f@@141)) )))
(assert (forall ((arg0@@513 T@U) (arg1@@362 T@U) (arg2@@292 T@U) (arg3@@238 Bool) ) (! (= (type (|lambda#143| arg0@@513 arg1@@362 arg2@@292 arg3@@238)) (MapType6Type refType boolType)) :qid |funType:lambda#143| :pattern ( (|lambda#143| arg0@@513 arg1@@362 arg2@@292 arg3@@238)) )))
(assert (forall ((|l#0@@140| T@U) (|l#1@@140| T@U) (|l#2@@140| T@U) (|l#3@@139| Bool) ($o@@174 T@U) ($f@@142 T@U) ) (! (let ((alpha@@149 (FieldTypeInv0 (type $f@@142)))) (=> (and (and (and (and (= (type |l#0@@140|) refType) (= (type |l#1@@140|) (MapType0Type refType MapType1Type))) (= (type |l#2@@140|) (FieldType boolType))) (= (type $o@@174) refType)) (= (type $f@@142) (FieldType alpha@@149))) (= (U_2_bool (MapType6Select (|lambda#143| |l#0@@140| |l#1@@140| |l#2@@140| |l#3@@139|) $o@@174 $f@@142))  (=> (and (not (= $o@@174 |l#0@@140|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@140| $o@@174) |l#2@@140|))) |l#3@@139|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4897| :pattern ( (MapType6Select (|lambda#143| |l#0@@140| |l#1@@140| |l#2@@140| |l#3@@139|) $o@@174 $f@@142)) )))
(assert (forall ((arg0@@514 T@U) (arg1@@363 T@U) (arg2@@293 T@U) (arg3@@239 Bool) ) (! (= (type (|lambda#144| arg0@@514 arg1@@363 arg2@@293 arg3@@239)) (MapType6Type refType boolType)) :qid |funType:lambda#144| :pattern ( (|lambda#144| arg0@@514 arg1@@363 arg2@@293 arg3@@239)) )))
(assert (forall ((|l#0@@141| T@U) (|l#1@@141| T@U) (|l#2@@141| T@U) (|l#3@@140| Bool) ($o@@175 T@U) ($f@@143 T@U) ) (! (let ((alpha@@150 (FieldTypeInv0 (type $f@@143)))) (=> (and (and (and (and (= (type |l#0@@141|) refType) (= (type |l#1@@141|) (MapType0Type refType MapType1Type))) (= (type |l#2@@141|) (FieldType boolType))) (= (type $o@@175) refType)) (= (type $f@@143) (FieldType alpha@@150))) (= (U_2_bool (MapType6Select (|lambda#144| |l#0@@141| |l#1@@141| |l#2@@141| |l#3@@140|) $o@@175 $f@@143))  (=> (and (not (= $o@@175 |l#0@@141|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@141| $o@@175) |l#2@@141|))) |l#3@@140|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4898| :pattern ( (MapType6Select (|lambda#144| |l#0@@141| |l#1@@141| |l#2@@141| |l#3@@140|) $o@@175 $f@@143)) )))
(assert (forall ((|l#0@@142| T@U) (|l#1@@142| T@U) (|l#2@@142| Int) (|$w#2| T@U) ) (!  (=> (and (and (= (type |l#0@@142|) TyType) (= (type |l#1@@142|) (MapType0Type BoxType boolType))) (= (type |$w#2|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#145| |l#0@@142| |l#1@@142| |l#2@@142|) |$w#2|))  (and ($IsBox |$w#2| |l#0@@142|) (and (U_2_bool (MapType0Select |l#1@@142| |$w#2|)) (not (= (U_2_int ($Unbox intType |$w#2|)) |l#2@@142|)))))) :qid |NativeTypessdfy.12:32| :skolemid |4899| :pattern ( (MapType0Select (|lambda#145| |l#0@@142| |l#1@@142| |l#2@@142|) |$w#2|)) )))
(assert (forall ((|l#0@@143| T@U) (|$w#2@@0| T@U) ) (!  (=> (and (= (type |l#0@@143|) (MapType0Type BoxType BoxType)) (= (type |$w#2@@0|) BoxType)) (= (MapType0Select (|lambda#146| |l#0@@143|) |$w#2@@0|) (MapType0Select |l#0@@143| |$w#2@@0|))) :qid |MutableMapModelidfy.1313:76| :skolemid |4900| :pattern ( (MapType0Select (|lambda#146| |l#0@@143|) |$w#2@@0|)) )))
(assert (forall ((arg0@@515 T@U) (arg1@@364 T@U) (arg2@@294 T@U) (arg3@@240 Bool) ) (! (= (type (|lambda#153| arg0@@515 arg1@@364 arg2@@294 arg3@@240)) (MapType6Type refType boolType)) :qid |funType:lambda#153| :pattern ( (|lambda#153| arg0@@515 arg1@@364 arg2@@294 arg3@@240)) )))
(assert (forall ((|l#0@@144| T@U) (|l#1@@143| T@U) (|l#2@@143| T@U) (|l#3@@141| Bool) ($o@@176 T@U) ($f@@144 T@U) ) (! (let ((alpha@@151 (FieldTypeInv0 (type $f@@144)))) (=> (and (and (and (and (= (type |l#0@@144|) refType) (= (type |l#1@@143|) (MapType0Type refType MapType1Type))) (= (type |l#2@@143|) (FieldType boolType))) (= (type $o@@176) refType)) (= (type $f@@144) (FieldType alpha@@151))) (= (U_2_bool (MapType6Select (|lambda#153| |l#0@@144| |l#1@@143| |l#2@@143| |l#3@@141|) $o@@176 $f@@144))  (=> (and (not (= $o@@176 |l#0@@144|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@143| $o@@176) |l#2@@143|))) |l#3@@141|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4901| :pattern ( (MapType6Select (|lambda#153| |l#0@@144| |l#1@@143| |l#2@@143| |l#3@@141|) $o@@176 $f@@144)) )))
(assert (forall ((arg0@@516 T@U) (arg1@@365 T@U) (arg2@@295 T@U) (arg3@@241 Bool) ) (! (= (type (|lambda#154| arg0@@516 arg1@@365 arg2@@295 arg3@@241)) (MapType6Type refType boolType)) :qid |funType:lambda#154| :pattern ( (|lambda#154| arg0@@516 arg1@@365 arg2@@295 arg3@@241)) )))
(assert (forall ((|l#0@@145| T@U) (|l#1@@144| T@U) (|l#2@@144| T@U) (|l#3@@142| Bool) ($o@@177 T@U) ($f@@145 T@U) ) (! (let ((alpha@@152 (FieldTypeInv0 (type $f@@145)))) (=> (and (and (and (and (= (type |l#0@@145|) refType) (= (type |l#1@@144|) (MapType0Type refType MapType1Type))) (= (type |l#2@@144|) (FieldType boolType))) (= (type $o@@177) refType)) (= (type $f@@145) (FieldType alpha@@152))) (= (U_2_bool (MapType6Select (|lambda#154| |l#0@@145| |l#1@@144| |l#2@@144| |l#3@@142|) $o@@177 $f@@145))  (=> (and (not (= $o@@177 |l#0@@145|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@144| $o@@177) |l#2@@144|))) |l#3@@142|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4902| :pattern ( (MapType6Select (|lambda#154| |l#0@@145| |l#1@@144| |l#2@@144| |l#3@@142|) $o@@177 $f@@145)) )))
(assert (forall ((arg0@@517 T@U) (arg1@@366 T@U) (arg2@@296 T@U) (arg3@@242 Bool) ) (! (= (type (|lambda#157| arg0@@517 arg1@@366 arg2@@296 arg3@@242)) (MapType6Type refType boolType)) :qid |funType:lambda#157| :pattern ( (|lambda#157| arg0@@517 arg1@@366 arg2@@296 arg3@@242)) )))
(assert (forall ((|l#0@@146| T@U) (|l#1@@145| T@U) (|l#2@@145| T@U) (|l#3@@143| Bool) ($o@@178 T@U) ($f@@146 T@U) ) (! (let ((alpha@@153 (FieldTypeInv0 (type $f@@146)))) (=> (and (and (and (and (= (type |l#0@@146|) refType) (= (type |l#1@@145|) (MapType0Type refType MapType1Type))) (= (type |l#2@@145|) (FieldType boolType))) (= (type $o@@178) refType)) (= (type $f@@146) (FieldType alpha@@153))) (= (U_2_bool (MapType6Select (|lambda#157| |l#0@@146| |l#1@@145| |l#2@@145| |l#3@@143|) $o@@178 $f@@146))  (=> (and (not (= $o@@178 |l#0@@146|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@145| $o@@178) |l#2@@145|))) |l#3@@143|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4903| :pattern ( (MapType6Select (|lambda#157| |l#0@@146| |l#1@@145| |l#2@@145| |l#3@@143|) $o@@178 $f@@146)) )))
(assert (forall ((arg0@@518 T@U) (arg1@@367 T@U) (arg2@@297 T@U) (arg3@@243 Bool) ) (! (= (type (|lambda#158| arg0@@518 arg1@@367 arg2@@297 arg3@@243)) (MapType6Type refType boolType)) :qid |funType:lambda#158| :pattern ( (|lambda#158| arg0@@518 arg1@@367 arg2@@297 arg3@@243)) )))
(assert (forall ((|l#0@@147| T@U) (|l#1@@146| T@U) (|l#2@@146| T@U) (|l#3@@144| Bool) ($o@@179 T@U) ($f@@147 T@U) ) (! (let ((alpha@@154 (FieldTypeInv0 (type $f@@147)))) (=> (and (and (and (and (= (type |l#0@@147|) refType) (= (type |l#1@@146|) (MapType0Type refType MapType1Type))) (= (type |l#2@@146|) (FieldType boolType))) (= (type $o@@179) refType)) (= (type $f@@147) (FieldType alpha@@154))) (= (U_2_bool (MapType6Select (|lambda#158| |l#0@@147| |l#1@@146| |l#2@@146| |l#3@@144|) $o@@179 $f@@147))  (=> (and (not (= $o@@179 |l#0@@147|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@146| $o@@179) |l#2@@146|))) |l#3@@144|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4904| :pattern ( (MapType6Select (|lambda#158| |l#0@@147| |l#1@@146| |l#2@@146| |l#3@@144|) $o@@179 $f@@147)) )))
(assert (forall ((arg0@@519 T@U) (arg1@@368 T@U) (arg2@@298 T@U) (arg3@@244 Bool) ) (! (= (type (|lambda#163| arg0@@519 arg1@@368 arg2@@298 arg3@@244)) (MapType6Type refType boolType)) :qid |funType:lambda#163| :pattern ( (|lambda#163| arg0@@519 arg1@@368 arg2@@298 arg3@@244)) )))
(assert (forall ((|l#0@@148| T@U) (|l#1@@147| T@U) (|l#2@@147| T@U) (|l#3@@145| Bool) ($o@@180 T@U) ($f@@148 T@U) ) (! (let ((alpha@@155 (FieldTypeInv0 (type $f@@148)))) (=> (and (and (and (and (= (type |l#0@@148|) refType) (= (type |l#1@@147|) (MapType0Type refType MapType1Type))) (= (type |l#2@@147|) (FieldType boolType))) (= (type $o@@180) refType)) (= (type $f@@148) (FieldType alpha@@155))) (= (U_2_bool (MapType6Select (|lambda#163| |l#0@@148| |l#1@@147| |l#2@@147| |l#3@@145|) $o@@180 $f@@148))  (=> (and (not (= $o@@180 |l#0@@148|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@147| $o@@180) |l#2@@147|))) |l#3@@145|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4905| :pattern ( (MapType6Select (|lambda#163| |l#0@@148| |l#1@@147| |l#2@@147| |l#3@@145|) $o@@180 $f@@148)) )))
(assert (forall ((arg0@@520 T@U) (arg1@@369 T@U) (arg2@@299 T@U) (arg3@@245 Bool) ) (! (= (type (|lambda#164| arg0@@520 arg1@@369 arg2@@299 arg3@@245)) (MapType6Type refType boolType)) :qid |funType:lambda#164| :pattern ( (|lambda#164| arg0@@520 arg1@@369 arg2@@299 arg3@@245)) )))
(assert (forall ((|l#0@@149| T@U) (|l#1@@148| T@U) (|l#2@@148| T@U) (|l#3@@146| Bool) ($o@@181 T@U) ($f@@149 T@U) ) (! (let ((alpha@@156 (FieldTypeInv0 (type $f@@149)))) (=> (and (and (and (and (= (type |l#0@@149|) refType) (= (type |l#1@@148|) (MapType0Type refType MapType1Type))) (= (type |l#2@@148|) (FieldType boolType))) (= (type $o@@181) refType)) (= (type $f@@149) (FieldType alpha@@156))) (= (U_2_bool (MapType6Select (|lambda#164| |l#0@@149| |l#1@@148| |l#2@@148| |l#3@@146|) $o@@181 $f@@149))  (=> (and (not (= $o@@181 |l#0@@149|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@148| $o@@181) |l#2@@148|))) |l#3@@146|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4906| :pattern ( (MapType6Select (|lambda#164| |l#0@@149| |l#1@@148| |l#2@@148| |l#3@@146|) $o@@181 $f@@149)) )))
(assert (forall ((arg0@@521 T@U) (arg1@@370 T@U) (arg2@@300 T@U) (arg3@@246 Bool) ) (! (= (type (|lambda#173| arg0@@521 arg1@@370 arg2@@300 arg3@@246)) (MapType6Type refType boolType)) :qid |funType:lambda#173| :pattern ( (|lambda#173| arg0@@521 arg1@@370 arg2@@300 arg3@@246)) )))
(assert (forall ((|l#0@@150| T@U) (|l#1@@149| T@U) (|l#2@@149| T@U) (|l#3@@147| Bool) ($o@@182 T@U) ($f@@150 T@U) ) (! (let ((alpha@@157 (FieldTypeInv0 (type $f@@150)))) (=> (and (and (and (and (= (type |l#0@@150|) refType) (= (type |l#1@@149|) (MapType0Type refType MapType1Type))) (= (type |l#2@@149|) (FieldType boolType))) (= (type $o@@182) refType)) (= (type $f@@150) (FieldType alpha@@157))) (= (U_2_bool (MapType6Select (|lambda#173| |l#0@@150| |l#1@@149| |l#2@@149| |l#3@@147|) $o@@182 $f@@150))  (=> (and (not (= $o@@182 |l#0@@150|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@149| $o@@182) |l#2@@149|))) |l#3@@147|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4907| :pattern ( (MapType6Select (|lambda#173| |l#0@@150| |l#1@@149| |l#2@@149| |l#3@@147|) $o@@182 $f@@150)) )))
(assert (forall ((arg0@@522 T@U) (arg1@@371 T@U) (arg2@@301 T@U) (arg3@@247 Bool) ) (! (= (type (|lambda#174| arg0@@522 arg1@@371 arg2@@301 arg3@@247)) (MapType6Type refType boolType)) :qid |funType:lambda#174| :pattern ( (|lambda#174| arg0@@522 arg1@@371 arg2@@301 arg3@@247)) )))
(assert (forall ((|l#0@@151| T@U) (|l#1@@150| T@U) (|l#2@@150| T@U) (|l#3@@148| Bool) ($o@@183 T@U) ($f@@151 T@U) ) (! (let ((alpha@@158 (FieldTypeInv0 (type $f@@151)))) (=> (and (and (and (and (= (type |l#0@@151|) refType) (= (type |l#1@@150|) (MapType0Type refType MapType1Type))) (= (type |l#2@@150|) (FieldType boolType))) (= (type $o@@183) refType)) (= (type $f@@151) (FieldType alpha@@158))) (= (U_2_bool (MapType6Select (|lambda#174| |l#0@@151| |l#1@@150| |l#2@@150| |l#3@@148|) $o@@183 $f@@151))  (=> (and (not (= $o@@183 |l#0@@151|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@150| $o@@183) |l#2@@150|))) |l#3@@148|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4908| :pattern ( (MapType6Select (|lambda#174| |l#0@@151| |l#1@@150| |l#2@@150| |l#3@@148|) $o@@183 $f@@151)) )))
(assert (forall ((arg0@@523 T@U) (arg1@@372 T@U) (arg2@@302 T@U) (arg3@@248 Bool) ) (! (= (type (|lambda#177| arg0@@523 arg1@@372 arg2@@302 arg3@@248)) (MapType6Type refType boolType)) :qid |funType:lambda#177| :pattern ( (|lambda#177| arg0@@523 arg1@@372 arg2@@302 arg3@@248)) )))
(assert (forall ((|l#0@@152| T@U) (|l#1@@151| T@U) (|l#2@@151| T@U) (|l#3@@149| Bool) ($o@@184 T@U) ($f@@152 T@U) ) (! (let ((alpha@@159 (FieldTypeInv0 (type $f@@152)))) (=> (and (and (and (and (= (type |l#0@@152|) refType) (= (type |l#1@@151|) (MapType0Type refType MapType1Type))) (= (type |l#2@@151|) (FieldType boolType))) (= (type $o@@184) refType)) (= (type $f@@152) (FieldType alpha@@159))) (= (U_2_bool (MapType6Select (|lambda#177| |l#0@@152| |l#1@@151| |l#2@@151| |l#3@@149|) $o@@184 $f@@152))  (=> (and (not (= $o@@184 |l#0@@152|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@151| $o@@184) |l#2@@151|))) |l#3@@149|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4909| :pattern ( (MapType6Select (|lambda#177| |l#0@@152| |l#1@@151| |l#2@@151| |l#3@@149|) $o@@184 $f@@152)) )))
(assert (forall ((arg0@@524 T@U) (arg1@@373 T@U) (arg2@@303 T@U) (arg3@@249 Bool) ) (! (= (type (|lambda#178| arg0@@524 arg1@@373 arg2@@303 arg3@@249)) (MapType6Type refType boolType)) :qid |funType:lambda#178| :pattern ( (|lambda#178| arg0@@524 arg1@@373 arg2@@303 arg3@@249)) )))
(assert (forall ((|l#0@@153| T@U) (|l#1@@152| T@U) (|l#2@@152| T@U) (|l#3@@150| Bool) ($o@@185 T@U) ($f@@153 T@U) ) (! (let ((alpha@@160 (FieldTypeInv0 (type $f@@153)))) (=> (and (and (and (and (= (type |l#0@@153|) refType) (= (type |l#1@@152|) (MapType0Type refType MapType1Type))) (= (type |l#2@@152|) (FieldType boolType))) (= (type $o@@185) refType)) (= (type $f@@153) (FieldType alpha@@160))) (= (U_2_bool (MapType6Select (|lambda#178| |l#0@@153| |l#1@@152| |l#2@@152| |l#3@@150|) $o@@185 $f@@153))  (=> (and (not (= $o@@185 |l#0@@153|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@152| $o@@185) |l#2@@152|))) |l#3@@150|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4910| :pattern ( (MapType6Select (|lambda#178| |l#0@@153| |l#1@@152| |l#2@@152| |l#3@@150|) $o@@185 $f@@153)) )))
(assert (forall ((arg0@@525 T@U) (arg1@@374 T@U) (arg2@@304 T@U) (arg3@@250 Bool) ) (! (= (type (|lambda#179| arg0@@525 arg1@@374 arg2@@304 arg3@@250)) (MapType6Type refType boolType)) :qid |funType:lambda#179| :pattern ( (|lambda#179| arg0@@525 arg1@@374 arg2@@304 arg3@@250)) )))
(assert (forall ((|l#0@@154| T@U) (|l#1@@153| T@U) (|l#2@@153| T@U) (|l#3@@151| Bool) ($o@@186 T@U) ($f@@154 T@U) ) (! (let ((alpha@@161 (FieldTypeInv0 (type $f@@154)))) (=> (and (and (and (and (= (type |l#0@@154|) refType) (= (type |l#1@@153|) (MapType0Type refType MapType1Type))) (= (type |l#2@@153|) (FieldType boolType))) (= (type $o@@186) refType)) (= (type $f@@154) (FieldType alpha@@161))) (= (U_2_bool (MapType6Select (|lambda#179| |l#0@@154| |l#1@@153| |l#2@@153| |l#3@@151|) $o@@186 $f@@154))  (=> (and (not (= $o@@186 |l#0@@154|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@153| $o@@186) |l#2@@153|))) |l#3@@151|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4911| :pattern ( (MapType6Select (|lambda#179| |l#0@@154| |l#1@@153| |l#2@@153| |l#3@@151|) $o@@186 $f@@154)) )))
(assert (forall ((arg0@@526 T@U) (arg1@@375 T@U) (arg2@@305 T@U) (arg3@@251 Bool) ) (! (= (type (|lambda#180| arg0@@526 arg1@@375 arg2@@305 arg3@@251)) (MapType6Type refType boolType)) :qid |funType:lambda#180| :pattern ( (|lambda#180| arg0@@526 arg1@@375 arg2@@305 arg3@@251)) )))
(assert (forall ((|l#0@@155| T@U) (|l#1@@154| T@U) (|l#2@@154| T@U) (|l#3@@152| Bool) ($o@@187 T@U) ($f@@155 T@U) ) (! (let ((alpha@@162 (FieldTypeInv0 (type $f@@155)))) (=> (and (and (and (and (= (type |l#0@@155|) refType) (= (type |l#1@@154|) (MapType0Type refType MapType1Type))) (= (type |l#2@@154|) (FieldType boolType))) (= (type $o@@187) refType)) (= (type $f@@155) (FieldType alpha@@162))) (= (U_2_bool (MapType6Select (|lambda#180| |l#0@@155| |l#1@@154| |l#2@@154| |l#3@@152|) $o@@187 $f@@155))  (=> (and (not (= $o@@187 |l#0@@155|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@154| $o@@187) |l#2@@154|))) |l#3@@152|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4912| :pattern ( (MapType6Select (|lambda#180| |l#0@@155| |l#1@@154| |l#2@@154| |l#3@@152|) $o@@187 $f@@155)) )))
(assert (forall ((arg0@@527 T@U) (arg1@@376 T@U) (arg2@@306 T@U) (arg3@@252 Bool) ) (! (= (type (|lambda#181| arg0@@527 arg1@@376 arg2@@306 arg3@@252)) (MapType6Type refType boolType)) :qid |funType:lambda#181| :pattern ( (|lambda#181| arg0@@527 arg1@@376 arg2@@306 arg3@@252)) )))
(assert (forall ((|l#0@@156| T@U) (|l#1@@155| T@U) (|l#2@@155| T@U) (|l#3@@153| Bool) ($o@@188 T@U) ($f@@156 T@U) ) (! (let ((alpha@@163 (FieldTypeInv0 (type $f@@156)))) (=> (and (and (and (and (= (type |l#0@@156|) refType) (= (type |l#1@@155|) (MapType0Type refType MapType1Type))) (= (type |l#2@@155|) (FieldType boolType))) (= (type $o@@188) refType)) (= (type $f@@156) (FieldType alpha@@163))) (= (U_2_bool (MapType6Select (|lambda#181| |l#0@@156| |l#1@@155| |l#2@@155| |l#3@@153|) $o@@188 $f@@156))  (=> (and (not (= $o@@188 |l#0@@156|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@155| $o@@188) |l#2@@155|))) |l#3@@153|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4913| :pattern ( (MapType6Select (|lambda#181| |l#0@@156| |l#1@@155| |l#2@@155| |l#3@@153|) $o@@188 $f@@156)) )))
(assert (forall ((arg0@@528 T@U) (arg1@@377 T@U) (arg2@@307 T@U) (arg3@@253 Bool) ) (! (= (type (|lambda#182| arg0@@528 arg1@@377 arg2@@307 arg3@@253)) (MapType6Type refType boolType)) :qid |funType:lambda#182| :pattern ( (|lambda#182| arg0@@528 arg1@@377 arg2@@307 arg3@@253)) )))
(assert (forall ((|l#0@@157| T@U) (|l#1@@156| T@U) (|l#2@@156| T@U) (|l#3@@154| Bool) ($o@@189 T@U) ($f@@157 T@U) ) (! (let ((alpha@@164 (FieldTypeInv0 (type $f@@157)))) (=> (and (and (and (and (= (type |l#0@@157|) refType) (= (type |l#1@@156|) (MapType0Type refType MapType1Type))) (= (type |l#2@@156|) (FieldType boolType))) (= (type $o@@189) refType)) (= (type $f@@157) (FieldType alpha@@164))) (= (U_2_bool (MapType6Select (|lambda#182| |l#0@@157| |l#1@@156| |l#2@@156| |l#3@@154|) $o@@189 $f@@157))  (=> (and (not (= $o@@189 |l#0@@157|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@156| $o@@189) |l#2@@156|))) |l#3@@154|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4914| :pattern ( (MapType6Select (|lambda#182| |l#0@@157| |l#1@@156| |l#2@@156| |l#3@@154|) $o@@189 $f@@157)) )))
(assert (forall ((arg0@@529 T@U) (arg1@@378 T@U) (arg2@@308 T@U) (arg3@@254 Bool) ) (! (= (type (|lambda#183| arg0@@529 arg1@@378 arg2@@308 arg3@@254)) (MapType6Type refType boolType)) :qid |funType:lambda#183| :pattern ( (|lambda#183| arg0@@529 arg1@@378 arg2@@308 arg3@@254)) )))
(assert (forall ((|l#0@@158| T@U) (|l#1@@157| T@U) (|l#2@@157| T@U) (|l#3@@155| Bool) ($o@@190 T@U) ($f@@158 T@U) ) (! (let ((alpha@@165 (FieldTypeInv0 (type $f@@158)))) (=> (and (and (and (and (= (type |l#0@@158|) refType) (= (type |l#1@@157|) (MapType0Type refType MapType1Type))) (= (type |l#2@@157|) (FieldType boolType))) (= (type $o@@190) refType)) (= (type $f@@158) (FieldType alpha@@165))) (= (U_2_bool (MapType6Select (|lambda#183| |l#0@@158| |l#1@@157| |l#2@@157| |l#3@@155|) $o@@190 $f@@158))  (=> (and (not (= $o@@190 |l#0@@158|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@157| $o@@190) |l#2@@157|))) |l#3@@155|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4915| :pattern ( (MapType6Select (|lambda#183| |l#0@@158| |l#1@@157| |l#2@@157| |l#3@@155|) $o@@190 $f@@158)) )))
(assert (forall ((arg0@@530 T@U) (arg1@@379 T@U) (arg2@@309 T@U) (arg3@@255 Bool) ) (! (= (type (|lambda#184| arg0@@530 arg1@@379 arg2@@309 arg3@@255)) (MapType6Type refType boolType)) :qid |funType:lambda#184| :pattern ( (|lambda#184| arg0@@530 arg1@@379 arg2@@309 arg3@@255)) )))
(assert (forall ((|l#0@@159| T@U) (|l#1@@158| T@U) (|l#2@@158| T@U) (|l#3@@156| Bool) ($o@@191 T@U) ($f@@159 T@U) ) (! (let ((alpha@@166 (FieldTypeInv0 (type $f@@159)))) (=> (and (and (and (and (= (type |l#0@@159|) refType) (= (type |l#1@@158|) (MapType0Type refType MapType1Type))) (= (type |l#2@@158|) (FieldType boolType))) (= (type $o@@191) refType)) (= (type $f@@159) (FieldType alpha@@166))) (= (U_2_bool (MapType6Select (|lambda#184| |l#0@@159| |l#1@@158| |l#2@@158| |l#3@@156|) $o@@191 $f@@159))  (=> (and (not (= $o@@191 |l#0@@159|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@158| $o@@191) |l#2@@158|))) |l#3@@156|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4916| :pattern ( (MapType6Select (|lambda#184| |l#0@@159| |l#1@@158| |l#2@@158| |l#3@@156|) $o@@191 $f@@159)) )))
(assert (forall ((arg0@@531 T@U) (arg1@@380 T@U) (arg2@@310 T@U) (arg3@@256 Bool) ) (! (= (type (|lambda#185| arg0@@531 arg1@@380 arg2@@310 arg3@@256)) (MapType6Type refType boolType)) :qid |funType:lambda#185| :pattern ( (|lambda#185| arg0@@531 arg1@@380 arg2@@310 arg3@@256)) )))
(assert (forall ((|l#0@@160| T@U) (|l#1@@159| T@U) (|l#2@@159| T@U) (|l#3@@157| Bool) ($o@@192 T@U) ($f@@160 T@U) ) (! (let ((alpha@@167 (FieldTypeInv0 (type $f@@160)))) (=> (and (and (and (and (= (type |l#0@@160|) refType) (= (type |l#1@@159|) (MapType0Type refType MapType1Type))) (= (type |l#2@@159|) (FieldType boolType))) (= (type $o@@192) refType)) (= (type $f@@160) (FieldType alpha@@167))) (= (U_2_bool (MapType6Select (|lambda#185| |l#0@@160| |l#1@@159| |l#2@@159| |l#3@@157|) $o@@192 $f@@160))  (=> (and (not (= $o@@192 |l#0@@160|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@159| $o@@192) |l#2@@159|))) |l#3@@157|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4917| :pattern ( (MapType6Select (|lambda#185| |l#0@@160| |l#1@@159| |l#2@@159| |l#3@@157|) $o@@192 $f@@160)) )))
(assert (forall ((arg0@@532 T@U) (arg1@@381 T@U) (arg2@@311 T@U) (arg3@@257 Bool) ) (! (= (type (|lambda#186| arg0@@532 arg1@@381 arg2@@311 arg3@@257)) (MapType6Type refType boolType)) :qid |funType:lambda#186| :pattern ( (|lambda#186| arg0@@532 arg1@@381 arg2@@311 arg3@@257)) )))
(assert (forall ((|l#0@@161| T@U) (|l#1@@160| T@U) (|l#2@@160| T@U) (|l#3@@158| Bool) ($o@@193 T@U) ($f@@161 T@U) ) (! (let ((alpha@@168 (FieldTypeInv0 (type $f@@161)))) (=> (and (and (and (and (= (type |l#0@@161|) refType) (= (type |l#1@@160|) (MapType0Type refType MapType1Type))) (= (type |l#2@@160|) (FieldType boolType))) (= (type $o@@193) refType)) (= (type $f@@161) (FieldType alpha@@168))) (= (U_2_bool (MapType6Select (|lambda#186| |l#0@@161| |l#1@@160| |l#2@@160| |l#3@@158|) $o@@193 $f@@161))  (=> (and (not (= $o@@193 |l#0@@161|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@160| $o@@193) |l#2@@160|))) |l#3@@158|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4918| :pattern ( (MapType6Select (|lambda#186| |l#0@@161| |l#1@@160| |l#2@@160| |l#3@@158|) $o@@193 $f@@161)) )))
(assert (forall ((arg0@@533 T@U) (arg1@@382 T@U) (arg2@@312 T@U) (arg3@@258 Bool) ) (! (= (type (|lambda#187| arg0@@533 arg1@@382 arg2@@312 arg3@@258)) (MapType6Type refType boolType)) :qid |funType:lambda#187| :pattern ( (|lambda#187| arg0@@533 arg1@@382 arg2@@312 arg3@@258)) )))
(assert (forall ((|l#0@@162| T@U) (|l#1@@161| T@U) (|l#2@@161| T@U) (|l#3@@159| Bool) ($o@@194 T@U) ($f@@162 T@U) ) (! (let ((alpha@@169 (FieldTypeInv0 (type $f@@162)))) (=> (and (and (and (and (= (type |l#0@@162|) refType) (= (type |l#1@@161|) (MapType0Type refType MapType1Type))) (= (type |l#2@@161|) (FieldType boolType))) (= (type $o@@194) refType)) (= (type $f@@162) (FieldType alpha@@169))) (= (U_2_bool (MapType6Select (|lambda#187| |l#0@@162| |l#1@@161| |l#2@@161| |l#3@@159|) $o@@194 $f@@162))  (=> (and (not (= $o@@194 |l#0@@162|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@161| $o@@194) |l#2@@161|))) |l#3@@159|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4919| :pattern ( (MapType6Select (|lambda#187| |l#0@@162| |l#1@@161| |l#2@@161| |l#3@@159|) $o@@194 $f@@162)) )))
(assert (forall ((arg0@@534 T@U) (arg1@@383 T@U) (arg2@@313 T@U) (arg3@@259 Bool) ) (! (= (type (|lambda#188| arg0@@534 arg1@@383 arg2@@313 arg3@@259)) (MapType6Type refType boolType)) :qid |funType:lambda#188| :pattern ( (|lambda#188| arg0@@534 arg1@@383 arg2@@313 arg3@@259)) )))
(assert (forall ((|l#0@@163| T@U) (|l#1@@162| T@U) (|l#2@@162| T@U) (|l#3@@160| Bool) ($o@@195 T@U) ($f@@163 T@U) ) (! (let ((alpha@@170 (FieldTypeInv0 (type $f@@163)))) (=> (and (and (and (and (= (type |l#0@@163|) refType) (= (type |l#1@@162|) (MapType0Type refType MapType1Type))) (= (type |l#2@@162|) (FieldType boolType))) (= (type $o@@195) refType)) (= (type $f@@163) (FieldType alpha@@170))) (= (U_2_bool (MapType6Select (|lambda#188| |l#0@@163| |l#1@@162| |l#2@@162| |l#3@@160|) $o@@195 $f@@163))  (=> (and (not (= $o@@195 |l#0@@163|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@162| $o@@195) |l#2@@162|))) |l#3@@160|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4920| :pattern ( (MapType6Select (|lambda#188| |l#0@@163| |l#1@@162| |l#2@@162| |l#3@@160|) $o@@195 $f@@163)) )))
(assert (forall ((arg0@@535 T@U) (arg1@@384 T@U) (arg2@@314 T@U) (arg3@@260 Bool) ) (! (= (type (|lambda#189| arg0@@535 arg1@@384 arg2@@314 arg3@@260)) (MapType6Type refType boolType)) :qid |funType:lambda#189| :pattern ( (|lambda#189| arg0@@535 arg1@@384 arg2@@314 arg3@@260)) )))
(assert (forall ((|l#0@@164| T@U) (|l#1@@163| T@U) (|l#2@@163| T@U) (|l#3@@161| Bool) ($o@@196 T@U) ($f@@164 T@U) ) (! (let ((alpha@@171 (FieldTypeInv0 (type $f@@164)))) (=> (and (and (and (and (= (type |l#0@@164|) refType) (= (type |l#1@@163|) (MapType0Type refType MapType1Type))) (= (type |l#2@@163|) (FieldType boolType))) (= (type $o@@196) refType)) (= (type $f@@164) (FieldType alpha@@171))) (= (U_2_bool (MapType6Select (|lambda#189| |l#0@@164| |l#1@@163| |l#2@@163| |l#3@@161|) $o@@196 $f@@164))  (=> (and (not (= $o@@196 |l#0@@164|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@163| $o@@196) |l#2@@163|))) |l#3@@161|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4921| :pattern ( (MapType6Select (|lambda#189| |l#0@@164| |l#1@@163| |l#2@@163| |l#3@@161|) $o@@196 $f@@164)) )))
(assert (forall ((arg0@@536 T@U) (arg1@@385 T@U) (arg2@@315 T@U) (arg3@@261 Bool) ) (! (= (type (|lambda#190| arg0@@536 arg1@@385 arg2@@315 arg3@@261)) (MapType6Type refType boolType)) :qid |funType:lambda#190| :pattern ( (|lambda#190| arg0@@536 arg1@@385 arg2@@315 arg3@@261)) )))
(assert (forall ((|l#0@@165| T@U) (|l#1@@164| T@U) (|l#2@@164| T@U) (|l#3@@162| Bool) ($o@@197 T@U) ($f@@165 T@U) ) (! (let ((alpha@@172 (FieldTypeInv0 (type $f@@165)))) (=> (and (and (and (and (= (type |l#0@@165|) refType) (= (type |l#1@@164|) (MapType0Type refType MapType1Type))) (= (type |l#2@@164|) (FieldType boolType))) (= (type $o@@197) refType)) (= (type $f@@165) (FieldType alpha@@172))) (= (U_2_bool (MapType6Select (|lambda#190| |l#0@@165| |l#1@@164| |l#2@@164| |l#3@@162|) $o@@197 $f@@165))  (=> (and (not (= $o@@197 |l#0@@165|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@164| $o@@197) |l#2@@164|))) |l#3@@162|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4922| :pattern ( (MapType6Select (|lambda#190| |l#0@@165| |l#1@@164| |l#2@@164| |l#3@@162|) $o@@197 $f@@165)) )))
(assert (forall ((arg0@@537 T@U) (arg1@@386 T@U) (arg2@@316 T@U) (arg3@@262 Bool) ) (! (= (type (|lambda#191| arg0@@537 arg1@@386 arg2@@316 arg3@@262)) (MapType6Type refType boolType)) :qid |funType:lambda#191| :pattern ( (|lambda#191| arg0@@537 arg1@@386 arg2@@316 arg3@@262)) )))
(assert (forall ((|l#0@@166| T@U) (|l#1@@165| T@U) (|l#2@@165| T@U) (|l#3@@163| Bool) ($o@@198 T@U) ($f@@166 T@U) ) (! (let ((alpha@@173 (FieldTypeInv0 (type $f@@166)))) (=> (and (and (and (and (= (type |l#0@@166|) refType) (= (type |l#1@@165|) (MapType0Type refType MapType1Type))) (= (type |l#2@@165|) (FieldType boolType))) (= (type $o@@198) refType)) (= (type $f@@166) (FieldType alpha@@173))) (= (U_2_bool (MapType6Select (|lambda#191| |l#0@@166| |l#1@@165| |l#2@@165| |l#3@@163|) $o@@198 $f@@166))  (=> (and (not (= $o@@198 |l#0@@166|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@165| $o@@198) |l#2@@165|))) |l#3@@163|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4923| :pattern ( (MapType6Select (|lambda#191| |l#0@@166| |l#1@@165| |l#2@@165| |l#3@@163|) $o@@198 $f@@166)) )))
(assert (forall ((arg0@@538 T@U) (arg1@@387 T@U) (arg2@@317 T@U) (arg3@@263 Bool) ) (! (= (type (|lambda#192| arg0@@538 arg1@@387 arg2@@317 arg3@@263)) (MapType6Type refType boolType)) :qid |funType:lambda#192| :pattern ( (|lambda#192| arg0@@538 arg1@@387 arg2@@317 arg3@@263)) )))
(assert (forall ((|l#0@@167| T@U) (|l#1@@166| T@U) (|l#2@@166| T@U) (|l#3@@164| Bool) ($o@@199 T@U) ($f@@167 T@U) ) (! (let ((alpha@@174 (FieldTypeInv0 (type $f@@167)))) (=> (and (and (and (and (= (type |l#0@@167|) refType) (= (type |l#1@@166|) (MapType0Type refType MapType1Type))) (= (type |l#2@@166|) (FieldType boolType))) (= (type $o@@199) refType)) (= (type $f@@167) (FieldType alpha@@174))) (= (U_2_bool (MapType6Select (|lambda#192| |l#0@@167| |l#1@@166| |l#2@@166| |l#3@@164|) $o@@199 $f@@167))  (=> (and (not (= $o@@199 |l#0@@167|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@166| $o@@199) |l#2@@166|))) |l#3@@164|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4924| :pattern ( (MapType6Select (|lambda#192| |l#0@@167| |l#1@@166| |l#2@@166| |l#3@@164|) $o@@199 $f@@167)) )))
(assert (forall ((arg0@@539 T@U) (arg1@@388 T@U) (arg2@@318 T@U) (arg3@@264 Bool) ) (! (= (type (|lambda#193| arg0@@539 arg1@@388 arg2@@318 arg3@@264)) (MapType6Type refType boolType)) :qid |funType:lambda#193| :pattern ( (|lambda#193| arg0@@539 arg1@@388 arg2@@318 arg3@@264)) )))
(assert (forall ((|l#0@@168| T@U) (|l#1@@167| T@U) (|l#2@@167| T@U) (|l#3@@165| Bool) ($o@@200 T@U) ($f@@168 T@U) ) (! (let ((alpha@@175 (FieldTypeInv0 (type $f@@168)))) (=> (and (and (and (and (= (type |l#0@@168|) refType) (= (type |l#1@@167|) (MapType0Type refType MapType1Type))) (= (type |l#2@@167|) (FieldType boolType))) (= (type $o@@200) refType)) (= (type $f@@168) (FieldType alpha@@175))) (= (U_2_bool (MapType6Select (|lambda#193| |l#0@@168| |l#1@@167| |l#2@@167| |l#3@@165|) $o@@200 $f@@168))  (=> (and (not (= $o@@200 |l#0@@168|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@167| $o@@200) |l#2@@167|))) |l#3@@165|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4925| :pattern ( (MapType6Select (|lambda#193| |l#0@@168| |l#1@@167| |l#2@@167| |l#3@@165|) $o@@200 $f@@168)) )))
(assert (forall ((arg0@@540 T@U) (arg1@@389 T@U) (arg2@@319 T@U) (arg3@@265 Bool) ) (! (= (type (|lambda#194| arg0@@540 arg1@@389 arg2@@319 arg3@@265)) (MapType6Type refType boolType)) :qid |funType:lambda#194| :pattern ( (|lambda#194| arg0@@540 arg1@@389 arg2@@319 arg3@@265)) )))
(assert (forall ((|l#0@@169| T@U) (|l#1@@168| T@U) (|l#2@@168| T@U) (|l#3@@166| Bool) ($o@@201 T@U) ($f@@169 T@U) ) (! (let ((alpha@@176 (FieldTypeInv0 (type $f@@169)))) (=> (and (and (and (and (= (type |l#0@@169|) refType) (= (type |l#1@@168|) (MapType0Type refType MapType1Type))) (= (type |l#2@@168|) (FieldType boolType))) (= (type $o@@201) refType)) (= (type $f@@169) (FieldType alpha@@176))) (= (U_2_bool (MapType6Select (|lambda#194| |l#0@@169| |l#1@@168| |l#2@@168| |l#3@@166|) $o@@201 $f@@169))  (=> (and (not (= $o@@201 |l#0@@169|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@168| $o@@201) |l#2@@168|))) |l#3@@166|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4926| :pattern ( (MapType6Select (|lambda#194| |l#0@@169| |l#1@@168| |l#2@@168| |l#3@@166|) $o@@201 $f@@169)) )))
(assert (forall ((arg0@@541 T@U) (arg1@@390 T@U) (arg2@@320 T@U) (arg3@@266 Bool) ) (! (= (type (|lambda#195| arg0@@541 arg1@@390 arg2@@320 arg3@@266)) (MapType6Type refType boolType)) :qid |funType:lambda#195| :pattern ( (|lambda#195| arg0@@541 arg1@@390 arg2@@320 arg3@@266)) )))
(assert (forall ((|l#0@@170| T@U) (|l#1@@169| T@U) (|l#2@@169| T@U) (|l#3@@167| Bool) ($o@@202 T@U) ($f@@170 T@U) ) (! (let ((alpha@@177 (FieldTypeInv0 (type $f@@170)))) (=> (and (and (and (and (= (type |l#0@@170|) refType) (= (type |l#1@@169|) (MapType0Type refType MapType1Type))) (= (type |l#2@@169|) (FieldType boolType))) (= (type $o@@202) refType)) (= (type $f@@170) (FieldType alpha@@177))) (= (U_2_bool (MapType6Select (|lambda#195| |l#0@@170| |l#1@@169| |l#2@@169| |l#3@@167|) $o@@202 $f@@170))  (=> (and (not (= $o@@202 |l#0@@170|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@169| $o@@202) |l#2@@169|))) |l#3@@167|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4927| :pattern ( (MapType6Select (|lambda#195| |l#0@@170| |l#1@@169| |l#2@@169| |l#3@@167|) $o@@202 $f@@170)) )))
(assert (forall ((arg0@@542 T@U) (arg1@@391 T@U) (arg2@@321 T@U) (arg3@@267 Bool) ) (! (= (type (|lambda#196| arg0@@542 arg1@@391 arg2@@321 arg3@@267)) (MapType6Type refType boolType)) :qid |funType:lambda#196| :pattern ( (|lambda#196| arg0@@542 arg1@@391 arg2@@321 arg3@@267)) )))
(assert (forall ((|l#0@@171| T@U) (|l#1@@170| T@U) (|l#2@@170| T@U) (|l#3@@168| Bool) ($o@@203 T@U) ($f@@171 T@U) ) (! (let ((alpha@@178 (FieldTypeInv0 (type $f@@171)))) (=> (and (and (and (and (= (type |l#0@@171|) refType) (= (type |l#1@@170|) (MapType0Type refType MapType1Type))) (= (type |l#2@@170|) (FieldType boolType))) (= (type $o@@203) refType)) (= (type $f@@171) (FieldType alpha@@178))) (= (U_2_bool (MapType6Select (|lambda#196| |l#0@@171| |l#1@@170| |l#2@@170| |l#3@@168|) $o@@203 $f@@171))  (=> (and (not (= $o@@203 |l#0@@171|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@170| $o@@203) |l#2@@170|))) |l#3@@168|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4928| :pattern ( (MapType6Select (|lambda#196| |l#0@@171| |l#1@@170| |l#2@@170| |l#3@@168|) $o@@203 $f@@171)) )))
(assert (forall ((arg0@@543 T@U) (arg1@@392 T@U) (arg2@@322 T@U) (arg3@@268 Bool) ) (! (= (type (|lambda#197| arg0@@543 arg1@@392 arg2@@322 arg3@@268)) (MapType6Type refType boolType)) :qid |funType:lambda#197| :pattern ( (|lambda#197| arg0@@543 arg1@@392 arg2@@322 arg3@@268)) )))
(assert (forall ((|l#0@@172| T@U) (|l#1@@171| T@U) (|l#2@@171| T@U) (|l#3@@169| Bool) ($o@@204 T@U) ($f@@172 T@U) ) (! (let ((alpha@@179 (FieldTypeInv0 (type $f@@172)))) (=> (and (and (and (and (= (type |l#0@@172|) refType) (= (type |l#1@@171|) (MapType0Type refType MapType1Type))) (= (type |l#2@@171|) (FieldType boolType))) (= (type $o@@204) refType)) (= (type $f@@172) (FieldType alpha@@179))) (= (U_2_bool (MapType6Select (|lambda#197| |l#0@@172| |l#1@@171| |l#2@@171| |l#3@@169|) $o@@204 $f@@172))  (=> (and (not (= $o@@204 |l#0@@172|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@171| $o@@204) |l#2@@171|))) |l#3@@169|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4929| :pattern ( (MapType6Select (|lambda#197| |l#0@@172| |l#1@@171| |l#2@@171| |l#3@@169|) $o@@204 $f@@172)) )))
(assert (forall ((arg0@@544 T@U) (arg1@@393 T@U) (arg2@@323 T@U) (arg3@@269 Bool) ) (! (= (type (|lambda#198| arg0@@544 arg1@@393 arg2@@323 arg3@@269)) (MapType6Type refType boolType)) :qid |funType:lambda#198| :pattern ( (|lambda#198| arg0@@544 arg1@@393 arg2@@323 arg3@@269)) )))
(assert (forall ((|l#0@@173| T@U) (|l#1@@172| T@U) (|l#2@@172| T@U) (|l#3@@170| Bool) ($o@@205 T@U) ($f@@173 T@U) ) (! (let ((alpha@@180 (FieldTypeInv0 (type $f@@173)))) (=> (and (and (and (and (= (type |l#0@@173|) refType) (= (type |l#1@@172|) (MapType0Type refType MapType1Type))) (= (type |l#2@@172|) (FieldType boolType))) (= (type $o@@205) refType)) (= (type $f@@173) (FieldType alpha@@180))) (= (U_2_bool (MapType6Select (|lambda#198| |l#0@@173| |l#1@@172| |l#2@@172| |l#3@@170|) $o@@205 $f@@173))  (=> (and (not (= $o@@205 |l#0@@173|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@172| $o@@205) |l#2@@172|))) |l#3@@170|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4930| :pattern ( (MapType6Select (|lambda#198| |l#0@@173| |l#1@@172| |l#2@@172| |l#3@@170|) $o@@205 $f@@173)) )))
(assert (forall ((arg0@@545 T@U) (arg1@@394 T@U) (arg2@@324 T@U) (arg3@@270 Bool) ) (! (= (type (|lambda#199| arg0@@545 arg1@@394 arg2@@324 arg3@@270)) (MapType6Type refType boolType)) :qid |funType:lambda#199| :pattern ( (|lambda#199| arg0@@545 arg1@@394 arg2@@324 arg3@@270)) )))
(assert (forall ((|l#0@@174| T@U) (|l#1@@173| T@U) (|l#2@@173| T@U) (|l#3@@171| Bool) ($o@@206 T@U) ($f@@174 T@U) ) (! (let ((alpha@@181 (FieldTypeInv0 (type $f@@174)))) (=> (and (and (and (and (= (type |l#0@@174|) refType) (= (type |l#1@@173|) (MapType0Type refType MapType1Type))) (= (type |l#2@@173|) (FieldType boolType))) (= (type $o@@206) refType)) (= (type $f@@174) (FieldType alpha@@181))) (= (U_2_bool (MapType6Select (|lambda#199| |l#0@@174| |l#1@@173| |l#2@@173| |l#3@@171|) $o@@206 $f@@174))  (=> (and (not (= $o@@206 |l#0@@174|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@173| $o@@206) |l#2@@173|))) |l#3@@171|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4931| :pattern ( (MapType6Select (|lambda#199| |l#0@@174| |l#1@@173| |l#2@@173| |l#3@@171|) $o@@206 $f@@174)) )))
(assert (forall ((arg0@@546 T@U) (arg1@@395 T@U) (arg2@@325 T@U) (arg3@@271 Bool) ) (! (= (type (|lambda#200| arg0@@546 arg1@@395 arg2@@325 arg3@@271)) (MapType6Type refType boolType)) :qid |funType:lambda#200| :pattern ( (|lambda#200| arg0@@546 arg1@@395 arg2@@325 arg3@@271)) )))
(assert (forall ((|l#0@@175| T@U) (|l#1@@174| T@U) (|l#2@@174| T@U) (|l#3@@172| Bool) ($o@@207 T@U) ($f@@175 T@U) ) (! (let ((alpha@@182 (FieldTypeInv0 (type $f@@175)))) (=> (and (and (and (and (= (type |l#0@@175|) refType) (= (type |l#1@@174|) (MapType0Type refType MapType1Type))) (= (type |l#2@@174|) (FieldType boolType))) (= (type $o@@207) refType)) (= (type $f@@175) (FieldType alpha@@182))) (= (U_2_bool (MapType6Select (|lambda#200| |l#0@@175| |l#1@@174| |l#2@@174| |l#3@@172|) $o@@207 $f@@175))  (=> (and (not (= $o@@207 |l#0@@175|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@174| $o@@207) |l#2@@174|))) |l#3@@172|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4932| :pattern ( (MapType6Select (|lambda#200| |l#0@@175| |l#1@@174| |l#2@@174| |l#3@@172|) $o@@207 $f@@175)) )))
(assert (forall ((arg0@@547 T@U) (arg1@@396 T@U) (arg2@@326 T@U) (arg3@@272 Bool) ) (! (= (type (|lambda#201| arg0@@547 arg1@@396 arg2@@326 arg3@@272)) (MapType6Type refType boolType)) :qid |funType:lambda#201| :pattern ( (|lambda#201| arg0@@547 arg1@@396 arg2@@326 arg3@@272)) )))
(assert (forall ((|l#0@@176| T@U) (|l#1@@175| T@U) (|l#2@@175| T@U) (|l#3@@173| Bool) ($o@@208 T@U) ($f@@176 T@U) ) (! (let ((alpha@@183 (FieldTypeInv0 (type $f@@176)))) (=> (and (and (and (and (= (type |l#0@@176|) refType) (= (type |l#1@@175|) (MapType0Type refType MapType1Type))) (= (type |l#2@@175|) (FieldType boolType))) (= (type $o@@208) refType)) (= (type $f@@176) (FieldType alpha@@183))) (= (U_2_bool (MapType6Select (|lambda#201| |l#0@@176| |l#1@@175| |l#2@@175| |l#3@@173|) $o@@208 $f@@176))  (=> (and (not (= $o@@208 |l#0@@176|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@175| $o@@208) |l#2@@175|))) |l#3@@173|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4933| :pattern ( (MapType6Select (|lambda#201| |l#0@@176| |l#1@@175| |l#2@@175| |l#3@@173|) $o@@208 $f@@176)) )))
(assert (forall ((arg0@@548 T@U) (arg1@@397 T@U) (arg2@@327 T@U) (arg3@@273 Bool) ) (! (= (type (|lambda#202| arg0@@548 arg1@@397 arg2@@327 arg3@@273)) (MapType6Type refType boolType)) :qid |funType:lambda#202| :pattern ( (|lambda#202| arg0@@548 arg1@@397 arg2@@327 arg3@@273)) )))
(assert (forall ((|l#0@@177| T@U) (|l#1@@176| T@U) (|l#2@@176| T@U) (|l#3@@174| Bool) ($o@@209 T@U) ($f@@177 T@U) ) (! (let ((alpha@@184 (FieldTypeInv0 (type $f@@177)))) (=> (and (and (and (and (= (type |l#0@@177|) refType) (= (type |l#1@@176|) (MapType0Type refType MapType1Type))) (= (type |l#2@@176|) (FieldType boolType))) (= (type $o@@209) refType)) (= (type $f@@177) (FieldType alpha@@184))) (= (U_2_bool (MapType6Select (|lambda#202| |l#0@@177| |l#1@@176| |l#2@@176| |l#3@@174|) $o@@209 $f@@177))  (=> (and (not (= $o@@209 |l#0@@177|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@176| $o@@209) |l#2@@176|))) |l#3@@174|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4934| :pattern ( (MapType6Select (|lambda#202| |l#0@@177| |l#1@@176| |l#2@@176| |l#3@@174|) $o@@209 $f@@177)) )))
(assert (forall ((arg0@@549 T@U) (arg1@@398 T@U) (arg2@@328 T@U) (arg3@@274 Bool) ) (! (= (type (|lambda#203| arg0@@549 arg1@@398 arg2@@328 arg3@@274)) (MapType6Type refType boolType)) :qid |funType:lambda#203| :pattern ( (|lambda#203| arg0@@549 arg1@@398 arg2@@328 arg3@@274)) )))
(assert (forall ((|l#0@@178| T@U) (|l#1@@177| T@U) (|l#2@@177| T@U) (|l#3@@175| Bool) ($o@@210 T@U) ($f@@178 T@U) ) (! (let ((alpha@@185 (FieldTypeInv0 (type $f@@178)))) (=> (and (and (and (and (= (type |l#0@@178|) refType) (= (type |l#1@@177|) (MapType0Type refType MapType1Type))) (= (type |l#2@@177|) (FieldType boolType))) (= (type $o@@210) refType)) (= (type $f@@178) (FieldType alpha@@185))) (= (U_2_bool (MapType6Select (|lambda#203| |l#0@@178| |l#1@@177| |l#2@@177| |l#3@@175|) $o@@210 $f@@178))  (=> (and (not (= $o@@210 |l#0@@178|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@177| $o@@210) |l#2@@177|))) |l#3@@175|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4935| :pattern ( (MapType6Select (|lambda#203| |l#0@@178| |l#1@@177| |l#2@@177| |l#3@@175|) $o@@210 $f@@178)) )))
(assert (forall ((arg0@@550 T@U) (arg1@@399 T@U) (arg2@@329 T@U) (arg3@@275 Bool) ) (! (= (type (|lambda#204| arg0@@550 arg1@@399 arg2@@329 arg3@@275)) (MapType6Type refType boolType)) :qid |funType:lambda#204| :pattern ( (|lambda#204| arg0@@550 arg1@@399 arg2@@329 arg3@@275)) )))
(assert (forall ((|l#0@@179| T@U) (|l#1@@178| T@U) (|l#2@@178| T@U) (|l#3@@176| Bool) ($o@@211 T@U) ($f@@179 T@U) ) (! (let ((alpha@@186 (FieldTypeInv0 (type $f@@179)))) (=> (and (and (and (and (= (type |l#0@@179|) refType) (= (type |l#1@@178|) (MapType0Type refType MapType1Type))) (= (type |l#2@@178|) (FieldType boolType))) (= (type $o@@211) refType)) (= (type $f@@179) (FieldType alpha@@186))) (= (U_2_bool (MapType6Select (|lambda#204| |l#0@@179| |l#1@@178| |l#2@@178| |l#3@@176|) $o@@211 $f@@179))  (=> (and (not (= $o@@211 |l#0@@179|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@178| $o@@211) |l#2@@178|))) |l#3@@176|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4936| :pattern ( (MapType6Select (|lambda#204| |l#0@@179| |l#1@@178| |l#2@@178| |l#3@@176|) $o@@211 $f@@179)) )))
(assert (forall ((arg0@@551 T@U) (arg1@@400 T@U) (arg2@@330 T@U) (arg3@@276 Bool) ) (! (= (type (|lambda#205| arg0@@551 arg1@@400 arg2@@330 arg3@@276)) (MapType6Type refType boolType)) :qid |funType:lambda#205| :pattern ( (|lambda#205| arg0@@551 arg1@@400 arg2@@330 arg3@@276)) )))
(assert (forall ((|l#0@@180| T@U) (|l#1@@179| T@U) (|l#2@@179| T@U) (|l#3@@177| Bool) ($o@@212 T@U) ($f@@180 T@U) ) (! (let ((alpha@@187 (FieldTypeInv0 (type $f@@180)))) (=> (and (and (and (and (= (type |l#0@@180|) refType) (= (type |l#1@@179|) (MapType0Type refType MapType1Type))) (= (type |l#2@@179|) (FieldType boolType))) (= (type $o@@212) refType)) (= (type $f@@180) (FieldType alpha@@187))) (= (U_2_bool (MapType6Select (|lambda#205| |l#0@@180| |l#1@@179| |l#2@@179| |l#3@@177|) $o@@212 $f@@180))  (=> (and (not (= $o@@212 |l#0@@180|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@179| $o@@212) |l#2@@179|))) |l#3@@177|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4937| :pattern ( (MapType6Select (|lambda#205| |l#0@@180| |l#1@@179| |l#2@@179| |l#3@@177|) $o@@212 $f@@180)) )))
(assert (forall ((arg0@@552 T@U) (arg1@@401 T@U) (arg2@@331 T@U) (arg3@@277 Bool) ) (! (= (type (|lambda#206| arg0@@552 arg1@@401 arg2@@331 arg3@@277)) (MapType6Type refType boolType)) :qid |funType:lambda#206| :pattern ( (|lambda#206| arg0@@552 arg1@@401 arg2@@331 arg3@@277)) )))
(assert (forall ((|l#0@@181| T@U) (|l#1@@180| T@U) (|l#2@@180| T@U) (|l#3@@178| Bool) ($o@@213 T@U) ($f@@181 T@U) ) (! (let ((alpha@@188 (FieldTypeInv0 (type $f@@181)))) (=> (and (and (and (and (= (type |l#0@@181|) refType) (= (type |l#1@@180|) (MapType0Type refType MapType1Type))) (= (type |l#2@@180|) (FieldType boolType))) (= (type $o@@213) refType)) (= (type $f@@181) (FieldType alpha@@188))) (= (U_2_bool (MapType6Select (|lambda#206| |l#0@@181| |l#1@@180| |l#2@@180| |l#3@@178|) $o@@213 $f@@181))  (=> (and (not (= $o@@213 |l#0@@181|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@180| $o@@213) |l#2@@180|))) |l#3@@178|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4938| :pattern ( (MapType6Select (|lambda#206| |l#0@@181| |l#1@@180| |l#2@@180| |l#3@@178|) $o@@213 $f@@181)) )))
(assert (forall ((arg0@@553 T@U) (arg1@@402 T@U) (arg2@@332 T@U) (arg3@@278 Bool) ) (! (= (type (|lambda#207| arg0@@553 arg1@@402 arg2@@332 arg3@@278)) (MapType6Type refType boolType)) :qid |funType:lambda#207| :pattern ( (|lambda#207| arg0@@553 arg1@@402 arg2@@332 arg3@@278)) )))
(assert (forall ((|l#0@@182| T@U) (|l#1@@181| T@U) (|l#2@@181| T@U) (|l#3@@179| Bool) ($o@@214 T@U) ($f@@182 T@U) ) (! (let ((alpha@@189 (FieldTypeInv0 (type $f@@182)))) (=> (and (and (and (and (= (type |l#0@@182|) refType) (= (type |l#1@@181|) (MapType0Type refType MapType1Type))) (= (type |l#2@@181|) (FieldType boolType))) (= (type $o@@214) refType)) (= (type $f@@182) (FieldType alpha@@189))) (= (U_2_bool (MapType6Select (|lambda#207| |l#0@@182| |l#1@@181| |l#2@@181| |l#3@@179|) $o@@214 $f@@182))  (=> (and (not (= $o@@214 |l#0@@182|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@181| $o@@214) |l#2@@181|))) |l#3@@179|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4939| :pattern ( (MapType6Select (|lambda#207| |l#0@@182| |l#1@@181| |l#2@@181| |l#3@@179|) $o@@214 $f@@182)) )))
(assert (forall ((arg0@@554 T@U) (arg1@@403 T@U) (arg2@@333 T@U) (arg3@@279 Bool) ) (! (= (type (|lambda#208| arg0@@554 arg1@@403 arg2@@333 arg3@@279)) (MapType6Type refType boolType)) :qid |funType:lambda#208| :pattern ( (|lambda#208| arg0@@554 arg1@@403 arg2@@333 arg3@@279)) )))
(assert (forall ((|l#0@@183| T@U) (|l#1@@182| T@U) (|l#2@@182| T@U) (|l#3@@180| Bool) ($o@@215 T@U) ($f@@183 T@U) ) (! (let ((alpha@@190 (FieldTypeInv0 (type $f@@183)))) (=> (and (and (and (and (= (type |l#0@@183|) refType) (= (type |l#1@@182|) (MapType0Type refType MapType1Type))) (= (type |l#2@@182|) (FieldType boolType))) (= (type $o@@215) refType)) (= (type $f@@183) (FieldType alpha@@190))) (= (U_2_bool (MapType6Select (|lambda#208| |l#0@@183| |l#1@@182| |l#2@@182| |l#3@@180|) $o@@215 $f@@183))  (=> (and (not (= $o@@215 |l#0@@183|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@182| $o@@215) |l#2@@182|))) |l#3@@180|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4940| :pattern ( (MapType6Select (|lambda#208| |l#0@@183| |l#1@@182| |l#2@@182| |l#3@@180|) $o@@215 $f@@183)) )))
(assert (forall ((arg0@@555 T@U) (arg1@@404 T@U) (arg2@@334 T@U) (arg3@@280 Bool) ) (! (= (type (|lambda#209| arg0@@555 arg1@@404 arg2@@334 arg3@@280)) (MapType6Type refType boolType)) :qid |funType:lambda#209| :pattern ( (|lambda#209| arg0@@555 arg1@@404 arg2@@334 arg3@@280)) )))
(assert (forall ((|l#0@@184| T@U) (|l#1@@183| T@U) (|l#2@@183| T@U) (|l#3@@181| Bool) ($o@@216 T@U) ($f@@184 T@U) ) (! (let ((alpha@@191 (FieldTypeInv0 (type $f@@184)))) (=> (and (and (and (and (= (type |l#0@@184|) refType) (= (type |l#1@@183|) (MapType0Type refType MapType1Type))) (= (type |l#2@@183|) (FieldType boolType))) (= (type $o@@216) refType)) (= (type $f@@184) (FieldType alpha@@191))) (= (U_2_bool (MapType6Select (|lambda#209| |l#0@@184| |l#1@@183| |l#2@@183| |l#3@@181|) $o@@216 $f@@184))  (=> (and (not (= $o@@216 |l#0@@184|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@183| $o@@216) |l#2@@183|))) |l#3@@181|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4941| :pattern ( (MapType6Select (|lambda#209| |l#0@@184| |l#1@@183| |l#2@@183| |l#3@@181|) $o@@216 $f@@184)) )))
(assert (forall ((arg0@@556 T@U) (arg1@@405 T@U) (arg2@@335 T@U) (arg3@@281 Bool) ) (! (= (type (|lambda#210| arg0@@556 arg1@@405 arg2@@335 arg3@@281)) (MapType6Type refType boolType)) :qid |funType:lambda#210| :pattern ( (|lambda#210| arg0@@556 arg1@@405 arg2@@335 arg3@@281)) )))
(assert (forall ((|l#0@@185| T@U) (|l#1@@184| T@U) (|l#2@@184| T@U) (|l#3@@182| Bool) ($o@@217 T@U) ($f@@185 T@U) ) (! (let ((alpha@@192 (FieldTypeInv0 (type $f@@185)))) (=> (and (and (and (and (= (type |l#0@@185|) refType) (= (type |l#1@@184|) (MapType0Type refType MapType1Type))) (= (type |l#2@@184|) (FieldType boolType))) (= (type $o@@217) refType)) (= (type $f@@185) (FieldType alpha@@192))) (= (U_2_bool (MapType6Select (|lambda#210| |l#0@@185| |l#1@@184| |l#2@@184| |l#3@@182|) $o@@217 $f@@185))  (=> (and (not (= $o@@217 |l#0@@185|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@184| $o@@217) |l#2@@184|))) |l#3@@182|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4942| :pattern ( (MapType6Select (|lambda#210| |l#0@@185| |l#1@@184| |l#2@@184| |l#3@@182|) $o@@217 $f@@185)) )))
(assert (forall ((arg0@@557 T@U) (arg1@@406 T@U) (arg2@@336 T@U) (arg3@@282 Bool) ) (! (= (type (|lambda#211| arg0@@557 arg1@@406 arg2@@336 arg3@@282)) (MapType6Type refType boolType)) :qid |funType:lambda#211| :pattern ( (|lambda#211| arg0@@557 arg1@@406 arg2@@336 arg3@@282)) )))
(assert (forall ((|l#0@@186| T@U) (|l#1@@185| T@U) (|l#2@@185| T@U) (|l#3@@183| Bool) ($o@@218 T@U) ($f@@186 T@U) ) (! (let ((alpha@@193 (FieldTypeInv0 (type $f@@186)))) (=> (and (and (and (and (= (type |l#0@@186|) refType) (= (type |l#1@@185|) (MapType0Type refType MapType1Type))) (= (type |l#2@@185|) (FieldType boolType))) (= (type $o@@218) refType)) (= (type $f@@186) (FieldType alpha@@193))) (= (U_2_bool (MapType6Select (|lambda#211| |l#0@@186| |l#1@@185| |l#2@@185| |l#3@@183|) $o@@218 $f@@186))  (=> (and (not (= $o@@218 |l#0@@186|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@185| $o@@218) |l#2@@185|))) |l#3@@183|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4943| :pattern ( (MapType6Select (|lambda#211| |l#0@@186| |l#1@@185| |l#2@@185| |l#3@@183|) $o@@218 $f@@186)) )))
(assert (forall ((arg0@@558 T@U) (arg1@@407 T@U) (arg2@@337 T@U) (arg3@@283 Bool) ) (! (= (type (|lambda#212| arg0@@558 arg1@@407 arg2@@337 arg3@@283)) (MapType6Type refType boolType)) :qid |funType:lambda#212| :pattern ( (|lambda#212| arg0@@558 arg1@@407 arg2@@337 arg3@@283)) )))
(assert (forall ((|l#0@@187| T@U) (|l#1@@186| T@U) (|l#2@@186| T@U) (|l#3@@184| Bool) ($o@@219 T@U) ($f@@187 T@U) ) (! (let ((alpha@@194 (FieldTypeInv0 (type $f@@187)))) (=> (and (and (and (and (= (type |l#0@@187|) refType) (= (type |l#1@@186|) (MapType0Type refType MapType1Type))) (= (type |l#2@@186|) (FieldType boolType))) (= (type $o@@219) refType)) (= (type $f@@187) (FieldType alpha@@194))) (= (U_2_bool (MapType6Select (|lambda#212| |l#0@@187| |l#1@@186| |l#2@@186| |l#3@@184|) $o@@219 $f@@187))  (=> (and (not (= $o@@219 |l#0@@187|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@186| $o@@219) |l#2@@186|))) |l#3@@184|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4944| :pattern ( (MapType6Select (|lambda#212| |l#0@@187| |l#1@@186| |l#2@@186| |l#3@@184|) $o@@219 $f@@187)) )))
(assert (forall ((arg0@@559 T@U) (arg1@@408 T@U) (arg2@@338 T@U) (arg3@@284 Bool) ) (! (= (type (|lambda#213| arg0@@559 arg1@@408 arg2@@338 arg3@@284)) (MapType6Type refType boolType)) :qid |funType:lambda#213| :pattern ( (|lambda#213| arg0@@559 arg1@@408 arg2@@338 arg3@@284)) )))
(assert (forall ((|l#0@@188| T@U) (|l#1@@187| T@U) (|l#2@@187| T@U) (|l#3@@185| Bool) ($o@@220 T@U) ($f@@188 T@U) ) (! (let ((alpha@@195 (FieldTypeInv0 (type $f@@188)))) (=> (and (and (and (and (= (type |l#0@@188|) refType) (= (type |l#1@@187|) (MapType0Type refType MapType1Type))) (= (type |l#2@@187|) (FieldType boolType))) (= (type $o@@220) refType)) (= (type $f@@188) (FieldType alpha@@195))) (= (U_2_bool (MapType6Select (|lambda#213| |l#0@@188| |l#1@@187| |l#2@@187| |l#3@@185|) $o@@220 $f@@188))  (=> (and (not (= $o@@220 |l#0@@188|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@187| $o@@220) |l#2@@187|))) |l#3@@185|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4945| :pattern ( (MapType6Select (|lambda#213| |l#0@@188| |l#1@@187| |l#2@@187| |l#3@@185|) $o@@220 $f@@188)) )))
(assert (forall ((arg0@@560 T@U) (arg1@@409 T@U) (arg2@@339 T@U) (arg3@@285 Bool) ) (! (= (type (|lambda#214| arg0@@560 arg1@@409 arg2@@339 arg3@@285)) (MapType6Type refType boolType)) :qid |funType:lambda#214| :pattern ( (|lambda#214| arg0@@560 arg1@@409 arg2@@339 arg3@@285)) )))
(assert (forall ((|l#0@@189| T@U) (|l#1@@188| T@U) (|l#2@@188| T@U) (|l#3@@186| Bool) ($o@@221 T@U) ($f@@189 T@U) ) (! (let ((alpha@@196 (FieldTypeInv0 (type $f@@189)))) (=> (and (and (and (and (= (type |l#0@@189|) refType) (= (type |l#1@@188|) (MapType0Type refType MapType1Type))) (= (type |l#2@@188|) (FieldType boolType))) (= (type $o@@221) refType)) (= (type $f@@189) (FieldType alpha@@196))) (= (U_2_bool (MapType6Select (|lambda#214| |l#0@@189| |l#1@@188| |l#2@@188| |l#3@@186|) $o@@221 $f@@189))  (=> (and (not (= $o@@221 |l#0@@189|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@188| $o@@221) |l#2@@188|))) |l#3@@186|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4946| :pattern ( (MapType6Select (|lambda#214| |l#0@@189| |l#1@@188| |l#2@@188| |l#3@@186|) $o@@221 $f@@189)) )))
(assert (forall ((arg0@@561 T@U) (arg1@@410 T@U) (arg2@@340 T@U) (arg3@@286 Bool) ) (! (= (type (|lambda#215| arg0@@561 arg1@@410 arg2@@340 arg3@@286)) (MapType6Type refType boolType)) :qid |funType:lambda#215| :pattern ( (|lambda#215| arg0@@561 arg1@@410 arg2@@340 arg3@@286)) )))
(assert (forall ((|l#0@@190| T@U) (|l#1@@189| T@U) (|l#2@@189| T@U) (|l#3@@187| Bool) ($o@@222 T@U) ($f@@190 T@U) ) (! (let ((alpha@@197 (FieldTypeInv0 (type $f@@190)))) (=> (and (and (and (and (= (type |l#0@@190|) refType) (= (type |l#1@@189|) (MapType0Type refType MapType1Type))) (= (type |l#2@@189|) (FieldType boolType))) (= (type $o@@222) refType)) (= (type $f@@190) (FieldType alpha@@197))) (= (U_2_bool (MapType6Select (|lambda#215| |l#0@@190| |l#1@@189| |l#2@@189| |l#3@@187|) $o@@222 $f@@190))  (=> (and (not (= $o@@222 |l#0@@190|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@189| $o@@222) |l#2@@189|))) |l#3@@187|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4947| :pattern ( (MapType6Select (|lambda#215| |l#0@@190| |l#1@@189| |l#2@@189| |l#3@@187|) $o@@222 $f@@190)) )))
(assert (forall ((arg0@@562 T@U) (arg1@@411 T@U) (arg2@@341 T@U) (arg3@@287 Bool) ) (! (= (type (|lambda#216| arg0@@562 arg1@@411 arg2@@341 arg3@@287)) (MapType6Type refType boolType)) :qid |funType:lambda#216| :pattern ( (|lambda#216| arg0@@562 arg1@@411 arg2@@341 arg3@@287)) )))
(assert (forall ((|l#0@@191| T@U) (|l#1@@190| T@U) (|l#2@@190| T@U) (|l#3@@188| Bool) ($o@@223 T@U) ($f@@191 T@U) ) (! (let ((alpha@@198 (FieldTypeInv0 (type $f@@191)))) (=> (and (and (and (and (= (type |l#0@@191|) refType) (= (type |l#1@@190|) (MapType0Type refType MapType1Type))) (= (type |l#2@@190|) (FieldType boolType))) (= (type $o@@223) refType)) (= (type $f@@191) (FieldType alpha@@198))) (= (U_2_bool (MapType6Select (|lambda#216| |l#0@@191| |l#1@@190| |l#2@@190| |l#3@@188|) $o@@223 $f@@191))  (=> (and (not (= $o@@223 |l#0@@191|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@190| $o@@223) |l#2@@190|))) |l#3@@188|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4948| :pattern ( (MapType6Select (|lambda#216| |l#0@@191| |l#1@@190| |l#2@@190| |l#3@@188|) $o@@223 $f@@191)) )))
(assert (forall ((arg0@@563 T@U) (arg1@@412 T@U) (arg2@@342 T@U) (arg3@@288 Bool) ) (! (= (type (|lambda#217| arg0@@563 arg1@@412 arg2@@342 arg3@@288)) (MapType6Type refType boolType)) :qid |funType:lambda#217| :pattern ( (|lambda#217| arg0@@563 arg1@@412 arg2@@342 arg3@@288)) )))
(assert (forall ((|l#0@@192| T@U) (|l#1@@191| T@U) (|l#2@@191| T@U) (|l#3@@189| Bool) ($o@@224 T@U) ($f@@192 T@U) ) (! (let ((alpha@@199 (FieldTypeInv0 (type $f@@192)))) (=> (and (and (and (and (= (type |l#0@@192|) refType) (= (type |l#1@@191|) (MapType0Type refType MapType1Type))) (= (type |l#2@@191|) (FieldType boolType))) (= (type $o@@224) refType)) (= (type $f@@192) (FieldType alpha@@199))) (= (U_2_bool (MapType6Select (|lambda#217| |l#0@@192| |l#1@@191| |l#2@@191| |l#3@@189|) $o@@224 $f@@192))  (=> (and (not (= $o@@224 |l#0@@192|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@191| $o@@224) |l#2@@191|))) |l#3@@189|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4949| :pattern ( (MapType6Select (|lambda#217| |l#0@@192| |l#1@@191| |l#2@@191| |l#3@@189|) $o@@224 $f@@192)) )))
(assert (forall ((arg0@@564 T@U) (arg1@@413 T@U) (arg2@@343 T@U) (arg3@@289 Bool) ) (! (= (type (|lambda#218| arg0@@564 arg1@@413 arg2@@343 arg3@@289)) (MapType6Type refType boolType)) :qid |funType:lambda#218| :pattern ( (|lambda#218| arg0@@564 arg1@@413 arg2@@343 arg3@@289)) )))
(assert (forall ((|l#0@@193| T@U) (|l#1@@192| T@U) (|l#2@@192| T@U) (|l#3@@190| Bool) ($o@@225 T@U) ($f@@193 T@U) ) (! (let ((alpha@@200 (FieldTypeInv0 (type $f@@193)))) (=> (and (and (and (and (= (type |l#0@@193|) refType) (= (type |l#1@@192|) (MapType0Type refType MapType1Type))) (= (type |l#2@@192|) (FieldType boolType))) (= (type $o@@225) refType)) (= (type $f@@193) (FieldType alpha@@200))) (= (U_2_bool (MapType6Select (|lambda#218| |l#0@@193| |l#1@@192| |l#2@@192| |l#3@@190|) $o@@225 $f@@193))  (=> (and (not (= $o@@225 |l#0@@193|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@192| $o@@225) |l#2@@192|))) |l#3@@190|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4950| :pattern ( (MapType6Select (|lambda#218| |l#0@@193| |l#1@@192| |l#2@@192| |l#3@@190|) $o@@225 $f@@193)) )))
(assert (forall ((arg0@@565 T@U) (arg1@@414 T@U) (arg2@@344 T@U) (arg3@@290 Bool) ) (! (= (type (|lambda#219| arg0@@565 arg1@@414 arg2@@344 arg3@@290)) (MapType6Type refType boolType)) :qid |funType:lambda#219| :pattern ( (|lambda#219| arg0@@565 arg1@@414 arg2@@344 arg3@@290)) )))
(assert (forall ((|l#0@@194| T@U) (|l#1@@193| T@U) (|l#2@@193| T@U) (|l#3@@191| Bool) ($o@@226 T@U) ($f@@194 T@U) ) (! (let ((alpha@@201 (FieldTypeInv0 (type $f@@194)))) (=> (and (and (and (and (= (type |l#0@@194|) refType) (= (type |l#1@@193|) (MapType0Type refType MapType1Type))) (= (type |l#2@@193|) (FieldType boolType))) (= (type $o@@226) refType)) (= (type $f@@194) (FieldType alpha@@201))) (= (U_2_bool (MapType6Select (|lambda#219| |l#0@@194| |l#1@@193| |l#2@@193| |l#3@@191|) $o@@226 $f@@194))  (=> (and (not (= $o@@226 |l#0@@194|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@193| $o@@226) |l#2@@193|))) |l#3@@191|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4951| :pattern ( (MapType6Select (|lambda#219| |l#0@@194| |l#1@@193| |l#2@@193| |l#3@@191|) $o@@226 $f@@194)) )))
(assert (forall ((arg0@@566 T@U) (arg1@@415 T@U) (arg2@@345 T@U) (arg3@@291 Bool) ) (! (= (type (|lambda#220| arg0@@566 arg1@@415 arg2@@345 arg3@@291)) (MapType6Type refType boolType)) :qid |funType:lambda#220| :pattern ( (|lambda#220| arg0@@566 arg1@@415 arg2@@345 arg3@@291)) )))
(assert (forall ((|l#0@@195| T@U) (|l#1@@194| T@U) (|l#2@@194| T@U) (|l#3@@192| Bool) ($o@@227 T@U) ($f@@195 T@U) ) (! (let ((alpha@@202 (FieldTypeInv0 (type $f@@195)))) (=> (and (and (and (and (= (type |l#0@@195|) refType) (= (type |l#1@@194|) (MapType0Type refType MapType1Type))) (= (type |l#2@@194|) (FieldType boolType))) (= (type $o@@227) refType)) (= (type $f@@195) (FieldType alpha@@202))) (= (U_2_bool (MapType6Select (|lambda#220| |l#0@@195| |l#1@@194| |l#2@@194| |l#3@@192|) $o@@227 $f@@195))  (=> (and (not (= $o@@227 |l#0@@195|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@194| $o@@227) |l#2@@194|))) |l#3@@192|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4952| :pattern ( (MapType6Select (|lambda#220| |l#0@@195| |l#1@@194| |l#2@@194| |l#3@@192|) $o@@227 $f@@195)) )))
(assert (forall ((|l#0@@196| Int) (|l#1@@195| Int) (|l#2@@195| T@U) (|l#3@@193| T@U) (|l#4@@0| T@U) (|$y#0@@1| T@U) ) (!  (=> (and (and (and (= (type |l#2@@195|) (SeqType BoxType)) (= (type |l#3@@193|) (SeqType BoxType))) (= (type |l#4@@0|) (SeqType BoxType))) (= (type |$y#0@@1|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#221| |l#0@@196| |l#1@@195| |l#2@@195| |l#3@@193| |l#4@@0|) |$y#0@@1|)) (exists ((|j#0@@24| Int) ) (!  (and (and (and (<= |l#0@@196| |j#0@@24|) (< |j#0@@24| |l#1@@195|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| |l#2@@195| |j#0@@24|)))) (= |$y#0@@1| ($Box (int_2_U (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| |l#3@@193| |j#0@@24|))))))) :qid |MutableMapModelidfy.1760:9| :skolemid |4074| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |l#4@@0| |j#0@@24|))) )))) :qid |unknown.0:0| :skolemid |4953| :pattern ( (MapType0Select (|lambda#221| |l#0@@196| |l#1@@195| |l#2@@195| |l#3@@193| |l#4@@0|) |$y#0@@1|)) )))
(assert (forall ((arg0@@567 T@U) (arg1@@416 T@U) (arg2@@346 T@U) (arg3@@292 Bool) ) (! (= (type (|lambda#223| arg0@@567 arg1@@416 arg2@@346 arg3@@292)) (MapType6Type refType boolType)) :qid |funType:lambda#223| :pattern ( (|lambda#223| arg0@@567 arg1@@416 arg2@@346 arg3@@292)) )))
(assert (forall ((|l#0@@197| T@U) (|l#1@@196| T@U) (|l#2@@196| T@U) (|l#3@@194| Bool) ($o@@228 T@U) ($f@@196 T@U) ) (! (let ((alpha@@203 (FieldTypeInv0 (type $f@@196)))) (=> (and (and (and (and (= (type |l#0@@197|) refType) (= (type |l#1@@196|) (MapType0Type refType MapType1Type))) (= (type |l#2@@196|) (FieldType boolType))) (= (type $o@@228) refType)) (= (type $f@@196) (FieldType alpha@@203))) (= (U_2_bool (MapType6Select (|lambda#223| |l#0@@197| |l#1@@196| |l#2@@196| |l#3@@194|) $o@@228 $f@@196))  (=> (and (not (= $o@@228 |l#0@@197|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@196| $o@@228) |l#2@@196|))) |l#3@@194|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4954| :pattern ( (MapType6Select (|lambda#223| |l#0@@197| |l#1@@196| |l#2@@196| |l#3@@194|) $o@@228 $f@@196)) )))
(assert (forall ((arg0@@568 T@U) (arg1@@417 T@U) (arg2@@347 T@U) (arg3@@293 Bool) ) (! (= (type (|lambda#224| arg0@@568 arg1@@417 arg2@@347 arg3@@293)) (MapType6Type refType boolType)) :qid |funType:lambda#224| :pattern ( (|lambda#224| arg0@@568 arg1@@417 arg2@@347 arg3@@293)) )))
(assert (forall ((|l#0@@198| T@U) (|l#1@@197| T@U) (|l#2@@197| T@U) (|l#3@@195| Bool) ($o@@229 T@U) ($f@@197 T@U) ) (! (let ((alpha@@204 (FieldTypeInv0 (type $f@@197)))) (=> (and (and (and (and (= (type |l#0@@198|) refType) (= (type |l#1@@197|) (MapType0Type refType MapType1Type))) (= (type |l#2@@197|) (FieldType boolType))) (= (type $o@@229) refType)) (= (type $f@@197) (FieldType alpha@@204))) (= (U_2_bool (MapType6Select (|lambda#224| |l#0@@198| |l#1@@197| |l#2@@197| |l#3@@195|) $o@@229 $f@@197))  (=> (and (not (= $o@@229 |l#0@@198|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@197| $o@@229) |l#2@@197|))) |l#3@@195|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4955| :pattern ( (MapType6Select (|lambda#224| |l#0@@198| |l#1@@197| |l#2@@197| |l#3@@195|) $o@@229 $f@@197)) )))
(assert (forall ((arg0@@569 T@U) (arg1@@418 T@U) (arg2@@348 T@U) (arg3@@294 Bool) ) (! (= (type (|lambda#226| arg0@@569 arg1@@418 arg2@@348 arg3@@294)) (MapType6Type refType boolType)) :qid |funType:lambda#226| :pattern ( (|lambda#226| arg0@@569 arg1@@418 arg2@@348 arg3@@294)) )))
(assert (forall ((|l#0@@199| T@U) (|l#1@@198| T@U) (|l#2@@198| T@U) (|l#3@@196| Bool) ($o@@230 T@U) ($f@@198 T@U) ) (! (let ((alpha@@205 (FieldTypeInv0 (type $f@@198)))) (=> (and (and (and (and (= (type |l#0@@199|) refType) (= (type |l#1@@198|) (MapType0Type refType MapType1Type))) (= (type |l#2@@198|) (FieldType boolType))) (= (type $o@@230) refType)) (= (type $f@@198) (FieldType alpha@@205))) (= (U_2_bool (MapType6Select (|lambda#226| |l#0@@199| |l#1@@198| |l#2@@198| |l#3@@196|) $o@@230 $f@@198))  (=> (and (not (= $o@@230 |l#0@@199|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@198| $o@@230) |l#2@@198|))) |l#3@@196|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4956| :pattern ( (MapType6Select (|lambda#226| |l#0@@199| |l#1@@198| |l#2@@198| |l#3@@196|) $o@@230 $f@@198)) )))
(assert (forall ((arg0@@570 T@U) (arg1@@419 T@U) (arg2@@349 T@U) (arg3@@295 Bool) ) (! (= (type (|lambda#227| arg0@@570 arg1@@419 arg2@@349 arg3@@295)) (MapType6Type refType boolType)) :qid |funType:lambda#227| :pattern ( (|lambda#227| arg0@@570 arg1@@419 arg2@@349 arg3@@295)) )))
(assert (forall ((|l#0@@200| T@U) (|l#1@@199| T@U) (|l#2@@199| T@U) (|l#3@@197| Bool) ($o@@231 T@U) ($f@@199 T@U) ) (! (let ((alpha@@206 (FieldTypeInv0 (type $f@@199)))) (=> (and (and (and (and (= (type |l#0@@200|) refType) (= (type |l#1@@199|) (MapType0Type refType MapType1Type))) (= (type |l#2@@199|) (FieldType boolType))) (= (type $o@@231) refType)) (= (type $f@@199) (FieldType alpha@@206))) (= (U_2_bool (MapType6Select (|lambda#227| |l#0@@200| |l#1@@199| |l#2@@199| |l#3@@197|) $o@@231 $f@@199))  (=> (and (not (= $o@@231 |l#0@@200|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@199| $o@@231) |l#2@@199|))) |l#3@@197|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4957| :pattern ( (MapType6Select (|lambda#227| |l#0@@200| |l#1@@199| |l#2@@199| |l#3@@197|) $o@@231 $f@@199)) )))
(assert (forall ((arg0@@571 T@U) (arg1@@420 T@U) (arg2@@350 T@U) (arg3@@296 Bool) ) (! (= (type (|lambda#228| arg0@@571 arg1@@420 arg2@@350 arg3@@296)) (MapType6Type refType boolType)) :qid |funType:lambda#228| :pattern ( (|lambda#228| arg0@@571 arg1@@420 arg2@@350 arg3@@296)) )))
(assert (forall ((|l#0@@201| T@U) (|l#1@@200| T@U) (|l#2@@200| T@U) (|l#3@@198| Bool) ($o@@232 T@U) ($f@@200 T@U) ) (! (let ((alpha@@207 (FieldTypeInv0 (type $f@@200)))) (=> (and (and (and (and (= (type |l#0@@201|) refType) (= (type |l#1@@200|) (MapType0Type refType MapType1Type))) (= (type |l#2@@200|) (FieldType boolType))) (= (type $o@@232) refType)) (= (type $f@@200) (FieldType alpha@@207))) (= (U_2_bool (MapType6Select (|lambda#228| |l#0@@201| |l#1@@200| |l#2@@200| |l#3@@198|) $o@@232 $f@@200))  (=> (and (not (= $o@@232 |l#0@@201|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@200| $o@@232) |l#2@@200|))) |l#3@@198|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4958| :pattern ( (MapType6Select (|lambda#228| |l#0@@201| |l#1@@200| |l#2@@200| |l#3@@198|) $o@@232 $f@@200)) )))
(assert (forall ((arg0@@572 T@U) (arg1@@421 T@U) (arg2@@351 T@U) (arg3@@297 Bool) ) (! (= (type (|lambda#229| arg0@@572 arg1@@421 arg2@@351 arg3@@297)) (MapType6Type refType boolType)) :qid |funType:lambda#229| :pattern ( (|lambda#229| arg0@@572 arg1@@421 arg2@@351 arg3@@297)) )))
(assert (forall ((|l#0@@202| T@U) (|l#1@@201| T@U) (|l#2@@201| T@U) (|l#3@@199| Bool) ($o@@233 T@U) ($f@@201 T@U) ) (! (let ((alpha@@208 (FieldTypeInv0 (type $f@@201)))) (=> (and (and (and (and (= (type |l#0@@202|) refType) (= (type |l#1@@201|) (MapType0Type refType MapType1Type))) (= (type |l#2@@201|) (FieldType boolType))) (= (type $o@@233) refType)) (= (type $f@@201) (FieldType alpha@@208))) (= (U_2_bool (MapType6Select (|lambda#229| |l#0@@202| |l#1@@201| |l#2@@201| |l#3@@199|) $o@@233 $f@@201))  (=> (and (not (= $o@@233 |l#0@@202|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@201| $o@@233) |l#2@@201|))) |l#3@@199|)))) :qid |DafnyPreludebpl.129:1| :skolemid |4959| :pattern ( (MapType6Select (|lambda#229| |l#0@@202| |l#1@@201| |l#2@@201| |l#3@@199|) $o@@233 $f@@201)) )))
(assert (forall ((|l#0@@203| T@U) (|l#1@@202| T@U) (|l#2@@202| Int) (|$y#0@@2| T@U) ) (!  (=> (and (and (= (type |l#0@@203|) TyType) (= (type |l#1@@202|) (MapType0Type BoxType intType))) (= (type |$y#0@@2|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#230| |l#0@@203| |l#1@@202| |l#2@@202|) |$y#0@@2|))  (and ($IsBox |$y#0@@2| |l#0@@203|) (> (U_2_int (MapType0Select |l#1@@202| |$y#0@@2|)) |l#2@@202|)))) :qid |unknown.0:0| :skolemid |4960| :pattern ( (MapType0Select (|lambda#230| |l#0@@203| |l#1@@202| |l#2@@202|) |$y#0@@2|)) )))
(assert (forall ((|l#0@@204| T@U) (|l#1@@203| T@U) (|$y#0@@3| T@U) ) (!  (=> (and (and (= (type |l#0@@204|) TyType) (= (type |l#1@@203|) (MapType0Type BoxType boolType))) (= (type |$y#0@@3|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#232| |l#0@@204| |l#1@@203|) |$y#0@@3|))  (and ($IsBox |$y#0@@3| |l#0@@204|) (U_2_bool (MapType0Select |l#1@@203| |$y#0@@3|))))) :qid |unknown.0:0| :skolemid |4961| :pattern ( (MapType0Select (|lambda#232| |l#0@@204| |l#1@@203|) |$y#0@@3|)) )))
(assert (forall ((|l#0@@205| T@U) (|l#1@@204| T@U) (|l#2@@203| T@U) (|$w#0| T@U) ) (!  (=> (and (and (and (= (type |l#0@@205|) TyType) (= (type |l#1@@204|) (MapType0Type BoxType boolType))) (= (type |l#2@@203|) BoxType)) (= (type |$w#0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#241| |l#0@@205| |l#1@@204| |l#2@@203|) |$w#0|))  (and ($IsBox |$w#0| |l#0@@205|) (and (U_2_bool (MapType0Select |l#1@@204| |$w#0|)) (not (= |$w#0| |l#2@@203|)))))) :qid |unknown.0:0| :skolemid |4962| :pattern ( (MapType0Select (|lambda#241| |l#0@@205| |l#1@@204| |l#2@@203|) |$w#0|)) )))
(assert (forall ((|l#0@@206| T@U) (|l#1@@205| T@U) (|l#2@@204| T@U) (|$w#0@@0| T@U) ) (!  (=> (and (and (and (= (type |l#0@@206|) TyType) (= (type |l#1@@205|) (MapType0Type BoxType boolType))) (= (type |l#2@@204|) (MapType0Type BoxType boolType))) (= (type |$w#0@@0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#247| |l#0@@206| |l#1@@205| |l#2@@204|) |$w#0@@0|))  (and ($IsBox |$w#0@@0| |l#0@@206|) (and (U_2_bool (MapType0Select |l#1@@205| |$w#0@@0|)) (not (U_2_bool (MapType0Select |l#2@@204| |$w#0@@0|))))))) :qid |unknown.0:0| :skolemid |4963| :pattern ( (MapType0Select (|lambda#247| |l#0@@206| |l#1@@205| |l#2@@204|) |$w#0@@0|)) )))
(assert (forall ((|l#0@@207| T@U) (|l#1@@206| T@U) (|l#2@@205| T@U) (|$w#0@@1| T@U) ) (!  (=> (and (and (and (= (type |l#0@@207|) TyType) (= (type |l#1@@206|) (MapType0Type BoxType boolType))) (= (type |l#2@@205|) (MapType0Type BoxType boolType))) (= (type |$w#0@@1|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#259| |l#0@@207| |l#1@@206| |l#2@@205|) |$w#0@@1|))  (and ($IsBox |$w#0@@1| |l#0@@207|) (and (U_2_bool (MapType0Select |l#1@@206| |$w#0@@1|)) (U_2_bool (MapType0Select |l#2@@205| |$w#0@@1|)))))) :qid |unknown.0:0| :skolemid |4964| :pattern ( (MapType0Select (|lambda#259| |l#0@@207| |l#1@@206| |l#2@@205|) |$w#0@@1|)) )))
(assert (forall ((|l#0@@208| T@U) (|l#1@@207| T@U) (|l#2@@206| T@U) (|$w#0@@2| T@U) ) (!  (=> (and (and (and (= (type |l#0@@208|) (MapType0Type BoxType boolType)) (= (type |l#1@@207|) (MapType0Type BoxType BoxType))) (= (type |l#2@@206|) (MapType0Type BoxType BoxType))) (= (type |$w#0@@2|) BoxType)) (= (MapType0Select (|lambda#274| |l#0@@208| |l#1@@207| |l#2@@206|) |$w#0@@2|) (ite (U_2_bool (MapType0Select |l#0@@208| |$w#0@@2|)) (MapType0Select |l#1@@207| |$w#0@@2|) (MapType0Select |l#2@@206| |$w#0@@2|)))) :qid |Mapsidfy.115:52| :skolemid |4965| :pattern ( (MapType0Select (|lambda#274| |l#0@@208| |l#1@@207| |l#2@@206|) |$w#0@@2|)) )))
(assert (forall ((|l#0@@209| T@U) (|l#1@@208| T@U) (|l#2@@207| T@U) (|l#3@@200| T@U) (|l#4@@1| T@U) (|$w#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type |l#0@@209|) (MapType0Type BoxType boolType)) (= (type |l#1@@208|) (MapType0Type BoxType BoxType))) (= (type |l#2@@207|) (MapType0Type BoxType boolType))) (= (type |l#3@@200|) (MapType0Type BoxType BoxType))) (= (type |l#4@@1|) (MapType0Type BoxType BoxType))) (= (type |$w#0@@3|) BoxType)) (= (MapType0Select (|lambda#294| |l#0@@209| |l#1@@208| |l#2@@207| |l#3@@200| |l#4@@1|) |$w#0@@3|) (ite (U_2_bool (MapType0Select |l#0@@209| |$w#0@@3|)) (MapType0Select |l#1@@208| |$w#0@@3|) (ite (U_2_bool (MapType0Select |l#2@@207| |$w#0@@3|)) (MapType0Select |l#3@@200| |$w#0@@3|) (MapType0Select |l#4@@1| |$w#0@@3|))))) :qid |Mapsidfy.190:9| :skolemid |4966| :pattern ( (MapType0Select (|lambda#294| |l#0@@209| |l#1@@208| |l#2@@207| |l#3@@200| |l#4@@1|) |$w#0@@3|)) )))
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |i#0@@115| () Int)
(declare-fun |self#0@@200| () T@U)
(declare-fun |item#0@0| () T@U)
(declare-fun |j#1_0_0@0| () Int)
(declare-fun |##elementsLength#1_0_1@0| () Int)
(declare-fun $Heap@0 () T@U)
(declare-fun |##slot#1_0_1@0| () T@U)
(declare-fun |underlying##1_0_0@0| () T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun MutableMapModel._default.LemmaReallocIterateResult$V () T@U)
(declare-fun $Heap@6 () T@U)
(declare-fun |j#1_0_1@0| () Int)
(declare-fun |##elementsLength#1_0_0@0| () Int)
(declare-fun |##slot#1_0_0@0| () T@U)
(declare-fun |newtype$check#1_0_0@0| () Int)
(declare-fun |newUnderlying#0@@7| () T@U)
(declare-fun |key#1_1@0| () Int)
(declare-fun |slot#1_1_0@0| () T@U)
(declare-fun |##elementsLength#1_1_1@0| () Int)
(declare-fun $Heap@3 () T@U)
(declare-fun |##elementsLength#1_1_0@0| () Int)
(declare-fun |##slot#1_1_0@0| () T@U)
(declare-fun |slot#1_3@0| () T@U)
(declare-fun |##elementsLength#1_0@0| () Int)
(declare-fun |newUnderlying'#2@1| () T@U)
(declare-fun |dt_update_tmp#1#Z#0_0@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |let#0_0#0#0| () T@U)
(declare-fun |dt_update#underlying#1#Z#0_0@0| () T@U)
(declare-fun |let#0_1#0#0| () T@U)
(declare-fun |self'#0_0@0| () T@U)
(declare-fun |##contents#0_0@0| () T@U)
(declare-fun |##elements#0_1@0| () T@U)
(declare-fun |newtype$check#0_2@0| () Int)
(declare-fun |newtype$check#0_3@0| () Int)
(declare-fun |key#0_2@0| () Int)
(declare-fun |key#0_0@0| () Int)
(declare-fun |##elements#0_0@0| () T@U)
(declare-fun |transferredContents#0| () T@U)
(declare-fun |newtype$check#0_1@0| () Int)
(declare-fun |newtype$check#17@0| () Int)
(declare-fun |newtype$check#18@0| () Int)
(declare-fun |##elements#4@0| () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun |transferredContents'#0@2| () T@U)
(declare-fun |newtype$check#19@0| () Int)
(declare-fun |newtype$check#20@0| () Int)
(declare-fun |i##0@0| () Int)
(declare-fun |newUnderlying'#2@2| () T@U)
(declare-fun |newSize#0@@1| () Int)
(declare-fun $Heap@5 () T@U)
(declare-fun |newtype$check#1_3@0| () Int)
(declare-fun |transferredContents'#0@1| () T@U)
(declare-fun |newtype$check#1_4@0| () Int)
(declare-fun |newtype$check#1_5@0| () Int)
(declare-fun |##elements#1_1@0| () T@U)
(declare-fun |a##1_0@0| () T@U)
(declare-fun |b##1_0@0| () T@U)
(declare-fun call0formal@Sets._default.SetInclusionImpliesSmallerCardinality$T@0 () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun |newtype$check#1_1@0| () Int)
(declare-fun |key##1_0@0| () Int)
(declare-fun |value##1_0@0| () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.FixedSizeInsert () T@U)
(declare-fun |##key#1_0@0| () Int)
(declare-fun |##value#1_0@0| () T@U)
(declare-fun |##elements#1_0@0| () T@U)
(declare-fun |newtype$check#1_0@0| () Int)
(declare-fun |newtype$check#14@0| () Int)
(declare-fun |newtype$check#15@0| () Int)
(declare-fun |newtype$check#16@0| () Int)
(declare-fun |##elements#3@0| () T@U)
(declare-fun |slot#40@0| () T@U)
(declare-fun |##elementsLength#1@0| () Int)
(declare-fun |key#29@0| () Int)
(declare-fun |newtype$check#11@0| () Int)
(declare-fun |newtype$check#12@0| () Int)
(declare-fun |newUnderlying'#2@0| () T@U)
(declare-fun |transferredContents'#0@0| () T@U)
(declare-fun StartFuel_Sequences._default.Range () T@U)
(declare-fun StartFuelAssert_Sequences._default.Range () T@U)
(declare-fun StartFuel_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuelAssert_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuel_Sequences._default.remove () T@U)
(declare-fun StartFuelAssert_Sequences._default.remove () T@U)
(declare-fun StartFuel_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuelAssert_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuel_Sequences._default.insert () T@U)
(declare-fun StartFuelAssert_Sequences._default.insert () T@U)
(declare-fun StartFuel_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuel_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuel_Sequences._default.concat () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat () T@U)
(declare-fun StartFuel_Sequences._default.concat3 () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat3 () T@U)
(declare-fun StartFuel_Sequences._default.concatSeq () T@U)
(declare-fun StartFuelAssert_Sequences._default.concatSeq () T@U)
(declare-fun StartFuel_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuel_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuel_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Zip () T@U)
(declare-fun StartFuel_Sequences._default.Unzip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Sequences._default.Flatten () T@U)
(declare-fun StartFuelAssert_Sequences._default.Flatten () T@U)
(declare-fun StartFuel_Sequences._default.seqMax () T@U)
(declare-fun StartFuelAssert_Sequences._default.seqMax () T@U)
(declare-fun StartFuel_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_Sequences._default.fill () T@U)
(declare-fun StartFuel_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuel_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.IMapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnion () T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.lshift () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.rshift () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.bitnot () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.bitxor () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.hash64 () T@U)
(declare-fun StartFuel_MutableMapModel._default.getEmptyWitness () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.getEmptyWitness () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.Probe () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.FixedSizeGet () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.FixedSizeRemove () T@U)
(declare-fun StartFuel_MutableMapModel._default.Constructor () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.Constructor () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.ReallocInternal () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.InsertAndGetOld () T@U)
(declare-fun StartFuel_MutableMapModel._default.Insert () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.Insert () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.IterStart () T@U)
(declare-fun StartFuel_MutableMapModel._default.SimpleIterStart () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.SimpleIterStart () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.IterInc () T@U)
(declare-fun StartFuel_MutableMapModel._default.SimpleIterInc () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.SimpleIterInc () T@U)
(declare-fun StartFuel_MutableMapModel._default.MaxKey () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.MaxKey () T@U)
(declare-fun StartFuel_MutableMapModel._default.UpdateByIter () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.UpdateByIter () T@U)
(declare-fun StartFuel_MutableMapModel._default.FindSimpleIter () T@U)
(declare-fun StartFuelAssert_MutableMapModel._default.FindSimpleIter () T@U)
(declare-fun $Heap@@40 () T@U)
(declare-fun |self'#0_0| () T@U)
(declare-fun |item#0@@9| () T@U)
(declare-fun |newUnderlying'#2@@1| () T@U)
(declare-fun |transferredContents'#0| () T@U)
(declare-fun |j#1_0_0| () Int)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type MutableMapModel._default.LemmaReallocIterateResult$V) TyType) (= (type |self#0@@200|) DatatypeTypeType)) (= (type |newUnderlying#0@@7|) DatatypeTypeType)) (= (type |##elements#4@0|) (SeqType BoxType))) (= (type $Heap@4) (MapType0Type refType MapType1Type))) (= (type |transferredContents'#0@2|) (MapType BoxType BoxType))) (= (type $_Frame@0) (MapType6Type refType boolType))) (= (type |newUnderlying'#2@2|) DatatypeTypeType)) (= (type $Heap@5) (MapType0Type refType MapType1Type))) (= (type |transferredContents#0|) (MapType BoxType BoxType))) (= (type |##elements#3@0|) (SeqType BoxType))) (= (type $Heap@0) (MapType0Type refType MapType1Type))) (= (type |slot#40@0|) DatatypeTypeType)) (= (type |item#0@0|) DatatypeTypeType)) (= (type |newUnderlying'#2@1|) DatatypeTypeType)) (= (type |transferredContents'#0@1|) (MapType BoxType BoxType))) (= (type |##elements#1_1@0|) (SeqType BoxType))) (= (type $Heap@3) (MapType0Type refType MapType1Type))) (= (type |slot#1_3@0|) DatatypeTypeType)) (= (type |slot#1_1_0@0|) DatatypeTypeType)) (= (type |##slot#1_1_0@0|) DatatypeTypeType)) (= (type |a##1_0@0|) (MapType0Type BoxType boolType))) (= (type |b##1_0@0|) (MapType0Type BoxType boolType))) (= (type call0formal@Sets._default.SetInclusionImpliesSmallerCardinality$T@0) TyType)) (= (type $Heap@2) (MapType0Type refType MapType1Type))) (= (type |value##1_0@0|) BoxType)) (= (type StartFuelAssert_MutableMapModel._default.FixedSizeInsert) LayerTypeType)) (= (type |##value#1_0@0|) BoxType)) (= (type |##slot#1_0_1@0|) DatatypeTypeType)) (= (type |underlying##1_0_0@0|) DatatypeTypeType)) (= (type $Heap@6) (MapType0Type refType MapType1Type))) (= (type |##slot#1_0_0@0|) DatatypeTypeType)) (= (type |##elements#1_0@0|) (SeqType BoxType))) (= (type |newUnderlying'#2@0|) DatatypeTypeType)) (= (type |transferredContents'#0@0|) (MapType BoxType BoxType))) (= (type |dt_update_tmp#1#Z#0_0@0|) DatatypeTypeType)) (= (type $Heap@1) (MapType0Type refType MapType1Type))) (= (type |let#0_0#0#0|) DatatypeTypeType)) (= (type |dt_update#underlying#1#Z#0_0@0|) DatatypeTypeType)) (= (type |let#0_1#0#0|) DatatypeTypeType)) (= (type |self'#0_0@0|) DatatypeTypeType)) (= (type |##contents#0_0@0|) (MapType BoxType BoxType))) (= (type |##elements#0_1@0|) (SeqType BoxType))) (= (type |##elements#0_0@0|) (SeqType BoxType))) (= (type StartFuel_Sequences._default.Range) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Range) LayerTypeType)) (= (type StartFuel_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuel_Sequences._default.remove) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.remove) LayerTypeType)) (= (type StartFuel_Sequences._default.RemoveOneValue) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.RemoveOneValue) LayerTypeType)) (= (type StartFuel_Sequences._default.insert) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.insert) LayerTypeType)) (= (type StartFuel_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuel_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuel_Sequences._default.concat) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat) LayerTypeType)) (= (type StartFuel_Sequences._default.concat3) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat3) LayerTypeType)) (= (type StartFuel_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuel_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuel_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexIterate) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuel_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Zip) LayerTypeType)) (= (type StartFuel_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuel_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuel_Sequences._default.seqMax) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.seqMax) LayerTypeType)) (= (type StartFuel_Sequences._default.fill) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.fill) LayerTypeType)) (= (type StartFuel_Maps._default.MapRemoveStrong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemoveStrong) LayerTypeType)) (= (type StartFuel_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuel_Maps._default.IMapRemove) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove) LayerTypeType)) (= (type StartFuel_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuel_Maps._default.MapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuel_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.lshift) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.rshift) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.bitnot) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.bitxor) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.hash64) LayerTypeType)) (= (type StartFuel_MutableMapModel._default.getEmptyWitness) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.getEmptyWitness) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.Probe) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.FixedSizeGet) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.FixedSizeRemove) LayerTypeType)) (= (type StartFuel_MutableMapModel._default.Constructor) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.Constructor) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.ReallocInternal) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.InsertAndGetOld) LayerTypeType)) (= (type StartFuel_MutableMapModel._default.Insert) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.Insert) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.IterStart) LayerTypeType)) (= (type StartFuel_MutableMapModel._default.SimpleIterStart) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.SimpleIterStart) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.IterInc) LayerTypeType)) (= (type StartFuel_MutableMapModel._default.SimpleIterInc) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.SimpleIterInc) LayerTypeType)) (= (type StartFuel_MutableMapModel._default.MaxKey) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.MaxKey) LayerTypeType)) (= (type StartFuel_MutableMapModel._default.UpdateByIter) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.UpdateByIter) LayerTypeType)) (= (type StartFuel_MutableMapModel._default.FindSimpleIter) LayerTypeType)) (= (type StartFuelAssert_MutableMapModel._default.FindSimpleIter) LayerTypeType)) (= (type $Heap@@40) (MapType0Type refType MapType1Type))) (= (type |self'#0_0|) DatatypeTypeType)) (= (type |item#0@@9|) DatatypeTypeType)) (= (type |newUnderlying'#2@@1|) DatatypeTypeType)) (= (type |transferredContents'#0|) (MapType BoxType BoxType))))
(push 1)
(set-info :boogie-vc-id Impl$$MutableMapModel.__default.LemmaReallocIterateResult)
(assert (not (=> (= (ControlFlow 0 0) 1175182) (let ((anon23_correct  (and (=> (= (ControlFlow 0 321260) (- 0 1195315)) (or (and ($Is (int_2_U (- |i#0@@115| 1)) Tclass.NativeTypes.uint64) (and (and (and (and (<= (LitInt 0) (- |i#0@@115| 1)) (< (- |i#0@@115| 1) |i#0@@115|)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|#MutableMapModel.Slot.Slot| (- |i#0@@115| 1)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| (- |i#0@@115| 1))))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| (- |i#0@@115| 1)))))) (MutableMapModel.Item.key |item#0@0|)))) (or (and ($Is (int_2_U (LitInt 0)) Tclass.NativeTypes.uint64) (and (and (and (and (<= (LitInt 0) (LitInt 0)) (< 0 |i#0@@115|)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (Lit (|#MutableMapModel.Slot.Slot| (LitInt 0))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (LitInt (MutableMapModel.Slot.slot (Lit (|#MutableMapModel.Slot.Slot| (LitInt 0))))))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (LitInt (MutableMapModel.Slot.slot (Lit (|#MutableMapModel.Slot.Slot| (LitInt 0)))))))) (MutableMapModel.Item.key |item#0@0|)))) (or (and ($Is (int_2_U (LitInt (- 18446744073709551616 1))) Tclass.NativeTypes.uint64) (and (and (and (and (<= (LitInt 0) (LitInt (- 18446744073709551616 1))) (< (- 18446744073709551616 1) |i#0@@115|)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (Lit (|#MutableMapModel.Slot.Slot| (LitInt (- 18446744073709551616 1)))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (LitInt (MutableMapModel.Slot.slot (Lit (|#MutableMapModel.Slot.Slot| (LitInt (- 18446744073709551616 1)))))))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (LitInt (MutableMapModel.Slot.slot (Lit (|#MutableMapModel.Slot.Slot| (LitInt (- 18446744073709551616 1))))))))) (MutableMapModel.Item.key |item#0@0|)))) (or (and ($Is (int_2_U (LitInt 0)) Tclass.NativeTypes.uint64) (and (and (and (and (<= (LitInt 0) (LitInt 0)) (< 0 |i#0@@115|)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (Lit (|#MutableMapModel.Slot.Slot| (LitInt 0))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (LitInt (MutableMapModel.Slot.slot (Lit (|#MutableMapModel.Slot.Slot| (LitInt 0))))))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (LitInt (MutableMapModel.Slot.slot (Lit (|#MutableMapModel.Slot.Slot| (LitInt 0)))))))) (MutableMapModel.Item.key |item#0@0|)))) (or (and ($Is (int_2_U (LitInt 0)) Tclass.NativeTypes.uint64) (and (and (and (and (<= (LitInt 0) (LitInt 0)) (< 0 |i#0@@115|)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (Lit (|#MutableMapModel.Slot.Slot| (LitInt 0))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (LitInt (MutableMapModel.Slot.slot (Lit (|#MutableMapModel.Slot.Slot| (LitInt 0))))))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (LitInt (MutableMapModel.Slot.slot (Lit (|#MutableMapModel.Slot.Slot| (LitInt 0)))))))) (MutableMapModel.Item.key |item#0@0|)))) (exists ((|$as#j1_0_0#1_0_0| Int) ) (!  (and (and (<= (LitInt 0) |$as#j1_0_0#1_0_0|) (< |$as#j1_0_0#1_0_0| 18446744073709551616)) (and (and (and (and (<= (LitInt 0) |$as#j1_0_0#1_0_0|) (< |$as#j1_0_0#1_0_0| |i#0@@115|)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|#MutableMapModel.Slot.Slot| |$as#j1_0_0#1_0_0|))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |$as#j1_0_0#1_0_0|)))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |$as#j1_0_0#1_0_0|))))) (MutableMapModel.Item.key |item#0@0|)))) :qid |MutableMapModelidfy.1129:13| :skolemid |2828| )))))))) (=> (or (and ($Is (int_2_U (- |i#0@@115| 1)) Tclass.NativeTypes.uint64) (and (and (and (and (<= (LitInt 0) (- |i#0@@115| 1)) (< (- |i#0@@115| 1) |i#0@@115|)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|#MutableMapModel.Slot.Slot| (- |i#0@@115| 1)))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| (- |i#0@@115| 1))))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| (- |i#0@@115| 1)))))) (MutableMapModel.Item.key |item#0@0|)))) (or (and ($Is (int_2_U (LitInt 0)) Tclass.NativeTypes.uint64) (and (and (and (and (<= (LitInt 0) (LitInt 0)) (< 0 |i#0@@115|)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (Lit (|#MutableMapModel.Slot.Slot| (LitInt 0))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (LitInt (MutableMapModel.Slot.slot (Lit (|#MutableMapModel.Slot.Slot| (LitInt 0))))))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (LitInt (MutableMapModel.Slot.slot (Lit (|#MutableMapModel.Slot.Slot| (LitInt 0)))))))) (MutableMapModel.Item.key |item#0@0|)))) (or (and ($Is (int_2_U (LitInt (- 18446744073709551616 1))) Tclass.NativeTypes.uint64) (and (and (and (and (<= (LitInt 0) (LitInt (- 18446744073709551616 1))) (< (- 18446744073709551616 1) |i#0@@115|)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (Lit (|#MutableMapModel.Slot.Slot| (LitInt (- 18446744073709551616 1)))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (LitInt (MutableMapModel.Slot.slot (Lit (|#MutableMapModel.Slot.Slot| (LitInt (- 18446744073709551616 1)))))))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (LitInt (MutableMapModel.Slot.slot (Lit (|#MutableMapModel.Slot.Slot| (LitInt (- 18446744073709551616 1))))))))) (MutableMapModel.Item.key |item#0@0|)))) (or (and ($Is (int_2_U (LitInt 0)) Tclass.NativeTypes.uint64) (and (and (and (and (<= (LitInt 0) (LitInt 0)) (< 0 |i#0@@115|)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (Lit (|#MutableMapModel.Slot.Slot| (LitInt 0))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (LitInt (MutableMapModel.Slot.slot (Lit (|#MutableMapModel.Slot.Slot| (LitInt 0))))))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (LitInt (MutableMapModel.Slot.slot (Lit (|#MutableMapModel.Slot.Slot| (LitInt 0)))))))) (MutableMapModel.Item.key |item#0@0|)))) (or (and ($Is (int_2_U (LitInt 0)) Tclass.NativeTypes.uint64) (and (and (and (and (<= (LitInt 0) (LitInt 0)) (< 0 |i#0@@115|)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (Lit (|#MutableMapModel.Slot.Slot| (LitInt 0))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (LitInt (MutableMapModel.Slot.slot (Lit (|#MutableMapModel.Slot.Slot| (LitInt 0))))))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (LitInt (MutableMapModel.Slot.slot (Lit (|#MutableMapModel.Slot.Slot| (LitInt 0)))))))) (MutableMapModel.Item.key |item#0@0|)))) (exists ((|$as#j1_0_0#1_0_0@@0| Int) ) (!  (and (and (<= (LitInt 0) |$as#j1_0_0#1_0_0@@0|) (< |$as#j1_0_0#1_0_0@@0| 18446744073709551616)) (and (and (and (and (<= (LitInt 0) |$as#j1_0_0#1_0_0@@0|) (< |$as#j1_0_0#1_0_0@@0| |i#0@@115|)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|#MutableMapModel.Slot.Slot| |$as#j1_0_0#1_0_0@@0|))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |$as#j1_0_0#1_0_0@@0|)))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |$as#j1_0_0#1_0_0@@0|))))) (MutableMapModel.Item.key |item#0@0|)))) :qid |MutableMapModelidfy.1129:13| :skolemid |2828| ))))))) (=> (and (<= (LitInt 0) |j#1_0_0@0|) (< |j#1_0_0@0| 18446744073709551616)) (=> (and (and (and (and (and (<= (LitInt 0) |j#1_0_0@0|) (< |j#1_0_0@0| |i#0@@115|)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|#MutableMapModel.Slot.Slot| |j#1_0_0@0|))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |j#1_0_0@0|)))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |j#1_0_0@0|))))) (MutableMapModel.Item.key |item#0@0|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) (and (=> (= (ControlFlow 0 321260) (- 0 1196108)) (<= (LitInt 0) |i#0@@115|)) (=> (<= (LitInt 0) |i#0@@115|) (and (=> (= (ControlFlow 0 321260) (- 0 1196115)) ($Is (int_2_U (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) Tclass._System.nat)) (=> ($Is (int_2_U (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) Tclass._System.nat) (=> (= |##elementsLength#1_0_1@0| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) (=> (and (and (and ($IsAlloc (int_2_U |##elementsLength#1_0_1@0|) Tclass._System.nat $Heap@0) (= |##slot#1_0_1@0| (|#MutableMapModel.Slot.Slot| |i#0@@115|))) (and ($IsAlloc |##slot#1_0_1@0| Tclass.MutableMapModel.Slot $Heap@0) (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|#MutableMapModel.Slot.Slot| |i#0@@115|)))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|#MutableMapModel.Slot.Slot| |i#0@@115|)))) (and (=> (= (ControlFlow 0 321260) (- 0 1196205)) (=> (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|#MutableMapModel.Slot.Slot| |i#0@@115|)) (or (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|#MutableMapModel.Slot.Slot| |i#0@@115|)) (< (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |i#0@@115|)) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))))))) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|#MutableMapModel.Slot.Slot| |i#0@@115|)) (and (=> (= (ControlFlow 0 321260) (- 0 1196269)) (not (= |i#0@@115| |j#1_0_0@0|))) (=> (not (= |i#0@@115| |j#1_0_0@0|)) (and (=> (= (ControlFlow 0 321260) (- 0 1196277)) (<= (LitInt 0) |i#0@@115|)) (=> (<= (LitInt 0) |i#0@@115|) (and (=> (= (ControlFlow 0 321260) (- 0 1196286)) (<= (LitInt 0) |j#1_0_0@0|)) (=> (<= (LitInt 0) |j#1_0_0@0|) (and (=> (= (ControlFlow 0 321260) (- 0 1196295)) (not (|MutableMapModel.Slot#Equal| (|#MutableMapModel.Slot.Slot| |i#0@@115|) (|#MutableMapModel.Slot.Slot| |j#1_0_0@0|)))) (=> (not (|MutableMapModel.Slot#Equal| (|#MutableMapModel.Slot.Slot| |i#0@@115|) (|#MutableMapModel.Slot.Slot| |j#1_0_0@0|))) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (and (=> (= (ControlFlow 0 321260) (- 0 1196318)) (<= (LitInt 0) |j#1_0_0@0|)) (=> (<= (LitInt 0) |j#1_0_0@0|) (=> (MutableMapModel.Slot.Slot_q (|#MutableMapModel.Slot.Slot| |j#1_0_0@0|)) (and (=> (= (ControlFlow 0 321260) (- 0 1196330)) (and (<= 0 (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |j#1_0_0@0|))) (< (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |j#1_0_0@0|)) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))) (and (=> (= (ControlFlow 0 321260) (- 0 1196356)) (or (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |j#1_0_0@0|))))) (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |j#1_0_0@0|))))))) (=> (or (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |j#1_0_0@0|))))) (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |j#1_0_0@0|)))))) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (and (=> (= (ControlFlow 0 321260) (- 0 1196409)) (<= (LitInt 0) |i#0@@115|)) (=> (<= (LitInt 0) |i#0@@115|) (=> (MutableMapModel.Slot.Slot_q (|#MutableMapModel.Slot.Slot| |i#0@@115|)) (and (=> (= (ControlFlow 0 321260) (- 0 1196422)) (and (<= 0 (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |i#0@@115|))) (< (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |i#0@@115|)) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))) (and (=> (= (ControlFlow 0 321260) (- 0 1196450)) (or (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |i#0@@115|))))) (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |i#0@@115|))))))) (=> (or (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |i#0@@115|))))) (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |i#0@@115|)))))) (=> (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (MutableMapModel.Slot.Slot_q (|#MutableMapModel.Slot.Slot| |j#1_0_0@0|))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (MutableMapModel.Slot.Slot_q (|#MutableMapModel.Slot.Slot| |i#0@@115|)))) (and (=> (= (ControlFlow 0 321260) (- 0 1196533)) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |j#1_0_0@0|))))) (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |i#0@@115|))))))) (=> (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |j#1_0_0@0|))))) (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |i#0@@115|)))))) (=> (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (= |underlying##1_0_0@0| (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (and (=> (= (ControlFlow 0 321260) (- 0 1196592)) (forall (($o@@234 T@U) ($f@@202 T@U) ) (! (let ((alpha@@209 (FieldTypeInv0 (type $f@@202)))) (=> (and (and (= (type $o@@234) refType) (= (type $f@@202) (FieldType alpha@@209))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@234 $f@@202)))) :qid |MutableMapModelidfy.1138:40| :skolemid |2829| :no-pattern (type $o@@234) :no-pattern (type $f@@202) :no-pattern (U_2_int $o@@234) :no-pattern (U_2_bool $o@@234) :no-pattern (U_2_int $f@@202) :no-pattern (U_2_bool $f@@202) ))) (=> (forall (($o@@235 T@U) ($f@@203 T@U) ) (! (let ((alpha@@210 (FieldTypeInv0 (type $f@@203)))) (=> (and (and (= (type $o@@235) refType) (= (type $f@@203) (FieldType alpha@@210))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@235 $f@@203)))) :qid |MutableMapModelidfy.1138:40| :skolemid |2829| :no-pattern (type $o@@235) :no-pattern (type $f@@203) :no-pattern (U_2_int $o@@235) :no-pattern (U_2_bool $o@@235) :no-pattern (U_2_int $f@@203) :no-pattern (U_2_bool $f@@203) )) (and (=> (= (ControlFlow 0 321260) (- 0 1196611)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|))))) (and (=> (= (ControlFlow 0 321260) (- 0 1196634)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) 18446744073709551616)))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) 18446744073709551616))) (and (=> (= (ControlFlow 0 321260) (- 0 1196655)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (< (MutableMapModel.FixedSizeLinearHashMap.count |underlying##1_0_0@0|) 18446744073709551616)))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (< (MutableMapModel.FixedSizeLinearHashMap.count |underlying##1_0_0@0|) 18446744073709551616))) (and (=> (= (ControlFlow 0 321260) (- 0 1196674)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (< (MutableMapModel.FixedSizeLinearHashMap.count |underlying##1_0_0@0|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (< (MutableMapModel.FixedSizeLinearHashMap.count |underlying##1_0_0@0|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|))))) (and (=> (= (ControlFlow 0 321260) (- 0 1196696)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) (MutableMapModel.FixedSizeLinearHashMap.count |underlying##1_0_0@0|))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) (MutableMapModel.FixedSizeLinearHashMap.count |underlying##1_0_0@0|)))) (and (=> (= (ControlFlow 0 321260) (- 0 1196718)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) (forall ((|key#0@@111| Int) ) (!  (=> (and (<= (LitInt 0) |key#0@@111|) (< |key#0@@111| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) ($Box (int_2_U |key#0@@111|)))) (exists ((|skips#0@@6| Int) ) (!  (and (<= (LitInt 0) |skips#0@@6|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |skips#0@@6| |key#0@@111|)) :qid |MutableMapModelidfy.257:50| :skolemid |2162| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |skips#0@@6| |key#0@@111|)) )))) :qid |MutableMapModelidfy.257:16| :skolemid |2163| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) ($Box (int_2_U |key#0@@111|)))) ))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) (forall ((|key#0@@112| T@U) ) (!  (=> (= (type |key#0@@112|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0@@112|)) (< (U_2_int |key#0@@112|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) ($Box |key#0@@112|))) (exists ((|skips#0@@7| Int) ) (!  (and (<= (LitInt 0) |skips#0@@7|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |skips#0@@7| (U_2_int |key#0@@112|))) :qid |MutableMapModelidfy.257:50| :skolemid |2162| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |skips#0@@7| (U_2_int |key#0@@112|))) ))))) :qid |MutableMapModelidfy.257:16| :skolemid |2163| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) ($Box |key#0@@112|))) )))))) (and (=> (= (ControlFlow 0 321260) (- 0 1196832)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) (forall ((|slot#0@@62| T@U) ) (!  (=> (and (and (= (type |slot#0@@62|) DatatypeTypeType) ($Is |slot#0@@62| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) |slot#0@@62|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#0@@62|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#0@@62|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|) |slot#0@@62|)) :qid |MutableMapModelidfy.258:16| :skolemid |2164| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|) |slot#0@@62|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#0@@62|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#0@@62|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) |slot#0@@62|)) ))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) (forall ((|slot#0@@63| T@U) ) (!  (=> (and (and (= (type |slot#0@@63|) DatatypeTypeType) ($Is |slot#0@@63| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) |slot#0@@63|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#0@@63|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#0@@63|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|) |slot#0@@63|)) :qid |MutableMapModelidfy.258:16| :skolemid |2164| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|) |slot#0@@63|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#0@@63|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#0@@63|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) |slot#0@@63|)) )))))) (and (=> (= (ControlFlow 0 321260) (- 0 1196962)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) (=> (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) (or (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) (forall ((|slot1#0@@11| T@U) (|slot2#0@@11| T@U) ) (!  (=> (and (and (and (= (type |slot1#0@@11|) DatatypeTypeType) (= (type |slot2#0@@11|) DatatypeTypeType)) (and ($Is |slot1#0@@11| Tclass.MutableMapModel.Slot) ($Is |slot2#0@@11| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot1#0@@11| |slot2#0@@11|)) (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) |slot1#0@@11| |slot2#0@@11|)) :qid |MutableMapModelidfy.242:12| :skolemid |2165| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) |slot1#0@@11| |slot2#0@@11|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot1#0@@11| |slot2#0@@11|)) ))))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) (=> (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) (or (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) (forall ((|slot1#0@@12| T@U) (|slot2#0@@12| T@U) ) (!  (=> (and (and (and (= (type |slot1#0@@12|) DatatypeTypeType) (= (type |slot2#0@@12|) DatatypeTypeType)) (and ($Is |slot1#0@@12| Tclass.MutableMapModel.Slot) ($Is |slot2#0@@12| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot1#0@@12| |slot2#0@@12|)) (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) |slot1#0@@12| |slot2#0@@12|)) :qid |MutableMapModelidfy.242:12| :skolemid |2165| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) |slot1#0@@12| |slot2#0@@12|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot1#0@@12| |slot2#0@@12|)) )))))))) (and (=> (= (ControlFlow 0 321260) (- 0 1197078)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (=> (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) (or (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) (forall ((|slot#1@@6| T@U) ) (!  (=> (and (and (= (type |slot#1@@6|) DatatypeTypeType) ($Is |slot#1@@6| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) |slot#1@@6|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#1@@6|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#1@@6| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|))) :qid |MutableMapModelidfy.284:12| :skolemid |2170| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#1@@6| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|))) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#1@@6|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) |slot#1@@6|)) ))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (=> (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) (or (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) (forall ((|slot#1@@7| T@U) ) (!  (=> (and (and (= (type |slot#1@@7|) DatatypeTypeType) ($Is |slot#1@@7| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) |slot#1@@7|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#1@@7|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#1@@7| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|))) :qid |MutableMapModelidfy.284:12| :skolemid |2170| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#1@@7| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|))) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#1@@7|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) |slot#1@@7|)) )))))) (and (=> (= (ControlFlow 0 321260) (- 0 1197188)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (=> (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) (or (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) (forall ((|slot#2| T@U) ) (!  (=> (and (and (= (type |slot#2|) DatatypeTypeType) ($Is |slot#2| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) |slot#2|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#2|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#2| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|))) :qid |MutableMapModelidfy.291:12| :skolemid |2172| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#2| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|))) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#2|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) |slot#2|)) ))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |underlying##1_0_0@0|) (=> (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) (or (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|)) (forall ((|slot#2@@0| T@U) ) (!  (=> (and (and (= (type |slot#2@@0|) DatatypeTypeType) ($Is |slot#2@@0| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) |slot#2@@0|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#2@@0|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#2@@0| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|))) :qid |MutableMapModelidfy.291:12| :skolemid |2172| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#2@@0| (MutableMapModel.FixedSizeLinearHashMap.contents |underlying##1_0_0@0|))) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) |slot#2@@0|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) |slot#2@@0|)) )))))) (=> (and (and (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6)) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |underlying##1_0_0@0|) (|MutableMapModel.__default.CantEquivocate#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)))) (and (and (|MutableMapModel.__default.CantEquivocate#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) (and (MutableMapModel.__default.CantEquivocate MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) (forall ((|slot1#1@@3| T@U) (|slot2#1@@3| T@U) ) (!  (=> (and (and (= (type |slot1#1@@3|) DatatypeTypeType) (= (type |slot2#1@@3|) DatatypeTypeType)) (and ($Is |slot1#1@@3| Tclass.MutableMapModel.Slot) ($Is |slot2#1@@3| Tclass.MutableMapModel.Slot))) (=> (and (and (and (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) |slot1#1@@3|) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) |slot2#1@@3|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.Slot.slot |slot1#1@@3|))))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.Slot.slot |slot2#1@@3|))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.Slot.slot |slot1#1@@3|)))) (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|) (MutableMapModel.Slot.slot |slot2#1@@3|)))))) (|MutableMapModel.Slot#Equal| |slot1#1@@3| |slot2#1@@3|))) :qid |MutableMapModelidfy.846:12| :skolemid |2175| :pattern ( (MutableMapModel.Slot.slot |slot2#1@@3|) (MutableMapModel.Slot.slot |slot1#1@@3|)) :pattern ( (MutableMapModel.Slot.slot |slot2#1@@3|) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) |slot1#1@@3|)) :pattern ( (MutableMapModel.Slot.slot |slot1#1@@3|) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) |slot2#1@@3|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) |slot2#1@@3|) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |underlying##1_0_0@0|)) |slot1#1@@3|)) )))) (and (= $Heap@0 $Heap@6) (= (ControlFlow 0 321260) (- 0 1197525))))) false)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((anon22_correct  (=> (and (=> (<= (LitInt 0) |j#1_0_1@0|) (=> (< |j#1_0_1@0| |i#0@@115|) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|#MutableMapModel.Slot.Slot| |j#1_0_1@0|))) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|#MutableMapModel.Slot.Slot| |j#1_0_1@0|)) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (MutableMapModel.Slot.Slot_q (|#MutableMapModel.Slot.Slot| |j#1_0_1@0|))) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |j#1_0_1@0|))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (MutableMapModel.Slot.Slot_q (|#MutableMapModel.Slot.Slot| |j#1_0_1@0|))))))))) (= (ControlFlow 0 321256) 321260)) anon23_correct))) (let ((anon71_Else_correct  (=> (and (not (and (and (and (<= (LitInt 0) |j#1_0_1@0|) (< |j#1_0_1@0| |i#0@@115|)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|#MutableMapModel.Slot.Slot| |j#1_0_1@0|))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |j#1_0_1@0|))))))) (= (ControlFlow 0 321254) 321256)) anon22_correct))) (let ((anon71_Then_correct  (=> (and (and (and (and (<= (LitInt 0) |j#1_0_1@0|) (< |j#1_0_1@0| |i#0@@115|)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|#MutableMapModel.Slot.Slot| |j#1_0_1@0|))) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |j#1_0_1@0|)))))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) (and (=> (= (ControlFlow 0 321252) (- 0 1195058)) ($Is (int_2_U |j#1_0_1@0|) Tclass._System.nat)) (=> ($Is (int_2_U |j#1_0_1@0|) Tclass._System.nat) (=> (MutableMapModel.Slot.Slot_q (|#MutableMapModel.Slot.Slot| |j#1_0_1@0|)) (and (=> (= (ControlFlow 0 321252) (- 0 1195068)) (and (<= 0 (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |j#1_0_1@0|))) (< (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |j#1_0_1@0|)) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))) (and (=> (= (ControlFlow 0 321252) (- 0 1195094)) (or (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |j#1_0_1@0|))))) (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |j#1_0_1@0|))))))) (=> (or (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |j#1_0_1@0|))))) (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |j#1_0_1@0|)))))) (and (=> (= (ControlFlow 0 321252) (- 0 1195134)) (or (MutableMapModel.Item.Entry_q |item#0@0|) (MutableMapModel.Item.Tombstone_q |item#0@0|))) (=> (or (MutableMapModel.Item.Entry_q |item#0@0|) (MutableMapModel.Item.Tombstone_q |item#0@0|)) (=> (= (ControlFlow 0 321252) 321256) anon22_correct)))))))))))) (let ((anon70_Else_correct  (=> (not (and (and (<= (LitInt 0) |j#1_0_1@0|) (< |j#1_0_1@0| |i#0@@115|)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|#MutableMapModel.Slot.Slot| |j#1_0_1@0|)))) (and (=> (= (ControlFlow 0 321243) 321252) anon71_Then_correct) (=> (= (ControlFlow 0 321243) 321254) anon71_Else_correct))))) (let ((anon70_Then_correct  (=> (and (and (and (<= (LitInt 0) |j#1_0_1@0|) (< |j#1_0_1@0| |i#0@@115|)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|#MutableMapModel.Slot.Slot| |j#1_0_1@0|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) (and (=> (= (ControlFlow 0 321241) (- 0 1194931)) ($Is (int_2_U |j#1_0_1@0|) Tclass._System.nat)) (=> ($Is (int_2_U |j#1_0_1@0|) Tclass._System.nat) (=> (MutableMapModel.Slot.Slot_q (|#MutableMapModel.Slot.Slot| |j#1_0_1@0|)) (and (=> (= (ControlFlow 0 321241) (- 0 1194941)) (and (<= 0 (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |j#1_0_1@0|))) (< (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |j#1_0_1@0|)) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))) (and (=> (= (ControlFlow 0 321241) 321252) anon71_Then_correct) (=> (= (ControlFlow 0 321241) 321254) anon71_Else_correct))))))))) (let ((anon69_Else_correct  (=> (not (and (<= (LitInt 0) |j#1_0_1@0|) (< |j#1_0_1@0| |i#0@@115|))) (and (=> (= (ControlFlow 0 321232) 321241) anon70_Then_correct) (=> (= (ControlFlow 0 321232) 321243) anon70_Else_correct))))) (let ((anon69_Then_correct  (=> (and (and (<= (LitInt 0) |j#1_0_1@0|) (< |j#1_0_1@0| |i#0@@115|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) (and (=> (= (ControlFlow 0 321230) (- 0 1194811)) ($Is (int_2_U |j#1_0_1@0|) Tclass._System.nat)) (=> ($Is (int_2_U |j#1_0_1@0|) Tclass._System.nat) (and (=> (= (ControlFlow 0 321230) (- 0 1194816)) ($Is (int_2_U (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) Tclass._System.nat)) (=> ($Is (int_2_U (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) Tclass._System.nat) (=> (= |##elementsLength#1_0_0@0| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) (=> (and (and ($IsAlloc (int_2_U |##elementsLength#1_0_0@0|) Tclass._System.nat $Heap@0) (= |##slot#1_0_0@0| (|#MutableMapModel.Slot.Slot| |j#1_0_1@0|))) (and ($IsAlloc |##slot#1_0_0@0| Tclass.MutableMapModel.Slot $Heap@0) (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|#MutableMapModel.Slot.Slot| |j#1_0_1@0|)))) (and (=> (= (ControlFlow 0 321230) 321241) anon70_Then_correct) (=> (= (ControlFlow 0 321230) 321243) anon70_Else_correct))))))))))) (let ((anon68_Else_correct  (=> (< |j#1_0_1@0| (LitInt 0)) (and (=> (= (ControlFlow 0 321221) 321230) anon69_Then_correct) (=> (= (ControlFlow 0 321221) 321232) anon69_Else_correct))))) (let ((anon68_Then_correct  (=> (<= (LitInt 0) |j#1_0_1@0|) (and (=> (= (ControlFlow 0 321219) 321230) anon69_Then_correct) (=> (= (ControlFlow 0 321219) 321232) anon69_Else_correct))))) (let ((anon67_Then_correct  (=> (and (and (<= (LitInt 0) |j#1_0_1@0|) (< |j#1_0_1@0| 18446744073709551616)) (= |newtype$check#1_0_0@0| (LitInt 0))) (and (=> (= (ControlFlow 0 321217) (- 0 1194743)) (and (<= (LitInt 0) |newtype$check#1_0_0@0|) (< |newtype$check#1_0_0@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#1_0_0@0|) (< |newtype$check#1_0_0@0| 18446744073709551616)) (and (=> (= (ControlFlow 0 321217) 321219) anon68_Then_correct) (=> (= (ControlFlow 0 321217) 321221) anon68_Else_correct))))))) (let ((anon67_Else_correct  (=> (and (not (and (<= (LitInt 0) |j#1_0_1@0|) (< |j#1_0_1@0| 18446744073709551616))) (= (ControlFlow 0 321258) 321260)) anon23_correct))) (let ((anon66_Then_correct  (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U (MutableMapModel.Item.key |item#0@0|))))) (and (=> (= (ControlFlow 0 321210) 321217) anon67_Then_correct) (=> (= (ControlFlow 0 321210) 321258) anon67_Else_correct))))) (let ((anon43_correct  (=> (= (ControlFlow 0 321361) (- 0 1194618)) (exists ((|slot#1_5| T@U) ) (!  (and (= (type |slot#1_5|) DatatypeTypeType) (and ($Is |slot#1_5| Tclass.MutableMapModel.Slot) (and (and (and (< (MutableMapModel.Slot.slot |slot#1_5|) (+ |i#0@@115| 1)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_5|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_5|))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_5|)))) |key#1_1@0|)))) :qid |MutableMapModelidfy.1159:22| :skolemid |2852| :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_5|)) :pattern ( (MutableMapModel.Slot.slot |slot#1_5|)) ))))) (let ((anon34_correct  (=> (forall ((|slot#1_1_1| T@U) ) (!  (=> (and (= (type |slot#1_1_1|) DatatypeTypeType) ($Is |slot#1_1_1| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.Slot.Slot_q |slot#1_1_1|) (=> (< (MutableMapModel.Slot.slot |slot#1_1_1|) (+ |i#0@@115| 1)) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_1_1|)) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_1_1|) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (MutableMapModel.Slot.Slot_q |slot#1_1_1|)) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_1_1|)))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (MutableMapModel.Slot.Slot_q |slot#1_1_1|))))))))) :qid |MutableMapModelidfy.1167:25| :skolemid |2844| :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_1_1|)) :pattern ( (MutableMapModel.Slot.slot |slot#1_1_1|)) )) (and (=> (= (ControlFlow 0 321315) (- 0 1194420)) (exists ((|slot#1_1_1@@0| T@U) ) (!  (and (= (type |slot#1_1_1@@0|) DatatypeTypeType) (and ($Is |slot#1_1_1@@0| Tclass.MutableMapModel.Slot) (and (and (and (< (MutableMapModel.Slot.slot |slot#1_1_1@@0|) (+ |i#0@@115| 1)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_1_1@@0|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_1_1@@0|))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_1_1@@0|)))) |key#1_1@0|)))) :qid |MutableMapModelidfy.1167:25| :skolemid |2845| :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_1_1@@0|)) :pattern ( (MutableMapModel.Slot.slot |slot#1_1_1@@0|)) ))) (=> (and (exists ((|slot#1_1_1@@1| T@U) ) (!  (and (= (type |slot#1_1_1@@1|) DatatypeTypeType) (and ($Is |slot#1_1_1@@1| Tclass.MutableMapModel.Slot) (and (and (and (< (MutableMapModel.Slot.slot |slot#1_1_1@@1|) (+ |i#0@@115| 1)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_1_1@@1|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_1_1@@1|))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_1_1@@1|)))) |key#1_1@0|)))) :qid |MutableMapModelidfy.1167:25| :skolemid |2847| :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_1_1@@1|)) :pattern ( (MutableMapModel.Slot.slot |slot#1_1_1@@1|)) )) (= (ControlFlow 0 321315) 321361)) anon43_correct))))) (let ((anon77_Else_correct  (=> (and (not (and (and (< (MutableMapModel.Slot.slot |slot#1_1_0@0|) (+ |i#0@@115| 1)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_1_0@0|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_1_0@0|)))))) (= (ControlFlow 0 321311) 321315)) anon34_correct))) (let ((anon77_Then_correct  (=> (and (and (and (and (< (MutableMapModel.Slot.slot |slot#1_1_0@0|) (+ |i#0@@115| 1)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_1_0@0|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_1_0@0|))))) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|)) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.Slot_q |slot#1_1_0@0|))) (and (=> (= (ControlFlow 0 321309) (- 0 1194167)) (and (<= 0 (MutableMapModel.Slot.slot |slot#1_1_0@0|)) (< (MutableMapModel.Slot.slot |slot#1_1_0@0|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))) (and (=> (= (ControlFlow 0 321309) (- 0 1194189)) (or (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_1_0@0|)))) (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_1_0@0|)))))) (=> (or (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_1_0@0|)))) (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_1_0@0|))))) (=> (= (ControlFlow 0 321309) 321315) anon34_correct))))))) (let ((anon76_Else_correct  (=> (not (and (< (MutableMapModel.Slot.slot |slot#1_1_0@0|) (+ |i#0@@115| 1)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_1_0@0|))) (and (=> (= (ControlFlow 0 321300) 321309) anon77_Then_correct) (=> (= (ControlFlow 0 321300) 321311) anon77_Else_correct))))) (let ((anon76_Then_correct  (=> (and (and (and (< (MutableMapModel.Slot.slot |slot#1_1_0@0|) (+ |i#0@@115| 1)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_1_0@0|)) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|)) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.Slot_q |slot#1_1_0@0|))) (and (=> (= (ControlFlow 0 321298) (- 0 1194063)) (and (<= 0 (MutableMapModel.Slot.slot |slot#1_1_0@0|)) (< (MutableMapModel.Slot.slot |slot#1_1_0@0|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))) (and (=> (= (ControlFlow 0 321298) 321309) anon77_Then_correct) (=> (= (ControlFlow 0 321298) 321311) anon77_Else_correct)))))) (let ((anon75_Else_correct  (=> (<= (+ |i#0@@115| 1) (MutableMapModel.Slot.slot |slot#1_1_0@0|)) (and (=> (= (ControlFlow 0 321289) 321298) anon76_Then_correct) (=> (= (ControlFlow 0 321289) 321300) anon76_Else_correct))))) (let ((anon75_Then_correct  (=> (< (MutableMapModel.Slot.slot |slot#1_1_0@0|) (+ |i#0@@115| 1)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (and (=> (= (ControlFlow 0 321287) (- 0 1193964)) ($Is (int_2_U (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) Tclass._System.nat)) (=> ($Is (int_2_U (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) Tclass._System.nat) (=> (and (and (= |##elementsLength#1_1_1@0| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) ($IsAlloc (int_2_U |##elementsLength#1_1_1@0|) Tclass._System.nat $Heap@3)) (and ($IsAlloc |slot#1_1_0@0| Tclass.MutableMapModel.Slot $Heap@3) (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_1_0@0|))) (and (=> (= (ControlFlow 0 321287) 321298) anon76_Then_correct) (=> (= (ControlFlow 0 321287) 321300) anon76_Else_correct))))))))) (let ((anon74_Then_correct  (=> (and (and ($Is |slot#1_1_0@0| Tclass.MutableMapModel.Slot) ($IsAlloc |slot#1_1_0@0| Tclass.MutableMapModel.Slot $Heap@3)) (MutableMapModel.Slot.Slot_q |slot#1_1_0@0|)) (and (=> (= (ControlFlow 0 321285) (- 0 1193921)) (<= (LitInt 0) |i#0@@115|)) (=> (<= (LitInt 0) |i#0@@115|) (and (=> (= (ControlFlow 0 321285) 321287) anon75_Then_correct) (=> (= (ControlFlow 0 321285) 321289) anon75_Else_correct))))))) (let ((anon74_Else_correct  (=> (and (not (and ($Is |slot#1_1_0@0| Tclass.MutableMapModel.Slot) ($IsAlloc |slot#1_1_0@0| Tclass.MutableMapModel.Slot $Heap@3))) (= (ControlFlow 0 321313) 321315)) anon34_correct))) (let ((anon73_Then_correct  (=> (= |key#1_1@0| (MutableMapModel.Item.key |item#0@0|)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (and (=> (= (ControlFlow 0 321278) (- 0 1193015)) (<= (LitInt 0) |i#0@@115|)) (=> (<= (LitInt 0) |i#0@@115|) (and (=> (= (ControlFlow 0 321278) (- 0 1193022)) ($Is (int_2_U (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) Tclass._System.nat)) (=> ($Is (int_2_U (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) Tclass._System.nat) (=> (= |##elementsLength#1_1_0@0| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) (=> (and (and (and ($IsAlloc (int_2_U |##elementsLength#1_1_0@0|) Tclass._System.nat $Heap@3) (= |##slot#1_1_0@0| (|#MutableMapModel.Slot.Slot| |i#0@@115|))) (and ($IsAlloc |##slot#1_1_0@0| Tclass.MutableMapModel.Slot $Heap@3) (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|#MutableMapModel.Slot.Slot| |i#0@@115|)))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|#MutableMapModel.Slot.Slot| |i#0@@115|)))) (and (=> (= (ControlFlow 0 321278) (- 0 1193112)) (=> (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|#MutableMapModel.Slot.Slot| |i#0@@115|)) (or (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|#MutableMapModel.Slot.Slot| |i#0@@115|)) (< (MutableMapModel.Slot.slot (|#MutableMapModel.Slot.Slot| |i#0@@115|)) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))))))) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|#MutableMapModel.Slot.Slot| |i#0@@115|)) (and (=> (= (ControlFlow 0 321278) 321285) anon74_Then_correct) (=> (= (ControlFlow 0 321278) 321313) anon74_Else_correct)))))))))))))) (let ((anon42_correct  (=> (forall ((|slot#1_4| T@U) ) (!  (=> (and (= (type |slot#1_4|) DatatypeTypeType) ($Is |slot#1_4| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.Slot.Slot_q |slot#1_4|) (=> (< (MutableMapModel.Slot.slot |slot#1_4|) (+ |i#0@@115| 1)) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_4|)) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_4|) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (MutableMapModel.Slot.Slot_q |slot#1_4|)) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_4|)))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (MutableMapModel.Slot.Slot_q |slot#1_4|))))))))) :qid |MutableMapModelidfy.1173:25| :skolemid |2848| :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_4|)) :pattern ( (MutableMapModel.Slot.slot |slot#1_4|)) )) (and (=> (= (ControlFlow 0 321359) (- 0 1193704)) (exists ((|slot#1_4@@0| T@U) ) (!  (and (= (type |slot#1_4@@0|) DatatypeTypeType) (and ($Is |slot#1_4@@0| Tclass.MutableMapModel.Slot) (and (and (and (< (MutableMapModel.Slot.slot |slot#1_4@@0|) (+ |i#0@@115| 1)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_4@@0|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_4@@0|))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_4@@0|)))) |key#1_1@0|)))) :qid |MutableMapModelidfy.1173:25| :skolemid |2849| :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_4@@0|)) :pattern ( (MutableMapModel.Slot.slot |slot#1_4@@0|)) ))) (=> (and (exists ((|slot#1_4@@1| T@U) ) (!  (and (= (type |slot#1_4@@1|) DatatypeTypeType) (and ($Is |slot#1_4@@1| Tclass.MutableMapModel.Slot) (and (and (and (< (MutableMapModel.Slot.slot |slot#1_4@@1|) (+ |i#0@@115| 1)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_4@@1|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_4@@1|))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_4@@1|)))) |key#1_1@0|)))) :qid |MutableMapModelidfy.1173:25| :skolemid |2851| :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_4@@1|)) :pattern ( (MutableMapModel.Slot.slot |slot#1_4@@1|)) )) (= (ControlFlow 0 321359) 321361)) anon43_correct))))) (let ((anon81_Else_correct  (=> (and (not (and (and (< (MutableMapModel.Slot.slot |slot#1_3@0|) (+ |i#0@@115| 1)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_3@0|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_3@0|)))))) (= (ControlFlow 0 321355) 321359)) anon42_correct))) (let ((anon81_Then_correct  (=> (and (and (and (and (< (MutableMapModel.Slot.slot |slot#1_3@0|) (+ |i#0@@115| 1)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_3@0|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_3@0|))))) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|)) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.Slot_q |slot#1_3@0|))) (and (=> (= (ControlFlow 0 321353) (- 0 1193451)) (and (<= 0 (MutableMapModel.Slot.slot |slot#1_3@0|)) (< (MutableMapModel.Slot.slot |slot#1_3@0|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))) (and (=> (= (ControlFlow 0 321353) (- 0 1193473)) (or (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_3@0|)))) (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_3@0|)))))) (=> (or (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_3@0|)))) (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_3@0|))))) (=> (= (ControlFlow 0 321353) 321359) anon42_correct))))))) (let ((anon80_Else_correct  (=> (not (and (< (MutableMapModel.Slot.slot |slot#1_3@0|) (+ |i#0@@115| 1)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_3@0|))) (and (=> (= (ControlFlow 0 321344) 321353) anon81_Then_correct) (=> (= (ControlFlow 0 321344) 321355) anon81_Else_correct))))) (let ((anon80_Then_correct  (=> (and (and (and (< (MutableMapModel.Slot.slot |slot#1_3@0|) (+ |i#0@@115| 1)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_3@0|)) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|)) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.Slot_q |slot#1_3@0|))) (and (=> (= (ControlFlow 0 321342) (- 0 1193347)) (and (<= 0 (MutableMapModel.Slot.slot |slot#1_3@0|)) (< (MutableMapModel.Slot.slot |slot#1_3@0|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))) (and (=> (= (ControlFlow 0 321342) 321353) anon81_Then_correct) (=> (= (ControlFlow 0 321342) 321355) anon81_Else_correct)))))) (let ((anon79_Else_correct  (=> (<= (+ |i#0@@115| 1) (MutableMapModel.Slot.slot |slot#1_3@0|)) (and (=> (= (ControlFlow 0 321333) 321342) anon80_Then_correct) (=> (= (ControlFlow 0 321333) 321344) anon80_Else_correct))))) (let ((anon79_Then_correct  (=> (< (MutableMapModel.Slot.slot |slot#1_3@0|) (+ |i#0@@115| 1)) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (and (=> (= (ControlFlow 0 321331) (- 0 1193248)) ($Is (int_2_U (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) Tclass._System.nat)) (=> ($Is (int_2_U (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) Tclass._System.nat) (=> (and (and (= |##elementsLength#1_0@0| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) ($IsAlloc (int_2_U |##elementsLength#1_0@0|) Tclass._System.nat $Heap@3)) (and ($IsAlloc |slot#1_3@0| Tclass.MutableMapModel.Slot $Heap@3) (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_3@0|))) (and (=> (= (ControlFlow 0 321331) 321342) anon80_Then_correct) (=> (= (ControlFlow 0 321331) 321344) anon80_Else_correct))))))))) (let ((anon78_Then_correct  (=> (and (and ($Is |slot#1_3@0| Tclass.MutableMapModel.Slot) ($IsAlloc |slot#1_3@0| Tclass.MutableMapModel.Slot $Heap@3)) (MutableMapModel.Slot.Slot_q |slot#1_3@0|)) (and (=> (= (ControlFlow 0 321329) (- 0 1193205)) (<= (LitInt 0) |i#0@@115|)) (=> (<= (LitInt 0) |i#0@@115|) (and (=> (= (ControlFlow 0 321329) 321331) anon79_Then_correct) (=> (= (ControlFlow 0 321329) 321333) anon79_Else_correct))))))) (let ((anon78_Else_correct  (=> (and (not (and ($Is |slot#1_3@0| Tclass.MutableMapModel.Slot) ($IsAlloc |slot#1_3@0| Tclass.MutableMapModel.Slot $Heap@3))) (= (ControlFlow 0 321357) 321359)) anon42_correct))) (let ((anon73_Else_correct  (=> (not (= |key#1_1@0| (MutableMapModel.Item.key |item#0@0|))) (and (=> (= (ControlFlow 0 321322) 321329) anon78_Then_correct) (=> (= (ControlFlow 0 321322) 321357) anon78_Else_correct))))) (let ((anon72_Then_correct  (=> (and (and (and (<= (LitInt 0) |key#1_1@0|) (< |key#1_1@0| 18446744073709551616)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying'#2@1|)) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying'#2@1|) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@1|)) ($Box (int_2_U |key#1_1@0|)))))) (and (=> (= (ControlFlow 0 321271) (- 0 1187861)) (or (MutableMapModel.Item.Entry_q |item#0@0|) (MutableMapModel.Item.Tombstone_q |item#0@0|))) (=> (or (MutableMapModel.Item.Entry_q |item#0@0|) (MutableMapModel.Item.Tombstone_q |item#0@0|)) (and (=> (= (ControlFlow 0 321271) 321278) anon73_Then_correct) (=> (= (ControlFlow 0 321271) 321322) anon73_Else_correct))))))) (let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 1175080) (- 0 1203278)) (let ((|newUnderlying'#0@@1| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@1|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@1|) (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@1|))))))) (=> (let ((|newUnderlying'#0@@2| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@2|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@2|) (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@2|)))))) (and (=> (= (ControlFlow 0 1175080) (- 0 1203324)) (let ((|newUnderlying'#0@@3| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@3|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@3|) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@3|)) 18446744073709551616))))) (=> (let ((|newUnderlying'#0@@4| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@4|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@4|) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@4|)) 18446744073709551616)))) (and (=> (= (ControlFlow 0 1175080) (- 0 1203368)) (let ((|newUnderlying'#0@@5| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@5|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@5|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#0@@5|) 18446744073709551616))))) (=> (let ((|newUnderlying'#0@@6| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@6|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@6|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#0@@6|) 18446744073709551616)))) (and (=> (= (ControlFlow 0 1175080) (- 0 1203410)) (let ((|newUnderlying'#0@@7| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@7|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#0@@7|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@7|))))))) (=> (let ((|newUnderlying'#0@@8| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@8|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@8|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#0@@8|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@8|)))))) (and (=> (= (ControlFlow 0 1175080) (- 0 1203456)) (let ((|newUnderlying'#0@@9| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@9|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@9|) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@9|)) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#0@@9|)))))) (=> (let ((|newUnderlying'#0@@10| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@10|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@10|) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@10|)) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#0@@10|))))) (and (=> (= (ControlFlow 0 1175080) (- 0 1203502)) (let ((|newUnderlying'#0@@11| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@11|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@11|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@11|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@11|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@11|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@11|)) (forall ((|key#24| Int) ) (!  (=> (and (<= (LitInt 0) |key#24|) (< |key#24| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@11|)) ($Box (int_2_U |key#24|)))) (exists ((|skips#10| Int) ) (!  (and (<= (LitInt 0) |skips#10|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@11|) |skips#10| |key#24|)) :qid |MutableMapModelidfy.257:50| :skolemid |2742| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@11|) |skips#10| |key#24|)) )))) :qid |MutableMapModelidfy.257:16| :skolemid |2743| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@11|)) ($Box (int_2_U |key#24|)))) )))))))) (=> (let ((|newUnderlying'#0@@12| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@12|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@12|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@12|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@12|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@12|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@12|)) (forall ((|key#24@@0| T@U) ) (!  (=> (= (type |key#24@@0|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#24@@0|)) (< (U_2_int |key#24@@0|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@12|)) ($Box |key#24@@0|))) (exists ((|skips#10@@0| Int) ) (!  (and (<= (LitInt 0) |skips#10@@0|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@12|) |skips#10@@0| (U_2_int |key#24@@0|))) :qid |MutableMapModelidfy.257:50| :skolemid |2742| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@12|) |skips#10@@0| (U_2_int |key#24@@0|))) ))))) :qid |MutableMapModelidfy.257:16| :skolemid |2743| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@12|)) ($Box |key#24@@0|))) ))))))) (and (=> (= (ControlFlow 0 1175080) (- 0 1203650)) (let ((|newUnderlying'#0@@13| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@13|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@13|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@13|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@13|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@13|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@13|)) (forall ((|slot#33| T@U) ) (!  (=> (and (and (= (type |slot#33|) DatatypeTypeType) ($Is |slot#33| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@13|)) |slot#33|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@13|) |slot#33|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@13|) |slot#33|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@13|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@13|) |slot#33|)) :qid |MutableMapModelidfy.258:16| :skolemid |2744| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@13|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@13|) |slot#33|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@13|) |slot#33|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@13|) |slot#33|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@13|)) |slot#33|)) )))))))) (=> (let ((|newUnderlying'#0@@14| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@14|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@14|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@14|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@14|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@14|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@14|)) (forall ((|slot#33@@0| T@U) ) (!  (=> (and (and (= (type |slot#33@@0|) DatatypeTypeType) ($Is |slot#33@@0| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@14|)) |slot#33@@0|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@14|) |slot#33@@0|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@14|) |slot#33@@0|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@14|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@14|) |slot#33@@0|)) :qid |MutableMapModelidfy.258:16| :skolemid |2744| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@14|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@14|) |slot#33@@0|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@14|) |slot#33@@0|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@14|) |slot#33@@0|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@14|)) |slot#33@@0|)) ))))))) (and (=> (= (ControlFlow 0 1175080) (- 0 1203824)) (let ((|newUnderlying'#0@@15| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@15|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@15|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@15|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@15|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@15|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@15|)) (=> (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@15|)) (or (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@15|)) (forall ((|slot1#10| T@U) (|slot2#10| T@U) ) (!  (=> (and (and (and (= (type |slot1#10|) DatatypeTypeType) (= (type |slot2#10|) DatatypeTypeType)) (and ($Is |slot1#10| Tclass.MutableMapModel.Slot) ($Is |slot2#10| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@15|) |slot1#10| |slot2#10|)) (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@15|)) |slot1#10| |slot2#10|)) :qid |MutableMapModelidfy.242:12| :skolemid |2745| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@15|)) |slot1#10| |slot2#10|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@15|) |slot1#10| |slot2#10|)) )))))))))) (=> (let ((|newUnderlying'#0@@16| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@16|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@16|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@16|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@16|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@16|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@16|)) (=> (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@16|)) (or (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@16|)) (forall ((|slot1#10@@0| T@U) (|slot2#10@@0| T@U) ) (!  (=> (and (and (and (= (type |slot1#10@@0|) DatatypeTypeType) (= (type |slot2#10@@0|) DatatypeTypeType)) (and ($Is |slot1#10@@0| Tclass.MutableMapModel.Slot) ($Is |slot2#10@@0| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@16|) |slot1#10@@0| |slot2#10@@0|)) (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@16|)) |slot1#10@@0| |slot2#10@@0|)) :qid |MutableMapModelidfy.242:12| :skolemid |2745| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@16|)) |slot1#10@@0| |slot2#10@@0|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@16|) |slot1#10@@0| |slot2#10@@0|)) ))))))))) (and (=> (= (ControlFlow 0 1175080) (- 0 1203978)) (let ((|newUnderlying'#0@@17| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@17|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@17|) (=> (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@17|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@17|)) (or (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@17|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@17|)) (forall ((|slot#34| T@U) ) (!  (=> (and (and (= (type |slot#34|) DatatypeTypeType) ($Is |slot#34| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@17|)) |slot#34|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@17|) |slot#34|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@17|) |slot#34| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@17|))) :qid |MutableMapModelidfy.284:12| :skolemid |2750| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@17|) |slot#34| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@17|))) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@17|) |slot#34|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@17|)) |slot#34|)) )))))))) (=> (let ((|newUnderlying'#0@@18| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@18|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@18|) (=> (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@18|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@18|)) (or (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@18|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@18|)) (forall ((|slot#34@@0| T@U) ) (!  (=> (and (and (= (type |slot#34@@0|) DatatypeTypeType) ($Is |slot#34@@0| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@18|)) |slot#34@@0|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@18|) |slot#34@@0|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@18|) |slot#34@@0| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@18|))) :qid |MutableMapModelidfy.284:12| :skolemid |2750| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@18|) |slot#34@@0| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@18|))) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@18|) |slot#34@@0|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@18|)) |slot#34@@0|)) ))))))) (and (=> (= (ControlFlow 0 1175080) (- 0 1204128)) (let ((|newUnderlying'#0@@19| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@19|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@19|) (=> (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@19|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@19|)) (or (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@19|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@19|)) (forall ((|slot#35| T@U) ) (!  (=> (and (and (= (type |slot#35|) DatatypeTypeType) ($Is |slot#35| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@19|)) |slot#35|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@19|) |slot#35|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@19|) |slot#35| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@19|))) :qid |MutableMapModelidfy.291:12| :skolemid |2752| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@19|) |slot#35| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@19|))) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@19|) |slot#35|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@19|)) |slot#35|)) )))))))) (=> (let ((|newUnderlying'#0@@20| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@20|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@20|) (=> (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@20|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@20|)) (or (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@20|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@20|)) (forall ((|slot#35@@0| T@U) ) (!  (=> (and (and (= (type |slot#35@@0|) DatatypeTypeType) ($Is |slot#35@@0| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@20|)) |slot#35@@0|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@20|) |slot#35@@0|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@20|) |slot#35@@0| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@20|))) :qid |MutableMapModelidfy.291:12| :skolemid |2752| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@20|) |slot#35@@0| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@20|))) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@20|) |slot#35@@0|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@20|)) |slot#35@@0|)) ))))))) (and (=> (= (ControlFlow 0 1175080) (- 0 1204278)) (let ((|newUnderlying'#0@@21| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (= (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#0@@21|) (MutableMapModel.LinearHashMap.count |self#0@@200|)))) (=> (let ((|newUnderlying'#0@@22| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (= (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#0@@22|) (MutableMapModel.LinearHashMap.count |self#0@@200|))) (and (=> (= (ControlFlow 0 1175080) (- 0 1204306)) (let ((|newUnderlying'#0@@23| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@10| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@6| |newUnderlying'#0@@23|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@6| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@10|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@10|)))) |newUnderlying'#0@@23|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@11| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@7| |newUnderlying'#0@@23|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@7| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@11|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@11|)))) |newUnderlying'#0@@23|) (= (|Map#Card| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@12| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@8| |newUnderlying'#0@@23|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@8| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@12|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@12|)))))) (MutableMapModel.LinearHashMap.count (let ((|dt_update_tmp#0#1@@13| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@9| |newUnderlying'#0@@23|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@9| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@13|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@13|)))))))))) (=> (let ((|newUnderlying'#0@@24| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@14| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@10| |newUnderlying'#0@@24|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@10| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@14|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@14|)))) |newUnderlying'#0@@24|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@15| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@11| |newUnderlying'#0@@24|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@11| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@15|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@15|)))) |newUnderlying'#0@@24|) (= (|Map#Card| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@16| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@12| |newUnderlying'#0@@24|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@12| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@16|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@16|)))))) (MutableMapModel.LinearHashMap.count (let ((|dt_update_tmp#0#1@@17| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@13| |newUnderlying'#0@@24|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@13| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@17|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@17|))))))))) (and (=> (= (ControlFlow 0 1175080) (- 0 1204428)) (let ((|newUnderlying'#0@@25| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@18| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@14| |newUnderlying'#0@@25|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@14| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@18|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@18|)))) |newUnderlying'#0@@25|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@19| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@15| |newUnderlying'#0@@25|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@15| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@19|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@19|)))) |newUnderlying'#0@@25|) (=> (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@25| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@20| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@16| |newUnderlying'#0@@25|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@16| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@20|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@20|)))))) (or (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@25| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@21| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@17| |newUnderlying'#0@@25|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@17| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@21|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@21|)))))) (forall ((|key#25| Int) ) (!  (=> (and (<= (LitInt 0) |key#25|) (< |key#25| 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@22| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@18| |newUnderlying'#0@@25|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@18| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@22|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@22|)))))) ($Box (int_2_U |key#25|)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@25|)) ($Box (int_2_U |key#25|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@23| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@19| |newUnderlying'#0@@25|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@19| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@23|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@23|)))))) ($Box (int_2_U |key#25|)))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@25|)) ($Box (int_2_U |key#25|)))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@24| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@20| |newUnderlying'#0@@25|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@20| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@24|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@24|)))))) ($Box (int_2_U |key#25|)))))))) :qid |MutableMapModelidfy.932:16| :skolemid |2754| :pattern ( (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@25| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@21| |newUnderlying'#0@@25|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@21| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@25|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@25|)))))) ($Box (int_2_U |key#25|)))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@25|)) ($Box (int_2_U |key#25|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@25|)) ($Box (int_2_U |key#25|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@26| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@22| |newUnderlying'#0@@25|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@22| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@26|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@26|)))))) ($Box (int_2_U |key#25|)))) )))))))) (=> (let ((|newUnderlying'#0@@26| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@27| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@23| |newUnderlying'#0@@26|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@23| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@27|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@27|)))) |newUnderlying'#0@@26|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@28| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@24| |newUnderlying'#0@@26|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@24| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@28|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@28|)))) |newUnderlying'#0@@26|) (=> (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@26| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@29| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@25| |newUnderlying'#0@@26|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@25| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@29|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@29|)))))) (or (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@26| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@30| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@26| |newUnderlying'#0@@26|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@26| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@30|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@30|)))))) (forall ((|key#25@@0| T@U) ) (!  (=> (= (type |key#25@@0|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#25@@0|)) (< (U_2_int |key#25@@0|) 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@31| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@27| |newUnderlying'#0@@26|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@27| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@31|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@31|)))))) ($Box |key#25@@0|))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@26|)) ($Box |key#25@@0|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@32| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@28| |newUnderlying'#0@@26|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@28| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@32|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@32|)))))) ($Box |key#25@@0|))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@26|)) ($Box |key#25@@0|))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@33| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@29| |newUnderlying'#0@@26|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@29| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@33|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@33|)))))) ($Box |key#25@@0|)))))))) :qid |MutableMapModelidfy.932:16| :skolemid |2754| :pattern ( (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@34| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@30| |newUnderlying'#0@@26|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@30| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@34|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@34|)))))) ($Box |key#25@@0|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@26|)) ($Box |key#25@@0|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@26|)) ($Box |key#25@@0|))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@35| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@31| |newUnderlying'#0@@26|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@31| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@35|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@35|)))))) ($Box |key#25@@0|))) ))))))) (and (=> (= (ControlFlow 0 1175080) (- 0 1204806)) (let ((|newUnderlying'#0@@27| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@36| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@32| |newUnderlying'#0@@27|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@32| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@36|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@36|)))) |newUnderlying'#0@@27|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@37| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@33| |newUnderlying'#0@@27|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@33| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@37|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@37|)))) |newUnderlying'#0@@27|) (=> (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@27| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@38| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@34| |newUnderlying'#0@@27|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@34| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@38|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@38|)))))) (or (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@27| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@39| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@35| |newUnderlying'#0@@27|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@35| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@39|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@39|)))))) (forall ((|key#26| Int) ) (!  (=> (and (<= (LitInt 0) |key#26|) (< |key#26| 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@40| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@36| |newUnderlying'#0@@27|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@36| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@40|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@40|)))))) ($Box (int_2_U |key#26|))))) (or (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@27|)) ($Box (int_2_U |key#26|))))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@27|)) ($Box (int_2_U |key#26|)))))))) :qid |MutableMapModelidfy.933:16| :skolemid |2755| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@27|)) ($Box (int_2_U |key#26|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@27|)) ($Box (int_2_U |key#26|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@41| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@37| |newUnderlying'#0@@27|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@37| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@41|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@41|)))))) ($Box (int_2_U |key#26|)))) )))))))) (=> (let ((|newUnderlying'#0@@28| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@42| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@38| |newUnderlying'#0@@28|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@38| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@42|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@42|)))) |newUnderlying'#0@@28|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@43| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@39| |newUnderlying'#0@@28|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@39| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@43|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@43|)))) |newUnderlying'#0@@28|) (=> (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@28| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@44| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@40| |newUnderlying'#0@@28|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@40| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@44|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@44|)))))) (or (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@28| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@45| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@41| |newUnderlying'#0@@28|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@41| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@45|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@45|)))))) (forall ((|key#26@@0| T@U) ) (!  (=> (= (type |key#26@@0|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#26@@0|)) (< (U_2_int |key#26@@0|) 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@46| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@42| |newUnderlying'#0@@28|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@42| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@46|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@46|)))))) ($Box |key#26@@0|)))) (or (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@28|)) ($Box |key#26@@0|)))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@28|)) ($Box |key#26@@0|)))))))) :qid |MutableMapModelidfy.933:16| :skolemid |2755| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@28|)) ($Box |key#26@@0|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@28|)) ($Box |key#26@@0|))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@47| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@43| |newUnderlying'#0@@28|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@43| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@47|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@47|)))))) ($Box |key#26@@0|))) ))))))) (and (=> (= (ControlFlow 0 1175080) (- 0 1205092)) (let ((|newUnderlying'#0@@29| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@48| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@44| |newUnderlying'#0@@29|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@44| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@48|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@48|)))) |newUnderlying'#0@@29|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@49| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@45| |newUnderlying'#0@@29|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@45| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@49|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@49|)))) |newUnderlying'#0@@29|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@29|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@29|) (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@29|))))))))) (=> (let ((|newUnderlying'#0@@30| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@50| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@46| |newUnderlying'#0@@30|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@46| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@50|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@50|)))) |newUnderlying'#0@@30|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@51| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@47| |newUnderlying'#0@@30|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@47| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@51|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@51|)))) |newUnderlying'#0@@30|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@30|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@30|) (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@30|)))))))) (and (=> (= (ControlFlow 0 1175080) (- 0 1205194)) (let ((|newUnderlying'#0@@31| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@52| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@48| |newUnderlying'#0@@31|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@48| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@52|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@52|)))) |newUnderlying'#0@@31|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@53| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@49| |newUnderlying'#0@@31|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@49| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@53|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@53|)))) |newUnderlying'#0@@31|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@31|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@31|) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@31|)) 18446744073709551616))))))) (=> (let ((|newUnderlying'#0@@32| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@54| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@50| |newUnderlying'#0@@32|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@50| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@54|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@54|)))) |newUnderlying'#0@@32|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@55| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@51| |newUnderlying'#0@@32|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@51| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@55|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@55|)))) |newUnderlying'#0@@32|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@32|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@32|) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@32|)) 18446744073709551616)))))) (and (=> (= (ControlFlow 0 1175080) (- 0 1205294)) (let ((|newUnderlying'#0@@33| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@56| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@52| |newUnderlying'#0@@33|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@52| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@56|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@56|)))) |newUnderlying'#0@@33|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@57| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@53| |newUnderlying'#0@@33|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@53| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@57|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@57|)))) |newUnderlying'#0@@33|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@33|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@33|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#0@@33|) 18446744073709551616))))))) (=> (let ((|newUnderlying'#0@@34| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@58| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@54| |newUnderlying'#0@@34|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@54| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@58|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@58|)))) |newUnderlying'#0@@34|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@59| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@55| |newUnderlying'#0@@34|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@55| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@59|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@59|)))) |newUnderlying'#0@@34|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@34|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@34|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#0@@34|) 18446744073709551616)))))) (and (=> (= (ControlFlow 0 1175080) (- 0 1205392)) (let ((|newUnderlying'#0@@35| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@60| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@56| |newUnderlying'#0@@35|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@56| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@60|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@60|)))) |newUnderlying'#0@@35|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@61| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@57| |newUnderlying'#0@@35|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@57| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@61|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@61|)))) |newUnderlying'#0@@35|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@35|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@35|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#0@@35|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@35|))))))))) (=> (let ((|newUnderlying'#0@@36| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@62| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@58| |newUnderlying'#0@@36|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@58| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@62|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@62|)))) |newUnderlying'#0@@36|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@63| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@59| |newUnderlying'#0@@36|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@59| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@63|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@63|)))) |newUnderlying'#0@@36|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@36|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@36|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#0@@36|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@36|)))))))) (and (=> (= (ControlFlow 0 1175080) (- 0 1205494)) (let ((|newUnderlying'#0@@37| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@64| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@60| |newUnderlying'#0@@37|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@60| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@64|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@64|)))) |newUnderlying'#0@@37|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@65| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@61| |newUnderlying'#0@@37|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@61| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@65|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@65|)))) |newUnderlying'#0@@37|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@37|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@37|) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@37|)) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#0@@37|)))))))) (=> (let ((|newUnderlying'#0@@38| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@66| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@62| |newUnderlying'#0@@38|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@62| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@66|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@66|)))) |newUnderlying'#0@@38|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@67| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@63| |newUnderlying'#0@@38|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@63| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@67|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@67|)))) |newUnderlying'#0@@38|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@38|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@38|) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@38|)) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#0@@38|))))))) (and (=> (= (ControlFlow 0 1175080) (- 0 1205596)) (let ((|newUnderlying'#0@@39| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@68| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@64| |newUnderlying'#0@@39|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@64| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@68|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@68|)))) |newUnderlying'#0@@39|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@69| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@65| |newUnderlying'#0@@39|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@65| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@69|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@69|)))) |newUnderlying'#0@@39|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@39|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@39|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@39|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@39|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@39|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@39|)) (forall ((|key#27| Int) ) (!  (=> (and (<= (LitInt 0) |key#27|) (< |key#27| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@39|)) ($Box (int_2_U |key#27|)))) (exists ((|skips#11| Int) ) (!  (and (<= (LitInt 0) |skips#11|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@39|) |skips#11| |key#27|)) :qid |MutableMapModelidfy.257:50| :skolemid |2758| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@39|) |skips#11| |key#27|)) )))) :qid |MutableMapModelidfy.257:16| :skolemid |2759| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@39|)) ($Box (int_2_U |key#27|)))) )))))))))) (=> (let ((|newUnderlying'#0@@40| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@70| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@66| |newUnderlying'#0@@40|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@66| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@70|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@70|)))) |newUnderlying'#0@@40|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@71| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@67| |newUnderlying'#0@@40|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@67| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@71|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@71|)))) |newUnderlying'#0@@40|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@40|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@40|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@40|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@40|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@40|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@40|)) (forall ((|key#27@@0| T@U) ) (!  (=> (= (type |key#27@@0|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#27@@0|)) (< (U_2_int |key#27@@0|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@40|)) ($Box |key#27@@0|))) (exists ((|skips#11@@0| Int) ) (!  (and (<= (LitInt 0) |skips#11@@0|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@40|) |skips#11@@0| (U_2_int |key#27@@0|))) :qid |MutableMapModelidfy.257:50| :skolemid |2758| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@40|) |skips#11@@0| (U_2_int |key#27@@0|))) ))))) :qid |MutableMapModelidfy.257:16| :skolemid |2759| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@40|)) ($Box |key#27@@0|))) ))))))))) (and (=> (= (ControlFlow 0 1175080) (- 0 1205800)) (let ((|newUnderlying'#0@@41| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@72| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@68| |newUnderlying'#0@@41|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@68| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@72|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@72|)))) |newUnderlying'#0@@41|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@73| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@69| |newUnderlying'#0@@41|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@69| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@73|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@73|)))) |newUnderlying'#0@@41|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@41|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@41|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@41|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@41|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@41|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@41|)) (forall ((|slot#36| T@U) ) (!  (=> (and (and (= (type |slot#36|) DatatypeTypeType) ($Is |slot#36| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@41|)) |slot#36|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@41|) |slot#36|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@41|) |slot#36|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@41|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@41|) |slot#36|)) :qid |MutableMapModelidfy.258:16| :skolemid |2760| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@41|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@41|) |slot#36|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@41|) |slot#36|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@41|) |slot#36|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@41|)) |slot#36|)) )))))))))) (=> (let ((|newUnderlying'#0@@42| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@74| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@70| |newUnderlying'#0@@42|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@70| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@74|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@74|)))) |newUnderlying'#0@@42|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@75| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@71| |newUnderlying'#0@@42|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@71| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@75|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@75|)))) |newUnderlying'#0@@42|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@42|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@42|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@42|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@42|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@42|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@42|)) (forall ((|slot#36@@0| T@U) ) (!  (=> (and (and (= (type |slot#36@@0|) DatatypeTypeType) ($Is |slot#36@@0| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@42|)) |slot#36@@0|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@42|) |slot#36@@0|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@42|) |slot#36@@0|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@42|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@42|) |slot#36@@0|)) :qid |MutableMapModelidfy.258:16| :skolemid |2760| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@42|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@42|) |slot#36@@0|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@42|) |slot#36@@0|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@42|) |slot#36@@0|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@42|)) |slot#36@@0|)) ))))))))) (and (=> (= (ControlFlow 0 1175080) (- 0 1206030)) (let ((|newUnderlying'#0@@43| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@76| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@72| |newUnderlying'#0@@43|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@72| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@76|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@76|)))) |newUnderlying'#0@@43|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@77| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@73| |newUnderlying'#0@@43|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@73| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@77|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@77|)))) |newUnderlying'#0@@43|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@43|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@43|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@43|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@43|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@43|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@43|)) (=> (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@43|)) (or (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@43|)) (forall ((|slot1#11| T@U) (|slot2#11| T@U) ) (!  (=> (and (and (and (= (type |slot1#11|) DatatypeTypeType) (= (type |slot2#11|) DatatypeTypeType)) (and ($Is |slot1#11| Tclass.MutableMapModel.Slot) ($Is |slot2#11| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@43|) |slot1#11| |slot2#11|)) (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@43|)) |slot1#11| |slot2#11|)) :qid |MutableMapModelidfy.242:12| :skolemid |2761| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@43|)) |slot1#11| |slot2#11|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@43|) |slot1#11| |slot2#11|)) )))))))))))) (=> (let ((|newUnderlying'#0@@44| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@78| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@74| |newUnderlying'#0@@44|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@74| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@78|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@78|)))) |newUnderlying'#0@@44|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@79| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@75| |newUnderlying'#0@@44|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@75| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@79|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@79|)))) |newUnderlying'#0@@44|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@44|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@44|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@44|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@44|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@44|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@44|)) (=> (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@44|)) (or (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@44|)) (forall ((|slot1#11@@0| T@U) (|slot2#11@@0| T@U) ) (!  (=> (and (and (and (= (type |slot1#11@@0|) DatatypeTypeType) (= (type |slot2#11@@0|) DatatypeTypeType)) (and ($Is |slot1#11@@0| Tclass.MutableMapModel.Slot) ($Is |slot2#11@@0| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@44|) |slot1#11@@0| |slot2#11@@0|)) (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@44|)) |slot1#11@@0| |slot2#11@@0|)) :qid |MutableMapModelidfy.242:12| :skolemid |2761| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@44|)) |slot1#11@@0| |slot2#11@@0|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@44|) |slot1#11@@0| |slot2#11@@0|)) ))))))))))) (and (=> (= (ControlFlow 0 1175080) (- 0 1206240)) (let ((|newUnderlying'#0@@45| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@80| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@76| |newUnderlying'#0@@45|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@76| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@80|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@80|)))) |newUnderlying'#0@@45|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@81| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@77| |newUnderlying'#0@@45|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@77| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@81|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@81|)))) |newUnderlying'#0@@45|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@45|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@45|) (=> (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@45|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@45|)) (or (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@45|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@45|)) (forall ((|slot#37| T@U) ) (!  (=> (and (and (= (type |slot#37|) DatatypeTypeType) ($Is |slot#37| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@45|)) |slot#37|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@45|) |slot#37|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@45|) |slot#37| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@45|))) :qid |MutableMapModelidfy.284:12| :skolemid |2766| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@45|) |slot#37| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@45|))) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@45|) |slot#37|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@45|)) |slot#37|)) )))))))))) (=> (let ((|newUnderlying'#0@@46| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@82| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@78| |newUnderlying'#0@@46|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@78| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@82|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@82|)))) |newUnderlying'#0@@46|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@83| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@79| |newUnderlying'#0@@46|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@79| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@83|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@83|)))) |newUnderlying'#0@@46|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@46|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@46|) (=> (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@46|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@46|)) (or (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@46|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@46|)) (forall ((|slot#37@@0| T@U) ) (!  (=> (and (and (= (type |slot#37@@0|) DatatypeTypeType) ($Is |slot#37@@0| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@46|)) |slot#37@@0|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@46|) |slot#37@@0|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@46|) |slot#37@@0| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@46|))) :qid |MutableMapModelidfy.284:12| :skolemid |2766| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@46|) |slot#37@@0| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@46|))) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@46|) |slot#37@@0|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@46|)) |slot#37@@0|)) ))))))))) (and (=> (= (ControlFlow 0 1175080) (- 0 1206446)) (let ((|newUnderlying'#0@@47| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@84| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@80| |newUnderlying'#0@@47|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@80| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@84|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@84|)))) |newUnderlying'#0@@47|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@85| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@81| |newUnderlying'#0@@47|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@81| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@85|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@85|)))) |newUnderlying'#0@@47|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@47|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@47|) (=> (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@47|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@47|)) (or (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@47|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@47|)) (forall ((|slot#38| T@U) ) (!  (=> (and (and (= (type |slot#38|) DatatypeTypeType) ($Is |slot#38| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@47|)) |slot#38|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@47|) |slot#38|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@47|) |slot#38| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@47|))) :qid |MutableMapModelidfy.291:12| :skolemid |2768| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@47|) |slot#38| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@47|))) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@47|) |slot#38|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@47|)) |slot#38|)) )))))))))) (=> (let ((|newUnderlying'#0@@48| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@86| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@82| |newUnderlying'#0@@48|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@82| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@86|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@86|)))) |newUnderlying'#0@@48|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@87| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@83| |newUnderlying'#0@@48|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@83| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@87|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@87|)))) |newUnderlying'#0@@48|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@48|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@48|) (=> (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@48|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@48|)) (or (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@48|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@48|)) (forall ((|slot#38@@0| T@U) ) (!  (=> (and (and (= (type |slot#38@@0|) DatatypeTypeType) ($Is |slot#38@@0| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@48|)) |slot#38@@0|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@48|) |slot#38@@0|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@48|) |slot#38@@0| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@48|))) :qid |MutableMapModelidfy.291:12| :skolemid |2768| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@48|) |slot#38@@0| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@48|))) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@48|) |slot#38@@0|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@48|)) |slot#38@@0|)) ))))))))) (and (=> (= (ControlFlow 0 1175080) (- 0 1206652)) (let ((|newUnderlying'#0@@49| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@88| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@84| |newUnderlying'#0@@49|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@84| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@88|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@88|)))) |newUnderlying'#0@@49|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@89| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@85| |newUnderlying'#0@@49|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@85| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@89|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@89|)))) |newUnderlying'#0@@49|) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@49|)) (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@90| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@86| |newUnderlying'#0@@49|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@86| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@90|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@90|)))))))))) (=> (let ((|newUnderlying'#0@@50| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@91| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@87| |newUnderlying'#0@@50|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@87| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@91|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@91|)))) |newUnderlying'#0@@50|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@92| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@88| |newUnderlying'#0@@50|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@88| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@92|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@92|)))) |newUnderlying'#0@@50|) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@50|)) (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@93| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@89| |newUnderlying'#0@@50|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@89| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@93|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@93|))))))))) (=> (= (ControlFlow 0 1175080) (- 0 1206764)) (let ((|newUnderlying'#0@@51| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying#0@@7| |i#0@@115|))) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#0@@51|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@51|)) 2)))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((anon9_correct  (=> (forall ((|key#0_3| T@U) ) (!  (=> (= (type |key#0_3|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0_3|)) (< (U_2_int |key#0_3|) 18446744073709551616)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box |key#0_3|)))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#0_3|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|))))))) :qid |MutableMapModelidfy.1099:21| :skolemid |2777| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#0_3|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#0_3|))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box |key#0_3|))) )) (and (=> (= (ControlFlow 0 321187) (- 0 1198197)) (forall ((|key#0_3@@0| Int) ) (!  (=> (and (<= (LitInt 0) |key#0_3@@0|) (< |key#0_3@@0| 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#0_3@@0|))))) (or (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_3@@0|))))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_3@@0|)))))))) :qid |MutableMapModelidfy.1099:21| :skolemid |2779| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_3@@0|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_3@@0|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#0_3@@0|)))) ))) (=> (forall ((|key#0_3@@1| T@U) ) (!  (=> (= (type |key#0_3@@1|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0_3@@1|)) (< (U_2_int |key#0_3@@1|) 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box |key#0_3@@1|)))) (or (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#0_3@@1|)))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#0_3@@1|)))))))) :qid |MutableMapModelidfy.1099:21| :skolemid |2779| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#0_3@@1|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#0_3@@1|))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box |key#0_3@@1|))) )) (=> (and (and (and (and (and ($Is |dt_update_tmp#1#Z#0_0@0| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V)) ($IsAlloc |dt_update_tmp#1#Z#0_0@0| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V) $Heap@1)) (= |let#0_0#0#0| |self#0@@200|)) (and ($Is |let#0_0#0#0| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V)) (= |dt_update_tmp#1#Z#0_0@0| |let#0_0#0#0|))) (and (and ($Is |dt_update#underlying#1#Z#0_0@0| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V)) ($IsAlloc |dt_update#underlying#1#Z#0_0@0| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V) $Heap@1)) (and (= |let#0_1#0#0| |newUnderlying#0@@7|) ($Is |let#0_1#0#0| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V))))) (and (and (and (= |dt_update#underlying#1#Z#0_0@0| |let#0_1#0#0|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#Z#0_0@0|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#Z#0_0@0|) (let ((|dt_update_tmp#1#0_0| |self#0@@200|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#0_0|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#1#0_0|))))) (and (and (= |self'#0_0@0| (let ((|dt_update_tmp#1#0_0@@0| |self#0@@200|)) (let ((|dt_update#underlying#1#0_0| |newUnderlying#0@@7|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#1#0_0| (MutableMapModel.LinearHashMap.count |dt_update_tmp#1#0_0@@0|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#1#0_0@@0|))))) ($IsAlloc |newUnderlying#0@@7| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V) $Heap@1)) (and (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|))))) (and (=> (= (ControlFlow 0 321187) (- 0 1198468)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)))))) (and (=> (= (ControlFlow 0 321187) (- 0 1198496)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) 18446744073709551616)))) (and (=> (= (ControlFlow 0 321187) (- 0 1198522)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) 18446744073709551616)))) (and (=> (= (ControlFlow 0 321187) (- 0 1198546)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)))))) (and (=> (= (ControlFlow 0 321187) (- 0 1198574)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|))))) (and (=> (= (ControlFlow 0 321187) (- 0 1198602)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|key#0_4| Int) ) (!  (=> (and (<= (LitInt 0) |key#0_4|) (< |key#0_4| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_4|)))) (exists ((|skips#0_0| Int) ) (!  (and (<= (LitInt 0) |skips#0_0|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |skips#0_0| |key#0_4|)) :qid |MutableMapModelidfy.257:50| :skolemid |2780| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |skips#0_0| |key#0_4|)) )))) :qid |MutableMapModelidfy.257:16| :skolemid |2781| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_4|)))) ))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1198732)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|slot#0_0| T@U) ) (!  (=> (and (and (= (type |slot#0_0|) DatatypeTypeType) ($Is |slot#0_0| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#0_0|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_0|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_0|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|) |slot#0_0|)) :qid |MutableMapModelidfy.258:16| :skolemid |2782| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|) |slot#0_0|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_0|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_0|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#0_0|)) ))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1198888)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (=> (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) (or (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) (forall ((|slot1#0_0| T@U) (|slot2#0_0| T@U) ) (!  (=> (and (and (and (= (type |slot1#0_0|) DatatypeTypeType) (= (type |slot2#0_0|) DatatypeTypeType)) (and ($Is |slot1#0_0| Tclass.MutableMapModel.Slot) ($Is |slot2#0_0| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot1#0_0| |slot2#0_0|)) (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot1#0_0| |slot2#0_0|)) :qid |MutableMapModelidfy.242:12| :skolemid |2783| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot1#0_0| |slot2#0_0|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot1#0_0| |slot2#0_0|)) ))))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1199024)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|slot#0_1| T@U) ) (!  (=> (and (and (= (type |slot#0_1|) DatatypeTypeType) ($Is |slot#0_1| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#0_1|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_1|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_1| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :qid |MutableMapModelidfy.284:12| :skolemid |2788| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_1| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_1|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#0_1|)) ))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1199156)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|slot#0_2| T@U) ) (!  (=> (and (and (= (type |slot#0_2|) DatatypeTypeType) ($Is |slot#0_2| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#0_2|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_2|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_2| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :qid |MutableMapModelidfy.291:12| :skolemid |2790| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_2| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_2|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#0_2|)) ))))))) (=> (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (and (and ($IsAlloc |self'#0_0@0| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V) $Heap@1) ($IsAlloc |newUnderlying#0@@7| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V) $Heap@1)) (and (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|))) (and (=> (= (ControlFlow 0 321187) (- 0 1199329)) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (= (|Map#Card| (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) (MutableMapModel.LinearHashMap.count |self'#0_0@0|))))) (and (=> (= (ControlFlow 0 321187) (- 0 1199357)) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) (or (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) (forall ((|key#0_5| Int) ) (!  (=> (and (<= (LitInt 0) |key#0_5|) (< |key#0_5| 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) ($Box (int_2_U |key#0_5|)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_5|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) ($Box (int_2_U |key#0_5|)))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_5|)))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) ($Box (int_2_U |key#0_5|)))))))) :qid |MutableMapModelidfy.932:16| :skolemid |2792| :pattern ( (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) ($Box (int_2_U |key#0_5|)))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_5|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_5|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) ($Box (int_2_U |key#0_5|)))) ))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1199546)) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) (or (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) (forall ((|key#0_6| Int) ) (!  (=> (and (<= (LitInt 0) |key#0_6|) (< |key#0_6| 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) ($Box (int_2_U |key#0_6|))))) (or (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_6|))))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_6|)))))))) :qid |MutableMapModelidfy.933:16| :skolemid |2793| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_6|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_6|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) ($Box (int_2_U |key#0_6|)))) ))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1199700)) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1199746)) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) 18446744073709551616)))))) (and (=> (= (ControlFlow 0 321187) (- 0 1199790)) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) 18446744073709551616)))))) (and (=> (= (ControlFlow 0 321187) (- 0 1199832)) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1199878)) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1199924)) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|key#0_7| Int) ) (!  (=> (and (<= (LitInt 0) |key#0_7|) (< |key#0_7| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_7|)))) (exists ((|skips#0_1| Int) ) (!  (and (<= (LitInt 0) |skips#0_1|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |skips#0_1| |key#0_7|)) :qid |MutableMapModelidfy.257:50| :skolemid |2796| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |skips#0_1| |key#0_7|)) )))) :qid |MutableMapModelidfy.257:16| :skolemid |2797| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_7|)))) ))))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1200072)) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|slot#0_3| T@U) ) (!  (=> (and (and (= (type |slot#0_3|) DatatypeTypeType) ($Is |slot#0_3| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#0_3|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_3|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_3|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|) |slot#0_3|)) :qid |MutableMapModelidfy.258:16| :skolemid |2798| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|) |slot#0_3|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_3|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_3|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#0_3|)) ))))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1200246)) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (=> (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) (or (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) (forall ((|slot1#0_1| T@U) (|slot2#0_1| T@U) ) (!  (=> (and (and (and (= (type |slot1#0_1|) DatatypeTypeType) (= (type |slot2#0_1|) DatatypeTypeType)) (and ($Is |slot1#0_1| Tclass.MutableMapModel.Slot) ($Is |slot2#0_1| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot1#0_1| |slot2#0_1|)) (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot1#0_1| |slot2#0_1|)) :qid |MutableMapModelidfy.242:12| :skolemid |2799| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot1#0_1| |slot2#0_1|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot1#0_1| |slot2#0_1|)) ))))))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1200400)) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|slot#0_4| T@U) ) (!  (=> (and (and (= (type |slot#0_4|) DatatypeTypeType) ($Is |slot#0_4| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#0_4|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_4|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_4| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :qid |MutableMapModelidfy.284:12| :skolemid |2804| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_4| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_4|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#0_4|)) ))))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1200550)) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|slot#0_5| T@U) ) (!  (=> (and (and (= (type |slot#0_5|) DatatypeTypeType) ($Is |slot#0_5| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#0_5|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_5|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_5| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :qid |MutableMapModelidfy.291:12| :skolemid |2806| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_5| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0_5|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#0_5|)) ))))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1200700)) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) (MutableMapModel.LinearHashMap.contents |self'#0_0@0|))))) (=> (and (and (and (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| |newUnderlying#0@@7|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|)) (and ($IsAlloc |newUnderlying#0@@7| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V) $Heap@1) (= |##contents#0_0@0| (MutableMapModel.LinearHashMap.contents |self#0@@200|)))) (and (and ($IsAlloc |##contents#0_0@0| (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.LemmaReallocIterateResult$V) $Heap@1) (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| (MutableMapModel.LinearHashMap.contents |self#0@@200|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| (MutableMapModel.LinearHashMap.contents |self#0@@200|))))) (and (=> (= (ControlFlow 0 321187) (- 0 1200805)) (=> (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (forall ((|key#0_8| Int) ) (!  (=> (and (<= (LitInt 0) |key#0_8|) (< |key#0_8| 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#0_8|)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_8|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#0_8|)))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_8|)))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#0_8|)))))))) :qid |MutableMapModelidfy.932:16| :skolemid |2808| :pattern ( (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#0_8|)))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_8|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_8|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#0_8|)))) ))))) (and (=> (= (ControlFlow 0 321187) (- 0 1200983)) (=> (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (forall ((|key#0_9| Int) ) (!  (=> (and (<= (LitInt 0) |key#0_9|) (< |key#0_9| 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#0_9|))))) (or (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_9|))))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_9|)))))))) :qid |MutableMapModelidfy.933:16| :skolemid |2809| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_9|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_9|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#0_9|)))) ))))) (=> (and (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|)) (=> (and (and (and (= |##elements#0_1@0| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) ($IsAlloc |##elements#0_1@0| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.LemmaReallocIterateResult$V)) $Heap@1)) (and (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|) (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|))) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|))) (and (=> (= (ControlFlow 0 321187) (- 0 1201189)) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) (MutableMapModel.LinearHashMap.contents |self#0@@200|))) (=> (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS $LZ) (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (=> (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|) (= |newtype$check#0_2@0| (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|))) (and (=> (= (ControlFlow 0 321187) (- 0 1201241)) (<= (LitInt 0) |newtype$check#0_2@0|)) (=> (<= (LitInt 0) |newtype$check#0_2@0|) (=> (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|) (=> (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|)) (and (=> (= (ControlFlow 0 321187) (- 0 1201262)) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) 2))) (=> (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) 2)) (=> (MutableMapModel.LinearHashMap.LinearHashMap_q |self'#0_0@0|) (=> (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (= |newtype$check#0_3@0| (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)))) (and (=> (= (ControlFlow 0 321187) (- 0 1201297)) (<= (LitInt 0) |newtype$check#0_3@0|)) (=> (<= (LitInt 0) |newtype$check#0_3@0|) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self'#0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) (=> (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self'#0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self'#0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)))) (and (=> (= (ControlFlow 0 321187) (- 0 1201334)) (< (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) 2))) (=> (< (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) 2)) (=> (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self'#0_0@0|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self'#0_0@0|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|))) (and (=> (= (ControlFlow 0 321187) (- 0 1201368)) (|Map#Equal| (MutableMapModel.LinearHashMap.contents |self'#0_0@0|) (MutableMapModel.LinearHashMap.contents |self#0@@200|))) (=> (|Map#Equal| (MutableMapModel.LinearHashMap.contents |self'#0_0@0|) (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (=> (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self'#0_0@0|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self'#0_0@0|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|))) (and (=> (= (ControlFlow 0 321187) (- 0 1201393)) (= (MutableMapModel.LinearHashMap.count |self'#0_0@0|) (MutableMapModel.LinearHashMap.count |self#0@@200|))) (=> (= (MutableMapModel.LinearHashMap.count |self'#0_0@0|) (MutableMapModel.LinearHashMap.count |self#0@@200|)) (=> (MutableMapModel.LinearHashMap.LinearHashMap_q |self'#0_0@0|) (=> (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self'#0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self'#0_0@0|) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self'#0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))))) (and (=> (= (ControlFlow 0 321187) (- 0 1201428)) (<= (MutableMapModel.LinearHashMap.count |self'#0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)))) (=> (<= (MutableMapModel.LinearHashMap.count |self'#0_0@0|) (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) (=> ($IsAlloc |self'#0_0@0| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V) $Heap@1) (=> (and (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|)) (and (=> (= (ControlFlow 0 321187) (- 0 1201458)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (= (|Map#Card| (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) (MutableMapModel.LinearHashMap.count |self'#0_0@0|))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1201502)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (=> (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|) (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) (or (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|) (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) (forall ((|key#0_10| Int) ) (!  (=> (and (<= (LitInt 0) |key#0_10|) (< |key#0_10| 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) ($Box (int_2_U |key#0_10|)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) ($Box (int_2_U |key#0_10|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) ($Box (int_2_U |key#0_10|)))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) ($Box (int_2_U |key#0_10|)))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) ($Box (int_2_U |key#0_10|)))))))) :qid |MutableMapModelidfy.932:16| :skolemid |2812| :pattern ( (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) ($Box (int_2_U |key#0_10|)))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) ($Box (int_2_U |key#0_10|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) ($Box (int_2_U |key#0_10|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) ($Box (int_2_U |key#0_10|)))) ))))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1201713)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (=> (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|) (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) (or (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|) (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) (forall ((|key#0_11| Int) ) (!  (=> (and (<= (LitInt 0) |key#0_11|) (< |key#0_11| 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) ($Box (int_2_U |key#0_11|))))) (or (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) ($Box (int_2_U |key#0_11|))))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) ($Box (int_2_U |key#0_11|)))))))) :qid |MutableMapModelidfy.933:16| :skolemid |2813| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) ($Box (int_2_U |key#0_11|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) ($Box (int_2_U |key#0_11|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) ($Box (int_2_U |key#0_11|)))) ))))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1201889)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))))))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1201954)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) 18446744073709551616)))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1202017)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (< (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) 18446744073709551616)))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1202078)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (< (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))))))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1202144)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)))))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1202210)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) (forall ((|key#0_12| Int) ) (!  (=> (and (<= (LitInt 0) |key#0_12|) (< |key#0_12| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) ($Box (int_2_U |key#0_12|)))) (exists ((|skips#0_2| Int) ) (!  (and (<= (LitInt 0) |skips#0_2|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) |skips#0_2| |key#0_12|)) :qid |MutableMapModelidfy.257:50| :skolemid |2816| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) |skips#0_2| |key#0_12|)) )))) :qid |MutableMapModelidfy.257:16| :skolemid |2817| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) ($Box (int_2_U |key#0_12|)))) ))))))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1202384)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) (forall ((|slot#0_6| T@U) ) (!  (=> (and (and (= (type |slot#0_6|) DatatypeTypeType) ($Is |slot#0_6| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) |slot#0_6|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) |slot#0_6|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) |slot#0_6|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) |slot#0_6|)) :qid |MutableMapModelidfy.258:16| :skolemid |2818| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) |slot#0_6|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) |slot#0_6|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) |slot#0_6|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) |slot#0_6|)) ))))))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1202590)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) (=> (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) (or (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) (forall ((|slot1#0_2| T@U) (|slot2#0_2| T@U) ) (!  (=> (and (and (and (= (type |slot1#0_2|) DatatypeTypeType) (= (type |slot2#0_2|) DatatypeTypeType)) (and ($Is |slot1#0_2| Tclass.MutableMapModel.Slot) ($Is |slot2#0_2| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) |slot1#0_2| |slot2#0_2|)) (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) |slot1#0_2| |slot2#0_2|)) :qid |MutableMapModelidfy.242:12| :skolemid |2819| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) |slot1#0_2| |slot2#0_2|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) |slot1#0_2| |slot2#0_2|)) ))))))))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1202772)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (=> (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) (or (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) (forall ((|slot#0_7| T@U) ) (!  (=> (and (and (= (type |slot#0_7|) DatatypeTypeType) ($Is |slot#0_7| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) |slot#0_7|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) |slot#0_7|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) |slot#0_7| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)))) :qid |MutableMapModelidfy.284:12| :skolemid |2824| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) |slot#0_7| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)))) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) |slot#0_7|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) |slot#0_7|)) ))))))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1202952)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (=> (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) (or (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) (forall ((|slot#0_8| T@U) ) (!  (=> (and (and (= (type |slot#0_8|) DatatypeTypeType) ($Is |slot#0_8| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) |slot#0_8|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) |slot#0_8|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) |slot#0_8| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)))) :qid |MutableMapModelidfy.291:12| :skolemid |2826| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) |slot#0_8| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)))) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) |slot#0_8|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) |slot#0_8|)) ))))))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1203132)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0| (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|)) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) (MutableMapModel.LinearHashMap.contents |self'#0_0@0|))))))) (and (=> (= (ControlFlow 0 321187) (- 0 1203186)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self'#0_0@0|))) (MutableMapModel.LinearHashMap.contents |self'#0_0@0|))))) (and (=> (= (ControlFlow 0 321187) (- 0 1203220)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (= (|Map#Card| (MutableMapModel.LinearHashMap.contents |self'#0_0@0|)) (MutableMapModel.LinearHashMap.count |self'#0_0@0|))))) (and (=> (= (ControlFlow 0 321187) (- 0 1203244)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (<= (MutableMapModel.LinearHashMap.count |self'#0_0@0|) (LitInt (Div 18446744073709551616 (LitInt 8))))))) (=> (and (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0_0@0|) (= (ControlFlow 0 321187) 1175080)) GeneratedUnifiedExit_correct)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((anon64_Else_correct  (=> (and (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_2@0|))))) (= (ControlFlow 0 321182) 321187)) anon9_correct))) (let ((anon64_Then_correct  (=> (and (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_2@0|)))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|)) (and (=> (= (ControlFlow 0 321180) (- 0 1198061)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_2@0|))))) (=> (= (ControlFlow 0 321180) 321187) anon9_correct))))) (let ((anon63_Then_correct  (=> (and (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#0_2@0|))))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|)) (and (=> (= (ControlFlow 0 321178) 321180) anon64_Then_correct) (=> (= (ControlFlow 0 321178) 321182) anon64_Else_correct))))) (let ((anon63_Else_correct  (=> (and (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#0_2@0|)))) (= (ControlFlow 0 321184) 321187)) anon9_correct))) (let ((anon62_Then_correct  (=> (and (and (<= (LitInt 0) |key#0_2@0|) (< |key#0_2@0| 18446744073709551616)) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|)) (and (=> (= (ControlFlow 0 321171) 321178) anon63_Then_correct) (=> (= (ControlFlow 0 321171) 321184) anon63_Else_correct))))) (let ((anon62_Else_correct  (=> (and (not (and (<= (LitInt 0) |key#0_2@0|) (< |key#0_2@0| 18446744073709551616))) (= (ControlFlow 0 321186) 321187)) anon9_correct))) (let ((anon5_correct  (=> (forall ((|key#0_1| T@U) ) (!  (=> (= (type |key#0_1|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0_1|)) (< (U_2_int |key#0_1|) 18446744073709551616)) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box |key#0_1|))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|))) (=> (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box |key#0_1|))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#0_1|)))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box |key#0_1|))) (and (|$IsA#Options.Option| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#0_1|)))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|))))))))) :qid |MutableMapModelidfy.1098:21| :skolemid |2774| :pattern ( (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box |key#0_1|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#0_1|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#0_1|))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box |key#0_1|))) )) (and (=> (= (ControlFlow 0 321165) (- 0 1197827)) (forall ((|key#0_1@@0| Int) ) (!  (=> (and (<= (LitInt 0) |key#0_1@@0|) (< |key#0_1@@0| 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#0_1@@0|)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_1@@0|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#0_1@@0|)))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_1@@0|)))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#0_1@@0|)))))))) :qid |MutableMapModelidfy.1098:21| :skolemid |2776| :pattern ( (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#0_1@@0|)))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_1@@0|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_1@@0|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#0_1@@0|)))) ))) (=> (forall ((|key#0_1@@1| T@U) ) (!  (=> (= (type |key#0_1@@1|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0_1@@1|)) (< (U_2_int |key#0_1@@1|) 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box |key#0_1@@1|))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#0_1@@1|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box |key#0_1@@1|))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#0_1@@1|))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box |key#0_1@@1|)))))))) :qid |MutableMapModelidfy.1098:21| :skolemid |2776| :pattern ( (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box |key#0_1@@1|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#0_1@@1|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#0_1@@1|))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box |key#0_1@@1|))) )) (and (=> (= (ControlFlow 0 321165) 321171) anon62_Then_correct) (=> (= (ControlFlow 0 321165) 321186) anon62_Else_correct))))))) (let ((anon61_Else_correct  (=> (and (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_0@0|))))) (= (ControlFlow 0 321154) 321165)) anon5_correct))) (let ((anon61_Then_correct  (=> (and (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_0@0|)))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|)) (and (=> (= (ControlFlow 0 321152) (- 0 1197604)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0_0@0|))))) (=> (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (and (=> (= (ControlFlow 0 321152) (- 0 1197619)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#0_0@0|))))) (=> (= (ControlFlow 0 321152) 321165) anon5_correct))))))) (let ((anon60_Then_correct  (=> (and (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#0_0@0|)))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|)) (and (=> (= (ControlFlow 0 321150) 321152) anon61_Then_correct) (=> (= (ControlFlow 0 321150) 321154) anon61_Else_correct))))) (let ((anon60_Else_correct  (=> (and (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#0_0@0|))))) (= (ControlFlow 0 321156) 321165)) anon5_correct))) (let ((anon59_Then_correct  (=> (and (and (<= (LitInt 0) |key#0_0@0|) (< |key#0_0@0| 18446744073709551616)) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|)) (and (=> (= (ControlFlow 0 321143) 321150) anon60_Then_correct) (=> (= (ControlFlow 0 321143) 321156) anon60_Else_correct))))) (let ((anon59_Else_correct  (=> (and (not (and (<= (LitInt 0) |key#0_0@0|) (< |key#0_0@0| 18446744073709551616))) (= (ControlFlow 0 321158) 321165)) anon5_correct))) (let ((anon58_Then_correct  (=> (= |i#0@@115| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) (and (=> (= (ControlFlow 0 321136) (- 0 1182229)) (<= (LitInt 0) |i#0@@115|)) (=> (<= (LitInt 0) |i#0@@115|) (=> (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) (and (=> (= (ControlFlow 0 321136) (- 0 1182258)) (= |i#0@@115| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))))) (=> (= |i#0@@115| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (and (=> (= (ControlFlow 0 321136) (- 0 1182280)) (and (<= 0 |i#0@@115|) (<= |i#0@@115| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (=> (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) (and (=> (= (ControlFlow 0 321136) (- 0 1182336)) (|Seq#Equal| (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |i#0@@115|) (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) (=> (|Seq#Equal| (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |i#0@@115|) (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (=> (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (=> (and (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (= |##elements#0_0@0| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) (and ($IsAlloc |##elements#0_0@0| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.LemmaReallocIterateResult$V)) $Heap@0) (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))))) (and (=> (= (ControlFlow 0 321136) (- 0 1182420)) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |transferredContents#0|)) (=> (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS $LZ) (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |transferredContents#0|) (and (=> (= (ControlFlow 0 321136) (- 0 1182468)) (forall (($o@@236 T@U) ($f@@204 T@U) ) (! (let ((alpha@@211 (FieldTypeInv0 (type $f@@204)))) (=> (and (and (= (type $o@@236) refType) (= (type $f@@204) (FieldType alpha@@211))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@236 $f@@204)))) :qid |MutableMapModelidfy.1093:56| :skolemid |2773| :no-pattern (type $o@@236) :no-pattern (type $f@@204) :no-pattern (U_2_int $o@@236) :no-pattern (U_2_bool $o@@236) :no-pattern (U_2_int $f@@204) :no-pattern (U_2_bool $f@@204) ))) (=> (forall (($o@@237 T@U) ($f@@205 T@U) ) (! (let ((alpha@@212 (FieldTypeInv0 (type $f@@205)))) (=> (and (and (= (type $o@@237) refType) (= (type $f@@205) (FieldType alpha@@212))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@237 $f@@205)))) :qid |MutableMapModelidfy.1093:56| :skolemid |2773| :no-pattern (type $o@@237) :no-pattern (type $f@@205) :no-pattern (U_2_int $o@@237) :no-pattern (U_2_bool $o@@237) :no-pattern (U_2_int $f@@205) :no-pattern (U_2_bool $f@@205) )) (and (=> (= (ControlFlow 0 321136) (- 0 1182489)) (=> (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| |transferredContents#0|) (or (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| |transferredContents#0|) (forall ((|key#0@@113| Int) ) (!  (=> (and (<= (LitInt 0) |key#0@@113|) (< |key#0@@113| 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |transferredContents#0|) ($Box (int_2_U |key#0@@113|)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0@@113|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| |transferredContents#0|) ($Box (int_2_U |key#0@@113|)))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0@@113|)))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |transferredContents#0|) ($Box (int_2_U |key#0@@113|)))))))) :qid |MutableMapModelidfy.932:16| :skolemid |2271| :pattern ( (MapType0Select (|Map#Elements| |transferredContents#0|) ($Box (int_2_U |key#0@@113|)))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0@@113|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#0@@113|)))) :pattern ( (MapType0Select (|Map#Domain| |transferredContents#0|) ($Box (int_2_U |key#0@@113|)))) ))))) (=> (=> (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| |transferredContents#0|) (or (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| |transferredContents#0|) (forall ((|key#0@@114| T@U) ) (!  (=> (= (type |key#0@@114|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0@@114|)) (< (U_2_int |key#0@@114|) 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |transferredContents#0|) ($Box |key#0@@114|))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#0@@114|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |transferredContents#0|) ($Box |key#0@@114|))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#0@@114|))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |transferredContents#0|) ($Box |key#0@@114|)))))))) :qid |MutableMapModelidfy.932:16| :skolemid |2271| :pattern ( (MapType0Select (|Map#Elements| |transferredContents#0|) ($Box |key#0@@114|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#0@@114|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#0@@114|))) :pattern ( (MapType0Select (|Map#Domain| |transferredContents#0|) ($Box |key#0@@114|))) )))) (and (=> (= (ControlFlow 0 321136) (- 0 1182638)) (=> (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| |transferredContents#0|) (or (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| |transferredContents#0|) (forall ((|key#1@@12| Int) ) (!  (=> (and (<= (LitInt 0) |key#1@@12|) (< |key#1@@12| 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |transferredContents#0|) ($Box (int_2_U |key#1@@12|))))) (or (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#1@@12|))))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#1@@12|)))))))) :qid |MutableMapModelidfy.933:16| :skolemid |2272| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#1@@12|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#1@@12|)))) :pattern ( (MapType0Select (|Map#Domain| |transferredContents#0|) ($Box (int_2_U |key#1@@12|)))) ))))) (=> (=> (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| |transferredContents#0|) (or (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| |transferredContents#0|) (forall ((|key#1@@13| T@U) ) (!  (=> (= (type |key#1@@13|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#1@@13|)) (< (U_2_int |key#1@@13|) 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |transferredContents#0|) ($Box |key#1@@13|)))) (or (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#1@@13|)))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#1@@13|)))))))) :qid |MutableMapModelidfy.933:16| :skolemid |2272| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#1@@13|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#1@@13|))) :pattern ( (MapType0Select (|Map#Domain| |transferredContents#0|) ($Box |key#1@@13|))) )))) (and (=> (= (ControlFlow 0 321136) (- 0 1182758)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|))))) (and (=> (= (ControlFlow 0 321136) (- 0 1182781)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) 18446744073709551616)))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) 18446744073709551616))) (and (=> (= (ControlFlow 0 321136) (- 0 1182802)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) 18446744073709551616)))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) 18446744073709551616))) (and (=> (= (ControlFlow 0 321136) (- 0 1182821)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|))))) (and (=> (= (ControlFlow 0 321136) (- 0 1182843)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|)))) (and (=> (= (ControlFlow 0 321136) (- 0 1182865)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|key#2@@4| Int) ) (!  (=> (and (<= (LitInt 0) |key#2@@4|) (< |key#2@@4| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#2@@4|)))) (exists ((|skips#0@@8| Int) ) (!  (and (<= (LitInt 0) |skips#0@@8|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |skips#0@@8| |key#2@@4|)) :qid |MutableMapModelidfy.257:50| :skolemid |2275| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |skips#0@@8| |key#2@@4|)) )))) :qid |MutableMapModelidfy.257:16| :skolemid |2276| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#2@@4|)))) ))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|key#2@@5| T@U) ) (!  (=> (= (type |key#2@@5|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#2@@5|)) (< (U_2_int |key#2@@5|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#2@@5|))) (exists ((|skips#0@@9| Int) ) (!  (and (<= (LitInt 0) |skips#0@@9|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |skips#0@@9| (U_2_int |key#2@@5|))) :qid |MutableMapModelidfy.257:50| :skolemid |2275| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |skips#0@@9| (U_2_int |key#2@@5|))) ))))) :qid |MutableMapModelidfy.257:16| :skolemid |2276| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#2@@5|))) )))))) (and (=> (= (ControlFlow 0 321136) (- 0 1182979)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|slot#0@@64| T@U) ) (!  (=> (and (and (= (type |slot#0@@64|) DatatypeTypeType) ($Is |slot#0@@64| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#0@@64|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0@@64|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0@@64|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|) |slot#0@@64|)) :qid |MutableMapModelidfy.258:16| :skolemid |2277| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|) |slot#0@@64|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0@@64|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0@@64|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#0@@64|)) ))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|slot#0@@65| T@U) ) (!  (=> (and (and (= (type |slot#0@@65|) DatatypeTypeType) ($Is |slot#0@@65| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#0@@65|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0@@65|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0@@65|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|) |slot#0@@65|)) :qid |MutableMapModelidfy.258:16| :skolemid |2277| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|) |slot#0@@65|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0@@65|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#0@@65|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#0@@65|)) )))))) (and (=> (= (ControlFlow 0 321136) (- 0 1183109)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (=> (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) (or (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) (forall ((|slot1#0@@13| T@U) (|slot2#0@@13| T@U) ) (!  (=> (and (and (and (= (type |slot1#0@@13|) DatatypeTypeType) (= (type |slot2#0@@13|) DatatypeTypeType)) (and ($Is |slot1#0@@13| Tclass.MutableMapModel.Slot) ($Is |slot2#0@@13| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot1#0@@13| |slot2#0@@13|)) (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot1#0@@13| |slot2#0@@13|)) :qid |MutableMapModelidfy.242:12| :skolemid |2278| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot1#0@@13| |slot2#0@@13|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot1#0@@13| |slot2#0@@13|)) ))))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (=> (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) (or (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) (forall ((|slot1#0@@14| T@U) (|slot2#0@@14| T@U) ) (!  (=> (and (and (and (= (type |slot1#0@@14|) DatatypeTypeType) (= (type |slot2#0@@14|) DatatypeTypeType)) (and ($Is |slot1#0@@14| Tclass.MutableMapModel.Slot) ($Is |slot2#0@@14| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot1#0@@14| |slot2#0@@14|)) (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot1#0@@14| |slot2#0@@14|)) :qid |MutableMapModelidfy.242:12| :skolemid |2278| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot1#0@@14| |slot2#0@@14|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot1#0@@14| |slot2#0@@14|)) )))))))) (and (=> (= (ControlFlow 0 321136) (- 0 1183225)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|slot#1@@8| T@U) ) (!  (=> (and (and (= (type |slot#1@@8|) DatatypeTypeType) ($Is |slot#1@@8| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#1@@8|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#1@@8|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#1@@8| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :qid |MutableMapModelidfy.284:12| :skolemid |2283| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#1@@8| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#1@@8|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#1@@8|)) ))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|slot#1@@9| T@U) ) (!  (=> (and (and (= (type |slot#1@@9|) DatatypeTypeType) ($Is |slot#1@@9| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#1@@9|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#1@@9|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#1@@9| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :qid |MutableMapModelidfy.284:12| :skolemid |2283| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#1@@9| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#1@@9|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#1@@9|)) )))))) (and (=> (= (ControlFlow 0 321136) (- 0 1183335)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|slot#2@@1| T@U) ) (!  (=> (and (and (= (type |slot#2@@1|) DatatypeTypeType) ($Is |slot#2@@1| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#2@@1|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#2@@1|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#2@@1| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :qid |MutableMapModelidfy.291:12| :skolemid |2285| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#2@@1| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#2@@1|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#2@@1|)) ))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|slot#2@@2| T@U) ) (!  (=> (and (and (= (type |slot#2@@2|) DatatypeTypeType) ($Is |slot#2@@2| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#2@@2|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#2@@2|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#2@@2| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :qid |MutableMapModelidfy.291:12| :skolemid |2285| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#2@@2| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#2@@2|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#2@@2|)) )))))) (=> (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|) (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)))) (and (and (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |transferredContents#0|) (= $Heap@0 $Heap@1)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|)))) (and (=> (= (ControlFlow 0 321136) (- 0 1183503)) (|Map#Equal| |transferredContents#0| (MutableMapModel.LinearHashMap.contents |self#0@@200|))) (=> (|Map#Equal| |transferredContents#0| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (=> (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (= |newtype$check#0_1@0| (MutableMapModel.LinearHashMap.count |self#0@@200|))) (and (=> (= (ControlFlow 0 321136) (- 0 1183529)) (<= (LitInt 0) |newtype$check#0_1@0|)) (=> (<= (LitInt 0) |newtype$check#0_1@0|) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|)) (and (=> (= (ControlFlow 0 321136) (- 0 1183546)) (= (|Map#Card| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (MutableMapModel.LinearHashMap.count |self#0@@200|))) (=> (= (|Map#Card| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (MutableMapModel.LinearHashMap.count |self#0@@200|)) (and (=> (= (ControlFlow 0 321136) 321143) anon59_Then_correct) (=> (= (ControlFlow 0 321136) 321158) anon59_Else_correct)))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((anon57_correct  (=> (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (=> (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (= |newtype$check#17@0| (LitInt 1))) (and (=> (= (ControlFlow 0 321431) (- 0 1188316)) (and (<= (LitInt 0) |newtype$check#17@0|) (< |newtype$check#17@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#17@0|) (< |newtype$check#17@0| 18446744073709551616)) (=> (= |newtype$check#18@0| (+ |i#0@@115| 1)) (and (=> (= (ControlFlow 0 321431) (- 0 1188342)) (and (<= (LitInt 0) |newtype$check#18@0|) (< |newtype$check#18@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#18@0|) (< |newtype$check#18@0| 18446744073709551616)) (and (=> (= (ControlFlow 0 321431) (- 0 1188356)) (and (<= 0 (+ |i#0@@115| 1)) (<= (+ |i#0@@115| 1) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))) (=> (= |##elements#4@0| (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (+ |i#0@@115| 1))) (=> (and ($IsAlloc |##elements#4@0| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.LemmaReallocIterateResult$V)) $Heap@4) (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (+ |i#0@@115| 1)))) (=> (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (+ |i#0@@115| 1)))) (and (=> (= (ControlFlow 0 321431) (- 0 1188464)) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (+ |i#0@@115| 1))) |transferredContents'#0@2|)) (=> (and (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS $LZ) (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (+ |i#0@@115| 1))) |transferredContents'#0@2|) (= |newtype$check#19@0| (LitInt 1))) (and (=> (= (ControlFlow 0 321431) (- 0 1188535)) (and (<= (LitInt 0) |newtype$check#19@0|) (< |newtype$check#19@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#19@0|) (< |newtype$check#19@0| 18446744073709551616)) (=> (= |newtype$check#20@0| (+ |i#0@@115| 1)) (and (=> (= (ControlFlow 0 321431) (- 0 1188561)) (and (<= (LitInt 0) |newtype$check#20@0|) (< |newtype$check#20@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#20@0|) (< |newtype$check#20@0| 18446744073709551616)) (=> (= |i##0@0| (+ |i#0@@115| 1)) (and (=> (= (ControlFlow 0 321431) (- 0 1188598)) (forall (($o@@238 T@U) ($f@@206 T@U) ) (! (let ((alpha@@213 (FieldTypeInv0 (type $f@@206)))) (=> (and (and (= (type $o@@238) refType) (= (type $f@@206) (FieldType alpha@@213))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@238 $f@@206)))) :qid |MutableMapModelidfy.1197:30| :skolemid |2862| :no-pattern (type $o@@238) :no-pattern (type $f@@206) :no-pattern (U_2_int $o@@238) :no-pattern (U_2_bool $o@@238) :no-pattern (U_2_int $f@@206) :no-pattern (U_2_bool $f@@206) ))) (=> (forall (($o@@239 T@U) ($f@@207 T@U) ) (! (let ((alpha@@214 (FieldTypeInv0 (type $f@@207)))) (=> (and (and (= (type $o@@239) refType) (= (type $f@@207) (FieldType alpha@@214))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@239 $f@@207)))) :qid |MutableMapModelidfy.1197:30| :skolemid |2862| :no-pattern (type $o@@239) :no-pattern (type $f@@207) :no-pattern (U_2_int $o@@239) :no-pattern (U_2_bool $o@@239) :no-pattern (U_2_int $f@@207) :no-pattern (U_2_bool $f@@207) )) (and (=> (= (ControlFlow 0 321431) (- 0 1188612)) (or (<= 0 (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |i#0@@115|)) (= (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |i##0@0|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |i#0@@115|)))) (=> (or (<= 0 (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |i#0@@115|)) (= (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |i##0@0|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |i#0@@115|))) (and (=> (= (ControlFlow 0 321431) (- 0 1188654)) (< (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |i##0@0|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |i#0@@115|))) (=> (< (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |i##0@0|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |i#0@@115|)) (and (=> (= (ControlFlow 0 321431) (- 0 1188691)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (= (|Map#Card| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (MutableMapModel.LinearHashMap.count |self#0@@200|))))))) (=> (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (= (|Map#Card| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (MutableMapModel.LinearHashMap.count |self#0@@200|)))))) (and (=> (= (ControlFlow 0 321431) (- 0 1188731)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|) (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|) (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (forall ((|key#6@@0| Int) ) (!  (=> (and (<= (LitInt 0) |key#6@@0|) (< |key#6@@0| 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#6@@0|)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box (int_2_U |key#6@@0|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#6@@0|)))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box (int_2_U |key#6@@0|)))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#6@@0|)))))))) :qid |MutableMapModelidfy.932:16| :skolemid |2622| :pattern ( (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#6@@0|)))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box (int_2_U |key#6@@0|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box (int_2_U |key#6@@0|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#6@@0|)))) ))))))))) (=> (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|) (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|) (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (forall ((|key#6@@1| T@U) ) (!  (=> (= (type |key#6@@1|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#6@@1|)) (< (U_2_int |key#6@@1|) 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box |key#6@@1|))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box |key#6@@1|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box |key#6@@1|))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box |key#6@@1|))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box |key#6@@1|)))))))) :qid |MutableMapModelidfy.932:16| :skolemid |2622| :pattern ( (MapType0Select (|Map#Elements| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box |key#6@@1|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box |key#6@@1|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box |key#6@@1|))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box |key#6@@1|))) )))))))) (and (=> (= (ControlFlow 0 321431) (- 0 1188936)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|) (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|) (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (forall ((|key#7@@1| Int) ) (!  (=> (and (<= (LitInt 0) |key#7@@1|) (< |key#7@@1| 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#7@@1|))))) (or (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box (int_2_U |key#7@@1|))))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box (int_2_U |key#7@@1|)))))))) :qid |MutableMapModelidfy.933:16| :skolemid |2623| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box (int_2_U |key#7@@1|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box (int_2_U |key#7@@1|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box (int_2_U |key#7@@1|)))) ))))))))) (=> (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|) (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|) (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (forall ((|key#7@@2| T@U) ) (!  (=> (= (type |key#7@@2|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#7@@2|)) (< (U_2_int |key#7@@2|) 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box |key#7@@2|)))) (or (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box |key#7@@2|)))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box |key#7@@2|)))))))) :qid |MutableMapModelidfy.933:16| :skolemid |2623| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box |key#7@@2|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box |key#7@@2|))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) ($Box |key#7@@2|))) )))))))) (and (=> (= (ControlFlow 0 321431) (- 0 1189106)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))))))))))) (=> (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))))))) (and (=> (= (ControlFlow 0 321431) (- 0 1189165)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) 18446744073709551616)))))))) (=> (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) 18446744073709551616))))))) (and (=> (= (ControlFlow 0 321431) (- 0 1189222)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (< (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) 18446744073709551616)))))))) (=> (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (< (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) 18446744073709551616))))))) (and (=> (= (ControlFlow 0 321431) (- 0 1189277)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (< (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))))))))))) (=> (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (< (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))))))) (and (=> (= (ControlFlow 0 321431) (- 0 1189337)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))))))) (=> (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self#0@@200|))))))))) (and (=> (= (ControlFlow 0 321431) (- 0 1189397)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (forall ((|key#8| Int) ) (!  (=> (and (<= (LitInt 0) |key#8|) (< |key#8| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box (int_2_U |key#8|)))) (exists ((|skips#2| Int) ) (!  (and (<= (LitInt 0) |skips#2|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |skips#2| |key#8|)) :qid |MutableMapModelidfy.257:50| :skolemid |2626| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |skips#2| |key#8|)) )))) :qid |MutableMapModelidfy.257:16| :skolemid |2627| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box (int_2_U |key#8|)))) ))))))))))) (=> (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (forall ((|key#8@@0| T@U) ) (!  (=> (= (type |key#8@@0|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#8@@0|)) (< (U_2_int |key#8@@0|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box |key#8@@0|))) (exists ((|skips#2@@0| Int) ) (!  (and (<= (LitInt 0) |skips#2@@0|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |skips#2@@0| (U_2_int |key#8@@0|))) :qid |MutableMapModelidfy.257:50| :skolemid |2626| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |skips#2@@0| (U_2_int |key#8@@0|))) ))))) :qid |MutableMapModelidfy.257:16| :skolemid |2627| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box |key#8@@0|))) )))))))))) (and (=> (= (ControlFlow 0 321431) (- 0 1189561)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (forall ((|slot#9| T@U) ) (!  (=> (and (and (= (type |slot#9|) DatatypeTypeType) ($Is |slot#9| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#9|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#9|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#9|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#9|)) :qid |MutableMapModelidfy.258:16| :skolemid |2628| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#9|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#9|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#9|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#9|)) ))))))))))) (=> (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (forall ((|slot#9@@0| T@U) ) (!  (=> (and (and (= (type |slot#9@@0|) DatatypeTypeType) ($Is |slot#9@@0| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#9@@0|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#9@@0|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#9@@0|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#9@@0|)) :qid |MutableMapModelidfy.258:16| :skolemid |2628| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#9@@0|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#9@@0|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#9@@0|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#9@@0|)) )))))))))) (and (=> (= (ControlFlow 0 321431) (- 0 1189753)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (=> (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (forall ((|slot1#2| T@U) (|slot2#2| T@U) ) (!  (=> (and (and (and (= (type |slot1#2|) DatatypeTypeType) (= (type |slot2#2|) DatatypeTypeType)) (and ($Is |slot1#2| Tclass.MutableMapModel.Slot) ($Is |slot2#2| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot1#2| |slot2#2|)) (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot1#2| |slot2#2|)) :qid |MutableMapModelidfy.242:12| :skolemid |2629| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot1#2| |slot2#2|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot1#2| |slot2#2|)) ))))))))))))) (=> (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (=> (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (forall ((|slot1#2@@0| T@U) (|slot2#2@@0| T@U) ) (!  (=> (and (and (and (= (type |slot1#2@@0|) DatatypeTypeType) (= (type |slot2#2@@0|) DatatypeTypeType)) (and ($Is |slot1#2@@0| Tclass.MutableMapModel.Slot) ($Is |slot2#2@@0| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot1#2@@0| |slot2#2@@0|)) (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot1#2@@0| |slot2#2@@0|)) :qid |MutableMapModelidfy.242:12| :skolemid |2629| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot1#2@@0| |slot2#2@@0|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot1#2@@0| |slot2#2@@0|)) )))))))))))) (and (=> (= (ControlFlow 0 321431) (- 0 1189923)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (forall ((|slot#10| T@U) ) (!  (=> (and (and (= (type |slot#10|) DatatypeTypeType) ($Is |slot#10| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#10|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#10|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#10| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) :qid |MutableMapModelidfy.284:12| :skolemid |2634| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#10| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#10|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#10|)) ))))))))))) (=> (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (forall ((|slot#10@@0| T@U) ) (!  (=> (and (and (= (type |slot#10@@0|) DatatypeTypeType) ($Is |slot#10@@0| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#10@@0|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#10@@0|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#10@@0| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) :qid |MutableMapModelidfy.284:12| :skolemid |2634| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#10@@0| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#10@@0|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#10@@0|)) )))))))))) (and (=> (= (ControlFlow 0 321431) (- 0 1190091)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (forall ((|slot#11| T@U) ) (!  (=> (and (and (= (type |slot#11|) DatatypeTypeType) ($Is |slot#11| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#11|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#11|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#11| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) :qid |MutableMapModelidfy.291:12| :skolemid |2636| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#11| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#11|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#11|)) ))))))))))) (=> (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (forall ((|slot#11@@0| T@U) ) (!  (=> (and (and (= (type |slot#11@@0|) DatatypeTypeType) ($Is |slot#11@@0| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#11@@0|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#11@@0|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#11@@0| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) :qid |MutableMapModelidfy.291:12| :skolemid |2636| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#11@@0| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#11@@0|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#11@@0|)) )))))))))) (and (=> (= (ControlFlow 0 321431) (- 0 1190259)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (MutableMapModel.LinearHashMap.contents |self#0@@200|))))))) (=> (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (=> (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (MutableMapModel.LinearHashMap.contents |self#0@@200|)))))) (and (=> (= (ControlFlow 0 321431) (- 0 1190308)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (MutableMapModel.LinearHashMap.contents |self#0@@200|))))) (=> (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (MutableMapModel.LinearHashMap.contents |self#0@@200|)))) (and (=> (= (ControlFlow 0 321431) (- 0 1190339)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (= (|Map#Card| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (MutableMapModel.LinearHashMap.count |self#0@@200|))))) (=> (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (= (|Map#Card| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (MutableMapModel.LinearHashMap.count |self#0@@200|)))) (and (=> (= (ControlFlow 0 321431) (- 0 1190361)) (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (<= (MutableMapModel.LinearHashMap.count |self#0@@200|) (LitInt (Div 18446744073709551616 (LitInt 8))))))) (=> (=> (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (or (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (<= (MutableMapModel.LinearHashMap.count |self#0@@200|) (LitInt (Div 18446744073709551616 (LitInt 8)))))) (and (=> (= (ControlFlow 0 321431) (- 0 1190388)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|))))) (and (=> (= (ControlFlow 0 321431) (- 0 1190411)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) 18446744073709551616)))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) 18446744073709551616))) (and (=> (= (ControlFlow 0 321431) (- 0 1190432)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#2@2|) 18446744073709551616)))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#2@2|) 18446744073709551616))) (and (=> (= (ControlFlow 0 321431) (- 0 1190451)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#2@2|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#2@2|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|))))) (and (=> (= (ControlFlow 0 321431) (- 0 1190473)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#2@2|))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#2@2|)))) (and (=> (= (ControlFlow 0 321431) (- 0 1190495)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (forall ((|key#9| Int) ) (!  (=> (and (<= (LitInt 0) |key#9|) (< |key#9| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box (int_2_U |key#9|)))) (exists ((|skips#3| Int) ) (!  (and (<= (LitInt 0) |skips#3|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |skips#3| |key#9|)) :qid |MutableMapModelidfy.257:50| :skolemid |2638| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |skips#3| |key#9|)) )))) :qid |MutableMapModelidfy.257:16| :skolemid |2639| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box (int_2_U |key#9|)))) ))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (forall ((|key#9@@0| T@U) ) (!  (=> (= (type |key#9@@0|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#9@@0|)) (< (U_2_int |key#9@@0|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box |key#9@@0|))) (exists ((|skips#3@@0| Int) ) (!  (and (<= (LitInt 0) |skips#3@@0|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |skips#3@@0| (U_2_int |key#9@@0|))) :qid |MutableMapModelidfy.257:50| :skolemid |2638| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |skips#3@@0| (U_2_int |key#9@@0|))) ))))) :qid |MutableMapModelidfy.257:16| :skolemid |2639| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box |key#9@@0|))) )))))) (and (=> (= (ControlFlow 0 321431) (- 0 1190609)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (forall ((|slot#12| T@U) ) (!  (=> (and (and (= (type |slot#12|) DatatypeTypeType) ($Is |slot#12| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) |slot#12|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#12|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#12|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|) |slot#12|)) :qid |MutableMapModelidfy.258:16| :skolemid |2640| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|) |slot#12|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#12|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#12|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) |slot#12|)) ))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (forall ((|slot#12@@0| T@U) ) (!  (=> (and (and (= (type |slot#12@@0|) DatatypeTypeType) ($Is |slot#12@@0| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) |slot#12@@0|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#12@@0|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#12@@0|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|) |slot#12@@0|)) :qid |MutableMapModelidfy.258:16| :skolemid |2640| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|) |slot#12@@0|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#12@@0|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#12@@0|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) |slot#12@@0|)) )))))) (and (=> (= (ControlFlow 0 321431) (- 0 1190739)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (=> (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) (or (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) (forall ((|slot1#3| T@U) (|slot2#3| T@U) ) (!  (=> (and (and (and (= (type |slot1#3|) DatatypeTypeType) (= (type |slot2#3|) DatatypeTypeType)) (and ($Is |slot1#3| Tclass.MutableMapModel.Slot) ($Is |slot2#3| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot1#3| |slot2#3|)) (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) |slot1#3| |slot2#3|)) :qid |MutableMapModelidfy.242:12| :skolemid |2641| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) |slot1#3| |slot2#3|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot1#3| |slot2#3|)) ))))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (=> (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) (or (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) (forall ((|slot1#3@@0| T@U) (|slot2#3@@0| T@U) ) (!  (=> (and (and (and (= (type |slot1#3@@0|) DatatypeTypeType) (= (type |slot2#3@@0|) DatatypeTypeType)) (and ($Is |slot1#3@@0| Tclass.MutableMapModel.Slot) ($Is |slot2#3@@0| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot1#3@@0| |slot2#3@@0|)) (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) |slot1#3@@0| |slot2#3@@0|)) :qid |MutableMapModelidfy.242:12| :skolemid |2641| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) |slot1#3@@0| |slot2#3@@0|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot1#3@@0| |slot2#3@@0|)) )))))))) (and (=> (= (ControlFlow 0 321431) (- 0 1190855)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (=> (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (or (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (forall ((|slot#13| T@U) ) (!  (=> (and (and (= (type |slot#13|) DatatypeTypeType) ($Is |slot#13| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) |slot#13|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#13|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#13| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|))) :qid |MutableMapModelidfy.284:12| :skolemid |2646| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#13| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|))) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#13|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) |slot#13|)) ))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (=> (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (or (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (forall ((|slot#13@@0| T@U) ) (!  (=> (and (and (= (type |slot#13@@0|) DatatypeTypeType) ($Is |slot#13@@0| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) |slot#13@@0|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#13@@0|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#13@@0| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|))) :qid |MutableMapModelidfy.284:12| :skolemid |2646| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#13@@0| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|))) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#13@@0|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) |slot#13@@0|)) )))))) (and (=> (= (ControlFlow 0 321431) (- 0 1190965)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (=> (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (or (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (forall ((|slot#14| T@U) ) (!  (=> (and (and (= (type |slot#14|) DatatypeTypeType) ($Is |slot#14| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) |slot#14|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#14|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#14| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|))) :qid |MutableMapModelidfy.291:12| :skolemid |2648| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#14| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|))) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#14|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) |slot#14|)) ))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2|) (=> (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (or (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (forall ((|slot#14@@0| T@U) ) (!  (=> (and (and (= (type |slot#14@@0|) DatatypeTypeType) ($Is |slot#14@@0| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) |slot#14@@0|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#14@@0|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#14@@0| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|))) :qid |MutableMapModelidfy.291:12| :skolemid |2648| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#14@@0| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|))) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|) |slot#14@@0|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) |slot#14@@0|)) )))))) (and (=> (= (ControlFlow 0 321431) (- 0 1191075)) (<= (LitInt 0) |i##0@0|)) (=> (<= (LitInt 0) |i##0@0|) (and (=> (= (ControlFlow 0 321431) (- 0 1191082)) (<= |i##0@0| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))))) (=> (<= |i##0@0| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) (and (=> (= (ControlFlow 0 321431) (- 0 1191092)) (< (MutableMapModel.LinearHashMap.count |self#0@@200|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) 1))) (=> (< (MutableMapModel.LinearHashMap.count |self#0@@200|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) 1)) (and (=> (= (ControlFlow 0 321431) (- 0 1191106)) (< (MutableMapModel.LinearHashMap.count |self#0@@200|) (Div 18446744073709551616 (LitInt 8)))) (=> (< (MutableMapModel.LinearHashMap.count |self#0@@200|) (Div 18446744073709551616 (LitInt 8))) (and (=> (= (ControlFlow 0 321431) (- 0 1191119)) (|Set#Subset| (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)))) (=> (|Set#Subset| (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|))) (and (=> (= (ControlFlow 0 321431) (- 0 1191131)) (= (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) |newSize#0@@1|)) (=> (= (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#2@2|)) |newSize#0@@1|) (and (=> (= (ControlFlow 0 321431) (- 0 1191139)) (= |newSize#0@@1| (Mul (+ 128 (MutableMapModel.LinearHashMap.count |self#0@@200|)) (LitInt 4)))) (=> (= |newSize#0@@1| (Mul (+ 128 (MutableMapModel.LinearHashMap.count |self#0@@200|)) (LitInt 4))) (and (=> (= (ControlFlow 0 321431) (- 0 1191155)) (= (|Map#Card| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (MutableMapModel.LinearHashMap.count |self#0@@200|))) (=> (= (|Map#Card| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (MutableMapModel.LinearHashMap.count |self#0@@200|)) (and (=> (= (ControlFlow 0 321431) (- 0 1191165)) (=> (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2| |transferredContents'#0@2|) (or (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2| |transferredContents'#0@2|) (forall ((|key#10| Int) ) (!  (=> (and (<= (LitInt 0) |key#10|) (< |key#10| 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |transferredContents'#0@2|) ($Box (int_2_U |key#10|)))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box (int_2_U |key#10|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| |transferredContents'#0@2|) ($Box (int_2_U |key#10|)))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box (int_2_U |key#10|)))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |transferredContents'#0@2|) ($Box (int_2_U |key#10|)))))))) :qid |MutableMapModelidfy.932:16| :skolemid |2650| :pattern ( (MapType0Select (|Map#Elements| |transferredContents'#0@2|) ($Box (int_2_U |key#10|)))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box (int_2_U |key#10|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box (int_2_U |key#10|)))) :pattern ( (MapType0Select (|Map#Domain| |transferredContents'#0@2|) ($Box (int_2_U |key#10|)))) ))))) (=> (=> (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2| |transferredContents'#0@2|) (or (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2| |transferredContents'#0@2|) (forall ((|key#10@@0| T@U) ) (!  (=> (= (type |key#10@@0|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#10@@0|)) (< (U_2_int |key#10@@0|) 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |transferredContents'#0@2|) ($Box |key#10@@0|))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box |key#10@@0|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |transferredContents'#0@2|) ($Box |key#10@@0|))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box |key#10@@0|))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |transferredContents'#0@2|) ($Box |key#10@@0|)))))))) :qid |MutableMapModelidfy.932:16| :skolemid |2650| :pattern ( (MapType0Select (|Map#Elements| |transferredContents'#0@2|) ($Box |key#10@@0|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box |key#10@@0|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box |key#10@@0|))) :pattern ( (MapType0Select (|Map#Domain| |transferredContents'#0@2|) ($Box |key#10@@0|))) )))) (and (=> (= (ControlFlow 0 321431) (- 0 1191314)) (=> (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2| |transferredContents'#0@2|) (or (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2| |transferredContents'#0@2|) (forall ((|key#11| Int) ) (!  (=> (and (<= (LitInt 0) |key#11|) (< |key#11| 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |transferredContents'#0@2|) ($Box (int_2_U |key#11|))))) (or (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box (int_2_U |key#11|))))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box (int_2_U |key#11|)))))))) :qid |MutableMapModelidfy.933:16| :skolemid |2651| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box (int_2_U |key#11|))))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box (int_2_U |key#11|)))) :pattern ( (MapType0Select (|Map#Domain| |transferredContents'#0@2|) ($Box (int_2_U |key#11|)))) ))))) (=> (=> (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2| |transferredContents'#0@2|) (or (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#2@2| |transferredContents'#0@2|) (forall ((|key#11@@0| T@U) ) (!  (=> (= (type |key#11@@0|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#11@@0|)) (< (U_2_int |key#11@@0|) 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |transferredContents'#0@2|) ($Box |key#11@@0|)))) (or (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box |key#11@@0|)))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box |key#11@@0|)))))))) :qid |MutableMapModelidfy.933:16| :skolemid |2651| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box |key#11@@0|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box |key#11@@0|))) :pattern ( (MapType0Select (|Map#Domain| |transferredContents'#0@2|) ($Box |key#11@@0|))) )))) (and (=> (= (ControlFlow 0 321431) (- 0 1191434)) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |i##0@0|)) |transferredContents'#0@2|)) (=> (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |i##0@0|)) |transferredContents'#0@2|) (and (=> (= (ControlFlow 0 321431) (- 0 1191454)) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (MutableMapModel.LinearHashMap.contents |self#0@@200|))) (=> (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (and (=> (= (ControlFlow 0 321431) (- 0 1191473)) (<= (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#2@2|) |i##0@0|)) (=> (<= (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#2@2|) |i##0@0|) (and (=> (= (ControlFlow 0 321431) (- 0 1191479)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))) (and (=> (= (ControlFlow 0 321431) (- 0 1191508)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) 18446744073709551616)))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) 18446744073709551616))) (and (=> (= (ControlFlow 0 321431) (- 0 1191535)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (< (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) 18446744073709551616)))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (< (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) 18446744073709551616))) (and (=> (= (ControlFlow 0 321431) (- 0 1191560)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (< (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (< (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))) (and (=> (= (ControlFlow 0 321431) (- 0 1191590)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self#0@@200|))))) (and (=> (= (ControlFlow 0 321431) (- 0 1191620)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (forall ((|key#12| Int) ) (!  (=> (and (<= (LitInt 0) |key#12|) (< |key#12| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box (int_2_U |key#12|)))) (exists ((|skips#4| Int) ) (!  (and (<= (LitInt 0) |skips#4|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |skips#4| |key#12|)) :qid |MutableMapModelidfy.257:50| :skolemid |2654| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |skips#4| |key#12|)) )))) :qid |MutableMapModelidfy.257:16| :skolemid |2655| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box (int_2_U |key#12|)))) ))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (forall ((|key#12@@0| T@U) ) (!  (=> (= (type |key#12@@0|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#12@@0|)) (< (U_2_int |key#12@@0|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box |key#12@@0|))) (exists ((|skips#4@@0| Int) ) (!  (and (<= (LitInt 0) |skips#4@@0|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |skips#4@@0| (U_2_int |key#12@@0|))) :qid |MutableMapModelidfy.257:50| :skolemid |2654| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |skips#4@@0| (U_2_int |key#12@@0|))) ))))) :qid |MutableMapModelidfy.257:16| :skolemid |2655| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) ($Box |key#12@@0|))) )))))) (and (=> (= (ControlFlow 0 321431) (- 0 1191754)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (forall ((|slot#15| T@U) ) (!  (=> (and (and (= (type |slot#15|) DatatypeTypeType) ($Is |slot#15| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#15|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#15|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#15|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#15|)) :qid |MutableMapModelidfy.258:16| :skolemid |2656| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#15|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#15|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#15|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#15|)) ))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (forall ((|slot#15@@0| T@U) ) (!  (=> (and (and (= (type |slot#15@@0|) DatatypeTypeType) ($Is |slot#15@@0| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#15@@0|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#15@@0|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#15@@0|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#15@@0|)) :qid |MutableMapModelidfy.258:16| :skolemid |2656| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#15@@0|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#15@@0|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#15@@0|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#15@@0|)) )))))) (and (=> (= (ControlFlow 0 321431) (- 0 1191916)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (=> (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (forall ((|slot1#4| T@U) (|slot2#4| T@U) ) (!  (=> (and (and (and (= (type |slot1#4|) DatatypeTypeType) (= (type |slot2#4|) DatatypeTypeType)) (and ($Is |slot1#4| Tclass.MutableMapModel.Slot) ($Is |slot2#4| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot1#4| |slot2#4|)) (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot1#4| |slot2#4|)) :qid |MutableMapModelidfy.242:12| :skolemid |2657| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot1#4| |slot2#4|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot1#4| |slot2#4|)) ))))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (=> (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (forall ((|slot1#4@@0| T@U) (|slot2#4@@0| T@U) ) (!  (=> (and (and (and (= (type |slot1#4@@0|) DatatypeTypeType) (= (type |slot2#4@@0|) DatatypeTypeType)) (and ($Is |slot1#4@@0| Tclass.MutableMapModel.Slot) ($Is |slot2#4@@0| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot1#4@@0| |slot2#4@@0|)) (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot1#4@@0| |slot2#4@@0|)) :qid |MutableMapModelidfy.242:12| :skolemid |2657| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot1#4@@0| |slot2#4@@0|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot1#4@@0| |slot2#4@@0|)) )))))))) (and (=> (= (ControlFlow 0 321431) (- 0 1192056)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (forall ((|slot#16| T@U) ) (!  (=> (and (and (= (type |slot#16|) DatatypeTypeType) ($Is |slot#16| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#16|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#16|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#16| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) :qid |MutableMapModelidfy.284:12| :skolemid |2662| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#16| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#16|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#16|)) ))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (forall ((|slot#16@@0| T@U) ) (!  (=> (and (and (= (type |slot#16@@0|) DatatypeTypeType) ($Is |slot#16@@0| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#16@@0|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#16@@0|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#16@@0| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) :qid |MutableMapModelidfy.284:12| :skolemid |2662| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#16@@0| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#16@@0|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#16@@0|)) )))))) (and (=> (= (ControlFlow 0 321431) (- 0 1192194)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (forall ((|slot#17| T@U) ) (!  (=> (and (and (= (type |slot#17|) DatatypeTypeType) ($Is |slot#17| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#17|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#17|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#17| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) :qid |MutableMapModelidfy.291:12| :skolemid |2664| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#17| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#17|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#17|)) ))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (=> (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (or (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (forall ((|slot#17@@0| T@U) ) (!  (=> (and (and (= (type |slot#17@@0|) DatatypeTypeType) ($Is |slot#17@@0| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#17@@0|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#17@@0|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#17@@0| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) :qid |MutableMapModelidfy.291:12| :skolemid |2664| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#17@@0| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#17@@0|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#17@@0|)) )))))) (and (=> (= (ControlFlow 0 321431) (- 0 1192332)) (= (|Map#Card| |transferredContents'#0@2|) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#2@2|))) (=> (= (|Map#Card| |transferredContents'#0@2|) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#2@2|)) (and (=> (= (ControlFlow 0 321431) (- 0 1192340)) (|Set#Subset| (|Map#Domain| |transferredContents'#0@2|) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)))) (=> (|Set#Subset| (|Map#Domain| |transferredContents'#0@2|) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|))) (and (=> (= (ControlFlow 0 321431) (- 0 1192350)) (forall ((|key#1@@14| Int) ) (!  (=> (and (<= (LitInt 0) |key#1@@14|) (< |key#1@@14| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box (int_2_U |key#1@@14|)))) (exists ((|slot#2@@3| T@U) ) (!  (and (= (type |slot#2@@3|) DatatypeTypeType) (and ($Is |slot#2@@3| Tclass.MutableMapModel.Slot) (and (and (< (MutableMapModel.Slot.slot |slot#2@@3|) |i##0@0|) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#2@@3|)) (MutableMapModel.__default.FilledWithEntryKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#2@@3| |key#1@@14|)))) :qid |MutableMapModelidfy.1075:69| :skolemid |2666| :pattern ( (MutableMapModel.__default.FilledWithEntryKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#2@@3| |key#1@@14|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#2@@3|)) :pattern ( (MutableMapModel.Slot.slot |slot#2@@3|)) )))) :qid |MutableMapModelidfy.1075:21| :skolemid |2667| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box (int_2_U |key#1@@14|)))) ))) (=> (forall ((|key#1@@15| T@U) ) (!  (=> (= (type |key#1@@15|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#1@@15|)) (< (U_2_int |key#1@@15|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box |key#1@@15|))) (exists ((|slot#2@@4| T@U) ) (!  (and (= (type |slot#2@@4|) DatatypeTypeType) (and ($Is |slot#2@@4| Tclass.MutableMapModel.Slot) (and (and (< (MutableMapModel.Slot.slot |slot#2@@4|) |i##0@0|) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#2@@4|)) (MutableMapModel.__default.FilledWithEntryKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#2@@4| (U_2_int |key#1@@15|))))) :qid |MutableMapModelidfy.1075:69| :skolemid |2666| :pattern ( (MutableMapModel.__default.FilledWithEntryKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#2@@4| (U_2_int |key#1@@15|))) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#2@@4|)) :pattern ( (MutableMapModel.Slot.slot |slot#2@@4|)) ))))) :qid |MutableMapModelidfy.1075:21| :skolemid |2667| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@2|)) ($Box |key#1@@15|))) )) (=> (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (=> (and (and (and (|MutableMapModel.__default.ReallocIterate#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| |newUnderlying'#2@2| |i##0@0|) (let ((|newUnderlying'#0@@52| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS $LZ) |self#0@@200| |newUnderlying'#2@2| |i##0@0|))) (and (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@52|) (=> (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@52|) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying'#0@@52|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|)) (=> (= (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#0@@52|) (MutableMapModel.LinearHashMap.count |self#0@@200|)) (and (and (let ((|dt_update_tmp#0#1@@94| |self#0@@200|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#1@@94|) (MutableMapModel.LinearHashMap.LinearHashMap_q |dt_update_tmp#0#1@@94|))) (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@95| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@90| |newUnderlying'#0@@52|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@90| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@95|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@95|)))) |newUnderlying'#0@@52|)) (=> (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@96| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@91| |newUnderlying'#0@@52|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@91| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@96|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@96|)))) |newUnderlying'#0@@52|) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying'#0@@52|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying'#0@@52|)))))))))) (and (let ((|newUnderlying'#0@@53| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying'#2@2| |i##0@0|))) (and (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@53|) (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@53|) (and (and (and (and (and (and (and (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@53|))) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@53|)) 18446744073709551616)) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#0@@53|) 18446744073709551616)) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#0@@53|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@53|)))) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@53|)) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#0@@53|))) (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@53|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@53|))) (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@53|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@53|))) (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@53|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#0@@53|)))))) (let ((|newUnderlying'#0@@54| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying'#2@2| |i##0@0|))) (= (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#0@@54|) (MutableMapModel.LinearHashMap.count |self#0@@200|))))) (and (and (let ((|newUnderlying'#0@@55| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying'#2@2| |i##0@0|))) (and (|MutableMapModel.__default.UnderlyingInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@97| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@92| |newUnderlying'#0@@55|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@92| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@97|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@97|)))) |newUnderlying'#0@@55|) (and (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#1@@98| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@93| |newUnderlying'#0@@55|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@93| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@98|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@98|)))) |newUnderlying'#0@@55|) (and (and (and (= (|Map#Card| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@99| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@94| |newUnderlying'#0@@55|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@94| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@99|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@99|)))))) (MutableMapModel.LinearHashMap.count (let ((|dt_update_tmp#0#1@@100| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@95| |newUnderlying'#0@@55|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@95| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@100|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@100|)))))) (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@55| (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@101| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@96| |newUnderlying'#0@@55|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@96| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@101|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@101|))))))) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#0@@55|)) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS $LZ) (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@55|)) (MutableMapModel.LinearHashMap.contents (let ((|dt_update_tmp#0#1@@102| |self#0@@200|)) (let ((|dt_update#underlying#0#1@@97| |newUnderlying'#0@@55|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#1@@97| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#1@@102|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#1@@102|)))))))))) (let ((|newUnderlying'#0@@56| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) |self#0@@200| |newUnderlying'#2@2| |i##0@0|))) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#0@@56|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#0@@56|)) 2)))) (and (= $Heap@4 $Heap@5) (= (ControlFlow 0 321431) 1175080)))) GeneratedUnifiedExit_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((anon72_Else_correct  (=> (forall ((|key#1_2| T@U) ) (!  (=> (= (type |key#1_2|) intType) (=> (and (and (<= (LitInt 0) (U_2_int |key#1_2|)) (< (U_2_int |key#1_2|) 18446744073709551616)) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@1|)) ($Box |key#1_2|)))) (exists ((|slot#1_6| T@U) ) (!  (and (= (type |slot#1_6|) DatatypeTypeType) (and ($Is |slot#1_6| Tclass.MutableMapModel.Slot) (and (and (and (< (MutableMapModel.Slot.slot |slot#1_6|) (+ |i#0@@115| 1)) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_6|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_6|))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#1_6|)))) (U_2_int |key#1_2|))))) :qid |MutableMapModelidfy.1159:22| :skolemid |2854| :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#1_6|)) :pattern ( (MutableMapModel.Slot.slot |slot#1_6|)) )))) :qid |MutableMapModelidfy.1158:14| :skolemid |2855| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying'#2@1|)) ($Box |key#1_2|))) )) (=> (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying'#2@1|) (= |newtype$check#1_3@0| (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#2@1|))) (and (=> (= (ControlFlow 0 321363) (- 0 1188031)) (<= (LitInt 0) |newtype$check#1_3@0|)) (=> (<= (LitInt 0) |newtype$check#1_3@0|) (=> (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying'#2@1|) (and (=> (= (ControlFlow 0 321363) (- 0 1188041)) (= (|Map#Card| |transferredContents'#0@1|) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#2@1|))) (=> (= (|Map#Card| |transferredContents'#0@1|) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#2@1|)) (=> (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (=> (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (= |newtype$check#1_4@0| (LitInt 1))) (and (=> (= (ControlFlow 0 321363) (- 0 1188069)) (and (<= (LitInt 0) |newtype$check#1_4@0|) (< |newtype$check#1_4@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#1_4@0|) (< |newtype$check#1_4@0| 18446744073709551616)) (=> (= |newtype$check#1_5@0| (+ |i#0@@115| 1)) (and (=> (= (ControlFlow 0 321363) (- 0 1188095)) (and (<= (LitInt 0) |newtype$check#1_5@0|) (< |newtype$check#1_5@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#1_5@0|) (< |newtype$check#1_5@0| 18446744073709551616)) (and (=> (= (ControlFlow 0 321363) (- 0 1188109)) (and (<= 0 (+ |i#0@@115| 1)) (<= (+ |i#0@@115| 1) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))) (=> (= |##elements#1_1@0| (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (+ |i#0@@115| 1))) (=> (and ($IsAlloc |##elements#1_1@0| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.LemmaReallocIterateResult$V)) $Heap@3) (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (+ |i#0@@115| 1)))) (=> (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (+ |i#0@@115| 1)))) (and (=> (= (ControlFlow 0 321363) (- 0 1188217)) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (+ |i#0@@115| 1))) |transferredContents'#0@1|)) (=> (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS $LZ) (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (+ |i#0@@115| 1))) |transferredContents'#0@1|) (=> (and (and (= $Heap@4 $Heap@3) (= |newUnderlying'#2@2| |newUnderlying'#2@1|)) (and (= |transferredContents'#0@2| |transferredContents'#0@1|) (= (ControlFlow 0 321363) 321431))) anon57_correct))))))))))))))))))))))) (let ((anon66_Else_correct  (=> (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U (MutableMapModel.Item.key |item#0@0|)))))) (and (=> (= (ControlFlow 0 321262) (- 0 1185175)) (or (MutableMapModel.Item.Entry_q |item#0@0|) (MutableMapModel.Item.Tombstone_q |item#0@0|))) (=> (or (MutableMapModel.Item.Entry_q |item#0@0|) (MutableMapModel.Item.Tombstone_q |item#0@0|)) (=> (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|)) (and (=> (= (ControlFlow 0 321262) (- 0 1185191)) (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U (MutableMapModel.Item.key |item#0@0|))))))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U (MutableMapModel.Item.key |item#0@0|)))))) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|)) (and (=> (= (ControlFlow 0 321262) (- 0 1185214)) (|Set#Subset| (|Map#Domain| |transferredContents#0|) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)))) (=> (|Set#Subset| (|Map#Domain| |transferredContents#0|) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|))) (=> (and (and (= |a##1_0@0| (|Map#Domain| |transferredContents#0|)) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (= |b##1_0@0| (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|))))) (and (=> (= (ControlFlow 0 321262) (- 0 1185258)) (forall (($o@@240 T@U) ($f@@208 T@U) ) (! (let ((alpha@@215 (FieldTypeInv0 (type $f@@208)))) (=> (and (and (= (type $o@@240) refType) (= (type $f@@208) (FieldType alpha@@215))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@240 $f@@208)))) :qid |MutableMapModelidfy.1144:44| :skolemid |2830| :no-pattern (type $o@@240) :no-pattern (type $f@@208) :no-pattern (U_2_int $o@@240) :no-pattern (U_2_bool $o@@240) :no-pattern (U_2_int $f@@208) :no-pattern (U_2_bool $f@@208) ))) (=> (forall (($o@@241 T@U) ($f@@209 T@U) ) (! (let ((alpha@@216 (FieldTypeInv0 (type $f@@209)))) (=> (and (and (= (type $o@@241) refType) (= (type $f@@209) (FieldType alpha@@216))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@241 $f@@209)))) :qid |MutableMapModelidfy.1144:44| :skolemid |2830| :no-pattern (type $o@@241) :no-pattern (type $f@@209) :no-pattern (U_2_int $o@@241) :no-pattern (U_2_bool $o@@241) :no-pattern (U_2_int $f@@209) :no-pattern (U_2_bool $f@@209) )) (=> (= call0formal@Sets._default.SetInclusionImpliesSmallerCardinality$T@0 Tclass.NativeTypes.uint64) (and (=> (= (ControlFlow 0 321262) (- 0 1185284)) (|Set#Subset| |a##1_0@0| |b##1_0@0|)) (=> (|Set#Subset| |a##1_0@0| |b##1_0@0|) (=> (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (=> (and (and (<= (|Set#Card| |a##1_0@0|) (|Set#Card| |b##1_0@0|)) (= $Heap@0 $Heap@2)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|))) (and (=> (= (ControlFlow 0 321262) (- 0 1185330)) (<= (|Set#Card| (|Map#Domain| |transferredContents#0|)) (|Set#Card| (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|))))) (=> (<= (|Set#Card| (|Map#Domain| |transferredContents#0|)) (|Set#Card| (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)))) (and (=> (= (ControlFlow 0 321262) (- 0 1185348)) (= (|Set#Card| (|Map#Domain| |transferredContents#0|)) (|Map#Card| |transferredContents#0|))) (=> (= (|Set#Card| (|Map#Domain| |transferredContents#0|)) (|Map#Card| |transferredContents#0|)) (=> (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|)) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|))) (and (=> (= (ControlFlow 0 321262) (- 0 1185378)) (= (|Set#Card| (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|))) (|Map#Card| (MutableMapModel.LinearHashMap.contents |self#0@@200|)))) (=> (= (|Set#Card| (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|))) (|Map#Card| (MutableMapModel.LinearHashMap.contents |self#0@@200|))) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|)) (and (=> (= (ControlFlow 0 321262) (- 0 1185402)) (<= (|Map#Card| |transferredContents#0|) (|Map#Card| (MutableMapModel.LinearHashMap.contents |self#0@@200|)))) (=> (<= (|Map#Card| |transferredContents#0|) (|Map#Card| (MutableMapModel.LinearHashMap.contents |self#0@@200|))) (=> (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|) (= |newtype$check#1_1@0| (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|))) (and (=> (= (ControlFlow 0 321262) (- 0 1185428)) (<= (LitInt 0) |newtype$check#1_1@0|)) (=> (<= (LitInt 0) |newtype$check#1_1@0|) (=> (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|) (=> (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|)) (and (=> (= (ControlFlow 0 321262) (- 0 1185449)) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) 1))) (=> (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) 1)) (and (=> (= (ControlFlow 0 321262) (- 0 1185470)) (or (MutableMapModel.Item.Entry_q |item#0@0|) (MutableMapModel.Item.Tombstone_q |item#0@0|))) (=> (or (MutableMapModel.Item.Entry_q |item#0@0|) (MutableMapModel.Item.Tombstone_q |item#0@0|)) (=> (= |key##1_0@0| (MutableMapModel.Item.key |item#0@0|)) (and (=> (= (ControlFlow 0 321262) (- 0 1185489)) (MutableMapModel.Item.Entry_q |item#0@0|)) (=> (MutableMapModel.Item.Entry_q |item#0@0|) (=> (= |value##1_0@0| (MutableMapModel.Item.value |item#0@0|)) (and (=> (= (ControlFlow 0 321262) (- 0 1185503)) (forall (($o@@242 T@U) ($f@@210 T@U) ) (! (let ((alpha@@217 (FieldTypeInv0 (type $f@@210)))) (=> (and (and (= (type $o@@242) refType) (= (type $f@@210) (FieldType alpha@@217))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@242 $f@@210)))) :qid |MutableMapModelidfy.1151:33| :skolemid |2831| :no-pattern (type $o@@242) :no-pattern (type $f@@210) :no-pattern (U_2_int $o@@242) :no-pattern (U_2_bool $o@@242) :no-pattern (U_2_int $f@@210) :no-pattern (U_2_bool $f@@210) ))) (=> (forall (($o@@243 T@U) ($f@@211 T@U) ) (! (let ((alpha@@218 (FieldTypeInv0 (type $f@@211)))) (=> (and (and (= (type $o@@243) refType) (= (type $f@@211) (FieldType alpha@@218))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@243 $f@@211)))) :qid |MutableMapModelidfy.1151:33| :skolemid |2831| :no-pattern (type $o@@243) :no-pattern (type $f@@211) :no-pattern (U_2_int $o@@243) :no-pattern (U_2_bool $o@@243) :no-pattern (U_2_int $f@@211) :no-pattern (U_2_bool $f@@211) )) (and (=> (= (ControlFlow 0 321262) (- 0 1185526)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|))))) (and (=> (= (ControlFlow 0 321262) (- 0 1185549)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) 18446744073709551616)))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) 18446744073709551616))) (and (=> (= (ControlFlow 0 321262) (- 0 1185570)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) 18446744073709551616)))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) 18446744073709551616))) (and (=> (= (ControlFlow 0 321262) (- 0 1185589)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|))))) (and (=> (= (ControlFlow 0 321262) (- 0 1185611)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|)))) (and (=> (= (ControlFlow 0 321262) (- 0 1185633)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|key#2@@6| Int) ) (!  (=> (and (<= (LitInt 0) |key#2@@6|) (< |key#2@@6| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#2@@6|)))) (exists ((|skips#1@@2| Int) ) (!  (and (<= (LitInt 0) |skips#1@@2|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |skips#1@@2| |key#2@@6|)) :qid |MutableMapModelidfy.257:50| :skolemid |1826| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |skips#1@@2| |key#2@@6|)) )))) :qid |MutableMapModelidfy.257:16| :skolemid |1827| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#2@@6|)))) ))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|key#2@@7| T@U) ) (!  (=> (= (type |key#2@@7|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#2@@7|)) (< (U_2_int |key#2@@7|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#2@@7|))) (exists ((|skips#1@@3| Int) ) (!  (and (<= (LitInt 0) |skips#1@@3|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |skips#1@@3| (U_2_int |key#2@@7|))) :qid |MutableMapModelidfy.257:50| :skolemid |1826| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |skips#1@@3| (U_2_int |key#2@@7|))) ))))) :qid |MutableMapModelidfy.257:16| :skolemid |1827| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#2@@7|))) )))))) (and (=> (= (ControlFlow 0 321262) (- 0 1185747)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|slot#3| T@U) ) (!  (=> (and (and (= (type |slot#3|) DatatypeTypeType) ($Is |slot#3| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#3|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#3|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#3|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|) |slot#3|)) :qid |MutableMapModelidfy.258:16| :skolemid |1828| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|) |slot#3|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#3|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#3|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#3|)) ))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|slot#3@@0| T@U) ) (!  (=> (and (and (= (type |slot#3@@0|) DatatypeTypeType) ($Is |slot#3@@0| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#3@@0|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#3@@0|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#3@@0|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|) |slot#3@@0|)) :qid |MutableMapModelidfy.258:16| :skolemid |1828| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|) |slot#3@@0|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#3@@0|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#3@@0|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#3@@0|)) )))))) (and (=> (= (ControlFlow 0 321262) (- 0 1185877)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (=> (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) (or (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) (forall ((|slot1#1@@4| T@U) (|slot2#1@@4| T@U) ) (!  (=> (and (and (and (= (type |slot1#1@@4|) DatatypeTypeType) (= (type |slot2#1@@4|) DatatypeTypeType)) (and ($Is |slot1#1@@4| Tclass.MutableMapModel.Slot) ($Is |slot2#1@@4| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot1#1@@4| |slot2#1@@4|)) (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot1#1@@4| |slot2#1@@4|)) :qid |MutableMapModelidfy.242:12| :skolemid |1829| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot1#1@@4| |slot2#1@@4|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot1#1@@4| |slot2#1@@4|)) ))))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (=> (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) (or (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) (forall ((|slot1#1@@5| T@U) (|slot2#1@@5| T@U) ) (!  (=> (and (and (and (= (type |slot1#1@@5|) DatatypeTypeType) (= (type |slot2#1@@5|) DatatypeTypeType)) (and ($Is |slot1#1@@5| Tclass.MutableMapModel.Slot) ($Is |slot2#1@@5| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot1#1@@5| |slot2#1@@5|)) (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot1#1@@5| |slot2#1@@5|)) :qid |MutableMapModelidfy.242:12| :skolemid |1829| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot1#1@@5| |slot2#1@@5|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot1#1@@5| |slot2#1@@5|)) )))))))) (and (=> (= (ControlFlow 0 321262) (- 0 1185993)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|slot#4| T@U) ) (!  (=> (and (and (= (type |slot#4|) DatatypeTypeType) ($Is |slot#4| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#4|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#4|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#4| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :qid |MutableMapModelidfy.284:12| :skolemid |1834| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#4| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#4|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#4|)) ))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|slot#4@@0| T@U) ) (!  (=> (and (and (= (type |slot#4@@0|) DatatypeTypeType) ($Is |slot#4@@0| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#4@@0|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#4@@0|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#4@@0| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :qid |MutableMapModelidfy.284:12| :skolemid |1834| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#4@@0| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#4@@0|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#4@@0|)) )))))) (and (=> (= (ControlFlow 0 321262) (- 0 1186103)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|slot#5| T@U) ) (!  (=> (and (and (= (type |slot#5|) DatatypeTypeType) ($Is |slot#5| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#5|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#5|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#5| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :qid |MutableMapModelidfy.291:12| :skolemid |1836| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#5| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#5|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#5|)) ))))))) (=> (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|slot#5@@0| T@U) ) (!  (=> (and (and (= (type |slot#5@@0|) DatatypeTypeType) ($Is |slot#5@@0| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#5@@0|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#5@@0|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#5@@0| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :qid |MutableMapModelidfy.291:12| :skolemid |1836| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#5@@0| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#5@@0|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#5@@0|)) )))))) (and (=> (= (ControlFlow 0 321262) (- 0 1186213)) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) 1))) (=> (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) 1)) (=> (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (=> (and (and (and (and (|MutableMapModel.__default.FixedSizeInsert#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| |key##1_0@0| |value##1_0@0|) (let ((|replaced#0@@1| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.LemmaReallocIterateResult$V StartFuel_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@7| |key##1_0@0| |value##1_0@0|))))) (let ((|self'#0@@5| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.LemmaReallocIterateResult$V StartFuel_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@7| |key##1_0@0| |value##1_0@0|))))) (and (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0@@5|) (=> (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0@@5|) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self'#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|)) (=> (|Map#Equal| (MutableMapModel.FixedSizeLinearHashMap.contents |self'#0@@5|) (|Map#Build| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|) ($Box (int_2_U |key##1_0@0|)) ($Box (|#Options.Option.Some| |value##1_0@0|)))) (and (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key##1_0@0|)))) (and (and (|$IsA#Options.Option| |replaced#0@@1|) (|$IsA#Options.Option| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key##1_0@0|)))))) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|)))) (=> (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key##1_0@0|)))) (|Options.Option#Equal| |replaced#0@@1| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key##1_0@0|)))))) (and (=> (Options.Option.Some_q |replaced#0@@1|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|)) (=> (=> (Options.Option.Some_q |replaced#0@@1|) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key##1_0@0|))))) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|) (=> (=> (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key##1_0@0|))))) (Options.Option.None_q |replaced#0@@1|)) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |self'#0@@5|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|))))))))))))))) (let ((|self'#0@@6| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.LemmaReallocIterateResult$V StartFuelAssert_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@7| |key##1_0@0| |value##1_0@0|))))) (and (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self'#0@@6|) (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |self'#0@@6|) (and (and (and (and (and (and (and (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self'#0@@6|))) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self'#0@@6|)) 18446744073709551616)) (< (MutableMapModel.FixedSizeLinearHashMap.count |self'#0@@6|) 18446744073709551616)) (< (MutableMapModel.FixedSizeLinearHashMap.count |self'#0@@6|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self'#0@@6|)))) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents |self'#0@@6|)) (MutableMapModel.FixedSizeLinearHashMap.count |self'#0@@6|))) (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |self'#0@@6|) (MutableMapModel.FixedSizeLinearHashMap.contents |self'#0@@6|))) (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |self'#0@@6|) (MutableMapModel.FixedSizeLinearHashMap.contents |self'#0@@6|))) (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |self'#0@@6|) (MutableMapModel.FixedSizeLinearHashMap.contents |self'#0@@6|))))))) (and (let ((|self'#0@@7| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.LemmaReallocIterateResult$V StartFuelAssert_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@7| |key##1_0@0| |value##1_0@0|))))) (|Map#Equal| (MutableMapModel.FixedSizeLinearHashMap.contents |self'#0@@7|) (|Map#Build| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|) ($Box (int_2_U |key##1_0@0|)) ($Box (|#Options.Option.Some| |value##1_0@0|))))) (let ((|replaced#0@@2| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.LemmaReallocIterateResult$V StartFuelAssert_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@7| |key##1_0@0| |value##1_0@0|))))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key##1_0@0|)))) (|Options.Option#Equal| |replaced#0@@2| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key##1_0@0|))))))))) (and (and (let ((|replaced#0@@3| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.LemmaReallocIterateResult$V StartFuelAssert_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@7| |key##1_0@0| |value##1_0@0|))))) (=> (Options.Option.Some_q |replaced#0@@3|) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key##1_0@0|)))))) (let ((|replaced#0@@4| ($Unbox DatatypeTypeType (_System.Tuple2._1 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.LemmaReallocIterateResult$V StartFuelAssert_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@7| |key##1_0@0| |value##1_0@0|))))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key##1_0@0|))))) (Options.Option.None_q |replaced#0@@4|)))) (and (let ((|self'#0@@8| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.LemmaReallocIterateResult$V StartFuelAssert_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@7| |key##1_0@0| |value##1_0@0|))))) (= (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |self'#0@@8|)) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)))) (= $Heap@2 $Heap@3)))) (and (=> (= (ControlFlow 0 321262) (- 0 1186869)) (or (MutableMapModel.Item.Entry_q |item#0@0|) (MutableMapModel.Item.Tombstone_q |item#0@0|))) (=> (or (MutableMapModel.Item.Entry_q |item#0@0|) (MutableMapModel.Item.Tombstone_q |item#0@0|)) (and (=> (= (ControlFlow 0 321262) (- 0 1186877)) (MutableMapModel.Item.Entry_q |item#0@0|)) (=> (MutableMapModel.Item.Entry_q |item#0@0|) (=> ($IsAlloc |newUnderlying#0@@7| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V) $Heap@3) (=> (and (and (= |##key#1_0@0| (MutableMapModel.Item.key |item#0@0|)) ($IsAlloc (int_2_U |##key#1_0@0|) Tclass.NativeTypes.uint64 $Heap@3)) (and (= |##value#1_0@0| (MutableMapModel.Item.value |item#0@0|)) ($IsAllocBox |##value#1_0@0| MutableMapModel._default.LemmaReallocIterateResult$V $Heap@3))) (and (=> (= (ControlFlow 0 321262) (- 0 1186921)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)))))) (and (=> (= (ControlFlow 0 321262) (- 0 1186946)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) 18446744073709551616)))) (and (=> (= (ControlFlow 0 321262) (- 0 1186969)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) 18446744073709551616)))) (and (=> (= (ControlFlow 0 321262) (- 0 1186990)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)))))) (and (=> (= (ControlFlow 0 321262) (- 0 1187014)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|))))) (and (=> (= (ControlFlow 0 321262) (- 0 1187038)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|key#1_0| Int) ) (!  (=> (and (<= (LitInt 0) |key#1_0|) (< |key#1_0| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#1_0|)))) (exists ((|skips#1_0| Int) ) (!  (and (<= (LitInt 0) |skips#1_0|) (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |skips#1_0| |key#1_0|)) :qid |MutableMapModelidfy.257:50| :skolemid |2832| :pattern ( (MutableMapModel.__default.SlotExplainsKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |skips#1_0| |key#1_0|)) )))) :qid |MutableMapModelidfy.257:16| :skolemid |2833| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#1_0|)))) ))))))) (and (=> (= (ControlFlow 0 321262) (- 0 1187158)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|slot#1_0| T@U) ) (!  (=> (and (and (= (type |slot#1_0|) DatatypeTypeType) ($Is |slot#1_0| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#1_0|) (or (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#1_0|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#1_0|)))) (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|) |slot#1_0|)) :qid |MutableMapModelidfy.258:16| :skolemid |2834| :pattern ( (MutableMapModel.__default.KeyInSlotIsInContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|) |slot#1_0|)) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#1_0|)) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#1_0|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#1_0|)) ))))))) (and (=> (= (ControlFlow 0 321262) (- 0 1187298)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.SeqMatchesContentKeys#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (=> (|MutableMapModel.__default.CantEquivocateStorageKey#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) (or (MutableMapModel.__default.CantEquivocateStorageKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) (forall ((|slot1#1_0| T@U) (|slot2#1_0| T@U) ) (!  (=> (and (and (and (= (type |slot1#1_0|) DatatypeTypeType) (= (type |slot2#1_0|) DatatypeTypeType)) (and ($Is |slot1#1_0| Tclass.MutableMapModel.Slot) ($Is |slot2#1_0| Tclass.MutableMapModel.Slot))) (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot1#1_0| |slot2#1_0|)) (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot1#1_0| |slot2#1_0|)) :qid |MutableMapModelidfy.242:12| :skolemid |2835| :pattern ( (MutableMapModel.__default.SameSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot1#1_0| |slot2#1_0|)) :pattern ( (MutableMapModel.__default.TwoNonEmptyValidSlotsWithSameKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot1#1_0| |slot2#1_0|)) ))))))))) (and (=> (= (ControlFlow 0 321262) (- 0 1187422)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.EntriesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|slot#1_1| T@U) ) (!  (=> (and (and (= (type |slot#1_1|) DatatypeTypeType) ($Is |slot#1_1| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#1_1|) (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#1_1|))) (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#1_1| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :qid |MutableMapModelidfy.284:12| :skolemid |2840| :pattern ( (MutableMapModel.__default.EntryInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#1_1| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :pattern ( (MutableMapModel.__default.SlotIsEntry MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#1_1|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#1_1|)) ))))))) (and (=> (= (ControlFlow 0 321262) (- 0 1187540)) (=> (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (or (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (=> (|MutableMapModel.__default.TombstonesMatchContentValue#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (or (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (forall ((|slot#1_2| T@U) ) (!  (=> (and (and (= (type |slot#1_2|) DatatypeTypeType) ($Is |slot#1_2| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#1_2|) (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#1_2|))) (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#1_2| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :qid |MutableMapModelidfy.291:12| :skolemid |2842| :pattern ( (MutableMapModel.__default.TombstoneInSlotMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#1_2| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) :pattern ( (MutableMapModel.__default.SlotIsTombstone MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) |slot#1_2|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |slot#1_2|)) ))))))) (=> (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (and (=> (= (ControlFlow 0 321262) (- 0 1187663)) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) 1))) (=> (and (and (and (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) 1)) (|MutableMapModel.__default.FixedSizeInsert#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| (MutableMapModel.Item.key |item#0@0|) (MutableMapModel.Item.value |item#0@0|))) (and (_System.Tuple2.___hMake2_q (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.LemmaReallocIterateResult$V StartFuel_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@7| (MutableMapModel.Item.key |item#0@0|) (MutableMapModel.Item.value |item#0@0|))) (_System.Tuple2.___hMake2_q (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.LemmaReallocIterateResult$V StartFuel_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@7| (MutableMapModel.Item.key |item#0@0|) (MutableMapModel.Item.value |item#0@0|))))) (and (and (|MutableMapModel.__default.FixedSizeInsert#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| (MutableMapModel.Item.key |item#0@0|) (MutableMapModel.Item.value |item#0@0|)) (_System.Tuple2.___hMake2_q (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.LemmaReallocIterateResult$V StartFuel_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@7| (MutableMapModel.Item.key |item#0@0|) (MutableMapModel.Item.value |item#0@0|)))) (= |newUnderlying'#2@1| ($Unbox DatatypeTypeType (_System.Tuple2._0 (MutableMapModel.__default.FixedSizeInsert MutableMapModel._default.LemmaReallocIterateResult$V StartFuel_MutableMapModel._default.FixedSizeInsert |newUnderlying#0@@7| (MutableMapModel.Item.key |item#0@0|) (MutableMapModel.Item.value |item#0@0|))))))) (and (=> (= (ControlFlow 0 321262) (- 0 1187795)) (or (MutableMapModel.Item.Entry_q |item#0@0|) (MutableMapModel.Item.Tombstone_q |item#0@0|))) (=> (or (MutableMapModel.Item.Entry_q |item#0@0|) (MutableMapModel.Item.Tombstone_q |item#0@0|)) (and (=> (= (ControlFlow 0 321262) (- 0 1187803)) (MutableMapModel.Item.Entry_q |item#0@0|)) (=> (MutableMapModel.Item.Entry_q |item#0@0|) (=> (= |transferredContents'#0@1| (|Map#Build| |transferredContents#0| ($Box (int_2_U (MutableMapModel.Item.key |item#0@0|))) (MutableMapModel.Item.value |item#0@0|))) (and (=> (= (ControlFlow 0 321262) 321271) anon72_Then_correct) (=> (= (ControlFlow 0 321262) 321363) anon72_Else_correct)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((anon65_Then_correct  (=> (MutableMapModel.Item.Entry_q |item#0@0|) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (and (=> (= (ControlFlow 0 321203) (- 0 1183930)) (and (<= 0 |i#0@@115|) (<= |i#0@@115| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))) (=> (= |##elements#1_0@0| (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |i#0@@115|)) (=> (and ($IsAlloc |##elements#1_0@0| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.LemmaReallocIterateResult$V)) $Heap@0) (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |i#0@@115|))) (=> (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |i#0@@115|))) (and (=> (= (ControlFlow 0 321203) (- 0 1184018)) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |i#0@@115|)) |transferredContents#0|)) (=> (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS $LZ) (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |i#0@@115|)) |transferredContents#0|) (=> (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|) (= |newtype$check#1_0@0| (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|))) (and (=> (= (ControlFlow 0 321203) (- 0 1184078)) (<= (LitInt 0) |newtype$check#1_0@0|)) (=> (<= (LitInt 0) |newtype$check#1_0@0|) (=> (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|) (and (=> (= (ControlFlow 0 321203) (- 0 1184089)) (= (|Map#Card| |transferredContents#0|) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|))) (=> (= (|Map#Card| |transferredContents#0|) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|)) (and (=> (= (ControlFlow 0 321203) (- 0 1184099)) (or (MutableMapModel.Item.Entry_q |item#0@0|) (MutableMapModel.Item.Tombstone_q |item#0@0|))) (=> (or (MutableMapModel.Item.Entry_q |item#0@0|) (MutableMapModel.Item.Tombstone_q |item#0@0|)) (=> (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|)) (and (=> (= (ControlFlow 0 321203) 321210) anon66_Then_correct) (=> (= (ControlFlow 0 321203) 321262) anon66_Else_correct))))))))))))))))))))) (let ((anon56_correct  (=> (forall ((|key#30| T@U) ) (!  (=> (= (type |key#30|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#30|)) (< (U_2_int |key#30|) 18446744073709551616)) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#30|))) (forall ((|slot#41| T@U) ) (!  (=> (and (= (type |slot#41|) DatatypeTypeType) ($Is |slot#41| Tclass.MutableMapModel.Slot)) (and (MutableMapModel.Slot.Slot_q |slot#41|) (=> (< (MutableMapModel.Slot.slot |slot#41|) |i#0@@115|) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#41|)) (=> (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#41|) (and (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (MutableMapModel.Slot.Slot_q |slot#41|)) (=> (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#41|)))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (MutableMapModel.Slot.Slot_q |slot#41|))))))))) :qid |MutableMapModelidfy.1186:69| :skolemid |2856| :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#41|)) :pattern ( (MutableMapModel.Slot.slot |slot#41|)) )))))) :qid |MutableMapModelidfy.1186:21| :skolemid |2857| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#30|))) )) (and (=> (= (ControlFlow 0 321429) (- 0 1184746)) (forall ((|key#30@@0| Int) ) (!  (=> (and (<= (LitInt 0) |key#30@@0|) (< |key#30@@0| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#30@@0|)))) (exists ((|slot#41@@0| T@U) ) (!  (and (= (type |slot#41@@0|) DatatypeTypeType) (and ($Is |slot#41@@0| Tclass.MutableMapModel.Slot) (and (and (and (< (MutableMapModel.Slot.slot |slot#41@@0|) |i#0@@115|) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#41@@0|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#41@@0|))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#41@@0|)))) |key#30@@0|)))) :qid |MutableMapModelidfy.1186:69| :skolemid |2860| :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#41@@0|)) :pattern ( (MutableMapModel.Slot.slot |slot#41@@0|)) )))) :qid |MutableMapModelidfy.1186:21| :skolemid |2861| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#30@@0|)))) ))) (=> (forall ((|key#30@@1| T@U) ) (!  (=> (= (type |key#30@@1|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#30@@1|)) (< (U_2_int |key#30@@1|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#30@@1|))) (exists ((|slot#41@@1| T@U) ) (!  (and (= (type |slot#41@@1|) DatatypeTypeType) (and ($Is |slot#41@@1| Tclass.MutableMapModel.Slot) (and (and (and (< (MutableMapModel.Slot.slot |slot#41@@1|) |i#0@@115|) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#41@@1|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#41@@1|))))) (= (MutableMapModel.Item.key ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#41@@1|)))) (U_2_int |key#30@@1|))))) :qid |MutableMapModelidfy.1186:69| :skolemid |2860| :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#41@@1|)) :pattern ( (MutableMapModel.Slot.slot |slot#41@@1|)) ))))) :qid |MutableMapModelidfy.1186:21| :skolemid |2861| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#30@@1|))) )) (=> (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|) (= |newtype$check#14@0| (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|))) (and (=> (= (ControlFlow 0 321429) (- 0 1184904)) (<= (LitInt 0) |newtype$check#14@0|)) (=> (<= (LitInt 0) |newtype$check#14@0|) (=> (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|) (and (=> (= (ControlFlow 0 321429) (- 0 1184915)) (<= (|Map#Card| |transferredContents#0|) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|))) (=> (<= (|Map#Card| |transferredContents#0|) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|)) (=> (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (=> (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (= |newtype$check#15@0| (LitInt 1))) (and (=> (= (ControlFlow 0 321429) (- 0 1184944)) (and (<= (LitInt 0) |newtype$check#15@0|) (< |newtype$check#15@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#15@0|) (< |newtype$check#15@0| 18446744073709551616)) (=> (= |newtype$check#16@0| (+ |i#0@@115| 1)) (and (=> (= (ControlFlow 0 321429) (- 0 1184970)) (and (<= (LitInt 0) |newtype$check#16@0|) (< |newtype$check#16@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#16@0|) (< |newtype$check#16@0| 18446744073709551616)) (and (=> (= (ControlFlow 0 321429) (- 0 1184984)) (and (<= 0 (+ |i#0@@115| 1)) (<= (+ |i#0@@115| 1) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))) (=> (= |##elements#3@0| (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (+ |i#0@@115| 1))) (=> (and ($IsAlloc |##elements#3@0| (TSeq (Tclass.MutableMapModel.Item MutableMapModel._default.LemmaReallocIterateResult$V)) $Heap@0) (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (+ |i#0@@115| 1)))) (=> (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (|MutableMapModel.__default.MapFromStorage#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (+ |i#0@@115| 1)))) (and (=> (= (ControlFlow 0 321429) (- 0 1185092)) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (+ |i#0@@115| 1))) |transferredContents#0|)) (=> (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS $LZ) (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (+ |i#0@@115| 1))) |transferredContents#0|) (=> (and (and (= $Heap@4 $Heap@0) (= |newUnderlying'#2@2| |newUnderlying#0@@7|)) (and (= |transferredContents'#0@2| |transferredContents#0|) (= (ControlFlow 0 321429) 321431))) anon57_correct))))))))))))))))))))))))) (let ((anon87_Else_correct  (=> (and (not (and (and (< (MutableMapModel.Slot.slot |slot#40@0|) |i#0@@115|) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#40@0|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#40@0|)))))) (= (ControlFlow 0 321419) 321429)) anon56_correct))) (let ((anon87_Then_correct  (=> (and (and (and (and (< (MutableMapModel.Slot.slot |slot#40@0|) |i#0@@115|) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#40@0|)) (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#40@0|))))) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|)) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.Slot_q |slot#40@0|))) (and (=> (= (ControlFlow 0 321417) (- 0 1184447)) (and (<= 0 (MutableMapModel.Slot.slot |slot#40@0|)) (< (MutableMapModel.Slot.slot |slot#40@0|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))) (and (=> (= (ControlFlow 0 321417) (- 0 1184469)) (or (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#40@0|)))) (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#40@0|)))))) (=> (or (MutableMapModel.Item.Entry_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#40@0|)))) (MutableMapModel.Item.Tombstone_q ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.slot |slot#40@0|))))) (=> (= (ControlFlow 0 321417) 321429) anon56_correct))))))) (let ((anon86_Else_correct  (=> (not (and (< (MutableMapModel.Slot.slot |slot#40@0|) |i#0@@115|) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#40@0|))) (and (=> (= (ControlFlow 0 321408) 321417) anon87_Then_correct) (=> (= (ControlFlow 0 321408) 321419) anon87_Else_correct))))) (let ((anon86_Then_correct  (=> (and (and (and (< (MutableMapModel.Slot.slot |slot#40@0|) |i#0@@115|) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#40@0|)) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|)) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.Slot.Slot_q |slot#40@0|))) (and (=> (= (ControlFlow 0 321406) (- 0 1184351)) (and (<= 0 (MutableMapModel.Slot.slot |slot#40@0|)) (< (MutableMapModel.Slot.slot |slot#40@0|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))) (and (=> (= (ControlFlow 0 321406) 321417) anon87_Then_correct) (=> (= (ControlFlow 0 321406) 321419) anon87_Else_correct)))))) (let ((anon85_Else_correct  (=> (<= |i#0@@115| (MutableMapModel.Slot.slot |slot#40@0|)) (and (=> (= (ControlFlow 0 321397) 321406) anon86_Then_correct) (=> (= (ControlFlow 0 321397) 321408) anon86_Else_correct))))) (let ((anon85_Then_correct  (=> (< (MutableMapModel.Slot.slot |slot#40@0|) |i#0@@115|) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (and (=> (= (ControlFlow 0 321395) (- 0 1184260)) ($Is (int_2_U (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) Tclass._System.nat)) (=> ($Is (int_2_U (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) Tclass._System.nat) (=> (and (and (= |##elementsLength#1@0| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) ($IsAlloc (int_2_U |##elementsLength#1@0|) Tclass._System.nat $Heap@0)) (and ($IsAlloc |slot#40@0| Tclass.MutableMapModel.Slot $Heap@0) (|MutableMapModel.__default.ValidSlot#canCall| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#40@0|))) (and (=> (= (ControlFlow 0 321395) 321406) anon86_Then_correct) (=> (= (ControlFlow 0 321395) 321408) anon86_Else_correct))))))))) (let ((anon84_Then_correct  (=> (and (and ($Is |slot#40@0| Tclass.MutableMapModel.Slot) ($IsAlloc |slot#40@0| Tclass.MutableMapModel.Slot $Heap@0)) (MutableMapModel.Slot.Slot_q |slot#40@0|)) (and (=> (= (ControlFlow 0 321393) (- 0 1184221)) (<= (LitInt 0) |i#0@@115|)) (=> (<= (LitInt 0) |i#0@@115|) (and (=> (= (ControlFlow 0 321393) 321395) anon85_Then_correct) (=> (= (ControlFlow 0 321393) 321397) anon85_Else_correct))))))) (let ((anon84_Else_correct  (=> (and (not (and ($Is |slot#40@0| Tclass.MutableMapModel.Slot) ($IsAlloc |slot#40@0| Tclass.MutableMapModel.Slot $Heap@0))) (= (ControlFlow 0 321421) 321429)) anon56_correct))) (let ((anon83_Then_correct  (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#29@0|)))) (and (=> (= (ControlFlow 0 321386) 321393) anon84_Then_correct) (=> (= (ControlFlow 0 321386) 321421) anon84_Else_correct))))) (let ((anon83_Else_correct  (=> (and (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box (int_2_U |key#29@0|))))) (= (ControlFlow 0 321425) 321429)) anon56_correct))) (let ((anon82_Then_correct  (=> (and (and (<= (LitInt 0) |key#29@0|) (< |key#29@0| 18446744073709551616)) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q |newUnderlying#0@@7|)) (and (=> (= (ControlFlow 0 321379) 321386) anon83_Then_correct) (=> (= (ControlFlow 0 321379) 321425) anon83_Else_correct))))) (let ((anon82_Else_correct  (=> (and (not (and (<= (LitInt 0) |key#29@0|) (< |key#29@0| 18446744073709551616))) (= (ControlFlow 0 321427) 321429)) anon56_correct))) (let ((anon65_Else_correct  (=> (not (MutableMapModel.Item.Entry_q |item#0@0|)) (and (=> (= (ControlFlow 0 321372) 321379) anon82_Then_correct) (=> (= (ControlFlow 0 321372) 321427) anon82_Else_correct))))) (let ((anon58_Else_correct  (=> (not (= |i#0@@115| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))))) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (and (=> (= (ControlFlow 0 321189) (- 0 1183585)) (and (<= 0 |i#0@@115|) (< |i#0@@115| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))) (=> (and (<= 0 |i#0@@115|) (< |i#0@@115| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))))) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (=> (and (and (= |item#0@0| ($Unbox DatatypeTypeType (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |i#0@@115|))) (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|)) (and (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (= |newtype$check#11@0| (LitInt 1)))) (and (=> (= (ControlFlow 0 321189) (- 0 1183659)) (and (<= (LitInt 0) |newtype$check#11@0|) (< |newtype$check#11@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#11@0|) (< |newtype$check#11@0| 18446744073709551616)) (=> (= |newtype$check#12@0| (+ |i#0@@115| 1)) (and (=> (= (ControlFlow 0 321189) (- 0 1183685)) (and (<= (LitInt 0) |newtype$check#12@0|) (< |newtype$check#12@0| 18446744073709551616))) (=> (and (<= (LitInt 0) |newtype$check#12@0|) (< |newtype$check#12@0| 18446744073709551616)) (and (=> (= (ControlFlow 0 321189) (- 0 1183699)) (and (<= 0 (+ |i#0@@115| 1)) (<= (+ |i#0@@115| 1) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (and (=> (= (ControlFlow 0 321189) (- 0 1183737)) (and (<= 0 |i#0@@115|) (<= |i#0@@115| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))) (=> (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (and (=> (= (ControlFlow 0 321189) (- 0 1183767)) (and (<= 0 |i#0@@115|) (< |i#0@@115| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))))) (=> (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))))) (and (=> (= (ControlFlow 0 321189) (- 0 1183827)) (|Seq#Equal| (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (+ |i#0@@115| 1)) (|Seq#Append| (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |i#0@@115|) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |i#0@@115|))))) (=> (|Seq#Equal| (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (+ |i#0@@115| 1)) (|Seq#Append| (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |i#0@@115|) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |i#0@@115|)))) (=> (and (and ($Is |newUnderlying'#2@0| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V)) ($IsAlloc |newUnderlying'#2@0| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V) $Heap@0)) (and ($Is |transferredContents'#0@0| (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.LemmaReallocIterateResult$V)) ($IsAlloc |transferredContents'#0@0| (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.LemmaReallocIterateResult$V) $Heap@0))) (and (=> (= (ControlFlow 0 321189) 321203) anon65_Then_correct) (=> (= (ControlFlow 0 321189) 321372) anon65_Else_correct)))))))))))))))))))))))) (let ((anon0_correct  (=> (= (AsFuelBottom StartFuel_Sequences._default.NoDupes) StartFuel_Sequences._default.NoDupes) (=> (and (and (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.NoDupes) StartFuelAssert_Sequences._default.NoDupes) (= (AsFuelBottom StartFuel_Sequences._default.Range) StartFuel_Sequences._default.Range)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Range) StartFuelAssert_Sequences._default.Range) (= (AsFuelBottom StartFuel_Sequences._default.ApplyOpaque) StartFuel_Sequences._default.ApplyOpaque))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.ApplyOpaque) StartFuelAssert_Sequences._default.ApplyOpaque) (= (AsFuelBottom StartFuel_Sequences._default.remove) StartFuel_Sequences._default.remove)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.remove) StartFuelAssert_Sequences._default.remove) (= (AsFuelBottom StartFuel_Sequences._default.RemoveOneValue) StartFuel_Sequences._default.RemoveOneValue)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.RemoveOneValue) StartFuelAssert_Sequences._default.RemoveOneValue) (= (AsFuelBottom StartFuel_Sequences._default.insert) StartFuel_Sequences._default.insert)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.insert) StartFuelAssert_Sequences._default.insert) (= (AsFuelBottom StartFuel_Sequences._default.replace1with2) StartFuel_Sequences._default.replace1with2))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace1with2) StartFuelAssert_Sequences._default.replace1with2) (= (AsFuelBottom StartFuel_Sequences._default.replace2with1) StartFuel_Sequences._default.replace2with1)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace2with1) StartFuelAssert_Sequences._default.replace2with1) (= (AsFuelBottom StartFuel_Sequences._default.concat) StartFuel_Sequences._default.concat))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat) StartFuelAssert_Sequences._default.concat) (= (AsFuelBottom StartFuel_Sequences._default.concat3) StartFuel_Sequences._default.concat3)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat3) StartFuelAssert_Sequences._default.concat3) (= (AsFuelBottom StartFuel_Sequences._default.concatSeq) StartFuel_Sequences._default.concatSeq))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concatSeq) StartFuelAssert_Sequences._default.concatSeq) (= (AsFuelBottom StartFuel_Sequences._default.IsPrefix) StartFuel_Sequences._default.IsPrefix)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsPrefix) StartFuelAssert_Sequences._default.IsPrefix) (= (AsFuelBottom StartFuel_Sequences._default.IsSuffix) StartFuel_Sequences._default.IsSuffix)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsSuffix) StartFuelAssert_Sequences._default.IsSuffix) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexIterate) StartFuel_Sequences._default.SeqIndexIterate)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexIterate) StartFuelAssert_Sequences._default.SeqIndexIterate) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndex) StartFuel_Sequences._default.SeqIndex))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndex) StartFuelAssert_Sequences._default.SeqIndex) (= (AsFuelBottom StartFuel_Sequences._default.SeqOfLength) StartFuel_Sequences._default.SeqOfLength)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqOfLength) StartFuelAssert_Sequences._default.SeqOfLength) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexUpdate) StartFuel_Sequences._default.SeqIndexUpdate)))))) (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexUpdate) StartFuelAssert_Sequences._default.SeqIndexUpdate) (= (AsFuelBottom StartFuel_Sequences._default.Zip) StartFuel_Sequences._default.Zip)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Zip) StartFuelAssert_Sequences._default.Zip) (= (AsFuelBottom StartFuel_Sequences._default.Unzip) StartFuel_Sequences._default.Unzip))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Unzip) StartFuelAssert_Sequences._default.Unzip) (= (AsFuelBottom StartFuel_Sequences._default.FlattenShape) StartFuel_Sequences._default.FlattenShape)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenShape) StartFuelAssert_Sequences._default.FlattenShape) (= (AsFuelBottom StartFuel_Sequences._default.FlattenLength) StartFuel_Sequences._default.FlattenLength)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenLength) StartFuelAssert_Sequences._default.FlattenLength) (= (AsFuelBottom StartFuel_Sequences._default.Flatten) StartFuel_Sequences._default.Flatten)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Flatten) StartFuelAssert_Sequences._default.Flatten) (= (AsFuelBottom StartFuel_Sequences._default.seqMax) StartFuel_Sequences._default.seqMax))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.seqMax) StartFuelAssert_Sequences._default.seqMax) (= (AsFuelBottom StartFuel_Sequences._default.fill) StartFuel_Sequences._default.fill)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.fill) StartFuelAssert_Sequences._default.fill) (= (AsFuelBottom StartFuel_MapRemove_s._default.MapRemove1) StartFuel_MapRemove_s._default.MapRemove1))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_MapRemove_s._default.MapRemove1) StartFuelAssert_MapRemove_s._default.MapRemove1) (= (AsFuelBottom StartFuel_Maps._default.MapRemove) StartFuel_Maps._default.MapRemove)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove) StartFuelAssert_Maps._default.MapRemove) (= (AsFuelBottom StartFuel_Maps._default.MapRemoveStrong) StartFuel_Maps._default.MapRemoveStrong))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemoveStrong) StartFuelAssert_Maps._default.MapRemoveStrong) (= (AsFuelBottom StartFuel_Maps._default.MapRemove1Strong) StartFuel_Maps._default.MapRemove1Strong)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1Strong) StartFuelAssert_Maps._default.MapRemove1Strong) (= (AsFuelBottom StartFuel_Maps._default.IMapRemove) StartFuel_Maps._default.IMapRemove)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove) StartFuelAssert_Maps._default.IMapRemove) (= (AsFuelBottom StartFuel_Maps._default.IMapRemove1) StartFuel_Maps._default.IMapRemove1)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove1) StartFuelAssert_Maps._default.IMapRemove1) (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion) StartFuel_Maps._default.MapDisjointUnion))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion) StartFuelAssert_Maps._default.MapDisjointUnion) (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferA) StartFuel_Maps._default.MapUnionPreferA)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferA) StartFuelAssert_Maps._default.MapUnionPreferA) (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferB) StartFuel_Maps._default.MapUnionPreferB))))))) (and (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferB) StartFuelAssert_Maps._default.MapUnionPreferB) (= (AsFuelBottom StartFuel_Maps._default.MapUnion) StartFuel_Maps._default.MapUnion)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnion) StartFuelAssert_Maps._default.MapUnion) (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferA) StartFuel_Maps._default.IMapUnionPreferA))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferA) StartFuelAssert_Maps._default.IMapUnionPreferA) (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferB) StartFuel_Maps._default.IMapUnionPreferB)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferB) StartFuelAssert_Maps._default.IMapUnionPreferB) (= (AsFuelBottom StartFuel_Maps._default.IMapUnion) StartFuel_Maps._default.IMapUnion)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnion) StartFuelAssert_Maps._default.IMapUnion) (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion3) StartFuel_Maps._default.MapDisjointUnion3)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion3) StartFuelAssert_Maps._default.MapDisjointUnion3) (= (AsFuelBottom StartFuel_MutableMapModel._default.lshift) StartFuel_MutableMapModel._default.lshift))) (and (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.lshift) StartFuelAssert_MutableMapModel._default.lshift) (= (AsFuelBottom StartFuel_MutableMapModel._default.rshift) StartFuel_MutableMapModel._default.rshift)) (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.rshift) StartFuelAssert_MutableMapModel._default.rshift) (= (AsFuelBottom StartFuel_MutableMapModel._default.bitnot) StartFuel_MutableMapModel._default.bitnot))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.bitnot) StartFuelAssert_MutableMapModel._default.bitnot) (= (AsFuelBottom StartFuel_MutableMapModel._default.bitxor) StartFuel_MutableMapModel._default.bitxor)) (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.bitxor) StartFuelAssert_MutableMapModel._default.bitxor) (= (AsFuelBottom StartFuel_MutableMapModel._default.hash64) StartFuel_MutableMapModel._default.hash64))) (and (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.hash64) StartFuelAssert_MutableMapModel._default.hash64) (= (AsFuelBottom StartFuel_MutableMapModel._default.getEmptyWitness) StartFuel_MutableMapModel._default.getEmptyWitness)) (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.getEmptyWitness) StartFuelAssert_MutableMapModel._default.getEmptyWitness) (= (AsFuelBottom StartFuel_MutableMapModel._default.Probe) StartFuel_MutableMapModel._default.Probe)))) (and (and (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.Probe) StartFuelAssert_MutableMapModel._default.Probe) (= (AsFuelBottom StartFuel_MutableMapModel._default.FixedSizeInsert) StartFuel_MutableMapModel._default.FixedSizeInsert)) (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.FixedSizeInsert) StartFuelAssert_MutableMapModel._default.FixedSizeInsert) (= (AsFuelBottom StartFuel_MutableMapModel._default.FixedSizeGet) StartFuel_MutableMapModel._default.FixedSizeGet))) (and (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.FixedSizeGet) StartFuelAssert_MutableMapModel._default.FixedSizeGet) (= (AsFuelBottom StartFuel_MutableMapModel._default.FixedSizeRemove) StartFuel_MutableMapModel._default.FixedSizeRemove)) (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.FixedSizeRemove) StartFuelAssert_MutableMapModel._default.FixedSizeRemove) (= (AsFuelBottom StartFuel_MutableMapModel._default.Constructor) StartFuel_MutableMapModel._default.Constructor)))))) (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.Constructor) StartFuelAssert_MutableMapModel._default.Constructor) (= (AsFuelBottom StartFuel_MutableMapModel._default.ReallocInternal) StartFuel_MutableMapModel._default.ReallocInternal)) (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.ReallocInternal) StartFuelAssert_MutableMapModel._default.ReallocInternal) (= (AsFuelBottom StartFuel_MutableMapModel._default.InsertAndGetOld) StartFuel_MutableMapModel._default.InsertAndGetOld))) (and (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.InsertAndGetOld) StartFuelAssert_MutableMapModel._default.InsertAndGetOld) (= (AsFuelBottom StartFuel_MutableMapModel._default.Insert) StartFuel_MutableMapModel._default.Insert)) (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.Insert) StartFuelAssert_MutableMapModel._default.Insert) (= (AsFuelBottom StartFuel_MutableMapModel._default.IterStart) StartFuel_MutableMapModel._default.IterStart)))) (and (and (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.IterStart) StartFuelAssert_MutableMapModel._default.IterStart) (= (AsFuelBottom StartFuel_MutableMapModel._default.SimpleIterStart) StartFuel_MutableMapModel._default.SimpleIterStart)) (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.SimpleIterStart) StartFuelAssert_MutableMapModel._default.SimpleIterStart) (= (AsFuelBottom StartFuel_MutableMapModel._default.IterInc) StartFuel_MutableMapModel._default.IterInc))) (and (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.IterInc) StartFuelAssert_MutableMapModel._default.IterInc) (= (AsFuelBottom StartFuel_MutableMapModel._default.SimpleIterInc) StartFuel_MutableMapModel._default.SimpleIterInc)) (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.SimpleIterInc) StartFuelAssert_MutableMapModel._default.SimpleIterInc) (= (AsFuelBottom StartFuel_MutableMapModel._default.MaxKey) StartFuel_MutableMapModel._default.MaxKey))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.MaxKey) StartFuelAssert_MutableMapModel._default.MaxKey) (= (AsFuelBottom StartFuel_MutableMapModel._default.UpdateByIter) StartFuel_MutableMapModel._default.UpdateByIter)) (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.UpdateByIter) StartFuelAssert_MutableMapModel._default.UpdateByIter) (= (AsFuelBottom StartFuel_MutableMapModel._default.FindSimpleIter) StartFuel_MutableMapModel._default.FindSimpleIter))) (and (and (= (AsFuelBottom StartFuelAssert_MutableMapModel._default.FindSimpleIter) StartFuelAssert_MutableMapModel._default.FindSimpleIter) (= $_Frame@0 (|lambda#138| null $Heap@@40 alloc false))) (and (|$IsA#MutableMapModel.LinearHashMap| |self#0@@200|) (|$IsA#MutableMapModel.FixedSizeLinearHashMap| |newUnderlying#0@@7|)))) (and (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap@@40 $Heap@0) (forall ((|$ih#self0#0| T@U) (|$ih#newUnderlying0#0| T@U) (|$ih#i0#0| Int) ) (!  (=> (and (= (type |$ih#self0#0|) DatatypeTypeType) (= (type |$ih#newUnderlying0#0|) DatatypeTypeType)) (=> (and (and (and (and ($Is |$ih#self0#0| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V)) ($Is |$ih#newUnderlying0#0| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V))) (and (<= (LitInt 0) |$ih#i0#0|) (< |$ih#i0#0| 18446744073709551616))) (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |$ih#self0#0|) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |$ih#newUnderlying0#0|)) (and (<= (LitInt 0) |$ih#i0#0|) (<= |$ih#i0#0| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |$ih#self0#0|)))))) (< (MutableMapModel.LinearHashMap.count |$ih#self0#0|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |$ih#newUnderlying0#0|)) 1))) (< (MutableMapModel.LinearHashMap.count |$ih#self0#0|) (Div 18446744073709551616 (LitInt 8)))) (|Set#Subset| (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |$ih#newUnderlying0#0|)) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |$ih#self0#0|)))) (= (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |$ih#newUnderlying0#0|)) |newSize#0@@1|)) (= |newSize#0@@1| (Mul (+ 128 (MutableMapModel.LinearHashMap.count |$ih#self0#0|)) (LitInt 4)))) (= (|Map#Card| (MutableMapModel.LinearHashMap.contents |$ih#self0#0|)) (MutableMapModel.LinearHashMap.count |$ih#self0#0|))) (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V |$ih#newUnderlying0#0| |transferredContents#0|)) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS $LZ) (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |$ih#self0#0|)) |$ih#i0#0|)) |transferredContents#0|)) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS $LZ) (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |$ih#self0#0|))) (MutableMapModel.LinearHashMap.contents |$ih#self0#0|))) (<= (MutableMapModel.FixedSizeLinearHashMap.count |$ih#newUnderlying0#0|) |$ih#i0#0|)) (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |$ih#self0#0|))) (= (|Map#Card| |transferredContents#0|) (MutableMapModel.FixedSizeLinearHashMap.count |$ih#newUnderlying0#0|))) (|Set#Subset| (|Map#Domain| |transferredContents#0|) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |$ih#self0#0|)))) (forall ((|key#28| Int) ) (!  (=> (and (<= (LitInt 0) |key#28|) (< |key#28| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |$ih#newUnderlying0#0|)) ($Box (int_2_U |key#28|)))) (exists ((|slot#39| T@U) ) (!  (and (= (type |slot#39|) DatatypeTypeType) (and ($Is |slot#39| Tclass.MutableMapModel.Slot) (and (and (< (MutableMapModel.Slot.slot |slot#39|) |$ih#i0#0|) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |$ih#self0#0|))) |slot#39|)) (MutableMapModel.__default.FilledWithEntryKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |$ih#self0#0|)) |slot#39| |key#28|)))) :qid |MutableMapModelidfy.1075:69| :skolemid |2770| :pattern ( (MutableMapModel.__default.FilledWithEntryKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |$ih#self0#0|)) |slot#39| |key#28|)) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |$ih#self0#0|))) |slot#39|)) :pattern ( (MutableMapModel.Slot.slot |slot#39|)) )))) :qid |MutableMapModelidfy.1075:21| :skolemid |2771| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |$ih#newUnderlying0#0|)) ($Box (int_2_U |key#28|)))) )))) (and (<= 0 (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |$ih#self0#0|))) |$ih#i0#0|)) (< (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |$ih#self0#0|))) |$ih#i0#0|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |i#0@@115|)))) (let ((|newUnderlying'#1@@1| (MutableMapModel.__default.ReallocIterate MutableMapModel._default.LemmaReallocIterateResult$V ($LS $LZ) |$ih#self0#0| |$ih#newUnderlying0#0| |$ih#i0#0|))) (and (and (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying'#1@@1|) (= (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#1@@1|) (MutableMapModel.LinearHashMap.count |$ih#self0#0|))) (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V (let ((|dt_update_tmp#0#2@@4| |$ih#self0#0|)) (let ((|dt_update#underlying#0#2@@2| |newUnderlying'#1@@1|)) (|#MutableMapModel.LinearHashMap.LinearHashMap| |dt_update#underlying#0#2@@2| (MutableMapModel.LinearHashMap.count |dt_update_tmp#0#2@@4|) (MutableMapModel.LinearHashMap.contents |dt_update_tmp#0#2@@4|)))) |newUnderlying'#1@@1|)) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying'#1@@1|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying'#1@@1|)) 2)))))) :qid |MutableMapModelidfy.1054:38| :skolemid |2772| :no-pattern (type |$ih#self0#0|) :no-pattern (type |$ih#newUnderlying0#0|) :no-pattern (U_2_int |$ih#self0#0|) :no-pattern (U_2_bool |$ih#self0#0|) :no-pattern (U_2_int |$ih#newUnderlying0#0|) :no-pattern (U_2_bool |$ih#newUnderlying0#0|) )))) (and (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (and (MutableMapModel.LinearHashMap.LinearHashMap_q |self#0@@200|) (MutableMapModel.FixedSizeLinearHashMap.FixedSizeLinearHashMap_q (MutableMapModel.LinearHashMap.underlying |self#0@@200|))))))))) (and (=> (= (ControlFlow 0 321129) 321136) anon58_Then_correct) (=> (= (ControlFlow 0 321129) 321189) anon58_Else_correct)))))) (let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@40) ($IsHeapAnchor $Heap@@40)) (=> (and (and ($Is |self#0@@200| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V)) ($IsAlloc |self#0@@200| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V) $Heap@@40)) (|$IsA#MutableMapModel.LinearHashMap| |self#0@@200|)) (=> (and (and (and (and ($Is |newUnderlying#0@@7| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V)) ($IsAlloc |newUnderlying#0@@7| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V) $Heap@@40)) (|$IsA#MutableMapModel.FixedSizeLinearHashMap| |newUnderlying#0@@7|)) (and (<= (LitInt 0) |i#0@@115|) (< |i#0@@115| 18446744073709551616))) (and (and (and ($Is |transferredContents#0| (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.LemmaReallocIterateResult$V)) ($IsAlloc |transferredContents#0| (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.LemmaReallocIterateResult$V) $Heap@@40)) (and (<= (LitInt 0) |newSize#0@@1|) (< |newSize#0@@1| 18446744073709551616))) (and (and ($Is |self'#0_0| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V)) ($IsAlloc |self'#0_0| (Tclass.MutableMapModel.LinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V) $Heap@@40)) (and ($Is |item#0@@9| (Tclass.MutableMapModel.Item MutableMapModel._default.LemmaReallocIterateResult$V)) ($IsAlloc |item#0@@9| (Tclass.MutableMapModel.Item MutableMapModel._default.LemmaReallocIterateResult$V) $Heap@@40))))) (=> (and (and (and (and (and ($Is |newUnderlying'#2@@1| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V)) ($IsAlloc |newUnderlying'#2@@1| (Tclass.MutableMapModel.FixedSizeLinearHashMap MutableMapModel._default.LemmaReallocIterateResult$V) $Heap@@40)) (and ($Is |transferredContents'#0| (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.LemmaReallocIterateResult$V)) ($IsAlloc |transferredContents'#0| (TMap Tclass.NativeTypes.uint64 MutableMapModel._default.LemmaReallocIterateResult$V) $Heap@@40))) (and (and (<= (LitInt 0) |j#1_0_0|) (< |j#1_0_0| 18446744073709551616)) (= 87 $FunctionContextHeight))) (and (and (and (|MutableMapModel.__default.Inv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (and (MutableMapModel.__default.Inv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200|) (and (and (and (MutableMapModel.__default.UnderlyingInv MutableMapModel._default.LemmaReallocIterateResult$V |self#0@@200| (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS $LZ) (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (MutableMapModel.LinearHashMap.contents |self#0@@200|))) (= (|Map#Card| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (MutableMapModel.LinearHashMap.count |self#0@@200|))) (<= (MutableMapModel.LinearHashMap.count |self#0@@200|) (LitInt (Div 18446744073709551616 (LitInt 8))))))) (and (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7|) (and (and (and (and (and (and (and (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|))) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) 18446744073709551616)) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) 18446744073709551616)) (< (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)))) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|))) (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|))) (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|) (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)))))) (and (and (<= (LitInt 0) |i#0@@115|) (<= |i#0@@115| (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))))) (and (< (MutableMapModel.LinearHashMap.count |self#0@@200|) (- (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) 1)) (< (MutableMapModel.LinearHashMap.count |self#0@@200|) (Div 18446744073709551616 (LitInt 8))))))) (and (and (and (and (|Set#Subset| (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|))) (= (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage |newUnderlying#0@@7|)) |newSize#0@@1|)) (and (= |newSize#0@@1| (Mul (+ 128 (MutableMapModel.LinearHashMap.count |self#0@@200|)) (LitInt 4))) (= (|Map#Card| (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (MutableMapModel.LinearHashMap.count |self#0@@200|)))) (and (and (|MutableMapModel.__default.UnderlyingContentsMatchesContents#canCall| MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| |transferredContents#0|) (and (MutableMapModel.__default.UnderlyingContentsMatchesContents MutableMapModel._default.LemmaReallocIterateResult$V |newUnderlying#0@@7| |transferredContents#0|) (and (forall ((|key#21| T@U) ) (!  (=> (= (type |key#21|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#21|)) (< (U_2_int |key#21|) 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |transferredContents#0|) ($Box |key#21|))) (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#21|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |transferredContents#0|) ($Box |key#21|))) (|Options.Option#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#21|))) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |transferredContents#0|) ($Box |key#21|)))))))) :qid |MutableMapModelidfy.932:16| :skolemid |2726| :pattern ( (MapType0Select (|Map#Elements| |transferredContents#0|) ($Box |key#21|))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#21|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#21|))) :pattern ( (MapType0Select (|Map#Domain| |transferredContents#0|) ($Box |key#21|))) )) (forall ((|key#22| T@U) ) (!  (=> (= (type |key#22|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#22|)) (< (U_2_int |key#22|) 18446744073709551616)) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |transferredContents#0|) ($Box |key#22|)))) (or (not (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#22|)))) (Options.Option.None_q ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#22|)))))))) :qid |MutableMapModelidfy.933:16| :skolemid |2727| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#22|)))) :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#22|))) :pattern ( (MapType0Select (|Map#Domain| |transferredContents#0|) ($Box |key#22|))) ))))) (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) (|Seq#Take| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |i#0@@115|)) |transferredContents#0|))) (and (and (and (|Map#Equal| (MutableMapModel.__default.MapFromStorage MutableMapModel._default.LemmaReallocIterateResult$V ($LS ($LS $LZ)) (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (MutableMapModel.LinearHashMap.contents |self#0@@200|)) (<= (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|) |i#0@@115|)) (and (|MutableMapModel.__default.FixedSizeInv#canCall| MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (and (MutableMapModel.__default.FixedSizeInv MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (and (and (and (and (and (and (and (<= (LitInt 128) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) (< (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) 18446744073709551616)) (< (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) 18446744073709551616)) (< (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))))) (= (|Map#Card| (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) (MutableMapModel.FixedSizeLinearHashMap.count (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) (MutableMapModel.__default.SeqMatchesContentKeys MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) (MutableMapModel.__default.EntriesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|)))) (MutableMapModel.__default.TombstonesMatchContentValue MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) (MutableMapModel.FixedSizeLinearHashMap.contents (MutableMapModel.LinearHashMap.underlying |self#0@@200|))))))) (and (and (= (|Map#Card| |transferredContents#0|) (MutableMapModel.FixedSizeLinearHashMap.count |newUnderlying#0@@7|)) (|Set#Subset| (|Map#Domain| |transferredContents#0|) (|Map#Domain| (MutableMapModel.LinearHashMap.contents |self#0@@200|)))) (and (forall ((|key#1@@16| T@U) ) (!  (=> (= (type |key#1@@16|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#1@@16|)) (< (U_2_int |key#1@@16|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#1@@16|))) (exists ((|slot#2@@5| T@U) ) (!  (and (= (type |slot#2@@5|) DatatypeTypeType) (and ($Is |slot#2@@5| Tclass.MutableMapModel.Slot) (and (and (< (MutableMapModel.Slot.slot |slot#2@@5|) |i#0@@115|) (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#2@@5|)) (MutableMapModel.__default.FilledWithEntryKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#2@@5| (U_2_int |key#1@@16|))))) :qid |MutableMapModelidfy.1075:69| :skolemid |2740| :pattern ( (MutableMapModel.__default.FilledWithEntryKey MutableMapModel._default.LemmaReallocIterateResult$V (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|)) |slot#2@@5| (U_2_int |key#1@@16|))) :pattern ( (MutableMapModel.__default.ValidSlot (|Seq#Length| (MutableMapModel.FixedSizeLinearHashMap.storage (MutableMapModel.LinearHashMap.underlying |self#0@@200|))) |slot#2@@5|)) :pattern ( (MutableMapModel.Slot.slot |slot#2@@5|)) ))))) :qid |MutableMapModelidfy.1075:21| :skolemid |2741| :pattern ( (MapType0Select (|Map#Domain| (MutableMapModel.FixedSizeLinearHashMap.contents |newUnderlying#0@@7|)) ($Box |key#1@@16|))) )) (= (ControlFlow 0 1175182) 321129)))))) anon0_correct)))))) PreconditionGeneratedEntry_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ))
(check-sat)
