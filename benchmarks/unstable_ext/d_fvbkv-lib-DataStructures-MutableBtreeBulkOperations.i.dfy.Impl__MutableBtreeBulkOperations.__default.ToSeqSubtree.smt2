(set-option :print-success false)
(set-info :smt-lib-version 2.0)
(set-option :AUTO_CONFIG false)
(set-option :pp.bv_literals false)
(set-option :MODEL.V2 true)
(set-option :smt.PHASE_SELECTION 0)
(set-option :smt.RESTART_STRATEGY 0)
(set-option :smt.RESTART_FACTOR |1.5|)
(set-option :smt.ARITH.RANDOM_INITIAL_VALUE true)
(set-option :smt.CASE_SPLIT 3)
(set-option :smt.DELAY_UNITS true)
(set-option :NNF.SK_HACK true)
(set-option :smt.MBQI false)
(set-option :smt.QI.EAGER_THRESHOLD 100)
(set-option :TYPE_CHECK true)
(set-option :smt.BV.REFLECT true)
(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun U_2_int (T@U) Int)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun TyType () T@T)
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TyTagType () T@T)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun ClassNameType () T@T)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun alloc () T@U)
(declare-fun NameFamilyType () T@T)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object? () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array? () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun class._System.__default () T@U)
(declare-fun Tagclass._System.__default () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun DtCtorIdType () T@T)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._System.Tuple2 () T@U)
(declare-fun Tagclass._System.___hFunc3 () T@U)
(declare-fun Tagclass._System.___hPartialFunc3 () T@U)
(declare-fun Tagclass._System.___hTotalFunc3 () T@U)
(declare-fun |##_System._tuple#4._#Make4| () T@U)
(declare-fun Tagclass._System.Tuple4 () T@U)
(declare-fun class._System.Tuple4 () T@U)
(declare-fun Tagclass._System.___hFunc4 () T@U)
(declare-fun Tagclass._System.___hPartialFunc4 () T@U)
(declare-fun Tagclass._System.___hTotalFunc4 () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun class._System.Tuple0 () T@U)
(declare-fun class.MutableBtreeBulkOperations.__default () T@U)
(declare-fun Tagclass.MutableBtreeBulkOperations.__default () T@U)
(declare-fun Tagclass.MutableBtreeBulkOperations.MB.Abs.Node () T@U)
(declare-fun Tagclass.NativeTypes.byte () T@U)
(declare-fun Tagclass.MutableBtreeBulkOperations.MB.Model.Abs.Node () T@U)
(declare-fun Tagclass.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.byte () T@U)
(declare-fun Tagclass.NativeTypes.int16 () T@U)
(declare-fun class.NativeTypes.int16 () T@U)
(declare-fun Tagclass.NativeTypes.uint16 () T@U)
(declare-fun class.NativeTypes.uint16 () T@U)
(declare-fun Tagclass.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.int32 () T@U)
(declare-fun Tagclass.NativeTypes.uint32 () T@U)
(declare-fun class.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.int64 () T@U)
(declare-fun Tagclass.NativeTypes.uint64 () T@U)
(declare-fun class.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.NativeTypes.nat8 () T@U)
(declare-fun class.NativeTypes.nat8 () T@U)
(declare-fun Tagclass.NativeTypes.nat16 () T@U)
(declare-fun class.NativeTypes.nat16 () T@U)
(declare-fun Tagclass.NativeTypes.nat32 () T@U)
(declare-fun class.NativeTypes.nat32 () T@U)
(declare-fun Tagclass.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.__default () T@U)
(declare-fun Tagclass.NativeTypes.__default () T@U)
(declare-fun class.SeqComparison.__default () T@U)
(declare-fun Tagclass.SeqComparison.__default () T@U)
(declare-fun class.NativeArrays.__default () T@U)
(declare-fun Tagclass.NativeArrays.__default () T@U)
(declare-fun |##Options.Option.None| () T@U)
(declare-fun Tagclass.Options.Option () T@U)
(declare-fun |##Options.Option.Some| () T@U)
(declare-fun class.Options.Option () T@U)
(declare-fun class.Options.__default () T@U)
(declare-fun Tagclass.Options.__default () T@U)
(declare-fun class.Sequences.__default () T@U)
(declare-fun Tagclass.Sequences.__default () T@U)
(declare-fun class.Maps.__default () T@U)
(declare-fun Tagclass.Maps.__default () T@U)
(declare-fun class.Mathematics.__default () T@U)
(declare-fun Tagclass.Mathematics.__default () T@U)
(declare-fun class.Arrays.__default () T@U)
(declare-fun Tagclass.Arrays.__default () T@U)
(declare-fun class.Byte__Order.__default () T@U)
(declare-fun Tagclass.Byte__Order.__default () T@U)
(declare-fun class.Lexicographic__Byte__Order.__default () T@U)
(declare-fun Tagclass.Lexicographic__Byte__Order.__default () T@U)
(declare-fun class.Lexicographic__Byte__Order__Impl.__default () T@U)
(declare-fun Tagclass.Lexicographic__Byte__Order__Impl.__default () T@U)
(declare-fun class.Integer__Order.__default () T@U)
(declare-fun Tagclass.Integer__Order.__default () T@U)
(declare-fun class.Uint64__Order.__default () T@U)
(declare-fun Tagclass.Uint64__Order.__default () T@U)
(declare-fun |##MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| () T@U)
(declare-fun |##MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| () T@U)
(declare-fun Tagclass.MutableBtreeBulkOperations.MB.Model.Abs.__default () T@U)
(declare-fun |##MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| () T@U)
(declare-fun Tagclass.MutableBtreeBulkOperations.MB.Abs.NodeContents () T@U)
(declare-fun |##MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| () T@U)
(declare-fun Tagclass.MutableBtreeBulkOperations.MB.Abs.Node? () T@U)
(declare-fun Tagclass.MutableBtreeBulkOperations.MB.Abs.__default () T@U)
(declare-fun field$repr () T@U)
(declare-fun field$contents () T@U)
(declare-fun field$height () T@U)
(declare-fun $$Language$Dafny () Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun $Box (T@U) T@U)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun |char#Plus| (T@U T@U) T@U)
(declare-fun |char#Minus| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Type () T@T)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun refType () T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun DatatypeTypeType () T@T)
(declare-fun BoxRank (T@U) Int)
(declare-fun DtRank (T@U) Int)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#LessThanLimit| (T@U T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun $OneHeap () T@U)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun |Seq#Create| (T@U T@U Int T@U) T@U)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun _System.__default.rank__is__less__than (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.__default () T@U)
(declare-fun |_System.__default.rank__is__less__than#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |_System.__default.rank__is__less__than#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T T@T) T@T)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2TypeInv2 (T@T) T@T)
(declare-fun MapType2TypeInv3 (T@T) T@T)
(declare-fun MapType2Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType2Store (T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T) T@T)
(declare-fun MapType3TypeInv0 (T@T) T@T)
(declare-fun MapType3TypeInv1 (T@T) T@T)
(declare-fun MapType3TypeInv2 (T@T) T@T)
(declare-fun MapType3Select (T@U T@U T@U) T@U)
(declare-fun MapType3Store (T@U T@U T@U T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2| (T@U) Bool)
(declare-fun |_System.Tuple2#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_3 (T@U) T@U)
(declare-fun MapType4Type (T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType4TypeInv0 (T@T) T@T)
(declare-fun MapType4TypeInv1 (T@T) T@T)
(declare-fun MapType4TypeInv2 (T@T) T@T)
(declare-fun MapType4TypeInv3 (T@T) T@T)
(declare-fun MapType4TypeInv4 (T@T) T@T)
(declare-fun MapType4Select (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType4Store (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle3 (T@U T@U T@U) T@U)
(declare-fun Requires3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_3 (T@U) T@U)
(declare-fun |#_System._tuple#4._#Make4| (T@U T@U T@U T@U) T@U)
(declare-fun _System.Tuple4.___hMake4_q (T@U) Bool)
(declare-fun Tclass._System.Tuple4 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.Tuple4_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple4_1 (T@U) T@U)
(declare-fun Tclass._System.Tuple4_2 (T@U) T@U)
(declare-fun Tclass._System.Tuple4_3 (T@U) T@U)
(declare-fun _System.Tuple4._0 (T@U) T@U)
(declare-fun _System.Tuple4._1 (T@U) T@U)
(declare-fun _System.Tuple4._2 (T@U) T@U)
(declare-fun _System.Tuple4._3 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple4| (T@U) Bool)
(declare-fun |_System.Tuple4#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_4 (T@U) T@U)
(declare-fun MapType5Type (T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType5TypeInv0 (T@T) T@T)
(declare-fun MapType5TypeInv1 (T@T) T@T)
(declare-fun MapType5TypeInv2 (T@T) T@T)
(declare-fun MapType5TypeInv3 (T@T) T@T)
(declare-fun MapType5TypeInv4 (T@T) T@T)
(declare-fun MapType5TypeInv5 (T@T) T@T)
(declare-fun MapType5Select (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType5Store (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Apply4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle4 (T@U T@U T@U) T@U)
(declare-fun Requires4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_4 (T@U) T@U)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun Tclass.MutableBtreeBulkOperations.__default () T@U)
(declare-fun MutableBtreeBulkOperations.MB.Abs.Node.repr () T@U)
(declare-fun class.MutableBtreeBulkOperations.MB.Abs.Node? () T@U)
(declare-fun Tclass.MutableBtreeBulkOperations.MB.Abs.Node () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun MutableBtreeBulkOperations.__default.NumElements (T@U T@U) Int)
(declare-fun |MutableBtreeBulkOperations.__default.NumElements#canCall| (T@U T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun MutableBtreeBulkOperations.MB.Abs.__default.WF (T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.__default.NumElements#requires| (T@U T@U) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Abs.__default.I (T@U T@U T@U) T@U)
(declare-fun StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I () T@U)
(declare-fun $LZ () T@U)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| (T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements#canCall| (T@U) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements (T@U T@U) Int)
(declare-fun MutableBtreeBulkOperations.MB.Abs.Node.contents () T@U)
(declare-fun Tclass.NativeTypes.byte () T@U)
(declare-fun MutableBtreeBulkOperations.MB.Abs.Node.height () T@U)
(declare-fun Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node () T@U)
(declare-fun Tclass.NativeTypes.sbyte () T@U)
(declare-fun Tclass.NativeTypes.int16 () T@U)
(declare-fun Tclass.NativeTypes.uint16 () T@U)
(declare-fun Tclass.NativeTypes.int32 () T@U)
(declare-fun Tclass.NativeTypes.uint32 () T@U)
(declare-fun Tclass.NativeTypes.int64 () T@U)
(declare-fun Tclass.NativeTypes.uint64 () T@U)
(declare-fun Tclass.NativeTypes.nat8 () T@U)
(declare-fun Tclass.NativeTypes.nat16 () T@U)
(declare-fun Tclass.NativeTypes.nat32 () T@U)
(declare-fun Tclass.NativeTypes.nat64 () T@U)
(declare-fun Tclass.NativeTypes.__default () T@U)
(declare-fun NativeTypes.__default.Uint64Size () Int)
(declare-fun |NativeTypes.__default.Uint64Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32Size () Int)
(declare-fun |NativeTypes.__default.Uint32Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint16Size () Int)
(declare-fun |NativeTypes.__default.Uint16Size#requires| () Bool)
(declare-fun |NativeTypes.__default.Uint64UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint64UpperBound () Int)
(declare-fun |NativeTypes.__default.Uint32UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32UpperBound () Int)
(declare-fun Tclass.SeqComparison.__default () T@U)
(declare-fun SeqComparison.__default.lte (T@U T@U T@U) Bool)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun |SeqComparison.__default.lte#canCall| (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lte#requires| (T@U T@U T@U) Bool)
(declare-fun SeqComparison.__default.lt (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lt#canCall| (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_SeqComparison._default.lte () T@U)
(declare-fun Tclass.NativeArrays.__default () T@U)
(declare-fun |#Options.Option.None| () T@U)
(declare-fun Options.Option.None_q (T@U) Bool)
(declare-fun Tclass.Options.Option (T@U) T@U)
(declare-fun Tclass.Options.Option_0 (T@U) T@U)
(declare-fun |#Options.Option.Some| (T@U) T@U)
(declare-fun Options.Option.Some_q (T@U) Bool)
(declare-fun Options.Option.value (T@U) T@U)
(declare-fun |$IsA#Options.Option| (T@U) Bool)
(declare-fun |Options.Option#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Options.__default () T@U)
(declare-fun Options.__default.MapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.MapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.MapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Options.__default.FlatMapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.FlatMapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.FlatMapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Tclass.Sequences.__default () T@U)
(declare-fun Sequences.__default.Last (T@U T@U) T@U)
(declare-fun |Sequences.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Last#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.DropLast (T@U T@U) T@U)
(declare-fun |Sequences.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Set (T@U T@U) T@U)
(declare-fun |Sequences.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Set#requires| (T@U T@U) Bool)
(declare-fun |lambda#8| (T@U T@U Int) T@U)
(declare-fun Sequences.__default.ISet (T@U T@U) T@U)
(declare-fun |Sequences.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.NoDupes (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IndexOf (T@U T@U T@U) Int)
(declare-fun |Sequences.__default.IndexOf#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IndexOf#requires| (T@U T@U T@U) Bool)
(declare-fun |$let#0_i| (T@U T@U T@U) Int)
(declare-fun |$let#0$canCall| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Range (T@U Int) T@U)
(declare-fun |Sequences.__default.Range#canCall| (Int) Bool)
(declare-fun |Sequences.__default.Range#requires| (T@U Int) Bool)
(declare-fun Sequences.__default.Apply (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Apply#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Apply#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.ApplyOpaque (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.ApplyOpaque#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.ApplyOpaque#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Filter (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Filter#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Filter#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldLeft (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldLeft#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldLeft#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldFromRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldFromRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldFromRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.remove (T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.remove#canCall| (T@U T@U Int) Bool)
(declare-fun |Sequences.__default.remove#requires| (T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.insert (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.insert#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.insert#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace1with2 (T@U T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace1with2#canCall| (T@U T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace1with2#requires| (T@U T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace2with1 (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace2with1#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace2with1#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.concat (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concat3 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat3#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat3#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concatSeq (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concatSeq#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.concatSeq#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsPrefix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsSuffix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.SeqIndexIterate (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.SeqIndexIterate#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.SeqIndexIterate#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.SeqIndex (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.SeqIndex#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.SeqIndex#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.SeqIndexIterate () T@U)
(declare-fun Sequences.__default.SeqOfLength (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqOfLength#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqOfLength#requires| (T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.SeqIndexUpdate (T@U T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqIndexUpdate#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqIndexUpdate#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.Zip (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Zip#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Zip#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Unzip (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Unzip#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Unzip#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenShape (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FlattenShape#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FlattenShape#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenLength (T@U T@U) Int)
(declare-fun |Sequences.__default.FlattenLength#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.FlattenLength#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Flatten (T@U T@U T@U) T@U)
(declare-fun StartFuel_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuel_Sequences._default.FlattenShape () T@U)
(declare-fun |Sequences.__default.Flatten#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Flatten#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenShape0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenShape () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenShape1 () T@U)
(declare-fun Sequences.__default.FlattenIndex (T@U Int Int) Int)
(declare-fun |Sequences.__default.FlattenIndex#canCall| (T@U Int Int) Bool)
(declare-fun |Sequences.__default.FlattenIndex#requires| (T@U Int Int) Bool)
(declare-fun Sequences.__default.UnflattenIndex (T@U T@U Int) T@U)
(declare-fun |Sequences.__default.UnflattenIndex#canCall| (T@U Int) Bool)
(declare-fun |Sequences.__default.UnflattenIndex#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenLength0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenLength () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenLength1 () T@U)
(declare-fun Sequences.__default.fill (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.fill#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.fill#requires| (T@U T@U Int T@U) Bool)
(declare-fun Tclass.Maps.__default () T@U)
(declare-fun Maps.__default.IMapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubIMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#12| (T@U T@U T@U) T@U)
(declare-fun |lambda#13| (T@U) T@U)
(declare-fun Maps.__default.MapRemoveStrong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemoveStrong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemoveStrong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove0 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove1 () T@U)
(declare-fun Maps.__default.MapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#16| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapRemove1Strong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove1Strong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove1Strong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapRemove1 () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove10 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove1 () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove11 () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove12 () T@U)
(declare-fun Maps.__default.IMapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#30| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapIRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapIRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapIRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapDisjointUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapDisjointUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapDisjointUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#44| (T@U T@U T@U) T@U)
(declare-fun |lambda#45| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapUnionPreferA () T@U)
(declare-fun Maps.__default.IMapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.IMapUnionPreferA () T@U)
(declare-fun Maps.__default.MapDisjointUnion3 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion () T@U)
(declare-fun |Maps.__default.MapDisjointUnion3#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapDisjointUnion3#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#64| (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#65| (T@U T@U T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapToImap (T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapToImap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapToImap#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#68| (T@U T@U) T@U)
(declare-fun Maps.__default.MapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.ImapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.ImapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.ImapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass.Mathematics.__default () T@U)
(declare-fun Mathematics.__default.min (Int Int) Int)
(declare-fun |Mathematics.__default.min#requires| (Int Int) Bool)
(declare-fun Mathematics.__default.max (Int Int) Int)
(declare-fun |Mathematics.__default.max#requires| (Int Int) Bool)
(declare-fun Mathematics.__default.Set (T@U T@U) T@U)
(declare-fun |Mathematics.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.Set#requires| (T@U T@U) Bool)
(declare-fun Mathematics.__default.ISet (T@U T@U) T@U)
(declare-fun |Mathematics.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun Tclass.Arrays.__default () T@U)
(declare-fun Arrays.__default.Aliases (T@U T@U T@U T@U) Bool)
(declare-fun |Arrays.__default.Aliases#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Arrays.__default.Aliases#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass.Byte__Order.__default () T@U)
(declare-fun Byte__Order.__default.SomeElement () Int)
(declare-fun |Byte__Order.__default.SomeElement#requires| () Bool)
(declare-fun Byte__Order.__default.lte (T@U Int Int) Bool)
(declare-fun StartFuel_Byte_Order._default.ltedef () T@U)
(declare-fun |Byte__Order.__default.lte#canCall| (Int Int) Bool)
(declare-fun Byte__Order.__default.ltedef (T@U Int Int) Bool)
(declare-fun |Byte__Order.__default.lte#requires| (T@U Int Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.ltedef0 () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.ltedef () T@U)
(declare-fun MoreFuel_Byte_Order._default.ltedef1 () T@U)
(declare-fun |Byte__Order.__default.ltedef#canCall| (Int Int) Bool)
(declare-fun |Byte__Order.__default.ltedef#requires| (T@U Int Int) Bool)
(declare-fun Byte__Order.__default.LargestLte (T@U T@U Int) Int)
(declare-fun StartFuel_Byte_Order._default.IsSorted () T@U)
(declare-fun StartFuel_Byte_Order._default.lte () T@U)
(declare-fun |Byte__Order.__default.LargestLte#canCall| (T@U Int) Bool)
(declare-fun Byte__Order.__default.IsSorted (T@U T@U) Bool)
(declare-fun Byte__Order.__default.lt (Int Int) Bool)
(declare-fun |Byte__Order.__default.LargestLte#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted0 () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.IsSorted () T@U)
(declare-fun |Byte__Order.__default.lt#canCall| (Int Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted1 () T@U)
(declare-fun Byte__Order.__default.LargestLt (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.LargestLt#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.LargestLt#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted2 () T@U)
(declare-fun MoreFuel_Byte_Order._default.IsSorted3 () T@U)
(declare-fun Byte__Order.__default.IndexOfFirstGte (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.IndexOfFirstGte#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.IndexOfFirstGte#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted4 () T@U)
(declare-fun MoreFuel_Byte_Order._default.IsSorted5 () T@U)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (T@U T@U Int Int Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (T@U Int Int Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| (T@U T@U Int Int Int) Bool)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGte (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| (T@U T@U Int) Bool)
(declare-fun Byte__Order.__default.IndexOfFirstGt (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.IndexOfFirstGt#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.IndexOfFirstGt#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted6 () T@U)
(declare-fun MoreFuel_Byte_Order._default.IsSorted7 () T@U)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (T@U T@U Int Int Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (T@U Int Int Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| (T@U T@U Int Int Int) Bool)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGt (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| (T@U T@U Int) Bool)
(declare-fun Byte__Order.__default.SetAllLte (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLte#canCall| (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLte#requires| (T@U T@U) Bool)
(declare-fun Byte__Order.__default.SetAllLt (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLt#canCall| (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLt#requires| (T@U T@U) Bool)
(declare-fun Byte__Order.__default.NotMinimum (T@U Int) Bool)
(declare-fun |Byte__Order.__default.NotMinimum#canCall| (Int) Bool)
(declare-fun |Byte__Order.__default.NotMinimum#requires| (T@U Int) Bool)
(declare-fun Byte__Order.__default.MapPivotedUnion (T@U T@U Int T@U) T@U)
(declare-fun |Byte__Order.__default.MapPivotedUnion#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Byte__Order.__default.MapPivotedUnion#requires| (T@U T@U Int T@U) Bool)
(declare-fun |lambda#76| (T@U Int) T@U)
(declare-fun |lambda#77| (T@U T@U Int) T@U)
(declare-fun Byte__Order.__default.SetSuccessor (T@U Int) T@U)
(declare-fun |Byte__Order.__default.SetSuccessor#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.SetSuccessor#requires| (T@U Int) Bool)
(declare-fun |$let#4_next| (T@U Int) Int)
(declare-fun |$let#4$canCall| (T@U Int) Bool)
(declare-fun Byte__Order.__default.MapSuccessor (T@U T@U Int) T@U)
(declare-fun |Byte__Order.__default.MapSuccessor#canCall| (T@U T@U Int) Bool)
(declare-fun |Byte__Order.__default.MapSuccessor#requires| (T@U T@U Int) Bool)
(declare-fun Byte__Order.__default.SeqSuccessor (T@U Int) T@U)
(declare-fun |Byte__Order.__default.SeqSuccessor#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.SeqSuccessor#requires| (T@U Int) Bool)
(declare-fun |lambda#88| (T@U T@U) T@U)
(declare-fun Byte__Order.__default.SortedSeqForMap (T@U T@U T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SortedSeqForMap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SortedSeqForMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun |Byte__Order.__default.IsStrictlySorted#canCall| (T@U) Bool)
(declare-fun Byte__Order.__default.IsStrictlySorted (T@U T@U) Bool)
(declare-fun Byte__Order.__default.minimum (T@U T@U) Int)
(declare-fun |Byte__Order.__default.minimum#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.minimum#requires| (T@U T@U) Bool)
(declare-fun |$let#7_a| (T@U) Int)
(declare-fun |$let#7$canCall| (T@U) Bool)
(declare-fun Byte__Order.__default.minimumOpt (T@U T@U) T@U)
(declare-fun |Byte__Order.__default.minimumOpt#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.minimumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Byte_Order._default.minimum () T@U)
(declare-fun Byte__Order.__default.maximum (T@U T@U) Int)
(declare-fun |Byte__Order.__default.maximum#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.maximum#requires| (T@U T@U) Bool)
(declare-fun |$let#10_a| (T@U) Int)
(declare-fun |$let#10$canCall| (T@U) Bool)
(declare-fun Byte__Order.__default.maximumOpt (T@U T@U) T@U)
(declare-fun |Byte__Order.__default.maximumOpt#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.maximumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Byte_Order._default.maximum () T@U)
(declare-fun |Byte__Order.__default.lt#requires| (Int Int) Bool)
(declare-fun Byte__Order.__default.Min (Int Int) Int)
(declare-fun |Byte__Order.__default.Min#canCall| (Int Int) Bool)
(declare-fun |Byte__Order.__default.Min#requires| (Int Int) Bool)
(declare-fun Byte__Order.__default.Max (Int Int) Int)
(declare-fun |Byte__Order.__default.Max#canCall| (Int Int) Bool)
(declare-fun |Byte__Order.__default.Max#requires| (Int Int) Bool)
(declare-fun |Byte__Order.__default.IsSorted#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.IsSorted#requires| (T@U T@U) Bool)
(declare-fun Byte__Order.__default.IsStrictlySortedInternal (T@U) Bool)
(declare-fun |Byte__Order.__default.IsStrictlySortedInternal#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.IsStrictlySortedInternal#requires| (T@U) Bool)
(declare-fun |Byte__Order.__default.IsStrictlySorted#requires| (T@U T@U) Bool)
(declare-fun Tclass.Lexicographic__Byte__Order.__default () T@U)
(declare-fun Lexicographic__Byte__Order.__default.SomeElement () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.SomeElement#requires| () Bool)
(declare-fun Lexicographic__Byte__Order.__default.lte (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.lte#canCall| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.ltedef (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.lte#requires| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.ltedef#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.ltedef#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.LargestLte (T@U T@U T@U) Int)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.IsSorted () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLte#canCall| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IsSorted (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.lt (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLte#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted0 () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.lt#canCall| (T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted1 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.LargestLt (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLt#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted2 () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted3 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.IndexOfFirstGte (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted4 () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted5 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (T@U T@U T@U Int Int) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (T@U T@U Int Int) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| (T@U T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IndexOfFirstGt (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted6 () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted7 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (T@U T@U T@U Int Int) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (T@U T@U Int Int) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| (T@U T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SetAllLte (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLte#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLte#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SetAllLt (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLt#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.NotMinimum (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.NotMinimum#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.NotMinimum#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.MapPivotedUnion (T@U T@U T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#92| (T@U T@U) T@U)
(declare-fun |lambda#93| (T@U T@U) T@U)
(declare-fun Lexicographic__Byte__Order.__default.SetSuccessor (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetSuccessor#requires| (T@U T@U) Bool)
(declare-fun |$let#13_next| (T@U T@U) T@U)
(declare-fun |$let#13$canCall| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.MapSuccessor (T@U T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.MapSuccessor#canCall| (T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.MapSuccessor#requires| (T@U T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SeqSuccessor (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SeqSuccessor#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SortedSeqForMap (T@U T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IsStrictlySorted (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.minimum (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.minimum#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.minimum#requires| (T@U T@U) Bool)
(declare-fun |$let#16_a| (T@U) T@U)
(declare-fun |$let#16$canCall| (T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.minimumOpt (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.minimumOpt#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.minimumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.minimum () T@U)
(declare-fun Lexicographic__Byte__Order.__default.maximum (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.maximum#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.maximum#requires| (T@U T@U) Bool)
(declare-fun |$let#19_a| (T@U) T@U)
(declare-fun |$let#19$canCall| (T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.maximumOpt (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.maximumOpt#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.maximumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.maximum () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.lt#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.Min (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.Min#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.Min#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.Max (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.Max#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.Max#requires| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsSorted#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsSorted#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| (T@U T@U) Bool)
(declare-fun Tclass.Lexicographic__Byte__Order__Impl.__default () T@U)
(declare-fun Tclass.Integer__Order.__default () T@U)
(declare-fun |Integer__Order.__default.SomeElement#requires| () Bool)
(declare-fun Integer__Order.__default.SomeElement () Int)
(declare-fun StartFuel_Integer_Order._default.ltedef () T@U)
(declare-fun Integer__Order.__default.lte (Int Int) Bool)
(declare-fun Integer__Order.__default.ltedef (T@U Int Int) Bool)
(declare-fun |Integer__Order.__default.lte#requires| (Int Int) Bool)
(declare-fun MoreFuel_Integer_Order._default.ltedef0 () T@U)
(declare-fun StartFuelAssert_Integer_Order._default.ltedef () T@U)
(declare-fun |Integer__Order.__default.ltedef#canCall| (Int Int) Bool)
(declare-fun MoreFuel_Integer_Order._default.ltedef1 () T@U)
(declare-fun |Integer__Order.__default.ltedef#requires| (T@U Int Int) Bool)
(declare-fun Integer__Order.__default.LargestLte (T@U T@U Int) Int)
(declare-fun StartFuel_Integer_Order._default.IsSorted () T@U)
(declare-fun |Integer__Order.__default.LargestLte#canCall| (T@U Int) Bool)
(declare-fun Integer__Order.__default.IsSorted (T@U T@U) Bool)
(declare-fun Integer__Order.__default.lt (Int Int) Bool)
(declare-fun |Integer__Order.__default.LargestLte#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Integer_Order._default.IsSorted0 () T@U)
(declare-fun StartFuelAssert_Integer_Order._default.IsSorted () T@U)
(declare-fun |Integer__Order.__default.lt#canCall| (Int Int) Bool)
(declare-fun MoreFuel_Integer_Order._default.IsSorted1 () T@U)
(declare-fun Integer__Order.__default.LargestLt (T@U T@U Int) Int)
(declare-fun |Integer__Order.__default.LargestLt#canCall| (T@U Int) Bool)
(declare-fun |Integer__Order.__default.LargestLt#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Integer_Order._default.IsSorted2 () T@U)
(declare-fun |Integer__Order.__default.lte#canCall| (Int Int) Bool)
(declare-fun MoreFuel_Integer_Order._default.IsSorted3 () T@U)
(declare-fun Integer__Order.__default.IndexOfFirstGte (T@U T@U Int) Int)
(declare-fun |Integer__Order.__default.IndexOfFirstGte#canCall| (T@U Int) Bool)
(declare-fun |Integer__Order.__default.IndexOfFirstGte#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Integer_Order._default.IsSorted4 () T@U)
(declare-fun MoreFuel_Integer_Order._default.IsSorted5 () T@U)
(declare-fun Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter (T@U T@U Int Int Int) Int)
(declare-fun |Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (T@U Int Int Int) Bool)
(declare-fun |Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| (T@U T@U Int Int Int) Bool)
(declare-fun Integer__Order.__default.binarySearchIndexOfFirstKeyGte (T@U T@U Int) Int)
(declare-fun |Integer__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (T@U Int) Bool)
(declare-fun |Integer__Order.__default.binarySearchIndexOfFirstKeyGte#requires| (T@U T@U Int) Bool)
(declare-fun Integer__Order.__default.IndexOfFirstGt (T@U T@U Int) Int)
(declare-fun |Integer__Order.__default.IndexOfFirstGt#canCall| (T@U Int) Bool)
(declare-fun |Integer__Order.__default.IndexOfFirstGt#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Integer_Order._default.IsSorted6 () T@U)
(declare-fun MoreFuel_Integer_Order._default.IsSorted7 () T@U)
(declare-fun Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter (T@U T@U Int Int Int) Int)
(declare-fun |Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (T@U Int Int Int) Bool)
(declare-fun |Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| (T@U T@U Int Int Int) Bool)
(declare-fun Integer__Order.__default.binarySearchIndexOfFirstKeyGt (T@U T@U Int) Int)
(declare-fun |Integer__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (T@U Int) Bool)
(declare-fun |Integer__Order.__default.binarySearchIndexOfFirstKeyGt#requires| (T@U T@U Int) Bool)
(declare-fun Integer__Order.__default.SetAllLte (T@U T@U) Bool)
(declare-fun |Integer__Order.__default.SetAllLte#canCall| (T@U T@U) Bool)
(declare-fun |Integer__Order.__default.SetAllLte#requires| (T@U T@U) Bool)
(declare-fun Integer__Order.__default.SetAllLt (T@U T@U) Bool)
(declare-fun |Integer__Order.__default.SetAllLt#canCall| (T@U T@U) Bool)
(declare-fun |Integer__Order.__default.SetAllLt#requires| (T@U T@U) Bool)
(declare-fun Integer__Order.__default.NotMinimum (T@U Int) Bool)
(declare-fun |Integer__Order.__default.NotMinimum#requires| (T@U Int) Bool)
(declare-fun Integer__Order.__default.MapPivotedUnion (T@U T@U Int T@U) T@U)
(declare-fun |Integer__Order.__default.MapPivotedUnion#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Integer__Order.__default.MapPivotedUnion#requires| (T@U T@U Int T@U) Bool)
(declare-fun |lambda#108| (T@U Int) T@U)
(declare-fun |lambda#109| (T@U Int) T@U)
(declare-fun Integer__Order.__default.SetSuccessor (T@U Int) T@U)
(declare-fun |Integer__Order.__default.SetSuccessor#canCall| (T@U Int) Bool)
(declare-fun |Integer__Order.__default.SetSuccessor#requires| (T@U Int) Bool)
(declare-fun |$let#22_next| (T@U Int) Int)
(declare-fun |$let#22$canCall| (T@U Int) Bool)
(declare-fun Integer__Order.__default.MapSuccessor (T@U T@U Int) T@U)
(declare-fun |Integer__Order.__default.MapSuccessor#canCall| (T@U T@U Int) Bool)
(declare-fun |Integer__Order.__default.MapSuccessor#requires| (T@U T@U Int) Bool)
(declare-fun Integer__Order.__default.SeqSuccessor (T@U Int) T@U)
(declare-fun |Integer__Order.__default.SeqSuccessor#canCall| (T@U Int) Bool)
(declare-fun |Integer__Order.__default.SeqSuccessor#requires| (T@U Int) Bool)
(declare-fun Integer__Order.__default.SortedSeqForMap (T@U T@U T@U T@U) Bool)
(declare-fun |Integer__Order.__default.SortedSeqForMap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Integer__Order.__default.SortedSeqForMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Integer_Order._default.IsStrictlySorted () T@U)
(declare-fun |Integer__Order.__default.IsStrictlySorted#canCall| (T@U) Bool)
(declare-fun Integer__Order.__default.IsStrictlySorted (T@U T@U) Bool)
(declare-fun Integer__Order.__default.minimum (T@U T@U) Int)
(declare-fun |Integer__Order.__default.minimum#canCall| (T@U) Bool)
(declare-fun |Integer__Order.__default.minimum#requires| (T@U T@U) Bool)
(declare-fun |$let#25_a| (T@U) Int)
(declare-fun |$let#25$canCall| (T@U) Bool)
(declare-fun Integer__Order.__default.minimumOpt (T@U T@U) T@U)
(declare-fun |Integer__Order.__default.minimumOpt#canCall| (T@U) Bool)
(declare-fun |Integer__Order.__default.minimumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Integer_Order._default.minimum () T@U)
(declare-fun Integer__Order.__default.maximum (T@U T@U) Int)
(declare-fun |Integer__Order.__default.maximum#canCall| (T@U) Bool)
(declare-fun |Integer__Order.__default.maximum#requires| (T@U T@U) Bool)
(declare-fun |$let#28_a| (T@U) Int)
(declare-fun |$let#28$canCall| (T@U) Bool)
(declare-fun Integer__Order.__default.maximumOpt (T@U T@U) T@U)
(declare-fun |Integer__Order.__default.maximumOpt#canCall| (T@U) Bool)
(declare-fun |Integer__Order.__default.maximumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Integer_Order._default.maximum () T@U)
(declare-fun |Integer__Order.__default.lt#requires| (Int Int) Bool)
(declare-fun Integer__Order.__default.Min (Int Int) Int)
(declare-fun |Integer__Order.__default.Min#requires| (Int Int) Bool)
(declare-fun Integer__Order.__default.Max (Int Int) Int)
(declare-fun |Integer__Order.__default.Max#requires| (Int Int) Bool)
(declare-fun |Integer__Order.__default.IsSorted#canCall| (T@U) Bool)
(declare-fun |Integer__Order.__default.IsSorted#requires| (T@U T@U) Bool)
(declare-fun Integer__Order.__default.IsStrictlySortedInternal (T@U) Bool)
(declare-fun |Integer__Order.__default.IsStrictlySortedInternal#canCall| (T@U) Bool)
(declare-fun |Integer__Order.__default.IsStrictlySortedInternal#requires| (T@U) Bool)
(declare-fun |Integer__Order.__default.IsStrictlySorted#requires| (T@U T@U) Bool)
(declare-fun Tclass.Uint64__Order.__default () T@U)
(declare-fun Uint64__Order.__default.SomeElement () Int)
(declare-fun |Uint64__Order.__default.SomeElement#requires| () Bool)
(declare-fun StartFuel_Uint64_Order._default.ltedef () T@U)
(declare-fun Uint64__Order.__default.lte (Int Int) Bool)
(declare-fun |Uint64__Order.__default.lte#canCall| (Int Int) Bool)
(declare-fun Uint64__Order.__default.ltedef (T@U Int Int) Bool)
(declare-fun |Uint64__Order.__default.lte#requires| (Int Int) Bool)
(declare-fun MoreFuel_Uint64_Order._default.ltedef0 () T@U)
(declare-fun StartFuelAssert_Uint64_Order._default.ltedef () T@U)
(declare-fun |Uint64__Order.__default.ltedef#canCall| (Int Int) Bool)
(declare-fun MoreFuel_Uint64_Order._default.ltedef1 () T@U)
(declare-fun |Uint64__Order.__default.ltedef#requires| (T@U Int Int) Bool)
(declare-fun Uint64__Order.__default.LargestLte (T@U T@U Int) Int)
(declare-fun StartFuel_Uint64_Order._default.IsSorted () T@U)
(declare-fun |Uint64__Order.__default.LargestLte#canCall| (T@U Int) Bool)
(declare-fun Uint64__Order.__default.IsSorted (T@U T@U) Bool)
(declare-fun Uint64__Order.__default.lt (Int Int) Bool)
(declare-fun |Uint64__Order.__default.LargestLte#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Uint64_Order._default.IsSorted0 () T@U)
(declare-fun StartFuelAssert_Uint64_Order._default.IsSorted () T@U)
(declare-fun |Uint64__Order.__default.lt#canCall| (Int Int) Bool)
(declare-fun MoreFuel_Uint64_Order._default.IsSorted1 () T@U)
(declare-fun Uint64__Order.__default.LargestLt (T@U T@U Int) Int)
(declare-fun |Uint64__Order.__default.LargestLt#canCall| (T@U Int) Bool)
(declare-fun |Uint64__Order.__default.LargestLt#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Uint64_Order._default.IsSorted2 () T@U)
(declare-fun MoreFuel_Uint64_Order._default.IsSorted3 () T@U)
(declare-fun Uint64__Order.__default.IndexOfFirstGte (T@U T@U Int) Int)
(declare-fun |Uint64__Order.__default.IndexOfFirstGte#canCall| (T@U Int) Bool)
(declare-fun |Uint64__Order.__default.IndexOfFirstGte#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Uint64_Order._default.IsSorted4 () T@U)
(declare-fun MoreFuel_Uint64_Order._default.IsSorted5 () T@U)
(declare-fun Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter (T@U T@U Int Int Int) Int)
(declare-fun |Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (T@U Int Int Int) Bool)
(declare-fun |Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| (T@U T@U Int Int Int) Bool)
(declare-fun Uint64__Order.__default.binarySearchIndexOfFirstKeyGte (T@U T@U Int) Int)
(declare-fun |Uint64__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (T@U Int) Bool)
(declare-fun |Uint64__Order.__default.binarySearchIndexOfFirstKeyGte#requires| (T@U T@U Int) Bool)
(declare-fun Uint64__Order.__default.IndexOfFirstGt (T@U T@U Int) Int)
(declare-fun |Uint64__Order.__default.IndexOfFirstGt#canCall| (T@U Int) Bool)
(declare-fun |Uint64__Order.__default.IndexOfFirstGt#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Uint64_Order._default.IsSorted6 () T@U)
(declare-fun MoreFuel_Uint64_Order._default.IsSorted7 () T@U)
(declare-fun Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter (T@U T@U Int Int Int) Int)
(declare-fun |Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (T@U Int Int Int) Bool)
(declare-fun |Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| (T@U T@U Int Int Int) Bool)
(declare-fun Uint64__Order.__default.binarySearchIndexOfFirstKeyGt (T@U T@U Int) Int)
(declare-fun |Uint64__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (T@U Int) Bool)
(declare-fun |Uint64__Order.__default.binarySearchIndexOfFirstKeyGt#requires| (T@U T@U Int) Bool)
(declare-fun Uint64__Order.__default.SetAllLte (T@U T@U) Bool)
(declare-fun |Uint64__Order.__default.SetAllLte#canCall| (T@U T@U) Bool)
(declare-fun |Uint64__Order.__default.SetAllLte#requires| (T@U T@U) Bool)
(declare-fun Uint64__Order.__default.SetAllLt (T@U T@U) Bool)
(declare-fun |Uint64__Order.__default.SetAllLt#canCall| (T@U T@U) Bool)
(declare-fun |Uint64__Order.__default.SetAllLt#requires| (T@U T@U) Bool)
(declare-fun Uint64__Order.__default.NotMinimum (T@U Int) Bool)
(declare-fun |Uint64__Order.__default.NotMinimum#canCall| (Int) Bool)
(declare-fun |Uint64__Order.__default.NotMinimum#requires| (T@U Int) Bool)
(declare-fun Uint64__Order.__default.MapPivotedUnion (T@U T@U Int T@U) T@U)
(declare-fun |Uint64__Order.__default.MapPivotedUnion#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Uint64__Order.__default.MapPivotedUnion#requires| (T@U T@U Int T@U) Bool)
(declare-fun |lambda#124| (T@U Int) T@U)
(declare-fun |lambda#125| (T@U Int) T@U)
(declare-fun Uint64__Order.__default.SetSuccessor (T@U Int) T@U)
(declare-fun |Uint64__Order.__default.SetSuccessor#canCall| (T@U Int) Bool)
(declare-fun |Uint64__Order.__default.SetSuccessor#requires| (T@U Int) Bool)
(declare-fun |$let#31_next| (T@U Int) Int)
(declare-fun |$let#31$canCall| (T@U Int) Bool)
(declare-fun Uint64__Order.__default.MapSuccessor (T@U T@U Int) T@U)
(declare-fun |Uint64__Order.__default.MapSuccessor#canCall| (T@U T@U Int) Bool)
(declare-fun |Uint64__Order.__default.MapSuccessor#requires| (T@U T@U Int) Bool)
(declare-fun Uint64__Order.__default.SeqSuccessor (T@U Int) T@U)
(declare-fun |Uint64__Order.__default.SeqSuccessor#canCall| (T@U Int) Bool)
(declare-fun |Uint64__Order.__default.SeqSuccessor#requires| (T@U Int) Bool)
(declare-fun Uint64__Order.__default.SortedSeqForMap (T@U T@U T@U T@U) Bool)
(declare-fun |Uint64__Order.__default.SortedSeqForMap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Uint64__Order.__default.SortedSeqForMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Uint64_Order._default.IsStrictlySorted () T@U)
(declare-fun |Uint64__Order.__default.IsStrictlySorted#canCall| (T@U) Bool)
(declare-fun Uint64__Order.__default.IsStrictlySorted (T@U T@U) Bool)
(declare-fun Uint64__Order.__default.minimum (T@U T@U) Int)
(declare-fun |Uint64__Order.__default.minimum#canCall| (T@U) Bool)
(declare-fun |Uint64__Order.__default.minimum#requires| (T@U T@U) Bool)
(declare-fun |$let#34_a| (T@U) Int)
(declare-fun |$let#34$canCall| (T@U) Bool)
(declare-fun Uint64__Order.__default.minimumOpt (T@U T@U) T@U)
(declare-fun |Uint64__Order.__default.minimumOpt#canCall| (T@U) Bool)
(declare-fun |Uint64__Order.__default.minimumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Uint64_Order._default.minimum () T@U)
(declare-fun Uint64__Order.__default.maximum (T@U T@U) Int)
(declare-fun |Uint64__Order.__default.maximum#canCall| (T@U) Bool)
(declare-fun |Uint64__Order.__default.maximum#requires| (T@U T@U) Bool)
(declare-fun |$let#37_a| (T@U) Int)
(declare-fun |$let#37$canCall| (T@U) Bool)
(declare-fun Uint64__Order.__default.maximumOpt (T@U T@U) T@U)
(declare-fun |Uint64__Order.__default.maximumOpt#canCall| (T@U) Bool)
(declare-fun |Uint64__Order.__default.maximumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Uint64_Order._default.maximum () T@U)
(declare-fun |Uint64__Order.__default.lt#requires| (Int Int) Bool)
(declare-fun Uint64__Order.__default.Min (Int Int) Int)
(declare-fun |Uint64__Order.__default.Min#canCall| (Int Int) Bool)
(declare-fun |Uint64__Order.__default.Min#requires| (Int Int) Bool)
(declare-fun Uint64__Order.__default.Max (Int Int) Int)
(declare-fun |Uint64__Order.__default.Max#canCall| (Int Int) Bool)
(declare-fun |Uint64__Order.__default.Max#requires| (Int Int) Bool)
(declare-fun |Uint64__Order.__default.IsSorted#canCall| (T@U) Bool)
(declare-fun |Uint64__Order.__default.IsSorted#requires| (T@U T@U) Bool)
(declare-fun Uint64__Order.__default.IsStrictlySortedInternal (T@U) Bool)
(declare-fun |Uint64__Order.__default.IsStrictlySortedInternal#canCall| (T@U) Bool)
(declare-fun |Uint64__Order.__default.IsStrictlySortedInternal#requires| (T@U) Bool)
(declare-fun |Uint64__Order.__default.IsStrictlySorted#requires| (T@U T@U) Bool)
(declare-fun |#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| (T@U T@U) T@U)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (T@U) Bool)
(declare-fun |#$Value| () T@U)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (T@U) T@U)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.Node.values (T@U) T@U)
(declare-fun |#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| (T@U T@U) T@U)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (T@U) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (T@U) T@U)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.Node.children (T@U) T@U)
(declare-fun |$IsA#MutableBtreeBulkOperations.MB.Model.Abs.Node| (T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| (T@U T@U) Bool)
(declare-fun Tclass.MutableBtreeBulkOperations.MB.Model.Abs.__default () T@U)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys (T@U T@U) T@U)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#canCall| (T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#requires| (T@U T@U) Bool)
(declare-fun |lambda#142| (T@U Int Int T@U T@U T@U T@U) T@U)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound (T@U Int) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound#canCall| (T@U Int) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound#requires| (T@U Int) Bool)
(declare-fun StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys () T@U)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound (T@U Int) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound#canCall| (T@U Int) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound#requires| (T@U Int) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.__default.WF (T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| (T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#requires| (T@U T@U) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation (T@U T@U) T@U)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation#canCall| (T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation#requires| (T@U T@U) Bool)
(declare-fun |lambda#146| (T@U T@U) T@U)
(declare-fun |lambda#147| (T@U T@U T@U) T@U)
(declare-fun |lambda#148| (T@U T@U T@U T@U T@U T@U Int) T@U)
(declare-fun |lambda#149| (T@U T@U T@U T@U Int) T@U)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey (T@U T@U) T@U)
(declare-fun StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.Interpretation () T@U)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey#canCall| (T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey#requires| (T@U T@U) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey (T@U T@U) T@U)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey#canCall| (T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey#requires| (T@U T@U) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf (T@U T@U T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf#requires| (T@U T@U T@U T@U) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex (T@U Int Int) T@U)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex#canCall| (T@U Int Int) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex#requires| (T@U Int Int) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitIndex (T@U T@U T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitIndex#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitIndex#requires| (T@U T@U T@U T@U) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode (T@U T@U T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode#requires| (T@U T@U T@U T@U) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitChildOfIndex (T@U T@U Int) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitChildOfIndex#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitChildOfIndex#requires| (T@U T@U Int) Bool)
(declare-fun StartFuel_Sequences._default.insert () T@U)
(declare-fun StartFuel_Sequences._default.replace1with2 () T@U)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.__default.InsertLeaf (T@U T@U T@U) T@U)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.InsertLeaf#canCall| (T@U T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.InsertLeaf#requires| (T@U T@U T@U) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.__default.Grow (T@U) T@U)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.Grow#canCall| (T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.Grow#requires| (T@U) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.__default.ReplacePivot (T@U Int T@U) T@U)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.ReplacePivot#canCall| (T@U Int T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.ReplacePivot#requires| (T@U Int T@U) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.__default.AppendChild (T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.AppendChild#canCall| (T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.AppendChild#requires| (T@U T@U) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren (T@U T@U) Int)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren#canCall| (T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren#requires| (T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements#requires| (T@U T@U) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren (T@U T@U) T@U)
(declare-fun MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq (T@U T@U) T@U)
(declare-fun StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq () T@U)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#canCall| (T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#requires| (T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq#canCall| (T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.Flatten () T@U)
(declare-fun |#MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| (Int T@U T@U) T@U)
(declare-fun MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (T@U) Bool)
(declare-fun Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents () T@U)
(declare-fun MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (T@U) Int)
(declare-fun MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (T@U) T@U)
(declare-fun MutableBtreeBulkOperations.MB.Abs.NodeContents.values (T@U) T@U)
(declare-fun |#MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| (Int T@U T@U) T@U)
(declare-fun MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (T@U) Bool)
(declare-fun Tclass.MutableBtreeBulkOperations.MB.Abs.Node? () T@U)
(declare-fun MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (T@U) Int)
(declare-fun MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (T@U) T@U)
(declare-fun MutableBtreeBulkOperations.MB.Abs.NodeContents.children (T@U) T@U)
(declare-fun |$IsA#MutableBtreeBulkOperations.MB.Abs.NodeContents| (T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.NodeContents#Equal| (T@U T@U) Bool)
(declare-fun Tclass.MutableBtreeBulkOperations.MB.Abs.__default () T@U)
(declare-fun MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf () Int)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf#requires| () Bool)
(declare-fun MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren () Int)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren#requires| () Bool)
(declare-fun MutableBtreeBulkOperations.MB.Abs.__default.DefaultValue () T@U)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.DefaultValue#requires| () Bool)
(declare-fun MutableBtreeBulkOperations.MB.Abs.__default.DefaultKey () T@U)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.DefaultKey#requires| () Bool)
(declare-fun MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight (T@U T@U T@U) Int)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight#canCall| (T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight#requires| (T@U T@U T@U) Bool)
(declare-fun |Mathematics.__default.max#canCall| (Int Int) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs (T@U T@U Int Int) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs#canCall| (T@U T@U Int Int) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs#requires| (T@U T@U Int Int) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr (T@U T@U T@U) T@U)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr#canCall| (T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#154| (T@U Int Int T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings (T@U T@U T@U) Bool)
(declare-fun StartFuel_MutableBtreeBulkOperations.MB.Abs._default.SeqRepr () T@U)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings#canCall| (T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings#requires| (T@U T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| (T@U T@U) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Abs.__default.WFShape (T@U T@U T@U) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren (T@U T@U T@U T@U Int) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.WFShape#requires| (T@U T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf#canCall| () Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren#canCall| () Bool)
(declare-fun MutableBtreeBulkOperations.MB.Abs.__default.IChildren (T@U T@U T@U Int) T@U)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.IChildren#canCall| (T@U T@U Int) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.IChildren#requires| (T@U T@U T@U Int) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.I#requires| (T@U T@U T@U) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Abs.__default.ISiblings (T@U T@U) T@U)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.ISiblings#canCall| (T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.ISiblings#requires| (T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| (T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.WF#requires| (T@U T@U) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Abs.__default.Interpretation (T@U T@U) T@U)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.Interpretation#canCall| (T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.Interpretation#requires| (T@U T@U) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Abs.__default.ToSeq (T@U T@U) T@U)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.ToSeq#canCall| (T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.ToSeq#requires| (T@U T@U) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Abs.__default.Full (T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.Full#canCall| (T@U T@U) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.Full#requires| (T@U T@U) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Abs.__default.ObjectIsInSubtree (T@U T@U T@U Int) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.ObjectIsInSubtree#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.ObjectIsInSubtree#requires| (T@U T@U T@U Int) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Abs.__default.SubRepr (T@U T@U Int Int) T@U)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.SubRepr#canCall| (T@U T@U Int Int) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.SubRepr#requires| (T@U T@U Int Int) Bool)
(declare-fun MutableBtreeBulkOperations.MB.Abs.__default.DisjointSubtrees (T@U T@U Int Int) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.DisjointSubtrees#canCall| (T@U T@U Int Int) Bool)
(declare-fun |MutableBtreeBulkOperations.MB.Abs.__default.DisjointSubtrees#requires| (T@U T@U Int Int) Bool)
(declare-fun MapType6Type (T@T T@T) T@T)
(declare-fun MapType6TypeInv0 (T@T) T@T)
(declare-fun MapType6TypeInv1 (T@T) T@T)
(declare-fun MapType6Select (T@U T@U T@U) T@U)
(declare-fun MapType6Store (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#1| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#2| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#3| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#4| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#5| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#6| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#7| (T@U T@U T@U Bool) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0) :qid |typeInv:U_2_int| :pattern ( (int_2_U arg0)) ))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :qid |cast:U_2_int| :pattern ( (U_2_int x)) ))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType) :qid |funType:int_2_U| :pattern ( (int_2_U arg0@@0)) ))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :qid |typeInv:U_2_real| :pattern ( (real_2_U arg0@@1)) ))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :qid |cast:U_2_real| :pattern ( (U_2_real x@@0)) ))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType) :qid |funType:real_2_U| :pattern ( (real_2_U arg0@@2)) ))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :qid |typeInv:U_2_bool| :pattern ( (bool_2_U arg0@@3)) ))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :qid |cast:U_2_bool| :pattern ( (U_2_bool x@@1)) ))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType) :qid |funType:bool_2_U| :pattern ( (bool_2_U arg0@@4)) ))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :qid |typeInv:U_2_rmode| :pattern ( (rmode_2_U arg0@@5)) ))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2)) :qid |cast:U_2_rmode| :pattern ( (U_2_rmode x@@2)) ))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType) :qid |funType:rmode_2_U| :pattern ( (rmode_2_U arg0@@6)) ))))
(assert (forall ((x@@3 T@U) ) (! (UOrdering2 x@@3 x@@3) :qid |bg:subtype-refl| :no-pattern (U_2_int x@@3) :no-pattern (U_2_bool x@@3) )))
(assert (forall ((x@@4 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@4))) (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@4 y) (UOrdering2 y z))) (UOrdering2 x@@4 z))) :qid |bg:subtype-trans| :pattern ( (UOrdering2 x@@4 y) (UOrdering2 y z)) )))
(assert (forall ((x@@5 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@5))) (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@5 y@@0) (UOrdering2 y@@0 x@@5)) (= x@@5 y@@0)))) :qid |bg:subtype-antisymm| :pattern ( (UOrdering2 x@@5 y@@0) (UOrdering2 y@@0 x@@5)) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor TyType) 4) (= (type TBool) TyType)) (= (type TChar) TyType)) (= (type TInt) TyType)) (= (type TReal) TyType)) (= (type TORDINAL) TyType)) (= (Ctor TyTagType) 5)) (= (type TagBool) TyTagType)) (= (type TagChar) TyTagType)) (= (type TagInt) TyTagType)) (= (type TagReal) TyTagType)) (= (type TagORDINAL) TyTagType)) (= (type TagSet) TyTagType)) (= (type TagISet) TyTagType)) (= (type TagMultiSet) TyTagType)) (= (type TagSeq) TyTagType)) (= (type TagMap) TyTagType)) (= (type TagIMap) TyTagType)) (= (type TagClass) TyTagType)) (= (Ctor ClassNameType) 6)) (= (type class._System.int) ClassNameType)) (= (type class._System.bool) ClassNameType)) (= (type class._System.set) ClassNameType)) (= (type class._System.seq) ClassNameType)) (= (type class._System.multiset) ClassNameType)) (forall ((arg0@@7 T@T) ) (! (= (Ctor (FieldType arg0@@7)) 7) :qid |ctor:FieldType| ))) (forall ((arg0@@8 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@8)) arg0@@8) :qid |typeInv:FieldTypeInv0| :pattern ( (FieldType arg0@@8)) ))) (= (type alloc) (FieldType boolType))) (= (Ctor NameFamilyType) 8)) (= (type allocName) NameFamilyType)) (= (type Tagclass._System.nat) TyTagType)) (= (type class._System.object?) ClassNameType)) (= (type Tagclass._System.object?) TyTagType)) (= (type Tagclass._System.object) TyTagType)) (= (type class._System.array?) ClassNameType)) (= (type Tagclass._System.array?) TyTagType)) (= (type Tagclass._System.array) TyTagType)) (= (type Tagclass._System.___hFunc0) TyTagType)) (= (type Tagclass._System.___hPartialFunc0) TyTagType)) (= (type Tagclass._System.___hTotalFunc0) TyTagType)) (= (type class._System.__default) ClassNameType)) (= (type Tagclass._System.__default) TyTagType)) (= (type Tagclass._System.___hFunc2) TyTagType)) (= (type Tagclass._System.___hPartialFunc2) TyTagType)) (= (type Tagclass._System.___hTotalFunc2) TyTagType)) (= (type Tagclass._System.___hFunc1) TyTagType)) (= (type Tagclass._System.___hPartialFunc1) TyTagType)) (= (type Tagclass._System.___hTotalFunc1) TyTagType)) (= (Ctor DtCtorIdType) 9)) (= (type |##_System._tuple#2._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2) TyTagType)) (= (type class._System.Tuple2) ClassNameType)) (= (type Tagclass._System.___hFunc3) TyTagType)) (= (type Tagclass._System.___hPartialFunc3) TyTagType)) (= (type Tagclass._System.___hTotalFunc3) TyTagType)) (= (type |##_System._tuple#4._#Make4|) DtCtorIdType)) (= (type Tagclass._System.Tuple4) TyTagType)) (= (type class._System.Tuple4) ClassNameType)) (= (type Tagclass._System.___hFunc4) TyTagType)) (= (type Tagclass._System.___hPartialFunc4) TyTagType)) (= (type Tagclass._System.___hTotalFunc4) TyTagType)) (= (type |##_System._tuple#0._#Make0|) DtCtorIdType)) (= (type Tagclass._System.Tuple0) TyTagType)) (= (type class._System.Tuple0) ClassNameType)) (= (type class.MutableBtreeBulkOperations.__default) ClassNameType)) (= (type Tagclass.MutableBtreeBulkOperations.__default) TyTagType)) (= (type Tagclass.MutableBtreeBulkOperations.MB.Abs.Node) TyTagType)) (= (type Tagclass.NativeTypes.byte) TyTagType)) (= (type Tagclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) TyTagType)) (= (type Tagclass.NativeTypes.sbyte) TyTagType)) (= (type class.NativeTypes.sbyte) ClassNameType)) (= (type class.NativeTypes.byte) ClassNameType)) (= (type Tagclass.NativeTypes.int16) TyTagType)) (= (type class.NativeTypes.int16) ClassNameType)) (= (type Tagclass.NativeTypes.uint16) TyTagType)) (= (type class.NativeTypes.uint16) ClassNameType)) (= (type Tagclass.NativeTypes.int32) TyTagType)) (= (type class.NativeTypes.int32) ClassNameType)) (= (type Tagclass.NativeTypes.uint32) TyTagType)) (= (type class.NativeTypes.uint32) ClassNameType)) (= (type Tagclass.NativeTypes.int64) TyTagType)) (= (type class.NativeTypes.int64) ClassNameType)) (= (type Tagclass.NativeTypes.uint64) TyTagType)) (= (type class.NativeTypes.uint64) ClassNameType)) (= (type Tagclass.NativeTypes.nat8) TyTagType)) (= (type class.NativeTypes.nat8) ClassNameType)) (= (type Tagclass.NativeTypes.nat16) TyTagType)) (= (type class.NativeTypes.nat16) ClassNameType)) (= (type Tagclass.NativeTypes.nat32) TyTagType)) (= (type class.NativeTypes.nat32) ClassNameType)) (= (type Tagclass.NativeTypes.nat64) TyTagType)) (= (type class.NativeTypes.nat64) ClassNameType)) (= (type class.NativeTypes.__default) ClassNameType)) (= (type Tagclass.NativeTypes.__default) TyTagType)) (= (type class.SeqComparison.__default) ClassNameType)) (= (type Tagclass.SeqComparison.__default) TyTagType)) (= (type class.NativeArrays.__default) ClassNameType)) (= (type Tagclass.NativeArrays.__default) TyTagType)) (= (type |##Options.Option.None|) DtCtorIdType)) (= (type Tagclass.Options.Option) TyTagType)) (= (type |##Options.Option.Some|) DtCtorIdType)) (= (type class.Options.Option) ClassNameType)) (= (type class.Options.__default) ClassNameType)) (= (type Tagclass.Options.__default) TyTagType)) (= (type class.Sequences.__default) ClassNameType)) (= (type Tagclass.Sequences.__default) TyTagType)) (= (type class.Maps.__default) ClassNameType)) (= (type Tagclass.Maps.__default) TyTagType)) (= (type class.Mathematics.__default) ClassNameType)) (= (type Tagclass.Mathematics.__default) TyTagType)) (= (type class.Arrays.__default) ClassNameType)) (= (type Tagclass.Arrays.__default) TyTagType)) (= (type class.Byte__Order.__default) ClassNameType)) (= (type Tagclass.Byte__Order.__default) TyTagType)) (= (type class.Lexicographic__Byte__Order.__default) ClassNameType)) (= (type Tagclass.Lexicographic__Byte__Order.__default) TyTagType)) (= (type class.Lexicographic__Byte__Order__Impl.__default) ClassNameType)) (= (type Tagclass.Lexicographic__Byte__Order__Impl.__default) TyTagType)) (= (type class.Integer__Order.__default) ClassNameType)) (= (type Tagclass.Integer__Order.__default) TyTagType)) (= (type class.Uint64__Order.__default) ClassNameType)) (= (type Tagclass.Uint64__Order.__default) TyTagType)) (= (type |##MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf|) DtCtorIdType)) (= (type |##MutableBtreeBulkOperations.MB.Model.Abs.Node.Index|) DtCtorIdType)) (= (type Tagclass.MutableBtreeBulkOperations.MB.Model.Abs.__default) TyTagType)) (= (type |##MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf|) DtCtorIdType)) (= (type Tagclass.MutableBtreeBulkOperations.MB.Abs.NodeContents) TyTagType)) (= (type |##MutableBtreeBulkOperations.MB.Abs.NodeContents.Index|) DtCtorIdType)) (= (type Tagclass.MutableBtreeBulkOperations.MB.Abs.Node?) TyTagType)) (= (type Tagclass.MutableBtreeBulkOperations.MB.Abs.__default) TyTagType)) (= (type field$repr) NameFamilyType)) (= (type field$contents) NameFamilyType)) (= (type field$height) NameFamilyType)))
(assert (distinct TBool TChar TInt TReal TORDINAL TagBool TagChar TagInt TagReal TagORDINAL TagSet TagISet TagMultiSet TagSeq TagMap TagIMap TagClass class._System.int class._System.bool class._System.set class._System.seq class._System.multiset alloc allocName Tagclass._System.nat class._System.object? Tagclass._System.object? Tagclass._System.object class._System.array? Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc0 Tagclass._System.___hPartialFunc0 Tagclass._System.___hTotalFunc0 class._System.__default Tagclass._System.__default Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 class._System.Tuple2 Tagclass._System.___hFunc3 Tagclass._System.___hPartialFunc3 Tagclass._System.___hTotalFunc3 |##_System._tuple#4._#Make4| Tagclass._System.Tuple4 class._System.Tuple4 Tagclass._System.___hFunc4 Tagclass._System.___hPartialFunc4 Tagclass._System.___hTotalFunc4 |##_System._tuple#0._#Make0| Tagclass._System.Tuple0 class._System.Tuple0 class.MutableBtreeBulkOperations.__default Tagclass.MutableBtreeBulkOperations.__default Tagclass.MutableBtreeBulkOperations.MB.Abs.Node Tagclass.NativeTypes.byte Tagclass.MutableBtreeBulkOperations.MB.Model.Abs.Node Tagclass.NativeTypes.sbyte class.NativeTypes.sbyte class.NativeTypes.byte Tagclass.NativeTypes.int16 class.NativeTypes.int16 Tagclass.NativeTypes.uint16 class.NativeTypes.uint16 Tagclass.NativeTypes.int32 class.NativeTypes.int32 Tagclass.NativeTypes.uint32 class.NativeTypes.uint32 Tagclass.NativeTypes.int64 class.NativeTypes.int64 Tagclass.NativeTypes.uint64 class.NativeTypes.uint64 Tagclass.NativeTypes.nat8 class.NativeTypes.nat8 Tagclass.NativeTypes.nat16 class.NativeTypes.nat16 Tagclass.NativeTypes.nat32 class.NativeTypes.nat32 Tagclass.NativeTypes.nat64 class.NativeTypes.nat64 class.NativeTypes.__default Tagclass.NativeTypes.__default class.SeqComparison.__default Tagclass.SeqComparison.__default class.NativeArrays.__default Tagclass.NativeArrays.__default |##Options.Option.None| Tagclass.Options.Option |##Options.Option.Some| class.Options.Option class.Options.__default Tagclass.Options.__default class.Sequences.__default Tagclass.Sequences.__default class.Maps.__default Tagclass.Maps.__default class.Mathematics.__default Tagclass.Mathematics.__default class.Arrays.__default Tagclass.Arrays.__default class.Byte__Order.__default Tagclass.Byte__Order.__default class.Lexicographic__Byte__Order.__default Tagclass.Lexicographic__Byte__Order.__default class.Lexicographic__Byte__Order__Impl.__default Tagclass.Lexicographic__Byte__Order__Impl.__default class.Integer__Order.__default Tagclass.Integer__Order.__default class.Uint64__Order.__default Tagclass.Uint64__Order.__default |##MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| |##MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| Tagclass.MutableBtreeBulkOperations.MB.Model.Abs.__default |##MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| Tagclass.MutableBtreeBulkOperations.MB.Abs.NodeContents |##MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| Tagclass.MutableBtreeBulkOperations.MB.Abs.Node? Tagclass.MutableBtreeBulkOperations.MB.Abs.__default field$repr field$contents field$height) )
(assert $$Language$Dafny)
(assert (forall ((arg0@@9 Int) ) (! (= (type (TBitvector arg0@@9)) TyType) :qid |funType:TBitvector| :pattern ( (TBitvector arg0@@9)) )))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w) :qid |DafnyPre.32:15| :skolemid |319| :pattern ( (TBitvector w)) )))
(assert  (and (forall ((arg0@@10 T@U) ) (! (= (type (TSet arg0@@10)) TyType) :qid |funType:TSet| :pattern ( (TSet arg0@@10)) )) (forall ((arg0@@11 T@U) ) (! (= (type (Inv0_TSet arg0@@11)) TyType) :qid |funType:Inv0_TSet| :pattern ( (Inv0_TSet arg0@@11)) ))))
(assert (forall ((t T@U) ) (!  (=> (= (type t) TyType) (= (Inv0_TSet (TSet t)) t)) :qid |DafnyPre.34:15| :skolemid |320| :pattern ( (TSet t)) )))
(assert  (and (forall ((arg0@@12 T@U) ) (! (= (type (TISet arg0@@12)) TyType) :qid |funType:TISet| :pattern ( (TISet arg0@@12)) )) (forall ((arg0@@13 T@U) ) (! (= (type (Inv0_TISet arg0@@13)) TyType) :qid |funType:Inv0_TISet| :pattern ( (Inv0_TISet arg0@@13)) ))))
(assert (forall ((t@@0 T@U) ) (!  (=> (= (type t@@0) TyType) (= (Inv0_TISet (TISet t@@0)) t@@0)) :qid |DafnyPre.36:15| :skolemid |321| :pattern ( (TISet t@@0)) )))
(assert  (and (forall ((arg0@@14 T@U) ) (! (= (type (TSeq arg0@@14)) TyType) :qid |funType:TSeq| :pattern ( (TSeq arg0@@14)) )) (forall ((arg0@@15 T@U) ) (! (= (type (Inv0_TSeq arg0@@15)) TyType) :qid |funType:Inv0_TSeq| :pattern ( (Inv0_TSeq arg0@@15)) ))))
(assert (forall ((t@@1 T@U) ) (!  (=> (= (type t@@1) TyType) (= (Inv0_TSeq (TSeq t@@1)) t@@1)) :qid |DafnyPre.38:15| :skolemid |322| :pattern ( (TSeq t@@1)) )))
(assert  (and (forall ((arg0@@16 T@U) ) (! (= (type (TMultiSet arg0@@16)) TyType) :qid |funType:TMultiSet| :pattern ( (TMultiSet arg0@@16)) )) (forall ((arg0@@17 T@U) ) (! (= (type (Inv0_TMultiSet arg0@@17)) TyType) :qid |funType:Inv0_TMultiSet| :pattern ( (Inv0_TMultiSet arg0@@17)) ))))
(assert (forall ((t@@2 T@U) ) (!  (=> (= (type t@@2) TyType) (= (Inv0_TMultiSet (TMultiSet t@@2)) t@@2)) :qid |DafnyPre.40:15| :skolemid |323| :pattern ( (TMultiSet t@@2)) )))
(assert  (and (forall ((arg0@@18 T@U) (arg1 T@U) ) (! (= (type (TMap arg0@@18 arg1)) TyType) :qid |funType:TMap| :pattern ( (TMap arg0@@18 arg1)) )) (forall ((arg0@@19 T@U) ) (! (= (type (Inv0_TMap arg0@@19)) TyType) :qid |funType:Inv0_TMap| :pattern ( (Inv0_TMap arg0@@19)) ))))
(assert (forall ((t@@3 T@U) (u T@U) ) (!  (=> (and (= (type t@@3) TyType) (= (type u) TyType)) (= (Inv0_TMap (TMap t@@3 u)) t@@3)) :qid |DafnyPre.43:15| :skolemid |324| :pattern ( (TMap t@@3 u)) )))
(assert (forall ((arg0@@20 T@U) ) (! (= (type (Inv1_TMap arg0@@20)) TyType) :qid |funType:Inv1_TMap| :pattern ( (Inv1_TMap arg0@@20)) )))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (!  (=> (and (= (type t@@4) TyType) (= (type u@@0) TyType)) (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)) :qid |DafnyPre.44:15| :skolemid |325| :pattern ( (TMap t@@4 u@@0)) )))
(assert  (and (forall ((arg0@@21 T@U) (arg1@@0 T@U) ) (! (= (type (TIMap arg0@@21 arg1@@0)) TyType) :qid |funType:TIMap| :pattern ( (TIMap arg0@@21 arg1@@0)) )) (forall ((arg0@@22 T@U) ) (! (= (type (Inv0_TIMap arg0@@22)) TyType) :qid |funType:Inv0_TIMap| :pattern ( (Inv0_TIMap arg0@@22)) ))))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (!  (=> (and (= (type t@@5) TyType) (= (type u@@1) TyType)) (= (Inv0_TIMap (TIMap t@@5 u@@1)) t@@5)) :qid |DafnyPre.47:15| :skolemid |326| :pattern ( (TIMap t@@5 u@@1)) )))
(assert (forall ((arg0@@23 T@U) ) (! (= (type (Inv1_TIMap arg0@@23)) TyType) :qid |funType:Inv1_TIMap| :pattern ( (Inv1_TIMap arg0@@23)) )))
(assert (forall ((t@@6 T@U) (u@@2 T@U) ) (!  (=> (and (= (type t@@6) TyType) (= (type u@@2) TyType)) (= (Inv1_TIMap (TIMap t@@6 u@@2)) u@@2)) :qid |DafnyPre.48:15| :skolemid |327| :pattern ( (TIMap t@@6 u@@2)) )))
(assert (forall ((arg0@@24 T@U) ) (! (= (type (Tag arg0@@24)) TyTagType) :qid |funType:Tag| :pattern ( (Tag arg0@@24)) )))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (Tag TORDINAL) TagORDINAL))
(assert (forall ((t@@7 T@U) ) (!  (=> (= (type t@@7) TyType) (= (Tag (TSet t@@7)) TagSet)) :qid |DafnyPre.74:15| :skolemid |328| :pattern ( (TSet t@@7)) )))
(assert (forall ((t@@8 T@U) ) (!  (=> (= (type t@@8) TyType) (= (Tag (TISet t@@8)) TagISet)) :qid |DafnyPre.75:15| :skolemid |329| :pattern ( (TISet t@@8)) )))
(assert (forall ((t@@9 T@U) ) (!  (=> (= (type t@@9) TyType) (= (Tag (TMultiSet t@@9)) TagMultiSet)) :qid |DafnyPre.76:15| :skolemid |330| :pattern ( (TMultiSet t@@9)) )))
(assert (forall ((t@@10 T@U) ) (!  (=> (= (type t@@10) TyType) (= (Tag (TSeq t@@10)) TagSeq)) :qid |DafnyPre.77:15| :skolemid |331| :pattern ( (TSeq t@@10)) )))
(assert (forall ((t@@11 T@U) (u@@3 T@U) ) (!  (=> (and (= (type t@@11) TyType) (= (type u@@3) TyType)) (= (Tag (TMap t@@11 u@@3)) TagMap)) :qid |DafnyPre.78:15| :skolemid |332| :pattern ( (TMap t@@11 u@@3)) )))
(assert (forall ((t@@12 T@U) (u@@4 T@U) ) (!  (=> (and (= (type t@@12) TyType) (= (type u@@4) TyType)) (= (Tag (TIMap t@@12 u@@4)) TagIMap)) :qid |DafnyPre.79:15| :skolemid |333| :pattern ( (TIMap t@@12 u@@4)) )))
(assert (forall ((arg0@@25 T@U) ) (! (let ((T (type arg0@@25))) (= (type (Lit arg0@@25)) T)) :qid |funType:Lit| :pattern ( (Lit arg0@@25)) )))
(assert (forall ((x@@6 T@U) ) (! (= (Lit x@@6) x@@6) :qid |DafnyPre.84:29| :skolemid |334| :pattern ( (Lit x@@6)) )))
(assert  (and (= (Ctor BoxType) 10) (forall ((arg0@@26 T@U) ) (! (= (type ($Box arg0@@26)) BoxType) :qid |funType:$Box| :pattern ( ($Box arg0@@26)) ))))
(assert (forall ((x@@7 T@U) ) (! (= ($Box (Lit x@@7)) (Lit ($Box x@@7))) :qid |DafnyPre.85:18| :skolemid |335| :pattern ( ($Box (Lit x@@7))) )))
(assert (forall ((x@@8 Int) ) (! (= (LitInt x@@8) x@@8) :qid |DafnyPre.90:29| :skolemid |336| :pattern ( (LitInt x@@8)) )))
(assert (forall ((x@@9 Int) ) (! (= ($Box (int_2_U (LitInt x@@9))) (Lit ($Box (int_2_U x@@9)))) :qid |DafnyPre.91:15| :skolemid |337| :pattern ( ($Box (int_2_U (LitInt x@@9)))) )))
(assert (forall ((x@@10 Real) ) (! (= (LitReal x@@10) x@@10) :qid |DafnyPre.92:30| :skolemid |338| :pattern ( (LitReal x@@10)) )))
(assert (forall ((x@@11 Real) ) (! (= ($Box (real_2_U (LitReal x@@11))) (Lit ($Box (real_2_U x@@11)))) :qid |DafnyPre.93:15| :skolemid |339| :pattern ( ($Box (real_2_U (LitReal x@@11)))) )))
(assert  (and (= (Ctor charType) 11) (forall ((arg0@@27 Int) ) (! (= (type (|char#FromInt| arg0@@27)) charType) :qid |funType:char#FromInt| :pattern ( (|char#FromInt| arg0@@27)) ))))
(assert (forall ((ch T@U) ) (!  (=> (= (type ch) charType) (and (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (<= 0 (|char#ToInt| ch))) (< (|char#ToInt| ch) 65536))) :qid |DafnyPre.102:15| :skolemid |340| :pattern ( (|char#ToInt| ch)) )))
(assert (forall ((n Int) ) (!  (=> (and (<= 0 n) (< n 65536)) (= (|char#ToInt| (|char#FromInt| n)) n)) :qid |DafnyPre.106:15| :skolemid |341| :pattern ( (|char#FromInt| n)) )))
(assert (forall ((arg0@@28 T@U) (arg1@@1 T@U) ) (! (= (type (|char#Plus| arg0@@28 arg1@@1)) charType) :qid |funType:char#Plus| :pattern ( (|char#Plus| arg0@@28 arg1@@1)) )))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (= (type a) charType) (= (type b) charType)) (= (|char#Plus| a b) (|char#FromInt| (+ (|char#ToInt| a) (|char#ToInt| b))))) :qid |DafnyPre.112:15| :skolemid |342| :pattern ( (|char#Plus| a b)) )))
(assert (forall ((arg0@@29 T@U) (arg1@@2 T@U) ) (! (= (type (|char#Minus| arg0@@29 arg1@@2)) charType) :qid |funType:char#Minus| :pattern ( (|char#Minus| arg0@@29 arg1@@2)) )))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (= (type a@@0) charType) (= (type b@@0) charType)) (= (|char#Minus| a@@0 b@@0) (|char#FromInt| (- (|char#ToInt| a@@0) (|char#ToInt| b@@0))))) :qid |DafnyPre.115:15| :skolemid |343| :pattern ( (|char#Minus| a@@0 b@@0)) )))
(assert (forall ((T@@0 T@T) (arg0@@30 T@U) ) (! (= (type ($Unbox T@@0 arg0@@30)) T@@0) :qid |funType:$Unbox| :pattern ( ($Unbox T@@0 arg0@@30)) )))
(assert (forall ((x@@12 T@U) ) (! (let ((T@@1 (type x@@12))) (= ($Unbox T@@1 ($Box x@@12)) x@@12)) :qid |DafnyPre.142:18| :skolemid |344| :pattern ( ($Box x@@12)) )))
(assert (forall ((bx T@U) ) (!  (=> (and (= (type bx) BoxType) ($IsBox bx TInt)) (and (= ($Box ($Unbox intType bx)) bx) ($Is ($Unbox intType bx) TInt))) :qid |DafnyPre.144:15| :skolemid |345| :pattern ( ($IsBox bx TInt)) )))
(assert (forall ((bx@@0 T@U) ) (!  (=> (and (= (type bx@@0) BoxType) ($IsBox bx@@0 TReal)) (and (= ($Box ($Unbox realType bx@@0)) bx@@0) ($Is ($Unbox realType bx@@0) TReal))) :qid |DafnyPre.147:15| :skolemid |346| :pattern ( ($IsBox bx@@0 TReal)) )))
(assert (forall ((bx@@1 T@U) ) (!  (=> (and (= (type bx@@1) BoxType) ($IsBox bx@@1 TBool)) (and (= ($Box ($Unbox boolType bx@@1)) bx@@1) ($Is ($Unbox boolType bx@@1) TBool))) :qid |DafnyPre.150:15| :skolemid |347| :pattern ( ($IsBox bx@@1 TBool)) )))
(assert (forall ((bx@@2 T@U) ) (!  (=> (and (= (type bx@@2) BoxType) ($IsBox bx@@2 TChar)) (and (= ($Box ($Unbox charType bx@@2)) bx@@2) ($Is ($Unbox charType bx@@2) TChar))) :qid |DafnyPre.153:15| :skolemid |348| :pattern ( ($IsBox bx@@2 TChar)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@31 T@T) (arg1@@3 T@T) ) (! (= (Ctor (MapType0Type arg0@@31 arg1@@3)) 12) :qid |ctor:MapType0Type| )) (forall ((arg0@@32 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@32 arg1@@4)) arg0@@32) :qid |typeInv:MapType0TypeInv0| :pattern ( (MapType0Type arg0@@32 arg1@@4)) ))) (forall ((arg0@@33 T@T) (arg1@@5 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@33 arg1@@5)) arg1@@5) :qid |typeInv:MapType0TypeInv1| :pattern ( (MapType0Type arg0@@33 arg1@@5)) ))) (forall ((arg0@@34 T@U) (arg1@@6 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@34)))) (= (type (MapType0Select arg0@@34 arg1@@6)) aVar1)) :qid |funType:MapType0Select| :pattern ( (MapType0Select arg0@@34 arg1@@6)) ))) (forall ((arg0@@35 T@U) (arg1@@7 T@U) (arg2 T@U) ) (! (let ((aVar1@@0 (type arg2))) (let ((aVar0 (type arg1@@7))) (= (type (MapType0Store arg0@@35 arg1@@7 arg2)) (MapType0Type aVar0 aVar1@@0)))) :qid |funType:MapType0Store| :pattern ( (MapType0Store arg0@@35 arg1@@7 arg2)) ))) (forall ((m T@U) (x0 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m)))) (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 val) x0) val))) :qid |mapAx0:MapType0Select| :weight 0 ))) (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 val@@0) y0) (MapType0Select m@@0 y0))) :qid |mapAx1:MapType0Select:0| :weight 0 )) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (y0@@0 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@1 x0@@1 val@@1) y0@@0) (MapType0Select m@@1 y0@@0))) :qid |mapAx2:MapType0Select| :weight 0 )))))
(assert (forall ((bx@@3 T@U) (t@@13 T@U) ) (!  (=> (and (and (= (type bx@@3) BoxType) (= (type t@@13) TyType)) ($IsBox bx@@3 (TSet t@@13))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@3)) bx@@3) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@3) (TSet t@@13)))) :qid |DafnyPre.156:15| :skolemid |349| :pattern ( ($IsBox bx@@3 (TSet t@@13))) )))
(assert (forall ((bx@@4 T@U) (t@@14 T@U) ) (!  (=> (and (and (= (type bx@@4) BoxType) (= (type t@@14) TyType)) ($IsBox bx@@4 (TISet t@@14))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@4)) bx@@4) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@4) (TISet t@@14)))) :qid |DafnyPre.159:15| :skolemid |350| :pattern ( ($IsBox bx@@4 (TISet t@@14))) )))
(assert (forall ((bx@@5 T@U) (t@@15 T@U) ) (!  (=> (and (and (= (type bx@@5) BoxType) (= (type t@@15) TyType)) ($IsBox bx@@5 (TMultiSet t@@15))) (and (= ($Box ($Unbox (MapType0Type BoxType intType) bx@@5)) bx@@5) ($Is ($Unbox (MapType0Type BoxType intType) bx@@5) (TMultiSet t@@15)))) :qid |DafnyPre.162:15| :skolemid |351| :pattern ( ($IsBox bx@@5 (TMultiSet t@@15))) )))
(assert  (and (forall ((arg0@@36 T@T) ) (! (= (Ctor (SeqType arg0@@36)) 13) :qid |ctor:SeqType| )) (forall ((arg0@@37 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@37)) arg0@@37) :qid |typeInv:SeqTypeInv0| :pattern ( (SeqType arg0@@37)) ))))
(assert (forall ((bx@@6 T@U) (t@@16 T@U) ) (!  (=> (and (and (= (type bx@@6) BoxType) (= (type t@@16) TyType)) ($IsBox bx@@6 (TSeq t@@16))) (and (= ($Box ($Unbox (SeqType BoxType) bx@@6)) bx@@6) ($Is ($Unbox (SeqType BoxType) bx@@6) (TSeq t@@16)))) :qid |DafnyPre.165:15| :skolemid |352| :pattern ( ($IsBox bx@@6 (TSeq t@@16))) )))
(assert  (and (and (forall ((arg0@@38 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType arg0@@38 arg1@@8)) 14) :qid |ctor:MapType| )) (forall ((arg0@@39 T@T) (arg1@@9 T@T) ) (! (= (MapTypeInv0 (MapType arg0@@39 arg1@@9)) arg0@@39) :qid |typeInv:MapTypeInv0| :pattern ( (MapType arg0@@39 arg1@@9)) ))) (forall ((arg0@@40 T@T) (arg1@@10 T@T) ) (! (= (MapTypeInv1 (MapType arg0@@40 arg1@@10)) arg1@@10) :qid |typeInv:MapTypeInv1| :pattern ( (MapType arg0@@40 arg1@@10)) ))))
(assert (forall ((bx@@7 T@U) (s T@U) (t@@17 T@U) ) (!  (=> (and (and (and (= (type bx@@7) BoxType) (= (type s) TyType)) (= (type t@@17) TyType)) ($IsBox bx@@7 (TMap s t@@17))) (and (= ($Box ($Unbox (MapType BoxType BoxType) bx@@7)) bx@@7) ($Is ($Unbox (MapType BoxType BoxType) bx@@7) (TMap s t@@17)))) :qid |DafnyPre.168:15| :skolemid |353| :pattern ( ($IsBox bx@@7 (TMap s t@@17))) )))
(assert  (and (and (forall ((arg0@@41 T@T) (arg1@@11 T@T) ) (! (= (Ctor (IMapType arg0@@41 arg1@@11)) 15) :qid |ctor:IMapType| )) (forall ((arg0@@42 T@T) (arg1@@12 T@T) ) (! (= (IMapTypeInv0 (IMapType arg0@@42 arg1@@12)) arg0@@42) :qid |typeInv:IMapTypeInv0| :pattern ( (IMapType arg0@@42 arg1@@12)) ))) (forall ((arg0@@43 T@T) (arg1@@13 T@T) ) (! (= (IMapTypeInv1 (IMapType arg0@@43 arg1@@13)) arg1@@13) :qid |typeInv:IMapTypeInv1| :pattern ( (IMapType arg0@@43 arg1@@13)) ))))
(assert (forall ((bx@@8 T@U) (s@@0 T@U) (t@@18 T@U) ) (!  (=> (and (and (and (= (type bx@@8) BoxType) (= (type s@@0) TyType)) (= (type t@@18) TyType)) ($IsBox bx@@8 (TIMap s@@0 t@@18))) (and (= ($Box ($Unbox (IMapType BoxType BoxType) bx@@8)) bx@@8) ($Is ($Unbox (IMapType BoxType BoxType) bx@@8) (TIMap s@@0 t@@18)))) :qid |DafnyPre.171:15| :skolemid |354| :pattern ( ($IsBox bx@@8 (TIMap s@@0 t@@18))) )))
(assert (forall ((v T@U) (t@@19 T@U) ) (!  (=> (= (type t@@19) TyType) (and (=> ($IsBox ($Box v) t@@19) ($Is v t@@19)) (=> ($Is v t@@19) ($IsBox ($Box v) t@@19)))) :qid |DafnyPre.175:18| :skolemid |355| :pattern ( ($IsBox ($Box v) t@@19)) )))
(assert  (and (and (and (and (and (forall ((arg0@@44 T@U) (arg1@@14 T@U) ) (! (let ((alpha@@1 (FieldTypeInv0 (type arg1@@14)))) (= (type (MapType1Select arg0@@44 arg1@@14)) alpha@@1)) :qid |funType:MapType1Select| :pattern ( (MapType1Select arg0@@44 arg1@@14)) )) (= (Ctor MapType1Type) 16)) (forall ((arg0@@45 T@U) (arg1@@15 T@U) (arg2@@0 T@U) ) (! (= (type (MapType1Store arg0@@45 arg1@@15 arg2@@0)) MapType1Type) :qid |funType:MapType1Store| :pattern ( (MapType1Store arg0@@45 arg1@@15 arg2@@0)) ))) (forall ((m@@2 T@U) (x0@@2 T@U) (val@@2 T@U) ) (! (let ((alpha@@2 (FieldTypeInv0 (type x0@@2)))) (=> (= (type val@@2) alpha@@2) (= (MapType1Select (MapType1Store m@@2 x0@@2 val@@2) x0@@2) val@@2))) :qid |mapAx0:MapType1Select| :weight 0 ))) (and (forall ((val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) y0@@1) (MapType1Select m@@3 y0@@1))) :qid |mapAx1:MapType1Select:0| :weight 0 )) (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2))) :qid |mapAx2:MapType1Select| :weight 0 )))) (= (Ctor refType) 17)))
(assert (forall ((v@@0 T@U) (t@@20 T@U) (h T@U) ) (!  (=> (and (= (type t@@20) TyType) (= (type h) (MapType0Type refType MapType1Type))) (and (=> ($IsAllocBox ($Box v@@0) t@@20 h) ($IsAlloc v@@0 t@@20 h)) (=> ($IsAlloc v@@0 t@@20 h) ($IsAllocBox ($Box v@@0) t@@20 h)))) :qid |DafnyPre.178:18| :skolemid |356| :pattern ( ($IsAllocBox ($Box v@@0) t@@20 h)) )))
(assert (forall ((v@@1 T@U) ) (!  (=> (= (type v@@1) intType) ($Is v@@1 TInt)) :qid |DafnyPre.196:14| :skolemid |357| :pattern ( ($Is v@@1 TInt)) )))
(assert (forall ((v@@2 T@U) ) (!  (=> (= (type v@@2) realType) ($Is v@@2 TReal)) :qid |DafnyPre.197:14| :skolemid |358| :pattern ( ($Is v@@2 TReal)) )))
(assert (forall ((v@@3 T@U) ) (!  (=> (= (type v@@3) boolType) ($Is v@@3 TBool)) :qid |DafnyPre.198:14| :skolemid |359| :pattern ( ($Is v@@3 TBool)) )))
(assert (forall ((v@@4 T@U) ) (!  (=> (= (type v@@4) charType) ($Is v@@4 TChar)) :qid |DafnyPre.199:14| :skolemid |360| :pattern ( ($Is v@@4 TChar)) )))
(assert (forall ((v@@5 T@U) ) (!  (=> (= (type v@@5) BoxType) ($Is v@@5 TORDINAL)) :qid |DafnyPre.200:14| :skolemid |361| :pattern ( ($Is v@@5 TORDINAL)) )))
(assert (forall ((h@@0 T@U) (v@@6 T@U) ) (!  (=> (and (= (type h@@0) (MapType0Type refType MapType1Type)) (= (type v@@6) intType)) ($IsAlloc v@@6 TInt h@@0)) :qid |DafnyPre.202:14| :skolemid |362| :pattern ( ($IsAlloc v@@6 TInt h@@0)) )))
(assert (forall ((h@@1 T@U) (v@@7 T@U) ) (!  (=> (and (= (type h@@1) (MapType0Type refType MapType1Type)) (= (type v@@7) realType)) ($IsAlloc v@@7 TReal h@@1)) :qid |DafnyPre.203:14| :skolemid |363| :pattern ( ($IsAlloc v@@7 TReal h@@1)) )))
(assert (forall ((h@@2 T@U) (v@@8 T@U) ) (!  (=> (and (= (type h@@2) (MapType0Type refType MapType1Type)) (= (type v@@8) boolType)) ($IsAlloc v@@8 TBool h@@2)) :qid |DafnyPre.204:14| :skolemid |364| :pattern ( ($IsAlloc v@@8 TBool h@@2)) )))
(assert (forall ((h@@3 T@U) (v@@9 T@U) ) (!  (=> (and (= (type h@@3) (MapType0Type refType MapType1Type)) (= (type v@@9) charType)) ($IsAlloc v@@9 TChar h@@3)) :qid |DafnyPre.205:14| :skolemid |365| :pattern ( ($IsAlloc v@@9 TChar h@@3)) )))
(assert (forall ((h@@4 T@U) (v@@10 T@U) ) (!  (=> (and (= (type h@@4) (MapType0Type refType MapType1Type)) (= (type v@@10) BoxType)) ($IsAlloc v@@10 TORDINAL h@@4)) :qid |DafnyPre.206:14| :skolemid |366| :pattern ( ($IsAlloc v@@10 TORDINAL h@@4)) )))
(assert (forall ((v@@11 T@U) (t0 T@U) ) (!  (=> (and (= (type v@@11) (MapType0Type BoxType boolType)) (= (type t0) TyType)) (and (=> ($Is v@@11 (TSet t0)) (forall ((bx@@9 T@U) ) (!  (=> (and (= (type bx@@9) BoxType) (U_2_bool (MapType0Select v@@11 bx@@9))) ($IsBox bx@@9 t0)) :qid |DafnyPre.210:11| :skolemid |367| :pattern ( (MapType0Select v@@11 bx@@9)) ))) (=> (forall ((bx@@10 T@U) ) (!  (=> (and (= (type bx@@10) BoxType) (U_2_bool (MapType0Select v@@11 bx@@10))) ($IsBox bx@@10 t0)) :qid |DafnyPre.210:11| :skolemid |367| :pattern ( (MapType0Select v@@11 bx@@10)) )) ($Is v@@11 (TSet t0))))) :qid |DafnyPre.208:15| :skolemid |368| :pattern ( ($Is v@@11 (TSet t0))) )))
(assert (forall ((v@@12 T@U) (t0@@0 T@U) ) (!  (=> (and (= (type v@@12) (MapType0Type BoxType boolType)) (= (type t0@@0) TyType)) (and (=> ($Is v@@12 (TISet t0@@0)) (forall ((bx@@11 T@U) ) (!  (=> (and (= (type bx@@11) BoxType) (U_2_bool (MapType0Select v@@12 bx@@11))) ($IsBox bx@@11 t0@@0)) :qid |DafnyPre.214:11| :skolemid |369| :pattern ( (MapType0Select v@@12 bx@@11)) ))) (=> (forall ((bx@@12 T@U) ) (!  (=> (and (= (type bx@@12) BoxType) (U_2_bool (MapType0Select v@@12 bx@@12))) ($IsBox bx@@12 t0@@0)) :qid |DafnyPre.214:11| :skolemid |369| :pattern ( (MapType0Select v@@12 bx@@12)) )) ($Is v@@12 (TISet t0@@0))))) :qid |DafnyPre.212:15| :skolemid |370| :pattern ( ($Is v@@12 (TISet t0@@0))) )))
(assert (forall ((v@@13 T@U) (t0@@1 T@U) ) (!  (=> (and (= (type v@@13) (MapType0Type BoxType intType)) (= (type t0@@1) TyType)) (and (=> ($Is v@@13 (TMultiSet t0@@1)) (forall ((bx@@13 T@U) ) (!  (=> (and (= (type bx@@13) BoxType) (< 0 (U_2_int (MapType0Select v@@13 bx@@13)))) ($IsBox bx@@13 t0@@1)) :qid |DafnyPre.218:11| :skolemid |371| :pattern ( (MapType0Select v@@13 bx@@13)) ))) (=> (forall ((bx@@14 T@U) ) (!  (=> (and (= (type bx@@14) BoxType) (< 0 (U_2_int (MapType0Select v@@13 bx@@14)))) ($IsBox bx@@14 t0@@1)) :qid |DafnyPre.218:11| :skolemid |371| :pattern ( (MapType0Select v@@13 bx@@14)) )) ($Is v@@13 (TMultiSet t0@@1))))) :qid |DafnyPre.216:15| :skolemid |372| :pattern ( ($Is v@@13 (TMultiSet t0@@1))) )))
(assert (forall ((v@@14 T@U) (t0@@2 T@U) ) (!  (=> (and (and (= (type v@@14) (MapType0Type BoxType intType)) (= (type t0@@2) TyType)) ($Is v@@14 (TMultiSet t0@@2))) ($IsGoodMultiSet v@@14)) :qid |DafnyPre.220:15| :skolemid |373| :pattern ( ($Is v@@14 (TMultiSet t0@@2))) )))
(assert (forall ((arg0@@46 T@U) (arg1@@16 Int) ) (! (let ((T@@2 (SeqTypeInv0 (type arg0@@46)))) (= (type (|Seq#Index| arg0@@46 arg1@@16)) T@@2)) :qid |funType:Seq#Index| :pattern ( (|Seq#Index| arg0@@46 arg1@@16)) )))
(assert (forall ((v@@15 T@U) (t0@@3 T@U) ) (!  (=> (and (= (type v@@15) (SeqType BoxType)) (= (type t0@@3) TyType)) (and (=> ($Is v@@15 (TSeq t0@@3)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@15))) ($IsBox (|Seq#Index| v@@15 i) t0@@3)) :qid |DafnyPre.224:11| :skolemid |374| :pattern ( (|Seq#Index| v@@15 i)) ))) (=> (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@15))) ($IsBox (|Seq#Index| v@@15 i@@0) t0@@3)) :qid |DafnyPre.224:11| :skolemid |374| :pattern ( (|Seq#Index| v@@15 i@@0)) )) ($Is v@@15 (TSeq t0@@3))))) :qid |DafnyPre.222:15| :skolemid |375| :pattern ( ($Is v@@15 (TSeq t0@@3))) )))
(assert (forall ((v@@16 T@U) (t0@@4 T@U) (h@@5 T@U) ) (!  (=> (and (and (= (type v@@16) (MapType0Type BoxType boolType)) (= (type t0@@4) TyType)) (= (type h@@5) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@16 (TSet t0@@4) h@@5) (forall ((bx@@15 T@U) ) (!  (=> (and (= (type bx@@15) BoxType) (U_2_bool (MapType0Select v@@16 bx@@15))) ($IsAllocBox bx@@15 t0@@4 h@@5)) :qid |DafnyPre.229:11| :skolemid |376| :pattern ( (MapType0Select v@@16 bx@@15)) ))) (=> (forall ((bx@@16 T@U) ) (!  (=> (and (= (type bx@@16) BoxType) (U_2_bool (MapType0Select v@@16 bx@@16))) ($IsAllocBox bx@@16 t0@@4 h@@5)) :qid |DafnyPre.229:11| :skolemid |376| :pattern ( (MapType0Select v@@16 bx@@16)) )) ($IsAlloc v@@16 (TSet t0@@4) h@@5)))) :qid |DafnyPre.227:15| :skolemid |377| :pattern ( ($IsAlloc v@@16 (TSet t0@@4) h@@5)) )))
(assert (forall ((v@@17 T@U) (t0@@5 T@U) (h@@6 T@U) ) (!  (=> (and (and (= (type v@@17) (MapType0Type BoxType boolType)) (= (type t0@@5) TyType)) (= (type h@@6) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@17 (TISet t0@@5) h@@6) (forall ((bx@@17 T@U) ) (!  (=> (and (= (type bx@@17) BoxType) (U_2_bool (MapType0Select v@@17 bx@@17))) ($IsAllocBox bx@@17 t0@@5 h@@6)) :qid |DafnyPre.233:11| :skolemid |378| :pattern ( (MapType0Select v@@17 bx@@17)) ))) (=> (forall ((bx@@18 T@U) ) (!  (=> (and (= (type bx@@18) BoxType) (U_2_bool (MapType0Select v@@17 bx@@18))) ($IsAllocBox bx@@18 t0@@5 h@@6)) :qid |DafnyPre.233:11| :skolemid |378| :pattern ( (MapType0Select v@@17 bx@@18)) )) ($IsAlloc v@@17 (TISet t0@@5) h@@6)))) :qid |DafnyPre.231:15| :skolemid |379| :pattern ( ($IsAlloc v@@17 (TISet t0@@5) h@@6)) )))
(assert (forall ((v@@18 T@U) (t0@@6 T@U) (h@@7 T@U) ) (!  (=> (and (and (= (type v@@18) (MapType0Type BoxType intType)) (= (type t0@@6) TyType)) (= (type h@@7) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7) (forall ((bx@@19 T@U) ) (!  (=> (and (= (type bx@@19) BoxType) (< 0 (U_2_int (MapType0Select v@@18 bx@@19)))) ($IsAllocBox bx@@19 t0@@6 h@@7)) :qid |DafnyPre.237:11| :skolemid |380| :pattern ( (MapType0Select v@@18 bx@@19)) ))) (=> (forall ((bx@@20 T@U) ) (!  (=> (and (= (type bx@@20) BoxType) (< 0 (U_2_int (MapType0Select v@@18 bx@@20)))) ($IsAllocBox bx@@20 t0@@6 h@@7)) :qid |DafnyPre.237:11| :skolemid |380| :pattern ( (MapType0Select v@@18 bx@@20)) )) ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7)))) :qid |DafnyPre.235:15| :skolemid |381| :pattern ( ($IsAlloc v@@18 (TMultiSet t0@@6) h@@7)) )))
(assert (forall ((v@@19 T@U) (t0@@7 T@U) (h@@8 T@U) ) (!  (=> (and (and (= (type v@@19) (SeqType BoxType)) (= (type t0@@7) TyType)) (= (type h@@8) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@19 (TSeq t0@@7) h@@8) (forall ((i@@1 Int) ) (!  (=> (and (<= 0 i@@1) (< i@@1 (|Seq#Length| v@@19))) ($IsAllocBox (|Seq#Index| v@@19 i@@1) t0@@7 h@@8)) :qid |DafnyPre.241:11| :skolemid |382| :pattern ( (|Seq#Index| v@@19 i@@1)) ))) (=> (forall ((i@@2 Int) ) (!  (=> (and (<= 0 i@@2) (< i@@2 (|Seq#Length| v@@19))) ($IsAllocBox (|Seq#Index| v@@19 i@@2) t0@@7 h@@8)) :qid |DafnyPre.241:11| :skolemid |382| :pattern ( (|Seq#Index| v@@19 i@@2)) )) ($IsAlloc v@@19 (TSeq t0@@7) h@@8)))) :qid |DafnyPre.239:15| :skolemid |383| :pattern ( ($IsAlloc v@@19 (TSeq t0@@7) h@@8)) )))
(assert  (and (forall ((arg0@@47 T@U) ) (! (let ((V (MapTypeInv1 (type arg0@@47)))) (let ((U (MapTypeInv0 (type arg0@@47)))) (= (type (|Map#Elements| arg0@@47)) (MapType0Type U V)))) :qid |funType:Map#Elements| :pattern ( (|Map#Elements| arg0@@47)) )) (forall ((arg0@@48 T@U) ) (! (let ((U@@0 (MapTypeInv0 (type arg0@@48)))) (= (type (|Map#Domain| arg0@@48)) (MapType0Type U@@0 boolType))) :qid |funType:Map#Domain| :pattern ( (|Map#Domain| arg0@@48)) ))))
(assert (forall ((v@@20 T@U) (t0@@8 T@U) (t1 T@U) ) (!  (=> (and (and (= (type v@@20) (MapType BoxType BoxType)) (= (type t0@@8) TyType)) (= (type t1) TyType)) (and (=> ($Is v@@20 (TMap t0@@8 t1)) (forall ((bx@@21 T@U) ) (!  (=> (and (= (type bx@@21) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@20) bx@@21))) (and ($IsBox (MapType0Select (|Map#Elements| v@@20) bx@@21) t1) ($IsBox bx@@21 t0@@8))) :qid |DafnyPre.248:19| :skolemid |384| :pattern ( (MapType0Select (|Map#Elements| v@@20) bx@@21)) :pattern ( (MapType0Select (|Map#Domain| v@@20) bx@@21)) ))) (=> (forall ((bx@@22 T@U) ) (!  (=> (and (= (type bx@@22) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@20) bx@@22))) (and ($IsBox (MapType0Select (|Map#Elements| v@@20) bx@@22) t1) ($IsBox bx@@22 t0@@8))) :qid |DafnyPre.248:19| :skolemid |384| :pattern ( (MapType0Select (|Map#Elements| v@@20) bx@@22)) :pattern ( (MapType0Select (|Map#Domain| v@@20) bx@@22)) )) ($Is v@@20 (TMap t0@@8 t1))))) :qid |DafnyPre.245:15| :skolemid |385| :pattern ( ($Is v@@20 (TMap t0@@8 t1))) )))
(assert (forall ((v@@21 T@U) (t0@@9 T@U) (t1@@0 T@U) (h@@9 T@U) ) (!  (=> (and (and (and (= (type v@@21) (MapType BoxType BoxType)) (= (type t0@@9) TyType)) (= (type t1@@0) TyType)) (= (type h@@9) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9) (forall ((bx@@23 T@U) ) (!  (=> (and (= (type bx@@23) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@21) bx@@23))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@21) bx@@23) t1@@0 h@@9) ($IsAllocBox bx@@23 t0@@9 h@@9))) :qid |DafnyPre.256:19| :skolemid |386| :pattern ( (MapType0Select (|Map#Elements| v@@21) bx@@23)) :pattern ( (MapType0Select (|Map#Domain| v@@21) bx@@23)) ))) (=> (forall ((bx@@24 T@U) ) (!  (=> (and (= (type bx@@24) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@21) bx@@24))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@21) bx@@24) t1@@0 h@@9) ($IsAllocBox bx@@24 t0@@9 h@@9))) :qid |DafnyPre.256:19| :skolemid |386| :pattern ( (MapType0Select (|Map#Elements| v@@21) bx@@24)) :pattern ( (MapType0Select (|Map#Domain| v@@21) bx@@24)) )) ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9)))) :qid |DafnyPre.253:15| :skolemid |387| :pattern ( ($IsAlloc v@@21 (TMap t0@@9 t1@@0) h@@9)) )))
(assert  (and (forall ((arg0@@49 T@U) ) (! (let ((V@@0 (IMapTypeInv1 (type arg0@@49)))) (let ((U@@1 (IMapTypeInv0 (type arg0@@49)))) (= (type (|IMap#Elements| arg0@@49)) (MapType0Type U@@1 V@@0)))) :qid |funType:IMap#Elements| :pattern ( (|IMap#Elements| arg0@@49)) )) (forall ((arg0@@50 T@U) ) (! (let ((U@@2 (IMapTypeInv0 (type arg0@@50)))) (= (type (|IMap#Domain| arg0@@50)) (MapType0Type U@@2 boolType))) :qid |funType:IMap#Domain| :pattern ( (|IMap#Domain| arg0@@50)) ))))
(assert (forall ((v@@22 T@U) (t0@@10 T@U) (t1@@1 T@U) ) (!  (=> (and (and (= (type v@@22) (IMapType BoxType BoxType)) (= (type t0@@10) TyType)) (= (type t1@@1) TyType)) (and (=> ($Is v@@22 (TIMap t0@@10 t1@@1)) (forall ((bx@@25 T@U) ) (!  (=> (and (= (type bx@@25) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@22) bx@@25))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@22) bx@@25) t1@@1) ($IsBox bx@@25 t0@@10))) :qid |DafnyPre.265:19| :skolemid |388| :pattern ( (MapType0Select (|IMap#Elements| v@@22) bx@@25)) :pattern ( (MapType0Select (|IMap#Domain| v@@22) bx@@25)) ))) (=> (forall ((bx@@26 T@U) ) (!  (=> (and (= (type bx@@26) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@22) bx@@26))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@22) bx@@26) t1@@1) ($IsBox bx@@26 t0@@10))) :qid |DafnyPre.265:19| :skolemid |388| :pattern ( (MapType0Select (|IMap#Elements| v@@22) bx@@26)) :pattern ( (MapType0Select (|IMap#Domain| v@@22) bx@@26)) )) ($Is v@@22 (TIMap t0@@10 t1@@1))))) :qid |DafnyPre.262:15| :skolemid |389| :pattern ( ($Is v@@22 (TIMap t0@@10 t1@@1))) )))
(assert (forall ((v@@23 T@U) (t0@@11 T@U) (t1@@2 T@U) (h@@10 T@U) ) (!  (=> (and (and (and (= (type v@@23) (IMapType BoxType BoxType)) (= (type t0@@11) TyType)) (= (type t1@@2) TyType)) (= (type h@@10) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10) (forall ((bx@@27 T@U) ) (!  (=> (and (= (type bx@@27) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@23) bx@@27))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@23) bx@@27) t1@@2 h@@10) ($IsAllocBox bx@@27 t0@@11 h@@10))) :qid |DafnyPre.273:19| :skolemid |390| :pattern ( (MapType0Select (|IMap#Elements| v@@23) bx@@27)) :pattern ( (MapType0Select (|IMap#Domain| v@@23) bx@@27)) ))) (=> (forall ((bx@@28 T@U) ) (!  (=> (and (= (type bx@@28) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@23) bx@@28))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@23) bx@@28) t1@@2 h@@10) ($IsAllocBox bx@@28 t0@@11 h@@10))) :qid |DafnyPre.273:19| :skolemid |390| :pattern ( (MapType0Select (|IMap#Elements| v@@23) bx@@28)) :pattern ( (MapType0Select (|IMap#Domain| v@@23) bx@@28)) )) ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10)))) :qid |DafnyPre.270:15| :skolemid |391| :pattern ( ($IsAlloc v@@23 (TIMap t0@@11 t1@@2) h@@10)) )))
(assert  (and (and (forall ((arg0@@51 T@U) (arg1@@17 T@U) ) (! (= (type (TypeTuple arg0@@51 arg1@@17)) ClassNameType) :qid |funType:TypeTuple| :pattern ( (TypeTuple arg0@@51 arg1@@17)) )) (forall ((arg0@@52 T@U) ) (! (= (type (TypeTupleCar arg0@@52)) ClassNameType) :qid |funType:TypeTupleCar| :pattern ( (TypeTupleCar arg0@@52)) ))) (forall ((arg0@@53 T@U) ) (! (= (type (TypeTupleCdr arg0@@53)) ClassNameType) :qid |funType:TypeTupleCdr| :pattern ( (TypeTupleCdr arg0@@53)) ))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (= (type a@@1) ClassNameType) (= (type b@@1) ClassNameType)) (and (= (TypeTupleCar (TypeTuple a@@1 b@@1)) a@@1) (= (TypeTupleCdr (TypeTuple a@@1 b@@1)) b@@1))) :qid |DafnyPre.298:15| :skolemid |392| :pattern ( (TypeTuple a@@1 b@@1)) )))
(assert (forall ((arg0@@54 T@U) ) (! (= (type (SetRef_to_SetBox arg0@@54)) (MapType0Type BoxType boolType)) :qid |funType:SetRef_to_SetBox| :pattern ( (SetRef_to_SetBox arg0@@54)) )))
(assert (forall ((s@@1 T@U) (bx@@29 T@U) ) (!  (=> (and (= (type s@@1) (MapType0Type refType boolType)) (= (type bx@@29) BoxType)) (and (=> (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@29)) (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@29)))) (=> (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@29))) (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@29))))) :qid |DafnyPre.307:15| :skolemid |393| :pattern ( (MapType0Select (SetRef_to_SetBox s@@1) bx@@29)) )))
(assert (= (type Tclass._System.object?) TyType))
(assert (forall ((s@@2 T@U) ) (!  (=> (= (type s@@2) (MapType0Type refType boolType)) ($Is (SetRef_to_SetBox s@@2) (TSet Tclass._System.object?))) :qid |DafnyPre.309:15| :skolemid |394| :pattern ( (SetRef_to_SetBox s@@2)) )))
(assert (= (Ctor DatatypeTypeType) 18))
(assert (forall ((d T@U) ) (!  (=> (= (type d) DatatypeTypeType) (= (BoxRank ($Box d)) (DtRank d))) :qid |DafnyPre.328:15| :skolemid |395| :pattern ( (BoxRank ($Box d))) )))
(assert (forall ((o T@U) ) (!  (=> (= (type o) BoxType) (<= 0 (|ORD#Offset| o))) :qid |DafnyPre.343:15| :skolemid |396| :pattern ( (|ORD#Offset| o)) )))
(assert (forall ((arg0@@55 Int) ) (! (= (type (|ORD#FromNat| arg0@@55)) BoxType) :qid |funType:ORD#FromNat| :pattern ( (|ORD#FromNat| arg0@@55)) )))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0))) :qid |DafnyPre.349:15| :skolemid |397| :pattern ( (|ORD#FromNat| n@@0)) )))
(assert (forall ((o@@0 T@U) ) (!  (=> (and (= (type o@@0) BoxType) (|ORD#IsNat| o@@0)) (= o@@0 (|ORD#FromNat| (|ORD#Offset| o@@0)))) :qid |DafnyPre.351:15| :skolemid |398| :pattern ( (|ORD#Offset| o@@0)) :pattern ( (|ORD#IsNat| o@@0)) )))
(assert (forall ((o@@1 T@U) (p T@U) ) (!  (=> (and (= (type o@@1) BoxType) (= (type p) BoxType)) (and (and (and (=> (|ORD#Less| o@@1 p) (not (= o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (not (|ORD#IsNat| p))) (|ORD#Less| o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (|ORD#IsNat| p)) (and (=> (|ORD#Less| o@@1 p) (< (|ORD#Offset| o@@1) (|ORD#Offset| p))) (=> (< (|ORD#Offset| o@@1) (|ORD#Offset| p)) (|ORD#Less| o@@1 p))))) (=> (and (|ORD#Less| o@@1 p) (|ORD#IsNat| p)) (|ORD#IsNat| o@@1)))) :qid |DafnyPre.355:15| :skolemid |399| :pattern ( (|ORD#Less| o@@1 p)) )))
(assert (forall ((o@@2 T@U) (p@@0 T@U) ) (!  (=> (and (= (type o@@2) BoxType) (= (type p@@0) BoxType)) (or (or (|ORD#Less| o@@2 p@@0) (= o@@2 p@@0)) (|ORD#Less| p@@0 o@@2))) :qid |DafnyPre.361:15| :skolemid |400| :pattern ( (|ORD#Less| o@@2 p@@0) (|ORD#Less| p@@0 o@@2)) )))
(assert (forall ((o@@3 T@U) (p@@1 T@U) (r T@U) ) (!  (=> (and (and (and (= (type o@@3) BoxType) (= (type p@@1) BoxType)) (= (type r) BoxType)) (and (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r))) (|ORD#Less| o@@3 r)) :qid |DafnyPre.364:15| :skolemid |401| :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r)) :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| o@@3 r)) )))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (=> (and (= (type o@@4) BoxType) (= (type p@@2) BoxType)) (and (=> (|ORD#LessThanLimit| o@@4 p@@2) (|ORD#Less| o@@4 p@@2)) (=> (|ORD#Less| o@@4 p@@2) (|ORD#LessThanLimit| o@@4 p@@2)))) :qid |DafnyPre.371:15| :skolemid |402| :pattern ( (|ORD#LessThanLimit| o@@4 p@@2)) )))
(assert (forall ((arg0@@56 T@U) (arg1@@18 T@U) ) (! (= (type (|ORD#Plus| arg0@@56 arg1@@18)) BoxType) :qid |funType:ORD#Plus| :pattern ( (|ORD#Plus| arg0@@56 arg1@@18)) )))
(assert (forall ((o@@5 T@U) (p@@3 T@U) ) (!  (=> (and (= (type o@@5) BoxType) (= (type p@@3) BoxType)) (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (and (|ORD#IsNat| o@@5) (|ORD#IsNat| p@@3))) (=> (|ORD#IsNat| p@@3) (and (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (|ORD#IsNat| o@@5)) (=> (|ORD#IsNat| o@@5) (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)))) (= (|ORD#Offset| (|ORD#Plus| o@@5 p@@3)) (+ (|ORD#Offset| o@@5) (|ORD#Offset| p@@3))))))) :qid |DafnyPre.375:15| :skolemid |403| :pattern ( (|ORD#Plus| o@@5 p@@3)) )))
(assert (forall ((o@@6 T@U) (p@@4 T@U) ) (!  (=> (and (= (type o@@6) BoxType) (= (type p@@4) BoxType)) (and (or (= o@@6 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| o@@6 (|ORD#Plus| o@@6 p@@4))) (or (= p@@4 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| p@@4 (|ORD#Plus| o@@6 p@@4))))) :qid |DafnyPre.380:15| :skolemid |404| :pattern ( (|ORD#Plus| o@@6 p@@4)) )))
(assert (forall ((o@@7 T@U) (p@@5 T@U) ) (!  (=> (and (= (type o@@7) BoxType) (= (type p@@5) BoxType)) (and (=> (= o@@7 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) p@@5)) (=> (= p@@5 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) o@@7)))) :qid |DafnyPre.383:15| :skolemid |405| :pattern ( (|ORD#Plus| o@@7 p@@5)) )))
(assert (forall ((arg0@@57 T@U) (arg1@@19 T@U) ) (! (= (type (|ORD#Minus| arg0@@57 arg1@@19)) BoxType) :qid |funType:ORD#Minus| :pattern ( (|ORD#Minus| arg0@@57 arg1@@19)) )))
(assert (forall ((o@@8 T@U) (p@@6 T@U) ) (!  (=> (and (and (= (type o@@8) BoxType) (= (type p@@6) BoxType)) (and (|ORD#IsNat| p@@6) (<= (|ORD#Offset| p@@6) (|ORD#Offset| o@@8)))) (and (and (=> (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)) (|ORD#IsNat| o@@8)) (=> (|ORD#IsNat| o@@8) (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)))) (= (|ORD#Offset| (|ORD#Minus| o@@8 p@@6)) (- (|ORD#Offset| o@@8) (|ORD#Offset| p@@6))))) :qid |DafnyPre.388:15| :skolemid |406| :pattern ( (|ORD#Minus| o@@8 p@@6)) )))
(assert (forall ((o@@9 T@U) (p@@7 T@U) ) (!  (=> (and (and (= (type o@@9) BoxType) (= (type p@@7) BoxType)) (and (|ORD#IsNat| p@@7) (<= (|ORD#Offset| p@@7) (|ORD#Offset| o@@9)))) (or (and (= p@@7 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@9 p@@7) o@@9)) (and (not (= p@@7 (|ORD#FromNat| 0))) (|ORD#Less| (|ORD#Minus| o@@9 p@@7) o@@9)))) :qid |DafnyPre.392:15| :skolemid |407| :pattern ( (|ORD#Minus| o@@9 p@@7)) )))
(assert (forall ((o@@10 T@U) (m@@5 Int) (n@@1 Int) ) (!  (=> (= (type o@@10) BoxType) (=> (and (<= 0 m@@5) (<= 0 n@@1)) (= (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)) (|ORD#Plus| o@@10 (|ORD#FromNat| (+ m@@5 n@@1)))))) :qid |DafnyPre.398:15| :skolemid |408| :pattern ( (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1))) )))
(assert (forall ((o@@11 T@U) (m@@6 Int) (n@@2 Int) ) (!  (=> (= (type o@@11) BoxType) (=> (and (and (<= 0 m@@6) (<= 0 n@@2)) (<= (+ m@@6 n@@2) (|ORD#Offset| o@@11))) (= (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)) (|ORD#Minus| o@@11 (|ORD#FromNat| (+ m@@6 n@@2)))))) :qid |DafnyPre.403:15| :skolemid |409| :pattern ( (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2))) )))
(assert (forall ((o@@12 T@U) (m@@7 Int) (n@@3 Int) ) (!  (=> (= (type o@@12) BoxType) (=> (and (and (<= 0 m@@7) (<= 0 n@@3)) (<= n@@3 (+ (|ORD#Offset| o@@12) m@@7))) (and (=> (<= 0 (- m@@7 n@@3)) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Plus| o@@12 (|ORD#FromNat| (- m@@7 n@@3))))) (=> (<= (- m@@7 n@@3) 0) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Minus| o@@12 (|ORD#FromNat| (- n@@3 m@@7)))))))) :qid |DafnyPre.408:15| :skolemid |410| :pattern ( (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3))) )))
(assert (forall ((o@@13 T@U) (m@@8 Int) (n@@4 Int) ) (!  (=> (= (type o@@13) BoxType) (=> (and (and (<= 0 m@@8) (<= 0 n@@4)) (<= n@@4 (+ (|ORD#Offset| o@@13) m@@8))) (and (=> (<= 0 (- m@@8 n@@4)) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Minus| o@@13 (|ORD#FromNat| (- m@@8 n@@4))))) (=> (<= (- m@@8 n@@4) 0) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Plus| o@@13 (|ORD#FromNat| (- n@@4 m@@8)))))))) :qid |DafnyPre.414:15| :skolemid |411| :pattern ( (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4))) )))
(assert  (and (= (Ctor LayerTypeType) 19) (forall ((arg0@@58 T@U) (arg1@@20 T@U) ) (! (let ((A (MapType0TypeInv1 (type arg0@@58)))) (= (type (AtLayer arg0@@58 arg1@@20)) A)) :qid |funType:AtLayer| :pattern ( (AtLayer arg0@@58 arg1@@20)) ))))
(assert (forall ((f T@U) (ly T@U) ) (! (let ((A@@0 (MapType0TypeInv1 (type f)))) (=> (and (= (type f) (MapType0Type LayerTypeType A@@0)) (= (type ly) LayerTypeType)) (= (AtLayer f ly) (MapType0Select f ly)))) :qid |DafnyPre.438:18| :skolemid |412| :pattern ( (AtLayer f ly)) )))
(assert (forall ((arg0@@59 T@U) ) (! (= (type ($LS arg0@@59)) LayerTypeType) :qid |funType:$LS| :pattern ( ($LS arg0@@59)) )))
(assert (forall ((f@@0 T@U) (ly@@0 T@U) ) (! (let ((A@@1 (MapType0TypeInv1 (type f@@0)))) (=> (and (= (type f@@0) (MapType0Type LayerTypeType A@@1)) (= (type ly@@0) LayerTypeType)) (= (AtLayer f@@0 ($LS ly@@0)) (AtLayer f@@0 ly@@0)))) :qid |DafnyPre.439:18| :skolemid |413| :pattern ( (AtLayer f@@0 ($LS ly@@0))) )))
(assert (forall ((arg0@@60 Int) ) (! (= (type (IndexField arg0@@60)) (FieldType BoxType)) :qid |funType:IndexField| :pattern ( (IndexField arg0@@60)) )))
(assert (forall ((i@@3 Int) ) (! (= (FDim (IndexField i@@3)) 1) :qid |DafnyPre.450:15| :skolemid |414| :pattern ( (IndexField i@@3)) )))
(assert (forall ((i@@4 Int) ) (! (= (IndexField_Inverse (IndexField i@@4)) i@@4) :qid |DafnyPre.452:15| :skolemid |415| :pattern ( (IndexField i@@4)) )))
(assert (forall ((arg0@@61 T@U) (arg1@@21 Int) ) (! (= (type (MultiIndexField arg0@@61 arg1@@21)) (FieldType BoxType)) :qid |funType:MultiIndexField| :pattern ( (MultiIndexField arg0@@61 arg1@@21)) )))
(assert (forall ((f@@1 T@U) (i@@5 Int) ) (!  (=> (= (type f@@1) (FieldType BoxType)) (= (FDim (MultiIndexField f@@1 i@@5)) (+ (FDim f@@1) 1))) :qid |DafnyPre.455:15| :skolemid |416| :pattern ( (MultiIndexField f@@1 i@@5)) )))
(assert (forall ((arg0@@62 T@U) ) (! (let ((T@@3 (FieldTypeInv0 (type arg0@@62)))) (= (type (MultiIndexField_Inverse0 arg0@@62)) (FieldType T@@3))) :qid |funType:MultiIndexField_Inverse0| :pattern ( (MultiIndexField_Inverse0 arg0@@62)) )))
(assert (forall ((f@@2 T@U) (i@@6 Int) ) (!  (=> (= (type f@@2) (FieldType BoxType)) (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@2 i@@6)) f@@2) (= (MultiIndexField_Inverse1 (MultiIndexField f@@2 i@@6)) i@@6))) :qid |DafnyPre.458:15| :skolemid |417| :pattern ( (MultiIndexField f@@2 i@@6)) )))
(assert  (and (and (forall ((alpha@@3 T@T) (arg0@@63 T@U) (arg1@@22 T@U) ) (! (= (type (FieldOfDecl alpha@@3 arg0@@63 arg1@@22)) (FieldType alpha@@3)) :qid |funType:FieldOfDecl| :pattern ( (FieldOfDecl alpha@@3 arg0@@63 arg1@@22)) )) (forall ((arg0@@64 T@U) ) (! (= (type (DeclType arg0@@64)) ClassNameType) :qid |funType:DeclType| :pattern ( (DeclType arg0@@64)) ))) (forall ((arg0@@65 T@U) ) (! (= (type (DeclName arg0@@65)) NameFamilyType) :qid |funType:DeclName| :pattern ( (DeclName arg0@@65)) ))))
(assert (forall ((cl T@U) (nm T@U) (T@@4 T@T) ) (!  (=> (and (= (type cl) ClassNameType) (= (type nm) NameFamilyType)) (and (= (DeclType (FieldOfDecl T@@4 cl nm)) cl) (= (DeclName (FieldOfDecl T@@4 cl nm)) nm))) :qid |DafnyPre.467:18| :skolemid |418| :pattern ( (FieldOfDecl T@@4 cl nm)) )))
(assert (forall ((h@@11 T@U) (k T@U) (v@@24 T@U) (t@@21 T@U) ) (!  (=> (and (and (and (and (= (type h@@11) (MapType0Type refType MapType1Type)) (= (type k) (MapType0Type refType MapType1Type))) (= (type t@@21) TyType)) ($HeapSucc h@@11 k)) ($IsAlloc v@@24 t@@21 h@@11)) ($IsAlloc v@@24 t@@21 k)) :qid |DafnyPre.480:17| :skolemid |419| :pattern ( ($HeapSucc h@@11 k) ($IsAlloc v@@24 t@@21 h@@11)) )))
(assert (forall ((h@@12 T@U) (k@@0 T@U) (bx@@30 T@U) (t@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@12) (MapType0Type refType MapType1Type)) (= (type k@@0) (MapType0Type refType MapType1Type))) (= (type bx@@30) BoxType)) (= (type t@@22) TyType)) ($HeapSucc h@@12 k@@0)) ($IsAllocBox bx@@30 t@@22 h@@12)) ($IsAllocBox bx@@30 t@@22 k@@0)) :qid |DafnyPre.483:14| :skolemid |420| :pattern ( ($HeapSucc h@@12 k@@0) ($IsAllocBox bx@@30 t@@22 h@@12)) )))
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (not ($IsGhostField alloc)))
(assert (forall ((o@@14 T@U) ) (!  (=> (= (type o@@14) refType) (<= 0 (_System.array.Length o@@14))) :qid |DafnyPre.500:15| :skolemid |421| :no-pattern (type o@@14) :no-pattern (U_2_int o@@14) :no-pattern (U_2_bool o@@14) )))
(assert (forall ((x@@13 Real) ) (! (= (q@Int x@@13) (to_int x@@13)) :qid |DafnyPre.506:14| :skolemid |422| :pattern ( (q@Int x@@13)) )))
(assert (forall ((x@@14 Int) ) (! (= (q@Real x@@14) (to_real x@@14)) :qid |DafnyPre.507:15| :skolemid |423| :pattern ( (q@Real x@@14)) )))
(assert (forall ((i@@7 Int) ) (! (= (q@Int (q@Real i@@7)) i@@7) :qid |DafnyPre.508:15| :skolemid |424| :pattern ( (q@Int (q@Real i@@7))) )))
(assert (= (type $OneHeap) (MapType0Type refType MapType1Type)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((h@@13 T@U) (r@@0 T@U) (f@@3 T@U) (x@@15 T@U) ) (! (let ((alpha@@4 (type x@@15))) (=> (and (and (and (= (type h@@13) (MapType0Type refType MapType1Type)) (= (type r@@0) refType)) (= (type f@@3) (FieldType alpha@@4))) ($IsGoodHeap (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15)))) ($HeapSucc h@@13 (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15))))) :qid |DafnyPre.530:22| :skolemid |425| :pattern ( (MapType0Store h@@13 r@@0 (MapType1Store (MapType0Select h@@13 r@@0) f@@3 x@@15))) )))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (and (and (and (and (= (type a@@2) (MapType0Type refType MapType1Type)) (= (type b@@2) (MapType0Type refType MapType1Type))) (= (type c) (MapType0Type refType MapType1Type))) (not (= a@@2 c))) (and ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))) ($HeapSucc a@@2 c)) :qid |DafnyPre.533:15| :skolemid |426| :pattern ( ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) )))
(assert (forall ((h@@14 T@U) (k@@1 T@U) ) (!  (=> (and (and (= (type h@@14) (MapType0Type refType MapType1Type)) (= (type k@@1) (MapType0Type refType MapType1Type))) ($HeapSucc h@@14 k@@1)) (forall ((o@@15 T@U) ) (!  (=> (and (= (type o@@15) refType) (U_2_bool (MapType1Select (MapType0Select h@@14 o@@15) alloc))) (U_2_bool (MapType1Select (MapType0Select k@@1 o@@15) alloc))) :qid |DafnyPre.536:30| :skolemid |427| :pattern ( (MapType1Select (MapType0Select k@@1 o@@15) alloc)) ))) :qid |DafnyPre.535:15| :skolemid |428| :pattern ( ($HeapSucc h@@14 k@@1)) )))
(assert (forall ((h@@15 T@U) (k@@2 T@U) ) (!  (=> (and (and (= (type h@@15) (MapType0Type refType MapType1Type)) (= (type k@@2) (MapType0Type refType MapType1Type))) ($HeapSuccGhost h@@15 k@@2)) (and ($HeapSucc h@@15 k@@2) (forall ((o@@16 T@U) (f@@4 T@U) ) (! (let ((alpha@@5 (FieldTypeInv0 (type f@@4)))) (=> (and (and (= (type o@@16) refType) (= (type f@@4) (FieldType alpha@@5))) (not ($IsGhostField f@@4))) (= (MapType1Select (MapType0Select h@@15 o@@16) f@@4) (MapType1Select (MapType0Select k@@2 o@@16) f@@4)))) :qid |DafnyPre.542:20| :skolemid |429| :pattern ( (MapType1Select (MapType0Select k@@2 o@@16) f@@4)) )))) :qid |DafnyPre.539:15| :skolemid |430| :pattern ( ($HeapSuccGhost h@@15 k@@2)) )))
(assert (forall ((s@@3 T@U) ) (! (let ((T@@5 (MapType0TypeInv0 (type s@@3)))) (=> (= (type s@@3) (MapType0Type T@@5 boolType)) (<= 0 (|Set#Card| s@@3)))) :qid |DafnyPre.600:18| :skolemid |435| :pattern ( (|Set#Card| s@@3)) )))
(assert (forall ((T@@6 T@T) ) (! (= (type (|Set#Empty| T@@6)) (MapType0Type T@@6 boolType)) :qid |funType:Set#Empty| :pattern ( (|Set#Empty| T@@6)) )))
(assert (forall ((o@@17 T@U) ) (! (let ((T@@7 (type o@@17))) (not (U_2_bool (MapType0Select (|Set#Empty| T@@7) o@@17)))) :qid |DafnyPre.603:18| :skolemid |436| :pattern ( (let ((T@@7 (type o@@17))) (MapType0Select (|Set#Empty| T@@7) o@@17))) )))
(assert (forall ((s@@4 T@U) ) (! (let ((T@@8 (MapType0TypeInv0 (type s@@4)))) (=> (= (type s@@4) (MapType0Type T@@8 boolType)) (and (and (=> (= (|Set#Card| s@@4) 0) (= s@@4 (|Set#Empty| T@@8))) (=> (= s@@4 (|Set#Empty| T@@8)) (= (|Set#Card| s@@4) 0))) (=> (not (= (|Set#Card| s@@4) 0)) (exists ((x@@16 T@U) ) (!  (and (= (type x@@16) T@@8) (U_2_bool (MapType0Select s@@4 x@@16))) :qid |DafnyPre.606:33| :skolemid |437| :no-pattern (type x@@16) :no-pattern (U_2_int x@@16) :no-pattern (U_2_bool x@@16) )))))) :qid |DafnyPre.604:18| :skolemid |438| :pattern ( (|Set#Card| s@@4)) )))
(assert (forall ((arg0@@66 T@U) ) (! (let ((T@@9 (type arg0@@66))) (= (type (|Set#Singleton| arg0@@66)) (MapType0Type T@@9 boolType))) :qid |funType:Set#Singleton| :pattern ( (|Set#Singleton| arg0@@66)) )))
(assert (forall ((r@@1 T@U) ) (! (U_2_bool (MapType0Select (|Set#Singleton| r@@1) r@@1)) :qid |DafnyPre.612:18| :skolemid |439| :pattern ( (|Set#Singleton| r@@1)) )))
(assert (forall ((r@@2 T@U) (o@@18 T@U) ) (! (let ((T@@10 (type r@@2))) (=> (= (type o@@18) T@@10) (and (=> (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)) (= r@@2 o@@18)) (=> (= r@@2 o@@18) (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)))))) :qid |DafnyPre.613:18| :skolemid |440| :pattern ( (MapType0Select (|Set#Singleton| r@@2) o@@18)) )))
(assert (forall ((r@@3 T@U) ) (! (= (|Set#Card| (|Set#Singleton| r@@3)) 1) :qid |DafnyPre.614:18| :skolemid |441| :pattern ( (|Set#Card| (|Set#Singleton| r@@3))) )))
(assert (forall ((arg0@@67 T@U) (arg1@@23 T@U) ) (! (let ((T@@11 (type arg1@@23))) (= (type (|Set#UnionOne| arg0@@67 arg1@@23)) (MapType0Type T@@11 boolType))) :qid |funType:Set#UnionOne| :pattern ( (|Set#UnionOne| arg0@@67 arg1@@23)) )))
(assert (forall ((a@@3 T@U) (x@@17 T@U) (o@@19 T@U) ) (! (let ((T@@12 (type x@@17))) (=> (and (= (type a@@3) (MapType0Type T@@12 boolType)) (= (type o@@19) T@@12)) (and (=> (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)) (or (= o@@19 x@@17) (U_2_bool (MapType0Select a@@3 o@@19)))) (=> (or (= o@@19 x@@17) (U_2_bool (MapType0Select a@@3 o@@19))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)))))) :qid |DafnyPre.617:18| :skolemid |442| :pattern ( (MapType0Select (|Set#UnionOne| a@@3 x@@17) o@@19)) )))
(assert (forall ((a@@4 T@U) (x@@18 T@U) ) (! (let ((T@@13 (type x@@18))) (=> (= (type a@@4) (MapType0Type T@@13 boolType)) (U_2_bool (MapType0Select (|Set#UnionOne| a@@4 x@@18) x@@18)))) :qid |DafnyPre.619:18| :skolemid |443| :pattern ( (|Set#UnionOne| a@@4 x@@18)) )))
(assert (forall ((a@@5 T@U) (x@@19 T@U) (y@@1 T@U) ) (! (let ((T@@14 (type x@@19))) (=> (and (and (= (type a@@5) (MapType0Type T@@14 boolType)) (= (type y@@1) T@@14)) (U_2_bool (MapType0Select a@@5 y@@1))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@5 x@@19) y@@1)))) :qid |DafnyPre.621:18| :skolemid |444| :pattern ( (|Set#UnionOne| a@@5 x@@19) (MapType0Select a@@5 y@@1)) )))
(assert (forall ((a@@6 T@U) (x@@20 T@U) ) (! (let ((T@@15 (type x@@20))) (=> (and (= (type a@@6) (MapType0Type T@@15 boolType)) (U_2_bool (MapType0Select a@@6 x@@20))) (= (|Set#Card| (|Set#UnionOne| a@@6 x@@20)) (|Set#Card| a@@6)))) :qid |DafnyPre.623:18| :skolemid |445| :pattern ( (|Set#Card| (|Set#UnionOne| a@@6 x@@20))) )))
(assert (forall ((a@@7 T@U) (x@@21 T@U) ) (! (let ((T@@16 (type x@@21))) (=> (and (= (type a@@7) (MapType0Type T@@16 boolType)) (not (U_2_bool (MapType0Select a@@7 x@@21)))) (= (|Set#Card| (|Set#UnionOne| a@@7 x@@21)) (+ (|Set#Card| a@@7) 1)))) :qid |DafnyPre.625:18| :skolemid |446| :pattern ( (|Set#Card| (|Set#UnionOne| a@@7 x@@21))) )))
(assert (forall ((arg0@@68 T@U) (arg1@@24 T@U) ) (! (let ((T@@17 (MapType0TypeInv0 (type arg0@@68)))) (= (type (|Set#Union| arg0@@68 arg1@@24)) (MapType0Type T@@17 boolType))) :qid |funType:Set#Union| :pattern ( (|Set#Union| arg0@@68 arg1@@24)) )))
(assert (forall ((a@@8 T@U) (b@@3 T@U) (o@@20 T@U) ) (! (let ((T@@18 (type o@@20))) (=> (and (= (type a@@8) (MapType0Type T@@18 boolType)) (= (type b@@3) (MapType0Type T@@18 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20)))) (=> (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20))) (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)))))) :qid |DafnyPre.629:18| :skolemid |447| :pattern ( (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) )))
(assert (forall ((a@@9 T@U) (b@@4 T@U) (y@@2 T@U) ) (! (let ((T@@19 (type y@@2))) (=> (and (and (= (type a@@9) (MapType0Type T@@19 boolType)) (= (type b@@4) (MapType0Type T@@19 boolType))) (U_2_bool (MapType0Select a@@9 y@@2))) (U_2_bool (MapType0Select (|Set#Union| a@@9 b@@4) y@@2)))) :qid |DafnyPre.631:18| :skolemid |448| :pattern ( (|Set#Union| a@@9 b@@4) (MapType0Select a@@9 y@@2)) )))
(assert (forall ((a@@10 T@U) (b@@5 T@U) (y@@3 T@U) ) (! (let ((T@@20 (type y@@3))) (=> (and (and (= (type a@@10) (MapType0Type T@@20 boolType)) (= (type b@@5) (MapType0Type T@@20 boolType))) (U_2_bool (MapType0Select b@@5 y@@3))) (U_2_bool (MapType0Select (|Set#Union| a@@10 b@@5) y@@3)))) :qid |DafnyPre.633:18| :skolemid |449| :pattern ( (|Set#Union| a@@10 b@@5) (MapType0Select b@@5 y@@3)) )))
(assert (forall ((arg0@@69 T@U) (arg1@@25 T@U) ) (! (let ((T@@21 (MapType0TypeInv0 (type arg0@@69)))) (= (type (|Set#Difference| arg0@@69 arg1@@25)) (MapType0Type T@@21 boolType))) :qid |funType:Set#Difference| :pattern ( (|Set#Difference| arg0@@69 arg1@@25)) )))
(assert (forall ((a@@11 T@U) (b@@6 T@U) ) (! (let ((T@@22 (MapType0TypeInv0 (type a@@11)))) (=> (and (and (= (type a@@11) (MapType0Type T@@22 boolType)) (= (type b@@6) (MapType0Type T@@22 boolType))) (|Set#Disjoint| a@@11 b@@6)) (and (= (|Set#Difference| (|Set#Union| a@@11 b@@6) a@@11) b@@6) (= (|Set#Difference| (|Set#Union| a@@11 b@@6) b@@6) a@@11)))) :qid |DafnyPre.635:18| :skolemid |450| :pattern ( (|Set#Union| a@@11 b@@6)) )))
(assert (forall ((arg0@@70 T@U) (arg1@@26 T@U) ) (! (let ((T@@23 (MapType0TypeInv0 (type arg0@@70)))) (= (type (|Set#Intersection| arg0@@70 arg1@@26)) (MapType0Type T@@23 boolType))) :qid |funType:Set#Intersection| :pattern ( (|Set#Intersection| arg0@@70 arg1@@26)) )))
(assert (forall ((a@@12 T@U) (b@@7 T@U) (o@@21 T@U) ) (! (let ((T@@24 (type o@@21))) (=> (and (= (type a@@12) (MapType0Type T@@24 boolType)) (= (type b@@7) (MapType0Type T@@24 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21)))) (=> (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21))) (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)))))) :qid |DafnyPre.645:18| :skolemid |451| :pattern ( (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) )))
(assert (forall ((a@@13 T@U) (b@@8 T@U) ) (! (let ((T@@25 (MapType0TypeInv0 (type a@@13)))) (=> (and (= (type a@@13) (MapType0Type T@@25 boolType)) (= (type b@@8) (MapType0Type T@@25 boolType))) (= (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8) (|Set#Union| a@@13 b@@8)))) :qid |DafnyPre.648:18| :skolemid |452| :pattern ( (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8)) )))
(assert (forall ((a@@14 T@U) (b@@9 T@U) ) (! (let ((T@@26 (MapType0TypeInv0 (type a@@14)))) (=> (and (= (type a@@14) (MapType0Type T@@26 boolType)) (= (type b@@9) (MapType0Type T@@26 boolType))) (= (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9)) (|Set#Union| a@@14 b@@9)))) :qid |DafnyPre.650:18| :skolemid |453| :pattern ( (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9))) )))
(assert (forall ((a@@15 T@U) (b@@10 T@U) ) (! (let ((T@@27 (MapType0TypeInv0 (type a@@15)))) (=> (and (= (type a@@15) (MapType0Type T@@27 boolType)) (= (type b@@10) (MapType0Type T@@27 boolType))) (= (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10) (|Set#Intersection| a@@15 b@@10)))) :qid |DafnyPre.652:18| :skolemid |454| :pattern ( (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10)) )))
(assert (forall ((a@@16 T@U) (b@@11 T@U) ) (! (let ((T@@28 (MapType0TypeInv0 (type a@@16)))) (=> (and (= (type a@@16) (MapType0Type T@@28 boolType)) (= (type b@@11) (MapType0Type T@@28 boolType))) (= (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11)) (|Set#Intersection| a@@16 b@@11)))) :qid |DafnyPre.654:18| :skolemid |455| :pattern ( (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11))) )))
(assert (forall ((a@@17 T@U) (b@@12 T@U) ) (! (let ((T@@29 (MapType0TypeInv0 (type a@@17)))) (=> (and (= (type a@@17) (MapType0Type T@@29 boolType)) (= (type b@@12) (MapType0Type T@@29 boolType))) (= (+ (|Set#Card| (|Set#Union| a@@17 b@@12)) (|Set#Card| (|Set#Intersection| a@@17 b@@12))) (+ (|Set#Card| a@@17) (|Set#Card| b@@12))))) :qid |DafnyPre.656:18| :skolemid |456| :pattern ( (|Set#Card| (|Set#Union| a@@17 b@@12))) :pattern ( (|Set#Card| (|Set#Intersection| a@@17 b@@12))) )))
(assert (forall ((a@@18 T@U) (b@@13 T@U) (o@@22 T@U) ) (! (let ((T@@30 (type o@@22))) (=> (and (= (type a@@18) (MapType0Type T@@30 boolType)) (= (type b@@13) (MapType0Type T@@30 boolType))) (and (=> (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22))))) (=> (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22)))) (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)))))) :qid |DafnyPre.660:18| :skolemid |457| :pattern ( (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) )))
(assert (forall ((a@@19 T@U) (b@@14 T@U) (y@@4 T@U) ) (! (let ((T@@31 (type y@@4))) (=> (and (and (= (type a@@19) (MapType0Type T@@31 boolType)) (= (type b@@14) (MapType0Type T@@31 boolType))) (U_2_bool (MapType0Select b@@14 y@@4))) (not (U_2_bool (MapType0Select (|Set#Difference| a@@19 b@@14) y@@4))))) :qid |DafnyPre.662:18| :skolemid |458| :pattern ( (|Set#Difference| a@@19 b@@14) (MapType0Select b@@14 y@@4)) )))
(assert (forall ((a@@20 T@U) (b@@15 T@U) ) (! (let ((T@@32 (MapType0TypeInv0 (type a@@20)))) (=> (and (= (type a@@20) (MapType0Type T@@32 boolType)) (= (type b@@15) (MapType0Type T@@32 boolType))) (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@20 b@@15)) (|Set#Card| (|Set#Difference| b@@15 a@@20))) (|Set#Card| (|Set#Intersection| a@@20 b@@15))) (|Set#Card| (|Set#Union| a@@20 b@@15))) (= (|Set#Card| (|Set#Difference| a@@20 b@@15)) (- (|Set#Card| a@@20) (|Set#Card| (|Set#Intersection| a@@20 b@@15))))))) :qid |DafnyPre.664:18| :skolemid |459| :pattern ( (|Set#Card| (|Set#Difference| a@@20 b@@15))) )))
(assert (forall ((a@@21 T@U) (b@@16 T@U) ) (! (let ((T@@33 (MapType0TypeInv0 (type a@@21)))) (=> (and (= (type a@@21) (MapType0Type T@@33 boolType)) (= (type b@@16) (MapType0Type T@@33 boolType))) (and (=> (|Set#Subset| a@@21 b@@16) (forall ((o@@23 T@U) ) (!  (=> (and (= (type o@@23) T@@33) (U_2_bool (MapType0Select a@@21 o@@23))) (U_2_bool (MapType0Select b@@16 o@@23))) :qid |DafnyPre.673:32| :skolemid |460| :pattern ( (MapType0Select a@@21 o@@23)) :pattern ( (MapType0Select b@@16 o@@23)) ))) (=> (forall ((o@@24 T@U) ) (!  (=> (and (= (type o@@24) T@@33) (U_2_bool (MapType0Select a@@21 o@@24))) (U_2_bool (MapType0Select b@@16 o@@24))) :qid |DafnyPre.673:32| :skolemid |460| :pattern ( (MapType0Select a@@21 o@@24)) :pattern ( (MapType0Select b@@16 o@@24)) )) (|Set#Subset| a@@21 b@@16))))) :qid |DafnyPre.672:17| :skolemid |461| :pattern ( (|Set#Subset| a@@21 b@@16)) )))
(assert (forall ((a@@22 T@U) (b@@17 T@U) ) (! (let ((T@@34 (MapType0TypeInv0 (type a@@22)))) (=> (and (= (type a@@22) (MapType0Type T@@34 boolType)) (= (type b@@17) (MapType0Type T@@34 boolType))) (and (=> (|Set#Equal| a@@22 b@@17) (forall ((o@@25 T@U) ) (!  (=> (= (type o@@25) T@@34) (and (=> (U_2_bool (MapType0Select a@@22 o@@25)) (U_2_bool (MapType0Select b@@17 o@@25))) (=> (U_2_bool (MapType0Select b@@17 o@@25)) (U_2_bool (MapType0Select a@@22 o@@25))))) :qid |DafnyPre.681:31| :skolemid |462| :pattern ( (MapType0Select a@@22 o@@25)) :pattern ( (MapType0Select b@@17 o@@25)) ))) (=> (forall ((o@@26 T@U) ) (!  (=> (= (type o@@26) T@@34) (and (=> (U_2_bool (MapType0Select a@@22 o@@26)) (U_2_bool (MapType0Select b@@17 o@@26))) (=> (U_2_bool (MapType0Select b@@17 o@@26)) (U_2_bool (MapType0Select a@@22 o@@26))))) :qid |DafnyPre.681:31| :skolemid |462| :pattern ( (MapType0Select a@@22 o@@26)) :pattern ( (MapType0Select b@@17 o@@26)) )) (|Set#Equal| a@@22 b@@17))))) :qid |DafnyPre.680:17| :skolemid |463| :pattern ( (|Set#Equal| a@@22 b@@17)) )))
(assert (forall ((a@@23 T@U) (b@@18 T@U) ) (! (let ((T@@35 (MapType0TypeInv0 (type a@@23)))) (=> (and (and (= (type a@@23) (MapType0Type T@@35 boolType)) (= (type b@@18) (MapType0Type T@@35 boolType))) (|Set#Equal| a@@23 b@@18)) (= a@@23 b@@18))) :qid |DafnyPre.682:17| :skolemid |464| :pattern ( (|Set#Equal| a@@23 b@@18)) )))
(assert (forall ((a@@24 T@U) (b@@19 T@U) ) (! (let ((T@@36 (MapType0TypeInv0 (type a@@24)))) (=> (and (= (type a@@24) (MapType0Type T@@36 boolType)) (= (type b@@19) (MapType0Type T@@36 boolType))) (and (=> (|Set#Disjoint| a@@24 b@@19) (forall ((o@@27 T@U) ) (!  (=> (= (type o@@27) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@27))) (not (U_2_bool (MapType0Select b@@19 o@@27))))) :qid |DafnyPre.687:34| :skolemid |465| :pattern ( (MapType0Select a@@24 o@@27)) :pattern ( (MapType0Select b@@19 o@@27)) ))) (=> (forall ((o@@28 T@U) ) (!  (=> (= (type o@@28) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@28))) (not (U_2_bool (MapType0Select b@@19 o@@28))))) :qid |DafnyPre.687:34| :skolemid |465| :pattern ( (MapType0Select a@@24 o@@28)) :pattern ( (MapType0Select b@@19 o@@28)) )) (|Set#Disjoint| a@@24 b@@19))))) :qid |DafnyPre.686:18| :skolemid |466| :pattern ( (|Set#Disjoint| a@@24 b@@19)) )))
(assert (forall ((T@@37 T@T) ) (! (= (type (|ISet#Empty| T@@37)) (MapType0Type T@@37 boolType)) :qid |funType:ISet#Empty| :pattern ( (|ISet#Empty| T@@37)) )))
(assert (forall ((o@@29 T@U) ) (! (let ((T@@38 (type o@@29))) (not (U_2_bool (MapType0Select (|ISet#Empty| T@@38) o@@29)))) :qid |DafnyPre.696:18| :skolemid |467| :pattern ( (let ((T@@38 (type o@@29))) (MapType0Select (|ISet#Empty| T@@38) o@@29))) )))
(assert (forall ((arg0@@71 T@U) (arg1@@27 T@U) ) (! (let ((T@@39 (type arg1@@27))) (= (type (|ISet#UnionOne| arg0@@71 arg1@@27)) (MapType0Type T@@39 boolType))) :qid |funType:ISet#UnionOne| :pattern ( (|ISet#UnionOne| arg0@@71 arg1@@27)) )))
(assert (forall ((a@@25 T@U) (x@@22 T@U) (o@@30 T@U) ) (! (let ((T@@40 (type x@@22))) (=> (and (= (type a@@25) (MapType0Type T@@40 boolType)) (= (type o@@30) T@@40)) (and (=> (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)) (or (= o@@30 x@@22) (U_2_bool (MapType0Select a@@25 o@@30)))) (=> (or (= o@@30 x@@22) (U_2_bool (MapType0Select a@@25 o@@30))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)))))) :qid |DafnyPre.703:18| :skolemid |468| :pattern ( (MapType0Select (|ISet#UnionOne| a@@25 x@@22) o@@30)) )))
(assert (forall ((a@@26 T@U) (x@@23 T@U) ) (! (let ((T@@41 (type x@@23))) (=> (= (type a@@26) (MapType0Type T@@41 boolType)) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@26 x@@23) x@@23)))) :qid |DafnyPre.705:18| :skolemid |469| :pattern ( (|ISet#UnionOne| a@@26 x@@23)) )))
(assert (forall ((a@@27 T@U) (x@@24 T@U) (y@@5 T@U) ) (! (let ((T@@42 (type x@@24))) (=> (and (and (= (type a@@27) (MapType0Type T@@42 boolType)) (= (type y@@5) T@@42)) (U_2_bool (MapType0Select a@@27 y@@5))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@27 x@@24) y@@5)))) :qid |DafnyPre.707:18| :skolemid |470| :pattern ( (|ISet#UnionOne| a@@27 x@@24) (MapType0Select a@@27 y@@5)) )))
(assert (forall ((arg0@@72 T@U) (arg1@@28 T@U) ) (! (let ((T@@43 (MapType0TypeInv0 (type arg0@@72)))) (= (type (|ISet#Union| arg0@@72 arg1@@28)) (MapType0Type T@@43 boolType))) :qid |funType:ISet#Union| :pattern ( (|ISet#Union| arg0@@72 arg1@@28)) )))
(assert (forall ((a@@28 T@U) (b@@20 T@U) (o@@31 T@U) ) (! (let ((T@@44 (type o@@31))) (=> (and (= (type a@@28) (MapType0Type T@@44 boolType)) (= (type b@@20) (MapType0Type T@@44 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)) (or (U_2_bool (MapType0Select a@@28 o@@31)) (U_2_bool (MapType0Select b@@20 o@@31)))) (=> (or (U_2_bool (MapType0Select a@@28 o@@31)) (U_2_bool (MapType0Select b@@20 o@@31))) (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)))))) :qid |DafnyPre.711:18| :skolemid |471| :pattern ( (MapType0Select (|ISet#Union| a@@28 b@@20) o@@31)) )))
(assert (forall ((a@@29 T@U) (b@@21 T@U) (y@@6 T@U) ) (! (let ((T@@45 (type y@@6))) (=> (and (and (= (type a@@29) (MapType0Type T@@45 boolType)) (= (type b@@21) (MapType0Type T@@45 boolType))) (U_2_bool (MapType0Select a@@29 y@@6))) (U_2_bool (MapType0Select (|ISet#Union| a@@29 b@@21) y@@6)))) :qid |DafnyPre.713:18| :skolemid |472| :pattern ( (|ISet#Union| a@@29 b@@21) (MapType0Select a@@29 y@@6)) )))
(assert (forall ((a@@30 T@U) (b@@22 T@U) (y@@7 T@U) ) (! (let ((T@@46 (type y@@7))) (=> (and (and (= (type a@@30) (MapType0Type T@@46 boolType)) (= (type b@@22) (MapType0Type T@@46 boolType))) (U_2_bool (MapType0Select b@@22 y@@7))) (U_2_bool (MapType0Select (|ISet#Union| a@@30 b@@22) y@@7)))) :qid |DafnyPre.715:18| :skolemid |473| :pattern ( (|ISet#Union| a@@30 b@@22) (MapType0Select b@@22 y@@7)) )))
(assert (forall ((arg0@@73 T@U) (arg1@@29 T@U) ) (! (let ((T@@47 (MapType0TypeInv0 (type arg0@@73)))) (= (type (|ISet#Difference| arg0@@73 arg1@@29)) (MapType0Type T@@47 boolType))) :qid |funType:ISet#Difference| :pattern ( (|ISet#Difference| arg0@@73 arg1@@29)) )))
(assert (forall ((a@@31 T@U) (b@@23 T@U) ) (! (let ((T@@48 (MapType0TypeInv0 (type a@@31)))) (=> (and (and (= (type a@@31) (MapType0Type T@@48 boolType)) (= (type b@@23) (MapType0Type T@@48 boolType))) (|ISet#Disjoint| a@@31 b@@23)) (and (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) a@@31) b@@23) (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) b@@23) a@@31)))) :qid |DafnyPre.717:18| :skolemid |474| :pattern ( (|ISet#Union| a@@31 b@@23)) )))
(assert (forall ((arg0@@74 T@U) (arg1@@30 T@U) ) (! (let ((T@@49 (MapType0TypeInv0 (type arg0@@74)))) (= (type (|ISet#Intersection| arg0@@74 arg1@@30)) (MapType0Type T@@49 boolType))) :qid |funType:ISet#Intersection| :pattern ( (|ISet#Intersection| arg0@@74 arg1@@30)) )))
(assert (forall ((a@@32 T@U) (b@@24 T@U) (o@@32 T@U) ) (! (let ((T@@50 (type o@@32))) (=> (and (= (type a@@32) (MapType0Type T@@50 boolType)) (= (type b@@24) (MapType0Type T@@50 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)) (and (U_2_bool (MapType0Select a@@32 o@@32)) (U_2_bool (MapType0Select b@@24 o@@32)))) (=> (and (U_2_bool (MapType0Select a@@32 o@@32)) (U_2_bool (MapType0Select b@@24 o@@32))) (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)))))) :qid |DafnyPre.727:18| :skolemid |475| :pattern ( (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@32)) )))
(assert (forall ((a@@33 T@U) (b@@25 T@U) ) (! (let ((T@@51 (MapType0TypeInv0 (type a@@33)))) (=> (and (= (type a@@33) (MapType0Type T@@51 boolType)) (= (type b@@25) (MapType0Type T@@51 boolType))) (= (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25) (|ISet#Union| a@@33 b@@25)))) :qid |DafnyPre.730:18| :skolemid |476| :pattern ( (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25)) )))
(assert (forall ((a@@34 T@U) (b@@26 T@U) ) (! (let ((T@@52 (MapType0TypeInv0 (type a@@34)))) (=> (and (= (type a@@34) (MapType0Type T@@52 boolType)) (= (type b@@26) (MapType0Type T@@52 boolType))) (= (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26)) (|ISet#Union| a@@34 b@@26)))) :qid |DafnyPre.732:18| :skolemid |477| :pattern ( (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26))) )))
(assert (forall ((a@@35 T@U) (b@@27 T@U) ) (! (let ((T@@53 (MapType0TypeInv0 (type a@@35)))) (=> (and (= (type a@@35) (MapType0Type T@@53 boolType)) (= (type b@@27) (MapType0Type T@@53 boolType))) (= (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27) (|ISet#Intersection| a@@35 b@@27)))) :qid |DafnyPre.734:18| :skolemid |478| :pattern ( (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27)) )))
(assert (forall ((a@@36 T@U) (b@@28 T@U) ) (! (let ((T@@54 (MapType0TypeInv0 (type a@@36)))) (=> (and (= (type a@@36) (MapType0Type T@@54 boolType)) (= (type b@@28) (MapType0Type T@@54 boolType))) (= (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28)) (|ISet#Intersection| a@@36 b@@28)))) :qid |DafnyPre.736:18| :skolemid |479| :pattern ( (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28))) )))
(assert (forall ((a@@37 T@U) (b@@29 T@U) (o@@33 T@U) ) (! (let ((T@@55 (type o@@33))) (=> (and (= (type a@@37) (MapType0Type T@@55 boolType)) (= (type b@@29) (MapType0Type T@@55 boolType))) (and (=> (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)) (and (U_2_bool (MapType0Select a@@37 o@@33)) (not (U_2_bool (MapType0Select b@@29 o@@33))))) (=> (and (U_2_bool (MapType0Select a@@37 o@@33)) (not (U_2_bool (MapType0Select b@@29 o@@33)))) (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)))))) :qid |DafnyPre.741:18| :skolemid |480| :pattern ( (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@33)) )))
(assert (forall ((a@@38 T@U) (b@@30 T@U) (y@@8 T@U) ) (! (let ((T@@56 (type y@@8))) (=> (and (and (= (type a@@38) (MapType0Type T@@56 boolType)) (= (type b@@30) (MapType0Type T@@56 boolType))) (U_2_bool (MapType0Select b@@30 y@@8))) (not (U_2_bool (MapType0Select (|ISet#Difference| a@@38 b@@30) y@@8))))) :qid |DafnyPre.743:18| :skolemid |481| :pattern ( (|ISet#Difference| a@@38 b@@30) (MapType0Select b@@30 y@@8)) )))
(assert (forall ((a@@39 T@U) (b@@31 T@U) ) (! (let ((T@@57 (MapType0TypeInv0 (type a@@39)))) (=> (and (= (type a@@39) (MapType0Type T@@57 boolType)) (= (type b@@31) (MapType0Type T@@57 boolType))) (and (=> (|ISet#Subset| a@@39 b@@31) (forall ((o@@34 T@U) ) (!  (=> (and (= (type o@@34) T@@57) (U_2_bool (MapType0Select a@@39 o@@34))) (U_2_bool (MapType0Select b@@31 o@@34))) :qid |DafnyPre.748:33| :skolemid |482| :pattern ( (MapType0Select a@@39 o@@34)) :pattern ( (MapType0Select b@@31 o@@34)) ))) (=> (forall ((o@@35 T@U) ) (!  (=> (and (= (type o@@35) T@@57) (U_2_bool (MapType0Select a@@39 o@@35))) (U_2_bool (MapType0Select b@@31 o@@35))) :qid |DafnyPre.748:33| :skolemid |482| :pattern ( (MapType0Select a@@39 o@@35)) :pattern ( (MapType0Select b@@31 o@@35)) )) (|ISet#Subset| a@@39 b@@31))))) :qid |DafnyPre.747:17| :skolemid |483| :pattern ( (|ISet#Subset| a@@39 b@@31)) )))
(assert (forall ((a@@40 T@U) (b@@32 T@U) ) (! (let ((T@@58 (MapType0TypeInv0 (type a@@40)))) (=> (and (= (type a@@40) (MapType0Type T@@58 boolType)) (= (type b@@32) (MapType0Type T@@58 boolType))) (and (=> (|ISet#Equal| a@@40 b@@32) (forall ((o@@36 T@U) ) (!  (=> (= (type o@@36) T@@58) (and (=> (U_2_bool (MapType0Select a@@40 o@@36)) (U_2_bool (MapType0Select b@@32 o@@36))) (=> (U_2_bool (MapType0Select b@@32 o@@36)) (U_2_bool (MapType0Select a@@40 o@@36))))) :qid |DafnyPre.756:32| :skolemid |484| :pattern ( (MapType0Select a@@40 o@@36)) :pattern ( (MapType0Select b@@32 o@@36)) ))) (=> (forall ((o@@37 T@U) ) (!  (=> (= (type o@@37) T@@58) (and (=> (U_2_bool (MapType0Select a@@40 o@@37)) (U_2_bool (MapType0Select b@@32 o@@37))) (=> (U_2_bool (MapType0Select b@@32 o@@37)) (U_2_bool (MapType0Select a@@40 o@@37))))) :qid |DafnyPre.756:32| :skolemid |484| :pattern ( (MapType0Select a@@40 o@@37)) :pattern ( (MapType0Select b@@32 o@@37)) )) (|ISet#Equal| a@@40 b@@32))))) :qid |DafnyPre.755:17| :skolemid |485| :pattern ( (|ISet#Equal| a@@40 b@@32)) )))
(assert (forall ((a@@41 T@U) (b@@33 T@U) ) (! (let ((T@@59 (MapType0TypeInv0 (type a@@41)))) (=> (and (and (= (type a@@41) (MapType0Type T@@59 boolType)) (= (type b@@33) (MapType0Type T@@59 boolType))) (|ISet#Equal| a@@41 b@@33)) (= a@@41 b@@33))) :qid |DafnyPre.757:17| :skolemid |486| :pattern ( (|ISet#Equal| a@@41 b@@33)) )))
(assert (forall ((a@@42 T@U) (b@@34 T@U) ) (! (let ((T@@60 (MapType0TypeInv0 (type a@@42)))) (=> (and (= (type a@@42) (MapType0Type T@@60 boolType)) (= (type b@@34) (MapType0Type T@@60 boolType))) (and (=> (|ISet#Disjoint| a@@42 b@@34) (forall ((o@@38 T@U) ) (!  (=> (= (type o@@38) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@38))) (not (U_2_bool (MapType0Select b@@34 o@@38))))) :qid |DafnyPre.762:35| :skolemid |487| :pattern ( (MapType0Select a@@42 o@@38)) :pattern ( (MapType0Select b@@34 o@@38)) ))) (=> (forall ((o@@39 T@U) ) (!  (=> (= (type o@@39) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@39))) (not (U_2_bool (MapType0Select b@@34 o@@39))))) :qid |DafnyPre.762:35| :skolemid |487| :pattern ( (MapType0Select a@@42 o@@39)) :pattern ( (MapType0Select b@@34 o@@39)) )) (|ISet#Disjoint| a@@42 b@@34))))) :qid |DafnyPre.761:18| :skolemid |488| :pattern ( (|ISet#Disjoint| a@@42 b@@34)) )))
(assert (forall ((a@@43 Int) (b@@35 Int) ) (!  (and (=> (<= a@@43 b@@35) (= (|Math#min| a@@43 b@@35) a@@43)) (=> (= (|Math#min| a@@43 b@@35) a@@43) (<= a@@43 b@@35))) :qid |DafnyPre.769:15| :skolemid |489| :pattern ( (|Math#min| a@@43 b@@35)) )))
(assert (forall ((a@@44 Int) (b@@36 Int) ) (!  (and (=> (<= b@@36 a@@44) (= (|Math#min| a@@44 b@@36) b@@36)) (=> (= (|Math#min| a@@44 b@@36) b@@36) (<= b@@36 a@@44))) :qid |DafnyPre.770:15| :skolemid |490| :pattern ( (|Math#min| a@@44 b@@36)) )))
(assert (forall ((a@@45 Int) (b@@37 Int) ) (!  (or (= (|Math#min| a@@45 b@@37) a@@45) (= (|Math#min| a@@45 b@@37) b@@37)) :qid |DafnyPre.771:15| :skolemid |491| :pattern ( (|Math#min| a@@45 b@@37)) )))
(assert (forall ((a@@46 Int) ) (!  (=> (<= 0 a@@46) (= (|Math#clip| a@@46) a@@46)) :qid |DafnyPre.774:15| :skolemid |492| :pattern ( (|Math#clip| a@@46)) )))
(assert (forall ((a@@47 Int) ) (!  (=> (< a@@47 0) (= (|Math#clip| a@@47) 0)) :qid |DafnyPre.775:15| :skolemid |493| :pattern ( (|Math#clip| a@@47)) )))
(assert (forall ((ms T@U) ) (! (let ((T@@61 (MapType0TypeInv0 (type ms)))) (=> (= (type ms) (MapType0Type T@@61 intType)) (and (=> ($IsGoodMultiSet ms) (forall ((bx@@31 T@U) ) (!  (=> (= (type bx@@31) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@31))) (<= (U_2_int (MapType0Select ms bx@@31)) (|MultiSet#Card| ms)))) :qid |DafnyPre.783:11| :skolemid |494| :pattern ( (MapType0Select ms bx@@31)) ))) (=> (forall ((bx@@32 T@U) ) (!  (=> (= (type bx@@32) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@32))) (<= (U_2_int (MapType0Select ms bx@@32)) (|MultiSet#Card| ms)))) :qid |DafnyPre.783:11| :skolemid |494| :pattern ( (MapType0Select ms bx@@32)) )) ($IsGoodMultiSet ms))))) :qid |DafnyPre.781:18| :skolemid |495| :pattern ( ($IsGoodMultiSet ms)) )))
(assert (forall ((s@@5 T@U) ) (! (let ((T@@62 (MapType0TypeInv0 (type s@@5)))) (=> (= (type s@@5) (MapType0Type T@@62 intType)) (<= 0 (|MultiSet#Card| s@@5)))) :qid |DafnyPre.786:18| :skolemid |496| :pattern ( (|MultiSet#Card| s@@5)) )))
(assert (forall ((s@@6 T@U) (x@@25 T@U) (n@@5 T@U) ) (! (let ((T@@63 (type x@@25))) (=> (and (and (= (type s@@6) (MapType0Type T@@63 intType)) (= (type n@@5) intType)) (<= 0 (U_2_int n@@5))) (= (|MultiSet#Card| (MapType0Store s@@6 x@@25 n@@5)) (+ (- (|MultiSet#Card| s@@6) (U_2_int (MapType0Select s@@6 x@@25))) (U_2_int n@@5))))) :qid |DafnyPre.787:18| :skolemid |497| :pattern ( (|MultiSet#Card| (MapType0Store s@@6 x@@25 n@@5))) )))
(assert (forall ((T@@64 T@T) ) (! (= (type (|MultiSet#Empty| T@@64)) (MapType0Type T@@64 intType)) :qid |funType:MultiSet#Empty| :pattern ( (|MultiSet#Empty| T@@64)) )))
(assert (forall ((o@@40 T@U) ) (! (let ((T@@65 (type o@@40))) (= (U_2_int (MapType0Select (|MultiSet#Empty| T@@65) o@@40)) 0)) :qid |DafnyPre.791:18| :skolemid |498| :pattern ( (let ((T@@65 (type o@@40))) (MapType0Select (|MultiSet#Empty| T@@65) o@@40))) )))
(assert (forall ((s@@7 T@U) ) (! (let ((T@@66 (MapType0TypeInv0 (type s@@7)))) (=> (= (type s@@7) (MapType0Type T@@66 intType)) (and (and (=> (= (|MultiSet#Card| s@@7) 0) (= s@@7 (|MultiSet#Empty| T@@66))) (=> (= s@@7 (|MultiSet#Empty| T@@66)) (= (|MultiSet#Card| s@@7) 0))) (=> (not (= (|MultiSet#Card| s@@7) 0)) (exists ((x@@26 T@U) ) (!  (and (= (type x@@26) T@@66) (< 0 (U_2_int (MapType0Select s@@7 x@@26)))) :qid |DafnyPre.794:38| :skolemid |499| :no-pattern (type x@@26) :no-pattern (U_2_int x@@26) :no-pattern (U_2_bool x@@26) )))))) :qid |DafnyPre.792:18| :skolemid |500| :pattern ( (|MultiSet#Card| s@@7)) )))
(assert (forall ((arg0@@75 T@U) ) (! (let ((T@@67 (type arg0@@75))) (= (type (|MultiSet#Singleton| arg0@@75)) (MapType0Type T@@67 intType))) :qid |funType:MultiSet#Singleton| :pattern ( (|MultiSet#Singleton| arg0@@75)) )))
(assert (forall ((r@@4 T@U) (o@@41 T@U) ) (! (let ((T@@68 (type r@@4))) (=> (= (type o@@41) T@@68) (and (and (=> (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 1) (= r@@4 o@@41)) (=> (= r@@4 o@@41) (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 1))) (and (=> (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 0) (not (= r@@4 o@@41))) (=> (not (= r@@4 o@@41)) (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) 0)))))) :qid |DafnyPre.797:18| :skolemid |501| :pattern ( (MapType0Select (|MultiSet#Singleton| r@@4) o@@41)) )))
(assert (forall ((arg0@@76 T@U) (arg1@@31 T@U) ) (! (let ((T@@69 (type arg1@@31))) (= (type (|MultiSet#UnionOne| arg0@@76 arg1@@31)) (MapType0Type T@@69 intType))) :qid |funType:MultiSet#UnionOne| :pattern ( (|MultiSet#UnionOne| arg0@@76 arg1@@31)) )))
(assert (forall ((r@@5 T@U) ) (! (let ((T@@70 (type r@@5))) (= (|MultiSet#Singleton| r@@5) (|MultiSet#UnionOne| (|MultiSet#Empty| T@@70) r@@5))) :qid |DafnyPre.799:18| :skolemid |502| :pattern ( (|MultiSet#Singleton| r@@5)) )))
(assert (forall ((a@@48 T@U) (x@@27 T@U) (o@@42 T@U) ) (! (let ((T@@71 (type x@@27))) (=> (and (= (type a@@48) (MapType0Type T@@71 intType)) (= (type o@@42) T@@71)) (and (=> (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42))) (or (= o@@42 x@@27) (< 0 (U_2_int (MapType0Select a@@48 o@@42))))) (=> (or (= o@@42 x@@27) (< 0 (U_2_int (MapType0Select a@@48 o@@42)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42))))))) :qid |DafnyPre.803:18| :skolemid |503| :pattern ( (MapType0Select (|MultiSet#UnionOne| a@@48 x@@27) o@@42)) )))
(assert (forall ((a@@49 T@U) (x@@28 T@U) ) (! (let ((T@@72 (type x@@28))) (=> (= (type a@@49) (MapType0Type T@@72 intType)) (= (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@49 x@@28) x@@28)) (+ (U_2_int (MapType0Select a@@49 x@@28)) 1)))) :qid |DafnyPre.806:18| :skolemid |504| :pattern ( (|MultiSet#UnionOne| a@@49 x@@28)) )))
(assert (forall ((a@@50 T@U) (x@@29 T@U) (y@@9 T@U) ) (! (let ((T@@73 (type x@@29))) (=> (and (and (= (type a@@50) (MapType0Type T@@73 intType)) (= (type y@@9) T@@73)) (< 0 (U_2_int (MapType0Select a@@50 y@@9)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@50 x@@29) y@@9))))) :qid |DafnyPre.809:18| :skolemid |505| :pattern ( (|MultiSet#UnionOne| a@@50 x@@29) (MapType0Select a@@50 y@@9)) )))
(assert (forall ((a@@51 T@U) (x@@30 T@U) (y@@10 T@U) ) (! (let ((T@@74 (type x@@30))) (=> (and (and (= (type a@@51) (MapType0Type T@@74 intType)) (= (type y@@10) T@@74)) (not (= x@@30 y@@10))) (= (U_2_int (MapType0Select a@@51 y@@10)) (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@51 x@@30) y@@10))))) :qid |DafnyPre.812:18| :skolemid |506| :pattern ( (|MultiSet#UnionOne| a@@51 x@@30) (MapType0Select a@@51 y@@10)) )))
(assert (forall ((a@@52 T@U) (x@@31 T@U) ) (! (let ((T@@75 (type x@@31))) (=> (= (type a@@52) (MapType0Type T@@75 intType)) (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@31)) (+ (|MultiSet#Card| a@@52) 1)))) :qid |DafnyPre.814:18| :skolemid |507| :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@31))) )))
(assert (forall ((arg0@@77 T@U) (arg1@@32 T@U) ) (! (let ((T@@76 (MapType0TypeInv0 (type arg0@@77)))) (= (type (|MultiSet#Union| arg0@@77 arg1@@32)) (MapType0Type T@@76 intType))) :qid |funType:MultiSet#Union| :pattern ( (|MultiSet#Union| arg0@@77 arg1@@32)) )))
(assert (forall ((a@@53 T@U) (b@@38 T@U) (o@@43 T@U) ) (! (let ((T@@77 (type o@@43))) (=> (and (= (type a@@53) (MapType0Type T@@77 intType)) (= (type b@@38) (MapType0Type T@@77 intType))) (= (U_2_int (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@43)) (+ (U_2_int (MapType0Select a@@53 o@@43)) (U_2_int (MapType0Select b@@38 o@@43)))))) :qid |DafnyPre.820:18| :skolemid |508| :pattern ( (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@43)) )))
(assert (forall ((a@@54 T@U) (b@@39 T@U) ) (! (let ((T@@78 (MapType0TypeInv0 (type a@@54)))) (=> (and (= (type a@@54) (MapType0Type T@@78 intType)) (= (type b@@39) (MapType0Type T@@78 intType))) (= (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39)) (+ (|MultiSet#Card| a@@54) (|MultiSet#Card| b@@39))))) :qid |DafnyPre.822:18| :skolemid |509| :pattern ( (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39))) )))
(assert (forall ((arg0@@78 T@U) (arg1@@33 T@U) ) (! (let ((T@@79 (MapType0TypeInv0 (type arg0@@78)))) (= (type (|MultiSet#Intersection| arg0@@78 arg1@@33)) (MapType0Type T@@79 intType))) :qid |funType:MultiSet#Intersection| :pattern ( (|MultiSet#Intersection| arg0@@78 arg1@@33)) )))
(assert (forall ((a@@55 T@U) (b@@40 T@U) (o@@44 T@U) ) (! (let ((T@@80 (type o@@44))) (=> (and (= (type a@@55) (MapType0Type T@@80 intType)) (= (type b@@40) (MapType0Type T@@80 intType))) (= (U_2_int (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@44)) (|Math#min| (U_2_int (MapType0Select a@@55 o@@44)) (U_2_int (MapType0Select b@@40 o@@44)))))) :qid |DafnyPre.826:18| :skolemid |510| :pattern ( (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@44)) )))
(assert (forall ((a@@56 T@U) (b@@41 T@U) ) (! (let ((T@@81 (MapType0TypeInv0 (type a@@56)))) (=> (and (= (type a@@56) (MapType0Type T@@81 intType)) (= (type b@@41) (MapType0Type T@@81 intType))) (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41) (|MultiSet#Intersection| a@@56 b@@41)))) :qid |DafnyPre.830:18| :skolemid |511| :pattern ( (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41)) )))
(assert (forall ((a@@57 T@U) (b@@42 T@U) ) (! (let ((T@@82 (MapType0TypeInv0 (type a@@57)))) (=> (and (= (type a@@57) (MapType0Type T@@82 intType)) (= (type b@@42) (MapType0Type T@@82 intType))) (= (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42)) (|MultiSet#Intersection| a@@57 b@@42)))) :qid |DafnyPre.832:18| :skolemid |512| :pattern ( (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42))) )))
(assert (forall ((arg0@@79 T@U) (arg1@@34 T@U) ) (! (let ((T@@83 (MapType0TypeInv0 (type arg0@@79)))) (= (type (|MultiSet#Difference| arg0@@79 arg1@@34)) (MapType0Type T@@83 intType))) :qid |funType:MultiSet#Difference| :pattern ( (|MultiSet#Difference| arg0@@79 arg1@@34)) )))
(assert (forall ((a@@58 T@U) (b@@43 T@U) (o@@45 T@U) ) (! (let ((T@@84 (type o@@45))) (=> (and (= (type a@@58) (MapType0Type T@@84 intType)) (= (type b@@43) (MapType0Type T@@84 intType))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@45)) (|Math#clip| (- (U_2_int (MapType0Select a@@58 o@@45)) (U_2_int (MapType0Select b@@43 o@@45))))))) :qid |DafnyPre.837:18| :skolemid |513| :pattern ( (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@45)) )))
(assert (forall ((a@@59 T@U) (b@@44 T@U) (y@@11 T@U) ) (! (let ((T@@85 (type y@@11))) (=> (and (and (= (type a@@59) (MapType0Type T@@85 intType)) (= (type b@@44) (MapType0Type T@@85 intType))) (<= (U_2_int (MapType0Select a@@59 y@@11)) (U_2_int (MapType0Select b@@44 y@@11)))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@59 b@@44) y@@11)) 0))) :qid |DafnyPre.839:18| :skolemid |514| :pattern ( (|MultiSet#Difference| a@@59 b@@44) (MapType0Select b@@44 y@@11) (MapType0Select a@@59 y@@11)) )))
(assert (forall ((a@@60 T@U) (b@@45 T@U) ) (! (let ((T@@86 (MapType0TypeInv0 (type a@@60)))) (=> (and (= (type a@@60) (MapType0Type T@@86 intType)) (= (type b@@45) (MapType0Type T@@86 intType))) (and (= (+ (+ (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (|MultiSet#Card| (|MultiSet#Difference| b@@45 a@@60))) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45)))) (|MultiSet#Card| (|MultiSet#Union| a@@60 b@@45))) (= (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (- (|MultiSet#Card| a@@60) (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45))))))) :qid |DafnyPre.841:18| :skolemid |515| :pattern ( (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45))) )))
(assert (forall ((a@@61 T@U) (b@@46 T@U) ) (! (let ((T@@87 (MapType0TypeInv0 (type a@@61)))) (=> (and (= (type a@@61) (MapType0Type T@@87 intType)) (= (type b@@46) (MapType0Type T@@87 intType))) (and (=> (|MultiSet#Subset| a@@61 b@@46) (forall ((o@@46 T@U) ) (!  (=> (= (type o@@46) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@46)) (U_2_int (MapType0Select b@@46 o@@46)))) :qid |DafnyPre.851:37| :skolemid |516| :pattern ( (MapType0Select a@@61 o@@46)) :pattern ( (MapType0Select b@@46 o@@46)) ))) (=> (forall ((o@@47 T@U) ) (!  (=> (= (type o@@47) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@47)) (U_2_int (MapType0Select b@@46 o@@47)))) :qid |DafnyPre.851:37| :skolemid |516| :pattern ( (MapType0Select a@@61 o@@47)) :pattern ( (MapType0Select b@@46 o@@47)) )) (|MultiSet#Subset| a@@61 b@@46))))) :qid |DafnyPre.850:17| :skolemid |517| :pattern ( (|MultiSet#Subset| a@@61 b@@46)) )))
(assert (forall ((a@@62 T@U) (b@@47 T@U) ) (! (let ((T@@88 (MapType0TypeInv0 (type a@@62)))) (=> (and (= (type a@@62) (MapType0Type T@@88 intType)) (= (type b@@47) (MapType0Type T@@88 intType))) (and (=> (|MultiSet#Equal| a@@62 b@@47) (forall ((o@@48 T@U) ) (!  (=> (= (type o@@48) T@@88) (= (U_2_int (MapType0Select a@@62 o@@48)) (U_2_int (MapType0Select b@@47 o@@48)))) :qid |DafnyPre.855:36| :skolemid |518| :pattern ( (MapType0Select a@@62 o@@48)) :pattern ( (MapType0Select b@@47 o@@48)) ))) (=> (forall ((o@@49 T@U) ) (!  (=> (= (type o@@49) T@@88) (= (U_2_int (MapType0Select a@@62 o@@49)) (U_2_int (MapType0Select b@@47 o@@49)))) :qid |DafnyPre.855:36| :skolemid |518| :pattern ( (MapType0Select a@@62 o@@49)) :pattern ( (MapType0Select b@@47 o@@49)) )) (|MultiSet#Equal| a@@62 b@@47))))) :qid |DafnyPre.854:17| :skolemid |519| :pattern ( (|MultiSet#Equal| a@@62 b@@47)) )))
(assert (forall ((a@@63 T@U) (b@@48 T@U) ) (! (let ((T@@89 (MapType0TypeInv0 (type a@@63)))) (=> (and (and (= (type a@@63) (MapType0Type T@@89 intType)) (= (type b@@48) (MapType0Type T@@89 intType))) (|MultiSet#Equal| a@@63 b@@48)) (= a@@63 b@@48))) :qid |DafnyPre.857:17| :skolemid |520| :pattern ( (|MultiSet#Equal| a@@63 b@@48)) )))
(assert (forall ((a@@64 T@U) (b@@49 T@U) ) (! (let ((T@@90 (MapType0TypeInv0 (type a@@64)))) (=> (and (= (type a@@64) (MapType0Type T@@90 intType)) (= (type b@@49) (MapType0Type T@@90 intType))) (and (=> (|MultiSet#Disjoint| a@@64 b@@49) (forall ((o@@50 T@U) ) (!  (=> (= (type o@@50) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@50)) 0) (= (U_2_int (MapType0Select b@@49 o@@50)) 0))) :qid |DafnyPre.862:39| :skolemid |521| :pattern ( (MapType0Select a@@64 o@@50)) :pattern ( (MapType0Select b@@49 o@@50)) ))) (=> (forall ((o@@51 T@U) ) (!  (=> (= (type o@@51) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@51)) 0) (= (U_2_int (MapType0Select b@@49 o@@51)) 0))) :qid |DafnyPre.862:39| :skolemid |521| :pattern ( (MapType0Select a@@64 o@@51)) :pattern ( (MapType0Select b@@49 o@@51)) )) (|MultiSet#Disjoint| a@@64 b@@49))))) :qid |DafnyPre.861:18| :skolemid |522| :pattern ( (|MultiSet#Disjoint| a@@64 b@@49)) )))
(assert (forall ((arg0@@80 T@U) ) (! (let ((T@@91 (MapType0TypeInv0 (type arg0@@80)))) (= (type (|MultiSet#FromSet| arg0@@80)) (MapType0Type T@@91 intType))) :qid |funType:MultiSet#FromSet| :pattern ( (|MultiSet#FromSet| arg0@@80)) )))
(assert (forall ((s@@8 T@U) (a@@65 T@U) ) (! (let ((T@@92 (type a@@65))) (=> (= (type s@@8) (MapType0Type T@@92 boolType)) (and (and (=> (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0) (not (U_2_bool (MapType0Select s@@8 a@@65)))) (=> (not (U_2_bool (MapType0Select s@@8 a@@65))) (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0))) (and (=> (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1) (U_2_bool (MapType0Select s@@8 a@@65))) (=> (U_2_bool (MapType0Select s@@8 a@@65)) (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1)))))) :qid |DafnyPre.866:18| :skolemid |523| :pattern ( (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) )))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@93 (MapType0TypeInv0 (type s@@9)))) (=> (= (type s@@9) (MapType0Type T@@93 boolType)) (= (|MultiSet#Card| (|MultiSet#FromSet| s@@9)) (|Set#Card| s@@9)))) :qid |DafnyPre.869:18| :skolemid |524| :pattern ( (|MultiSet#Card| (|MultiSet#FromSet| s@@9))) )))
(assert (forall ((arg0@@81 T@U) ) (! (let ((T@@94 (SeqTypeInv0 (type arg0@@81)))) (= (type (|MultiSet#FromSeq| arg0@@81)) (MapType0Type T@@94 intType))) :qid |funType:MultiSet#FromSeq| :pattern ( (|MultiSet#FromSeq| arg0@@81)) )))
(assert (forall ((s@@10 T@U) ) (! (let ((T@@95 (SeqTypeInv0 (type s@@10)))) (=> (= (type s@@10) (SeqType T@@95)) ($IsGoodMultiSet (|MultiSet#FromSeq| s@@10)))) :qid |DafnyPre.875:18| :skolemid |525| :pattern ( (|MultiSet#FromSeq| s@@10)) )))
(assert (forall ((s@@11 T@U) ) (! (let ((T@@96 (SeqTypeInv0 (type s@@11)))) (=> (= (type s@@11) (SeqType T@@96)) (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@11)) (|Seq#Length| s@@11)))) :qid |DafnyPre.877:18| :skolemid |526| :pattern ( (|MultiSet#Card| (|MultiSet#FromSeq| s@@11))) )))
(assert (forall ((arg0@@82 T@U) (arg1@@35 T@U) ) (! (let ((T@@97 (type arg1@@35))) (= (type (|Seq#Build| arg0@@82 arg1@@35)) (SeqType T@@97))) :qid |funType:Seq#Build| :pattern ( (|Seq#Build| arg0@@82 arg1@@35)) )))
(assert (forall ((s@@12 T@U) (v@@25 T@U) ) (! (let ((T@@98 (type v@@25))) (=> (= (type s@@12) (SeqType T@@98)) (= (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@25)) (|MultiSet#UnionOne| (|MultiSet#FromSeq| s@@12) v@@25)))) :qid |DafnyPre.881:18| :skolemid |527| :pattern ( (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@25))) )))
(assert (forall ((T@@99 T@T) ) (! (= (type (|Seq#Empty| T@@99)) (SeqType T@@99)) :qid |funType:Seq#Empty| :pattern ( (|Seq#Empty| T@@99)) )))
(assert (forall ((T@@100 T@T) ) (! (= (|MultiSet#FromSeq| (|Seq#Empty| T@@100)) (|MultiSet#Empty| T@@100)) :skolemid |528| )))
(assert (forall ((arg0@@83 T@U) (arg1@@36 T@U) ) (! (let ((T@@101 (SeqTypeInv0 (type arg0@@83)))) (= (type (|Seq#Append| arg0@@83 arg1@@36)) (SeqType T@@101))) :qid |funType:Seq#Append| :pattern ( (|Seq#Append| arg0@@83 arg1@@36)) )))
(assert (forall ((a@@66 T@U) (b@@50 T@U) ) (! (let ((T@@102 (SeqTypeInv0 (type a@@66)))) (=> (and (= (type a@@66) (SeqType T@@102)) (= (type b@@50) (SeqType T@@102))) (= (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50)) (|MultiSet#Union| (|MultiSet#FromSeq| a@@66) (|MultiSet#FromSeq| b@@50))))) :qid |DafnyPre.888:18| :skolemid |529| :pattern ( (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50))) )))
(assert (forall ((arg0@@84 T@U) (arg1@@37 Int) (arg2@@1 T@U) ) (! (let ((T@@103 (type arg2@@1))) (= (type (|Seq#Update| arg0@@84 arg1@@37 arg2@@1)) (SeqType T@@103))) :qid |funType:Seq#Update| :pattern ( (|Seq#Update| arg0@@84 arg1@@37 arg2@@1)) )))
(assert (forall ((s@@13 T@U) (i@@8 Int) (v@@26 T@U) (x@@32 T@U) ) (! (let ((T@@104 (type v@@26))) (=> (and (and (= (type s@@13) (SeqType T@@104)) (= (type x@@32) T@@104)) (and (<= 0 i@@8) (< i@@8 (|Seq#Length| s@@13)))) (= (U_2_int (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@8 v@@26)) x@@32)) (U_2_int (MapType0Select (|MultiSet#Union| (|MultiSet#Difference| (|MultiSet#FromSeq| s@@13) (|MultiSet#Singleton| (|Seq#Index| s@@13 i@@8))) (|MultiSet#Singleton| v@@26)) x@@32))))) :qid |DafnyPre.893:18| :skolemid |530| :pattern ( (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@8 v@@26)) x@@32)) )))
(assert (forall ((s@@14 T@U) (x@@33 T@U) ) (! (let ((T@@105 (type x@@33))) (=> (= (type s@@14) (SeqType T@@105)) (and (=> (exists ((i@@9 Int) ) (!  (and (and (<= 0 i@@9) (< i@@9 (|Seq#Length| s@@14))) (= x@@33 (|Seq#Index| s@@14 i@@9))) :qid |DafnyPre.900:11| :skolemid |531| :pattern ( (|Seq#Index| s@@14 i@@9)) )) (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33)))) (=> (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33))) (exists ((i@@10 Int) ) (!  (and (and (<= 0 i@@10) (< i@@10 (|Seq#Length| s@@14))) (= x@@33 (|Seq#Index| s@@14 i@@10))) :qid |DafnyPre.900:11| :skolemid |531| :pattern ( (|Seq#Index| s@@14 i@@10)) )))))) :qid |DafnyPre.899:18| :skolemid |532| :pattern ( (MapType0Select (|MultiSet#FromSeq| s@@14) x@@33)) )))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@106 (SeqTypeInv0 (type s@@15)))) (=> (= (type s@@15) (SeqType T@@106)) (<= 0 (|Seq#Length| s@@15)))) :qid |DafnyPre.909:18| :skolemid |533| :pattern ( (|Seq#Length| s@@15)) )))
(assert (forall ((T@@107 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@107)) 0) :skolemid |534| :pattern ( (|Seq#Empty| T@@107)) )))
(assert (forall ((s@@16 T@U) ) (! (let ((T@@108 (SeqTypeInv0 (type s@@16)))) (=> (and (= (type s@@16) (SeqType T@@108)) (= (|Seq#Length| s@@16) 0)) (= s@@16 (|Seq#Empty| T@@108)))) :qid |DafnyPre.913:18| :skolemid |535| :pattern ( (|Seq#Length| s@@16)) )))
(assert (forall ((t@@23 T@U) (T@@109 T@T) ) (!  (=> (= (type t@@23) TyType) ($Is (|Seq#Empty| T@@109) t@@23)) :qid |DafnyPre.923:18| :skolemid |536| :pattern ( ($Is (|Seq#Empty| T@@109) t@@23)) )))
(assert (forall ((arg0@@85 T@U) ) (! (let ((T@@110 (type arg0@@85))) (= (type (|Seq#Singleton| arg0@@85)) (SeqType T@@110))) :qid |funType:Seq#Singleton| :pattern ( (|Seq#Singleton| arg0@@85)) )))
(assert (forall ((t@@24 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@24)) 1) :qid |DafnyPre.926:18| :skolemid |537| :pattern ( (|Seq#Length| (|Seq#Singleton| t@@24))) )))
(assert  (and (forall ((arg0@@86 T@U) ) (! (let ((T@@111 (SeqTypeInv0 (type arg0@@86)))) (= (type (|Seq#Build_inv0| arg0@@86)) (SeqType T@@111))) :qid |funType:Seq#Build_inv0| :pattern ( (|Seq#Build_inv0| arg0@@86)) )) (forall ((arg0@@87 T@U) ) (! (let ((T@@112 (SeqTypeInv0 (type arg0@@87)))) (= (type (|Seq#Build_inv1| arg0@@87)) T@@112)) :qid |funType:Seq#Build_inv1| :pattern ( (|Seq#Build_inv1| arg0@@87)) ))))
(assert (forall ((s@@17 T@U) (val@@5 T@U) ) (! (let ((T@@113 (type val@@5))) (=> (= (type s@@17) (SeqType T@@113)) (and (= (|Seq#Build_inv0| (|Seq#Build| s@@17 val@@5)) s@@17) (= (|Seq#Build_inv1| (|Seq#Build| s@@17 val@@5)) val@@5)))) :qid |DafnyPre.931:18| :skolemid |538| :pattern ( (|Seq#Build| s@@17 val@@5)) )))
(assert (forall ((s@@18 T@U) (v@@27 T@U) ) (! (let ((T@@114 (type v@@27))) (=> (= (type s@@18) (SeqType T@@114)) (= (|Seq#Length| (|Seq#Build| s@@18 v@@27)) (+ 1 (|Seq#Length| s@@18))))) :qid |DafnyPre.936:18| :skolemid |539| :pattern ( (|Seq#Build| s@@18 v@@27)) )))
(assert (forall ((s@@19 T@U) (i@@11 Int) (v@@28 T@U) ) (! (let ((T@@115 (type v@@28))) (=> (= (type s@@19) (SeqType T@@115)) (and (=> (= i@@11 (|Seq#Length| s@@19)) (= (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11) v@@28)) (=> (not (= i@@11 (|Seq#Length| s@@19))) (= (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11) (|Seq#Index| s@@19 i@@11)))))) :qid |DafnyPre.939:18| :skolemid |540| :pattern ( (|Seq#Index| (|Seq#Build| s@@19 v@@28) i@@11)) )))
(assert (forall ((s@@20 T@U) (bx@@33 T@U) (t@@25 T@U) ) (!  (=> (and (and (and (= (type s@@20) (SeqType BoxType)) (= (type bx@@33) BoxType)) (= (type t@@25) TyType)) (and ($Is s@@20 (TSeq t@@25)) ($IsBox bx@@33 t@@25))) ($Is (|Seq#Build| s@@20 bx@@33) (TSeq t@@25))) :qid |DafnyPre.944:15| :skolemid |541| :pattern ( ($Is (|Seq#Build| s@@20 bx@@33) (TSeq t@@25))) )))
(assert  (and (= (Ctor HandleTypeType) 20) (forall ((arg0@@88 T@U) (arg1@@38 T@U) (arg2@@2 Int) (arg3 T@U) ) (! (= (type (|Seq#Create| arg0@@88 arg1@@38 arg2@@2 arg3)) (SeqType BoxType)) :qid |funType:Seq#Create| :pattern ( (|Seq#Create| arg0@@88 arg1@@38 arg2@@2 arg3)) ))))
(assert (forall ((ty T@U) (heap T@U) (len Int) (init T@U) ) (!  (=> (and (and (and (= (type ty) TyType) (= (type heap) (MapType0Type refType MapType1Type))) (= (type init) HandleTypeType)) (and ($IsGoodHeap heap) (<= 0 len))) (= (|Seq#Length| (|Seq#Create| ty heap len init)) len)) :qid |DafnyPre.948:15| :skolemid |542| :pattern ( (|Seq#Length| (|Seq#Create| ty heap len init))) )))
(assert (forall ((arg0@@89 T@U) (arg1@@39 T@U) (arg2@@3 T@U) (arg3@@0 T@U) (arg4 T@U) ) (! (= (type (Apply1 arg0@@89 arg1@@39 arg2@@3 arg3@@0 arg4)) BoxType) :qid |funType:Apply1| :pattern ( (Apply1 arg0@@89 arg1@@39 arg2@@3 arg3@@0 arg4)) )))
(assert (forall ((ty@@0 T@U) (heap@@0 T@U) (len@@0 Int) (init@@0 T@U) (i@@12 Int) ) (!  (=> (and (and (and (= (type ty@@0) TyType) (= (type heap@@0) (MapType0Type refType MapType1Type))) (= (type init@@0) HandleTypeType)) (and (and ($IsGoodHeap heap@@0) (<= 0 i@@12)) (< i@@12 len@@0))) (= (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@12) (Apply1 TInt (TSeq ty@@0) heap@@0 init@@0 ($Box (int_2_U i@@12))))) :qid |DafnyPre.952:15| :skolemid |543| :pattern ( (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@12)) )))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (let ((T@@116 (SeqTypeInv0 (type s0)))) (=> (and (= (type s0) (SeqType T@@116)) (= (type s1) (SeqType T@@116))) (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1))))) :qid |DafnyPre.958:18| :skolemid |544| :pattern ( (|Seq#Length| (|Seq#Append| s0 s1))) )))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (t@@26 T@U) ) (!  (=> (and (and (and (= (type s0@@0) (SeqType BoxType)) (= (type s1@@0) (SeqType BoxType))) (= (type t@@26) TyType)) (and ($Is s0@@0 t@@26) ($Is s1@@0 t@@26))) ($Is (|Seq#Append| s0@@0 s1@@0) t@@26)) :qid |DafnyPre.962:15| :skolemid |545| :pattern ( ($Is (|Seq#Append| s0@@0 s1@@0) t@@26)) )))
(assert (forall ((t@@27 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@27) 0) t@@27) :qid |DafnyPre.966:18| :skolemid |546| :pattern ( (|Seq#Index| (|Seq#Singleton| t@@27) 0)) )))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (n@@6 Int) ) (! (let ((T@@117 (SeqTypeInv0 (type s0@@1)))) (=> (and (= (type s0@@1) (SeqType T@@117)) (= (type s1@@1) (SeqType T@@117))) (and (=> (< n@@6 (|Seq#Length| s0@@1)) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6) (|Seq#Index| s0@@1 n@@6))) (=> (<= (|Seq#Length| s0@@1) n@@6) (= (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6) (|Seq#Index| s1@@1 (- n@@6 (|Seq#Length| s0@@1)))))))) :qid |DafnyPre.967:18| :skolemid |547| :pattern ( (|Seq#Index| (|Seq#Append| s0@@1 s1@@1) n@@6)) )))
(assert (forall ((s@@21 T@U) (i@@13 Int) (v@@29 T@U) ) (! (let ((T@@118 (type v@@29))) (=> (= (type s@@21) (SeqType T@@118)) (=> (and (<= 0 i@@13) (< i@@13 (|Seq#Length| s@@21))) (= (|Seq#Length| (|Seq#Update| s@@21 i@@13 v@@29)) (|Seq#Length| s@@21))))) :qid |DafnyPre.972:18| :skolemid |548| :pattern ( (|Seq#Length| (|Seq#Update| s@@21 i@@13 v@@29))) )))
(assert (forall ((s@@22 T@U) (i@@14 Int) (v@@30 T@U) (n@@7 Int) ) (! (let ((T@@119 (type v@@30))) (=> (= (type s@@22) (SeqType T@@119)) (=> (and (<= 0 n@@7) (< n@@7 (|Seq#Length| s@@22))) (and (=> (= i@@14 n@@7) (= (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7) v@@30)) (=> (not (= i@@14 n@@7)) (= (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7) (|Seq#Index| s@@22 n@@7))))))) :qid |DafnyPre.974:18| :skolemid |549| :pattern ( (|Seq#Index| (|Seq#Update| s@@22 i@@14 v@@30) n@@7)) )))
(assert (forall ((s@@23 T@U) (x@@34 T@U) ) (! (let ((T@@120 (type x@@34))) (=> (= (type s@@23) (SeqType T@@120)) (and (=> (|Seq#Contains| s@@23 x@@34) (exists ((i@@15 Int) ) (!  (and (and (<= 0 i@@15) (< i@@15 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@15) x@@34)) :qid |DafnyPre.982:13| :skolemid |550| :pattern ( (|Seq#Index| s@@23 i@@15)) ))) (=> (exists ((i@@16 Int) ) (!  (and (and (<= 0 i@@16) (< i@@16 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@16) x@@34)) :qid |DafnyPre.982:13| :skolemid |550| :pattern ( (|Seq#Index| s@@23 i@@16)) )) (|Seq#Contains| s@@23 x@@34))))) :qid |DafnyPre.980:18| :skolemid |551| :pattern ( (|Seq#Contains| s@@23 x@@34)) )))
(assert (forall ((x@@35 T@U) ) (! (let ((T@@121 (type x@@35))) (not (|Seq#Contains| (|Seq#Empty| T@@121) x@@35))) :qid |DafnyPre.983:18| :skolemid |552| :pattern ( (let ((T@@121 (type x@@35))) (|Seq#Contains| (|Seq#Empty| T@@121) x@@35))) )))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) (x@@36 T@U) ) (! (let ((T@@122 (type x@@36))) (=> (and (= (type s0@@2) (SeqType T@@122)) (= (type s1@@2) (SeqType T@@122))) (and (=> (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36) (or (|Seq#Contains| s0@@2 x@@36) (|Seq#Contains| s1@@2 x@@36))) (=> (or (|Seq#Contains| s0@@2 x@@36) (|Seq#Contains| s1@@2 x@@36)) (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36))))) :qid |DafnyPre.987:18| :skolemid |553| :pattern ( (|Seq#Contains| (|Seq#Append| s0@@2 s1@@2) x@@36)) )))
(assert (forall ((s@@24 T@U) (v@@31 T@U) (x@@37 T@U) ) (! (let ((T@@123 (type v@@31))) (=> (and (= (type s@@24) (SeqType T@@123)) (= (type x@@37) T@@123)) (and (=> (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37) (or (= v@@31 x@@37) (|Seq#Contains| s@@24 x@@37))) (=> (or (= v@@31 x@@37) (|Seq#Contains| s@@24 x@@37)) (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37))))) :qid |DafnyPre.992:18| :skolemid |554| :pattern ( (|Seq#Contains| (|Seq#Build| s@@24 v@@31) x@@37)) )))
(assert (forall ((arg0@@90 T@U) (arg1@@40 Int) ) (! (let ((T@@124 (SeqTypeInv0 (type arg0@@90)))) (= (type (|Seq#Take| arg0@@90 arg1@@40)) (SeqType T@@124))) :qid |funType:Seq#Take| :pattern ( (|Seq#Take| arg0@@90 arg1@@40)) )))
(assert (forall ((s@@25 T@U) (n@@8 Int) (x@@38 T@U) ) (! (let ((T@@125 (type x@@38))) (=> (= (type s@@25) (SeqType T@@125)) (and (=> (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38) (exists ((i@@17 Int) ) (!  (and (and (and (<= 0 i@@17) (< i@@17 n@@8)) (< i@@17 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@17) x@@38)) :qid |DafnyPre.999:13| :skolemid |555| :pattern ( (|Seq#Index| s@@25 i@@17)) ))) (=> (exists ((i@@18 Int) ) (!  (and (and (and (<= 0 i@@18) (< i@@18 n@@8)) (< i@@18 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@18) x@@38)) :qid |DafnyPre.999:13| :skolemid |555| :pattern ( (|Seq#Index| s@@25 i@@18)) )) (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38))))) :qid |DafnyPre.996:18| :skolemid |556| :pattern ( (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@38)) )))
(assert (forall ((arg0@@91 T@U) (arg1@@41 Int) ) (! (let ((T@@126 (SeqTypeInv0 (type arg0@@91)))) (= (type (|Seq#Drop| arg0@@91 arg1@@41)) (SeqType T@@126))) :qid |funType:Seq#Drop| :pattern ( (|Seq#Drop| arg0@@91 arg1@@41)) )))
(assert (forall ((s@@26 T@U) (n@@9 Int) (x@@39 T@U) ) (! (let ((T@@127 (type x@@39))) (=> (= (type s@@26) (SeqType T@@127)) (and (=> (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39) (exists ((i@@19 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@19)) (< i@@19 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@19) x@@39)) :qid |DafnyPre.1004:13| :skolemid |557| :pattern ( (|Seq#Index| s@@26 i@@19)) ))) (=> (exists ((i@@20 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@20)) (< i@@20 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@20) x@@39)) :qid |DafnyPre.1004:13| :skolemid |557| :pattern ( (|Seq#Index| s@@26 i@@20)) )) (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39))))) :qid |DafnyPre.1001:18| :skolemid |558| :pattern ( (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@39)) )))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) ) (! (let ((T@@128 (SeqTypeInv0 (type s0@@3)))) (=> (and (= (type s0@@3) (SeqType T@@128)) (= (type s1@@3) (SeqType T@@128))) (and (=> (|Seq#Equal| s0@@3 s1@@3) (and (= (|Seq#Length| s0@@3) (|Seq#Length| s1@@3)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0@@3))) (= (|Seq#Index| s0@@3 j) (|Seq#Index| s1@@3 j))) :qid |DafnyPre.1011:13| :skolemid |559| :pattern ( (|Seq#Index| s0@@3 j)) :pattern ( (|Seq#Index| s1@@3 j)) )))) (=> (and (= (|Seq#Length| s0@@3) (|Seq#Length| s1@@3)) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 (|Seq#Length| s0@@3))) (= (|Seq#Index| s0@@3 j@@0) (|Seq#Index| s1@@3 j@@0))) :qid |DafnyPre.1011:13| :skolemid |559| :pattern ( (|Seq#Index| s0@@3 j@@0)) :pattern ( (|Seq#Index| s1@@3 j@@0)) ))) (|Seq#Equal| s0@@3 s1@@3))))) :qid |DafnyPre.1008:18| :skolemid |560| :pattern ( (|Seq#Equal| s0@@3 s1@@3)) )))
(assert (forall ((a@@67 T@U) (b@@51 T@U) ) (! (let ((T@@129 (SeqTypeInv0 (type a@@67)))) (=> (and (and (= (type a@@67) (SeqType T@@129)) (= (type b@@51) (SeqType T@@129))) (|Seq#Equal| a@@67 b@@51)) (= a@@67 b@@51))) :qid |DafnyPre.1013:18| :skolemid |561| :pattern ( (|Seq#Equal| a@@67 b@@51)) )))
(assert (forall ((s0@@4 T@U) (s1@@4 T@U) (n@@10 Int) ) (! (let ((T@@130 (SeqTypeInv0 (type s0@@4)))) (=> (and (= (type s0@@4) (SeqType T@@130)) (= (type s1@@4) (SeqType T@@130))) (and (=> (|Seq#SameUntil| s0@@4 s1@@4 n@@10) (forall ((j@@1 Int) ) (!  (=> (and (<= 0 j@@1) (< j@@1 n@@10)) (= (|Seq#Index| s0@@4 j@@1) (|Seq#Index| s1@@4 j@@1))) :qid |DafnyPre.1019:13| :skolemid |562| :pattern ( (|Seq#Index| s0@@4 j@@1)) :pattern ( (|Seq#Index| s1@@4 j@@1)) ))) (=> (forall ((j@@2 Int) ) (!  (=> (and (<= 0 j@@2) (< j@@2 n@@10)) (= (|Seq#Index| s0@@4 j@@2) (|Seq#Index| s1@@4 j@@2))) :qid |DafnyPre.1019:13| :skolemid |562| :pattern ( (|Seq#Index| s0@@4 j@@2)) :pattern ( (|Seq#Index| s1@@4 j@@2)) )) (|Seq#SameUntil| s0@@4 s1@@4 n@@10))))) :qid |DafnyPre.1017:18| :skolemid |563| :pattern ( (|Seq#SameUntil| s0@@4 s1@@4 n@@10)) )))
(assert (forall ((s@@27 T@U) (n@@11 Int) ) (! (let ((T@@131 (SeqTypeInv0 (type s@@27)))) (=> (= (type s@@27) (SeqType T@@131)) (=> (and (<= 0 n@@11) (<= n@@11 (|Seq#Length| s@@27))) (= (|Seq#Length| (|Seq#Take| s@@27 n@@11)) n@@11)))) :qid |DafnyPre.1023:18| :skolemid |564| :pattern ( (|Seq#Length| (|Seq#Take| s@@27 n@@11))) )))
(assert (forall ((s@@28 T@U) (n@@12 Int) (j@@3 Int) ) (! (let ((T@@132 (SeqTypeInv0 (type s@@28)))) (=> (= (type s@@28) (SeqType T@@132)) (=> (and (and (<= 0 j@@3) (< j@@3 n@@12)) (< j@@3 (|Seq#Length| s@@28))) (= (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@3) (|Seq#Index| s@@28 j@@3))))) :qid |DafnyPre.1025:18| :weight 25 :skolemid |565| :pattern ( (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@3)) :pattern ( (|Seq#Index| s@@28 j@@3) (|Seq#Take| s@@28 n@@12)) )))
(assert (forall ((s@@29 T@U) (n@@13 Int) ) (! (let ((T@@133 (SeqTypeInv0 (type s@@29)))) (=> (= (type s@@29) (SeqType T@@133)) (=> (and (<= 0 n@@13) (<= n@@13 (|Seq#Length| s@@29))) (= (|Seq#Length| (|Seq#Drop| s@@29 n@@13)) (- (|Seq#Length| s@@29) n@@13))))) :qid |DafnyPre.1033:18| :skolemid |566| :pattern ( (|Seq#Length| (|Seq#Drop| s@@29 n@@13))) )))
(assert (forall ((s@@30 T@U) (n@@14 Int) (j@@4 Int) ) (! (let ((T@@134 (SeqTypeInv0 (type s@@30)))) (=> (= (type s@@30) (SeqType T@@134)) (=> (and (and (<= 0 n@@14) (<= 0 j@@4)) (< j@@4 (- (|Seq#Length| s@@30) n@@14))) (= (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@4) (|Seq#Index| s@@30 (+ j@@4 n@@14)))))) :qid |DafnyPre.1035:18| :weight 25 :skolemid |567| :pattern ( (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@4)) )))
(assert (forall ((s@@31 T@U) (n@@15 Int) (k@@3 Int) ) (! (let ((T@@135 (SeqTypeInv0 (type s@@31)))) (=> (= (type s@@31) (SeqType T@@135)) (=> (and (and (<= 0 n@@15) (<= n@@15 k@@3)) (< k@@3 (|Seq#Length| s@@31))) (= (|Seq#Index| (|Seq#Drop| s@@31 n@@15) (- k@@3 n@@15)) (|Seq#Index| s@@31 k@@3))))) :qid |DafnyPre.1040:18| :weight 25 :skolemid |568| :pattern ( (|Seq#Index| s@@31 k@@3) (|Seq#Drop| s@@31 n@@15)) )))
(assert (forall ((s@@32 T@U) (t@@28 T@U) (n@@16 Int) ) (! (let ((T@@136 (SeqTypeInv0 (type s@@32)))) (=> (and (and (= (type s@@32) (SeqType T@@136)) (= (type t@@28) (SeqType T@@136))) (= n@@16 (|Seq#Length| s@@32))) (and (= (|Seq#Take| (|Seq#Append| s@@32 t@@28) n@@16) s@@32) (= (|Seq#Drop| (|Seq#Append| s@@32 t@@28) n@@16) t@@28)))) :qid |DafnyPre.1046:18| :skolemid |569| :pattern ( (|Seq#Take| (|Seq#Append| s@@32 t@@28) n@@16)) :pattern ( (|Seq#Drop| (|Seq#Append| s@@32 t@@28) n@@16)) )))
(assert (forall ((arg0@@92 T@U) (arg1@@42 T@U) ) (! (= (type (|Seq#FromArray| arg0@@92 arg1@@42)) (SeqType BoxType)) :qid |funType:Seq#FromArray| :pattern ( (|Seq#FromArray| arg0@@92 arg1@@42)) )))
(assert (forall ((h@@16 T@U) (a@@68 T@U) ) (!  (=> (and (= (type h@@16) (MapType0Type refType MapType1Type)) (= (type a@@68) refType)) (= (|Seq#Length| (|Seq#FromArray| h@@16 a@@68)) (_System.array.Length a@@68))) :qid |DafnyPre.1055:15| :skolemid |570| :pattern ( (|Seq#Length| (|Seq#FromArray| h@@16 a@@68))) )))
(assert (forall ((h@@17 T@U) (a@@69 T@U) ) (!  (=> (and (= (type h@@17) (MapType0Type refType MapType1Type)) (= (type a@@69) refType)) (forall ((i@@21 Int) ) (!  (=> (and (<= 0 i@@21) (< i@@21 (|Seq#Length| (|Seq#FromArray| h@@17 a@@69)))) (= (|Seq#Index| (|Seq#FromArray| h@@17 a@@69) i@@21) (MapType1Select (MapType0Select h@@17 a@@69) (IndexField i@@21)))) :qid |DafnyPre.1060:11| :skolemid |571| :pattern ( (MapType1Select (MapType0Select h@@17 a@@69) (IndexField i@@21))) :pattern ( (|Seq#Index| (|Seq#FromArray| h@@17 a@@69) i@@21)) ))) :qid |DafnyPre.1058:15| :skolemid |572| :pattern ( (|Seq#FromArray| h@@17 a@@69)) )))
(assert (forall ((h0 T@U) (h1 T@U) (a@@70 T@U) ) (!  (=> (and (and (= (type h0) (MapType0Type refType MapType1Type)) (= (type h1) (MapType0Type refType MapType1Type))) (= (type a@@70) refType)) (=> (and (and (and ($IsGoodHeap h0) ($IsGoodHeap h1)) ($HeapSucc h0 h1)) (= (MapType0Select h0 a@@70) (MapType0Select h1 a@@70))) (= (|Seq#FromArray| h0 a@@70) (|Seq#FromArray| h1 a@@70)))) :qid |DafnyPre.1070:15| :skolemid |573| :pattern ( (|Seq#FromArray| h1 a@@70) ($HeapSucc h0 h1)) )))
(assert (forall ((h@@18 T@U) (i@@22 Int) (v@@32 T@U) (a@@71 T@U) ) (!  (=> (and (and (and (= (type h@@18) (MapType0Type refType MapType1Type)) (= (type v@@32) BoxType)) (= (type a@@71) refType)) (and (<= 0 i@@22) (< i@@22 (_System.array.Length a@@71)))) (= (|Seq#FromArray| (MapType0Store h@@18 a@@71 (MapType1Store (MapType0Select h@@18 a@@71) (IndexField i@@22) v@@32)) a@@71) (|Seq#Update| (|Seq#FromArray| h@@18 a@@71) i@@22 v@@32))) :qid |DafnyPre.1075:15| :skolemid |574| :pattern ( (|Seq#FromArray| (MapType0Store h@@18 a@@71 (MapType1Store (MapType0Select h@@18 a@@71) (IndexField i@@22) v@@32)) a@@71)) )))
(assert (forall ((s@@33 T@U) (i@@23 Int) (v@@33 T@U) (n@@17 Int) ) (! (let ((T@@137 (type v@@33))) (=> (= (type s@@33) (SeqType T@@137)) (=> (and (and (<= 0 i@@23) (< i@@23 n@@17)) (<= n@@17 (|Seq#Length| s@@33))) (= (|Seq#Take| (|Seq#Update| s@@33 i@@23 v@@33) n@@17) (|Seq#Update| (|Seq#Take| s@@33 n@@17) i@@23 v@@33))))) :qid |DafnyPre.1080:18| :skolemid |575| :pattern ( (|Seq#Take| (|Seq#Update| s@@33 i@@23 v@@33) n@@17)) )))
(assert (forall ((s@@34 T@U) (i@@24 Int) (v@@34 T@U) (n@@18 Int) ) (! (let ((T@@138 (type v@@34))) (=> (= (type s@@34) (SeqType T@@138)) (=> (and (<= n@@18 i@@24) (< i@@24 (|Seq#Length| s@@34))) (= (|Seq#Take| (|Seq#Update| s@@34 i@@24 v@@34) n@@18) (|Seq#Take| s@@34 n@@18))))) :qid |DafnyPre.1083:18| :skolemid |576| :pattern ( (|Seq#Take| (|Seq#Update| s@@34 i@@24 v@@34) n@@18)) )))
(assert (forall ((s@@35 T@U) (i@@25 Int) (v@@35 T@U) (n@@19 Int) ) (! (let ((T@@139 (type v@@35))) (=> (= (type s@@35) (SeqType T@@139)) (=> (and (and (<= 0 n@@19) (<= n@@19 i@@25)) (< i@@25 (|Seq#Length| s@@35))) (= (|Seq#Drop| (|Seq#Update| s@@35 i@@25 v@@35) n@@19) (|Seq#Update| (|Seq#Drop| s@@35 n@@19) (- i@@25 n@@19) v@@35))))) :qid |DafnyPre.1086:18| :skolemid |577| :pattern ( (|Seq#Drop| (|Seq#Update| s@@35 i@@25 v@@35) n@@19)) )))
(assert (forall ((s@@36 T@U) (i@@26 Int) (v@@36 T@U) (n@@20 Int) ) (! (let ((T@@140 (type v@@36))) (=> (= (type s@@36) (SeqType T@@140)) (=> (and (and (<= 0 i@@26) (< i@@26 n@@20)) (< n@@20 (|Seq#Length| s@@36))) (= (|Seq#Drop| (|Seq#Update| s@@36 i@@26 v@@36) n@@20) (|Seq#Drop| s@@36 n@@20))))) :qid |DafnyPre.1089:18| :skolemid |578| :pattern ( (|Seq#Drop| (|Seq#Update| s@@36 i@@26 v@@36) n@@20)) )))
(assert (forall ((h@@19 T@U) (a@@72 T@U) (n0 Int) (n1 Int) ) (!  (=> (and (= (type h@@19) (MapType0Type refType MapType1Type)) (= (type a@@72) refType)) (=> (and (and (= (+ n0 1) n1) (<= 0 n0)) (<= n1 (_System.array.Length a@@72))) (= (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n0) (MapType1Select (MapType0Select h@@19 a@@72) (IndexField n0)))))) :qid |DafnyPre.1093:15| :skolemid |579| :pattern ( (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n0) (|Seq#Take| (|Seq#FromArray| h@@19 a@@72) n1)) )))
(assert (forall ((s@@37 T@U) (v@@37 T@U) (n@@21 Int) ) (! (let ((T@@141 (type v@@37))) (=> (= (type s@@37) (SeqType T@@141)) (=> (and (<= 0 n@@21) (<= n@@21 (|Seq#Length| s@@37))) (= (|Seq#Drop| (|Seq#Build| s@@37 v@@37) n@@21) (|Seq#Build| (|Seq#Drop| s@@37 n@@21) v@@37))))) :qid |DafnyPre.1097:18| :skolemid |580| :pattern ( (|Seq#Drop| (|Seq#Build| s@@37 v@@37) n@@21)) )))
(assert (forall ((s@@38 T@U) (i@@27 Int) ) (!  (=> (= (type s@@38) (SeqType BoxType)) (=> (and (<= 0 i@@27) (< i@@27 (|Seq#Length| s@@38))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@27))) (|Seq#Rank| s@@38)))) :qid |DafnyPre.1102:15| :skolemid |581| :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@27)))) )))
(assert (forall ((s@@39 T@U) (i@@28 Int) ) (! (let ((T@@142 (SeqTypeInv0 (type s@@39)))) (=> (= (type s@@39) (SeqType T@@142)) (=> (and (< 0 i@@28) (<= i@@28 (|Seq#Length| s@@39))) (< (|Seq#Rank| (|Seq#Drop| s@@39 i@@28)) (|Seq#Rank| s@@39))))) :qid |DafnyPre.1105:18| :skolemid |582| :pattern ( (|Seq#Rank| (|Seq#Drop| s@@39 i@@28))) )))
(assert (forall ((s@@40 T@U) (i@@29 Int) ) (! (let ((T@@143 (SeqTypeInv0 (type s@@40)))) (=> (= (type s@@40) (SeqType T@@143)) (=> (and (<= 0 i@@29) (< i@@29 (|Seq#Length| s@@40))) (< (|Seq#Rank| (|Seq#Take| s@@40 i@@29)) (|Seq#Rank| s@@40))))) :qid |DafnyPre.1108:18| :skolemid |583| :pattern ( (|Seq#Rank| (|Seq#Take| s@@40 i@@29))) )))
(assert (forall ((s@@41 T@U) (i@@30 Int) (j@@5 Int) ) (! (let ((T@@144 (SeqTypeInv0 (type s@@41)))) (=> (= (type s@@41) (SeqType T@@144)) (=> (and (and (<= 0 i@@30) (< i@@30 j@@5)) (<= j@@5 (|Seq#Length| s@@41))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@30) (|Seq#Drop| s@@41 j@@5))) (|Seq#Rank| s@@41))))) :qid |DafnyPre.1111:18| :skolemid |584| :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@30) (|Seq#Drop| s@@41 j@@5)))) )))
(assert (forall ((s@@42 T@U) (n@@22 Int) ) (! (let ((T@@145 (SeqTypeInv0 (type s@@42)))) (=> (and (= (type s@@42) (SeqType T@@145)) (= n@@22 0)) (= (|Seq#Drop| s@@42 n@@22) s@@42))) :qid |DafnyPre.1116:18| :skolemid |585| :pattern ( (|Seq#Drop| s@@42 n@@22)) )))
(assert (forall ((s@@43 T@U) (n@@23 Int) ) (! (let ((T@@146 (SeqTypeInv0 (type s@@43)))) (=> (and (= (type s@@43) (SeqType T@@146)) (= n@@23 0)) (= (|Seq#Take| s@@43 n@@23) (|Seq#Empty| T@@146)))) :qid |DafnyPre.1118:18| :skolemid |586| :pattern ( (|Seq#Take| s@@43 n@@23)) )))
(assert (forall ((s@@44 T@U) (m@@9 Int) (n@@24 Int) ) (! (let ((T@@147 (SeqTypeInv0 (type s@@44)))) (=> (= (type s@@44) (SeqType T@@147)) (=> (and (and (<= 0 m@@9) (<= 0 n@@24)) (<= (+ m@@9 n@@24) (|Seq#Length| s@@44))) (= (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24) (|Seq#Drop| s@@44 (+ m@@9 n@@24)))))) :qid |DafnyPre.1120:18| :skolemid |587| :pattern ( (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24)) )))
(assert (forall ((m@@10 T@U) ) (! (let ((V@@1 (MapTypeInv1 (type m@@10)))) (let ((U@@3 (MapTypeInv0 (type m@@10)))) (=> (= (type m@@10) (MapType U@@3 V@@1)) (<= 0 (|Map#Card| m@@10))))) :qid |DafnyPre.1138:20| :skolemid |588| :pattern ( (|Map#Card| m@@10)) )))
(assert (forall ((m@@11 T@U) ) (! (let ((V@@2 (MapTypeInv1 (type m@@11)))) (let ((U@@4 (MapTypeInv0 (type m@@11)))) (=> (= (type m@@11) (MapType U@@4 V@@2)) (= (|Set#Card| (|Map#Domain| m@@11)) (|Map#Card| m@@11))))) :qid |DafnyPre.1143:20| :skolemid |589| :pattern ( (|Set#Card| (|Map#Domain| m@@11))) )))
(assert (forall ((arg0@@93 T@U) ) (! (let ((V@@3 (MapTypeInv1 (type arg0@@93)))) (= (type (|Map#Values| arg0@@93)) (MapType0Type V@@3 boolType))) :qid |funType:Map#Values| :pattern ( (|Map#Values| arg0@@93)) )))
(assert (forall ((m@@12 T@U) (v@@38 T@U) ) (! (let ((V@@4 (type v@@38))) (let ((U@@5 (MapTypeInv0 (type m@@12)))) (=> (= (type m@@12) (MapType U@@5 V@@4)) (and (=> (U_2_bool (MapType0Select (|Map#Values| m@@12) v@@38)) (exists ((u@@5 T@U) ) (!  (and (= (type u@@5) U@@5) (and (U_2_bool (MapType0Select (|Map#Domain| m@@12) u@@5)) (= v@@38 (MapType0Select (|Map#Elements| m@@12) u@@5)))) :qid |DafnyPre.1155:10| :skolemid |590| :pattern ( (MapType0Select (|Map#Domain| m@@12) u@@5)) :pattern ( (MapType0Select (|Map#Elements| m@@12) u@@5)) ))) (=> (exists ((u@@6 T@U) ) (!  (and (= (type u@@6) U@@5) (and (U_2_bool (MapType0Select (|Map#Domain| m@@12) u@@6)) (= v@@38 (MapType0Select (|Map#Elements| m@@12) u@@6)))) :qid |DafnyPre.1155:10| :skolemid |590| :pattern ( (MapType0Select (|Map#Domain| m@@12) u@@6)) :pattern ( (MapType0Select (|Map#Elements| m@@12) u@@6)) )) (U_2_bool (MapType0Select (|Map#Values| m@@12) v@@38))))))) :qid |DafnyPre.1153:20| :skolemid |591| :pattern ( (MapType0Select (|Map#Values| m@@12) v@@38)) )))
(assert (forall ((arg0@@94 T@U) ) (! (= (type (|Map#Items| arg0@@94)) (MapType0Type BoxType boolType)) :qid |funType:Map#Items| :pattern ( (|Map#Items| arg0@@94)) )))
(assert (forall ((m@@13 T@U) ) (! (let ((V@@5 (MapTypeInv1 (type m@@13)))) (let ((U@@6 (MapTypeInv0 (type m@@13)))) (=> (= (type m@@13) (MapType U@@6 V@@5)) (= (|Set#Card| (|Map#Items| m@@13)) (|Map#Card| m@@13))))) :qid |DafnyPre.1174:20| :skolemid |592| :pattern ( (|Set#Card| (|Map#Items| m@@13))) )))
(assert  (and (forall ((arg0@@95 T@U) ) (! (= (type (_System.Tuple2._0 arg0@@95)) BoxType) :qid |funType:_System.Tuple2._0| :pattern ( (_System.Tuple2._0 arg0@@95)) )) (forall ((arg0@@96 T@U) ) (! (= (type (_System.Tuple2._1 arg0@@96)) BoxType) :qid |funType:_System.Tuple2._1| :pattern ( (_System.Tuple2._1 arg0@@96)) ))))
(assert (forall ((m@@14 T@U) (item T@U) ) (!  (=> (and (= (type m@@14) (MapType BoxType BoxType)) (= (type item) BoxType)) (and (=> (U_2_bool (MapType0Select (|Map#Items| m@@14) item)) (and (U_2_bool (MapType0Select (|Map#Domain| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item))))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@14) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))) (U_2_bool (MapType0Select (|Map#Items| m@@14) item))))) :qid |DafnyPre.1177:15| :skolemid |593| :pattern ( (MapType0Select (|Map#Items| m@@14) item)) )))
(assert (forall ((U@@7 T@T) (V@@6 T@T) ) (! (= (type (|Map#Empty| U@@7 V@@6)) (MapType U@@7 V@@6)) :qid |funType:Map#Empty| :pattern ( (|Map#Empty| U@@7 V@@6)) )))
(assert (forall ((u@@7 T@U) (V@@7 T@T) ) (! (let ((U@@8 (type u@@7))) (not (U_2_bool (MapType0Select (|Map#Domain| (|Map#Empty| U@@8 V@@7)) u@@7)))) :qid |DafnyPre.1185:21| :skolemid |594| :pattern ( (let ((U@@8 (type u@@7))) (MapType0Select (|Map#Domain| (|Map#Empty| U@@8 V@@7)) u@@7))) )))
(assert (forall ((m@@15 T@U) ) (! (let ((V@@8 (MapTypeInv1 (type m@@15)))) (let ((U@@9 (MapTypeInv0 (type m@@15)))) (=> (= (type m@@15) (MapType U@@9 V@@8)) (and (and (=> (= (|Map#Card| m@@15) 0) (= m@@15 (|Map#Empty| U@@9 V@@8))) (=> (= m@@15 (|Map#Empty| U@@9 V@@8)) (= (|Map#Card| m@@15) 0))) (=> (not (= (|Map#Card| m@@15) 0)) (exists ((x@@40 T@U) ) (!  (and (= (type x@@40) U@@9) (U_2_bool (MapType0Select (|Map#Domain| m@@15) x@@40))) :qid |DafnyPre.1190:32| :skolemid |595| :no-pattern (type x@@40) :no-pattern (U_2_int x@@40) :no-pattern (U_2_bool x@@40) ))))))) :qid |DafnyPre.1188:21| :skolemid |596| :pattern ( (|Map#Card| m@@15)) )))
(assert (forall ((arg0@@97 T@U) (arg1@@43 T@U) (arg2@@4 T@U) ) (! (let ((V@@9 (MapType0TypeInv1 (type arg1@@43)))) (let ((U@@10 (MapType0TypeInv0 (type arg0@@97)))) (= (type (|Map#Glue| arg0@@97 arg1@@43 arg2@@4)) (MapType U@@10 V@@9)))) :qid |funType:Map#Glue| :pattern ( (|Map#Glue| arg0@@97 arg1@@43 arg2@@4)) )))
(assert (forall ((a@@73 T@U) (b@@52 T@U) (t@@29 T@U) ) (! (let ((V@@10 (MapType0TypeInv1 (type b@@52)))) (let ((U@@11 (MapType0TypeInv0 (type a@@73)))) (=> (and (and (= (type a@@73) (MapType0Type U@@11 boolType)) (= (type b@@52) (MapType0Type U@@11 V@@10))) (= (type t@@29) TyType)) (= (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@29)) a@@73)))) :qid |DafnyPre.1193:21| :skolemid |597| :pattern ( (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@29))) )))
(assert (forall ((a@@74 T@U) (b@@53 T@U) (t@@30 T@U) ) (! (let ((V@@11 (MapType0TypeInv1 (type b@@53)))) (let ((U@@12 (MapType0TypeInv0 (type a@@74)))) (=> (and (and (= (type a@@74) (MapType0Type U@@12 boolType)) (= (type b@@53) (MapType0Type U@@12 V@@11))) (= (type t@@30) TyType)) (= (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@30)) b@@53)))) :qid |DafnyPre.1196:21| :skolemid |598| :pattern ( (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@30))) )))
(assert (forall ((a@@75 T@U) (b@@54 T@U) (t@@31 T@U) ) (! (let ((V@@12 (MapType0TypeInv1 (type b@@54)))) (let ((U@@13 (MapType0TypeInv0 (type a@@75)))) (=> (and (and (= (type a@@75) (MapType0Type U@@13 boolType)) (= (type b@@54) (MapType0Type U@@13 V@@12))) (= (type t@@31) TyType)) ($Is (|Map#Glue| a@@75 b@@54 t@@31) t@@31)))) :qid |DafnyPre.1199:21| :skolemid |599| :pattern ( ($Is (|Map#Glue| a@@75 b@@54 t@@31) t@@31)) )))
(assert (forall ((arg0@@98 T@U) (arg1@@44 T@U) (arg2@@5 T@U) ) (! (let ((V@@13 (type arg2@@5))) (let ((U@@14 (type arg1@@44))) (= (type (|Map#Build| arg0@@98 arg1@@44 arg2@@5)) (MapType U@@14 V@@13)))) :qid |funType:Map#Build| :pattern ( (|Map#Build| arg0@@98 arg1@@44 arg2@@5)) )))
(assert (forall ((m@@16 T@U) (u@@8 T@U) (|u'| T@U) (v@@39 T@U) ) (! (let ((V@@14 (type v@@39))) (let ((U@@15 (type u@@8))) (=> (and (= (type m@@16) (MapType U@@15 V@@14)) (= (type |u'|) U@@15)) (and (=> (= |u'| u@@8) (and (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|) v@@39))) (=> (not (= |u'| u@@8)) (and (and (=> (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| m@@16) |u'|))) (=> (U_2_bool (MapType0Select (|Map#Domain| m@@16) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)))) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|) (MapType0Select (|Map#Elements| m@@16) |u'|)))))))) :qid |DafnyPre.1210:21| :skolemid |600| :pattern ( (MapType0Select (|Map#Domain| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) :pattern ( (MapType0Select (|Map#Elements| (|Map#Build| m@@16 u@@8 v@@39)) |u'|)) )))
(assert (forall ((m@@17 T@U) (u@@9 T@U) (v@@40 T@U) ) (! (let ((V@@15 (type v@@40))) (let ((U@@16 (type u@@9))) (=> (and (= (type m@@17) (MapType U@@16 V@@15)) (U_2_bool (MapType0Select (|Map#Domain| m@@17) u@@9))) (= (|Map#Card| (|Map#Build| m@@17 u@@9 v@@40)) (|Map#Card| m@@17))))) :qid |DafnyPre.1216:21| :skolemid |601| :pattern ( (|Map#Card| (|Map#Build| m@@17 u@@9 v@@40))) )))
(assert (forall ((m@@18 T@U) (u@@10 T@U) (v@@41 T@U) ) (! (let ((V@@16 (type v@@41))) (let ((U@@17 (type u@@10))) (=> (and (= (type m@@18) (MapType U@@17 V@@16)) (not (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@10)))) (= (|Map#Card| (|Map#Build| m@@18 u@@10 v@@41)) (+ (|Map#Card| m@@18) 1))))) :qid |DafnyPre.1218:21| :skolemid |602| :pattern ( (|Map#Card| (|Map#Build| m@@18 u@@10 v@@41))) )))
(assert (forall ((m@@19 T@U) (|m'| T@U) ) (! (let ((V@@17 (MapTypeInv1 (type m@@19)))) (let ((U@@18 (MapTypeInv0 (type m@@19)))) (=> (and (= (type m@@19) (MapType U@@18 V@@17)) (= (type |m'|) (MapType U@@18 V@@17))) (and (=> (|Map#Equal| m@@19 |m'|) (and (forall ((u@@11 T@U) ) (!  (=> (= (type u@@11) U@@18) (and (=> (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@11)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@11))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@11)) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@11))))) :qid |DafnyPre.1225:35| :skolemid |603| :no-pattern (type u@@11) :no-pattern (U_2_int u@@11) :no-pattern (U_2_bool u@@11) )) (forall ((u@@12 T@U) ) (!  (=> (and (= (type u@@12) U@@18) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@12))) (= (MapType0Select (|Map#Elements| m@@19) u@@12) (MapType0Select (|Map#Elements| |m'|) u@@12))) :qid |DafnyPre.1226:35| :skolemid |604| :no-pattern (type u@@12) :no-pattern (U_2_int u@@12) :no-pattern (U_2_bool u@@12) )))) (=> (and (forall ((u@@13 T@U) ) (!  (=> (= (type u@@13) U@@18) (and (=> (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@13)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@13))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@13)) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@13))))) :qid |DafnyPre.1225:35| :skolemid |603| :no-pattern (type u@@13) :no-pattern (U_2_int u@@13) :no-pattern (U_2_bool u@@13) )) (forall ((u@@14 T@U) ) (!  (=> (and (= (type u@@14) U@@18) (U_2_bool (MapType0Select (|Map#Domain| m@@19) u@@14))) (= (MapType0Select (|Map#Elements| m@@19) u@@14) (MapType0Select (|Map#Elements| |m'|) u@@14))) :qid |DafnyPre.1226:35| :skolemid |604| :no-pattern (type u@@14) :no-pattern (U_2_int u@@14) :no-pattern (U_2_bool u@@14) ))) (|Map#Equal| m@@19 |m'|)))))) :qid |DafnyPre.1223:21| :skolemid |605| :pattern ( (|Map#Equal| m@@19 |m'|)) )))
(assert (forall ((m@@20 T@U) (|m'@@0| T@U) ) (! (let ((V@@18 (MapTypeInv1 (type m@@20)))) (let ((U@@19 (MapTypeInv0 (type m@@20)))) (=> (and (and (= (type m@@20) (MapType U@@19 V@@18)) (= (type |m'@@0|) (MapType U@@19 V@@18))) (|Map#Equal| m@@20 |m'@@0|)) (= m@@20 |m'@@0|)))) :qid |DafnyPre.1228:21| :skolemid |606| :pattern ( (|Map#Equal| m@@20 |m'@@0|)) )))
(assert (forall ((m@@21 T@U) (|m'@@1| T@U) ) (! (let ((V@@19 (MapTypeInv1 (type m@@21)))) (let ((U@@20 (MapTypeInv0 (type m@@21)))) (=> (and (= (type m@@21) (MapType U@@20 V@@19)) (= (type |m'@@1|) (MapType U@@20 V@@19))) (and (=> (|Map#Disjoint| m@@21 |m'@@1|) (forall ((o@@52 T@U) ) (!  (=> (= (type o@@52) U@@20) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@21) o@@52))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@52))))) :qid |DafnyPre.1235:38| :skolemid |607| :pattern ( (MapType0Select (|Map#Domain| m@@21) o@@52)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@52)) ))) (=> (forall ((o@@53 T@U) ) (!  (=> (= (type o@@53) U@@20) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@21) o@@53))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@53))))) :qid |DafnyPre.1235:38| :skolemid |607| :pattern ( (MapType0Select (|Map#Domain| m@@21) o@@53)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@53)) )) (|Map#Disjoint| m@@21 |m'@@1|)))))) :qid |DafnyPre.1233:21| :skolemid |608| :pattern ( (|Map#Disjoint| m@@21 |m'@@1|)) )))
(assert (forall ((arg0@@99 T@U) ) (! (let ((V@@20 (IMapTypeInv1 (type arg0@@99)))) (= (type (|IMap#Values| arg0@@99)) (MapType0Type V@@20 boolType))) :qid |funType:IMap#Values| :pattern ( (|IMap#Values| arg0@@99)) )))
(assert (forall ((m@@22 T@U) (v@@42 T@U) ) (! (let ((V@@21 (type v@@42))) (let ((U@@21 (IMapTypeInv0 (type m@@22)))) (=> (= (type m@@22) (IMapType U@@21 V@@21)) (and (=> (U_2_bool (MapType0Select (|IMap#Values| m@@22) v@@42)) (exists ((u@@15 T@U) ) (!  (and (= (type u@@15) U@@21) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@22) u@@15)) (= v@@42 (MapType0Select (|IMap#Elements| m@@22) u@@15)))) :qid |DafnyPre.1258:10| :skolemid |609| :pattern ( (MapType0Select (|IMap#Domain| m@@22) u@@15)) :pattern ( (MapType0Select (|IMap#Elements| m@@22) u@@15)) ))) (=> (exists ((u@@16 T@U) ) (!  (and (= (type u@@16) U@@21) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@22) u@@16)) (= v@@42 (MapType0Select (|IMap#Elements| m@@22) u@@16)))) :qid |DafnyPre.1258:10| :skolemid |609| :pattern ( (MapType0Select (|IMap#Domain| m@@22) u@@16)) :pattern ( (MapType0Select (|IMap#Elements| m@@22) u@@16)) )) (U_2_bool (MapType0Select (|IMap#Values| m@@22) v@@42))))))) :qid |DafnyPre.1256:20| :skolemid |610| :pattern ( (MapType0Select (|IMap#Values| m@@22) v@@42)) )))
(assert (forall ((arg0@@100 T@U) ) (! (= (type (|IMap#Items| arg0@@100)) (MapType0Type BoxType boolType)) :qid |funType:IMap#Items| :pattern ( (|IMap#Items| arg0@@100)) )))
(assert (forall ((m@@23 T@U) (item@@0 T@U) ) (!  (=> (and (= (type m@@23) (IMapType BoxType BoxType)) (= (type item@@0) BoxType)) (and (=> (U_2_bool (MapType0Select (|IMap#Items| m@@23) item@@0)) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0))))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@23) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0)))) (U_2_bool (MapType0Select (|IMap#Items| m@@23) item@@0))))) :qid |DafnyPre.1273:15| :skolemid |611| :pattern ( (MapType0Select (|IMap#Items| m@@23) item@@0)) )))
(assert (forall ((U@@22 T@T) (V@@22 T@T) ) (! (= (type (|IMap#Empty| U@@22 V@@22)) (IMapType U@@22 V@@22)) :qid |funType:IMap#Empty| :pattern ( (|IMap#Empty| U@@22 V@@22)) )))
(assert (forall ((u@@17 T@U) (V@@23 T@T) ) (! (let ((U@@23 (type u@@17))) (not (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@23 V@@23)) u@@17)))) :qid |DafnyPre.1280:21| :skolemid |612| :pattern ( (let ((U@@23 (type u@@17))) (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@23 V@@23)) u@@17))) )))
(assert (forall ((arg0@@101 T@U) (arg1@@45 T@U) (arg2@@6 T@U) ) (! (let ((V@@24 (MapType0TypeInv1 (type arg1@@45)))) (let ((U@@24 (MapType0TypeInv0 (type arg0@@101)))) (= (type (|IMap#Glue| arg0@@101 arg1@@45 arg2@@6)) (IMapType U@@24 V@@24)))) :qid |funType:IMap#Glue| :pattern ( (|IMap#Glue| arg0@@101 arg1@@45 arg2@@6)) )))
(assert (forall ((a@@76 T@U) (b@@55 T@U) (t@@32 T@U) ) (! (let ((V@@25 (MapType0TypeInv1 (type b@@55)))) (let ((U@@25 (MapType0TypeInv0 (type a@@76)))) (=> (and (and (= (type a@@76) (MapType0Type U@@25 boolType)) (= (type b@@55) (MapType0Type U@@25 V@@25))) (= (type t@@32) TyType)) (= (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@32)) a@@76)))) :qid |DafnyPre.1285:21| :skolemid |613| :pattern ( (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@32))) )))
(assert (forall ((a@@77 T@U) (b@@56 T@U) (t@@33 T@U) ) (! (let ((V@@26 (MapType0TypeInv1 (type b@@56)))) (let ((U@@26 (MapType0TypeInv0 (type a@@77)))) (=> (and (and (= (type a@@77) (MapType0Type U@@26 boolType)) (= (type b@@56) (MapType0Type U@@26 V@@26))) (= (type t@@33) TyType)) (= (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@33)) b@@56)))) :qid |DafnyPre.1288:21| :skolemid |614| :pattern ( (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@33))) )))
(assert (forall ((a@@78 T@U) (b@@57 T@U) (t@@34 T@U) ) (! (let ((V@@27 (MapType0TypeInv1 (type b@@57)))) (let ((U@@27 (MapType0TypeInv0 (type a@@78)))) (=> (and (and (= (type a@@78) (MapType0Type U@@27 boolType)) (= (type b@@57) (MapType0Type U@@27 V@@27))) (= (type t@@34) TyType)) ($Is (|IMap#Glue| a@@78 b@@57 t@@34) t@@34)))) :qid |DafnyPre.1291:21| :skolemid |615| :pattern ( ($Is (|IMap#Glue| a@@78 b@@57 t@@34) t@@34)) )))
(assert (forall ((arg0@@102 T@U) (arg1@@46 T@U) (arg2@@7 T@U) ) (! (let ((V@@28 (type arg2@@7))) (let ((U@@28 (type arg1@@46))) (= (type (|IMap#Build| arg0@@102 arg1@@46 arg2@@7)) (IMapType U@@28 V@@28)))) :qid |funType:IMap#Build| :pattern ( (|IMap#Build| arg0@@102 arg1@@46 arg2@@7)) )))
(assert (forall ((m@@24 T@U) (u@@18 T@U) (|u'@@0| T@U) (v@@43 T@U) ) (! (let ((V@@29 (type v@@43))) (let ((U@@29 (type u@@18))) (=> (and (= (type m@@24) (IMapType U@@29 V@@29)) (= (type |u'@@0|) U@@29)) (and (=> (= |u'@@0| u@@18) (and (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|) v@@43))) (=> (not (= |u'@@0| u@@18)) (and (and (=> (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| m@@24) |u'@@0|))) (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@24) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)))) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|) (MapType0Select (|IMap#Elements| m@@24) |u'@@0|)))))))) :qid |DafnyPre.1301:21| :skolemid |616| :pattern ( (MapType0Select (|IMap#Domain| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Build| m@@24 u@@18 v@@43)) |u'@@0|)) )))
(assert (forall ((m@@25 T@U) (|m'@@2| T@U) ) (! (let ((V@@30 (IMapTypeInv1 (type m@@25)))) (let ((U@@30 (IMapTypeInv0 (type m@@25)))) (=> (and (= (type m@@25) (IMapType U@@30 V@@30)) (= (type |m'@@2|) (IMapType U@@30 V@@30))) (and (=> (|IMap#Equal| m@@25 |m'@@2|) (and (forall ((u@@19 T@U) ) (!  (=> (= (type u@@19) U@@30) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@19)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@19))) (=> (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@19)) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@19))))) :qid |DafnyPre.1312:36| :skolemid |617| :no-pattern (type u@@19) :no-pattern (U_2_int u@@19) :no-pattern (U_2_bool u@@19) )) (forall ((u@@20 T@U) ) (!  (=> (and (= (type u@@20) U@@30) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@20))) (= (MapType0Select (|IMap#Elements| m@@25) u@@20) (MapType0Select (|IMap#Elements| |m'@@2|) u@@20))) :qid |DafnyPre.1313:35| :skolemid |618| :no-pattern (type u@@20) :no-pattern (U_2_int u@@20) :no-pattern (U_2_bool u@@20) )))) (=> (and (forall ((u@@21 T@U) ) (!  (=> (= (type u@@21) U@@30) (and (=> (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@21)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@21))) (=> (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@21)) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@21))))) :qid |DafnyPre.1312:36| :skolemid |617| :no-pattern (type u@@21) :no-pattern (U_2_int u@@21) :no-pattern (U_2_bool u@@21) )) (forall ((u@@22 T@U) ) (!  (=> (and (= (type u@@22) U@@30) (U_2_bool (MapType0Select (|IMap#Domain| m@@25) u@@22))) (= (MapType0Select (|IMap#Elements| m@@25) u@@22) (MapType0Select (|IMap#Elements| |m'@@2|) u@@22))) :qid |DafnyPre.1313:35| :skolemid |618| :no-pattern (type u@@22) :no-pattern (U_2_int u@@22) :no-pattern (U_2_bool u@@22) ))) (|IMap#Equal| m@@25 |m'@@2|)))))) :qid |DafnyPre.1310:21| :skolemid |619| :pattern ( (|IMap#Equal| m@@25 |m'@@2|)) )))
(assert (forall ((m@@26 T@U) (|m'@@3| T@U) ) (! (let ((V@@31 (IMapTypeInv1 (type m@@26)))) (let ((U@@31 (IMapTypeInv0 (type m@@26)))) (=> (and (and (= (type m@@26) (IMapType U@@31 V@@31)) (= (type |m'@@3|) (IMapType U@@31 V@@31))) (|IMap#Equal| m@@26 |m'@@3|)) (= m@@26 |m'@@3|)))) :qid |DafnyPre.1315:21| :skolemid |620| :pattern ( (|IMap#Equal| m@@26 |m'@@3|)) )))
(assert (forall ((x@@41 Int) (y@@12 Int) ) (! (= (INTERNAL_add_boogie x@@41 y@@12) (+ x@@41 y@@12)) :qid |DafnyPre.1323:30| :skolemid |621| :pattern ( (INTERNAL_add_boogie x@@41 y@@12)) )))
(assert (forall ((x@@42 Int) (y@@13 Int) ) (! (= (INTERNAL_sub_boogie x@@42 y@@13) (- x@@42 y@@13)) :qid |DafnyPre.1324:30| :skolemid |622| :pattern ( (INTERNAL_sub_boogie x@@42 y@@13)) )))
(assert (forall ((x@@43 Int) (y@@14 Int) ) (! (= (INTERNAL_mul_boogie x@@43 y@@14) (* x@@43 y@@14)) :qid |DafnyPre.1325:30| :skolemid |623| :pattern ( (INTERNAL_mul_boogie x@@43 y@@14)) )))
(assert (forall ((x@@44 Int) (y@@15 Int) ) (! (= (INTERNAL_div_boogie x@@44 y@@15) (div x@@44 y@@15)) :qid |DafnyPre.1326:30| :skolemid |624| :pattern ( (INTERNAL_div_boogie x@@44 y@@15)) )))
(assert (forall ((x@@45 Int) (y@@16 Int) ) (! (= (INTERNAL_mod_boogie x@@45 y@@16) (mod x@@45 y@@16)) :qid |DafnyPre.1327:30| :skolemid |625| :pattern ( (INTERNAL_mod_boogie x@@45 y@@16)) )))
(assert (forall ((x@@46 Int) (y@@17 Int) ) (!  (and (=> (INTERNAL_lt_boogie x@@46 y@@17) (< x@@46 y@@17)) (=> (< x@@46 y@@17) (INTERNAL_lt_boogie x@@46 y@@17))) :qid |DafnyPre.1328:51| :skolemid |626| :pattern ( (INTERNAL_lt_boogie x@@46 y@@17)) )))
(assert (forall ((x@@47 Int) (y@@18 Int) ) (!  (and (=> (INTERNAL_le_boogie x@@47 y@@18) (<= x@@47 y@@18)) (=> (<= x@@47 y@@18) (INTERNAL_le_boogie x@@47 y@@18))) :qid |DafnyPre.1329:51| :skolemid |627| :pattern ( (INTERNAL_le_boogie x@@47 y@@18)) )))
(assert (forall ((x@@48 Int) (y@@19 Int) ) (!  (and (=> (INTERNAL_gt_boogie x@@48 y@@19) (> x@@48 y@@19)) (=> (> x@@48 y@@19) (INTERNAL_gt_boogie x@@48 y@@19))) :qid |DafnyPre.1330:51| :skolemid |628| :pattern ( (INTERNAL_gt_boogie x@@48 y@@19)) )))
(assert (forall ((x@@49 Int) (y@@20 Int) ) (!  (and (=> (INTERNAL_ge_boogie x@@49 y@@20) (>= x@@49 y@@20)) (=> (>= x@@49 y@@20) (INTERNAL_ge_boogie x@@49 y@@20))) :qid |DafnyPre.1331:51| :skolemid |629| :pattern ( (INTERNAL_ge_boogie x@@49 y@@20)) )))
(assert (forall ((x@@50 Int) (y@@21 Int) ) (! (= (Mul x@@50 y@@21) (* x@@50 y@@21)) :qid |DafnyPre.1333:14| :skolemid |630| :pattern ( (Mul x@@50 y@@21)) )))
(assert (forall ((x@@51 Int) (y@@22 Int) ) (! (= (Div x@@51 y@@22) (div x@@51 y@@22)) :qid |DafnyPre.1334:14| :skolemid |631| :pattern ( (Div x@@51 y@@22)) )))
(assert (forall ((x@@52 Int) (y@@23 Int) ) (! (= (Mod x@@52 y@@23) (mod x@@52 y@@23)) :qid |DafnyPre.1335:14| :skolemid |632| :pattern ( (Mod x@@52 y@@23)) )))
(assert (forall ((x@@53 Int) (y@@24 Int) ) (! (= (Add x@@53 y@@24) (+ x@@53 y@@24)) :qid |DafnyPre.1336:14| :skolemid |633| :pattern ( (Add x@@53 y@@24)) )))
(assert (forall ((x@@54 Int) (y@@25 Int) ) (! (= (Sub x@@54 y@@25) (- x@@54 y@@25)) :qid |DafnyPre.1337:14| :skolemid |634| :pattern ( (Sub x@@54 y@@25)) )))
(assert (forall ((A@@2 T@U) (B T@U) (a@@79 T@U) (b@@58 T@U) ) (!  (=> (and (and (and (and (= (type A@@2) TyType) (= (type B) TyType)) (= (type a@@79) BoxType)) (= (type b@@58) BoxType)) (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58)) (< (BoxRank a@@79) (BoxRank b@@58))) :qid |DafnyPre.1378:15| :skolemid |635| :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank a@@79)) :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank b@@58)) )))
(assert (forall ((A@@3 T@U) (B@@0 T@U) (a@@80 T@U) (b@@59 T@U) ) (!  (=> (and (and (and (and (= (type A@@3) TyType) (= (type B@@0) TyType)) (= (type a@@80) BoxType)) (= (type b@@59) (SeqType BoxType))) (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59))) (< (BoxRank a@@80) (|Seq#Rank| b@@59))) :qid |DafnyPre.1383:15| :skolemid |636| :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (BoxRank a@@80)) :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (|Seq#Rank| b@@59)) )))
(assert (forall ((A@@4 T@U) (B@@1 T@U) (a@@81 T@U) (b@@60 T@U) ) (!  (=> (and (and (and (and (= (type A@@4) TyType) (= (type B@@1) TyType)) (= (type a@@81) (SeqType BoxType))) (= (type b@@60) BoxType)) (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60)) (< (|Seq#Rank| a@@81) (BoxRank b@@60))) :qid |DafnyPre.1388:15| :skolemid |637| :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (|Seq#Rank| a@@81)) :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (BoxRank b@@60)) )))
(assert (= (type Tclass._System.nat) TyType))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (forall ((bx@@34 T@U) ) (!  (=> (and (= (type bx@@34) BoxType) ($IsBox bx@@34 Tclass._System.nat)) (and (= ($Box ($Unbox intType bx@@34)) bx@@34) ($Is ($Unbox intType bx@@34) Tclass._System.nat))) :qid |unknown.0:0| :skolemid |638| :pattern ( ($IsBox bx@@34 Tclass._System.nat)) )))
(assert (forall ((|x#0| T@U) ) (!  (=> (= (type |x#0|) intType) (and (=> ($Is |x#0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0|))) (=> (<= (LitInt 0) (U_2_int |x#0|)) ($Is |x#0| Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |639| :pattern ( ($Is |x#0| Tclass._System.nat)) )))
(assert (forall ((|x#0@@0| T@U) ($h T@U) ) (!  (=> (and (= (type |x#0@@0|) intType) (= (type $h) (MapType0Type refType MapType1Type))) ($IsAlloc |x#0@@0| Tclass._System.nat $h)) :qid |unknown.0:0| :skolemid |640| :pattern ( ($IsAlloc |x#0@@0| Tclass._System.nat $h)) )))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (forall ((bx@@35 T@U) ) (!  (=> (and (= (type bx@@35) BoxType) ($IsBox bx@@35 Tclass._System.object?)) (and (= ($Box ($Unbox refType bx@@35)) bx@@35) ($Is ($Unbox refType bx@@35) Tclass._System.object?))) :qid |unknown.0:0| :skolemid |641| :pattern ( ($IsBox bx@@35 Tclass._System.object?)) )))
(assert (forall (($o T@U) ) (!  (=> (= (type $o) refType) ($Is $o Tclass._System.object?)) :qid |unknown.0:0| :skolemid |642| :pattern ( ($Is $o Tclass._System.object?)) )))
(assert (= (type null) refType))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (!  (=> (and (= (type $o@@0) refType) (= (type $h@@0) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@0 Tclass._System.object? $h@@0) (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc)))) (=> (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc))) ($IsAlloc $o@@0 Tclass._System.object? $h@@0)))) :qid |unknown.0:0| :skolemid |643| :pattern ( ($IsAlloc $o@@0 Tclass._System.object? $h@@0)) )))
(assert (= (type Tclass._System.object) TyType))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (forall ((bx@@36 T@U) ) (!  (=> (and (= (type bx@@36) BoxType) ($IsBox bx@@36 Tclass._System.object)) (and (= ($Box ($Unbox refType bx@@36)) bx@@36) ($Is ($Unbox refType bx@@36) Tclass._System.object))) :qid |unknown.0:0| :skolemid |644| :pattern ( ($IsBox bx@@36 Tclass._System.object)) )))
(assert (forall ((|c#0| T@U) ) (!  (=> (= (type |c#0|) refType) (and (=> ($Is |c#0| Tclass._System.object) (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null)))) (=> (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null))) ($Is |c#0| Tclass._System.object)))) :qid |unknown.0:0| :skolemid |645| :pattern ( ($Is |c#0| Tclass._System.object)) )))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (!  (=> (and (= (type |c#0@@0|) refType) (= (type $h@@1) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@0| Tclass._System.object $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1)) (=> ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)))) :qid |unknown.0:0| :skolemid |646| :pattern ( ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)) )))
(assert (forall ((arg0@@103 T@U) ) (! (= (type (Tclass._System.array? arg0@@103)) TyType) :qid |funType:Tclass._System.array?| :pattern ( (Tclass._System.array? arg0@@103)) )))
(assert (forall ((|#$arg| T@U) ) (!  (=> (= (type |#$arg|) TyType) (= (Tag (Tclass._System.array? |#$arg|)) Tagclass._System.array?)) :qid |unknown.0:0| :skolemid |647| :pattern ( (Tclass._System.array? |#$arg|)) )))
(assert (forall ((arg0@@104 T@U) ) (! (= (type (Tclass._System.array?_0 arg0@@104)) TyType) :qid |funType:Tclass._System.array?_0| :pattern ( (Tclass._System.array?_0 arg0@@104)) )))
(assert (forall ((|#$arg@@0| T@U) ) (!  (=> (= (type |#$arg@@0|) TyType) (= (Tclass._System.array?_0 (Tclass._System.array? |#$arg@@0|)) |#$arg@@0|)) :qid |unknown.0:0| :skolemid |648| :pattern ( (Tclass._System.array? |#$arg@@0|)) )))
(assert (forall ((|#$arg@@1| T@U) (bx@@37 T@U) ) (!  (=> (and (and (= (type |#$arg@@1|) TyType) (= (type bx@@37) BoxType)) ($IsBox bx@@37 (Tclass._System.array? |#$arg@@1|))) (and (= ($Box ($Unbox refType bx@@37)) bx@@37) ($Is ($Unbox refType bx@@37) (Tclass._System.array? |#$arg@@1|)))) :qid |unknown.0:0| :skolemid |649| :pattern ( ($IsBox bx@@37 (Tclass._System.array? |#$arg@@1|))) )))
(assert (forall ((arg0@@105 T@U) ) (! (= (type (dtype arg0@@105)) TyType) :qid |funType:dtype| :pattern ( (dtype arg0@@105)) )))
(assert (forall ((|#$arg@@2| T@U) ($h@@2 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and (= (type |#$arg@@2|) TyType) (= (type $h@@2) (MapType0Type refType MapType1Type))) (= (type $o@@1) refType)) (and (and ($IsGoodHeap $h@@2) (and (not (= $o@@1 null)) (= (dtype $o@@1) (Tclass._System.array? |#$arg@@2|)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1))))) ($IsBox (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) |#$arg@@2|)) :qid |unknown.0:0| :skolemid |650| :pattern ( (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) (Tclass._System.array? |#$arg@@2|)) )))
(assert (forall ((|#$arg@@3| T@U) ($h@@3 T@U) ($o@@2 T@U) ($i0@@0 Int) ) (!  (=> (and (and (= (type |#$arg@@3|) TyType) (= (type $h@@3) (MapType0Type refType MapType1Type))) (= (type $o@@2) refType)) (=> (and (and (and ($IsGoodHeap $h@@3) (and (not (= $o@@2 null)) (= (dtype $o@@2) (Tclass._System.array? |#$arg@@3|)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@2)))) (U_2_bool (MapType1Select (MapType0Select $h@@3 $o@@2) alloc))) ($IsAllocBox (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) |#$arg@@3| $h@@3))) :qid |unknown.0:0| :skolemid |651| :pattern ( (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) (Tclass._System.array? |#$arg@@3|)) )))
(assert (forall ((|#$arg@@4| T@U) ($o@@3 T@U) ) (!  (=> (and (= (type |#$arg@@4|) TyType) (= (type $o@@3) refType)) (and (=> ($Is $o@@3 (Tclass._System.array? |#$arg@@4|)) (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? |#$arg@@4|)))) (=> (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? |#$arg@@4|))) ($Is $o@@3 (Tclass._System.array? |#$arg@@4|))))) :qid |unknown.0:0| :skolemid |652| :pattern ( ($Is $o@@3 (Tclass._System.array? |#$arg@@4|))) )))
(assert (forall ((|#$arg@@5| T@U) ($o@@4 T@U) ($h@@4 T@U) ) (!  (=> (and (and (= (type |#$arg@@5|) TyType) (= (type $o@@4) refType)) (= (type $h@@4) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4) (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc)))) (=> (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc))) ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4)))) :qid |unknown.0:0| :skolemid |653| :pattern ( ($IsAlloc $o@@4 (Tclass._System.array? |#$arg@@5|) $h@@4)) )))
(assert (forall ((|#$arg@@6| T@U) ($o@@5 T@U) ) (!  (=> (and (and (= (type |#$arg@@6|) TyType) (= (type $o@@5) refType)) (and (not (= $o@@5 null)) (= (dtype $o@@5) (Tclass._System.array? |#$arg@@6|)))) ($Is (int_2_U (_System.array.Length $o@@5)) TInt)) :qid |unknown.0:0| :skolemid |654| :pattern ( (_System.array.Length $o@@5) (Tclass._System.array? |#$arg@@6|)) )))
(assert (forall ((|#$arg@@7| T@U) ($h@@5 T@U) ($o@@6 T@U) ) (!  (=> (and (and (and (= (type |#$arg@@7|) TyType) (= (type $h@@5) (MapType0Type refType MapType1Type))) (= (type $o@@6) refType)) (and (and ($IsGoodHeap $h@@5) (and (not (= $o@@6 null)) (= (dtype $o@@6) (Tclass._System.array? |#$arg@@7|)))) (U_2_bool (MapType1Select (MapType0Select $h@@5 $o@@6) alloc)))) ($IsAlloc (int_2_U (_System.array.Length $o@@6)) TInt $h@@5)) :qid |unknown.0:0| :skolemid |655| :pattern ( (_System.array.Length $o@@6) (MapType1Select (MapType0Select $h@@5 $o@@6) alloc) (Tclass._System.array? |#$arg@@7|)) )))
(assert (forall ((arg0@@106 T@U) ) (! (= (type (Tclass._System.array arg0@@106)) TyType) :qid |funType:Tclass._System.array| :pattern ( (Tclass._System.array arg0@@106)) )))
(assert (forall ((_System.array$arg T@U) ) (!  (=> (= (type _System.array$arg) TyType) (= (Tag (Tclass._System.array _System.array$arg)) Tagclass._System.array)) :qid |unknown.0:0| :skolemid |656| :pattern ( (Tclass._System.array _System.array$arg)) )))
(assert (forall ((arg0@@107 T@U) ) (! (= (type (Tclass._System.array_0 arg0@@107)) TyType) :qid |funType:Tclass._System.array_0| :pattern ( (Tclass._System.array_0 arg0@@107)) )))
(assert (forall ((_System.array$arg@@0 T@U) ) (!  (=> (= (type _System.array$arg@@0) TyType) (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@0)) _System.array$arg@@0)) :qid |unknown.0:0| :skolemid |657| :pattern ( (Tclass._System.array _System.array$arg@@0)) )))
(assert (forall ((_System.array$arg@@1 T@U) (bx@@38 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@1) TyType) (= (type bx@@38) BoxType)) ($IsBox bx@@38 (Tclass._System.array _System.array$arg@@1))) (and (= ($Box ($Unbox refType bx@@38)) bx@@38) ($Is ($Unbox refType bx@@38) (Tclass._System.array _System.array$arg@@1)))) :qid |unknown.0:0| :skolemid |658| :pattern ( ($IsBox bx@@38 (Tclass._System.array _System.array$arg@@1))) )))
(assert (forall ((_System.array$arg@@2 T@U) (|c#0@@1| T@U) ) (!  (=> (and (= (type _System.array$arg@@2) TyType) (= (type |c#0@@1|) refType)) (and (=> ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2)) (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@2)) (not (= |c#0@@1| null)))) (=> (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@2)) (not (= |c#0@@1| null))) ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2))))) :qid |unknown.0:0| :skolemid |659| :pattern ( ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@2))) )))
(assert (forall ((_System.array$arg@@3 T@U) (|c#0@@2| T@U) ($h@@6 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@3) TyType) (= (type |c#0@@2|) refType)) (= (type $h@@6) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@3) $h@@6)) (=> ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@3) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6)))) :qid |unknown.0:0| :skolemid |660| :pattern ( ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@3) $h@@6)) )))
(assert (forall ((arg0@@108 T@U) ) (! (= (type (Tclass._System.___hFunc0 arg0@@108)) TyType) :qid |funType:Tclass._System.___hFunc0| :pattern ( (Tclass._System.___hFunc0 arg0@@108)) )))
(assert (forall ((|#$R| T@U) ) (!  (=> (= (type |#$R|) TyType) (= (Tag (Tclass._System.___hFunc0 |#$R|)) Tagclass._System.___hFunc0)) :qid |unknown.0:0| :skolemid |661| :pattern ( (Tclass._System.___hFunc0 |#$R|)) )))
(assert (forall ((arg0@@109 T@U) ) (! (= (type (Tclass._System.___hFunc0_0 arg0@@109)) TyType) :qid |funType:Tclass._System.___hFunc0_0| :pattern ( (Tclass._System.___hFunc0_0 arg0@@109)) )))
(assert (forall ((|#$R@@0| T@U) ) (!  (=> (= (type |#$R@@0|) TyType) (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@0|)) |#$R@@0|)) :qid |unknown.0:0| :skolemid |662| :pattern ( (Tclass._System.___hFunc0 |#$R@@0|)) )))
(assert (forall ((|#$R@@1| T@U) (bx@@39 T@U) ) (!  (=> (and (and (= (type |#$R@@1|) TyType) (= (type bx@@39) BoxType)) ($IsBox bx@@39 (Tclass._System.___hFunc0 |#$R@@1|))) (and (= ($Box ($Unbox HandleTypeType bx@@39)) bx@@39) ($Is ($Unbox HandleTypeType bx@@39) (Tclass._System.___hFunc0 |#$R@@1|)))) :qid |unknown.0:0| :skolemid |663| :pattern ( ($IsBox bx@@39 (Tclass._System.___hFunc0 |#$R@@1|))) )))
(assert  (and (forall ((arg0@@110 T@U) (arg1@@47 T@U) (arg2@@8 T@U) ) (! (= (type (Apply0 arg0@@110 arg1@@47 arg2@@8)) BoxType) :qid |funType:Apply0| :pattern ( (Apply0 arg0@@110 arg1@@47 arg2@@8)) )) (forall ((arg0@@111 T@U) (arg1@@48 T@U) (arg2@@9 T@U) ) (! (= (type (Handle0 arg0@@111 arg1@@48 arg2@@9)) HandleTypeType) :qid |funType:Handle0| :pattern ( (Handle0 arg0@@111 arg1@@48 arg2@@9)) ))))
(assert (forall ((t0@@12 T@U) (heap@@1 T@U) (h@@20 T@U) (r@@6 T@U) (rd T@U) ) (!  (=> (and (and (and (and (= (type t0@@12) TyType) (= (type heap@@1) (MapType0Type refType MapType1Type))) (= (type h@@20) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@6) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (Apply0 t0@@12 heap@@1 (Handle0 h@@20 r@@6 rd)) (MapType0Select h@@20 heap@@1))) :qid |unknown.0:0| :skolemid |664| :pattern ( (Apply0 t0@@12 heap@@1 (Handle0 h@@20 r@@6 rd))) )))
(assert (forall ((t0@@13 T@U) (heap@@2 T@U) (h@@21 T@U) (r@@7 T@U) (rd@@0 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@13) TyType) (= (type heap@@2) (MapType0Type refType MapType1Type))) (= (type h@@21) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@7) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@0) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (U_2_bool (MapType0Select r@@7 heap@@2))) (Requires0 t0@@13 heap@@2 (Handle0 h@@21 r@@7 rd@@0))) :qid |unknown.0:0| :skolemid |665| :pattern ( (Requires0 t0@@13 heap@@2 (Handle0 h@@21 r@@7 rd@@0))) )))
(assert (forall ((arg0@@112 T@U) (arg1@@49 T@U) (arg2@@10 T@U) ) (! (= (type (Reads0 arg0@@112 arg1@@49 arg2@@10)) (MapType0Type BoxType boolType)) :qid |funType:Reads0| :pattern ( (Reads0 arg0@@112 arg1@@49 arg2@@10)) )))
(assert (forall ((t0@@14 T@U) (heap@@3 T@U) (h@@22 T@U) (r@@8 T@U) (rd@@1 T@U) (bx@@40 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@14) TyType) (= (type heap@@3) (MapType0Type refType MapType1Type))) (= (type h@@22) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@8) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@1) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (type bx@@40) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40)) (U_2_bool (MapType0Select (MapType0Select rd@@1 heap@@3) bx@@40))) (=> (U_2_bool (MapType0Select (MapType0Select rd@@1 heap@@3) bx@@40)) (U_2_bool (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40))))) :qid |unknown.0:0| :skolemid |666| :pattern ( (MapType0Select (Reads0 t0@@14 heap@@3 (Handle0 h@@22 r@@8 rd@@1)) bx@@40)) )))
(assert (forall ((t0@@15 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@5 T@U) ) (!  (=> (and (and (and (and (= (type t0@@15) TyType) (= (type h0@@0) (MapType0Type refType MapType1Type))) (= (type h1@@0) (MapType0Type refType MapType1Type))) (= (type f@@5) HandleTypeType)) (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) ($Is f@@5 (Tclass._System.___hFunc0 t0@@15))) (forall ((o@@54 T@U) (fld T@U) ) (! (let ((a@@82 (FieldTypeInv0 (type fld)))) (=> (and (and (= (type o@@54) refType) (= (type fld) (FieldType a@@82))) (and (not (= o@@54 null)) (U_2_bool (MapType0Select (Reads0 t0@@15 h0@@0 f@@5) ($Box o@@54))))) (= (MapType1Select (MapType0Select h0@@0 o@@54) fld) (MapType1Select (MapType0Select h1@@0 o@@54) fld)))) :qid |unknown.0:0| :skolemid |667| :no-pattern (type o@@54) :no-pattern (type fld) :no-pattern (U_2_int o@@54) :no-pattern (U_2_bool o@@54) :no-pattern (U_2_int fld) :no-pattern (U_2_bool fld) )))) (= (Reads0 t0@@15 h0@@0 f@@5) (Reads0 t0@@15 h1@@0 f@@5))) :qid |unknown.0:0| :skolemid |668| :pattern ( ($HeapSucc h0@@0 h1@@0) (Reads0 t0@@15 h1@@0 f@@5)) )))
(assert (forall ((t0@@16 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@6 T@U) ) (!  (=> (and (and (and (and (= (type t0@@16) TyType) (= (type h0@@1) (MapType0Type refType MapType1Type))) (= (type h1@@1) (MapType0Type refType MapType1Type))) (= (type f@@6) HandleTypeType)) (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) ($Is f@@6 (Tclass._System.___hFunc0 t0@@16))) (forall ((o@@55 T@U) (fld@@0 T@U) ) (! (let ((a@@83 (FieldTypeInv0 (type fld@@0)))) (=> (and (and (= (type o@@55) refType) (= (type fld@@0) (FieldType a@@83))) (and (not (= o@@55 null)) (U_2_bool (MapType0Select (Reads0 t0@@16 h1@@1 f@@6) ($Box o@@55))))) (= (MapType1Select (MapType0Select h0@@1 o@@55) fld@@0) (MapType1Select (MapType0Select h1@@1 o@@55) fld@@0)))) :qid |unknown.0:0| :skolemid |669| :no-pattern (type o@@55) :no-pattern (type fld@@0) :no-pattern (U_2_int o@@55) :no-pattern (U_2_bool o@@55) :no-pattern (U_2_int fld@@0) :no-pattern (U_2_bool fld@@0) )))) (= (Reads0 t0@@16 h0@@1 f@@6) (Reads0 t0@@16 h1@@1 f@@6))) :qid |unknown.0:0| :skolemid |670| :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads0 t0@@16 h1@@1 f@@6)) )))
(assert (forall ((t0@@17 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@7 T@U) ) (!  (=> (and (and (and (and (= (type t0@@17) TyType) (= (type h0@@2) (MapType0Type refType MapType1Type))) (= (type h1@@2) (MapType0Type refType MapType1Type))) (= (type f@@7) HandleTypeType)) (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) ($Is f@@7 (Tclass._System.___hFunc0 t0@@17))) (forall ((o@@56 T@U) (fld@@1 T@U) ) (! (let ((a@@84 (FieldTypeInv0 (type fld@@1)))) (=> (and (and (= (type o@@56) refType) (= (type fld@@1) (FieldType a@@84))) (and (not (= o@@56 null)) (U_2_bool (MapType0Select (Reads0 t0@@17 h0@@2 f@@7) ($Box o@@56))))) (= (MapType1Select (MapType0Select h0@@2 o@@56) fld@@1) (MapType1Select (MapType0Select h1@@2 o@@56) fld@@1)))) :qid |unknown.0:0| :skolemid |671| :no-pattern (type o@@56) :no-pattern (type fld@@1) :no-pattern (U_2_int o@@56) :no-pattern (U_2_bool o@@56) :no-pattern (U_2_int fld@@1) :no-pattern (U_2_bool fld@@1) )))) (and (=> (Requires0 t0@@17 h0@@2 f@@7) (Requires0 t0@@17 h1@@2 f@@7)) (=> (Requires0 t0@@17 h1@@2 f@@7) (Requires0 t0@@17 h0@@2 f@@7)))) :qid |unknown.0:0| :skolemid |672| :pattern ( ($HeapSucc h0@@2 h1@@2) (Requires0 t0@@17 h1@@2 f@@7)) )))
(assert (forall ((t0@@18 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@8 T@U) ) (!  (=> (and (and (and (and (= (type t0@@18) TyType) (= (type h0@@3) (MapType0Type refType MapType1Type))) (= (type h1@@3) (MapType0Type refType MapType1Type))) (= (type f@@8) HandleTypeType)) (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) ($Is f@@8 (Tclass._System.___hFunc0 t0@@18))) (forall ((o@@57 T@U) (fld@@2 T@U) ) (! (let ((a@@85 (FieldTypeInv0 (type fld@@2)))) (=> (and (and (= (type o@@57) refType) (= (type fld@@2) (FieldType a@@85))) (and (not (= o@@57 null)) (U_2_bool (MapType0Select (Reads0 t0@@18 h1@@3 f@@8) ($Box o@@57))))) (= (MapType1Select (MapType0Select h0@@3 o@@57) fld@@2) (MapType1Select (MapType0Select h1@@3 o@@57) fld@@2)))) :qid |unknown.0:0| :skolemid |673| :no-pattern (type o@@57) :no-pattern (type fld@@2) :no-pattern (U_2_int o@@57) :no-pattern (U_2_bool o@@57) :no-pattern (U_2_int fld@@2) :no-pattern (U_2_bool fld@@2) )))) (and (=> (Requires0 t0@@18 h0@@3 f@@8) (Requires0 t0@@18 h1@@3 f@@8)) (=> (Requires0 t0@@18 h1@@3 f@@8) (Requires0 t0@@18 h0@@3 f@@8)))) :qid |unknown.0:0| :skolemid |674| :pattern ( ($HeapSucc h0@@3 h1@@3) (Requires0 t0@@18 h1@@3 f@@8)) )))
(assert (forall ((t0@@19 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@9 T@U) ) (!  (=> (and (and (and (and (= (type t0@@19) TyType) (= (type h0@@4) (MapType0Type refType MapType1Type))) (= (type h1@@4) (MapType0Type refType MapType1Type))) (= (type f@@9) HandleTypeType)) (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) ($Is f@@9 (Tclass._System.___hFunc0 t0@@19))) (forall ((o@@58 T@U) (fld@@3 T@U) ) (! (let ((a@@86 (FieldTypeInv0 (type fld@@3)))) (=> (and (and (= (type o@@58) refType) (= (type fld@@3) (FieldType a@@86))) (and (not (= o@@58 null)) (U_2_bool (MapType0Select (Reads0 t0@@19 h0@@4 f@@9) ($Box o@@58))))) (= (MapType1Select (MapType0Select h0@@4 o@@58) fld@@3) (MapType1Select (MapType0Select h1@@4 o@@58) fld@@3)))) :qid |unknown.0:0| :skolemid |675| :no-pattern (type o@@58) :no-pattern (type fld@@3) :no-pattern (U_2_int o@@58) :no-pattern (U_2_bool o@@58) :no-pattern (U_2_int fld@@3) :no-pattern (U_2_bool fld@@3) )))) (= (Apply0 t0@@19 h0@@4 f@@9) (Apply0 t0@@19 h1@@4 f@@9))) :qid |unknown.0:0| :skolemid |676| :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply0 t0@@19 h1@@4 f@@9)) )))
(assert (forall ((t0@@20 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@10 T@U) ) (!  (=> (and (and (and (and (= (type t0@@20) TyType) (= (type h0@@5) (MapType0Type refType MapType1Type))) (= (type h1@@5) (MapType0Type refType MapType1Type))) (= (type f@@10) HandleTypeType)) (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) ($Is f@@10 (Tclass._System.___hFunc0 t0@@20))) (forall ((o@@59 T@U) (fld@@4 T@U) ) (! (let ((a@@87 (FieldTypeInv0 (type fld@@4)))) (=> (and (and (= (type o@@59) refType) (= (type fld@@4) (FieldType a@@87))) (and (not (= o@@59 null)) (U_2_bool (MapType0Select (Reads0 t0@@20 h1@@5 f@@10) ($Box o@@59))))) (= (MapType1Select (MapType0Select h0@@5 o@@59) fld@@4) (MapType1Select (MapType0Select h1@@5 o@@59) fld@@4)))) :qid |unknown.0:0| :skolemid |677| :no-pattern (type o@@59) :no-pattern (type fld@@4) :no-pattern (U_2_int o@@59) :no-pattern (U_2_bool o@@59) :no-pattern (U_2_int fld@@4) :no-pattern (U_2_bool fld@@4) )))) (= (Apply0 t0@@20 h0@@5 f@@10) (Apply0 t0@@20 h1@@5 f@@10))) :qid |unknown.0:0| :skolemid |678| :pattern ( ($HeapSucc h0@@5 h1@@5) (Apply0 t0@@20 h1@@5 f@@10)) )))
(assert (forall ((t0@@21 T@U) (heap@@4 T@U) (f@@11 T@U) ) (!  (=> (and (and (and (= (type t0@@21) TyType) (= (type heap@@4) (MapType0Type refType MapType1Type))) (= (type f@@11) HandleTypeType)) (and ($IsGoodHeap heap@@4) ($Is f@@11 (Tclass._System.___hFunc0 t0@@21)))) (and (=> (|Set#Equal| (Reads0 t0@@21 $OneHeap f@@11) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@21 heap@@4 f@@11) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads0 t0@@21 heap@@4 f@@11) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@21 $OneHeap f@@11) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |679| :pattern ( (Reads0 t0@@21 $OneHeap f@@11) ($IsGoodHeap heap@@4)) :pattern ( (Reads0 t0@@21 heap@@4 f@@11)) )))
(assert (forall ((t0@@22 T@U) (heap@@5 T@U) (f@@12 T@U) ) (!  (=> (and (and (and (= (type t0@@22) TyType) (= (type heap@@5) (MapType0Type refType MapType1Type))) (= (type f@@12) HandleTypeType)) (and (and ($IsGoodHeap heap@@5) ($Is f@@12 (Tclass._System.___hFunc0 t0@@22))) (|Set#Equal| (Reads0 t0@@22 $OneHeap f@@12) (|Set#Empty| BoxType)))) (and (=> (Requires0 t0@@22 $OneHeap f@@12) (Requires0 t0@@22 heap@@5 f@@12)) (=> (Requires0 t0@@22 heap@@5 f@@12) (Requires0 t0@@22 $OneHeap f@@12)))) :qid |unknown.0:0| :skolemid |680| :pattern ( (Requires0 t0@@22 $OneHeap f@@12) ($IsGoodHeap heap@@5)) :pattern ( (Requires0 t0@@22 heap@@5 f@@12)) )))
(assert (forall ((f@@13 T@U) (t0@@23 T@U) ) (!  (=> (and (= (type f@@13) HandleTypeType) (= (type t0@@23) TyType)) (and (=> ($Is f@@13 (Tclass._System.___hFunc0 t0@@23)) (forall ((h@@23 T@U) ) (!  (=> (= (type h@@23) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@23) (Requires0 t0@@23 h@@23 f@@13)) ($IsBox (Apply0 t0@@23 h@@23 f@@13) t0@@23))) :qid |DafnyPre.521:12| :skolemid |681| :pattern ( (Apply0 t0@@23 h@@23 f@@13)) ))) (=> (forall ((h@@24 T@U) ) (!  (=> (= (type h@@24) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@24) (Requires0 t0@@23 h@@24 f@@13)) ($IsBox (Apply0 t0@@23 h@@24 f@@13) t0@@23))) :qid |DafnyPre.521:12| :skolemid |681| :pattern ( (Apply0 t0@@23 h@@24 f@@13)) )) ($Is f@@13 (Tclass._System.___hFunc0 t0@@23))))) :qid |unknown.0:0| :skolemid |682| :pattern ( ($Is f@@13 (Tclass._System.___hFunc0 t0@@23))) )))
(assert (forall ((f@@14 T@U) (t0@@24 T@U) (u0 T@U) ) (!  (=> (and (and (and (= (type f@@14) HandleTypeType) (= (type t0@@24) TyType)) (= (type u0) TyType)) (and ($Is f@@14 (Tclass._System.___hFunc0 t0@@24)) (forall ((bx@@41 T@U) ) (!  (=> (and (= (type bx@@41) BoxType) ($IsBox bx@@41 t0@@24)) ($IsBox bx@@41 u0)) :qid |unknown.0:0| :skolemid |683| :pattern ( ($IsBox bx@@41 t0@@24)) :pattern ( ($IsBox bx@@41 u0)) )))) ($Is f@@14 (Tclass._System.___hFunc0 u0))) :qid |unknown.0:0| :skolemid |684| :pattern ( ($Is f@@14 (Tclass._System.___hFunc0 t0@@24)) ($Is f@@14 (Tclass._System.___hFunc0 u0))) )))
(assert (forall ((f@@15 T@U) (t0@@25 T@U) (h@@25 T@U) ) (!  (=> (and (and (and (= (type f@@15) HandleTypeType) (= (type t0@@25) TyType)) (= (type h@@25) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@25)) (and (=> ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25) (=> (Requires0 t0@@25 h@@25 f@@15) (forall ((r@@9 T@U) ) (!  (=> (= (type r@@9) refType) (=> (and (not (= r@@9 null)) (U_2_bool (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@9)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@9) alloc)))) :qid |unknown.0:0| :skolemid |685| :pattern ( (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@9))) )))) (=> (=> (Requires0 t0@@25 h@@25 f@@15) (forall ((r@@10 T@U) ) (!  (=> (= (type r@@10) refType) (=> (and (not (= r@@10 null)) (U_2_bool (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@10)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@10) alloc)))) :qid |unknown.0:0| :skolemid |685| :pattern ( (MapType0Select (Reads0 t0@@25 h@@25 f@@15) ($Box r@@10))) ))) ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25)))) :qid |unknown.0:0| :skolemid |686| :pattern ( ($IsAlloc f@@15 (Tclass._System.___hFunc0 t0@@25) h@@25)) )))
(assert (forall ((f@@16 T@U) (t0@@26 T@U) (h@@26 T@U) ) (!  (=> (and (and (and (and (= (type f@@16) HandleTypeType) (= (type t0@@26) TyType)) (= (type h@@26) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@26) ($IsAlloc f@@16 (Tclass._System.___hFunc0 t0@@26) h@@26))) (Requires0 t0@@26 h@@26 f@@16)) ($IsAllocBox (Apply0 t0@@26 h@@26 f@@16) t0@@26 h@@26)) :qid |unknown.0:0| :skolemid |687| :pattern ( ($IsAlloc f@@16 (Tclass._System.___hFunc0 t0@@26) h@@26)) )))
(assert (forall ((arg0@@113 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0 arg0@@113)) TyType) :qid |funType:Tclass._System.___hPartialFunc0| :pattern ( (Tclass._System.___hPartialFunc0 arg0@@113)) )))
(assert (forall ((|#$R@@2| T@U) ) (!  (=> (= (type |#$R@@2|) TyType) (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@2|)) Tagclass._System.___hPartialFunc0)) :qid |unknown.0:0| :skolemid |688| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@2|)) )))
(assert (forall ((arg0@@114 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0_0 arg0@@114)) TyType) :qid |funType:Tclass._System.___hPartialFunc0_0| :pattern ( (Tclass._System.___hPartialFunc0_0 arg0@@114)) )))
(assert (forall ((|#$R@@3| T@U) ) (!  (=> (= (type |#$R@@3|) TyType) (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@3|)) |#$R@@3|)) :qid |unknown.0:0| :skolemid |689| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@3|)) )))
(assert (forall ((|#$R@@4| T@U) (bx@@42 T@U) ) (!  (=> (and (and (= (type |#$R@@4|) TyType) (= (type bx@@42) BoxType)) ($IsBox bx@@42 (Tclass._System.___hPartialFunc0 |#$R@@4|))) (and (= ($Box ($Unbox HandleTypeType bx@@42)) bx@@42) ($Is ($Unbox HandleTypeType bx@@42) (Tclass._System.___hPartialFunc0 |#$R@@4|)))) :qid |unknown.0:0| :skolemid |690| :pattern ( ($IsBox bx@@42 (Tclass._System.___hPartialFunc0 |#$R@@4|))) )))
(assert (forall ((|#$R@@5| T@U) (|f#0| T@U) ) (!  (=> (and (= (type |#$R@@5|) TyType) (= (type |f#0|) HandleTypeType)) (and (=> ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|)) (and ($Is |f#0| (Tclass._System.___hFunc0 |#$R@@5|)) (|Set#Equal| (Reads0 |#$R@@5| $OneHeap |f#0|) (|Set#Empty| BoxType)))) (=> (and ($Is |f#0| (Tclass._System.___hFunc0 |#$R@@5|)) (|Set#Equal| (Reads0 |#$R@@5| $OneHeap |f#0|) (|Set#Empty| BoxType))) ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|))))) :qid |unknown.0:0| :skolemid |691| :pattern ( ($Is |f#0| (Tclass._System.___hPartialFunc0 |#$R@@5|))) )))
(assert (forall ((|#$R@@6| T@U) (|f#0@@0| T@U) ($h@@7 T@U) ) (!  (=> (and (and (= (type |#$R@@6|) TyType) (= (type |f#0@@0|) HandleTypeType)) (= (type $h@@7) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hFunc0 |#$R@@6|) $h@@7)) (=> ($IsAlloc |f#0@@0| (Tclass._System.___hFunc0 |#$R@@6|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7)))) :qid |unknown.0:0| :skolemid |692| :pattern ( ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc0 |#$R@@6|) $h@@7)) )))
(assert (forall ((arg0@@115 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0 arg0@@115)) TyType) :qid |funType:Tclass._System.___hTotalFunc0| :pattern ( (Tclass._System.___hTotalFunc0 arg0@@115)) )))
(assert (forall ((|#$R@@7| T@U) ) (!  (=> (= (type |#$R@@7|) TyType) (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@7|)) Tagclass._System.___hTotalFunc0)) :qid |unknown.0:0| :skolemid |693| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@7|)) )))
(assert (forall ((arg0@@116 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0_0 arg0@@116)) TyType) :qid |funType:Tclass._System.___hTotalFunc0_0| :pattern ( (Tclass._System.___hTotalFunc0_0 arg0@@116)) )))
(assert (forall ((|#$R@@8| T@U) ) (!  (=> (= (type |#$R@@8|) TyType) (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@8|)) |#$R@@8|)) :qid |unknown.0:0| :skolemid |694| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@8|)) )))
(assert (forall ((|#$R@@9| T@U) (bx@@43 T@U) ) (!  (=> (and (and (= (type |#$R@@9|) TyType) (= (type bx@@43) BoxType)) ($IsBox bx@@43 (Tclass._System.___hTotalFunc0 |#$R@@9|))) (and (= ($Box ($Unbox HandleTypeType bx@@43)) bx@@43) ($Is ($Unbox HandleTypeType bx@@43) (Tclass._System.___hTotalFunc0 |#$R@@9|)))) :qid |unknown.0:0| :skolemid |695| :pattern ( ($IsBox bx@@43 (Tclass._System.___hTotalFunc0 |#$R@@9|))) )))
(assert (forall ((|#$R@@10| T@U) (|f#0@@1| T@U) ) (!  (=> (and (= (type |#$R@@10|) TyType) (= (type |f#0@@1|) HandleTypeType)) (and (=> ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|)) (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc0 |#$R@@10|)) (Requires0 |#$R@@10| $OneHeap |f#0@@1|))) (=> (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc0 |#$R@@10|)) (Requires0 |#$R@@10| $OneHeap |f#0@@1|)) ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|))))) :qid |unknown.0:0| :skolemid |696| :pattern ( ($Is |f#0@@1| (Tclass._System.___hTotalFunc0 |#$R@@10|))) )))
(assert (forall ((|#$R@@11| T@U) (|f#0@@2| T@U) ($h@@8 T@U) ) (!  (=> (and (and (= (type |#$R@@11|) TyType) (= (type |f#0@@2|) HandleTypeType)) (= (type $h@@8) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc0 |#$R@@11|) $h@@8)) (=> ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc0 |#$R@@11|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8)))) :qid |unknown.0:0| :skolemid |697| :pattern ( ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc0 |#$R@@11|) $h@@8)) )))
(assert (= (type Tclass._System.__default) TyType))
(assert (= (Tag Tclass._System.__default) Tagclass._System.__default))
(assert (forall ((bx@@44 T@U) ) (!  (=> (and (= (type bx@@44) BoxType) ($IsBox bx@@44 Tclass._System.__default)) (and (= ($Box ($Unbox refType bx@@44)) bx@@44) ($Is ($Unbox refType bx@@44) Tclass._System.__default))) :qid |unknown.0:0| :skolemid |698| :pattern ( ($IsBox bx@@44 Tclass._System.__default)) )))
(assert (forall (($o@@7 T@U) ) (!  (=> (= (type $o@@7) refType) (and (=> ($Is $o@@7 Tclass._System.__default) (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default))) (=> (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default)) ($Is $o@@7 Tclass._System.__default)))) :qid |unknown.0:0| :skolemid |699| :pattern ( ($Is $o@@7 Tclass._System.__default)) )))
(assert (forall (($o@@8 T@U) ($h@@9 T@U) ) (!  (=> (and (= (type $o@@8) refType) (= (type $h@@9) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@8 Tclass._System.__default $h@@9) (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@9 $o@@8) alloc)))) (=> (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@9 $o@@8) alloc))) ($IsAlloc $o@@8 Tclass._System.__default $h@@9)))) :qid |unknown.0:0| :skolemid |700| :pattern ( ($IsAlloc $o@@8 Tclass._System.__default $h@@9)) )))
(assert  (=> true (forall ((|#$A| T@U) (|#$B| T@U) (|a#0| T@U) (|b#0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A|) TyType) (= (type |#$B|) TyType)) (= (type |a#0|) BoxType)) (= (type |b#0|) BoxType)) (or (|_System.__default.rank__is__less__than#canCall| |#$A| |#$B| |a#0| |b#0|) (and ($IsBox |a#0| |#$A|) ($IsBox |b#0| |#$B|)))) true) :qid |unknown.0:0| :skolemid |701| :pattern ( (_System.__default.rank__is__less__than |#$A| |#$B| |a#0| |b#0|)) ))))
(assert (forall ((|#$A@@0| T@U) (|#$B@@0| T@U) (|a#0@@0| T@U) (|b#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A@@0|) TyType) (= (type |#$B@@0|) TyType)) (= (type |a#0@@0|) BoxType)) (= (type |b#0@@0|) BoxType)) (and ($IsBox |a#0@@0| |#$A@@0|) ($IsBox |b#0@@0| |#$B@@0|))) (and (=> (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|) true) (=> true (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)))) :qid |unknown.0:0| :skolemid |702| :pattern ( (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)) )))
(assert (forall ((arg0@@117 T@U) (arg1@@50 T@U) (arg2@@11 T@U) ) (! (= (type (Tclass._System.___hFunc2 arg0@@117 arg1@@50 arg2@@11)) TyType) :qid |funType:Tclass._System.___hFunc2| :pattern ( (Tclass._System.___hFunc2 arg0@@117 arg1@@50 arg2@@11)) )))
(assert (forall ((|#$T0| T@U) (|#$T1| T@U) (|#$R@@12| T@U) ) (!  (=> (and (and (= (type |#$T0|) TyType) (= (type |#$T1|) TyType)) (= (type |#$R@@12|) TyType)) (= (Tag (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R@@12|)) Tagclass._System.___hFunc2)) :qid |unknown.0:0| :skolemid |703| :pattern ( (Tclass._System.___hFunc2 |#$T0| |#$T1| |#$R@@12|)) )))
(assert (forall ((arg0@@118 T@U) ) (! (= (type (Tclass._System.___hFunc2_0 arg0@@118)) TyType) :qid |funType:Tclass._System.___hFunc2_0| :pattern ( (Tclass._System.___hFunc2_0 arg0@@118)) )))
(assert (forall ((|#$T0@@0| T@U) (|#$T1@@0| T@U) (|#$R@@13| T@U) ) (!  (=> (and (and (= (type |#$T0@@0|) TyType) (= (type |#$T1@@0|) TyType)) (= (type |#$R@@13|) TyType)) (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@13|)) |#$T0@@0|)) :qid |unknown.0:0| :skolemid |704| :pattern ( (Tclass._System.___hFunc2 |#$T0@@0| |#$T1@@0| |#$R@@13|)) )))
(assert (forall ((arg0@@119 T@U) ) (! (= (type (Tclass._System.___hFunc2_1 arg0@@119)) TyType) :qid |funType:Tclass._System.___hFunc2_1| :pattern ( (Tclass._System.___hFunc2_1 arg0@@119)) )))
(assert (forall ((|#$T0@@1| T@U) (|#$T1@@1| T@U) (|#$R@@14| T@U) ) (!  (=> (and (and (= (type |#$T0@@1|) TyType) (= (type |#$T1@@1|) TyType)) (= (type |#$R@@14|) TyType)) (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@14|)) |#$T1@@1|)) :qid |unknown.0:0| :skolemid |705| :pattern ( (Tclass._System.___hFunc2 |#$T0@@1| |#$T1@@1| |#$R@@14|)) )))
(assert (forall ((arg0@@120 T@U) ) (! (= (type (Tclass._System.___hFunc2_2 arg0@@120)) TyType) :qid |funType:Tclass._System.___hFunc2_2| :pattern ( (Tclass._System.___hFunc2_2 arg0@@120)) )))
(assert (forall ((|#$T0@@2| T@U) (|#$T1@@2| T@U) (|#$R@@15| T@U) ) (!  (=> (and (and (= (type |#$T0@@2|) TyType) (= (type |#$T1@@2|) TyType)) (= (type |#$R@@15|) TyType)) (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@15|)) |#$R@@15|)) :qid |unknown.0:0| :skolemid |706| :pattern ( (Tclass._System.___hFunc2 |#$T0@@2| |#$T1@@2| |#$R@@15|)) )))
(assert (forall ((|#$T0@@3| T@U) (|#$T1@@3| T@U) (|#$R@@16| T@U) (bx@@45 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@3|) TyType) (= (type |#$T1@@3|) TyType)) (= (type |#$R@@16|) TyType)) (= (type bx@@45) BoxType)) ($IsBox bx@@45 (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|))) (and (= ($Box ($Unbox HandleTypeType bx@@45)) bx@@45) ($Is ($Unbox HandleTypeType bx@@45) (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|)))) :qid |unknown.0:0| :skolemid |707| :pattern ( ($IsBox bx@@45 (Tclass._System.___hFunc2 |#$T0@@3| |#$T1@@3| |#$R@@16|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@121 T@T) (arg1@@51 T@T) (arg2@@12 T@T) (arg3@@1 T@T) ) (! (= (Ctor (MapType2Type arg0@@121 arg1@@51 arg2@@12 arg3@@1)) 21) :qid |ctor:MapType2Type| )) (forall ((arg0@@122 T@T) (arg1@@52 T@T) (arg2@@13 T@T) (arg3@@2 T@T) ) (! (= (MapType2TypeInv0 (MapType2Type arg0@@122 arg1@@52 arg2@@13 arg3@@2)) arg0@@122) :qid |typeInv:MapType2TypeInv0| :pattern ( (MapType2Type arg0@@122 arg1@@52 arg2@@13 arg3@@2)) ))) (forall ((arg0@@123 T@T) (arg1@@53 T@T) (arg2@@14 T@T) (arg3@@3 T@T) ) (! (= (MapType2TypeInv1 (MapType2Type arg0@@123 arg1@@53 arg2@@14 arg3@@3)) arg1@@53) :qid |typeInv:MapType2TypeInv1| :pattern ( (MapType2Type arg0@@123 arg1@@53 arg2@@14 arg3@@3)) ))) (forall ((arg0@@124 T@T) (arg1@@54 T@T) (arg2@@15 T@T) (arg3@@4 T@T) ) (! (= (MapType2TypeInv2 (MapType2Type arg0@@124 arg1@@54 arg2@@15 arg3@@4)) arg2@@15) :qid |typeInv:MapType2TypeInv2| :pattern ( (MapType2Type arg0@@124 arg1@@54 arg2@@15 arg3@@4)) ))) (forall ((arg0@@125 T@T) (arg1@@55 T@T) (arg2@@16 T@T) (arg3@@5 T@T) ) (! (= (MapType2TypeInv3 (MapType2Type arg0@@125 arg1@@55 arg2@@16 arg3@@5)) arg3@@5) :qid |typeInv:MapType2TypeInv3| :pattern ( (MapType2Type arg0@@125 arg1@@55 arg2@@16 arg3@@5)) ))) (forall ((arg0@@126 T@U) (arg1@@56 T@U) (arg2@@17 T@U) (arg3@@6 T@U) ) (! (let ((aVar3 (MapType2TypeInv3 (type arg0@@126)))) (= (type (MapType2Select arg0@@126 arg1@@56 arg2@@17 arg3@@6)) aVar3)) :qid |funType:MapType2Select| :pattern ( (MapType2Select arg0@@126 arg1@@56 arg2@@17 arg3@@6)) ))) (forall ((arg0@@127 T@U) (arg1@@57 T@U) (arg2@@18 T@U) (arg3@@7 T@U) (arg4@@0 T@U) ) (! (let ((aVar3@@0 (type arg4@@0))) (let ((aVar2 (type arg3@@7))) (let ((aVar1@@2 (type arg2@@18))) (let ((aVar0@@0 (type arg1@@57))) (= (type (MapType2Store arg0@@127 arg1@@57 arg2@@18 arg3@@7 arg4@@0)) (MapType2Type aVar0@@0 aVar1@@2 aVar2 aVar3@@0)))))) :qid |funType:MapType2Store| :pattern ( (MapType2Store arg0@@127 arg1@@57 arg2@@18 arg3@@7 arg4@@0)) ))) (forall ((m@@27 T@U) (x0@@5 T@U) (x1 T@U) (x2 T@U) (val@@6 T@U) ) (! (let ((aVar3@@1 (MapType2TypeInv3 (type m@@27)))) (=> (= (type val@@6) aVar3@@1) (= (MapType2Select (MapType2Store m@@27 x0@@5 x1 x2 val@@6) x0@@5 x1 x2) val@@6))) :qid |mapAx0:MapType2Select| :weight 0 ))) (and (and (and (forall ((val@@7 T@U) (m@@28 T@U) (x0@@6 T@U) (x1@@0 T@U) (x2@@0 T@U) (y0@@3 T@U) (y1 T@U) (y2 T@U) ) (!  (or (= x0@@6 y0@@3) (= (MapType2Select (MapType2Store m@@28 x0@@6 x1@@0 x2@@0 val@@7) y0@@3 y1 y2) (MapType2Select m@@28 y0@@3 y1 y2))) :qid |mapAx1:MapType2Select:0| :weight 0 )) (forall ((val@@8 T@U) (m@@29 T@U) (x0@@7 T@U) (x1@@1 T@U) (x2@@1 T@U) (y0@@4 T@U) (y1@@0 T@U) (y2@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType2Select (MapType2Store m@@29 x0@@7 x1@@1 x2@@1 val@@8) y0@@4 y1@@0 y2@@0) (MapType2Select m@@29 y0@@4 y1@@0 y2@@0))) :qid |mapAx1:MapType2Select:1| :weight 0 ))) (forall ((val@@9 T@U) (m@@30 T@U) (x0@@8 T@U) (x1@@2 T@U) (x2@@2 T@U) (y0@@5 T@U) (y1@@1 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType2Select (MapType2Store m@@30 x0@@8 x1@@2 x2@@2 val@@9) y0@@5 y1@@1 y2@@1) (MapType2Select m@@30 y0@@5 y1@@1 y2@@1))) :qid |mapAx1:MapType2Select:2| :weight 0 ))) (forall ((val@@10 T@U) (m@@31 T@U) (x0@@9 T@U) (x1@@3 T@U) (x2@@3 T@U) (y0@@6 T@U) (y1@@2 T@U) (y2@@2 T@U) ) (!  (or true (= (MapType2Select (MapType2Store m@@31 x0@@9 x1@@3 x2@@3 val@@10) y0@@6 y1@@2 y2@@2) (MapType2Select m@@31 y0@@6 y1@@2 y2@@2))) :qid |mapAx2:MapType2Select| :weight 0 )))) (forall ((arg0@@128 T@U) (arg1@@58 T@U) (arg2@@19 T@U) (arg3@@8 T@U) (arg4@@1 T@U) (arg5 T@U) (arg6 T@U) ) (! (= (type (Apply2 arg0@@128 arg1@@58 arg2@@19 arg3@@8 arg4@@1 arg5 arg6)) BoxType) :qid |funType:Apply2| :pattern ( (Apply2 arg0@@128 arg1@@58 arg2@@19 arg3@@8 arg4@@1 arg5 arg6)) ))) (forall ((arg0@@129 T@U) (arg1@@59 T@U) (arg2@@20 T@U) ) (! (= (type (Handle2 arg0@@129 arg1@@59 arg2@@20)) HandleTypeType) :qid |funType:Handle2| :pattern ( (Handle2 arg0@@129 arg1@@59 arg2@@20)) ))))
(assert (forall ((t0@@27 T@U) (t1@@3 T@U) (t2 T@U) (heap@@6 T@U) (h@@27 T@U) (r@@11 T@U) (rd@@2 T@U) (bx0 T@U) (bx1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@27) TyType) (= (type t1@@3) TyType)) (= (type t2) TyType)) (= (type heap@@6) (MapType0Type refType MapType1Type))) (= (type h@@27) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@11) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@2) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0) BoxType)) (= (type bx1) BoxType)) (= (Apply2 t0@@27 t1@@3 t2 heap@@6 (Handle2 h@@27 r@@11 rd@@2) bx0 bx1) (MapType2Select h@@27 heap@@6 bx0 bx1))) :qid |unknown.0:0| :skolemid |708| :pattern ( (Apply2 t0@@27 t1@@3 t2 heap@@6 (Handle2 h@@27 r@@11 rd@@2) bx0 bx1)) )))
(assert (forall ((t0@@28 T@U) (t1@@4 T@U) (t2@@0 T@U) (heap@@7 T@U) (h@@28 T@U) (r@@12 T@U) (rd@@3 T@U) (bx0@@0 T@U) (bx1@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@28) TyType) (= (type t1@@4) TyType)) (= (type t2@@0) TyType)) (= (type heap@@7) (MapType0Type refType MapType1Type))) (= (type h@@28) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@12) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@3) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@0) BoxType)) (= (type bx1@@0) BoxType)) (U_2_bool (MapType2Select r@@12 heap@@7 bx0@@0 bx1@@0))) (Requires2 t0@@28 t1@@4 t2@@0 heap@@7 (Handle2 h@@28 r@@12 rd@@3) bx0@@0 bx1@@0)) :qid |unknown.0:0| :skolemid |709| :pattern ( (Requires2 t0@@28 t1@@4 t2@@0 heap@@7 (Handle2 h@@28 r@@12 rd@@3) bx0@@0 bx1@@0)) )))
(assert (forall ((arg0@@130 T@U) (arg1@@60 T@U) (arg2@@21 T@U) (arg3@@9 T@U) (arg4@@2 T@U) (arg5@@0 T@U) (arg6@@0 T@U) ) (! (= (type (Reads2 arg0@@130 arg1@@60 arg2@@21 arg3@@9 arg4@@2 arg5@@0 arg6@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads2| :pattern ( (Reads2 arg0@@130 arg1@@60 arg2@@21 arg3@@9 arg4@@2 arg5@@0 arg6@@0)) )))
(assert (forall ((t0@@29 T@U) (t1@@5 T@U) (t2@@1 T@U) (heap@@8 T@U) (h@@29 T@U) (r@@13 T@U) (rd@@4 T@U) (bx0@@1 T@U) (bx1@@1 T@U) (bx@@46 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@29) TyType) (= (type t1@@5) TyType)) (= (type t2@@1) TyType)) (= (type heap@@8) (MapType0Type refType MapType1Type))) (= (type h@@29) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@13) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@4) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@1) BoxType)) (= (type bx1@@1) BoxType)) (= (type bx@@46) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46)) (U_2_bool (MapType0Select (MapType2Select rd@@4 heap@@8 bx0@@1 bx1@@1) bx@@46))) (=> (U_2_bool (MapType0Select (MapType2Select rd@@4 heap@@8 bx0@@1 bx1@@1) bx@@46)) (U_2_bool (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46))))) :qid |unknown.0:0| :skolemid |710| :pattern ( (MapType0Select (Reads2 t0@@29 t1@@5 t2@@1 heap@@8 (Handle2 h@@29 r@@13 rd@@4) bx0@@1 bx1@@1) bx@@46)) )))
(assert (forall ((t0@@30 T@U) (t1@@6 T@U) (t2@@2 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@17 T@U) (bx0@@2 T@U) (bx1@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@30) TyType) (= (type t1@@6) TyType)) (= (type t2@@2) TyType)) (= (type h0@@6) (MapType0Type refType MapType1Type))) (= (type h1@@6) (MapType0Type refType MapType1Type))) (= (type f@@17) HandleTypeType)) (= (type bx0@@2) BoxType)) (= (type bx1@@2) BoxType)) (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) (and (and ($IsBox bx0@@2 t0@@30) ($IsBox bx1@@2 t1@@6)) ($Is f@@17 (Tclass._System.___hFunc2 t0@@30 t1@@6 t2@@2)))) (forall ((o@@60 T@U) (fld@@5 T@U) ) (! (let ((a@@88 (FieldTypeInv0 (type fld@@5)))) (=> (and (and (= (type o@@60) refType) (= (type fld@@5) (FieldType a@@88))) (and (not (= o@@60 null)) (U_2_bool (MapType0Select (Reads2 t0@@30 t1@@6 t2@@2 h0@@6 f@@17 bx0@@2 bx1@@2) ($Box o@@60))))) (= (MapType1Select (MapType0Select h0@@6 o@@60) fld@@5) (MapType1Select (MapType0Select h1@@6 o@@60) fld@@5)))) :qid |unknown.0:0| :skolemid |711| :no-pattern (type o@@60) :no-pattern (type fld@@5) :no-pattern (U_2_int o@@60) :no-pattern (U_2_bool o@@60) :no-pattern (U_2_int fld@@5) :no-pattern (U_2_bool fld@@5) )))) (= (Reads2 t0@@30 t1@@6 t2@@2 h0@@6 f@@17 bx0@@2 bx1@@2) (Reads2 t0@@30 t1@@6 t2@@2 h1@@6 f@@17 bx0@@2 bx1@@2))) :qid |unknown.0:0| :skolemid |712| :pattern ( ($HeapSucc h0@@6 h1@@6) (Reads2 t0@@30 t1@@6 t2@@2 h1@@6 f@@17 bx0@@2 bx1@@2)) )))
(assert (forall ((t0@@31 T@U) (t1@@7 T@U) (t2@@3 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@18 T@U) (bx0@@3 T@U) (bx1@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@31) TyType) (= (type t1@@7) TyType)) (= (type t2@@3) TyType)) (= (type h0@@7) (MapType0Type refType MapType1Type))) (= (type h1@@7) (MapType0Type refType MapType1Type))) (= (type f@@18) HandleTypeType)) (= (type bx0@@3) BoxType)) (= (type bx1@@3) BoxType)) (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) (and (and ($IsBox bx0@@3 t0@@31) ($IsBox bx1@@3 t1@@7)) ($Is f@@18 (Tclass._System.___hFunc2 t0@@31 t1@@7 t2@@3)))) (forall ((o@@61 T@U) (fld@@6 T@U) ) (! (let ((a@@89 (FieldTypeInv0 (type fld@@6)))) (=> (and (and (= (type o@@61) refType) (= (type fld@@6) (FieldType a@@89))) (and (not (= o@@61 null)) (U_2_bool (MapType0Select (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3) ($Box o@@61))))) (= (MapType1Select (MapType0Select h0@@7 o@@61) fld@@6) (MapType1Select (MapType0Select h1@@7 o@@61) fld@@6)))) :qid |unknown.0:0| :skolemid |713| :no-pattern (type o@@61) :no-pattern (type fld@@6) :no-pattern (U_2_int o@@61) :no-pattern (U_2_bool o@@61) :no-pattern (U_2_int fld@@6) :no-pattern (U_2_bool fld@@6) )))) (= (Reads2 t0@@31 t1@@7 t2@@3 h0@@7 f@@18 bx0@@3 bx1@@3) (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3))) :qid |unknown.0:0| :skolemid |714| :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads2 t0@@31 t1@@7 t2@@3 h1@@7 f@@18 bx0@@3 bx1@@3)) )))
(assert (forall ((t0@@32 T@U) (t1@@8 T@U) (t2@@4 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@19 T@U) (bx0@@4 T@U) (bx1@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@32) TyType) (= (type t1@@8) TyType)) (= (type t2@@4) TyType)) (= (type h0@@8) (MapType0Type refType MapType1Type))) (= (type h1@@8) (MapType0Type refType MapType1Type))) (= (type f@@19) HandleTypeType)) (= (type bx0@@4) BoxType)) (= (type bx1@@4) BoxType)) (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) (and (and ($IsBox bx0@@4 t0@@32) ($IsBox bx1@@4 t1@@8)) ($Is f@@19 (Tclass._System.___hFunc2 t0@@32 t1@@8 t2@@4)))) (forall ((o@@62 T@U) (fld@@7 T@U) ) (! (let ((a@@90 (FieldTypeInv0 (type fld@@7)))) (=> (and (and (= (type o@@62) refType) (= (type fld@@7) (FieldType a@@90))) (and (not (= o@@62 null)) (U_2_bool (MapType0Select (Reads2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4) ($Box o@@62))))) (= (MapType1Select (MapType0Select h0@@8 o@@62) fld@@7) (MapType1Select (MapType0Select h1@@8 o@@62) fld@@7)))) :qid |unknown.0:0| :skolemid |715| :no-pattern (type o@@62) :no-pattern (type fld@@7) :no-pattern (U_2_int o@@62) :no-pattern (U_2_bool o@@62) :no-pattern (U_2_int fld@@7) :no-pattern (U_2_bool fld@@7) )))) (and (=> (Requires2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4) (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4)) (=> (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4) (Requires2 t0@@32 t1@@8 t2@@4 h0@@8 f@@19 bx0@@4 bx1@@4)))) :qid |unknown.0:0| :skolemid |716| :pattern ( ($HeapSucc h0@@8 h1@@8) (Requires2 t0@@32 t1@@8 t2@@4 h1@@8 f@@19 bx0@@4 bx1@@4)) )))
(assert (forall ((t0@@33 T@U) (t1@@9 T@U) (t2@@5 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@20 T@U) (bx0@@5 T@U) (bx1@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@33) TyType) (= (type t1@@9) TyType)) (= (type t2@@5) TyType)) (= (type h0@@9) (MapType0Type refType MapType1Type))) (= (type h1@@9) (MapType0Type refType MapType1Type))) (= (type f@@20) HandleTypeType)) (= (type bx0@@5) BoxType)) (= (type bx1@@5) BoxType)) (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) (and (and ($IsBox bx0@@5 t0@@33) ($IsBox bx1@@5 t1@@9)) ($Is f@@20 (Tclass._System.___hFunc2 t0@@33 t1@@9 t2@@5)))) (forall ((o@@63 T@U) (fld@@8 T@U) ) (! (let ((a@@91 (FieldTypeInv0 (type fld@@8)))) (=> (and (and (= (type o@@63) refType) (= (type fld@@8) (FieldType a@@91))) (and (not (= o@@63 null)) (U_2_bool (MapType0Select (Reads2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5) ($Box o@@63))))) (= (MapType1Select (MapType0Select h0@@9 o@@63) fld@@8) (MapType1Select (MapType0Select h1@@9 o@@63) fld@@8)))) :qid |unknown.0:0| :skolemid |717| :no-pattern (type o@@63) :no-pattern (type fld@@8) :no-pattern (U_2_int o@@63) :no-pattern (U_2_bool o@@63) :no-pattern (U_2_int fld@@8) :no-pattern (U_2_bool fld@@8) )))) (and (=> (Requires2 t0@@33 t1@@9 t2@@5 h0@@9 f@@20 bx0@@5 bx1@@5) (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5)) (=> (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5) (Requires2 t0@@33 t1@@9 t2@@5 h0@@9 f@@20 bx0@@5 bx1@@5)))) :qid |unknown.0:0| :skolemid |718| :pattern ( ($HeapSucc h0@@9 h1@@9) (Requires2 t0@@33 t1@@9 t2@@5 h1@@9 f@@20 bx0@@5 bx1@@5)) )))
(assert (forall ((t0@@34 T@U) (t1@@10 T@U) (t2@@6 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@21 T@U) (bx0@@6 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@34) TyType) (= (type t1@@10) TyType)) (= (type t2@@6) TyType)) (= (type h0@@10) (MapType0Type refType MapType1Type))) (= (type h1@@10) (MapType0Type refType MapType1Type))) (= (type f@@21) HandleTypeType)) (= (type bx0@@6) BoxType)) (= (type bx1@@6) BoxType)) (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) (and (and ($IsBox bx0@@6 t0@@34) ($IsBox bx1@@6 t1@@10)) ($Is f@@21 (Tclass._System.___hFunc2 t0@@34 t1@@10 t2@@6)))) (forall ((o@@64 T@U) (fld@@9 T@U) ) (! (let ((a@@92 (FieldTypeInv0 (type fld@@9)))) (=> (and (and (= (type o@@64) refType) (= (type fld@@9) (FieldType a@@92))) (and (not (= o@@64 null)) (U_2_bool (MapType0Select (Reads2 t0@@34 t1@@10 t2@@6 h0@@10 f@@21 bx0@@6 bx1@@6) ($Box o@@64))))) (= (MapType1Select (MapType0Select h0@@10 o@@64) fld@@9) (MapType1Select (MapType0Select h1@@10 o@@64) fld@@9)))) :qid |unknown.0:0| :skolemid |719| :no-pattern (type o@@64) :no-pattern (type fld@@9) :no-pattern (U_2_int o@@64) :no-pattern (U_2_bool o@@64) :no-pattern (U_2_int fld@@9) :no-pattern (U_2_bool fld@@9) )))) (= (Apply2 t0@@34 t1@@10 t2@@6 h0@@10 f@@21 bx0@@6 bx1@@6) (Apply2 t0@@34 t1@@10 t2@@6 h1@@10 f@@21 bx0@@6 bx1@@6))) :qid |unknown.0:0| :skolemid |720| :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply2 t0@@34 t1@@10 t2@@6 h1@@10 f@@21 bx0@@6 bx1@@6)) )))
(assert (forall ((t0@@35 T@U) (t1@@11 T@U) (t2@@7 T@U) (h0@@11 T@U) (h1@@11 T@U) (f@@22 T@U) (bx0@@7 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@35) TyType) (= (type t1@@11) TyType)) (= (type t2@@7) TyType)) (= (type h0@@11) (MapType0Type refType MapType1Type))) (= (type h1@@11) (MapType0Type refType MapType1Type))) (= (type f@@22) HandleTypeType)) (= (type bx0@@7) BoxType)) (= (type bx1@@7) BoxType)) (and (and (and ($HeapSucc h0@@11 h1@@11) (and ($IsGoodHeap h0@@11) ($IsGoodHeap h1@@11))) (and (and ($IsBox bx0@@7 t0@@35) ($IsBox bx1@@7 t1@@11)) ($Is f@@22 (Tclass._System.___hFunc2 t0@@35 t1@@11 t2@@7)))) (forall ((o@@65 T@U) (fld@@10 T@U) ) (! (let ((a@@93 (FieldTypeInv0 (type fld@@10)))) (=> (and (and (= (type o@@65) refType) (= (type fld@@10) (FieldType a@@93))) (and (not (= o@@65 null)) (U_2_bool (MapType0Select (Reads2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7) ($Box o@@65))))) (= (MapType1Select (MapType0Select h0@@11 o@@65) fld@@10) (MapType1Select (MapType0Select h1@@11 o@@65) fld@@10)))) :qid |unknown.0:0| :skolemid |721| :no-pattern (type o@@65) :no-pattern (type fld@@10) :no-pattern (U_2_int o@@65) :no-pattern (U_2_bool o@@65) :no-pattern (U_2_int fld@@10) :no-pattern (U_2_bool fld@@10) )))) (= (Apply2 t0@@35 t1@@11 t2@@7 h0@@11 f@@22 bx0@@7 bx1@@7) (Apply2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7))) :qid |unknown.0:0| :skolemid |722| :pattern ( ($HeapSucc h0@@11 h1@@11) (Apply2 t0@@35 t1@@11 t2@@7 h1@@11 f@@22 bx0@@7 bx1@@7)) )))
(assert (forall ((t0@@36 T@U) (t1@@12 T@U) (t2@@8 T@U) (heap@@9 T@U) (f@@23 T@U) (bx0@@8 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@36) TyType) (= (type t1@@12) TyType)) (= (type t2@@8) TyType)) (= (type heap@@9) (MapType0Type refType MapType1Type))) (= (type f@@23) HandleTypeType)) (= (type bx0@@8) BoxType)) (= (type bx1@@8) BoxType)) (and ($IsGoodHeap heap@@9) (and (and ($IsBox bx0@@8 t0@@36) ($IsBox bx1@@8 t1@@12)) ($Is f@@23 (Tclass._System.___hFunc2 t0@@36 t1@@12 t2@@8))))) (and (=> (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |723| :pattern ( (Reads2 t0@@36 t1@@12 t2@@8 $OneHeap f@@23 bx0@@8 bx1@@8) ($IsGoodHeap heap@@9)) :pattern ( (Reads2 t0@@36 t1@@12 t2@@8 heap@@9 f@@23 bx0@@8 bx1@@8)) )))
(assert (forall ((t0@@37 T@U) (t1@@13 T@U) (t2@@9 T@U) (heap@@10 T@U) (f@@24 T@U) (bx0@@9 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@37) TyType) (= (type t1@@13) TyType)) (= (type t2@@9) TyType)) (= (type heap@@10) (MapType0Type refType MapType1Type))) (= (type f@@24) HandleTypeType)) (= (type bx0@@9) BoxType)) (= (type bx1@@9) BoxType)) (and (and ($IsGoodHeap heap@@10) (and (and ($IsBox bx0@@9 t0@@37) ($IsBox bx1@@9 t1@@13)) ($Is f@@24 (Tclass._System.___hFunc2 t0@@37 t1@@13 t2@@9)))) (|Set#Equal| (Reads2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) (|Set#Empty| BoxType)))) (and (=> (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9)) (=> (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9) (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9)))) :qid |unknown.0:0| :skolemid |724| :pattern ( (Requires2 t0@@37 t1@@13 t2@@9 $OneHeap f@@24 bx0@@9 bx1@@9) ($IsGoodHeap heap@@10)) :pattern ( (Requires2 t0@@37 t1@@13 t2@@9 heap@@10 f@@24 bx0@@9 bx1@@9)) )))
(assert (forall ((f@@25 T@U) (t0@@38 T@U) (t1@@14 T@U) (t2@@10 T@U) ) (!  (=> (and (and (and (= (type f@@25) HandleTypeType) (= (type t0@@38) TyType)) (= (type t1@@14) TyType)) (= (type t2@@10) TyType)) (and (=> ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10)) (forall ((h@@30 T@U) (bx0@@10 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and (= (type h@@30) (MapType0Type refType MapType1Type)) (= (type bx0@@10) BoxType)) (= (type bx1@@10) BoxType)) (and (and ($IsGoodHeap h@@30) (and ($IsBox bx0@@10 t0@@38) ($IsBox bx1@@10 t1@@14))) (Requires2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10))) ($IsBox (Apply2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10) t2@@10)) :qid |DafnyPre.521:12| :skolemid |725| :pattern ( (Apply2 t0@@38 t1@@14 t2@@10 h@@30 f@@25 bx0@@10 bx1@@10)) ))) (=> (forall ((h@@31 T@U) (bx0@@11 T@U) (bx1@@11 T@U) ) (!  (=> (and (and (and (= (type h@@31) (MapType0Type refType MapType1Type)) (= (type bx0@@11) BoxType)) (= (type bx1@@11) BoxType)) (and (and ($IsGoodHeap h@@31) (and ($IsBox bx0@@11 t0@@38) ($IsBox bx1@@11 t1@@14))) (Requires2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11))) ($IsBox (Apply2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11) t2@@10)) :qid |DafnyPre.521:12| :skolemid |725| :pattern ( (Apply2 t0@@38 t1@@14 t2@@10 h@@31 f@@25 bx0@@11 bx1@@11)) )) ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10))))) :qid |unknown.0:0| :skolemid |726| :pattern ( ($Is f@@25 (Tclass._System.___hFunc2 t0@@38 t1@@14 t2@@10))) )))
(assert (forall ((f@@26 T@U) (t0@@39 T@U) (t1@@15 T@U) (t2@@11 T@U) (u0@@0 T@U) (u1 T@U) (u2 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@26) HandleTypeType) (= (type t0@@39) TyType)) (= (type t1@@15) TyType)) (= (type t2@@11) TyType)) (= (type u0@@0) TyType)) (= (type u1) TyType)) (= (type u2) TyType)) (and (and (and ($Is f@@26 (Tclass._System.___hFunc2 t0@@39 t1@@15 t2@@11)) (forall ((bx@@47 T@U) ) (!  (=> (and (= (type bx@@47) BoxType) ($IsBox bx@@47 u0@@0)) ($IsBox bx@@47 t0@@39)) :qid |unknown.0:0| :skolemid |727| :pattern ( ($IsBox bx@@47 u0@@0)) :pattern ( ($IsBox bx@@47 t0@@39)) ))) (forall ((bx@@48 T@U) ) (!  (=> (and (= (type bx@@48) BoxType) ($IsBox bx@@48 u1)) ($IsBox bx@@48 t1@@15)) :qid |unknown.0:0| :skolemid |728| :pattern ( ($IsBox bx@@48 u1)) :pattern ( ($IsBox bx@@48 t1@@15)) ))) (forall ((bx@@49 T@U) ) (!  (=> (and (= (type bx@@49) BoxType) ($IsBox bx@@49 t2@@11)) ($IsBox bx@@49 u2)) :qid |unknown.0:0| :skolemid |729| :pattern ( ($IsBox bx@@49 t2@@11)) :pattern ( ($IsBox bx@@49 u2)) )))) ($Is f@@26 (Tclass._System.___hFunc2 u0@@0 u1 u2))) :qid |unknown.0:0| :skolemid |730| :pattern ( ($Is f@@26 (Tclass._System.___hFunc2 t0@@39 t1@@15 t2@@11)) ($Is f@@26 (Tclass._System.___hFunc2 u0@@0 u1 u2))) )))
(assert (forall ((f@@27 T@U) (t0@@40 T@U) (t1@@16 T@U) (t2@@12 T@U) (h@@32 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@27) HandleTypeType) (= (type t0@@40) TyType)) (= (type t1@@16) TyType)) (= (type t2@@12) TyType)) (= (type h@@32) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@32)) (and (=> ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32) (forall ((bx0@@12 T@U) (bx1@@12 T@U) ) (!  (=> (and (= (type bx0@@12) BoxType) (= (type bx1@@12) BoxType)) (=> (and (and (and ($IsBox bx0@@12 t0@@40) ($IsAllocBox bx0@@12 t0@@40 h@@32)) (and ($IsBox bx1@@12 t1@@16) ($IsAllocBox bx1@@12 t1@@16 h@@32))) (Requires2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) (forall ((r@@14 T@U) ) (!  (=> (= (type r@@14) refType) (=> (and (not (= r@@14 null)) (U_2_bool (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12) ($Box r@@14)))) (U_2_bool (MapType1Select (MapType0Select h@@32 r@@14) alloc)))) :qid |unknown.0:0| :skolemid |731| :pattern ( (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12) ($Box r@@14))) )))) :qid |unknown.0:0| :skolemid |732| :pattern ( (Apply2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) :pattern ( (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@12 bx1@@12)) ))) (=> (forall ((bx0@@13 T@U) (bx1@@13 T@U) ) (!  (=> (and (= (type bx0@@13) BoxType) (= (type bx1@@13) BoxType)) (=> (and (and (and ($IsBox bx0@@13 t0@@40) ($IsAllocBox bx0@@13 t0@@40 h@@32)) (and ($IsBox bx1@@13 t1@@16) ($IsAllocBox bx1@@13 t1@@16 h@@32))) (Requires2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) (forall ((r@@15 T@U) ) (!  (=> (= (type r@@15) refType) (=> (and (not (= r@@15 null)) (U_2_bool (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13) ($Box r@@15)))) (U_2_bool (MapType1Select (MapType0Select h@@32 r@@15) alloc)))) :qid |unknown.0:0| :skolemid |731| :pattern ( (MapType0Select (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13) ($Box r@@15))) )))) :qid |unknown.0:0| :skolemid |732| :pattern ( (Apply2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) :pattern ( (Reads2 t0@@40 t1@@16 t2@@12 h@@32 f@@27 bx0@@13 bx1@@13)) )) ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32)))) :qid |unknown.0:0| :skolemid |733| :pattern ( ($IsAlloc f@@27 (Tclass._System.___hFunc2 t0@@40 t1@@16 t2@@12) h@@32)) )))
(assert (forall ((f@@28 T@U) (t0@@41 T@U) (t1@@17 T@U) (t2@@13 T@U) (h@@33 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@28) HandleTypeType) (= (type t0@@41) TyType)) (= (type t1@@17) TyType)) (= (type t2@@13) TyType)) (= (type h@@33) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@33) ($IsAlloc f@@28 (Tclass._System.___hFunc2 t0@@41 t1@@17 t2@@13) h@@33))) (forall ((bx0@@14 T@U) (bx1@@14 T@U) ) (!  (=> (and (= (type bx0@@14) BoxType) (= (type bx1@@14) BoxType)) (=> (and (and ($IsAllocBox bx0@@14 t0@@41 h@@33) ($IsAllocBox bx1@@14 t1@@17 h@@33)) (Requires2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14)) ($IsAllocBox (Apply2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14) t2@@13 h@@33))) :qid |unknown.0:0| :skolemid |734| :pattern ( (Apply2 t0@@41 t1@@17 t2@@13 h@@33 f@@28 bx0@@14 bx1@@14)) ))) :qid |unknown.0:0| :skolemid |735| :pattern ( ($IsAlloc f@@28 (Tclass._System.___hFunc2 t0@@41 t1@@17 t2@@13) h@@33)) )))
(assert (forall ((arg0@@131 T@U) (arg1@@61 T@U) (arg2@@22 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2 arg0@@131 arg1@@61 arg2@@22)) TyType) :qid |funType:Tclass._System.___hPartialFunc2| :pattern ( (Tclass._System.___hPartialFunc2 arg0@@131 arg1@@61 arg2@@22)) )))
(assert (forall ((|#$T0@@4| T@U) (|#$T1@@4| T@U) (|#$R@@17| T@U) ) (!  (=> (and (and (= (type |#$T0@@4|) TyType) (= (type |#$T1@@4|) TyType)) (= (type |#$R@@17|) TyType)) (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@17|)) Tagclass._System.___hPartialFunc2)) :qid |unknown.0:0| :skolemid |736| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@4| |#$T1@@4| |#$R@@17|)) )))
(assert (forall ((arg0@@132 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_0 arg0@@132)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_0| :pattern ( (Tclass._System.___hPartialFunc2_0 arg0@@132)) )))
(assert (forall ((|#$T0@@5| T@U) (|#$T1@@5| T@U) (|#$R@@18| T@U) ) (!  (=> (and (and (= (type |#$T0@@5|) TyType) (= (type |#$T1@@5|) TyType)) (= (type |#$R@@18|) TyType)) (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@18|)) |#$T0@@5|)) :qid |unknown.0:0| :skolemid |737| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@5| |#$T1@@5| |#$R@@18|)) )))
(assert (forall ((arg0@@133 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_1 arg0@@133)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_1| :pattern ( (Tclass._System.___hPartialFunc2_1 arg0@@133)) )))
(assert (forall ((|#$T0@@6| T@U) (|#$T1@@6| T@U) (|#$R@@19| T@U) ) (!  (=> (and (and (= (type |#$T0@@6|) TyType) (= (type |#$T1@@6|) TyType)) (= (type |#$R@@19|) TyType)) (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@6| |#$T1@@6| |#$R@@19|)) |#$T1@@6|)) :qid |unknown.0:0| :skolemid |738| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@6| |#$T1@@6| |#$R@@19|)) )))
(assert (forall ((arg0@@134 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_2 arg0@@134)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_2| :pattern ( (Tclass._System.___hPartialFunc2_2 arg0@@134)) )))
(assert (forall ((|#$T0@@7| T@U) (|#$T1@@7| T@U) (|#$R@@20| T@U) ) (!  (=> (and (and (= (type |#$T0@@7|) TyType) (= (type |#$T1@@7|) TyType)) (= (type |#$R@@20|) TyType)) (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@7| |#$T1@@7| |#$R@@20|)) |#$R@@20|)) :qid |unknown.0:0| :skolemid |739| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@7| |#$T1@@7| |#$R@@20|)) )))
(assert (forall ((|#$T0@@8| T@U) (|#$T1@@8| T@U) (|#$R@@21| T@U) (bx@@50 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@8|) TyType) (= (type |#$T1@@8|) TyType)) (= (type |#$R@@21|) TyType)) (= (type bx@@50) BoxType)) ($IsBox bx@@50 (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|))) (and (= ($Box ($Unbox HandleTypeType bx@@50)) bx@@50) ($Is ($Unbox HandleTypeType bx@@50) (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|)))) :qid |unknown.0:0| :skolemid |740| :pattern ( ($IsBox bx@@50 (Tclass._System.___hPartialFunc2 |#$T0@@8| |#$T1@@8| |#$R@@21|))) )))
(assert (forall ((|#$T0@@9| T@U) (|#$T1@@9| T@U) (|#$R@@22| T@U) (|f#0@@3| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@9|) TyType) (= (type |#$T1@@9|) TyType)) (= (type |#$R@@22|) TyType)) (= (type |f#0@@3|) HandleTypeType)) (and (=> ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (and ($Is |f#0@@3| (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (forall ((|x0#0| T@U) (|x1#0| T@U) ) (!  (=> (and (and (= (type |x0#0|) BoxType) (= (type |x1#0|) BoxType)) (and ($IsBox |x0#0| |#$T0@@9|) ($IsBox |x1#0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@9| |#$T1@@9| |#$R@@22| $OneHeap |f#0@@3| |x0#0| |x1#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |741| :no-pattern (type |x0#0|) :no-pattern (type |x1#0|) :no-pattern (U_2_int |x0#0|) :no-pattern (U_2_bool |x0#0|) :no-pattern (U_2_int |x1#0|) :no-pattern (U_2_bool |x1#0|) )))) (=> (and ($Is |f#0@@3| (Tclass._System.___hFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|)) (forall ((|x0#0@@0| T@U) (|x1#0@@0| T@U) ) (!  (=> (and (and (= (type |x0#0@@0|) BoxType) (= (type |x1#0@@0|) BoxType)) (and ($IsBox |x0#0@@0| |#$T0@@9|) ($IsBox |x1#0@@0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@9| |#$T1@@9| |#$R@@22| $OneHeap |f#0@@3| |x0#0@@0| |x1#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |741| :no-pattern (type |x0#0@@0|) :no-pattern (type |x1#0@@0|) :no-pattern (U_2_int |x0#0@@0|) :no-pattern (U_2_bool |x0#0@@0|) :no-pattern (U_2_int |x1#0@@0|) :no-pattern (U_2_bool |x1#0@@0|) ))) ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|))))) :qid |unknown.0:0| :skolemid |742| :pattern ( ($Is |f#0@@3| (Tclass._System.___hPartialFunc2 |#$T0@@9| |#$T1@@9| |#$R@@22|))) )))
(assert (forall ((|#$T0@@10| T@U) (|#$T1@@10| T@U) (|#$R@@23| T@U) (|f#0@@4| T@U) ($h@@10 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@10|) TyType) (= (type |#$T1@@10|) TyType)) (= (type |#$R@@23|) TyType)) (= (type |f#0@@4|) HandleTypeType)) (= (type $h@@10) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10) ($IsAlloc |f#0@@4| (Tclass._System.___hFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)) (=> ($IsAlloc |f#0@@4| (Tclass._System.___hFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10) ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)))) :qid |unknown.0:0| :skolemid |743| :pattern ( ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc2 |#$T0@@10| |#$T1@@10| |#$R@@23|) $h@@10)) )))
(assert (forall ((arg0@@135 T@U) (arg1@@62 T@U) (arg2@@23 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2 arg0@@135 arg1@@62 arg2@@23)) TyType) :qid |funType:Tclass._System.___hTotalFunc2| :pattern ( (Tclass._System.___hTotalFunc2 arg0@@135 arg1@@62 arg2@@23)) )))
(assert (forall ((|#$T0@@11| T@U) (|#$T1@@11| T@U) (|#$R@@24| T@U) ) (!  (=> (and (and (= (type |#$T0@@11|) TyType) (= (type |#$T1@@11|) TyType)) (= (type |#$R@@24|) TyType)) (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@24|)) Tagclass._System.___hTotalFunc2)) :qid |unknown.0:0| :skolemid |744| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@11| |#$T1@@11| |#$R@@24|)) )))
(assert (forall ((arg0@@136 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_0 arg0@@136)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_0| :pattern ( (Tclass._System.___hTotalFunc2_0 arg0@@136)) )))
(assert (forall ((|#$T0@@12| T@U) (|#$T1@@12| T@U) (|#$R@@25| T@U) ) (!  (=> (and (and (= (type |#$T0@@12|) TyType) (= (type |#$T1@@12|) TyType)) (= (type |#$R@@25|) TyType)) (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@12| |#$T1@@12| |#$R@@25|)) |#$T0@@12|)) :qid |unknown.0:0| :skolemid |745| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@12| |#$T1@@12| |#$R@@25|)) )))
(assert (forall ((arg0@@137 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_1 arg0@@137)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_1| :pattern ( (Tclass._System.___hTotalFunc2_1 arg0@@137)) )))
(assert (forall ((|#$T0@@13| T@U) (|#$T1@@13| T@U) (|#$R@@26| T@U) ) (!  (=> (and (and (= (type |#$T0@@13|) TyType) (= (type |#$T1@@13|) TyType)) (= (type |#$R@@26|) TyType)) (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@13| |#$T1@@13| |#$R@@26|)) |#$T1@@13|)) :qid |unknown.0:0| :skolemid |746| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@13| |#$T1@@13| |#$R@@26|)) )))
(assert (forall ((arg0@@138 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_2 arg0@@138)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_2| :pattern ( (Tclass._System.___hTotalFunc2_2 arg0@@138)) )))
(assert (forall ((|#$T0@@14| T@U) (|#$T1@@14| T@U) (|#$R@@27| T@U) ) (!  (=> (and (and (= (type |#$T0@@14|) TyType) (= (type |#$T1@@14|) TyType)) (= (type |#$R@@27|) TyType)) (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@27|)) |#$R@@27|)) :qid |unknown.0:0| :skolemid |747| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@14| |#$T1@@14| |#$R@@27|)) )))
(assert (forall ((|#$T0@@15| T@U) (|#$T1@@15| T@U) (|#$R@@28| T@U) (bx@@51 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@15|) TyType) (= (type |#$T1@@15|) TyType)) (= (type |#$R@@28|) TyType)) (= (type bx@@51) BoxType)) ($IsBox bx@@51 (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|))) (and (= ($Box ($Unbox HandleTypeType bx@@51)) bx@@51) ($Is ($Unbox HandleTypeType bx@@51) (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|)))) :qid |unknown.0:0| :skolemid |748| :pattern ( ($IsBox bx@@51 (Tclass._System.___hTotalFunc2 |#$T0@@15| |#$T1@@15| |#$R@@28|))) )))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@16| T@U) (|#$R@@29| T@U) (|f#0@@5| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@16|) TyType) (= (type |#$T1@@16|) TyType)) (= (type |#$R@@29|) TyType)) (= (type |f#0@@5|) HandleTypeType)) (and (=> ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (forall ((|x0#0@@1| T@U) (|x1#0@@1| T@U) ) (!  (=> (and (and (= (type |x0#0@@1|) BoxType) (= (type |x1#0@@1|) BoxType)) (and ($IsBox |x0#0@@1| |#$T0@@16|) ($IsBox |x1#0@@1| |#$T1@@16|))) (Requires2 |#$T0@@16| |#$T1@@16| |#$R@@29| $OneHeap |f#0@@5| |x0#0@@1| |x1#0@@1|)) :qid |unknown.0:0| :skolemid |749| :no-pattern (type |x0#0@@1|) :no-pattern (type |x1#0@@1|) :no-pattern (U_2_int |x0#0@@1|) :no-pattern (U_2_bool |x0#0@@1|) :no-pattern (U_2_int |x1#0@@1|) :no-pattern (U_2_bool |x1#0@@1|) )))) (=> (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|)) (forall ((|x0#0@@2| T@U) (|x1#0@@2| T@U) ) (!  (=> (and (and (= (type |x0#0@@2|) BoxType) (= (type |x1#0@@2|) BoxType)) (and ($IsBox |x0#0@@2| |#$T0@@16|) ($IsBox |x1#0@@2| |#$T1@@16|))) (Requires2 |#$T0@@16| |#$T1@@16| |#$R@@29| $OneHeap |f#0@@5| |x0#0@@2| |x1#0@@2|)) :qid |unknown.0:0| :skolemid |749| :no-pattern (type |x0#0@@2|) :no-pattern (type |x1#0@@2|) :no-pattern (U_2_int |x0#0@@2|) :no-pattern (U_2_bool |x0#0@@2|) :no-pattern (U_2_int |x1#0@@2|) :no-pattern (U_2_bool |x1#0@@2|) ))) ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|))))) :qid |unknown.0:0| :skolemid |750| :pattern ( ($Is |f#0@@5| (Tclass._System.___hTotalFunc2 |#$T0@@16| |#$T1@@16| |#$R@@29|))) )))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@17| T@U) (|#$R@@30| T@U) (|f#0@@6| T@U) ($h@@11 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@17|) TyType) (= (type |#$T1@@17|) TyType)) (= (type |#$R@@30|) TyType)) (= (type |f#0@@6|) HandleTypeType)) (= (type $h@@11) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11) ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)) (=> ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11) ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)))) :qid |unknown.0:0| :skolemid |751| :pattern ( ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc2 |#$T0@@17| |#$T1@@17| |#$R@@30|) $h@@11)) )))
(assert (forall ((arg0@@139 T@U) (arg1@@63 T@U) ) (! (= (type (Tclass._System.___hFunc1 arg0@@139 arg1@@63)) TyType) :qid |funType:Tclass._System.___hFunc1| :pattern ( (Tclass._System.___hFunc1 arg0@@139 arg1@@63)) )))
(assert (forall ((|#$T0@@18| T@U) (|#$R@@31| T@U) ) (!  (=> (and (= (type |#$T0@@18|) TyType) (= (type |#$R@@31|) TyType)) (= (Tag (Tclass._System.___hFunc1 |#$T0@@18| |#$R@@31|)) Tagclass._System.___hFunc1)) :qid |unknown.0:0| :skolemid |752| :pattern ( (Tclass._System.___hFunc1 |#$T0@@18| |#$R@@31|)) )))
(assert (forall ((arg0@@140 T@U) ) (! (= (type (Tclass._System.___hFunc1_0 arg0@@140)) TyType) :qid |funType:Tclass._System.___hFunc1_0| :pattern ( (Tclass._System.___hFunc1_0 arg0@@140)) )))
(assert (forall ((|#$T0@@19| T@U) (|#$R@@32| T@U) ) (!  (=> (and (= (type |#$T0@@19|) TyType) (= (type |#$R@@32|) TyType)) (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@19| |#$R@@32|)) |#$T0@@19|)) :qid |unknown.0:0| :skolemid |753| :pattern ( (Tclass._System.___hFunc1 |#$T0@@19| |#$R@@32|)) )))
(assert (forall ((arg0@@141 T@U) ) (! (= (type (Tclass._System.___hFunc1_1 arg0@@141)) TyType) :qid |funType:Tclass._System.___hFunc1_1| :pattern ( (Tclass._System.___hFunc1_1 arg0@@141)) )))
(assert (forall ((|#$T0@@20| T@U) (|#$R@@33| T@U) ) (!  (=> (and (= (type |#$T0@@20|) TyType) (= (type |#$R@@33|) TyType)) (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@20| |#$R@@33|)) |#$R@@33|)) :qid |unknown.0:0| :skolemid |754| :pattern ( (Tclass._System.___hFunc1 |#$T0@@20| |#$R@@33|)) )))
(assert (forall ((|#$T0@@21| T@U) (|#$R@@34| T@U) (bx@@52 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@21|) TyType) (= (type |#$R@@34|) TyType)) (= (type bx@@52) BoxType)) ($IsBox bx@@52 (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|))) (and (= ($Box ($Unbox HandleTypeType bx@@52)) bx@@52) ($Is ($Unbox HandleTypeType bx@@52) (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|)))) :qid |unknown.0:0| :skolemid |755| :pattern ( ($IsBox bx@@52 (Tclass._System.___hFunc1 |#$T0@@21| |#$R@@34|))) )))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@142 T@T) (arg1@@64 T@T) (arg2@@24 T@T) ) (! (= (Ctor (MapType3Type arg0@@142 arg1@@64 arg2@@24)) 22) :qid |ctor:MapType3Type| )) (forall ((arg0@@143 T@T) (arg1@@65 T@T) (arg2@@25 T@T) ) (! (= (MapType3TypeInv0 (MapType3Type arg0@@143 arg1@@65 arg2@@25)) arg0@@143) :qid |typeInv:MapType3TypeInv0| :pattern ( (MapType3Type arg0@@143 arg1@@65 arg2@@25)) ))) (forall ((arg0@@144 T@T) (arg1@@66 T@T) (arg2@@26 T@T) ) (! (= (MapType3TypeInv1 (MapType3Type arg0@@144 arg1@@66 arg2@@26)) arg1@@66) :qid |typeInv:MapType3TypeInv1| :pattern ( (MapType3Type arg0@@144 arg1@@66 arg2@@26)) ))) (forall ((arg0@@145 T@T) (arg1@@67 T@T) (arg2@@27 T@T) ) (! (= (MapType3TypeInv2 (MapType3Type arg0@@145 arg1@@67 arg2@@27)) arg2@@27) :qid |typeInv:MapType3TypeInv2| :pattern ( (MapType3Type arg0@@145 arg1@@67 arg2@@27)) ))) (forall ((arg0@@146 T@U) (arg1@@68 T@U) (arg2@@28 T@U) ) (! (let ((aVar2@@0 (MapType3TypeInv2 (type arg0@@146)))) (= (type (MapType3Select arg0@@146 arg1@@68 arg2@@28)) aVar2@@0)) :qid |funType:MapType3Select| :pattern ( (MapType3Select arg0@@146 arg1@@68 arg2@@28)) ))) (forall ((arg0@@147 T@U) (arg1@@69 T@U) (arg2@@29 T@U) (arg3@@10 T@U) ) (! (let ((aVar2@@1 (type arg3@@10))) (let ((aVar1@@3 (type arg2@@29))) (let ((aVar0@@1 (type arg1@@69))) (= (type (MapType3Store arg0@@147 arg1@@69 arg2@@29 arg3@@10)) (MapType3Type aVar0@@1 aVar1@@3 aVar2@@1))))) :qid |funType:MapType3Store| :pattern ( (MapType3Store arg0@@147 arg1@@69 arg2@@29 arg3@@10)) ))) (forall ((m@@32 T@U) (x0@@10 T@U) (x1@@4 T@U) (val@@11 T@U) ) (! (let ((aVar2@@2 (MapType3TypeInv2 (type m@@32)))) (=> (= (type val@@11) aVar2@@2) (= (MapType3Select (MapType3Store m@@32 x0@@10 x1@@4 val@@11) x0@@10 x1@@4) val@@11))) :qid |mapAx0:MapType3Select| :weight 0 ))) (and (and (forall ((val@@12 T@U) (m@@33 T@U) (x0@@11 T@U) (x1@@5 T@U) (y0@@7 T@U) (y1@@3 T@U) ) (!  (or (= x0@@11 y0@@7) (= (MapType3Select (MapType3Store m@@33 x0@@11 x1@@5 val@@12) y0@@7 y1@@3) (MapType3Select m@@33 y0@@7 y1@@3))) :qid |mapAx1:MapType3Select:0| :weight 0 )) (forall ((val@@13 T@U) (m@@34 T@U) (x0@@12 T@U) (x1@@6 T@U) (y0@@8 T@U) (y1@@4 T@U) ) (!  (or (= x1@@6 y1@@4) (= (MapType3Select (MapType3Store m@@34 x0@@12 x1@@6 val@@13) y0@@8 y1@@4) (MapType3Select m@@34 y0@@8 y1@@4))) :qid |mapAx1:MapType3Select:1| :weight 0 ))) (forall ((val@@14 T@U) (m@@35 T@U) (x0@@13 T@U) (x1@@7 T@U) (y0@@9 T@U) (y1@@5 T@U) ) (!  (or true (= (MapType3Select (MapType3Store m@@35 x0@@13 x1@@7 val@@14) y0@@9 y1@@5) (MapType3Select m@@35 y0@@9 y1@@5))) :qid |mapAx2:MapType3Select| :weight 0 )))) (forall ((arg0@@148 T@U) (arg1@@70 T@U) (arg2@@30 T@U) ) (! (= (type (Handle1 arg0@@148 arg1@@70 arg2@@30)) HandleTypeType) :qid |funType:Handle1| :pattern ( (Handle1 arg0@@148 arg1@@70 arg2@@30)) ))))
(assert (forall ((t0@@42 T@U) (t1@@18 T@U) (heap@@11 T@U) (h@@34 T@U) (r@@16 T@U) (rd@@5 T@U) (bx0@@15 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@42) TyType) (= (type t1@@18) TyType)) (= (type heap@@11) (MapType0Type refType MapType1Type))) (= (type h@@34) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@16) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@5) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@15) BoxType)) (= (Apply1 t0@@42 t1@@18 heap@@11 (Handle1 h@@34 r@@16 rd@@5) bx0@@15) (MapType3Select h@@34 heap@@11 bx0@@15))) :qid |unknown.0:0| :skolemid |756| :pattern ( (Apply1 t0@@42 t1@@18 heap@@11 (Handle1 h@@34 r@@16 rd@@5) bx0@@15)) )))
(assert (forall ((t0@@43 T@U) (t1@@19 T@U) (heap@@12 T@U) (h@@35 T@U) (r@@17 T@U) (rd@@6 T@U) (bx0@@16 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@43) TyType) (= (type t1@@19) TyType)) (= (type heap@@12) (MapType0Type refType MapType1Type))) (= (type h@@35) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@17) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@6) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@16) BoxType)) (U_2_bool (MapType3Select r@@17 heap@@12 bx0@@16))) (Requires1 t0@@43 t1@@19 heap@@12 (Handle1 h@@35 r@@17 rd@@6) bx0@@16)) :qid |unknown.0:0| :skolemid |757| :pattern ( (Requires1 t0@@43 t1@@19 heap@@12 (Handle1 h@@35 r@@17 rd@@6) bx0@@16)) )))
(assert (forall ((arg0@@149 T@U) (arg1@@71 T@U) (arg2@@31 T@U) (arg3@@11 T@U) (arg4@@3 T@U) ) (! (= (type (Reads1 arg0@@149 arg1@@71 arg2@@31 arg3@@11 arg4@@3)) (MapType0Type BoxType boolType)) :qid |funType:Reads1| :pattern ( (Reads1 arg0@@149 arg1@@71 arg2@@31 arg3@@11 arg4@@3)) )))
(assert (forall ((t0@@44 T@U) (t1@@20 T@U) (heap@@13 T@U) (h@@36 T@U) (r@@18 T@U) (rd@@7 T@U) (bx0@@17 T@U) (bx@@53 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@44) TyType) (= (type t1@@20) TyType)) (= (type heap@@13) (MapType0Type refType MapType1Type))) (= (type h@@36) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@18) (MapType3Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@7) (MapType3Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@17) BoxType)) (= (type bx@@53) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53)) (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@17) bx@@53))) (=> (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@17) bx@@53)) (U_2_bool (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53))))) :qid |unknown.0:0| :skolemid |758| :pattern ( (MapType0Select (Reads1 t0@@44 t1@@20 heap@@13 (Handle1 h@@36 r@@18 rd@@7) bx0@@17) bx@@53)) )))
(assert (forall ((t0@@45 T@U) (t1@@21 T@U) (h0@@12 T@U) (h1@@12 T@U) (f@@29 T@U) (bx0@@18 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@45) TyType) (= (type t1@@21) TyType)) (= (type h0@@12) (MapType0Type refType MapType1Type))) (= (type h1@@12) (MapType0Type refType MapType1Type))) (= (type f@@29) HandleTypeType)) (= (type bx0@@18) BoxType)) (and (and (and ($HeapSucc h0@@12 h1@@12) (and ($IsGoodHeap h0@@12) ($IsGoodHeap h1@@12))) (and ($IsBox bx0@@18 t0@@45) ($Is f@@29 (Tclass._System.___hFunc1 t0@@45 t1@@21)))) (forall ((o@@66 T@U) (fld@@11 T@U) ) (! (let ((a@@94 (FieldTypeInv0 (type fld@@11)))) (=> (and (and (= (type o@@66) refType) (= (type fld@@11) (FieldType a@@94))) (and (not (= o@@66 null)) (U_2_bool (MapType0Select (Reads1 t0@@45 t1@@21 h0@@12 f@@29 bx0@@18) ($Box o@@66))))) (= (MapType1Select (MapType0Select h0@@12 o@@66) fld@@11) (MapType1Select (MapType0Select h1@@12 o@@66) fld@@11)))) :qid |unknown.0:0| :skolemid |759| :no-pattern (type o@@66) :no-pattern (type fld@@11) :no-pattern (U_2_int o@@66) :no-pattern (U_2_bool o@@66) :no-pattern (U_2_int fld@@11) :no-pattern (U_2_bool fld@@11) )))) (= (Reads1 t0@@45 t1@@21 h0@@12 f@@29 bx0@@18) (Reads1 t0@@45 t1@@21 h1@@12 f@@29 bx0@@18))) :qid |unknown.0:0| :skolemid |760| :pattern ( ($HeapSucc h0@@12 h1@@12) (Reads1 t0@@45 t1@@21 h1@@12 f@@29 bx0@@18)) )))
(assert (forall ((t0@@46 T@U) (t1@@22 T@U) (h0@@13 T@U) (h1@@13 T@U) (f@@30 T@U) (bx0@@19 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@46) TyType) (= (type t1@@22) TyType)) (= (type h0@@13) (MapType0Type refType MapType1Type))) (= (type h1@@13) (MapType0Type refType MapType1Type))) (= (type f@@30) HandleTypeType)) (= (type bx0@@19) BoxType)) (and (and (and ($HeapSucc h0@@13 h1@@13) (and ($IsGoodHeap h0@@13) ($IsGoodHeap h1@@13))) (and ($IsBox bx0@@19 t0@@46) ($Is f@@30 (Tclass._System.___hFunc1 t0@@46 t1@@22)))) (forall ((o@@67 T@U) (fld@@12 T@U) ) (! (let ((a@@95 (FieldTypeInv0 (type fld@@12)))) (=> (and (and (= (type o@@67) refType) (= (type fld@@12) (FieldType a@@95))) (and (not (= o@@67 null)) (U_2_bool (MapType0Select (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19) ($Box o@@67))))) (= (MapType1Select (MapType0Select h0@@13 o@@67) fld@@12) (MapType1Select (MapType0Select h1@@13 o@@67) fld@@12)))) :qid |unknown.0:0| :skolemid |761| :no-pattern (type o@@67) :no-pattern (type fld@@12) :no-pattern (U_2_int o@@67) :no-pattern (U_2_bool o@@67) :no-pattern (U_2_int fld@@12) :no-pattern (U_2_bool fld@@12) )))) (= (Reads1 t0@@46 t1@@22 h0@@13 f@@30 bx0@@19) (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19))) :qid |unknown.0:0| :skolemid |762| :pattern ( ($HeapSucc h0@@13 h1@@13) (Reads1 t0@@46 t1@@22 h1@@13 f@@30 bx0@@19)) )))
(assert (forall ((t0@@47 T@U) (t1@@23 T@U) (h0@@14 T@U) (h1@@14 T@U) (f@@31 T@U) (bx0@@20 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@47) TyType) (= (type t1@@23) TyType)) (= (type h0@@14) (MapType0Type refType MapType1Type))) (= (type h1@@14) (MapType0Type refType MapType1Type))) (= (type f@@31) HandleTypeType)) (= (type bx0@@20) BoxType)) (and (and (and ($HeapSucc h0@@14 h1@@14) (and ($IsGoodHeap h0@@14) ($IsGoodHeap h1@@14))) (and ($IsBox bx0@@20 t0@@47) ($Is f@@31 (Tclass._System.___hFunc1 t0@@47 t1@@23)))) (forall ((o@@68 T@U) (fld@@13 T@U) ) (! (let ((a@@96 (FieldTypeInv0 (type fld@@13)))) (=> (and (and (= (type o@@68) refType) (= (type fld@@13) (FieldType a@@96))) (and (not (= o@@68 null)) (U_2_bool (MapType0Select (Reads1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20) ($Box o@@68))))) (= (MapType1Select (MapType0Select h0@@14 o@@68) fld@@13) (MapType1Select (MapType0Select h1@@14 o@@68) fld@@13)))) :qid |unknown.0:0| :skolemid |763| :no-pattern (type o@@68) :no-pattern (type fld@@13) :no-pattern (U_2_int o@@68) :no-pattern (U_2_bool o@@68) :no-pattern (U_2_int fld@@13) :no-pattern (U_2_bool fld@@13) )))) (and (=> (Requires1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20) (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20)) (=> (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20) (Requires1 t0@@47 t1@@23 h0@@14 f@@31 bx0@@20)))) :qid |unknown.0:0| :skolemid |764| :pattern ( ($HeapSucc h0@@14 h1@@14) (Requires1 t0@@47 t1@@23 h1@@14 f@@31 bx0@@20)) )))
(assert (forall ((t0@@48 T@U) (t1@@24 T@U) (h0@@15 T@U) (h1@@15 T@U) (f@@32 T@U) (bx0@@21 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@48) TyType) (= (type t1@@24) TyType)) (= (type h0@@15) (MapType0Type refType MapType1Type))) (= (type h1@@15) (MapType0Type refType MapType1Type))) (= (type f@@32) HandleTypeType)) (= (type bx0@@21) BoxType)) (and (and (and ($HeapSucc h0@@15 h1@@15) (and ($IsGoodHeap h0@@15) ($IsGoodHeap h1@@15))) (and ($IsBox bx0@@21 t0@@48) ($Is f@@32 (Tclass._System.___hFunc1 t0@@48 t1@@24)))) (forall ((o@@69 T@U) (fld@@14 T@U) ) (! (let ((a@@97 (FieldTypeInv0 (type fld@@14)))) (=> (and (and (= (type o@@69) refType) (= (type fld@@14) (FieldType a@@97))) (and (not (= o@@69 null)) (U_2_bool (MapType0Select (Reads1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21) ($Box o@@69))))) (= (MapType1Select (MapType0Select h0@@15 o@@69) fld@@14) (MapType1Select (MapType0Select h1@@15 o@@69) fld@@14)))) :qid |unknown.0:0| :skolemid |765| :no-pattern (type o@@69) :no-pattern (type fld@@14) :no-pattern (U_2_int o@@69) :no-pattern (U_2_bool o@@69) :no-pattern (U_2_int fld@@14) :no-pattern (U_2_bool fld@@14) )))) (and (=> (Requires1 t0@@48 t1@@24 h0@@15 f@@32 bx0@@21) (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21)) (=> (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21) (Requires1 t0@@48 t1@@24 h0@@15 f@@32 bx0@@21)))) :qid |unknown.0:0| :skolemid |766| :pattern ( ($HeapSucc h0@@15 h1@@15) (Requires1 t0@@48 t1@@24 h1@@15 f@@32 bx0@@21)) )))
(assert (forall ((t0@@49 T@U) (t1@@25 T@U) (h0@@16 T@U) (h1@@16 T@U) (f@@33 T@U) (bx0@@22 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@49) TyType) (= (type t1@@25) TyType)) (= (type h0@@16) (MapType0Type refType MapType1Type))) (= (type h1@@16) (MapType0Type refType MapType1Type))) (= (type f@@33) HandleTypeType)) (= (type bx0@@22) BoxType)) (and (and (and ($HeapSucc h0@@16 h1@@16) (and ($IsGoodHeap h0@@16) ($IsGoodHeap h1@@16))) (and ($IsBox bx0@@22 t0@@49) ($Is f@@33 (Tclass._System.___hFunc1 t0@@49 t1@@25)))) (forall ((o@@70 T@U) (fld@@15 T@U) ) (! (let ((a@@98 (FieldTypeInv0 (type fld@@15)))) (=> (and (and (= (type o@@70) refType) (= (type fld@@15) (FieldType a@@98))) (and (not (= o@@70 null)) (U_2_bool (MapType0Select (Reads1 t0@@49 t1@@25 h0@@16 f@@33 bx0@@22) ($Box o@@70))))) (= (MapType1Select (MapType0Select h0@@16 o@@70) fld@@15) (MapType1Select (MapType0Select h1@@16 o@@70) fld@@15)))) :qid |unknown.0:0| :skolemid |767| :no-pattern (type o@@70) :no-pattern (type fld@@15) :no-pattern (U_2_int o@@70) :no-pattern (U_2_bool o@@70) :no-pattern (U_2_int fld@@15) :no-pattern (U_2_bool fld@@15) )))) (= (Apply1 t0@@49 t1@@25 h0@@16 f@@33 bx0@@22) (Apply1 t0@@49 t1@@25 h1@@16 f@@33 bx0@@22))) :qid |unknown.0:0| :skolemid |768| :pattern ( ($HeapSucc h0@@16 h1@@16) (Apply1 t0@@49 t1@@25 h1@@16 f@@33 bx0@@22)) )))
(assert (forall ((t0@@50 T@U) (t1@@26 T@U) (h0@@17 T@U) (h1@@17 T@U) (f@@34 T@U) (bx0@@23 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@50) TyType) (= (type t1@@26) TyType)) (= (type h0@@17) (MapType0Type refType MapType1Type))) (= (type h1@@17) (MapType0Type refType MapType1Type))) (= (type f@@34) HandleTypeType)) (= (type bx0@@23) BoxType)) (and (and (and ($HeapSucc h0@@17 h1@@17) (and ($IsGoodHeap h0@@17) ($IsGoodHeap h1@@17))) (and ($IsBox bx0@@23 t0@@50) ($Is f@@34 (Tclass._System.___hFunc1 t0@@50 t1@@26)))) (forall ((o@@71 T@U) (fld@@16 T@U) ) (! (let ((a@@99 (FieldTypeInv0 (type fld@@16)))) (=> (and (and (= (type o@@71) refType) (= (type fld@@16) (FieldType a@@99))) (and (not (= o@@71 null)) (U_2_bool (MapType0Select (Reads1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23) ($Box o@@71))))) (= (MapType1Select (MapType0Select h0@@17 o@@71) fld@@16) (MapType1Select (MapType0Select h1@@17 o@@71) fld@@16)))) :qid |unknown.0:0| :skolemid |769| :no-pattern (type o@@71) :no-pattern (type fld@@16) :no-pattern (U_2_int o@@71) :no-pattern (U_2_bool o@@71) :no-pattern (U_2_int fld@@16) :no-pattern (U_2_bool fld@@16) )))) (= (Apply1 t0@@50 t1@@26 h0@@17 f@@34 bx0@@23) (Apply1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23))) :qid |unknown.0:0| :skolemid |770| :pattern ( ($HeapSucc h0@@17 h1@@17) (Apply1 t0@@50 t1@@26 h1@@17 f@@34 bx0@@23)) )))
(assert (forall ((t0@@51 T@U) (t1@@27 T@U) (heap@@14 T@U) (f@@35 T@U) (bx0@@24 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@51) TyType) (= (type t1@@27) TyType)) (= (type heap@@14) (MapType0Type refType MapType1Type))) (= (type f@@35) HandleTypeType)) (= (type bx0@@24) BoxType)) (and ($IsGoodHeap heap@@14) (and ($IsBox bx0@@24 t0@@51) ($Is f@@35 (Tclass._System.___hFunc1 t0@@51 t1@@27))))) (and (=> (|Set#Equal| (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |771| :pattern ( (Reads1 t0@@51 t1@@27 $OneHeap f@@35 bx0@@24) ($IsGoodHeap heap@@14)) :pattern ( (Reads1 t0@@51 t1@@27 heap@@14 f@@35 bx0@@24)) )))
(assert (forall ((t0@@52 T@U) (t1@@28 T@U) (heap@@15 T@U) (f@@36 T@U) (bx0@@25 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@52) TyType) (= (type t1@@28) TyType)) (= (type heap@@15) (MapType0Type refType MapType1Type))) (= (type f@@36) HandleTypeType)) (= (type bx0@@25) BoxType)) (and (and ($IsGoodHeap heap@@15) (and ($IsBox bx0@@25 t0@@52) ($Is f@@36 (Tclass._System.___hFunc1 t0@@52 t1@@28)))) (|Set#Equal| (Reads1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) (|Set#Empty| BoxType)))) (and (=> (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25)) (=> (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25) (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25)))) :qid |unknown.0:0| :skolemid |772| :pattern ( (Requires1 t0@@52 t1@@28 $OneHeap f@@36 bx0@@25) ($IsGoodHeap heap@@15)) :pattern ( (Requires1 t0@@52 t1@@28 heap@@15 f@@36 bx0@@25)) )))
(assert (forall ((f@@37 T@U) (t0@@53 T@U) (t1@@29 T@U) ) (!  (=> (and (and (= (type f@@37) HandleTypeType) (= (type t0@@53) TyType)) (= (type t1@@29) TyType)) (and (=> ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29)) (forall ((h@@37 T@U) (bx0@@26 T@U) ) (!  (=> (and (= (type h@@37) (MapType0Type refType MapType1Type)) (= (type bx0@@26) BoxType)) (=> (and (and ($IsGoodHeap h@@37) ($IsBox bx0@@26 t0@@53)) (Requires1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26)) ($IsBox (Apply1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26) t1@@29))) :qid |DafnyPre.521:12| :skolemid |773| :pattern ( (Apply1 t0@@53 t1@@29 h@@37 f@@37 bx0@@26)) ))) (=> (forall ((h@@38 T@U) (bx0@@27 T@U) ) (!  (=> (and (= (type h@@38) (MapType0Type refType MapType1Type)) (= (type bx0@@27) BoxType)) (=> (and (and ($IsGoodHeap h@@38) ($IsBox bx0@@27 t0@@53)) (Requires1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27)) ($IsBox (Apply1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27) t1@@29))) :qid |DafnyPre.521:12| :skolemid |773| :pattern ( (Apply1 t0@@53 t1@@29 h@@38 f@@37 bx0@@27)) )) ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29))))) :qid |unknown.0:0| :skolemid |774| :pattern ( ($Is f@@37 (Tclass._System.___hFunc1 t0@@53 t1@@29))) )))
(assert (forall ((f@@38 T@U) (t0@@54 T@U) (t1@@30 T@U) (u0@@1 T@U) (u1@@0 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@38) HandleTypeType) (= (type t0@@54) TyType)) (= (type t1@@30) TyType)) (= (type u0@@1) TyType)) (= (type u1@@0) TyType)) (and (and ($Is f@@38 (Tclass._System.___hFunc1 t0@@54 t1@@30)) (forall ((bx@@54 T@U) ) (!  (=> (and (= (type bx@@54) BoxType) ($IsBox bx@@54 u0@@1)) ($IsBox bx@@54 t0@@54)) :qid |unknown.0:0| :skolemid |775| :pattern ( ($IsBox bx@@54 u0@@1)) :pattern ( ($IsBox bx@@54 t0@@54)) ))) (forall ((bx@@55 T@U) ) (!  (=> (and (= (type bx@@55) BoxType) ($IsBox bx@@55 t1@@30)) ($IsBox bx@@55 u1@@0)) :qid |unknown.0:0| :skolemid |776| :pattern ( ($IsBox bx@@55 t1@@30)) :pattern ( ($IsBox bx@@55 u1@@0)) )))) ($Is f@@38 (Tclass._System.___hFunc1 u0@@1 u1@@0))) :qid |unknown.0:0| :skolemid |777| :pattern ( ($Is f@@38 (Tclass._System.___hFunc1 t0@@54 t1@@30)) ($Is f@@38 (Tclass._System.___hFunc1 u0@@1 u1@@0))) )))
(assert (forall ((f@@39 T@U) (t0@@55 T@U) (t1@@31 T@U) (h@@39 T@U) ) (!  (=> (and (and (and (and (= (type f@@39) HandleTypeType) (= (type t0@@55) TyType)) (= (type t1@@31) TyType)) (= (type h@@39) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@39)) (and (=> ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39) (forall ((bx0@@28 T@U) ) (!  (=> (= (type bx0@@28) BoxType) (=> (and (and ($IsBox bx0@@28 t0@@55) ($IsAllocBox bx0@@28 t0@@55 h@@39)) (Requires1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) (forall ((r@@19 T@U) ) (!  (=> (= (type r@@19) refType) (=> (and (not (= r@@19 null)) (U_2_bool (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28) ($Box r@@19)))) (U_2_bool (MapType1Select (MapType0Select h@@39 r@@19) alloc)))) :qid |unknown.0:0| :skolemid |778| :pattern ( (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28) ($Box r@@19))) )))) :qid |unknown.0:0| :skolemid |779| :pattern ( (Apply1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) :pattern ( (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@28)) ))) (=> (forall ((bx0@@29 T@U) ) (!  (=> (= (type bx0@@29) BoxType) (=> (and (and ($IsBox bx0@@29 t0@@55) ($IsAllocBox bx0@@29 t0@@55 h@@39)) (Requires1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) (forall ((r@@20 T@U) ) (!  (=> (= (type r@@20) refType) (=> (and (not (= r@@20 null)) (U_2_bool (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29) ($Box r@@20)))) (U_2_bool (MapType1Select (MapType0Select h@@39 r@@20) alloc)))) :qid |unknown.0:0| :skolemid |778| :pattern ( (MapType0Select (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29) ($Box r@@20))) )))) :qid |unknown.0:0| :skolemid |779| :pattern ( (Apply1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) :pattern ( (Reads1 t0@@55 t1@@31 h@@39 f@@39 bx0@@29)) )) ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39)))) :qid |unknown.0:0| :skolemid |780| :pattern ( ($IsAlloc f@@39 (Tclass._System.___hFunc1 t0@@55 t1@@31) h@@39)) )))
(assert (forall ((f@@40 T@U) (t0@@56 T@U) (t1@@32 T@U) (h@@40 T@U) ) (!  (=> (and (and (and (and (= (type f@@40) HandleTypeType) (= (type t0@@56) TyType)) (= (type t1@@32) TyType)) (= (type h@@40) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@40) ($IsAlloc f@@40 (Tclass._System.___hFunc1 t0@@56 t1@@32) h@@40))) (forall ((bx0@@30 T@U) ) (!  (=> (= (type bx0@@30) BoxType) (=> (and ($IsAllocBox bx0@@30 t0@@56 h@@40) (Requires1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30)) ($IsAllocBox (Apply1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30) t1@@32 h@@40))) :qid |unknown.0:0| :skolemid |781| :pattern ( (Apply1 t0@@56 t1@@32 h@@40 f@@40 bx0@@30)) ))) :qid |unknown.0:0| :skolemid |782| :pattern ( ($IsAlloc f@@40 (Tclass._System.___hFunc1 t0@@56 t1@@32) h@@40)) )))
(assert (forall ((arg0@@150 T@U) (arg1@@72 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1 arg0@@150 arg1@@72)) TyType) :qid |funType:Tclass._System.___hPartialFunc1| :pattern ( (Tclass._System.___hPartialFunc1 arg0@@150 arg1@@72)) )))
(assert (forall ((|#$T0@@22| T@U) (|#$R@@35| T@U) ) (!  (=> (and (= (type |#$T0@@22|) TyType) (= (type |#$R@@35|) TyType)) (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@22| |#$R@@35|)) Tagclass._System.___hPartialFunc1)) :qid |unknown.0:0| :skolemid |783| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@22| |#$R@@35|)) )))
(assert (forall ((arg0@@151 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_0 arg0@@151)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_0| :pattern ( (Tclass._System.___hPartialFunc1_0 arg0@@151)) )))
(assert (forall ((|#$T0@@23| T@U) (|#$R@@36| T@U) ) (!  (=> (and (= (type |#$T0@@23|) TyType) (= (type |#$R@@36|) TyType)) (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@23| |#$R@@36|)) |#$T0@@23|)) :qid |unknown.0:0| :skolemid |784| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@23| |#$R@@36|)) )))
(assert (forall ((arg0@@152 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_1 arg0@@152)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_1| :pattern ( (Tclass._System.___hPartialFunc1_1 arg0@@152)) )))
(assert (forall ((|#$T0@@24| T@U) (|#$R@@37| T@U) ) (!  (=> (and (= (type |#$T0@@24|) TyType) (= (type |#$R@@37|) TyType)) (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@24| |#$R@@37|)) |#$R@@37|)) :qid |unknown.0:0| :skolemid |785| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@24| |#$R@@37|)) )))
(assert (forall ((|#$T0@@25| T@U) (|#$R@@38| T@U) (bx@@56 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@25|) TyType) (= (type |#$R@@38|) TyType)) (= (type bx@@56) BoxType)) ($IsBox bx@@56 (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|))) (and (= ($Box ($Unbox HandleTypeType bx@@56)) bx@@56) ($Is ($Unbox HandleTypeType bx@@56) (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|)))) :qid |unknown.0:0| :skolemid |786| :pattern ( ($IsBox bx@@56 (Tclass._System.___hPartialFunc1 |#$T0@@25| |#$R@@38|))) )))
(assert (forall ((|#$T0@@26| T@U) (|#$R@@39| T@U) (|f#0@@7| T@U) ) (!  (=> (and (and (= (type |#$T0@@26|) TyType) (= (type |#$R@@39|) TyType)) (= (type |f#0@@7|) HandleTypeType)) (and (=> ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|)) (and ($Is |f#0@@7| (Tclass._System.___hFunc1 |#$T0@@26| |#$R@@39|)) (forall ((|x0#0@@3| T@U) ) (!  (=> (and (= (type |x0#0@@3|) BoxType) ($IsBox |x0#0@@3| |#$T0@@26|)) (|Set#Equal| (Reads1 |#$T0@@26| |#$R@@39| $OneHeap |f#0@@7| |x0#0@@3|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |787| :no-pattern (type |x0#0@@3|) :no-pattern (U_2_int |x0#0@@3|) :no-pattern (U_2_bool |x0#0@@3|) )))) (=> (and ($Is |f#0@@7| (Tclass._System.___hFunc1 |#$T0@@26| |#$R@@39|)) (forall ((|x0#0@@4| T@U) ) (!  (=> (and (= (type |x0#0@@4|) BoxType) ($IsBox |x0#0@@4| |#$T0@@26|)) (|Set#Equal| (Reads1 |#$T0@@26| |#$R@@39| $OneHeap |f#0@@7| |x0#0@@4|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |787| :no-pattern (type |x0#0@@4|) :no-pattern (U_2_int |x0#0@@4|) :no-pattern (U_2_bool |x0#0@@4|) ))) ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|))))) :qid |unknown.0:0| :skolemid |788| :pattern ( ($Is |f#0@@7| (Tclass._System.___hPartialFunc1 |#$T0@@26| |#$R@@39|))) )))
(assert (forall ((|#$T0@@27| T@U) (|#$R@@40| T@U) (|f#0@@8| T@U) ($h@@12 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@27|) TyType) (= (type |#$R@@40|) TyType)) (= (type |f#0@@8|) HandleTypeType)) (= (type $h@@12) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hFunc1 |#$T0@@27| |#$R@@40|) $h@@12)) (=> ($IsAlloc |f#0@@8| (Tclass._System.___hFunc1 |#$T0@@27| |#$R@@40|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12)))) :qid |unknown.0:0| :skolemid |789| :pattern ( ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc1 |#$T0@@27| |#$R@@40|) $h@@12)) )))
(assert (forall ((arg0@@153 T@U) (arg1@@73 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1 arg0@@153 arg1@@73)) TyType) :qid |funType:Tclass._System.___hTotalFunc1| :pattern ( (Tclass._System.___hTotalFunc1 arg0@@153 arg1@@73)) )))
(assert (forall ((|#$T0@@28| T@U) (|#$R@@41| T@U) ) (!  (=> (and (= (type |#$T0@@28|) TyType) (= (type |#$R@@41|) TyType)) (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@28| |#$R@@41|)) Tagclass._System.___hTotalFunc1)) :qid |unknown.0:0| :skolemid |790| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@28| |#$R@@41|)) )))
(assert (forall ((arg0@@154 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_0 arg0@@154)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_0| :pattern ( (Tclass._System.___hTotalFunc1_0 arg0@@154)) )))
(assert (forall ((|#$T0@@29| T@U) (|#$R@@42| T@U) ) (!  (=> (and (= (type |#$T0@@29|) TyType) (= (type |#$R@@42|) TyType)) (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@29| |#$R@@42|)) |#$T0@@29|)) :qid |unknown.0:0| :skolemid |791| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@29| |#$R@@42|)) )))
(assert (forall ((arg0@@155 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_1 arg0@@155)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_1| :pattern ( (Tclass._System.___hTotalFunc1_1 arg0@@155)) )))
(assert (forall ((|#$T0@@30| T@U) (|#$R@@43| T@U) ) (!  (=> (and (= (type |#$T0@@30|) TyType) (= (type |#$R@@43|) TyType)) (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@30| |#$R@@43|)) |#$R@@43|)) :qid |unknown.0:0| :skolemid |792| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@30| |#$R@@43|)) )))
(assert (forall ((|#$T0@@31| T@U) (|#$R@@44| T@U) (bx@@57 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@31|) TyType) (= (type |#$R@@44|) TyType)) (= (type bx@@57) BoxType)) ($IsBox bx@@57 (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|))) (and (= ($Box ($Unbox HandleTypeType bx@@57)) bx@@57) ($Is ($Unbox HandleTypeType bx@@57) (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|)))) :qid |unknown.0:0| :skolemid |793| :pattern ( ($IsBox bx@@57 (Tclass._System.___hTotalFunc1 |#$T0@@31| |#$R@@44|))) )))
(assert (forall ((|#$T0@@32| T@U) (|#$R@@45| T@U) (|f#0@@9| T@U) ) (!  (=> (and (and (= (type |#$T0@@32|) TyType) (= (type |#$R@@45|) TyType)) (= (type |f#0@@9|) HandleTypeType)) (and (=> ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|)) (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc1 |#$T0@@32| |#$R@@45|)) (forall ((|x0#0@@5| T@U) ) (!  (=> (and (= (type |x0#0@@5|) BoxType) ($IsBox |x0#0@@5| |#$T0@@32|)) (Requires1 |#$T0@@32| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@5|)) :qid |unknown.0:0| :skolemid |794| :no-pattern (type |x0#0@@5|) :no-pattern (U_2_int |x0#0@@5|) :no-pattern (U_2_bool |x0#0@@5|) )))) (=> (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc1 |#$T0@@32| |#$R@@45|)) (forall ((|x0#0@@6| T@U) ) (!  (=> (and (= (type |x0#0@@6|) BoxType) ($IsBox |x0#0@@6| |#$T0@@32|)) (Requires1 |#$T0@@32| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@6|)) :qid |unknown.0:0| :skolemid |794| :no-pattern (type |x0#0@@6|) :no-pattern (U_2_int |x0#0@@6|) :no-pattern (U_2_bool |x0#0@@6|) ))) ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|))))) :qid |unknown.0:0| :skolemid |795| :pattern ( ($Is |f#0@@9| (Tclass._System.___hTotalFunc1 |#$T0@@32| |#$R@@45|))) )))
(assert (forall ((|#$T0@@33| T@U) (|#$R@@46| T@U) (|f#0@@10| T@U) ($h@@13 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@33|) TyType) (= (type |#$R@@46|) TyType)) (= (type |f#0@@10|) HandleTypeType)) (= (type $h@@13) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc1 |#$T0@@33| |#$R@@46|) $h@@13)) (=> ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc1 |#$T0@@33| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13)))) :qid |unknown.0:0| :skolemid |796| :pattern ( ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc1 |#$T0@@33| |#$R@@46|) $h@@13)) )))
(assert  (and (forall ((arg0@@156 T@U) (arg1@@74 T@U) ) (! (= (type (|#_System._tuple#2._#Make2| arg0@@156 arg1@@74)) DatatypeTypeType) :qid |funType:#_System._tuple#2._#Make2| :pattern ( (|#_System._tuple#2._#Make2| arg0@@156 arg1@@74)) )) (forall ((arg0@@157 T@U) ) (! (= (type (DatatypeCtorId arg0@@157)) DtCtorIdType) :qid |funType:DatatypeCtorId| :pattern ( (DatatypeCtorId arg0@@157)) ))))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (!  (=> (and (= (type |a#0#0#0|) BoxType) (= (type |a#0#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)) :qid |unknown.0:0| :skolemid |797| :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) )))
(assert (forall ((d@@0 T@U) ) (!  (=> (= (type d@@0) DatatypeTypeType) (and (=> (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|)) (=> (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|) (_System.Tuple2.___hMake2_q d@@0)))) :qid |unknown.0:0| :skolemid |798| :pattern ( (_System.Tuple2.___hMake2_q d@@0)) )))
(assert (forall ((d@@1 T@U) ) (!  (=> (and (= (type d@@1) DatatypeTypeType) (_System.Tuple2.___hMake2_q d@@1)) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (!  (and (and (= (type |a#1#0#0|) BoxType) (= (type |a#1#1#0|) BoxType)) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))) :qid |unknown.0:0| :skolemid |799| :no-pattern (type |a#1#0#0|) :no-pattern (type |a#1#1#0|) :no-pattern (U_2_int |a#1#0#0|) :no-pattern (U_2_bool |a#1#0#0|) :no-pattern (U_2_int |a#1#1#0|) :no-pattern (U_2_bool |a#1#1#0|) ))) :qid |unknown.0:0| :skolemid |800| :pattern ( (_System.Tuple2.___hMake2_q d@@1)) )))
(assert (forall ((arg0@@158 T@U) (arg1@@75 T@U) ) (! (= (type (Tclass._System.Tuple2 arg0@@158 arg1@@75)) TyType) :qid |funType:Tclass._System.Tuple2| :pattern ( (Tclass._System.Tuple2 arg0@@158 arg1@@75)) )))
(assert (forall ((|#$T0@@34| T@U) (|#$T1@@18| T@U) ) (!  (=> (and (= (type |#$T0@@34|) TyType) (= (type |#$T1@@18|) TyType)) (= (Tag (Tclass._System.Tuple2 |#$T0@@34| |#$T1@@18|)) Tagclass._System.Tuple2)) :qid |unknown.0:0| :skolemid |801| :pattern ( (Tclass._System.Tuple2 |#$T0@@34| |#$T1@@18|)) )))
(assert (forall ((arg0@@159 T@U) ) (! (= (type (Tclass._System.Tuple2_0 arg0@@159)) TyType) :qid |funType:Tclass._System.Tuple2_0| :pattern ( (Tclass._System.Tuple2_0 arg0@@159)) )))
(assert (forall ((|#$T0@@35| T@U) (|#$T1@@19| T@U) ) (!  (=> (and (= (type |#$T0@@35|) TyType) (= (type |#$T1@@19|) TyType)) (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |#$T0@@35| |#$T1@@19|)) |#$T0@@35|)) :qid |unknown.0:0| :skolemid |802| :pattern ( (Tclass._System.Tuple2 |#$T0@@35| |#$T1@@19|)) )))
(assert (forall ((arg0@@160 T@U) ) (! (= (type (Tclass._System.Tuple2_1 arg0@@160)) TyType) :qid |funType:Tclass._System.Tuple2_1| :pattern ( (Tclass._System.Tuple2_1 arg0@@160)) )))
(assert (forall ((|#$T0@@36| T@U) (|#$T1@@20| T@U) ) (!  (=> (and (= (type |#$T0@@36|) TyType) (= (type |#$T1@@20|) TyType)) (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |#$T0@@36| |#$T1@@20|)) |#$T1@@20|)) :qid |unknown.0:0| :skolemid |803| :pattern ( (Tclass._System.Tuple2 |#$T0@@36| |#$T1@@20|)) )))
(assert (forall ((|#$T0@@37| T@U) (|#$T1@@21| T@U) (bx@@58 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@37|) TyType) (= (type |#$T1@@21|) TyType)) (= (type bx@@58) BoxType)) ($IsBox bx@@58 (Tclass._System.Tuple2 |#$T0@@37| |#$T1@@21|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@58)) bx@@58) ($Is ($Unbox DatatypeTypeType bx@@58) (Tclass._System.Tuple2 |#$T0@@37| |#$T1@@21|)))) :qid |unknown.0:0| :skolemid |804| :pattern ( ($IsBox bx@@58 (Tclass._System.Tuple2 |#$T0@@37| |#$T1@@21|))) )))
(assert (forall ((|#$T0@@38| T@U) (|#$T1@@22| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@38|) TyType) (= (type |#$T1@@22|) TyType)) (= (type |a#2#0#0|) BoxType)) (= (type |a#2#1#0|) BoxType)) (and (=> ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@38| |#$T1@@22|)) (and ($IsBox |a#2#0#0| |#$T0@@38|) ($IsBox |a#2#1#0| |#$T1@@22|))) (=> (and ($IsBox |a#2#0#0| |#$T0@@38|) ($IsBox |a#2#1#0| |#$T1@@22|)) ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@38| |#$T1@@22|))))) :qid |unknown.0:0| :skolemid |805| :pattern ( ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |#$T0@@38| |#$T1@@22|))) )))
(assert (forall ((|#$T0@@39| T@U) (|#$T1@@23| T@U) (|a#3#0#0| T@U) (|a#3#1#0| T@U) ($h@@14 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@39|) TyType) (= (type |#$T1@@23|) TyType)) (= (type |a#3#0#0|) BoxType)) (= (type |a#3#1#0|) BoxType)) (= (type $h@@14) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@14)) (and (=> ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@39| |#$T1@@23|) $h@@14) (and ($IsAllocBox |a#3#0#0| |#$T0@@39| $h@@14) ($IsAllocBox |a#3#1#0| |#$T1@@23| $h@@14))) (=> (and ($IsAllocBox |a#3#0#0| |#$T0@@39| $h@@14) ($IsAllocBox |a#3#1#0| |#$T1@@23| $h@@14)) ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@39| |#$T1@@23|) $h@@14)))) :qid |unknown.0:0| :skolemid |806| :pattern ( ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |#$T0@@39| |#$T1@@23|) $h@@14)) )))
(assert (forall ((d@@2 T@U) (|#$T0@@40| T@U) ($h@@15 T@U) ) (!  (=> (and (and (and (= (type d@@2) DatatypeTypeType) (= (type |#$T0@@40|) TyType)) (= (type $h@@15) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@15) (and (_System.Tuple2.___hMake2_q d@@2) (exists ((|#$T1@@24| T@U) ) (!  (and (= (type |#$T1@@24|) TyType) ($IsAlloc d@@2 (Tclass._System.Tuple2 |#$T0@@40| |#$T1@@24|) $h@@15)) :qid |unknown.0:0| :skolemid |807| :pattern ( ($IsAlloc d@@2 (Tclass._System.Tuple2 |#$T0@@40| |#$T1@@24|) $h@@15)) ))))) ($IsAllocBox (_System.Tuple2._0 d@@2) |#$T0@@40| $h@@15)) :qid |unknown.0:0| :skolemid |808| :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@2) |#$T0@@40| $h@@15)) )))
(assert (forall ((d@@3 T@U) (|#$T1@@25| T@U) ($h@@16 T@U) ) (!  (=> (and (and (and (= (type d@@3) DatatypeTypeType) (= (type |#$T1@@25|) TyType)) (= (type $h@@16) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@16) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|#$T0@@41| T@U) ) (!  (and (= (type |#$T0@@41|) TyType) ($IsAlloc d@@3 (Tclass._System.Tuple2 |#$T0@@41| |#$T1@@25|) $h@@16)) :qid |unknown.0:0| :skolemid |809| :pattern ( ($IsAlloc d@@3 (Tclass._System.Tuple2 |#$T0@@41| |#$T1@@25|) $h@@16)) ))))) ($IsAllocBox (_System.Tuple2._1 d@@3) |#$T1@@25| $h@@16)) :qid |unknown.0:0| :skolemid |810| :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@3) |#$T1@@25| $h@@16)) )))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (!  (=> (and (= (type |a#4#0#0|) BoxType) (= (type |a#4#1#0|) BoxType)) (= (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|)) (Lit (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)))) :qid |unknown.0:0| :skolemid |811| :pattern ( (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|))) )))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (!  (=> (and (= (type |a#5#0#0|) BoxType) (= (type |a#5#1#0|) BoxType)) (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) |a#5#0#0|)) :qid |unknown.0:0| :skolemid |812| :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) )))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (!  (=> (and (= (type |a#6#0#0|) BoxType) (= (type |a#6#1#0|) BoxType)) (< (BoxRank |a#6#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)))) :qid |unknown.0:0| :skolemid |813| :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) )))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (!  (=> (and (= (type |a#7#0#0|) BoxType) (= (type |a#7#1#0|) BoxType)) (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) |a#7#1#0|)) :qid |unknown.0:0| :skolemid |814| :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) )))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (!  (=> (and (= (type |a#8#0#0|) BoxType) (= (type |a#8#1#0|) BoxType)) (< (BoxRank |a#8#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)))) :qid |unknown.0:0| :skolemid |815| :pattern ( (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)) )))
(assert (forall ((d@@4 T@U) ) (!  (=> (and (= (type d@@4) DatatypeTypeType) (|$IsA#_System.Tuple2| d@@4)) (_System.Tuple2.___hMake2_q d@@4)) :qid |unknown.0:0| :skolemid |816| :pattern ( (|$IsA#_System.Tuple2| d@@4)) )))
(assert (forall ((|#$T0@@42| T@U) (|#$T1@@26| T@U) (d@@5 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@42|) TyType) (= (type |#$T1@@26|) TyType)) (= (type d@@5) DatatypeTypeType)) ($Is d@@5 (Tclass._System.Tuple2 |#$T0@@42| |#$T1@@26|))) (_System.Tuple2.___hMake2_q d@@5)) :qid |unknown.0:0| :skolemid |817| :pattern ( (_System.Tuple2.___hMake2_q d@@5) ($Is d@@5 (Tclass._System.Tuple2 |#$T0@@42| |#$T1@@26|))) )))
(assert (forall ((a@@100 T@U) (b@@61 T@U) ) (!  (=> (and (and (= (type a@@100) DatatypeTypeType) (= (type b@@61) DatatypeTypeType)) true) (and (=> (|_System.Tuple2#Equal| a@@100 b@@61) (and (= (_System.Tuple2._0 a@@100) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@100) (_System.Tuple2._1 b@@61)))) (=> (and (= (_System.Tuple2._0 a@@100) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@100) (_System.Tuple2._1 b@@61))) (|_System.Tuple2#Equal| a@@100 b@@61)))) :qid |unknown.0:0| :skolemid |818| :pattern ( (|_System.Tuple2#Equal| a@@100 b@@61)) )))
(assert (forall ((a@@101 T@U) (b@@62 T@U) ) (!  (=> (and (= (type a@@101) DatatypeTypeType) (= (type b@@62) DatatypeTypeType)) (and (=> (|_System.Tuple2#Equal| a@@101 b@@62) (= a@@101 b@@62)) (=> (= a@@101 b@@62) (|_System.Tuple2#Equal| a@@101 b@@62)))) :qid |unknown.0:0| :skolemid |819| :pattern ( (|_System.Tuple2#Equal| a@@101 b@@62)) )))
(assert (forall ((arg0@@161 T@U) (arg1@@76 T@U) (arg2@@32 T@U) (arg3@@12 T@U) ) (! (= (type (Tclass._System.___hFunc3 arg0@@161 arg1@@76 arg2@@32 arg3@@12)) TyType) :qid |funType:Tclass._System.___hFunc3| :pattern ( (Tclass._System.___hFunc3 arg0@@161 arg1@@76 arg2@@32 arg3@@12)) )))
(assert (forall ((|#$T0@@43| T@U) (|#$T1@@27| T@U) (|#$T2| T@U) (|#$R@@47| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@43|) TyType) (= (type |#$T1@@27|) TyType)) (= (type |#$T2|) TyType)) (= (type |#$R@@47|) TyType)) (= (Tag (Tclass._System.___hFunc3 |#$T0@@43| |#$T1@@27| |#$T2| |#$R@@47|)) Tagclass._System.___hFunc3)) :qid |unknown.0:0| :skolemid |820| :pattern ( (Tclass._System.___hFunc3 |#$T0@@43| |#$T1@@27| |#$T2| |#$R@@47|)) )))
(assert (forall ((arg0@@162 T@U) ) (! (= (type (Tclass._System.___hFunc3_0 arg0@@162)) TyType) :qid |funType:Tclass._System.___hFunc3_0| :pattern ( (Tclass._System.___hFunc3_0 arg0@@162)) )))
(assert (forall ((|#$T0@@44| T@U) (|#$T1@@28| T@U) (|#$T2@@0| T@U) (|#$R@@48| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@44|) TyType) (= (type |#$T1@@28|) TyType)) (= (type |#$T2@@0|) TyType)) (= (type |#$R@@48|) TyType)) (= (Tclass._System.___hFunc3_0 (Tclass._System.___hFunc3 |#$T0@@44| |#$T1@@28| |#$T2@@0| |#$R@@48|)) |#$T0@@44|)) :qid |unknown.0:0| :skolemid |821| :pattern ( (Tclass._System.___hFunc3 |#$T0@@44| |#$T1@@28| |#$T2@@0| |#$R@@48|)) )))
(assert (forall ((arg0@@163 T@U) ) (! (= (type (Tclass._System.___hFunc3_1 arg0@@163)) TyType) :qid |funType:Tclass._System.___hFunc3_1| :pattern ( (Tclass._System.___hFunc3_1 arg0@@163)) )))
(assert (forall ((|#$T0@@45| T@U) (|#$T1@@29| T@U) (|#$T2@@1| T@U) (|#$R@@49| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@45|) TyType) (= (type |#$T1@@29|) TyType)) (= (type |#$T2@@1|) TyType)) (= (type |#$R@@49|) TyType)) (= (Tclass._System.___hFunc3_1 (Tclass._System.___hFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@1| |#$R@@49|)) |#$T1@@29|)) :qid |unknown.0:0| :skolemid |822| :pattern ( (Tclass._System.___hFunc3 |#$T0@@45| |#$T1@@29| |#$T2@@1| |#$R@@49|)) )))
(assert (forall ((arg0@@164 T@U) ) (! (= (type (Tclass._System.___hFunc3_2 arg0@@164)) TyType) :qid |funType:Tclass._System.___hFunc3_2| :pattern ( (Tclass._System.___hFunc3_2 arg0@@164)) )))
(assert (forall ((|#$T0@@46| T@U) (|#$T1@@30| T@U) (|#$T2@@2| T@U) (|#$R@@50| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@46|) TyType) (= (type |#$T1@@30|) TyType)) (= (type |#$T2@@2|) TyType)) (= (type |#$R@@50|) TyType)) (= (Tclass._System.___hFunc3_2 (Tclass._System.___hFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@2| |#$R@@50|)) |#$T2@@2|)) :qid |unknown.0:0| :skolemid |823| :pattern ( (Tclass._System.___hFunc3 |#$T0@@46| |#$T1@@30| |#$T2@@2| |#$R@@50|)) )))
(assert (forall ((arg0@@165 T@U) ) (! (= (type (Tclass._System.___hFunc3_3 arg0@@165)) TyType) :qid |funType:Tclass._System.___hFunc3_3| :pattern ( (Tclass._System.___hFunc3_3 arg0@@165)) )))
(assert (forall ((|#$T0@@47| T@U) (|#$T1@@31| T@U) (|#$T2@@3| T@U) (|#$R@@51| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@47|) TyType) (= (type |#$T1@@31|) TyType)) (= (type |#$T2@@3|) TyType)) (= (type |#$R@@51|) TyType)) (= (Tclass._System.___hFunc3_3 (Tclass._System.___hFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@3| |#$R@@51|)) |#$R@@51|)) :qid |unknown.0:0| :skolemid |824| :pattern ( (Tclass._System.___hFunc3 |#$T0@@47| |#$T1@@31| |#$T2@@3| |#$R@@51|)) )))
(assert (forall ((|#$T0@@48| T@U) (|#$T1@@32| T@U) (|#$T2@@4| T@U) (|#$R@@52| T@U) (bx@@59 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@48|) TyType) (= (type |#$T1@@32|) TyType)) (= (type |#$T2@@4|) TyType)) (= (type |#$R@@52|) TyType)) (= (type bx@@59) BoxType)) ($IsBox bx@@59 (Tclass._System.___hFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@4| |#$R@@52|))) (and (= ($Box ($Unbox HandleTypeType bx@@59)) bx@@59) ($Is ($Unbox HandleTypeType bx@@59) (Tclass._System.___hFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@4| |#$R@@52|)))) :qid |unknown.0:0| :skolemid |825| :pattern ( ($IsBox bx@@59 (Tclass._System.___hFunc3 |#$T0@@48| |#$T1@@32| |#$T2@@4| |#$R@@52|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@166 T@T) (arg1@@77 T@T) (arg2@@33 T@T) (arg3@@13 T@T) (arg4@@4 T@T) ) (! (= (Ctor (MapType4Type arg0@@166 arg1@@77 arg2@@33 arg3@@13 arg4@@4)) 23) :qid |ctor:MapType4Type| )) (forall ((arg0@@167 T@T) (arg1@@78 T@T) (arg2@@34 T@T) (arg3@@14 T@T) (arg4@@5 T@T) ) (! (= (MapType4TypeInv0 (MapType4Type arg0@@167 arg1@@78 arg2@@34 arg3@@14 arg4@@5)) arg0@@167) :qid |typeInv:MapType4TypeInv0| :pattern ( (MapType4Type arg0@@167 arg1@@78 arg2@@34 arg3@@14 arg4@@5)) ))) (forall ((arg0@@168 T@T) (arg1@@79 T@T) (arg2@@35 T@T) (arg3@@15 T@T) (arg4@@6 T@T) ) (! (= (MapType4TypeInv1 (MapType4Type arg0@@168 arg1@@79 arg2@@35 arg3@@15 arg4@@6)) arg1@@79) :qid |typeInv:MapType4TypeInv1| :pattern ( (MapType4Type arg0@@168 arg1@@79 arg2@@35 arg3@@15 arg4@@6)) ))) (forall ((arg0@@169 T@T) (arg1@@80 T@T) (arg2@@36 T@T) (arg3@@16 T@T) (arg4@@7 T@T) ) (! (= (MapType4TypeInv2 (MapType4Type arg0@@169 arg1@@80 arg2@@36 arg3@@16 arg4@@7)) arg2@@36) :qid |typeInv:MapType4TypeInv2| :pattern ( (MapType4Type arg0@@169 arg1@@80 arg2@@36 arg3@@16 arg4@@7)) ))) (forall ((arg0@@170 T@T) (arg1@@81 T@T) (arg2@@37 T@T) (arg3@@17 T@T) (arg4@@8 T@T) ) (! (= (MapType4TypeInv3 (MapType4Type arg0@@170 arg1@@81 arg2@@37 arg3@@17 arg4@@8)) arg3@@17) :qid |typeInv:MapType4TypeInv3| :pattern ( (MapType4Type arg0@@170 arg1@@81 arg2@@37 arg3@@17 arg4@@8)) ))) (forall ((arg0@@171 T@T) (arg1@@82 T@T) (arg2@@38 T@T) (arg3@@18 T@T) (arg4@@9 T@T) ) (! (= (MapType4TypeInv4 (MapType4Type arg0@@171 arg1@@82 arg2@@38 arg3@@18 arg4@@9)) arg4@@9) :qid |typeInv:MapType4TypeInv4| :pattern ( (MapType4Type arg0@@171 arg1@@82 arg2@@38 arg3@@18 arg4@@9)) ))) (forall ((arg0@@172 T@U) (arg1@@83 T@U) (arg2@@39 T@U) (arg3@@19 T@U) (arg4@@10 T@U) ) (! (let ((aVar4 (MapType4TypeInv4 (type arg0@@172)))) (= (type (MapType4Select arg0@@172 arg1@@83 arg2@@39 arg3@@19 arg4@@10)) aVar4)) :qid |funType:MapType4Select| :pattern ( (MapType4Select arg0@@172 arg1@@83 arg2@@39 arg3@@19 arg4@@10)) ))) (forall ((arg0@@173 T@U) (arg1@@84 T@U) (arg2@@40 T@U) (arg3@@20 T@U) (arg4@@11 T@U) (arg5@@1 T@U) ) (! (let ((aVar4@@0 (type arg5@@1))) (let ((aVar3@@2 (type arg4@@11))) (let ((aVar2@@3 (type arg3@@20))) (let ((aVar1@@4 (type arg2@@40))) (let ((aVar0@@2 (type arg1@@84))) (= (type (MapType4Store arg0@@173 arg1@@84 arg2@@40 arg3@@20 arg4@@11 arg5@@1)) (MapType4Type aVar0@@2 aVar1@@4 aVar2@@3 aVar3@@2 aVar4@@0))))))) :qid |funType:MapType4Store| :pattern ( (MapType4Store arg0@@173 arg1@@84 arg2@@40 arg3@@20 arg4@@11 arg5@@1)) ))) (forall ((m@@36 T@U) (x0@@14 T@U) (x1@@8 T@U) (x2@@4 T@U) (x3 T@U) (val@@15 T@U) ) (! (let ((aVar4@@1 (MapType4TypeInv4 (type m@@36)))) (=> (= (type val@@15) aVar4@@1) (= (MapType4Select (MapType4Store m@@36 x0@@14 x1@@8 x2@@4 x3 val@@15) x0@@14 x1@@8 x2@@4 x3) val@@15))) :qid |mapAx0:MapType4Select| :weight 0 ))) (and (and (and (and (forall ((val@@16 T@U) (m@@37 T@U) (x0@@15 T@U) (x1@@9 T@U) (x2@@5 T@U) (x3@@0 T@U) (y0@@10 T@U) (y1@@6 T@U) (y2@@3 T@U) (y3 T@U) ) (!  (or (= x0@@15 y0@@10) (= (MapType4Select (MapType4Store m@@37 x0@@15 x1@@9 x2@@5 x3@@0 val@@16) y0@@10 y1@@6 y2@@3 y3) (MapType4Select m@@37 y0@@10 y1@@6 y2@@3 y3))) :qid |mapAx1:MapType4Select:0| :weight 0 )) (forall ((val@@17 T@U) (m@@38 T@U) (x0@@16 T@U) (x1@@10 T@U) (x2@@6 T@U) (x3@@1 T@U) (y0@@11 T@U) (y1@@7 T@U) (y2@@4 T@U) (y3@@0 T@U) ) (!  (or (= x1@@10 y1@@7) (= (MapType4Select (MapType4Store m@@38 x0@@16 x1@@10 x2@@6 x3@@1 val@@17) y0@@11 y1@@7 y2@@4 y3@@0) (MapType4Select m@@38 y0@@11 y1@@7 y2@@4 y3@@0))) :qid |mapAx1:MapType4Select:1| :weight 0 ))) (forall ((val@@18 T@U) (m@@39 T@U) (x0@@17 T@U) (x1@@11 T@U) (x2@@7 T@U) (x3@@2 T@U) (y0@@12 T@U) (y1@@8 T@U) (y2@@5 T@U) (y3@@1 T@U) ) (!  (or (= x2@@7 y2@@5) (= (MapType4Select (MapType4Store m@@39 x0@@17 x1@@11 x2@@7 x3@@2 val@@18) y0@@12 y1@@8 y2@@5 y3@@1) (MapType4Select m@@39 y0@@12 y1@@8 y2@@5 y3@@1))) :qid |mapAx1:MapType4Select:2| :weight 0 ))) (forall ((val@@19 T@U) (m@@40 T@U) (x0@@18 T@U) (x1@@12 T@U) (x2@@8 T@U) (x3@@3 T@U) (y0@@13 T@U) (y1@@9 T@U) (y2@@6 T@U) (y3@@2 T@U) ) (!  (or (= x3@@3 y3@@2) (= (MapType4Select (MapType4Store m@@40 x0@@18 x1@@12 x2@@8 x3@@3 val@@19) y0@@13 y1@@9 y2@@6 y3@@2) (MapType4Select m@@40 y0@@13 y1@@9 y2@@6 y3@@2))) :qid |mapAx1:MapType4Select:3| :weight 0 ))) (forall ((val@@20 T@U) (m@@41 T@U) (x0@@19 T@U) (x1@@13 T@U) (x2@@9 T@U) (x3@@4 T@U) (y0@@14 T@U) (y1@@10 T@U) (y2@@7 T@U) (y3@@3 T@U) ) (!  (or true (= (MapType4Select (MapType4Store m@@41 x0@@19 x1@@13 x2@@9 x3@@4 val@@20) y0@@14 y1@@10 y2@@7 y3@@3) (MapType4Select m@@41 y0@@14 y1@@10 y2@@7 y3@@3))) :qid |mapAx2:MapType4Select| :weight 0 )))) (forall ((arg0@@174 T@U) (arg1@@85 T@U) (arg2@@41 T@U) (arg3@@21 T@U) (arg4@@12 T@U) (arg5@@2 T@U) (arg6@@1 T@U) (arg7 T@U) (arg8 T@U) ) (! (= (type (Apply3 arg0@@174 arg1@@85 arg2@@41 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8)) BoxType) :qid |funType:Apply3| :pattern ( (Apply3 arg0@@174 arg1@@85 arg2@@41 arg3@@21 arg4@@12 arg5@@2 arg6@@1 arg7 arg8)) ))) (forall ((arg0@@175 T@U) (arg1@@86 T@U) (arg2@@42 T@U) ) (! (= (type (Handle3 arg0@@175 arg1@@86 arg2@@42)) HandleTypeType) :qid |funType:Handle3| :pattern ( (Handle3 arg0@@175 arg1@@86 arg2@@42)) ))))
(assert (forall ((t0@@57 T@U) (t1@@33 T@U) (t2@@14 T@U) (t3 T@U) (heap@@16 T@U) (h@@41 T@U) (r@@21 T@U) (rd@@8 T@U) (bx0@@31 T@U) (bx1@@15 T@U) (bx2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@57) TyType) (= (type t1@@33) TyType)) (= (type t2@@14) TyType)) (= (type t3) TyType)) (= (type heap@@16) (MapType0Type refType MapType1Type))) (= (type h@@41) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@21) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@8) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@31) BoxType)) (= (type bx1@@15) BoxType)) (= (type bx2) BoxType)) (= (Apply3 t0@@57 t1@@33 t2@@14 t3 heap@@16 (Handle3 h@@41 r@@21 rd@@8) bx0@@31 bx1@@15 bx2) (MapType4Select h@@41 heap@@16 bx0@@31 bx1@@15 bx2))) :qid |unknown.0:0| :skolemid |826| :pattern ( (Apply3 t0@@57 t1@@33 t2@@14 t3 heap@@16 (Handle3 h@@41 r@@21 rd@@8) bx0@@31 bx1@@15 bx2)) )))
(assert (forall ((t0@@58 T@U) (t1@@34 T@U) (t2@@15 T@U) (t3@@0 T@U) (heap@@17 T@U) (h@@42 T@U) (r@@22 T@U) (rd@@9 T@U) (bx0@@32 T@U) (bx1@@16 T@U) (bx2@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@58) TyType) (= (type t1@@34) TyType)) (= (type t2@@15) TyType)) (= (type t3@@0) TyType)) (= (type heap@@17) (MapType0Type refType MapType1Type))) (= (type h@@42) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@22) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@9) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@32) BoxType)) (= (type bx1@@16) BoxType)) (= (type bx2@@0) BoxType)) (U_2_bool (MapType4Select r@@22 heap@@17 bx0@@32 bx1@@16 bx2@@0))) (Requires3 t0@@58 t1@@34 t2@@15 t3@@0 heap@@17 (Handle3 h@@42 r@@22 rd@@9) bx0@@32 bx1@@16 bx2@@0)) :qid |unknown.0:0| :skolemid |827| :pattern ( (Requires3 t0@@58 t1@@34 t2@@15 t3@@0 heap@@17 (Handle3 h@@42 r@@22 rd@@9) bx0@@32 bx1@@16 bx2@@0)) )))
(assert (forall ((arg0@@176 T@U) (arg1@@87 T@U) (arg2@@43 T@U) (arg3@@22 T@U) (arg4@@13 T@U) (arg5@@3 T@U) (arg6@@2 T@U) (arg7@@0 T@U) (arg8@@0 T@U) ) (! (= (type (Reads3 arg0@@176 arg1@@87 arg2@@43 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads3| :pattern ( (Reads3 arg0@@176 arg1@@87 arg2@@43 arg3@@22 arg4@@13 arg5@@3 arg6@@2 arg7@@0 arg8@@0)) )))
(assert (forall ((t0@@59 T@U) (t1@@35 T@U) (t2@@16 T@U) (t3@@1 T@U) (heap@@18 T@U) (h@@43 T@U) (r@@23 T@U) (rd@@10 T@U) (bx0@@33 T@U) (bx1@@17 T@U) (bx2@@1 T@U) (bx@@60 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@59) TyType) (= (type t1@@35) TyType)) (= (type t2@@16) TyType)) (= (type t3@@1) TyType)) (= (type heap@@18) (MapType0Type refType MapType1Type))) (= (type h@@43) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@23) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@10) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@33) BoxType)) (= (type bx1@@17) BoxType)) (= (type bx2@@1) BoxType)) (= (type bx@@60) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads3 t0@@59 t1@@35 t2@@16 t3@@1 heap@@18 (Handle3 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1) bx@@60)) (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@33 bx1@@17 bx2@@1) bx@@60))) (=> (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@33 bx1@@17 bx2@@1) bx@@60)) (U_2_bool (MapType0Select (Reads3 t0@@59 t1@@35 t2@@16 t3@@1 heap@@18 (Handle3 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1) bx@@60))))) :qid |unknown.0:0| :skolemid |828| :pattern ( (MapType0Select (Reads3 t0@@59 t1@@35 t2@@16 t3@@1 heap@@18 (Handle3 h@@43 r@@23 rd@@10) bx0@@33 bx1@@17 bx2@@1) bx@@60)) )))
(assert (forall ((t0@@60 T@U) (t1@@36 T@U) (t2@@17 T@U) (t3@@2 T@U) (h0@@18 T@U) (h1@@18 T@U) (f@@41 T@U) (bx0@@34 T@U) (bx1@@18 T@U) (bx2@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@60) TyType) (= (type t1@@36) TyType)) (= (type t2@@17) TyType)) (= (type t3@@2) TyType)) (= (type h0@@18) (MapType0Type refType MapType1Type))) (= (type h1@@18) (MapType0Type refType MapType1Type))) (= (type f@@41) HandleTypeType)) (= (type bx0@@34) BoxType)) (= (type bx1@@18) BoxType)) (= (type bx2@@2) BoxType)) (and (and (and ($HeapSucc h0@@18 h1@@18) (and ($IsGoodHeap h0@@18) ($IsGoodHeap h1@@18))) (and (and (and ($IsBox bx0@@34 t0@@60) ($IsBox bx1@@18 t1@@36)) ($IsBox bx2@@2 t2@@17)) ($Is f@@41 (Tclass._System.___hFunc3 t0@@60 t1@@36 t2@@17 t3@@2)))) (forall ((o@@72 T@U) (fld@@17 T@U) ) (! (let ((a@@102 (FieldTypeInv0 (type fld@@17)))) (=> (and (and (= (type o@@72) refType) (= (type fld@@17) (FieldType a@@102))) (and (not (= o@@72 null)) (U_2_bool (MapType0Select (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h0@@18 f@@41 bx0@@34 bx1@@18 bx2@@2) ($Box o@@72))))) (= (MapType1Select (MapType0Select h0@@18 o@@72) fld@@17) (MapType1Select (MapType0Select h1@@18 o@@72) fld@@17)))) :qid |unknown.0:0| :skolemid |829| :no-pattern (type o@@72) :no-pattern (type fld@@17) :no-pattern (U_2_int o@@72) :no-pattern (U_2_bool o@@72) :no-pattern (U_2_int fld@@17) :no-pattern (U_2_bool fld@@17) )))) (= (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h0@@18 f@@41 bx0@@34 bx1@@18 bx2@@2) (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h1@@18 f@@41 bx0@@34 bx1@@18 bx2@@2))) :qid |unknown.0:0| :skolemid |830| :pattern ( ($HeapSucc h0@@18 h1@@18) (Reads3 t0@@60 t1@@36 t2@@17 t3@@2 h1@@18 f@@41 bx0@@34 bx1@@18 bx2@@2)) )))
(assert (forall ((t0@@61 T@U) (t1@@37 T@U) (t2@@18 T@U) (t3@@3 T@U) (h0@@19 T@U) (h1@@19 T@U) (f@@42 T@U) (bx0@@35 T@U) (bx1@@19 T@U) (bx2@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@61) TyType) (= (type t1@@37) TyType)) (= (type t2@@18) TyType)) (= (type t3@@3) TyType)) (= (type h0@@19) (MapType0Type refType MapType1Type))) (= (type h1@@19) (MapType0Type refType MapType1Type))) (= (type f@@42) HandleTypeType)) (= (type bx0@@35) BoxType)) (= (type bx1@@19) BoxType)) (= (type bx2@@3) BoxType)) (and (and (and ($HeapSucc h0@@19 h1@@19) (and ($IsGoodHeap h0@@19) ($IsGoodHeap h1@@19))) (and (and (and ($IsBox bx0@@35 t0@@61) ($IsBox bx1@@19 t1@@37)) ($IsBox bx2@@3 t2@@18)) ($Is f@@42 (Tclass._System.___hFunc3 t0@@61 t1@@37 t2@@18 t3@@3)))) (forall ((o@@73 T@U) (fld@@18 T@U) ) (! (let ((a@@103 (FieldTypeInv0 (type fld@@18)))) (=> (and (and (= (type o@@73) refType) (= (type fld@@18) (FieldType a@@103))) (and (not (= o@@73 null)) (U_2_bool (MapType0Select (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3) ($Box o@@73))))) (= (MapType1Select (MapType0Select h0@@19 o@@73) fld@@18) (MapType1Select (MapType0Select h1@@19 o@@73) fld@@18)))) :qid |unknown.0:0| :skolemid |831| :no-pattern (type o@@73) :no-pattern (type fld@@18) :no-pattern (U_2_int o@@73) :no-pattern (U_2_bool o@@73) :no-pattern (U_2_int fld@@18) :no-pattern (U_2_bool fld@@18) )))) (= (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h0@@19 f@@42 bx0@@35 bx1@@19 bx2@@3) (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3))) :qid |unknown.0:0| :skolemid |832| :pattern ( ($HeapSucc h0@@19 h1@@19) (Reads3 t0@@61 t1@@37 t2@@18 t3@@3 h1@@19 f@@42 bx0@@35 bx1@@19 bx2@@3)) )))
(assert (forall ((t0@@62 T@U) (t1@@38 T@U) (t2@@19 T@U) (t3@@4 T@U) (h0@@20 T@U) (h1@@20 T@U) (f@@43 T@U) (bx0@@36 T@U) (bx1@@20 T@U) (bx2@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@62) TyType) (= (type t1@@38) TyType)) (= (type t2@@19) TyType)) (= (type t3@@4) TyType)) (= (type h0@@20) (MapType0Type refType MapType1Type))) (= (type h1@@20) (MapType0Type refType MapType1Type))) (= (type f@@43) HandleTypeType)) (= (type bx0@@36) BoxType)) (= (type bx1@@20) BoxType)) (= (type bx2@@4) BoxType)) (and (and (and ($HeapSucc h0@@20 h1@@20) (and ($IsGoodHeap h0@@20) ($IsGoodHeap h1@@20))) (and (and (and ($IsBox bx0@@36 t0@@62) ($IsBox bx1@@20 t1@@38)) ($IsBox bx2@@4 t2@@19)) ($Is f@@43 (Tclass._System.___hFunc3 t0@@62 t1@@38 t2@@19 t3@@4)))) (forall ((o@@74 T@U) (fld@@19 T@U) ) (! (let ((a@@104 (FieldTypeInv0 (type fld@@19)))) (=> (and (and (= (type o@@74) refType) (= (type fld@@19) (FieldType a@@104))) (and (not (= o@@74 null)) (U_2_bool (MapType0Select (Reads3 t0@@62 t1@@38 t2@@19 t3@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4) ($Box o@@74))))) (= (MapType1Select (MapType0Select h0@@20 o@@74) fld@@19) (MapType1Select (MapType0Select h1@@20 o@@74) fld@@19)))) :qid |unknown.0:0| :skolemid |833| :no-pattern (type o@@74) :no-pattern (type fld@@19) :no-pattern (U_2_int o@@74) :no-pattern (U_2_bool o@@74) :no-pattern (U_2_int fld@@19) :no-pattern (U_2_bool fld@@19) )))) (and (=> (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4) (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4)) (=> (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4) (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h0@@20 f@@43 bx0@@36 bx1@@20 bx2@@4)))) :qid |unknown.0:0| :skolemid |834| :pattern ( ($HeapSucc h0@@20 h1@@20) (Requires3 t0@@62 t1@@38 t2@@19 t3@@4 h1@@20 f@@43 bx0@@36 bx1@@20 bx2@@4)) )))
(assert (forall ((t0@@63 T@U) (t1@@39 T@U) (t2@@20 T@U) (t3@@5 T@U) (h0@@21 T@U) (h1@@21 T@U) (f@@44 T@U) (bx0@@37 T@U) (bx1@@21 T@U) (bx2@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@63) TyType) (= (type t1@@39) TyType)) (= (type t2@@20) TyType)) (= (type t3@@5) TyType)) (= (type h0@@21) (MapType0Type refType MapType1Type))) (= (type h1@@21) (MapType0Type refType MapType1Type))) (= (type f@@44) HandleTypeType)) (= (type bx0@@37) BoxType)) (= (type bx1@@21) BoxType)) (= (type bx2@@5) BoxType)) (and (and (and ($HeapSucc h0@@21 h1@@21) (and ($IsGoodHeap h0@@21) ($IsGoodHeap h1@@21))) (and (and (and ($IsBox bx0@@37 t0@@63) ($IsBox bx1@@21 t1@@39)) ($IsBox bx2@@5 t2@@20)) ($Is f@@44 (Tclass._System.___hFunc3 t0@@63 t1@@39 t2@@20 t3@@5)))) (forall ((o@@75 T@U) (fld@@20 T@U) ) (! (let ((a@@105 (FieldTypeInv0 (type fld@@20)))) (=> (and (and (= (type o@@75) refType) (= (type fld@@20) (FieldType a@@105))) (and (not (= o@@75 null)) (U_2_bool (MapType0Select (Reads3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5) ($Box o@@75))))) (= (MapType1Select (MapType0Select h0@@21 o@@75) fld@@20) (MapType1Select (MapType0Select h1@@21 o@@75) fld@@20)))) :qid |unknown.0:0| :skolemid |835| :no-pattern (type o@@75) :no-pattern (type fld@@20) :no-pattern (U_2_int o@@75) :no-pattern (U_2_bool o@@75) :no-pattern (U_2_int fld@@20) :no-pattern (U_2_bool fld@@20) )))) (and (=> (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h0@@21 f@@44 bx0@@37 bx1@@21 bx2@@5) (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5)) (=> (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5) (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h0@@21 f@@44 bx0@@37 bx1@@21 bx2@@5)))) :qid |unknown.0:0| :skolemid |836| :pattern ( ($HeapSucc h0@@21 h1@@21) (Requires3 t0@@63 t1@@39 t2@@20 t3@@5 h1@@21 f@@44 bx0@@37 bx1@@21 bx2@@5)) )))
(assert (forall ((t0@@64 T@U) (t1@@40 T@U) (t2@@21 T@U) (t3@@6 T@U) (h0@@22 T@U) (h1@@22 T@U) (f@@45 T@U) (bx0@@38 T@U) (bx1@@22 T@U) (bx2@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@64) TyType) (= (type t1@@40) TyType)) (= (type t2@@21) TyType)) (= (type t3@@6) TyType)) (= (type h0@@22) (MapType0Type refType MapType1Type))) (= (type h1@@22) (MapType0Type refType MapType1Type))) (= (type f@@45) HandleTypeType)) (= (type bx0@@38) BoxType)) (= (type bx1@@22) BoxType)) (= (type bx2@@6) BoxType)) (and (and (and ($HeapSucc h0@@22 h1@@22) (and ($IsGoodHeap h0@@22) ($IsGoodHeap h1@@22))) (and (and (and ($IsBox bx0@@38 t0@@64) ($IsBox bx1@@22 t1@@40)) ($IsBox bx2@@6 t2@@21)) ($Is f@@45 (Tclass._System.___hFunc3 t0@@64 t1@@40 t2@@21 t3@@6)))) (forall ((o@@76 T@U) (fld@@21 T@U) ) (! (let ((a@@106 (FieldTypeInv0 (type fld@@21)))) (=> (and (and (= (type o@@76) refType) (= (type fld@@21) (FieldType a@@106))) (and (not (= o@@76 null)) (U_2_bool (MapType0Select (Reads3 t0@@64 t1@@40 t2@@21 t3@@6 h0@@22 f@@45 bx0@@38 bx1@@22 bx2@@6) ($Box o@@76))))) (= (MapType1Select (MapType0Select h0@@22 o@@76) fld@@21) (MapType1Select (MapType0Select h1@@22 o@@76) fld@@21)))) :qid |unknown.0:0| :skolemid |837| :no-pattern (type o@@76) :no-pattern (type fld@@21) :no-pattern (U_2_int o@@76) :no-pattern (U_2_bool o@@76) :no-pattern (U_2_int fld@@21) :no-pattern (U_2_bool fld@@21) )))) (= (Apply3 t0@@64 t1@@40 t2@@21 t3@@6 h0@@22 f@@45 bx0@@38 bx1@@22 bx2@@6) (Apply3 t0@@64 t1@@40 t2@@21 t3@@6 h1@@22 f@@45 bx0@@38 bx1@@22 bx2@@6))) :qid |unknown.0:0| :skolemid |838| :pattern ( ($HeapSucc h0@@22 h1@@22) (Apply3 t0@@64 t1@@40 t2@@21 t3@@6 h1@@22 f@@45 bx0@@38 bx1@@22 bx2@@6)) )))
(assert (forall ((t0@@65 T@U) (t1@@41 T@U) (t2@@22 T@U) (t3@@7 T@U) (h0@@23 T@U) (h1@@23 T@U) (f@@46 T@U) (bx0@@39 T@U) (bx1@@23 T@U) (bx2@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@65) TyType) (= (type t1@@41) TyType)) (= (type t2@@22) TyType)) (= (type t3@@7) TyType)) (= (type h0@@23) (MapType0Type refType MapType1Type))) (= (type h1@@23) (MapType0Type refType MapType1Type))) (= (type f@@46) HandleTypeType)) (= (type bx0@@39) BoxType)) (= (type bx1@@23) BoxType)) (= (type bx2@@7) BoxType)) (and (and (and ($HeapSucc h0@@23 h1@@23) (and ($IsGoodHeap h0@@23) ($IsGoodHeap h1@@23))) (and (and (and ($IsBox bx0@@39 t0@@65) ($IsBox bx1@@23 t1@@41)) ($IsBox bx2@@7 t2@@22)) ($Is f@@46 (Tclass._System.___hFunc3 t0@@65 t1@@41 t2@@22 t3@@7)))) (forall ((o@@77 T@U) (fld@@22 T@U) ) (! (let ((a@@107 (FieldTypeInv0 (type fld@@22)))) (=> (and (and (= (type o@@77) refType) (= (type fld@@22) (FieldType a@@107))) (and (not (= o@@77 null)) (U_2_bool (MapType0Select (Reads3 t0@@65 t1@@41 t2@@22 t3@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7) ($Box o@@77))))) (= (MapType1Select (MapType0Select h0@@23 o@@77) fld@@22) (MapType1Select (MapType0Select h1@@23 o@@77) fld@@22)))) :qid |unknown.0:0| :skolemid |839| :no-pattern (type o@@77) :no-pattern (type fld@@22) :no-pattern (U_2_int o@@77) :no-pattern (U_2_bool o@@77) :no-pattern (U_2_int fld@@22) :no-pattern (U_2_bool fld@@22) )))) (= (Apply3 t0@@65 t1@@41 t2@@22 t3@@7 h0@@23 f@@46 bx0@@39 bx1@@23 bx2@@7) (Apply3 t0@@65 t1@@41 t2@@22 t3@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7))) :qid |unknown.0:0| :skolemid |840| :pattern ( ($HeapSucc h0@@23 h1@@23) (Apply3 t0@@65 t1@@41 t2@@22 t3@@7 h1@@23 f@@46 bx0@@39 bx1@@23 bx2@@7)) )))
(assert (forall ((t0@@66 T@U) (t1@@42 T@U) (t2@@23 T@U) (t3@@8 T@U) (heap@@19 T@U) (f@@47 T@U) (bx0@@40 T@U) (bx1@@24 T@U) (bx2@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@66) TyType) (= (type t1@@42) TyType)) (= (type t2@@23) TyType)) (= (type t3@@8) TyType)) (= (type heap@@19) (MapType0Type refType MapType1Type))) (= (type f@@47) HandleTypeType)) (= (type bx0@@40) BoxType)) (= (type bx1@@24) BoxType)) (= (type bx2@@8) BoxType)) (and ($IsGoodHeap heap@@19) (and (and (and ($IsBox bx0@@40 t0@@66) ($IsBox bx1@@24 t1@@42)) ($IsBox bx2@@8 t2@@23)) ($Is f@@47 (Tclass._System.___hFunc3 t0@@66 t1@@42 t2@@23 t3@@8))))) (and (=> (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |841| :pattern ( (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 $OneHeap f@@47 bx0@@40 bx1@@24 bx2@@8) ($IsGoodHeap heap@@19)) :pattern ( (Reads3 t0@@66 t1@@42 t2@@23 t3@@8 heap@@19 f@@47 bx0@@40 bx1@@24 bx2@@8)) )))
(assert (forall ((t0@@67 T@U) (t1@@43 T@U) (t2@@24 T@U) (t3@@9 T@U) (heap@@20 T@U) (f@@48 T@U) (bx0@@41 T@U) (bx1@@25 T@U) (bx2@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@67) TyType) (= (type t1@@43) TyType)) (= (type t2@@24) TyType)) (= (type t3@@9) TyType)) (= (type heap@@20) (MapType0Type refType MapType1Type))) (= (type f@@48) HandleTypeType)) (= (type bx0@@41) BoxType)) (= (type bx1@@25) BoxType)) (= (type bx2@@9) BoxType)) (and (and ($IsGoodHeap heap@@20) (and (and (and ($IsBox bx0@@41 t0@@67) ($IsBox bx1@@25 t1@@43)) ($IsBox bx2@@9 t2@@24)) ($Is f@@48 (Tclass._System.___hFunc3 t0@@67 t1@@43 t2@@24 t3@@9)))) (|Set#Equal| (Reads3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9) (|Set#Empty| BoxType)))) (and (=> (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9) (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9)) (=> (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9) (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9)))) :qid |unknown.0:0| :skolemid |842| :pattern ( (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 $OneHeap f@@48 bx0@@41 bx1@@25 bx2@@9) ($IsGoodHeap heap@@20)) :pattern ( (Requires3 t0@@67 t1@@43 t2@@24 t3@@9 heap@@20 f@@48 bx0@@41 bx1@@25 bx2@@9)) )))
(assert (forall ((f@@49 T@U) (t0@@68 T@U) (t1@@44 T@U) (t2@@25 T@U) (t3@@10 T@U) ) (!  (=> (and (and (and (and (= (type f@@49) HandleTypeType) (= (type t0@@68) TyType)) (= (type t1@@44) TyType)) (= (type t2@@25) TyType)) (= (type t3@@10) TyType)) (and (=> ($Is f@@49 (Tclass._System.___hFunc3 t0@@68 t1@@44 t2@@25 t3@@10)) (forall ((h@@44 T@U) (bx0@@42 T@U) (bx1@@26 T@U) (bx2@@10 T@U) ) (!  (=> (and (and (and (and (= (type h@@44) (MapType0Type refType MapType1Type)) (= (type bx0@@42) BoxType)) (= (type bx1@@26) BoxType)) (= (type bx2@@10) BoxType)) (and (and ($IsGoodHeap h@@44) (and (and ($IsBox bx0@@42 t0@@68) ($IsBox bx1@@26 t1@@44)) ($IsBox bx2@@10 t2@@25))) (Requires3 t0@@68 t1@@44 t2@@25 t3@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10))) ($IsBox (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10) t3@@10)) :qid |DafnyPre.521:12| :skolemid |843| :pattern ( (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@44 f@@49 bx0@@42 bx1@@26 bx2@@10)) ))) (=> (forall ((h@@45 T@U) (bx0@@43 T@U) (bx1@@27 T@U) (bx2@@11 T@U) ) (!  (=> (and (and (and (and (= (type h@@45) (MapType0Type refType MapType1Type)) (= (type bx0@@43) BoxType)) (= (type bx1@@27) BoxType)) (= (type bx2@@11) BoxType)) (and (and ($IsGoodHeap h@@45) (and (and ($IsBox bx0@@43 t0@@68) ($IsBox bx1@@27 t1@@44)) ($IsBox bx2@@11 t2@@25))) (Requires3 t0@@68 t1@@44 t2@@25 t3@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11))) ($IsBox (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11) t3@@10)) :qid |DafnyPre.521:12| :skolemid |843| :pattern ( (Apply3 t0@@68 t1@@44 t2@@25 t3@@10 h@@45 f@@49 bx0@@43 bx1@@27 bx2@@11)) )) ($Is f@@49 (Tclass._System.___hFunc3 t0@@68 t1@@44 t2@@25 t3@@10))))) :qid |unknown.0:0| :skolemid |844| :pattern ( ($Is f@@49 (Tclass._System.___hFunc3 t0@@68 t1@@44 t2@@25 t3@@10))) )))
(assert (forall ((f@@50 T@U) (t0@@69 T@U) (t1@@45 T@U) (t2@@26 T@U) (t3@@11 T@U) (u0@@2 T@U) (u1@@1 T@U) (u2@@0 T@U) (u3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@50) HandleTypeType) (= (type t0@@69) TyType)) (= (type t1@@45) TyType)) (= (type t2@@26) TyType)) (= (type t3@@11) TyType)) (= (type u0@@2) TyType)) (= (type u1@@1) TyType)) (= (type u2@@0) TyType)) (= (type u3) TyType)) (and (and (and (and ($Is f@@50 (Tclass._System.___hFunc3 t0@@69 t1@@45 t2@@26 t3@@11)) (forall ((bx@@61 T@U) ) (!  (=> (and (= (type bx@@61) BoxType) ($IsBox bx@@61 u0@@2)) ($IsBox bx@@61 t0@@69)) :qid |unknown.0:0| :skolemid |845| :pattern ( ($IsBox bx@@61 u0@@2)) :pattern ( ($IsBox bx@@61 t0@@69)) ))) (forall ((bx@@62 T@U) ) (!  (=> (and (= (type bx@@62) BoxType) ($IsBox bx@@62 u1@@1)) ($IsBox bx@@62 t1@@45)) :qid |unknown.0:0| :skolemid |846| :pattern ( ($IsBox bx@@62 u1@@1)) :pattern ( ($IsBox bx@@62 t1@@45)) ))) (forall ((bx@@63 T@U) ) (!  (=> (and (= (type bx@@63) BoxType) ($IsBox bx@@63 u2@@0)) ($IsBox bx@@63 t2@@26)) :qid |unknown.0:0| :skolemid |847| :pattern ( ($IsBox bx@@63 u2@@0)) :pattern ( ($IsBox bx@@63 t2@@26)) ))) (forall ((bx@@64 T@U) ) (!  (=> (and (= (type bx@@64) BoxType) ($IsBox bx@@64 t3@@11)) ($IsBox bx@@64 u3)) :qid |unknown.0:0| :skolemid |848| :pattern ( ($IsBox bx@@64 t3@@11)) :pattern ( ($IsBox bx@@64 u3)) )))) ($Is f@@50 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3))) :qid |unknown.0:0| :skolemid |849| :pattern ( ($Is f@@50 (Tclass._System.___hFunc3 t0@@69 t1@@45 t2@@26 t3@@11)) ($Is f@@50 (Tclass._System.___hFunc3 u0@@2 u1@@1 u2@@0 u3))) )))
(assert (forall ((f@@51 T@U) (t0@@70 T@U) (t1@@46 T@U) (t2@@27 T@U) (t3@@12 T@U) (h@@46 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@51) HandleTypeType) (= (type t0@@70) TyType)) (= (type t1@@46) TyType)) (= (type t2@@27) TyType)) (= (type t3@@12) TyType)) (= (type h@@46) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@46)) (and (=> ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@70 t1@@46 t2@@27 t3@@12) h@@46) (forall ((bx0@@44 T@U) (bx1@@28 T@U) (bx2@@12 T@U) ) (!  (=> (and (and (= (type bx0@@44) BoxType) (= (type bx1@@28) BoxType)) (= (type bx2@@12) BoxType)) (=> (and (and (and (and ($IsBox bx0@@44 t0@@70) ($IsAllocBox bx0@@44 t0@@70 h@@46)) (and ($IsBox bx1@@28 t1@@46) ($IsAllocBox bx1@@28 t1@@46 h@@46))) (and ($IsBox bx2@@12 t2@@27) ($IsAllocBox bx2@@12 t2@@27 h@@46))) (Requires3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12)) (forall ((r@@24 T@U) ) (!  (=> (= (type r@@24) refType) (=> (and (not (= r@@24 null)) (U_2_bool (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12) ($Box r@@24)))) (U_2_bool (MapType1Select (MapType0Select h@@46 r@@24) alloc)))) :qid |unknown.0:0| :skolemid |850| :pattern ( (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12) ($Box r@@24))) )))) :qid |unknown.0:0| :skolemid |851| :pattern ( (Apply3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12)) :pattern ( (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@44 bx1@@28 bx2@@12)) ))) (=> (forall ((bx0@@45 T@U) (bx1@@29 T@U) (bx2@@13 T@U) ) (!  (=> (and (and (= (type bx0@@45) BoxType) (= (type bx1@@29) BoxType)) (= (type bx2@@13) BoxType)) (=> (and (and (and (and ($IsBox bx0@@45 t0@@70) ($IsAllocBox bx0@@45 t0@@70 h@@46)) (and ($IsBox bx1@@29 t1@@46) ($IsAllocBox bx1@@29 t1@@46 h@@46))) (and ($IsBox bx2@@13 t2@@27) ($IsAllocBox bx2@@13 t2@@27 h@@46))) (Requires3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13)) (forall ((r@@25 T@U) ) (!  (=> (= (type r@@25) refType) (=> (and (not (= r@@25 null)) (U_2_bool (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13) ($Box r@@25)))) (U_2_bool (MapType1Select (MapType0Select h@@46 r@@25) alloc)))) :qid |unknown.0:0| :skolemid |850| :pattern ( (MapType0Select (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13) ($Box r@@25))) )))) :qid |unknown.0:0| :skolemid |851| :pattern ( (Apply3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13)) :pattern ( (Reads3 t0@@70 t1@@46 t2@@27 t3@@12 h@@46 f@@51 bx0@@45 bx1@@29 bx2@@13)) )) ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@70 t1@@46 t2@@27 t3@@12) h@@46)))) :qid |unknown.0:0| :skolemid |852| :pattern ( ($IsAlloc f@@51 (Tclass._System.___hFunc3 t0@@70 t1@@46 t2@@27 t3@@12) h@@46)) )))
(assert (forall ((f@@52 T@U) (t0@@71 T@U) (t1@@47 T@U) (t2@@28 T@U) (t3@@13 T@U) (h@@47 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@52) HandleTypeType) (= (type t0@@71) TyType)) (= (type t1@@47) TyType)) (= (type t2@@28) TyType)) (= (type t3@@13) TyType)) (= (type h@@47) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@47) ($IsAlloc f@@52 (Tclass._System.___hFunc3 t0@@71 t1@@47 t2@@28 t3@@13) h@@47))) (forall ((bx0@@46 T@U) (bx1@@30 T@U) (bx2@@14 T@U) ) (!  (=> (and (and (= (type bx0@@46) BoxType) (= (type bx1@@30) BoxType)) (= (type bx2@@14) BoxType)) (=> (and (and (and ($IsAllocBox bx0@@46 t0@@71 h@@47) ($IsAllocBox bx1@@30 t1@@47 h@@47)) ($IsAllocBox bx2@@14 t2@@28 h@@47)) (Requires3 t0@@71 t1@@47 t2@@28 t3@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14)) ($IsAllocBox (Apply3 t0@@71 t1@@47 t2@@28 t3@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14) t3@@13 h@@47))) :qid |unknown.0:0| :skolemid |853| :pattern ( (Apply3 t0@@71 t1@@47 t2@@28 t3@@13 h@@47 f@@52 bx0@@46 bx1@@30 bx2@@14)) ))) :qid |unknown.0:0| :skolemid |854| :pattern ( ($IsAlloc f@@52 (Tclass._System.___hFunc3 t0@@71 t1@@47 t2@@28 t3@@13) h@@47)) )))
(assert (forall ((arg0@@177 T@U) (arg1@@88 T@U) (arg2@@44 T@U) (arg3@@23 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3 arg0@@177 arg1@@88 arg2@@44 arg3@@23)) TyType) :qid |funType:Tclass._System.___hPartialFunc3| :pattern ( (Tclass._System.___hPartialFunc3 arg0@@177 arg1@@88 arg2@@44 arg3@@23)) )))
(assert (forall ((|#$T0@@49| T@U) (|#$T1@@33| T@U) (|#$T2@@5| T@U) (|#$R@@53| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@49|) TyType) (= (type |#$T1@@33|) TyType)) (= (type |#$T2@@5|) TyType)) (= (type |#$R@@53|) TyType)) (= (Tag (Tclass._System.___hPartialFunc3 |#$T0@@49| |#$T1@@33| |#$T2@@5| |#$R@@53|)) Tagclass._System.___hPartialFunc3)) :qid |unknown.0:0| :skolemid |855| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@49| |#$T1@@33| |#$T2@@5| |#$R@@53|)) )))
(assert (forall ((arg0@@178 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_0 arg0@@178)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_0| :pattern ( (Tclass._System.___hPartialFunc3_0 arg0@@178)) )))
(assert (forall ((|#$T0@@50| T@U) (|#$T1@@34| T@U) (|#$T2@@6| T@U) (|#$R@@54| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@50|) TyType) (= (type |#$T1@@34|) TyType)) (= (type |#$T2@@6|) TyType)) (= (type |#$R@@54|) TyType)) (= (Tclass._System.___hPartialFunc3_0 (Tclass._System.___hPartialFunc3 |#$T0@@50| |#$T1@@34| |#$T2@@6| |#$R@@54|)) |#$T0@@50|)) :qid |unknown.0:0| :skolemid |856| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@50| |#$T1@@34| |#$T2@@6| |#$R@@54|)) )))
(assert (forall ((arg0@@179 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_1 arg0@@179)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_1| :pattern ( (Tclass._System.___hPartialFunc3_1 arg0@@179)) )))
(assert (forall ((|#$T0@@51| T@U) (|#$T1@@35| T@U) (|#$T2@@7| T@U) (|#$R@@55| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@51|) TyType) (= (type |#$T1@@35|) TyType)) (= (type |#$T2@@7|) TyType)) (= (type |#$R@@55|) TyType)) (= (Tclass._System.___hPartialFunc3_1 (Tclass._System.___hPartialFunc3 |#$T0@@51| |#$T1@@35| |#$T2@@7| |#$R@@55|)) |#$T1@@35|)) :qid |unknown.0:0| :skolemid |857| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@51| |#$T1@@35| |#$T2@@7| |#$R@@55|)) )))
(assert (forall ((arg0@@180 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_2 arg0@@180)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_2| :pattern ( (Tclass._System.___hPartialFunc3_2 arg0@@180)) )))
(assert (forall ((|#$T0@@52| T@U) (|#$T1@@36| T@U) (|#$T2@@8| T@U) (|#$R@@56| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@52|) TyType) (= (type |#$T1@@36|) TyType)) (= (type |#$T2@@8|) TyType)) (= (type |#$R@@56|) TyType)) (= (Tclass._System.___hPartialFunc3_2 (Tclass._System.___hPartialFunc3 |#$T0@@52| |#$T1@@36| |#$T2@@8| |#$R@@56|)) |#$T2@@8|)) :qid |unknown.0:0| :skolemid |858| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@52| |#$T1@@36| |#$T2@@8| |#$R@@56|)) )))
(assert (forall ((arg0@@181 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_3 arg0@@181)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_3| :pattern ( (Tclass._System.___hPartialFunc3_3 arg0@@181)) )))
(assert (forall ((|#$T0@@53| T@U) (|#$T1@@37| T@U) (|#$T2@@9| T@U) (|#$R@@57| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@53|) TyType) (= (type |#$T1@@37|) TyType)) (= (type |#$T2@@9|) TyType)) (= (type |#$R@@57|) TyType)) (= (Tclass._System.___hPartialFunc3_3 (Tclass._System.___hPartialFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@9| |#$R@@57|)) |#$R@@57|)) :qid |unknown.0:0| :skolemid |859| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@53| |#$T1@@37| |#$T2@@9| |#$R@@57|)) )))
(assert (forall ((|#$T0@@54| T@U) (|#$T1@@38| T@U) (|#$T2@@10| T@U) (|#$R@@58| T@U) (bx@@65 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@54|) TyType) (= (type |#$T1@@38|) TyType)) (= (type |#$T2@@10|) TyType)) (= (type |#$R@@58|) TyType)) (= (type bx@@65) BoxType)) ($IsBox bx@@65 (Tclass._System.___hPartialFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@10| |#$R@@58|))) (and (= ($Box ($Unbox HandleTypeType bx@@65)) bx@@65) ($Is ($Unbox HandleTypeType bx@@65) (Tclass._System.___hPartialFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@10| |#$R@@58|)))) :qid |unknown.0:0| :skolemid |860| :pattern ( ($IsBox bx@@65 (Tclass._System.___hPartialFunc3 |#$T0@@54| |#$T1@@38| |#$T2@@10| |#$R@@58|))) )))
(assert (forall ((|#$T0@@55| T@U) (|#$T1@@39| T@U) (|#$T2@@11| T@U) (|#$R@@59| T@U) (|f#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@55|) TyType) (= (type |#$T1@@39|) TyType)) (= (type |#$T2@@11|) TyType)) (= (type |#$R@@59|) TyType)) (= (type |f#0@@11|) HandleTypeType)) (and (=> ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59|)) (and ($Is |f#0@@11| (Tclass._System.___hFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59|)) (forall ((|x0#0@@7| T@U) (|x1#0@@3| T@U) (|x2#0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@7|) BoxType) (= (type |x1#0@@3|) BoxType)) (= (type |x2#0|) BoxType)) (and (and ($IsBox |x0#0@@7| |#$T0@@55|) ($IsBox |x1#0@@3| |#$T1@@39|)) ($IsBox |x2#0| |#$T2@@11|))) (|Set#Equal| (Reads3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59| $OneHeap |f#0@@11| |x0#0@@7| |x1#0@@3| |x2#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |861| :no-pattern (type |x0#0@@7|) :no-pattern (type |x1#0@@3|) :no-pattern (type |x2#0|) :no-pattern (U_2_int |x0#0@@7|) :no-pattern (U_2_bool |x0#0@@7|) :no-pattern (U_2_int |x1#0@@3|) :no-pattern (U_2_bool |x1#0@@3|) :no-pattern (U_2_int |x2#0|) :no-pattern (U_2_bool |x2#0|) )))) (=> (and ($Is |f#0@@11| (Tclass._System.___hFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59|)) (forall ((|x0#0@@8| T@U) (|x1#0@@4| T@U) (|x2#0@@0| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@8|) BoxType) (= (type |x1#0@@4|) BoxType)) (= (type |x2#0@@0|) BoxType)) (and (and ($IsBox |x0#0@@8| |#$T0@@55|) ($IsBox |x1#0@@4| |#$T1@@39|)) ($IsBox |x2#0@@0| |#$T2@@11|))) (|Set#Equal| (Reads3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59| $OneHeap |f#0@@11| |x0#0@@8| |x1#0@@4| |x2#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |861| :no-pattern (type |x0#0@@8|) :no-pattern (type |x1#0@@4|) :no-pattern (type |x2#0@@0|) :no-pattern (U_2_int |x0#0@@8|) :no-pattern (U_2_bool |x0#0@@8|) :no-pattern (U_2_int |x1#0@@4|) :no-pattern (U_2_bool |x1#0@@4|) :no-pattern (U_2_int |x2#0@@0|) :no-pattern (U_2_bool |x2#0@@0|) ))) ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59|))))) :qid |unknown.0:0| :skolemid |862| :pattern ( ($Is |f#0@@11| (Tclass._System.___hPartialFunc3 |#$T0@@55| |#$T1@@39| |#$T2@@11| |#$R@@59|))) )))
(assert (forall ((|#$T0@@56| T@U) (|#$T1@@40| T@U) (|#$T2@@12| T@U) (|#$R@@60| T@U) (|f#0@@12| T@U) ($h@@17 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@56|) TyType) (= (type |#$T1@@40|) TyType)) (= (type |#$T2@@12|) TyType)) (= (type |#$R@@60|) TyType)) (= (type |f#0@@12|) HandleTypeType)) (= (type $h@@17) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@56| |#$T1@@40| |#$T2@@12| |#$R@@60|) $h@@17) ($IsAlloc |f#0@@12| (Tclass._System.___hFunc3 |#$T0@@56| |#$T1@@40| |#$T2@@12| |#$R@@60|) $h@@17)) (=> ($IsAlloc |f#0@@12| (Tclass._System.___hFunc3 |#$T0@@56| |#$T1@@40| |#$T2@@12| |#$R@@60|) $h@@17) ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@56| |#$T1@@40| |#$T2@@12| |#$R@@60|) $h@@17)))) :qid |unknown.0:0| :skolemid |863| :pattern ( ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc3 |#$T0@@56| |#$T1@@40| |#$T2@@12| |#$R@@60|) $h@@17)) )))
(assert (forall ((arg0@@182 T@U) (arg1@@89 T@U) (arg2@@45 T@U) (arg3@@24 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3 arg0@@182 arg1@@89 arg2@@45 arg3@@24)) TyType) :qid |funType:Tclass._System.___hTotalFunc3| :pattern ( (Tclass._System.___hTotalFunc3 arg0@@182 arg1@@89 arg2@@45 arg3@@24)) )))
(assert (forall ((|#$T0@@57| T@U) (|#$T1@@41| T@U) (|#$T2@@13| T@U) (|#$R@@61| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@57|) TyType) (= (type |#$T1@@41|) TyType)) (= (type |#$T2@@13|) TyType)) (= (type |#$R@@61|) TyType)) (= (Tag (Tclass._System.___hTotalFunc3 |#$T0@@57| |#$T1@@41| |#$T2@@13| |#$R@@61|)) Tagclass._System.___hTotalFunc3)) :qid |unknown.0:0| :skolemid |864| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@57| |#$T1@@41| |#$T2@@13| |#$R@@61|)) )))
(assert (forall ((arg0@@183 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_0 arg0@@183)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_0| :pattern ( (Tclass._System.___hTotalFunc3_0 arg0@@183)) )))
(assert (forall ((|#$T0@@58| T@U) (|#$T1@@42| T@U) (|#$T2@@14| T@U) (|#$R@@62| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@58|) TyType) (= (type |#$T1@@42|) TyType)) (= (type |#$T2@@14|) TyType)) (= (type |#$R@@62|) TyType)) (= (Tclass._System.___hTotalFunc3_0 (Tclass._System.___hTotalFunc3 |#$T0@@58| |#$T1@@42| |#$T2@@14| |#$R@@62|)) |#$T0@@58|)) :qid |unknown.0:0| :skolemid |865| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@58| |#$T1@@42| |#$T2@@14| |#$R@@62|)) )))
(assert (forall ((arg0@@184 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_1 arg0@@184)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_1| :pattern ( (Tclass._System.___hTotalFunc3_1 arg0@@184)) )))
(assert (forall ((|#$T0@@59| T@U) (|#$T1@@43| T@U) (|#$T2@@15| T@U) (|#$R@@63| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@59|) TyType) (= (type |#$T1@@43|) TyType)) (= (type |#$T2@@15|) TyType)) (= (type |#$R@@63|) TyType)) (= (Tclass._System.___hTotalFunc3_1 (Tclass._System.___hTotalFunc3 |#$T0@@59| |#$T1@@43| |#$T2@@15| |#$R@@63|)) |#$T1@@43|)) :qid |unknown.0:0| :skolemid |866| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@59| |#$T1@@43| |#$T2@@15| |#$R@@63|)) )))
(assert (forall ((arg0@@185 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_2 arg0@@185)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_2| :pattern ( (Tclass._System.___hTotalFunc3_2 arg0@@185)) )))
(assert (forall ((|#$T0@@60| T@U) (|#$T1@@44| T@U) (|#$T2@@16| T@U) (|#$R@@64| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@60|) TyType) (= (type |#$T1@@44|) TyType)) (= (type |#$T2@@16|) TyType)) (= (type |#$R@@64|) TyType)) (= (Tclass._System.___hTotalFunc3_2 (Tclass._System.___hTotalFunc3 |#$T0@@60| |#$T1@@44| |#$T2@@16| |#$R@@64|)) |#$T2@@16|)) :qid |unknown.0:0| :skolemid |867| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@60| |#$T1@@44| |#$T2@@16| |#$R@@64|)) )))
(assert (forall ((arg0@@186 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_3 arg0@@186)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_3| :pattern ( (Tclass._System.___hTotalFunc3_3 arg0@@186)) )))
(assert (forall ((|#$T0@@61| T@U) (|#$T1@@45| T@U) (|#$T2@@17| T@U) (|#$R@@65| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@61|) TyType) (= (type |#$T1@@45|) TyType)) (= (type |#$T2@@17|) TyType)) (= (type |#$R@@65|) TyType)) (= (Tclass._System.___hTotalFunc3_3 (Tclass._System.___hTotalFunc3 |#$T0@@61| |#$T1@@45| |#$T2@@17| |#$R@@65|)) |#$R@@65|)) :qid |unknown.0:0| :skolemid |868| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@61| |#$T1@@45| |#$T2@@17| |#$R@@65|)) )))
(assert (forall ((|#$T0@@62| T@U) (|#$T1@@46| T@U) (|#$T2@@18| T@U) (|#$R@@66| T@U) (bx@@66 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@62|) TyType) (= (type |#$T1@@46|) TyType)) (= (type |#$T2@@18|) TyType)) (= (type |#$R@@66|) TyType)) (= (type bx@@66) BoxType)) ($IsBox bx@@66 (Tclass._System.___hTotalFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@18| |#$R@@66|))) (and (= ($Box ($Unbox HandleTypeType bx@@66)) bx@@66) ($Is ($Unbox HandleTypeType bx@@66) (Tclass._System.___hTotalFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@18| |#$R@@66|)))) :qid |unknown.0:0| :skolemid |869| :pattern ( ($IsBox bx@@66 (Tclass._System.___hTotalFunc3 |#$T0@@62| |#$T1@@46| |#$T2@@18| |#$R@@66|))) )))
(assert (forall ((|#$T0@@63| T@U) (|#$T1@@47| T@U) (|#$T2@@19| T@U) (|#$R@@67| T@U) (|f#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@63|) TyType) (= (type |#$T1@@47|) TyType)) (= (type |#$T2@@19|) TyType)) (= (type |#$R@@67|) TyType)) (= (type |f#0@@13|) HandleTypeType)) (and (=> ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67|)) (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67|)) (forall ((|x0#0@@9| T@U) (|x1#0@@5| T@U) (|x2#0@@1| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@9|) BoxType) (= (type |x1#0@@5|) BoxType)) (= (type |x2#0@@1|) BoxType)) (and (and ($IsBox |x0#0@@9| |#$T0@@63|) ($IsBox |x1#0@@5| |#$T1@@47|)) ($IsBox |x2#0@@1| |#$T2@@19|))) (Requires3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67| $OneHeap |f#0@@13| |x0#0@@9| |x1#0@@5| |x2#0@@1|)) :qid |unknown.0:0| :skolemid |870| :no-pattern (type |x0#0@@9|) :no-pattern (type |x1#0@@5|) :no-pattern (type |x2#0@@1|) :no-pattern (U_2_int |x0#0@@9|) :no-pattern (U_2_bool |x0#0@@9|) :no-pattern (U_2_int |x1#0@@5|) :no-pattern (U_2_bool |x1#0@@5|) :no-pattern (U_2_int |x2#0@@1|) :no-pattern (U_2_bool |x2#0@@1|) )))) (=> (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67|)) (forall ((|x0#0@@10| T@U) (|x1#0@@6| T@U) (|x2#0@@2| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@10|) BoxType) (= (type |x1#0@@6|) BoxType)) (= (type |x2#0@@2|) BoxType)) (and (and ($IsBox |x0#0@@10| |#$T0@@63|) ($IsBox |x1#0@@6| |#$T1@@47|)) ($IsBox |x2#0@@2| |#$T2@@19|))) (Requires3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67| $OneHeap |f#0@@13| |x0#0@@10| |x1#0@@6| |x2#0@@2|)) :qid |unknown.0:0| :skolemid |870| :no-pattern (type |x0#0@@10|) :no-pattern (type |x1#0@@6|) :no-pattern (type |x2#0@@2|) :no-pattern (U_2_int |x0#0@@10|) :no-pattern (U_2_bool |x0#0@@10|) :no-pattern (U_2_int |x1#0@@6|) :no-pattern (U_2_bool |x1#0@@6|) :no-pattern (U_2_int |x2#0@@2|) :no-pattern (U_2_bool |x2#0@@2|) ))) ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67|))))) :qid |unknown.0:0| :skolemid |871| :pattern ( ($Is |f#0@@13| (Tclass._System.___hTotalFunc3 |#$T0@@63| |#$T1@@47| |#$T2@@19| |#$R@@67|))) )))
(assert (forall ((|#$T0@@64| T@U) (|#$T1@@48| T@U) (|#$T2@@20| T@U) (|#$R@@68| T@U) (|f#0@@14| T@U) ($h@@18 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@64|) TyType) (= (type |#$T1@@48|) TyType)) (= (type |#$T2@@20|) TyType)) (= (type |#$R@@68|) TyType)) (= (type |f#0@@14|) HandleTypeType)) (= (type $h@@18) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@20| |#$R@@68|) $h@@18) ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@20| |#$R@@68|) $h@@18)) (=> ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@20| |#$R@@68|) $h@@18) ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@20| |#$R@@68|) $h@@18)))) :qid |unknown.0:0| :skolemid |872| :pattern ( ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc3 |#$T0@@64| |#$T1@@48| |#$T2@@20| |#$R@@68|) $h@@18)) )))
(assert (forall ((arg0@@187 T@U) (arg1@@90 T@U) (arg2@@46 T@U) (arg3@@25 T@U) ) (! (= (type (|#_System._tuple#4._#Make4| arg0@@187 arg1@@90 arg2@@46 arg3@@25)) DatatypeTypeType) :qid |funType:#_System._tuple#4._#Make4| :pattern ( (|#_System._tuple#4._#Make4| arg0@@187 arg1@@90 arg2@@46 arg3@@25)) )))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) (|a#9#2#0| T@U) (|a#9#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#9#0#0|) BoxType) (= (type |a#9#1#0|) BoxType)) (= (type |a#9#2#0|) BoxType)) (= (type |a#9#3#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#4._#Make4| |a#9#0#0| |a#9#1#0| |a#9#2#0| |a#9#3#0|)) |##_System._tuple#4._#Make4|)) :qid |unknown.0:0| :skolemid |873| :pattern ( (|#_System._tuple#4._#Make4| |a#9#0#0| |a#9#1#0| |a#9#2#0| |a#9#3#0|)) )))
(assert (forall ((d@@6 T@U) ) (!  (=> (= (type d@@6) DatatypeTypeType) (and (=> (_System.Tuple4.___hMake4_q d@@6) (= (DatatypeCtorId d@@6) |##_System._tuple#4._#Make4|)) (=> (= (DatatypeCtorId d@@6) |##_System._tuple#4._#Make4|) (_System.Tuple4.___hMake4_q d@@6)))) :qid |unknown.0:0| :skolemid |874| :pattern ( (_System.Tuple4.___hMake4_q d@@6)) )))
(assert (forall ((d@@7 T@U) ) (!  (=> (and (= (type d@@7) DatatypeTypeType) (_System.Tuple4.___hMake4_q d@@7)) (exists ((|a#10#0#0| T@U) (|a#10#1#0| T@U) (|a#10#2#0| T@U) (|a#10#3#0| T@U) ) (!  (and (and (and (and (= (type |a#10#0#0|) BoxType) (= (type |a#10#1#0|) BoxType)) (= (type |a#10#2#0|) BoxType)) (= (type |a#10#3#0|) BoxType)) (= d@@7 (|#_System._tuple#4._#Make4| |a#10#0#0| |a#10#1#0| |a#10#2#0| |a#10#3#0|))) :qid |unknown.0:0| :skolemid |875| :no-pattern (type |a#10#0#0|) :no-pattern (type |a#10#1#0|) :no-pattern (type |a#10#2#0|) :no-pattern (type |a#10#3#0|) :no-pattern (U_2_int |a#10#0#0|) :no-pattern (U_2_bool |a#10#0#0|) :no-pattern (U_2_int |a#10#1#0|) :no-pattern (U_2_bool |a#10#1#0|) :no-pattern (U_2_int |a#10#2#0|) :no-pattern (U_2_bool |a#10#2#0|) :no-pattern (U_2_int |a#10#3#0|) :no-pattern (U_2_bool |a#10#3#0|) ))) :qid |unknown.0:0| :skolemid |876| :pattern ( (_System.Tuple4.___hMake4_q d@@7)) )))
(assert (forall ((arg0@@188 T@U) (arg1@@91 T@U) (arg2@@47 T@U) (arg3@@26 T@U) ) (! (= (type (Tclass._System.Tuple4 arg0@@188 arg1@@91 arg2@@47 arg3@@26)) TyType) :qid |funType:Tclass._System.Tuple4| :pattern ( (Tclass._System.Tuple4 arg0@@188 arg1@@91 arg2@@47 arg3@@26)) )))
(assert (forall ((|#$T0@@65| T@U) (|#$T1@@49| T@U) (|#$T2@@21| T@U) (|#$T3| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@65|) TyType) (= (type |#$T1@@49|) TyType)) (= (type |#$T2@@21|) TyType)) (= (type |#$T3|) TyType)) (= (Tag (Tclass._System.Tuple4 |#$T0@@65| |#$T1@@49| |#$T2@@21| |#$T3|)) Tagclass._System.Tuple4)) :qid |unknown.0:0| :skolemid |877| :pattern ( (Tclass._System.Tuple4 |#$T0@@65| |#$T1@@49| |#$T2@@21| |#$T3|)) )))
(assert (forall ((arg0@@189 T@U) ) (! (= (type (Tclass._System.Tuple4_0 arg0@@189)) TyType) :qid |funType:Tclass._System.Tuple4_0| :pattern ( (Tclass._System.Tuple4_0 arg0@@189)) )))
(assert (forall ((|#$T0@@66| T@U) (|#$T1@@50| T@U) (|#$T2@@22| T@U) (|#$T3@@0| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@66|) TyType) (= (type |#$T1@@50|) TyType)) (= (type |#$T2@@22|) TyType)) (= (type |#$T3@@0|) TyType)) (= (Tclass._System.Tuple4_0 (Tclass._System.Tuple4 |#$T0@@66| |#$T1@@50| |#$T2@@22| |#$T3@@0|)) |#$T0@@66|)) :qid |unknown.0:0| :skolemid |878| :pattern ( (Tclass._System.Tuple4 |#$T0@@66| |#$T1@@50| |#$T2@@22| |#$T3@@0|)) )))
(assert (forall ((arg0@@190 T@U) ) (! (= (type (Tclass._System.Tuple4_1 arg0@@190)) TyType) :qid |funType:Tclass._System.Tuple4_1| :pattern ( (Tclass._System.Tuple4_1 arg0@@190)) )))
(assert (forall ((|#$T0@@67| T@U) (|#$T1@@51| T@U) (|#$T2@@23| T@U) (|#$T3@@1| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@67|) TyType) (= (type |#$T1@@51|) TyType)) (= (type |#$T2@@23|) TyType)) (= (type |#$T3@@1|) TyType)) (= (Tclass._System.Tuple4_1 (Tclass._System.Tuple4 |#$T0@@67| |#$T1@@51| |#$T2@@23| |#$T3@@1|)) |#$T1@@51|)) :qid |unknown.0:0| :skolemid |879| :pattern ( (Tclass._System.Tuple4 |#$T0@@67| |#$T1@@51| |#$T2@@23| |#$T3@@1|)) )))
(assert (forall ((arg0@@191 T@U) ) (! (= (type (Tclass._System.Tuple4_2 arg0@@191)) TyType) :qid |funType:Tclass._System.Tuple4_2| :pattern ( (Tclass._System.Tuple4_2 arg0@@191)) )))
(assert (forall ((|#$T0@@68| T@U) (|#$T1@@52| T@U) (|#$T2@@24| T@U) (|#$T3@@2| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@68|) TyType) (= (type |#$T1@@52|) TyType)) (= (type |#$T2@@24|) TyType)) (= (type |#$T3@@2|) TyType)) (= (Tclass._System.Tuple4_2 (Tclass._System.Tuple4 |#$T0@@68| |#$T1@@52| |#$T2@@24| |#$T3@@2|)) |#$T2@@24|)) :qid |unknown.0:0| :skolemid |880| :pattern ( (Tclass._System.Tuple4 |#$T0@@68| |#$T1@@52| |#$T2@@24| |#$T3@@2|)) )))
(assert (forall ((arg0@@192 T@U) ) (! (= (type (Tclass._System.Tuple4_3 arg0@@192)) TyType) :qid |funType:Tclass._System.Tuple4_3| :pattern ( (Tclass._System.Tuple4_3 arg0@@192)) )))
(assert (forall ((|#$T0@@69| T@U) (|#$T1@@53| T@U) (|#$T2@@25| T@U) (|#$T3@@3| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@69|) TyType) (= (type |#$T1@@53|) TyType)) (= (type |#$T2@@25|) TyType)) (= (type |#$T3@@3|) TyType)) (= (Tclass._System.Tuple4_3 (Tclass._System.Tuple4 |#$T0@@69| |#$T1@@53| |#$T2@@25| |#$T3@@3|)) |#$T3@@3|)) :qid |unknown.0:0| :skolemid |881| :pattern ( (Tclass._System.Tuple4 |#$T0@@69| |#$T1@@53| |#$T2@@25| |#$T3@@3|)) )))
(assert (forall ((|#$T0@@70| T@U) (|#$T1@@54| T@U) (|#$T2@@26| T@U) (|#$T3@@4| T@U) (bx@@67 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@70|) TyType) (= (type |#$T1@@54|) TyType)) (= (type |#$T2@@26|) TyType)) (= (type |#$T3@@4|) TyType)) (= (type bx@@67) BoxType)) ($IsBox bx@@67 (Tclass._System.Tuple4 |#$T0@@70| |#$T1@@54| |#$T2@@26| |#$T3@@4|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@67)) bx@@67) ($Is ($Unbox DatatypeTypeType bx@@67) (Tclass._System.Tuple4 |#$T0@@70| |#$T1@@54| |#$T2@@26| |#$T3@@4|)))) :qid |unknown.0:0| :skolemid |882| :pattern ( ($IsBox bx@@67 (Tclass._System.Tuple4 |#$T0@@70| |#$T1@@54| |#$T2@@26| |#$T3@@4|))) )))
(assert (forall ((|#$T0@@71| T@U) (|#$T1@@55| T@U) (|#$T2@@27| T@U) (|#$T3@@5| T@U) (|a#11#0#0| T@U) (|a#11#1#0| T@U) (|a#11#2#0| T@U) (|a#11#3#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@71|) TyType) (= (type |#$T1@@55|) TyType)) (= (type |#$T2@@27|) TyType)) (= (type |#$T3@@5|) TyType)) (= (type |a#11#0#0|) BoxType)) (= (type |a#11#1#0|) BoxType)) (= (type |a#11#2#0|) BoxType)) (= (type |a#11#3#0|) BoxType)) (and (=> ($Is (|#_System._tuple#4._#Make4| |a#11#0#0| |a#11#1#0| |a#11#2#0| |a#11#3#0|) (Tclass._System.Tuple4 |#$T0@@71| |#$T1@@55| |#$T2@@27| |#$T3@@5|)) (and (and (and ($IsBox |a#11#0#0| |#$T0@@71|) ($IsBox |a#11#1#0| |#$T1@@55|)) ($IsBox |a#11#2#0| |#$T2@@27|)) ($IsBox |a#11#3#0| |#$T3@@5|))) (=> (and (and (and ($IsBox |a#11#0#0| |#$T0@@71|) ($IsBox |a#11#1#0| |#$T1@@55|)) ($IsBox |a#11#2#0| |#$T2@@27|)) ($IsBox |a#11#3#0| |#$T3@@5|)) ($Is (|#_System._tuple#4._#Make4| |a#11#0#0| |a#11#1#0| |a#11#2#0| |a#11#3#0|) (Tclass._System.Tuple4 |#$T0@@71| |#$T1@@55| |#$T2@@27| |#$T3@@5|))))) :qid |unknown.0:0| :skolemid |883| :pattern ( ($Is (|#_System._tuple#4._#Make4| |a#11#0#0| |a#11#1#0| |a#11#2#0| |a#11#3#0|) (Tclass._System.Tuple4 |#$T0@@71| |#$T1@@55| |#$T2@@27| |#$T3@@5|))) )))
(assert (forall ((|#$T0@@72| T@U) (|#$T1@@56| T@U) (|#$T2@@28| T@U) (|#$T3@@6| T@U) (|a#12#0#0| T@U) (|a#12#1#0| T@U) (|a#12#2#0| T@U) (|a#12#3#0| T@U) ($h@@19 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type |#$T0@@72|) TyType) (= (type |#$T1@@56|) TyType)) (= (type |#$T2@@28|) TyType)) (= (type |#$T3@@6|) TyType)) (= (type |a#12#0#0|) BoxType)) (= (type |a#12#1#0|) BoxType)) (= (type |a#12#2#0|) BoxType)) (= (type |a#12#3#0|) BoxType)) (= (type $h@@19) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@19)) (and (=> ($IsAlloc (|#_System._tuple#4._#Make4| |a#12#0#0| |a#12#1#0| |a#12#2#0| |a#12#3#0|) (Tclass._System.Tuple4 |#$T0@@72| |#$T1@@56| |#$T2@@28| |#$T3@@6|) $h@@19) (and (and (and ($IsAllocBox |a#12#0#0| |#$T0@@72| $h@@19) ($IsAllocBox |a#12#1#0| |#$T1@@56| $h@@19)) ($IsAllocBox |a#12#2#0| |#$T2@@28| $h@@19)) ($IsAllocBox |a#12#3#0| |#$T3@@6| $h@@19))) (=> (and (and (and ($IsAllocBox |a#12#0#0| |#$T0@@72| $h@@19) ($IsAllocBox |a#12#1#0| |#$T1@@56| $h@@19)) ($IsAllocBox |a#12#2#0| |#$T2@@28| $h@@19)) ($IsAllocBox |a#12#3#0| |#$T3@@6| $h@@19)) ($IsAlloc (|#_System._tuple#4._#Make4| |a#12#0#0| |a#12#1#0| |a#12#2#0| |a#12#3#0|) (Tclass._System.Tuple4 |#$T0@@72| |#$T1@@56| |#$T2@@28| |#$T3@@6|) $h@@19)))) :qid |unknown.0:0| :skolemid |884| :pattern ( ($IsAlloc (|#_System._tuple#4._#Make4| |a#12#0#0| |a#12#1#0| |a#12#2#0| |a#12#3#0|) (Tclass._System.Tuple4 |#$T0@@72| |#$T1@@56| |#$T2@@28| |#$T3@@6|) $h@@19)) )))
(assert (forall ((arg0@@193 T@U) ) (! (= (type (_System.Tuple4._0 arg0@@193)) BoxType) :qid |funType:_System.Tuple4._0| :pattern ( (_System.Tuple4._0 arg0@@193)) )))
(assert (forall ((d@@8 T@U) (|#$T0@@73| T@U) ($h@@20 T@U) ) (!  (=> (and (and (and (= (type d@@8) DatatypeTypeType) (= (type |#$T0@@73|) TyType)) (= (type $h@@20) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@20) (and (_System.Tuple4.___hMake4_q d@@8) (exists ((|#$T1@@57| T@U) (|#$T2@@29| T@U) (|#$T3@@7| T@U) ) (!  (and (and (and (= (type |#$T1@@57|) TyType) (= (type |#$T2@@29|) TyType)) (= (type |#$T3@@7|) TyType)) ($IsAlloc d@@8 (Tclass._System.Tuple4 |#$T0@@73| |#$T1@@57| |#$T2@@29| |#$T3@@7|) $h@@20)) :qid |unknown.0:0| :skolemid |885| :pattern ( ($IsAlloc d@@8 (Tclass._System.Tuple4 |#$T0@@73| |#$T1@@57| |#$T2@@29| |#$T3@@7|) $h@@20)) ))))) ($IsAllocBox (_System.Tuple4._0 d@@8) |#$T0@@73| $h@@20)) :qid |unknown.0:0| :skolemid |886| :pattern ( ($IsAllocBox (_System.Tuple4._0 d@@8) |#$T0@@73| $h@@20)) )))
(assert (forall ((arg0@@194 T@U) ) (! (= (type (_System.Tuple4._1 arg0@@194)) BoxType) :qid |funType:_System.Tuple4._1| :pattern ( (_System.Tuple4._1 arg0@@194)) )))
(assert (forall ((d@@9 T@U) (|#$T1@@58| T@U) ($h@@21 T@U) ) (!  (=> (and (and (and (= (type d@@9) DatatypeTypeType) (= (type |#$T1@@58|) TyType)) (= (type $h@@21) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@21) (and (_System.Tuple4.___hMake4_q d@@9) (exists ((|#$T0@@74| T@U) (|#$T2@@30| T@U) (|#$T3@@8| T@U) ) (!  (and (and (and (= (type |#$T0@@74|) TyType) (= (type |#$T2@@30|) TyType)) (= (type |#$T3@@8|) TyType)) ($IsAlloc d@@9 (Tclass._System.Tuple4 |#$T0@@74| |#$T1@@58| |#$T2@@30| |#$T3@@8|) $h@@21)) :qid |unknown.0:0| :skolemid |887| :pattern ( ($IsAlloc d@@9 (Tclass._System.Tuple4 |#$T0@@74| |#$T1@@58| |#$T2@@30| |#$T3@@8|) $h@@21)) ))))) ($IsAllocBox (_System.Tuple4._1 d@@9) |#$T1@@58| $h@@21)) :qid |unknown.0:0| :skolemid |888| :pattern ( ($IsAllocBox (_System.Tuple4._1 d@@9) |#$T1@@58| $h@@21)) )))
(assert (forall ((arg0@@195 T@U) ) (! (= (type (_System.Tuple4._2 arg0@@195)) BoxType) :qid |funType:_System.Tuple4._2| :pattern ( (_System.Tuple4._2 arg0@@195)) )))
(assert (forall ((d@@10 T@U) (|#$T2@@31| T@U) ($h@@22 T@U) ) (!  (=> (and (and (and (= (type d@@10) DatatypeTypeType) (= (type |#$T2@@31|) TyType)) (= (type $h@@22) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@22) (and (_System.Tuple4.___hMake4_q d@@10) (exists ((|#$T0@@75| T@U) (|#$T1@@59| T@U) (|#$T3@@9| T@U) ) (!  (and (and (and (= (type |#$T0@@75|) TyType) (= (type |#$T1@@59|) TyType)) (= (type |#$T3@@9|) TyType)) ($IsAlloc d@@10 (Tclass._System.Tuple4 |#$T0@@75| |#$T1@@59| |#$T2@@31| |#$T3@@9|) $h@@22)) :qid |unknown.0:0| :skolemid |889| :pattern ( ($IsAlloc d@@10 (Tclass._System.Tuple4 |#$T0@@75| |#$T1@@59| |#$T2@@31| |#$T3@@9|) $h@@22)) ))))) ($IsAllocBox (_System.Tuple4._2 d@@10) |#$T2@@31| $h@@22)) :qid |unknown.0:0| :skolemid |890| :pattern ( ($IsAllocBox (_System.Tuple4._2 d@@10) |#$T2@@31| $h@@22)) )))
(assert (forall ((arg0@@196 T@U) ) (! (= (type (_System.Tuple4._3 arg0@@196)) BoxType) :qid |funType:_System.Tuple4._3| :pattern ( (_System.Tuple4._3 arg0@@196)) )))
(assert (forall ((d@@11 T@U) (|#$T3@@10| T@U) ($h@@23 T@U) ) (!  (=> (and (and (and (= (type d@@11) DatatypeTypeType) (= (type |#$T3@@10|) TyType)) (= (type $h@@23) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@23) (and (_System.Tuple4.___hMake4_q d@@11) (exists ((|#$T0@@76| T@U) (|#$T1@@60| T@U) (|#$T2@@32| T@U) ) (!  (and (and (and (= (type |#$T0@@76|) TyType) (= (type |#$T1@@60|) TyType)) (= (type |#$T2@@32|) TyType)) ($IsAlloc d@@11 (Tclass._System.Tuple4 |#$T0@@76| |#$T1@@60| |#$T2@@32| |#$T3@@10|) $h@@23)) :qid |unknown.0:0| :skolemid |891| :pattern ( ($IsAlloc d@@11 (Tclass._System.Tuple4 |#$T0@@76| |#$T1@@60| |#$T2@@32| |#$T3@@10|) $h@@23)) ))))) ($IsAllocBox (_System.Tuple4._3 d@@11) |#$T3@@10| $h@@23)) :qid |unknown.0:0| :skolemid |892| :pattern ( ($IsAllocBox (_System.Tuple4._3 d@@11) |#$T3@@10| $h@@23)) )))
(assert (forall ((|a#13#0#0| T@U) (|a#13#1#0| T@U) (|a#13#2#0| T@U) (|a#13#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#13#0#0|) BoxType) (= (type |a#13#1#0|) BoxType)) (= (type |a#13#2#0|) BoxType)) (= (type |a#13#3#0|) BoxType)) (= (|#_System._tuple#4._#Make4| (Lit |a#13#0#0|) (Lit |a#13#1#0|) (Lit |a#13#2#0|) (Lit |a#13#3#0|)) (Lit (|#_System._tuple#4._#Make4| |a#13#0#0| |a#13#1#0| |a#13#2#0| |a#13#3#0|)))) :qid |unknown.0:0| :skolemid |893| :pattern ( (|#_System._tuple#4._#Make4| (Lit |a#13#0#0|) (Lit |a#13#1#0|) (Lit |a#13#2#0|) (Lit |a#13#3#0|))) )))
(assert (forall ((|a#14#0#0| T@U) (|a#14#1#0| T@U) (|a#14#2#0| T@U) (|a#14#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#14#0#0|) BoxType) (= (type |a#14#1#0|) BoxType)) (= (type |a#14#2#0|) BoxType)) (= (type |a#14#3#0|) BoxType)) (= (_System.Tuple4._0 (|#_System._tuple#4._#Make4| |a#14#0#0| |a#14#1#0| |a#14#2#0| |a#14#3#0|)) |a#14#0#0|)) :qid |unknown.0:0| :skolemid |894| :pattern ( (|#_System._tuple#4._#Make4| |a#14#0#0| |a#14#1#0| |a#14#2#0| |a#14#3#0|)) )))
(assert (forall ((|a#15#0#0| T@U) (|a#15#1#0| T@U) (|a#15#2#0| T@U) (|a#15#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#15#0#0|) BoxType) (= (type |a#15#1#0|) BoxType)) (= (type |a#15#2#0|) BoxType)) (= (type |a#15#3#0|) BoxType)) (< (BoxRank |a#15#0#0|) (DtRank (|#_System._tuple#4._#Make4| |a#15#0#0| |a#15#1#0| |a#15#2#0| |a#15#3#0|)))) :qid |unknown.0:0| :skolemid |895| :pattern ( (|#_System._tuple#4._#Make4| |a#15#0#0| |a#15#1#0| |a#15#2#0| |a#15#3#0|)) )))
(assert (forall ((|a#16#0#0| T@U) (|a#16#1#0| T@U) (|a#16#2#0| T@U) (|a#16#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#16#0#0|) BoxType) (= (type |a#16#1#0|) BoxType)) (= (type |a#16#2#0|) BoxType)) (= (type |a#16#3#0|) BoxType)) (= (_System.Tuple4._1 (|#_System._tuple#4._#Make4| |a#16#0#0| |a#16#1#0| |a#16#2#0| |a#16#3#0|)) |a#16#1#0|)) :qid |unknown.0:0| :skolemid |896| :pattern ( (|#_System._tuple#4._#Make4| |a#16#0#0| |a#16#1#0| |a#16#2#0| |a#16#3#0|)) )))
(assert (forall ((|a#17#0#0| T@U) (|a#17#1#0| T@U) (|a#17#2#0| T@U) (|a#17#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#17#0#0|) BoxType) (= (type |a#17#1#0|) BoxType)) (= (type |a#17#2#0|) BoxType)) (= (type |a#17#3#0|) BoxType)) (< (BoxRank |a#17#1#0|) (DtRank (|#_System._tuple#4._#Make4| |a#17#0#0| |a#17#1#0| |a#17#2#0| |a#17#3#0|)))) :qid |unknown.0:0| :skolemid |897| :pattern ( (|#_System._tuple#4._#Make4| |a#17#0#0| |a#17#1#0| |a#17#2#0| |a#17#3#0|)) )))
(assert (forall ((|a#18#0#0| T@U) (|a#18#1#0| T@U) (|a#18#2#0| T@U) (|a#18#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#18#0#0|) BoxType) (= (type |a#18#1#0|) BoxType)) (= (type |a#18#2#0|) BoxType)) (= (type |a#18#3#0|) BoxType)) (= (_System.Tuple4._2 (|#_System._tuple#4._#Make4| |a#18#0#0| |a#18#1#0| |a#18#2#0| |a#18#3#0|)) |a#18#2#0|)) :qid |unknown.0:0| :skolemid |898| :pattern ( (|#_System._tuple#4._#Make4| |a#18#0#0| |a#18#1#0| |a#18#2#0| |a#18#3#0|)) )))
(assert (forall ((|a#19#0#0| T@U) (|a#19#1#0| T@U) (|a#19#2#0| T@U) (|a#19#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#19#0#0|) BoxType) (= (type |a#19#1#0|) BoxType)) (= (type |a#19#2#0|) BoxType)) (= (type |a#19#3#0|) BoxType)) (< (BoxRank |a#19#2#0|) (DtRank (|#_System._tuple#4._#Make4| |a#19#0#0| |a#19#1#0| |a#19#2#0| |a#19#3#0|)))) :qid |unknown.0:0| :skolemid |899| :pattern ( (|#_System._tuple#4._#Make4| |a#19#0#0| |a#19#1#0| |a#19#2#0| |a#19#3#0|)) )))
(assert (forall ((|a#20#0#0| T@U) (|a#20#1#0| T@U) (|a#20#2#0| T@U) (|a#20#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#20#0#0|) BoxType) (= (type |a#20#1#0|) BoxType)) (= (type |a#20#2#0|) BoxType)) (= (type |a#20#3#0|) BoxType)) (= (_System.Tuple4._3 (|#_System._tuple#4._#Make4| |a#20#0#0| |a#20#1#0| |a#20#2#0| |a#20#3#0|)) |a#20#3#0|)) :qid |unknown.0:0| :skolemid |900| :pattern ( (|#_System._tuple#4._#Make4| |a#20#0#0| |a#20#1#0| |a#20#2#0| |a#20#3#0|)) )))
(assert (forall ((|a#21#0#0| T@U) (|a#21#1#0| T@U) (|a#21#2#0| T@U) (|a#21#3#0| T@U) ) (!  (=> (and (and (and (= (type |a#21#0#0|) BoxType) (= (type |a#21#1#0|) BoxType)) (= (type |a#21#2#0|) BoxType)) (= (type |a#21#3#0|) BoxType)) (< (BoxRank |a#21#3#0|) (DtRank (|#_System._tuple#4._#Make4| |a#21#0#0| |a#21#1#0| |a#21#2#0| |a#21#3#0|)))) :qid |unknown.0:0| :skolemid |901| :pattern ( (|#_System._tuple#4._#Make4| |a#21#0#0| |a#21#1#0| |a#21#2#0| |a#21#3#0|)) )))
(assert (forall ((d@@12 T@U) ) (!  (=> (and (= (type d@@12) DatatypeTypeType) (|$IsA#_System.Tuple4| d@@12)) (_System.Tuple4.___hMake4_q d@@12)) :qid |unknown.0:0| :skolemid |902| :pattern ( (|$IsA#_System.Tuple4| d@@12)) )))
(assert (forall ((|#$T0@@77| T@U) (|#$T1@@61| T@U) (|#$T2@@33| T@U) (|#$T3@@11| T@U) (d@@13 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@77|) TyType) (= (type |#$T1@@61|) TyType)) (= (type |#$T2@@33|) TyType)) (= (type |#$T3@@11|) TyType)) (= (type d@@13) DatatypeTypeType)) ($Is d@@13 (Tclass._System.Tuple4 |#$T0@@77| |#$T1@@61| |#$T2@@33| |#$T3@@11|))) (_System.Tuple4.___hMake4_q d@@13)) :qid |unknown.0:0| :skolemid |903| :pattern ( (_System.Tuple4.___hMake4_q d@@13) ($Is d@@13 (Tclass._System.Tuple4 |#$T0@@77| |#$T1@@61| |#$T2@@33| |#$T3@@11|))) )))
(assert (forall ((a@@108 T@U) (b@@63 T@U) ) (!  (=> (and (and (= (type a@@108) DatatypeTypeType) (= (type b@@63) DatatypeTypeType)) true) (and (=> (|_System.Tuple4#Equal| a@@108 b@@63) (and (and (and (= (_System.Tuple4._0 a@@108) (_System.Tuple4._0 b@@63)) (= (_System.Tuple4._1 a@@108) (_System.Tuple4._1 b@@63))) (= (_System.Tuple4._2 a@@108) (_System.Tuple4._2 b@@63))) (= (_System.Tuple4._3 a@@108) (_System.Tuple4._3 b@@63)))) (=> (and (and (and (= (_System.Tuple4._0 a@@108) (_System.Tuple4._0 b@@63)) (= (_System.Tuple4._1 a@@108) (_System.Tuple4._1 b@@63))) (= (_System.Tuple4._2 a@@108) (_System.Tuple4._2 b@@63))) (= (_System.Tuple4._3 a@@108) (_System.Tuple4._3 b@@63))) (|_System.Tuple4#Equal| a@@108 b@@63)))) :qid |unknown.0:0| :skolemid |904| :pattern ( (|_System.Tuple4#Equal| a@@108 b@@63)) )))
(assert (forall ((a@@109 T@U) (b@@64 T@U) ) (!  (=> (and (= (type a@@109) DatatypeTypeType) (= (type b@@64) DatatypeTypeType)) (and (=> (|_System.Tuple4#Equal| a@@109 b@@64) (= a@@109 b@@64)) (=> (= a@@109 b@@64) (|_System.Tuple4#Equal| a@@109 b@@64)))) :qid |unknown.0:0| :skolemid |905| :pattern ( (|_System.Tuple4#Equal| a@@109 b@@64)) )))
(assert (forall ((arg0@@197 T@U) (arg1@@92 T@U) (arg2@@48 T@U) (arg3@@27 T@U) (arg4@@14 T@U) ) (! (= (type (Tclass._System.___hFunc4 arg0@@197 arg1@@92 arg2@@48 arg3@@27 arg4@@14)) TyType) :qid |funType:Tclass._System.___hFunc4| :pattern ( (Tclass._System.___hFunc4 arg0@@197 arg1@@92 arg2@@48 arg3@@27 arg4@@14)) )))
(assert (forall ((|#$T0@@78| T@U) (|#$T1@@62| T@U) (|#$T2@@34| T@U) (|#$T3@@12| T@U) (|#$R@@69| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@78|) TyType) (= (type |#$T1@@62|) TyType)) (= (type |#$T2@@34|) TyType)) (= (type |#$T3@@12|) TyType)) (= (type |#$R@@69|) TyType)) (= (Tag (Tclass._System.___hFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@34| |#$T3@@12| |#$R@@69|)) Tagclass._System.___hFunc4)) :qid |unknown.0:0| :skolemid |906| :pattern ( (Tclass._System.___hFunc4 |#$T0@@78| |#$T1@@62| |#$T2@@34| |#$T3@@12| |#$R@@69|)) )))
(assert (forall ((arg0@@198 T@U) ) (! (= (type (Tclass._System.___hFunc4_0 arg0@@198)) TyType) :qid |funType:Tclass._System.___hFunc4_0| :pattern ( (Tclass._System.___hFunc4_0 arg0@@198)) )))
(assert (forall ((|#$T0@@79| T@U) (|#$T1@@63| T@U) (|#$T2@@35| T@U) (|#$T3@@13| T@U) (|#$R@@70| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@79|) TyType) (= (type |#$T1@@63|) TyType)) (= (type |#$T2@@35|) TyType)) (= (type |#$T3@@13|) TyType)) (= (type |#$R@@70|) TyType)) (= (Tclass._System.___hFunc4_0 (Tclass._System.___hFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@35| |#$T3@@13| |#$R@@70|)) |#$T0@@79|)) :qid |unknown.0:0| :skolemid |907| :pattern ( (Tclass._System.___hFunc4 |#$T0@@79| |#$T1@@63| |#$T2@@35| |#$T3@@13| |#$R@@70|)) )))
(assert (forall ((arg0@@199 T@U) ) (! (= (type (Tclass._System.___hFunc4_1 arg0@@199)) TyType) :qid |funType:Tclass._System.___hFunc4_1| :pattern ( (Tclass._System.___hFunc4_1 arg0@@199)) )))
(assert (forall ((|#$T0@@80| T@U) (|#$T1@@64| T@U) (|#$T2@@36| T@U) (|#$T3@@14| T@U) (|#$R@@71| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@80|) TyType) (= (type |#$T1@@64|) TyType)) (= (type |#$T2@@36|) TyType)) (= (type |#$T3@@14|) TyType)) (= (type |#$R@@71|) TyType)) (= (Tclass._System.___hFunc4_1 (Tclass._System.___hFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@36| |#$T3@@14| |#$R@@71|)) |#$T1@@64|)) :qid |unknown.0:0| :skolemid |908| :pattern ( (Tclass._System.___hFunc4 |#$T0@@80| |#$T1@@64| |#$T2@@36| |#$T3@@14| |#$R@@71|)) )))
(assert (forall ((arg0@@200 T@U) ) (! (= (type (Tclass._System.___hFunc4_2 arg0@@200)) TyType) :qid |funType:Tclass._System.___hFunc4_2| :pattern ( (Tclass._System.___hFunc4_2 arg0@@200)) )))
(assert (forall ((|#$T0@@81| T@U) (|#$T1@@65| T@U) (|#$T2@@37| T@U) (|#$T3@@15| T@U) (|#$R@@72| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@81|) TyType) (= (type |#$T1@@65|) TyType)) (= (type |#$T2@@37|) TyType)) (= (type |#$T3@@15|) TyType)) (= (type |#$R@@72|) TyType)) (= (Tclass._System.___hFunc4_2 (Tclass._System.___hFunc4 |#$T0@@81| |#$T1@@65| |#$T2@@37| |#$T3@@15| |#$R@@72|)) |#$T2@@37|)) :qid |unknown.0:0| :skolemid |909| :pattern ( (Tclass._System.___hFunc4 |#$T0@@81| |#$T1@@65| |#$T2@@37| |#$T3@@15| |#$R@@72|)) )))
(assert (forall ((arg0@@201 T@U) ) (! (= (type (Tclass._System.___hFunc4_3 arg0@@201)) TyType) :qid |funType:Tclass._System.___hFunc4_3| :pattern ( (Tclass._System.___hFunc4_3 arg0@@201)) )))
(assert (forall ((|#$T0@@82| T@U) (|#$T1@@66| T@U) (|#$T2@@38| T@U) (|#$T3@@16| T@U) (|#$R@@73| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@82|) TyType) (= (type |#$T1@@66|) TyType)) (= (type |#$T2@@38|) TyType)) (= (type |#$T3@@16|) TyType)) (= (type |#$R@@73|) TyType)) (= (Tclass._System.___hFunc4_3 (Tclass._System.___hFunc4 |#$T0@@82| |#$T1@@66| |#$T2@@38| |#$T3@@16| |#$R@@73|)) |#$T3@@16|)) :qid |unknown.0:0| :skolemid |910| :pattern ( (Tclass._System.___hFunc4 |#$T0@@82| |#$T1@@66| |#$T2@@38| |#$T3@@16| |#$R@@73|)) )))
(assert (forall ((arg0@@202 T@U) ) (! (= (type (Tclass._System.___hFunc4_4 arg0@@202)) TyType) :qid |funType:Tclass._System.___hFunc4_4| :pattern ( (Tclass._System.___hFunc4_4 arg0@@202)) )))
(assert (forall ((|#$T0@@83| T@U) (|#$T1@@67| T@U) (|#$T2@@39| T@U) (|#$T3@@17| T@U) (|#$R@@74| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@83|) TyType) (= (type |#$T1@@67|) TyType)) (= (type |#$T2@@39|) TyType)) (= (type |#$T3@@17|) TyType)) (= (type |#$R@@74|) TyType)) (= (Tclass._System.___hFunc4_4 (Tclass._System.___hFunc4 |#$T0@@83| |#$T1@@67| |#$T2@@39| |#$T3@@17| |#$R@@74|)) |#$R@@74|)) :qid |unknown.0:0| :skolemid |911| :pattern ( (Tclass._System.___hFunc4 |#$T0@@83| |#$T1@@67| |#$T2@@39| |#$T3@@17| |#$R@@74|)) )))
(assert (forall ((|#$T0@@84| T@U) (|#$T1@@68| T@U) (|#$T2@@40| T@U) (|#$T3@@18| T@U) (|#$R@@75| T@U) (bx@@68 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@84|) TyType) (= (type |#$T1@@68|) TyType)) (= (type |#$T2@@40|) TyType)) (= (type |#$T3@@18|) TyType)) (= (type |#$R@@75|) TyType)) (= (type bx@@68) BoxType)) ($IsBox bx@@68 (Tclass._System.___hFunc4 |#$T0@@84| |#$T1@@68| |#$T2@@40| |#$T3@@18| |#$R@@75|))) (and (= ($Box ($Unbox HandleTypeType bx@@68)) bx@@68) ($Is ($Unbox HandleTypeType bx@@68) (Tclass._System.___hFunc4 |#$T0@@84| |#$T1@@68| |#$T2@@40| |#$T3@@18| |#$R@@75|)))) :qid |unknown.0:0| :skolemid |912| :pattern ( ($IsBox bx@@68 (Tclass._System.___hFunc4 |#$T0@@84| |#$T1@@68| |#$T2@@40| |#$T3@@18| |#$R@@75|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@203 T@T) (arg1@@93 T@T) (arg2@@49 T@T) (arg3@@28 T@T) (arg4@@15 T@T) (arg5@@4 T@T) ) (! (= (Ctor (MapType5Type arg0@@203 arg1@@93 arg2@@49 arg3@@28 arg4@@15 arg5@@4)) 24) :qid |ctor:MapType5Type| )) (forall ((arg0@@204 T@T) (arg1@@94 T@T) (arg2@@50 T@T) (arg3@@29 T@T) (arg4@@16 T@T) (arg5@@5 T@T) ) (! (= (MapType5TypeInv0 (MapType5Type arg0@@204 arg1@@94 arg2@@50 arg3@@29 arg4@@16 arg5@@5)) arg0@@204) :qid |typeInv:MapType5TypeInv0| :pattern ( (MapType5Type arg0@@204 arg1@@94 arg2@@50 arg3@@29 arg4@@16 arg5@@5)) ))) (forall ((arg0@@205 T@T) (arg1@@95 T@T) (arg2@@51 T@T) (arg3@@30 T@T) (arg4@@17 T@T) (arg5@@6 T@T) ) (! (= (MapType5TypeInv1 (MapType5Type arg0@@205 arg1@@95 arg2@@51 arg3@@30 arg4@@17 arg5@@6)) arg1@@95) :qid |typeInv:MapType5TypeInv1| :pattern ( (MapType5Type arg0@@205 arg1@@95 arg2@@51 arg3@@30 arg4@@17 arg5@@6)) ))) (forall ((arg0@@206 T@T) (arg1@@96 T@T) (arg2@@52 T@T) (arg3@@31 T@T) (arg4@@18 T@T) (arg5@@7 T@T) ) (! (= (MapType5TypeInv2 (MapType5Type arg0@@206 arg1@@96 arg2@@52 arg3@@31 arg4@@18 arg5@@7)) arg2@@52) :qid |typeInv:MapType5TypeInv2| :pattern ( (MapType5Type arg0@@206 arg1@@96 arg2@@52 arg3@@31 arg4@@18 arg5@@7)) ))) (forall ((arg0@@207 T@T) (arg1@@97 T@T) (arg2@@53 T@T) (arg3@@32 T@T) (arg4@@19 T@T) (arg5@@8 T@T) ) (! (= (MapType5TypeInv3 (MapType5Type arg0@@207 arg1@@97 arg2@@53 arg3@@32 arg4@@19 arg5@@8)) arg3@@32) :qid |typeInv:MapType5TypeInv3| :pattern ( (MapType5Type arg0@@207 arg1@@97 arg2@@53 arg3@@32 arg4@@19 arg5@@8)) ))) (forall ((arg0@@208 T@T) (arg1@@98 T@T) (arg2@@54 T@T) (arg3@@33 T@T) (arg4@@20 T@T) (arg5@@9 T@T) ) (! (= (MapType5TypeInv4 (MapType5Type arg0@@208 arg1@@98 arg2@@54 arg3@@33 arg4@@20 arg5@@9)) arg4@@20) :qid |typeInv:MapType5TypeInv4| :pattern ( (MapType5Type arg0@@208 arg1@@98 arg2@@54 arg3@@33 arg4@@20 arg5@@9)) ))) (forall ((arg0@@209 T@T) (arg1@@99 T@T) (arg2@@55 T@T) (arg3@@34 T@T) (arg4@@21 T@T) (arg5@@10 T@T) ) (! (= (MapType5TypeInv5 (MapType5Type arg0@@209 arg1@@99 arg2@@55 arg3@@34 arg4@@21 arg5@@10)) arg5@@10) :qid |typeInv:MapType5TypeInv5| :pattern ( (MapType5Type arg0@@209 arg1@@99 arg2@@55 arg3@@34 arg4@@21 arg5@@10)) ))) (forall ((arg0@@210 T@U) (arg1@@100 T@U) (arg2@@56 T@U) (arg3@@35 T@U) (arg4@@22 T@U) (arg5@@11 T@U) ) (! (let ((aVar5 (MapType5TypeInv5 (type arg0@@210)))) (= (type (MapType5Select arg0@@210 arg1@@100 arg2@@56 arg3@@35 arg4@@22 arg5@@11)) aVar5)) :qid |funType:MapType5Select| :pattern ( (MapType5Select arg0@@210 arg1@@100 arg2@@56 arg3@@35 arg4@@22 arg5@@11)) ))) (forall ((arg0@@211 T@U) (arg1@@101 T@U) (arg2@@57 T@U) (arg3@@36 T@U) (arg4@@23 T@U) (arg5@@12 T@U) (arg6@@3 T@U) ) (! (let ((aVar5@@0 (type arg6@@3))) (let ((aVar4@@2 (type arg5@@12))) (let ((aVar3@@3 (type arg4@@23))) (let ((aVar2@@4 (type arg3@@36))) (let ((aVar1@@5 (type arg2@@57))) (let ((aVar0@@3 (type arg1@@101))) (= (type (MapType5Store arg0@@211 arg1@@101 arg2@@57 arg3@@36 arg4@@23 arg5@@12 arg6@@3)) (MapType5Type aVar0@@3 aVar1@@5 aVar2@@4 aVar3@@3 aVar4@@2 aVar5@@0)))))))) :qid |funType:MapType5Store| :pattern ( (MapType5Store arg0@@211 arg1@@101 arg2@@57 arg3@@36 arg4@@23 arg5@@12 arg6@@3)) ))) (forall ((m@@42 T@U) (x0@@20 T@U) (x1@@14 T@U) (x2@@10 T@U) (x3@@5 T@U) (x4 T@U) (val@@21 T@U) ) (! (let ((aVar5@@1 (MapType5TypeInv5 (type m@@42)))) (=> (= (type val@@21) aVar5@@1) (= (MapType5Select (MapType5Store m@@42 x0@@20 x1@@14 x2@@10 x3@@5 x4 val@@21) x0@@20 x1@@14 x2@@10 x3@@5 x4) val@@21))) :qid |mapAx0:MapType5Select| :weight 0 ))) (and (and (and (and (and (forall ((val@@22 T@U) (m@@43 T@U) (x0@@21 T@U) (x1@@15 T@U) (x2@@11 T@U) (x3@@6 T@U) (x4@@0 T@U) (y0@@15 T@U) (y1@@11 T@U) (y2@@8 T@U) (y3@@4 T@U) (y4 T@U) ) (!  (or (= x0@@21 y0@@15) (= (MapType5Select (MapType5Store m@@43 x0@@21 x1@@15 x2@@11 x3@@6 x4@@0 val@@22) y0@@15 y1@@11 y2@@8 y3@@4 y4) (MapType5Select m@@43 y0@@15 y1@@11 y2@@8 y3@@4 y4))) :qid |mapAx1:MapType5Select:0| :weight 0 )) (forall ((val@@23 T@U) (m@@44 T@U) (x0@@22 T@U) (x1@@16 T@U) (x2@@12 T@U) (x3@@7 T@U) (x4@@1 T@U) (y0@@16 T@U) (y1@@12 T@U) (y2@@9 T@U) (y3@@5 T@U) (y4@@0 T@U) ) (!  (or (= x1@@16 y1@@12) (= (MapType5Select (MapType5Store m@@44 x0@@22 x1@@16 x2@@12 x3@@7 x4@@1 val@@23) y0@@16 y1@@12 y2@@9 y3@@5 y4@@0) (MapType5Select m@@44 y0@@16 y1@@12 y2@@9 y3@@5 y4@@0))) :qid |mapAx1:MapType5Select:1| :weight 0 ))) (forall ((val@@24 T@U) (m@@45 T@U) (x0@@23 T@U) (x1@@17 T@U) (x2@@13 T@U) (x3@@8 T@U) (x4@@2 T@U) (y0@@17 T@U) (y1@@13 T@U) (y2@@10 T@U) (y3@@6 T@U) (y4@@1 T@U) ) (!  (or (= x2@@13 y2@@10) (= (MapType5Select (MapType5Store m@@45 x0@@23 x1@@17 x2@@13 x3@@8 x4@@2 val@@24) y0@@17 y1@@13 y2@@10 y3@@6 y4@@1) (MapType5Select m@@45 y0@@17 y1@@13 y2@@10 y3@@6 y4@@1))) :qid |mapAx1:MapType5Select:2| :weight 0 ))) (forall ((val@@25 T@U) (m@@46 T@U) (x0@@24 T@U) (x1@@18 T@U) (x2@@14 T@U) (x3@@9 T@U) (x4@@3 T@U) (y0@@18 T@U) (y1@@14 T@U) (y2@@11 T@U) (y3@@7 T@U) (y4@@2 T@U) ) (!  (or (= x3@@9 y3@@7) (= (MapType5Select (MapType5Store m@@46 x0@@24 x1@@18 x2@@14 x3@@9 x4@@3 val@@25) y0@@18 y1@@14 y2@@11 y3@@7 y4@@2) (MapType5Select m@@46 y0@@18 y1@@14 y2@@11 y3@@7 y4@@2))) :qid |mapAx1:MapType5Select:3| :weight 0 ))) (forall ((val@@26 T@U) (m@@47 T@U) (x0@@25 T@U) (x1@@19 T@U) (x2@@15 T@U) (x3@@10 T@U) (x4@@4 T@U) (y0@@19 T@U) (y1@@15 T@U) (y2@@12 T@U) (y3@@8 T@U) (y4@@3 T@U) ) (!  (or (= x4@@4 y4@@3) (= (MapType5Select (MapType5Store m@@47 x0@@25 x1@@19 x2@@15 x3@@10 x4@@4 val@@26) y0@@19 y1@@15 y2@@12 y3@@8 y4@@3) (MapType5Select m@@47 y0@@19 y1@@15 y2@@12 y3@@8 y4@@3))) :qid |mapAx1:MapType5Select:4| :weight 0 ))) (forall ((val@@27 T@U) (m@@48 T@U) (x0@@26 T@U) (x1@@20 T@U) (x2@@16 T@U) (x3@@11 T@U) (x4@@5 T@U) (y0@@20 T@U) (y1@@16 T@U) (y2@@13 T@U) (y3@@9 T@U) (y4@@4 T@U) ) (!  (or true (= (MapType5Select (MapType5Store m@@48 x0@@26 x1@@20 x2@@16 x3@@11 x4@@5 val@@27) y0@@20 y1@@16 y2@@13 y3@@9 y4@@4) (MapType5Select m@@48 y0@@20 y1@@16 y2@@13 y3@@9 y4@@4))) :qid |mapAx2:MapType5Select| :weight 0 )))) (forall ((arg0@@212 T@U) (arg1@@102 T@U) (arg2@@58 T@U) (arg3@@37 T@U) (arg4@@24 T@U) (arg5@@13 T@U) (arg6@@4 T@U) (arg7@@1 T@U) (arg8@@1 T@U) (arg9 T@U) (arg10 T@U) ) (! (= (type (Apply4 arg0@@212 arg1@@102 arg2@@58 arg3@@37 arg4@@24 arg5@@13 arg6@@4 arg7@@1 arg8@@1 arg9 arg10)) BoxType) :qid |funType:Apply4| :pattern ( (Apply4 arg0@@212 arg1@@102 arg2@@58 arg3@@37 arg4@@24 arg5@@13 arg6@@4 arg7@@1 arg8@@1 arg9 arg10)) ))) (forall ((arg0@@213 T@U) (arg1@@103 T@U) (arg2@@59 T@U) ) (! (= (type (Handle4 arg0@@213 arg1@@103 arg2@@59)) HandleTypeType) :qid |funType:Handle4| :pattern ( (Handle4 arg0@@213 arg1@@103 arg2@@59)) ))))
(assert (forall ((t0@@72 T@U) (t1@@48 T@U) (t2@@29 T@U) (t3@@14 T@U) (t4 T@U) (heap@@21 T@U) (h@@48 T@U) (r@@26 T@U) (rd@@11 T@U) (bx0@@47 T@U) (bx1@@31 T@U) (bx2@@15 T@U) (bx3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@72) TyType) (= (type t1@@48) TyType)) (= (type t2@@29) TyType)) (= (type t3@@14) TyType)) (= (type t4) TyType)) (= (type heap@@21) (MapType0Type refType MapType1Type))) (= (type h@@48) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@26) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@11) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@47) BoxType)) (= (type bx1@@31) BoxType)) (= (type bx2@@15) BoxType)) (= (type bx3) BoxType)) (= (Apply4 t0@@72 t1@@48 t2@@29 t3@@14 t4 heap@@21 (Handle4 h@@48 r@@26 rd@@11) bx0@@47 bx1@@31 bx2@@15 bx3) (MapType5Select h@@48 heap@@21 bx0@@47 bx1@@31 bx2@@15 bx3))) :qid |unknown.0:0| :skolemid |913| :pattern ( (Apply4 t0@@72 t1@@48 t2@@29 t3@@14 t4 heap@@21 (Handle4 h@@48 r@@26 rd@@11) bx0@@47 bx1@@31 bx2@@15 bx3)) )))
(assert (forall ((t0@@73 T@U) (t1@@49 T@U) (t2@@30 T@U) (t3@@15 T@U) (t4@@0 T@U) (heap@@22 T@U) (h@@49 T@U) (r@@27 T@U) (rd@@12 T@U) (bx0@@48 T@U) (bx1@@32 T@U) (bx2@@16 T@U) (bx3@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@73) TyType) (= (type t1@@49) TyType)) (= (type t2@@30) TyType)) (= (type t3@@15) TyType)) (= (type t4@@0) TyType)) (= (type heap@@22) (MapType0Type refType MapType1Type))) (= (type h@@49) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@27) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@12) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@48) BoxType)) (= (type bx1@@32) BoxType)) (= (type bx2@@16) BoxType)) (= (type bx3@@0) BoxType)) (U_2_bool (MapType5Select r@@27 heap@@22 bx0@@48 bx1@@32 bx2@@16 bx3@@0))) (Requires4 t0@@73 t1@@49 t2@@30 t3@@15 t4@@0 heap@@22 (Handle4 h@@49 r@@27 rd@@12) bx0@@48 bx1@@32 bx2@@16 bx3@@0)) :qid |unknown.0:0| :skolemid |914| :pattern ( (Requires4 t0@@73 t1@@49 t2@@30 t3@@15 t4@@0 heap@@22 (Handle4 h@@49 r@@27 rd@@12) bx0@@48 bx1@@32 bx2@@16 bx3@@0)) )))
(assert (forall ((arg0@@214 T@U) (arg1@@104 T@U) (arg2@@60 T@U) (arg3@@38 T@U) (arg4@@25 T@U) (arg5@@14 T@U) (arg6@@5 T@U) (arg7@@2 T@U) (arg8@@2 T@U) (arg9@@0 T@U) (arg10@@0 T@U) ) (! (= (type (Reads4 arg0@@214 arg1@@104 arg2@@60 arg3@@38 arg4@@25 arg5@@14 arg6@@5 arg7@@2 arg8@@2 arg9@@0 arg10@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads4| :pattern ( (Reads4 arg0@@214 arg1@@104 arg2@@60 arg3@@38 arg4@@25 arg5@@14 arg6@@5 arg7@@2 arg8@@2 arg9@@0 arg10@@0)) )))
(assert (forall ((t0@@74 T@U) (t1@@50 T@U) (t2@@31 T@U) (t3@@16 T@U) (t4@@1 T@U) (heap@@23 T@U) (h@@50 T@U) (r@@28 T@U) (rd@@13 T@U) (bx0@@49 T@U) (bx1@@33 T@U) (bx2@@17 T@U) (bx3@@1 T@U) (bx@@69 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@74) TyType) (= (type t1@@50) TyType)) (= (type t2@@31) TyType)) (= (type t3@@16) TyType)) (= (type t4@@1) TyType)) (= (type heap@@23) (MapType0Type refType MapType1Type))) (= (type h@@50) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@28) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@13) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@49) BoxType)) (= (type bx1@@33) BoxType)) (= (type bx2@@17) BoxType)) (= (type bx3@@1) BoxType)) (= (type bx@@69) BoxType)) (and (=> (U_2_bool (MapType0Select (Reads4 t0@@74 t1@@50 t2@@31 t3@@16 t4@@1 heap@@23 (Handle4 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@69)) (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@69))) (=> (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@69)) (U_2_bool (MapType0Select (Reads4 t0@@74 t1@@50 t2@@31 t3@@16 t4@@1 heap@@23 (Handle4 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@69))))) :qid |unknown.0:0| :skolemid |915| :pattern ( (MapType0Select (Reads4 t0@@74 t1@@50 t2@@31 t3@@16 t4@@1 heap@@23 (Handle4 h@@50 r@@28 rd@@13) bx0@@49 bx1@@33 bx2@@17 bx3@@1) bx@@69)) )))
(assert (forall ((t0@@75 T@U) (t1@@51 T@U) (t2@@32 T@U) (t3@@17 T@U) (t4@@2 T@U) (h0@@24 T@U) (h1@@24 T@U) (f@@53 T@U) (bx0@@50 T@U) (bx1@@34 T@U) (bx2@@18 T@U) (bx3@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@75) TyType) (= (type t1@@51) TyType)) (= (type t2@@32) TyType)) (= (type t3@@17) TyType)) (= (type t4@@2) TyType)) (= (type h0@@24) (MapType0Type refType MapType1Type))) (= (type h1@@24) (MapType0Type refType MapType1Type))) (= (type f@@53) HandleTypeType)) (= (type bx0@@50) BoxType)) (= (type bx1@@34) BoxType)) (= (type bx2@@18) BoxType)) (= (type bx3@@2) BoxType)) (and (and (and ($HeapSucc h0@@24 h1@@24) (and ($IsGoodHeap h0@@24) ($IsGoodHeap h1@@24))) (and (and (and (and ($IsBox bx0@@50 t0@@75) ($IsBox bx1@@34 t1@@51)) ($IsBox bx2@@18 t2@@32)) ($IsBox bx3@@2 t3@@17)) ($Is f@@53 (Tclass._System.___hFunc4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2)))) (forall ((o@@78 T@U) (fld@@23 T@U) ) (! (let ((a@@110 (FieldTypeInv0 (type fld@@23)))) (=> (and (and (= (type o@@78) refType) (= (type fld@@23) (FieldType a@@110))) (and (not (= o@@78 null)) (U_2_bool (MapType0Select (Reads4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 h0@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2) ($Box o@@78))))) (= (MapType1Select (MapType0Select h0@@24 o@@78) fld@@23) (MapType1Select (MapType0Select h1@@24 o@@78) fld@@23)))) :qid |unknown.0:0| :skolemid |916| :no-pattern (type o@@78) :no-pattern (type fld@@23) :no-pattern (U_2_int o@@78) :no-pattern (U_2_bool o@@78) :no-pattern (U_2_int fld@@23) :no-pattern (U_2_bool fld@@23) )))) (= (Reads4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 h0@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2) (Reads4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 h1@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2))) :qid |unknown.0:0| :skolemid |917| :pattern ( ($HeapSucc h0@@24 h1@@24) (Reads4 t0@@75 t1@@51 t2@@32 t3@@17 t4@@2 h1@@24 f@@53 bx0@@50 bx1@@34 bx2@@18 bx3@@2)) )))
(assert (forall ((t0@@76 T@U) (t1@@52 T@U) (t2@@33 T@U) (t3@@18 T@U) (t4@@3 T@U) (h0@@25 T@U) (h1@@25 T@U) (f@@54 T@U) (bx0@@51 T@U) (bx1@@35 T@U) (bx2@@19 T@U) (bx3@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@76) TyType) (= (type t1@@52) TyType)) (= (type t2@@33) TyType)) (= (type t3@@18) TyType)) (= (type t4@@3) TyType)) (= (type h0@@25) (MapType0Type refType MapType1Type))) (= (type h1@@25) (MapType0Type refType MapType1Type))) (= (type f@@54) HandleTypeType)) (= (type bx0@@51) BoxType)) (= (type bx1@@35) BoxType)) (= (type bx2@@19) BoxType)) (= (type bx3@@3) BoxType)) (and (and (and ($HeapSucc h0@@25 h1@@25) (and ($IsGoodHeap h0@@25) ($IsGoodHeap h1@@25))) (and (and (and (and ($IsBox bx0@@51 t0@@76) ($IsBox bx1@@35 t1@@52)) ($IsBox bx2@@19 t2@@33)) ($IsBox bx3@@3 t3@@18)) ($Is f@@54 (Tclass._System.___hFunc4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3)))) (forall ((o@@79 T@U) (fld@@24 T@U) ) (! (let ((a@@111 (FieldTypeInv0 (type fld@@24)))) (=> (and (and (= (type o@@79) refType) (= (type fld@@24) (FieldType a@@111))) (and (not (= o@@79 null)) (U_2_bool (MapType0Select (Reads4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3) ($Box o@@79))))) (= (MapType1Select (MapType0Select h0@@25 o@@79) fld@@24) (MapType1Select (MapType0Select h1@@25 o@@79) fld@@24)))) :qid |unknown.0:0| :skolemid |918| :no-pattern (type o@@79) :no-pattern (type fld@@24) :no-pattern (U_2_int o@@79) :no-pattern (U_2_bool o@@79) :no-pattern (U_2_int fld@@24) :no-pattern (U_2_bool fld@@24) )))) (= (Reads4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 h0@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3) (Reads4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3))) :qid |unknown.0:0| :skolemid |919| :pattern ( ($HeapSucc h0@@25 h1@@25) (Reads4 t0@@76 t1@@52 t2@@33 t3@@18 t4@@3 h1@@25 f@@54 bx0@@51 bx1@@35 bx2@@19 bx3@@3)) )))
(assert (forall ((t0@@77 T@U) (t1@@53 T@U) (t2@@34 T@U) (t3@@19 T@U) (t4@@4 T@U) (h0@@26 T@U) (h1@@26 T@U) (f@@55 T@U) (bx0@@52 T@U) (bx1@@36 T@U) (bx2@@20 T@U) (bx3@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@77) TyType) (= (type t1@@53) TyType)) (= (type t2@@34) TyType)) (= (type t3@@19) TyType)) (= (type t4@@4) TyType)) (= (type h0@@26) (MapType0Type refType MapType1Type))) (= (type h1@@26) (MapType0Type refType MapType1Type))) (= (type f@@55) HandleTypeType)) (= (type bx0@@52) BoxType)) (= (type bx1@@36) BoxType)) (= (type bx2@@20) BoxType)) (= (type bx3@@4) BoxType)) (and (and (and ($HeapSucc h0@@26 h1@@26) (and ($IsGoodHeap h0@@26) ($IsGoodHeap h1@@26))) (and (and (and (and ($IsBox bx0@@52 t0@@77) ($IsBox bx1@@36 t1@@53)) ($IsBox bx2@@20 t2@@34)) ($IsBox bx3@@4 t3@@19)) ($Is f@@55 (Tclass._System.___hFunc4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4)))) (forall ((o@@80 T@U) (fld@@25 T@U) ) (! (let ((a@@112 (FieldTypeInv0 (type fld@@25)))) (=> (and (and (= (type o@@80) refType) (= (type fld@@25) (FieldType a@@112))) (and (not (= o@@80 null)) (U_2_bool (MapType0Select (Reads4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4) ($Box o@@80))))) (= (MapType1Select (MapType0Select h0@@26 o@@80) fld@@25) (MapType1Select (MapType0Select h1@@26 o@@80) fld@@25)))) :qid |unknown.0:0| :skolemid |920| :no-pattern (type o@@80) :no-pattern (type fld@@25) :no-pattern (U_2_int o@@80) :no-pattern (U_2_bool o@@80) :no-pattern (U_2_int fld@@25) :no-pattern (U_2_bool fld@@25) )))) (and (=> (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4) (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4)) (=> (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4) (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h0@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4)))) :qid |unknown.0:0| :skolemid |921| :pattern ( ($HeapSucc h0@@26 h1@@26) (Requires4 t0@@77 t1@@53 t2@@34 t3@@19 t4@@4 h1@@26 f@@55 bx0@@52 bx1@@36 bx2@@20 bx3@@4)) )))
(assert (forall ((t0@@78 T@U) (t1@@54 T@U) (t2@@35 T@U) (t3@@20 T@U) (t4@@5 T@U) (h0@@27 T@U) (h1@@27 T@U) (f@@56 T@U) (bx0@@53 T@U) (bx1@@37 T@U) (bx2@@21 T@U) (bx3@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@78) TyType) (= (type t1@@54) TyType)) (= (type t2@@35) TyType)) (= (type t3@@20) TyType)) (= (type t4@@5) TyType)) (= (type h0@@27) (MapType0Type refType MapType1Type))) (= (type h1@@27) (MapType0Type refType MapType1Type))) (= (type f@@56) HandleTypeType)) (= (type bx0@@53) BoxType)) (= (type bx1@@37) BoxType)) (= (type bx2@@21) BoxType)) (= (type bx3@@5) BoxType)) (and (and (and ($HeapSucc h0@@27 h1@@27) (and ($IsGoodHeap h0@@27) ($IsGoodHeap h1@@27))) (and (and (and (and ($IsBox bx0@@53 t0@@78) ($IsBox bx1@@37 t1@@54)) ($IsBox bx2@@21 t2@@35)) ($IsBox bx3@@5 t3@@20)) ($Is f@@56 (Tclass._System.___hFunc4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5)))) (forall ((o@@81 T@U) (fld@@26 T@U) ) (! (let ((a@@113 (FieldTypeInv0 (type fld@@26)))) (=> (and (and (= (type o@@81) refType) (= (type fld@@26) (FieldType a@@113))) (and (not (= o@@81 null)) (U_2_bool (MapType0Select (Reads4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5) ($Box o@@81))))) (= (MapType1Select (MapType0Select h0@@27 o@@81) fld@@26) (MapType1Select (MapType0Select h1@@27 o@@81) fld@@26)))) :qid |unknown.0:0| :skolemid |922| :no-pattern (type o@@81) :no-pattern (type fld@@26) :no-pattern (U_2_int o@@81) :no-pattern (U_2_bool o@@81) :no-pattern (U_2_int fld@@26) :no-pattern (U_2_bool fld@@26) )))) (and (=> (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h0@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5) (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5)) (=> (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5) (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h0@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5)))) :qid |unknown.0:0| :skolemid |923| :pattern ( ($HeapSucc h0@@27 h1@@27) (Requires4 t0@@78 t1@@54 t2@@35 t3@@20 t4@@5 h1@@27 f@@56 bx0@@53 bx1@@37 bx2@@21 bx3@@5)) )))
(assert (forall ((t0@@79 T@U) (t1@@55 T@U) (t2@@36 T@U) (t3@@21 T@U) (t4@@6 T@U) (h0@@28 T@U) (h1@@28 T@U) (f@@57 T@U) (bx0@@54 T@U) (bx1@@38 T@U) (bx2@@22 T@U) (bx3@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@79) TyType) (= (type t1@@55) TyType)) (= (type t2@@36) TyType)) (= (type t3@@21) TyType)) (= (type t4@@6) TyType)) (= (type h0@@28) (MapType0Type refType MapType1Type))) (= (type h1@@28) (MapType0Type refType MapType1Type))) (= (type f@@57) HandleTypeType)) (= (type bx0@@54) BoxType)) (= (type bx1@@38) BoxType)) (= (type bx2@@22) BoxType)) (= (type bx3@@6) BoxType)) (and (and (and ($HeapSucc h0@@28 h1@@28) (and ($IsGoodHeap h0@@28) ($IsGoodHeap h1@@28))) (and (and (and (and ($IsBox bx0@@54 t0@@79) ($IsBox bx1@@38 t1@@55)) ($IsBox bx2@@22 t2@@36)) ($IsBox bx3@@6 t3@@21)) ($Is f@@57 (Tclass._System.___hFunc4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6)))) (forall ((o@@82 T@U) (fld@@27 T@U) ) (! (let ((a@@114 (FieldTypeInv0 (type fld@@27)))) (=> (and (and (= (type o@@82) refType) (= (type fld@@27) (FieldType a@@114))) (and (not (= o@@82 null)) (U_2_bool (MapType0Select (Reads4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 h0@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6) ($Box o@@82))))) (= (MapType1Select (MapType0Select h0@@28 o@@82) fld@@27) (MapType1Select (MapType0Select h1@@28 o@@82) fld@@27)))) :qid |unknown.0:0| :skolemid |924| :no-pattern (type o@@82) :no-pattern (type fld@@27) :no-pattern (U_2_int o@@82) :no-pattern (U_2_bool o@@82) :no-pattern (U_2_int fld@@27) :no-pattern (U_2_bool fld@@27) )))) (= (Apply4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 h0@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6) (Apply4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 h1@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6))) :qid |unknown.0:0| :skolemid |925| :pattern ( ($HeapSucc h0@@28 h1@@28) (Apply4 t0@@79 t1@@55 t2@@36 t3@@21 t4@@6 h1@@28 f@@57 bx0@@54 bx1@@38 bx2@@22 bx3@@6)) )))
(assert (forall ((t0@@80 T@U) (t1@@56 T@U) (t2@@37 T@U) (t3@@22 T@U) (t4@@7 T@U) (h0@@29 T@U) (h1@@29 T@U) (f@@58 T@U) (bx0@@55 T@U) (bx1@@39 T@U) (bx2@@23 T@U) (bx3@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@80) TyType) (= (type t1@@56) TyType)) (= (type t2@@37) TyType)) (= (type t3@@22) TyType)) (= (type t4@@7) TyType)) (= (type h0@@29) (MapType0Type refType MapType1Type))) (= (type h1@@29) (MapType0Type refType MapType1Type))) (= (type f@@58) HandleTypeType)) (= (type bx0@@55) BoxType)) (= (type bx1@@39) BoxType)) (= (type bx2@@23) BoxType)) (= (type bx3@@7) BoxType)) (and (and (and ($HeapSucc h0@@29 h1@@29) (and ($IsGoodHeap h0@@29) ($IsGoodHeap h1@@29))) (and (and (and (and ($IsBox bx0@@55 t0@@80) ($IsBox bx1@@39 t1@@56)) ($IsBox bx2@@23 t2@@37)) ($IsBox bx3@@7 t3@@22)) ($Is f@@58 (Tclass._System.___hFunc4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7)))) (forall ((o@@83 T@U) (fld@@28 T@U) ) (! (let ((a@@115 (FieldTypeInv0 (type fld@@28)))) (=> (and (and (= (type o@@83) refType) (= (type fld@@28) (FieldType a@@115))) (and (not (= o@@83 null)) (U_2_bool (MapType0Select (Reads4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7) ($Box o@@83))))) (= (MapType1Select (MapType0Select h0@@29 o@@83) fld@@28) (MapType1Select (MapType0Select h1@@29 o@@83) fld@@28)))) :qid |unknown.0:0| :skolemid |926| :no-pattern (type o@@83) :no-pattern (type fld@@28) :no-pattern (U_2_int o@@83) :no-pattern (U_2_bool o@@83) :no-pattern (U_2_int fld@@28) :no-pattern (U_2_bool fld@@28) )))) (= (Apply4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 h0@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7) (Apply4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7))) :qid |unknown.0:0| :skolemid |927| :pattern ( ($HeapSucc h0@@29 h1@@29) (Apply4 t0@@80 t1@@56 t2@@37 t3@@22 t4@@7 h1@@29 f@@58 bx0@@55 bx1@@39 bx2@@23 bx3@@7)) )))
(assert (forall ((t0@@81 T@U) (t1@@57 T@U) (t2@@38 T@U) (t3@@23 T@U) (t4@@8 T@U) (heap@@24 T@U) (f@@59 T@U) (bx0@@56 T@U) (bx1@@40 T@U) (bx2@@24 T@U) (bx3@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@81) TyType) (= (type t1@@57) TyType)) (= (type t2@@38) TyType)) (= (type t3@@23) TyType)) (= (type t4@@8) TyType)) (= (type heap@@24) (MapType0Type refType MapType1Type))) (= (type f@@59) HandleTypeType)) (= (type bx0@@56) BoxType)) (= (type bx1@@40) BoxType)) (= (type bx2@@24) BoxType)) (= (type bx3@@8) BoxType)) (and ($IsGoodHeap heap@@24) (and (and (and (and ($IsBox bx0@@56 t0@@81) ($IsBox bx1@@40 t1@@57)) ($IsBox bx2@@24 t2@@38)) ($IsBox bx3@@8 t3@@23)) ($Is f@@59 (Tclass._System.___hFunc4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8))))) (and (=> (|Set#Equal| (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) (|Set#Empty| BoxType))) (=> (|Set#Equal| (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |928| :pattern ( (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 $OneHeap f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8) ($IsGoodHeap heap@@24)) :pattern ( (Reads4 t0@@81 t1@@57 t2@@38 t3@@23 t4@@8 heap@@24 f@@59 bx0@@56 bx1@@40 bx2@@24 bx3@@8)) )))
(assert (forall ((t0@@82 T@U) (t1@@58 T@U) (t2@@39 T@U) (t3@@24 T@U) (t4@@9 T@U) (heap@@25 T@U) (f@@60 T@U) (bx0@@57 T@U) (bx1@@41 T@U) (bx2@@25 T@U) (bx3@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@82) TyType) (= (type t1@@58) TyType)) (= (type t2@@39) TyType)) (= (type t3@@24) TyType)) (= (type t4@@9) TyType)) (= (type heap@@25) (MapType0Type refType MapType1Type))) (= (type f@@60) HandleTypeType)) (= (type bx0@@57) BoxType)) (= (type bx1@@41) BoxType)) (= (type bx2@@25) BoxType)) (= (type bx3@@9) BoxType)) (and (and ($IsGoodHeap heap@@25) (and (and (and (and ($IsBox bx0@@57 t0@@82) ($IsBox bx1@@41 t1@@58)) ($IsBox bx2@@25 t2@@39)) ($IsBox bx3@@9 t3@@24)) ($Is f@@60 (Tclass._System.___hFunc4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9)))) (|Set#Equal| (Reads4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9) (|Set#Empty| BoxType)))) (and (=> (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9) (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9)) (=> (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9) (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9)))) :qid |unknown.0:0| :skolemid |929| :pattern ( (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 $OneHeap f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9) ($IsGoodHeap heap@@25)) :pattern ( (Requires4 t0@@82 t1@@58 t2@@39 t3@@24 t4@@9 heap@@25 f@@60 bx0@@57 bx1@@41 bx2@@25 bx3@@9)) )))
(assert (forall ((f@@61 T@U) (t0@@83 T@U) (t1@@59 T@U) (t2@@40 T@U) (t3@@25 T@U) (t4@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@61) HandleTypeType) (= (type t0@@83) TyType)) (= (type t1@@59) TyType)) (= (type t2@@40) TyType)) (= (type t3@@25) TyType)) (= (type t4@@10) TyType)) (and (=> ($Is f@@61 (Tclass._System.___hFunc4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10)) (forall ((h@@51 T@U) (bx0@@58 T@U) (bx1@@42 T@U) (bx2@@26 T@U) (bx3@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@51) (MapType0Type refType MapType1Type)) (= (type bx0@@58) BoxType)) (= (type bx1@@42) BoxType)) (= (type bx2@@26) BoxType)) (= (type bx3@@10) BoxType)) (and (and ($IsGoodHeap h@@51) (and (and (and ($IsBox bx0@@58 t0@@83) ($IsBox bx1@@42 t1@@59)) ($IsBox bx2@@26 t2@@40)) ($IsBox bx3@@10 t3@@25))) (Requires4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26 bx3@@10))) ($IsBox (Apply4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26 bx3@@10) t4@@10)) :qid |DafnyPre.521:12| :skolemid |930| :pattern ( (Apply4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@51 f@@61 bx0@@58 bx1@@42 bx2@@26 bx3@@10)) ))) (=> (forall ((h@@52 T@U) (bx0@@59 T@U) (bx1@@43 T@U) (bx2@@27 T@U) (bx3@@11 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@52) (MapType0Type refType MapType1Type)) (= (type bx0@@59) BoxType)) (= (type bx1@@43) BoxType)) (= (type bx2@@27) BoxType)) (= (type bx3@@11) BoxType)) (and (and ($IsGoodHeap h@@52) (and (and (and ($IsBox bx0@@59 t0@@83) ($IsBox bx1@@43 t1@@59)) ($IsBox bx2@@27 t2@@40)) ($IsBox bx3@@11 t3@@25))) (Requires4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27 bx3@@11))) ($IsBox (Apply4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27 bx3@@11) t4@@10)) :qid |DafnyPre.521:12| :skolemid |930| :pattern ( (Apply4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10 h@@52 f@@61 bx0@@59 bx1@@43 bx2@@27 bx3@@11)) )) ($Is f@@61 (Tclass._System.___hFunc4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10))))) :qid |unknown.0:0| :skolemid |931| :pattern ( ($Is f@@61 (Tclass._System.___hFunc4 t0@@83 t1@@59 t2@@40 t3@@25 t4@@10))) )))
(assert (forall ((f@@62 T@U) (t0@@84 T@U) (t1@@60 T@U) (t2@@41 T@U) (t3@@26 T@U) (t4@@11 T@U) (u0@@3 T@U) (u1@@2 T@U) (u2@@1 T@U) (u3@@0 T@U) (u4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type f@@62) HandleTypeType) (= (type t0@@84) TyType)) (= (type t1@@60) TyType)) (= (type t2@@41) TyType)) (= (type t3@@26) TyType)) (= (type t4@@11) TyType)) (= (type u0@@3) TyType)) (= (type u1@@2) TyType)) (= (type u2@@1) TyType)) (= (type u3@@0) TyType)) (= (type u4) TyType)) (and (and (and (and (and ($Is f@@62 (Tclass._System.___hFunc4 t0@@84 t1@@60 t2@@41 t3@@26 t4@@11)) (forall ((bx@@70 T@U) ) (!  (=> (and (= (type bx@@70) BoxType) ($IsBox bx@@70 u0@@3)) ($IsBox bx@@70 t0@@84)) :qid |unknown.0:0| :skolemid |932| :pattern ( ($IsBox bx@@70 u0@@3)) :pattern ( ($IsBox bx@@70 t0@@84)) ))) (forall ((bx@@71 T@U) ) (!  (=> (and (= (type bx@@71) BoxType) ($IsBox bx@@71 u1@@2)) ($IsBox bx@@71 t1@@60)) :qid |unknown.0:0| :skolemid |933| :pattern ( ($IsBox bx@@71 u1@@2)) :pattern ( ($IsBox bx@@71 t1@@60)) ))) (forall ((bx@@72 T@U) ) (!  (=> (and (= (type bx@@72) BoxType) ($IsBox bx@@72 u2@@1)) ($IsBox bx@@72 t2@@41)) :qid |unknown.0:0| :skolemid |934| :pattern ( ($IsBox bx@@72 u2@@1)) :pattern ( ($IsBox bx@@72 t2@@41)) ))) (forall ((bx@@73 T@U) ) (!  (=> (and (= (type bx@@73) BoxType) ($IsBox bx@@73 u3@@0)) ($IsBox bx@@73 t3@@26)) :qid |unknown.0:0| :skolemid |935| :pattern ( ($IsBox bx@@73 u3@@0)) :pattern ( ($IsBox bx@@73 t3@@26)) ))) (forall ((bx@@74 T@U) ) (!  (=> (and (= (type bx@@74) BoxType) ($IsBox bx@@74 t4@@11)) ($IsBox bx@@74 u4)) :qid |unknown.0:0| :skolemid |936| :pattern ( ($IsBox bx@@74 t4@@11)) :pattern ( ($IsBox bx@@74 u4)) )))) ($Is f@@62 (Tclass._System.___hFunc4 u0@@3 u1@@2 u2@@1 u3@@0 u4))) :qid |unknown.0:0| :skolemid |937| :pattern ( ($Is f@@62 (Tclass._System.___hFunc4 t0@@84 t1@@60 t2@@41 t3@@26 t4@@11)) ($Is f@@62 (Tclass._System.___hFunc4 u0@@3 u1@@2 u2@@1 u3@@0 u4))) )))
(assert (forall ((f@@63 T@U) (t0@@85 T@U) (t1@@61 T@U) (t2@@42 T@U) (t3@@27 T@U) (t4@@12 T@U) (h@@53 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@63) HandleTypeType) (= (type t0@@85) TyType)) (= (type t1@@61) TyType)) (= (type t2@@42) TyType)) (= (type t3@@27) TyType)) (= (type t4@@12) TyType)) (= (type h@@53) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@53)) (and (=> ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12) h@@53) (forall ((bx0@@60 T@U) (bx1@@44 T@U) (bx2@@28 T@U) (bx3@@12 T@U) ) (!  (=> (and (and (and (= (type bx0@@60) BoxType) (= (type bx1@@44) BoxType)) (= (type bx2@@28) BoxType)) (= (type bx3@@12) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@60 t0@@85) ($IsAllocBox bx0@@60 t0@@85 h@@53)) (and ($IsBox bx1@@44 t1@@61) ($IsAllocBox bx1@@44 t1@@61 h@@53))) (and ($IsBox bx2@@28 t2@@42) ($IsAllocBox bx2@@28 t2@@42 h@@53))) (and ($IsBox bx3@@12 t3@@27) ($IsAllocBox bx3@@12 t3@@27 h@@53))) (Requires4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12)) (forall ((r@@29 T@U) ) (!  (=> (= (type r@@29) refType) (=> (and (not (= r@@29 null)) (U_2_bool (MapType0Select (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12) ($Box r@@29)))) (U_2_bool (MapType1Select (MapType0Select h@@53 r@@29) alloc)))) :qid |unknown.0:0| :skolemid |938| :pattern ( (MapType0Select (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12) ($Box r@@29))) )))) :qid |unknown.0:0| :skolemid |939| :pattern ( (Apply4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12)) :pattern ( (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@60 bx1@@44 bx2@@28 bx3@@12)) ))) (=> (forall ((bx0@@61 T@U) (bx1@@45 T@U) (bx2@@29 T@U) (bx3@@13 T@U) ) (!  (=> (and (and (and (= (type bx0@@61) BoxType) (= (type bx1@@45) BoxType)) (= (type bx2@@29) BoxType)) (= (type bx3@@13) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@61 t0@@85) ($IsAllocBox bx0@@61 t0@@85 h@@53)) (and ($IsBox bx1@@45 t1@@61) ($IsAllocBox bx1@@45 t1@@61 h@@53))) (and ($IsBox bx2@@29 t2@@42) ($IsAllocBox bx2@@29 t2@@42 h@@53))) (and ($IsBox bx3@@13 t3@@27) ($IsAllocBox bx3@@13 t3@@27 h@@53))) (Requires4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13)) (forall ((r@@30 T@U) ) (!  (=> (= (type r@@30) refType) (=> (and (not (= r@@30 null)) (U_2_bool (MapType0Select (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13) ($Box r@@30)))) (U_2_bool (MapType1Select (MapType0Select h@@53 r@@30) alloc)))) :qid |unknown.0:0| :skolemid |938| :pattern ( (MapType0Select (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13) ($Box r@@30))) )))) :qid |unknown.0:0| :skolemid |939| :pattern ( (Apply4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13)) :pattern ( (Reads4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12 h@@53 f@@63 bx0@@61 bx1@@45 bx2@@29 bx3@@13)) )) ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12) h@@53)))) :qid |unknown.0:0| :skolemid |940| :pattern ( ($IsAlloc f@@63 (Tclass._System.___hFunc4 t0@@85 t1@@61 t2@@42 t3@@27 t4@@12) h@@53)) )))
(assert (forall ((f@@64 T@U) (t0@@86 T@U) (t1@@62 T@U) (t2@@43 T@U) (t3@@28 T@U) (t4@@13 T@U) (h@@54 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@64) HandleTypeType) (= (type t0@@86) TyType)) (= (type t1@@62) TyType)) (= (type t2@@43) TyType)) (= (type t3@@28) TyType)) (= (type t4@@13) TyType)) (= (type h@@54) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@54) ($IsAlloc f@@64 (Tclass._System.___hFunc4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13) h@@54))) (forall ((bx0@@62 T@U) (bx1@@46 T@U) (bx2@@30 T@U) (bx3@@14 T@U) ) (!  (=> (and (and (and (= (type bx0@@62) BoxType) (= (type bx1@@46) BoxType)) (= (type bx2@@30) BoxType)) (= (type bx3@@14) BoxType)) (=> (and (and (and (and ($IsAllocBox bx0@@62 t0@@86 h@@54) ($IsAllocBox bx1@@46 t1@@62 h@@54)) ($IsAllocBox bx2@@30 t2@@43 h@@54)) ($IsAllocBox bx3@@14 t3@@28 h@@54)) (Requires4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30 bx3@@14)) ($IsAllocBox (Apply4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30 bx3@@14) t4@@13 h@@54))) :qid |unknown.0:0| :skolemid |941| :pattern ( (Apply4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13 h@@54 f@@64 bx0@@62 bx1@@46 bx2@@30 bx3@@14)) ))) :qid |unknown.0:0| :skolemid |942| :pattern ( ($IsAlloc f@@64 (Tclass._System.___hFunc4 t0@@86 t1@@62 t2@@43 t3@@28 t4@@13) h@@54)) )))
(assert (forall ((arg0@@215 T@U) (arg1@@105 T@U) (arg2@@61 T@U) (arg3@@39 T@U) (arg4@@26 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4 arg0@@215 arg1@@105 arg2@@61 arg3@@39 arg4@@26)) TyType) :qid |funType:Tclass._System.___hPartialFunc4| :pattern ( (Tclass._System.___hPartialFunc4 arg0@@215 arg1@@105 arg2@@61 arg3@@39 arg4@@26)) )))
(assert (forall ((|#$T0@@85| T@U) (|#$T1@@69| T@U) (|#$T2@@41| T@U) (|#$T3@@19| T@U) (|#$R@@76| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@85|) TyType) (= (type |#$T1@@69|) TyType)) (= (type |#$T2@@41|) TyType)) (= (type |#$T3@@19|) TyType)) (= (type |#$R@@76|) TyType)) (= (Tag (Tclass._System.___hPartialFunc4 |#$T0@@85| |#$T1@@69| |#$T2@@41| |#$T3@@19| |#$R@@76|)) Tagclass._System.___hPartialFunc4)) :qid |unknown.0:0| :skolemid |943| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@85| |#$T1@@69| |#$T2@@41| |#$T3@@19| |#$R@@76|)) )))
(assert (forall ((arg0@@216 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_0 arg0@@216)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_0| :pattern ( (Tclass._System.___hPartialFunc4_0 arg0@@216)) )))
(assert (forall ((|#$T0@@86| T@U) (|#$T1@@70| T@U) (|#$T2@@42| T@U) (|#$T3@@20| T@U) (|#$R@@77| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@86|) TyType) (= (type |#$T1@@70|) TyType)) (= (type |#$T2@@42|) TyType)) (= (type |#$T3@@20|) TyType)) (= (type |#$R@@77|) TyType)) (= (Tclass._System.___hPartialFunc4_0 (Tclass._System.___hPartialFunc4 |#$T0@@86| |#$T1@@70| |#$T2@@42| |#$T3@@20| |#$R@@77|)) |#$T0@@86|)) :qid |unknown.0:0| :skolemid |944| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@86| |#$T1@@70| |#$T2@@42| |#$T3@@20| |#$R@@77|)) )))
(assert (forall ((arg0@@217 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_1 arg0@@217)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_1| :pattern ( (Tclass._System.___hPartialFunc4_1 arg0@@217)) )))
(assert (forall ((|#$T0@@87| T@U) (|#$T1@@71| T@U) (|#$T2@@43| T@U) (|#$T3@@21| T@U) (|#$R@@78| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@87|) TyType) (= (type |#$T1@@71|) TyType)) (= (type |#$T2@@43|) TyType)) (= (type |#$T3@@21|) TyType)) (= (type |#$R@@78|) TyType)) (= (Tclass._System.___hPartialFunc4_1 (Tclass._System.___hPartialFunc4 |#$T0@@87| |#$T1@@71| |#$T2@@43| |#$T3@@21| |#$R@@78|)) |#$T1@@71|)) :qid |unknown.0:0| :skolemid |945| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@87| |#$T1@@71| |#$T2@@43| |#$T3@@21| |#$R@@78|)) )))
(assert (forall ((arg0@@218 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_2 arg0@@218)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_2| :pattern ( (Tclass._System.___hPartialFunc4_2 arg0@@218)) )))
(assert (forall ((|#$T0@@88| T@U) (|#$T1@@72| T@U) (|#$T2@@44| T@U) (|#$T3@@22| T@U) (|#$R@@79| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@88|) TyType) (= (type |#$T1@@72|) TyType)) (= (type |#$T2@@44|) TyType)) (= (type |#$T3@@22|) TyType)) (= (type |#$R@@79|) TyType)) (= (Tclass._System.___hPartialFunc4_2 (Tclass._System.___hPartialFunc4 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$T3@@22| |#$R@@79|)) |#$T2@@44|)) :qid |unknown.0:0| :skolemid |946| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@88| |#$T1@@72| |#$T2@@44| |#$T3@@22| |#$R@@79|)) )))
(assert (forall ((arg0@@219 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_3 arg0@@219)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_3| :pattern ( (Tclass._System.___hPartialFunc4_3 arg0@@219)) )))
(assert (forall ((|#$T0@@89| T@U) (|#$T1@@73| T@U) (|#$T2@@45| T@U) (|#$T3@@23| T@U) (|#$R@@80| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@89|) TyType) (= (type |#$T1@@73|) TyType)) (= (type |#$T2@@45|) TyType)) (= (type |#$T3@@23|) TyType)) (= (type |#$R@@80|) TyType)) (= (Tclass._System.___hPartialFunc4_3 (Tclass._System.___hPartialFunc4 |#$T0@@89| |#$T1@@73| |#$T2@@45| |#$T3@@23| |#$R@@80|)) |#$T3@@23|)) :qid |unknown.0:0| :skolemid |947| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@89| |#$T1@@73| |#$T2@@45| |#$T3@@23| |#$R@@80|)) )))
(assert (forall ((arg0@@220 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_4 arg0@@220)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_4| :pattern ( (Tclass._System.___hPartialFunc4_4 arg0@@220)) )))
(assert (forall ((|#$T0@@90| T@U) (|#$T1@@74| T@U) (|#$T2@@46| T@U) (|#$T3@@24| T@U) (|#$R@@81| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@90|) TyType) (= (type |#$T1@@74|) TyType)) (= (type |#$T2@@46|) TyType)) (= (type |#$T3@@24|) TyType)) (= (type |#$R@@81|) TyType)) (= (Tclass._System.___hPartialFunc4_4 (Tclass._System.___hPartialFunc4 |#$T0@@90| |#$T1@@74| |#$T2@@46| |#$T3@@24| |#$R@@81|)) |#$R@@81|)) :qid |unknown.0:0| :skolemid |948| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@90| |#$T1@@74| |#$T2@@46| |#$T3@@24| |#$R@@81|)) )))
(assert (forall ((|#$T0@@91| T@U) (|#$T1@@75| T@U) (|#$T2@@47| T@U) (|#$T3@@25| T@U) (|#$R@@82| T@U) (bx@@75 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@91|) TyType) (= (type |#$T1@@75|) TyType)) (= (type |#$T2@@47|) TyType)) (= (type |#$T3@@25|) TyType)) (= (type |#$R@@82|) TyType)) (= (type bx@@75) BoxType)) ($IsBox bx@@75 (Tclass._System.___hPartialFunc4 |#$T0@@91| |#$T1@@75| |#$T2@@47| |#$T3@@25| |#$R@@82|))) (and (= ($Box ($Unbox HandleTypeType bx@@75)) bx@@75) ($Is ($Unbox HandleTypeType bx@@75) (Tclass._System.___hPartialFunc4 |#$T0@@91| |#$T1@@75| |#$T2@@47| |#$T3@@25| |#$R@@82|)))) :qid |unknown.0:0| :skolemid |949| :pattern ( ($IsBox bx@@75 (Tclass._System.___hPartialFunc4 |#$T0@@91| |#$T1@@75| |#$T2@@47| |#$T3@@25| |#$R@@82|))) )))
(assert (forall ((|#$T0@@92| T@U) (|#$T1@@76| T@U) (|#$T2@@48| T@U) (|#$T3@@26| T@U) (|#$R@@83| T@U) (|f#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@92|) TyType) (= (type |#$T1@@76|) TyType)) (= (type |#$T2@@48|) TyType)) (= (type |#$T3@@26|) TyType)) (= (type |#$R@@83|) TyType)) (= (type |f#0@@15|) HandleTypeType)) (and (=> ($Is |f#0@@15| (Tclass._System.___hPartialFunc4 |#$T0@@92| |#$T1@@76| |#$T2@@48| |#$T3@@26| |#$R@@83|)) (and ($Is |f#0@@15| (Tclass._System.___hFunc4 |#$T0@@92| |#$T1@@76| |#$T2@@48| |#$T3@@26| |#$R@@83|)) (forall ((|x0#0@@11| T@U) (|x1#0@@7| T@U) (|x2#0@@3| T@U) (|x3#0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@11|) BoxType) (= (type |x1#0@@7|) BoxType)) (= (type |x2#0@@3|) BoxType)) (= (type |x3#0|) BoxType)) (and (and (and ($IsBox |x0#0@@11| |#$T0@@92|) ($IsBox |x1#0@@7| |#$T1@@76|)) ($IsBox |x2#0@@3| |#$T2@@48|)) ($IsBox |x3#0| |#$T3@@26|))) (|Set#Equal| (Reads4 |#$T0@@92| |#$T1@@76| |#$T2@@48| |#$T3@@26| |#$R@@83| $OneHeap |f#0@@15| |x0#0@@11| |x1#0@@7| |x2#0@@3| |x3#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |950| :no-pattern (type |x0#0@@11|) :no-pattern (type |x1#0@@7|) :no-pattern (type |x2#0@@3|) :no-pattern (type |x3#0|) :no-pattern (U_2_int |x0#0@@11|) :no-pattern (U_2_bool |x0#0@@11|) :no-pattern (U_2_int |x1#0@@7|) :no-pattern (U_2_bool |x1#0@@7|) :no-pattern (U_2_int |x2#0@@3|) :no-pattern (U_2_bool |x2#0@@3|) :no-pattern (U_2_int |x3#0|) :no-pattern (U_2_bool |x3#0|) )))) (=> (and ($Is |f#0@@15| (Tclass._System.___hFunc4 |#$T0@@92| |#$T1@@76| |#$T2@@48| |#$T3@@26| |#$R@@83|)) (forall ((|x0#0@@12| T@U) (|x1#0@@8| T@U) (|x2#0@@4| T@U) (|x3#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@12|) BoxType) (= (type |x1#0@@8|) BoxType)) (= (type |x2#0@@4|) BoxType)) (= (type |x3#0@@0|) BoxType)) (and (and (and ($IsBox |x0#0@@12| |#$T0@@92|) ($IsBox |x1#0@@8| |#$T1@@76|)) ($IsBox |x2#0@@4| |#$T2@@48|)) ($IsBox |x3#0@@0| |#$T3@@26|))) (|Set#Equal| (Reads4 |#$T0@@92| |#$T1@@76| |#$T2@@48| |#$T3@@26| |#$R@@83| $OneHeap |f#0@@15| |x0#0@@12| |x1#0@@8| |x2#0@@4| |x3#0@@0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |950| :no-pattern (type |x0#0@@12|) :no-pattern (type |x1#0@@8|) :no-pattern (type |x2#0@@4|) :no-pattern (type |x3#0@@0|) :no-pattern (U_2_int |x0#0@@12|) :no-pattern (U_2_bool |x0#0@@12|) :no-pattern (U_2_int |x1#0@@8|) :no-pattern (U_2_bool |x1#0@@8|) :no-pattern (U_2_int |x2#0@@4|) :no-pattern (U_2_bool |x2#0@@4|) :no-pattern (U_2_int |x3#0@@0|) :no-pattern (U_2_bool |x3#0@@0|) ))) ($Is |f#0@@15| (Tclass._System.___hPartialFunc4 |#$T0@@92| |#$T1@@76| |#$T2@@48| |#$T3@@26| |#$R@@83|))))) :qid |unknown.0:0| :skolemid |951| :pattern ( ($Is |f#0@@15| (Tclass._System.___hPartialFunc4 |#$T0@@92| |#$T1@@76| |#$T2@@48| |#$T3@@26| |#$R@@83|))) )))
(assert (forall ((|#$T0@@93| T@U) (|#$T1@@77| T@U) (|#$T2@@49| T@U) (|#$T3@@27| T@U) (|#$R@@84| T@U) (|f#0@@16| T@U) ($h@@24 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@93|) TyType) (= (type |#$T1@@77|) TyType)) (= (type |#$T2@@49|) TyType)) (= (type |#$T3@@27|) TyType)) (= (type |#$R@@84|) TyType)) (= (type |f#0@@16|) HandleTypeType)) (= (type $h@@24) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc4 |#$T0@@93| |#$T1@@77| |#$T2@@49| |#$T3@@27| |#$R@@84|) $h@@24) ($IsAlloc |f#0@@16| (Tclass._System.___hFunc4 |#$T0@@93| |#$T1@@77| |#$T2@@49| |#$T3@@27| |#$R@@84|) $h@@24)) (=> ($IsAlloc |f#0@@16| (Tclass._System.___hFunc4 |#$T0@@93| |#$T1@@77| |#$T2@@49| |#$T3@@27| |#$R@@84|) $h@@24) ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc4 |#$T0@@93| |#$T1@@77| |#$T2@@49| |#$T3@@27| |#$R@@84|) $h@@24)))) :qid |unknown.0:0| :skolemid |952| :pattern ( ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc4 |#$T0@@93| |#$T1@@77| |#$T2@@49| |#$T3@@27| |#$R@@84|) $h@@24)) )))
(assert (forall ((arg0@@221 T@U) (arg1@@106 T@U) (arg2@@62 T@U) (arg3@@40 T@U) (arg4@@27 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4 arg0@@221 arg1@@106 arg2@@62 arg3@@40 arg4@@27)) TyType) :qid |funType:Tclass._System.___hTotalFunc4| :pattern ( (Tclass._System.___hTotalFunc4 arg0@@221 arg1@@106 arg2@@62 arg3@@40 arg4@@27)) )))
(assert (forall ((|#$T0@@94| T@U) (|#$T1@@78| T@U) (|#$T2@@50| T@U) (|#$T3@@28| T@U) (|#$R@@85| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@94|) TyType) (= (type |#$T1@@78|) TyType)) (= (type |#$T2@@50|) TyType)) (= (type |#$T3@@28|) TyType)) (= (type |#$R@@85|) TyType)) (= (Tag (Tclass._System.___hTotalFunc4 |#$T0@@94| |#$T1@@78| |#$T2@@50| |#$T3@@28| |#$R@@85|)) Tagclass._System.___hTotalFunc4)) :qid |unknown.0:0| :skolemid |953| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@94| |#$T1@@78| |#$T2@@50| |#$T3@@28| |#$R@@85|)) )))
(assert (forall ((arg0@@222 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_0 arg0@@222)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_0| :pattern ( (Tclass._System.___hTotalFunc4_0 arg0@@222)) )))
(assert (forall ((|#$T0@@95| T@U) (|#$T1@@79| T@U) (|#$T2@@51| T@U) (|#$T3@@29| T@U) (|#$R@@86| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@95|) TyType) (= (type |#$T1@@79|) TyType)) (= (type |#$T2@@51|) TyType)) (= (type |#$T3@@29|) TyType)) (= (type |#$R@@86|) TyType)) (= (Tclass._System.___hTotalFunc4_0 (Tclass._System.___hTotalFunc4 |#$T0@@95| |#$T1@@79| |#$T2@@51| |#$T3@@29| |#$R@@86|)) |#$T0@@95|)) :qid |unknown.0:0| :skolemid |954| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@95| |#$T1@@79| |#$T2@@51| |#$T3@@29| |#$R@@86|)) )))
(assert (forall ((arg0@@223 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_1 arg0@@223)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_1| :pattern ( (Tclass._System.___hTotalFunc4_1 arg0@@223)) )))
(assert (forall ((|#$T0@@96| T@U) (|#$T1@@80| T@U) (|#$T2@@52| T@U) (|#$T3@@30| T@U) (|#$R@@87| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@96|) TyType) (= (type |#$T1@@80|) TyType)) (= (type |#$T2@@52|) TyType)) (= (type |#$T3@@30|) TyType)) (= (type |#$R@@87|) TyType)) (= (Tclass._System.___hTotalFunc4_1 (Tclass._System.___hTotalFunc4 |#$T0@@96| |#$T1@@80| |#$T2@@52| |#$T3@@30| |#$R@@87|)) |#$T1@@80|)) :qid |unknown.0:0| :skolemid |955| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@96| |#$T1@@80| |#$T2@@52| |#$T3@@30| |#$R@@87|)) )))
(assert (forall ((arg0@@224 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_2 arg0@@224)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_2| :pattern ( (Tclass._System.___hTotalFunc4_2 arg0@@224)) )))
(assert (forall ((|#$T0@@97| T@U) (|#$T1@@81| T@U) (|#$T2@@53| T@U) (|#$T3@@31| T@U) (|#$R@@88| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@97|) TyType) (= (type |#$T1@@81|) TyType)) (= (type |#$T2@@53|) TyType)) (= (type |#$T3@@31|) TyType)) (= (type |#$R@@88|) TyType)) (= (Tclass._System.___hTotalFunc4_2 (Tclass._System.___hTotalFunc4 |#$T0@@97| |#$T1@@81| |#$T2@@53| |#$T3@@31| |#$R@@88|)) |#$T2@@53|)) :qid |unknown.0:0| :skolemid |956| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@97| |#$T1@@81| |#$T2@@53| |#$T3@@31| |#$R@@88|)) )))
(assert (forall ((arg0@@225 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_3 arg0@@225)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_3| :pattern ( (Tclass._System.___hTotalFunc4_3 arg0@@225)) )))
(assert (forall ((|#$T0@@98| T@U) (|#$T1@@82| T@U) (|#$T2@@54| T@U) (|#$T3@@32| T@U) (|#$R@@89| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@98|) TyType) (= (type |#$T1@@82|) TyType)) (= (type |#$T2@@54|) TyType)) (= (type |#$T3@@32|) TyType)) (= (type |#$R@@89|) TyType)) (= (Tclass._System.___hTotalFunc4_3 (Tclass._System.___hTotalFunc4 |#$T0@@98| |#$T1@@82| |#$T2@@54| |#$T3@@32| |#$R@@89|)) |#$T3@@32|)) :qid |unknown.0:0| :skolemid |957| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@98| |#$T1@@82| |#$T2@@54| |#$T3@@32| |#$R@@89|)) )))
(assert (forall ((arg0@@226 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_4 arg0@@226)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_4| :pattern ( (Tclass._System.___hTotalFunc4_4 arg0@@226)) )))
(assert (forall ((|#$T0@@99| T@U) (|#$T1@@83| T@U) (|#$T2@@55| T@U) (|#$T3@@33| T@U) (|#$R@@90| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@99|) TyType) (= (type |#$T1@@83|) TyType)) (= (type |#$T2@@55|) TyType)) (= (type |#$T3@@33|) TyType)) (= (type |#$R@@90|) TyType)) (= (Tclass._System.___hTotalFunc4_4 (Tclass._System.___hTotalFunc4 |#$T0@@99| |#$T1@@83| |#$T2@@55| |#$T3@@33| |#$R@@90|)) |#$R@@90|)) :qid |unknown.0:0| :skolemid |958| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@99| |#$T1@@83| |#$T2@@55| |#$T3@@33| |#$R@@90|)) )))
(assert (forall ((|#$T0@@100| T@U) (|#$T1@@84| T@U) (|#$T2@@56| T@U) (|#$T3@@34| T@U) (|#$R@@91| T@U) (bx@@76 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@100|) TyType) (= (type |#$T1@@84|) TyType)) (= (type |#$T2@@56|) TyType)) (= (type |#$T3@@34|) TyType)) (= (type |#$R@@91|) TyType)) (= (type bx@@76) BoxType)) ($IsBox bx@@76 (Tclass._System.___hTotalFunc4 |#$T0@@100| |#$T1@@84| |#$T2@@56| |#$T3@@34| |#$R@@91|))) (and (= ($Box ($Unbox HandleTypeType bx@@76)) bx@@76) ($Is ($Unbox HandleTypeType bx@@76) (Tclass._System.___hTotalFunc4 |#$T0@@100| |#$T1@@84| |#$T2@@56| |#$T3@@34| |#$R@@91|)))) :qid |unknown.0:0| :skolemid |959| :pattern ( ($IsBox bx@@76 (Tclass._System.___hTotalFunc4 |#$T0@@100| |#$T1@@84| |#$T2@@56| |#$T3@@34| |#$R@@91|))) )))
(assert (forall ((|#$T0@@101| T@U) (|#$T1@@85| T@U) (|#$T2@@57| T@U) (|#$T3@@35| T@U) (|#$R@@92| T@U) (|f#0@@17| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@101|) TyType) (= (type |#$T1@@85|) TyType)) (= (type |#$T2@@57|) TyType)) (= (type |#$T3@@35|) TyType)) (= (type |#$R@@92|) TyType)) (= (type |f#0@@17|) HandleTypeType)) (and (=> ($Is |f#0@@17| (Tclass._System.___hTotalFunc4 |#$T0@@101| |#$T1@@85| |#$T2@@57| |#$T3@@35| |#$R@@92|)) (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc4 |#$T0@@101| |#$T1@@85| |#$T2@@57| |#$T3@@35| |#$R@@92|)) (forall ((|x0#0@@13| T@U) (|x1#0@@9| T@U) (|x2#0@@5| T@U) (|x3#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@13|) BoxType) (= (type |x1#0@@9|) BoxType)) (= (type |x2#0@@5|) BoxType)) (= (type |x3#0@@1|) BoxType)) (and (and (and ($IsBox |x0#0@@13| |#$T0@@101|) ($IsBox |x1#0@@9| |#$T1@@85|)) ($IsBox |x2#0@@5| |#$T2@@57|)) ($IsBox |x3#0@@1| |#$T3@@35|))) (Requires4 |#$T0@@101| |#$T1@@85| |#$T2@@57| |#$T3@@35| |#$R@@92| $OneHeap |f#0@@17| |x0#0@@13| |x1#0@@9| |x2#0@@5| |x3#0@@1|)) :qid |unknown.0:0| :skolemid |960| :no-pattern (type |x0#0@@13|) :no-pattern (type |x1#0@@9|) :no-pattern (type |x2#0@@5|) :no-pattern (type |x3#0@@1|) :no-pattern (U_2_int |x0#0@@13|) :no-pattern (U_2_bool |x0#0@@13|) :no-pattern (U_2_int |x1#0@@9|) :no-pattern (U_2_bool |x1#0@@9|) :no-pattern (U_2_int |x2#0@@5|) :no-pattern (U_2_bool |x2#0@@5|) :no-pattern (U_2_int |x3#0@@1|) :no-pattern (U_2_bool |x3#0@@1|) )))) (=> (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc4 |#$T0@@101| |#$T1@@85| |#$T2@@57| |#$T3@@35| |#$R@@92|)) (forall ((|x0#0@@14| T@U) (|x1#0@@10| T@U) (|x2#0@@6| T@U) (|x3#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@14|) BoxType) (= (type |x1#0@@10|) BoxType)) (= (type |x2#0@@6|) BoxType)) (= (type |x3#0@@2|) BoxType)) (and (and (and ($IsBox |x0#0@@14| |#$T0@@101|) ($IsBox |x1#0@@10| |#$T1@@85|)) ($IsBox |x2#0@@6| |#$T2@@57|)) ($IsBox |x3#0@@2| |#$T3@@35|))) (Requires4 |#$T0@@101| |#$T1@@85| |#$T2@@57| |#$T3@@35| |#$R@@92| $OneHeap |f#0@@17| |x0#0@@14| |x1#0@@10| |x2#0@@6| |x3#0@@2|)) :qid |unknown.0:0| :skolemid |960| :no-pattern (type |x0#0@@14|) :no-pattern (type |x1#0@@10|) :no-pattern (type |x2#0@@6|) :no-pattern (type |x3#0@@2|) :no-pattern (U_2_int |x0#0@@14|) :no-pattern (U_2_bool |x0#0@@14|) :no-pattern (U_2_int |x1#0@@10|) :no-pattern (U_2_bool |x1#0@@10|) :no-pattern (U_2_int |x2#0@@6|) :no-pattern (U_2_bool |x2#0@@6|) :no-pattern (U_2_int |x3#0@@2|) :no-pattern (U_2_bool |x3#0@@2|) ))) ($Is |f#0@@17| (Tclass._System.___hTotalFunc4 |#$T0@@101| |#$T1@@85| |#$T2@@57| |#$T3@@35| |#$R@@92|))))) :qid |unknown.0:0| :skolemid |961| :pattern ( ($Is |f#0@@17| (Tclass._System.___hTotalFunc4 |#$T0@@101| |#$T1@@85| |#$T2@@57| |#$T3@@35| |#$R@@92|))) )))
(assert (forall ((|#$T0@@102| T@U) (|#$T1@@86| T@U) (|#$T2@@58| T@U) (|#$T3@@36| T@U) (|#$R@@93| T@U) (|f#0@@18| T@U) ($h@@25 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@102|) TyType) (= (type |#$T1@@86|) TyType)) (= (type |#$T2@@58|) TyType)) (= (type |#$T3@@36|) TyType)) (= (type |#$R@@93|) TyType)) (= (type |f#0@@18|) HandleTypeType)) (= (type $h@@25) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc4 |#$T0@@102| |#$T1@@86| |#$T2@@58| |#$T3@@36| |#$R@@93|) $h@@25) ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc4 |#$T0@@102| |#$T1@@86| |#$T2@@58| |#$T3@@36| |#$R@@93|) $h@@25)) (=> ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc4 |#$T0@@102| |#$T1@@86| |#$T2@@58| |#$T3@@36| |#$R@@93|) $h@@25) ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc4 |#$T0@@102| |#$T1@@86| |#$T2@@58| |#$T3@@36| |#$R@@93|) $h@@25)))) :qid |unknown.0:0| :skolemid |962| :pattern ( ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc4 |#$T0@@102| |#$T1@@86| |#$T2@@58| |#$T3@@36| |#$R@@93|) $h@@25)) )))
(assert (= (type |#_System._tuple#0._#Make0|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_System._tuple#0._#Make0|) |##_System._tuple#0._#Make0|))
(assert (forall ((d@@14 T@U) ) (!  (=> (= (type d@@14) DatatypeTypeType) (and (=> (_System.Tuple0.___hMake0_q d@@14) (= (DatatypeCtorId d@@14) |##_System._tuple#0._#Make0|)) (=> (= (DatatypeCtorId d@@14) |##_System._tuple#0._#Make0|) (_System.Tuple0.___hMake0_q d@@14)))) :qid |unknown.0:0| :skolemid |963| :pattern ( (_System.Tuple0.___hMake0_q d@@14)) )))
(assert (forall ((d@@15 T@U) ) (!  (=> (and (= (type d@@15) DatatypeTypeType) (_System.Tuple0.___hMake0_q d@@15)) (= d@@15 |#_System._tuple#0._#Make0|)) :qid |unknown.0:0| :skolemid |964| :pattern ( (_System.Tuple0.___hMake0_q d@@15)) )))
(assert (= (type Tclass._System.Tuple0) TyType))
(assert (= (Tag Tclass._System.Tuple0) Tagclass._System.Tuple0))
(assert (forall ((bx@@77 T@U) ) (!  (=> (and (= (type bx@@77) BoxType) ($IsBox bx@@77 Tclass._System.Tuple0)) (and (= ($Box ($Unbox DatatypeTypeType bx@@77)) bx@@77) ($Is ($Unbox DatatypeTypeType bx@@77) Tclass._System.Tuple0))) :qid |unknown.0:0| :skolemid |965| :pattern ( ($IsBox bx@@77 Tclass._System.Tuple0)) )))
(assert ($Is |#_System._tuple#0._#Make0| Tclass._System.Tuple0))
(assert (forall (($h@@26 T@U) ) (!  (=> (and (= (type $h@@26) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@26)) ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@26)) :qid |DafnyPre.521:12| :skolemid |966| :pattern ( ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@26)) )))
(assert (= |#_System._tuple#0._#Make0| (Lit |#_System._tuple#0._#Make0|)))
(assert (forall ((d@@16 T@U) ) (!  (=> (and (= (type d@@16) DatatypeTypeType) (|$IsA#_System.Tuple0| d@@16)) (_System.Tuple0.___hMake0_q d@@16)) :qid |unknown.0:0| :skolemid |967| :pattern ( (|$IsA#_System.Tuple0| d@@16)) )))
(assert (forall ((d@@17 T@U) ) (!  (=> (and (= (type d@@17) DatatypeTypeType) ($Is d@@17 Tclass._System.Tuple0)) (_System.Tuple0.___hMake0_q d@@17)) :qid |unknown.0:0| :skolemid |968| :pattern ( (_System.Tuple0.___hMake0_q d@@17) ($Is d@@17 Tclass._System.Tuple0)) )))
(assert (forall ((a@@116 T@U) (b@@65 T@U) ) (!  (=> (and (and (= (type a@@116) DatatypeTypeType) (= (type b@@65) DatatypeTypeType)) true) (and (=> (|_System.Tuple0#Equal| a@@116 b@@65) true) (=> true (|_System.Tuple0#Equal| a@@116 b@@65)))) :qid |unknown.0:0| :skolemid |969| :pattern ( (|_System.Tuple0#Equal| a@@116 b@@65)) )))
(assert (forall ((a@@117 T@U) (b@@66 T@U) ) (!  (=> (and (= (type a@@117) DatatypeTypeType) (= (type b@@66) DatatypeTypeType)) (and (=> (|_System.Tuple0#Equal| a@@117 b@@66) (= a@@117 b@@66)) (=> (= a@@117 b@@66) (|_System.Tuple0#Equal| a@@117 b@@66)))) :qid |unknown.0:0| :skolemid |970| :pattern ( (|_System.Tuple0#Equal| a@@117 b@@66)) )))
(assert (= (type Tclass.MutableBtreeBulkOperations.__default) TyType))
(assert (= (Tag Tclass.MutableBtreeBulkOperations.__default) Tagclass.MutableBtreeBulkOperations.__default))
(assert (forall ((bx@@78 T@U) ) (!  (=> (and (= (type bx@@78) BoxType) ($IsBox bx@@78 Tclass.MutableBtreeBulkOperations.__default)) (and (= ($Box ($Unbox refType bx@@78)) bx@@78) ($Is ($Unbox refType bx@@78) Tclass.MutableBtreeBulkOperations.__default))) :qid |unknown.0:0| :skolemid |971| :pattern ( ($IsBox bx@@78 Tclass.MutableBtreeBulkOperations.__default)) )))
(assert (forall (($o@@9 T@U) ) (!  (=> (= (type $o@@9) refType) (and (=> ($Is $o@@9 Tclass.MutableBtreeBulkOperations.__default) (or (= $o@@9 null) (= (dtype $o@@9) Tclass.MutableBtreeBulkOperations.__default))) (=> (or (= $o@@9 null) (= (dtype $o@@9) Tclass.MutableBtreeBulkOperations.__default)) ($Is $o@@9 Tclass.MutableBtreeBulkOperations.__default)))) :qid |unknown.0:0| :skolemid |972| :pattern ( ($Is $o@@9 Tclass.MutableBtreeBulkOperations.__default)) )))
(assert (forall (($o@@10 T@U) ($h@@27 T@U) ) (!  (=> (and (= (type $o@@10) refType) (= (type $h@@27) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@10 Tclass.MutableBtreeBulkOperations.__default $h@@27) (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@27 $o@@10) alloc)))) (=> (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@27 $o@@10) alloc))) ($IsAlloc $o@@10 Tclass.MutableBtreeBulkOperations.__default $h@@27)))) :qid |unknown.0:0| :skolemid |973| :pattern ( ($IsAlloc $o@@10 Tclass.MutableBtreeBulkOperations.__default $h@@27)) )))
(assert (= (type MutableBtreeBulkOperations.MB.Abs.Node.repr) (FieldType (MapType0Type BoxType boolType))))
(assert (= (FDim MutableBtreeBulkOperations.MB.Abs.Node.repr) 0))
(assert (= (type class.MutableBtreeBulkOperations.MB.Abs.Node?) ClassNameType))
(assert (= (FieldOfDecl (MapType0Type BoxType boolType) class.MutableBtreeBulkOperations.MB.Abs.Node? field$repr) MutableBtreeBulkOperations.MB.Abs.Node.repr))
(assert ($IsGhostField MutableBtreeBulkOperations.MB.Abs.Node.repr))
(assert (= (type Tclass.MutableBtreeBulkOperations.MB.Abs.Node) TyType))
(assert (= (Tag Tclass.MutableBtreeBulkOperations.MB.Abs.Node) Tagclass.MutableBtreeBulkOperations.MB.Abs.Node))
(assert (forall ((bx@@79 T@U) ) (!  (=> (and (= (type bx@@79) BoxType) ($IsBox bx@@79 Tclass.MutableBtreeBulkOperations.MB.Abs.Node)) (and (= ($Box ($Unbox refType bx@@79)) bx@@79) ($Is ($Unbox refType bx@@79) Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) :qid |unknown.0:0| :skolemid |975| :pattern ( ($IsBox bx@@79 Tclass.MutableBtreeBulkOperations.MB.Abs.Node)) )))
(assert (forall (($h0 T@U) ($h1 T@U) (|node#0| T@U) ) (!  (=> (and (and (= (type $h0) (MapType0Type refType MapType1Type)) (= (type $h1) (MapType0Type refType MapType1Type))) (= (type |node#0|) refType)) (=> (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (or (|MutableBtreeBulkOperations.__default.NumElements#canCall| $h0 |node#0|) ($Is |node#0| Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1))) (=> (forall (($o@@11 T@U) ($f T@U) ) (! (let ((alpha@@6 (FieldTypeInv0 (type $f)))) (=> (and (and (= (type $o@@11) refType) (= (type $f) (FieldType alpha@@6))) (and (not (= $o@@11 null)) (or (= $o@@11 |node#0|) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0 |node#0|) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box $o@@11)))))) (= (MapType1Select (MapType0Select $h0 $o@@11) $f) (MapType1Select (MapType0Select $h1 $o@@11) $f)))) :qid |unknown.0:0| :skolemid |974| :no-pattern (type $o@@11) :no-pattern (type $f) :no-pattern (U_2_int $o@@11) :no-pattern (U_2_bool $o@@11) :no-pattern (U_2_int $f) :no-pattern (U_2_bool $f) )) (= (MutableBtreeBulkOperations.__default.NumElements $h0 |node#0|) (MutableBtreeBulkOperations.__default.NumElements $h1 |node#0|))))) :qid |DafnyPre.521:12| :skolemid |976| :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (MutableBtreeBulkOperations.__default.NumElements $h1 |node#0|)) )))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap T@U) (|node#0@@0| T@U) ) (!  (=> (and (and (= (type $Heap) (MapType0Type refType MapType1Type)) (= (type |node#0@@0|) refType)) (or (|MutableBtreeBulkOperations.__default.NumElements#canCall| $Heap |node#0@@0|) (and (not (= 2 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap) ($Is |node#0@@0| Tclass.MutableBtreeBulkOperations.MB.Abs.Node)) (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap |node#0@@0|))))) (<= (LitInt 0) (MutableBtreeBulkOperations.__default.NumElements $Heap |node#0@@0|))) :qid |MutableB.12:12| :skolemid |977| :pattern ( (MutableBtreeBulkOperations.__default.NumElements $Heap |node#0@@0|)) ))))
(assert (forall (($Heap@@0 T@U) (|node#0@@1| T@U) ) (!  (=> (and (and (= (type $Heap@@0) (MapType0Type refType MapType1Type)) (= (type |node#0@@1|) refType)) (and ($IsGoodHeap $Heap@@0) ($Is |node#0@@1| Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) (and (=> (|MutableBtreeBulkOperations.__default.NumElements#requires| $Heap@@0 |node#0@@1|) (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@@0 |node#0@@1|)) (=> (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@@0 |node#0@@1|) (|MutableBtreeBulkOperations.__default.NumElements#requires| $Heap@@0 |node#0@@1|)))) :qid |MutableB.12:12| :skolemid |978| :pattern ( (|MutableBtreeBulkOperations.__default.NumElements#requires| $Heap@@0 |node#0@@1|)) )))
(assert  (and (and (forall ((arg0@@227 T@U) (arg1@@107 T@U) (arg2@@63 T@U) ) (! (= (type (MutableBtreeBulkOperations.MB.Abs.__default.I arg0@@227 arg1@@107 arg2@@63)) DatatypeTypeType) :qid |funType:MutableBtreeBulkOperations.MB.Abs.__default.I| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.I arg0@@227 arg1@@107 arg2@@63)) )) (= (type StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I) LayerTypeType)) (= (type $LZ) LayerTypeType)))
(assert  (=> (<= 2 $FunctionContextHeight) (forall (($Heap@@1 T@U) (|node#0@@2| T@U) ) (!  (=> (and (and (= (type $Heap@@1) (MapType0Type refType MapType1Type)) (= (type |node#0@@2|) refType)) (or (|MutableBtreeBulkOperations.__default.NumElements#canCall| $Heap@@1 |node#0@@2|) (and (not (= 2 $FunctionContextHeight)) (and (and ($IsGoodHeap $Heap@@1) ($Is |node#0@@2| Tclass.MutableBtreeBulkOperations.MB.Abs.Node)) (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@@1 |node#0@@2|))))) (and (and (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@@1 |node#0@@2|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements#canCall| (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@@1 |node#0@@2|))) (= (MutableBtreeBulkOperations.__default.NumElements $Heap@@1 |node#0@@2|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements ($LS $LZ) (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@@1 |node#0@@2|))))) :qid |MutableB.12:12| :skolemid |979| :pattern ( (MutableBtreeBulkOperations.__default.NumElements $Heap@@1 |node#0@@2|)) ))))
(assert (= (type MutableBtreeBulkOperations.MB.Abs.Node.contents) (FieldType DatatypeTypeType)))
(assert (= (FDim MutableBtreeBulkOperations.MB.Abs.Node.contents) 0))
(assert (= (FieldOfDecl DatatypeTypeType class.MutableBtreeBulkOperations.MB.Abs.Node? field$contents) MutableBtreeBulkOperations.MB.Abs.Node.contents))
(assert  (not ($IsGhostField MutableBtreeBulkOperations.MB.Abs.Node.contents)))
(assert (= (type Tclass.NativeTypes.byte) TyType))
(assert (= (Tag Tclass.NativeTypes.byte) Tagclass.NativeTypes.byte))
(assert (forall ((bx@@80 T@U) ) (!  (=> (and (= (type bx@@80) BoxType) ($IsBox bx@@80 Tclass.NativeTypes.byte)) (and (= ($Box ($Unbox intType bx@@80)) bx@@80) ($Is ($Unbox intType bx@@80) Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |981| :pattern ( ($IsBox bx@@80 Tclass.NativeTypes.byte)) )))
(assert (= (type MutableBtreeBulkOperations.MB.Abs.Node.height) (FieldType intType)))
(assert (= (FDim MutableBtreeBulkOperations.MB.Abs.Node.height) 0))
(assert (= (FieldOfDecl intType class.MutableBtreeBulkOperations.MB.Abs.Node? field$height) MutableBtreeBulkOperations.MB.Abs.Node.height))
(assert ($IsGhostField MutableBtreeBulkOperations.MB.Abs.Node.height))
(assert (= (type Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) TyType))
(assert (= (Tag Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) Tagclass.MutableBtreeBulkOperations.MB.Model.Abs.Node))
(assert (forall ((bx@@81 T@U) ) (!  (=> (and (= (type bx@@81) BoxType) ($IsBox bx@@81 Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) (and (= ($Box ($Unbox DatatypeTypeType bx@@81)) bx@@81) ($Is ($Unbox DatatypeTypeType bx@@81) Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node))) :qid |unknown.0:0| :skolemid |992| :pattern ( ($IsBox bx@@81 Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) )))
(assert (= (type Tclass.NativeTypes.sbyte) TyType))
(assert (= (Tag Tclass.NativeTypes.sbyte) Tagclass.NativeTypes.sbyte))
(assert (forall ((bx@@82 T@U) ) (!  (=> (and (= (type bx@@82) BoxType) ($IsBox bx@@82 Tclass.NativeTypes.sbyte)) (and (= ($Box ($Unbox intType bx@@82)) bx@@82) ($Is ($Unbox intType bx@@82) Tclass.NativeTypes.sbyte))) :qid |unknown.0:0| :skolemid |1463| :pattern ( ($IsBox bx@@82 Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0| T@U) ) (!  (=> (= (type |i#0|) intType) (and (=> ($Is |i#0| Tclass.NativeTypes.sbyte) (and (<= (LitInt (- 0 128)) (U_2_int |i#0|)) (< (U_2_int |i#0|) 128))) (=> (and (<= (LitInt (- 0 128)) (U_2_int |i#0|)) (< (U_2_int |i#0|) 128)) ($Is |i#0| Tclass.NativeTypes.sbyte)))) :qid |unknown.0:0| :skolemid |1464| :pattern ( ($Is |i#0| Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@0| T@U) ($h@@28 T@U) ) (!  (=> (and (= (type |i#0@@0|) intType) (= (type $h@@28) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@0| Tclass.NativeTypes.sbyte $h@@28)) :qid |unknown.0:0| :skolemid |1465| :pattern ( ($IsAlloc |i#0@@0| Tclass.NativeTypes.sbyte $h@@28)) )))
(assert (forall ((|i#0@@1| T@U) ) (!  (=> (= (type |i#0@@1|) intType) (and (=> ($Is |i#0@@1| Tclass.NativeTypes.byte) (and (<= (LitInt 0) (U_2_int |i#0@@1|)) (< (U_2_int |i#0@@1|) 256))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@1|)) (< (U_2_int |i#0@@1|) 256)) ($Is |i#0@@1| Tclass.NativeTypes.byte)))) :qid |unknown.0:0| :skolemid |1466| :pattern ( ($Is |i#0@@1| Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@2| T@U) ($h@@29 T@U) ) (!  (=> (and (= (type |i#0@@2|) intType) (= (type $h@@29) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@2| Tclass.NativeTypes.byte $h@@29)) :qid |unknown.0:0| :skolemid |1467| :pattern ( ($IsAlloc |i#0@@2| Tclass.NativeTypes.byte $h@@29)) )))
(assert (= (type Tclass.NativeTypes.int16) TyType))
(assert (= (Tag Tclass.NativeTypes.int16) Tagclass.NativeTypes.int16))
(assert (forall ((bx@@83 T@U) ) (!  (=> (and (= (type bx@@83) BoxType) ($IsBox bx@@83 Tclass.NativeTypes.int16)) (and (= ($Box ($Unbox intType bx@@83)) bx@@83) ($Is ($Unbox intType bx@@83) Tclass.NativeTypes.int16))) :qid |unknown.0:0| :skolemid |1468| :pattern ( ($IsBox bx@@83 Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@3| T@U) ) (!  (=> (= (type |i#0@@3|) intType) (and (=> ($Is |i#0@@3| Tclass.NativeTypes.int16) (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@3|)) (< (U_2_int |i#0@@3|) 32768))) (=> (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@3|)) (< (U_2_int |i#0@@3|) 32768)) ($Is |i#0@@3| Tclass.NativeTypes.int16)))) :qid |unknown.0:0| :skolemid |1469| :pattern ( ($Is |i#0@@3| Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@4| T@U) ($h@@30 T@U) ) (!  (=> (and (= (type |i#0@@4|) intType) (= (type $h@@30) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@4| Tclass.NativeTypes.int16 $h@@30)) :qid |unknown.0:0| :skolemid |1470| :pattern ( ($IsAlloc |i#0@@4| Tclass.NativeTypes.int16 $h@@30)) )))
(assert (= (type Tclass.NativeTypes.uint16) TyType))
(assert (= (Tag Tclass.NativeTypes.uint16) Tagclass.NativeTypes.uint16))
(assert (forall ((bx@@84 T@U) ) (!  (=> (and (= (type bx@@84) BoxType) ($IsBox bx@@84 Tclass.NativeTypes.uint16)) (and (= ($Box ($Unbox intType bx@@84)) bx@@84) ($Is ($Unbox intType bx@@84) Tclass.NativeTypes.uint16))) :qid |unknown.0:0| :skolemid |1471| :pattern ( ($IsBox bx@@84 Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@5| T@U) ) (!  (=> (= (type |i#0@@5|) intType) (and (=> ($Is |i#0@@5| Tclass.NativeTypes.uint16) (and (<= (LitInt 0) (U_2_int |i#0@@5|)) (< (U_2_int |i#0@@5|) 65536))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@5|)) (< (U_2_int |i#0@@5|) 65536)) ($Is |i#0@@5| Tclass.NativeTypes.uint16)))) :qid |unknown.0:0| :skolemid |1472| :pattern ( ($Is |i#0@@5| Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@6| T@U) ($h@@31 T@U) ) (!  (=> (and (= (type |i#0@@6|) intType) (= (type $h@@31) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@6| Tclass.NativeTypes.uint16 $h@@31)) :qid |unknown.0:0| :skolemid |1473| :pattern ( ($IsAlloc |i#0@@6| Tclass.NativeTypes.uint16 $h@@31)) )))
(assert (= (type Tclass.NativeTypes.int32) TyType))
(assert (= (Tag Tclass.NativeTypes.int32) Tagclass.NativeTypes.int32))
(assert (forall ((bx@@85 T@U) ) (!  (=> (and (= (type bx@@85) BoxType) ($IsBox bx@@85 Tclass.NativeTypes.int32)) (and (= ($Box ($Unbox intType bx@@85)) bx@@85) ($Is ($Unbox intType bx@@85) Tclass.NativeTypes.int32))) :qid |unknown.0:0| :skolemid |1474| :pattern ( ($IsBox bx@@85 Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@7| T@U) ) (!  (=> (= (type |i#0@@7|) intType) (and (=> ($Is |i#0@@7| Tclass.NativeTypes.int32) (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@7|)) (< (U_2_int |i#0@@7|) 2147483648))) (=> (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@7|)) (< (U_2_int |i#0@@7|) 2147483648)) ($Is |i#0@@7| Tclass.NativeTypes.int32)))) :qid |unknown.0:0| :skolemid |1475| :pattern ( ($Is |i#0@@7| Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@8| T@U) ($h@@32 T@U) ) (!  (=> (and (= (type |i#0@@8|) intType) (= (type $h@@32) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@8| Tclass.NativeTypes.int32 $h@@32)) :qid |unknown.0:0| :skolemid |1476| :pattern ( ($IsAlloc |i#0@@8| Tclass.NativeTypes.int32 $h@@32)) )))
(assert (= (type Tclass.NativeTypes.uint32) TyType))
(assert (= (Tag Tclass.NativeTypes.uint32) Tagclass.NativeTypes.uint32))
(assert (forall ((bx@@86 T@U) ) (!  (=> (and (= (type bx@@86) BoxType) ($IsBox bx@@86 Tclass.NativeTypes.uint32)) (and (= ($Box ($Unbox intType bx@@86)) bx@@86) ($Is ($Unbox intType bx@@86) Tclass.NativeTypes.uint32))) :qid |unknown.0:0| :skolemid |1477| :pattern ( ($IsBox bx@@86 Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@9| T@U) ) (!  (=> (= (type |i#0@@9|) intType) (and (=> ($Is |i#0@@9| Tclass.NativeTypes.uint32) (and (<= (LitInt 0) (U_2_int |i#0@@9|)) (< (U_2_int |i#0@@9|) 4294967296))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@9|)) (< (U_2_int |i#0@@9|) 4294967296)) ($Is |i#0@@9| Tclass.NativeTypes.uint32)))) :qid |unknown.0:0| :skolemid |1478| :pattern ( ($Is |i#0@@9| Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@10| T@U) ($h@@33 T@U) ) (!  (=> (and (= (type |i#0@@10|) intType) (= (type $h@@33) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@10| Tclass.NativeTypes.uint32 $h@@33)) :qid |unknown.0:0| :skolemid |1479| :pattern ( ($IsAlloc |i#0@@10| Tclass.NativeTypes.uint32 $h@@33)) )))
(assert (= (type Tclass.NativeTypes.int64) TyType))
(assert (= (Tag Tclass.NativeTypes.int64) Tagclass.NativeTypes.int64))
(assert (forall ((bx@@87 T@U) ) (!  (=> (and (= (type bx@@87) BoxType) ($IsBox bx@@87 Tclass.NativeTypes.int64)) (and (= ($Box ($Unbox intType bx@@87)) bx@@87) ($Is ($Unbox intType bx@@87) Tclass.NativeTypes.int64))) :qid |unknown.0:0| :skolemid |1480| :pattern ( ($IsBox bx@@87 Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@11| T@U) ) (!  (=> (= (type |i#0@@11|) intType) (and (=> ($Is |i#0@@11| Tclass.NativeTypes.int64) (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@11|)) (< (U_2_int |i#0@@11|) 9223372036854775808))) (=> (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@11|)) (< (U_2_int |i#0@@11|) 9223372036854775808)) ($Is |i#0@@11| Tclass.NativeTypes.int64)))) :qid |unknown.0:0| :skolemid |1481| :pattern ( ($Is |i#0@@11| Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@12| T@U) ($h@@34 T@U) ) (!  (=> (and (= (type |i#0@@12|) intType) (= (type $h@@34) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@12| Tclass.NativeTypes.int64 $h@@34)) :qid |unknown.0:0| :skolemid |1482| :pattern ( ($IsAlloc |i#0@@12| Tclass.NativeTypes.int64 $h@@34)) )))
(assert (= (type Tclass.NativeTypes.uint64) TyType))
(assert (= (Tag Tclass.NativeTypes.uint64) Tagclass.NativeTypes.uint64))
(assert (forall ((bx@@88 T@U) ) (!  (=> (and (= (type bx@@88) BoxType) ($IsBox bx@@88 Tclass.NativeTypes.uint64)) (and (= ($Box ($Unbox intType bx@@88)) bx@@88) ($Is ($Unbox intType bx@@88) Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |1483| :pattern ( ($IsBox bx@@88 Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@13| T@U) ) (!  (=> (= (type |i#0@@13|) intType) (and (=> ($Is |i#0@@13| Tclass.NativeTypes.uint64) (and (<= (LitInt 0) (U_2_int |i#0@@13|)) (< (U_2_int |i#0@@13|) 18446744073709551616))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@13|)) (< (U_2_int |i#0@@13|) 18446744073709551616)) ($Is |i#0@@13| Tclass.NativeTypes.uint64)))) :qid |unknown.0:0| :skolemid |1484| :pattern ( ($Is |i#0@@13| Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@14| T@U) ($h@@35 T@U) ) (!  (=> (and (= (type |i#0@@14|) intType) (= (type $h@@35) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@14| Tclass.NativeTypes.uint64 $h@@35)) :qid |unknown.0:0| :skolemid |1485| :pattern ( ($IsAlloc |i#0@@14| Tclass.NativeTypes.uint64 $h@@35)) )))
(assert (= (type Tclass.NativeTypes.nat8) TyType))
(assert (= (Tag Tclass.NativeTypes.nat8) Tagclass.NativeTypes.nat8))
(assert (forall ((bx@@89 T@U) ) (!  (=> (and (= (type bx@@89) BoxType) ($IsBox bx@@89 Tclass.NativeTypes.nat8)) (and (= ($Box ($Unbox intType bx@@89)) bx@@89) ($Is ($Unbox intType bx@@89) Tclass.NativeTypes.nat8))) :qid |unknown.0:0| :skolemid |1486| :pattern ( ($IsBox bx@@89 Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@15| T@U) ) (!  (=> (= (type |i#0@@15|) intType) (and (=> ($Is |i#0@@15| Tclass.NativeTypes.nat8) (and (<= (LitInt 0) (U_2_int |i#0@@15|)) (< (U_2_int |i#0@@15|) 128))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@15|)) (< (U_2_int |i#0@@15|) 128)) ($Is |i#0@@15| Tclass.NativeTypes.nat8)))) :qid |unknown.0:0| :skolemid |1487| :pattern ( ($Is |i#0@@15| Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@16| T@U) ($h@@36 T@U) ) (!  (=> (and (= (type |i#0@@16|) intType) (= (type $h@@36) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@16| Tclass.NativeTypes.nat8 $h@@36)) :qid |unknown.0:0| :skolemid |1488| :pattern ( ($IsAlloc |i#0@@16| Tclass.NativeTypes.nat8 $h@@36)) )))
(assert (= (type Tclass.NativeTypes.nat16) TyType))
(assert (= (Tag Tclass.NativeTypes.nat16) Tagclass.NativeTypes.nat16))
(assert (forall ((bx@@90 T@U) ) (!  (=> (and (= (type bx@@90) BoxType) ($IsBox bx@@90 Tclass.NativeTypes.nat16)) (and (= ($Box ($Unbox intType bx@@90)) bx@@90) ($Is ($Unbox intType bx@@90) Tclass.NativeTypes.nat16))) :qid |unknown.0:0| :skolemid |1489| :pattern ( ($IsBox bx@@90 Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@17| T@U) ) (!  (=> (= (type |i#0@@17|) intType) (and (=> ($Is |i#0@@17| Tclass.NativeTypes.nat16) (and (<= (LitInt 0) (U_2_int |i#0@@17|)) (< (U_2_int |i#0@@17|) 32768))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@17|)) (< (U_2_int |i#0@@17|) 32768)) ($Is |i#0@@17| Tclass.NativeTypes.nat16)))) :qid |unknown.0:0| :skolemid |1490| :pattern ( ($Is |i#0@@17| Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@18| T@U) ($h@@37 T@U) ) (!  (=> (and (= (type |i#0@@18|) intType) (= (type $h@@37) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@18| Tclass.NativeTypes.nat16 $h@@37)) :qid |unknown.0:0| :skolemid |1491| :pattern ( ($IsAlloc |i#0@@18| Tclass.NativeTypes.nat16 $h@@37)) )))
(assert (= (type Tclass.NativeTypes.nat32) TyType))
(assert (= (Tag Tclass.NativeTypes.nat32) Tagclass.NativeTypes.nat32))
(assert (forall ((bx@@91 T@U) ) (!  (=> (and (= (type bx@@91) BoxType) ($IsBox bx@@91 Tclass.NativeTypes.nat32)) (and (= ($Box ($Unbox intType bx@@91)) bx@@91) ($Is ($Unbox intType bx@@91) Tclass.NativeTypes.nat32))) :qid |unknown.0:0| :skolemid |1492| :pattern ( ($IsBox bx@@91 Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@19| T@U) ) (!  (=> (= (type |i#0@@19|) intType) (and (=> ($Is |i#0@@19| Tclass.NativeTypes.nat32) (and (<= (LitInt 0) (U_2_int |i#0@@19|)) (< (U_2_int |i#0@@19|) 2147483648))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@19|)) (< (U_2_int |i#0@@19|) 2147483648)) ($Is |i#0@@19| Tclass.NativeTypes.nat32)))) :qid |unknown.0:0| :skolemid |1493| :pattern ( ($Is |i#0@@19| Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@20| T@U) ($h@@38 T@U) ) (!  (=> (and (= (type |i#0@@20|) intType) (= (type $h@@38) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@20| Tclass.NativeTypes.nat32 $h@@38)) :qid |unknown.0:0| :skolemid |1494| :pattern ( ($IsAlloc |i#0@@20| Tclass.NativeTypes.nat32 $h@@38)) )))
(assert (= (type Tclass.NativeTypes.nat64) TyType))
(assert (= (Tag Tclass.NativeTypes.nat64) Tagclass.NativeTypes.nat64))
(assert (forall ((bx@@92 T@U) ) (!  (=> (and (= (type bx@@92) BoxType) ($IsBox bx@@92 Tclass.NativeTypes.nat64)) (and (= ($Box ($Unbox intType bx@@92)) bx@@92) ($Is ($Unbox intType bx@@92) Tclass.NativeTypes.nat64))) :qid |unknown.0:0| :skolemid |1495| :pattern ( ($IsBox bx@@92 Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@21| T@U) ) (!  (=> (= (type |i#0@@21|) intType) (and (=> ($Is |i#0@@21| Tclass.NativeTypes.nat64) (and (<= (LitInt 0) (U_2_int |i#0@@21|)) (< (U_2_int |i#0@@21|) 9223372036854775808))) (=> (and (<= (LitInt 0) (U_2_int |i#0@@21|)) (< (U_2_int |i#0@@21|) 9223372036854775808)) ($Is |i#0@@21| Tclass.NativeTypes.nat64)))) :qid |unknown.0:0| :skolemid |1496| :pattern ( ($Is |i#0@@21| Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@22| T@U) ($h@@39 T@U) ) (!  (=> (and (= (type |i#0@@22|) intType) (= (type $h@@39) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@22| Tclass.NativeTypes.nat64 $h@@39)) :qid |unknown.0:0| :skolemid |1497| :pattern ( ($IsAlloc |i#0@@22| Tclass.NativeTypes.nat64 $h@@39)) )))
(assert (= (type Tclass.NativeTypes.__default) TyType))
(assert (= (Tag Tclass.NativeTypes.__default) Tagclass.NativeTypes.__default))
(assert (forall ((bx@@93 T@U) ) (!  (=> (and (= (type bx@@93) BoxType) ($IsBox bx@@93 Tclass.NativeTypes.__default)) (and (= ($Box ($Unbox refType bx@@93)) bx@@93) ($Is ($Unbox refType bx@@93) Tclass.NativeTypes.__default))) :qid |unknown.0:0| :skolemid |1498| :pattern ( ($IsBox bx@@93 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@12 T@U) ) (!  (=> (= (type $o@@12) refType) (and (=> ($Is $o@@12 Tclass.NativeTypes.__default) (or (= $o@@12 null) (= (dtype $o@@12) Tclass.NativeTypes.__default))) (=> (or (= $o@@12 null) (= (dtype $o@@12) Tclass.NativeTypes.__default)) ($Is $o@@12 Tclass.NativeTypes.__default)))) :qid |unknown.0:0| :skolemid |1499| :pattern ( ($Is $o@@12 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@13 T@U) ($h@@40 T@U) ) (!  (=> (and (= (type $o@@13) refType) (= (type $h@@40) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@13 Tclass.NativeTypes.__default $h@@40) (or (= $o@@13 null) (U_2_bool (MapType1Select (MapType0Select $h@@40 $o@@13) alloc)))) (=> (or (= $o@@13 null) (U_2_bool (MapType1Select (MapType0Select $h@@40 $o@@13) alloc))) ($IsAlloc $o@@13 Tclass.NativeTypes.__default $h@@40)))) :qid |unknown.0:0| :skolemid |1500| :pattern ( ($IsAlloc $o@@13 Tclass.NativeTypes.__default $h@@40)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint64Size) (< NativeTypes.__default.Uint64Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint64Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint64Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint32Size) (< NativeTypes.__default.Uint32Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint32Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint32Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint16Size) (< NativeTypes.__default.Uint16Size 18446744073709551616)))))
(assert  (=> |NativeTypes.__default.Uint16Size#requires| true))
(assert  (=> true |NativeTypes.__default.Uint16Size#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true true)))
(assert  (=> |NativeTypes.__default.Uint64UpperBound#requires| true))
(assert  (=> true |NativeTypes.__default.Uint64UpperBound#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true true)))
(assert  (=> |NativeTypes.__default.Uint32UpperBound#requires| true))
(assert  (=> true |NativeTypes.__default.Uint32UpperBound#requires|))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert (= (type Tclass.SeqComparison.__default) TyType))
(assert (= (Tag Tclass.SeqComparison.__default) Tagclass.SeqComparison.__default))
(assert (forall ((bx@@94 T@U) ) (!  (=> (and (= (type bx@@94) BoxType) ($IsBox bx@@94 Tclass.SeqComparison.__default)) (and (= ($Box ($Unbox refType bx@@94)) bx@@94) ($Is ($Unbox refType bx@@94) Tclass.SeqComparison.__default))) :qid |unknown.0:0| :skolemid |1501| :pattern ( ($IsBox bx@@94 Tclass.SeqComparison.__default)) )))
(assert (forall (($o@@14 T@U) ) (!  (=> (= (type $o@@14) refType) (and (=> ($Is $o@@14 Tclass.SeqComparison.__default) (or (= $o@@14 null) (= (dtype $o@@14) Tclass.SeqComparison.__default))) (=> (or (= $o@@14 null) (= (dtype $o@@14) Tclass.SeqComparison.__default)) ($Is $o@@14 Tclass.SeqComparison.__default)))) :qid |unknown.0:0| :skolemid |1502| :pattern ( ($Is $o@@14 Tclass.SeqComparison.__default)) )))
(assert (forall (($o@@15 T@U) ($h@@41 T@U) ) (!  (=> (and (= (type $o@@15) refType) (= (type $h@@41) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@15 Tclass.SeqComparison.__default $h@@41) (or (= $o@@15 null) (U_2_bool (MapType1Select (MapType0Select $h@@41 $o@@15) alloc)))) (=> (or (= $o@@15 null) (U_2_bool (MapType1Select (MapType0Select $h@@41 $o@@15) alloc))) ($IsAlloc $o@@15 Tclass.SeqComparison.__default $h@@41)))) :qid |unknown.0:0| :skolemid |1503| :pattern ( ($IsAlloc $o@@15 Tclass.SeqComparison.__default $h@@41)) )))
(assert (forall (($ly T@U) (|a#0@@1| T@U) (|b#0@@1| T@U) ) (!  (=> (and (and (= (type $ly) LayerTypeType) (= (type |a#0@@1|) (SeqType BoxType))) (= (type |b#0@@1|) (SeqType BoxType))) (and (=> (SeqComparison.__default.lte ($LS $ly) |a#0@@1| |b#0@@1|) (SeqComparison.__default.lte $ly |a#0@@1| |b#0@@1|)) (=> (SeqComparison.__default.lte $ly |a#0@@1| |b#0@@1|) (SeqComparison.__default.lte ($LS $ly) |a#0@@1| |b#0@@1|)))) :qid |SeqCompa.9:23| :skolemid |1504| :pattern ( (SeqComparison.__default.lte ($LS $ly) |a#0@@1| |b#0@@1|)) )))
(assert (forall ((arg0@@228 T@U) ) (! (= (type (AsFuelBottom arg0@@228)) LayerTypeType) :qid |funType:AsFuelBottom| :pattern ( (AsFuelBottom arg0@@228)) )))
(assert (forall (($ly@@0 T@U) (|a#0@@2| T@U) (|b#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@0) LayerTypeType) (= (type |a#0@@2|) (SeqType BoxType))) (= (type |b#0@@2|) (SeqType BoxType))) (and (=> (SeqComparison.__default.lte $ly@@0 |a#0@@2| |b#0@@2|) (SeqComparison.__default.lte $LZ |a#0@@2| |b#0@@2|)) (=> (SeqComparison.__default.lte $LZ |a#0@@2| |b#0@@2|) (SeqComparison.__default.lte $ly@@0 |a#0@@2| |b#0@@2|)))) :qid |SeqCompa.9:23| :skolemid |1505| :pattern ( (SeqComparison.__default.lte (AsFuelBottom $ly@@0) |a#0@@2| |b#0@@2|)) )))
(assert  (=> true (forall (($ly@@1 T@U) (|a#0@@3| T@U) (|b#0@@3| T@U) ) (!  (=> (and (and (and (= (type $ly@@1) LayerTypeType) (= (type |a#0@@3|) (SeqType BoxType))) (= (type |b#0@@3|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| |a#0@@3| |b#0@@3|) (and ($Is |a#0@@3| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@3| (TSeq Tclass.NativeTypes.byte))))) true) :qid |SeqCompa.9:23| :skolemid |1506| :pattern ( (SeqComparison.__default.lte $ly@@1 |a#0@@3| |b#0@@3|)) ))))
(assert (forall (($ly@@2 T@U) (|a#0@@4| T@U) (|b#0@@4| T@U) ) (!  (=> (and (and (and (= (type $ly@@2) LayerTypeType) (= (type |a#0@@4|) (SeqType BoxType))) (= (type |b#0@@4|) (SeqType BoxType))) (and ($Is |a#0@@4| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@4| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|SeqComparison.__default.lte#requires| $ly@@2 |a#0@@4| |b#0@@4|) true) (=> true (|SeqComparison.__default.lte#requires| $ly@@2 |a#0@@4| |b#0@@4|)))) :qid |SeqCompa.9:23| :skolemid |1507| :pattern ( (|SeqComparison.__default.lte#requires| $ly@@2 |a#0@@4| |b#0@@4|)) )))
(assert  (=> true (forall (($ly@@3 T@U) (|a#0@@5| T@U) (|b#0@@5| T@U) ) (!  (=> (and (and (and (= (type $ly@@3) LayerTypeType) (= (type |a#0@@5|) (SeqType BoxType))) (= (type |b#0@@5|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| |a#0@@5| |b#0@@5|) (and ($Is |a#0@@5| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@5| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| |a#0@@5|) (LitInt 0))) (=> (not (= (|Seq#Length| |b#0@@5|) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |b#0@@5| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@5| (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |a#0@@5| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@5| (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (|Seq#Drop| |a#0@@5| (LitInt 1)) (|Seq#Drop| |b#0@@5| (LitInt 1))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@3) |a#0@@5| |b#0@@5|) (ite (= (|Seq#Length| |a#0@@5|) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@5|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| |a#0@@5| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@5| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@5| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@5| (LitInt 0))))) false (SeqComparison.__default.lte $ly@@3 (|Seq#Drop| |a#0@@5| (LitInt 1)) (|Seq#Drop| |b#0@@5| (LitInt 1)))))))) (=> (ite (= (|Seq#Length| |a#0@@5|) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@5|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| |a#0@@5| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@5| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@5| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@5| (LitInt 0))))) false (SeqComparison.__default.lte $ly@@3 (|Seq#Drop| |a#0@@5| (LitInt 1)) (|Seq#Drop| |b#0@@5| (LitInt 1))))))) (SeqComparison.__default.lte ($LS $ly@@3) |a#0@@5| |b#0@@5|))))) :qid |SeqCompa.9:23| :skolemid |1508| :pattern ( (SeqComparison.__default.lte ($LS $ly@@3) |a#0@@5| |b#0@@5|)) ))))
(assert  (=> true (forall (($ly@@4 T@U) (|a#0@@6| T@U) (|b#0@@6| T@U) ) (!  (=> (and (and (and (= (type $ly@@4) LayerTypeType) (= (type |a#0@@6|) (SeqType BoxType))) (= (type |b#0@@6|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| (Lit |a#0@@6|) |b#0@@6|) (and ($Is |a#0@@6| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@6| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@6|)) (LitInt 0))) (=> (not (= (|Seq#Length| |b#0@@6|) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |b#0@@6| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@6|) (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@6|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@6| (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (Lit (|Seq#Drop| (Lit |a#0@@6|) (LitInt 1))) (|Seq#Drop| |b#0@@6| (LitInt 1))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@4) (Lit |a#0@@6|) |b#0@@6|) (ite (= (|Seq#Length| (Lit |a#0@@6|)) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@6|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@6|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@6| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@6| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@6|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@4) (Lit (|Seq#Drop| (Lit |a#0@@6|) (LitInt 1))) (|Seq#Drop| |b#0@@6| (LitInt 1)))))))) (=> (ite (= (|Seq#Length| (Lit |a#0@@6|)) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@6|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@6|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@6| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@6| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@6|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@4) (Lit (|Seq#Drop| (Lit |a#0@@6|) (LitInt 1))) (|Seq#Drop| |b#0@@6| (LitInt 1))))))) (SeqComparison.__default.lte ($LS $ly@@4) (Lit |a#0@@6|) |b#0@@6|))))) :qid |SeqCompa.9:23| :weight 3 :skolemid |1509| :pattern ( (SeqComparison.__default.lte ($LS $ly@@4) (Lit |a#0@@6|) |b#0@@6|)) ))))
(assert  (=> true (forall (($ly@@5 T@U) (|a#0@@7| T@U) (|b#0@@7| T@U) ) (!  (=> (and (and (and (= (type $ly@@5) LayerTypeType) (= (type |a#0@@7|) (SeqType BoxType))) (= (type |b#0@@7|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| (Lit |a#0@@7|) (Lit |b#0@@7|)) (and ($Is |a#0@@7| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@7| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@7|)) (LitInt 0))) (=> (not (= (|Seq#Length| (Lit |b#0@@7|)) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@7|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@7|) (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@7|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@7|) (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (Lit (|Seq#Drop| (Lit |a#0@@7|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@7|) (LitInt 1)))))))) (and (=> (SeqComparison.__default.lte ($LS $ly@@5) (Lit |a#0@@7|) (Lit |b#0@@7|)) (ite (= (|Seq#Length| (Lit |a#0@@7|)) (LitInt 0)) true (ite (= (|Seq#Length| (Lit |b#0@@7|)) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@7|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@7|) (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@7|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@7|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@5) (Lit (|Seq#Drop| (Lit |a#0@@7|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@7|) (LitInt 1))))))))) (=> (ite (= (|Seq#Length| (Lit |a#0@@7|)) (LitInt 0)) true (ite (= (|Seq#Length| (Lit |b#0@@7|)) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@7|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@7|) (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@7|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@7|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@5) (Lit (|Seq#Drop| (Lit |a#0@@7|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@7|) (LitInt 1)))))))) (SeqComparison.__default.lte ($LS $ly@@5) (Lit |a#0@@7|) (Lit |b#0@@7|)))))) :qid |SeqCompa.9:23| :weight 3 :skolemid |1510| :pattern ( (SeqComparison.__default.lte ($LS $ly@@5) (Lit |a#0@@7|) (Lit |b#0@@7|))) ))))
(assert  (=> true (forall ((|a#0@@8| T@U) (|b#0@@8| T@U) ) (!  (=> (and (and (= (type |a#0@@8|) (SeqType BoxType)) (= (type |b#0@@8|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| |a#0@@8| |b#0@@8|) (and ($Is |a#0@@8| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@8| (TSeq Tclass.NativeTypes.byte))))) true) :qid |SeqCompa.25:16| :skolemid |1511| :pattern ( (SeqComparison.__default.lt |a#0@@8| |b#0@@8|)) ))))
(assert (forall ((|a#0@@9| T@U) (|b#0@@9| T@U) ) (!  (=> (and (and (= (type |a#0@@9|) (SeqType BoxType)) (= (type |b#0@@9|) (SeqType BoxType))) (and ($Is |a#0@@9| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@9| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|SeqComparison.__default.lt#requires| |a#0@@9| |b#0@@9|) true) (=> true (|SeqComparison.__default.lt#requires| |a#0@@9| |b#0@@9|)))) :qid |SeqCompa.25:16| :skolemid |1512| :pattern ( (|SeqComparison.__default.lt#requires| |a#0@@9| |b#0@@9|)) )))
(assert (= (type StartFuel_SeqComparison._default.lte) LayerTypeType))
(assert  (=> true (forall ((|a#0@@10| T@U) (|b#0@@10| T@U) ) (!  (=> (and (and (= (type |a#0@@10|) (SeqType BoxType)) (= (type |b#0@@10|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| |a#0@@10| |b#0@@10|) (and ($Is |a#0@@10| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@10| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| |a#0@@10| |b#0@@10|) (and (=> (SeqComparison.__default.lt |a#0@@10| |b#0@@10|) (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@10| |b#0@@10|) (not (|Seq#Equal| |a#0@@10| |b#0@@10|)))) (=> (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@10| |b#0@@10|) (not (|Seq#Equal| |a#0@@10| |b#0@@10|))) (SeqComparison.__default.lt |a#0@@10| |b#0@@10|))))) :qid |SeqCompa.25:16| :skolemid |1513| :pattern ( (SeqComparison.__default.lt |a#0@@10| |b#0@@10|)) ))))
(assert  (=> true (forall ((|a#0@@11| T@U) (|b#0@@11| T@U) ) (!  (=> (and (and (= (type |a#0@@11|) (SeqType BoxType)) (= (type |b#0@@11|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| (Lit |a#0@@11|) (Lit |b#0@@11|)) (and ($Is |a#0@@11| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@11| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| (Lit |a#0@@11|) (Lit |b#0@@11|)) (and (=> (SeqComparison.__default.lt (Lit |a#0@@11|) (Lit |b#0@@11|)) (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@11|) (Lit |b#0@@11|)) (not (|Seq#Equal| |a#0@@11| |b#0@@11|)))) (=> (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@11|) (Lit |b#0@@11|)) (not (|Seq#Equal| |a#0@@11| |b#0@@11|))) (SeqComparison.__default.lt (Lit |a#0@@11|) (Lit |b#0@@11|)))))) :qid |SeqCompa.25:16| :weight 3 :skolemid |1514| :pattern ( (SeqComparison.__default.lt (Lit |a#0@@11|) (Lit |b#0@@11|))) ))))
(assert (= (type Tclass.NativeArrays.__default) TyType))
(assert (= (Tag Tclass.NativeArrays.__default) Tagclass.NativeArrays.__default))
(assert (forall ((bx@@95 T@U) ) (!  (=> (and (= (type bx@@95) BoxType) ($IsBox bx@@95 Tclass.NativeArrays.__default)) (and (= ($Box ($Unbox refType bx@@95)) bx@@95) ($Is ($Unbox refType bx@@95) Tclass.NativeArrays.__default))) :qid |unknown.0:0| :skolemid |1515| :pattern ( ($IsBox bx@@95 Tclass.NativeArrays.__default)) )))
(assert (forall (($o@@16 T@U) ) (!  (=> (= (type $o@@16) refType) (and (=> ($Is $o@@16 Tclass.NativeArrays.__default) (or (= $o@@16 null) (= (dtype $o@@16) Tclass.NativeArrays.__default))) (=> (or (= $o@@16 null) (= (dtype $o@@16) Tclass.NativeArrays.__default)) ($Is $o@@16 Tclass.NativeArrays.__default)))) :qid |unknown.0:0| :skolemid |1516| :pattern ( ($Is $o@@16 Tclass.NativeArrays.__default)) )))
(assert (forall (($o@@17 T@U) ($h@@42 T@U) ) (!  (=> (and (= (type $o@@17) refType) (= (type $h@@42) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@17 Tclass.NativeArrays.__default $h@@42) (or (= $o@@17 null) (U_2_bool (MapType1Select (MapType0Select $h@@42 $o@@17) alloc)))) (=> (or (= $o@@17 null) (U_2_bool (MapType1Select (MapType0Select $h@@42 $o@@17) alloc))) ($IsAlloc $o@@17 Tclass.NativeArrays.__default $h@@42)))) :qid |unknown.0:0| :skolemid |1517| :pattern ( ($IsAlloc $o@@17 Tclass.NativeArrays.__default $h@@42)) )))
(assert (= (type |#Options.Option.None|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#Options.Option.None|) |##Options.Option.None|))
(assert (forall ((d@@18 T@U) ) (!  (=> (= (type d@@18) DatatypeTypeType) (and (=> (Options.Option.None_q d@@18) (= (DatatypeCtorId d@@18) |##Options.Option.None|)) (=> (= (DatatypeCtorId d@@18) |##Options.Option.None|) (Options.Option.None_q d@@18)))) :qid |unknown.0:0| :skolemid |1523| :pattern ( (Options.Option.None_q d@@18)) )))
(assert (forall ((d@@19 T@U) ) (!  (=> (and (= (type d@@19) DatatypeTypeType) (Options.Option.None_q d@@19)) (= d@@19 |#Options.Option.None|)) :qid |unknown.0:0| :skolemid |1524| :pattern ( (Options.Option.None_q d@@19)) )))
(assert (forall ((arg0@@229 T@U) ) (! (= (type (Tclass.Options.Option arg0@@229)) TyType) :qid |funType:Tclass.Options.Option| :pattern ( (Tclass.Options.Option arg0@@229)) )))
(assert (forall ((Options.Option$V T@U) ) (!  (=> (= (type Options.Option$V) TyType) (= (Tag (Tclass.Options.Option Options.Option$V)) Tagclass.Options.Option)) :qid |unknown.0:0| :skolemid |1525| :pattern ( (Tclass.Options.Option Options.Option$V)) )))
(assert (forall ((arg0@@230 T@U) ) (! (= (type (Tclass.Options.Option_0 arg0@@230)) TyType) :qid |funType:Tclass.Options.Option_0| :pattern ( (Tclass.Options.Option_0 arg0@@230)) )))
(assert (forall ((Options.Option$V@@0 T@U) ) (!  (=> (= (type Options.Option$V@@0) TyType) (= (Tclass.Options.Option_0 (Tclass.Options.Option Options.Option$V@@0)) Options.Option$V@@0)) :qid |unknown.0:0| :skolemid |1526| :pattern ( (Tclass.Options.Option Options.Option$V@@0)) )))
(assert (forall ((Options.Option$V@@1 T@U) (bx@@96 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@1) TyType) (= (type bx@@96) BoxType)) ($IsBox bx@@96 (Tclass.Options.Option Options.Option$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@96)) bx@@96) ($Is ($Unbox DatatypeTypeType bx@@96) (Tclass.Options.Option Options.Option$V@@1)))) :qid |unknown.0:0| :skolemid |1527| :pattern ( ($IsBox bx@@96 (Tclass.Options.Option Options.Option$V@@1))) )))
(assert (forall ((Options.Option$V@@2 T@U) ) (!  (=> (= (type Options.Option$V@@2) TyType) ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) :qid |unknown.0:0| :skolemid |1528| :pattern ( ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) )))
(assert (forall ((Options.Option$V@@3 T@U) ($h@@43 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@3) TyType) (= (type $h@@43) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@43)) ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@43)) :qid |unknown.0:0| :skolemid |1529| :pattern ( ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@43)) )))
(assert (= |#Options.Option.None| (Lit |#Options.Option.None|)))
(assert (forall ((arg0@@231 T@U) ) (! (= (type (|#Options.Option.Some| arg0@@231)) DatatypeTypeType) :qid |funType:#Options.Option.Some| :pattern ( (|#Options.Option.Some| arg0@@231)) )))
(assert (forall ((|a#5#0#0@@0| T@U) ) (!  (=> (= (type |a#5#0#0@@0|) BoxType) (= (DatatypeCtorId (|#Options.Option.Some| |a#5#0#0@@0|)) |##Options.Option.Some|)) :qid |Optionsd.2:36| :skolemid |1530| :pattern ( (|#Options.Option.Some| |a#5#0#0@@0|)) )))
(assert (forall ((d@@20 T@U) ) (!  (=> (= (type d@@20) DatatypeTypeType) (and (=> (Options.Option.Some_q d@@20) (= (DatatypeCtorId d@@20) |##Options.Option.Some|)) (=> (= (DatatypeCtorId d@@20) |##Options.Option.Some|) (Options.Option.Some_q d@@20)))) :qid |unknown.0:0| :skolemid |1531| :pattern ( (Options.Option.Some_q d@@20)) )))
(assert (forall ((d@@21 T@U) ) (!  (=> (and (= (type d@@21) DatatypeTypeType) (Options.Option.Some_q d@@21)) (exists ((|a#6#0#0@@0| T@U) ) (!  (and (= (type |a#6#0#0@@0|) BoxType) (= d@@21 (|#Options.Option.Some| |a#6#0#0@@0|))) :qid |Optionsd.2:36| :skolemid |1532| :no-pattern (type |a#6#0#0@@0|) :no-pattern (U_2_int |a#6#0#0@@0|) :no-pattern (U_2_bool |a#6#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |1533| :pattern ( (Options.Option.Some_q d@@21)) )))
(assert (forall ((Options.Option$V@@4 T@U) (|a#7#0#0@@0| T@U) ) (!  (=> (and (= (type Options.Option$V@@4) TyType) (= (type |a#7#0#0@@0|) BoxType)) (and (=> ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4)) ($IsBox |a#7#0#0@@0| Options.Option$V@@4)) (=> ($IsBox |a#7#0#0@@0| Options.Option$V@@4) ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4))))) :qid |unknown.0:0| :skolemid |1534| :pattern ( ($Is (|#Options.Option.Some| |a#7#0#0@@0|) (Tclass.Options.Option Options.Option$V@@4))) )))
(assert (forall ((Options.Option$V@@5 T@U) (|a#8#0#0@@0| T@U) ($h@@44 T@U) ) (!  (=> (and (and (and (= (type Options.Option$V@@5) TyType) (= (type |a#8#0#0@@0|) BoxType)) (= (type $h@@44) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@44)) (and (=> ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@44) ($IsAllocBox |a#8#0#0@@0| Options.Option$V@@5 $h@@44)) (=> ($IsAllocBox |a#8#0#0@@0| Options.Option$V@@5 $h@@44) ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@44)))) :qid |unknown.0:0| :skolemid |1535| :pattern ( ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@0|) (Tclass.Options.Option Options.Option$V@@5) $h@@44)) )))
(assert (forall ((arg0@@232 T@U) ) (! (= (type (Options.Option.value arg0@@232)) BoxType) :qid |funType:Options.Option.value| :pattern ( (Options.Option.value arg0@@232)) )))
(assert (forall ((d@@22 T@U) (Options.Option$V@@6 T@U) ($h@@45 T@U) ) (!  (=> (and (and (and (= (type d@@22) DatatypeTypeType) (= (type Options.Option$V@@6) TyType)) (= (type $h@@45) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@45) (and (Options.Option.Some_q d@@22) ($IsAlloc d@@22 (Tclass.Options.Option Options.Option$V@@6) $h@@45)))) ($IsAllocBox (Options.Option.value d@@22) Options.Option$V@@6 $h@@45)) :qid |unknown.0:0| :skolemid |1536| :pattern ( ($IsAllocBox (Options.Option.value d@@22) Options.Option$V@@6 $h@@45)) )))
(assert (forall ((|a#9#0#0@@0| T@U) ) (!  (=> (= (type |a#9#0#0@@0|) BoxType) (= (|#Options.Option.Some| (Lit |a#9#0#0@@0|)) (Lit (|#Options.Option.Some| |a#9#0#0@@0|)))) :qid |Optionsd.2:36| :skolemid |1537| :pattern ( (|#Options.Option.Some| (Lit |a#9#0#0@@0|))) )))
(assert (forall ((|a#10#0#0@@0| T@U) ) (!  (=> (= (type |a#10#0#0@@0|) BoxType) (= (Options.Option.value (|#Options.Option.Some| |a#10#0#0@@0|)) |a#10#0#0@@0|)) :qid |Optionsd.2:36| :skolemid |1538| :pattern ( (|#Options.Option.Some| |a#10#0#0@@0|)) )))
(assert (forall ((|a#11#0#0@@0| T@U) ) (!  (=> (= (type |a#11#0#0@@0|) BoxType) (< (BoxRank |a#11#0#0@@0|) (DtRank (|#Options.Option.Some| |a#11#0#0@@0|)))) :qid |Optionsd.2:36| :skolemid |1539| :pattern ( (|#Options.Option.Some| |a#11#0#0@@0|)) )))
(assert (forall ((d@@23 T@U) ) (!  (=> (and (= (type d@@23) DatatypeTypeType) (|$IsA#Options.Option| d@@23)) (or (Options.Option.None_q d@@23) (Options.Option.Some_q d@@23))) :qid |unknown.0:0| :skolemid |1540| :pattern ( (|$IsA#Options.Option| d@@23)) )))
(assert (forall ((Options.Option$V@@7 T@U) (d@@24 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@7) TyType) (= (type d@@24) DatatypeTypeType)) ($Is d@@24 (Tclass.Options.Option Options.Option$V@@7))) (or (Options.Option.None_q d@@24) (Options.Option.Some_q d@@24))) :qid |unknown.0:0| :skolemid |1541| :pattern ( (Options.Option.Some_q d@@24) ($Is d@@24 (Tclass.Options.Option Options.Option$V@@7))) :pattern ( (Options.Option.None_q d@@24) ($Is d@@24 (Tclass.Options.Option Options.Option$V@@7))) )))
(assert (forall ((a@@118 T@U) (b@@67 T@U) ) (!  (=> (and (and (= (type a@@118) DatatypeTypeType) (= (type b@@67) DatatypeTypeType)) (and (Options.Option.None_q a@@118) (Options.Option.None_q b@@67))) (and (=> (|Options.Option#Equal| a@@118 b@@67) true) (=> true (|Options.Option#Equal| a@@118 b@@67)))) :qid |unknown.0:0| :skolemid |1542| :pattern ( (|Options.Option#Equal| a@@118 b@@67) (Options.Option.None_q a@@118)) :pattern ( (|Options.Option#Equal| a@@118 b@@67) (Options.Option.None_q b@@67)) )))
(assert (forall ((a@@119 T@U) (b@@68 T@U) ) (!  (=> (and (and (= (type a@@119) DatatypeTypeType) (= (type b@@68) DatatypeTypeType)) (and (Options.Option.Some_q a@@119) (Options.Option.Some_q b@@68))) (and (=> (|Options.Option#Equal| a@@119 b@@68) (= (Options.Option.value a@@119) (Options.Option.value b@@68))) (=> (= (Options.Option.value a@@119) (Options.Option.value b@@68)) (|Options.Option#Equal| a@@119 b@@68)))) :qid |unknown.0:0| :skolemid |1543| :pattern ( (|Options.Option#Equal| a@@119 b@@68) (Options.Option.Some_q a@@119)) :pattern ( (|Options.Option#Equal| a@@119 b@@68) (Options.Option.Some_q b@@68)) )))
(assert (forall ((a@@120 T@U) (b@@69 T@U) ) (!  (=> (and (= (type a@@120) DatatypeTypeType) (= (type b@@69) DatatypeTypeType)) (and (=> (|Options.Option#Equal| a@@120 b@@69) (= a@@120 b@@69)) (=> (= a@@120 b@@69) (|Options.Option#Equal| a@@120 b@@69)))) :qid |unknown.0:0| :skolemid |1544| :pattern ( (|Options.Option#Equal| a@@120 b@@69)) )))
(assert (= (type Tclass.Options.__default) TyType))
(assert (= (Tag Tclass.Options.__default) Tagclass.Options.__default))
(assert (forall ((bx@@97 T@U) ) (!  (=> (and (= (type bx@@97) BoxType) ($IsBox bx@@97 Tclass.Options.__default)) (and (= ($Box ($Unbox refType bx@@97)) bx@@97) ($Is ($Unbox refType bx@@97) Tclass.Options.__default))) :qid |unknown.0:0| :skolemid |1545| :pattern ( ($IsBox bx@@97 Tclass.Options.__default)) )))
(assert (forall (($o@@18 T@U) ) (!  (=> (= (type $o@@18) refType) (and (=> ($Is $o@@18 Tclass.Options.__default) (or (= $o@@18 null) (= (dtype $o@@18) Tclass.Options.__default))) (=> (or (= $o@@18 null) (= (dtype $o@@18) Tclass.Options.__default)) ($Is $o@@18 Tclass.Options.__default)))) :qid |unknown.0:0| :skolemid |1546| :pattern ( ($Is $o@@18 Tclass.Options.__default)) )))
(assert (forall (($o@@19 T@U) ($h@@46 T@U) ) (!  (=> (and (= (type $o@@19) refType) (= (type $h@@46) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@19 Tclass.Options.__default $h@@46) (or (= $o@@19 null) (U_2_bool (MapType1Select (MapType0Select $h@@46 $o@@19) alloc)))) (=> (or (= $o@@19 null) (U_2_bool (MapType1Select (MapType0Select $h@@46 $o@@19) alloc))) ($IsAlloc $o@@19 Tclass.Options.__default $h@@46)))) :qid |unknown.0:0| :skolemid |1547| :pattern ( ($IsAlloc $o@@19 Tclass.Options.__default $h@@46)) )))
(assert (forall ((arg0@@233 T@U) (arg1@@108 T@U) (arg2@@64 T@U) (arg3@@41 T@U) (arg4@@28 T@U) ) (! (= (type (Options.__default.MapOption arg0@@233 arg1@@108 arg2@@64 arg3@@41 arg4@@28)) DatatypeTypeType) :qid |funType:Options.__default.MapOption| :pattern ( (Options.__default.MapOption arg0@@233 arg1@@108 arg2@@64 arg3@@41 arg4@@28)) )))
(assert (forall ((Options._default.MapOption$V0 T@U) (Options._default.MapOption$V1 T@U) ($h0@@0 T@U) ($h1@@0 T@U) (|opt#0| T@U) (|f#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.MapOption$V0) TyType) (= (type Options._default.MapOption$V1) TyType)) (= (type $h0@@0) (MapType0Type refType MapType1Type))) (= (type $h1@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0|) DatatypeTypeType)) (= (type |f#0@@19|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0 Options._default.MapOption$V1 $h0@@0 |opt#0| |f#0@@19|) (and ($Is |opt#0| (Tclass.Options.Option Options._default.MapOption$V0)) ($Is |f#0@@19| (Tclass._System.___hFunc1 Options._default.MapOption$V0 Options._default.MapOption$V1))))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0)))) (forall (($o@@20 T@U) ($f@@0 T@U) ) (! (let ((alpha@@7 (FieldTypeInv0 (type $f@@0)))) (=> (and (and (= (type $o@@20) refType) (= (type $f@@0) (FieldType alpha@@7))) (and (not (= $o@@20 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0|) (Reads1 Options._default.MapOption$V0 Options._default.MapOption$V1 $h0@@0 |f#0@@19| (Options.Option.value |opt#0|)) (|Set#Empty| BoxType)) ($Box $o@@20))))) (= (MapType1Select (MapType0Select $h0@@0 $o@@20) $f@@0) (MapType1Select (MapType0Select $h1@@0 $o@@20) $f@@0)))) :qid |unknown.0:0| :skolemid |1548| :no-pattern (type $o@@20) :no-pattern (type $f@@0) :no-pattern (U_2_int $o@@20) :no-pattern (U_2_bool $o@@20) :no-pattern (U_2_int $f@@0) :no-pattern (U_2_bool $f@@0) ))) (= (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h0@@0 |opt#0| |f#0@@19|) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1@@0 |opt#0| |f#0@@19|))) :qid |unknown.0:0| :skolemid |1549| :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1@@0 |opt#0| |f#0@@19|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@0 T@U) (Options._default.MapOption$V1@@0 T@U) ($Heap@@2 T@U) (|opt#0@@0| T@U) (|f#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@0) TyType) (= (type Options._default.MapOption$V1@@0) TyType)) (= (type $Heap@@2) (MapType0Type refType MapType1Type))) (= (type |opt#0@@0|) DatatypeTypeType)) (= (type |f#0@@20|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@20|) (and (and (and ($IsGoodHeap $Heap@@2) ($Is |opt#0@@0| (Tclass.Options.Option Options._default.MapOption$V0@@0))) ($Is |f#0@@20| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0))) (=> (Options.Option.Some_q |opt#0@@0|) (Requires1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |f#0@@20| (Options.Option.value |opt#0@@0|)))))) (and (and (and (=> (Options.Option.Some_q |opt#0@@0|) (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@20|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@20|)) (Options.Option.Some_q |opt#0@@0|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@20|)) (= (Options.Option.value (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@20|)) (Apply1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |f#0@@20| (Options.Option.value |opt#0@@0|))))) ($Is (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@20|) (Tclass.Options.Option Options._default.MapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |1550| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap@@2 |opt#0@@0| |f#0@@20|)) ))))
(assert (forall ((Options._default.MapOption$V0@@1 T@U) (Options._default.MapOption$V1@@1 T@U) ($Heap@@3 T@U) (|opt#0@@1| T@U) (|f#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@1) TyType) (= (type Options._default.MapOption$V1@@1) TyType)) (= (type $Heap@@3) (MapType0Type refType MapType1Type))) (= (type |opt#0@@1|) DatatypeTypeType)) (= (type |f#0@@21|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@3) ($Is |opt#0@@1| (Tclass.Options.Option Options._default.MapOption$V0@@1))) ($Is |f#0@@21| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1)))) (and (=> (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@3 |opt#0@@1| |f#0@@21|) (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@3 |f#0@@21| (Options.Option.value |opt#0@@1|)))) (=> (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@3 |f#0@@21| (Options.Option.value |opt#0@@1|))) (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@3 |opt#0@@1| |f#0@@21|)))) :qid |unknown.0:0| :skolemid |1551| :pattern ( (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@3 |opt#0@@1| |f#0@@21|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@2 T@U) (Options._default.MapOption$V1@@2 T@U) ($Heap@@4 T@U) (|opt#0@@2| T@U) (|f#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@2) TyType) (= (type Options._default.MapOption$V1@@2) TyType)) (= (type $Heap@@4) (MapType0Type refType MapType1Type))) (= (type |opt#0@@2|) DatatypeTypeType)) (= (type |f#0@@22|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@4 |opt#0@@2| |f#0@@22|) (and (and (and ($IsGoodHeap $Heap@@4) ($Is |opt#0@@2| (Tclass.Options.Option Options._default.MapOption$V0@@2))) ($Is |f#0@@22| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2))) (=> (Options.Option.Some_q |opt#0@@2|) (Requires1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@4 |f#0@@22| (Options.Option.value |opt#0@@2|)))))) (= (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@4 |opt#0@@2| |f#0@@22|) (ite (Options.Option.None_q |opt#0@@2|) |#Options.Option.None| (let ((|v#1| (Options.Option.value |opt#0@@2|))) (|#Options.Option.Some| (Apply1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@4 |f#0@@22| |v#1|)))))) :qid |unknown.0:0| :skolemid |1552| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@4 |opt#0@@2| |f#0@@22|)) ))))
(assert (forall ((arg0@@234 T@U) (arg1@@109 T@U) (arg2@@65 T@U) (arg3@@42 T@U) (arg4@@29 T@U) ) (! (= (type (Options.__default.FlatMapOption arg0@@234 arg1@@109 arg2@@65 arg3@@42 arg4@@29)) DatatypeTypeType) :qid |funType:Options.__default.FlatMapOption| :pattern ( (Options.__default.FlatMapOption arg0@@234 arg1@@109 arg2@@65 arg3@@42 arg4@@29)) )))
(assert (forall ((Options._default.FlatMapOption$V0 T@U) (Options._default.FlatMapOption$V1 T@U) ($h0@@1 T@U) ($h1@@1 T@U) (|opt#0@@3| T@U) (|f#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.FlatMapOption$V0) TyType) (= (type Options._default.FlatMapOption$V1) TyType)) (= (type $h0@@1) (MapType0Type refType MapType1Type))) (= (type $h1@@1) (MapType0Type refType MapType1Type))) (= (type |opt#0@@3|) DatatypeTypeType)) (= (type |f#0@@23|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@1) ($IsGoodHeap $h1@@1)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@1 |opt#0@@3| |f#0@@23|) (and ($Is |opt#0@@3| (Tclass.Options.Option Options._default.FlatMapOption$V0)) ($Is |f#0@@23| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1)))))) (and ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1)))) (forall (($o@@21 T@U) ($f@@1 T@U) ) (! (let ((alpha@@8 (FieldTypeInv0 (type $f@@1)))) (=> (and (and (= (type $o@@21) refType) (= (type $f@@1) (FieldType alpha@@8))) (and (not (= $o@@21 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0@@3|) (Reads1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1) $h0@@1 |f#0@@23| (Options.Option.value |opt#0@@3|)) (|Set#Empty| BoxType)) ($Box $o@@21))))) (= (MapType1Select (MapType0Select $h0@@1 $o@@21) $f@@1) (MapType1Select (MapType0Select $h1@@1 $o@@21) $f@@1)))) :qid |unknown.0:0| :skolemid |1553| :no-pattern (type $o@@21) :no-pattern (type $f@@1) :no-pattern (U_2_int $o@@21) :no-pattern (U_2_bool $o@@21) :no-pattern (U_2_int $f@@1) :no-pattern (U_2_bool $f@@1) ))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@1 |opt#0@@3| |f#0@@23|) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@1 |opt#0@@3| |f#0@@23|))) :qid |unknown.0:0| :skolemid |1554| :pattern ( ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@1 |opt#0@@3| |f#0@@23|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@0 T@U) (Options._default.FlatMapOption$V1@@0 T@U) ($Heap@@5 T@U) (|opt#0@@4| T@U) (|f#0@@24| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@0) TyType) (= (type Options._default.FlatMapOption$V1@@0) TyType)) (= (type $Heap@@5) (MapType0Type refType MapType1Type))) (= (type |opt#0@@4|) DatatypeTypeType)) (= (type |f#0@@24|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@5 |opt#0@@4| |f#0@@24|) (and (and (and ($IsGoodHeap $Heap@@5) ($Is |opt#0@@4| (Tclass.Options.Option Options._default.FlatMapOption$V0@@0))) ($Is |f#0@@24| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) (=> (Options.Option.Some_q |opt#0@@4|) (Requires1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@5 |f#0@@24| (Options.Option.value |opt#0@@4|)))))) (and (and (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@5 |f#0@@24| (Options.Option.value |opt#0@@4|))))) (Options.Option.Some_q (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@5 |opt#0@@4| |f#0@@24|))) (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@5 |f#0@@24| (Options.Option.value |opt#0@@4|))))) (= (Options.Option.value (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@5 |opt#0@@4| |f#0@@24|)) (Options.Option.value ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@5 |f#0@@24| (Options.Option.value |opt#0@@4|))))))) ($Is (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@5 |opt#0@@4| |f#0@@24|) (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |1555| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@5 |opt#0@@4| |f#0@@24|)) ))))
(assert (forall ((Options._default.FlatMapOption$V0@@1 T@U) (Options._default.FlatMapOption$V1@@1 T@U) ($Heap@@6 T@U) (|opt#0@@5| T@U) (|f#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@1) TyType) (= (type Options._default.FlatMapOption$V1@@1) TyType)) (= (type $Heap@@6) (MapType0Type refType MapType1Type))) (= (type |opt#0@@5|) DatatypeTypeType)) (= (type |f#0@@25|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@6) ($Is |opt#0@@5| (Tclass.Options.Option Options._default.FlatMapOption$V0@@1))) ($Is |f#0@@25| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1))))) (and (=> (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@6 |opt#0@@5| |f#0@@25|) (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@6 |f#0@@25| (Options.Option.value |opt#0@@5|)))) (=> (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@6 |f#0@@25| (Options.Option.value |opt#0@@5|))) (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@6 |opt#0@@5| |f#0@@25|)))) :qid |unknown.0:0| :skolemid |1556| :pattern ( (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@6 |opt#0@@5| |f#0@@25|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@2 T@U) (Options._default.FlatMapOption$V1@@2 T@U) ($Heap@@7 T@U) (|opt#0@@6| T@U) (|f#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@2) TyType) (= (type Options._default.FlatMapOption$V1@@2) TyType)) (= (type $Heap@@7) (MapType0Type refType MapType1Type))) (= (type |opt#0@@6|) DatatypeTypeType)) (= (type |f#0@@26|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@7 |opt#0@@6| |f#0@@26|) (and (and (and ($IsGoodHeap $Heap@@7) ($Is |opt#0@@6| (Tclass.Options.Option Options._default.FlatMapOption$V0@@2))) ($Is |f#0@@26| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2)))) (=> (Options.Option.Some_q |opt#0@@6|) (Requires1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@7 |f#0@@26| (Options.Option.value |opt#0@@6|)))))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@7 |opt#0@@6| |f#0@@26|) (ite (Options.Option.None_q |opt#0@@6|) |#Options.Option.None| (let ((|v#1@@0| (Options.Option.value |opt#0@@6|))) ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@7 |f#0@@26| |v#1@@0|)))))) :qid |unknown.0:0| :skolemid |1557| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@7 |opt#0@@6| |f#0@@26|)) ))))
(assert (= (type Tclass.Sequences.__default) TyType))
(assert (= (Tag Tclass.Sequences.__default) Tagclass.Sequences.__default))
(assert (forall ((bx@@98 T@U) ) (!  (=> (and (= (type bx@@98) BoxType) ($IsBox bx@@98 Tclass.Sequences.__default)) (and (= ($Box ($Unbox refType bx@@98)) bx@@98) ($Is ($Unbox refType bx@@98) Tclass.Sequences.__default))) :qid |unknown.0:0| :skolemid |1558| :pattern ( ($IsBox bx@@98 Tclass.Sequences.__default)) )))
(assert (forall (($o@@22 T@U) ) (!  (=> (= (type $o@@22) refType) (and (=> ($Is $o@@22 Tclass.Sequences.__default) (or (= $o@@22 null) (= (dtype $o@@22) Tclass.Sequences.__default))) (=> (or (= $o@@22 null) (= (dtype $o@@22) Tclass.Sequences.__default)) ($Is $o@@22 Tclass.Sequences.__default)))) :qid |unknown.0:0| :skolemid |1559| :pattern ( ($Is $o@@22 Tclass.Sequences.__default)) )))
(assert (forall (($o@@23 T@U) ($h@@47 T@U) ) (!  (=> (and (= (type $o@@23) refType) (= (type $h@@47) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@23 Tclass.Sequences.__default $h@@47) (or (= $o@@23 null) (U_2_bool (MapType1Select (MapType0Select $h@@47 $o@@23) alloc)))) (=> (or (= $o@@23 null) (U_2_bool (MapType1Select (MapType0Select $h@@47 $o@@23) alloc))) ($IsAlloc $o@@23 Tclass.Sequences.__default $h@@47)))) :qid |unknown.0:0| :skolemid |1560| :pattern ( ($IsAlloc $o@@23 Tclass.Sequences.__default $h@@47)) )))
(assert (forall ((arg0@@235 T@U) (arg1@@110 T@U) ) (! (= (type (Sequences.__default.Last arg0@@235 arg1@@110)) BoxType) :qid |funType:Sequences.__default.Last| :pattern ( (Sequences.__default.Last arg0@@235 arg1@@110)) )))
(assert  (=> true (forall ((Sequences._default.Last$E T@U) (|run#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E) TyType) (= (type |run#0|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E |run#0|) (and ($Is |run#0| (TSeq Sequences._default.Last$E)) (> (|Seq#Length| |run#0|) 0)))) ($IsBox (Sequences.__default.Last Sequences._default.Last$E |run#0|) Sequences._default.Last$E)) :qid |unknown.0:0| :skolemid |1561| :pattern ( (Sequences.__default.Last Sequences._default.Last$E |run#0|)) ))))
(assert (forall ((Sequences._default.Last$E@@0 T@U) (|run#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@0) TyType) (= (type |run#0@@0|) (SeqType BoxType))) ($Is |run#0@@0| (TSeq Sequences._default.Last$E@@0))) (and (=> (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|) (> (|Seq#Length| |run#0@@0|) 0)) (=> (> (|Seq#Length| |run#0@@0|) 0) (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|)))) :qid |unknown.0:0| :skolemid |1562| :pattern ( (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.Last$E@@1 T@U) (|run#0@@1| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@1) TyType) (= (type |run#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@1 |run#0@@1|) (and ($Is |run#0@@1| (TSeq Sequences._default.Last$E@@1)) (> (|Seq#Length| |run#0@@1|) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@1|) (|Seq#Index| |run#0@@1| (- (|Seq#Length| |run#0@@1|) 1)))) :qid |unknown.0:0| :skolemid |1563| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@1|)) ))))
(assert  (=> true (forall ((Sequences._default.Last$E@@2 T@U) (|run#0@@2| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@2) TyType) (= (type |run#0@@2|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@2 (Lit |run#0@@2|)) (and ($Is |run#0@@2| (TSeq Sequences._default.Last$E@@2)) (> (|Seq#Length| (Lit |run#0@@2|)) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@2|)) (|Seq#Index| (Lit |run#0@@2|) (- (|Seq#Length| (Lit |run#0@@2|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |1564| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@2|))) ))))
(assert (forall ((arg0@@236 T@U) (arg1@@111 T@U) ) (! (= (type (Sequences.__default.DropLast arg0@@236 arg1@@111)) (SeqType BoxType)) :qid |funType:Sequences.__default.DropLast| :pattern ( (Sequences.__default.DropLast arg0@@236 arg1@@111)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E T@U) (|run#0@@3| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E) TyType) (= (type |run#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E |run#0@@3|) (and ($Is |run#0@@3| (TSeq Sequences._default.DropLast$E)) (> (|Seq#Length| |run#0@@3|) 0)))) ($Is (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@3|) (TSeq Sequences._default.DropLast$E))) :qid |unknown.0:0| :skolemid |1565| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@3|)) ))))
(assert (forall ((Sequences._default.DropLast$E@@0 T@U) (|run#0@@4| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@0) TyType) (= (type |run#0@@4|) (SeqType BoxType))) ($Is |run#0@@4| (TSeq Sequences._default.DropLast$E@@0))) (and (=> (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|) (> (|Seq#Length| |run#0@@4|) 0)) (=> (> (|Seq#Length| |run#0@@4|) 0) (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|)))) :qid |unknown.0:0| :skolemid |1566| :pattern ( (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@4|)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@1 T@U) (|run#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@1) TyType) (= (type |run#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@1 |run#0@@5|) (and ($Is |run#0@@5| (TSeq Sequences._default.DropLast$E@@1)) (> (|Seq#Length| |run#0@@5|) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@5|) (|Seq#Take| |run#0@@5| (- (|Seq#Length| |run#0@@5|) 1)))) :qid |unknown.0:0| :skolemid |1567| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@5|)) ))))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@2 T@U) (|run#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@2) TyType) (= (type |run#0@@6|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@2 (Lit |run#0@@6|)) (and ($Is |run#0@@6| (TSeq Sequences._default.DropLast$E@@2)) (> (|Seq#Length| (Lit |run#0@@6|)) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@6|)) (|Seq#Take| (Lit |run#0@@6|) (- (|Seq#Length| (Lit |run#0@@6|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |1568| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@6|))) ))))
(assert (forall ((arg0@@237 T@U) (arg1@@112 T@U) ) (! (= (type (Sequences.__default.Set arg0@@237 arg1@@112)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.Set| :pattern ( (Sequences.__default.Set arg0@@237 arg1@@112)) )))
(assert  (=> true (forall ((Sequences._default.Set$T T@U) (|run#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T) TyType) (= (type |run#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T |run#0@@7|) ($Is |run#0@@7| (TSeq Sequences._default.Set$T)))) ($Is (Sequences.__default.Set Sequences._default.Set$T |run#0@@7|) (TSet Sequences._default.Set$T))) :qid |unknown.0:0| :skolemid |1569| :pattern ( (Sequences.__default.Set Sequences._default.Set$T |run#0@@7|)) ))))
(assert (forall ((Sequences._default.Set$T@@0 T@U) (|run#0@@8| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@0) TyType) (= (type |run#0@@8|) (SeqType BoxType))) ($Is |run#0@@8| (TSeq Sequences._default.Set$T@@0))) (and (=> (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|) true) (=> true (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|)))) :qid |unknown.0:0| :skolemid |1570| :pattern ( (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@8|)) )))
(assert (forall ((arg0@@238 T@U) (arg1@@113 T@U) (arg2@@66 Int) ) (! (= (type (|lambda#8| arg0@@238 arg1@@113 arg2@@66)) (MapType0Type BoxType boolType)) :qid |funType:lambda#8| :pattern ( (|lambda#8| arg0@@238 arg1@@113 arg2@@66)) )))
(assert  (=> true (forall ((Sequences._default.Set$T@@1 T@U) (|run#0@@9| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@1) TyType) (= (type |run#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@1 |run#0@@9|) ($Is |run#0@@9| (TSeq Sequences._default.Set$T@@1)))) (= (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@9|) (|lambda#8| Sequences._default.Set$T@@1 (|MultiSet#FromSeq| |run#0@@9|) 0))) :qid |unknown.0:0| :skolemid |1571| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.Set$T@@2 T@U) (|run#0@@10| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@2) TyType) (= (type |run#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@2 (Lit |run#0@@10|)) ($Is |run#0@@10| (TSeq Sequences._default.Set$T@@2)))) (= (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@10|)) (|lambda#8| Sequences._default.Set$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@10|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |1572| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@10|))) ))))
(assert (forall ((arg0@@239 T@U) (arg1@@114 T@U) ) (! (= (type (Sequences.__default.ISet arg0@@239 arg1@@114)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.ISet| :pattern ( (Sequences.__default.ISet arg0@@239 arg1@@114)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T T@U) (|run#0@@11| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T) TyType) (= (type |run#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T |run#0@@11|) ($Is |run#0@@11| (TSeq Sequences._default.ISet$T)))) ($Is (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@11|) (TISet Sequences._default.ISet$T))) :qid |unknown.0:0| :skolemid |1573| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@11|)) ))))
(assert (forall ((Sequences._default.ISet$T@@0 T@U) (|run#0@@12| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@0) TyType) (= (type |run#0@@12|) (SeqType BoxType))) ($Is |run#0@@12| (TSeq Sequences._default.ISet$T@@0))) (and (=> (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|) true) (=> true (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|)))) :qid |unknown.0:0| :skolemid |1574| :pattern ( (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@12|)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T@@1 T@U) (|run#0@@13| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@1) TyType) (= (type |run#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@1 |run#0@@13|) ($Is |run#0@@13| (TSeq Sequences._default.ISet$T@@1)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@13|) (|lambda#8| Sequences._default.ISet$T@@1 (|MultiSet#FromSeq| |run#0@@13|) 0))) :qid |unknown.0:0| :skolemid |1575| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@13|)) ))))
(assert  (=> true (forall ((Sequences._default.ISet$T@@2 T@U) (|run#0@@14| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@2) TyType) (= (type |run#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@2 (Lit |run#0@@14|)) ($Is |run#0@@14| (TSeq Sequences._default.ISet$T@@2)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@14|)) (|lambda#8| Sequences._default.ISet$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@14|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |1576| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@14|))) ))))
(assert (forall ((Sequences._default.NoDupes$T T@U) ($ly@@6 T@U) (|a#0@@12| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T) TyType) (= (type $ly@@6) LayerTypeType)) (= (type |a#0@@12|) (SeqType BoxType))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@6) |a#0@@12|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly@@6 |a#0@@12|)) (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly@@6 |a#0@@12|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@6) |a#0@@12|)))) :qid |unknown.0:0| :skolemid |1577| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@6) |a#0@@12|)) )))
(assert (forall ((Sequences._default.NoDupes$T@@0 T@U) ($ly@@7 T@U) (|a#0@@13| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T@@0) TyType) (= (type $ly@@7) LayerTypeType)) (= (type |a#0@@13|) (SeqType BoxType))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@7 |a#0@@13|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@13|)) (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@13|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@7 |a#0@@13|)))) :qid |unknown.0:0| :skolemid |1578| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 (AsFuelBottom $ly@@7) |a#0@@13|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@1 T@U) ($ly@@8 T@U) (|a#0@@14| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@1) TyType) (= (type $ly@@8) LayerTypeType)) (= (type |a#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@1 |a#0@@14|) ($Is |a#0@@14| (TSeq Sequences._default.NoDupes$T@@1)))) true) :qid |unknown.0:0| :skolemid |1579| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@1 $ly@@8 |a#0@@14|)) ))))
(assert (forall ((Sequences._default.NoDupes$T@@2 T@U) ($ly@@9 T@U) (|a#0@@15| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@2) TyType) (= (type $ly@@9) LayerTypeType)) (= (type |a#0@@15|) (SeqType BoxType))) ($Is |a#0@@15| (TSeq Sequences._default.NoDupes$T@@2))) (and (=> (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@9 |a#0@@15|) true) (=> true (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@9 |a#0@@15|)))) :qid |unknown.0:0| :skolemid |1580| :pattern ( (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@9 |a#0@@15|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@3 T@U) ($ly@@10 T@U) (|a#0@@16| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@3) TyType) (= (type $ly@@10) LayerTypeType)) (= (type |a#0@@16|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@3 |a#0@@16|) ($Is |a#0@@16| (TSeq Sequences._default.NoDupes$T@@3)))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@10) |a#0@@16|) (forall ((|i#0@@23| Int) (|j#0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@23|) (< |i#0@@23| (|Seq#Length| |a#0@@16|))) (and (<= (LitInt 0) |j#0|) (< |j#0| (|Seq#Length| |a#0@@16|)))) (not (= |i#0@@23| |j#0|))) (not (= (|Seq#Index| |a#0@@16| |i#0@@23|) (|Seq#Index| |a#0@@16| |j#0|))))) :qid |sequence.54:13| :skolemid |1581| :pattern ( (|Seq#Index| |a#0@@16| |j#0|) (|Seq#Index| |a#0@@16| |i#0@@23|)) ))) (=> (forall ((|i#0@@24| Int) (|j#0@@0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@24|) (< |i#0@@24| (|Seq#Length| |a#0@@16|))) (and (<= (LitInt 0) |j#0@@0|) (< |j#0@@0| (|Seq#Length| |a#0@@16|)))) (not (= |i#0@@24| |j#0@@0|))) (not (= (|Seq#Index| |a#0@@16| |i#0@@24|) (|Seq#Index| |a#0@@16| |j#0@@0|))))) :qid |sequence.54:13| :skolemid |1581| :pattern ( (|Seq#Index| |a#0@@16| |j#0@@0|) (|Seq#Index| |a#0@@16| |i#0@@24|)) )) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@10) |a#0@@16|)))) :qid |unknown.0:0| :skolemid |1582| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@10) |a#0@@16|)) ))))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@4 T@U) ($ly@@11 T@U) (|a#0@@17| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@4) TyType) (= (type $ly@@11) LayerTypeType)) (= (type |a#0@@17|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@4 (Lit |a#0@@17|)) ($Is |a#0@@17| (TSeq Sequences._default.NoDupes$T@@4)))) (and (=> (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@11) (Lit |a#0@@17|)) (forall ((|i#1| Int) (|j#1| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1|) (< |i#1| (|Seq#Length| (Lit |a#0@@17|)))) (and (<= (LitInt 0) |j#1|) (< |j#1| (|Seq#Length| (Lit |a#0@@17|))))) (not (= |i#1| |j#1|))) (not (= (|Seq#Index| (Lit |a#0@@17|) |i#1|) (|Seq#Index| (Lit |a#0@@17|) |j#1|))))) :qid |sequence.54:13| :skolemid |1583| :pattern ( (|Seq#Index| |a#0@@17| |j#1|) (|Seq#Index| |a#0@@17| |i#1|)) ))) (=> (forall ((|i#1@@0| Int) (|j#1@@0| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@0|) (< |i#1@@0| (|Seq#Length| (Lit |a#0@@17|)))) (and (<= (LitInt 0) |j#1@@0|) (< |j#1@@0| (|Seq#Length| (Lit |a#0@@17|))))) (not (= |i#1@@0| |j#1@@0|))) (not (= (|Seq#Index| (Lit |a#0@@17|) |i#1@@0|) (|Seq#Index| (Lit |a#0@@17|) |j#1@@0|))))) :qid |sequence.54:13| :skolemid |1583| :pattern ( (|Seq#Index| |a#0@@17| |j#1@@0|) (|Seq#Index| |a#0@@17| |i#1@@0|)) )) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@11) (Lit |a#0@@17|))))) :qid |unknown.0:0| :weight 3 :skolemid |1584| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@11) (Lit |a#0@@17|))) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T T@U) (|s#0| T@U) (|e#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T) TyType) (= (type |s#0|) (SeqType BoxType))) (= (type |e#0|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T |s#0| |e#0|) (and (and ($Is |s#0| (TSeq Sequences._default.IndexOf$T)) ($IsBox |e#0| Sequences._default.IndexOf$T)) (|Seq#Contains| |s#0| |e#0|)))) (and (and (<= (LitInt 0) (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|)) (< (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|) (|Seq#Length| |s#0|))) (= (|Seq#Index| |s#0| (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|)) |e#0|))) :qid |unknown.0:0| :skolemid |1585| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|)) ))))
(assert (forall ((Sequences._default.IndexOf$T@@0 T@U) ($Heap@@8 T@U) (|s#0@@0| T@U) (|e#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@0) TyType) (= (type $Heap@@8) (MapType0Type refType MapType1Type))) (= (type |s#0@@0|) (SeqType BoxType))) (= (type |e#0@@0|) BoxType)) (and (and ($IsGoodHeap $Heap@@8) ($Is |s#0@@0| (TSeq Sequences._default.IndexOf$T@@0))) ($IsBox |e#0@@0| Sequences._default.IndexOf$T@@0))) (and (=> (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@0| |e#0@@0|) (|Seq#Contains| |s#0@@0| |e#0@@0|)) (=> (|Seq#Contains| |s#0@@0| |e#0@@0|) (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@0| |e#0@@0|)))) :qid |unknown.0:0| :skolemid |1586| :pattern ( (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@0| |e#0@@0|) ($IsGoodHeap $Heap@@8)) )))
(assert (forall ((Sequences._default.IndexOf$T@@1 T@U) (s@@45 T@U) (e T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T@@1) TyType) (= (type s@@45) (SeqType BoxType))) (= (type e) BoxType)) (|$let#0$canCall| Sequences._default.IndexOf$T@@1 s@@45 e)) (and (and (<= (LitInt 0) (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e)) (< (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e) (|Seq#Length| s@@45))) (= (|Seq#Index| s@@45 (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e)) e))) :qid |sequence.105:5| :skolemid |1587| :pattern ( (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@45 e)) )))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@2 T@U) ($Heap@@9 T@U) (|s#0@@1| T@U) (|e#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@2) TyType) (= (type $Heap@@9) (MapType0Type refType MapType1Type))) (= (type |s#0@@1|) (SeqType BoxType))) (= (type |e#0@@1|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) (and (and (and ($IsGoodHeap $Heap@@9) ($Is |s#0@@1| (TSeq Sequences._default.IndexOf$T@@2))) ($IsBox |e#0@@1| Sequences._default.IndexOf$T@@2)) (|Seq#Contains| |s#0@@1| |e#0@@1|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) (let ((|i#0@@25| (|$let#0_i| Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|))) |i#0@@25|)))) :qid |unknown.0:0| :skolemid |1588| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) ($IsGoodHeap $Heap@@9)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@3 T@U) ($Heap@@10 T@U) (|s#0@@2| T@U) (|e#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@3) TyType) (= (type $Heap@@10) (MapType0Type refType MapType1Type))) (= (type |s#0@@2|) (SeqType BoxType))) (= (type |e#0@@2|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) (and (and (and ($IsGoodHeap $Heap@@10) ($Is |s#0@@2| (TSeq Sequences._default.IndexOf$T@@3))) ($IsBox |e#0@@2| Sequences._default.IndexOf$T@@3)) (|Seq#Contains| |s#0@@2| |e#0@@2|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) (let ((|i#1@@1| (|$let#0_i| Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|))) |i#1@@1|)))) :qid |unknown.0:0| :weight 3 :skolemid |1589| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) ($IsGoodHeap $Heap@@10)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@4 T@U) ($Heap@@11 T@U) (|s#0@@3| T@U) (|e#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@4) TyType) (= (type $Heap@@11) (MapType0Type refType MapType1Type))) (= (type |s#0@@3|) (SeqType BoxType))) (= (type |e#0@@3|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) (and (and (and ($IsGoodHeap $Heap@@11) ($Is |s#0@@3| (TSeq Sequences._default.IndexOf$T@@4))) ($IsBox |e#0@@3| Sequences._default.IndexOf$T@@4)) (|Seq#Contains| |s#0@@3| |e#0@@3|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) (let ((|i#2| (|$let#0_i| Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)))) |i#2|)))) :qid |unknown.0:0| :weight 3 :skolemid |1590| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) ($IsGoodHeap $Heap@@11)) ))))
(assert (forall ((arg0@@240 T@U) (arg1@@115 Int) ) (! (= (type (Sequences.__default.Range arg0@@240 arg1@@115)) (SeqType BoxType)) :qid |funType:Sequences.__default.Range| :pattern ( (Sequences.__default.Range arg0@@240 arg1@@115)) )))
(assert (forall (($ly@@12 T@U) (|n#0| Int) ) (!  (=> (= (type $ly@@12) LayerTypeType) (= (Sequences.__default.Range ($LS $ly@@12) |n#0|) (Sequences.__default.Range $ly@@12 |n#0|))) :qid |sequence.109:22| :skolemid |1591| :pattern ( (Sequences.__default.Range ($LS $ly@@12) |n#0|)) )))
(assert (forall (($ly@@13 T@U) (|n#0@@0| Int) ) (!  (=> (= (type $ly@@13) LayerTypeType) (= (Sequences.__default.Range $ly@@13 |n#0@@0|) (Sequences.__default.Range $LZ |n#0@@0|))) :qid |sequence.109:22| :skolemid |1592| :pattern ( (Sequences.__default.Range (AsFuelBottom $ly@@13) |n#0@@0|)) )))
(assert  (=> true (forall (($ly@@14 T@U) (|n#0@@1| Int) ) (!  (=> (and (= (type $ly@@14) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@1|) (>= |n#0@@1| (LitInt 0)))) (and (and (= (|Seq#Length| (Sequences.__default.Range $ly@@14 |n#0@@1|)) |n#0@@1|) (forall ((|i#0@@26| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@26|) (< |i#0@@26| |n#0@@1|)) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@14 |n#0@@1|) |i#0@@26|))) |i#0@@26|)) :qid |sequence.112:20| :skolemid |1593| :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@14 |n#0@@1|) |i#0@@26|))) ))) ($Is (Sequences.__default.Range $ly@@14 |n#0@@1|) (TSeq TInt)))) :qid |sequence.109:22| :skolemid |1594| :pattern ( (Sequences.__default.Range $ly@@14 |n#0@@1|)) ))))
(assert (forall (($ly@@15 T@U) (|n#0@@2| Int) ) (!  (=> (= (type $ly@@15) LayerTypeType) (and (=> (|Sequences.__default.Range#requires| $ly@@15 |n#0@@2|) (>= |n#0@@2| (LitInt 0))) (=> (>= |n#0@@2| (LitInt 0)) (|Sequences.__default.Range#requires| $ly@@15 |n#0@@2|)))) :qid |sequence.109:22| :skolemid |1595| :pattern ( (|Sequences.__default.Range#requires| $ly@@15 |n#0@@2|)) )))
(assert  (=> true (forall (($ly@@16 T@U) (|n#0@@3| Int) ) (!  (=> (and (= (type $ly@@16) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@3|) (>= |n#0@@3| (LitInt 0)))) (and (=> (not (= |n#0@@3| (LitInt 0))) (|Sequences.__default.Range#canCall| (- |n#0@@3| 1))) (= (Sequences.__default.Range ($LS $ly@@16) |n#0@@3|) (ite (= |n#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range $ly@@16 (- |n#0@@3| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (- |n#0@@3| 1))))))))) :qid |sequence.109:22| :skolemid |1596| :pattern ( (Sequences.__default.Range ($LS $ly@@16) |n#0@@3|)) ))))
(assert  (=> true (forall (($ly@@17 T@U) (|n#0@@4| Int) ) (!  (=> (and (= (type $ly@@17) LayerTypeType) (or (|Sequences.__default.Range#canCall| (LitInt |n#0@@4|)) (>= (LitInt |n#0@@4|) (LitInt 0)))) (and (=> (not (= (LitInt |n#0@@4|) (LitInt 0))) (|Sequences.__default.Range#canCall| (LitInt (- |n#0@@4| 1)))) (= (Sequences.__default.Range ($LS $ly@@17) (LitInt |n#0@@4|)) (ite (= (LitInt |n#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range ($LS $ly@@17) (LitInt (- |n#0@@4| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt (- |n#0@@4| 1)))))))))) :qid |sequence.109:22| :weight 3 :skolemid |1597| :pattern ( (Sequences.__default.Range ($LS $ly@@17) (LitInt |n#0@@4|))) ))))
(assert (forall ((arg0@@241 T@U) (arg1@@116 T@U) (arg2@@67 T@U) (arg3@@43 T@U) (arg4@@30 T@U) (arg5@@15 T@U) ) (! (= (type (Sequences.__default.Apply arg0@@241 arg1@@116 arg2@@67 arg3@@43 arg4@@30 arg5@@15)) (SeqType BoxType)) :qid |funType:Sequences.__default.Apply| :pattern ( (Sequences.__default.Apply arg0@@241 arg1@@116 arg2@@67 arg3@@43 arg4@@30 arg5@@15)) )))
(assert (forall ((Sequences._default.Apply$E T@U) (Sequences._default.Apply$R T@U) ($ly@@18 T@U) ($Heap@@12 T@U) (|f#0@@27| T@U) (|run#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E) TyType) (= (type Sequences._default.Apply$R) TyType)) (= (type $ly@@18) LayerTypeType)) (= (type $Heap@@12) (MapType0Type refType MapType1Type))) (= (type |f#0@@27|) HandleTypeType)) (= (type |run#0@@15|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@18) $Heap@@12 |f#0@@27| |run#0@@15|) (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R $ly@@18 $Heap@@12 |f#0@@27| |run#0@@15|))) :qid |unknown.0:0| :skolemid |1598| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@18) $Heap@@12 |f#0@@27| |run#0@@15|)) )))
(assert (forall ((Sequences._default.Apply$E@@0 T@U) (Sequences._default.Apply$R@@0 T@U) ($ly@@19 T@U) ($Heap@@13 T@U) (|f#0@@28| T@U) (|run#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E@@0) TyType) (= (type Sequences._default.Apply$R@@0) TyType)) (= (type $ly@@19) LayerTypeType)) (= (type $Heap@@13) (MapType0Type refType MapType1Type))) (= (type |f#0@@28|) HandleTypeType)) (= (type |run#0@@16|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $ly@@19 $Heap@@13 |f#0@@28| |run#0@@16|) (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $LZ $Heap@@13 |f#0@@28| |run#0@@16|))) :qid |unknown.0:0| :skolemid |1599| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 (AsFuelBottom $ly@@19) $Heap@@13 |f#0@@28| |run#0@@16|)) )))
(assert (forall ((Sequences._default.Apply$E@@1 T@U) (Sequences._default.Apply$R@@1 T@U) ($ly@@20 T@U) ($h0@@2 T@U) ($h1@@2 T@U) (|f#0@@29| T@U) (|run#0@@17| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@1) TyType) (= (type Sequences._default.Apply$R@@1) TyType)) (= (type $ly@@20) LayerTypeType)) (= (type $h0@@2) (MapType0Type refType MapType1Type))) (= (type $h1@@2) (MapType0Type refType MapType1Type))) (= (type |f#0@@29|) HandleTypeType)) (= (type |run#0@@17|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@2) ($IsGoodHeap $h1@@2)) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@2 |f#0@@29| |run#0@@17|) (and ($Is |f#0@@29| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1)) ($Is |run#0@@17| (TSeq Sequences._default.Apply$E@@1))))) (and ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2)))) (forall (($o@@24 T@U) ($f@@2 T@U) ) (! (let ((alpha@@9 (FieldTypeInv0 (type $f@@2)))) (=> (and (and (= (type $o@@24) refType) (= (type $f@@2) (FieldType alpha@@9))) (and (not (= $o@@24 null)) (exists ((|i#0@@27| Int) (|o#0| T@U) ) (!  (and (= (type |o#0|) refType) (and (and ($Is |o#0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@27|) (< |i#0@@27| (|Seq#Length| |run#0@@17|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@2 |f#0@@29| (|Seq#Index| |run#0@@17| |i#0@@27|)) ($Box |o#0|))))) (= ($Box $o@@24) ($Box |o#0|)))) :qid |sequence.121:15| :skolemid |1600| :pattern ( (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@2 |f#0@@29| (|Seq#Index| |run#0@@17| |i#0@@27|)) ($Box |o#0|))) )))) (= (MapType1Select (MapType0Select $h0@@2 $o@@24) $f@@2) (MapType1Select (MapType0Select $h1@@2 $o@@24) $f@@2)))) :qid |unknown.0:0| :skolemid |1601| :no-pattern (type $o@@24) :no-pattern (type $f@@2) :no-pattern (U_2_int $o@@24) :no-pattern (U_2_bool $o@@24) :no-pattern (U_2_int $f@@2) :no-pattern (U_2_bool $f@@2) ))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@20 $h0@@2 |f#0@@29| |run#0@@17|) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@20 $h1@@2 |f#0@@29| |run#0@@17|))) :qid |unknown.0:0| :skolemid |1602| :pattern ( ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@20 $h1@@2 |f#0@@29| |run#0@@17|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@2 T@U) (Sequences._default.Apply$R@@2 T@U) ($ly@@21 T@U) ($Heap@@14 T@U) (|f#0@@30| T@U) (|run#0@@18| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@2) TyType) (= (type Sequences._default.Apply$R@@2) TyType)) (= (type $ly@@21) LayerTypeType)) (= (type $Heap@@14) (MapType0Type refType MapType1Type))) (= (type |f#0@@30|) HandleTypeType)) (= (type |run#0@@18|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@14 |f#0@@30| |run#0@@18|) (and (and (and ($IsGoodHeap $Heap@@14) ($Is |f#0@@30| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2))) ($Is |run#0@@18| (TSeq Sequences._default.Apply$E@@2))) (forall ((|i#1@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@2|) (< |i#1@@2| (|Seq#Length| |run#0@@18|))) (Requires1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@14 |f#0@@30| (|Seq#Index| |run#0@@18| |i#1@@2|)))) :qid |sequence.118:21| :skolemid |1603| :pattern ( (|Seq#Index| |run#0@@18| |i#1@@2|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@21 $Heap@@14 |f#0@@30| |run#0@@18|)) (|Seq#Length| |run#0@@18|)) (forall ((|i#2@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@0|) (< |i#2@@0| (|Seq#Length| |run#0@@18|))) (= (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@21 $Heap@@14 |f#0@@30| |run#0@@18|) |i#2@@0|) (Apply1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@14 |f#0@@30| (|Seq#Index| |run#0@@18| |i#2@@0|))))) :qid |sequence.120:20| :skolemid |1604| :pattern ( (|Seq#Index| |run#0@@18| |i#2@@0|)) :pattern ( (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@21 $Heap@@14 |f#0@@30| |run#0@@18|) |i#2@@0|)) ))) ($Is (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@21 $Heap@@14 |f#0@@30| |run#0@@18|) (TSeq Sequences._default.Apply$R@@2)))) :qid |unknown.0:0| :skolemid |1605| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@21 $Heap@@14 |f#0@@30| |run#0@@18|)) ))))
(assert (forall ((Sequences._default.Apply$E@@3 T@U) (Sequences._default.Apply$R@@3 T@U) ($ly@@22 T@U) ($Heap@@15 T@U) (|f#0@@31| T@U) (|run#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@3) TyType) (= (type Sequences._default.Apply$R@@3) TyType)) (= (type $ly@@22) LayerTypeType)) (= (type $Heap@@15) (MapType0Type refType MapType1Type))) (= (type |f#0@@31|) HandleTypeType)) (= (type |run#0@@19|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@15) ($Is |f#0@@31| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3))) ($Is |run#0@@19| (TSeq Sequences._default.Apply$E@@3)))) (and (=> (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@22 $Heap@@15 |f#0@@31| |run#0@@19|) (forall ((|i#3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3|) (< |i#3| (|Seq#Length| |run#0@@19|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@15 |f#0@@31| (|Seq#Index| |run#0@@19| |i#3|)))) :qid |sequence.118:21| :skolemid |1606| :pattern ( (|Seq#Index| |run#0@@19| |i#3|)) ))) (=> (forall ((|i#3@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@0|) (< |i#3@@0| (|Seq#Length| |run#0@@19|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@15 |f#0@@31| (|Seq#Index| |run#0@@19| |i#3@@0|)))) :qid |sequence.118:21| :skolemid |1606| :pattern ( (|Seq#Index| |run#0@@19| |i#3@@0|)) )) (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@22 $Heap@@15 |f#0@@31| |run#0@@19|)))) :qid |unknown.0:0| :skolemid |1607| :pattern ( (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@22 $Heap@@15 |f#0@@31| |run#0@@19|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@4 T@U) (Sequences._default.Apply$R@@4 T@U) ($ly@@23 T@U) ($Heap@@16 T@U) (|f#0@@32| T@U) (|run#0@@20| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@4) TyType) (= (type Sequences._default.Apply$R@@4) TyType)) (= (type $ly@@23) LayerTypeType)) (= (type $Heap@@16) (MapType0Type refType MapType1Type))) (= (type |f#0@@32|) HandleTypeType)) (= (type |run#0@@20|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@16 |f#0@@32| |run#0@@20|) (and (and (and ($IsGoodHeap $Heap@@16) ($Is |f#0@@32| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4))) ($Is |run#0@@20| (TSeq Sequences._default.Apply$E@@4))) (forall ((|i#3@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@1|) (< |i#3@@1| (|Seq#Length| |run#0@@20|))) (Requires1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@16 |f#0@@32| (|Seq#Index| |run#0@@20| |i#3@@1|)))) :qid |sequence.118:21| :skolemid |1606| :pattern ( (|Seq#Index| |run#0@@20| |i#3@@1|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@20|) (LitInt 0))) (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@16 |f#0@@32| (|Seq#Drop| |run#0@@20| (LitInt 1)))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@23) $Heap@@16 |f#0@@32| |run#0@@20|) (ite (= (|Seq#Length| |run#0@@20|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Apply1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@16 |f#0@@32| (|Seq#Index| |run#0@@20| (LitInt 0)))) (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $ly@@23 $Heap@@16 |f#0@@32| (|Seq#Drop| |run#0@@20| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |1608| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@23) $Heap@@16 |f#0@@32| |run#0@@20|)) ))))
(assert (forall ((arg0@@242 T@U) (arg1@@117 T@U) (arg2@@68 T@U) (arg3@@44 T@U) (arg4@@31 T@U) (arg5@@16 T@U) ) (! (= (type (Sequences.__default.ApplyOpaque arg0@@242 arg1@@117 arg2@@68 arg3@@44 arg4@@31 arg5@@16)) (SeqType BoxType)) :qid |funType:Sequences.__default.ApplyOpaque| :pattern ( (Sequences.__default.ApplyOpaque arg0@@242 arg1@@117 arg2@@68 arg3@@44 arg4@@31 arg5@@16)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E T@U) (Sequences._default.ApplyOpaque$R T@U) ($ly@@24 T@U) ($Heap@@17 T@U) (|f#0@@33| T@U) (|run#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E) TyType) (= (type Sequences._default.ApplyOpaque$R) TyType)) (= (type $ly@@24) LayerTypeType)) (= (type $Heap@@17) (MapType0Type refType MapType1Type))) (= (type |f#0@@33|) HandleTypeType)) (= (type |run#0@@21|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@24) $Heap@@17 |f#0@@33| |run#0@@21|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R $ly@@24 $Heap@@17 |f#0@@33| |run#0@@21|))) :qid |unknown.0:0| :skolemid |1609| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@24) $Heap@@17 |f#0@@33| |run#0@@21|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@0 T@U) (Sequences._default.ApplyOpaque$R@@0 T@U) ($ly@@25 T@U) ($Heap@@18 T@U) (|f#0@@34| T@U) (|run#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@0) TyType) (= (type Sequences._default.ApplyOpaque$R@@0) TyType)) (= (type $ly@@25) LayerTypeType)) (= (type $Heap@@18) (MapType0Type refType MapType1Type))) (= (type |f#0@@34|) HandleTypeType)) (= (type |run#0@@22|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $ly@@25 $Heap@@18 |f#0@@34| |run#0@@22|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $LZ $Heap@@18 |f#0@@34| |run#0@@22|))) :qid |unknown.0:0| :skolemid |1610| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 (AsFuelBottom $ly@@25) $Heap@@18 |f#0@@34| |run#0@@22|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@1 T@U) (Sequences._default.ApplyOpaque$R@@1 T@U) ($ly@@26 T@U) ($h0@@3 T@U) ($h1@@3 T@U) (|f#0@@35| T@U) (|run#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@1) TyType) (= (type Sequences._default.ApplyOpaque$R@@1) TyType)) (= (type $ly@@26) LayerTypeType)) (= (type $h0@@3) (MapType0Type refType MapType1Type))) (= (type $h1@@3) (MapType0Type refType MapType1Type))) (= (type |f#0@@35|) HandleTypeType)) (= (type |run#0@@23|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@3) ($IsGoodHeap $h1@@3)) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@3 |f#0@@35| |run#0@@23|) (and ($Is |f#0@@35| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1)) ($Is |run#0@@23| (TSeq Sequences._default.ApplyOpaque$E@@1))))) (and ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3)))) (forall (($o@@25 T@U) ($f@@3 T@U) ) (! (let ((alpha@@10 (FieldTypeInv0 (type $f@@3)))) (=> (and (and (= (type $o@@25) refType) (= (type $f@@3) (FieldType alpha@@10))) (and (not (= $o@@25 null)) (exists ((|i#0@@28| Int) (|o#0@@0| T@U) ) (!  (and (= (type |o#0@@0|) refType) (and (and ($Is |o#0@@0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@28|) (< |i#0@@28| (|Seq#Length| |run#0@@23|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@3 |f#0@@35| (|Seq#Index| |run#0@@23| |i#0@@28|)) ($Box |o#0@@0|))))) (= ($Box $o@@25) ($Box |o#0@@0|)))) :qid |sequence.132:15| :skolemid |1611| :pattern ( (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@3 |f#0@@35| (|Seq#Index| |run#0@@23| |i#0@@28|)) ($Box |o#0@@0|))) )))) (= (MapType1Select (MapType0Select $h0@@3 $o@@25) $f@@3) (MapType1Select (MapType0Select $h1@@3 $o@@25) $f@@3)))) :qid |unknown.0:0| :skolemid |1612| :no-pattern (type $o@@25) :no-pattern (type $f@@3) :no-pattern (U_2_int $o@@25) :no-pattern (U_2_bool $o@@25) :no-pattern (U_2_int $f@@3) :no-pattern (U_2_bool $f@@3) ))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@26 $h0@@3 |f#0@@35| |run#0@@23|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@26 $h1@@3 |f#0@@35| |run#0@@23|))) :qid |unknown.0:0| :skolemid |1613| :pattern ( ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@26 $h1@@3 |f#0@@35| |run#0@@23|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@2 T@U) (Sequences._default.ApplyOpaque$R@@2 T@U) ($ly@@27 T@U) ($Heap@@19 T@U) (|f#0@@36| T@U) (|run#0@@24| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@2) TyType) (= (type Sequences._default.ApplyOpaque$R@@2) TyType)) (= (type $ly@@27) LayerTypeType)) (= (type $Heap@@19) (MapType0Type refType MapType1Type))) (= (type |f#0@@36|) HandleTypeType)) (= (type |run#0@@24|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@19 |f#0@@36| |run#0@@24|) (and (and (and ($IsGoodHeap $Heap@@19) ($Is |f#0@@36| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2))) ($Is |run#0@@24| (TSeq Sequences._default.ApplyOpaque$E@@2))) (forall ((|i#1@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@3|) (< |i#1@@3| (|Seq#Length| |run#0@@24|))) (Requires1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@19 |f#0@@36| (|Seq#Index| |run#0@@24| |i#1@@3|)))) :qid |sequence.129:21| :skolemid |1614| :pattern ( (|Seq#Index| |run#0@@24| |i#1@@3|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@27 $Heap@@19 |f#0@@36| |run#0@@24|)) (|Seq#Length| |run#0@@24|)) (forall ((|i#2@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@1|) (< |i#2@@1| (|Seq#Length| |run#0@@24|))) (= (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@27 $Heap@@19 |f#0@@36| |run#0@@24|) |i#2@@1|) (Apply1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@19 |f#0@@36| (|Seq#Index| |run#0@@24| |i#2@@1|))))) :qid |sequence.131:20| :skolemid |1615| :pattern ( (|Seq#Index| |run#0@@24| |i#2@@1|)) :pattern ( (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@27 $Heap@@19 |f#0@@36| |run#0@@24|) |i#2@@1|)) ))) ($Is (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@27 $Heap@@19 |f#0@@36| |run#0@@24|) (TSeq Sequences._default.ApplyOpaque$R@@2)))) :qid |unknown.0:0| :skolemid |1616| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@27 $Heap@@19 |f#0@@36| |run#0@@24|)) ))))
(assert (forall ((Sequences._default.ApplyOpaque$E@@3 T@U) (Sequences._default.ApplyOpaque$R@@3 T@U) ($ly@@28 T@U) ($Heap@@20 T@U) (|f#0@@37| T@U) (|run#0@@25| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@3) TyType) (= (type Sequences._default.ApplyOpaque$R@@3) TyType)) (= (type $ly@@28) LayerTypeType)) (= (type $Heap@@20) (MapType0Type refType MapType1Type))) (= (type |f#0@@37|) HandleTypeType)) (= (type |run#0@@25|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@20) ($Is |f#0@@37| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3))) ($Is |run#0@@25| (TSeq Sequences._default.ApplyOpaque$E@@3)))) (and (=> (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@28 $Heap@@20 |f#0@@37| |run#0@@25|) (forall ((|i#3@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@2|) (< |i#3@@2| (|Seq#Length| |run#0@@25|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@20 |f#0@@37| (|Seq#Index| |run#0@@25| |i#3@@2|)))) :qid |sequence.129:21| :skolemid |1617| :pattern ( (|Seq#Index| |run#0@@25| |i#3@@2|)) ))) (=> (forall ((|i#3@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@3|) (< |i#3@@3| (|Seq#Length| |run#0@@25|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@20 |f#0@@37| (|Seq#Index| |run#0@@25| |i#3@@3|)))) :qid |sequence.129:21| :skolemid |1617| :pattern ( (|Seq#Index| |run#0@@25| |i#3@@3|)) )) (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@28 $Heap@@20 |f#0@@37| |run#0@@25|)))) :qid |unknown.0:0| :skolemid |1618| :pattern ( (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@28 $Heap@@20 |f#0@@37| |run#0@@25|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@4 T@U) (Sequences._default.ApplyOpaque$R@@4 T@U) ($ly@@29 T@U) ($Heap@@21 T@U) (|f#0@@38| T@U) (|run#0@@26| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@4) TyType) (= (type Sequences._default.ApplyOpaque$R@@4) TyType)) (= (type $ly@@29) LayerTypeType)) (= (type $Heap@@21) (MapType0Type refType MapType1Type))) (= (type |f#0@@38|) HandleTypeType)) (= (type |run#0@@26|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@21 |f#0@@38| |run#0@@26|) (and (and (and ($IsGoodHeap $Heap@@21) ($Is |f#0@@38| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4))) ($Is |run#0@@26| (TSeq Sequences._default.ApplyOpaque$E@@4))) (forall ((|i#3@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@4|) (< |i#3@@4| (|Seq#Length| |run#0@@26|))) (Requires1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@21 |f#0@@38| (|Seq#Index| |run#0@@26| |i#3@@4|)))) :qid |sequence.129:21| :skolemid |1617| :pattern ( (|Seq#Index| |run#0@@26| |i#3@@4|)) ))))) (and (|Sequences.__default.Apply#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@21 |f#0@@38| |run#0@@26|) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@29) $Heap@@21 |f#0@@38| |run#0@@26|) (Sequences.__default.Apply Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $LZ) $Heap@@21 |f#0@@38| |run#0@@26|)))) :qid |unknown.0:0| :skolemid |1619| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@29) $Heap@@21 |f#0@@38| |run#0@@26|)) ))))
(assert (forall ((arg0@@243 T@U) (arg1@@118 T@U) (arg2@@69 T@U) (arg3@@45 T@U) (arg4@@32 T@U) ) (! (= (type (Sequences.__default.Filter arg0@@243 arg1@@118 arg2@@69 arg3@@45 arg4@@32)) (SeqType BoxType)) :qid |funType:Sequences.__default.Filter| :pattern ( (Sequences.__default.Filter arg0@@243 arg1@@118 arg2@@69 arg3@@45 arg4@@32)) )))
(assert (forall ((Sequences._default.Filter$E T@U) ($ly@@30 T@U) ($Heap@@22 T@U) (|f#0@@39| T@U) (|run#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E) TyType) (= (type $ly@@30) LayerTypeType)) (= (type $Heap@@22) (MapType0Type refType MapType1Type))) (= (type |f#0@@39|) HandleTypeType)) (= (type |run#0@@27|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@30) $Heap@@22 |f#0@@39| |run#0@@27|) (Sequences.__default.Filter Sequences._default.Filter$E $ly@@30 $Heap@@22 |f#0@@39| |run#0@@27|))) :qid |unknown.0:0| :skolemid |1620| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@30) $Heap@@22 |f#0@@39| |run#0@@27|)) )))
(assert (forall ((Sequences._default.Filter$E@@0 T@U) ($ly@@31 T@U) ($Heap@@23 T@U) (|f#0@@40| T@U) (|run#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E@@0) TyType) (= (type $ly@@31) LayerTypeType)) (= (type $Heap@@23) (MapType0Type refType MapType1Type))) (= (type |f#0@@40|) HandleTypeType)) (= (type |run#0@@28|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@0 $ly@@31 $Heap@@23 |f#0@@40| |run#0@@28|) (Sequences.__default.Filter Sequences._default.Filter$E@@0 $LZ $Heap@@23 |f#0@@40| |run#0@@28|))) :qid |unknown.0:0| :skolemid |1621| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@0 (AsFuelBottom $ly@@31) $Heap@@23 |f#0@@40| |run#0@@28|)) )))
(assert (forall ((Sequences._default.Filter$E@@1 T@U) ($ly@@32 T@U) ($h0@@4 T@U) ($h1@@4 T@U) (|f#0@@41| T@U) (|run#0@@29| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.Filter$E@@1) TyType) (= (type $ly@@32) LayerTypeType)) (= (type $h0@@4) (MapType0Type refType MapType1Type))) (= (type $h1@@4) (MapType0Type refType MapType1Type))) (= (type |f#0@@41|) HandleTypeType)) (= (type |run#0@@29|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@4) ($IsGoodHeap $h1@@4)) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@1 $h0@@4 |f#0@@41| |run#0@@29|) (and ($Is |f#0@@41| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@1 TBool)) ($Is |run#0@@29| (TSeq Sequences._default.Filter$E@@1))))) (and ($IsHeapAnchor $h0@@4) ($HeapSucc $h0@@4 $h1@@4)))) (forall (($o@@26 T@U) ($f@@4 T@U) ) (! (let ((alpha@@11 (FieldTypeInv0 (type $f@@4)))) (=> (and (and (= (type $o@@26) refType) (= (type $f@@4) (FieldType alpha@@11))) (and (not (= $o@@26 null)) (exists ((|_x0#0| T@U) (|_o0#0| T@U) ) (!  (and (and (= (type |_x0#0|) BoxType) (= (type |_o0#0|) refType)) (and (and (and ($IsBox |_x0#0| Sequences._default.Filter$E@@1) ($Is |_o0#0| Tclass._System.object?)) (U_2_bool (MapType0Select (Reads1 Sequences._default.Filter$E@@1 TBool $h0@@4 |f#0@@41| |_x0#0|) ($Box |_o0#0|)))) (= ($Box $o@@26) ($Box |_o0#0|)))) :qid |sequence.141:13| :skolemid |1622| :no-pattern (type |_x0#0|) :no-pattern (type |_o0#0|) :no-pattern (U_2_int |_x0#0|) :no-pattern (U_2_bool |_x0#0|) :no-pattern (U_2_int |_o0#0|) :no-pattern (U_2_bool |_o0#0|) )))) (= (MapType1Select (MapType0Select $h0@@4 $o@@26) $f@@4) (MapType1Select (MapType0Select $h1@@4 $o@@26) $f@@4)))) :qid |unknown.0:0| :skolemid |1623| :no-pattern (type $o@@26) :no-pattern (type $f@@4) :no-pattern (U_2_int $o@@26) :no-pattern (U_2_bool $o@@26) :no-pattern (U_2_int $f@@4) :no-pattern (U_2_bool $f@@4) ))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@32 $h0@@4 |f#0@@41| |run#0@@29|) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@32 $h1@@4 |f#0@@41| |run#0@@29|))) :qid |unknown.0:0| :skolemid |1624| :pattern ( ($IsHeapAnchor $h0@@4) ($HeapSucc $h0@@4 $h1@@4) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@32 $h1@@4 |f#0@@41| |run#0@@29|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@2 T@U) ($ly@@33 T@U) ($Heap@@24 T@U) (|f#0@@42| T@U) (|run#0@@30| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@2) TyType) (= (type $ly@@33) LayerTypeType)) (= (type $Heap@@24) (MapType0Type refType MapType1Type))) (= (type |f#0@@42|) HandleTypeType)) (= (type |run#0@@30|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@2 $Heap@@24 |f#0@@42| |run#0@@30|) (and (and (and ($IsGoodHeap $Heap@@24) ($Is |f#0@@42| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@2 TBool))) ($Is |run#0@@30| (TSeq Sequences._default.Filter$E@@2))) (forall ((|i#0@@29| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@29|) (< |i#0@@29| (|Seq#Length| |run#0@@30|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@24 |f#0@@42| (|Seq#Index| |run#0@@30| |i#0@@29|)))) :qid |sequence.138:21| :skolemid |1625| :pattern ( (|Seq#Index| |run#0@@30| |i#0@@29|)) ))))) (and (and (<= (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@33 $Heap@@24 |f#0@@42| |run#0@@30|)) (|Seq#Length| |run#0@@30|)) (forall ((|i#1@@4| Int) ) (!  (=> (<= (LitInt 0) |i#1@@4|) (=> (and (< |i#1@@4| (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@33 $Heap@@24 |f#0@@42| |run#0@@30|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@24 |f#0@@42| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@33 $Heap@@24 |f#0@@42| |run#0@@30|) |i#1@@4|))) (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@2 TBool $Heap@@24 |f#0@@42| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@33 $Heap@@24 |f#0@@42| |run#0@@30|) |i#1@@4|)))))) :qid |sequence.140:20| :skolemid |1626| :pattern ( (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@33 $Heap@@24 |f#0@@42| |run#0@@30|) |i#1@@4|)) ))) ($Is (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@33 $Heap@@24 |f#0@@42| |run#0@@30|) (TSeq Sequences._default.Filter$E@@2)))) :qid |unknown.0:0| :skolemid |1627| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@33 $Heap@@24 |f#0@@42| |run#0@@30|)) ))))
(assert (forall ((Sequences._default.Filter$E@@3 T@U) ($ly@@34 T@U) ($Heap@@25 T@U) (|f#0@@43| T@U) (|run#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@3) TyType) (= (type $ly@@34) LayerTypeType)) (= (type $Heap@@25) (MapType0Type refType MapType1Type))) (= (type |f#0@@43|) HandleTypeType)) (= (type |run#0@@31|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@25) ($Is |f#0@@43| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@3 TBool))) ($Is |run#0@@31| (TSeq Sequences._default.Filter$E@@3)))) (and (=> (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@34 $Heap@@25 |f#0@@43| |run#0@@31|) (forall ((|i#2@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@2|) (< |i#2@@2| (|Seq#Length| |run#0@@31|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@25 |f#0@@43| (|Seq#Index| |run#0@@31| |i#2@@2|)))) :qid |sequence.138:21| :skolemid |1628| :pattern ( (|Seq#Index| |run#0@@31| |i#2@@2|)) ))) (=> (forall ((|i#2@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@3|) (< |i#2@@3| (|Seq#Length| |run#0@@31|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@25 |f#0@@43| (|Seq#Index| |run#0@@31| |i#2@@3|)))) :qid |sequence.138:21| :skolemid |1628| :pattern ( (|Seq#Index| |run#0@@31| |i#2@@3|)) )) (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@34 $Heap@@25 |f#0@@43| |run#0@@31|)))) :qid |unknown.0:0| :skolemid |1629| :pattern ( (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@34 $Heap@@25 |f#0@@43| |run#0@@31|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@4 T@U) ($ly@@35 T@U) ($Heap@@26 T@U) (|f#0@@44| T@U) (|run#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@4) TyType) (= (type $ly@@35) LayerTypeType)) (= (type $Heap@@26) (MapType0Type refType MapType1Type))) (= (type |f#0@@44|) HandleTypeType)) (= (type |run#0@@32|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@26 |f#0@@44| |run#0@@32|) (and (and (and ($IsGoodHeap $Heap@@26) ($Is |f#0@@44| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@4 TBool))) ($Is |run#0@@32| (TSeq Sequences._default.Filter$E@@4))) (forall ((|i#2@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@4|) (< |i#2@@4| (|Seq#Length| |run#0@@32|))) (Requires1 Sequences._default.Filter$E@@4 TBool $Heap@@26 |f#0@@44| (|Seq#Index| |run#0@@32| |i#2@@4|)))) :qid |sequence.138:21| :skolemid |1628| :pattern ( (|Seq#Index| |run#0@@32| |i#2@@4|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@32|) (LitInt 0))) (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@26 |f#0@@44| (|Seq#Drop| |run#0@@32| (LitInt 1)))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@35) $Heap@@26 |f#0@@44| |run#0@@32|) (ite (= (|Seq#Length| |run#0@@32|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ite (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@4 TBool $Heap@@26 |f#0@@44| (|Seq#Index| |run#0@@32| (LitInt 0))))) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |run#0@@32| (LitInt 0))) (|Seq#Empty| BoxType)) (Sequences.__default.Filter Sequences._default.Filter$E@@4 $ly@@35 $Heap@@26 |f#0@@44| (|Seq#Drop| |run#0@@32| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |1630| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@35) $Heap@@26 |f#0@@44| |run#0@@32|)) ))))
(assert (forall ((arg0@@244 T@U) (arg1@@119 T@U) (arg2@@70 T@U) (arg3@@46 T@U) (arg4@@33 T@U) (arg5@@17 T@U) ) (! (= (type (Sequences.__default.FoldLeft arg0@@244 arg1@@119 arg2@@70 arg3@@46 arg4@@33 arg5@@17)) BoxType) :qid |funType:Sequences.__default.FoldLeft| :pattern ( (Sequences.__default.FoldLeft arg0@@244 arg1@@119 arg2@@70 arg3@@46 arg4@@33 arg5@@17)) )))
(assert (forall ((Sequences._default.FoldLeft$A T@U) (Sequences._default.FoldLeft$E T@U) ($ly@@36 T@U) (|f#0@@45| T@U) (|init#0| T@U) (|run#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A) TyType) (= (type Sequences._default.FoldLeft$E) TyType)) (= (type $ly@@36) LayerTypeType)) (= (type |f#0@@45|) HandleTypeType)) (= (type |init#0|) BoxType)) (= (type |run#0@@33|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@36) |f#0@@45| |init#0| |run#0@@33|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E $ly@@36 |f#0@@45| |init#0| |run#0@@33|))) :qid |unknown.0:0| :skolemid |1631| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@36) |f#0@@45| |init#0| |run#0@@33|)) )))
(assert (forall ((Sequences._default.FoldLeft$A@@0 T@U) (Sequences._default.FoldLeft$E@@0 T@U) ($ly@@37 T@U) (|f#0@@46| T@U) (|init#0@@0| T@U) (|run#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@0) TyType) (= (type Sequences._default.FoldLeft$E@@0) TyType)) (= (type $ly@@37) LayerTypeType)) (= (type |f#0@@46|) HandleTypeType)) (= (type |init#0@@0|) BoxType)) (= (type |run#0@@34|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $ly@@37 |f#0@@46| |init#0@@0| |run#0@@34|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $LZ |f#0@@46| |init#0@@0| |run#0@@34|))) :qid |unknown.0:0| :skolemid |1632| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 (AsFuelBottom $ly@@37) |f#0@@46| |init#0@@0| |run#0@@34|)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@1 T@U) (Sequences._default.FoldLeft$E@@1 T@U) ($ly@@38 T@U) (|f#0@@47| T@U) (|init#0@@1| T@U) (|run#0@@35| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@1) TyType) (= (type Sequences._default.FoldLeft$E@@1) TyType)) (= (type $ly@@38) LayerTypeType)) (= (type |f#0@@47|) HandleTypeType)) (= (type |init#0@@1|) BoxType)) (= (type |run#0@@35|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 |f#0@@47| |init#0@@1| |run#0@@35|) (and (and ($Is |f#0@@47| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 Sequences._default.FoldLeft$A@@1)) ($IsBox |init#0@@1| Sequences._default.FoldLeft$A@@1)) ($Is |run#0@@35| (TSeq Sequences._default.FoldLeft$E@@1))))) ($IsBox (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@38 |f#0@@47| |init#0@@1| |run#0@@35|) Sequences._default.FoldLeft$A@@1)) :qid |unknown.0:0| :skolemid |1633| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@38 |f#0@@47| |init#0@@1| |run#0@@35|)) ))))
(assert (forall ((Sequences._default.FoldLeft$A@@2 T@U) (Sequences._default.FoldLeft$E@@2 T@U) ($ly@@39 T@U) ($Heap@@27 T@U) (|f#0@@48| T@U) (|init#0@@2| T@U) (|run#0@@36| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@2) TyType) (= (type Sequences._default.FoldLeft$E@@2) TyType)) (= (type $ly@@39) LayerTypeType)) (= (type $Heap@@27) (MapType0Type refType MapType1Type))) (= (type |f#0@@48|) HandleTypeType)) (= (type |init#0@@2|) BoxType)) (= (type |run#0@@36|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@27) ($Is |f#0@@48| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 Sequences._default.FoldLeft$A@@2))) ($IsBox |init#0@@2| Sequences._default.FoldLeft$A@@2)) ($Is |run#0@@36| (TSeq Sequences._default.FoldLeft$E@@2)))) (and (=> (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@39 |f#0@@48| |init#0@@2| |run#0@@36|) true) (=> true (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@39 |f#0@@48| |init#0@@2| |run#0@@36|)))) :qid |unknown.0:0| :skolemid |1634| :pattern ( (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@39 |f#0@@48| |init#0@@2| |run#0@@36|) ($IsGoodHeap $Heap@@27)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@3 T@U) (Sequences._default.FoldLeft$E@@3 T@U) ($ly@@40 T@U) ($Heap@@28 T@U) (|f#0@@49| T@U) (|init#0@@3| T@U) (|run#0@@37| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@3) TyType) (= (type Sequences._default.FoldLeft$E@@3) TyType)) (= (type $ly@@40) LayerTypeType)) (= (type $Heap@@28) (MapType0Type refType MapType1Type))) (= (type |f#0@@49|) HandleTypeType)) (= (type |init#0@@3|) BoxType)) (= (type |run#0@@37|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@49| |init#0@@3| |run#0@@37|) (and (and (and ($IsGoodHeap $Heap@@28) ($Is |f#0@@49| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3))) ($IsBox |init#0@@3| Sequences._default.FoldLeft$A@@3)) ($Is |run#0@@37| (TSeq Sequences._default.FoldLeft$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@37|) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@49| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@28 |f#0@@49| |init#0@@3| (|Seq#Index| |run#0@@37| (LitInt 0))) (|Seq#Drop| |run#0@@37| (LitInt 1)))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@40) |f#0@@49| |init#0@@3| |run#0@@37|) (ite (= (|Seq#Length| |run#0@@37|) (LitInt 0)) |init#0@@3| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 $ly@@40 |f#0@@49| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@28 |f#0@@49| |init#0@@3| (|Seq#Index| |run#0@@37| (LitInt 0))) (|Seq#Drop| |run#0@@37| (LitInt 1))))))) :qid |unknown.0:0| :skolemid |1635| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@40) |f#0@@49| |init#0@@3| |run#0@@37|) ($IsGoodHeap $Heap@@28)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@4 T@U) (Sequences._default.FoldLeft$E@@4 T@U) ($ly@@41 T@U) ($Heap@@29 T@U) (|f#0@@50| T@U) (|init#0@@4| T@U) (|run#0@@38| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@4) TyType) (= (type Sequences._default.FoldLeft$E@@4) TyType)) (= (type $ly@@41) LayerTypeType)) (= (type $Heap@@29) (MapType0Type refType MapType1Type))) (= (type |f#0@@50|) HandleTypeType)) (= (type |init#0@@4|) BoxType)) (= (type |run#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@50| |init#0@@4| (Lit |run#0@@38|)) (and (and (and ($IsGoodHeap $Heap@@29) ($Is |f#0@@50| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4))) ($IsBox |init#0@@4| Sequences._default.FoldLeft$A@@4)) ($Is |run#0@@38| (TSeq Sequences._default.FoldLeft$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@38|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@50| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@29 |f#0@@50| |init#0@@4| (|Seq#Index| (Lit |run#0@@38|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@38|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@41) |f#0@@50| |init#0@@4| (Lit |run#0@@38|)) (ite (= (|Seq#Length| (Lit |run#0@@38|)) (LitInt 0)) |init#0@@4| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@41) |f#0@@50| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@29 |f#0@@50| |init#0@@4| (|Seq#Index| (Lit |run#0@@38|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@38|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1636| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@41) |f#0@@50| |init#0@@4| (Lit |run#0@@38|)) ($IsGoodHeap $Heap@@29)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@5 T@U) (Sequences._default.FoldLeft$E@@5 T@U) ($ly@@42 T@U) ($Heap@@30 T@U) (|f#0@@51| T@U) (|init#0@@5| T@U) (|run#0@@39| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@5) TyType) (= (type Sequences._default.FoldLeft$E@@5) TyType)) (= (type $ly@@42) LayerTypeType)) (= (type $Heap@@30) (MapType0Type refType MapType1Type))) (= (type |f#0@@51|) HandleTypeType)) (= (type |init#0@@5|) BoxType)) (= (type |run#0@@39|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@51|) (Lit |init#0@@5|) (Lit |run#0@@39|)) (and (and (and ($IsGoodHeap $Heap@@30) ($Is |f#0@@51| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5))) ($IsBox |init#0@@5| Sequences._default.FoldLeft$A@@5)) ($Is |run#0@@39| (TSeq Sequences._default.FoldLeft$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@39|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@51|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@30 (Lit |f#0@@51|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@39|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@39|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@42) (Lit |f#0@@51|) (Lit |init#0@@5|) (Lit |run#0@@39|)) (ite (= (|Seq#Length| (Lit |run#0@@39|)) (LitInt 0)) |init#0@@5| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@42) (Lit |f#0@@51|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@30 (Lit |f#0@@51|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@39|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@39|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1637| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@42) (Lit |f#0@@51|) (Lit |init#0@@5|) (Lit |run#0@@39|)) ($IsGoodHeap $Heap@@30)) ))))
(assert (forall ((arg0@@245 T@U) (arg1@@120 T@U) (arg2@@71 T@U) (arg3@@47 T@U) (arg4@@34 T@U) (arg5@@18 T@U) ) (! (= (type (Sequences.__default.FoldRight arg0@@245 arg1@@120 arg2@@71 arg3@@47 arg4@@34 arg5@@18)) BoxType) :qid |funType:Sequences.__default.FoldRight| :pattern ( (Sequences.__default.FoldRight arg0@@245 arg1@@120 arg2@@71 arg3@@47 arg4@@34 arg5@@18)) )))
(assert (forall ((Sequences._default.FoldRight$A T@U) (Sequences._default.FoldRight$E T@U) ($ly@@43 T@U) (|f#0@@52| T@U) (|init#0@@6| T@U) (|run#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A) TyType) (= (type Sequences._default.FoldRight$E) TyType)) (= (type $ly@@43) LayerTypeType)) (= (type |f#0@@52|) HandleTypeType)) (= (type |init#0@@6|) BoxType)) (= (type |run#0@@40|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@43) |f#0@@52| |init#0@@6| |run#0@@40|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E $ly@@43 |f#0@@52| |init#0@@6| |run#0@@40|))) :qid |unknown.0:0| :skolemid |1638| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@43) |f#0@@52| |init#0@@6| |run#0@@40|)) )))
(assert (forall ((Sequences._default.FoldRight$A@@0 T@U) (Sequences._default.FoldRight$E@@0 T@U) ($ly@@44 T@U) (|f#0@@53| T@U) (|init#0@@7| T@U) (|run#0@@41| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@0) TyType) (= (type Sequences._default.FoldRight$E@@0) TyType)) (= (type $ly@@44) LayerTypeType)) (= (type |f#0@@53|) HandleTypeType)) (= (type |init#0@@7|) BoxType)) (= (type |run#0@@41|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $ly@@44 |f#0@@53| |init#0@@7| |run#0@@41|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $LZ |f#0@@53| |init#0@@7| |run#0@@41|))) :qid |unknown.0:0| :skolemid |1639| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 (AsFuelBottom $ly@@44) |f#0@@53| |init#0@@7| |run#0@@41|)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@1 T@U) (Sequences._default.FoldRight$E@@1 T@U) ($ly@@45 T@U) (|f#0@@54| T@U) (|init#0@@8| T@U) (|run#0@@42| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@1) TyType) (= (type Sequences._default.FoldRight$E@@1) TyType)) (= (type $ly@@45) LayerTypeType)) (= (type |f#0@@54|) HandleTypeType)) (= (type |init#0@@8|) BoxType)) (= (type |run#0@@42|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 |f#0@@54| |init#0@@8| |run#0@@42|) (and (and ($Is |f#0@@54| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 Sequences._default.FoldRight$A@@1)) ($IsBox |init#0@@8| Sequences._default.FoldRight$A@@1)) ($Is |run#0@@42| (TSeq Sequences._default.FoldRight$E@@1))))) ($IsBox (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@45 |f#0@@54| |init#0@@8| |run#0@@42|) Sequences._default.FoldRight$A@@1)) :qid |unknown.0:0| :skolemid |1640| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@45 |f#0@@54| |init#0@@8| |run#0@@42|)) ))))
(assert (forall ((Sequences._default.FoldRight$A@@2 T@U) (Sequences._default.FoldRight$E@@2 T@U) ($ly@@46 T@U) ($Heap@@31 T@U) (|f#0@@55| T@U) (|init#0@@9| T@U) (|run#0@@43| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@2) TyType) (= (type Sequences._default.FoldRight$E@@2) TyType)) (= (type $ly@@46) LayerTypeType)) (= (type $Heap@@31) (MapType0Type refType MapType1Type))) (= (type |f#0@@55|) HandleTypeType)) (= (type |init#0@@9|) BoxType)) (= (type |run#0@@43|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@31) ($Is |f#0@@55| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 Sequences._default.FoldRight$A@@2))) ($IsBox |init#0@@9| Sequences._default.FoldRight$A@@2)) ($Is |run#0@@43| (TSeq Sequences._default.FoldRight$E@@2)))) (and (=> (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@46 |f#0@@55| |init#0@@9| |run#0@@43|) true) (=> true (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@46 |f#0@@55| |init#0@@9| |run#0@@43|)))) :qid |unknown.0:0| :skolemid |1641| :pattern ( (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@46 |f#0@@55| |init#0@@9| |run#0@@43|) ($IsGoodHeap $Heap@@31)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@3 T@U) (Sequences._default.FoldRight$E@@3 T@U) ($ly@@47 T@U) ($Heap@@32 T@U) (|f#0@@56| T@U) (|init#0@@10| T@U) (|run#0@@44| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@3) TyType) (= (type Sequences._default.FoldRight$E@@3) TyType)) (= (type $ly@@47) LayerTypeType)) (= (type $Heap@@32) (MapType0Type refType MapType1Type))) (= (type |f#0@@56|) HandleTypeType)) (= (type |init#0@@10|) BoxType)) (= (type |run#0@@44|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@56| |init#0@@10| |run#0@@44|) (and (and (and ($IsGoodHeap $Heap@@32) ($Is |f#0@@56| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3))) ($IsBox |init#0@@10| Sequences._default.FoldRight$A@@3)) ($Is |run#0@@44| (TSeq Sequences._default.FoldRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@44|) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@56| |init#0@@10| (|Seq#Drop| |run#0@@44| (LitInt 1)))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@47) |f#0@@56| |init#0@@10| |run#0@@44|) (ite (= (|Seq#Length| |run#0@@44|) (LitInt 0)) |init#0@@10| (Apply2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3 $Heap@@32 |f#0@@56| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 $ly@@47 |f#0@@56| |init#0@@10| (|Seq#Drop| |run#0@@44| (LitInt 1))) (|Seq#Index| |run#0@@44| (LitInt 0))))))) :qid |unknown.0:0| :skolemid |1642| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@47) |f#0@@56| |init#0@@10| |run#0@@44|) ($IsGoodHeap $Heap@@32)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@4 T@U) (Sequences._default.FoldRight$E@@4 T@U) ($ly@@48 T@U) ($Heap@@33 T@U) (|f#0@@57| T@U) (|init#0@@11| T@U) (|run#0@@45| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@4) TyType) (= (type Sequences._default.FoldRight$E@@4) TyType)) (= (type $ly@@48) LayerTypeType)) (= (type $Heap@@33) (MapType0Type refType MapType1Type))) (= (type |f#0@@57|) HandleTypeType)) (= (type |init#0@@11|) BoxType)) (= (type |run#0@@45|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@57| |init#0@@11| (Lit |run#0@@45|)) (and (and (and ($IsGoodHeap $Heap@@33) ($Is |f#0@@57| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4))) ($IsBox |init#0@@11| Sequences._default.FoldRight$A@@4)) ($Is |run#0@@45| (TSeq Sequences._default.FoldRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@45|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@57| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@45|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@48) |f#0@@57| |init#0@@11| (Lit |run#0@@45|)) (ite (= (|Seq#Length| (Lit |run#0@@45|)) (LitInt 0)) |init#0@@11| (Apply2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4 $Heap@@33 |f#0@@57| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@48) |f#0@@57| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@45|) (LitInt 1)))) (|Seq#Index| (Lit |run#0@@45|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |1643| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@48) |f#0@@57| |init#0@@11| (Lit |run#0@@45|)) ($IsGoodHeap $Heap@@33)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@5 T@U) (Sequences._default.FoldRight$E@@5 T@U) ($ly@@49 T@U) ($Heap@@34 T@U) (|f#0@@58| T@U) (|init#0@@12| T@U) (|run#0@@46| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@5) TyType) (= (type Sequences._default.FoldRight$E@@5) TyType)) (= (type $ly@@49) LayerTypeType)) (= (type $Heap@@34) (MapType0Type refType MapType1Type))) (= (type |f#0@@58|) HandleTypeType)) (= (type |init#0@@12|) BoxType)) (= (type |run#0@@46|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit |run#0@@46|)) (and (and (and ($IsGoodHeap $Heap@@34) ($Is |f#0@@58| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5))) ($IsBox |init#0@@12| Sequences._default.FoldRight$A@@5)) ($Is |run#0@@46| (TSeq Sequences._default.FoldRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@46|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@46|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@49) (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit |run#0@@46|)) (ite (= (|Seq#Length| (Lit |run#0@@46|)) (LitInt 0)) |init#0@@12| (Apply2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5 $Heap@@34 (Lit |f#0@@58|) (Lit (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@49) (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@46|) (LitInt 1))))) (|Seq#Index| (Lit |run#0@@46|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |1644| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@49) (Lit |f#0@@58|) (Lit |init#0@@12|) (Lit |run#0@@46|)) ($IsGoodHeap $Heap@@34)) ))))
(assert (forall ((arg0@@246 T@U) (arg1@@121 T@U) (arg2@@72 T@U) (arg3@@48 T@U) (arg4@@35 T@U) (arg5@@19 T@U) ) (! (= (type (Sequences.__default.FoldFromRight arg0@@246 arg1@@121 arg2@@72 arg3@@48 arg4@@35 arg5@@19)) BoxType) :qid |funType:Sequences.__default.FoldFromRight| :pattern ( (Sequences.__default.FoldFromRight arg0@@246 arg1@@121 arg2@@72 arg3@@48 arg4@@35 arg5@@19)) )))
(assert (forall ((Sequences._default.FoldFromRight$A T@U) (Sequences._default.FoldFromRight$E T@U) ($ly@@50 T@U) (|f#0@@59| T@U) (|init#0@@13| T@U) (|run#0@@47| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A) TyType) (= (type Sequences._default.FoldFromRight$E) TyType)) (= (type $ly@@50) LayerTypeType)) (= (type |f#0@@59|) HandleTypeType)) (= (type |init#0@@13|) BoxType)) (= (type |run#0@@47|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@50) |f#0@@59| |init#0@@13| |run#0@@47|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E $ly@@50 |f#0@@59| |init#0@@13| |run#0@@47|))) :qid |unknown.0:0| :skolemid |1645| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@50) |f#0@@59| |init#0@@13| |run#0@@47|)) )))
(assert (forall ((Sequences._default.FoldFromRight$A@@0 T@U) (Sequences._default.FoldFromRight$E@@0 T@U) ($ly@@51 T@U) (|f#0@@60| T@U) (|init#0@@14| T@U) (|run#0@@48| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@0) TyType) (= (type Sequences._default.FoldFromRight$E@@0) TyType)) (= (type $ly@@51) LayerTypeType)) (= (type |f#0@@60|) HandleTypeType)) (= (type |init#0@@14|) BoxType)) (= (type |run#0@@48|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $ly@@51 |f#0@@60| |init#0@@14| |run#0@@48|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $LZ |f#0@@60| |init#0@@14| |run#0@@48|))) :qid |unknown.0:0| :skolemid |1646| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 (AsFuelBottom $ly@@51) |f#0@@60| |init#0@@14| |run#0@@48|)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@1 T@U) (Sequences._default.FoldFromRight$E@@1 T@U) ($ly@@52 T@U) (|f#0@@61| T@U) (|init#0@@15| T@U) (|run#0@@49| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@1) TyType) (= (type Sequences._default.FoldFromRight$E@@1) TyType)) (= (type $ly@@52) LayerTypeType)) (= (type |f#0@@61|) HandleTypeType)) (= (type |init#0@@15|) BoxType)) (= (type |run#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 |f#0@@61| |init#0@@15| |run#0@@49|) (and (and ($Is |f#0@@61| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 Sequences._default.FoldFromRight$A@@1)) ($IsBox |init#0@@15| Sequences._default.FoldFromRight$A@@1)) ($Is |run#0@@49| (TSeq Sequences._default.FoldFromRight$E@@1))))) ($IsBox (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@52 |f#0@@61| |init#0@@15| |run#0@@49|) Sequences._default.FoldFromRight$A@@1)) :qid |unknown.0:0| :skolemid |1647| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@52 |f#0@@61| |init#0@@15| |run#0@@49|)) ))))
(assert (forall ((Sequences._default.FoldFromRight$A@@2 T@U) (Sequences._default.FoldFromRight$E@@2 T@U) ($ly@@53 T@U) ($Heap@@35 T@U) (|f#0@@62| T@U) (|init#0@@16| T@U) (|run#0@@50| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@2) TyType) (= (type Sequences._default.FoldFromRight$E@@2) TyType)) (= (type $ly@@53) LayerTypeType)) (= (type $Heap@@35) (MapType0Type refType MapType1Type))) (= (type |f#0@@62|) HandleTypeType)) (= (type |init#0@@16|) BoxType)) (= (type |run#0@@50|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@35) ($Is |f#0@@62| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 Sequences._default.FoldFromRight$A@@2))) ($IsBox |init#0@@16| Sequences._default.FoldFromRight$A@@2)) ($Is |run#0@@50| (TSeq Sequences._default.FoldFromRight$E@@2)))) (and (=> (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@53 |f#0@@62| |init#0@@16| |run#0@@50|) true) (=> true (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@53 |f#0@@62| |init#0@@16| |run#0@@50|)))) :qid |unknown.0:0| :skolemid |1648| :pattern ( (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@53 |f#0@@62| |init#0@@16| |run#0@@50|) ($IsGoodHeap $Heap@@35)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@3 T@U) (Sequences._default.FoldFromRight$E@@3 T@U) ($ly@@54 T@U) ($Heap@@36 T@U) (|f#0@@63| T@U) (|init#0@@17| T@U) (|run#0@@51| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@3) TyType) (= (type Sequences._default.FoldFromRight$E@@3) TyType)) (= (type $ly@@54) LayerTypeType)) (= (type $Heap@@36) (MapType0Type refType MapType1Type))) (= (type |f#0@@63|) HandleTypeType)) (= (type |init#0@@17|) BoxType)) (= (type |run#0@@51|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@63| |init#0@@17| |run#0@@51|) (and (and (and ($IsGoodHeap $Heap@@36) ($Is |f#0@@63| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3))) ($IsBox |init#0@@17| Sequences._default.FoldFromRight$A@@3)) ($Is |run#0@@51| (TSeq Sequences._default.FoldFromRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@51|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@51|) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@63| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@51|))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@51|))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@54) |f#0@@63| |init#0@@17| |run#0@@51|) (ite (= (|Seq#Length| |run#0@@51|) (LitInt 0)) |init#0@@17| (Apply2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3 $Heap@@36 |f#0@@63| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 $ly@@54 |f#0@@63| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@51|)) (Sequences.__default.Last Sequences._default.FoldFromRight$E@@3 |run#0@@51|)))))) :qid |unknown.0:0| :skolemid |1649| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@54) |f#0@@63| |init#0@@17| |run#0@@51|) ($IsGoodHeap $Heap@@36)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@4 T@U) (Sequences._default.FoldFromRight$E@@4 T@U) ($ly@@55 T@U) ($Heap@@37 T@U) (|f#0@@64| T@U) (|init#0@@18| T@U) (|run#0@@52| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@4) TyType) (= (type Sequences._default.FoldFromRight$E@@4) TyType)) (= (type $ly@@55) LayerTypeType)) (= (type $Heap@@37) (MapType0Type refType MapType1Type))) (= (type |f#0@@64|) HandleTypeType)) (= (type |init#0@@18|) BoxType)) (= (type |run#0@@52|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@64| |init#0@@18| (Lit |run#0@@52|)) (and (and (and ($IsGoodHeap $Heap@@37) ($Is |f#0@@64| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4))) ($IsBox |init#0@@18| Sequences._default.FoldFromRight$A@@4)) ($Is |run#0@@52| (TSeq Sequences._default.FoldFromRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@52|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@64| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@55) |f#0@@64| |init#0@@18| (Lit |run#0@@52|)) (ite (= (|Seq#Length| (Lit |run#0@@52|)) (LitInt 0)) |init#0@@18| (Apply2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4 $Heap@@37 |f#0@@64| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@55) |f#0@@64| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@52|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1650| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@55) |f#0@@64| |init#0@@18| (Lit |run#0@@52|)) ($IsGoodHeap $Heap@@37)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@5 T@U) (Sequences._default.FoldFromRight$E@@5 T@U) ($ly@@56 T@U) ($Heap@@38 T@U) (|f#0@@65| T@U) (|init#0@@19| T@U) (|run#0@@53| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@5) TyType) (= (type Sequences._default.FoldFromRight$E@@5) TyType)) (= (type $ly@@56) LayerTypeType)) (= (type $Heap@@38) (MapType0Type refType MapType1Type))) (= (type |f#0@@65|) HandleTypeType)) (= (type |init#0@@19|) BoxType)) (= (type |run#0@@53|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit |run#0@@53|)) (and (and (and ($IsGoodHeap $Heap@@38) ($Is |f#0@@65| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5))) ($IsBox |init#0@@19| Sequences._default.FoldFromRight$A@@5)) ($Is |run#0@@53| (TSeq Sequences._default.FoldFromRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@53|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@56) (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit |run#0@@53|)) (ite (= (|Seq#Length| (Lit |run#0@@53|)) (LitInt 0)) |init#0@@19| (Apply2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5 $Heap@@38 (Lit |f#0@@65|) (Lit (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@56) (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|))))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@53|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1651| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@56) (Lit |f#0@@65|) (Lit |init#0@@19|) (Lit |run#0@@53|)) ($IsGoodHeap $Heap@@38)) ))))
(assert (forall ((arg0@@247 T@U) (arg1@@122 T@U) (arg2@@73 T@U) (arg3@@49 Int) ) (! (= (type (Sequences.__default.remove arg0@@247 arg1@@122 arg2@@73 arg3@@49)) (SeqType BoxType)) :qid |funType:Sequences.__default.remove| :pattern ( (Sequences.__default.remove arg0@@247 arg1@@122 arg2@@73 arg3@@49)) )))
(assert (forall ((Sequences._default.remove$A T@U) ($ly@@57 T@U) (|s#0@@4| T@U) (|pos#0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A) TyType) (= (type $ly@@57) LayerTypeType)) (= (type |s#0@@4|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@57) |s#0@@4| |pos#0|) (Sequences.__default.remove Sequences._default.remove$A $ly@@57 |s#0@@4| |pos#0|))) :qid |unknown.0:0| :skolemid |1652| :pattern ( (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@57) |s#0@@4| |pos#0|)) )))
(assert (forall ((Sequences._default.remove$A@@0 T@U) ($ly@@58 T@U) (|s#0@@5| T@U) (|pos#0@@0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A@@0) TyType) (= (type $ly@@58) LayerTypeType)) (= (type |s#0@@5|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A@@0 $ly@@58 |s#0@@5| |pos#0@@0|) (Sequences.__default.remove Sequences._default.remove$A@@0 $LZ |s#0@@5| |pos#0@@0|))) :qid |unknown.0:0| :skolemid |1653| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@0 (AsFuelBottom $ly@@58) |s#0@@5| |pos#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@1 T@U) ($ly@@59 T@U) (|s#0@@6| T@U) (|pos#0@@1| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@1) TyType) (= (type $ly@@59) LayerTypeType)) (= (type |s#0@@6|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@1 |s#0@@6| |pos#0@@1|) (and ($Is |s#0@@6| (TSeq Sequences._default.remove$A@@1)) (and (<= (LitInt 0) |pos#0@@1|) (< |pos#0@@1| (|Seq#Length| |s#0@@6|)))))) (and (and (and (= (|Seq#Length| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@59 |s#0@@6| |pos#0@@1|)) (- (|Seq#Length| |s#0@@6|) 1)) (forall ((|i#0@@30| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@30|) (< |i#0@@30| |pos#0@@1|)) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@59 |s#0@@6| |pos#0@@1|) |i#0@@30|) (|Seq#Index| |s#0@@6| |i#0@@30|))) :qid |sequence.168:18| :skolemid |1654| :pattern ( (|Seq#Index| |s#0@@6| |i#0@@30|)) :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@59 |s#0@@6| |pos#0@@1|) |i#0@@30|)) ))) (forall ((|i#1@@5| Int) ) (!  (=> (and (<= |pos#0@@1| |i#1@@5|) (< |i#1@@5| (- (|Seq#Length| |s#0@@6|) 1))) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@59 |s#0@@6| |pos#0@@1|) |i#1@@5|) (|Seq#Index| |s#0@@6| (+ |i#1@@5| 1)))) :qid |sequence.169:18| :skolemid |1655| :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@59 |s#0@@6| |pos#0@@1|) |i#1@@5|)) ))) ($Is (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@59 |s#0@@6| |pos#0@@1|) (TSeq Sequences._default.remove$A@@1)))) :qid |unknown.0:0| :skolemid |1656| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@59 |s#0@@6| |pos#0@@1|)) ))))
(assert (forall ((Sequences._default.remove$A@@2 T@U) ($ly@@60 T@U) (|s#0@@7| T@U) (|pos#0@@2| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@2) TyType) (= (type $ly@@60) LayerTypeType)) (= (type |s#0@@7|) (SeqType BoxType))) ($Is |s#0@@7| (TSeq Sequences._default.remove$A@@2))) (and (=> (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@60 |s#0@@7| |pos#0@@2|) (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@7|)))) (=> (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@7|))) (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@60 |s#0@@7| |pos#0@@2|)))) :qid |unknown.0:0| :skolemid |1657| :pattern ( (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@60 |s#0@@7| |pos#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@3 T@U) ($ly@@61 T@U) (|s#0@@8| T@U) (|pos#0@@3| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@3) TyType) (= (type $ly@@61) LayerTypeType)) (= (type |s#0@@8|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@3 |s#0@@8| |pos#0@@3|) (and ($Is |s#0@@8| (TSeq Sequences._default.remove$A@@3)) (and (<= (LitInt 0) |pos#0@@3|) (< |pos#0@@3| (|Seq#Length| |s#0@@8|)))))) (= (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@61) |s#0@@8| |pos#0@@3|) (|Seq#Append| (|Seq#Take| |s#0@@8| |pos#0@@3|) (|Seq#Drop| |s#0@@8| (+ |pos#0@@3| 1))))) :qid |unknown.0:0| :skolemid |1658| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@61) |s#0@@8| |pos#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.remove$A@@4 T@U) ($ly@@62 T@U) (|s#0@@9| T@U) (|pos#0@@4| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@4) TyType) (= (type $ly@@62) LayerTypeType)) (= (type |s#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@4 (Lit |s#0@@9|) (LitInt |pos#0@@4|)) (and ($Is |s#0@@9| (TSeq Sequences._default.remove$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@4|)) (< |pos#0@@4| (|Seq#Length| (Lit |s#0@@9|))))))) (= (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@62) (Lit |s#0@@9|) (LitInt |pos#0@@4|)) (|Seq#Append| (|Seq#Take| (Lit |s#0@@9|) (LitInt |pos#0@@4|)) (|Seq#Drop| (Lit |s#0@@9|) (LitInt (+ |pos#0@@4| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1659| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@62) (Lit |s#0@@9|) (LitInt |pos#0@@4|))) ))))
(assert (forall ((arg0@@248 T@U) (arg1@@123 T@U) (arg2@@74 T@U) (arg3@@50 T@U) (arg4@@36 Int) ) (! (= (type (Sequences.__default.insert arg0@@248 arg1@@123 arg2@@74 arg3@@50 arg4@@36)) (SeqType BoxType)) :qid |funType:Sequences.__default.insert| :pattern ( (Sequences.__default.insert arg0@@248 arg1@@123 arg2@@74 arg3@@50 arg4@@36)) )))
(assert (forall ((Sequences._default.insert$A T@U) ($ly@@63 T@U) (|s#0@@10| T@U) (|a#0@@18| T@U) (|pos#0@@5| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A) TyType) (= (type $ly@@63) LayerTypeType)) (= (type |s#0@@10|) (SeqType BoxType))) (= (type |a#0@@18|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@63) |s#0@@10| |a#0@@18| |pos#0@@5|) (Sequences.__default.insert Sequences._default.insert$A $ly@@63 |s#0@@10| |a#0@@18| |pos#0@@5|))) :qid |unknown.0:0| :skolemid |1660| :pattern ( (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@63) |s#0@@10| |a#0@@18| |pos#0@@5|)) )))
(assert (forall ((Sequences._default.insert$A@@0 T@U) ($ly@@64 T@U) (|s#0@@11| T@U) (|a#0@@19| T@U) (|pos#0@@6| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A@@0) TyType) (= (type $ly@@64) LayerTypeType)) (= (type |s#0@@11|) (SeqType BoxType))) (= (type |a#0@@19|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A@@0 $ly@@64 |s#0@@11| |a#0@@19| |pos#0@@6|) (Sequences.__default.insert Sequences._default.insert$A@@0 $LZ |s#0@@11| |a#0@@19| |pos#0@@6|))) :qid |unknown.0:0| :skolemid |1661| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@0 (AsFuelBottom $ly@@64) |s#0@@11| |a#0@@19| |pos#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@1 T@U) ($ly@@65 T@U) (|s#0@@12| T@U) (|a#0@@20| T@U) (|pos#0@@7| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@1) TyType) (= (type $ly@@65) LayerTypeType)) (= (type |s#0@@12|) (SeqType BoxType))) (= (type |a#0@@20|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@1 |s#0@@12| |a#0@@20| |pos#0@@7|) (and (and ($Is |s#0@@12| (TSeq Sequences._default.insert$A@@1)) ($IsBox |a#0@@20| Sequences._default.insert$A@@1)) (and (<= (LitInt 0) |pos#0@@7|) (<= |pos#0@@7| (|Seq#Length| |s#0@@12|)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@65 |s#0@@12| |a#0@@20| |pos#0@@7|)) (+ (|Seq#Length| |s#0@@12|) 1)) (forall ((|i#0@@31| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@31|) (< |i#0@@31| |pos#0@@7|)) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@65 |s#0@@12| |a#0@@20| |pos#0@@7|) |i#0@@31|) (|Seq#Index| |s#0@@12| |i#0@@31|)))) :qid |sequence.177:18| :skolemid |1662| :pattern ( (|Seq#Index| |s#0@@12| |i#0@@31|)) :pattern ( (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@65 |s#0@@12| |a#0@@20| |pos#0@@7|) |i#0@@31|)) ))) (forall ((|i#1@@6| Int) ) (!  (=> true (=> (and (<= |pos#0@@7| |i#1@@6|) (< |i#1@@6| (|Seq#Length| |s#0@@12|))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@65 |s#0@@12| |a#0@@20| |pos#0@@7|) (+ |i#1@@6| 1)) (|Seq#Index| |s#0@@12| |i#1@@6|)))) :qid |sequence.178:18| :skolemid |1663| :pattern ( (|Seq#Index| |s#0@@12| |i#1@@6|)) ))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@65 |s#0@@12| |a#0@@20| |pos#0@@7|) |pos#0@@7|) |a#0@@20|)) ($Is (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@65 |s#0@@12| |a#0@@20| |pos#0@@7|) (TSeq Sequences._default.insert$A@@1)))) :qid |unknown.0:0| :skolemid |1664| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@65 |s#0@@12| |a#0@@20| |pos#0@@7|)) ))))
(assert (forall ((Sequences._default.insert$A@@2 T@U) ($ly@@66 T@U) (|s#0@@13| T@U) (|a#0@@21| T@U) (|pos#0@@8| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@2) TyType) (= (type $ly@@66) LayerTypeType)) (= (type |s#0@@13|) (SeqType BoxType))) (= (type |a#0@@21|) BoxType)) (and ($Is |s#0@@13| (TSeq Sequences._default.insert$A@@2)) ($IsBox |a#0@@21| Sequences._default.insert$A@@2))) (and (=> (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@66 |s#0@@13| |a#0@@21| |pos#0@@8|) (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@13|)))) (=> (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@13|))) (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@66 |s#0@@13| |a#0@@21| |pos#0@@8|)))) :qid |unknown.0:0| :skolemid |1665| :pattern ( (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@66 |s#0@@13| |a#0@@21| |pos#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@3 T@U) ($ly@@67 T@U) (|s#0@@14| T@U) (|a#0@@22| T@U) (|pos#0@@9| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@3) TyType) (= (type $ly@@67) LayerTypeType)) (= (type |s#0@@14|) (SeqType BoxType))) (= (type |a#0@@22|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@3 |s#0@@14| |a#0@@22| |pos#0@@9|) (and (and ($Is |s#0@@14| (TSeq Sequences._default.insert$A@@3)) ($IsBox |a#0@@22| Sequences._default.insert$A@@3)) (and (<= (LitInt 0) |pos#0@@9|) (<= |pos#0@@9| (|Seq#Length| |s#0@@14|)))))) (= (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@67) |s#0@@14| |a#0@@22| |pos#0@@9|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@14| |pos#0@@9|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@22|)) (|Seq#Drop| |s#0@@14| |pos#0@@9|)))) :qid |unknown.0:0| :skolemid |1666| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@67) |s#0@@14| |a#0@@22| |pos#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@4 T@U) ($ly@@68 T@U) (|s#0@@15| T@U) (|a#0@@23| T@U) (|pos#0@@10| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@4) TyType) (= (type $ly@@68) LayerTypeType)) (= (type |s#0@@15|) (SeqType BoxType))) (= (type |a#0@@23|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@4 (Lit |s#0@@15|) |a#0@@23| (LitInt |pos#0@@10|)) (and (and ($Is |s#0@@15| (TSeq Sequences._default.insert$A@@4)) ($IsBox |a#0@@23| Sequences._default.insert$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@10|)) (<= (LitInt |pos#0@@10|) (|Seq#Length| (Lit |s#0@@15|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@68) (Lit |s#0@@15|) |a#0@@23| (LitInt |pos#0@@10|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@15|) (LitInt |pos#0@@10|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@23|)) (|Seq#Drop| (Lit |s#0@@15|) (LitInt |pos#0@@10|))))) :qid |unknown.0:0| :weight 3 :skolemid |1667| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@68) (Lit |s#0@@15|) |a#0@@23| (LitInt |pos#0@@10|))) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@5 T@U) ($ly@@69 T@U) (|s#0@@16| T@U) (|a#0@@24| T@U) (|pos#0@@11| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@5) TyType) (= (type $ly@@69) LayerTypeType)) (= (type |s#0@@16|) (SeqType BoxType))) (= (type |a#0@@24|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@5 (Lit |s#0@@16|) (Lit |a#0@@24|) (LitInt |pos#0@@11|)) (and (and ($Is |s#0@@16| (TSeq Sequences._default.insert$A@@5)) ($IsBox |a#0@@24| Sequences._default.insert$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@11|)) (<= (LitInt |pos#0@@11|) (|Seq#Length| (Lit |s#0@@16|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@69) (Lit |s#0@@16|) (Lit |a#0@@24|) (LitInt |pos#0@@11|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@16|) (LitInt |pos#0@@11|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@24|))) (|Seq#Drop| (Lit |s#0@@16|) (LitInt |pos#0@@11|))))) :qid |unknown.0:0| :weight 3 :skolemid |1668| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@69) (Lit |s#0@@16|) (Lit |a#0@@24|) (LitInt |pos#0@@11|))) ))))
(assert (forall ((arg0@@249 T@U) (arg1@@124 T@U) (arg2@@75 T@U) (arg3@@51 T@U) (arg4@@37 T@U) (arg5@@20 Int) ) (! (= (type (Sequences.__default.replace1with2 arg0@@249 arg1@@124 arg2@@75 arg3@@51 arg4@@37 arg5@@20)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace1with2| :pattern ( (Sequences.__default.replace1with2 arg0@@249 arg1@@124 arg2@@75 arg3@@51 arg4@@37 arg5@@20)) )))
(assert (forall ((Sequences._default.replace1with2$A T@U) ($ly@@70 T@U) (|s#0@@17| T@U) (|a#0@@25| T@U) (|b#0@@12| T@U) (|pos#0@@12| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A) TyType) (= (type $ly@@70) LayerTypeType)) (= (type |s#0@@17|) (SeqType BoxType))) (= (type |a#0@@25|) BoxType)) (= (type |b#0@@12|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@70) |s#0@@17| |a#0@@25| |b#0@@12| |pos#0@@12|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A $ly@@70 |s#0@@17| |a#0@@25| |b#0@@12| |pos#0@@12|))) :qid |unknown.0:0| :skolemid |1669| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@70) |s#0@@17| |a#0@@25| |b#0@@12| |pos#0@@12|)) )))
(assert (forall ((Sequences._default.replace1with2$A@@0 T@U) ($ly@@71 T@U) (|s#0@@18| T@U) (|a#0@@26| T@U) (|b#0@@13| T@U) (|pos#0@@13| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A@@0) TyType) (= (type $ly@@71) LayerTypeType)) (= (type |s#0@@18|) (SeqType BoxType))) (= (type |a#0@@26|) BoxType)) (= (type |b#0@@13|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $ly@@71 |s#0@@18| |a#0@@26| |b#0@@13| |pos#0@@13|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $LZ |s#0@@18| |a#0@@26| |b#0@@13| |pos#0@@13|))) :qid |unknown.0:0| :skolemid |1670| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 (AsFuelBottom $ly@@71) |s#0@@18| |a#0@@26| |b#0@@13| |pos#0@@13|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@1 T@U) ($ly@@72 T@U) (|s#0@@19| T@U) (|a#0@@27| T@U) (|b#0@@14| T@U) (|pos#0@@14| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@1) TyType) (= (type $ly@@72) LayerTypeType)) (= (type |s#0@@19|) (SeqType BoxType))) (= (type |a#0@@27|) BoxType)) (= (type |b#0@@14|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@1 |s#0@@19| |a#0@@27| |b#0@@14| |pos#0@@14|) (and (and (and ($Is |s#0@@19| (TSeq Sequences._default.replace1with2$A@@1)) ($IsBox |a#0@@27| Sequences._default.replace1with2$A@@1)) ($IsBox |b#0@@14| Sequences._default.replace1with2$A@@1)) (and (<= (LitInt 0) |pos#0@@14|) (< |pos#0@@14| (|Seq#Length| |s#0@@19|)))))) (and (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@19| |a#0@@27| |b#0@@14| |pos#0@@14|)) (+ (|Seq#Length| |s#0@@19|) 1)) (forall ((|i#0@@32| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@32|) (< |i#0@@32| |pos#0@@14|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@19| |a#0@@27| |b#0@@14| |pos#0@@14|) |i#0@@32|) (|Seq#Index| |s#0@@19| |i#0@@32|)))) :qid |sequence.202:18| :skolemid |1671| :pattern ( (|Seq#Index| |s#0@@19| |i#0@@32|)) :pattern ( (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@19| |a#0@@27| |b#0@@14| |pos#0@@14|) |i#0@@32|)) ))) (forall ((|i#1@@7| Int) ) (!  (=> true (=> (and (< |pos#0@@14| |i#1@@7|) (< |i#1@@7| (|Seq#Length| |s#0@@19|))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@19| |a#0@@27| |b#0@@14| |pos#0@@14|) (+ |i#1@@7| 1)) (|Seq#Index| |s#0@@19| |i#1@@7|)))) :qid |sequence.203:18| :skolemid |1672| :pattern ( (|Seq#Index| |s#0@@19| |i#1@@7|)) ))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@19| |a#0@@27| |b#0@@14| |pos#0@@14|) |pos#0@@14|) |a#0@@27|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@19| |a#0@@27| |b#0@@14| |pos#0@@14|) (+ |pos#0@@14| 1)) |b#0@@14|)) ($Is (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@19| |a#0@@27| |b#0@@14| |pos#0@@14|) (TSeq Sequences._default.replace1with2$A@@1)))) :qid |unknown.0:0| :skolemid |1673| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@72 |s#0@@19| |a#0@@27| |b#0@@14| |pos#0@@14|)) ))))
(assert (forall ((Sequences._default.replace1with2$A@@2 T@U) ($ly@@73 T@U) (|s#0@@20| T@U) (|a#0@@28| T@U) (|b#0@@15| T@U) (|pos#0@@15| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@2) TyType) (= (type $ly@@73) LayerTypeType)) (= (type |s#0@@20|) (SeqType BoxType))) (= (type |a#0@@28|) BoxType)) (= (type |b#0@@15|) BoxType)) (and (and ($Is |s#0@@20| (TSeq Sequences._default.replace1with2$A@@2)) ($IsBox |a#0@@28| Sequences._default.replace1with2$A@@2)) ($IsBox |b#0@@15| Sequences._default.replace1with2$A@@2))) (and (=> (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@73 |s#0@@20| |a#0@@28| |b#0@@15| |pos#0@@15|) (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@20|)))) (=> (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@20|))) (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@73 |s#0@@20| |a#0@@28| |b#0@@15| |pos#0@@15|)))) :qid |unknown.0:0| :skolemid |1674| :pattern ( (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@73 |s#0@@20| |a#0@@28| |b#0@@15| |pos#0@@15|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@3 T@U) ($ly@@74 T@U) (|s#0@@21| T@U) (|a#0@@29| T@U) (|b#0@@16| T@U) (|pos#0@@16| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@3) TyType) (= (type $ly@@74) LayerTypeType)) (= (type |s#0@@21|) (SeqType BoxType))) (= (type |a#0@@29|) BoxType)) (= (type |b#0@@16|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@3 |s#0@@21| |a#0@@29| |b#0@@16| |pos#0@@16|) (and (and (and ($Is |s#0@@21| (TSeq Sequences._default.replace1with2$A@@3)) ($IsBox |a#0@@29| Sequences._default.replace1with2$A@@3)) ($IsBox |b#0@@16| Sequences._default.replace1with2$A@@3)) (and (<= (LitInt 0) |pos#0@@16|) (< |pos#0@@16| (|Seq#Length| |s#0@@21|)))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@74) |s#0@@21| |a#0@@29| |b#0@@16| |pos#0@@16|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@21| |pos#0@@16|) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@29|) |b#0@@16|)) (|Seq#Drop| |s#0@@21| (+ |pos#0@@16| 1))))) :qid |unknown.0:0| :skolemid |1675| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@74) |s#0@@21| |a#0@@29| |b#0@@16| |pos#0@@16|)) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@4 T@U) ($ly@@75 T@U) (|s#0@@22| T@U) (|a#0@@30| T@U) (|b#0@@17| T@U) (|pos#0@@17| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@4) TyType) (= (type $ly@@75) LayerTypeType)) (= (type |s#0@@22|) (SeqType BoxType))) (= (type |a#0@@30|) BoxType)) (= (type |b#0@@17|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@4 (Lit |s#0@@22|) |a#0@@30| |b#0@@17| (LitInt |pos#0@@17|)) (and (and (and ($Is |s#0@@22| (TSeq Sequences._default.replace1with2$A@@4)) ($IsBox |a#0@@30| Sequences._default.replace1with2$A@@4)) ($IsBox |b#0@@17| Sequences._default.replace1with2$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@17|)) (< |pos#0@@17| (|Seq#Length| (Lit |s#0@@22|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@75) (Lit |s#0@@22|) |a#0@@30| |b#0@@17| (LitInt |pos#0@@17|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@22|) (LitInt |pos#0@@17|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@30|) |b#0@@17|)) (|Seq#Drop| (Lit |s#0@@22|) (LitInt (+ |pos#0@@17| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1676| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@75) (Lit |s#0@@22|) |a#0@@30| |b#0@@17| (LitInt |pos#0@@17|))) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@5 T@U) ($ly@@76 T@U) (|s#0@@23| T@U) (|a#0@@31| T@U) (|b#0@@18| T@U) (|pos#0@@18| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@5) TyType) (= (type $ly@@76) LayerTypeType)) (= (type |s#0@@23|) (SeqType BoxType))) (= (type |a#0@@31|) BoxType)) (= (type |b#0@@18|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@5 (Lit |s#0@@23|) (Lit |a#0@@31|) (Lit |b#0@@18|) (LitInt |pos#0@@18|)) (and (and (and ($Is |s#0@@23| (TSeq Sequences._default.replace1with2$A@@5)) ($IsBox |a#0@@31| Sequences._default.replace1with2$A@@5)) ($IsBox |b#0@@18| Sequences._default.replace1with2$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@18|)) (< |pos#0@@18| (|Seq#Length| (Lit |s#0@@23|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@76) (Lit |s#0@@23|) (Lit |a#0@@31|) (Lit |b#0@@18|) (LitInt |pos#0@@18|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@23|) (LitInt |pos#0@@18|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@31|)) (Lit |b#0@@18|))) (|Seq#Drop| (Lit |s#0@@23|) (LitInt (+ |pos#0@@18| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1677| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@76) (Lit |s#0@@23|) (Lit |a#0@@31|) (Lit |b#0@@18|) (LitInt |pos#0@@18|))) ))))
(assert (forall ((arg0@@250 T@U) (arg1@@125 T@U) (arg2@@76 T@U) (arg3@@52 T@U) (arg4@@38 Int) ) (! (= (type (Sequences.__default.replace2with1 arg0@@250 arg1@@125 arg2@@76 arg3@@52 arg4@@38)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace2with1| :pattern ( (Sequences.__default.replace2with1 arg0@@250 arg1@@125 arg2@@76 arg3@@52 arg4@@38)) )))
(assert (forall ((Sequences._default.replace2with1$A T@U) ($ly@@77 T@U) (|s#0@@24| T@U) (|a#0@@32| T@U) (|pos#0@@19| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A) TyType) (= (type $ly@@77) LayerTypeType)) (= (type |s#0@@24|) (SeqType BoxType))) (= (type |a#0@@32|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@77) |s#0@@24| |a#0@@32| |pos#0@@19|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A $ly@@77 |s#0@@24| |a#0@@32| |pos#0@@19|))) :qid |unknown.0:0| :skolemid |1678| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@77) |s#0@@24| |a#0@@32| |pos#0@@19|)) )))
(assert (forall ((Sequences._default.replace2with1$A@@0 T@U) ($ly@@78 T@U) (|s#0@@25| T@U) (|a#0@@33| T@U) (|pos#0@@20| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A@@0) TyType) (= (type $ly@@78) LayerTypeType)) (= (type |s#0@@25|) (SeqType BoxType))) (= (type |a#0@@33|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $ly@@78 |s#0@@25| |a#0@@33| |pos#0@@20|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $LZ |s#0@@25| |a#0@@33| |pos#0@@20|))) :qid |unknown.0:0| :skolemid |1679| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 (AsFuelBottom $ly@@78) |s#0@@25| |a#0@@33| |pos#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@1 T@U) ($ly@@79 T@U) (|s#0@@26| T@U) (|a#0@@34| T@U) (|pos#0@@21| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@1) TyType) (= (type $ly@@79) LayerTypeType)) (= (type |s#0@@26|) (SeqType BoxType))) (= (type |a#0@@34|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@1 |s#0@@26| |a#0@@34| |pos#0@@21|) (and (and ($Is |s#0@@26| (TSeq Sequences._default.replace2with1$A@@1)) ($IsBox |a#0@@34| Sequences._default.replace2with1$A@@1)) (and (<= (LitInt 0) |pos#0@@21|) (< |pos#0@@21| (- (|Seq#Length| |s#0@@26|) 1)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@26| |a#0@@34| |pos#0@@21|)) (- (|Seq#Length| |s#0@@26|) 1)) (forall ((|i#0@@33| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@33|) (< |i#0@@33| |pos#0@@21|)) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@26| |a#0@@34| |pos#0@@21|) |i#0@@33|) (|Seq#Index| |s#0@@26| |i#0@@33|)))) :qid |sequence.221:18| :skolemid |1680| :pattern ( (|Seq#Index| |s#0@@26| |i#0@@33|)) :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@26| |a#0@@34| |pos#0@@21|) |i#0@@33|)) ))) (forall ((|i#1@@8| Int) ) (!  (=> true (=> (and (< |pos#0@@21| |i#1@@8|) (< |i#1@@8| (- (|Seq#Length| |s#0@@26|) 1))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@26| |a#0@@34| |pos#0@@21|) |i#1@@8|) (|Seq#Index| |s#0@@26| (+ |i#1@@8| 1))))) :qid |sequence.222:18| :skolemid |1681| :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@26| |a#0@@34| |pos#0@@21|) |i#1@@8|)) ))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@26| |a#0@@34| |pos#0@@21|) |pos#0@@21|) |a#0@@34|)) ($Is (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@26| |a#0@@34| |pos#0@@21|) (TSeq Sequences._default.replace2with1$A@@1)))) :qid |unknown.0:0| :skolemid |1682| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@79 |s#0@@26| |a#0@@34| |pos#0@@21|)) ))))
(assert (forall ((Sequences._default.replace2with1$A@@2 T@U) ($ly@@80 T@U) (|s#0@@27| T@U) (|a#0@@35| T@U) (|pos#0@@22| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@2) TyType) (= (type $ly@@80) LayerTypeType)) (= (type |s#0@@27|) (SeqType BoxType))) (= (type |a#0@@35|) BoxType)) (and ($Is |s#0@@27| (TSeq Sequences._default.replace2with1$A@@2)) ($IsBox |a#0@@35| Sequences._default.replace2with1$A@@2))) (and (=> (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@80 |s#0@@27| |a#0@@35| |pos#0@@22|) (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@27|) 1)))) (=> (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@27|) 1))) (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@80 |s#0@@27| |a#0@@35| |pos#0@@22|)))) :qid |unknown.0:0| :skolemid |1683| :pattern ( (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@80 |s#0@@27| |a#0@@35| |pos#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@3 T@U) ($ly@@81 T@U) (|s#0@@28| T@U) (|a#0@@36| T@U) (|pos#0@@23| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@3) TyType) (= (type $ly@@81) LayerTypeType)) (= (type |s#0@@28|) (SeqType BoxType))) (= (type |a#0@@36|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@3 |s#0@@28| |a#0@@36| |pos#0@@23|) (and (and ($Is |s#0@@28| (TSeq Sequences._default.replace2with1$A@@3)) ($IsBox |a#0@@36| Sequences._default.replace2with1$A@@3)) (and (<= (LitInt 0) |pos#0@@23|) (< |pos#0@@23| (- (|Seq#Length| |s#0@@28|) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@81) |s#0@@28| |a#0@@36| |pos#0@@23|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@28| |pos#0@@23|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@36|)) (|Seq#Drop| |s#0@@28| (+ |pos#0@@23| 2))))) :qid |unknown.0:0| :skolemid |1684| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@81) |s#0@@28| |a#0@@36| |pos#0@@23|)) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@4 T@U) ($ly@@82 T@U) (|s#0@@29| T@U) (|a#0@@37| T@U) (|pos#0@@24| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@4) TyType) (= (type $ly@@82) LayerTypeType)) (= (type |s#0@@29|) (SeqType BoxType))) (= (type |a#0@@37|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@4 (Lit |s#0@@29|) |a#0@@37| (LitInt |pos#0@@24|)) (and (and ($Is |s#0@@29| (TSeq Sequences._default.replace2with1$A@@4)) ($IsBox |a#0@@37| Sequences._default.replace2with1$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@24|)) (< |pos#0@@24| (- (|Seq#Length| (Lit |s#0@@29|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@82) (Lit |s#0@@29|) |a#0@@37| (LitInt |pos#0@@24|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@29|) (LitInt |pos#0@@24|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@37|)) (|Seq#Drop| (Lit |s#0@@29|) (LitInt (+ |pos#0@@24| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |1685| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@82) (Lit |s#0@@29|) |a#0@@37| (LitInt |pos#0@@24|))) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@5 T@U) ($ly@@83 T@U) (|s#0@@30| T@U) (|a#0@@38| T@U) (|pos#0@@25| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@5) TyType) (= (type $ly@@83) LayerTypeType)) (= (type |s#0@@30|) (SeqType BoxType))) (= (type |a#0@@38|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@5 (Lit |s#0@@30|) (Lit |a#0@@38|) (LitInt |pos#0@@25|)) (and (and ($Is |s#0@@30| (TSeq Sequences._default.replace2with1$A@@5)) ($IsBox |a#0@@38| Sequences._default.replace2with1$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@25|)) (< |pos#0@@25| (- (|Seq#Length| (Lit |s#0@@30|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@83) (Lit |s#0@@30|) (Lit |a#0@@38|) (LitInt |pos#0@@25|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@30|) (LitInt |pos#0@@25|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@38|))) (|Seq#Drop| (Lit |s#0@@30|) (LitInt (+ |pos#0@@25| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |1686| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@83) (Lit |s#0@@30|) (Lit |a#0@@38|) (LitInt |pos#0@@25|))) ))))
(assert (forall ((arg0@@251 T@U) (arg1@@126 T@U) (arg2@@77 T@U) (arg3@@53 T@U) ) (! (= (type (Sequences.__default.concat arg0@@251 arg1@@126 arg2@@77 arg3@@53)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat| :pattern ( (Sequences.__default.concat arg0@@251 arg1@@126 arg2@@77 arg3@@53)) )))
(assert (forall ((Sequences._default.concat$A T@U) ($ly@@84 T@U) (|a#0@@39| T@U) (|b#0@@19| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A) TyType) (= (type $ly@@84) LayerTypeType)) (= (type |a#0@@39|) (SeqType BoxType))) (= (type |b#0@@19|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@84) |a#0@@39| |b#0@@19|) (Sequences.__default.concat Sequences._default.concat$A $ly@@84 |a#0@@39| |b#0@@19|))) :qid |unknown.0:0| :skolemid |1687| :pattern ( (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@84) |a#0@@39| |b#0@@19|)) )))
(assert (forall ((Sequences._default.concat$A@@0 T@U) ($ly@@85 T@U) (|a#0@@40| T@U) (|b#0@@20| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A@@0) TyType) (= (type $ly@@85) LayerTypeType)) (= (type |a#0@@40|) (SeqType BoxType))) (= (type |b#0@@20|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A@@0 $ly@@85 |a#0@@40| |b#0@@20|) (Sequences.__default.concat Sequences._default.concat$A@@0 $LZ |a#0@@40| |b#0@@20|))) :qid |unknown.0:0| :skolemid |1688| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@0 (AsFuelBottom $ly@@85) |a#0@@40| |b#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@1 T@U) ($ly@@86 T@U) (|a#0@@41| T@U) (|b#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@1) TyType) (= (type $ly@@86) LayerTypeType)) (= (type |a#0@@41|) (SeqType BoxType))) (= (type |b#0@@21|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@1 |a#0@@41| |b#0@@21|) (and ($Is |a#0@@41| (TSeq Sequences._default.concat$A@@1)) ($Is |b#0@@21| (TSeq Sequences._default.concat$A@@1))))) (and (and (and (= (|Seq#Length| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@86 |a#0@@41| |b#0@@21|)) (+ (|Seq#Length| |a#0@@41|) (|Seq#Length| |b#0@@21|))) (forall ((|i#0@@34| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@34|) (< |i#0@@34| (|Seq#Length| |a#0@@41|))) (= (|Seq#Index| |a#0@@41| |i#0@@34|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@86 |a#0@@41| |b#0@@21|) |i#0@@34|)))) :qid |sequence.230:18| :skolemid |1689| :pattern ( (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@86 |a#0@@41| |b#0@@21|) |i#0@@34|)) :pattern ( (|Seq#Index| |a#0@@41| |i#0@@34|)) ))) (forall ((|i#1@@9| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@9|) (< |i#1@@9| (|Seq#Length| |b#0@@21|))) (= (|Seq#Index| |b#0@@21| |i#1@@9|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@86 |a#0@@41| |b#0@@21|) (+ (|Seq#Length| |a#0@@41|) |i#1@@9|))))) :qid |sequence.231:18| :skolemid |1690| :pattern ( (|Seq#Index| |b#0@@21| |i#1@@9|)) ))) ($Is (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@86 |a#0@@41| |b#0@@21|) (TSeq Sequences._default.concat$A@@1)))) :qid |unknown.0:0| :skolemid |1691| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@86 |a#0@@41| |b#0@@21|)) ))))
(assert (forall ((Sequences._default.concat$A@@2 T@U) ($ly@@87 T@U) (|a#0@@42| T@U) (|b#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@2) TyType) (= (type $ly@@87) LayerTypeType)) (= (type |a#0@@42|) (SeqType BoxType))) (= (type |b#0@@22|) (SeqType BoxType))) (and ($Is |a#0@@42| (TSeq Sequences._default.concat$A@@2)) ($Is |b#0@@22| (TSeq Sequences._default.concat$A@@2)))) (and (=> (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@87 |a#0@@42| |b#0@@22|) true) (=> true (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@87 |a#0@@42| |b#0@@22|)))) :qid |unknown.0:0| :skolemid |1692| :pattern ( (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@87 |a#0@@42| |b#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@3 T@U) ($ly@@88 T@U) (|a#0@@43| T@U) (|b#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@3) TyType) (= (type $ly@@88) LayerTypeType)) (= (type |a#0@@43|) (SeqType BoxType))) (= (type |b#0@@23|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@3 |a#0@@43| |b#0@@23|) (and ($Is |a#0@@43| (TSeq Sequences._default.concat$A@@3)) ($Is |b#0@@23| (TSeq Sequences._default.concat$A@@3))))) (= (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@88) |a#0@@43| |b#0@@23|) (|Seq#Append| |a#0@@43| |b#0@@23|))) :qid |unknown.0:0| :skolemid |1693| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@88) |a#0@@43| |b#0@@23|)) ))))
(assert  (=> true (forall ((Sequences._default.concat$A@@4 T@U) ($ly@@89 T@U) (|a#0@@44| T@U) (|b#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@4) TyType) (= (type $ly@@89) LayerTypeType)) (= (type |a#0@@44|) (SeqType BoxType))) (= (type |b#0@@24|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@4 (Lit |a#0@@44|) (Lit |b#0@@24|)) (and ($Is |a#0@@44| (TSeq Sequences._default.concat$A@@4)) ($Is |b#0@@24| (TSeq Sequences._default.concat$A@@4))))) (= (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@89) (Lit |a#0@@44|) (Lit |b#0@@24|)) (|Seq#Append| |a#0@@44| |b#0@@24|))) :qid |unknown.0:0| :weight 3 :skolemid |1694| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@89) (Lit |a#0@@44|) (Lit |b#0@@24|))) ))))
(assert (forall ((arg0@@252 T@U) (arg1@@127 T@U) (arg2@@78 T@U) (arg3@@54 T@U) (arg4@@39 T@U) ) (! (= (type (Sequences.__default.concat3 arg0@@252 arg1@@127 arg2@@78 arg3@@54 arg4@@39)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat3| :pattern ( (Sequences.__default.concat3 arg0@@252 arg1@@127 arg2@@78 arg3@@54 arg4@@39)) )))
(assert (forall ((Sequences._default.concat3$A T@U) ($ly@@90 T@U) (|a#0@@45| T@U) (|b#0@@25| T@U) (|c#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A) TyType) (= (type $ly@@90) LayerTypeType)) (= (type |a#0@@45|) (SeqType BoxType))) (= (type |b#0@@25|) BoxType)) (= (type |c#0@@3|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@90) |a#0@@45| |b#0@@25| |c#0@@3|) (Sequences.__default.concat3 Sequences._default.concat3$A $ly@@90 |a#0@@45| |b#0@@25| |c#0@@3|))) :qid |unknown.0:0| :skolemid |1695| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@90) |a#0@@45| |b#0@@25| |c#0@@3|)) )))
(assert (forall ((Sequences._default.concat3$A@@0 T@U) ($ly@@91 T@U) (|a#0@@46| T@U) (|b#0@@26| T@U) (|c#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A@@0) TyType) (= (type $ly@@91) LayerTypeType)) (= (type |a#0@@46|) (SeqType BoxType))) (= (type |b#0@@26|) BoxType)) (= (type |c#0@@4|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $ly@@91 |a#0@@46| |b#0@@26| |c#0@@4|) (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $LZ |a#0@@46| |b#0@@26| |c#0@@4|))) :qid |unknown.0:0| :skolemid |1696| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@0 (AsFuelBottom $ly@@91) |a#0@@46| |b#0@@26| |c#0@@4|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@1 T@U) ($ly@@92 T@U) (|a#0@@47| T@U) (|b#0@@27| T@U) (|c#0@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@1) TyType) (= (type $ly@@92) LayerTypeType)) (= (type |a#0@@47|) (SeqType BoxType))) (= (type |b#0@@27|) BoxType)) (= (type |c#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@1 |a#0@@47| |b#0@@27| |c#0@@5|) (and (and ($Is |a#0@@47| (TSeq Sequences._default.concat3$A@@1)) ($IsBox |b#0@@27| Sequences._default.concat3$A@@1)) ($Is |c#0@@5| (TSeq Sequences._default.concat3$A@@1))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@92 |a#0@@47| |b#0@@27| |c#0@@5|)) (+ (+ (|Seq#Length| |a#0@@47|) (|Seq#Length| |c#0@@5|)) 1)) (forall ((|i#0@@35| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@35|) (< |i#0@@35| (|Seq#Length| |a#0@@47|))) (= (|Seq#Index| |a#0@@47| |i#0@@35|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@92 |a#0@@47| |b#0@@27| |c#0@@5|) |i#0@@35|)))) :qid |sequence.238:18| :skolemid |1697| :pattern ( (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@92 |a#0@@47| |b#0@@27| |c#0@@5|) |i#0@@35|)) :pattern ( (|Seq#Index| |a#0@@47| |i#0@@35|)) ))) (= (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@92 |a#0@@47| |b#0@@27| |c#0@@5|) (|Seq#Length| |a#0@@47|)) |b#0@@27|)) (forall ((|i#1@@10| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@10|) (< |i#1@@10| (|Seq#Length| |c#0@@5|))) (= (|Seq#Index| |c#0@@5| |i#1@@10|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@92 |a#0@@47| |b#0@@27| |c#0@@5|) (+ (+ (|Seq#Length| |a#0@@47|) 1) |i#1@@10|))))) :qid |sequence.240:18| :skolemid |1698| :pattern ( (|Seq#Index| |c#0@@5| |i#1@@10|)) ))) ($Is (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@92 |a#0@@47| |b#0@@27| |c#0@@5|) (TSeq Sequences._default.concat3$A@@1)))) :qid |unknown.0:0| :skolemid |1699| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@92 |a#0@@47| |b#0@@27| |c#0@@5|)) ))))
(assert (forall ((Sequences._default.concat3$A@@2 T@U) ($ly@@93 T@U) (|a#0@@48| T@U) (|b#0@@28| T@U) (|c#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@2) TyType) (= (type $ly@@93) LayerTypeType)) (= (type |a#0@@48|) (SeqType BoxType))) (= (type |b#0@@28|) BoxType)) (= (type |c#0@@6|) (SeqType BoxType))) (and (and ($Is |a#0@@48| (TSeq Sequences._default.concat3$A@@2)) ($IsBox |b#0@@28| Sequences._default.concat3$A@@2)) ($Is |c#0@@6| (TSeq Sequences._default.concat3$A@@2)))) (and (=> (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@93 |a#0@@48| |b#0@@28| |c#0@@6|) true) (=> true (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@93 |a#0@@48| |b#0@@28| |c#0@@6|)))) :qid |unknown.0:0| :skolemid |1700| :pattern ( (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@93 |a#0@@48| |b#0@@28| |c#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@3 T@U) ($ly@@94 T@U) (|a#0@@49| T@U) (|b#0@@29| T@U) (|c#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@3) TyType) (= (type $ly@@94) LayerTypeType)) (= (type |a#0@@49|) (SeqType BoxType))) (= (type |b#0@@29|) BoxType)) (= (type |c#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@3 |a#0@@49| |b#0@@29| |c#0@@7|) (and (and ($Is |a#0@@49| (TSeq Sequences._default.concat3$A@@3)) ($IsBox |b#0@@29| Sequences._default.concat3$A@@3)) ($Is |c#0@@7| (TSeq Sequences._default.concat3$A@@3))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@94) |a#0@@49| |b#0@@29| |c#0@@7|) (|Seq#Append| (|Seq#Append| |a#0@@49| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@29|)) |c#0@@7|))) :qid |unknown.0:0| :skolemid |1701| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@94) |a#0@@49| |b#0@@29| |c#0@@7|)) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@4 T@U) ($ly@@95 T@U) (|a#0@@50| T@U) (|b#0@@30| T@U) (|c#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@4) TyType) (= (type $ly@@95) LayerTypeType)) (= (type |a#0@@50|) (SeqType BoxType))) (= (type |b#0@@30|) BoxType)) (= (type |c#0@@8|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@4 (Lit |a#0@@50|) |b#0@@30| (Lit |c#0@@8|)) (and (and ($Is |a#0@@50| (TSeq Sequences._default.concat3$A@@4)) ($IsBox |b#0@@30| Sequences._default.concat3$A@@4)) ($Is |c#0@@8| (TSeq Sequences._default.concat3$A@@4))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@95) (Lit |a#0@@50|) |b#0@@30| (Lit |c#0@@8|)) (|Seq#Append| (|Seq#Append| |a#0@@50| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@30|)) |c#0@@8|))) :qid |unknown.0:0| :weight 3 :skolemid |1702| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@95) (Lit |a#0@@50|) |b#0@@30| (Lit |c#0@@8|))) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@5 T@U) ($ly@@96 T@U) (|a#0@@51| T@U) (|b#0@@31| T@U) (|c#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@5) TyType) (= (type $ly@@96) LayerTypeType)) (= (type |a#0@@51|) (SeqType BoxType))) (= (type |b#0@@31|) BoxType)) (= (type |c#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@5 (Lit |a#0@@51|) (Lit |b#0@@31|) (Lit |c#0@@9|)) (and (and ($Is |a#0@@51| (TSeq Sequences._default.concat3$A@@5)) ($IsBox |b#0@@31| Sequences._default.concat3$A@@5)) ($Is |c#0@@9| (TSeq Sequences._default.concat3$A@@5))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@96) (Lit |a#0@@51|) (Lit |b#0@@31|) (Lit |c#0@@9|)) (|Seq#Append| (|Seq#Append| |a#0@@51| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |b#0@@31|))) |c#0@@9|))) :qid |unknown.0:0| :weight 3 :skolemid |1703| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@96) (Lit |a#0@@51|) (Lit |b#0@@31|) (Lit |c#0@@9|))) ))))
(assert (forall ((arg0@@253 T@U) (arg1@@128 T@U) (arg2@@79 T@U) ) (! (= (type (Sequences.__default.concatSeq arg0@@253 arg1@@128 arg2@@79)) (SeqType BoxType)) :qid |funType:Sequences.__default.concatSeq| :pattern ( (Sequences.__default.concatSeq arg0@@253 arg1@@128 arg2@@79)) )))
(assert (forall ((Sequences._default.concatSeq$A T@U) ($ly@@97 T@U) (|a#0@@52| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A) TyType) (= (type $ly@@97) LayerTypeType)) (= (type |a#0@@52|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@97) |a#0@@52|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A $ly@@97 |a#0@@52|))) :qid |unknown.0:0| :skolemid |1704| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@97) |a#0@@52|)) )))
(assert (forall ((Sequences._default.concatSeq$A@@0 T@U) ($ly@@98 T@U) (|a#0@@53| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A@@0) TyType) (= (type $ly@@98) LayerTypeType)) (= (type |a#0@@53|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $ly@@98 |a#0@@53|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $LZ |a#0@@53|))) :qid |unknown.0:0| :skolemid |1705| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 (AsFuelBottom $ly@@98) |a#0@@53|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@1 T@U) ($ly@@99 T@U) (|a#0@@54| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@1) TyType) (= (type $ly@@99) LayerTypeType)) (= (type |a#0@@54|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@1 |a#0@@54|) ($Is |a#0@@54| (TSeq (TSeq Sequences._default.concatSeq$A@@1))))) ($Is (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@99 |a#0@@54|) (TSeq Sequences._default.concatSeq$A@@1))) :qid |unknown.0:0| :skolemid |1706| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@99 |a#0@@54|)) ))))
(assert (forall ((Sequences._default.concatSeq$A@@2 T@U) ($ly@@100 T@U) (|a#0@@55| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@2) TyType) (= (type $ly@@100) LayerTypeType)) (= (type |a#0@@55|) (SeqType BoxType))) ($Is |a#0@@55| (TSeq (TSeq Sequences._default.concatSeq$A@@2)))) (and (=> (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@100 |a#0@@55|) true) (=> true (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@100 |a#0@@55|)))) :qid |unknown.0:0| :skolemid |1707| :pattern ( (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@100 |a#0@@55|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@3 T@U) ($ly@@101 T@U) (|a#0@@56| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@3) TyType) (= (type $ly@@101) LayerTypeType)) (= (type |a#0@@56|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 |a#0@@56|) ($Is |a#0@@56| (TSeq (TSeq Sequences._default.concatSeq$A@@3))))) (and (=> (not (= (|Seq#Length| |a#0@@56|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@56|) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@56|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@56|))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@101) |a#0@@56|) (ite (= (|Seq#Length| |a#0@@56|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 $ly@@101 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@56|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@3) |a#0@@56|))))))) :qid |unknown.0:0| :skolemid |1708| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@101) |a#0@@56|)) ))))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@4 T@U) ($ly@@102 T@U) (|a#0@@57| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@4) TyType) (= (type $ly@@102) LayerTypeType)) (= (type |a#0@@57|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit |a#0@@57|)) ($Is |a#0@@57| (TSeq (TSeq Sequences._default.concatSeq$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@57|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@57|)) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@57|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@57|)))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@102) (Lit |a#0@@57|)) (ite (= (|Seq#Length| (Lit |a#0@@57|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@102) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@57|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@57|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1709| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@102) (Lit |a#0@@57|))) ))))
(assert (forall ((Sequences._default.IsPrefix$A T@U) ($ly@@103 T@U) (|a#0@@58| T@U) (|b#0@@32| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A) TyType) (= (type $ly@@103) LayerTypeType)) (= (type |a#0@@58|) (SeqType BoxType))) (= (type |b#0@@32|) (SeqType BoxType))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@103) |a#0@@58| |b#0@@32|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@103 |a#0@@58| |b#0@@32|)) (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@103 |a#0@@58| |b#0@@32|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@103) |a#0@@58| |b#0@@32|)))) :qid |unknown.0:0| :skolemid |1710| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@103) |a#0@@58| |b#0@@32|)) )))
(assert (forall ((Sequences._default.IsPrefix$A@@0 T@U) ($ly@@104 T@U) (|a#0@@59| T@U) (|b#0@@33| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A@@0) TyType) (= (type $ly@@104) LayerTypeType)) (= (type |a#0@@59|) (SeqType BoxType))) (= (type |b#0@@33|) (SeqType BoxType))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@104 |a#0@@59| |b#0@@33|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@59| |b#0@@33|)) (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@59| |b#0@@33|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@104 |a#0@@59| |b#0@@33|)))) :qid |unknown.0:0| :skolemid |1711| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 (AsFuelBottom $ly@@104) |a#0@@59| |b#0@@33|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@1 T@U) ($ly@@105 T@U) (|a#0@@60| T@U) (|b#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.IsPrefix$A@@1) TyType) (= (type $ly@@105) LayerTypeType)) (= (type |a#0@@60|) (SeqType BoxType))) (= (type |b#0@@34|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@1 |a#0@@60| |b#0@@34|) (and ($Is |a#0@@60| (TSeq Sequences._default.IsPrefix$A@@1)) ($Is |b#0@@34| (TSeq Sequences._default.IsPrefix$A@@1))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@105 |a#0@@60| |b#0@@34|)) (<= (|Seq#Length| |a#0@@60|) (|Seq#Length| |b#0@@34|))) :qid |unknown.0:0| :skolemid |1712| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@105 |a#0@@60| |b#0@@34|)) ))))
(assert (forall ((Sequences._default.IsPrefix$A@@2 T@U) ($ly@@106 T@U) (|a#0@@61| T@U) (|b#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@2) TyType) (= (type $ly@@106) LayerTypeType)) (= (type |a#0@@61|) (SeqType BoxType))) (= (type |b#0@@35|) (SeqType BoxType))) (and ($Is |a#0@@61| (TSeq Sequences._default.IsPrefix$A@@2)) ($Is |b#0@@35| (TSeq Sequences._default.IsPrefix$A@@2)))) (and (=> (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@106 |a#0@@61| |b#0@@35|) true) (=> true (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@106 |a#0@@61| |b#0@@35|)))) :qid |unknown.0:0| :skolemid |1713| :pattern ( (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@106 |a#0@@61| |b#0@@35|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@3 T@U) ($ly@@107 T@U) (|a#0@@62| T@U) (|b#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@3) TyType) (= (type $ly@@107) LayerTypeType)) (= (type |a#0@@62|) (SeqType BoxType))) (= (type |b#0@@36|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@3 |a#0@@62| |b#0@@36|) (and ($Is |a#0@@62| (TSeq Sequences._default.IsPrefix$A@@3)) ($Is |b#0@@36| (TSeq Sequences._default.IsPrefix$A@@3))))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@107) |a#0@@62| |b#0@@36|) (and (<= (|Seq#Length| |a#0@@62|) (|Seq#Length| |b#0@@36|)) (|Seq#Equal| |a#0@@62| (|Seq#Take| |b#0@@36| (|Seq#Length| |a#0@@62|))))) (=> (and (<= (|Seq#Length| |a#0@@62|) (|Seq#Length| |b#0@@36|)) (|Seq#Equal| |a#0@@62| (|Seq#Take| |b#0@@36| (|Seq#Length| |a#0@@62|)))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@107) |a#0@@62| |b#0@@36|)))) :qid |unknown.0:0| :skolemid |1714| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@107) |a#0@@62| |b#0@@36|)) ))))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@4 T@U) ($ly@@108 T@U) (|a#0@@63| T@U) (|b#0@@37| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@4) TyType) (= (type $ly@@108) LayerTypeType)) (= (type |a#0@@63|) (SeqType BoxType))) (= (type |b#0@@37|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@4 (Lit |a#0@@63|) (Lit |b#0@@37|)) (and ($Is |a#0@@63| (TSeq Sequences._default.IsPrefix$A@@4)) ($Is |b#0@@37| (TSeq Sequences._default.IsPrefix$A@@4))))) (and (=> (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@108) (Lit |a#0@@63|) (Lit |b#0@@37|)) (and (<= (|Seq#Length| (Lit |a#0@@63|)) (|Seq#Length| (Lit |b#0@@37|))) (|Seq#Equal| |a#0@@63| (|Seq#Take| (Lit |b#0@@37|) (|Seq#Length| (Lit |a#0@@63|)))))) (=> (and (<= (|Seq#Length| (Lit |a#0@@63|)) (|Seq#Length| (Lit |b#0@@37|))) (|Seq#Equal| |a#0@@63| (|Seq#Take| (Lit |b#0@@37|) (|Seq#Length| (Lit |a#0@@63|))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@108) (Lit |a#0@@63|) (Lit |b#0@@37|))))) :qid |unknown.0:0| :weight 3 :skolemid |1715| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@108) (Lit |a#0@@63|) (Lit |b#0@@37|))) ))))
(assert (forall ((Sequences._default.IsSuffix$A T@U) ($ly@@109 T@U) (|a#0@@64| T@U) (|b#0@@38| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A) TyType) (= (type $ly@@109) LayerTypeType)) (= (type |a#0@@64|) (SeqType BoxType))) (= (type |b#0@@38|) (SeqType BoxType))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@109) |a#0@@64| |b#0@@38|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@109 |a#0@@64| |b#0@@38|)) (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@109 |a#0@@64| |b#0@@38|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@109) |a#0@@64| |b#0@@38|)))) :qid |unknown.0:0| :skolemid |1716| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@109) |a#0@@64| |b#0@@38|)) )))
(assert (forall ((Sequences._default.IsSuffix$A@@0 T@U) ($ly@@110 T@U) (|a#0@@65| T@U) (|b#0@@39| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A@@0) TyType) (= (type $ly@@110) LayerTypeType)) (= (type |a#0@@65|) (SeqType BoxType))) (= (type |b#0@@39|) (SeqType BoxType))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@110 |a#0@@65| |b#0@@39|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@65| |b#0@@39|)) (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@65| |b#0@@39|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@110 |a#0@@65| |b#0@@39|)))) :qid |unknown.0:0| :skolemid |1717| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 (AsFuelBottom $ly@@110) |a#0@@65| |b#0@@39|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@1 T@U) ($ly@@111 T@U) (|a#0@@66| T@U) (|b#0@@40| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@1) TyType) (= (type $ly@@111) LayerTypeType)) (= (type |a#0@@66|) (SeqType BoxType))) (= (type |b#0@@40|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@1 |a#0@@66| |b#0@@40|) (and ($Is |a#0@@66| (TSeq Sequences._default.IsSuffix$A@@1)) ($Is |b#0@@40| (TSeq Sequences._default.IsSuffix$A@@1))))) true) :qid |unknown.0:0| :skolemid |1718| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@1 $ly@@111 |a#0@@66| |b#0@@40|)) ))))
(assert (forall ((Sequences._default.IsSuffix$A@@2 T@U) ($ly@@112 T@U) (|a#0@@67| T@U) (|b#0@@41| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@2) TyType) (= (type $ly@@112) LayerTypeType)) (= (type |a#0@@67|) (SeqType BoxType))) (= (type |b#0@@41|) (SeqType BoxType))) (and ($Is |a#0@@67| (TSeq Sequences._default.IsSuffix$A@@2)) ($Is |b#0@@41| (TSeq Sequences._default.IsSuffix$A@@2)))) (and (=> (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@112 |a#0@@67| |b#0@@41|) true) (=> true (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@112 |a#0@@67| |b#0@@41|)))) :qid |unknown.0:0| :skolemid |1719| :pattern ( (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@112 |a#0@@67| |b#0@@41|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@3 T@U) ($ly@@113 T@U) (|a#0@@68| T@U) (|b#0@@42| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@3) TyType) (= (type $ly@@113) LayerTypeType)) (= (type |a#0@@68|) (SeqType BoxType))) (= (type |b#0@@42|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@3 |a#0@@68| |b#0@@42|) (and ($Is |a#0@@68| (TSeq Sequences._default.IsSuffix$A@@3)) ($Is |b#0@@42| (TSeq Sequences._default.IsSuffix$A@@3))))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@113) |a#0@@68| |b#0@@42|) (and (<= (|Seq#Length| |a#0@@68|) (|Seq#Length| |b#0@@42|)) (|Seq#Equal| |a#0@@68| (|Seq#Drop| |b#0@@42| (- (|Seq#Length| |b#0@@42|) (|Seq#Length| |a#0@@68|)))))) (=> (and (<= (|Seq#Length| |a#0@@68|) (|Seq#Length| |b#0@@42|)) (|Seq#Equal| |a#0@@68| (|Seq#Drop| |b#0@@42| (- (|Seq#Length| |b#0@@42|) (|Seq#Length| |a#0@@68|))))) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@113) |a#0@@68| |b#0@@42|)))) :qid |unknown.0:0| :skolemid |1720| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@113) |a#0@@68| |b#0@@42|)) ))))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@4 T@U) ($ly@@114 T@U) (|a#0@@69| T@U) (|b#0@@43| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@4) TyType) (= (type $ly@@114) LayerTypeType)) (= (type |a#0@@69|) (SeqType BoxType))) (= (type |b#0@@43|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@4 (Lit |a#0@@69|) (Lit |b#0@@43|)) (and ($Is |a#0@@69| (TSeq Sequences._default.IsSuffix$A@@4)) ($Is |b#0@@43| (TSeq Sequences._default.IsSuffix$A@@4))))) (and (=> (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@114) (Lit |a#0@@69|) (Lit |b#0@@43|)) (and (<= (|Seq#Length| (Lit |a#0@@69|)) (|Seq#Length| (Lit |b#0@@43|))) (|Seq#Equal| |a#0@@69| (|Seq#Drop| (Lit |b#0@@43|) (- (|Seq#Length| (Lit |b#0@@43|)) (|Seq#Length| (Lit |a#0@@69|))))))) (=> (and (<= (|Seq#Length| (Lit |a#0@@69|)) (|Seq#Length| (Lit |b#0@@43|))) (|Seq#Equal| |a#0@@69| (|Seq#Drop| (Lit |b#0@@43|) (- (|Seq#Length| (Lit |b#0@@43|)) (|Seq#Length| (Lit |a#0@@69|)))))) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@114) (Lit |a#0@@69|) (Lit |b#0@@43|))))) :qid |unknown.0:0| :weight 3 :skolemid |1721| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@114) (Lit |a#0@@69|) (Lit |b#0@@43|))) ))))
(assert (forall ((arg0@@254 T@U) (arg1@@129 T@U) (arg2@@80 T@U) (arg3@@55 T@U) (arg4@@40 Int) ) (! (= (type (Sequences.__default.SeqIndexIterate arg0@@254 arg1@@129 arg2@@80 arg3@@55 arg4@@40)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndexIterate| :pattern ( (Sequences.__default.SeqIndexIterate arg0@@254 arg1@@129 arg2@@80 arg3@@55 arg4@@40)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A T@U) ($ly@@115 T@U) (|run#0@@54| T@U) (|needle#0| T@U) (|i#0@@36| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A) TyType) (= (type $ly@@115) LayerTypeType)) (= (type |run#0@@54|) (SeqType BoxType))) (= (type |needle#0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@115) |run#0@@54| |needle#0| |i#0@@36|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A $ly@@115 |run#0@@54| |needle#0| |i#0@@36|))) :qid |unknown.0:0| :skolemid |1722| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@115) |run#0@@54| |needle#0| |i#0@@36|)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@0 T@U) ($ly@@116 T@U) (|run#0@@55| T@U) (|needle#0@@0| T@U) (|i#0@@37| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@0) TyType) (= (type $ly@@116) LayerTypeType)) (= (type |run#0@@55|) (SeqType BoxType))) (= (type |needle#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $ly@@116 |run#0@@55| |needle#0@@0| |i#0@@37|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $LZ |run#0@@55| |needle#0@@0| |i#0@@37|))) :qid |unknown.0:0| :skolemid |1723| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 (AsFuelBottom $ly@@116) |run#0@@55| |needle#0@@0| |i#0@@37|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@1 T@U) ($ly@@117 T@U) (|run#0@@56| T@U) (|needle#0@@1| T@U) (|i#0@@38| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@1) TyType) (= (type $ly@@117) LayerTypeType)) (= (type |run#0@@56|) (SeqType BoxType))) (= (type |needle#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@1 |run#0@@56| |needle#0@@1| |i#0@@38|) (and (and ($Is |run#0@@56| (TSeq Sequences._default.SeqIndexIterate$A@@1)) ($IsBox |needle#0@@1| Sequences._default.SeqIndexIterate$A@@1)) (and (<= (LitInt 0) |i#0@@38|) (<= |i#0@@38| (|Seq#Length| |run#0@@56|)))))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@117 |run#0@@56| |needle#0@@1| |i#0@@38|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@117 |run#0@@56| |needle#0@@1| |i#0@@38|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@117 |run#0@@56| |needle#0@@1| |i#0@@38|)))) (|Seq#Length| |run#0@@56|))) (= (|Seq#Index| |run#0@@56| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@117 |run#0@@56| |needle#0@@1| |i#0@@38|))))) |needle#0@@1|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@117 |run#0@@56| |needle#0@@1| |i#0@@38|)) (forall ((|j#0@@1| Int) ) (!  (=> (and (<= |i#0@@38| |j#0@@1|) (< |j#0@@1| (|Seq#Length| |run#0@@56|))) (not (= (|Seq#Index| |run#0@@56| |j#0@@1|) |needle#0@@1|))) :qid |sequence.340:32| :skolemid |1724| :pattern ( (|Seq#Index| |run#0@@56| |j#0@@1|)) )))) ($Is (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@117 |run#0@@56| |needle#0@@1| |i#0@@38|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |1725| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@117 |run#0@@56| |needle#0@@1| |i#0@@38|)) ))))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@2 T@U) ($ly@@118 T@U) (|run#0@@57| T@U) (|needle#0@@2| T@U) (|i#0@@39| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@2) TyType) (= (type $ly@@118) LayerTypeType)) (= (type |run#0@@57|) (SeqType BoxType))) (= (type |needle#0@@2|) BoxType)) (and ($Is |run#0@@57| (TSeq Sequences._default.SeqIndexIterate$A@@2)) ($IsBox |needle#0@@2| Sequences._default.SeqIndexIterate$A@@2))) (and (=> (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@118 |run#0@@57| |needle#0@@2| |i#0@@39|) (and (<= (LitInt 0) |i#0@@39|) (<= |i#0@@39| (|Seq#Length| |run#0@@57|)))) (=> (and (<= (LitInt 0) |i#0@@39|) (<= |i#0@@39| (|Seq#Length| |run#0@@57|))) (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@118 |run#0@@57| |needle#0@@2| |i#0@@39|)))) :qid |unknown.0:0| :skolemid |1726| :pattern ( (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@118 |run#0@@57| |needle#0@@2| |i#0@@39|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@3 T@U) ($ly@@119 T@U) (|run#0@@58| T@U) (|needle#0@@3| T@U) (|i#0@@40| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@3) TyType) (= (type $ly@@119) LayerTypeType)) (= (type |run#0@@58|) (SeqType BoxType))) (= (type |needle#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@58| |needle#0@@3| |i#0@@40|) (and (and ($Is |run#0@@58| (TSeq Sequences._default.SeqIndexIterate$A@@3)) ($IsBox |needle#0@@3| Sequences._default.SeqIndexIterate$A@@3)) (and (<= (LitInt 0) |i#0@@40|) (<= |i#0@@40| (|Seq#Length| |run#0@@58|)))))) (and (=> (not (= |i#0@@40| (|Seq#Length| |run#0@@58|))) (=> (not (= (|Seq#Index| |run#0@@58| |i#0@@40|) |needle#0@@3|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@58| |needle#0@@3| (+ |i#0@@40| 1)))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@119) |run#0@@58| |needle#0@@3| |i#0@@40|) (ite (= |i#0@@40| (|Seq#Length| |run#0@@58|)) |#Options.Option.None| (ite (= (|Seq#Index| |run#0@@58| |i#0@@40|) |needle#0@@3|) (|#Options.Option.Some| ($Box (int_2_U |i#0@@40|))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 $ly@@119 |run#0@@58| |needle#0@@3| (+ |i#0@@40| 1))))))) :qid |unknown.0:0| :skolemid |1727| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@119) |run#0@@58| |needle#0@@3| |i#0@@40|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@4 T@U) ($ly@@120 T@U) (|run#0@@59| T@U) (|needle#0@@4| T@U) (|i#0@@41| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@4) TyType) (= (type $ly@@120) LayerTypeType)) (= (type |run#0@@59|) (SeqType BoxType))) (= (type |needle#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@41|)) (and (and ($Is |run#0@@59| (TSeq Sequences._default.SeqIndexIterate$A@@4)) ($IsBox |needle#0@@4| Sequences._default.SeqIndexIterate$A@@4)) (and (<= (LitInt 0) (LitInt |i#0@@41|)) (<= (LitInt |i#0@@41|) (|Seq#Length| (Lit |run#0@@59|))))))) (and (=> (not (= (LitInt |i#0@@41|) (|Seq#Length| (Lit |run#0@@59|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@59|) (LitInt |i#0@@41|)) |needle#0@@4|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@59|) |needle#0@@4| (LitInt (+ |i#0@@41| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@120) (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@41|)) (ite (= (LitInt |i#0@@41|) (|Seq#Length| (Lit |run#0@@59|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@59|) (LitInt |i#0@@41|)) |needle#0@@4|) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@41|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@120) (Lit |run#0@@59|) |needle#0@@4| (LitInt (+ |i#0@@41| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1728| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@120) (Lit |run#0@@59|) |needle#0@@4| (LitInt |i#0@@41|))) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@5 T@U) ($ly@@121 T@U) (|run#0@@60| T@U) (|needle#0@@5| T@U) (|i#0@@42| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@5) TyType) (= (type $ly@@121) LayerTypeType)) (= (type |run#0@@60|) (SeqType BoxType))) (= (type |needle#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@42|)) (and (and ($Is |run#0@@60| (TSeq Sequences._default.SeqIndexIterate$A@@5)) ($IsBox |needle#0@@5| Sequences._default.SeqIndexIterate$A@@5)) (and (<= (LitInt 0) (LitInt |i#0@@42|)) (<= (LitInt |i#0@@42|) (|Seq#Length| (Lit |run#0@@60|))))))) (and (=> (not (= (LitInt |i#0@@42|) (|Seq#Length| (Lit |run#0@@60|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@60|) (LitInt |i#0@@42|)) (Lit |needle#0@@5|))) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@42| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@121) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@42|)) (ite (= (LitInt |i#0@@42|) (|Seq#Length| (Lit |run#0@@60|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@60|) (LitInt |i#0@@42|)) (Lit |needle#0@@5|)) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@42|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@121) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@42| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |1729| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@121) (Lit |run#0@@60|) (Lit |needle#0@@5|) (LitInt |i#0@@42|))) ))))
(assert (forall ((arg0@@255 T@U) (arg1@@130 T@U) (arg2@@81 T@U) (arg3@@56 T@U) ) (! (= (type (Sequences.__default.SeqIndex arg0@@255 arg1@@130 arg2@@81 arg3@@56)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndex| :pattern ( (Sequences.__default.SeqIndex arg0@@255 arg1@@130 arg2@@81 arg3@@56)) )))
(assert (forall ((Sequences._default.SeqIndex$A T@U) ($ly@@122 T@U) (|run#0@@61| T@U) (|needle#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A) TyType) (= (type $ly@@122) LayerTypeType)) (= (type |run#0@@61|) (SeqType BoxType))) (= (type |needle#0@@6|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@122) |run#0@@61| |needle#0@@6|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A $ly@@122 |run#0@@61| |needle#0@@6|))) :qid |unknown.0:0| :skolemid |1730| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@122) |run#0@@61| |needle#0@@6|)) )))
(assert (forall ((Sequences._default.SeqIndex$A@@0 T@U) ($ly@@123 T@U) (|run#0@@62| T@U) (|needle#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A@@0) TyType) (= (type $ly@@123) LayerTypeType)) (= (type |run#0@@62|) (SeqType BoxType))) (= (type |needle#0@@7|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $ly@@123 |run#0@@62| |needle#0@@7|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $LZ |run#0@@62| |needle#0@@7|))) :qid |unknown.0:0| :skolemid |1731| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 (AsFuelBottom $ly@@123) |run#0@@62| |needle#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@1 T@U) ($ly@@124 T@U) (|run#0@@63| T@U) (|needle#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@1) TyType) (= (type $ly@@124) LayerTypeType)) (= (type |run#0@@63|) (SeqType BoxType))) (= (type |needle#0@@8|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@1 |run#0@@63| |needle#0@@8|) (and ($Is |run#0@@63| (TSeq Sequences._default.SeqIndex$A@@1)) ($IsBox |needle#0@@8| Sequences._default.SeqIndex$A@@1)))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@124 |run#0@@63| |needle#0@@8|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@124 |run#0@@63| |needle#0@@8|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@124 |run#0@@63| |needle#0@@8|)))) (|Seq#Length| |run#0@@63|))) (= (|Seq#Index| |run#0@@63| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@124 |run#0@@63| |needle#0@@8|))))) |needle#0@@8|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@124 |run#0@@63| |needle#0@@8|)) (forall ((|i#0@@43| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@43|) (< |i#0@@43| (|Seq#Length| |run#0@@63|))) (not (= (|Seq#Index| |run#0@@63| |i#0@@43|) |needle#0@@8|))) :qid |sequence.350:32| :skolemid |1732| :pattern ( (|Seq#Index| |run#0@@63| |i#0@@43|)) )))) ($Is (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@124 |run#0@@63| |needle#0@@8|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |1733| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@124 |run#0@@63| |needle#0@@8|)) ))))
(assert (forall ((Sequences._default.SeqIndex$A@@2 T@U) ($ly@@125 T@U) (|run#0@@64| T@U) (|needle#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@2) TyType) (= (type $ly@@125) LayerTypeType)) (= (type |run#0@@64|) (SeqType BoxType))) (= (type |needle#0@@9|) BoxType)) (and ($Is |run#0@@64| (TSeq Sequences._default.SeqIndex$A@@2)) ($IsBox |needle#0@@9| Sequences._default.SeqIndex$A@@2))) (and (=> (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@125 |run#0@@64| |needle#0@@9|) true) (=> true (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@125 |run#0@@64| |needle#0@@9|)))) :qid |unknown.0:0| :skolemid |1734| :pattern ( (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@125 |run#0@@64| |needle#0@@9|)) )))
(assert (= (type StartFuel_Sequences._default.SeqIndexIterate) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@3 T@U) ($ly@@126 T@U) (|run#0@@65| T@U) (|needle#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@3) TyType) (= (type $ly@@126) LayerTypeType)) (= (type |run#0@@65|) (SeqType BoxType))) (= (type |needle#0@@10|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@65| |needle#0@@10|) (and ($Is |run#0@@65| (TSeq Sequences._default.SeqIndex$A@@3)) ($IsBox |needle#0@@10| Sequences._default.SeqIndex$A@@3)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@65| |needle#0@@10| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@126) |run#0@@65| |needle#0@@10|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@3 StartFuel_Sequences._default.SeqIndexIterate |run#0@@65| |needle#0@@10| (LitInt 0))))) :qid |unknown.0:0| :skolemid |1735| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@126) |run#0@@65| |needle#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@4 T@U) ($ly@@127 T@U) (|run#0@@66| T@U) (|needle#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@4) TyType) (= (type $ly@@127) LayerTypeType)) (= (type |run#0@@66|) (SeqType BoxType))) (= (type |needle#0@@11|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@66|) |needle#0@@11|) (and ($Is |run#0@@66| (TSeq Sequences._default.SeqIndex$A@@4)) ($IsBox |needle#0@@11| Sequences._default.SeqIndex$A@@4)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@66|) |needle#0@@11| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@127) (Lit |run#0@@66|) |needle#0@@11|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@4 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@66|) |needle#0@@11| (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |1736| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@127) (Lit |run#0@@66|) |needle#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@5 T@U) ($ly@@128 T@U) (|run#0@@67| T@U) (|needle#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@5) TyType) (= (type $ly@@128) LayerTypeType)) (= (type |run#0@@67|) (SeqType BoxType))) (= (type |needle#0@@12|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@67|) (Lit |needle#0@@12|)) (and ($Is |run#0@@67| (TSeq Sequences._default.SeqIndex$A@@5)) ($IsBox |needle#0@@12| Sequences._default.SeqIndex$A@@5)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@67|) (Lit |needle#0@@12|) (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@128) (Lit |run#0@@67|) (Lit |needle#0@@12|)) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@5 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@67|) (Lit |needle#0@@12|) (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |1737| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@128) (Lit |run#0@@67|) (Lit |needle#0@@12|))) ))))
(assert (forall ((arg0@@256 T@U) (arg1@@131 T@U) (arg2@@82 Int) (arg3@@57 T@U) ) (! (= (type (Sequences.__default.SeqOfLength arg0@@256 arg1@@131 arg2@@82 arg3@@57)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqOfLength| :pattern ( (Sequences.__default.SeqOfLength arg0@@256 arg1@@131 arg2@@82 arg3@@57)) )))
(assert (forall ((Sequences._default.SeqOfLength$V T@U) ($ly@@129 T@U) (|length#0| Int) (|v#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V) TyType) (= (type $ly@@129) LayerTypeType)) (= (type |v#0|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@129) |length#0| |v#0|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V $ly@@129 |length#0| |v#0|))) :qid |unknown.0:0| :skolemid |1738| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@129) |length#0| |v#0|)) )))
(assert (forall ((Sequences._default.SeqOfLength$V@@0 T@U) ($ly@@130 T@U) (|length#0@@0| Int) (|v#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V@@0) TyType) (= (type $ly@@130) LayerTypeType)) (= (type |v#0@@0|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $ly@@130 |length#0@@0| |v#0@@0|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $LZ |length#0@@0| |v#0@@0|))) :qid |unknown.0:0| :skolemid |1739| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 (AsFuelBottom $ly@@130) |length#0@@0| |v#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@1 T@U) ($ly@@131 T@U) (|length#0@@1| Int) (|v#0@@1| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@1) TyType) (= (type $ly@@131) LayerTypeType)) (= (type |v#0@@1|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@1 |length#0@@1| |v#0@@1|) (and (<= (LitInt 0) |length#0@@1|) ($IsBox |v#0@@1| Sequences._default.SeqOfLength$V@@1)))) (and (and (= (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@131 |length#0@@1| |v#0@@1|)) |length#0@@1|) (forall ((|i#0@@44| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@44|) (< |i#0@@44| (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@131 |length#0@@1| |v#0@@1|)))) (= (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@131 |length#0@@1| |v#0@@1|) |i#0@@44|) |v#0@@1|)) :qid |sequence.357:18| :skolemid |1740| :pattern ( (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@131 |length#0@@1| |v#0@@1|) |i#0@@44|)) ))) ($Is (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@131 |length#0@@1| |v#0@@1|) (TSeq Sequences._default.SeqOfLength$V@@1)))) :qid |unknown.0:0| :skolemid |1741| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@131 |length#0@@1| |v#0@@1|)) ))))
(assert (forall ((Sequences._default.SeqOfLength$V@@2 T@U) ($ly@@132 T@U) (|length#0@@2| Int) (|v#0@@2| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@2) TyType) (= (type $ly@@132) LayerTypeType)) (= (type |v#0@@2|) BoxType)) (and (<= (LitInt 0) |length#0@@2|) ($IsBox |v#0@@2| Sequences._default.SeqOfLength$V@@2))) (and (=> (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@132 |length#0@@2| |v#0@@2|) true) (=> true (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@132 |length#0@@2| |v#0@@2|)))) :qid |unknown.0:0| :skolemid |1742| :pattern ( (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@132 |length#0@@2| |v#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@3 T@U) ($ly@@133 T@U) (|length#0@@3| Int) (|v#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@3) TyType) (= (type $ly@@133) LayerTypeType)) (= (type |v#0@@3|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 |length#0@@3| |v#0@@3|) (and (<= (LitInt 0) |length#0@@3|) ($IsBox |v#0@@3| Sequences._default.SeqOfLength$V@@3)))) (and (=> (not (= |length#0@@3| (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 (- |length#0@@3| 1) |v#0@@3|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@133) |length#0@@3| |v#0@@3|) (ite (= |length#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@3|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 $ly@@133 (- |length#0@@3| 1) |v#0@@3|)))))) :qid |unknown.0:0| :skolemid |1743| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@133) |length#0@@3| |v#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@4 T@U) ($ly@@134 T@U) (|length#0@@4| Int) (|v#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@4) TyType) (= (type $ly@@134) LayerTypeType)) (= (type |v#0@@4|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt |length#0@@4|) |v#0@@4|) (and (<= (LitInt 0) |length#0@@4|) ($IsBox |v#0@@4| Sequences._default.SeqOfLength$V@@4)))) (and (=> (not (= (LitInt |length#0@@4|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt (- |length#0@@4| 1)) |v#0@@4|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@134) (LitInt |length#0@@4|) |v#0@@4|) (ite (= (LitInt |length#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@4|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@134) (LitInt (- |length#0@@4| 1)) |v#0@@4|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1744| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@134) (LitInt |length#0@@4|) |v#0@@4|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@5 T@U) ($ly@@135 T@U) (|length#0@@5| Int) (|v#0@@5| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@5) TyType) (= (type $ly@@135) LayerTypeType)) (= (type |v#0@@5|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt |length#0@@5|) (Lit |v#0@@5|)) (and (<= (LitInt 0) |length#0@@5|) ($IsBox |v#0@@5| Sequences._default.SeqOfLength$V@@5)))) (and (=> (not (= (LitInt |length#0@@5|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt (- |length#0@@5| 1)) (Lit |v#0@@5|))) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@135) (LitInt |length#0@@5|) (Lit |v#0@@5|)) (ite (= (LitInt |length#0@@5|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |v#0@@5|)) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@135) (LitInt (- |length#0@@5| 1)) (Lit |v#0@@5|))))))) :qid |unknown.0:0| :weight 3 :skolemid |1745| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@135) (LitInt |length#0@@5|) (Lit |v#0@@5|))) ))))
(assert (forall ((arg0@@257 T@U) (arg1@@132 T@U) (arg2@@83 T@U) (arg3@@58 Int) (arg4@@41 T@U) ) (! (= (type (Sequences.__default.SeqIndexUpdate arg0@@257 arg1@@132 arg2@@83 arg3@@58 arg4@@41)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqIndexUpdate| :pattern ( (Sequences.__default.SeqIndexUpdate arg0@@257 arg1@@132 arg2@@83 arg3@@58 arg4@@41)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T T@U) ($ly@@136 T@U) (|s#0@@31| T@U) (|i#0@@45| Int) (|t#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T) TyType) (= (type $ly@@136) LayerTypeType)) (= (type |s#0@@31|) (SeqType BoxType))) (= (type |t#0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@136) |s#0@@31| |i#0@@45| |t#0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T $ly@@136 |s#0@@31| |i#0@@45| |t#0|))) :qid |unknown.0:0| :skolemid |1746| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@136) |s#0@@31| |i#0@@45| |t#0|)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@0 T@U) ($ly@@137 T@U) (|s#0@@32| T@U) (|i#0@@46| Int) (|t#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@0) TyType) (= (type $ly@@137) LayerTypeType)) (= (type |s#0@@32|) (SeqType BoxType))) (= (type |t#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $ly@@137 |s#0@@32| |i#0@@46| |t#0@@0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $LZ |s#0@@32| |i#0@@46| |t#0@@0|))) :qid |unknown.0:0| :skolemid |1747| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 (AsFuelBottom $ly@@137) |s#0@@32| |i#0@@46| |t#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@1 T@U) ($ly@@138 T@U) (|s#0@@33| T@U) (|i#0@@47| Int) (|t#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@1) TyType) (= (type $ly@@138) LayerTypeType)) (= (type |s#0@@33|) (SeqType BoxType))) (= (type |t#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@1 |s#0@@33| |i#0@@47| |t#0@@1|) (and (and (and ($Is |s#0@@33| (TSeq Sequences._default.SeqIndexUpdate$T@@1)) (and (<= (LitInt 0) |i#0@@47|) (< |i#0@@47| 18446744073709551616))) ($IsBox |t#0@@1| Sequences._default.SeqIndexUpdate$T@@1)) (and (< (+ |i#0@@47| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@47|) (< |i#0@@47| (|Seq#Length| |s#0@@33|))))))) (and (|Seq#Equal| (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@138 |s#0@@33| |i#0@@47| |t#0@@1|) (|Seq#Update| |s#0@@33| |i#0@@47| |t#0@@1|)) ($Is (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@138 |s#0@@33| |i#0@@47| |t#0@@1|) (TSeq Sequences._default.SeqIndexUpdate$T@@1)))) :qid |unknown.0:0| :skolemid |1748| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@138 |s#0@@33| |i#0@@47| |t#0@@1|)) ))))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@2 T@U) ($ly@@139 T@U) (|s#0@@34| T@U) (|i#0@@48| Int) (|t#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@2) TyType) (= (type $ly@@139) LayerTypeType)) (= (type |s#0@@34|) (SeqType BoxType))) (= (type |t#0@@2|) BoxType)) (and (and ($Is |s#0@@34| (TSeq Sequences._default.SeqIndexUpdate$T@@2)) (and (<= (LitInt 0) |i#0@@48|) (< |i#0@@48| 18446744073709551616))) ($IsBox |t#0@@2| Sequences._default.SeqIndexUpdate$T@@2))) (and (=> (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@139 |s#0@@34| |i#0@@48| |t#0@@2|) (and (< (+ |i#0@@48| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@48|) (< |i#0@@48| (|Seq#Length| |s#0@@34|))))) (=> (and (< (+ |i#0@@48| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@48|) (< |i#0@@48| (|Seq#Length| |s#0@@34|)))) (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@139 |s#0@@34| |i#0@@48| |t#0@@2|)))) :qid |unknown.0:0| :skolemid |1749| :pattern ( (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@139 |s#0@@34| |i#0@@48| |t#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@3 T@U) ($ly@@140 T@U) (|s#0@@35| T@U) (|i#0@@49| Int) (|t#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@3) TyType) (= (type $ly@@140) LayerTypeType)) (= (type |s#0@@35|) (SeqType BoxType))) (= (type |t#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@3 |s#0@@35| |i#0@@49| |t#0@@3|) (and (and (and ($Is |s#0@@35| (TSeq Sequences._default.SeqIndexUpdate$T@@3)) (and (<= (LitInt 0) |i#0@@49|) (< |i#0@@49| 18446744073709551616))) ($IsBox |t#0@@3| Sequences._default.SeqIndexUpdate$T@@3)) (and (< (+ |i#0@@49| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@49|) (< |i#0@@49| (|Seq#Length| |s#0@@35|))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@140) |s#0@@35| |i#0@@49| |t#0@@3|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@35| |i#0@@49|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@3|)) (|Seq#Drop| |s#0@@35| (+ |i#0@@49| 1))))) :qid |unknown.0:0| :skolemid |1750| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@140) |s#0@@35| |i#0@@49| |t#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@4 T@U) ($ly@@141 T@U) (|s#0@@36| T@U) (|i#0@@50| Int) (|t#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@4) TyType) (= (type $ly@@141) LayerTypeType)) (= (type |s#0@@36|) (SeqType BoxType))) (= (type |t#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@4 (Lit |s#0@@36|) (LitInt |i#0@@50|) |t#0@@4|) (and (and (and ($Is |s#0@@36| (TSeq Sequences._default.SeqIndexUpdate$T@@4)) (and (<= (LitInt 0) |i#0@@50|) (< |i#0@@50| 18446744073709551616))) ($IsBox |t#0@@4| Sequences._default.SeqIndexUpdate$T@@4)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@50| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@50|)) (< |i#0@@50| (|Seq#Length| (Lit |s#0@@36|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@141) (Lit |s#0@@36|) (LitInt |i#0@@50|) |t#0@@4|) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@36|) (LitInt |i#0@@50|)) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@4|)) (|Seq#Drop| (Lit |s#0@@36|) (LitInt (+ |i#0@@50| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1751| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@141) (Lit |s#0@@36|) (LitInt |i#0@@50|) |t#0@@4|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@5 T@U) ($ly@@142 T@U) (|s#0@@37| T@U) (|i#0@@51| Int) (|t#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@5) TyType) (= (type $ly@@142) LayerTypeType)) (= (type |s#0@@37|) (SeqType BoxType))) (= (type |t#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@5 (Lit |s#0@@37|) (LitInt |i#0@@51|) (Lit |t#0@@5|)) (and (and (and ($Is |s#0@@37| (TSeq Sequences._default.SeqIndexUpdate$T@@5)) (and (<= (LitInt 0) |i#0@@51|) (< |i#0@@51| 18446744073709551616))) ($IsBox |t#0@@5| Sequences._default.SeqIndexUpdate$T@@5)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@51| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@51|)) (< |i#0@@51| (|Seq#Length| (Lit |s#0@@37|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@142) (Lit |s#0@@37|) (LitInt |i#0@@51|) (Lit |t#0@@5|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@37|) (LitInt |i#0@@51|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@5|))) (|Seq#Drop| (Lit |s#0@@37|) (LitInt (+ |i#0@@51| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |1752| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@142) (Lit |s#0@@37|) (LitInt |i#0@@51|) (Lit |t#0@@5|))) ))))
(assert (forall ((arg0@@258 T@U) (arg1@@133 T@U) (arg2@@84 T@U) (arg3@@59 T@U) (arg4@@42 T@U) ) (! (= (type (Sequences.__default.Zip arg0@@258 arg1@@133 arg2@@84 arg3@@59 arg4@@42)) (SeqType BoxType)) :qid |funType:Sequences.__default.Zip| :pattern ( (Sequences.__default.Zip arg0@@258 arg1@@133 arg2@@84 arg3@@59 arg4@@42)) )))
(assert (forall ((Sequences._default.Zip$A T@U) (Sequences._default.Zip$B T@U) ($ly@@143 T@U) (|a#0@@70| T@U) (|b#0@@44| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A) TyType) (= (type Sequences._default.Zip$B) TyType)) (= (type $ly@@143) LayerTypeType)) (= (type |a#0@@70|) (SeqType BoxType))) (= (type |b#0@@44|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@143) |a#0@@70| |b#0@@44|) (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B $ly@@143 |a#0@@70| |b#0@@44|))) :qid |unknown.0:0| :skolemid |1753| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@143) |a#0@@70| |b#0@@44|)) )))
(assert (forall ((Sequences._default.Zip$A@@0 T@U) (Sequences._default.Zip$B@@0 T@U) ($ly@@144 T@U) (|a#0@@71| T@U) (|b#0@@45| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A@@0) TyType) (= (type Sequences._default.Zip$B@@0) TyType)) (= (type $ly@@144) LayerTypeType)) (= (type |a#0@@71|) (SeqType BoxType))) (= (type |b#0@@45|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $ly@@144 |a#0@@71| |b#0@@45|) (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $LZ |a#0@@71| |b#0@@45|))) :qid |unknown.0:0| :skolemid |1754| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 (AsFuelBottom $ly@@144) |a#0@@71| |b#0@@45|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@1 T@U) (Sequences._default.Zip$B@@1 T@U) ($ly@@145 T@U) (|a#0@@72| T@U) (|b#0@@46| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@1) TyType) (= (type Sequences._default.Zip$B@@1) TyType)) (= (type $ly@@145) LayerTypeType)) (= (type |a#0@@72|) (SeqType BoxType))) (= (type |b#0@@46|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 |a#0@@72| |b#0@@46|) (and (and ($Is |a#0@@72| (TSeq Sequences._default.Zip$A@@1)) ($Is |b#0@@46| (TSeq Sequences._default.Zip$B@@1))) (= (|Seq#Length| |a#0@@72|) (|Seq#Length| |b#0@@46|))))) (and (and (= (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@145 |a#0@@72| |b#0@@46|)) (|Seq#Length| |a#0@@72|)) (forall ((|i#0@@52| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@52|) (< |i#0@@52| (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@145 |a#0@@72| |b#0@@46|)))) (|_System.Tuple2#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@145 |a#0@@72| |b#0@@46|) |i#0@@52|)) (|#_System._tuple#2._#Make2| (|Seq#Index| |a#0@@72| |i#0@@52|) (|Seq#Index| |b#0@@46| |i#0@@52|))))) :qid |sequence.378:20| :skolemid |1755| :pattern ( (|Seq#Index| |b#0@@46| |i#0@@52|)) :pattern ( (|Seq#Index| |a#0@@72| |i#0@@52|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@145 |a#0@@72| |b#0@@46|) |i#0@@52|))) ))) ($Is (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@145 |a#0@@72| |b#0@@46|) (TSeq (Tclass._System.Tuple2 Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1))))) :qid |unknown.0:0| :skolemid |1756| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@145 |a#0@@72| |b#0@@46|)) ))))
(assert (forall ((Sequences._default.Zip$A@@2 T@U) (Sequences._default.Zip$B@@2 T@U) ($ly@@146 T@U) (|a#0@@73| T@U) (|b#0@@47| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@2) TyType) (= (type Sequences._default.Zip$B@@2) TyType)) (= (type $ly@@146) LayerTypeType)) (= (type |a#0@@73|) (SeqType BoxType))) (= (type |b#0@@47|) (SeqType BoxType))) (and ($Is |a#0@@73| (TSeq Sequences._default.Zip$A@@2)) ($Is |b#0@@47| (TSeq Sequences._default.Zip$B@@2)))) (and (=> (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@146 |a#0@@73| |b#0@@47|) (= (|Seq#Length| |a#0@@73|) (|Seq#Length| |b#0@@47|))) (=> (= (|Seq#Length| |a#0@@73|) (|Seq#Length| |b#0@@47|)) (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@146 |a#0@@73| |b#0@@47|)))) :qid |unknown.0:0| :skolemid |1757| :pattern ( (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@146 |a#0@@73| |b#0@@47|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@3 T@U) (Sequences._default.Zip$B@@3 T@U) ($ly@@147 T@U) (|a#0@@74| T@U) (|b#0@@48| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@3) TyType) (= (type Sequences._default.Zip$B@@3) TyType)) (= (type $ly@@147) LayerTypeType)) (= (type |a#0@@74|) (SeqType BoxType))) (= (type |b#0@@48|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 |a#0@@74| |b#0@@48|) (and (and ($Is |a#0@@74| (TSeq Sequences._default.Zip$A@@3)) ($Is |b#0@@48| (TSeq Sequences._default.Zip$B@@3))) (= (|Seq#Length| |a#0@@74|) (|Seq#Length| |b#0@@48|))))) (and (=> (not (= (|Seq#Length| |a#0@@74|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@3 |a#0@@74|) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@3 |b#0@@48|)) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@74|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@48|))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@3 |a#0@@74|) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@3 |b#0@@48|)))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@147) |a#0@@74| |b#0@@48|) (ite (= (|Seq#Length| |a#0@@74|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 $ly@@147 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@74|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@48|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#_System._tuple#2._#Make2| (Sequences.__default.Last Sequences._default.Zip$A@@3 |a#0@@74|) (Sequences.__default.Last Sequences._default.Zip$B@@3 |b#0@@48|))))))))) :qid |unknown.0:0| :skolemid |1758| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@147) |a#0@@74| |b#0@@48|)) ))))
(assert  (=> true (forall ((Sequences._default.Zip$A@@4 T@U) (Sequences._default.Zip$B@@4 T@U) ($ly@@148 T@U) (|a#0@@75| T@U) (|b#0@@49| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@4) TyType) (= (type Sequences._default.Zip$B@@4) TyType)) (= (type $ly@@148) LayerTypeType)) (= (type |a#0@@75|) (SeqType BoxType))) (= (type |b#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit |a#0@@75|) (Lit |b#0@@49|)) (and (and ($Is |a#0@@75| (TSeq Sequences._default.Zip$A@@4)) ($Is |b#0@@49| (TSeq Sequences._default.Zip$B@@4))) (= (|Seq#Length| (Lit |a#0@@75|)) (|Seq#Length| (Lit |b#0@@49|)))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@75|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@75|)) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@49|))) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@75|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@49|))))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@75|)) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@49|))))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@148) (Lit |a#0@@75|) (Lit |b#0@@49|)) (ite (= (|Seq#Length| (Lit |a#0@@75|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@148) (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@75|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@49|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#_System._tuple#2._#Make2| (Lit (Sequences.__default.Last Sequences._default.Zip$A@@4 (Lit |a#0@@75|))) (Lit (Sequences.__default.Last Sequences._default.Zip$B@@4 (Lit |b#0@@49|)))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1759| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@148) (Lit |a#0@@75|) (Lit |b#0@@49|))) ))))
(assert (forall ((arg0@@259 T@U) (arg1@@134 T@U) (arg2@@85 T@U) (arg3@@60 T@U) ) (! (= (type (Sequences.__default.Unzip arg0@@259 arg1@@134 arg2@@85 arg3@@60)) DatatypeTypeType) :qid |funType:Sequences.__default.Unzip| :pattern ( (Sequences.__default.Unzip arg0@@259 arg1@@134 arg2@@85 arg3@@60)) )))
(assert (forall ((Sequences._default.Unzip$A T@U) (Sequences._default.Unzip$B T@U) ($ly@@149 T@U) (|z#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A) TyType) (= (type Sequences._default.Unzip$B) TyType)) (= (type $ly@@149) LayerTypeType)) (= (type |z#0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@149) |z#0|) (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B $ly@@149 |z#0|))) :qid |unknown.0:0| :skolemid |1760| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@149) |z#0|)) )))
(assert (forall ((Sequences._default.Unzip$A@@0 T@U) (Sequences._default.Unzip$B@@0 T@U) ($ly@@150 T@U) (|z#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A@@0) TyType) (= (type Sequences._default.Unzip$B@@0) TyType)) (= (type $ly@@150) LayerTypeType)) (= (type |z#0@@0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $ly@@150 |z#0@@0|) (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $LZ |z#0@@0|))) :qid |unknown.0:0| :skolemid |1761| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 (AsFuelBottom $ly@@150) |z#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@1 T@U) (Sequences._default.Unzip$B@@1 T@U) ($ly@@151 T@U) (|z#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@1) TyType) (= (type Sequences._default.Unzip$B@@1) TyType)) (= (type $ly@@151) LayerTypeType)) (= (type |z#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 |z#0@@1|) ($Is |z#0@@1| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1))))) (and (and (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|)))) (|Seq#Length| |z#0@@1|))) (forall ((|i#0@@53| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@53|) (< |i#0@@53| (|Seq#Length| |z#0@@1|))) (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|))) |i#0@@53|) (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|))) |i#0@@53|)) ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@53|))))) :qid |sequence.386:20| :skolemid |1762| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@53|))) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|))) |i#0@@53|)) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|))) |i#0@@53|)) ))) ($Is (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|) (Tclass._System.Tuple2 (TSeq Sequences._default.Unzip$A@@1) (TSeq Sequences._default.Unzip$B@@1))))) :qid |unknown.0:0| :skolemid |1763| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@151 |z#0@@1|)) ))))
(assert (forall ((Sequences._default.Unzip$A@@2 T@U) (Sequences._default.Unzip$B@@2 T@U) ($ly@@152 T@U) (|z#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@2) TyType) (= (type Sequences._default.Unzip$B@@2) TyType)) (= (type $ly@@152) LayerTypeType)) (= (type |z#0@@2|) (SeqType BoxType))) ($Is |z#0@@2| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2)))) (and (=> (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@152 |z#0@@2|) true) (=> true (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@152 |z#0@@2|)))) :qid |unknown.0:0| :skolemid |1764| :pattern ( (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@152 |z#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@3 T@U) (Sequences._default.Unzip$B@@3 T@U) ($ly@@153 T@U) (|z#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@3) TyType) (= (type Sequences._default.Unzip$B@@3) TyType)) (= (type $ly@@153) LayerTypeType)) (= (type |z#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 |z#0@@3|) ($Is |z#0@@3| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3))))) (and (=> (not (= (|Seq#Length| |z#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@153) |z#0@@3|) (ite (= (|Seq#Length| |z#0@@3|) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#0@@50| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@153 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (let ((|a#0@@76| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@153 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#0@@76| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) ($Box (|Seq#Append| |b#0@@50| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._1 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))))))))) :qid |unknown.0:0| :skolemid |1765| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@153) |z#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@4 T@U) (Sequences._default.Unzip$B@@4 T@U) ($ly@@154 T@U) (|z#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@4) TyType) (= (type Sequences._default.Unzip$B@@4) TyType)) (= (type $ly@@154) LayerTypeType)) (= (type |z#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit |z#0@@4|)) ($Is |z#0@@4| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4))))) (and (=> (not (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@154) (Lit |z#0@@4|)) (ite (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@154) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (let ((|a#1| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@154) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._0 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) ($Box (|Seq#Append| |b#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._1 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1766| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@154) (Lit |z#0@@4|))) ))))
(assert (forall ((arg0@@260 T@U) (arg1@@135 T@U) (arg2@@86 T@U) ) (! (= (type (Sequences.__default.FlattenShape arg0@@260 arg1@@135 arg2@@86)) (SeqType BoxType)) :qid |funType:Sequences.__default.FlattenShape| :pattern ( (Sequences.__default.FlattenShape arg0@@260 arg1@@135 arg2@@86)) )))
(assert (forall ((Sequences._default.FlattenShape$A T@U) ($ly@@155 T@U) (|seqs#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A) TyType) (= (type $ly@@155) LayerTypeType)) (= (type |seqs#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@155) |seqs#0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A $ly@@155 |seqs#0|))) :qid |unknown.0:0| :skolemid |1767| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@155) |seqs#0|)) )))
(assert (forall ((Sequences._default.FlattenShape$A@@0 T@U) ($ly@@156 T@U) (|seqs#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A@@0) TyType) (= (type $ly@@156) LayerTypeType)) (= (type |seqs#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $ly@@156 |seqs#0@@0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $LZ |seqs#0@@0|))) :qid |unknown.0:0| :skolemid |1768| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 (AsFuelBottom $ly@@156) |seqs#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@1 T@U) ($ly@@157 T@U) (|seqs#0@@1| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@1) TyType) (= (type $ly@@157) LayerTypeType)) (= (type |seqs#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@1 |seqs#0@@1|) ($Is |seqs#0@@1| (TSeq (TSeq Sequences._default.FlattenShape$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@157 |seqs#0@@1|)) (|Seq#Length| |seqs#0@@1|)) (forall ((|i#0@@54| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@54|) (< |i#0@@54| (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@157 |seqs#0@@1|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@157 |seqs#0@@1|) |i#0@@54|))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@54|)))))) :qid |sequence.408:20| :skolemid |1769| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@54|))) :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@157 |seqs#0@@1|) |i#0@@54|))) ))) ($Is (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@157 |seqs#0@@1|) (TSeq Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |1770| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@157 |seqs#0@@1|)) ))))
(assert (forall ((Sequences._default.FlattenShape$A@@2 T@U) ($ly@@158 T@U) (|seqs#0@@2| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@2) TyType) (= (type $ly@@158) LayerTypeType)) (= (type |seqs#0@@2|) (SeqType BoxType))) ($Is |seqs#0@@2| (TSeq (TSeq Sequences._default.FlattenShape$A@@2)))) (and (=> (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@158 |seqs#0@@2|) true) (=> true (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@158 |seqs#0@@2|)))) :qid |unknown.0:0| :skolemid |1771| :pattern ( (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@158 |seqs#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@3 T@U) ($ly@@159 T@U) (|seqs#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@3) TyType) (= (type $ly@@159) LayerTypeType)) (= (type |seqs#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 |seqs#0@@3|) ($Is |seqs#0@@3| (TSeq (TSeq Sequences._default.FlattenShape$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@159) |seqs#0@@3|) (ite (= (|Seq#Length| |seqs#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 $ly@@159 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))))))))))) :qid |unknown.0:0| :skolemid |1772| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@159) |seqs#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@4 T@U) ($ly@@160 T@U) (|seqs#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@4) TyType) (= (type $ly@@160) LayerTypeType)) (= (type |seqs#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit |seqs#0@@4|)) ($Is |seqs#0@@4| (TSeq (TSeq Sequences._default.FlattenShape$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@160) (Lit |seqs#0@@4|)) (ite (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@160) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1773| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@160) (Lit |seqs#0@@4|))) ))))
(assert (forall (($ly@@161 T@U) (|shape#0| T@U) ) (!  (=> (and (= (type $ly@@161) LayerTypeType) (= (type |shape#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength ($LS $ly@@161) |shape#0|) (Sequences.__default.FlattenLength $ly@@161 |shape#0|))) :qid |sequence.419:22| :skolemid |1774| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@161) |shape#0|)) )))
(assert (forall (($ly@@162 T@U) (|shape#0@@0| T@U) ) (!  (=> (and (= (type $ly@@162) LayerTypeType) (= (type |shape#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength $ly@@162 |shape#0@@0|) (Sequences.__default.FlattenLength $LZ |shape#0@@0|))) :qid |sequence.419:22| :skolemid |1775| :pattern ( (Sequences.__default.FlattenLength (AsFuelBottom $ly@@162) |shape#0@@0|)) )))
(assert  (=> true (forall (($ly@@163 T@U) (|shape#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@163) LayerTypeType) (= (type |shape#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@1|) ($Is |shape#0@@1| (TSeq Tclass._System.nat)))) (and (=> (= (|Seq#Length| |shape#0@@1|) (LitInt 0)) (= (Sequences.__default.FlattenLength $ly@@163 |shape#0@@1|) (LitInt 0))) (<= (LitInt 0) (Sequences.__default.FlattenLength $ly@@163 |shape#0@@1|)))) :qid |sequence.419:22| :skolemid |1776| :pattern ( (Sequences.__default.FlattenLength $ly@@163 |shape#0@@1|)) ))))
(assert (forall (($ly@@164 T@U) (|shape#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@164) LayerTypeType) (= (type |shape#0@@2|) (SeqType BoxType))) ($Is |shape#0@@2| (TSeq Tclass._System.nat))) (and (=> (|Sequences.__default.FlattenLength#requires| $ly@@164 |shape#0@@2|) true) (=> true (|Sequences.__default.FlattenLength#requires| $ly@@164 |shape#0@@2|)))) :qid |sequence.419:22| :skolemid |1777| :pattern ( (|Sequences.__default.FlattenLength#requires| $ly@@164 |shape#0@@2|)) )))
(assert  (=> true (forall (($ly@@165 T@U) (|shape#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@165) LayerTypeType) (= (type |shape#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@3|) ($Is |shape#0@@3| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| |shape#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@3|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|))) (|Sequences.__default.Last#canCall| Tclass._System.nat |shape#0@@3|))) (= (Sequences.__default.FlattenLength ($LS $ly@@165) |shape#0@@3|) (ite (= (|Seq#Length| |shape#0@@3|) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength $ly@@165 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|)) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat |shape#0@@3|)))))))) :qid |sequence.419:22| :skolemid |1778| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@165) |shape#0@@3|)) ))))
(assert  (=> true (forall (($ly@@166 T@U) (|shape#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@166) LayerTypeType) (= (type |shape#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| (Lit |shape#0@@4|)) ($Is |shape#0@@4| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@4|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|))))) (|Sequences.__default.Last#canCall| Tclass._System.nat (Lit |shape#0@@4|)))) (= (Sequences.__default.FlattenLength ($LS $ly@@166) (Lit |shape#0@@4|)) (ite (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength ($LS $ly@@166) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|)))) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat (Lit |shape#0@@4|))))))))) :qid |sequence.419:22| :weight 3 :skolemid |1779| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@166) (Lit |shape#0@@4|))) ))))
(assert (forall ((arg0@@261 T@U) (arg1@@136 T@U) (arg2@@87 T@U) ) (! (= (type (Sequences.__default.Flatten arg0@@261 arg1@@136 arg2@@87)) (SeqType BoxType)) :qid |funType:Sequences.__default.Flatten| :pattern ( (Sequences.__default.Flatten arg0@@261 arg1@@136 arg2@@87)) )))
(assert (forall ((Sequences._default.Flatten$A T@U) ($ly@@167 T@U) (|seqs#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A) TyType) (= (type $ly@@167) LayerTypeType)) (= (type |seqs#0@@5|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@167) |seqs#0@@5|) (Sequences.__default.Flatten Sequences._default.Flatten$A $ly@@167 |seqs#0@@5|))) :qid |unknown.0:0| :skolemid |1780| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@167) |seqs#0@@5|)) )))
(assert (forall ((Sequences._default.Flatten$A@@0 T@U) ($ly@@168 T@U) (|seqs#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A@@0) TyType) (= (type $ly@@168) LayerTypeType)) (= (type |seqs#0@@6|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $ly@@168 |seqs#0@@6|) (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $LZ |seqs#0@@6|))) :qid |unknown.0:0| :skolemid |1781| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 (AsFuelBottom $ly@@168) |seqs#0@@6|)) )))
(assert  (and (= (type StartFuel_Sequences._default.FlattenLength) LayerTypeType) (= (type StartFuel_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@1 T@U) ($ly@@169 T@U) (|seqs#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@1) TyType) (= (type $ly@@169) LayerTypeType)) (= (type |seqs#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@1 |seqs#0@@7|) ($Is |seqs#0@@7| (TSeq (TSeq Sequences._default.Flatten$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@169 |seqs#0@@7|)) (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.FlattenShape Sequences._default.Flatten$A@@1 StartFuel_Sequences._default.FlattenShape |seqs#0@@7|))) (=> (= (|Seq#Length| |seqs#0@@7|) (LitInt 0)) (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@169 |seqs#0@@7|)) (LitInt 0)))) ($Is (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@169 |seqs#0@@7|) (TSeq Sequences._default.Flatten$A@@1)))) :qid |unknown.0:0| :skolemid |1782| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@169 |seqs#0@@7|)) ))))
(assert (forall ((Sequences._default.Flatten$A@@2 T@U) ($ly@@170 T@U) (|seqs#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@2) TyType) (= (type $ly@@170) LayerTypeType)) (= (type |seqs#0@@8|) (SeqType BoxType))) ($Is |seqs#0@@8| (TSeq (TSeq Sequences._default.Flatten$A@@2)))) (and (=> (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@170 |seqs#0@@8|) true) (=> true (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@170 |seqs#0@@8|)))) :qid |unknown.0:0| :skolemid |1783| :pattern ( (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@170 |seqs#0@@8|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenShape0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@3 T@U) ($ly@@171 T@U) (|seqs#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@3) TyType) (= (type $ly@@171) LayerTypeType)) (= (type |seqs#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 |seqs#0@@9|) ($Is |seqs#0@@9| (TSeq (TSeq Sequences._default.Flatten$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@9|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape0)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape0) MoreFuel_Sequences._default.FlattenShape0)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@171) |seqs#0@@9|) (ite (= (|Seq#Length| |seqs#0@@9|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 $ly@@171 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)))))))) :qid |unknown.0:0| :skolemid |1784| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@171) |seqs#0@@9|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenShape1) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@4 T@U) ($ly@@172 T@U) (|seqs#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@4) TyType) (= (type $ly@@172) LayerTypeType)) (= (type |seqs#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit |seqs#0@@10|)) ($Is |seqs#0@@10| (TSeq (TSeq Sequences._default.Flatten$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape1)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape1) MoreFuel_Sequences._default.FlattenShape1)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@172) (Lit |seqs#0@@10|)) (ite (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@172) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |1785| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@172) (Lit |seqs#0@@10|))) ))))
(assert  (=> true (forall ((|shape#0@@5| T@U) (|i#0@@55| Int) (|j#0@@2| Int) ) (!  (=> (and (= (type |shape#0@@5|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@5| |i#0@@55| |j#0@@2|) (and (and (and ($Is |shape#0@@5| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@55|)) (<= (LitInt 0) |j#0@@2|)) (and (< |i#0@@55| (|Seq#Length| |shape#0@@5|)) (< |j#0@@2| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@5| |i#0@@55|)))))))) (<= (LitInt 0) (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@55| |j#0@@2|))) :qid |sequence.488:25| :skolemid |1786| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@55| |j#0@@2|)) ))))
(assert (forall ((|shape#0@@6| T@U) (|i#0@@56| Int) (|j#0@@3| Int) ) (!  (=> (= (type |shape#0@@6|) (SeqType BoxType)) (=> (and (and ($Is |shape#0@@6| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@56|)) (<= (LitInt 0) |j#0@@3|)) (and (=> (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@56| |j#0@@3|) (and (< |i#0@@56| (|Seq#Length| |shape#0@@6|)) (< |j#0@@3| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@56|)))))) (=> (and (< |i#0@@56| (|Seq#Length| |shape#0@@6|)) (< |j#0@@3| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@56|))))) (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@56| |j#0@@3|))))) :qid |sequence.488:25| :skolemid |1787| :pattern ( (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@56| |j#0@@3|)) )))
(assert  (=> true (forall ((|shape#0@@7| T@U) (|i#0@@57| Int) (|j#0@@4| Int) ) (!  (=> (and (= (type |shape#0@@7|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@7| |i#0@@57| |j#0@@4|) (and (and (and ($Is |shape#0@@7| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@57|)) (<= (LitInt 0) |j#0@@4|)) (and (< |i#0@@57| (|Seq#Length| |shape#0@@7|)) (< |j#0@@4| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@7| |i#0@@57|)))))))) (and (|Sequences.__default.FlattenLength#canCall| (|Seq#Take| |shape#0@@7| |i#0@@57|)) (= (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@57| |j#0@@4|) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (|Seq#Take| |shape#0@@7| |i#0@@57|)) |j#0@@4|)))) :qid |sequence.488:25| :skolemid |1788| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@57| |j#0@@4|)) ))))
(assert  (=> true (forall ((|shape#0@@8| T@U) (|i#0@@58| Int) (|j#0@@5| Int) ) (!  (=> (and (= (type |shape#0@@8|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| (Lit |shape#0@@8|) (LitInt |i#0@@58|) (LitInt |j#0@@5|)) (and (and (and ($Is |shape#0@@8| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@58|)) (<= (LitInt 0) |j#0@@5|)) (and (< |i#0@@58| (|Seq#Length| (Lit |shape#0@@8|))) (< |j#0@@5| (U_2_int ($Unbox intType (|Seq#Index| (Lit |shape#0@@8|) (LitInt |i#0@@58|))))))))) (and (|Sequences.__default.FlattenLength#canCall| (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@58|)))) (= (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@58|) (LitInt |j#0@@5|)) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@58|)))) |j#0@@5|)))) :qid |sequence.488:25| :weight 3 :skolemid |1789| :pattern ( (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@58|) (LitInt |j#0@@5|))) ))))
(assert (forall ((arg0@@262 T@U) (arg1@@137 T@U) (arg2@@88 Int) ) (! (= (type (Sequences.__default.UnflattenIndex arg0@@262 arg1@@137 arg2@@88)) DatatypeTypeType) :qid |funType:Sequences.__default.UnflattenIndex| :pattern ( (Sequences.__default.UnflattenIndex arg0@@262 arg1@@137 arg2@@88)) )))
(assert (forall (($ly@@173 T@U) (|shape#0@@9| T@U) (|i#0@@59| Int) ) (!  (=> (and (= (type $ly@@173) LayerTypeType) (= (type |shape#0@@9|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex ($LS $ly@@173) |shape#0@@9| |i#0@@59|) (Sequences.__default.UnflattenIndex $ly@@173 |shape#0@@9| |i#0@@59|))) :qid |sequence.495:12| :skolemid |1790| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@173) |shape#0@@9| |i#0@@59|)) )))
(assert (forall (($ly@@174 T@U) (|shape#0@@10| T@U) (|i#0@@60| Int) ) (!  (=> (and (= (type $ly@@174) LayerTypeType) (= (type |shape#0@@10|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex $ly@@174 |shape#0@@10| |i#0@@60|) (Sequences.__default.UnflattenIndex $LZ |shape#0@@10| |i#0@@60|))) :qid |sequence.495:12| :skolemid |1791| :pattern ( (Sequences.__default.UnflattenIndex (AsFuelBottom $ly@@174) |shape#0@@10| |i#0@@60|)) )))
(assert  (=> true (forall (($ly@@175 T@U) (|shape#0@@11| T@U) (|i#0@@61| Int) ) (!  (=> (and (and (= (type $ly@@175) LayerTypeType) (= (type |shape#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@11| |i#0@@61|) (and (and ($Is |shape#0@@11| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@61|)) (< |i#0@@61| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@11|))))) ($Is (Sequences.__default.UnflattenIndex $ly@@175 |shape#0@@11| |i#0@@61|) (Tclass._System.Tuple2 Tclass._System.nat Tclass._System.nat))) :qid |sequence.495:12| :skolemid |1792| :pattern ( (Sequences.__default.UnflattenIndex $ly@@175 |shape#0@@11| |i#0@@61|)) ))))
(assert (forall (($ly@@176 T@U) (|shape#0@@12| T@U) (|i#0@@62| Int) ) (!  (=> (and (and (= (type $ly@@176) LayerTypeType) (= (type |shape#0@@12|) (SeqType BoxType))) (and ($Is |shape#0@@12| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@62|))) (and (=> (|Sequences.__default.UnflattenIndex#requires| $ly@@176 |shape#0@@12| |i#0@@62|) (< |i#0@@62| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|))) (=> (< |i#0@@62| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|)) (|Sequences.__default.UnflattenIndex#requires| $ly@@176 |shape#0@@12| |i#0@@62|)))) :qid |sequence.495:12| :skolemid |1793| :pattern ( (|Sequences.__default.UnflattenIndex#requires| $ly@@176 |shape#0@@12| |i#0@@62|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenLength0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenLength) LayerTypeType)))
(assert  (=> true (forall (($ly@@177 T@U) (|shape#0@@13| T@U) (|i#0@@63| Int) ) (!  (=> (and (and (= (type $ly@@177) LayerTypeType) (= (type |shape#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@13| |i#0@@63|) (and (and ($Is |shape#0@@13| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@63|)) (< |i#0@@63| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@13|))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (=> (< |i#0@@63| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@63|)))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|)) |i#0@@63|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength0)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength0) MoreFuel_Sequences._default.FlattenLength0)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@177) |shape#0@@13| |i#0@@63|) (ite (< |i#0@@63| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (Sequences.__default.UnflattenIndex $ly@@177 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@63|) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| |shape#0@@13|) 1))) ($Box (int_2_U (- |i#0@@63| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))))))))) :qid |sequence.495:12| :skolemid |1794| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@177) |shape#0@@13| |i#0@@63|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenLength1) LayerTypeType))
(assert  (=> true (forall (($ly@@178 T@U) (|shape#0@@14| T@U) (|i#0@@64| Int) ) (!  (=> (and (and (= (type $ly@@178) LayerTypeType) (= (type |shape#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| (Lit |shape#0@@14|) (LitInt |i#0@@64|)) (and (and ($Is |shape#0@@14| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@64|)) (< |i#0@@64| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit |shape#0@@14|)))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (=> (< |i#0@@64| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.UnflattenIndex#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@64|))))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|)))) |i#0@@64|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength1)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength1) MoreFuel_Sequences._default.FlattenLength1)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@178) (Lit |shape#0@@14|) (LitInt |i#0@@64|)) (ite (< |i#0@@64| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (Sequences.__default.UnflattenIndex ($LS $ly@@178) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@64|)) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| (Lit |shape#0@@14|)) 1))) ($Box (int_2_U (- |i#0@@64| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))))))))) :qid |sequence.495:12| :weight 3 :skolemid |1795| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@178) (Lit |shape#0@@14|) (LitInt |i#0@@64|))) ))))
(assert (forall ((arg0@@263 T@U) (arg1@@138 T@U) (arg2@@89 Int) (arg3@@61 T@U) ) (! (= (type (Sequences.__default.fill arg0@@263 arg1@@138 arg2@@89 arg3@@61)) (SeqType BoxType)) :qid |funType:Sequences.__default.fill| :pattern ( (Sequences.__default.fill arg0@@263 arg1@@138 arg2@@89 arg3@@61)) )))
(assert (forall ((Sequences._default.fill$T T@U) ($ly@@179 T@U) (|n#0@@5| Int) (|t#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T) TyType) (= (type $ly@@179) LayerTypeType)) (= (type |t#0@@6|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@179) |n#0@@5| |t#0@@6|) (Sequences.__default.fill Sequences._default.fill$T $ly@@179 |n#0@@5| |t#0@@6|))) :qid |unknown.0:0| :skolemid |1796| :pattern ( (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@179) |n#0@@5| |t#0@@6|)) )))
(assert (forall ((Sequences._default.fill$T@@0 T@U) ($ly@@180 T@U) (|n#0@@6| Int) (|t#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T@@0) TyType) (= (type $ly@@180) LayerTypeType)) (= (type |t#0@@7|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T@@0 $ly@@180 |n#0@@6| |t#0@@7|) (Sequences.__default.fill Sequences._default.fill$T@@0 $LZ |n#0@@6| |t#0@@7|))) :qid |unknown.0:0| :skolemid |1797| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@0 (AsFuelBottom $ly@@180) |n#0@@6| |t#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@1 T@U) ($ly@@181 T@U) (|n#0@@7| Int) (|t#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@1) TyType) (= (type $ly@@181) LayerTypeType)) (= (type |t#0@@8|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@1 |n#0@@7| |t#0@@8|) (and ($IsBox |t#0@@8| Sequences._default.fill$T@@1) (>= |n#0@@7| (LitInt 0))))) (and (and (= (|Seq#Length| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@181 |n#0@@7| |t#0@@8|)) |n#0@@7|) (forall ((|i#0@@65| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@65|) (< |i#0@@65| |n#0@@7|)) (= (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@181 |n#0@@7| |t#0@@8|) |i#0@@65|) |t#0@@8|)) :qid |sequence.680:18| :skolemid |1798| :pattern ( (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@181 |n#0@@7| |t#0@@8|) |i#0@@65|)) ))) ($Is (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@181 |n#0@@7| |t#0@@8|) (TSeq Sequences._default.fill$T@@1)))) :qid |unknown.0:0| :skolemid |1799| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@181 |n#0@@7| |t#0@@8|)) ))))
(assert (forall ((Sequences._default.fill$T@@2 T@U) ($ly@@182 T@U) (|n#0@@8| Int) (|t#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@2) TyType) (= (type $ly@@182) LayerTypeType)) (= (type |t#0@@9|) BoxType)) ($IsBox |t#0@@9| Sequences._default.fill$T@@2)) (and (=> (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@182 |n#0@@8| |t#0@@9|) (>= |n#0@@8| (LitInt 0))) (=> (>= |n#0@@8| (LitInt 0)) (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@182 |n#0@@8| |t#0@@9|)))) :qid |unknown.0:0| :skolemid |1800| :pattern ( (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@182 |n#0@@8| |t#0@@9|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@3 T@U) ($ly@@183 T@U) (|n#0@@9| Int) (|t#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@3) TyType) (= (type $ly@@183) LayerTypeType)) (= (type |t#0@@10|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 |n#0@@9| |t#0@@10|) (and ($IsBox |t#0@@10| Sequences._default.fill$T@@3) (>= |n#0@@9| (LitInt 0))))) (and (=> (not (= |n#0@@9| (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 (- |n#0@@9| 1) |t#0@@10|)) (= (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@183) |n#0@@9| |t#0@@10|) (ite (= |n#0@@9| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@3 $ly@@183 (- |n#0@@9| 1) |t#0@@10|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@10|)))))) :qid |unknown.0:0| :skolemid |1801| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@183) |n#0@@9| |t#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@4 T@U) ($ly@@184 T@U) (|n#0@@10| Int) (|t#0@@11| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@4) TyType) (= (type $ly@@184) LayerTypeType)) (= (type |t#0@@11|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt |n#0@@10|) |t#0@@11|) (and ($IsBox |t#0@@11| Sequences._default.fill$T@@4) (>= (LitInt |n#0@@10|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@10|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt (- |n#0@@10| 1)) |t#0@@11|)) (= (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@184) (LitInt |n#0@@10|) |t#0@@11|) (ite (= (LitInt |n#0@@10|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@184) (LitInt (- |n#0@@10| 1)) |t#0@@11|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@11|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1802| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@184) (LitInt |n#0@@10|) |t#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@5 T@U) ($ly@@185 T@U) (|n#0@@11| Int) (|t#0@@12| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@5) TyType) (= (type $ly@@185) LayerTypeType)) (= (type |t#0@@12|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt |n#0@@11|) (Lit |t#0@@12|)) (and ($IsBox |t#0@@12| Sequences._default.fill$T@@5) (>= (LitInt |n#0@@11|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@11|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|))) (= (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@185) (LitInt |n#0@@11|) (Lit |t#0@@12|)) (ite (= (LitInt |n#0@@11|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@185) (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@12|))))))) :qid |unknown.0:0| :weight 3 :skolemid |1803| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@185) (LitInt |n#0@@11|) (Lit |t#0@@12|))) ))))
(assert (= (type Tclass.Maps.__default) TyType))
(assert (= (Tag Tclass.Maps.__default) Tagclass.Maps.__default))
(assert (forall ((bx@@99 T@U) ) (!  (=> (and (= (type bx@@99) BoxType) ($IsBox bx@@99 Tclass.Maps.__default)) (and (= ($Box ($Unbox refType bx@@99)) bx@@99) ($Is ($Unbox refType bx@@99) Tclass.Maps.__default))) :qid |unknown.0:0| :skolemid |1804| :pattern ( ($IsBox bx@@99 Tclass.Maps.__default)) )))
(assert (forall (($o@@27 T@U) ) (!  (=> (= (type $o@@27) refType) (and (=> ($Is $o@@27 Tclass.Maps.__default) (or (= $o@@27 null) (= (dtype $o@@27) Tclass.Maps.__default))) (=> (or (= $o@@27 null) (= (dtype $o@@27) Tclass.Maps.__default)) ($Is $o@@27 Tclass.Maps.__default)))) :qid |unknown.0:0| :skolemid |1805| :pattern ( ($Is $o@@27 Tclass.Maps.__default)) )))
(assert (forall (($o@@28 T@U) ($h@@48 T@U) ) (!  (=> (and (= (type $o@@28) refType) (= (type $h@@48) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@28 Tclass.Maps.__default $h@@48) (or (= $o@@28 null) (U_2_bool (MapType1Select (MapType0Select $h@@48 $o@@28) alloc)))) (=> (or (= $o@@28 null) (U_2_bool (MapType1Select (MapType0Select $h@@48 $o@@28) alloc))) ($IsAlloc $o@@28 Tclass.Maps.__default $h@@48)))) :qid |unknown.0:0| :skolemid |1806| :pattern ( ($IsAlloc $o@@28 Tclass.Maps.__default $h@@48)) )))
(assert  (=> true (forall ((Maps._default.IMapsTo$K T@U) (Maps._default.IMapsTo$V T@U) (|m#0| T@U) (|k#0| T@U) (|v#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K) TyType) (= (type Maps._default.IMapsTo$V) TyType)) (= (type |m#0|) (IMapType BoxType BoxType))) (= (type |k#0|) BoxType)) (= (type |v#0@@6|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0| |k#0| |v#0@@6|) (and (and ($Is |m#0| (TIMap Maps._default.IMapsTo$K Maps._default.IMapsTo$V)) ($IsBox |k#0| Maps._default.IMapsTo$K)) ($IsBox |v#0@@6| Maps._default.IMapsTo$V)))) true) :qid |unknown.0:0| :skolemid |1807| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0| |k#0| |v#0@@6|)) ))))
(assert (forall ((Maps._default.IMapsTo$K@@0 T@U) (Maps._default.IMapsTo$V@@0 T@U) (|m#0@@0| T@U) (|k#0@@0| T@U) (|v#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@0) TyType) (= (type Maps._default.IMapsTo$V@@0) TyType)) (= (type |m#0@@0|) (IMapType BoxType BoxType))) (= (type |k#0@@0|) BoxType)) (= (type |v#0@@7|) BoxType)) (and (and ($Is |m#0@@0| (TIMap Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0)) ($IsBox |k#0@@0| Maps._default.IMapsTo$K@@0)) ($IsBox |v#0@@7| Maps._default.IMapsTo$V@@0))) (and (=> (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@0| |k#0@@0| |v#0@@7|) true) (=> true (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@0| |k#0@@0| |v#0@@7|)))) :qid |unknown.0:0| :skolemid |1808| :pattern ( (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@0| |k#0@@0| |v#0@@7|)) )))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@1 T@U) (Maps._default.IMapsTo$V@@1 T@U) (|m#0@@1| T@U) (|k#0@@1| T@U) (|v#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@1) TyType) (= (type Maps._default.IMapsTo$V@@1) TyType)) (= (type |m#0@@1|) (IMapType BoxType BoxType))) (= (type |k#0@@1|) BoxType)) (= (type |v#0@@8|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@1| |k#0@@1| |v#0@@8|) (and (and ($Is |m#0@@1| (TIMap Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1)) ($IsBox |k#0@@1| Maps._default.IMapsTo$K@@1)) ($IsBox |v#0@@8| Maps._default.IMapsTo$V@@1)))) (and (=> (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@1| |k#0@@1| |v#0@@8|) (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@1|) |k#0@@1|)) (= (MapType0Select (|IMap#Elements| |m#0@@1|) |k#0@@1|) |v#0@@8|))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@1|) |k#0@@1|)) (= (MapType0Select (|IMap#Elements| |m#0@@1|) |k#0@@1|) |v#0@@8|)) (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@1| |k#0@@1| |v#0@@8|)))) :qid |unknown.0:0| :skolemid |1809| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@1| |k#0@@1| |v#0@@8|)) ))))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@2 T@U) (Maps._default.IMapsTo$V@@2 T@U) (|m#0@@2| T@U) (|k#0@@2| T@U) (|v#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@2) TyType) (= (type Maps._default.IMapsTo$V@@2) TyType)) (= (type |m#0@@2|) (IMapType BoxType BoxType))) (= (type |k#0@@2|) BoxType)) (= (type |v#0@@9|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@2|) (Lit |k#0@@2|) (Lit |v#0@@9|)) (and (and ($Is |m#0@@2| (TIMap Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2)) ($IsBox |k#0@@2| Maps._default.IMapsTo$K@@2)) ($IsBox |v#0@@9| Maps._default.IMapsTo$V@@2)))) (and (=> (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@2|) (Lit |k#0@@2|) (Lit |v#0@@9|)) (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@2|) |k#0@@2|)) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@2|)) (Lit |k#0@@2|)) (Lit |v#0@@9|)))) (=> (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@2|) |k#0@@2|)) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@2|)) (Lit |k#0@@2|)) (Lit |v#0@@9|))) (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@2|) (Lit |k#0@@2|) (Lit |v#0@@9|))))) :qid |unknown.0:0| :weight 3 :skolemid |1810| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@2|) (Lit |k#0@@2|) (Lit |v#0@@9|))) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K T@U) (Maps._default.MapsTo$V T@U) (|m#0@@3| T@U) (|k#0@@3| T@U) (|v#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K) TyType) (= (type Maps._default.MapsTo$V) TyType)) (= (type |m#0@@3|) (MapType BoxType BoxType))) (= (type |k#0@@3|) BoxType)) (= (type |v#0@@10|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@3| |k#0@@3| |v#0@@10|) (and (and ($Is |m#0@@3| (TMap Maps._default.MapsTo$K Maps._default.MapsTo$V)) ($IsBox |k#0@@3| Maps._default.MapsTo$K)) ($IsBox |v#0@@10| Maps._default.MapsTo$V)))) true) :qid |unknown.0:0| :skolemid |1811| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@3| |k#0@@3| |v#0@@10|)) ))))
(assert (forall ((Maps._default.MapsTo$K@@0 T@U) (Maps._default.MapsTo$V@@0 T@U) (|m#0@@4| T@U) (|k#0@@4| T@U) (|v#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@0) TyType) (= (type Maps._default.MapsTo$V@@0) TyType)) (= (type |m#0@@4|) (MapType BoxType BoxType))) (= (type |k#0@@4|) BoxType)) (= (type |v#0@@11|) BoxType)) (and (and ($Is |m#0@@4| (TMap Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0)) ($IsBox |k#0@@4| Maps._default.MapsTo$K@@0)) ($IsBox |v#0@@11| Maps._default.MapsTo$V@@0))) (and (=> (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@4| |k#0@@4| |v#0@@11|) true) (=> true (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@4| |k#0@@4| |v#0@@11|)))) :qid |unknown.0:0| :skolemid |1812| :pattern ( (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@4| |k#0@@4| |v#0@@11|)) )))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@1 T@U) (Maps._default.MapsTo$V@@1 T@U) (|m#0@@5| T@U) (|k#0@@5| T@U) (|v#0@@12| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@1) TyType) (= (type Maps._default.MapsTo$V@@1) TyType)) (= (type |m#0@@5|) (MapType BoxType BoxType))) (= (type |k#0@@5|) BoxType)) (= (type |v#0@@12|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@5| |k#0@@5| |v#0@@12|) (and (and ($Is |m#0@@5| (TMap Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1)) ($IsBox |k#0@@5| Maps._default.MapsTo$K@@1)) ($IsBox |v#0@@12| Maps._default.MapsTo$V@@1)))) (and (=> (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@5| |k#0@@5| |v#0@@12|) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@5|) |k#0@@5|)) (= (MapType0Select (|Map#Elements| |m#0@@5|) |k#0@@5|) |v#0@@12|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@5|) |k#0@@5|)) (= (MapType0Select (|Map#Elements| |m#0@@5|) |k#0@@5|) |v#0@@12|)) (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@5| |k#0@@5| |v#0@@12|)))) :qid |unknown.0:0| :skolemid |1813| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@5| |k#0@@5| |v#0@@12|)) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@2 T@U) (Maps._default.MapsTo$V@@2 T@U) (|m#0@@6| T@U) (|k#0@@6| T@U) (|v#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@2) TyType) (= (type Maps._default.MapsTo$V@@2) TyType)) (= (type |m#0@@6|) (MapType BoxType BoxType))) (= (type |k#0@@6|) BoxType)) (= (type |v#0@@13|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@6|) |k#0@@6| |v#0@@13|) (and (and ($Is |m#0@@6| (TMap Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2)) ($IsBox |k#0@@6| Maps._default.MapsTo$K@@2)) ($IsBox |v#0@@13| Maps._default.MapsTo$V@@2)))) (and (=> (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@6|) |k#0@@6| |v#0@@13|) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@6|) |k#0@@6|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@6|)) |k#0@@6|) |v#0@@13|))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@6|) |k#0@@6|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@6|)) |k#0@@6|) |v#0@@13|)) (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@6|) |k#0@@6| |v#0@@13|)))) :qid |unknown.0:0| :weight 3 :skolemid |1814| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@6|) |k#0@@6| |v#0@@13|)) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@3 T@U) (Maps._default.MapsTo$V@@3 T@U) (|m#0@@7| T@U) (|k#0@@7| T@U) (|v#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@3) TyType) (= (type Maps._default.MapsTo$V@@3) TyType)) (= (type |m#0@@7|) (MapType BoxType BoxType))) (= (type |k#0@@7|) BoxType)) (= (type |v#0@@14|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@7|) (Lit |k#0@@7|) (Lit |v#0@@14|)) (and (and ($Is |m#0@@7| (TMap Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3)) ($IsBox |k#0@@7| Maps._default.MapsTo$K@@3)) ($IsBox |v#0@@14| Maps._default.MapsTo$V@@3)))) (and (=> (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@7|) (Lit |k#0@@7|) (Lit |v#0@@14|)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@7|) |k#0@@7|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@7|)) (Lit |k#0@@7|)) (Lit |v#0@@14|)))) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@7|) |k#0@@7|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@7|)) (Lit |k#0@@7|)) (Lit |v#0@@14|))) (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@7|) (Lit |k#0@@7|) (Lit |v#0@@14|))))) :qid |unknown.0:0| :weight 3 :skolemid |1815| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@7|) (Lit |k#0@@7|) (Lit |v#0@@14|))) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K T@U) (Maps._default.MapsAgreeOnKey$V T@U) (|m#0@@8| T@U) (|m'#0| T@U) (|k#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K) TyType) (= (type Maps._default.MapsAgreeOnKey$V) TyType)) (= (type |m#0@@8|) (MapType BoxType BoxType))) (= (type |m'#0|) (MapType BoxType BoxType))) (= (type |k#0@@8|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@8| |m'#0| |k#0@@8|) (and (and ($Is |m#0@@8| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V)) ($Is |m'#0| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V))) ($IsBox |k#0@@8| Maps._default.MapsAgreeOnKey$K)))) true) :qid |unknown.0:0| :skolemid |1816| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@8| |m'#0| |k#0@@8|)) ))))
(assert (forall ((Maps._default.MapsAgreeOnKey$K@@0 T@U) (Maps._default.MapsAgreeOnKey$V@@0 T@U) (|m#0@@9| T@U) (|m'#0@@0| T@U) (|k#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@9|) (MapType BoxType BoxType))) (= (type |m'#0@@0|) (MapType BoxType BoxType))) (= (type |k#0@@9|) BoxType)) (and (and ($Is |m#0@@9| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0)) ($Is |m'#0@@0| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0))) ($IsBox |k#0@@9| Maps._default.MapsAgreeOnKey$K@@0))) (and (=> (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@9| |m'#0@@0| |k#0@@9|) true) (=> true (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@9| |m'#0@@0| |k#0@@9|)))) :qid |unknown.0:0| :skolemid |1817| :pattern ( (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@9| |m'#0@@0| |k#0@@9|)) )))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@1 T@U) (Maps._default.MapsAgreeOnKey$V@@1 T@U) (|m#0@@10| T@U) (|m'#0@@1| T@U) (|k#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@10|) (MapType BoxType BoxType))) (= (type |m'#0@@1|) (MapType BoxType BoxType))) (= (type |k#0@@10|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@10| |m'#0@@1| |k#0@@10|) (and (and ($Is |m#0@@10| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1)) ($Is |m'#0@@1| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1))) ($IsBox |k#0@@10| Maps._default.MapsAgreeOnKey$K@@1)))) (and (=> (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@10| |m'#0@@1| |k#0@@10|) (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@10|) |k#0@@10|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@10|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@10|) |k#0@@10|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@10|))) (= (MapType0Select (|Map#Elements| |m#0@@10|) |k#0@@10|) (MapType0Select (|Map#Elements| |m'#0@@1|) |k#0@@10|))))) (=> (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@10|) |k#0@@10|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@10|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@10|) |k#0@@10|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@1|) |k#0@@10|))) (= (MapType0Select (|Map#Elements| |m#0@@10|) |k#0@@10|) (MapType0Select (|Map#Elements| |m'#0@@1|) |k#0@@10|)))) (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@10| |m'#0@@1| |k#0@@10|)))) :qid |unknown.0:0| :skolemid |1818| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@10| |m'#0@@1| |k#0@@10|)) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@2 T@U) (Maps._default.MapsAgreeOnKey$V@@2 T@U) (|m#0@@11| T@U) (|m'#0@@2| T@U) (|k#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@11|) (MapType BoxType BoxType))) (= (type |m'#0@@2|) (MapType BoxType BoxType))) (= (type |k#0@@11|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@11|) (Lit |m'#0@@2|) |k#0@@11|) (and (and ($Is |m#0@@11| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2)) ($Is |m'#0@@2| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2))) ($IsBox |k#0@@11| Maps._default.MapsAgreeOnKey$K@@2)))) (and (=> (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@11|) (Lit |m'#0@@2|) |k#0@@11|) (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@11|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@11|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@11|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@11|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@11|)) |k#0@@11|) (MapType0Select (|Map#Elements| (Lit |m'#0@@2|)) |k#0@@11|))))) (=> (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@11|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@11|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@11|) |k#0@@11|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@11|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@11|)) |k#0@@11|) (MapType0Select (|Map#Elements| (Lit |m'#0@@2|)) |k#0@@11|)))) (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@11|) (Lit |m'#0@@2|) |k#0@@11|)))) :qid |unknown.0:0| :weight 3 :skolemid |1819| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@11|) (Lit |m'#0@@2|) |k#0@@11|)) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@3 T@U) (Maps._default.MapsAgreeOnKey$V@@3 T@U) (|m#0@@12| T@U) (|m'#0@@3| T@U) (|k#0@@12| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@3) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@3) TyType)) (= (type |m#0@@12|) (MapType BoxType BoxType))) (= (type |m'#0@@3|) (MapType BoxType BoxType))) (= (type |k#0@@12|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@12|) (Lit |m'#0@@3|) (Lit |k#0@@12|)) (and (and ($Is |m#0@@12| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3)) ($Is |m'#0@@3| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3))) ($IsBox |k#0@@12| Maps._default.MapsAgreeOnKey$K@@3)))) (and (=> (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@12|) (Lit |m'#0@@3|) (Lit |k#0@@12|)) (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@12|) |k#0@@12|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@12|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@12|) |k#0@@12|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@12|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@12|)) (Lit |k#0@@12|)) (MapType0Select (|Map#Elements| (Lit |m'#0@@3|)) (Lit |k#0@@12|)))))) (=> (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@12|) |k#0@@12|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@12|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@12|) |k#0@@12|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@12|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@12|)) (Lit |k#0@@12|)) (MapType0Select (|Map#Elements| (Lit |m'#0@@3|)) (Lit |k#0@@12|))))) (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@12|) (Lit |m'#0@@3|) (Lit |k#0@@12|))))) :qid |unknown.0:0| :weight 3 :skolemid |1820| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@12|) (Lit |m'#0@@3|) (Lit |k#0@@12|))) ))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K T@U) (Maps._default.IMapsAgreeOnKey$V T@U) (|m#0@@13| T@U) (|m'#0@@4| T@U) (|k#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K) TyType) (= (type Maps._default.IMapsAgreeOnKey$V) TyType)) (= (type |m#0@@13|) (IMapType BoxType BoxType))) (= (type |m'#0@@4|) (IMapType BoxType BoxType))) (= (type |k#0@@13|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@13| |m'#0@@4| |k#0@@13|) (and (and ($Is |m#0@@13| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V)) ($Is |m'#0@@4| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V))) ($IsBox |k#0@@13| Maps._default.IMapsAgreeOnKey$K)))) true) :qid |unknown.0:0| :skolemid |1821| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@13| |m'#0@@4| |k#0@@13|)) ))))
(assert (forall ((Maps._default.IMapsAgreeOnKey$K@@0 T@U) (Maps._default.IMapsAgreeOnKey$V@@0 T@U) (|m#0@@14| T@U) (|m'#0@@5| T@U) (|k#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@14|) (IMapType BoxType BoxType))) (= (type |m'#0@@5|) (IMapType BoxType BoxType))) (= (type |k#0@@14|) BoxType)) (and (and ($Is |m#0@@14| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0)) ($Is |m'#0@@5| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0))) ($IsBox |k#0@@14| Maps._default.IMapsAgreeOnKey$K@@0))) (and (=> (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@14| |m'#0@@5| |k#0@@14|) true) (=> true (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@14| |m'#0@@5| |k#0@@14|)))) :qid |unknown.0:0| :skolemid |1822| :pattern ( (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@14| |m'#0@@5| |k#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@1 T@U) (Maps._default.IMapsAgreeOnKey$V@@1 T@U) (|m#0@@15| T@U) (|m'#0@@6| T@U) (|k#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@15|) (IMapType BoxType BoxType))) (= (type |m'#0@@6|) (IMapType BoxType BoxType))) (= (type |k#0@@15|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@15| |m'#0@@6| |k#0@@15|) (and (and ($Is |m#0@@15| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1)) ($Is |m'#0@@6| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1))) ($IsBox |k#0@@15| Maps._default.IMapsAgreeOnKey$K@@1)))) (and (=> (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@15| |m'#0@@6| |k#0@@15|) (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@15|) |k#0@@15|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@15|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@15|) |k#0@@15|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@15|))) (= (MapType0Select (|IMap#Elements| |m#0@@15|) |k#0@@15|) (MapType0Select (|IMap#Elements| |m'#0@@6|) |k#0@@15|))))) (=> (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@15|) |k#0@@15|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@15|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@15|) |k#0@@15|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@6|) |k#0@@15|))) (= (MapType0Select (|IMap#Elements| |m#0@@15|) |k#0@@15|) (MapType0Select (|IMap#Elements| |m'#0@@6|) |k#0@@15|)))) (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@15| |m'#0@@6| |k#0@@15|)))) :qid |unknown.0:0| :skolemid |1823| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@15| |m'#0@@6| |k#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@2 T@U) (Maps._default.IMapsAgreeOnKey$V@@2 T@U) (|m#0@@16| T@U) (|m'#0@@7| T@U) (|k#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@16|) (IMapType BoxType BoxType))) (= (type |m'#0@@7|) (IMapType BoxType BoxType))) (= (type |k#0@@16|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@16|) (Lit |m'#0@@7|) (Lit |k#0@@16|)) (and (and ($Is |m#0@@16| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2)) ($Is |m'#0@@7| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2))) ($IsBox |k#0@@16| Maps._default.IMapsAgreeOnKey$K@@2)))) (and (=> (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@16|) (Lit |m'#0@@7|) (Lit |k#0@@16|)) (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@16|) |k#0@@16|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@16|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@16|) |k#0@@16|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@16|))) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@16|)) (Lit |k#0@@16|)) (MapType0Select (|IMap#Elements| (Lit |m'#0@@7|)) (Lit |k#0@@16|)))))) (=> (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@16|) |k#0@@16|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@16|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@16|) |k#0@@16|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@16|))) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@16|)) (Lit |k#0@@16|)) (MapType0Select (|IMap#Elements| (Lit |m'#0@@7|)) (Lit |k#0@@16|))))) (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@16|) (Lit |m'#0@@7|) (Lit |k#0@@16|))))) :qid |unknown.0:0| :weight 3 :skolemid |1824| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@16|) (Lit |m'#0@@7|) (Lit |k#0@@16|))) ))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K T@U) (Maps._default.IsSubIMap$V T@U) (|sub#0| T@U) (|sup#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K) TyType) (= (type Maps._default.IsSubIMap$V) TyType)) (= (type |sub#0|) (IMapType BoxType BoxType))) (= (type |sup#0|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0| |sup#0|) (and ($Is |sub#0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V)) ($Is |sup#0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V))))) true) :qid |unknown.0:0| :skolemid |1825| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0| |sup#0|)) ))))
(assert (forall ((Maps._default.IsSubIMap$K@@0 T@U) (Maps._default.IsSubIMap$V@@0 T@U) (|sub#0@@0| T@U) (|sup#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@0) TyType) (= (type Maps._default.IsSubIMap$V@@0) TyType)) (= (type |sub#0@@0|) (IMapType BoxType BoxType))) (= (type |sup#0@@0|) (IMapType BoxType BoxType))) (and ($Is |sub#0@@0| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)) ($Is |sup#0@@0| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)))) (and (=> (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|) true) (=> true (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|)))) :qid |unknown.0:0| :skolemid |1826| :pattern ( (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@1 T@U) (Maps._default.IsSubIMap$V@@1 T@U) (|sub#0@@1| T@U) (|sup#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@1) TyType) (= (type Maps._default.IsSubIMap$V@@1) TyType)) (= (type |sub#0@@1|) (IMapType BoxType BoxType))) (= (type |sup#0@@1|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|) (and ($Is |sub#0@@1| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1)) ($Is |sup#0@@1| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1))))) (and (=> (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0| T@U) ) (!  (=> (and (and (= (type |key#0|) BoxType) ($IsBox |key#0| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0|)) :qid |Mapssdfy.28:16| :skolemid |1827| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0|)) ))) (and (=> (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|) (and (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0@@0| T@U) ) (!  (=> (and (and (= (type |key#0@@0|) BoxType) ($IsBox |key#0@@0| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@0|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@0|)) :qid |Mapssdfy.28:16| :skolemid |1828| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@0|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@0|)) )))) (=> (and (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0@@1| T@U) ) (!  (=> (and (and (= (type |key#0@@1|) BoxType) ($IsBox |key#0@@1| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@1|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@1|)) :qid |Mapssdfy.28:16| :skolemid |1828| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@1|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@1|)) ))) (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|))))) :qid |unknown.0:0| :skolemid |1829| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|)) ))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@2 T@U) (Maps._default.IsSubIMap$V@@2 T@U) (|sub#0@@2| T@U) (|sup#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@2) TyType) (= (type Maps._default.IsSubIMap$V@@2) TyType)) (= (type |sub#0@@2|) (IMapType BoxType BoxType))) (= (type |sup#0@@2|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)) (and ($Is |sub#0@@2| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2)) ($Is |sup#0@@2| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2))))) (and (=> (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1| T@U) ) (!  (=> (and (and (= (type |key#1|) BoxType) ($IsBox |key#1| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#1|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#1|)) :qid |Mapssdfy.28:16| :skolemid |1830| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#1|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#1|)) ))) (and (=> (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)) (and (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1@@0| T@U) ) (!  (=> (and (and (= (type |key#1@@0|) BoxType) ($IsBox |key#1@@0| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#1@@0|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#1@@0|)) :qid |Mapssdfy.28:16| :skolemid |1831| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#1@@0|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#1@@0|)) )))) (=> (and (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1@@1| T@U) ) (!  (=> (and (and (= (type |key#1@@1|) BoxType) ($IsBox |key#1@@1| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#1@@1|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#1@@1|)) :qid |Mapssdfy.28:16| :skolemid |1831| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#1@@1|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#1@@1|)) ))) (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1832| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|))) ))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K T@U) (Maps._default.IsSubMap$V T@U) (|sub#0@@3| T@U) (|sup#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K) TyType) (= (type Maps._default.IsSubMap$V) TyType)) (= (type |sub#0@@3|) (MapType BoxType BoxType))) (= (type |sup#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@3| |sup#0@@3|) (and ($Is |sub#0@@3| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V)) ($Is |sup#0@@3| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V))))) true) :qid |unknown.0:0| :skolemid |1833| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@3| |sup#0@@3|)) ))))
(assert (forall ((Maps._default.IsSubMap$K@@0 T@U) (Maps._default.IsSubMap$V@@0 T@U) (|sub#0@@4| T@U) (|sup#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@0) TyType) (= (type Maps._default.IsSubMap$V@@0) TyType)) (= (type |sub#0@@4|) (MapType BoxType BoxType))) (= (type |sup#0@@4|) (MapType BoxType BoxType))) (and ($Is |sub#0@@4| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)) ($Is |sup#0@@4| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)))) (and (=> (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|) true) (=> true (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|)))) :qid |unknown.0:0| :skolemid |1834| :pattern ( (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|)) )))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@1 T@U) (Maps._default.IsSubMap$V@@1 T@U) (|sub#0@@5| T@U) (|sup#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@1) TyType) (= (type Maps._default.IsSubMap$V@@1) TyType)) (= (type |sub#0@@5|) (MapType BoxType BoxType))) (= (type |sup#0@@5|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|) (and ($Is |sub#0@@5| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1)) ($Is |sup#0@@5| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1))))) (and (=> (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@2| T@U) ) (!  (=> (and (and (= (type |key#0@@2|) BoxType) ($IsBox |key#0@@2| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@2|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@2|)) :qid |Mapssdfy.33:16| :skolemid |1835| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@2|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@2|)) ))) (and (=> (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|) (and (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@3| T@U) ) (!  (=> (and (and (= (type |key#0@@3|) BoxType) ($IsBox |key#0@@3| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@3|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@3|)) :qid |Mapssdfy.33:16| :skolemid |1836| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@3|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@3|)) )))) (=> (and (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@4| T@U) ) (!  (=> (and (and (= (type |key#0@@4|) BoxType) ($IsBox |key#0@@4| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@4|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@4|)) :qid |Mapssdfy.33:16| :skolemid |1836| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@4|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@4|)) ))) (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|))))) :qid |unknown.0:0| :skolemid |1837| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|)) ))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@2 T@U) (Maps._default.IsSubMap$V@@2 T@U) (|sub#0@@6| T@U) (|sup#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@2) TyType) (= (type Maps._default.IsSubMap$V@@2) TyType)) (= (type |sub#0@@6|) (MapType BoxType BoxType))) (= (type |sup#0@@6|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)) (and ($Is |sub#0@@6| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2)) ($Is |sup#0@@6| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2))))) (and (=> (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@2| T@U) ) (!  (=> (and (and (= (type |key#1@@2|) BoxType) ($IsBox |key#1@@2| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#1@@2|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#1@@2|)) :qid |Mapssdfy.33:16| :skolemid |1838| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#1@@2|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#1@@2|)) ))) (and (=> (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)) (and (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@3| T@U) ) (!  (=> (and (and (= (type |key#1@@3|) BoxType) ($IsBox |key#1@@3| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#1@@3|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#1@@3|)) :qid |Mapssdfy.33:16| :skolemid |1839| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#1@@3|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#1@@3|)) )))) (=> (and (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@4| T@U) ) (!  (=> (and (and (= (type |key#1@@4|) BoxType) ($IsBox |key#1@@4| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#1@@4|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#1@@4|)) :qid |Mapssdfy.33:16| :skolemid |1839| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#1@@4|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#1@@4|)) ))) (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1840| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|))) ))))
(assert (forall ((arg0@@264 T@U) (arg1@@139 T@U) (arg2@@90 T@U) (arg3@@62 T@U) (arg4@@43 T@U) ) (! (= (type (Maps.__default.MapRemove arg0@@264 arg1@@139 arg2@@90 arg3@@62 arg4@@43)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove| :pattern ( (Maps.__default.MapRemove arg0@@264 arg1@@139 arg2@@90 arg3@@62 arg4@@43)) )))
(assert (forall ((Maps._default.MapRemove$K T@U) (Maps._default.MapRemove$V T@U) ($ly@@186 T@U) (|m#0@@17| T@U) (|ks#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K) TyType) (= (type Maps._default.MapRemove$V) TyType)) (= (type $ly@@186) LayerTypeType)) (= (type |m#0@@17|) (MapType BoxType BoxType))) (= (type |ks#0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@186) |m#0@@17| |ks#0|) (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V $ly@@186 |m#0@@17| |ks#0|))) :qid |unknown.0:0| :skolemid |1841| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@186) |m#0@@17| |ks#0|)) )))
(assert (forall ((Maps._default.MapRemove$K@@0 T@U) (Maps._default.MapRemove$V@@0 T@U) ($ly@@187 T@U) (|m#0@@18| T@U) (|ks#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K@@0) TyType) (= (type Maps._default.MapRemove$V@@0) TyType)) (= (type $ly@@187) LayerTypeType)) (= (type |m#0@@18|) (MapType BoxType BoxType))) (= (type |ks#0@@0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $ly@@187 |m#0@@18| |ks#0@@0|) (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $LZ |m#0@@18| |ks#0@@0|))) :qid |unknown.0:0| :skolemid |1842| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 (AsFuelBottom $ly@@187) |m#0@@18| |ks#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@1 T@U) (Maps._default.MapRemove$V@@1 T@U) ($ly@@188 T@U) (|m#0@@19| T@U) (|ks#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@1) TyType) (= (type Maps._default.MapRemove$V@@1) TyType)) (= (type $ly@@188) LayerTypeType)) (= (type |m#0@@19|) (MapType BoxType BoxType))) (= (type |ks#0@@1|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 |m#0@@19| |ks#0@@1|) (and ($Is |m#0@@19| (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1)) ($Is |ks#0@@1| (TSet Maps._default.MapRemove$K@@1))))) (and (and (and (and (and (forall ((|k#0@@17| T@U) ) (!  (=> (and (and (= (type |k#0@@17|) BoxType) ($IsBox |k#0@@17| Maps._default.MapRemove$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@19|) |k#0@@17|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#0@@17|))))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@188 |m#0@@19| |ks#0@@1|)) |k#0@@17|))) :qid |Mapssdfy.37:20| :skolemid |1843| :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@188 |m#0@@19| |ks#0@@1|)) |k#0@@17|)) :pattern ( (MapType0Select |ks#0@@1| |k#0@@17|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@19|) |k#0@@17|)) )) (forall ((|k#1| T@U) ) (!  (=> (and (= (type |k#1|) BoxType) ($IsBox |k#1| Maps._default.MapRemove$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@188 |m#0@@19| |ks#0@@1|)) |k#1|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@19|) |k#1|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@188 |m#0@@19| |ks#0@@1|)) |k#1|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#1|)))))) :qid |Mapssdfy.38:20| :skolemid |1844| :pattern ( (MapType0Select |ks#0@@1| |k#1|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@19|) |k#1|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@188 |m#0@@19| |ks#0@@1|)) |k#1|)) ))) (forall ((|j#0@@6| T@U) ) (!  (=> (and (and (= (type |j#0@@6|) BoxType) ($IsBox |j#0@@6| Maps._default.MapRemove$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@188 |m#0@@19| |ks#0@@1|)) |j#0@@6|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@188 |m#0@@19| |ks#0@@1|)) |j#0@@6|) (MapType0Select (|Map#Elements| |m#0@@19|) |j#0@@6|))) :qid |Mapssdfy.39:20| :skolemid |1845| :pattern ( (MapType0Select (|Map#Elements| |m#0@@19|) |j#0@@6|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@188 |m#0@@19| |ks#0@@1|)) |j#0@@6|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@188 |m#0@@19| |ks#0@@1|)) |j#0@@6|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@188 |m#0@@19| |ks#0@@1|))) (|Set#Card| (|Map#Domain| |m#0@@19|)))) (<= (|Map#Card| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@188 |m#0@@19| |ks#0@@1|)) (|Map#Card| |m#0@@19|))) ($Is (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@188 |m#0@@19| |ks#0@@1|) (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1)))) :qid |unknown.0:0| :skolemid |1846| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@188 |m#0@@19| |ks#0@@1|)) ))))
(assert (forall ((Maps._default.MapRemove$K@@2 T@U) (Maps._default.MapRemove$V@@2 T@U) ($ly@@189 T@U) (|m#0@@20| T@U) (|ks#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@2) TyType) (= (type Maps._default.MapRemove$V@@2) TyType)) (= (type $ly@@189) LayerTypeType)) (= (type |m#0@@20|) (MapType BoxType BoxType))) (= (type |ks#0@@2|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@20| (TMap Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2)) ($Is |ks#0@@2| (TSet Maps._default.MapRemove$K@@2)))) (and (=> (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@189 |m#0@@20| |ks#0@@2|) true) (=> true (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@189 |m#0@@20| |ks#0@@2|)))) :qid |unknown.0:0| :skolemid |1847| :pattern ( (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@189 |m#0@@20| |ks#0@@2|)) )))
(assert  (and (forall ((arg0@@265 T@U) (arg1@@140 T@U) (arg2@@91 T@U) ) (! (= (type (|lambda#12| arg0@@265 arg1@@140 arg2@@91)) (MapType0Type BoxType boolType)) :qid |funType:lambda#12| :pattern ( (|lambda#12| arg0@@265 arg1@@140 arg2@@91)) )) (forall ((arg0@@266 T@U) ) (! (= (type (|lambda#13| arg0@@266)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#13| :pattern ( (|lambda#13| arg0@@266)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@3 T@U) (Maps._default.MapRemove$V@@3 T@U) ($ly@@190 T@U) (|m#0@@21| T@U) (|ks#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@3) TyType) (= (type Maps._default.MapRemove$V@@3) TyType)) (= (type $ly@@190) LayerTypeType)) (= (type |m#0@@21|) (MapType BoxType BoxType))) (= (type |ks#0@@3|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 |m#0@@21| |ks#0@@3|) (and ($Is |m#0@@21| (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3)) ($Is |ks#0@@3| (TSet Maps._default.MapRemove$K@@3))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@190) |m#0@@21| |ks#0@@3|) (let ((|m'#0@@8| (|Map#Glue| (|lambda#12| Maps._default.MapRemove$K@@3 (|Map#Domain| |m#0@@21|) |ks#0@@3|) (|lambda#13| (|Map#Elements| |m#0@@21|)) (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3)))) |m'#0@@8|))) :qid |unknown.0:0| :skolemid |1848| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@190) |m#0@@21| |ks#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@4 T@U) (Maps._default.MapRemove$V@@4 T@U) ($ly@@191 T@U) (|m#0@@22| T@U) (|ks#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@4) TyType) (= (type Maps._default.MapRemove$V@@4) TyType)) (= (type $ly@@191) LayerTypeType)) (= (type |m#0@@22|) (MapType BoxType BoxType))) (= (type |ks#0@@4|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 (Lit |m#0@@22|) (Lit |ks#0@@4|)) (and ($Is |m#0@@22| (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4)) ($Is |ks#0@@4| (TSet Maps._default.MapRemove$K@@4))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@191) (Lit |m#0@@22|) (Lit |ks#0@@4|)) (let ((|m'#1| (|Map#Glue| (|lambda#12| Maps._default.MapRemove$K@@4 (|Map#Domain| |m#0@@22|) (Lit |ks#0@@4|)) (|lambda#13| (|Map#Elements| (Lit |m#0@@22|))) (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4)))) |m'#1|))) :qid |unknown.0:0| :weight 3 :skolemid |1849| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@191) (Lit |m#0@@22|) (Lit |ks#0@@4|))) ))))
(assert (forall ((arg0@@267 T@U) (arg1@@141 T@U) (arg2@@92 T@U) (arg3@@63 T@U) (arg4@@44 T@U) ) (! (= (type (Maps.__default.MapRemoveStrong arg0@@267 arg1@@141 arg2@@92 arg3@@63 arg4@@44)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemoveStrong| :pattern ( (Maps.__default.MapRemoveStrong arg0@@267 arg1@@141 arg2@@92 arg3@@63 arg4@@44)) )))
(assert (forall ((Maps._default.MapRemoveStrong$K T@U) (Maps._default.MapRemoveStrong$V T@U) ($ly@@192 T@U) (|m#0@@23| T@U) (|ks#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K) TyType) (= (type Maps._default.MapRemoveStrong$V) TyType)) (= (type $ly@@192) LayerTypeType)) (= (type |m#0@@23|) (MapType BoxType BoxType))) (= (type |ks#0@@5|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@192) |m#0@@23| |ks#0@@5|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V $ly@@192 |m#0@@23| |ks#0@@5|))) :qid |unknown.0:0| :skolemid |1850| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@192) |m#0@@23| |ks#0@@5|)) )))
(assert (forall ((Maps._default.MapRemoveStrong$K@@0 T@U) (Maps._default.MapRemoveStrong$V@@0 T@U) ($ly@@193 T@U) (|m#0@@24| T@U) (|ks#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@0) TyType) (= (type Maps._default.MapRemoveStrong$V@@0) TyType)) (= (type $ly@@193) LayerTypeType)) (= (type |m#0@@24|) (MapType BoxType BoxType))) (= (type |ks#0@@6|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $ly@@193 |m#0@@24| |ks#0@@6|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $LZ |m#0@@24| |ks#0@@6|))) :qid |unknown.0:0| :skolemid |1851| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 (AsFuelBottom $ly@@193) |m#0@@24| |ks#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@1 T@U) (Maps._default.MapRemoveStrong$V@@1 T@U) ($ly@@194 T@U) (|m#0@@25| T@U) (|ks#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@1) TyType) (= (type Maps._default.MapRemoveStrong$V@@1) TyType)) (= (type $ly@@194) LayerTypeType)) (= (type |m#0@@25|) (MapType BoxType BoxType))) (= (type |ks#0@@7|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 |m#0@@25| |ks#0@@7|) (and ($Is |m#0@@25| (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1)) ($Is |ks#0@@7| (TSet Maps._default.MapRemoveStrong$K@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@194 |m#0@@25| |ks#0@@7|)) (|Set#Difference| (|Map#Domain| |m#0@@25|) |ks#0@@7|)) (forall ((|j#0@@7| T@U) ) (!  (=> (and (and (= (type |j#0@@7|) BoxType) ($IsBox |j#0@@7| Maps._default.MapRemoveStrong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@194 |m#0@@25| |ks#0@@7|)) |j#0@@7|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@194 |m#0@@25| |ks#0@@7|)) |j#0@@7|) (MapType0Select (|Map#Elements| |m#0@@25|) |j#0@@7|))) :qid |Mapssdfy.50:20| :skolemid |1852| :pattern ( (MapType0Select (|Map#Elements| |m#0@@25|) |j#0@@7|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@194 |m#0@@25| |ks#0@@7|)) |j#0@@7|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@194 |m#0@@25| |ks#0@@7|)) |j#0@@7|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@194 |m#0@@25| |ks#0@@7|))) (|Set#Card| (|Map#Domain| |m#0@@25|)))) (<= (|Map#Card| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@194 |m#0@@25| |ks#0@@7|)) (|Map#Card| |m#0@@25|))) ($Is (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@194 |m#0@@25| |ks#0@@7|) (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1)))) :qid |unknown.0:0| :skolemid |1853| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@194 |m#0@@25| |ks#0@@7|)) ))))
(assert (forall ((Maps._default.MapRemoveStrong$K@@2 T@U) (Maps._default.MapRemoveStrong$V@@2 T@U) ($ly@@195 T@U) (|m#0@@26| T@U) (|ks#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@2) TyType) (= (type Maps._default.MapRemoveStrong$V@@2) TyType)) (= (type $ly@@195) LayerTypeType)) (= (type |m#0@@26|) (MapType BoxType BoxType))) (= (type |ks#0@@8|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@26| (TMap Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2)) ($Is |ks#0@@8| (TSet Maps._default.MapRemoveStrong$K@@2)))) (and (=> (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@195 |m#0@@26| |ks#0@@8|) true) (=> true (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@195 |m#0@@26| |ks#0@@8|)))) :qid |unknown.0:0| :skolemid |1854| :pattern ( (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@195 |m#0@@26| |ks#0@@8|)) )))
(assert  (and (and (= (type StartFuel_Maps._default.MapRemove) LayerTypeType) (= (type MoreFuel_Maps._default.MapRemove0) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@3 T@U) (Maps._default.MapRemoveStrong$V@@3 T@U) ($ly@@196 T@U) (|m#0@@27| T@U) (|ks#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@3) TyType) (= (type Maps._default.MapRemoveStrong$V@@3) TyType)) (= (type $ly@@196) LayerTypeType)) (= (type |m#0@@27|) (MapType BoxType BoxType))) (= (type |ks#0@@9|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@27| |ks#0@@9|) (and ($Is |m#0@@27| (TMap Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3)) ($Is |ks#0@@9| (TSet Maps._default.MapRemoveStrong$K@@3))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@27| |ks#0@@9|) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove0)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove0)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove0) MoreFuel_Maps._default.MapRemove0)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@196) |m#0@@27| |ks#0@@9|) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 StartFuel_Maps._default.MapRemove |m#0@@27| |ks#0@@9|))))) :qid |unknown.0:0| :skolemid |1855| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@196) |m#0@@27| |ks#0@@9|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove1) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@4 T@U) (Maps._default.MapRemoveStrong$V@@4 T@U) ($ly@@197 T@U) (|m#0@@28| T@U) (|ks#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@4) TyType) (= (type Maps._default.MapRemoveStrong$V@@4) TyType)) (= (type $ly@@197) LayerTypeType)) (= (type |m#0@@28|) (MapType BoxType BoxType))) (= (type |ks#0@@10|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@28|) (Lit |ks#0@@10|)) (and ($Is |m#0@@28| (TMap Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4)) ($Is |ks#0@@10| (TSet Maps._default.MapRemoveStrong$K@@4))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@28|) (Lit |ks#0@@10|)) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove1)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove1)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove1) MoreFuel_Maps._default.MapRemove1)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@197) (Lit |m#0@@28|) (Lit |ks#0@@10|)) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 StartFuel_Maps._default.MapRemove (Lit |m#0@@28|) (Lit |ks#0@@10|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1856| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@197) (Lit |m#0@@28|) (Lit |ks#0@@10|))) ))))
(assert (forall ((arg0@@268 T@U) (arg1@@142 T@U) (arg2@@93 T@U) (arg3@@64 T@U) (arg4@@45 T@U) ) (! (= (type (Maps.__default.MapRemove1 arg0@@268 arg1@@142 arg2@@93 arg3@@64 arg4@@45)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove1| :pattern ( (Maps.__default.MapRemove1 arg0@@268 arg1@@142 arg2@@93 arg3@@64 arg4@@45)) )))
(assert (forall ((Maps._default.MapRemove1$K T@U) (Maps._default.MapRemove1$V T@U) ($ly@@198 T@U) (|m#0@@29| T@U) (|k#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K) TyType) (= (type Maps._default.MapRemove1$V) TyType)) (= (type $ly@@198) LayerTypeType)) (= (type |m#0@@29|) (MapType BoxType BoxType))) (= (type |k#0@@18|) BoxType)) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V ($LS $ly@@198) |m#0@@29| |k#0@@18|) (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V $ly@@198 |m#0@@29| |k#0@@18|))) :qid |unknown.0:0| :skolemid |1857| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V ($LS $ly@@198) |m#0@@29| |k#0@@18|)) )))
(assert (forall ((Maps._default.MapRemove1$K@@0 T@U) (Maps._default.MapRemove1$V@@0 T@U) ($ly@@199 T@U) (|m#0@@30| T@U) (|k#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@0) TyType) (= (type Maps._default.MapRemove1$V@@0) TyType)) (= (type $ly@@199) LayerTypeType)) (= (type |m#0@@30|) (MapType BoxType BoxType))) (= (type |k#0@@19|) BoxType)) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 $ly@@199 |m#0@@30| |k#0@@19|) (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 $LZ |m#0@@30| |k#0@@19|))) :qid |unknown.0:0| :skolemid |1858| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 (AsFuelBottom $ly@@199) |m#0@@30| |k#0@@19|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@1 T@U) (Maps._default.MapRemove1$V@@1 T@U) ($ly@@200 T@U) (|m#0@@31| T@U) (|k#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@1) TyType) (= (type Maps._default.MapRemove1$V@@1) TyType)) (= (type $ly@@200) LayerTypeType)) (= (type |m#0@@31|) (MapType BoxType BoxType))) (= (type |k#0@@20|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@31| |k#0@@20|) (and ($Is |m#0@@31| (TMap Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1)) ($IsBox |k#0@@20| Maps._default.MapRemove1$K@@1)))) (and (and (and (and (and (and (forall ((|j#0@@8| T@U) ) (!  (=> (and (and (= (type |j#0@@8|) BoxType) ($IsBox |j#0@@8| Maps._default.MapRemove1$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |j#0@@8|)) (not (= |j#0@@8| |k#0@@20|)))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@200 |m#0@@31| |k#0@@20|)) |j#0@@8|))) :qid |Mapssdfy.59:20| :skolemid |1859| :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@200 |m#0@@31| |k#0@@20|)) |j#0@@8|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@31|) |j#0@@8|)) )) (forall ((|j#1@@1| T@U) ) (!  (=> (and (= (type |j#1@@1|) BoxType) ($IsBox |j#1@@1| Maps._default.MapRemove1$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@200 |m#0@@31| |k#0@@20|)) |j#1@@1|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |j#1@@1|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@200 |m#0@@31| |k#0@@20|)) |j#1@@1|)) (not (= |j#1@@1| |k#0@@20|))))) :qid |Mapssdfy.60:20| :skolemid |1860| :pattern ( (MapType0Select (|Map#Domain| |m#0@@31|) |j#1@@1|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@200 |m#0@@31| |k#0@@20|)) |j#1@@1|)) ))) (forall ((|j#2| T@U) ) (!  (=> (and (and (= (type |j#2|) BoxType) ($IsBox |j#2| Maps._default.MapRemove1$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@200 |m#0@@31| |k#0@@20|)) |j#2|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@200 |m#0@@31| |k#0@@20|)) |j#2|) (MapType0Select (|Map#Elements| |m#0@@31|) |j#2|))) :qid |Mapssdfy.61:20| :skolemid |1861| :pattern ( (MapType0Select (|Map#Elements| |m#0@@31|) |j#2|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@200 |m#0@@31| |k#0@@20|)) |j#2|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@200 |m#0@@31| |k#0@@20|)) |j#2|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@200 |m#0@@31| |k#0@@20|))) (|Set#Card| (|Map#Domain| |m#0@@31|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |k#0@@20|)) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@200 |m#0@@31| |k#0@@20|)) (- (|Map#Card| |m#0@@31|) 1)))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@31|) |k#0@@20|))) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@200 |m#0@@31| |k#0@@20|)) (|Map#Card| |m#0@@31|)))) ($Is (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@200 |m#0@@31| |k#0@@20|) (TMap Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |1862| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 $ly@@200 |m#0@@31| |k#0@@20|)) ))))
(assert (forall ((Maps._default.MapRemove1$K@@2 T@U) (Maps._default.MapRemove1$V@@2 T@U) ($ly@@201 T@U) (|m#0@@32| T@U) (|k#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@2) TyType) (= (type Maps._default.MapRemove1$V@@2) TyType)) (= (type $ly@@201) LayerTypeType)) (= (type |m#0@@32|) (MapType BoxType BoxType))) (= (type |k#0@@21|) BoxType)) (and ($Is |m#0@@32| (TMap Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2)) ($IsBox |k#0@@21| Maps._default.MapRemove1$K@@2))) (and (=> (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 $ly@@201 |m#0@@32| |k#0@@21|) true) (=> true (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 $ly@@201 |m#0@@32| |k#0@@21|)))) :qid |unknown.0:0| :skolemid |1863| :pattern ( (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 $ly@@201 |m#0@@32| |k#0@@21|)) )))
(assert (forall ((arg0@@269 T@U) (arg1@@143 T@U) (arg2@@94 T@U) ) (! (= (type (|lambda#16| arg0@@269 arg1@@143 arg2@@94)) (MapType0Type BoxType boolType)) :qid |funType:lambda#16| :pattern ( (|lambda#16| arg0@@269 arg1@@143 arg2@@94)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@3 T@U) (Maps._default.MapRemove1$V@@3 T@U) ($ly@@202 T@U) (|m#0@@33| T@U) (|k#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@3) TyType) (= (type Maps._default.MapRemove1$V@@3) TyType)) (= (type $ly@@202) LayerTypeType)) (= (type |m#0@@33|) (MapType BoxType BoxType))) (= (type |k#0@@22|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 |m#0@@33| |k#0@@22|) (and ($Is |m#0@@33| (TMap Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3)) ($IsBox |k#0@@22| Maps._default.MapRemove1$K@@3)))) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 ($LS $ly@@202) |m#0@@33| |k#0@@22|) (let ((|m'#0@@9| (|Map#Glue| (|lambda#16| Maps._default.MapRemove1$K@@3 (|Map#Domain| |m#0@@33|) |k#0@@22|) (|lambda#13| (|Map#Elements| |m#0@@33|)) (TMap Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3)))) |m'#0@@9|))) :qid |unknown.0:0| :skolemid |1864| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 ($LS $ly@@202) |m#0@@33| |k#0@@22|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@4 T@U) (Maps._default.MapRemove1$V@@4 T@U) ($ly@@203 T@U) (|m#0@@34| T@U) (|k#0@@23| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@4) TyType) (= (type Maps._default.MapRemove1$V@@4) TyType)) (= (type $ly@@203) LayerTypeType)) (= (type |m#0@@34|) (MapType BoxType BoxType))) (= (type |k#0@@23|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4 (Lit |m#0@@34|) |k#0@@23|) (and ($Is |m#0@@34| (TMap Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4)) ($IsBox |k#0@@23| Maps._default.MapRemove1$K@@4)))) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4 ($LS $ly@@203) (Lit |m#0@@34|) |k#0@@23|) (let ((|m'#1@@0| (|Map#Glue| (|lambda#16| Maps._default.MapRemove1$K@@4 (|Map#Domain| |m#0@@34|) |k#0@@23|) (|lambda#13| (|Map#Elements| (Lit |m#0@@34|))) (TMap Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4)))) |m'#1@@0|))) :qid |unknown.0:0| :weight 3 :skolemid |1865| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@4 Maps._default.MapRemove1$V@@4 ($LS $ly@@203) (Lit |m#0@@34|) |k#0@@23|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@5 T@U) (Maps._default.MapRemove1$V@@5 T@U) ($ly@@204 T@U) (|m#0@@35| T@U) (|k#0@@24| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1$K@@5) TyType) (= (type Maps._default.MapRemove1$V@@5) TyType)) (= (type $ly@@204) LayerTypeType)) (= (type |m#0@@35|) (MapType BoxType BoxType))) (= (type |k#0@@24|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5 (Lit |m#0@@35|) (Lit |k#0@@24|)) (and ($Is |m#0@@35| (TMap Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5)) ($IsBox |k#0@@24| Maps._default.MapRemove1$K@@5)))) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5 ($LS $ly@@204) (Lit |m#0@@35|) (Lit |k#0@@24|)) (let ((|m'#2| (|Map#Glue| (|lambda#16| Maps._default.MapRemove1$K@@5 (|Map#Domain| |m#0@@35|) |k#0@@24|) (|lambda#13| (|Map#Elements| (Lit |m#0@@35|))) (TMap Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5)))) |m'#2|))) :qid |unknown.0:0| :weight 3 :skolemid |1866| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@5 Maps._default.MapRemove1$V@@5 ($LS $ly@@204) (Lit |m#0@@35|) (Lit |k#0@@24|))) ))))
(assert (forall ((arg0@@270 T@U) (arg1@@144 T@U) (arg2@@95 T@U) (arg3@@65 T@U) (arg4@@46 T@U) ) (! (= (type (Maps.__default.MapRemove1Strong arg0@@270 arg1@@144 arg2@@95 arg3@@65 arg4@@46)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove1Strong| :pattern ( (Maps.__default.MapRemove1Strong arg0@@270 arg1@@144 arg2@@95 arg3@@65 arg4@@46)) )))
(assert (forall ((Maps._default.MapRemove1Strong$K T@U) (Maps._default.MapRemove1Strong$V T@U) ($ly@@205 T@U) (|m#0@@36| T@U) (|k#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K) TyType) (= (type Maps._default.MapRemove1Strong$V) TyType)) (= (type $ly@@205) LayerTypeType)) (= (type |m#0@@36|) (MapType BoxType BoxType))) (= (type |k#0@@25|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@205) |m#0@@36| |k#0@@25|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V $ly@@205 |m#0@@36| |k#0@@25|))) :qid |unknown.0:0| :skolemid |1867| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@205) |m#0@@36| |k#0@@25|)) )))
(assert (forall ((Maps._default.MapRemove1Strong$K@@0 T@U) (Maps._default.MapRemove1Strong$V@@0 T@U) ($ly@@206 T@U) (|m#0@@37| T@U) (|k#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@0) TyType) (= (type Maps._default.MapRemove1Strong$V@@0) TyType)) (= (type $ly@@206) LayerTypeType)) (= (type |m#0@@37|) (MapType BoxType BoxType))) (= (type |k#0@@26|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $ly@@206 |m#0@@37| |k#0@@26|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $LZ |m#0@@37| |k#0@@26|))) :qid |unknown.0:0| :skolemid |1868| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 (AsFuelBottom $ly@@206) |m#0@@37| |k#0@@26|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@1 T@U) (Maps._default.MapRemove1Strong$V@@1 T@U) ($ly@@207 T@U) (|m#0@@38| T@U) (|k#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@1) TyType) (= (type Maps._default.MapRemove1Strong$V@@1) TyType)) (= (type $ly@@207) LayerTypeType)) (= (type |m#0@@38|) (MapType BoxType BoxType))) (= (type |k#0@@27|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 |m#0@@38| |k#0@@27|) (and ($Is |m#0@@38| (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1)) ($IsBox |k#0@@27| Maps._default.MapRemove1Strong$K@@1)))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@207 |m#0@@38| |k#0@@27|)) (|Set#Difference| (|Map#Domain| |m#0@@38|) (|Set#UnionOne| (|Set#Empty| BoxType) |k#0@@27|))) (forall ((|j#0@@9| T@U) ) (!  (=> (and (and (= (type |j#0@@9|) BoxType) ($IsBox |j#0@@9| Maps._default.MapRemove1Strong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@207 |m#0@@38| |k#0@@27|)) |j#0@@9|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@207 |m#0@@38| |k#0@@27|)) |j#0@@9|) (MapType0Select (|Map#Elements| |m#0@@38|) |j#0@@9|))) :qid |Mapssdfy.76:20| :skolemid |1869| :pattern ( (MapType0Select (|Map#Elements| |m#0@@38|) |j#0@@9|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@207 |m#0@@38| |k#0@@27|)) |j#0@@9|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@207 |m#0@@38| |k#0@@27|)) |j#0@@9|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@207 |m#0@@38| |k#0@@27|))) (|Set#Card| (|Map#Domain| |m#0@@38|)))) (<= (|Map#Card| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@207 |m#0@@38| |k#0@@27|)) (|Map#Card| |m#0@@38|))) ($Is (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@207 |m#0@@38| |k#0@@27|) (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1)))) :qid |unknown.0:0| :skolemid |1870| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@207 |m#0@@38| |k#0@@27|)) ))))
(assert (forall ((Maps._default.MapRemove1Strong$K@@2 T@U) (Maps._default.MapRemove1Strong$V@@2 T@U) ($ly@@208 T@U) (|m#0@@39| T@U) (|k#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@2) TyType) (= (type Maps._default.MapRemove1Strong$V@@2) TyType)) (= (type $ly@@208) LayerTypeType)) (= (type |m#0@@39|) (MapType BoxType BoxType))) (= (type |k#0@@28|) BoxType)) (and ($Is |m#0@@39| (TMap Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2)) ($IsBox |k#0@@28| Maps._default.MapRemove1Strong$K@@2))) (and (=> (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@208 |m#0@@39| |k#0@@28|) true) (=> true (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@208 |m#0@@39| |k#0@@28|)))) :qid |unknown.0:0| :skolemid |1871| :pattern ( (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@208 |m#0@@39| |k#0@@28|)) )))
(assert  (and (and (= (type StartFuel_Maps._default.MapRemove1) LayerTypeType) (= (type MoreFuel_Maps._default.MapRemove10) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove1) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@3 T@U) (Maps._default.MapRemove1Strong$V@@3 T@U) ($ly@@209 T@U) (|m#0@@40| T@U) (|k#0@@29| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@3) TyType) (= (type Maps._default.MapRemove1Strong$V@@3) TyType)) (= (type $ly@@209) LayerTypeType)) (= (type |m#0@@40|) (MapType BoxType BoxType))) (= (type |k#0@@29|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@40| |k#0@@29|) (and ($Is |m#0@@40| (TMap Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3)) ($IsBox |k#0@@29| Maps._default.MapRemove1Strong$K@@3)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@40| |k#0@@29|) (and (and (and (= StartFuel_Maps._default.MapRemove1 ($LS MoreFuel_Maps._default.MapRemove10)) (= StartFuelAssert_Maps._default.MapRemove1 ($LS ($LS MoreFuel_Maps._default.MapRemove10)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove10) MoreFuel_Maps._default.MapRemove10)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@209) |m#0@@40| |k#0@@29|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 StartFuel_Maps._default.MapRemove1 |m#0@@40| |k#0@@29|))))) :qid |unknown.0:0| :skolemid |1872| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@209) |m#0@@40| |k#0@@29|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove11) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@4 T@U) (Maps._default.MapRemove1Strong$V@@4 T@U) ($ly@@210 T@U) (|m#0@@41| T@U) (|k#0@@30| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@4) TyType) (= (type Maps._default.MapRemove1Strong$V@@4) TyType)) (= (type $ly@@210) LayerTypeType)) (= (type |m#0@@41|) (MapType BoxType BoxType))) (= (type |k#0@@30|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@41|) |k#0@@30|) (and ($Is |m#0@@41| (TMap Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4)) ($IsBox |k#0@@30| Maps._default.MapRemove1Strong$K@@4)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@41|) |k#0@@30|) (and (and (and (= StartFuel_Maps._default.MapRemove1 ($LS MoreFuel_Maps._default.MapRemove11)) (= StartFuelAssert_Maps._default.MapRemove1 ($LS ($LS MoreFuel_Maps._default.MapRemove11)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove11) MoreFuel_Maps._default.MapRemove11)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@210) (Lit |m#0@@41|) |k#0@@30|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 StartFuel_Maps._default.MapRemove1 (Lit |m#0@@41|) |k#0@@30|))))) :qid |unknown.0:0| :weight 3 :skolemid |1873| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@210) (Lit |m#0@@41|) |k#0@@30|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove12) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@5 T@U) (Maps._default.MapRemove1Strong$V@@5 T@U) ($ly@@211 T@U) (|m#0@@42| T@U) (|k#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@5) TyType) (= (type Maps._default.MapRemove1Strong$V@@5) TyType)) (= (type $ly@@211) LayerTypeType)) (= (type |m#0@@42|) (MapType BoxType BoxType))) (= (type |k#0@@31|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@42|) (Lit |k#0@@31|)) (and ($Is |m#0@@42| (TMap Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5)) ($IsBox |k#0@@31| Maps._default.MapRemove1Strong$K@@5)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@42|) (Lit |k#0@@31|)) (and (and (and (= StartFuel_Maps._default.MapRemove1 ($LS MoreFuel_Maps._default.MapRemove12)) (= StartFuelAssert_Maps._default.MapRemove1 ($LS ($LS MoreFuel_Maps._default.MapRemove12)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove12) MoreFuel_Maps._default.MapRemove12)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@211) (Lit |m#0@@42|) (Lit |k#0@@31|)) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 StartFuel_Maps._default.MapRemove1 (Lit |m#0@@42|) (Lit |k#0@@31|)))))) :qid |unknown.0:0| :weight 3 :skolemid |1874| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@211) (Lit |m#0@@42|) (Lit |k#0@@31|))) ))))
(assert (forall ((arg0@@271 T@U) (arg1@@145 T@U) (arg2@@96 T@U) (arg3@@66 T@U) (arg4@@47 T@U) ) (! (= (type (Maps.__default.IMapRemove arg0@@271 arg1@@145 arg2@@96 arg3@@66 arg4@@47)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRemove| :pattern ( (Maps.__default.IMapRemove arg0@@271 arg1@@145 arg2@@96 arg3@@66 arg4@@47)) )))
(assert (forall ((Maps._default.IMapRemove$K T@U) (Maps._default.IMapRemove$V T@U) ($ly@@212 T@U) (|m#0@@43| T@U) (|ks#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K) TyType) (= (type Maps._default.IMapRemove$V) TyType)) (= (type $ly@@212) LayerTypeType)) (= (type |m#0@@43|) (IMapType BoxType BoxType))) (= (type |ks#0@@11|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@212) |m#0@@43| |ks#0@@11|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V $ly@@212 |m#0@@43| |ks#0@@11|))) :qid |unknown.0:0| :skolemid |1875| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@212) |m#0@@43| |ks#0@@11|)) )))
(assert (forall ((Maps._default.IMapRemove$K@@0 T@U) (Maps._default.IMapRemove$V@@0 T@U) ($ly@@213 T@U) (|m#0@@44| T@U) (|ks#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K@@0) TyType) (= (type Maps._default.IMapRemove$V@@0) TyType)) (= (type $ly@@213) LayerTypeType)) (= (type |m#0@@44|) (IMapType BoxType BoxType))) (= (type |ks#0@@12|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $ly@@213 |m#0@@44| |ks#0@@12|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $LZ |m#0@@44| |ks#0@@12|))) :qid |unknown.0:0| :skolemid |1876| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 (AsFuelBottom $ly@@213) |m#0@@44| |ks#0@@12|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@1 T@U) (Maps._default.IMapRemove$V@@1 T@U) ($ly@@214 T@U) (|m#0@@45| T@U) (|ks#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@1) TyType) (= (type Maps._default.IMapRemove$V@@1) TyType)) (= (type $ly@@214) LayerTypeType)) (= (type |m#0@@45|) (IMapType BoxType BoxType))) (= (type |ks#0@@13|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 |m#0@@45| |ks#0@@13|) (and ($Is |m#0@@45| (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1)) ($Is |ks#0@@13| (TISet Maps._default.IMapRemove$K@@1))))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@214 |m#0@@45| |ks#0@@13|)) (|ISet#Difference| (|IMap#Domain| |m#0@@45|) |ks#0@@13|)) (forall ((|j#0@@10| T@U) ) (!  (=> (and (and (= (type |j#0@@10|) BoxType) ($IsBox |j#0@@10| Maps._default.IMapRemove$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@214 |m#0@@45| |ks#0@@13|)) |j#0@@10|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@214 |m#0@@45| |ks#0@@13|)) |j#0@@10|) (MapType0Select (|IMap#Elements| |m#0@@45|) |j#0@@10|))) :qid |Mapssdfy.86:20| :skolemid |1877| :pattern ( (MapType0Select (|IMap#Elements| |m#0@@45|) |j#0@@10|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@214 |m#0@@45| |ks#0@@13|)) |j#0@@10|)) :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@214 |m#0@@45| |ks#0@@13|)) |j#0@@10|)) ))) ($Is (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@214 |m#0@@45| |ks#0@@13|) (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1)))) :qid |unknown.0:0| :skolemid |1878| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@214 |m#0@@45| |ks#0@@13|)) ))))
(assert (forall ((Maps._default.IMapRemove$K@@2 T@U) (Maps._default.IMapRemove$V@@2 T@U) ($ly@@215 T@U) (|m#0@@46| T@U) (|ks#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@2) TyType) (= (type Maps._default.IMapRemove$V@@2) TyType)) (= (type $ly@@215) LayerTypeType)) (= (type |m#0@@46|) (IMapType BoxType BoxType))) (= (type |ks#0@@14|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@46| (TIMap Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2)) ($Is |ks#0@@14| (TISet Maps._default.IMapRemove$K@@2)))) (and (=> (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@215 |m#0@@46| |ks#0@@14|) true) (=> true (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@215 |m#0@@46| |ks#0@@14|)))) :qid |unknown.0:0| :skolemid |1879| :pattern ( (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@215 |m#0@@46| |ks#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@3 T@U) (Maps._default.IMapRemove$V@@3 T@U) ($ly@@216 T@U) (|m#0@@47| T@U) (|ks#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@3) TyType) (= (type Maps._default.IMapRemove$V@@3) TyType)) (= (type $ly@@216) LayerTypeType)) (= (type |m#0@@47|) (IMapType BoxType BoxType))) (= (type |ks#0@@15|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 |m#0@@47| |ks#0@@15|) (and ($Is |m#0@@47| (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3)) ($Is |ks#0@@15| (TISet Maps._default.IMapRemove$K@@3))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@216) |m#0@@47| |ks#0@@15|) (|IMap#Glue| (|lambda#12| Maps._default.IMapRemove$K@@3 (|IMap#Domain| |m#0@@47|) |ks#0@@15|) (|lambda#13| (|IMap#Elements| |m#0@@47|)) (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3)))) :qid |unknown.0:0| :skolemid |1880| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@216) |m#0@@47| |ks#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@4 T@U) (Maps._default.IMapRemove$V@@4 T@U) ($ly@@217 T@U) (|m#0@@48| T@U) (|ks#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@4) TyType) (= (type Maps._default.IMapRemove$V@@4) TyType)) (= (type $ly@@217) LayerTypeType)) (= (type |m#0@@48|) (IMapType BoxType BoxType))) (= (type |ks#0@@16|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 (Lit |m#0@@48|) (Lit |ks#0@@16|)) (and ($Is |m#0@@48| (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4)) ($Is |ks#0@@16| (TISet Maps._default.IMapRemove$K@@4))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@217) (Lit |m#0@@48|) (Lit |ks#0@@16|)) (|IMap#Glue| (|lambda#12| Maps._default.IMapRemove$K@@4 (|IMap#Domain| |m#0@@48|) (Lit |ks#0@@16|)) (|lambda#13| (|IMap#Elements| (Lit |m#0@@48|))) (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |1881| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@217) (Lit |m#0@@48|) (Lit |ks#0@@16|))) ))))
(assert (forall ((arg0@@272 T@U) (arg1@@146 T@U) (arg2@@97 T@U) (arg3@@67 T@U) (arg4@@48 T@U) ) (! (= (type (Maps.__default.IMapRemove1 arg0@@272 arg1@@146 arg2@@97 arg3@@67 arg4@@48)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRemove1| :pattern ( (Maps.__default.IMapRemove1 arg0@@272 arg1@@146 arg2@@97 arg3@@67 arg4@@48)) )))
(assert (forall ((Maps._default.IMapRemove1$K T@U) (Maps._default.IMapRemove1$V T@U) ($ly@@218 T@U) (|m#0@@49| T@U) (|k#0@@32| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K) TyType) (= (type Maps._default.IMapRemove1$V) TyType)) (= (type $ly@@218) LayerTypeType)) (= (type |m#0@@49|) (IMapType BoxType BoxType))) (= (type |k#0@@32|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@218) |m#0@@49| |k#0@@32|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V $ly@@218 |m#0@@49| |k#0@@32|))) :qid |unknown.0:0| :skolemid |1882| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@218) |m#0@@49| |k#0@@32|)) )))
(assert (forall ((Maps._default.IMapRemove1$K@@0 T@U) (Maps._default.IMapRemove1$V@@0 T@U) ($ly@@219 T@U) (|m#0@@50| T@U) (|k#0@@33| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K@@0) TyType) (= (type Maps._default.IMapRemove1$V@@0) TyType)) (= (type $ly@@219) LayerTypeType)) (= (type |m#0@@50|) (IMapType BoxType BoxType))) (= (type |k#0@@33|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $ly@@219 |m#0@@50| |k#0@@33|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $LZ |m#0@@50| |k#0@@33|))) :qid |unknown.0:0| :skolemid |1883| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 (AsFuelBottom $ly@@219) |m#0@@50| |k#0@@33|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@1 T@U) (Maps._default.IMapRemove1$V@@1 T@U) ($ly@@220 T@U) (|m#0@@51| T@U) (|k#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@1) TyType) (= (type Maps._default.IMapRemove1$V@@1) TyType)) (= (type $ly@@220) LayerTypeType)) (= (type |m#0@@51|) (IMapType BoxType BoxType))) (= (type |k#0@@34|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 |m#0@@51| |k#0@@34|) (and ($Is |m#0@@51| (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1)) ($IsBox |k#0@@34| Maps._default.IMapRemove1$K@@1)))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@220 |m#0@@51| |k#0@@34|)) (|ISet#Difference| (|IMap#Domain| |m#0@@51|) (|ISet#UnionOne| (|ISet#Empty| BoxType) |k#0@@34|))) (forall ((|j#0@@11| T@U) ) (!  (=> (and (and (= (type |j#0@@11|) BoxType) ($IsBox |j#0@@11| Maps._default.IMapRemove1$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@220 |m#0@@51| |k#0@@34|)) |j#0@@11|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@220 |m#0@@51| |k#0@@34|)) |j#0@@11|) (MapType0Select (|IMap#Elements| |m#0@@51|) |j#0@@11|))) :qid |Mapssdfy.93:20| :skolemid |1884| :pattern ( (MapType0Select (|IMap#Elements| |m#0@@51|) |j#0@@11|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@220 |m#0@@51| |k#0@@34|)) |j#0@@11|)) :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@220 |m#0@@51| |k#0@@34|)) |j#0@@11|)) ))) ($Is (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@220 |m#0@@51| |k#0@@34|) (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |1885| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@220 |m#0@@51| |k#0@@34|)) ))))
(assert (forall ((Maps._default.IMapRemove1$K@@2 T@U) (Maps._default.IMapRemove1$V@@2 T@U) ($ly@@221 T@U) (|m#0@@52| T@U) (|k#0@@35| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@2) TyType) (= (type Maps._default.IMapRemove1$V@@2) TyType)) (= (type $ly@@221) LayerTypeType)) (= (type |m#0@@52|) (IMapType BoxType BoxType))) (= (type |k#0@@35|) BoxType)) (and ($Is |m#0@@52| (TIMap Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2)) ($IsBox |k#0@@35| Maps._default.IMapRemove1$K@@2))) (and (=> (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@221 |m#0@@52| |k#0@@35|) true) (=> true (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@221 |m#0@@52| |k#0@@35|)))) :qid |unknown.0:0| :skolemid |1886| :pattern ( (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@221 |m#0@@52| |k#0@@35|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@3 T@U) (Maps._default.IMapRemove1$V@@3 T@U) ($ly@@222 T@U) (|m#0@@53| T@U) (|k#0@@36| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@3) TyType) (= (type Maps._default.IMapRemove1$V@@3) TyType)) (= (type $ly@@222) LayerTypeType)) (= (type |m#0@@53|) (IMapType BoxType BoxType))) (= (type |k#0@@36|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 |m#0@@53| |k#0@@36|) (and ($Is |m#0@@53| (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3)) ($IsBox |k#0@@36| Maps._default.IMapRemove1$K@@3)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@222) |m#0@@53| |k#0@@36|) (|IMap#Glue| (|lambda#16| Maps._default.IMapRemove1$K@@3 (|IMap#Domain| |m#0@@53|) |k#0@@36|) (|lambda#13| (|IMap#Elements| |m#0@@53|)) (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3)))) :qid |unknown.0:0| :skolemid |1887| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@222) |m#0@@53| |k#0@@36|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@4 T@U) (Maps._default.IMapRemove1$V@@4 T@U) ($ly@@223 T@U) (|m#0@@54| T@U) (|k#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@4) TyType) (= (type Maps._default.IMapRemove1$V@@4) TyType)) (= (type $ly@@223) LayerTypeType)) (= (type |m#0@@54|) (IMapType BoxType BoxType))) (= (type |k#0@@37|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 (Lit |m#0@@54|) (Lit |k#0@@37|)) (and ($Is |m#0@@54| (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4)) ($IsBox |k#0@@37| Maps._default.IMapRemove1$K@@4)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@223) (Lit |m#0@@54|) (Lit |k#0@@37|)) (|IMap#Glue| (|lambda#16| Maps._default.IMapRemove1$K@@4 (|IMap#Domain| |m#0@@54|) |k#0@@37|) (|lambda#13| (|IMap#Elements| (Lit |m#0@@54|))) (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |1888| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@223) (Lit |m#0@@54|) (Lit |k#0@@37|))) ))))
(assert (forall ((arg0@@273 T@U) (arg1@@147 T@U) (arg2@@98 T@U) (arg3@@68 T@U) ) (! (= (type (Maps.__default.MapRestrict arg0@@273 arg1@@147 arg2@@98 arg3@@68)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRestrict| :pattern ( (Maps.__default.MapRestrict arg0@@273 arg1@@147 arg2@@98 arg3@@68)) )))
(assert  (=> true (forall ((Maps._default.MapRestrict$K T@U) (Maps._default.MapRestrict$V T@U) (|m#0@@55| T@U) (|ks#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K) TyType) (= (type Maps._default.MapRestrict$V) TyType)) (= (type |m#0@@55|) (MapType BoxType BoxType))) (= (type |ks#0@@17|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@55| |ks#0@@17|) (and ($Is |m#0@@55| (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V)) ($Is |ks#0@@17| (TSet Maps._default.MapRestrict$K))))) ($Is (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@55| |ks#0@@17|) (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V))) :qid |unknown.0:0| :skolemid |1889| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@55| |ks#0@@17|)) ))))
(assert (forall ((Maps._default.MapRestrict$K@@0 T@U) (Maps._default.MapRestrict$V@@0 T@U) (|m#0@@56| T@U) (|ks#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@0) TyType) (= (type Maps._default.MapRestrict$V@@0) TyType)) (= (type |m#0@@56|) (MapType BoxType BoxType))) (= (type |ks#0@@18|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@56| (TMap Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0)) ($Is |ks#0@@18| (TSet Maps._default.MapRestrict$K@@0)))) (and (=> (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@56| |ks#0@@18|) true) (=> true (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@56| |ks#0@@18|)))) :qid |unknown.0:0| :skolemid |1890| :pattern ( (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@56| |ks#0@@18|)) )))
(assert (forall ((arg0@@274 T@U) (arg1@@148 T@U) (arg2@@99 T@U) ) (! (= (type (|lambda#30| arg0@@274 arg1@@148 arg2@@99)) (MapType0Type BoxType boolType)) :qid |funType:lambda#30| :pattern ( (|lambda#30| arg0@@274 arg1@@148 arg2@@99)) )))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@1 T@U) (Maps._default.MapRestrict$V@@1 T@U) (|m#0@@57| T@U) (|ks#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@1) TyType) (= (type Maps._default.MapRestrict$V@@1) TyType)) (= (type |m#0@@57|) (MapType BoxType BoxType))) (= (type |ks#0@@19|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@57| |ks#0@@19|) (and ($Is |m#0@@57| (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1)) ($Is |ks#0@@19| (TSet Maps._default.MapRestrict$K@@1))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@57| |ks#0@@19|) (|Map#Glue| (|lambda#30| Maps._default.MapRestrict$K@@1 |ks#0@@19| (|Map#Domain| |m#0@@57|)) (|lambda#13| (|Map#Elements| |m#0@@57|)) (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |1891| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@57| |ks#0@@19|)) ))))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@2 T@U) (Maps._default.MapRestrict$V@@2 T@U) (|m#0@@58| T@U) (|ks#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@2) TyType) (= (type Maps._default.MapRestrict$V@@2) TyType)) (= (type |m#0@@58|) (MapType BoxType BoxType))) (= (type |ks#0@@20|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@58|) (Lit |ks#0@@20|)) (and ($Is |m#0@@58| (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2)) ($Is |ks#0@@20| (TSet Maps._default.MapRestrict$K@@2))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@58|) (Lit |ks#0@@20|)) (|Map#Glue| (|lambda#30| Maps._default.MapRestrict$K@@2 (Lit |ks#0@@20|) (|Map#Domain| |m#0@@58|)) (|lambda#13| (|Map#Elements| (Lit |m#0@@58|))) (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |1892| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@58|) (Lit |ks#0@@20|))) ))))
(assert (forall ((arg0@@275 T@U) (arg1@@149 T@U) (arg2@@100 T@U) (arg3@@69 T@U) ) (! (= (type (Maps.__default.MapIRestrict arg0@@275 arg1@@149 arg2@@100 arg3@@69)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapIRestrict| :pattern ( (Maps.__default.MapIRestrict arg0@@275 arg1@@149 arg2@@100 arg3@@69)) )))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K T@U) (Maps._default.MapIRestrict$V T@U) (|m#0@@59| T@U) (|ks#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K) TyType) (= (type Maps._default.MapIRestrict$V) TyType)) (= (type |m#0@@59|) (MapType BoxType BoxType))) (= (type |ks#0@@21|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@59| |ks#0@@21|) (and ($Is |m#0@@59| (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V)) ($Is |ks#0@@21| (TISet Maps._default.MapIRestrict$K))))) ($Is (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@59| |ks#0@@21|) (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V))) :qid |unknown.0:0| :skolemid |1893| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@59| |ks#0@@21|)) ))))
(assert (forall ((Maps._default.MapIRestrict$K@@0 T@U) (Maps._default.MapIRestrict$V@@0 T@U) (|m#0@@60| T@U) (|ks#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@0) TyType) (= (type Maps._default.MapIRestrict$V@@0) TyType)) (= (type |m#0@@60|) (MapType BoxType BoxType))) (= (type |ks#0@@22|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@60| (TMap Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0)) ($Is |ks#0@@22| (TISet Maps._default.MapIRestrict$K@@0)))) (and (=> (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@60| |ks#0@@22|) true) (=> true (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@60| |ks#0@@22|)))) :qid |unknown.0:0| :skolemid |1894| :pattern ( (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@60| |ks#0@@22|)) )))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@1 T@U) (Maps._default.MapIRestrict$V@@1 T@U) (|m#0@@61| T@U) (|ks#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@1) TyType) (= (type Maps._default.MapIRestrict$V@@1) TyType)) (= (type |m#0@@61|) (MapType BoxType BoxType))) (= (type |ks#0@@23|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@61| |ks#0@@23|) (and ($Is |m#0@@61| (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1)) ($Is |ks#0@@23| (TISet Maps._default.MapIRestrict$K@@1))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@61| |ks#0@@23|) (|Map#Glue| (|lambda#30| Maps._default.MapIRestrict$K@@1 (|Map#Domain| |m#0@@61|) |ks#0@@23|) (|lambda#13| (|Map#Elements| |m#0@@61|)) (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |1895| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@61| |ks#0@@23|)) ))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@2 T@U) (Maps._default.MapIRestrict$V@@2 T@U) (|m#0@@62| T@U) (|ks#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@2) TyType) (= (type Maps._default.MapIRestrict$V@@2) TyType)) (= (type |m#0@@62|) (MapType BoxType BoxType))) (= (type |ks#0@@24|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@62|) |ks#0@@24|) (and ($Is |m#0@@62| (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2)) ($Is |ks#0@@24| (TISet Maps._default.MapIRestrict$K@@2))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@62|) |ks#0@@24|) (|Map#Glue| (|lambda#30| Maps._default.MapIRestrict$K@@2 (|Map#Domain| |m#0@@62|) |ks#0@@24|) (|lambda#13| (|Map#Elements| (Lit |m#0@@62|))) (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |1896| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@62|) |ks#0@@24|)) ))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@3 T@U) (Maps._default.MapIRestrict$V@@3 T@U) (|m#0@@63| T@U) (|ks#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@3) TyType) (= (type Maps._default.MapIRestrict$V@@3) TyType)) (= (type |m#0@@63|) (MapType BoxType BoxType))) (= (type |ks#0@@25|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@63|) (Lit |ks#0@@25|)) (and ($Is |m#0@@63| (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3)) ($Is |ks#0@@25| (TISet Maps._default.MapIRestrict$K@@3))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@63|) (Lit |ks#0@@25|)) (|Map#Glue| (|lambda#30| Maps._default.MapIRestrict$K@@3 (|Map#Domain| |m#0@@63|) (Lit |ks#0@@25|)) (|lambda#13| (|Map#Elements| (Lit |m#0@@63|))) (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3)))) :qid |unknown.0:0| :weight 3 :skolemid |1897| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@63|) (Lit |ks#0@@25|))) ))))
(assert (forall ((arg0@@276 T@U) (arg1@@150 T@U) (arg2@@101 T@U) (arg3@@70 T@U) ) (! (= (type (Maps.__default.IMapRestrict arg0@@276 arg1@@150 arg2@@101 arg3@@70)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRestrict| :pattern ( (Maps.__default.IMapRestrict arg0@@276 arg1@@150 arg2@@101 arg3@@70)) )))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K T@U) (Maps._default.IMapRestrict$V T@U) (|m#0@@64| T@U) (|ks#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K) TyType) (= (type Maps._default.IMapRestrict$V) TyType)) (= (type |m#0@@64|) (IMapType BoxType BoxType))) (= (type |ks#0@@26|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@64| |ks#0@@26|) (and ($Is |m#0@@64| (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V)) ($Is |ks#0@@26| (TISet Maps._default.IMapRestrict$K))))) ($Is (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@64| |ks#0@@26|) (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V))) :qid |unknown.0:0| :skolemid |1898| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@64| |ks#0@@26|)) ))))
(assert (forall ((Maps._default.IMapRestrict$K@@0 T@U) (Maps._default.IMapRestrict$V@@0 T@U) (|m#0@@65| T@U) (|ks#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@0) TyType) (= (type Maps._default.IMapRestrict$V@@0) TyType)) (= (type |m#0@@65|) (IMapType BoxType BoxType))) (= (type |ks#0@@27|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@65| (TIMap Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0)) ($Is |ks#0@@27| (TISet Maps._default.IMapRestrict$K@@0)))) (and (=> (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@65| |ks#0@@27|) true) (=> true (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@65| |ks#0@@27|)))) :qid |unknown.0:0| :skolemid |1899| :pattern ( (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@65| |ks#0@@27|)) )))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@1 T@U) (Maps._default.IMapRestrict$V@@1 T@U) (|m#0@@66| T@U) (|ks#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@1) TyType) (= (type Maps._default.IMapRestrict$V@@1) TyType)) (= (type |m#0@@66|) (IMapType BoxType BoxType))) (= (type |ks#0@@28|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@66| |ks#0@@28|) (and ($Is |m#0@@66| (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1)) ($Is |ks#0@@28| (TISet Maps._default.IMapRestrict$K@@1))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@66| |ks#0@@28|) (|IMap#Glue| (|lambda#30| Maps._default.IMapRestrict$K@@1 |ks#0@@28| (|IMap#Domain| |m#0@@66|)) (|lambda#13| (|IMap#Elements| |m#0@@66|)) (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |1900| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@66| |ks#0@@28|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@2 T@U) (Maps._default.IMapRestrict$V@@2 T@U) (|m#0@@67| T@U) (|ks#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@2) TyType) (= (type Maps._default.IMapRestrict$V@@2) TyType)) (= (type |m#0@@67|) (IMapType BoxType BoxType))) (= (type |ks#0@@29|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@67|) (Lit |ks#0@@29|)) (and ($Is |m#0@@67| (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2)) ($Is |ks#0@@29| (TISet Maps._default.IMapRestrict$K@@2))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@67|) (Lit |ks#0@@29|)) (|IMap#Glue| (|lambda#30| Maps._default.IMapRestrict$K@@2 (Lit |ks#0@@29|) (|IMap#Domain| |m#0@@67|)) (|lambda#13| (|IMap#Elements| (Lit |m#0@@67|))) (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |1901| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@67|) (Lit |ks#0@@29|))) ))))
(assert (forall ((arg0@@277 T@U) (arg1@@151 T@U) (arg2@@102 T@U) (arg3@@71 T@U) (arg4@@49 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion arg0@@277 arg1@@151 arg2@@102 arg3@@71 arg4@@49)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapDisjointUnion| :pattern ( (Maps.__default.MapDisjointUnion arg0@@277 arg1@@151 arg2@@102 arg3@@71 arg4@@49)) )))
(assert (forall ((Maps._default.MapDisjointUnion$U T@U) (Maps._default.MapDisjointUnion$T T@U) ($ly@@224 T@U) (|mapa#0| T@U) (|mapb#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U) TyType) (= (type Maps._default.MapDisjointUnion$T) TyType)) (= (type $ly@@224) LayerTypeType)) (= (type |mapa#0|) (MapType BoxType BoxType))) (= (type |mapb#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@224) |mapa#0| |mapb#0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T $ly@@224 |mapa#0| |mapb#0|))) :qid |unknown.0:0| :skolemid |1902| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@224) |mapa#0| |mapb#0|)) )))
(assert (forall ((Maps._default.MapDisjointUnion$U@@0 T@U) (Maps._default.MapDisjointUnion$T@@0 T@U) ($ly@@225 T@U) (|mapa#0@@0| T@U) (|mapb#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@0) TyType) (= (type Maps._default.MapDisjointUnion$T@@0) TyType)) (= (type $ly@@225) LayerTypeType)) (= (type |mapa#0@@0|) (MapType BoxType BoxType))) (= (type |mapb#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $ly@@225 |mapa#0@@0| |mapb#0@@0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $LZ |mapa#0@@0| |mapb#0@@0|))) :qid |unknown.0:0| :skolemid |1903| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 (AsFuelBottom $ly@@225) |mapa#0@@0| |mapb#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@1 T@U) (Maps._default.MapDisjointUnion$T@@1 T@U) ($ly@@226 T@U) (|mapa#0@@1| T@U) (|mapb#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@1) TyType) (= (type Maps._default.MapDisjointUnion$T@@1) TyType)) (= (type $ly@@226) LayerTypeType)) (= (type |mapa#0@@1|) (MapType BoxType BoxType))) (= (type |mapb#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 |mapa#0@@1| |mapb#0@@1|) (and (and ($Is |mapa#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)) ($Is |mapb#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))))) (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@226 |mapa#0@@1| |mapb#0@@1|)) (|Set#Union| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))) (forall ((|k#0@@38| T@U) ) (!  (=> (and (and (= (type |k#0@@38|) BoxType) ($IsBox |k#0@@38| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#0@@38|))) (= (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#0@@38|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@226 |mapa#0@@1| |mapb#0@@1|)) |k#0@@38|))) :qid |Mapssdfy.114:18| :skolemid |1904| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@226 |mapa#0@@1| |mapb#0@@1|)) |k#0@@38|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#0@@38|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#0@@38|)) ))) (forall ((|k#1@@0| T@U) ) (!  (=> (and (and (= (type |k#1@@0|) BoxType) ($IsBox |k#1@@0| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#1@@0|))) (= (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#1@@0|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@226 |mapa#0@@1| |mapb#0@@1|)) |k#1@@0|))) :qid |Mapssdfy.115:18| :skolemid |1905| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@226 |mapa#0@@1| |mapb#0@@1|)) |k#1@@0|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#1@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#1@@0|)) ))) ($Is (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@226 |mapa#0@@1| |mapb#0@@1|) (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)))) :qid |unknown.0:0| :skolemid |1906| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@226 |mapa#0@@1| |mapb#0@@1|)) ))))
(assert (forall ((Maps._default.MapDisjointUnion$U@@2 T@U) (Maps._default.MapDisjointUnion$T@@2 T@U) ($ly@@227 T@U) (|mapa#0@@2| T@U) (|mapb#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@2) TyType) (= (type Maps._default.MapDisjointUnion$T@@2) TyType)) (= (type $ly@@227) LayerTypeType)) (= (type |mapa#0@@2|) (MapType BoxType BoxType))) (= (type |mapb#0@@2|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)) ($Is |mapb#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)))) (and (=> (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@227 |mapa#0@@2| |mapb#0@@2|) (|Set#Disjoint| (|Map#Domain| |mapa#0@@2|) (|Map#Domain| |mapb#0@@2|))) (=> (|Set#Disjoint| (|Map#Domain| |mapa#0@@2|) (|Map#Domain| |mapb#0@@2|)) (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@227 |mapa#0@@2| |mapb#0@@2|)))) :qid |unknown.0:0| :skolemid |1907| :pattern ( (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@227 |mapa#0@@2| |mapb#0@@2|)) )))
(assert  (and (forall ((arg0@@278 T@U) (arg1@@152 T@U) (arg2@@103 T@U) ) (! (= (type (|lambda#44| arg0@@278 arg1@@152 arg2@@103)) (MapType0Type BoxType boolType)) :qid |funType:lambda#44| :pattern ( (|lambda#44| arg0@@278 arg1@@152 arg2@@103)) )) (forall ((arg0@@279 T@U) (arg1@@153 T@U) (arg2@@104 T@U) ) (! (= (type (|lambda#45| arg0@@279 arg1@@153 arg2@@104)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#45| :pattern ( (|lambda#45| arg0@@279 arg1@@153 arg2@@104)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@3 T@U) (Maps._default.MapDisjointUnion$T@@3 T@U) ($ly@@228 T@U) (|mapa#0@@3| T@U) (|mapb#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@3) TyType) (= (type Maps._default.MapDisjointUnion$T@@3) TyType)) (= (type $ly@@228) LayerTypeType)) (= (type |mapa#0@@3|) (MapType BoxType BoxType))) (= (type |mapb#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 |mapa#0@@3| |mapb#0@@3|) (and (and ($Is |mapa#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3)) ($Is |mapb#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@228) |mapa#0@@3| |mapb#0@@3|) (|Map#Glue| (|lambda#44| Maps._default.MapDisjointUnion$U@@3 (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|)) (|lambda#45| (|Map#Domain| |mapa#0@@3|) (|Map#Elements| |mapa#0@@3|) (|Map#Elements| |mapb#0@@3|)) (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3)))) :qid |unknown.0:0| :skolemid |1908| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@228) |mapa#0@@3| |mapb#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@4 T@U) (Maps._default.MapDisjointUnion$T@@4 T@U) ($ly@@229 T@U) (|mapa#0@@4| T@U) (|mapb#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@4) TyType) (= (type Maps._default.MapDisjointUnion$T@@4) TyType)) (= (type $ly@@229) LayerTypeType)) (= (type |mapa#0@@4|) (MapType BoxType BoxType))) (= (type |mapb#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (and (and ($Is |mapa#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4)) ($Is |mapb#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@4|)) (|Map#Domain| (Lit |mapb#0@@4|)))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@229) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (|Map#Glue| (|lambda#44| Maps._default.MapDisjointUnion$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@4|))) (Lit (|Map#Domain| (Lit |mapb#0@@4|)))) (|lambda#45| (|Map#Domain| |mapa#0@@4|) (|Map#Elements| (Lit |mapa#0@@4|)) (|Map#Elements| (Lit |mapb#0@@4|))) (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |1909| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@229) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|))) ))))
(assert (forall ((arg0@@280 T@U) (arg1@@154 T@U) (arg2@@105 T@U) (arg3@@72 T@U) (arg4@@50 T@U) ) (! (= (type (Maps.__default.MapUnionPreferA arg0@@280 arg1@@154 arg2@@105 arg3@@72 arg4@@50)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnionPreferA| :pattern ( (Maps.__default.MapUnionPreferA arg0@@280 arg1@@154 arg2@@105 arg3@@72 arg4@@50)) )))
(assert (forall ((Maps._default.MapUnionPreferA$U T@U) (Maps._default.MapUnionPreferA$T T@U) ($ly@@230 T@U) (|mapa#0@@5| T@U) (|mapb#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U) TyType) (= (type Maps._default.MapUnionPreferA$T) TyType)) (= (type $ly@@230) LayerTypeType)) (= (type |mapa#0@@5|) (MapType BoxType BoxType))) (= (type |mapb#0@@5|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@230) |mapa#0@@5| |mapb#0@@5|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T $ly@@230 |mapa#0@@5| |mapb#0@@5|))) :qid |unknown.0:0| :skolemid |1910| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@230) |mapa#0@@5| |mapb#0@@5|)) )))
(assert (forall ((Maps._default.MapUnionPreferA$U@@0 T@U) (Maps._default.MapUnionPreferA$T@@0 T@U) ($ly@@231 T@U) (|mapa#0@@6| T@U) (|mapb#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@0) TyType) (= (type Maps._default.MapUnionPreferA$T@@0) TyType)) (= (type $ly@@231) LayerTypeType)) (= (type |mapa#0@@6|) (MapType BoxType BoxType))) (= (type |mapb#0@@6|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $ly@@231 |mapa#0@@6| |mapb#0@@6|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $LZ |mapa#0@@6| |mapb#0@@6|))) :qid |unknown.0:0| :skolemid |1911| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 (AsFuelBottom $ly@@231) |mapa#0@@6| |mapb#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@1 T@U) (Maps._default.MapUnionPreferA$T@@1 T@U) ($ly@@232 T@U) (|mapa#0@@7| T@U) (|mapb#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@1) TyType) (= (type Maps._default.MapUnionPreferA$T@@1) TyType)) (= (type $ly@@232) LayerTypeType)) (= (type |mapa#0@@7|) (MapType BoxType BoxType))) (= (type |mapb#0@@7|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 |mapa#0@@7| |mapb#0@@7|) (and ($Is |mapa#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1)) ($Is |mapb#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@232 |mapa#0@@7| |mapb#0@@7|)) (|Set#Union| (|Map#Domain| |mapa#0@@7|) (|Map#Domain| |mapb#0@@7|))) (forall ((|k#0@@39| T@U) ) (!  (=> (and (and (= (type |k#0@@39|) BoxType) ($IsBox |k#0@@39| Maps._default.MapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#0@@39|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@232 |mapa#0@@7| |mapb#0@@7|)) |k#0@@39|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#0@@39|))) :qid |Mapssdfy.124:20| :skolemid |1912| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#0@@39|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@232 |mapa#0@@7| |mapb#0@@7|)) |k#0@@39|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#0@@39|)) ))) (forall ((|k#1@@1| T@U) ) (!  (=> (and (and (= (type |k#1@@1|) BoxType) ($IsBox |k#1@@1| Maps._default.MapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#1@@1|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#1@@1|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@232 |mapa#0@@7| |mapb#0@@7|)) |k#1@@1|) (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#1@@1|))) :qid |Mapssdfy.125:20| :skolemid |1913| :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#1@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@232 |mapa#0@@7| |mapb#0@@7|)) |k#1@@1|)) ))) (forall ((|k#2| T@U) ) (!  (=> (and (and (= (type |k#2|) BoxType) ($IsBox |k#2| Maps._default.MapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#2|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#2|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@232 |mapa#0@@7| |mapb#0@@7|)) |k#2|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#2|))) :qid |Mapssdfy.126:20| :skolemid |1914| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#2|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@232 |mapa#0@@7| |mapb#0@@7|)) |k#2|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#2|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#2|)) ))) ($Is (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@232 |mapa#0@@7| |mapb#0@@7|) (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1)))) :qid |unknown.0:0| :skolemid |1915| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@232 |mapa#0@@7| |mapb#0@@7|)) ))))
(assert (forall ((Maps._default.MapUnionPreferA$U@@2 T@U) (Maps._default.MapUnionPreferA$T@@2 T@U) ($ly@@233 T@U) (|mapa#0@@8| T@U) (|mapb#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@2) TyType) (= (type Maps._default.MapUnionPreferA$T@@2) TyType)) (= (type $ly@@233) LayerTypeType)) (= (type |mapa#0@@8|) (MapType BoxType BoxType))) (= (type |mapb#0@@8|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)) ($Is |mapb#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)))) (and (=> (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@233 |mapa#0@@8| |mapb#0@@8|) true) (=> true (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@233 |mapa#0@@8| |mapb#0@@8|)))) :qid |unknown.0:0| :skolemid |1916| :pattern ( (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@233 |mapa#0@@8| |mapb#0@@8|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@3 T@U) (Maps._default.MapUnionPreferA$T@@3 T@U) ($ly@@234 T@U) (|mapa#0@@9| T@U) (|mapb#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@3) TyType) (= (type Maps._default.MapUnionPreferA$T@@3) TyType)) (= (type $ly@@234) LayerTypeType)) (= (type |mapa#0@@9|) (MapType BoxType BoxType))) (= (type |mapb#0@@9|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 |mapa#0@@9| |mapb#0@@9|) (and ($Is |mapa#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3)) ($Is |mapb#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@234) |mapa#0@@9| |mapb#0@@9|) (|Map#Glue| (|lambda#44| Maps._default.MapUnionPreferA$U@@3 (|Map#Domain| |mapa#0@@9|) (|Map#Domain| |mapb#0@@9|)) (|lambda#45| (|Map#Domain| |mapa#0@@9|) (|Map#Elements| |mapa#0@@9|) (|Map#Elements| |mapb#0@@9|)) (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3)))) :qid |unknown.0:0| :skolemid |1917| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@234) |mapa#0@@9| |mapb#0@@9|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@4 T@U) (Maps._default.MapUnionPreferA$T@@4 T@U) ($ly@@235 T@U) (|mapa#0@@10| T@U) (|mapb#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@4) TyType) (= (type Maps._default.MapUnionPreferA$T@@4) TyType)) (= (type $ly@@235) LayerTypeType)) (= (type |mapa#0@@10|) (MapType BoxType BoxType))) (= (type |mapb#0@@10|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (and ($Is |mapa#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4)) ($Is |mapb#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@235) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (|Map#Glue| (|lambda#44| Maps._default.MapUnionPreferA$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@10|))) (Lit (|Map#Domain| (Lit |mapb#0@@10|)))) (|lambda#45| (|Map#Domain| |mapa#0@@10|) (|Map#Elements| (Lit |mapa#0@@10|)) (|Map#Elements| (Lit |mapb#0@@10|))) (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |1918| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@235) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|))) ))))
(assert (forall ((arg0@@281 T@U) (arg1@@155 T@U) (arg2@@106 T@U) (arg3@@73 T@U) (arg4@@51 T@U) ) (! (= (type (Maps.__default.MapUnionPreferB arg0@@281 arg1@@155 arg2@@106 arg3@@73 arg4@@51)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnionPreferB| :pattern ( (Maps.__default.MapUnionPreferB arg0@@281 arg1@@155 arg2@@106 arg3@@73 arg4@@51)) )))
(assert (forall ((Maps._default.MapUnionPreferB$U T@U) (Maps._default.MapUnionPreferB$T T@U) ($ly@@236 T@U) (|mapa#0@@11| T@U) (|mapb#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U) TyType) (= (type Maps._default.MapUnionPreferB$T) TyType)) (= (type $ly@@236) LayerTypeType)) (= (type |mapa#0@@11|) (MapType BoxType BoxType))) (= (type |mapb#0@@11|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@236) |mapa#0@@11| |mapb#0@@11|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T $ly@@236 |mapa#0@@11| |mapb#0@@11|))) :qid |unknown.0:0| :skolemid |1919| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@236) |mapa#0@@11| |mapb#0@@11|)) )))
(assert (forall ((Maps._default.MapUnionPreferB$U@@0 T@U) (Maps._default.MapUnionPreferB$T@@0 T@U) ($ly@@237 T@U) (|mapa#0@@12| T@U) (|mapb#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@0) TyType) (= (type Maps._default.MapUnionPreferB$T@@0) TyType)) (= (type $ly@@237) LayerTypeType)) (= (type |mapa#0@@12|) (MapType BoxType BoxType))) (= (type |mapb#0@@12|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $ly@@237 |mapa#0@@12| |mapb#0@@12|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $LZ |mapa#0@@12| |mapb#0@@12|))) :qid |unknown.0:0| :skolemid |1920| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 (AsFuelBottom $ly@@237) |mapa#0@@12| |mapb#0@@12|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@1 T@U) (Maps._default.MapUnionPreferB$T@@1 T@U) ($ly@@238 T@U) (|mapa#0@@13| T@U) (|mapb#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@1) TyType) (= (type Maps._default.MapUnionPreferB$T@@1) TyType)) (= (type $ly@@238) LayerTypeType)) (= (type |mapa#0@@13|) (MapType BoxType BoxType))) (= (type |mapb#0@@13|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 |mapa#0@@13| |mapb#0@@13|) (and ($Is |mapa#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1)) ($Is |mapb#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@238 |mapa#0@@13| |mapb#0@@13|)) (|Set#Union| (|Map#Domain| |mapa#0@@13|) (|Map#Domain| |mapb#0@@13|))) (forall ((|k#0@@40| T@U) ) (!  (=> (and (and (= (type |k#0@@40|) BoxType) ($IsBox |k#0@@40| Maps._default.MapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#0@@40|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@238 |mapa#0@@13| |mapb#0@@13|)) |k#0@@40|) (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#0@@40|))) :qid |Mapssdfy.133:20| :skolemid |1921| :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#0@@40|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@238 |mapa#0@@13| |mapb#0@@13|)) |k#0@@40|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#0@@40|)) ))) (forall ((|k#1@@2| T@U) ) (!  (=> (and (and (= (type |k#1@@2|) BoxType) ($IsBox |k#1@@2| Maps._default.MapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#1@@2|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#1@@2|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@238 |mapa#0@@13| |mapb#0@@13|)) |k#1@@2|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#1@@2|))) :qid |Mapssdfy.134:20| :skolemid |1922| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#1@@2|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@238 |mapa#0@@13| |mapb#0@@13|)) |k#1@@2|)) ))) (forall ((|k#2@@0| T@U) ) (!  (=> (and (and (= (type |k#2@@0|) BoxType) ($IsBox |k#2@@0| Maps._default.MapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#2@@0|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#2@@0|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@238 |mapa#0@@13| |mapb#0@@13|)) |k#2@@0|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#2@@0|))) :qid |Mapssdfy.135:20| :skolemid |1923| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@238 |mapa#0@@13| |mapb#0@@13|)) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#2@@0|)) ))) ($Is (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@238 |mapa#0@@13| |mapb#0@@13|) (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1)))) :qid |unknown.0:0| :skolemid |1924| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@238 |mapa#0@@13| |mapb#0@@13|)) ))))
(assert (forall ((Maps._default.MapUnionPreferB$U@@2 T@U) (Maps._default.MapUnionPreferB$T@@2 T@U) ($ly@@239 T@U) (|mapa#0@@14| T@U) (|mapb#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@2) TyType) (= (type Maps._default.MapUnionPreferB$T@@2) TyType)) (= (type $ly@@239) LayerTypeType)) (= (type |mapa#0@@14|) (MapType BoxType BoxType))) (= (type |mapb#0@@14|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)) ($Is |mapb#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)))) (and (=> (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@239 |mapa#0@@14| |mapb#0@@14|) true) (=> true (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@239 |mapa#0@@14| |mapb#0@@14|)))) :qid |unknown.0:0| :skolemid |1925| :pattern ( (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@239 |mapa#0@@14| |mapb#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@3 T@U) (Maps._default.MapUnionPreferB$T@@3 T@U) ($ly@@240 T@U) (|mapa#0@@15| T@U) (|mapb#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@3) TyType) (= (type Maps._default.MapUnionPreferB$T@@3) TyType)) (= (type $ly@@240) LayerTypeType)) (= (type |mapa#0@@15|) (MapType BoxType BoxType))) (= (type |mapb#0@@15|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 |mapa#0@@15| |mapb#0@@15|) (and ($Is |mapa#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3)) ($Is |mapb#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@240) |mapa#0@@15| |mapb#0@@15|) (|Map#Glue| (|lambda#44| Maps._default.MapUnionPreferB$U@@3 (|Map#Domain| |mapa#0@@15|) (|Map#Domain| |mapb#0@@15|)) (|lambda#45| (|Map#Domain| |mapb#0@@15|) (|Map#Elements| |mapb#0@@15|) (|Map#Elements| |mapa#0@@15|)) (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3)))) :qid |unknown.0:0| :skolemid |1926| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@240) |mapa#0@@15| |mapb#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@4 T@U) (Maps._default.MapUnionPreferB$T@@4 T@U) ($ly@@241 T@U) (|mapa#0@@16| T@U) (|mapb#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@4) TyType) (= (type Maps._default.MapUnionPreferB$T@@4) TyType)) (= (type $ly@@241) LayerTypeType)) (= (type |mapa#0@@16|) (MapType BoxType BoxType))) (= (type |mapb#0@@16|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (and ($Is |mapa#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4)) ($Is |mapb#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@241) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (|Map#Glue| (|lambda#44| Maps._default.MapUnionPreferB$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@16|))) (Lit (|Map#Domain| (Lit |mapb#0@@16|)))) (|lambda#45| (|Map#Domain| |mapb#0@@16|) (|Map#Elements| (Lit |mapb#0@@16|)) (|Map#Elements| (Lit |mapa#0@@16|))) (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |1927| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@241) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|))) ))))
(assert (forall ((arg0@@282 T@U) (arg1@@156 T@U) (arg2@@107 T@U) (arg3@@74 T@U) (arg4@@52 T@U) ) (! (= (type (Maps.__default.MapUnion arg0@@282 arg1@@156 arg2@@107 arg3@@74 arg4@@52)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnion| :pattern ( (Maps.__default.MapUnion arg0@@282 arg1@@156 arg2@@107 arg3@@74 arg4@@52)) )))
(assert (forall ((Maps._default.MapUnion$U T@U) (Maps._default.MapUnion$T T@U) ($ly@@242 T@U) (|mapa#0@@17| T@U) (|mapb#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U) TyType) (= (type Maps._default.MapUnion$T) TyType)) (= (type $ly@@242) LayerTypeType)) (= (type |mapa#0@@17|) (MapType BoxType BoxType))) (= (type |mapb#0@@17|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@242) |mapa#0@@17| |mapb#0@@17|) (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T $ly@@242 |mapa#0@@17| |mapb#0@@17|))) :qid |unknown.0:0| :skolemid |1928| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@242) |mapa#0@@17| |mapb#0@@17|)) )))
(assert (forall ((Maps._default.MapUnion$U@@0 T@U) (Maps._default.MapUnion$T@@0 T@U) ($ly@@243 T@U) (|mapa#0@@18| T@U) (|mapb#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U@@0) TyType) (= (type Maps._default.MapUnion$T@@0) TyType)) (= (type $ly@@243) LayerTypeType)) (= (type |mapa#0@@18|) (MapType BoxType BoxType))) (= (type |mapb#0@@18|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $ly@@243 |mapa#0@@18| |mapb#0@@18|) (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $LZ |mapa#0@@18| |mapb#0@@18|))) :qid |unknown.0:0| :skolemid |1929| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 (AsFuelBottom $ly@@243) |mapa#0@@18| |mapb#0@@18|)) )))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@1 T@U) (Maps._default.MapUnion$T@@1 T@U) ($ly@@244 T@U) (|mapa#0@@19| T@U) (|mapb#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@1) TyType) (= (type Maps._default.MapUnion$T@@1) TyType)) (= (type $ly@@244) LayerTypeType)) (= (type |mapa#0@@19|) (MapType BoxType BoxType))) (= (type |mapb#0@@19|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 |mapa#0@@19| |mapb#0@@19|) (and ($Is |mapa#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1)) ($Is |mapb#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@244 |mapa#0@@19| |mapb#0@@19|)) (|Set#Union| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|))) (forall ((|k#0@@41| T@U) ) (!  (=> (and (and (= (type |k#0@@41|) BoxType) ($IsBox |k#0@@41| Maps._default.MapUnion$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@19|) |k#0@@41|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@19|) |k#0@@41|))))) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#0@@41|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@244 |mapa#0@@19| |mapb#0@@19|)) |k#0@@41|))) :qid |Mapssdfy.144:18| :skolemid |1930| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@244 |mapa#0@@19| |mapb#0@@19|)) |k#0@@41|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#0@@41|)) ))) (forall ((|k#1@@3| T@U) ) (!  (=> (and (and (= (type |k#1@@3|) BoxType) ($IsBox |k#1@@3| Maps._default.MapUnion$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@19|) |k#1@@3|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@19|) |k#1@@3|))))) (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#1@@3|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@244 |mapa#0@@19| |mapb#0@@19|)) |k#1@@3|))) :qid |Mapssdfy.145:18| :skolemid |1931| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@244 |mapa#0@@19| |mapb#0@@19|)) |k#1@@3|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#1@@3|)) ))) (forall ((|k#2@@1| T@U) ) (!  (=> (and (and (= (type |k#2@@1|) BoxType) ($IsBox |k#2@@1| Maps._default.MapUnion$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@19|) |k#2@@1|)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@19|) |k#2@@1|)))) (or (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#2@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@244 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#2@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@244 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)))) :qid |Mapssdfy.146:18| :skolemid |1932| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#2@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@244 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#2@@1|)) ))) ($Is (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@244 |mapa#0@@19| |mapb#0@@19|) (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1)))) :qid |unknown.0:0| :skolemid |1933| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@244 |mapa#0@@19| |mapb#0@@19|)) ))))
(assert (forall ((Maps._default.MapUnion$U@@2 T@U) (Maps._default.MapUnion$T@@2 T@U) ($ly@@245 T@U) (|mapa#0@@20| T@U) (|mapb#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@2) TyType) (= (type Maps._default.MapUnion$T@@2) TyType)) (= (type $ly@@245) LayerTypeType)) (= (type |mapa#0@@20|) (MapType BoxType BoxType))) (= (type |mapb#0@@20|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)) ($Is |mapb#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)))) (and (=> (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@245 |mapa#0@@20| |mapb#0@@20|) true) (=> true (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@245 |mapa#0@@20| |mapb#0@@20|)))) :qid |unknown.0:0| :skolemid |1934| :pattern ( (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@245 |mapa#0@@20| |mapb#0@@20|)) )))
(assert (= (type StartFuel_Maps._default.MapUnionPreferA) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@3 T@U) (Maps._default.MapUnion$T@@3 T@U) ($ly@@246 T@U) (|mapa#0@@21| T@U) (|mapb#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@3) TyType) (= (type Maps._default.MapUnion$T@@3) TyType)) (= (type $ly@@246) LayerTypeType)) (= (type |mapa#0@@21|) (MapType BoxType BoxType))) (= (type |mapb#0@@21|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (and ($Is |mapa#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3)) ($Is |mapb#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@246) |mapa#0@@21| |mapb#0@@21|) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 StartFuel_Maps._default.MapUnionPreferA |mapa#0@@21| |mapb#0@@21|)))) :qid |unknown.0:0| :skolemid |1935| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@246) |mapa#0@@21| |mapb#0@@21|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@4 T@U) (Maps._default.MapUnion$T@@4 T@U) ($ly@@247 T@U) (|mapa#0@@22| T@U) (|mapb#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@4) TyType) (= (type Maps._default.MapUnion$T@@4) TyType)) (= (type $ly@@247) LayerTypeType)) (= (type |mapa#0@@22|) (MapType BoxType BoxType))) (= (type |mapb#0@@22|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (and ($Is |mapa#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4)) ($Is |mapb#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@247) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 StartFuel_Maps._default.MapUnionPreferA (Lit |mapa#0@@22|) (Lit |mapb#0@@22|))))) :qid |unknown.0:0| :weight 3 :skolemid |1936| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@247) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|))) ))))
(assert (forall ((arg0@@283 T@U) (arg1@@157 T@U) (arg2@@108 T@U) (arg3@@75 T@U) (arg4@@53 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferA arg0@@283 arg1@@157 arg2@@108 arg3@@75 arg4@@53)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnionPreferA| :pattern ( (Maps.__default.IMapUnionPreferA arg0@@283 arg1@@157 arg2@@108 arg3@@75 arg4@@53)) )))
(assert (forall ((Maps._default.IMapUnionPreferA$U T@U) (Maps._default.IMapUnionPreferA$T T@U) ($ly@@248 T@U) (|mapa#0@@23| T@U) (|mapb#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U) TyType) (= (type Maps._default.IMapUnionPreferA$T) TyType)) (= (type $ly@@248) LayerTypeType)) (= (type |mapa#0@@23|) (IMapType BoxType BoxType))) (= (type |mapb#0@@23|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@248) |mapa#0@@23| |mapb#0@@23|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T $ly@@248 |mapa#0@@23| |mapb#0@@23|))) :qid |unknown.0:0| :skolemid |1937| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@248) |mapa#0@@23| |mapb#0@@23|)) )))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@0 T@U) (Maps._default.IMapUnionPreferA$T@@0 T@U) ($ly@@249 T@U) (|mapa#0@@24| T@U) (|mapb#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@0) TyType) (= (type Maps._default.IMapUnionPreferA$T@@0) TyType)) (= (type $ly@@249) LayerTypeType)) (= (type |mapa#0@@24|) (IMapType BoxType BoxType))) (= (type |mapb#0@@24|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $ly@@249 |mapa#0@@24| |mapb#0@@24|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $LZ |mapa#0@@24| |mapb#0@@24|))) :qid |unknown.0:0| :skolemid |1938| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 (AsFuelBottom $ly@@249) |mapa#0@@24| |mapb#0@@24|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@1 T@U) (Maps._default.IMapUnionPreferA$T@@1 T@U) ($ly@@250 T@U) (|mapa#0@@25| T@U) (|mapb#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@1) TyType) (= (type Maps._default.IMapUnionPreferA$T@@1) TyType)) (= (type $ly@@250) LayerTypeType)) (= (type |mapa#0@@25|) (IMapType BoxType BoxType))) (= (type |mapb#0@@25|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 |mapa#0@@25| |mapb#0@@25|) (and ($Is |mapa#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1)) ($Is |mapb#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@250 |mapa#0@@25| |mapb#0@@25|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@25|) (|IMap#Domain| |mapb#0@@25|))) (forall ((|k#0@@42| T@U) ) (!  (=> (and (and (= (type |k#0@@42|) BoxType) ($IsBox |k#0@@42| Maps._default.IMapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#0@@42|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@250 |mapa#0@@25| |mapb#0@@25|)) |k#0@@42|) (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#0@@42|))) :qid |Mapssdfy.153:20| :skolemid |1939| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#0@@42|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@250 |mapa#0@@25| |mapb#0@@25|)) |k#0@@42|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#0@@42|)) ))) (forall ((|k#1@@4| T@U) ) (!  (=> (and (and (= (type |k#1@@4|) BoxType) ($IsBox |k#1@@4| Maps._default.IMapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#1@@4|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#1@@4|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@250 |mapa#0@@25| |mapb#0@@25|)) |k#1@@4|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#1@@4|))) :qid |Mapssdfy.154:20| :skolemid |1940| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#1@@4|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@250 |mapa#0@@25| |mapb#0@@25|)) |k#1@@4|)) ))) (forall ((|k#2@@2| T@U) ) (!  (=> (and (and (= (type |k#2@@2|) BoxType) ($IsBox |k#2@@2| Maps._default.IMapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#2@@2|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#2@@2|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@250 |mapa#0@@25| |mapb#0@@25|)) |k#2@@2|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#2@@2|))) :qid |Mapssdfy.155:20| :skolemid |1941| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@250 |mapa#0@@25| |mapb#0@@25|)) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#2@@2|)) ))) ($Is (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@250 |mapa#0@@25| |mapb#0@@25|) (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1)))) :qid |unknown.0:0| :skolemid |1942| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@250 |mapa#0@@25| |mapb#0@@25|)) ))))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@2 T@U) (Maps._default.IMapUnionPreferA$T@@2 T@U) ($ly@@251 T@U) (|mapa#0@@26| T@U) (|mapb#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@2) TyType) (= (type Maps._default.IMapUnionPreferA$T@@2) TyType)) (= (type $ly@@251) LayerTypeType)) (= (type |mapa#0@@26|) (IMapType BoxType BoxType))) (= (type |mapb#0@@26|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)) ($Is |mapb#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)))) (and (=> (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@251 |mapa#0@@26| |mapb#0@@26|) true) (=> true (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@251 |mapa#0@@26| |mapb#0@@26|)))) :qid |unknown.0:0| :skolemid |1943| :pattern ( (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@251 |mapa#0@@26| |mapb#0@@26|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@3 T@U) (Maps._default.IMapUnionPreferA$T@@3 T@U) ($ly@@252 T@U) (|mapa#0@@27| T@U) (|mapb#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@3) TyType) (= (type Maps._default.IMapUnionPreferA$T@@3) TyType)) (= (type $ly@@252) LayerTypeType)) (= (type |mapa#0@@27|) (IMapType BoxType BoxType))) (= (type |mapb#0@@27|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 |mapa#0@@27| |mapb#0@@27|) (and ($Is |mapa#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3)) ($Is |mapb#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@252) |mapa#0@@27| |mapb#0@@27|) (|IMap#Glue| (|lambda#44| Maps._default.IMapUnionPreferA$U@@3 (|IMap#Domain| |mapa#0@@27|) (|IMap#Domain| |mapb#0@@27|)) (|lambda#45| (|IMap#Domain| |mapa#0@@27|) (|IMap#Elements| |mapa#0@@27|) (|IMap#Elements| |mapb#0@@27|)) (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3)))) :qid |unknown.0:0| :skolemid |1944| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@252) |mapa#0@@27| |mapb#0@@27|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@4 T@U) (Maps._default.IMapUnionPreferA$T@@4 T@U) ($ly@@253 T@U) (|mapa#0@@28| T@U) (|mapb#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@4) TyType) (= (type Maps._default.IMapUnionPreferA$T@@4) TyType)) (= (type $ly@@253) LayerTypeType)) (= (type |mapa#0@@28|) (IMapType BoxType BoxType))) (= (type |mapb#0@@28|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (and ($Is |mapa#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4)) ($Is |mapb#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@253) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (|IMap#Glue| (|lambda#44| Maps._default.IMapUnionPreferA$U@@4 (Lit (|IMap#Domain| (Lit |mapa#0@@28|))) (Lit (|IMap#Domain| (Lit |mapb#0@@28|)))) (|lambda#45| (|IMap#Domain| |mapa#0@@28|) (|IMap#Elements| (Lit |mapa#0@@28|)) (|IMap#Elements| (Lit |mapb#0@@28|))) (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |1945| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@253) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|))) ))))
(assert (forall ((arg0@@284 T@U) (arg1@@158 T@U) (arg2@@109 T@U) (arg3@@76 T@U) (arg4@@54 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferB arg0@@284 arg1@@158 arg2@@109 arg3@@76 arg4@@54)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnionPreferB| :pattern ( (Maps.__default.IMapUnionPreferB arg0@@284 arg1@@158 arg2@@109 arg3@@76 arg4@@54)) )))
(assert (forall ((Maps._default.IMapUnionPreferB$U T@U) (Maps._default.IMapUnionPreferB$T T@U) ($ly@@254 T@U) (|mapa#0@@29| T@U) (|mapb#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U) TyType) (= (type Maps._default.IMapUnionPreferB$T) TyType)) (= (type $ly@@254) LayerTypeType)) (= (type |mapa#0@@29|) (IMapType BoxType BoxType))) (= (type |mapb#0@@29|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@254) |mapa#0@@29| |mapb#0@@29|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T $ly@@254 |mapa#0@@29| |mapb#0@@29|))) :qid |unknown.0:0| :skolemid |1946| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@254) |mapa#0@@29| |mapb#0@@29|)) )))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@0 T@U) (Maps._default.IMapUnionPreferB$T@@0 T@U) ($ly@@255 T@U) (|mapa#0@@30| T@U) (|mapb#0@@30| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@0) TyType) (= (type Maps._default.IMapUnionPreferB$T@@0) TyType)) (= (type $ly@@255) LayerTypeType)) (= (type |mapa#0@@30|) (IMapType BoxType BoxType))) (= (type |mapb#0@@30|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $ly@@255 |mapa#0@@30| |mapb#0@@30|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $LZ |mapa#0@@30| |mapb#0@@30|))) :qid |unknown.0:0| :skolemid |1947| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 (AsFuelBottom $ly@@255) |mapa#0@@30| |mapb#0@@30|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@1 T@U) (Maps._default.IMapUnionPreferB$T@@1 T@U) ($ly@@256 T@U) (|mapa#0@@31| T@U) (|mapb#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@1) TyType) (= (type Maps._default.IMapUnionPreferB$T@@1) TyType)) (= (type $ly@@256) LayerTypeType)) (= (type |mapa#0@@31|) (IMapType BoxType BoxType))) (= (type |mapb#0@@31|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 |mapa#0@@31| |mapb#0@@31|) (and ($Is |mapa#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1)) ($Is |mapb#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@256 |mapa#0@@31| |mapb#0@@31|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@31|) (|IMap#Domain| |mapb#0@@31|))) (forall ((|k#0@@43| T@U) ) (!  (=> (and (and (= (type |k#0@@43|) BoxType) ($IsBox |k#0@@43| Maps._default.IMapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#0@@43|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@256 |mapa#0@@31| |mapb#0@@31|)) |k#0@@43|) (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#0@@43|))) :qid |Mapssdfy.162:20| :skolemid |1948| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#0@@43|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@256 |mapa#0@@31| |mapb#0@@31|)) |k#0@@43|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#0@@43|)) ))) (forall ((|k#1@@5| T@U) ) (!  (=> (and (and (= (type |k#1@@5|) BoxType) ($IsBox |k#1@@5| Maps._default.IMapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#1@@5|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#1@@5|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@256 |mapa#0@@31| |mapb#0@@31|)) |k#1@@5|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#1@@5|))) :qid |Mapssdfy.163:20| :skolemid |1949| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#1@@5|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@256 |mapa#0@@31| |mapb#0@@31|)) |k#1@@5|)) ))) (forall ((|k#2@@3| T@U) ) (!  (=> (and (and (= (type |k#2@@3|) BoxType) ($IsBox |k#2@@3| Maps._default.IMapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#2@@3|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#2@@3|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@256 |mapa#0@@31| |mapb#0@@31|)) |k#2@@3|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#2@@3|))) :qid |Mapssdfy.164:20| :skolemid |1950| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@256 |mapa#0@@31| |mapb#0@@31|)) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#2@@3|)) ))) ($Is (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@256 |mapa#0@@31| |mapb#0@@31|) (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1)))) :qid |unknown.0:0| :skolemid |1951| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@256 |mapa#0@@31| |mapb#0@@31|)) ))))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@2 T@U) (Maps._default.IMapUnionPreferB$T@@2 T@U) ($ly@@257 T@U) (|mapa#0@@32| T@U) (|mapb#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@2) TyType) (= (type Maps._default.IMapUnionPreferB$T@@2) TyType)) (= (type $ly@@257) LayerTypeType)) (= (type |mapa#0@@32|) (IMapType BoxType BoxType))) (= (type |mapb#0@@32|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)) ($Is |mapb#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)))) (and (=> (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@257 |mapa#0@@32| |mapb#0@@32|) true) (=> true (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@257 |mapa#0@@32| |mapb#0@@32|)))) :qid |unknown.0:0| :skolemid |1952| :pattern ( (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@257 |mapa#0@@32| |mapb#0@@32|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@3 T@U) (Maps._default.IMapUnionPreferB$T@@3 T@U) ($ly@@258 T@U) (|mapa#0@@33| T@U) (|mapb#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@3) TyType) (= (type Maps._default.IMapUnionPreferB$T@@3) TyType)) (= (type $ly@@258) LayerTypeType)) (= (type |mapa#0@@33|) (IMapType BoxType BoxType))) (= (type |mapb#0@@33|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 |mapa#0@@33| |mapb#0@@33|) (and ($Is |mapa#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3)) ($Is |mapb#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@258) |mapa#0@@33| |mapb#0@@33|) (|IMap#Glue| (|lambda#44| Maps._default.IMapUnionPreferB$U@@3 (|IMap#Domain| |mapa#0@@33|) (|IMap#Domain| |mapb#0@@33|)) (|lambda#45| (|IMap#Domain| |mapb#0@@33|) (|IMap#Elements| |mapb#0@@33|) (|IMap#Elements| |mapa#0@@33|)) (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3)))) :qid |unknown.0:0| :skolemid |1953| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@258) |mapa#0@@33| |mapb#0@@33|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@4 T@U) (Maps._default.IMapUnionPreferB$T@@4 T@U) ($ly@@259 T@U) (|mapa#0@@34| T@U) (|mapb#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@4) TyType) (= (type Maps._default.IMapUnionPreferB$T@@4) TyType)) (= (type $ly@@259) LayerTypeType)) (= (type |mapa#0@@34|) (IMapType BoxType BoxType))) (= (type |mapb#0@@34|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (and ($Is |mapa#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4)) ($Is |mapb#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@259) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (|IMap#Glue| (|lambda#44| Maps._default.IMapUnionPreferB$U@@4 (Lit (|IMap#Domain| (Lit |mapa#0@@34|))) (Lit (|IMap#Domain| (Lit |mapb#0@@34|)))) (|lambda#45| (|IMap#Domain| |mapb#0@@34|) (|IMap#Elements| (Lit |mapb#0@@34|)) (|IMap#Elements| (Lit |mapa#0@@34|))) (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |1954| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@259) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|))) ))))
(assert (forall ((arg0@@285 T@U) (arg1@@159 T@U) (arg2@@110 T@U) (arg3@@77 T@U) (arg4@@55 T@U) ) (! (= (type (Maps.__default.IMapUnion arg0@@285 arg1@@159 arg2@@110 arg3@@77 arg4@@55)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnion| :pattern ( (Maps.__default.IMapUnion arg0@@285 arg1@@159 arg2@@110 arg3@@77 arg4@@55)) )))
(assert (forall ((Maps._default.IMapUnion$U T@U) (Maps._default.IMapUnion$T T@U) ($ly@@260 T@U) (|mapa#0@@35| T@U) (|mapb#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U) TyType) (= (type Maps._default.IMapUnion$T) TyType)) (= (type $ly@@260) LayerTypeType)) (= (type |mapa#0@@35|) (IMapType BoxType BoxType))) (= (type |mapb#0@@35|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@260) |mapa#0@@35| |mapb#0@@35|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T $ly@@260 |mapa#0@@35| |mapb#0@@35|))) :qid |unknown.0:0| :skolemid |1955| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@260) |mapa#0@@35| |mapb#0@@35|)) )))
(assert (forall ((Maps._default.IMapUnion$U@@0 T@U) (Maps._default.IMapUnion$T@@0 T@U) ($ly@@261 T@U) (|mapa#0@@36| T@U) (|mapb#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U@@0) TyType) (= (type Maps._default.IMapUnion$T@@0) TyType)) (= (type $ly@@261) LayerTypeType)) (= (type |mapa#0@@36|) (IMapType BoxType BoxType))) (= (type |mapb#0@@36|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $ly@@261 |mapa#0@@36| |mapb#0@@36|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $LZ |mapa#0@@36| |mapb#0@@36|))) :qid |unknown.0:0| :skolemid |1956| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 (AsFuelBottom $ly@@261) |mapa#0@@36| |mapb#0@@36|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@1 T@U) (Maps._default.IMapUnion$T@@1 T@U) ($ly@@262 T@U) (|mapa#0@@37| T@U) (|mapb#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@1) TyType) (= (type Maps._default.IMapUnion$T@@1) TyType)) (= (type $ly@@262) LayerTypeType)) (= (type |mapa#0@@37|) (IMapType BoxType BoxType))) (= (type |mapb#0@@37|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 |mapa#0@@37| |mapb#0@@37|) (and ($Is |mapa#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1)) ($Is |mapb#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@262 |mapa#0@@37| |mapb#0@@37|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|))) (forall ((|k#0@@44| T@U) ) (!  (=> (and (and (= (type |k#0@@44|) BoxType) ($IsBox |k#0@@44| Maps._default.IMapUnion$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@37|) |k#0@@44|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@37|) |k#0@@44|))))) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#0@@44|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@262 |mapa#0@@37| |mapb#0@@37|)) |k#0@@44|))) :qid |Mapssdfy.173:18| :skolemid |1957| :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@262 |mapa#0@@37| |mapb#0@@37|)) |k#0@@44|)) :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#0@@44|)) ))) (forall ((|k#1@@6| T@U) ) (!  (=> (and (and (= (type |k#1@@6|) BoxType) ($IsBox |k#1@@6| Maps._default.IMapUnion$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@37|) |k#1@@6|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@37|) |k#1@@6|))))) (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#1@@6|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@262 |mapa#0@@37| |mapb#0@@37|)) |k#1@@6|))) :qid |Mapssdfy.174:18| :skolemid |1958| :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@262 |mapa#0@@37| |mapb#0@@37|)) |k#1@@6|)) :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#1@@6|)) ))) (forall ((|k#2@@4| T@U) ) (!  (=> (and (and (= (type |k#2@@4|) BoxType) ($IsBox |k#2@@4| Maps._default.IMapUnion$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@37|) |k#2@@4|)) (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@37|) |k#2@@4|)))) (or (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#2@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@262 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#2@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@262 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)))) :qid |Mapssdfy.175:18| :skolemid |1959| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#2@@4|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@262 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)) :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#2@@4|)) ))) ($Is (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@262 |mapa#0@@37| |mapb#0@@37|) (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1)))) :qid |unknown.0:0| :skolemid |1960| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@262 |mapa#0@@37| |mapb#0@@37|)) ))))
(assert (forall ((Maps._default.IMapUnion$U@@2 T@U) (Maps._default.IMapUnion$T@@2 T@U) ($ly@@263 T@U) (|mapa#0@@38| T@U) (|mapb#0@@38| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@2) TyType) (= (type Maps._default.IMapUnion$T@@2) TyType)) (= (type $ly@@263) LayerTypeType)) (= (type |mapa#0@@38|) (IMapType BoxType BoxType))) (= (type |mapb#0@@38|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)) ($Is |mapb#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)))) (and (=> (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@263 |mapa#0@@38| |mapb#0@@38|) true) (=> true (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@263 |mapa#0@@38| |mapb#0@@38|)))) :qid |unknown.0:0| :skolemid |1961| :pattern ( (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@263 |mapa#0@@38| |mapb#0@@38|)) )))
(assert (= (type StartFuel_Maps._default.IMapUnionPreferA) LayerTypeType))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@3 T@U) (Maps._default.IMapUnion$T@@3 T@U) ($ly@@264 T@U) (|mapa#0@@39| T@U) (|mapb#0@@39| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@3) TyType) (= (type Maps._default.IMapUnion$T@@3) TyType)) (= (type $ly@@264) LayerTypeType)) (= (type |mapa#0@@39|) (IMapType BoxType BoxType))) (= (type |mapb#0@@39|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (and ($Is |mapa#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3)) ($Is |mapb#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@264) |mapa#0@@39| |mapb#0@@39|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 StartFuel_Maps._default.IMapUnionPreferA |mapa#0@@39| |mapb#0@@39|)))) :qid |unknown.0:0| :skolemid |1962| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@264) |mapa#0@@39| |mapb#0@@39|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@4 T@U) (Maps._default.IMapUnion$T@@4 T@U) ($ly@@265 T@U) (|mapa#0@@40| T@U) (|mapb#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@4) TyType) (= (type Maps._default.IMapUnion$T@@4) TyType)) (= (type $ly@@265) LayerTypeType)) (= (type |mapa#0@@40|) (IMapType BoxType BoxType))) (= (type |mapb#0@@40|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (and ($Is |mapa#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4)) ($Is |mapb#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@265) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 StartFuel_Maps._default.IMapUnionPreferA (Lit |mapa#0@@40|) (Lit |mapb#0@@40|))))) :qid |unknown.0:0| :weight 3 :skolemid |1963| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@265) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|))) ))))
(assert (forall ((arg0@@286 T@U) (arg1@@160 T@U) (arg2@@111 T@U) (arg3@@78 T@U) (arg4@@56 T@U) (arg5@@21 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion3 arg0@@286 arg1@@160 arg2@@111 arg3@@78 arg4@@56 arg5@@21)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapDisjointUnion3| :pattern ( (Maps.__default.MapDisjointUnion3 arg0@@286 arg1@@160 arg2@@111 arg3@@78 arg4@@56 arg5@@21)) )))
(assert (forall ((Maps._default.MapDisjointUnion3$U T@U) (Maps._default.MapDisjointUnion3$T T@U) ($ly@@266 T@U) (|mapa#0@@41| T@U) (|mapb#0@@41| T@U) (|mapc#0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U) TyType) (= (type Maps._default.MapDisjointUnion3$T) TyType)) (= (type $ly@@266) LayerTypeType)) (= (type |mapa#0@@41|) (MapType BoxType BoxType))) (= (type |mapb#0@@41|) (MapType BoxType BoxType))) (= (type |mapc#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@266) |mapa#0@@41| |mapb#0@@41| |mapc#0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T $ly@@266 |mapa#0@@41| |mapb#0@@41| |mapc#0|))) :qid |unknown.0:0| :skolemid |1964| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@266) |mapa#0@@41| |mapb#0@@41| |mapc#0|)) )))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@0 T@U) (Maps._default.MapDisjointUnion3$T@@0 T@U) ($ly@@267 T@U) (|mapa#0@@42| T@U) (|mapb#0@@42| T@U) (|mapc#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@0) TyType) (= (type Maps._default.MapDisjointUnion3$T@@0) TyType)) (= (type $ly@@267) LayerTypeType)) (= (type |mapa#0@@42|) (MapType BoxType BoxType))) (= (type |mapb#0@@42|) (MapType BoxType BoxType))) (= (type |mapc#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $ly@@267 |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $LZ |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|))) :qid |unknown.0:0| :skolemid |1965| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 (AsFuelBottom $ly@@267) |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|)) )))
(assert (= (type StartFuel_Maps._default.MapDisjointUnion) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@1 T@U) (Maps._default.MapDisjointUnion3$T@@1 T@U) ($ly@@268 T@U) (|mapa#0@@43| T@U) (|mapb#0@@43| T@U) (|mapc#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@1) TyType) (= (type Maps._default.MapDisjointUnion3$T@@1) TyType)) (= (type $ly@@268) LayerTypeType)) (= (type |mapa#0@@43|) (MapType BoxType BoxType))) (= (type |mapb#0@@43|) (MapType BoxType BoxType))) (= (type |mapc#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (and (and (and ($Is |mapa#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1)) ($Is |mapb#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) ($Is |mapc#0@@1| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|)))))) (and (and (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@268 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Union| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|))) (=> (or (or (not (|Set#Equal| (|Map#Domain| |mapa#0@@43|) (|Set#Empty| BoxType))) (not (|Set#Equal| (|Map#Domain| |mapb#0@@43|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| |mapc#0@@1|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@268 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Empty| BoxType))))) (forall ((|k#0@@45| T@U) ) (!  (=> (and (and (= (type |k#0@@45|) BoxType) ($IsBox |k#0@@45| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#0@@45|))) (= (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#0@@45|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@268 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#0@@45|))) :qid |Mapssdfy.185:18| :skolemid |1966| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@268 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#0@@45|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#0@@45|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#0@@45|)) ))) (forall ((|k#1@@7| T@U) ) (!  (=> (and (and (= (type |k#1@@7|) BoxType) ($IsBox |k#1@@7| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#1@@7|))) (= (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#1@@7|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@268 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#1@@7|))) :qid |Mapssdfy.186:18| :skolemid |1967| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@268 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#1@@7|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#1@@7|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#1@@7|)) ))) (forall ((|k#2@@5| T@U) ) (!  (=> (and (and (= (type |k#2@@5|) BoxType) ($IsBox |k#2@@5| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#2@@5|))) (= (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#2@@5|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@268 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#2@@5|))) :qid |Mapssdfy.187:18| :skolemid |1968| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@268 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#2@@5|)) :pattern ( (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#2@@5|)) :pattern ( (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#2@@5|)) ))) (and (|Map#Equal| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@268 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|))) (|Map#Equal| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|)) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| |mapb#0@@43|) |mapc#0@@1|)))) ($Is (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@268 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1)))) :qid |unknown.0:0| :skolemid |1969| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@268 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) ))))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@2 T@U) (Maps._default.MapDisjointUnion3$T@@2 T@U) ($ly@@269 T@U) (|mapa#0@@44| T@U) (|mapb#0@@44| T@U) (|mapc#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@2) TyType) (= (type Maps._default.MapDisjointUnion3$T@@2) TyType)) (= (type $ly@@269) LayerTypeType)) (= (type |mapa#0@@44|) (MapType BoxType BoxType))) (= (type |mapb#0@@44|) (MapType BoxType BoxType))) (= (type |mapc#0@@2|) (MapType BoxType BoxType))) (and (and ($Is |mapa#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)) ($Is |mapb#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2))) ($Is |mapc#0@@2| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)))) (and (=> (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@269 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Map#Domain| |mapc#0@@2|)))) (=> (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Map#Domain| |mapc#0@@2|))) (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@269 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|)))) :qid |unknown.0:0| :skolemid |1970| :pattern ( (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@269 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|)) )))
(assert  (and (forall ((arg0@@287 T@U) (arg1@@161 T@U) (arg2@@112 T@U) (arg3@@79 T@U) ) (! (= (type (|lambda#64| arg0@@287 arg1@@161 arg2@@112 arg3@@79)) (MapType0Type BoxType boolType)) :qid |funType:lambda#64| :pattern ( (|lambda#64| arg0@@287 arg1@@161 arg2@@112 arg3@@79)) )) (forall ((arg0@@288 T@U) (arg1@@162 T@U) (arg2@@113 T@U) (arg3@@80 T@U) (arg4@@57 T@U) ) (! (= (type (|lambda#65| arg0@@288 arg1@@162 arg2@@113 arg3@@80 arg4@@57)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#65| :pattern ( (|lambda#65| arg0@@288 arg1@@162 arg2@@113 arg3@@80 arg4@@57)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@3 T@U) (Maps._default.MapDisjointUnion3$T@@3 T@U) ($ly@@270 T@U) (|mapa#0@@45| T@U) (|mapb#0@@45| T@U) (|mapc#0@@3| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@3) TyType) (= (type Maps._default.MapDisjointUnion3$T@@3) TyType)) (= (type $ly@@270) LayerTypeType)) (= (type |mapa#0@@45|) (MapType BoxType BoxType))) (= (type |mapb#0@@45|) (MapType BoxType BoxType))) (= (type |mapc#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (and (and (and ($Is |mapa#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3)) ($Is |mapb#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) ($Is |mapc#0@@3| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Map#Domain| |mapc#0@@3|)))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@270) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (|Map#Glue| (|lambda#64| Maps._default.MapDisjointUnion3$U@@3 (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|) (|Map#Domain| |mapc#0@@3|)) (|lambda#65| (|Map#Domain| |mapa#0@@45|) (|Map#Elements| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|) (|Map#Elements| |mapb#0@@45|) (|Map#Elements| |mapc#0@@3|)) (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3)))) :qid |unknown.0:0| :skolemid |1971| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@270) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@4 T@U) (Maps._default.MapDisjointUnion3$T@@4 T@U) ($ly@@271 T@U) (|mapa#0@@46| T@U) (|mapb#0@@46| T@U) (|mapc#0@@4| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@4) TyType) (= (type Maps._default.MapDisjointUnion3$T@@4) TyType)) (= (type $ly@@271) LayerTypeType)) (= (type |mapa#0@@46|) (MapType BoxType BoxType))) (= (type |mapb#0@@46|) (MapType BoxType BoxType))) (= (type |mapc#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (and (and (and ($Is |mapa#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4)) ($Is |mapb#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) ($Is |mapc#0@@4| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) (and (and (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|)))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Map#Domain| (Lit |mapc#0@@4|))))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@271) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (|Map#Glue| (|lambda#64| Maps._default.MapDisjointUnion3$U@@4 (Lit (|Map#Domain| (Lit |mapa#0@@46|))) (Lit (|Map#Domain| (Lit |mapb#0@@46|))) (Lit (|Map#Domain| (Lit |mapc#0@@4|)))) (|lambda#65| (|Map#Domain| |mapa#0@@46|) (|Map#Elements| (Lit |mapa#0@@46|)) (|Map#Domain| |mapb#0@@46|) (|Map#Elements| (Lit |mapb#0@@46|)) (|Map#Elements| (Lit |mapc#0@@4|))) (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |1972| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@271) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|))) ))))
(assert (forall ((arg0@@289 T@U) (arg1@@163 T@U) (arg2@@114 T@U) ) (! (= (type (Maps.__default.MapToImap arg0@@289 arg1@@163 arg2@@114)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.MapToImap| :pattern ( (Maps.__default.MapToImap arg0@@289 arg1@@163 arg2@@114)) )))
(assert  (=> true (forall ((Maps._default.MapToImap$K T@U) (Maps._default.MapToImap$V T@U) (|m#0@@68| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K) TyType) (= (type Maps._default.MapToImap$V) TyType)) (= (type |m#0@@68|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@68|) ($Is |m#0@@68| (TMap Maps._default.MapToImap$K Maps._default.MapToImap$V)))) ($Is (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@68|) (TIMap Maps._default.MapToImap$K Maps._default.MapToImap$V))) :qid |unknown.0:0| :skolemid |1973| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@68|)) ))))
(assert (forall ((Maps._default.MapToImap$K@@0 T@U) (Maps._default.MapToImap$V@@0 T@U) (|m#0@@69| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@0) TyType) (= (type Maps._default.MapToImap$V@@0) TyType)) (= (type |m#0@@69|) (MapType BoxType BoxType))) ($Is |m#0@@69| (TMap Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0))) (and (=> (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@69|) true) (=> true (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@69|)))) :qid |unknown.0:0| :skolemid |1974| :pattern ( (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@69|)) )))
(assert (forall ((arg0@@290 T@U) (arg1@@164 T@U) ) (! (= (type (|lambda#68| arg0@@290 arg1@@164)) (MapType0Type BoxType boolType)) :qid |funType:lambda#68| :pattern ( (|lambda#68| arg0@@290 arg1@@164)) )))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@1 T@U) (Maps._default.MapToImap$V@@1 T@U) (|m#0@@70| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@1) TyType) (= (type Maps._default.MapToImap$V@@1) TyType)) (= (type |m#0@@70|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@70|) ($Is |m#0@@70| (TMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@70|) (|IMap#Glue| (|lambda#68| Maps._default.MapToImap$K@@1 (|Map#Domain| |m#0@@70|)) (|lambda#13| (|Map#Elements| |m#0@@70|)) (TIMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1)))) :qid |unknown.0:0| :skolemid |1975| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@70|)) ))))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@2 T@U) (Maps._default.MapToImap$V@@2 T@U) (|m#0@@71| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@2) TyType) (= (type Maps._default.MapToImap$V@@2) TyType)) (= (type |m#0@@71|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@71|)) ($Is |m#0@@71| (TMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@71|)) (|IMap#Glue| (|lambda#68| Maps._default.MapToImap$K@@2 (|Map#Domain| |m#0@@71|)) (|lambda#13| (|Map#Elements| (Lit |m#0@@71|))) (TIMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |1976| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@71|))) ))))
(assert (forall ((arg0@@291 T@U) (arg1@@165 T@U) (arg2@@115 T@U) (arg3@@81 T@U) ) (! (= (type (Maps.__default.MapLookupOption arg0@@291 arg1@@165 arg2@@115 arg3@@81)) DatatypeTypeType) :qid |funType:Maps.__default.MapLookupOption| :pattern ( (Maps.__default.MapLookupOption arg0@@291 arg1@@165 arg2@@115 arg3@@81)) )))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K T@U) (Maps._default.MapLookupOption$V T@U) (|m#0@@72| T@U) (|key#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K) TyType) (= (type Maps._default.MapLookupOption$V) TyType)) (= (type |m#0@@72|) (MapType BoxType BoxType))) (= (type |key#0@@5|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@72| |key#0@@5|) (and ($Is |m#0@@72| (TMap Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V)) ($IsBox |key#0@@5| Maps._default.MapLookupOption$K)))) ($Is (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@72| |key#0@@5|) (Tclass.Options.Option Maps._default.MapLookupOption$V))) :qid |unknown.0:0| :skolemid |1977| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@72| |key#0@@5|)) ))))
(assert (forall ((Maps._default.MapLookupOption$K@@0 T@U) (Maps._default.MapLookupOption$V@@0 T@U) (|m#0@@73| T@U) (|key#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@0) TyType) (= (type Maps._default.MapLookupOption$V@@0) TyType)) (= (type |m#0@@73|) (MapType BoxType BoxType))) (= (type |key#0@@6|) BoxType)) (and ($Is |m#0@@73| (TMap Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0)) ($IsBox |key#0@@6| Maps._default.MapLookupOption$K@@0))) (and (=> (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@73| |key#0@@6|) true) (=> true (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@73| |key#0@@6|)))) :qid |unknown.0:0| :skolemid |1978| :pattern ( (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@73| |key#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@1 T@U) (Maps._default.MapLookupOption$V@@1 T@U) (|m#0@@74| T@U) (|key#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@1) TyType) (= (type Maps._default.MapLookupOption$V@@1) TyType)) (= (type |m#0@@74|) (MapType BoxType BoxType))) (= (type |key#0@@7|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@74| |key#0@@7|) (and ($Is |m#0@@74| (TMap Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1)) ($IsBox |key#0@@7| Maps._default.MapLookupOption$K@@1)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@74| |key#0@@7|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@74|) |key#0@@7|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |m#0@@74|) |key#0@@7|)) |#Options.Option.None|))) :qid |unknown.0:0| :skolemid |1979| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@74| |key#0@@7|)) ))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@2 T@U) (Maps._default.MapLookupOption$V@@2 T@U) (|m#0@@75| T@U) (|key#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@2) TyType) (= (type Maps._default.MapLookupOption$V@@2) TyType)) (= (type |m#0@@75|) (MapType BoxType BoxType))) (= (type |key#0@@8|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@75|) |key#0@@8|) (and ($Is |m#0@@75| (TMap Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2)) ($IsBox |key#0@@8| Maps._default.MapLookupOption$K@@2)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@75|) |key#0@@8|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@75|) |key#0@@8|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@75|)) |key#0@@8|)) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |1980| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@75|) |key#0@@8|)) ))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@3 T@U) (Maps._default.MapLookupOption$V@@3 T@U) (|m#0@@76| T@U) (|key#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@3) TyType) (= (type Maps._default.MapLookupOption$V@@3) TyType)) (= (type |m#0@@76|) (MapType BoxType BoxType))) (= (type |key#0@@9|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@76|) (Lit |key#0@@9|)) (and ($Is |m#0@@76| (TMap Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3)) ($IsBox |key#0@@9| Maps._default.MapLookupOption$K@@3)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@76|) (Lit |key#0@@9|)) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@76|) |key#0@@9|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@76|)) (Lit |key#0@@9|))) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |1981| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@76|) (Lit |key#0@@9|))) ))))
(assert (forall ((arg0@@292 T@U) (arg1@@166 T@U) (arg2@@116 T@U) (arg3@@82 T@U) ) (! (= (type (Maps.__default.ImapLookupOption arg0@@292 arg1@@166 arg2@@116 arg3@@82)) DatatypeTypeType) :qid |funType:Maps.__default.ImapLookupOption| :pattern ( (Maps.__default.ImapLookupOption arg0@@292 arg1@@166 arg2@@116 arg3@@82)) )))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K T@U) (Maps._default.ImapLookupOption$V T@U) (|m#0@@77| T@U) (|key#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K) TyType) (= (type Maps._default.ImapLookupOption$V) TyType)) (= (type |m#0@@77|) (IMapType BoxType BoxType))) (= (type |key#0@@10|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@77| |key#0@@10|) (and ($Is |m#0@@77| (TIMap Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V)) ($IsBox |key#0@@10| Maps._default.ImapLookupOption$K)))) ($Is (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@77| |key#0@@10|) (Tclass.Options.Option Maps._default.ImapLookupOption$V))) :qid |unknown.0:0| :skolemid |1982| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@77| |key#0@@10|)) ))))
(assert (forall ((Maps._default.ImapLookupOption$K@@0 T@U) (Maps._default.ImapLookupOption$V@@0 T@U) (|m#0@@78| T@U) (|key#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@0) TyType) (= (type Maps._default.ImapLookupOption$V@@0) TyType)) (= (type |m#0@@78|) (IMapType BoxType BoxType))) (= (type |key#0@@11|) BoxType)) (and ($Is |m#0@@78| (TIMap Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0)) ($IsBox |key#0@@11| Maps._default.ImapLookupOption$K@@0))) (and (=> (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@78| |key#0@@11|) true) (=> true (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@78| |key#0@@11|)))) :qid |unknown.0:0| :skolemid |1983| :pattern ( (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@78| |key#0@@11|)) )))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@1 T@U) (Maps._default.ImapLookupOption$V@@1 T@U) (|m#0@@79| T@U) (|key#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@1) TyType) (= (type Maps._default.ImapLookupOption$V@@1) TyType)) (= (type |m#0@@79|) (IMapType BoxType BoxType))) (= (type |key#0@@12|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@79| |key#0@@12|) (and ($Is |m#0@@79| (TIMap Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1)) ($IsBox |key#0@@12| Maps._default.ImapLookupOption$K@@1)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@79| |key#0@@12|) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@79|) |key#0@@12|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| |m#0@@79|) |key#0@@12|)) |#Options.Option.None|))) :qid |unknown.0:0| :skolemid |1984| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@79| |key#0@@12|)) ))))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@2 T@U) (Maps._default.ImapLookupOption$V@@2 T@U) (|m#0@@80| T@U) (|key#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@2) TyType) (= (type Maps._default.ImapLookupOption$V@@2) TyType)) (= (type |m#0@@80|) (IMapType BoxType BoxType))) (= (type |key#0@@13|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@80|) (Lit |key#0@@13|)) (and ($Is |m#0@@80| (TIMap Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2)) ($IsBox |key#0@@13| Maps._default.ImapLookupOption$K@@2)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@80|) (Lit |key#0@@13|)) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@80|) |key#0@@13|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| (Lit |m#0@@80|)) (Lit |key#0@@13|))) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |1985| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@80|) (Lit |key#0@@13|))) ))))
(assert (= (type Tclass.Mathematics.__default) TyType))
(assert (= (Tag Tclass.Mathematics.__default) Tagclass.Mathematics.__default))
(assert (forall ((bx@@100 T@U) ) (!  (=> (and (= (type bx@@100) BoxType) ($IsBox bx@@100 Tclass.Mathematics.__default)) (and (= ($Box ($Unbox refType bx@@100)) bx@@100) ($Is ($Unbox refType bx@@100) Tclass.Mathematics.__default))) :qid |unknown.0:0| :skolemid |1986| :pattern ( ($IsBox bx@@100 Tclass.Mathematics.__default)) )))
(assert (forall (($o@@29 T@U) ) (!  (=> (= (type $o@@29) refType) (and (=> ($Is $o@@29 Tclass.Mathematics.__default) (or (= $o@@29 null) (= (dtype $o@@29) Tclass.Mathematics.__default))) (=> (or (= $o@@29 null) (= (dtype $o@@29) Tclass.Mathematics.__default)) ($Is $o@@29 Tclass.Mathematics.__default)))) :qid |unknown.0:0| :skolemid |1987| :pattern ( ($Is $o@@29 Tclass.Mathematics.__default)) )))
(assert (forall (($o@@30 T@U) ($h@@49 T@U) ) (!  (=> (and (= (type $o@@30) refType) (= (type $h@@49) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@30 Tclass.Mathematics.__default $h@@49) (or (= $o@@30 null) (U_2_bool (MapType1Select (MapType0Select $h@@49 $o@@30) alloc)))) (=> (or (= $o@@30 null) (U_2_bool (MapType1Select (MapType0Select $h@@49 $o@@30) alloc))) ($IsAlloc $o@@30 Tclass.Mathematics.__default $h@@49)))) :qid |unknown.0:0| :skolemid |1988| :pattern ( ($IsAlloc $o@@30 Tclass.Mathematics.__default $h@@49)) )))
(assert  (=> true (forall ((|a#0@@77| Int) (|b#0@@51| Int) ) (!  (=> true true) :qid |mathemat.3:15| :skolemid |1989| :pattern ( (Mathematics.__default.min |a#0@@77| |b#0@@51|)) ))))
(assert (forall ((|a#0@@78| Int) (|b#0@@52| Int) ) (!  (and (=> (|Mathematics.__default.min#requires| |a#0@@78| |b#0@@52|) true) (=> true (|Mathematics.__default.min#requires| |a#0@@78| |b#0@@52|))) :qid |mathemat.3:15| :skolemid |1990| :pattern ( (|Mathematics.__default.min#requires| |a#0@@78| |b#0@@52|)) )))
(assert  (=> true (forall ((|a#0@@79| Int) (|b#0@@53| Int) ) (!  (=> true (= (Mathematics.__default.min |a#0@@79| |b#0@@53|) (ite (< |a#0@@79| |b#0@@53|) |a#0@@79| |b#0@@53|))) :qid |mathemat.3:15| :skolemid |1991| :pattern ( (Mathematics.__default.min |a#0@@79| |b#0@@53|)) ))))
(assert  (=> true (forall ((|a#0@@80| Int) (|b#0@@54| Int) ) (!  (=> true (= (Mathematics.__default.min (LitInt |a#0@@80|) (LitInt |b#0@@54|)) (ite (< |a#0@@80| |b#0@@54|) |a#0@@80| |b#0@@54|))) :qid |mathemat.3:15| :weight 3 :skolemid |1992| :pattern ( (Mathematics.__default.min (LitInt |a#0@@80|) (LitInt |b#0@@54|))) ))))
(assert  (=> true (forall ((|a#0@@81| Int) (|b#0@@55| Int) ) (!  (=> true true) :qid |mathemat.11:15| :skolemid |1993| :pattern ( (Mathematics.__default.max |a#0@@81| |b#0@@55|)) ))))
(assert (forall ((|a#0@@82| Int) (|b#0@@56| Int) ) (!  (and (=> (|Mathematics.__default.max#requires| |a#0@@82| |b#0@@56|) true) (=> true (|Mathematics.__default.max#requires| |a#0@@82| |b#0@@56|))) :qid |mathemat.11:15| :skolemid |1994| :pattern ( (|Mathematics.__default.max#requires| |a#0@@82| |b#0@@56|)) )))
(assert  (=> true (forall ((|a#0@@83| Int) (|b#0@@57| Int) ) (!  (=> true (= (Mathematics.__default.max |a#0@@83| |b#0@@57|) (ite (< |a#0@@83| |b#0@@57|) |b#0@@57| |a#0@@83|))) :qid |mathemat.11:15| :skolemid |1995| :pattern ( (Mathematics.__default.max |a#0@@83| |b#0@@57|)) ))))
(assert  (=> true (forall ((|a#0@@84| Int) (|b#0@@58| Int) ) (!  (=> true (= (Mathematics.__default.max (LitInt |a#0@@84|) (LitInt |b#0@@58|)) (ite (< |a#0@@84| |b#0@@58|) |b#0@@58| |a#0@@84|))) :qid |mathemat.11:15| :weight 3 :skolemid |1996| :pattern ( (Mathematics.__default.max (LitInt |a#0@@84|) (LitInt |b#0@@58|))) ))))
(assert (forall ((arg0@@293 T@U) (arg1@@167 T@U) ) (! (= (type (Mathematics.__default.Set arg0@@293 arg1@@167)) (MapType0Type BoxType boolType)) :qid |funType:Mathematics.__default.Set| :pattern ( (Mathematics.__default.Set arg0@@293 arg1@@167)) )))
(assert  (=> true (forall ((Mathematics._default.Set$T T@U) (|ms#0| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T) TyType) (= (type |ms#0|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T |ms#0|) ($Is |ms#0| (TMultiSet Mathematics._default.Set$T)))) ($Is (Mathematics.__default.Set Mathematics._default.Set$T |ms#0|) (TSet Mathematics._default.Set$T))) :qid |unknown.0:0| :skolemid |1997| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T |ms#0|)) ))))
(assert (forall ((Mathematics._default.Set$T@@0 T@U) (|ms#0@@0| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@0) TyType) (= (type |ms#0@@0|) (MapType0Type BoxType intType))) ($Is |ms#0@@0| (TMultiSet Mathematics._default.Set$T@@0))) (and (=> (|Mathematics.__default.Set#requires| Mathematics._default.Set$T@@0 |ms#0@@0|) true) (=> true (|Mathematics.__default.Set#requires| Mathematics._default.Set$T@@0 |ms#0@@0|)))) :qid |unknown.0:0| :skolemid |1998| :pattern ( (|Mathematics.__default.Set#requires| Mathematics._default.Set$T@@0 |ms#0@@0|)) )))
(assert  (=> true (forall ((Mathematics._default.Set$T@@1 T@U) (|ms#0@@1| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@1) TyType) (= (type |ms#0@@1|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T@@1 |ms#0@@1|) ($Is |ms#0@@1| (TMultiSet Mathematics._default.Set$T@@1)))) (= (Mathematics.__default.Set Mathematics._default.Set$T@@1 |ms#0@@1|) (|lambda#8| Mathematics._default.Set$T@@1 |ms#0@@1| 0))) :qid |unknown.0:0| :skolemid |1999| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T@@1 |ms#0@@1|)) ))))
(assert  (=> true (forall ((Mathematics._default.Set$T@@2 T@U) (|ms#0@@2| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@2) TyType) (= (type |ms#0@@2|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T@@2 (Lit |ms#0@@2|)) ($Is |ms#0@@2| (TMultiSet Mathematics._default.Set$T@@2)))) (= (Mathematics.__default.Set Mathematics._default.Set$T@@2 (Lit |ms#0@@2|)) (|lambda#8| Mathematics._default.Set$T@@2 (Lit |ms#0@@2|) 0))) :qid |unknown.0:0| :weight 3 :skolemid |2000| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T@@2 (Lit |ms#0@@2|))) ))))
(assert (forall ((arg0@@294 T@U) (arg1@@168 T@U) ) (! (= (type (Mathematics.__default.ISet arg0@@294 arg1@@168)) (MapType0Type BoxType boolType)) :qid |funType:Mathematics.__default.ISet| :pattern ( (Mathematics.__default.ISet arg0@@294 arg1@@168)) )))
(assert  (=> true (forall ((Mathematics._default.ISet$T T@U) (|ms#0@@3| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T) TyType) (= (type |ms#0@@3|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T |ms#0@@3|) ($Is |ms#0@@3| (TSet Mathematics._default.ISet$T)))) ($Is (Mathematics.__default.ISet Mathematics._default.ISet$T |ms#0@@3|) (TISet Mathematics._default.ISet$T))) :qid |unknown.0:0| :skolemid |2001| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T |ms#0@@3|)) ))))
(assert (forall ((Mathematics._default.ISet$T@@0 T@U) (|ms#0@@4| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@0) TyType) (= (type |ms#0@@4|) (MapType0Type BoxType boolType))) ($Is |ms#0@@4| (TSet Mathematics._default.ISet$T@@0))) (and (=> (|Mathematics.__default.ISet#requires| Mathematics._default.ISet$T@@0 |ms#0@@4|) true) (=> true (|Mathematics.__default.ISet#requires| Mathematics._default.ISet$T@@0 |ms#0@@4|)))) :qid |unknown.0:0| :skolemid |2002| :pattern ( (|Mathematics.__default.ISet#requires| Mathematics._default.ISet$T@@0 |ms#0@@4|)) )))
(assert  (=> true (forall ((Mathematics._default.ISet$T@@1 T@U) (|ms#0@@5| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@1) TyType) (= (type |ms#0@@5|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T@@1 |ms#0@@5|) ($Is |ms#0@@5| (TSet Mathematics._default.ISet$T@@1)))) (= (Mathematics.__default.ISet Mathematics._default.ISet$T@@1 |ms#0@@5|) (|lambda#68| Mathematics._default.ISet$T@@1 |ms#0@@5|))) :qid |unknown.0:0| :skolemid |2003| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T@@1 |ms#0@@5|)) ))))
(assert  (=> true (forall ((Mathematics._default.ISet$T@@2 T@U) (|ms#0@@6| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@2) TyType) (= (type |ms#0@@6|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)) ($Is |ms#0@@6| (TSet Mathematics._default.ISet$T@@2)))) (= (Mathematics.__default.ISet Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)) (|lambda#68| Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)))) :qid |unknown.0:0| :weight 3 :skolemid |2004| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|))) ))))
(assert (= (type Tclass.Arrays.__default) TyType))
(assert (= (Tag Tclass.Arrays.__default) Tagclass.Arrays.__default))
(assert (forall ((bx@@101 T@U) ) (!  (=> (and (= (type bx@@101) BoxType) ($IsBox bx@@101 Tclass.Arrays.__default)) (and (= ($Box ($Unbox refType bx@@101)) bx@@101) ($Is ($Unbox refType bx@@101) Tclass.Arrays.__default))) :qid |unknown.0:0| :skolemid |2005| :pattern ( ($IsBox bx@@101 Tclass.Arrays.__default)) )))
(assert (forall (($o@@31 T@U) ) (!  (=> (= (type $o@@31) refType) (and (=> ($Is $o@@31 Tclass.Arrays.__default) (or (= $o@@31 null) (= (dtype $o@@31) Tclass.Arrays.__default))) (=> (or (= $o@@31 null) (= (dtype $o@@31) Tclass.Arrays.__default)) ($Is $o@@31 Tclass.Arrays.__default)))) :qid |unknown.0:0| :skolemid |2006| :pattern ( ($Is $o@@31 Tclass.Arrays.__default)) )))
(assert (forall (($o@@32 T@U) ($h@@50 T@U) ) (!  (=> (and (= (type $o@@32) refType) (= (type $h@@50) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@32 Tclass.Arrays.__default $h@@50) (or (= $o@@32 null) (U_2_bool (MapType1Select (MapType0Select $h@@50 $o@@32) alloc)))) (=> (or (= $o@@32 null) (U_2_bool (MapType1Select (MapType0Select $h@@50 $o@@32) alloc))) ($IsAlloc $o@@32 Tclass.Arrays.__default $h@@50)))) :qid |unknown.0:0| :skolemid |2007| :pattern ( ($IsAlloc $o@@32 Tclass.Arrays.__default $h@@50)) )))
(assert  (=> true (forall ((Arrays._default.Aliases$T T@U) (Arrays._default.Aliases$U T@U) (|a1#0| T@U) (|a2#0| T@U) ) (!  (=> (and (and (and (and (= (type Arrays._default.Aliases$T) TyType) (= (type Arrays._default.Aliases$U) TyType)) (= (type |a1#0|) refType)) (= (type |a2#0|) refType)) (or (|Arrays.__default.Aliases#canCall| Arrays._default.Aliases$T Arrays._default.Aliases$U |a1#0| |a2#0|) (and ($Is |a1#0| (Tclass._System.array Arrays._default.Aliases$T)) ($Is |a2#0| (Tclass._System.array Arrays._default.Aliases$U))))) true) :qid |unknown.0:0| :skolemid |2008| :pattern ( (Arrays.__default.Aliases Arrays._default.Aliases$T Arrays._default.Aliases$U |a1#0| |a2#0|)) ))))
(assert (forall ((Arrays._default.Aliases$T@@0 T@U) (Arrays._default.Aliases$U@@0 T@U) (|a1#0@@0| T@U) (|a2#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Arrays._default.Aliases$T@@0) TyType) (= (type Arrays._default.Aliases$U@@0) TyType)) (= (type |a1#0@@0|) refType)) (= (type |a2#0@@0|) refType)) (and ($Is |a1#0@@0| (Tclass._System.array Arrays._default.Aliases$T@@0)) ($Is |a2#0@@0| (Tclass._System.array Arrays._default.Aliases$U@@0)))) (and (=> (|Arrays.__default.Aliases#requires| Arrays._default.Aliases$T@@0 Arrays._default.Aliases$U@@0 |a1#0@@0| |a2#0@@0|) true) (=> true (|Arrays.__default.Aliases#requires| Arrays._default.Aliases$T@@0 Arrays._default.Aliases$U@@0 |a1#0@@0| |a2#0@@0|)))) :qid |unknown.0:0| :skolemid |2009| :pattern ( (|Arrays.__default.Aliases#requires| Arrays._default.Aliases$T@@0 Arrays._default.Aliases$U@@0 |a1#0@@0| |a2#0@@0|)) )))
(assert  (=> true (forall ((Arrays._default.Aliases$T@@1 T@U) (Arrays._default.Aliases$U@@1 T@U) (|a1#0@@1| T@U) (|a2#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Arrays._default.Aliases$T@@1) TyType) (= (type Arrays._default.Aliases$U@@1) TyType)) (= (type |a1#0@@1|) refType)) (= (type |a2#0@@1|) refType)) (or (|Arrays.__default.Aliases#canCall| Arrays._default.Aliases$T@@1 Arrays._default.Aliases$U@@1 |a1#0@@1| |a2#0@@1|) (and ($Is |a1#0@@1| (Tclass._System.array Arrays._default.Aliases$T@@1)) ($Is |a2#0@@1| (Tclass._System.array Arrays._default.Aliases$U@@1))))) (and (=> (Arrays.__default.Aliases Arrays._default.Aliases$T@@1 Arrays._default.Aliases$U@@1 |a1#0@@1| |a2#0@@1|) (= |a1#0@@1| |a2#0@@1|)) (=> (= |a1#0@@1| |a2#0@@1|) (Arrays.__default.Aliases Arrays._default.Aliases$T@@1 Arrays._default.Aliases$U@@1 |a1#0@@1| |a2#0@@1|)))) :qid |unknown.0:0| :skolemid |2010| :pattern ( (Arrays.__default.Aliases Arrays._default.Aliases$T@@1 Arrays._default.Aliases$U@@1 |a1#0@@1| |a2#0@@1|)) ))))
(assert  (=> true (forall ((Arrays._default.Aliases$T@@2 T@U) (Arrays._default.Aliases$U@@2 T@U) (|a1#0@@2| T@U) (|a2#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Arrays._default.Aliases$T@@2) TyType) (= (type Arrays._default.Aliases$U@@2) TyType)) (= (type |a1#0@@2|) refType)) (= (type |a2#0@@2|) refType)) (or (|Arrays.__default.Aliases#canCall| Arrays._default.Aliases$T@@2 Arrays._default.Aliases$U@@2 (Lit |a1#0@@2|) (Lit |a2#0@@2|)) (and ($Is |a1#0@@2| (Tclass._System.array Arrays._default.Aliases$T@@2)) ($Is |a2#0@@2| (Tclass._System.array Arrays._default.Aliases$U@@2))))) (and (=> (Arrays.__default.Aliases Arrays._default.Aliases$T@@2 Arrays._default.Aliases$U@@2 (Lit |a1#0@@2|) (Lit |a2#0@@2|)) (= (Lit |a1#0@@2|) (Lit |a2#0@@2|))) (=> (= (Lit |a1#0@@2|) (Lit |a2#0@@2|)) (Arrays.__default.Aliases Arrays._default.Aliases$T@@2 Arrays._default.Aliases$U@@2 (Lit |a1#0@@2|) (Lit |a2#0@@2|))))) :qid |unknown.0:0| :weight 3 :skolemid |2011| :pattern ( (Arrays.__default.Aliases Arrays._default.Aliases$T@@2 Arrays._default.Aliases$U@@2 (Lit |a1#0@@2|) (Lit |a2#0@@2|))) ))))
(assert (= (type Tclass.Byte__Order.__default) TyType))
(assert (= (Tag Tclass.Byte__Order.__default) Tagclass.Byte__Order.__default))
(assert (forall ((bx@@102 T@U) ) (!  (=> (and (= (type bx@@102) BoxType) ($IsBox bx@@102 Tclass.Byte__Order.__default)) (and (= ($Box ($Unbox refType bx@@102)) bx@@102) ($Is ($Unbox refType bx@@102) Tclass.Byte__Order.__default))) :qid |unknown.0:0| :skolemid |2012| :pattern ( ($IsBox bx@@102 Tclass.Byte__Order.__default)) )))
(assert (forall (($o@@33 T@U) ) (!  (=> (= (type $o@@33) refType) (and (=> ($Is $o@@33 Tclass.Byte__Order.__default) (or (= $o@@33 null) (= (dtype $o@@33) Tclass.Byte__Order.__default))) (=> (or (= $o@@33 null) (= (dtype $o@@33) Tclass.Byte__Order.__default)) ($Is $o@@33 Tclass.Byte__Order.__default)))) :qid |unknown.0:0| :skolemid |2013| :pattern ( ($Is $o@@33 Tclass.Byte__Order.__default)) )))
(assert (forall (($o@@34 T@U) ($h@@51 T@U) ) (!  (=> (and (= (type $o@@34) refType) (= (type $h@@51) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@34 Tclass.Byte__Order.__default $h@@51) (or (= $o@@34 null) (U_2_bool (MapType1Select (MapType0Select $h@@51 $o@@34) alloc)))) (=> (or (= $o@@34 null) (U_2_bool (MapType1Select (MapType0Select $h@@51 $o@@34) alloc))) ($IsAlloc $o@@34 Tclass.Byte__Order.__default $h@@51)))) :qid |unknown.0:0| :skolemid |2014| :pattern ( ($IsAlloc $o@@34 Tclass.Byte__Order.__default $h@@51)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) Byte__Order.__default.SomeElement) (< Byte__Order.__default.SomeElement 256)))))
(assert  (=> |Byte__Order.__default.SomeElement#requires| true))
(assert  (=> true |Byte__Order.__default.SomeElement#requires|))
(assert  (=> true (=> true (= Byte__Order.__default.SomeElement (LitInt 0)))))
(assert  (=> true (=> true (= Byte__Order.__default.SomeElement (LitInt 0)))))
(assert (forall (($ly@@272 T@U) (|a#0@@85| Int) (|b#0@@59| Int) ) (!  (=> (= (type $ly@@272) LayerTypeType) (and (=> (Byte__Order.__default.lte ($LS $ly@@272) |a#0@@85| |b#0@@59|) (Byte__Order.__default.lte $ly@@272 |a#0@@85| |b#0@@59|)) (=> (Byte__Order.__default.lte $ly@@272 |a#0@@85| |b#0@@59|) (Byte__Order.__default.lte ($LS $ly@@272) |a#0@@85| |b#0@@59|)))) :qid |totalord.926:30| :skolemid |2015| :pattern ( (Byte__Order.__default.lte ($LS $ly@@272) |a#0@@85| |b#0@@59|)) )))
(assert (forall (($ly@@273 T@U) (|a#0@@86| Int) (|b#0@@60| Int) ) (!  (=> (= (type $ly@@273) LayerTypeType) (and (=> (Byte__Order.__default.lte $ly@@273 |a#0@@86| |b#0@@60|) (Byte__Order.__default.lte $LZ |a#0@@86| |b#0@@60|)) (=> (Byte__Order.__default.lte $LZ |a#0@@86| |b#0@@60|) (Byte__Order.__default.lte $ly@@273 |a#0@@86| |b#0@@60|)))) :qid |totalord.926:30| :skolemid |2016| :pattern ( (Byte__Order.__default.lte (AsFuelBottom $ly@@273) |a#0@@86| |b#0@@60|)) )))
(assert (= (type StartFuel_Byte_Order._default.ltedef) LayerTypeType))
(assert  (=> true (forall (($ly@@274 T@U) (|a#0@@87| Int) (|b#0@@61| Int) ) (!  (=> (and (= (type $ly@@274) LayerTypeType) (or (|Byte__Order.__default.lte#canCall| |a#0@@87| |b#0@@61|) (and (and (<= (LitInt 0) |a#0@@87|) (< |a#0@@87| 256)) (and (<= (LitInt 0) |b#0@@61|) (< |b#0@@61| 256))))) (and (and (and (and (and (and (and (=> (Byte__Order.__default.lte $ly@@274 |a#0@@87| |b#0@@61|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@87| |b#0@@61|)) (=> (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@87| |b#0@@61|) (Byte__Order.__default.lte $ly@@274 |a#0@@87| |b#0@@61|))) (or (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@87| |b#0@@61|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#0@@61| |a#0@@87|))) (forall ((|a#1@@0| Int) (|b#1@@0| Int) (|c#0@@10| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |a#1@@0|) (< |a#1@@0| 256)) (and (<= (LitInt 0) |b#1@@0|) (< |b#1@@0| 256))) (and (<= (LitInt 0) |c#0@@10|) (< |c#0@@10| 256))) (=> (and (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#1@@0| |b#1@@0|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#1@@0| |c#0@@10|)) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#1@@0| |c#0@@10|))) :qid |totalord.20:18| :skolemid |2017| :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#1@@0| |c#0@@10|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#1@@0| |c#0@@10|)) :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#1@@0| |c#0@@10|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#1@@0| |b#1@@0|)) ))) (and (=> (Byte__Order.__default.lte $ly@@274 |a#0@@87| |b#0@@61|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@87| |b#0@@61|)) (=> (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@87| |b#0@@61|) (Byte__Order.__default.lte $ly@@274 |a#0@@87| |b#0@@61|)))) (or (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@87| |b#0@@61|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#0@@61| |a#0@@87|))) (=> (and (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@87| |b#0@@61|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#0@@61| |a#0@@87|)) (= |a#0@@87| |b#0@@61|))) (forall ((|a#2| Int) (|b#2| Int) (|c#1| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |a#2|) (< |a#2| 256)) (and (<= (LitInt 0) |b#2|) (< |b#2| 256))) (and (<= (LitInt 0) |c#1|) (< |c#1| 256))) (=> (and (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#2| |b#2|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#2| |c#1|)) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#2| |c#1|))) :qid |totalord.188:18| :skolemid |2018| :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#2| |c#1|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#2| |c#1|)) :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#2| |c#1|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#2| |b#2|)) )))) :qid |totalord.926:30| :skolemid |2019| :pattern ( (Byte__Order.__default.lte $ly@@274 |a#0@@87| |b#0@@61|)) ))))
(assert (forall (($ly@@275 T@U) (|a#0@@88| Int) (|b#0@@62| Int) ) (!  (=> (= (type $ly@@275) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@88|) (< |a#0@@88| 256)) (and (<= (LitInt 0) |b#0@@62|) (< |b#0@@62| 256))) (and (=> (|Byte__Order.__default.lte#requires| $ly@@275 |a#0@@88| |b#0@@62|) true) (=> true (|Byte__Order.__default.lte#requires| $ly@@275 |a#0@@88| |b#0@@62|))))) :qid |totalord.926:30| :skolemid |2020| :pattern ( (|Byte__Order.__default.lte#requires| $ly@@275 |a#0@@88| |b#0@@62|)) )))
(assert  (and (= (type MoreFuel_Byte_Order._default.ltedef0) LayerTypeType) (= (type StartFuelAssert_Byte_Order._default.ltedef) LayerTypeType)))
(assert  (=> true (forall (($ly@@276 T@U) (|a#0@@89| Int) (|b#0@@63| Int) ) (!  (=> (and (= (type $ly@@276) LayerTypeType) (or (|Byte__Order.__default.lte#canCall| |a#0@@89| |b#0@@63|) (and (and (<= (LitInt 0) |a#0@@89|) (< |a#0@@89| 256)) (and (<= (LitInt 0) |b#0@@63|) (< |b#0@@63| 256))))) (and (and (and (= StartFuel_Byte_Order._default.ltedef ($LS MoreFuel_Byte_Order._default.ltedef0)) (= StartFuelAssert_Byte_Order._default.ltedef ($LS ($LS MoreFuel_Byte_Order._default.ltedef0)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.ltedef0) MoreFuel_Byte_Order._default.ltedef0)) (and (=> (Byte__Order.__default.lte ($LS $ly@@276) |a#0@@89| |b#0@@63|) (<= |a#0@@89| |b#0@@63|)) (=> (<= |a#0@@89| |b#0@@63|) (Byte__Order.__default.lte ($LS $ly@@276) |a#0@@89| |b#0@@63|))))) :qid |totalord.926:30| :skolemid |2021| :pattern ( (Byte__Order.__default.lte ($LS $ly@@276) |a#0@@89| |b#0@@63|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.ltedef1) LayerTypeType))
(assert  (=> true (forall (($ly@@277 T@U) (|a#0@@90| Int) (|b#0@@64| Int) ) (!  (=> (and (= (type $ly@@277) LayerTypeType) (or (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@90|) (LitInt |b#0@@64|)) (and (and (<= (LitInt 0) |a#0@@90|) (< |a#0@@90| 256)) (and (<= (LitInt 0) |b#0@@64|) (< |b#0@@64| 256))))) (and (and (and (= StartFuel_Byte_Order._default.ltedef ($LS MoreFuel_Byte_Order._default.ltedef1)) (= StartFuelAssert_Byte_Order._default.ltedef ($LS ($LS MoreFuel_Byte_Order._default.ltedef1)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.ltedef1) MoreFuel_Byte_Order._default.ltedef1)) (and (=> (Byte__Order.__default.lte ($LS $ly@@277) (LitInt |a#0@@90|) (LitInt |b#0@@64|)) (<= (LitInt |a#0@@90|) (LitInt |b#0@@64|))) (=> (<= (LitInt |a#0@@90|) (LitInt |b#0@@64|)) (Byte__Order.__default.lte ($LS $ly@@277) (LitInt |a#0@@90|) (LitInt |b#0@@64|)))))) :qid |totalord.926:30| :weight 3 :skolemid |2022| :pattern ( (Byte__Order.__default.lte ($LS $ly@@277) (LitInt |a#0@@90|) (LitInt |b#0@@64|))) ))))
(assert (forall (($ly@@278 T@U) (|a#0@@91| Int) (|b#0@@65| Int) ) (!  (=> (= (type $ly@@278) LayerTypeType) (and (=> (Byte__Order.__default.ltedef ($LS $ly@@278) |a#0@@91| |b#0@@65|) (Byte__Order.__default.ltedef $ly@@278 |a#0@@91| |b#0@@65|)) (=> (Byte__Order.__default.ltedef $ly@@278 |a#0@@91| |b#0@@65|) (Byte__Order.__default.ltedef ($LS $ly@@278) |a#0@@91| |b#0@@65|)))) :qid |totalord.931:30| :skolemid |2023| :pattern ( (Byte__Order.__default.ltedef ($LS $ly@@278) |a#0@@91| |b#0@@65|)) )))
(assert (forall (($ly@@279 T@U) (|a#0@@92| Int) (|b#0@@66| Int) ) (!  (=> (= (type $ly@@279) LayerTypeType) (and (=> (Byte__Order.__default.ltedef $ly@@279 |a#0@@92| |b#0@@66|) (Byte__Order.__default.ltedef $LZ |a#0@@92| |b#0@@66|)) (=> (Byte__Order.__default.ltedef $LZ |a#0@@92| |b#0@@66|) (Byte__Order.__default.ltedef $ly@@279 |a#0@@92| |b#0@@66|)))) :qid |totalord.931:30| :skolemid |2024| :pattern ( (Byte__Order.__default.ltedef (AsFuelBottom $ly@@279) |a#0@@92| |b#0@@66|)) )))
(assert  (=> true (forall (($ly@@280 T@U) (|a#0@@93| Int) (|b#0@@67| Int) ) (!  (=> (and (= (type $ly@@280) LayerTypeType) (or (|Byte__Order.__default.ltedef#canCall| |a#0@@93| |b#0@@67|) (and (and (<= (LitInt 0) |a#0@@93|) (< |a#0@@93| 256)) (and (<= (LitInt 0) |b#0@@67|) (< |b#0@@67| 256))))) true) :qid |totalord.931:30| :skolemid |2025| :pattern ( (Byte__Order.__default.ltedef $ly@@280 |a#0@@93| |b#0@@67|)) ))))
(assert (forall (($ly@@281 T@U) (|a#0@@94| Int) (|b#0@@68| Int) ) (!  (=> (= (type $ly@@281) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@94|) (< |a#0@@94| 256)) (and (<= (LitInt 0) |b#0@@68|) (< |b#0@@68| 256))) (and (=> (|Byte__Order.__default.ltedef#requires| $ly@@281 |a#0@@94| |b#0@@68|) true) (=> true (|Byte__Order.__default.ltedef#requires| $ly@@281 |a#0@@94| |b#0@@68|))))) :qid |totalord.931:30| :skolemid |2026| :pattern ( (|Byte__Order.__default.ltedef#requires| $ly@@281 |a#0@@94| |b#0@@68|)) )))
(assert  (=> true (forall (($ly@@282 T@U) (|a#0@@95| Int) (|b#0@@69| Int) ) (!  (=> (and (= (type $ly@@282) LayerTypeType) (or (|Byte__Order.__default.ltedef#canCall| |a#0@@95| |b#0@@69|) (and (and (<= (LitInt 0) |a#0@@95|) (< |a#0@@95| 256)) (and (<= (LitInt 0) |b#0@@69|) (< |b#0@@69| 256))))) (and (=> (Byte__Order.__default.ltedef ($LS $ly@@282) |a#0@@95| |b#0@@69|) (<= |a#0@@95| |b#0@@69|)) (=> (<= |a#0@@95| |b#0@@69|) (Byte__Order.__default.ltedef ($LS $ly@@282) |a#0@@95| |b#0@@69|)))) :qid |totalord.931:30| :skolemid |2027| :pattern ( (Byte__Order.__default.ltedef ($LS $ly@@282) |a#0@@95| |b#0@@69|)) ))))
(assert  (=> true (forall (($ly@@283 T@U) (|a#0@@96| Int) (|b#0@@70| Int) ) (!  (=> (and (= (type $ly@@283) LayerTypeType) (or (|Byte__Order.__default.ltedef#canCall| (LitInt |a#0@@96|) (LitInt |b#0@@70|)) (and (and (<= (LitInt 0) |a#0@@96|) (< |a#0@@96| 256)) (and (<= (LitInt 0) |b#0@@70|) (< |b#0@@70| 256))))) (and (=> (Byte__Order.__default.ltedef ($LS $ly@@283) (LitInt |a#0@@96|) (LitInt |b#0@@70|)) (<= (LitInt |a#0@@96|) (LitInt |b#0@@70|))) (=> (<= (LitInt |a#0@@96|) (LitInt |b#0@@70|)) (Byte__Order.__default.ltedef ($LS $ly@@283) (LitInt |a#0@@96|) (LitInt |b#0@@70|))))) :qid |totalord.931:30| :weight 3 :skolemid |2028| :pattern ( (Byte__Order.__default.ltedef ($LS $ly@@283) (LitInt |a#0@@96|) (LitInt |b#0@@70|))) ))))
(assert (forall (($ly@@284 T@U) (|run#0@@68| T@U) (|needle#0@@13| Int) ) (!  (=> (and (= (type $ly@@284) LayerTypeType) (= (type |run#0@@68|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLte ($LS $ly@@284) |run#0@@68| |needle#0@@13|) (Byte__Order.__default.LargestLte $ly@@284 |run#0@@68| |needle#0@@13|))) :qid |totalord.253:12| :skolemid |2029| :pattern ( (Byte__Order.__default.LargestLte ($LS $ly@@284) |run#0@@68| |needle#0@@13|)) )))
(assert (forall (($ly@@285 T@U) (|run#0@@69| T@U) (|needle#0@@14| Int) ) (!  (=> (and (= (type $ly@@285) LayerTypeType) (= (type |run#0@@69|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLte $ly@@285 |run#0@@69| |needle#0@@14|) (Byte__Order.__default.LargestLte $LZ |run#0@@69| |needle#0@@14|))) :qid |totalord.253:12| :skolemid |2030| :pattern ( (Byte__Order.__default.LargestLte (AsFuelBottom $ly@@285) |run#0@@69| |needle#0@@14|)) )))
(assert  (and (= (type StartFuel_Byte_Order._default.IsSorted) LayerTypeType) (= (type StartFuel_Byte_Order._default.lte) LayerTypeType)))
(assert  (=> true (forall (($ly@@286 T@U) (|run#0@@70| T@U) (|needle#0@@15| Int) ) (!  (=> (and (and (= (type $ly@@286) LayerTypeType) (= (type |run#0@@70|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLte#canCall| |run#0@@70| |needle#0@@15|) (and (and ($Is |run#0@@70| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@15|) (< |needle#0@@15| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@70|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Byte__Order.__default.LargestLte $ly@@286 |run#0@@70| |needle#0@@15|)) (< (Byte__Order.__default.LargestLte $ly@@286 |run#0@@70| |needle#0@@15|) (|Seq#Length| |run#0@@70|))) (forall ((|i#0@@66| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@66|) (<= |i#0@@66| (Byte__Order.__default.LargestLte $ly@@286 |run#0@@70| |needle#0@@15|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@70| |i#0@@66|))) |needle#0@@15|))) :qid |totalord.256:20| :skolemid |2031| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@70| |i#0@@66|))) ))) (forall ((|i#1@@11| Int) ) (!  (=> true (=> (and (< (Byte__Order.__default.LargestLte $ly@@286 |run#0@@70| |needle#0@@15|) |i#1@@11|) (< |i#1@@11| (|Seq#Length| |run#0@@70|))) (Byte__Order.__default.lt |needle#0@@15| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@70| |i#1@@11|)))))) :qid |totalord.257:20| :skolemid |2032| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@70| |i#1@@11|))) ))) (=> (|Seq#Contains| |run#0@@70| ($Box (int_2_U |needle#0@@15|))) (and (<= (LitInt 0) (Byte__Order.__default.LargestLte $ly@@286 |run#0@@70| |needle#0@@15|)) (= (U_2_int ($Unbox intType (|Seq#Index| |run#0@@70| (Byte__Order.__default.LargestLte $ly@@286 |run#0@@70| |needle#0@@15|)))) |needle#0@@15|))))) :qid |totalord.253:12| :skolemid |2033| :pattern ( (Byte__Order.__default.LargestLte $ly@@286 |run#0@@70| |needle#0@@15|)) ))))
(assert (forall (($ly@@287 T@U) (|run#0@@71| T@U) (|needle#0@@16| Int) ) (!  (=> (and (and (= (type $ly@@287) LayerTypeType) (= (type |run#0@@71|) (SeqType BoxType))) (and ($Is |run#0@@71| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@16|) (< |needle#0@@16| 256)))) (and (=> (|Byte__Order.__default.LargestLte#requires| $ly@@287 |run#0@@71| |needle#0@@16|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@71|)) (=> (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@71|) (|Byte__Order.__default.LargestLte#requires| $ly@@287 |run#0@@71| |needle#0@@16|)))) :qid |totalord.253:12| :skolemid |2034| :pattern ( (|Byte__Order.__default.LargestLte#requires| $ly@@287 |run#0@@71| |needle#0@@16|)) )))
(assert  (and (= (type MoreFuel_Byte_Order._default.IsSorted0) LayerTypeType) (= (type StartFuelAssert_Byte_Order._default.IsSorted) LayerTypeType)))
(assert  (=> true (forall (($ly@@288 T@U) (|run#0@@72| T@U) (|needle#0@@17| Int) ) (!  (=> (and (and (= (type $ly@@288) LayerTypeType) (= (type |run#0@@72|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLte#canCall| |run#0@@72| |needle#0@@17|) (and (and ($Is |run#0@@72| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@17|) (< |needle#0@@17| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@72|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@72|) (LitInt 0))) (|Byte__Order.__default.lt#canCall| |needle#0@@17| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@72| (LitInt 0)))))) (=> (not (or (= (|Seq#Length| |run#0@@72|) (LitInt 0)) (Byte__Order.__default.lt |needle#0@@17| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@72| (LitInt 0))))))) (|Byte__Order.__default.LargestLte#canCall| (|Seq#Drop| |run#0@@72| (LitInt 1)) |needle#0@@17|))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted0)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted0)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted0) MoreFuel_Byte_Order._default.IsSorted0)) (= (Byte__Order.__default.LargestLte ($LS $ly@@288) |run#0@@72| |needle#0@@17|) (ite  (or (= (|Seq#Length| |run#0@@72|) (LitInt 0)) (Byte__Order.__default.lt |needle#0@@17| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@72| (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLte $ly@@288 (|Seq#Drop| |run#0@@72| (LitInt 1)) |needle#0@@17|))))))) :qid |totalord.253:12| :skolemid |2035| :pattern ( (Byte__Order.__default.LargestLte ($LS $ly@@288) |run#0@@72| |needle#0@@17|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted1) LayerTypeType))
(assert  (=> true (forall (($ly@@289 T@U) (|run#0@@73| T@U) (|needle#0@@18| Int) ) (!  (=> (and (and (= (type $ly@@289) LayerTypeType) (= (type |run#0@@73|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLte#canCall| (Lit |run#0@@73|) (LitInt |needle#0@@18|)) (and (and ($Is |run#0@@73| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@18|) (< |needle#0@@18| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@73|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@73|)) (LitInt 0))) (|Byte__Order.__default.lt#canCall| (LitInt |needle#0@@18|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@73|) (LitInt 0)))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@73|)) (LitInt 0)) (Byte__Order.__default.lt (LitInt |needle#0@@18|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@73|) (LitInt 0))))))) (|Byte__Order.__default.LargestLte#canCall| (Lit (|Seq#Drop| (Lit |run#0@@73|) (LitInt 1))) (LitInt |needle#0@@18|)))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted1)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted1)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted1) MoreFuel_Byte_Order._default.IsSorted1)) (= (Byte__Order.__default.LargestLte ($LS $ly@@289) (Lit |run#0@@73|) (LitInt |needle#0@@18|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@73|)) (LitInt 0)) (Byte__Order.__default.lt (LitInt |needle#0@@18|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@73|) (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLte ($LS $ly@@289) (Lit (|Seq#Drop| (Lit |run#0@@73|) (LitInt 1))) (LitInt |needle#0@@18|)))))))) :qid |totalord.253:12| :weight 3 :skolemid |2036| :pattern ( (Byte__Order.__default.LargestLte ($LS $ly@@289) (Lit |run#0@@73|) (LitInt |needle#0@@18|))) ))))
(assert (forall (($ly@@290 T@U) (|run#0@@74| T@U) (|needle#0@@19| Int) ) (!  (=> (and (= (type $ly@@290) LayerTypeType) (= (type |run#0@@74|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLt ($LS $ly@@290) |run#0@@74| |needle#0@@19|) (Byte__Order.__default.LargestLt $ly@@290 |run#0@@74| |needle#0@@19|))) :qid |totalord.356:12| :skolemid |2037| :pattern ( (Byte__Order.__default.LargestLt ($LS $ly@@290) |run#0@@74| |needle#0@@19|)) )))
(assert (forall (($ly@@291 T@U) (|run#0@@75| T@U) (|needle#0@@20| Int) ) (!  (=> (and (= (type $ly@@291) LayerTypeType) (= (type |run#0@@75|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLt $ly@@291 |run#0@@75| |needle#0@@20|) (Byte__Order.__default.LargestLt $LZ |run#0@@75| |needle#0@@20|))) :qid |totalord.356:12| :skolemid |2038| :pattern ( (Byte__Order.__default.LargestLt (AsFuelBottom $ly@@291) |run#0@@75| |needle#0@@20|)) )))
(assert  (=> true (forall (($ly@@292 T@U) (|run#0@@76| T@U) (|needle#0@@21| Int) ) (!  (=> (and (and (= (type $ly@@292) LayerTypeType) (= (type |run#0@@76|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLt#canCall| |run#0@@76| |needle#0@@21|) (and (and ($Is |run#0@@76| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@21|) (< |needle#0@@21| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@76|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Byte__Order.__default.LargestLt $ly@@292 |run#0@@76| |needle#0@@21|)) (< (Byte__Order.__default.LargestLt $ly@@292 |run#0@@76| |needle#0@@21|) (|Seq#Length| |run#0@@76|))) (forall ((|i#0@@67| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@67|) (<= |i#0@@67| (Byte__Order.__default.LargestLt $ly@@292 |run#0@@76| |needle#0@@21|))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@76| |i#0@@67|))) |needle#0@@21|))) :qid |totalord.359:20| :skolemid |2039| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@76| |i#0@@67|))) ))) (forall ((|i#1@@12| Int) ) (!  (=> true (=> (and (< (Byte__Order.__default.LargestLt $ly@@292 |run#0@@76| |needle#0@@21|) |i#1@@12|) (< |i#1@@12| (|Seq#Length| |run#0@@76|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@21| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@76| |i#1@@12|)))))) :qid |totalord.360:20| :skolemid |2040| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@76| |i#1@@12|))) ))) (=> (|Seq#Contains| |run#0@@76| ($Box (int_2_U |needle#0@@21|))) (and (< (+ (Byte__Order.__default.LargestLt $ly@@292 |run#0@@76| |needle#0@@21|) 1) (|Seq#Length| |run#0@@76|)) (= (U_2_int ($Unbox intType (|Seq#Index| |run#0@@76| (+ (Byte__Order.__default.LargestLt $ly@@292 |run#0@@76| |needle#0@@21|) 1)))) |needle#0@@21|))))) :qid |totalord.356:12| :skolemid |2041| :pattern ( (Byte__Order.__default.LargestLt $ly@@292 |run#0@@76| |needle#0@@21|)) ))))
(assert (forall (($ly@@293 T@U) (|run#0@@77| T@U) (|needle#0@@22| Int) ) (!  (=> (and (and (= (type $ly@@293) LayerTypeType) (= (type |run#0@@77|) (SeqType BoxType))) (and ($Is |run#0@@77| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@22|) (< |needle#0@@22| 256)))) (and (=> (|Byte__Order.__default.LargestLt#requires| $ly@@293 |run#0@@77| |needle#0@@22|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@77|)) (=> (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@77|) (|Byte__Order.__default.LargestLt#requires| $ly@@293 |run#0@@77| |needle#0@@22|)))) :qid |totalord.356:12| :skolemid |2042| :pattern ( (|Byte__Order.__default.LargestLt#requires| $ly@@293 |run#0@@77| |needle#0@@22|)) )))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted2) LayerTypeType))
(assert  (=> true (forall (($ly@@294 T@U) (|run#0@@78| T@U) (|needle#0@@23| Int) ) (!  (=> (and (and (= (type $ly@@294) LayerTypeType) (= (type |run#0@@78|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLt#canCall| |run#0@@78| |needle#0@@23|) (and (and ($Is |run#0@@78| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@23|) (< |needle#0@@23| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@78|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@78|) (LitInt 0))) (|Byte__Order.__default.lte#canCall| |needle#0@@23| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@78| (LitInt 0)))))) (=> (not (or (= (|Seq#Length| |run#0@@78|) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@23| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@78| (LitInt 0))))))) (|Byte__Order.__default.LargestLt#canCall| (|Seq#Drop| |run#0@@78| (LitInt 1)) |needle#0@@23|))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted2)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted2)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted2) MoreFuel_Byte_Order._default.IsSorted2)) (= (Byte__Order.__default.LargestLt ($LS $ly@@294) |run#0@@78| |needle#0@@23|) (ite  (or (= (|Seq#Length| |run#0@@78|) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@23| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@78| (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLt $ly@@294 (|Seq#Drop| |run#0@@78| (LitInt 1)) |needle#0@@23|))))))) :qid |totalord.356:12| :skolemid |2043| :pattern ( (Byte__Order.__default.LargestLt ($LS $ly@@294) |run#0@@78| |needle#0@@23|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted3) LayerTypeType))
(assert  (=> true (forall (($ly@@295 T@U) (|run#0@@79| T@U) (|needle#0@@24| Int) ) (!  (=> (and (and (= (type $ly@@295) LayerTypeType) (= (type |run#0@@79|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLt#canCall| (Lit |run#0@@79|) (LitInt |needle#0@@24|)) (and (and ($Is |run#0@@79| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@24|) (< |needle#0@@24| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@79|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@79|)) (LitInt 0))) (|Byte__Order.__default.lte#canCall| (LitInt |needle#0@@24|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@79|) (LitInt 0)))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@79|)) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |needle#0@@24|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@79|) (LitInt 0))))))) (|Byte__Order.__default.LargestLt#canCall| (Lit (|Seq#Drop| (Lit |run#0@@79|) (LitInt 1))) (LitInt |needle#0@@24|)))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted3)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted3)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted3) MoreFuel_Byte_Order._default.IsSorted3)) (= (Byte__Order.__default.LargestLt ($LS $ly@@295) (Lit |run#0@@79|) (LitInt |needle#0@@24|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@79|)) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |needle#0@@24|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@79|) (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLt ($LS $ly@@295) (Lit (|Seq#Drop| (Lit |run#0@@79|) (LitInt 1))) (LitInt |needle#0@@24|)))))))) :qid |totalord.356:12| :weight 3 :skolemid |2044| :pattern ( (Byte__Order.__default.LargestLt ($LS $ly@@295) (Lit |run#0@@79|) (LitInt |needle#0@@24|))) ))))
(assert (forall (($ly@@296 T@U) (|run#0@@80| T@U) (|needle#0@@25| Int) ) (!  (=> (and (= (type $ly@@296) LayerTypeType) (= (type |run#0@@80|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@296) |run#0@@80| |needle#0@@25|) (Byte__Order.__default.IndexOfFirstGte $ly@@296 |run#0@@80| |needle#0@@25|))) :qid |totalord.388:12| :skolemid |2045| :pattern ( (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@296) |run#0@@80| |needle#0@@25|)) )))
(assert (forall (($ly@@297 T@U) (|run#0@@81| T@U) (|needle#0@@26| Int) ) (!  (=> (and (= (type $ly@@297) LayerTypeType) (= (type |run#0@@81|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGte $ly@@297 |run#0@@81| |needle#0@@26|) (Byte__Order.__default.IndexOfFirstGte $LZ |run#0@@81| |needle#0@@26|))) :qid |totalord.388:12| :skolemid |2046| :pattern ( (Byte__Order.__default.IndexOfFirstGte (AsFuelBottom $ly@@297) |run#0@@81| |needle#0@@26|)) )))
(assert  (=> true (forall (($ly@@298 T@U) (|run#0@@82| T@U) (|needle#0@@27| Int) ) (!  (=> (and (and (= (type $ly@@298) LayerTypeType) (= (type |run#0@@82|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@82| |needle#0@@27|) (and (and ($Is |run#0@@82| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@27|) (< |needle#0@@27| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@82|)))) (and (and (and (<= (Byte__Order.__default.IndexOfFirstGte $ly@@298 |run#0@@82| |needle#0@@27|) (|Seq#Length| |run#0@@82|)) (forall ((|i#0@@68| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@68|) (< |i#0@@68| (Byte__Order.__default.IndexOfFirstGte $ly@@298 |run#0@@82| |needle#0@@27|))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@82| |i#0@@68|))) |needle#0@@27|)) :qid |totalord.391:20| :skolemid |2047| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@82| |i#0@@68|))) ))) (forall ((|i#1@@13| Int) ) (!  (=> (and (<= (Byte__Order.__default.IndexOfFirstGte $ly@@298 |run#0@@82| |needle#0@@27|) |i#1@@13|) (< |i#1@@13| (|Seq#Length| |run#0@@82|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@27| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@82| |i#1@@13|))))) :qid |totalord.392:20| :skolemid |2048| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@82| |i#1@@13|))) ))) (<= (LitInt 0) (Byte__Order.__default.IndexOfFirstGte $ly@@298 |run#0@@82| |needle#0@@27|)))) :qid |totalord.388:12| :skolemid |2049| :pattern ( (Byte__Order.__default.IndexOfFirstGte $ly@@298 |run#0@@82| |needle#0@@27|)) ))))
(assert (forall (($ly@@299 T@U) (|run#0@@83| T@U) (|needle#0@@28| Int) ) (!  (=> (and (and (= (type $ly@@299) LayerTypeType) (= (type |run#0@@83|) (SeqType BoxType))) (and ($Is |run#0@@83| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@28|) (< |needle#0@@28| 256)))) (and (=> (|Byte__Order.__default.IndexOfFirstGte#requires| $ly@@299 |run#0@@83| |needle#0@@28|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@83|)) (=> (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@83|) (|Byte__Order.__default.IndexOfFirstGte#requires| $ly@@299 |run#0@@83| |needle#0@@28|)))) :qid |totalord.388:12| :skolemid |2050| :pattern ( (|Byte__Order.__default.IndexOfFirstGte#requires| $ly@@299 |run#0@@83| |needle#0@@28|)) )))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted4) LayerTypeType))
(assert  (=> true (forall (($ly@@300 T@U) (|run#0@@84| T@U) (|needle#0@@29| Int) ) (!  (=> (and (and (= (type $ly@@300) LayerTypeType) (= (type |run#0@@84|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@84| |needle#0@@29|) (and (and ($Is |run#0@@84| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@29|) (< |needle#0@@29| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@84|)))) (and (=> (not (= (|Seq#Length| |run#0@@84|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte |run#0@@84|) (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@84|))) |needle#0@@29|)) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@84|))) |needle#0@@29|)) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte |run#0@@84|) (|Byte__Order.__default.IndexOfFirstGte#canCall| (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@84|) |needle#0@@29|))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted4)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted4)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted4) MoreFuel_Byte_Order._default.IsSorted4)) (= (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@300) |run#0@@84| |needle#0@@29|) (ite (= (|Seq#Length| |run#0@@84|) (LitInt 0)) 0 (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@84|))) |needle#0@@29|) (|Seq#Length| |run#0@@84|) (Byte__Order.__default.IndexOfFirstGte $ly@@300 (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@84|) |needle#0@@29|))))))) :qid |totalord.388:12| :skolemid |2051| :pattern ( (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@300) |run#0@@84| |needle#0@@29|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted5) LayerTypeType))
(assert  (=> true (forall (($ly@@301 T@U) (|run#0@@85| T@U) (|needle#0@@30| Int) ) (!  (=> (and (and (= (type $ly@@301) LayerTypeType) (= (type |run#0@@85|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGte#canCall| (Lit |run#0@@85|) (LitInt |needle#0@@30|)) (and (and ($Is |run#0@@85| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@30|) (< |needle#0@@30| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@85|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@85|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte (Lit |run#0@@85|)) (|Byte__Order.__default.lt#canCall| (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@85|))))) (LitInt |needle#0@@30|))) (=> (not (U_2_bool (Lit (bool_2_U (Byte__Order.__default.lt (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@85|))))) (LitInt |needle#0@@30|)))))) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte (Lit |run#0@@85|)) (|Byte__Order.__default.IndexOfFirstGte#canCall| (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@85|))) (LitInt |needle#0@@30|)))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted5)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted5)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted5) MoreFuel_Byte_Order._default.IsSorted5)) (= (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@301) (Lit |run#0@@85|) (LitInt |needle#0@@30|)) (ite (= (|Seq#Length| (Lit |run#0@@85|)) (LitInt 0)) 0 (ite (Byte__Order.__default.lt (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@85|))))) (LitInt |needle#0@@30|)) (|Seq#Length| (Lit |run#0@@85|)) (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@301) (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@85|))) (LitInt |needle#0@@30|)))))))) :qid |totalord.388:12| :weight 3 :skolemid |2052| :pattern ( (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@301) (Lit |run#0@@85|) (LitInt |needle#0@@30|))) ))))
(assert (forall (($ly@@302 T@U) (|s#0@@38| T@U) (|key#0@@14| Int) (|lo#0| Int) (|hi#0| Int) ) (!  (=> (and (= (type $ly@@302) LayerTypeType) (= (type |s#0@@38|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@302) |s#0@@38| |key#0@@14| |lo#0| |hi#0|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@302 |s#0@@38| |key#0@@14| |lo#0| |hi#0|))) :qid |totalord.421:12| :skolemid |2053| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@302) |s#0@@38| |key#0@@14| |lo#0| |hi#0|)) )))
(assert (forall (($ly@@303 T@U) (|s#0@@39| T@U) (|key#0@@15| Int) (|lo#0@@0| Int) (|hi#0@@0| Int) ) (!  (=> (and (= (type $ly@@303) LayerTypeType) (= (type |s#0@@39|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@303 |s#0@@39| |key#0@@15| |lo#0@@0| |hi#0@@0|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $LZ |s#0@@39| |key#0@@15| |lo#0@@0| |hi#0@@0|))) :qid |totalord.421:12| :skolemid |2054| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (AsFuelBottom $ly@@303) |s#0@@39| |key#0@@15| |lo#0@@0| |hi#0@@0|)) )))
(assert  (=> true (forall (($ly@@304 T@U) (|s#0@@40| T@U) (|key#0@@16| Int) (|lo#0@@1| Int) (|hi#0@@1| Int) ) (!  (=> (and (and (= (type $ly@@304) LayerTypeType) (= (type |s#0@@40|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@40| |key#0@@16| |lo#0@@1| |hi#0@@1|) (and (and ($Is |s#0@@40| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@16|) (< |key#0@@16| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@1|) (< |lo#0@@1| |hi#0@@1|)) (<= |hi#0@@1| (+ (|Seq#Length| |s#0@@40|) 1))) (=> (> |lo#0@@1| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@40| (- |lo#0@@1| 1)))) |key#0@@16|))) (=> (<= |hi#0@@1| (|Seq#Length| |s#0@@40|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@16| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@40| (- |hi#0@@1| 1)))))))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@304 |s#0@@40| |key#0@@16| |lo#0@@1| |hi#0@@1|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@304 |s#0@@40| |key#0@@16| |lo#0@@1| |hi#0@@1|) (|Seq#Length| |s#0@@40|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@304 |s#0@@40| |key#0@@16| |lo#0@@1| |hi#0@@1|) 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@40| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@304 |s#0@@40| |key#0@@16| |lo#0@@1| |hi#0@@1|) 1)))) |key#0@@16|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@304 |s#0@@40| |key#0@@16| |lo#0@@1| |hi#0@@1|) (|Seq#Length| |s#0@@40|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@16| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@40| (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@304 |s#0@@40| |key#0@@16| |lo#0@@1| |hi#0@@1|)))))))) :qid |totalord.421:12| :skolemid |2055| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@304 |s#0@@40| |key#0@@16| |lo#0@@1| |hi#0@@1|)) ))))
(assert (forall (($ly@@305 T@U) (|s#0@@41| T@U) (|key#0@@17| Int) (|lo#0@@2| Int) (|hi#0@@2| Int) ) (!  (=> (and (and (= (type $ly@@305) LayerTypeType) (= (type |s#0@@41|) (SeqType BoxType))) (and ($Is |s#0@@41| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@17|) (< |key#0@@17| 256)))) (and (=> (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@305 |s#0@@41| |key#0@@17| |lo#0@@2| |hi#0@@2|) (and (and (and (and (<= (LitInt 0) |lo#0@@2|) (< |lo#0@@2| |hi#0@@2|)) (<= |hi#0@@2| (+ (|Seq#Length| |s#0@@41|) 1))) (=> (> |lo#0@@2| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@41| (- |lo#0@@2| 1)))) |key#0@@17|))) (=> (<= |hi#0@@2| (|Seq#Length| |s#0@@41|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@17| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@41| (- |hi#0@@2| 1)))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@2|) (< |lo#0@@2| |hi#0@@2|)) (<= |hi#0@@2| (+ (|Seq#Length| |s#0@@41|) 1))) (=> (> |lo#0@@2| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@41| (- |lo#0@@2| 1)))) |key#0@@17|))) (=> (<= |hi#0@@2| (|Seq#Length| |s#0@@41|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@17| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@41| (- |hi#0@@2| 1))))))) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@305 |s#0@@41| |key#0@@17| |lo#0@@2| |hi#0@@2|)))) :qid |totalord.421:12| :skolemid |2056| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@305 |s#0@@41| |key#0@@17| |lo#0@@2| |hi#0@@2|)) )))
(assert  (=> true (forall (($ly@@306 T@U) (|s#0@@42| T@U) (|key#0@@18| Int) (|lo#0@@3| Int) (|hi#0@@3| Int) ) (!  (=> (and (and (= (type $ly@@306) LayerTypeType) (= (type |s#0@@42|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@42| |key#0@@18| |lo#0@@3| |hi#0@@3|) (and (and ($Is |s#0@@42| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@18|) (< |key#0@@18| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@3|) (< |lo#0@@3| |hi#0@@3|)) (<= |hi#0@@3| (+ (|Seq#Length| |s#0@@42|) 1))) (=> (> |lo#0@@3| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@42| (- |lo#0@@3| 1)))) |key#0@@18|))) (=> (<= |hi#0@@3| (|Seq#Length| |s#0@@42|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@18| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@42| (- |hi#0@@3| 1)))))))))) (and (=> (< (+ |lo#0@@3| 1) |hi#0@@3|) (let ((|mid#0| (Div (+ |lo#0@@3| |hi#0@@3|) (LitInt 2)))) (and (and (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@42| (- |mid#0| 1)))) |key#0@@18|) (=> (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@42| (- |mid#0| 1)))) |key#0@@18|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@42| |key#0@@18| |mid#0| |hi#0@@3|))) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@42| (- |mid#0| 1)))) |key#0@@18|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@42| |key#0@@18| |lo#0@@3| |mid#0|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@306) |s#0@@42| |key#0@@18| |lo#0@@3| |hi#0@@3|) (ite (< (+ |lo#0@@3| 1) |hi#0@@3|) (let ((|mid#0@@0| (Div (+ |lo#0@@3| |hi#0@@3|) (LitInt 2)))) (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@42| (- |mid#0@@0| 1)))) |key#0@@18|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@306 |s#0@@42| |key#0@@18| |mid#0@@0| |hi#0@@3|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@306 |s#0@@42| |key#0@@18| |lo#0@@3| |mid#0@@0|))) |lo#0@@3|)))) :qid |totalord.421:12| :skolemid |2057| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@306) |s#0@@42| |key#0@@18| |lo#0@@3| |hi#0@@3|)) ))))
(assert  (=> true (forall (($ly@@307 T@U) (|s#0@@43| T@U) (|key#0@@19| Int) (|lo#0@@4| Int) (|hi#0@@4| Int) ) (!  (=> (and (and (= (type $ly@@307) LayerTypeType) (= (type |s#0@@43|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@43| |key#0@@19| (LitInt |lo#0@@4|) (LitInt |hi#0@@4|)) (and (and ($Is |s#0@@43| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@19|) (< |key#0@@19| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@4|)) (< |lo#0@@4| |hi#0@@4|)) (<= (LitInt |hi#0@@4|) (+ (|Seq#Length| |s#0@@43|) 1))) (=> (> |lo#0@@4| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@43| (LitInt (- |lo#0@@4| 1))))) |key#0@@19|))) (=> (<= (LitInt |hi#0@@4|) (|Seq#Length| |s#0@@43|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@19| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@43| (LitInt (- |hi#0@@4| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@4| 1) |hi#0@@4|)))) (let ((|mid#1| (LitInt (Div (+ |lo#0@@4| |hi#0@@4|) (LitInt 2))))) (and (and (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@43| (- |mid#1| 1)))) |key#0@@19|) (=> (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@43| (- |mid#1| 1)))) |key#0@@19|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@43| |key#0@@19| |mid#1| (LitInt |hi#0@@4|)))) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@43| (- |mid#1| 1)))) |key#0@@19|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@43| |key#0@@19| (LitInt |lo#0@@4|) |mid#1|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@307) |s#0@@43| |key#0@@19| (LitInt |lo#0@@4|) (LitInt |hi#0@@4|)) (ite (< (+ |lo#0@@4| 1) |hi#0@@4|) (let ((|mid#1@@0| (LitInt (Div (+ |lo#0@@4| |hi#0@@4|) (LitInt 2))))) (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@43| (LitInt (- |mid#1@@0| 1))))) |key#0@@19|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@307) |s#0@@43| |key#0@@19| |mid#1@@0| (LitInt |hi#0@@4|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@307) |s#0@@43| |key#0@@19| (LitInt |lo#0@@4|) |mid#1@@0|))) |lo#0@@4|)))) :qid |totalord.421:12| :weight 3 :skolemid |2058| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@307) |s#0@@43| |key#0@@19| (LitInt |lo#0@@4|) (LitInt |hi#0@@4|))) ))))
(assert  (=> true (forall (($ly@@308 T@U) (|s#0@@44| T@U) (|key#0@@20| Int) (|lo#0@@5| Int) (|hi#0@@5| Int) ) (!  (=> (and (and (= (type $ly@@308) LayerTypeType) (= (type |s#0@@44|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@44|) (LitInt |key#0@@20|) (LitInt |lo#0@@5|) (LitInt |hi#0@@5|)) (and (and ($Is |s#0@@44| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@20|) (< |key#0@@20| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@5|)) (< |lo#0@@5| |hi#0@@5|)) (<= (LitInt |hi#0@@5|) (+ (|Seq#Length| (Lit |s#0@@44|)) 1))) (=> (> |lo#0@@5| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@44|) (LitInt (- |lo#0@@5| 1))))) (LitInt |key#0@@20|)))) (=> (<= (LitInt |hi#0@@5|) (|Seq#Length| (Lit |s#0@@44|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |key#0@@20|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@44|) (LitInt (- |hi#0@@5| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@5| 1) |hi#0@@5|)))) (let ((|mid#2| (LitInt (Div (+ |lo#0@@5| |hi#0@@5|) (LitInt 2))))) (and (and (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@44|) (- |mid#2| 1)))) (LitInt |key#0@@20|)) (=> (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@44|) (- |mid#2| 1)))) (LitInt |key#0@@20|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@44|) (LitInt |key#0@@20|) |mid#2| (LitInt |hi#0@@5|)))) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@44|) (- |mid#2| 1)))) (LitInt |key#0@@20|))) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@44|) (LitInt |key#0@@20|) (LitInt |lo#0@@5|) |mid#2|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@308) (Lit |s#0@@44|) (LitInt |key#0@@20|) (LitInt |lo#0@@5|) (LitInt |hi#0@@5|)) (ite (< (+ |lo#0@@5| 1) |hi#0@@5|) (let ((|mid#2@@0| (LitInt (Div (+ |lo#0@@5| |hi#0@@5|) (LitInt 2))))) (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@44|) (LitInt (- |mid#2@@0| 1))))) (LitInt |key#0@@20|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@308) (Lit |s#0@@44|) (LitInt |key#0@@20|) |mid#2@@0| (LitInt |hi#0@@5|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@308) (Lit |s#0@@44|) (LitInt |key#0@@20|) (LitInt |lo#0@@5|) |mid#2@@0|))) |lo#0@@5|)))) :qid |totalord.421:12| :weight 3 :skolemid |2059| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@308) (Lit |s#0@@44|) (LitInt |key#0@@20|) (LitInt |lo#0@@5|) (LitInt |hi#0@@5|))) ))))
(assert (forall (($ly@@309 T@U) (|s#0@@45| T@U) (|key#0@@21| Int) ) (!  (=> (and (= (type $ly@@309) LayerTypeType) (= (type |s#0@@45|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@309) |s#0@@45| |key#0@@21|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@309 |s#0@@45| |key#0@@21|))) :qid |totalord.441:22| :skolemid |2060| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@309) |s#0@@45| |key#0@@21|)) )))
(assert (forall (($ly@@310 T@U) (|s#0@@46| T@U) (|key#0@@22| Int) ) (!  (=> (and (= (type $ly@@310) LayerTypeType) (= (type |s#0@@46|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@310 |s#0@@46| |key#0@@22|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $LZ |s#0@@46| |key#0@@22|))) :qid |totalord.441:22| :skolemid |2061| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte (AsFuelBottom $ly@@310) |s#0@@46| |key#0@@22|)) )))
(assert  (=> true (forall (($ly@@311 T@U) (|s#0@@47| T@U) (|key#0@@23| Int) ) (!  (=> (and (and (= (type $ly@@311) LayerTypeType) (= (type |s#0@@47|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@47| |key#0@@23|) (and ($Is |s#0@@47| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@23|) (< |key#0@@23| 256))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@311 |s#0@@47| |key#0@@23|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@311 |s#0@@47| |key#0@@23|) (|Seq#Length| |s#0@@47|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@311 |s#0@@47| |key#0@@23|) 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@47| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@311 |s#0@@47| |key#0@@23|) 1)))) |key#0@@23|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@311 |s#0@@47| |key#0@@23|) (|Seq#Length| |s#0@@47|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@23| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@47| (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@311 |s#0@@47| |key#0@@23|)))))))) :qid |totalord.441:22| :skolemid |2062| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@311 |s#0@@47| |key#0@@23|)) ))))
(assert (forall (($ly@@312 T@U) (|s#0@@48| T@U) (|key#0@@24| Int) ) (!  (=> (and (and (= (type $ly@@312) LayerTypeType) (= (type |s#0@@48|) (SeqType BoxType))) (and ($Is |s#0@@48| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@24|) (< |key#0@@24| 256)))) (and (=> (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@312 |s#0@@48| |key#0@@24|) true) (=> true (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@312 |s#0@@48| |key#0@@24|)))) :qid |totalord.441:22| :skolemid |2063| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@312 |s#0@@48| |key#0@@24|)) )))
(assert  (=> true (forall (($ly@@313 T@U) (|s#0@@49| T@U) (|key#0@@25| Int) ) (!  (=> (and (and (= (type $ly@@313) LayerTypeType) (= (type |s#0@@49|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@49| |key#0@@25|) (and ($Is |s#0@@49| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@25|) (< |key#0@@25| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@49| |key#0@@25| (LitInt 0) (+ (|Seq#Length| |s#0@@49|) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@313) |s#0@@49| |key#0@@25|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) |s#0@@49| |key#0@@25| (LitInt 0) (+ (|Seq#Length| |s#0@@49|) 1))))) :qid |totalord.441:22| :skolemid |2064| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@313) |s#0@@49| |key#0@@25|)) ))))
(assert  (=> true (forall (($ly@@314 T@U) (|s#0@@50| T@U) (|key#0@@26| Int) ) (!  (=> (and (and (= (type $ly@@314) LayerTypeType) (= (type |s#0@@50|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (Lit |s#0@@50|) (LitInt |key#0@@26|)) (and ($Is |s#0@@50| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@26|) (< |key#0@@26| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@50|) (LitInt |key#0@@26|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@50|)) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@314) (Lit |s#0@@50|) (LitInt |key#0@@26|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) (Lit |s#0@@50|) (LitInt |key#0@@26|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@50|)) 1))))) :qid |totalord.441:22| :weight 3 :skolemid |2065| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@314) (Lit |s#0@@50|) (LitInt |key#0@@26|))) ))))
(assert (forall (($ly@@315 T@U) (|run#0@@86| T@U) (|needle#0@@31| Int) ) (!  (=> (and (= (type $ly@@315) LayerTypeType) (= (type |run#0@@86|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@315) |run#0@@86| |needle#0@@31|) (Byte__Order.__default.IndexOfFirstGt $ly@@315 |run#0@@86| |needle#0@@31|))) :qid |totalord.449:12| :skolemid |2066| :pattern ( (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@315) |run#0@@86| |needle#0@@31|)) )))
(assert (forall (($ly@@316 T@U) (|run#0@@87| T@U) (|needle#0@@32| Int) ) (!  (=> (and (= (type $ly@@316) LayerTypeType) (= (type |run#0@@87|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGt $ly@@316 |run#0@@87| |needle#0@@32|) (Byte__Order.__default.IndexOfFirstGt $LZ |run#0@@87| |needle#0@@32|))) :qid |totalord.449:12| :skolemid |2067| :pattern ( (Byte__Order.__default.IndexOfFirstGt (AsFuelBottom $ly@@316) |run#0@@87| |needle#0@@32|)) )))
(assert  (=> true (forall (($ly@@317 T@U) (|run#0@@88| T@U) (|needle#0@@33| Int) ) (!  (=> (and (and (= (type $ly@@317) LayerTypeType) (= (type |run#0@@88|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@88| |needle#0@@33|) (and (and ($Is |run#0@@88| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@33|) (< |needle#0@@33| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@88|)))) (and (and (and (<= (Byte__Order.__default.IndexOfFirstGt $ly@@317 |run#0@@88| |needle#0@@33|) (|Seq#Length| |run#0@@88|)) (forall ((|i#0@@69| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@69|) (< |i#0@@69| (Byte__Order.__default.IndexOfFirstGt $ly@@317 |run#0@@88| |needle#0@@33|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@88| |i#0@@69|))) |needle#0@@33|)) :qid |totalord.452:20| :skolemid |2068| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@88| |i#0@@69|))) ))) (forall ((|i#1@@14| Int) ) (!  (=> (and (<= (Byte__Order.__default.IndexOfFirstGt $ly@@317 |run#0@@88| |needle#0@@33|) |i#1@@14|) (< |i#1@@14| (|Seq#Length| |run#0@@88|))) (Byte__Order.__default.lt |needle#0@@33| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@88| |i#1@@14|))))) :qid |totalord.453:20| :skolemid |2069| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@88| |i#1@@14|))) ))) (<= (LitInt 0) (Byte__Order.__default.IndexOfFirstGt $ly@@317 |run#0@@88| |needle#0@@33|)))) :qid |totalord.449:12| :skolemid |2070| :pattern ( (Byte__Order.__default.IndexOfFirstGt $ly@@317 |run#0@@88| |needle#0@@33|)) ))))
(assert (forall (($ly@@318 T@U) (|run#0@@89| T@U) (|needle#0@@34| Int) ) (!  (=> (and (and (= (type $ly@@318) LayerTypeType) (= (type |run#0@@89|) (SeqType BoxType))) (and ($Is |run#0@@89| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@34|) (< |needle#0@@34| 256)))) (and (=> (|Byte__Order.__default.IndexOfFirstGt#requires| $ly@@318 |run#0@@89| |needle#0@@34|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@89|)) (=> (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@89|) (|Byte__Order.__default.IndexOfFirstGt#requires| $ly@@318 |run#0@@89| |needle#0@@34|)))) :qid |totalord.449:12| :skolemid |2071| :pattern ( (|Byte__Order.__default.IndexOfFirstGt#requires| $ly@@318 |run#0@@89| |needle#0@@34|)) )))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted6) LayerTypeType))
(assert  (=> true (forall (($ly@@319 T@U) (|run#0@@90| T@U) (|needle#0@@35| Int) ) (!  (=> (and (and (= (type $ly@@319) LayerTypeType) (= (type |run#0@@90|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@90| |needle#0@@35|) (and (and ($Is |run#0@@90| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@35|) (< |needle#0@@35| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@90|)))) (and (=> (not (= (|Seq#Length| |run#0@@90|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte |run#0@@90|) (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@90|))) |needle#0@@35|)) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@90|))) |needle#0@@35|)) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte |run#0@@90|) (|Byte__Order.__default.IndexOfFirstGt#canCall| (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@90|) |needle#0@@35|))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted6)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted6)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted6) MoreFuel_Byte_Order._default.IsSorted6)) (= (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@319) |run#0@@90| |needle#0@@35|) (ite (= (|Seq#Length| |run#0@@90|) (LitInt 0)) 0 (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@90|))) |needle#0@@35|) (|Seq#Length| |run#0@@90|) (Byte__Order.__default.IndexOfFirstGt $ly@@319 (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@90|) |needle#0@@35|))))))) :qid |totalord.449:12| :skolemid |2072| :pattern ( (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@319) |run#0@@90| |needle#0@@35|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted7) LayerTypeType))
(assert  (=> true (forall (($ly@@320 T@U) (|run#0@@91| T@U) (|needle#0@@36| Int) ) (!  (=> (and (and (= (type $ly@@320) LayerTypeType) (= (type |run#0@@91|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGt#canCall| (Lit |run#0@@91|) (LitInt |needle#0@@36|)) (and (and ($Is |run#0@@91| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@36|) (< |needle#0@@36| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@91|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@91|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte (Lit |run#0@@91|)) (|Byte__Order.__default.lte#canCall| (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@91|))))) (LitInt |needle#0@@36|))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@91|))))) (LitInt |needle#0@@36|))) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte (Lit |run#0@@91|)) (|Byte__Order.__default.IndexOfFirstGt#canCall| (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@91|))) (LitInt |needle#0@@36|)))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted7)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted7)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted7) MoreFuel_Byte_Order._default.IsSorted7)) (= (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@320) (Lit |run#0@@91|) (LitInt |needle#0@@36|)) (ite (= (|Seq#Length| (Lit |run#0@@91|)) (LitInt 0)) 0 (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@91|))))) (LitInt |needle#0@@36|)) (|Seq#Length| (Lit |run#0@@91|)) (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@320) (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@91|))) (LitInt |needle#0@@36|)))))))) :qid |totalord.449:12| :weight 3 :skolemid |2073| :pattern ( (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@320) (Lit |run#0@@91|) (LitInt |needle#0@@36|))) ))))
(assert (forall (($ly@@321 T@U) (|s#0@@51| T@U) (|key#0@@27| Int) (|lo#0@@6| Int) (|hi#0@@6| Int) ) (!  (=> (and (= (type $ly@@321) LayerTypeType) (= (type |s#0@@51|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@321) |s#0@@51| |key#0@@27| |lo#0@@6| |hi#0@@6|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@321 |s#0@@51| |key#0@@27| |lo#0@@6| |hi#0@@6|))) :qid |totalord.482:12| :skolemid |2074| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@321) |s#0@@51| |key#0@@27| |lo#0@@6| |hi#0@@6|)) )))
(assert (forall (($ly@@322 T@U) (|s#0@@52| T@U) (|key#0@@28| Int) (|lo#0@@7| Int) (|hi#0@@7| Int) ) (!  (=> (and (= (type $ly@@322) LayerTypeType) (= (type |s#0@@52|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@322 |s#0@@52| |key#0@@28| |lo#0@@7| |hi#0@@7|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $LZ |s#0@@52| |key#0@@28| |lo#0@@7| |hi#0@@7|))) :qid |totalord.482:12| :skolemid |2075| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (AsFuelBottom $ly@@322) |s#0@@52| |key#0@@28| |lo#0@@7| |hi#0@@7|)) )))
(assert  (=> true (forall (($ly@@323 T@U) (|s#0@@53| T@U) (|key#0@@29| Int) (|lo#0@@8| Int) (|hi#0@@8| Int) ) (!  (=> (and (and (= (type $ly@@323) LayerTypeType) (= (type |s#0@@53|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@53| |key#0@@29| |lo#0@@8| |hi#0@@8|) (and (and ($Is |s#0@@53| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@29|) (< |key#0@@29| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@8|) (< |lo#0@@8| |hi#0@@8|)) (<= |hi#0@@8| (+ (|Seq#Length| |s#0@@53|) 1))) (=> (> |lo#0@@8| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@53| (- |lo#0@@8| 1)))) |key#0@@29|))) (=> (<= |hi#0@@8| (|Seq#Length| |s#0@@53|)) (Byte__Order.__default.lt |key#0@@29| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@53| (- |hi#0@@8| 1)))))))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@323 |s#0@@53| |key#0@@29| |lo#0@@8| |hi#0@@8|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@323 |s#0@@53| |key#0@@29| |lo#0@@8| |hi#0@@8|) (|Seq#Length| |s#0@@53|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@323 |s#0@@53| |key#0@@29| |lo#0@@8| |hi#0@@8|) 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@53| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@323 |s#0@@53| |key#0@@29| |lo#0@@8| |hi#0@@8|) 1)))) |key#0@@29|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@323 |s#0@@53| |key#0@@29| |lo#0@@8| |hi#0@@8|) (|Seq#Length| |s#0@@53|)) (Byte__Order.__default.lt |key#0@@29| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@53| (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@323 |s#0@@53| |key#0@@29| |lo#0@@8| |hi#0@@8|)))))))) :qid |totalord.482:12| :skolemid |2076| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@323 |s#0@@53| |key#0@@29| |lo#0@@8| |hi#0@@8|)) ))))
(assert (forall (($ly@@324 T@U) (|s#0@@54| T@U) (|key#0@@30| Int) (|lo#0@@9| Int) (|hi#0@@9| Int) ) (!  (=> (and (and (= (type $ly@@324) LayerTypeType) (= (type |s#0@@54|) (SeqType BoxType))) (and ($Is |s#0@@54| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@30|) (< |key#0@@30| 256)))) (and (=> (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@324 |s#0@@54| |key#0@@30| |lo#0@@9| |hi#0@@9|) (and (and (and (and (<= (LitInt 0) |lo#0@@9|) (< |lo#0@@9| |hi#0@@9|)) (<= |hi#0@@9| (+ (|Seq#Length| |s#0@@54|) 1))) (=> (> |lo#0@@9| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@54| (- |lo#0@@9| 1)))) |key#0@@30|))) (=> (<= |hi#0@@9| (|Seq#Length| |s#0@@54|)) (Byte__Order.__default.lt |key#0@@30| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@54| (- |hi#0@@9| 1)))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@9|) (< |lo#0@@9| |hi#0@@9|)) (<= |hi#0@@9| (+ (|Seq#Length| |s#0@@54|) 1))) (=> (> |lo#0@@9| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@54| (- |lo#0@@9| 1)))) |key#0@@30|))) (=> (<= |hi#0@@9| (|Seq#Length| |s#0@@54|)) (Byte__Order.__default.lt |key#0@@30| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@54| (- |hi#0@@9| 1))))))) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@324 |s#0@@54| |key#0@@30| |lo#0@@9| |hi#0@@9|)))) :qid |totalord.482:12| :skolemid |2077| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@324 |s#0@@54| |key#0@@30| |lo#0@@9| |hi#0@@9|)) )))
(assert  (=> true (forall (($ly@@325 T@U) (|s#0@@55| T@U) (|key#0@@31| Int) (|lo#0@@10| Int) (|hi#0@@10| Int) ) (!  (=> (and (and (= (type $ly@@325) LayerTypeType) (= (type |s#0@@55|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@55| |key#0@@31| |lo#0@@10| |hi#0@@10|) (and (and ($Is |s#0@@55| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@31|) (< |key#0@@31| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@10|) (< |lo#0@@10| |hi#0@@10|)) (<= |hi#0@@10| (+ (|Seq#Length| |s#0@@55|) 1))) (=> (> |lo#0@@10| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@55| (- |lo#0@@10| 1)))) |key#0@@31|))) (=> (<= |hi#0@@10| (|Seq#Length| |s#0@@55|)) (Byte__Order.__default.lt |key#0@@31| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@55| (- |hi#0@@10| 1)))))))))) (and (=> (< (+ |lo#0@@10| 1) |hi#0@@10|) (let ((|mid#0@@1| (Div (+ |lo#0@@10| |hi#0@@10|) (LitInt 2)))) (and (and (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@55| (- |mid#0@@1| 1)))) |key#0@@31|) (=> (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@55| (- |mid#0@@1| 1)))) |key#0@@31|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@55| |key#0@@31| |mid#0@@1| |hi#0@@10|))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@55| (- |mid#0@@1| 1)))) |key#0@@31|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@55| |key#0@@31| |lo#0@@10| |mid#0@@1|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@325) |s#0@@55| |key#0@@31| |lo#0@@10| |hi#0@@10|) (ite (< (+ |lo#0@@10| 1) |hi#0@@10|) (let ((|mid#0@@2| (Div (+ |lo#0@@10| |hi#0@@10|) (LitInt 2)))) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@55| (- |mid#0@@2| 1)))) |key#0@@31|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@325 |s#0@@55| |key#0@@31| |mid#0@@2| |hi#0@@10|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@325 |s#0@@55| |key#0@@31| |lo#0@@10| |mid#0@@2|))) |lo#0@@10|)))) :qid |totalord.482:12| :skolemid |2078| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@325) |s#0@@55| |key#0@@31| |lo#0@@10| |hi#0@@10|)) ))))
(assert  (=> true (forall (($ly@@326 T@U) (|s#0@@56| T@U) (|key#0@@32| Int) (|lo#0@@11| Int) (|hi#0@@11| Int) ) (!  (=> (and (and (= (type $ly@@326) LayerTypeType) (= (type |s#0@@56|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@56| |key#0@@32| (LitInt |lo#0@@11|) (LitInt |hi#0@@11|)) (and (and ($Is |s#0@@56| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@32|) (< |key#0@@32| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@11|)) (< |lo#0@@11| |hi#0@@11|)) (<= (LitInt |hi#0@@11|) (+ (|Seq#Length| |s#0@@56|) 1))) (=> (> |lo#0@@11| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@56| (LitInt (- |lo#0@@11| 1))))) |key#0@@32|))) (=> (<= (LitInt |hi#0@@11|) (|Seq#Length| |s#0@@56|)) (Byte__Order.__default.lt |key#0@@32| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@56| (LitInt (- |hi#0@@11| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@11| 1) |hi#0@@11|)))) (let ((|mid#1@@1| (LitInt (Div (+ |lo#0@@11| |hi#0@@11|) (LitInt 2))))) (and (and (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@56| (- |mid#1@@1| 1)))) |key#0@@32|) (=> (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@56| (- |mid#1@@1| 1)))) |key#0@@32|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@56| |key#0@@32| |mid#1@@1| (LitInt |hi#0@@11|)))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@56| (- |mid#1@@1| 1)))) |key#0@@32|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@56| |key#0@@32| (LitInt |lo#0@@11|) |mid#1@@1|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@326) |s#0@@56| |key#0@@32| (LitInt |lo#0@@11|) (LitInt |hi#0@@11|)) (ite (< (+ |lo#0@@11| 1) |hi#0@@11|) (let ((|mid#1@@2| (LitInt (Div (+ |lo#0@@11| |hi#0@@11|) (LitInt 2))))) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@56| (LitInt (- |mid#1@@2| 1))))) |key#0@@32|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@326) |s#0@@56| |key#0@@32| |mid#1@@2| (LitInt |hi#0@@11|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@326) |s#0@@56| |key#0@@32| (LitInt |lo#0@@11|) |mid#1@@2|))) |lo#0@@11|)))) :qid |totalord.482:12| :weight 3 :skolemid |2079| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@326) |s#0@@56| |key#0@@32| (LitInt |lo#0@@11|) (LitInt |hi#0@@11|))) ))))
(assert  (=> true (forall (($ly@@327 T@U) (|s#0@@57| T@U) (|key#0@@33| Int) (|lo#0@@12| Int) (|hi#0@@12| Int) ) (!  (=> (and (and (= (type $ly@@327) LayerTypeType) (= (type |s#0@@57|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@57|) (LitInt |key#0@@33|) (LitInt |lo#0@@12|) (LitInt |hi#0@@12|)) (and (and ($Is |s#0@@57| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@33|) (< |key#0@@33| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@12|)) (< |lo#0@@12| |hi#0@@12|)) (<= (LitInt |hi#0@@12|) (+ (|Seq#Length| (Lit |s#0@@57|)) 1))) (=> (> |lo#0@@12| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@57|) (LitInt (- |lo#0@@12| 1))))) (LitInt |key#0@@33|)))) (=> (<= (LitInt |hi#0@@12|) (|Seq#Length| (Lit |s#0@@57|))) (Byte__Order.__default.lt (LitInt |key#0@@33|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@57|) (LitInt (- |hi#0@@12| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@12| 1) |hi#0@@12|)))) (let ((|mid#2@@1| (LitInt (Div (+ |lo#0@@12| |hi#0@@12|) (LitInt 2))))) (and (and (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@57|) (- |mid#2@@1| 1)))) (LitInt |key#0@@33|)) (=> (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@57|) (- |mid#2@@1| 1)))) (LitInt |key#0@@33|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@57|) (LitInt |key#0@@33|) |mid#2@@1| (LitInt |hi#0@@12|)))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@57|) (- |mid#2@@1| 1)))) (LitInt |key#0@@33|))) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@57|) (LitInt |key#0@@33|) (LitInt |lo#0@@12|) |mid#2@@1|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@327) (Lit |s#0@@57|) (LitInt |key#0@@33|) (LitInt |lo#0@@12|) (LitInt |hi#0@@12|)) (ite (< (+ |lo#0@@12| 1) |hi#0@@12|) (let ((|mid#2@@2| (LitInt (Div (+ |lo#0@@12| |hi#0@@12|) (LitInt 2))))) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@57|) (LitInt (- |mid#2@@2| 1))))) (LitInt |key#0@@33|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@327) (Lit |s#0@@57|) (LitInt |key#0@@33|) |mid#2@@2| (LitInt |hi#0@@12|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@327) (Lit |s#0@@57|) (LitInt |key#0@@33|) (LitInt |lo#0@@12|) |mid#2@@2|))) |lo#0@@12|)))) :qid |totalord.482:12| :weight 3 :skolemid |2080| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@327) (Lit |s#0@@57|) (LitInt |key#0@@33|) (LitInt |lo#0@@12|) (LitInt |hi#0@@12|))) ))))
(assert (forall (($ly@@328 T@U) (|s#0@@58| T@U) (|key#0@@34| Int) ) (!  (=> (and (= (type $ly@@328) LayerTypeType) (= (type |s#0@@58|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@328) |s#0@@58| |key#0@@34|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@328 |s#0@@58| |key#0@@34|))) :qid |totalord.502:22| :skolemid |2081| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@328) |s#0@@58| |key#0@@34|)) )))
(assert (forall (($ly@@329 T@U) (|s#0@@59| T@U) (|key#0@@35| Int) ) (!  (=> (and (= (type $ly@@329) LayerTypeType) (= (type |s#0@@59|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@329 |s#0@@59| |key#0@@35|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $LZ |s#0@@59| |key#0@@35|))) :qid |totalord.502:22| :skolemid |2082| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt (AsFuelBottom $ly@@329) |s#0@@59| |key#0@@35|)) )))
(assert  (=> true (forall (($ly@@330 T@U) (|s#0@@60| T@U) (|key#0@@36| Int) ) (!  (=> (and (and (= (type $ly@@330) LayerTypeType) (= (type |s#0@@60|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@60| |key#0@@36|) (and ($Is |s#0@@60| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@36|) (< |key#0@@36| 256))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@330 |s#0@@60| |key#0@@36|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@330 |s#0@@60| |key#0@@36|) (|Seq#Length| |s#0@@60|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@330 |s#0@@60| |key#0@@36|) 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@60| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@330 |s#0@@60| |key#0@@36|) 1)))) |key#0@@36|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@330 |s#0@@60| |key#0@@36|) (|Seq#Length| |s#0@@60|)) (Byte__Order.__default.lt |key#0@@36| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@60| (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@330 |s#0@@60| |key#0@@36|)))))))) :qid |totalord.502:22| :skolemid |2083| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@330 |s#0@@60| |key#0@@36|)) ))))
(assert (forall (($ly@@331 T@U) (|s#0@@61| T@U) (|key#0@@37| Int) ) (!  (=> (and (and (= (type $ly@@331) LayerTypeType) (= (type |s#0@@61|) (SeqType BoxType))) (and ($Is |s#0@@61| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@37|) (< |key#0@@37| 256)))) (and (=> (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@331 |s#0@@61| |key#0@@37|) true) (=> true (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@331 |s#0@@61| |key#0@@37|)))) :qid |totalord.502:22| :skolemid |2084| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@331 |s#0@@61| |key#0@@37|)) )))
(assert  (=> true (forall (($ly@@332 T@U) (|s#0@@62| T@U) (|key#0@@38| Int) ) (!  (=> (and (and (= (type $ly@@332) LayerTypeType) (= (type |s#0@@62|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@62| |key#0@@38|) (and ($Is |s#0@@62| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@38|) (< |key#0@@38| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@62| |key#0@@38| (LitInt 0) (+ (|Seq#Length| |s#0@@62|) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@332) |s#0@@62| |key#0@@38|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) |s#0@@62| |key#0@@38| (LitInt 0) (+ (|Seq#Length| |s#0@@62|) 1))))) :qid |totalord.502:22| :skolemid |2085| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@332) |s#0@@62| |key#0@@38|)) ))))
(assert  (=> true (forall (($ly@@333 T@U) (|s#0@@63| T@U) (|key#0@@39| Int) ) (!  (=> (and (and (= (type $ly@@333) LayerTypeType) (= (type |s#0@@63|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (Lit |s#0@@63|) (LitInt |key#0@@39|)) (and ($Is |s#0@@63| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@39|) (< |key#0@@39| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@63|) (LitInt |key#0@@39|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@63|)) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@333) (Lit |s#0@@63|) (LitInt |key#0@@39|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) (Lit |s#0@@63|) (LitInt |key#0@@39|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@63|)) 1))))) :qid |totalord.502:22| :weight 3 :skolemid |2086| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@333) (Lit |s#0@@63|) (LitInt |key#0@@39|))) ))))
(assert  (=> true (forall ((|a#0@@97| T@U) (|b#0@@71| T@U) ) (!  (=> (and (and (= (type |a#0@@97|) (MapType0Type BoxType boolType)) (= (type |b#0@@71|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLte#canCall| |a#0@@97| |b#0@@71|) (and ($Is |a#0@@97| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@71| (TSet Tclass.NativeTypes.byte))))) true) :qid |totalord.675:23| :skolemid |2087| :pattern ( (Byte__Order.__default.SetAllLte |a#0@@97| |b#0@@71|)) ))))
(assert (forall ((|a#0@@98| T@U) (|b#0@@72| T@U) ) (!  (=> (and (and (= (type |a#0@@98|) (MapType0Type BoxType boolType)) (= (type |b#0@@72|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@98| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@72| (TSet Tclass.NativeTypes.byte)))) (and (=> (|Byte__Order.__default.SetAllLte#requires| |a#0@@98| |b#0@@72|) true) (=> true (|Byte__Order.__default.SetAllLte#requires| |a#0@@98| |b#0@@72|)))) :qid |totalord.675:23| :skolemid |2088| :pattern ( (|Byte__Order.__default.SetAllLte#requires| |a#0@@98| |b#0@@72|)) )))
(assert  (=> true (forall ((|a#0@@99| T@U) (|b#0@@73| T@U) ) (!  (=> (and (and (= (type |a#0@@99|) (MapType0Type BoxType boolType)) (= (type |b#0@@73|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLte#canCall| |a#0@@99| |b#0@@73|) (and ($Is |a#0@@99| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@73| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#0@@1| Int) (|y#0| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@1|) (< |x#0@@1| 256)) (and (<= (LitInt 0) |y#0|) (< |y#0| 256))) (=> (U_2_bool (MapType0Select |b#0@@73| ($Box (int_2_U |y#0|)))) (|Byte__Order.__default.lte#canCall| |x#0@@1| |y#0|))) :qid |totalord.676:12| :skolemid |2089| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#0@@1| |y#0|)) :pattern ( (MapType0Select |b#0@@73| ($Box (int_2_U |y#0|))) (MapType0Select |a#0@@99| ($Box (int_2_U |x#0@@1|)))) )) (and (=> (Byte__Order.__default.SetAllLte |a#0@@99| |b#0@@73|) (forall ((|x#0@@2| Int) (|y#0@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@2|) (< |x#0@@2| 256)) (and (<= (LitInt 0) |y#0@@0|) (< |y#0@@0| 256))) (=> (and (U_2_bool (MapType0Select |a#0@@99| ($Box (int_2_U |x#0@@2|)))) (U_2_bool (MapType0Select |b#0@@73| ($Box (int_2_U |y#0@@0|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#0@@2| |y#0@@0|))) :qid |totalord.676:12| :skolemid |2090| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#0@@2| |y#0@@0|)) :pattern ( (MapType0Select |b#0@@73| ($Box (int_2_U |y#0@@0|))) (MapType0Select |a#0@@99| ($Box (int_2_U |x#0@@2|)))) ))) (=> (forall ((|x#0@@3| Int) (|y#0@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@3|) (< |x#0@@3| 256)) (and (<= (LitInt 0) |y#0@@1|) (< |y#0@@1| 256))) (=> (and (U_2_bool (MapType0Select |a#0@@99| ($Box (int_2_U |x#0@@3|)))) (U_2_bool (MapType0Select |b#0@@73| ($Box (int_2_U |y#0@@1|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#0@@3| |y#0@@1|))) :qid |totalord.676:12| :skolemid |2090| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#0@@3| |y#0@@1|)) :pattern ( (MapType0Select |b#0@@73| ($Box (int_2_U |y#0@@1|))) (MapType0Select |a#0@@99| ($Box (int_2_U |x#0@@3|)))) )) (Byte__Order.__default.SetAllLte |a#0@@99| |b#0@@73|))))) :qid |totalord.675:23| :skolemid |2091| :pattern ( (Byte__Order.__default.SetAllLte |a#0@@99| |b#0@@73|)) ))))
(assert  (=> true (forall ((|a#0@@100| T@U) (|b#0@@74| T@U) ) (!  (=> (and (and (= (type |a#0@@100|) (MapType0Type BoxType boolType)) (= (type |b#0@@74|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLte#canCall| (Lit |a#0@@100|) (Lit |b#0@@74|)) (and ($Is |a#0@@100| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@74| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#1| Int) (|y#1| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1|) (< |x#1| 256)) (and (<= (LitInt 0) |y#1|) (< |y#1| 256))) (=> (U_2_bool (MapType0Select (Lit |b#0@@74|) ($Box (int_2_U |y#1|)))) (|Byte__Order.__default.lte#canCall| |x#1| |y#1|))) :qid |totalord.676:12| :skolemid |2092| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#1| |y#1|)) :pattern ( (MapType0Select |b#0@@74| ($Box (int_2_U |y#1|))) (MapType0Select |a#0@@100| ($Box (int_2_U |x#1|)))) )) (and (=> (Byte__Order.__default.SetAllLte (Lit |a#0@@100|) (Lit |b#0@@74|)) (forall ((|x#1@@0| Int) (|y#1@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@0|) (< |x#1@@0| 256)) (and (<= (LitInt 0) |y#1@@0|) (< |y#1@@0| 256))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@100|) ($Box (int_2_U |x#1@@0|)))) (U_2_bool (MapType0Select (Lit |b#0@@74|) ($Box (int_2_U |y#1@@0|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#1@@0| |y#1@@0|))) :qid |totalord.676:12| :skolemid |2093| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#1@@0| |y#1@@0|)) :pattern ( (MapType0Select |b#0@@74| ($Box (int_2_U |y#1@@0|))) (MapType0Select |a#0@@100| ($Box (int_2_U |x#1@@0|)))) ))) (=> (forall ((|x#1@@1| Int) (|y#1@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@1|) (< |x#1@@1| 256)) (and (<= (LitInt 0) |y#1@@1|) (< |y#1@@1| 256))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@100|) ($Box (int_2_U |x#1@@1|)))) (U_2_bool (MapType0Select (Lit |b#0@@74|) ($Box (int_2_U |y#1@@1|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#1@@1| |y#1@@1|))) :qid |totalord.676:12| :skolemid |2093| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#1@@1| |y#1@@1|)) :pattern ( (MapType0Select |b#0@@74| ($Box (int_2_U |y#1@@1|))) (MapType0Select |a#0@@100| ($Box (int_2_U |x#1@@1|)))) )) (Byte__Order.__default.SetAllLte (Lit |a#0@@100|) (Lit |b#0@@74|)))))) :qid |totalord.675:23| :weight 3 :skolemid |2094| :pattern ( (Byte__Order.__default.SetAllLte (Lit |a#0@@100|) (Lit |b#0@@74|))) ))))
(assert  (=> true (forall ((|a#0@@101| T@U) (|b#0@@75| T@U) ) (!  (=> (and (and (= (type |a#0@@101|) (MapType0Type BoxType boolType)) (= (type |b#0@@75|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLt#canCall| |a#0@@101| |b#0@@75|) (and ($Is |a#0@@101| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@75| (TSet Tclass.NativeTypes.byte))))) true) :qid |totalord.679:22| :skolemid |2095| :pattern ( (Byte__Order.__default.SetAllLt |a#0@@101| |b#0@@75|)) ))))
(assert (forall ((|a#0@@102| T@U) (|b#0@@76| T@U) ) (!  (=> (and (and (= (type |a#0@@102|) (MapType0Type BoxType boolType)) (= (type |b#0@@76|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@102| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@76| (TSet Tclass.NativeTypes.byte)))) (and (=> (|Byte__Order.__default.SetAllLt#requires| |a#0@@102| |b#0@@76|) true) (=> true (|Byte__Order.__default.SetAllLt#requires| |a#0@@102| |b#0@@76|)))) :qid |totalord.679:22| :skolemid |2096| :pattern ( (|Byte__Order.__default.SetAllLt#requires| |a#0@@102| |b#0@@76|)) )))
(assert  (=> true (forall ((|a#0@@103| T@U) (|b#0@@77| T@U) ) (!  (=> (and (and (= (type |a#0@@103|) (MapType0Type BoxType boolType)) (= (type |b#0@@77|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLt#canCall| |a#0@@103| |b#0@@77|) (and ($Is |a#0@@103| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@77| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#0@@4| Int) (|y#0@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@4|) (< |x#0@@4| 256)) (and (<= (LitInt 0) |y#0@@2|) (< |y#0@@2| 256))) (=> (U_2_bool (MapType0Select |b#0@@77| ($Box (int_2_U |y#0@@2|)))) (|Byte__Order.__default.lt#canCall| |x#0@@4| |y#0@@2|))) :qid |totalord.680:12| :skolemid |2097| :pattern ( (Byte__Order.__default.lt |x#0@@4| |y#0@@2|)) :pattern ( (MapType0Select |b#0@@77| ($Box (int_2_U |y#0@@2|))) (MapType0Select |a#0@@103| ($Box (int_2_U |x#0@@4|)))) )) (and (=> (Byte__Order.__default.SetAllLt |a#0@@103| |b#0@@77|) (forall ((|x#0@@5| Int) (|y#0@@3| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@5|) (< |x#0@@5| 256)) (and (<= (LitInt 0) |y#0@@3|) (< |y#0@@3| 256))) (=> (and (U_2_bool (MapType0Select |a#0@@103| ($Box (int_2_U |x#0@@5|)))) (U_2_bool (MapType0Select |b#0@@77| ($Box (int_2_U |y#0@@3|))))) (Byte__Order.__default.lt |x#0@@5| |y#0@@3|))) :qid |totalord.680:12| :skolemid |2098| :pattern ( (Byte__Order.__default.lt |x#0@@5| |y#0@@3|)) :pattern ( (MapType0Select |b#0@@77| ($Box (int_2_U |y#0@@3|))) (MapType0Select |a#0@@103| ($Box (int_2_U |x#0@@5|)))) ))) (=> (forall ((|x#0@@6| Int) (|y#0@@4| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@6|) (< |x#0@@6| 256)) (and (<= (LitInt 0) |y#0@@4|) (< |y#0@@4| 256))) (=> (and (U_2_bool (MapType0Select |a#0@@103| ($Box (int_2_U |x#0@@6|)))) (U_2_bool (MapType0Select |b#0@@77| ($Box (int_2_U |y#0@@4|))))) (Byte__Order.__default.lt |x#0@@6| |y#0@@4|))) :qid |totalord.680:12| :skolemid |2098| :pattern ( (Byte__Order.__default.lt |x#0@@6| |y#0@@4|)) :pattern ( (MapType0Select |b#0@@77| ($Box (int_2_U |y#0@@4|))) (MapType0Select |a#0@@103| ($Box (int_2_U |x#0@@6|)))) )) (Byte__Order.__default.SetAllLt |a#0@@103| |b#0@@77|))))) :qid |totalord.679:22| :skolemid |2099| :pattern ( (Byte__Order.__default.SetAllLt |a#0@@103| |b#0@@77|)) ))))
(assert  (=> true (forall ((|a#0@@104| T@U) (|b#0@@78| T@U) ) (!  (=> (and (and (= (type |a#0@@104|) (MapType0Type BoxType boolType)) (= (type |b#0@@78|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLt#canCall| (Lit |a#0@@104|) (Lit |b#0@@78|)) (and ($Is |a#0@@104| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@78| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#1@@2| Int) (|y#1@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@2|) (< |x#1@@2| 256)) (and (<= (LitInt 0) |y#1@@2|) (< |y#1@@2| 256))) (=> (U_2_bool (MapType0Select (Lit |b#0@@78|) ($Box (int_2_U |y#1@@2|)))) (|Byte__Order.__default.lt#canCall| |x#1@@2| |y#1@@2|))) :qid |totalord.680:12| :skolemid |2100| :pattern ( (Byte__Order.__default.lt |x#1@@2| |y#1@@2|)) :pattern ( (MapType0Select |b#0@@78| ($Box (int_2_U |y#1@@2|))) (MapType0Select |a#0@@104| ($Box (int_2_U |x#1@@2|)))) )) (and (=> (Byte__Order.__default.SetAllLt (Lit |a#0@@104|) (Lit |b#0@@78|)) (forall ((|x#1@@3| Int) (|y#1@@3| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@3|) (< |x#1@@3| 256)) (and (<= (LitInt 0) |y#1@@3|) (< |y#1@@3| 256))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@104|) ($Box (int_2_U |x#1@@3|)))) (U_2_bool (MapType0Select (Lit |b#0@@78|) ($Box (int_2_U |y#1@@3|))))) (Byte__Order.__default.lt |x#1@@3| |y#1@@3|))) :qid |totalord.680:12| :skolemid |2101| :pattern ( (Byte__Order.__default.lt |x#1@@3| |y#1@@3|)) :pattern ( (MapType0Select |b#0@@78| ($Box (int_2_U |y#1@@3|))) (MapType0Select |a#0@@104| ($Box (int_2_U |x#1@@3|)))) ))) (=> (forall ((|x#1@@4| Int) (|y#1@@4| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@4|) (< |x#1@@4| 256)) (and (<= (LitInt 0) |y#1@@4|) (< |y#1@@4| 256))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@104|) ($Box (int_2_U |x#1@@4|)))) (U_2_bool (MapType0Select (Lit |b#0@@78|) ($Box (int_2_U |y#1@@4|))))) (Byte__Order.__default.lt |x#1@@4| |y#1@@4|))) :qid |totalord.680:12| :skolemid |2101| :pattern ( (Byte__Order.__default.lt |x#1@@4| |y#1@@4|)) :pattern ( (MapType0Select |b#0@@78| ($Box (int_2_U |y#1@@4|))) (MapType0Select |a#0@@104| ($Box (int_2_U |x#1@@4|)))) )) (Byte__Order.__default.SetAllLt (Lit |a#0@@104|) (Lit |b#0@@78|)))))) :qid |totalord.679:22| :weight 3 :skolemid |2102| :pattern ( (Byte__Order.__default.SetAllLt (Lit |a#0@@104|) (Lit |b#0@@78|))) ))))
(assert (forall (($ly@@334 T@U) (|a#0@@105| Int) ) (!  (=> (= (type $ly@@334) LayerTypeType) (and (=> (Byte__Order.__default.NotMinimum ($LS $ly@@334) |a#0@@105|) (Byte__Order.__default.NotMinimum $ly@@334 |a#0@@105|)) (=> (Byte__Order.__default.NotMinimum $ly@@334 |a#0@@105|) (Byte__Order.__default.NotMinimum ($LS $ly@@334) |a#0@@105|)))) :qid |totalord.696:23| :skolemid |2103| :pattern ( (Byte__Order.__default.NotMinimum ($LS $ly@@334) |a#0@@105|)) )))
(assert (forall (($ly@@335 T@U) (|a#0@@106| Int) ) (!  (=> (= (type $ly@@335) LayerTypeType) (and (=> (Byte__Order.__default.NotMinimum $ly@@335 |a#0@@106|) (Byte__Order.__default.NotMinimum $LZ |a#0@@106|)) (=> (Byte__Order.__default.NotMinimum $LZ |a#0@@106|) (Byte__Order.__default.NotMinimum $ly@@335 |a#0@@106|)))) :qid |totalord.696:23| :skolemid |2104| :pattern ( (Byte__Order.__default.NotMinimum (AsFuelBottom $ly@@335) |a#0@@106|)) )))
(assert  (=> true (forall (($ly@@336 T@U) (|a#0@@107| Int) ) (!  (=> (and (= (type $ly@@336) LayerTypeType) (or (|Byte__Order.__default.NotMinimum#canCall| |a#0@@107|) (and (<= (LitInt 0) |a#0@@107|) (< |a#0@@107| 256)))) true) :qid |totalord.696:23| :skolemid |2105| :pattern ( (Byte__Order.__default.NotMinimum $ly@@336 |a#0@@107|)) ))))
(assert (forall (($ly@@337 T@U) (|a#0@@108| Int) ) (!  (=> (= (type $ly@@337) LayerTypeType) (=> (and (<= (LitInt 0) |a#0@@108|) (< |a#0@@108| 256)) (and (=> (|Byte__Order.__default.NotMinimum#requires| $ly@@337 |a#0@@108|) true) (=> true (|Byte__Order.__default.NotMinimum#requires| $ly@@337 |a#0@@108|))))) :qid |totalord.696:23| :skolemid |2106| :pattern ( (|Byte__Order.__default.NotMinimum#requires| $ly@@337 |a#0@@108|)) )))
(assert  (=> true (forall (($ly@@338 T@U) (|a#0@@109| Int) ) (!  (=> (and (= (type $ly@@338) LayerTypeType) (or (|Byte__Order.__default.NotMinimum#canCall| |a#0@@109|) (and (<= (LitInt 0) |a#0@@109|) (< |a#0@@109| 256)))) (and (forall ((|b#0@@79| Int) ) (!  (=> (and (<= (LitInt 0) |b#0@@79|) (< |b#0@@79| 256)) (|Byte__Order.__default.lt#canCall| |b#0@@79| |a#0@@109|)) :qid |totalord.697:12| :skolemid |2107| :pattern ( (Byte__Order.__default.lt |b#0@@79| |a#0@@109|)) )) (and (=> (Byte__Order.__default.NotMinimum ($LS $ly@@338) |a#0@@109|) (exists ((|b#0@@80| Int) ) (!  (and (and (<= (LitInt 0) |b#0@@80|) (< |b#0@@80| 256)) (Byte__Order.__default.lt |b#0@@80| |a#0@@109|)) :qid |totalord.697:12| :skolemid |2108| :pattern ( (Byte__Order.__default.lt |b#0@@80| |a#0@@109|)) ))) (=> (exists ((|b#0@@81| Int) ) (!  (and (and (<= (LitInt 0) |b#0@@81|) (< |b#0@@81| 256)) (Byte__Order.__default.lt |b#0@@81| |a#0@@109|)) :qid |totalord.697:12| :skolemid |2108| :pattern ( (Byte__Order.__default.lt |b#0@@81| |a#0@@109|)) )) (Byte__Order.__default.NotMinimum ($LS $ly@@338) |a#0@@109|))))) :qid |totalord.696:23| :skolemid |2109| :pattern ( (Byte__Order.__default.NotMinimum ($LS $ly@@338) |a#0@@109|)) ))))
(assert  (=> true (forall (($ly@@339 T@U) (|a#0@@110| Int) ) (!  (=> (and (= (type $ly@@339) LayerTypeType) (or (|Byte__Order.__default.NotMinimum#canCall| (LitInt |a#0@@110|)) (and (<= (LitInt 0) |a#0@@110|) (< |a#0@@110| 256)))) (and (forall ((|b#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |b#1@@1|) (< |b#1@@1| 256)) (|Byte__Order.__default.lt#canCall| |b#1@@1| (LitInt |a#0@@110|))) :qid |totalord.697:12| :skolemid |2110| :pattern ( (Byte__Order.__default.lt |b#1@@1| |a#0@@110|)) )) (and (=> (Byte__Order.__default.NotMinimum ($LS $ly@@339) (LitInt |a#0@@110|)) (exists ((|b#1@@2| Int) ) (!  (and (and (<= (LitInt 0) |b#1@@2|) (< |b#1@@2| 256)) (Byte__Order.__default.lt |b#1@@2| (LitInt |a#0@@110|))) :qid |totalord.697:12| :skolemid |2111| :pattern ( (Byte__Order.__default.lt |b#1@@2| |a#0@@110|)) ))) (=> (exists ((|b#1@@3| Int) ) (!  (and (and (<= (LitInt 0) |b#1@@3|) (< |b#1@@3| 256)) (Byte__Order.__default.lt |b#1@@3| (LitInt |a#0@@110|))) :qid |totalord.697:12| :skolemid |2111| :pattern ( (Byte__Order.__default.lt |b#1@@3| |a#0@@110|)) )) (Byte__Order.__default.NotMinimum ($LS $ly@@339) (LitInt |a#0@@110|)))))) :qid |totalord.696:23| :weight 3 :skolemid |2112| :pattern ( (Byte__Order.__default.NotMinimum ($LS $ly@@339) (LitInt |a#0@@110|))) ))))
(assert (forall ((arg0@@295 T@U) (arg1@@169 T@U) (arg2@@117 Int) (arg3@@83 T@U) ) (! (= (type (Byte__Order.__default.MapPivotedUnion arg0@@295 arg1@@169 arg2@@117 arg3@@83)) (MapType BoxType BoxType)) :qid |funType:Byte__Order.__default.MapPivotedUnion| :pattern ( (Byte__Order.__default.MapPivotedUnion arg0@@295 arg1@@169 arg2@@117 arg3@@83)) )))
(assert  (=> true (forall ((Byte_Order._default.MapPivotedUnion$Value T@U) (|left#0| T@U) (|pivot#0| Int) (|right#0| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value) TyType) (= (type |left#0|) (MapType BoxType BoxType))) (= (type |right#0|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapPivotedUnion#canCall| Byte_Order._default.MapPivotedUnion$Value |left#0| |pivot#0| |right#0|) (and (and ($Is |left#0| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value)) (and (<= (LitInt 0) |pivot#0|) (< |pivot#0| 256))) ($Is |right#0| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value))))) ($Is (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value |left#0| |pivot#0| |right#0|) (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value))) :qid |unknown.0:0| :skolemid |2113| :pattern ( (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value |left#0| |pivot#0| |right#0|)) ))))
(assert (forall ((Byte_Order._default.MapPivotedUnion$Value@@0 T@U) (|left#0@@0| T@U) (|pivot#0@@0| Int) (|right#0@@0| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value@@0) TyType) (= (type |left#0@@0|) (MapType BoxType BoxType))) (= (type |right#0@@0|) (MapType BoxType BoxType))) (and (and ($Is |left#0@@0| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@0)) (and (<= (LitInt 0) |pivot#0@@0|) (< |pivot#0@@0| 256))) ($Is |right#0@@0| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@0)))) (and (=> (|Byte__Order.__default.MapPivotedUnion#requires| Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@0| |pivot#0@@0| |right#0@@0|) true) (=> true (|Byte__Order.__default.MapPivotedUnion#requires| Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@0| |pivot#0@@0| |right#0@@0|)))) :qid |unknown.0:0| :skolemid |2114| :pattern ( (|Byte__Order.__default.MapPivotedUnion#requires| Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@0| |pivot#0@@0| |right#0@@0|)) )))
(assert  (and (forall ((arg0@@296 T@U) (arg1@@170 Int) ) (! (= (type (|lambda#76| arg0@@296 arg1@@170)) (MapType0Type BoxType boolType)) :qid |funType:lambda#76| :pattern ( (|lambda#76| arg0@@296 arg1@@170)) )) (forall ((arg0@@297 T@U) (arg1@@171 T@U) (arg2@@118 Int) ) (! (= (type (|lambda#77| arg0@@297 arg1@@171 arg2@@118)) (MapType0Type BoxType boolType)) :qid |funType:lambda#77| :pattern ( (|lambda#77| arg0@@297 arg1@@171 arg2@@118)) ))))
(assert  (=> true (forall ((Byte_Order._default.MapPivotedUnion$Value@@1 T@U) (|left#0@@1| T@U) (|pivot#0@@1| Int) (|right#0@@1| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value@@1) TyType) (= (type |left#0@@1|) (MapType BoxType BoxType))) (= (type |right#0@@1|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapPivotedUnion#canCall| Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| |pivot#0@@1| |right#0@@1|) (and (and ($Is |left#0@@1| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1)) (and (<= (LitInt 0) |pivot#0@@1|) (< |pivot#0@@1| 256))) ($Is |right#0@@1| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1))))) (and (and (and (forall ((|k#0@@46| Int) ) (!  (=> (and (<= (LitInt 0) |k#0@@46|) (< |k#0@@46| 256)) (|Byte__Order.__default.lt#canCall| |k#0@@46| |pivot#0@@1|)) :qid |totalord.716:57| :skolemid |2115| :pattern ( (Byte__Order.__default.lt |k#0@@46| |pivot#0@@1|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| (|lambda#76| Tclass.NativeTypes.byte |pivot#0@@1|))) (let ((|restricted_left#0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| (|lambda#76| Tclass.NativeTypes.byte |pivot#0@@1|)))) (and (and (forall ((|k#1@@8| Int) ) (!  (=> (and (<= (LitInt 0) |k#1@@8|) (< |k#1@@8| 256)) (|Byte__Order.__default.lte#canCall| |pivot#0@@1| |k#1@@8|)) :qid |totalord.717:59| :skolemid |2116| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |pivot#0@@1| |k#1@@8|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@1| (|lambda#77| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte |pivot#0@@1|))) (let ((|restricted_right#0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@1| (|lambda#77| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte |pivot#0@@1|)))) (|Maps.__default.MapDisjointUnion#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |restricted_left#0| |restricted_right#0|))))) (= (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| |pivot#0@@1| |right#0@@1|) (let ((|restricted_left#0@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| (|lambda#76| Tclass.NativeTypes.byte |pivot#0@@1|)))) (let ((|restricted_right#0@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@1| (|lambda#77| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte |pivot#0@@1|)))) (Maps.__default.MapDisjointUnion Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 StartFuel_Maps._default.MapDisjointUnion |restricted_left#0@@0| |restricted_right#0@@0|)))))) :qid |unknown.0:0| :skolemid |2117| :pattern ( (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| |pivot#0@@1| |right#0@@1|)) ))))
(assert  (=> true (forall ((Byte_Order._default.MapPivotedUnion$Value@@2 T@U) (|left#0@@2| T@U) (|pivot#0@@2| Int) (|right#0@@2| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value@@2) TyType) (= (type |left#0@@2|) (MapType BoxType BoxType))) (= (type |right#0@@2|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapPivotedUnion#canCall| Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (LitInt |pivot#0@@2|) (Lit |right#0@@2|)) (and (and ($Is |left#0@@2| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2)) (and (<= (LitInt 0) |pivot#0@@2|) (< |pivot#0@@2| 256))) ($Is |right#0@@2| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2))))) (and (and (and (forall ((|k#2@@6| Int) ) (!  (=> (and (<= (LitInt 0) |k#2@@6|) (< |k#2@@6| 256)) (|Byte__Order.__default.lt#canCall| |k#2@@6| (LitInt |pivot#0@@2|))) :qid |totalord.716:57| :skolemid |2118| :pattern ( (Byte__Order.__default.lt |k#2@@6| |pivot#0@@2|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (|lambda#76| Tclass.NativeTypes.byte (LitInt |pivot#0@@2|)))) (let ((|restricted_left#1| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (|lambda#76| Tclass.NativeTypes.byte (LitInt |pivot#0@@2|))))) (and (and (forall ((|k#3| Int) ) (!  (=> (and (<= (LitInt 0) |k#3|) (< |k#3| 256)) (|Byte__Order.__default.lte#canCall| (LitInt |pivot#0@@2|) |k#3|)) :qid |totalord.717:59| :skolemid |2119| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |pivot#0@@2| |k#3|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@2|) (|lambda#77| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte (LitInt |pivot#0@@2|)))) (let ((|restricted_right#1| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@2|) (|lambda#77| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte (LitInt |pivot#0@@2|))))) (|Maps.__default.MapDisjointUnion#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 |restricted_left#1| |restricted_right#1|))))) (= (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (LitInt |pivot#0@@2|) (Lit |right#0@@2|)) (let ((|restricted_left#1@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (|lambda#76| Tclass.NativeTypes.byte (LitInt |pivot#0@@2|))))) (let ((|restricted_right#1@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@2|) (|lambda#77| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte (LitInt |pivot#0@@2|))))) (Maps.__default.MapDisjointUnion Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 StartFuel_Maps._default.MapDisjointUnion |restricted_left#1@@0| |restricted_right#1@@0|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2120| :pattern ( (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (LitInt |pivot#0@@2|) (Lit |right#0@@2|))) ))))
(assert (forall ((arg0@@298 T@U) (arg1@@172 Int) ) (! (= (type (Byte__Order.__default.SetSuccessor arg0@@298 arg1@@172)) DatatypeTypeType) :qid |funType:Byte__Order.__default.SetSuccessor| :pattern ( (Byte__Order.__default.SetSuccessor arg0@@298 arg1@@172)) )))
(assert  (=> true (forall ((|m#0@@81| T@U) (|key#0@@40| Int) ) (!  (=> (and (= (type |m#0@@81|) (MapType0Type BoxType boolType)) (or (|Byte__Order.__default.SetSuccessor#canCall| |m#0@@81| |key#0@@40|) (and ($Is |m#0@@81| (TSet Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@40|) (< |key#0@@40| 256))))) ($Is (Byte__Order.__default.SetSuccessor |m#0@@81| |key#0@@40|) (Tclass.Options.Option Tclass.NativeTypes.byte))) :qid |totalord.721:25| :skolemid |2121| :pattern ( (Byte__Order.__default.SetSuccessor |m#0@@81| |key#0@@40|)) ))))
(assert (forall (($Heap@@39 T@U) (|m#0@@82| T@U) (|key#0@@41| Int) ) (!  (=> (and (= (type $Heap@@39) (MapType0Type refType MapType1Type)) (= (type |m#0@@82|) (MapType0Type BoxType boolType))) (=> (and (and ($IsGoodHeap $Heap@@39) ($Is |m#0@@82| (TSet Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |key#0@@41|) (< |key#0@@41| 256))) (and (=> (|Byte__Order.__default.SetSuccessor#requires| |m#0@@82| |key#0@@41|) true) (=> true (|Byte__Order.__default.SetSuccessor#requires| |m#0@@82| |key#0@@41|))))) :qid |totalord.721:12| :skolemid |2122| :pattern ( (|Byte__Order.__default.SetSuccessor#requires| |m#0@@82| |key#0@@41|) ($IsGoodHeap $Heap@@39)) )))
(assert (forall ((m@@49 T@U) (key Int) ) (!  (=> (and (= (type m@@49) (MapType0Type BoxType boolType)) (|$let#4$canCall| m@@49 key)) (and (and (<= (LitInt 0) (|$let#4_next| m@@49 key)) (< (|$let#4_next| m@@49 key) 256)) (and (and (U_2_bool (MapType0Select m@@49 ($Box (int_2_U (|$let#4_next| m@@49 key))))) (Byte__Order.__default.lt key (|$let#4_next| m@@49 key))) (forall ((|other#1| Int) ) (!  (=> (and (<= (LitInt 0) |other#1|) (< |other#1| 256)) (=> (and (and (U_2_bool (MapType0Select m@@49 ($Box (int_2_U |other#1|)))) (not (= |other#1| (|$let#4_next| m@@49 key)))) (Byte__Order.__default.lt key |other#1|)) (Byte__Order.__default.lt (|$let#4_next| m@@49 key) |other#1|))) :qid |totalord.726:18| :skolemid |2127| :pattern ( (Byte__Order.__default.lt (|$let#4_next| m@@49 key) |other#1|)) :pattern ( (Byte__Order.__default.lt key |other#1|)) :pattern ( (MapType0Select m@@49 ($Box (int_2_U |other#1|)))) ))))) :qid |totalord.723:8| :skolemid |2128| :pattern ( (|$let#4_next| m@@49 key)) )))
(assert  (=> true (forall (($Heap@@40 T@U) (|m#0@@83| T@U) (|key#0@@42| Int) ) (!  (=> (and (and (= (type $Heap@@40) (MapType0Type refType MapType1Type)) (= (type |m#0@@83|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetSuccessor#canCall| |m#0@@83| |key#0@@42|) (and (and ($IsGoodHeap $Heap@@40) ($Is |m#0@@83| (TSet Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |key#0@@42|) (< |key#0@@42| 256))))) (and (and (forall ((|next#0| Int) ) (!  (=> (and (<= (LitInt 0) |next#0|) (< |next#0| 256)) (and (=> (U_2_bool (MapType0Select |m#0@@83| ($Box (int_2_U |next#0|)))) (|Byte__Order.__default.lt#canCall| |key#0@@42| |next#0|)) (=> (and (|Byte__Order.__default.lt#canCall| |key#0@@42| |next#0|) (Byte__Order.__default.lt |key#0@@42| |next#0|)) (forall ((|other#0| Int) ) (!  (=> (and (<= (LitInt 0) |other#0|) (< |other#0| 256)) (and (=> (not (= |other#0| |next#0|)) (|Byte__Order.__default.lt#canCall| |key#0@@42| |other#0|)) (=> (and (|Byte__Order.__default.lt#canCall| |key#0@@42| |other#0|) (Byte__Order.__default.lt |key#0@@42| |other#0|)) (|Byte__Order.__default.lt#canCall| |next#0| |other#0|)))) :qid |totalord.726:18| :skolemid |2123| :pattern ( (Byte__Order.__default.lt |next#0| |other#0|)) :pattern ( (Byte__Order.__default.lt |key#0@@42| |other#0|)) :pattern ( (MapType0Select |m#0@@83| ($Box (int_2_U |other#0|)))) ))))) :qid |totalord.723:8| :skolemid |2124| :pattern ( (Byte__Order.__default.lt |key#0@@42| |next#0|)) :pattern ( (MapType0Select |m#0@@83| ($Box (int_2_U |next#0|)))) )) (=> (exists ((|next#0@@0| Int) ) (!  (and (and (<= (LitInt 0) |next#0@@0|) (< |next#0@@0| 256)) (and (and (U_2_bool (MapType0Select |m#0@@83| ($Box (int_2_U |next#0@@0|)))) (Byte__Order.__default.lt |key#0@@42| |next#0@@0|)) (forall ((|other#0@@0| Int) ) (!  (=> (and (<= (LitInt 0) |other#0@@0|) (< |other#0@@0| 256)) (=> (and (and (U_2_bool (MapType0Select |m#0@@83| ($Box (int_2_U |other#0@@0|)))) (not (= |other#0@@0| |next#0@@0|))) (Byte__Order.__default.lt |key#0@@42| |other#0@@0|)) (Byte__Order.__default.lt |next#0@@0| |other#0@@0|))) :qid |totalord.726:18| :skolemid |2125| :pattern ( (Byte__Order.__default.lt |next#0@@0| |other#0@@0|)) :pattern ( (Byte__Order.__default.lt |key#0@@42| |other#0@@0|)) :pattern ( (MapType0Select |m#0@@83| ($Box (int_2_U |other#0@@0|)))) )))) :qid |totalord.723:8| :skolemid |2126| :pattern ( (Byte__Order.__default.lt |key#0@@42| |next#0@@0|)) :pattern ( (MapType0Select |m#0@@83| ($Box (int_2_U |next#0@@0|)))) )) (|$let#4$canCall| |m#0@@83| |key#0@@42|))) (= (Byte__Order.__default.SetSuccessor |m#0@@83| |key#0@@42|) (ite (exists ((|next#0@@1| Int) ) (!  (and (and (<= (LitInt 0) |next#0@@1|) (< |next#0@@1| 256)) (and (and (U_2_bool (MapType0Select |m#0@@83| ($Box (int_2_U |next#0@@1|)))) (Byte__Order.__default.lt |key#0@@42| |next#0@@1|)) (forall ((|other#0@@1| Int) ) (!  (=> (and (<= (LitInt 0) |other#0@@1|) (< |other#0@@1| 256)) (=> (and (and (U_2_bool (MapType0Select |m#0@@83| ($Box (int_2_U |other#0@@1|)))) (not (= |other#0@@1| |next#0@@1|))) (Byte__Order.__default.lt |key#0@@42| |other#0@@1|)) (Byte__Order.__default.lt |next#0@@1| |other#0@@1|))) :qid |totalord.726:18| :skolemid |2129| :pattern ( (Byte__Order.__default.lt |next#0@@1| |other#0@@1|)) :pattern ( (Byte__Order.__default.lt |key#0@@42| |other#0@@1|)) :pattern ( (MapType0Select |m#0@@83| ($Box (int_2_U |other#0@@1|)))) )))) :qid |totalord.723:8| :skolemid |2130| :pattern ( (Byte__Order.__default.lt |key#0@@42| |next#0@@1|)) :pattern ( (MapType0Select |m#0@@83| ($Box (int_2_U |next#0@@1|)))) )) (let ((|next#1| (|$let#4_next| |m#0@@83| |key#0@@42|))) (|#Options.Option.Some| ($Box (int_2_U |next#1|)))) |#Options.Option.None|)))) :qid |totalord.721:12| :skolemid |2131| :pattern ( (Byte__Order.__default.SetSuccessor |m#0@@83| |key#0@@42|) ($IsGoodHeap $Heap@@40)) ))))
(assert  (=> true (forall (($Heap@@41 T@U) (|m#0@@84| T@U) (|key#0@@43| Int) ) (!  (=> (and (and (= (type $Heap@@41) (MapType0Type refType MapType1Type)) (= (type |m#0@@84|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetSuccessor#canCall| (Lit |m#0@@84|) (LitInt |key#0@@43|)) (and (and ($IsGoodHeap $Heap@@41) ($Is |m#0@@84| (TSet Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |key#0@@43|) (< |key#0@@43| 256))))) (and (and (forall ((|next#2| Int) ) (!  (=> (and (<= (LitInt 0) |next#2|) (< |next#2| 256)) (and (=> (U_2_bool (MapType0Select (Lit |m#0@@84|) ($Box (int_2_U |next#2|)))) (|Byte__Order.__default.lt#canCall| (LitInt |key#0@@43|) |next#2|)) (=> (and (|Byte__Order.__default.lt#canCall| (LitInt |key#0@@43|) |next#2|) (Byte__Order.__default.lt (LitInt |key#0@@43|) |next#2|)) (forall ((|other#2| Int) ) (!  (=> (and (<= (LitInt 0) |other#2|) (< |other#2| 256)) (and (=> (not (= |other#2| |next#2|)) (|Byte__Order.__default.lt#canCall| (LitInt |key#0@@43|) |other#2|)) (=> (and (|Byte__Order.__default.lt#canCall| (LitInt |key#0@@43|) |other#2|) (Byte__Order.__default.lt (LitInt |key#0@@43|) |other#2|)) (|Byte__Order.__default.lt#canCall| |next#2| |other#2|)))) :qid |totalord.726:18| :skolemid |2132| :pattern ( (Byte__Order.__default.lt |next#2| |other#2|)) :pattern ( (Byte__Order.__default.lt |key#0@@43| |other#2|)) :pattern ( (MapType0Select |m#0@@84| ($Box (int_2_U |other#2|)))) ))))) :qid |totalord.723:8| :skolemid |2133| :pattern ( (Byte__Order.__default.lt |key#0@@43| |next#2|)) :pattern ( (MapType0Select |m#0@@84| ($Box (int_2_U |next#2|)))) )) (=> (exists ((|next#2@@0| Int) ) (!  (and (and (<= (LitInt 0) |next#2@@0|) (< |next#2@@0| 256)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@84|) ($Box (int_2_U |next#2@@0|)))) (Byte__Order.__default.lt (LitInt |key#0@@43|) |next#2@@0|)) (forall ((|other#2@@0| Int) ) (!  (=> (and (<= (LitInt 0) |other#2@@0|) (< |other#2@@0| 256)) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@84|) ($Box (int_2_U |other#2@@0|)))) (not (= |other#2@@0| |next#2@@0|))) (Byte__Order.__default.lt (LitInt |key#0@@43|) |other#2@@0|)) (Byte__Order.__default.lt |next#2@@0| |other#2@@0|))) :qid |totalord.726:18| :skolemid |2134| :pattern ( (Byte__Order.__default.lt |next#2@@0| |other#2@@0|)) :pattern ( (Byte__Order.__default.lt |key#0@@43| |other#2@@0|)) :pattern ( (MapType0Select |m#0@@84| ($Box (int_2_U |other#2@@0|)))) )))) :qid |totalord.723:8| :skolemid |2135| :pattern ( (Byte__Order.__default.lt |key#0@@43| |next#2@@0|)) :pattern ( (MapType0Select |m#0@@84| ($Box (int_2_U |next#2@@0|)))) )) (|$let#4$canCall| (Lit |m#0@@84|) (LitInt |key#0@@43|)))) (= (Byte__Order.__default.SetSuccessor (Lit |m#0@@84|) (LitInt |key#0@@43|)) (ite (exists ((|next#2@@1| Int) ) (!  (and (and (<= (LitInt 0) |next#2@@1|) (< |next#2@@1| 256)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@84|) ($Box (int_2_U |next#2@@1|)))) (Byte__Order.__default.lt (LitInt |key#0@@43|) |next#2@@1|)) (forall ((|other#2@@1| Int) ) (!  (=> (and (<= (LitInt 0) |other#2@@1|) (< |other#2@@1| 256)) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@84|) ($Box (int_2_U |other#2@@1|)))) (not (= |other#2@@1| |next#2@@1|))) (Byte__Order.__default.lt (LitInt |key#0@@43|) |other#2@@1|)) (Byte__Order.__default.lt |next#2@@1| |other#2@@1|))) :qid |totalord.726:18| :skolemid |2136| :pattern ( (Byte__Order.__default.lt |next#2@@1| |other#2@@1|)) :pattern ( (Byte__Order.__default.lt |key#0@@43| |other#2@@1|)) :pattern ( (MapType0Select |m#0@@84| ($Box (int_2_U |other#2@@1|)))) )))) :qid |totalord.723:8| :skolemid |2137| :pattern ( (Byte__Order.__default.lt |key#0@@43| |next#2@@1|)) :pattern ( (MapType0Select |m#0@@84| ($Box (int_2_U |next#2@@1|)))) )) (let ((|next#3| (|$let#4_next| (Lit |m#0@@84|) (LitInt |key#0@@43|)))) (|#Options.Option.Some| ($Box (int_2_U |next#3|)))) |#Options.Option.None|)))) :qid |totalord.721:12| :weight 3 :skolemid |2138| :pattern ( (Byte__Order.__default.SetSuccessor (Lit |m#0@@84|) (LitInt |key#0@@43|)) ($IsGoodHeap $Heap@@41)) ))))
(assert (forall ((arg0@@299 T@U) (arg1@@173 T@U) (arg2@@119 Int) ) (! (= (type (Byte__Order.__default.MapSuccessor arg0@@299 arg1@@173 arg2@@119)) DatatypeTypeType) :qid |funType:Byte__Order.__default.MapSuccessor| :pattern ( (Byte__Order.__default.MapSuccessor arg0@@299 arg1@@173 arg2@@119)) )))
(assert  (=> true (forall ((Byte_Order._default.MapSuccessor$V T@U) (|m#0@@85| T@U) (|key#0@@44| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V) TyType) (= (type |m#0@@85|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapSuccessor#canCall| Byte_Order._default.MapSuccessor$V |m#0@@85| |key#0@@44|) (and ($Is |m#0@@85| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V)) (and (<= (LitInt 0) |key#0@@44|) (< |key#0@@44| 256))))) ($Is (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V |m#0@@85| |key#0@@44|) (Tclass.Options.Option Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |2139| :pattern ( (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V |m#0@@85| |key#0@@44|)) ))))
(assert (forall ((Byte_Order._default.MapSuccessor$V@@0 T@U) (|m#0@@86| T@U) (|key#0@@45| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V@@0) TyType) (= (type |m#0@@86|) (MapType BoxType BoxType))) (and ($Is |m#0@@86| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V@@0)) (and (<= (LitInt 0) |key#0@@45|) (< |key#0@@45| 256)))) (and (=> (|Byte__Order.__default.MapSuccessor#requires| Byte_Order._default.MapSuccessor$V@@0 |m#0@@86| |key#0@@45|) true) (=> true (|Byte__Order.__default.MapSuccessor#requires| Byte_Order._default.MapSuccessor$V@@0 |m#0@@86| |key#0@@45|)))) :qid |unknown.0:0| :skolemid |2140| :pattern ( (|Byte__Order.__default.MapSuccessor#requires| Byte_Order._default.MapSuccessor$V@@0 |m#0@@86| |key#0@@45|)) )))
(assert  (=> true (forall ((Byte_Order._default.MapSuccessor$V@@1 T@U) (|m#0@@87| T@U) (|key#0@@46| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V@@1) TyType) (= (type |m#0@@87|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapSuccessor#canCall| Byte_Order._default.MapSuccessor$V@@1 |m#0@@87| |key#0@@46|) (and ($Is |m#0@@87| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V@@1)) (and (<= (LitInt 0) |key#0@@46|) (< |key#0@@46| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (|Map#Domain| |m#0@@87|) |key#0@@46|) (= (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@1 |m#0@@87| |key#0@@46|) (Byte__Order.__default.SetSuccessor (|Map#Domain| |m#0@@87|) |key#0@@46|)))) :qid |unknown.0:0| :skolemid |2141| :pattern ( (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@1 |m#0@@87| |key#0@@46|)) ))))
(assert  (=> true (forall ((Byte_Order._default.MapSuccessor$V@@2 T@U) (|m#0@@88| T@U) (|key#0@@47| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V@@2) TyType) (= (type |m#0@@88|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapSuccessor#canCall| Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@88|) (LitInt |key#0@@47|)) (and ($Is |m#0@@88| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V@@2)) (and (<= (LitInt 0) |key#0@@47|) (< |key#0@@47| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (Lit (|Map#Domain| (Lit |m#0@@88|))) (LitInt |key#0@@47|)) (= (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@88|) (LitInt |key#0@@47|)) (Lit (Byte__Order.__default.SetSuccessor (Lit (|Map#Domain| (Lit |m#0@@88|))) (LitInt |key#0@@47|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2142| :pattern ( (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@88|) (LitInt |key#0@@47|))) ))))
(assert (forall ((arg0@@300 T@U) (arg1@@174 Int) ) (! (= (type (Byte__Order.__default.SeqSuccessor arg0@@300 arg1@@174)) DatatypeTypeType) :qid |funType:Byte__Order.__default.SeqSuccessor| :pattern ( (Byte__Order.__default.SeqSuccessor arg0@@300 arg1@@174)) )))
(assert  (=> true (forall ((|m#0@@89| T@U) (|key#0@@48| Int) ) (!  (=> (and (= (type |m#0@@89|) (SeqType BoxType)) (or (|Byte__Order.__default.SeqSuccessor#canCall| |m#0@@89| |key#0@@48|) (and ($Is |m#0@@89| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@48|) (< |key#0@@48| 256))))) ($Is (Byte__Order.__default.SeqSuccessor |m#0@@89| |key#0@@48|) (Tclass.Options.Option Tclass.NativeTypes.byte))) :qid |totalord.737:25| :skolemid |2143| :pattern ( (Byte__Order.__default.SeqSuccessor |m#0@@89| |key#0@@48|)) ))))
(assert (forall ((|m#0@@90| T@U) (|key#0@@49| Int) ) (!  (=> (= (type |m#0@@90|) (SeqType BoxType)) (=> (and ($Is |m#0@@90| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@49|) (< |key#0@@49| 256))) (and (=> (|Byte__Order.__default.SeqSuccessor#requires| |m#0@@90| |key#0@@49|) true) (=> true (|Byte__Order.__default.SeqSuccessor#requires| |m#0@@90| |key#0@@49|))))) :qid |totalord.737:25| :skolemid |2144| :pattern ( (|Byte__Order.__default.SeqSuccessor#requires| |m#0@@90| |key#0@@49|)) )))
(assert (forall ((arg0@@301 T@U) (arg1@@175 T@U) ) (! (= (type (|lambda#88| arg0@@301 arg1@@175)) (MapType0Type BoxType boolType)) :qid |funType:lambda#88| :pattern ( (|lambda#88| arg0@@301 arg1@@175)) )))
(assert  (=> true (forall ((|m#0@@91| T@U) (|key#0@@50| Int) ) (!  (=> (and (= (type |m#0@@91|) (SeqType BoxType)) (or (|Byte__Order.__default.SeqSuccessor#canCall| |m#0@@91| |key#0@@50|) (and ($Is |m#0@@91| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@50|) (< |key#0@@50| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (|lambda#88| Tclass.NativeTypes.byte |m#0@@91|) |key#0@@50|) (= (Byte__Order.__default.SeqSuccessor |m#0@@91| |key#0@@50|) (Byte__Order.__default.SetSuccessor (|lambda#88| Tclass.NativeTypes.byte |m#0@@91|) |key#0@@50|)))) :qid |totalord.737:25| :skolemid |2145| :pattern ( (Byte__Order.__default.SeqSuccessor |m#0@@91| |key#0@@50|)) ))))
(assert  (=> true (forall ((|m#0@@92| T@U) (|key#0@@51| Int) ) (!  (=> (and (= (type |m#0@@92|) (SeqType BoxType)) (or (|Byte__Order.__default.SeqSuccessor#canCall| (Lit |m#0@@92|) (LitInt |key#0@@51|)) (and ($Is |m#0@@92| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@51|) (< |key#0@@51| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (|lambda#88| Tclass.NativeTypes.byte |m#0@@92|) (LitInt |key#0@@51|)) (= (Byte__Order.__default.SeqSuccessor (Lit |m#0@@92|) (LitInt |key#0@@51|)) (Byte__Order.__default.SetSuccessor (|lambda#88| Tclass.NativeTypes.byte |m#0@@92|) (LitInt |key#0@@51|))))) :qid |totalord.737:25| :weight 3 :skolemid |2146| :pattern ( (Byte__Order.__default.SeqSuccessor (Lit |m#0@@92|) (LitInt |key#0@@51|))) ))))
(assert (forall ((Byte_Order._default.SortedSeqForMap$V T@U) ($ly@@340 T@U) (|s#0@@64| T@U) (|m#0@@93| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V) TyType) (= (type $ly@@340) LayerTypeType)) (= (type |s#0@@64|) (SeqType BoxType))) (= (type |m#0@@93|) (MapType BoxType BoxType))) (and (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V ($LS $ly@@340) |s#0@@64| |m#0@@93|) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V $ly@@340 |s#0@@64| |m#0@@93|)) (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V $ly@@340 |s#0@@64| |m#0@@93|) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V ($LS $ly@@340) |s#0@@64| |m#0@@93|)))) :qid |unknown.0:0| :skolemid |2147| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V ($LS $ly@@340) |s#0@@64| |m#0@@93|)) )))
(assert (forall ((Byte_Order._default.SortedSeqForMap$V@@0 T@U) ($ly@@341 T@U) (|s#0@@65| T@U) (|m#0@@94| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@0) TyType) (= (type $ly@@341) LayerTypeType)) (= (type |s#0@@65|) (SeqType BoxType))) (= (type |m#0@@94|) (MapType BoxType BoxType))) (and (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 $ly@@341 |s#0@@65| |m#0@@94|) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@65| |m#0@@94|)) (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@65| |m#0@@94|) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 $ly@@341 |s#0@@65| |m#0@@94|)))) :qid |unknown.0:0| :skolemid |2148| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 (AsFuelBottom $ly@@341) |s#0@@65| |m#0@@94|)) )))
(assert  (=> true (forall ((Byte_Order._default.SortedSeqForMap$V@@1 T@U) ($ly@@342 T@U) (|s#0@@66| T@U) (|m#0@@95| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@1) TyType) (= (type $ly@@342) LayerTypeType)) (= (type |s#0@@66|) (SeqType BoxType))) (= (type |m#0@@95|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.SortedSeqForMap#canCall| Byte_Order._default.SortedSeqForMap$V@@1 |s#0@@66| |m#0@@95|) (and ($Is |s#0@@66| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@1))) ($Is |m#0@@95| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@1))))) true) :qid |unknown.0:0| :skolemid |2149| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@1 $ly@@342 |s#0@@66| |m#0@@95|)) ))))
(assert (forall ((Byte_Order._default.SortedSeqForMap$V@@2 T@U) ($ly@@343 T@U) (|s#0@@67| T@U) (|m#0@@96| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@2) TyType) (= (type $ly@@343) LayerTypeType)) (= (type |s#0@@67|) (SeqType BoxType))) (= (type |m#0@@96|) (MapType BoxType BoxType))) (and ($Is |s#0@@67| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@2))) ($Is |m#0@@96| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@2)))) (and (=> (|Byte__Order.__default.SortedSeqForMap#requires| Byte_Order._default.SortedSeqForMap$V@@2 $ly@@343 |s#0@@67| |m#0@@96|) true) (=> true (|Byte__Order.__default.SortedSeqForMap#requires| Byte_Order._default.SortedSeqForMap$V@@2 $ly@@343 |s#0@@67| |m#0@@96|)))) :qid |unknown.0:0| :skolemid |2150| :pattern ( (|Byte__Order.__default.SortedSeqForMap#requires| Byte_Order._default.SortedSeqForMap$V@@2 $ly@@343 |s#0@@67| |m#0@@96|)) )))
(assert  (and (= (type StartFuel_Sequences._default.Unzip) LayerTypeType) (= (type StartFuel_Byte_Order._default.IsStrictlySorted) LayerTypeType)))
(assert  (=> true (forall ((Byte_Order._default.SortedSeqForMap$V@@3 T@U) ($ly@@344 T@U) (|s#0@@68| T@U) (|m#0@@97| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@3) TyType) (= (type $ly@@344) LayerTypeType)) (= (type |s#0@@68|) (SeqType BoxType))) (= (type |m#0@@97|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.SortedSeqForMap#canCall| Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@68| |m#0@@97|) (and ($Is |s#0@@68| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3))) ($Is |m#0@@97| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@68|) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@68|))) (|Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@68|))))) (=> (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@68|)))) (forall ((|i#0@@70| Int) ) (!  (and (=> (< |i#0@@70| (|Seq#Length| |s#0@@68|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@70|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@70|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@70|)))))) (=> (< |i#0@@70| (|Seq#Length| |s#0@@68|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@70|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@70|))))))) :qid |totalord.761:16| :skolemid |2151| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@70|))) )))) (=> (and (forall ((|i#0@@71| Int) ) (!  (and (=> (< |i#0@@71| (|Seq#Length| |s#0@@68|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@71|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@71|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@71|)))))) (=> (< |i#0@@71| (|Seq#Length| |s#0@@68|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@71|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@71|))))))) :qid |totalord.761:16| :skolemid |2154| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@71|))) )) (forall ((|i#0@@72| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@72|) (< |i#0@@72| (|Seq#Length| |s#0@@68|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@72|)))))) (=> (and (<= (LitInt 0) |i#0@@72|) (< |i#0@@72| (|Seq#Length| |s#0@@68|))) (= (MapType0Select (|Map#Elements| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@72|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@72|))))))) :qid |totalord.761:16| :skolemid |2155| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@72|))) ))) (forall ((|key#0@@52| T@U) ) (!  (=> (= (type |key#0@@52|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0@@52|)) (< (U_2_int |key#0@@52|) 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) ($Box |key#0@@52|))) (forall ((|i#1@@15| Int) ) (!  (and (=> (< |i#1@@15| (|Seq#Length| |s#0@@68|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#1@@15|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#1@@15|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#1@@15|))))) (U_2_int |key#0@@52|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#1@@15|))))) :qid |totalord.762:44| :skolemid |2152| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#1@@15|))) ))))) :qid |totalord.762:16| :skolemid |2153| :pattern ( (MapType0Select (|Map#Elements| |m#0@@97|) ($Box |key#0@@52|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@97|) ($Box |key#0@@52|))) )))) (and (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@344) |s#0@@68| |m#0@@97|) (and (and (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@68|)))) (forall ((|i#0@@73| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@73|) (< |i#0@@73| (|Seq#Length| |s#0@@68|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@73|)))))) (=> (and (<= (LitInt 0) |i#0@@73|) (< |i#0@@73| (|Seq#Length| |s#0@@68|))) (= (MapType0Select (|Map#Elements| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@73|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@73|))))))) :qid |totalord.761:16| :skolemid |2156| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@73|))) ))) (forall ((|key#0@@53| T@U) ) (!  (=> (= (type |key#0@@53|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0@@53|)) (< (U_2_int |key#0@@53|) 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) ($Box |key#0@@53|))) (exists ((|i#1@@16| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1@@16|) (< |i#1@@16| (|Seq#Length| |s#0@@68|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#1@@16|))))) (U_2_int |key#0@@53|))) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#1@@16|))) (MapType0Select (|Map#Elements| |m#0@@97|) ($Box |key#0@@53|)))) :qid |totalord.762:44| :skolemid |2157| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#1@@16|))) ))))) :qid |totalord.762:16| :skolemid |2158| :pattern ( (MapType0Select (|Map#Elements| |m#0@@97|) ($Box |key#0@@53|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@97|) ($Box |key#0@@53|))) )))) (=> (and (and (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@68|)))) (forall ((|i#0@@74| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@74|) (< |i#0@@74| (|Seq#Length| |s#0@@68|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@74|)))))) (=> (and (<= (LitInt 0) |i#0@@74|) (< |i#0@@74| (|Seq#Length| |s#0@@68|))) (= (MapType0Select (|Map#Elements| |m#0@@97|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@74|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@74|))))))) :qid |totalord.761:16| :skolemid |2156| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#0@@74|))) ))) (forall ((|key#0@@54| Int) ) (!  (=> (and (<= (LitInt 0) |key#0@@54|) (< |key#0@@54| 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@97|) ($Box (int_2_U |key#0@@54|)))) (exists ((|i#1@@17| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1@@17|) (< |i#1@@17| (|Seq#Length| |s#0@@68|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#1@@17|))))) |key#0@@54|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#1@@17|))) (MapType0Select (|Map#Elements| |m#0@@97|) ($Box (int_2_U |key#0@@54|))))) :qid |totalord.762:44| :skolemid |2157| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@68| |i#1@@17|))) )))) :qid |totalord.762:16| :skolemid |2158| :pattern ( (MapType0Select (|Map#Elements| |m#0@@97|) ($Box (int_2_U |key#0@@54|)))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@97|) ($Box (int_2_U |key#0@@54|)))) ))) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@344) |s#0@@68| |m#0@@97|))))) :qid |unknown.0:0| :skolemid |2159| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@344) |s#0@@68| |m#0@@97|)) ))))
(assert  (=> true (forall ((Byte_Order._default.SortedSeqForMap$V@@4 T@U) ($ly@@345 T@U) (|s#0@@69| T@U) (|m#0@@98| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@4) TyType) (= (type $ly@@345) LayerTypeType)) (= (type |s#0@@69|) (SeqType BoxType))) (= (type |m#0@@98|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.SortedSeqForMap#canCall| Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@69|) (Lit |m#0@@98|)) (and ($Is |s#0@@69| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4))) ($Is |m#0@@98| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@69|)) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@69|)))) (|Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@69|)))))) (=> (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@69|))))) (forall ((|i#2@@5| Int) ) (!  (and (=> (< |i#2@@5| (|Seq#Length| (Lit |s#0@@69|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#2@@5|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#2@@5|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#2@@5|)))))) (=> (< |i#2@@5| (|Seq#Length| (Lit |s#0@@69|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#2@@5|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#2@@5|))))))) :qid |totalord.761:16| :skolemid |2160| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@69| |i#2@@5|))) )))) (=> (and (forall ((|i#2@@6| Int) ) (!  (and (=> (< |i#2@@6| (|Seq#Length| (Lit |s#0@@69|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#2@@6|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#2@@6|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#2@@6|)))))) (=> (< |i#2@@6| (|Seq#Length| (Lit |s#0@@69|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#2@@6|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#2@@6|))))))) :qid |totalord.761:16| :skolemid |2163| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@69| |i#2@@6|))) )) (forall ((|i#2@@7| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@7|) (< |i#2@@7| (|Seq#Length| (Lit |s#0@@69|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#2@@7|)))))) (=> (and (<= (LitInt 0) |i#2@@7|) (< |i#2@@7| (|Seq#Length| (Lit |s#0@@69|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@98|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#2@@7|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#2@@7|))))))) :qid |totalord.761:16| :skolemid |2164| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@69| |i#2@@7|))) ))) (forall ((|key#1@@5| T@U) ) (!  (=> (= (type |key#1@@5|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#1@@5|)) (< (U_2_int |key#1@@5|) 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) ($Box |key#1@@5|))) (forall ((|i#3@@5| Int) ) (!  (and (=> (< |i#3@@5| (|Seq#Length| (Lit |s#0@@69|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#3@@5|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#3@@5|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#3@@5|))))) (U_2_int |key#1@@5|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#3@@5|))))) :qid |totalord.762:44| :skolemid |2161| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@69| |i#3@@5|))) ))))) :qid |totalord.762:16| :skolemid |2162| :pattern ( (MapType0Select (|Map#Elements| |m#0@@98|) ($Box |key#1@@5|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@98|) ($Box |key#1@@5|))) )))) (and (=> (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@345) (Lit |s#0@@69|) (Lit |m#0@@98|)) (and (and (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@69|))))) (forall ((|i#2@@8| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@8|) (< |i#2@@8| (|Seq#Length| (Lit |s#0@@69|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#2@@8|)))))) (=> (and (<= (LitInt 0) |i#2@@8|) (< |i#2@@8| (|Seq#Length| (Lit |s#0@@69|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@98|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#2@@8|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#2@@8|))))))) :qid |totalord.761:16| :skolemid |2165| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@69| |i#2@@8|))) ))) (forall ((|key#1@@6| T@U) ) (!  (=> (= (type |key#1@@6|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#1@@6|)) (< (U_2_int |key#1@@6|) 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) ($Box |key#1@@6|))) (exists ((|i#3@@6| Int) ) (!  (and (and (and (<= (LitInt 0) |i#3@@6|) (< |i#3@@6| (|Seq#Length| (Lit |s#0@@69|)))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#3@@6|))))) (U_2_int |key#1@@6|))) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#3@@6|))) (MapType0Select (|Map#Elements| (Lit |m#0@@98|)) ($Box |key#1@@6|)))) :qid |totalord.762:44| :skolemid |2166| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@69| |i#3@@6|))) ))))) :qid |totalord.762:16| :skolemid |2167| :pattern ( (MapType0Select (|Map#Elements| |m#0@@98|) ($Box |key#1@@6|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@98|) ($Box |key#1@@6|))) )))) (=> (and (and (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@69|))))) (forall ((|i#2@@9| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@9|) (< |i#2@@9| (|Seq#Length| (Lit |s#0@@69|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#2@@9|)))))) (=> (and (<= (LitInt 0) |i#2@@9|) (< |i#2@@9| (|Seq#Length| (Lit |s#0@@69|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@98|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#2@@9|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#2@@9|))))))) :qid |totalord.761:16| :skolemid |2165| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@69| |i#2@@9|))) ))) (forall ((|key#1@@7| Int) ) (!  (=> (and (<= (LitInt 0) |key#1@@7|) (< |key#1@@7| 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@98|) ($Box (int_2_U |key#1@@7|)))) (exists ((|i#3@@7| Int) ) (!  (and (and (and (<= (LitInt 0) |i#3@@7|) (< |i#3@@7| (|Seq#Length| (Lit |s#0@@69|)))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#3@@7|))))) |key#1@@7|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@69|) |i#3@@7|))) (MapType0Select (|Map#Elements| (Lit |m#0@@98|)) ($Box (int_2_U |key#1@@7|))))) :qid |totalord.762:44| :skolemid |2166| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@69| |i#3@@7|))) )))) :qid |totalord.762:16| :skolemid |2167| :pattern ( (MapType0Select (|Map#Elements| |m#0@@98|) ($Box (int_2_U |key#1@@7|)))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@98|) ($Box (int_2_U |key#1@@7|)))) ))) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@345) (Lit |s#0@@69|) (Lit |m#0@@98|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2168| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@345) (Lit |s#0@@69|) (Lit |m#0@@98|))) ))))
(assert (forall (($ly@@346 T@U) (|s#0@@70| T@U) ) (!  (=> (and (= (type $ly@@346) LayerTypeType) (= (type |s#0@@70|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimum ($LS $ly@@346) |s#0@@70|) (Byte__Order.__default.minimum $ly@@346 |s#0@@70|))) :qid |totalord.765:22| :skolemid |2169| :pattern ( (Byte__Order.__default.minimum ($LS $ly@@346) |s#0@@70|)) )))
(assert (forall (($ly@@347 T@U) (|s#0@@71| T@U) ) (!  (=> (and (= (type $ly@@347) LayerTypeType) (= (type |s#0@@71|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimum $ly@@347 |s#0@@71|) (Byte__Order.__default.minimum $LZ |s#0@@71|))) :qid |totalord.765:22| :skolemid |2170| :pattern ( (Byte__Order.__default.minimum (AsFuelBottom $ly@@347) |s#0@@71|)) )))
(assert  (=> true (forall (($ly@@348 T@U) (|s#0@@72| T@U) ) (!  (=> (and (and (= (type $ly@@348) LayerTypeType) (= (type |s#0@@72|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimum#canCall| |s#0@@72|) (and ($Is |s#0@@72| (TSet Tclass.NativeTypes.byte)) (>= (|Set#Card| |s#0@@72|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@72| ($Box (int_2_U (Byte__Order.__default.minimum $ly@@348 |s#0@@72|))))) (forall ((|y#0@@5| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@5|) (< |y#0@@5| 256)) (U_2_bool (MapType0Select |s#0@@72| ($Box (int_2_U |y#0@@5|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (Byte__Order.__default.minimum $ly@@348 |s#0@@72|) |y#0@@5|)) :qid |totalord.768:18| :skolemid |2171| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (Byte__Order.__default.minimum $ly@@348 |s#0@@72|) |y#0@@5|)) :pattern ( (MapType0Select |s#0@@72| ($Box (int_2_U |y#0@@5|)))) ))) (and (<= (LitInt 0) (Byte__Order.__default.minimum $ly@@348 |s#0@@72|)) (< (Byte__Order.__default.minimum $ly@@348 |s#0@@72|) 256)))) :qid |totalord.765:22| :skolemid |2172| :pattern ( (Byte__Order.__default.minimum $ly@@348 |s#0@@72|)) ))))
(assert (forall (($ly@@349 T@U) ($Heap@@42 T@U) (|s#0@@73| T@U) ) (!  (=> (and (and (and (= (type $ly@@349) LayerTypeType) (= (type $Heap@@42) (MapType0Type refType MapType1Type))) (= (type |s#0@@73|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@42) ($Is |s#0@@73| (TSet Tclass.NativeTypes.byte)))) (and (=> (|Byte__Order.__default.minimum#requires| $ly@@349 |s#0@@73|) (>= (|Set#Card| |s#0@@73|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@73|) (LitInt 1)) (|Byte__Order.__default.minimum#requires| $ly@@349 |s#0@@73|)))) :qid |totalord.765:22| :skolemid |2173| :pattern ( (|Byte__Order.__default.minimum#requires| $ly@@349 |s#0@@73|) ($IsGoodHeap $Heap@@42)) )))
(assert (forall ((s@@46 T@U) ) (!  (=> (and (= (type s@@46) (MapType0Type BoxType boolType)) (|$let#7$canCall| s@@46)) (and (and (<= (LitInt 0) (|$let#7_a| s@@46)) (< (|$let#7_a| s@@46) 256)) (U_2_bool (MapType0Select s@@46 ($Box (int_2_U (|$let#7_a| s@@46))))))) :qid |totalord.772:5| :skolemid |2174| :pattern ( (|$let#7_a| s@@46)) )))
(assert  (=> true (forall (($ly@@350 T@U) ($Heap@@43 T@U) (|s#0@@74| T@U) ) (!  (=> (and (and (and (= (type $ly@@350) LayerTypeType) (= (type $Heap@@43) (MapType0Type refType MapType1Type))) (= (type |s#0@@74|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimum#canCall| |s#0@@74|) (and (and ($IsGoodHeap $Heap@@43) ($Is |s#0@@74| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@74|) (LitInt 1))))) (and (and (|$let#7$canCall| |s#0@@74|) (let ((|s'#0| (|Set#Difference| |s#0@@74| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#7_a| |s#0@@74|))))))) (=> (not (|Set#Equal| |s'#0| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.minimum#canCall| |s'#0|) (let ((|m'#0@@10| (Byte__Order.__default.minimum $ly@@350 |s'#0|))) (|Byte__Order.__default.lt#canCall| (|$let#7_a| |s#0@@74|) |m'#0@@10|)))))) (= (Byte__Order.__default.minimum ($LS $ly@@350) |s#0@@74|) (let ((|a#0@@111| (|$let#7_a| |s#0@@74|))) (let ((|s'#1| (|Set#Difference| |s#0@@74| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#0@@111|)))))) (ite (|Set#Equal| |s'#1| (|Set#Empty| BoxType)) |a#0@@111| (let ((|m'#1@@1| (Byte__Order.__default.minimum $ly@@350 |s'#1|))) (ite (Byte__Order.__default.lt |a#0@@111| |m'#1@@1|) |a#0@@111| |m'#1@@1|)))))))) :qid |totalord.765:22| :skolemid |2175| :pattern ( (Byte__Order.__default.minimum ($LS $ly@@350) |s#0@@74|) ($IsGoodHeap $Heap@@43)) ))))
(assert  (=> true (forall (($ly@@351 T@U) ($Heap@@44 T@U) (|s#0@@75| T@U) ) (!  (=> (and (and (and (= (type $ly@@351) LayerTypeType) (= (type $Heap@@44) (MapType0Type refType MapType1Type))) (= (type |s#0@@75|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimum#canCall| (Lit |s#0@@75|)) (and (and ($IsGoodHeap $Heap@@44) ($Is |s#0@@75| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| (Lit |s#0@@75|)) (LitInt 1))))) (and (and (|$let#7$canCall| (Lit |s#0@@75|)) (let ((|s'#2| (|Set#Difference| |s#0@@75| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#7_a| (Lit |s#0@@75|)))))))) (=> (not (|Set#Equal| |s'#2| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.minimum#canCall| |s'#2|) (let ((|m'#2@@0| (Byte__Order.__default.minimum ($LS $ly@@351) |s'#2|))) (|Byte__Order.__default.lt#canCall| (|$let#7_a| (Lit |s#0@@75|)) |m'#2@@0|)))))) (= (Byte__Order.__default.minimum ($LS $ly@@351) (Lit |s#0@@75|)) (let ((|a#1@@1| (|$let#7_a| (Lit |s#0@@75|)))) (let ((|s'#3| (|Set#Difference| |s#0@@75| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#1@@1|)))))) (ite (|Set#Equal| |s'#3| (|Set#Empty| BoxType)) |a#1@@1| (let ((|m'#3| (Byte__Order.__default.minimum ($LS $ly@@351) |s'#3|))) (ite (Byte__Order.__default.lt |a#1@@1| |m'#3|) |a#1@@1| |m'#3|)))))))) :qid |totalord.765:22| :weight 3 :skolemid |2176| :pattern ( (Byte__Order.__default.minimum ($LS $ly@@351) (Lit |s#0@@75|)) ($IsGoodHeap $Heap@@44)) ))))
(assert (forall ((arg0@@302 T@U) (arg1@@176 T@U) ) (! (= (type (Byte__Order.__default.minimumOpt arg0@@302 arg1@@176)) DatatypeTypeType) :qid |funType:Byte__Order.__default.minimumOpt| :pattern ( (Byte__Order.__default.minimumOpt arg0@@302 arg1@@176)) )))
(assert (forall (($ly@@352 T@U) (|s#0@@76| T@U) ) (!  (=> (and (= (type $ly@@352) LayerTypeType) (= (type |s#0@@76|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimumOpt ($LS $ly@@352) |s#0@@76|) (Byte__Order.__default.minimumOpt $ly@@352 |s#0@@76|))) :qid |totalord.788:22| :skolemid |2177| :pattern ( (Byte__Order.__default.minimumOpt ($LS $ly@@352) |s#0@@76|)) )))
(assert (forall (($ly@@353 T@U) (|s#0@@77| T@U) ) (!  (=> (and (= (type $ly@@353) LayerTypeType) (= (type |s#0@@77|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimumOpt $ly@@353 |s#0@@77|) (Byte__Order.__default.minimumOpt $LZ |s#0@@77|))) :qid |totalord.788:22| :skolemid |2178| :pattern ( (Byte__Order.__default.minimumOpt (AsFuelBottom $ly@@353) |s#0@@77|)) )))
(assert  (=> true (forall (($ly@@354 T@U) (|s#0@@78| T@U) ) (!  (=> (and (and (= (type $ly@@354) LayerTypeType) (= (type |s#0@@78|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimumOpt#canCall| |s#0@@78|) ($Is |s#0@@78| (TSet Tclass.NativeTypes.byte)))) (and (and (and (=> (Options.Option.Some_q (Byte__Order.__default.minimumOpt $ly@@354 |s#0@@78|)) (U_2_bool (MapType0Select |s#0@@78| (Options.Option.value (Byte__Order.__default.minimumOpt $ly@@354 |s#0@@78|))))) (=> (Options.Option.Some_q (Byte__Order.__default.minimumOpt $ly@@354 |s#0@@78|)) (forall ((|y#0@@6| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@6|) (< |y#0@@6| 256)) (U_2_bool (MapType0Select |s#0@@78| ($Box (int_2_U |y#0@@6|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.minimumOpt $ly@@354 |s#0@@78|)))) |y#0@@6|)) :qid |totalord.790:30| :skolemid |2179| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.minimumOpt $ly@@354 |s#0@@78|)))) |y#0@@6|)) :pattern ( (MapType0Select |s#0@@78| ($Box (int_2_U |y#0@@6|)))) )))) (=> (Options.Option.None_q (Byte__Order.__default.minimumOpt $ly@@354 |s#0@@78|)) (|Set#Equal| |s#0@@78| (|Set#Empty| BoxType)))) ($Is (Byte__Order.__default.minimumOpt $ly@@354 |s#0@@78|) (Tclass.Options.Option Tclass.NativeTypes.byte)))) :qid |totalord.788:22| :skolemid |2180| :pattern ( (Byte__Order.__default.minimumOpt $ly@@354 |s#0@@78|)) ))))
(assert (forall (($ly@@355 T@U) (|s#0@@79| T@U) ) (!  (=> (and (and (= (type $ly@@355) LayerTypeType) (= (type |s#0@@79|) (MapType0Type BoxType boolType))) ($Is |s#0@@79| (TSet Tclass.NativeTypes.byte))) (and (=> (|Byte__Order.__default.minimumOpt#requires| $ly@@355 |s#0@@79|) true) (=> true (|Byte__Order.__default.minimumOpt#requires| $ly@@355 |s#0@@79|)))) :qid |totalord.788:22| :skolemid |2181| :pattern ( (|Byte__Order.__default.minimumOpt#requires| $ly@@355 |s#0@@79|)) )))
(assert (= (type StartFuel_Byte_Order._default.minimum) LayerTypeType))
(assert  (=> true (forall (($ly@@356 T@U) (|s#0@@80| T@U) ) (!  (=> (and (and (= (type $ly@@356) LayerTypeType) (= (type |s#0@@80|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimumOpt#canCall| |s#0@@80|) ($Is |s#0@@80| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@80| (|Set#Empty| BoxType))) (|Byte__Order.__default.minimum#canCall| |s#0@@80|)) (= (Byte__Order.__default.minimumOpt ($LS $ly@@356) |s#0@@80|) (ite (|Set#Equal| |s#0@@80| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.minimum StartFuel_Byte_Order._default.minimum |s#0@@80|)))))))) :qid |totalord.788:22| :skolemid |2182| :pattern ( (Byte__Order.__default.minimumOpt ($LS $ly@@356) |s#0@@80|)) ))))
(assert  (=> true (forall (($ly@@357 T@U) (|s#0@@81| T@U) ) (!  (=> (and (and (= (type $ly@@357) LayerTypeType) (= (type |s#0@@81|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimumOpt#canCall| (Lit |s#0@@81|)) ($Is |s#0@@81| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@81| (|Set#Empty| BoxType))) (|Byte__Order.__default.minimum#canCall| (Lit |s#0@@81|))) (= (Byte__Order.__default.minimumOpt ($LS $ly@@357) (Lit |s#0@@81|)) (ite (|Set#Equal| |s#0@@81| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.minimum StartFuel_Byte_Order._default.minimum (Lit |s#0@@81|))))))))) :qid |totalord.788:22| :weight 3 :skolemid |2183| :pattern ( (Byte__Order.__default.minimumOpt ($LS $ly@@357) (Lit |s#0@@81|))) ))))
(assert (forall (($ly@@358 T@U) (|s#0@@82| T@U) ) (!  (=> (and (= (type $ly@@358) LayerTypeType) (= (type |s#0@@82|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximum ($LS $ly@@358) |s#0@@82|) (Byte__Order.__default.maximum $ly@@358 |s#0@@82|))) :qid |totalord.796:22| :skolemid |2184| :pattern ( (Byte__Order.__default.maximum ($LS $ly@@358) |s#0@@82|)) )))
(assert (forall (($ly@@359 T@U) (|s#0@@83| T@U) ) (!  (=> (and (= (type $ly@@359) LayerTypeType) (= (type |s#0@@83|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximum $ly@@359 |s#0@@83|) (Byte__Order.__default.maximum $LZ |s#0@@83|))) :qid |totalord.796:22| :skolemid |2185| :pattern ( (Byte__Order.__default.maximum (AsFuelBottom $ly@@359) |s#0@@83|)) )))
(assert  (=> true (forall (($ly@@360 T@U) (|s#0@@84| T@U) ) (!  (=> (and (and (= (type $ly@@360) LayerTypeType) (= (type |s#0@@84|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximum#canCall| |s#0@@84|) (and ($Is |s#0@@84| (TSet Tclass.NativeTypes.byte)) (>= (|Set#Card| |s#0@@84|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@84| ($Box (int_2_U (Byte__Order.__default.maximum $ly@@360 |s#0@@84|))))) (forall ((|y#0@@7| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@7|) (< |y#0@@7| 256)) (U_2_bool (MapType0Select |s#0@@84| ($Box (int_2_U |y#0@@7|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#0@@7| (Byte__Order.__default.maximum $ly@@360 |s#0@@84|))) :qid |totalord.799:18| :skolemid |2186| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#0@@7| (Byte__Order.__default.maximum $ly@@360 |s#0@@84|))) :pattern ( (MapType0Select |s#0@@84| ($Box (int_2_U |y#0@@7|)))) ))) (and (<= (LitInt 0) (Byte__Order.__default.maximum $ly@@360 |s#0@@84|)) (< (Byte__Order.__default.maximum $ly@@360 |s#0@@84|) 256)))) :qid |totalord.796:22| :skolemid |2187| :pattern ( (Byte__Order.__default.maximum $ly@@360 |s#0@@84|)) ))))
(assert (forall (($ly@@361 T@U) ($Heap@@45 T@U) (|s#0@@85| T@U) ) (!  (=> (and (and (and (= (type $ly@@361) LayerTypeType) (= (type $Heap@@45) (MapType0Type refType MapType1Type))) (= (type |s#0@@85|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@45) ($Is |s#0@@85| (TSet Tclass.NativeTypes.byte)))) (and (=> (|Byte__Order.__default.maximum#requires| $ly@@361 |s#0@@85|) (>= (|Set#Card| |s#0@@85|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@85|) (LitInt 1)) (|Byte__Order.__default.maximum#requires| $ly@@361 |s#0@@85|)))) :qid |totalord.796:22| :skolemid |2188| :pattern ( (|Byte__Order.__default.maximum#requires| $ly@@361 |s#0@@85|) ($IsGoodHeap $Heap@@45)) )))
(assert (forall ((s@@47 T@U) ) (!  (=> (and (= (type s@@47) (MapType0Type BoxType boolType)) (|$let#10$canCall| s@@47)) (and (and (<= (LitInt 0) (|$let#10_a| s@@47)) (< (|$let#10_a| s@@47) 256)) (U_2_bool (MapType0Select s@@47 ($Box (int_2_U (|$let#10_a| s@@47))))))) :qid |totalord.801:5| :skolemid |2189| :pattern ( (|$let#10_a| s@@47)) )))
(assert  (=> true (forall (($ly@@362 T@U) ($Heap@@46 T@U) (|s#0@@86| T@U) ) (!  (=> (and (and (and (= (type $ly@@362) LayerTypeType) (= (type $Heap@@46) (MapType0Type refType MapType1Type))) (= (type |s#0@@86|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximum#canCall| |s#0@@86|) (and (and ($IsGoodHeap $Heap@@46) ($Is |s#0@@86| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@86|) (LitInt 1))))) (and (and (|$let#10$canCall| |s#0@@86|) (let ((|s'#0@@0| (|Set#Difference| |s#0@@86| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#10_a| |s#0@@86|))))))) (=> (not (|Set#Equal| |s'#0@@0| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.maximum#canCall| |s'#0@@0|) (let ((|m'#0@@11| (Byte__Order.__default.maximum $ly@@362 |s'#0@@0|))) (|Byte__Order.__default.lt#canCall| |m'#0@@11| (|$let#10_a| |s#0@@86|))))))) (= (Byte__Order.__default.maximum ($LS $ly@@362) |s#0@@86|) (let ((|a#0@@112| (|$let#10_a| |s#0@@86|))) (let ((|s'#1@@0| (|Set#Difference| |s#0@@86| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#0@@112|)))))) (ite (|Set#Equal| |s'#1@@0| (|Set#Empty| BoxType)) |a#0@@112| (let ((|m'#1@@2| (Byte__Order.__default.maximum $ly@@362 |s'#1@@0|))) (ite (Byte__Order.__default.lt |m'#1@@2| |a#0@@112|) |a#0@@112| |m'#1@@2|)))))))) :qid |totalord.796:22| :skolemid |2190| :pattern ( (Byte__Order.__default.maximum ($LS $ly@@362) |s#0@@86|) ($IsGoodHeap $Heap@@46)) ))))
(assert  (=> true (forall (($ly@@363 T@U) ($Heap@@47 T@U) (|s#0@@87| T@U) ) (!  (=> (and (and (and (= (type $ly@@363) LayerTypeType) (= (type $Heap@@47) (MapType0Type refType MapType1Type))) (= (type |s#0@@87|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximum#canCall| (Lit |s#0@@87|)) (and (and ($IsGoodHeap $Heap@@47) ($Is |s#0@@87| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| (Lit |s#0@@87|)) (LitInt 1))))) (and (and (|$let#10$canCall| (Lit |s#0@@87|)) (let ((|s'#2@@0| (|Set#Difference| |s#0@@87| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#10_a| (Lit |s#0@@87|)))))))) (=> (not (|Set#Equal| |s'#2@@0| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.maximum#canCall| |s'#2@@0|) (let ((|m'#2@@1| (Byte__Order.__default.maximum ($LS $ly@@363) |s'#2@@0|))) (|Byte__Order.__default.lt#canCall| |m'#2@@1| (|$let#10_a| (Lit |s#0@@87|)))))))) (= (Byte__Order.__default.maximum ($LS $ly@@363) (Lit |s#0@@87|)) (let ((|a#1@@2| (|$let#10_a| (Lit |s#0@@87|)))) (let ((|s'#3@@0| (|Set#Difference| |s#0@@87| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#1@@2|)))))) (ite (|Set#Equal| |s'#3@@0| (|Set#Empty| BoxType)) |a#1@@2| (let ((|m'#3@@0| (Byte__Order.__default.maximum ($LS $ly@@363) |s'#3@@0|))) (ite (Byte__Order.__default.lt |m'#3@@0| |a#1@@2|) |a#1@@2| |m'#3@@0|)))))))) :qid |totalord.796:22| :weight 3 :skolemid |2191| :pattern ( (Byte__Order.__default.maximum ($LS $ly@@363) (Lit |s#0@@87|)) ($IsGoodHeap $Heap@@47)) ))))
(assert (forall ((arg0@@303 T@U) (arg1@@177 T@U) ) (! (= (type (Byte__Order.__default.maximumOpt arg0@@303 arg1@@177)) DatatypeTypeType) :qid |funType:Byte__Order.__default.maximumOpt| :pattern ( (Byte__Order.__default.maximumOpt arg0@@303 arg1@@177)) )))
(assert (forall (($ly@@364 T@U) (|s#0@@88| T@U) ) (!  (=> (and (= (type $ly@@364) LayerTypeType) (= (type |s#0@@88|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximumOpt ($LS $ly@@364) |s#0@@88|) (Byte__Order.__default.maximumOpt $ly@@364 |s#0@@88|))) :qid |totalord.817:22| :skolemid |2192| :pattern ( (Byte__Order.__default.maximumOpt ($LS $ly@@364) |s#0@@88|)) )))
(assert (forall (($ly@@365 T@U) (|s#0@@89| T@U) ) (!  (=> (and (= (type $ly@@365) LayerTypeType) (= (type |s#0@@89|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximumOpt $ly@@365 |s#0@@89|) (Byte__Order.__default.maximumOpt $LZ |s#0@@89|))) :qid |totalord.817:22| :skolemid |2193| :pattern ( (Byte__Order.__default.maximumOpt (AsFuelBottom $ly@@365) |s#0@@89|)) )))
(assert  (=> true (forall (($ly@@366 T@U) (|s#0@@90| T@U) ) (!  (=> (and (and (= (type $ly@@366) LayerTypeType) (= (type |s#0@@90|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximumOpt#canCall| |s#0@@90|) ($Is |s#0@@90| (TSet Tclass.NativeTypes.byte)))) (and (and (and (=> (Options.Option.Some_q (Byte__Order.__default.maximumOpt $ly@@366 |s#0@@90|)) (U_2_bool (MapType0Select |s#0@@90| (Options.Option.value (Byte__Order.__default.maximumOpt $ly@@366 |s#0@@90|))))) (=> (Options.Option.Some_q (Byte__Order.__default.maximumOpt $ly@@366 |s#0@@90|)) (forall ((|y#0@@8| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@8|) (< |y#0@@8| 256)) (U_2_bool (MapType0Select |s#0@@90| ($Box (int_2_U |y#0@@8|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#0@@8| (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.maximumOpt $ly@@366 |s#0@@90|)))))) :qid |totalord.819:30| :skolemid |2194| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#0@@8| (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.maximumOpt $ly@@366 |s#0@@90|)))))) :pattern ( (MapType0Select |s#0@@90| ($Box (int_2_U |y#0@@8|)))) )))) (=> (Options.Option.None_q (Byte__Order.__default.maximumOpt $ly@@366 |s#0@@90|)) (|Set#Equal| |s#0@@90| (|Set#Empty| BoxType)))) ($Is (Byte__Order.__default.maximumOpt $ly@@366 |s#0@@90|) (Tclass.Options.Option Tclass.NativeTypes.byte)))) :qid |totalord.817:22| :skolemid |2195| :pattern ( (Byte__Order.__default.maximumOpt $ly@@366 |s#0@@90|)) ))))
(assert (forall (($ly@@367 T@U) (|s#0@@91| T@U) ) (!  (=> (and (and (= (type $ly@@367) LayerTypeType) (= (type |s#0@@91|) (MapType0Type BoxType boolType))) ($Is |s#0@@91| (TSet Tclass.NativeTypes.byte))) (and (=> (|Byte__Order.__default.maximumOpt#requires| $ly@@367 |s#0@@91|) true) (=> true (|Byte__Order.__default.maximumOpt#requires| $ly@@367 |s#0@@91|)))) :qid |totalord.817:22| :skolemid |2196| :pattern ( (|Byte__Order.__default.maximumOpt#requires| $ly@@367 |s#0@@91|)) )))
(assert (= (type StartFuel_Byte_Order._default.maximum) LayerTypeType))
(assert  (=> true (forall (($ly@@368 T@U) (|s#0@@92| T@U) ) (!  (=> (and (and (= (type $ly@@368) LayerTypeType) (= (type |s#0@@92|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximumOpt#canCall| |s#0@@92|) ($Is |s#0@@92| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@92| (|Set#Empty| BoxType))) (|Byte__Order.__default.maximum#canCall| |s#0@@92|)) (= (Byte__Order.__default.maximumOpt ($LS $ly@@368) |s#0@@92|) (ite (|Set#Equal| |s#0@@92| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.maximum StartFuel_Byte_Order._default.maximum |s#0@@92|)))))))) :qid |totalord.817:22| :skolemid |2197| :pattern ( (Byte__Order.__default.maximumOpt ($LS $ly@@368) |s#0@@92|)) ))))
(assert  (=> true (forall (($ly@@369 T@U) (|s#0@@93| T@U) ) (!  (=> (and (and (= (type $ly@@369) LayerTypeType) (= (type |s#0@@93|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximumOpt#canCall| (Lit |s#0@@93|)) ($Is |s#0@@93| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@93| (|Set#Empty| BoxType))) (|Byte__Order.__default.maximum#canCall| (Lit |s#0@@93|))) (= (Byte__Order.__default.maximumOpt ($LS $ly@@369) (Lit |s#0@@93|)) (ite (|Set#Equal| |s#0@@93| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.maximum StartFuel_Byte_Order._default.maximum (Lit |s#0@@93|))))))))) :qid |totalord.817:22| :weight 3 :skolemid |2198| :pattern ( (Byte__Order.__default.maximumOpt ($LS $ly@@369) (Lit |s#0@@93|))) ))))
(assert  (=> true (forall ((|a#0@@113| Int) (|b#0@@82| Int) ) (!  (=> (or (|Byte__Order.__default.lt#canCall| |a#0@@113| |b#0@@82|) (and (and (<= (LitInt 0) |a#0@@113|) (< |a#0@@113| 256)) (and (<= (LitInt 0) |b#0@@82|) (< |b#0@@82| 256)))) true) :qid |totalord.12:15| :skolemid |2199| :pattern ( (Byte__Order.__default.lt |a#0@@113| |b#0@@82|)) ))))
(assert (forall ((|a#0@@114| Int) (|b#0@@83| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@114|) (< |a#0@@114| 256)) (and (<= (LitInt 0) |b#0@@83|) (< |b#0@@83| 256))) (and (=> (|Byte__Order.__default.lt#requires| |a#0@@114| |b#0@@83|) true) (=> true (|Byte__Order.__default.lt#requires| |a#0@@114| |b#0@@83|)))) :qid |totalord.12:15| :skolemid |2200| :pattern ( (|Byte__Order.__default.lt#requires| |a#0@@114| |b#0@@83|)) )))
(assert  (=> true (forall ((|a#0@@115| Int) (|b#0@@84| Int) ) (!  (=> (or (|Byte__Order.__default.lt#canCall| |a#0@@115| |b#0@@84|) (and (and (<= (LitInt 0) |a#0@@115|) (< |a#0@@115| 256)) (and (<= (LitInt 0) |b#0@@84|) (< |b#0@@84| 256)))) (and (|Byte__Order.__default.lte#canCall| |a#0@@115| |b#0@@84|) (and (=> (Byte__Order.__default.lt |a#0@@115| |b#0@@84|) (and (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |a#0@@115| |b#0@@84|) (not (= |a#0@@115| |b#0@@84|)))) (=> (and (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |a#0@@115| |b#0@@84|) (not (= |a#0@@115| |b#0@@84|))) (Byte__Order.__default.lt |a#0@@115| |b#0@@84|))))) :qid |totalord.12:15| :skolemid |2201| :pattern ( (Byte__Order.__default.lt |a#0@@115| |b#0@@84|)) ))))
(assert  (=> true (forall ((|a#0@@116| Int) (|b#0@@85| Int) ) (!  (=> (or (|Byte__Order.__default.lt#canCall| (LitInt |a#0@@116|) (LitInt |b#0@@85|)) (and (and (<= (LitInt 0) |a#0@@116|) (< |a#0@@116| 256)) (and (<= (LitInt 0) |b#0@@85|) (< |b#0@@85| 256)))) (and (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@116|) (LitInt |b#0@@85|)) (and (=> (Byte__Order.__default.lt (LitInt |a#0@@116|) (LitInt |b#0@@85|)) (and (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |a#0@@116|) (LitInt |b#0@@85|)) (not (= |a#0@@116| |b#0@@85|)))) (=> (and (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |a#0@@116|) (LitInt |b#0@@85|)) (not (= |a#0@@116| |b#0@@85|))) (Byte__Order.__default.lt (LitInt |a#0@@116|) (LitInt |b#0@@85|)))))) :qid |totalord.12:15| :weight 3 :skolemid |2202| :pattern ( (Byte__Order.__default.lt (LitInt |a#0@@116|) (LitInt |b#0@@85|))) ))))
(assert  (=> true (forall ((|a#0@@117| Int) (|b#0@@86| Int) ) (!  (=> (or (|Byte__Order.__default.Min#canCall| |a#0@@117| |b#0@@86|) (and (and (<= (LitInt 0) |a#0@@117|) (< |a#0@@117| 256)) (and (<= (LitInt 0) |b#0@@86|) (< |b#0@@86| 256)))) (and (<= (LitInt 0) (Byte__Order.__default.Min |a#0@@117| |b#0@@86|)) (< (Byte__Order.__default.Min |a#0@@117| |b#0@@86|) 256))) :qid |totalord.24:16| :skolemid |2203| :pattern ( (Byte__Order.__default.Min |a#0@@117| |b#0@@86|)) ))))
(assert (forall ((|a#0@@118| Int) (|b#0@@87| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@118|) (< |a#0@@118| 256)) (and (<= (LitInt 0) |b#0@@87|) (< |b#0@@87| 256))) (and (=> (|Byte__Order.__default.Min#requires| |a#0@@118| |b#0@@87|) true) (=> true (|Byte__Order.__default.Min#requires| |a#0@@118| |b#0@@87|)))) :qid |totalord.24:16| :skolemid |2204| :pattern ( (|Byte__Order.__default.Min#requires| |a#0@@118| |b#0@@87|)) )))
(assert  (=> true (forall ((|a#0@@119| Int) (|b#0@@88| Int) ) (!  (=> (or (|Byte__Order.__default.Min#canCall| |a#0@@119| |b#0@@88|) (and (and (<= (LitInt 0) |a#0@@119|) (< |a#0@@119| 256)) (and (<= (LitInt 0) |b#0@@88|) (< |b#0@@88| 256)))) (and (|Byte__Order.__default.lte#canCall| |a#0@@119| |b#0@@88|) (= (Byte__Order.__default.Min |a#0@@119| |b#0@@88|) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |a#0@@119| |b#0@@88|) |a#0@@119| |b#0@@88|)))) :qid |totalord.24:16| :skolemid |2205| :pattern ( (Byte__Order.__default.Min |a#0@@119| |b#0@@88|)) ))))
(assert  (=> true (forall ((|a#0@@120| Int) (|b#0@@89| Int) ) (!  (=> (or (|Byte__Order.__default.Min#canCall| (LitInt |a#0@@120|) (LitInt |b#0@@89|)) (and (and (<= (LitInt 0) |a#0@@120|) (< |a#0@@120| 256)) (and (<= (LitInt 0) |b#0@@89|) (< |b#0@@89| 256)))) (and (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@120|) (LitInt |b#0@@89|)) (= (Byte__Order.__default.Min (LitInt |a#0@@120|) (LitInt |b#0@@89|)) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |a#0@@120|) (LitInt |b#0@@89|)) |a#0@@120| |b#0@@89|)))) :qid |totalord.24:16| :weight 3 :skolemid |2206| :pattern ( (Byte__Order.__default.Min (LitInt |a#0@@120|) (LitInt |b#0@@89|))) ))))
(assert  (=> true (forall ((|a#0@@121| Int) (|b#0@@90| Int) ) (!  (=> (or (|Byte__Order.__default.Max#canCall| |a#0@@121| |b#0@@90|) (and (and (<= (LitInt 0) |a#0@@121|) (< |a#0@@121| 256)) (and (<= (LitInt 0) |b#0@@90|) (< |b#0@@90| 256)))) (and (<= (LitInt 0) (Byte__Order.__default.Max |a#0@@121| |b#0@@90|)) (< (Byte__Order.__default.Max |a#0@@121| |b#0@@90|) 256))) :qid |totalord.29:16| :skolemid |2207| :pattern ( (Byte__Order.__default.Max |a#0@@121| |b#0@@90|)) ))))
(assert (forall ((|a#0@@122| Int) (|b#0@@91| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@122|) (< |a#0@@122| 256)) (and (<= (LitInt 0) |b#0@@91|) (< |b#0@@91| 256))) (and (=> (|Byte__Order.__default.Max#requires| |a#0@@122| |b#0@@91|) true) (=> true (|Byte__Order.__default.Max#requires| |a#0@@122| |b#0@@91|)))) :qid |totalord.29:16| :skolemid |2208| :pattern ( (|Byte__Order.__default.Max#requires| |a#0@@122| |b#0@@91|)) )))
(assert  (=> true (forall ((|a#0@@123| Int) (|b#0@@92| Int) ) (!  (=> (or (|Byte__Order.__default.Max#canCall| |a#0@@123| |b#0@@92|) (and (and (<= (LitInt 0) |a#0@@123|) (< |a#0@@123| 256)) (and (<= (LitInt 0) |b#0@@92|) (< |b#0@@92| 256)))) (and (|Byte__Order.__default.lte#canCall| |a#0@@123| |b#0@@92|) (= (Byte__Order.__default.Max |a#0@@123| |b#0@@92|) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |a#0@@123| |b#0@@92|) |b#0@@92| |a#0@@123|)))) :qid |totalord.29:16| :skolemid |2209| :pattern ( (Byte__Order.__default.Max |a#0@@123| |b#0@@92|)) ))))
(assert  (=> true (forall ((|a#0@@124| Int) (|b#0@@93| Int) ) (!  (=> (or (|Byte__Order.__default.Max#canCall| (LitInt |a#0@@124|) (LitInt |b#0@@93|)) (and (and (<= (LitInt 0) |a#0@@124|) (< |a#0@@124| 256)) (and (<= (LitInt 0) |b#0@@93|) (< |b#0@@93| 256)))) (and (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@124|) (LitInt |b#0@@93|)) (= (Byte__Order.__default.Max (LitInt |a#0@@124|) (LitInt |b#0@@93|)) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |a#0@@124|) (LitInt |b#0@@93|)) |b#0@@93| |a#0@@124|)))) :qid |totalord.29:16| :weight 3 :skolemid |2210| :pattern ( (Byte__Order.__default.Max (LitInt |a#0@@124|) (LitInt |b#0@@93|))) ))))
(assert (forall (($ly@@370 T@U) (|run#0@@92| T@U) ) (!  (=> (and (= (type $ly@@370) LayerTypeType) (= (type |run#0@@92|) (SeqType BoxType))) (and (=> (Byte__Order.__default.IsSorted ($LS $ly@@370) |run#0@@92|) (Byte__Order.__default.IsSorted $ly@@370 |run#0@@92|)) (=> (Byte__Order.__default.IsSorted $ly@@370 |run#0@@92|) (Byte__Order.__default.IsSorted ($LS $ly@@370) |run#0@@92|)))) :qid |totalord.41:23| :skolemid |2211| :pattern ( (Byte__Order.__default.IsSorted ($LS $ly@@370) |run#0@@92|)) )))
(assert (forall (($ly@@371 T@U) (|run#0@@93| T@U) ) (!  (=> (and (= (type $ly@@371) LayerTypeType) (= (type |run#0@@93|) (SeqType BoxType))) (and (=> (Byte__Order.__default.IsSorted $ly@@371 |run#0@@93|) (Byte__Order.__default.IsSorted $LZ |run#0@@93|)) (=> (Byte__Order.__default.IsSorted $LZ |run#0@@93|) (Byte__Order.__default.IsSorted $ly@@371 |run#0@@93|)))) :qid |totalord.41:23| :skolemid |2212| :pattern ( (Byte__Order.__default.IsSorted (AsFuelBottom $ly@@371) |run#0@@93|)) )))
(assert  (=> true (forall (($ly@@372 T@U) (|run#0@@94| T@U) ) (!  (=> (and (and (= (type $ly@@372) LayerTypeType) (= (type |run#0@@94|) (SeqType BoxType))) (or (|Byte__Order.__default.IsSorted#canCall| |run#0@@94|) ($Is |run#0@@94| (TSeq Tclass.NativeTypes.byte)))) (and (=> (= (|Seq#Length| |run#0@@94|) (LitInt 0)) (Byte__Order.__default.IsSorted $ly@@372 |run#0@@94|)) (=> (= (|Seq#Length| |run#0@@94|) (LitInt 1)) (Byte__Order.__default.IsSorted $ly@@372 |run#0@@94|)))) :qid |totalord.41:23| :skolemid |2213| :pattern ( (Byte__Order.__default.IsSorted $ly@@372 |run#0@@94|)) ))))
(assert (forall (($ly@@373 T@U) (|run#0@@95| T@U) ) (!  (=> (and (and (= (type $ly@@373) LayerTypeType) (= (type |run#0@@95|) (SeqType BoxType))) ($Is |run#0@@95| (TSeq Tclass.NativeTypes.byte))) (and (=> (|Byte__Order.__default.IsSorted#requires| $ly@@373 |run#0@@95|) true) (=> true (|Byte__Order.__default.IsSorted#requires| $ly@@373 |run#0@@95|)))) :qid |totalord.41:23| :skolemid |2214| :pattern ( (|Byte__Order.__default.IsSorted#requires| $ly@@373 |run#0@@95|)) )))
(assert  (=> true (forall (($ly@@374 T@U) (|run#0@@96| T@U) ) (!  (=> (and (and (= (type $ly@@374) LayerTypeType) (= (type |run#0@@96|) (SeqType BoxType))) (or (|Byte__Order.__default.IsSorted#canCall| |run#0@@96|) ($Is |run#0@@96| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#0@@75| Int) (|j#0@@12| Int) ) (!  (=> (< |j#0@@12| (|Seq#Length| |run#0@@96|)) (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |i#0@@75|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |j#0@@12|))))) :qid |totalord.45:12| :skolemid |2215| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@96| |j#0@@12|)) ($Unbox intType (|Seq#Index| |run#0@@96| |i#0@@75|))) )) (and (=> (Byte__Order.__default.IsSorted ($LS $ly@@374) |run#0@@96|) (forall ((|i#0@@76| Int) (|j#0@@13| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@76|) (<= |i#0@@76| |j#0@@13|)) (< |j#0@@13| (|Seq#Length| |run#0@@96|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |i#0@@76|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |j#0@@13|)))))) :qid |totalord.45:12| :skolemid |2216| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@96| |j#0@@13|)) ($Unbox intType (|Seq#Index| |run#0@@96| |i#0@@76|))) ))) (=> (forall ((|i#0@@77| Int) (|j#0@@14| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@77|) (<= |i#0@@77| |j#0@@14|)) (< |j#0@@14| (|Seq#Length| |run#0@@96|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |i#0@@77|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@96| |j#0@@14|)))))) :qid |totalord.45:12| :skolemid |2216| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@96| |j#0@@14|)) ($Unbox intType (|Seq#Index| |run#0@@96| |i#0@@77|))) )) (Byte__Order.__default.IsSorted ($LS $ly@@374) |run#0@@96|))))) :qid |totalord.41:23| :skolemid |2217| :pattern ( (Byte__Order.__default.IsSorted ($LS $ly@@374) |run#0@@96|)) ))))
(assert  (=> true (forall (($ly@@375 T@U) (|run#0@@97| T@U) ) (!  (=> (and (and (= (type $ly@@375) LayerTypeType) (= (type |run#0@@97|) (SeqType BoxType))) (or (|Byte__Order.__default.IsSorted#canCall| (Lit |run#0@@97|)) ($Is |run#0@@97| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#1@@18| Int) (|j#1@@2| Int) ) (!  (=> (< |j#1@@2| (|Seq#Length| (Lit |run#0@@97|))) (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |i#1@@18|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |j#1@@2|))))) :qid |totalord.45:12| :skolemid |2218| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@97| |j#1@@2|)) ($Unbox intType (|Seq#Index| |run#0@@97| |i#1@@18|))) )) (and (=> (Byte__Order.__default.IsSorted ($LS $ly@@375) (Lit |run#0@@97|)) (forall ((|i#1@@19| Int) (|j#1@@3| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@19|) (<= |i#1@@19| |j#1@@3|)) (< |j#1@@3| (|Seq#Length| (Lit |run#0@@97|)))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |i#1@@19|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |j#1@@3|)))))) :qid |totalord.45:12| :skolemid |2219| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@97| |j#1@@3|)) ($Unbox intType (|Seq#Index| |run#0@@97| |i#1@@19|))) ))) (=> (forall ((|i#1@@20| Int) (|j#1@@4| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@20|) (<= |i#1@@20| |j#1@@4|)) (< |j#1@@4| (|Seq#Length| (Lit |run#0@@97|)))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |i#1@@20|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@97|) |j#1@@4|)))))) :qid |totalord.45:12| :skolemid |2219| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@97| |j#1@@4|)) ($Unbox intType (|Seq#Index| |run#0@@97| |i#1@@20|))) )) (Byte__Order.__default.IsSorted ($LS $ly@@375) (Lit |run#0@@97|)))))) :qid |totalord.41:23| :weight 3 :skolemid |2220| :pattern ( (Byte__Order.__default.IsSorted ($LS $ly@@375) (Lit |run#0@@97|))) ))))
(assert  (=> true (forall ((|run#0@@98| T@U) ) (!  (=> (and (= (type |run#0@@98|) (SeqType BoxType)) (or (|Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@98|) ($Is |run#0@@98| (TSeq Tclass.NativeTypes.byte)))) true) :qid |totalord.48:38| :skolemid |2221| :pattern ( (Byte__Order.__default.IsStrictlySortedInternal |run#0@@98|)) ))))
(assert (forall ((|run#0@@99| T@U) ) (!  (=> (and (= (type |run#0@@99|) (SeqType BoxType)) ($Is |run#0@@99| (TSeq Tclass.NativeTypes.byte))) (and (=> (|Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@99|) true) (=> true (|Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@99|)))) :qid |totalord.48:38| :skolemid |2222| :pattern ( (|Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@99|)) )))
(assert  (=> true (forall ((|run#0@@100| T@U) ) (!  (=> (and (= (type |run#0@@100|) (SeqType BoxType)) (or (|Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@100|) ($Is |run#0@@100| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#0@@78| Int) (|j#0@@15| Int) ) (!  (=> (< |j#0@@15| (|Seq#Length| |run#0@@100|)) (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |i#0@@78|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |j#0@@15|))))) :qid |totalord.50:12| :skolemid |2223| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@100| |j#0@@15|)) ($Unbox intType (|Seq#Index| |run#0@@100| |i#0@@78|))) )) (and (=> (Byte__Order.__default.IsStrictlySortedInternal |run#0@@100|) (forall ((|i#0@@79| Int) (|j#0@@16| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@79|) (< |i#0@@79| |j#0@@16|)) (< |j#0@@16| (|Seq#Length| |run#0@@100|))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |i#0@@79|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |j#0@@16|)))))) :qid |totalord.50:12| :skolemid |2224| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@100| |j#0@@16|)) ($Unbox intType (|Seq#Index| |run#0@@100| |i#0@@79|))) ))) (=> (forall ((|i#0@@80| Int) (|j#0@@17| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@80|) (< |i#0@@80| |j#0@@17|)) (< |j#0@@17| (|Seq#Length| |run#0@@100|))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |i#0@@80|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |j#0@@17|)))))) :qid |totalord.50:12| :skolemid |2224| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@100| |j#0@@17|)) ($Unbox intType (|Seq#Index| |run#0@@100| |i#0@@80|))) )) (Byte__Order.__default.IsStrictlySortedInternal |run#0@@100|))))) :qid |totalord.48:38| :skolemid |2225| :pattern ( (Byte__Order.__default.IsStrictlySortedInternal |run#0@@100|)) ))))
(assert  (=> true (forall ((|run#0@@101| T@U) ) (!  (=> (and (= (type |run#0@@101|) (SeqType BoxType)) (or (|Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@101|)) ($Is |run#0@@101| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#1@@21| Int) (|j#1@@5| Int) ) (!  (=> (< |j#1@@5| (|Seq#Length| (Lit |run#0@@101|))) (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |i#1@@21|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |j#1@@5|))))) :qid |totalord.50:12| :skolemid |2226| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@101| |j#1@@5|)) ($Unbox intType (|Seq#Index| |run#0@@101| |i#1@@21|))) )) (and (=> (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@101|)) (forall ((|i#1@@22| Int) (|j#1@@6| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@22|) (< |i#1@@22| |j#1@@6|)) (< |j#1@@6| (|Seq#Length| (Lit |run#0@@101|)))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |i#1@@22|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |j#1@@6|)))))) :qid |totalord.50:12| :skolemid |2227| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@101| |j#1@@6|)) ($Unbox intType (|Seq#Index| |run#0@@101| |i#1@@22|))) ))) (=> (forall ((|i#1@@23| Int) (|j#1@@7| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@23|) (< |i#1@@23| |j#1@@7|)) (< |j#1@@7| (|Seq#Length| (Lit |run#0@@101|)))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |i#1@@23|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@101|) |j#1@@7|)))))) :qid |totalord.50:12| :skolemid |2227| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@101| |j#1@@7|)) ($Unbox intType (|Seq#Index| |run#0@@101| |i#1@@23|))) )) (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@101|)))))) :qid |totalord.48:38| :weight 3 :skolemid |2228| :pattern ( (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@101|))) ))))
(assert (forall (($ly@@376 T@U) (|run#0@@102| T@U) ) (!  (=> (and (= (type $ly@@376) LayerTypeType) (= (type |run#0@@102|) (SeqType BoxType))) (and (=> (Byte__Order.__default.IsStrictlySorted ($LS $ly@@376) |run#0@@102|) (Byte__Order.__default.IsStrictlySorted $ly@@376 |run#0@@102|)) (=> (Byte__Order.__default.IsStrictlySorted $ly@@376 |run#0@@102|) (Byte__Order.__default.IsStrictlySorted ($LS $ly@@376) |run#0@@102|)))) :qid |totalord.64:23| :skolemid |2229| :pattern ( (Byte__Order.__default.IsStrictlySorted ($LS $ly@@376) |run#0@@102|)) )))
(assert (forall (($ly@@377 T@U) (|run#0@@103| T@U) ) (!  (=> (and (= (type $ly@@377) LayerTypeType) (= (type |run#0@@103|) (SeqType BoxType))) (and (=> (Byte__Order.__default.IsStrictlySorted $ly@@377 |run#0@@103|) (Byte__Order.__default.IsStrictlySorted $LZ |run#0@@103|)) (=> (Byte__Order.__default.IsStrictlySorted $LZ |run#0@@103|) (Byte__Order.__default.IsStrictlySorted $ly@@377 |run#0@@103|)))) :qid |totalord.64:23| :skolemid |2230| :pattern ( (Byte__Order.__default.IsStrictlySorted (AsFuelBottom $ly@@377) |run#0@@103|)) )))
(assert  (=> true (forall (($ly@@378 T@U) (|run#0@@104| T@U) ) (!  (=> (and (and (= (type $ly@@378) LayerTypeType) (= (type |run#0@@104|) (SeqType BoxType))) (or (|Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@104|) ($Is |run#0@@104| (TSeq Tclass.NativeTypes.byte)))) (and (and (=> (= (|Seq#Length| |run#0@@104|) (LitInt 0)) (Byte__Order.__default.IsStrictlySorted $ly@@378 |run#0@@104|)) (=> (= (|Seq#Length| |run#0@@104|) (LitInt 1)) (Byte__Order.__default.IsStrictlySorted $ly@@378 |run#0@@104|))) (=> (Byte__Order.__default.IsStrictlySorted $ly@@378 |run#0@@104|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@104|)))) :qid |totalord.64:23| :skolemid |2231| :pattern ( (Byte__Order.__default.IsStrictlySorted $ly@@378 |run#0@@104|)) ))))
(assert (forall (($ly@@379 T@U) (|run#0@@105| T@U) ) (!  (=> (and (and (= (type $ly@@379) LayerTypeType) (= (type |run#0@@105|) (SeqType BoxType))) ($Is |run#0@@105| (TSeq Tclass.NativeTypes.byte))) (and (=> (|Byte__Order.__default.IsStrictlySorted#requires| $ly@@379 |run#0@@105|) true) (=> true (|Byte__Order.__default.IsStrictlySorted#requires| $ly@@379 |run#0@@105|)))) :qid |totalord.64:23| :skolemid |2232| :pattern ( (|Byte__Order.__default.IsStrictlySorted#requires| $ly@@379 |run#0@@105|)) )))
(assert  (=> true (forall (($ly@@380 T@U) (|run#0@@106| T@U) ) (!  (=> (and (and (= (type $ly@@380) LayerTypeType) (= (type |run#0@@106|) (SeqType BoxType))) (or (|Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@106|) ($Is |run#0@@106| (TSeq Tclass.NativeTypes.byte)))) (and (|Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@106|) (and (=> (Byte__Order.__default.IsStrictlySorted ($LS $ly@@380) |run#0@@106|) (let ((|b#0@@94| (Byte__Order.__default.IsStrictlySortedInternal |run#0@@106|))) (ite |b#0@@94| |b#0@@94| |b#0@@94|))) (=> (let ((|b#0@@95| (Byte__Order.__default.IsStrictlySortedInternal |run#0@@106|))) (ite |b#0@@95| |b#0@@95| |b#0@@95|)) (Byte__Order.__default.IsStrictlySorted ($LS $ly@@380) |run#0@@106|))))) :qid |totalord.64:23| :skolemid |2233| :pattern ( (Byte__Order.__default.IsStrictlySorted ($LS $ly@@380) |run#0@@106|)) ))))
(assert  (=> true (forall (($ly@@381 T@U) (|run#0@@107| T@U) ) (!  (=> (and (and (= (type $ly@@381) LayerTypeType) (= (type |run#0@@107|) (SeqType BoxType))) (or (|Byte__Order.__default.IsStrictlySorted#canCall| (Lit |run#0@@107|)) ($Is |run#0@@107| (TSeq Tclass.NativeTypes.byte)))) (and (|Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@107|)) (and (=> (Byte__Order.__default.IsStrictlySorted ($LS $ly@@381) (Lit |run#0@@107|)) (let ((|b#1@@4| (U_2_bool (Lit (bool_2_U (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@107|))))))) (ite |b#1@@4| |b#1@@4| |b#1@@4|))) (=> (let ((|b#1@@5| (U_2_bool (Lit (bool_2_U (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@107|))))))) (ite |b#1@@5| |b#1@@5| |b#1@@5|)) (Byte__Order.__default.IsStrictlySorted ($LS $ly@@381) (Lit |run#0@@107|)))))) :qid |totalord.64:23| :weight 3 :skolemid |2234| :pattern ( (Byte__Order.__default.IsStrictlySorted ($LS $ly@@381) (Lit |run#0@@107|))) ))))
(assert (= (type Tclass.Lexicographic__Byte__Order.__default) TyType))
(assert (= (Tag Tclass.Lexicographic__Byte__Order.__default) Tagclass.Lexicographic__Byte__Order.__default))
(assert (forall ((bx@@103 T@U) ) (!  (=> (and (= (type bx@@103) BoxType) ($IsBox bx@@103 Tclass.Lexicographic__Byte__Order.__default)) (and (= ($Box ($Unbox refType bx@@103)) bx@@103) ($Is ($Unbox refType bx@@103) Tclass.Lexicographic__Byte__Order.__default))) :qid |unknown.0:0| :skolemid |2235| :pattern ( ($IsBox bx@@103 Tclass.Lexicographic__Byte__Order.__default)) )))
(assert (forall (($o@@35 T@U) ) (!  (=> (= (type $o@@35) refType) (and (=> ($Is $o@@35 Tclass.Lexicographic__Byte__Order.__default) (or (= $o@@35 null) (= (dtype $o@@35) Tclass.Lexicographic__Byte__Order.__default))) (=> (or (= $o@@35 null) (= (dtype $o@@35) Tclass.Lexicographic__Byte__Order.__default)) ($Is $o@@35 Tclass.Lexicographic__Byte__Order.__default)))) :qid |unknown.0:0| :skolemid |2236| :pattern ( ($Is $o@@35 Tclass.Lexicographic__Byte__Order.__default)) )))
(assert (forall (($o@@36 T@U) ($h@@52 T@U) ) (!  (=> (and (= (type $o@@36) refType) (= (type $h@@52) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@36 Tclass.Lexicographic__Byte__Order.__default $h@@52) (or (= $o@@36 null) (U_2_bool (MapType1Select (MapType0Select $h@@52 $o@@36) alloc)))) (=> (or (= $o@@36 null) (U_2_bool (MapType1Select (MapType0Select $h@@52 $o@@36) alloc))) ($IsAlloc $o@@36 Tclass.Lexicographic__Byte__Order.__default $h@@52)))) :qid |unknown.0:0| :skolemid |2237| :pattern ( ($IsAlloc $o@@36 Tclass.Lexicographic__Byte__Order.__default $h@@52)) )))
(assert (= (type Lexicographic__Byte__Order.__default.SomeElement) (SeqType BoxType)))
(assert  (=> true (=> true ($Is Lexicographic__Byte__Order.__default.SomeElement (TSeq Tclass.NativeTypes.byte)))))
(assert  (=> |Lexicographic__Byte__Order.__default.SomeElement#requires| true))
(assert  (=> true |Lexicographic__Byte__Order.__default.SomeElement#requires|))
(assert  (=> true (=> true (= Lexicographic__Byte__Order.__default.SomeElement (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (=> true (= Lexicographic__Byte__Order.__default.SomeElement (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (forall ((|a#0@@125| T@U) (|b#0@@96| T@U) ) (!  (=> (and (and (= (type |a#0@@125|) (SeqType BoxType)) (= (type |b#0@@96|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@125| |b#0@@96|) (and ($Is |a#0@@125| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@96| (TSeq Tclass.NativeTypes.byte))))) (and (and (and (and (and (and (and (=> (Lexicographic__Byte__Order.__default.lte |a#0@@125| |b#0@@96|) (Lexicographic__Byte__Order.__default.ltedef |a#0@@125| |b#0@@96|)) (=> (Lexicographic__Byte__Order.__default.ltedef |a#0@@125| |b#0@@96|) (Lexicographic__Byte__Order.__default.lte |a#0@@125| |b#0@@96|))) (or (Lexicographic__Byte__Order.__default.ltedef |a#0@@125| |b#0@@96|) (Lexicographic__Byte__Order.__default.ltedef |b#0@@96| |a#0@@125|))) (forall ((|a#1@@3| T@U) (|b#1@@6| T@U) (|c#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type |a#1@@3|) (SeqType BoxType)) (= (type |b#1@@6|) (SeqType BoxType))) (= (type |c#0@@11|) (SeqType BoxType))) (and (and ($Is |a#1@@3| (TSeq Tclass.NativeTypes.byte)) ($Is |b#1@@6| (TSeq Tclass.NativeTypes.byte))) ($Is |c#0@@11| (TSeq Tclass.NativeTypes.byte)))) (and (Lexicographic__Byte__Order.__default.ltedef |a#1@@3| |b#1@@6|) (Lexicographic__Byte__Order.__default.ltedef |b#1@@6| |c#0@@11|))) (Lexicographic__Byte__Order.__default.ltedef |a#1@@3| |c#0@@11|)) :qid |totalord.20:18| :skolemid |2238| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#1@@3| |c#0@@11|) (Lexicographic__Byte__Order.__default.ltedef |b#1@@6| |c#0@@11|)) :pattern ( (Lexicographic__Byte__Order.__default.ltedef |b#1@@6| |c#0@@11|) (Lexicographic__Byte__Order.__default.ltedef |a#1@@3| |b#1@@6|)) ))) (and (=> (Lexicographic__Byte__Order.__default.lte |a#0@@125| |b#0@@96|) (Lexicographic__Byte__Order.__default.ltedef |a#0@@125| |b#0@@96|)) (=> (Lexicographic__Byte__Order.__default.ltedef |a#0@@125| |b#0@@96|) (Lexicographic__Byte__Order.__default.lte |a#0@@125| |b#0@@96|)))) (or (Lexicographic__Byte__Order.__default.ltedef |a#0@@125| |b#0@@96|) (Lexicographic__Byte__Order.__default.ltedef |b#0@@96| |a#0@@125|))) (=> (and (Lexicographic__Byte__Order.__default.ltedef |a#0@@125| |b#0@@96|) (Lexicographic__Byte__Order.__default.ltedef |b#0@@96| |a#0@@125|)) (|Seq#Equal| |a#0@@125| |b#0@@96|))) (forall ((|a#2@@0| T@U) (|b#2@@0| T@U) (|c#1@@0| T@U) ) (!  (=> (and (and (and (and (= (type |a#2@@0|) (SeqType BoxType)) (= (type |b#2@@0|) (SeqType BoxType))) (= (type |c#1@@0|) (SeqType BoxType))) (and (and ($Is |a#2@@0| (TSeq Tclass.NativeTypes.byte)) ($Is |b#2@@0| (TSeq Tclass.NativeTypes.byte))) ($Is |c#1@@0| (TSeq Tclass.NativeTypes.byte)))) (and (Lexicographic__Byte__Order.__default.ltedef |a#2@@0| |b#2@@0|) (Lexicographic__Byte__Order.__default.ltedef |b#2@@0| |c#1@@0|))) (Lexicographic__Byte__Order.__default.ltedef |a#2@@0| |c#1@@0|)) :qid |totalord.188:18| :skolemid |2239| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#2@@0| |c#1@@0|) (Lexicographic__Byte__Order.__default.ltedef |b#2@@0| |c#1@@0|)) :pattern ( (Lexicographic__Byte__Order.__default.ltedef |b#2@@0| |c#1@@0|) (Lexicographic__Byte__Order.__default.ltedef |a#2@@0| |b#2@@0|)) )))) :qid |totalord.17:16| :skolemid |2240| :pattern ( (Lexicographic__Byte__Order.__default.lte |a#0@@125| |b#0@@96|)) ))))
(assert (forall ((|a#0@@126| T@U) (|b#0@@97| T@U) ) (!  (=> (and (and (= (type |a#0@@126|) (SeqType BoxType)) (= (type |b#0@@97|) (SeqType BoxType))) (and ($Is |a#0@@126| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@97| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.lte#requires| |a#0@@126| |b#0@@97|) true) (=> true (|Lexicographic__Byte__Order.__default.lte#requires| |a#0@@126| |b#0@@97|)))) :qid |totalord.17:16| :skolemid |2241| :pattern ( (|Lexicographic__Byte__Order.__default.lte#requires| |a#0@@126| |b#0@@97|)) )))
(assert  (=> true (forall ((|a#0@@127| T@U) (|b#0@@98| T@U) ) (!  (=> (and (and (= (type |a#0@@127|) (SeqType BoxType)) (= (type |b#0@@98|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@127| |b#0@@98|) (and ($Is |a#0@@127| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@98| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| |a#0@@127| |b#0@@98|) (and (=> (Lexicographic__Byte__Order.__default.lte |a#0@@127| |b#0@@98|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@127| |b#0@@98|)) (=> (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@127| |b#0@@98|) (Lexicographic__Byte__Order.__default.lte |a#0@@127| |b#0@@98|))))) :qid |totalord.17:16| :skolemid |2242| :pattern ( (Lexicographic__Byte__Order.__default.lte |a#0@@127| |b#0@@98|)) ))))
(assert  (=> true (forall ((|a#0@@128| T@U) (|b#0@@99| T@U) ) (!  (=> (and (and (= (type |a#0@@128|) (SeqType BoxType)) (= (type |b#0@@99|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@128|) (Lit |b#0@@99|)) (and ($Is |a#0@@128| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@99| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| (Lit |a#0@@128|) (Lit |b#0@@99|)) (and (=> (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@128|) (Lit |b#0@@99|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@128|) (Lit |b#0@@99|))) (=> (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@128|) (Lit |b#0@@99|)) (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@128|) (Lit |b#0@@99|)))))) :qid |totalord.17:16| :weight 3 :skolemid |2243| :pattern ( (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@128|) (Lit |b#0@@99|))) ))))
(assert  (=> true (forall ((|a#0@@129| T@U) (|b#0@@100| T@U) ) (!  (=> (and (and (= (type |a#0@@129|) (SeqType BoxType)) (= (type |b#0@@100|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.ltedef#canCall| |a#0@@129| |b#0@@100|) (and ($Is |a#0@@129| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@100| (TSeq Tclass.NativeTypes.byte))))) true) :qid |totalord.22:19| :skolemid |2244| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#0@@129| |b#0@@100|)) ))))
(assert (forall ((|a#0@@130| T@U) (|b#0@@101| T@U) ) (!  (=> (and (and (= (type |a#0@@130|) (SeqType BoxType)) (= (type |b#0@@101|) (SeqType BoxType))) (and ($Is |a#0@@130| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@101| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.ltedef#requires| |a#0@@130| |b#0@@101|) true) (=> true (|Lexicographic__Byte__Order.__default.ltedef#requires| |a#0@@130| |b#0@@101|)))) :qid |totalord.22:19| :skolemid |2245| :pattern ( (|Lexicographic__Byte__Order.__default.ltedef#requires| |a#0@@130| |b#0@@101|)) )))
(assert  (=> true (forall ((|a#0@@131| T@U) (|b#0@@102| T@U) ) (!  (=> (and (and (= (type |a#0@@131|) (SeqType BoxType)) (= (type |b#0@@102|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.ltedef#canCall| |a#0@@131| |b#0@@102|) (and ($Is |a#0@@131| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@102| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| |a#0@@131| |b#0@@102|) (and (=> (Lexicographic__Byte__Order.__default.ltedef |a#0@@131| |b#0@@102|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@131| |b#0@@102|)) (=> (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@131| |b#0@@102|) (Lexicographic__Byte__Order.__default.ltedef |a#0@@131| |b#0@@102|))))) :qid |totalord.22:19| :skolemid |2246| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#0@@131| |b#0@@102|)) ))))
(assert  (=> true (forall ((|a#0@@132| T@U) (|b#0@@103| T@U) ) (!  (=> (and (and (= (type |a#0@@132|) (SeqType BoxType)) (= (type |b#0@@103|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.ltedef#canCall| (Lit |a#0@@132|) (Lit |b#0@@103|)) (and ($Is |a#0@@132| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@103| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| (Lit |a#0@@132|) (Lit |b#0@@103|)) (and (=> (Lexicographic__Byte__Order.__default.ltedef (Lit |a#0@@132|) (Lit |b#0@@103|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@132|) (Lit |b#0@@103|))) (=> (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@132|) (Lit |b#0@@103|)) (Lexicographic__Byte__Order.__default.ltedef (Lit |a#0@@132|) (Lit |b#0@@103|)))))) :qid |totalord.22:19| :weight 3 :skolemid |2247| :pattern ( (Lexicographic__Byte__Order.__default.ltedef (Lit |a#0@@132|) (Lit |b#0@@103|))) ))))
(assert (forall (($ly@@382 T@U) (|run#0@@108| T@U) (|needle#0@@37| T@U) ) (!  (=> (and (and (= (type $ly@@382) LayerTypeType) (= (type |run#0@@108|) (SeqType BoxType))) (= (type |needle#0@@37|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@382) |run#0@@108| |needle#0@@37|) (Lexicographic__Byte__Order.__default.LargestLte $ly@@382 |run#0@@108| |needle#0@@37|))) :qid |totalord.253:12| :skolemid |2248| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@382) |run#0@@108| |needle#0@@37|)) )))
(assert (forall (($ly@@383 T@U) (|run#0@@109| T@U) (|needle#0@@38| T@U) ) (!  (=> (and (and (= (type $ly@@383) LayerTypeType) (= (type |run#0@@109|) (SeqType BoxType))) (= (type |needle#0@@38|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLte $ly@@383 |run#0@@109| |needle#0@@38|) (Lexicographic__Byte__Order.__default.LargestLte $LZ |run#0@@109| |needle#0@@38|))) :qid |totalord.253:12| :skolemid |2249| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte (AsFuelBottom $ly@@383) |run#0@@109| |needle#0@@38|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.IsSorted) LayerTypeType))
(assert  (=> true (forall (($ly@@384 T@U) (|run#0@@110| T@U) (|needle#0@@39| T@U) ) (!  (=> (and (and (and (= (type $ly@@384) LayerTypeType) (= (type |run#0@@110|) (SeqType BoxType))) (= (type |needle#0@@39|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLte#canCall| |run#0@@110| |needle#0@@39|) (and (and ($Is |run#0@@110| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@39| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@110|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Lexicographic__Byte__Order.__default.LargestLte $ly@@384 |run#0@@110| |needle#0@@39|)) (< (Lexicographic__Byte__Order.__default.LargestLte $ly@@384 |run#0@@110| |needle#0@@39|) (|Seq#Length| |run#0@@110|))) (forall ((|i#0@@81| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@81|) (<= |i#0@@81| (Lexicographic__Byte__Order.__default.LargestLte $ly@@384 |run#0@@110| |needle#0@@39|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@110| |i#0@@81|)) |needle#0@@39|))) :qid |totalord.256:20| :skolemid |2250| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@110| |i#0@@81|))) ))) (forall ((|i#1@@24| Int) ) (!  (=> true (=> (and (< (Lexicographic__Byte__Order.__default.LargestLte $ly@@384 |run#0@@110| |needle#0@@39|) |i#1@@24|) (< |i#1@@24| (|Seq#Length| |run#0@@110|))) (Lexicographic__Byte__Order.__default.lt |needle#0@@39| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@110| |i#1@@24|))))) :qid |totalord.257:20| :skolemid |2251| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@110| |i#1@@24|))) ))) (=> (|Seq#Contains| |run#0@@110| ($Box |needle#0@@39|)) (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.LargestLte $ly@@384 |run#0@@110| |needle#0@@39|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@110| (Lexicographic__Byte__Order.__default.LargestLte $ly@@384 |run#0@@110| |needle#0@@39|))) |needle#0@@39|))))) :qid |totalord.253:12| :skolemid |2252| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte $ly@@384 |run#0@@110| |needle#0@@39|)) ))))
(assert (forall (($ly@@385 T@U) (|run#0@@111| T@U) (|needle#0@@40| T@U) ) (!  (=> (and (and (and (= (type $ly@@385) LayerTypeType) (= (type |run#0@@111|) (SeqType BoxType))) (= (type |needle#0@@40|) (SeqType BoxType))) (and ($Is |run#0@@111| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@40| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.LargestLte#requires| $ly@@385 |run#0@@111| |needle#0@@40|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@111|)) (=> (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@111|) (|Lexicographic__Byte__Order.__default.LargestLte#requires| $ly@@385 |run#0@@111| |needle#0@@40|)))) :qid |totalord.253:12| :skolemid |2253| :pattern ( (|Lexicographic__Byte__Order.__default.LargestLte#requires| $ly@@385 |run#0@@111| |needle#0@@40|)) )))
(assert  (and (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted0) LayerTypeType) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted) LayerTypeType)))
(assert  (=> true (forall (($ly@@386 T@U) (|run#0@@112| T@U) (|needle#0@@41| T@U) ) (!  (=> (and (and (and (= (type $ly@@386) LayerTypeType) (= (type |run#0@@112|) (SeqType BoxType))) (= (type |needle#0@@41|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLte#canCall| |run#0@@112| |needle#0@@41|) (and (and ($Is |run#0@@112| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@41| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@112|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@112|) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lt#canCall| |needle#0@@41| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@112| (LitInt 0))))) (=> (not (or (= (|Seq#Length| |run#0@@112|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt |needle#0@@41| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@112| (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (|Seq#Drop| |run#0@@112| (LitInt 1)) |needle#0@@41|))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted0)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted0)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted0) MoreFuel_Lexicographic_Byte_Order._default.IsSorted0)) (= (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@386) |run#0@@112| |needle#0@@41|) (ite  (or (= (|Seq#Length| |run#0@@112|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt |needle#0@@41| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@112| (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLte $ly@@386 (|Seq#Drop| |run#0@@112| (LitInt 1)) |needle#0@@41|))))))) :qid |totalord.253:12| :skolemid |2254| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@386) |run#0@@112| |needle#0@@41|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted1) LayerTypeType))
(assert  (=> true (forall (($ly@@387 T@U) (|run#0@@113| T@U) (|needle#0@@42| T@U) ) (!  (=> (and (and (and (= (type $ly@@387) LayerTypeType) (= (type |run#0@@113|) (SeqType BoxType))) (= (type |needle#0@@42|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit |run#0@@113|) (Lit |needle#0@@42|)) (and (and ($Is |run#0@@113| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@42| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@113|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@113|)) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |needle#0@@42|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@113|) (LitInt 0))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@113|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt (Lit |needle#0@@42|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@113|) (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit (|Seq#Drop| (Lit |run#0@@113|) (LitInt 1))) (Lit |needle#0@@42|)))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted1)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted1)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted1) MoreFuel_Lexicographic_Byte_Order._default.IsSorted1)) (= (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@387) (Lit |run#0@@113|) (Lit |needle#0@@42|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@113|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt (Lit |needle#0@@42|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@113|) (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@387) (Lit (|Seq#Drop| (Lit |run#0@@113|) (LitInt 1))) (Lit |needle#0@@42|)))))))) :qid |totalord.253:12| :weight 3 :skolemid |2255| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@387) (Lit |run#0@@113|) (Lit |needle#0@@42|))) ))))
(assert (forall (($ly@@388 T@U) (|run#0@@114| T@U) (|needle#0@@43| T@U) ) (!  (=> (and (and (= (type $ly@@388) LayerTypeType) (= (type |run#0@@114|) (SeqType BoxType))) (= (type |needle#0@@43|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@388) |run#0@@114| |needle#0@@43|) (Lexicographic__Byte__Order.__default.LargestLt $ly@@388 |run#0@@114| |needle#0@@43|))) :qid |totalord.356:12| :skolemid |2256| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@388) |run#0@@114| |needle#0@@43|)) )))
(assert (forall (($ly@@389 T@U) (|run#0@@115| T@U) (|needle#0@@44| T@U) ) (!  (=> (and (and (= (type $ly@@389) LayerTypeType) (= (type |run#0@@115|) (SeqType BoxType))) (= (type |needle#0@@44|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLt $ly@@389 |run#0@@115| |needle#0@@44|) (Lexicographic__Byte__Order.__default.LargestLt $LZ |run#0@@115| |needle#0@@44|))) :qid |totalord.356:12| :skolemid |2257| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt (AsFuelBottom $ly@@389) |run#0@@115| |needle#0@@44|)) )))
(assert  (=> true (forall (($ly@@390 T@U) (|run#0@@116| T@U) (|needle#0@@45| T@U) ) (!  (=> (and (and (and (= (type $ly@@390) LayerTypeType) (= (type |run#0@@116|) (SeqType BoxType))) (= (type |needle#0@@45|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLt#canCall| |run#0@@116| |needle#0@@45|) (and (and ($Is |run#0@@116| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@45| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@116|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Lexicographic__Byte__Order.__default.LargestLt $ly@@390 |run#0@@116| |needle#0@@45|)) (< (Lexicographic__Byte__Order.__default.LargestLt $ly@@390 |run#0@@116| |needle#0@@45|) (|Seq#Length| |run#0@@116|))) (forall ((|i#0@@82| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@82|) (<= |i#0@@82| (Lexicographic__Byte__Order.__default.LargestLt $ly@@390 |run#0@@116| |needle#0@@45|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@116| |i#0@@82|)) |needle#0@@45|))) :qid |totalord.359:20| :skolemid |2258| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@116| |i#0@@82|))) ))) (forall ((|i#1@@25| Int) ) (!  (=> true (=> (and (< (Lexicographic__Byte__Order.__default.LargestLt $ly@@390 |run#0@@116| |needle#0@@45|) |i#1@@25|) (< |i#1@@25| (|Seq#Length| |run#0@@116|))) (Lexicographic__Byte__Order.__default.lte |needle#0@@45| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@116| |i#1@@25|))))) :qid |totalord.360:20| :skolemid |2259| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@116| |i#1@@25|))) ))) (=> (|Seq#Contains| |run#0@@116| ($Box |needle#0@@45|)) (and (< (+ (Lexicographic__Byte__Order.__default.LargestLt $ly@@390 |run#0@@116| |needle#0@@45|) 1) (|Seq#Length| |run#0@@116|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@116| (+ (Lexicographic__Byte__Order.__default.LargestLt $ly@@390 |run#0@@116| |needle#0@@45|) 1))) |needle#0@@45|))))) :qid |totalord.356:12| :skolemid |2260| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt $ly@@390 |run#0@@116| |needle#0@@45|)) ))))
(assert (forall (($ly@@391 T@U) (|run#0@@117| T@U) (|needle#0@@46| T@U) ) (!  (=> (and (and (and (= (type $ly@@391) LayerTypeType) (= (type |run#0@@117|) (SeqType BoxType))) (= (type |needle#0@@46|) (SeqType BoxType))) (and ($Is |run#0@@117| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@46| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.LargestLt#requires| $ly@@391 |run#0@@117| |needle#0@@46|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@117|)) (=> (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@117|) (|Lexicographic__Byte__Order.__default.LargestLt#requires| $ly@@391 |run#0@@117| |needle#0@@46|)))) :qid |totalord.356:12| :skolemid |2261| :pattern ( (|Lexicographic__Byte__Order.__default.LargestLt#requires| $ly@@391 |run#0@@117| |needle#0@@46|)) )))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted2) LayerTypeType))
(assert  (=> true (forall (($ly@@392 T@U) (|run#0@@118| T@U) (|needle#0@@47| T@U) ) (!  (=> (and (and (and (= (type $ly@@392) LayerTypeType) (= (type |run#0@@118|) (SeqType BoxType))) (= (type |needle#0@@47|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLt#canCall| |run#0@@118| |needle#0@@47|) (and (and ($Is |run#0@@118| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@47| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@118|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@118|) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lte#canCall| |needle#0@@47| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@118| (LitInt 0))))) (=> (not (or (= (|Seq#Length| |run#0@@118|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte |needle#0@@47| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@118| (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLt#canCall| (|Seq#Drop| |run#0@@118| (LitInt 1)) |needle#0@@47|))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted2)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted2)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted2) MoreFuel_Lexicographic_Byte_Order._default.IsSorted2)) (= (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@392) |run#0@@118| |needle#0@@47|) (ite  (or (= (|Seq#Length| |run#0@@118|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte |needle#0@@47| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@118| (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLt $ly@@392 (|Seq#Drop| |run#0@@118| (LitInt 1)) |needle#0@@47|))))))) :qid |totalord.356:12| :skolemid |2262| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@392) |run#0@@118| |needle#0@@47|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted3) LayerTypeType))
(assert  (=> true (forall (($ly@@393 T@U) (|run#0@@119| T@U) (|needle#0@@48| T@U) ) (!  (=> (and (and (and (= (type $ly@@393) LayerTypeType) (= (type |run#0@@119|) (SeqType BoxType))) (= (type |needle#0@@48|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLt#canCall| (Lit |run#0@@119|) (Lit |needle#0@@48|)) (and (and ($Is |run#0@@119| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@48| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@119|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@119|)) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |needle#0@@48|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@119|) (LitInt 0))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@119|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte (Lit |needle#0@@48|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@119|) (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLt#canCall| (Lit (|Seq#Drop| (Lit |run#0@@119|) (LitInt 1))) (Lit |needle#0@@48|)))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted3)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted3)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted3) MoreFuel_Lexicographic_Byte_Order._default.IsSorted3)) (= (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@393) (Lit |run#0@@119|) (Lit |needle#0@@48|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@119|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte (Lit |needle#0@@48|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@119|) (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@393) (Lit (|Seq#Drop| (Lit |run#0@@119|) (LitInt 1))) (Lit |needle#0@@48|)))))))) :qid |totalord.356:12| :weight 3 :skolemid |2263| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@393) (Lit |run#0@@119|) (Lit |needle#0@@48|))) ))))
(assert (forall (($ly@@394 T@U) (|run#0@@120| T@U) (|needle#0@@49| T@U) ) (!  (=> (and (and (= (type $ly@@394) LayerTypeType) (= (type |run#0@@120|) (SeqType BoxType))) (= (type |needle#0@@49|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@394) |run#0@@120| |needle#0@@49|) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@394 |run#0@@120| |needle#0@@49|))) :qid |totalord.388:12| :skolemid |2264| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@394) |run#0@@120| |needle#0@@49|)) )))
(assert (forall (($ly@@395 T@U) (|run#0@@121| T@U) (|needle#0@@50| T@U) ) (!  (=> (and (and (= (type $ly@@395) LayerTypeType) (= (type |run#0@@121|) (SeqType BoxType))) (= (type |needle#0@@50|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@395 |run#0@@121| |needle#0@@50|) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $LZ |run#0@@121| |needle#0@@50|))) :qid |totalord.388:12| :skolemid |2265| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte (AsFuelBottom $ly@@395) |run#0@@121| |needle#0@@50|)) )))
(assert  (=> true (forall (($ly@@396 T@U) (|run#0@@122| T@U) (|needle#0@@51| T@U) ) (!  (=> (and (and (and (= (type $ly@@396) LayerTypeType) (= (type |run#0@@122|) (SeqType BoxType))) (= (type |needle#0@@51|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@122| |needle#0@@51|) (and (and ($Is |run#0@@122| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@51| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@122|)))) (and (and (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@396 |run#0@@122| |needle#0@@51|) (|Seq#Length| |run#0@@122|)) (forall ((|i#0@@83| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@83|) (< |i#0@@83| (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@396 |run#0@@122| |needle#0@@51|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#0@@83|)) |needle#0@@51|)) :qid |totalord.391:20| :skolemid |2266| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#0@@83|))) ))) (forall ((|i#1@@26| Int) ) (!  (=> (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@396 |run#0@@122| |needle#0@@51|) |i#1@@26|) (< |i#1@@26| (|Seq#Length| |run#0@@122|))) (Lexicographic__Byte__Order.__default.lte |needle#0@@51| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#1@@26|)))) :qid |totalord.392:20| :skolemid |2267| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#1@@26|))) ))) (<= (LitInt 0) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@396 |run#0@@122| |needle#0@@51|)))) :qid |totalord.388:12| :skolemid |2268| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@396 |run#0@@122| |needle#0@@51|)) ))))
(assert (forall (($ly@@397 T@U) (|run#0@@123| T@U) (|needle#0@@52| T@U) ) (!  (=> (and (and (and (= (type $ly@@397) LayerTypeType) (= (type |run#0@@123|) (SeqType BoxType))) (= (type |needle#0@@52|) (SeqType BoxType))) (and ($Is |run#0@@123| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@52| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| $ly@@397 |run#0@@123| |needle#0@@52|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@123|)) (=> (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@123|) (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| $ly@@397 |run#0@@123| |needle#0@@52|)))) :qid |totalord.388:12| :skolemid |2269| :pattern ( (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| $ly@@397 |run#0@@123| |needle#0@@52|)) )))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted4) LayerTypeType))
(assert  (=> true (forall (($ly@@398 T@U) (|run#0@@124| T@U) (|needle#0@@53| T@U) ) (!  (=> (and (and (and (= (type $ly@@398) LayerTypeType) (= (type |run#0@@124|) (SeqType BoxType))) (= (type |needle#0@@53|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@124| |needle#0@@53|) (and (and ($Is |run#0@@124| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@53| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@124|)))) (and (=> (not (= (|Seq#Length| |run#0@@124|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@124|) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@124|)) |needle#0@@53|)) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@124|)) |needle#0@@53|)) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@124|) (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@124|) |needle#0@@53|))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted4)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted4)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted4) MoreFuel_Lexicographic_Byte_Order._default.IsSorted4)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@398) |run#0@@124| |needle#0@@53|) (ite (= (|Seq#Length| |run#0@@124|) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@124|)) |needle#0@@53|) (|Seq#Length| |run#0@@124|) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@398 (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@124|) |needle#0@@53|))))))) :qid |totalord.388:12| :skolemid |2270| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@398) |run#0@@124| |needle#0@@53|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted5) LayerTypeType))
(assert  (=> true (forall (($ly@@399 T@U) (|run#0@@125| T@U) (|needle#0@@54| T@U) ) (!  (=> (and (and (and (= (type $ly@@399) LayerTypeType) (= (type |run#0@@125|) (SeqType BoxType))) (= (type |needle#0@@54|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (Lit |run#0@@125|) (Lit |needle#0@@54|)) (and (and ($Is |run#0@@125| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@54| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@125|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@125|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|)) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|)))) (Lit |needle#0@@54|))) (=> (not (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|)))) (Lit |needle#0@@54|)))))) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|)) (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|))) (Lit |needle#0@@54|)))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted5)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted5)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted5) MoreFuel_Lexicographic_Byte_Order._default.IsSorted5)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@399) (Lit |run#0@@125|) (Lit |needle#0@@54|)) (ite (= (|Seq#Length| (Lit |run#0@@125|)) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|)))) (Lit |needle#0@@54|)) (|Seq#Length| (Lit |run#0@@125|)) (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@399) (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@125|))) (Lit |needle#0@@54|)))))))) :qid |totalord.388:12| :weight 3 :skolemid |2271| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@399) (Lit |run#0@@125|) (Lit |needle#0@@54|))) ))))
(assert (forall (($ly@@400 T@U) (|s#0@@94| T@U) (|key#0@@55| T@U) (|lo#0@@13| Int) (|hi#0@@13| Int) ) (!  (=> (and (and (= (type $ly@@400) LayerTypeType) (= (type |s#0@@94|) (SeqType BoxType))) (= (type |key#0@@55|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@400) |s#0@@94| |key#0@@55| |lo#0@@13| |hi#0@@13|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@400 |s#0@@94| |key#0@@55| |lo#0@@13| |hi#0@@13|))) :qid |totalord.421:12| :skolemid |2272| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@400) |s#0@@94| |key#0@@55| |lo#0@@13| |hi#0@@13|)) )))
(assert (forall (($ly@@401 T@U) (|s#0@@95| T@U) (|key#0@@56| T@U) (|lo#0@@14| Int) (|hi#0@@14| Int) ) (!  (=> (and (and (= (type $ly@@401) LayerTypeType) (= (type |s#0@@95|) (SeqType BoxType))) (= (type |key#0@@56|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@401 |s#0@@95| |key#0@@56| |lo#0@@14| |hi#0@@14|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $LZ |s#0@@95| |key#0@@56| |lo#0@@14| |hi#0@@14|))) :qid |totalord.421:12| :skolemid |2273| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (AsFuelBottom $ly@@401) |s#0@@95| |key#0@@56| |lo#0@@14| |hi#0@@14|)) )))
(assert  (=> true (forall (($ly@@402 T@U) (|s#0@@96| T@U) (|key#0@@57| T@U) (|lo#0@@15| Int) (|hi#0@@15| Int) ) (!  (=> (and (and (and (= (type $ly@@402) LayerTypeType) (= (type |s#0@@96|) (SeqType BoxType))) (= (type |key#0@@57|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@96| |key#0@@57| |lo#0@@15| |hi#0@@15|) (and (and ($Is |s#0@@96| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@57| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@15|) (< |lo#0@@15| |hi#0@@15|)) (<= |hi#0@@15| (+ (|Seq#Length| |s#0@@96|) 1))) (=> (> |lo#0@@15| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@96| (- |lo#0@@15| 1))) |key#0@@57|))) (=> (<= |hi#0@@15| (|Seq#Length| |s#0@@96|)) (Lexicographic__Byte__Order.__default.lte |key#0@@57| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@96| (- |hi#0@@15| 1))))))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@402 |s#0@@96| |key#0@@57| |lo#0@@15| |hi#0@@15|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@402 |s#0@@96| |key#0@@57| |lo#0@@15| |hi#0@@15|) (|Seq#Length| |s#0@@96|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@402 |s#0@@96| |key#0@@57| |lo#0@@15| |hi#0@@15|) 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@96| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@402 |s#0@@96| |key#0@@57| |lo#0@@15| |hi#0@@15|) 1))) |key#0@@57|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@402 |s#0@@96| |key#0@@57| |lo#0@@15| |hi#0@@15|) (|Seq#Length| |s#0@@96|)) (Lexicographic__Byte__Order.__default.lte |key#0@@57| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@96| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@402 |s#0@@96| |key#0@@57| |lo#0@@15| |hi#0@@15|))))))) :qid |totalord.421:12| :skolemid |2274| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@402 |s#0@@96| |key#0@@57| |lo#0@@15| |hi#0@@15|)) ))))
(assert (forall (($ly@@403 T@U) (|s#0@@97| T@U) (|key#0@@58| T@U) (|lo#0@@16| Int) (|hi#0@@16| Int) ) (!  (=> (and (and (and (= (type $ly@@403) LayerTypeType) (= (type |s#0@@97|) (SeqType BoxType))) (= (type |key#0@@58|) (SeqType BoxType))) (and ($Is |s#0@@97| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@58| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@403 |s#0@@97| |key#0@@58| |lo#0@@16| |hi#0@@16|) (and (and (and (and (<= (LitInt 0) |lo#0@@16|) (< |lo#0@@16| |hi#0@@16|)) (<= |hi#0@@16| (+ (|Seq#Length| |s#0@@97|) 1))) (=> (> |lo#0@@16| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@97| (- |lo#0@@16| 1))) |key#0@@58|))) (=> (<= |hi#0@@16| (|Seq#Length| |s#0@@97|)) (Lexicographic__Byte__Order.__default.lte |key#0@@58| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@97| (- |hi#0@@16| 1))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@16|) (< |lo#0@@16| |hi#0@@16|)) (<= |hi#0@@16| (+ (|Seq#Length| |s#0@@97|) 1))) (=> (> |lo#0@@16| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@97| (- |lo#0@@16| 1))) |key#0@@58|))) (=> (<= |hi#0@@16| (|Seq#Length| |s#0@@97|)) (Lexicographic__Byte__Order.__default.lte |key#0@@58| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@97| (- |hi#0@@16| 1)))))) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@403 |s#0@@97| |key#0@@58| |lo#0@@16| |hi#0@@16|)))) :qid |totalord.421:12| :skolemid |2275| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@403 |s#0@@97| |key#0@@58| |lo#0@@16| |hi#0@@16|)) )))
(assert  (=> true (forall (($ly@@404 T@U) (|s#0@@98| T@U) (|key#0@@59| T@U) (|lo#0@@17| Int) (|hi#0@@17| Int) ) (!  (=> (and (and (and (= (type $ly@@404) LayerTypeType) (= (type |s#0@@98|) (SeqType BoxType))) (= (type |key#0@@59|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@98| |key#0@@59| |lo#0@@17| |hi#0@@17|) (and (and ($Is |s#0@@98| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@59| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@17|) (< |lo#0@@17| |hi#0@@17|)) (<= |hi#0@@17| (+ (|Seq#Length| |s#0@@98|) 1))) (=> (> |lo#0@@17| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@98| (- |lo#0@@17| 1))) |key#0@@59|))) (=> (<= |hi#0@@17| (|Seq#Length| |s#0@@98|)) (Lexicographic__Byte__Order.__default.lte |key#0@@59| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@98| (- |hi#0@@17| 1))))))))) (and (=> (< (+ |lo#0@@17| 1) |hi#0@@17|) (let ((|mid#0@@3| (Div (+ |lo#0@@17| |hi#0@@17|) (LitInt 2)))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@98| (- |mid#0@@3| 1))) |key#0@@59|) (=> (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@98| (- |mid#0@@3| 1))) |key#0@@59|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@98| |key#0@@59| |mid#0@@3| |hi#0@@17|))) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@98| (- |mid#0@@3| 1))) |key#0@@59|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@98| |key#0@@59| |lo#0@@17| |mid#0@@3|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@404) |s#0@@98| |key#0@@59| |lo#0@@17| |hi#0@@17|) (ite (< (+ |lo#0@@17| 1) |hi#0@@17|) (let ((|mid#0@@4| (Div (+ |lo#0@@17| |hi#0@@17|) (LitInt 2)))) (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@98| (- |mid#0@@4| 1))) |key#0@@59|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@404 |s#0@@98| |key#0@@59| |mid#0@@4| |hi#0@@17|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@404 |s#0@@98| |key#0@@59| |lo#0@@17| |mid#0@@4|))) |lo#0@@17|)))) :qid |totalord.421:12| :skolemid |2276| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@404) |s#0@@98| |key#0@@59| |lo#0@@17| |hi#0@@17|)) ))))
(assert  (=> true (forall (($ly@@405 T@U) (|s#0@@99| T@U) (|key#0@@60| T@U) (|lo#0@@18| Int) (|hi#0@@18| Int) ) (!  (=> (and (and (and (= (type $ly@@405) LayerTypeType) (= (type |s#0@@99|) (SeqType BoxType))) (= (type |key#0@@60|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@99| |key#0@@60| (LitInt |lo#0@@18|) (LitInt |hi#0@@18|)) (and (and ($Is |s#0@@99| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@60| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@18|)) (< |lo#0@@18| |hi#0@@18|)) (<= (LitInt |hi#0@@18|) (+ (|Seq#Length| |s#0@@99|) 1))) (=> (> |lo#0@@18| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@99| (LitInt (- |lo#0@@18| 1)))) |key#0@@60|))) (=> (<= (LitInt |hi#0@@18|) (|Seq#Length| |s#0@@99|)) (Lexicographic__Byte__Order.__default.lte |key#0@@60| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@99| (LitInt (- |hi#0@@18| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@18| 1) |hi#0@@18|)))) (let ((|mid#1@@3| (LitInt (Div (+ |lo#0@@18| |hi#0@@18|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@99| (- |mid#1@@3| 1))) |key#0@@60|) (=> (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@99| (- |mid#1@@3| 1))) |key#0@@60|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@99| |key#0@@60| |mid#1@@3| (LitInt |hi#0@@18|)))) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@99| (- |mid#1@@3| 1))) |key#0@@60|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@99| |key#0@@60| (LitInt |lo#0@@18|) |mid#1@@3|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@405) |s#0@@99| |key#0@@60| (LitInt |lo#0@@18|) (LitInt |hi#0@@18|)) (ite (< (+ |lo#0@@18| 1) |hi#0@@18|) (let ((|mid#1@@4| (LitInt (Div (+ |lo#0@@18| |hi#0@@18|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@99| (LitInt (- |mid#1@@4| 1)))) |key#0@@60|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@405) |s#0@@99| |key#0@@60| |mid#1@@4| (LitInt |hi#0@@18|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@405) |s#0@@99| |key#0@@60| (LitInt |lo#0@@18|) |mid#1@@4|))) |lo#0@@18|)))) :qid |totalord.421:12| :weight 3 :skolemid |2277| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@405) |s#0@@99| |key#0@@60| (LitInt |lo#0@@18|) (LitInt |hi#0@@18|))) ))))
(assert  (=> true (forall (($ly@@406 T@U) (|s#0@@100| T@U) (|key#0@@61| T@U) (|lo#0@@19| Int) (|hi#0@@19| Int) ) (!  (=> (and (and (and (= (type $ly@@406) LayerTypeType) (= (type |s#0@@100|) (SeqType BoxType))) (= (type |key#0@@61|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@100|) (Lit |key#0@@61|) (LitInt |lo#0@@19|) (LitInt |hi#0@@19|)) (and (and ($Is |s#0@@100| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@61| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@19|)) (< |lo#0@@19| |hi#0@@19|)) (<= (LitInt |hi#0@@19|) (+ (|Seq#Length| (Lit |s#0@@100|)) 1))) (=> (> |lo#0@@19| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@100|) (LitInt (- |lo#0@@19| 1)))) (Lit |key#0@@61|)))) (=> (<= (LitInt |hi#0@@19|) (|Seq#Length| (Lit |s#0@@100|))) (Lexicographic__Byte__Order.__default.lte (Lit |key#0@@61|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@100|) (LitInt (- |hi#0@@19| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@19| 1) |hi#0@@19|)))) (let ((|mid#2@@3| (LitInt (Div (+ |lo#0@@19| |hi#0@@19|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@100|) (- |mid#2@@3| 1))) (Lit |key#0@@61|)) (=> (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@100|) (- |mid#2@@3| 1))) (Lit |key#0@@61|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@100|) (Lit |key#0@@61|) |mid#2@@3| (LitInt |hi#0@@19|)))) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@100|) (- |mid#2@@3| 1))) (Lit |key#0@@61|))) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@100|) (Lit |key#0@@61|) (LitInt |lo#0@@19|) |mid#2@@3|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@406) (Lit |s#0@@100|) (Lit |key#0@@61|) (LitInt |lo#0@@19|) (LitInt |hi#0@@19|)) (ite (< (+ |lo#0@@19| 1) |hi#0@@19|) (let ((|mid#2@@4| (LitInt (Div (+ |lo#0@@19| |hi#0@@19|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@100|) (LitInt (- |mid#2@@4| 1)))) (Lit |key#0@@61|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@406) (Lit |s#0@@100|) (Lit |key#0@@61|) |mid#2@@4| (LitInt |hi#0@@19|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@406) (Lit |s#0@@100|) (Lit |key#0@@61|) (LitInt |lo#0@@19|) |mid#2@@4|))) |lo#0@@19|)))) :qid |totalord.421:12| :weight 3 :skolemid |2278| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@406) (Lit |s#0@@100|) (Lit |key#0@@61|) (LitInt |lo#0@@19|) (LitInt |hi#0@@19|))) ))))
(assert (forall (($ly@@407 T@U) (|s#0@@101| T@U) (|key#0@@62| T@U) ) (!  (=> (and (and (= (type $ly@@407) LayerTypeType) (= (type |s#0@@101|) (SeqType BoxType))) (= (type |key#0@@62|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@407) |s#0@@101| |key#0@@62|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@407 |s#0@@101| |key#0@@62|))) :qid |totalord.441:22| :skolemid |2279| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@407) |s#0@@101| |key#0@@62|)) )))
(assert (forall (($ly@@408 T@U) (|s#0@@102| T@U) (|key#0@@63| T@U) ) (!  (=> (and (and (= (type $ly@@408) LayerTypeType) (= (type |s#0@@102|) (SeqType BoxType))) (= (type |key#0@@63|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@408 |s#0@@102| |key#0@@63|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $LZ |s#0@@102| |key#0@@63|))) :qid |totalord.441:22| :skolemid |2280| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte (AsFuelBottom $ly@@408) |s#0@@102| |key#0@@63|)) )))
(assert  (=> true (forall (($ly@@409 T@U) (|s#0@@103| T@U) (|key#0@@64| T@U) ) (!  (=> (and (and (and (= (type $ly@@409) LayerTypeType) (= (type |s#0@@103|) (SeqType BoxType))) (= (type |key#0@@64|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@103| |key#0@@64|) (and ($Is |s#0@@103| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@64| (TSeq Tclass.NativeTypes.byte))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@409 |s#0@@103| |key#0@@64|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@409 |s#0@@103| |key#0@@64|) (|Seq#Length| |s#0@@103|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@409 |s#0@@103| |key#0@@64|) 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@103| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@409 |s#0@@103| |key#0@@64|) 1))) |key#0@@64|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@409 |s#0@@103| |key#0@@64|) (|Seq#Length| |s#0@@103|)) (Lexicographic__Byte__Order.__default.lte |key#0@@64| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@103| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@409 |s#0@@103| |key#0@@64|))))))) :qid |totalord.441:22| :skolemid |2281| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@409 |s#0@@103| |key#0@@64|)) ))))
(assert (forall (($ly@@410 T@U) (|s#0@@104| T@U) (|key#0@@65| T@U) ) (!  (=> (and (and (and (= (type $ly@@410) LayerTypeType) (= (type |s#0@@104|) (SeqType BoxType))) (= (type |key#0@@65|) (SeqType BoxType))) (and ($Is |s#0@@104| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@65| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@410 |s#0@@104| |key#0@@65|) true) (=> true (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@410 |s#0@@104| |key#0@@65|)))) :qid |totalord.441:22| :skolemid |2282| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@410 |s#0@@104| |key#0@@65|)) )))
(assert  (=> true (forall (($ly@@411 T@U) (|s#0@@105| T@U) (|key#0@@66| T@U) ) (!  (=> (and (and (and (= (type $ly@@411) LayerTypeType) (= (type |s#0@@105|) (SeqType BoxType))) (= (type |key#0@@66|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@105| |key#0@@66|) (and ($Is |s#0@@105| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@66| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@105| |key#0@@66| (LitInt 0) (+ (|Seq#Length| |s#0@@105|) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@411) |s#0@@105| |key#0@@66|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) |s#0@@105| |key#0@@66| (LitInt 0) (+ (|Seq#Length| |s#0@@105|) 1))))) :qid |totalord.441:22| :skolemid |2283| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@411) |s#0@@105| |key#0@@66|)) ))))
(assert  (=> true (forall (($ly@@412 T@U) (|s#0@@106| T@U) (|key#0@@67| T@U) ) (!  (=> (and (and (and (= (type $ly@@412) LayerTypeType) (= (type |s#0@@106|) (SeqType BoxType))) (= (type |key#0@@67|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (Lit |s#0@@106|) (Lit |key#0@@67|)) (and ($Is |s#0@@106| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@67| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@106|) (Lit |key#0@@67|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@106|)) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@412) (Lit |s#0@@106|) (Lit |key#0@@67|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) (Lit |s#0@@106|) (Lit |key#0@@67|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@106|)) 1))))) :qid |totalord.441:22| :weight 3 :skolemid |2284| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@412) (Lit |s#0@@106|) (Lit |key#0@@67|))) ))))
(assert (forall (($ly@@413 T@U) (|run#0@@126| T@U) (|needle#0@@55| T@U) ) (!  (=> (and (and (= (type $ly@@413) LayerTypeType) (= (type |run#0@@126|) (SeqType BoxType))) (= (type |needle#0@@55|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@413) |run#0@@126| |needle#0@@55|) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@413 |run#0@@126| |needle#0@@55|))) :qid |totalord.449:12| :skolemid |2285| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@413) |run#0@@126| |needle#0@@55|)) )))
(assert (forall (($ly@@414 T@U) (|run#0@@127| T@U) (|needle#0@@56| T@U) ) (!  (=> (and (and (= (type $ly@@414) LayerTypeType) (= (type |run#0@@127|) (SeqType BoxType))) (= (type |needle#0@@56|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@414 |run#0@@127| |needle#0@@56|) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $LZ |run#0@@127| |needle#0@@56|))) :qid |totalord.449:12| :skolemid |2286| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt (AsFuelBottom $ly@@414) |run#0@@127| |needle#0@@56|)) )))
(assert  (=> true (forall (($ly@@415 T@U) (|run#0@@128| T@U) (|needle#0@@57| T@U) ) (!  (=> (and (and (and (= (type $ly@@415) LayerTypeType) (= (type |run#0@@128|) (SeqType BoxType))) (= (type |needle#0@@57|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@128| |needle#0@@57|) (and (and ($Is |run#0@@128| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@57| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@128|)))) (and (and (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@415 |run#0@@128| |needle#0@@57|) (|Seq#Length| |run#0@@128|)) (forall ((|i#0@@84| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@84|) (< |i#0@@84| (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@415 |run#0@@128| |needle#0@@57|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#0@@84|)) |needle#0@@57|)) :qid |totalord.452:20| :skolemid |2287| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#0@@84|))) ))) (forall ((|i#1@@27| Int) ) (!  (=> (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@415 |run#0@@128| |needle#0@@57|) |i#1@@27|) (< |i#1@@27| (|Seq#Length| |run#0@@128|))) (Lexicographic__Byte__Order.__default.lt |needle#0@@57| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#1@@27|)))) :qid |totalord.453:20| :skolemid |2288| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#1@@27|))) ))) (<= (LitInt 0) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@415 |run#0@@128| |needle#0@@57|)))) :qid |totalord.449:12| :skolemid |2289| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@415 |run#0@@128| |needle#0@@57|)) ))))
(assert (forall (($ly@@416 T@U) (|run#0@@129| T@U) (|needle#0@@58| T@U) ) (!  (=> (and (and (and (= (type $ly@@416) LayerTypeType) (= (type |run#0@@129|) (SeqType BoxType))) (= (type |needle#0@@58|) (SeqType BoxType))) (and ($Is |run#0@@129| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@58| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| $ly@@416 |run#0@@129| |needle#0@@58|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@129|)) (=> (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@129|) (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| $ly@@416 |run#0@@129| |needle#0@@58|)))) :qid |totalord.449:12| :skolemid |2290| :pattern ( (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| $ly@@416 |run#0@@129| |needle#0@@58|)) )))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted6) LayerTypeType))
(assert  (=> true (forall (($ly@@417 T@U) (|run#0@@130| T@U) (|needle#0@@59| T@U) ) (!  (=> (and (and (and (= (type $ly@@417) LayerTypeType) (= (type |run#0@@130|) (SeqType BoxType))) (= (type |needle#0@@59|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@130| |needle#0@@59|) (and (and ($Is |run#0@@130| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@59| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@130|)))) (and (=> (not (= (|Seq#Length| |run#0@@130|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@130|) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@130|)) |needle#0@@59|)) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@130|)) |needle#0@@59|)) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@130|) (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@130|) |needle#0@@59|))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted6)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted6)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted6) MoreFuel_Lexicographic_Byte_Order._default.IsSorted6)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@417) |run#0@@130| |needle#0@@59|) (ite (= (|Seq#Length| |run#0@@130|) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@130|)) |needle#0@@59|) (|Seq#Length| |run#0@@130|) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@417 (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@130|) |needle#0@@59|))))))) :qid |totalord.449:12| :skolemid |2291| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@417) |run#0@@130| |needle#0@@59|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted7) LayerTypeType))
(assert  (=> true (forall (($ly@@418 T@U) (|run#0@@131| T@U) (|needle#0@@60| T@U) ) (!  (=> (and (and (and (= (type $ly@@418) LayerTypeType) (= (type |run#0@@131|) (SeqType BoxType))) (= (type |needle#0@@60|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (Lit |run#0@@131|) (Lit |needle#0@@60|)) (and (and ($Is |run#0@@131| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@60| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@131|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@131|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|)) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|)))) (Lit |needle#0@@60|))) (=> (not (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.lte (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|)))) (Lit |needle#0@@60|)))))) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|)) (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|))) (Lit |needle#0@@60|)))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted7)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted7)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted7) MoreFuel_Lexicographic_Byte_Order._default.IsSorted7)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@418) (Lit |run#0@@131|) (Lit |needle#0@@60|)) (ite (= (|Seq#Length| (Lit |run#0@@131|)) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lte (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|)))) (Lit |needle#0@@60|)) (|Seq#Length| (Lit |run#0@@131|)) (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@418) (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@131|))) (Lit |needle#0@@60|)))))))) :qid |totalord.449:12| :weight 3 :skolemid |2292| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@418) (Lit |run#0@@131|) (Lit |needle#0@@60|))) ))))
(assert (forall (($ly@@419 T@U) (|s#0@@107| T@U) (|key#0@@68| T@U) (|lo#0@@20| Int) (|hi#0@@20| Int) ) (!  (=> (and (and (= (type $ly@@419) LayerTypeType) (= (type |s#0@@107|) (SeqType BoxType))) (= (type |key#0@@68|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@419) |s#0@@107| |key#0@@68| |lo#0@@20| |hi#0@@20|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@419 |s#0@@107| |key#0@@68| |lo#0@@20| |hi#0@@20|))) :qid |totalord.482:12| :skolemid |2293| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@419) |s#0@@107| |key#0@@68| |lo#0@@20| |hi#0@@20|)) )))
(assert (forall (($ly@@420 T@U) (|s#0@@108| T@U) (|key#0@@69| T@U) (|lo#0@@21| Int) (|hi#0@@21| Int) ) (!  (=> (and (and (= (type $ly@@420) LayerTypeType) (= (type |s#0@@108|) (SeqType BoxType))) (= (type |key#0@@69|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@420 |s#0@@108| |key#0@@69| |lo#0@@21| |hi#0@@21|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $LZ |s#0@@108| |key#0@@69| |lo#0@@21| |hi#0@@21|))) :qid |totalord.482:12| :skolemid |2294| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (AsFuelBottom $ly@@420) |s#0@@108| |key#0@@69| |lo#0@@21| |hi#0@@21|)) )))
(assert  (=> true (forall (($ly@@421 T@U) (|s#0@@109| T@U) (|key#0@@70| T@U) (|lo#0@@22| Int) (|hi#0@@22| Int) ) (!  (=> (and (and (and (= (type $ly@@421) LayerTypeType) (= (type |s#0@@109|) (SeqType BoxType))) (= (type |key#0@@70|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@109| |key#0@@70| |lo#0@@22| |hi#0@@22|) (and (and ($Is |s#0@@109| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@70| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@22|) (< |lo#0@@22| |hi#0@@22|)) (<= |hi#0@@22| (+ (|Seq#Length| |s#0@@109|) 1))) (=> (> |lo#0@@22| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@109| (- |lo#0@@22| 1))) |key#0@@70|))) (=> (<= |hi#0@@22| (|Seq#Length| |s#0@@109|)) (Lexicographic__Byte__Order.__default.lt |key#0@@70| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@109| (- |hi#0@@22| 1))))))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@421 |s#0@@109| |key#0@@70| |lo#0@@22| |hi#0@@22|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@421 |s#0@@109| |key#0@@70| |lo#0@@22| |hi#0@@22|) (|Seq#Length| |s#0@@109|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@421 |s#0@@109| |key#0@@70| |lo#0@@22| |hi#0@@22|) 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@109| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@421 |s#0@@109| |key#0@@70| |lo#0@@22| |hi#0@@22|) 1))) |key#0@@70|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@421 |s#0@@109| |key#0@@70| |lo#0@@22| |hi#0@@22|) (|Seq#Length| |s#0@@109|)) (Lexicographic__Byte__Order.__default.lt |key#0@@70| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@109| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@421 |s#0@@109| |key#0@@70| |lo#0@@22| |hi#0@@22|))))))) :qid |totalord.482:12| :skolemid |2295| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@421 |s#0@@109| |key#0@@70| |lo#0@@22| |hi#0@@22|)) ))))
(assert (forall (($ly@@422 T@U) (|s#0@@110| T@U) (|key#0@@71| T@U) (|lo#0@@23| Int) (|hi#0@@23| Int) ) (!  (=> (and (and (and (= (type $ly@@422) LayerTypeType) (= (type |s#0@@110|) (SeqType BoxType))) (= (type |key#0@@71|) (SeqType BoxType))) (and ($Is |s#0@@110| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@71| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@422 |s#0@@110| |key#0@@71| |lo#0@@23| |hi#0@@23|) (and (and (and (and (<= (LitInt 0) |lo#0@@23|) (< |lo#0@@23| |hi#0@@23|)) (<= |hi#0@@23| (+ (|Seq#Length| |s#0@@110|) 1))) (=> (> |lo#0@@23| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@110| (- |lo#0@@23| 1))) |key#0@@71|))) (=> (<= |hi#0@@23| (|Seq#Length| |s#0@@110|)) (Lexicographic__Byte__Order.__default.lt |key#0@@71| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@110| (- |hi#0@@23| 1))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@23|) (< |lo#0@@23| |hi#0@@23|)) (<= |hi#0@@23| (+ (|Seq#Length| |s#0@@110|) 1))) (=> (> |lo#0@@23| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@110| (- |lo#0@@23| 1))) |key#0@@71|))) (=> (<= |hi#0@@23| (|Seq#Length| |s#0@@110|)) (Lexicographic__Byte__Order.__default.lt |key#0@@71| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@110| (- |hi#0@@23| 1)))))) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@422 |s#0@@110| |key#0@@71| |lo#0@@23| |hi#0@@23|)))) :qid |totalord.482:12| :skolemid |2296| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@422 |s#0@@110| |key#0@@71| |lo#0@@23| |hi#0@@23|)) )))
(assert  (=> true (forall (($ly@@423 T@U) (|s#0@@111| T@U) (|key#0@@72| T@U) (|lo#0@@24| Int) (|hi#0@@24| Int) ) (!  (=> (and (and (and (= (type $ly@@423) LayerTypeType) (= (type |s#0@@111|) (SeqType BoxType))) (= (type |key#0@@72|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@111| |key#0@@72| |lo#0@@24| |hi#0@@24|) (and (and ($Is |s#0@@111| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@72| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@24|) (< |lo#0@@24| |hi#0@@24|)) (<= |hi#0@@24| (+ (|Seq#Length| |s#0@@111|) 1))) (=> (> |lo#0@@24| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@111| (- |lo#0@@24| 1))) |key#0@@72|))) (=> (<= |hi#0@@24| (|Seq#Length| |s#0@@111|)) (Lexicographic__Byte__Order.__default.lt |key#0@@72| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@111| (- |hi#0@@24| 1))))))))) (and (=> (< (+ |lo#0@@24| 1) |hi#0@@24|) (let ((|mid#0@@5| (Div (+ |lo#0@@24| |hi#0@@24|) (LitInt 2)))) (and (and (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@111| (- |mid#0@@5| 1))) |key#0@@72|) (=> (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@111| (- |mid#0@@5| 1))) |key#0@@72|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@111| |key#0@@72| |mid#0@@5| |hi#0@@24|))) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@111| (- |mid#0@@5| 1))) |key#0@@72|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@111| |key#0@@72| |lo#0@@24| |mid#0@@5|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@423) |s#0@@111| |key#0@@72| |lo#0@@24| |hi#0@@24|) (ite (< (+ |lo#0@@24| 1) |hi#0@@24|) (let ((|mid#0@@6| (Div (+ |lo#0@@24| |hi#0@@24|) (LitInt 2)))) (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@111| (- |mid#0@@6| 1))) |key#0@@72|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@423 |s#0@@111| |key#0@@72| |mid#0@@6| |hi#0@@24|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@423 |s#0@@111| |key#0@@72| |lo#0@@24| |mid#0@@6|))) |lo#0@@24|)))) :qid |totalord.482:12| :skolemid |2297| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@423) |s#0@@111| |key#0@@72| |lo#0@@24| |hi#0@@24|)) ))))
(assert  (=> true (forall (($ly@@424 T@U) (|s#0@@112| T@U) (|key#0@@73| T@U) (|lo#0@@25| Int) (|hi#0@@25| Int) ) (!  (=> (and (and (and (= (type $ly@@424) LayerTypeType) (= (type |s#0@@112|) (SeqType BoxType))) (= (type |key#0@@73|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@112| |key#0@@73| (LitInt |lo#0@@25|) (LitInt |hi#0@@25|)) (and (and ($Is |s#0@@112| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@73| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@25|)) (< |lo#0@@25| |hi#0@@25|)) (<= (LitInt |hi#0@@25|) (+ (|Seq#Length| |s#0@@112|) 1))) (=> (> |lo#0@@25| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@112| (LitInt (- |lo#0@@25| 1)))) |key#0@@73|))) (=> (<= (LitInt |hi#0@@25|) (|Seq#Length| |s#0@@112|)) (Lexicographic__Byte__Order.__default.lt |key#0@@73| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@112| (LitInt (- |hi#0@@25| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@25| 1) |hi#0@@25|)))) (let ((|mid#1@@5| (LitInt (Div (+ |lo#0@@25| |hi#0@@25|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@112| (- |mid#1@@5| 1))) |key#0@@73|) (=> (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@112| (- |mid#1@@5| 1))) |key#0@@73|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@112| |key#0@@73| |mid#1@@5| (LitInt |hi#0@@25|)))) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@112| (- |mid#1@@5| 1))) |key#0@@73|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@112| |key#0@@73| (LitInt |lo#0@@25|) |mid#1@@5|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@424) |s#0@@112| |key#0@@73| (LitInt |lo#0@@25|) (LitInt |hi#0@@25|)) (ite (< (+ |lo#0@@25| 1) |hi#0@@25|) (let ((|mid#1@@6| (LitInt (Div (+ |lo#0@@25| |hi#0@@25|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@112| (LitInt (- |mid#1@@6| 1)))) |key#0@@73|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@424) |s#0@@112| |key#0@@73| |mid#1@@6| (LitInt |hi#0@@25|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@424) |s#0@@112| |key#0@@73| (LitInt |lo#0@@25|) |mid#1@@6|))) |lo#0@@25|)))) :qid |totalord.482:12| :weight 3 :skolemid |2298| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@424) |s#0@@112| |key#0@@73| (LitInt |lo#0@@25|) (LitInt |hi#0@@25|))) ))))
(assert  (=> true (forall (($ly@@425 T@U) (|s#0@@113| T@U) (|key#0@@74| T@U) (|lo#0@@26| Int) (|hi#0@@26| Int) ) (!  (=> (and (and (and (= (type $ly@@425) LayerTypeType) (= (type |s#0@@113|) (SeqType BoxType))) (= (type |key#0@@74|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@113|) (Lit |key#0@@74|) (LitInt |lo#0@@26|) (LitInt |hi#0@@26|)) (and (and ($Is |s#0@@113| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@74| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@26|)) (< |lo#0@@26| |hi#0@@26|)) (<= (LitInt |hi#0@@26|) (+ (|Seq#Length| (Lit |s#0@@113|)) 1))) (=> (> |lo#0@@26| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@113|) (LitInt (- |lo#0@@26| 1)))) (Lit |key#0@@74|)))) (=> (<= (LitInt |hi#0@@26|) (|Seq#Length| (Lit |s#0@@113|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@74|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@113|) (LitInt (- |hi#0@@26| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@26| 1) |hi#0@@26|)))) (let ((|mid#2@@5| (LitInt (Div (+ |lo#0@@26| |hi#0@@26|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@113|) (- |mid#2@@5| 1))) (Lit |key#0@@74|)) (=> (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@113|) (- |mid#2@@5| 1))) (Lit |key#0@@74|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@113|) (Lit |key#0@@74|) |mid#2@@5| (LitInt |hi#0@@26|)))) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@113|) (- |mid#2@@5| 1))) (Lit |key#0@@74|))) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@113|) (Lit |key#0@@74|) (LitInt |lo#0@@26|) |mid#2@@5|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@425) (Lit |s#0@@113|) (Lit |key#0@@74|) (LitInt |lo#0@@26|) (LitInt |hi#0@@26|)) (ite (< (+ |lo#0@@26| 1) |hi#0@@26|) (let ((|mid#2@@6| (LitInt (Div (+ |lo#0@@26| |hi#0@@26|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@113|) (LitInt (- |mid#2@@6| 1)))) (Lit |key#0@@74|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@425) (Lit |s#0@@113|) (Lit |key#0@@74|) |mid#2@@6| (LitInt |hi#0@@26|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@425) (Lit |s#0@@113|) (Lit |key#0@@74|) (LitInt |lo#0@@26|) |mid#2@@6|))) |lo#0@@26|)))) :qid |totalord.482:12| :weight 3 :skolemid |2299| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@425) (Lit |s#0@@113|) (Lit |key#0@@74|) (LitInt |lo#0@@26|) (LitInt |hi#0@@26|))) ))))
(assert (forall (($ly@@426 T@U) (|s#0@@114| T@U) (|key#0@@75| T@U) ) (!  (=> (and (and (= (type $ly@@426) LayerTypeType) (= (type |s#0@@114|) (SeqType BoxType))) (= (type |key#0@@75|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@426) |s#0@@114| |key#0@@75|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@426 |s#0@@114| |key#0@@75|))) :qid |totalord.502:22| :skolemid |2300| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@426) |s#0@@114| |key#0@@75|)) )))
(assert (forall (($ly@@427 T@U) (|s#0@@115| T@U) (|key#0@@76| T@U) ) (!  (=> (and (and (= (type $ly@@427) LayerTypeType) (= (type |s#0@@115|) (SeqType BoxType))) (= (type |key#0@@76|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@427 |s#0@@115| |key#0@@76|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $LZ |s#0@@115| |key#0@@76|))) :qid |totalord.502:22| :skolemid |2301| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt (AsFuelBottom $ly@@427) |s#0@@115| |key#0@@76|)) )))
(assert  (=> true (forall (($ly@@428 T@U) (|s#0@@116| T@U) (|key#0@@77| T@U) ) (!  (=> (and (and (and (= (type $ly@@428) LayerTypeType) (= (type |s#0@@116|) (SeqType BoxType))) (= (type |key#0@@77|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@116| |key#0@@77|) (and ($Is |s#0@@116| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@77| (TSeq Tclass.NativeTypes.byte))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@428 |s#0@@116| |key#0@@77|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@428 |s#0@@116| |key#0@@77|) (|Seq#Length| |s#0@@116|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@428 |s#0@@116| |key#0@@77|) 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@116| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@428 |s#0@@116| |key#0@@77|) 1))) |key#0@@77|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@428 |s#0@@116| |key#0@@77|) (|Seq#Length| |s#0@@116|)) (Lexicographic__Byte__Order.__default.lt |key#0@@77| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@116| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@428 |s#0@@116| |key#0@@77|))))))) :qid |totalord.502:22| :skolemid |2302| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@428 |s#0@@116| |key#0@@77|)) ))))
(assert (forall (($ly@@429 T@U) (|s#0@@117| T@U) (|key#0@@78| T@U) ) (!  (=> (and (and (and (= (type $ly@@429) LayerTypeType) (= (type |s#0@@117|) (SeqType BoxType))) (= (type |key#0@@78|) (SeqType BoxType))) (and ($Is |s#0@@117| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@78| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@429 |s#0@@117| |key#0@@78|) true) (=> true (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@429 |s#0@@117| |key#0@@78|)))) :qid |totalord.502:22| :skolemid |2303| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@429 |s#0@@117| |key#0@@78|)) )))
(assert  (=> true (forall (($ly@@430 T@U) (|s#0@@118| T@U) (|key#0@@79| T@U) ) (!  (=> (and (and (and (= (type $ly@@430) LayerTypeType) (= (type |s#0@@118|) (SeqType BoxType))) (= (type |key#0@@79|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@118| |key#0@@79|) (and ($Is |s#0@@118| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@79| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@118| |key#0@@79| (LitInt 0) (+ (|Seq#Length| |s#0@@118|) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@430) |s#0@@118| |key#0@@79|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) |s#0@@118| |key#0@@79| (LitInt 0) (+ (|Seq#Length| |s#0@@118|) 1))))) :qid |totalord.502:22| :skolemid |2304| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@430) |s#0@@118| |key#0@@79|)) ))))
(assert  (=> true (forall (($ly@@431 T@U) (|s#0@@119| T@U) (|key#0@@80| T@U) ) (!  (=> (and (and (and (= (type $ly@@431) LayerTypeType) (= (type |s#0@@119|) (SeqType BoxType))) (= (type |key#0@@80|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (Lit |s#0@@119|) (Lit |key#0@@80|)) (and ($Is |s#0@@119| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@80| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@119|) (Lit |key#0@@80|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@119|)) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@431) (Lit |s#0@@119|) (Lit |key#0@@80|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) (Lit |s#0@@119|) (Lit |key#0@@80|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@119|)) 1))))) :qid |totalord.502:22| :weight 3 :skolemid |2305| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@431) (Lit |s#0@@119|) (Lit |key#0@@80|))) ))))
(assert  (=> true (forall ((|a#0@@133| T@U) (|b#0@@104| T@U) ) (!  (=> (and (and (= (type |a#0@@133|) (MapType0Type BoxType boolType)) (= (type |b#0@@104|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLte#canCall| |a#0@@133| |b#0@@104|) (and ($Is |a#0@@133| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@104| (TSet (TSeq Tclass.NativeTypes.byte)))))) true) :qid |totalord.675:23| :skolemid |2306| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLte |a#0@@133| |b#0@@104|)) ))))
(assert (forall ((|a#0@@134| T@U) (|b#0@@105| T@U) ) (!  (=> (and (and (= (type |a#0@@134|) (MapType0Type BoxType boolType)) (= (type |b#0@@105|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@134| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@105| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (|Lexicographic__Byte__Order.__default.SetAllLte#requires| |a#0@@134| |b#0@@105|) true) (=> true (|Lexicographic__Byte__Order.__default.SetAllLte#requires| |a#0@@134| |b#0@@105|)))) :qid |totalord.675:23| :skolemid |2307| :pattern ( (|Lexicographic__Byte__Order.__default.SetAllLte#requires| |a#0@@134| |b#0@@105|)) )))
(assert  (=> true (forall ((|a#0@@135| T@U) (|b#0@@106| T@U) ) (!  (=> (and (and (= (type |a#0@@135|) (MapType0Type BoxType boolType)) (= (type |b#0@@106|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLte#canCall| |a#0@@135| |b#0@@106|) (and ($Is |a#0@@135| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@106| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#0@@7| T@U) (|y#0@@9| T@U) ) (!  (=> (and (and (and (= (type |x#0@@7|) (SeqType BoxType)) (= (type |y#0@@9|) (SeqType BoxType))) (and ($Is |x#0@@7| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@9| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select |b#0@@106| ($Box |y#0@@9|)))) (|Lexicographic__Byte__Order.__default.lte#canCall| |x#0@@7| |y#0@@9|)) :qid |totalord.676:12| :skolemid |2308| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#0@@7| |y#0@@9|)) :pattern ( (MapType0Select |b#0@@106| ($Box |y#0@@9|)) (MapType0Select |a#0@@135| ($Box |x#0@@7|))) )) (and (=> (Lexicographic__Byte__Order.__default.SetAllLte |a#0@@135| |b#0@@106|) (forall ((|x#0@@8| T@U) (|y#0@@10| T@U) ) (!  (=> (and (and (and (= (type |x#0@@8|) (SeqType BoxType)) (= (type |y#0@@10|) (SeqType BoxType))) (and ($Is |x#0@@8| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@10| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select |a#0@@135| ($Box |x#0@@8|))) (U_2_bool (MapType0Select |b#0@@106| ($Box |y#0@@10|))))) (Lexicographic__Byte__Order.__default.lte |x#0@@8| |y#0@@10|)) :qid |totalord.676:12| :skolemid |2309| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#0@@8| |y#0@@10|)) :pattern ( (MapType0Select |b#0@@106| ($Box |y#0@@10|)) (MapType0Select |a#0@@135| ($Box |x#0@@8|))) ))) (=> (forall ((|x#0@@9| T@U) (|y#0@@11| T@U) ) (!  (=> (and (and (and (= (type |x#0@@9|) (SeqType BoxType)) (= (type |y#0@@11|) (SeqType BoxType))) (and ($Is |x#0@@9| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@11| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select |a#0@@135| ($Box |x#0@@9|))) (U_2_bool (MapType0Select |b#0@@106| ($Box |y#0@@11|))))) (Lexicographic__Byte__Order.__default.lte |x#0@@9| |y#0@@11|)) :qid |totalord.676:12| :skolemid |2309| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#0@@9| |y#0@@11|)) :pattern ( (MapType0Select |b#0@@106| ($Box |y#0@@11|)) (MapType0Select |a#0@@135| ($Box |x#0@@9|))) )) (Lexicographic__Byte__Order.__default.SetAllLte |a#0@@135| |b#0@@106|))))) :qid |totalord.675:23| :skolemid |2310| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLte |a#0@@135| |b#0@@106|)) ))))
(assert  (=> true (forall ((|a#0@@136| T@U) (|b#0@@107| T@U) ) (!  (=> (and (and (= (type |a#0@@136|) (MapType0Type BoxType boolType)) (= (type |b#0@@107|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLte#canCall| (Lit |a#0@@136|) (Lit |b#0@@107|)) (and ($Is |a#0@@136| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@107| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#1@@5| T@U) (|y#1@@5| T@U) ) (!  (=> (and (and (and (= (type |x#1@@5|) (SeqType BoxType)) (= (type |y#1@@5|) (SeqType BoxType))) (and ($Is |x#1@@5| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@5| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select (Lit |b#0@@107|) ($Box |y#1@@5|)))) (|Lexicographic__Byte__Order.__default.lte#canCall| |x#1@@5| |y#1@@5|)) :qid |totalord.676:12| :skolemid |2311| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#1@@5| |y#1@@5|)) :pattern ( (MapType0Select |b#0@@107| ($Box |y#1@@5|)) (MapType0Select |a#0@@136| ($Box |x#1@@5|))) )) (and (=> (Lexicographic__Byte__Order.__default.SetAllLte (Lit |a#0@@136|) (Lit |b#0@@107|)) (forall ((|x#1@@6| T@U) (|y#1@@6| T@U) ) (!  (=> (and (and (and (= (type |x#1@@6|) (SeqType BoxType)) (= (type |y#1@@6|) (SeqType BoxType))) (and ($Is |x#1@@6| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@6| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select (Lit |a#0@@136|) ($Box |x#1@@6|))) (U_2_bool (MapType0Select (Lit |b#0@@107|) ($Box |y#1@@6|))))) (Lexicographic__Byte__Order.__default.lte |x#1@@6| |y#1@@6|)) :qid |totalord.676:12| :skolemid |2312| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#1@@6| |y#1@@6|)) :pattern ( (MapType0Select |b#0@@107| ($Box |y#1@@6|)) (MapType0Select |a#0@@136| ($Box |x#1@@6|))) ))) (=> (forall ((|x#1@@7| T@U) (|y#1@@7| T@U) ) (!  (=> (and (and (and (= (type |x#1@@7|) (SeqType BoxType)) (= (type |y#1@@7|) (SeqType BoxType))) (and ($Is |x#1@@7| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@7| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select (Lit |a#0@@136|) ($Box |x#1@@7|))) (U_2_bool (MapType0Select (Lit |b#0@@107|) ($Box |y#1@@7|))))) (Lexicographic__Byte__Order.__default.lte |x#1@@7| |y#1@@7|)) :qid |totalord.676:12| :skolemid |2312| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#1@@7| |y#1@@7|)) :pattern ( (MapType0Select |b#0@@107| ($Box |y#1@@7|)) (MapType0Select |a#0@@136| ($Box |x#1@@7|))) )) (Lexicographic__Byte__Order.__default.SetAllLte (Lit |a#0@@136|) (Lit |b#0@@107|)))))) :qid |totalord.675:23| :weight 3 :skolemid |2313| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLte (Lit |a#0@@136|) (Lit |b#0@@107|))) ))))
(assert  (=> true (forall ((|a#0@@137| T@U) (|b#0@@108| T@U) ) (!  (=> (and (and (= (type |a#0@@137|) (MapType0Type BoxType boolType)) (= (type |b#0@@108|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLt#canCall| |a#0@@137| |b#0@@108|) (and ($Is |a#0@@137| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@108| (TSet (TSeq Tclass.NativeTypes.byte)))))) true) :qid |totalord.679:22| :skolemid |2314| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLt |a#0@@137| |b#0@@108|)) ))))
(assert (forall ((|a#0@@138| T@U) (|b#0@@109| T@U) ) (!  (=> (and (and (= (type |a#0@@138|) (MapType0Type BoxType boolType)) (= (type |b#0@@109|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@138| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@109| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (|Lexicographic__Byte__Order.__default.SetAllLt#requires| |a#0@@138| |b#0@@109|) true) (=> true (|Lexicographic__Byte__Order.__default.SetAllLt#requires| |a#0@@138| |b#0@@109|)))) :qid |totalord.679:22| :skolemid |2315| :pattern ( (|Lexicographic__Byte__Order.__default.SetAllLt#requires| |a#0@@138| |b#0@@109|)) )))
(assert  (=> true (forall ((|a#0@@139| T@U) (|b#0@@110| T@U) ) (!  (=> (and (and (= (type |a#0@@139|) (MapType0Type BoxType boolType)) (= (type |b#0@@110|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLt#canCall| |a#0@@139| |b#0@@110|) (and ($Is |a#0@@139| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@110| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#0@@10| T@U) (|y#0@@12| T@U) ) (!  (=> (and (and (and (= (type |x#0@@10|) (SeqType BoxType)) (= (type |y#0@@12|) (SeqType BoxType))) (and ($Is |x#0@@10| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@12| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select |b#0@@110| ($Box |y#0@@12|)))) (|Lexicographic__Byte__Order.__default.lt#canCall| |x#0@@10| |y#0@@12|)) :qid |totalord.680:12| :skolemid |2316| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#0@@10| |y#0@@12|)) :pattern ( (MapType0Select |b#0@@110| ($Box |y#0@@12|)) (MapType0Select |a#0@@139| ($Box |x#0@@10|))) )) (and (=> (Lexicographic__Byte__Order.__default.SetAllLt |a#0@@139| |b#0@@110|) (forall ((|x#0@@11| T@U) (|y#0@@13| T@U) ) (!  (=> (and (and (and (= (type |x#0@@11|) (SeqType BoxType)) (= (type |y#0@@13|) (SeqType BoxType))) (and ($Is |x#0@@11| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@13| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select |a#0@@139| ($Box |x#0@@11|))) (U_2_bool (MapType0Select |b#0@@110| ($Box |y#0@@13|))))) (Lexicographic__Byte__Order.__default.lt |x#0@@11| |y#0@@13|)) :qid |totalord.680:12| :skolemid |2317| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#0@@11| |y#0@@13|)) :pattern ( (MapType0Select |b#0@@110| ($Box |y#0@@13|)) (MapType0Select |a#0@@139| ($Box |x#0@@11|))) ))) (=> (forall ((|x#0@@12| T@U) (|y#0@@14| T@U) ) (!  (=> (and (and (and (= (type |x#0@@12|) (SeqType BoxType)) (= (type |y#0@@14|) (SeqType BoxType))) (and ($Is |x#0@@12| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@14| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select |a#0@@139| ($Box |x#0@@12|))) (U_2_bool (MapType0Select |b#0@@110| ($Box |y#0@@14|))))) (Lexicographic__Byte__Order.__default.lt |x#0@@12| |y#0@@14|)) :qid |totalord.680:12| :skolemid |2317| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#0@@12| |y#0@@14|)) :pattern ( (MapType0Select |b#0@@110| ($Box |y#0@@14|)) (MapType0Select |a#0@@139| ($Box |x#0@@12|))) )) (Lexicographic__Byte__Order.__default.SetAllLt |a#0@@139| |b#0@@110|))))) :qid |totalord.679:22| :skolemid |2318| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLt |a#0@@139| |b#0@@110|)) ))))
(assert  (=> true (forall ((|a#0@@140| T@U) (|b#0@@111| T@U) ) (!  (=> (and (and (= (type |a#0@@140|) (MapType0Type BoxType boolType)) (= (type |b#0@@111|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLt#canCall| (Lit |a#0@@140|) (Lit |b#0@@111|)) (and ($Is |a#0@@140| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@111| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#1@@8| T@U) (|y#1@@8| T@U) ) (!  (=> (and (and (and (= (type |x#1@@8|) (SeqType BoxType)) (= (type |y#1@@8|) (SeqType BoxType))) (and ($Is |x#1@@8| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@8| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select (Lit |b#0@@111|) ($Box |y#1@@8|)))) (|Lexicographic__Byte__Order.__default.lt#canCall| |x#1@@8| |y#1@@8|)) :qid |totalord.680:12| :skolemid |2319| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#1@@8| |y#1@@8|)) :pattern ( (MapType0Select |b#0@@111| ($Box |y#1@@8|)) (MapType0Select |a#0@@140| ($Box |x#1@@8|))) )) (and (=> (Lexicographic__Byte__Order.__default.SetAllLt (Lit |a#0@@140|) (Lit |b#0@@111|)) (forall ((|x#1@@9| T@U) (|y#1@@9| T@U) ) (!  (=> (and (and (and (= (type |x#1@@9|) (SeqType BoxType)) (= (type |y#1@@9|) (SeqType BoxType))) (and ($Is |x#1@@9| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@9| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select (Lit |a#0@@140|) ($Box |x#1@@9|))) (U_2_bool (MapType0Select (Lit |b#0@@111|) ($Box |y#1@@9|))))) (Lexicographic__Byte__Order.__default.lt |x#1@@9| |y#1@@9|)) :qid |totalord.680:12| :skolemid |2320| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#1@@9| |y#1@@9|)) :pattern ( (MapType0Select |b#0@@111| ($Box |y#1@@9|)) (MapType0Select |a#0@@140| ($Box |x#1@@9|))) ))) (=> (forall ((|x#1@@10| T@U) (|y#1@@10| T@U) ) (!  (=> (and (and (and (= (type |x#1@@10|) (SeqType BoxType)) (= (type |y#1@@10|) (SeqType BoxType))) (and ($Is |x#1@@10| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@10| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select (Lit |a#0@@140|) ($Box |x#1@@10|))) (U_2_bool (MapType0Select (Lit |b#0@@111|) ($Box |y#1@@10|))))) (Lexicographic__Byte__Order.__default.lt |x#1@@10| |y#1@@10|)) :qid |totalord.680:12| :skolemid |2320| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#1@@10| |y#1@@10|)) :pattern ( (MapType0Select |b#0@@111| ($Box |y#1@@10|)) (MapType0Select |a#0@@140| ($Box |x#1@@10|))) )) (Lexicographic__Byte__Order.__default.SetAllLt (Lit |a#0@@140|) (Lit |b#0@@111|)))))) :qid |totalord.679:22| :weight 3 :skolemid |2321| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLt (Lit |a#0@@140|) (Lit |b#0@@111|))) ))))
(assert (forall (($ly@@432 T@U) (|a#0@@141| T@U) ) (!  (=> (and (= (type $ly@@432) LayerTypeType) (= (type |a#0@@141|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@432) |a#0@@141|) (Lexicographic__Byte__Order.__default.NotMinimum $ly@@432 |a#0@@141|)) (=> (Lexicographic__Byte__Order.__default.NotMinimum $ly@@432 |a#0@@141|) (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@432) |a#0@@141|)))) :qid |totalord.696:23| :skolemid |2322| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@432) |a#0@@141|)) )))
(assert (forall (($ly@@433 T@U) (|a#0@@142| T@U) ) (!  (=> (and (= (type $ly@@433) LayerTypeType) (= (type |a#0@@142|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.NotMinimum $ly@@433 |a#0@@142|) (Lexicographic__Byte__Order.__default.NotMinimum $LZ |a#0@@142|)) (=> (Lexicographic__Byte__Order.__default.NotMinimum $LZ |a#0@@142|) (Lexicographic__Byte__Order.__default.NotMinimum $ly@@433 |a#0@@142|)))) :qid |totalord.696:23| :skolemid |2323| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum (AsFuelBottom $ly@@433) |a#0@@142|)) )))
(assert  (=> true (forall (($ly@@434 T@U) (|a#0@@143| T@U) ) (!  (=> (and (and (= (type $ly@@434) LayerTypeType) (= (type |a#0@@143|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| |a#0@@143|) ($Is |a#0@@143| (TSeq Tclass.NativeTypes.byte)))) true) :qid |totalord.696:23| :skolemid |2324| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum $ly@@434 |a#0@@143|)) ))))
(assert (forall (($ly@@435 T@U) (|a#0@@144| T@U) ) (!  (=> (and (and (= (type $ly@@435) LayerTypeType) (= (type |a#0@@144|) (SeqType BoxType))) ($Is |a#0@@144| (TSeq Tclass.NativeTypes.byte))) (and (=> (|Lexicographic__Byte__Order.__default.NotMinimum#requires| $ly@@435 |a#0@@144|) true) (=> true (|Lexicographic__Byte__Order.__default.NotMinimum#requires| $ly@@435 |a#0@@144|)))) :qid |totalord.696:23| :skolemid |2325| :pattern ( (|Lexicographic__Byte__Order.__default.NotMinimum#requires| $ly@@435 |a#0@@144|)) )))
(assert  (=> true (forall (($ly@@436 T@U) (|a#0@@145| T@U) ) (!  (=> (and (and (= (type $ly@@436) LayerTypeType) (= (type |a#0@@145|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| |a#0@@145|) ($Is |a#0@@145| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|b#0@@112| T@U) ) (!  (=> (and (= (type |b#0@@112|) (SeqType BoxType)) ($Is |b#0@@112| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |b#0@@112| |a#0@@145|)) :qid |totalord.697:12| :skolemid |2326| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#0@@112| |a#0@@145|)) )) (and (=> (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@436) |a#0@@145|) (exists ((|b#0@@113| T@U) ) (!  (and (= (type |b#0@@113|) (SeqType BoxType)) (and ($Is |b#0@@113| (TSeq Tclass.NativeTypes.byte)) (Lexicographic__Byte__Order.__default.lt |b#0@@113| |a#0@@145|))) :qid |totalord.697:12| :skolemid |2327| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#0@@113| |a#0@@145|)) ))) (=> (exists ((|b#0@@114| T@U) ) (!  (and (= (type |b#0@@114|) (SeqType BoxType)) (and ($Is |b#0@@114| (TSeq Tclass.NativeTypes.byte)) (Lexicographic__Byte__Order.__default.lt |b#0@@114| |a#0@@145|))) :qid |totalord.697:12| :skolemid |2327| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#0@@114| |a#0@@145|)) )) (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@436) |a#0@@145|))))) :qid |totalord.696:23| :skolemid |2328| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@436) |a#0@@145|)) ))))
(assert  (=> true (forall (($ly@@437 T@U) (|a#0@@146| T@U) ) (!  (=> (and (and (= (type $ly@@437) LayerTypeType) (= (type |a#0@@146|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| (Lit |a#0@@146|)) ($Is |a#0@@146| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|b#1@@7| T@U) ) (!  (=> (and (= (type |b#1@@7|) (SeqType BoxType)) ($Is |b#1@@7| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |b#1@@7| (Lit |a#0@@146|))) :qid |totalord.697:12| :skolemid |2329| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#1@@7| |a#0@@146|)) )) (and (=> (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@437) (Lit |a#0@@146|)) (exists ((|b#1@@8| T@U) ) (!  (and (= (type |b#1@@8|) (SeqType BoxType)) (and ($Is |b#1@@8| (TSeq Tclass.NativeTypes.byte)) (Lexicographic__Byte__Order.__default.lt |b#1@@8| (Lit |a#0@@146|)))) :qid |totalord.697:12| :skolemid |2330| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#1@@8| |a#0@@146|)) ))) (=> (exists ((|b#1@@9| T@U) ) (!  (and (= (type |b#1@@9|) (SeqType BoxType)) (and ($Is |b#1@@9| (TSeq Tclass.NativeTypes.byte)) (Lexicographic__Byte__Order.__default.lt |b#1@@9| (Lit |a#0@@146|)))) :qid |totalord.697:12| :skolemid |2330| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#1@@9| |a#0@@146|)) )) (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@437) (Lit |a#0@@146|)))))) :qid |totalord.696:23| :weight 3 :skolemid |2331| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@437) (Lit |a#0@@146|))) ))))
(assert (forall ((arg0@@304 T@U) (arg1@@178 T@U) (arg2@@120 T@U) (arg3@@84 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.MapPivotedUnion arg0@@304 arg1@@178 arg2@@120 arg3@@84)) (MapType BoxType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.MapPivotedUnion| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion arg0@@304 arg1@@178 arg2@@120 arg3@@84)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value T@U) (|left#0@@3| T@U) (|pivot#0@@3| T@U) (|right#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value) TyType) (= (type |left#0@@3|) (MapType BoxType BoxType))) (= (type |pivot#0@@3|) (SeqType BoxType))) (= (type |right#0@@3|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| Lexicographic_Byte_Order._default.MapPivotedUnion$Value |left#0@@3| |pivot#0@@3| |right#0@@3|) (and (and ($Is |left#0@@3| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value)) ($Is |pivot#0@@3| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@3| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value))))) ($Is (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value |left#0@@3| |pivot#0@@3| |right#0@@3|) (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value))) :qid |unknown.0:0| :skolemid |2332| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value |left#0@@3| |pivot#0@@3| |right#0@@3|)) ))))
(assert (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 T@U) (|left#0@@4| T@U) (|pivot#0@@4| T@U) (|right#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0) TyType) (= (type |left#0@@4|) (MapType BoxType BoxType))) (= (type |pivot#0@@4|) (SeqType BoxType))) (= (type |right#0@@4|) (MapType BoxType BoxType))) (and (and ($Is |left#0@@4| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0)) ($Is |pivot#0@@4| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@4| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0)))) (and (=> (|Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@4| |pivot#0@@4| |right#0@@4|) true) (=> true (|Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@4| |pivot#0@@4| |right#0@@4|)))) :qid |unknown.0:0| :skolemid |2333| :pattern ( (|Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@4| |pivot#0@@4| |right#0@@4|)) )))
(assert  (and (forall ((arg0@@305 T@U) (arg1@@179 T@U) ) (! (= (type (|lambda#92| arg0@@305 arg1@@179)) (MapType0Type BoxType boolType)) :qid |funType:lambda#92| :pattern ( (|lambda#92| arg0@@305 arg1@@179)) )) (forall ((arg0@@306 T@U) (arg1@@180 T@U) ) (! (= (type (|lambda#93| arg0@@306 arg1@@180)) (MapType0Type BoxType boolType)) :qid |funType:lambda#93| :pattern ( (|lambda#93| arg0@@306 arg1@@180)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 T@U) (|left#0@@5| T@U) (|pivot#0@@5| T@U) (|right#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1) TyType) (= (type |left#0@@5|) (MapType BoxType BoxType))) (= (type |pivot#0@@5|) (SeqType BoxType))) (= (type |right#0@@5|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| |pivot#0@@5| |right#0@@5|) (and (and ($Is |left#0@@5| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1)) ($Is |pivot#0@@5| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@5| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1))))) (and (and (and (forall ((|k#0@@47| T@U) ) (!  (=> (and (= (type |k#0@@47|) (SeqType BoxType)) ($Is |k#0@@47| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |k#0@@47| |pivot#0@@5|)) :qid |totalord.716:57| :skolemid |2334| :pattern ( (Lexicographic__Byte__Order.__default.lt |k#0@@47| |pivot#0@@5|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| (|lambda#92| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|))) (let ((|restricted_left#0@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| (|lambda#92| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|)))) (and (and (forall ((|k#1@@9| T@U) ) (!  (=> (and (= (type |k#1@@9|) (SeqType BoxType)) ($Is |k#1@@9| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lte#canCall| |pivot#0@@5| |k#1@@9|)) :qid |totalord.717:59| :skolemid |2335| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@5| |k#1@@9|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@5| (|lambda#93| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|))) (let ((|restricted_right#0@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@5| (|lambda#93| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|)))) (|Maps.__default.MapDisjointUnion#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |restricted_left#0@@1| |restricted_right#0@@1|))))) (= (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| |pivot#0@@5| |right#0@@5|) (let ((|restricted_left#0@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| (|lambda#92| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|)))) (let ((|restricted_right#0@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@5| (|lambda#93| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|)))) (Maps.__default.MapDisjointUnion (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 StartFuel_Maps._default.MapDisjointUnion |restricted_left#0@@2| |restricted_right#0@@2|)))))) :qid |unknown.0:0| :skolemid |2336| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| |pivot#0@@5| |right#0@@5|)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 T@U) (|left#0@@6| T@U) (|pivot#0@@6| T@U) (|right#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2) TyType) (= (type |left#0@@6|) (MapType BoxType BoxType))) (= (type |pivot#0@@6|) (SeqType BoxType))) (= (type |right#0@@6|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (Lit |pivot#0@@6|) (Lit |right#0@@6|)) (and (and ($Is |left#0@@6| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2)) ($Is |pivot#0@@6| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@6| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2))))) (and (and (and (forall ((|k#2@@7| T@U) ) (!  (=> (and (= (type |k#2@@7|) (SeqType BoxType)) ($Is |k#2@@7| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |k#2@@7| (Lit |pivot#0@@6|))) :qid |totalord.716:57| :skolemid |2337| :pattern ( (Lexicographic__Byte__Order.__default.lt |k#2@@7| |pivot#0@@6|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (|lambda#92| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|)))) (let ((|restricted_left#1@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (|lambda#92| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|))))) (and (and (forall ((|k#3@@0| T@U) ) (!  (=> (and (= (type |k#3@@0|) (SeqType BoxType)) ($Is |k#3@@0| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |pivot#0@@6|) |k#3@@0|)) :qid |totalord.717:59| :skolemid |2338| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@6| |k#3@@0|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@6|) (|lambda#93| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|)))) (let ((|restricted_right#1@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@6|) (|lambda#93| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|))))) (|Maps.__default.MapDisjointUnion#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 |restricted_left#1@@1| |restricted_right#1@@1|))))) (= (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (Lit |pivot#0@@6|) (Lit |right#0@@6|)) (let ((|restricted_left#1@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (|lambda#92| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|))))) (let ((|restricted_right#1@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@6|) (|lambda#93| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|))))) (Maps.__default.MapDisjointUnion (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 StartFuel_Maps._default.MapDisjointUnion |restricted_left#1@@2| |restricted_right#1@@2|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2339| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (Lit |pivot#0@@6|) (Lit |right#0@@6|))) ))))
(assert (forall ((arg0@@307 T@U) (arg1@@181 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.SetSuccessor arg0@@307 arg1@@181)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.SetSuccessor| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor arg0@@307 arg1@@181)) )))
(assert  (=> true (forall ((|m#0@@99| T@U) (|key#0@@81| T@U) ) (!  (=> (and (and (= (type |m#0@@99|) (MapType0Type BoxType boolType)) (= (type |key#0@@81|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| |m#0@@99| |key#0@@81|) (and ($Is |m#0@@99| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@81| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@99| |key#0@@81|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte)))) :qid |totalord.721:25| :skolemid |2340| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@99| |key#0@@81|)) ))))
(assert (forall (($Heap@@48 T@U) (|m#0@@100| T@U) (|key#0@@82| T@U) ) (!  (=> (and (and (and (= (type $Heap@@48) (MapType0Type refType MapType1Type)) (= (type |m#0@@100|) (MapType0Type BoxType boolType))) (= (type |key#0@@82|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@48) ($Is |m#0@@100| (TSet (TSeq Tclass.NativeTypes.byte)))) ($Is |key#0@@82| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.SetSuccessor#requires| |m#0@@100| |key#0@@82|) true) (=> true (|Lexicographic__Byte__Order.__default.SetSuccessor#requires| |m#0@@100| |key#0@@82|)))) :qid |totalord.721:12| :skolemid |2341| :pattern ( (|Lexicographic__Byte__Order.__default.SetSuccessor#requires| |m#0@@100| |key#0@@82|) ($IsGoodHeap $Heap@@48)) )))
(assert (forall ((arg0@@308 T@U) (arg1@@182 T@U) ) (! (= (type (|$let#13_next| arg0@@308 arg1@@182)) (SeqType BoxType)) :qid |funType:$let#13_next| :pattern ( (|$let#13_next| arg0@@308 arg1@@182)) )))
(assert (forall ((m@@50 T@U) (key@@0 T@U) ) (!  (=> (and (and (= (type m@@50) (MapType0Type BoxType boolType)) (= (type key@@0) (SeqType BoxType))) (|$let#13$canCall| m@@50 key@@0)) (and ($Is (|$let#13_next| m@@50 key@@0) (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select m@@50 ($Box (|$let#13_next| m@@50 key@@0)))) (Lexicographic__Byte__Order.__default.lt key@@0 (|$let#13_next| m@@50 key@@0))) (forall ((|other#1@@0| T@U) ) (!  (=> (and (= (type |other#1@@0|) (SeqType BoxType)) ($Is |other#1@@0| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select m@@50 ($Box |other#1@@0|))) (not (|Seq#Equal| |other#1@@0| (|$let#13_next| m@@50 key@@0)))) (Lexicographic__Byte__Order.__default.lt key@@0 |other#1@@0|)) (Lexicographic__Byte__Order.__default.lt (|$let#13_next| m@@50 key@@0) |other#1@@0|))) :qid |totalord.726:18| :skolemid |2346| :pattern ( (Lexicographic__Byte__Order.__default.lt (|$let#13_next| m@@50 key@@0) |other#1@@0|)) :pattern ( (Lexicographic__Byte__Order.__default.lt key@@0 |other#1@@0|)) :pattern ( (MapType0Select m@@50 ($Box |other#1@@0|))) ))))) :qid |totalord.723:8| :skolemid |2347| :pattern ( (|$let#13_next| m@@50 key@@0)) )))
(assert  (=> true (forall (($Heap@@49 T@U) (|m#0@@101| T@U) (|key#0@@83| T@U) ) (!  (=> (and (and (and (= (type $Heap@@49) (MapType0Type refType MapType1Type)) (= (type |m#0@@101|) (MapType0Type BoxType boolType))) (= (type |key#0@@83|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| |m#0@@101| |key#0@@83|) (and (and ($IsGoodHeap $Heap@@49) ($Is |m#0@@101| (TSet (TSeq Tclass.NativeTypes.byte)))) ($Is |key#0@@83| (TSeq Tclass.NativeTypes.byte))))) (and (and (forall ((|next#0@@2| T@U) ) (!  (=> (and (= (type |next#0@@2|) (SeqType BoxType)) ($Is |next#0@@2| (TSeq Tclass.NativeTypes.byte))) (and (=> (U_2_bool (MapType0Select |m#0@@101| ($Box |next#0@@2|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@83| |next#0@@2|)) (=> (and (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@83| |next#0@@2|) (Lexicographic__Byte__Order.__default.lt |key#0@@83| |next#0@@2|)) (forall ((|other#0@@2| T@U) ) (!  (=> (and (= (type |other#0@@2|) (SeqType BoxType)) ($Is |other#0@@2| (TSeq Tclass.NativeTypes.byte))) (and (=> (not (|Seq#Equal| |other#0@@2| |next#0@@2|)) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@83| |other#0@@2|)) (=> (and (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@83| |other#0@@2|) (Lexicographic__Byte__Order.__default.lt |key#0@@83| |other#0@@2|)) (|Lexicographic__Byte__Order.__default.lt#canCall| |next#0@@2| |other#0@@2|)))) :qid |totalord.726:18| :skolemid |2342| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#0@@2| |other#0@@2|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@83| |other#0@@2|)) :pattern ( (MapType0Select |m#0@@101| ($Box |other#0@@2|))) ))))) :qid |totalord.723:8| :skolemid |2343| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@83| |next#0@@2|)) :pattern ( (MapType0Select |m#0@@101| ($Box |next#0@@2|))) )) (=> (exists ((|next#0@@3| T@U) ) (!  (and (= (type |next#0@@3|) (SeqType BoxType)) (and ($Is |next#0@@3| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select |m#0@@101| ($Box |next#0@@3|))) (Lexicographic__Byte__Order.__default.lt |key#0@@83| |next#0@@3|)) (forall ((|other#0@@3| T@U) ) (!  (=> (and (= (type |other#0@@3|) (SeqType BoxType)) ($Is |other#0@@3| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select |m#0@@101| ($Box |other#0@@3|))) (not (|Seq#Equal| |other#0@@3| |next#0@@3|))) (Lexicographic__Byte__Order.__default.lt |key#0@@83| |other#0@@3|)) (Lexicographic__Byte__Order.__default.lt |next#0@@3| |other#0@@3|))) :qid |totalord.726:18| :skolemid |2344| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#0@@3| |other#0@@3|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@83| |other#0@@3|)) :pattern ( (MapType0Select |m#0@@101| ($Box |other#0@@3|))) ))))) :qid |totalord.723:8| :skolemid |2345| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@83| |next#0@@3|)) :pattern ( (MapType0Select |m#0@@101| ($Box |next#0@@3|))) )) (|$let#13$canCall| |m#0@@101| |key#0@@83|))) (= (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@101| |key#0@@83|) (ite (exists ((|next#0@@4| T@U) ) (!  (and (= (type |next#0@@4|) (SeqType BoxType)) (and ($Is |next#0@@4| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select |m#0@@101| ($Box |next#0@@4|))) (Lexicographic__Byte__Order.__default.lt |key#0@@83| |next#0@@4|)) (forall ((|other#0@@4| T@U) ) (!  (=> (and (= (type |other#0@@4|) (SeqType BoxType)) ($Is |other#0@@4| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select |m#0@@101| ($Box |other#0@@4|))) (not (|Seq#Equal| |other#0@@4| |next#0@@4|))) (Lexicographic__Byte__Order.__default.lt |key#0@@83| |other#0@@4|)) (Lexicographic__Byte__Order.__default.lt |next#0@@4| |other#0@@4|))) :qid |totalord.726:18| :skolemid |2348| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#0@@4| |other#0@@4|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@83| |other#0@@4|)) :pattern ( (MapType0Select |m#0@@101| ($Box |other#0@@4|))) ))))) :qid |totalord.723:8| :skolemid |2349| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@83| |next#0@@4|)) :pattern ( (MapType0Select |m#0@@101| ($Box |next#0@@4|))) )) (let ((|next#1@@0| (|$let#13_next| |m#0@@101| |key#0@@83|))) (|#Options.Option.Some| ($Box |next#1@@0|))) |#Options.Option.None|)))) :qid |totalord.721:12| :skolemid |2350| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@101| |key#0@@83|) ($IsGoodHeap $Heap@@49)) ))))
(assert  (=> true (forall (($Heap@@50 T@U) (|m#0@@102| T@U) (|key#0@@84| T@U) ) (!  (=> (and (and (and (= (type $Heap@@50) (MapType0Type refType MapType1Type)) (= (type |m#0@@102|) (MapType0Type BoxType boolType))) (= (type |key#0@@84|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (Lit |m#0@@102|) (Lit |key#0@@84|)) (and (and ($IsGoodHeap $Heap@@50) ($Is |m#0@@102| (TSet (TSeq Tclass.NativeTypes.byte)))) ($Is |key#0@@84| (TSeq Tclass.NativeTypes.byte))))) (and (and (forall ((|next#2@@2| T@U) ) (!  (=> (and (= (type |next#2@@2|) (SeqType BoxType)) ($Is |next#2@@2| (TSeq Tclass.NativeTypes.byte))) (and (=> (U_2_bool (MapType0Select (Lit |m#0@@102|) ($Box |next#2@@2|))) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@84|) |next#2@@2|)) (=> (and (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@84|) |next#2@@2|) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@84|) |next#2@@2|)) (forall ((|other#2@@2| T@U) ) (!  (=> (and (= (type |other#2@@2|) (SeqType BoxType)) ($Is |other#2@@2| (TSeq Tclass.NativeTypes.byte))) (and (=> (not (|Seq#Equal| |other#2@@2| |next#2@@2|)) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@84|) |other#2@@2|)) (=> (and (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@84|) |other#2@@2|) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@84|) |other#2@@2|)) (|Lexicographic__Byte__Order.__default.lt#canCall| |next#2@@2| |other#2@@2|)))) :qid |totalord.726:18| :skolemid |2351| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#2@@2| |other#2@@2|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@84| |other#2@@2|)) :pattern ( (MapType0Select |m#0@@102| ($Box |other#2@@2|))) ))))) :qid |totalord.723:8| :skolemid |2352| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@84| |next#2@@2|)) :pattern ( (MapType0Select |m#0@@102| ($Box |next#2@@2|))) )) (=> (exists ((|next#2@@3| T@U) ) (!  (and (= (type |next#2@@3|) (SeqType BoxType)) (and ($Is |next#2@@3| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@102|) ($Box |next#2@@3|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@84|) |next#2@@3|)) (forall ((|other#2@@3| T@U) ) (!  (=> (and (= (type |other#2@@3|) (SeqType BoxType)) ($Is |other#2@@3| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@102|) ($Box |other#2@@3|))) (not (|Seq#Equal| |other#2@@3| |next#2@@3|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@84|) |other#2@@3|)) (Lexicographic__Byte__Order.__default.lt |next#2@@3| |other#2@@3|))) :qid |totalord.726:18| :skolemid |2353| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#2@@3| |other#2@@3|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@84| |other#2@@3|)) :pattern ( (MapType0Select |m#0@@102| ($Box |other#2@@3|))) ))))) :qid |totalord.723:8| :skolemid |2354| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@84| |next#2@@3|)) :pattern ( (MapType0Select |m#0@@102| ($Box |next#2@@3|))) )) (|$let#13$canCall| (Lit |m#0@@102|) (Lit |key#0@@84|)))) (= (Lexicographic__Byte__Order.__default.SetSuccessor (Lit |m#0@@102|) (Lit |key#0@@84|)) (ite (exists ((|next#2@@4| T@U) ) (!  (and (= (type |next#2@@4|) (SeqType BoxType)) (and ($Is |next#2@@4| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@102|) ($Box |next#2@@4|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@84|) |next#2@@4|)) (forall ((|other#2@@4| T@U) ) (!  (=> (and (= (type |other#2@@4|) (SeqType BoxType)) ($Is |other#2@@4| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@102|) ($Box |other#2@@4|))) (not (|Seq#Equal| |other#2@@4| |next#2@@4|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@84|) |other#2@@4|)) (Lexicographic__Byte__Order.__default.lt |next#2@@4| |other#2@@4|))) :qid |totalord.726:18| :skolemid |2355| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#2@@4| |other#2@@4|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@84| |other#2@@4|)) :pattern ( (MapType0Select |m#0@@102| ($Box |other#2@@4|))) ))))) :qid |totalord.723:8| :skolemid |2356| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@84| |next#2@@4|)) :pattern ( (MapType0Select |m#0@@102| ($Box |next#2@@4|))) )) (let ((|next#3@@0| (|$let#13_next| (Lit |m#0@@102|) (Lit |key#0@@84|)))) (|#Options.Option.Some| ($Box |next#3@@0|))) |#Options.Option.None|)))) :qid |totalord.721:12| :weight 3 :skolemid |2357| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor (Lit |m#0@@102|) (Lit |key#0@@84|)) ($IsGoodHeap $Heap@@50)) ))))
(assert (forall ((arg0@@309 T@U) (arg1@@183 T@U) (arg2@@121 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.MapSuccessor arg0@@309 arg1@@183 arg2@@121)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.MapSuccessor| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor arg0@@309 arg1@@183 arg2@@121)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V T@U) (|m#0@@103| T@U) (|key#0@@85| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V) TyType) (= (type |m#0@@103|) (MapType BoxType BoxType))) (= (type |key#0@@85|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapSuccessor#canCall| Lexicographic_Byte_Order._default.MapSuccessor$V |m#0@@103| |key#0@@85|) (and ($Is |m#0@@103| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V)) ($Is |key#0@@85| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V |m#0@@103| |key#0@@85|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte)))) :qid |unknown.0:0| :skolemid |2358| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V |m#0@@103| |key#0@@85|)) ))))
(assert (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V@@0 T@U) (|m#0@@104| T@U) (|key#0@@86| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V@@0) TyType) (= (type |m#0@@104|) (MapType BoxType BoxType))) (= (type |key#0@@86|) (SeqType BoxType))) (and ($Is |m#0@@104| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V@@0)) ($Is |key#0@@86| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.MapSuccessor#requires| Lexicographic_Byte_Order._default.MapSuccessor$V@@0 |m#0@@104| |key#0@@86|) true) (=> true (|Lexicographic__Byte__Order.__default.MapSuccessor#requires| Lexicographic_Byte_Order._default.MapSuccessor$V@@0 |m#0@@104| |key#0@@86|)))) :qid |unknown.0:0| :skolemid |2359| :pattern ( (|Lexicographic__Byte__Order.__default.MapSuccessor#requires| Lexicographic_Byte_Order._default.MapSuccessor$V@@0 |m#0@@104| |key#0@@86|)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V@@1 T@U) (|m#0@@105| T@U) (|key#0@@87| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V@@1) TyType) (= (type |m#0@@105|) (MapType BoxType BoxType))) (= (type |key#0@@87|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapSuccessor#canCall| Lexicographic_Byte_Order._default.MapSuccessor$V@@1 |m#0@@105| |key#0@@87|) (and ($Is |m#0@@105| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V@@1)) ($Is |key#0@@87| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (|Map#Domain| |m#0@@105|) |key#0@@87|) (= (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@1 |m#0@@105| |key#0@@87|) (Lexicographic__Byte__Order.__default.SetSuccessor (|Map#Domain| |m#0@@105|) |key#0@@87|)))) :qid |unknown.0:0| :skolemid |2360| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@1 |m#0@@105| |key#0@@87|)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V@@2 T@U) (|m#0@@106| T@U) (|key#0@@88| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V@@2) TyType) (= (type |m#0@@106|) (MapType BoxType BoxType))) (= (type |key#0@@88|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapSuccessor#canCall| Lexicographic_Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@106|) (Lit |key#0@@88|)) (and ($Is |m#0@@106| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V@@2)) ($Is |key#0@@88| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (Lit (|Map#Domain| (Lit |m#0@@106|))) (Lit |key#0@@88|)) (= (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@106|) (Lit |key#0@@88|)) (Lit (Lexicographic__Byte__Order.__default.SetSuccessor (Lit (|Map#Domain| (Lit |m#0@@106|))) (Lit |key#0@@88|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2361| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@106|) (Lit |key#0@@88|))) ))))
(assert (forall ((arg0@@310 T@U) (arg1@@184 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.SeqSuccessor arg0@@310 arg1@@184)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.SeqSuccessor| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor arg0@@310 arg1@@184)) )))
(assert  (=> true (forall ((|m#0@@107| T@U) (|key#0@@89| T@U) ) (!  (=> (and (and (= (type |m#0@@107|) (SeqType BoxType)) (= (type |key#0@@89|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| |m#0@@107| |key#0@@89|) (and ($Is |m#0@@107| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@89| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@107| |key#0@@89|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte)))) :qid |totalord.737:25| :skolemid |2362| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@107| |key#0@@89|)) ))))
(assert (forall ((|m#0@@108| T@U) (|key#0@@90| T@U) ) (!  (=> (and (and (= (type |m#0@@108|) (SeqType BoxType)) (= (type |key#0@@90|) (SeqType BoxType))) (and ($Is |m#0@@108| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@90| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.SeqSuccessor#requires| |m#0@@108| |key#0@@90|) true) (=> true (|Lexicographic__Byte__Order.__default.SeqSuccessor#requires| |m#0@@108| |key#0@@90|)))) :qid |totalord.737:25| :skolemid |2363| :pattern ( (|Lexicographic__Byte__Order.__default.SeqSuccessor#requires| |m#0@@108| |key#0@@90|)) )))
(assert  (=> true (forall ((|m#0@@109| T@U) (|key#0@@91| T@U) ) (!  (=> (and (and (= (type |m#0@@109|) (SeqType BoxType)) (= (type |key#0@@91|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| |m#0@@109| |key#0@@91|) (and ($Is |m#0@@109| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@91| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (|lambda#88| (TSeq Tclass.NativeTypes.byte) |m#0@@109|) |key#0@@91|) (= (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@109| |key#0@@91|) (Lexicographic__Byte__Order.__default.SetSuccessor (|lambda#88| (TSeq Tclass.NativeTypes.byte) |m#0@@109|) |key#0@@91|)))) :qid |totalord.737:25| :skolemid |2364| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@109| |key#0@@91|)) ))))
(assert  (=> true (forall ((|m#0@@110| T@U) (|key#0@@92| T@U) ) (!  (=> (and (and (= (type |m#0@@110|) (SeqType BoxType)) (= (type |key#0@@92|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| (Lit |m#0@@110|) (Lit |key#0@@92|)) (and ($Is |m#0@@110| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@92| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (|lambda#88| (TSeq Tclass.NativeTypes.byte) |m#0@@110|) (Lit |key#0@@92|)) (= (Lexicographic__Byte__Order.__default.SeqSuccessor (Lit |m#0@@110|) (Lit |key#0@@92|)) (Lexicographic__Byte__Order.__default.SetSuccessor (|lambda#88| (TSeq Tclass.NativeTypes.byte) |m#0@@110|) (Lit |key#0@@92|))))) :qid |totalord.737:25| :weight 3 :skolemid |2365| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor (Lit |m#0@@110|) (Lit |key#0@@92|))) ))))
(assert (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V T@U) ($ly@@438 T@U) (|s#0@@120| T@U) (|m#0@@111| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V) TyType) (= (type $ly@@438) LayerTypeType)) (= (type |s#0@@120|) (SeqType BoxType))) (= (type |m#0@@111|) (MapType BoxType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V ($LS $ly@@438) |s#0@@120| |m#0@@111|) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V $ly@@438 |s#0@@120| |m#0@@111|)) (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V $ly@@438 |s#0@@120| |m#0@@111|) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V ($LS $ly@@438) |s#0@@120| |m#0@@111|)))) :qid |unknown.0:0| :skolemid |2366| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V ($LS $ly@@438) |s#0@@120| |m#0@@111|)) )))
(assert (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 T@U) ($ly@@439 T@U) (|s#0@@121| T@U) (|m#0@@112| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0) TyType) (= (type $ly@@439) LayerTypeType)) (= (type |s#0@@121|) (SeqType BoxType))) (= (type |m#0@@112|) (MapType BoxType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 $ly@@439 |s#0@@121| |m#0@@112|) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@121| |m#0@@112|)) (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@121| |m#0@@112|) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 $ly@@439 |s#0@@121| |m#0@@112|)))) :qid |unknown.0:0| :skolemid |2367| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 (AsFuelBottom $ly@@439) |s#0@@121| |m#0@@112|)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1 T@U) ($ly@@440 T@U) (|s#0@@122| T@U) (|m#0@@113| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1) TyType) (= (type $ly@@440) LayerTypeType)) (= (type |s#0@@122|) (SeqType BoxType))) (= (type |m#0@@113|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1 |s#0@@122| |m#0@@113|) (and ($Is |s#0@@122| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1))) ($Is |m#0@@113| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1))))) true) :qid |unknown.0:0| :skolemid |2368| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1 $ly@@440 |s#0@@122| |m#0@@113|)) ))))
(assert (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 T@U) ($ly@@441 T@U) (|s#0@@123| T@U) (|m#0@@114| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2) TyType) (= (type $ly@@441) LayerTypeType)) (= (type |s#0@@123|) (SeqType BoxType))) (= (type |m#0@@114|) (MapType BoxType BoxType))) (and ($Is |s#0@@123| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2))) ($Is |m#0@@114| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2)))) (and (=> (|Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 $ly@@441 |s#0@@123| |m#0@@114|) true) (=> true (|Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 $ly@@441 |s#0@@123| |m#0@@114|)))) :qid |unknown.0:0| :skolemid |2369| :pattern ( (|Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 $ly@@441 |s#0@@123| |m#0@@114|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted) LayerTypeType))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 T@U) ($ly@@442 T@U) (|s#0@@124| T@U) (|m#0@@115| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3) TyType) (= (type $ly@@442) LayerTypeType)) (= (type |s#0@@124|) (SeqType BoxType))) (= (type |m#0@@115|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@124| |m#0@@115|) (and ($Is |s#0@@124| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3))) ($Is |m#0@@115| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@124|) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@124|))) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@124|))))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@124|)))) (forall ((|i#0@@85| Int) ) (!  (and (=> (< |i#0@@85| (|Seq#Length| |s#0@@124|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@85|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@85|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@85|)))))) (=> (< |i#0@@85| (|Seq#Length| |s#0@@124|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@85|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@85|))))))) :qid |totalord.761:16| :skolemid |2370| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@85|))) )))) (=> (and (forall ((|i#0@@86| Int) ) (!  (and (=> (< |i#0@@86| (|Seq#Length| |s#0@@124|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@86|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@86|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@86|)))))) (=> (< |i#0@@86| (|Seq#Length| |s#0@@124|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@86|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@86|))))))) :qid |totalord.761:16| :skolemid |2373| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@86|))) )) (forall ((|i#0@@87| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@87|) (< |i#0@@87| (|Seq#Length| |s#0@@124|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@87|)))))) (=> (and (<= (LitInt 0) |i#0@@87|) (< |i#0@@87| (|Seq#Length| |s#0@@124|))) (= (MapType0Select (|Map#Elements| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@87|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@87|))))))) :qid |totalord.761:16| :skolemid |2374| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@87|))) ))) (forall ((|key#0@@93| T@U) ) (!  (=> (and (and (= (type |key#0@@93|) (SeqType BoxType)) ($Is |key#0@@93| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) ($Box |key#0@@93|)))) (forall ((|i#1@@28| Int) ) (!  (and (=> (< |i#1@@28| (|Seq#Length| |s#0@@124|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#1@@28|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#1@@28|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#1@@28|)))) |key#0@@93|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#1@@28|))))) :qid |totalord.762:44| :skolemid |2371| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#1@@28|))) ))) :qid |totalord.762:16| :skolemid |2372| :pattern ( (MapType0Select (|Map#Elements| |m#0@@115|) ($Box |key#0@@93|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@115|) ($Box |key#0@@93|))) )))) (and (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@442) |s#0@@124| |m#0@@115|) (and (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@124|)))) (forall ((|i#0@@88| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@88|) (< |i#0@@88| (|Seq#Length| |s#0@@124|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@88|)))))) (=> (and (<= (LitInt 0) |i#0@@88|) (< |i#0@@88| (|Seq#Length| |s#0@@124|))) (= (MapType0Select (|Map#Elements| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@88|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@88|))))))) :qid |totalord.761:16| :skolemid |2375| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@88|))) ))) (forall ((|key#0@@94| T@U) ) (!  (=> (and (and (= (type |key#0@@94|) (SeqType BoxType)) ($Is |key#0@@94| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) ($Box |key#0@@94|)))) (exists ((|i#1@@29| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1@@29|) (< |i#1@@29| (|Seq#Length| |s#0@@124|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#1@@29|)))) |key#0@@94|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#1@@29|))) (MapType0Select (|Map#Elements| |m#0@@115|) ($Box |key#0@@94|)))) :qid |totalord.762:44| :skolemid |2376| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#1@@29|))) ))) :qid |totalord.762:16| :skolemid |2377| :pattern ( (MapType0Select (|Map#Elements| |m#0@@115|) ($Box |key#0@@94|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@115|) ($Box |key#0@@94|))) )))) (=> (and (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@124|)))) (forall ((|i#0@@89| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@89|) (< |i#0@@89| (|Seq#Length| |s#0@@124|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@89|)))))) (=> (and (<= (LitInt 0) |i#0@@89|) (< |i#0@@89| (|Seq#Length| |s#0@@124|))) (= (MapType0Select (|Map#Elements| |m#0@@115|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@89|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@89|))))))) :qid |totalord.761:16| :skolemid |2375| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#0@@89|))) ))) (forall ((|key#0@@95| T@U) ) (!  (=> (and (and (= (type |key#0@@95|) (SeqType BoxType)) ($Is |key#0@@95| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@115|) ($Box |key#0@@95|)))) (exists ((|i#1@@30| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1@@30|) (< |i#1@@30| (|Seq#Length| |s#0@@124|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#1@@30|)))) |key#0@@95|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#1@@30|))) (MapType0Select (|Map#Elements| |m#0@@115|) ($Box |key#0@@95|)))) :qid |totalord.762:44| :skolemid |2376| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@124| |i#1@@30|))) ))) :qid |totalord.762:16| :skolemid |2377| :pattern ( (MapType0Select (|Map#Elements| |m#0@@115|) ($Box |key#0@@95|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@115|) ($Box |key#0@@95|))) ))) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@442) |s#0@@124| |m#0@@115|))))) :qid |unknown.0:0| :skolemid |2378| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@442) |s#0@@124| |m#0@@115|)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 T@U) ($ly@@443 T@U) (|s#0@@125| T@U) (|m#0@@116| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4) TyType) (= (type $ly@@443) LayerTypeType)) (= (type |s#0@@125|) (SeqType BoxType))) (= (type |m#0@@116|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@125|) (Lit |m#0@@116|)) (and ($Is |s#0@@125| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4))) ($Is |m#0@@116| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@125|)) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@125|)))) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@125|)))))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@125|))))) (forall ((|i#2@@10| Int) ) (!  (and (=> (< |i#2@@10| (|Seq#Length| (Lit |s#0@@125|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#2@@10|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#2@@10|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#2@@10|)))))) (=> (< |i#2@@10| (|Seq#Length| (Lit |s#0@@125|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#2@@10|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#2@@10|))))))) :qid |totalord.761:16| :skolemid |2379| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@125| |i#2@@10|))) )))) (=> (and (forall ((|i#2@@11| Int) ) (!  (and (=> (< |i#2@@11| (|Seq#Length| (Lit |s#0@@125|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#2@@11|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#2@@11|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#2@@11|)))))) (=> (< |i#2@@11| (|Seq#Length| (Lit |s#0@@125|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#2@@11|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#2@@11|))))))) :qid |totalord.761:16| :skolemid |2382| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@125| |i#2@@11|))) )) (forall ((|i#2@@12| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@12|) (< |i#2@@12| (|Seq#Length| (Lit |s#0@@125|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#2@@12|)))))) (=> (and (<= (LitInt 0) |i#2@@12|) (< |i#2@@12| (|Seq#Length| (Lit |s#0@@125|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@116|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#2@@12|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#2@@12|))))))) :qid |totalord.761:16| :skolemid |2383| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@125| |i#2@@12|))) ))) (forall ((|key#1@@8| T@U) ) (!  (=> (and (and (= (type |key#1@@8|) (SeqType BoxType)) ($Is |key#1@@8| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) ($Box |key#1@@8|)))) (forall ((|i#3@@8| Int) ) (!  (and (=> (< |i#3@@8| (|Seq#Length| (Lit |s#0@@125|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#3@@8|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#3@@8|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#3@@8|)))) |key#1@@8|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#3@@8|))))) :qid |totalord.762:44| :skolemid |2380| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@125| |i#3@@8|))) ))) :qid |totalord.762:16| :skolemid |2381| :pattern ( (MapType0Select (|Map#Elements| |m#0@@116|) ($Box |key#1@@8|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@116|) ($Box |key#1@@8|))) )))) (and (=> (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@443) (Lit |s#0@@125|) (Lit |m#0@@116|)) (and (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@125|))))) (forall ((|i#2@@13| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@13|) (< |i#2@@13| (|Seq#Length| (Lit |s#0@@125|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#2@@13|)))))) (=> (and (<= (LitInt 0) |i#2@@13|) (< |i#2@@13| (|Seq#Length| (Lit |s#0@@125|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@116|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#2@@13|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#2@@13|))))))) :qid |totalord.761:16| :skolemid |2384| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@125| |i#2@@13|))) ))) (forall ((|key#1@@9| T@U) ) (!  (=> (and (and (= (type |key#1@@9|) (SeqType BoxType)) ($Is |key#1@@9| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) ($Box |key#1@@9|)))) (exists ((|i#3@@9| Int) ) (!  (and (and (and (<= (LitInt 0) |i#3@@9|) (< |i#3@@9| (|Seq#Length| (Lit |s#0@@125|)))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#3@@9|)))) |key#1@@9|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#3@@9|))) (MapType0Select (|Map#Elements| (Lit |m#0@@116|)) ($Box |key#1@@9|)))) :qid |totalord.762:44| :skolemid |2385| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@125| |i#3@@9|))) ))) :qid |totalord.762:16| :skolemid |2386| :pattern ( (MapType0Select (|Map#Elements| |m#0@@116|) ($Box |key#1@@9|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@116|) ($Box |key#1@@9|))) )))) (=> (and (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@125|))))) (forall ((|i#2@@14| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@14|) (< |i#2@@14| (|Seq#Length| (Lit |s#0@@125|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#2@@14|)))))) (=> (and (<= (LitInt 0) |i#2@@14|) (< |i#2@@14| (|Seq#Length| (Lit |s#0@@125|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@116|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#2@@14|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#2@@14|))))))) :qid |totalord.761:16| :skolemid |2384| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@125| |i#2@@14|))) ))) (forall ((|key#1@@10| T@U) ) (!  (=> (and (and (= (type |key#1@@10|) (SeqType BoxType)) ($Is |key#1@@10| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@116|) ($Box |key#1@@10|)))) (exists ((|i#3@@10| Int) ) (!  (and (and (and (<= (LitInt 0) |i#3@@10|) (< |i#3@@10| (|Seq#Length| (Lit |s#0@@125|)))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#3@@10|)))) |key#1@@10|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@125|) |i#3@@10|))) (MapType0Select (|Map#Elements| (Lit |m#0@@116|)) ($Box |key#1@@10|)))) :qid |totalord.762:44| :skolemid |2385| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@125| |i#3@@10|))) ))) :qid |totalord.762:16| :skolemid |2386| :pattern ( (MapType0Select (|Map#Elements| |m#0@@116|) ($Box |key#1@@10|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@116|) ($Box |key#1@@10|))) ))) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@443) (Lit |s#0@@125|) (Lit |m#0@@116|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2387| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@443) (Lit |s#0@@125|) (Lit |m#0@@116|))) ))))
(assert (forall ((arg0@@311 T@U) (arg1@@185 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.minimum arg0@@311 arg1@@185)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.minimum| :pattern ( (Lexicographic__Byte__Order.__default.minimum arg0@@311 arg1@@185)) )))
(assert (forall (($ly@@444 T@U) (|s#0@@126| T@U) ) (!  (=> (and (= (type $ly@@444) LayerTypeType) (= (type |s#0@@126|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@444) |s#0@@126|) (Lexicographic__Byte__Order.__default.minimum $ly@@444 |s#0@@126|))) :qid |totalord.765:22| :skolemid |2388| :pattern ( (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@444) |s#0@@126|)) )))
(assert (forall (($ly@@445 T@U) (|s#0@@127| T@U) ) (!  (=> (and (= (type $ly@@445) LayerTypeType) (= (type |s#0@@127|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimum $ly@@445 |s#0@@127|) (Lexicographic__Byte__Order.__default.minimum $LZ |s#0@@127|))) :qid |totalord.765:22| :skolemid |2389| :pattern ( (Lexicographic__Byte__Order.__default.minimum (AsFuelBottom $ly@@445) |s#0@@127|)) )))
(assert  (=> true (forall (($ly@@446 T@U) (|s#0@@128| T@U) ) (!  (=> (and (and (= (type $ly@@446) LayerTypeType) (= (type |s#0@@128|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimum#canCall| |s#0@@128|) (and ($Is |s#0@@128| (TSet (TSeq Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@128|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@128| ($Box (Lexicographic__Byte__Order.__default.minimum $ly@@446 |s#0@@128|)))) (forall ((|y#0@@15| T@U) ) (!  (=> (= (type |y#0@@15|) (SeqType BoxType)) (=> (and ($Is |y#0@@15| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@128| ($Box |y#0@@15|)))) (Lexicographic__Byte__Order.__default.lte (Lexicographic__Byte__Order.__default.minimum $ly@@446 |s#0@@128|) |y#0@@15|))) :qid |totalord.768:18| :skolemid |2390| :pattern ( (Lexicographic__Byte__Order.__default.lte (Lexicographic__Byte__Order.__default.minimum $ly@@446 |s#0@@128|) |y#0@@15|)) :pattern ( (MapType0Select |s#0@@128| ($Box |y#0@@15|))) ))) ($Is (Lexicographic__Byte__Order.__default.minimum $ly@@446 |s#0@@128|) (TSeq Tclass.NativeTypes.byte)))) :qid |totalord.765:22| :skolemid |2391| :pattern ( (Lexicographic__Byte__Order.__default.minimum $ly@@446 |s#0@@128|)) ))))
(assert (forall (($ly@@447 T@U) ($Heap@@51 T@U) (|s#0@@129| T@U) ) (!  (=> (and (and (and (= (type $ly@@447) LayerTypeType) (= (type $Heap@@51) (MapType0Type refType MapType1Type))) (= (type |s#0@@129|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@51) ($Is |s#0@@129| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (|Lexicographic__Byte__Order.__default.minimum#requires| $ly@@447 |s#0@@129|) (>= (|Set#Card| |s#0@@129|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@129|) (LitInt 1)) (|Lexicographic__Byte__Order.__default.minimum#requires| $ly@@447 |s#0@@129|)))) :qid |totalord.765:22| :skolemid |2392| :pattern ( (|Lexicographic__Byte__Order.__default.minimum#requires| $ly@@447 |s#0@@129|) ($IsGoodHeap $Heap@@51)) )))
(assert (forall ((arg0@@312 T@U) ) (! (= (type (|$let#16_a| arg0@@312)) (SeqType BoxType)) :qid |funType:$let#16_a| :pattern ( (|$let#16_a| arg0@@312)) )))
(assert (forall ((s@@48 T@U) ) (!  (=> (and (= (type s@@48) (MapType0Type BoxType boolType)) (|$let#16$canCall| s@@48)) (and ($Is (|$let#16_a| s@@48) (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select s@@48 ($Box (|$let#16_a| s@@48)))))) :qid |totalord.772:5| :skolemid |2393| :pattern ( (|$let#16_a| s@@48)) )))
(assert  (=> true (forall (($ly@@448 T@U) ($Heap@@52 T@U) (|s#0@@130| T@U) ) (!  (=> (and (and (and (= (type $ly@@448) LayerTypeType) (= (type $Heap@@52) (MapType0Type refType MapType1Type))) (= (type |s#0@@130|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimum#canCall| |s#0@@130|) (and (and ($IsGoodHeap $Heap@@52) ($Is |s#0@@130| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| |s#0@@130|) (LitInt 1))))) (and (and (|$let#16$canCall| |s#0@@130|) (let ((|s'#0@@1| (|Set#Difference| |s#0@@130| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#16_a| |s#0@@130|)))))) (=> (not (|Set#Equal| |s'#0@@1| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.minimum#canCall| |s'#0@@1|) (let ((|m'#0@@12| (Lexicographic__Byte__Order.__default.minimum $ly@@448 |s'#0@@1|))) (|Lexicographic__Byte__Order.__default.lt#canCall| (|$let#16_a| |s#0@@130|) |m'#0@@12|)))))) (= (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@448) |s#0@@130|) (let ((|a#0@@147| (|$let#16_a| |s#0@@130|))) (let ((|s'#1@@1| (|Set#Difference| |s#0@@130| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#0@@147|))))) (ite (|Set#Equal| |s'#1@@1| (|Set#Empty| BoxType)) |a#0@@147| (let ((|m'#1@@3| (Lexicographic__Byte__Order.__default.minimum $ly@@448 |s'#1@@1|))) (ite (Lexicographic__Byte__Order.__default.lt |a#0@@147| |m'#1@@3|) |a#0@@147| |m'#1@@3|)))))))) :qid |totalord.765:22| :skolemid |2394| :pattern ( (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@448) |s#0@@130|) ($IsGoodHeap $Heap@@52)) ))))
(assert  (=> true (forall (($ly@@449 T@U) ($Heap@@53 T@U) (|s#0@@131| T@U) ) (!  (=> (and (and (and (= (type $ly@@449) LayerTypeType) (= (type $Heap@@53) (MapType0Type refType MapType1Type))) (= (type |s#0@@131|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimum#canCall| (Lit |s#0@@131|)) (and (and ($IsGoodHeap $Heap@@53) ($Is |s#0@@131| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| (Lit |s#0@@131|)) (LitInt 1))))) (and (and (|$let#16$canCall| (Lit |s#0@@131|)) (let ((|s'#2@@1| (|Set#Difference| |s#0@@131| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#16_a| (Lit |s#0@@131|))))))) (=> (not (|Set#Equal| |s'#2@@1| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.minimum#canCall| |s'#2@@1|) (let ((|m'#2@@2| (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@449) |s'#2@@1|))) (|Lexicographic__Byte__Order.__default.lt#canCall| (|$let#16_a| (Lit |s#0@@131|)) |m'#2@@2|)))))) (= (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@449) (Lit |s#0@@131|)) (let ((|a#1@@4| (|$let#16_a| (Lit |s#0@@131|)))) (let ((|s'#3@@1| (|Set#Difference| |s#0@@131| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#1@@4|))))) (ite (|Set#Equal| |s'#3@@1| (|Set#Empty| BoxType)) |a#1@@4| (let ((|m'#3@@1| (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@449) |s'#3@@1|))) (ite (Lexicographic__Byte__Order.__default.lt |a#1@@4| |m'#3@@1|) |a#1@@4| |m'#3@@1|)))))))) :qid |totalord.765:22| :weight 3 :skolemid |2395| :pattern ( (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@449) (Lit |s#0@@131|)) ($IsGoodHeap $Heap@@53)) ))))
(assert (forall ((arg0@@313 T@U) (arg1@@186 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.minimumOpt arg0@@313 arg1@@186)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.minimumOpt| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt arg0@@313 arg1@@186)) )))
(assert (forall (($ly@@450 T@U) (|s#0@@132| T@U) ) (!  (=> (and (= (type $ly@@450) LayerTypeType) (= (type |s#0@@132|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@450) |s#0@@132|) (Lexicographic__Byte__Order.__default.minimumOpt $ly@@450 |s#0@@132|))) :qid |totalord.788:22| :skolemid |2396| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@450) |s#0@@132|)) )))
(assert (forall (($ly@@451 T@U) (|s#0@@133| T@U) ) (!  (=> (and (= (type $ly@@451) LayerTypeType) (= (type |s#0@@133|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimumOpt $ly@@451 |s#0@@133|) (Lexicographic__Byte__Order.__default.minimumOpt $LZ |s#0@@133|))) :qid |totalord.788:22| :skolemid |2397| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt (AsFuelBottom $ly@@451) |s#0@@133|)) )))
(assert  (=> true (forall (($ly@@452 T@U) (|s#0@@134| T@U) ) (!  (=> (and (and (= (type $ly@@452) LayerTypeType) (= (type |s#0@@134|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimumOpt#canCall| |s#0@@134|) ($Is |s#0@@134| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (and (and (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.minimumOpt $ly@@452 |s#0@@134|)) (U_2_bool (MapType0Select |s#0@@134| (Options.Option.value (Lexicographic__Byte__Order.__default.minimumOpt $ly@@452 |s#0@@134|))))) (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.minimumOpt $ly@@452 |s#0@@134|)) (forall ((|y#0@@16| T@U) ) (!  (=> (= (type |y#0@@16|) (SeqType BoxType)) (=> (and ($Is |y#0@@16| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@134| ($Box |y#0@@16|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.minimumOpt $ly@@452 |s#0@@134|))) |y#0@@16|))) :qid |totalord.790:30| :skolemid |2398| :pattern ( (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.minimumOpt $ly@@452 |s#0@@134|))) |y#0@@16|)) :pattern ( (MapType0Select |s#0@@134| ($Box |y#0@@16|))) )))) (=> (Options.Option.None_q (Lexicographic__Byte__Order.__default.minimumOpt $ly@@452 |s#0@@134|)) (|Set#Equal| |s#0@@134| (|Set#Empty| BoxType)))) ($Is (Lexicographic__Byte__Order.__default.minimumOpt $ly@@452 |s#0@@134|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte))))) :qid |totalord.788:22| :skolemid |2399| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt $ly@@452 |s#0@@134|)) ))))
(assert (forall (($ly@@453 T@U) (|s#0@@135| T@U) ) (!  (=> (and (and (= (type $ly@@453) LayerTypeType) (= (type |s#0@@135|) (MapType0Type BoxType boolType))) ($Is |s#0@@135| (TSet (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.minimumOpt#requires| $ly@@453 |s#0@@135|) true) (=> true (|Lexicographic__Byte__Order.__default.minimumOpt#requires| $ly@@453 |s#0@@135|)))) :qid |totalord.788:22| :skolemid |2400| :pattern ( (|Lexicographic__Byte__Order.__default.minimumOpt#requires| $ly@@453 |s#0@@135|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.minimum) LayerTypeType))
(assert  (=> true (forall (($ly@@454 T@U) (|s#0@@136| T@U) ) (!  (=> (and (and (= (type $ly@@454) LayerTypeType) (= (type |s#0@@136|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimumOpt#canCall| |s#0@@136|) ($Is |s#0@@136| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@136| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.minimum#canCall| |s#0@@136|)) (= (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@454) |s#0@@136|) (ite (|Set#Equal| |s#0@@136| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.minimum StartFuel_Lexicographic_Byte_Order._default.minimum |s#0@@136|))))))) :qid |totalord.788:22| :skolemid |2401| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@454) |s#0@@136|)) ))))
(assert  (=> true (forall (($ly@@455 T@U) (|s#0@@137| T@U) ) (!  (=> (and (and (= (type $ly@@455) LayerTypeType) (= (type |s#0@@137|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimumOpt#canCall| (Lit |s#0@@137|)) ($Is |s#0@@137| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@137| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.minimum#canCall| (Lit |s#0@@137|))) (= (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@455) (Lit |s#0@@137|)) (ite (|Set#Equal| |s#0@@137| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.minimum StartFuel_Lexicographic_Byte_Order._default.minimum (Lit |s#0@@137|)))))))) :qid |totalord.788:22| :weight 3 :skolemid |2402| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@455) (Lit |s#0@@137|))) ))))
(assert (forall ((arg0@@314 T@U) (arg1@@187 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.maximum arg0@@314 arg1@@187)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.maximum| :pattern ( (Lexicographic__Byte__Order.__default.maximum arg0@@314 arg1@@187)) )))
(assert (forall (($ly@@456 T@U) (|s#0@@138| T@U) ) (!  (=> (and (= (type $ly@@456) LayerTypeType) (= (type |s#0@@138|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@456) |s#0@@138|) (Lexicographic__Byte__Order.__default.maximum $ly@@456 |s#0@@138|))) :qid |totalord.796:22| :skolemid |2403| :pattern ( (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@456) |s#0@@138|)) )))
(assert (forall (($ly@@457 T@U) (|s#0@@139| T@U) ) (!  (=> (and (= (type $ly@@457) LayerTypeType) (= (type |s#0@@139|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximum $ly@@457 |s#0@@139|) (Lexicographic__Byte__Order.__default.maximum $LZ |s#0@@139|))) :qid |totalord.796:22| :skolemid |2404| :pattern ( (Lexicographic__Byte__Order.__default.maximum (AsFuelBottom $ly@@457) |s#0@@139|)) )))
(assert  (=> true (forall (($ly@@458 T@U) (|s#0@@140| T@U) ) (!  (=> (and (and (= (type $ly@@458) LayerTypeType) (= (type |s#0@@140|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximum#canCall| |s#0@@140|) (and ($Is |s#0@@140| (TSet (TSeq Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@140|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@140| ($Box (Lexicographic__Byte__Order.__default.maximum $ly@@458 |s#0@@140|)))) (forall ((|y#0@@17| T@U) ) (!  (=> (= (type |y#0@@17|) (SeqType BoxType)) (=> (and ($Is |y#0@@17| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@140| ($Box |y#0@@17|)))) (Lexicographic__Byte__Order.__default.lte |y#0@@17| (Lexicographic__Byte__Order.__default.maximum $ly@@458 |s#0@@140|)))) :qid |totalord.799:18| :skolemid |2405| :pattern ( (Lexicographic__Byte__Order.__default.lte |y#0@@17| (Lexicographic__Byte__Order.__default.maximum $ly@@458 |s#0@@140|))) :pattern ( (MapType0Select |s#0@@140| ($Box |y#0@@17|))) ))) ($Is (Lexicographic__Byte__Order.__default.maximum $ly@@458 |s#0@@140|) (TSeq Tclass.NativeTypes.byte)))) :qid |totalord.796:22| :skolemid |2406| :pattern ( (Lexicographic__Byte__Order.__default.maximum $ly@@458 |s#0@@140|)) ))))
(assert (forall (($ly@@459 T@U) ($Heap@@54 T@U) (|s#0@@141| T@U) ) (!  (=> (and (and (and (= (type $ly@@459) LayerTypeType) (= (type $Heap@@54) (MapType0Type refType MapType1Type))) (= (type |s#0@@141|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@54) ($Is |s#0@@141| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (|Lexicographic__Byte__Order.__default.maximum#requires| $ly@@459 |s#0@@141|) (>= (|Set#Card| |s#0@@141|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@141|) (LitInt 1)) (|Lexicographic__Byte__Order.__default.maximum#requires| $ly@@459 |s#0@@141|)))) :qid |totalord.796:22| :skolemid |2407| :pattern ( (|Lexicographic__Byte__Order.__default.maximum#requires| $ly@@459 |s#0@@141|) ($IsGoodHeap $Heap@@54)) )))
(assert (forall ((arg0@@315 T@U) ) (! (= (type (|$let#19_a| arg0@@315)) (SeqType BoxType)) :qid |funType:$let#19_a| :pattern ( (|$let#19_a| arg0@@315)) )))
(assert (forall ((s@@49 T@U) ) (!  (=> (and (= (type s@@49) (MapType0Type BoxType boolType)) (|$let#19$canCall| s@@49)) (and ($Is (|$let#19_a| s@@49) (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select s@@49 ($Box (|$let#19_a| s@@49)))))) :qid |totalord.801:5| :skolemid |2408| :pattern ( (|$let#19_a| s@@49)) )))
(assert  (=> true (forall (($ly@@460 T@U) ($Heap@@55 T@U) (|s#0@@142| T@U) ) (!  (=> (and (and (and (= (type $ly@@460) LayerTypeType) (= (type $Heap@@55) (MapType0Type refType MapType1Type))) (= (type |s#0@@142|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximum#canCall| |s#0@@142|) (and (and ($IsGoodHeap $Heap@@55) ($Is |s#0@@142| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| |s#0@@142|) (LitInt 1))))) (and (and (|$let#19$canCall| |s#0@@142|) (let ((|s'#0@@2| (|Set#Difference| |s#0@@142| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#19_a| |s#0@@142|)))))) (=> (not (|Set#Equal| |s'#0@@2| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.maximum#canCall| |s'#0@@2|) (let ((|m'#0@@13| (Lexicographic__Byte__Order.__default.maximum $ly@@460 |s'#0@@2|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |m'#0@@13| (|$let#19_a| |s#0@@142|))))))) (= (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@460) |s#0@@142|) (let ((|a#0@@148| (|$let#19_a| |s#0@@142|))) (let ((|s'#1@@2| (|Set#Difference| |s#0@@142| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#0@@148|))))) (ite (|Set#Equal| |s'#1@@2| (|Set#Empty| BoxType)) |a#0@@148| (let ((|m'#1@@4| (Lexicographic__Byte__Order.__default.maximum $ly@@460 |s'#1@@2|))) (ite (Lexicographic__Byte__Order.__default.lt |m'#1@@4| |a#0@@148|) |a#0@@148| |m'#1@@4|)))))))) :qid |totalord.796:22| :skolemid |2409| :pattern ( (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@460) |s#0@@142|) ($IsGoodHeap $Heap@@55)) ))))
(assert  (=> true (forall (($ly@@461 T@U) ($Heap@@56 T@U) (|s#0@@143| T@U) ) (!  (=> (and (and (and (= (type $ly@@461) LayerTypeType) (= (type $Heap@@56) (MapType0Type refType MapType1Type))) (= (type |s#0@@143|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximum#canCall| (Lit |s#0@@143|)) (and (and ($IsGoodHeap $Heap@@56) ($Is |s#0@@143| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| (Lit |s#0@@143|)) (LitInt 1))))) (and (and (|$let#19$canCall| (Lit |s#0@@143|)) (let ((|s'#2@@2| (|Set#Difference| |s#0@@143| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#19_a| (Lit |s#0@@143|))))))) (=> (not (|Set#Equal| |s'#2@@2| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.maximum#canCall| |s'#2@@2|) (let ((|m'#2@@3| (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@461) |s'#2@@2|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |m'#2@@3| (|$let#19_a| (Lit |s#0@@143|)))))))) (= (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@461) (Lit |s#0@@143|)) (let ((|a#1@@5| (|$let#19_a| (Lit |s#0@@143|)))) (let ((|s'#3@@2| (|Set#Difference| |s#0@@143| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#1@@5|))))) (ite (|Set#Equal| |s'#3@@2| (|Set#Empty| BoxType)) |a#1@@5| (let ((|m'#3@@2| (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@461) |s'#3@@2|))) (ite (Lexicographic__Byte__Order.__default.lt |m'#3@@2| |a#1@@5|) |a#1@@5| |m'#3@@2|)))))))) :qid |totalord.796:22| :weight 3 :skolemid |2410| :pattern ( (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@461) (Lit |s#0@@143|)) ($IsGoodHeap $Heap@@56)) ))))
(assert (forall ((arg0@@316 T@U) (arg1@@188 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.maximumOpt arg0@@316 arg1@@188)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.maximumOpt| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt arg0@@316 arg1@@188)) )))
(assert (forall (($ly@@462 T@U) (|s#0@@144| T@U) ) (!  (=> (and (= (type $ly@@462) LayerTypeType) (= (type |s#0@@144|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@462) |s#0@@144|) (Lexicographic__Byte__Order.__default.maximumOpt $ly@@462 |s#0@@144|))) :qid |totalord.817:22| :skolemid |2411| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@462) |s#0@@144|)) )))
(assert (forall (($ly@@463 T@U) (|s#0@@145| T@U) ) (!  (=> (and (= (type $ly@@463) LayerTypeType) (= (type |s#0@@145|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximumOpt $ly@@463 |s#0@@145|) (Lexicographic__Byte__Order.__default.maximumOpt $LZ |s#0@@145|))) :qid |totalord.817:22| :skolemid |2412| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt (AsFuelBottom $ly@@463) |s#0@@145|)) )))
(assert  (=> true (forall (($ly@@464 T@U) (|s#0@@146| T@U) ) (!  (=> (and (and (= (type $ly@@464) LayerTypeType) (= (type |s#0@@146|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| |s#0@@146|) ($Is |s#0@@146| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (and (and (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.maximumOpt $ly@@464 |s#0@@146|)) (U_2_bool (MapType0Select |s#0@@146| (Options.Option.value (Lexicographic__Byte__Order.__default.maximumOpt $ly@@464 |s#0@@146|))))) (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.maximumOpt $ly@@464 |s#0@@146|)) (forall ((|y#0@@18| T@U) ) (!  (=> (= (type |y#0@@18|) (SeqType BoxType)) (=> (and ($Is |y#0@@18| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@146| ($Box |y#0@@18|)))) (Lexicographic__Byte__Order.__default.lte |y#0@@18| ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.maximumOpt $ly@@464 |s#0@@146|)))))) :qid |totalord.819:30| :skolemid |2413| :pattern ( (Lexicographic__Byte__Order.__default.lte |y#0@@18| ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.maximumOpt $ly@@464 |s#0@@146|))))) :pattern ( (MapType0Select |s#0@@146| ($Box |y#0@@18|))) )))) (=> (Options.Option.None_q (Lexicographic__Byte__Order.__default.maximumOpt $ly@@464 |s#0@@146|)) (|Set#Equal| |s#0@@146| (|Set#Empty| BoxType)))) ($Is (Lexicographic__Byte__Order.__default.maximumOpt $ly@@464 |s#0@@146|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte))))) :qid |totalord.817:22| :skolemid |2414| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt $ly@@464 |s#0@@146|)) ))))
(assert (forall (($ly@@465 T@U) (|s#0@@147| T@U) ) (!  (=> (and (and (= (type $ly@@465) LayerTypeType) (= (type |s#0@@147|) (MapType0Type BoxType boolType))) ($Is |s#0@@147| (TSet (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.maximumOpt#requires| $ly@@465 |s#0@@147|) true) (=> true (|Lexicographic__Byte__Order.__default.maximumOpt#requires| $ly@@465 |s#0@@147|)))) :qid |totalord.817:22| :skolemid |2415| :pattern ( (|Lexicographic__Byte__Order.__default.maximumOpt#requires| $ly@@465 |s#0@@147|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.maximum) LayerTypeType))
(assert  (=> true (forall (($ly@@466 T@U) (|s#0@@148| T@U) ) (!  (=> (and (and (= (type $ly@@466) LayerTypeType) (= (type |s#0@@148|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| |s#0@@148|) ($Is |s#0@@148| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@148| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.maximum#canCall| |s#0@@148|)) (= (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@466) |s#0@@148|) (ite (|Set#Equal| |s#0@@148| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.maximum StartFuel_Lexicographic_Byte_Order._default.maximum |s#0@@148|))))))) :qid |totalord.817:22| :skolemid |2416| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@466) |s#0@@148|)) ))))
(assert  (=> true (forall (($ly@@467 T@U) (|s#0@@149| T@U) ) (!  (=> (and (and (= (type $ly@@467) LayerTypeType) (= (type |s#0@@149|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| (Lit |s#0@@149|)) ($Is |s#0@@149| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@149| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.maximum#canCall| (Lit |s#0@@149|))) (= (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@467) (Lit |s#0@@149|)) (ite (|Set#Equal| |s#0@@149| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.maximum StartFuel_Lexicographic_Byte_Order._default.maximum (Lit |s#0@@149|)))))))) :qid |totalord.817:22| :weight 3 :skolemid |2417| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@467) (Lit |s#0@@149|))) ))))
(assert  (=> true (forall ((|a#0@@149| T@U) (|b#0@@115| T@U) ) (!  (=> (and (and (= (type |a#0@@149|) (SeqType BoxType)) (= (type |b#0@@115|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lt#canCall| |a#0@@149| |b#0@@115|) (and ($Is |a#0@@149| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@115| (TSeq Tclass.NativeTypes.byte))))) true) :qid |totalord.12:15| :skolemid |2418| :pattern ( (Lexicographic__Byte__Order.__default.lt |a#0@@149| |b#0@@115|)) ))))
(assert (forall ((|a#0@@150| T@U) (|b#0@@116| T@U) ) (!  (=> (and (and (= (type |a#0@@150|) (SeqType BoxType)) (= (type |b#0@@116|) (SeqType BoxType))) (and ($Is |a#0@@150| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@116| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.lt#requires| |a#0@@150| |b#0@@116|) true) (=> true (|Lexicographic__Byte__Order.__default.lt#requires| |a#0@@150| |b#0@@116|)))) :qid |totalord.12:15| :skolemid |2419| :pattern ( (|Lexicographic__Byte__Order.__default.lt#requires| |a#0@@150| |b#0@@116|)) )))
(assert  (=> true (forall ((|a#0@@151| T@U) (|b#0@@117| T@U) ) (!  (=> (and (and (= (type |a#0@@151|) (SeqType BoxType)) (= (type |b#0@@117|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lt#canCall| |a#0@@151| |b#0@@117|) (and ($Is |a#0@@151| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@117| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@151| |b#0@@117|) (and (=> (Lexicographic__Byte__Order.__default.lt |a#0@@151| |b#0@@117|) (and (Lexicographic__Byte__Order.__default.lte |a#0@@151| |b#0@@117|) (not (|Seq#Equal| |a#0@@151| |b#0@@117|)))) (=> (and (Lexicographic__Byte__Order.__default.lte |a#0@@151| |b#0@@117|) (not (|Seq#Equal| |a#0@@151| |b#0@@117|))) (Lexicographic__Byte__Order.__default.lt |a#0@@151| |b#0@@117|))))) :qid |totalord.12:15| :skolemid |2420| :pattern ( (Lexicographic__Byte__Order.__default.lt |a#0@@151| |b#0@@117|)) ))))
(assert  (=> true (forall ((|a#0@@152| T@U) (|b#0@@118| T@U) ) (!  (=> (and (and (= (type |a#0@@152|) (SeqType BoxType)) (= (type |b#0@@118|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |a#0@@152|) (Lit |b#0@@118|)) (and ($Is |a#0@@152| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@118| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@152|) (Lit |b#0@@118|)) (and (=> (Lexicographic__Byte__Order.__default.lt (Lit |a#0@@152|) (Lit |b#0@@118|)) (and (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@152|) (Lit |b#0@@118|)) (not (|Seq#Equal| |a#0@@152| |b#0@@118|)))) (=> (and (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@152|) (Lit |b#0@@118|)) (not (|Seq#Equal| |a#0@@152| |b#0@@118|))) (Lexicographic__Byte__Order.__default.lt (Lit |a#0@@152|) (Lit |b#0@@118|)))))) :qid |totalord.12:15| :weight 3 :skolemid |2421| :pattern ( (Lexicographic__Byte__Order.__default.lt (Lit |a#0@@152|) (Lit |b#0@@118|))) ))))
(assert (forall ((arg0@@317 T@U) (arg1@@189 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.Min arg0@@317 arg1@@189)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.Min| :pattern ( (Lexicographic__Byte__Order.__default.Min arg0@@317 arg1@@189)) )))
(assert  (=> true (forall ((|a#0@@153| T@U) (|b#0@@119| T@U) ) (!  (=> (and (and (= (type |a#0@@153|) (SeqType BoxType)) (= (type |b#0@@119|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Min#canCall| |a#0@@153| |b#0@@119|) (and ($Is |a#0@@153| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@119| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.Min |a#0@@153| |b#0@@119|) (TSeq Tclass.NativeTypes.byte))) :qid |totalord.24:16| :skolemid |2422| :pattern ( (Lexicographic__Byte__Order.__default.Min |a#0@@153| |b#0@@119|)) ))))
(assert (forall ((|a#0@@154| T@U) (|b#0@@120| T@U) ) (!  (=> (and (and (= (type |a#0@@154|) (SeqType BoxType)) (= (type |b#0@@120|) (SeqType BoxType))) (and ($Is |a#0@@154| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@120| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.Min#requires| |a#0@@154| |b#0@@120|) true) (=> true (|Lexicographic__Byte__Order.__default.Min#requires| |a#0@@154| |b#0@@120|)))) :qid |totalord.24:16| :skolemid |2423| :pattern ( (|Lexicographic__Byte__Order.__default.Min#requires| |a#0@@154| |b#0@@120|)) )))
(assert  (=> true (forall ((|a#0@@155| T@U) (|b#0@@121| T@U) ) (!  (=> (and (and (= (type |a#0@@155|) (SeqType BoxType)) (= (type |b#0@@121|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Min#canCall| |a#0@@155| |b#0@@121|) (and ($Is |a#0@@155| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@121| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@155| |b#0@@121|) (= (Lexicographic__Byte__Order.__default.Min |a#0@@155| |b#0@@121|) (ite (Lexicographic__Byte__Order.__default.lte |a#0@@155| |b#0@@121|) |a#0@@155| |b#0@@121|)))) :qid |totalord.24:16| :skolemid |2424| :pattern ( (Lexicographic__Byte__Order.__default.Min |a#0@@155| |b#0@@121|)) ))))
(assert  (=> true (forall ((|a#0@@156| T@U) (|b#0@@122| T@U) ) (!  (=> (and (and (= (type |a#0@@156|) (SeqType BoxType)) (= (type |b#0@@122|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Min#canCall| (Lit |a#0@@156|) (Lit |b#0@@122|)) (and ($Is |a#0@@156| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@122| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@156|) (Lit |b#0@@122|)) (= (Lexicographic__Byte__Order.__default.Min (Lit |a#0@@156|) (Lit |b#0@@122|)) (ite (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@156|) (Lit |b#0@@122|)) |a#0@@156| |b#0@@122|)))) :qid |totalord.24:16| :weight 3 :skolemid |2425| :pattern ( (Lexicographic__Byte__Order.__default.Min (Lit |a#0@@156|) (Lit |b#0@@122|))) ))))
(assert (forall ((arg0@@318 T@U) (arg1@@190 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.Max arg0@@318 arg1@@190)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.Max| :pattern ( (Lexicographic__Byte__Order.__default.Max arg0@@318 arg1@@190)) )))
(assert  (=> true (forall ((|a#0@@157| T@U) (|b#0@@123| T@U) ) (!  (=> (and (and (= (type |a#0@@157|) (SeqType BoxType)) (= (type |b#0@@123|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Max#canCall| |a#0@@157| |b#0@@123|) (and ($Is |a#0@@157| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@123| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.Max |a#0@@157| |b#0@@123|) (TSeq Tclass.NativeTypes.byte))) :qid |totalord.29:16| :skolemid |2426| :pattern ( (Lexicographic__Byte__Order.__default.Max |a#0@@157| |b#0@@123|)) ))))
(assert (forall ((|a#0@@158| T@U) (|b#0@@124| T@U) ) (!  (=> (and (and (= (type |a#0@@158|) (SeqType BoxType)) (= (type |b#0@@124|) (SeqType BoxType))) (and ($Is |a#0@@158| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@124| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.Max#requires| |a#0@@158| |b#0@@124|) true) (=> true (|Lexicographic__Byte__Order.__default.Max#requires| |a#0@@158| |b#0@@124|)))) :qid |totalord.29:16| :skolemid |2427| :pattern ( (|Lexicographic__Byte__Order.__default.Max#requires| |a#0@@158| |b#0@@124|)) )))
(assert  (=> true (forall ((|a#0@@159| T@U) (|b#0@@125| T@U) ) (!  (=> (and (and (= (type |a#0@@159|) (SeqType BoxType)) (= (type |b#0@@125|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Max#canCall| |a#0@@159| |b#0@@125|) (and ($Is |a#0@@159| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@125| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@159| |b#0@@125|) (= (Lexicographic__Byte__Order.__default.Max |a#0@@159| |b#0@@125|) (ite (Lexicographic__Byte__Order.__default.lte |a#0@@159| |b#0@@125|) |b#0@@125| |a#0@@159|)))) :qid |totalord.29:16| :skolemid |2428| :pattern ( (Lexicographic__Byte__Order.__default.Max |a#0@@159| |b#0@@125|)) ))))
(assert  (=> true (forall ((|a#0@@160| T@U) (|b#0@@126| T@U) ) (!  (=> (and (and (= (type |a#0@@160|) (SeqType BoxType)) (= (type |b#0@@126|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Max#canCall| (Lit |a#0@@160|) (Lit |b#0@@126|)) (and ($Is |a#0@@160| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@126| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@160|) (Lit |b#0@@126|)) (= (Lexicographic__Byte__Order.__default.Max (Lit |a#0@@160|) (Lit |b#0@@126|)) (ite (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@160|) (Lit |b#0@@126|)) |b#0@@126| |a#0@@160|)))) :qid |totalord.29:16| :weight 3 :skolemid |2429| :pattern ( (Lexicographic__Byte__Order.__default.Max (Lit |a#0@@160|) (Lit |b#0@@126|))) ))))
(assert (forall (($ly@@468 T@U) (|run#0@@132| T@U) ) (!  (=> (and (= (type $ly@@468) LayerTypeType) (= (type |run#0@@132|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@468) |run#0@@132|) (Lexicographic__Byte__Order.__default.IsSorted $ly@@468 |run#0@@132|)) (=> (Lexicographic__Byte__Order.__default.IsSorted $ly@@468 |run#0@@132|) (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@468) |run#0@@132|)))) :qid |totalord.41:23| :skolemid |2430| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@468) |run#0@@132|)) )))
(assert (forall (($ly@@469 T@U) (|run#0@@133| T@U) ) (!  (=> (and (= (type $ly@@469) LayerTypeType) (= (type |run#0@@133|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.IsSorted $ly@@469 |run#0@@133|) (Lexicographic__Byte__Order.__default.IsSorted $LZ |run#0@@133|)) (=> (Lexicographic__Byte__Order.__default.IsSorted $LZ |run#0@@133|) (Lexicographic__Byte__Order.__default.IsSorted $ly@@469 |run#0@@133|)))) :qid |totalord.41:23| :skolemid |2431| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted (AsFuelBottom $ly@@469) |run#0@@133|)) )))
(assert  (=> true (forall (($ly@@470 T@U) (|run#0@@134| T@U) ) (!  (=> (and (and (= (type $ly@@470) LayerTypeType) (= (type |run#0@@134|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsSorted#canCall| |run#0@@134|) ($Is |run#0@@134| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (=> (= (|Seq#Length| |run#0@@134|) (LitInt 0)) (Lexicographic__Byte__Order.__default.IsSorted $ly@@470 |run#0@@134|)) (=> (= (|Seq#Length| |run#0@@134|) (LitInt 1)) (Lexicographic__Byte__Order.__default.IsSorted $ly@@470 |run#0@@134|)))) :qid |totalord.41:23| :skolemid |2432| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted $ly@@470 |run#0@@134|)) ))))
(assert (forall (($ly@@471 T@U) (|run#0@@135| T@U) ) (!  (=> (and (and (= (type $ly@@471) LayerTypeType) (= (type |run#0@@135|) (SeqType BoxType))) ($Is |run#0@@135| (TSeq (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.IsSorted#requires| $ly@@471 |run#0@@135|) true) (=> true (|Lexicographic__Byte__Order.__default.IsSorted#requires| $ly@@471 |run#0@@135|)))) :qid |totalord.41:23| :skolemid |2433| :pattern ( (|Lexicographic__Byte__Order.__default.IsSorted#requires| $ly@@471 |run#0@@135|)) )))
(assert  (=> true (forall (($ly@@472 T@U) (|run#0@@136| T@U) ) (!  (=> (and (and (= (type $ly@@472) LayerTypeType) (= (type |run#0@@136|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsSorted#canCall| |run#0@@136|) ($Is |run#0@@136| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#0@@90| Int) (|j#0@@18| Int) ) (!  (=> (< |j#0@@18| (|Seq#Length| |run#0@@136|)) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#0@@90|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#0@@18|)))) :qid |totalord.45:12| :skolemid |2434| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#0@@18|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#0@@90|))) )) (and (=> (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@472) |run#0@@136|) (forall ((|i#0@@91| Int) (|j#0@@19| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@91|) (<= |i#0@@91| |j#0@@19|)) (< |j#0@@19| (|Seq#Length| |run#0@@136|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#0@@91|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#0@@19|))))) :qid |totalord.45:12| :skolemid |2435| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#0@@19|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#0@@91|))) ))) (=> (forall ((|i#0@@92| Int) (|j#0@@20| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@92|) (<= |i#0@@92| |j#0@@20|)) (< |j#0@@20| (|Seq#Length| |run#0@@136|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#0@@92|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#0@@20|))))) :qid |totalord.45:12| :skolemid |2435| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |j#0@@20|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@136| |i#0@@92|))) )) (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@472) |run#0@@136|))))) :qid |totalord.41:23| :skolemid |2436| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@472) |run#0@@136|)) ))))
(assert  (=> true (forall (($ly@@473 T@U) (|run#0@@137| T@U) ) (!  (=> (and (and (= (type $ly@@473) LayerTypeType) (= (type |run#0@@137|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsSorted#canCall| (Lit |run#0@@137|)) ($Is |run#0@@137| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#1@@31| Int) (|j#1@@8| Int) ) (!  (=> (< |j#1@@8| (|Seq#Length| (Lit |run#0@@137|))) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |i#1@@31|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |j#1@@8|)))) :qid |totalord.45:12| :skolemid |2437| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |j#1@@8|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |i#1@@31|))) )) (and (=> (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@473) (Lit |run#0@@137|)) (forall ((|i#1@@32| Int) (|j#1@@9| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@32|) (<= |i#1@@32| |j#1@@9|)) (< |j#1@@9| (|Seq#Length| (Lit |run#0@@137|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |i#1@@32|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |j#1@@9|))))) :qid |totalord.45:12| :skolemid |2438| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |j#1@@9|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |i#1@@32|))) ))) (=> (forall ((|i#1@@33| Int) (|j#1@@10| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@33|) (<= |i#1@@33| |j#1@@10|)) (< |j#1@@10| (|Seq#Length| (Lit |run#0@@137|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |i#1@@33|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@137|) |j#1@@10|))))) :qid |totalord.45:12| :skolemid |2438| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |j#1@@10|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@137| |i#1@@33|))) )) (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@473) (Lit |run#0@@137|)))))) :qid |totalord.41:23| :weight 3 :skolemid |2439| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@473) (Lit |run#0@@137|))) ))))
(assert  (=> true (forall ((|run#0@@138| T@U) ) (!  (=> (and (= (type |run#0@@138|) (SeqType BoxType)) (or (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@138|) ($Is |run#0@@138| (TSeq (TSeq Tclass.NativeTypes.byte))))) true) :qid |totalord.48:38| :skolemid |2440| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@138|)) ))))
(assert (forall ((|run#0@@139| T@U) ) (!  (=> (and (= (type |run#0@@139|) (SeqType BoxType)) ($Is |run#0@@139| (TSeq (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@139|) true) (=> true (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@139|)))) :qid |totalord.48:38| :skolemid |2441| :pattern ( (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@139|)) )))
(assert  (=> true (forall ((|run#0@@140| T@U) ) (!  (=> (and (= (type |run#0@@140|) (SeqType BoxType)) (or (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@140|) ($Is |run#0@@140| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#0@@93| Int) (|j#0@@21| Int) ) (!  (=> (< |j#0@@21| (|Seq#Length| |run#0@@140|)) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#0@@93|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#0@@21|)))) :qid |totalord.50:12| :skolemid |2442| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#0@@21|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#0@@93|))) )) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@140|) (forall ((|i#0@@94| Int) (|j#0@@22| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@94|) (< |i#0@@94| |j#0@@22|)) (< |j#0@@22| (|Seq#Length| |run#0@@140|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#0@@94|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#0@@22|))))) :qid |totalord.50:12| :skolemid |2443| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#0@@22|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#0@@94|))) ))) (=> (forall ((|i#0@@95| Int) (|j#0@@23| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@95|) (< |i#0@@95| |j#0@@23|)) (< |j#0@@23| (|Seq#Length| |run#0@@140|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#0@@95|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#0@@23|))))) :qid |totalord.50:12| :skolemid |2443| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |j#0@@23|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#0@@95|))) )) (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@140|))))) :qid |totalord.48:38| :skolemid |2444| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@140|)) ))))
(assert  (=> true (forall ((|run#0@@141| T@U) ) (!  (=> (and (= (type |run#0@@141|) (SeqType BoxType)) (or (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@141|)) ($Is |run#0@@141| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#1@@34| Int) (|j#1@@11| Int) ) (!  (=> (< |j#1@@11| (|Seq#Length| (Lit |run#0@@141|))) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |i#1@@34|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |j#1@@11|)))) :qid |totalord.50:12| :skolemid |2445| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |j#1@@11|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |i#1@@34|))) )) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@141|)) (forall ((|i#1@@35| Int) (|j#1@@12| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@35|) (< |i#1@@35| |j#1@@12|)) (< |j#1@@12| (|Seq#Length| (Lit |run#0@@141|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |i#1@@35|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |j#1@@12|))))) :qid |totalord.50:12| :skolemid |2446| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |j#1@@12|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |i#1@@35|))) ))) (=> (forall ((|i#1@@36| Int) (|j#1@@13| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@36|) (< |i#1@@36| |j#1@@13|)) (< |j#1@@13| (|Seq#Length| (Lit |run#0@@141|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |i#1@@36|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@141|) |j#1@@13|))))) :qid |totalord.50:12| :skolemid |2446| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |j#1@@13|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@141| |i#1@@36|))) )) (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@141|)))))) :qid |totalord.48:38| :weight 3 :skolemid |2447| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@141|))) ))))
(assert (forall (($ly@@474 T@U) (|run#0@@142| T@U) ) (!  (=> (and (= (type $ly@@474) LayerTypeType) (= (type |run#0@@142|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@474) |run#0@@142|) (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@474 |run#0@@142|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@474 |run#0@@142|) (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@474) |run#0@@142|)))) :qid |totalord.64:23| :skolemid |2448| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@474) |run#0@@142|)) )))
(assert (forall (($ly@@475 T@U) (|run#0@@143| T@U) ) (!  (=> (and (= (type $ly@@475) LayerTypeType) (= (type |run#0@@143|) (SeqType BoxType))) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@475 |run#0@@143|) (Lexicographic__Byte__Order.__default.IsStrictlySorted $LZ |run#0@@143|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted $LZ |run#0@@143|) (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@475 |run#0@@143|)))) :qid |totalord.64:23| :skolemid |2449| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted (AsFuelBottom $ly@@475) |run#0@@143|)) )))
(assert  (=> true (forall (($ly@@476 T@U) (|run#0@@144| T@U) ) (!  (=> (and (and (= (type $ly@@476) LayerTypeType) (= (type |run#0@@144|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@144|) ($Is |run#0@@144| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (and (=> (= (|Seq#Length| |run#0@@144|) (LitInt 0)) (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@476 |run#0@@144|)) (=> (= (|Seq#Length| |run#0@@144|) (LitInt 1)) (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@476 |run#0@@144|))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@476 |run#0@@144|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@144|)))) :qid |totalord.64:23| :skolemid |2450| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@476 |run#0@@144|)) ))))
(assert (forall (($ly@@477 T@U) (|run#0@@145| T@U) ) (!  (=> (and (and (= (type $ly@@477) LayerTypeType) (= (type |run#0@@145|) (SeqType BoxType))) ($Is |run#0@@145| (TSeq (TSeq Tclass.NativeTypes.byte)))) (and (=> (|Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| $ly@@477 |run#0@@145|) true) (=> true (|Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| $ly@@477 |run#0@@145|)))) :qid |totalord.64:23| :skolemid |2451| :pattern ( (|Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| $ly@@477 |run#0@@145|)) )))
(assert  (=> true (forall (($ly@@478 T@U) (|run#0@@146| T@U) ) (!  (=> (and (and (= (type $ly@@478) LayerTypeType) (= (type |run#0@@146|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@146|) ($Is |run#0@@146| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@146|) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@478) |run#0@@146|) (let ((|b#0@@127| (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@146|))) (ite |b#0@@127| |b#0@@127| |b#0@@127|))) (=> (let ((|b#0@@128| (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@146|))) (ite |b#0@@128| |b#0@@128| |b#0@@128|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@478) |run#0@@146|))))) :qid |totalord.64:23| :skolemid |2452| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@478) |run#0@@146|)) ))))
(assert  (=> true (forall (($ly@@479 T@U) (|run#0@@147| T@U) ) (!  (=> (and (and (= (type $ly@@479) LayerTypeType) (= (type |run#0@@147|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (Lit |run#0@@147|)) ($Is |run#0@@147| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@147|)) (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@479) (Lit |run#0@@147|)) (let ((|b#1@@10| (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@147|))))))) (ite |b#1@@10| |b#1@@10| |b#1@@10|))) (=> (let ((|b#1@@11| (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@147|))))))) (ite |b#1@@11| |b#1@@11| |b#1@@11|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@479) (Lit |run#0@@147|)))))) :qid |totalord.64:23| :weight 3 :skolemid |2453| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@479) (Lit |run#0@@147|))) ))))
(assert (= (type Tclass.Lexicographic__Byte__Order__Impl.__default) TyType))
(assert (= (Tag Tclass.Lexicographic__Byte__Order__Impl.__default) Tagclass.Lexicographic__Byte__Order__Impl.__default))
(assert (forall ((bx@@104 T@U) ) (!  (=> (and (= (type bx@@104) BoxType) ($IsBox bx@@104 Tclass.Lexicographic__Byte__Order__Impl.__default)) (and (= ($Box ($Unbox refType bx@@104)) bx@@104) ($Is ($Unbox refType bx@@104) Tclass.Lexicographic__Byte__Order__Impl.__default))) :qid |unknown.0:0| :skolemid |2454| :pattern ( ($IsBox bx@@104 Tclass.Lexicographic__Byte__Order__Impl.__default)) )))
(assert (forall (($o@@37 T@U) ) (!  (=> (= (type $o@@37) refType) (and (=> ($Is $o@@37 Tclass.Lexicographic__Byte__Order__Impl.__default) (or (= $o@@37 null) (= (dtype $o@@37) Tclass.Lexicographic__Byte__Order__Impl.__default))) (=> (or (= $o@@37 null) (= (dtype $o@@37) Tclass.Lexicographic__Byte__Order__Impl.__default)) ($Is $o@@37 Tclass.Lexicographic__Byte__Order__Impl.__default)))) :qid |unknown.0:0| :skolemid |2455| :pattern ( ($Is $o@@37 Tclass.Lexicographic__Byte__Order__Impl.__default)) )))
(assert (forall (($o@@38 T@U) ($h@@53 T@U) ) (!  (=> (and (= (type $o@@38) refType) (= (type $h@@53) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@38 Tclass.Lexicographic__Byte__Order__Impl.__default $h@@53) (or (= $o@@38 null) (U_2_bool (MapType1Select (MapType0Select $h@@53 $o@@38) alloc)))) (=> (or (= $o@@38 null) (U_2_bool (MapType1Select (MapType0Select $h@@53 $o@@38) alloc))) ($IsAlloc $o@@38 Tclass.Lexicographic__Byte__Order__Impl.__default $h@@53)))) :qid |unknown.0:0| :skolemid |2456| :pattern ( ($IsAlloc $o@@38 Tclass.Lexicographic__Byte__Order__Impl.__default $h@@53)) )))
(assert (= (type Tclass.Integer__Order.__default) TyType))
(assert (= (Tag Tclass.Integer__Order.__default) Tagclass.Integer__Order.__default))
(assert (forall ((bx@@105 T@U) ) (!  (=> (and (= (type bx@@105) BoxType) ($IsBox bx@@105 Tclass.Integer__Order.__default)) (and (= ($Box ($Unbox refType bx@@105)) bx@@105) ($Is ($Unbox refType bx@@105) Tclass.Integer__Order.__default))) :qid |unknown.0:0| :skolemid |2457| :pattern ( ($IsBox bx@@105 Tclass.Integer__Order.__default)) )))
(assert (forall (($o@@39 T@U) ) (!  (=> (= (type $o@@39) refType) (and (=> ($Is $o@@39 Tclass.Integer__Order.__default) (or (= $o@@39 null) (= (dtype $o@@39) Tclass.Integer__Order.__default))) (=> (or (= $o@@39 null) (= (dtype $o@@39) Tclass.Integer__Order.__default)) ($Is $o@@39 Tclass.Integer__Order.__default)))) :qid |unknown.0:0| :skolemid |2458| :pattern ( ($Is $o@@39 Tclass.Integer__Order.__default)) )))
(assert (forall (($o@@40 T@U) ($h@@54 T@U) ) (!  (=> (and (= (type $o@@40) refType) (= (type $h@@54) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@40 Tclass.Integer__Order.__default $h@@54) (or (= $o@@40 null) (U_2_bool (MapType1Select (MapType0Select $h@@54 $o@@40) alloc)))) (=> (or (= $o@@40 null) (U_2_bool (MapType1Select (MapType0Select $h@@54 $o@@40) alloc))) ($IsAlloc $o@@40 Tclass.Integer__Order.__default $h@@54)))) :qid |unknown.0:0| :skolemid |2459| :pattern ( ($IsAlloc $o@@40 Tclass.Integer__Order.__default $h@@54)) )))
(assert  (=> true (=> true true)))
(assert  (=> |Integer__Order.__default.SomeElement#requires| true))
(assert  (=> true |Integer__Order.__default.SomeElement#requires|))
(assert  (=> true (=> true (= Integer__Order.__default.SomeElement (LitInt 0)))))
(assert  (=> true (=> true (= Integer__Order.__default.SomeElement (LitInt 0)))))
(assert (= (type StartFuel_Integer_Order._default.ltedef) LayerTypeType))
(assert  (=> true (forall ((|a#0@@161| Int) (|b#0@@129| Int) ) (!  (=> true (and (and (and (and (and (and (and (=> (Integer__Order.__default.lte |a#0@@161| |b#0@@129|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#0@@161| |b#0@@129|)) (=> (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#0@@161| |b#0@@129|) (Integer__Order.__default.lte |a#0@@161| |b#0@@129|))) (or (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#0@@161| |b#0@@129|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |b#0@@129| |a#0@@161|))) (forall ((|a#1@@6| Int) (|b#1@@12| Int) (|c#0@@12| Int) ) (!  (=> true (=> (and (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#1@@6| |b#1@@12|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |b#1@@12| |c#0@@12|)) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#1@@6| |c#0@@12|))) :qid |totalord.20:18| :skolemid |2460| :pattern ( (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#1@@6| |c#0@@12|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |b#1@@12| |c#0@@12|)) :pattern ( (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |b#1@@12| |c#0@@12|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#1@@6| |b#1@@12|)) ))) (and (=> (Integer__Order.__default.lte |a#0@@161| |b#0@@129|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#0@@161| |b#0@@129|)) (=> (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#0@@161| |b#0@@129|) (Integer__Order.__default.lte |a#0@@161| |b#0@@129|)))) (or (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#0@@161| |b#0@@129|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |b#0@@129| |a#0@@161|))) (=> (and (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#0@@161| |b#0@@129|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |b#0@@129| |a#0@@161|)) (= |a#0@@161| |b#0@@129|))) (forall ((|a#2@@1| Int) (|b#2@@1| Int) (|c#1@@1| Int) ) (!  (=> true (=> (and (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#2@@1| |b#2@@1|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |b#2@@1| |c#1@@1|)) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#2@@1| |c#1@@1|))) :qid |totalord.188:18| :skolemid |2461| :pattern ( (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#2@@1| |c#1@@1|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |b#2@@1| |c#1@@1|)) :pattern ( (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |b#2@@1| |c#1@@1|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#2@@1| |b#2@@1|)) )))) :qid |totalord.17:16| :skolemid |2462| :pattern ( (Integer__Order.__default.lte |a#0@@161| |b#0@@129|)) ))))
(assert (forall ((|a#0@@162| Int) (|b#0@@130| Int) ) (!  (and (=> (|Integer__Order.__default.lte#requires| |a#0@@162| |b#0@@130|) true) (=> true (|Integer__Order.__default.lte#requires| |a#0@@162| |b#0@@130|))) :qid |totalord.17:16| :skolemid |2463| :pattern ( (|Integer__Order.__default.lte#requires| |a#0@@162| |b#0@@130|)) )))
(assert  (and (= (type MoreFuel_Integer_Order._default.ltedef0) LayerTypeType) (= (type StartFuelAssert_Integer_Order._default.ltedef) LayerTypeType)))
(assert  (=> true (forall ((|a#0@@163| Int) (|b#0@@131| Int) ) (!  (=> true (and (|Integer__Order.__default.ltedef#canCall| |a#0@@163| |b#0@@131|) (and (and (and (= StartFuel_Integer_Order._default.ltedef ($LS MoreFuel_Integer_Order._default.ltedef0)) (= StartFuelAssert_Integer_Order._default.ltedef ($LS ($LS MoreFuel_Integer_Order._default.ltedef0)))) (= (AsFuelBottom MoreFuel_Integer_Order._default.ltedef0) MoreFuel_Integer_Order._default.ltedef0)) (and (=> (Integer__Order.__default.lte |a#0@@163| |b#0@@131|) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#0@@163| |b#0@@131|)) (=> (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef |a#0@@163| |b#0@@131|) (Integer__Order.__default.lte |a#0@@163| |b#0@@131|)))))) :qid |totalord.17:16| :skolemid |2464| :pattern ( (Integer__Order.__default.lte |a#0@@163| |b#0@@131|)) ))))
(assert (= (type MoreFuel_Integer_Order._default.ltedef1) LayerTypeType))
(assert  (=> true (forall ((|a#0@@164| Int) (|b#0@@132| Int) ) (!  (=> true (and (|Integer__Order.__default.ltedef#canCall| (LitInt |a#0@@164|) (LitInt |b#0@@132|)) (and (and (and (= StartFuel_Integer_Order._default.ltedef ($LS MoreFuel_Integer_Order._default.ltedef1)) (= StartFuelAssert_Integer_Order._default.ltedef ($LS ($LS MoreFuel_Integer_Order._default.ltedef1)))) (= (AsFuelBottom MoreFuel_Integer_Order._default.ltedef1) MoreFuel_Integer_Order._default.ltedef1)) (and (=> (Integer__Order.__default.lte (LitInt |a#0@@164|) (LitInt |b#0@@132|)) (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef (LitInt |a#0@@164|) (LitInt |b#0@@132|))) (=> (Integer__Order.__default.ltedef StartFuel_Integer_Order._default.ltedef (LitInt |a#0@@164|) (LitInt |b#0@@132|)) (Integer__Order.__default.lte (LitInt |a#0@@164|) (LitInt |b#0@@132|))))))) :qid |totalord.17:16| :weight 3 :skolemid |2465| :pattern ( (Integer__Order.__default.lte (LitInt |a#0@@164|) (LitInt |b#0@@132|))) ))))
(assert (forall (($ly@@480 T@U) (|a#0@@165| Int) (|b#0@@133| Int) ) (!  (=> (= (type $ly@@480) LayerTypeType) (and (=> (Integer__Order.__default.ltedef ($LS $ly@@480) |a#0@@165| |b#0@@133|) (Integer__Order.__default.ltedef $ly@@480 |a#0@@165| |b#0@@133|)) (=> (Integer__Order.__default.ltedef $ly@@480 |a#0@@165| |b#0@@133|) (Integer__Order.__default.ltedef ($LS $ly@@480) |a#0@@165| |b#0@@133|)))) :qid |totalord.856:23| :skolemid |2466| :pattern ( (Integer__Order.__default.ltedef ($LS $ly@@480) |a#0@@165| |b#0@@133|)) )))
(assert (forall (($ly@@481 T@U) (|a#0@@166| Int) (|b#0@@134| Int) ) (!  (=> (= (type $ly@@481) LayerTypeType) (and (=> (Integer__Order.__default.ltedef $ly@@481 |a#0@@166| |b#0@@134|) (Integer__Order.__default.ltedef $LZ |a#0@@166| |b#0@@134|)) (=> (Integer__Order.__default.ltedef $LZ |a#0@@166| |b#0@@134|) (Integer__Order.__default.ltedef $ly@@481 |a#0@@166| |b#0@@134|)))) :qid |totalord.856:23| :skolemid |2467| :pattern ( (Integer__Order.__default.ltedef (AsFuelBottom $ly@@481) |a#0@@166| |b#0@@134|)) )))
(assert  (=> true (forall (($ly@@482 T@U) (|a#0@@167| Int) (|b#0@@135| Int) ) (!  (=> (and (= (type $ly@@482) LayerTypeType) true) true) :qid |totalord.856:23| :skolemid |2468| :pattern ( (Integer__Order.__default.ltedef $ly@@482 |a#0@@167| |b#0@@135|)) ))))
(assert (forall (($ly@@483 T@U) (|a#0@@168| Int) (|b#0@@136| Int) ) (!  (=> (= (type $ly@@483) LayerTypeType) (and (=> (|Integer__Order.__default.ltedef#requires| $ly@@483 |a#0@@168| |b#0@@136|) true) (=> true (|Integer__Order.__default.ltedef#requires| $ly@@483 |a#0@@168| |b#0@@136|)))) :qid |totalord.856:23| :skolemid |2469| :pattern ( (|Integer__Order.__default.ltedef#requires| $ly@@483 |a#0@@168| |b#0@@136|)) )))
(assert  (=> true (forall (($ly@@484 T@U) (|a#0@@169| Int) (|b#0@@137| Int) ) (!  (=> (and (= (type $ly@@484) LayerTypeType) true) (and (=> (Integer__Order.__default.ltedef ($LS $ly@@484) |a#0@@169| |b#0@@137|) (<= |a#0@@169| |b#0@@137|)) (=> (<= |a#0@@169| |b#0@@137|) (Integer__Order.__default.ltedef ($LS $ly@@484) |a#0@@169| |b#0@@137|)))) :qid |totalord.856:23| :skolemid |2470| :pattern ( (Integer__Order.__default.ltedef ($LS $ly@@484) |a#0@@169| |b#0@@137|)) ))))
(assert  (=> true (forall (($ly@@485 T@U) (|a#0@@170| Int) (|b#0@@138| Int) ) (!  (=> (and (= (type $ly@@485) LayerTypeType) true) (and (=> (Integer__Order.__default.ltedef ($LS $ly@@485) (LitInt |a#0@@170|) (LitInt |b#0@@138|)) (<= (LitInt |a#0@@170|) (LitInt |b#0@@138|))) (=> (<= (LitInt |a#0@@170|) (LitInt |b#0@@138|)) (Integer__Order.__default.ltedef ($LS $ly@@485) (LitInt |a#0@@170|) (LitInt |b#0@@138|))))) :qid |totalord.856:23| :weight 3 :skolemid |2471| :pattern ( (Integer__Order.__default.ltedef ($LS $ly@@485) (LitInt |a#0@@170|) (LitInt |b#0@@138|))) ))))
(assert (forall (($ly@@486 T@U) (|run#0@@148| T@U) (|needle#0@@61| Int) ) (!  (=> (and (= (type $ly@@486) LayerTypeType) (= (type |run#0@@148|) (SeqType BoxType))) (= (Integer__Order.__default.LargestLte ($LS $ly@@486) |run#0@@148| |needle#0@@61|) (Integer__Order.__default.LargestLte $ly@@486 |run#0@@148| |needle#0@@61|))) :qid |totalord.253:12| :skolemid |2472| :pattern ( (Integer__Order.__default.LargestLte ($LS $ly@@486) |run#0@@148| |needle#0@@61|)) )))
(assert (forall (($ly@@487 T@U) (|run#0@@149| T@U) (|needle#0@@62| Int) ) (!  (=> (and (= (type $ly@@487) LayerTypeType) (= (type |run#0@@149|) (SeqType BoxType))) (= (Integer__Order.__default.LargestLte $ly@@487 |run#0@@149| |needle#0@@62|) (Integer__Order.__default.LargestLte $LZ |run#0@@149| |needle#0@@62|))) :qid |totalord.253:12| :skolemid |2473| :pattern ( (Integer__Order.__default.LargestLte (AsFuelBottom $ly@@487) |run#0@@149| |needle#0@@62|)) )))
(assert (= (type StartFuel_Integer_Order._default.IsSorted) LayerTypeType))
(assert  (=> true (forall (($ly@@488 T@U) (|run#0@@150| T@U) (|needle#0@@63| Int) ) (!  (=> (and (and (= (type $ly@@488) LayerTypeType) (= (type |run#0@@150|) (SeqType BoxType))) (or (|Integer__Order.__default.LargestLte#canCall| |run#0@@150| |needle#0@@63|) (and ($Is |run#0@@150| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@150|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Integer__Order.__default.LargestLte $ly@@488 |run#0@@150| |needle#0@@63|)) (< (Integer__Order.__default.LargestLte $ly@@488 |run#0@@150| |needle#0@@63|) (|Seq#Length| |run#0@@150|))) (forall ((|i#0@@96| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@96|) (<= |i#0@@96| (Integer__Order.__default.LargestLte $ly@@488 |run#0@@150| |needle#0@@63|))) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@150| |i#0@@96|))) |needle#0@@63|))) :qid |totalord.256:20| :skolemid |2474| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@150| |i#0@@96|))) ))) (forall ((|i#1@@37| Int) ) (!  (=> true (=> (and (< (Integer__Order.__default.LargestLte $ly@@488 |run#0@@150| |needle#0@@63|) |i#1@@37|) (< |i#1@@37| (|Seq#Length| |run#0@@150|))) (Integer__Order.__default.lt |needle#0@@63| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@150| |i#1@@37|)))))) :qid |totalord.257:20| :skolemid |2475| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@150| |i#1@@37|))) ))) (=> (|Seq#Contains| |run#0@@150| ($Box (int_2_U |needle#0@@63|))) (and (<= (LitInt 0) (Integer__Order.__default.LargestLte $ly@@488 |run#0@@150| |needle#0@@63|)) (= (U_2_int ($Unbox intType (|Seq#Index| |run#0@@150| (Integer__Order.__default.LargestLte $ly@@488 |run#0@@150| |needle#0@@63|)))) |needle#0@@63|))))) :qid |totalord.253:12| :skolemid |2476| :pattern ( (Integer__Order.__default.LargestLte $ly@@488 |run#0@@150| |needle#0@@63|)) ))))
(assert (forall (($ly@@489 T@U) (|run#0@@151| T@U) (|needle#0@@64| Int) ) (!  (=> (and (and (= (type $ly@@489) LayerTypeType) (= (type |run#0@@151|) (SeqType BoxType))) ($Is |run#0@@151| (TSeq TInt))) (and (=> (|Integer__Order.__default.LargestLte#requires| $ly@@489 |run#0@@151| |needle#0@@64|) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@151|)) (=> (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@151|) (|Integer__Order.__default.LargestLte#requires| $ly@@489 |run#0@@151| |needle#0@@64|)))) :qid |totalord.253:12| :skolemid |2477| :pattern ( (|Integer__Order.__default.LargestLte#requires| $ly@@489 |run#0@@151| |needle#0@@64|)) )))
(assert  (and (= (type MoreFuel_Integer_Order._default.IsSorted0) LayerTypeType) (= (type StartFuelAssert_Integer_Order._default.IsSorted) LayerTypeType)))
(assert  (=> true (forall (($ly@@490 T@U) (|run#0@@152| T@U) (|needle#0@@65| Int) ) (!  (=> (and (and (= (type $ly@@490) LayerTypeType) (= (type |run#0@@152|) (SeqType BoxType))) (or (|Integer__Order.__default.LargestLte#canCall| |run#0@@152| |needle#0@@65|) (and ($Is |run#0@@152| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@152|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@152|) (LitInt 0))) (|Integer__Order.__default.lt#canCall| |needle#0@@65| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@152| (LitInt 0)))))) (=> (not (or (= (|Seq#Length| |run#0@@152|) (LitInt 0)) (Integer__Order.__default.lt |needle#0@@65| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@152| (LitInt 0))))))) (|Integer__Order.__default.LargestLte#canCall| (|Seq#Drop| |run#0@@152| (LitInt 1)) |needle#0@@65|))) (and (and (and (= StartFuel_Integer_Order._default.IsSorted ($LS MoreFuel_Integer_Order._default.IsSorted0)) (= StartFuelAssert_Integer_Order._default.IsSorted ($LS ($LS MoreFuel_Integer_Order._default.IsSorted0)))) (= (AsFuelBottom MoreFuel_Integer_Order._default.IsSorted0) MoreFuel_Integer_Order._default.IsSorted0)) (= (Integer__Order.__default.LargestLte ($LS $ly@@490) |run#0@@152| |needle#0@@65|) (ite  (or (= (|Seq#Length| |run#0@@152|) (LitInt 0)) (Integer__Order.__default.lt |needle#0@@65| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@152| (LitInt 0)))))) (- 0 1) (+ 1 (Integer__Order.__default.LargestLte $ly@@490 (|Seq#Drop| |run#0@@152| (LitInt 1)) |needle#0@@65|))))))) :qid |totalord.253:12| :skolemid |2478| :pattern ( (Integer__Order.__default.LargestLte ($LS $ly@@490) |run#0@@152| |needle#0@@65|)) ))))
(assert (= (type MoreFuel_Integer_Order._default.IsSorted1) LayerTypeType))
(assert  (=> true (forall (($ly@@491 T@U) (|run#0@@153| T@U) (|needle#0@@66| Int) ) (!  (=> (and (and (= (type $ly@@491) LayerTypeType) (= (type |run#0@@153|) (SeqType BoxType))) (or (|Integer__Order.__default.LargestLte#canCall| (Lit |run#0@@153|) (LitInt |needle#0@@66|)) (and ($Is |run#0@@153| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted (Lit |run#0@@153|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@153|)) (LitInt 0))) (|Integer__Order.__default.lt#canCall| (LitInt |needle#0@@66|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@153|) (LitInt 0)))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@153|)) (LitInt 0)) (Integer__Order.__default.lt (LitInt |needle#0@@66|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@153|) (LitInt 0))))))) (|Integer__Order.__default.LargestLte#canCall| (Lit (|Seq#Drop| (Lit |run#0@@153|) (LitInt 1))) (LitInt |needle#0@@66|)))) (and (and (and (= StartFuel_Integer_Order._default.IsSorted ($LS MoreFuel_Integer_Order._default.IsSorted1)) (= StartFuelAssert_Integer_Order._default.IsSorted ($LS ($LS MoreFuel_Integer_Order._default.IsSorted1)))) (= (AsFuelBottom MoreFuel_Integer_Order._default.IsSorted1) MoreFuel_Integer_Order._default.IsSorted1)) (= (Integer__Order.__default.LargestLte ($LS $ly@@491) (Lit |run#0@@153|) (LitInt |needle#0@@66|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@153|)) (LitInt 0)) (Integer__Order.__default.lt (LitInt |needle#0@@66|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@153|) (LitInt 0)))))) (- 0 1) (+ 1 (Integer__Order.__default.LargestLte ($LS $ly@@491) (Lit (|Seq#Drop| (Lit |run#0@@153|) (LitInt 1))) (LitInt |needle#0@@66|)))))))) :qid |totalord.253:12| :weight 3 :skolemid |2479| :pattern ( (Integer__Order.__default.LargestLte ($LS $ly@@491) (Lit |run#0@@153|) (LitInt |needle#0@@66|))) ))))
(assert (forall (($ly@@492 T@U) (|run#0@@154| T@U) (|needle#0@@67| Int) ) (!  (=> (and (= (type $ly@@492) LayerTypeType) (= (type |run#0@@154|) (SeqType BoxType))) (= (Integer__Order.__default.LargestLt ($LS $ly@@492) |run#0@@154| |needle#0@@67|) (Integer__Order.__default.LargestLt $ly@@492 |run#0@@154| |needle#0@@67|))) :qid |totalord.356:12| :skolemid |2480| :pattern ( (Integer__Order.__default.LargestLt ($LS $ly@@492) |run#0@@154| |needle#0@@67|)) )))
(assert (forall (($ly@@493 T@U) (|run#0@@155| T@U) (|needle#0@@68| Int) ) (!  (=> (and (= (type $ly@@493) LayerTypeType) (= (type |run#0@@155|) (SeqType BoxType))) (= (Integer__Order.__default.LargestLt $ly@@493 |run#0@@155| |needle#0@@68|) (Integer__Order.__default.LargestLt $LZ |run#0@@155| |needle#0@@68|))) :qid |totalord.356:12| :skolemid |2481| :pattern ( (Integer__Order.__default.LargestLt (AsFuelBottom $ly@@493) |run#0@@155| |needle#0@@68|)) )))
(assert  (=> true (forall (($ly@@494 T@U) (|run#0@@156| T@U) (|needle#0@@69| Int) ) (!  (=> (and (and (= (type $ly@@494) LayerTypeType) (= (type |run#0@@156|) (SeqType BoxType))) (or (|Integer__Order.__default.LargestLt#canCall| |run#0@@156| |needle#0@@69|) (and ($Is |run#0@@156| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@156|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Integer__Order.__default.LargestLt $ly@@494 |run#0@@156| |needle#0@@69|)) (< (Integer__Order.__default.LargestLt $ly@@494 |run#0@@156| |needle#0@@69|) (|Seq#Length| |run#0@@156|))) (forall ((|i#0@@97| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@97|) (<= |i#0@@97| (Integer__Order.__default.LargestLt $ly@@494 |run#0@@156| |needle#0@@69|))) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@156| |i#0@@97|))) |needle#0@@69|))) :qid |totalord.359:20| :skolemid |2482| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@156| |i#0@@97|))) ))) (forall ((|i#1@@38| Int) ) (!  (=> true (=> (and (< (Integer__Order.__default.LargestLt $ly@@494 |run#0@@156| |needle#0@@69|) |i#1@@38|) (< |i#1@@38| (|Seq#Length| |run#0@@156|))) (Integer__Order.__default.lte |needle#0@@69| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@156| |i#1@@38|)))))) :qid |totalord.360:20| :skolemid |2483| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@156| |i#1@@38|))) ))) (=> (|Seq#Contains| |run#0@@156| ($Box (int_2_U |needle#0@@69|))) (and (< (+ (Integer__Order.__default.LargestLt $ly@@494 |run#0@@156| |needle#0@@69|) 1) (|Seq#Length| |run#0@@156|)) (= (U_2_int ($Unbox intType (|Seq#Index| |run#0@@156| (+ (Integer__Order.__default.LargestLt $ly@@494 |run#0@@156| |needle#0@@69|) 1)))) |needle#0@@69|))))) :qid |totalord.356:12| :skolemid |2484| :pattern ( (Integer__Order.__default.LargestLt $ly@@494 |run#0@@156| |needle#0@@69|)) ))))
(assert (forall (($ly@@495 T@U) (|run#0@@157| T@U) (|needle#0@@70| Int) ) (!  (=> (and (and (= (type $ly@@495) LayerTypeType) (= (type |run#0@@157|) (SeqType BoxType))) ($Is |run#0@@157| (TSeq TInt))) (and (=> (|Integer__Order.__default.LargestLt#requires| $ly@@495 |run#0@@157| |needle#0@@70|) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@157|)) (=> (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@157|) (|Integer__Order.__default.LargestLt#requires| $ly@@495 |run#0@@157| |needle#0@@70|)))) :qid |totalord.356:12| :skolemid |2485| :pattern ( (|Integer__Order.__default.LargestLt#requires| $ly@@495 |run#0@@157| |needle#0@@70|)) )))
(assert (= (type MoreFuel_Integer_Order._default.IsSorted2) LayerTypeType))
(assert  (=> true (forall (($ly@@496 T@U) (|run#0@@158| T@U) (|needle#0@@71| Int) ) (!  (=> (and (and (= (type $ly@@496) LayerTypeType) (= (type |run#0@@158|) (SeqType BoxType))) (or (|Integer__Order.__default.LargestLt#canCall| |run#0@@158| |needle#0@@71|) (and ($Is |run#0@@158| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@158|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@158|) (LitInt 0))) (|Integer__Order.__default.lte#canCall| |needle#0@@71| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@158| (LitInt 0)))))) (=> (not (or (= (|Seq#Length| |run#0@@158|) (LitInt 0)) (Integer__Order.__default.lte |needle#0@@71| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@158| (LitInt 0))))))) (|Integer__Order.__default.LargestLt#canCall| (|Seq#Drop| |run#0@@158| (LitInt 1)) |needle#0@@71|))) (and (and (and (= StartFuel_Integer_Order._default.IsSorted ($LS MoreFuel_Integer_Order._default.IsSorted2)) (= StartFuelAssert_Integer_Order._default.IsSorted ($LS ($LS MoreFuel_Integer_Order._default.IsSorted2)))) (= (AsFuelBottom MoreFuel_Integer_Order._default.IsSorted2) MoreFuel_Integer_Order._default.IsSorted2)) (= (Integer__Order.__default.LargestLt ($LS $ly@@496) |run#0@@158| |needle#0@@71|) (ite  (or (= (|Seq#Length| |run#0@@158|) (LitInt 0)) (Integer__Order.__default.lte |needle#0@@71| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@158| (LitInt 0)))))) (- 0 1) (+ 1 (Integer__Order.__default.LargestLt $ly@@496 (|Seq#Drop| |run#0@@158| (LitInt 1)) |needle#0@@71|))))))) :qid |totalord.356:12| :skolemid |2486| :pattern ( (Integer__Order.__default.LargestLt ($LS $ly@@496) |run#0@@158| |needle#0@@71|)) ))))
(assert (= (type MoreFuel_Integer_Order._default.IsSorted3) LayerTypeType))
(assert  (=> true (forall (($ly@@497 T@U) (|run#0@@159| T@U) (|needle#0@@72| Int) ) (!  (=> (and (and (= (type $ly@@497) LayerTypeType) (= (type |run#0@@159|) (SeqType BoxType))) (or (|Integer__Order.__default.LargestLt#canCall| (Lit |run#0@@159|) (LitInt |needle#0@@72|)) (and ($Is |run#0@@159| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted (Lit |run#0@@159|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@159|)) (LitInt 0))) (|Integer__Order.__default.lte#canCall| (LitInt |needle#0@@72|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@159|) (LitInt 0)))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@159|)) (LitInt 0)) (Integer__Order.__default.lte (LitInt |needle#0@@72|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@159|) (LitInt 0))))))) (|Integer__Order.__default.LargestLt#canCall| (Lit (|Seq#Drop| (Lit |run#0@@159|) (LitInt 1))) (LitInt |needle#0@@72|)))) (and (and (and (= StartFuel_Integer_Order._default.IsSorted ($LS MoreFuel_Integer_Order._default.IsSorted3)) (= StartFuelAssert_Integer_Order._default.IsSorted ($LS ($LS MoreFuel_Integer_Order._default.IsSorted3)))) (= (AsFuelBottom MoreFuel_Integer_Order._default.IsSorted3) MoreFuel_Integer_Order._default.IsSorted3)) (= (Integer__Order.__default.LargestLt ($LS $ly@@497) (Lit |run#0@@159|) (LitInt |needle#0@@72|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@159|)) (LitInt 0)) (Integer__Order.__default.lte (LitInt |needle#0@@72|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@159|) (LitInt 0)))))) (- 0 1) (+ 1 (Integer__Order.__default.LargestLt ($LS $ly@@497) (Lit (|Seq#Drop| (Lit |run#0@@159|) (LitInt 1))) (LitInt |needle#0@@72|)))))))) :qid |totalord.356:12| :weight 3 :skolemid |2487| :pattern ( (Integer__Order.__default.LargestLt ($LS $ly@@497) (Lit |run#0@@159|) (LitInt |needle#0@@72|))) ))))
(assert (forall (($ly@@498 T@U) (|run#0@@160| T@U) (|needle#0@@73| Int) ) (!  (=> (and (= (type $ly@@498) LayerTypeType) (= (type |run#0@@160|) (SeqType BoxType))) (= (Integer__Order.__default.IndexOfFirstGte ($LS $ly@@498) |run#0@@160| |needle#0@@73|) (Integer__Order.__default.IndexOfFirstGte $ly@@498 |run#0@@160| |needle#0@@73|))) :qid |totalord.388:12| :skolemid |2488| :pattern ( (Integer__Order.__default.IndexOfFirstGte ($LS $ly@@498) |run#0@@160| |needle#0@@73|)) )))
(assert (forall (($ly@@499 T@U) (|run#0@@161| T@U) (|needle#0@@74| Int) ) (!  (=> (and (= (type $ly@@499) LayerTypeType) (= (type |run#0@@161|) (SeqType BoxType))) (= (Integer__Order.__default.IndexOfFirstGte $ly@@499 |run#0@@161| |needle#0@@74|) (Integer__Order.__default.IndexOfFirstGte $LZ |run#0@@161| |needle#0@@74|))) :qid |totalord.388:12| :skolemid |2489| :pattern ( (Integer__Order.__default.IndexOfFirstGte (AsFuelBottom $ly@@499) |run#0@@161| |needle#0@@74|)) )))
(assert  (=> true (forall (($ly@@500 T@U) (|run#0@@162| T@U) (|needle#0@@75| Int) ) (!  (=> (and (and (= (type $ly@@500) LayerTypeType) (= (type |run#0@@162|) (SeqType BoxType))) (or (|Integer__Order.__default.IndexOfFirstGte#canCall| |run#0@@162| |needle#0@@75|) (and ($Is |run#0@@162| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@162|)))) (and (and (and (<= (Integer__Order.__default.IndexOfFirstGte $ly@@500 |run#0@@162| |needle#0@@75|) (|Seq#Length| |run#0@@162|)) (forall ((|i#0@@98| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@98|) (< |i#0@@98| (Integer__Order.__default.IndexOfFirstGte $ly@@500 |run#0@@162| |needle#0@@75|))) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@162| |i#0@@98|))) |needle#0@@75|)) :qid |totalord.391:20| :skolemid |2490| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@162| |i#0@@98|))) ))) (forall ((|i#1@@39| Int) ) (!  (=> (and (<= (Integer__Order.__default.IndexOfFirstGte $ly@@500 |run#0@@162| |needle#0@@75|) |i#1@@39|) (< |i#1@@39| (|Seq#Length| |run#0@@162|))) (Integer__Order.__default.lte |needle#0@@75| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@162| |i#1@@39|))))) :qid |totalord.392:20| :skolemid |2491| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@162| |i#1@@39|))) ))) (<= (LitInt 0) (Integer__Order.__default.IndexOfFirstGte $ly@@500 |run#0@@162| |needle#0@@75|)))) :qid |totalord.388:12| :skolemid |2492| :pattern ( (Integer__Order.__default.IndexOfFirstGte $ly@@500 |run#0@@162| |needle#0@@75|)) ))))
(assert (forall (($ly@@501 T@U) (|run#0@@163| T@U) (|needle#0@@76| Int) ) (!  (=> (and (and (= (type $ly@@501) LayerTypeType) (= (type |run#0@@163|) (SeqType BoxType))) ($Is |run#0@@163| (TSeq TInt))) (and (=> (|Integer__Order.__default.IndexOfFirstGte#requires| $ly@@501 |run#0@@163| |needle#0@@76|) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@163|)) (=> (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@163|) (|Integer__Order.__default.IndexOfFirstGte#requires| $ly@@501 |run#0@@163| |needle#0@@76|)))) :qid |totalord.388:12| :skolemid |2493| :pattern ( (|Integer__Order.__default.IndexOfFirstGte#requires| $ly@@501 |run#0@@163| |needle#0@@76|)) )))
(assert (= (type MoreFuel_Integer_Order._default.IsSorted4) LayerTypeType))
(assert  (=> true (forall (($ly@@502 T@U) (|run#0@@164| T@U) (|needle#0@@77| Int) ) (!  (=> (and (and (= (type $ly@@502) LayerTypeType) (= (type |run#0@@164|) (SeqType BoxType))) (or (|Integer__Order.__default.IndexOfFirstGte#canCall| |run#0@@164| |needle#0@@77|) (and ($Is |run#0@@164| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@164|)))) (and (=> (not (= (|Seq#Length| |run#0@@164|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| TInt |run#0@@164|) (|Integer__Order.__default.lt#canCall| (U_2_int ($Unbox intType (Sequences.__default.Last TInt |run#0@@164|))) |needle#0@@77|)) (=> (not (Integer__Order.__default.lt (U_2_int ($Unbox intType (Sequences.__default.Last TInt |run#0@@164|))) |needle#0@@77|)) (and (|Sequences.__default.DropLast#canCall| TInt |run#0@@164|) (|Integer__Order.__default.IndexOfFirstGte#canCall| (Sequences.__default.DropLast TInt |run#0@@164|) |needle#0@@77|))))) (and (and (and (= StartFuel_Integer_Order._default.IsSorted ($LS MoreFuel_Integer_Order._default.IsSorted4)) (= StartFuelAssert_Integer_Order._default.IsSorted ($LS ($LS MoreFuel_Integer_Order._default.IsSorted4)))) (= (AsFuelBottom MoreFuel_Integer_Order._default.IsSorted4) MoreFuel_Integer_Order._default.IsSorted4)) (= (Integer__Order.__default.IndexOfFirstGte ($LS $ly@@502) |run#0@@164| |needle#0@@77|) (ite (= (|Seq#Length| |run#0@@164|) (LitInt 0)) 0 (ite (Integer__Order.__default.lt (U_2_int ($Unbox intType (Sequences.__default.Last TInt |run#0@@164|))) |needle#0@@77|) (|Seq#Length| |run#0@@164|) (Integer__Order.__default.IndexOfFirstGte $ly@@502 (Sequences.__default.DropLast TInt |run#0@@164|) |needle#0@@77|))))))) :qid |totalord.388:12| :skolemid |2494| :pattern ( (Integer__Order.__default.IndexOfFirstGte ($LS $ly@@502) |run#0@@164| |needle#0@@77|)) ))))
(assert (= (type MoreFuel_Integer_Order._default.IsSorted5) LayerTypeType))
(assert  (=> true (forall (($ly@@503 T@U) (|run#0@@165| T@U) (|needle#0@@78| Int) ) (!  (=> (and (and (= (type $ly@@503) LayerTypeType) (= (type |run#0@@165|) (SeqType BoxType))) (or (|Integer__Order.__default.IndexOfFirstGte#canCall| (Lit |run#0@@165|) (LitInt |needle#0@@78|)) (and ($Is |run#0@@165| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted (Lit |run#0@@165|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@165|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| TInt (Lit |run#0@@165|)) (|Integer__Order.__default.lt#canCall| (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |run#0@@165|))))) (LitInt |needle#0@@78|))) (=> (not (U_2_bool (Lit (bool_2_U (Integer__Order.__default.lt (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |run#0@@165|))))) (LitInt |needle#0@@78|)))))) (and (|Sequences.__default.DropLast#canCall| TInt (Lit |run#0@@165|)) (|Integer__Order.__default.IndexOfFirstGte#canCall| (Lit (Sequences.__default.DropLast TInt (Lit |run#0@@165|))) (LitInt |needle#0@@78|)))))) (and (and (and (= StartFuel_Integer_Order._default.IsSorted ($LS MoreFuel_Integer_Order._default.IsSorted5)) (= StartFuelAssert_Integer_Order._default.IsSorted ($LS ($LS MoreFuel_Integer_Order._default.IsSorted5)))) (= (AsFuelBottom MoreFuel_Integer_Order._default.IsSorted5) MoreFuel_Integer_Order._default.IsSorted5)) (= (Integer__Order.__default.IndexOfFirstGte ($LS $ly@@503) (Lit |run#0@@165|) (LitInt |needle#0@@78|)) (ite (= (|Seq#Length| (Lit |run#0@@165|)) (LitInt 0)) 0 (ite (Integer__Order.__default.lt (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |run#0@@165|))))) (LitInt |needle#0@@78|)) (|Seq#Length| (Lit |run#0@@165|)) (Integer__Order.__default.IndexOfFirstGte ($LS $ly@@503) (Lit (Sequences.__default.DropLast TInt (Lit |run#0@@165|))) (LitInt |needle#0@@78|)))))))) :qid |totalord.388:12| :weight 3 :skolemid |2495| :pattern ( (Integer__Order.__default.IndexOfFirstGte ($LS $ly@@503) (Lit |run#0@@165|) (LitInt |needle#0@@78|))) ))))
(assert (forall (($ly@@504 T@U) (|s#0@@150| T@U) (|key#0@@96| Int) (|lo#0@@27| Int) (|hi#0@@27| Int) ) (!  (=> (and (= (type $ly@@504) LayerTypeType) (= (type |s#0@@150|) (SeqType BoxType))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@504) |s#0@@150| |key#0@@96| |lo#0@@27| |hi#0@@27|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@504 |s#0@@150| |key#0@@96| |lo#0@@27| |hi#0@@27|))) :qid |totalord.421:12| :skolemid |2496| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@504) |s#0@@150| |key#0@@96| |lo#0@@27| |hi#0@@27|)) )))
(assert (forall (($ly@@505 T@U) (|s#0@@151| T@U) (|key#0@@97| Int) (|lo#0@@28| Int) (|hi#0@@28| Int) ) (!  (=> (and (= (type $ly@@505) LayerTypeType) (= (type |s#0@@151|) (SeqType BoxType))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@505 |s#0@@151| |key#0@@97| |lo#0@@28| |hi#0@@28|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $LZ |s#0@@151| |key#0@@97| |lo#0@@28| |hi#0@@28|))) :qid |totalord.421:12| :skolemid |2497| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter (AsFuelBottom $ly@@505) |s#0@@151| |key#0@@97| |lo#0@@28| |hi#0@@28|)) )))
(assert  (=> true (forall (($ly@@506 T@U) (|s#0@@152| T@U) (|key#0@@98| Int) (|lo#0@@29| Int) (|hi#0@@29| Int) ) (!  (=> (and (and (= (type $ly@@506) LayerTypeType) (= (type |s#0@@152|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@152| |key#0@@98| |lo#0@@29| |hi#0@@29|) (and ($Is |s#0@@152| (TSeq TInt)) (and (and (and (and (<= (LitInt 0) |lo#0@@29|) (< |lo#0@@29| |hi#0@@29|)) (<= |hi#0@@29| (+ (|Seq#Length| |s#0@@152|) 1))) (=> (> |lo#0@@29| 0) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@152| (- |lo#0@@29| 1)))) |key#0@@98|))) (=> (<= |hi#0@@29| (|Seq#Length| |s#0@@152|)) (Integer__Order.__default.lte |key#0@@98| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@152| (- |hi#0@@29| 1)))))))))) (and (and (and (<= (LitInt 0) (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@506 |s#0@@152| |key#0@@98| |lo#0@@29| |hi#0@@29|)) (<= (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@506 |s#0@@152| |key#0@@98| |lo#0@@29| |hi#0@@29|) (|Seq#Length| |s#0@@152|))) (=> (> (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@506 |s#0@@152| |key#0@@98| |lo#0@@29| |hi#0@@29|) 0) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@152| (- (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@506 |s#0@@152| |key#0@@98| |lo#0@@29| |hi#0@@29|) 1)))) |key#0@@98|))) (=> (< (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@506 |s#0@@152| |key#0@@98| |lo#0@@29| |hi#0@@29|) (|Seq#Length| |s#0@@152|)) (Integer__Order.__default.lte |key#0@@98| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@152| (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@506 |s#0@@152| |key#0@@98| |lo#0@@29| |hi#0@@29|)))))))) :qid |totalord.421:12| :skolemid |2498| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@506 |s#0@@152| |key#0@@98| |lo#0@@29| |hi#0@@29|)) ))))
(assert (forall (($ly@@507 T@U) (|s#0@@153| T@U) (|key#0@@99| Int) (|lo#0@@30| Int) (|hi#0@@30| Int) ) (!  (=> (and (and (= (type $ly@@507) LayerTypeType) (= (type |s#0@@153|) (SeqType BoxType))) ($Is |s#0@@153| (TSeq TInt))) (and (=> (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@507 |s#0@@153| |key#0@@99| |lo#0@@30| |hi#0@@30|) (and (and (and (and (<= (LitInt 0) |lo#0@@30|) (< |lo#0@@30| |hi#0@@30|)) (<= |hi#0@@30| (+ (|Seq#Length| |s#0@@153|) 1))) (=> (> |lo#0@@30| 0) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@153| (- |lo#0@@30| 1)))) |key#0@@99|))) (=> (<= |hi#0@@30| (|Seq#Length| |s#0@@153|)) (Integer__Order.__default.lte |key#0@@99| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@153| (- |hi#0@@30| 1)))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@30|) (< |lo#0@@30| |hi#0@@30|)) (<= |hi#0@@30| (+ (|Seq#Length| |s#0@@153|) 1))) (=> (> |lo#0@@30| 0) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@153| (- |lo#0@@30| 1)))) |key#0@@99|))) (=> (<= |hi#0@@30| (|Seq#Length| |s#0@@153|)) (Integer__Order.__default.lte |key#0@@99| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@153| (- |hi#0@@30| 1))))))) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@507 |s#0@@153| |key#0@@99| |lo#0@@30| |hi#0@@30|)))) :qid |totalord.421:12| :skolemid |2499| :pattern ( (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@507 |s#0@@153| |key#0@@99| |lo#0@@30| |hi#0@@30|)) )))
(assert  (=> true (forall (($ly@@508 T@U) (|s#0@@154| T@U) (|key#0@@100| Int) (|lo#0@@31| Int) (|hi#0@@31| Int) ) (!  (=> (and (and (= (type $ly@@508) LayerTypeType) (= (type |s#0@@154|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@154| |key#0@@100| |lo#0@@31| |hi#0@@31|) (and ($Is |s#0@@154| (TSeq TInt)) (and (and (and (and (<= (LitInt 0) |lo#0@@31|) (< |lo#0@@31| |hi#0@@31|)) (<= |hi#0@@31| (+ (|Seq#Length| |s#0@@154|) 1))) (=> (> |lo#0@@31| 0) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@154| (- |lo#0@@31| 1)))) |key#0@@100|))) (=> (<= |hi#0@@31| (|Seq#Length| |s#0@@154|)) (Integer__Order.__default.lte |key#0@@100| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@154| (- |hi#0@@31| 1)))))))))) (and (=> (< (+ |lo#0@@31| 1) |hi#0@@31|) (let ((|mid#0@@7| (Div (+ |lo#0@@31| |hi#0@@31|) (LitInt 2)))) (and (and (|Integer__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@154| (- |mid#0@@7| 1)))) |key#0@@100|) (=> (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@154| (- |mid#0@@7| 1)))) |key#0@@100|) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@154| |key#0@@100| |mid#0@@7| |hi#0@@31|))) (=> (not (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@154| (- |mid#0@@7| 1)))) |key#0@@100|)) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@154| |key#0@@100| |lo#0@@31| |mid#0@@7|))))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@508) |s#0@@154| |key#0@@100| |lo#0@@31| |hi#0@@31|) (ite (< (+ |lo#0@@31| 1) |hi#0@@31|) (let ((|mid#0@@8| (Div (+ |lo#0@@31| |hi#0@@31|) (LitInt 2)))) (ite (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@154| (- |mid#0@@8| 1)))) |key#0@@100|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@508 |s#0@@154| |key#0@@100| |mid#0@@8| |hi#0@@31|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@508 |s#0@@154| |key#0@@100| |lo#0@@31| |mid#0@@8|))) |lo#0@@31|)))) :qid |totalord.421:12| :skolemid |2500| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@508) |s#0@@154| |key#0@@100| |lo#0@@31| |hi#0@@31|)) ))))
(assert  (=> true (forall (($ly@@509 T@U) (|s#0@@155| T@U) (|key#0@@101| Int) (|lo#0@@32| Int) (|hi#0@@32| Int) ) (!  (=> (and (and (= (type $ly@@509) LayerTypeType) (= (type |s#0@@155|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@155| |key#0@@101| (LitInt |lo#0@@32|) (LitInt |hi#0@@32|)) (and ($Is |s#0@@155| (TSeq TInt)) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@32|)) (< |lo#0@@32| |hi#0@@32|)) (<= (LitInt |hi#0@@32|) (+ (|Seq#Length| |s#0@@155|) 1))) (=> (> |lo#0@@32| 0) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@155| (LitInt (- |lo#0@@32| 1))))) |key#0@@101|))) (=> (<= (LitInt |hi#0@@32|) (|Seq#Length| |s#0@@155|)) (Integer__Order.__default.lte |key#0@@101| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@155| (LitInt (- |hi#0@@32| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@32| 1) |hi#0@@32|)))) (let ((|mid#1@@7| (LitInt (Div (+ |lo#0@@32| |hi#0@@32|) (LitInt 2))))) (and (and (|Integer__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@155| (- |mid#1@@7| 1)))) |key#0@@101|) (=> (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@155| (- |mid#1@@7| 1)))) |key#0@@101|) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@155| |key#0@@101| |mid#1@@7| (LitInt |hi#0@@32|)))) (=> (not (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@155| (- |mid#1@@7| 1)))) |key#0@@101|)) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@155| |key#0@@101| (LitInt |lo#0@@32|) |mid#1@@7|))))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@509) |s#0@@155| |key#0@@101| (LitInt |lo#0@@32|) (LitInt |hi#0@@32|)) (ite (< (+ |lo#0@@32| 1) |hi#0@@32|) (let ((|mid#1@@8| (LitInt (Div (+ |lo#0@@32| |hi#0@@32|) (LitInt 2))))) (ite (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@155| (LitInt (- |mid#1@@8| 1))))) |key#0@@101|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@509) |s#0@@155| |key#0@@101| |mid#1@@8| (LitInt |hi#0@@32|)) (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@509) |s#0@@155| |key#0@@101| (LitInt |lo#0@@32|) |mid#1@@8|))) |lo#0@@32|)))) :qid |totalord.421:12| :weight 3 :skolemid |2501| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@509) |s#0@@155| |key#0@@101| (LitInt |lo#0@@32|) (LitInt |hi#0@@32|))) ))))
(assert  (=> true (forall (($ly@@510 T@U) (|s#0@@156| T@U) (|key#0@@102| Int) (|lo#0@@33| Int) (|hi#0@@33| Int) ) (!  (=> (and (and (= (type $ly@@510) LayerTypeType) (= (type |s#0@@156|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@156|) (LitInt |key#0@@102|) (LitInt |lo#0@@33|) (LitInt |hi#0@@33|)) (and ($Is |s#0@@156| (TSeq TInt)) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@33|)) (< |lo#0@@33| |hi#0@@33|)) (<= (LitInt |hi#0@@33|) (+ (|Seq#Length| (Lit |s#0@@156|)) 1))) (=> (> |lo#0@@33| 0) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@156|) (LitInt (- |lo#0@@33| 1))))) (LitInt |key#0@@102|)))) (=> (<= (LitInt |hi#0@@33|) (|Seq#Length| (Lit |s#0@@156|))) (Integer__Order.__default.lte (LitInt |key#0@@102|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@156|) (LitInt (- |hi#0@@33| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@33| 1) |hi#0@@33|)))) (let ((|mid#2@@7| (LitInt (Div (+ |lo#0@@33| |hi#0@@33|) (LitInt 2))))) (and (and (|Integer__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@156|) (- |mid#2@@7| 1)))) (LitInt |key#0@@102|)) (=> (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@156|) (- |mid#2@@7| 1)))) (LitInt |key#0@@102|)) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@156|) (LitInt |key#0@@102|) |mid#2@@7| (LitInt |hi#0@@33|)))) (=> (not (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@156|) (- |mid#2@@7| 1)))) (LitInt |key#0@@102|))) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@156|) (LitInt |key#0@@102|) (LitInt |lo#0@@33|) |mid#2@@7|))))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@510) (Lit |s#0@@156|) (LitInt |key#0@@102|) (LitInt |lo#0@@33|) (LitInt |hi#0@@33|)) (ite (< (+ |lo#0@@33| 1) |hi#0@@33|) (let ((|mid#2@@8| (LitInt (Div (+ |lo#0@@33| |hi#0@@33|) (LitInt 2))))) (ite (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@156|) (LitInt (- |mid#2@@8| 1))))) (LitInt |key#0@@102|)) (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@510) (Lit |s#0@@156|) (LitInt |key#0@@102|) |mid#2@@8| (LitInt |hi#0@@33|)) (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@510) (Lit |s#0@@156|) (LitInt |key#0@@102|) (LitInt |lo#0@@33|) |mid#2@@8|))) |lo#0@@33|)))) :qid |totalord.421:12| :weight 3 :skolemid |2502| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@510) (Lit |s#0@@156|) (LitInt |key#0@@102|) (LitInt |lo#0@@33|) (LitInt |hi#0@@33|))) ))))
(assert (forall (($ly@@511 T@U) (|s#0@@157| T@U) (|key#0@@103| Int) ) (!  (=> (and (= (type $ly@@511) LayerTypeType) (= (type |s#0@@157|) (SeqType BoxType))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@511) |s#0@@157| |key#0@@103|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@511 |s#0@@157| |key#0@@103|))) :qid |totalord.441:22| :skolemid |2503| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@511) |s#0@@157| |key#0@@103|)) )))
(assert (forall (($ly@@512 T@U) (|s#0@@158| T@U) (|key#0@@104| Int) ) (!  (=> (and (= (type $ly@@512) LayerTypeType) (= (type |s#0@@158|) (SeqType BoxType))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@512 |s#0@@158| |key#0@@104|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGte $LZ |s#0@@158| |key#0@@104|))) :qid |totalord.441:22| :skolemid |2504| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGte (AsFuelBottom $ly@@512) |s#0@@158| |key#0@@104|)) )))
(assert  (=> true (forall (($ly@@513 T@U) (|s#0@@159| T@U) (|key#0@@105| Int) ) (!  (=> (and (and (= (type $ly@@513) LayerTypeType) (= (type |s#0@@159|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@159| |key#0@@105|) ($Is |s#0@@159| (TSeq TInt)))) (and (and (and (<= (LitInt 0) (Integer__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@513 |s#0@@159| |key#0@@105|)) (<= (Integer__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@513 |s#0@@159| |key#0@@105|) (|Seq#Length| |s#0@@159|))) (=> (> (Integer__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@513 |s#0@@159| |key#0@@105|) 0) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@159| (- (Integer__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@513 |s#0@@159| |key#0@@105|) 1)))) |key#0@@105|))) (=> (< (Integer__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@513 |s#0@@159| |key#0@@105|) (|Seq#Length| |s#0@@159|)) (Integer__Order.__default.lte |key#0@@105| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@159| (Integer__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@513 |s#0@@159| |key#0@@105|)))))))) :qid |totalord.441:22| :skolemid |2505| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@513 |s#0@@159| |key#0@@105|)) ))))
(assert (forall (($ly@@514 T@U) (|s#0@@160| T@U) (|key#0@@106| Int) ) (!  (=> (and (and (= (type $ly@@514) LayerTypeType) (= (type |s#0@@160|) (SeqType BoxType))) ($Is |s#0@@160| (TSeq TInt))) (and (=> (|Integer__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@514 |s#0@@160| |key#0@@106|) true) (=> true (|Integer__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@514 |s#0@@160| |key#0@@106|)))) :qid |totalord.441:22| :skolemid |2506| :pattern ( (|Integer__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@514 |s#0@@160| |key#0@@106|)) )))
(assert  (=> true (forall (($ly@@515 T@U) (|s#0@@161| T@U) (|key#0@@107| Int) ) (!  (=> (and (and (= (type $ly@@515) LayerTypeType) (= (type |s#0@@161|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@161| |key#0@@107|) ($Is |s#0@@161| (TSeq TInt)))) (and (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@161| |key#0@@107| (LitInt 0) (+ (|Seq#Length| |s#0@@161|) 1)) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@515) |s#0@@161| |key#0@@107|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) |s#0@@161| |key#0@@107| (LitInt 0) (+ (|Seq#Length| |s#0@@161|) 1))))) :qid |totalord.441:22| :skolemid |2507| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@515) |s#0@@161| |key#0@@107|)) ))))
(assert  (=> true (forall (($ly@@516 T@U) (|s#0@@162| T@U) (|key#0@@108| Int) ) (!  (=> (and (and (= (type $ly@@516) LayerTypeType) (= (type |s#0@@162|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (Lit |s#0@@162|) (LitInt |key#0@@108|)) ($Is |s#0@@162| (TSeq TInt)))) (and (|Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@162|) (LitInt |key#0@@108|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@162|)) 1)) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@516) (Lit |s#0@@162|) (LitInt |key#0@@108|)) (Integer__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) (Lit |s#0@@162|) (LitInt |key#0@@108|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@162|)) 1))))) :qid |totalord.441:22| :weight 3 :skolemid |2508| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@516) (Lit |s#0@@162|) (LitInt |key#0@@108|))) ))))
(assert (forall (($ly@@517 T@U) (|run#0@@166| T@U) (|needle#0@@79| Int) ) (!  (=> (and (= (type $ly@@517) LayerTypeType) (= (type |run#0@@166|) (SeqType BoxType))) (= (Integer__Order.__default.IndexOfFirstGt ($LS $ly@@517) |run#0@@166| |needle#0@@79|) (Integer__Order.__default.IndexOfFirstGt $ly@@517 |run#0@@166| |needle#0@@79|))) :qid |totalord.449:12| :skolemid |2509| :pattern ( (Integer__Order.__default.IndexOfFirstGt ($LS $ly@@517) |run#0@@166| |needle#0@@79|)) )))
(assert (forall (($ly@@518 T@U) (|run#0@@167| T@U) (|needle#0@@80| Int) ) (!  (=> (and (= (type $ly@@518) LayerTypeType) (= (type |run#0@@167|) (SeqType BoxType))) (= (Integer__Order.__default.IndexOfFirstGt $ly@@518 |run#0@@167| |needle#0@@80|) (Integer__Order.__default.IndexOfFirstGt $LZ |run#0@@167| |needle#0@@80|))) :qid |totalord.449:12| :skolemid |2510| :pattern ( (Integer__Order.__default.IndexOfFirstGt (AsFuelBottom $ly@@518) |run#0@@167| |needle#0@@80|)) )))
(assert  (=> true (forall (($ly@@519 T@U) (|run#0@@168| T@U) (|needle#0@@81| Int) ) (!  (=> (and (and (= (type $ly@@519) LayerTypeType) (= (type |run#0@@168|) (SeqType BoxType))) (or (|Integer__Order.__default.IndexOfFirstGt#canCall| |run#0@@168| |needle#0@@81|) (and ($Is |run#0@@168| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@168|)))) (and (and (and (<= (Integer__Order.__default.IndexOfFirstGt $ly@@519 |run#0@@168| |needle#0@@81|) (|Seq#Length| |run#0@@168|)) (forall ((|i#0@@99| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@99|) (< |i#0@@99| (Integer__Order.__default.IndexOfFirstGt $ly@@519 |run#0@@168| |needle#0@@81|))) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@168| |i#0@@99|))) |needle#0@@81|)) :qid |totalord.452:20| :skolemid |2511| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@168| |i#0@@99|))) ))) (forall ((|i#1@@40| Int) ) (!  (=> (and (<= (Integer__Order.__default.IndexOfFirstGt $ly@@519 |run#0@@168| |needle#0@@81|) |i#1@@40|) (< |i#1@@40| (|Seq#Length| |run#0@@168|))) (Integer__Order.__default.lt |needle#0@@81| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@168| |i#1@@40|))))) :qid |totalord.453:20| :skolemid |2512| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@168| |i#1@@40|))) ))) (<= (LitInt 0) (Integer__Order.__default.IndexOfFirstGt $ly@@519 |run#0@@168| |needle#0@@81|)))) :qid |totalord.449:12| :skolemid |2513| :pattern ( (Integer__Order.__default.IndexOfFirstGt $ly@@519 |run#0@@168| |needle#0@@81|)) ))))
(assert (forall (($ly@@520 T@U) (|run#0@@169| T@U) (|needle#0@@82| Int) ) (!  (=> (and (and (= (type $ly@@520) LayerTypeType) (= (type |run#0@@169|) (SeqType BoxType))) ($Is |run#0@@169| (TSeq TInt))) (and (=> (|Integer__Order.__default.IndexOfFirstGt#requires| $ly@@520 |run#0@@169| |needle#0@@82|) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@169|)) (=> (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@169|) (|Integer__Order.__default.IndexOfFirstGt#requires| $ly@@520 |run#0@@169| |needle#0@@82|)))) :qid |totalord.449:12| :skolemid |2514| :pattern ( (|Integer__Order.__default.IndexOfFirstGt#requires| $ly@@520 |run#0@@169| |needle#0@@82|)) )))
(assert (= (type MoreFuel_Integer_Order._default.IsSorted6) LayerTypeType))
(assert  (=> true (forall (($ly@@521 T@U) (|run#0@@170| T@U) (|needle#0@@83| Int) ) (!  (=> (and (and (= (type $ly@@521) LayerTypeType) (= (type |run#0@@170|) (SeqType BoxType))) (or (|Integer__Order.__default.IndexOfFirstGt#canCall| |run#0@@170| |needle#0@@83|) (and ($Is |run#0@@170| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@170|)))) (and (=> (not (= (|Seq#Length| |run#0@@170|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| TInt |run#0@@170|) (|Integer__Order.__default.lte#canCall| (U_2_int ($Unbox intType (Sequences.__default.Last TInt |run#0@@170|))) |needle#0@@83|)) (=> (not (Integer__Order.__default.lte (U_2_int ($Unbox intType (Sequences.__default.Last TInt |run#0@@170|))) |needle#0@@83|)) (and (|Sequences.__default.DropLast#canCall| TInt |run#0@@170|) (|Integer__Order.__default.IndexOfFirstGt#canCall| (Sequences.__default.DropLast TInt |run#0@@170|) |needle#0@@83|))))) (and (and (and (= StartFuel_Integer_Order._default.IsSorted ($LS MoreFuel_Integer_Order._default.IsSorted6)) (= StartFuelAssert_Integer_Order._default.IsSorted ($LS ($LS MoreFuel_Integer_Order._default.IsSorted6)))) (= (AsFuelBottom MoreFuel_Integer_Order._default.IsSorted6) MoreFuel_Integer_Order._default.IsSorted6)) (= (Integer__Order.__default.IndexOfFirstGt ($LS $ly@@521) |run#0@@170| |needle#0@@83|) (ite (= (|Seq#Length| |run#0@@170|) (LitInt 0)) 0 (ite (Integer__Order.__default.lte (U_2_int ($Unbox intType (Sequences.__default.Last TInt |run#0@@170|))) |needle#0@@83|) (|Seq#Length| |run#0@@170|) (Integer__Order.__default.IndexOfFirstGt $ly@@521 (Sequences.__default.DropLast TInt |run#0@@170|) |needle#0@@83|))))))) :qid |totalord.449:12| :skolemid |2515| :pattern ( (Integer__Order.__default.IndexOfFirstGt ($LS $ly@@521) |run#0@@170| |needle#0@@83|)) ))))
(assert (= (type MoreFuel_Integer_Order._default.IsSorted7) LayerTypeType))
(assert  (=> true (forall (($ly@@522 T@U) (|run#0@@171| T@U) (|needle#0@@84| Int) ) (!  (=> (and (and (= (type $ly@@522) LayerTypeType) (= (type |run#0@@171|) (SeqType BoxType))) (or (|Integer__Order.__default.IndexOfFirstGt#canCall| (Lit |run#0@@171|) (LitInt |needle#0@@84|)) (and ($Is |run#0@@171| (TSeq TInt)) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted (Lit |run#0@@171|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@171|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| TInt (Lit |run#0@@171|)) (|Integer__Order.__default.lte#canCall| (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |run#0@@171|))))) (LitInt |needle#0@@84|))) (=> (not (U_2_bool (Lit (bool_2_U (Integer__Order.__default.lte (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |run#0@@171|))))) (LitInt |needle#0@@84|)))))) (and (|Sequences.__default.DropLast#canCall| TInt (Lit |run#0@@171|)) (|Integer__Order.__default.IndexOfFirstGt#canCall| (Lit (Sequences.__default.DropLast TInt (Lit |run#0@@171|))) (LitInt |needle#0@@84|)))))) (and (and (and (= StartFuel_Integer_Order._default.IsSorted ($LS MoreFuel_Integer_Order._default.IsSorted7)) (= StartFuelAssert_Integer_Order._default.IsSorted ($LS ($LS MoreFuel_Integer_Order._default.IsSorted7)))) (= (AsFuelBottom MoreFuel_Integer_Order._default.IsSorted7) MoreFuel_Integer_Order._default.IsSorted7)) (= (Integer__Order.__default.IndexOfFirstGt ($LS $ly@@522) (Lit |run#0@@171|) (LitInt |needle#0@@84|)) (ite (= (|Seq#Length| (Lit |run#0@@171|)) (LitInt 0)) 0 (ite (Integer__Order.__default.lte (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |run#0@@171|))))) (LitInt |needle#0@@84|)) (|Seq#Length| (Lit |run#0@@171|)) (Integer__Order.__default.IndexOfFirstGt ($LS $ly@@522) (Lit (Sequences.__default.DropLast TInt (Lit |run#0@@171|))) (LitInt |needle#0@@84|)))))))) :qid |totalord.449:12| :weight 3 :skolemid |2516| :pattern ( (Integer__Order.__default.IndexOfFirstGt ($LS $ly@@522) (Lit |run#0@@171|) (LitInt |needle#0@@84|))) ))))
(assert (forall (($ly@@523 T@U) (|s#0@@163| T@U) (|key#0@@109| Int) (|lo#0@@34| Int) (|hi#0@@34| Int) ) (!  (=> (and (= (type $ly@@523) LayerTypeType) (= (type |s#0@@163|) (SeqType BoxType))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@523) |s#0@@163| |key#0@@109| |lo#0@@34| |hi#0@@34|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@523 |s#0@@163| |key#0@@109| |lo#0@@34| |hi#0@@34|))) :qid |totalord.482:12| :skolemid |2517| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@523) |s#0@@163| |key#0@@109| |lo#0@@34| |hi#0@@34|)) )))
(assert (forall (($ly@@524 T@U) (|s#0@@164| T@U) (|key#0@@110| Int) (|lo#0@@35| Int) (|hi#0@@35| Int) ) (!  (=> (and (= (type $ly@@524) LayerTypeType) (= (type |s#0@@164|) (SeqType BoxType))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@524 |s#0@@164| |key#0@@110| |lo#0@@35| |hi#0@@35|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $LZ |s#0@@164| |key#0@@110| |lo#0@@35| |hi#0@@35|))) :qid |totalord.482:12| :skolemid |2518| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter (AsFuelBottom $ly@@524) |s#0@@164| |key#0@@110| |lo#0@@35| |hi#0@@35|)) )))
(assert  (=> true (forall (($ly@@525 T@U) (|s#0@@165| T@U) (|key#0@@111| Int) (|lo#0@@36| Int) (|hi#0@@36| Int) ) (!  (=> (and (and (= (type $ly@@525) LayerTypeType) (= (type |s#0@@165|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@165| |key#0@@111| |lo#0@@36| |hi#0@@36|) (and ($Is |s#0@@165| (TSeq TInt)) (and (and (and (and (<= (LitInt 0) |lo#0@@36|) (< |lo#0@@36| |hi#0@@36|)) (<= |hi#0@@36| (+ (|Seq#Length| |s#0@@165|) 1))) (=> (> |lo#0@@36| 0) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@165| (- |lo#0@@36| 1)))) |key#0@@111|))) (=> (<= |hi#0@@36| (|Seq#Length| |s#0@@165|)) (Integer__Order.__default.lt |key#0@@111| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@165| (- |hi#0@@36| 1)))))))))) (and (and (and (<= (LitInt 0) (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@525 |s#0@@165| |key#0@@111| |lo#0@@36| |hi#0@@36|)) (<= (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@525 |s#0@@165| |key#0@@111| |lo#0@@36| |hi#0@@36|) (|Seq#Length| |s#0@@165|))) (=> (> (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@525 |s#0@@165| |key#0@@111| |lo#0@@36| |hi#0@@36|) 0) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@165| (- (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@525 |s#0@@165| |key#0@@111| |lo#0@@36| |hi#0@@36|) 1)))) |key#0@@111|))) (=> (< (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@525 |s#0@@165| |key#0@@111| |lo#0@@36| |hi#0@@36|) (|Seq#Length| |s#0@@165|)) (Integer__Order.__default.lt |key#0@@111| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@165| (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@525 |s#0@@165| |key#0@@111| |lo#0@@36| |hi#0@@36|)))))))) :qid |totalord.482:12| :skolemid |2519| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@525 |s#0@@165| |key#0@@111| |lo#0@@36| |hi#0@@36|)) ))))
(assert (forall (($ly@@526 T@U) (|s#0@@166| T@U) (|key#0@@112| Int) (|lo#0@@37| Int) (|hi#0@@37| Int) ) (!  (=> (and (and (= (type $ly@@526) LayerTypeType) (= (type |s#0@@166|) (SeqType BoxType))) ($Is |s#0@@166| (TSeq TInt))) (and (=> (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@526 |s#0@@166| |key#0@@112| |lo#0@@37| |hi#0@@37|) (and (and (and (and (<= (LitInt 0) |lo#0@@37|) (< |lo#0@@37| |hi#0@@37|)) (<= |hi#0@@37| (+ (|Seq#Length| |s#0@@166|) 1))) (=> (> |lo#0@@37| 0) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@166| (- |lo#0@@37| 1)))) |key#0@@112|))) (=> (<= |hi#0@@37| (|Seq#Length| |s#0@@166|)) (Integer__Order.__default.lt |key#0@@112| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@166| (- |hi#0@@37| 1)))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@37|) (< |lo#0@@37| |hi#0@@37|)) (<= |hi#0@@37| (+ (|Seq#Length| |s#0@@166|) 1))) (=> (> |lo#0@@37| 0) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@166| (- |lo#0@@37| 1)))) |key#0@@112|))) (=> (<= |hi#0@@37| (|Seq#Length| |s#0@@166|)) (Integer__Order.__default.lt |key#0@@112| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@166| (- |hi#0@@37| 1))))))) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@526 |s#0@@166| |key#0@@112| |lo#0@@37| |hi#0@@37|)))) :qid |totalord.482:12| :skolemid |2520| :pattern ( (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@526 |s#0@@166| |key#0@@112| |lo#0@@37| |hi#0@@37|)) )))
(assert  (=> true (forall (($ly@@527 T@U) (|s#0@@167| T@U) (|key#0@@113| Int) (|lo#0@@38| Int) (|hi#0@@38| Int) ) (!  (=> (and (and (= (type $ly@@527) LayerTypeType) (= (type |s#0@@167|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@167| |key#0@@113| |lo#0@@38| |hi#0@@38|) (and ($Is |s#0@@167| (TSeq TInt)) (and (and (and (and (<= (LitInt 0) |lo#0@@38|) (< |lo#0@@38| |hi#0@@38|)) (<= |hi#0@@38| (+ (|Seq#Length| |s#0@@167|) 1))) (=> (> |lo#0@@38| 0) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@167| (- |lo#0@@38| 1)))) |key#0@@113|))) (=> (<= |hi#0@@38| (|Seq#Length| |s#0@@167|)) (Integer__Order.__default.lt |key#0@@113| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@167| (- |hi#0@@38| 1)))))))))) (and (=> (< (+ |lo#0@@38| 1) |hi#0@@38|) (let ((|mid#0@@9| (Div (+ |lo#0@@38| |hi#0@@38|) (LitInt 2)))) (and (and (|Integer__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@167| (- |mid#0@@9| 1)))) |key#0@@113|) (=> (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@167| (- |mid#0@@9| 1)))) |key#0@@113|) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@167| |key#0@@113| |mid#0@@9| |hi#0@@38|))) (=> (not (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@167| (- |mid#0@@9| 1)))) |key#0@@113|)) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@167| |key#0@@113| |lo#0@@38| |mid#0@@9|))))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@527) |s#0@@167| |key#0@@113| |lo#0@@38| |hi#0@@38|) (ite (< (+ |lo#0@@38| 1) |hi#0@@38|) (let ((|mid#0@@10| (Div (+ |lo#0@@38| |hi#0@@38|) (LitInt 2)))) (ite (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@167| (- |mid#0@@10| 1)))) |key#0@@113|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@527 |s#0@@167| |key#0@@113| |mid#0@@10| |hi#0@@38|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@527 |s#0@@167| |key#0@@113| |lo#0@@38| |mid#0@@10|))) |lo#0@@38|)))) :qid |totalord.482:12| :skolemid |2521| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@527) |s#0@@167| |key#0@@113| |lo#0@@38| |hi#0@@38|)) ))))
(assert  (=> true (forall (($ly@@528 T@U) (|s#0@@168| T@U) (|key#0@@114| Int) (|lo#0@@39| Int) (|hi#0@@39| Int) ) (!  (=> (and (and (= (type $ly@@528) LayerTypeType) (= (type |s#0@@168|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@168| |key#0@@114| (LitInt |lo#0@@39|) (LitInt |hi#0@@39|)) (and ($Is |s#0@@168| (TSeq TInt)) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@39|)) (< |lo#0@@39| |hi#0@@39|)) (<= (LitInt |hi#0@@39|) (+ (|Seq#Length| |s#0@@168|) 1))) (=> (> |lo#0@@39| 0) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@168| (LitInt (- |lo#0@@39| 1))))) |key#0@@114|))) (=> (<= (LitInt |hi#0@@39|) (|Seq#Length| |s#0@@168|)) (Integer__Order.__default.lt |key#0@@114| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@168| (LitInt (- |hi#0@@39| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@39| 1) |hi#0@@39|)))) (let ((|mid#1@@9| (LitInt (Div (+ |lo#0@@39| |hi#0@@39|) (LitInt 2))))) (and (and (|Integer__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@168| (- |mid#1@@9| 1)))) |key#0@@114|) (=> (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@168| (- |mid#1@@9| 1)))) |key#0@@114|) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@168| |key#0@@114| |mid#1@@9| (LitInt |hi#0@@39|)))) (=> (not (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@168| (- |mid#1@@9| 1)))) |key#0@@114|)) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@168| |key#0@@114| (LitInt |lo#0@@39|) |mid#1@@9|))))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@528) |s#0@@168| |key#0@@114| (LitInt |lo#0@@39|) (LitInt |hi#0@@39|)) (ite (< (+ |lo#0@@39| 1) |hi#0@@39|) (let ((|mid#1@@10| (LitInt (Div (+ |lo#0@@39| |hi#0@@39|) (LitInt 2))))) (ite (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@168| (LitInt (- |mid#1@@10| 1))))) |key#0@@114|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@528) |s#0@@168| |key#0@@114| |mid#1@@10| (LitInt |hi#0@@39|)) (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@528) |s#0@@168| |key#0@@114| (LitInt |lo#0@@39|) |mid#1@@10|))) |lo#0@@39|)))) :qid |totalord.482:12| :weight 3 :skolemid |2522| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@528) |s#0@@168| |key#0@@114| (LitInt |lo#0@@39|) (LitInt |hi#0@@39|))) ))))
(assert  (=> true (forall (($ly@@529 T@U) (|s#0@@169| T@U) (|key#0@@115| Int) (|lo#0@@40| Int) (|hi#0@@40| Int) ) (!  (=> (and (and (= (type $ly@@529) LayerTypeType) (= (type |s#0@@169|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@169|) (LitInt |key#0@@115|) (LitInt |lo#0@@40|) (LitInt |hi#0@@40|)) (and ($Is |s#0@@169| (TSeq TInt)) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@40|)) (< |lo#0@@40| |hi#0@@40|)) (<= (LitInt |hi#0@@40|) (+ (|Seq#Length| (Lit |s#0@@169|)) 1))) (=> (> |lo#0@@40| 0) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@169|) (LitInt (- |lo#0@@40| 1))))) (LitInt |key#0@@115|)))) (=> (<= (LitInt |hi#0@@40|) (|Seq#Length| (Lit |s#0@@169|))) (Integer__Order.__default.lt (LitInt |key#0@@115|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@169|) (LitInt (- |hi#0@@40| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@40| 1) |hi#0@@40|)))) (let ((|mid#2@@9| (LitInt (Div (+ |lo#0@@40| |hi#0@@40|) (LitInt 2))))) (and (and (|Integer__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@169|) (- |mid#2@@9| 1)))) (LitInt |key#0@@115|)) (=> (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@169|) (- |mid#2@@9| 1)))) (LitInt |key#0@@115|)) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@169|) (LitInt |key#0@@115|) |mid#2@@9| (LitInt |hi#0@@40|)))) (=> (not (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@169|) (- |mid#2@@9| 1)))) (LitInt |key#0@@115|))) (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@169|) (LitInt |key#0@@115|) (LitInt |lo#0@@40|) |mid#2@@9|))))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@529) (Lit |s#0@@169|) (LitInt |key#0@@115|) (LitInt |lo#0@@40|) (LitInt |hi#0@@40|)) (ite (< (+ |lo#0@@40| 1) |hi#0@@40|) (let ((|mid#2@@10| (LitInt (Div (+ |lo#0@@40| |hi#0@@40|) (LitInt 2))))) (ite (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@169|) (LitInt (- |mid#2@@10| 1))))) (LitInt |key#0@@115|)) (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@529) (Lit |s#0@@169|) (LitInt |key#0@@115|) |mid#2@@10| (LitInt |hi#0@@40|)) (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@529) (Lit |s#0@@169|) (LitInt |key#0@@115|) (LitInt |lo#0@@40|) |mid#2@@10|))) |lo#0@@40|)))) :qid |totalord.482:12| :weight 3 :skolemid |2523| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@529) (Lit |s#0@@169|) (LitInt |key#0@@115|) (LitInt |lo#0@@40|) (LitInt |hi#0@@40|))) ))))
(assert (forall (($ly@@530 T@U) (|s#0@@170| T@U) (|key#0@@116| Int) ) (!  (=> (and (= (type $ly@@530) LayerTypeType) (= (type |s#0@@170|) (SeqType BoxType))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@530) |s#0@@170| |key#0@@116|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@530 |s#0@@170| |key#0@@116|))) :qid |totalord.502:22| :skolemid |2524| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@530) |s#0@@170| |key#0@@116|)) )))
(assert (forall (($ly@@531 T@U) (|s#0@@171| T@U) (|key#0@@117| Int) ) (!  (=> (and (= (type $ly@@531) LayerTypeType) (= (type |s#0@@171|) (SeqType BoxType))) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@531 |s#0@@171| |key#0@@117|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGt $LZ |s#0@@171| |key#0@@117|))) :qid |totalord.502:22| :skolemid |2525| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGt (AsFuelBottom $ly@@531) |s#0@@171| |key#0@@117|)) )))
(assert  (=> true (forall (($ly@@532 T@U) (|s#0@@172| T@U) (|key#0@@118| Int) ) (!  (=> (and (and (= (type $ly@@532) LayerTypeType) (= (type |s#0@@172|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@172| |key#0@@118|) ($Is |s#0@@172| (TSeq TInt)))) (and (and (and (<= (LitInt 0) (Integer__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@532 |s#0@@172| |key#0@@118|)) (<= (Integer__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@532 |s#0@@172| |key#0@@118|) (|Seq#Length| |s#0@@172|))) (=> (> (Integer__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@532 |s#0@@172| |key#0@@118|) 0) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@172| (- (Integer__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@532 |s#0@@172| |key#0@@118|) 1)))) |key#0@@118|))) (=> (< (Integer__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@532 |s#0@@172| |key#0@@118|) (|Seq#Length| |s#0@@172|)) (Integer__Order.__default.lt |key#0@@118| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@172| (Integer__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@532 |s#0@@172| |key#0@@118|)))))))) :qid |totalord.502:22| :skolemid |2526| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@532 |s#0@@172| |key#0@@118|)) ))))
(assert (forall (($ly@@533 T@U) (|s#0@@173| T@U) (|key#0@@119| Int) ) (!  (=> (and (and (= (type $ly@@533) LayerTypeType) (= (type |s#0@@173|) (SeqType BoxType))) ($Is |s#0@@173| (TSeq TInt))) (and (=> (|Integer__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@533 |s#0@@173| |key#0@@119|) true) (=> true (|Integer__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@533 |s#0@@173| |key#0@@119|)))) :qid |totalord.502:22| :skolemid |2527| :pattern ( (|Integer__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@533 |s#0@@173| |key#0@@119|)) )))
(assert  (=> true (forall (($ly@@534 T@U) (|s#0@@174| T@U) (|key#0@@120| Int) ) (!  (=> (and (and (= (type $ly@@534) LayerTypeType) (= (type |s#0@@174|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@174| |key#0@@120|) ($Is |s#0@@174| (TSeq TInt)))) (and (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@174| |key#0@@120| (LitInt 0) (+ (|Seq#Length| |s#0@@174|) 1)) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@534) |s#0@@174| |key#0@@120|) (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) |s#0@@174| |key#0@@120| (LitInt 0) (+ (|Seq#Length| |s#0@@174|) 1))))) :qid |totalord.502:22| :skolemid |2528| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@534) |s#0@@174| |key#0@@120|)) ))))
(assert  (=> true (forall (($ly@@535 T@U) (|s#0@@175| T@U) (|key#0@@121| Int) ) (!  (=> (and (and (= (type $ly@@535) LayerTypeType) (= (type |s#0@@175|) (SeqType BoxType))) (or (|Integer__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (Lit |s#0@@175|) (LitInt |key#0@@121|)) ($Is |s#0@@175| (TSeq TInt)))) (and (|Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@175|) (LitInt |key#0@@121|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@175|)) 1)) (= (Integer__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@535) (Lit |s#0@@175|) (LitInt |key#0@@121|)) (Integer__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) (Lit |s#0@@175|) (LitInt |key#0@@121|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@175|)) 1))))) :qid |totalord.502:22| :weight 3 :skolemid |2529| :pattern ( (Integer__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@535) (Lit |s#0@@175|) (LitInt |key#0@@121|))) ))))
(assert  (=> true (forall ((|a#0@@171| T@U) (|b#0@@139| T@U) ) (!  (=> (and (and (= (type |a#0@@171|) (MapType0Type BoxType boolType)) (= (type |b#0@@139|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.SetAllLte#canCall| |a#0@@171| |b#0@@139|) (and ($Is |a#0@@171| (TSet TInt)) ($Is |b#0@@139| (TSet TInt))))) true) :qid |totalord.675:23| :skolemid |2530| :pattern ( (Integer__Order.__default.SetAllLte |a#0@@171| |b#0@@139|)) ))))
(assert (forall ((|a#0@@172| T@U) (|b#0@@140| T@U) ) (!  (=> (and (and (= (type |a#0@@172|) (MapType0Type BoxType boolType)) (= (type |b#0@@140|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@172| (TSet TInt)) ($Is |b#0@@140| (TSet TInt)))) (and (=> (|Integer__Order.__default.SetAllLte#requires| |a#0@@172| |b#0@@140|) true) (=> true (|Integer__Order.__default.SetAllLte#requires| |a#0@@172| |b#0@@140|)))) :qid |totalord.675:23| :skolemid |2531| :pattern ( (|Integer__Order.__default.SetAllLte#requires| |a#0@@172| |b#0@@140|)) )))
(assert  (=> true (forall ((|a#0@@173| T@U) (|b#0@@141| T@U) ) (!  (=> (and (and (= (type |a#0@@173|) (MapType0Type BoxType boolType)) (= (type |b#0@@141|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.SetAllLte#canCall| |a#0@@173| |b#0@@141|) (and ($Is |a#0@@173| (TSet TInt)) ($Is |b#0@@141| (TSet TInt))))) (and (forall ((|x#0@@13| Int) (|y#0@@19| Int) ) (!  (=> (U_2_bool (MapType0Select |b#0@@141| ($Box (int_2_U |y#0@@19|)))) (|Integer__Order.__default.lte#canCall| |x#0@@13| |y#0@@19|)) :qid |totalord.676:12| :skolemid |2532| :pattern ( (Integer__Order.__default.lte |x#0@@13| |y#0@@19|)) :pattern ( (MapType0Select |b#0@@141| ($Box (int_2_U |y#0@@19|))) (MapType0Select |a#0@@173| ($Box (int_2_U |x#0@@13|)))) )) (and (=> (Integer__Order.__default.SetAllLte |a#0@@173| |b#0@@141|) (forall ((|x#0@@14| Int) (|y#0@@20| Int) ) (!  (=> true (=> (and (U_2_bool (MapType0Select |a#0@@173| ($Box (int_2_U |x#0@@14|)))) (U_2_bool (MapType0Select |b#0@@141| ($Box (int_2_U |y#0@@20|))))) (Integer__Order.__default.lte |x#0@@14| |y#0@@20|))) :qid |totalord.676:12| :skolemid |2533| :pattern ( (Integer__Order.__default.lte |x#0@@14| |y#0@@20|)) :pattern ( (MapType0Select |b#0@@141| ($Box (int_2_U |y#0@@20|))) (MapType0Select |a#0@@173| ($Box (int_2_U |x#0@@14|)))) ))) (=> (forall ((|x#0@@15| Int) (|y#0@@21| Int) ) (!  (=> true (=> (and (U_2_bool (MapType0Select |a#0@@173| ($Box (int_2_U |x#0@@15|)))) (U_2_bool (MapType0Select |b#0@@141| ($Box (int_2_U |y#0@@21|))))) (Integer__Order.__default.lte |x#0@@15| |y#0@@21|))) :qid |totalord.676:12| :skolemid |2533| :pattern ( (Integer__Order.__default.lte |x#0@@15| |y#0@@21|)) :pattern ( (MapType0Select |b#0@@141| ($Box (int_2_U |y#0@@21|))) (MapType0Select |a#0@@173| ($Box (int_2_U |x#0@@15|)))) )) (Integer__Order.__default.SetAllLte |a#0@@173| |b#0@@141|))))) :qid |totalord.675:23| :skolemid |2534| :pattern ( (Integer__Order.__default.SetAllLte |a#0@@173| |b#0@@141|)) ))))
(assert  (=> true (forall ((|a#0@@174| T@U) (|b#0@@142| T@U) ) (!  (=> (and (and (= (type |a#0@@174|) (MapType0Type BoxType boolType)) (= (type |b#0@@142|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.SetAllLte#canCall| (Lit |a#0@@174|) (Lit |b#0@@142|)) (and ($Is |a#0@@174| (TSet TInt)) ($Is |b#0@@142| (TSet TInt))))) (and (forall ((|x#1@@11| Int) (|y#1@@11| Int) ) (!  (=> (U_2_bool (MapType0Select (Lit |b#0@@142|) ($Box (int_2_U |y#1@@11|)))) (|Integer__Order.__default.lte#canCall| |x#1@@11| |y#1@@11|)) :qid |totalord.676:12| :skolemid |2535| :pattern ( (Integer__Order.__default.lte |x#1@@11| |y#1@@11|)) :pattern ( (MapType0Select |b#0@@142| ($Box (int_2_U |y#1@@11|))) (MapType0Select |a#0@@174| ($Box (int_2_U |x#1@@11|)))) )) (and (=> (Integer__Order.__default.SetAllLte (Lit |a#0@@174|) (Lit |b#0@@142|)) (forall ((|x#1@@12| Int) (|y#1@@12| Int) ) (!  (=> true (=> (and (U_2_bool (MapType0Select (Lit |a#0@@174|) ($Box (int_2_U |x#1@@12|)))) (U_2_bool (MapType0Select (Lit |b#0@@142|) ($Box (int_2_U |y#1@@12|))))) (Integer__Order.__default.lte |x#1@@12| |y#1@@12|))) :qid |totalord.676:12| :skolemid |2536| :pattern ( (Integer__Order.__default.lte |x#1@@12| |y#1@@12|)) :pattern ( (MapType0Select |b#0@@142| ($Box (int_2_U |y#1@@12|))) (MapType0Select |a#0@@174| ($Box (int_2_U |x#1@@12|)))) ))) (=> (forall ((|x#1@@13| Int) (|y#1@@13| Int) ) (!  (=> true (=> (and (U_2_bool (MapType0Select (Lit |a#0@@174|) ($Box (int_2_U |x#1@@13|)))) (U_2_bool (MapType0Select (Lit |b#0@@142|) ($Box (int_2_U |y#1@@13|))))) (Integer__Order.__default.lte |x#1@@13| |y#1@@13|))) :qid |totalord.676:12| :skolemid |2536| :pattern ( (Integer__Order.__default.lte |x#1@@13| |y#1@@13|)) :pattern ( (MapType0Select |b#0@@142| ($Box (int_2_U |y#1@@13|))) (MapType0Select |a#0@@174| ($Box (int_2_U |x#1@@13|)))) )) (Integer__Order.__default.SetAllLte (Lit |a#0@@174|) (Lit |b#0@@142|)))))) :qid |totalord.675:23| :weight 3 :skolemid |2537| :pattern ( (Integer__Order.__default.SetAllLte (Lit |a#0@@174|) (Lit |b#0@@142|))) ))))
(assert  (=> true (forall ((|a#0@@175| T@U) (|b#0@@143| T@U) ) (!  (=> (and (and (= (type |a#0@@175|) (MapType0Type BoxType boolType)) (= (type |b#0@@143|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.SetAllLt#canCall| |a#0@@175| |b#0@@143|) (and ($Is |a#0@@175| (TSet TInt)) ($Is |b#0@@143| (TSet TInt))))) true) :qid |totalord.679:22| :skolemid |2538| :pattern ( (Integer__Order.__default.SetAllLt |a#0@@175| |b#0@@143|)) ))))
(assert (forall ((|a#0@@176| T@U) (|b#0@@144| T@U) ) (!  (=> (and (and (= (type |a#0@@176|) (MapType0Type BoxType boolType)) (= (type |b#0@@144|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@176| (TSet TInt)) ($Is |b#0@@144| (TSet TInt)))) (and (=> (|Integer__Order.__default.SetAllLt#requires| |a#0@@176| |b#0@@144|) true) (=> true (|Integer__Order.__default.SetAllLt#requires| |a#0@@176| |b#0@@144|)))) :qid |totalord.679:22| :skolemid |2539| :pattern ( (|Integer__Order.__default.SetAllLt#requires| |a#0@@176| |b#0@@144|)) )))
(assert  (=> true (forall ((|a#0@@177| T@U) (|b#0@@145| T@U) ) (!  (=> (and (and (= (type |a#0@@177|) (MapType0Type BoxType boolType)) (= (type |b#0@@145|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.SetAllLt#canCall| |a#0@@177| |b#0@@145|) (and ($Is |a#0@@177| (TSet TInt)) ($Is |b#0@@145| (TSet TInt))))) (and (forall ((|x#0@@16| Int) (|y#0@@22| Int) ) (!  (=> (U_2_bool (MapType0Select |b#0@@145| ($Box (int_2_U |y#0@@22|)))) (|Integer__Order.__default.lt#canCall| |x#0@@16| |y#0@@22|)) :qid |totalord.680:12| :skolemid |2540| :pattern ( (Integer__Order.__default.lt |x#0@@16| |y#0@@22|)) :pattern ( (MapType0Select |b#0@@145| ($Box (int_2_U |y#0@@22|))) (MapType0Select |a#0@@177| ($Box (int_2_U |x#0@@16|)))) )) (and (=> (Integer__Order.__default.SetAllLt |a#0@@177| |b#0@@145|) (forall ((|x#0@@17| Int) (|y#0@@23| Int) ) (!  (=> true (=> (and (U_2_bool (MapType0Select |a#0@@177| ($Box (int_2_U |x#0@@17|)))) (U_2_bool (MapType0Select |b#0@@145| ($Box (int_2_U |y#0@@23|))))) (Integer__Order.__default.lt |x#0@@17| |y#0@@23|))) :qid |totalord.680:12| :skolemid |2541| :pattern ( (Integer__Order.__default.lt |x#0@@17| |y#0@@23|)) :pattern ( (MapType0Select |b#0@@145| ($Box (int_2_U |y#0@@23|))) (MapType0Select |a#0@@177| ($Box (int_2_U |x#0@@17|)))) ))) (=> (forall ((|x#0@@18| Int) (|y#0@@24| Int) ) (!  (=> true (=> (and (U_2_bool (MapType0Select |a#0@@177| ($Box (int_2_U |x#0@@18|)))) (U_2_bool (MapType0Select |b#0@@145| ($Box (int_2_U |y#0@@24|))))) (Integer__Order.__default.lt |x#0@@18| |y#0@@24|))) :qid |totalord.680:12| :skolemid |2541| :pattern ( (Integer__Order.__default.lt |x#0@@18| |y#0@@24|)) :pattern ( (MapType0Select |b#0@@145| ($Box (int_2_U |y#0@@24|))) (MapType0Select |a#0@@177| ($Box (int_2_U |x#0@@18|)))) )) (Integer__Order.__default.SetAllLt |a#0@@177| |b#0@@145|))))) :qid |totalord.679:22| :skolemid |2542| :pattern ( (Integer__Order.__default.SetAllLt |a#0@@177| |b#0@@145|)) ))))
(assert  (=> true (forall ((|a#0@@178| T@U) (|b#0@@146| T@U) ) (!  (=> (and (and (= (type |a#0@@178|) (MapType0Type BoxType boolType)) (= (type |b#0@@146|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.SetAllLt#canCall| (Lit |a#0@@178|) (Lit |b#0@@146|)) (and ($Is |a#0@@178| (TSet TInt)) ($Is |b#0@@146| (TSet TInt))))) (and (forall ((|x#1@@14| Int) (|y#1@@14| Int) ) (!  (=> (U_2_bool (MapType0Select (Lit |b#0@@146|) ($Box (int_2_U |y#1@@14|)))) (|Integer__Order.__default.lt#canCall| |x#1@@14| |y#1@@14|)) :qid |totalord.680:12| :skolemid |2543| :pattern ( (Integer__Order.__default.lt |x#1@@14| |y#1@@14|)) :pattern ( (MapType0Select |b#0@@146| ($Box (int_2_U |y#1@@14|))) (MapType0Select |a#0@@178| ($Box (int_2_U |x#1@@14|)))) )) (and (=> (Integer__Order.__default.SetAllLt (Lit |a#0@@178|) (Lit |b#0@@146|)) (forall ((|x#1@@15| Int) (|y#1@@15| Int) ) (!  (=> true (=> (and (U_2_bool (MapType0Select (Lit |a#0@@178|) ($Box (int_2_U |x#1@@15|)))) (U_2_bool (MapType0Select (Lit |b#0@@146|) ($Box (int_2_U |y#1@@15|))))) (Integer__Order.__default.lt |x#1@@15| |y#1@@15|))) :qid |totalord.680:12| :skolemid |2544| :pattern ( (Integer__Order.__default.lt |x#1@@15| |y#1@@15|)) :pattern ( (MapType0Select |b#0@@146| ($Box (int_2_U |y#1@@15|))) (MapType0Select |a#0@@178| ($Box (int_2_U |x#1@@15|)))) ))) (=> (forall ((|x#1@@16| Int) (|y#1@@16| Int) ) (!  (=> true (=> (and (U_2_bool (MapType0Select (Lit |a#0@@178|) ($Box (int_2_U |x#1@@16|)))) (U_2_bool (MapType0Select (Lit |b#0@@146|) ($Box (int_2_U |y#1@@16|))))) (Integer__Order.__default.lt |x#1@@16| |y#1@@16|))) :qid |totalord.680:12| :skolemid |2544| :pattern ( (Integer__Order.__default.lt |x#1@@16| |y#1@@16|)) :pattern ( (MapType0Select |b#0@@146| ($Box (int_2_U |y#1@@16|))) (MapType0Select |a#0@@178| ($Box (int_2_U |x#1@@16|)))) )) (Integer__Order.__default.SetAllLt (Lit |a#0@@178|) (Lit |b#0@@146|)))))) :qid |totalord.679:22| :weight 3 :skolemid |2545| :pattern ( (Integer__Order.__default.SetAllLt (Lit |a#0@@178|) (Lit |b#0@@146|))) ))))
(assert (forall (($ly@@536 T@U) (|a#0@@179| Int) ) (!  (=> (= (type $ly@@536) LayerTypeType) (and (=> (Integer__Order.__default.NotMinimum ($LS $ly@@536) |a#0@@179|) (Integer__Order.__default.NotMinimum $ly@@536 |a#0@@179|)) (=> (Integer__Order.__default.NotMinimum $ly@@536 |a#0@@179|) (Integer__Order.__default.NotMinimum ($LS $ly@@536) |a#0@@179|)))) :qid |totalord.696:23| :skolemid |2546| :pattern ( (Integer__Order.__default.NotMinimum ($LS $ly@@536) |a#0@@179|)) )))
(assert (forall (($ly@@537 T@U) (|a#0@@180| Int) ) (!  (=> (= (type $ly@@537) LayerTypeType) (and (=> (Integer__Order.__default.NotMinimum $ly@@537 |a#0@@180|) (Integer__Order.__default.NotMinimum $LZ |a#0@@180|)) (=> (Integer__Order.__default.NotMinimum $LZ |a#0@@180|) (Integer__Order.__default.NotMinimum $ly@@537 |a#0@@180|)))) :qid |totalord.696:23| :skolemid |2547| :pattern ( (Integer__Order.__default.NotMinimum (AsFuelBottom $ly@@537) |a#0@@180|)) )))
(assert  (=> true (forall (($ly@@538 T@U) (|a#0@@181| Int) ) (!  (=> (and (= (type $ly@@538) LayerTypeType) true) true) :qid |totalord.696:23| :skolemid |2548| :pattern ( (Integer__Order.__default.NotMinimum $ly@@538 |a#0@@181|)) ))))
(assert (forall (($ly@@539 T@U) (|a#0@@182| Int) ) (!  (=> (= (type $ly@@539) LayerTypeType) (and (=> (|Integer__Order.__default.NotMinimum#requires| $ly@@539 |a#0@@182|) true) (=> true (|Integer__Order.__default.NotMinimum#requires| $ly@@539 |a#0@@182|)))) :qid |totalord.696:23| :skolemid |2549| :pattern ( (|Integer__Order.__default.NotMinimum#requires| $ly@@539 |a#0@@182|)) )))
(assert  (=> true (forall (($ly@@540 T@U) (|a#0@@183| Int) ) (!  (=> (and (= (type $ly@@540) LayerTypeType) true) (and (forall ((|b#0@@147| Int) ) (! (|Integer__Order.__default.lt#canCall| |b#0@@147| |a#0@@183|) :qid |totalord.697:12| :skolemid |2550| :pattern ( (Integer__Order.__default.lt |b#0@@147| |a#0@@183|)) )) (and (=> (Integer__Order.__default.NotMinimum ($LS $ly@@540) |a#0@@183|) (exists ((|b#0@@148| Int) ) (! (Integer__Order.__default.lt |b#0@@148| |a#0@@183|) :qid |totalord.697:12| :skolemid |2551| :pattern ( (Integer__Order.__default.lt |b#0@@148| |a#0@@183|)) ))) (=> (exists ((|b#0@@149| Int) ) (! (Integer__Order.__default.lt |b#0@@149| |a#0@@183|) :qid |totalord.697:12| :skolemid |2551| :pattern ( (Integer__Order.__default.lt |b#0@@149| |a#0@@183|)) )) (Integer__Order.__default.NotMinimum ($LS $ly@@540) |a#0@@183|))))) :qid |totalord.696:23| :skolemid |2552| :pattern ( (Integer__Order.__default.NotMinimum ($LS $ly@@540) |a#0@@183|)) ))))
(assert  (=> true (forall (($ly@@541 T@U) (|a#0@@184| Int) ) (!  (=> (and (= (type $ly@@541) LayerTypeType) true) (and (forall ((|b#1@@13| Int) ) (! (|Integer__Order.__default.lt#canCall| |b#1@@13| (LitInt |a#0@@184|)) :qid |totalord.697:12| :skolemid |2553| :pattern ( (Integer__Order.__default.lt |b#1@@13| |a#0@@184|)) )) (and (=> (Integer__Order.__default.NotMinimum ($LS $ly@@541) (LitInt |a#0@@184|)) (exists ((|b#1@@14| Int) ) (! (Integer__Order.__default.lt |b#1@@14| (LitInt |a#0@@184|)) :qid |totalord.697:12| :skolemid |2554| :pattern ( (Integer__Order.__default.lt |b#1@@14| |a#0@@184|)) ))) (=> (exists ((|b#1@@15| Int) ) (! (Integer__Order.__default.lt |b#1@@15| (LitInt |a#0@@184|)) :qid |totalord.697:12| :skolemid |2554| :pattern ( (Integer__Order.__default.lt |b#1@@15| |a#0@@184|)) )) (Integer__Order.__default.NotMinimum ($LS $ly@@541) (LitInt |a#0@@184|)))))) :qid |totalord.696:23| :weight 3 :skolemid |2555| :pattern ( (Integer__Order.__default.NotMinimum ($LS $ly@@541) (LitInt |a#0@@184|))) ))))
(assert (forall ((arg0@@319 T@U) (arg1@@191 T@U) (arg2@@122 Int) (arg3@@85 T@U) ) (! (= (type (Integer__Order.__default.MapPivotedUnion arg0@@319 arg1@@191 arg2@@122 arg3@@85)) (MapType BoxType BoxType)) :qid |funType:Integer__Order.__default.MapPivotedUnion| :pattern ( (Integer__Order.__default.MapPivotedUnion arg0@@319 arg1@@191 arg2@@122 arg3@@85)) )))
(assert  (=> true (forall ((Integer_Order._default.MapPivotedUnion$Value T@U) (|left#0@@7| T@U) (|pivot#0@@7| Int) (|right#0@@7| T@U) ) (!  (=> (and (and (and (= (type Integer_Order._default.MapPivotedUnion$Value) TyType) (= (type |left#0@@7|) (MapType BoxType BoxType))) (= (type |right#0@@7|) (MapType BoxType BoxType))) (or (|Integer__Order.__default.MapPivotedUnion#canCall| Integer_Order._default.MapPivotedUnion$Value |left#0@@7| |pivot#0@@7| |right#0@@7|) (and ($Is |left#0@@7| (TMap TInt Integer_Order._default.MapPivotedUnion$Value)) ($Is |right#0@@7| (TMap TInt Integer_Order._default.MapPivotedUnion$Value))))) ($Is (Integer__Order.__default.MapPivotedUnion Integer_Order._default.MapPivotedUnion$Value |left#0@@7| |pivot#0@@7| |right#0@@7|) (TMap TInt Integer_Order._default.MapPivotedUnion$Value))) :qid |unknown.0:0| :skolemid |2556| :pattern ( (Integer__Order.__default.MapPivotedUnion Integer_Order._default.MapPivotedUnion$Value |left#0@@7| |pivot#0@@7| |right#0@@7|)) ))))
(assert (forall ((Integer_Order._default.MapPivotedUnion$Value@@0 T@U) (|left#0@@8| T@U) (|pivot#0@@8| Int) (|right#0@@8| T@U) ) (!  (=> (and (and (and (= (type Integer_Order._default.MapPivotedUnion$Value@@0) TyType) (= (type |left#0@@8|) (MapType BoxType BoxType))) (= (type |right#0@@8|) (MapType BoxType BoxType))) (and ($Is |left#0@@8| (TMap TInt Integer_Order._default.MapPivotedUnion$Value@@0)) ($Is |right#0@@8| (TMap TInt Integer_Order._default.MapPivotedUnion$Value@@0)))) (and (=> (|Integer__Order.__default.MapPivotedUnion#requires| Integer_Order._default.MapPivotedUnion$Value@@0 |left#0@@8| |pivot#0@@8| |right#0@@8|) true) (=> true (|Integer__Order.__default.MapPivotedUnion#requires| Integer_Order._default.MapPivotedUnion$Value@@0 |left#0@@8| |pivot#0@@8| |right#0@@8|)))) :qid |unknown.0:0| :skolemid |2557| :pattern ( (|Integer__Order.__default.MapPivotedUnion#requires| Integer_Order._default.MapPivotedUnion$Value@@0 |left#0@@8| |pivot#0@@8| |right#0@@8|)) )))
(assert  (and (forall ((arg0@@320 T@U) (arg1@@192 Int) ) (! (= (type (|lambda#108| arg0@@320 arg1@@192)) (MapType0Type BoxType boolType)) :qid |funType:lambda#108| :pattern ( (|lambda#108| arg0@@320 arg1@@192)) )) (forall ((arg0@@321 T@U) (arg1@@193 Int) ) (! (= (type (|lambda#109| arg0@@321 arg1@@193)) (MapType0Type BoxType boolType)) :qid |funType:lambda#109| :pattern ( (|lambda#109| arg0@@321 arg1@@193)) ))))
(assert  (=> true (forall ((Integer_Order._default.MapPivotedUnion$Value@@1 T@U) (|left#0@@9| T@U) (|pivot#0@@9| Int) (|right#0@@9| T@U) ) (!  (=> (and (and (and (= (type Integer_Order._default.MapPivotedUnion$Value@@1) TyType) (= (type |left#0@@9|) (MapType BoxType BoxType))) (= (type |right#0@@9|) (MapType BoxType BoxType))) (or (|Integer__Order.__default.MapPivotedUnion#canCall| Integer_Order._default.MapPivotedUnion$Value@@1 |left#0@@9| |pivot#0@@9| |right#0@@9|) (and ($Is |left#0@@9| (TMap TInt Integer_Order._default.MapPivotedUnion$Value@@1)) ($Is |right#0@@9| (TMap TInt Integer_Order._default.MapPivotedUnion$Value@@1))))) (and (and (and (forall ((|k#0@@48| Int) ) (! (|Integer__Order.__default.lt#canCall| |k#0@@48| |pivot#0@@9|) :qid |totalord.716:57| :skolemid |2558| :pattern ( (Integer__Order.__default.lt |k#0@@48| |pivot#0@@9|)) )) (|Maps.__default.MapIRestrict#canCall| TInt Integer_Order._default.MapPivotedUnion$Value@@1 |left#0@@9| (|lambda#108| TInt |pivot#0@@9|))) (let ((|restricted_left#0@@3| (Maps.__default.MapIRestrict TInt Integer_Order._default.MapPivotedUnion$Value@@1 |left#0@@9| (|lambda#108| TInt |pivot#0@@9|)))) (and (and (forall ((|k#1@@10| Int) ) (! (|Integer__Order.__default.lte#canCall| |pivot#0@@9| |k#1@@10|) :qid |totalord.717:59| :skolemid |2559| :pattern ( (Integer__Order.__default.lte |pivot#0@@9| |k#1@@10|)) )) (|Maps.__default.MapIRestrict#canCall| TInt Integer_Order._default.MapPivotedUnion$Value@@1 |right#0@@9| (|lambda#109| TInt |pivot#0@@9|))) (let ((|restricted_right#0@@3| (Maps.__default.MapIRestrict TInt Integer_Order._default.MapPivotedUnion$Value@@1 |right#0@@9| (|lambda#109| TInt |pivot#0@@9|)))) (|Maps.__default.MapDisjointUnion#canCall| TInt Integer_Order._default.MapPivotedUnion$Value@@1 |restricted_left#0@@3| |restricted_right#0@@3|))))) (= (Integer__Order.__default.MapPivotedUnion Integer_Order._default.MapPivotedUnion$Value@@1 |left#0@@9| |pivot#0@@9| |right#0@@9|) (let ((|restricted_left#0@@4| (Maps.__default.MapIRestrict TInt Integer_Order._default.MapPivotedUnion$Value@@1 |left#0@@9| (|lambda#108| TInt |pivot#0@@9|)))) (let ((|restricted_right#0@@4| (Maps.__default.MapIRestrict TInt Integer_Order._default.MapPivotedUnion$Value@@1 |right#0@@9| (|lambda#109| TInt |pivot#0@@9|)))) (Maps.__default.MapDisjointUnion TInt Integer_Order._default.MapPivotedUnion$Value@@1 StartFuel_Maps._default.MapDisjointUnion |restricted_left#0@@4| |restricted_right#0@@4|)))))) :qid |unknown.0:0| :skolemid |2560| :pattern ( (Integer__Order.__default.MapPivotedUnion Integer_Order._default.MapPivotedUnion$Value@@1 |left#0@@9| |pivot#0@@9| |right#0@@9|)) ))))
(assert  (=> true (forall ((Integer_Order._default.MapPivotedUnion$Value@@2 T@U) (|left#0@@10| T@U) (|pivot#0@@10| Int) (|right#0@@10| T@U) ) (!  (=> (and (and (and (= (type Integer_Order._default.MapPivotedUnion$Value@@2) TyType) (= (type |left#0@@10|) (MapType BoxType BoxType))) (= (type |right#0@@10|) (MapType BoxType BoxType))) (or (|Integer__Order.__default.MapPivotedUnion#canCall| Integer_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@10|) (LitInt |pivot#0@@10|) (Lit |right#0@@10|)) (and ($Is |left#0@@10| (TMap TInt Integer_Order._default.MapPivotedUnion$Value@@2)) ($Is |right#0@@10| (TMap TInt Integer_Order._default.MapPivotedUnion$Value@@2))))) (and (and (and (forall ((|k#2@@8| Int) ) (! (|Integer__Order.__default.lt#canCall| |k#2@@8| (LitInt |pivot#0@@10|)) :qid |totalord.716:57| :skolemid |2561| :pattern ( (Integer__Order.__default.lt |k#2@@8| |pivot#0@@10|)) )) (|Maps.__default.MapIRestrict#canCall| TInt Integer_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@10|) (|lambda#108| TInt (LitInt |pivot#0@@10|)))) (let ((|restricted_left#1@@3| (Maps.__default.MapIRestrict TInt Integer_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@10|) (|lambda#108| TInt (LitInt |pivot#0@@10|))))) (and (and (forall ((|k#3@@1| Int) ) (! (|Integer__Order.__default.lte#canCall| (LitInt |pivot#0@@10|) |k#3@@1|) :qid |totalord.717:59| :skolemid |2562| :pattern ( (Integer__Order.__default.lte |pivot#0@@10| |k#3@@1|)) )) (|Maps.__default.MapIRestrict#canCall| TInt Integer_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@10|) (|lambda#109| TInt (LitInt |pivot#0@@10|)))) (let ((|restricted_right#1@@3| (Maps.__default.MapIRestrict TInt Integer_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@10|) (|lambda#109| TInt (LitInt |pivot#0@@10|))))) (|Maps.__default.MapDisjointUnion#canCall| TInt Integer_Order._default.MapPivotedUnion$Value@@2 |restricted_left#1@@3| |restricted_right#1@@3|))))) (= (Integer__Order.__default.MapPivotedUnion Integer_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@10|) (LitInt |pivot#0@@10|) (Lit |right#0@@10|)) (let ((|restricted_left#1@@4| (Maps.__default.MapIRestrict TInt Integer_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@10|) (|lambda#108| TInt (LitInt |pivot#0@@10|))))) (let ((|restricted_right#1@@4| (Maps.__default.MapIRestrict TInt Integer_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@10|) (|lambda#109| TInt (LitInt |pivot#0@@10|))))) (Maps.__default.MapDisjointUnion TInt Integer_Order._default.MapPivotedUnion$Value@@2 StartFuel_Maps._default.MapDisjointUnion |restricted_left#1@@4| |restricted_right#1@@4|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2563| :pattern ( (Integer__Order.__default.MapPivotedUnion Integer_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@10|) (LitInt |pivot#0@@10|) (Lit |right#0@@10|))) ))))
(assert (forall ((arg0@@322 T@U) (arg1@@194 Int) ) (! (= (type (Integer__Order.__default.SetSuccessor arg0@@322 arg1@@194)) DatatypeTypeType) :qid |funType:Integer__Order.__default.SetSuccessor| :pattern ( (Integer__Order.__default.SetSuccessor arg0@@322 arg1@@194)) )))
(assert  (=> true (forall ((|m#0@@117| T@U) (|key#0@@122| Int) ) (!  (=> (and (= (type |m#0@@117|) (MapType0Type BoxType boolType)) (or (|Integer__Order.__default.SetSuccessor#canCall| |m#0@@117| |key#0@@122|) ($Is |m#0@@117| (TSet TInt)))) ($Is (Integer__Order.__default.SetSuccessor |m#0@@117| |key#0@@122|) (Tclass.Options.Option TInt))) :qid |totalord.721:25| :skolemid |2564| :pattern ( (Integer__Order.__default.SetSuccessor |m#0@@117| |key#0@@122|)) ))))
(assert (forall (($Heap@@57 T@U) (|m#0@@118| T@U) (|key#0@@123| Int) ) (!  (=> (and (and (= (type $Heap@@57) (MapType0Type refType MapType1Type)) (= (type |m#0@@118|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@57) ($Is |m#0@@118| (TSet TInt)))) (and (=> (|Integer__Order.__default.SetSuccessor#requires| |m#0@@118| |key#0@@123|) true) (=> true (|Integer__Order.__default.SetSuccessor#requires| |m#0@@118| |key#0@@123|)))) :qid |totalord.721:12| :skolemid |2565| :pattern ( (|Integer__Order.__default.SetSuccessor#requires| |m#0@@118| |key#0@@123|) ($IsGoodHeap $Heap@@57)) )))
(assert (forall ((m@@51 T@U) (key@@1 Int) ) (!  (=> (and (= (type m@@51) (MapType0Type BoxType boolType)) (|$let#22$canCall| m@@51 key@@1)) (and (and (U_2_bool (MapType0Select m@@51 ($Box (int_2_U (|$let#22_next| m@@51 key@@1))))) (Integer__Order.__default.lt key@@1 (|$let#22_next| m@@51 key@@1))) (forall ((|other#1@@1| Int) ) (!  (=> true (=> (and (and (U_2_bool (MapType0Select m@@51 ($Box (int_2_U |other#1@@1|)))) (not (= |other#1@@1| (|$let#22_next| m@@51 key@@1)))) (Integer__Order.__default.lt key@@1 |other#1@@1|)) (Integer__Order.__default.lt (|$let#22_next| m@@51 key@@1) |other#1@@1|))) :qid |totalord.726:18| :skolemid |2570| :pattern ( (Integer__Order.__default.lt (|$let#22_next| m@@51 key@@1) |other#1@@1|)) :pattern ( (Integer__Order.__default.lt key@@1 |other#1@@1|)) :pattern ( (MapType0Select m@@51 ($Box (int_2_U |other#1@@1|)))) )))) :qid |totalord.723:8| :skolemid |2571| :pattern ( (|$let#22_next| m@@51 key@@1)) )))
(assert  (=> true (forall (($Heap@@58 T@U) (|m#0@@119| T@U) (|key#0@@124| Int) ) (!  (=> (and (and (= (type $Heap@@58) (MapType0Type refType MapType1Type)) (= (type |m#0@@119|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.SetSuccessor#canCall| |m#0@@119| |key#0@@124|) (and ($IsGoodHeap $Heap@@58) ($Is |m#0@@119| (TSet TInt))))) (and (and (forall ((|next#0@@5| Int) ) (!  (and (=> (U_2_bool (MapType0Select |m#0@@119| ($Box (int_2_U |next#0@@5|)))) (|Integer__Order.__default.lt#canCall| |key#0@@124| |next#0@@5|)) (=> (and (|Integer__Order.__default.lt#canCall| |key#0@@124| |next#0@@5|) (Integer__Order.__default.lt |key#0@@124| |next#0@@5|)) (forall ((|other#0@@5| Int) ) (!  (and (=> (not (= |other#0@@5| |next#0@@5|)) (|Integer__Order.__default.lt#canCall| |key#0@@124| |other#0@@5|)) (=> (and (|Integer__Order.__default.lt#canCall| |key#0@@124| |other#0@@5|) (Integer__Order.__default.lt |key#0@@124| |other#0@@5|)) (|Integer__Order.__default.lt#canCall| |next#0@@5| |other#0@@5|))) :qid |totalord.726:18| :skolemid |2566| :pattern ( (Integer__Order.__default.lt |next#0@@5| |other#0@@5|)) :pattern ( (Integer__Order.__default.lt |key#0@@124| |other#0@@5|)) :pattern ( (MapType0Select |m#0@@119| ($Box (int_2_U |other#0@@5|)))) )))) :qid |totalord.723:8| :skolemid |2567| :pattern ( (Integer__Order.__default.lt |key#0@@124| |next#0@@5|)) :pattern ( (MapType0Select |m#0@@119| ($Box (int_2_U |next#0@@5|)))) )) (=> (exists ((|next#0@@6| Int) ) (!  (and (and (U_2_bool (MapType0Select |m#0@@119| ($Box (int_2_U |next#0@@6|)))) (Integer__Order.__default.lt |key#0@@124| |next#0@@6|)) (forall ((|other#0@@6| Int) ) (!  (=> true (=> (and (and (U_2_bool (MapType0Select |m#0@@119| ($Box (int_2_U |other#0@@6|)))) (not (= |other#0@@6| |next#0@@6|))) (Integer__Order.__default.lt |key#0@@124| |other#0@@6|)) (Integer__Order.__default.lt |next#0@@6| |other#0@@6|))) :qid |totalord.726:18| :skolemid |2568| :pattern ( (Integer__Order.__default.lt |next#0@@6| |other#0@@6|)) :pattern ( (Integer__Order.__default.lt |key#0@@124| |other#0@@6|)) :pattern ( (MapType0Select |m#0@@119| ($Box (int_2_U |other#0@@6|)))) ))) :qid |totalord.723:8| :skolemid |2569| :pattern ( (Integer__Order.__default.lt |key#0@@124| |next#0@@6|)) :pattern ( (MapType0Select |m#0@@119| ($Box (int_2_U |next#0@@6|)))) )) (|$let#22$canCall| |m#0@@119| |key#0@@124|))) (= (Integer__Order.__default.SetSuccessor |m#0@@119| |key#0@@124|) (ite (exists ((|next#0@@7| Int) ) (!  (and (and (U_2_bool (MapType0Select |m#0@@119| ($Box (int_2_U |next#0@@7|)))) (Integer__Order.__default.lt |key#0@@124| |next#0@@7|)) (forall ((|other#0@@7| Int) ) (!  (=> true (=> (and (and (U_2_bool (MapType0Select |m#0@@119| ($Box (int_2_U |other#0@@7|)))) (not (= |other#0@@7| |next#0@@7|))) (Integer__Order.__default.lt |key#0@@124| |other#0@@7|)) (Integer__Order.__default.lt |next#0@@7| |other#0@@7|))) :qid |totalord.726:18| :skolemid |2572| :pattern ( (Integer__Order.__default.lt |next#0@@7| |other#0@@7|)) :pattern ( (Integer__Order.__default.lt |key#0@@124| |other#0@@7|)) :pattern ( (MapType0Select |m#0@@119| ($Box (int_2_U |other#0@@7|)))) ))) :qid |totalord.723:8| :skolemid |2573| :pattern ( (Integer__Order.__default.lt |key#0@@124| |next#0@@7|)) :pattern ( (MapType0Select |m#0@@119| ($Box (int_2_U |next#0@@7|)))) )) (let ((|next#1@@1| (|$let#22_next| |m#0@@119| |key#0@@124|))) (|#Options.Option.Some| ($Box (int_2_U |next#1@@1|)))) |#Options.Option.None|)))) :qid |totalord.721:12| :skolemid |2574| :pattern ( (Integer__Order.__default.SetSuccessor |m#0@@119| |key#0@@124|) ($IsGoodHeap $Heap@@58)) ))))
(assert  (=> true (forall (($Heap@@59 T@U) (|m#0@@120| T@U) (|key#0@@125| Int) ) (!  (=> (and (and (= (type $Heap@@59) (MapType0Type refType MapType1Type)) (= (type |m#0@@120|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.SetSuccessor#canCall| (Lit |m#0@@120|) (LitInt |key#0@@125|)) (and ($IsGoodHeap $Heap@@59) ($Is |m#0@@120| (TSet TInt))))) (and (and (forall ((|next#2@@5| Int) ) (!  (and (=> (U_2_bool (MapType0Select (Lit |m#0@@120|) ($Box (int_2_U |next#2@@5|)))) (|Integer__Order.__default.lt#canCall| (LitInt |key#0@@125|) |next#2@@5|)) (=> (and (|Integer__Order.__default.lt#canCall| (LitInt |key#0@@125|) |next#2@@5|) (Integer__Order.__default.lt (LitInt |key#0@@125|) |next#2@@5|)) (forall ((|other#2@@5| Int) ) (!  (and (=> (not (= |other#2@@5| |next#2@@5|)) (|Integer__Order.__default.lt#canCall| (LitInt |key#0@@125|) |other#2@@5|)) (=> (and (|Integer__Order.__default.lt#canCall| (LitInt |key#0@@125|) |other#2@@5|) (Integer__Order.__default.lt (LitInt |key#0@@125|) |other#2@@5|)) (|Integer__Order.__default.lt#canCall| |next#2@@5| |other#2@@5|))) :qid |totalord.726:18| :skolemid |2575| :pattern ( (Integer__Order.__default.lt |next#2@@5| |other#2@@5|)) :pattern ( (Integer__Order.__default.lt |key#0@@125| |other#2@@5|)) :pattern ( (MapType0Select |m#0@@120| ($Box (int_2_U |other#2@@5|)))) )))) :qid |totalord.723:8| :skolemid |2576| :pattern ( (Integer__Order.__default.lt |key#0@@125| |next#2@@5|)) :pattern ( (MapType0Select |m#0@@120| ($Box (int_2_U |next#2@@5|)))) )) (=> (exists ((|next#2@@6| Int) ) (!  (and (and (U_2_bool (MapType0Select (Lit |m#0@@120|) ($Box (int_2_U |next#2@@6|)))) (Integer__Order.__default.lt (LitInt |key#0@@125|) |next#2@@6|)) (forall ((|other#2@@6| Int) ) (!  (=> true (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@120|) ($Box (int_2_U |other#2@@6|)))) (not (= |other#2@@6| |next#2@@6|))) (Integer__Order.__default.lt (LitInt |key#0@@125|) |other#2@@6|)) (Integer__Order.__default.lt |next#2@@6| |other#2@@6|))) :qid |totalord.726:18| :skolemid |2577| :pattern ( (Integer__Order.__default.lt |next#2@@6| |other#2@@6|)) :pattern ( (Integer__Order.__default.lt |key#0@@125| |other#2@@6|)) :pattern ( (MapType0Select |m#0@@120| ($Box (int_2_U |other#2@@6|)))) ))) :qid |totalord.723:8| :skolemid |2578| :pattern ( (Integer__Order.__default.lt |key#0@@125| |next#2@@6|)) :pattern ( (MapType0Select |m#0@@120| ($Box (int_2_U |next#2@@6|)))) )) (|$let#22$canCall| (Lit |m#0@@120|) (LitInt |key#0@@125|)))) (= (Integer__Order.__default.SetSuccessor (Lit |m#0@@120|) (LitInt |key#0@@125|)) (ite (exists ((|next#2@@7| Int) ) (!  (and (and (U_2_bool (MapType0Select (Lit |m#0@@120|) ($Box (int_2_U |next#2@@7|)))) (Integer__Order.__default.lt (LitInt |key#0@@125|) |next#2@@7|)) (forall ((|other#2@@7| Int) ) (!  (=> true (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@120|) ($Box (int_2_U |other#2@@7|)))) (not (= |other#2@@7| |next#2@@7|))) (Integer__Order.__default.lt (LitInt |key#0@@125|) |other#2@@7|)) (Integer__Order.__default.lt |next#2@@7| |other#2@@7|))) :qid |totalord.726:18| :skolemid |2579| :pattern ( (Integer__Order.__default.lt |next#2@@7| |other#2@@7|)) :pattern ( (Integer__Order.__default.lt |key#0@@125| |other#2@@7|)) :pattern ( (MapType0Select |m#0@@120| ($Box (int_2_U |other#2@@7|)))) ))) :qid |totalord.723:8| :skolemid |2580| :pattern ( (Integer__Order.__default.lt |key#0@@125| |next#2@@7|)) :pattern ( (MapType0Select |m#0@@120| ($Box (int_2_U |next#2@@7|)))) )) (let ((|next#3@@1| (|$let#22_next| (Lit |m#0@@120|) (LitInt |key#0@@125|)))) (|#Options.Option.Some| ($Box (int_2_U |next#3@@1|)))) |#Options.Option.None|)))) :qid |totalord.721:12| :weight 3 :skolemid |2581| :pattern ( (Integer__Order.__default.SetSuccessor (Lit |m#0@@120|) (LitInt |key#0@@125|)) ($IsGoodHeap $Heap@@59)) ))))
(assert (forall ((arg0@@323 T@U) (arg1@@195 T@U) (arg2@@123 Int) ) (! (= (type (Integer__Order.__default.MapSuccessor arg0@@323 arg1@@195 arg2@@123)) DatatypeTypeType) :qid |funType:Integer__Order.__default.MapSuccessor| :pattern ( (Integer__Order.__default.MapSuccessor arg0@@323 arg1@@195 arg2@@123)) )))
(assert  (=> true (forall ((Integer_Order._default.MapSuccessor$V T@U) (|m#0@@121| T@U) (|key#0@@126| Int) ) (!  (=> (and (and (= (type Integer_Order._default.MapSuccessor$V) TyType) (= (type |m#0@@121|) (MapType BoxType BoxType))) (or (|Integer__Order.__default.MapSuccessor#canCall| Integer_Order._default.MapSuccessor$V |m#0@@121| |key#0@@126|) ($Is |m#0@@121| (TMap TInt Integer_Order._default.MapSuccessor$V)))) ($Is (Integer__Order.__default.MapSuccessor Integer_Order._default.MapSuccessor$V |m#0@@121| |key#0@@126|) (Tclass.Options.Option TInt))) :qid |unknown.0:0| :skolemid |2582| :pattern ( (Integer__Order.__default.MapSuccessor Integer_Order._default.MapSuccessor$V |m#0@@121| |key#0@@126|)) ))))
(assert (forall ((Integer_Order._default.MapSuccessor$V@@0 T@U) (|m#0@@122| T@U) (|key#0@@127| Int) ) (!  (=> (and (and (= (type Integer_Order._default.MapSuccessor$V@@0) TyType) (= (type |m#0@@122|) (MapType BoxType BoxType))) ($Is |m#0@@122| (TMap TInt Integer_Order._default.MapSuccessor$V@@0))) (and (=> (|Integer__Order.__default.MapSuccessor#requires| Integer_Order._default.MapSuccessor$V@@0 |m#0@@122| |key#0@@127|) true) (=> true (|Integer__Order.__default.MapSuccessor#requires| Integer_Order._default.MapSuccessor$V@@0 |m#0@@122| |key#0@@127|)))) :qid |unknown.0:0| :skolemid |2583| :pattern ( (|Integer__Order.__default.MapSuccessor#requires| Integer_Order._default.MapSuccessor$V@@0 |m#0@@122| |key#0@@127|)) )))
(assert  (=> true (forall ((Integer_Order._default.MapSuccessor$V@@1 T@U) (|m#0@@123| T@U) (|key#0@@128| Int) ) (!  (=> (and (and (= (type Integer_Order._default.MapSuccessor$V@@1) TyType) (= (type |m#0@@123|) (MapType BoxType BoxType))) (or (|Integer__Order.__default.MapSuccessor#canCall| Integer_Order._default.MapSuccessor$V@@1 |m#0@@123| |key#0@@128|) ($Is |m#0@@123| (TMap TInt Integer_Order._default.MapSuccessor$V@@1)))) (and (|Integer__Order.__default.SetSuccessor#canCall| (|Map#Domain| |m#0@@123|) |key#0@@128|) (= (Integer__Order.__default.MapSuccessor Integer_Order._default.MapSuccessor$V@@1 |m#0@@123| |key#0@@128|) (Integer__Order.__default.SetSuccessor (|Map#Domain| |m#0@@123|) |key#0@@128|)))) :qid |unknown.0:0| :skolemid |2584| :pattern ( (Integer__Order.__default.MapSuccessor Integer_Order._default.MapSuccessor$V@@1 |m#0@@123| |key#0@@128|)) ))))
(assert  (=> true (forall ((Integer_Order._default.MapSuccessor$V@@2 T@U) (|m#0@@124| T@U) (|key#0@@129| Int) ) (!  (=> (and (and (= (type Integer_Order._default.MapSuccessor$V@@2) TyType) (= (type |m#0@@124|) (MapType BoxType BoxType))) (or (|Integer__Order.__default.MapSuccessor#canCall| Integer_Order._default.MapSuccessor$V@@2 (Lit |m#0@@124|) (LitInt |key#0@@129|)) ($Is |m#0@@124| (TMap TInt Integer_Order._default.MapSuccessor$V@@2)))) (and (|Integer__Order.__default.SetSuccessor#canCall| (Lit (|Map#Domain| (Lit |m#0@@124|))) (LitInt |key#0@@129|)) (= (Integer__Order.__default.MapSuccessor Integer_Order._default.MapSuccessor$V@@2 (Lit |m#0@@124|) (LitInt |key#0@@129|)) (Lit (Integer__Order.__default.SetSuccessor (Lit (|Map#Domain| (Lit |m#0@@124|))) (LitInt |key#0@@129|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2585| :pattern ( (Integer__Order.__default.MapSuccessor Integer_Order._default.MapSuccessor$V@@2 (Lit |m#0@@124|) (LitInt |key#0@@129|))) ))))
(assert (forall ((arg0@@324 T@U) (arg1@@196 Int) ) (! (= (type (Integer__Order.__default.SeqSuccessor arg0@@324 arg1@@196)) DatatypeTypeType) :qid |funType:Integer__Order.__default.SeqSuccessor| :pattern ( (Integer__Order.__default.SeqSuccessor arg0@@324 arg1@@196)) )))
(assert  (=> true (forall ((|m#0@@125| T@U) (|key#0@@130| Int) ) (!  (=> (and (= (type |m#0@@125|) (SeqType BoxType)) (or (|Integer__Order.__default.SeqSuccessor#canCall| |m#0@@125| |key#0@@130|) ($Is |m#0@@125| (TSeq TInt)))) ($Is (Integer__Order.__default.SeqSuccessor |m#0@@125| |key#0@@130|) (Tclass.Options.Option TInt))) :qid |totalord.737:25| :skolemid |2586| :pattern ( (Integer__Order.__default.SeqSuccessor |m#0@@125| |key#0@@130|)) ))))
(assert (forall ((|m#0@@126| T@U) (|key#0@@131| Int) ) (!  (=> (and (= (type |m#0@@126|) (SeqType BoxType)) ($Is |m#0@@126| (TSeq TInt))) (and (=> (|Integer__Order.__default.SeqSuccessor#requires| |m#0@@126| |key#0@@131|) true) (=> true (|Integer__Order.__default.SeqSuccessor#requires| |m#0@@126| |key#0@@131|)))) :qid |totalord.737:25| :skolemid |2587| :pattern ( (|Integer__Order.__default.SeqSuccessor#requires| |m#0@@126| |key#0@@131|)) )))
(assert  (=> true (forall ((|m#0@@127| T@U) (|key#0@@132| Int) ) (!  (=> (and (= (type |m#0@@127|) (SeqType BoxType)) (or (|Integer__Order.__default.SeqSuccessor#canCall| |m#0@@127| |key#0@@132|) ($Is |m#0@@127| (TSeq TInt)))) (and (|Integer__Order.__default.SetSuccessor#canCall| (|lambda#88| TInt |m#0@@127|) |key#0@@132|) (= (Integer__Order.__default.SeqSuccessor |m#0@@127| |key#0@@132|) (Integer__Order.__default.SetSuccessor (|lambda#88| TInt |m#0@@127|) |key#0@@132|)))) :qid |totalord.737:25| :skolemid |2588| :pattern ( (Integer__Order.__default.SeqSuccessor |m#0@@127| |key#0@@132|)) ))))
(assert  (=> true (forall ((|m#0@@128| T@U) (|key#0@@133| Int) ) (!  (=> (and (= (type |m#0@@128|) (SeqType BoxType)) (or (|Integer__Order.__default.SeqSuccessor#canCall| (Lit |m#0@@128|) (LitInt |key#0@@133|)) ($Is |m#0@@128| (TSeq TInt)))) (and (|Integer__Order.__default.SetSuccessor#canCall| (|lambda#88| TInt |m#0@@128|) (LitInt |key#0@@133|)) (= (Integer__Order.__default.SeqSuccessor (Lit |m#0@@128|) (LitInt |key#0@@133|)) (Integer__Order.__default.SetSuccessor (|lambda#88| TInt |m#0@@128|) (LitInt |key#0@@133|))))) :qid |totalord.737:25| :weight 3 :skolemid |2589| :pattern ( (Integer__Order.__default.SeqSuccessor (Lit |m#0@@128|) (LitInt |key#0@@133|))) ))))
(assert (forall ((Integer_Order._default.SortedSeqForMap$V T@U) ($ly@@542 T@U) (|s#0@@176| T@U) (|m#0@@129| T@U) ) (!  (=> (and (and (and (= (type Integer_Order._default.SortedSeqForMap$V) TyType) (= (type $ly@@542) LayerTypeType)) (= (type |s#0@@176|) (SeqType BoxType))) (= (type |m#0@@129|) (MapType BoxType BoxType))) (and (=> (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V ($LS $ly@@542) |s#0@@176| |m#0@@129|) (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V $ly@@542 |s#0@@176| |m#0@@129|)) (=> (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V $ly@@542 |s#0@@176| |m#0@@129|) (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V ($LS $ly@@542) |s#0@@176| |m#0@@129|)))) :qid |unknown.0:0| :skolemid |2590| :pattern ( (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V ($LS $ly@@542) |s#0@@176| |m#0@@129|)) )))
(assert (forall ((Integer_Order._default.SortedSeqForMap$V@@0 T@U) ($ly@@543 T@U) (|s#0@@177| T@U) (|m#0@@130| T@U) ) (!  (=> (and (and (and (= (type Integer_Order._default.SortedSeqForMap$V@@0) TyType) (= (type $ly@@543) LayerTypeType)) (= (type |s#0@@177|) (SeqType BoxType))) (= (type |m#0@@130|) (MapType BoxType BoxType))) (and (=> (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@0 $ly@@543 |s#0@@177| |m#0@@130|) (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@177| |m#0@@130|)) (=> (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@177| |m#0@@130|) (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@0 $ly@@543 |s#0@@177| |m#0@@130|)))) :qid |unknown.0:0| :skolemid |2591| :pattern ( (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@0 (AsFuelBottom $ly@@543) |s#0@@177| |m#0@@130|)) )))
(assert  (=> true (forall ((Integer_Order._default.SortedSeqForMap$V@@1 T@U) ($ly@@544 T@U) (|s#0@@178| T@U) (|m#0@@131| T@U) ) (!  (=> (and (and (and (and (= (type Integer_Order._default.SortedSeqForMap$V@@1) TyType) (= (type $ly@@544) LayerTypeType)) (= (type |s#0@@178|) (SeqType BoxType))) (= (type |m#0@@131|) (MapType BoxType BoxType))) (or (|Integer__Order.__default.SortedSeqForMap#canCall| Integer_Order._default.SortedSeqForMap$V@@1 |s#0@@178| |m#0@@131|) (and ($Is |s#0@@178| (TSeq (Tclass._System.Tuple2 TInt Integer_Order._default.SortedSeqForMap$V@@1))) ($Is |m#0@@131| (TMap TInt Integer_Order._default.SortedSeqForMap$V@@1))))) true) :qid |unknown.0:0| :skolemid |2592| :pattern ( (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@1 $ly@@544 |s#0@@178| |m#0@@131|)) ))))
(assert (forall ((Integer_Order._default.SortedSeqForMap$V@@2 T@U) ($ly@@545 T@U) (|s#0@@179| T@U) (|m#0@@132| T@U) ) (!  (=> (and (and (and (and (= (type Integer_Order._default.SortedSeqForMap$V@@2) TyType) (= (type $ly@@545) LayerTypeType)) (= (type |s#0@@179|) (SeqType BoxType))) (= (type |m#0@@132|) (MapType BoxType BoxType))) (and ($Is |s#0@@179| (TSeq (Tclass._System.Tuple2 TInt Integer_Order._default.SortedSeqForMap$V@@2))) ($Is |m#0@@132| (TMap TInt Integer_Order._default.SortedSeqForMap$V@@2)))) (and (=> (|Integer__Order.__default.SortedSeqForMap#requires| Integer_Order._default.SortedSeqForMap$V@@2 $ly@@545 |s#0@@179| |m#0@@132|) true) (=> true (|Integer__Order.__default.SortedSeqForMap#requires| Integer_Order._default.SortedSeqForMap$V@@2 $ly@@545 |s#0@@179| |m#0@@132|)))) :qid |unknown.0:0| :skolemid |2593| :pattern ( (|Integer__Order.__default.SortedSeqForMap#requires| Integer_Order._default.SortedSeqForMap$V@@2 $ly@@545 |s#0@@179| |m#0@@132|)) )))
(assert (= (type StartFuel_Integer_Order._default.IsStrictlySorted) LayerTypeType))
(assert  (=> true (forall ((Integer_Order._default.SortedSeqForMap$V@@3 T@U) ($ly@@546 T@U) (|s#0@@180| T@U) (|m#0@@133| T@U) ) (!  (=> (and (and (and (and (= (type Integer_Order._default.SortedSeqForMap$V@@3) TyType) (= (type $ly@@546) LayerTypeType)) (= (type |s#0@@180|) (SeqType BoxType))) (= (type |m#0@@133|) (MapType BoxType BoxType))) (or (|Integer__Order.__default.SortedSeqForMap#canCall| Integer_Order._default.SortedSeqForMap$V@@3 |s#0@@180| |m#0@@133|) (and ($Is |s#0@@180| (TSeq (Tclass._System.Tuple2 TInt Integer_Order._default.SortedSeqForMap$V@@3))) ($Is |m#0@@133| (TMap TInt Integer_Order._default.SortedSeqForMap$V@@3))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| TInt Integer_Order._default.SortedSeqForMap$V@@3 |s#0@@180|) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip TInt Integer_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@180|))) (|Integer__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TInt Integer_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@180|))))) (=> (Integer__Order.__default.IsStrictlySorted StartFuel_Integer_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TInt Integer_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@180|)))) (forall ((|i#0@@100| Int) ) (!  (and (=> (< |i#0@@100| (|Seq#Length| |s#0@@180|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@100|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@100|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@133|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@100|)))))) (=> (< |i#0@@100| (|Seq#Length| |s#0@@180|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@100|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@100|))))))) :qid |totalord.761:16| :skolemid |2594| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@100|))) )))) (=> (and (forall ((|i#0@@101| Int) ) (!  (and (=> (< |i#0@@101| (|Seq#Length| |s#0@@180|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@101|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@101|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@133|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@101|)))))) (=> (< |i#0@@101| (|Seq#Length| |s#0@@180|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@101|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@101|))))))) :qid |totalord.761:16| :skolemid |2597| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@101|))) )) (forall ((|i#0@@102| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@102|) (< |i#0@@102| (|Seq#Length| |s#0@@180|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@133|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@102|)))))) (=> (and (<= (LitInt 0) |i#0@@102|) (< |i#0@@102| (|Seq#Length| |s#0@@180|))) (= (MapType0Select (|Map#Elements| |m#0@@133|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@102|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@102|))))))) :qid |totalord.761:16| :skolemid |2598| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@102|))) ))) (forall ((|key#0@@134| T@U) ) (!  (=> (and (= (type |key#0@@134|) intType) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@133|) ($Box |key#0@@134|)))) (forall ((|i#1@@41| Int) ) (!  (and (=> (< |i#1@@41| (|Seq#Length| |s#0@@180|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#1@@41|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#1@@41|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#1@@41|))))) (U_2_int |key#0@@134|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#1@@41|))))) :qid |totalord.762:44| :skolemid |2595| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#1@@41|))) ))) :qid |totalord.762:16| :skolemid |2596| :pattern ( (MapType0Select (|Map#Elements| |m#0@@133|) ($Box |key#0@@134|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@133|) ($Box |key#0@@134|))) )))) (and (=> (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@546) |s#0@@180| |m#0@@133|) (and (and (Integer__Order.__default.IsStrictlySorted StartFuel_Integer_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TInt Integer_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@180|)))) (forall ((|i#0@@103| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@103|) (< |i#0@@103| (|Seq#Length| |s#0@@180|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@133|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@103|)))))) (=> (and (<= (LitInt 0) |i#0@@103|) (< |i#0@@103| (|Seq#Length| |s#0@@180|))) (= (MapType0Select (|Map#Elements| |m#0@@133|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@103|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@103|))))))) :qid |totalord.761:16| :skolemid |2599| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@103|))) ))) (forall ((|key#0@@135| T@U) ) (!  (=> (and (and (= (type |key#0@@135|) intType) true) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@133|) ($Box |key#0@@135|)))) (exists ((|i#1@@42| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1@@42|) (< |i#1@@42| (|Seq#Length| |s#0@@180|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#1@@42|))))) (U_2_int |key#0@@135|))) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#1@@42|))) (MapType0Select (|Map#Elements| |m#0@@133|) ($Box |key#0@@135|)))) :qid |totalord.762:44| :skolemid |2600| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#1@@42|))) ))) :qid |totalord.762:16| :skolemid |2601| :pattern ( (MapType0Select (|Map#Elements| |m#0@@133|) ($Box |key#0@@135|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@133|) ($Box |key#0@@135|))) )))) (=> (and (and (Integer__Order.__default.IsStrictlySorted StartFuel_Integer_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TInt Integer_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@180|)))) (forall ((|i#0@@104| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@104|) (< |i#0@@104| (|Seq#Length| |s#0@@180|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@133|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@104|)))))) (=> (and (<= (LitInt 0) |i#0@@104|) (< |i#0@@104| (|Seq#Length| |s#0@@180|))) (= (MapType0Select (|Map#Elements| |m#0@@133|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@104|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@104|))))))) :qid |totalord.761:16| :skolemid |2599| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#0@@104|))) ))) (forall ((|key#0@@136| Int) ) (!  (=> true (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@133|) ($Box (int_2_U |key#0@@136|)))) (exists ((|i#1@@43| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1@@43|) (< |i#1@@43| (|Seq#Length| |s#0@@180|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#1@@43|))))) |key#0@@136|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#1@@43|))) (MapType0Select (|Map#Elements| |m#0@@133|) ($Box (int_2_U |key#0@@136|))))) :qid |totalord.762:44| :skolemid |2600| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@180| |i#1@@43|))) )))) :qid |totalord.762:16| :skolemid |2601| :pattern ( (MapType0Select (|Map#Elements| |m#0@@133|) ($Box (int_2_U |key#0@@136|)))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@133|) ($Box (int_2_U |key#0@@136|)))) ))) (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@546) |s#0@@180| |m#0@@133|))))) :qid |unknown.0:0| :skolemid |2602| :pattern ( (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@546) |s#0@@180| |m#0@@133|)) ))))
(assert  (=> true (forall ((Integer_Order._default.SortedSeqForMap$V@@4 T@U) ($ly@@547 T@U) (|s#0@@181| T@U) (|m#0@@134| T@U) ) (!  (=> (and (and (and (and (= (type Integer_Order._default.SortedSeqForMap$V@@4) TyType) (= (type $ly@@547) LayerTypeType)) (= (type |s#0@@181|) (SeqType BoxType))) (= (type |m#0@@134|) (MapType BoxType BoxType))) (or (|Integer__Order.__default.SortedSeqForMap#canCall| Integer_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@181|) (Lit |m#0@@134|)) (and ($Is |s#0@@181| (TSeq (Tclass._System.Tuple2 TInt Integer_Order._default.SortedSeqForMap$V@@4))) ($Is |m#0@@134| (TMap TInt Integer_Order._default.SortedSeqForMap$V@@4))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| TInt Integer_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@181|)) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip TInt Integer_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@181|)))) (|Integer__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TInt Integer_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@181|)))))) (=> (Integer__Order.__default.IsStrictlySorted StartFuel_Integer_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TInt Integer_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@181|))))) (forall ((|i#2@@15| Int) ) (!  (and (=> (< |i#2@@15| (|Seq#Length| (Lit |s#0@@181|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#2@@15|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#2@@15|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@134|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#2@@15|)))))) (=> (< |i#2@@15| (|Seq#Length| (Lit |s#0@@181|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#2@@15|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#2@@15|))))))) :qid |totalord.761:16| :skolemid |2603| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@181| |i#2@@15|))) )))) (=> (and (forall ((|i#2@@16| Int) ) (!  (and (=> (< |i#2@@16| (|Seq#Length| (Lit |s#0@@181|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#2@@16|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#2@@16|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@134|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#2@@16|)))))) (=> (< |i#2@@16| (|Seq#Length| (Lit |s#0@@181|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#2@@16|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#2@@16|))))))) :qid |totalord.761:16| :skolemid |2606| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@181| |i#2@@16|))) )) (forall ((|i#2@@17| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@17|) (< |i#2@@17| (|Seq#Length| (Lit |s#0@@181|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@134|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#2@@17|)))))) (=> (and (<= (LitInt 0) |i#2@@17|) (< |i#2@@17| (|Seq#Length| (Lit |s#0@@181|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@134|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#2@@17|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#2@@17|))))))) :qid |totalord.761:16| :skolemid |2607| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@181| |i#2@@17|))) ))) (forall ((|key#1@@11| T@U) ) (!  (=> (and (= (type |key#1@@11|) intType) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@134|) ($Box |key#1@@11|)))) (forall ((|i#3@@11| Int) ) (!  (and (=> (< |i#3@@11| (|Seq#Length| (Lit |s#0@@181|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#3@@11|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#3@@11|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#3@@11|))))) (U_2_int |key#1@@11|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#3@@11|))))) :qid |totalord.762:44| :skolemid |2604| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@181| |i#3@@11|))) ))) :qid |totalord.762:16| :skolemid |2605| :pattern ( (MapType0Select (|Map#Elements| |m#0@@134|) ($Box |key#1@@11|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@134|) ($Box |key#1@@11|))) )))) (and (=> (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@547) (Lit |s#0@@181|) (Lit |m#0@@134|)) (and (and (Integer__Order.__default.IsStrictlySorted StartFuel_Integer_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TInt Integer_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@181|))))) (forall ((|i#2@@18| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@18|) (< |i#2@@18| (|Seq#Length| (Lit |s#0@@181|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@134|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#2@@18|)))))) (=> (and (<= (LitInt 0) |i#2@@18|) (< |i#2@@18| (|Seq#Length| (Lit |s#0@@181|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@134|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#2@@18|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#2@@18|))))))) :qid |totalord.761:16| :skolemid |2608| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@181| |i#2@@18|))) ))) (forall ((|key#1@@12| T@U) ) (!  (=> (and (and (= (type |key#1@@12|) intType) true) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@134|) ($Box |key#1@@12|)))) (exists ((|i#3@@12| Int) ) (!  (and (and (and (<= (LitInt 0) |i#3@@12|) (< |i#3@@12| (|Seq#Length| (Lit |s#0@@181|)))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#3@@12|))))) (U_2_int |key#1@@12|))) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#3@@12|))) (MapType0Select (|Map#Elements| (Lit |m#0@@134|)) ($Box |key#1@@12|)))) :qid |totalord.762:44| :skolemid |2609| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@181| |i#3@@12|))) ))) :qid |totalord.762:16| :skolemid |2610| :pattern ( (MapType0Select (|Map#Elements| |m#0@@134|) ($Box |key#1@@12|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@134|) ($Box |key#1@@12|))) )))) (=> (and (and (Integer__Order.__default.IsStrictlySorted StartFuel_Integer_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip TInt Integer_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@181|))))) (forall ((|i#2@@19| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@19|) (< |i#2@@19| (|Seq#Length| (Lit |s#0@@181|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@134|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#2@@19|)))))) (=> (and (<= (LitInt 0) |i#2@@19|) (< |i#2@@19| (|Seq#Length| (Lit |s#0@@181|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@134|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#2@@19|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#2@@19|))))))) :qid |totalord.761:16| :skolemid |2608| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@181| |i#2@@19|))) ))) (forall ((|key#1@@13| Int) ) (!  (=> true (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@134|) ($Box (int_2_U |key#1@@13|)))) (exists ((|i#3@@13| Int) ) (!  (and (and (and (<= (LitInt 0) |i#3@@13|) (< |i#3@@13| (|Seq#Length| (Lit |s#0@@181|)))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#3@@13|))))) |key#1@@13|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@181|) |i#3@@13|))) (MapType0Select (|Map#Elements| (Lit |m#0@@134|)) ($Box (int_2_U |key#1@@13|))))) :qid |totalord.762:44| :skolemid |2609| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@181| |i#3@@13|))) )))) :qid |totalord.762:16| :skolemid |2610| :pattern ( (MapType0Select (|Map#Elements| |m#0@@134|) ($Box (int_2_U |key#1@@13|)))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@134|) ($Box (int_2_U |key#1@@13|)))) ))) (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@547) (Lit |s#0@@181|) (Lit |m#0@@134|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2611| :pattern ( (Integer__Order.__default.SortedSeqForMap Integer_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@547) (Lit |s#0@@181|) (Lit |m#0@@134|))) ))))
(assert (forall (($ly@@548 T@U) (|s#0@@182| T@U) ) (!  (=> (and (= (type $ly@@548) LayerTypeType) (= (type |s#0@@182|) (MapType0Type BoxType boolType))) (= (Integer__Order.__default.minimum ($LS $ly@@548) |s#0@@182|) (Integer__Order.__default.minimum $ly@@548 |s#0@@182|))) :qid |totalord.765:22| :skolemid |2612| :pattern ( (Integer__Order.__default.minimum ($LS $ly@@548) |s#0@@182|)) )))
(assert (forall (($ly@@549 T@U) (|s#0@@183| T@U) ) (!  (=> (and (= (type $ly@@549) LayerTypeType) (= (type |s#0@@183|) (MapType0Type BoxType boolType))) (= (Integer__Order.__default.minimum $ly@@549 |s#0@@183|) (Integer__Order.__default.minimum $LZ |s#0@@183|))) :qid |totalord.765:22| :skolemid |2613| :pattern ( (Integer__Order.__default.minimum (AsFuelBottom $ly@@549) |s#0@@183|)) )))
(assert  (=> true (forall (($ly@@550 T@U) (|s#0@@184| T@U) ) (!  (=> (and (and (= (type $ly@@550) LayerTypeType) (= (type |s#0@@184|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.minimum#canCall| |s#0@@184|) (and ($Is |s#0@@184| (TSet TInt)) (>= (|Set#Card| |s#0@@184|) (LitInt 1))))) (and (U_2_bool (MapType0Select |s#0@@184| ($Box (int_2_U (Integer__Order.__default.minimum $ly@@550 |s#0@@184|))))) (forall ((|y#0@@25| Int) ) (!  (=> (U_2_bool (MapType0Select |s#0@@184| ($Box (int_2_U |y#0@@25|)))) (Integer__Order.__default.lte (Integer__Order.__default.minimum $ly@@550 |s#0@@184|) |y#0@@25|)) :qid |totalord.768:18| :skolemid |2614| :pattern ( (Integer__Order.__default.lte (Integer__Order.__default.minimum $ly@@550 |s#0@@184|) |y#0@@25|)) :pattern ( (MapType0Select |s#0@@184| ($Box (int_2_U |y#0@@25|)))) )))) :qid |totalord.765:22| :skolemid |2615| :pattern ( (Integer__Order.__default.minimum $ly@@550 |s#0@@184|)) ))))
(assert (forall (($ly@@551 T@U) ($Heap@@60 T@U) (|s#0@@185| T@U) ) (!  (=> (and (and (and (= (type $ly@@551) LayerTypeType) (= (type $Heap@@60) (MapType0Type refType MapType1Type))) (= (type |s#0@@185|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@60) ($Is |s#0@@185| (TSet TInt)))) (and (=> (|Integer__Order.__default.minimum#requires| $ly@@551 |s#0@@185|) (>= (|Set#Card| |s#0@@185|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@185|) (LitInt 1)) (|Integer__Order.__default.minimum#requires| $ly@@551 |s#0@@185|)))) :qid |totalord.765:22| :skolemid |2616| :pattern ( (|Integer__Order.__default.minimum#requires| $ly@@551 |s#0@@185|) ($IsGoodHeap $Heap@@60)) )))
(assert (forall ((s@@50 T@U) ) (!  (=> (and (= (type s@@50) (MapType0Type BoxType boolType)) (|$let#25$canCall| s@@50)) (U_2_bool (MapType0Select s@@50 ($Box (int_2_U (|$let#25_a| s@@50)))))) :qid |totalord.772:5| :skolemid |2617| :pattern ( (|$let#25_a| s@@50)) )))
(assert  (=> true (forall (($ly@@552 T@U) ($Heap@@61 T@U) (|s#0@@186| T@U) ) (!  (=> (and (and (and (= (type $ly@@552) LayerTypeType) (= (type $Heap@@61) (MapType0Type refType MapType1Type))) (= (type |s#0@@186|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.minimum#canCall| |s#0@@186|) (and (and ($IsGoodHeap $Heap@@61) ($Is |s#0@@186| (TSet TInt))) (>= (|Set#Card| |s#0@@186|) (LitInt 1))))) (and (and (|$let#25$canCall| |s#0@@186|) (let ((|s'#0@@3| (|Set#Difference| |s#0@@186| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#25_a| |s#0@@186|))))))) (=> (not (|Set#Equal| |s'#0@@3| (|Set#Empty| BoxType))) (and (|Integer__Order.__default.minimum#canCall| |s'#0@@3|) (let ((|m'#0@@14| (Integer__Order.__default.minimum $ly@@552 |s'#0@@3|))) (|Integer__Order.__default.lt#canCall| (|$let#25_a| |s#0@@186|) |m'#0@@14|)))))) (= (Integer__Order.__default.minimum ($LS $ly@@552) |s#0@@186|) (let ((|a#0@@185| (|$let#25_a| |s#0@@186|))) (let ((|s'#1@@3| (|Set#Difference| |s#0@@186| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#0@@185|)))))) (ite (|Set#Equal| |s'#1@@3| (|Set#Empty| BoxType)) |a#0@@185| (let ((|m'#1@@5| (Integer__Order.__default.minimum $ly@@552 |s'#1@@3|))) (ite (Integer__Order.__default.lt |a#0@@185| |m'#1@@5|) |a#0@@185| |m'#1@@5|)))))))) :qid |totalord.765:22| :skolemid |2618| :pattern ( (Integer__Order.__default.minimum ($LS $ly@@552) |s#0@@186|) ($IsGoodHeap $Heap@@61)) ))))
(assert  (=> true (forall (($ly@@553 T@U) ($Heap@@62 T@U) (|s#0@@187| T@U) ) (!  (=> (and (and (and (= (type $ly@@553) LayerTypeType) (= (type $Heap@@62) (MapType0Type refType MapType1Type))) (= (type |s#0@@187|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.minimum#canCall| (Lit |s#0@@187|)) (and (and ($IsGoodHeap $Heap@@62) ($Is |s#0@@187| (TSet TInt))) (>= (|Set#Card| (Lit |s#0@@187|)) (LitInt 1))))) (and (and (|$let#25$canCall| (Lit |s#0@@187|)) (let ((|s'#2@@3| (|Set#Difference| |s#0@@187| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#25_a| (Lit |s#0@@187|)))))))) (=> (not (|Set#Equal| |s'#2@@3| (|Set#Empty| BoxType))) (and (|Integer__Order.__default.minimum#canCall| |s'#2@@3|) (let ((|m'#2@@4| (Integer__Order.__default.minimum ($LS $ly@@553) |s'#2@@3|))) (|Integer__Order.__default.lt#canCall| (|$let#25_a| (Lit |s#0@@187|)) |m'#2@@4|)))))) (= (Integer__Order.__default.minimum ($LS $ly@@553) (Lit |s#0@@187|)) (let ((|a#1@@7| (|$let#25_a| (Lit |s#0@@187|)))) (let ((|s'#3@@3| (|Set#Difference| |s#0@@187| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#1@@7|)))))) (ite (|Set#Equal| |s'#3@@3| (|Set#Empty| BoxType)) |a#1@@7| (let ((|m'#3@@3| (Integer__Order.__default.minimum ($LS $ly@@553) |s'#3@@3|))) (ite (Integer__Order.__default.lt |a#1@@7| |m'#3@@3|) |a#1@@7| |m'#3@@3|)))))))) :qid |totalord.765:22| :weight 3 :skolemid |2619| :pattern ( (Integer__Order.__default.minimum ($LS $ly@@553) (Lit |s#0@@187|)) ($IsGoodHeap $Heap@@62)) ))))
(assert (forall ((arg0@@325 T@U) (arg1@@197 T@U) ) (! (= (type (Integer__Order.__default.minimumOpt arg0@@325 arg1@@197)) DatatypeTypeType) :qid |funType:Integer__Order.__default.minimumOpt| :pattern ( (Integer__Order.__default.minimumOpt arg0@@325 arg1@@197)) )))
(assert (forall (($ly@@554 T@U) (|s#0@@188| T@U) ) (!  (=> (and (= (type $ly@@554) LayerTypeType) (= (type |s#0@@188|) (MapType0Type BoxType boolType))) (= (Integer__Order.__default.minimumOpt ($LS $ly@@554) |s#0@@188|) (Integer__Order.__default.minimumOpt $ly@@554 |s#0@@188|))) :qid |totalord.788:22| :skolemid |2620| :pattern ( (Integer__Order.__default.minimumOpt ($LS $ly@@554) |s#0@@188|)) )))
(assert (forall (($ly@@555 T@U) (|s#0@@189| T@U) ) (!  (=> (and (= (type $ly@@555) LayerTypeType) (= (type |s#0@@189|) (MapType0Type BoxType boolType))) (= (Integer__Order.__default.minimumOpt $ly@@555 |s#0@@189|) (Integer__Order.__default.minimumOpt $LZ |s#0@@189|))) :qid |totalord.788:22| :skolemid |2621| :pattern ( (Integer__Order.__default.minimumOpt (AsFuelBottom $ly@@555) |s#0@@189|)) )))
(assert  (=> true (forall (($ly@@556 T@U) (|s#0@@190| T@U) ) (!  (=> (and (and (= (type $ly@@556) LayerTypeType) (= (type |s#0@@190|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.minimumOpt#canCall| |s#0@@190|) ($Is |s#0@@190| (TSet TInt)))) (and (and (and (=> (Options.Option.Some_q (Integer__Order.__default.minimumOpt $ly@@556 |s#0@@190|)) (U_2_bool (MapType0Select |s#0@@190| (Options.Option.value (Integer__Order.__default.minimumOpt $ly@@556 |s#0@@190|))))) (=> (Options.Option.Some_q (Integer__Order.__default.minimumOpt $ly@@556 |s#0@@190|)) (forall ((|y#0@@26| Int) ) (!  (=> (U_2_bool (MapType0Select |s#0@@190| ($Box (int_2_U |y#0@@26|)))) (Integer__Order.__default.lte (U_2_int ($Unbox intType (Options.Option.value (Integer__Order.__default.minimumOpt $ly@@556 |s#0@@190|)))) |y#0@@26|)) :qid |totalord.790:30| :skolemid |2622| :pattern ( (Integer__Order.__default.lte (U_2_int ($Unbox intType (Options.Option.value (Integer__Order.__default.minimumOpt $ly@@556 |s#0@@190|)))) |y#0@@26|)) :pattern ( (MapType0Select |s#0@@190| ($Box (int_2_U |y#0@@26|)))) )))) (=> (Options.Option.None_q (Integer__Order.__default.minimumOpt $ly@@556 |s#0@@190|)) (|Set#Equal| |s#0@@190| (|Set#Empty| BoxType)))) ($Is (Integer__Order.__default.minimumOpt $ly@@556 |s#0@@190|) (Tclass.Options.Option TInt)))) :qid |totalord.788:22| :skolemid |2623| :pattern ( (Integer__Order.__default.minimumOpt $ly@@556 |s#0@@190|)) ))))
(assert (forall (($ly@@557 T@U) (|s#0@@191| T@U) ) (!  (=> (and (and (= (type $ly@@557) LayerTypeType) (= (type |s#0@@191|) (MapType0Type BoxType boolType))) ($Is |s#0@@191| (TSet TInt))) (and (=> (|Integer__Order.__default.minimumOpt#requires| $ly@@557 |s#0@@191|) true) (=> true (|Integer__Order.__default.minimumOpt#requires| $ly@@557 |s#0@@191|)))) :qid |totalord.788:22| :skolemid |2624| :pattern ( (|Integer__Order.__default.minimumOpt#requires| $ly@@557 |s#0@@191|)) )))
(assert (= (type StartFuel_Integer_Order._default.minimum) LayerTypeType))
(assert  (=> true (forall (($ly@@558 T@U) (|s#0@@192| T@U) ) (!  (=> (and (and (= (type $ly@@558) LayerTypeType) (= (type |s#0@@192|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.minimumOpt#canCall| |s#0@@192|) ($Is |s#0@@192| (TSet TInt)))) (and (=> (not (|Set#Equal| |s#0@@192| (|Set#Empty| BoxType))) (|Integer__Order.__default.minimum#canCall| |s#0@@192|)) (= (Integer__Order.__default.minimumOpt ($LS $ly@@558) |s#0@@192|) (ite (|Set#Equal| |s#0@@192| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Integer__Order.__default.minimum StartFuel_Integer_Order._default.minimum |s#0@@192|)))))))) :qid |totalord.788:22| :skolemid |2625| :pattern ( (Integer__Order.__default.minimumOpt ($LS $ly@@558) |s#0@@192|)) ))))
(assert  (=> true (forall (($ly@@559 T@U) (|s#0@@193| T@U) ) (!  (=> (and (and (= (type $ly@@559) LayerTypeType) (= (type |s#0@@193|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.minimumOpt#canCall| (Lit |s#0@@193|)) ($Is |s#0@@193| (TSet TInt)))) (and (=> (not (|Set#Equal| |s#0@@193| (|Set#Empty| BoxType))) (|Integer__Order.__default.minimum#canCall| (Lit |s#0@@193|))) (= (Integer__Order.__default.minimumOpt ($LS $ly@@559) (Lit |s#0@@193|)) (ite (|Set#Equal| |s#0@@193| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Integer__Order.__default.minimum StartFuel_Integer_Order._default.minimum (Lit |s#0@@193|))))))))) :qid |totalord.788:22| :weight 3 :skolemid |2626| :pattern ( (Integer__Order.__default.minimumOpt ($LS $ly@@559) (Lit |s#0@@193|))) ))))
(assert (forall (($ly@@560 T@U) (|s#0@@194| T@U) ) (!  (=> (and (= (type $ly@@560) LayerTypeType) (= (type |s#0@@194|) (MapType0Type BoxType boolType))) (= (Integer__Order.__default.maximum ($LS $ly@@560) |s#0@@194|) (Integer__Order.__default.maximum $ly@@560 |s#0@@194|))) :qid |totalord.796:22| :skolemid |2627| :pattern ( (Integer__Order.__default.maximum ($LS $ly@@560) |s#0@@194|)) )))
(assert (forall (($ly@@561 T@U) (|s#0@@195| T@U) ) (!  (=> (and (= (type $ly@@561) LayerTypeType) (= (type |s#0@@195|) (MapType0Type BoxType boolType))) (= (Integer__Order.__default.maximum $ly@@561 |s#0@@195|) (Integer__Order.__default.maximum $LZ |s#0@@195|))) :qid |totalord.796:22| :skolemid |2628| :pattern ( (Integer__Order.__default.maximum (AsFuelBottom $ly@@561) |s#0@@195|)) )))
(assert  (=> true (forall (($ly@@562 T@U) (|s#0@@196| T@U) ) (!  (=> (and (and (= (type $ly@@562) LayerTypeType) (= (type |s#0@@196|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.maximum#canCall| |s#0@@196|) (and ($Is |s#0@@196| (TSet TInt)) (>= (|Set#Card| |s#0@@196|) (LitInt 1))))) (and (U_2_bool (MapType0Select |s#0@@196| ($Box (int_2_U (Integer__Order.__default.maximum $ly@@562 |s#0@@196|))))) (forall ((|y#0@@27| Int) ) (!  (=> (U_2_bool (MapType0Select |s#0@@196| ($Box (int_2_U |y#0@@27|)))) (Integer__Order.__default.lte |y#0@@27| (Integer__Order.__default.maximum $ly@@562 |s#0@@196|))) :qid |totalord.799:18| :skolemid |2629| :pattern ( (Integer__Order.__default.lte |y#0@@27| (Integer__Order.__default.maximum $ly@@562 |s#0@@196|))) :pattern ( (MapType0Select |s#0@@196| ($Box (int_2_U |y#0@@27|)))) )))) :qid |totalord.796:22| :skolemid |2630| :pattern ( (Integer__Order.__default.maximum $ly@@562 |s#0@@196|)) ))))
(assert (forall (($ly@@563 T@U) ($Heap@@63 T@U) (|s#0@@197| T@U) ) (!  (=> (and (and (and (= (type $ly@@563) LayerTypeType) (= (type $Heap@@63) (MapType0Type refType MapType1Type))) (= (type |s#0@@197|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@63) ($Is |s#0@@197| (TSet TInt)))) (and (=> (|Integer__Order.__default.maximum#requires| $ly@@563 |s#0@@197|) (>= (|Set#Card| |s#0@@197|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@197|) (LitInt 1)) (|Integer__Order.__default.maximum#requires| $ly@@563 |s#0@@197|)))) :qid |totalord.796:22| :skolemid |2631| :pattern ( (|Integer__Order.__default.maximum#requires| $ly@@563 |s#0@@197|) ($IsGoodHeap $Heap@@63)) )))
(assert (forall ((s@@51 T@U) ) (!  (=> (and (= (type s@@51) (MapType0Type BoxType boolType)) (|$let#28$canCall| s@@51)) (U_2_bool (MapType0Select s@@51 ($Box (int_2_U (|$let#28_a| s@@51)))))) :qid |totalord.801:5| :skolemid |2632| :pattern ( (|$let#28_a| s@@51)) )))
(assert  (=> true (forall (($ly@@564 T@U) ($Heap@@64 T@U) (|s#0@@198| T@U) ) (!  (=> (and (and (and (= (type $ly@@564) LayerTypeType) (= (type $Heap@@64) (MapType0Type refType MapType1Type))) (= (type |s#0@@198|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.maximum#canCall| |s#0@@198|) (and (and ($IsGoodHeap $Heap@@64) ($Is |s#0@@198| (TSet TInt))) (>= (|Set#Card| |s#0@@198|) (LitInt 1))))) (and (and (|$let#28$canCall| |s#0@@198|) (let ((|s'#0@@4| (|Set#Difference| |s#0@@198| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#28_a| |s#0@@198|))))))) (=> (not (|Set#Equal| |s'#0@@4| (|Set#Empty| BoxType))) (and (|Integer__Order.__default.maximum#canCall| |s'#0@@4|) (let ((|m'#0@@15| (Integer__Order.__default.maximum $ly@@564 |s'#0@@4|))) (|Integer__Order.__default.lt#canCall| |m'#0@@15| (|$let#28_a| |s#0@@198|))))))) (= (Integer__Order.__default.maximum ($LS $ly@@564) |s#0@@198|) (let ((|a#0@@186| (|$let#28_a| |s#0@@198|))) (let ((|s'#1@@4| (|Set#Difference| |s#0@@198| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#0@@186|)))))) (ite (|Set#Equal| |s'#1@@4| (|Set#Empty| BoxType)) |a#0@@186| (let ((|m'#1@@6| (Integer__Order.__default.maximum $ly@@564 |s'#1@@4|))) (ite (Integer__Order.__default.lt |m'#1@@6| |a#0@@186|) |a#0@@186| |m'#1@@6|)))))))) :qid |totalord.796:22| :skolemid |2633| :pattern ( (Integer__Order.__default.maximum ($LS $ly@@564) |s#0@@198|) ($IsGoodHeap $Heap@@64)) ))))
(assert  (=> true (forall (($ly@@565 T@U) ($Heap@@65 T@U) (|s#0@@199| T@U) ) (!  (=> (and (and (and (= (type $ly@@565) LayerTypeType) (= (type $Heap@@65) (MapType0Type refType MapType1Type))) (= (type |s#0@@199|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.maximum#canCall| (Lit |s#0@@199|)) (and (and ($IsGoodHeap $Heap@@65) ($Is |s#0@@199| (TSet TInt))) (>= (|Set#Card| (Lit |s#0@@199|)) (LitInt 1))))) (and (and (|$let#28$canCall| (Lit |s#0@@199|)) (let ((|s'#2@@4| (|Set#Difference| |s#0@@199| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#28_a| (Lit |s#0@@199|)))))))) (=> (not (|Set#Equal| |s'#2@@4| (|Set#Empty| BoxType))) (and (|Integer__Order.__default.maximum#canCall| |s'#2@@4|) (let ((|m'#2@@5| (Integer__Order.__default.maximum ($LS $ly@@565) |s'#2@@4|))) (|Integer__Order.__default.lt#canCall| |m'#2@@5| (|$let#28_a| (Lit |s#0@@199|)))))))) (= (Integer__Order.__default.maximum ($LS $ly@@565) (Lit |s#0@@199|)) (let ((|a#1@@8| (|$let#28_a| (Lit |s#0@@199|)))) (let ((|s'#3@@4| (|Set#Difference| |s#0@@199| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#1@@8|)))))) (ite (|Set#Equal| |s'#3@@4| (|Set#Empty| BoxType)) |a#1@@8| (let ((|m'#3@@4| (Integer__Order.__default.maximum ($LS $ly@@565) |s'#3@@4|))) (ite (Integer__Order.__default.lt |m'#3@@4| |a#1@@8|) |a#1@@8| |m'#3@@4|)))))))) :qid |totalord.796:22| :weight 3 :skolemid |2634| :pattern ( (Integer__Order.__default.maximum ($LS $ly@@565) (Lit |s#0@@199|)) ($IsGoodHeap $Heap@@65)) ))))
(assert (forall ((arg0@@326 T@U) (arg1@@198 T@U) ) (! (= (type (Integer__Order.__default.maximumOpt arg0@@326 arg1@@198)) DatatypeTypeType) :qid |funType:Integer__Order.__default.maximumOpt| :pattern ( (Integer__Order.__default.maximumOpt arg0@@326 arg1@@198)) )))
(assert (forall (($ly@@566 T@U) (|s#0@@200| T@U) ) (!  (=> (and (= (type $ly@@566) LayerTypeType) (= (type |s#0@@200|) (MapType0Type BoxType boolType))) (= (Integer__Order.__default.maximumOpt ($LS $ly@@566) |s#0@@200|) (Integer__Order.__default.maximumOpt $ly@@566 |s#0@@200|))) :qid |totalord.817:22| :skolemid |2635| :pattern ( (Integer__Order.__default.maximumOpt ($LS $ly@@566) |s#0@@200|)) )))
(assert (forall (($ly@@567 T@U) (|s#0@@201| T@U) ) (!  (=> (and (= (type $ly@@567) LayerTypeType) (= (type |s#0@@201|) (MapType0Type BoxType boolType))) (= (Integer__Order.__default.maximumOpt $ly@@567 |s#0@@201|) (Integer__Order.__default.maximumOpt $LZ |s#0@@201|))) :qid |totalord.817:22| :skolemid |2636| :pattern ( (Integer__Order.__default.maximumOpt (AsFuelBottom $ly@@567) |s#0@@201|)) )))
(assert  (=> true (forall (($ly@@568 T@U) (|s#0@@202| T@U) ) (!  (=> (and (and (= (type $ly@@568) LayerTypeType) (= (type |s#0@@202|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.maximumOpt#canCall| |s#0@@202|) ($Is |s#0@@202| (TSet TInt)))) (and (and (and (=> (Options.Option.Some_q (Integer__Order.__default.maximumOpt $ly@@568 |s#0@@202|)) (U_2_bool (MapType0Select |s#0@@202| (Options.Option.value (Integer__Order.__default.maximumOpt $ly@@568 |s#0@@202|))))) (=> (Options.Option.Some_q (Integer__Order.__default.maximumOpt $ly@@568 |s#0@@202|)) (forall ((|y#0@@28| Int) ) (!  (=> (U_2_bool (MapType0Select |s#0@@202| ($Box (int_2_U |y#0@@28|)))) (Integer__Order.__default.lte |y#0@@28| (U_2_int ($Unbox intType (Options.Option.value (Integer__Order.__default.maximumOpt $ly@@568 |s#0@@202|)))))) :qid |totalord.819:30| :skolemid |2637| :pattern ( (Integer__Order.__default.lte |y#0@@28| (U_2_int ($Unbox intType (Options.Option.value (Integer__Order.__default.maximumOpt $ly@@568 |s#0@@202|)))))) :pattern ( (MapType0Select |s#0@@202| ($Box (int_2_U |y#0@@28|)))) )))) (=> (Options.Option.None_q (Integer__Order.__default.maximumOpt $ly@@568 |s#0@@202|)) (|Set#Equal| |s#0@@202| (|Set#Empty| BoxType)))) ($Is (Integer__Order.__default.maximumOpt $ly@@568 |s#0@@202|) (Tclass.Options.Option TInt)))) :qid |totalord.817:22| :skolemid |2638| :pattern ( (Integer__Order.__default.maximumOpt $ly@@568 |s#0@@202|)) ))))
(assert (forall (($ly@@569 T@U) (|s#0@@203| T@U) ) (!  (=> (and (and (= (type $ly@@569) LayerTypeType) (= (type |s#0@@203|) (MapType0Type BoxType boolType))) ($Is |s#0@@203| (TSet TInt))) (and (=> (|Integer__Order.__default.maximumOpt#requires| $ly@@569 |s#0@@203|) true) (=> true (|Integer__Order.__default.maximumOpt#requires| $ly@@569 |s#0@@203|)))) :qid |totalord.817:22| :skolemid |2639| :pattern ( (|Integer__Order.__default.maximumOpt#requires| $ly@@569 |s#0@@203|)) )))
(assert (= (type StartFuel_Integer_Order._default.maximum) LayerTypeType))
(assert  (=> true (forall (($ly@@570 T@U) (|s#0@@204| T@U) ) (!  (=> (and (and (= (type $ly@@570) LayerTypeType) (= (type |s#0@@204|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.maximumOpt#canCall| |s#0@@204|) ($Is |s#0@@204| (TSet TInt)))) (and (=> (not (|Set#Equal| |s#0@@204| (|Set#Empty| BoxType))) (|Integer__Order.__default.maximum#canCall| |s#0@@204|)) (= (Integer__Order.__default.maximumOpt ($LS $ly@@570) |s#0@@204|) (ite (|Set#Equal| |s#0@@204| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Integer__Order.__default.maximum StartFuel_Integer_Order._default.maximum |s#0@@204|)))))))) :qid |totalord.817:22| :skolemid |2640| :pattern ( (Integer__Order.__default.maximumOpt ($LS $ly@@570) |s#0@@204|)) ))))
(assert  (=> true (forall (($ly@@571 T@U) (|s#0@@205| T@U) ) (!  (=> (and (and (= (type $ly@@571) LayerTypeType) (= (type |s#0@@205|) (MapType0Type BoxType boolType))) (or (|Integer__Order.__default.maximumOpt#canCall| (Lit |s#0@@205|)) ($Is |s#0@@205| (TSet TInt)))) (and (=> (not (|Set#Equal| |s#0@@205| (|Set#Empty| BoxType))) (|Integer__Order.__default.maximum#canCall| (Lit |s#0@@205|))) (= (Integer__Order.__default.maximumOpt ($LS $ly@@571) (Lit |s#0@@205|)) (ite (|Set#Equal| |s#0@@205| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Integer__Order.__default.maximum StartFuel_Integer_Order._default.maximum (Lit |s#0@@205|))))))))) :qid |totalord.817:22| :weight 3 :skolemid |2641| :pattern ( (Integer__Order.__default.maximumOpt ($LS $ly@@571) (Lit |s#0@@205|))) ))))
(assert  (=> true (forall ((|a#0@@187| Int) (|b#0@@150| Int) ) (!  (=> true true) :qid |totalord.12:15| :skolemid |2642| :pattern ( (Integer__Order.__default.lt |a#0@@187| |b#0@@150|)) ))))
(assert (forall ((|a#0@@188| Int) (|b#0@@151| Int) ) (!  (and (=> (|Integer__Order.__default.lt#requires| |a#0@@188| |b#0@@151|) true) (=> true (|Integer__Order.__default.lt#requires| |a#0@@188| |b#0@@151|))) :qid |totalord.12:15| :skolemid |2643| :pattern ( (|Integer__Order.__default.lt#requires| |a#0@@188| |b#0@@151|)) )))
(assert  (=> true (forall ((|a#0@@189| Int) (|b#0@@152| Int) ) (!  (=> true (and (|Integer__Order.__default.lte#canCall| |a#0@@189| |b#0@@152|) (and (=> (Integer__Order.__default.lt |a#0@@189| |b#0@@152|) (and (Integer__Order.__default.lte |a#0@@189| |b#0@@152|) (not (= |a#0@@189| |b#0@@152|)))) (=> (and (Integer__Order.__default.lte |a#0@@189| |b#0@@152|) (not (= |a#0@@189| |b#0@@152|))) (Integer__Order.__default.lt |a#0@@189| |b#0@@152|))))) :qid |totalord.12:15| :skolemid |2644| :pattern ( (Integer__Order.__default.lt |a#0@@189| |b#0@@152|)) ))))
(assert  (=> true (forall ((|a#0@@190| Int) (|b#0@@153| Int) ) (!  (=> true (and (|Integer__Order.__default.lte#canCall| (LitInt |a#0@@190|) (LitInt |b#0@@153|)) (and (=> (Integer__Order.__default.lt (LitInt |a#0@@190|) (LitInt |b#0@@153|)) (U_2_bool (Lit (bool_2_U  (and (Integer__Order.__default.lte (LitInt |a#0@@190|) (LitInt |b#0@@153|)) (not (= |a#0@@190| |b#0@@153|))))))) (=> (U_2_bool (Lit (bool_2_U  (and (Integer__Order.__default.lte (LitInt |a#0@@190|) (LitInt |b#0@@153|)) (not (= |a#0@@190| |b#0@@153|)))))) (Integer__Order.__default.lt (LitInt |a#0@@190|) (LitInt |b#0@@153|)))))) :qid |totalord.12:15| :weight 3 :skolemid |2645| :pattern ( (Integer__Order.__default.lt (LitInt |a#0@@190|) (LitInt |b#0@@153|))) ))))
(assert  (=> true (forall ((|a#0@@191| Int) (|b#0@@154| Int) ) (!  (=> true true) :qid |totalord.24:16| :skolemid |2646| :pattern ( (Integer__Order.__default.Min |a#0@@191| |b#0@@154|)) ))))
(assert (forall ((|a#0@@192| Int) (|b#0@@155| Int) ) (!  (and (=> (|Integer__Order.__default.Min#requires| |a#0@@192| |b#0@@155|) true) (=> true (|Integer__Order.__default.Min#requires| |a#0@@192| |b#0@@155|))) :qid |totalord.24:16| :skolemid |2647| :pattern ( (|Integer__Order.__default.Min#requires| |a#0@@192| |b#0@@155|)) )))
(assert  (=> true (forall ((|a#0@@193| Int) (|b#0@@156| Int) ) (!  (=> true (and (|Integer__Order.__default.lte#canCall| |a#0@@193| |b#0@@156|) (= (Integer__Order.__default.Min |a#0@@193| |b#0@@156|) (ite (Integer__Order.__default.lte |a#0@@193| |b#0@@156|) |a#0@@193| |b#0@@156|)))) :qid |totalord.24:16| :skolemid |2648| :pattern ( (Integer__Order.__default.Min |a#0@@193| |b#0@@156|)) ))))
(assert  (=> true (forall ((|a#0@@194| Int) (|b#0@@157| Int) ) (!  (=> true (and (|Integer__Order.__default.lte#canCall| (LitInt |a#0@@194|) (LitInt |b#0@@157|)) (= (Integer__Order.__default.Min (LitInt |a#0@@194|) (LitInt |b#0@@157|)) (ite (Integer__Order.__default.lte (LitInt |a#0@@194|) (LitInt |b#0@@157|)) |a#0@@194| |b#0@@157|)))) :qid |totalord.24:16| :weight 3 :skolemid |2649| :pattern ( (Integer__Order.__default.Min (LitInt |a#0@@194|) (LitInt |b#0@@157|))) ))))
(assert  (=> true (forall ((|a#0@@195| Int) (|b#0@@158| Int) ) (!  (=> true true) :qid |totalord.29:16| :skolemid |2650| :pattern ( (Integer__Order.__default.Max |a#0@@195| |b#0@@158|)) ))))
(assert (forall ((|a#0@@196| Int) (|b#0@@159| Int) ) (!  (and (=> (|Integer__Order.__default.Max#requires| |a#0@@196| |b#0@@159|) true) (=> true (|Integer__Order.__default.Max#requires| |a#0@@196| |b#0@@159|))) :qid |totalord.29:16| :skolemid |2651| :pattern ( (|Integer__Order.__default.Max#requires| |a#0@@196| |b#0@@159|)) )))
(assert  (=> true (forall ((|a#0@@197| Int) (|b#0@@160| Int) ) (!  (=> true (and (|Integer__Order.__default.lte#canCall| |a#0@@197| |b#0@@160|) (= (Integer__Order.__default.Max |a#0@@197| |b#0@@160|) (ite (Integer__Order.__default.lte |a#0@@197| |b#0@@160|) |b#0@@160| |a#0@@197|)))) :qid |totalord.29:16| :skolemid |2652| :pattern ( (Integer__Order.__default.Max |a#0@@197| |b#0@@160|)) ))))
(assert  (=> true (forall ((|a#0@@198| Int) (|b#0@@161| Int) ) (!  (=> true (and (|Integer__Order.__default.lte#canCall| (LitInt |a#0@@198|) (LitInt |b#0@@161|)) (= (Integer__Order.__default.Max (LitInt |a#0@@198|) (LitInt |b#0@@161|)) (ite (Integer__Order.__default.lte (LitInt |a#0@@198|) (LitInt |b#0@@161|)) |b#0@@161| |a#0@@198|)))) :qid |totalord.29:16| :weight 3 :skolemid |2653| :pattern ( (Integer__Order.__default.Max (LitInt |a#0@@198|) (LitInt |b#0@@161|))) ))))
(assert (forall (($ly@@572 T@U) (|run#0@@172| T@U) ) (!  (=> (and (= (type $ly@@572) LayerTypeType) (= (type |run#0@@172|) (SeqType BoxType))) (and (=> (Integer__Order.__default.IsSorted ($LS $ly@@572) |run#0@@172|) (Integer__Order.__default.IsSorted $ly@@572 |run#0@@172|)) (=> (Integer__Order.__default.IsSorted $ly@@572 |run#0@@172|) (Integer__Order.__default.IsSorted ($LS $ly@@572) |run#0@@172|)))) :qid |totalord.41:23| :skolemid |2654| :pattern ( (Integer__Order.__default.IsSorted ($LS $ly@@572) |run#0@@172|)) )))
(assert (forall (($ly@@573 T@U) (|run#0@@173| T@U) ) (!  (=> (and (= (type $ly@@573) LayerTypeType) (= (type |run#0@@173|) (SeqType BoxType))) (and (=> (Integer__Order.__default.IsSorted $ly@@573 |run#0@@173|) (Integer__Order.__default.IsSorted $LZ |run#0@@173|)) (=> (Integer__Order.__default.IsSorted $LZ |run#0@@173|) (Integer__Order.__default.IsSorted $ly@@573 |run#0@@173|)))) :qid |totalord.41:23| :skolemid |2655| :pattern ( (Integer__Order.__default.IsSorted (AsFuelBottom $ly@@573) |run#0@@173|)) )))
(assert  (=> true (forall (($ly@@574 T@U) (|run#0@@174| T@U) ) (!  (=> (and (and (= (type $ly@@574) LayerTypeType) (= (type |run#0@@174|) (SeqType BoxType))) (or (|Integer__Order.__default.IsSorted#canCall| |run#0@@174|) ($Is |run#0@@174| (TSeq TInt)))) (and (=> (= (|Seq#Length| |run#0@@174|) (LitInt 0)) (Integer__Order.__default.IsSorted $ly@@574 |run#0@@174|)) (=> (= (|Seq#Length| |run#0@@174|) (LitInt 1)) (Integer__Order.__default.IsSorted $ly@@574 |run#0@@174|)))) :qid |totalord.41:23| :skolemid |2656| :pattern ( (Integer__Order.__default.IsSorted $ly@@574 |run#0@@174|)) ))))
(assert (forall (($ly@@575 T@U) (|run#0@@175| T@U) ) (!  (=> (and (and (= (type $ly@@575) LayerTypeType) (= (type |run#0@@175|) (SeqType BoxType))) ($Is |run#0@@175| (TSeq TInt))) (and (=> (|Integer__Order.__default.IsSorted#requires| $ly@@575 |run#0@@175|) true) (=> true (|Integer__Order.__default.IsSorted#requires| $ly@@575 |run#0@@175|)))) :qid |totalord.41:23| :skolemid |2657| :pattern ( (|Integer__Order.__default.IsSorted#requires| $ly@@575 |run#0@@175|)) )))
(assert  (=> true (forall (($ly@@576 T@U) (|run#0@@176| T@U) ) (!  (=> (and (and (= (type $ly@@576) LayerTypeType) (= (type |run#0@@176|) (SeqType BoxType))) (or (|Integer__Order.__default.IsSorted#canCall| |run#0@@176|) ($Is |run#0@@176| (TSeq TInt)))) (and (forall ((|i#0@@105| Int) (|j#0@@24| Int) ) (!  (=> (< |j#0@@24| (|Seq#Length| |run#0@@176|)) (|Integer__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@176| |i#0@@105|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@176| |j#0@@24|))))) :qid |totalord.45:12| :skolemid |2658| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@176| |j#0@@24|)) ($Unbox intType (|Seq#Index| |run#0@@176| |i#0@@105|))) )) (and (=> (Integer__Order.__default.IsSorted ($LS $ly@@576) |run#0@@176|) (forall ((|i#0@@106| Int) (|j#0@@25| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@106|) (<= |i#0@@106| |j#0@@25|)) (< |j#0@@25| (|Seq#Length| |run#0@@176|))) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@176| |i#0@@106|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@176| |j#0@@25|)))))) :qid |totalord.45:12| :skolemid |2659| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@176| |j#0@@25|)) ($Unbox intType (|Seq#Index| |run#0@@176| |i#0@@106|))) ))) (=> (forall ((|i#0@@107| Int) (|j#0@@26| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@107|) (<= |i#0@@107| |j#0@@26|)) (< |j#0@@26| (|Seq#Length| |run#0@@176|))) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@176| |i#0@@107|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@176| |j#0@@26|)))))) :qid |totalord.45:12| :skolemid |2659| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@176| |j#0@@26|)) ($Unbox intType (|Seq#Index| |run#0@@176| |i#0@@107|))) )) (Integer__Order.__default.IsSorted ($LS $ly@@576) |run#0@@176|))))) :qid |totalord.41:23| :skolemid |2660| :pattern ( (Integer__Order.__default.IsSorted ($LS $ly@@576) |run#0@@176|)) ))))
(assert  (=> true (forall (($ly@@577 T@U) (|run#0@@177| T@U) ) (!  (=> (and (and (= (type $ly@@577) LayerTypeType) (= (type |run#0@@177|) (SeqType BoxType))) (or (|Integer__Order.__default.IsSorted#canCall| (Lit |run#0@@177|)) ($Is |run#0@@177| (TSeq TInt)))) (and (forall ((|i#1@@44| Int) (|j#1@@14| Int) ) (!  (=> (< |j#1@@14| (|Seq#Length| (Lit |run#0@@177|))) (|Integer__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@177|) |i#1@@44|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@177|) |j#1@@14|))))) :qid |totalord.45:12| :skolemid |2661| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@177| |j#1@@14|)) ($Unbox intType (|Seq#Index| |run#0@@177| |i#1@@44|))) )) (and (=> (Integer__Order.__default.IsSorted ($LS $ly@@577) (Lit |run#0@@177|)) (forall ((|i#1@@45| Int) (|j#1@@15| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@45|) (<= |i#1@@45| |j#1@@15|)) (< |j#1@@15| (|Seq#Length| (Lit |run#0@@177|)))) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@177|) |i#1@@45|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@177|) |j#1@@15|)))))) :qid |totalord.45:12| :skolemid |2662| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@177| |j#1@@15|)) ($Unbox intType (|Seq#Index| |run#0@@177| |i#1@@45|))) ))) (=> (forall ((|i#1@@46| Int) (|j#1@@16| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@46|) (<= |i#1@@46| |j#1@@16|)) (< |j#1@@16| (|Seq#Length| (Lit |run#0@@177|)))) (Integer__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@177|) |i#1@@46|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@177|) |j#1@@16|)))))) :qid |totalord.45:12| :skolemid |2662| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@177| |j#1@@16|)) ($Unbox intType (|Seq#Index| |run#0@@177| |i#1@@46|))) )) (Integer__Order.__default.IsSorted ($LS $ly@@577) (Lit |run#0@@177|)))))) :qid |totalord.41:23| :weight 3 :skolemid |2663| :pattern ( (Integer__Order.__default.IsSorted ($LS $ly@@577) (Lit |run#0@@177|))) ))))
(assert  (=> true (forall ((|run#0@@178| T@U) ) (!  (=> (and (= (type |run#0@@178|) (SeqType BoxType)) (or (|Integer__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@178|) ($Is |run#0@@178| (TSeq TInt)))) true) :qid |totalord.48:38| :skolemid |2664| :pattern ( (Integer__Order.__default.IsStrictlySortedInternal |run#0@@178|)) ))))
(assert (forall ((|run#0@@179| T@U) ) (!  (=> (and (= (type |run#0@@179|) (SeqType BoxType)) ($Is |run#0@@179| (TSeq TInt))) (and (=> (|Integer__Order.__default.IsStrictlySortedInternal#requires| |run#0@@179|) true) (=> true (|Integer__Order.__default.IsStrictlySortedInternal#requires| |run#0@@179|)))) :qid |totalord.48:38| :skolemid |2665| :pattern ( (|Integer__Order.__default.IsStrictlySortedInternal#requires| |run#0@@179|)) )))
(assert  (=> true (forall ((|run#0@@180| T@U) ) (!  (=> (and (= (type |run#0@@180|) (SeqType BoxType)) (or (|Integer__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@180|) ($Is |run#0@@180| (TSeq TInt)))) (and (forall ((|i#0@@108| Int) (|j#0@@27| Int) ) (!  (=> (< |j#0@@27| (|Seq#Length| |run#0@@180|)) (|Integer__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@180| |i#0@@108|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@180| |j#0@@27|))))) :qid |totalord.50:12| :skolemid |2666| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@180| |j#0@@27|)) ($Unbox intType (|Seq#Index| |run#0@@180| |i#0@@108|))) )) (and (=> (Integer__Order.__default.IsStrictlySortedInternal |run#0@@180|) (forall ((|i#0@@109| Int) (|j#0@@28| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@109|) (< |i#0@@109| |j#0@@28|)) (< |j#0@@28| (|Seq#Length| |run#0@@180|))) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@180| |i#0@@109|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@180| |j#0@@28|)))))) :qid |totalord.50:12| :skolemid |2667| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@180| |j#0@@28|)) ($Unbox intType (|Seq#Index| |run#0@@180| |i#0@@109|))) ))) (=> (forall ((|i#0@@110| Int) (|j#0@@29| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@110|) (< |i#0@@110| |j#0@@29|)) (< |j#0@@29| (|Seq#Length| |run#0@@180|))) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@180| |i#0@@110|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@180| |j#0@@29|)))))) :qid |totalord.50:12| :skolemid |2667| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@180| |j#0@@29|)) ($Unbox intType (|Seq#Index| |run#0@@180| |i#0@@110|))) )) (Integer__Order.__default.IsStrictlySortedInternal |run#0@@180|))))) :qid |totalord.48:38| :skolemid |2668| :pattern ( (Integer__Order.__default.IsStrictlySortedInternal |run#0@@180|)) ))))
(assert  (=> true (forall ((|run#0@@181| T@U) ) (!  (=> (and (= (type |run#0@@181|) (SeqType BoxType)) (or (|Integer__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@181|)) ($Is |run#0@@181| (TSeq TInt)))) (and (forall ((|i#1@@47| Int) (|j#1@@17| Int) ) (!  (=> (< |j#1@@17| (|Seq#Length| (Lit |run#0@@181|))) (|Integer__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@181|) |i#1@@47|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@181|) |j#1@@17|))))) :qid |totalord.50:12| :skolemid |2669| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@181| |j#1@@17|)) ($Unbox intType (|Seq#Index| |run#0@@181| |i#1@@47|))) )) (and (=> (Integer__Order.__default.IsStrictlySortedInternal (Lit |run#0@@181|)) (forall ((|i#1@@48| Int) (|j#1@@18| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@48|) (< |i#1@@48| |j#1@@18|)) (< |j#1@@18| (|Seq#Length| (Lit |run#0@@181|)))) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@181|) |i#1@@48|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@181|) |j#1@@18|)))))) :qid |totalord.50:12| :skolemid |2670| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@181| |j#1@@18|)) ($Unbox intType (|Seq#Index| |run#0@@181| |i#1@@48|))) ))) (=> (forall ((|i#1@@49| Int) (|j#1@@19| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@49|) (< |i#1@@49| |j#1@@19|)) (< |j#1@@19| (|Seq#Length| (Lit |run#0@@181|)))) (Integer__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@181|) |i#1@@49|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@181|) |j#1@@19|)))))) :qid |totalord.50:12| :skolemid |2670| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@181| |j#1@@19|)) ($Unbox intType (|Seq#Index| |run#0@@181| |i#1@@49|))) )) (Integer__Order.__default.IsStrictlySortedInternal (Lit |run#0@@181|)))))) :qid |totalord.48:38| :weight 3 :skolemid |2671| :pattern ( (Integer__Order.__default.IsStrictlySortedInternal (Lit |run#0@@181|))) ))))
(assert (forall (($ly@@578 T@U) (|run#0@@182| T@U) ) (!  (=> (and (= (type $ly@@578) LayerTypeType) (= (type |run#0@@182|) (SeqType BoxType))) (and (=> (Integer__Order.__default.IsStrictlySorted ($LS $ly@@578) |run#0@@182|) (Integer__Order.__default.IsStrictlySorted $ly@@578 |run#0@@182|)) (=> (Integer__Order.__default.IsStrictlySorted $ly@@578 |run#0@@182|) (Integer__Order.__default.IsStrictlySorted ($LS $ly@@578) |run#0@@182|)))) :qid |totalord.64:23| :skolemid |2672| :pattern ( (Integer__Order.__default.IsStrictlySorted ($LS $ly@@578) |run#0@@182|)) )))
(assert (forall (($ly@@579 T@U) (|run#0@@183| T@U) ) (!  (=> (and (= (type $ly@@579) LayerTypeType) (= (type |run#0@@183|) (SeqType BoxType))) (and (=> (Integer__Order.__default.IsStrictlySorted $ly@@579 |run#0@@183|) (Integer__Order.__default.IsStrictlySorted $LZ |run#0@@183|)) (=> (Integer__Order.__default.IsStrictlySorted $LZ |run#0@@183|) (Integer__Order.__default.IsStrictlySorted $ly@@579 |run#0@@183|)))) :qid |totalord.64:23| :skolemid |2673| :pattern ( (Integer__Order.__default.IsStrictlySorted (AsFuelBottom $ly@@579) |run#0@@183|)) )))
(assert  (=> true (forall (($ly@@580 T@U) (|run#0@@184| T@U) ) (!  (=> (and (and (= (type $ly@@580) LayerTypeType) (= (type |run#0@@184|) (SeqType BoxType))) (or (|Integer__Order.__default.IsStrictlySorted#canCall| |run#0@@184|) ($Is |run#0@@184| (TSeq TInt)))) (and (and (=> (= (|Seq#Length| |run#0@@184|) (LitInt 0)) (Integer__Order.__default.IsStrictlySorted $ly@@580 |run#0@@184|)) (=> (= (|Seq#Length| |run#0@@184|) (LitInt 1)) (Integer__Order.__default.IsStrictlySorted $ly@@580 |run#0@@184|))) (=> (Integer__Order.__default.IsStrictlySorted $ly@@580 |run#0@@184|) (Integer__Order.__default.IsSorted StartFuel_Integer_Order._default.IsSorted |run#0@@184|)))) :qid |totalord.64:23| :skolemid |2674| :pattern ( (Integer__Order.__default.IsStrictlySorted $ly@@580 |run#0@@184|)) ))))
(assert (forall (($ly@@581 T@U) (|run#0@@185| T@U) ) (!  (=> (and (and (= (type $ly@@581) LayerTypeType) (= (type |run#0@@185|) (SeqType BoxType))) ($Is |run#0@@185| (TSeq TInt))) (and (=> (|Integer__Order.__default.IsStrictlySorted#requires| $ly@@581 |run#0@@185|) true) (=> true (|Integer__Order.__default.IsStrictlySorted#requires| $ly@@581 |run#0@@185|)))) :qid |totalord.64:23| :skolemid |2675| :pattern ( (|Integer__Order.__default.IsStrictlySorted#requires| $ly@@581 |run#0@@185|)) )))
(assert  (=> true (forall (($ly@@582 T@U) (|run#0@@186| T@U) ) (!  (=> (and (and (= (type $ly@@582) LayerTypeType) (= (type |run#0@@186|) (SeqType BoxType))) (or (|Integer__Order.__default.IsStrictlySorted#canCall| |run#0@@186|) ($Is |run#0@@186| (TSeq TInt)))) (and (|Integer__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@186|) (and (=> (Integer__Order.__default.IsStrictlySorted ($LS $ly@@582) |run#0@@186|) (let ((|b#0@@162| (Integer__Order.__default.IsStrictlySortedInternal |run#0@@186|))) (ite |b#0@@162| |b#0@@162| |b#0@@162|))) (=> (let ((|b#0@@163| (Integer__Order.__default.IsStrictlySortedInternal |run#0@@186|))) (ite |b#0@@163| |b#0@@163| |b#0@@163|)) (Integer__Order.__default.IsStrictlySorted ($LS $ly@@582) |run#0@@186|))))) :qid |totalord.64:23| :skolemid |2676| :pattern ( (Integer__Order.__default.IsStrictlySorted ($LS $ly@@582) |run#0@@186|)) ))))
(assert  (=> true (forall (($ly@@583 T@U) (|run#0@@187| T@U) ) (!  (=> (and (and (= (type $ly@@583) LayerTypeType) (= (type |run#0@@187|) (SeqType BoxType))) (or (|Integer__Order.__default.IsStrictlySorted#canCall| (Lit |run#0@@187|)) ($Is |run#0@@187| (TSeq TInt)))) (and (|Integer__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@187|)) (and (=> (Integer__Order.__default.IsStrictlySorted ($LS $ly@@583) (Lit |run#0@@187|)) (let ((|b#1@@16| (U_2_bool (Lit (bool_2_U (Integer__Order.__default.IsStrictlySortedInternal (Lit |run#0@@187|))))))) (ite |b#1@@16| |b#1@@16| |b#1@@16|))) (=> (let ((|b#1@@17| (U_2_bool (Lit (bool_2_U (Integer__Order.__default.IsStrictlySortedInternal (Lit |run#0@@187|))))))) (ite |b#1@@17| |b#1@@17| |b#1@@17|)) (Integer__Order.__default.IsStrictlySorted ($LS $ly@@583) (Lit |run#0@@187|)))))) :qid |totalord.64:23| :weight 3 :skolemid |2677| :pattern ( (Integer__Order.__default.IsStrictlySorted ($LS $ly@@583) (Lit |run#0@@187|))) ))))
(assert (= (type Tclass.Uint64__Order.__default) TyType))
(assert (= (Tag Tclass.Uint64__Order.__default) Tagclass.Uint64__Order.__default))
(assert (forall ((bx@@106 T@U) ) (!  (=> (and (= (type bx@@106) BoxType) ($IsBox bx@@106 Tclass.Uint64__Order.__default)) (and (= ($Box ($Unbox refType bx@@106)) bx@@106) ($Is ($Unbox refType bx@@106) Tclass.Uint64__Order.__default))) :qid |unknown.0:0| :skolemid |2678| :pattern ( ($IsBox bx@@106 Tclass.Uint64__Order.__default)) )))
(assert (forall (($o@@41 T@U) ) (!  (=> (= (type $o@@41) refType) (and (=> ($Is $o@@41 Tclass.Uint64__Order.__default) (or (= $o@@41 null) (= (dtype $o@@41) Tclass.Uint64__Order.__default))) (=> (or (= $o@@41 null) (= (dtype $o@@41) Tclass.Uint64__Order.__default)) ($Is $o@@41 Tclass.Uint64__Order.__default)))) :qid |unknown.0:0| :skolemid |2679| :pattern ( ($Is $o@@41 Tclass.Uint64__Order.__default)) )))
(assert (forall (($o@@42 T@U) ($h@@55 T@U) ) (!  (=> (and (= (type $o@@42) refType) (= (type $h@@55) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@42 Tclass.Uint64__Order.__default $h@@55) (or (= $o@@42 null) (U_2_bool (MapType1Select (MapType0Select $h@@55 $o@@42) alloc)))) (=> (or (= $o@@42 null) (U_2_bool (MapType1Select (MapType0Select $h@@55 $o@@42) alloc))) ($IsAlloc $o@@42 Tclass.Uint64__Order.__default $h@@55)))) :qid |unknown.0:0| :skolemid |2680| :pattern ( ($IsAlloc $o@@42 Tclass.Uint64__Order.__default $h@@55)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) Uint64__Order.__default.SomeElement) (< Uint64__Order.__default.SomeElement 18446744073709551616)))))
(assert  (=> |Uint64__Order.__default.SomeElement#requires| true))
(assert  (=> true |Uint64__Order.__default.SomeElement#requires|))
(assert  (=> true (=> true (= Uint64__Order.__default.SomeElement (LitInt 0)))))
(assert  (=> true (=> true (= Uint64__Order.__default.SomeElement (LitInt 0)))))
(assert (= (type StartFuel_Uint64_Order._default.ltedef) LayerTypeType))
(assert  (=> true (forall ((|a#0@@199| Int) (|b#0@@164| Int) ) (!  (=> (or (|Uint64__Order.__default.lte#canCall| |a#0@@199| |b#0@@164|) (and (and (<= (LitInt 0) |a#0@@199|) (< |a#0@@199| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@164|) (< |b#0@@164| 18446744073709551616)))) (and (and (and (and (and (and (and (=> (Uint64__Order.__default.lte |a#0@@199| |b#0@@164|) (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |a#0@@199| |b#0@@164|)) (=> (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |a#0@@199| |b#0@@164|) (Uint64__Order.__default.lte |a#0@@199| |b#0@@164|))) (or (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |a#0@@199| |b#0@@164|) (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |b#0@@164| |a#0@@199|))) (forall ((|a#1@@9| Int) (|b#1@@18| Int) (|c#0@@13| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |a#1@@9|) (< |a#1@@9| 18446744073709551616)) (and (<= (LitInt 0) |b#1@@18|) (< |b#1@@18| 18446744073709551616))) (and (<= (LitInt 0) |c#0@@13|) (< |c#0@@13| 18446744073709551616))) (=> (and (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |a#1@@9| |b#1@@18|) (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |b#1@@18| |c#0@@13|)) (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |a#1@@9| |c#0@@13|))) :qid |totalord.20:18| :skolemid |2681| :pattern ( (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |a#1@@9| |c#0@@13|) (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |b#1@@18| |c#0@@13|)) :pattern ( (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |b#1@@18| |c#0@@13|) (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |a#1@@9| |b#1@@18|)) ))) (and (=> (Uint64__Order.__default.lte |a#0@@199| |b#0@@164|) (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |a#0@@199| |b#0@@164|)) (=> (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |a#0@@199| |b#0@@164|) (Uint64__Order.__default.lte |a#0@@199| |b#0@@164|)))) (or (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |a#0@@199| |b#0@@164|) (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |b#0@@164| |a#0@@199|))) (=> (and (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |a#0@@199| |b#0@@164|) (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |b#0@@164| |a#0@@199|)) (= |a#0@@199| |b#0@@164|))) (forall ((|a#2@@2| Int) (|b#2@@2| Int) (|c#1@@2| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |a#2@@2|) (< |a#2@@2| 18446744073709551616)) (and (<= (LitInt 0) |b#2@@2|) (< |b#2@@2| 18446744073709551616))) (and (<= (LitInt 0) |c#1@@2|) (< |c#1@@2| 18446744073709551616))) (=> (and (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |a#2@@2| |b#2@@2|) (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |b#2@@2| |c#1@@2|)) (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |a#2@@2| |c#1@@2|))) :qid |totalord.188:18| :skolemid |2682| :pattern ( (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |a#2@@2| |c#1@@2|) (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |b#2@@2| |c#1@@2|)) :pattern ( (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |b#2@@2| |c#1@@2|) (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |a#2@@2| |b#2@@2|)) )))) :qid |totalord.17:16| :skolemid |2683| :pattern ( (Uint64__Order.__default.lte |a#0@@199| |b#0@@164|)) ))))
(assert (forall ((|a#0@@200| Int) (|b#0@@165| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@200|) (< |a#0@@200| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@165|) (< |b#0@@165| 18446744073709551616))) (and (=> (|Uint64__Order.__default.lte#requires| |a#0@@200| |b#0@@165|) true) (=> true (|Uint64__Order.__default.lte#requires| |a#0@@200| |b#0@@165|)))) :qid |totalord.17:16| :skolemid |2684| :pattern ( (|Uint64__Order.__default.lte#requires| |a#0@@200| |b#0@@165|)) )))
(assert  (and (= (type MoreFuel_Uint64_Order._default.ltedef0) LayerTypeType) (= (type StartFuelAssert_Uint64_Order._default.ltedef) LayerTypeType)))
(assert  (=> true (forall ((|a#0@@201| Int) (|b#0@@166| Int) ) (!  (=> (or (|Uint64__Order.__default.lte#canCall| |a#0@@201| |b#0@@166|) (and (and (<= (LitInt 0) |a#0@@201|) (< |a#0@@201| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@166|) (< |b#0@@166| 18446744073709551616)))) (and (|Uint64__Order.__default.ltedef#canCall| |a#0@@201| |b#0@@166|) (and (and (and (= StartFuel_Uint64_Order._default.ltedef ($LS MoreFuel_Uint64_Order._default.ltedef0)) (= StartFuelAssert_Uint64_Order._default.ltedef ($LS ($LS MoreFuel_Uint64_Order._default.ltedef0)))) (= (AsFuelBottom MoreFuel_Uint64_Order._default.ltedef0) MoreFuel_Uint64_Order._default.ltedef0)) (and (=> (Uint64__Order.__default.lte |a#0@@201| |b#0@@166|) (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |a#0@@201| |b#0@@166|)) (=> (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef |a#0@@201| |b#0@@166|) (Uint64__Order.__default.lte |a#0@@201| |b#0@@166|)))))) :qid |totalord.17:16| :skolemid |2685| :pattern ( (Uint64__Order.__default.lte |a#0@@201| |b#0@@166|)) ))))
(assert (= (type MoreFuel_Uint64_Order._default.ltedef1) LayerTypeType))
(assert  (=> true (forall ((|a#0@@202| Int) (|b#0@@167| Int) ) (!  (=> (or (|Uint64__Order.__default.lte#canCall| (LitInt |a#0@@202|) (LitInt |b#0@@167|)) (and (and (<= (LitInt 0) |a#0@@202|) (< |a#0@@202| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@167|) (< |b#0@@167| 18446744073709551616)))) (and (|Uint64__Order.__default.ltedef#canCall| (LitInt |a#0@@202|) (LitInt |b#0@@167|)) (and (and (and (= StartFuel_Uint64_Order._default.ltedef ($LS MoreFuel_Uint64_Order._default.ltedef1)) (= StartFuelAssert_Uint64_Order._default.ltedef ($LS ($LS MoreFuel_Uint64_Order._default.ltedef1)))) (= (AsFuelBottom MoreFuel_Uint64_Order._default.ltedef1) MoreFuel_Uint64_Order._default.ltedef1)) (and (=> (Uint64__Order.__default.lte (LitInt |a#0@@202|) (LitInt |b#0@@167|)) (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef (LitInt |a#0@@202|) (LitInt |b#0@@167|))) (=> (Uint64__Order.__default.ltedef StartFuel_Uint64_Order._default.ltedef (LitInt |a#0@@202|) (LitInt |b#0@@167|)) (Uint64__Order.__default.lte (LitInt |a#0@@202|) (LitInt |b#0@@167|))))))) :qid |totalord.17:16| :weight 3 :skolemid |2686| :pattern ( (Uint64__Order.__default.lte (LitInt |a#0@@202|) (LitInt |b#0@@167|))) ))))
(assert (forall (($ly@@584 T@U) (|a#0@@203| Int) (|b#0@@168| Int) ) (!  (=> (= (type $ly@@584) LayerTypeType) (and (=> (Uint64__Order.__default.ltedef ($LS $ly@@584) |a#0@@203| |b#0@@168|) (Uint64__Order.__default.ltedef $ly@@584 |a#0@@203| |b#0@@168|)) (=> (Uint64__Order.__default.ltedef $ly@@584 |a#0@@203| |b#0@@168|) (Uint64__Order.__default.ltedef ($LS $ly@@584) |a#0@@203| |b#0@@168|)))) :qid |totalord.886:30| :skolemid |2687| :pattern ( (Uint64__Order.__default.ltedef ($LS $ly@@584) |a#0@@203| |b#0@@168|)) )))
(assert (forall (($ly@@585 T@U) (|a#0@@204| Int) (|b#0@@169| Int) ) (!  (=> (= (type $ly@@585) LayerTypeType) (and (=> (Uint64__Order.__default.ltedef $ly@@585 |a#0@@204| |b#0@@169|) (Uint64__Order.__default.ltedef $LZ |a#0@@204| |b#0@@169|)) (=> (Uint64__Order.__default.ltedef $LZ |a#0@@204| |b#0@@169|) (Uint64__Order.__default.ltedef $ly@@585 |a#0@@204| |b#0@@169|)))) :qid |totalord.886:30| :skolemid |2688| :pattern ( (Uint64__Order.__default.ltedef (AsFuelBottom $ly@@585) |a#0@@204| |b#0@@169|)) )))
(assert  (=> true (forall (($ly@@586 T@U) (|a#0@@205| Int) (|b#0@@170| Int) ) (!  (=> (and (= (type $ly@@586) LayerTypeType) (or (|Uint64__Order.__default.ltedef#canCall| |a#0@@205| |b#0@@170|) (and (and (<= (LitInt 0) |a#0@@205|) (< |a#0@@205| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@170|) (< |b#0@@170| 18446744073709551616))))) true) :qid |totalord.886:30| :skolemid |2689| :pattern ( (Uint64__Order.__default.ltedef $ly@@586 |a#0@@205| |b#0@@170|)) ))))
(assert (forall (($ly@@587 T@U) (|a#0@@206| Int) (|b#0@@171| Int) ) (!  (=> (= (type $ly@@587) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@206|) (< |a#0@@206| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@171|) (< |b#0@@171| 18446744073709551616))) (and (=> (|Uint64__Order.__default.ltedef#requires| $ly@@587 |a#0@@206| |b#0@@171|) true) (=> true (|Uint64__Order.__default.ltedef#requires| $ly@@587 |a#0@@206| |b#0@@171|))))) :qid |totalord.886:30| :skolemid |2690| :pattern ( (|Uint64__Order.__default.ltedef#requires| $ly@@587 |a#0@@206| |b#0@@171|)) )))
(assert  (=> true (forall (($ly@@588 T@U) (|a#0@@207| Int) (|b#0@@172| Int) ) (!  (=> (and (= (type $ly@@588) LayerTypeType) (or (|Uint64__Order.__default.ltedef#canCall| |a#0@@207| |b#0@@172|) (and (and (<= (LitInt 0) |a#0@@207|) (< |a#0@@207| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@172|) (< |b#0@@172| 18446744073709551616))))) (and (=> (Uint64__Order.__default.ltedef ($LS $ly@@588) |a#0@@207| |b#0@@172|) (<= |a#0@@207| |b#0@@172|)) (=> (<= |a#0@@207| |b#0@@172|) (Uint64__Order.__default.ltedef ($LS $ly@@588) |a#0@@207| |b#0@@172|)))) :qid |totalord.886:30| :skolemid |2691| :pattern ( (Uint64__Order.__default.ltedef ($LS $ly@@588) |a#0@@207| |b#0@@172|)) ))))
(assert  (=> true (forall (($ly@@589 T@U) (|a#0@@208| Int) (|b#0@@173| Int) ) (!  (=> (and (= (type $ly@@589) LayerTypeType) (or (|Uint64__Order.__default.ltedef#canCall| (LitInt |a#0@@208|) (LitInt |b#0@@173|)) (and (and (<= (LitInt 0) |a#0@@208|) (< |a#0@@208| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@173|) (< |b#0@@173| 18446744073709551616))))) (and (=> (Uint64__Order.__default.ltedef ($LS $ly@@589) (LitInt |a#0@@208|) (LitInt |b#0@@173|)) (<= (LitInt |a#0@@208|) (LitInt |b#0@@173|))) (=> (<= (LitInt |a#0@@208|) (LitInt |b#0@@173|)) (Uint64__Order.__default.ltedef ($LS $ly@@589) (LitInt |a#0@@208|) (LitInt |b#0@@173|))))) :qid |totalord.886:30| :weight 3 :skolemid |2692| :pattern ( (Uint64__Order.__default.ltedef ($LS $ly@@589) (LitInt |a#0@@208|) (LitInt |b#0@@173|))) ))))
(assert (forall (($ly@@590 T@U) (|run#0@@188| T@U) (|needle#0@@85| Int) ) (!  (=> (and (= (type $ly@@590) LayerTypeType) (= (type |run#0@@188|) (SeqType BoxType))) (= (Uint64__Order.__default.LargestLte ($LS $ly@@590) |run#0@@188| |needle#0@@85|) (Uint64__Order.__default.LargestLte $ly@@590 |run#0@@188| |needle#0@@85|))) :qid |totalord.253:12| :skolemid |2693| :pattern ( (Uint64__Order.__default.LargestLte ($LS $ly@@590) |run#0@@188| |needle#0@@85|)) )))
(assert (forall (($ly@@591 T@U) (|run#0@@189| T@U) (|needle#0@@86| Int) ) (!  (=> (and (= (type $ly@@591) LayerTypeType) (= (type |run#0@@189|) (SeqType BoxType))) (= (Uint64__Order.__default.LargestLte $ly@@591 |run#0@@189| |needle#0@@86|) (Uint64__Order.__default.LargestLte $LZ |run#0@@189| |needle#0@@86|))) :qid |totalord.253:12| :skolemid |2694| :pattern ( (Uint64__Order.__default.LargestLte (AsFuelBottom $ly@@591) |run#0@@189| |needle#0@@86|)) )))
(assert (= (type StartFuel_Uint64_Order._default.IsSorted) LayerTypeType))
(assert  (=> true (forall (($ly@@592 T@U) (|run#0@@190| T@U) (|needle#0@@87| Int) ) (!  (=> (and (and (= (type $ly@@592) LayerTypeType) (= (type |run#0@@190|) (SeqType BoxType))) (or (|Uint64__Order.__default.LargestLte#canCall| |run#0@@190| |needle#0@@87|) (and (and ($Is |run#0@@190| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |needle#0@@87|) (< |needle#0@@87| 18446744073709551616))) (Uint64__Order.__default.IsSorted StartFuel_Uint64_Order._default.IsSorted |run#0@@190|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Uint64__Order.__default.LargestLte $ly@@592 |run#0@@190| |needle#0@@87|)) (< (Uint64__Order.__default.LargestLte $ly@@592 |run#0@@190| |needle#0@@87|) (|Seq#Length| |run#0@@190|))) (forall ((|i#0@@111| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@111|) (<= |i#0@@111| (Uint64__Order.__default.LargestLte $ly@@592 |run#0@@190| |needle#0@@87|))) (Uint64__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@190| |i#0@@111|))) |needle#0@@87|))) :qid |totalord.256:20| :skolemid |2695| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@190| |i#0@@111|))) ))) (forall ((|i#1@@50| Int) ) (!  (=> true (=> (and (< (Uint64__Order.__default.LargestLte $ly@@592 |run#0@@190| |needle#0@@87|) |i#1@@50|) (< |i#1@@50| (|Seq#Length| |run#0@@190|))) (Uint64__Order.__default.lt |needle#0@@87| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@190| |i#1@@50|)))))) :qid |totalord.257:20| :skolemid |2696| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@190| |i#1@@50|))) ))) (=> (|Seq#Contains| |run#0@@190| ($Box (int_2_U |needle#0@@87|))) (and (<= (LitInt 0) (Uint64__Order.__default.LargestLte $ly@@592 |run#0@@190| |needle#0@@87|)) (= (U_2_int ($Unbox intType (|Seq#Index| |run#0@@190| (Uint64__Order.__default.LargestLte $ly@@592 |run#0@@190| |needle#0@@87|)))) |needle#0@@87|))))) :qid |totalord.253:12| :skolemid |2697| :pattern ( (Uint64__Order.__default.LargestLte $ly@@592 |run#0@@190| |needle#0@@87|)) ))))
(assert (forall (($ly@@593 T@U) (|run#0@@191| T@U) (|needle#0@@88| Int) ) (!  (=> (and (and (= (type $ly@@593) LayerTypeType) (= (type |run#0@@191|) (SeqType BoxType))) (and ($Is |run#0@@191| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |needle#0@@88|) (< |needle#0@@88| 18446744073709551616)))) (and (=> (|Uint64__Order.__default.LargestLte#requires| $ly@@593 |run#0@@191| |needle#0@@88|) (Uint64__Order.__default.IsSorted StartFuel_Uint64_Order._default.IsSorted |run#0@@191|)) (=> (Uint64__Order.__default.IsSorted StartFuel_Uint64_Order._default.IsSorted |run#0@@191|) (|Uint64__Order.__default.LargestLte#requires| $ly@@593 |run#0@@191| |needle#0@@88|)))) :qid |totalord.253:12| :skolemid |2698| :pattern ( (|Uint64__Order.__default.LargestLte#requires| $ly@@593 |run#0@@191| |needle#0@@88|)) )))
(assert  (and (= (type MoreFuel_Uint64_Order._default.IsSorted0) LayerTypeType) (= (type StartFuelAssert_Uint64_Order._default.IsSorted) LayerTypeType)))
(assert  (=> true (forall (($ly@@594 T@U) (|run#0@@192| T@U) (|needle#0@@89| Int) ) (!  (=> (and (and (= (type $ly@@594) LayerTypeType) (= (type |run#0@@192|) (SeqType BoxType))) (or (|Uint64__Order.__default.LargestLte#canCall| |run#0@@192| |needle#0@@89|) (and (and ($Is |run#0@@192| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |needle#0@@89|) (< |needle#0@@89| 18446744073709551616))) (Uint64__Order.__default.IsSorted StartFuel_Uint64_Order._default.IsSorted |run#0@@192|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@192|) (LitInt 0))) (|Uint64__Order.__default.lt#canCall| |needle#0@@89| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@192| (LitInt 0)))))) (=> (not (or (= (|Seq#Length| |run#0@@192|) (LitInt 0)) (Uint64__Order.__default.lt |needle#0@@89| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@192| (LitInt 0))))))) (|Uint64__Order.__default.LargestLte#canCall| (|Seq#Drop| |run#0@@192| (LitInt 1)) |needle#0@@89|))) (and (and (and (= StartFuel_Uint64_Order._default.IsSorted ($LS MoreFuel_Uint64_Order._default.IsSorted0)) (= StartFuelAssert_Uint64_Order._default.IsSorted ($LS ($LS MoreFuel_Uint64_Order._default.IsSorted0)))) (= (AsFuelBottom MoreFuel_Uint64_Order._default.IsSorted0) MoreFuel_Uint64_Order._default.IsSorted0)) (= (Uint64__Order.__default.LargestLte ($LS $ly@@594) |run#0@@192| |needle#0@@89|) (ite  (or (= (|Seq#Length| |run#0@@192|) (LitInt 0)) (Uint64__Order.__default.lt |needle#0@@89| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@192| (LitInt 0)))))) (- 0 1) (+ 1 (Uint64__Order.__default.LargestLte $ly@@594 (|Seq#Drop| |run#0@@192| (LitInt 1)) |needle#0@@89|))))))) :qid |totalord.253:12| :skolemid |2699| :pattern ( (Uint64__Order.__default.LargestLte ($LS $ly@@594) |run#0@@192| |needle#0@@89|)) ))))
(assert (= (type MoreFuel_Uint64_Order._default.IsSorted1) LayerTypeType))
(assert  (=> true (forall (($ly@@595 T@U) (|run#0@@193| T@U) (|needle#0@@90| Int) ) (!  (=> (and (and (= (type $ly@@595) LayerTypeType) (= (type |run#0@@193|) (SeqType BoxType))) (or (|Uint64__Order.__default.LargestLte#canCall| (Lit |run#0@@193|) (LitInt |needle#0@@90|)) (and (and ($Is |run#0@@193| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |needle#0@@90|) (< |needle#0@@90| 18446744073709551616))) (Uint64__Order.__default.IsSorted StartFuel_Uint64_Order._default.IsSorted (Lit |run#0@@193|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@193|)) (LitInt 0))) (|Uint64__Order.__default.lt#canCall| (LitInt |needle#0@@90|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@193|) (LitInt 0)))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@193|)) (LitInt 0)) (Uint64__Order.__default.lt (LitInt |needle#0@@90|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@193|) (LitInt 0))))))) (|Uint64__Order.__default.LargestLte#canCall| (Lit (|Seq#Drop| (Lit |run#0@@193|) (LitInt 1))) (LitInt |needle#0@@90|)))) (and (and (and (= StartFuel_Uint64_Order._default.IsSorted ($LS MoreFuel_Uint64_Order._default.IsSorted1)) (= StartFuelAssert_Uint64_Order._default.IsSorted ($LS ($LS MoreFuel_Uint64_Order._default.IsSorted1)))) (= (AsFuelBottom MoreFuel_Uint64_Order._default.IsSorted1) MoreFuel_Uint64_Order._default.IsSorted1)) (= (Uint64__Order.__default.LargestLte ($LS $ly@@595) (Lit |run#0@@193|) (LitInt |needle#0@@90|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@193|)) (LitInt 0)) (Uint64__Order.__default.lt (LitInt |needle#0@@90|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@193|) (LitInt 0)))))) (- 0 1) (+ 1 (Uint64__Order.__default.LargestLte ($LS $ly@@595) (Lit (|Seq#Drop| (Lit |run#0@@193|) (LitInt 1))) (LitInt |needle#0@@90|)))))))) :qid |totalord.253:12| :weight 3 :skolemid |2700| :pattern ( (Uint64__Order.__default.LargestLte ($LS $ly@@595) (Lit |run#0@@193|) (LitInt |needle#0@@90|))) ))))
(assert (forall (($ly@@596 T@U) (|run#0@@194| T@U) (|needle#0@@91| Int) ) (!  (=> (and (= (type $ly@@596) LayerTypeType) (= (type |run#0@@194|) (SeqType BoxType))) (= (Uint64__Order.__default.LargestLt ($LS $ly@@596) |run#0@@194| |needle#0@@91|) (Uint64__Order.__default.LargestLt $ly@@596 |run#0@@194| |needle#0@@91|))) :qid |totalord.356:12| :skolemid |2701| :pattern ( (Uint64__Order.__default.LargestLt ($LS $ly@@596) |run#0@@194| |needle#0@@91|)) )))
(assert (forall (($ly@@597 T@U) (|run#0@@195| T@U) (|needle#0@@92| Int) ) (!  (=> (and (= (type $ly@@597) LayerTypeType) (= (type |run#0@@195|) (SeqType BoxType))) (= (Uint64__Order.__default.LargestLt $ly@@597 |run#0@@195| |needle#0@@92|) (Uint64__Order.__default.LargestLt $LZ |run#0@@195| |needle#0@@92|))) :qid |totalord.356:12| :skolemid |2702| :pattern ( (Uint64__Order.__default.LargestLt (AsFuelBottom $ly@@597) |run#0@@195| |needle#0@@92|)) )))
(assert  (=> true (forall (($ly@@598 T@U) (|run#0@@196| T@U) (|needle#0@@93| Int) ) (!  (=> (and (and (= (type $ly@@598) LayerTypeType) (= (type |run#0@@196|) (SeqType BoxType))) (or (|Uint64__Order.__default.LargestLt#canCall| |run#0@@196| |needle#0@@93|) (and (and ($Is |run#0@@196| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |needle#0@@93|) (< |needle#0@@93| 18446744073709551616))) (Uint64__Order.__default.IsSorted StartFuel_Uint64_Order._default.IsSorted |run#0@@196|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Uint64__Order.__default.LargestLt $ly@@598 |run#0@@196| |needle#0@@93|)) (< (Uint64__Order.__default.LargestLt $ly@@598 |run#0@@196| |needle#0@@93|) (|Seq#Length| |run#0@@196|))) (forall ((|i#0@@112| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@112|) (<= |i#0@@112| (Uint64__Order.__default.LargestLt $ly@@598 |run#0@@196| |needle#0@@93|))) (Uint64__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@196| |i#0@@112|))) |needle#0@@93|))) :qid |totalord.359:20| :skolemid |2703| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@196| |i#0@@112|))) ))) (forall ((|i#1@@51| Int) ) (!  (=> true (=> (and (< (Uint64__Order.__default.LargestLt $ly@@598 |run#0@@196| |needle#0@@93|) |i#1@@51|) (< |i#1@@51| (|Seq#Length| |run#0@@196|))) (Uint64__Order.__default.lte |needle#0@@93| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@196| |i#1@@51|)))))) :qid |totalord.360:20| :skolemid |2704| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@196| |i#1@@51|))) ))) (=> (|Seq#Contains| |run#0@@196| ($Box (int_2_U |needle#0@@93|))) (and (< (+ (Uint64__Order.__default.LargestLt $ly@@598 |run#0@@196| |needle#0@@93|) 1) (|Seq#Length| |run#0@@196|)) (= (U_2_int ($Unbox intType (|Seq#Index| |run#0@@196| (+ (Uint64__Order.__default.LargestLt $ly@@598 |run#0@@196| |needle#0@@93|) 1)))) |needle#0@@93|))))) :qid |totalord.356:12| :skolemid |2705| :pattern ( (Uint64__Order.__default.LargestLt $ly@@598 |run#0@@196| |needle#0@@93|)) ))))
(assert (forall (($ly@@599 T@U) (|run#0@@197| T@U) (|needle#0@@94| Int) ) (!  (=> (and (and (= (type $ly@@599) LayerTypeType) (= (type |run#0@@197|) (SeqType BoxType))) (and ($Is |run#0@@197| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |needle#0@@94|) (< |needle#0@@94| 18446744073709551616)))) (and (=> (|Uint64__Order.__default.LargestLt#requires| $ly@@599 |run#0@@197| |needle#0@@94|) (Uint64__Order.__default.IsSorted StartFuel_Uint64_Order._default.IsSorted |run#0@@197|)) (=> (Uint64__Order.__default.IsSorted StartFuel_Uint64_Order._default.IsSorted |run#0@@197|) (|Uint64__Order.__default.LargestLt#requires| $ly@@599 |run#0@@197| |needle#0@@94|)))) :qid |totalord.356:12| :skolemid |2706| :pattern ( (|Uint64__Order.__default.LargestLt#requires| $ly@@599 |run#0@@197| |needle#0@@94|)) )))
(assert (= (type MoreFuel_Uint64_Order._default.IsSorted2) LayerTypeType))
(assert  (=> true (forall (($ly@@600 T@U) (|run#0@@198| T@U) (|needle#0@@95| Int) ) (!  (=> (and (and (= (type $ly@@600) LayerTypeType) (= (type |run#0@@198|) (SeqType BoxType))) (or (|Uint64__Order.__default.LargestLt#canCall| |run#0@@198| |needle#0@@95|) (and (and ($Is |run#0@@198| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |needle#0@@95|) (< |needle#0@@95| 18446744073709551616))) (Uint64__Order.__default.IsSorted StartFuel_Uint64_Order._default.IsSorted |run#0@@198|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@198|) (LitInt 0))) (|Uint64__Order.__default.lte#canCall| |needle#0@@95| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@198| (LitInt 0)))))) (=> (not (or (= (|Seq#Length| |run#0@@198|) (LitInt 0)) (Uint64__Order.__default.lte |needle#0@@95| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@198| (LitInt 0))))))) (|Uint64__Order.__default.LargestLt#canCall| (|Seq#Drop| |run#0@@198| (LitInt 1)) |needle#0@@95|))) (and (and (and (= StartFuel_Uint64_Order._default.IsSorted ($LS MoreFuel_Uint64_Order._default.IsSorted2)) (= StartFuelAssert_Uint64_Order._default.IsSorted ($LS ($LS MoreFuel_Uint64_Order._default.IsSorted2)))) (= (AsFuelBottom MoreFuel_Uint64_Order._default.IsSorted2) MoreFuel_Uint64_Order._default.IsSorted2)) (= (Uint64__Order.__default.LargestLt ($LS $ly@@600) |run#0@@198| |needle#0@@95|) (ite  (or (= (|Seq#Length| |run#0@@198|) (LitInt 0)) (Uint64__Order.__default.lte |needle#0@@95| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@198| (LitInt 0)))))) (- 0 1) (+ 1 (Uint64__Order.__default.LargestLt $ly@@600 (|Seq#Drop| |run#0@@198| (LitInt 1)) |needle#0@@95|))))))) :qid |totalord.356:12| :skolemid |2707| :pattern ( (Uint64__Order.__default.LargestLt ($LS $ly@@600) |run#0@@198| |needle#0@@95|)) ))))
(assert (= (type MoreFuel_Uint64_Order._default.IsSorted3) LayerTypeType))
(assert  (=> true (forall (($ly@@601 T@U) (|run#0@@199| T@U) (|needle#0@@96| Int) ) (!  (=> (and (and (= (type $ly@@601) LayerTypeType) (= (type |run#0@@199|) (SeqType BoxType))) (or (|Uint64__Order.__default.LargestLt#canCall| (Lit |run#0@@199|) (LitInt |needle#0@@96|)) (and (and ($Is |run#0@@199| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |needle#0@@96|) (< |needle#0@@96| 18446744073709551616))) (Uint64__Order.__default.IsSorted StartFuel_Uint64_Order._default.IsSorted (Lit |run#0@@199|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@199|)) (LitInt 0))) (|Uint64__Order.__default.lte#canCall| (LitInt |needle#0@@96|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@199|) (LitInt 0)))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@199|)) (LitInt 0)) (Uint64__Order.__default.lte (LitInt |needle#0@@96|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@199|) (LitInt 0))))))) (|Uint64__Order.__default.LargestLt#canCall| (Lit (|Seq#Drop| (Lit |run#0@@199|) (LitInt 1))) (LitInt |needle#0@@96|)))) (and (and (and (= StartFuel_Uint64_Order._default.IsSorted ($LS MoreFuel_Uint64_Order._default.IsSorted3)) (= StartFuelAssert_Uint64_Order._default.IsSorted ($LS ($LS MoreFuel_Uint64_Order._default.IsSorted3)))) (= (AsFuelBottom MoreFuel_Uint64_Order._default.IsSorted3) MoreFuel_Uint64_Order._default.IsSorted3)) (= (Uint64__Order.__default.LargestLt ($LS $ly@@601) (Lit |run#0@@199|) (LitInt |needle#0@@96|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@199|)) (LitInt 0)) (Uint64__Order.__default.lte (LitInt |needle#0@@96|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@199|) (LitInt 0)))))) (- 0 1) (+ 1 (Uint64__Order.__default.LargestLt ($LS $ly@@601) (Lit (|Seq#Drop| (Lit |run#0@@199|) (LitInt 1))) (LitInt |needle#0@@96|)))))))) :qid |totalord.356:12| :weight 3 :skolemid |2708| :pattern ( (Uint64__Order.__default.LargestLt ($LS $ly@@601) (Lit |run#0@@199|) (LitInt |needle#0@@96|))) ))))
(assert (forall (($ly@@602 T@U) (|run#0@@200| T@U) (|needle#0@@97| Int) ) (!  (=> (and (= (type $ly@@602) LayerTypeType) (= (type |run#0@@200|) (SeqType BoxType))) (= (Uint64__Order.__default.IndexOfFirstGte ($LS $ly@@602) |run#0@@200| |needle#0@@97|) (Uint64__Order.__default.IndexOfFirstGte $ly@@602 |run#0@@200| |needle#0@@97|))) :qid |totalord.388:12| :skolemid |2709| :pattern ( (Uint64__Order.__default.IndexOfFirstGte ($LS $ly@@602) |run#0@@200| |needle#0@@97|)) )))
(assert (forall (($ly@@603 T@U) (|run#0@@201| T@U) (|needle#0@@98| Int) ) (!  (=> (and (= (type $ly@@603) LayerTypeType) (= (type |run#0@@201|) (SeqType BoxType))) (= (Uint64__Order.__default.IndexOfFirstGte $ly@@603 |run#0@@201| |needle#0@@98|) (Uint64__Order.__default.IndexOfFirstGte $LZ |run#0@@201| |needle#0@@98|))) :qid |totalord.388:12| :skolemid |2710| :pattern ( (Uint64__Order.__default.IndexOfFirstGte (AsFuelBottom $ly@@603) |run#0@@201| |needle#0@@98|)) )))
(assert  (=> true (forall (($ly@@604 T@U) (|run#0@@202| T@U) (|needle#0@@99| Int) ) (!  (=> (and (and (= (type $ly@@604) LayerTypeType) (= (type |run#0@@202|) (SeqType BoxType))) (or (|Uint64__Order.__default.IndexOfFirstGte#canCall| |run#0@@202| |needle#0@@99|) (and (and ($Is |run#0@@202| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |needle#0@@99|) (< |needle#0@@99| 18446744073709551616))) (Uint64__Order.__default.IsSorted StartFuel_Uint64_Order._default.IsSorted |run#0@@202|)))) (and (and (and (<= (Uint64__Order.__default.IndexOfFirstGte $ly@@604 |run#0@@202| |needle#0@@99|) (|Seq#Length| |run#0@@202|)) (forall ((|i#0@@113| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@113|) (< |i#0@@113| (Uint64__Order.__default.IndexOfFirstGte $ly@@604 |run#0@@202| |needle#0@@99|))) (Uint64__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@202| |i#0@@113|))) |needle#0@@99|)) :qid |totalord.391:20| :skolemid |2711| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@202| |i#0@@113|))) ))) (forall ((|i#1@@52| Int) ) (!  (=> (and (<= (Uint64__Order.__default.IndexOfFirstGte $ly@@604 |run#0@@202| |needle#0@@99|) |i#1@@52|) (< |i#1@@52| (|Seq#Length| |run#0@@202|))) (Uint64__Order.__default.lte |needle#0@@99| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@202| |i#1@@52|))))) :qid |totalord.392:20| :skolemid |2712| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@202| |i#1@@52|))) ))) (<= (LitInt 0) (Uint64__Order.__default.IndexOfFirstGte $ly@@604 |run#0@@202| |needle#0@@99|)))) :qid |totalord.388:12| :skolemid |2713| :pattern ( (Uint64__Order.__default.IndexOfFirstGte $ly@@604 |run#0@@202| |needle#0@@99|)) ))))
(assert (forall (($ly@@605 T@U) (|run#0@@203| T@U) (|needle#0@@100| Int) ) (!  (=> (and (and (= (type $ly@@605) LayerTypeType) (= (type |run#0@@203|) (SeqType BoxType))) (and ($Is |run#0@@203| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |needle#0@@100|) (< |needle#0@@100| 18446744073709551616)))) (and (=> (|Uint64__Order.__default.IndexOfFirstGte#requires| $ly@@605 |run#0@@203| |needle#0@@100|) (Uint64__Order.__default.IsSorted StartFuel_Uint64_Order._default.IsSorted |run#0@@203|)) (=> (Uint64__Order.__default.IsSorted StartFuel_Uint64_Order._default.IsSorted |run#0@@203|) (|Uint64__Order.__default.IndexOfFirstGte#requires| $ly@@605 |run#0@@203| |needle#0@@100|)))) :qid |totalord.388:12| :skolemid |2714| :pattern ( (|Uint64__Order.__default.IndexOfFirstGte#requires| $ly@@605 |run#0@@203| |needle#0@@100|)) )))
(assert (= (type MoreFuel_Uint64_Order._default.IsSorted4) LayerTypeType))
(assert  (=> true (forall (($ly@@606 T@U) (|run#0@@204| T@U) (|needle#0@@101| Int) ) (!  (=> (and (and (= (type $ly@@606) LayerTypeType) (= (type |run#0@@204|) (SeqType BoxType))) (or (|Uint64__Order.__default.IndexOfFirstGte#canCall| |run#0@@204| |needle#0@@101|) (and (and ($Is |run#0@@204| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |needle#0@@101|) (< |needle#0@@101| 18446744073709551616))) (Uint64__Order.__default.IsSorted StartFuel_Uint64_Order._default.IsSorted |run#0@@204|)))) (and (=> (not (= (|Seq#Length| |run#0@@204|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.uint64 |run#0@@204|) (|Uint64__Order.__default.lt#canCall| (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.uint64 |run#0@@204|))) |needle#0@@101|)) (=> (not (Uint64__Order.__default.lt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.uint64 |run#0@@204|))) |needle#0@@101|)) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.uint64 |run#0@@204|) (|Uint64__Order.__default.IndexOfFirstGte#canCall| (Sequences.__default.DropLast Tclass.NativeTypes.uint64 |run#0@@204|) |needle#0@@101|))))) (and (and (and (= StartFuel_Uint64_Order._default.IsSorted ($LS MoreFuel_Uint64_Order._default.IsSorted4)) (= StartFuelAssert_Uint64_Order._default.IsSorted ($LS ($LS MoreFuel_Uint64_Order._default.IsSorted4)))) (= (AsFuelBottom MoreFuel_Uint64_Order._default.IsSorted4) MoreFuel_Uint64_Order._default.IsSorted4)) (= (Uint64__Order.__default.IndexOfFirstGte ($LS $ly@@606) |run#0@@204| |needle#0@@101|) (ite (= (|Seq#Length| |run#0@@204|) (LitInt 0)) 0 (ite (Uint64__Order.__default.lt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.uint64 |run#0@@204|))) |needle#0@@101|) (|Seq#Length| |run#0@@204|) (Uint64__Order.__default.IndexOfFirstGte $ly@@606 (Sequences.__default.DropLast Tclass.NativeTypes.uint64 |run#0@@204|) |needle#0@@101|))))))) :qid |totalord.388:12| :skolemid |2715| :pattern ( (Uint64__Order.__default.IndexOfFirstGte ($LS $ly@@606) |run#0@@204| |needle#0@@101|)) ))))
(assert (= (type MoreFuel_Uint64_Order._default.IsSorted5) LayerTypeType))
(assert  (=> true (forall (($ly@@607 T@U) (|run#0@@205| T@U) (|needle#0@@102| Int) ) (!  (=> (and (and (= (type $ly@@607) LayerTypeType) (= (type |run#0@@205|) (SeqType BoxType))) (or (|Uint64__Order.__default.IndexOfFirstGte#canCall| (Lit |run#0@@205|) (LitInt |needle#0@@102|)) (and (and ($Is |run#0@@205| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |needle#0@@102|) (< |needle#0@@102| 18446744073709551616))) (Uint64__Order.__default.IsSorted StartFuel_Uint64_Order._default.IsSorted (Lit |run#0@@205|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@205|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.uint64 (Lit |run#0@@205|)) (|Uint64__Order.__default.lt#canCall| (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.uint64 (Lit |run#0@@205|))))) (LitInt |needle#0@@102|))) (=> (not (U_2_bool (Lit (bool_2_U (Uint64__Order.__default.lt (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.uint64 (Lit |run#0@@205|))))) (LitInt |needle#0@@102|)))))) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.uint64 (Lit |run#0@@205|)) (|Uint64__Order.__default.IndexOfFirstGte#canCall| (Lit (Sequences.__default.DropLast Tclass.NativeTypes.uint64 (Lit |run#0@@205|))) (LitInt |needle#0@@102|)))))) (and (and (and (= StartFuel_Uint64_Order._default.IsSorted ($LS MoreFuel_Uint64_Order._default.IsSorted5)) (= StartFuelAssert_Uint64_Order._default.IsSorted ($LS ($LS MoreFuel_Uint64_Order._default.IsSorted5)))) (= (AsFuelBottom MoreFuel_Uint64_Order._default.IsSorted5) MoreFuel_Uint64_Order._default.IsSorted5)) (= (Uint64__Order.__default.IndexOfFirstGte ($LS $ly@@607) (Lit |run#0@@205|) (LitInt |needle#0@@102|)) (ite (= (|Seq#Length| (Lit |run#0@@205|)) (LitInt 0)) 0 (ite (Uint64__Order.__default.lt (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.uint64 (Lit |run#0@@205|))))) (LitInt |needle#0@@102|)) (|Seq#Length| (Lit |run#0@@205|)) (Uint64__Order.__default.IndexOfFirstGte ($LS $ly@@607) (Lit (Sequences.__default.DropLast Tclass.NativeTypes.uint64 (Lit |run#0@@205|))) (LitInt |needle#0@@102|)))))))) :qid |totalord.388:12| :weight 3 :skolemid |2716| :pattern ( (Uint64__Order.__default.IndexOfFirstGte ($LS $ly@@607) (Lit |run#0@@205|) (LitInt |needle#0@@102|))) ))))
(assert (forall (($ly@@608 T@U) (|s#0@@206| T@U) (|key#0@@137| Int) (|lo#0@@41| Int) (|hi#0@@41| Int) ) (!  (=> (and (= (type $ly@@608) LayerTypeType) (= (type |s#0@@206|) (SeqType BoxType))) (= (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@608) |s#0@@206| |key#0@@137| |lo#0@@41| |hi#0@@41|) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@608 |s#0@@206| |key#0@@137| |lo#0@@41| |hi#0@@41|))) :qid |totalord.421:12| :skolemid |2717| :pattern ( (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@608) |s#0@@206| |key#0@@137| |lo#0@@41| |hi#0@@41|)) )))
(assert (forall (($ly@@609 T@U) (|s#0@@207| T@U) (|key#0@@138| Int) (|lo#0@@42| Int) (|hi#0@@42| Int) ) (!  (=> (and (= (type $ly@@609) LayerTypeType) (= (type |s#0@@207|) (SeqType BoxType))) (= (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@609 |s#0@@207| |key#0@@138| |lo#0@@42| |hi#0@@42|) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter $LZ |s#0@@207| |key#0@@138| |lo#0@@42| |hi#0@@42|))) :qid |totalord.421:12| :skolemid |2718| :pattern ( (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter (AsFuelBottom $ly@@609) |s#0@@207| |key#0@@138| |lo#0@@42| |hi#0@@42|)) )))
(assert  (=> true (forall (($ly@@610 T@U) (|s#0@@208| T@U) (|key#0@@139| Int) (|lo#0@@43| Int) (|hi#0@@43| Int) ) (!  (=> (and (and (= (type $ly@@610) LayerTypeType) (= (type |s#0@@208|) (SeqType BoxType))) (or (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@208| |key#0@@139| |lo#0@@43| |hi#0@@43|) (and (and ($Is |s#0@@208| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |key#0@@139|) (< |key#0@@139| 18446744073709551616))) (and (and (and (and (<= (LitInt 0) |lo#0@@43|) (< |lo#0@@43| |hi#0@@43|)) (<= |hi#0@@43| (+ (|Seq#Length| |s#0@@208|) 1))) (=> (> |lo#0@@43| 0) (Uint64__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@208| (- |lo#0@@43| 1)))) |key#0@@139|))) (=> (<= |hi#0@@43| (|Seq#Length| |s#0@@208|)) (Uint64__Order.__default.lte |key#0@@139| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@208| (- |hi#0@@43| 1)))))))))) (and (and (and (<= (LitInt 0) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@610 |s#0@@208| |key#0@@139| |lo#0@@43| |hi#0@@43|)) (<= (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@610 |s#0@@208| |key#0@@139| |lo#0@@43| |hi#0@@43|) (|Seq#Length| |s#0@@208|))) (=> (> (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@610 |s#0@@208| |key#0@@139| |lo#0@@43| |hi#0@@43|) 0) (Uint64__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@208| (- (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@610 |s#0@@208| |key#0@@139| |lo#0@@43| |hi#0@@43|) 1)))) |key#0@@139|))) (=> (< (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@610 |s#0@@208| |key#0@@139| |lo#0@@43| |hi#0@@43|) (|Seq#Length| |s#0@@208|)) (Uint64__Order.__default.lte |key#0@@139| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@208| (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@610 |s#0@@208| |key#0@@139| |lo#0@@43| |hi#0@@43|)))))))) :qid |totalord.421:12| :skolemid |2719| :pattern ( (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@610 |s#0@@208| |key#0@@139| |lo#0@@43| |hi#0@@43|)) ))))
(assert (forall (($ly@@611 T@U) (|s#0@@209| T@U) (|key#0@@140| Int) (|lo#0@@44| Int) (|hi#0@@44| Int) ) (!  (=> (and (and (= (type $ly@@611) LayerTypeType) (= (type |s#0@@209|) (SeqType BoxType))) (and ($Is |s#0@@209| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |key#0@@140|) (< |key#0@@140| 18446744073709551616)))) (and (=> (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@611 |s#0@@209| |key#0@@140| |lo#0@@44| |hi#0@@44|) (and (and (and (and (<= (LitInt 0) |lo#0@@44|) (< |lo#0@@44| |hi#0@@44|)) (<= |hi#0@@44| (+ (|Seq#Length| |s#0@@209|) 1))) (=> (> |lo#0@@44| 0) (Uint64__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@209| (- |lo#0@@44| 1)))) |key#0@@140|))) (=> (<= |hi#0@@44| (|Seq#Length| |s#0@@209|)) (Uint64__Order.__default.lte |key#0@@140| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@209| (- |hi#0@@44| 1)))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@44|) (< |lo#0@@44| |hi#0@@44|)) (<= |hi#0@@44| (+ (|Seq#Length| |s#0@@209|) 1))) (=> (> |lo#0@@44| 0) (Uint64__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@209| (- |lo#0@@44| 1)))) |key#0@@140|))) (=> (<= |hi#0@@44| (|Seq#Length| |s#0@@209|)) (Uint64__Order.__default.lte |key#0@@140| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@209| (- |hi#0@@44| 1))))))) (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@611 |s#0@@209| |key#0@@140| |lo#0@@44| |hi#0@@44|)))) :qid |totalord.421:12| :skolemid |2720| :pattern ( (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@611 |s#0@@209| |key#0@@140| |lo#0@@44| |hi#0@@44|)) )))
(assert  (=> true (forall (($ly@@612 T@U) (|s#0@@210| T@U) (|key#0@@141| Int) (|lo#0@@45| Int) (|hi#0@@45| Int) ) (!  (=> (and (and (= (type $ly@@612) LayerTypeType) (= (type |s#0@@210|) (SeqType BoxType))) (or (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@210| |key#0@@141| |lo#0@@45| |hi#0@@45|) (and (and ($Is |s#0@@210| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |key#0@@141|) (< |key#0@@141| 18446744073709551616))) (and (and (and (and (<= (LitInt 0) |lo#0@@45|) (< |lo#0@@45| |hi#0@@45|)) (<= |hi#0@@45| (+ (|Seq#Length| |s#0@@210|) 1))) (=> (> |lo#0@@45| 0) (Uint64__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@210| (- |lo#0@@45| 1)))) |key#0@@141|))) (=> (<= |hi#0@@45| (|Seq#Length| |s#0@@210|)) (Uint64__Order.__default.lte |key#0@@141| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@210| (- |hi#0@@45| 1)))))))))) (and (=> (< (+ |lo#0@@45| 1) |hi#0@@45|) (let ((|mid#0@@11| (Div (+ |lo#0@@45| |hi#0@@45|) (LitInt 2)))) (and (and (|Uint64__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@210| (- |mid#0@@11| 1)))) |key#0@@141|) (=> (Uint64__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@210| (- |mid#0@@11| 1)))) |key#0@@141|) (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@210| |key#0@@141| |mid#0@@11| |hi#0@@45|))) (=> (not (Uint64__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@210| (- |mid#0@@11| 1)))) |key#0@@141|)) (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@210| |key#0@@141| |lo#0@@45| |mid#0@@11|))))) (= (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@612) |s#0@@210| |key#0@@141| |lo#0@@45| |hi#0@@45|) (ite (< (+ |lo#0@@45| 1) |hi#0@@45|) (let ((|mid#0@@12| (Div (+ |lo#0@@45| |hi#0@@45|) (LitInt 2)))) (ite (Uint64__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@210| (- |mid#0@@12| 1)))) |key#0@@141|) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@612 |s#0@@210| |key#0@@141| |mid#0@@12| |hi#0@@45|) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@612 |s#0@@210| |key#0@@141| |lo#0@@45| |mid#0@@12|))) |lo#0@@45|)))) :qid |totalord.421:12| :skolemid |2721| :pattern ( (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@612) |s#0@@210| |key#0@@141| |lo#0@@45| |hi#0@@45|)) ))))
(assert  (=> true (forall (($ly@@613 T@U) (|s#0@@211| T@U) (|key#0@@142| Int) (|lo#0@@46| Int) (|hi#0@@46| Int) ) (!  (=> (and (and (= (type $ly@@613) LayerTypeType) (= (type |s#0@@211|) (SeqType BoxType))) (or (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@211| |key#0@@142| (LitInt |lo#0@@46|) (LitInt |hi#0@@46|)) (and (and ($Is |s#0@@211| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |key#0@@142|) (< |key#0@@142| 18446744073709551616))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@46|)) (< |lo#0@@46| |hi#0@@46|)) (<= (LitInt |hi#0@@46|) (+ (|Seq#Length| |s#0@@211|) 1))) (=> (> |lo#0@@46| 0) (Uint64__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@211| (LitInt (- |lo#0@@46| 1))))) |key#0@@142|))) (=> (<= (LitInt |hi#0@@46|) (|Seq#Length| |s#0@@211|)) (Uint64__Order.__default.lte |key#0@@142| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@211| (LitInt (- |hi#0@@46| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@46| 1) |hi#0@@46|)))) (let ((|mid#1@@11| (LitInt (Div (+ |lo#0@@46| |hi#0@@46|) (LitInt 2))))) (and (and (|Uint64__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@211| (- |mid#1@@11| 1)))) |key#0@@142|) (=> (Uint64__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@211| (- |mid#1@@11| 1)))) |key#0@@142|) (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@211| |key#0@@142| |mid#1@@11| (LitInt |hi#0@@46|)))) (=> (not (Uint64__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@211| (- |mid#1@@11| 1)))) |key#0@@142|)) (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@211| |key#0@@142| (LitInt |lo#0@@46|) |mid#1@@11|))))) (= (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@613) |s#0@@211| |key#0@@142| (LitInt |lo#0@@46|) (LitInt |hi#0@@46|)) (ite (< (+ |lo#0@@46| 1) |hi#0@@46|) (let ((|mid#1@@12| (LitInt (Div (+ |lo#0@@46| |hi#0@@46|) (LitInt 2))))) (ite (Uint64__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@211| (LitInt (- |mid#1@@12| 1))))) |key#0@@142|) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@613) |s#0@@211| |key#0@@142| |mid#1@@12| (LitInt |hi#0@@46|)) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@613) |s#0@@211| |key#0@@142| (LitInt |lo#0@@46|) |mid#1@@12|))) |lo#0@@46|)))) :qid |totalord.421:12| :weight 3 :skolemid |2722| :pattern ( (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@613) |s#0@@211| |key#0@@142| (LitInt |lo#0@@46|) (LitInt |hi#0@@46|))) ))))
(assert  (=> true (forall (($ly@@614 T@U) (|s#0@@212| T@U) (|key#0@@143| Int) (|lo#0@@47| Int) (|hi#0@@47| Int) ) (!  (=> (and (and (= (type $ly@@614) LayerTypeType) (= (type |s#0@@212|) (SeqType BoxType))) (or (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@212|) (LitInt |key#0@@143|) (LitInt |lo#0@@47|) (LitInt |hi#0@@47|)) (and (and ($Is |s#0@@212| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |key#0@@143|) (< |key#0@@143| 18446744073709551616))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@47|)) (< |lo#0@@47| |hi#0@@47|)) (<= (LitInt |hi#0@@47|) (+ (|Seq#Length| (Lit |s#0@@212|)) 1))) (=> (> |lo#0@@47| 0) (Uint64__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@212|) (LitInt (- |lo#0@@47| 1))))) (LitInt |key#0@@143|)))) (=> (<= (LitInt |hi#0@@47|) (|Seq#Length| (Lit |s#0@@212|))) (Uint64__Order.__default.lte (LitInt |key#0@@143|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@212|) (LitInt (- |hi#0@@47| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@47| 1) |hi#0@@47|)))) (let ((|mid#2@@11| (LitInt (Div (+ |lo#0@@47| |hi#0@@47|) (LitInt 2))))) (and (and (|Uint64__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@212|) (- |mid#2@@11| 1)))) (LitInt |key#0@@143|)) (=> (Uint64__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@212|) (- |mid#2@@11| 1)))) (LitInt |key#0@@143|)) (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@212|) (LitInt |key#0@@143|) |mid#2@@11| (LitInt |hi#0@@47|)))) (=> (not (Uint64__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@212|) (- |mid#2@@11| 1)))) (LitInt |key#0@@143|))) (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@212|) (LitInt |key#0@@143|) (LitInt |lo#0@@47|) |mid#2@@11|))))) (= (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@614) (Lit |s#0@@212|) (LitInt |key#0@@143|) (LitInt |lo#0@@47|) (LitInt |hi#0@@47|)) (ite (< (+ |lo#0@@47| 1) |hi#0@@47|) (let ((|mid#2@@12| (LitInt (Div (+ |lo#0@@47| |hi#0@@47|) (LitInt 2))))) (ite (Uint64__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@212|) (LitInt (- |mid#2@@12| 1))))) (LitInt |key#0@@143|)) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@614) (Lit |s#0@@212|) (LitInt |key#0@@143|) |mid#2@@12| (LitInt |hi#0@@47|)) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@614) (Lit |s#0@@212|) (LitInt |key#0@@143|) (LitInt |lo#0@@47|) |mid#2@@12|))) |lo#0@@47|)))) :qid |totalord.421:12| :weight 3 :skolemid |2723| :pattern ( (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@614) (Lit |s#0@@212|) (LitInt |key#0@@143|) (LitInt |lo#0@@47|) (LitInt |hi#0@@47|))) ))))
(assert (forall (($ly@@615 T@U) (|s#0@@213| T@U) (|key#0@@144| Int) ) (!  (=> (and (= (type $ly@@615) LayerTypeType) (= (type |s#0@@213|) (SeqType BoxType))) (= (Uint64__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@615) |s#0@@213| |key#0@@144|) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@615 |s#0@@213| |key#0@@144|))) :qid |totalord.441:22| :skolemid |2724| :pattern ( (Uint64__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@615) |s#0@@213| |key#0@@144|)) )))
(assert (forall (($ly@@616 T@U) (|s#0@@214| T@U) (|key#0@@145| Int) ) (!  (=> (and (= (type $ly@@616) LayerTypeType) (= (type |s#0@@214|) (SeqType BoxType))) (= (Uint64__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@616 |s#0@@214| |key#0@@145|) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGte $LZ |s#0@@214| |key#0@@145|))) :qid |totalord.441:22| :skolemid |2725| :pattern ( (Uint64__Order.__default.binarySearchIndexOfFirstKeyGte (AsFuelBottom $ly@@616) |s#0@@214| |key#0@@145|)) )))
(assert  (=> true (forall (($ly@@617 T@U) (|s#0@@215| T@U) (|key#0@@146| Int) ) (!  (=> (and (and (= (type $ly@@617) LayerTypeType) (= (type |s#0@@215|) (SeqType BoxType))) (or (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@215| |key#0@@146|) (and ($Is |s#0@@215| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |key#0@@146|) (< |key#0@@146| 18446744073709551616))))) (and (and (and (<= (LitInt 0) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@617 |s#0@@215| |key#0@@146|)) (<= (Uint64__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@617 |s#0@@215| |key#0@@146|) (|Seq#Length| |s#0@@215|))) (=> (> (Uint64__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@617 |s#0@@215| |key#0@@146|) 0) (Uint64__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@215| (- (Uint64__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@617 |s#0@@215| |key#0@@146|) 1)))) |key#0@@146|))) (=> (< (Uint64__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@617 |s#0@@215| |key#0@@146|) (|Seq#Length| |s#0@@215|)) (Uint64__Order.__default.lte |key#0@@146| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@215| (Uint64__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@617 |s#0@@215| |key#0@@146|)))))))) :qid |totalord.441:22| :skolemid |2726| :pattern ( (Uint64__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@617 |s#0@@215| |key#0@@146|)) ))))
(assert (forall (($ly@@618 T@U) (|s#0@@216| T@U) (|key#0@@147| Int) ) (!  (=> (and (and (= (type $ly@@618) LayerTypeType) (= (type |s#0@@216|) (SeqType BoxType))) (and ($Is |s#0@@216| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |key#0@@147|) (< |key#0@@147| 18446744073709551616)))) (and (=> (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@618 |s#0@@216| |key#0@@147|) true) (=> true (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@618 |s#0@@216| |key#0@@147|)))) :qid |totalord.441:22| :skolemid |2727| :pattern ( (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@618 |s#0@@216| |key#0@@147|)) )))
(assert  (=> true (forall (($ly@@619 T@U) (|s#0@@217| T@U) (|key#0@@148| Int) ) (!  (=> (and (and (= (type $ly@@619) LayerTypeType) (= (type |s#0@@217|) (SeqType BoxType))) (or (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@217| |key#0@@148|) (and ($Is |s#0@@217| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |key#0@@148|) (< |key#0@@148| 18446744073709551616))))) (and (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@217| |key#0@@148| (LitInt 0) (+ (|Seq#Length| |s#0@@217|) 1)) (= (Uint64__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@619) |s#0@@217| |key#0@@148|) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) |s#0@@217| |key#0@@148| (LitInt 0) (+ (|Seq#Length| |s#0@@217|) 1))))) :qid |totalord.441:22| :skolemid |2728| :pattern ( (Uint64__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@619) |s#0@@217| |key#0@@148|)) ))))
(assert  (=> true (forall (($ly@@620 T@U) (|s#0@@218| T@U) (|key#0@@149| Int) ) (!  (=> (and (and (= (type $ly@@620) LayerTypeType) (= (type |s#0@@218|) (SeqType BoxType))) (or (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (Lit |s#0@@218|) (LitInt |key#0@@149|)) (and ($Is |s#0@@218| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |key#0@@149|) (< |key#0@@149| 18446744073709551616))))) (and (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@218|) (LitInt |key#0@@149|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@218|)) 1)) (= (Uint64__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@620) (Lit |s#0@@218|) (LitInt |key#0@@149|)) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) (Lit |s#0@@218|) (LitInt |key#0@@149|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@218|)) 1))))) :qid |totalord.441:22| :weight 3 :skolemid |2729| :pattern ( (Uint64__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@620) (Lit |s#0@@218|) (LitInt |key#0@@149|))) ))))
(assert (forall (($ly@@621 T@U) (|run#0@@206| T@U) (|needle#0@@103| Int) ) (!  (=> (and (= (type $ly@@621) LayerTypeType) (= (type |run#0@@206|) (SeqType BoxType))) (= (Uint64__Order.__default.IndexOfFirstGt ($LS $ly@@621) |run#0@@206| |needle#0@@103|) (Uint64__Order.__default.IndexOfFirstGt $ly@@621 |run#0@@206| |needle#0@@103|))) :qid |totalord.449:12| :skolemid |2730| :pattern ( (Uint64__Order.__default.IndexOfFirstGt ($LS $ly@@621) |run#0@@206| |needle#0@@103|)) )))
(assert (forall (($ly@@622 T@U) (|run#0@@207| T@U) (|needle#0@@104| Int) ) (!  (=> (and (= (type $ly@@622) LayerTypeType) (= (type |run#0@@207|) (SeqType BoxType))) (= (Uint64__Order.__default.IndexOfFirstGt $ly@@622 |run#0@@207| |needle#0@@104|) (Uint64__Order.__default.IndexOfFirstGt $LZ |run#0@@207| |needle#0@@104|))) :qid |totalord.449:12| :skolemid |2731| :pattern ( (Uint64__Order.__default.IndexOfFirstGt (AsFuelBottom $ly@@622) |run#0@@207| |needle#0@@104|)) )))
(assert  (=> true (forall (($ly@@623 T@U) (|run#0@@208| T@U) (|needle#0@@105| Int) ) (!  (=> (and (and (= (type $ly@@623) LayerTypeType) (= (type |run#0@@208|) (SeqType BoxType))) (or (|Uint64__Order.__default.IndexOfFirstGt#canCall| |run#0@@208| |needle#0@@105|) (and (and ($Is |run#0@@208| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |needle#0@@105|) (< |needle#0@@105| 18446744073709551616))) (Uint64__Order.__default.IsSorted StartFuel_Uint64_Order._default.IsSorted |run#0@@208|)))) (and (and (and (<= (Uint64__Order.__default.IndexOfFirstGt $ly@@623 |run#0@@208| |needle#0@@105|) (|Seq#Length| |run#0@@208|)) (forall ((|i#0@@114| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@114|) (< |i#0@@114| (Uint64__Order.__default.IndexOfFirstGt $ly@@623 |run#0@@208| |needle#0@@105|))) (Uint64__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@208| |i#0@@114|))) |needle#0@@105|)) :qid |totalord.452:20| :skolemid |2732| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@208| |i#0@@114|))) ))) (forall ((|i#1@@53| Int) ) (!  (=> (and (<= (Uint64__Order.__default.IndexOfFirstGt $ly@@623 |run#0@@208| |needle#0@@105|) |i#1@@53|) (< |i#1@@53| (|Seq#Length| |run#0@@208|))) (Uint64__Order.__default.lt |needle#0@@105| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@208| |i#1@@53|))))) :qid |totalord.453:20| :skolemid |2733| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@208| |i#1@@53|))) ))) (<= (LitInt 0) (Uint64__Order.__default.IndexOfFirstGt $ly@@623 |run#0@@208| |needle#0@@105|)))) :qid |totalord.449:12| :skolemid |2734| :pattern ( (Uint64__Order.__default.IndexOfFirstGt $ly@@623 |run#0@@208| |needle#0@@105|)) ))))
(assert (forall (($ly@@624 T@U) (|run#0@@209| T@U) (|needle#0@@106| Int) ) (!  (=> (and (and (= (type $ly@@624) LayerTypeType) (= (type |run#0@@209|) (SeqType BoxType))) (and ($Is |run#0@@209| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |needle#0@@106|) (< |needle#0@@106| 18446744073709551616)))) (and (=> (|Uint64__Order.__default.IndexOfFirstGt#requires| $ly@@624 |run#0@@209| |needle#0@@106|) (Uint64__Order.__default.IsSorted StartFuel_Uint64_Order._default.IsSorted |run#0@@209|)) (=> (Uint64__Order.__default.IsSorted StartFuel_Uint64_Order._default.IsSorted |run#0@@209|) (|Uint64__Order.__default.IndexOfFirstGt#requires| $ly@@624 |run#0@@209| |needle#0@@106|)))) :qid |totalord.449:12| :skolemid |2735| :pattern ( (|Uint64__Order.__default.IndexOfFirstGt#requires| $ly@@624 |run#0@@209| |needle#0@@106|)) )))
(assert (= (type MoreFuel_Uint64_Order._default.IsSorted6) LayerTypeType))
(assert  (=> true (forall (($ly@@625 T@U) (|run#0@@210| T@U) (|needle#0@@107| Int) ) (!  (=> (and (and (= (type $ly@@625) LayerTypeType) (= (type |run#0@@210|) (SeqType BoxType))) (or (|Uint64__Order.__default.IndexOfFirstGt#canCall| |run#0@@210| |needle#0@@107|) (and (and ($Is |run#0@@210| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |needle#0@@107|) (< |needle#0@@107| 18446744073709551616))) (Uint64__Order.__default.IsSorted StartFuel_Uint64_Order._default.IsSorted |run#0@@210|)))) (and (=> (not (= (|Seq#Length| |run#0@@210|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.uint64 |run#0@@210|) (|Uint64__Order.__default.lte#canCall| (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.uint64 |run#0@@210|))) |needle#0@@107|)) (=> (not (Uint64__Order.__default.lte (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.uint64 |run#0@@210|))) |needle#0@@107|)) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.uint64 |run#0@@210|) (|Uint64__Order.__default.IndexOfFirstGt#canCall| (Sequences.__default.DropLast Tclass.NativeTypes.uint64 |run#0@@210|) |needle#0@@107|))))) (and (and (and (= StartFuel_Uint64_Order._default.IsSorted ($LS MoreFuel_Uint64_Order._default.IsSorted6)) (= StartFuelAssert_Uint64_Order._default.IsSorted ($LS ($LS MoreFuel_Uint64_Order._default.IsSorted6)))) (= (AsFuelBottom MoreFuel_Uint64_Order._default.IsSorted6) MoreFuel_Uint64_Order._default.IsSorted6)) (= (Uint64__Order.__default.IndexOfFirstGt ($LS $ly@@625) |run#0@@210| |needle#0@@107|) (ite (= (|Seq#Length| |run#0@@210|) (LitInt 0)) 0 (ite (Uint64__Order.__default.lte (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.uint64 |run#0@@210|))) |needle#0@@107|) (|Seq#Length| |run#0@@210|) (Uint64__Order.__default.IndexOfFirstGt $ly@@625 (Sequences.__default.DropLast Tclass.NativeTypes.uint64 |run#0@@210|) |needle#0@@107|))))))) :qid |totalord.449:12| :skolemid |2736| :pattern ( (Uint64__Order.__default.IndexOfFirstGt ($LS $ly@@625) |run#0@@210| |needle#0@@107|)) ))))
(assert (= (type MoreFuel_Uint64_Order._default.IsSorted7) LayerTypeType))
(assert  (=> true (forall (($ly@@626 T@U) (|run#0@@211| T@U) (|needle#0@@108| Int) ) (!  (=> (and (and (= (type $ly@@626) LayerTypeType) (= (type |run#0@@211|) (SeqType BoxType))) (or (|Uint64__Order.__default.IndexOfFirstGt#canCall| (Lit |run#0@@211|) (LitInt |needle#0@@108|)) (and (and ($Is |run#0@@211| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |needle#0@@108|) (< |needle#0@@108| 18446744073709551616))) (Uint64__Order.__default.IsSorted StartFuel_Uint64_Order._default.IsSorted (Lit |run#0@@211|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@211|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.uint64 (Lit |run#0@@211|)) (|Uint64__Order.__default.lte#canCall| (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.uint64 (Lit |run#0@@211|))))) (LitInt |needle#0@@108|))) (=> (not (U_2_bool (Lit (bool_2_U (Uint64__Order.__default.lte (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.uint64 (Lit |run#0@@211|))))) (LitInt |needle#0@@108|)))))) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.uint64 (Lit |run#0@@211|)) (|Uint64__Order.__default.IndexOfFirstGt#canCall| (Lit (Sequences.__default.DropLast Tclass.NativeTypes.uint64 (Lit |run#0@@211|))) (LitInt |needle#0@@108|)))))) (and (and (and (= StartFuel_Uint64_Order._default.IsSorted ($LS MoreFuel_Uint64_Order._default.IsSorted7)) (= StartFuelAssert_Uint64_Order._default.IsSorted ($LS ($LS MoreFuel_Uint64_Order._default.IsSorted7)))) (= (AsFuelBottom MoreFuel_Uint64_Order._default.IsSorted7) MoreFuel_Uint64_Order._default.IsSorted7)) (= (Uint64__Order.__default.IndexOfFirstGt ($LS $ly@@626) (Lit |run#0@@211|) (LitInt |needle#0@@108|)) (ite (= (|Seq#Length| (Lit |run#0@@211|)) (LitInt 0)) 0 (ite (Uint64__Order.__default.lte (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.uint64 (Lit |run#0@@211|))))) (LitInt |needle#0@@108|)) (|Seq#Length| (Lit |run#0@@211|)) (Uint64__Order.__default.IndexOfFirstGt ($LS $ly@@626) (Lit (Sequences.__default.DropLast Tclass.NativeTypes.uint64 (Lit |run#0@@211|))) (LitInt |needle#0@@108|)))))))) :qid |totalord.449:12| :weight 3 :skolemid |2737| :pattern ( (Uint64__Order.__default.IndexOfFirstGt ($LS $ly@@626) (Lit |run#0@@211|) (LitInt |needle#0@@108|))) ))))
(assert (forall (($ly@@627 T@U) (|s#0@@219| T@U) (|key#0@@150| Int) (|lo#0@@48| Int) (|hi#0@@48| Int) ) (!  (=> (and (= (type $ly@@627) LayerTypeType) (= (type |s#0@@219|) (SeqType BoxType))) (= (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@627) |s#0@@219| |key#0@@150| |lo#0@@48| |hi#0@@48|) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@627 |s#0@@219| |key#0@@150| |lo#0@@48| |hi#0@@48|))) :qid |totalord.482:12| :skolemid |2738| :pattern ( (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@627) |s#0@@219| |key#0@@150| |lo#0@@48| |hi#0@@48|)) )))
(assert (forall (($ly@@628 T@U) (|s#0@@220| T@U) (|key#0@@151| Int) (|lo#0@@49| Int) (|hi#0@@49| Int) ) (!  (=> (and (= (type $ly@@628) LayerTypeType) (= (type |s#0@@220|) (SeqType BoxType))) (= (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@628 |s#0@@220| |key#0@@151| |lo#0@@49| |hi#0@@49|) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter $LZ |s#0@@220| |key#0@@151| |lo#0@@49| |hi#0@@49|))) :qid |totalord.482:12| :skolemid |2739| :pattern ( (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter (AsFuelBottom $ly@@628) |s#0@@220| |key#0@@151| |lo#0@@49| |hi#0@@49|)) )))
(assert  (=> true (forall (($ly@@629 T@U) (|s#0@@221| T@U) (|key#0@@152| Int) (|lo#0@@50| Int) (|hi#0@@50| Int) ) (!  (=> (and (and (= (type $ly@@629) LayerTypeType) (= (type |s#0@@221|) (SeqType BoxType))) (or (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@221| |key#0@@152| |lo#0@@50| |hi#0@@50|) (and (and ($Is |s#0@@221| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |key#0@@152|) (< |key#0@@152| 18446744073709551616))) (and (and (and (and (<= (LitInt 0) |lo#0@@50|) (< |lo#0@@50| |hi#0@@50|)) (<= |hi#0@@50| (+ (|Seq#Length| |s#0@@221|) 1))) (=> (> |lo#0@@50| 0) (Uint64__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@221| (- |lo#0@@50| 1)))) |key#0@@152|))) (=> (<= |hi#0@@50| (|Seq#Length| |s#0@@221|)) (Uint64__Order.__default.lt |key#0@@152| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@221| (- |hi#0@@50| 1)))))))))) (and (and (and (<= (LitInt 0) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@629 |s#0@@221| |key#0@@152| |lo#0@@50| |hi#0@@50|)) (<= (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@629 |s#0@@221| |key#0@@152| |lo#0@@50| |hi#0@@50|) (|Seq#Length| |s#0@@221|))) (=> (> (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@629 |s#0@@221| |key#0@@152| |lo#0@@50| |hi#0@@50|) 0) (Uint64__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@221| (- (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@629 |s#0@@221| |key#0@@152| |lo#0@@50| |hi#0@@50|) 1)))) |key#0@@152|))) (=> (< (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@629 |s#0@@221| |key#0@@152| |lo#0@@50| |hi#0@@50|) (|Seq#Length| |s#0@@221|)) (Uint64__Order.__default.lt |key#0@@152| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@221| (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@629 |s#0@@221| |key#0@@152| |lo#0@@50| |hi#0@@50|)))))))) :qid |totalord.482:12| :skolemid |2740| :pattern ( (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@629 |s#0@@221| |key#0@@152| |lo#0@@50| |hi#0@@50|)) ))))
(assert (forall (($ly@@630 T@U) (|s#0@@222| T@U) (|key#0@@153| Int) (|lo#0@@51| Int) (|hi#0@@51| Int) ) (!  (=> (and (and (= (type $ly@@630) LayerTypeType) (= (type |s#0@@222|) (SeqType BoxType))) (and ($Is |s#0@@222| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |key#0@@153|) (< |key#0@@153| 18446744073709551616)))) (and (=> (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@630 |s#0@@222| |key#0@@153| |lo#0@@51| |hi#0@@51|) (and (and (and (and (<= (LitInt 0) |lo#0@@51|) (< |lo#0@@51| |hi#0@@51|)) (<= |hi#0@@51| (+ (|Seq#Length| |s#0@@222|) 1))) (=> (> |lo#0@@51| 0) (Uint64__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@222| (- |lo#0@@51| 1)))) |key#0@@153|))) (=> (<= |hi#0@@51| (|Seq#Length| |s#0@@222|)) (Uint64__Order.__default.lt |key#0@@153| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@222| (- |hi#0@@51| 1)))))))) (=> (and (and (and (and (<= (LitInt 0) |lo#0@@51|) (< |lo#0@@51| |hi#0@@51|)) (<= |hi#0@@51| (+ (|Seq#Length| |s#0@@222|) 1))) (=> (> |lo#0@@51| 0) (Uint64__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@222| (- |lo#0@@51| 1)))) |key#0@@153|))) (=> (<= |hi#0@@51| (|Seq#Length| |s#0@@222|)) (Uint64__Order.__default.lt |key#0@@153| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@222| (- |hi#0@@51| 1))))))) (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@630 |s#0@@222| |key#0@@153| |lo#0@@51| |hi#0@@51|)))) :qid |totalord.482:12| :skolemid |2741| :pattern ( (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@630 |s#0@@222| |key#0@@153| |lo#0@@51| |hi#0@@51|)) )))
(assert  (=> true (forall (($ly@@631 T@U) (|s#0@@223| T@U) (|key#0@@154| Int) (|lo#0@@52| Int) (|hi#0@@52| Int) ) (!  (=> (and (and (= (type $ly@@631) LayerTypeType) (= (type |s#0@@223|) (SeqType BoxType))) (or (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@223| |key#0@@154| |lo#0@@52| |hi#0@@52|) (and (and ($Is |s#0@@223| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |key#0@@154|) (< |key#0@@154| 18446744073709551616))) (and (and (and (and (<= (LitInt 0) |lo#0@@52|) (< |lo#0@@52| |hi#0@@52|)) (<= |hi#0@@52| (+ (|Seq#Length| |s#0@@223|) 1))) (=> (> |lo#0@@52| 0) (Uint64__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@223| (- |lo#0@@52| 1)))) |key#0@@154|))) (=> (<= |hi#0@@52| (|Seq#Length| |s#0@@223|)) (Uint64__Order.__default.lt |key#0@@154| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@223| (- |hi#0@@52| 1)))))))))) (and (=> (< (+ |lo#0@@52| 1) |hi#0@@52|) (let ((|mid#0@@13| (Div (+ |lo#0@@52| |hi#0@@52|) (LitInt 2)))) (and (and (|Uint64__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@223| (- |mid#0@@13| 1)))) |key#0@@154|) (=> (Uint64__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@223| (- |mid#0@@13| 1)))) |key#0@@154|) (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@223| |key#0@@154| |mid#0@@13| |hi#0@@52|))) (=> (not (Uint64__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@223| (- |mid#0@@13| 1)))) |key#0@@154|)) (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@223| |key#0@@154| |lo#0@@52| |mid#0@@13|))))) (= (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@631) |s#0@@223| |key#0@@154| |lo#0@@52| |hi#0@@52|) (ite (< (+ |lo#0@@52| 1) |hi#0@@52|) (let ((|mid#0@@14| (Div (+ |lo#0@@52| |hi#0@@52|) (LitInt 2)))) (ite (Uint64__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@223| (- |mid#0@@14| 1)))) |key#0@@154|) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@631 |s#0@@223| |key#0@@154| |mid#0@@14| |hi#0@@52|) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@631 |s#0@@223| |key#0@@154| |lo#0@@52| |mid#0@@14|))) |lo#0@@52|)))) :qid |totalord.482:12| :skolemid |2742| :pattern ( (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@631) |s#0@@223| |key#0@@154| |lo#0@@52| |hi#0@@52|)) ))))
(assert  (=> true (forall (($ly@@632 T@U) (|s#0@@224| T@U) (|key#0@@155| Int) (|lo#0@@53| Int) (|hi#0@@53| Int) ) (!  (=> (and (and (= (type $ly@@632) LayerTypeType) (= (type |s#0@@224|) (SeqType BoxType))) (or (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@224| |key#0@@155| (LitInt |lo#0@@53|) (LitInt |hi#0@@53|)) (and (and ($Is |s#0@@224| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |key#0@@155|) (< |key#0@@155| 18446744073709551616))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@53|)) (< |lo#0@@53| |hi#0@@53|)) (<= (LitInt |hi#0@@53|) (+ (|Seq#Length| |s#0@@224|) 1))) (=> (> |lo#0@@53| 0) (Uint64__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@224| (LitInt (- |lo#0@@53| 1))))) |key#0@@155|))) (=> (<= (LitInt |hi#0@@53|) (|Seq#Length| |s#0@@224|)) (Uint64__Order.__default.lt |key#0@@155| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@224| (LitInt (- |hi#0@@53| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@53| 1) |hi#0@@53|)))) (let ((|mid#1@@13| (LitInt (Div (+ |lo#0@@53| |hi#0@@53|) (LitInt 2))))) (and (and (|Uint64__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@224| (- |mid#1@@13| 1)))) |key#0@@155|) (=> (Uint64__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@224| (- |mid#1@@13| 1)))) |key#0@@155|) (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@224| |key#0@@155| |mid#1@@13| (LitInt |hi#0@@53|)))) (=> (not (Uint64__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@224| (- |mid#1@@13| 1)))) |key#0@@155|)) (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@224| |key#0@@155| (LitInt |lo#0@@53|) |mid#1@@13|))))) (= (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@632) |s#0@@224| |key#0@@155| (LitInt |lo#0@@53|) (LitInt |hi#0@@53|)) (ite (< (+ |lo#0@@53| 1) |hi#0@@53|) (let ((|mid#1@@14| (LitInt (Div (+ |lo#0@@53| |hi#0@@53|) (LitInt 2))))) (ite (Uint64__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@224| (LitInt (- |mid#1@@14| 1))))) |key#0@@155|) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@632) |s#0@@224| |key#0@@155| |mid#1@@14| (LitInt |hi#0@@53|)) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@632) |s#0@@224| |key#0@@155| (LitInt |lo#0@@53|) |mid#1@@14|))) |lo#0@@53|)))) :qid |totalord.482:12| :weight 3 :skolemid |2743| :pattern ( (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@632) |s#0@@224| |key#0@@155| (LitInt |lo#0@@53|) (LitInt |hi#0@@53|))) ))))
(assert  (=> true (forall (($ly@@633 T@U) (|s#0@@225| T@U) (|key#0@@156| Int) (|lo#0@@54| Int) (|hi#0@@54| Int) ) (!  (=> (and (and (= (type $ly@@633) LayerTypeType) (= (type |s#0@@225|) (SeqType BoxType))) (or (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@225|) (LitInt |key#0@@156|) (LitInt |lo#0@@54|) (LitInt |hi#0@@54|)) (and (and ($Is |s#0@@225| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |key#0@@156|) (< |key#0@@156| 18446744073709551616))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@54|)) (< |lo#0@@54| |hi#0@@54|)) (<= (LitInt |hi#0@@54|) (+ (|Seq#Length| (Lit |s#0@@225|)) 1))) (=> (> |lo#0@@54| 0) (Uint64__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@225|) (LitInt (- |lo#0@@54| 1))))) (LitInt |key#0@@156|)))) (=> (<= (LitInt |hi#0@@54|) (|Seq#Length| (Lit |s#0@@225|))) (Uint64__Order.__default.lt (LitInt |key#0@@156|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@225|) (LitInt (- |hi#0@@54| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@54| 1) |hi#0@@54|)))) (let ((|mid#2@@13| (LitInt (Div (+ |lo#0@@54| |hi#0@@54|) (LitInt 2))))) (and (and (|Uint64__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@225|) (- |mid#2@@13| 1)))) (LitInt |key#0@@156|)) (=> (Uint64__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@225|) (- |mid#2@@13| 1)))) (LitInt |key#0@@156|)) (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@225|) (LitInt |key#0@@156|) |mid#2@@13| (LitInt |hi#0@@54|)))) (=> (not (Uint64__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@225|) (- |mid#2@@13| 1)))) (LitInt |key#0@@156|))) (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@225|) (LitInt |key#0@@156|) (LitInt |lo#0@@54|) |mid#2@@13|))))) (= (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@633) (Lit |s#0@@225|) (LitInt |key#0@@156|) (LitInt |lo#0@@54|) (LitInt |hi#0@@54|)) (ite (< (+ |lo#0@@54| 1) |hi#0@@54|) (let ((|mid#2@@14| (LitInt (Div (+ |lo#0@@54| |hi#0@@54|) (LitInt 2))))) (ite (Uint64__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@225|) (LitInt (- |mid#2@@14| 1))))) (LitInt |key#0@@156|)) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@633) (Lit |s#0@@225|) (LitInt |key#0@@156|) |mid#2@@14| (LitInt |hi#0@@54|)) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@633) (Lit |s#0@@225|) (LitInt |key#0@@156|) (LitInt |lo#0@@54|) |mid#2@@14|))) |lo#0@@54|)))) :qid |totalord.482:12| :weight 3 :skolemid |2744| :pattern ( (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@633) (Lit |s#0@@225|) (LitInt |key#0@@156|) (LitInt |lo#0@@54|) (LitInt |hi#0@@54|))) ))))
(assert (forall (($ly@@634 T@U) (|s#0@@226| T@U) (|key#0@@157| Int) ) (!  (=> (and (= (type $ly@@634) LayerTypeType) (= (type |s#0@@226|) (SeqType BoxType))) (= (Uint64__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@634) |s#0@@226| |key#0@@157|) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@634 |s#0@@226| |key#0@@157|))) :qid |totalord.502:22| :skolemid |2745| :pattern ( (Uint64__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@634) |s#0@@226| |key#0@@157|)) )))
(assert (forall (($ly@@635 T@U) (|s#0@@227| T@U) (|key#0@@158| Int) ) (!  (=> (and (= (type $ly@@635) LayerTypeType) (= (type |s#0@@227|) (SeqType BoxType))) (= (Uint64__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@635 |s#0@@227| |key#0@@158|) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGt $LZ |s#0@@227| |key#0@@158|))) :qid |totalord.502:22| :skolemid |2746| :pattern ( (Uint64__Order.__default.binarySearchIndexOfFirstKeyGt (AsFuelBottom $ly@@635) |s#0@@227| |key#0@@158|)) )))
(assert  (=> true (forall (($ly@@636 T@U) (|s#0@@228| T@U) (|key#0@@159| Int) ) (!  (=> (and (and (= (type $ly@@636) LayerTypeType) (= (type |s#0@@228|) (SeqType BoxType))) (or (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@228| |key#0@@159|) (and ($Is |s#0@@228| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |key#0@@159|) (< |key#0@@159| 18446744073709551616))))) (and (and (and (<= (LitInt 0) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@636 |s#0@@228| |key#0@@159|)) (<= (Uint64__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@636 |s#0@@228| |key#0@@159|) (|Seq#Length| |s#0@@228|))) (=> (> (Uint64__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@636 |s#0@@228| |key#0@@159|) 0) (Uint64__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@228| (- (Uint64__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@636 |s#0@@228| |key#0@@159|) 1)))) |key#0@@159|))) (=> (< (Uint64__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@636 |s#0@@228| |key#0@@159|) (|Seq#Length| |s#0@@228|)) (Uint64__Order.__default.lt |key#0@@159| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@228| (Uint64__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@636 |s#0@@228| |key#0@@159|)))))))) :qid |totalord.502:22| :skolemid |2747| :pattern ( (Uint64__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@636 |s#0@@228| |key#0@@159|)) ))))
(assert (forall (($ly@@637 T@U) (|s#0@@229| T@U) (|key#0@@160| Int) ) (!  (=> (and (and (= (type $ly@@637) LayerTypeType) (= (type |s#0@@229|) (SeqType BoxType))) (and ($Is |s#0@@229| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |key#0@@160|) (< |key#0@@160| 18446744073709551616)))) (and (=> (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@637 |s#0@@229| |key#0@@160|) true) (=> true (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@637 |s#0@@229| |key#0@@160|)))) :qid |totalord.502:22| :skolemid |2748| :pattern ( (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@637 |s#0@@229| |key#0@@160|)) )))
(assert  (=> true (forall (($ly@@638 T@U) (|s#0@@230| T@U) (|key#0@@161| Int) ) (!  (=> (and (and (= (type $ly@@638) LayerTypeType) (= (type |s#0@@230|) (SeqType BoxType))) (or (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@230| |key#0@@161|) (and ($Is |s#0@@230| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |key#0@@161|) (< |key#0@@161| 18446744073709551616))))) (and (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@230| |key#0@@161| (LitInt 0) (+ (|Seq#Length| |s#0@@230|) 1)) (= (Uint64__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@638) |s#0@@230| |key#0@@161|) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) |s#0@@230| |key#0@@161| (LitInt 0) (+ (|Seq#Length| |s#0@@230|) 1))))) :qid |totalord.502:22| :skolemid |2749| :pattern ( (Uint64__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@638) |s#0@@230| |key#0@@161|)) ))))
(assert  (=> true (forall (($ly@@639 T@U) (|s#0@@231| T@U) (|key#0@@162| Int) ) (!  (=> (and (and (= (type $ly@@639) LayerTypeType) (= (type |s#0@@231|) (SeqType BoxType))) (or (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (Lit |s#0@@231|) (LitInt |key#0@@162|)) (and ($Is |s#0@@231| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |key#0@@162|) (< |key#0@@162| 18446744073709551616))))) (and (|Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@231|) (LitInt |key#0@@162|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@231|)) 1)) (= (Uint64__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@639) (Lit |s#0@@231|) (LitInt |key#0@@162|)) (Uint64__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) (Lit |s#0@@231|) (LitInt |key#0@@162|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@231|)) 1))))) :qid |totalord.502:22| :weight 3 :skolemid |2750| :pattern ( (Uint64__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@639) (Lit |s#0@@231|) (LitInt |key#0@@162|))) ))))
(assert  (=> true (forall ((|a#0@@209| T@U) (|b#0@@174| T@U) ) (!  (=> (and (and (= (type |a#0@@209|) (MapType0Type BoxType boolType)) (= (type |b#0@@174|) (MapType0Type BoxType boolType))) (or (|Uint64__Order.__default.SetAllLte#canCall| |a#0@@209| |b#0@@174|) (and ($Is |a#0@@209| (TSet Tclass.NativeTypes.uint64)) ($Is |b#0@@174| (TSet Tclass.NativeTypes.uint64))))) true) :qid |totalord.675:23| :skolemid |2751| :pattern ( (Uint64__Order.__default.SetAllLte |a#0@@209| |b#0@@174|)) ))))
(assert (forall ((|a#0@@210| T@U) (|b#0@@175| T@U) ) (!  (=> (and (and (= (type |a#0@@210|) (MapType0Type BoxType boolType)) (= (type |b#0@@175|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@210| (TSet Tclass.NativeTypes.uint64)) ($Is |b#0@@175| (TSet Tclass.NativeTypes.uint64)))) (and (=> (|Uint64__Order.__default.SetAllLte#requires| |a#0@@210| |b#0@@175|) true) (=> true (|Uint64__Order.__default.SetAllLte#requires| |a#0@@210| |b#0@@175|)))) :qid |totalord.675:23| :skolemid |2752| :pattern ( (|Uint64__Order.__default.SetAllLte#requires| |a#0@@210| |b#0@@175|)) )))
(assert  (=> true (forall ((|a#0@@211| T@U) (|b#0@@176| T@U) ) (!  (=> (and (and (= (type |a#0@@211|) (MapType0Type BoxType boolType)) (= (type |b#0@@176|) (MapType0Type BoxType boolType))) (or (|Uint64__Order.__default.SetAllLte#canCall| |a#0@@211| |b#0@@176|) (and ($Is |a#0@@211| (TSet Tclass.NativeTypes.uint64)) ($Is |b#0@@176| (TSet Tclass.NativeTypes.uint64))))) (and (forall ((|x#0@@19| Int) (|y#0@@29| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@19|) (< |x#0@@19| 18446744073709551616)) (and (<= (LitInt 0) |y#0@@29|) (< |y#0@@29| 18446744073709551616))) (=> (U_2_bool (MapType0Select |b#0@@176| ($Box (int_2_U |y#0@@29|)))) (|Uint64__Order.__default.lte#canCall| |x#0@@19| |y#0@@29|))) :qid |totalord.676:12| :skolemid |2753| :pattern ( (Uint64__Order.__default.lte |x#0@@19| |y#0@@29|)) :pattern ( (MapType0Select |b#0@@176| ($Box (int_2_U |y#0@@29|))) (MapType0Select |a#0@@211| ($Box (int_2_U |x#0@@19|)))) )) (and (=> (Uint64__Order.__default.SetAllLte |a#0@@211| |b#0@@176|) (forall ((|x#0@@20| Int) (|y#0@@30| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@20|) (< |x#0@@20| 18446744073709551616)) (and (<= (LitInt 0) |y#0@@30|) (< |y#0@@30| 18446744073709551616))) (=> (and (U_2_bool (MapType0Select |a#0@@211| ($Box (int_2_U |x#0@@20|)))) (U_2_bool (MapType0Select |b#0@@176| ($Box (int_2_U |y#0@@30|))))) (Uint64__Order.__default.lte |x#0@@20| |y#0@@30|))) :qid |totalord.676:12| :skolemid |2754| :pattern ( (Uint64__Order.__default.lte |x#0@@20| |y#0@@30|)) :pattern ( (MapType0Select |b#0@@176| ($Box (int_2_U |y#0@@30|))) (MapType0Select |a#0@@211| ($Box (int_2_U |x#0@@20|)))) ))) (=> (forall ((|x#0@@21| Int) (|y#0@@31| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@21|) (< |x#0@@21| 18446744073709551616)) (and (<= (LitInt 0) |y#0@@31|) (< |y#0@@31| 18446744073709551616))) (=> (and (U_2_bool (MapType0Select |a#0@@211| ($Box (int_2_U |x#0@@21|)))) (U_2_bool (MapType0Select |b#0@@176| ($Box (int_2_U |y#0@@31|))))) (Uint64__Order.__default.lte |x#0@@21| |y#0@@31|))) :qid |totalord.676:12| :skolemid |2754| :pattern ( (Uint64__Order.__default.lte |x#0@@21| |y#0@@31|)) :pattern ( (MapType0Select |b#0@@176| ($Box (int_2_U |y#0@@31|))) (MapType0Select |a#0@@211| ($Box (int_2_U |x#0@@21|)))) )) (Uint64__Order.__default.SetAllLte |a#0@@211| |b#0@@176|))))) :qid |totalord.675:23| :skolemid |2755| :pattern ( (Uint64__Order.__default.SetAllLte |a#0@@211| |b#0@@176|)) ))))
(assert  (=> true (forall ((|a#0@@212| T@U) (|b#0@@177| T@U) ) (!  (=> (and (and (= (type |a#0@@212|) (MapType0Type BoxType boolType)) (= (type |b#0@@177|) (MapType0Type BoxType boolType))) (or (|Uint64__Order.__default.SetAllLte#canCall| (Lit |a#0@@212|) (Lit |b#0@@177|)) (and ($Is |a#0@@212| (TSet Tclass.NativeTypes.uint64)) ($Is |b#0@@177| (TSet Tclass.NativeTypes.uint64))))) (and (forall ((|x#1@@17| Int) (|y#1@@17| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@17|) (< |x#1@@17| 18446744073709551616)) (and (<= (LitInt 0) |y#1@@17|) (< |y#1@@17| 18446744073709551616))) (=> (U_2_bool (MapType0Select (Lit |b#0@@177|) ($Box (int_2_U |y#1@@17|)))) (|Uint64__Order.__default.lte#canCall| |x#1@@17| |y#1@@17|))) :qid |totalord.676:12| :skolemid |2756| :pattern ( (Uint64__Order.__default.lte |x#1@@17| |y#1@@17|)) :pattern ( (MapType0Select |b#0@@177| ($Box (int_2_U |y#1@@17|))) (MapType0Select |a#0@@212| ($Box (int_2_U |x#1@@17|)))) )) (and (=> (Uint64__Order.__default.SetAllLte (Lit |a#0@@212|) (Lit |b#0@@177|)) (forall ((|x#1@@18| Int) (|y#1@@18| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@18|) (< |x#1@@18| 18446744073709551616)) (and (<= (LitInt 0) |y#1@@18|) (< |y#1@@18| 18446744073709551616))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@212|) ($Box (int_2_U |x#1@@18|)))) (U_2_bool (MapType0Select (Lit |b#0@@177|) ($Box (int_2_U |y#1@@18|))))) (Uint64__Order.__default.lte |x#1@@18| |y#1@@18|))) :qid |totalord.676:12| :skolemid |2757| :pattern ( (Uint64__Order.__default.lte |x#1@@18| |y#1@@18|)) :pattern ( (MapType0Select |b#0@@177| ($Box (int_2_U |y#1@@18|))) (MapType0Select |a#0@@212| ($Box (int_2_U |x#1@@18|)))) ))) (=> (forall ((|x#1@@19| Int) (|y#1@@19| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@19|) (< |x#1@@19| 18446744073709551616)) (and (<= (LitInt 0) |y#1@@19|) (< |y#1@@19| 18446744073709551616))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@212|) ($Box (int_2_U |x#1@@19|)))) (U_2_bool (MapType0Select (Lit |b#0@@177|) ($Box (int_2_U |y#1@@19|))))) (Uint64__Order.__default.lte |x#1@@19| |y#1@@19|))) :qid |totalord.676:12| :skolemid |2757| :pattern ( (Uint64__Order.__default.lte |x#1@@19| |y#1@@19|)) :pattern ( (MapType0Select |b#0@@177| ($Box (int_2_U |y#1@@19|))) (MapType0Select |a#0@@212| ($Box (int_2_U |x#1@@19|)))) )) (Uint64__Order.__default.SetAllLte (Lit |a#0@@212|) (Lit |b#0@@177|)))))) :qid |totalord.675:23| :weight 3 :skolemid |2758| :pattern ( (Uint64__Order.__default.SetAllLte (Lit |a#0@@212|) (Lit |b#0@@177|))) ))))
(assert  (=> true (forall ((|a#0@@213| T@U) (|b#0@@178| T@U) ) (!  (=> (and (and (= (type |a#0@@213|) (MapType0Type BoxType boolType)) (= (type |b#0@@178|) (MapType0Type BoxType boolType))) (or (|Uint64__Order.__default.SetAllLt#canCall| |a#0@@213| |b#0@@178|) (and ($Is |a#0@@213| (TSet Tclass.NativeTypes.uint64)) ($Is |b#0@@178| (TSet Tclass.NativeTypes.uint64))))) true) :qid |totalord.679:22| :skolemid |2759| :pattern ( (Uint64__Order.__default.SetAllLt |a#0@@213| |b#0@@178|)) ))))
(assert (forall ((|a#0@@214| T@U) (|b#0@@179| T@U) ) (!  (=> (and (and (= (type |a#0@@214|) (MapType0Type BoxType boolType)) (= (type |b#0@@179|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@214| (TSet Tclass.NativeTypes.uint64)) ($Is |b#0@@179| (TSet Tclass.NativeTypes.uint64)))) (and (=> (|Uint64__Order.__default.SetAllLt#requires| |a#0@@214| |b#0@@179|) true) (=> true (|Uint64__Order.__default.SetAllLt#requires| |a#0@@214| |b#0@@179|)))) :qid |totalord.679:22| :skolemid |2760| :pattern ( (|Uint64__Order.__default.SetAllLt#requires| |a#0@@214| |b#0@@179|)) )))
(assert  (=> true (forall ((|a#0@@215| T@U) (|b#0@@180| T@U) ) (!  (=> (and (and (= (type |a#0@@215|) (MapType0Type BoxType boolType)) (= (type |b#0@@180|) (MapType0Type BoxType boolType))) (or (|Uint64__Order.__default.SetAllLt#canCall| |a#0@@215| |b#0@@180|) (and ($Is |a#0@@215| (TSet Tclass.NativeTypes.uint64)) ($Is |b#0@@180| (TSet Tclass.NativeTypes.uint64))))) (and (forall ((|x#0@@22| Int) (|y#0@@32| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@22|) (< |x#0@@22| 18446744073709551616)) (and (<= (LitInt 0) |y#0@@32|) (< |y#0@@32| 18446744073709551616))) (=> (U_2_bool (MapType0Select |b#0@@180| ($Box (int_2_U |y#0@@32|)))) (|Uint64__Order.__default.lt#canCall| |x#0@@22| |y#0@@32|))) :qid |totalord.680:12| :skolemid |2761| :pattern ( (Uint64__Order.__default.lt |x#0@@22| |y#0@@32|)) :pattern ( (MapType0Select |b#0@@180| ($Box (int_2_U |y#0@@32|))) (MapType0Select |a#0@@215| ($Box (int_2_U |x#0@@22|)))) )) (and (=> (Uint64__Order.__default.SetAllLt |a#0@@215| |b#0@@180|) (forall ((|x#0@@23| Int) (|y#0@@33| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@23|) (< |x#0@@23| 18446744073709551616)) (and (<= (LitInt 0) |y#0@@33|) (< |y#0@@33| 18446744073709551616))) (=> (and (U_2_bool (MapType0Select |a#0@@215| ($Box (int_2_U |x#0@@23|)))) (U_2_bool (MapType0Select |b#0@@180| ($Box (int_2_U |y#0@@33|))))) (Uint64__Order.__default.lt |x#0@@23| |y#0@@33|))) :qid |totalord.680:12| :skolemid |2762| :pattern ( (Uint64__Order.__default.lt |x#0@@23| |y#0@@33|)) :pattern ( (MapType0Select |b#0@@180| ($Box (int_2_U |y#0@@33|))) (MapType0Select |a#0@@215| ($Box (int_2_U |x#0@@23|)))) ))) (=> (forall ((|x#0@@24| Int) (|y#0@@34| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@24|) (< |x#0@@24| 18446744073709551616)) (and (<= (LitInt 0) |y#0@@34|) (< |y#0@@34| 18446744073709551616))) (=> (and (U_2_bool (MapType0Select |a#0@@215| ($Box (int_2_U |x#0@@24|)))) (U_2_bool (MapType0Select |b#0@@180| ($Box (int_2_U |y#0@@34|))))) (Uint64__Order.__default.lt |x#0@@24| |y#0@@34|))) :qid |totalord.680:12| :skolemid |2762| :pattern ( (Uint64__Order.__default.lt |x#0@@24| |y#0@@34|)) :pattern ( (MapType0Select |b#0@@180| ($Box (int_2_U |y#0@@34|))) (MapType0Select |a#0@@215| ($Box (int_2_U |x#0@@24|)))) )) (Uint64__Order.__default.SetAllLt |a#0@@215| |b#0@@180|))))) :qid |totalord.679:22| :skolemid |2763| :pattern ( (Uint64__Order.__default.SetAllLt |a#0@@215| |b#0@@180|)) ))))
(assert  (=> true (forall ((|a#0@@216| T@U) (|b#0@@181| T@U) ) (!  (=> (and (and (= (type |a#0@@216|) (MapType0Type BoxType boolType)) (= (type |b#0@@181|) (MapType0Type BoxType boolType))) (or (|Uint64__Order.__default.SetAllLt#canCall| (Lit |a#0@@216|) (Lit |b#0@@181|)) (and ($Is |a#0@@216| (TSet Tclass.NativeTypes.uint64)) ($Is |b#0@@181| (TSet Tclass.NativeTypes.uint64))))) (and (forall ((|x#1@@20| Int) (|y#1@@20| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@20|) (< |x#1@@20| 18446744073709551616)) (and (<= (LitInt 0) |y#1@@20|) (< |y#1@@20| 18446744073709551616))) (=> (U_2_bool (MapType0Select (Lit |b#0@@181|) ($Box (int_2_U |y#1@@20|)))) (|Uint64__Order.__default.lt#canCall| |x#1@@20| |y#1@@20|))) :qid |totalord.680:12| :skolemid |2764| :pattern ( (Uint64__Order.__default.lt |x#1@@20| |y#1@@20|)) :pattern ( (MapType0Select |b#0@@181| ($Box (int_2_U |y#1@@20|))) (MapType0Select |a#0@@216| ($Box (int_2_U |x#1@@20|)))) )) (and (=> (Uint64__Order.__default.SetAllLt (Lit |a#0@@216|) (Lit |b#0@@181|)) (forall ((|x#1@@21| Int) (|y#1@@21| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@21|) (< |x#1@@21| 18446744073709551616)) (and (<= (LitInt 0) |y#1@@21|) (< |y#1@@21| 18446744073709551616))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@216|) ($Box (int_2_U |x#1@@21|)))) (U_2_bool (MapType0Select (Lit |b#0@@181|) ($Box (int_2_U |y#1@@21|))))) (Uint64__Order.__default.lt |x#1@@21| |y#1@@21|))) :qid |totalord.680:12| :skolemid |2765| :pattern ( (Uint64__Order.__default.lt |x#1@@21| |y#1@@21|)) :pattern ( (MapType0Select |b#0@@181| ($Box (int_2_U |y#1@@21|))) (MapType0Select |a#0@@216| ($Box (int_2_U |x#1@@21|)))) ))) (=> (forall ((|x#1@@22| Int) (|y#1@@22| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@22|) (< |x#1@@22| 18446744073709551616)) (and (<= (LitInt 0) |y#1@@22|) (< |y#1@@22| 18446744073709551616))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@216|) ($Box (int_2_U |x#1@@22|)))) (U_2_bool (MapType0Select (Lit |b#0@@181|) ($Box (int_2_U |y#1@@22|))))) (Uint64__Order.__default.lt |x#1@@22| |y#1@@22|))) :qid |totalord.680:12| :skolemid |2765| :pattern ( (Uint64__Order.__default.lt |x#1@@22| |y#1@@22|)) :pattern ( (MapType0Select |b#0@@181| ($Box (int_2_U |y#1@@22|))) (MapType0Select |a#0@@216| ($Box (int_2_U |x#1@@22|)))) )) (Uint64__Order.__default.SetAllLt (Lit |a#0@@216|) (Lit |b#0@@181|)))))) :qid |totalord.679:22| :weight 3 :skolemid |2766| :pattern ( (Uint64__Order.__default.SetAllLt (Lit |a#0@@216|) (Lit |b#0@@181|))) ))))
(assert (forall (($ly@@640 T@U) (|a#0@@217| Int) ) (!  (=> (= (type $ly@@640) LayerTypeType) (and (=> (Uint64__Order.__default.NotMinimum ($LS $ly@@640) |a#0@@217|) (Uint64__Order.__default.NotMinimum $ly@@640 |a#0@@217|)) (=> (Uint64__Order.__default.NotMinimum $ly@@640 |a#0@@217|) (Uint64__Order.__default.NotMinimum ($LS $ly@@640) |a#0@@217|)))) :qid |totalord.696:23| :skolemid |2767| :pattern ( (Uint64__Order.__default.NotMinimum ($LS $ly@@640) |a#0@@217|)) )))
(assert (forall (($ly@@641 T@U) (|a#0@@218| Int) ) (!  (=> (= (type $ly@@641) LayerTypeType) (and (=> (Uint64__Order.__default.NotMinimum $ly@@641 |a#0@@218|) (Uint64__Order.__default.NotMinimum $LZ |a#0@@218|)) (=> (Uint64__Order.__default.NotMinimum $LZ |a#0@@218|) (Uint64__Order.__default.NotMinimum $ly@@641 |a#0@@218|)))) :qid |totalord.696:23| :skolemid |2768| :pattern ( (Uint64__Order.__default.NotMinimum (AsFuelBottom $ly@@641) |a#0@@218|)) )))
(assert  (=> true (forall (($ly@@642 T@U) (|a#0@@219| Int) ) (!  (=> (and (= (type $ly@@642) LayerTypeType) (or (|Uint64__Order.__default.NotMinimum#canCall| |a#0@@219|) (and (<= (LitInt 0) |a#0@@219|) (< |a#0@@219| 18446744073709551616)))) true) :qid |totalord.696:23| :skolemid |2769| :pattern ( (Uint64__Order.__default.NotMinimum $ly@@642 |a#0@@219|)) ))))
(assert (forall (($ly@@643 T@U) (|a#0@@220| Int) ) (!  (=> (= (type $ly@@643) LayerTypeType) (=> (and (<= (LitInt 0) |a#0@@220|) (< |a#0@@220| 18446744073709551616)) (and (=> (|Uint64__Order.__default.NotMinimum#requires| $ly@@643 |a#0@@220|) true) (=> true (|Uint64__Order.__default.NotMinimum#requires| $ly@@643 |a#0@@220|))))) :qid |totalord.696:23| :skolemid |2770| :pattern ( (|Uint64__Order.__default.NotMinimum#requires| $ly@@643 |a#0@@220|)) )))
(assert  (=> true (forall (($ly@@644 T@U) (|a#0@@221| Int) ) (!  (=> (and (= (type $ly@@644) LayerTypeType) (or (|Uint64__Order.__default.NotMinimum#canCall| |a#0@@221|) (and (<= (LitInt 0) |a#0@@221|) (< |a#0@@221| 18446744073709551616)))) (and (forall ((|b#0@@182| Int) ) (!  (=> (and (<= (LitInt 0) |b#0@@182|) (< |b#0@@182| 18446744073709551616)) (|Uint64__Order.__default.lt#canCall| |b#0@@182| |a#0@@221|)) :qid |totalord.697:12| :skolemid |2771| :pattern ( (Uint64__Order.__default.lt |b#0@@182| |a#0@@221|)) )) (and (=> (Uint64__Order.__default.NotMinimum ($LS $ly@@644) |a#0@@221|) (exists ((|b#0@@183| Int) ) (!  (and (and (<= (LitInt 0) |b#0@@183|) (< |b#0@@183| 18446744073709551616)) (Uint64__Order.__default.lt |b#0@@183| |a#0@@221|)) :qid |totalord.697:12| :skolemid |2772| :pattern ( (Uint64__Order.__default.lt |b#0@@183| |a#0@@221|)) ))) (=> (exists ((|b#0@@184| Int) ) (!  (and (and (<= (LitInt 0) |b#0@@184|) (< |b#0@@184| 18446744073709551616)) (Uint64__Order.__default.lt |b#0@@184| |a#0@@221|)) :qid |totalord.697:12| :skolemid |2772| :pattern ( (Uint64__Order.__default.lt |b#0@@184| |a#0@@221|)) )) (Uint64__Order.__default.NotMinimum ($LS $ly@@644) |a#0@@221|))))) :qid |totalord.696:23| :skolemid |2773| :pattern ( (Uint64__Order.__default.NotMinimum ($LS $ly@@644) |a#0@@221|)) ))))
(assert  (=> true (forall (($ly@@645 T@U) (|a#0@@222| Int) ) (!  (=> (and (= (type $ly@@645) LayerTypeType) (or (|Uint64__Order.__default.NotMinimum#canCall| (LitInt |a#0@@222|)) (and (<= (LitInt 0) |a#0@@222|) (< |a#0@@222| 18446744073709551616)))) (and (forall ((|b#1@@19| Int) ) (!  (=> (and (<= (LitInt 0) |b#1@@19|) (< |b#1@@19| 18446744073709551616)) (|Uint64__Order.__default.lt#canCall| |b#1@@19| (LitInt |a#0@@222|))) :qid |totalord.697:12| :skolemid |2774| :pattern ( (Uint64__Order.__default.lt |b#1@@19| |a#0@@222|)) )) (and (=> (Uint64__Order.__default.NotMinimum ($LS $ly@@645) (LitInt |a#0@@222|)) (exists ((|b#1@@20| Int) ) (!  (and (and (<= (LitInt 0) |b#1@@20|) (< |b#1@@20| 18446744073709551616)) (Uint64__Order.__default.lt |b#1@@20| (LitInt |a#0@@222|))) :qid |totalord.697:12| :skolemid |2775| :pattern ( (Uint64__Order.__default.lt |b#1@@20| |a#0@@222|)) ))) (=> (exists ((|b#1@@21| Int) ) (!  (and (and (<= (LitInt 0) |b#1@@21|) (< |b#1@@21| 18446744073709551616)) (Uint64__Order.__default.lt |b#1@@21| (LitInt |a#0@@222|))) :qid |totalord.697:12| :skolemid |2775| :pattern ( (Uint64__Order.__default.lt |b#1@@21| |a#0@@222|)) )) (Uint64__Order.__default.NotMinimum ($LS $ly@@645) (LitInt |a#0@@222|)))))) :qid |totalord.696:23| :weight 3 :skolemid |2776| :pattern ( (Uint64__Order.__default.NotMinimum ($LS $ly@@645) (LitInt |a#0@@222|))) ))))
(assert (forall ((arg0@@327 T@U) (arg1@@199 T@U) (arg2@@124 Int) (arg3@@86 T@U) ) (! (= (type (Uint64__Order.__default.MapPivotedUnion arg0@@327 arg1@@199 arg2@@124 arg3@@86)) (MapType BoxType BoxType)) :qid |funType:Uint64__Order.__default.MapPivotedUnion| :pattern ( (Uint64__Order.__default.MapPivotedUnion arg0@@327 arg1@@199 arg2@@124 arg3@@86)) )))
(assert  (=> true (forall ((Uint64_Order._default.MapPivotedUnion$Value T@U) (|left#0@@11| T@U) (|pivot#0@@11| Int) (|right#0@@11| T@U) ) (!  (=> (and (and (and (= (type Uint64_Order._default.MapPivotedUnion$Value) TyType) (= (type |left#0@@11|) (MapType BoxType BoxType))) (= (type |right#0@@11|) (MapType BoxType BoxType))) (or (|Uint64__Order.__default.MapPivotedUnion#canCall| Uint64_Order._default.MapPivotedUnion$Value |left#0@@11| |pivot#0@@11| |right#0@@11|) (and (and ($Is |left#0@@11| (TMap Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value)) (and (<= (LitInt 0) |pivot#0@@11|) (< |pivot#0@@11| 18446744073709551616))) ($Is |right#0@@11| (TMap Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value))))) ($Is (Uint64__Order.__default.MapPivotedUnion Uint64_Order._default.MapPivotedUnion$Value |left#0@@11| |pivot#0@@11| |right#0@@11|) (TMap Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value))) :qid |unknown.0:0| :skolemid |2777| :pattern ( (Uint64__Order.__default.MapPivotedUnion Uint64_Order._default.MapPivotedUnion$Value |left#0@@11| |pivot#0@@11| |right#0@@11|)) ))))
(assert (forall ((Uint64_Order._default.MapPivotedUnion$Value@@0 T@U) (|left#0@@12| T@U) (|pivot#0@@12| Int) (|right#0@@12| T@U) ) (!  (=> (and (and (and (= (type Uint64_Order._default.MapPivotedUnion$Value@@0) TyType) (= (type |left#0@@12|) (MapType BoxType BoxType))) (= (type |right#0@@12|) (MapType BoxType BoxType))) (and (and ($Is |left#0@@12| (TMap Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value@@0)) (and (<= (LitInt 0) |pivot#0@@12|) (< |pivot#0@@12| 18446744073709551616))) ($Is |right#0@@12| (TMap Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value@@0)))) (and (=> (|Uint64__Order.__default.MapPivotedUnion#requires| Uint64_Order._default.MapPivotedUnion$Value@@0 |left#0@@12| |pivot#0@@12| |right#0@@12|) true) (=> true (|Uint64__Order.__default.MapPivotedUnion#requires| Uint64_Order._default.MapPivotedUnion$Value@@0 |left#0@@12| |pivot#0@@12| |right#0@@12|)))) :qid |unknown.0:0| :skolemid |2778| :pattern ( (|Uint64__Order.__default.MapPivotedUnion#requires| Uint64_Order._default.MapPivotedUnion$Value@@0 |left#0@@12| |pivot#0@@12| |right#0@@12|)) )))
(assert  (and (forall ((arg0@@328 T@U) (arg1@@200 Int) ) (! (= (type (|lambda#124| arg0@@328 arg1@@200)) (MapType0Type BoxType boolType)) :qid |funType:lambda#124| :pattern ( (|lambda#124| arg0@@328 arg1@@200)) )) (forall ((arg0@@329 T@U) (arg1@@201 Int) ) (! (= (type (|lambda#125| arg0@@329 arg1@@201)) (MapType0Type BoxType boolType)) :qid |funType:lambda#125| :pattern ( (|lambda#125| arg0@@329 arg1@@201)) ))))
(assert  (=> true (forall ((Uint64_Order._default.MapPivotedUnion$Value@@1 T@U) (|left#0@@13| T@U) (|pivot#0@@13| Int) (|right#0@@13| T@U) ) (!  (=> (and (and (and (= (type Uint64_Order._default.MapPivotedUnion$Value@@1) TyType) (= (type |left#0@@13|) (MapType BoxType BoxType))) (= (type |right#0@@13|) (MapType BoxType BoxType))) (or (|Uint64__Order.__default.MapPivotedUnion#canCall| Uint64_Order._default.MapPivotedUnion$Value@@1 |left#0@@13| |pivot#0@@13| |right#0@@13|) (and (and ($Is |left#0@@13| (TMap Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value@@1)) (and (<= (LitInt 0) |pivot#0@@13|) (< |pivot#0@@13| 18446744073709551616))) ($Is |right#0@@13| (TMap Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value@@1))))) (and (and (and (forall ((|k#0@@49| Int) ) (!  (=> (and (<= (LitInt 0) |k#0@@49|) (< |k#0@@49| 18446744073709551616)) (|Uint64__Order.__default.lt#canCall| |k#0@@49| |pivot#0@@13|)) :qid |totalord.716:57| :skolemid |2779| :pattern ( (Uint64__Order.__default.lt |k#0@@49| |pivot#0@@13|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value@@1 |left#0@@13| (|lambda#124| Tclass.NativeTypes.uint64 |pivot#0@@13|))) (let ((|restricted_left#0@@5| (Maps.__default.MapIRestrict Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value@@1 |left#0@@13| (|lambda#124| Tclass.NativeTypes.uint64 |pivot#0@@13|)))) (and (and (forall ((|k#1@@11| Int) ) (!  (=> (and (<= (LitInt 0) |k#1@@11|) (< |k#1@@11| 18446744073709551616)) (|Uint64__Order.__default.lte#canCall| |pivot#0@@13| |k#1@@11|)) :qid |totalord.717:59| :skolemid |2780| :pattern ( (Uint64__Order.__default.lte |pivot#0@@13| |k#1@@11|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value@@1 |right#0@@13| (|lambda#125| Tclass.NativeTypes.uint64 |pivot#0@@13|))) (let ((|restricted_right#0@@5| (Maps.__default.MapIRestrict Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value@@1 |right#0@@13| (|lambda#125| Tclass.NativeTypes.uint64 |pivot#0@@13|)))) (|Maps.__default.MapDisjointUnion#canCall| Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value@@1 |restricted_left#0@@5| |restricted_right#0@@5|))))) (= (Uint64__Order.__default.MapPivotedUnion Uint64_Order._default.MapPivotedUnion$Value@@1 |left#0@@13| |pivot#0@@13| |right#0@@13|) (let ((|restricted_left#0@@6| (Maps.__default.MapIRestrict Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value@@1 |left#0@@13| (|lambda#124| Tclass.NativeTypes.uint64 |pivot#0@@13|)))) (let ((|restricted_right#0@@6| (Maps.__default.MapIRestrict Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value@@1 |right#0@@13| (|lambda#125| Tclass.NativeTypes.uint64 |pivot#0@@13|)))) (Maps.__default.MapDisjointUnion Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value@@1 StartFuel_Maps._default.MapDisjointUnion |restricted_left#0@@6| |restricted_right#0@@6|)))))) :qid |unknown.0:0| :skolemid |2781| :pattern ( (Uint64__Order.__default.MapPivotedUnion Uint64_Order._default.MapPivotedUnion$Value@@1 |left#0@@13| |pivot#0@@13| |right#0@@13|)) ))))
(assert  (=> true (forall ((Uint64_Order._default.MapPivotedUnion$Value@@2 T@U) (|left#0@@14| T@U) (|pivot#0@@14| Int) (|right#0@@14| T@U) ) (!  (=> (and (and (and (= (type Uint64_Order._default.MapPivotedUnion$Value@@2) TyType) (= (type |left#0@@14|) (MapType BoxType BoxType))) (= (type |right#0@@14|) (MapType BoxType BoxType))) (or (|Uint64__Order.__default.MapPivotedUnion#canCall| Uint64_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@14|) (LitInt |pivot#0@@14|) (Lit |right#0@@14|)) (and (and ($Is |left#0@@14| (TMap Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value@@2)) (and (<= (LitInt 0) |pivot#0@@14|) (< |pivot#0@@14| 18446744073709551616))) ($Is |right#0@@14| (TMap Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value@@2))))) (and (and (and (forall ((|k#2@@9| Int) ) (!  (=> (and (<= (LitInt 0) |k#2@@9|) (< |k#2@@9| 18446744073709551616)) (|Uint64__Order.__default.lt#canCall| |k#2@@9| (LitInt |pivot#0@@14|))) :qid |totalord.716:57| :skolemid |2782| :pattern ( (Uint64__Order.__default.lt |k#2@@9| |pivot#0@@14|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@14|) (|lambda#124| Tclass.NativeTypes.uint64 (LitInt |pivot#0@@14|)))) (let ((|restricted_left#1@@5| (Maps.__default.MapIRestrict Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@14|) (|lambda#124| Tclass.NativeTypes.uint64 (LitInt |pivot#0@@14|))))) (and (and (forall ((|k#3@@2| Int) ) (!  (=> (and (<= (LitInt 0) |k#3@@2|) (< |k#3@@2| 18446744073709551616)) (|Uint64__Order.__default.lte#canCall| (LitInt |pivot#0@@14|) |k#3@@2|)) :qid |totalord.717:59| :skolemid |2783| :pattern ( (Uint64__Order.__default.lte |pivot#0@@14| |k#3@@2|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@14|) (|lambda#125| Tclass.NativeTypes.uint64 (LitInt |pivot#0@@14|)))) (let ((|restricted_right#1@@5| (Maps.__default.MapIRestrict Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@14|) (|lambda#125| Tclass.NativeTypes.uint64 (LitInt |pivot#0@@14|))))) (|Maps.__default.MapDisjointUnion#canCall| Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value@@2 |restricted_left#1@@5| |restricted_right#1@@5|))))) (= (Uint64__Order.__default.MapPivotedUnion Uint64_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@14|) (LitInt |pivot#0@@14|) (Lit |right#0@@14|)) (let ((|restricted_left#1@@6| (Maps.__default.MapIRestrict Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@14|) (|lambda#124| Tclass.NativeTypes.uint64 (LitInt |pivot#0@@14|))))) (let ((|restricted_right#1@@6| (Maps.__default.MapIRestrict Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@14|) (|lambda#125| Tclass.NativeTypes.uint64 (LitInt |pivot#0@@14|))))) (Maps.__default.MapDisjointUnion Tclass.NativeTypes.uint64 Uint64_Order._default.MapPivotedUnion$Value@@2 StartFuel_Maps._default.MapDisjointUnion |restricted_left#1@@6| |restricted_right#1@@6|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2784| :pattern ( (Uint64__Order.__default.MapPivotedUnion Uint64_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@14|) (LitInt |pivot#0@@14|) (Lit |right#0@@14|))) ))))
(assert (forall ((arg0@@330 T@U) (arg1@@202 Int) ) (! (= (type (Uint64__Order.__default.SetSuccessor arg0@@330 arg1@@202)) DatatypeTypeType) :qid |funType:Uint64__Order.__default.SetSuccessor| :pattern ( (Uint64__Order.__default.SetSuccessor arg0@@330 arg1@@202)) )))
(assert  (=> true (forall ((|m#0@@135| T@U) (|key#0@@163| Int) ) (!  (=> (and (= (type |m#0@@135|) (MapType0Type BoxType boolType)) (or (|Uint64__Order.__default.SetSuccessor#canCall| |m#0@@135| |key#0@@163|) (and ($Is |m#0@@135| (TSet Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |key#0@@163|) (< |key#0@@163| 18446744073709551616))))) ($Is (Uint64__Order.__default.SetSuccessor |m#0@@135| |key#0@@163|) (Tclass.Options.Option Tclass.NativeTypes.uint64))) :qid |totalord.721:25| :skolemid |2785| :pattern ( (Uint64__Order.__default.SetSuccessor |m#0@@135| |key#0@@163|)) ))))
(assert (forall (($Heap@@66 T@U) (|m#0@@136| T@U) (|key#0@@164| Int) ) (!  (=> (and (= (type $Heap@@66) (MapType0Type refType MapType1Type)) (= (type |m#0@@136|) (MapType0Type BoxType boolType))) (=> (and (and ($IsGoodHeap $Heap@@66) ($Is |m#0@@136| (TSet Tclass.NativeTypes.uint64))) (and (<= (LitInt 0) |key#0@@164|) (< |key#0@@164| 18446744073709551616))) (and (=> (|Uint64__Order.__default.SetSuccessor#requires| |m#0@@136| |key#0@@164|) true) (=> true (|Uint64__Order.__default.SetSuccessor#requires| |m#0@@136| |key#0@@164|))))) :qid |totalord.721:12| :skolemid |2786| :pattern ( (|Uint64__Order.__default.SetSuccessor#requires| |m#0@@136| |key#0@@164|) ($IsGoodHeap $Heap@@66)) )))
(assert (forall ((m@@52 T@U) (key@@2 Int) ) (!  (=> (and (= (type m@@52) (MapType0Type BoxType boolType)) (|$let#31$canCall| m@@52 key@@2)) (and (and (<= (LitInt 0) (|$let#31_next| m@@52 key@@2)) (< (|$let#31_next| m@@52 key@@2) 18446744073709551616)) (and (and (U_2_bool (MapType0Select m@@52 ($Box (int_2_U (|$let#31_next| m@@52 key@@2))))) (Uint64__Order.__default.lt key@@2 (|$let#31_next| m@@52 key@@2))) (forall ((|other#1@@2| Int) ) (!  (=> (and (<= (LitInt 0) |other#1@@2|) (< |other#1@@2| 18446744073709551616)) (=> (and (and (U_2_bool (MapType0Select m@@52 ($Box (int_2_U |other#1@@2|)))) (not (= |other#1@@2| (|$let#31_next| m@@52 key@@2)))) (Uint64__Order.__default.lt key@@2 |other#1@@2|)) (Uint64__Order.__default.lt (|$let#31_next| m@@52 key@@2) |other#1@@2|))) :qid |totalord.726:18| :skolemid |2791| :pattern ( (Uint64__Order.__default.lt (|$let#31_next| m@@52 key@@2) |other#1@@2|)) :pattern ( (Uint64__Order.__default.lt key@@2 |other#1@@2|)) :pattern ( (MapType0Select m@@52 ($Box (int_2_U |other#1@@2|)))) ))))) :qid |totalord.723:8| :skolemid |2792| :pattern ( (|$let#31_next| m@@52 key@@2)) )))
(assert  (=> true (forall (($Heap@@67 T@U) (|m#0@@137| T@U) (|key#0@@165| Int) ) (!  (=> (and (and (= (type $Heap@@67) (MapType0Type refType MapType1Type)) (= (type |m#0@@137|) (MapType0Type BoxType boolType))) (or (|Uint64__Order.__default.SetSuccessor#canCall| |m#0@@137| |key#0@@165|) (and (and ($IsGoodHeap $Heap@@67) ($Is |m#0@@137| (TSet Tclass.NativeTypes.uint64))) (and (<= (LitInt 0) |key#0@@165|) (< |key#0@@165| 18446744073709551616))))) (and (and (forall ((|next#0@@8| Int) ) (!  (=> (and (<= (LitInt 0) |next#0@@8|) (< |next#0@@8| 18446744073709551616)) (and (=> (U_2_bool (MapType0Select |m#0@@137| ($Box (int_2_U |next#0@@8|)))) (|Uint64__Order.__default.lt#canCall| |key#0@@165| |next#0@@8|)) (=> (and (|Uint64__Order.__default.lt#canCall| |key#0@@165| |next#0@@8|) (Uint64__Order.__default.lt |key#0@@165| |next#0@@8|)) (forall ((|other#0@@8| Int) ) (!  (=> (and (<= (LitInt 0) |other#0@@8|) (< |other#0@@8| 18446744073709551616)) (and (=> (not (= |other#0@@8| |next#0@@8|)) (|Uint64__Order.__default.lt#canCall| |key#0@@165| |other#0@@8|)) (=> (and (|Uint64__Order.__default.lt#canCall| |key#0@@165| |other#0@@8|) (Uint64__Order.__default.lt |key#0@@165| |other#0@@8|)) (|Uint64__Order.__default.lt#canCall| |next#0@@8| |other#0@@8|)))) :qid |totalord.726:18| :skolemid |2787| :pattern ( (Uint64__Order.__default.lt |next#0@@8| |other#0@@8|)) :pattern ( (Uint64__Order.__default.lt |key#0@@165| |other#0@@8|)) :pattern ( (MapType0Select |m#0@@137| ($Box (int_2_U |other#0@@8|)))) ))))) :qid |totalord.723:8| :skolemid |2788| :pattern ( (Uint64__Order.__default.lt |key#0@@165| |next#0@@8|)) :pattern ( (MapType0Select |m#0@@137| ($Box (int_2_U |next#0@@8|)))) )) (=> (exists ((|next#0@@9| Int) ) (!  (and (and (<= (LitInt 0) |next#0@@9|) (< |next#0@@9| 18446744073709551616)) (and (and (U_2_bool (MapType0Select |m#0@@137| ($Box (int_2_U |next#0@@9|)))) (Uint64__Order.__default.lt |key#0@@165| |next#0@@9|)) (forall ((|other#0@@9| Int) ) (!  (=> (and (<= (LitInt 0) |other#0@@9|) (< |other#0@@9| 18446744073709551616)) (=> (and (and (U_2_bool (MapType0Select |m#0@@137| ($Box (int_2_U |other#0@@9|)))) (not (= |other#0@@9| |next#0@@9|))) (Uint64__Order.__default.lt |key#0@@165| |other#0@@9|)) (Uint64__Order.__default.lt |next#0@@9| |other#0@@9|))) :qid |totalord.726:18| :skolemid |2789| :pattern ( (Uint64__Order.__default.lt |next#0@@9| |other#0@@9|)) :pattern ( (Uint64__Order.__default.lt |key#0@@165| |other#0@@9|)) :pattern ( (MapType0Select |m#0@@137| ($Box (int_2_U |other#0@@9|)))) )))) :qid |totalord.723:8| :skolemid |2790| :pattern ( (Uint64__Order.__default.lt |key#0@@165| |next#0@@9|)) :pattern ( (MapType0Select |m#0@@137| ($Box (int_2_U |next#0@@9|)))) )) (|$let#31$canCall| |m#0@@137| |key#0@@165|))) (= (Uint64__Order.__default.SetSuccessor |m#0@@137| |key#0@@165|) (ite (exists ((|next#0@@10| Int) ) (!  (and (and (<= (LitInt 0) |next#0@@10|) (< |next#0@@10| 18446744073709551616)) (and (and (U_2_bool (MapType0Select |m#0@@137| ($Box (int_2_U |next#0@@10|)))) (Uint64__Order.__default.lt |key#0@@165| |next#0@@10|)) (forall ((|other#0@@10| Int) ) (!  (=> (and (<= (LitInt 0) |other#0@@10|) (< |other#0@@10| 18446744073709551616)) (=> (and (and (U_2_bool (MapType0Select |m#0@@137| ($Box (int_2_U |other#0@@10|)))) (not (= |other#0@@10| |next#0@@10|))) (Uint64__Order.__default.lt |key#0@@165| |other#0@@10|)) (Uint64__Order.__default.lt |next#0@@10| |other#0@@10|))) :qid |totalord.726:18| :skolemid |2793| :pattern ( (Uint64__Order.__default.lt |next#0@@10| |other#0@@10|)) :pattern ( (Uint64__Order.__default.lt |key#0@@165| |other#0@@10|)) :pattern ( (MapType0Select |m#0@@137| ($Box (int_2_U |other#0@@10|)))) )))) :qid |totalord.723:8| :skolemid |2794| :pattern ( (Uint64__Order.__default.lt |key#0@@165| |next#0@@10|)) :pattern ( (MapType0Select |m#0@@137| ($Box (int_2_U |next#0@@10|)))) )) (let ((|next#1@@2| (|$let#31_next| |m#0@@137| |key#0@@165|))) (|#Options.Option.Some| ($Box (int_2_U |next#1@@2|)))) |#Options.Option.None|)))) :qid |totalord.721:12| :skolemid |2795| :pattern ( (Uint64__Order.__default.SetSuccessor |m#0@@137| |key#0@@165|) ($IsGoodHeap $Heap@@67)) ))))
(assert  (=> true (forall (($Heap@@68 T@U) (|m#0@@138| T@U) (|key#0@@166| Int) ) (!  (=> (and (and (= (type $Heap@@68) (MapType0Type refType MapType1Type)) (= (type |m#0@@138|) (MapType0Type BoxType boolType))) (or (|Uint64__Order.__default.SetSuccessor#canCall| (Lit |m#0@@138|) (LitInt |key#0@@166|)) (and (and ($IsGoodHeap $Heap@@68) ($Is |m#0@@138| (TSet Tclass.NativeTypes.uint64))) (and (<= (LitInt 0) |key#0@@166|) (< |key#0@@166| 18446744073709551616))))) (and (and (forall ((|next#2@@8| Int) ) (!  (=> (and (<= (LitInt 0) |next#2@@8|) (< |next#2@@8| 18446744073709551616)) (and (=> (U_2_bool (MapType0Select (Lit |m#0@@138|) ($Box (int_2_U |next#2@@8|)))) (|Uint64__Order.__default.lt#canCall| (LitInt |key#0@@166|) |next#2@@8|)) (=> (and (|Uint64__Order.__default.lt#canCall| (LitInt |key#0@@166|) |next#2@@8|) (Uint64__Order.__default.lt (LitInt |key#0@@166|) |next#2@@8|)) (forall ((|other#2@@8| Int) ) (!  (=> (and (<= (LitInt 0) |other#2@@8|) (< |other#2@@8| 18446744073709551616)) (and (=> (not (= |other#2@@8| |next#2@@8|)) (|Uint64__Order.__default.lt#canCall| (LitInt |key#0@@166|) |other#2@@8|)) (=> (and (|Uint64__Order.__default.lt#canCall| (LitInt |key#0@@166|) |other#2@@8|) (Uint64__Order.__default.lt (LitInt |key#0@@166|) |other#2@@8|)) (|Uint64__Order.__default.lt#canCall| |next#2@@8| |other#2@@8|)))) :qid |totalord.726:18| :skolemid |2796| :pattern ( (Uint64__Order.__default.lt |next#2@@8| |other#2@@8|)) :pattern ( (Uint64__Order.__default.lt |key#0@@166| |other#2@@8|)) :pattern ( (MapType0Select |m#0@@138| ($Box (int_2_U |other#2@@8|)))) ))))) :qid |totalord.723:8| :skolemid |2797| :pattern ( (Uint64__Order.__default.lt |key#0@@166| |next#2@@8|)) :pattern ( (MapType0Select |m#0@@138| ($Box (int_2_U |next#2@@8|)))) )) (=> (exists ((|next#2@@9| Int) ) (!  (and (and (<= (LitInt 0) |next#2@@9|) (< |next#2@@9| 18446744073709551616)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@138|) ($Box (int_2_U |next#2@@9|)))) (Uint64__Order.__default.lt (LitInt |key#0@@166|) |next#2@@9|)) (forall ((|other#2@@9| Int) ) (!  (=> (and (<= (LitInt 0) |other#2@@9|) (< |other#2@@9| 18446744073709551616)) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@138|) ($Box (int_2_U |other#2@@9|)))) (not (= |other#2@@9| |next#2@@9|))) (Uint64__Order.__default.lt (LitInt |key#0@@166|) |other#2@@9|)) (Uint64__Order.__default.lt |next#2@@9| |other#2@@9|))) :qid |totalord.726:18| :skolemid |2798| :pattern ( (Uint64__Order.__default.lt |next#2@@9| |other#2@@9|)) :pattern ( (Uint64__Order.__default.lt |key#0@@166| |other#2@@9|)) :pattern ( (MapType0Select |m#0@@138| ($Box (int_2_U |other#2@@9|)))) )))) :qid |totalord.723:8| :skolemid |2799| :pattern ( (Uint64__Order.__default.lt |key#0@@166| |next#2@@9|)) :pattern ( (MapType0Select |m#0@@138| ($Box (int_2_U |next#2@@9|)))) )) (|$let#31$canCall| (Lit |m#0@@138|) (LitInt |key#0@@166|)))) (= (Uint64__Order.__default.SetSuccessor (Lit |m#0@@138|) (LitInt |key#0@@166|)) (ite (exists ((|next#2@@10| Int) ) (!  (and (and (<= (LitInt 0) |next#2@@10|) (< |next#2@@10| 18446744073709551616)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@138|) ($Box (int_2_U |next#2@@10|)))) (Uint64__Order.__default.lt (LitInt |key#0@@166|) |next#2@@10|)) (forall ((|other#2@@10| Int) ) (!  (=> (and (<= (LitInt 0) |other#2@@10|) (< |other#2@@10| 18446744073709551616)) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@138|) ($Box (int_2_U |other#2@@10|)))) (not (= |other#2@@10| |next#2@@10|))) (Uint64__Order.__default.lt (LitInt |key#0@@166|) |other#2@@10|)) (Uint64__Order.__default.lt |next#2@@10| |other#2@@10|))) :qid |totalord.726:18| :skolemid |2800| :pattern ( (Uint64__Order.__default.lt |next#2@@10| |other#2@@10|)) :pattern ( (Uint64__Order.__default.lt |key#0@@166| |other#2@@10|)) :pattern ( (MapType0Select |m#0@@138| ($Box (int_2_U |other#2@@10|)))) )))) :qid |totalord.723:8| :skolemid |2801| :pattern ( (Uint64__Order.__default.lt |key#0@@166| |next#2@@10|)) :pattern ( (MapType0Select |m#0@@138| ($Box (int_2_U |next#2@@10|)))) )) (let ((|next#3@@2| (|$let#31_next| (Lit |m#0@@138|) (LitInt |key#0@@166|)))) (|#Options.Option.Some| ($Box (int_2_U |next#3@@2|)))) |#Options.Option.None|)))) :qid |totalord.721:12| :weight 3 :skolemid |2802| :pattern ( (Uint64__Order.__default.SetSuccessor (Lit |m#0@@138|) (LitInt |key#0@@166|)) ($IsGoodHeap $Heap@@68)) ))))
(assert (forall ((arg0@@331 T@U) (arg1@@203 T@U) (arg2@@125 Int) ) (! (= (type (Uint64__Order.__default.MapSuccessor arg0@@331 arg1@@203 arg2@@125)) DatatypeTypeType) :qid |funType:Uint64__Order.__default.MapSuccessor| :pattern ( (Uint64__Order.__default.MapSuccessor arg0@@331 arg1@@203 arg2@@125)) )))
(assert  (=> true (forall ((Uint64_Order._default.MapSuccessor$V T@U) (|m#0@@139| T@U) (|key#0@@167| Int) ) (!  (=> (and (and (= (type Uint64_Order._default.MapSuccessor$V) TyType) (= (type |m#0@@139|) (MapType BoxType BoxType))) (or (|Uint64__Order.__default.MapSuccessor#canCall| Uint64_Order._default.MapSuccessor$V |m#0@@139| |key#0@@167|) (and ($Is |m#0@@139| (TMap Tclass.NativeTypes.uint64 Uint64_Order._default.MapSuccessor$V)) (and (<= (LitInt 0) |key#0@@167|) (< |key#0@@167| 18446744073709551616))))) ($Is (Uint64__Order.__default.MapSuccessor Uint64_Order._default.MapSuccessor$V |m#0@@139| |key#0@@167|) (Tclass.Options.Option Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |2803| :pattern ( (Uint64__Order.__default.MapSuccessor Uint64_Order._default.MapSuccessor$V |m#0@@139| |key#0@@167|)) ))))
(assert (forall ((Uint64_Order._default.MapSuccessor$V@@0 T@U) (|m#0@@140| T@U) (|key#0@@168| Int) ) (!  (=> (and (and (= (type Uint64_Order._default.MapSuccessor$V@@0) TyType) (= (type |m#0@@140|) (MapType BoxType BoxType))) (and ($Is |m#0@@140| (TMap Tclass.NativeTypes.uint64 Uint64_Order._default.MapSuccessor$V@@0)) (and (<= (LitInt 0) |key#0@@168|) (< |key#0@@168| 18446744073709551616)))) (and (=> (|Uint64__Order.__default.MapSuccessor#requires| Uint64_Order._default.MapSuccessor$V@@0 |m#0@@140| |key#0@@168|) true) (=> true (|Uint64__Order.__default.MapSuccessor#requires| Uint64_Order._default.MapSuccessor$V@@0 |m#0@@140| |key#0@@168|)))) :qid |unknown.0:0| :skolemid |2804| :pattern ( (|Uint64__Order.__default.MapSuccessor#requires| Uint64_Order._default.MapSuccessor$V@@0 |m#0@@140| |key#0@@168|)) )))
(assert  (=> true (forall ((Uint64_Order._default.MapSuccessor$V@@1 T@U) (|m#0@@141| T@U) (|key#0@@169| Int) ) (!  (=> (and (and (= (type Uint64_Order._default.MapSuccessor$V@@1) TyType) (= (type |m#0@@141|) (MapType BoxType BoxType))) (or (|Uint64__Order.__default.MapSuccessor#canCall| Uint64_Order._default.MapSuccessor$V@@1 |m#0@@141| |key#0@@169|) (and ($Is |m#0@@141| (TMap Tclass.NativeTypes.uint64 Uint64_Order._default.MapSuccessor$V@@1)) (and (<= (LitInt 0) |key#0@@169|) (< |key#0@@169| 18446744073709551616))))) (and (|Uint64__Order.__default.SetSuccessor#canCall| (|Map#Domain| |m#0@@141|) |key#0@@169|) (= (Uint64__Order.__default.MapSuccessor Uint64_Order._default.MapSuccessor$V@@1 |m#0@@141| |key#0@@169|) (Uint64__Order.__default.SetSuccessor (|Map#Domain| |m#0@@141|) |key#0@@169|)))) :qid |unknown.0:0| :skolemid |2805| :pattern ( (Uint64__Order.__default.MapSuccessor Uint64_Order._default.MapSuccessor$V@@1 |m#0@@141| |key#0@@169|)) ))))
(assert  (=> true (forall ((Uint64_Order._default.MapSuccessor$V@@2 T@U) (|m#0@@142| T@U) (|key#0@@170| Int) ) (!  (=> (and (and (= (type Uint64_Order._default.MapSuccessor$V@@2) TyType) (= (type |m#0@@142|) (MapType BoxType BoxType))) (or (|Uint64__Order.__default.MapSuccessor#canCall| Uint64_Order._default.MapSuccessor$V@@2 (Lit |m#0@@142|) (LitInt |key#0@@170|)) (and ($Is |m#0@@142| (TMap Tclass.NativeTypes.uint64 Uint64_Order._default.MapSuccessor$V@@2)) (and (<= (LitInt 0) |key#0@@170|) (< |key#0@@170| 18446744073709551616))))) (and (|Uint64__Order.__default.SetSuccessor#canCall| (Lit (|Map#Domain| (Lit |m#0@@142|))) (LitInt |key#0@@170|)) (= (Uint64__Order.__default.MapSuccessor Uint64_Order._default.MapSuccessor$V@@2 (Lit |m#0@@142|) (LitInt |key#0@@170|)) (Lit (Uint64__Order.__default.SetSuccessor (Lit (|Map#Domain| (Lit |m#0@@142|))) (LitInt |key#0@@170|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2806| :pattern ( (Uint64__Order.__default.MapSuccessor Uint64_Order._default.MapSuccessor$V@@2 (Lit |m#0@@142|) (LitInt |key#0@@170|))) ))))
(assert (forall ((arg0@@332 T@U) (arg1@@204 Int) ) (! (= (type (Uint64__Order.__default.SeqSuccessor arg0@@332 arg1@@204)) DatatypeTypeType) :qid |funType:Uint64__Order.__default.SeqSuccessor| :pattern ( (Uint64__Order.__default.SeqSuccessor arg0@@332 arg1@@204)) )))
(assert  (=> true (forall ((|m#0@@143| T@U) (|key#0@@171| Int) ) (!  (=> (and (= (type |m#0@@143|) (SeqType BoxType)) (or (|Uint64__Order.__default.SeqSuccessor#canCall| |m#0@@143| |key#0@@171|) (and ($Is |m#0@@143| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |key#0@@171|) (< |key#0@@171| 18446744073709551616))))) ($Is (Uint64__Order.__default.SeqSuccessor |m#0@@143| |key#0@@171|) (Tclass.Options.Option Tclass.NativeTypes.uint64))) :qid |totalord.737:25| :skolemid |2807| :pattern ( (Uint64__Order.__default.SeqSuccessor |m#0@@143| |key#0@@171|)) ))))
(assert (forall ((|m#0@@144| T@U) (|key#0@@172| Int) ) (!  (=> (= (type |m#0@@144|) (SeqType BoxType)) (=> (and ($Is |m#0@@144| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |key#0@@172|) (< |key#0@@172| 18446744073709551616))) (and (=> (|Uint64__Order.__default.SeqSuccessor#requires| |m#0@@144| |key#0@@172|) true) (=> true (|Uint64__Order.__default.SeqSuccessor#requires| |m#0@@144| |key#0@@172|))))) :qid |totalord.737:25| :skolemid |2808| :pattern ( (|Uint64__Order.__default.SeqSuccessor#requires| |m#0@@144| |key#0@@172|)) )))
(assert  (=> true (forall ((|m#0@@145| T@U) (|key#0@@173| Int) ) (!  (=> (and (= (type |m#0@@145|) (SeqType BoxType)) (or (|Uint64__Order.__default.SeqSuccessor#canCall| |m#0@@145| |key#0@@173|) (and ($Is |m#0@@145| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |key#0@@173|) (< |key#0@@173| 18446744073709551616))))) (and (|Uint64__Order.__default.SetSuccessor#canCall| (|lambda#88| Tclass.NativeTypes.uint64 |m#0@@145|) |key#0@@173|) (= (Uint64__Order.__default.SeqSuccessor |m#0@@145| |key#0@@173|) (Uint64__Order.__default.SetSuccessor (|lambda#88| Tclass.NativeTypes.uint64 |m#0@@145|) |key#0@@173|)))) :qid |totalord.737:25| :skolemid |2809| :pattern ( (Uint64__Order.__default.SeqSuccessor |m#0@@145| |key#0@@173|)) ))))
(assert  (=> true (forall ((|m#0@@146| T@U) (|key#0@@174| Int) ) (!  (=> (and (= (type |m#0@@146|) (SeqType BoxType)) (or (|Uint64__Order.__default.SeqSuccessor#canCall| (Lit |m#0@@146|) (LitInt |key#0@@174|)) (and ($Is |m#0@@146| (TSeq Tclass.NativeTypes.uint64)) (and (<= (LitInt 0) |key#0@@174|) (< |key#0@@174| 18446744073709551616))))) (and (|Uint64__Order.__default.SetSuccessor#canCall| (|lambda#88| Tclass.NativeTypes.uint64 |m#0@@146|) (LitInt |key#0@@174|)) (= (Uint64__Order.__default.SeqSuccessor (Lit |m#0@@146|) (LitInt |key#0@@174|)) (Uint64__Order.__default.SetSuccessor (|lambda#88| Tclass.NativeTypes.uint64 |m#0@@146|) (LitInt |key#0@@174|))))) :qid |totalord.737:25| :weight 3 :skolemid |2810| :pattern ( (Uint64__Order.__default.SeqSuccessor (Lit |m#0@@146|) (LitInt |key#0@@174|))) ))))
(assert (forall ((Uint64_Order._default.SortedSeqForMap$V T@U) ($ly@@646 T@U) (|s#0@@232| T@U) (|m#0@@147| T@U) ) (!  (=> (and (and (and (= (type Uint64_Order._default.SortedSeqForMap$V) TyType) (= (type $ly@@646) LayerTypeType)) (= (type |s#0@@232|) (SeqType BoxType))) (= (type |m#0@@147|) (MapType BoxType BoxType))) (and (=> (Uint64__Order.__default.SortedSeqForMap Uint64_Order._default.SortedSeqForMap$V ($LS $ly@@646) |s#0@@232| |m#0@@147|) (Uint64__Order.__default.SortedSeqForMap Uint64_Order._default.SortedSeqForMap$V $ly@@646 |s#0@@232| |m#0@@147|)) (=> (Uint64__Order.__default.SortedSeqForMap Uint64_Order._default.SortedSeqForMap$V $ly@@646 |s#0@@232| |m#0@@147|) (Uint64__Order.__default.SortedSeqForMap Uint64_Order._default.SortedSeqForMap$V ($LS $ly@@646) |s#0@@232| |m#0@@147|)))) :qid |unknown.0:0| :skolemid |2811| :pattern ( (Uint64__Order.__default.SortedSeqForMap Uint64_Order._default.SortedSeqForMap$V ($LS $ly@@646) |s#0@@232| |m#0@@147|)) )))
(assert (forall ((Uint64_Order._default.SortedSeqForMap$V@@0 T@U) ($ly@@647 T@U) (|s#0@@233| T@U) (|m#0@@148| T@U) ) (!  (=> (and (and (and (= (type Uint64_Order._default.SortedSeqForMap$V@@0) TyType) (= (type $ly@@647) LayerTypeType)) (= (type |s#0@@233|) (SeqType BoxType))) (= (type |m#0@@148|) (MapType BoxType BoxType))) (and (=> (Uint64__Order.__default.SortedSeqForMap Uint64_Order._default.SortedSeqForMap$V@@0 $ly@@647 |s#0@@233| |m#0@@148|) (Uint64__Order.__default.SortedSeqForMap Uint64_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@233| |m#0@@148|)) (=> (Uint64__Order.__default.SortedSeqForMap Uint64_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@233| |m#0@@148|) (Uint64__Order.__default.SortedSeqForMap Uint64_Order._default.SortedSeqForMap$V@@0 $ly@@647 |s#0@@233| |m#0@@148|)))) :qid |unknown.0:0| :skolemid |2812| :pattern ( (Uint64__Order.__default.SortedSeqForMap Uint64_Order._default.SortedSeqForMap$V@@0 (AsFuelBottom $ly@@647) |s#0@@233| |m#0@@148|)) )))
(assert  (=> true (forall ((Uint64_Order._default.SortedSeqForMap$V@@1 T@U) ($ly@@648 T@U) (|s#0@@234| T@U) (|m#0@@149| T@U) ) (!  (=> (and (and (and (and (= (type Uint64_Order._default.SortedSeqForMap$V@@1) TyType) (= (type $ly@@648) LayerTypeType)) (= (type |s#0@@234|) (SeqType BoxType))) (= (type |m#0@@149|) (MapType BoxType BoxType))) (or (|Uint64__Order.__default.SortedSeqForMap#canCall| Uint64_Order._default.SortedSeqForMap$V@@1 |s#0@@234| |m#0@@149|) (and ($Is |s#0@@234| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.uint64 Uint64_Order._default.SortedSeqForMap$V@@1))) ($Is |m#0@@149| (TMap Tclass.NativeTypes.uint64 Uint64_Order._default.SortedSeqForMap$V@@1))))) true) :qid |unknown.0:0| :skolemid |2813| :pattern ( (Uint64__Order.__default.SortedSeqForMap Uint64_Order._default.SortedSeqForMap$V@@1 $ly@@648 |s#0@@234| |m#0@@149|)) ))))
(assert (forall ((Uint64_Order._default.SortedSeqForMap$V@@2 T@U) ($ly@@649 T@U) (|s#0@@235| T@U) (|m#0@@150| T@U) ) (!  (=> (and (and (and (and (= (type Uint64_Order._default.SortedSeqForMap$V@@2) TyType) (= (type $ly@@649) LayerTypeType)) (= (type |s#0@@235|) (SeqType BoxType))) (= (type |m#0@@150|) (MapType BoxType BoxType))) (and ($Is |s#0@@235| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.uint64 Uint64_Order._default.SortedSeqForMap$V@@2))) ($Is |m#0@@150| (TMap Tclass.NativeTypes.uint64 Uint64_Order._default.SortedSeqForMap$V@@2)))) (and (=> (|Uint64__Order.__default.SortedSeqForMap#requires| Uint64_Order._default.SortedSeqForMap$V@@2 $ly@@649 |s#0@@235| |m#0@@150|) true) (=> true (|Uint64__Order.__default.SortedSeqForMap#requires| Uint64_Order._default.SortedSeqForMap$V@@2 $ly@@649 |s#0@@235| |m#0@@150|)))) :qid |unknown.0:0| :skolemid |2814| :pattern ( (|Uint64__Order.__default.SortedSeqForMap#requires| Uint64_Order._default.SortedSeqForMap$V@@2 $ly@@649 |s#0@@235| |m#0@@150|)) )))
(assert (= (type StartFuel_Uint64_Order._default.IsStrictlySorted) LayerTypeType))
(assert  (=> true (forall ((Uint64_Order._default.SortedSeqForMap$V@@3 T@U) ($ly@@650 T@U) (|s#0@@236| T@U) (|m#0@@151| T@U) ) (!  (=> (and (and (and (and (= (type Uint64_Order._default.SortedSeqForMap$V@@3) TyType) (= (type $ly@@650) LayerTypeType)) (= (type |s#0@@236|) (SeqType BoxType))) (= (type |m#0@@151|) (MapType BoxType BoxType))) (or (|Uint64__Order.__default.SortedSeqForMap#canCall| Uint64_Order._default.SortedSeqForMap$V@@3 |s#0@@236| |m#0@@151|) (and ($Is |s#0@@236| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.uint64 Uint64_Order._default.SortedSeqForMap$V@@3))) ($Is |m#0@@151| (TMap Tclass.NativeTypes.uint64 Uint64_Order._default.SortedSeqForMap$V@@3))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| Tclass.NativeTypes.uint64 Uint64_Order._default.SortedSeqForMap$V@@3 |s#0@@236|) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip Tclass.NativeTypes.uint64 Uint64_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@236|))) (|Uint64__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.uint64 Uint64_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@236|))))) (=> (Uint64__Order.__default.IsStrictlySorted StartFuel_Uint64_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.uint64 Uint64_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@236|)))) (forall ((|i#0@@115| Int) ) (!  (and (=> (< |i#0@@115| (|Seq#Length| |s#0@@236|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@115|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@115|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@151|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@115|)))))) (=> (< |i#0@@115| (|Seq#Length| |s#0@@236|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@115|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@115|))))))) :qid |totalord.761:16| :skolemid |2815| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@115|))) )))) (=> (and (forall ((|i#0@@116| Int) ) (!  (and (=> (< |i#0@@116| (|Seq#Length| |s#0@@236|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@116|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@116|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@151|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@116|)))))) (=> (< |i#0@@116| (|Seq#Length| |s#0@@236|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@116|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@116|))))))) :qid |totalord.761:16| :skolemid |2818| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@116|))) )) (forall ((|i#0@@117| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@117|) (< |i#0@@117| (|Seq#Length| |s#0@@236|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@151|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@117|)))))) (=> (and (<= (LitInt 0) |i#0@@117|) (< |i#0@@117| (|Seq#Length| |s#0@@236|))) (= (MapType0Select (|Map#Elements| |m#0@@151|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@117|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@117|))))))) :qid |totalord.761:16| :skolemid |2819| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@117|))) ))) (forall ((|key#0@@175| T@U) ) (!  (=> (= (type |key#0@@175|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0@@175|)) (< (U_2_int |key#0@@175|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@151|) ($Box |key#0@@175|))) (forall ((|i#1@@54| Int) ) (!  (and (=> (< |i#1@@54| (|Seq#Length| |s#0@@236|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#1@@54|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#1@@54|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#1@@54|))))) (U_2_int |key#0@@175|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#1@@54|))))) :qid |totalord.762:44| :skolemid |2816| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#1@@54|))) ))))) :qid |totalord.762:16| :skolemid |2817| :pattern ( (MapType0Select (|Map#Elements| |m#0@@151|) ($Box |key#0@@175|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@151|) ($Box |key#0@@175|))) )))) (and (=> (Uint64__Order.__default.SortedSeqForMap Uint64_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@650) |s#0@@236| |m#0@@151|) (and (and (Uint64__Order.__default.IsStrictlySorted StartFuel_Uint64_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.uint64 Uint64_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@236|)))) (forall ((|i#0@@118| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@118|) (< |i#0@@118| (|Seq#Length| |s#0@@236|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@151|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@118|)))))) (=> (and (<= (LitInt 0) |i#0@@118|) (< |i#0@@118| (|Seq#Length| |s#0@@236|))) (= (MapType0Select (|Map#Elements| |m#0@@151|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@118|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@118|))))))) :qid |totalord.761:16| :skolemid |2820| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@118|))) ))) (forall ((|key#0@@176| T@U) ) (!  (=> (= (type |key#0@@176|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0@@176|)) (< (U_2_int |key#0@@176|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@151|) ($Box |key#0@@176|))) (exists ((|i#1@@55| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1@@55|) (< |i#1@@55| (|Seq#Length| |s#0@@236|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#1@@55|))))) (U_2_int |key#0@@176|))) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#1@@55|))) (MapType0Select (|Map#Elements| |m#0@@151|) ($Box |key#0@@176|)))) :qid |totalord.762:44| :skolemid |2821| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#1@@55|))) ))))) :qid |totalord.762:16| :skolemid |2822| :pattern ( (MapType0Select (|Map#Elements| |m#0@@151|) ($Box |key#0@@176|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@151|) ($Box |key#0@@176|))) )))) (=> (and (and (Uint64__Order.__default.IsStrictlySorted StartFuel_Uint64_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.uint64 Uint64_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@236|)))) (forall ((|i#0@@119| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@119|) (< |i#0@@119| (|Seq#Length| |s#0@@236|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@151|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@119|)))))) (=> (and (<= (LitInt 0) |i#0@@119|) (< |i#0@@119| (|Seq#Length| |s#0@@236|))) (= (MapType0Select (|Map#Elements| |m#0@@151|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@119|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@119|))))))) :qid |totalord.761:16| :skolemid |2820| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#0@@119|))) ))) (forall ((|key#0@@177| Int) ) (!  (=> (and (<= (LitInt 0) |key#0@@177|) (< |key#0@@177| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@151|) ($Box (int_2_U |key#0@@177|)))) (exists ((|i#1@@56| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1@@56|) (< |i#1@@56| (|Seq#Length| |s#0@@236|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#1@@56|))))) |key#0@@177|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#1@@56|))) (MapType0Select (|Map#Elements| |m#0@@151|) ($Box (int_2_U |key#0@@177|))))) :qid |totalord.762:44| :skolemid |2821| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@236| |i#1@@56|))) )))) :qid |totalord.762:16| :skolemid |2822| :pattern ( (MapType0Select (|Map#Elements| |m#0@@151|) ($Box (int_2_U |key#0@@177|)))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@151|) ($Box (int_2_U |key#0@@177|)))) ))) (Uint64__Order.__default.SortedSeqForMap Uint64_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@650) |s#0@@236| |m#0@@151|))))) :qid |unknown.0:0| :skolemid |2823| :pattern ( (Uint64__Order.__default.SortedSeqForMap Uint64_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@650) |s#0@@236| |m#0@@151|)) ))))
(assert  (=> true (forall ((Uint64_Order._default.SortedSeqForMap$V@@4 T@U) ($ly@@651 T@U) (|s#0@@237| T@U) (|m#0@@152| T@U) ) (!  (=> (and (and (and (and (= (type Uint64_Order._default.SortedSeqForMap$V@@4) TyType) (= (type $ly@@651) LayerTypeType)) (= (type |s#0@@237|) (SeqType BoxType))) (= (type |m#0@@152|) (MapType BoxType BoxType))) (or (|Uint64__Order.__default.SortedSeqForMap#canCall| Uint64_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@237|) (Lit |m#0@@152|)) (and ($Is |s#0@@237| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.uint64 Uint64_Order._default.SortedSeqForMap$V@@4))) ($Is |m#0@@152| (TMap Tclass.NativeTypes.uint64 Uint64_Order._default.SortedSeqForMap$V@@4))))) (and (and (and (and (and (|Sequences.__default.Unzip#canCall| Tclass.NativeTypes.uint64 Uint64_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@237|)) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip Tclass.NativeTypes.uint64 Uint64_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@237|)))) (|Uint64__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.uint64 Uint64_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@237|)))))) (=> (Uint64__Order.__default.IsStrictlySorted StartFuel_Uint64_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.uint64 Uint64_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@237|))))) (forall ((|i#2@@20| Int) ) (!  (and (=> (< |i#2@@20| (|Seq#Length| (Lit |s#0@@237|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#2@@20|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#2@@20|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@152|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#2@@20|)))))) (=> (< |i#2@@20| (|Seq#Length| (Lit |s#0@@237|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#2@@20|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#2@@20|))))))) :qid |totalord.761:16| :skolemid |2824| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@237| |i#2@@20|))) )))) (=> (and (forall ((|i#2@@21| Int) ) (!  (and (=> (< |i#2@@21| (|Seq#Length| (Lit |s#0@@237|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#2@@21|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#2@@21|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@152|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#2@@21|)))))) (=> (< |i#2@@21| (|Seq#Length| (Lit |s#0@@237|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#2@@21|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#2@@21|))))))) :qid |totalord.761:16| :skolemid |2827| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@237| |i#2@@21|))) )) (forall ((|i#2@@22| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@22|) (< |i#2@@22| (|Seq#Length| (Lit |s#0@@237|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@152|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#2@@22|)))))) (=> (and (<= (LitInt 0) |i#2@@22|) (< |i#2@@22| (|Seq#Length| (Lit |s#0@@237|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@152|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#2@@22|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#2@@22|))))))) :qid |totalord.761:16| :skolemid |2828| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@237| |i#2@@22|))) ))) (forall ((|key#1@@14| T@U) ) (!  (=> (= (type |key#1@@14|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#1@@14|)) (< (U_2_int |key#1@@14|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@152|) ($Box |key#1@@14|))) (forall ((|i#3@@14| Int) ) (!  (and (=> (< |i#3@@14| (|Seq#Length| (Lit |s#0@@237|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#3@@14|)))) (=> (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#3@@14|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#3@@14|))))) (U_2_int |key#1@@14|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#3@@14|))))) :qid |totalord.762:44| :skolemid |2825| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@237| |i#3@@14|))) ))))) :qid |totalord.762:16| :skolemid |2826| :pattern ( (MapType0Select (|Map#Elements| |m#0@@152|) ($Box |key#1@@14|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@152|) ($Box |key#1@@14|))) )))) (and (=> (Uint64__Order.__default.SortedSeqForMap Uint64_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@651) (Lit |s#0@@237|) (Lit |m#0@@152|)) (and (and (Uint64__Order.__default.IsStrictlySorted StartFuel_Uint64_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.uint64 Uint64_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@237|))))) (forall ((|i#2@@23| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@23|) (< |i#2@@23| (|Seq#Length| (Lit |s#0@@237|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@152|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#2@@23|)))))) (=> (and (<= (LitInt 0) |i#2@@23|) (< |i#2@@23| (|Seq#Length| (Lit |s#0@@237|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@152|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#2@@23|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#2@@23|))))))) :qid |totalord.761:16| :skolemid |2829| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@237| |i#2@@23|))) ))) (forall ((|key#1@@15| T@U) ) (!  (=> (= (type |key#1@@15|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#1@@15|)) (< (U_2_int |key#1@@15|) 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@152|) ($Box |key#1@@15|))) (exists ((|i#3@@15| Int) ) (!  (and (and (and (<= (LitInt 0) |i#3@@15|) (< |i#3@@15| (|Seq#Length| (Lit |s#0@@237|)))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#3@@15|))))) (U_2_int |key#1@@15|))) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#3@@15|))) (MapType0Select (|Map#Elements| (Lit |m#0@@152|)) ($Box |key#1@@15|)))) :qid |totalord.762:44| :skolemid |2830| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@237| |i#3@@15|))) ))))) :qid |totalord.762:16| :skolemid |2831| :pattern ( (MapType0Select (|Map#Elements| |m#0@@152|) ($Box |key#1@@15|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@152|) ($Box |key#1@@15|))) )))) (=> (and (and (Uint64__Order.__default.IsStrictlySorted StartFuel_Uint64_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.uint64 Uint64_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@237|))))) (forall ((|i#2@@24| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@24|) (< |i#2@@24| (|Seq#Length| (Lit |s#0@@237|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@152|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#2@@24|)))))) (=> (and (<= (LitInt 0) |i#2@@24|) (< |i#2@@24| (|Seq#Length| (Lit |s#0@@237|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@152|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#2@@24|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#2@@24|))))))) :qid |totalord.761:16| :skolemid |2829| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@237| |i#2@@24|))) ))) (forall ((|key#1@@16| Int) ) (!  (=> (and (<= (LitInt 0) |key#1@@16|) (< |key#1@@16| 18446744073709551616)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@152|) ($Box (int_2_U |key#1@@16|)))) (exists ((|i#3@@16| Int) ) (!  (and (and (and (<= (LitInt 0) |i#3@@16|) (< |i#3@@16| (|Seq#Length| (Lit |s#0@@237|)))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#3@@16|))))) |key#1@@16|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@237|) |i#3@@16|))) (MapType0Select (|Map#Elements| (Lit |m#0@@152|)) ($Box (int_2_U |key#1@@16|))))) :qid |totalord.762:44| :skolemid |2830| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@237| |i#3@@16|))) )))) :qid |totalord.762:16| :skolemid |2831| :pattern ( (MapType0Select (|Map#Elements| |m#0@@152|) ($Box (int_2_U |key#1@@16|)))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@152|) ($Box (int_2_U |key#1@@16|)))) ))) (Uint64__Order.__default.SortedSeqForMap Uint64_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@651) (Lit |s#0@@237|) (Lit |m#0@@152|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2832| :pattern ( (Uint64__Order.__default.SortedSeqForMap Uint64_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@651) (Lit |s#0@@237|) (Lit |m#0@@152|))) ))))
(assert (forall (($ly@@652 T@U) (|s#0@@238| T@U) ) (!  (=> (and (= (type $ly@@652) LayerTypeType) (= (type |s#0@@238|) (MapType0Type BoxType boolType))) (= (Uint64__Order.__default.minimum ($LS $ly@@652) |s#0@@238|) (Uint64__Order.__default.minimum $ly@@652 |s#0@@238|))) :qid |totalord.765:22| :skolemid |2833| :pattern ( (Uint64__Order.__default.minimum ($LS $ly@@652) |s#0@@238|)) )))
(assert (forall (($ly@@653 T@U) (|s#0@@239| T@U) ) (!  (=> (and (= (type $ly@@653) LayerTypeType) (= (type |s#0@@239|) (MapType0Type BoxType boolType))) (= (Uint64__Order.__default.minimum $ly@@653 |s#0@@239|) (Uint64__Order.__default.minimum $LZ |s#0@@239|))) :qid |totalord.765:22| :skolemid |2834| :pattern ( (Uint64__Order.__default.minimum (AsFuelBottom $ly@@653) |s#0@@239|)) )))
(assert  (=> true (forall (($ly@@654 T@U) (|s#0@@240| T@U) ) (!  (=> (and (and (= (type $ly@@654) LayerTypeType) (= (type |s#0@@240|) (MapType0Type BoxType boolType))) (or (|Uint64__Order.__default.minimum#canCall| |s#0@@240|) (and ($Is |s#0@@240| (TSet Tclass.NativeTypes.uint64)) (>= (|Set#Card| |s#0@@240|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@240| ($Box (int_2_U (Uint64__Order.__default.minimum $ly@@654 |s#0@@240|))))) (forall ((|y#0@@35| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@35|) (< |y#0@@35| 18446744073709551616)) (U_2_bool (MapType0Select |s#0@@240| ($Box (int_2_U |y#0@@35|))))) (Uint64__Order.__default.lte (Uint64__Order.__default.minimum $ly@@654 |s#0@@240|) |y#0@@35|)) :qid |totalord.768:18| :skolemid |2835| :pattern ( (Uint64__Order.__default.lte (Uint64__Order.__default.minimum $ly@@654 |s#0@@240|) |y#0@@35|)) :pattern ( (MapType0Select |s#0@@240| ($Box (int_2_U |y#0@@35|)))) ))) (and (<= (LitInt 0) (Uint64__Order.__default.minimum $ly@@654 |s#0@@240|)) (< (Uint64__Order.__default.minimum $ly@@654 |s#0@@240|) 18446744073709551616)))) :qid |totalord.765:22| :skolemid |2836| :pattern ( (Uint64__Order.__default.minimum $ly@@654 |s#0@@240|)) ))))
(assert (forall (($ly@@655 T@U) ($Heap@@69 T@U) (|s#0@@241| T@U) ) (!  (=> (and (and (and (= (type $ly@@655) LayerTypeType) (= (type $Heap@@69) (MapType0Type refType MapType1Type))) (= (type |s#0@@241|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@69) ($Is |s#0@@241| (TSet Tclass.NativeTypes.uint64)))) (and (=> (|Uint64__Order.__default.minimum#requires| $ly@@655 |s#0@@241|) (>= (|Set#Card| |s#0@@241|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@241|) (LitInt 1)) (|Uint64__Order.__default.minimum#requires| $ly@@655 |s#0@@241|)))) :qid |totalord.765:22| :skolemid |2837| :pattern ( (|Uint64__Order.__default.minimum#requires| $ly@@655 |s#0@@241|) ($IsGoodHeap $Heap@@69)) )))
(assert (forall ((s@@52 T@U) ) (!  (=> (and (= (type s@@52) (MapType0Type BoxType boolType)) (|$let#34$canCall| s@@52)) (and (and (<= (LitInt 0) (|$let#34_a| s@@52)) (< (|$let#34_a| s@@52) 18446744073709551616)) (U_2_bool (MapType0Select s@@52 ($Box (int_2_U (|$let#34_a| s@@52))))))) :qid |totalord.772:5| :skolemid |2838| :pattern ( (|$let#34_a| s@@52)) )))
(assert  (=> true (forall (($ly@@656 T@U) ($Heap@@70 T@U) (|s#0@@242| T@U) ) (!  (=> (and (and (and (= (type $ly@@656) LayerTypeType) (= (type $Heap@@70) (MapType0Type refType MapType1Type))) (= (type |s#0@@242|) (MapType0Type BoxType boolType))) (or (|Uint64__Order.__default.minimum#canCall| |s#0@@242|) (and (and ($IsGoodHeap $Heap@@70) ($Is |s#0@@242| (TSet Tclass.NativeTypes.uint64))) (>= (|Set#Card| |s#0@@242|) (LitInt 1))))) (and (and (|$let#34$canCall| |s#0@@242|) (let ((|s'#0@@5| (|Set#Difference| |s#0@@242| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#34_a| |s#0@@242|))))))) (=> (not (|Set#Equal| |s'#0@@5| (|Set#Empty| BoxType))) (and (|Uint64__Order.__default.minimum#canCall| |s'#0@@5|) (let ((|m'#0@@16| (Uint64__Order.__default.minimum $ly@@656 |s'#0@@5|))) (|Uint64__Order.__default.lt#canCall| (|$let#34_a| |s#0@@242|) |m'#0@@16|)))))) (= (Uint64__Order.__default.minimum ($LS $ly@@656) |s#0@@242|) (let ((|a#0@@223| (|$let#34_a| |s#0@@242|))) (let ((|s'#1@@5| (|Set#Difference| |s#0@@242| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#0@@223|)))))) (ite (|Set#Equal| |s'#1@@5| (|Set#Empty| BoxType)) |a#0@@223| (let ((|m'#1@@7| (Uint64__Order.__default.minimum $ly@@656 |s'#1@@5|))) (ite (Uint64__Order.__default.lt |a#0@@223| |m'#1@@7|) |a#0@@223| |m'#1@@7|)))))))) :qid |totalord.765:22| :skolemid |2839| :pattern ( (Uint64__Order.__default.minimum ($LS $ly@@656) |s#0@@242|) ($IsGoodHeap $Heap@@70)) ))))
(assert  (=> true (forall (($ly@@657 T@U) ($Heap@@71 T@U) (|s#0@@243| T@U) ) (!  (=> (and (and (and (= (type $ly@@657) LayerTypeType) (= (type $Heap@@71) (MapType0Type refType MapType1Type))) (= (type |s#0@@243|) (MapType0Type BoxType boolType))) (or (|Uint64__Order.__default.minimum#canCall| (Lit |s#0@@243|)) (and (and ($IsGoodHeap $Heap@@71) ($Is |s#0@@243| (TSet Tclass.NativeTypes.uint64))) (>= (|Set#Card| (Lit |s#0@@243|)) (LitInt 1))))) (and (and (|$let#34$canCall| (Lit |s#0@@243|)) (let ((|s'#2@@5| (|Set#Difference| |s#0@@243| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#34_a| (Lit |s#0@@243|)))))))) (=> (not (|Set#Equal| |s'#2@@5| (|Set#Empty| BoxType))) (and (|Uint64__Order.__default.minimum#canCall| |s'#2@@5|) (let ((|m'#2@@6| (Uint64__Order.__default.minimum ($LS $ly@@657) |s'#2@@5|))) (|Uint64__Order.__default.lt#canCall| (|$let#34_a| (Lit |s#0@@243|)) |m'#2@@6|)))))) (= (Uint64__Order.__default.minimum ($LS $ly@@657) (Lit |s#0@@243|)) (let ((|a#1@@10| (|$let#34_a| (Lit |s#0@@243|)))) (let ((|s'#3@@5| (|Set#Difference| |s#0@@243| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#1@@10|)))))) (ite (|Set#Equal| |s'#3@@5| (|Set#Empty| BoxType)) |a#1@@10| (let ((|m'#3@@5| (Uint64__Order.__default.minimum ($LS $ly@@657) |s'#3@@5|))) (ite (Uint64__Order.__default.lt |a#1@@10| |m'#3@@5|) |a#1@@10| |m'#3@@5|)))))))) :qid |totalord.765:22| :weight 3 :skolemid |2840| :pattern ( (Uint64__Order.__default.minimum ($LS $ly@@657) (Lit |s#0@@243|)) ($IsGoodHeap $Heap@@71)) ))))
(assert (forall ((arg0@@333 T@U) (arg1@@205 T@U) ) (! (= (type (Uint64__Order.__default.minimumOpt arg0@@333 arg1@@205)) DatatypeTypeType) :qid |funType:Uint64__Order.__default.minimumOpt| :pattern ( (Uint64__Order.__default.minimumOpt arg0@@333 arg1@@205)) )))
(assert (forall (($ly@@658 T@U) (|s#0@@244| T@U) ) (!  (=> (and (= (type $ly@@658) LayerTypeType) (= (type |s#0@@244|) (MapType0Type BoxType boolType))) (= (Uint64__Order.__default.minimumOpt ($LS $ly@@658) |s#0@@244|) (Uint64__Order.__default.minimumOpt $ly@@658 |s#0@@244|))) :qid |totalord.788:22| :skolemid |2841| :pattern ( (Uint64__Order.__default.minimumOpt ($LS $ly@@658) |s#0@@244|)) )))
(assert (forall (($ly@@659 T@U) (|s#0@@245| T@U) ) (!  (=> (and (= (type $ly@@659) LayerTypeType) (= (type |s#0@@245|) (MapType0Type BoxType boolType))) (= (Uint64__Order.__default.minimumOpt $ly@@659 |s#0@@245|) (Uint64__Order.__default.minimumOpt $LZ |s#0@@245|))) :qid |totalord.788:22| :skolemid |2842| :pattern ( (Uint64__Order.__default.minimumOpt (AsFuelBottom $ly@@659) |s#0@@245|)) )))
(assert  (=> true (forall (($ly@@660 T@U) (|s#0@@246| T@U) ) (!  (=> (and (and (= (type $ly@@660) LayerTypeType) (= (type |s#0@@246|) (MapType0Type BoxType boolType))) (or (|Uint64__Order.__default.minimumOpt#canCall| |s#0@@246|) ($Is |s#0@@246| (TSet Tclass.NativeTypes.uint64)))) (and (and (and (=> (Options.Option.Some_q (Uint64__Order.__default.minimumOpt $ly@@660 |s#0@@246|)) (U_2_bool (MapType0Select |s#0@@246| (Options.Option.value (Uint64__Order.__default.minimumOpt $ly@@660 |s#0@@246|))))) (=> (Options.Option.Some_q (Uint64__Order.__default.minimumOpt $ly@@660 |s#0@@246|)) (forall ((|y#0@@36| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@36|) (< |y#0@@36| 18446744073709551616)) (U_2_bool (MapType0Select |s#0@@246| ($Box (int_2_U |y#0@@36|))))) (Uint64__Order.__default.lte (U_2_int ($Unbox intType (Options.Option.value (Uint64__Order.__default.minimumOpt $ly@@660 |s#0@@246|)))) |y#0@@36|)) :qid |totalord.790:30| :skolemid |2843| :pattern ( (Uint64__Order.__default.lte (U_2_int ($Unbox intType (Options.Option.value (Uint64__Order.__default.minimumOpt $ly@@660 |s#0@@246|)))) |y#0@@36|)) :pattern ( (MapType0Select |s#0@@246| ($Box (int_2_U |y#0@@36|)))) )))) (=> (Options.Option.None_q (Uint64__Order.__default.minimumOpt $ly@@660 |s#0@@246|)) (|Set#Equal| |s#0@@246| (|Set#Empty| BoxType)))) ($Is (Uint64__Order.__default.minimumOpt $ly@@660 |s#0@@246|) (Tclass.Options.Option Tclass.NativeTypes.uint64)))) :qid |totalord.788:22| :skolemid |2844| :pattern ( (Uint64__Order.__default.minimumOpt $ly@@660 |s#0@@246|)) ))))
(assert (forall (($ly@@661 T@U) (|s#0@@247| T@U) ) (!  (=> (and (and (= (type $ly@@661) LayerTypeType) (= (type |s#0@@247|) (MapType0Type BoxType boolType))) ($Is |s#0@@247| (TSet Tclass.NativeTypes.uint64))) (and (=> (|Uint64__Order.__default.minimumOpt#requires| $ly@@661 |s#0@@247|) true) (=> true (|Uint64__Order.__default.minimumOpt#requires| $ly@@661 |s#0@@247|)))) :qid |totalord.788:22| :skolemid |2845| :pattern ( (|Uint64__Order.__default.minimumOpt#requires| $ly@@661 |s#0@@247|)) )))
(assert (= (type StartFuel_Uint64_Order._default.minimum) LayerTypeType))
(assert  (=> true (forall (($ly@@662 T@U) (|s#0@@248| T@U) ) (!  (=> (and (and (= (type $ly@@662) LayerTypeType) (= (type |s#0@@248|) (MapType0Type BoxType boolType))) (or (|Uint64__Order.__default.minimumOpt#canCall| |s#0@@248|) ($Is |s#0@@248| (TSet Tclass.NativeTypes.uint64)))) (and (=> (not (|Set#Equal| |s#0@@248| (|Set#Empty| BoxType))) (|Uint64__Order.__default.minimum#canCall| |s#0@@248|)) (= (Uint64__Order.__default.minimumOpt ($LS $ly@@662) |s#0@@248|) (ite (|Set#Equal| |s#0@@248| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Uint64__Order.__default.minimum StartFuel_Uint64_Order._default.minimum |s#0@@248|)))))))) :qid |totalord.788:22| :skolemid |2846| :pattern ( (Uint64__Order.__default.minimumOpt ($LS $ly@@662) |s#0@@248|)) ))))
(assert  (=> true (forall (($ly@@663 T@U) (|s#0@@249| T@U) ) (!  (=> (and (and (= (type $ly@@663) LayerTypeType) (= (type |s#0@@249|) (MapType0Type BoxType boolType))) (or (|Uint64__Order.__default.minimumOpt#canCall| (Lit |s#0@@249|)) ($Is |s#0@@249| (TSet Tclass.NativeTypes.uint64)))) (and (=> (not (|Set#Equal| |s#0@@249| (|Set#Empty| BoxType))) (|Uint64__Order.__default.minimum#canCall| (Lit |s#0@@249|))) (= (Uint64__Order.__default.minimumOpt ($LS $ly@@663) (Lit |s#0@@249|)) (ite (|Set#Equal| |s#0@@249| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Uint64__Order.__default.minimum StartFuel_Uint64_Order._default.minimum (Lit |s#0@@249|))))))))) :qid |totalord.788:22| :weight 3 :skolemid |2847| :pattern ( (Uint64__Order.__default.minimumOpt ($LS $ly@@663) (Lit |s#0@@249|))) ))))
(assert (forall (($ly@@664 T@U) (|s#0@@250| T@U) ) (!  (=> (and (= (type $ly@@664) LayerTypeType) (= (type |s#0@@250|) (MapType0Type BoxType boolType))) (= (Uint64__Order.__default.maximum ($LS $ly@@664) |s#0@@250|) (Uint64__Order.__default.maximum $ly@@664 |s#0@@250|))) :qid |totalord.796:22| :skolemid |2848| :pattern ( (Uint64__Order.__default.maximum ($LS $ly@@664) |s#0@@250|)) )))
(assert (forall (($ly@@665 T@U) (|s#0@@251| T@U) ) (!  (=> (and (= (type $ly@@665) LayerTypeType) (= (type |s#0@@251|) (MapType0Type BoxType boolType))) (= (Uint64__Order.__default.maximum $ly@@665 |s#0@@251|) (Uint64__Order.__default.maximum $LZ |s#0@@251|))) :qid |totalord.796:22| :skolemid |2849| :pattern ( (Uint64__Order.__default.maximum (AsFuelBottom $ly@@665) |s#0@@251|)) )))
(assert  (=> true (forall (($ly@@666 T@U) (|s#0@@252| T@U) ) (!  (=> (and (and (= (type $ly@@666) LayerTypeType) (= (type |s#0@@252|) (MapType0Type BoxType boolType))) (or (|Uint64__Order.__default.maximum#canCall| |s#0@@252|) (and ($Is |s#0@@252| (TSet Tclass.NativeTypes.uint64)) (>= (|Set#Card| |s#0@@252|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@252| ($Box (int_2_U (Uint64__Order.__default.maximum $ly@@666 |s#0@@252|))))) (forall ((|y#0@@37| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@37|) (< |y#0@@37| 18446744073709551616)) (U_2_bool (MapType0Select |s#0@@252| ($Box (int_2_U |y#0@@37|))))) (Uint64__Order.__default.lte |y#0@@37| (Uint64__Order.__default.maximum $ly@@666 |s#0@@252|))) :qid |totalord.799:18| :skolemid |2850| :pattern ( (Uint64__Order.__default.lte |y#0@@37| (Uint64__Order.__default.maximum $ly@@666 |s#0@@252|))) :pattern ( (MapType0Select |s#0@@252| ($Box (int_2_U |y#0@@37|)))) ))) (and (<= (LitInt 0) (Uint64__Order.__default.maximum $ly@@666 |s#0@@252|)) (< (Uint64__Order.__default.maximum $ly@@666 |s#0@@252|) 18446744073709551616)))) :qid |totalord.796:22| :skolemid |2851| :pattern ( (Uint64__Order.__default.maximum $ly@@666 |s#0@@252|)) ))))
(assert (forall (($ly@@667 T@U) ($Heap@@72 T@U) (|s#0@@253| T@U) ) (!  (=> (and (and (and (= (type $ly@@667) LayerTypeType) (= (type $Heap@@72) (MapType0Type refType MapType1Type))) (= (type |s#0@@253|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@72) ($Is |s#0@@253| (TSet Tclass.NativeTypes.uint64)))) (and (=> (|Uint64__Order.__default.maximum#requires| $ly@@667 |s#0@@253|) (>= (|Set#Card| |s#0@@253|) (LitInt 1))) (=> (>= (|Set#Card| |s#0@@253|) (LitInt 1)) (|Uint64__Order.__default.maximum#requires| $ly@@667 |s#0@@253|)))) :qid |totalord.796:22| :skolemid |2852| :pattern ( (|Uint64__Order.__default.maximum#requires| $ly@@667 |s#0@@253|) ($IsGoodHeap $Heap@@72)) )))
(assert (forall ((s@@53 T@U) ) (!  (=> (and (= (type s@@53) (MapType0Type BoxType boolType)) (|$let#37$canCall| s@@53)) (and (and (<= (LitInt 0) (|$let#37_a| s@@53)) (< (|$let#37_a| s@@53) 18446744073709551616)) (U_2_bool (MapType0Select s@@53 ($Box (int_2_U (|$let#37_a| s@@53))))))) :qid |totalord.801:5| :skolemid |2853| :pattern ( (|$let#37_a| s@@53)) )))
(assert  (=> true (forall (($ly@@668 T@U) ($Heap@@73 T@U) (|s#0@@254| T@U) ) (!  (=> (and (and (and (= (type $ly@@668) LayerTypeType) (= (type $Heap@@73) (MapType0Type refType MapType1Type))) (= (type |s#0@@254|) (MapType0Type BoxType boolType))) (or (|Uint64__Order.__default.maximum#canCall| |s#0@@254|) (and (and ($IsGoodHeap $Heap@@73) ($Is |s#0@@254| (TSet Tclass.NativeTypes.uint64))) (>= (|Set#Card| |s#0@@254|) (LitInt 1))))) (and (and (|$let#37$canCall| |s#0@@254|) (let ((|s'#0@@6| (|Set#Difference| |s#0@@254| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#37_a| |s#0@@254|))))))) (=> (not (|Set#Equal| |s'#0@@6| (|Set#Empty| BoxType))) (and (|Uint64__Order.__default.maximum#canCall| |s'#0@@6|) (let ((|m'#0@@17| (Uint64__Order.__default.maximum $ly@@668 |s'#0@@6|))) (|Uint64__Order.__default.lt#canCall| |m'#0@@17| (|$let#37_a| |s#0@@254|))))))) (= (Uint64__Order.__default.maximum ($LS $ly@@668) |s#0@@254|) (let ((|a#0@@224| (|$let#37_a| |s#0@@254|))) (let ((|s'#1@@6| (|Set#Difference| |s#0@@254| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#0@@224|)))))) (ite (|Set#Equal| |s'#1@@6| (|Set#Empty| BoxType)) |a#0@@224| (let ((|m'#1@@8| (Uint64__Order.__default.maximum $ly@@668 |s'#1@@6|))) (ite (Uint64__Order.__default.lt |m'#1@@8| |a#0@@224|) |a#0@@224| |m'#1@@8|)))))))) :qid |totalord.796:22| :skolemid |2854| :pattern ( (Uint64__Order.__default.maximum ($LS $ly@@668) |s#0@@254|) ($IsGoodHeap $Heap@@73)) ))))
(assert  (=> true (forall (($ly@@669 T@U) ($Heap@@74 T@U) (|s#0@@255| T@U) ) (!  (=> (and (and (and (= (type $ly@@669) LayerTypeType) (= (type $Heap@@74) (MapType0Type refType MapType1Type))) (= (type |s#0@@255|) (MapType0Type BoxType boolType))) (or (|Uint64__Order.__default.maximum#canCall| (Lit |s#0@@255|)) (and (and ($IsGoodHeap $Heap@@74) ($Is |s#0@@255| (TSet Tclass.NativeTypes.uint64))) (>= (|Set#Card| (Lit |s#0@@255|)) (LitInt 1))))) (and (and (|$let#37$canCall| (Lit |s#0@@255|)) (let ((|s'#2@@6| (|Set#Difference| |s#0@@255| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#37_a| (Lit |s#0@@255|)))))))) (=> (not (|Set#Equal| |s'#2@@6| (|Set#Empty| BoxType))) (and (|Uint64__Order.__default.maximum#canCall| |s'#2@@6|) (let ((|m'#2@@7| (Uint64__Order.__default.maximum ($LS $ly@@669) |s'#2@@6|))) (|Uint64__Order.__default.lt#canCall| |m'#2@@7| (|$let#37_a| (Lit |s#0@@255|)))))))) (= (Uint64__Order.__default.maximum ($LS $ly@@669) (Lit |s#0@@255|)) (let ((|a#1@@11| (|$let#37_a| (Lit |s#0@@255|)))) (let ((|s'#3@@6| (|Set#Difference| |s#0@@255| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#1@@11|)))))) (ite (|Set#Equal| |s'#3@@6| (|Set#Empty| BoxType)) |a#1@@11| (let ((|m'#3@@6| (Uint64__Order.__default.maximum ($LS $ly@@669) |s'#3@@6|))) (ite (Uint64__Order.__default.lt |m'#3@@6| |a#1@@11|) |a#1@@11| |m'#3@@6|)))))))) :qid |totalord.796:22| :weight 3 :skolemid |2855| :pattern ( (Uint64__Order.__default.maximum ($LS $ly@@669) (Lit |s#0@@255|)) ($IsGoodHeap $Heap@@74)) ))))
(assert (forall ((arg0@@334 T@U) (arg1@@206 T@U) ) (! (= (type (Uint64__Order.__default.maximumOpt arg0@@334 arg1@@206)) DatatypeTypeType) :qid |funType:Uint64__Order.__default.maximumOpt| :pattern ( (Uint64__Order.__default.maximumOpt arg0@@334 arg1@@206)) )))
(assert (forall (($ly@@670 T@U) (|s#0@@256| T@U) ) (!  (=> (and (= (type $ly@@670) LayerTypeType) (= (type |s#0@@256|) (MapType0Type BoxType boolType))) (= (Uint64__Order.__default.maximumOpt ($LS $ly@@670) |s#0@@256|) (Uint64__Order.__default.maximumOpt $ly@@670 |s#0@@256|))) :qid |totalord.817:22| :skolemid |2856| :pattern ( (Uint64__Order.__default.maximumOpt ($LS $ly@@670) |s#0@@256|)) )))
(assert (forall (($ly@@671 T@U) (|s#0@@257| T@U) ) (!  (=> (and (= (type $ly@@671) LayerTypeType) (= (type |s#0@@257|) (MapType0Type BoxType boolType))) (= (Uint64__Order.__default.maximumOpt $ly@@671 |s#0@@257|) (Uint64__Order.__default.maximumOpt $LZ |s#0@@257|))) :qid |totalord.817:22| :skolemid |2857| :pattern ( (Uint64__Order.__default.maximumOpt (AsFuelBottom $ly@@671) |s#0@@257|)) )))
(assert  (=> true (forall (($ly@@672 T@U) (|s#0@@258| T@U) ) (!  (=> (and (and (= (type $ly@@672) LayerTypeType) (= (type |s#0@@258|) (MapType0Type BoxType boolType))) (or (|Uint64__Order.__default.maximumOpt#canCall| |s#0@@258|) ($Is |s#0@@258| (TSet Tclass.NativeTypes.uint64)))) (and (and (and (=> (Options.Option.Some_q (Uint64__Order.__default.maximumOpt $ly@@672 |s#0@@258|)) (U_2_bool (MapType0Select |s#0@@258| (Options.Option.value (Uint64__Order.__default.maximumOpt $ly@@672 |s#0@@258|))))) (=> (Options.Option.Some_q (Uint64__Order.__default.maximumOpt $ly@@672 |s#0@@258|)) (forall ((|y#0@@38| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@38|) (< |y#0@@38| 18446744073709551616)) (U_2_bool (MapType0Select |s#0@@258| ($Box (int_2_U |y#0@@38|))))) (Uint64__Order.__default.lte |y#0@@38| (U_2_int ($Unbox intType (Options.Option.value (Uint64__Order.__default.maximumOpt $ly@@672 |s#0@@258|)))))) :qid |totalord.819:30| :skolemid |2858| :pattern ( (Uint64__Order.__default.lte |y#0@@38| (U_2_int ($Unbox intType (Options.Option.value (Uint64__Order.__default.maximumOpt $ly@@672 |s#0@@258|)))))) :pattern ( (MapType0Select |s#0@@258| ($Box (int_2_U |y#0@@38|)))) )))) (=> (Options.Option.None_q (Uint64__Order.__default.maximumOpt $ly@@672 |s#0@@258|)) (|Set#Equal| |s#0@@258| (|Set#Empty| BoxType)))) ($Is (Uint64__Order.__default.maximumOpt $ly@@672 |s#0@@258|) (Tclass.Options.Option Tclass.NativeTypes.uint64)))) :qid |totalord.817:22| :skolemid |2859| :pattern ( (Uint64__Order.__default.maximumOpt $ly@@672 |s#0@@258|)) ))))
(assert (forall (($ly@@673 T@U) (|s#0@@259| T@U) ) (!  (=> (and (and (= (type $ly@@673) LayerTypeType) (= (type |s#0@@259|) (MapType0Type BoxType boolType))) ($Is |s#0@@259| (TSet Tclass.NativeTypes.uint64))) (and (=> (|Uint64__Order.__default.maximumOpt#requires| $ly@@673 |s#0@@259|) true) (=> true (|Uint64__Order.__default.maximumOpt#requires| $ly@@673 |s#0@@259|)))) :qid |totalord.817:22| :skolemid |2860| :pattern ( (|Uint64__Order.__default.maximumOpt#requires| $ly@@673 |s#0@@259|)) )))
(assert (= (type StartFuel_Uint64_Order._default.maximum) LayerTypeType))
(assert  (=> true (forall (($ly@@674 T@U) (|s#0@@260| T@U) ) (!  (=> (and (and (= (type $ly@@674) LayerTypeType) (= (type |s#0@@260|) (MapType0Type BoxType boolType))) (or (|Uint64__Order.__default.maximumOpt#canCall| |s#0@@260|) ($Is |s#0@@260| (TSet Tclass.NativeTypes.uint64)))) (and (=> (not (|Set#Equal| |s#0@@260| (|Set#Empty| BoxType))) (|Uint64__Order.__default.maximum#canCall| |s#0@@260|)) (= (Uint64__Order.__default.maximumOpt ($LS $ly@@674) |s#0@@260|) (ite (|Set#Equal| |s#0@@260| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Uint64__Order.__default.maximum StartFuel_Uint64_Order._default.maximum |s#0@@260|)))))))) :qid |totalord.817:22| :skolemid |2861| :pattern ( (Uint64__Order.__default.maximumOpt ($LS $ly@@674) |s#0@@260|)) ))))
(assert  (=> true (forall (($ly@@675 T@U) (|s#0@@261| T@U) ) (!  (=> (and (and (= (type $ly@@675) LayerTypeType) (= (type |s#0@@261|) (MapType0Type BoxType boolType))) (or (|Uint64__Order.__default.maximumOpt#canCall| (Lit |s#0@@261|)) ($Is |s#0@@261| (TSet Tclass.NativeTypes.uint64)))) (and (=> (not (|Set#Equal| |s#0@@261| (|Set#Empty| BoxType))) (|Uint64__Order.__default.maximum#canCall| (Lit |s#0@@261|))) (= (Uint64__Order.__default.maximumOpt ($LS $ly@@675) (Lit |s#0@@261|)) (ite (|Set#Equal| |s#0@@261| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Uint64__Order.__default.maximum StartFuel_Uint64_Order._default.maximum (Lit |s#0@@261|))))))))) :qid |totalord.817:22| :weight 3 :skolemid |2862| :pattern ( (Uint64__Order.__default.maximumOpt ($LS $ly@@675) (Lit |s#0@@261|))) ))))
(assert  (=> true (forall ((|a#0@@225| Int) (|b#0@@185| Int) ) (!  (=> (or (|Uint64__Order.__default.lt#canCall| |a#0@@225| |b#0@@185|) (and (and (<= (LitInt 0) |a#0@@225|) (< |a#0@@225| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@185|) (< |b#0@@185| 18446744073709551616)))) true) :qid |totalord.12:15| :skolemid |2863| :pattern ( (Uint64__Order.__default.lt |a#0@@225| |b#0@@185|)) ))))
(assert (forall ((|a#0@@226| Int) (|b#0@@186| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@226|) (< |a#0@@226| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@186|) (< |b#0@@186| 18446744073709551616))) (and (=> (|Uint64__Order.__default.lt#requires| |a#0@@226| |b#0@@186|) true) (=> true (|Uint64__Order.__default.lt#requires| |a#0@@226| |b#0@@186|)))) :qid |totalord.12:15| :skolemid |2864| :pattern ( (|Uint64__Order.__default.lt#requires| |a#0@@226| |b#0@@186|)) )))
(assert  (=> true (forall ((|a#0@@227| Int) (|b#0@@187| Int) ) (!  (=> (or (|Uint64__Order.__default.lt#canCall| |a#0@@227| |b#0@@187|) (and (and (<= (LitInt 0) |a#0@@227|) (< |a#0@@227| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@187|) (< |b#0@@187| 18446744073709551616)))) (and (|Uint64__Order.__default.lte#canCall| |a#0@@227| |b#0@@187|) (and (=> (Uint64__Order.__default.lt |a#0@@227| |b#0@@187|) (and (Uint64__Order.__default.lte |a#0@@227| |b#0@@187|) (not (= |a#0@@227| |b#0@@187|)))) (=> (and (Uint64__Order.__default.lte |a#0@@227| |b#0@@187|) (not (= |a#0@@227| |b#0@@187|))) (Uint64__Order.__default.lt |a#0@@227| |b#0@@187|))))) :qid |totalord.12:15| :skolemid |2865| :pattern ( (Uint64__Order.__default.lt |a#0@@227| |b#0@@187|)) ))))
(assert  (=> true (forall ((|a#0@@228| Int) (|b#0@@188| Int) ) (!  (=> (or (|Uint64__Order.__default.lt#canCall| (LitInt |a#0@@228|) (LitInt |b#0@@188|)) (and (and (<= (LitInt 0) |a#0@@228|) (< |a#0@@228| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@188|) (< |b#0@@188| 18446744073709551616)))) (and (|Uint64__Order.__default.lte#canCall| (LitInt |a#0@@228|) (LitInt |b#0@@188|)) (and (=> (Uint64__Order.__default.lt (LitInt |a#0@@228|) (LitInt |b#0@@188|)) (U_2_bool (Lit (bool_2_U  (and (Uint64__Order.__default.lte (LitInt |a#0@@228|) (LitInt |b#0@@188|)) (not (= |a#0@@228| |b#0@@188|))))))) (=> (U_2_bool (Lit (bool_2_U  (and (Uint64__Order.__default.lte (LitInt |a#0@@228|) (LitInt |b#0@@188|)) (not (= |a#0@@228| |b#0@@188|)))))) (Uint64__Order.__default.lt (LitInt |a#0@@228|) (LitInt |b#0@@188|)))))) :qid |totalord.12:15| :weight 3 :skolemid |2866| :pattern ( (Uint64__Order.__default.lt (LitInt |a#0@@228|) (LitInt |b#0@@188|))) ))))
(assert  (=> true (forall ((|a#0@@229| Int) (|b#0@@189| Int) ) (!  (=> (or (|Uint64__Order.__default.Min#canCall| |a#0@@229| |b#0@@189|) (and (and (<= (LitInt 0) |a#0@@229|) (< |a#0@@229| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@189|) (< |b#0@@189| 18446744073709551616)))) (and (<= (LitInt 0) (Uint64__Order.__default.Min |a#0@@229| |b#0@@189|)) (< (Uint64__Order.__default.Min |a#0@@229| |b#0@@189|) 18446744073709551616))) :qid |totalord.24:16| :skolemid |2867| :pattern ( (Uint64__Order.__default.Min |a#0@@229| |b#0@@189|)) ))))
(assert (forall ((|a#0@@230| Int) (|b#0@@190| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@230|) (< |a#0@@230| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@190|) (< |b#0@@190| 18446744073709551616))) (and (=> (|Uint64__Order.__default.Min#requires| |a#0@@230| |b#0@@190|) true) (=> true (|Uint64__Order.__default.Min#requires| |a#0@@230| |b#0@@190|)))) :qid |totalord.24:16| :skolemid |2868| :pattern ( (|Uint64__Order.__default.Min#requires| |a#0@@230| |b#0@@190|)) )))
(assert  (=> true (forall ((|a#0@@231| Int) (|b#0@@191| Int) ) (!  (=> (or (|Uint64__Order.__default.Min#canCall| |a#0@@231| |b#0@@191|) (and (and (<= (LitInt 0) |a#0@@231|) (< |a#0@@231| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@191|) (< |b#0@@191| 18446744073709551616)))) (and (|Uint64__Order.__default.lte#canCall| |a#0@@231| |b#0@@191|) (= (Uint64__Order.__default.Min |a#0@@231| |b#0@@191|) (ite (Uint64__Order.__default.lte |a#0@@231| |b#0@@191|) |a#0@@231| |b#0@@191|)))) :qid |totalord.24:16| :skolemid |2869| :pattern ( (Uint64__Order.__default.Min |a#0@@231| |b#0@@191|)) ))))
(assert  (=> true (forall ((|a#0@@232| Int) (|b#0@@192| Int) ) (!  (=> (or (|Uint64__Order.__default.Min#canCall| (LitInt |a#0@@232|) (LitInt |b#0@@192|)) (and (and (<= (LitInt 0) |a#0@@232|) (< |a#0@@232| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@192|) (< |b#0@@192| 18446744073709551616)))) (and (|Uint64__Order.__default.lte#canCall| (LitInt |a#0@@232|) (LitInt |b#0@@192|)) (= (Uint64__Order.__default.Min (LitInt |a#0@@232|) (LitInt |b#0@@192|)) (ite (Uint64__Order.__default.lte (LitInt |a#0@@232|) (LitInt |b#0@@192|)) |a#0@@232| |b#0@@192|)))) :qid |totalord.24:16| :weight 3 :skolemid |2870| :pattern ( (Uint64__Order.__default.Min (LitInt |a#0@@232|) (LitInt |b#0@@192|))) ))))
(assert  (=> true (forall ((|a#0@@233| Int) (|b#0@@193| Int) ) (!  (=> (or (|Uint64__Order.__default.Max#canCall| |a#0@@233| |b#0@@193|) (and (and (<= (LitInt 0) |a#0@@233|) (< |a#0@@233| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@193|) (< |b#0@@193| 18446744073709551616)))) (and (<= (LitInt 0) (Uint64__Order.__default.Max |a#0@@233| |b#0@@193|)) (< (Uint64__Order.__default.Max |a#0@@233| |b#0@@193|) 18446744073709551616))) :qid |totalord.29:16| :skolemid |2871| :pattern ( (Uint64__Order.__default.Max |a#0@@233| |b#0@@193|)) ))))
(assert (forall ((|a#0@@234| Int) (|b#0@@194| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@234|) (< |a#0@@234| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@194|) (< |b#0@@194| 18446744073709551616))) (and (=> (|Uint64__Order.__default.Max#requires| |a#0@@234| |b#0@@194|) true) (=> true (|Uint64__Order.__default.Max#requires| |a#0@@234| |b#0@@194|)))) :qid |totalord.29:16| :skolemid |2872| :pattern ( (|Uint64__Order.__default.Max#requires| |a#0@@234| |b#0@@194|)) )))
(assert  (=> true (forall ((|a#0@@235| Int) (|b#0@@195| Int) ) (!  (=> (or (|Uint64__Order.__default.Max#canCall| |a#0@@235| |b#0@@195|) (and (and (<= (LitInt 0) |a#0@@235|) (< |a#0@@235| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@195|) (< |b#0@@195| 18446744073709551616)))) (and (|Uint64__Order.__default.lte#canCall| |a#0@@235| |b#0@@195|) (= (Uint64__Order.__default.Max |a#0@@235| |b#0@@195|) (ite (Uint64__Order.__default.lte |a#0@@235| |b#0@@195|) |b#0@@195| |a#0@@235|)))) :qid |totalord.29:16| :skolemid |2873| :pattern ( (Uint64__Order.__default.Max |a#0@@235| |b#0@@195|)) ))))
(assert  (=> true (forall ((|a#0@@236| Int) (|b#0@@196| Int) ) (!  (=> (or (|Uint64__Order.__default.Max#canCall| (LitInt |a#0@@236|) (LitInt |b#0@@196|)) (and (and (<= (LitInt 0) |a#0@@236|) (< |a#0@@236| 18446744073709551616)) (and (<= (LitInt 0) |b#0@@196|) (< |b#0@@196| 18446744073709551616)))) (and (|Uint64__Order.__default.lte#canCall| (LitInt |a#0@@236|) (LitInt |b#0@@196|)) (= (Uint64__Order.__default.Max (LitInt |a#0@@236|) (LitInt |b#0@@196|)) (ite (Uint64__Order.__default.lte (LitInt |a#0@@236|) (LitInt |b#0@@196|)) |b#0@@196| |a#0@@236|)))) :qid |totalord.29:16| :weight 3 :skolemid |2874| :pattern ( (Uint64__Order.__default.Max (LitInt |a#0@@236|) (LitInt |b#0@@196|))) ))))
(assert (forall (($ly@@676 T@U) (|run#0@@212| T@U) ) (!  (=> (and (= (type $ly@@676) LayerTypeType) (= (type |run#0@@212|) (SeqType BoxType))) (and (=> (Uint64__Order.__default.IsSorted ($LS $ly@@676) |run#0@@212|) (Uint64__Order.__default.IsSorted $ly@@676 |run#0@@212|)) (=> (Uint64__Order.__default.IsSorted $ly@@676 |run#0@@212|) (Uint64__Order.__default.IsSorted ($LS $ly@@676) |run#0@@212|)))) :qid |totalord.41:23| :skolemid |2875| :pattern ( (Uint64__Order.__default.IsSorted ($LS $ly@@676) |run#0@@212|)) )))
(assert (forall (($ly@@677 T@U) (|run#0@@213| T@U) ) (!  (=> (and (= (type $ly@@677) LayerTypeType) (= (type |run#0@@213|) (SeqType BoxType))) (and (=> (Uint64__Order.__default.IsSorted $ly@@677 |run#0@@213|) (Uint64__Order.__default.IsSorted $LZ |run#0@@213|)) (=> (Uint64__Order.__default.IsSorted $LZ |run#0@@213|) (Uint64__Order.__default.IsSorted $ly@@677 |run#0@@213|)))) :qid |totalord.41:23| :skolemid |2876| :pattern ( (Uint64__Order.__default.IsSorted (AsFuelBottom $ly@@677) |run#0@@213|)) )))
(assert  (=> true (forall (($ly@@678 T@U) (|run#0@@214| T@U) ) (!  (=> (and (and (= (type $ly@@678) LayerTypeType) (= (type |run#0@@214|) (SeqType BoxType))) (or (|Uint64__Order.__default.IsSorted#canCall| |run#0@@214|) ($Is |run#0@@214| (TSeq Tclass.NativeTypes.uint64)))) (and (=> (= (|Seq#Length| |run#0@@214|) (LitInt 0)) (Uint64__Order.__default.IsSorted $ly@@678 |run#0@@214|)) (=> (= (|Seq#Length| |run#0@@214|) (LitInt 1)) (Uint64__Order.__default.IsSorted $ly@@678 |run#0@@214|)))) :qid |totalord.41:23| :skolemid |2877| :pattern ( (Uint64__Order.__default.IsSorted $ly@@678 |run#0@@214|)) ))))
(assert (forall (($ly@@679 T@U) (|run#0@@215| T@U) ) (!  (=> (and (and (= (type $ly@@679) LayerTypeType) (= (type |run#0@@215|) (SeqType BoxType))) ($Is |run#0@@215| (TSeq Tclass.NativeTypes.uint64))) (and (=> (|Uint64__Order.__default.IsSorted#requires| $ly@@679 |run#0@@215|) true) (=> true (|Uint64__Order.__default.IsSorted#requires| $ly@@679 |run#0@@215|)))) :qid |totalord.41:23| :skolemid |2878| :pattern ( (|Uint64__Order.__default.IsSorted#requires| $ly@@679 |run#0@@215|)) )))
(assert  (=> true (forall (($ly@@680 T@U) (|run#0@@216| T@U) ) (!  (=> (and (and (= (type $ly@@680) LayerTypeType) (= (type |run#0@@216|) (SeqType BoxType))) (or (|Uint64__Order.__default.IsSorted#canCall| |run#0@@216|) ($Is |run#0@@216| (TSeq Tclass.NativeTypes.uint64)))) (and (forall ((|i#0@@120| Int) (|j#0@@30| Int) ) (!  (=> (< |j#0@@30| (|Seq#Length| |run#0@@216|)) (|Uint64__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@216| |i#0@@120|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@216| |j#0@@30|))))) :qid |totalord.45:12| :skolemid |2879| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@216| |j#0@@30|)) ($Unbox intType (|Seq#Index| |run#0@@216| |i#0@@120|))) )) (and (=> (Uint64__Order.__default.IsSorted ($LS $ly@@680) |run#0@@216|) (forall ((|i#0@@121| Int) (|j#0@@31| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@121|) (<= |i#0@@121| |j#0@@31|)) (< |j#0@@31| (|Seq#Length| |run#0@@216|))) (Uint64__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@216| |i#0@@121|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@216| |j#0@@31|)))))) :qid |totalord.45:12| :skolemid |2880| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@216| |j#0@@31|)) ($Unbox intType (|Seq#Index| |run#0@@216| |i#0@@121|))) ))) (=> (forall ((|i#0@@122| Int) (|j#0@@32| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@122|) (<= |i#0@@122| |j#0@@32|)) (< |j#0@@32| (|Seq#Length| |run#0@@216|))) (Uint64__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@216| |i#0@@122|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@216| |j#0@@32|)))))) :qid |totalord.45:12| :skolemid |2880| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@216| |j#0@@32|)) ($Unbox intType (|Seq#Index| |run#0@@216| |i#0@@122|))) )) (Uint64__Order.__default.IsSorted ($LS $ly@@680) |run#0@@216|))))) :qid |totalord.41:23| :skolemid |2881| :pattern ( (Uint64__Order.__default.IsSorted ($LS $ly@@680) |run#0@@216|)) ))))
(assert  (=> true (forall (($ly@@681 T@U) (|run#0@@217| T@U) ) (!  (=> (and (and (= (type $ly@@681) LayerTypeType) (= (type |run#0@@217|) (SeqType BoxType))) (or (|Uint64__Order.__default.IsSorted#canCall| (Lit |run#0@@217|)) ($Is |run#0@@217| (TSeq Tclass.NativeTypes.uint64)))) (and (forall ((|i#1@@57| Int) (|j#1@@20| Int) ) (!  (=> (< |j#1@@20| (|Seq#Length| (Lit |run#0@@217|))) (|Uint64__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@217|) |i#1@@57|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@217|) |j#1@@20|))))) :qid |totalord.45:12| :skolemid |2882| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@217| |j#1@@20|)) ($Unbox intType (|Seq#Index| |run#0@@217| |i#1@@57|))) )) (and (=> (Uint64__Order.__default.IsSorted ($LS $ly@@681) (Lit |run#0@@217|)) (forall ((|i#1@@58| Int) (|j#1@@21| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@58|) (<= |i#1@@58| |j#1@@21|)) (< |j#1@@21| (|Seq#Length| (Lit |run#0@@217|)))) (Uint64__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@217|) |i#1@@58|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@217|) |j#1@@21|)))))) :qid |totalord.45:12| :skolemid |2883| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@217| |j#1@@21|)) ($Unbox intType (|Seq#Index| |run#0@@217| |i#1@@58|))) ))) (=> (forall ((|i#1@@59| Int) (|j#1@@22| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@59|) (<= |i#1@@59| |j#1@@22|)) (< |j#1@@22| (|Seq#Length| (Lit |run#0@@217|)))) (Uint64__Order.__default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@217|) |i#1@@59|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@217|) |j#1@@22|)))))) :qid |totalord.45:12| :skolemid |2883| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@217| |j#1@@22|)) ($Unbox intType (|Seq#Index| |run#0@@217| |i#1@@59|))) )) (Uint64__Order.__default.IsSorted ($LS $ly@@681) (Lit |run#0@@217|)))))) :qid |totalord.41:23| :weight 3 :skolemid |2884| :pattern ( (Uint64__Order.__default.IsSorted ($LS $ly@@681) (Lit |run#0@@217|))) ))))
(assert  (=> true (forall ((|run#0@@218| T@U) ) (!  (=> (and (= (type |run#0@@218|) (SeqType BoxType)) (or (|Uint64__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@218|) ($Is |run#0@@218| (TSeq Tclass.NativeTypes.uint64)))) true) :qid |totalord.48:38| :skolemid |2885| :pattern ( (Uint64__Order.__default.IsStrictlySortedInternal |run#0@@218|)) ))))
(assert (forall ((|run#0@@219| T@U) ) (!  (=> (and (= (type |run#0@@219|) (SeqType BoxType)) ($Is |run#0@@219| (TSeq Tclass.NativeTypes.uint64))) (and (=> (|Uint64__Order.__default.IsStrictlySortedInternal#requires| |run#0@@219|) true) (=> true (|Uint64__Order.__default.IsStrictlySortedInternal#requires| |run#0@@219|)))) :qid |totalord.48:38| :skolemid |2886| :pattern ( (|Uint64__Order.__default.IsStrictlySortedInternal#requires| |run#0@@219|)) )))
(assert  (=> true (forall ((|run#0@@220| T@U) ) (!  (=> (and (= (type |run#0@@220|) (SeqType BoxType)) (or (|Uint64__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@220|) ($Is |run#0@@220| (TSeq Tclass.NativeTypes.uint64)))) (and (forall ((|i#0@@123| Int) (|j#0@@33| Int) ) (!  (=> (< |j#0@@33| (|Seq#Length| |run#0@@220|)) (|Uint64__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@220| |i#0@@123|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@220| |j#0@@33|))))) :qid |totalord.50:12| :skolemid |2887| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@220| |j#0@@33|)) ($Unbox intType (|Seq#Index| |run#0@@220| |i#0@@123|))) )) (and (=> (Uint64__Order.__default.IsStrictlySortedInternal |run#0@@220|) (forall ((|i#0@@124| Int) (|j#0@@34| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@124|) (< |i#0@@124| |j#0@@34|)) (< |j#0@@34| (|Seq#Length| |run#0@@220|))) (Uint64__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@220| |i#0@@124|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@220| |j#0@@34|)))))) :qid |totalord.50:12| :skolemid |2888| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@220| |j#0@@34|)) ($Unbox intType (|Seq#Index| |run#0@@220| |i#0@@124|))) ))) (=> (forall ((|i#0@@125| Int) (|j#0@@35| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@125|) (< |i#0@@125| |j#0@@35|)) (< |j#0@@35| (|Seq#Length| |run#0@@220|))) (Uint64__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@220| |i#0@@125|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@220| |j#0@@35|)))))) :qid |totalord.50:12| :skolemid |2888| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@220| |j#0@@35|)) ($Unbox intType (|Seq#Index| |run#0@@220| |i#0@@125|))) )) (Uint64__Order.__default.IsStrictlySortedInternal |run#0@@220|))))) :qid |totalord.48:38| :skolemid |2889| :pattern ( (Uint64__Order.__default.IsStrictlySortedInternal |run#0@@220|)) ))))
(assert  (=> true (forall ((|run#0@@221| T@U) ) (!  (=> (and (= (type |run#0@@221|) (SeqType BoxType)) (or (|Uint64__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@221|)) ($Is |run#0@@221| (TSeq Tclass.NativeTypes.uint64)))) (and (forall ((|i#1@@60| Int) (|j#1@@23| Int) ) (!  (=> (< |j#1@@23| (|Seq#Length| (Lit |run#0@@221|))) (|Uint64__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@221|) |i#1@@60|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@221|) |j#1@@23|))))) :qid |totalord.50:12| :skolemid |2890| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@221| |j#1@@23|)) ($Unbox intType (|Seq#Index| |run#0@@221| |i#1@@60|))) )) (and (=> (Uint64__Order.__default.IsStrictlySortedInternal (Lit |run#0@@221|)) (forall ((|i#1@@61| Int) (|j#1@@24| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@61|) (< |i#1@@61| |j#1@@24|)) (< |j#1@@24| (|Seq#Length| (Lit |run#0@@221|)))) (Uint64__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@221|) |i#1@@61|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@221|) |j#1@@24|)))))) :qid |totalord.50:12| :skolemid |2891| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@221| |j#1@@24|)) ($Unbox intType (|Seq#Index| |run#0@@221| |i#1@@61|))) ))) (=> (forall ((|i#1@@62| Int) (|j#1@@25| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@62|) (< |i#1@@62| |j#1@@25|)) (< |j#1@@25| (|Seq#Length| (Lit |run#0@@221|)))) (Uint64__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@221|) |i#1@@62|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@221|) |j#1@@25|)))))) :qid |totalord.50:12| :skolemid |2891| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@221| |j#1@@25|)) ($Unbox intType (|Seq#Index| |run#0@@221| |i#1@@62|))) )) (Uint64__Order.__default.IsStrictlySortedInternal (Lit |run#0@@221|)))))) :qid |totalord.48:38| :weight 3 :skolemid |2892| :pattern ( (Uint64__Order.__default.IsStrictlySortedInternal (Lit |run#0@@221|))) ))))
(assert (forall (($ly@@682 T@U) (|run#0@@222| T@U) ) (!  (=> (and (= (type $ly@@682) LayerTypeType) (= (type |run#0@@222|) (SeqType BoxType))) (and (=> (Uint64__Order.__default.IsStrictlySorted ($LS $ly@@682) |run#0@@222|) (Uint64__Order.__default.IsStrictlySorted $ly@@682 |run#0@@222|)) (=> (Uint64__Order.__default.IsStrictlySorted $ly@@682 |run#0@@222|) (Uint64__Order.__default.IsStrictlySorted ($LS $ly@@682) |run#0@@222|)))) :qid |totalord.64:23| :skolemid |2893| :pattern ( (Uint64__Order.__default.IsStrictlySorted ($LS $ly@@682) |run#0@@222|)) )))
(assert (forall (($ly@@683 T@U) (|run#0@@223| T@U) ) (!  (=> (and (= (type $ly@@683) LayerTypeType) (= (type |run#0@@223|) (SeqType BoxType))) (and (=> (Uint64__Order.__default.IsStrictlySorted $ly@@683 |run#0@@223|) (Uint64__Order.__default.IsStrictlySorted $LZ |run#0@@223|)) (=> (Uint64__Order.__default.IsStrictlySorted $LZ |run#0@@223|) (Uint64__Order.__default.IsStrictlySorted $ly@@683 |run#0@@223|)))) :qid |totalord.64:23| :skolemid |2894| :pattern ( (Uint64__Order.__default.IsStrictlySorted (AsFuelBottom $ly@@683) |run#0@@223|)) )))
(assert  (=> true (forall (($ly@@684 T@U) (|run#0@@224| T@U) ) (!  (=> (and (and (= (type $ly@@684) LayerTypeType) (= (type |run#0@@224|) (SeqType BoxType))) (or (|Uint64__Order.__default.IsStrictlySorted#canCall| |run#0@@224|) ($Is |run#0@@224| (TSeq Tclass.NativeTypes.uint64)))) (and (and (=> (= (|Seq#Length| |run#0@@224|) (LitInt 0)) (Uint64__Order.__default.IsStrictlySorted $ly@@684 |run#0@@224|)) (=> (= (|Seq#Length| |run#0@@224|) (LitInt 1)) (Uint64__Order.__default.IsStrictlySorted $ly@@684 |run#0@@224|))) (=> (Uint64__Order.__default.IsStrictlySorted $ly@@684 |run#0@@224|) (Uint64__Order.__default.IsSorted StartFuel_Uint64_Order._default.IsSorted |run#0@@224|)))) :qid |totalord.64:23| :skolemid |2895| :pattern ( (Uint64__Order.__default.IsStrictlySorted $ly@@684 |run#0@@224|)) ))))
(assert (forall (($ly@@685 T@U) (|run#0@@225| T@U) ) (!  (=> (and (and (= (type $ly@@685) LayerTypeType) (= (type |run#0@@225|) (SeqType BoxType))) ($Is |run#0@@225| (TSeq Tclass.NativeTypes.uint64))) (and (=> (|Uint64__Order.__default.IsStrictlySorted#requires| $ly@@685 |run#0@@225|) true) (=> true (|Uint64__Order.__default.IsStrictlySorted#requires| $ly@@685 |run#0@@225|)))) :qid |totalord.64:23| :skolemid |2896| :pattern ( (|Uint64__Order.__default.IsStrictlySorted#requires| $ly@@685 |run#0@@225|)) )))
(assert  (=> true (forall (($ly@@686 T@U) (|run#0@@226| T@U) ) (!  (=> (and (and (= (type $ly@@686) LayerTypeType) (= (type |run#0@@226|) (SeqType BoxType))) (or (|Uint64__Order.__default.IsStrictlySorted#canCall| |run#0@@226|) ($Is |run#0@@226| (TSeq Tclass.NativeTypes.uint64)))) (and (|Uint64__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@226|) (and (=> (Uint64__Order.__default.IsStrictlySorted ($LS $ly@@686) |run#0@@226|) (let ((|b#0@@197| (Uint64__Order.__default.IsStrictlySortedInternal |run#0@@226|))) (ite |b#0@@197| |b#0@@197| |b#0@@197|))) (=> (let ((|b#0@@198| (Uint64__Order.__default.IsStrictlySortedInternal |run#0@@226|))) (ite |b#0@@198| |b#0@@198| |b#0@@198|)) (Uint64__Order.__default.IsStrictlySorted ($LS $ly@@686) |run#0@@226|))))) :qid |totalord.64:23| :skolemid |2897| :pattern ( (Uint64__Order.__default.IsStrictlySorted ($LS $ly@@686) |run#0@@226|)) ))))
(assert  (=> true (forall (($ly@@687 T@U) (|run#0@@227| T@U) ) (!  (=> (and (and (= (type $ly@@687) LayerTypeType) (= (type |run#0@@227|) (SeqType BoxType))) (or (|Uint64__Order.__default.IsStrictlySorted#canCall| (Lit |run#0@@227|)) ($Is |run#0@@227| (TSeq Tclass.NativeTypes.uint64)))) (and (|Uint64__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@227|)) (and (=> (Uint64__Order.__default.IsStrictlySorted ($LS $ly@@687) (Lit |run#0@@227|)) (let ((|b#1@@22| (U_2_bool (Lit (bool_2_U (Uint64__Order.__default.IsStrictlySortedInternal (Lit |run#0@@227|))))))) (ite |b#1@@22| |b#1@@22| |b#1@@22|))) (=> (let ((|b#1@@23| (U_2_bool (Lit (bool_2_U (Uint64__Order.__default.IsStrictlySortedInternal (Lit |run#0@@227|))))))) (ite |b#1@@23| |b#1@@23| |b#1@@23|)) (Uint64__Order.__default.IsStrictlySorted ($LS $ly@@687) (Lit |run#0@@227|)))))) :qid |totalord.64:23| :weight 3 :skolemid |2898| :pattern ( (Uint64__Order.__default.IsStrictlySorted ($LS $ly@@687) (Lit |run#0@@227|))) ))))
(assert (forall ((arg0@@335 T@U) (arg1@@207 T@U) ) (! (= (type (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| arg0@@335 arg1@@207)) DatatypeTypeType) :qid |funType:#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| :pattern ( (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| arg0@@335 arg1@@207)) )))
(assert (forall ((|a#0#0#0@@0| T@U) (|a#0#1#0@@0| T@U) ) (!  (=> (and (= (type |a#0#0#0@@0|) (SeqType BoxType)) (= (type |a#0#1#0@@0|) (SeqType BoxType))) (= (DatatypeCtorId (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| |a#0#0#0@@0| |a#0#1#0@@0|)) |##MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf|)) :qid |BtreeMod.18:12| :skolemid |2899| :pattern ( (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| |a#0#0#0@@0| |a#0#1#0@@0|)) )))
(assert (forall ((d@@25 T@U) ) (!  (=> (= (type d@@25) DatatypeTypeType) (and (=> (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q d@@25) (= (DatatypeCtorId d@@25) |##MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf|)) (=> (= (DatatypeCtorId d@@25) |##MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf|) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q d@@25)))) :qid |unknown.0:0| :skolemid |2900| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q d@@25)) )))
(assert (forall ((d@@26 T@U) ) (!  (=> (and (= (type d@@26) DatatypeTypeType) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q d@@26)) (exists ((|a#1#0#0@@0| T@U) (|a#1#1#0@@0| T@U) ) (!  (and (and (= (type |a#1#0#0@@0|) (SeqType BoxType)) (= (type |a#1#1#0@@0|) (SeqType BoxType))) (= d@@26 (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| |a#1#0#0@@0| |a#1#1#0@@0|))) :qid |BtreeMod.18:12| :skolemid |2901| :no-pattern (type |a#1#0#0@@0|) :no-pattern (type |a#1#1#0@@0|) :no-pattern (U_2_int |a#1#0#0@@0|) :no-pattern (U_2_bool |a#1#0#0@@0|) :no-pattern (U_2_int |a#1#1#0@@0|) :no-pattern (U_2_bool |a#1#1#0@@0|) ))) :qid |unknown.0:0| :skolemid |2902| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q d@@26)) )))
(assert (= (type |#$Value|) TyType))
(assert (forall ((|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) ) (!  (=> (and (= (type |a#2#0#0@@0|) (SeqType BoxType)) (= (type |a#2#1#0@@0|) (SeqType BoxType))) (and (=> ($Is (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| |a#2#0#0@@0| |a#2#1#0@@0|) Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (and ($Is |a#2#0#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |a#2#1#0@@0| (TSeq |#$Value|)))) (=> (and ($Is |a#2#0#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |a#2#1#0@@0| (TSeq |#$Value|))) ($Is (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| |a#2#0#0@@0| |a#2#1#0@@0|) Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)))) :qid |BtreeMod.18:12| :skolemid |2903| :pattern ( ($Is (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| |a#2#0#0@@0| |a#2#1#0@@0|) Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) )))
(assert (forall ((|a#3#0#0@@0| T@U) (|a#3#1#0@@0| T@U) ($h@@56 T@U) ) (!  (=> (and (and (and (= (type |a#3#0#0@@0|) (SeqType BoxType)) (= (type |a#3#1#0@@0|) (SeqType BoxType))) (= (type $h@@56) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@56)) (and (=> ($IsAlloc (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| |a#3#0#0@@0| |a#3#1#0@@0|) Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node $h@@56) (and ($IsAlloc |a#3#0#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $h@@56) ($IsAlloc |a#3#1#0@@0| (TSeq |#$Value|) $h@@56))) (=> (and ($IsAlloc |a#3#0#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $h@@56) ($IsAlloc |a#3#1#0@@0| (TSeq |#$Value|) $h@@56)) ($IsAlloc (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| |a#3#0#0@@0| |a#3#1#0@@0|) Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node $h@@56)))) :qid |BtreeMod.18:12| :skolemid |2904| :pattern ( ($IsAlloc (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| |a#3#0#0@@0| |a#3#1#0@@0|) Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node $h@@56)) )))
(assert (forall ((arg0@@336 T@U) ) (! (= (type (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys arg0@@336)) (SeqType BoxType)) :qid |funType:MutableBtreeBulkOperations.MB.Model.Abs.Node.keys| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys arg0@@336)) )))
(assert (forall ((d@@27 T@U) ($h@@57 T@U) ) (!  (=> (and (and (= (type d@@27) DatatypeTypeType) (= (type $h@@57) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@57) (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q d@@27) ($IsAlloc d@@27 Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node $h@@57)))) ($IsAlloc (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys d@@27) (TSeq (TSeq Tclass.NativeTypes.byte)) $h@@57)) :qid |unknown.0:0| :skolemid |2905| :pattern ( ($IsAlloc (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys d@@27) (TSeq (TSeq Tclass.NativeTypes.byte)) $h@@57)) )))
(assert (forall ((arg0@@337 T@U) ) (! (= (type (MutableBtreeBulkOperations.MB.Model.Abs.Node.values arg0@@337)) (SeqType BoxType)) :qid |funType:MutableBtreeBulkOperations.MB.Model.Abs.Node.values| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.Node.values arg0@@337)) )))
(assert (forall ((d@@28 T@U) ($h@@58 T@U) ) (!  (=> (and (and (= (type d@@28) DatatypeTypeType) (= (type $h@@58) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@58) (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q d@@28) ($IsAlloc d@@28 Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node $h@@58)))) ($IsAlloc (MutableBtreeBulkOperations.MB.Model.Abs.Node.values d@@28) (TSeq |#$Value|) $h@@58)) :qid |unknown.0:0| :skolemid |2906| :pattern ( ($IsAlloc (MutableBtreeBulkOperations.MB.Model.Abs.Node.values d@@28) (TSeq |#$Value|) $h@@58)) )))
(assert (forall ((|a#4#0#0@@0| T@U) (|a#4#1#0@@0| T@U) ) (!  (=> (and (= (type |a#4#0#0@@0|) (SeqType BoxType)) (= (type |a#4#1#0@@0|) (SeqType BoxType))) (= (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| (Lit |a#4#0#0@@0|) (Lit |a#4#1#0@@0|)) (Lit (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| |a#4#0#0@@0| |a#4#1#0@@0|)))) :qid |BtreeMod.18:12| :skolemid |2907| :pattern ( (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| (Lit |a#4#0#0@@0|) (Lit |a#4#1#0@@0|))) )))
(assert (forall ((|a#5#0#0@@1| T@U) (|a#5#1#0@@0| T@U) ) (!  (=> (and (= (type |a#5#0#0@@1|) (SeqType BoxType)) (= (type |a#5#1#0@@0|) (SeqType BoxType))) (= (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| |a#5#0#0@@1| |a#5#1#0@@0|)) |a#5#0#0@@1|)) :qid |BtreeMod.18:12| :skolemid |2908| :pattern ( (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| |a#5#0#0@@1| |a#5#1#0@@0|)) )))
(assert (forall ((|a#6#0#0@@1| T@U) (|a#6#1#0@@0| T@U) (i@@31 Int) ) (!  (=> (and (and (= (type |a#6#0#0@@1|) (SeqType BoxType)) (= (type |a#6#1#0@@0|) (SeqType BoxType))) (and (<= 0 i@@31) (< i@@31 (|Seq#Length| |a#6#0#0@@1|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#6#0#0@@1| i@@31))) (DtRank (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| |a#6#0#0@@1| |a#6#1#0@@0|)))) :qid |BtreeMod.18:12| :skolemid |2909| :pattern ( (|Seq#Index| |a#6#0#0@@1| i@@31) (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| |a#6#0#0@@1| |a#6#1#0@@0|)) )))
(assert (forall ((|a#7#0#0@@1| T@U) (|a#7#1#0@@0| T@U) ) (!  (=> (and (= (type |a#7#0#0@@1|) (SeqType BoxType)) (= (type |a#7#1#0@@0|) (SeqType BoxType))) (< (|Seq#Rank| |a#7#0#0@@1|) (DtRank (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| |a#7#0#0@@1| |a#7#1#0@@0|)))) :qid |BtreeMod.18:12| :skolemid |2910| :pattern ( (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| |a#7#0#0@@1| |a#7#1#0@@0|)) )))
(assert (forall ((|a#8#0#0@@1| T@U) (|a#8#1#0@@0| T@U) ) (!  (=> (and (= (type |a#8#0#0@@1|) (SeqType BoxType)) (= (type |a#8#1#0@@0|) (SeqType BoxType))) (= (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| |a#8#0#0@@1| |a#8#1#0@@0|)) |a#8#1#0@@0|)) :qid |BtreeMod.18:12| :skolemid |2911| :pattern ( (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| |a#8#0#0@@1| |a#8#1#0@@0|)) )))
(assert (forall ((|a#9#0#0@@1| T@U) (|a#9#1#0@@0| T@U) (i@@32 Int) ) (!  (=> (and (and (= (type |a#9#0#0@@1|) (SeqType BoxType)) (= (type |a#9#1#0@@0|) (SeqType BoxType))) (and (<= 0 i@@32) (< i@@32 (|Seq#Length| |a#9#1#0@@0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#9#1#0@@0| i@@32))) (DtRank (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| |a#9#0#0@@1| |a#9#1#0@@0|)))) :qid |BtreeMod.18:12| :skolemid |2912| :pattern ( (|Seq#Index| |a#9#1#0@@0| i@@32) (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| |a#9#0#0@@1| |a#9#1#0@@0|)) )))
(assert (forall ((|a#10#0#0@@1| T@U) (|a#10#1#0@@0| T@U) ) (!  (=> (and (= (type |a#10#0#0@@1|) (SeqType BoxType)) (= (type |a#10#1#0@@0|) (SeqType BoxType))) (< (|Seq#Rank| |a#10#1#0@@0|) (DtRank (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| |a#10#0#0@@1| |a#10#1#0@@0|)))) :qid |BtreeMod.18:12| :skolemid |2913| :pattern ( (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| |a#10#0#0@@1| |a#10#1#0@@0|)) )))
(assert (forall ((arg0@@338 T@U) (arg1@@208 T@U) ) (! (= (type (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| arg0@@338 arg1@@208)) DatatypeTypeType) :qid |funType:#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| :pattern ( (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| arg0@@338 arg1@@208)) )))
(assert (forall ((|a#11#0#0@@1| T@U) (|a#11#1#0@@0| T@U) ) (!  (=> (and (= (type |a#11#0#0@@1|) (SeqType BoxType)) (= (type |a#11#1#0@@0|) (SeqType BoxType))) (= (DatatypeCtorId (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |a#11#0#0@@1| |a#11#1#0@@0|)) |##MutableBtreeBulkOperations.MB.Model.Abs.Node.Index|)) :qid |BtreeMod.19:13| :skolemid |2914| :pattern ( (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |a#11#0#0@@1| |a#11#1#0@@0|)) )))
(assert (forall ((d@@29 T@U) ) (!  (=> (= (type d@@29) DatatypeTypeType) (and (=> (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q d@@29) (= (DatatypeCtorId d@@29) |##MutableBtreeBulkOperations.MB.Model.Abs.Node.Index|)) (=> (= (DatatypeCtorId d@@29) |##MutableBtreeBulkOperations.MB.Model.Abs.Node.Index|) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q d@@29)))) :qid |unknown.0:0| :skolemid |2915| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q d@@29)) )))
(assert (forall ((d@@30 T@U) ) (!  (=> (and (= (type d@@30) DatatypeTypeType) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q d@@30)) (exists ((|a#12#0#0@@0| T@U) (|a#12#1#0@@0| T@U) ) (!  (and (and (= (type |a#12#0#0@@0|) (SeqType BoxType)) (= (type |a#12#1#0@@0|) (SeqType BoxType))) (= d@@30 (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |a#12#0#0@@0| |a#12#1#0@@0|))) :qid |BtreeMod.19:13| :skolemid |2916| :no-pattern (type |a#12#0#0@@0|) :no-pattern (type |a#12#1#0@@0|) :no-pattern (U_2_int |a#12#0#0@@0|) :no-pattern (U_2_bool |a#12#0#0@@0|) :no-pattern (U_2_int |a#12#1#0@@0|) :no-pattern (U_2_bool |a#12#1#0@@0|) ))) :qid |unknown.0:0| :skolemid |2917| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q d@@30)) )))
(assert (forall ((|a#13#0#0@@0| T@U) (|a#13#1#0@@0| T@U) ) (!  (=> (and (= (type |a#13#0#0@@0|) (SeqType BoxType)) (= (type |a#13#1#0@@0|) (SeqType BoxType))) (and (=> ($Is (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |a#13#0#0@@0| |a#13#1#0@@0|) Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (and ($Is |a#13#0#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |a#13#1#0@@0| (TSeq Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)))) (=> (and ($Is |a#13#0#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |a#13#1#0@@0| (TSeq Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node))) ($Is (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |a#13#0#0@@0| |a#13#1#0@@0|) Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)))) :qid |BtreeMod.19:13| :skolemid |2918| :pattern ( ($Is (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |a#13#0#0@@0| |a#13#1#0@@0|) Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) )))
(assert (forall ((|a#14#0#0@@0| T@U) (|a#14#1#0@@0| T@U) ($h@@59 T@U) ) (!  (=> (and (and (and (= (type |a#14#0#0@@0|) (SeqType BoxType)) (= (type |a#14#1#0@@0|) (SeqType BoxType))) (= (type $h@@59) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@59)) (and (=> ($IsAlloc (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |a#14#0#0@@0| |a#14#1#0@@0|) Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node $h@@59) (and ($IsAlloc |a#14#0#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $h@@59) ($IsAlloc |a#14#1#0@@0| (TSeq Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) $h@@59))) (=> (and ($IsAlloc |a#14#0#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $h@@59) ($IsAlloc |a#14#1#0@@0| (TSeq Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) $h@@59)) ($IsAlloc (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |a#14#0#0@@0| |a#14#1#0@@0|) Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node $h@@59)))) :qid |BtreeMod.19:13| :skolemid |2919| :pattern ( ($IsAlloc (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |a#14#0#0@@0| |a#14#1#0@@0|) Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node $h@@59)) )))
(assert (forall ((arg0@@339 T@U) ) (! (= (type (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots arg0@@339)) (SeqType BoxType)) :qid |funType:MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots arg0@@339)) )))
(assert (forall ((d@@31 T@U) ($h@@60 T@U) ) (!  (=> (and (and (= (type d@@31) DatatypeTypeType) (= (type $h@@60) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@60) (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q d@@31) ($IsAlloc d@@31 Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node $h@@60)))) ($IsAlloc (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots d@@31) (TSeq (TSeq Tclass.NativeTypes.byte)) $h@@60)) :qid |unknown.0:0| :skolemid |2920| :pattern ( ($IsAlloc (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots d@@31) (TSeq (TSeq Tclass.NativeTypes.byte)) $h@@60)) )))
(assert (forall ((arg0@@340 T@U) ) (! (= (type (MutableBtreeBulkOperations.MB.Model.Abs.Node.children arg0@@340)) (SeqType BoxType)) :qid |funType:MutableBtreeBulkOperations.MB.Model.Abs.Node.children| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.Node.children arg0@@340)) )))
(assert (forall ((d@@32 T@U) ($h@@61 T@U) ) (!  (=> (and (and (= (type d@@32) DatatypeTypeType) (= (type $h@@61) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@61) (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q d@@32) ($IsAlloc d@@32 Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node $h@@61)))) ($IsAlloc (MutableBtreeBulkOperations.MB.Model.Abs.Node.children d@@32) (TSeq Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) $h@@61)) :qid |unknown.0:0| :skolemid |2921| :pattern ( ($IsAlloc (MutableBtreeBulkOperations.MB.Model.Abs.Node.children d@@32) (TSeq Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) $h@@61)) )))
(assert (forall ((|a#15#0#0@@0| T@U) (|a#15#1#0@@0| T@U) ) (!  (=> (and (= (type |a#15#0#0@@0|) (SeqType BoxType)) (= (type |a#15#1#0@@0|) (SeqType BoxType))) (= (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| (Lit |a#15#0#0@@0|) (Lit |a#15#1#0@@0|)) (Lit (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |a#15#0#0@@0| |a#15#1#0@@0|)))) :qid |BtreeMod.19:13| :skolemid |2922| :pattern ( (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| (Lit |a#15#0#0@@0|) (Lit |a#15#1#0@@0|))) )))
(assert (forall ((|a#16#0#0@@0| T@U) (|a#16#1#0@@0| T@U) ) (!  (=> (and (= (type |a#16#0#0@@0|) (SeqType BoxType)) (= (type |a#16#1#0@@0|) (SeqType BoxType))) (= (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |a#16#0#0@@0| |a#16#1#0@@0|)) |a#16#0#0@@0|)) :qid |BtreeMod.19:13| :skolemid |2923| :pattern ( (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |a#16#0#0@@0| |a#16#1#0@@0|)) )))
(assert (forall ((|a#17#0#0@@0| T@U) (|a#17#1#0@@0| T@U) (i@@33 Int) ) (!  (=> (and (and (= (type |a#17#0#0@@0|) (SeqType BoxType)) (= (type |a#17#1#0@@0|) (SeqType BoxType))) (and (<= 0 i@@33) (< i@@33 (|Seq#Length| |a#17#0#0@@0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#17#0#0@@0| i@@33))) (DtRank (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |a#17#0#0@@0| |a#17#1#0@@0|)))) :qid |BtreeMod.19:13| :skolemid |2924| :pattern ( (|Seq#Index| |a#17#0#0@@0| i@@33) (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |a#17#0#0@@0| |a#17#1#0@@0|)) )))
(assert (forall ((|a#18#0#0@@0| T@U) (|a#18#1#0@@0| T@U) ) (!  (=> (and (= (type |a#18#0#0@@0|) (SeqType BoxType)) (= (type |a#18#1#0@@0|) (SeqType BoxType))) (< (|Seq#Rank| |a#18#0#0@@0|) (DtRank (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |a#18#0#0@@0| |a#18#1#0@@0|)))) :qid |BtreeMod.19:13| :skolemid |2925| :pattern ( (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |a#18#0#0@@0| |a#18#1#0@@0|)) )))
(assert (forall ((|a#19#0#0@@0| T@U) (|a#19#1#0@@0| T@U) ) (!  (=> (and (= (type |a#19#0#0@@0|) (SeqType BoxType)) (= (type |a#19#1#0@@0|) (SeqType BoxType))) (= (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |a#19#0#0@@0| |a#19#1#0@@0|)) |a#19#1#0@@0|)) :qid |BtreeMod.19:13| :skolemid |2926| :pattern ( (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |a#19#0#0@@0| |a#19#1#0@@0|)) )))
(assert (forall ((|a#20#0#0@@0| T@U) (|a#20#1#0@@0| T@U) (i@@34 Int) ) (!  (=> (and (and (= (type |a#20#0#0@@0|) (SeqType BoxType)) (= (type |a#20#1#0@@0|) (SeqType BoxType))) (and (<= 0 i@@34) (< i@@34 (|Seq#Length| |a#20#1#0@@0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#20#1#0@@0| i@@34))) (DtRank (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |a#20#0#0@@0| |a#20#1#0@@0|)))) :qid |BtreeMod.19:13| :skolemid |2927| :pattern ( (|Seq#Index| |a#20#1#0@@0| i@@34) (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |a#20#0#0@@0| |a#20#1#0@@0|)) )))
(assert (forall ((|a#21#0#0@@0| T@U) (|a#21#1#0@@0| T@U) ) (!  (=> (and (= (type |a#21#0#0@@0|) (SeqType BoxType)) (= (type |a#21#1#0@@0|) (SeqType BoxType))) (< (|Seq#Rank| |a#21#1#0@@0|) (DtRank (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |a#21#0#0@@0| |a#21#1#0@@0|)))) :qid |BtreeMod.19:13| :skolemid |2928| :pattern ( (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |a#21#0#0@@0| |a#21#1#0@@0|)) )))
(assert (forall ((d@@33 T@U) ) (!  (=> (and (= (type d@@33) DatatypeTypeType) (|$IsA#MutableBtreeBulkOperations.MB.Model.Abs.Node| d@@33)) (or (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q d@@33) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q d@@33))) :qid |unknown.0:0| :skolemid |2929| :pattern ( (|$IsA#MutableBtreeBulkOperations.MB.Model.Abs.Node| d@@33)) )))
(assert (forall ((d@@34 T@U) ) (!  (=> (and (= (type d@@34) DatatypeTypeType) ($Is d@@34 Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) (or (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q d@@34) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q d@@34))) :qid |unknown.0:0| :skolemid |2930| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q d@@34) ($Is d@@34 Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q d@@34) ($Is d@@34 Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) )))
(assert (forall ((a@@121 T@U) (b@@70 T@U) ) (!  (=> (and (and (= (type a@@121) DatatypeTypeType) (= (type b@@70) DatatypeTypeType)) (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q a@@121) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q b@@70))) (and (=> (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| a@@121 b@@70) (and (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys a@@121) (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys b@@70)) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values a@@121) (MutableBtreeBulkOperations.MB.Model.Abs.Node.values b@@70)))) (=> (and (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys a@@121) (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys b@@70)) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values a@@121) (MutableBtreeBulkOperations.MB.Model.Abs.Node.values b@@70))) (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| a@@121 b@@70)))) :qid |unknown.0:0| :skolemid |2931| :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| a@@121 b@@70) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q a@@121)) :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| a@@121 b@@70) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q b@@70)) )))
(assert (forall ((a@@122 T@U) (b@@71 T@U) ) (!  (=> (and (and (= (type a@@122) DatatypeTypeType) (= (type b@@71) DatatypeTypeType)) (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q a@@122) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q b@@71))) (and (=> (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| a@@122 b@@71) (and (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots a@@122) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots b@@71)) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children a@@122) (MutableBtreeBulkOperations.MB.Model.Abs.Node.children b@@71)))) (=> (and (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots a@@122) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots b@@71)) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children a@@122) (MutableBtreeBulkOperations.MB.Model.Abs.Node.children b@@71))) (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| a@@122 b@@71)))) :qid |unknown.0:0| :skolemid |2932| :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| a@@122 b@@71) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q a@@122)) :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| a@@122 b@@71) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q b@@71)) )))
(assert (forall ((a@@123 T@U) (b@@72 T@U) ) (!  (=> (and (= (type a@@123) DatatypeTypeType) (= (type b@@72) DatatypeTypeType)) (and (=> (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| a@@123 b@@72) (= a@@123 b@@72)) (=> (= a@@123 b@@72) (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| a@@123 b@@72)))) :qid |unknown.0:0| :skolemid |2933| :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| a@@123 b@@72)) )))
(assert (= (type Tclass.MutableBtreeBulkOperations.MB.Model.Abs.__default) TyType))
(assert (= (Tag Tclass.MutableBtreeBulkOperations.MB.Model.Abs.__default) Tagclass.MutableBtreeBulkOperations.MB.Model.Abs.__default))
(assert (forall ((bx@@107 T@U) ) (!  (=> (and (= (type bx@@107) BoxType) ($IsBox bx@@107 Tclass.MutableBtreeBulkOperations.MB.Model.Abs.__default)) (and (= ($Box ($Unbox refType bx@@107)) bx@@107) ($Is ($Unbox refType bx@@107) Tclass.MutableBtreeBulkOperations.MB.Model.Abs.__default))) :qid |unknown.0:0| :skolemid |2934| :pattern ( ($IsBox bx@@107 Tclass.MutableBtreeBulkOperations.MB.Model.Abs.__default)) )))
(assert (forall (($o@@43 T@U) ) (!  (=> (= (type $o@@43) refType) (and (=> ($Is $o@@43 Tclass.MutableBtreeBulkOperations.MB.Model.Abs.__default) (or (= $o@@43 null) (= (dtype $o@@43) Tclass.MutableBtreeBulkOperations.MB.Model.Abs.__default))) (=> (or (= $o@@43 null) (= (dtype $o@@43) Tclass.MutableBtreeBulkOperations.MB.Model.Abs.__default)) ($Is $o@@43 Tclass.MutableBtreeBulkOperations.MB.Model.Abs.__default)))) :qid |unknown.0:0| :skolemid |2935| :pattern ( ($Is $o@@43 Tclass.MutableBtreeBulkOperations.MB.Model.Abs.__default)) )))
(assert (forall (($o@@44 T@U) ($h@@62 T@U) ) (!  (=> (and (= (type $o@@44) refType) (= (type $h@@62) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@44 Tclass.MutableBtreeBulkOperations.MB.Model.Abs.__default $h@@62) (or (= $o@@44 null) (U_2_bool (MapType1Select (MapType0Select $h@@62 $o@@44) alloc)))) (=> (or (= $o@@44 null) (U_2_bool (MapType1Select (MapType0Select $h@@62 $o@@44) alloc))) ($IsAlloc $o@@44 Tclass.MutableBtreeBulkOperations.MB.Model.Abs.__default $h@@62)))) :qid |unknown.0:0| :skolemid |2936| :pattern ( ($IsAlloc $o@@44 Tclass.MutableBtreeBulkOperations.MB.Model.Abs.__default $h@@62)) )))
(assert (forall ((arg0@@341 T@U) (arg1@@209 T@U) ) (! (= (type (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys arg0@@341 arg1@@209)) (MapType0Type BoxType boolType)) :qid |funType:MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys arg0@@341 arg1@@209)) )))
(assert (forall (($ly@@688 T@U) (|node#0@@3| T@U) ) (!  (=> (and (= (type $ly@@688) LayerTypeType) (= (type |node#0@@3|) DatatypeTypeType)) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys ($LS $ly@@688) |node#0@@3|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys $ly@@688 |node#0@@3|))) :qid |BtreeMod.21:22| :skolemid |2937| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys ($LS $ly@@688) |node#0@@3|)) )))
(assert (forall (($ly@@689 T@U) (|node#0@@4| T@U) ) (!  (=> (and (= (type $ly@@689) LayerTypeType) (= (type |node#0@@4|) DatatypeTypeType)) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys $ly@@689 |node#0@@4|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys $LZ |node#0@@4|))) :qid |BtreeMod.21:22| :skolemid |2938| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys (AsFuelBottom $ly@@689) |node#0@@4|)) )))
(assert  (=> true (forall (($ly@@690 T@U) (|node#0@@5| T@U) ) (!  (=> (and (and (= (type $ly@@690) LayerTypeType) (= (type |node#0@@5|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#canCall| |node#0@@5|) ($Is |node#0@@5| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node))) (and (and (=> (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |node#0@@5|) (< 0 (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |node#0@@5|)))) (not (|Set#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys $ly@@690 |node#0@@5|) (|Set#Empty| BoxType)))) (=> (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |node#0@@5|) (< 0 (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@5|)))) (not (|Set#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys $ly@@690 |node#0@@5|) (|Set#Empty| BoxType))))) ($Is (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys $ly@@690 |node#0@@5|) (TSet (TSeq Tclass.NativeTypes.byte))))) :qid |BtreeMod.21:22| :skolemid |2939| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys $ly@@690 |node#0@@5|)) ))))
(assert (forall (($ly@@691 T@U) (|node#0@@6| T@U) ) (!  (=> (and (and (= (type $ly@@691) LayerTypeType) (= (type |node#0@@6|) DatatypeTypeType)) ($Is |node#0@@6| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) (and (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#requires| $ly@@691 |node#0@@6|) true) (=> true (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#requires| $ly@@691 |node#0@@6|)))) :qid |BtreeMod.21:22| :skolemid |2940| :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#requires| $ly@@691 |node#0@@6|)) )))
(assert (forall ((arg0@@342 T@U) (arg1@@210 Int) (arg2@@126 Int) (arg3@@87 T@U) (arg4@@58 T@U) (arg5@@22 T@U) (arg6@@6 T@U) ) (! (= (type (|lambda#142| arg0@@342 arg1@@210 arg2@@126 arg3@@87 arg4@@58 arg5@@22 arg6@@6)) (MapType0Type BoxType boolType)) :qid |funType:lambda#142| :pattern ( (|lambda#142| arg0@@342 arg1@@210 arg2@@126 arg3@@87 arg4@@58 arg5@@22 arg6@@6)) )))
(assert  (=> true (forall (($ly@@692 T@U) (|node#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@692) LayerTypeType) (= (type |node#0@@7|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#canCall| |node#0@@7|) ($Is |node#0@@7| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node))) (and (=> (not (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |node#0@@7|)) (let ((|children#0| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@7|))) (forall ((|i#0@@126| Int) (|k#2@@10| T@U) ) (!  (=> (and (and (= (type |k#2@@10|) (SeqType BoxType)) ($Is |k#2@@10| (TSeq Tclass.NativeTypes.byte))) (< |i#0@@126| (|Seq#Length| |children#0|))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |children#0| |i#0@@126|)))) :qid |BtreeMod.37:14| :skolemid |2941| :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys $ly@@692 ($Unbox DatatypeTypeType (|Seq#Index| |children#0| |i#0@@126|))) ($Box |k#2@@10|))) )))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys ($LS $ly@@692) |node#0@@7|) (ite (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |node#0@@7|) (let ((|keys#1| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |node#0@@7|))) (let ((|result#2| (|lambda#88| (TSeq Tclass.NativeTypes.byte) |keys#1|))) (ite (< 0 (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |node#0@@7|))) |result#2| |result#2|))) (let ((|children#1| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@7|))) (let ((|pivots#1| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@7|))) (let ((|result#3| (|Set#Union| (|lambda#88| (TSeq Tclass.NativeTypes.byte) |pivots#1|) (|lambda#142| (TSeq Tclass.NativeTypes.byte) (LitInt 0) (|Seq#Length| |children#1|) $ly@@692 |children#1| $ly@@692 |children#1|)))) (ite (< 0 (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@7|))) |result#3| |result#3|)))))))) :qid |BtreeMod.21:22| :skolemid |2944| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys ($LS $ly@@692) |node#0@@7|)) ))))
(assert  (=> true (forall (($ly@@693 T@U) (|node#0@@8| T@U) ) (!  (=> (and (and (= (type $ly@@693) LayerTypeType) (= (type |node#0@@8|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#canCall| (Lit |node#0@@8|)) ($Is |node#0@@8| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node))) (and (=> (not (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |node#0@@8|)))))) (let ((|children#2| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@8|))))) (forall ((|i#2@@25| Int) (|k#6| T@U) ) (!  (=> (and (and (= (type |k#6|) (SeqType BoxType)) ($Is |k#6| (TSeq Tclass.NativeTypes.byte))) (< |i#2@@25| (|Seq#Length| |children#2|))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |children#2| |i#2@@25|)))) :qid |BtreeMod.37:14| :skolemid |2945| :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys ($LS $ly@@693) ($Unbox DatatypeTypeType (|Seq#Index| |children#2| |i#2@@25|))) ($Box |k#6|))) )))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys ($LS $ly@@693) (Lit |node#0@@8|)) (ite (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |node#0@@8|)) (let ((|keys#3| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |node#0@@8|))))) (let ((|result#6| (|lambda#88| (TSeq Tclass.NativeTypes.byte) |keys#3|))) (ite (< 0 (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |node#0@@8|))))) |result#6| |result#6|))) (let ((|children#3| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@8|))))) (let ((|pivots#3| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@8|))))) (let ((|result#7| (|Set#Union| (|lambda#88| (TSeq Tclass.NativeTypes.byte) |pivots#3|) (|lambda#142| (TSeq Tclass.NativeTypes.byte) (LitInt 0) (|Seq#Length| |children#3|) ($LS $ly@@693) |children#3| ($LS $ly@@693) |children#3|)))) (ite (< 0 (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@8|))))) |result#7| |result#7|)))))))) :qid |BtreeMod.21:22| :weight 3 :skolemid |2948| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys ($LS $ly@@693) (Lit |node#0@@8|))) ))))
(assert  (=> true (forall ((|node#0@@9| T@U) (|i#0@@127| Int) ) (!  (=> (and (= (type |node#0@@9|) DatatypeTypeType) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound#canCall| |node#0@@9| |i#0@@127|) (and ($Is |node#0@@9| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |node#0@@9|) (and (<= (LitInt 0) |i#0@@127|) (< |i#0@@127| (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@9|)) 1)))) (and (<= (LitInt 0) |i#0@@127|) (< |i#0@@127| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@9|)))))))) true) :qid |BtreeMod.46:31| :skolemid |2949| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound |node#0@@9| |i#0@@127|)) ))))
(assert (forall ((|node#0@@10| T@U) (|i#0@@128| Int) ) (!  (=> (and (= (type |node#0@@10|) DatatypeTypeType) ($Is |node#0@@10| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) (and (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound#requires| |node#0@@10| |i#0@@128|) (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |node#0@@10|) (and (<= (LitInt 0) |i#0@@128|) (< |i#0@@128| (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@10|)) 1)))) (and (<= (LitInt 0) |i#0@@128|) (< |i#0@@128| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@10|)))))) (=> (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |node#0@@10|) (and (<= (LitInt 0) |i#0@@128|) (< |i#0@@128| (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@10|)) 1)))) (and (<= (LitInt 0) |i#0@@128|) (< |i#0@@128| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@10|))))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound#requires| |node#0@@10| |i#0@@128|)))) :qid |BtreeMod.46:31| :skolemid |2950| :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound#requires| |node#0@@10| |i#0@@128|)) )))
(assert (= (type StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys) LayerTypeType))
(assert  (=> true (forall ((|node#0@@11| T@U) (|i#0@@129| Int) ) (!  (=> (and (= (type |node#0@@11|) DatatypeTypeType) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound#canCall| |node#0@@11| |i#0@@129|) (and ($Is |node#0@@11| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |node#0@@11|) (and (<= (LitInt 0) |i#0@@129|) (< |i#0@@129| (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@11|)) 1)))) (and (<= (LitInt 0) |i#0@@129|) (< |i#0@@129| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@11|)))))))) (and (forall ((|key#0@@178| T@U) ) (!  (=> (and (= (type |key#0@@178|) (SeqType BoxType)) ($Is |key#0@@178| (TSeq Tclass.NativeTypes.byte))) (and (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@11|) |i#0@@129|))) (=> (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@11|) |i#0@@129|))) ($Box |key#0@@178|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@178| ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@11|) |i#0@@129|)))))) :qid |BtreeMod.51:12| :skolemid |2951| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@178| ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@11|) |i#0@@129|)))) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@11|) |i#0@@129|))) ($Box |key#0@@178|))) )) (and (=> (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound |node#0@@11| |i#0@@129|) (forall ((|key#0@@179| T@U) ) (!  (=> (and (and (= (type |key#0@@179|) (SeqType BoxType)) ($Is |key#0@@179| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@11|) |i#0@@129|))) ($Box |key#0@@179|)))) (Lexicographic__Byte__Order.__default.lt |key#0@@179| ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@11|) |i#0@@129|)))) :qid |BtreeMod.51:12| :skolemid |2952| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@179| ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@11|) |i#0@@129|)))) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@11|) |i#0@@129|))) ($Box |key#0@@179|))) ))) (=> (forall ((|key#0@@180| T@U) ) (!  (=> (and (and (= (type |key#0@@180|) (SeqType BoxType)) ($Is |key#0@@180| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@11|) |i#0@@129|))) ($Box |key#0@@180|)))) (Lexicographic__Byte__Order.__default.lt |key#0@@180| ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@11|) |i#0@@129|)))) :qid |BtreeMod.51:12| :skolemid |2952| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@180| ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@11|) |i#0@@129|)))) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@11|) |i#0@@129|))) ($Box |key#0@@180|))) )) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound |node#0@@11| |i#0@@129|))))) :qid |BtreeMod.46:31| :skolemid |2953| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound |node#0@@11| |i#0@@129|)) ))))
(assert  (=> true (forall ((|node#0@@12| T@U) (|i#0@@130| Int) ) (!  (=> (and (= (type |node#0@@12|) DatatypeTypeType) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound#canCall| (Lit |node#0@@12|) (LitInt |i#0@@130|)) (and ($Is |node#0@@12| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (and (and (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (Lit |node#0@@12|))))) (and (<= (LitInt 0) (LitInt |i#0@@130|)) (< |i#0@@130| (- (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@12|)))) 1)))) (and (<= (LitInt 0) (LitInt |i#0@@130|)) (< |i#0@@130| (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@12|)))))))))) (and (forall ((|key#1@@17| T@U) ) (!  (=> (and (= (type |key#1@@17|) (SeqType BoxType)) ($Is |key#1@@17| (TSeq Tclass.NativeTypes.byte))) (and (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@12|))) (LitInt |i#0@@130|)))) (=> (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@12|))) (LitInt |i#0@@130|)))) ($Box |key#1@@17|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#1@@17| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@12|))) (LitInt |i#0@@130|))))))) :qid |BtreeMod.51:12| :skolemid |2954| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#1@@17| ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@12|) |i#0@@130|)))) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@12|) |i#0@@130|))) ($Box |key#1@@17|))) )) (and (=> (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound (Lit |node#0@@12|) (LitInt |i#0@@130|)) (forall ((|key#1@@18| T@U) ) (!  (=> (and (and (= (type |key#1@@18|) (SeqType BoxType)) ($Is |key#1@@18| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@12|))) (LitInt |i#0@@130|)))) ($Box |key#1@@18|)))) (Lexicographic__Byte__Order.__default.lt |key#1@@18| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@12|))) (LitInt |i#0@@130|))))) :qid |BtreeMod.51:12| :skolemid |2955| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#1@@18| ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@12|) |i#0@@130|)))) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@12|) |i#0@@130|))) ($Box |key#1@@18|))) ))) (=> (forall ((|key#1@@19| T@U) ) (!  (=> (and (and (= (type |key#1@@19|) (SeqType BoxType)) ($Is |key#1@@19| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@12|))) (LitInt |i#0@@130|)))) ($Box |key#1@@19|)))) (Lexicographic__Byte__Order.__default.lt |key#1@@19| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@12|))) (LitInt |i#0@@130|))))) :qid |BtreeMod.51:12| :skolemid |2955| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#1@@19| ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@12|) |i#0@@130|)))) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@12|) |i#0@@130|))) ($Box |key#1@@19|))) )) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound (Lit |node#0@@12|) (LitInt |i#0@@130|)))))) :qid |BtreeMod.46:31| :weight 3 :skolemid |2956| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound (Lit |node#0@@12|) (LitInt |i#0@@130|))) ))))
(assert  (=> true (forall ((|node#0@@13| T@U) (|i#0@@131| Int) ) (!  (=> (and (= (type |node#0@@13|) DatatypeTypeType) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound#canCall| |node#0@@13| |i#0@@131|) (and ($Is |node#0@@13| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |node#0@@13|) (and (<= (LitInt 0) |i#0@@131|) (< |i#0@@131| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@13|))))) (and (<= (LitInt 0) (- |i#0@@131| 1)) (< (- |i#0@@131| 1) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@13|)))))))) true) :qid |BtreeMod.54:31| :skolemid |2957| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound |node#0@@13| |i#0@@131|)) ))))
(assert (forall ((|node#0@@14| T@U) (|i#0@@132| Int) ) (!  (=> (and (= (type |node#0@@14|) DatatypeTypeType) ($Is |node#0@@14| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) (and (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound#requires| |node#0@@14| |i#0@@132|) (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |node#0@@14|) (and (<= (LitInt 0) |i#0@@132|) (< |i#0@@132| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@14|))))) (and (<= (LitInt 0) (- |i#0@@132| 1)) (< (- |i#0@@132| 1) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@14|)))))) (=> (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |node#0@@14|) (and (<= (LitInt 0) |i#0@@132|) (< |i#0@@132| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@14|))))) (and (<= (LitInt 0) (- |i#0@@132| 1)) (< (- |i#0@@132| 1) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@14|))))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound#requires| |node#0@@14| |i#0@@132|)))) :qid |BtreeMod.54:31| :skolemid |2958| :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound#requires| |node#0@@14| |i#0@@132|)) )))
(assert  (=> true (forall ((|node#0@@15| T@U) (|i#0@@133| Int) ) (!  (=> (and (= (type |node#0@@15|) DatatypeTypeType) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound#canCall| |node#0@@15| |i#0@@133|) (and ($Is |node#0@@15| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |node#0@@15|) (and (<= (LitInt 0) |i#0@@133|) (< |i#0@@133| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@15|))))) (and (<= (LitInt 0) (- |i#0@@133| 1)) (< (- |i#0@@133| 1) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@15|)))))))) (and (forall ((|key#0@@181| T@U) ) (!  (=> (and (= (type |key#0@@181|) (SeqType BoxType)) ($Is |key#0@@181| (TSeq Tclass.NativeTypes.byte))) (and (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@15|) |i#0@@133|))) (=> (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@15|) |i#0@@133|))) ($Box |key#0@@181|))) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@15|) (- |i#0@@133| 1))) |key#0@@181|)))) :qid |BtreeMod.59:12| :skolemid |2959| :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@15|) |i#0@@133|))) ($Box |key#0@@181|))) )) (and (=> (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound |node#0@@15| |i#0@@133|) (forall ((|key#0@@182| T@U) ) (!  (=> (and (and (= (type |key#0@@182|) (SeqType BoxType)) ($Is |key#0@@182| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@15|) |i#0@@133|))) ($Box |key#0@@182|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@15|) (- |i#0@@133| 1))) |key#0@@182|)) :qid |BtreeMod.59:12| :skolemid |2960| :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@15|) |i#0@@133|))) ($Box |key#0@@182|))) ))) (=> (forall ((|key#0@@183| T@U) ) (!  (=> (and (and (= (type |key#0@@183|) (SeqType BoxType)) ($Is |key#0@@183| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@15|) |i#0@@133|))) ($Box |key#0@@183|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@15|) (- |i#0@@133| 1))) |key#0@@183|)) :qid |BtreeMod.59:12| :skolemid |2960| :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@15|) |i#0@@133|))) ($Box |key#0@@183|))) )) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound |node#0@@15| |i#0@@133|))))) :qid |BtreeMod.54:31| :skolemid |2961| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound |node#0@@15| |i#0@@133|)) ))))
(assert  (=> true (forall ((|node#0@@16| T@U) (|i#0@@134| Int) ) (!  (=> (and (= (type |node#0@@16|) DatatypeTypeType) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound#canCall| (Lit |node#0@@16|) (LitInt |i#0@@134|)) (and ($Is |node#0@@16| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (and (and (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (Lit |node#0@@16|))))) (and (<= (LitInt 0) (LitInt |i#0@@134|)) (< |i#0@@134| (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@16|))))))) (and (<= (LitInt 0) (LitInt (- |i#0@@134| 1))) (< (- |i#0@@134| 1) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@16|)))))))))) (and (forall ((|key#1@@20| T@U) ) (!  (=> (and (= (type |key#1@@20|) (SeqType BoxType)) ($Is |key#1@@20| (TSeq Tclass.NativeTypes.byte))) (and (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@16|))) (LitInt |i#0@@134|)))) (=> (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@16|))) (LitInt |i#0@@134|)))) ($Box |key#1@@20|))) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@16|))) (LitInt (- |i#0@@134| 1)))) |key#1@@20|)))) :qid |BtreeMod.59:12| :skolemid |2962| :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@16|) |i#0@@134|))) ($Box |key#1@@20|))) )) (and (=> (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound (Lit |node#0@@16|) (LitInt |i#0@@134|)) (forall ((|key#1@@21| T@U) ) (!  (=> (and (and (= (type |key#1@@21|) (SeqType BoxType)) ($Is |key#1@@21| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@16|))) (LitInt |i#0@@134|)))) ($Box |key#1@@21|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@16|))) (LitInt (- |i#0@@134| 1)))) |key#1@@21|)) :qid |BtreeMod.59:12| :skolemid |2963| :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@16|) |i#0@@134|))) ($Box |key#1@@21|))) ))) (=> (forall ((|key#1@@22| T@U) ) (!  (=> (and (and (= (type |key#1@@22|) (SeqType BoxType)) ($Is |key#1@@22| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@16|))) (LitInt |i#0@@134|)))) ($Box |key#1@@22|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@16|))) (LitInt (- |i#0@@134| 1)))) |key#1@@22|)) :qid |BtreeMod.59:12| :skolemid |2963| :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@16|) |i#0@@134|))) ($Box |key#1@@22|))) )) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound (Lit |node#0@@16|) (LitInt |i#0@@134|)))))) :qid |BtreeMod.54:31| :weight 3 :skolemid |2964| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound (Lit |node#0@@16|) (LitInt |i#0@@134|))) ))))
(assert (forall (($ly@@694 T@U) (|node#0@@17| T@U) ) (!  (=> (and (= (type $ly@@694) LayerTypeType) (= (type |node#0@@17|) DatatypeTypeType)) (and (=> (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $ly@@694) |node#0@@17|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF $ly@@694 |node#0@@17|)) (=> (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF $ly@@694 |node#0@@17|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $ly@@694) |node#0@@17|)))) :qid |BtreeMod.62:13| :skolemid |2965| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $ly@@694) |node#0@@17|)) )))
(assert (forall (($ly@@695 T@U) (|node#0@@18| T@U) ) (!  (=> (and (= (type $ly@@695) LayerTypeType) (= (type |node#0@@18|) DatatypeTypeType)) (and (=> (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF $ly@@695 |node#0@@18|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF $LZ |node#0@@18|)) (=> (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF $LZ |node#0@@18|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF $ly@@695 |node#0@@18|)))) :qid |BtreeMod.62:13| :skolemid |2966| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF (AsFuelBottom $ly@@695) |node#0@@18|)) )))
(assert  (=> true (forall (($ly@@696 T@U) (|node#0@@19| T@U) ) (!  (=> (and (and (= (type $ly@@696) LayerTypeType) (= (type |node#0@@19|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| |node#0@@19|) ($Is |node#0@@19| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node))) true) :qid |BtreeMod.62:13| :skolemid |2967| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF $ly@@696 |node#0@@19|)) ))))
(assert (forall (($ly@@697 T@U) (|node#0@@20| T@U) ) (!  (=> (and (and (= (type $ly@@697) LayerTypeType) (= (type |node#0@@20|) DatatypeTypeType)) ($Is |node#0@@20| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) (and (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#requires| $ly@@697 |node#0@@20|) true) (=> true (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#requires| $ly@@697 |node#0@@20|)))) :qid |BtreeMod.62:13| :skolemid |2968| :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#requires| $ly@@697 |node#0@@20|)) )))
(assert  (=> true (forall (($ly@@698 T@U) (|node#0@@21| T@U) ) (!  (=> (and (and (= (type $ly@@698) LayerTypeType) (= (type |node#0@@21|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| |node#0@@21|) ($Is |node#0@@21| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node))) (and (and (=> (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |node#0@@21|) (=> (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |node#0@@21|)) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values |node#0@@21|))) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |node#0@@21|)))) (=> (not (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |node#0@@21|)) (and (and (and (and (=> (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@21|)) (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|)) 1)) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@21|))) (=> (and (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@21|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@21|))) (forall ((|i#0@@135| Int) ) (!  (=> (< |i#0@@135| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|) |i#0@@135|)))) :qid |BtreeMod.71:18| :skolemid |2969| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|) |i#0@@135|))) )))) (=> (and (forall ((|i#0@@136| Int) ) (!  (=> (< |i#0@@136| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|) |i#0@@136|)))) :qid |BtreeMod.71:18| :skolemid |2971| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|) |i#0@@136|))) )) (forall ((|i#0@@137| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@137|) (< |i#0@@137| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|)))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF $ly@@698 ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|) |i#0@@137|))))) :qid |BtreeMod.71:18| :skolemid |2972| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|) |i#0@@137|))) ))) (forall ((|i#1@@63| Int) ) (!  (=> (< |i#1@@63| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|) |i#1@@63|)))) :qid |BtreeMod.72:18| :skolemid |2970| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|) |i#1@@63|))) )))) (=> (and (forall ((|i#1@@64| Int) ) (!  (=> (< |i#1@@64| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|) |i#1@@64|)))) :qid |BtreeMod.72:18| :skolemid |2974| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|) |i#1@@64|))) )) (forall ((|i#1@@65| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@65|) (< |i#1@@65| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|)))) (not (|Set#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|) |i#1@@65|))) (|Set#Empty| BoxType))))) :qid |BtreeMod.72:18| :skolemid |2975| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|) |i#1@@65|))) ))) (forall ((|i#2@@26| Int) ) (!  (=> (< |i#2@@26| (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|)) 1)) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound#canCall| |node#0@@21| |i#2@@26|)) :qid |BtreeMod.73:18| :skolemid |2973| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound |node#0@@21| |i#2@@26|)) )))) (=> (and (forall ((|i#2@@27| Int) ) (!  (=> (< |i#2@@27| (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|)) 1)) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound#canCall| |node#0@@21| |i#2@@27|)) :qid |BtreeMod.73:18| :skolemid |2977| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound |node#0@@21| |i#2@@27|)) )) (forall ((|i#2@@28| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@28|) (< |i#2@@28| (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|)) 1))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound |node#0@@21| |i#2@@28|))) :qid |BtreeMod.73:18| :skolemid |2978| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound |node#0@@21| |i#2@@28|)) ))) (forall ((|i#3@@17| Int) ) (!  (=> (< |i#3@@17| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound#canCall| |node#0@@21| |i#3@@17|)) :qid |BtreeMod.74:18| :skolemid |2976| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound |node#0@@21| |i#3@@17|)) )))))) (and (=> (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $ly@@698) |node#0@@21|) (ite (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |node#0@@21|)  (and (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |node#0@@21|)) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values |node#0@@21|))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |node#0@@21|)))  (and (and (and (and (and (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@21|)) (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|)) 1)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@21|))) (forall ((|i#0@@138| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@138|) (< |i#0@@138| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|)))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF $ly@@698 ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|) |i#0@@138|))))) :qid |BtreeMod.71:18| :skolemid |2979| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|) |i#0@@138|))) ))) (forall ((|i#1@@66| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@66|) (< |i#1@@66| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|)))) (not (|Set#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|) |i#1@@66|))) (|Set#Empty| BoxType))))) :qid |BtreeMod.72:18| :skolemid |2980| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|) |i#1@@66|))) ))) (forall ((|i#2@@29| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@29|) (< |i#2@@29| (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|)) 1))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound |node#0@@21| |i#2@@29|))) :qid |BtreeMod.73:18| :skolemid |2981| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound |node#0@@21| |i#2@@29|)) ))) (forall ((|i#3@@18| Int) ) (!  (=> true (=> (and (< 0 |i#3@@18|) (< |i#3@@18| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|)))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound |node#0@@21| |i#3@@18|))) :qid |BtreeMod.74:18| :skolemid |2982| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound |node#0@@21| |i#3@@18|)) ))))) (=> (ite (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |node#0@@21|)  (and (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |node#0@@21|)) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values |node#0@@21|))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |node#0@@21|)))  (and (and (and (and (and (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@21|)) (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|)) 1)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@21|))) (forall ((|i#0@@139| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@139|) (< |i#0@@139| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|)))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF $ly@@698 ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|) |i#0@@139|))))) :qid |BtreeMod.71:18| :skolemid |2979| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|) |i#0@@139|))) ))) (forall ((|i#1@@67| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@67|) (< |i#1@@67| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|)))) (not (|Set#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|) |i#1@@67|))) (|Set#Empty| BoxType))))) :qid |BtreeMod.72:18| :skolemid |2980| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|) |i#1@@67|))) ))) (forall ((|i#2@@30| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@30|) (< |i#2@@30| (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|)) 1))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound |node#0@@21| |i#2@@30|))) :qid |BtreeMod.73:18| :skolemid |2981| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound |node#0@@21| |i#2@@30|)) ))) (forall ((|i#3@@19| Int) ) (!  (=> true (=> (and (< 0 |i#3@@19|) (< |i#3@@19| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@21|)))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound |node#0@@21| |i#3@@19|))) :qid |BtreeMod.74:18| :skolemid |2982| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound |node#0@@21| |i#3@@19|)) )))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $ly@@698) |node#0@@21|))))) :qid |BtreeMod.62:13| :skolemid |2983| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $ly@@698) |node#0@@21|)) ))))
(assert  (=> true (forall (($ly@@699 T@U) (|node#0@@22| T@U) ) (!  (=> (and (and (= (type $ly@@699) LayerTypeType) (= (type |node#0@@22|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| (Lit |node#0@@22|)) ($Is |node#0@@22| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node))) (and (and (=> (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |node#0@@22|))))) (=> (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |node#0@@22|)))) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |node#0@@22|))))) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |node#0@@22|)))))) (=> (not (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |node#0@@22|)))))) (and (and (and (and (=> (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@22|)))) (- (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|)))) 1)) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@22|))))) (=> (and (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@22|)))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@22|))))) (forall ((|i#4| Int) ) (!  (=> (< |i#4| (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|))))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|))) |i#4|)))) :qid |BtreeMod.71:18| :skolemid |2984| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@22|) |i#4|))) )))) (=> (and (forall ((|i#4@@0| Int) ) (!  (=> (< |i#4@@0| (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|))))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|))) |i#4@@0|)))) :qid |BtreeMod.71:18| :skolemid |2986| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@22|) |i#4@@0|))) )) (forall ((|i#4@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#4@@1|) (< |i#4@@1| (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|)))))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $ly@@699) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|))) |i#4@@1|))))) :qid |BtreeMod.71:18| :skolemid |2987| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@22|) |i#4@@1|))) ))) (forall ((|i#5| Int) ) (!  (=> (< |i#5| (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|))))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|))) |i#5|)))) :qid |BtreeMod.72:18| :skolemid |2985| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@22|) |i#5|))) )))) (=> (and (forall ((|i#5@@0| Int) ) (!  (=> (< |i#5@@0| (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|))))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|))) |i#5@@0|)))) :qid |BtreeMod.72:18| :skolemid |2989| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@22|) |i#5@@0|))) )) (forall ((|i#5@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#5@@1|) (< |i#5@@1| (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|)))))) (not (|Set#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|))) |i#5@@1|))) (|Set#Empty| BoxType))))) :qid |BtreeMod.72:18| :skolemid |2990| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@22|) |i#5@@1|))) ))) (forall ((|i#6| Int) ) (!  (=> (< |i#6| (- (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|)))) 1)) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound#canCall| (Lit |node#0@@22|) |i#6|)) :qid |BtreeMod.73:18| :skolemid |2988| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound |node#0@@22| |i#6|)) )))) (=> (and (forall ((|i#6@@0| Int) ) (!  (=> (< |i#6@@0| (- (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|)))) 1)) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound#canCall| (Lit |node#0@@22|) |i#6@@0|)) :qid |BtreeMod.73:18| :skolemid |2992| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound |node#0@@22| |i#6@@0|)) )) (forall ((|i#6@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#6@@1|) (< |i#6@@1| (- (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|)))) 1))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound (Lit |node#0@@22|) |i#6@@1|))) :qid |BtreeMod.73:18| :skolemid |2993| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound |node#0@@22| |i#6@@1|)) ))) (forall ((|i#7| Int) ) (!  (=> (< |i#7| (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|))))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound#canCall| (Lit |node#0@@22|) |i#7|)) :qid |BtreeMod.74:18| :skolemid |2991| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound |node#0@@22| |i#7|)) )))))) (and (=> (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $ly@@699) (Lit |node#0@@22|)) (ite (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |node#0@@22|))  (and (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |node#0@@22|)))) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |node#0@@22|))))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |node#0@@22|)))))  (and (and (and (and (and (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@22|)))) (- (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|)))) 1)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@22|))))) (forall ((|i#4@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#4@@2|) (< |i#4@@2| (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|)))))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $ly@@699) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|))) |i#4@@2|))))) :qid |BtreeMod.71:18| :skolemid |2994| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@22|) |i#4@@2|))) ))) (forall ((|i#5@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#5@@2|) (< |i#5@@2| (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|)))))) (not (|Set#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|))) |i#5@@2|))) (|Set#Empty| BoxType))))) :qid |BtreeMod.72:18| :skolemid |2995| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@22|) |i#5@@2|))) ))) (forall ((|i#6@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#6@@2|) (< |i#6@@2| (- (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|)))) 1))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound (Lit |node#0@@22|) |i#6@@2|))) :qid |BtreeMod.73:18| :skolemid |2996| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound |node#0@@22| |i#6@@2|)) ))) (forall ((|i#7@@0| Int) ) (!  (=> true (=> (and (< 0 |i#7@@0|) (< |i#7@@0| (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|)))))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound (Lit |node#0@@22|) |i#7@@0|))) :qid |BtreeMod.74:18| :skolemid |2997| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound |node#0@@22| |i#7@@0|)) ))))) (=> (ite (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |node#0@@22|))  (and (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |node#0@@22|)))) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |node#0@@22|))))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |node#0@@22|)))))  (and (and (and (and (and (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@22|)))) (- (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|)))) 1)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@22|))))) (forall ((|i#4@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#4@@3|) (< |i#4@@3| (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|)))))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $ly@@699) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|))) |i#4@@3|))))) :qid |BtreeMod.71:18| :skolemid |2994| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@22|) |i#4@@3|))) ))) (forall ((|i#5@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#5@@3|) (< |i#5@@3| (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|)))))) (not (|Set#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|))) |i#5@@3|))) (|Set#Empty| BoxType))))) :qid |BtreeMod.72:18| :skolemid |2995| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@22|) |i#5@@3|))) ))) (forall ((|i#6@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#6@@3|) (< |i#6@@3| (- (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|)))) 1))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound (Lit |node#0@@22|) |i#6@@3|))) :qid |BtreeMod.73:18| :skolemid |2996| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound |node#0@@22| |i#6@@3|)) ))) (forall ((|i#7@@1| Int) ) (!  (=> true (=> (and (< 0 |i#7@@1|) (< |i#7@@1| (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@22|)))))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound (Lit |node#0@@22|) |i#7@@1|))) :qid |BtreeMod.74:18| :skolemid |2997| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound |node#0@@22| |i#7@@1|)) )))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $ly@@699) (Lit |node#0@@22|)))))) :qid |BtreeMod.62:13| :weight 3 :skolemid |2998| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $ly@@699) (Lit |node#0@@22|))) ))))
(assert (forall ((arg0@@343 T@U) (arg1@@211 T@U) ) (! (= (type (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation arg0@@343 arg1@@211)) (MapType BoxType BoxType)) :qid |funType:MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation arg0@@343 arg1@@211)) )))
(assert (forall (($ly@@700 T@U) (|node#0@@23| T@U) ) (!  (=> (and (= (type $ly@@700) LayerTypeType) (= (type |node#0@@23|) DatatypeTypeType)) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation ($LS $ly@@700) |node#0@@23|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation $ly@@700 |node#0@@23|))) :qid |BtreeMod.86:22| :skolemid |2999| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation ($LS $ly@@700) |node#0@@23|)) )))
(assert (forall (($ly@@701 T@U) (|node#0@@24| T@U) ) (!  (=> (and (= (type $ly@@701) LayerTypeType) (= (type |node#0@@24|) DatatypeTypeType)) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation $ly@@701 |node#0@@24|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation $LZ |node#0@@24|))) :qid |BtreeMod.86:22| :skolemid |3000| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation (AsFuelBottom $ly@@701) |node#0@@24|)) )))
(assert  (=> true (forall (($ly@@702 T@U) (|node#0@@25| T@U) ) (!  (=> (and (and (= (type $ly@@702) LayerTypeType) (= (type |node#0@@25|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation#canCall| |node#0@@25|) (and ($Is |node#0@@25| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@25|)))) ($Is (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation $ly@@702 |node#0@@25|) (TMap (TSeq Tclass.NativeTypes.byte) |#$Value|))) :qid |BtreeMod.86:22| :skolemid |3001| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation $ly@@702 |node#0@@25|)) ))))
(assert (forall (($ly@@703 T@U) (|node#0@@26| T@U) ) (!  (=> (and (and (= (type $ly@@703) LayerTypeType) (= (type |node#0@@26|) DatatypeTypeType)) ($Is |node#0@@26| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) (and (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation#requires| $ly@@703 |node#0@@26|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@26|)) (=> (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@26|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation#requires| $ly@@703 |node#0@@26|)))) :qid |BtreeMod.86:22| :skolemid |3002| :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation#requires| $ly@@703 |node#0@@26|)) )))
(assert  (and (and (and (forall ((arg0@@344 T@U) (arg1@@212 T@U) ) (! (= (type (|lambda#146| arg0@@344 arg1@@212)) (MapType0Type BoxType boolType)) :qid |funType:lambda#146| :pattern ( (|lambda#146| arg0@@344 arg1@@212)) )) (forall ((arg0@@345 T@U) (arg1@@213 T@U) (arg2@@127 T@U) ) (! (= (type (|lambda#147| arg0@@345 arg1@@213 arg2@@127)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#147| :pattern ( (|lambda#147| arg0@@345 arg1@@213 arg2@@127)) ))) (forall ((arg0@@346 T@U) (arg1@@214 T@U) (arg2@@128 T@U) (arg3@@88 T@U) (arg4@@59 T@U) (arg5@@23 T@U) (arg6@@7 Int) ) (! (= (type (|lambda#148| arg0@@346 arg1@@214 arg2@@128 arg3@@88 arg4@@59 arg5@@23 arg6@@7)) (MapType0Type BoxType boolType)) :qid |funType:lambda#148| :pattern ( (|lambda#148| arg0@@346 arg1@@214 arg2@@128 arg3@@88 arg4@@59 arg5@@23 arg6@@7)) ))) (forall ((arg0@@347 T@U) (arg1@@215 T@U) (arg2@@129 T@U) (arg3@@89 T@U) (arg4@@60 Int) ) (! (= (type (|lambda#149| arg0@@347 arg1@@215 arg2@@129 arg3@@89 arg4@@60)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#149| :pattern ( (|lambda#149| arg0@@347 arg1@@215 arg2@@129 arg3@@89 arg4@@60)) ))))
(assert  (=> true (forall (($ly@@704 T@U) (|node#0@@27| T@U) ) (!  (=> (and (and (= (type $ly@@704) LayerTypeType) (= (type |node#0@@27|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation#canCall| |node#0@@27|) (and ($Is |node#0@@27| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@27|)))) (and (and (=> (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |node#0@@27|) (forall ((|k#0@@50| T@U) ) (!  (=> (and (and (= (type |k#0@@50|) (SeqType BoxType)) ($Is |k#0@@50| (TSeq Tclass.NativeTypes.byte))) (|Seq#Contains| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |node#0@@27|) ($Box |k#0@@50|))) (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |node#0@@27|) |k#0@@50|)) :qid |BtreeMod.92:11| :skolemid |3003| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |node#0@@27|) |k#0@@50|)) :pattern ( (|Seq#Contains| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |node#0@@27|) ($Box |k#0@@50|))) ))) (=> (not (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |node#0@@27|)) (forall ((|key#0@@184| T@U) ) (!  (=> (and (= (type |key#0@@184|) (SeqType BoxType)) ($Is |key#0@@184| (TSeq Tclass.NativeTypes.byte))) (and (and (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#canCall| |node#0@@27|) (=> (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys |node#0@@27|) ($Box |key#0@@184|))) (and (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@27|) |key#0@@184|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@27|) (+ (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@27|) |key#0@@184|) 1))))))) (=> (and (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys |node#0@@27|) ($Box |key#0@@184|))) (U_2_bool (MapType0Select (|Map#Domain| (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation $ly@@704 ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@27|) (+ (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@27|) |key#0@@184|) 1))))) ($Box |key#0@@184|)))) (and (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@27|) |key#0@@184|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@27|) (+ (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@27|) |key#0@@184|) 1)))))))) :qid |BtreeMod.94:11| :skolemid |3004| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@27|) |key#0@@184|)) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys |node#0@@27|) ($Box |key#0@@184|))) )))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation ($LS $ly@@704) |node#0@@27|) (ite (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |node#0@@27|) (|Map#Glue| (|lambda#146| (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |node#0@@27|)) (|lambda#147| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values |node#0@@27|) ($LS $LZ) (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |node#0@@27|)) (TMap (TSeq Tclass.NativeTypes.byte) |#$Value|)) (|Map#Glue| (|lambda#148| (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys |node#0@@27|) $ly@@704 (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@27|) ($LS $LZ) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@27|) 1) (|lambda#149| $ly@@704 (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@27|) ($LS $LZ) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@27|) 1) (TMap (TSeq Tclass.NativeTypes.byte) |#$Value|)))))) :qid |BtreeMod.86:22| :skolemid |3005| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation ($LS $ly@@704) |node#0@@27|)) ))))
(assert  (=> true (forall (($ly@@705 T@U) (|node#0@@28| T@U) ) (!  (=> (and (and (= (type $ly@@705) LayerTypeType) (= (type |node#0@@28|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation#canCall| (Lit |node#0@@28|)) (and ($Is |node#0@@28| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (Lit |node#0@@28|)))))))) (and (and (=> (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |node#0@@28|))))) (forall ((|k#0@@51| T@U) ) (!  (=> (and (and (= (type |k#0@@51|) (SeqType BoxType)) ($Is |k#0@@51| (TSeq Tclass.NativeTypes.byte))) (|Seq#Contains| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |node#0@@28|)) ($Box |k#0@@51|))) (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |node#0@@28|))) |k#0@@51|)) :qid |BtreeMod.92:11| :skolemid |3006| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |node#0@@28|) |k#0@@51|)) :pattern ( (|Seq#Contains| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |node#0@@28|) ($Box |k#0@@51|))) ))) (=> (not (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |node#0@@28|)))))) (forall ((|key#0@@185| T@U) ) (!  (=> (and (= (type |key#0@@185|) (SeqType BoxType)) ($Is |key#0@@185| (TSeq Tclass.NativeTypes.byte))) (and (and (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#canCall| (Lit |node#0@@28|)) (=> (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys (Lit |node#0@@28|)) ($Box |key#0@@185|))) (and (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@28|))) |key#0@@185|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@28|))) (+ (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@28|))) |key#0@@185|) 1))))))) (=> (and (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys (Lit |node#0@@28|)) ($Box |key#0@@185|))) (U_2_bool (MapType0Select (|Map#Domain| (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation ($LS $ly@@705) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@28|))) (+ (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@28|))) |key#0@@185|) 1))))) ($Box |key#0@@185|)))) (and (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@28|))) |key#0@@185|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@28|))) (+ (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@28|))) |key#0@@185|) 1)))))))) :qid |BtreeMod.94:11| :skolemid |3007| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@28|) |key#0@@185|)) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys |node#0@@28|) ($Box |key#0@@185|))) )))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation ($LS $ly@@705) (Lit |node#0@@28|)) (ite (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |node#0@@28|)) (|Map#Glue| (|lambda#146| (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |node#0@@28|))) (|lambda#147| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |node#0@@28|))) ($LS $LZ) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |node#0@@28|)))) (TMap (TSeq Tclass.NativeTypes.byte) |#$Value|)) (|Map#Glue| (|lambda#148| (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys (Lit |node#0@@28|)) ($LS $ly@@705) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@28|))) ($LS $LZ) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@28|))) 1) (|lambda#149| ($LS $ly@@705) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@28|))) ($LS $LZ) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@28|))) 1) (TMap (TSeq Tclass.NativeTypes.byte) |#$Value|)))))) :qid |BtreeMod.86:22| :weight 3 :skolemid |3008| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation ($LS $ly@@705) (Lit |node#0@@28|))) ))))
(assert (forall ((arg0@@348 T@U) (arg1@@216 T@U) ) (! (= (type (MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey arg0@@348 arg1@@216)) (SeqType BoxType)) :qid |funType:MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey arg0@@348 arg1@@216)) )))
(assert (forall (($ly@@706 T@U) (|node#0@@29| T@U) ) (!  (=> (and (= (type $ly@@706) LayerTypeType) (= (type |node#0@@29|) DatatypeTypeType)) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey ($LS $ly@@706) |node#0@@29|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey $ly@@706 |node#0@@29|))) :qid |BtreeMod.210:12| :skolemid |3009| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey ($LS $ly@@706) |node#0@@29|)) )))
(assert (forall (($ly@@707 T@U) (|node#0@@30| T@U) ) (!  (=> (and (= (type $ly@@707) LayerTypeType) (= (type |node#0@@30|) DatatypeTypeType)) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey $ly@@707 |node#0@@30|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey $LZ |node#0@@30|))) :qid |BtreeMod.210:12| :skolemid |3010| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey (AsFuelBottom $ly@@707) |node#0@@30|)) )))
(assert (= (type StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.Interpretation) LayerTypeType))
(assert  (=> true (forall (($ly@@708 T@U) (|node#0@@31| T@U) ) (!  (=> (and (and (= (type $ly@@708) LayerTypeType) (= (type |node#0@@31|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey#canCall| |node#0@@31|) (and ($Is |node#0@@31| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (and (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@31|) (< 0 (|Map#Card| (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.Interpretation |node#0@@31|))))))) ($Is (MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey $ly@@708 |node#0@@31|) (TSeq Tclass.NativeTypes.byte))) :qid |BtreeMod.210:12| :skolemid |3011| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey $ly@@708 |node#0@@31|)) ))))
(assert (forall (($ly@@709 T@U) (|node#0@@32| T@U) ) (!  (=> (and (and (= (type $ly@@709) LayerTypeType) (= (type |node#0@@32|) DatatypeTypeType)) ($Is |node#0@@32| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) (and (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey#requires| $ly@@709 |node#0@@32|) (and (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@32|) (< 0 (|Map#Card| (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.Interpretation |node#0@@32|))))) (=> (and (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@32|) (< 0 (|Map#Card| (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.Interpretation |node#0@@32|)))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey#requires| $ly@@709 |node#0@@32|)))) :qid |BtreeMod.210:12| :skolemid |3012| :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey#requires| $ly@@709 |node#0@@32|)) )))
(assert  (=> true (forall (($ly@@710 T@U) (|node#0@@33| T@U) ) (!  (=> (and (and (= (type $ly@@710) LayerTypeType) (= (type |node#0@@33|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey#canCall| |node#0@@33|) (and ($Is |node#0@@33| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (and (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@33|) (< 0 (|Map#Card| (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.Interpretation |node#0@@33|))))))) (and (=> (not (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |node#0@@33|)) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@33|) (LitInt 0))))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey ($LS $ly@@710) |node#0@@33|) (ite (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |node#0@@33|) ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |node#0@@33|) (LitInt 0))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey $ly@@710 ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@33|) (LitInt 0)))))))) :qid |BtreeMod.210:12| :skolemid |3013| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey ($LS $ly@@710) |node#0@@33|)) ))))
(assert  (=> true (forall (($ly@@711 T@U) (|node#0@@34| T@U) ) (!  (=> (and (and (= (type $ly@@711) LayerTypeType) (= (type |node#0@@34|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey#canCall| (Lit |node#0@@34|)) (and ($Is |node#0@@34| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (and (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (Lit |node#0@@34|))))) (< 0 (|Map#Card| (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.Interpretation (Lit |node#0@@34|)))))))) (and (=> (not (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |node#0@@34|)))))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@34|))) (LitInt 0))))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey ($LS $ly@@711) (Lit |node#0@@34|)) (ite (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |node#0@@34|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |node#0@@34|))) (LitInt 0))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey ($LS $ly@@711) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@34|))) (LitInt 0)))))))) :qid |BtreeMod.210:12| :weight 3 :skolemid |3014| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.MinKey ($LS $ly@@711) (Lit |node#0@@34|))) ))))
(assert (forall ((arg0@@349 T@U) (arg1@@217 T@U) ) (! (= (type (MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey arg0@@349 arg1@@217)) (SeqType BoxType)) :qid |funType:MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey arg0@@349 arg1@@217)) )))
(assert (forall (($ly@@712 T@U) (|node#0@@35| T@U) ) (!  (=> (and (= (type $ly@@712) LayerTypeType) (= (type |node#0@@35|) DatatypeTypeType)) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey ($LS $ly@@712) |node#0@@35|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey $ly@@712 |node#0@@35|))) :qid |BtreeMod.261:12| :skolemid |3015| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey ($LS $ly@@712) |node#0@@35|)) )))
(assert (forall (($ly@@713 T@U) (|node#0@@36| T@U) ) (!  (=> (and (= (type $ly@@713) LayerTypeType) (= (type |node#0@@36|) DatatypeTypeType)) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey $ly@@713 |node#0@@36|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey $LZ |node#0@@36|))) :qid |BtreeMod.261:12| :skolemid |3016| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey (AsFuelBottom $ly@@713) |node#0@@36|)) )))
(assert  (=> true (forall (($ly@@714 T@U) (|node#0@@37| T@U) ) (!  (=> (and (and (= (type $ly@@714) LayerTypeType) (= (type |node#0@@37|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey#canCall| |node#0@@37|) (and ($Is |node#0@@37| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (and (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@37|) (< 0 (|Map#Card| (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.Interpretation |node#0@@37|))))))) ($Is (MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey $ly@@714 |node#0@@37|) (TSeq Tclass.NativeTypes.byte))) :qid |BtreeMod.261:12| :skolemid |3017| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey $ly@@714 |node#0@@37|)) ))))
(assert (forall (($ly@@715 T@U) (|node#0@@38| T@U) ) (!  (=> (and (and (= (type $ly@@715) LayerTypeType) (= (type |node#0@@38|) DatatypeTypeType)) ($Is |node#0@@38| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) (and (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey#requires| $ly@@715 |node#0@@38|) (and (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@38|) (< 0 (|Map#Card| (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.Interpretation |node#0@@38|))))) (=> (and (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@38|) (< 0 (|Map#Card| (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.Interpretation |node#0@@38|)))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey#requires| $ly@@715 |node#0@@38|)))) :qid |BtreeMod.261:12| :skolemid |3018| :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey#requires| $ly@@715 |node#0@@38|)) )))
(assert  (=> true (forall (($ly@@716 T@U) (|node#0@@39| T@U) ) (!  (=> (and (and (= (type $ly@@716) LayerTypeType) (= (type |node#0@@39|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey#canCall| |node#0@@39|) (and ($Is |node#0@@39| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (and (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@39|) (< 0 (|Map#Card| (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.Interpretation |node#0@@39|))))))) (and (and (=> (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |node#0@@39|) (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |node#0@@39|))) (=> (not (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |node#0@@39|)) (and (|Sequences.__default.Last#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@39|)) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@39|))))))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey ($LS $ly@@716) |node#0@@39|) (ite (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |node#0@@39|) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |node#0@@39|))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey $ly@@716 ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@39|)))))))) :qid |BtreeMod.261:12| :skolemid |3019| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey ($LS $ly@@716) |node#0@@39|)) ))))
(assert  (=> true (forall (($ly@@717 T@U) (|node#0@@40| T@U) ) (!  (=> (and (and (= (type $ly@@717) LayerTypeType) (= (type |node#0@@40|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey#canCall| (Lit |node#0@@40|)) (and ($Is |node#0@@40| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (and (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (Lit |node#0@@40|))))) (< 0 (|Map#Card| (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.Interpretation (Lit |node#0@@40|)))))))) (and (and (=> (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |node#0@@40|))))) (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |node#0@@40|))))) (=> (not (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |node#0@@40|)))))) (and (|Sequences.__default.Last#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@40|)))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@40|)))))))))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey ($LS $ly@@717) (Lit |node#0@@40|)) (ite (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |node#0@@40|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |node#0@@40|))))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey ($LS $ly@@717) (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@40|))))))))))) :qid |BtreeMod.261:12| :weight 3 :skolemid |3020| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.MaxKey ($LS $ly@@717) (Lit |node#0@@40|))) ))))
(assert  (=> true (forall ((|oldleaf#0| T@U) (|leftleaf#0| T@U) (|rightleaf#0| T@U) (|pivot#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type |oldleaf#0|) DatatypeTypeType) (= (type |leftleaf#0|) DatatypeTypeType)) (= (type |rightleaf#0|) DatatypeTypeType)) (= (type |pivot#0@@15|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf#canCall| |oldleaf#0| |leftleaf#0| |rightleaf#0| |pivot#0@@15|) (and (and (and ($Is |oldleaf#0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |leftleaf#0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |rightleaf#0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |pivot#0@@15| (TSeq Tclass.NativeTypes.byte))))) true) :qid |BtreeMod.312:23| :skolemid |3021| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf |oldleaf#0| |leftleaf#0| |rightleaf#0| |pivot#0@@15|)) ))))
(assert (forall ((|oldleaf#0@@0| T@U) (|leftleaf#0@@0| T@U) (|rightleaf#0@@0| T@U) (|pivot#0@@16| T@U) ) (!  (=> (and (and (and (and (= (type |oldleaf#0@@0|) DatatypeTypeType) (= (type |leftleaf#0@@0|) DatatypeTypeType)) (= (type |rightleaf#0@@0|) DatatypeTypeType)) (= (type |pivot#0@@16|) (SeqType BoxType))) (and (and (and ($Is |oldleaf#0@@0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |leftleaf#0@@0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |rightleaf#0@@0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |pivot#0@@16| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf#requires| |oldleaf#0@@0| |leftleaf#0@@0| |rightleaf#0@@0| |pivot#0@@16|) true) (=> true (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf#requires| |oldleaf#0@@0| |leftleaf#0@@0| |rightleaf#0@@0| |pivot#0@@16|)))) :qid |BtreeMod.312:23| :skolemid |3022| :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf#requires| |oldleaf#0@@0| |leftleaf#0@@0| |rightleaf#0@@0| |pivot#0@@16|)) )))
(assert  (=> true (forall ((|oldleaf#0@@1| T@U) (|leftleaf#0@@1| T@U) (|rightleaf#0@@1| T@U) (|pivot#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type |oldleaf#0@@1|) DatatypeTypeType) (= (type |leftleaf#0@@1|) DatatypeTypeType)) (= (type |rightleaf#0@@1|) DatatypeTypeType)) (= (type |pivot#0@@17|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf#canCall| |oldleaf#0@@1| |leftleaf#0@@1| |rightleaf#0@@1| |pivot#0@@17|) (and (and (and ($Is |oldleaf#0@@1| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |leftleaf#0@@1| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |rightleaf#0@@1| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |pivot#0@@17| (TSeq Tclass.NativeTypes.byte))))) (and (and (=> (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values |oldleaf#0@@1|) (|Seq#Append| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values |leftleaf#0@@1|) (MutableBtreeBulkOperations.MB.Model.Abs.Node.values |rightleaf#0@@1|))) (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |leftleaf#0@@1|)) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |leftleaf#0@@1|))) |pivot#0@@17|))) (=> (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |leftleaf#0@@1|)) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |leftleaf#0@@1|))) |pivot#0@@17|)) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |leftleaf#0@@1|))) |pivot#0@@17|)) (|Lexicographic__Byte__Order.__default.lte#canCall| |pivot#0@@17| ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |rightleaf#0@@1|) (LitInt 0)))))) (and (=> (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf |oldleaf#0@@1| |leftleaf#0@@1| |rightleaf#0@@1| |pivot#0@@17|) (and (and (and (and (and (and (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |oldleaf#0@@1|) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |leftleaf#0@@1|)) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |rightleaf#0@@1|)) (and (< 0 (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |leftleaf#0@@1|))) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |leftleaf#0@@1|)) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values |leftleaf#0@@1|))))) (and (< 0 (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |rightleaf#0@@1|))) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |rightleaf#0@@1|)) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values |rightleaf#0@@1|))))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |oldleaf#0@@1|) (|Seq#Append| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |leftleaf#0@@1|) (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |rightleaf#0@@1|)))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values |oldleaf#0@@1|) (|Seq#Append| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values |leftleaf#0@@1|) (MutableBtreeBulkOperations.MB.Model.Abs.Node.values |rightleaf#0@@1|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |leftleaf#0@@1|))) |pivot#0@@17|)) (Lexicographic__Byte__Order.__default.lte |pivot#0@@17| ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |rightleaf#0@@1|) (LitInt 0)))))) (=> (and (and (and (and (and (and (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |oldleaf#0@@1|) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |leftleaf#0@@1|)) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |rightleaf#0@@1|)) (and (< 0 (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |leftleaf#0@@1|))) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |leftleaf#0@@1|)) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values |leftleaf#0@@1|))))) (and (< 0 (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |rightleaf#0@@1|))) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |rightleaf#0@@1|)) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values |rightleaf#0@@1|))))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |oldleaf#0@@1|) (|Seq#Append| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |leftleaf#0@@1|) (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |rightleaf#0@@1|)))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values |oldleaf#0@@1|) (|Seq#Append| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values |leftleaf#0@@1|) (MutableBtreeBulkOperations.MB.Model.Abs.Node.values |rightleaf#0@@1|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |leftleaf#0@@1|))) |pivot#0@@17|)) (Lexicographic__Byte__Order.__default.lte |pivot#0@@17| ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |rightleaf#0@@1|) (LitInt 0))))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf |oldleaf#0@@1| |leftleaf#0@@1| |rightleaf#0@@1| |pivot#0@@17|))))) :qid |BtreeMod.312:23| :skolemid |3023| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf |oldleaf#0@@1| |leftleaf#0@@1| |rightleaf#0@@1| |pivot#0@@17|)) ))))
(assert  (=> true (forall ((|oldleaf#0@@2| T@U) (|leftleaf#0@@2| T@U) (|rightleaf#0@@2| T@U) (|pivot#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type |oldleaf#0@@2|) DatatypeTypeType) (= (type |leftleaf#0@@2|) DatatypeTypeType)) (= (type |rightleaf#0@@2|) DatatypeTypeType)) (= (type |pivot#0@@18|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf#canCall| (Lit |oldleaf#0@@2|) (Lit |leftleaf#0@@2|) (Lit |rightleaf#0@@2|) (Lit |pivot#0@@18|)) (and (and (and ($Is |oldleaf#0@@2| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |leftleaf#0@@2| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |rightleaf#0@@2| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |pivot#0@@18| (TSeq Tclass.NativeTypes.byte))))) (and (and (=> (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |oldleaf#0@@2|)) (|Seq#Append| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |leftleaf#0@@2|)) (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |rightleaf#0@@2|)))) (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leftleaf#0@@2|)))) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leftleaf#0@@2|)))))) (Lit |pivot#0@@18|)))) (=> (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leftleaf#0@@2|)))) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leftleaf#0@@2|)))))) (Lit |pivot#0@@18|))) (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leftleaf#0@@2|)))))) (Lit |pivot#0@@18|)))))) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |pivot#0@@18|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |rightleaf#0@@2|))) (LitInt 0)))))) (and (=> (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf (Lit |oldleaf#0@@2|) (Lit |leftleaf#0@@2|) (Lit |rightleaf#0@@2|) (Lit |pivot#0@@18|)) (and (and (and (and (and (and (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |oldleaf#0@@2|)) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |leftleaf#0@@2|))) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |rightleaf#0@@2|))) (and (< 0 (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leftleaf#0@@2|))))) (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leftleaf#0@@2|)))) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |leftleaf#0@@2|))))))) (and (< 0 (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |rightleaf#0@@2|))))) (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |rightleaf#0@@2|)))) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |rightleaf#0@@2|))))))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |oldleaf#0@@2|)) (|Seq#Append| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leftleaf#0@@2|)) (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |rightleaf#0@@2|))))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |oldleaf#0@@2|)) (|Seq#Append| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |leftleaf#0@@2|)) (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |rightleaf#0@@2|))))) (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leftleaf#0@@2|)))))) (Lit |pivot#0@@18|))) (Lexicographic__Byte__Order.__default.lte (Lit |pivot#0@@18|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |rightleaf#0@@2|))) (LitInt 0)))))) (=> (and (and (and (and (and (and (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |oldleaf#0@@2|)) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |leftleaf#0@@2|))) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |rightleaf#0@@2|))) (and (< 0 (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leftleaf#0@@2|))))) (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leftleaf#0@@2|)))) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |leftleaf#0@@2|))))))) (and (< 0 (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |rightleaf#0@@2|))))) (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |rightleaf#0@@2|)))) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |rightleaf#0@@2|))))))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |oldleaf#0@@2|)) (|Seq#Append| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leftleaf#0@@2|)) (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |rightleaf#0@@2|))))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |oldleaf#0@@2|)) (|Seq#Append| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |leftleaf#0@@2|)) (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |rightleaf#0@@2|))))) (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leftleaf#0@@2|)))))) (Lit |pivot#0@@18|))) (Lexicographic__Byte__Order.__default.lte (Lit |pivot#0@@18|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |rightleaf#0@@2|))) (LitInt 0))))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf (Lit |oldleaf#0@@2|) (Lit |leftleaf#0@@2|) (Lit |rightleaf#0@@2|) (Lit |pivot#0@@18|)))))) :qid |BtreeMod.312:23| :weight 3 :skolemid |3024| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf (Lit |oldleaf#0@@2|) (Lit |leftleaf#0@@2|) (Lit |rightleaf#0@@2|) (Lit |pivot#0@@18|))) ))))
(assert (forall ((arg0@@350 T@U) (arg1@@218 Int) (arg2@@130 Int) ) (! (= (type (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex arg0@@350 arg1@@218 arg2@@130)) DatatypeTypeType) :qid |funType:MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex arg0@@350 arg1@@218 arg2@@130)) )))
(assert  (=> true (forall ((|node#0@@41| T@U) (|from#0| Int) (|to#0| Int) ) (!  (=> (and (= (type |node#0@@41|) DatatypeTypeType) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex#canCall| |node#0@@41| |from#0| |to#0|) (and ($Is |node#0@@41| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |node#0@@41|) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@41|)) (+ (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@41|)) 1))) (and (and (<= (LitInt 0) |from#0|) (< |from#0| |to#0|)) (<= |to#0| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@41|)))))))) ($Is (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex |node#0@@41| |from#0| |to#0|) Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) :qid |BtreeMod.400:21| :skolemid |3025| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex |node#0@@41| |from#0| |to#0|)) ))))
(assert (forall ((|node#0@@42| T@U) (|from#0@@0| Int) (|to#0@@0| Int) ) (!  (=> (and (= (type |node#0@@42|) DatatypeTypeType) ($Is |node#0@@42| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) (and (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex#requires| |node#0@@42| |from#0@@0| |to#0@@0|) (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |node#0@@42|) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@42|)) (+ (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@42|)) 1))) (and (and (<= (LitInt 0) |from#0@@0|) (< |from#0@@0| |to#0@@0|)) (<= |to#0@@0| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@42|)))))) (=> (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |node#0@@42|) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@42|)) (+ (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@42|)) 1))) (and (and (<= (LitInt 0) |from#0@@0|) (< |from#0@@0| |to#0@@0|)) (<= |to#0@@0| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@42|))))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex#requires| |node#0@@42| |from#0@@0| |to#0@@0|)))) :qid |BtreeMod.400:21| :skolemid |3026| :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex#requires| |node#0@@42| |from#0@@0| |to#0@@0|)) )))
(assert  (=> true (forall ((|node#0@@43| T@U) (|from#0@@1| Int) (|to#0@@1| Int) ) (!  (=> (and (= (type |node#0@@43|) DatatypeTypeType) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex#canCall| |node#0@@43| |from#0@@1| |to#0@@1|) (and ($Is |node#0@@43| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |node#0@@43|) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@43|)) (+ (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@43|)) 1))) (and (and (<= (LitInt 0) |from#0@@1|) (< |from#0@@1| |to#0@@1|)) (<= |to#0@@1| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@43|)))))))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex |node#0@@43| |from#0@@1| |to#0@@1|) (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| (|Seq#Drop| (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@43|) (- |to#0@@1| 1)) |from#0@@1|) (|Seq#Drop| (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@43|) |to#0@@1|) |from#0@@1|)))) :qid |BtreeMod.400:21| :skolemid |3027| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex |node#0@@43| |from#0@@1| |to#0@@1|)) ))))
(assert  (=> true (forall ((|node#0@@44| T@U) (|from#0@@2| Int) (|to#0@@2| Int) ) (!  (=> (and (= (type |node#0@@44|) DatatypeTypeType) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex#canCall| (Lit |node#0@@44|) (LitInt |from#0@@2|) (LitInt |to#0@@2|)) (and ($Is |node#0@@44| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (and (and (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (Lit |node#0@@44|))))) (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@44|)))) (+ (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@44|)))) 1))) (and (and (<= (LitInt 0) (LitInt |from#0@@2|)) (< |from#0@@2| |to#0@@2|)) (<= (LitInt |to#0@@2|) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@44|)))))))))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex (Lit |node#0@@44|) (LitInt |from#0@@2|) (LitInt |to#0@@2|)) (Lit (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| (Lit (|Seq#Drop| (|Seq#Take| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@44|))) (LitInt (- |to#0@@2| 1))) (LitInt |from#0@@2|))) (Lit (|Seq#Drop| (|Seq#Take| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@44|))) (LitInt |to#0@@2|)) (LitInt |from#0@@2|))))))) :qid |BtreeMod.400:21| :weight 3 :skolemid |3028| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex (Lit |node#0@@44|) (LitInt |from#0@@2|) (LitInt |to#0@@2|))) ))))
(assert  (=> true (forall ((|oldindex#0| T@U) (|leftindex#0| T@U) (|rightindex#0| T@U) (|pivot#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type |oldindex#0|) DatatypeTypeType) (= (type |leftindex#0|) DatatypeTypeType)) (= (type |rightindex#0|) DatatypeTypeType)) (= (type |pivot#0@@19|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitIndex#canCall| |oldindex#0| |leftindex#0| |rightindex#0| |pivot#0@@19|) (and (and (and ($Is |oldindex#0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |leftindex#0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |rightindex#0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |pivot#0@@19| (TSeq Tclass.NativeTypes.byte))))) true) :qid |BtreeMod.428:24| :skolemid |3029| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitIndex |oldindex#0| |leftindex#0| |rightindex#0| |pivot#0@@19|)) ))))
(assert (forall ((|oldindex#0@@0| T@U) (|leftindex#0@@0| T@U) (|rightindex#0@@0| T@U) (|pivot#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type |oldindex#0@@0|) DatatypeTypeType) (= (type |leftindex#0@@0|) DatatypeTypeType)) (= (type |rightindex#0@@0|) DatatypeTypeType)) (= (type |pivot#0@@20|) (SeqType BoxType))) (and (and (and ($Is |oldindex#0@@0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |leftindex#0@@0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |rightindex#0@@0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |pivot#0@@20| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitIndex#requires| |oldindex#0@@0| |leftindex#0@@0| |rightindex#0@@0| |pivot#0@@20|) true) (=> true (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitIndex#requires| |oldindex#0@@0| |leftindex#0@@0| |rightindex#0@@0| |pivot#0@@20|)))) :qid |BtreeMod.428:24| :skolemid |3030| :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitIndex#requires| |oldindex#0@@0| |leftindex#0@@0| |rightindex#0@@0| |pivot#0@@20|)) )))
(assert  (=> true (forall ((|oldindex#0@@1| T@U) (|leftindex#0@@1| T@U) (|rightindex#0@@1| T@U) (|pivot#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type |oldindex#0@@1|) DatatypeTypeType) (= (type |leftindex#0@@1|) DatatypeTypeType)) (= (type |rightindex#0@@1|) DatatypeTypeType)) (= (type |pivot#0@@21|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitIndex#canCall| |oldindex#0@@1| |leftindex#0@@1| |rightindex#0@@1| |pivot#0@@21|) (and (and (and ($Is |oldindex#0@@1| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |leftindex#0@@1| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |rightindex#0@@1| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |pivot#0@@21| (TSeq Tclass.NativeTypes.byte))))) (and (and (and (and (=> (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@1|)) (+ (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldindex#0@@1|)) 1)) (and (and (|$IsA#MutableBtreeBulkOperations.MB.Model.Abs.Node| |leftindex#0@@1|) (|$IsA#MutableBtreeBulkOperations.MB.Model.Abs.Node| (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex |oldindex#0@@1| (LitInt 0) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|))))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex#canCall| |oldindex#0@@1| (LitInt 0) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|))))) (=> (and (and (and (|$IsA#MutableBtreeBulkOperations.MB.Model.Abs.Node| |leftindex#0@@1|) (|$IsA#MutableBtreeBulkOperations.MB.Model.Abs.Node| (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex |oldindex#0@@1| (LitInt 0) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|))))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex#canCall| |oldindex#0@@1| (LitInt 0) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|)))) (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| |leftindex#0@@1| (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex |oldindex#0@@1| (LitInt 0) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|))))) (and (and (|$IsA#MutableBtreeBulkOperations.MB.Model.Abs.Node| |rightindex#0@@1|) (|$IsA#MutableBtreeBulkOperations.MB.Model.Abs.Node| (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex |oldindex#0@@1| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|)) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@1|))))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex#canCall| |oldindex#0@@1| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|)) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@1|)))))) (=> (and (and (and (|$IsA#MutableBtreeBulkOperations.MB.Model.Abs.Node| |rightindex#0@@1|) (|$IsA#MutableBtreeBulkOperations.MB.Model.Abs.Node| (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex |oldindex#0@@1| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|)) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@1|))))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex#canCall| |oldindex#0@@1| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|)) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@1|)))) (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| |rightindex#0@@1| (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex |oldindex#0@@1| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|)) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@1|))))) (forall ((|key#0@@186| T@U) ) (!  (=> (and (= (type |key#0@@186|) (SeqType BoxType)) ($Is |key#0@@186| (TSeq Tclass.NativeTypes.byte))) (and (and (|Sequences.__default.Last#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|)) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|))))) (=> (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|)))) ($Box |key#0@@186|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@186| |pivot#0@@21|)))) :qid |BtreeMod.437:16| :skolemid |3031| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@186| |pivot#0@@21|)) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|)))) ($Box |key#0@@186|))) )))) (=> (and (forall ((|key#0@@187| T@U) ) (!  (=> (and (= (type |key#0@@187|) (SeqType BoxType)) ($Is |key#0@@187| (TSeq Tclass.NativeTypes.byte))) (and (and (|Sequences.__default.Last#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|)) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|))))) (=> (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|)))) ($Box |key#0@@187|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@187| |pivot#0@@21|)))) :qid |BtreeMod.437:16| :skolemid |3033| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@187| |pivot#0@@21|)) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|)))) ($Box |key#0@@187|))) )) (forall ((|key#0@@188| T@U) ) (!  (=> (and (and (= (type |key#0@@188|) (SeqType BoxType)) ($Is |key#0@@188| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|)))) ($Box |key#0@@188|)))) (Lexicographic__Byte__Order.__default.lt |key#0@@188| |pivot#0@@21|)) :qid |BtreeMod.437:16| :skolemid |3034| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@188| |pivot#0@@21|)) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|)))) ($Box |key#0@@188|))) ))) (forall ((|key#1@@23| T@U) ) (!  (=> (and (= (type |key#1@@23|) (SeqType BoxType)) ($Is |key#1@@23| (TSeq Tclass.NativeTypes.byte))) (and (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |rightindex#0@@1|) (LitInt 0)))) (=> (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |rightindex#0@@1|) (LitInt 0)))) ($Box |key#1@@23|))) (|Lexicographic__Byte__Order.__default.lte#canCall| |pivot#0@@21| |key#1@@23|)))) :qid |BtreeMod.438:16| :skolemid |3032| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@21| |key#1@@23|)) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |rightindex#0@@1|) 0))) ($Box |key#1@@23|))) )))) (and (=> (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitIndex |oldindex#0@@1| |leftindex#0@@1| |rightindex#0@@1| |pivot#0@@21|) (and (and (and (and (and (and (and (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |oldindex#0@@1|) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |leftindex#0@@1|)) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |rightindex#0@@1|)) (and (< 0 (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|))) (< (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|)) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@1|))))) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@1|)) (+ (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldindex#0@@1|)) 1))) (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| |leftindex#0@@1| (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex |oldindex#0@@1| (LitInt 0) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|))))) (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| |rightindex#0@@1| (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex |oldindex#0@@1| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|)) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@1|))))) (forall ((|key#0@@189| T@U) ) (!  (=> (and (and (= (type |key#0@@189|) (SeqType BoxType)) ($Is |key#0@@189| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|)))) ($Box |key#0@@189|)))) (Lexicographic__Byte__Order.__default.lt |key#0@@189| |pivot#0@@21|)) :qid |BtreeMod.437:16| :skolemid |3037| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@189| |pivot#0@@21|)) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|)))) ($Box |key#0@@189|))) ))) (forall ((|key#1@@24| T@U) ) (!  (=> (and (and (= (type |key#1@@24|) (SeqType BoxType)) ($Is |key#1@@24| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |rightindex#0@@1|) (LitInt 0)))) ($Box |key#1@@24|)))) (Lexicographic__Byte__Order.__default.lte |pivot#0@@21| |key#1@@24|)) :qid |BtreeMod.438:16| :skolemid |3038| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@21| |key#1@@24|)) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |rightindex#0@@1|) 0))) ($Box |key#1@@24|))) ))) (|Seq#Equal| |pivot#0@@21| ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldindex#0@@1|) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |leftindex#0@@1|))))))) (=> (and (and (and (and (and (and (and (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |oldindex#0@@1|) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |leftindex#0@@1|)) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |rightindex#0@@1|)) (and (< 0 (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|))) (< (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|)) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@1|))))) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@1|)) (+ (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldindex#0@@1|)) 1))) (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| |leftindex#0@@1| (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex |oldindex#0@@1| (LitInt 0) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|))))) (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| |rightindex#0@@1| (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex |oldindex#0@@1| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|)) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@1|))))) (forall ((|key#0@@190| T@U) ) (!  (=> (and (and (= (type |key#0@@190|) (SeqType BoxType)) ($Is |key#0@@190| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|)))) ($Box |key#0@@190|)))) (Lexicographic__Byte__Order.__default.lt |key#0@@190| |pivot#0@@21|)) :qid |BtreeMod.437:16| :skolemid |3037| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@190| |pivot#0@@21|)) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@1|)))) ($Box |key#0@@190|))) ))) (forall ((|key#1@@25| T@U) ) (!  (=> (and (and (= (type |key#1@@25|) (SeqType BoxType)) ($Is |key#1@@25| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |rightindex#0@@1|) (LitInt 0)))) ($Box |key#1@@25|)))) (Lexicographic__Byte__Order.__default.lte |pivot#0@@21| |key#1@@25|)) :qid |BtreeMod.438:16| :skolemid |3038| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@21| |key#1@@25|)) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |rightindex#0@@1|) 0))) ($Box |key#1@@25|))) ))) (|Seq#Equal| |pivot#0@@21| ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldindex#0@@1|) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |leftindex#0@@1|)))))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitIndex |oldindex#0@@1| |leftindex#0@@1| |rightindex#0@@1| |pivot#0@@21|))))) :qid |BtreeMod.428:24| :skolemid |3039| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitIndex |oldindex#0@@1| |leftindex#0@@1| |rightindex#0@@1| |pivot#0@@21|)) ))))
(assert  (=> true (forall ((|oldindex#0@@2| T@U) (|leftindex#0@@2| T@U) (|rightindex#0@@2| T@U) (|pivot#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type |oldindex#0@@2|) DatatypeTypeType) (= (type |leftindex#0@@2|) DatatypeTypeType)) (= (type |rightindex#0@@2|) DatatypeTypeType)) (= (type |pivot#0@@22|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitIndex#canCall| (Lit |oldindex#0@@2|) (Lit |leftindex#0@@2|) (Lit |rightindex#0@@2|) (Lit |pivot#0@@22|)) (and (and (and ($Is |oldindex#0@@2| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |leftindex#0@@2| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |rightindex#0@@2| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |pivot#0@@22| (TSeq Tclass.NativeTypes.byte))))) (and (and (and (and (=> (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@2|)))) (+ (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldindex#0@@2|)))) 1)) (and (and (|$IsA#MutableBtreeBulkOperations.MB.Model.Abs.Node| (Lit |leftindex#0@@2|)) (|$IsA#MutableBtreeBulkOperations.MB.Model.Abs.Node| (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex (Lit |oldindex#0@@2|) (LitInt 0) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|))))))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex#canCall| (Lit |oldindex#0@@2|) (LitInt 0) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|))))))) (=> (and (and (and (|$IsA#MutableBtreeBulkOperations.MB.Model.Abs.Node| (Lit |leftindex#0@@2|)) (|$IsA#MutableBtreeBulkOperations.MB.Model.Abs.Node| (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex (Lit |oldindex#0@@2|) (LitInt 0) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|))))))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex#canCall| (Lit |oldindex#0@@2|) (LitInt 0) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|)))))) (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| |leftindex#0@@2| (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex (Lit |oldindex#0@@2|) (LitInt 0) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|))))))) (and (and (|$IsA#MutableBtreeBulkOperations.MB.Model.Abs.Node| (Lit |rightindex#0@@2|)) (|$IsA#MutableBtreeBulkOperations.MB.Model.Abs.Node| (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex (Lit |oldindex#0@@2|) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|)))) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@2|))))))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex#canCall| (Lit |oldindex#0@@2|) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|)))) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@2|)))))))) (=> (and (and (and (|$IsA#MutableBtreeBulkOperations.MB.Model.Abs.Node| (Lit |rightindex#0@@2|)) (|$IsA#MutableBtreeBulkOperations.MB.Model.Abs.Node| (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex (Lit |oldindex#0@@2|) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|)))) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@2|))))))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex#canCall| (Lit |oldindex#0@@2|) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|)))) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@2|)))))) (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| |rightindex#0@@2| (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex (Lit |oldindex#0@@2|) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|)))) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@2|))))))) (forall ((|key#2| T@U) ) (!  (=> (and (= (type |key#2|) (SeqType BoxType)) ($Is |key#2| (TSeq Tclass.NativeTypes.byte))) (and (and (|Sequences.__default.Last#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|)))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|)))))))) (=> (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|))))))) ($Box |key#2|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#2| (Lit |pivot#0@@22|))))) :qid |BtreeMod.437:16| :skolemid |3040| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#2| |pivot#0@@22|)) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@2|)))) ($Box |key#2|))) )))) (=> (and (forall ((|key#2@@0| T@U) ) (!  (=> (and (= (type |key#2@@0|) (SeqType BoxType)) ($Is |key#2@@0| (TSeq Tclass.NativeTypes.byte))) (and (and (|Sequences.__default.Last#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|)))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|)))))))) (=> (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|))))))) ($Box |key#2@@0|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |key#2@@0| (Lit |pivot#0@@22|))))) :qid |BtreeMod.437:16| :skolemid |3042| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#2@@0| |pivot#0@@22|)) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@2|)))) ($Box |key#2@@0|))) )) (forall ((|key#2@@1| T@U) ) (!  (=> (and (and (= (type |key#2@@1|) (SeqType BoxType)) ($Is |key#2@@1| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|))))))) ($Box |key#2@@1|)))) (Lexicographic__Byte__Order.__default.lt |key#2@@1| (Lit |pivot#0@@22|))) :qid |BtreeMod.437:16| :skolemid |3043| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#2@@1| |pivot#0@@22|)) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@2|)))) ($Box |key#2@@1|))) ))) (forall ((|key#3| T@U) ) (!  (=> (and (= (type |key#3|) (SeqType BoxType)) ($Is |key#3| (TSeq Tclass.NativeTypes.byte))) (and (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |rightindex#0@@2|))) (LitInt 0)))) (=> (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |rightindex#0@@2|))) (LitInt 0)))) ($Box |key#3|))) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |pivot#0@@22|) |key#3|)))) :qid |BtreeMod.438:16| :skolemid |3041| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@22| |key#3|)) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |rightindex#0@@2|) 0))) ($Box |key#3|))) )))) (and (=> (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitIndex (Lit |oldindex#0@@2|) (Lit |leftindex#0@@2|) (Lit |rightindex#0@@2|) (Lit |pivot#0@@22|)) (and (and (and (and (and (and (and (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (Lit |oldindex#0@@2|)) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (Lit |leftindex#0@@2|))) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (Lit |rightindex#0@@2|))) (and (< 0 (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|))))) (< (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|)))) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@2|))))))) (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@2|)))) (+ (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldindex#0@@2|)))) 1))) (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| |leftindex#0@@2| (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex (Lit |oldindex#0@@2|) (LitInt 0) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|))))))) (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| |rightindex#0@@2| (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex (Lit |oldindex#0@@2|) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|)))) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@2|))))))) (forall ((|key#2@@2| T@U) ) (!  (=> (and (and (= (type |key#2@@2|) (SeqType BoxType)) ($Is |key#2@@2| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|))))))) ($Box |key#2@@2|)))) (Lexicographic__Byte__Order.__default.lt |key#2@@2| (Lit |pivot#0@@22|))) :qid |BtreeMod.437:16| :skolemid |3046| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#2@@2| |pivot#0@@22|)) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@2|)))) ($Box |key#2@@2|))) ))) (forall ((|key#3@@0| T@U) ) (!  (=> (and (and (= (type |key#3@@0|) (SeqType BoxType)) ($Is |key#3@@0| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |rightindex#0@@2|))) (LitInt 0)))) ($Box |key#3@@0|)))) (Lexicographic__Byte__Order.__default.lte (Lit |pivot#0@@22|) |key#3@@0|)) :qid |BtreeMod.438:16| :skolemid |3047| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@22| |key#3@@0|)) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |rightindex#0@@2|) 0))) ($Box |key#3@@0|))) ))) (|Seq#Equal| |pivot#0@@22| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldindex#0@@2|))) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |leftindex#0@@2|))))))))) (=> (and (and (and (and (and (and (and (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (Lit |oldindex#0@@2|)) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (Lit |leftindex#0@@2|))) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (Lit |rightindex#0@@2|))) (and (< 0 (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|))))) (< (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|)))) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@2|))))))) (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@2|)))) (+ (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldindex#0@@2|)))) 1))) (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| |leftindex#0@@2| (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex (Lit |oldindex#0@@2|) (LitInt 0) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|))))))) (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| |rightindex#0@@2| (MutableBtreeBulkOperations.MB.Model.Abs.__default.SubIndex (Lit |oldindex#0@@2|) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|)))) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@2|))))))) (forall ((|key#2@@3| T@U) ) (!  (=> (and (and (= (type |key#2@@3|) (SeqType BoxType)) ($Is |key#2@@3| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |leftindex#0@@2|))))))) ($Box |key#2@@3|)))) (Lexicographic__Byte__Order.__default.lt |key#2@@3| (Lit |pivot#0@@22|))) :qid |BtreeMod.437:16| :skolemid |3046| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#2@@3| |pivot#0@@22|)) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |leftindex#0@@2|)))) ($Box |key#2@@3|))) ))) (forall ((|key#3@@1| T@U) ) (!  (=> (and (and (= (type |key#3@@1|) (SeqType BoxType)) ($Is |key#3@@1| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |rightindex#0@@2|))) (LitInt 0)))) ($Box |key#3@@1|)))) (Lexicographic__Byte__Order.__default.lte (Lit |pivot#0@@22|) |key#3@@1|)) :qid |BtreeMod.438:16| :skolemid |3047| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@22| |key#3@@1|)) :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |rightindex#0@@2|) 0))) ($Box |key#3@@1|))) ))) (|Seq#Equal| |pivot#0@@22| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldindex#0@@2|))) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |leftindex#0@@2|)))))))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitIndex (Lit |oldindex#0@@2|) (Lit |leftindex#0@@2|) (Lit |rightindex#0@@2|) (Lit |pivot#0@@22|)))))) :qid |BtreeMod.428:24| :weight 3 :skolemid |3048| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitIndex (Lit |oldindex#0@@2|) (Lit |leftindex#0@@2|) (Lit |rightindex#0@@2|) (Lit |pivot#0@@22|))) ))))
(assert  (=> true (forall ((|oldnode#0| T@U) (|leftnode#0| T@U) (|rightnode#0| T@U) (|pivot#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type |oldnode#0|) DatatypeTypeType) (= (type |leftnode#0|) DatatypeTypeType)) (= (type |rightnode#0|) DatatypeTypeType)) (= (type |pivot#0@@23|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode#canCall| |oldnode#0| |leftnode#0| |rightnode#0| |pivot#0@@23|) (and (and (and ($Is |oldnode#0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |leftnode#0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |rightnode#0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |pivot#0@@23| (TSeq Tclass.NativeTypes.byte))))) true) :qid |BtreeMod.589:23| :skolemid |3049| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode |oldnode#0| |leftnode#0| |rightnode#0| |pivot#0@@23|)) ))))
(assert (forall ((|oldnode#0@@0| T@U) (|leftnode#0@@0| T@U) (|rightnode#0@@0| T@U) (|pivot#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type |oldnode#0@@0|) DatatypeTypeType) (= (type |leftnode#0@@0|) DatatypeTypeType)) (= (type |rightnode#0@@0|) DatatypeTypeType)) (= (type |pivot#0@@24|) (SeqType BoxType))) (and (and (and ($Is |oldnode#0@@0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |leftnode#0@@0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |rightnode#0@@0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |pivot#0@@24| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode#requires| |oldnode#0@@0| |leftnode#0@@0| |rightnode#0@@0| |pivot#0@@24|) true) (=> true (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode#requires| |oldnode#0@@0| |leftnode#0@@0| |rightnode#0@@0| |pivot#0@@24|)))) :qid |BtreeMod.589:23| :skolemid |3050| :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode#requires| |oldnode#0@@0| |leftnode#0@@0| |rightnode#0@@0| |pivot#0@@24|)) )))
(assert  (=> true (forall ((|oldnode#0@@1| T@U) (|leftnode#0@@1| T@U) (|rightnode#0@@1| T@U) (|pivot#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type |oldnode#0@@1|) DatatypeTypeType) (= (type |leftnode#0@@1|) DatatypeTypeType)) (= (type |rightnode#0@@1|) DatatypeTypeType)) (= (type |pivot#0@@25|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode#canCall| |oldnode#0@@1| |leftnode#0@@1| |rightnode#0@@1| |pivot#0@@25|) (and (and (and ($Is |oldnode#0@@1| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |leftnode#0@@1| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |rightnode#0@@1| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |pivot#0@@25| (TSeq Tclass.NativeTypes.byte))))) (and (and (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf#canCall| |oldnode#0@@1| |leftnode#0@@1| |rightnode#0@@1| |pivot#0@@25|) (=> (not (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf |oldnode#0@@1| |leftnode#0@@1| |rightnode#0@@1| |pivot#0@@25|)) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitIndex#canCall| |oldnode#0@@1| |leftnode#0@@1| |rightnode#0@@1| |pivot#0@@25|))) (and (=> (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode |oldnode#0@@1| |leftnode#0@@1| |rightnode#0@@1| |pivot#0@@25|) (or (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf |oldnode#0@@1| |leftnode#0@@1| |rightnode#0@@1| |pivot#0@@25|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitIndex |oldnode#0@@1| |leftnode#0@@1| |rightnode#0@@1| |pivot#0@@25|))) (=> (or (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf |oldnode#0@@1| |leftnode#0@@1| |rightnode#0@@1| |pivot#0@@25|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitIndex |oldnode#0@@1| |leftnode#0@@1| |rightnode#0@@1| |pivot#0@@25|)) (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode |oldnode#0@@1| |leftnode#0@@1| |rightnode#0@@1| |pivot#0@@25|))))) :qid |BtreeMod.589:23| :skolemid |3051| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode |oldnode#0@@1| |leftnode#0@@1| |rightnode#0@@1| |pivot#0@@25|)) ))))
(assert  (=> true (forall ((|oldnode#0@@2| T@U) (|leftnode#0@@2| T@U) (|rightnode#0@@2| T@U) (|pivot#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type |oldnode#0@@2|) DatatypeTypeType) (= (type |leftnode#0@@2|) DatatypeTypeType)) (= (type |rightnode#0@@2|) DatatypeTypeType)) (= (type |pivot#0@@26|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode#canCall| (Lit |oldnode#0@@2|) (Lit |leftnode#0@@2|) (Lit |rightnode#0@@2|) (Lit |pivot#0@@26|)) (and (and (and ($Is |oldnode#0@@2| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |leftnode#0@@2| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |rightnode#0@@2| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) ($Is |pivot#0@@26| (TSeq Tclass.NativeTypes.byte))))) (and (and (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf#canCall| (Lit |oldnode#0@@2|) (Lit |leftnode#0@@2|) (Lit |rightnode#0@@2|) (Lit |pivot#0@@26|)) (=> (not (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf (Lit |oldnode#0@@2|) (Lit |leftnode#0@@2|) (Lit |rightnode#0@@2|) (Lit |pivot#0@@26|)))))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitIndex#canCall| (Lit |oldnode#0@@2|) (Lit |leftnode#0@@2|) (Lit |rightnode#0@@2|) (Lit |pivot#0@@26|)))) (and (=> (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode (Lit |oldnode#0@@2|) (Lit |leftnode#0@@2|) (Lit |rightnode#0@@2|) (Lit |pivot#0@@26|)) (U_2_bool (Lit (bool_2_U  (or (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf (Lit |oldnode#0@@2|) (Lit |leftnode#0@@2|) (Lit |rightnode#0@@2|) (Lit |pivot#0@@26|)) (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitIndex (Lit |oldnode#0@@2|) (Lit |leftnode#0@@2|) (Lit |rightnode#0@@2|) (Lit |pivot#0@@26|))))))) (=> (U_2_bool (Lit (bool_2_U  (or (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitLeaf (Lit |oldnode#0@@2|) (Lit |leftnode#0@@2|) (Lit |rightnode#0@@2|) (Lit |pivot#0@@26|)) (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitIndex (Lit |oldnode#0@@2|) (Lit |leftnode#0@@2|) (Lit |rightnode#0@@2|) (Lit |pivot#0@@26|)))))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode (Lit |oldnode#0@@2|) (Lit |leftnode#0@@2|) (Lit |rightnode#0@@2|) (Lit |pivot#0@@26|)))))) :qid |BtreeMod.589:23| :weight 3 :skolemid |3052| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode (Lit |oldnode#0@@2|) (Lit |leftnode#0@@2|) (Lit |rightnode#0@@2|) (Lit |pivot#0@@26|))) ))))
(assert  (=> true (forall ((|oldindex#0@@3| T@U) (|newindex#0| T@U) (|childidx#0| Int) ) (!  (=> (and (and (= (type |oldindex#0@@3|) DatatypeTypeType) (= (type |newindex#0|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitChildOfIndex#canCall| |oldindex#0@@3| |newindex#0| |childidx#0|) (and ($Is |oldindex#0@@3| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |newindex#0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)))) true) :qid |BtreeMod.723:31| :skolemid |3053| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitChildOfIndex |oldindex#0@@3| |newindex#0| |childidx#0|)) ))))
(assert (forall ((|oldindex#0@@4| T@U) (|newindex#0@@0| T@U) (|childidx#0@@0| Int) ) (!  (=> (and (and (= (type |oldindex#0@@4|) DatatypeTypeType) (= (type |newindex#0@@0|) DatatypeTypeType)) (and ($Is |oldindex#0@@4| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |newindex#0@@0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node))) (and (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitChildOfIndex#requires| |oldindex#0@@4| |newindex#0@@0| |childidx#0@@0|) true) (=> true (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitChildOfIndex#requires| |oldindex#0@@4| |newindex#0@@0| |childidx#0@@0|)))) :qid |BtreeMod.723:31| :skolemid |3054| :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitChildOfIndex#requires| |oldindex#0@@4| |newindex#0@@0| |childidx#0@@0|)) )))
(assert  (and (= (type StartFuel_Sequences._default.insert) LayerTypeType) (= (type StartFuel_Sequences._default.replace1with2) LayerTypeType)))
(assert  (=> true (forall ((|oldindex#0@@5| T@U) (|newindex#0@@1| T@U) (|childidx#0@@1| Int) ) (!  (=> (and (and (= (type |oldindex#0@@5|) DatatypeTypeType) (= (type |newindex#0@@1|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitChildOfIndex#canCall| |oldindex#0@@5| |newindex#0@@1| |childidx#0@@1|) (and ($Is |oldindex#0@@5| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |newindex#0@@1| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)))) (and (and (and (=> (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldindex#0@@5|)) (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@5|)) 1)) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@5|) |childidx#0@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newindex#0@@1|) |childidx#0@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newindex#0@@1|) (+ |childidx#0@@1| 1))) ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newindex#0@@1|) |childidx#0@@1|)))) (=> (and (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@5|) |childidx#0@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newindex#0@@1|) |childidx#0@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newindex#0@@1|) (+ |childidx#0@@1| 1))) ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newindex#0@@1|) |childidx#0@@1|))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@5|) |childidx#0@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newindex#0@@1|) |childidx#0@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newindex#0@@1|) (+ |childidx#0@@1| 1))) ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newindex#0@@1|) |childidx#0@@1|)))) (|Sequences.__default.insert#canCall| (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldindex#0@@5|) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newindex#0@@1|) |childidx#0@@1|) |childidx#0@@1|))) (=> (and (|Sequences.__default.insert#canCall| (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldindex#0@@5|) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newindex#0@@1|) |childidx#0@@1|) |childidx#0@@1|) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newindex#0@@1|) (Sequences.__default.insert (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.insert (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldindex#0@@5|) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newindex#0@@1|) |childidx#0@@1|) |childidx#0@@1|))) (|Sequences.__default.replace1with2#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@5|) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newindex#0@@1|) |childidx#0@@1|) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newindex#0@@1|) (+ |childidx#0@@1| 1)) |childidx#0@@1|))) (and (=> (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitChildOfIndex |oldindex#0@@5| |newindex#0@@1| |childidx#0@@1|) (and (and (and (and (and (and (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |oldindex#0@@5|) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |newindex#0@@1|)) (and (<= (LitInt 0) |childidx#0@@1|) (< |childidx#0@@1| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@5|))))) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newindex#0@@1|)) (+ (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@5|)) 1))) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newindex#0@@1|)) (+ (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldindex#0@@5|)) 1))) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldindex#0@@5|)) (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@5|)) 1))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@5|) |childidx#0@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newindex#0@@1|) |childidx#0@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newindex#0@@1|) (+ |childidx#0@@1| 1))) ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newindex#0@@1|) |childidx#0@@1|)))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newindex#0@@1|) (Sequences.__default.insert (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.insert (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldindex#0@@5|) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newindex#0@@1|) |childidx#0@@1|) |childidx#0@@1|))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newindex#0@@1|) (Sequences.__default.replace1with2 Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node StartFuel_Sequences._default.replace1with2 (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@5|) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newindex#0@@1|) |childidx#0@@1|) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newindex#0@@1|) (+ |childidx#0@@1| 1)) |childidx#0@@1|)))) (=> (and (and (and (and (and (and (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |oldindex#0@@5|) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |newindex#0@@1|)) (and (<= (LitInt 0) |childidx#0@@1|) (< |childidx#0@@1| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@5|))))) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newindex#0@@1|)) (+ (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@5|)) 1))) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newindex#0@@1|)) (+ (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldindex#0@@5|)) 1))) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldindex#0@@5|)) (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@5|)) 1))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@5|) |childidx#0@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newindex#0@@1|) |childidx#0@@1|)) ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newindex#0@@1|) (+ |childidx#0@@1| 1))) ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newindex#0@@1|) |childidx#0@@1|)))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newindex#0@@1|) (Sequences.__default.insert (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.insert (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldindex#0@@5|) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newindex#0@@1|) |childidx#0@@1|) |childidx#0@@1|))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newindex#0@@1|) (Sequences.__default.replace1with2 Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node StartFuel_Sequences._default.replace1with2 (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldindex#0@@5|) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newindex#0@@1|) |childidx#0@@1|) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newindex#0@@1|) (+ |childidx#0@@1| 1)) |childidx#0@@1|))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitChildOfIndex |oldindex#0@@5| |newindex#0@@1| |childidx#0@@1|))))) :qid |BtreeMod.723:31| :skolemid |3055| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitChildOfIndex |oldindex#0@@5| |newindex#0@@1| |childidx#0@@1|)) ))))
(assert  (=> true (forall ((|oldindex#0@@6| T@U) (|newindex#0@@2| T@U) (|childidx#0@@2| Int) ) (!  (=> (and (and (= (type |oldindex#0@@6|) DatatypeTypeType) (= (type |newindex#0@@2|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitChildOfIndex#canCall| (Lit |oldindex#0@@6|) (Lit |newindex#0@@2|) (LitInt |childidx#0@@2|)) (and ($Is |oldindex#0@@6| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |newindex#0@@2| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)))) (and (and (and (=> (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldindex#0@@6|)))) (- (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@6|)))) 1)) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@6|))) (LitInt |childidx#0@@2|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newindex#0@@2|))) (LitInt (+ |childidx#0@@2| 1)))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|))))) (=> (and (|MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@6|))) (LitInt |childidx#0@@2|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newindex#0@@2|))) (LitInt (+ |childidx#0@@2| 1)))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|)))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@6|))) (LitInt |childidx#0@@2|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newindex#0@@2|))) (LitInt (+ |childidx#0@@2| 1)))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|))))) (|Sequences.__default.insert#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldindex#0@@6|))) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|)) (LitInt |childidx#0@@2|)))) (=> (and (|Sequences.__default.insert#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldindex#0@@6|))) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|)) (LitInt |childidx#0@@2|)) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newindex#0@@2|)) (Sequences.__default.insert (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.insert (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldindex#0@@6|))) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|)) (LitInt |childidx#0@@2|)))) (|Sequences.__default.replace1with2#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@6|))) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|)) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newindex#0@@2|))) (LitInt (+ |childidx#0@@2| 1))) (LitInt |childidx#0@@2|)))) (and (=> (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitChildOfIndex (Lit |oldindex#0@@6|) (Lit |newindex#0@@2|) (LitInt |childidx#0@@2|)) (and (and (and (and (and (and (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (Lit |oldindex#0@@6|)) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (Lit |newindex#0@@2|))) (and (<= (LitInt 0) (LitInt |childidx#0@@2|)) (< |childidx#0@@2| (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@6|))))))) (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newindex#0@@2|)))) (+ (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@6|)))) 1))) (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newindex#0@@2|)))) (+ (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldindex#0@@6|)))) 1))) (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldindex#0@@6|)))) (- (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@6|)))) 1))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@6|))) (LitInt |childidx#0@@2|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newindex#0@@2|))) (LitInt (+ |childidx#0@@2| 1)))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|))))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newindex#0@@2|)) (Sequences.__default.insert (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.insert (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldindex#0@@6|))) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|)) (LitInt |childidx#0@@2|)))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newindex#0@@2|)) (Sequences.__default.replace1with2 Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node StartFuel_Sequences._default.replace1with2 (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@6|))) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|)) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newindex#0@@2|))) (LitInt (+ |childidx#0@@2| 1))) (LitInt |childidx#0@@2|))))) (=> (and (and (and (and (and (and (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (Lit |oldindex#0@@6|)) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (Lit |newindex#0@@2|))) (and (<= (LitInt 0) (LitInt |childidx#0@@2|)) (< |childidx#0@@2| (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@6|))))))) (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newindex#0@@2|)))) (+ (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@6|)))) 1))) (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newindex#0@@2|)))) (+ (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldindex#0@@6|)))) 1))) (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldindex#0@@6|)))) (- (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@6|)))) 1))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitNode ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@6|))) (LitInt |childidx#0@@2|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newindex#0@@2|))) (LitInt (+ |childidx#0@@2| 1)))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|))))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newindex#0@@2|)) (Sequences.__default.insert (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.insert (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldindex#0@@6|))) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|)) (LitInt |childidx#0@@2|)))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newindex#0@@2|)) (Sequences.__default.replace1with2 Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node StartFuel_Sequences._default.replace1with2 (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldindex#0@@6|))) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newindex#0@@2|))) (LitInt |childidx#0@@2|)) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newindex#0@@2|))) (LitInt (+ |childidx#0@@2| 1))) (LitInt |childidx#0@@2|)))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitChildOfIndex (Lit |oldindex#0@@6|) (Lit |newindex#0@@2|) (LitInt |childidx#0@@2|)))))) :qid |BtreeMod.723:31| :weight 3 :skolemid |3056| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.SplitChildOfIndex (Lit |oldindex#0@@6|) (Lit |newindex#0@@2|) (LitInt |childidx#0@@2|))) ))))
(assert (forall ((arg0@@351 T@U) (arg1@@219 T@U) (arg2@@131 T@U) ) (! (= (type (MutableBtreeBulkOperations.MB.Model.Abs.__default.InsertLeaf arg0@@351 arg1@@219 arg2@@131)) DatatypeTypeType) :qid |funType:MutableBtreeBulkOperations.MB.Model.Abs.__default.InsertLeaf| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.InsertLeaf arg0@@351 arg1@@219 arg2@@131)) )))
(assert  (=> true (forall ((|leaf#0| T@U) (|key#0@@191| T@U) (|value#0| T@U) ) (!  (=> (and (and (and (= (type |leaf#0|) DatatypeTypeType) (= (type |key#0@@191|) (SeqType BoxType))) (= (type |value#0|) BoxType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.InsertLeaf#canCall| |leaf#0| |key#0@@191| |value#0|) (and (and (and ($Is |leaf#0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |key#0@@191| (TSeq Tclass.NativeTypes.byte))) ($IsBox |value#0| |#$Value|)) (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |leaf#0|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |leaf#0|))))) (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (MutableBtreeBulkOperations.MB.Model.Abs.__default.InsertLeaf |leaf#0| |key#0@@191| |value#0|)) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (MutableBtreeBulkOperations.MB.Model.Abs.__default.InsertLeaf |leaf#0| |key#0@@191| |value#0|))) ($Is (MutableBtreeBulkOperations.MB.Model.Abs.__default.InsertLeaf |leaf#0| |key#0@@191| |value#0|) Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node))) :qid |BtreeMod.1001:23| :skolemid |3057| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.InsertLeaf |leaf#0| |key#0@@191| |value#0|)) ))))
(assert (forall ((|leaf#0@@0| T@U) (|key#0@@192| T@U) (|value#0@@0| T@U) ) (!  (=> (and (and (and (= (type |leaf#0@@0|) DatatypeTypeType) (= (type |key#0@@192|) (SeqType BoxType))) (= (type |value#0@@0|) BoxType)) (and (and ($Is |leaf#0@@0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |key#0@@192| (TSeq Tclass.NativeTypes.byte))) ($IsBox |value#0@@0| |#$Value|))) (and (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.InsertLeaf#requires| |leaf#0@@0| |key#0@@192| |value#0@@0|) (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |leaf#0@@0|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |leaf#0@@0|))) (=> (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |leaf#0@@0|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |leaf#0@@0|)) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.InsertLeaf#requires| |leaf#0@@0| |key#0@@192| |value#0@@0|)))) :qid |BtreeMod.1001:23| :skolemid |3058| :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.__default.InsertLeaf#requires| |leaf#0@@0| |key#0@@192| |value#0@@0|)) )))
(assert  (=> true (forall ((|leaf#0@@1| T@U) (|key#0@@193| T@U) (|value#0@@1| T@U) ) (!  (=> (and (and (and (= (type |leaf#0@@1|) DatatypeTypeType) (= (type |key#0@@193|) (SeqType BoxType))) (= (type |value#0@@1|) BoxType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.InsertLeaf#canCall| |leaf#0@@1| |key#0@@193| |value#0@@1|) (and (and (and ($Is |leaf#0@@1| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |key#0@@193| (TSeq Tclass.NativeTypes.byte))) ($IsBox |value#0@@1| |#$Value|)) (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |leaf#0@@1|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |leaf#0@@1|))))) (and (and (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |leaf#0@@1|) |key#0@@193|) (let ((|llte#0| (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |leaf#0@@1|) |key#0@@193|))) (=> (not (and (<= (LitInt 0) |llte#0|) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |leaf#0@@1|) |llte#0|)) |key#0@@193|))) (and (|Sequences.__default.insert#canCall| (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |leaf#0@@1|) ($Box |key#0@@193|) (+ |llte#0| 1)) (|Sequences.__default.insert#canCall| |#$Value| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values |leaf#0@@1|) |value#0@@1| (+ |llte#0| 1)))))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.InsertLeaf |leaf#0@@1| |key#0@@193| |value#0@@1|) (let ((|llte#0@@0| (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |leaf#0@@1|) |key#0@@193|))) (ite  (and (<= (LitInt 0) |llte#0@@0|) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |leaf#0@@1|) |llte#0@@0|)) |key#0@@193|)) (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |leaf#0@@1|) (|Seq#Update| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values |leaf#0@@1|) |llte#0@@0| |value#0@@1|)) (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| (Sequences.__default.insert (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.insert (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |leaf#0@@1|) ($Box |key#0@@193|) (+ |llte#0@@0| 1)) (Sequences.__default.insert |#$Value| StartFuel_Sequences._default.insert (MutableBtreeBulkOperations.MB.Model.Abs.Node.values |leaf#0@@1|) |value#0@@1| (+ |llte#0@@0| 1)))))))) :qid |BtreeMod.1001:23| :skolemid |3059| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.InsertLeaf |leaf#0@@1| |key#0@@193| |value#0@@1|)) ))))
(assert  (=> true (forall ((|leaf#0@@2| T@U) (|key#0@@194| T@U) (|value#0@@2| T@U) ) (!  (=> (and (and (and (= (type |leaf#0@@2|) DatatypeTypeType) (= (type |key#0@@194|) (SeqType BoxType))) (= (type |value#0@@2|) BoxType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.InsertLeaf#canCall| (Lit |leaf#0@@2|) (Lit |key#0@@194|) |value#0@@2|) (and (and (and ($Is |leaf#0@@2| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |key#0@@194| (TSeq Tclass.NativeTypes.byte))) ($IsBox |value#0@@2| |#$Value|)) (and (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |leaf#0@@2|))))) (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (Lit |leaf#0@@2|))))))))) (and (and (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leaf#0@@2|))) (Lit |key#0@@194|)) (let ((|llte#1| (LitInt (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leaf#0@@2|))) (Lit |key#0@@194|))))) (=> (not (and (<= (LitInt 0) |llte#1|) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leaf#0@@2|))) |llte#1|)) |key#0@@194|))) (and (|Sequences.__default.insert#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leaf#0@@2|))) ($Box (Lit |key#0@@194|)) (+ |llte#1| 1)) (|Sequences.__default.insert#canCall| |#$Value| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |leaf#0@@2|))) |value#0@@2| (+ |llte#1| 1)))))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.InsertLeaf (Lit |leaf#0@@2|) (Lit |key#0@@194|) |value#0@@2|) (let ((|llte#1@@0| (LitInt (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leaf#0@@2|))) (Lit |key#0@@194|))))) (ite  (and (<= (LitInt 0) |llte#1@@0|) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leaf#0@@2|))) |llte#1@@0|)) |key#0@@194|)) (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leaf#0@@2|))) (|Seq#Update| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |leaf#0@@2|))) |llte#1@@0| |value#0@@2|)) (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| (Sequences.__default.insert (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.insert (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leaf#0@@2|))) ($Box (Lit |key#0@@194|)) (LitInt (+ |llte#1@@0| 1))) (Sequences.__default.insert |#$Value| StartFuel_Sequences._default.insert (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |leaf#0@@2|))) |value#0@@2| (LitInt (+ |llte#1@@0| 1))))))))) :qid |BtreeMod.1001:23| :weight 3 :skolemid |3060| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.InsertLeaf (Lit |leaf#0@@2|) (Lit |key#0@@194|) |value#0@@2|)) ))))
(assert  (=> true (forall ((|leaf#0@@3| T@U) (|key#0@@195| T@U) (|value#0@@3| T@U) ) (!  (=> (and (and (and (= (type |leaf#0@@3|) DatatypeTypeType) (= (type |key#0@@195|) (SeqType BoxType))) (= (type |value#0@@3|) BoxType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.InsertLeaf#canCall| (Lit |leaf#0@@3|) (Lit |key#0@@195|) (Lit |value#0@@3|)) (and (and (and ($Is |leaf#0@@3| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |key#0@@195| (TSeq Tclass.NativeTypes.byte))) ($IsBox |value#0@@3| |#$Value|)) (and (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |leaf#0@@3|))))) (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (Lit |leaf#0@@3|))))))))) (and (and (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leaf#0@@3|))) (Lit |key#0@@195|)) (let ((|llte#2| (LitInt (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leaf#0@@3|))) (Lit |key#0@@195|))))) (=> (not (and (<= (LitInt 0) |llte#2|) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leaf#0@@3|))) |llte#2|)) |key#0@@195|))) (and (|Sequences.__default.insert#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leaf#0@@3|))) ($Box (Lit |key#0@@195|)) (+ |llte#2| 1)) (|Sequences.__default.insert#canCall| |#$Value| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |leaf#0@@3|))) (Lit |value#0@@3|) (+ |llte#2| 1)))))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.InsertLeaf (Lit |leaf#0@@3|) (Lit |key#0@@195|) (Lit |value#0@@3|)) (let ((|llte#2@@0| (LitInt (Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leaf#0@@3|))) (Lit |key#0@@195|))))) (ite  (and (<= (LitInt 0) |llte#2@@0|) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leaf#0@@3|))) |llte#2@@0|)) |key#0@@195|)) (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leaf#0@@3|))) (|Seq#Update| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |leaf#0@@3|))) |llte#2@@0| (Lit |value#0@@3|))) (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| (Sequences.__default.insert (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.insert (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |leaf#0@@3|))) ($Box (Lit |key#0@@195|)) (LitInt (+ |llte#2@@0| 1))) (Sequences.__default.insert |#$Value| StartFuel_Sequences._default.insert (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |leaf#0@@3|))) (Lit |value#0@@3|) (LitInt (+ |llte#2@@0| 1))))))))) :qid |BtreeMod.1001:23| :weight 3 :skolemid |3061| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.InsertLeaf (Lit |leaf#0@@3|) (Lit |key#0@@195|) (Lit |value#0@@3|))) ))))
(assert (forall ((arg0@@352 T@U) ) (! (= (type (MutableBtreeBulkOperations.MB.Model.Abs.__default.Grow arg0@@352)) DatatypeTypeType) :qid |funType:MutableBtreeBulkOperations.MB.Model.Abs.__default.Grow| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.Grow arg0@@352)) )))
(assert  (=> true (forall ((|node#0@@45| T@U) ) (!  (=> (and (= (type |node#0@@45|) DatatypeTypeType) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.Grow#canCall| |node#0@@45|) ($Is |node#0@@45| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node))) ($Is (MutableBtreeBulkOperations.MB.Model.Abs.__default.Grow |node#0@@45|) Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) :qid |BtreeMod.1134:17| :skolemid |3062| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.Grow |node#0@@45|)) ))))
(assert (forall ((|node#0@@46| T@U) ) (!  (=> (and (= (type |node#0@@46|) DatatypeTypeType) ($Is |node#0@@46| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) (and (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.Grow#requires| |node#0@@46|) true) (=> true (|MutableBtreeBulkOperations.MB.Model.Abs.__default.Grow#requires| |node#0@@46|)))) :qid |BtreeMod.1134:17| :skolemid |3063| :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.__default.Grow#requires| |node#0@@46|)) )))
(assert  (=> true (forall ((|node#0@@47| T@U) ) (!  (=> (and (= (type |node#0@@47|) DatatypeTypeType) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.Grow#canCall| |node#0@@47|) ($Is |node#0@@47| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.Grow |node#0@@47|) (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| (Lit (|Seq#Empty| BoxType)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |node#0@@47|))))) :qid |BtreeMod.1134:17| :skolemid |3064| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.Grow |node#0@@47|)) ))))
(assert  (=> true (forall ((|node#0@@48| T@U) ) (!  (=> (and (= (type |node#0@@48|) DatatypeTypeType) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.Grow#canCall| (Lit |node#0@@48|)) ($Is |node#0@@48| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.Grow (Lit |node#0@@48|)) (Lit (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit |node#0@@48|)))))))) :qid |BtreeMod.1134:17| :weight 3 :skolemid |3065| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.Grow (Lit |node#0@@48|))) ))))
(assert (forall ((arg0@@353 T@U) (arg1@@220 Int) (arg2@@132 T@U) ) (! (= (type (MutableBtreeBulkOperations.MB.Model.Abs.__default.ReplacePivot arg0@@353 arg1@@220 arg2@@132)) DatatypeTypeType) :qid |funType:MutableBtreeBulkOperations.MB.Model.Abs.__default.ReplacePivot| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.ReplacePivot arg0@@353 arg1@@220 arg2@@132)) )))
(assert  (=> true (forall ((|node#0@@49| T@U) (|pivotidx#0| Int) (|pivot#0@@27| T@U) ) (!  (=> (and (and (= (type |node#0@@49|) DatatypeTypeType) (= (type |pivot#0@@27|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ReplacePivot#canCall| |node#0@@49| |pivotidx#0| |pivot#0@@27|) (and (and ($Is |node#0@@49| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |pivot#0@@27| (TSeq Tclass.NativeTypes.byte))) (and (and (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@49|) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |node#0@@49|)) (and (<= (LitInt 0) |pivotidx#0|) (< |pivotidx#0| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@49|)))))))) ($Is (MutableBtreeBulkOperations.MB.Model.Abs.__default.ReplacePivot |node#0@@49| |pivotidx#0| |pivot#0@@27|) Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) :qid |BtreeMod.1175:25| :skolemid |3066| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.ReplacePivot |node#0@@49| |pivotidx#0| |pivot#0@@27|)) ))))
(assert (forall ((|node#0@@50| T@U) (|pivotidx#0@@0| Int) (|pivot#0@@28| T@U) ) (!  (=> (and (and (= (type |node#0@@50|) DatatypeTypeType) (= (type |pivot#0@@28|) (SeqType BoxType))) (and ($Is |node#0@@50| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |pivot#0@@28| (TSeq Tclass.NativeTypes.byte)))) (and (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ReplacePivot#requires| |node#0@@50| |pivotidx#0@@0| |pivot#0@@28|) (and (and (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@50|) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |node#0@@50|)) (and (<= (LitInt 0) |pivotidx#0@@0|) (< |pivotidx#0@@0| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@50|)))))) (=> (and (and (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@50|) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |node#0@@50|)) (and (<= (LitInt 0) |pivotidx#0@@0|) (< |pivotidx#0@@0| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@50|))))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ReplacePivot#requires| |node#0@@50| |pivotidx#0@@0| |pivot#0@@28|)))) :qid |BtreeMod.1175:25| :skolemid |3067| :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ReplacePivot#requires| |node#0@@50| |pivotidx#0@@0| |pivot#0@@28|)) )))
(assert  (=> true (forall ((|node#0@@51| T@U) (|pivotidx#0@@1| Int) (|pivot#0@@29| T@U) ) (!  (=> (and (and (= (type |node#0@@51|) DatatypeTypeType) (= (type |pivot#0@@29|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ReplacePivot#canCall| |node#0@@51| |pivotidx#0@@1| |pivot#0@@29|) (and (and ($Is |node#0@@51| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |pivot#0@@29| (TSeq Tclass.NativeTypes.byte))) (and (and (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@51|) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |node#0@@51|)) (and (<= (LitInt 0) |pivotidx#0@@1|) (< |pivotidx#0@@1| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@51|)))))))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.ReplacePivot |node#0@@51| |pivotidx#0@@1| |pivot#0@@29|) (let ((|dt_update_tmp#0#0| |node#0@@51|)) (let ((|dt_update#pivots#0#0| (|Seq#Update| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |node#0@@51|) |pivotidx#0@@1| ($Box |pivot#0@@29|)))) (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |dt_update#pivots#0#0| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |dt_update_tmp#0#0|)))))) :qid |BtreeMod.1175:25| :skolemid |3068| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.ReplacePivot |node#0@@51| |pivotidx#0@@1| |pivot#0@@29|)) ))))
(assert  (=> true (forall ((|node#0@@52| T@U) (|pivotidx#0@@2| Int) (|pivot#0@@30| T@U) ) (!  (=> (and (and (= (type |node#0@@52|) DatatypeTypeType) (= (type |pivot#0@@30|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ReplacePivot#canCall| (Lit |node#0@@52|) (LitInt |pivotidx#0@@2|) (Lit |pivot#0@@30|)) (and (and ($Is |node#0@@52| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |pivot#0@@30| (TSeq Tclass.NativeTypes.byte))) (and (and (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (Lit |node#0@@52|))))) (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (Lit |node#0@@52|)))))) (and (<= (LitInt 0) (LitInt |pivotidx#0@@2|)) (< |pivotidx#0@@2| (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@52|)))))))))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.ReplacePivot (Lit |node#0@@52|) (LitInt |pivotidx#0@@2|) (Lit |pivot#0@@30|)) (let ((|dt_update_tmp#0#1| (Lit |node#0@@52|))) (let ((|dt_update#pivots#0#1| (|Seq#Update| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |node#0@@52|))) (LitInt |pivotidx#0@@2|) ($Box (Lit |pivot#0@@30|))))) (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| |dt_update#pivots#0#1| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |dt_update_tmp#0#1|))))))) :qid |BtreeMod.1175:25| :weight 3 :skolemid |3069| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.ReplacePivot (Lit |node#0@@52|) (LitInt |pivotidx#0@@2|) (Lit |pivot#0@@30|))) ))))
(assert  (=> true (forall ((|oldparent#0| T@U) (|newparent#0| T@U) ) (!  (=> (and (and (= (type |oldparent#0|) DatatypeTypeType) (= (type |newparent#0|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AppendChild#canCall| |oldparent#0| |newparent#0|) (and ($Is |oldparent#0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |newparent#0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)))) true) :qid |BtreeMod.1286:25| :skolemid |3070| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AppendChild |oldparent#0| |newparent#0|)) ))))
(assert (forall ((|oldparent#0@@0| T@U) (|newparent#0@@0| T@U) ) (!  (=> (and (and (= (type |oldparent#0@@0|) DatatypeTypeType) (= (type |newparent#0@@0|) DatatypeTypeType)) (and ($Is |oldparent#0@@0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |newparent#0@@0| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node))) (and (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AppendChild#requires| |oldparent#0@@0| |newparent#0@@0|) true) (=> true (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AppendChild#requires| |oldparent#0@@0| |newparent#0@@0|)))) :qid |BtreeMod.1286:25| :skolemid |3071| :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AppendChild#requires| |oldparent#0@@0| |newparent#0@@0|)) )))
(assert  (=> true (forall ((|oldparent#0@@1| T@U) (|newparent#0@@1| T@U) ) (!  (=> (and (and (= (type |oldparent#0@@1|) DatatypeTypeType) (= (type |newparent#0@@1|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AppendChild#canCall| |oldparent#0@@1| |newparent#0@@1|) (and ($Is |oldparent#0@@1| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |newparent#0@@1| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)))) (and (and (and (and (and (=> (and (< 1 (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newparent#0@@1|))) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newparent#0@@1|)) (+ (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newparent#0@@1|)) 1))) (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newparent#0@@1|))) (=> (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newparent#0@@1|)) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newparent#0@@1|) (|Seq#Append| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldparent#0@@1|) (|Seq#Build| (|Seq#Empty| BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newparent#0@@1|)))))) (|Sequences.__default.Last#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newparent#0@@1|)))) (=> (and (|Sequences.__default.Last#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newparent#0@@1|)) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newparent#0@@1|) (|Seq#Append| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldparent#0@@1|) (|Seq#Build| (|Seq#Empty| BoxType) (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newparent#0@@1|)))))) (=> (< 0 (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldparent#0@@1|))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldparent#0@@1|)) (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newparent#0@@1|))) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldparent#0@@1|))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newparent#0@@1|)))))))) (=> (and (=> (< 0 (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldparent#0@@1|))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldparent#0@@1|)) (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newparent#0@@1|))) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldparent#0@@1|))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newparent#0@@1|)))))) (=> (< 0 (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldparent#0@@1|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldparent#0@@1|))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newparent#0@@1|)))))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound#canCall| |newparent#0@@1| (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newparent#0@@1|)) 2)))) (=> (and (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound#canCall| |newparent#0@@1| (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newparent#0@@1|)) 2)) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound |newparent#0@@1| (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newparent#0@@1|)) 2))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound#canCall| |newparent#0@@1| (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newparent#0@@1|)) 1)))) (and (=> (MutableBtreeBulkOperations.MB.Model.Abs.__default.AppendChild |oldparent#0@@1| |newparent#0@@1|) (and (and (and (and (and (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |oldparent#0@@1|) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |newparent#0@@1|)) (and (< 1 (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newparent#0@@1|))) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newparent#0@@1|)) (+ (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newparent#0@@1|)) 1)))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newparent#0@@1|) (|Seq#Append| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldparent#0@@1|) (|Seq#Build| (|Seq#Empty| BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newparent#0@@1|)))))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newparent#0@@1|) (|Seq#Append| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldparent#0@@1|) (|Seq#Build| (|Seq#Empty| BoxType) (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newparent#0@@1|)))))) (=> (< 0 (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldparent#0@@1|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldparent#0@@1|))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newparent#0@@1|)))))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound |newparent#0@@1| (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newparent#0@@1|)) 2))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound |newparent#0@@1| (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newparent#0@@1|)) 1)))) (=> (and (and (and (and (and (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |oldparent#0@@1|) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q |newparent#0@@1|)) (and (< 1 (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newparent#0@@1|))) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newparent#0@@1|)) (+ (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newparent#0@@1|)) 1)))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newparent#0@@1|) (|Seq#Append| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldparent#0@@1|) (|Seq#Build| (|Seq#Empty| BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newparent#0@@1|)))))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newparent#0@@1|) (|Seq#Append| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |oldparent#0@@1|) (|Seq#Build| (|Seq#Empty| BoxType) (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newparent#0@@1|)))))) (=> (< 0 (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldparent#0@@1|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |oldparent#0@@1|))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots |newparent#0@@1|)))))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound |newparent#0@@1| (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newparent#0@@1|)) 2))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound |newparent#0@@1| (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |newparent#0@@1|)) 1))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AppendChild |oldparent#0@@1| |newparent#0@@1|))))) :qid |BtreeMod.1286:25| :skolemid |3072| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AppendChild |oldparent#0@@1| |newparent#0@@1|)) ))))
(assert  (=> true (forall ((|oldparent#0@@2| T@U) (|newparent#0@@2| T@U) ) (!  (=> (and (and (= (type |oldparent#0@@2|) DatatypeTypeType) (= (type |newparent#0@@2|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AppendChild#canCall| (Lit |oldparent#0@@2|) (Lit |newparent#0@@2|)) (and ($Is |oldparent#0@@2| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) ($Is |newparent#0@@2| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)))) (and (and (and (and (and (=> (and (< 1 (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newparent#0@@2|))))) (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newparent#0@@2|)))) (+ (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newparent#0@@2|)))) 1))) (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newparent#0@@2|))))) (=> (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newparent#0@@2|)))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newparent#0@@2|)) (|Seq#Append| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldparent#0@@2|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newparent#0@@2|))))))))))) (|Sequences.__default.Last#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newparent#0@@2|)))))) (=> (and (|Sequences.__default.Last#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newparent#0@@2|)))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newparent#0@@2|)) (|Seq#Append| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldparent#0@@2|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newparent#0@@2|))))))))))) (=> (< 0 (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldparent#0@@2|))))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldparent#0@@2|)))) (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newparent#0@@2|))))) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldparent#0@@2|)))))) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newparent#0@@2|))))))))))) (=> (and (=> (< 0 (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldparent#0@@2|))))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldparent#0@@2|)))) (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newparent#0@@2|))))) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldparent#0@@2|)))))) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newparent#0@@2|))))))))) (=> (< 0 (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldparent#0@@2|))))) (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldparent#0@@2|)))))) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newparent#0@@2|))))))))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound#canCall| (Lit |newparent#0@@2|) (- (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newparent#0@@2|)))) 2)))) (=> (and (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound#canCall| (Lit |newparent#0@@2|) (- (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newparent#0@@2|)))) 2)) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound (Lit |newparent#0@@2|) (- (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newparent#0@@2|)))) 2))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound#canCall| (Lit |newparent#0@@2|) (- (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newparent#0@@2|)))) 1)))) (and (=> (MutableBtreeBulkOperations.MB.Model.Abs.__default.AppendChild (Lit |oldparent#0@@2|) (Lit |newparent#0@@2|)) (and (and (and (and (and (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (Lit |oldparent#0@@2|)) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (Lit |newparent#0@@2|))) (and (< 1 (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newparent#0@@2|))))) (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newparent#0@@2|)))) (+ (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newparent#0@@2|)))) 1)))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newparent#0@@2|)) (|Seq#Append| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldparent#0@@2|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newparent#0@@2|))))))))))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newparent#0@@2|)) (|Seq#Append| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldparent#0@@2|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newparent#0@@2|))))))))))) (=> (< 0 (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldparent#0@@2|))))) (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldparent#0@@2|)))))) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newparent#0@@2|))))))))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound (Lit |newparent#0@@2|) (- (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newparent#0@@2|)))) 2))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound (Lit |newparent#0@@2|) (- (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newparent#0@@2|)))) 1)))) (=> (and (and (and (and (and (and (and (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (Lit |oldparent#0@@2|)) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (Lit |newparent#0@@2|))) (and (< 1 (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newparent#0@@2|))))) (= (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newparent#0@@2|)))) (+ (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newparent#0@@2|)))) 1)))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newparent#0@@2|)) (|Seq#Append| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldparent#0@@2|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newparent#0@@2|))))))))))) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newparent#0@@2|)) (|Seq#Append| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |oldparent#0@@2|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newparent#0@@2|))))))))))) (=> (< 0 (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldparent#0@@2|))))) (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |oldparent#0@@2|)))))) (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (Lit |newparent#0@@2|))))))))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound (Lit |newparent#0@@2|) (- (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newparent#0@@2|)))) 2))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound (Lit |newparent#0@@2|) (- (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |newparent#0@@2|)))) 1))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AppendChild (Lit |oldparent#0@@2|) (Lit |newparent#0@@2|)))))) :qid |BtreeMod.1286:25| :weight 3 :skolemid |3073| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AppendChild (Lit |oldparent#0@@2|) (Lit |newparent#0@@2|))) ))))
(assert (forall (($ly@@718 T@U) (|nodes#0| T@U) ) (!  (=> (and (= (type $ly@@718) LayerTypeType) (= (type |nodes#0|) (SeqType BoxType))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren ($LS $ly@@718) |nodes#0|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren $ly@@718 |nodes#0|))) :qid |BtreeMod.1428:12| :skolemid |3074| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren ($LS $ly@@718) |nodes#0|)) )))
(assert (forall (($ly@@719 T@U) (|nodes#0@@0| T@U) ) (!  (=> (and (= (type $ly@@719) LayerTypeType) (= (type |nodes#0@@0|) (SeqType BoxType))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren $ly@@719 |nodes#0@@0|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren $LZ |nodes#0@@0|))) :qid |BtreeMod.1428:12| :skolemid |3075| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren (AsFuelBottom $ly@@719) |nodes#0@@0|)) )))
(assert  (=> true (forall (($ly@@720 T@U) (|nodes#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@720) LayerTypeType) (= (type |nodes#0@@1|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren#canCall| |nodes#0@@1|) (and ($Is |nodes#0@@1| (TSeq Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) (forall ((|i#0@@140| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@140|) (< |i#0@@140| (|Seq#Length| |nodes#0@@1|))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |i#0@@140|))))) :qid |BtreeMod.1429:21| :skolemid |3076| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@1| |i#0@@140|))) ))))) (<= (LitInt 0) (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren $ly@@720 |nodes#0@@1|))) :qid |BtreeMod.1428:12| :skolemid |3077| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren $ly@@720 |nodes#0@@1|)) ))))
(assert (forall (($ly@@721 T@U) (|nodes#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@721) LayerTypeType) (= (type |nodes#0@@2|) (SeqType BoxType))) ($Is |nodes#0@@2| (TSeq Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node))) (and (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren#requires| $ly@@721 |nodes#0@@2|) (forall ((|i#1@@68| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@68|) (< |i#1@@68| (|Seq#Length| |nodes#0@@2|))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@2| |i#1@@68|))))) :qid |BtreeMod.1429:21| :skolemid |3078| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@2| |i#1@@68|))) ))) (=> (forall ((|i#1@@69| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@69|) (< |i#1@@69| (|Seq#Length| |nodes#0@@2|))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@2| |i#1@@69|))))) :qid |BtreeMod.1429:21| :skolemid |3078| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@2| |i#1@@69|))) )) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren#requires| $ly@@721 |nodes#0@@2|)))) :qid |BtreeMod.1428:12| :skolemid |3079| :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren#requires| $ly@@721 |nodes#0@@2|)) )))
(assert  (=> true (forall (($ly@@722 T@U) (|nodes#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@722) LayerTypeType) (= (type |nodes#0@@3|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren#canCall| |nodes#0@@3|) (and ($Is |nodes#0@@3| (TSeq Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) (forall ((|i#1@@70| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@70|) (< |i#1@@70| (|Seq#Length| |nodes#0@@3|))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@3| |i#1@@70|))))) :qid |BtreeMod.1429:21| :skolemid |3078| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@3| |i#1@@70|))) ))))) (and (=> (not (= (|Seq#Length| |nodes#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes#0@@3|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren#canCall| (Sequences.__default.DropLast Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes#0@@3|))) (and (|Sequences.__default.Last#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes#0@@3|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes#0@@3|)))))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren ($LS $ly@@722) |nodes#0@@3|) (ite (= (|Seq#Length| |nodes#0@@3|) (LitInt 0)) 0 (+ (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren $ly@@722 (Sequences.__default.DropLast Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes#0@@3|)) (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements $ly@@722 ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes#0@@3|)))))))) :qid |BtreeMod.1428:12| :skolemid |3080| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren ($LS $ly@@722) |nodes#0@@3|)) ))))
(assert  (=> true (forall (($ly@@723 T@U) (|nodes#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@723) LayerTypeType) (= (type |nodes#0@@4|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren#canCall| (Lit |nodes#0@@4|)) (and ($Is |nodes#0@@4| (TSeq Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) (forall ((|i#2@@31| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@31|) (< |i#2@@31| (|Seq#Length| (Lit |nodes#0@@4|)))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@4|) |i#2@@31|))))) :qid |BtreeMod.1429:21| :skolemid |3081| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@4| |i#2@@31|))) ))))) (and (=> (not (= (|Seq#Length| (Lit |nodes#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit |nodes#0@@4|)) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren#canCall| (Lit (Sequences.__default.DropLast Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit |nodes#0@@4|))))) (and (|Sequences.__default.Last#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit |nodes#0@@4|)) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit |nodes#0@@4|)))))))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren ($LS $ly@@723) (Lit |nodes#0@@4|)) (ite (= (|Seq#Length| (Lit |nodes#0@@4|)) (LitInt 0)) 0 (+ (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren ($LS $ly@@723) (Lit (Sequences.__default.DropLast Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit |nodes#0@@4|)))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements ($LS $ly@@723) (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit |nodes#0@@4|)))))))))) :qid |BtreeMod.1428:12| :weight 3 :skolemid |3082| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren ($LS $ly@@723) (Lit |nodes#0@@4|))) ))))
(assert (forall (($ly@@724 T@U) (|node#0@@53| T@U) ) (!  (=> (and (= (type $ly@@724) LayerTypeType) (= (type |node#0@@53|) DatatypeTypeType)) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements ($LS $ly@@724) |node#0@@53|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements $ly@@724 |node#0@@53|))) :qid |BtreeMod.1435:12| :skolemid |3083| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements ($LS $ly@@724) |node#0@@53|)) )))
(assert (forall (($ly@@725 T@U) (|node#0@@54| T@U) ) (!  (=> (and (= (type $ly@@725) LayerTypeType) (= (type |node#0@@54|) DatatypeTypeType)) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements $ly@@725 |node#0@@54|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements $LZ |node#0@@54|))) :qid |BtreeMod.1435:12| :skolemid |3084| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements (AsFuelBottom $ly@@725) |node#0@@54|)) )))
(assert  (=> true (forall (($ly@@726 T@U) (|node#0@@55| T@U) ) (!  (=> (and (and (= (type $ly@@726) LayerTypeType) (= (type |node#0@@55|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements#canCall| |node#0@@55|) (and ($Is |node#0@@55| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@55|)))) (<= (LitInt 0) (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements $ly@@726 |node#0@@55|))) :qid |BtreeMod.1435:12| :skolemid |3085| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements $ly@@726 |node#0@@55|)) ))))
(assert (forall (($ly@@727 T@U) (|node#0@@56| T@U) ) (!  (=> (and (and (= (type $ly@@727) LayerTypeType) (= (type |node#0@@56|) DatatypeTypeType)) ($Is |node#0@@56| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) (and (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements#requires| $ly@@727 |node#0@@56|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@56|)) (=> (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@56|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements#requires| $ly@@727 |node#0@@56|)))) :qid |BtreeMod.1435:12| :skolemid |3086| :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements#requires| $ly@@727 |node#0@@56|)) )))
(assert  (=> true (forall (($ly@@728 T@U) (|node#0@@57| T@U) ) (!  (=> (and (and (= (type $ly@@728) LayerTypeType) (= (type |node#0@@57|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements#canCall| |node#0@@57|) (and ($Is |node#0@@57| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@57|)))) (and (=> (not (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |node#0@@57|)) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren#canCall| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@57|))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements ($LS $ly@@728) |node#0@@57|) (ite (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |node#0@@57|) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |node#0@@57|)) (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren $ly@@728 (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@57|)))))) :qid |BtreeMod.1435:12| :skolemid |3087| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements ($LS $ly@@728) |node#0@@57|)) ))))
(assert  (=> true (forall (($ly@@729 T@U) (|node#0@@58| T@U) ) (!  (=> (and (and (= (type $ly@@729) LayerTypeType) (= (type |node#0@@58|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements#canCall| (Lit |node#0@@58|)) (and ($Is |node#0@@58| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (Lit |node#0@@58|)))))))) (and (=> (not (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |node#0@@58|)))))) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren#canCall| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@58|))))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements ($LS $ly@@729) (Lit |node#0@@58|)) (ite (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |node#0@@58|)) (|Seq#Length| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |node#0@@58|)))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren ($LS $ly@@729) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@58|)))))))) :qid |BtreeMod.1435:12| :weight 3 :skolemid |3088| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElements ($LS $ly@@729) (Lit |node#0@@58|))) ))))
(assert (forall ((arg0@@354 T@U) (arg1@@221 T@U) ) (! (= (type (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren arg0@@354 arg1@@221)) DatatypeTypeType) :qid |funType:MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren arg0@@354 arg1@@221)) )))
(assert (forall (($ly@@730 T@U) (|nodes#0@@5| T@U) ) (!  (=> (and (= (type $ly@@730) LayerTypeType) (= (type |nodes#0@@5|) (SeqType BoxType))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $ly@@730) |nodes#0@@5|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren $ly@@730 |nodes#0@@5|))) :qid |BtreeMod.1627:12| :skolemid |3104| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $ly@@730) |nodes#0@@5|)) )))
(assert (forall (($ly@@731 T@U) (|nodes#0@@6| T@U) ) (!  (=> (and (= (type $ly@@731) LayerTypeType) (= (type |nodes#0@@6|) (SeqType BoxType))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren $ly@@731 |nodes#0@@6|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren $LZ |nodes#0@@6|))) :qid |BtreeMod.1627:12| :skolemid |3105| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren (AsFuelBottom $ly@@731) |nodes#0@@6|)) )))
(assert  (and (forall ((arg0@@355 T@U) (arg1@@222 T@U) ) (! (= (type (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq arg0@@355 arg1@@222)) DatatypeTypeType) :qid |funType:MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq arg0@@355 arg1@@222)) )) (= (type StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq) LayerTypeType)))
(assert  (=> true (forall (($ly@@732 T@U) (|nodes#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@732) LayerTypeType) (= (type |nodes#0@@7|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#canCall| |nodes#0@@7|) (and ($Is |nodes#0@@7| (TSeq Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) (forall ((|i#0@@141| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@141|) (< |i#0@@141| (|Seq#Length| |nodes#0@@7|))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@7| |i#0@@141|))))) :qid |BtreeMod.1628:21| :skolemid |3106| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@7| |i#0@@141|))) ))))) (and (and (and (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren $ly@@732 |nodes#0@@7|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren $ly@@732 |nodes#0@@7|))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren $ly@@732 |nodes#0@@7|)))) (|Seq#Length| |nodes#0@@7|))) (forall ((|i#1@@71| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@71|) (< |i#1@@71| (|Seq#Length| |nodes#0@@7|))) (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren $ly@@732 |nodes#0@@7|))) |i#1@@71|) (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren $ly@@732 |nodes#0@@7|))) |i#1@@71|)) (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@7| |i#1@@71|)))))) :qid |BtreeMod.1630:20| :skolemid |3107| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@7| |i#1@@71|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren $ly@@732 |nodes#0@@7|))) |i#1@@71|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren $ly@@732 |nodes#0@@7|))) |i#1@@71|))) ))) (|Seq#Equal| (Sequences.__default.FlattenShape (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.FlattenShape ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren $ly@@732 |nodes#0@@7|)))) (Sequences.__default.FlattenShape |#$Value| StartFuel_Sequences._default.FlattenShape ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren $ly@@732 |nodes#0@@7|)))))) ($Is (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren $ly@@732 |nodes#0@@7|) (Tclass._System.Tuple2 (TSeq (TSeq (TSeq Tclass.NativeTypes.byte))) (TSeq (TSeq |#$Value|)))))) :qid |BtreeMod.1627:12| :skolemid |3108| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren $ly@@732 |nodes#0@@7|)) ))))
(assert (forall (($ly@@733 T@U) (|nodes#0@@8| T@U) ) (!  (=> (and (and (= (type $ly@@733) LayerTypeType) (= (type |nodes#0@@8|) (SeqType BoxType))) ($Is |nodes#0@@8| (TSeq Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node))) (and (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#requires| $ly@@733 |nodes#0@@8|) (forall ((|i#2@@32| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@32|) (< |i#2@@32| (|Seq#Length| |nodes#0@@8|))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@8| |i#2@@32|))))) :qid |BtreeMod.1628:21| :skolemid |3109| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@8| |i#2@@32|))) ))) (=> (forall ((|i#2@@33| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@33|) (< |i#2@@33| (|Seq#Length| |nodes#0@@8|))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@8| |i#2@@33|))))) :qid |BtreeMod.1628:21| :skolemid |3109| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@8| |i#2@@33|))) )) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#requires| $ly@@733 |nodes#0@@8|)))) :qid |BtreeMod.1627:12| :skolemid |3110| :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#requires| $ly@@733 |nodes#0@@8|)) )))
(assert  (=> true (forall (($ly@@734 T@U) (|nodes#0@@9| T@U) ) (!  (=> (and (and (= (type $ly@@734) LayerTypeType) (= (type |nodes#0@@9|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#canCall| |nodes#0@@9|) (and ($Is |nodes#0@@9| (TSeq Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) (forall ((|i#2@@34| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@34|) (< |i#2@@34| (|Seq#Length| |nodes#0@@9|))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@9| |i#2@@34|))))) :qid |BtreeMod.1628:21| :skolemid |3109| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@9| |i#2@@34|))) ))))) (and (=> (not (= (|Seq#Length| |nodes#0@@9|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes#0@@9|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#canCall| (Sequences.__default.DropLast Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes#0@@9|))) (let ((|kv1#0| (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren $ly@@734 (Sequences.__default.DropLast Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes#0@@9|)))) (and (and (|Sequences.__default.Last#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes#0@@9|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes#0@@9|)))) (let ((|kv2#0| (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq $ly@@734 ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes#0@@9|))))) (and (and (_System.Tuple2.___hMake2_q |kv1#0|) (_System.Tuple2.___hMake2_q |kv2#0|)) (and (_System.Tuple2.___hMake2_q |kv1#0|) (_System.Tuple2.___hMake2_q |kv2#0|)))))))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $ly@@734) |nodes#0@@9|) (ite (= (|Seq#Length| |nodes#0@@9|) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|kv1#0@@0| (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren $ly@@734 (Sequences.__default.DropLast Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes#0@@9|)))) (let ((|kv2#0@@0| (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq $ly@@734 ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes#0@@9|))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| ($Unbox (SeqType BoxType) (_System.Tuple2._0 |kv1#0@@0|)) (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._0 |kv2#0@@0|)))) ($Box (|Seq#Append| ($Unbox (SeqType BoxType) (_System.Tuple2._1 |kv1#0@@0|)) (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._1 |kv2#0@@0|))))))))))) :qid |BtreeMod.1627:12| :skolemid |3111| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $ly@@734) |nodes#0@@9|)) ))))
(assert  (=> true (forall (($ly@@735 T@U) (|nodes#0@@10| T@U) ) (!  (=> (and (and (= (type $ly@@735) LayerTypeType) (= (type |nodes#0@@10|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#canCall| (Lit |nodes#0@@10|)) (and ($Is |nodes#0@@10| (TSeq Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) (forall ((|i#3@@20| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@20|) (< |i#3@@20| (|Seq#Length| (Lit |nodes#0@@10|)))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |nodes#0@@10|) |i#3@@20|))))) :qid |BtreeMod.1628:21| :skolemid |3112| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes#0@@10| |i#3@@20|))) ))))) (and (=> (not (= (|Seq#Length| (Lit |nodes#0@@10|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit |nodes#0@@10|)) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#canCall| (Lit (Sequences.__default.DropLast Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit |nodes#0@@10|))))) (let ((|kv1#1| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $ly@@735) (Lit (Sequences.__default.DropLast Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit |nodes#0@@10|))))))) (and (and (|Sequences.__default.Last#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit |nodes#0@@10|)) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit |nodes#0@@10|)))))) (let ((|kv2#1| (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq ($LS $ly@@735) (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit |nodes#0@@10|))))))) (and (and (_System.Tuple2.___hMake2_q |kv1#1|) (_System.Tuple2.___hMake2_q |kv2#1|)) (and (_System.Tuple2.___hMake2_q |kv1#1|) (_System.Tuple2.___hMake2_q |kv2#1|)))))))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $ly@@735) (Lit |nodes#0@@10|)) (ite (= (|Seq#Length| (Lit |nodes#0@@10|)) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|kv1#1@@0| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $ly@@735) (Lit (Sequences.__default.DropLast Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit |nodes#0@@10|))))))) (let ((|kv2#1@@0| (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq ($LS $ly@@735) (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node (Lit |nodes#0@@10|))))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| ($Unbox (SeqType BoxType) (_System.Tuple2._0 |kv1#1@@0|)) (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._0 |kv2#1@@0|)))) ($Box (|Seq#Append| ($Unbox (SeqType BoxType) (_System.Tuple2._1 |kv1#1@@0|)) (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._1 |kv2#1@@0|))))))))))) :qid |BtreeMod.1627:12| :weight 3 :skolemid |3113| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $ly@@735) (Lit |nodes#0@@10|))) ))))
(assert (forall (($ly@@736 T@U) (|node#0@@59| T@U) ) (!  (=> (and (= (type $ly@@736) LayerTypeType) (= (type |node#0@@59|) DatatypeTypeType)) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq ($LS $ly@@736) |node#0@@59|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq $ly@@736 |node#0@@59|))) :qid |BtreeMod.1640:22| :skolemid |3114| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq ($LS $ly@@736) |node#0@@59|)) )))
(assert (forall (($ly@@737 T@U) (|node#0@@60| T@U) ) (!  (=> (and (= (type $ly@@737) LayerTypeType) (= (type |node#0@@60|) DatatypeTypeType)) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq $ly@@737 |node#0@@60|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq $LZ |node#0@@60|))) :qid |BtreeMod.1640:22| :skolemid |3115| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq (AsFuelBottom $ly@@737) |node#0@@60|)) )))
(assert  (=> true (forall (($ly@@738 T@U) (|node#0@@61| T@U) ) (!  (=> (and (and (= (type $ly@@738) LayerTypeType) (= (type |node#0@@61|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq#canCall| |node#0@@61|) (and ($Is |node#0@@61| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@61|)))) (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq $ly@@738 |node#0@@61|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq $ly@@738 |node#0@@61|))))) ($Is (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq $ly@@738 |node#0@@61|) (Tclass._System.Tuple2 (TSeq (TSeq Tclass.NativeTypes.byte)) (TSeq |#$Value|))))) :qid |BtreeMod.1640:22| :skolemid |3116| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq $ly@@738 |node#0@@61|)) ))))
(assert (forall (($ly@@739 T@U) (|node#0@@62| T@U) ) (!  (=> (and (and (= (type $ly@@739) LayerTypeType) (= (type |node#0@@62|) DatatypeTypeType)) ($Is |node#0@@62| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)) (and (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq#requires| $ly@@739 |node#0@@62|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@62|)) (=> (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@62|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq#requires| $ly@@739 |node#0@@62|)))) :qid |BtreeMod.1640:22| :skolemid |3117| :pattern ( (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq#requires| $ly@@739 |node#0@@62|)) )))
(assert (= (type StartFuel_Sequences._default.Flatten) LayerTypeType))
(assert  (=> true (forall (($ly@@740 T@U) (|node#0@@63| T@U) ) (!  (=> (and (and (= (type $ly@@740) LayerTypeType) (= (type |node#0@@63|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq#canCall| |node#0@@63|) (and ($Is |node#0@@63| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) |node#0@@63|)))) (and (=> (not (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |node#0@@63|)) (and (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#canCall| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@63|)) (let ((|valuelists#0| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren $ly@@740 (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@63|)))))) (let ((|keylists#0| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren $ly@@740 (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@63|)))))) (and (|Sequences.__default.Flatten#canCall| (TSeq Tclass.NativeTypes.byte) |keylists#0|) (|Sequences.__default.Flatten#canCall| |#$Value| |valuelists#0|)))))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq ($LS $ly@@740) |node#0@@63|) (ite (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q |node#0@@63|) (|#_System._tuple#2._#Make2| ($Box (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys |node#0@@63|)) ($Box (MutableBtreeBulkOperations.MB.Model.Abs.Node.values |node#0@@63|))) (let ((|valuelists#0@@0| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren $ly@@740 (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@63|)))))) (let ((|keylists#0@@0| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren $ly@@740 (MutableBtreeBulkOperations.MB.Model.Abs.Node.children |node#0@@63|)))))) (|#_System._tuple#2._#Make2| ($Box (Sequences.__default.Flatten (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.Flatten |keylists#0@@0|)) ($Box (Sequences.__default.Flatten |#$Value| StartFuel_Sequences._default.Flatten |valuelists#0@@0|))))))))) :qid |BtreeMod.1640:22| :skolemid |3118| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq ($LS $ly@@740) |node#0@@63|)) ))))
(assert  (=> true (forall (($ly@@741 T@U) (|node#0@@64| T@U) ) (!  (=> (and (and (= (type $ly@@741) LayerTypeType) (= (type |node#0@@64|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq#canCall| (Lit |node#0@@64|)) (and ($Is |node#0@@64| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (Lit |node#0@@64|)))))))) (and (=> (not (U_2_bool (Lit (bool_2_U (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |node#0@@64|)))))) (and (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#canCall| (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@64|)))) (let ((|valuelists#1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Lit (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $ly@@741) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@64|))))))))) (let ((|keylists#1| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Lit (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $ly@@741) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@64|))))))))) (and (|Sequences.__default.Flatten#canCall| (TSeq Tclass.NativeTypes.byte) |keylists#1|) (|Sequences.__default.Flatten#canCall| |#$Value| |valuelists#1|)))))) (= (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq ($LS $ly@@741) (Lit |node#0@@64|)) (ite (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (Lit |node#0@@64|)) (|#_System._tuple#2._#Make2| ($Box (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (Lit |node#0@@64|)))) ($Box (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (Lit |node#0@@64|))))) (let ((|valuelists#1@@0| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Lit (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $ly@@741) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@64|))))))))) (let ((|keylists#1@@0| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Lit (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $ly@@741) (Lit (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (Lit |node#0@@64|))))))))) (|#_System._tuple#2._#Make2| ($Box (Sequences.__default.Flatten (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.Flatten |keylists#1@@0|)) ($Box (Sequences.__default.Flatten |#$Value| StartFuel_Sequences._default.Flatten |valuelists#1@@0|))))))))) :qid |BtreeMod.1640:22| :weight 3 :skolemid |3119| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq ($LS $ly@@741) (Lit |node#0@@64|))) ))))
(assert (forall ((arg0@@356 Int) (arg1@@223 T@U) (arg2@@133 T@U) ) (! (= (type (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| arg0@@356 arg1@@223 arg2@@133)) DatatypeTypeType) :qid |funType:#MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| :pattern ( (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| arg0@@356 arg1@@223 arg2@@133)) )))
(assert (forall ((|a#0#0#0@@1| Int) (|a#0#1#0@@1| T@U) (|a#0#2#0| T@U) ) (!  (=> (and (= (type |a#0#1#0@@1|) refType) (= (type |a#0#2#0|) refType)) (= (DatatypeCtorId (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| |a#0#0#0@@1| |a#0#1#0@@1| |a#0#2#0|)) |##MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf|)) :qid |MutableB.40:12| :skolemid |3122| :pattern ( (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| |a#0#0#0@@1| |a#0#1#0@@1| |a#0#2#0|)) )))
(assert (forall ((d@@35 T@U) ) (!  (=> (= (type d@@35) DatatypeTypeType) (and (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q d@@35) (= (DatatypeCtorId d@@35) |##MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf|)) (=> (= (DatatypeCtorId d@@35) |##MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf|) (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q d@@35)))) :qid |unknown.0:0| :skolemid |3123| :pattern ( (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q d@@35)) )))
(assert (forall ((d@@36 T@U) ) (!  (=> (and (= (type d@@36) DatatypeTypeType) (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q d@@36)) (exists ((|a#1#0#0@@1| Int) (|a#1#1#0@@1| T@U) (|a#1#2#0| T@U) ) (!  (and (and (= (type |a#1#1#0@@1|) refType) (= (type |a#1#2#0|) refType)) (= d@@36 (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| |a#1#0#0@@1| |a#1#1#0@@1| |a#1#2#0|))) :qid |MutableB.40:12| :skolemid |3124| :no-pattern (type |a#1#1#0@@1|) :no-pattern (type |a#1#2#0|) :no-pattern (U_2_int |a#1#1#0@@1|) :no-pattern (U_2_bool |a#1#1#0@@1|) :no-pattern (U_2_int |a#1#2#0|) :no-pattern (U_2_bool |a#1#2#0|) ))) :qid |unknown.0:0| :skolemid |3125| :pattern ( (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q d@@36)) )))
(assert (= (type Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents) TyType))
(assert (= (Tag Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents) Tagclass.MutableBtreeBulkOperations.MB.Abs.NodeContents))
(assert (forall ((bx@@108 T@U) ) (!  (=> (and (= (type bx@@108) BoxType) ($IsBox bx@@108 Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents)) (and (= ($Box ($Unbox DatatypeTypeType bx@@108)) bx@@108) ($Is ($Unbox DatatypeTypeType bx@@108) Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents))) :qid |unknown.0:0| :skolemid |3126| :pattern ( ($IsBox bx@@108 Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents)) )))
(assert (forall ((|a#2#0#0@@1| Int) (|a#2#1#0@@1| T@U) (|a#2#2#0| T@U) ) (!  (=> (and (= (type |a#2#1#0@@1|) refType) (= (type |a#2#2#0|) refType)) (and (=> ($Is (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| |a#2#0#0@@1| |a#2#1#0@@1| |a#2#2#0|) Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents) (and (and ($Is (int_2_U |a#2#0#0@@1|) Tclass.NativeTypes.uint64) ($Is |a#2#1#0@@1| (Tclass._System.array (TSeq Tclass.NativeTypes.byte)))) ($Is |a#2#2#0| (Tclass._System.array |#$Value|)))) (=> (and (and ($Is (int_2_U |a#2#0#0@@1|) Tclass.NativeTypes.uint64) ($Is |a#2#1#0@@1| (Tclass._System.array (TSeq Tclass.NativeTypes.byte)))) ($Is |a#2#2#0| (Tclass._System.array |#$Value|))) ($Is (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| |a#2#0#0@@1| |a#2#1#0@@1| |a#2#2#0|) Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents)))) :qid |MutableB.40:12| :skolemid |3127| :pattern ( ($Is (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| |a#2#0#0@@1| |a#2#1#0@@1| |a#2#2#0|) Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents)) )))
(assert (forall ((|a#3#0#0@@1| Int) (|a#3#1#0@@1| T@U) (|a#3#2#0| T@U) ($h@@63 T@U) ) (!  (=> (and (and (and (= (type |a#3#1#0@@1|) refType) (= (type |a#3#2#0|) refType)) (= (type $h@@63) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@63)) (and (=> ($IsAlloc (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| |a#3#0#0@@1| |a#3#1#0@@1| |a#3#2#0|) Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents $h@@63) (and (and ($IsAlloc (int_2_U |a#3#0#0@@1|) Tclass.NativeTypes.uint64 $h@@63) ($IsAlloc |a#3#1#0@@1| (Tclass._System.array (TSeq Tclass.NativeTypes.byte)) $h@@63)) ($IsAlloc |a#3#2#0| (Tclass._System.array |#$Value|) $h@@63))) (=> (and (and ($IsAlloc (int_2_U |a#3#0#0@@1|) Tclass.NativeTypes.uint64 $h@@63) ($IsAlloc |a#3#1#0@@1| (Tclass._System.array (TSeq Tclass.NativeTypes.byte)) $h@@63)) ($IsAlloc |a#3#2#0| (Tclass._System.array |#$Value|) $h@@63)) ($IsAlloc (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| |a#3#0#0@@1| |a#3#1#0@@1| |a#3#2#0|) Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents $h@@63)))) :qid |MutableB.40:12| :skolemid |3128| :pattern ( ($IsAlloc (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| |a#3#0#0@@1| |a#3#1#0@@1| |a#3#2#0|) Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents $h@@63)) )))
(assert (forall ((d@@37 T@U) ($h@@64 T@U) ) (!  (=> (and (and (= (type d@@37) DatatypeTypeType) (= (type $h@@64) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@64) (and (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q d@@37) ($IsAlloc d@@37 Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents $h@@64)))) ($IsAlloc (int_2_U (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys d@@37)) Tclass.NativeTypes.uint64 $h@@64)) :qid |unknown.0:0| :skolemid |3129| :pattern ( ($IsAlloc (int_2_U (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys d@@37)) Tclass.NativeTypes.uint64 $h@@64)) )))
(assert (forall ((arg0@@357 T@U) ) (! (= (type (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys arg0@@357)) refType) :qid |funType:MutableBtreeBulkOperations.MB.Abs.NodeContents.keys| :pattern ( (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys arg0@@357)) )))
(assert (forall ((d@@38 T@U) ($h@@65 T@U) ) (!  (=> (and (and (= (type d@@38) DatatypeTypeType) (= (type $h@@65) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@65) (and (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q d@@38) ($IsAlloc d@@38 Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents $h@@65)))) ($IsAlloc (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys d@@38) (Tclass._System.array (TSeq Tclass.NativeTypes.byte)) $h@@65)) :qid |unknown.0:0| :skolemid |3130| :pattern ( ($IsAlloc (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys d@@38) (Tclass._System.array (TSeq Tclass.NativeTypes.byte)) $h@@65)) )))
(assert (forall ((arg0@@358 T@U) ) (! (= (type (MutableBtreeBulkOperations.MB.Abs.NodeContents.values arg0@@358)) refType) :qid |funType:MutableBtreeBulkOperations.MB.Abs.NodeContents.values| :pattern ( (MutableBtreeBulkOperations.MB.Abs.NodeContents.values arg0@@358)) )))
(assert (forall ((d@@39 T@U) ($h@@66 T@U) ) (!  (=> (and (and (= (type d@@39) DatatypeTypeType) (= (type $h@@66) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@66) (and (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q d@@39) ($IsAlloc d@@39 Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents $h@@66)))) ($IsAlloc (MutableBtreeBulkOperations.MB.Abs.NodeContents.values d@@39) (Tclass._System.array |#$Value|) $h@@66)) :qid |unknown.0:0| :skolemid |3131| :pattern ( ($IsAlloc (MutableBtreeBulkOperations.MB.Abs.NodeContents.values d@@39) (Tclass._System.array |#$Value|) $h@@66)) )))
(assert (forall ((|a#4#0#0@@1| Int) (|a#4#1#0@@1| T@U) (|a#4#2#0| T@U) ) (!  (=> (and (= (type |a#4#1#0@@1|) refType) (= (type |a#4#2#0|) refType)) (= (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| (LitInt |a#4#0#0@@1|) (Lit |a#4#1#0@@1|) (Lit |a#4#2#0|)) (Lit (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| |a#4#0#0@@1| |a#4#1#0@@1| |a#4#2#0|)))) :qid |MutableB.40:12| :skolemid |3132| :pattern ( (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| (LitInt |a#4#0#0@@1|) (Lit |a#4#1#0@@1|) (Lit |a#4#2#0|))) )))
(assert (forall ((|a#5#0#0@@2| Int) (|a#5#1#0@@1| T@U) (|a#5#2#0| T@U) ) (!  (=> (and (= (type |a#5#1#0@@1|) refType) (= (type |a#5#2#0|) refType)) (= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| |a#5#0#0@@2| |a#5#1#0@@1| |a#5#2#0|)) |a#5#0#0@@2|)) :qid |MutableB.40:12| :skolemid |3133| :pattern ( (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| |a#5#0#0@@2| |a#5#1#0@@1| |a#5#2#0|)) )))
(assert (forall ((|a#6#0#0@@2| Int) (|a#6#1#0@@1| T@U) (|a#6#2#0| T@U) ) (!  (=> (and (= (type |a#6#1#0@@1|) refType) (= (type |a#6#2#0|) refType)) (= (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| |a#6#0#0@@2| |a#6#1#0@@1| |a#6#2#0|)) |a#6#1#0@@1|)) :qid |MutableB.40:12| :skolemid |3134| :pattern ( (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| |a#6#0#0@@2| |a#6#1#0@@1| |a#6#2#0|)) )))
(assert (forall ((|a#7#0#0@@2| Int) (|a#7#1#0@@1| T@U) (|a#7#2#0| T@U) ) (!  (=> (and (= (type |a#7#1#0@@1|) refType) (= (type |a#7#2#0|) refType)) (= (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| |a#7#0#0@@2| |a#7#1#0@@1| |a#7#2#0|)) |a#7#2#0|)) :qid |MutableB.40:12| :skolemid |3135| :pattern ( (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf| |a#7#0#0@@2| |a#7#1#0@@1| |a#7#2#0|)) )))
(assert (forall ((arg0@@359 Int) (arg1@@224 T@U) (arg2@@134 T@U) ) (! (= (type (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| arg0@@359 arg1@@224 arg2@@134)) DatatypeTypeType) :qid |funType:#MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| :pattern ( (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| arg0@@359 arg1@@224 arg2@@134)) )))
(assert (forall ((|a#8#0#0@@2| Int) (|a#8#1#0@@1| T@U) (|a#8#2#0| T@U) ) (!  (=> (and (= (type |a#8#1#0@@1|) refType) (= (type |a#8#2#0|) refType)) (= (DatatypeCtorId (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| |a#8#0#0@@2| |a#8#1#0@@1| |a#8#2#0|)) |##MutableBtreeBulkOperations.MB.Abs.NodeContents.Index|)) :qid |MutableB.41:13| :skolemid |3136| :pattern ( (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| |a#8#0#0@@2| |a#8#1#0@@1| |a#8#2#0|)) )))
(assert (forall ((d@@40 T@U) ) (!  (=> (= (type d@@40) DatatypeTypeType) (and (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q d@@40) (= (DatatypeCtorId d@@40) |##MutableBtreeBulkOperations.MB.Abs.NodeContents.Index|)) (=> (= (DatatypeCtorId d@@40) |##MutableBtreeBulkOperations.MB.Abs.NodeContents.Index|) (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q d@@40)))) :qid |unknown.0:0| :skolemid |3137| :pattern ( (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q d@@40)) )))
(assert (forall ((d@@41 T@U) ) (!  (=> (and (= (type d@@41) DatatypeTypeType) (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q d@@41)) (exists ((|a#9#0#0@@2| Int) (|a#9#1#0@@1| T@U) (|a#9#2#0@@0| T@U) ) (!  (and (and (= (type |a#9#1#0@@1|) refType) (= (type |a#9#2#0@@0|) refType)) (= d@@41 (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| |a#9#0#0@@2| |a#9#1#0@@1| |a#9#2#0@@0|))) :qid |MutableB.41:13| :skolemid |3138| :no-pattern (type |a#9#1#0@@1|) :no-pattern (type |a#9#2#0@@0|) :no-pattern (U_2_int |a#9#1#0@@1|) :no-pattern (U_2_bool |a#9#1#0@@1|) :no-pattern (U_2_int |a#9#2#0@@0|) :no-pattern (U_2_bool |a#9#2#0@@0|) ))) :qid |unknown.0:0| :skolemid |3139| :pattern ( (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q d@@41)) )))
(assert (= (type Tclass.MutableBtreeBulkOperations.MB.Abs.Node?) TyType))
(assert (= (Tag Tclass.MutableBtreeBulkOperations.MB.Abs.Node?) Tagclass.MutableBtreeBulkOperations.MB.Abs.Node?))
(assert (forall ((bx@@109 T@U) ) (!  (=> (and (= (type bx@@109) BoxType) ($IsBox bx@@109 Tclass.MutableBtreeBulkOperations.MB.Abs.Node?)) (and (= ($Box ($Unbox refType bx@@109)) bx@@109) ($Is ($Unbox refType bx@@109) Tclass.MutableBtreeBulkOperations.MB.Abs.Node?))) :qid |unknown.0:0| :skolemid |3140| :pattern ( ($IsBox bx@@109 Tclass.MutableBtreeBulkOperations.MB.Abs.Node?)) )))
(assert (forall ((|a#10#0#0@@2| Int) (|a#10#1#0@@1| T@U) (|a#10#2#0@@0| T@U) ) (!  (=> (and (= (type |a#10#1#0@@1|) refType) (= (type |a#10#2#0@@0|) refType)) (and (=> ($Is (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| |a#10#0#0@@2| |a#10#1#0@@1| |a#10#2#0@@0|) Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents) (and (and ($Is (int_2_U |a#10#0#0@@2|) Tclass.NativeTypes.uint64) ($Is |a#10#1#0@@1| (Tclass._System.array (TSeq Tclass.NativeTypes.byte)))) ($Is |a#10#2#0@@0| (Tclass._System.array Tclass.MutableBtreeBulkOperations.MB.Abs.Node?)))) (=> (and (and ($Is (int_2_U |a#10#0#0@@2|) Tclass.NativeTypes.uint64) ($Is |a#10#1#0@@1| (Tclass._System.array (TSeq Tclass.NativeTypes.byte)))) ($Is |a#10#2#0@@0| (Tclass._System.array Tclass.MutableBtreeBulkOperations.MB.Abs.Node?))) ($Is (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| |a#10#0#0@@2| |a#10#1#0@@1| |a#10#2#0@@0|) Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents)))) :qid |MutableB.41:13| :skolemid |3141| :pattern ( ($Is (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| |a#10#0#0@@2| |a#10#1#0@@1| |a#10#2#0@@0|) Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents)) )))
(assert (forall ((|a#11#0#0@@2| Int) (|a#11#1#0@@1| T@U) (|a#11#2#0@@0| T@U) ($h@@67 T@U) ) (!  (=> (and (and (and (= (type |a#11#1#0@@1|) refType) (= (type |a#11#2#0@@0|) refType)) (= (type $h@@67) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@67)) (and (=> ($IsAlloc (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| |a#11#0#0@@2| |a#11#1#0@@1| |a#11#2#0@@0|) Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents $h@@67) (and (and ($IsAlloc (int_2_U |a#11#0#0@@2|) Tclass.NativeTypes.uint64 $h@@67) ($IsAlloc |a#11#1#0@@1| (Tclass._System.array (TSeq Tclass.NativeTypes.byte)) $h@@67)) ($IsAlloc |a#11#2#0@@0| (Tclass._System.array Tclass.MutableBtreeBulkOperations.MB.Abs.Node?) $h@@67))) (=> (and (and ($IsAlloc (int_2_U |a#11#0#0@@2|) Tclass.NativeTypes.uint64 $h@@67) ($IsAlloc |a#11#1#0@@1| (Tclass._System.array (TSeq Tclass.NativeTypes.byte)) $h@@67)) ($IsAlloc |a#11#2#0@@0| (Tclass._System.array Tclass.MutableBtreeBulkOperations.MB.Abs.Node?) $h@@67)) ($IsAlloc (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| |a#11#0#0@@2| |a#11#1#0@@1| |a#11#2#0@@0|) Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents $h@@67)))) :qid |MutableB.41:13| :skolemid |3142| :pattern ( ($IsAlloc (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| |a#11#0#0@@2| |a#11#1#0@@1| |a#11#2#0@@0|) Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents $h@@67)) )))
(assert (forall ((d@@42 T@U) ($h@@68 T@U) ) (!  (=> (and (and (= (type d@@42) DatatypeTypeType) (= (type $h@@68) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@68) (and (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q d@@42) ($IsAlloc d@@42 Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents $h@@68)))) ($IsAlloc (int_2_U (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren d@@42)) Tclass.NativeTypes.uint64 $h@@68)) :qid |unknown.0:0| :skolemid |3143| :pattern ( ($IsAlloc (int_2_U (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren d@@42)) Tclass.NativeTypes.uint64 $h@@68)) )))
(assert (forall ((arg0@@360 T@U) ) (! (= (type (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots arg0@@360)) refType) :qid |funType:MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots| :pattern ( (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots arg0@@360)) )))
(assert (forall ((d@@43 T@U) ($h@@69 T@U) ) (!  (=> (and (and (= (type d@@43) DatatypeTypeType) (= (type $h@@69) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@69) (and (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q d@@43) ($IsAlloc d@@43 Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents $h@@69)))) ($IsAlloc (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots d@@43) (Tclass._System.array (TSeq Tclass.NativeTypes.byte)) $h@@69)) :qid |unknown.0:0| :skolemid |3144| :pattern ( ($IsAlloc (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots d@@43) (Tclass._System.array (TSeq Tclass.NativeTypes.byte)) $h@@69)) )))
(assert (forall ((arg0@@361 T@U) ) (! (= (type (MutableBtreeBulkOperations.MB.Abs.NodeContents.children arg0@@361)) refType) :qid |funType:MutableBtreeBulkOperations.MB.Abs.NodeContents.children| :pattern ( (MutableBtreeBulkOperations.MB.Abs.NodeContents.children arg0@@361)) )))
(assert (forall ((d@@44 T@U) ($h@@70 T@U) ) (!  (=> (and (and (= (type d@@44) DatatypeTypeType) (= (type $h@@70) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@70) (and (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q d@@44) ($IsAlloc d@@44 Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents $h@@70)))) ($IsAlloc (MutableBtreeBulkOperations.MB.Abs.NodeContents.children d@@44) (Tclass._System.array Tclass.MutableBtreeBulkOperations.MB.Abs.Node?) $h@@70)) :qid |unknown.0:0| :skolemid |3145| :pattern ( ($IsAlloc (MutableBtreeBulkOperations.MB.Abs.NodeContents.children d@@44) (Tclass._System.array Tclass.MutableBtreeBulkOperations.MB.Abs.Node?) $h@@70)) )))
(assert (forall ((|a#12#0#0@@1| Int) (|a#12#1#0@@1| T@U) (|a#12#2#0@@0| T@U) ) (!  (=> (and (= (type |a#12#1#0@@1|) refType) (= (type |a#12#2#0@@0|) refType)) (= (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| (LitInt |a#12#0#0@@1|) (Lit |a#12#1#0@@1|) (Lit |a#12#2#0@@0|)) (Lit (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| |a#12#0#0@@1| |a#12#1#0@@1| |a#12#2#0@@0|)))) :qid |MutableB.41:13| :skolemid |3146| :pattern ( (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| (LitInt |a#12#0#0@@1|) (Lit |a#12#1#0@@1|) (Lit |a#12#2#0@@0|))) )))
(assert (forall ((|a#13#0#0@@1| Int) (|a#13#1#0@@1| T@U) (|a#13#2#0@@0| T@U) ) (!  (=> (and (= (type |a#13#1#0@@1|) refType) (= (type |a#13#2#0@@0|) refType)) (= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| |a#13#0#0@@1| |a#13#1#0@@1| |a#13#2#0@@0|)) |a#13#0#0@@1|)) :qid |MutableB.41:13| :skolemid |3147| :pattern ( (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| |a#13#0#0@@1| |a#13#1#0@@1| |a#13#2#0@@0|)) )))
(assert (forall ((|a#14#0#0@@1| Int) (|a#14#1#0@@1| T@U) (|a#14#2#0@@0| T@U) ) (!  (=> (and (= (type |a#14#1#0@@1|) refType) (= (type |a#14#2#0@@0|) refType)) (= (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| |a#14#0#0@@1| |a#14#1#0@@1| |a#14#2#0@@0|)) |a#14#1#0@@1|)) :qid |MutableB.41:13| :skolemid |3148| :pattern ( (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| |a#14#0#0@@1| |a#14#1#0@@1| |a#14#2#0@@0|)) )))
(assert (forall ((|a#15#0#0@@1| Int) (|a#15#1#0@@1| T@U) (|a#15#2#0@@0| T@U) ) (!  (=> (and (= (type |a#15#1#0@@1|) refType) (= (type |a#15#2#0@@0|) refType)) (= (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| |a#15#0#0@@1| |a#15#1#0@@1| |a#15#2#0@@0|)) |a#15#2#0@@0|)) :qid |MutableB.41:13| :skolemid |3149| :pattern ( (|#MutableBtreeBulkOperations.MB.Abs.NodeContents.Index| |a#15#0#0@@1| |a#15#1#0@@1| |a#15#2#0@@0|)) )))
(assert (forall ((d@@45 T@U) ) (!  (=> (and (= (type d@@45) DatatypeTypeType) (|$IsA#MutableBtreeBulkOperations.MB.Abs.NodeContents| d@@45)) (or (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q d@@45) (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q d@@45))) :qid |unknown.0:0| :skolemid |3150| :pattern ( (|$IsA#MutableBtreeBulkOperations.MB.Abs.NodeContents| d@@45)) )))
(assert (forall ((d@@46 T@U) ) (!  (=> (and (= (type d@@46) DatatypeTypeType) ($Is d@@46 Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents)) (or (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q d@@46) (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q d@@46))) :qid |unknown.0:0| :skolemid |3151| :pattern ( (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q d@@46) ($Is d@@46 Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents)) :pattern ( (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q d@@46) ($Is d@@46 Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents)) )))
(assert (forall ((a@@124 T@U) (b@@73 T@U) ) (!  (=> (and (and (= (type a@@124) DatatypeTypeType) (= (type b@@73) DatatypeTypeType)) (and (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q a@@124) (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q b@@73))) (and (=> (|MutableBtreeBulkOperations.MB.Abs.NodeContents#Equal| a@@124 b@@73) (and (and (= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys a@@124) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys b@@73)) (= (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys a@@124) (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys b@@73))) (= (MutableBtreeBulkOperations.MB.Abs.NodeContents.values a@@124) (MutableBtreeBulkOperations.MB.Abs.NodeContents.values b@@73)))) (=> (and (and (= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys a@@124) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys b@@73)) (= (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys a@@124) (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys b@@73))) (= (MutableBtreeBulkOperations.MB.Abs.NodeContents.values a@@124) (MutableBtreeBulkOperations.MB.Abs.NodeContents.values b@@73))) (|MutableBtreeBulkOperations.MB.Abs.NodeContents#Equal| a@@124 b@@73)))) :qid |unknown.0:0| :skolemid |3152| :pattern ( (|MutableBtreeBulkOperations.MB.Abs.NodeContents#Equal| a@@124 b@@73) (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q a@@124)) :pattern ( (|MutableBtreeBulkOperations.MB.Abs.NodeContents#Equal| a@@124 b@@73) (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q b@@73)) )))
(assert (forall ((a@@125 T@U) (b@@74 T@U) ) (!  (=> (and (and (= (type a@@125) DatatypeTypeType) (= (type b@@74) DatatypeTypeType)) (and (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q a@@125) (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q b@@74))) (and (=> (|MutableBtreeBulkOperations.MB.Abs.NodeContents#Equal| a@@125 b@@74) (and (and (= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren a@@125) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren b@@74)) (= (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots a@@125) (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots b@@74))) (= (MutableBtreeBulkOperations.MB.Abs.NodeContents.children a@@125) (MutableBtreeBulkOperations.MB.Abs.NodeContents.children b@@74)))) (=> (and (and (= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren a@@125) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren b@@74)) (= (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots a@@125) (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots b@@74))) (= (MutableBtreeBulkOperations.MB.Abs.NodeContents.children a@@125) (MutableBtreeBulkOperations.MB.Abs.NodeContents.children b@@74))) (|MutableBtreeBulkOperations.MB.Abs.NodeContents#Equal| a@@125 b@@74)))) :qid |unknown.0:0| :skolemid |3153| :pattern ( (|MutableBtreeBulkOperations.MB.Abs.NodeContents#Equal| a@@125 b@@74) (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q a@@125)) :pattern ( (|MutableBtreeBulkOperations.MB.Abs.NodeContents#Equal| a@@125 b@@74) (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q b@@74)) )))
(assert (forall ((a@@126 T@U) (b@@75 T@U) ) (!  (=> (and (= (type a@@126) DatatypeTypeType) (= (type b@@75) DatatypeTypeType)) (and (=> (|MutableBtreeBulkOperations.MB.Abs.NodeContents#Equal| a@@126 b@@75) (= a@@126 b@@75)) (=> (= a@@126 b@@75) (|MutableBtreeBulkOperations.MB.Abs.NodeContents#Equal| a@@126 b@@75)))) :qid |unknown.0:0| :skolemid |3154| :pattern ( (|MutableBtreeBulkOperations.MB.Abs.NodeContents#Equal| a@@126 b@@75)) )))
(assert (= (type Tclass.MutableBtreeBulkOperations.MB.Abs.__default) TyType))
(assert (= (Tag Tclass.MutableBtreeBulkOperations.MB.Abs.__default) Tagclass.MutableBtreeBulkOperations.MB.Abs.__default))
(assert (forall ((bx@@110 T@U) ) (!  (=> (and (= (type bx@@110) BoxType) ($IsBox bx@@110 Tclass.MutableBtreeBulkOperations.MB.Abs.__default)) (and (= ($Box ($Unbox refType bx@@110)) bx@@110) ($Is ($Unbox refType bx@@110) Tclass.MutableBtreeBulkOperations.MB.Abs.__default))) :qid |unknown.0:0| :skolemid |3155| :pattern ( ($IsBox bx@@110 Tclass.MutableBtreeBulkOperations.MB.Abs.__default)) )))
(assert (forall (($o@@45 T@U) ) (!  (=> (= (type $o@@45) refType) (and (=> ($Is $o@@45 Tclass.MutableBtreeBulkOperations.MB.Abs.__default) (or (= $o@@45 null) (= (dtype $o@@45) Tclass.MutableBtreeBulkOperations.MB.Abs.__default))) (=> (or (= $o@@45 null) (= (dtype $o@@45) Tclass.MutableBtreeBulkOperations.MB.Abs.__default)) ($Is $o@@45 Tclass.MutableBtreeBulkOperations.MB.Abs.__default)))) :qid |unknown.0:0| :skolemid |3156| :pattern ( ($Is $o@@45 Tclass.MutableBtreeBulkOperations.MB.Abs.__default)) )))
(assert (forall (($o@@46 T@U) ($h@@71 T@U) ) (!  (=> (and (= (type $o@@46) refType) (= (type $h@@71) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@46 Tclass.MutableBtreeBulkOperations.MB.Abs.__default $h@@71) (or (= $o@@46 null) (U_2_bool (MapType1Select (MapType0Select $h@@71 $o@@46) alloc)))) (=> (or (= $o@@46 null) (U_2_bool (MapType1Select (MapType0Select $h@@71 $o@@46) alloc))) ($IsAlloc $o@@46 Tclass.MutableBtreeBulkOperations.MB.Abs.__default $h@@71)))) :qid |unknown.0:0| :skolemid |3157| :pattern ( ($IsAlloc $o@@46 Tclass.MutableBtreeBulkOperations.MB.Abs.__default $h@@71)) )))
(assert  (=> true (=> true (and (and (< 2 MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf) (< MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf (Div NativeTypes.__default.Uint64UpperBound (LitInt 4)))) (and (<= (LitInt 0) MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf) (< MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf 18446744073709551616))))))
(assert  (=> |MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf#requires| true))
(assert  (=> true |MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf#requires|))
(assert  (=> true (=> true (and (and (< 3 MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren) (< MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren (Div NativeTypes.__default.Uint64UpperBound (LitInt 4)))) (and (<= (LitInt 0) MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren) (< MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren 18446744073709551616))))))
(assert  (=> |MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren#requires| true))
(assert  (=> true |MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren#requires|))
(assert (= (type MutableBtreeBulkOperations.MB.Abs.__default.DefaultValue) BoxType))
(assert  (=> true (=> true ($IsBox MutableBtreeBulkOperations.MB.Abs.__default.DefaultValue |#$Value|))))
(assert  (=> |MutableBtreeBulkOperations.MB.Abs.__default.DefaultValue#requires| true))
(assert  (=> true |MutableBtreeBulkOperations.MB.Abs.__default.DefaultValue#requires|))
(assert (= (type MutableBtreeBulkOperations.MB.Abs.__default.DefaultKey) (SeqType BoxType)))
(assert  (=> true (=> true ($Is MutableBtreeBulkOperations.MB.Abs.__default.DefaultKey (TSeq Tclass.NativeTypes.byte)))))
(assert  (=> |MutableBtreeBulkOperations.MB.Abs.__default.DefaultKey#requires| true))
(assert  (=> true |MutableBtreeBulkOperations.MB.Abs.__default.DefaultKey#requires|))
(assert (forall (($ly@@742 T@U) ($Heap@@75 T@U) (|nodes#0@@11| T@U) ) (!  (=> (and (and (= (type $ly@@742) LayerTypeType) (= (type $Heap@@75) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@11|) (SeqType BoxType))) (= (MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight ($LS $ly@@742) $Heap@@75 |nodes#0@@11|) (MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight $ly@@742 $Heap@@75 |nodes#0@@11|))) :qid |MutableB.44:12| :skolemid |3158| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight ($LS $ly@@742) $Heap@@75 |nodes#0@@11|)) )))
(assert (forall (($ly@@743 T@U) ($Heap@@76 T@U) (|nodes#0@@12| T@U) ) (!  (=> (and (and (= (type $ly@@743) LayerTypeType) (= (type $Heap@@76) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@12|) (SeqType BoxType))) (= (MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight $ly@@743 $Heap@@76 |nodes#0@@12|) (MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight $LZ $Heap@@76 |nodes#0@@12|))) :qid |MutableB.44:12| :skolemid |3159| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight (AsFuelBottom $ly@@743) $Heap@@76 |nodes#0@@12|)) )))
(assert (forall (($ly@@744 T@U) ($h0@@5 T@U) ($h1@@5 T@U) (|nodes#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@744) LayerTypeType) (= (type $h0@@5) (MapType0Type refType MapType1Type))) (= (type $h1@@5) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@13|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@5) ($IsGoodHeap $h1@@5)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight#canCall| $h0@@5 |nodes#0@@13|) ($Is |nodes#0@@13| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node)))) (and ($IsHeapAnchor $h0@@5) ($HeapSucc $h0@@5 $h1@@5)))) (forall (($o@@47 T@U) ($f@@5 T@U) ) (! (let ((alpha@@12 (FieldTypeInv0 (type $f@@5)))) (=> (and (and (= (type $o@@47) refType) (= (type $f@@5) (FieldType alpha@@12))) (and (not (= $o@@47 null)) (U_2_bool (MapType0Select (Sequences.__default.Set Tclass.MutableBtreeBulkOperations.MB.Abs.Node |nodes#0@@13|) ($Box $o@@47))))) (= (MapType1Select (MapType0Select $h0@@5 $o@@47) $f@@5) (MapType1Select (MapType0Select $h1@@5 $o@@47) $f@@5)))) :qid |unknown.0:0| :skolemid |3160| :no-pattern (type $o@@47) :no-pattern (type $f@@5) :no-pattern (U_2_int $o@@47) :no-pattern (U_2_bool $o@@47) :no-pattern (U_2_int $f@@5) :no-pattern (U_2_bool $f@@5) ))) (= (MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight $ly@@744 $h0@@5 |nodes#0@@13|) (MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight $ly@@744 $h1@@5 |nodes#0@@13|))) :qid |unknown.0:0| :skolemid |3161| :pattern ( ($IsHeapAnchor $h0@@5) ($HeapSucc $h0@@5 $h1@@5) (MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight $ly@@744 $h1@@5 |nodes#0@@13|)) )))
(assert  (=> true (forall (($ly@@745 T@U) ($Heap@@77 T@U) (|nodes#0@@14| T@U) ) (!  (=> (and (and (and (= (type $ly@@745) LayerTypeType) (= (type $Heap@@77) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@14|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight#canCall| $Heap@@77 |nodes#0@@14|) (and ($IsGoodHeap $Heap@@77) ($Is |nodes#0@@14| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node))))) (forall ((|i#0@@142| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@142|) (< |i#0@@142| (|Seq#Length| |nodes#0@@14|))) (<= (U_2_int (MapType1Select (MapType0Select $Heap@@77 ($Unbox refType (|Seq#Index| |nodes#0@@14| |i#0@@142|))) MutableBtreeBulkOperations.MB.Abs.Node.height)) (MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight $ly@@745 $Heap@@77 |nodes#0@@14|)))) :qid |MutableB.45:20| :skolemid |3162| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@14| |i#0@@142|))) ))) :qid |MutableB.44:12| :skolemid |3163| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight $ly@@745 $Heap@@77 |nodes#0@@14|)) ))))
(assert (forall (($ly@@746 T@U) ($Heap@@78 T@U) (|nodes#0@@15| T@U) ) (!  (=> (and (and (and (= (type $ly@@746) LayerTypeType) (= (type $Heap@@78) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@15|) (SeqType BoxType))) (and ($IsGoodHeap $Heap@@78) ($Is |nodes#0@@15| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node)))) (and (=> (|MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight#requires| $ly@@746 $Heap@@78 |nodes#0@@15|) true) (=> true (|MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight#requires| $ly@@746 $Heap@@78 |nodes#0@@15|)))) :qid |MutableB.44:12| :skolemid |3164| :pattern ( (|MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight#requires| $ly@@746 $Heap@@78 |nodes#0@@15|)) )))
(assert  (=> true (forall (($ly@@747 T@U) ($Heap@@79 T@U) (|nodes#0@@16| T@U) ) (!  (=> (and (and (and (= (type $ly@@747) LayerTypeType) (= (type $Heap@@79) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@16|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight#canCall| $Heap@@79 |nodes#0@@16|) (and ($IsGoodHeap $Heap@@79) ($Is |nodes#0@@16| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node))))) (and (=> (not (|Seq#Equal| |nodes#0@@16| (|Seq#Empty| BoxType))) (and (|MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight#canCall| $Heap@@79 (|Seq#Drop| |nodes#0@@16| (LitInt 1))) (|Mathematics.__default.max#canCall| (U_2_int (MapType1Select (MapType0Select $Heap@@79 ($Unbox refType (|Seq#Index| |nodes#0@@16| (LitInt 0)))) MutableBtreeBulkOperations.MB.Abs.Node.height)) (MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight $ly@@747 $Heap@@79 (|Seq#Drop| |nodes#0@@16| (LitInt 1)))))) (= (MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight ($LS $ly@@747) $Heap@@79 |nodes#0@@16|) (ite (|Seq#Equal| |nodes#0@@16| (|Seq#Empty| BoxType)) (- 0 1) (Mathematics.__default.max (U_2_int (MapType1Select (MapType0Select $Heap@@79 ($Unbox refType (|Seq#Index| |nodes#0@@16| (LitInt 0)))) MutableBtreeBulkOperations.MB.Abs.Node.height)) (MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight $ly@@747 $Heap@@79 (|Seq#Drop| |nodes#0@@16| (LitInt 1)))))))) :qid |MutableB.44:12| :skolemid |3165| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight ($LS $ly@@747) $Heap@@79 |nodes#0@@16|)) ))))
(assert (forall (($h0@@6 T@U) ($h1@@6 T@U) (|nodes#0@@17| T@U) (|i#0@@143| Int) (|j#0@@36| Int) ) (!  (=> (and (and (= (type $h0@@6) (MapType0Type refType MapType1Type)) (= (type $h1@@6) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@17|) (SeqType BoxType))) (=> (and (and (and ($IsGoodHeap $h0@@6) ($IsGoodHeap $h1@@6)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs#canCall| $h0@@6 |nodes#0@@17| |i#0@@143| |j#0@@36|) ($Is |nodes#0@@17| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node)))) (and ($IsHeapAnchor $h0@@6) ($HeapSucc $h0@@6 $h1@@6))) (=> (forall (($o@@48 T@U) ($f@@6 T@U) ) (! (let ((alpha@@13 (FieldTypeInv0 (type $f@@6)))) (=> (and (and (= (type $o@@48) refType) (= (type $f@@6) (FieldType alpha@@13))) (and (not (= $o@@48 null)) (or (= $o@@48 ($Unbox refType (|Seq#Index| |nodes#0@@17| |i#0@@143|))) (= $o@@48 ($Unbox refType (|Seq#Index| |nodes#0@@17| |j#0@@36|)))))) (= (MapType1Select (MapType0Select $h0@@6 $o@@48) $f@@6) (MapType1Select (MapType0Select $h1@@6 $o@@48) $f@@6)))) :qid |unknown.0:0| :skolemid |3166| :no-pattern (type $o@@48) :no-pattern (type $f@@6) :no-pattern (U_2_int $o@@48) :no-pattern (U_2_bool $o@@48) :no-pattern (U_2_int $f@@6) :no-pattern (U_2_bool $f@@6) )) (and (=> (MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs $h0@@6 |nodes#0@@17| |i#0@@143| |j#0@@36|) (MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs $h1@@6 |nodes#0@@17| |i#0@@143| |j#0@@36|)) (=> (MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs $h1@@6 |nodes#0@@17| |i#0@@143| |j#0@@36|) (MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs $h0@@6 |nodes#0@@17| |i#0@@143| |j#0@@36|)))))) :qid |DafnyPre.521:12| :skolemid |3167| :pattern ( ($IsHeapAnchor $h0@@6) ($HeapSucc $h0@@6 $h1@@6) (MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs $h1@@6 |nodes#0@@17| |i#0@@143| |j#0@@36|)) )))
(assert  (=> true (forall (($Heap@@80 T@U) (|nodes#0@@18| T@U) (|i#0@@144| Int) (|j#0@@37| Int) ) (!  (=> (and (and (= (type $Heap@@80) (MapType0Type refType MapType1Type)) (= (type |nodes#0@@18|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs#canCall| $Heap@@80 |nodes#0@@18| |i#0@@144| |j#0@@37|) (and (and ($IsGoodHeap $Heap@@80) ($Is |nodes#0@@18| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) (and (and (<= (LitInt 0) |i#0@@144|) (< |i#0@@144| (|Seq#Length| |nodes#0@@18|))) (and (<= (LitInt 0) |j#0@@37|) (< |j#0@@37| (|Seq#Length| |nodes#0@@18|))))))) true) :qid |MutableB.66:13| :skolemid |3168| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs $Heap@@80 |nodes#0@@18| |i#0@@144| |j#0@@37|)) ))))
(assert (forall (($Heap@@81 T@U) (|nodes#0@@19| T@U) (|i#0@@145| Int) (|j#0@@38| Int) ) (!  (=> (and (and (= (type $Heap@@81) (MapType0Type refType MapType1Type)) (= (type |nodes#0@@19|) (SeqType BoxType))) (and ($IsGoodHeap $Heap@@81) ($Is |nodes#0@@19| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node)))) (and (=> (|MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs#requires| $Heap@@81 |nodes#0@@19| |i#0@@145| |j#0@@38|) (and (and (<= (LitInt 0) |i#0@@145|) (< |i#0@@145| (|Seq#Length| |nodes#0@@19|))) (and (<= (LitInt 0) |j#0@@38|) (< |j#0@@38| (|Seq#Length| |nodes#0@@19|))))) (=> (and (and (<= (LitInt 0) |i#0@@145|) (< |i#0@@145| (|Seq#Length| |nodes#0@@19|))) (and (<= (LitInt 0) |j#0@@38|) (< |j#0@@38| (|Seq#Length| |nodes#0@@19|)))) (|MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs#requires| $Heap@@81 |nodes#0@@19| |i#0@@145| |j#0@@38|)))) :qid |MutableB.66:13| :skolemid |3169| :pattern ( (|MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs#requires| $Heap@@81 |nodes#0@@19| |i#0@@145| |j#0@@38|)) )))
(assert  (=> true (forall (($Heap@@82 T@U) (|nodes#0@@20| T@U) (|i#0@@146| Int) (|j#0@@39| Int) ) (!  (=> (and (and (= (type $Heap@@82) (MapType0Type refType MapType1Type)) (= (type |nodes#0@@20|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs#canCall| $Heap@@82 |nodes#0@@20| |i#0@@146| |j#0@@39|) (and (and ($IsGoodHeap $Heap@@82) ($Is |nodes#0@@20| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) (and (and (<= (LitInt 0) |i#0@@146|) (< |i#0@@146| (|Seq#Length| |nodes#0@@20|))) (and (<= (LitInt 0) |j#0@@39|) (< |j#0@@39| (|Seq#Length| |nodes#0@@20|))))))) (and (=> (MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs $Heap@@82 |nodes#0@@20| |i#0@@146| |j#0@@39|) (|Set#Disjoint| (MapType1Select (MapType0Select $Heap@@82 ($Unbox refType (|Seq#Index| |nodes#0@@20| |i#0@@146|))) MutableBtreeBulkOperations.MB.Abs.Node.repr) (MapType1Select (MapType0Select $Heap@@82 ($Unbox refType (|Seq#Index| |nodes#0@@20| |j#0@@39|))) MutableBtreeBulkOperations.MB.Abs.Node.repr))) (=> (|Set#Disjoint| (MapType1Select (MapType0Select $Heap@@82 ($Unbox refType (|Seq#Index| |nodes#0@@20| |i#0@@146|))) MutableBtreeBulkOperations.MB.Abs.Node.repr) (MapType1Select (MapType0Select $Heap@@82 ($Unbox refType (|Seq#Index| |nodes#0@@20| |j#0@@39|))) MutableBtreeBulkOperations.MB.Abs.Node.repr)) (MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs $Heap@@82 |nodes#0@@20| |i#0@@146| |j#0@@39|)))) :qid |MutableB.66:13| :skolemid |3170| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs $Heap@@82 |nodes#0@@20| |i#0@@146| |j#0@@39|)) ))))
(assert (forall ((arg0@@362 T@U) (arg1@@225 T@U) (arg2@@135 T@U) ) (! (= (type (MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr arg0@@362 arg1@@225 arg2@@135)) (MapType0Type BoxType boolType)) :qid |funType:MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr arg0@@362 arg1@@225 arg2@@135)) )))
(assert (forall (($ly@@748 T@U) ($Heap@@83 T@U) (|nodes#0@@21| T@U) ) (!  (=> (and (and (= (type $ly@@748) LayerTypeType) (= (type $Heap@@83) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@21|) (SeqType BoxType))) (= (MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr ($LS $ly@@748) $Heap@@83 |nodes#0@@21|) (MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr $ly@@748 $Heap@@83 |nodes#0@@21|))) :qid |MutableB.74:22| :skolemid |3171| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr ($LS $ly@@748) $Heap@@83 |nodes#0@@21|)) )))
(assert (forall (($ly@@749 T@U) ($Heap@@84 T@U) (|nodes#0@@22| T@U) ) (!  (=> (and (and (= (type $ly@@749) LayerTypeType) (= (type $Heap@@84) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@22|) (SeqType BoxType))) (= (MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr $ly@@749 $Heap@@84 |nodes#0@@22|) (MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr $LZ $Heap@@84 |nodes#0@@22|))) :qid |MutableB.74:22| :skolemid |3172| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr (AsFuelBottom $ly@@749) $Heap@@84 |nodes#0@@22|)) )))
(assert (forall (($ly@@750 T@U) ($h0@@7 T@U) ($h1@@7 T@U) (|nodes#0@@23| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@750) LayerTypeType) (= (type $h0@@7) (MapType0Type refType MapType1Type))) (= (type $h1@@7) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@23|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@7) ($IsGoodHeap $h1@@7)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr#canCall| $h0@@7 |nodes#0@@23|) ($Is |nodes#0@@23| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node)))) (and ($IsHeapAnchor $h0@@7) ($HeapSucc $h0@@7 $h1@@7)))) (forall (($o@@49 T@U) ($f@@7 T@U) ) (! (let ((alpha@@14 (FieldTypeInv0 (type $f@@7)))) (=> (and (and (= (type $o@@49) refType) (= (type $f@@7) (FieldType alpha@@14))) (and (not (= $o@@49 null)) (U_2_bool (MapType0Select (Sequences.__default.Set Tclass.MutableBtreeBulkOperations.MB.Abs.Node |nodes#0@@23|) ($Box $o@@49))))) (= (MapType1Select (MapType0Select $h0@@7 $o@@49) $f@@7) (MapType1Select (MapType0Select $h1@@7 $o@@49) $f@@7)))) :qid |unknown.0:0| :skolemid |3173| :no-pattern (type $o@@49) :no-pattern (type $f@@7) :no-pattern (U_2_int $o@@49) :no-pattern (U_2_bool $o@@49) :no-pattern (U_2_int $f@@7) :no-pattern (U_2_bool $f@@7) ))) (= (MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr $ly@@750 $h0@@7 |nodes#0@@23|) (MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr $ly@@750 $h1@@7 |nodes#0@@23|))) :qid |unknown.0:0| :skolemid |3174| :pattern ( ($IsHeapAnchor $h0@@7) ($HeapSucc $h0@@7 $h1@@7) (MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr $ly@@750 $h1@@7 |nodes#0@@23|)) )))
(assert  (=> true (forall (($ly@@751 T@U) ($Heap@@85 T@U) (|nodes#0@@24| T@U) ) (!  (=> (and (and (and (= (type $ly@@751) LayerTypeType) (= (type $Heap@@85) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@24|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr#canCall| $Heap@@85 |nodes#0@@24|) (and ($IsGoodHeap $Heap@@85) ($Is |nodes#0@@24| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node))))) (and (and (forall ((|i#0@@147| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@147|) (< |i#0@@147| (|Seq#Length| |nodes#0@@24|))) (|Set#Subset| (MapType1Select (MapType0Select $Heap@@85 ($Unbox refType (|Seq#Index| |nodes#0@@24| |i#0@@147|))) MutableBtreeBulkOperations.MB.Abs.Node.repr) (MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr $ly@@751 $Heap@@85 |nodes#0@@24|)))) :qid |MutableB.75:20| :skolemid |3175| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@24| |i#0@@147|))) )) (=> (|Seq#Equal| |nodes#0@@24| (|Seq#Empty| BoxType)) (|Set#Equal| (MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr $ly@@751 $Heap@@85 |nodes#0@@24|) (|Set#Empty| BoxType)))) ($Is (MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr $ly@@751 $Heap@@85 |nodes#0@@24|) (TSet Tclass._System.object)))) :qid |MutableB.74:22| :skolemid |3176| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr $ly@@751 $Heap@@85 |nodes#0@@24|)) ))))
(assert (forall (($ly@@752 T@U) ($Heap@@86 T@U) (|nodes#0@@25| T@U) ) (!  (=> (and (and (and (= (type $ly@@752) LayerTypeType) (= (type $Heap@@86) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@25|) (SeqType BoxType))) (and ($IsGoodHeap $Heap@@86) ($Is |nodes#0@@25| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node)))) (and (=> (|MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr#requires| $ly@@752 $Heap@@86 |nodes#0@@25|) true) (=> true (|MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr#requires| $ly@@752 $Heap@@86 |nodes#0@@25|)))) :qid |MutableB.74:22| :skolemid |3177| :pattern ( (|MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr#requires| $ly@@752 $Heap@@86 |nodes#0@@25|)) )))
(assert (forall ((arg0@@363 T@U) (arg1@@226 Int) (arg2@@136 Int) (arg3@@90 T@U) (arg4@@61 T@U) (arg5@@24 T@U) (arg6@@8 T@U) (arg7@@3 T@U) (arg8@@3 T@U) ) (! (= (type (|lambda#154| arg0@@363 arg1@@226 arg2@@136 arg3@@90 arg4@@61 arg5@@24 arg6@@8 arg7@@3 arg8@@3)) (MapType0Type BoxType boolType)) :qid |funType:lambda#154| :pattern ( (|lambda#154| arg0@@363 arg1@@226 arg2@@136 arg3@@90 arg4@@61 arg5@@24 arg6@@8 arg7@@3 arg8@@3)) )))
(assert  (=> true (forall (($ly@@753 T@U) ($Heap@@87 T@U) (|nodes#0@@26| T@U) ) (!  (=> (and (and (and (= (type $ly@@753) LayerTypeType) (= (type $Heap@@87) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@26|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr#canCall| $Heap@@87 |nodes#0@@26|) (and ($IsGoodHeap $Heap@@87) ($Is |nodes#0@@26| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node))))) (= (MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr ($LS $ly@@753) $Heap@@87 |nodes#0@@26|) (|lambda#154| Tclass._System.object (LitInt 0) (|Seq#Length| |nodes#0@@26|) $Heap@@87 |nodes#0@@26| MutableBtreeBulkOperations.MB.Abs.Node.repr $Heap@@87 |nodes#0@@26| MutableBtreeBulkOperations.MB.Abs.Node.repr))) :qid |MutableB.74:22| :skolemid |3179| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr ($LS $ly@@753) $Heap@@87 |nodes#0@@26|)) ))))
(assert (forall (($ly@@754 T@U) ($Heap@@88 T@U) (|nodes#0@@27| T@U) ) (!  (=> (and (and (= (type $ly@@754) LayerTypeType) (= (type $Heap@@88) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@27|) (SeqType BoxType))) (and (=> (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings ($LS $ly@@754) $Heap@@88 |nodes#0@@27|) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings $ly@@754 $Heap@@88 |nodes#0@@27|)) (=> (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings $ly@@754 $Heap@@88 |nodes#0@@27|) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings ($LS $ly@@754) $Heap@@88 |nodes#0@@27|)))) :qid |MutableB.142:13| :skolemid |3180| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings ($LS $ly@@754) $Heap@@88 |nodes#0@@27|)) )))
(assert (forall (($ly@@755 T@U) ($Heap@@89 T@U) (|nodes#0@@28| T@U) ) (!  (=> (and (and (= (type $ly@@755) LayerTypeType) (= (type $Heap@@89) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@28|) (SeqType BoxType))) (and (=> (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings $ly@@755 $Heap@@89 |nodes#0@@28|) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings $LZ $Heap@@89 |nodes#0@@28|)) (=> (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings $LZ $Heap@@89 |nodes#0@@28|) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings $ly@@755 $Heap@@89 |nodes#0@@28|)))) :qid |MutableB.142:13| :skolemid |3181| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings (AsFuelBottom $ly@@755) $Heap@@89 |nodes#0@@28|)) )))
(assert (= (type StartFuel_MutableBtreeBulkOperations.MB.Abs._default.SeqRepr) LayerTypeType))
(assert (forall (($ly@@756 T@U) ($h0@@8 T@U) ($h1@@8 T@U) (|nodes#0@@29| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@756) LayerTypeType) (= (type $h0@@8) (MapType0Type refType MapType1Type))) (= (type $h1@@8) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@29|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@8) ($IsGoodHeap $h1@@8)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings#canCall| $h0@@8 |nodes#0@@29|) ($Is |nodes#0@@29| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node)))) (and ($IsHeapAnchor $h0@@8) ($HeapSucc $h0@@8 $h1@@8)))) (forall (($o@@50 T@U) ($f@@8 T@U) ) (! (let ((alpha@@15 (FieldTypeInv0 (type $f@@8)))) (=> (and (and (= (type $o@@50) refType) (= (type $f@@8) (FieldType alpha@@15))) (and (not (= $o@@50 null)) (or (U_2_bool (MapType0Select (Sequences.__default.Set Tclass.MutableBtreeBulkOperations.MB.Abs.Node |nodes#0@@29|) ($Box $o@@50))) (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr StartFuel_MutableBtreeBulkOperations.MB.Abs._default.SeqRepr $h0@@8 |nodes#0@@29|) ($Box $o@@50)))))) (= (MapType1Select (MapType0Select $h0@@8 $o@@50) $f@@8) (MapType1Select (MapType0Select $h1@@8 $o@@50) $f@@8)))) :qid |unknown.0:0| :skolemid |3182| :no-pattern (type $o@@50) :no-pattern (type $f@@8) :no-pattern (U_2_int $o@@50) :no-pattern (U_2_bool $o@@50) :no-pattern (U_2_int $f@@8) :no-pattern (U_2_bool $f@@8) ))) (and (=> (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings $ly@@756 $h0@@8 |nodes#0@@29|) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings $ly@@756 $h1@@8 |nodes#0@@29|)) (=> (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings $ly@@756 $h1@@8 |nodes#0@@29|) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings $ly@@756 $h0@@8 |nodes#0@@29|)))) :qid |unknown.0:0| :skolemid |3183| :pattern ( ($IsHeapAnchor $h0@@8) ($HeapSucc $h0@@8 $h1@@8) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings $ly@@756 $h1@@8 |nodes#0@@29|)) )))
(assert  (=> true (forall (($ly@@757 T@U) ($Heap@@90 T@U) (|nodes#0@@30| T@U) ) (!  (=> (and (and (and (= (type $ly@@757) LayerTypeType) (= (type $Heap@@90) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@30|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings#canCall| $Heap@@90 |nodes#0@@30|) (and ($IsGoodHeap $Heap@@90) ($Is |nodes#0@@30| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node))))) true) :qid |MutableB.142:13| :skolemid |3184| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings $ly@@757 $Heap@@90 |nodes#0@@30|)) ))))
(assert (forall (($ly@@758 T@U) ($Heap@@91 T@U) (|nodes#0@@31| T@U) ) (!  (=> (and (and (and (= (type $ly@@758) LayerTypeType) (= (type $Heap@@91) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@31|) (SeqType BoxType))) (and ($IsGoodHeap $Heap@@91) ($Is |nodes#0@@31| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node)))) (and (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings#requires| $ly@@758 $Heap@@91 |nodes#0@@31|) true) (=> true (|MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings#requires| $ly@@758 $Heap@@91 |nodes#0@@31|)))) :qid |MutableB.142:13| :skolemid |3185| :pattern ( (|MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings#requires| $ly@@758 $Heap@@91 |nodes#0@@31|)) )))
(assert  (=> true (forall (($ly@@759 T@U) ($Heap@@92 T@U) (|nodes#0@@32| T@U) ) (!  (=> (and (and (and (= (type $ly@@759) LayerTypeType) (= (type $Heap@@92) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@32|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings#canCall| $Heap@@92 |nodes#0@@32|) (and ($IsGoodHeap $Heap@@92) ($Is |nodes#0@@32| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node))))) (and (and (forall ((|i#0@@148| Int) ) (!  (=> (< |i#0@@148| (|Seq#Length| |nodes#0@@32|)) (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@@92 ($Unbox refType (|Seq#Index| |nodes#0@@32| |i#0@@148|)))) :qid |MutableB.146:16| :skolemid |3186| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@32| |i#0@@148|))) )) (=> (forall ((|i#0@@149| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@149|) (< |i#0@@149| (|Seq#Length| |nodes#0@@32|))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShape $ly@@759 $Heap@@92 ($Unbox refType (|Seq#Index| |nodes#0@@32| |i#0@@149|))))) :qid |MutableB.146:16| :skolemid |3188| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@32| |i#0@@149|))) )) (forall ((|i#1@@72| Int) (|j#0@@40| Int) ) (!  (=> (< |j#0@@40| (|Seq#Length| |nodes#0@@32|)) (|MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs#canCall| $Heap@@92 |nodes#0@@32| |i#1@@72| |j#0@@40|)) :qid |MutableB.147:16| :skolemid |3187| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs $Heap@@92 |nodes#0@@32| |i#1@@72| |j#0@@40|)) )))) (and (=> (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings ($LS $ly@@759) $Heap@@92 |nodes#0@@32|) (and (forall ((|i#0@@150| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@150|) (< |i#0@@150| (|Seq#Length| |nodes#0@@32|))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShape $ly@@759 $Heap@@92 ($Unbox refType (|Seq#Index| |nodes#0@@32| |i#0@@150|))))) :qid |MutableB.146:16| :skolemid |3189| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@32| |i#0@@150|))) )) (forall ((|i#1@@73| Int) (|j#0@@41| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@73|) (< |i#1@@73| |j#0@@41|)) (< |j#0@@41| (|Seq#Length| |nodes#0@@32|))) (MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs $Heap@@92 |nodes#0@@32| |i#1@@73| |j#0@@41|))) :qid |MutableB.147:16| :skolemid |3190| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs $Heap@@92 |nodes#0@@32| |i#1@@73| |j#0@@41|)) )))) (=> (and (forall ((|i#0@@151| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@151|) (< |i#0@@151| (|Seq#Length| |nodes#0@@32|))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShape $ly@@759 $Heap@@92 ($Unbox refType (|Seq#Index| |nodes#0@@32| |i#0@@151|))))) :qid |MutableB.146:16| :skolemid |3189| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@32| |i#0@@151|))) )) (forall ((|i#1@@74| Int) (|j#0@@42| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@74|) (< |i#1@@74| |j#0@@42|)) (< |j#0@@42| (|Seq#Length| |nodes#0@@32|))) (MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs $Heap@@92 |nodes#0@@32| |i#1@@74| |j#0@@42|))) :qid |MutableB.147:16| :skolemid |3190| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs $Heap@@92 |nodes#0@@32| |i#1@@74| |j#0@@42|)) ))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings ($LS $ly@@759) $Heap@@92 |nodes#0@@32|))))) :qid |MutableB.142:13| :skolemid |3191| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings ($LS $ly@@759) $Heap@@92 |nodes#0@@32|)) ))))
(assert (forall (($ly@@760 T@U) ($Heap@@93 T@U) (|nodes#0@@33| T@U) (|parentRepr#0| T@U) (|parentHeight#0| Int) ) (!  (=> (and (and (and (= (type $ly@@760) LayerTypeType) (= (type $Heap@@93) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@33|) (SeqType BoxType))) (= (type |parentRepr#0|) (MapType0Type BoxType boolType))) (and (=> (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS $ly@@760) $Heap@@93 |nodes#0@@33| |parentRepr#0| |parentHeight#0|) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren $ly@@760 $Heap@@93 |nodes#0@@33| |parentRepr#0| |parentHeight#0|)) (=> (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren $ly@@760 $Heap@@93 |nodes#0@@33| |parentRepr#0| |parentHeight#0|) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS $ly@@760) $Heap@@93 |nodes#0@@33| |parentRepr#0| |parentHeight#0|)))) :qid |MutableB.150:13| :skolemid |3192| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS $ly@@760) $Heap@@93 |nodes#0@@33| |parentRepr#0| |parentHeight#0|)) )))
(assert (forall (($ly@@761 T@U) ($Heap@@94 T@U) (|nodes#0@@34| T@U) (|parentRepr#0@@0| T@U) (|parentHeight#0@@0| Int) ) (!  (=> (and (and (and (= (type $ly@@761) LayerTypeType) (= (type $Heap@@94) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@34|) (SeqType BoxType))) (= (type |parentRepr#0@@0|) (MapType0Type BoxType boolType))) (and (=> (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren $ly@@761 $Heap@@94 |nodes#0@@34| |parentRepr#0@@0| |parentHeight#0@@0|) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren $LZ $Heap@@94 |nodes#0@@34| |parentRepr#0@@0| |parentHeight#0@@0|)) (=> (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren $LZ $Heap@@94 |nodes#0@@34| |parentRepr#0@@0| |parentHeight#0@@0|) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren $ly@@761 $Heap@@94 |nodes#0@@34| |parentRepr#0@@0| |parentHeight#0@@0|)))) :qid |MutableB.150:13| :skolemid |3193| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren (AsFuelBottom $ly@@761) $Heap@@94 |nodes#0@@34| |parentRepr#0@@0| |parentHeight#0@@0|)) )))
(assert (forall (($ly@@762 T@U) ($h0@@9 T@U) ($h1@@9 T@U) (|nodes#0@@35| T@U) (|parentRepr#0@@1| T@U) (|parentHeight#0@@1| Int) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@762) LayerTypeType) (= (type $h0@@9) (MapType0Type refType MapType1Type))) (= (type $h1@@9) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@35|) (SeqType BoxType))) (= (type |parentRepr#0@@1|) (MapType0Type BoxType boolType))) (and (and (and ($IsGoodHeap $h0@@9) ($IsGoodHeap $h1@@9)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren#canCall| $h0@@9 |nodes#0@@35| |parentRepr#0@@1| |parentHeight#0@@1|) (and (and ($Is |nodes#0@@35| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node)) ($Is |parentRepr#0@@1| (TSet Tclass._System.object))) (<= (LitInt 0) |parentHeight#0@@1|)))) (and ($IsHeapAnchor $h0@@9) ($HeapSucc $h0@@9 $h1@@9)))) (forall (($o@@51 T@U) ($f@@9 T@U) ) (! (let ((alpha@@16 (FieldTypeInv0 (type $f@@9)))) (=> (and (and (= (type $o@@51) refType) (= (type $f@@9) (FieldType alpha@@16))) (and (not (= $o@@51 null)) (U_2_bool (MapType0Select |parentRepr#0@@1| ($Box $o@@51))))) (= (MapType1Select (MapType0Select $h0@@9 $o@@51) $f@@9) (MapType1Select (MapType0Select $h1@@9 $o@@51) $f@@9)))) :qid |unknown.0:0| :skolemid |3194| :no-pattern (type $o@@51) :no-pattern (type $f@@9) :no-pattern (U_2_int $o@@51) :no-pattern (U_2_bool $o@@51) :no-pattern (U_2_int $f@@9) :no-pattern (U_2_bool $f@@9) ))) (and (=> (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren $ly@@762 $h0@@9 |nodes#0@@35| |parentRepr#0@@1| |parentHeight#0@@1|) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren $ly@@762 $h1@@9 |nodes#0@@35| |parentRepr#0@@1| |parentHeight#0@@1|)) (=> (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren $ly@@762 $h1@@9 |nodes#0@@35| |parentRepr#0@@1| |parentHeight#0@@1|) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren $ly@@762 $h0@@9 |nodes#0@@35| |parentRepr#0@@1| |parentHeight#0@@1|)))) :qid |unknown.0:0| :skolemid |3195| :pattern ( ($IsHeapAnchor $h0@@9) ($HeapSucc $h0@@9 $h1@@9) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren $ly@@762 $h1@@9 |nodes#0@@35| |parentRepr#0@@1| |parentHeight#0@@1|)) )))
(assert  (=> true (forall (($ly@@763 T@U) ($Heap@@95 T@U) (|nodes#0@@36| T@U) (|parentRepr#0@@2| T@U) (|parentHeight#0@@2| Int) ) (!  (=> (and (and (and (and (= (type $ly@@763) LayerTypeType) (= (type $Heap@@95) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@36|) (SeqType BoxType))) (= (type |parentRepr#0@@2|) (MapType0Type BoxType boolType))) (or (|MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren#canCall| $Heap@@95 |nodes#0@@36| |parentRepr#0@@2| |parentHeight#0@@2|) (and (and (and ($IsGoodHeap $Heap@@95) ($Is |nodes#0@@36| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) ($Is |parentRepr#0@@2| (TSet Tclass._System.object))) (<= (LitInt 0) |parentHeight#0@@2|)))) true) :qid |MutableB.150:13| :skolemid |3196| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren $ly@@763 $Heap@@95 |nodes#0@@36| |parentRepr#0@@2| |parentHeight#0@@2|)) ))))
(assert (forall (($ly@@764 T@U) ($Heap@@96 T@U) (|nodes#0@@37| T@U) (|parentRepr#0@@3| T@U) (|parentHeight#0@@3| Int) ) (!  (=> (and (and (and (and (= (type $ly@@764) LayerTypeType) (= (type $Heap@@96) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@37|) (SeqType BoxType))) (= (type |parentRepr#0@@3|) (MapType0Type BoxType boolType))) (and (and (and ($IsGoodHeap $Heap@@96) ($Is |nodes#0@@37| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) ($Is |parentRepr#0@@3| (TSet Tclass._System.object))) (<= (LitInt 0) |parentHeight#0@@3|))) (and (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren#requires| $ly@@764 $Heap@@96 |nodes#0@@37| |parentRepr#0@@3| |parentHeight#0@@3|) true) (=> true (|MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren#requires| $ly@@764 $Heap@@96 |nodes#0@@37| |parentRepr#0@@3| |parentHeight#0@@3|)))) :qid |MutableB.150:13| :skolemid |3197| :pattern ( (|MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren#requires| $ly@@764 $Heap@@96 |nodes#0@@37| |parentRepr#0@@3| |parentHeight#0@@3|)) )))
(assert  (=> true (forall (($ly@@765 T@U) ($Heap@@97 T@U) (|nodes#0@@38| T@U) (|parentRepr#0@@4| T@U) (|parentHeight#0@@4| Int) ) (!  (=> (and (and (and (and (= (type $ly@@765) LayerTypeType) (= (type $Heap@@97) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@38|) (SeqType BoxType))) (= (type |parentRepr#0@@4|) (MapType0Type BoxType boolType))) (or (|MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren#canCall| $Heap@@97 |nodes#0@@38| |parentRepr#0@@4| |parentHeight#0@@4|) (and (and (and ($IsGoodHeap $Heap@@97) ($Is |nodes#0@@38| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) ($Is |parentRepr#0@@4| (TSet Tclass._System.object))) (<= (LitInt 0) |parentHeight#0@@4|)))) (and (and (and (|Sequences.__default.Set#canCall| Tclass.MutableBtreeBulkOperations.MB.Abs.Node |nodes#0@@38|) (=> (|Set#Subset| (Sequences.__default.Set Tclass.MutableBtreeBulkOperations.MB.Abs.Node |nodes#0@@38|) |parentRepr#0@@4|) (|MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr#canCall| $Heap@@97 |nodes#0@@38|))) (=> (forall ((|i#0@@152| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@152|) (< |i#0@@152| (|Seq#Length| |nodes#0@@38|))) (< (U_2_int (MapType1Select (MapType0Select $Heap@@97 ($Unbox refType (|Seq#Index| |nodes#0@@38| |i#0@@152|))) MutableBtreeBulkOperations.MB.Abs.Node.height)) |parentHeight#0@@4|))) :qid |MutableB.157:16| :skolemid |3198| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@38| |i#0@@152|))) )) (|MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings#canCall| $Heap@@97 |nodes#0@@38|))) (and (=> (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS $ly@@765) $Heap@@97 |nodes#0@@38| |parentRepr#0@@4| |parentHeight#0@@4|) (and (and (and (|Set#Subset| (Sequences.__default.Set Tclass.MutableBtreeBulkOperations.MB.Abs.Node |nodes#0@@38|) |parentRepr#0@@4|) (|Set#Subset| (MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr StartFuel_MutableBtreeBulkOperations.MB.Abs._default.SeqRepr $Heap@@97 |nodes#0@@38|) |parentRepr#0@@4|)) (forall ((|i#0@@153| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@153|) (< |i#0@@153| (|Seq#Length| |nodes#0@@38|))) (< (U_2_int (MapType1Select (MapType0Select $Heap@@97 ($Unbox refType (|Seq#Index| |nodes#0@@38| |i#0@@153|))) MutableBtreeBulkOperations.MB.Abs.Node.height)) |parentHeight#0@@4|))) :qid |MutableB.157:16| :skolemid |3199| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@38| |i#0@@153|))) ))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings $ly@@765 $Heap@@97 |nodes#0@@38|))) (=> (and (and (and (|Set#Subset| (Sequences.__default.Set Tclass.MutableBtreeBulkOperations.MB.Abs.Node |nodes#0@@38|) |parentRepr#0@@4|) (|Set#Subset| (MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr StartFuel_MutableBtreeBulkOperations.MB.Abs._default.SeqRepr $Heap@@97 |nodes#0@@38|) |parentRepr#0@@4|)) (forall ((|i#0@@154| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@154|) (< |i#0@@154| (|Seq#Length| |nodes#0@@38|))) (< (U_2_int (MapType1Select (MapType0Select $Heap@@97 ($Unbox refType (|Seq#Index| |nodes#0@@38| |i#0@@154|))) MutableBtreeBulkOperations.MB.Abs.Node.height)) |parentHeight#0@@4|))) :qid |MutableB.157:16| :skolemid |3199| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@38| |i#0@@154|))) ))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings $ly@@765 $Heap@@97 |nodes#0@@38|)) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS $ly@@765) $Heap@@97 |nodes#0@@38| |parentRepr#0@@4| |parentHeight#0@@4|))))) :qid |MutableB.150:13| :skolemid |3200| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS $ly@@765) $Heap@@97 |nodes#0@@38| |parentRepr#0@@4| |parentHeight#0@@4|)) ))))
(assert (forall (($ly@@766 T@U) ($Heap@@98 T@U) (|node#0@@65| T@U) ) (!  (=> (and (and (= (type $ly@@766) LayerTypeType) (= (type $Heap@@98) (MapType0Type refType MapType1Type))) (= (type |node#0@@65|) refType)) (and (=> (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $ly@@766) $Heap@@98 |node#0@@65|) (MutableBtreeBulkOperations.MB.Abs.__default.WFShape $ly@@766 $Heap@@98 |node#0@@65|)) (=> (MutableBtreeBulkOperations.MB.Abs.__default.WFShape $ly@@766 $Heap@@98 |node#0@@65|) (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $ly@@766) $Heap@@98 |node#0@@65|)))) :qid |MutableB.161:13| :skolemid |3201| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $ly@@766) $Heap@@98 |node#0@@65|)) )))
(assert (forall (($ly@@767 T@U) ($Heap@@99 T@U) (|node#0@@66| T@U) ) (!  (=> (and (and (= (type $ly@@767) LayerTypeType) (= (type $Heap@@99) (MapType0Type refType MapType1Type))) (= (type |node#0@@66|) refType)) (and (=> (MutableBtreeBulkOperations.MB.Abs.__default.WFShape $ly@@767 $Heap@@99 |node#0@@66|) (MutableBtreeBulkOperations.MB.Abs.__default.WFShape $LZ $Heap@@99 |node#0@@66|)) (=> (MutableBtreeBulkOperations.MB.Abs.__default.WFShape $LZ $Heap@@99 |node#0@@66|) (MutableBtreeBulkOperations.MB.Abs.__default.WFShape $ly@@767 $Heap@@99 |node#0@@66|)))) :qid |MutableB.161:13| :skolemid |3202| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.WFShape (AsFuelBottom $ly@@767) $Heap@@99 |node#0@@66|)) )))
(assert (forall (($ly@@768 T@U) ($h0@@10 T@U) ($h1@@10 T@U) (|node#0@@67| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@768) LayerTypeType) (= (type $h0@@10) (MapType0Type refType MapType1Type))) (= (type $h1@@10) (MapType0Type refType MapType1Type))) (= (type |node#0@@67|) refType)) (and (and (and ($IsGoodHeap $h0@@10) ($IsGoodHeap $h1@@10)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $h0@@10 |node#0@@67|) ($Is |node#0@@67| Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) (and ($IsHeapAnchor $h0@@10) ($HeapSucc $h0@@10 $h1@@10)))) (forall (($o@@52 T@U) ($f@@10 T@U) ) (! (let ((alpha@@17 (FieldTypeInv0 (type $f@@10)))) (=> (and (and (= (type $o@@52) refType) (= (type $f@@10) (FieldType alpha@@17))) (and (not (= $o@@52 null)) (or (= $o@@52 |node#0@@67|) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@10 |node#0@@67|) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box $o@@52)))))) (= (MapType1Select (MapType0Select $h0@@10 $o@@52) $f@@10) (MapType1Select (MapType0Select $h1@@10 $o@@52) $f@@10)))) :qid |unknown.0:0| :skolemid |3203| :no-pattern (type $o@@52) :no-pattern (type $f@@10) :no-pattern (U_2_int $o@@52) :no-pattern (U_2_bool $o@@52) :no-pattern (U_2_int $f@@10) :no-pattern (U_2_bool $f@@10) ))) (and (=> (MutableBtreeBulkOperations.MB.Abs.__default.WFShape $ly@@768 $h0@@10 |node#0@@67|) (MutableBtreeBulkOperations.MB.Abs.__default.WFShape $ly@@768 $h1@@10 |node#0@@67|)) (=> (MutableBtreeBulkOperations.MB.Abs.__default.WFShape $ly@@768 $h1@@10 |node#0@@67|) (MutableBtreeBulkOperations.MB.Abs.__default.WFShape $ly@@768 $h0@@10 |node#0@@67|)))) :qid |unknown.0:0| :skolemid |3204| :pattern ( ($IsHeapAnchor $h0@@10) ($HeapSucc $h0@@10 $h1@@10) (MutableBtreeBulkOperations.MB.Abs.__default.WFShape $ly@@768 $h1@@10 |node#0@@67|)) )))
(assert  (=> true (forall (($ly@@769 T@U) ($Heap@@100 T@U) (|node#0@@68| T@U) ) (!  (=> (and (and (and (= (type $ly@@769) LayerTypeType) (= (type $Heap@@100) (MapType0Type refType MapType1Type))) (= (type |node#0@@68|) refType)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@@100 |node#0@@68|) (and ($IsGoodHeap $Heap@@100) ($Is |node#0@@68| Tclass.MutableBtreeBulkOperations.MB.Abs.Node)))) true) :qid |MutableB.161:13| :skolemid |3205| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.WFShape $ly@@769 $Heap@@100 |node#0@@68|)) ))))
(assert (forall (($ly@@770 T@U) ($Heap@@101 T@U) (|node#0@@69| T@U) ) (!  (=> (and (and (and (= (type $ly@@770) LayerTypeType) (= (type $Heap@@101) (MapType0Type refType MapType1Type))) (= (type |node#0@@69|) refType)) (and ($IsGoodHeap $Heap@@101) ($Is |node#0@@69| Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) (and (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#requires| $ly@@770 $Heap@@101 |node#0@@69|) true) (=> true (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#requires| $ly@@770 $Heap@@101 |node#0@@69|)))) :qid |MutableB.161:13| :skolemid |3206| :pattern ( (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#requires| $ly@@770 $Heap@@101 |node#0@@69|)) )))
(assert  (=> true (forall (($ly@@771 T@U) ($Heap@@102 T@U) (|node#0@@70| T@U) ) (!  (=> (and (and (and (= (type $ly@@771) LayerTypeType) (= (type $Heap@@102) (MapType0Type refType MapType1Type))) (= (type |node#0@@70|) refType)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@@102 |node#0@@70|) (and ($IsGoodHeap $Heap@@102) ($Is |node#0@@70| Tclass.MutableBtreeBulkOperations.MB.Abs.Node)))) (and (and (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (and (=> (|Set#Equal| (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@70|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))) (|Arrays.__default.Aliases#canCall| (TSeq Tclass.NativeTypes.byte) |#$Value| (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (= (U_2_int (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.height)) (LitInt 0)) (and (=> (<= (LitInt 0) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) |MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf#canCall|) (=> (and |MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf#canCall| (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf)) |MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf#canCall|))))) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (=> (U_2_bool (Lit (bool_2_U true))) (let ((|nchildren#0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (U_2_bool (Lit (bool_2_U true))) (let ((|children#0@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (and (and (=> (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@70|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box |children#0@@0|)) (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.repr)) (and (=> (< 0 |nchildren#0|) |MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren#canCall|) (=> (and |MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren#canCall| (<= |nchildren#0| MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren)) |MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren#canCall|))) (=> (and (and (=> (< 0 |nchildren#0|) |MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren#canCall|) (=> (and |MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren#canCall| (<= |nchildren#0| MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren)) |MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren#canCall|)) (and (and (< 0 |nchildren#0|) (<= |nchildren#0| MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren)) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren (_System.array.Length |children#0@@0|)))) |MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren#canCall|)) (=> (forall ((|i#0@@155| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@155|) (< |i#0@@155| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#0@@155|) (< |i#0@@155| |nchildren#0|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@102 |children#0@@0|) (IndexField |i#0@@155|))) null)))) :qid |MutableB.178:18| :skolemid |3207| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@102 |children#0@@0|) (IndexField |i#0@@155|)))) )) (|MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren#canCall| $Heap@@102 (|Seq#Take| (|Seq#FromArray| $Heap@@102 |children#0@@0|) |nchildren#0|) (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.height))))))))))) (and (=> (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $ly@@771) $Heap@@102 |node#0@@70|) (ite (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents))  (and (and (and (and (|Set#Equal| (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@70|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) |#$Value| (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))) (= (U_2_int (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.height)) (LitInt 0))) (and (and (<= (LitInt 0) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf)) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))  (and true (let ((|nchildren#0@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (and true (let ((|children#0@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (and (and (and (and (and (and (and (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@70|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box |children#0@@1|)) (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.repr)) (and (and (< 0 |nchildren#0@@0|) (<= |nchildren#0@@0| MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren)) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren (_System.array.Length |children#0@@1|)))) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (- MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren 1))) (forall ((|i#0@@156| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@156|) (< |i#0@@156| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#0@@156|) (< |i#0@@156| |nchildren#0@@0|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@102 |children#0@@1|) (IndexField |i#0@@156|))) null)))) :qid |MutableB.178:18| :skolemid |3210| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@102 |children#0@@1|) (IndexField |i#0@@156|)))) ))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren $ly@@771 $Heap@@102 (|Seq#Take| (|Seq#FromArray| $Heap@@102 |children#0@@1|) |nchildren#0@@0|) (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.height)))) (forall ((|i#1@@75| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@75|) (< |i#1@@75| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1@@75|) (< |i#1@@75| |nchildren#0@@0|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@102 ($Unbox refType (MapType1Select (MapType0Select $Heap@@102 |children#0@@1|) (IndexField |i#1@@75|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |node#0@@70|)))))) :qid |MutableB.180:18| :skolemid |3211| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@102 |children#0@@1|) (IndexField |i#1@@75|)))) ))) (forall ((|i#2@@35| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@35|) (< |i#2@@35| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#2@@35|) (< |i#2@@35| |nchildren#0@@0|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@102 ($Unbox refType (MapType1Select (MapType0Select $Heap@@102 |children#0@@1|) (IndexField |i#2@@35|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |3212| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@102 |children#0@@1|) (IndexField |i#2@@35|)))) ))) (and true (forall ((|i#3@@21| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@21|) (< |i#3@@21| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#3@@21|) (< |i#3@@21| |nchildren#0@@0|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@102 ($Unbox refType (MapType1Select (MapType0Select $Heap@@102 |children#0@@1|) (IndexField |i#3@@21|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |children#0@@1|)))))) :qid |MutableB.183:18| :skolemid |3213| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@102 |children#0@@1|) (IndexField |i#3@@21|)))) )))))))))) (=> (ite (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents))  (and (and (and (and (|Set#Equal| (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@70|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) |#$Value| (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))) (= (U_2_int (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.height)) (LitInt 0))) (and (and (<= (LitInt 0) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf)) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))  (and true (let ((|nchildren#0@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (and true (let ((|children#0@@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (and (and (and (and (and (and (and (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@70|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box |children#0@@2|)) (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.repr)) (and (and (< 0 |nchildren#0@@1|) (<= |nchildren#0@@1| MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren)) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren (_System.array.Length |children#0@@2|)))) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (- MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren 1))) (forall ((|i#0@@157| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@157|) (< |i#0@@157| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#0@@157|) (< |i#0@@157| |nchildren#0@@1|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@102 |children#0@@2|) (IndexField |i#0@@157|))) null)))) :qid |MutableB.178:18| :skolemid |3210| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@102 |children#0@@2|) (IndexField |i#0@@157|)))) ))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren $ly@@771 $Heap@@102 (|Seq#Take| (|Seq#FromArray| $Heap@@102 |children#0@@2|) |nchildren#0@@1|) (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.height)))) (forall ((|i#1@@76| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@76|) (< |i#1@@76| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1@@76|) (< |i#1@@76| |nchildren#0@@1|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@102 ($Unbox refType (MapType1Select (MapType0Select $Heap@@102 |children#0@@2|) (IndexField |i#1@@76|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |node#0@@70|)))))) :qid |MutableB.180:18| :skolemid |3211| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@102 |children#0@@2|) (IndexField |i#1@@76|)))) ))) (forall ((|i#2@@36| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@36|) (< |i#2@@36| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#2@@36|) (< |i#2@@36| |nchildren#0@@1|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@102 ($Unbox refType (MapType1Select (MapType0Select $Heap@@102 |children#0@@2|) (IndexField |i#2@@36|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@102 |node#0@@70|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |3212| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@102 |children#0@@2|) (IndexField |i#2@@36|)))) ))) (and true (forall ((|i#3@@22| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@22|) (< |i#3@@22| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#3@@22|) (< |i#3@@22| |nchildren#0@@1|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@102 ($Unbox refType (MapType1Select (MapType0Select $Heap@@102 |children#0@@2|) (IndexField |i#3@@22|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |children#0@@2|)))))) :qid |MutableB.183:18| :skolemid |3213| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@102 |children#0@@2|) (IndexField |i#3@@22|)))) ))))))))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $ly@@771) $Heap@@102 |node#0@@70|))))) :qid |MutableB.161:13| :skolemid |3214| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $ly@@771) $Heap@@102 |node#0@@70|)) ))))
(assert (forall ((arg0@@364 T@U) (arg1@@227 T@U) (arg2@@137 T@U) (arg3@@91 Int) ) (! (= (type (MutableBtreeBulkOperations.MB.Abs.__default.IChildren arg0@@364 arg1@@227 arg2@@137 arg3@@91)) (SeqType BoxType)) :qid |funType:MutableBtreeBulkOperations.MB.Abs.__default.IChildren| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.IChildren arg0@@364 arg1@@227 arg2@@137 arg3@@91)) )))
(assert (forall (($ly@@772 T@U) ($Heap@@103 T@U) (|nodes#0@@39| T@U) (|parentheight#0| Int) ) (!  (=> (and (and (= (type $ly@@772) LayerTypeType) (= (type $Heap@@103) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@39|) (SeqType BoxType))) (= (MutableBtreeBulkOperations.MB.Abs.__default.IChildren ($LS $ly@@772) $Heap@@103 |nodes#0@@39| |parentheight#0|) (MutableBtreeBulkOperations.MB.Abs.__default.IChildren $ly@@772 $Heap@@103 |nodes#0@@39| |parentheight#0|))) :qid |MutableB.193:12| :skolemid |3215| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.IChildren ($LS $ly@@772) $Heap@@103 |nodes#0@@39| |parentheight#0|)) )))
(assert (forall (($ly@@773 T@U) ($Heap@@104 T@U) (|nodes#0@@40| T@U) (|parentheight#0@@0| Int) ) (!  (=> (and (and (= (type $ly@@773) LayerTypeType) (= (type $Heap@@104) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@40|) (SeqType BoxType))) (= (MutableBtreeBulkOperations.MB.Abs.__default.IChildren $ly@@773 $Heap@@104 |nodes#0@@40| |parentheight#0@@0|) (MutableBtreeBulkOperations.MB.Abs.__default.IChildren $LZ $Heap@@104 |nodes#0@@40| |parentheight#0@@0|))) :qid |MutableB.193:12| :skolemid |3216| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.IChildren (AsFuelBottom $ly@@773) $Heap@@104 |nodes#0@@40| |parentheight#0@@0|)) )))
(assert (forall (($ly@@774 T@U) ($h0@@11 T@U) ($h1@@11 T@U) (|nodes#0@@41| T@U) (|parentheight#0@@1| Int) ) (!  (=> (and (and (and (and (and (= (type $ly@@774) LayerTypeType) (= (type $h0@@11) (MapType0Type refType MapType1Type))) (= (type $h1@@11) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@41|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@11) ($IsGoodHeap $h1@@11)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.IChildren#canCall| $h0@@11 |nodes#0@@41| |parentheight#0@@1|) ($Is |nodes#0@@41| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node)))) (and ($IsHeapAnchor $h0@@11) ($HeapSucc $h0@@11 $h1@@11)))) (forall (($o@@53 T@U) ($f@@11 T@U) ) (! (let ((alpha@@18 (FieldTypeInv0 (type $f@@11)))) (=> (and (and (= (type $o@@53) refType) (= (type $f@@11) (FieldType alpha@@18))) (and (not (= $o@@53 null)) (or (exists ((|i#0@@158| Int) ) (!  (and (and (<= (LitInt 0) |i#0@@158|) (< |i#0@@158| (|Seq#Length| |nodes#0@@41|))) (= ($Box $o@@53) (|Seq#Index| |nodes#0@@41| |i#0@@158|))) :qid |MutableB.198:15| :skolemid |3217| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@41| |i#0@@158|))) )) (exists ((|i#1@@77| Int) (|o#0@@1| T@U) ) (!  (and (= (type |o#0@@1|) refType) (and (and ($Is |o#0@@1| Tclass._System.object) (and (and (<= (LitInt 0) |i#1@@77|) (< |i#1@@77| (|Seq#Length| |nodes#0@@41|))) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@11 ($Unbox refType (|Seq#Index| |nodes#0@@41| |i#1@@77|))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |o#0@@1|))))) (= ($Box $o@@53) ($Box |o#0@@1|)))) :qid |MutableB.199:15| :skolemid |3218| :pattern ( (MapType0Select (MapType1Select (MapType0Select $h0@@11 ($Unbox refType (|Seq#Index| |nodes#0@@41| |i#1@@77|))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |o#0@@1|))) ))))) (= (MapType1Select (MapType0Select $h0@@11 $o@@53) $f@@11) (MapType1Select (MapType0Select $h1@@11 $o@@53) $f@@11)))) :qid |unknown.0:0| :skolemid |3219| :no-pattern (type $o@@53) :no-pattern (type $f@@11) :no-pattern (U_2_int $o@@53) :no-pattern (U_2_bool $o@@53) :no-pattern (U_2_int $f@@11) :no-pattern (U_2_bool $f@@11) ))) (= (MutableBtreeBulkOperations.MB.Abs.__default.IChildren $ly@@774 $h0@@11 |nodes#0@@41| |parentheight#0@@1|) (MutableBtreeBulkOperations.MB.Abs.__default.IChildren $ly@@774 $h1@@11 |nodes#0@@41| |parentheight#0@@1|))) :qid |unknown.0:0| :skolemid |3220| :pattern ( ($IsHeapAnchor $h0@@11) ($HeapSucc $h0@@11 $h1@@11) (MutableBtreeBulkOperations.MB.Abs.__default.IChildren $ly@@774 $h1@@11 |nodes#0@@41| |parentheight#0@@1|)) )))
(assert  (=> true (forall (($ly@@775 T@U) ($Heap@@105 T@U) (|nodes#0@@42| T@U) (|parentheight#0@@2| Int) ) (!  (=> (and (and (and (= (type $ly@@775) LayerTypeType) (= (type $Heap@@105) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@42|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Abs.__default.IChildren#canCall| $Heap@@105 |nodes#0@@42| |parentheight#0@@2|) (and (and ($IsGoodHeap $Heap@@105) ($Is |nodes#0@@42| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) (and (forall ((|i#2@@37| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@37|) (< |i#2@@37| (|Seq#Length| |nodes#0@@42|))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@105 ($Unbox refType (|Seq#Index| |nodes#0@@42| |i#2@@37|))))) :qid |MutableB.194:21| :skolemid |3221| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@42| |i#2@@37|))) )) (forall ((|i#3@@23| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@23|) (< |i#3@@23| (|Seq#Length| |nodes#0@@42|))) (< (U_2_int (MapType1Select (MapType0Select $Heap@@105 ($Unbox refType (|Seq#Index| |nodes#0@@42| |i#3@@23|))) MutableBtreeBulkOperations.MB.Abs.Node.height)) |parentheight#0@@2|))) :qid |MutableB.195:21| :skolemid |3222| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@42| |i#3@@23|))) )))))) (and (and (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Abs.__default.IChildren $ly@@775 $Heap@@105 |nodes#0@@42| |parentheight#0@@2|)) (|Seq#Length| |nodes#0@@42|)) (forall ((|i#4@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#4@@4|) (< |i#4@@4| (|Seq#Length| (MutableBtreeBulkOperations.MB.Abs.__default.IChildren $ly@@775 $Heap@@105 |nodes#0@@42| |parentheight#0@@2|)))) (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Abs.__default.IChildren $ly@@775 $Heap@@105 |nodes#0@@42| |parentheight#0@@2|) |i#4@@4|)) (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@@105 ($Unbox refType (|Seq#Index| |nodes#0@@42| |i#4@@4|)))))) :qid |MutableB.197:20| :skolemid |3223| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@42| |i#4@@4|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Abs.__default.IChildren $ly@@775 $Heap@@105 |nodes#0@@42| |parentheight#0@@2|) |i#4@@4|))) ))) ($Is (MutableBtreeBulkOperations.MB.Abs.__default.IChildren $ly@@775 $Heap@@105 |nodes#0@@42| |parentheight#0@@2|) (TSeq Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)))) :qid |MutableB.193:12| :skolemid |3224| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.IChildren $ly@@775 $Heap@@105 |nodes#0@@42| |parentheight#0@@2|)) ))))
(assert (forall (($ly@@776 T@U) ($Heap@@106 T@U) (|nodes#0@@43| T@U) (|parentheight#0@@3| Int) ) (!  (=> (and (and (and (= (type $ly@@776) LayerTypeType) (= (type $Heap@@106) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@43|) (SeqType BoxType))) (and ($IsGoodHeap $Heap@@106) ($Is |nodes#0@@43| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node)))) (and (=> (|MutableBtreeBulkOperations.MB.Abs.__default.IChildren#requires| $ly@@776 $Heap@@106 |nodes#0@@43| |parentheight#0@@3|) (and (forall ((|i#5@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#5@@4|) (< |i#5@@4| (|Seq#Length| |nodes#0@@43|))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@106 ($Unbox refType (|Seq#Index| |nodes#0@@43| |i#5@@4|))))) :qid |MutableB.194:21| :skolemid |3225| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@43| |i#5@@4|))) )) (forall ((|i#6@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#6@@4|) (< |i#6@@4| (|Seq#Length| |nodes#0@@43|))) (< (U_2_int (MapType1Select (MapType0Select $Heap@@106 ($Unbox refType (|Seq#Index| |nodes#0@@43| |i#6@@4|))) MutableBtreeBulkOperations.MB.Abs.Node.height)) |parentheight#0@@3|))) :qid |MutableB.195:21| :skolemid |3226| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@43| |i#6@@4|))) )))) (=> (and (forall ((|i#5@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#5@@5|) (< |i#5@@5| (|Seq#Length| |nodes#0@@43|))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@106 ($Unbox refType (|Seq#Index| |nodes#0@@43| |i#5@@5|))))) :qid |MutableB.194:21| :skolemid |3225| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@43| |i#5@@5|))) )) (forall ((|i#6@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#6@@5|) (< |i#6@@5| (|Seq#Length| |nodes#0@@43|))) (< (U_2_int (MapType1Select (MapType0Select $Heap@@106 ($Unbox refType (|Seq#Index| |nodes#0@@43| |i#6@@5|))) MutableBtreeBulkOperations.MB.Abs.Node.height)) |parentheight#0@@3|))) :qid |MutableB.195:21| :skolemid |3226| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@43| |i#6@@5|))) ))) (|MutableBtreeBulkOperations.MB.Abs.__default.IChildren#requires| $ly@@776 $Heap@@106 |nodes#0@@43| |parentheight#0@@3|)))) :qid |MutableB.193:12| :skolemid |3227| :pattern ( (|MutableBtreeBulkOperations.MB.Abs.__default.IChildren#requires| $ly@@776 $Heap@@106 |nodes#0@@43| |parentheight#0@@3|)) )))
(assert  (=> true (forall (($ly@@777 T@U) ($Heap@@107 T@U) (|nodes#0@@44| T@U) (|parentheight#0@@4| Int) ) (!  (=> (and (and (and (= (type $ly@@777) LayerTypeType) (= (type $Heap@@107) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@44|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Abs.__default.IChildren#canCall| $Heap@@107 |nodes#0@@44| |parentheight#0@@4|) (and (and ($IsGoodHeap $Heap@@107) ($Is |nodes#0@@44| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) (and (forall ((|i#5@@6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#5@@6|) (< |i#5@@6| (|Seq#Length| |nodes#0@@44|))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@107 ($Unbox refType (|Seq#Index| |nodes#0@@44| |i#5@@6|))))) :qid |MutableB.194:21| :skolemid |3225| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@44| |i#5@@6|))) )) (forall ((|i#6@@6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#6@@6|) (< |i#6@@6| (|Seq#Length| |nodes#0@@44|))) (< (U_2_int (MapType1Select (MapType0Select $Heap@@107 ($Unbox refType (|Seq#Index| |nodes#0@@44| |i#6@@6|))) MutableBtreeBulkOperations.MB.Abs.Node.height)) |parentheight#0@@4|))) :qid |MutableB.195:21| :skolemid |3226| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@44| |i#6@@6|))) )))))) (and (=> (not (= (|Seq#Length| |nodes#0@@44|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.MutableBtreeBulkOperations.MB.Abs.Node |nodes#0@@44|) (|MutableBtreeBulkOperations.MB.Abs.__default.IChildren#canCall| $Heap@@107 (Sequences.__default.DropLast Tclass.MutableBtreeBulkOperations.MB.Abs.Node |nodes#0@@44|) |parentheight#0@@4|)) (and (|Sequences.__default.Last#canCall| Tclass.MutableBtreeBulkOperations.MB.Abs.Node |nodes#0@@44|) (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@@107 ($Unbox refType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Abs.Node |nodes#0@@44|)))))) (= (MutableBtreeBulkOperations.MB.Abs.__default.IChildren ($LS $ly@@777) $Heap@@107 |nodes#0@@44| |parentheight#0@@4|) (ite (= (|Seq#Length| |nodes#0@@44|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (MutableBtreeBulkOperations.MB.Abs.__default.IChildren $ly@@777 $Heap@@107 (Sequences.__default.DropLast Tclass.MutableBtreeBulkOperations.MB.Abs.Node |nodes#0@@44|) |parentheight#0@@4|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (MutableBtreeBulkOperations.MB.Abs.__default.I $ly@@777 $Heap@@107 ($Unbox refType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Abs.Node |nodes#0@@44|)))))))))) :qid |MutableB.193:12| :skolemid |3228| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.IChildren ($LS $ly@@777) $Heap@@107 |nodes#0@@44| |parentheight#0@@4|)) ))))
(assert (forall (($ly@@778 T@U) ($Heap@@108 T@U) (|node#0@@71| T@U) ) (!  (=> (and (and (= (type $ly@@778) LayerTypeType) (= (type $Heap@@108) (MapType0Type refType MapType1Type))) (= (type |node#0@@71|) refType)) (= (MutableBtreeBulkOperations.MB.Abs.__default.I ($LS $ly@@778) $Heap@@108 |node#0@@71|) (MutableBtreeBulkOperations.MB.Abs.__default.I $ly@@778 $Heap@@108 |node#0@@71|))) :qid |MutableB.206:22| :skolemid |3229| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.I ($LS $ly@@778) $Heap@@108 |node#0@@71|)) )))
(assert (forall (($ly@@779 T@U) ($Heap@@109 T@U) (|node#0@@72| T@U) ) (!  (=> (and (and (= (type $ly@@779) LayerTypeType) (= (type $Heap@@109) (MapType0Type refType MapType1Type))) (= (type |node#0@@72|) refType)) (= (MutableBtreeBulkOperations.MB.Abs.__default.I $ly@@779 $Heap@@109 |node#0@@72|) (MutableBtreeBulkOperations.MB.Abs.__default.I $LZ $Heap@@109 |node#0@@72|))) :qid |MutableB.206:22| :skolemid |3230| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.I (AsFuelBottom $ly@@779) $Heap@@109 |node#0@@72|)) )))
(assert (forall (($ly@@780 T@U) ($h0@@12 T@U) ($h1@@12 T@U) (|node#0@@73| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@780) LayerTypeType) (= (type $h0@@12) (MapType0Type refType MapType1Type))) (= (type $h1@@12) (MapType0Type refType MapType1Type))) (= (type |node#0@@73|) refType)) (and (and (and ($IsGoodHeap $h0@@12) ($IsGoodHeap $h1@@12)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $h0@@12 |node#0@@73|) ($Is |node#0@@73| Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) (and ($IsHeapAnchor $h0@@12) ($HeapSucc $h0@@12 $h1@@12)))) (forall (($o@@54 T@U) ($f@@12 T@U) ) (! (let ((alpha@@19 (FieldTypeInv0 (type $f@@12)))) (=> (and (and (= (type $o@@54) refType) (= (type $f@@12) (FieldType alpha@@19))) (and (not (= $o@@54 null)) (or (= $o@@54 |node#0@@73|) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@12 |node#0@@73|) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box $o@@54)))))) (= (MapType1Select (MapType0Select $h0@@12 $o@@54) $f@@12) (MapType1Select (MapType0Select $h1@@12 $o@@54) $f@@12)))) :qid |unknown.0:0| :skolemid |3231| :no-pattern (type $o@@54) :no-pattern (type $f@@12) :no-pattern (U_2_int $o@@54) :no-pattern (U_2_bool $o@@54) :no-pattern (U_2_int $f@@12) :no-pattern (U_2_bool $f@@12) ))) (= (MutableBtreeBulkOperations.MB.Abs.__default.I $ly@@780 $h0@@12 |node#0@@73|) (MutableBtreeBulkOperations.MB.Abs.__default.I $ly@@780 $h1@@12 |node#0@@73|))) :qid |unknown.0:0| :skolemid |3232| :pattern ( ($IsHeapAnchor $h0@@12) ($HeapSucc $h0@@12 $h1@@12) (MutableBtreeBulkOperations.MB.Abs.__default.I $ly@@780 $h1@@12 |node#0@@73|)) )))
(assert  (=> true (forall (($ly@@781 T@U) ($Heap@@110 T@U) (|node#0@@74| T@U) ) (!  (=> (and (and (and (= (type $ly@@781) LayerTypeType) (= (type $Heap@@110) (MapType0Type refType MapType1Type))) (= (type |node#0@@74|) refType)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@@110 |node#0@@74|) (and (and ($IsGoodHeap $Heap@@110) ($Is |node#0@@74| Tclass.MutableBtreeBulkOperations.MB.Abs.Node)) (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@110 |node#0@@74|)))) (and (and (and (and (and (and (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@110 |node#0@@74|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (MutableBtreeBulkOperations.MB.Abs.__default.I $ly@@781 $Heap@@110 |node#0@@74|))) (=> (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (MutableBtreeBulkOperations.MB.Abs.__default.I $ly@@781 $Heap@@110 |node#0@@74|)) (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@110 |node#0@@74|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@110 |node#0@@74|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (MutableBtreeBulkOperations.MB.Abs.__default.I $ly@@781 $Heap@@110 |node#0@@74|)) (|Seq#Take| (|Seq#FromArray| $Heap@@110 (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@@110 |node#0@@74|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@110 |node#0@@74|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@110 |node#0@@74|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (MutableBtreeBulkOperations.MB.Abs.__default.I $ly@@781 $Heap@@110 |node#0@@74|)) (|Seq#Take| (|Seq#FromArray| $Heap@@110 (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@@110 |node#0@@74|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@110 |node#0@@74|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@110 |node#0@@74|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (|Seq#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (MutableBtreeBulkOperations.MB.Abs.__default.I $ly@@781 $Heap@@110 |node#0@@74|)) (|Seq#Take| (|Seq#FromArray| $Heap@@110 (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@110 |node#0@@74|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (- (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@110 |node#0@@74|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) 1))))) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@110 |node#0@@74|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I $ly@@781 $Heap@@110 |node#0@@74|))) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@110 |node#0@@74|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))) ($Is (MutableBtreeBulkOperations.MB.Abs.__default.I $ly@@781 $Heap@@110 |node#0@@74|) Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node))) :qid |MutableB.206:22| :skolemid |3233| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.I $ly@@781 $Heap@@110 |node#0@@74|)) ))))
(assert (forall (($ly@@782 T@U) ($Heap@@111 T@U) (|node#0@@75| T@U) ) (!  (=> (and (and (and (= (type $ly@@782) LayerTypeType) (= (type $Heap@@111) (MapType0Type refType MapType1Type))) (= (type |node#0@@75|) refType)) (and ($IsGoodHeap $Heap@@111) ($Is |node#0@@75| Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) (and (=> (|MutableBtreeBulkOperations.MB.Abs.__default.I#requires| $ly@@782 $Heap@@111 |node#0@@75|) (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@111 |node#0@@75|)) (=> (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@111 |node#0@@75|) (|MutableBtreeBulkOperations.MB.Abs.__default.I#requires| $ly@@782 $Heap@@111 |node#0@@75|)))) :qid |MutableB.206:22| :skolemid |3234| :pattern ( (|MutableBtreeBulkOperations.MB.Abs.__default.I#requires| $ly@@782 $Heap@@111 |node#0@@75|)) )))
(assert  (=> true (forall (($ly@@783 T@U) ($Heap@@112 T@U) (|node#0@@76| T@U) ) (!  (=> (and (and (and (= (type $ly@@783) LayerTypeType) (= (type $Heap@@112) (MapType0Type refType MapType1Type))) (= (type |node#0@@76|) refType)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@@112 |node#0@@76|) (and (and ($IsGoodHeap $Heap@@112) ($Is |node#0@@76| Tclass.MutableBtreeBulkOperations.MB.Abs.Node)) (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@112 |node#0@@76|)))) (and (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@112 |node#0@@76|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#0@@3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@@112 |node#0@@76|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|nchildren#0@@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@112 |node#0@@76|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (|MutableBtreeBulkOperations.MB.Abs.__default.IChildren#canCall| $Heap@@112 (|Seq#Take| (|Seq#FromArray| $Heap@@112 |children#0@@3|) |nchildren#0@@2|) (U_2_int (MapType1Select (MapType0Select $Heap@@112 |node#0@@76|) MutableBtreeBulkOperations.MB.Abs.Node.height)))))) (= (MutableBtreeBulkOperations.MB.Abs.__default.I ($LS $ly@@783) $Heap@@112 |node#0@@76|) (ite (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@112 |node#0@@76|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (let ((|values#1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@@112 |node#0@@76|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|keys#1@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@@112 |node#0@@76|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|nkeys#1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@112 |node#0@@76|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf| (|Seq#Take| (|Seq#FromArray| $Heap@@112 |keys#1@@0|) |nkeys#1|) (|Seq#Take| (|Seq#FromArray| $Heap@@112 |values#1|) |nkeys#1|))))) (let ((|children#1@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@@112 |node#0@@76|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|pivots#1@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@@112 |node#0@@76|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|nchildren#1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@112 |node#0@@76|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|bschildren#1| (MutableBtreeBulkOperations.MB.Abs.__default.IChildren $ly@@783 $Heap@@112 (|Seq#Take| (|Seq#FromArray| $Heap@@112 |children#1@@0|) |nchildren#1|) (U_2_int (MapType1Select (MapType0Select $Heap@@112 |node#0@@76|) MutableBtreeBulkOperations.MB.Abs.Node.height))))) (|#MutableBtreeBulkOperations.MB.Model.Abs.Node.Index| (|Seq#Take| (|Seq#FromArray| $Heap@@112 |pivots#1@@0|) (- |nchildren#1| 1)) |bschildren#1|))))))))) :qid |MutableB.206:22| :skolemid |3235| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.I ($LS $ly@@783) $Heap@@112 |node#0@@76|)) ))))
(assert (forall ((arg0@@365 T@U) (arg1@@228 T@U) ) (! (= (type (MutableBtreeBulkOperations.MB.Abs.__default.ISiblings arg0@@365 arg1@@228)) (SeqType BoxType)) :qid |funType:MutableBtreeBulkOperations.MB.Abs.__default.ISiblings| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.ISiblings arg0@@365 arg1@@228)) )))
(assert (forall (($h0@@13 T@U) ($h1@@13 T@U) (|nodes#0@@45| T@U) ) (!  (=> (and (and (= (type $h0@@13) (MapType0Type refType MapType1Type)) (= (type $h1@@13) (MapType0Type refType MapType1Type))) (= (type |nodes#0@@45|) (SeqType BoxType))) (=> (and (and (and ($IsGoodHeap $h0@@13) ($IsGoodHeap $h1@@13)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.ISiblings#canCall| $h0@@13 |nodes#0@@45|) ($Is |nodes#0@@45| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node)))) (and ($IsHeapAnchor $h0@@13) ($HeapSucc $h0@@13 $h1@@13))) (=> (forall (($o@@55 T@U) ($f@@13 T@U) ) (! (let ((alpha@@20 (FieldTypeInv0 (type $f@@13)))) (=> (and (and (= (type $o@@55) refType) (= (type $f@@13) (FieldType alpha@@20))) (and (not (= $o@@55 null)) (or (exists ((|i#0@@159| Int) ) (!  (and (and (<= (LitInt 0) |i#0@@159|) (< |i#0@@159| (|Seq#Length| |nodes#0@@45|))) (= ($Box $o@@55) (|Seq#Index| |nodes#0@@45| |i#0@@159|))) :qid |MutableB.241:15| :skolemid |3254| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@45| |i#0@@159|))) )) (exists ((|i#1@@78| Int) (|o#0@@2| T@U) ) (!  (and (= (type |o#0@@2|) refType) (and (and ($Is |o#0@@2| Tclass._System.object) (and (and (<= (LitInt 0) |i#1@@78|) (< |i#1@@78| (|Seq#Length| |nodes#0@@45|))) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@13 ($Unbox refType (|Seq#Index| |nodes#0@@45| |i#1@@78|))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |o#0@@2|))))) (= ($Box $o@@55) ($Box |o#0@@2|)))) :qid |MutableB.242:15| :skolemid |3255| :pattern ( (MapType0Select (MapType1Select (MapType0Select $h0@@13 ($Unbox refType (|Seq#Index| |nodes#0@@45| |i#1@@78|))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |o#0@@2|))) ))))) (= (MapType1Select (MapType0Select $h0@@13 $o@@55) $f@@13) (MapType1Select (MapType0Select $h1@@13 $o@@55) $f@@13)))) :qid |unknown.0:0| :skolemid |3256| :no-pattern (type $o@@55) :no-pattern (type $f@@13) :no-pattern (U_2_int $o@@55) :no-pattern (U_2_bool $o@@55) :no-pattern (U_2_int $f@@13) :no-pattern (U_2_bool $f@@13) )) (= (MutableBtreeBulkOperations.MB.Abs.__default.ISiblings $h0@@13 |nodes#0@@45|) (MutableBtreeBulkOperations.MB.Abs.__default.ISiblings $h1@@13 |nodes#0@@45|))))) :qid |DafnyPre.521:12| :skolemid |3257| :pattern ( ($IsHeapAnchor $h0@@13) ($HeapSucc $h0@@13 $h1@@13) (MutableBtreeBulkOperations.MB.Abs.__default.ISiblings $h1@@13 |nodes#0@@45|)) )))
(assert  (=> true (forall (($Heap@@113 T@U) (|nodes#0@@46| T@U) ) (!  (=> (and (and (= (type $Heap@@113) (MapType0Type refType MapType1Type)) (= (type |nodes#0@@46|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Abs.__default.ISiblings#canCall| $Heap@@113 |nodes#0@@46|) (and (and ($IsGoodHeap $Heap@@113) ($Is |nodes#0@@46| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) (forall ((|i#2@@38| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@38|) (< |i#2@@38| (|Seq#Length| |nodes#0@@46|))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@113 ($Unbox refType (|Seq#Index| |nodes#0@@46| |i#2@@38|))))) :qid |MutableB.238:21| :skolemid |3258| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@46| |i#2@@38|))) ))))) (and (and (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Abs.__default.ISiblings $Heap@@113 |nodes#0@@46|)) (|Seq#Length| |nodes#0@@46|)) (forall ((|i#3@@24| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@24|) (< |i#3@@24| (|Seq#Length| (MutableBtreeBulkOperations.MB.Abs.__default.ISiblings $Heap@@113 |nodes#0@@46|)))) (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Abs.__default.ISiblings $Heap@@113 |nodes#0@@46|) |i#3@@24|)) (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@@113 ($Unbox refType (|Seq#Index| |nodes#0@@46| |i#3@@24|)))))) :qid |MutableB.240:20| :skolemid |3259| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@46| |i#3@@24|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Abs.__default.ISiblings $Heap@@113 |nodes#0@@46|) |i#3@@24|))) ))) ($Is (MutableBtreeBulkOperations.MB.Abs.__default.ISiblings $Heap@@113 |nodes#0@@46|) (TSeq Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node)))) :qid |MutableB.237:12| :skolemid |3260| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.ISiblings $Heap@@113 |nodes#0@@46|)) ))))
(assert (forall (($Heap@@114 T@U) (|nodes#0@@47| T@U) ) (!  (=> (and (and (= (type $Heap@@114) (MapType0Type refType MapType1Type)) (= (type |nodes#0@@47|) (SeqType BoxType))) (and ($IsGoodHeap $Heap@@114) ($Is |nodes#0@@47| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node)))) (and (=> (|MutableBtreeBulkOperations.MB.Abs.__default.ISiblings#requires| $Heap@@114 |nodes#0@@47|) (forall ((|i#4@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#4@@5|) (< |i#4@@5| (|Seq#Length| |nodes#0@@47|))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@114 ($Unbox refType (|Seq#Index| |nodes#0@@47| |i#4@@5|))))) :qid |MutableB.238:21| :skolemid |3261| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@47| |i#4@@5|))) ))) (=> (forall ((|i#4@@6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#4@@6|) (< |i#4@@6| (|Seq#Length| |nodes#0@@47|))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@114 ($Unbox refType (|Seq#Index| |nodes#0@@47| |i#4@@6|))))) :qid |MutableB.238:21| :skolemid |3261| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@47| |i#4@@6|))) )) (|MutableBtreeBulkOperations.MB.Abs.__default.ISiblings#requires| $Heap@@114 |nodes#0@@47|)))) :qid |MutableB.237:12| :skolemid |3262| :pattern ( (|MutableBtreeBulkOperations.MB.Abs.__default.ISiblings#requires| $Heap@@114 |nodes#0@@47|)) )))
(assert  (=> true (forall (($Heap@@115 T@U) (|nodes#0@@48| T@U) ) (!  (=> (and (and (= (type $Heap@@115) (MapType0Type refType MapType1Type)) (= (type |nodes#0@@48|) (SeqType BoxType))) (or (|MutableBtreeBulkOperations.MB.Abs.__default.ISiblings#canCall| $Heap@@115 |nodes#0@@48|) (and (and ($IsGoodHeap $Heap@@115) ($Is |nodes#0@@48| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) (forall ((|i#4@@7| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#4@@7|) (< |i#4@@7| (|Seq#Length| |nodes#0@@48|))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@115 ($Unbox refType (|Seq#Index| |nodes#0@@48| |i#4@@7|))))) :qid |MutableB.238:21| :skolemid |3261| :pattern ( ($Unbox refType (|Seq#Index| |nodes#0@@48| |i#4@@7|))) ))))) (and (and (|MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight#canCall| $Heap@@115 |nodes#0@@48|) (|MutableBtreeBulkOperations.MB.Abs.__default.IChildren#canCall| $Heap@@115 |nodes#0@@48| (+ (MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight ($LS $LZ) $Heap@@115 |nodes#0@@48|) 1))) (= (MutableBtreeBulkOperations.MB.Abs.__default.ISiblings $Heap@@115 |nodes#0@@48|) (MutableBtreeBulkOperations.MB.Abs.__default.IChildren ($LS $LZ) $Heap@@115 |nodes#0@@48| (+ (MutableBtreeBulkOperations.MB.Abs.__default.MaxSiblingHeight ($LS $LZ) $Heap@@115 |nodes#0@@48|) 1))))) :qid |MutableB.237:12| :skolemid |3263| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.ISiblings $Heap@@115 |nodes#0@@48|)) ))))
(assert (forall (($h0@@14 T@U) ($h1@@14 T@U) (|node#0@@77| T@U) ) (!  (=> (and (and (= (type $h0@@14) (MapType0Type refType MapType1Type)) (= (type $h1@@14) (MapType0Type refType MapType1Type))) (= (type |node#0@@77|) refType)) (=> (and (and (and ($IsGoodHeap $h0@@14) ($IsGoodHeap $h1@@14)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $h0@@14 |node#0@@77|) ($Is |node#0@@77| Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) (and ($IsHeapAnchor $h0@@14) ($HeapSucc $h0@@14 $h1@@14))) (=> (forall (($o@@56 T@U) ($f@@14 T@U) ) (! (let ((alpha@@21 (FieldTypeInv0 (type $f@@14)))) (=> (and (and (= (type $o@@56) refType) (= (type $f@@14) (FieldType alpha@@21))) (and (not (= $o@@56 null)) (or (= $o@@56 |node#0@@77|) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@14 |node#0@@77|) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box $o@@56)))))) (= (MapType1Select (MapType0Select $h0@@14 $o@@56) $f@@14) (MapType1Select (MapType0Select $h1@@14 $o@@56) $f@@14)))) :qid |unknown.0:0| :skolemid |3264| :no-pattern (type $o@@56) :no-pattern (type $f@@14) :no-pattern (U_2_int $o@@56) :no-pattern (U_2_bool $o@@56) :no-pattern (U_2_int $f@@14) :no-pattern (U_2_bool $f@@14) )) (and (=> (MutableBtreeBulkOperations.MB.Abs.__default.WF $h0@@14 |node#0@@77|) (MutableBtreeBulkOperations.MB.Abs.__default.WF $h1@@14 |node#0@@77|)) (=> (MutableBtreeBulkOperations.MB.Abs.__default.WF $h1@@14 |node#0@@77|) (MutableBtreeBulkOperations.MB.Abs.__default.WF $h0@@14 |node#0@@77|)))))) :qid |DafnyPre.521:12| :skolemid |3265| :pattern ( ($IsHeapAnchor $h0@@14) ($HeapSucc $h0@@14 $h1@@14) (MutableBtreeBulkOperations.MB.Abs.__default.WF $h1@@14 |node#0@@77|)) )))
(assert  (=> true (forall (($Heap@@116 T@U) (|node#0@@78| T@U) ) (!  (=> (and (and (and (= (type $Heap@@116) (MapType0Type refType MapType1Type)) (= (type |node#0@@78|) refType)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@@116 |node#0@@78|) (and ($IsGoodHeap $Heap@@116) ($Is |node#0@@78| Tclass.MutableBtreeBulkOperations.MB.Abs.Node)))) (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@@116 |node#0@@78|)) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@116 |node#0@@78|) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |node#0@@78|)))) :qid |MutableB.247:13| :skolemid |3266| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@@116 |node#0@@78|)) ))))
(assert (forall (($Heap@@117 T@U) (|node#0@@79| T@U) ) (!  (=> (and (and (= (type $Heap@@117) (MapType0Type refType MapType1Type)) (= (type |node#0@@79|) refType)) (and ($IsGoodHeap $Heap@@117) ($Is |node#0@@79| Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) (and (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#requires| $Heap@@117 |node#0@@79|) true) (=> true (|MutableBtreeBulkOperations.MB.Abs.__default.WF#requires| $Heap@@117 |node#0@@79|)))) :qid |MutableB.247:13| :skolemid |3267| :pattern ( (|MutableBtreeBulkOperations.MB.Abs.__default.WF#requires| $Heap@@117 |node#0@@79|)) )))
(assert  (=> true (forall (($Heap@@118 T@U) (|node#0@@80| T@U) ) (!  (=> (and (and (= (type $Heap@@118) (MapType0Type refType MapType1Type)) (= (type |node#0@@80|) refType)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@@118 |node#0@@80|) (and ($IsGoodHeap $Heap@@118) ($Is |node#0@@80| Tclass.MutableBtreeBulkOperations.MB.Abs.Node)))) (and (and (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@@118 |node#0@@80|) (=> (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@118 |node#0@@80|) (and (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@@118 |node#0@@80|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@@118 |node#0@@80|))))) (and (=> (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@@118 |node#0@@80|) (and (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@118 |node#0@@80|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@@118 |node#0@@80|)))) (=> (and (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@118 |node#0@@80|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@@118 |node#0@@80|))) (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@@118 |node#0@@80|))))) :qid |MutableB.247:13| :skolemid |3268| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@@118 |node#0@@80|)) ))))
(assert (forall ((arg0@@366 T@U) (arg1@@229 T@U) ) (! (= (type (MutableBtreeBulkOperations.MB.Abs.__default.Interpretation arg0@@366 arg1@@229)) (MapType BoxType BoxType)) :qid |funType:MutableBtreeBulkOperations.MB.Abs.__default.Interpretation| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.Interpretation arg0@@366 arg1@@229)) )))
(assert (forall (($h0@@15 T@U) ($h1@@15 T@U) (|node#0@@81| T@U) ) (!  (=> (and (and (= (type $h0@@15) (MapType0Type refType MapType1Type)) (= (type $h1@@15) (MapType0Type refType MapType1Type))) (= (type |node#0@@81|) refType)) (=> (and (and (and ($IsGoodHeap $h0@@15) ($IsGoodHeap $h1@@15)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.Interpretation#canCall| $h0@@15 |node#0@@81|) ($Is |node#0@@81| Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) (and ($IsHeapAnchor $h0@@15) ($HeapSucc $h0@@15 $h1@@15))) (=> (forall (($o@@57 T@U) ($f@@15 T@U) ) (! (let ((alpha@@22 (FieldTypeInv0 (type $f@@15)))) (=> (and (and (= (type $o@@57) refType) (= (type $f@@15) (FieldType alpha@@22))) (and (not (= $o@@57 null)) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@15 |node#0@@81|) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box $o@@57))))) (= (MapType1Select (MapType0Select $h0@@15 $o@@57) $f@@15) (MapType1Select (MapType0Select $h1@@15 $o@@57) $f@@15)))) :qid |unknown.0:0| :skolemid |3269| :no-pattern (type $o@@57) :no-pattern (type $f@@15) :no-pattern (U_2_int $o@@57) :no-pattern (U_2_bool $o@@57) :no-pattern (U_2_int $f@@15) :no-pattern (U_2_bool $f@@15) )) (= (MutableBtreeBulkOperations.MB.Abs.__default.Interpretation $h0@@15 |node#0@@81|) (MutableBtreeBulkOperations.MB.Abs.__default.Interpretation $h1@@15 |node#0@@81|))))) :qid |DafnyPre.521:12| :skolemid |3270| :pattern ( ($IsHeapAnchor $h0@@15) ($HeapSucc $h0@@15 $h1@@15) (MutableBtreeBulkOperations.MB.Abs.__default.Interpretation $h1@@15 |node#0@@81|)) )))
(assert  (=> true (forall (($Heap@@119 T@U) (|node#0@@82| T@U) ) (!  (=> (and (and (= (type $Heap@@119) (MapType0Type refType MapType1Type)) (= (type |node#0@@82|) refType)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.Interpretation#canCall| $Heap@@119 |node#0@@82|) (and (and ($IsGoodHeap $Heap@@119) ($Is |node#0@@82| Tclass.MutableBtreeBulkOperations.MB.Abs.Node)) (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@@119 |node#0@@82|)))) ($Is (MutableBtreeBulkOperations.MB.Abs.__default.Interpretation $Heap@@119 |node#0@@82|) (TMap (TSeq Tclass.NativeTypes.byte) |#$Value|))) :qid |MutableB.255:12| :skolemid |3271| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.Interpretation $Heap@@119 |node#0@@82|)) ))))
(assert (forall (($Heap@@120 T@U) (|node#0@@83| T@U) ) (!  (=> (and (and (= (type $Heap@@120) (MapType0Type refType MapType1Type)) (= (type |node#0@@83|) refType)) (and ($IsGoodHeap $Heap@@120) ($Is |node#0@@83| Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) (and (=> (|MutableBtreeBulkOperations.MB.Abs.__default.Interpretation#requires| $Heap@@120 |node#0@@83|) (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@@120 |node#0@@83|)) (=> (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@@120 |node#0@@83|) (|MutableBtreeBulkOperations.MB.Abs.__default.Interpretation#requires| $Heap@@120 |node#0@@83|)))) :qid |MutableB.255:12| :skolemid |3272| :pattern ( (|MutableBtreeBulkOperations.MB.Abs.__default.Interpretation#requires| $Heap@@120 |node#0@@83|)) )))
(assert  (=> true (forall (($Heap@@121 T@U) (|node#0@@84| T@U) ) (!  (=> (and (and (= (type $Heap@@121) (MapType0Type refType MapType1Type)) (= (type |node#0@@84|) refType)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.Interpretation#canCall| $Heap@@121 |node#0@@84|) (and (and ($IsGoodHeap $Heap@@121) ($Is |node#0@@84| Tclass.MutableBtreeBulkOperations.MB.Abs.Node)) (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@@121 |node#0@@84|)))) (and (and (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@@121 |node#0@@84|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation#canCall| (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@@121 |node#0@@84|))) (= (MutableBtreeBulkOperations.MB.Abs.__default.Interpretation $Heap@@121 |node#0@@84|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.Interpretation (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@@121 |node#0@@84|))))) :qid |MutableB.255:12| :skolemid |3273| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.Interpretation $Heap@@121 |node#0@@84|)) ))))
(assert (forall ((arg0@@367 T@U) (arg1@@230 T@U) ) (! (= (type (MutableBtreeBulkOperations.MB.Abs.__default.ToSeq arg0@@367 arg1@@230)) DatatypeTypeType) :qid |funType:MutableBtreeBulkOperations.MB.Abs.__default.ToSeq| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.ToSeq arg0@@367 arg1@@230)) )))
(assert (forall (($h0@@16 T@U) ($h1@@16 T@U) (|node#0@@85| T@U) ) (!  (=> (and (and (= (type $h0@@16) (MapType0Type refType MapType1Type)) (= (type $h1@@16) (MapType0Type refType MapType1Type))) (= (type |node#0@@85|) refType)) (=> (and (and (and ($IsGoodHeap $h0@@16) ($IsGoodHeap $h1@@16)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.ToSeq#canCall| $h0@@16 |node#0@@85|) ($Is |node#0@@85| Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) (and ($IsHeapAnchor $h0@@16) ($HeapSucc $h0@@16 $h1@@16))) (=> (forall (($o@@58 T@U) ($f@@16 T@U) ) (! (let ((alpha@@23 (FieldTypeInv0 (type $f@@16)))) (=> (and (and (= (type $o@@58) refType) (= (type $f@@16) (FieldType alpha@@23))) (and (not (= $o@@58 null)) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@16 |node#0@@85|) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box $o@@58))))) (= (MapType1Select (MapType0Select $h0@@16 $o@@58) $f@@16) (MapType1Select (MapType0Select $h1@@16 $o@@58) $f@@16)))) :qid |unknown.0:0| :skolemid |3274| :no-pattern (type $o@@58) :no-pattern (type $f@@16) :no-pattern (U_2_int $o@@58) :no-pattern (U_2_bool $o@@58) :no-pattern (U_2_int $f@@16) :no-pattern (U_2_bool $f@@16) )) (= (MutableBtreeBulkOperations.MB.Abs.__default.ToSeq $h0@@16 |node#0@@85|) (MutableBtreeBulkOperations.MB.Abs.__default.ToSeq $h1@@16 |node#0@@85|))))) :qid |DafnyPre.521:12| :skolemid |3275| :pattern ( ($IsHeapAnchor $h0@@16) ($HeapSucc $h0@@16 $h1@@16) (MutableBtreeBulkOperations.MB.Abs.__default.ToSeq $h1@@16 |node#0@@85|)) )))
(assert  (=> true (forall (($Heap@@122 T@U) (|node#0@@86| T@U) ) (!  (=> (and (and (= (type $Heap@@122) (MapType0Type refType MapType1Type)) (= (type |node#0@@86|) refType)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.ToSeq#canCall| $Heap@@122 |node#0@@86|) (and (and ($IsGoodHeap $Heap@@122) ($Is |node#0@@86| Tclass.MutableBtreeBulkOperations.MB.Abs.Node)) (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@@122 |node#0@@86|)))) ($Is (MutableBtreeBulkOperations.MB.Abs.__default.ToSeq $Heap@@122 |node#0@@86|) (Tclass._System.Tuple2 (TSeq (TSeq Tclass.NativeTypes.byte)) (TSeq |#$Value|)))) :qid |MutableB.262:12| :skolemid |3276| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.ToSeq $Heap@@122 |node#0@@86|)) ))))
(assert (forall (($Heap@@123 T@U) (|node#0@@87| T@U) ) (!  (=> (and (and (= (type $Heap@@123) (MapType0Type refType MapType1Type)) (= (type |node#0@@87|) refType)) (and ($IsGoodHeap $Heap@@123) ($Is |node#0@@87| Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) (and (=> (|MutableBtreeBulkOperations.MB.Abs.__default.ToSeq#requires| $Heap@@123 |node#0@@87|) (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@@123 |node#0@@87|)) (=> (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@@123 |node#0@@87|) (|MutableBtreeBulkOperations.MB.Abs.__default.ToSeq#requires| $Heap@@123 |node#0@@87|)))) :qid |MutableB.262:12| :skolemid |3277| :pattern ( (|MutableBtreeBulkOperations.MB.Abs.__default.ToSeq#requires| $Heap@@123 |node#0@@87|)) )))
(assert  (=> true (forall (($Heap@@124 T@U) (|node#0@@88| T@U) ) (!  (=> (and (and (= (type $Heap@@124) (MapType0Type refType MapType1Type)) (= (type |node#0@@88|) refType)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.ToSeq#canCall| $Heap@@124 |node#0@@88|) (and (and ($IsGoodHeap $Heap@@124) ($Is |node#0@@88| Tclass.MutableBtreeBulkOperations.MB.Abs.Node)) (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@@124 |node#0@@88|)))) (and (and (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@@124 |node#0@@88|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq#canCall| (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@@124 |node#0@@88|))) (= (MutableBtreeBulkOperations.MB.Abs.__default.ToSeq $Heap@@124 |node#0@@88|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@@124 |node#0@@88|))))) :qid |MutableB.262:12| :skolemid |3278| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.ToSeq $Heap@@124 |node#0@@88|)) ))))
(assert (forall (($h0@@17 T@U) ($h1@@17 T@U) (|node#0@@89| T@U) ) (!  (=> (and (and (= (type $h0@@17) (MapType0Type refType MapType1Type)) (= (type $h1@@17) (MapType0Type refType MapType1Type))) (= (type |node#0@@89|) refType)) (=> (and (and (and ($IsGoodHeap $h0@@17) ($IsGoodHeap $h1@@17)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.Full#canCall| $h0@@17 |node#0@@89|) ($Is |node#0@@89| Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) (and ($IsHeapAnchor $h0@@17) ($HeapSucc $h0@@17 $h1@@17))) (=> (forall (($o@@59 T@U) ($f@@17 T@U) ) (! (let ((alpha@@24 (FieldTypeInv0 (type $f@@17)))) (=> (and (and (= (type $o@@59) refType) (= (type $f@@17) (FieldType alpha@@24))) (and (not (= $o@@59 null)) (= $o@@59 |node#0@@89|))) (= (MapType1Select (MapType0Select $h0@@17 $o@@59) $f@@17) (MapType1Select (MapType0Select $h1@@17 $o@@59) $f@@17)))) :qid |unknown.0:0| :skolemid |3279| :no-pattern (type $o@@59) :no-pattern (type $f@@17) :no-pattern (U_2_int $o@@59) :no-pattern (U_2_bool $o@@59) :no-pattern (U_2_int $f@@17) :no-pattern (U_2_bool $f@@17) )) (and (=> (MutableBtreeBulkOperations.MB.Abs.__default.Full $h0@@17 |node#0@@89|) (MutableBtreeBulkOperations.MB.Abs.__default.Full $h1@@17 |node#0@@89|)) (=> (MutableBtreeBulkOperations.MB.Abs.__default.Full $h1@@17 |node#0@@89|) (MutableBtreeBulkOperations.MB.Abs.__default.Full $h0@@17 |node#0@@89|)))))) :qid |DafnyPre.521:12| :skolemid |3280| :pattern ( ($IsHeapAnchor $h0@@17) ($HeapSucc $h0@@17 $h1@@17) (MutableBtreeBulkOperations.MB.Abs.__default.Full $h1@@17 |node#0@@89|)) )))
(assert  (=> true (forall (($Heap@@125 T@U) (|node#0@@90| T@U) ) (!  (=> (and (and (= (type $Heap@@125) (MapType0Type refType MapType1Type)) (= (type |node#0@@90|) refType)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.Full#canCall| $Heap@@125 |node#0@@90|) (and ($IsGoodHeap $Heap@@125) ($Is |node#0@@90| Tclass.MutableBtreeBulkOperations.MB.Abs.Node)))) true) :qid |MutableB.454:20| :skolemid |3281| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.Full $Heap@@125 |node#0@@90|)) ))))
(assert (forall (($Heap@@126 T@U) (|node#0@@91| T@U) ) (!  (=> (and (and (= (type $Heap@@126) (MapType0Type refType MapType1Type)) (= (type |node#0@@91|) refType)) (and ($IsGoodHeap $Heap@@126) ($Is |node#0@@91| Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) (and (=> (|MutableBtreeBulkOperations.MB.Abs.__default.Full#requires| $Heap@@126 |node#0@@91|) true) (=> true (|MutableBtreeBulkOperations.MB.Abs.__default.Full#requires| $Heap@@126 |node#0@@91|)))) :qid |MutableB.454:20| :skolemid |3282| :pattern ( (|MutableBtreeBulkOperations.MB.Abs.__default.Full#requires| $Heap@@126 |node#0@@91|)) )))
(assert  (=> true (forall (($Heap@@127 T@U) (|node#0@@92| T@U) ) (!  (=> (and (and (= (type $Heap@@127) (MapType0Type refType MapType1Type)) (= (type |node#0@@92|) refType)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.Full#canCall| $Heap@@127 |node#0@@92|) (and ($IsGoodHeap $Heap@@127) ($Is |node#0@@92| Tclass.MutableBtreeBulkOperations.MB.Abs.Node)))) (and (and (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@127 |node#0@@92|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) |MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf#canCall|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@127 |node#0@@92|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) |MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren#canCall|)) (and (=> (MutableBtreeBulkOperations.MB.Abs.__default.Full $Heap@@127 |node#0@@92|) (ite (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@127 |node#0@@92|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (let ((|nkeys#1@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@127 |node#0@@92|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (= |nkeys#1@@0| MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf)) (let ((|nchildren#1@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@127 |node#0@@92|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (= |nchildren#1@@0| MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren)))) (=> (ite (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@127 |node#0@@92|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (let ((|nkeys#1@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@127 |node#0@@92|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (= |nkeys#1@@1| MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf)) (let ((|nchildren#1@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@127 |node#0@@92|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (= |nchildren#1@@1| MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren))) (MutableBtreeBulkOperations.MB.Abs.__default.Full $Heap@@127 |node#0@@92|))))) :qid |MutableB.454:20| :skolemid |3283| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.Full $Heap@@127 |node#0@@92|)) ))))
(assert (forall (($h0@@18 T@U) ($h1@@18 T@U) (|node#0@@93| T@U) (|o#0@@3| T@U) (|i#0@@160| Int) ) (!  (=> (and (and (and (and (and (= (type $h0@@18) (MapType0Type refType MapType1Type)) (= (type $h1@@18) (MapType0Type refType MapType1Type))) (= (type |node#0@@93|) refType)) (= (type |o#0@@3|) refType)) (and (and (and ($IsGoodHeap $h0@@18) ($IsGoodHeap $h1@@18)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.ObjectIsInSubtree#canCall| $h0@@18 |node#0@@93| |o#0@@3| |i#0@@160|) (and ($Is |node#0@@93| Tclass.MutableBtreeBulkOperations.MB.Abs.Node) ($Is |o#0@@3| Tclass._System.object)))) (and ($IsHeapAnchor $h0@@18) ($HeapSucc $h0@@18 $h1@@18)))) (forall (($o@@60 T@U) ($f@@18 T@U) ) (! (let ((alpha@@25 (FieldTypeInv0 (type $f@@18)))) (=> (and (and (= (type $o@@60) refType) (= (type $f@@18) (FieldType alpha@@25))) (and (not (= $o@@60 null)) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@18 |node#0@@93|) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box $o@@60))))) (= (MapType1Select (MapType0Select $h0@@18 $o@@60) $f@@18) (MapType1Select (MapType0Select $h1@@18 $o@@60) $f@@18)))) :qid |unknown.0:0| :skolemid |3284| :no-pattern (type $o@@60) :no-pattern (type $f@@18) :no-pattern (U_2_int $o@@60) :no-pattern (U_2_bool $o@@60) :no-pattern (U_2_int $f@@18) :no-pattern (U_2_bool $f@@18) ))) (and (=> (MutableBtreeBulkOperations.MB.Abs.__default.ObjectIsInSubtree $h0@@18 |node#0@@93| |o#0@@3| |i#0@@160|) (MutableBtreeBulkOperations.MB.Abs.__default.ObjectIsInSubtree $h1@@18 |node#0@@93| |o#0@@3| |i#0@@160|)) (=> (MutableBtreeBulkOperations.MB.Abs.__default.ObjectIsInSubtree $h1@@18 |node#0@@93| |o#0@@3| |i#0@@160|) (MutableBtreeBulkOperations.MB.Abs.__default.ObjectIsInSubtree $h0@@18 |node#0@@93| |o#0@@3| |i#0@@160|)))) :qid |DafnyPre.521:12| :skolemid |3285| :pattern ( ($IsHeapAnchor $h0@@18) ($HeapSucc $h0@@18 $h1@@18) (MutableBtreeBulkOperations.MB.Abs.__default.ObjectIsInSubtree $h1@@18 |node#0@@93| |o#0@@3| |i#0@@160|)) )))
(assert  (=> true (forall (($Heap@@128 T@U) (|node#0@@94| T@U) (|o#0@@4| T@U) (|i#0@@161| Int) ) (!  (=> (and (and (and (= (type $Heap@@128) (MapType0Type refType MapType1Type)) (= (type |node#0@@94|) refType)) (= (type |o#0@@4|) refType)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.ObjectIsInSubtree#canCall| $Heap@@128 |node#0@@94| |o#0@@4| |i#0@@161|) (and (and (and ($IsGoodHeap $Heap@@128) ($Is |node#0@@94| Tclass.MutableBtreeBulkOperations.MB.Abs.Node)) ($Is |o#0@@4| Tclass._System.object)) (and (and (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@128 |node#0@@94|) (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@128 |node#0@@94|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (and (<= (LitInt 0) |i#0@@161|) (< |i#0@@161| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@128 |node#0@@94|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) true) :qid |MutableB.486:13| :skolemid |3286| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.ObjectIsInSubtree $Heap@@128 |node#0@@94| |o#0@@4| |i#0@@161|)) ))))
(assert (forall (($Heap@@129 T@U) (|node#0@@95| T@U) (|o#0@@5| T@U) (|i#0@@162| Int) ) (!  (=> (and (and (and (= (type $Heap@@129) (MapType0Type refType MapType1Type)) (= (type |node#0@@95|) refType)) (= (type |o#0@@5|) refType)) (and (and ($IsGoodHeap $Heap@@129) ($Is |node#0@@95| Tclass.MutableBtreeBulkOperations.MB.Abs.Node)) ($Is |o#0@@5| Tclass._System.object))) (and (=> (|MutableBtreeBulkOperations.MB.Abs.__default.ObjectIsInSubtree#requires| $Heap@@129 |node#0@@95| |o#0@@5| |i#0@@162|) (and (and (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@129 |node#0@@95|) (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@129 |node#0@@95|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (and (<= (LitInt 0) |i#0@@162|) (< |i#0@@162| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@129 |node#0@@95|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))) (=> (and (and (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@129 |node#0@@95|) (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@129 |node#0@@95|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (and (<= (LitInt 0) |i#0@@162|) (< |i#0@@162| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@129 |node#0@@95|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))) (|MutableBtreeBulkOperations.MB.Abs.__default.ObjectIsInSubtree#requires| $Heap@@129 |node#0@@95| |o#0@@5| |i#0@@162|)))) :qid |MutableB.486:13| :skolemid |3287| :pattern ( (|MutableBtreeBulkOperations.MB.Abs.__default.ObjectIsInSubtree#requires| $Heap@@129 |node#0@@95| |o#0@@5| |i#0@@162|)) )))
(assert  (=> true (forall (($Heap@@130 T@U) (|node#0@@96| T@U) (|o#0@@6| T@U) (|i#0@@163| Int) ) (!  (=> (and (and (and (= (type $Heap@@130) (MapType0Type refType MapType1Type)) (= (type |node#0@@96|) refType)) (= (type |o#0@@6|) refType)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.ObjectIsInSubtree#canCall| $Heap@@130 |node#0@@96| |o#0@@6| |i#0@@163|) (and (and (and ($IsGoodHeap $Heap@@130) ($Is |node#0@@96| Tclass.MutableBtreeBulkOperations.MB.Abs.Node)) ($Is |o#0@@6| Tclass._System.object)) (and (and (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@130 |node#0@@96|) (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@130 |node#0@@96|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (and (<= (LitInt 0) |i#0@@163|) (< |i#0@@163| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@130 |node#0@@96|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) (and (=> (MutableBtreeBulkOperations.MB.Abs.__default.ObjectIsInSubtree $Heap@@130 |node#0@@96| |o#0@@6| |i#0@@163|) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@130 ($Unbox refType (MapType1Select (MapType0Select $Heap@@130 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@@130 |node#0@@96|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#0@@163|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |o#0@@6|)))) (=> (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@130 ($Unbox refType (MapType1Select (MapType0Select $Heap@@130 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@@130 |node#0@@96|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#0@@163|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |o#0@@6|))) (MutableBtreeBulkOperations.MB.Abs.__default.ObjectIsInSubtree $Heap@@130 |node#0@@96| |o#0@@6| |i#0@@163|)))) :qid |MutableB.486:13| :skolemid |3288| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.ObjectIsInSubtree $Heap@@130 |node#0@@96| |o#0@@6| |i#0@@163|)) ))))
(assert (forall ((arg0@@368 T@U) (arg1@@231 T@U) (arg2@@138 Int) (arg3@@92 Int) ) (! (= (type (MutableBtreeBulkOperations.MB.Abs.__default.SubRepr arg0@@368 arg1@@231 arg2@@138 arg3@@92)) (MapType0Type BoxType boolType)) :qid |funType:MutableBtreeBulkOperations.MB.Abs.__default.SubRepr| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.SubRepr arg0@@368 arg1@@231 arg2@@138 arg3@@92)) )))
(assert (forall (($h0@@19 T@U) ($h1@@19 T@U) (|node#0@@97| T@U) (|from#0@@3| Int) (|to#0@@3| Int) ) (!  (=> (and (and (= (type $h0@@19) (MapType0Type refType MapType1Type)) (= (type $h1@@19) (MapType0Type refType MapType1Type))) (= (type |node#0@@97|) refType)) (=> (and (and (and ($IsGoodHeap $h0@@19) ($IsGoodHeap $h1@@19)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.SubRepr#canCall| $h0@@19 |node#0@@97| |from#0@@3| |to#0@@3|) ($Is |node#0@@97| Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) (and ($IsHeapAnchor $h0@@19) ($HeapSucc $h0@@19 $h1@@19))) (=> (forall (($o@@61 T@U) ($f@@19 T@U) ) (! (let ((alpha@@26 (FieldTypeInv0 (type $f@@19)))) (=> (and (and (= (type $o@@61) refType) (= (type $f@@19) (FieldType alpha@@26))) (and (not (= $o@@61 null)) (U_2_bool (MapType0Select (MapType1Select (MapType0Select $h0@@19 |node#0@@97|) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box $o@@61))))) (= (MapType1Select (MapType0Select $h0@@19 $o@@61) $f@@19) (MapType1Select (MapType0Select $h1@@19 $o@@61) $f@@19)))) :qid |unknown.0:0| :skolemid |3289| :no-pattern (type $o@@61) :no-pattern (type $f@@19) :no-pattern (U_2_int $o@@61) :no-pattern (U_2_bool $o@@61) :no-pattern (U_2_int $f@@19) :no-pattern (U_2_bool $f@@19) )) (= (MutableBtreeBulkOperations.MB.Abs.__default.SubRepr $h0@@19 |node#0@@97| |from#0@@3| |to#0@@3|) (MutableBtreeBulkOperations.MB.Abs.__default.SubRepr $h1@@19 |node#0@@97| |from#0@@3| |to#0@@3|))))) :qid |DafnyPre.521:12| :skolemid |3290| :pattern ( ($IsHeapAnchor $h0@@19) ($HeapSucc $h0@@19 $h1@@19) (MutableBtreeBulkOperations.MB.Abs.__default.SubRepr $h1@@19 |node#0@@97| |from#0@@3| |to#0@@3|)) )))
(assert  (=> true (forall (($Heap@@131 T@U) (|node#0@@98| T@U) (|from#0@@4| Int) (|to#0@@4| Int) ) (!  (=> (and (and (= (type $Heap@@131) (MapType0Type refType MapType1Type)) (= (type |node#0@@98|) refType)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.SubRepr#canCall| $Heap@@131 |node#0@@98| |from#0@@4| |to#0@@4|) (and (and ($IsGoodHeap $Heap@@131) ($Is |node#0@@98| Tclass.MutableBtreeBulkOperations.MB.Abs.Node)) (and (and (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@131 |node#0@@98|) (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@131 |node#0@@98|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (and (and (<= (LitInt 0) |from#0@@4|) (<= |from#0@@4| |to#0@@4|)) (<= |to#0@@4| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@131 |node#0@@98|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) ($Is (MutableBtreeBulkOperations.MB.Abs.__default.SubRepr $Heap@@131 |node#0@@98| |from#0@@4| |to#0@@4|) (TSet Tclass._System.object))) :qid |MutableB.496:12| :skolemid |3291| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.SubRepr $Heap@@131 |node#0@@98| |from#0@@4| |to#0@@4|)) ))))
(assert (forall (($Heap@@132 T@U) (|node#0@@99| T@U) (|from#0@@5| Int) (|to#0@@5| Int) ) (!  (=> (and (and (= (type $Heap@@132) (MapType0Type refType MapType1Type)) (= (type |node#0@@99|) refType)) (and ($IsGoodHeap $Heap@@132) ($Is |node#0@@99| Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) (and (=> (|MutableBtreeBulkOperations.MB.Abs.__default.SubRepr#requires| $Heap@@132 |node#0@@99| |from#0@@5| |to#0@@5|) (and (and (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@132 |node#0@@99|) (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@132 |node#0@@99|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (and (and (<= (LitInt 0) |from#0@@5|) (<= |from#0@@5| |to#0@@5|)) (<= |to#0@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@132 |node#0@@99|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))) (=> (and (and (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@132 |node#0@@99|) (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@132 |node#0@@99|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (and (and (<= (LitInt 0) |from#0@@5|) (<= |from#0@@5| |to#0@@5|)) (<= |to#0@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@132 |node#0@@99|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))) (|MutableBtreeBulkOperations.MB.Abs.__default.SubRepr#requires| $Heap@@132 |node#0@@99| |from#0@@5| |to#0@@5|)))) :qid |MutableB.496:12| :skolemid |3292| :pattern ( (|MutableBtreeBulkOperations.MB.Abs.__default.SubRepr#requires| $Heap@@132 |node#0@@99| |from#0@@5| |to#0@@5|)) )))
(assert  (=> true (forall (($Heap@@133 T@U) (|node#0@@100| T@U) (|from#0@@6| Int) (|to#0@@6| Int) ) (!  (=> (and (and (= (type $Heap@@133) (MapType0Type refType MapType1Type)) (= (type |node#0@@100|) refType)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.SubRepr#canCall| $Heap@@133 |node#0@@100| |from#0@@6| |to#0@@6|) (and (and ($IsGoodHeap $Heap@@133) ($Is |node#0@@100| Tclass.MutableBtreeBulkOperations.MB.Abs.Node)) (and (and (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@133 |node#0@@100|) (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@@133 |node#0@@100|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (and (and (<= (LitInt 0) |from#0@@6|) (<= |from#0@@6| |to#0@@6|)) (<= |to#0@@6| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@133 |node#0@@100|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) (and (|MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr#canCall| $Heap@@133 (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@@133 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@@133 |node#0@@100|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) |to#0@@6|) |from#0@@6|)) (= (MutableBtreeBulkOperations.MB.Abs.__default.SubRepr $Heap@@133 |node#0@@100| |from#0@@6| |to#0@@6|) (MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr StartFuel_MutableBtreeBulkOperations.MB.Abs._default.SeqRepr $Heap@@133 (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@@133 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@@133 |node#0@@100|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) |to#0@@6|) |from#0@@6|))))) :qid |MutableB.496:12| :skolemid |3293| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.SubRepr $Heap@@133 |node#0@@100| |from#0@@6| |to#0@@6|)) ))))
(assert (forall (($h0@@20 T@U) ($h1@@20 T@U) (|contents#0| T@U) (|i#0@@164| Int) (|j#0@@43| Int) ) (!  (=> (and (and (= (type $h0@@20) (MapType0Type refType MapType1Type)) (= (type $h1@@20) (MapType0Type refType MapType1Type))) (= (type |contents#0|) DatatypeTypeType)) (=> (and (and (and ($IsGoodHeap $h0@@20) ($IsGoodHeap $h1@@20)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.DisjointSubtrees#canCall| $h0@@20 |contents#0| |i#0@@164| |j#0@@43|) ($Is |contents#0| Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents))) (and ($IsHeapAnchor $h0@@20) ($HeapSucc $h0@@20 $h1@@20))) (=> (forall (($o@@62 T@U) ($f@@20 T@U) ) (! (let ((alpha@@27 (FieldTypeInv0 (type $f@@20)))) (=> (and (and (= (type $o@@62) refType) (= (type $f@@20) (FieldType alpha@@27))) (and (not (= $o@@62 null)) (or (or (= $o@@62 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children |contents#0|)) (= $o@@62 ($Unbox refType (MapType1Select (MapType0Select $h0@@20 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children |contents#0|)) (IndexField |i#0@@164|))))) (= $o@@62 ($Unbox refType (MapType1Select (MapType0Select $h0@@20 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children |contents#0|)) (IndexField |j#0@@43|))))))) (= (MapType1Select (MapType0Select $h0@@20 $o@@62) $f@@20) (MapType1Select (MapType0Select $h1@@20 $o@@62) $f@@20)))) :qid |unknown.0:0| :skolemid |3294| :no-pattern (type $o@@62) :no-pattern (type $f@@20) :no-pattern (U_2_int $o@@62) :no-pattern (U_2_bool $o@@62) :no-pattern (U_2_int $f@@20) :no-pattern (U_2_bool $f@@20) )) (and (=> (MutableBtreeBulkOperations.MB.Abs.__default.DisjointSubtrees $h0@@20 |contents#0| |i#0@@164| |j#0@@43|) (MutableBtreeBulkOperations.MB.Abs.__default.DisjointSubtrees $h1@@20 |contents#0| |i#0@@164| |j#0@@43|)) (=> (MutableBtreeBulkOperations.MB.Abs.__default.DisjointSubtrees $h1@@20 |contents#0| |i#0@@164| |j#0@@43|) (MutableBtreeBulkOperations.MB.Abs.__default.DisjointSubtrees $h0@@20 |contents#0| |i#0@@164| |j#0@@43|)))))) :qid |DafnyPre.521:12| :skolemid |3295| :pattern ( ($IsHeapAnchor $h0@@20) ($HeapSucc $h0@@20 $h1@@20) (MutableBtreeBulkOperations.MB.Abs.__default.DisjointSubtrees $h1@@20 |contents#0| |i#0@@164| |j#0@@43|)) )))
(assert  (=> true (forall (($Heap@@134 T@U) (|contents#0@@0| T@U) (|i#0@@165| Int) (|j#0@@44| Int) ) (!  (=> (and (and (= (type $Heap@@134) (MapType0Type refType MapType1Type)) (= (type |contents#0@@0|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.DisjointSubtrees#canCall| $Heap@@134 |contents#0@@0| |i#0@@165| |j#0@@44|) (and (and ($IsGoodHeap $Heap@@134) ($Is |contents#0@@0| Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents)) (and (and (and (and (and (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q |contents#0@@0|) (and (<= (LitInt 0) |i#0@@165|) (< |i#0@@165| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren |contents#0@@0|)))) (and (<= (LitInt 0) |j#0@@44|) (< |j#0@@44| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren |contents#0@@0|)))) (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren |contents#0@@0|) (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.children |contents#0@@0|)))) (forall ((|l#0| Int) ) (!  (=> (and (<= (LitInt 0) |l#0|) (< |l#0| 18446744073709551616)) (=> (and (<= (LitInt 0) |l#0|) (< |l#0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren |contents#0@@0|))) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@134 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children |contents#0@@0|)) (IndexField |l#0|))) null)))) :qid |MutableB.513:21| :skolemid |3296| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@134 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children |contents#0@@0|)) (IndexField |l#0|)))) ))) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@134 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children |contents#0@@0|)) (IndexField |j#0@@44|))) null)))))) true) :qid |MutableB.508:13| :skolemid |3297| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.DisjointSubtrees $Heap@@134 |contents#0@@0| |i#0@@165| |j#0@@44|)) ))))
(assert (forall (($Heap@@135 T@U) (|contents#0@@1| T@U) (|i#0@@166| Int) (|j#0@@45| Int) ) (!  (=> (and (and (= (type $Heap@@135) (MapType0Type refType MapType1Type)) (= (type |contents#0@@1|) DatatypeTypeType)) (and ($IsGoodHeap $Heap@@135) ($Is |contents#0@@1| Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents))) (and (=> (|MutableBtreeBulkOperations.MB.Abs.__default.DisjointSubtrees#requires| $Heap@@135 |contents#0@@1| |i#0@@166| |j#0@@45|) (and (and (and (and (and (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q |contents#0@@1|) (and (<= (LitInt 0) |i#0@@166|) (< |i#0@@166| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren |contents#0@@1|)))) (and (<= (LitInt 0) |j#0@@45|) (< |j#0@@45| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren |contents#0@@1|)))) (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren |contents#0@@1|) (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.children |contents#0@@1|)))) (forall ((|l#1| Int) ) (!  (=> (and (<= (LitInt 0) |l#1|) (< |l#1| 18446744073709551616)) (=> (and (<= (LitInt 0) |l#1|) (< |l#1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren |contents#0@@1|))) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@135 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children |contents#0@@1|)) (IndexField |l#1|))) null)))) :qid |MutableB.513:21| :skolemid |3298| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@135 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children |contents#0@@1|)) (IndexField |l#1|)))) ))) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@135 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children |contents#0@@1|)) (IndexField |j#0@@45|))) null)))) (=> (and (and (and (and (and (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q |contents#0@@1|) (and (<= (LitInt 0) |i#0@@166|) (< |i#0@@166| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren |contents#0@@1|)))) (and (<= (LitInt 0) |j#0@@45|) (< |j#0@@45| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren |contents#0@@1|)))) (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren |contents#0@@1|) (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.children |contents#0@@1|)))) (forall ((|l#1@@0| Int) ) (!  (=> (and (<= (LitInt 0) |l#1@@0|) (< |l#1@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |l#1@@0|) (< |l#1@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren |contents#0@@1|))) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@135 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children |contents#0@@1|)) (IndexField |l#1@@0|))) null)))) :qid |MutableB.513:21| :skolemid |3298| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@135 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children |contents#0@@1|)) (IndexField |l#1@@0|)))) ))) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@135 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children |contents#0@@1|)) (IndexField |j#0@@45|))) null))) (|MutableBtreeBulkOperations.MB.Abs.__default.DisjointSubtrees#requires| $Heap@@135 |contents#0@@1| |i#0@@166| |j#0@@45|)))) :qid |MutableB.508:13| :skolemid |3299| :pattern ( (|MutableBtreeBulkOperations.MB.Abs.__default.DisjointSubtrees#requires| $Heap@@135 |contents#0@@1| |i#0@@166| |j#0@@45|)) )))
(assert  (=> true (forall (($Heap@@136 T@U) (|contents#0@@2| T@U) (|i#0@@167| Int) (|j#0@@46| Int) ) (!  (=> (and (and (= (type $Heap@@136) (MapType0Type refType MapType1Type)) (= (type |contents#0@@2|) DatatypeTypeType)) (or (|MutableBtreeBulkOperations.MB.Abs.__default.DisjointSubtrees#canCall| $Heap@@136 |contents#0@@2| |i#0@@167| |j#0@@46|) (and (and ($IsGoodHeap $Heap@@136) ($Is |contents#0@@2| Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents)) (and (and (and (and (and (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q |contents#0@@2|) (and (<= (LitInt 0) |i#0@@167|) (< |i#0@@167| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren |contents#0@@2|)))) (and (<= (LitInt 0) |j#0@@46|) (< |j#0@@46| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren |contents#0@@2|)))) (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren |contents#0@@2|) (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.children |contents#0@@2|)))) (forall ((|l#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |l#1@@1|) (< |l#1@@1| 18446744073709551616)) (=> (and (<= (LitInt 0) |l#1@@1|) (< |l#1@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren |contents#0@@2|))) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@136 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children |contents#0@@2|)) (IndexField |l#1@@1|))) null)))) :qid |MutableB.513:21| :skolemid |3298| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@@136 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children |contents#0@@2|)) (IndexField |l#1@@1|)))) ))) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@@136 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children |contents#0@@2|)) (IndexField |j#0@@46|))) null)))))) (and (|MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs#canCall| $Heap@@136 (|Seq#Take| (|Seq#FromArray| $Heap@@136 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children |contents#0@@2|)) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren |contents#0@@2|)) |i#0@@167| |j#0@@46|) (and (=> (MutableBtreeBulkOperations.MB.Abs.__default.DisjointSubtrees $Heap@@136 |contents#0@@2| |i#0@@167| |j#0@@46|) (MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs $Heap@@136 (|Seq#Take| (|Seq#FromArray| $Heap@@136 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children |contents#0@@2|)) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren |contents#0@@2|)) |i#0@@167| |j#0@@46|)) (=> (MutableBtreeBulkOperations.MB.Abs.__default.DisjointReprs $Heap@@136 (|Seq#Take| (|Seq#FromArray| $Heap@@136 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children |contents#0@@2|)) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren |contents#0@@2|)) |i#0@@167| |j#0@@46|) (MutableBtreeBulkOperations.MB.Abs.__default.DisjointSubtrees $Heap@@136 |contents#0@@2| |i#0@@167| |j#0@@46|))))) :qid |MutableB.508:13| :skolemid |3300| :pattern ( (MutableBtreeBulkOperations.MB.Abs.__default.DisjointSubtrees $Heap@@136 |contents#0@@2| |i#0@@167| |j#0@@46|)) ))))
(assert (forall (($o@@63 T@U) ) (!  (=> (= (type $o@@63) refType) (and (=> ($Is $o@@63 Tclass.MutableBtreeBulkOperations.MB.Abs.Node?) (or (= $o@@63 null) (= (dtype $o@@63) Tclass.MutableBtreeBulkOperations.MB.Abs.Node?))) (=> (or (= $o@@63 null) (= (dtype $o@@63) Tclass.MutableBtreeBulkOperations.MB.Abs.Node?)) ($Is $o@@63 Tclass.MutableBtreeBulkOperations.MB.Abs.Node?)))) :qid |unknown.0:0| :skolemid |3301| :pattern ( ($Is $o@@63 Tclass.MutableBtreeBulkOperations.MB.Abs.Node?)) )))
(assert (forall (($o@@64 T@U) ($h@@72 T@U) ) (!  (=> (and (= (type $o@@64) refType) (= (type $h@@72) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc $o@@64 Tclass.MutableBtreeBulkOperations.MB.Abs.Node? $h@@72) (or (= $o@@64 null) (U_2_bool (MapType1Select (MapType0Select $h@@72 $o@@64) alloc)))) (=> (or (= $o@@64 null) (U_2_bool (MapType1Select (MapType0Select $h@@72 $o@@64) alloc))) ($IsAlloc $o@@64 Tclass.MutableBtreeBulkOperations.MB.Abs.Node? $h@@72)))) :qid |unknown.0:0| :skolemid |3302| :pattern ( ($IsAlloc $o@@64 Tclass.MutableBtreeBulkOperations.MB.Abs.Node? $h@@72)) )))
(assert (forall (($h@@73 T@U) ($o@@65 T@U) ) (!  (=> (and (and (= (type $h@@73) (MapType0Type refType MapType1Type)) (= (type $o@@65) refType)) (and ($IsGoodHeap $h@@73) (and (not (= $o@@65 null)) (= (dtype $o@@65) Tclass.MutableBtreeBulkOperations.MB.Abs.Node?)))) ($Is (MapType1Select (MapType0Select $h@@73 $o@@65) MutableBtreeBulkOperations.MB.Abs.Node.contents) Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents)) :qid |DafnyPre.521:12| :skolemid |3303| :pattern ( (MapType1Select (MapType0Select $h@@73 $o@@65) MutableBtreeBulkOperations.MB.Abs.Node.contents)) )))
(assert (forall (($h@@74 T@U) ($o@@66 T@U) ) (!  (=> (and (= (type $h@@74) (MapType0Type refType MapType1Type)) (= (type $o@@66) refType)) (=> (and (and ($IsGoodHeap $h@@74) (and (not (= $o@@66 null)) (= (dtype $o@@66) Tclass.MutableBtreeBulkOperations.MB.Abs.Node?))) (U_2_bool (MapType1Select (MapType0Select $h@@74 $o@@66) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@74 $o@@66) MutableBtreeBulkOperations.MB.Abs.Node.contents) Tclass.MutableBtreeBulkOperations.MB.Abs.NodeContents $h@@74))) :qid |DafnyPre.521:12| :skolemid |3304| :pattern ( (MapType1Select (MapType0Select $h@@74 $o@@66) MutableBtreeBulkOperations.MB.Abs.Node.contents)) )))
(assert (forall (($h@@75 T@U) ($o@@67 T@U) ) (!  (=> (and (and (= (type $h@@75) (MapType0Type refType MapType1Type)) (= (type $o@@67) refType)) (and ($IsGoodHeap $h@@75) (and (not (= $o@@67 null)) (= (dtype $o@@67) Tclass.MutableBtreeBulkOperations.MB.Abs.Node?)))) ($Is (MapType1Select (MapType0Select $h@@75 $o@@67) MutableBtreeBulkOperations.MB.Abs.Node.repr) (TSet Tclass._System.object))) :qid |DafnyPre.521:12| :skolemid |3305| :pattern ( (MapType1Select (MapType0Select $h@@75 $o@@67) MutableBtreeBulkOperations.MB.Abs.Node.repr)) )))
(assert (forall (($h@@76 T@U) ($o@@68 T@U) ) (!  (=> (and (= (type $h@@76) (MapType0Type refType MapType1Type)) (= (type $o@@68) refType)) (=> (and (and ($IsGoodHeap $h@@76) (and (not (= $o@@68 null)) (= (dtype $o@@68) Tclass.MutableBtreeBulkOperations.MB.Abs.Node?))) (U_2_bool (MapType1Select (MapType0Select $h@@76 $o@@68) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@76 $o@@68) MutableBtreeBulkOperations.MB.Abs.Node.repr) (TSet Tclass._System.object) $h@@76))) :qid |DafnyPre.521:12| :skolemid |3306| :pattern ( (MapType1Select (MapType0Select $h@@76 $o@@68) MutableBtreeBulkOperations.MB.Abs.Node.repr)) )))
(assert (forall (($h@@77 T@U) ($o@@69 T@U) ) (!  (=> (and (and (= (type $h@@77) (MapType0Type refType MapType1Type)) (= (type $o@@69) refType)) (and ($IsGoodHeap $h@@77) (and (not (= $o@@69 null)) (= (dtype $o@@69) Tclass.MutableBtreeBulkOperations.MB.Abs.Node?)))) ($Is (MapType1Select (MapType0Select $h@@77 $o@@69) MutableBtreeBulkOperations.MB.Abs.Node.height) Tclass._System.nat)) :qid |DafnyPre.521:12| :skolemid |3307| :pattern ( (MapType1Select (MapType0Select $h@@77 $o@@69) MutableBtreeBulkOperations.MB.Abs.Node.height)) )))
(assert (forall (($h@@78 T@U) ($o@@70 T@U) ) (!  (=> (and (= (type $h@@78) (MapType0Type refType MapType1Type)) (= (type $o@@70) refType)) (=> (and (and ($IsGoodHeap $h@@78) (and (not (= $o@@70 null)) (= (dtype $o@@70) Tclass.MutableBtreeBulkOperations.MB.Abs.Node?))) (U_2_bool (MapType1Select (MapType0Select $h@@78 $o@@70) alloc))) ($IsAlloc (MapType1Select (MapType0Select $h@@78 $o@@70) MutableBtreeBulkOperations.MB.Abs.Node.height) Tclass._System.nat $h@@78))) :qid |DafnyPre.521:12| :skolemid |3308| :pattern ( (MapType1Select (MapType0Select $h@@78 $o@@70) MutableBtreeBulkOperations.MB.Abs.Node.height)) )))
(assert (forall ((|c#0@@14| T@U) ) (!  (=> (= (type |c#0@@14|) refType) (and (=> ($Is |c#0@@14| Tclass.MutableBtreeBulkOperations.MB.Abs.Node) (and ($Is |c#0@@14| Tclass.MutableBtreeBulkOperations.MB.Abs.Node?) (not (= |c#0@@14| null)))) (=> (and ($Is |c#0@@14| Tclass.MutableBtreeBulkOperations.MB.Abs.Node?) (not (= |c#0@@14| null))) ($Is |c#0@@14| Tclass.MutableBtreeBulkOperations.MB.Abs.Node)))) :qid |unknown.0:0| :skolemid |3309| :pattern ( ($Is |c#0@@14| Tclass.MutableBtreeBulkOperations.MB.Abs.Node)) )))
(assert (forall ((|c#0@@15| T@U) ($h@@79 T@U) ) (!  (=> (and (= (type |c#0@@15|) refType) (= (type $h@@79) (MapType0Type refType MapType1Type))) (and (=> ($IsAlloc |c#0@@15| Tclass.MutableBtreeBulkOperations.MB.Abs.Node $h@@79) ($IsAlloc |c#0@@15| Tclass.MutableBtreeBulkOperations.MB.Abs.Node? $h@@79)) (=> ($IsAlloc |c#0@@15| Tclass.MutableBtreeBulkOperations.MB.Abs.Node? $h@@79) ($IsAlloc |c#0@@15| Tclass.MutableBtreeBulkOperations.MB.Abs.Node $h@@79)))) :qid |unknown.0:0| :skolemid |3310| :pattern ( ($IsAlloc |c#0@@15| Tclass.MutableBtreeBulkOperations.MB.Abs.Node $h@@79)) )))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@369 T@T) (arg1@@232 T@T) ) (! (= (Ctor (MapType6Type arg0@@369 arg1@@232)) 25) :qid |ctor:MapType6Type| )) (forall ((arg0@@370 T@T) (arg1@@233 T@T) ) (! (= (MapType6TypeInv0 (MapType6Type arg0@@370 arg1@@233)) arg0@@370) :qid |typeInv:MapType6TypeInv0| :pattern ( (MapType6Type arg0@@370 arg1@@233)) ))) (forall ((arg0@@371 T@T) (arg1@@234 T@T) ) (! (= (MapType6TypeInv1 (MapType6Type arg0@@371 arg1@@234)) arg1@@234) :qid |typeInv:MapType6TypeInv1| :pattern ( (MapType6Type arg0@@371 arg1@@234)) ))) (forall ((arg0@@372 T@U) (arg1@@235 T@U) (arg2@@139 T@U) ) (! (let ((aVar1@@6 (MapType6TypeInv1 (type arg0@@372)))) (= (type (MapType6Select arg0@@372 arg1@@235 arg2@@139)) aVar1@@6)) :qid |funType:MapType6Select| :pattern ( (MapType6Select arg0@@372 arg1@@235 arg2@@139)) ))) (forall ((arg0@@373 T@U) (arg1@@236 T@U) (arg2@@140 T@U) (arg3@@93 T@U) ) (! (let ((aVar1@@7 (type arg3@@93))) (let ((aVar0@@4 (type arg1@@236))) (= (type (MapType6Store arg0@@373 arg1@@236 arg2@@140 arg3@@93)) (MapType6Type aVar0@@4 aVar1@@7)))) :qid |funType:MapType6Store| :pattern ( (MapType6Store arg0@@373 arg1@@236 arg2@@140 arg3@@93)) ))) (forall ((m@@53 T@U) (x0@@27 T@U) (x1@@21 T@U) (val@@28 T@U) ) (! (let ((aVar1@@8 (MapType6TypeInv1 (type m@@53)))) (=> (= (type val@@28) aVar1@@8) (= (MapType6Select (MapType6Store m@@53 x0@@27 x1@@21 val@@28) x0@@27 x1@@21) val@@28))) :qid |mapAx0:MapType6Select| :weight 0 ))) (and (and (forall ((val@@29 T@U) (m@@54 T@U) (x0@@28 T@U) (x1@@22 T@U) (y0@@21 T@U) (y1@@17 T@U) ) (!  (or (= x0@@28 y0@@21) (= (MapType6Select (MapType6Store m@@54 x0@@28 x1@@22 val@@29) y0@@21 y1@@17) (MapType6Select m@@54 y0@@21 y1@@17))) :qid |mapAx1:MapType6Select:0| :weight 0 )) (forall ((val@@30 T@U) (m@@55 T@U) (x0@@29 T@U) (x1@@23 T@U) (y0@@22 T@U) (y1@@18 T@U) ) (!  (or (= x1@@23 y1@@18) (= (MapType6Select (MapType6Store m@@55 x0@@29 x1@@23 val@@30) y0@@22 y1@@18) (MapType6Select m@@55 y0@@22 y1@@18))) :qid |mapAx1:MapType6Select:1| :weight 0 ))) (forall ((val@@31 T@U) (m@@56 T@U) (x0@@30 T@U) (x1@@24 T@U) (y0@@23 T@U) (y1@@19 T@U) ) (!  (or true (= (MapType6Select (MapType6Store m@@56 x0@@30 x1@@24 val@@31) y0@@23 y1@@19) (MapType6Select m@@56 y0@@23 y1@@19))) :qid |mapAx2:MapType6Select| :weight 0 )))) (forall ((arg0@@374 T@U) (arg1@@237 T@U) (arg2@@141 T@U) (arg3@@94 T@U) (arg4@@62 T@U) ) (! (= (type (|lambda#0| arg0@@374 arg1@@237 arg2@@141 arg3@@94 arg4@@62)) (MapType6Type refType boolType)) :qid |funType:lambda#0| :pattern ( (|lambda#0| arg0@@374 arg1@@237 arg2@@141 arg3@@94 arg4@@62)) ))))
(assert (forall (($o@@71 T@U) ($f@@21 T@U) (|l#0@@0| T@U) (|l#1@@2| T@U) (|l#2| T@U) (|l#3| T@U) (|l#4| T@U) ) (! (let ((alpha@@28 (FieldTypeInv0 (type $f@@21)))) (=> (and (and (and (and (and (and (= (type $o@@71) refType) (= (type $f@@21) (FieldType alpha@@28))) (= (type |l#0@@0|) refType)) (= (type |l#1@@2|) (MapType0Type refType MapType1Type))) (= (type |l#2|) (FieldType boolType))) (= (type |l#3|) refType)) (= (type |l#4|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType6Select (|lambda#0| |l#0@@0| |l#1@@2| |l#2| |l#3| |l#4|) $o@@71 $f@@21))  (=> (and (not (= $o@@71 |l#0@@0|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@2| $o@@71) |l#2|))) (or (= $o@@71 |l#3|) (U_2_bool (MapType0Select |l#4| ($Box $o@@71)))))))) :qid |MutableB.12:12| :skolemid |3311| :pattern ( (MapType6Select (|lambda#0| |l#0@@0| |l#1@@2| |l#2| |l#3| |l#4|) $o@@71 $f@@21)) )))
(assert (forall ((arg0@@375 T@U) (arg1@@238 T@U) (arg2@@142 T@U) (arg3@@95 T@U) (arg4@@63 T@U) ) (! (= (type (|lambda#1| arg0@@375 arg1@@238 arg2@@142 arg3@@95 arg4@@63)) (MapType6Type refType boolType)) :qid |funType:lambda#1| :pattern ( (|lambda#1| arg0@@375 arg1@@238 arg2@@142 arg3@@95 arg4@@63)) )))
(assert (forall (($o@@72 T@U) ($f@@22 T@U) (|l#0@@1| T@U) (|l#1@@3| T@U) (|l#2@@0| T@U) (|l#3@@0| T@U) (|l#4@@0| T@U) ) (! (let ((alpha@@29 (FieldTypeInv0 (type $f@@22)))) (=> (and (and (and (and (and (and (= (type $o@@72) refType) (= (type $f@@22) (FieldType alpha@@29))) (= (type |l#0@@1|) refType)) (= (type |l#1@@3|) (MapType0Type refType MapType1Type))) (= (type |l#2@@0|) (FieldType boolType))) (= (type |l#3@@0|) refType)) (= (type |l#4@@0|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType6Select (|lambda#1| |l#0@@1| |l#1@@3| |l#2@@0| |l#3@@0| |l#4@@0|) $o@@72 $f@@22))  (=> (and (not (= $o@@72 |l#0@@1|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@3| $o@@72) |l#2@@0|))) (or (= $o@@72 |l#3@@0|) (U_2_bool (MapType0Select |l#4@@0| ($Box $o@@72)))))))) :qid |MutableB.12:12| :skolemid |3312| :pattern ( (MapType6Select (|lambda#1| |l#0@@1| |l#1@@3| |l#2@@0| |l#3@@0| |l#4@@0|) $o@@72 $f@@22)) )))
(assert (forall ((arg0@@376 T@U) (arg1@@239 T@U) (arg2@@143 T@U) (arg3@@96 Bool) ) (! (= (type (|lambda#2| arg0@@376 arg1@@239 arg2@@143 arg3@@96)) (MapType6Type refType boolType)) :qid |funType:lambda#2| :pattern ( (|lambda#2| arg0@@376 arg1@@239 arg2@@143 arg3@@96)) )))
(assert (forall (($o@@73 T@U) ($f@@23 T@U) (|l#0@@2| T@U) (|l#1@@4| T@U) (|l#2@@1| T@U) (|l#3@@1| Bool) ) (! (let ((alpha@@30 (FieldTypeInv0 (type $f@@23)))) (=> (and (and (and (and (= (type $o@@73) refType) (= (type $f@@23) (FieldType alpha@@30))) (= (type |l#0@@2|) refType)) (= (type |l#1@@4|) (MapType0Type refType MapType1Type))) (= (type |l#2@@1|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#2| |l#0@@2| |l#1@@4| |l#2@@1| |l#3@@1|) $o@@73 $f@@23))  (=> (and (not (= $o@@73 |l#0@@2|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@4| $o@@73) |l#2@@1|))) |l#3@@1|)))) :qid |MutableB.19:10| :skolemid |3313| :pattern ( (MapType6Select (|lambda#2| |l#0@@2| |l#1@@4| |l#2@@1| |l#3@@1|) $o@@73 $f@@23)) )))
(assert (forall ((arg0@@377 T@U) (arg1@@240 T@U) (arg2@@144 T@U) (arg3@@97 Bool) ) (! (= (type (|lambda#3| arg0@@377 arg1@@240 arg2@@144 arg3@@97)) (MapType6Type refType boolType)) :qid |funType:lambda#3| :pattern ( (|lambda#3| arg0@@377 arg1@@240 arg2@@144 arg3@@97)) )))
(assert (forall (($o@@74 T@U) ($f@@24 T@U) (|l#0@@3| T@U) (|l#1@@5| T@U) (|l#2@@2| T@U) (|l#3@@2| Bool) ) (! (let ((alpha@@31 (FieldTypeInv0 (type $f@@24)))) (=> (and (and (and (and (= (type $o@@74) refType) (= (type $f@@24) (FieldType alpha@@31))) (= (type |l#0@@3|) refType)) (= (type |l#1@@5|) (MapType0Type refType MapType1Type))) (= (type |l#2@@2|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#3| |l#0@@3| |l#1@@5| |l#2@@2| |l#3@@2|) $o@@74 $f@@24))  (=> (and (not (= $o@@74 |l#0@@3|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@5| $o@@74) |l#2@@2|))) |l#3@@2|)))) :qid |MutableB.19:10| :skolemid |3314| :pattern ( (MapType6Select (|lambda#3| |l#0@@3| |l#1@@5| |l#2@@2| |l#3@@2|) $o@@74 $f@@24)) )))
(assert (forall ((arg0@@378 T@U) (arg1@@241 T@U) (arg2@@145 T@U) (arg3@@98 T@U) (arg4@@64 T@U) ) (! (= (type (|lambda#4| arg0@@378 arg1@@241 arg2@@145 arg3@@98 arg4@@64)) (MapType6Type refType boolType)) :qid |funType:lambda#4| :pattern ( (|lambda#4| arg0@@378 arg1@@241 arg2@@145 arg3@@98 arg4@@64)) )))
(assert (forall (($o@@75 T@U) ($f@@25 T@U) (|l#0@@4| T@U) (|l#1@@6| T@U) (|l#2@@3| T@U) (|l#3@@3| T@U) (|l#4@@1| T@U) ) (! (let ((alpha@@32 (FieldTypeInv0 (type $f@@25)))) (=> (and (and (and (and (and (and (= (type $o@@75) refType) (= (type $f@@25) (FieldType alpha@@32))) (= (type |l#0@@4|) refType)) (= (type |l#1@@6|) (MapType0Type refType MapType1Type))) (= (type |l#2@@3|) (FieldType boolType))) (= (type |l#3@@3|) refType)) (= (type |l#4@@1|) refType)) (= (U_2_bool (MapType6Select (|lambda#4| |l#0@@4| |l#1@@6| |l#2@@3| |l#3@@3| |l#4@@1|) $o@@75 $f@@25))  (=> (and (not (= $o@@75 |l#0@@4|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@6| $o@@75) |l#2@@3|))) (or (= $o@@75 |l#3@@3|) (= $o@@75 |l#4@@1|)))))) :qid |MutableB.56:10| :skolemid |3315| :pattern ( (MapType6Select (|lambda#4| |l#0@@4| |l#1@@6| |l#2@@3| |l#3@@3| |l#4@@1|) $o@@75 $f@@25)) )))
(assert (forall ((arg0@@379 T@U) (arg1@@242 T@U) (arg2@@146 T@U) (arg3@@99 T@U) (arg4@@65 T@U) ) (! (= (type (|lambda#5| arg0@@379 arg1@@242 arg2@@146 arg3@@99 arg4@@65)) (MapType6Type refType boolType)) :qid |funType:lambda#5| :pattern ( (|lambda#5| arg0@@379 arg1@@242 arg2@@146 arg3@@99 arg4@@65)) )))
(assert (forall (($o@@76 T@U) ($f@@26 T@U) (|l#0@@5| T@U) (|l#1@@7| T@U) (|l#2@@4| T@U) (|l#3@@4| T@U) (|l#4@@2| T@U) ) (! (let ((alpha@@33 (FieldTypeInv0 (type $f@@26)))) (=> (and (and (and (and (and (and (= (type $o@@76) refType) (= (type $f@@26) (FieldType alpha@@33))) (= (type |l#0@@5|) refType)) (= (type |l#1@@7|) (MapType0Type refType MapType1Type))) (= (type |l#2@@4|) (FieldType boolType))) (= (type |l#3@@4|) refType)) (= (type |l#4@@2|) refType)) (= (U_2_bool (MapType6Select (|lambda#5| |l#0@@5| |l#1@@7| |l#2@@4| |l#3@@4| |l#4@@2|) $o@@76 $f@@26))  (=> (and (not (= $o@@76 |l#0@@5|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@7| $o@@76) |l#2@@4|))) (or (= $o@@76 |l#3@@4|) (= $o@@76 |l#4@@2|)))))) :qid |MutableB.56:10| :skolemid |3316| :pattern ( (MapType6Select (|lambda#5| |l#0@@5| |l#1@@7| |l#2@@4| |l#3@@4| |l#4@@2|) $o@@76 $f@@26)) )))
(assert (forall ((arg0@@380 T@U) (arg1@@243 T@U) (arg2@@147 T@U) (arg3@@100 Bool) ) (! (= (type (|lambda#6| arg0@@380 arg1@@243 arg2@@147 arg3@@100)) (MapType6Type refType boolType)) :qid |funType:lambda#6| :pattern ( (|lambda#6| arg0@@380 arg1@@243 arg2@@147 arg3@@100)) )))
(assert (forall (($o@@77 T@U) ($f@@27 T@U) (|l#0@@6| T@U) (|l#1@@8| T@U) (|l#2@@5| T@U) (|l#3@@5| Bool) ) (! (let ((alpha@@34 (FieldTypeInv0 (type $f@@27)))) (=> (and (and (and (and (= (type $o@@77) refType) (= (type $f@@27) (FieldType alpha@@34))) (= (type |l#0@@6|) refType)) (= (type |l#1@@8|) (MapType0Type refType MapType1Type))) (= (type |l#2@@5|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#6| |l#0@@6| |l#1@@8| |l#2@@5| |l#3@@5|) $o@@77 $f@@27))  (=> (and (not (= $o@@77 |l#0@@6|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@8| $o@@77) |l#2@@5|))) |l#3@@5|)))) :qid |MutableB.116:10| :skolemid |3317| :pattern ( (MapType6Select (|lambda#6| |l#0@@6| |l#1@@8| |l#2@@5| |l#3@@5|) $o@@77 $f@@27)) )))
(assert (forall ((arg0@@381 T@U) (arg1@@244 T@U) (arg2@@148 T@U) (arg3@@101 Bool) ) (! (= (type (|lambda#7| arg0@@381 arg1@@244 arg2@@148 arg3@@101)) (MapType6Type refType boolType)) :qid |funType:lambda#7| :pattern ( (|lambda#7| arg0@@381 arg1@@244 arg2@@148 arg3@@101)) )))
(assert (forall (($o@@78 T@U) ($f@@28 T@U) (|l#0@@7| T@U) (|l#1@@9| T@U) (|l#2@@6| T@U) (|l#3@@6| Bool) ) (! (let ((alpha@@35 (FieldTypeInv0 (type $f@@28)))) (=> (and (and (and (and (= (type $o@@78) refType) (= (type $f@@28) (FieldType alpha@@35))) (= (type |l#0@@7|) refType)) (= (type |l#1@@9|) (MapType0Type refType MapType1Type))) (= (type |l#2@@6|) (FieldType boolType))) (= (U_2_bool (MapType6Select (|lambda#7| |l#0@@7| |l#1@@9| |l#2@@6| |l#3@@6|) $o@@78 $f@@28))  (=> (and (not (= $o@@78 |l#0@@7|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@9| $o@@78) |l#2@@6|))) |l#3@@6|)))) :qid |MutableB.116:10| :skolemid |3318| :pattern ( (MapType6Select (|lambda#7| |l#0@@7| |l#1@@9| |l#2@@6| |l#3@@6|) $o@@78 $f@@28)) )))
(assert (forall ((|$y#0| T@U) (|l#0@@8| T@U) (|l#1@@10| T@U) (|l#2@@7| Int) ) (!  (=> (and (and (= (type |$y#0|) BoxType) (= (type |l#0@@8|) TyType)) (= (type |l#1@@10|) (MapType0Type BoxType intType))) (= (U_2_bool (MapType0Select (|lambda#8| |l#0@@8| |l#1@@10| |l#2@@7|) |$y#0|))  (and ($IsBox |$y#0| |l#0@@8|) (> (U_2_int (MapType0Select |l#1@@10| |$y#0|)) |l#2@@7|)))) :qid |sequence.28:5| :skolemid |3319| :pattern ( (MapType0Select (|lambda#8| |l#0@@8| |l#1@@10| |l#2@@7|) |$y#0|)) )))
(assert (forall ((|$w#1| T@U) (|l#0@@9| T@U) (|l#1@@11| T@U) (|l#2@@8| T@U) ) (!  (=> (and (and (and (= (type |$w#1|) BoxType) (= (type |l#0@@9|) TyType)) (= (type |l#1@@11|) (MapType0Type BoxType boolType))) (= (type |l#2@@8|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#12| |l#0@@9| |l#1@@11| |l#2@@8|) |$w#1|))  (and ($IsBox |$w#1| |l#0@@9|) (and (U_2_bool (MapType0Select |l#1@@11| |$w#1|)) (not (U_2_bool (MapType0Select |l#2@@8| |$w#1|))))))) :qid |Mapssdfy.43:14| :skolemid |3320| :pattern ( (MapType0Select (|lambda#12| |l#0@@9| |l#1@@11| |l#2@@8|) |$w#1|)) )))
(assert (forall ((|$w#1@@0| T@U) (|l#0@@10| T@U) ) (!  (=> (and (= (type |$w#1@@0|) BoxType) (= (type |l#0@@10|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#13| |l#0@@10|) |$w#1@@0|) (MapType0Select |l#0@@10| |$w#1@@0|))) :qid |Mapssdfy.43:14| :skolemid |3321| :pattern ( (MapType0Select (|lambda#13| |l#0@@10|) |$w#1@@0|)) )))
(assert (forall ((|$w#1@@1| T@U) (|l#0@@11| T@U) (|l#1@@12| T@U) (|l#2@@9| T@U) ) (!  (=> (and (and (and (= (type |$w#1@@1|) BoxType) (= (type |l#0@@11|) TyType)) (= (type |l#1@@12|) (MapType0Type BoxType boolType))) (= (type |l#2@@9|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#16| |l#0@@11| |l#1@@12| |l#2@@9|) |$w#1@@1|))  (and ($IsBox |$w#1@@1| |l#0@@11|) (and (U_2_bool (MapType0Select |l#1@@12| |$w#1@@1|)) (not (= |$w#1@@1| |l#2@@9|)))))) :qid |Mapssdfy.66:15| :skolemid |3322| :pattern ( (MapType0Select (|lambda#16| |l#0@@11| |l#1@@12| |l#2@@9|) |$w#1@@1|)) )))
(assert (forall ((|$w#0| T@U) (|l#0@@12| T@U) (|l#1@@13| T@U) (|l#2@@10| T@U) ) (!  (=> (and (and (and (= (type |$w#0|) BoxType) (= (type |l#0@@12|) TyType)) (= (type |l#1@@13|) (MapType0Type BoxType boolType))) (= (type |l#2@@10|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#30| |l#0@@12| |l#1@@13| |l#2@@10|) |$w#0|))  (and ($IsBox |$w#0| |l#0@@12|) (and (U_2_bool (MapType0Select |l#1@@13| |$w#0|)) (U_2_bool (MapType0Select |l#2@@10| |$w#0|)))))) :qid |Mapssdfy.99:5| :skolemid |3323| :pattern ( (MapType0Select (|lambda#30| |l#0@@12| |l#1@@13| |l#2@@10|) |$w#0|)) )))
(assert (forall ((|$w#0@@0| T@U) (|l#0@@13| T@U) (|l#1@@14| T@U) (|l#2@@11| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@0|) BoxType) (= (type |l#0@@13|) TyType)) (= (type |l#1@@14|) (MapType0Type BoxType boolType))) (= (type |l#2@@11|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#44| |l#0@@13| |l#1@@14| |l#2@@11|) |$w#0@@0|))  (and ($IsBox |$w#0@@0| |l#0@@13|) (or (U_2_bool (MapType0Select |l#1@@14| |$w#0@@0|)) (U_2_bool (MapType0Select |l#2@@11| |$w#0@@0|)))))) :qid |Mapssdfy.117:3| :skolemid |3324| :pattern ( (MapType0Select (|lambda#44| |l#0@@13| |l#1@@14| |l#2@@11|) |$w#0@@0|)) )))
(assert (forall ((|$w#0@@1| T@U) (|l#0@@14| T@U) (|l#1@@15| T@U) (|l#2@@12| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@1|) BoxType) (= (type |l#0@@14|) (MapType0Type BoxType boolType))) (= (type |l#1@@15|) (MapType0Type BoxType BoxType))) (= (type |l#2@@12|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#45| |l#0@@14| |l#1@@15| |l#2@@12|) |$w#0@@1|) (ite (U_2_bool (MapType0Select |l#0@@14| |$w#0@@1|)) (MapType0Select |l#1@@15| |$w#0@@1|) (MapType0Select |l#2@@12| |$w#0@@1|)))) :qid |Mapssdfy.117:3| :skolemid |3325| :pattern ( (MapType0Select (|lambda#45| |l#0@@14| |l#1@@15| |l#2@@12|) |$w#0@@1|)) )))
(assert (forall ((|$w#0@@2| T@U) (|l#0@@15| T@U) (|l#1@@16| T@U) (|l#2@@13| T@U) (|l#3@@7| T@U) ) (!  (=> (and (and (and (and (= (type |$w#0@@2|) BoxType) (= (type |l#0@@15|) TyType)) (= (type |l#1@@16|) (MapType0Type BoxType boolType))) (= (type |l#2@@13|) (MapType0Type BoxType boolType))) (= (type |l#3@@7|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#64| |l#0@@15| |l#1@@16| |l#2@@13| |l#3@@7|) |$w#0@@2|))  (and ($IsBox |$w#0@@2| |l#0@@15|) (or (or (U_2_bool (MapType0Select |l#1@@16| |$w#0@@2|)) (U_2_bool (MapType0Select |l#2@@13| |$w#0@@2|))) (U_2_bool (MapType0Select |l#3@@7| |$w#0@@2|)))))) :qid |Mapssdfy.191:3| :skolemid |3326| :pattern ( (MapType0Select (|lambda#64| |l#0@@15| |l#1@@16| |l#2@@13| |l#3@@7|) |$w#0@@2|)) )))
(assert (forall ((|$w#0@@3| T@U) (|l#0@@16| T@U) (|l#1@@17| T@U) (|l#2@@14| T@U) (|l#3@@8| T@U) (|l#4@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type |$w#0@@3|) BoxType) (= (type |l#0@@16|) (MapType0Type BoxType boolType))) (= (type |l#1@@17|) (MapType0Type BoxType BoxType))) (= (type |l#2@@14|) (MapType0Type BoxType boolType))) (= (type |l#3@@8|) (MapType0Type BoxType BoxType))) (= (type |l#4@@3|) (MapType0Type BoxType BoxType))) (= (MapType0Select (|lambda#65| |l#0@@16| |l#1@@17| |l#2@@14| |l#3@@8| |l#4@@3|) |$w#0@@3|) (ite (U_2_bool (MapType0Select |l#0@@16| |$w#0@@3|)) (MapType0Select |l#1@@17| |$w#0@@3|) (ite (U_2_bool (MapType0Select |l#2@@14| |$w#0@@3|)) (MapType0Select |l#3@@8| |$w#0@@3|) (MapType0Select |l#4@@3| |$w#0@@3|))))) :qid |Mapssdfy.191:3| :skolemid |3327| :pattern ( (MapType0Select (|lambda#65| |l#0@@16| |l#1@@17| |l#2@@14| |l#3@@8| |l#4@@3|) |$w#0@@3|)) )))
(assert (forall ((|$w#0@@4| T@U) (|l#0@@17| T@U) (|l#1@@18| T@U) ) (!  (=> (and (and (= (type |$w#0@@4|) BoxType) (= (type |l#0@@17|) TyType)) (= (type |l#1@@18|) (MapType0Type BoxType boolType))) (= (U_2_bool (MapType0Select (|lambda#68| |l#0@@17| |l#1@@18|) |$w#0@@4|))  (and ($IsBox |$w#0@@4| |l#0@@17|) (U_2_bool (MapType0Select |l#1@@18| |$w#0@@4|))))) :qid |Mapssdfy.198:4| :skolemid |3328| :pattern ( (MapType0Select (|lambda#68| |l#0@@17| |l#1@@18|) |$w#0@@4|)) )))
(assert (forall ((|$y#0@@0| T@U) (|l#0@@18| T@U) (|l#1@@19| Int) ) (!  (=> (and (= (type |$y#0@@0|) BoxType) (= (type |l#0@@18|) TyType)) (= (U_2_bool (MapType0Select (|lambda#76| |l#0@@18| |l#1@@19|) |$y#0@@0|))  (and ($IsBox |$y#0@@0| |l#0@@18|) (Byte__Order.__default.lt (U_2_int ($Unbox intType |$y#0@@0|)) |l#1@@19|)))) :qid |totalord.716:52| :skolemid |3329| :pattern ( (MapType0Select (|lambda#76| |l#0@@18| |l#1@@19|) |$y#0@@0|)) )))
(assert (forall ((|$y#1| T@U) (|l#0@@19| T@U) (|l#1@@20| T@U) (|l#2@@15| Int) ) (!  (=> (and (and (= (type |$y#1|) BoxType) (= (type |l#0@@19|) TyType)) (= (type |l#1@@20|) LayerTypeType)) (= (U_2_bool (MapType0Select (|lambda#77| |l#0@@19| |l#1@@20| |l#2@@15|) |$y#1|))  (and ($IsBox |$y#1| |l#0@@19|) (Byte__Order.__default.lte |l#1@@20| |l#2@@15| (U_2_int ($Unbox intType |$y#1|)))))) :qid |totalord.717:54| :skolemid |3330| :pattern ( (MapType0Select (|lambda#77| |l#0@@19| |l#1@@20| |l#2@@15|) |$y#1|)) )))
(assert (forall ((|$y#0@@1| T@U) (|l#0@@20| T@U) (|l#1@@21| T@U) ) (!  (=> (and (and (= (type |$y#0@@1|) BoxType) (= (type |l#0@@20|) TyType)) (= (type |l#1@@21|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#88| |l#0@@20| |l#1@@21|) |$y#0@@1|))  (and ($IsBox |$y#0@@1| |l#0@@20|) (|Seq#Contains| |l#1@@21| |$y#0@@1|)))) :qid |totalord.739:18| :skolemid |3331| :pattern ( (MapType0Select (|lambda#88| |l#0@@20| |l#1@@21|) |$y#0@@1|)) )))
(assert (forall ((|$y#0@@2| T@U) (|l#0@@21| T@U) (|l#1@@22| T@U) ) (!  (=> (and (and (= (type |$y#0@@2|) BoxType) (= (type |l#0@@21|) TyType)) (= (type |l#1@@22|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#92| |l#0@@21| |l#1@@22|) |$y#0@@2|))  (and ($IsBox |$y#0@@2| |l#0@@21|) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) |$y#0@@2|) |l#1@@22|)))) :qid |totalord.716:52| :skolemid |3332| :pattern ( (MapType0Select (|lambda#92| |l#0@@21| |l#1@@22|) |$y#0@@2|)) )))
(assert (forall ((|$y#1@@0| T@U) (|l#0@@22| T@U) (|l#1@@23| T@U) ) (!  (=> (and (and (= (type |$y#1@@0|) BoxType) (= (type |l#0@@22|) TyType)) (= (type |l#1@@23|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#93| |l#0@@22| |l#1@@23|) |$y#1@@0|))  (and ($IsBox |$y#1@@0| |l#0@@22|) (Lexicographic__Byte__Order.__default.lte |l#1@@23| ($Unbox (SeqType BoxType) |$y#1@@0|))))) :qid |totalord.717:54| :skolemid |3333| :pattern ( (MapType0Select (|lambda#93| |l#0@@22| |l#1@@23|) |$y#1@@0|)) )))
(assert (forall ((|$y#0@@3| T@U) (|l#0@@23| T@U) (|l#1@@24| Int) ) (!  (=> (and (= (type |$y#0@@3|) BoxType) (= (type |l#0@@23|) TyType)) (= (U_2_bool (MapType0Select (|lambda#108| |l#0@@23| |l#1@@24|) |$y#0@@3|))  (and ($IsBox |$y#0@@3| |l#0@@23|) (Integer__Order.__default.lt (U_2_int ($Unbox intType |$y#0@@3|)) |l#1@@24|)))) :qid |totalord.716:52| :skolemid |3334| :pattern ( (MapType0Select (|lambda#108| |l#0@@23| |l#1@@24|) |$y#0@@3|)) )))
(assert (forall ((|$y#1@@1| T@U) (|l#0@@24| T@U) (|l#1@@25| Int) ) (!  (=> (and (= (type |$y#1@@1|) BoxType) (= (type |l#0@@24|) TyType)) (= (U_2_bool (MapType0Select (|lambda#109| |l#0@@24| |l#1@@25|) |$y#1@@1|))  (and ($IsBox |$y#1@@1| |l#0@@24|) (Integer__Order.__default.lte |l#1@@25| (U_2_int ($Unbox intType |$y#1@@1|)))))) :qid |totalord.717:54| :skolemid |3335| :pattern ( (MapType0Select (|lambda#109| |l#0@@24| |l#1@@25|) |$y#1@@1|)) )))
(assert (forall ((|$y#0@@4| T@U) (|l#0@@25| T@U) (|l#1@@26| Int) ) (!  (=> (and (= (type |$y#0@@4|) BoxType) (= (type |l#0@@25|) TyType)) (= (U_2_bool (MapType0Select (|lambda#124| |l#0@@25| |l#1@@26|) |$y#0@@4|))  (and ($IsBox |$y#0@@4| |l#0@@25|) (Uint64__Order.__default.lt (U_2_int ($Unbox intType |$y#0@@4|)) |l#1@@26|)))) :qid |totalord.716:52| :skolemid |3336| :pattern ( (MapType0Select (|lambda#124| |l#0@@25| |l#1@@26|) |$y#0@@4|)) )))
(assert (forall ((|$y#1@@2| T@U) (|l#0@@26| T@U) (|l#1@@27| Int) ) (!  (=> (and (= (type |$y#1@@2|) BoxType) (= (type |l#0@@26|) TyType)) (= (U_2_bool (MapType0Select (|lambda#125| |l#0@@26| |l#1@@27|) |$y#1@@2|))  (and ($IsBox |$y#1@@2| |l#0@@26|) (Uint64__Order.__default.lte |l#1@@27| (U_2_int ($Unbox intType |$y#1@@2|)))))) :qid |totalord.717:54| :skolemid |3337| :pattern ( (MapType0Select (|lambda#125| |l#0@@26| |l#1@@27|) |$y#1@@2|)) )))
(assert (forall ((|$y#5| T@U) (|l#0@@27| T@U) (|l#1@@28| Int) (|l#2@@16| Int) (|l#3@@9| T@U) (|l#4@@4| T@U) (|l#5| T@U) (|l#6| T@U) ) (!  (=> (and (and (and (and (and (= (type |$y#5|) BoxType) (= (type |l#0@@27|) TyType)) (= (type |l#3@@9|) LayerTypeType)) (= (type |l#4@@4|) (SeqType BoxType))) (= (type |l#5|) LayerTypeType)) (= (type |l#6|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#142| |l#0@@27| |l#1@@28| |l#2@@16| |l#3@@9| |l#4@@4| |l#5| |l#6|) |$y#5|)) (exists ((|i#1@@79| Int) (|k#3@@3| T@U) ) (!  (and (= (type |k#3@@3|) (SeqType BoxType)) (and (and ($Is |k#3@@3| |l#0@@27|) (and (and (<= |l#1@@28| |i#1@@79|) (< |i#1@@79| |l#2@@16|)) (U_2_bool (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys |l#3@@9| ($Unbox DatatypeTypeType (|Seq#Index| |l#4@@4| |i#1@@79|))) ($Box |k#3@@3|))))) (= |$y#5| ($Box |k#3@@3|)))) :qid |BtreeMod.37:14| :skolemid |2943| :pattern ( (MapType0Select (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys |l#5| ($Unbox DatatypeTypeType (|Seq#Index| |l#6| |i#1@@79|))) ($Box |k#3@@3|))) )))) :qid |BtreeMod.37:10| :skolemid |3338| :pattern ( (MapType0Select (|lambda#142| |l#0@@27| |l#1@@28| |l#2@@16| |l#3@@9| |l#4@@4| |l#5| |l#6|) |$y#5|)) )))
(assert (forall ((|$w#0@@5| T@U) (|l#0@@28| T@U) (|l#1@@29| T@U) ) (!  (=> (and (and (= (type |$w#0@@5|) BoxType) (= (type |l#0@@28|) TyType)) (= (type |l#1@@29|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#146| |l#0@@28| |l#1@@29|) |$w#0@@5|))  (and ($Is ($Unbox (SeqType BoxType) |$w#0@@5|) |l#0@@28|) (|Seq#Contains| |l#1@@29| |$w#0@@5|)))) :qid |BtreeMod.92:7| :skolemid |3339| :pattern ( (MapType0Select (|lambda#146| |l#0@@28| |l#1@@29|) |$w#0@@5|)) )))
(assert (forall ((|$w#0@@6| T@U) (|l#0@@29| T@U) (|l#1@@30| T@U) (|l#2@@17| T@U) ) (!  (=> (and (and (and (= (type |$w#0@@6|) BoxType) (= (type |l#0@@29|) (SeqType BoxType))) (= (type |l#1@@30|) LayerTypeType)) (= (type |l#2@@17|) (SeqType BoxType))) (= (MapType0Select (|lambda#147| |l#0@@29| |l#1@@30| |l#2@@17|) |$w#0@@6|) (|Seq#Index| |l#0@@29| (Lexicographic__Byte__Order.__default.LargestLte |l#1@@30| |l#2@@17| ($Unbox (SeqType BoxType) |$w#0@@6|))))) :qid |BtreeMod.92:7| :skolemid |3340| :pattern ( (MapType0Select (|lambda#147| |l#0@@29| |l#1@@30| |l#2@@17|) |$w#0@@6|)) )))
(assert (forall ((|$w#1@@2| T@U) (|l#0@@30| T@U) (|l#1@@31| T@U) (|l#2@@18| T@U) (|l#3@@10| T@U) (|l#4@@5| T@U) (|l#5@@0| T@U) (|l#6@@0| Int) ) (!  (=> (and (and (and (and (and (and (= (type |$w#1@@2|) BoxType) (= (type |l#0@@30|) TyType)) (= (type |l#1@@31|) (MapType0Type BoxType boolType))) (= (type |l#2@@18|) LayerTypeType)) (= (type |l#3@@10|) (SeqType BoxType))) (= (type |l#4@@5|) LayerTypeType)) (= (type |l#5@@0|) (SeqType BoxType))) (= (U_2_bool (MapType0Select (|lambda#148| |l#0@@30| |l#1@@31| |l#2@@18| |l#3@@10| |l#4@@5| |l#5@@0| |l#6@@0|) |$w#1@@2|))  (and ($Is ($Unbox (SeqType BoxType) |$w#1@@2|) |l#0@@30|) (and (U_2_bool (MapType0Select |l#1@@31| |$w#1@@2|)) (U_2_bool (MapType0Select (|Map#Domain| (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation |l#2@@18| ($Unbox DatatypeTypeType (|Seq#Index| |l#3@@10| (+ (Lexicographic__Byte__Order.__default.LargestLte |l#4@@5| |l#5@@0| ($Unbox (SeqType BoxType) |$w#1@@2|)) |l#6@@0|))))) |$w#1@@2|)))))) :qid |BtreeMod.94:7| :skolemid |3341| :pattern ( (MapType0Select (|lambda#148| |l#0@@30| |l#1@@31| |l#2@@18| |l#3@@10| |l#4@@5| |l#5@@0| |l#6@@0|) |$w#1@@2|)) )))
(assert (forall ((|$w#1@@3| T@U) (|l#0@@31| T@U) (|l#1@@32| T@U) (|l#2@@19| T@U) (|l#3@@11| T@U) (|l#4@@6| Int) ) (!  (=> (and (and (and (and (= (type |$w#1@@3|) BoxType) (= (type |l#0@@31|) LayerTypeType)) (= (type |l#1@@32|) (SeqType BoxType))) (= (type |l#2@@19|) LayerTypeType)) (= (type |l#3@@11|) (SeqType BoxType))) (= (MapType0Select (|lambda#149| |l#0@@31| |l#1@@32| |l#2@@19| |l#3@@11| |l#4@@6|) |$w#1@@3|) (MapType0Select (|Map#Elements| (MutableBtreeBulkOperations.MB.Model.Abs.__default.Interpretation |l#0@@31| ($Unbox DatatypeTypeType (|Seq#Index| |l#1@@32| (+ (Lexicographic__Byte__Order.__default.LargestLte |l#2@@19| |l#3@@11| ($Unbox (SeqType BoxType) |$w#1@@3|)) |l#4@@6|))))) |$w#1@@3|))) :qid |BtreeMod.94:7| :skolemid |3342| :pattern ( (MapType0Select (|lambda#149| |l#0@@31| |l#1@@32| |l#2@@19| |l#3@@11| |l#4@@6|) |$w#1@@3|)) )))
(assert (forall ((|$y#0@@5| T@U) (|l#0@@32| T@U) (|l#1@@33| Int) (|l#2@@20| Int) (|l#3@@12| T@U) (|l#4@@7| T@U) (|l#5@@1| T@U) (|l#6@@1| T@U) (|l#7| T@U) (|l#8| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |$y#0@@5|) BoxType) (= (type |l#0@@32|) TyType)) (= (type |l#3@@12|) (MapType0Type refType MapType1Type))) (= (type |l#4@@7|) (SeqType BoxType))) (= (type |l#5@@1|) (FieldType (MapType0Type BoxType boolType)))) (= (type |l#6@@1|) (MapType0Type refType MapType1Type))) (= (type |l#7|) (SeqType BoxType))) (= (type |l#8|) (FieldType (MapType0Type BoxType boolType)))) (= (U_2_bool (MapType0Select (|lambda#154| |l#0@@32| |l#1@@33| |l#2@@20| |l#3@@12| |l#4@@7| |l#5@@1| |l#6@@1| |l#7| |l#8|) |$y#0@@5|)) (exists ((|i#1@@80| Int) (|o#0@@7| T@U) ) (!  (and (= (type |o#0@@7|) refType) (and (and ($Is |o#0@@7| |l#0@@32|) (and (and (<= |l#1@@33| |i#1@@80|) (< |i#1@@80| |l#2@@20|)) (U_2_bool (MapType0Select (MapType1Select (MapType0Select |l#3@@12| ($Unbox refType (|Seq#Index| |l#4@@7| |i#1@@80|))) |l#5@@1|) ($Box |o#0@@7|))))) (= |$y#0@@5| ($Box |o#0@@7|)))) :qid |MutableB.80:9| :skolemid |3178| :pattern ( (MapType0Select (MapType1Select (MapType0Select |l#6@@1| ($Unbox refType (|Seq#Index| |l#7| |i#1@@80|))) |l#8|) ($Box |o#0@@7|))) )))) :qid |MutableB.80:5| :skolemid |3343| :pattern ( (MapType0Select (|lambda#154| |l#0@@32| |l#1@@33| |l#2@@20| |l#3@@12| |l#4@@7| |l#5@@1| |l#6@@1| |l#7| |l#8|) |$y#0@@5|)) )))
(declare-fun $Heap@2 () T@U)
(declare-fun |node#0@@101| () T@U)
(declare-fun |##nodes#1_0@1| () T@U)
(declare-fun |##parentRepr#1_0@1| () T@U)
(declare-fun StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.SeqRepr () T@U)
(declare-fun StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I () T@U)
(declare-fun |nodes##1_0@1| () T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun TType () T@T)
(declare-fun type@@0 (T@U) T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun |nodes##1_1@1| () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun StartFuelAssert_Sequences._default.Flatten () T@U)
(declare-fun StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq () T@U)
(declare-fun $Heap@6 () T@U)
(declare-fun |node##1_1@1| () T@U)
(declare-fun |keys#0| () T@U)
(declare-fun |values#0| () T@U)
(declare-fun $Heap@@137 () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys () T@U)
(declare-fun $Heap@7 () T@U)
(declare-fun $Heap@8 () T@U)
(declare-fun MoreFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq0 () T@U)
(declare-fun $Heap@11 () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun |##nodes#0@0| () T@U)
(declare-fun |##nodes#1@0| () T@U)
(declare-fun |##seqs#0@0| () T@U)
(declare-fun |##nodes#2@0| () T@U)
(declare-fun |##seqs#1@0| () T@U)
(declare-fun $Heap@9 () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun MoreFuel_MutableBtreeBulkOperations.MB.Abs._default.I0 () T@U)
(declare-fun $Heap@10 () T@U)
(declare-fun |src##0_0@0| () T@U)
(declare-fun call0formal@NativeArrays._default.CopyArrayIntoDifferentArray$A@0 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun |src##0_1@0| () T@U)
(declare-fun StartFuelAssert_SeqComparison._default.lte () T@U)
(declare-fun StartFuel_Sequences._default.NoDupes () T@U)
(declare-fun StartFuelAssert_Sequences._default.NoDupes () T@U)
(declare-fun StartFuel_Sequences._default.Range () T@U)
(declare-fun StartFuelAssert_Sequences._default.Range () T@U)
(declare-fun StartFuel_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuelAssert_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuel_Sequences._default.remove () T@U)
(declare-fun StartFuelAssert_Sequences._default.remove () T@U)
(declare-fun StartFuelAssert_Sequences._default.insert () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuel_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuel_Sequences._default.concat () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat () T@U)
(declare-fun StartFuel_Sequences._default.concat3 () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat3 () T@U)
(declare-fun StartFuel_Sequences._default.concatSeq () T@U)
(declare-fun StartFuelAssert_Sequences._default.concatSeq () T@U)
(declare-fun StartFuel_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuel_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuel_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuel_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_Sequences._default.fill () T@U)
(declare-fun StartFuel_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuel_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.IMapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnion () T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.lte () T@U)
(declare-fun StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuel_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuel_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.minimum () T@U)
(declare-fun StartFuel_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.maximum () T@U)
(declare-fun StartFuel_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.minimum () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.maximum () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuel_Integer_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuelAssert_Integer_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuel_Integer_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuelAssert_Integer_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuel_Integer_Order._default.NotMinimum () T@U)
(declare-fun StartFuelAssert_Integer_Order._default.NotMinimum () T@U)
(declare-fun StartFuel_Integer_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Integer_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Integer_Order._default.minimum () T@U)
(declare-fun StartFuel_Integer_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Integer_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Integer_Order._default.maximum () T@U)
(declare-fun StartFuel_Integer_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Integer_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Integer_Order._default.IsStrictlySorted () T@U)
(declare-fun StartFuel_Uint64_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuelAssert_Uint64_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuel_Uint64_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuelAssert_Uint64_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuel_Uint64_Order._default.NotMinimum () T@U)
(declare-fun StartFuelAssert_Uint64_Order._default.NotMinimum () T@U)
(declare-fun StartFuel_Uint64_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Uint64_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Uint64_Order._default.minimum () T@U)
(declare-fun StartFuel_Uint64_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Uint64_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Uint64_Order._default.maximum () T@U)
(declare-fun StartFuel_Uint64_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Uint64_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Uint64_Order._default.IsStrictlySorted () T@U)
(declare-fun StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.Interpretation () T@U)
(declare-fun %lbl%+0 () Bool)
(declare-fun %lbl%@1 () Bool)
(declare-fun $o@@79 () T@U)
(declare-fun $f@@29 () T@U)
(declare-fun %lbl%@2 () Bool)
(declare-fun $o@@80 () T@U)
(declare-fun $f@@30 () T@U)
(declare-fun %lbl%@3 () Bool)
(declare-fun |nextstart#0@0| () Int)
(declare-fun |start#0| () Int)
(declare-fun %lbl%@4 () Bool)
(declare-fun %lbl%+5 () Bool)
(declare-fun |i#63@1| () Int)
(declare-fun %lbl%@6 () Bool)
(declare-fun |nextstart#0@1| () Int)
(declare-fun %lbl%@7 () Bool)
(declare-fun %lbl%@8 () Bool)
(declare-fun %lbl%@9 () Bool)
(declare-fun %lbl%@10 () Bool)
(declare-fun %lbl%@11 () Bool)
(declare-fun %lbl%@12 () Bool)
(declare-fun %lbl%@13 () Bool)
(declare-fun %lbl%@14 () Bool)
(declare-fun %lbl%@15 () Bool)
(declare-fun %lbl%@16 () Bool)
(declare-fun %lbl%@17 () Bool)
(declare-fun %lbl%@18 () Bool)
(declare-fun %lbl%@19 () Bool)
(declare-fun %lbl%@20 () Bool)
(declare-fun %lbl%@21 () Bool)
(declare-fun %lbl%@22 () Bool)
(declare-fun %lbl%@23 () Bool)
(declare-fun %lbl%@24 () Bool)
(declare-fun %lbl%@25 () Bool)
(declare-fun %lbl%@26 () Bool)
(declare-fun %lbl%@27 () Bool)
(declare-fun %lbl%@28 () Bool)
(declare-fun %lbl%@29 () Bool)
(declare-fun %lbl%@30 () Bool)
(declare-fun %lbl%@31 () Bool)
(declare-fun %lbl%@32 () Bool)
(declare-fun %lbl%@33 () Bool)
(declare-fun %lbl%@34 () Bool)
(declare-fun %lbl%@35 () Bool)
(declare-fun %lbl%@36 () Bool)
(declare-fun %lbl%@37 () Bool)
(declare-fun %lbl%@38 () Bool)
(declare-fun %lbl%@39 () Bool)
(declare-fun %lbl%@40 () Bool)
(declare-fun %lbl%@41 () Bool)
(declare-fun %lbl%@42 () Bool)
(declare-fun %lbl%@43 () Bool)
(declare-fun %lbl%@44 () Bool)
(declare-fun %lbl%@45 () Bool)
(declare-fun %lbl%@46 () Bool)
(declare-fun %lbl%@47 () Bool)
(declare-fun %lbl%@48 () Bool)
(declare-fun %lbl%@49 () Bool)
(declare-fun %lbl%@50 () Bool)
(declare-fun %lbl%@51 () Bool)
(declare-fun %lbl%@52 () Bool)
(declare-fun %lbl%@53 () Bool)
(declare-fun %lbl%@54 () Bool)
(declare-fun %lbl%@55 () Bool)
(declare-fun %lbl%@56 () Bool)
(declare-fun %lbl%@57 () Bool)
(declare-fun %lbl%@58 () Bool)
(declare-fun %lbl%@59 () Bool)
(declare-fun %lbl%@60 () Bool)
(declare-fun %lbl%@61 () Bool)
(declare-fun %lbl%@62 () Bool)
(declare-fun %lbl%@63 () Bool)
(declare-fun %lbl%@64 () Bool)
(declare-fun %lbl%@65 () Bool)
(declare-fun %lbl%@66 () Bool)
(declare-fun %lbl%@67 () Bool)
(declare-fun %lbl%@68 () Bool)
(declare-fun %lbl%@69 () Bool)
(declare-fun %lbl%@70 () Bool)
(declare-fun %lbl%@71 () Bool)
(declare-fun %lbl%@72 () Bool)
(declare-fun %lbl%@73 () Bool)
(declare-fun %lbl%@74 () Bool)
(declare-fun %lbl%@75 () Bool)
(declare-fun %lbl%@76 () Bool)
(declare-fun %lbl%@77 () Bool)
(declare-fun %lbl%@78 () Bool)
(declare-fun %lbl%@79 () Bool)
(declare-fun %lbl%@80 () Bool)
(declare-fun %lbl%@81 () Bool)
(declare-fun %lbl%@82 () Bool)
(declare-fun %lbl%@83 () Bool)
(declare-fun %lbl%@84 () Bool)
(declare-fun %lbl%@85 () Bool)
(declare-fun %lbl%@86 () Bool)
(declare-fun %lbl%@87 () Bool)
(declare-fun %lbl%@88 () Bool)
(declare-fun %lbl%@89 () Bool)
(declare-fun %lbl%@90 () Bool)
(declare-fun %lbl%@91 () Bool)
(declare-fun %lbl%@92 () Bool)
(declare-fun %lbl%@93 () Bool)
(declare-fun %lbl%@94 () Bool)
(declare-fun %lbl%@95 () Bool)
(declare-fun %lbl%@96 () Bool)
(declare-fun %lbl%@97 () Bool)
(declare-fun %lbl%@98 () Bool)
(declare-fun %lbl%@99 () Bool)
(declare-fun %lbl%@100 () Bool)
(declare-fun %lbl%@101 () Bool)
(declare-fun %lbl%@102 () Bool)
(declare-fun %lbl%+103 () Bool)
(declare-fun %lbl%+104 () Bool)
(declare-fun %lbl%@105 () Bool)
(declare-fun %lbl%@106 () Bool)
(declare-fun %lbl%+107 () Bool)
(declare-fun |$w$loop#0@0| () Bool)
(declare-fun |newtype$check#5@0| () Int)
(declare-fun %lbl%@108 () Bool)
(declare-fun %lbl%+109 () Bool)
(declare-fun %lbl%@110 () Bool)
(declare-fun |nextstart#0@2| () Int)
(declare-fun %lbl%@111 () Bool)
(declare-fun %lbl%@112 () Bool)
(declare-fun %lbl%@113 () Bool)
(declare-fun %lbl%@114 () Bool)
(declare-fun %lbl%@115 () Bool)
(declare-fun %lbl%@116 () Bool)
(declare-fun %lbl%+117 () Bool)
(declare-fun %lbl%+118 () Bool)
(declare-fun %lbl%@119 () Bool)
(declare-fun %lbl%@120 () Bool)
(declare-fun |newtype$check#0_0@0| () Int)
(declare-fun %lbl%@121 () Bool)
(declare-fun |srcIndex##0_0@0| () Int)
(declare-fun %lbl%@122 () Bool)
(declare-fun %lbl%@123 () Bool)
(declare-fun |len##0_0@0| () Int)
(declare-fun %lbl%@124 () Bool)
(declare-fun $o@@81 () T@U)
(declare-fun $f@@31 () T@U)
(declare-fun %lbl%@125 () Bool)
(declare-fun %lbl%@126 () Bool)
(declare-fun %lbl%@127 () Bool)
(declare-fun %lbl%@128 () Bool)
(declare-fun %lbl%@129 () Bool)
(declare-fun |newtype$check#0_1@0| () Int)
(declare-fun %lbl%@130 () Bool)
(declare-fun |srcIndex##0_1@0| () Int)
(declare-fun %lbl%@131 () Bool)
(declare-fun %lbl%@132 () Bool)
(declare-fun |len##0_1@0| () Int)
(declare-fun %lbl%@133 () Bool)
(declare-fun $o@@82 () T@U)
(declare-fun $f@@32 () T@U)
(declare-fun %lbl%@134 () Bool)
(declare-fun %lbl%@135 () Bool)
(declare-fun %lbl%@136 () Bool)
(declare-fun %lbl%@137 () Bool)
(declare-fun %lbl%@138 () Bool)
(declare-fun |newtype$check#0_2@0| () Int)
(declare-fun %lbl%@139 () Bool)
(declare-fun %lbl%+140 () Bool)
(declare-fun %lbl%@141 () Bool)
(declare-fun %lbl%@142 () Bool)
(declare-fun %lbl%@143 () Bool)
(declare-fun %lbl%@144 () Bool)
(declare-fun %lbl%@145 () Bool)
(declare-fun %lbl%@146 () Bool)
(declare-fun %lbl%@147 () Bool)
(declare-fun %lbl%@148 () Bool)
(declare-fun %lbl%@149 () Bool)
(declare-fun %lbl%@150 () Bool)
(declare-fun %lbl%@151 () Bool)
(declare-fun %lbl%@152 () Bool)
(declare-fun %lbl%@153 () Bool)
(declare-fun %lbl%@154 () Bool)
(declare-fun %lbl%@155 () Bool)
(declare-fun %lbl%@156 () Bool)
(declare-fun %lbl%@157 () Bool)
(declare-fun %lbl%@158 () Bool)
(declare-fun %lbl%@159 () Bool)
(declare-fun %lbl%@160 () Bool)
(declare-fun %lbl%@161 () Bool)
(declare-fun %lbl%@162 () Bool)
(declare-fun %lbl%@163 () Bool)
(declare-fun %lbl%@164 () Bool)
(declare-fun %lbl%@165 () Bool)
(declare-fun %lbl%@166 () Bool)
(declare-fun %lbl%@167 () Bool)
(declare-fun %lbl%@168 () Bool)
(declare-fun %lbl%@169 () Bool)
(declare-fun %lbl%@170 () Bool)
(declare-fun %lbl%@171 () Bool)
(declare-fun %lbl%@172 () Bool)
(declare-fun %lbl%@173 () Bool)
(declare-fun %lbl%@174 () Bool)
(declare-fun %lbl%@175 () Bool)
(declare-fun %lbl%@176 () Bool)
(declare-fun %lbl%@177 () Bool)
(declare-fun %lbl%@178 () Bool)
(declare-fun %lbl%@179 () Bool)
(declare-fun %lbl%@180 () Bool)
(declare-fun %lbl%@181 () Bool)
(declare-fun %lbl%@182 () Bool)
(declare-fun %lbl%@183 () Bool)
(declare-fun %lbl%@184 () Bool)
(declare-fun %lbl%@185 () Bool)
(declare-fun %lbl%@186 () Bool)
(declare-fun %lbl%@187 () Bool)
(declare-fun $o@@83 () T@U)
(declare-fun $f@@33 () T@U)
(declare-fun %lbl%+188 () Bool)
(declare-fun |$decr$loop#00@1| () Int)
(declare-fun %lbl%@189 () Bool)
(declare-fun %lbl%@190 () Bool)
(declare-fun %lbl%@191 () Bool)
(declare-fun %lbl%@192 () Bool)
(declare-fun %lbl%@193 () Bool)
(declare-fun %lbl%@194 () Bool)
(declare-fun %lbl%@195 () Bool)
(declare-fun %lbl%@196 () Bool)
(declare-fun %lbl%@197 () Bool)
(declare-fun |##parentHeight#1_0@1| () Int)
(declare-fun %lbl%@198 () Bool)
(declare-fun %lbl%@199 () Bool)
(declare-fun %lbl%@200 () Bool)
(declare-fun %lbl%@201 () Bool)
(declare-fun %lbl%@202 () Bool)
(declare-fun %lbl%@203 () Bool)
(declare-fun %lbl%@204 () Bool)
(declare-fun %lbl%@205 () Bool)
(declare-fun %lbl%@206 () Bool)
(declare-fun %lbl%@207 () Bool)
(declare-fun %lbl%@208 () Bool)
(declare-fun %lbl%@209 () Bool)
(declare-fun %lbl%@210 () Bool)
(declare-fun %lbl%@211 () Bool)
(declare-fun %lbl%@212 () Bool)
(declare-fun %lbl%@213 () Bool)
(declare-fun %lbl%@214 () Bool)
(declare-fun %lbl%@215 () Bool)
(declare-fun %lbl%@216 () Bool)
(declare-fun %lbl%@217 () Bool)
(declare-fun %lbl%@218 () Bool)
(declare-fun %lbl%@219 () Bool)
(declare-fun %lbl%@220 () Bool)
(declare-fun %lbl%@221 () Bool)
(declare-fun %lbl%@222 () Bool)
(declare-fun |newtype$check#1_0@1| () Int)
(declare-fun %lbl%@223 () Bool)
(declare-fun |newtype$check#1_1@1| () Int)
(declare-fun %lbl%@224 () Bool)
(declare-fun %lbl%@225 () Bool)
(declare-fun %lbl%@226 () Bool)
(declare-fun %lbl%@227 () Bool)
(declare-fun %lbl%@228 () Bool)
(declare-fun %lbl%@229 () Bool)
(declare-fun %lbl%@230 () Bool)
(declare-fun %lbl%@231 () Bool)
(declare-fun %lbl%@232 () Bool)
(declare-fun %lbl%@233 () Bool)
(declare-fun %lbl%@234 () Bool)
(declare-fun %lbl%@235 () Bool)
(declare-fun %lbl%@236 () Bool)
(declare-fun %lbl%@237 () Bool)
(declare-fun %lbl%@238 () Bool)
(declare-fun %lbl%@239 () Bool)
(declare-fun %lbl%@240 () Bool)
(declare-fun %lbl%@241 () Bool)
(declare-fun %lbl%@242 () Bool)
(declare-fun %lbl%@243 () Bool)
(declare-fun %lbl%@244 () Bool)
(declare-fun %lbl%@245 () Bool)
(declare-fun %lbl%@246 () Bool)
(declare-fun %lbl%@247 () Bool)
(declare-fun %lbl%@248 () Bool)
(declare-fun %lbl%@249 () Bool)
(declare-fun %lbl%@250 () Bool)
(declare-fun %lbl%@251 () Bool)
(declare-fun %lbl%@252 () Bool)
(declare-fun %lbl%@253 () Bool)
(declare-fun %lbl%@254 () Bool)
(declare-fun %lbl%@255 () Bool)
(declare-fun %lbl%@256 () Bool)
(declare-fun %lbl%@257 () Bool)
(declare-fun %lbl%@258 () Bool)
(declare-fun %lbl%@259 () Bool)
(declare-fun %lbl%@260 () Bool)
(declare-fun %lbl%@261 () Bool)
(declare-fun %lbl%@262 () Bool)
(declare-fun %lbl%@263 () Bool)
(declare-fun %lbl%@264 () Bool)
(declare-fun %lbl%@265 () Bool)
(declare-fun %lbl%@266 () Bool)
(declare-fun %lbl%@267 () Bool)
(declare-fun %lbl%@268 () Bool)
(declare-fun %lbl%@269 () Bool)
(declare-fun %lbl%@270 () Bool)
(declare-fun |newtype$check#1_2@1| () Int)
(declare-fun %lbl%@271 () Bool)
(declare-fun |newtype$check#1_3@1| () Int)
(declare-fun %lbl%@272 () Bool)
(declare-fun |prefix##1_0@1| () Int)
(declare-fun %lbl%@273 () Bool)
(declare-fun $o@@84 () T@U)
(declare-fun $f@@34 () T@U)
(declare-fun %lbl%@274 () Bool)
(declare-fun %lbl%@275 () Bool)
(declare-fun %lbl%@276 () Bool)
(declare-fun %lbl%@277 () Bool)
(declare-fun %lbl%@278 () Bool)
(declare-fun %lbl%@279 () Bool)
(declare-fun %lbl%@280 () Bool)
(declare-fun %lbl%@281 () Bool)
(declare-fun %lbl%@282 () Bool)
(declare-fun %lbl%@283 () Bool)
(declare-fun %lbl%@284 () Bool)
(declare-fun %lbl%@285 () Bool)
(declare-fun %lbl%@286 () Bool)
(declare-fun %lbl%@287 () Bool)
(declare-fun %lbl%@288 () Bool)
(declare-fun %lbl%@289 () Bool)
(declare-fun %lbl%@290 () Bool)
(declare-fun %lbl%@291 () Bool)
(declare-fun %lbl%@292 () Bool)
(declare-fun %lbl%@293 () Bool)
(declare-fun %lbl%@294 () Bool)
(declare-fun %lbl%@295 () Bool)
(declare-fun %lbl%@296 () Bool)
(declare-fun %lbl%@297 () Bool)
(declare-fun |newtype$check#1_4@1| () Int)
(declare-fun %lbl%@298 () Bool)
(declare-fun |newtype$check#1_5@1| () Int)
(declare-fun %lbl%@299 () Bool)
(declare-fun %lbl%@300 () Bool)
(declare-fun %lbl%@301 () Bool)
(declare-fun $o@@85 () T@U)
(declare-fun $f@@35 () T@U)
(declare-fun %lbl%@302 () Bool)
(declare-fun %lbl%@303 () Bool)
(declare-fun %lbl%@304 () Bool)
(declare-fun $o@@86 () T@U)
(declare-fun $f@@36 () T@U)
(declare-fun %lbl%@305 () Bool)
(declare-fun %lbl%@306 () Bool)
(declare-fun %lbl%@307 () Bool)
(declare-fun %lbl%@308 () Bool)
(declare-fun %lbl%@309 () Bool)
(declare-fun %lbl%@310 () Bool)
(declare-fun %lbl%@311 () Bool)
(declare-fun %lbl%@312 () Bool)
(declare-fun %lbl%@313 () Bool)
(declare-fun %lbl%@314 () Bool)
(declare-fun %lbl%@315 () Bool)
(declare-fun %lbl%@316 () Bool)
(declare-fun %lbl%@317 () Bool)
(declare-fun %lbl%@318 () Bool)
(declare-fun %lbl%@319 () Bool)
(declare-fun %lbl%@320 () Bool)
(declare-fun %lbl%@321 () Bool)
(declare-fun %lbl%@322 () Bool)
(declare-fun %lbl%@323 () Bool)
(declare-fun %lbl%@324 () Bool)
(declare-fun %lbl%@325 () Bool)
(declare-fun %lbl%@326 () Bool)
(declare-fun %lbl%@327 () Bool)
(declare-fun %lbl%@328 () Bool)
(declare-fun %lbl%@329 () Bool)
(declare-fun %lbl%@330 () Bool)
(declare-fun %lbl%@331 () Bool)
(declare-fun %lbl%@332 () Bool)
(declare-fun %lbl%@333 () Bool)
(declare-fun $o@@87 () T@U)
(declare-fun $f@@37 () T@U)
(declare-fun %lbl%@334 () Bool)
(declare-fun %lbl%@335 () Bool)
(declare-fun |call6formal@nextstart#0| () Int)
(declare-fun %lbl%@336 () Bool)
(declare-fun %lbl%@337 () Bool)
(declare-fun %lbl%@338 () Bool)
(declare-fun %lbl%@339 () Bool)
(declare-fun %lbl%@340 () Bool)
(declare-fun %lbl%@341 () Bool)
(declare-fun %lbl%@342 () Bool)
(declare-fun %lbl%@343 () Bool)
(declare-fun %lbl%@344 () Bool)
(declare-fun %lbl%@345 () Bool)
(declare-fun %lbl%@346 () Bool)
(declare-fun %lbl%@347 () Bool)
(declare-fun %lbl%@348 () Bool)
(declare-fun %lbl%@349 () Bool)
(declare-fun %lbl%@350 () Bool)
(declare-fun %lbl%@351 () Bool)
(declare-fun %lbl%@352 () Bool)
(declare-fun %lbl%@353 () Bool)
(declare-fun %lbl%@354 () Bool)
(declare-fun %lbl%@355 () Bool)
(declare-fun %lbl%@356 () Bool)
(declare-fun %lbl%@357 () Bool)
(declare-fun %lbl%@358 () Bool)
(declare-fun %lbl%@359 () Bool)
(declare-fun %lbl%@360 () Bool)
(declare-fun %lbl%@361 () Bool)
(declare-fun %lbl%@362 () Bool)
(declare-fun %lbl%@363 () Bool)
(declare-fun %lbl%@364 () Bool)
(declare-fun %lbl%@365 () Bool)
(declare-fun %lbl%@366 () Bool)
(declare-fun %lbl%@367 () Bool)
(declare-fun %lbl%@368 () Bool)
(declare-fun %lbl%@369 () Bool)
(declare-fun |call6formal@nextstart#0@0| () Int)
(declare-fun |newtype$check#1_6@1| () Int)
(declare-fun %lbl%@370 () Bool)
(declare-fun |newtype$check#1_7@1| () Int)
(declare-fun %lbl%@371 () Bool)
(declare-fun |i#63@2| () Int)
(declare-fun %lbl%@372 () Bool)
(declare-fun $o@@88 () T@U)
(declare-fun $f@@38 () T@U)
(declare-fun %lbl%@373 () Bool)
(declare-fun %lbl%@374 () Bool)
(declare-fun %lbl%@375 () Bool)
(declare-fun %lbl%@376 () Bool)
(declare-fun %lbl%@377 () Bool)
(declare-fun %lbl%@378 () Bool)
(declare-fun %lbl%@379 () Bool)
(declare-fun %lbl%@380 () Bool)
(declare-fun %lbl%@381 () Bool)
(declare-fun %lbl%@382 () Bool)
(declare-fun %lbl%@383 () Bool)
(declare-fun %lbl%@384 () Bool)
(declare-fun %lbl%+385 () Bool)
(declare-fun %lbl%@386 () Bool)
(declare-fun %lbl%@387 () Bool)
(declare-fun %lbl%+388 () Bool)
(declare-fun %lbl%+389 () Bool)
(declare-fun %lbl%+390 () Bool)
(declare-fun |$rhs##1_0@0| () Int)
(declare-fun |newtype$check#4@0| () Int)
(declare-fun |$decr_init$loop#00@0| () Int)
(declare-fun %lbl%+391 () Bool)
(declare-fun %lbl%@392 () Bool)
(declare-fun |i#63@0| () Int)
(declare-fun %lbl%@393 () Bool)
(declare-fun %lbl%@394 () Bool)
(declare-fun %lbl%@395 () Bool)
(declare-fun %lbl%@396 () Bool)
(declare-fun %lbl%@397 () Bool)
(declare-fun %lbl%@398 () Bool)
(declare-fun %lbl%@399 () Bool)
(declare-fun %lbl%@400 () Bool)
(declare-fun %lbl%@401 () Bool)
(declare-fun %lbl%@402 () Bool)
(declare-fun %lbl%+403 () Bool)
(declare-fun %lbl%@404 () Bool)
(declare-fun %lbl%+405 () Bool)
(declare-fun |nextstart#0| () Int)
(declare-fun |i#63| () Int)
(declare-fun |$rhs##1_0| () Int)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type $Heap@2) (MapType0Type refType MapType1Type)) (= (type |node#0@@101|) refType)) (= (type |##nodes#1_0@1|) (SeqType BoxType))) (= (type |##parentRepr#1_0@1|) (MapType0Type BoxType boolType))) (= (type StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.SeqRepr) LayerTypeType)) (= (type StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I) LayerTypeType)) (= (type |nodes##1_0@1|) (SeqType BoxType))) (= (type $_Frame@0) (MapType6Type refType boolType))) (= (Ctor TType) 26)) (forall ((arg0@@382 T@U) ) (! (= (type (type@@0 arg0@@382)) TType) :qid |funType:type| :pattern ( (type@@0 arg0@@382)) ))) (= (type $Heap@4) (MapType0Type refType MapType1Type))) (= (type |nodes##1_1@1|) (SeqType BoxType))) (= (type $Heap@5) (MapType0Type refType MapType1Type))) (= (type StartFuelAssert_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq) LayerTypeType)) (= (type $Heap@6) (MapType0Type refType MapType1Type))) (= (type |node##1_1@1|) refType)) (= (type |keys#0|) refType)) (= (type |values#0|) refType)) (= (type $Heap@@137) (MapType0Type refType MapType1Type))) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted) LayerTypeType)) (= (type StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys) LayerTypeType)) (= (type $Heap@7) (MapType0Type refType MapType1Type))) (= (type $Heap@8) (MapType0Type refType MapType1Type))) (= (type MoreFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq0) LayerTypeType)) (= (type $Heap@11) (MapType0Type refType MapType1Type))) (= (type $Heap@3) (MapType0Type refType MapType1Type))) (= (type |##nodes#0@0|) (SeqType BoxType))) (= (type |##nodes#1@0|) (SeqType BoxType))) (= (type |##seqs#0@0|) (SeqType BoxType))) (= (type |##nodes#2@0|) (SeqType BoxType))) (= (type |##seqs#1@0|) (SeqType BoxType))) (= (type $Heap@9) (MapType0Type refType MapType1Type))) (= (type $Heap@1) (MapType0Type refType MapType1Type))) (= (type MoreFuel_MutableBtreeBulkOperations.MB.Abs._default.I0) LayerTypeType)) (= (type $Heap@10) (MapType0Type refType MapType1Type))) (= (type |src##0_0@0|) refType)) (= (type call0formal@NativeArrays._default.CopyArrayIntoDifferentArray$A@0) TyType)) (= (type $Heap@0) (MapType0Type refType MapType1Type))) (= (type |src##0_1@0|) refType)) (= (type StartFuelAssert_SeqComparison._default.lte) LayerTypeType)) (= (type StartFuel_Sequences._default.NoDupes) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.NoDupes) LayerTypeType)) (= (type StartFuel_Sequences._default.Range) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Range) LayerTypeType)) (= (type StartFuel_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuel_Sequences._default.remove) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.remove) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.insert) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuel_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuel_Sequences._default.concat) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat) LayerTypeType)) (= (type StartFuel_Sequences._default.concat3) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat3) LayerTypeType)) (= (type StartFuel_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuel_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuel_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexIterate) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuel_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuel_Sequences._default.fill) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.fill) LayerTypeType)) (= (type StartFuel_Maps._default.MapRemoveStrong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemoveStrong) LayerTypeType)) (= (type StartFuel_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuel_Maps._default.IMapRemove) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove) LayerTypeType)) (= (type StartFuel_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuel_Maps._default.MapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuel_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.lte) LayerTypeType)) (= (type StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuel_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuel_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.minimum) LayerTypeType)) (= (type StartFuel_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.maximum) LayerTypeType)) (= (type StartFuel_Byte_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.IsStrictlySorted) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.minimum) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.maximum) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuel_Integer_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuelAssert_Integer_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuel_Integer_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuelAssert_Integer_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuel_Integer_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuelAssert_Integer_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuel_Integer_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Integer_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Integer_Order._default.minimum) LayerTypeType)) (= (type StartFuel_Integer_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Integer_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Integer_Order._default.maximum) LayerTypeType)) (= (type StartFuel_Integer_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Integer_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Integer_Order._default.IsStrictlySorted) LayerTypeType)) (= (type StartFuel_Uint64_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuelAssert_Uint64_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuel_Uint64_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuelAssert_Uint64_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuel_Uint64_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuelAssert_Uint64_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuel_Uint64_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Uint64_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Uint64_Order._default.minimum) LayerTypeType)) (= (type StartFuel_Uint64_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Uint64_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Uint64_Order._default.maximum) LayerTypeType)) (= (type StartFuel_Uint64_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Uint64_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Uint64_Order._default.IsStrictlySorted) LayerTypeType)) (= (type StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.Interpretation) LayerTypeType)))
(push 1)
(set-info :boogie-vc-id Impl$$MutableBtreeBulkOperations.__default.ToSeqSubtree)
(assert (not (let ((anon15_Then_correct  (=> (! (and %lbl%+0 true) :lblpos +0) (and (! (or %lbl%@1 (forall (($o@@89 T@U) ($f@@39 T@U) ) (! (let ((alpha@@36 (FieldTypeInv0 (type $f@@39)))) (=> (and (and (= (type $o@@89) refType) (= (type $f@@39) (FieldType alpha@@36))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@89 $f@@39)))) :qid |MutableB.84:17| :skolemid |1274| :no-pattern (type $o@@89) :no-pattern (type $f@@39) :no-pattern (U_2_int $o@@89) :no-pattern (U_2_bool $o@@89) :no-pattern (U_2_int $f@@39) :no-pattern (U_2_bool $f@@39) ))) :lblneg @1) (=> (forall (($o@@90 T@U) ($f@@40 T@U) ) (! (let ((alpha@@37 (FieldTypeInv0 (type $f@@40)))) (=> (and (and (= (type $o@@90) refType) (= (type $f@@40) (FieldType alpha@@37))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@90 $f@@40)))) :qid |MutableB.84:17| :skolemid |1274| :no-pattern (type@@0 $o@@79) :no-pattern (type@@0 $f@@29) :no-pattern (type $o@@90) :no-pattern (type $f@@40) :no-pattern (U_2_int $o@@90) :no-pattern (U_2_bool $o@@90) :no-pattern (U_2_int $f@@40) :no-pattern (U_2_bool $f@@40) )) (=> (and ($IsGoodHeap $Heap@9) ($IsHeapAnchor $Heap@9)) (=> (and (and (= $Heap@1 $Heap@9) (= StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I ($LS MoreFuel_MutableBtreeBulkOperations.MB.Abs._default.I0))) (and (= StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I ($LS ($LS MoreFuel_MutableBtreeBulkOperations.MB.Abs._default.I0))) (= (AsFuelBottom MoreFuel_MutableBtreeBulkOperations.MB.Abs._default.I0) MoreFuel_MutableBtreeBulkOperations.MB.Abs._default.I0))) (and (! (or %lbl%@2 (forall (($o@@91 T@U) ($f@@41 T@U) ) (! (let ((alpha@@38 (FieldTypeInv0 (type $f@@41)))) (=> (and (and (= (type $o@@91) refType) (= (type $f@@41) (FieldType alpha@@38))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@91 $f@@41)))) :qid |MutableB.85:27| :skolemid |1275| :no-pattern (type $o@@91) :no-pattern (type $f@@41) :no-pattern (U_2_int $o@@91) :no-pattern (U_2_bool $o@@91) :no-pattern (U_2_int $f@@41) :no-pattern (U_2_bool $f@@41) ))) :lblneg @2) (=> (forall (($o@@92 T@U) ($f@@42 T@U) ) (! (let ((alpha@@39 (FieldTypeInv0 (type $f@@42)))) (=> (and (and (= (type $o@@92) refType) (= (type $f@@42) (FieldType alpha@@39))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@92 $f@@42)))) :qid |MutableB.85:27| :skolemid |1275| :no-pattern (type@@0 $o@@80) :no-pattern (type@@0 $f@@30) :no-pattern (type $o@@92) :no-pattern (type $f@@42) :no-pattern (U_2_int $o@@92) :no-pattern (U_2_bool $o@@92) :no-pattern (U_2_int $f@@42) :no-pattern (U_2_bool $f@@42) )) (=> (and ($IsGoodHeap $Heap@10) ($IsHeapAnchor $Heap@10)) (=> (and (and (= $Heap@9 $Heap@10) (= StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq ($LS MoreFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq0))) (and (= StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq ($LS ($LS MoreFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq0))) (= (AsFuelBottom MoreFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq0) MoreFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq0))) (and (! (or %lbl%@3 (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@10 |keys#0|) |nextstart#0@0|) |start#0|) ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@10 |node#0@@101|)))))) :lblneg @3) (=> (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@10 |keys#0|) |nextstart#0@0|) |start#0|) ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@10 |node#0@@101|))))) (! (or %lbl%@4 (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@10 |values#0|) |nextstart#0@0|) |start#0|) ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@10 |node#0@@101|)))))) :lblneg @4)))))))))))))) (let ((anon9_correct  (=> (! (and %lbl%+5 true) :lblpos +5) (=> (and (<= (LitInt 0) |i#63@1|) (<= |i#63@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (and (! (or %lbl%@6 (<= (LitInt 0) |nextstart#0@1|)) :lblneg @6) (=> (<= (LitInt 0) |nextstart#0@1|) (and (! (or %lbl%@7 (<= (LitInt 0) |start#0|)) :lblneg @7) (=> (<= (LitInt 0) |start#0|) (=> ($IsAlloc |node#0@@101| Tclass.MutableBtreeBulkOperations.MB.Abs.Node $Heap@2) (and (! (or %lbl%@8  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@101|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))))) :lblneg @8) (and (! (or %lbl%@9  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) |#$Value| (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @9) (and (! (or %lbl%@10  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height)) (LitInt 0)))))) :lblneg @10) (and (! (or %lbl%@11  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (LitInt 0) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))) :lblneg @11) (and (! (or %lbl%@12  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf))))) :lblneg @12) (and (! (or %lbl%@13  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @13) (and (! (or %lbl%@14  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @14) (and (! (or %lbl%@15  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @15) (and (! (or %lbl%@16  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @16) (and (! (or %lbl%@17  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#7| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@101|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box |children#7|)) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr))))))) :lblneg @17) (and (! (or %lbl%@18  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#7| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (< 0 |nchildren#7|)))))) :lblneg @18) (and (! (or %lbl%@19  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#7@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (<= |nchildren#7@@0| MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren)))))) :lblneg @19) (and (! (or %lbl%@20  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#7@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren (_System.array.Length |children#7@@0|))))))) :lblneg @20) (and (! (or %lbl%@21  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (- MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren 1)))))) :lblneg @21) (and (! (or %lbl%@22  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#7@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#7@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#64| Int) ) (!  (=> (and (<= (LitInt 0) |i#64|) (< |i#64| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#64|) (< |i#64| |nchildren#7@@1|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#7@@1|) (IndexField |i#64|))) null)))) :qid |MutableB.178:18| :skolemid |1277| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#7@@1|) (IndexField |i#64|)))) )))))))) :lblneg @22) (and (! (or %lbl%@23  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#7@@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#7@@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#7@@2|) |nchildren#7@@2|) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))))))))) :lblneg @23) (and (! (or %lbl%@24  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#7@@3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#7@@3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#65| Int) ) (!  (=> (and (<= (LitInt 0) |i#65|) (< |i#65| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#65|) (< |i#65| |nchildren#7@@3|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#7@@3|) (IndexField |i#65|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |node#0@@101|)))))) :qid |MutableB.180:18| :skolemid |1278| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#7@@3|) (IndexField |i#65|)))) )))))))) :lblneg @24) (and (! (or %lbl%@25  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#7@@4| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#7@@4| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#66| Int) ) (!  (=> (and (<= (LitInt 0) |i#66|) (< |i#66| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#66|) (< |i#66| |nchildren#7@@4|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#7@@4|) (IndexField |i#66|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |1279| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#7@@4|) (IndexField |i#66|)))) )))))))) :lblneg @25) (and (! (or %lbl%@26  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#7@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#7@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#67| Int) ) (!  (=> (and (<= (LitInt 0) |i#67|) (< |i#67| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#67|) (< |i#67| |nchildren#7@@5|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#7@@5|) (IndexField |i#67|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#7@@5|) |nchildren#7@@5|) |i#67|))))) :qid |MutableB.182:24| :skolemid |1280| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#7@@5|) |nchildren#7@@5|) |i#67|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#7@@5|) (IndexField |i#67|)))) )) (U_2_bool (Lit (bool_2_U true)))))))))) :lblneg @26) (and (! (or %lbl%@27  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#7@@6| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#7@@6| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#67@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#67@@0|) (< |i#67@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#67@@0|) (< |i#67@@0| |nchildren#7@@6|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#7@@6|) (IndexField |i#67@@0|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#7@@6|) |nchildren#7@@6|) |i#67@@0|))))) :qid |MutableB.182:24| :skolemid |1280| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#7@@6|) |nchildren#7@@6|) |i#67@@0|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#7@@6|) (IndexField |i#67@@0|)))) )) (forall ((|i#68| Int) ) (!  (=> (and (<= (LitInt 0) |i#68|) (< |i#68| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#68|) (< |i#68| |nchildren#7@@6|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#7@@6|) (IndexField |i#68|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |children#7@@6|)))))) :qid |MutableB.183:18| :skolemid |1281| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#7@@6|) (IndexField |i#68|)))) ))))))))) :lblneg @27) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@2 |node#0@@101|) (and (! (or %lbl%@28 (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|))) :lblneg @28) (=> (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) (and (! (or %lbl%@29  (and (<= 0 |i#63@1|) (<= |i#63@1| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)))))) :lblneg @29) (=> (and (= |##nodes#0@0| (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|)) ($IsAlloc |##nodes#0@0| (TSeq Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) $Heap@2)) (and (! (or %lbl%@30 (forall ((|i#69| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#69|) (< |i#69| (|Seq#Length| |##nodes#0@0|))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS ($LS $LZ)) ($Unbox DatatypeTypeType (|Seq#Index| |##nodes#0@0| |i#69|))))) :qid |BtreeMod.1429:21| :skolemid |1286| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |##nodes#0@0| |i#69|))) ))) :lblneg @30) (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren#canCall| (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|)) (=> (and (and (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@2 |node#0@@101|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren#canCall| (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|))) (= |nextstart#0@1| (+ |start#0| (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren ($LS $LZ) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|))))) (and (! (or %lbl%@31 (<= (LitInt 0) |nextstart#0@1|)) :lblneg @31) (=> (<= (LitInt 0) |nextstart#0@1|) (and (! (or %lbl%@32 (not (= |keys#0| null))) :lblneg @32) (=> (<= |nextstart#0@1| (_System.array.Length |keys#0|)) (and (! (or %lbl%@33 (not (= |keys#0| null))) :lblneg @33) (=> (not (= |keys#0| null)) (and (! (or %lbl%@34  (and (<= 0 |start#0|) (<= |start#0| (_System.array.Length |keys#0|)))) :lblneg @34) (and (! (or %lbl%@35 (not (= |keys#0| null))) :lblneg @35) (=> (not (= |keys#0| null)) (and (! (or %lbl%@36  (and (<= 0 |start#0|) (<= |start#0| (_System.array.Length |keys#0|)))) :lblneg @36) (=> (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@2 |keys#0|) |start#0|) (|Seq#Take| (|Seq#FromArray| $Heap@@137 |keys#0|) |start#0|)) (and (! (or %lbl%@37 (not (= |keys#0| null))) :lblneg @37) (=> (not (= |keys#0| null)) (and (! (or %lbl%@38  (and (<= 0 |start#0|) (<= |start#0| (_System.array.Length |keys#0|)))) :lblneg @38) (and (! (or %lbl%@39  (and (<= |start#0| |nextstart#0@1|) (<= |nextstart#0@1| (_System.array.Length |keys#0|)))) :lblneg @39) (=> ($IsAlloc |node#0@@101| Tclass.MutableBtreeBulkOperations.MB.Abs.Node $Heap@2) (and (! (or %lbl%@40  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@101|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))))) :lblneg @40) (and (! (or %lbl%@41  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) |#$Value| (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @41) (and (! (or %lbl%@42  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height)) (LitInt 0)))))) :lblneg @42) (and (! (or %lbl%@43  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (LitInt 0) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))) :lblneg @43) (and (! (or %lbl%@44  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf))))) :lblneg @44) (and (! (or %lbl%@45  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @45) (and (! (or %lbl%@46  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @46) (and (! (or %lbl%@47  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @47) (and (! (or %lbl%@48  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @48) (and (! (or %lbl%@49  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#8| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@101|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box |children#8|)) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr))))))) :lblneg @49) (and (! (or %lbl%@50  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#8| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (< 0 |nchildren#8|)))))) :lblneg @50) (and (! (or %lbl%@51  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#8@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (<= |nchildren#8@@0| MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren)))))) :lblneg @51) (and (! (or %lbl%@52  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#8@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren (_System.array.Length |children#8@@0|))))))) :lblneg @52) (and (! (or %lbl%@53  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (- MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren 1)))))) :lblneg @53) (and (! (or %lbl%@54  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#8@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#8@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#70| Int) ) (!  (=> (and (<= (LitInt 0) |i#70|) (< |i#70| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#70|) (< |i#70| |nchildren#8@@1|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#8@@1|) (IndexField |i#70|))) null)))) :qid |MutableB.178:18| :skolemid |1288| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#8@@1|) (IndexField |i#70|)))) )))))))) :lblneg @54) (and (! (or %lbl%@55  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#8@@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#8@@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#8@@2|) |nchildren#8@@2|) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))))))))) :lblneg @55) (and (! (or %lbl%@56  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#8@@3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#8@@3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#71| Int) ) (!  (=> (and (<= (LitInt 0) |i#71|) (< |i#71| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#71|) (< |i#71| |nchildren#8@@3|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#8@@3|) (IndexField |i#71|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |node#0@@101|)))))) :qid |MutableB.180:18| :skolemid |1289| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#8@@3|) (IndexField |i#71|)))) )))))))) :lblneg @56) (and (! (or %lbl%@57  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#8@@4| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#8@@4| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#72| Int) ) (!  (=> (and (<= (LitInt 0) |i#72|) (< |i#72| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#72|) (< |i#72| |nchildren#8@@4|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#8@@4|) (IndexField |i#72|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |1290| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#8@@4|) (IndexField |i#72|)))) )))))))) :lblneg @57) (and (! (or %lbl%@58  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#8@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#8@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#73| Int) ) (!  (=> (and (<= (LitInt 0) |i#73|) (< |i#73| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#73|) (< |i#73| |nchildren#8@@5|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#8@@5|) (IndexField |i#73|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#8@@5|) |nchildren#8@@5|) |i#73|))))) :qid |MutableB.182:24| :skolemid |1291| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#8@@5|) |nchildren#8@@5|) |i#73|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#8@@5|) (IndexField |i#73|)))) )) (U_2_bool (Lit (bool_2_U true)))))))))) :lblneg @58) (and (! (or %lbl%@59  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#8@@6| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#8@@6| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#73@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#73@@0|) (< |i#73@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#73@@0|) (< |i#73@@0| |nchildren#8@@6|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#8@@6|) (IndexField |i#73@@0|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#8@@6|) |nchildren#8@@6|) |i#73@@0|))))) :qid |MutableB.182:24| :skolemid |1291| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#8@@6|) |nchildren#8@@6|) |i#73@@0|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#8@@6|) (IndexField |i#73@@0|)))) )) (forall ((|i#74| Int) ) (!  (=> (and (<= (LitInt 0) |i#74|) (< |i#74| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#74|) (< |i#74| |nchildren#8@@6|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#8@@6|) (IndexField |i#74|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |children#8@@6|)))))) :qid |MutableB.183:18| :skolemid |1292| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#8@@6|) (IndexField |i#74|)))) ))))))))) :lblneg @59) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@2 |node#0@@101|) (and (! (or %lbl%@60 (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|))) :lblneg @60) (=> (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) (and (! (or %lbl%@61  (and (<= 0 |i#63@1|) (<= |i#63@1| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)))))) :lblneg @61) (=> (and (= |##nodes#1@0| (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|)) ($IsAlloc |##nodes#1@0| (TSeq Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) $Heap@2)) (and (! (or %lbl%@62 (forall ((|i#75| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#75|) (< |i#75| (|Seq#Length| |##nodes#1@0|))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS ($LS $LZ)) ($Unbox DatatypeTypeType (|Seq#Index| |##nodes#1@0| |i#75|))))) :qid |BtreeMod.1628:21| :skolemid |1297| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |##nodes#1@0| |i#75|))) ))) :lblneg @62) (=> (and (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#canCall| (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|)) (_System.Tuple2.___hMake2_q (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|)))) (=> (and (and (_System.Tuple2.___hMake2_q (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|))) (= |##seqs#0@0| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|)))))) (and ($IsAlloc |##seqs#0@0| (TSeq (TSeq (TSeq Tclass.NativeTypes.byte))) $Heap@2) (|Sequences.__default.Flatten#canCall| (TSeq Tclass.NativeTypes.byte) ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|))))))) (=> (and (and (and (and (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@2 |node#0@@101|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#canCall| (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|))) (_System.Tuple2.___hMake2_q (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|)))) (|Sequences.__default.Flatten#canCall| (TSeq Tclass.NativeTypes.byte) ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|)))))) (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@2 |keys#0|) |nextstart#0@1|) |start#0|) (Sequences.__default.Flatten (TSeq Tclass.NativeTypes.byte) StartFuel_Sequences._default.Flatten ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|))))))) (and (! (or %lbl%@63 (not (= |keys#0| null))) :lblneg @63) (=> (not (= |keys#0| null)) (and (! (or %lbl%@64  (and (<= 0 |nextstart#0@1|) (<= |nextstart#0@1| (_System.array.Length |keys#0|)))) :lblneg @64) (and (! (or %lbl%@65 (not (= |keys#0| null))) :lblneg @65) (=> (not (= |keys#0| null)) (and (! (or %lbl%@66  (and (<= 0 |nextstart#0@1|) (<= |nextstart#0@1| (_System.array.Length |keys#0|)))) :lblneg @66) (=> (|Seq#Equal| (|Seq#Drop| (|Seq#FromArray| $Heap@2 |keys#0|) |nextstart#0@1|) (|Seq#Drop| (|Seq#FromArray| $Heap@@137 |keys#0|) |nextstart#0@1|)) (and (! (or %lbl%@67 (not (= |values#0| null))) :lblneg @67) (=> (not (= |values#0| null)) (and (! (or %lbl%@68  (and (<= 0 |start#0|) (<= |start#0| (_System.array.Length |values#0|)))) :lblneg @68) (and (! (or %lbl%@69 (not (= |values#0| null))) :lblneg @69) (=> (not (= |values#0| null)) (and (! (or %lbl%@70  (and (<= 0 |start#0|) (<= |start#0| (_System.array.Length |values#0|)))) :lblneg @70) (=> (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@2 |values#0|) |start#0|) (|Seq#Take| (|Seq#FromArray| $Heap@@137 |values#0|) |start#0|)) (and (! (or %lbl%@71 (not (= |values#0| null))) :lblneg @71) (=> (not (= |values#0| null)) (and (! (or %lbl%@72  (and (<= 0 |start#0|) (<= |start#0| (_System.array.Length |values#0|)))) :lblneg @72) (and (! (or %lbl%@73  (and (<= |start#0| |nextstart#0@1|) (<= |nextstart#0@1| (_System.array.Length |values#0|)))) :lblneg @73) (=> ($IsAlloc |node#0@@101| Tclass.MutableBtreeBulkOperations.MB.Abs.Node $Heap@2) (and (! (or %lbl%@74  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@101|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))))) :lblneg @74) (and (! (or %lbl%@75  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) |#$Value| (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @75) (and (! (or %lbl%@76  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height)) (LitInt 0)))))) :lblneg @76) (and (! (or %lbl%@77  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (LitInt 0) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))) :lblneg @77) (and (! (or %lbl%@78  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf))))) :lblneg @78) (and (! (or %lbl%@79  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @79) (and (! (or %lbl%@80  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @80) (and (! (or %lbl%@81  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @81) (and (! (or %lbl%@82  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @82) (and (! (or %lbl%@83  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#9| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@101|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box |children#9|)) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr))))))) :lblneg @83) (and (! (or %lbl%@84  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#9| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (< 0 |nchildren#9|)))))) :lblneg @84) (and (! (or %lbl%@85  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#9@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (<= |nchildren#9@@0| MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren)))))) :lblneg @85) (and (! (or %lbl%@86  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#9@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren (_System.array.Length |children#9@@0|))))))) :lblneg @86) (and (! (or %lbl%@87  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (- MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren 1)))))) :lblneg @87) (and (! (or %lbl%@88  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#9@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#9@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#76| Int) ) (!  (=> (and (<= (LitInt 0) |i#76|) (< |i#76| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#76|) (< |i#76| |nchildren#9@@1|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@1|) (IndexField |i#76|))) null)))) :qid |MutableB.178:18| :skolemid |1299| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@1|) (IndexField |i#76|)))) )))))))) :lblneg @88) (and (! (or %lbl%@89  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#9@@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#9@@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#9@@2|) |nchildren#9@@2|) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))))))))) :lblneg @89) (and (! (or %lbl%@90  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#9@@3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#9@@3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#77| Int) ) (!  (=> (and (<= (LitInt 0) |i#77|) (< |i#77| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#77|) (< |i#77| |nchildren#9@@3|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@3|) (IndexField |i#77|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |node#0@@101|)))))) :qid |MutableB.180:18| :skolemid |1300| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@3|) (IndexField |i#77|)))) )))))))) :lblneg @90) (and (! (or %lbl%@91  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#9@@4| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#9@@4| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#78| Int) ) (!  (=> (and (<= (LitInt 0) |i#78|) (< |i#78| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#78|) (< |i#78| |nchildren#9@@4|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@4|) (IndexField |i#78|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |1301| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@4|) (IndexField |i#78|)))) )))))))) :lblneg @91) (and (! (or %lbl%@92  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#9@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#9@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#79| Int) ) (!  (=> (and (<= (LitInt 0) |i#79|) (< |i#79| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#79|) (< |i#79| |nchildren#9@@5|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@5|) (IndexField |i#79|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#9@@5|) |nchildren#9@@5|) |i#79|))))) :qid |MutableB.182:24| :skolemid |1302| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#9@@5|) |nchildren#9@@5|) |i#79|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@5|) (IndexField |i#79|)))) )) (U_2_bool (Lit (bool_2_U true)))))))))) :lblneg @92) (and (! (or %lbl%@93  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#9@@6| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#9@@6| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#79@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#79@@0|) (< |i#79@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#79@@0|) (< |i#79@@0| |nchildren#9@@6|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@6|) (IndexField |i#79@@0|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#9@@6|) |nchildren#9@@6|) |i#79@@0|))))) :qid |MutableB.182:24| :skolemid |1302| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#9@@6|) |nchildren#9@@6|) |i#79@@0|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@6|) (IndexField |i#79@@0|)))) )) (forall ((|i#80| Int) ) (!  (=> (and (<= (LitInt 0) |i#80|) (< |i#80| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#80|) (< |i#80| |nchildren#9@@6|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@6|) (IndexField |i#80|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |children#9@@6|)))))) :qid |MutableB.183:18| :skolemid |1303| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#9@@6|) (IndexField |i#80|)))) ))))))))) :lblneg @93) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@2 |node#0@@101|) (and (! (or %lbl%@94 (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|))) :lblneg @94) (=> (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) (and (! (or %lbl%@95  (and (<= 0 |i#63@1|) (<= |i#63@1| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)))))) :lblneg @95) (=> (and (= |##nodes#2@0| (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|)) ($IsAlloc |##nodes#2@0| (TSeq Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node) $Heap@2)) (and (! (or %lbl%@96 (forall ((|i#81| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#81|) (< |i#81| (|Seq#Length| |##nodes#2@0|))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS ($LS $LZ)) ($Unbox DatatypeTypeType (|Seq#Index| |##nodes#2@0| |i#81|))))) :qid |BtreeMod.1628:21| :skolemid |1308| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |##nodes#2@0| |i#81|))) ))) :lblneg @96) (=> (and (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#canCall| (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|)) (_System.Tuple2.___hMake2_q (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|)))) (=> (and (and (_System.Tuple2.___hMake2_q (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|))) (= |##seqs#1@0| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|)))))) (and ($IsAlloc |##seqs#1@0| (TSeq (TSeq |#$Value|)) $Heap@2) (|Sequences.__default.Flatten#canCall| |#$Value| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|))))))) (=> (and (and (and (and (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@2 |node#0@@101|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#canCall| (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|))) (_System.Tuple2.___hMake2_q (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|)))) (|Sequences.__default.Flatten#canCall| |#$Value| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|)))))) (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@2 |values#0|) |nextstart#0@1|) |start#0|) (Sequences.__default.Flatten |#$Value| StartFuel_Sequences._default.Flatten ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|))))))) (and (! (or %lbl%@97 (not (= |values#0| null))) :lblneg @97) (=> (not (= |values#0| null)) (and (! (or %lbl%@98  (and (<= 0 |nextstart#0@1|) (<= |nextstart#0@1| (_System.array.Length |values#0|)))) :lblneg @98) (and (! (or %lbl%@99 (not (= |values#0| null))) :lblneg @99) (=> (not (= |values#0| null)) (and (! (or %lbl%@100  (and (<= 0 |nextstart#0@1|) (<= |nextstart#0@1| (_System.array.Length |values#0|)))) :lblneg @100) (=> (|Seq#Equal| (|Seq#Drop| (|Seq#FromArray| $Heap@2 |values#0|) |nextstart#0@1|) (|Seq#Drop| (|Seq#FromArray| $Heap@@137 |values#0|) |nextstart#0@1|)) (and (! (or %lbl%@101 (not (= |node#0@@101| null))) :lblneg @101) (=> (not (= |node#0@@101| null)) (! (or %lbl%@102 (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) :lblneg @102)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((anon18_Else_correct  (=> (! (and %lbl%+103 true) :lblpos +103) (=> (< |i#63@1| (LitInt 0)) anon9_correct)))) (let ((anon18_Then_correct  (=> (! (and %lbl%+104 true) :lblpos +104) (=> (<= (LitInt 0) |i#63@1|) (and (! (or %lbl%@105 (not (= |node#0@@101| null))) :lblneg @105) (and (! (or %lbl%@106 (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) :lblneg @106) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) anon9_correct))))))) (let ((anon17_Then_correct  (=> (! (and %lbl%+107 true) :lblpos +107) (=> (and (not |$w$loop#0@0|) (= |newtype$check#5@0| (LitInt 0))) (and (! (or %lbl%@108  (and (<= (LitInt 0) |newtype$check#5@0|) (< |newtype$check#5@0| 18446744073709551616))) :lblneg @108) (=> (and (<= (LitInt 0) |newtype$check#5@0|) (< |newtype$check#5@0| 18446744073709551616)) (and anon18_Then_correct anon18_Else_correct))))))) (let ((GeneratedUnifiedExit_correct  (=> (! (and %lbl%+109 true) :lblpos +109) (and (! (or %lbl%@110 (= |nextstart#0@2| (+ |start#0| (MutableBtreeBulkOperations.__default.NumElements $Heap@11 |node#0@@101|)))) :lblneg @110) (=> (= |nextstart#0@2| (+ |start#0| (MutableBtreeBulkOperations.__default.NumElements $Heap@11 |node#0@@101|))) (and (! (or %lbl%@111 (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@11 |keys#0|) |start#0|) (|Seq#Take| (|Seq#FromArray| $Heap@@137 |keys#0|) |start#0|))) :lblneg @111) (=> (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@11 |keys#0|) |start#0|) (|Seq#Take| (|Seq#FromArray| $Heap@@137 |keys#0|) |start#0|)) (and (! (or %lbl%@112 (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@11 |keys#0|) |nextstart#0@2|) |start#0|) ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@11 |node#0@@101|)))))) :lblneg @112) (=> (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@11 |keys#0|) |nextstart#0@2|) |start#0|) ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@11 |node#0@@101|))))) (and (! (or %lbl%@113 (|Seq#Equal| (|Seq#Drop| (|Seq#FromArray| $Heap@11 |keys#0|) |nextstart#0@2|) (|Seq#Drop| (|Seq#FromArray| $Heap@@137 |keys#0|) |nextstart#0@2|))) :lblneg @113) (=> (|Seq#Equal| (|Seq#Drop| (|Seq#FromArray| $Heap@11 |keys#0|) |nextstart#0@2|) (|Seq#Drop| (|Seq#FromArray| $Heap@@137 |keys#0|) |nextstart#0@2|)) (and (! (or %lbl%@114 (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@11 |values#0|) |start#0|) (|Seq#Take| (|Seq#FromArray| $Heap@@137 |values#0|) |start#0|))) :lblneg @114) (=> (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@11 |values#0|) |start#0|) (|Seq#Take| (|Seq#FromArray| $Heap@@137 |values#0|) |start#0|)) (and (! (or %lbl%@115 (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@11 |values#0|) |nextstart#0@2|) |start#0|) ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@11 |node#0@@101|)))))) :lblneg @115) (=> (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@11 |values#0|) |nextstart#0@2|) |start#0|) ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@11 |node#0@@101|))))) (! (or %lbl%@116 (|Seq#Equal| (|Seq#Drop| (|Seq#FromArray| $Heap@11 |values#0|) |nextstart#0@2|) (|Seq#Drop| (|Seq#FromArray| $Heap@@137 |values#0|) |nextstart#0@2|))) :lblneg @116)))))))))))))))) (let ((anon15_Else_correct  (=> (! (and %lbl%+117 true) :lblpos +117) (=> (=> (U_2_bool (Lit (bool_2_U true))) (and (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@1 |keys#0|) |nextstart#0@0|) |start#0|) ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@1 |node#0@@101|))))) (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@1 |values#0|) |nextstart#0@0|) |start#0|) ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@1 |node#0@@101|))))))) (=> (and (= |nextstart#0@2| |nextstart#0@0|) (= $Heap@11 $Heap@1)) GeneratedUnifiedExit_correct))))) (let ((anon14_Then_correct  (=> (! (and %lbl%+118 true) :lblpos +118) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@137 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (and (! (or %lbl%@119 (not (= |node#0@@101| null))) :lblneg @119) (=> (not (= |node#0@@101| null)) (and (! (or %lbl%@120 (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@137 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) :lblneg @120) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@137 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (=> (and (= |src##0_0@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@@137 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (= |newtype$check#0_0@0| (LitInt 0))) (and (! (or %lbl%@121  (and (<= (LitInt 0) |newtype$check#0_0@0|) (< |newtype$check#0_0@0| 18446744073709551616))) :lblneg @121) (=> (and (<= (LitInt 0) |newtype$check#0_0@0|) (< |newtype$check#0_0@0| 18446744073709551616)) (=> (= |srcIndex##0_0@0| (LitInt 0)) (and (! (or %lbl%@122 (not (= |node#0@@101| null))) :lblneg @122) (=> (not (= |node#0@@101| null)) (and (! (or %lbl%@123 (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@137 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) :lblneg @123) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@137 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (=> (= |len##0_0@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@@137 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (and (! (or %lbl%@124 (forall (($o@@93 T@U) ($f@@43 T@U) ) (! (let ((alpha@@40 (FieldTypeInv0 (type $f@@43)))) (=> (and (= (type $o@@93) refType) (= (type $f@@43) (FieldType alpha@@40))) (=> (and (and (not (= $o@@93 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@@137 $o@@93) alloc))) (= $o@@93 |keys#0|)) (U_2_bool (MapType6Select $_Frame@0 $o@@93 $f@@43))))) :qid |MutableB.75:34| :skolemid |1272| :no-pattern (type $o@@93) :no-pattern (type $f@@43) :no-pattern (U_2_int $o@@93) :no-pattern (U_2_bool $o@@93) :no-pattern (U_2_int $f@@43) :no-pattern (U_2_bool $f@@43) ))) :lblneg @124) (=> (forall (($o@@94 T@U) ($f@@44 T@U) ) (! (let ((alpha@@41 (FieldTypeInv0 (type $f@@44)))) (=> (and (= (type $o@@94) refType) (= (type $f@@44) (FieldType alpha@@41))) (=> (and (and (not (= $o@@94 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@@137 $o@@94) alloc))) (= $o@@94 |keys#0|)) (U_2_bool (MapType6Select $_Frame@0 $o@@94 $f@@44))))) :qid |MutableB.75:34| :skolemid |1272| :no-pattern (type@@0 $o@@81) :no-pattern (type@@0 $f@@31) :no-pattern (type $o@@94) :no-pattern (type $f@@44) :no-pattern (U_2_int $o@@94) :no-pattern (U_2_bool $o@@94) :no-pattern (U_2_int $f@@44) :no-pattern (U_2_bool $f@@44) )) (=> (= call0formal@NativeArrays._default.CopyArrayIntoDifferentArray$A@0 (TSeq Tclass.NativeTypes.byte)) (and (! (or %lbl%@125 (<= (+ |srcIndex##0_0@0| |len##0_0@0|) (_System.array.Length |src##0_0@0|))) :lblneg @125) (=> (<= (+ |srcIndex##0_0@0| |len##0_0@0|) (_System.array.Length |src##0_0@0|)) (and (! (or %lbl%@126 (<= (+ |start#0| |len##0_0@0|) (_System.array.Length |keys#0|))) :lblneg @126) (=> (<= (+ |start#0| |len##0_0@0|) (_System.array.Length |keys#0|)) (and (! (or %lbl%@127 (not (= |src##0_0@0| |keys#0|))) :lblneg @127) (=> (not (= |src##0_0@0| |keys#0|)) (=> (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (=> (and (and (forall ((|i#0@@168| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@168|) (< |i#0@@168| (_System.array.Length |keys#0|))) (= (MapType1Select (MapType0Select $Heap@0 |keys#0|) (IndexField |i#0@@168|)) (ite  (and (<= |start#0| |i#0@@168|) (< |i#0@@168| (+ |start#0| |len##0_0@0|))) (MapType1Select (MapType0Select $Heap@@137 |src##0_0@0|) (IndexField (+ (- |i#0@@168| |start#0|) |srcIndex##0_0@0|))) (|Seq#Index| (|Seq#FromArray| $Heap@@137 |keys#0|) |i#0@@168|))))) :qid |NativeAr.41:23| :skolemid |1520| :pattern ( (|Seq#Index| (|Seq#FromArray| $Heap@@137 |keys#0|) |i#0@@168|)) :pattern ( (MapType1Select (MapType0Select $Heap@0 |keys#0|) (IndexField |i#0@@168|))) )) (forall ((|i#1@@81| Int) ) (!  (=> true (=> (and (<= |srcIndex##0_0@0| |i#1@@81|) (< |i#1@@81| (+ |srcIndex##0_0@0| |len##0_0@0|))) (= (MapType1Select (MapType0Select $Heap@@137 |src##0_0@0|) (IndexField |i#1@@81|)) (MapType1Select (MapType0Select $Heap@0 |keys#0|) (IndexField (+ (- |i#1@@81| |srcIndex##0_0@0|) |start#0|)))))) :qid |NativeAr.45:23| :skolemid |1521| :pattern ( (MapType1Select (MapType0Select $Heap@@137 |src##0_0@0|) (IndexField |i#1@@81|))) ))) (and (forall (($o@@95 T@U) ) (!  (=> (= (type $o@@95) refType) (=> (and (not (= $o@@95 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@@137 $o@@95) alloc))) (or (= (MapType0Select $Heap@0 $o@@95) (MapType0Select $Heap@@137 $o@@95)) (= $o@@95 |keys#0|)))) :qid |NativeAr.36:74| :skolemid |1522| :pattern ( (MapType0Select $Heap@0 $o@@95)) )) ($HeapSucc $Heap@@137 $Heap@0))) (and (! (or %lbl%@128 (not (= |node#0@@101| null))) :lblneg @128) (=> (not (= |node#0@@101| null)) (and (! (or %lbl%@129 (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) :lblneg @129) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (=> (and (= |src##0_1@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@0 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (= |newtype$check#0_1@0| (LitInt 0))) (and (! (or %lbl%@130  (and (<= (LitInt 0) |newtype$check#0_1@0|) (< |newtype$check#0_1@0| 18446744073709551616))) :lblneg @130) (=> (and (<= (LitInt 0) |newtype$check#0_1@0|) (< |newtype$check#0_1@0| 18446744073709551616)) (=> (= |srcIndex##0_1@0| (LitInt 0)) (and (! (or %lbl%@131 (not (= |node#0@@101| null))) :lblneg @131) (=> (not (= |node#0@@101| null)) (and (! (or %lbl%@132 (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) :lblneg @132) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@0 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (=> (= |len##0_1@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@0 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (and (! (or %lbl%@133 (forall (($o@@96 T@U) ($f@@45 T@U) ) (! (let ((alpha@@42 (FieldTypeInv0 (type $f@@45)))) (=> (and (= (type $o@@96) refType) (= (type $f@@45) (FieldType alpha@@42))) (=> (and (and (not (= $o@@96 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@0 $o@@96) alloc))) (= $o@@96 |values#0|)) (U_2_bool (MapType6Select $_Frame@0 $o@@96 $f@@45))))) :qid |MutableB.76:34| :skolemid |1273| :no-pattern (type $o@@96) :no-pattern (type $f@@45) :no-pattern (U_2_int $o@@96) :no-pattern (U_2_bool $o@@96) :no-pattern (U_2_int $f@@45) :no-pattern (U_2_bool $f@@45) ))) :lblneg @133) (=> (forall (($o@@97 T@U) ($f@@46 T@U) ) (! (let ((alpha@@43 (FieldTypeInv0 (type $f@@46)))) (=> (and (= (type $o@@97) refType) (= (type $f@@46) (FieldType alpha@@43))) (=> (and (and (not (= $o@@97 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@0 $o@@97) alloc))) (= $o@@97 |values#0|)) (U_2_bool (MapType6Select $_Frame@0 $o@@97 $f@@46))))) :qid |MutableB.76:34| :skolemid |1273| :no-pattern (type@@0 $o@@82) :no-pattern (type@@0 $f@@32) :no-pattern (type $o@@97) :no-pattern (type $f@@46) :no-pattern (U_2_int $o@@97) :no-pattern (U_2_bool $o@@97) :no-pattern (U_2_int $f@@46) :no-pattern (U_2_bool $f@@46) )) (and (! (or %lbl%@134 (<= (+ |srcIndex##0_1@0| |len##0_1@0|) (_System.array.Length |src##0_1@0|))) :lblneg @134) (=> (<= (+ |srcIndex##0_1@0| |len##0_1@0|) (_System.array.Length |src##0_1@0|)) (and (! (or %lbl%@135 (<= (+ |start#0| |len##0_1@0|) (_System.array.Length |values#0|))) :lblneg @135) (=> (<= (+ |start#0| |len##0_1@0|) (_System.array.Length |values#0|)) (and (! (or %lbl%@136 (not (= |src##0_1@0| |values#0|))) :lblneg @136) (=> (not (= |src##0_1@0| |values#0|)) (=> (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (=> (and (and (forall ((|i#0@@169| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@169|) (< |i#0@@169| (_System.array.Length |values#0|))) (= (MapType1Select (MapType0Select $Heap@1 |values#0|) (IndexField |i#0@@169|)) (ite  (and (<= |start#0| |i#0@@169|) (< |i#0@@169| (+ |start#0| |len##0_1@0|))) (MapType1Select (MapType0Select $Heap@0 |src##0_1@0|) (IndexField (+ (- |i#0@@169| |start#0|) |srcIndex##0_1@0|))) (|Seq#Index| (|Seq#FromArray| $Heap@0 |values#0|) |i#0@@169|))))) :qid |NativeAr.41:23| :skolemid |1520| :pattern ( (|Seq#Index| (|Seq#FromArray| $Heap@0 |values#0|) |i#0@@169|)) :pattern ( (MapType1Select (MapType0Select $Heap@1 |values#0|) (IndexField |i#0@@169|))) )) (forall ((|i#1@@82| Int) ) (!  (=> true (=> (and (<= |srcIndex##0_1@0| |i#1@@82|) (< |i#1@@82| (+ |srcIndex##0_1@0| |len##0_1@0|))) (= (MapType1Select (MapType0Select $Heap@0 |src##0_1@0|) (IndexField |i#1@@82|)) (MapType1Select (MapType0Select $Heap@1 |values#0|) (IndexField (+ (- |i#1@@82| |srcIndex##0_1@0|) |start#0|)))))) :qid |NativeAr.45:23| :skolemid |1521| :pattern ( (MapType1Select (MapType0Select $Heap@0 |src##0_1@0|) (IndexField |i#1@@82|))) ))) (and (forall (($o@@98 T@U) ) (!  (=> (= (type $o@@98) refType) (=> (and (not (= $o@@98 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@0 $o@@98) alloc))) (or (= (MapType0Select $Heap@1 $o@@98) (MapType0Select $Heap@0 $o@@98)) (= $o@@98 |values#0|)))) :qid |NativeAr.36:74| :skolemid |1522| :pattern ( (MapType0Select $Heap@1 $o@@98)) )) ($HeapSucc $Heap@0 $Heap@1))) (and (! (or %lbl%@137 (not (= |node#0@@101| null))) :lblneg @137) (=> (not (= |node#0@@101| null)) (and (! (or %lbl%@138 (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) :lblneg @138) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@1 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (=> (= |newtype$check#0_2@0| (+ |start#0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@1 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (and (! (or %lbl%@139  (and (<= (LitInt 0) |newtype$check#0_2@0|) (< |newtype$check#0_2@0| 18446744073709551616))) :lblneg @139) (=> (and (<= (LitInt 0) |newtype$check#0_2@0|) (< |newtype$check#0_2@0| 18446744073709551616)) (=> (= |nextstart#0@0| (+ |start#0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@1 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (and anon15_Then_correct anon15_Else_correct)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((anon19_Then_correct  (=> (! (and %lbl%+140 true) :lblpos +140) (=> (and (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) |i#63@1|) ($IsAlloc |node#0@@101| Tclass.MutableBtreeBulkOperations.MB.Abs.Node $Heap@2)) (and (! (or %lbl%@141  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@101|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))))) :lblneg @141) (and (! (or %lbl%@142  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) |#$Value| (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @142) (and (! (or %lbl%@143  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height)) (LitInt 0)))))) :lblneg @143) (and (! (or %lbl%@144  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (LitInt 0) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))) :lblneg @144) (and (! (or %lbl%@145  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf))))) :lblneg @145) (and (! (or %lbl%@146  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @146) (and (! (or %lbl%@147  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @147) (and (! (or %lbl%@148  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @148) (and (! (or %lbl%@149  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @149) (and (! (or %lbl%@150  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#10| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@101|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box |children#10|)) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr))))))) :lblneg @150) (and (! (or %lbl%@151  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#10| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (< 0 |nchildren#10|)))))) :lblneg @151) (and (! (or %lbl%@152  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#10@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (<= |nchildren#10@@0| MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren)))))) :lblneg @152) (and (! (or %lbl%@153  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#10@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren (_System.array.Length |children#10@@0|))))))) :lblneg @153) (and (! (or %lbl%@154  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (- MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren 1)))))) :lblneg @154) (and (! (or %lbl%@155  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#10@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#10@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#82| Int) ) (!  (=> (and (<= (LitInt 0) |i#82|) (< |i#82| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#82|) (< |i#82| |nchildren#10@@1|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@1|) (IndexField |i#82|))) null)))) :qid |MutableB.178:18| :skolemid |1355| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@1|) (IndexField |i#82|)))) )))))))) :lblneg @155) (and (! (or %lbl%@156  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#10@@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#10@@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#10@@2|) |nchildren#10@@2|) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))))))))) :lblneg @156) (and (! (or %lbl%@157  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#10@@3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#10@@3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#83| Int) ) (!  (=> (and (<= (LitInt 0) |i#83|) (< |i#83| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#83|) (< |i#83| |nchildren#10@@3|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@3|) (IndexField |i#83|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |node#0@@101|)))))) :qid |MutableB.180:18| :skolemid |1356| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@3|) (IndexField |i#83|)))) )))))))) :lblneg @157) (and (! (or %lbl%@158  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#10@@4| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#10@@4| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#84| Int) ) (!  (=> (and (<= (LitInt 0) |i#84|) (< |i#84| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#84|) (< |i#84| |nchildren#10@@4|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@4|) (IndexField |i#84|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |1357| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@4|) (IndexField |i#84|)))) )))))))) :lblneg @158) (and (! (or %lbl%@159  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#10@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#10@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#85| Int) ) (!  (=> (and (<= (LitInt 0) |i#85|) (< |i#85| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#85|) (< |i#85| |nchildren#10@@5|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@5|) (IndexField |i#85|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#10@@5|) |nchildren#10@@5|) |i#85|))))) :qid |MutableB.182:24| :skolemid |1358| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#10@@5|) |nchildren#10@@5|) |i#85|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@5|) (IndexField |i#85|)))) )) (U_2_bool (Lit (bool_2_U true)))))))))) :lblneg @159) (and (! (or %lbl%@160  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#10@@6| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#10@@6| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#85@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#85@@0|) (< |i#85@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#85@@0|) (< |i#85@@0| |nchildren#10@@6|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@6|) (IndexField |i#85@@0|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#10@@6|) |nchildren#10@@6|) |i#85@@0|))))) :qid |MutableB.182:24| :skolemid |1358| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#10@@6|) |nchildren#10@@6|) |i#85@@0|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@6|) (IndexField |i#85@@0|)))) )) (forall ((|i#86| Int) ) (!  (=> (and (<= (LitInt 0) |i#86|) (< |i#86| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#86|) (< |i#86| |nchildren#10@@6|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@6|) (IndexField |i#86|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |children#10@@6|)))))) :qid |MutableB.183:18| :skolemid |1359| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#10@@6|) (IndexField |i#86|)))) ))))))))) :lblneg @160) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@2 |node#0@@101|) (and (! (or %lbl%@161 (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|))) :lblneg @161) (=> (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) (and (! (or %lbl%@162 (not (= |node#0@@101| null))) :lblneg @162) (and (! (or %lbl%@163 (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) :lblneg @163) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (and (! (or %lbl%@164  (and (<= 0 (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)))))) :lblneg @164) (=> ($IsAlloc |node#0@@101| Tclass.MutableBtreeBulkOperations.MB.Abs.Node $Heap@2) (and (! (or %lbl%@165  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@101|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))))) :lblneg @165) (and (! (or %lbl%@166  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) |#$Value| (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @166) (and (! (or %lbl%@167  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height)) (LitInt 0)))))) :lblneg @167) (and (! (or %lbl%@168  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (LitInt 0) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))) :lblneg @168) (and (! (or %lbl%@169  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf))))) :lblneg @169) (and (! (or %lbl%@170  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @170) (and (! (or %lbl%@171  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @171) (and (! (or %lbl%@172  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @172) (and (! (or %lbl%@173  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @173) (and (! (or %lbl%@174  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#11| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@101|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box |children#11|)) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr))))))) :lblneg @174) (and (! (or %lbl%@175  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#11| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (< 0 |nchildren#11|)))))) :lblneg @175) (and (! (or %lbl%@176  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#11@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (<= |nchildren#11@@0| MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren)))))) :lblneg @176) (and (! (or %lbl%@177  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#11@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren (_System.array.Length |children#11@@0|))))))) :lblneg @177) (and (! (or %lbl%@178  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (- MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren 1)))))) :lblneg @178) (and (! (or %lbl%@179  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#11@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#11@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#87| Int) ) (!  (=> (and (<= (LitInt 0) |i#87|) (< |i#87| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#87|) (< |i#87| |nchildren#11@@1|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#11@@1|) (IndexField |i#87|))) null)))) :qid |MutableB.178:18| :skolemid |1364| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#11@@1|) (IndexField |i#87|)))) )))))))) :lblneg @179) (and (! (or %lbl%@180  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#11@@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#11@@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#11@@2|) |nchildren#11@@2|) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))))))))) :lblneg @180) (and (! (or %lbl%@181  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#11@@3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#11@@3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#88| Int) ) (!  (=> (and (<= (LitInt 0) |i#88|) (< |i#88| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#88|) (< |i#88| |nchildren#11@@3|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#11@@3|) (IndexField |i#88|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |node#0@@101|)))))) :qid |MutableB.180:18| :skolemid |1365| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#11@@3|) (IndexField |i#88|)))) )))))))) :lblneg @181) (and (! (or %lbl%@182  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#11@@4| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#11@@4| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#89| Int) ) (!  (=> (and (<= (LitInt 0) |i#89|) (< |i#89| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#89|) (< |i#89| |nchildren#11@@4|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#11@@4|) (IndexField |i#89|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |1366| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#11@@4|) (IndexField |i#89|)))) )))))))) :lblneg @182) (and (! (or %lbl%@183  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#11@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#11@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#90| Int) ) (!  (=> (and (<= (LitInt 0) |i#90|) (< |i#90| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#90|) (< |i#90| |nchildren#11@@5|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#11@@5|) (IndexField |i#90|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#11@@5|) |nchildren#11@@5|) |i#90|))))) :qid |MutableB.182:24| :skolemid |1367| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#11@@5|) |nchildren#11@@5|) |i#90|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#11@@5|) (IndexField |i#90|)))) )) (U_2_bool (Lit (bool_2_U true)))))))))) :lblneg @183) (and (! (or %lbl%@184  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#11@@6| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#11@@6| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#90@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#90@@0|) (< |i#90@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#90@@0|) (< |i#90@@0| |nchildren#11@@6|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#11@@6|) (IndexField |i#90@@0|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#11@@6|) |nchildren#11@@6|) |i#90@@0|))))) :qid |MutableB.182:24| :skolemid |1367| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#11@@6|) |nchildren#11@@6|) |i#90@@0|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#11@@6|) (IndexField |i#90@@0|)))) )) (forall ((|i#91| Int) ) (!  (=> (and (<= (LitInt 0) |i#91|) (< |i#91| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#91|) (< |i#91| |nchildren#11@@6|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#11@@6|) (IndexField |i#91|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |children#11@@6|)))))) :qid |MutableB.183:18| :skolemid |1368| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#11@@6|) (IndexField |i#91|)))) ))))))))) :lblneg @184) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@2 |node#0@@101|) (and (! (or %lbl%@185 (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|))) :lblneg @185) (=> (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) (=> (and (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@2 |node#0@@101|) (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@2 |node#0@@101|)) (and (! (or %lbl%@186 (|Seq#Equal| (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)))) :lblneg @186) (=> (|Seq#Equal| (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|))) (and (! (or %lbl%@187 (forall (($o@@99 T@U) ($f@@47 T@U) ) (! (let ((alpha@@44 (FieldTypeInv0 (type $f@@47)))) (=> (and (and (= (type $o@@99) refType) (= (type $f@@47) (FieldType alpha@@44))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@99 $f@@47)))) :qid |MutableB.112:25| :skolemid |1373| :no-pattern (type $o@@99) :no-pattern (type $f@@47) :no-pattern (U_2_int $o@@99) :no-pattern (U_2_bool $o@@99) :no-pattern (U_2_int $f@@47) :no-pattern (U_2_bool $f@@47) ))) :lblneg @187) (=> (forall (($o@@100 T@U) ($f@@48 T@U) ) (! (let ((alpha@@45 (FieldTypeInv0 (type $f@@48)))) (=> (and (and (= (type $o@@100) refType) (= (type $f@@48) (FieldType alpha@@45))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@100 $f@@48)))) :qid |MutableB.112:25| :skolemid |1373| :no-pattern (type@@0 $o@@83) :no-pattern (type@@0 $f@@33) :no-pattern (type $o@@100) :no-pattern (type $f@@48) :no-pattern (U_2_int $o@@100) :no-pattern (U_2_bool $o@@100) :no-pattern (U_2_int $f@@48) :no-pattern (U_2_bool $f@@48) )) (=> (and (and (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (and (= $Heap@2 $Heap@3) (= StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq ($LS MoreFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq0)))) (and (and (= StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq ($LS ($LS MoreFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq0))) (= (AsFuelBottom MoreFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq0) MoreFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq0)) (and (= |nextstart#0@2| |nextstart#0@1|) (= $Heap@11 $Heap@3)))) GeneratedUnifiedExit_correct))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((anon19_Else_correct  (=> (! (and %lbl%+188 true) :lblpos +188) (=> (and (< |i#63@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (= |$decr$loop#00@1| (- (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) |i#63@1|))) (and (! (or %lbl%@189 (not (= |node#0@@101| null))) :lblneg @189) (and (! (or %lbl%@190 (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) :lblneg @190) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (and (! (or %lbl%@191 (not (= (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) null))) :lblneg @191) (=> (not (= (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) null)) (and (! (or %lbl%@192 (not (= |node#0@@101| null))) :lblneg @192) (and (! (or %lbl%@193 (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) :lblneg @193) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (and (! (or %lbl%@194  (and (<= 0 (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))) :lblneg @194) (and (! (or %lbl%@195 (not (= |node#0@@101| null))) :lblneg @195) (and (! (or %lbl%@196 (not (= |node#0@@101| null))) :lblneg @196) (and (! (or %lbl%@197 ($Is (|Seq#Take| (|Seq#FromArray| $Heap@2 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node))) :lblneg @197) (=> ($Is (|Seq#Take| (|Seq#FromArray| $Heap@2 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node)) (=> (and (and (and (= |##nodes#1_0@1| (|Seq#Take| (|Seq#FromArray| $Heap@2 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($IsAlloc |##nodes#1_0@1| (TSeq Tclass.MutableBtreeBulkOperations.MB.Abs.Node) $Heap@2)) (and (= |##parentRepr#1_0@1| (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr)) ($IsAlloc |##parentRepr#1_0@1| (TSet Tclass._System.object) $Heap@2))) (and (and (= |##parentHeight#1_0@1| (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))) ($IsAlloc (int_2_U |##parentHeight#1_0@1|) Tclass._System.nat $Heap@2)) (and (|MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren#canCall| $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))) (|MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren#canCall| $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height)))))) (and (! (or %lbl%@198  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren#canCall| $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS $LZ) $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))) (=> (U_2_bool (Lit (bool_2_U true))) (|Set#Subset| (Sequences.__default.Set Tclass.MutableBtreeBulkOperations.MB.Abs.Node (|Seq#Take| (|Seq#FromArray| $Heap@2 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr)))))) :lblneg @198) (and (! (or %lbl%@199  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren#canCall| $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS $LZ) $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))) (=> (U_2_bool (Lit (bool_2_U true))) (|Set#Subset| (MutableBtreeBulkOperations.MB.Abs.__default.SeqRepr StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.SeqRepr $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr)))))) :lblneg @199) (and (! (or %lbl%@200  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren#canCall| $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS $LZ) $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))) (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|i#1_0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1_0|) (< |i#1_0| (|Seq#Length| (|Seq#Take| (|Seq#FromArray| $Heap@2 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))) (< (U_2_int (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) |i#1_0|))) MutableBtreeBulkOperations.MB.Abs.Node.height)) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))))) :qid |MutableB.157:16| :skolemid |1312| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) |i#1_0|))) )))))) :lblneg @200) (and (! (or %lbl%@201  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren#canCall| $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS $LZ) $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))) (=> (U_2_bool (Lit (bool_2_U true))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeSiblings ($LS ($LS $LZ)) $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @201) (=> (and (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))) ($IsAlloc |node#0@@101| Tclass.MutableBtreeBulkOperations.MB.Abs.Node $Heap@2)) (and (! (or %lbl%@202  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@101|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))))) :lblneg @202) (and (! (or %lbl%@203  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) |#$Value| (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @203) (and (! (or %lbl%@204  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height)) (LitInt 0)))))) :lblneg @204) (and (! (or %lbl%@205  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (LitInt 0) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))) :lblneg @205) (and (! (or %lbl%@206  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf))))) :lblneg @206) (and (! (or %lbl%@207  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @207) (and (! (or %lbl%@208  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @208) (and (! (or %lbl%@209  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @209) (and (! (or %lbl%@210  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @210) (and (! (or %lbl%@211  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#1_0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@101|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box |children#1_0|)) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr))))))) :lblneg @211) (and (! (or %lbl%@212  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (< 0 |nchildren#1_0|)))))) :lblneg @212) (and (! (or %lbl%@213  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_0@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (<= |nchildren#1_0@@0| MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren)))))) :lblneg @213) (and (! (or %lbl%@214  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#1_0@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren (_System.array.Length |children#1_0@@0|))))))) :lblneg @214) (and (! (or %lbl%@215  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (- MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren 1)))))) :lblneg @215) (and (! (or %lbl%@216  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_0@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_0@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#1_1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_1|) (< |i#1_1| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_1|) (< |i#1_1| |nchildren#1_0@@1|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_0@@1|) (IndexField |i#1_1|))) null)))) :qid |MutableB.178:18| :skolemid |1314| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_0@@1|) (IndexField |i#1_1|)))) )))))))) :lblneg @216) (and (! (or %lbl%@217  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_0@@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_0@@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#1_0@@2|) |nchildren#1_0@@2|) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))))))))) :lblneg @217) (and (! (or %lbl%@218  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_0@@3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_0@@3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#1_2| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_2|) (< |i#1_2| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_2|) (< |i#1_2| |nchildren#1_0@@3|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_0@@3|) (IndexField |i#1_2|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |node#0@@101|)))))) :qid |MutableB.180:18| :skolemid |1315| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_0@@3|) (IndexField |i#1_2|)))) )))))))) :lblneg @218) (and (! (or %lbl%@219  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_0@@4| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_0@@4| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#1_3| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_3|) (< |i#1_3| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_3|) (< |i#1_3| |nchildren#1_0@@4|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_0@@4|) (IndexField |i#1_3|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |1316| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_0@@4|) (IndexField |i#1_3|)))) )))))))) :lblneg @219) (and (! (or %lbl%@220  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_0@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_0@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#1_4| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_4|) (< |i#1_4| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_4|) (< |i#1_4| |nchildren#1_0@@5|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_0@@5|) (IndexField |i#1_4|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#1_0@@5|) |nchildren#1_0@@5|) |i#1_4|))))) :qid |MutableB.182:24| :skolemid |1317| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#1_0@@5|) |nchildren#1_0@@5|) |i#1_4|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_0@@5|) (IndexField |i#1_4|)))) )) (U_2_bool (Lit (bool_2_U true)))))))))) :lblneg @220) (and (! (or %lbl%@221  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_0@@6| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_0@@6| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#1_4@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_4@@0|) (< |i#1_4@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_4@@0|) (< |i#1_4@@0| |nchildren#1_0@@6|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_0@@6|) (IndexField |i#1_4@@0|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#1_0@@6|) |nchildren#1_0@@6|) |i#1_4@@0|))))) :qid |MutableB.182:24| :skolemid |1317| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#1_0@@6|) |nchildren#1_0@@6|) |i#1_4@@0|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_0@@6|) (IndexField |i#1_4@@0|)))) )) (forall ((|i#1_5| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_5|) (< |i#1_5| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_5|) (< |i#1_5| |nchildren#1_0@@6|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_0@@6|) (IndexField |i#1_5|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |children#1_0@@6|)))))) :qid |MutableB.183:18| :skolemid |1318| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_0@@6|) (IndexField |i#1_5|)))) ))))))))) :lblneg @221) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@2 |node#0@@101|) (and (! (or %lbl%@222 (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|))) :lblneg @222) (=> (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) (=> (= |newtype$check#1_0@1| (LitInt 1)) (and (! (or %lbl%@223  (and (<= (LitInt 0) |newtype$check#1_0@1|) (< |newtype$check#1_0@1| 18446744073709551616))) :lblneg @223) (=> (and (<= (LitInt 0) |newtype$check#1_0@1|) (< |newtype$check#1_0@1| 18446744073709551616)) (=> (= |newtype$check#1_1@1| (+ |i#63@1| 1)) (and (! (or %lbl%@224  (and (<= (LitInt 0) |newtype$check#1_1@1|) (< |newtype$check#1_1@1| 18446744073709551616))) :lblneg @224) (=> (and (<= (LitInt 0) |newtype$check#1_1@1|) (< |newtype$check#1_1@1| 18446744073709551616)) (and (! (or %lbl%@225  (and (<= 0 (+ |i#63@1| 1)) (<= (+ |i#63@1| 1) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)))))) :lblneg @225) (and (! (or %lbl%@226  (and (<= 0 |i#63@1|) (<= |i#63@1| (|Seq#Length| (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) (+ |i#63@1| 1)))))) :lblneg @226) (=> ($IsAlloc |node#0@@101| Tclass.MutableBtreeBulkOperations.MB.Abs.Node $Heap@2) (and (! (or %lbl%@227  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@101|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))))) :lblneg @227) (and (! (or %lbl%@228  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) |#$Value| (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @228) (and (! (or %lbl%@229  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height)) (LitInt 0)))))) :lblneg @229) (and (! (or %lbl%@230  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (LitInt 0) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))) :lblneg @230) (and (! (or %lbl%@231  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf))))) :lblneg @231) (and (! (or %lbl%@232  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @232) (and (! (or %lbl%@233  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @233) (and (! (or %lbl%@234  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @234) (and (! (or %lbl%@235  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @235) (and (! (or %lbl%@236  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#1_1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@101|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box |children#1_1|)) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr))))))) :lblneg @236) (and (! (or %lbl%@237  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (< 0 |nchildren#1_1|)))))) :lblneg @237) (and (! (or %lbl%@238  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_1@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (<= |nchildren#1_1@@0| MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren)))))) :lblneg @238) (and (! (or %lbl%@239  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#1_1@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren (_System.array.Length |children#1_1@@0|))))))) :lblneg @239) (and (! (or %lbl%@240  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (- MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren 1)))))) :lblneg @240) (and (! (or %lbl%@241  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_1@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_1@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#1_6| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_6|) (< |i#1_6| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_6|) (< |i#1_6| |nchildren#1_1@@1|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_1@@1|) (IndexField |i#1_6|))) null)))) :qid |MutableB.178:18| :skolemid |1323| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_1@@1|) (IndexField |i#1_6|)))) )))))))) :lblneg @241) (and (! (or %lbl%@242  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_1@@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_1@@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#1_1@@2|) |nchildren#1_1@@2|) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))))))))) :lblneg @242) (and (! (or %lbl%@243  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_1@@3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_1@@3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#1_7| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_7|) (< |i#1_7| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_7|) (< |i#1_7| |nchildren#1_1@@3|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_1@@3|) (IndexField |i#1_7|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |node#0@@101|)))))) :qid |MutableB.180:18| :skolemid |1324| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_1@@3|) (IndexField |i#1_7|)))) )))))))) :lblneg @243) (and (! (or %lbl%@244  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_1@@4| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_1@@4| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#1_8| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_8|) (< |i#1_8| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_8|) (< |i#1_8| |nchildren#1_1@@4|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_1@@4|) (IndexField |i#1_8|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |1325| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_1@@4|) (IndexField |i#1_8|)))) )))))))) :lblneg @244) (and (! (or %lbl%@245  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_1@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_1@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#1_9| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_9|) (< |i#1_9| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_9|) (< |i#1_9| |nchildren#1_1@@5|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_1@@5|) (IndexField |i#1_9|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#1_1@@5|) |nchildren#1_1@@5|) |i#1_9|))))) :qid |MutableB.182:24| :skolemid |1326| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#1_1@@5|) |nchildren#1_1@@5|) |i#1_9|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_1@@5|) (IndexField |i#1_9|)))) )) (U_2_bool (Lit (bool_2_U true)))))))))) :lblneg @245) (and (! (or %lbl%@246  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_1@@6| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_1@@6| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#1_9@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_9@@0|) (< |i#1_9@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_9@@0|) (< |i#1_9@@0| |nchildren#1_1@@6|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_1@@6|) (IndexField |i#1_9@@0|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#1_1@@6|) |nchildren#1_1@@6|) |i#1_9@@0|))))) :qid |MutableB.182:24| :skolemid |1326| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#1_1@@6|) |nchildren#1_1@@6|) |i#1_9@@0|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_1@@6|) (IndexField |i#1_9@@0|)))) )) (forall ((|i#1_10| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_10|) (< |i#1_10| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_10|) (< |i#1_10| |nchildren#1_1@@6|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_1@@6|) (IndexField |i#1_10|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |children#1_1@@6|)))))) :qid |MutableB.183:18| :skolemid |1327| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_1@@6|) (IndexField |i#1_10|)))) ))))))))) :lblneg @246) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@2 |node#0@@101|) (and (! (or %lbl%@247 (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|))) :lblneg @247) (=> (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) (and (! (or %lbl%@248  (and (<= 0 |i#63@1|) (<= |i#63@1| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)))))) :lblneg @248) (=> (and (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@2 |node#0@@101|) (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@2 |node#0@@101|)) (and (! (or %lbl%@249 (|Seq#Equal| (|Seq#Take| (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) (+ |i#63@1| 1)) |i#63@1|) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|))) :lblneg @249) (=> (and (|Seq#Equal| (|Seq#Take| (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) (+ |i#63@1| 1)) |i#63@1|) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|)) ($IsAlloc |node#0@@101| Tclass.MutableBtreeBulkOperations.MB.Abs.Node $Heap@2)) (and (! (or %lbl%@250  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@101|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))))) :lblneg @250) (and (! (or %lbl%@251  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) |#$Value| (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @251) (and (! (or %lbl%@252  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height)) (LitInt 0)))))) :lblneg @252) (and (! (or %lbl%@253  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (LitInt 0) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))) :lblneg @253) (and (! (or %lbl%@254  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf))))) :lblneg @254) (and (! (or %lbl%@255  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @255) (and (! (or %lbl%@256  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @256) (and (! (or %lbl%@257  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @257) (and (! (or %lbl%@258  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @258) (and (! (or %lbl%@259  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#1_2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@101|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box |children#1_2|)) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr))))))) :lblneg @259) (and (! (or %lbl%@260  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (< 0 |nchildren#1_2|)))))) :lblneg @260) (and (! (or %lbl%@261  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_2@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (<= |nchildren#1_2@@0| MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren)))))) :lblneg @261) (and (! (or %lbl%@262  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#1_2@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren (_System.array.Length |children#1_2@@0|))))))) :lblneg @262) (and (! (or %lbl%@263  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (- MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren 1)))))) :lblneg @263) (and (! (or %lbl%@264  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_2@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_2@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#1_11| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_11|) (< |i#1_11| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_11|) (< |i#1_11| |nchildren#1_2@@1|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_2@@1|) (IndexField |i#1_11|))) null)))) :qid |MutableB.178:18| :skolemid |1332| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_2@@1|) (IndexField |i#1_11|)))) )))))))) :lblneg @264) (and (! (or %lbl%@265  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_2@@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_2@@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@2 (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#1_2@@2|) |nchildren#1_2@@2|) (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))))))))) :lblneg @265) (and (! (or %lbl%@266  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_2@@3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_2@@3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#1_12| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_12|) (< |i#1_12| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_12|) (< |i#1_12| |nchildren#1_2@@3|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_2@@3|) (IndexField |i#1_12|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |node#0@@101|)))))) :qid |MutableB.180:18| :skolemid |1333| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_2@@3|) (IndexField |i#1_12|)))) )))))))) :lblneg @266) (and (! (or %lbl%@267  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_2@@4| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_2@@4| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#1_13| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_13|) (< |i#1_13| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_13|) (< |i#1_13| |nchildren#1_2@@4|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_2@@4|) (IndexField |i#1_13|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |1334| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_2@@4|) (IndexField |i#1_13|)))) )))))))) :lblneg @267) (and (! (or %lbl%@268  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_2@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_2@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#1_14| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_14|) (< |i#1_14| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_14|) (< |i#1_14| |nchildren#1_2@@5|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_2@@5|) (IndexField |i#1_14|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#1_2@@5|) |nchildren#1_2@@5|) |i#1_14|))))) :qid |MutableB.182:24| :skolemid |1335| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#1_2@@5|) |nchildren#1_2@@5|) |i#1_14|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_2@@5|) (IndexField |i#1_14|)))) )) (U_2_bool (Lit (bool_2_U true)))))))))) :lblneg @268) (and (! (or %lbl%@269  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@2 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_2@@6| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_2@@6| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#1_14@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_14@@0|) (< |i#1_14@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_14@@0|) (< |i#1_14@@0| |nchildren#1_2@@6|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_2@@6|) (IndexField |i#1_14@@0|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#1_2@@6|) |nchildren#1_2@@6|) |i#1_14@@0|))))) :qid |MutableB.182:24| :skolemid |1335| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@2 |children#1_2@@6|) |nchildren#1_2@@6|) |i#1_14@@0|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_2@@6|) (IndexField |i#1_14@@0|)))) )) (forall ((|i#1_15| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_15|) (< |i#1_15| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_15|) (< |i#1_15| |nchildren#1_2@@6|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@2 ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_2@@6|) (IndexField |i#1_15|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |children#1_2@@6|)))))) :qid |MutableB.183:18| :skolemid |1336| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@2 |children#1_2@@6|) (IndexField |i#1_15|)))) ))))))))) :lblneg @269) (=> (and (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@2 |node#0@@101|) (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@2 |node#0@@101|)) (and (! (or %lbl%@270 (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|))) :lblneg @270) (=> (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@2 |node#0@@101|) (=> (and (= |nodes##1_0@1| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|))) (= |newtype$check#1_2@1| (LitInt 1))) (and (! (or %lbl%@271  (and (<= (LitInt 0) |newtype$check#1_2@1|) (< |newtype$check#1_2@1| 18446744073709551616))) :lblneg @271) (=> (and (<= (LitInt 0) |newtype$check#1_2@1|) (< |newtype$check#1_2@1| 18446744073709551616)) (=> (= |newtype$check#1_3@1| (+ |i#63@1| 1)) (and (! (or %lbl%@272  (and (<= (LitInt 0) |newtype$check#1_3@1|) (< |newtype$check#1_3@1| 18446744073709551616))) :lblneg @272) (=> (and (<= (LitInt 0) |newtype$check#1_3@1|) (< |newtype$check#1_3@1| 18446744073709551616)) (=> (= |prefix##1_0@1| (+ |i#63@1| 1)) (and (! (or %lbl%@273 (forall (($o@@101 T@U) ($f@@49 T@U) ) (! (let ((alpha@@46 (FieldTypeInv0 (type $f@@49)))) (=> (and (and (= (type $o@@101) refType) (= (type $f@@49) (FieldType alpha@@46))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@101 $f@@49)))) :qid |MutableB.103:45| :skolemid |1341| :no-pattern (type $o@@101) :no-pattern (type $f@@49) :no-pattern (U_2_int $o@@101) :no-pattern (U_2_bool $o@@101) :no-pattern (U_2_int $f@@49) :no-pattern (U_2_bool $f@@49) ))) :lblneg @273) (=> (forall (($o@@102 T@U) ($f@@50 T@U) ) (! (let ((alpha@@47 (FieldTypeInv0 (type $f@@50)))) (=> (and (and (= (type $o@@102) refType) (= (type $f@@50) (FieldType alpha@@47))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@102 $f@@50)))) :qid |MutableB.103:45| :skolemid |1341| :no-pattern (type@@0 $o@@84) :no-pattern (type@@0 $f@@34) :no-pattern (type $o@@102) :no-pattern (type $f@@50) :no-pattern (U_2_int $o@@102) :no-pattern (U_2_bool $o@@102) :no-pattern (U_2_int $f@@50) :no-pattern (U_2_bool $f@@50) )) (and (! (or %lbl%@274 (forall ((|i#0@@170| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@170|) (< |i#0@@170| (|Seq#Length| |nodes##1_0@1|))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS ($LS $LZ)) ($Unbox DatatypeTypeType (|Seq#Index| |nodes##1_0@1| |i#0@@170|))))) :qid |BtreeMod.1613:21| :skolemid |3102| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes##1_0@1| |i#0@@170|))) ))) :lblneg @274) (=> (forall ((|i#0@@171| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@171|) (< |i#0@@171| (|Seq#Length| |nodes##1_0@1|))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS ($LS $LZ)) ($Unbox DatatypeTypeType (|Seq#Index| |nodes##1_0@1| |i#0@@171|))))) :qid |BtreeMod.1613:21| :skolemid |3102| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes##1_0@1| |i#0@@171|))) )) (and (! (or %lbl%@275 (<= (LitInt 0) |prefix##1_0@1|)) :lblneg @275) (=> (<= (LitInt 0) |prefix##1_0@1|) (and (! (or %lbl%@276 (<= |prefix##1_0@1| (|Seq#Length| |nodes##1_0@1|))) :lblneg @276) (=> (<= |prefix##1_0@1| (|Seq#Length| |nodes##1_0@1|)) (=> (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (=> (and (and (and (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren#canCall| (|Seq#Take| |nodes##1_0@1| |prefix##1_0@1|)) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren#canCall| |nodes##1_0@1|)) (<= (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren ($LS ($LS $LZ)) (|Seq#Take| |nodes##1_0@1| |prefix##1_0@1|)) (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren ($LS ($LS $LZ)) |nodes##1_0@1|))) (and (= $Heap@2 $Heap@4) ($IsAlloc |node#0@@101| Tclass.MutableBtreeBulkOperations.MB.Abs.Node $Heap@4))) (and (! (or %lbl%@277  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@4 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@101|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))))) :lblneg @277) (and (! (or %lbl%@278  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@4 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) |#$Value| (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @278) (and (! (or %lbl%@279  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@4 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height)) (LitInt 0)))))) :lblneg @279) (and (! (or %lbl%@280  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@4 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (LitInt 0) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))) :lblneg @280) (and (! (or %lbl%@281  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@4 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf))))) :lblneg @281) (and (! (or %lbl%@282  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@4 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @282) (and (! (or %lbl%@283  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@4 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @283) (and (! (or %lbl%@284  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@4 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @284) (and (! (or %lbl%@285  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@4 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @285) (and (! (or %lbl%@286  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@4 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#1_3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@101|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box |children#1_3|)) (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr))))))) :lblneg @286) (and (! (or %lbl%@287  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@4 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (< 0 |nchildren#1_3|)))))) :lblneg @287) (and (! (or %lbl%@288  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@4 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_3@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (<= |nchildren#1_3@@0| MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren)))))) :lblneg @288) (and (! (or %lbl%@289  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@4 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#1_3@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren (_System.array.Length |children#1_3@@0|))))))) :lblneg @289) (and (! (or %lbl%@290  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@4 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (- MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren 1)))))) :lblneg @290) (and (! (or %lbl%@291  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@4 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_3@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_3@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#1_16| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_16|) (< |i#1_16| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_16|) (< |i#1_16| |nchildren#1_3@@1|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#1_3@@1|) (IndexField |i#1_16|))) null)))) :qid |MutableB.178:18| :skolemid |1342| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#1_3@@1|) (IndexField |i#1_16|)))) )))))))) :lblneg @291) (and (! (or %lbl%@292  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@4 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_3@@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_3@@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@4 (|Seq#Take| (|Seq#FromArray| $Heap@4 |children#1_3@@2|) |nchildren#1_3@@2|) (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))))))))) :lblneg @292) (and (! (or %lbl%@293  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@4 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_3@@3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_3@@3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#1_17| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_17|) (< |i#1_17| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_17|) (< |i#1_17| |nchildren#1_3@@3|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#1_3@@3|) (IndexField |i#1_17|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |node#0@@101|)))))) :qid |MutableB.180:18| :skolemid |1343| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#1_3@@3|) (IndexField |i#1_17|)))) )))))))) :lblneg @293) (and (! (or %lbl%@294  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@4 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_3@@4| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_3@@4| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#1_18| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_18|) (< |i#1_18| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_18|) (< |i#1_18| |nchildren#1_3@@4|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#1_3@@4|) (IndexField |i#1_18|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |1344| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#1_3@@4|) (IndexField |i#1_18|)))) )))))))) :lblneg @294) (and (! (or %lbl%@295  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@4 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_3@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_3@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#1_19| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_19|) (< |i#1_19| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_19|) (< |i#1_19| |nchildren#1_3@@5|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#1_3@@5|) (IndexField |i#1_19|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@4 |children#1_3@@5|) |nchildren#1_3@@5|) |i#1_19|))))) :qid |MutableB.182:24| :skolemid |1345| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@4 |children#1_3@@5|) |nchildren#1_3@@5|) |i#1_19|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#1_3@@5|) (IndexField |i#1_19|)))) )) (U_2_bool (Lit (bool_2_U true)))))))))) :lblneg @295) (and (! (or %lbl%@296  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@4 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#1_3@@6| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#1_3@@6| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@4 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#1_19@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_19@@0|) (< |i#1_19@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_19@@0|) (< |i#1_19@@0| |nchildren#1_3@@6|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#1_3@@6|) (IndexField |i#1_19@@0|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@4 |children#1_3@@6|) |nchildren#1_3@@6|) |i#1_19@@0|))))) :qid |MutableB.182:24| :skolemid |1345| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@4 |children#1_3@@6|) |nchildren#1_3@@6|) |i#1_19@@0|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#1_3@@6|) (IndexField |i#1_19@@0|)))) )) (forall ((|i#1_20| Int) ) (!  (=> (and (<= (LitInt 0) |i#1_20|) (< |i#1_20| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1_20|) (< |i#1_20| |nchildren#1_3@@6|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@4 ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#1_3@@6|) (IndexField |i#1_20|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |children#1_3@@6|)))))) :qid |MutableB.183:18| :skolemid |1346| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@4 |children#1_3@@6|) (IndexField |i#1_20|)))) ))))))))) :lblneg @296) (=> (and (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@4 |node#0@@101|) (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@4 |node#0@@101|)) (and (! (or %lbl%@297 (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@4 |node#0@@101|))) :lblneg @297) (=> (MutableBtreeBulkOperations.MB.Model.Abs.Node.Index_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@4 |node#0@@101|)) (=> (= |newtype$check#1_4@1| (LitInt 1)) (and (! (or %lbl%@298  (and (<= (LitInt 0) |newtype$check#1_4@1|) (< |newtype$check#1_4@1| 18446744073709551616))) :lblneg @298) (=> (and (<= (LitInt 0) |newtype$check#1_4@1|) (< |newtype$check#1_4@1| 18446744073709551616)) (=> (= |newtype$check#1_5@1| (+ |i#63@1| 1)) (and (! (or %lbl%@299  (and (<= (LitInt 0) |newtype$check#1_5@1|) (< |newtype$check#1_5@1| 18446744073709551616))) :lblneg @299) (=> (and (<= (LitInt 0) |newtype$check#1_5@1|) (< |newtype$check#1_5@1| 18446744073709551616)) (and (! (or %lbl%@300  (and (<= 0 (+ |i#63@1| 1)) (<= (+ |i#63@1| 1) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@4 |node#0@@101|)))))) :lblneg @300) (=> (and (<= 0 (+ |i#63@1| 1)) (<= (+ |i#63@1| 1) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@4 |node#0@@101|))))) (=> (and (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@4 |node#0@@101|) (= |nodes##1_1@1| (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@4 |node#0@@101|)) (+ |i#63@1| 1)))) (and (! (or %lbl%@301 (forall (($o@@103 T@U) ($f@@51 T@U) ) (! (let ((alpha@@48 (FieldTypeInv0 (type $f@@51)))) (=> (and (and (= (type $o@@103) refType) (= (type $f@@51) (FieldType alpha@@48))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@103 $f@@51)))) :qid |MutableB.104:41| :skolemid |1351| :no-pattern (type $o@@103) :no-pattern (type $f@@51) :no-pattern (U_2_int $o@@103) :no-pattern (U_2_bool $o@@103) :no-pattern (U_2_int $f@@51) :no-pattern (U_2_bool $f@@51) ))) :lblneg @301) (=> (forall (($o@@104 T@U) ($f@@52 T@U) ) (! (let ((alpha@@49 (FieldTypeInv0 (type $f@@52)))) (=> (and (and (= (type $o@@104) refType) (= (type $f@@52) (FieldType alpha@@49))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@104 $f@@52)))) :qid |MutableB.104:41| :skolemid |1351| :no-pattern (type@@0 $o@@85) :no-pattern (type@@0 $f@@35) :no-pattern (type $o@@104) :no-pattern (type $f@@52) :no-pattern (U_2_int $o@@104) :no-pattern (U_2_bool $o@@104) :no-pattern (U_2_int $f@@52) :no-pattern (U_2_bool $f@@52) )) (and (! (or %lbl%@302 (forall ((|i#0@@172| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@172|) (< |i#0@@172| (|Seq#Length| |nodes##1_1@1|))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS ($LS $LZ)) ($Unbox DatatypeTypeType (|Seq#Index| |nodes##1_1@1| |i#0@@172|))))) :qid |BtreeMod.1651:21| :skolemid |3120| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes##1_1@1| |i#0@@172|))) ))) :lblneg @302) (=> (forall ((|i#0@@173| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@173|) (< |i#0@@173| (|Seq#Length| |nodes##1_1@1|))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS ($LS $LZ)) ($Unbox DatatypeTypeType (|Seq#Index| |nodes##1_1@1| |i#0@@173|))))) :qid |BtreeMod.1651:21| :skolemid |3120| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |nodes##1_1@1| |i#0@@173|))) )) (and (! (or %lbl%@303 (< 0 (|Seq#Length| |nodes##1_1@1|))) :lblneg @303) (=> (< 0 (|Seq#Length| |nodes##1_1@1|)) (=> (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (=> (and (and (and (and (and (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#canCall| |nodes##1_1@1|) (_System.Tuple2.___hMake2_q (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) |nodes##1_1@1|))) (|Sequences.__default.Flatten#canCall| (TSeq Tclass.NativeTypes.byte) ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) |nodes##1_1@1|))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes##1_1@1|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#canCall| (Sequences.__default.DropLast Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes##1_1@1|))) (_System.Tuple2.___hMake2_q (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (Sequences.__default.DropLast Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes##1_1@1|)))) (|Sequences.__default.Flatten#canCall| (TSeq Tclass.NativeTypes.byte) ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (Sequences.__default.DropLast Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes##1_1@1|)))))) (and (and (|Sequences.__default.Last#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes##1_1@1|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes##1_1@1|)))) (_System.Tuple2.___hMake2_q (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes##1_1@1|))))))) (|Seq#Equal| (Sequences.__default.Flatten (TSeq Tclass.NativeTypes.byte) StartFuelAssert_Sequences._default.Flatten ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS ($LS $LZ)) |nodes##1_1@1|)))) (|Seq#Append| (Sequences.__default.Flatten (TSeq Tclass.NativeTypes.byte) StartFuelAssert_Sequences._default.Flatten ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS ($LS $LZ)) (Sequences.__default.DropLast Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes##1_1@1|))))) ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes##1_1@1|)))))))) (and (and (and (and (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#canCall| |nodes##1_1@1|) (_System.Tuple2.___hMake2_q (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) |nodes##1_1@1|))) (|Sequences.__default.Flatten#canCall| |#$Value| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) |nodes##1_1@1|))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes##1_1@1|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#canCall| (Sequences.__default.DropLast Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes##1_1@1|))) (_System.Tuple2.___hMake2_q (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (Sequences.__default.DropLast Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes##1_1@1|)))) (|Sequences.__default.Flatten#canCall| |#$Value| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (Sequences.__default.DropLast Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes##1_1@1|)))))) (and (and (|Sequences.__default.Last#canCall| Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes##1_1@1|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes##1_1@1|)))) (_System.Tuple2.___hMake2_q (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes##1_1@1|))))))) (and (|Seq#Equal| (Sequences.__default.Flatten |#$Value| StartFuelAssert_Sequences._default.Flatten ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS ($LS $LZ)) |nodes##1_1@1|)))) (|Seq#Append| (Sequences.__default.Flatten |#$Value| StartFuelAssert_Sequences._default.Flatten ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS ($LS $LZ)) (Sequences.__default.DropLast Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes##1_1@1|))))) ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.MutableBtreeBulkOperations.MB.Model.Abs.Node |nodes##1_1@1|))))))) (= $Heap@4 $Heap@5)))) (and (! (or %lbl%@304 (forall (($o@@105 T@U) ($f@@53 T@U) ) (! (let ((alpha@@50 (FieldTypeInv0 (type $f@@53)))) (=> (and (and (= (type $o@@105) refType) (= (type $f@@53) (FieldType alpha@@50))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@105 $f@@53)))) :qid |MutableB.105:17| :skolemid |1352| :no-pattern (type $o@@105) :no-pattern (type $f@@53) :no-pattern (U_2_int $o@@105) :no-pattern (U_2_bool $o@@105) :no-pattern (U_2_int $f@@53) :no-pattern (U_2_bool $f@@53) ))) :lblneg @304) (=> (forall (($o@@106 T@U) ($f@@54 T@U) ) (! (let ((alpha@@51 (FieldTypeInv0 (type $f@@54)))) (=> (and (and (= (type $o@@106) refType) (= (type $f@@54) (FieldType alpha@@51))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@106 $f@@54)))) :qid |MutableB.105:17| :skolemid |1352| :no-pattern (type@@0 $o@@86) :no-pattern (type@@0 $f@@36) :no-pattern (type $o@@106) :no-pattern (type $f@@54) :no-pattern (U_2_int $o@@106) :no-pattern (U_2_bool $o@@106) :no-pattern (U_2_int $f@@54) :no-pattern (U_2_bool $f@@54) )) (and (! (or %lbl%@305  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@101|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))))) :lblneg @305) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@101|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) (and (! (or %lbl%@306  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) |#$Value| (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @306) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) |#$Value| (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))) (and (! (or %lbl%@307  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height)) (LitInt 0)))))) :lblneg @307) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height)) (LitInt 0))))) (and (! (or %lbl%@308  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (LitInt 0) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))) :lblneg @308) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (LitInt 0) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))) (and (! (or %lbl%@309  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf))))) :lblneg @309) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf)))) (and (! (or %lbl%@310  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @310) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))) (and (! (or %lbl%@311  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :lblneg @311) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))) (and (! (or %lbl%@312  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @312) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true)))))) (and (! (or %lbl%@313  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))) :lblneg @313) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true)))))) (and (! (or %lbl%@314  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#0@@4| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@101|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box |children#0@@4|)) (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr))))))) :lblneg @314) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#0@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node#0@@101|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box |children#0@@5|)) (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr)))))) (and (! (or %lbl%@315  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#0@@3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (< 0 |nchildren#0@@3|)))))) :lblneg @315) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#0@@4| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (< 0 |nchildren#0@@4|))))) (and (! (or %lbl%@316  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#0@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (<= |nchildren#0@@5| MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren)))))) :lblneg @316) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#0@@6| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (<= |nchildren#0@@6| MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren))))) (and (! (or %lbl%@317  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#0@@6| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren (_System.array.Length |children#0@@6|))))))) :lblneg @317) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#0@@7| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren (_System.array.Length |children#0@@7|)))))) (and (! (or %lbl%@318  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (- MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren 1)))))) :lblneg @318) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (- MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren 1))))) (and (! (or %lbl%@319  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#0@@7| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#0@@8| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#0@@174| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@174|) (< |i#0@@174| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#0@@174|) (< |i#0@@174| |nchildren#0@@7|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@8|) (IndexField |i#0@@174|))) null)))) :qid |MutableB.178:18| :skolemid |3236| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@8|) (IndexField |i#0@@174|)))) )))))))) :lblneg @319) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#0@@8| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#0@@9| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#0@@175| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@175|) (< |i#0@@175| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#0@@175|) (< |i#0@@175| |nchildren#0@@8|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@9|) (IndexField |i#0@@175|))) null)))) :qid |MutableB.178:18| :skolemid |3236| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@9|) (IndexField |i#0@@175|)))) ))))))) (and (! (or %lbl%@320  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#0@@9| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#0@@10| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@5 (|Seq#Take| (|Seq#FromArray| $Heap@5 |children#0@@10|) |nchildren#0@@9|) (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))))))))) :lblneg @320) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#0@@10| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#0@@11| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@5 (|Seq#Take| (|Seq#FromArray| $Heap@5 |children#0@@11|) |nchildren#0@@10|) (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height)))))))) (and (! (or %lbl%@321  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#0@@11| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#0@@12| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#1@@83| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@83|) (< |i#1@@83| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1@@83|) (< |i#1@@83| |nchildren#0@@11|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@5 ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@12|) (IndexField |i#1@@83|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |node#0@@101|)))))) :qid |MutableB.180:18| :skolemid |3237| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@12|) (IndexField |i#1@@83|)))) )))))))) :lblneg @321) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#0@@12| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#0@@13| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#1@@84| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@84|) (< |i#1@@84| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#1@@84|) (< |i#1@@84| |nchildren#0@@12|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@5 ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@13|) (IndexField |i#1@@84|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |node#0@@101|)))))) :qid |MutableB.180:18| :skolemid |3237| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@13|) (IndexField |i#1@@84|)))) ))))))) (and (! (or %lbl%@322  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#0@@13| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#0@@14| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#2@@39| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@39|) (< |i#2@@39| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#2@@39|) (< |i#2@@39| |nchildren#0@@13|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@5 ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@14|) (IndexField |i#2@@39|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |3238| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@14|) (IndexField |i#2@@39|)))) )))))))) :lblneg @322) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#0@@14| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#0@@15| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#2@@40| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@40|) (< |i#2@@40| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#2@@40|) (< |i#2@@40| |nchildren#0@@14|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@5 ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@15|) (IndexField |i#2@@40|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |3238| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@15|) (IndexField |i#2@@40|)))) ))))))) (and (! (or %lbl%@323  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#0@@15| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#0@@16| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#3@@25| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@25|) (< |i#3@@25| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#3@@25|) (< |i#3@@25| |nchildren#0@@15|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@16|) (IndexField |i#3@@25|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@5 |children#0@@16|) |nchildren#0@@15|) |i#3@@25|))))) :qid |MutableB.182:24| :skolemid |3239| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@5 |children#0@@16|) |nchildren#0@@15|) |i#3@@25|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@16|) (IndexField |i#3@@25|)))) )) (U_2_bool (Lit (bool_2_U true)))))))))) :lblneg @323) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#0@@16| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#0@@17| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#3@@26| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@26|) (< |i#3@@26| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#3@@26|) (< |i#3@@26| |nchildren#0@@16|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@17|) (IndexField |i#3@@26|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@5 |children#0@@17|) |nchildren#0@@16|) |i#3@@26|))))) :qid |MutableB.182:24| :skolemid |3239| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@5 |children#0@@17|) |nchildren#0@@16|) |i#3@@26|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@17|) (IndexField |i#3@@26|)))) )) (U_2_bool (Lit (bool_2_U true))))))))) (and (! (or %lbl%@324  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#0@@17| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#0@@18| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#3@@27| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@27|) (< |i#3@@27| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#3@@27|) (< |i#3@@27| |nchildren#0@@17|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@18|) (IndexField |i#3@@27|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@5 |children#0@@18|) |nchildren#0@@17|) |i#3@@27|))))) :qid |MutableB.182:24| :skolemid |3239| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@5 |children#0@@18|) |nchildren#0@@17|) |i#3@@27|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@18|) (IndexField |i#3@@27|)))) )) (forall ((|i#4@@8| Int) ) (!  (=> (and (<= (LitInt 0) |i#4@@8|) (< |i#4@@8| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#4@@8|) (< |i#4@@8| |nchildren#0@@17|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@5 ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@18|) (IndexField |i#4@@8|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |children#0@@18|)))))) :qid |MutableB.183:18| :skolemid |3240| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@18|) (IndexField |i#4@@8|)))) ))))))))) :lblneg @324) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@5 |node#0@@101|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@5 |node#0@@101|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#0@@18| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#0@@19| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#3@@28| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@28|) (< |i#3@@28| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#3@@28|) (< |i#3@@28| |nchildren#0@@18|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@19|) (IndexField |i#3@@28|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@5 |children#0@@19|) |nchildren#0@@18|) |i#3@@28|))))) :qid |MutableB.182:24| :skolemid |3239| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@5 |children#0@@19|) |nchildren#0@@18|) |i#3@@28|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@19|) (IndexField |i#3@@28|)))) )) (forall ((|i#4@@9| Int) ) (!  (=> (and (<= (LitInt 0) |i#4@@9|) (< |i#4@@9| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#4@@9|) (< |i#4@@9| |nchildren#0@@18|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@5 ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@19|) (IndexField |i#4@@9|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |children#0@@19|)))))) :qid |MutableB.183:18| :skolemid |3240| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@5 |children#0@@19|) (IndexField |i#4@@9|)))) )))))))) (and (! (or %lbl%@325 (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) :lblneg @325) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (and (! (or %lbl%@326 (<= (LitInt 0) |i#63@1|)) :lblneg @326) (=> (<= (LitInt 0) |i#63@1|) (and (! (or %lbl%@327 (< |i#63@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) :lblneg @327) (=> (< |i#63@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@5 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (=> (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6)) (=> (and (and (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|))) null)) (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|))))) (and (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))) (and (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))) (ite (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))) MutableBtreeBulkOperations.MB.Abs.Node.contents))  (and (and (and (and (|Set#Equal| (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|))) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))) MutableBtreeBulkOperations.MB.Abs.Node.contents))))) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) |#$Value| (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))) MutableBtreeBulkOperations.MB.Abs.Node.contents))))) (= (U_2_int (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))) MutableBtreeBulkOperations.MB.Abs.Node.height)) (LitInt 0))) (and (and (<= (LitInt 0) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))) MutableBtreeBulkOperations.MB.Abs.Node.contents)) MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf)) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))  (and true (let ((|nchildren#1@@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (and true (let ((|children#1@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (and (and (and (and (and (and (and (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|))) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box |children#1@@1|)) (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr)) (and (and (< 0 |nchildren#1@@2|) (<= |nchildren#1@@2| MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren)) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren (_System.array.Length |children#1@@1|)))) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (- MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren 1))) (forall ((|i#5@@7| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@7|) (< |i#5@@7| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#5@@7|) (< |i#5@@7| |nchildren#1@@2|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#1@@1|) (IndexField |i#5@@7|))) null)))) :qid |MutableB.178:18| :skolemid |3250| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#1@@1|) (IndexField |i#5@@7|)))) ))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS $LZ) $Heap@6 (|Seq#Take| (|Seq#FromArray| $Heap@6 |children#1@@1|) |nchildren#1@@2|) (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))) MutableBtreeBulkOperations.MB.Abs.Node.height)))) (forall ((|i#6@@7| Int) ) (!  (=> (and (<= (LitInt 0) |i#6@@7|) (< |i#6@@7| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#6@@7|) (< |i#6@@7| |nchildren#1@@2|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#1@@1|) (IndexField |i#6@@7|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|))))))) :qid |MutableB.180:18| :skolemid |3251| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#1@@1|) (IndexField |i#6@@7|)))) ))) (forall ((|i#7@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#7@@2|) (< |i#7@@2| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#7@@2|) (< |i#7@@2| |nchildren#1@@2|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#1@@1|) (IndexField |i#7@@2|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |3252| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#1@@1|) (IndexField |i#7@@2|)))) ))) (and true (forall ((|i#9| Int) ) (!  (=> (and (<= (LitInt 0) |i#9|) (< |i#9| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#9|) (< |i#9| |nchildren#1@@2|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#1@@1|) (IndexField |i#9|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |children#1@@1|)))))) :qid |MutableB.183:18| :skolemid |3253| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#1@@1|) (IndexField |i#9|)))) )))))))))))) (=> (and (and (and (|$IsA#MutableBtreeBulkOperations.MB.Model.Abs.Node| ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node#0@@101|)) |i#63@1|))) (|$IsA#MutableBtreeBulkOperations.MB.Model.Abs.Node| (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))))) (and (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@6 |node#0@@101|) (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))))) (and (|MutableBtreeBulkOperations.MB.Model.Abs.Node#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node#0@@101|)) |i#63@1|)) (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|))))) (= $Heap@5 $Heap@6))) (and (! (or %lbl%@328 (not (= |node#0@@101| null))) :lblneg @328) (=> (not (= |node#0@@101| null)) (and (! (or %lbl%@329 (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) :lblneg @329) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (and (! (or %lbl%@330 (not (= (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) null))) :lblneg @330) (=> (not (= (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) null)) (and (! (or %lbl%@331  (and (<= 0 |i#63@1|) (< |i#63@1| (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))) :lblneg @331) (=> (and (<= 0 |i#63@1|) (< |i#63@1| (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))) (and (! (or %lbl%@332 ($Is ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|))) Tclass.MutableBtreeBulkOperations.MB.Abs.Node)) :lblneg @332) (=> ($Is ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|))) Tclass.MutableBtreeBulkOperations.MB.Abs.Node) (=> (= |node##1_1@1| ($Unbox refType (MapType1Select (MapType0Select $Heap@6 (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (IndexField |i#63@1|)))) (and (! (or %lbl%@333 (forall (($o@@107 T@U) ($f@@55 T@U) ) (! (let ((alpha@@52 (FieldTypeInv0 (type $f@@55)))) (=> (and (= (type $o@@107) refType) (= (type $f@@55) (FieldType alpha@@52))) (=> (and (and (not (= $o@@107 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@6 $o@@107) alloc))) (or (= $o@@107 |keys#0|) (= $o@@107 |values#0|))) (U_2_bool (MapType6Select $_Frame@0 $o@@107 $f@@55))))) :qid |MutableB.107:34| :skolemid |1353| :no-pattern (type $o@@107) :no-pattern (type $f@@55) :no-pattern (U_2_int $o@@107) :no-pattern (U_2_bool $o@@107) :no-pattern (U_2_int $f@@55) :no-pattern (U_2_bool $f@@55) ))) :lblneg @333) (=> (forall (($o@@108 T@U) ($f@@56 T@U) ) (! (let ((alpha@@53 (FieldTypeInv0 (type $f@@56)))) (=> (and (= (type $o@@108) refType) (= (type $f@@56) (FieldType alpha@@53))) (=> (and (and (not (= $o@@108 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@6 $o@@108) alloc))) (or (= $o@@108 |keys#0|) (= $o@@108 |values#0|))) (U_2_bool (MapType6Select $_Frame@0 $o@@108 $f@@56))))) :qid |MutableB.107:34| :skolemid |1353| :no-pattern (type@@0 $o@@87) :no-pattern (type@@0 $f@@37) :no-pattern (type $o@@108) :no-pattern (type $f@@56) :no-pattern (U_2_int $o@@108) :no-pattern (U_2_bool $o@@108) :no-pattern (U_2_int $f@@56) :no-pattern (U_2_bool $f@@56) )) (and (! (or %lbl%@334  (or (<= 0 (U_2_int (MapType1Select (MapType0Select $Heap@@137 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))) (= (U_2_int (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.height)) (U_2_int (MapType1Select (MapType0Select $Heap@@137 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))))) :lblneg @334) (=> (or (<= 0 (U_2_int (MapType1Select (MapType0Select $Heap@@137 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))) (= (U_2_int (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.height)) (U_2_int (MapType1Select (MapType0Select $Heap@@137 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height)))) (and (! (or %lbl%@335 (< (U_2_int (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.height)) (U_2_int (MapType1Select (MapType0Select $Heap@@137 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height)))) :lblneg @335) (=> (< (U_2_int (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.height)) (U_2_int (MapType1Select (MapType0Select $Heap@@137 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.height))) (=> (and (<= (LitInt 0) |call6formal@nextstart#0|) (< |call6formal@nextstart#0| 18446744073709551616)) (and (! (or %lbl%@336  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node##1_1@1|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))))))) :lblneg @336) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (|Set#Equal| (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node##1_1@1|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))))) (and (! (or %lbl%@337  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) |#$Value| (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))))) :lblneg @337) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) |#$Value| (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))))) (and (! (or %lbl%@338  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.height)) (LitInt 0)))))))) :lblneg @338) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (U_2_int (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.height)) (LitInt 0))))))) (and (! (or %lbl%@339  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (LitInt 0) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))))) :lblneg @339) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (LitInt 0) (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) (and (! (or %lbl%@340  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf))))))) :lblneg @340) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (<= (MutableBtreeBulkOperations.MB.Abs.NodeContents.nkeys (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf)))))) (and (! (or %lbl%@341  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))))) :lblneg @341) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxKeysPerLeaf (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))))) (and (! (or %lbl%@342  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))))) :lblneg @342) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.values (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.keys (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))))))) (and (! (or %lbl%@343  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))))) :lblneg @343) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true)))))))) (and (! (or %lbl%@344  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true))))))))) :lblneg @344) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (U_2_bool (Lit (bool_2_U true)))))))) (and (! (or %lbl%@345  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node##1_1@1|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box |children#5|)) (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.repr))))))))) :lblneg @345) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#5@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (|Set#Subset| (|Set#UnionOne| (|Set#UnionOne| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |node##1_1@1|)) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) ($Box |children#5@@0|)) (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.repr)))))))) (and (! (or %lbl%@346  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (< 0 |nchildren#5|)))))))) :lblneg @346) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#5@@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (< 0 |nchildren#5@@0|))))))) (and (! (or %lbl%@347  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#5@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (<= |nchildren#5@@1| MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren)))))))) :lblneg @347) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#5@@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (<= |nchildren#5@@2| MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren))))))) (and (! (or %lbl%@348  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#5@@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren (_System.array.Length |children#5@@1|))))))))) :lblneg @348) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|children#5@@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (= MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren (_System.array.Length |children#5@@2|)))))))) (and (! (or %lbl%@349  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (- MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren 1)))))))) :lblneg @349) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (= (_System.array.Length (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (- MutableBtreeBulkOperations.MB.Abs.__default.MaxChildren 1))))))) (and (! (or %lbl%@350  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#5@@3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#5@@3| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#45| Int) ) (!  (=> (and (<= (LitInt 0) |i#45|) (< |i#45| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#45|) (< |i#45| |nchildren#5@@3|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@3|) (IndexField |i#45|))) null)))) :qid |MutableB.178:18| :skolemid |1228| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@3|) (IndexField |i#45|)))) )))))))))) :lblneg @350) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#5@@4| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#5@@4| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#45@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#45@@0|) (< |i#45@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#45@@0|) (< |i#45@@0| |nchildren#5@@4|)) (not (= ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@4|) (IndexField |i#45@@0|))) null)))) :qid |MutableB.178:18| :skolemid |1228| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@4|) (IndexField |i#45@@0|)))) ))))))))) (and (! (or %lbl%@351  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#5@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#5@@5| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@6 (|Seq#Take| (|Seq#FromArray| $Heap@6 |children#5@@5|) |nchildren#5@@5|) (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.height))))))))))) :lblneg @351) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#5@@6| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#5@@6| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (MutableBtreeBulkOperations.MB.Abs.__default.WFShapeChildren ($LS ($LS $LZ)) $Heap@6 (|Seq#Take| (|Seq#FromArray| $Heap@6 |children#5@@6|) |nchildren#5@@6|) (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.repr) (U_2_int (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.height)))))))))) (and (! (or %lbl%@352  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#5@@7| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#5@@7| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#46| Int) ) (!  (=> (and (<= (LitInt 0) |i#46|) (< |i#46| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#46|) (< |i#46| |nchildren#5@@7|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@7|) (IndexField |i#46|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |node##1_1@1|)))))) :qid |MutableB.180:18| :skolemid |1229| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@7|) (IndexField |i#46|)))) )))))))))) :lblneg @352) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#5@@8| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#5@@8| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#46@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#46@@0|) (< |i#46@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#46@@0|) (< |i#46@@0| |nchildren#5@@8|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@8|) (IndexField |i#46@@0|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |node##1_1@1|)))))) :qid |MutableB.180:18| :skolemid |1229| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@8|) (IndexField |i#46@@0|)))) ))))))))) (and (! (or %lbl%@353  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#5@@9| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#5@@9| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#47| Int) ) (!  (=> (and (<= (LitInt 0) |i#47|) (< |i#47| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#47|) (< |i#47| |nchildren#5@@9|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@9|) (IndexField |i#47|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |1230| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@9|) (IndexField |i#47|)))) )))))))))) :lblneg @353) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#5@@10| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#5@@10| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (forall ((|i#47@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#47@@0|) (< |i#47@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#47@@0|) (< |i#47@@0| |nchildren#5@@10|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@10|) (IndexField |i#47@@0|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box (MutableBtreeBulkOperations.MB.Abs.NodeContents.pivots (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))))))) :qid |MutableB.181:18| :skolemid |1230| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@10|) (IndexField |i#47@@0|)))) ))))))))) (and (! (or %lbl%@354  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#5@@11| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#5@@11| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#48| Int) ) (!  (=> (and (<= (LitInt 0) |i#48|) (< |i#48| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#48|) (< |i#48| |nchildren#5@@11|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@11|) (IndexField |i#48|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@6 |children#5@@11|) |nchildren#5@@11|) |i#48|))))) :qid |MutableB.182:24| :skolemid |1231| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@6 |children#5@@11|) |nchildren#5@@11|) |i#48|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@11|) (IndexField |i#48|)))) )) (U_2_bool (Lit (bool_2_U true)))))))))))) :lblneg @354) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#5@@12| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#5@@12| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#48@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#48@@0|) (< |i#48@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#48@@0|) (< |i#48@@0| |nchildren#5@@12|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@12|) (IndexField |i#48@@0|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@6 |children#5@@12|) |nchildren#5@@12|) |i#48@@0|))))) :qid |MutableB.182:24| :skolemid |1231| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@6 |children#5@@12|) |nchildren#5@@12|) |i#48@@0|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@12|) (IndexField |i#48@@0|)))) )) (U_2_bool (Lit (bool_2_U true))))))))))) (and (! (or %lbl%@355  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#5@@13| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#5@@13| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#48@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#48@@1|) (< |i#48@@1| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#48@@1|) (< |i#48@@1| |nchildren#5@@13|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@13|) (IndexField |i#48@@1|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@6 |children#5@@13|) |nchildren#5@@13|) |i#48@@1|))))) :qid |MutableB.182:24| :skolemid |1231| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@6 |children#5@@13|) |nchildren#5@@13|) |i#48@@1|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@13|) (IndexField |i#48@@1|)))) )) (forall ((|i#49| Int) ) (!  (=> (and (<= (LitInt 0) |i#49|) (< |i#49| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#49|) (< |i#49| |nchildren#5@@13|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@13|) (IndexField |i#49|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |children#5@@13|)))))) :qid |MutableB.183:18| :skolemid |1232| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@13|) (IndexField |i#49|)))) ))))))))))) :lblneg @355) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WFShape#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@6 |node##1_1@1|) (=> (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (let ((|nchildren#5@@14| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (let ((|children#5@@14| (MutableBtreeBulkOperations.MB.Abs.NodeContents.children (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> (forall ((|i#48@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#48@@2|) (< |i#48@@2| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#48@@2|) (< |i#48@@2| |nchildren#5@@14|)) (= ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@14|) (IndexField |i#48@@2|))) ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@6 |children#5@@14|) |nchildren#5@@14|) |i#48@@2|))))) :qid |MutableB.182:24| :skolemid |1231| :pattern ( ($Unbox refType (|Seq#Index| (|Seq#Take| (|Seq#FromArray| $Heap@6 |children#5@@14|) |nchildren#5@@14|) |i#48@@2|))) :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@14|) (IndexField |i#48@@2|)))) )) (forall ((|i#49@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#49@@0|) (< |i#49@@0| 18446744073709551616)) (=> (and (<= (LitInt 0) |i#49@@0|) (< |i#49@@0| |nchildren#5@@14|)) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@6 ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@14|) (IndexField |i#49@@0|)))) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |children#5@@14|)))))) :qid |MutableB.183:18| :skolemid |1232| :pattern ( ($Unbox refType (MapType1Select (MapType0Select $Heap@6 |children#5@@14|) (IndexField |i#49@@0|)))) )))))))))) (and (! (or %lbl%@356  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (or (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (=> (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)))))))))) :lblneg @356) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (or (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (=> (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))) (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.values (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))))))))) (and (! (or %lbl%@357  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (or (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (=> (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))))))))) :lblneg @357) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (or (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (=> (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (MutableBtreeBulkOperations.MB.Model.Abs.Node.keys (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)))))))) (and (! (or %lbl%@358  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (or (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (=> (not (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))) (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))) 1)))))))) :lblneg @358) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (or (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (=> (not (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))) (= (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))) (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))) 1))))))) (and (! (or %lbl%@359  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (or (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (=> (not (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))))))))) :lblneg @359) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (or (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (=> (not (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (MutableBtreeBulkOperations.MB.Model.Abs.Node.pivots (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)))))))) (and (! (or %lbl%@360  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (or (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (=> (not (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))) (forall ((|i#50| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#50|) (< |i#50| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS ($LS $LZ)) ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) |i#50|))))) :qid |BtreeMod.71:18| :skolemid |1237| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) |i#50|))) )))))))) :lblneg @360) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (or (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (=> (not (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))) (forall ((|i#50@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#50@@0|) (< |i#50@@0| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS ($LS $LZ)) ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) |i#50@@0|))))) :qid |BtreeMod.71:18| :skolemid |1237| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) |i#50@@0|))) ))))))) (and (! (or %lbl%@361  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (or (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (=> (not (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))) (forall ((|i#51| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#51|) (< |i#51| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))))) (not (|Set#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) |i#51|))) (|Set#Empty| BoxType))))) :qid |BtreeMod.72:18| :skolemid |1239| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) |i#51|))) )))))))) :lblneg @361) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (or (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (=> (not (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))) (forall ((|i#51@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#51@@0|) (< |i#51@@0| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))))) (not (|Set#Equal| (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeys StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) |i#51@@0|))) (|Set#Empty| BoxType))))) :qid |BtreeMod.72:18| :skolemid |1239| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) |i#51@@0|))) ))))))) (and (! (or %lbl%@362  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (or (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (=> (not (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))) (forall ((|i#52| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#52|) (< |i#52| (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))) 1))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|) |i#52|))) :qid |BtreeMod.73:18| :skolemid |1241| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|) |i#52|)) )))))))) :lblneg @362) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (or (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (=> (not (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))) (forall ((|i#52@@0| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#52@@0|) (< |i#52@@0| (- (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))) 1))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|) |i#52@@0|))) :qid |BtreeMod.73:18| :skolemid |1241| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysBelowBound (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|) |i#52@@0|)) ))))))) (and (! (or %lbl%@363  (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (or (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (=> (not (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))) (forall ((|i#53| Int) ) (!  (=> true (=> (and (< 0 |i#53|) (< |i#53| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|) |i#53|))) :qid |BtreeMod.74:18| :skolemid |1243| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|) |i#53|)) )))))))) :lblneg @363) (=> (=> (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@6 |node##1_1@1|) (or (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@6 |node##1_1@1|) (=> (|MutableBtreeBulkOperations.MB.Model.Abs.__default.WF#canCall| (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (or (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|)) (=> (not (MutableBtreeBulkOperations.MB.Model.Abs.Node.Leaf_q (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))) (forall ((|i#53@@0| Int) ) (!  (=> true (=> (and (< 0 |i#53@@0|) (< |i#53@@0| (|Seq#Length| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|))))) (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|) |i#53@@0|))) :qid |BtreeMod.74:18| :skolemid |1243| :pattern ( (MutableBtreeBulkOperations.MB.Model.Abs.__default.AllKeysAboveBound (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@6 |node##1_1@1|) |i#53@@0|)) ))))))) (and (! (or %lbl%@364  (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) |#$Value| |keys#0| |values#0|))) :lblneg @364) (=> (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) |#$Value| |keys#0| |values#0|)) (and (! (or %lbl%@365 (= (_System.array.Length |keys#0|) (_System.array.Length |values#0|))) :lblneg @365) (=> (= (_System.array.Length |keys#0|) (_System.array.Length |values#0|)) (and (! (or %lbl%@366  (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |keys#0|))))) :lblneg @366) (=> (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |keys#0|)))) (and (! (or %lbl%@367  (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |values#0|))))) :lblneg @367) (=> (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@6 |node##1_1@1|) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |values#0|)))) (and (! (or %lbl%@368 (<= (+ |nextstart#0@1| (MutableBtreeBulkOperations.__default.NumElements $Heap@6 |node##1_1@1|)) (_System.array.Length |keys#0|))) :lblneg @368) (=> (<= (+ |nextstart#0@1| (MutableBtreeBulkOperations.__default.NumElements $Heap@6 |node##1_1@1|)) (_System.array.Length |keys#0|)) (and (! (or %lbl%@369 (< (+ |nextstart#0@1| (MutableBtreeBulkOperations.__default.NumElements $Heap@6 |node##1_1@1|)) NativeTypes.__default.Uint64UpperBound)) :lblneg @369) (=> (< (+ |nextstart#0@1| (MutableBtreeBulkOperations.__default.NumElements $Heap@6 |node##1_1@1|)) NativeTypes.__default.Uint64UpperBound) (=> (and ($IsGoodHeap $Heap@7) ($IsHeapAnchor $Heap@7)) (=> (and (and (and (<= (LitInt 0) |call6formal@nextstart#0@0|) (< |call6formal@nextstart#0@0| 18446744073709551616)) (|MutableBtreeBulkOperations.__default.NumElements#canCall| $Heap@7 |node##1_1@1|)) (and (= |call6formal@nextstart#0@0| (+ |nextstart#0@1| (MutableBtreeBulkOperations.__default.NumElements $Heap@7 |node##1_1@1|))) (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@7 |keys#0|) |nextstart#0@1|) (|Seq#Take| (|Seq#FromArray| $Heap@6 |keys#0|) |nextstart#0@1|)))) (=> (and (and (and (and (and (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@7 |node##1_1@1|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq#canCall| (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@7 |node##1_1@1|))) (_System.Tuple2.___hMake2_q (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@7 |node##1_1@1|)))) (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@7 |keys#0|) |call6formal@nextstart#0@0|) |nextstart#0@1|) ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@7 |node##1_1@1|)))))) (and (|Seq#Equal| (|Seq#Drop| (|Seq#FromArray| $Heap@7 |keys#0|) |call6formal@nextstart#0@0|) (|Seq#Drop| (|Seq#FromArray| $Heap@6 |keys#0|) |call6formal@nextstart#0@0|)) (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@7 |values#0|) |nextstart#0@1|) (|Seq#Take| (|Seq#FromArray| $Heap@6 |values#0|) |nextstart#0@1|)))) (and (and (and (and (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@7 |node##1_1@1|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq#canCall| (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@7 |node##1_1@1|))) (_System.Tuple2.___hMake2_q (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@7 |node##1_1@1|)))) (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@7 |values#0|) |call6formal@nextstart#0@0|) |nextstart#0@1|) ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeq StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@7 |node##1_1@1|)))))) (and (and (|Seq#Equal| (|Seq#Drop| (|Seq#FromArray| $Heap@7 |values#0|) |call6formal@nextstart#0@0|) (|Seq#Drop| (|Seq#FromArray| $Heap@6 |values#0|) |call6formal@nextstart#0@0|)) (forall (($o@@109 T@U) ) (!  (=> (= (type $o@@109) refType) (=> (and (not (= $o@@109 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@6 $o@@109) alloc))) (or (= (MapType0Select $Heap@7 $o@@109) (MapType0Select $Heap@6 $o@@109)) (or (= $o@@109 |keys#0|) (= $o@@109 |values#0|))))) :qid |MutableB.56:10| :skolemid |1249| :pattern ( (MapType0Select $Heap@7 $o@@109)) ))) (and ($HeapSucc $Heap@6 $Heap@7) (= |newtype$check#1_6@1| (LitInt 1)))))) (and (! (or %lbl%@370  (and (<= (LitInt 0) |newtype$check#1_6@1|) (< |newtype$check#1_6@1| 18446744073709551616))) :lblneg @370) (=> (and (<= (LitInt 0) |newtype$check#1_6@1|) (< |newtype$check#1_6@1| 18446744073709551616)) (=> (= |newtype$check#1_7@1| (+ |i#63@1| 1)) (and (! (or %lbl%@371  (and (<= (LitInt 0) |newtype$check#1_7@1|) (< |newtype$check#1_7@1| 18446744073709551616))) :lblneg @371) (=> (and (<= (LitInt 0) |newtype$check#1_7@1|) (< |newtype$check#1_7@1| 18446744073709551616)) (=> (= |i#63@2| (+ |i#63@1| 1)) (and (! (or %lbl%@372 (forall (($o@@110 T@U) ($f@@57 T@U) ) (! (let ((alpha@@54 (FieldTypeInv0 (type $f@@57)))) (=> (and (and (= (type $o@@110) refType) (= (type $f@@57) (FieldType alpha@@54))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@110 $f@@57)))) :qid |MutableB.109:27| :skolemid |1354| :no-pattern (type $o@@110) :no-pattern (type $f@@57) :no-pattern (U_2_int $o@@110) :no-pattern (U_2_bool $o@@110) :no-pattern (U_2_int $f@@57) :no-pattern (U_2_bool $f@@57) ))) :lblneg @372) (=> (forall (($o@@111 T@U) ($f@@58 T@U) ) (! (let ((alpha@@55 (FieldTypeInv0 (type $f@@58)))) (=> (and (and (= (type $o@@111) refType) (= (type $f@@58) (FieldType alpha@@55))) false) (U_2_bool (MapType6Select $_Frame@0 $o@@111 $f@@58)))) :qid |MutableB.109:27| :skolemid |1354| :no-pattern (type@@0 $o@@88) :no-pattern (type@@0 $f@@38) :no-pattern (type $o@@111) :no-pattern (type $f@@58) :no-pattern (U_2_int $o@@111) :no-pattern (U_2_bool $o@@111) :no-pattern (U_2_int $f@@58) :no-pattern (U_2_bool $f@@58) )) (=> (and ($IsGoodHeap $Heap@8) ($IsHeapAnchor $Heap@8)) (=> (and (and (= $Heap@7 $Heap@8) (= StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq ($LS MoreFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq0))) (and (= StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq ($LS ($LS MoreFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq0))) (= (AsFuelBottom MoreFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq0) MoreFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq0))) (and (! (or %lbl%@373  (or (<= 0 |$decr$loop#00@1|) (= (- (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@8 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) |i#63@2|) |$decr$loop#00@1|))) :lblneg @373) (=> (or (<= 0 |$decr$loop#00@1|) (= (- (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@8 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) |i#63@2|) |$decr$loop#00@1|)) (and (! (or %lbl%@374 (< (- (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@8 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) |i#63@2|) |$decr$loop#00@1|)) :lblneg @374) (=> (< (- (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@8 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) |i#63@2|) |$decr$loop#00@1|) (=> (and (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@8 |node#0@@101|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren#canCall| (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@8 |node#0@@101|)) |i#63@2|))) (=> (and (and (and (and (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@8 |node#0@@101|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#canCall| (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@8 |node#0@@101|)) |i#63@2|))) (_System.Tuple2.___hMake2_q (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@8 |node#0@@101|)) |i#63@2|)))) (|Sequences.__default.Flatten#canCall| (TSeq Tclass.NativeTypes.byte) ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@8 |node#0@@101|)) |i#63@2|)))))) (and (and (and (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@8 |node#0@@101|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#canCall| (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@8 |node#0@@101|)) |i#63@2|))) (_System.Tuple2.___hMake2_q (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@8 |node#0@@101|)) |i#63@2|)))) (|Sequences.__default.Flatten#canCall| |#$Value| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@8 |node#0@@101|)) |i#63@2|))))))) (and (! (or %lbl%@375  (=> |$w$loop#0@0| (<= (LitInt 0) |i#63@2|))) :lblneg @375) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |i#63@2|)) (and (! (or %lbl%@376  (=> |$w$loop#0@0| (<= |i#63@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@8 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))) :lblneg @376) (=> (=> |$w$loop#0@0| (<= |i#63@2| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@8 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (and (! (or %lbl%@377  (=> |$w$loop#0@0| (= |call6formal@nextstart#0@0| (+ |start#0| (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren ($LS ($LS $LZ)) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@8 |node#0@@101|)) |i#63@2|)))))) :lblneg @377) (=> (=> |$w$loop#0@0| (= |call6formal@nextstart#0@0| (+ |start#0| (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren ($LS ($LS $LZ)) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@8 |node#0@@101|)) |i#63@2|))))) (and (! (or %lbl%@378  (=> |$w$loop#0@0| (<= |call6formal@nextstart#0@0| (_System.array.Length |keys#0|)))) :lblneg @378) (=> (=> |$w$loop#0@0| (<= |call6formal@nextstart#0@0| (_System.array.Length |keys#0|))) (and (! (or %lbl%@379  (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@8 |keys#0|) |start#0|) (|Seq#Take| (|Seq#FromArray| $Heap@@137 |keys#0|) |start#0|)))) :lblneg @379) (=> (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@8 |keys#0|) |start#0|) (|Seq#Take| (|Seq#FromArray| $Heap@@137 |keys#0|) |start#0|))) (and (! (or %lbl%@380  (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@8 |keys#0|) |call6formal@nextstart#0@0|) |start#0|) (Sequences.__default.Flatten (TSeq Tclass.NativeTypes.byte) StartFuelAssert_Sequences._default.Flatten ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS ($LS $LZ)) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@8 |node#0@@101|)) |i#63@2|)))))))) :lblneg @380) (=> (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@8 |keys#0|) |call6formal@nextstart#0@0|) |start#0|) (Sequences.__default.Flatten (TSeq Tclass.NativeTypes.byte) StartFuelAssert_Sequences._default.Flatten ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS ($LS $LZ)) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@8 |node#0@@101|)) |i#63@2|))))))) (and (! (or %lbl%@381  (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Drop| (|Seq#FromArray| $Heap@8 |keys#0|) |call6formal@nextstart#0@0|) (|Seq#Drop| (|Seq#FromArray| $Heap@@137 |keys#0|) |call6formal@nextstart#0@0|)))) :lblneg @381) (=> (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Drop| (|Seq#FromArray| $Heap@8 |keys#0|) |call6formal@nextstart#0@0|) (|Seq#Drop| (|Seq#FromArray| $Heap@@137 |keys#0|) |call6formal@nextstart#0@0|))) (and (! (or %lbl%@382  (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@8 |values#0|) |start#0|) (|Seq#Take| (|Seq#FromArray| $Heap@@137 |values#0|) |start#0|)))) :lblneg @382) (=> (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@8 |values#0|) |start#0|) (|Seq#Take| (|Seq#FromArray| $Heap@@137 |values#0|) |start#0|))) (and (! (or %lbl%@383  (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@8 |values#0|) |call6formal@nextstart#0@0|) |start#0|) (Sequences.__default.Flatten |#$Value| StartFuelAssert_Sequences._default.Flatten ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS ($LS $LZ)) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@8 |node#0@@101|)) |i#63@2|)))))))) :lblneg @383) (=> (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@8 |values#0|) |call6formal@nextstart#0@0|) |start#0|) (Sequences.__default.Flatten |#$Value| StartFuelAssert_Sequences._default.Flatten ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS ($LS $LZ)) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@8 |node#0@@101|)) |i#63@2|))))))) (! (or %lbl%@384  (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Drop| (|Seq#FromArray| $Heap@8 |values#0|) |call6formal@nextstart#0@0|) (|Seq#Drop| (|Seq#FromArray| $Heap@@137 |values#0|) |call6formal@nextstart#0@0|)))) :lblneg @384)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((anon17_Else_correct  (=> (! (and %lbl%+385 true) :lblpos +385) (=> |$w$loop#0@0| (and (! (or %lbl%@386 (not (= |node#0@@101| null))) :lblneg @386) (=> (not (= |node#0@@101| null)) (and (! (or %lbl%@387 (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) :lblneg @387) (=> (MutableBtreeBulkOperations.MB.Abs.NodeContents.Index_q (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) (and anon19_Then_correct anon19_Else_correct))))))))) (let ((anon16_LoopBody_correct  (=> (! (and %lbl%+388 true) :lblpos +388) (and anon17_Then_correct anon17_Else_correct)))) (let ((anon16_LoopDone_correct  (=> (! (and %lbl%+389 true) :lblpos +389) true))) (let ((anon16_LoopHead_correct  (=> (! (and %lbl%+390 true) :lblpos +390) (=> (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (and (<= (LitInt 0) |$rhs##1_0@0|) (< |$rhs##1_0@0| 18446744073709551616))) (=> (and (and (and (and (and (<= (LitInt 0) |nextstart#0@1|) (< |nextstart#0@1| 18446744073709551616)) (and (<= (LitInt 0) |i#63@1|) (< |i#63@1| 18446744073709551616))) (and (and (not false) (<= 0 |i#63@1|)) (= |newtype$check#4@0| 0))) (and (and (and (=> |$w$loop#0@0| true) (=> |$w$loop#0@0| (<= (LitInt 0) |i#63@1|))) (and (=> |$w$loop#0@0| (<= |i#63@1| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (=> |$w$loop#0@0| (and (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@2 |node#0@@101|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren#canCall| (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|)))))) (and (and (=> |$w$loop#0@0| (= |nextstart#0@1| (+ |start#0| (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren ($LS ($LS $LZ)) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|))))) (=> |$w$loop#0@0| true)) (and (=> |$w$loop#0@0| (<= |nextstart#0@1| (_System.array.Length |keys#0|))) (=> |$w$loop#0@0| true))))) (and (and (and (and (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@2 |keys#0|) |start#0|) (|Seq#Take| (|Seq#FromArray| $Heap@@137 |keys#0|) |start#0|))) (=> |$w$loop#0@0| (and (and (and (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@2 |node#0@@101|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#canCall| (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|))) (_System.Tuple2.___hMake2_q (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|)))) (|Sequences.__default.Flatten#canCall| (TSeq Tclass.NativeTypes.byte) ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|)))))))) (and (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@2 |keys#0|) |nextstart#0@1|) |start#0|) (Sequences.__default.Flatten (TSeq Tclass.NativeTypes.byte) StartFuelAssert_Sequences._default.Flatten ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS ($LS $LZ)) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|))))))) (=> |$w$loop#0@0| true))) (and (and (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Drop| (|Seq#FromArray| $Heap@2 |keys#0|) |nextstart#0@1|) (|Seq#Drop| (|Seq#FromArray| $Heap@@137 |keys#0|) |nextstart#0@1|))) (=> |$w$loop#0@0| true)) (and (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@2 |values#0|) |start#0|) (|Seq#Take| (|Seq#FromArray| $Heap@@137 |values#0|) |start#0|))) (=> |$w$loop#0@0| (and (and (and (|MutableBtreeBulkOperations.MB.Abs.__default.I#canCall| $Heap@2 |node#0@@101|) (|MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren#canCall| (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|))) (_System.Tuple2.___hMake2_q (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|)))) (|Sequences.__default.Flatten#canCall| |#$Value| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS $LZ) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|)))))))))) (and (and (and (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@2 |values#0|) |nextstart#0@1|) |start#0|) (Sequences.__default.Flatten |#$Value| StartFuelAssert_Sequences._default.Flatten ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS ($LS $LZ)) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@2 |node#0@@101|)) |i#63@1|))))))) (=> |$w$loop#0@0| true)) (and (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Drop| (|Seq#FromArray| $Heap@2 |values#0|) |nextstart#0@1|) (|Seq#Drop| (|Seq#FromArray| $Heap@@137 |values#0|) |nextstart#0@1|))) (forall (($o@@112 T@U) ) (!  (=> (= (type $o@@112) refType) (=> (and (not (= $o@@112 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@@137 $o@@112) alloc))) (or (= (MapType0Select $Heap@2 $o@@112) (MapType0Select $Heap@@137 $o@@112)) (or (= $o@@112 |keys#0|) (= $o@@112 |values#0|))))) :qid |MutableB.90:7| :skolemid |1310| :pattern ( (MapType0Select $Heap@2 $o@@112)) )))) (and (and ($HeapSucc $Heap@@137 $Heap@2) (forall (($o@@113 T@U) ($f@@59 T@U) ) (! (let ((alpha@@56 (FieldTypeInv0 (type $f@@59)))) (=> (and (and (= (type $o@@113) refType) (= (type $f@@59) (FieldType alpha@@56))) (and (not (= $o@@113 null)) (U_2_bool (MapType1Select (MapType0Select $Heap@@137 $o@@113) alloc)))) (or (= (MapType1Select (MapType0Select $Heap@2 $o@@113) $f@@59) (MapType1Select (MapType0Select $Heap@@137 $o@@113) $f@@59)) (U_2_bool (MapType6Select $_Frame@0 $o@@113 $f@@59))))) :qid |MutableB.90:7| :skolemid |1311| :pattern ( (MapType1Select (MapType0Select $Heap@2 $o@@113) $f@@59)) ))) (and (<= (- (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) |i#63@1|) |$decr_init$loop#00@0|) (=> (= (- (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@2 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) |i#63@1|) |$decr_init$loop#00@0|) true)))))) (and anon16_LoopDone_correct anon16_LoopBody_correct)))))) (let ((anon14_Else_correct  (=> (! (and %lbl%+391 true) :lblpos +391) (=> (and (not (MutableBtreeBulkOperations.MB.Abs.NodeContents.Leaf_q (MapType1Select (MapType0Select $Heap@@137 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))) (= |newtype$check#4@0| (LitInt 0))) (and (! (or %lbl%@392  (and (<= (LitInt 0) |newtype$check#4@0|) (< |newtype$check#4@0| 18446744073709551616))) :lblneg @392) (=> (and (<= (LitInt 0) |newtype$check#4@0|) (< |newtype$check#4@0| 18446744073709551616)) (=> (and (= |i#63@0| (LitInt 0)) (= |$decr_init$loop#00@0| (- (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@137 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)) |i#63@0|))) (and (! (or %lbl%@393  (=> |$w$loop#0@0| (<= (LitInt 0) |i#63@0|))) :lblneg @393) (=> (=> |$w$loop#0@0| (<= (LitInt 0) |i#63@0|)) (and (! (or %lbl%@394  (=> |$w$loop#0@0| (<= |i#63@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@137 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents))))) :lblneg @394) (=> (=> |$w$loop#0@0| (<= |i#63@0| (MutableBtreeBulkOperations.MB.Abs.NodeContents.nchildren (MapType1Select (MapType0Select $Heap@@137 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.contents)))) (and (! (or %lbl%@395  (=> |$w$loop#0@0| (= |start#0| (+ |start#0| (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren ($LS ($LS $LZ)) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@@137 |node#0@@101|)) |i#63@0|)))))) :lblneg @395) (=> (=> |$w$loop#0@0| (= |start#0| (+ |start#0| (MutableBtreeBulkOperations.MB.Model.Abs.__default.NumElementsOfChildren ($LS ($LS $LZ)) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@@137 |node#0@@101|)) |i#63@0|))))) (and (! (or %lbl%@396  (=> |$w$loop#0@0| (<= |start#0| (_System.array.Length |keys#0|)))) :lblneg @396) (=> (=> |$w$loop#0@0| (<= |start#0| (_System.array.Length |keys#0|))) (and (! (or %lbl%@397  (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@@137 |keys#0|) |start#0|) (|Seq#Take| (|Seq#FromArray| $Heap@@137 |keys#0|) |start#0|)))) :lblneg @397) (=> (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@@137 |keys#0|) |start#0|) (|Seq#Take| (|Seq#FromArray| $Heap@@137 |keys#0|) |start#0|))) (and (! (or %lbl%@398  (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@@137 |keys#0|) |start#0|) |start#0|) (Sequences.__default.Flatten (TSeq Tclass.NativeTypes.byte) StartFuelAssert_Sequences._default.Flatten ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS ($LS $LZ)) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@@137 |node#0@@101|)) |i#63@0|)))))))) :lblneg @398) (=> (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@@137 |keys#0|) |start#0|) |start#0|) (Sequences.__default.Flatten (TSeq Tclass.NativeTypes.byte) StartFuelAssert_Sequences._default.Flatten ($Unbox (SeqType BoxType) (_System.Tuple2._0 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS ($LS $LZ)) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@@137 |node#0@@101|)) |i#63@0|))))))) (and (! (or %lbl%@399  (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Drop| (|Seq#FromArray| $Heap@@137 |keys#0|) |start#0|) (|Seq#Drop| (|Seq#FromArray| $Heap@@137 |keys#0|) |start#0|)))) :lblneg @399) (=> (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Drop| (|Seq#FromArray| $Heap@@137 |keys#0|) |start#0|) (|Seq#Drop| (|Seq#FromArray| $Heap@@137 |keys#0|) |start#0|))) (and (! (or %lbl%@400  (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@@137 |values#0|) |start#0|) (|Seq#Take| (|Seq#FromArray| $Heap@@137 |values#0|) |start#0|)))) :lblneg @400) (=> (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Take| (|Seq#FromArray| $Heap@@137 |values#0|) |start#0|) (|Seq#Take| (|Seq#FromArray| $Heap@@137 |values#0|) |start#0|))) (and (! (or %lbl%@401  (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@@137 |values#0|) |start#0|) |start#0|) (Sequences.__default.Flatten |#$Value| StartFuelAssert_Sequences._default.Flatten ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS ($LS $LZ)) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@@137 |node#0@@101|)) |i#63@0|)))))))) :lblneg @401) (=> (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Drop| (|Seq#Take| (|Seq#FromArray| $Heap@@137 |values#0|) |start#0|) |start#0|) (Sequences.__default.Flatten |#$Value| StartFuelAssert_Sequences._default.Flatten ($Unbox (SeqType BoxType) (_System.Tuple2._1 (MutableBtreeBulkOperations.MB.Model.Abs.__default.ToSeqChildren ($LS ($LS $LZ)) (|Seq#Take| (MutableBtreeBulkOperations.MB.Model.Abs.Node.children (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@@137 |node#0@@101|)) |i#63@0|))))))) (and (! (or %lbl%@402  (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Drop| (|Seq#FromArray| $Heap@@137 |values#0|) |start#0|) (|Seq#Drop| (|Seq#FromArray| $Heap@@137 |values#0|) |start#0|)))) :lblneg @402) (=> (=> |$w$loop#0@0| (|Seq#Equal| (|Seq#Drop| (|Seq#FromArray| $Heap@@137 |values#0|) |start#0|) (|Seq#Drop| (|Seq#FromArray| $Heap@@137 |values#0|) |start#0|))) anon16_LoopHead_correct))))))))))))))))))))))))))) (let ((anon0_correct  (=> (! (and %lbl%+403 true) :lblpos +403) (=> (= (AsFuelBottom StartFuel_SeqComparison._default.lte) StartFuel_SeqComparison._default.lte) (=> (and (and (= (AsFuelBottom StartFuelAssert_SeqComparison._default.lte) StartFuelAssert_SeqComparison._default.lte) (= (AsFuelBottom StartFuel_Sequences._default.NoDupes) StartFuel_Sequences._default.NoDupes)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.NoDupes) StartFuelAssert_Sequences._default.NoDupes) (= (AsFuelBottom StartFuel_Sequences._default.Range) StartFuel_Sequences._default.Range))) (=> (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Range) StartFuelAssert_Sequences._default.Range) (= (AsFuelBottom StartFuel_Sequences._default.ApplyOpaque) StartFuel_Sequences._default.ApplyOpaque)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.ApplyOpaque) StartFuelAssert_Sequences._default.ApplyOpaque) (= (AsFuelBottom StartFuel_Sequences._default.remove) StartFuel_Sequences._default.remove))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.remove) StartFuelAssert_Sequences._default.remove) (= (AsFuelBottom StartFuel_Sequences._default.insert) StartFuel_Sequences._default.insert)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.insert) StartFuelAssert_Sequences._default.insert) (= (AsFuelBottom StartFuel_Sequences._default.replace1with2) StartFuel_Sequences._default.replace1with2)))) (=> (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace1with2) StartFuelAssert_Sequences._default.replace1with2) (= (AsFuelBottom StartFuel_Sequences._default.replace2with1) StartFuel_Sequences._default.replace2with1)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace2with1) StartFuelAssert_Sequences._default.replace2with1) (= (AsFuelBottom StartFuel_Sequences._default.concat) StartFuel_Sequences._default.concat))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat) StartFuelAssert_Sequences._default.concat) (= (AsFuelBottom StartFuel_Sequences._default.concat3) StartFuel_Sequences._default.concat3)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat3) StartFuelAssert_Sequences._default.concat3) (= (AsFuelBottom StartFuel_Sequences._default.concatSeq) StartFuel_Sequences._default.concatSeq)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concatSeq) StartFuelAssert_Sequences._default.concatSeq) (= (AsFuelBottom StartFuel_Sequences._default.IsPrefix) StartFuel_Sequences._default.IsPrefix)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsPrefix) StartFuelAssert_Sequences._default.IsPrefix) (= (AsFuelBottom StartFuel_Sequences._default.IsSuffix) StartFuel_Sequences._default.IsSuffix))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsSuffix) StartFuelAssert_Sequences._default.IsSuffix) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexIterate) StartFuel_Sequences._default.SeqIndexIterate)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexIterate) StartFuelAssert_Sequences._default.SeqIndexIterate) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndex) StartFuel_Sequences._default.SeqIndex))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndex) StartFuelAssert_Sequences._default.SeqIndex) (= (AsFuelBottom StartFuel_Sequences._default.SeqOfLength) StartFuel_Sequences._default.SeqOfLength)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqOfLength) StartFuelAssert_Sequences._default.SeqOfLength) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexUpdate) StartFuel_Sequences._default.SeqIndexUpdate))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexUpdate) StartFuelAssert_Sequences._default.SeqIndexUpdate) (= (AsFuelBottom StartFuel_Sequences._default.Zip) StartFuel_Sequences._default.Zip)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Zip) StartFuelAssert_Sequences._default.Zip) (= (AsFuelBottom StartFuel_Sequences._default.Unzip) StartFuel_Sequences._default.Unzip)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Unzip) StartFuelAssert_Sequences._default.Unzip) (= (AsFuelBottom StartFuel_Sequences._default.FlattenShape) StartFuel_Sequences._default.FlattenShape)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenShape) StartFuelAssert_Sequences._default.FlattenShape) (= (AsFuelBottom StartFuel_Sequences._default.FlattenLength) StartFuel_Sequences._default.FlattenLength))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenLength) StartFuelAssert_Sequences._default.FlattenLength) (= (AsFuelBottom StartFuel_Sequences._default.Flatten) StartFuel_Sequences._default.Flatten)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Flatten) StartFuelAssert_Sequences._default.Flatten) (= (AsFuelBottom StartFuel_Sequences._default.fill) StartFuel_Sequences._default.fill)))))) (=> (and (and (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.fill) StartFuelAssert_Sequences._default.fill) (= (AsFuelBottom StartFuel_Maps._default.MapRemove) StartFuel_Maps._default.MapRemove)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove) StartFuelAssert_Maps._default.MapRemove) (= (AsFuelBottom StartFuel_Maps._default.MapRemoveStrong) StartFuel_Maps._default.MapRemoveStrong))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemoveStrong) StartFuelAssert_Maps._default.MapRemoveStrong) (= (AsFuelBottom StartFuel_Maps._default.MapRemove1) StartFuel_Maps._default.MapRemove1)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1) StartFuelAssert_Maps._default.MapRemove1) (= (AsFuelBottom StartFuel_Maps._default.MapRemove1Strong) StartFuel_Maps._default.MapRemove1Strong)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1Strong) StartFuelAssert_Maps._default.MapRemove1Strong) (= (AsFuelBottom StartFuel_Maps._default.IMapRemove) StartFuel_Maps._default.IMapRemove)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove) StartFuelAssert_Maps._default.IMapRemove) (= (AsFuelBottom StartFuel_Maps._default.IMapRemove1) StartFuel_Maps._default.IMapRemove1))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove1) StartFuelAssert_Maps._default.IMapRemove1) (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion) StartFuel_Maps._default.MapDisjointUnion)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion) StartFuelAssert_Maps._default.MapDisjointUnion) (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferA) StartFuel_Maps._default.MapUnionPreferA))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferA) StartFuelAssert_Maps._default.MapUnionPreferA) (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferB) StartFuel_Maps._default.MapUnionPreferB)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferB) StartFuelAssert_Maps._default.MapUnionPreferB) (= (AsFuelBottom StartFuel_Maps._default.MapUnion) StartFuel_Maps._default.MapUnion))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnion) StartFuelAssert_Maps._default.MapUnion) (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferA) StartFuel_Maps._default.IMapUnionPreferA)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferA) StartFuelAssert_Maps._default.IMapUnionPreferA) (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferB) StartFuel_Maps._default.IMapUnionPreferB)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferB) StartFuelAssert_Maps._default.IMapUnionPreferB) (= (AsFuelBottom StartFuel_Maps._default.IMapUnion) StartFuel_Maps._default.IMapUnion)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnion) StartFuelAssert_Maps._default.IMapUnion) (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion3) StartFuel_Maps._default.MapDisjointUnion3))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion3) StartFuelAssert_Maps._default.MapDisjointUnion3) (= (AsFuelBottom StartFuel_Byte_Order._default.lte) StartFuel_Byte_Order._default.lte)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.lte) StartFuelAssert_Byte_Order._default.lte) (= (AsFuelBottom StartFuel_Byte_Order._default.ltedef) StartFuel_Byte_Order._default.ltedef)))))) (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.ltedef) StartFuelAssert_Byte_Order._default.ltedef) (= (AsFuelBottom StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte) (= (AsFuelBottom StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt))) (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt) (= (AsFuelBottom StartFuel_Byte_Order._default.NotMinimum) StartFuel_Byte_Order._default.NotMinimum)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.NotMinimum) StartFuelAssert_Byte_Order._default.NotMinimum) (= (AsFuelBottom StartFuel_Byte_Order._default.SortedSeqForMap) StartFuel_Byte_Order._default.SortedSeqForMap)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.SortedSeqForMap) StartFuelAssert_Byte_Order._default.SortedSeqForMap) (= (AsFuelBottom StartFuel_Byte_Order._default.minimum) StartFuel_Byte_Order._default.minimum)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.minimum) StartFuelAssert_Byte_Order._default.minimum) (= (AsFuelBottom StartFuel_Byte_Order._default.minimumOpt) StartFuel_Byte_Order._default.minimumOpt))) (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.minimumOpt) StartFuelAssert_Byte_Order._default.minimumOpt) (= (AsFuelBottom StartFuel_Byte_Order._default.maximum) StartFuel_Byte_Order._default.maximum)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.maximum) StartFuelAssert_Byte_Order._default.maximum) (= (AsFuelBottom StartFuel_Byte_Order._default.maximumOpt) StartFuel_Byte_Order._default.maximumOpt))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.maximumOpt) StartFuelAssert_Byte_Order._default.maximumOpt) (= (AsFuelBottom StartFuel_Byte_Order._default.IsSorted) StartFuel_Byte_Order._default.IsSorted)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.IsSorted) StartFuelAssert_Byte_Order._default.IsSorted) (= (AsFuelBottom StartFuel_Byte_Order._default.IsStrictlySorted) StartFuel_Byte_Order._default.IsStrictlySorted))) (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.IsStrictlySorted) StartFuelAssert_Byte_Order._default.IsStrictlySorted) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte)) (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.NotMinimum) StartFuel_Lexicographic_Byte_Order._default.NotMinimum)) (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum) StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap) StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap))) (and (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap) StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.minimum) StartFuel_Lexicographic_Byte_Order._default.minimum)) (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.minimum) StartFuelAssert_Lexicographic_Byte_Order._default.minimum) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.minimumOpt) StartFuel_Lexicographic_Byte_Order._default.minimumOpt))))))) (and (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt) StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.maximum) StartFuel_Lexicographic_Byte_Order._default.maximum)) (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.maximum) StartFuelAssert_Lexicographic_Byte_Order._default.maximum) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.maximumOpt) StartFuel_Lexicographic_Byte_Order._default.maximumOpt))) (and (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt) StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.IsSorted) StartFuel_Lexicographic_Byte_Order._default.IsSorted)) (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted) StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted) StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted) StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted) (= (AsFuelBottom StartFuel_Integer_Order._default.ltedef) StartFuel_Integer_Order._default.ltedef)) (and (= (AsFuelBottom StartFuelAssert_Integer_Order._default.ltedef) StartFuelAssert_Integer_Order._default.ltedef) (= (AsFuelBottom StartFuel_Integer_Order._default.binarySearchIndexOfFirstKeyGte) StartFuel_Integer_Order._default.binarySearchIndexOfFirstKeyGte))) (and (and (= (AsFuelBottom StartFuelAssert_Integer_Order._default.binarySearchIndexOfFirstKeyGte) StartFuelAssert_Integer_Order._default.binarySearchIndexOfFirstKeyGte) (= (AsFuelBottom StartFuel_Integer_Order._default.binarySearchIndexOfFirstKeyGt) StartFuel_Integer_Order._default.binarySearchIndexOfFirstKeyGt)) (and (= (AsFuelBottom StartFuelAssert_Integer_Order._default.binarySearchIndexOfFirstKeyGt) StartFuelAssert_Integer_Order._default.binarySearchIndexOfFirstKeyGt) (= (AsFuelBottom StartFuel_Integer_Order._default.NotMinimum) StartFuel_Integer_Order._default.NotMinimum))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Integer_Order._default.NotMinimum) StartFuelAssert_Integer_Order._default.NotMinimum) (= (AsFuelBottom StartFuel_Integer_Order._default.SortedSeqForMap) StartFuel_Integer_Order._default.SortedSeqForMap)) (and (= (AsFuelBottom StartFuelAssert_Integer_Order._default.SortedSeqForMap) StartFuelAssert_Integer_Order._default.SortedSeqForMap) (= (AsFuelBottom StartFuel_Integer_Order._default.minimum) StartFuel_Integer_Order._default.minimum))) (and (and (= (AsFuelBottom StartFuelAssert_Integer_Order._default.minimum) StartFuelAssert_Integer_Order._default.minimum) (= (AsFuelBottom StartFuel_Integer_Order._default.minimumOpt) StartFuel_Integer_Order._default.minimumOpt)) (and (= (AsFuelBottom StartFuelAssert_Integer_Order._default.minimumOpt) StartFuelAssert_Integer_Order._default.minimumOpt) (= (AsFuelBottom StartFuel_Integer_Order._default.maximum) StartFuel_Integer_Order._default.maximum)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Integer_Order._default.maximum) StartFuelAssert_Integer_Order._default.maximum) (= (AsFuelBottom StartFuel_Integer_Order._default.maximumOpt) StartFuel_Integer_Order._default.maximumOpt)) (and (= (AsFuelBottom StartFuelAssert_Integer_Order._default.maximumOpt) StartFuelAssert_Integer_Order._default.maximumOpt) (= (AsFuelBottom StartFuel_Integer_Order._default.IsSorted) StartFuel_Integer_Order._default.IsSorted))) (and (and (= (AsFuelBottom StartFuelAssert_Integer_Order._default.IsSorted) StartFuelAssert_Integer_Order._default.IsSorted) (= (AsFuelBottom StartFuel_Integer_Order._default.IsStrictlySorted) StartFuel_Integer_Order._default.IsStrictlySorted)) (and (= (AsFuelBottom StartFuelAssert_Integer_Order._default.IsStrictlySorted) StartFuelAssert_Integer_Order._default.IsStrictlySorted) (= (AsFuelBottom StartFuel_Uint64_Order._default.ltedef) StartFuel_Uint64_Order._default.ltedef)))))) (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Uint64_Order._default.ltedef) StartFuelAssert_Uint64_Order._default.ltedef) (= (AsFuelBottom StartFuel_Uint64_Order._default.binarySearchIndexOfFirstKeyGte) StartFuel_Uint64_Order._default.binarySearchIndexOfFirstKeyGte)) (and (= (AsFuelBottom StartFuelAssert_Uint64_Order._default.binarySearchIndexOfFirstKeyGte) StartFuelAssert_Uint64_Order._default.binarySearchIndexOfFirstKeyGte) (= (AsFuelBottom StartFuel_Uint64_Order._default.binarySearchIndexOfFirstKeyGt) StartFuel_Uint64_Order._default.binarySearchIndexOfFirstKeyGt))) (and (and (= (AsFuelBottom StartFuelAssert_Uint64_Order._default.binarySearchIndexOfFirstKeyGt) StartFuelAssert_Uint64_Order._default.binarySearchIndexOfFirstKeyGt) (= (AsFuelBottom StartFuel_Uint64_Order._default.NotMinimum) StartFuel_Uint64_Order._default.NotMinimum)) (and (= (AsFuelBottom StartFuelAssert_Uint64_Order._default.NotMinimum) StartFuelAssert_Uint64_Order._default.NotMinimum) (= (AsFuelBottom StartFuel_Uint64_Order._default.SortedSeqForMap) StartFuel_Uint64_Order._default.SortedSeqForMap)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Uint64_Order._default.SortedSeqForMap) StartFuelAssert_Uint64_Order._default.SortedSeqForMap) (= (AsFuelBottom StartFuel_Uint64_Order._default.minimum) StartFuel_Uint64_Order._default.minimum)) (and (= (AsFuelBottom StartFuelAssert_Uint64_Order._default.minimum) StartFuelAssert_Uint64_Order._default.minimum) (= (AsFuelBottom StartFuel_Uint64_Order._default.minimumOpt) StartFuel_Uint64_Order._default.minimumOpt))) (and (and (= (AsFuelBottom StartFuelAssert_Uint64_Order._default.minimumOpt) StartFuelAssert_Uint64_Order._default.minimumOpt) (= (AsFuelBottom StartFuel_Uint64_Order._default.maximum) StartFuel_Uint64_Order._default.maximum)) (and (= (AsFuelBottom StartFuelAssert_Uint64_Order._default.maximum) StartFuelAssert_Uint64_Order._default.maximum) (= (AsFuelBottom StartFuel_Uint64_Order._default.maximumOpt) StartFuel_Uint64_Order._default.maximumOpt))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Uint64_Order._default.maximumOpt) StartFuelAssert_Uint64_Order._default.maximumOpt) (= (AsFuelBottom StartFuel_Uint64_Order._default.IsSorted) StartFuel_Uint64_Order._default.IsSorted)) (and (= (AsFuelBottom StartFuelAssert_Uint64_Order._default.IsSorted) StartFuelAssert_Uint64_Order._default.IsSorted) (= (AsFuelBottom StartFuel_Uint64_Order._default.IsStrictlySorted) StartFuel_Uint64_Order._default.IsStrictlySorted))) (and (and (= (AsFuelBottom StartFuelAssert_Uint64_Order._default.IsStrictlySorted) StartFuelAssert_Uint64_Order._default.IsStrictlySorted) (= (AsFuelBottom StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys) StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys)) (and (= (AsFuelBottom StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys) StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.AllKeys) (= (AsFuelBottom StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.Interpretation) StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.Interpretation)))) (and (and (and (= (AsFuelBottom StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.Interpretation) StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.Interpretation) (= (AsFuelBottom StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq) StartFuel_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq)) (and (= (AsFuelBottom StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq) StartFuelAssert_MutableBtreeBulkOperations.MB.Model.Abs._default.ToSeq) (= (AsFuelBottom StartFuel_MutableBtreeBulkOperations.MB.Abs._default.SeqRepr) StartFuel_MutableBtreeBulkOperations.MB.Abs._default.SeqRepr))) (and (and (= (AsFuelBottom StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.SeqRepr) StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.SeqRepr) (= (AsFuelBottom StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I) StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I)) (and (= (AsFuelBottom StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I) StartFuelAssert_MutableBtreeBulkOperations.MB.Abs._default.I) (= $_Frame@0 (|lambda#5| null $Heap@@137 alloc |keys#0| |values#0|))))))))) (and (! (or %lbl%@404 (not (= |node#0@@101| null))) :lblneg @404) (=> (not (= |node#0@@101| null)) (and anon14_Then_correct anon14_Else_correct))))))))))) (let ((PreconditionGeneratedEntry_correct  (=> (! (and %lbl%+405 true) :lblpos +405) (=> (and ($IsGoodHeap $Heap@@137) ($IsHeapAnchor $Heap@@137)) (=> (and (and (and ($Is |node#0@@101| Tclass.MutableBtreeBulkOperations.MB.Abs.Node) ($IsAlloc |node#0@@101| Tclass.MutableBtreeBulkOperations.MB.Abs.Node $Heap@@137)) (and ($Is |keys#0| (Tclass._System.array (TSeq Tclass.NativeTypes.byte))) ($IsAlloc |keys#0| (Tclass._System.array (TSeq Tclass.NativeTypes.byte)) $Heap@@137))) (and (and ($Is |values#0| (Tclass._System.array |#$Value|)) ($IsAlloc |values#0| (Tclass._System.array |#$Value|) $Heap@@137)) (and (<= (LitInt 0) |start#0|) (< |start#0| 18446744073709551616)))) (=> (and (and (and (and (<= (LitInt 0) |nextstart#0|) (< |nextstart#0| 18446744073709551616)) (and (<= (LitInt 0) |i#63|) (< |i#63| 18446744073709551616))) (and (and (<= (LitInt 0) |$rhs##1_0|) (< |$rhs##1_0| 18446744073709551616)) (= 8 $FunctionContextHeight))) (and (and (and (|MutableBtreeBulkOperations.MB.Abs.__default.WF#canCall| $Heap@@137 |node#0@@101|) (and (MutableBtreeBulkOperations.MB.Abs.__default.WF $Heap@@137 |node#0@@101|) (and (MutableBtreeBulkOperations.MB.Abs.__default.WFShape ($LS $LZ) $Heap@@137 |node#0@@101|) (MutableBtreeBulkOperations.MB.Model.Abs.__default.WF ($LS $LZ) (MutableBtreeBulkOperations.MB.Abs.__default.I StartFuel_MutableBtreeBulkOperations.MB.Abs._default.I $Heap@@137 |node#0@@101|))))) (and (not (Arrays.__default.Aliases (TSeq Tclass.NativeTypes.byte) |#$Value| |keys#0| |values#0|)) (= (_System.array.Length |keys#0|) (_System.array.Length |values#0|)))) (and (and (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@137 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |keys#0|)))) (not (U_2_bool (MapType0Select (MapType1Select (MapType0Select $Heap@@137 |node#0@@101|) MutableBtreeBulkOperations.MB.Abs.Node.repr) ($Box |values#0|))))) (and (<= (+ |start#0| (MutableBtreeBulkOperations.__default.NumElements $Heap@@137 |node#0@@101|)) (_System.array.Length |keys#0|)) (< (+ |start#0| (MutableBtreeBulkOperations.__default.NumElements $Heap@@137 |node#0@@101|)) NativeTypes.__default.Uint64UpperBound))))) anon0_correct)))))) PreconditionGeneratedEntry_correct))))))))))))))))) ))
(check-sat)
