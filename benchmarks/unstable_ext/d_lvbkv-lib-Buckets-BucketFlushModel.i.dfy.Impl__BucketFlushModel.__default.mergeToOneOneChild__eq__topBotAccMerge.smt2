(set-option :print-success false)
(set-info :smt-lib-version 2.6)
(set-option :auto_config false)
(set-option :type_check true)
(set-option :smt.case_split 3)
(set-option :smt.qi.eager_threshold 100)
(set-option :smt.delay_units true)
(set-option :smt.arith.solver 2)
(set-option :smt.mbqi false)
(set-option :model.compact false)
(set-option :model.v2 true)
(set-option :pp.bv_literals false)
(set-info :category "industrial")
(declare-sort |T@U| 0)
(declare-sort |T@T| 0)
(declare-fun real_pow (Real Real) Real)
(declare-fun UOrdering2 (|T@U| |T@U|) Bool)
(declare-fun UOrdering3 (|T@T| |T@U| |T@U|) Bool)
(declare-fun tickleBool (Bool) Bool)
(assert (and (tickleBool true) (tickleBool false)))
(declare-fun U_2_int (T@U) Int)
(declare-fun U_2_bool (T@U) Bool)
(declare-fun Ctor (T@T) Int)
(declare-fun intType () T@T)
(declare-fun realType () T@T)
(declare-fun boolType () T@T)
(declare-fun rmodeType () T@T)
(declare-fun stringType () T@T)
(declare-fun regexType () T@T)
(declare-fun int_2_U (Int) T@U)
(declare-fun type (T@U) T@T)
(declare-fun real_2_U (Real) T@U)
(declare-fun U_2_real (T@U) Real)
(declare-fun bool_2_U (Bool) T@U)
(declare-fun rmode_2_U (RoundingMode) T@U)
(declare-fun U_2_rmode (T@U) RoundingMode)
(declare-fun string_2_U (String) T@U)
(declare-fun U_2_string (T@U) String)
(declare-fun regex_2_U ((RegEx String)) T@U)
(declare-fun U_2_regex (T@U) (RegEx String))
(declare-fun TBool () T@U)
(declare-fun TChar () T@U)
(declare-fun TInt () T@U)
(declare-fun TReal () T@U)
(declare-fun TORDINAL () T@U)
(declare-fun TagBool () T@U)
(declare-fun TagChar () T@U)
(declare-fun TagInt () T@U)
(declare-fun TagReal () T@U)
(declare-fun TagORDINAL () T@U)
(declare-fun TagSet () T@U)
(declare-fun TagISet () T@U)
(declare-fun TagMultiSet () T@U)
(declare-fun TagSeq () T@U)
(declare-fun TagMap () T@U)
(declare-fun TagIMap () T@U)
(declare-fun TagClass () T@U)
(declare-fun class._System.int () T@U)
(declare-fun class._System.bool () T@U)
(declare-fun class._System.set () T@U)
(declare-fun class._System.seq () T@U)
(declare-fun class._System.multiset () T@U)
(declare-fun alloc () T@U)
(declare-fun allocName () T@U)
(declare-fun Tagclass._System.nat () T@U)
(declare-fun class._System.object? () T@U)
(declare-fun Tagclass._System.object? () T@U)
(declare-fun Tagclass._System.object () T@U)
(declare-fun class._System.array? () T@U)
(declare-fun Tagclass._System.array? () T@U)
(declare-fun Tagclass._System.array () T@U)
(declare-fun Tagclass._System.___hFunc1 () T@U)
(declare-fun Tagclass._System.___hPartialFunc1 () T@U)
(declare-fun Tagclass._System.___hTotalFunc1 () T@U)
(declare-fun Tagclass._System.___hFunc0 () T@U)
(declare-fun Tagclass._System.___hPartialFunc0 () T@U)
(declare-fun Tagclass._System.___hTotalFunc0 () T@U)
(declare-fun class._System.__default () T@U)
(declare-fun Tagclass._System.__default () T@U)
(declare-fun Tagclass._System.___hFunc2 () T@U)
(declare-fun Tagclass._System.___hPartialFunc2 () T@U)
(declare-fun Tagclass._System.___hTotalFunc2 () T@U)
(declare-fun Tagclass._System.___hFunc4 () T@U)
(declare-fun Tagclass._System.___hPartialFunc4 () T@U)
(declare-fun Tagclass._System.___hTotalFunc4 () T@U)
(declare-fun Tagclass._System.___hFunc10 () T@U)
(declare-fun Tagclass._System.___hPartialFunc10 () T@U)
(declare-fun Tagclass._System.___hTotalFunc10 () T@U)
(declare-fun Tagclass._System.___hFunc3 () T@U)
(declare-fun Tagclass._System.___hPartialFunc3 () T@U)
(declare-fun Tagclass._System.___hTotalFunc3 () T@U)
(declare-fun Tagclass._System.___hFunc6 () T@U)
(declare-fun Tagclass._System.___hPartialFunc6 () T@U)
(declare-fun Tagclass._System.___hTotalFunc6 () T@U)
(declare-fun |##_System._tuple#2._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2 () T@U)
(declare-fun class._System.Tuple2 () T@U)
(declare-fun Tagclass._System.___hFunc5 () T@U)
(declare-fun Tagclass._System.___hPartialFunc5 () T@U)
(declare-fun Tagclass._System.___hTotalFunc5 () T@U)
(declare-fun Tagclass._System.___hFunc2OSO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2OSO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2OSO () T@U)
(declare-fun Tagclass._System.___hFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hPartialFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hTotalFunc3LLOO () T@U)
(declare-fun Tagclass._System.___hFunc1OS () T@U)
(declare-fun Tagclass._System.___hPartialFunc1OS () T@U)
(declare-fun Tagclass._System.___hTotalFunc1OS () T@U)
(declare-fun Tagclass._System.___hFunc0L () T@U)
(declare-fun Tagclass._System.___hPartialFunc0L () T@U)
(declare-fun Tagclass._System.___hTotalFunc0L () T@U)
(declare-fun Tagclass._System.___hFunc2LOO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2LOO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2LOO () T@U)
(declare-fun |##_System._tuple#0._#Make0| () T@U)
(declare-fun Tagclass._System.Tuple0 () T@U)
(declare-fun class._System.Tuple0 () T@U)
(declare-fun Tagclass._System.___hFunc1OL () T@U)
(declare-fun Tagclass._System.___hPartialFunc1OL () T@U)
(declare-fun Tagclass._System.___hTotalFunc1OL () T@U)
(declare-fun Tagclass._System.___hFunc1LO () T@U)
(declare-fun Tagclass._System.___hPartialFunc1LO () T@U)
(declare-fun Tagclass._System.___hTotalFunc1LO () T@U)
(declare-fun |##_System._tuple#2OLL._#Make2| () T@U)
(declare-fun Tagclass._System.Tuple2OLL () T@U)
(declare-fun class._System.Tuple2OLL () T@U)
(declare-fun Tagclass._System.___hFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hPartialFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hTotalFunc3LLOL () T@U)
(declare-fun Tagclass._System.___hFunc2SSO () T@U)
(declare-fun Tagclass._System.___hPartialFunc2SSO () T@U)
(declare-fun Tagclass._System.___hTotalFunc2SSO () T@U)
(declare-fun Tagclass._System.___hFunc1SS () T@U)
(declare-fun Tagclass._System.___hPartialFunc1SS () T@U)
(declare-fun Tagclass._System.___hTotalFunc1SS () T@U)
(declare-fun Tagclass._System.___hFunc1LL () T@U)
(declare-fun Tagclass._System.___hPartialFunc1LL () T@U)
(declare-fun Tagclass._System.___hTotalFunc1LL () T@U)
(declare-fun |##BucketFlushModel.singleMergeResult.MergeCompleted| () T@U)
(declare-fun Tagclass.KeyType.Key () T@U)
(declare-fun Tagclass.ValueMessage.Message () T@U)
(declare-fun Tagclass.BucketFlushModel.singleMergeResult () T@U)
(declare-fun |##BucketFlushModel.singleMergeResult.SlackExhausted| () T@U)
(declare-fun class.BucketFlushModel.singleMergeResult () T@U)
(declare-fun |##BucketFlushModel.mergeResult.mergeResult| () T@U)
(declare-fun Tagclass.BucketsLib.Bucket () T@U)
(declare-fun Tagclass.BucketFlushModel.mergeResult () T@U)
(declare-fun class.BucketFlushModel.mergeResult () T@U)
(declare-fun |##BucketFlushModel.partialFlushResult.partialFlushResult| () T@U)
(declare-fun Tagclass.BucketFlushModel.partialFlushResult () T@U)
(declare-fun class.BucketFlushModel.partialFlushResult () T@U)
(declare-fun class.BucketFlushModel.__default () T@U)
(declare-fun Tagclass.BucketFlushModel.__default () T@U)
(declare-fun Tagclass.NativeTypes.byte () T@U)
(declare-fun Tagclass.Upperbounded__Lexicographic__Byte__Order.Element () T@U)
(declare-fun class.SequencesLite.__default () T@U)
(declare-fun Tagclass.SequencesLite.__default () T@U)
(declare-fun |##Options.Option.None| () T@U)
(declare-fun Tagclass.Options.Option () T@U)
(declare-fun |##Options.Option.Some| () T@U)
(declare-fun class.Options.Option () T@U)
(declare-fun class.Options.__default () T@U)
(declare-fun Tagclass.Options.__default () T@U)
(declare-fun Tagclass.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.sbyte () T@U)
(declare-fun class.NativeTypes.byte () T@U)
(declare-fun Tagclass.NativeTypes.int16 () T@U)
(declare-fun class.NativeTypes.int16 () T@U)
(declare-fun Tagclass.NativeTypes.uint16 () T@U)
(declare-fun class.NativeTypes.uint16 () T@U)
(declare-fun Tagclass.NativeTypes.int32 () T@U)
(declare-fun class.NativeTypes.int32 () T@U)
(declare-fun Tagclass.NativeTypes.uint32 () T@U)
(declare-fun class.NativeTypes.uint32 () T@U)
(declare-fun Tagclass.NativeTypes.int64 () T@U)
(declare-fun class.NativeTypes.int64 () T@U)
(declare-fun Tagclass.NativeTypes.uint64 () T@U)
(declare-fun class.NativeTypes.uint64 () T@U)
(declare-fun Tagclass.NativeTypes.nat8 () T@U)
(declare-fun class.NativeTypes.nat8 () T@U)
(declare-fun Tagclass.NativeTypes.nat16 () T@U)
(declare-fun class.NativeTypes.nat16 () T@U)
(declare-fun Tagclass.NativeTypes.nat32 () T@U)
(declare-fun class.NativeTypes.nat32 () T@U)
(declare-fun Tagclass.NativeTypes.nat64 () T@U)
(declare-fun class.NativeTypes.nat64 () T@U)
(declare-fun Tagclass.NativeTypes.uint128 () T@U)
(declare-fun class.NativeTypes.uint128 () T@U)
(declare-fun class.NativeTypes.__default () T@U)
(declare-fun Tagclass.NativeTypes.__default () T@U)
(declare-fun class.Mathematics.__default () T@U)
(declare-fun Tagclass.Mathematics.__default () T@U)
(declare-fun class.Sequences.__default () T@U)
(declare-fun Tagclass.Sequences.__default () T@U)
(declare-fun class.KeyType.__default () T@U)
(declare-fun Tagclass.KeyType.__default () T@U)
(declare-fun class.Sets.__default () T@U)
(declare-fun Tagclass.Sets.__default () T@U)
(declare-fun class.MapRemove_s.__default () T@U)
(declare-fun Tagclass.MapRemove_s.__default () T@U)
(declare-fun class.Maps.__default () T@U)
(declare-fun Tagclass.Maps.__default () T@U)
(declare-fun class.SeqComparison.__default () T@U)
(declare-fun Tagclass.SeqComparison.__default () T@U)
(declare-fun class.NativeArrays.__default () T@U)
(declare-fun Tagclass.NativeArrays.__default () T@U)
(declare-fun class.LinearMaybe.predefined () T@U)
(declare-fun class.LinearMaybe.__default () T@U)
(declare-fun Tagclass.LinearMaybe.__default () T@U)
(declare-fun class.LinearExtern.predefined () T@U)
(declare-fun class.LinearExtern.__default () T@U)
(declare-fun Tagclass.LinearExtern.__default () T@U)
(declare-fun class.Byte__Order.__default () T@U)
(declare-fun Tagclass.Byte__Order.__default () T@U)
(declare-fun class.Lexicographic__Byte__Order.__default () T@U)
(declare-fun Tagclass.Lexicographic__Byte__Order.__default () T@U)
(declare-fun class.Upperbounded__Lexicographic__Byte__Order.__default () T@U)
(declare-fun Tagclass.Upperbounded__Lexicographic__Byte__Order.__default () T@U)
(declare-fun |##Upperbounded_Lexicographic_Byte_Order.Element.Element| () T@U)
(declare-fun |##Upperbounded_Lexicographic_Byte_Order.Element.Max_Element| () T@U)
(declare-fun class.Upperbounded__Lexicographic__Byte__Order.Element () T@U)
(declare-fun class.Upperbounded__Lexicographic__Byte__Order__Impl.__default () T@U)
(declare-fun Tagclass.Upperbounded__Lexicographic__Byte__Order__Impl.__default () T@U)
(declare-fun class.BoundedPivotsLib.__default () T@U)
(declare-fun Tagclass.BoundedPivotsLib.__default () T@U)
(declare-fun Tagclass.ValueType.Value () T@U)
(declare-fun class.ValueType.__default () T@U)
(declare-fun Tagclass.ValueType.__default () T@U)
(declare-fun |##ValueMessage.Delta.NoDelta| () T@U)
(declare-fun Tagclass.ValueMessage.Delta () T@U)
(declare-fun class.ValueMessage.Delta () T@U)
(declare-fun class.ValueMessage.__default () T@U)
(declare-fun Tagclass.ValueMessage.__default () T@U)
(declare-fun |##ValueMessage.Message.Define| () T@U)
(declare-fun |##ValueMessage.Message.Update| () T@U)
(declare-fun class.ValueMessage.Message () T@U)
(declare-fun |##UI.RangeStart.SInclusive| () T@U)
(declare-fun Tagclass.UI.RangeStart () T@U)
(declare-fun |##UI.RangeStart.SExclusive| () T@U)
(declare-fun |##UI.RangeStart.NegativeInf| () T@U)
(declare-fun class.UI.RangeStart () T@U)
(declare-fun |##UI.RangeEnd.EInclusive| () T@U)
(declare-fun Tagclass.UI.RangeEnd () T@U)
(declare-fun |##UI.RangeEnd.EExclusive| () T@U)
(declare-fun |##UI.RangeEnd.PositiveInf| () T@U)
(declare-fun class.UI.RangeEnd () T@U)
(declare-fun |##UI.SuccResult.SuccResult| () T@U)
(declare-fun Tagclass.UI.SuccResult () T@U)
(declare-fun class.UI.SuccResult () T@U)
(declare-fun |##UI.SuccResultList.SuccResultList| () T@U)
(declare-fun Tagclass.UI.SuccResultList () T@U)
(declare-fun class.UI.SuccResultList () T@U)
(declare-fun |##UI.Op.NoOp| () T@U)
(declare-fun Tagclass.UI.Op () T@U)
(declare-fun |##UI.Op.SyncOp| () T@U)
(declare-fun |##UI.Op.CrashOp| () T@U)
(declare-fun |##UI.Op.PushSyncOp| () T@U)
(declare-fun |##UI.Op.PopSyncOp| () T@U)
(declare-fun |##UI.Op.GetOp| () T@U)
(declare-fun |##UI.Op.GetBeginOp| () T@U)
(declare-fun |##UI.Op.GetEndOp| () T@U)
(declare-fun |##UI.Op.PutOp| () T@U)
(declare-fun |##UI.Op.SuccOp| () T@U)
(declare-fun class.UI.Op () T@U)
(declare-fun class.UI.__default () T@U)
(declare-fun Tagclass.UI.__default () T@U)
(declare-fun |##MapSpec.Variables.Variables| () T@U)
(declare-fun Tagclass.MapSpec.Variables () T@U)
(declare-fun class.MapSpec.Variables () T@U)
(declare-fun |##MapSpec.Step.QueryStep| () T@U)
(declare-fun Tagclass.MapSpec.Step () T@U)
(declare-fun |##MapSpec.Step.WriteStep| () T@U)
(declare-fun |##MapSpec.Step.SuccStep| () T@U)
(declare-fun |##MapSpec.Step.StutterStep| () T@U)
(declare-fun class.MapSpec.Step () T@U)
(declare-fun class.MapSpec.__default () T@U)
(declare-fun Tagclass.MapSpec.__default () T@U)
(declare-fun class.BucketMaps.__default () T@U)
(declare-fun Tagclass.BucketMaps.__default () T@U)
(declare-fun class.Multisets.__default () T@U)
(declare-fun Tagclass.Multisets.__default () T@U)
(declare-fun |##MapSeqs.SeqPair.SeqPair| () T@U)
(declare-fun Tagclass.MapSeqs.SeqPair () T@U)
(declare-fun class.MapSeqs.SeqPair () T@U)
(declare-fun class.MapSeqs.__default () T@U)
(declare-fun Tagclass.MapSeqs.__default () T@U)
(declare-fun |##BucketsLib.Bucket.Bucket| () T@U)
(declare-fun class.BucketsLib.Bucket () T@U)
(declare-fun class.BucketsLib.__default () T@U)
(declare-fun Tagclass.BucketsLib.__default () T@U)
(declare-fun class.Bounds.__default () T@U)
(declare-fun Tagclass.Bounds.__default () T@U)
(declare-fun class.BucketWeights.__default () T@U)
(declare-fun Tagclass.BucketWeights.__default () T@U)
(declare-fun tytagFamily$nat () T@U)
(declare-fun tytagFamily$object () T@U)
(declare-fun tytagFamily$array () T@U)
(declare-fun |tytagFamily$_#Func1| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1| () T@U)
(declare-fun |tytagFamily$_#Func0| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0| () T@U)
(declare-fun tytagFamily$_default () T@U)
(declare-fun |tytagFamily$_#Func2| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2| () T@U)
(declare-fun |tytagFamily$_#Func4| () T@U)
(declare-fun |tytagFamily$_#PartialFunc4| () T@U)
(declare-fun |tytagFamily$_#TotalFunc4| () T@U)
(declare-fun |tytagFamily$_#Func10| () T@U)
(declare-fun |tytagFamily$_#PartialFunc10| () T@U)
(declare-fun |tytagFamily$_#TotalFunc10| () T@U)
(declare-fun |tytagFamily$_#Func3| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3| () T@U)
(declare-fun |tytagFamily$_#Func6| () T@U)
(declare-fun |tytagFamily$_#PartialFunc6| () T@U)
(declare-fun |tytagFamily$_#TotalFunc6| () T@U)
(declare-fun |tytagFamily$_tuple#2| () T@U)
(declare-fun |tytagFamily$_#Func5| () T@U)
(declare-fun |tytagFamily$_#PartialFunc5| () T@U)
(declare-fun |tytagFamily$_#TotalFunc5| () T@U)
(declare-fun |tytagFamily$_#Func2OSO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2OSO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2OSO| () T@U)
(declare-fun |tytagFamily$_#Func3LLOO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3LLOO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3LLOO| () T@U)
(declare-fun |tytagFamily$_#Func1OS| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1OS| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1OS| () T@U)
(declare-fun |tytagFamily$_#Func0L| () T@U)
(declare-fun |tytagFamily$_#PartialFunc0L| () T@U)
(declare-fun |tytagFamily$_#TotalFunc0L| () T@U)
(declare-fun |tytagFamily$_#Func2LOO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2LOO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2LOO| () T@U)
(declare-fun |tytagFamily$_tuple#0| () T@U)
(declare-fun |tytagFamily$_#Func1OL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1OL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1OL| () T@U)
(declare-fun |tytagFamily$_#Func1LO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1LO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1LO| () T@U)
(declare-fun |tytagFamily$_tuple#2OLL| () T@U)
(declare-fun |tytagFamily$_#Func3LLOL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc3LLOL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc3LLOL| () T@U)
(declare-fun |tytagFamily$_#Func2SSO| () T@U)
(declare-fun |tytagFamily$_#PartialFunc2SSO| () T@U)
(declare-fun |tytagFamily$_#TotalFunc2SSO| () T@U)
(declare-fun |tytagFamily$_#Func1SS| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1SS| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1SS| () T@U)
(declare-fun |tytagFamily$_#Func1LL| () T@U)
(declare-fun |tytagFamily$_#PartialFunc1LL| () T@U)
(declare-fun |tytagFamily$_#TotalFunc1LL| () T@U)
(declare-fun tytagFamily$Key () T@U)
(declare-fun tytagFamily$Message () T@U)
(declare-fun tytagFamily$singleMergeResult () T@U)
(declare-fun tytagFamily$Bucket () T@U)
(declare-fun tytagFamily$mergeResult () T@U)
(declare-fun tytagFamily$partialFlushResult () T@U)
(declare-fun tytagFamily$byte () T@U)
(declare-fun tytagFamily$Element () T@U)
(declare-fun tytagFamily$Option () T@U)
(declare-fun tytagFamily$sbyte () T@U)
(declare-fun tytagFamily$int16 () T@U)
(declare-fun tytagFamily$uint16 () T@U)
(declare-fun tytagFamily$int32 () T@U)
(declare-fun tytagFamily$uint32 () T@U)
(declare-fun tytagFamily$int64 () T@U)
(declare-fun tytagFamily$uint64 () T@U)
(declare-fun tytagFamily$nat8 () T@U)
(declare-fun tytagFamily$nat16 () T@U)
(declare-fun tytagFamily$nat32 () T@U)
(declare-fun tytagFamily$nat64 () T@U)
(declare-fun tytagFamily$uint128 () T@U)
(declare-fun tytagFamily$Value () T@U)
(declare-fun tytagFamily$Delta () T@U)
(declare-fun tytagFamily$RangeStart () T@U)
(declare-fun tytagFamily$RangeEnd () T@U)
(declare-fun tytagFamily$SuccResult () T@U)
(declare-fun tytagFamily$SuccResultList () T@U)
(declare-fun tytagFamily$Op () T@U)
(declare-fun tytagFamily$Variables () T@U)
(declare-fun tytagFamily$Step () T@U)
(declare-fun tytagFamily$SeqPair () T@U)
(declare-fun TyType () T@T)
(declare-fun TyTagType () T@T)
(declare-fun ClassNameType () T@T)
(declare-fun FieldType (T@T) T@T)
(declare-fun FieldTypeInv0 (T@T) T@T)
(declare-fun NameFamilyType () T@T)
(declare-fun DtCtorIdType () T@T)
(declare-fun TyTagFamilyType () T@T)
(declare-fun $$Language$Dafny () Bool)
(declare-fun TBitvector (Int) T@U)
(declare-fun Inv0_TBitvector (T@U) Int)
(declare-fun TSet (T@U) T@U)
(declare-fun Inv0_TSet (T@U) T@U)
(declare-fun TISet (T@U) T@U)
(declare-fun Inv0_TISet (T@U) T@U)
(declare-fun TSeq (T@U) T@U)
(declare-fun Inv0_TSeq (T@U) T@U)
(declare-fun TMultiSet (T@U) T@U)
(declare-fun Inv0_TMultiSet (T@U) T@U)
(declare-fun TMap (T@U T@U) T@U)
(declare-fun Inv0_TMap (T@U) T@U)
(declare-fun Inv1_TMap (T@U) T@U)
(declare-fun TIMap (T@U T@U) T@U)
(declare-fun Inv0_TIMap (T@U) T@U)
(declare-fun Inv1_TIMap (T@U) T@U)
(declare-fun Tag (T@U) T@U)
(declare-fun Lit (T@U) T@U)
(declare-fun $Box (T@U) T@U)
(declare-fun BoxType () T@T)
(declare-fun LitInt (Int) Int)
(declare-fun LitReal (Real) Real)
(declare-fun |char#ToInt| (T@U) Int)
(declare-fun charType () T@T)
(declare-fun |char#FromInt| (Int) T@U)
(declare-fun |char#Plus| (T@U T@U) T@U)
(declare-fun |char#Minus| (T@U T@U) T@U)
(declare-fun $Unbox (T@T T@U) T@U)
(declare-fun $IsBox (T@U T@U) Bool)
(declare-fun $Is (T@U T@U) Bool)
(declare-fun MapType0Type (T@T T@T) T@T)
(declare-fun MapType0TypeInv0 (T@T) T@T)
(declare-fun MapType0TypeInv1 (T@T) T@T)
(declare-fun MapType0Select (T@U T@U) T@U)
(declare-fun MapType0Store (T@U T@U T@U) T@U)
(declare-fun SeqType (T@T) T@T)
(declare-fun SeqTypeInv0 (T@T) T@T)
(declare-fun MapType (T@T T@T) T@T)
(declare-fun MapTypeInv0 (T@T) T@T)
(declare-fun MapTypeInv1 (T@T) T@T)
(declare-fun IMapType (T@T T@T) T@T)
(declare-fun IMapTypeInv0 (T@T) T@T)
(declare-fun IMapTypeInv1 (T@T) T@T)
(declare-fun $IsAllocBox (T@U T@U T@U) Bool)
(declare-fun refType () T@T)
(declare-fun MapType1Type () T@T)
(declare-fun $IsAlloc (T@U T@U T@U) Bool)
(declare-fun MapType1Select (T@U T@U) T@U)
(declare-fun MapType1Store (T@U T@U T@U) T@U)
(declare-fun $IsGoodMultiSet (T@U) Bool)
(declare-fun |Seq#Index| (T@U Int) T@U)
(declare-fun |Seq#Length| (T@U) Int)
(declare-fun |Map#Elements| (T@U) T@U)
(declare-fun |Map#Domain| (T@U) T@U)
(declare-fun |Map#Values| (T@U) T@U)
(declare-fun |Map#Items| (T@U) T@U)
(declare-fun Tclass._System.Tuple2 (T@U T@U) T@U)
(declare-fun |IMap#Elements| (T@U) T@U)
(declare-fun |IMap#Domain| (T@U) T@U)
(declare-fun |IMap#Values| (T@U) T@U)
(declare-fun |IMap#Items| (T@U) T@U)
(declare-fun TypeTuple (T@U T@U) T@U)
(declare-fun TypeTupleCar (T@U) T@U)
(declare-fun TypeTupleCdr (T@U) T@U)
(declare-fun SetRef_to_SetBox (T@U) T@U)
(declare-fun Tclass._System.object? () T@U)
(declare-fun BoxRank (T@U) Int)
(declare-fun DatatypeTypeType () T@T)
(declare-fun DtRank (T@U) Int)
(declare-fun |ORD#Offset| (T@U) Int)
(declare-fun |ORD#FromNat| (Int) T@U)
(declare-fun |ORD#IsNat| (T@U) Bool)
(declare-fun |ORD#Less| (T@U T@U) Bool)
(declare-fun |ORD#LessThanLimit| (T@U T@U) Bool)
(declare-fun |ORD#Plus| (T@U T@U) T@U)
(declare-fun |ORD#Minus| (T@U T@U) T@U)
(declare-fun AtLayer (T@U T@U) T@U)
(declare-fun LayerTypeType () T@T)
(declare-fun $LS (T@U) T@U)
(declare-fun IndexField (Int) T@U)
(declare-fun FDim (T@U) Int)
(declare-fun IndexField_Inverse (T@U) Int)
(declare-fun MultiIndexField (T@U Int) T@U)
(declare-fun MultiIndexField_Inverse0 (T@U) T@U)
(declare-fun MultiIndexField_Inverse1 (T@U) Int)
(declare-fun FieldOfDecl (T@T T@U T@U) T@U)
(declare-fun DeclType (T@U) T@U)
(declare-fun DeclName (T@U) T@U)
(declare-fun $HeapSucc (T@U T@U) Bool)
(declare-fun $IsGhostField (T@U) Bool)
(declare-fun _System.array.Length (T@U) Int)
(declare-fun q@Int (Real) Int)
(declare-fun q@Real (Int) Real)
(declare-fun $IsGoodHeap (T@U) Bool)
(declare-fun $OneHeap () T@U)
(declare-fun $HeapSuccGhost (T@U T@U) Bool)
(declare-fun |Set#Card| (T@U) Int)
(declare-fun |Set#Empty| (T@T) T@U)
(declare-fun |Set#Singleton| (T@U) T@U)
(declare-fun |Set#UnionOne| (T@U T@U) T@U)
(declare-fun |Set#Union| (T@U T@U) T@U)
(declare-fun |Set#Disjoint| (T@U T@U) Bool)
(declare-fun |Set#Difference| (T@U T@U) T@U)
(declare-fun |Set#Intersection| (T@U T@U) T@U)
(declare-fun |Set#Subset| (T@U T@U) Bool)
(declare-fun |Set#Equal| (T@U T@U) Bool)
(declare-fun |ISet#Empty| (T@T) T@U)
(declare-fun |ISet#UnionOne| (T@U T@U) T@U)
(declare-fun |ISet#Union| (T@U T@U) T@U)
(declare-fun |ISet#Disjoint| (T@U T@U) Bool)
(declare-fun |ISet#Difference| (T@U T@U) T@U)
(declare-fun |ISet#Intersection| (T@U T@U) T@U)
(declare-fun |ISet#Subset| (T@U T@U) Bool)
(declare-fun |ISet#Equal| (T@U T@U) Bool)
(declare-fun |Math#min| (Int Int) Int)
(declare-fun |Math#clip| (Int) Int)
(declare-fun |MultiSet#Card| (T@U) Int)
(declare-fun |MultiSet#Empty| (T@T) T@U)
(declare-fun |MultiSet#Singleton| (T@U) T@U)
(declare-fun |MultiSet#UnionOne| (T@U T@U) T@U)
(declare-fun |MultiSet#Union| (T@U T@U) T@U)
(declare-fun |MultiSet#Intersection| (T@U T@U) T@U)
(declare-fun |MultiSet#Difference| (T@U T@U) T@U)
(declare-fun |MultiSet#Subset| (T@U T@U) Bool)
(declare-fun |MultiSet#Equal| (T@U T@U) Bool)
(declare-fun |MultiSet#Disjoint| (T@U T@U) Bool)
(declare-fun |MultiSet#FromSet| (T@U) T@U)
(declare-fun |MultiSet#FromSeq| (T@U) T@U)
(declare-fun |Seq#Build| (T@U T@U) T@U)
(declare-fun |Seq#Empty| (T@T) T@U)
(declare-fun |Seq#Append| (T@U T@U) T@U)
(declare-fun |Seq#Update| (T@U Int T@U) T@U)
(declare-fun |Seq#Singleton| (T@U) T@U)
(declare-fun |Seq#Build_inv0| (T@U) T@U)
(declare-fun |Seq#Build_inv1| (T@U) T@U)
(declare-fun |Seq#Create| (T@U T@U Int T@U) T@U)
(declare-fun HandleTypeType () T@T)
(declare-fun Apply1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Seq#Contains| (T@U T@U) Bool)
(declare-fun |Seq#Take| (T@U Int) T@U)
(declare-fun |Seq#Drop| (T@U Int) T@U)
(declare-fun |Seq#Equal| (T@U T@U) Bool)
(declare-fun |Seq#SameUntil| (T@U T@U Int) Bool)
(declare-fun |Seq#FromArray| (T@U T@U) T@U)
(declare-fun |Seq#Rank| (T@U) Int)
(declare-fun |Map#Card| (T@U) Int)
(declare-fun |Map#Empty| (T@T T@T) T@U)
(declare-fun |#_System._tuple#2._#Make2| (T@U T@U) T@U)
(declare-fun _System.Tuple2._0 (T@U) T@U)
(declare-fun _System.Tuple2._1 (T@U) T@U)
(declare-fun |Map#Glue| (T@U T@U T@U) T@U)
(declare-fun |Map#Build| (T@U T@U T@U) T@U)
(declare-fun |Map#Merge| (T@U T@U) T@U)
(declare-fun |Map#Subtract| (T@U T@U) T@U)
(declare-fun |Map#Equal| (T@U T@U) Bool)
(declare-fun |Map#Disjoint| (T@U T@U) Bool)
(declare-fun |IMap#Empty| (T@T T@T) T@U)
(declare-fun |IMap#Glue| (T@U T@U T@U) T@U)
(declare-fun |IMap#Build| (T@U T@U T@U) T@U)
(declare-fun |IMap#Equal| (T@U T@U) Bool)
(declare-fun |IMap#Merge| (T@U T@U) T@U)
(declare-fun |IMap#Subtract| (T@U T@U) T@U)
(declare-fun INTERNAL_add_boogie (Int Int) Int)
(declare-fun INTERNAL_sub_boogie (Int Int) Int)
(declare-fun INTERNAL_mul_boogie (Int Int) Int)
(declare-fun INTERNAL_div_boogie (Int Int) Int)
(declare-fun INTERNAL_mod_boogie (Int Int) Int)
(declare-fun INTERNAL_lt_boogie (Int Int) Bool)
(declare-fun INTERNAL_le_boogie (Int Int) Bool)
(declare-fun INTERNAL_gt_boogie (Int Int) Bool)
(declare-fun INTERNAL_ge_boogie (Int Int) Bool)
(declare-fun Mul (Int Int) Int)
(declare-fun Div (Int Int) Int)
(declare-fun Mod (Int Int) Int)
(declare-fun Add (Int Int) Int)
(declare-fun Sub (Int Int) Int)
(declare-fun _System.__default.rank__is__less__than (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.nat () T@U)
(declare-fun TagFamily (T@U) T@U)
(declare-fun null () T@U)
(declare-fun Tclass._System.object () T@U)
(declare-fun Tclass._System.array? (T@U) T@U)
(declare-fun Tclass._System.array?_0 (T@U) T@U)
(declare-fun dtype (T@U) T@U)
(declare-fun Tclass._System.array (T@U) T@U)
(declare-fun Tclass._System.array_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1_1 (T@U) T@U)
(declare-fun Handle1 (T@U T@U T@U) T@U)
(declare-fun MapType2Type (T@T T@T T@T) T@T)
(declare-fun MapType2Select (T@U T@U T@U) T@U)
(declare-fun MapType2TypeInv0 (T@T) T@T)
(declare-fun MapType2TypeInv1 (T@T) T@T)
(declare-fun MapType2TypeInv2 (T@T) T@T)
(declare-fun MapType2Store (T@U T@U T@U T@U) T@U)
(declare-fun Requires1 (T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1 (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0_0 (T@U) T@U)
(declare-fun Apply0 (T@U T@U T@U) T@U)
(declare-fun Handle0 (T@U T@U T@U) T@U)
(declare-fun Requires0 (T@U T@U T@U) Bool)
(declare-fun Reads0 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0_0 (T@U) T@U)
(declare-fun Tclass._System.__default () T@U)
(declare-fun |_System.__default.rank__is__less__than#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |_System.__default.rank__is__less__than#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2_2 (T@U) T@U)
(declare-fun Apply2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle2 (T@U T@U T@U) T@U)
(declare-fun MapType3Type (T@T T@T T@T T@T) T@T)
(declare-fun MapType3Select (T@U T@U T@U T@U) T@U)
(declare-fun MapType3TypeInv0 (T@T) T@T)
(declare-fun MapType3TypeInv1 (T@T) T@T)
(declare-fun MapType3TypeInv2 (T@T) T@T)
(declare-fun MapType3TypeInv3 (T@T) T@T)
(declare-fun MapType3Store (T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires2 (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads2 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2 (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc4_4 (T@U) T@U)
(declare-fun Apply4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle4 (T@U T@U T@U) T@U)
(declare-fun MapType4Type (T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType4Select (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType4TypeInv0 (T@T) T@T)
(declare-fun MapType4TypeInv1 (T@T) T@T)
(declare-fun MapType4TypeInv2 (T@T) T@T)
(declare-fun MapType4TypeInv3 (T@T) T@T)
(declare-fun MapType4TypeInv4 (T@T) T@T)
(declare-fun MapType4TypeInv5 (T@T) T@T)
(declare-fun MapType4Store (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads4 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4 (T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc4_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc10 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc10_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc10_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc10_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc10_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc10_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc10_5 (T@U) T@U)
(declare-fun Tclass._System.___hFunc10_6 (T@U) T@U)
(declare-fun Tclass._System.___hFunc10_7 (T@U) T@U)
(declare-fun Tclass._System.___hFunc10_8 (T@U) T@U)
(declare-fun Tclass._System.___hFunc10_9 (T@U) T@U)
(declare-fun Tclass._System.___hFunc10_10 (T@U) T@U)
(declare-fun Apply10 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle10 (T@U T@U T@U) T@U)
(declare-fun MapType5Type (T@T T@T T@T T@T T@T T@T T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType5Select (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType5TypeInv0 (T@T) T@T)
(declare-fun MapType5TypeInv1 (T@T) T@T)
(declare-fun MapType5TypeInv2 (T@T) T@T)
(declare-fun MapType5TypeInv3 (T@T) T@T)
(declare-fun MapType5TypeInv4 (T@T) T@T)
(declare-fun MapType5TypeInv5 (T@T) T@T)
(declare-fun MapType5TypeInv6 (T@T) T@T)
(declare-fun MapType5TypeInv7 (T@T) T@T)
(declare-fun MapType5TypeInv8 (T@T) T@T)
(declare-fun MapType5TypeInv9 (T@T) T@T)
(declare-fun MapType5TypeInv10 (T@T) T@T)
(declare-fun MapType5TypeInv11 (T@T) T@T)
(declare-fun MapType5Store (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires10 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads10 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc10 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc10_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc10_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc10_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc10_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc10_4 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc10_5 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc10_6 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc10_7 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc10_8 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc10_9 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc10_10 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc10 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc10_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc10_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc10_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc10_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc10_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc10_5 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc10_6 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc10_7 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc10_8 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc10_9 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc10_10 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3_3 (T@U) T@U)
(declare-fun Apply3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle3 (T@U T@U T@U) T@U)
(declare-fun MapType6Type (T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType6Select (T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType6TypeInv0 (T@T) T@T)
(declare-fun MapType6TypeInv1 (T@T) T@T)
(declare-fun MapType6TypeInv2 (T@T) T@T)
(declare-fun MapType6TypeInv3 (T@T) T@T)
(declare-fun MapType6TypeInv4 (T@T) T@T)
(declare-fun MapType6Store (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads3 (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3 (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc6_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_5 (T@U) T@U)
(declare-fun Tclass._System.___hFunc6_6 (T@U) T@U)
(declare-fun Apply6 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle6 (T@U T@U T@U) T@U)
(declare-fun MapType7Type (T@T T@T T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType7Select (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType7TypeInv0 (T@T) T@T)
(declare-fun MapType7TypeInv1 (T@T) T@T)
(declare-fun MapType7TypeInv2 (T@T) T@T)
(declare-fun MapType7TypeInv3 (T@T) T@T)
(declare-fun MapType7TypeInv4 (T@T) T@T)
(declare-fun MapType7TypeInv5 (T@T) T@T)
(declare-fun MapType7TypeInv6 (T@T) T@T)
(declare-fun MapType7TypeInv7 (T@T) T@T)
(declare-fun MapType7Store (T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires6 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads6 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_4 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_5 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc6_6 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6 (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_5 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc6_6 (T@U) T@U)
(declare-fun DatatypeCtorId (T@U) T@U)
(declare-fun _System.Tuple2.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2_1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2| (T@U) Bool)
(declare-fun |_System.Tuple2#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hFunc5_5 (T@U) T@U)
(declare-fun Apply5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Handle5 (T@U T@U T@U) T@U)
(declare-fun MapType8Type (T@T T@T T@T T@T T@T T@T T@T) T@T)
(declare-fun MapType8Select (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun MapType8TypeInv0 (T@T) T@T)
(declare-fun MapType8TypeInv1 (T@T) T@T)
(declare-fun MapType8TypeInv2 (T@T) T@T)
(declare-fun MapType8TypeInv3 (T@T) T@T)
(declare-fun MapType8TypeInv4 (T@T) T@T)
(declare-fun MapType8TypeInv5 (T@T) T@T)
(declare-fun MapType8TypeInv6 (T@T) T@T)
(declare-fun MapType8Store (T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Requires5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Reads5 (T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc5_5 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_4 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc5_5 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2OSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2OSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2OSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOO_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOO_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOO_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1OS (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1OS_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1OS_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OS (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OS_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OS_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OS (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OS_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OS_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc0L (T@U) T@U)
(declare-fun Tclass._System.___hFunc0L_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0L (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc0L_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0L (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc0L_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2LOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2LOO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2LOO_2 (T@U) T@U)
(declare-fun |#_System._tuple#0._#Make0| () T@U)
(declare-fun _System.Tuple0.___hMake0_q (T@U) Bool)
(declare-fun Tclass._System.Tuple0 () T@U)
(declare-fun |$IsA#_System.Tuple0| (T@U) Bool)
(declare-fun |_System.Tuple0#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc1OL (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1OL_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1OL_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OL (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OL_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1OL_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OL (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OL_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1OL_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LO (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1LO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LO (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LO (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LO_1 (T@U) T@U)
(declare-fun |#_System._tuple#2OLL._#Make2| (T@U T@U) T@U)
(declare-fun _System.Tuple2OLL.___hMake2_q (T@U) Bool)
(declare-fun Tclass._System.Tuple2OLL (T@U T@U) T@U)
(declare-fun Tclass._System.Tuple2OLL_0 (T@U) T@U)
(declare-fun Tclass._System.Tuple2OLL_1 (T@U) T@U)
(declare-fun _System.Tuple2OLL._0 (T@U) T@U)
(declare-fun _System.Tuple2OLL._1 (T@U) T@U)
(declare-fun |$IsA#_System.Tuple2OLL| (T@U) Bool)
(declare-fun |_System.Tuple2OLL#Equal| (T@U T@U) Bool)
(declare-fun Tclass._System.___hFunc3LLOL (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc3LLOL_3 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc3LLOL_3 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL (T@U T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc3LLOL_3 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc2SSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc2SSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO (T@U T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc2SSO_2 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1SS (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1SS_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1SS_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1SS (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1SS_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1SS_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1SS (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1SS_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1SS_1 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LL (T@U T@U) T@U)
(declare-fun Tclass._System.___hFunc1LL_0 (T@U) T@U)
(declare-fun Tclass._System.___hFunc1LL_1 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LL (T@U T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LL_0 (T@U) T@U)
(declare-fun Tclass._System.___hPartialFunc1LL_1 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LL (T@U T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LL_0 (T@U) T@U)
(declare-fun Tclass._System.___hTotalFunc1LL_1 (T@U) T@U)
(declare-fun |#BucketFlushModel.singleMergeResult.MergeCompleted| (T@U T@U Int) T@U)
(declare-fun BucketFlushModel.singleMergeResult.MergeCompleted_q (T@U) Bool)
(declare-fun Tclass.KeyType.Key () T@U)
(declare-fun Tclass.ValueMessage.Message () T@U)
(declare-fun Tclass.BucketFlushModel.singleMergeResult () T@U)
(declare-fun BucketFlushModel.singleMergeResult.keys (T@U) T@U)
(declare-fun BucketFlushModel.singleMergeResult.msgs (T@U) T@U)
(declare-fun BucketFlushModel.singleMergeResult.slack (T@U) Int)
(declare-fun |#BucketFlushModel.singleMergeResult.SlackExhausted| (T@U T@U Int Int) T@U)
(declare-fun BucketFlushModel.singleMergeResult.SlackExhausted_q (T@U) Bool)
(declare-fun BucketFlushModel.singleMergeResult.end (T@U) Int)
(declare-fun |$IsA#BucketFlushModel.singleMergeResult| (T@U) Bool)
(declare-fun |BucketFlushModel.singleMergeResult#Equal| (T@U T@U) Bool)
(declare-fun $FunctionContextHeight () Int)
(declare-fun BucketFlushModel.singleMergeResult.bucketMap (T@U) T@U)
(declare-fun |BucketFlushModel.singleMergeResult.bucketMap#canCall| (T@U) Bool)
(declare-fun |BucketFlushModel.singleMergeResult.bucketMap#requires| (T@U) Bool)
(declare-fun |MapSeqs.__default.map__of__seqs#canCall| (T@U T@U) Bool)
(declare-fun MapSeqs.__default.map__of__seqs (T@U T@U T@U) T@U)
(declare-fun $LZ () T@U)
(declare-fun BucketFlushModel.singleMergeResult.flushedKeys (T@U T@U T@U Int Int) T@U)
(declare-fun |BucketFlushModel.singleMergeResult.flushedKeys#canCall| (T@U T@U T@U Int Int) Bool)
(declare-fun |BucketFlushModel.singleMergeResult.flushedKeys#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun |lambda#2| (T@U T@U) T@U)
(declare-fun BucketFlushModel.singleMergeResult.flushedMap (T@U T@U T@U Int Int) T@U)
(declare-fun |BucketFlushModel.singleMergeResult.flushedMap#canCall| (T@U T@U T@U Int Int) Bool)
(declare-fun |BucketFlushModel.singleMergeResult.flushedMap#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun |lambda#10| (T@U T@U T@U) T@U)
(declare-fun |lambda#11| (T@U) T@U)
(declare-fun |#BucketFlushModel.mergeResult.mergeResult| (T@U T@U Int) T@U)
(declare-fun BucketFlushModel.mergeResult.mergeResult_q (T@U) Bool)
(declare-fun Tclass.BucketsLib.Bucket () T@U)
(declare-fun Tclass.BucketFlushModel.mergeResult () T@U)
(declare-fun BucketFlushModel.mergeResult.top (T@U) T@U)
(declare-fun BucketFlushModel.mergeResult.bots (T@U) T@U)
(declare-fun BucketFlushModel.mergeResult.slack (T@U) Int)
(declare-fun |$IsA#BucketFlushModel.mergeResult| (T@U) Bool)
(declare-fun |BucketFlushModel.mergeResult#Equal| (T@U T@U) Bool)
(declare-fun |BucketsLib.Bucket#Equal| (T@U T@U) Bool)
(declare-fun |#BucketFlushModel.partialFlushResult.partialFlushResult| (T@U T@U) T@U)
(declare-fun BucketFlushModel.partialFlushResult.partialFlushResult_q (T@U) Bool)
(declare-fun Tclass.BucketFlushModel.partialFlushResult () T@U)
(declare-fun BucketFlushModel.partialFlushResult.top (T@U) T@U)
(declare-fun BucketFlushModel.partialFlushResult.bots (T@U) T@U)
(declare-fun |$IsA#BucketFlushModel.partialFlushResult| (T@U) Bool)
(declare-fun |BucketFlushModel.partialFlushResult#Equal| (T@U T@U) Bool)
(declare-fun Tclass.BucketFlushModel.__default () T@U)
(declare-fun BucketFlushModel.__default.mergeToOneChild (T@U T@U T@U Int Int T@U T@U Int T@U T@U Int) T@U)
(declare-fun AsFuelBottom (T@U) T@U)
(declare-fun |BucketFlushModel.__default.mergeToOneChild#canCall| (T@U T@U Int Int T@U T@U Int T@U T@U Int) Bool)
(declare-fun |BucketFlushModel.__default.mergeToOneChild#requires| (T@U T@U T@U Int Int T@U T@U Int T@U T@U Int) Bool)
(declare-fun |ValueMessage.__default.Merge#canCall| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.Merge (T@U T@U) T@U)
(declare-fun |$IsA#ValueMessage.Message| (T@U) Bool)
(declare-fun ValueMessage.__default.IdentityMessage () T@U)
(declare-fun |ValueMessage.__default.IdentityMessage#canCall| () Bool)
(declare-fun |ValueMessage.Message#Equal| (T@U T@U) Bool)
(declare-fun |BucketWeights.__default.WeightKey#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.WeightMessage#canCall| (T@U) Bool)
(declare-fun BucketWeights.__default.WeightKey (T@U) Int)
(declare-fun BucketWeights.__default.WeightMessage (T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.lt#canCall| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.lt (T@U T@U) Bool)
(declare-fun Tclass.NativeTypes.byte () T@U)
(declare-fun BucketFlushModel.__default.topBotAccMergeForKey (T@U T@U T@U T@U) T@U)
(declare-fun |BucketFlushModel.__default.topBotAccMergeForKey#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |BucketFlushModel.__default.topBotAccMergeForKey#requires| (T@U T@U T@U T@U) Bool)
(declare-fun BucketFlushModel.__default.topBotAccMerge (T@U T@U T@U) T@U)
(declare-fun |BucketFlushModel.__default.topBotAccMerge#canCall| (T@U T@U T@U) Bool)
(declare-fun |BucketFlushModel.__default.topBotAccMerge#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#22| (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#23| (T@U T@U T@U) T@U)
(declare-fun BucketFlushModel.__default.seq__lt (T@U T@U Int) Bool)
(declare-fun |BucketFlushModel.__default.seq__lt#canCall| (T@U T@U Int) Bool)
(declare-fun |BucketFlushModel.__default.seq__lt#requires| (T@U T@U Int) Bool)
(declare-fun Tclass.Upperbounded__Lexicographic__Byte__Order.Element () T@U)
(declare-fun BucketFlushModel.__default.bucketStartIdx (T@U T@U Int) Int)
(declare-fun |BucketFlushModel.__default.bucketStartIdx#canCall| (T@U T@U Int) Bool)
(declare-fun BoundedPivotsLib.__default.WFPivots (T@U) Bool)
(declare-fun BoundedPivotsLib.__default.NumBuckets (T@U) Int)
(declare-fun |BucketFlushModel.__default.bucketStartIdx#requires| (T@U T@U Int) Bool)
(declare-fun |BoundedPivotsLib.__default.KeysToElements#canCall| (T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (T@U T@U) Bool)
(declare-fun BoundedPivotsLib.__default.KeysToElements (T@U) T@U)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte (T@U T@U T@U) Int)
(declare-fun StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun BucketFlushModel.__default.bucketEndIdx (T@U T@U Int) Int)
(declare-fun |BucketFlushModel.__default.bucketEndIdx#canCall| (T@U T@U Int) Bool)
(declare-fun |BucketFlushModel.__default.bucketEndIdx#requires| (T@U T@U Int) Bool)
(declare-fun BucketFlushModel.__default.pivotIndexes (T@U T@U T@U) T@U)
(declare-fun |BucketFlushModel.__default.pivotIndexes#canCall| (T@U T@U) Bool)
(declare-fun |BucketFlushModel.__default.pivotIndexes#requires| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun Sequences.__default.DropLast (T@U T@U) T@U)
(declare-fun |Sequences.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun Sequences.__default.Last (T@U T@U) T@U)
(declare-fun BucketFlushModel.__default.mergeToChildrenIter (T@U T@U T@U T@U T@U Int T@U) T@U)
(declare-fun |BucketFlushModel.__default.mergeToChildrenIter#canCall| (T@U T@U T@U T@U Int T@U) Bool)
(declare-fun BucketsLib.__default.WFBucket (T@U) Bool)
(declare-fun BucketsLib.Bucket.keys (T@U) T@U)
(declare-fun |BucketFlushModel.__default.mergeToChildrenIter#requires| (T@U T@U T@U T@U T@U Int T@U) Bool)
(declare-fun BucketsLib.Bucket.Bucket_q (T@U) Bool)
(declare-fun |BucketsLib.__default.EmptyBucket#canCall| () Bool)
(declare-fun BucketsLib.Bucket.msgs (T@U) T@U)
(declare-fun StartFuel_BucketFlushModel._default.mergeToOneChild () T@U)
(declare-fun |#BucketsLib.Bucket.Bucket| (T@U T@U) T@U)
(declare-fun BucketsLib.__default.EmptyBucket () T@U)
(declare-fun BucketFlushModel.__default.mergeToChildren (T@U T@U T@U T@U Int) T@U)
(declare-fun |BucketFlushModel.__default.mergeToChildren#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |BucketFlushModel.__default.mergeToChildren#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun BucketFlushModel.__default.getFlushedKeys (T@U T@U) T@U)
(declare-fun |BucketFlushModel.__default.getFlushedKeys#canCall| (T@U T@U) Bool)
(declare-fun |BucketFlushModel.__default.getFlushedKeys#requires| (T@U T@U) Bool)
(declare-fun |lambda#56| (Int Int T@U T@U) T@U)
(declare-fun BucketFlushModel.__default.partialFlush (T@U T@U T@U T@U) T@U)
(declare-fun |BucketFlushModel.__default.partialFlush#canCall| (T@U T@U T@U) Bool)
(declare-fun BucketWeights.__default.WeightBucketList (T@U T@U) Int)
(declare-fun StartFuel_BucketWeights._default.WeightBucketList () T@U)
(declare-fun Bounds.__default.MaxTotalBucketWeight () Int)
(declare-fun |BucketFlushModel.__default.partialFlush#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |Bounds.__default.MaxTotalBucketWeight#canCall| () Bool)
(declare-fun |BucketWeights.__default.WeightBucketList#canCall| (T@U) Bool)
(declare-fun StartFuel_BucketFlushModel._default.mergeToChildren () T@U)
(declare-fun Tclass.SequencesLite.__default () T@U)
(declare-fun SequencesLite.__default.Last (T@U T@U) T@U)
(declare-fun |SequencesLite.__default.Last#canCall| (T@U T@U) Bool)
(declare-fun |SequencesLite.__default.Last#requires| (T@U T@U) Bool)
(declare-fun SequencesLite.__default.DropLast (T@U T@U) T@U)
(declare-fun |SequencesLite.__default.DropLast#canCall| (T@U T@U) Bool)
(declare-fun |SequencesLite.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun |#Options.Option.None| () T@U)
(declare-fun Options.Option.None_q (T@U) Bool)
(declare-fun Tclass.Options.Option (T@U) T@U)
(declare-fun Tclass.Options.Option_0 (T@U) T@U)
(declare-fun |#Options.Option.Some| (T@U) T@U)
(declare-fun Options.Option.Some_q (T@U) Bool)
(declare-fun Options.Option.value (T@U) T@U)
(declare-fun |$IsA#Options.Option| (T@U) Bool)
(declare-fun |Options.Option#Equal| (T@U T@U) Bool)
(declare-fun Tclass.Options.__default () T@U)
(declare-fun $IsHeapAnchor (T@U) Bool)
(declare-fun Options.__default.MapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.MapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.MapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Options.__default.FlatMapOption (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Options.__default.FlatMapOption#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Options.__default.FlatMapOption#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Tclass.NativeTypes.sbyte () T@U)
(declare-fun Tclass.NativeTypes.int16 () T@U)
(declare-fun Tclass.NativeTypes.uint16 () T@U)
(declare-fun Tclass.NativeTypes.int32 () T@U)
(declare-fun Tclass.NativeTypes.uint32 () T@U)
(declare-fun Tclass.NativeTypes.int64 () T@U)
(declare-fun Tclass.NativeTypes.uint64 () T@U)
(declare-fun Tclass.NativeTypes.nat8 () T@U)
(declare-fun Tclass.NativeTypes.nat16 () T@U)
(declare-fun Tclass.NativeTypes.nat32 () T@U)
(declare-fun Tclass.NativeTypes.nat64 () T@U)
(declare-fun Tclass.NativeTypes.uint128 () T@U)
(declare-fun Tclass.NativeTypes.__default () T@U)
(declare-fun NativeTypes.__default.Uint64Size () Int)
(declare-fun |NativeTypes.__default.Uint64Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32Size () Int)
(declare-fun |NativeTypes.__default.Uint32Size#requires| () Bool)
(declare-fun NativeTypes.__default.Uint16Size () Int)
(declare-fun |NativeTypes.__default.Uint16Size#requires| () Bool)
(declare-fun |NativeTypes.__default.Uint64UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint64UpperBound () Int)
(declare-fun |NativeTypes.__default.Uint32UpperBound#requires| () Bool)
(declare-fun NativeTypes.__default.Uint32UpperBound () Int)
(declare-fun Tclass.Mathematics.__default () T@U)
(declare-fun Mathematics.__default.min (Int Int) Int)
(declare-fun |Mathematics.__default.min#requires| (Int Int) Bool)
(declare-fun Mathematics.__default.max (Int Int) Int)
(declare-fun |Mathematics.__default.max#requires| (Int Int) Bool)
(declare-fun Mathematics.__default.Set (T@U T@U) T@U)
(declare-fun |Mathematics.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.Set#requires| (T@U T@U) Bool)
(declare-fun |lambda#90| (T@U T@U Int) T@U)
(declare-fun Mathematics.__default.ISet (T@U T@U) T@U)
(declare-fun |Mathematics.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun |lambda#92| (T@U T@U) T@U)
(declare-fun Tclass.Sequences.__default () T@U)
(declare-fun |Sequences.__default.Last#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.FirstOpt (T@U T@U) T@U)
(declare-fun |Sequences.__default.FirstOpt#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FirstOpt#requires| (T@U T@U) Bool)
(declare-fun |Sequences.__default.DropLast#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Set (T@U T@U) T@U)
(declare-fun |Sequences.__default.Set#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.Set#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.ISet (T@U T@U) T@U)
(declare-fun |Sequences.__default.ISet#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.ISet#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.NoDupes (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.NoDupes#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IndexOf (T@U T@U T@U) Int)
(declare-fun |Sequences.__default.IndexOf#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IndexOf#requires| (T@U T@U T@U) Bool)
(declare-fun |$let#0_i| (T@U T@U T@U) Int)
(declare-fun |$let#0$canCall| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Range (T@U Int) T@U)
(declare-fun |Sequences.__default.Range#canCall| (Int) Bool)
(declare-fun |Sequences.__default.Range#requires| (T@U Int) Bool)
(declare-fun Sequences.__default.Apply (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Apply#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Apply#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.ApplyOpaque (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.ApplyOpaque#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.ApplyOpaque#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Filter (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Filter#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Filter#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldLeft (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldLeft#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldLeft#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FoldFromRight (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FoldFromRight#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.FoldFromRight#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.remove (T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.remove#canCall| (T@U T@U Int) Bool)
(declare-fun |Sequences.__default.remove#requires| (T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.RemoveOneValue (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.RemoveOneValue#canCall| (T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.NoDupes () T@U)
(declare-fun |Sequences.__default.RemoveOneValue#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |$let#4_i| (T@U T@U T@U) Int)
(declare-fun |$let#4$canCall| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.NoDupes0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.NoDupes () T@U)
(declare-fun MoreFuel_Sequences._default.NoDupes1 () T@U)
(declare-fun MoreFuel_Sequences._default.NoDupes2 () T@U)
(declare-fun Sequences.__default.insert (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.insert#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.insert#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace1with2 (T@U T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace1with2#canCall| (T@U T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace1with2#requires| (T@U T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.replace2with1 (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.replace2with1#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.replace2with1#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.concat (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concat3 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concat3#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.concat3#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.concatSeq (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.concatSeq#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.concatSeq#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsPrefix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsPrefix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.IsSuffix (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.IsSuffix#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.SeqIndexIterate (T@U T@U T@U T@U Int) T@U)
(declare-fun |Sequences.__default.SeqIndexIterate#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |Sequences.__default.SeqIndexIterate#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun Sequences.__default.SeqIndex (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.SeqIndex#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.SeqIndex#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.SeqIndexIterate () T@U)
(declare-fun Sequences.__default.SeqOfLength (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqOfLength#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqOfLength#requires| (T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.SeqIndexUpdate (T@U T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.SeqIndexUpdate#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Sequences.__default.SeqIndexUpdate#requires| (T@U T@U T@U Int T@U) Bool)
(declare-fun Sequences.__default.Zip (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Zip#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Zip#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.Unzip (T@U T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Unzip#canCall| (T@U T@U T@U) Bool)
(declare-fun |Sequences.__default.Unzip#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenShape (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.FlattenShape#canCall| (T@U T@U) Bool)
(declare-fun |Sequences.__default.FlattenShape#requires| (T@U T@U T@U) Bool)
(declare-fun Sequences.__default.FlattenLength (T@U T@U) Int)
(declare-fun |Sequences.__default.FlattenLength#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.FlattenLength#requires| (T@U T@U) Bool)
(declare-fun Sequences.__default.Flatten (T@U T@U T@U) T@U)
(declare-fun |Sequences.__default.Flatten#canCall| (T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.FlattenLength () T@U)
(declare-fun StartFuel_Sequences._default.FlattenShape () T@U)
(declare-fun |Sequences.__default.Flatten#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenShape0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenShape () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenShape1 () T@U)
(declare-fun Sequences.__default.FlattenIndex (T@U Int Int) Int)
(declare-fun |Sequences.__default.FlattenIndex#canCall| (T@U Int Int) Bool)
(declare-fun |Sequences.__default.FlattenIndex#requires| (T@U Int Int) Bool)
(declare-fun Sequences.__default.UnflattenIndex (T@U T@U Int) T@U)
(declare-fun |Sequences.__default.UnflattenIndex#canCall| (T@U Int) Bool)
(declare-fun |Sequences.__default.UnflattenIndex#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Sequences._default.FlattenLength0 () T@U)
(declare-fun StartFuelAssert_Sequences._default.FlattenLength () T@U)
(declare-fun MoreFuel_Sequences._default.FlattenLength1 () T@U)
(declare-fun Sequences.__default.seqMax (T@U T@U) Int)
(declare-fun |Sequences.__default.seqMax#canCall| (T@U) Bool)
(declare-fun |Sequences.__default.seqMax#requires| (T@U T@U) Bool)
(declare-fun |Mathematics.__default.max#canCall| (Int Int) Bool)
(declare-fun Sequences.__default.fill (T@U T@U Int T@U) T@U)
(declare-fun |Sequences.__default.fill#canCall| (T@U Int T@U) Bool)
(declare-fun |Sequences.__default.fill#requires| (T@U T@U Int T@U) Bool)
(declare-fun Tclass.KeyType.__default () T@U)
(declare-fun KeyType.__default.MaxLen () Int)
(declare-fun |KeyType.__default.MaxLen#requires| () Bool)
(declare-fun Tclass.Sets.__default () T@U)
(declare-fun Sets.__default.SetRange (Int) T@U)
(declare-fun |Sets.__default.SetRange#requires| (Int) Bool)
(declare-fun |lambda#98| (T@U Int Int) T@U)
(declare-fun Tclass.MapRemove_s.__default () T@U)
(declare-fun MapRemove_s.__default.MapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |MapRemove_s.__default.MapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MapRemove_s.__default.MapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#100| (T@U T@U T@U) T@U)
(declare-fun Tclass.Maps.__default () T@U)
(declare-fun Maps.__default.IMapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsTo (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsTo#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapsAgreeOnKey (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapsAgreeOnKey#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubIMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubIMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IsSubMap (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IsSubMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#106| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapRemoveStrong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemoveStrong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemoveStrong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove0 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove () T@U)
(declare-fun MoreFuel_Maps._default.MapRemove1 () T@U)
(declare-fun Maps.__default.MapRemove1 (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove1#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_MapRemove_s._default.MapRemove1 () T@U)
(declare-fun Maps.__default.MapRemove1Strong (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRemove1Strong#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRemove1Strong#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun MoreFuel_MapRemove_s._default.MapRemove10 () T@U)
(declare-fun StartFuelAssert_MapRemove_s._default.MapRemove1 () T@U)
(declare-fun MoreFuel_MapRemove_s._default.MapRemove11 () T@U)
(declare-fun MoreFuel_MapRemove_s._default.MapRemove12 () T@U)
(declare-fun Maps.__default.IMapRemove (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRemove1 (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRemove1#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRemove1#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapIRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapIRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapIRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapRestrict (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapRestrict#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapRestrict#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapDisjointUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapDisjointUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapDisjointUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#133| (T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapUnionPreferA () T@U)
(declare-fun Maps.__default.IMapUnionPreferA (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferA#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferA#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnionPreferB (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnionPreferB#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnionPreferB#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.IMapUnion (T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.IMapUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.IMapUnion#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.IMapUnionPreferA () T@U)
(declare-fun Maps.__default.MapDisjointUnion3 (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapDisjointUnion3#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Maps._default.MapDisjointUnion () T@U)
(declare-fun |Maps.__default.MapDisjointUnion3#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |lambda#153| (T@U T@U T@U T@U T@U) T@U)
(declare-fun Maps.__default.MapToImap (T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapToImap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapToImap#requires| (T@U T@U T@U) Bool)
(declare-fun Maps.__default.MapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.MapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.MapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Maps.__default.ImapLookupOption (T@U T@U T@U T@U) T@U)
(declare-fun |Maps.__default.ImapLookupOption#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Maps.__default.ImapLookupOption#requires| (T@U T@U T@U T@U) Bool)
(declare-fun Tclass.SeqComparison.__default () T@U)
(declare-fun SeqComparison.__default.lte (T@U T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lte#canCall| (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lte#requires| (T@U T@U T@U) Bool)
(declare-fun SeqComparison.__default.lt (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lt#canCall| (T@U T@U) Bool)
(declare-fun |SeqComparison.__default.lt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_SeqComparison._default.lte () T@U)
(declare-fun Tclass.NativeArrays.__default () T@U)
(declare-fun Tclass.LinearMaybe.__default () T@U)
(declare-fun LinearMaybe.__default.has (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.has#canCall| (T@U T@U) Bool)
(declare-fun |#$maybe| (T@U) T@U)
(declare-fun |LinearMaybe.__default.has#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.read (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.read#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.read#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.peek (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.peek#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.peek#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.unwrap (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.unwrap#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.unwrap#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.give (T@U T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.give#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.give#requires| (T@U T@U T@U) Bool)
(declare-fun LinearMaybe.__default.empty (T@U) T@U)
(declare-fun |LinearMaybe.__default.empty#requires| (T@U) Bool)
(declare-fun LinearMaybe.__default.discard (T@U T@U) T@U)
(declare-fun |LinearMaybe.__default.discard#canCall| (T@U T@U) Bool)
(declare-fun |LinearMaybe.__default.discard#requires| (T@U T@U) Bool)
(declare-fun LinearMaybe.__default.imagine (T@U Bool T@U) T@U)
(declare-fun |LinearMaybe.__default.imagine#canCall| (T@U Bool T@U) Bool)
(declare-fun |LinearMaybe.__default.imagine#requires| (T@U Bool T@U) Bool)
(declare-fun Tclass.LinearExtern.__default () T@U)
(declare-fun LinearExtern.__default.seq_get (T@U T@U Int) T@U)
(declare-fun |LinearExtern.__default.seq_get#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearExtern.__default.seq_get#requires| (T@U T@U Int) Bool)
(declare-fun LinearExtern.__default.seq_set (T@U T@U Int T@U) T@U)
(declare-fun |LinearExtern.__default.seq_set#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |LinearExtern.__default.seq_set#requires| (T@U T@U Int T@U) Bool)
(declare-fun LinearExtern.__default.seq_length (T@U T@U) Int)
(declare-fun |LinearExtern.__default.seq_length#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.seq_length#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.seq_empty (T@U) T@U)
(declare-fun |LinearExtern.__default.seq_empty#requires| (T@U) Bool)
(declare-fun LinearExtern.__default.seq_alloc (T@U Int T@U) T@U)
(declare-fun |LinearExtern.__default.seq_alloc#canCall| (T@U Int T@U) Bool)
(declare-fun |LinearExtern.__default.seq_alloc#requires| (T@U Int T@U) Bool)
(declare-fun LinearExtern.__default.seq_free (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.seq_free#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.seq_free#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.seq_unleash (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.seq_unleash#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.seq_unleash#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseqs__raw (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.lseqs__raw#canCall| (T@U T@U) Bool)
(declare-fun |#$lseq| (T@U) T@U)
(declare-fun |LinearExtern.__default.lseqs__raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq__has (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.lseq__has#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.lseq__has#requires| (T@U T@U) Bool)
(declare-fun |lambda#164| (T@U) T@U)
(declare-fun |lambda#160| (T@U T@U) T@U)
(declare-fun |lambda#161| (T@U Int Int) T@U)
(declare-fun |lambda#163| (T@U) T@U)
(declare-fun |lambda#162| (Bool) T@U)
(declare-fun LinearExtern.__default.imagine__lseq__raw (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.imagine__lseq__raw#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.imagine__lseq__raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq_length_raw (T@U T@U) Int)
(declare-fun |LinearExtern.__default.lseq_length_raw#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.lseq_length_raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq_alloc_raw (T@U Int) T@U)
(declare-fun |LinearExtern.__default.lseq_alloc_raw#canCall| (T@U Int) Bool)
(declare-fun |LinearExtern.__default.lseq_alloc_raw#requires| (T@U Int) Bool)
(declare-fun LinearExtern.__default.lseq_free_raw (T@U T@U) T@U)
(declare-fun |LinearExtern.__default.lseq_free_raw#canCall| (T@U T@U) Bool)
(declare-fun |LinearExtern.__default.lseq_free_raw#requires| (T@U T@U) Bool)
(declare-fun LinearExtern.__default.lseq_swap_raw_fun (T@U T@U Int T@U) T@U)
(declare-fun |LinearExtern.__default.lseq_swap_raw_fun#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |LinearExtern.__default.lseq_swap_raw_fun#requires| (T@U T@U Int T@U) Bool)
(declare-fun LinearExtern.__default.lseq_share_raw (T@U T@U Int) T@U)
(declare-fun |LinearExtern.__default.lseq_share_raw#canCall| (T@U T@U Int) Bool)
(declare-fun |LinearExtern.__default.lseq_share_raw#requires| (T@U T@U Int) Bool)
(declare-fun Tclass.Byte__Order.__default () T@U)
(declare-fun Byte__Order.__default.SomeElement () Int)
(declare-fun |Byte__Order.__default.SomeElement#requires| () Bool)
(declare-fun Byte__Order.__default.lte (T@U Int Int) Bool)
(declare-fun |Byte__Order.__default.lte#canCall| (Int Int) Bool)
(declare-fun Byte__Order.__default.ltedef (T@U Int Int) Bool)
(declare-fun StartFuel_Byte_Order._default.ltedef () T@U)
(declare-fun |Byte__Order.__default.lte#requires| (T@U Int Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.ltedef0 () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.ltedef () T@U)
(declare-fun MoreFuel_Byte_Order._default.ltedef1 () T@U)
(declare-fun |Byte__Order.__default.ltedef#canCall| (Int Int) Bool)
(declare-fun |Byte__Order.__default.ltedef#requires| (T@U Int Int) Bool)
(declare-fun Byte__Order.__default.LargestLte (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.LargestLte#canCall| (T@U Int) Bool)
(declare-fun Byte__Order.__default.IsSorted (T@U T@U) Bool)
(declare-fun StartFuel_Byte_Order._default.IsSorted () T@U)
(declare-fun StartFuel_Byte_Order._default.lte () T@U)
(declare-fun Byte__Order.__default.lt (Int Int) Bool)
(declare-fun |Byte__Order.__default.LargestLte#requires| (T@U T@U Int) Bool)
(declare-fun |Byte__Order.__default.lt#canCall| (Int Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted0 () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.IsSorted () T@U)
(declare-fun MoreFuel_Byte_Order._default.IsSorted1 () T@U)
(declare-fun Byte__Order.__default.LargestLt (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.LargestLt#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.LargestLt#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted2 () T@U)
(declare-fun MoreFuel_Byte_Order._default.IsSorted3 () T@U)
(declare-fun Byte__Order.__default.IndexOfFirstGte (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.IndexOfFirstGte#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.IndexOfFirstGte#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted4 () T@U)
(declare-fun MoreFuel_Byte_Order._default.IsSorted5 () T@U)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (T@U T@U Int Int Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (T@U Int Int Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| (T@U T@U Int Int Int) Bool)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGte (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| (T@U T@U Int) Bool)
(declare-fun Byte__Order.__default.IndexOfFirstGt (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.IndexOfFirstGt#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.IndexOfFirstGt#requires| (T@U T@U Int) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted6 () T@U)
(declare-fun MoreFuel_Byte_Order._default.IsSorted7 () T@U)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (T@U T@U Int Int Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (T@U Int Int Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| (T@U T@U Int Int Int) Bool)
(declare-fun Byte__Order.__default.binarySearchIndexOfFirstKeyGt (T@U T@U Int) Int)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| (T@U T@U Int) Bool)
(declare-fun Byte__Order.__default.SetAllLte (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLte#canCall| (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLte#requires| (T@U T@U) Bool)
(declare-fun Byte__Order.__default.SetAllLt (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLt#canCall| (T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SetAllLt#requires| (T@U T@U) Bool)
(declare-fun Byte__Order.__default.NotMinimum (T@U Int) Bool)
(declare-fun |Byte__Order.__default.NotMinimum#canCall| (Int) Bool)
(declare-fun |Byte__Order.__default.NotMinimum#requires| (T@U Int) Bool)
(declare-fun Byte__Order.__default.MapPivotedUnion (T@U T@U Int T@U) T@U)
(declare-fun |Byte__Order.__default.MapPivotedUnion#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |Byte__Order.__default.MapPivotedUnion#requires| (T@U T@U Int T@U) Bool)
(declare-fun |lambda#170| (T@U Int) T@U)
(declare-fun |lambda#172| (T@U T@U Int) T@U)
(declare-fun Byte__Order.__default.SetSuccessor (T@U Int) T@U)
(declare-fun |Byte__Order.__default.SetSuccessor#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.SetSuccessor#requires| (T@U Int) Bool)
(declare-fun |$let#8_next| (T@U Int) Int)
(declare-fun |$let#8$canCall| (T@U Int) Bool)
(declare-fun Byte__Order.__default.MapSuccessor (T@U T@U Int) T@U)
(declare-fun |Byte__Order.__default.MapSuccessor#canCall| (T@U T@U Int) Bool)
(declare-fun |Byte__Order.__default.MapSuccessor#requires| (T@U T@U Int) Bool)
(declare-fun Byte__Order.__default.SeqSuccessor (T@U Int) T@U)
(declare-fun |Byte__Order.__default.SeqSuccessor#canCall| (T@U Int) Bool)
(declare-fun |Byte__Order.__default.SeqSuccessor#requires| (T@U Int) Bool)
(declare-fun Byte__Order.__default.SortedSeqForMap (T@U T@U T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SortedSeqForMap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Byte__Order.__default.SortedSeqForMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Sequences._default.Unzip () T@U)
(declare-fun |Byte__Order.__default.IsStrictlySorted#canCall| (T@U) Bool)
(declare-fun Byte__Order.__default.IsStrictlySorted (T@U T@U) Bool)
(declare-fun StartFuel_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun Byte__Order.__default.minimum (T@U T@U) Int)
(declare-fun |Byte__Order.__default.minimum#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.minimum#requires| (T@U T@U) Bool)
(declare-fun |$let#11_a| (T@U) Int)
(declare-fun |$let#11$canCall| (T@U) Bool)
(declare-fun Byte__Order.__default.minimumOpt (T@U T@U) T@U)
(declare-fun |Byte__Order.__default.minimumOpt#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.minimumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Byte_Order._default.minimum () T@U)
(declare-fun Byte__Order.__default.maximum (T@U T@U) Int)
(declare-fun |Byte__Order.__default.maximum#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.maximum#requires| (T@U T@U) Bool)
(declare-fun |$let#14_a| (T@U) Int)
(declare-fun |$let#14$canCall| (T@U) Bool)
(declare-fun Byte__Order.__default.maximumOpt (T@U T@U) T@U)
(declare-fun |Byte__Order.__default.maximumOpt#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.maximumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Byte_Order._default.maximum () T@U)
(declare-fun |Byte__Order.__default.lt#requires| (Int Int) Bool)
(declare-fun Byte__Order.__default.Min (Int Int) Int)
(declare-fun |Byte__Order.__default.Min#canCall| (Int Int) Bool)
(declare-fun |Byte__Order.__default.Min#requires| (Int Int) Bool)
(declare-fun Byte__Order.__default.Max (Int Int) Int)
(declare-fun |Byte__Order.__default.Max#canCall| (Int Int) Bool)
(declare-fun |Byte__Order.__default.Max#requires| (Int Int) Bool)
(declare-fun |Byte__Order.__default.IsSorted#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.IsSorted#requires| (T@U T@U) Bool)
(declare-fun Byte__Order.__default.IsStrictlySortedInternal (T@U) Bool)
(declare-fun |Byte__Order.__default.IsStrictlySortedInternal#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.IsStrictlySortedInternal#requires| (T@U) Bool)
(declare-fun |Byte__Order.__default.IsStrictlySorted#requires| (T@U T@U) Bool)
(declare-fun Byte__Order.__default.BiggestInSet (Int T@U) Bool)
(declare-fun |Byte__Order.__default.BiggestInSet#canCall| (Int T@U) Bool)
(declare-fun |Byte__Order.__default.BiggestInSet#requires| (Int T@U) Bool)
(declare-fun Byte__Order.__default.SortSet (T@U T@U) T@U)
(declare-fun |Byte__Order.__default.SortSet#canCall| (T@U) Bool)
(declare-fun |Byte__Order.__default.SortSet#requires| (T@U T@U) Bool)
(declare-fun |$let#17_e| (T@U) Int)
(declare-fun |$let#17$canCall| (T@U) Bool)
(declare-fun MoreFuel_Byte_Order._default.IsSorted8 () T@U)
(declare-fun MoreFuel_Byte_Order._default.IsSorted9 () T@U)
(declare-fun Tclass.Lexicographic__Byte__Order.__default () T@U)
(declare-fun Lexicographic__Byte__Order.__default.SomeElement () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.SomeElement#requires| () Bool)
(declare-fun Lexicographic__Byte__Order.__default.lte (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.lte#canCall| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.ltedef (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.lte#requires| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.ltedef#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.ltedef#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.LargestLte (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLte#canCall| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IsSorted (T@U T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.IsSorted () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLte#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted0 () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted1 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.LargestLt (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.LargestLt#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted2 () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted3 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.IndexOfFirstGte (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted4 () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted5 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (T@U T@U T@U Int Int) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (T@U T@U Int Int) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| (T@U T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IndexOfFirstGt (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted6 () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted7 () T@U)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (T@U T@U T@U Int Int) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (T@U T@U Int Int) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt (T@U T@U T@U) Int)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| (T@U T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SetAllLte (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLte#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLte#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SetAllLt (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLt#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetAllLt#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.NotMinimum (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.NotMinimum#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.NotMinimum#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.MapPivotedUnion (T@U T@U T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#186| (T@U T@U) T@U)
(declare-fun |lambda#188| (T@U T@U) T@U)
(declare-fun Lexicographic__Byte__Order.__default.SetSuccessor (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SetSuccessor#requires| (T@U T@U) Bool)
(declare-fun |$let#20_next| (T@U T@U) T@U)
(declare-fun |$let#20$canCall| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.MapSuccessor (T@U T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.MapSuccessor#canCall| (T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.MapSuccessor#requires| (T@U T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SeqSuccessor (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SeqSuccessor#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SortedSeqForMap (T@U T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IsStrictlySorted (T@U T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun Lexicographic__Byte__Order.__default.minimum (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.minimum#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.minimum#requires| (T@U T@U) Bool)
(declare-fun |$let#23_a| (T@U) T@U)
(declare-fun |$let#23$canCall| (T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.minimumOpt (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.minimumOpt#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.minimumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.minimum () T@U)
(declare-fun Lexicographic__Byte__Order.__default.maximum (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.maximum#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.maximum#requires| (T@U T@U) Bool)
(declare-fun |$let#26_a| (T@U) T@U)
(declare-fun |$let#26$canCall| (T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.maximumOpt (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.maximumOpt#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.maximumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.maximum () T@U)
(declare-fun |Lexicographic__Byte__Order.__default.lt#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.Min (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.Min#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.Min#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.Max (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.Max#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.Max#requires| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsSorted#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsSorted#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.BiggestInSet (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.BiggestInSet#canCall| (T@U T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.BiggestInSet#requires| (T@U T@U) Bool)
(declare-fun Lexicographic__Byte__Order.__default.SortSet (T@U T@U) T@U)
(declare-fun |Lexicographic__Byte__Order.__default.SortSet#canCall| (T@U) Bool)
(declare-fun |Lexicographic__Byte__Order.__default.SortSet#requires| (T@U T@U) Bool)
(declare-fun |$let#29_e| (T@U) T@U)
(declare-fun |$let#29$canCall| (T@U) Bool)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted8 () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsSorted9 () T@U)
(declare-fun Tclass.Upperbounded__Lexicographic__Byte__Order.__default () T@U)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.SomeElement () T@U)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.SomeElement#requires| () Bool)
(declare-fun |#Upperbounded_Lexicographic_Byte_Order.Element.Max_Element| () T@U)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.ToElements (T@U) T@U)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.ToElements#canCall| (T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.ToElements#requires| (T@U) Bool)
(declare-fun |lambda#202| (T@U) T@U)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.lte (T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| (T@U T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.ltedef (T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.Element#Equal| (T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.lte#requires| (T@U T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q (T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.Element.Element_q (T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.Element.e (T@U) T@U)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.ltedef#canCall| (T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.ltedef#requires| (T@U T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.LargestLte (T@U T@U T@U) Int)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.LargestLte#canCall| (T@U T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.IsSorted (T@U T@U) Bool)
(declare-fun StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted () T@U)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.lt (T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.LargestLte#requires| (T@U T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| (T@U T@U) Bool)
(declare-fun MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted0 () T@U)
(declare-fun StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsSorted () T@U)
(declare-fun MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted1 () T@U)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.LargestLt (T@U T@U T@U) Int)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.LargestLt#canCall| (T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.LargestLt#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted2 () T@U)
(declare-fun MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted3 () T@U)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte (T@U T@U T@U) Int)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted4 () T@U)
(declare-fun MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted5 () T@U)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (T@U T@U T@U Int Int) Int)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (T@U T@U Int Int) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| (T@U T@U T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt (T@U T@U T@U) Int)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| (T@U T@U T@U) Bool)
(declare-fun MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted6 () T@U)
(declare-fun MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted7 () T@U)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (T@U T@U T@U Int Int) Int)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (T@U T@U Int Int) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| (T@U T@U T@U Int Int) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt (T@U T@U T@U) Int)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| (T@U T@U T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.SetAllLte (T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.SetAllLte#canCall| (T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.SetAllLte#requires| (T@U T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.SetAllLt (T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.SetAllLt#canCall| (T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.SetAllLt#requires| (T@U T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.NotMinimum (T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.NotMinimum#canCall| (T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.NotMinimum#requires| (T@U T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.MapPivotedUnion (T@U T@U T@U T@U) T@U)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#212| (T@U T@U) T@U)
(declare-fun |lambda#214| (T@U T@U) T@U)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor (T@U T@U) T@U)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor#requires| (T@U T@U) Bool)
(declare-fun |$let#32_next| (T@U T@U) T@U)
(declare-fun |$let#32$canCall| (T@U T@U) Bool)
(declare-fun |$IsA#Upperbounded__Lexicographic__Byte__Order.Element| (T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.MapSuccessor (T@U T@U T@U) T@U)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.MapSuccessor#canCall| (T@U T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.MapSuccessor#requires| (T@U T@U T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.SeqSuccessor (T@U T@U) T@U)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| (T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.SeqSuccessor#requires| (T@U T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.SortedSeqForMap (T@U T@U T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| (T@U T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted (T@U T@U) Bool)
(declare-fun StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.minimum (T@U T@U) T@U)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.minimum#canCall| (T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.minimum#requires| (T@U T@U) Bool)
(declare-fun |$let#35_a| (T@U) T@U)
(declare-fun |$let#35$canCall| (T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt (T@U T@U) T@U)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt#canCall| (T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Upperbounded_Lexicographic_Byte_Order._default.minimum () T@U)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.maximum (T@U T@U) T@U)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.maximum#canCall| (T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.maximum#requires| (T@U T@U) Bool)
(declare-fun |$let#38_a| (T@U) T@U)
(declare-fun |$let#38$canCall| (T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt (T@U T@U) T@U)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt#canCall| (T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Upperbounded_Lexicographic_Byte_Order._default.maximum () T@U)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.lt#requires| (T@U T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.Min (T@U T@U) T@U)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.Min#canCall| (T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.Min#requires| (T@U T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.Max (T@U T@U) T@U)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.Max#canCall| (T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.Max#requires| (T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.IsSorted#canCall| (T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.IsSorted#requires| (T@U T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| (T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| (T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| (T@U T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.BiggestInSet (T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.BiggestInSet#canCall| (T@U T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.BiggestInSet#requires| (T@U T@U) Bool)
(declare-fun Upperbounded__Lexicographic__Byte__Order.__default.SortSet (T@U T@U) T@U)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.SortSet#canCall| (T@U) Bool)
(declare-fun |Upperbounded__Lexicographic__Byte__Order.__default.SortSet#requires| (T@U T@U) Bool)
(declare-fun |$let#41_e| (T@U) T@U)
(declare-fun |$let#41$canCall| (T@U) Bool)
(declare-fun MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted8 () T@U)
(declare-fun MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted9 () T@U)
(declare-fun |#Upperbounded_Lexicographic_Byte_Order.Element.Element| (T@U) T@U)
(declare-fun Tclass.Upperbounded__Lexicographic__Byte__Order__Impl.__default () T@U)
(declare-fun Tclass.BoundedPivotsLib.__default () T@U)
(declare-fun BoundedPivotsLib.__default.ElementIsKey (T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.ElementIsKey#canCall| (T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.ElementIsKey#requires| (T@U) Bool)
(declare-fun |KeyType.__default.MaxLen#canCall| () Bool)
(declare-fun BoundedPivotsLib.__default.ElementsAreKeys (T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.ElementsAreKeys#canCall| (T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.ElementsAreKeys#requires| (T@U) Bool)
(declare-fun BoundedPivotsLib.__default.KeyToElement (T@U) T@U)
(declare-fun |BoundedPivotsLib.__default.KeyToElement#canCall| (T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.KeyToElement#requires| (T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.KeysToElements#requires| (T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.WFPivots#canCall| (T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.WFPivots#requires| (T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.NumBuckets#canCall| (T@U) Bool)
(declare-fun BoundedPivotsLib.__default.ContainsAllKeys (T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.ContainsAllKeys#canCall| (T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.ContainsAllKeys#requires| (T@U) Bool)
(declare-fun BoundedPivotsLib.__default.BoundedKey (T@U T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.BoundedKey#canCall| (T@U T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.BoundedKey#requires| (T@U T@U) Bool)
(declare-fun BoundedPivotsLib.__default.ValidLeftCutOffKey (T@U T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.ValidLeftCutOffKey#canCall| (T@U T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.ValidLeftCutOffKey#requires| (T@U T@U) Bool)
(declare-fun BoundedPivotsLib.__default.BoundedKeySeq (T@U T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.BoundedKeySeq#canCall| (T@U T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.BoundedKeySeq#requires| (T@U T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.NumBuckets#requires| (T@U) Bool)
(declare-fun BoundedPivotsLib.__default.PivotSize (T@U) Int)
(declare-fun |BoundedPivotsLib.__default.PivotSize#canCall| (T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.PivotSize#requires| (T@U) Bool)
(declare-fun BoundedPivotsLib.__default.Route (T@U T@U) Int)
(declare-fun |BoundedPivotsLib.__default.Route#canCall| (T@U T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.Route#requires| (T@U T@U) Bool)
(declare-fun BoundedPivotsLib.__default.InitPivotTable () T@U)
(declare-fun |BoundedPivotsLib.__default.InitPivotTable#requires| () Bool)
(declare-fun BoundedPivotsLib.__default.GetKey (T@U Int) T@U)
(declare-fun |BoundedPivotsLib.__default.GetKey#canCall| (T@U Int) Bool)
(declare-fun |BoundedPivotsLib.__default.GetKey#requires| (T@U Int) Bool)
(declare-fun BoundedPivotsLib.__default.PivotInsertable (T@U Int T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.PivotInsertable#canCall| (T@U Int T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.PivotInsertable#requires| (T@U Int T@U) Bool)
(declare-fun BoundedPivotsLib.__default.InsertPivot (T@U Int T@U) T@U)
(declare-fun |BoundedPivotsLib.__default.InsertPivot#canCall| (T@U Int T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.InsertPivot#requires| (T@U Int T@U) Bool)
(declare-fun StartFuel_Sequences._default.insert () T@U)
(declare-fun BoundedPivotsLib.__default.CutoffForLeft (T@U T@U T@U) Int)
(declare-fun |BoundedPivotsLib.__default.CutoffForLeft#canCall| (T@U T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.CutoffForLeft#requires| (T@U T@U T@U) Bool)
(declare-fun BoundedPivotsLib.__default.SplitLeft (T@U T@U) T@U)
(declare-fun |BoundedPivotsLib.__default.SplitLeft#canCall| (T@U T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.SplitLeft#requires| (T@U T@U) Bool)
(declare-fun StartFuel_BoundedPivotsLib._default.CutoffForLeft () T@U)
(declare-fun BoundedPivotsLib.__default.CutoffForRight (T@U T@U T@U) Int)
(declare-fun |BoundedPivotsLib.__default.CutoffForRight#canCall| (T@U T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.CutoffForRight#requires| (T@U T@U T@U) Bool)
(declare-fun BoundedPivotsLib.__default.SplitRight (T@U T@U) T@U)
(declare-fun |BoundedPivotsLib.__default.SplitRight#canCall| (T@U T@U) Bool)
(declare-fun |BoundedPivotsLib.__default.SplitRight#requires| (T@U T@U) Bool)
(declare-fun StartFuel_BoundedPivotsLib._default.CutoffForRight () T@U)
(declare-fun BoundedPivotsLib.__default.PivotTableBucketKeySet (T@U Int) T@U)
(declare-fun |BoundedPivotsLib.__default.PivotTableBucketKeySet#canCall| (T@U Int) Bool)
(declare-fun |BoundedPivotsLib.__default.PivotTableBucketKeySet#requires| (T@U Int) Bool)
(declare-fun |lambda#238| (T@U T@U T@U Int) T@U)
(declare-fun Tclass.ValueType.Value () T@U)
(declare-fun Tclass.ValueType.__default () T@U)
(declare-fun ValueType.__default.MaxLen () Int)
(declare-fun |ValueType.__default.MaxLen#requires| () Bool)
(declare-fun ValueType.__default.DefaultValue () T@U)
(declare-fun |ValueType.__default.DefaultValue#requires| () Bool)
(declare-fun ValueType.__default.Len (T@U) Int)
(declare-fun |ValueType.__default.Len#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.Len#requires| (T@U) Bool)
(declare-fun ValueType.__default.ValidMessageBytestring (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestring#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestring#requires| (T@U) Bool)
(declare-fun |ValueType.__default.MaxLen#canCall| () Bool)
(declare-fun ValueType.__default.ValidMessageBytestrings (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestrings#canCall| (T@U) Bool)
(declare-fun |ValueType.__default.ValidMessageBytestrings#requires| (T@U) Bool)
(declare-fun |#ValueMessage.Delta.NoDelta| () T@U)
(declare-fun ValueMessage.Delta.NoDelta_q (T@U) Bool)
(declare-fun Tclass.ValueMessage.Delta () T@U)
(declare-fun |$IsA#ValueMessage.Delta| (T@U) Bool)
(declare-fun |ValueMessage.Delta#Equal| (T@U T@U) Bool)
(declare-fun Tclass.ValueMessage.__default () T@U)
(declare-fun ValueMessage.__default.NopDelta () T@U)
(declare-fun |ValueMessage.__default.NopDelta#requires| () Bool)
(declare-fun ValueMessage.__default.DefaultValue () T@U)
(declare-fun |ValueMessage.__default.DefaultValue#requires| () Bool)
(declare-fun |ValueType.__default.DefaultValue#canCall| () Bool)
(declare-fun ValueMessage.__default.CombineDeltas (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.CombineDeltas#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.CombineDeltas#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.ApplyDelta (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.ApplyDelta#canCall| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.ApplyDelta#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.bytestring__to__Message (T@U) T@U)
(declare-fun |ValueMessage.__default.bytestring__to__Message#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.bytestring__to__Message#requires| (T@U) Bool)
(declare-fun |#ValueMessage.Message.Define| (T@U) T@U)
(declare-fun ValueMessage.__default.EncodableMessage (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessage#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessage#requires| (T@U) Bool)
(declare-fun ValueMessage.Message.Define_q (T@U) Bool)
(declare-fun ValueMessage.__default.EncodableMessageSeq (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessageSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.EncodableMessageSeq#requires| (T@U) Bool)
(declare-fun ValueMessage.__default.Message__to__bytestring (T@U) T@U)
(declare-fun |ValueMessage.__default.Message__to__bytestring#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.Message__to__bytestring#requires| (T@U) Bool)
(declare-fun ValueMessage.Message.value (T@U) T@U)
(declare-fun ValueMessage.__default.messageSeq__to__bytestringSeq (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.messageSeq__to__bytestringSeq#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.__default.bytestringSeq__to__MessageSeq (T@U T@U) T@U)
(declare-fun |ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| (T@U) Bool)
(declare-fun |ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.Merge#requires| (T@U T@U) Bool)
(declare-fun ValueMessage.Message.delta (T@U) T@U)
(declare-fun |#ValueMessage.Message.Update| (T@U) T@U)
(declare-fun |ValueMessage.__default.IdentityMessage#requires| () Bool)
(declare-fun |ValueMessage.__default.NopDelta#canCall| () Bool)
(declare-fun ValueMessage.__default.DefineDefault () T@U)
(declare-fun |ValueMessage.__default.DefineDefault#requires| () Bool)
(declare-fun |ValueMessage.__default.DefaultValue#canCall| () Bool)
(declare-fun ValueMessage.Message.Update_q (T@U) Bool)
(declare-fun |#UI.RangeStart.SInclusive| (T@U) T@U)
(declare-fun UI.RangeStart.SInclusive_q (T@U) Bool)
(declare-fun Tclass.UI.RangeStart () T@U)
(declare-fun UI.RangeStart.key (T@U) T@U)
(declare-fun |#UI.RangeStart.SExclusive| (T@U) T@U)
(declare-fun UI.RangeStart.SExclusive_q (T@U) Bool)
(declare-fun |#UI.RangeStart.NegativeInf| () T@U)
(declare-fun UI.RangeStart.NegativeInf_q (T@U) Bool)
(declare-fun |$IsA#UI.RangeStart| (T@U) Bool)
(declare-fun |UI.RangeStart#Equal| (T@U T@U) Bool)
(declare-fun |#UI.RangeEnd.EInclusive| (T@U) T@U)
(declare-fun UI.RangeEnd.EInclusive_q (T@U) Bool)
(declare-fun Tclass.UI.RangeEnd () T@U)
(declare-fun UI.RangeEnd.key (T@U) T@U)
(declare-fun |#UI.RangeEnd.EExclusive| (T@U) T@U)
(declare-fun UI.RangeEnd.EExclusive_q (T@U) Bool)
(declare-fun |#UI.RangeEnd.PositiveInf| () T@U)
(declare-fun UI.RangeEnd.PositiveInf_q (T@U) Bool)
(declare-fun |$IsA#UI.RangeEnd| (T@U) Bool)
(declare-fun |UI.RangeEnd#Equal| (T@U T@U) Bool)
(declare-fun |#UI.SuccResult.SuccResult| (T@U T@U) T@U)
(declare-fun UI.SuccResult.SuccResult_q (T@U) Bool)
(declare-fun Tclass.UI.SuccResult () T@U)
(declare-fun UI.SuccResult.key (T@U) T@U)
(declare-fun UI.SuccResult.value (T@U) T@U)
(declare-fun |$IsA#UI.SuccResult| (T@U) Bool)
(declare-fun |UI.SuccResult#Equal| (T@U T@U) Bool)
(declare-fun |#UI.SuccResultList.SuccResultList| (T@U T@U) T@U)
(declare-fun UI.SuccResultList.SuccResultList_q (T@U) Bool)
(declare-fun Tclass.UI.SuccResultList () T@U)
(declare-fun UI.SuccResultList.results (T@U) T@U)
(declare-fun UI.SuccResultList.end (T@U) T@U)
(declare-fun |$IsA#UI.SuccResultList| (T@U) Bool)
(declare-fun |UI.SuccResultList#Equal| (T@U T@U) Bool)
(declare-fun |#UI.Op.NoOp| () T@U)
(declare-fun UI.Op.NoOp_q (T@U) Bool)
(declare-fun Tclass.UI.Op () T@U)
(declare-fun |#UI.Op.SyncOp| () T@U)
(declare-fun UI.Op.SyncOp_q (T@U) Bool)
(declare-fun |#UI.Op.CrashOp| () T@U)
(declare-fun UI.Op.CrashOp_q (T@U) Bool)
(declare-fun |#UI.Op.PushSyncOp| (Int) T@U)
(declare-fun UI.Op.PushSyncOp_q (T@U) Bool)
(declare-fun UI.Op.id (T@U) Int)
(declare-fun |#UI.Op.PopSyncOp| (Int) T@U)
(declare-fun UI.Op.PopSyncOp_q (T@U) Bool)
(declare-fun |#UI.Op.GetOp| (T@U T@U) T@U)
(declare-fun UI.Op.GetOp_q (T@U) Bool)
(declare-fun UI.Op.key (T@U) T@U)
(declare-fun UI.Op.value (T@U) T@U)
(declare-fun |#UI.Op.GetBeginOp| (T@U Int) T@U)
(declare-fun UI.Op.GetBeginOp_q (T@U) Bool)
(declare-fun |#UI.Op.GetEndOp| (T@U Int) T@U)
(declare-fun UI.Op.GetEndOp_q (T@U) Bool)
(declare-fun |#UI.Op.PutOp| (T@U T@U) T@U)
(declare-fun UI.Op.PutOp_q (T@U) Bool)
(declare-fun |#UI.Op.SuccOp| (T@U T@U T@U) T@U)
(declare-fun UI.Op.SuccOp_q (T@U) Bool)
(declare-fun UI.Op.start (T@U) T@U)
(declare-fun UI.Op.results (T@U) T@U)
(declare-fun UI.Op.end (T@U) T@U)
(declare-fun |$IsA#UI.Op| (T@U) Bool)
(declare-fun |UI.Op#Equal| (T@U T@U) Bool)
(declare-fun Tclass.UI.__default () T@U)
(declare-fun |#MapSpec.Variables.Variables| (T@U) T@U)
(declare-fun MapSpec.Variables.Variables_q (T@U) Bool)
(declare-fun Tclass.MapSpec.Variables () T@U)
(declare-fun MapSpec.Variables.view (T@U) T@U)
(declare-fun |$IsA#MapSpec.Variables| (T@U) Bool)
(declare-fun |MapSpec.Variables#Equal| (T@U T@U) Bool)
(declare-fun |#MapSpec.Step.QueryStep| (T@U T@U) T@U)
(declare-fun MapSpec.Step.QueryStep_q (T@U) Bool)
(declare-fun Tclass.MapSpec.Step () T@U)
(declare-fun MapSpec.Step.key (T@U) T@U)
(declare-fun MapSpec.Step.result (T@U) T@U)
(declare-fun |#MapSpec.Step.WriteStep| (T@U T@U) T@U)
(declare-fun MapSpec.Step.WriteStep_q (T@U) Bool)
(declare-fun MapSpec.Step.new__value (T@U) T@U)
(declare-fun |#MapSpec.Step.SuccStep| (T@U T@U T@U) T@U)
(declare-fun MapSpec.Step.SuccStep_q (T@U) Bool)
(declare-fun MapSpec.Step.start (T@U) T@U)
(declare-fun MapSpec.Step.results (T@U) T@U)
(declare-fun MapSpec.Step.end (T@U) T@U)
(declare-fun |#MapSpec.Step.StutterStep| () T@U)
(declare-fun MapSpec.Step.StutterStep_q (T@U) Bool)
(declare-fun |$IsA#MapSpec.Step| (T@U) Bool)
(declare-fun |MapSpec.Step#Equal| (T@U T@U) Bool)
(declare-fun Tclass.MapSpec.__default () T@U)
(declare-fun MapSpec.__default.EmptyValue () T@U)
(declare-fun |MapSpec.__default.EmptyValue#requires| () Bool)
(declare-fun MapSpec.__default.ViewComplete (T@U) Bool)
(declare-fun |MapSpec.__default.ViewComplete#canCall| (T@U) Bool)
(declare-fun |MapSpec.__default.ViewComplete#requires| (T@U) Bool)
(declare-fun MapSpec.__default.WF (T@U) Bool)
(declare-fun |MapSpec.__default.WF#canCall| (T@U) Bool)
(declare-fun |MapSpec.__default.WF#requires| (T@U) Bool)
(declare-fun MapSpec.__default.InDomain (T@U) Bool)
(declare-fun |MapSpec.__default.InDomain#canCall| (T@U) Bool)
(declare-fun |MapSpec.__default.InDomain#requires| (T@U) Bool)
(declare-fun MapSpec.__default.EmptyMap () T@U)
(declare-fun |MapSpec.__default.EmptyMap#requires| () Bool)
(declare-fun |MapSpec.__default.EmptyValue#canCall| () Bool)
(declare-fun |lambda#240| (T@U) T@U)
(declare-fun |lambda#241| (T@U) T@U)
(declare-fun MapSpec.__default.Init (T@U) Bool)
(declare-fun |MapSpec.__default.Init#canCall| (T@U) Bool)
(declare-fun |MapSpec.__default.Init#requires| (T@U) Bool)
(declare-fun |MapSpec.__default.EmptyMap#canCall| () Bool)
(declare-fun MapSpec.__default.Query (T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Query#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Query#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.LowerBound (T@U T@U) Bool)
(declare-fun |MapSpec.__default.LowerBound#canCall| (T@U T@U) Bool)
(declare-fun |MapSpec.__default.LowerBound#requires| (T@U T@U) Bool)
(declare-fun MapSpec.__default.UpperBound (T@U T@U) Bool)
(declare-fun |MapSpec.__default.UpperBound#canCall| (T@U T@U) Bool)
(declare-fun |MapSpec.__default.UpperBound#requires| (T@U T@U) Bool)
(declare-fun MapSpec.__default.InRange (T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.InRange#canCall| (T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.InRange#requires| (T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.NonEmptyRange (T@U T@U) Bool)
(declare-fun |MapSpec.__default.NonEmptyRange#canCall| (T@U T@U) Bool)
(declare-fun |MapSpec.__default.NonEmptyRange#requires| (T@U T@U) Bool)
(declare-fun MapSpec.__default.Succ (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Succ#canCall| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Succ#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.Write (T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Write#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Write#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.Stutter (T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Stutter#canCall| (T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Stutter#requires| (T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.NextStep (T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.NextStep#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.NextStep#requires| (T@U T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.Next (T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Next#canCall| (T@U T@U T@U) Bool)
(declare-fun |MapSpec.__default.Next#requires| (T@U T@U T@U) Bool)
(declare-fun MapSpec.__default.Inv (T@U) Bool)
(declare-fun |MapSpec.__default.Inv#canCall| (T@U) Bool)
(declare-fun |MapSpec.__default.Inv#requires| (T@U) Bool)
(declare-fun Tclass.BucketMaps.__default () T@U)
(declare-fun BucketMaps.__default.BucketGet (T@U T@U) T@U)
(declare-fun |BucketMaps.__default.BucketGet#canCall| (T@U T@U) Bool)
(declare-fun |BucketMaps.__default.BucketGet#requires| (T@U T@U) Bool)
(declare-fun BucketMaps.__default.BucketListItemFlush (T@U T@U T@U Int) T@U)
(declare-fun |BucketMaps.__default.BucketListItemFlush#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |BucketMaps.__default.BucketListItemFlush#requires| (T@U T@U T@U Int) Bool)
(declare-fun |lambda#244| (T@U T@U T@U T@U Int T@U T@U T@U) T@U)
(declare-fun |lambda#245| (T@U T@U) T@U)
(declare-fun BucketMaps.__default.BucketListFlushPartial (T@U T@U T@U T@U Int) T@U)
(declare-fun |BucketMaps.__default.BucketListFlushPartial#canCall| (T@U T@U T@U Int) Bool)
(declare-fun |BucketMaps.__default.BucketListFlushPartial#requires| (T@U T@U T@U T@U Int) Bool)
(declare-fun BucketMaps.__default.BucketListFlush (T@U T@U T@U) T@U)
(declare-fun |BucketMaps.__default.BucketListFlush#canCall| (T@U T@U T@U) Bool)
(declare-fun |BucketMaps.__default.BucketListFlush#requires| (T@U T@U T@U) Bool)
(declare-fun BucketMaps.__default.BucketIntersect (T@U T@U T@U) T@U)
(declare-fun |BucketMaps.__default.BucketIntersect#canCall| (T@U T@U) Bool)
(declare-fun |BucketMaps.__default.BucketIntersect#requires| (T@U T@U T@U) Bool)
(declare-fun BucketMaps.__default.BucketComplement (T@U T@U T@U) T@U)
(declare-fun |BucketMaps.__default.BucketComplement#canCall| (T@U T@U) Bool)
(declare-fun |BucketMaps.__default.BucketComplement#requires| (T@U T@U T@U) Bool)
(declare-fun BucketMaps.__default.ClampRange (T@U T@U T@U T@U) T@U)
(declare-fun |BucketMaps.__default.ClampRange#canCall| (T@U T@U T@U) Bool)
(declare-fun |BucketMaps.__default.ClampRange#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#256| (T@U T@U T@U T@U) T@U)
(declare-fun BucketMaps.__default.ClampStart (T@U T@U T@U) T@U)
(declare-fun |BucketMaps.__default.ClampStart#canCall| (T@U T@U) Bool)
(declare-fun |BucketMaps.__default.ClampStart#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#260| (T@U T@U T@U) T@U)
(declare-fun BucketMaps.__default.ClampEnd (T@U T@U T@U) T@U)
(declare-fun |BucketMaps.__default.ClampEnd#canCall| (T@U T@U) Bool)
(declare-fun |BucketMaps.__default.ClampEnd#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#264| (T@U T@U T@U) T@U)
(declare-fun BucketMaps.__default.Compose (T@U T@U T@U) T@U)
(declare-fun |BucketMaps.__default.Compose#canCall| (T@U T@U) Bool)
(declare-fun |BucketMaps.__default.Compose#requires| (T@U T@U T@U) Bool)
(declare-fun BucketMaps.__default.ComposeSeq (T@U T@U) T@U)
(declare-fun |BucketMaps.__default.ComposeSeq#canCall| (T@U) Bool)
(declare-fun |BucketMaps.__default.ComposeSeq#requires| (T@U T@U) Bool)
(declare-fun StartFuel_BucketMaps._default.Compose () T@U)
(declare-fun BucketMaps.__default.KeyValueMapOfBucket (T@U T@U) T@U)
(declare-fun |BucketMaps.__default.KeyValueMapOfBucket#canCall| (T@U) Bool)
(declare-fun |BucketMaps.__default.KeyValueMapOfBucket#requires| (T@U T@U) Bool)
(declare-fun |ValueMessage.__default.DefineDefault#canCall| () Bool)
(declare-fun |lambda#272| (T@U T@U T@U T@U T@U) T@U)
(declare-fun |lambda#273| (T@U T@U) T@U)
(declare-fun BucketMaps.__default.SortedSeqOfKeyValueMap (T@U T@U) T@U)
(declare-fun |BucketMaps.__default.SortedSeqOfKeyValueMap#canCall| (T@U) Bool)
(declare-fun |BucketMaps.__default.SortedSeqOfKeyValueMap#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.maximumOpt () T@U)
(declare-fun Tclass.Multisets.__default () T@U)
(declare-fun Multisets.__default.Choose (T@U T@U T@U) T@U)
(declare-fun |Multisets.__default.Choose#canCall| (T@U T@U) Bool)
(declare-fun |Multisets.__default.Choose#requires| (T@U T@U T@U) Bool)
(declare-fun |$let#44_a| (T@U T@U) T@U)
(declare-fun |$let#44$canCall| (T@U T@U) Bool)
(declare-fun Multisets.__default.Apply (T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Multisets.__default.Apply#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.Apply#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun StartFuel_Multisets._default.Choose () T@U)
(declare-fun Multisets.__default.Foldable (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.Foldable#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.Foldable#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Multisets.__default.Fold (T@U T@U T@U T@U T@U T@U T@U) T@U)
(declare-fun |Multisets.__default.Fold#canCall| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.Fold#requires| (T@U T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Multisets.__default.FoldSimple (T@U T@U T@U T@U) T@U)
(declare-fun |Multisets.__default.FoldSimple#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.FoldSimple#requires| (T@U T@U T@U T@U) Bool)
(declare-fun |lambda#276| (T@U) T@U)
(declare-fun |lambda#277| (T@U) T@U)
(declare-fun StartFuel_Multisets._default.Fold () T@U)
(declare-fun Multisets.__default.IsIdentity (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsIdentity#canCall| (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsIdentity#requires| (T@U T@U T@U T@U T@U T@U) Bool)
(declare-fun Multisets.__default.IsCommutative (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsCommutative#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsCommutative#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Multisets.__default.IsAssociative (T@U T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsAssociative#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsAssociative#requires| (T@U T@U T@U T@U T@U) Bool)
(declare-fun Multisets.__default.IsIdentitySimple (T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsIdentitySimple#canCall| (T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.IsIdentitySimple#requires| (T@U T@U T@U) Bool)
(declare-fun StartFuel_Multisets._default.IsIdentity () T@U)
(declare-fun Multisets.__default.IsCommutativeSimple (T@U T@U) Bool)
(declare-fun |Multisets.__default.IsCommutativeSimple#canCall| (T@U T@U) Bool)
(declare-fun |Multisets.__default.IsCommutativeSimple#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Multisets._default.IsCommutative () T@U)
(declare-fun Multisets.__default.IsAssociativeSimple (T@U T@U) Bool)
(declare-fun |Multisets.__default.IsAssociativeSimple#canCall| (T@U T@U) Bool)
(declare-fun |Multisets.__default.IsAssociativeSimple#requires| (T@U T@U) Bool)
(declare-fun StartFuel_Multisets._default.IsAssociative () T@U)
(declare-fun Multisets.__default.AddNat (Int Int) Int)
(declare-fun |Multisets.__default.AddNat#canCall| (Int Int) Bool)
(declare-fun |Multisets.__default.AddNat#requires| (Int Int) Bool)
(declare-fun Multisets.__default.ValueMultisetFn (T@U T@U T@U) T@U)
(declare-fun |Multisets.__default.ValueMultisetFn#canCall| (T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.ValueMultisetFn#requires| (T@U T@U T@U) Bool)
(declare-fun |lambda#366| (T@U) T@U)
(declare-fun |lambda#367| (T@U T@U) T@U)
(declare-fun Multisets.__default.ValueMultiset (T@U T@U T@U) T@U)
(declare-fun |Multisets.__default.ValueMultiset#canCall| (T@U T@U T@U) Bool)
(declare-fun |Multisets.__default.ValueMultiset#requires| (T@U T@U T@U) Bool)
(declare-fun StartFuel_Multisets._default.Apply () T@U)
(declare-fun |#MapSeqs.SeqPair.SeqPair| (T@U T@U) T@U)
(declare-fun MapSeqs.SeqPair.SeqPair_q (T@U) Bool)
(declare-fun Tclass.MapSeqs.SeqPair () T@U)
(declare-fun MapSeqs.SeqPair.keys (T@U) T@U)
(declare-fun MapSeqs.SeqPair.msgs (T@U) T@U)
(declare-fun |$IsA#MapSeqs.SeqPair| (T@U) Bool)
(declare-fun |MapSeqs.SeqPair#Equal| (T@U T@U) Bool)
(declare-fun Tclass.MapSeqs.__default () T@U)
(declare-fun |MapSeqs.__default.map__of__seqs#requires| (T@U T@U T@U) Bool)
(declare-fun MapSeqs.__default.maximumKey (T@U) T@U)
(declare-fun |MapSeqs.__default.maximumKey#canCall| (T@U) Bool)
(declare-fun |MapSeqs.__default.maximumKey#requires| (T@U) Bool)
(declare-fun MapSeqs.__default.seqs__of__map (T@U T@U) T@U)
(declare-fun |MapSeqs.__default.seqs__of__map#canCall| (T@U) Bool)
(declare-fun |MapSeqs.__default.seqs__of__map#requires| (T@U T@U) Bool)
(declare-fun |$IsA#BucketsLib.Bucket| (T@U) Bool)
(declare-fun BucketsLib.Bucket.as__map (T@U) T@U)
(declare-fun |BucketsLib.Bucket.as__map#canCall| (T@U) Bool)
(declare-fun BucketsLib.__default.WFBucketMap (T@U) Bool)
(declare-fun |BucketsLib.Bucket.as__map#requires| (T@U) Bool)
(declare-fun Tclass.BucketsLib.__default () T@U)
(declare-fun |BucketsLib.__default.WFBucketMap#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucketMap#requires| (T@U) Bool)
(declare-fun BucketsLib.__default.WFMessageSeq (T@U) Bool)
(declare-fun |BucketsLib.__default.WFMessageSeq#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.WFMessageSeq#requires| (T@U) Bool)
(declare-fun BucketsLib.__default.PreWFBucket (T@U) Bool)
(declare-fun |BucketsLib.__default.PreWFBucket#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.PreWFBucket#requires| (T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucket#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucket#requires| (T@U) Bool)
(declare-fun BucketsLib.__default.BucketWellMarshalled (T@U) Bool)
(declare-fun |BucketsLib.__default.BucketWellMarshalled#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.BucketWellMarshalled#requires| (T@U) Bool)
(declare-fun BucketsLib.__default.BucketListWellMarshalled (T@U) Bool)
(declare-fun |BucketsLib.__default.BucketListWellMarshalled#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.BucketListWellMarshalled#requires| (T@U) Bool)
(declare-fun |BucketsLib.__default.EmptyBucket#requires| () Bool)
(declare-fun BucketsLib.__default.SingletonBucket (T@U T@U) T@U)
(declare-fun |BucketsLib.__default.SingletonBucket#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.SingletonBucket#requires| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.BucketDropLast (T@U) T@U)
(declare-fun |BucketsLib.__default.BucketDropLast#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.BucketDropLast#requires| (T@U) Bool)
(declare-fun BucketsLib.__default.WFBucketAt (T@U T@U Int) Bool)
(declare-fun |BucketsLib.__default.WFBucketAt#canCall| (T@U T@U Int) Bool)
(declare-fun |BucketsLib.__default.WFBucketAt#requires| (T@U T@U Int) Bool)
(declare-fun BucketsLib.__default.WFBucketList (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucketList#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucketList#requires| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.WFBucketListProper (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucketListProper#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.WFBucketListProper#requires| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.BoundedBucket (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BoundedBucket#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BoundedBucket#requires| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.BoundedBucketList (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BoundedBucketList#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BoundedBucketList#requires| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.B (T@U T@U) T@U)
(declare-fun |BucketsLib.__default.B#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.B#requires| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.BucketInsert (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.BucketInsert#canCall| (T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketInsert#requires| (T@U T@U T@U) Bool)
(declare-fun StartFuel_BucketsLib._default.B () T@U)
(declare-fun BucketsLib.__default.BucketListInsert (T@U T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.BucketListInsert#canCall| (T@U T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketListInsert#requires| (T@U T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.BucketListGet (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.BucketListGet#canCall| (T@U T@U T@U) Bool)
(declare-fun |BucketsLib.__default.BucketListGet#requires| (T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.SplitBucketLeft (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.SplitBucketLeft#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.SplitBucketLeft#requires| (T@U T@U T@U) Bool)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun BucketsLib.__default.SplitBucketRight (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.SplitBucketRight#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.SplitBucketRight#requires| (T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.SplitBucketListLeft (T@U T@U Int T@U) T@U)
(declare-fun |BucketsLib.__default.SplitBucketListLeft#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |BucketsLib.__default.SplitBucketListLeft#requires| (T@U T@U Int T@U) Bool)
(declare-fun StartFuel_BucketsLib._default.SplitBucketLeft () T@U)
(declare-fun BucketsLib.__default.SplitBucketListRight (T@U T@U Int T@U) T@U)
(declare-fun |BucketsLib.__default.SplitBucketListRight#canCall| (T@U T@U Int T@U) Bool)
(declare-fun |BucketsLib.__default.SplitBucketListRight#requires| (T@U T@U Int T@U) Bool)
(declare-fun StartFuel_BucketsLib._default.SplitBucketRight () T@U)
(declare-fun BucketsLib.__default.SplitBucketInList (T@U T@U Int T@U) T@U)
(declare-fun |BucketsLib.__default.SplitBucketInList#canCall| (T@U Int T@U) Bool)
(declare-fun |BucketsLib.__default.SplitBucketInList#requires| (T@U T@U Int T@U) Bool)
(declare-fun StartFuel_Sequences._default.replace1with2 () T@U)
(declare-fun BucketsLib.__default.MergeBuckets (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.MergeBuckets#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.MergeBuckets#requires| (T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.MergeBucketsInList (T@U T@U Int) T@U)
(declare-fun |BucketsLib.__default.MergeBucketsInList#canCall| (T@U Int) Bool)
(declare-fun |BucketsLib.__default.MergeBucketsInList#requires| (T@U T@U Int) Bool)
(declare-fun StartFuel_BucketsLib._default.MergeBuckets () T@U)
(declare-fun StartFuel_Sequences._default.replace2with1 () T@U)
(declare-fun BucketsLib.__default.binarySearch (T@U T@U T@U) T@U)
(declare-fun |BucketsLib.__default.binarySearch#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.binarySearch#requires| (T@U T@U T@U) Bool)
(declare-fun BucketsLib.__default.bucketBinarySearchLookup (T@U T@U) T@U)
(declare-fun |BucketsLib.__default.bucketBinarySearchLookup#canCall| (T@U T@U) Bool)
(declare-fun |BucketsLib.__default.bucketBinarySearchLookup#requires| (T@U T@U) Bool)
(declare-fun BucketsLib.__default.getMiddleKey (T@U) T@U)
(declare-fun |BucketsLib.__default.getMiddleKey#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.getMiddleKey#requires| (T@U) Bool)
(declare-fun BucketsLib.__default.MapsOfBucketList (T@U T@U) T@U)
(declare-fun |BucketsLib.__default.MapsOfBucketList#canCall| (T@U) Bool)
(declare-fun |BucketsLib.__default.MapsOfBucketList#requires| (T@U T@U) Bool)
(declare-fun |lambda#376| (T@U) T@U)
(declare-fun Tclass.Bounds.__default () T@U)
(declare-fun Bounds.__default.NodeBlockSizeUint64 () Int)
(declare-fun |Bounds.__default.NodeBlockSizeUint64#requires| () Bool)
(declare-fun Bounds.__default.MinNodeBlockIndexUint64 () Int)
(declare-fun |Bounds.__default.MinNodeBlockIndexUint64#requires| () Bool)
(declare-fun |Bounds.__default.SuperblockSizeUint64#canCall| () Bool)
(declare-fun |Bounds.__default.DiskNumJournalBlocksUint64#canCall| () Bool)
(declare-fun |Bounds.__default.JournalBlockSizeUint64#canCall| () Bool)
(declare-fun |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| () Bool)
(declare-fun |Bounds.__default.NodeBlockSizeUint64#canCall| () Bool)
(declare-fun Bounds.__default.SuperblockSizeUint64 () Int)
(declare-fun Bounds.__default.DiskNumJournalBlocksUint64 () Int)
(declare-fun Bounds.__default.JournalBlockSizeUint64 () Int)
(declare-fun Bounds.__default.IndirectionTableBlockSizeUint64 () Int)
(declare-fun |Bounds.__default.SuperblockSizeUint64#requires| () Bool)
(declare-fun |Bounds.__default.JournalBlockSizeUint64#requires| () Bool)
(declare-fun |Bounds.__default.DiskNumJournalBlocksUint64#requires| () Bool)
(declare-fun |Bounds.__default.IndirectionTableBlockSizeUint64#requires| () Bool)
(declare-fun Bounds.__default.LargestBlockSizeOfAnyTypeUint64 () Int)
(declare-fun |Bounds.__default.LargestBlockSizeOfAnyTypeUint64#requires| () Bool)
(declare-fun Bounds.__default.MaxTotalBucketWeightUint64 () Int)
(declare-fun |Bounds.__default.MaxTotalBucketWeightUint64#requires| () Bool)
(declare-fun Bounds.__default.MaxCacheSizeUint64 () Int)
(declare-fun |Bounds.__default.MaxCacheSizeUint64#requires| () Bool)
(declare-fun Bounds.__default.MaxNumChildrenUint64 () Int)
(declare-fun |Bounds.__default.MaxNumChildrenUint64#requires| () Bool)
(declare-fun Bounds.__default.FlushTriggerWeightUint64 () Int)
(declare-fun |Bounds.__default.FlushTriggerWeightUint64#requires| () Bool)
(declare-fun |Bounds.__default.MaxTotalBucketWeightUint64#canCall| () Bool)
(declare-fun Bounds.__default.NumBlocksUint64 () Int)
(declare-fun |Bounds.__default.NumBlocksUint64#requires| () Bool)
(declare-fun Bounds.__default.IndirectionTableMaxSizeUint64 () Int)
(declare-fun |Bounds.__default.IndirectionTableMaxSizeUint64#requires| () Bool)
(declare-fun |Bounds.__default.SuperblockSize#requires| () Bool)
(declare-fun Bounds.__default.SuperblockSize () Int)
(declare-fun |Bounds.__default.IndirectionTableBlockSize#requires| () Bool)
(declare-fun Bounds.__default.IndirectionTableBlockSize () Int)
(declare-fun |Bounds.__default.NodeBlockSize#requires| () Bool)
(declare-fun Bounds.__default.NodeBlockSize () Int)
(declare-fun |Bounds.__default.MinNodeBlockIndex#requires| () Bool)
(declare-fun |Bounds.__default.MinNodeBlockIndexUint64#canCall| () Bool)
(declare-fun Bounds.__default.MinNodeBlockIndex () Int)
(declare-fun |Bounds.__default.MaxNumChildren#requires| () Bool)
(declare-fun |Bounds.__default.MaxNumChildrenUint64#canCall| () Bool)
(declare-fun Bounds.__default.MaxNumChildren () Int)
(declare-fun |Bounds.__default.MaxTotalBucketWeight#requires| () Bool)
(declare-fun |Bounds.__default.MaxCacheSize#requires| () Bool)
(declare-fun |Bounds.__default.MaxCacheSizeUint64#canCall| () Bool)
(declare-fun Bounds.__default.MaxCacheSize () Int)
(declare-fun |Bounds.__default.FlushTriggerWeight#requires| () Bool)
(declare-fun |Bounds.__default.FlushTriggerWeightUint64#canCall| () Bool)
(declare-fun Bounds.__default.FlushTriggerWeight () Int)
(declare-fun |Bounds.__default.NumBlocks#requires| () Bool)
(declare-fun |Bounds.__default.NumBlocksUint64#canCall| () Bool)
(declare-fun Bounds.__default.NumBlocks () Int)
(declare-fun |Bounds.__default.IndirectionTableMaxSize#requires| () Bool)
(declare-fun |Bounds.__default.IndirectionTableMaxSizeUint64#canCall| () Bool)
(declare-fun Bounds.__default.IndirectionTableMaxSize () Int)
(declare-fun |Bounds.__default.JournalBlockSize#requires| () Bool)
(declare-fun Bounds.__default.JournalBlockSize () Int)
(declare-fun |Bounds.__default.DiskNumJournalBlocks#requires| () Bool)
(declare-fun Bounds.__default.DiskNumJournalBlocks () Int)
(declare-fun Tclass.BucketWeights.__default () T@U)
(declare-fun |BucketWeights.__default.WeightKey#requires| (T@U) Bool)
(declare-fun |BucketWeights.__default.WeightMessage#requires| (T@U) Bool)
(declare-fun BucketWeights.__default.WeightKeyMultiset (T@U T@U) Int)
(declare-fun |BucketWeights.__default.WeightKeyMultiset#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.WeightKeyMultiset#requires| (T@U T@U) Bool)
(declare-fun |BucketWeights.__default.WeightKey#Handle| () T@U)
(declare-fun |Multisets.__default.AddNat#Handle| () T@U)
(declare-fun BucketWeights.__default.WeightMessageMultiset (T@U T@U) Int)
(declare-fun |BucketWeights.__default.WeightMessageMultiset#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.WeightMessageMultiset#requires| (T@U T@U) Bool)
(declare-fun |BucketWeights.__default.WeightMessage#Handle| () T@U)
(declare-fun BucketWeights.__default.WeightKeyList (T@U) Int)
(declare-fun |BucketWeights.__default.WeightKeyList#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.WeightKeyList#requires| (T@U) Bool)
(declare-fun StartFuel_BucketWeights._default.WeightKeyMultiset () T@U)
(declare-fun BucketWeights.__default.WeightMessageList (T@U) Int)
(declare-fun |BucketWeights.__default.WeightMessageList#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.WeightMessageList#requires| (T@U) Bool)
(declare-fun StartFuel_BucketWeights._default.WeightMessageMultiset () T@U)
(declare-fun BucketWeights.__default.WeightBucket (T@U) Int)
(declare-fun |BucketWeights.__default.WeightBucket#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.WeightBucket#requires| (T@U) Bool)
(declare-fun |BucketWeights.__default.WeightBucketList#requires| (T@U T@U) Bool)
(declare-fun BucketWeights.__default.WeightBucketMap (T@U T@U) Int)
(declare-fun |BucketWeights.__default.WeightBucketMap#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.WeightBucketMap#requires| (T@U T@U) Bool)
(declare-fun BucketWeights.__default.WeightKeyUint64 (T@U) Int)
(declare-fun |BucketWeights.__default.WeightKeyUint64#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.WeightKeyUint64#requires| (T@U) Bool)
(declare-fun BucketWeights.__default.WeightMessageUint64 (T@U) Int)
(declare-fun |BucketWeights.__default.WeightMessageUint64#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.WeightMessageUint64#requires| (T@U) Bool)
(declare-fun BucketWeights.__default.biggestSlotIterate (T@U T@U Int Int Int) T@U)
(declare-fun |BucketWeights.__default.biggestSlotIterate#canCall| (T@U Int Int Int) Bool)
(declare-fun |BucketWeights.__default.biggestSlotIterate#requires| (T@U T@U Int Int Int) Bool)
(declare-fun BucketWeights.__default.biggestSlot (T@U) T@U)
(declare-fun |BucketWeights.__default.biggestSlot#canCall| (T@U) Bool)
(declare-fun |BucketWeights.__default.biggestSlot#requires| (T@U) Bool)
(declare-fun MapType9Select (T@U T@U T@U) T@U)
(declare-fun |lambda#0| (T@U T@U T@U Bool) T@U)
(declare-fun MapType9Type (T@T T@T) T@T)
(declare-fun MapType9TypeInv0 (T@T) T@T)
(declare-fun MapType9TypeInv1 (T@T) T@T)
(declare-fun MapType9Store (T@U T@U T@U T@U) T@U)
(declare-fun |lambda#1| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#6| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#7| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#14| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#15| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#18| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#19| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#20| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#21| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#26| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#27| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#30| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#31| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#32| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#33| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#34| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#35| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#36| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#37| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#38| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#39| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#40| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#41| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#42| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#43| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#44| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#45| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#46| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#47| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#48| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#49| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#50| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#51| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#52| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#53| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#54| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#55| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#60| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#61| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#64| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#65| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#66| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#67| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#68| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#69| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#70| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#71| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#72| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#73| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#74| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#75| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#76| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#77| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#78| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#79| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#80| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#81| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#82| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#83| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#84| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#85| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#86| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#87| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#88| (T@U T@U T@U Bool) T@U)
(declare-fun |lambda#89| (T@U T@U T@U Bool) T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor intType) 0) (= (Ctor realType) 1)) (= (Ctor boolType) 2)) (= (Ctor rmodeType) 3)) (= (Ctor stringType) 4)) (= (Ctor regexType) 5)) (forall ((arg0 Int) ) (! (= (U_2_int (int_2_U arg0)) arg0) :qid |typeInv:U_2_int| :pattern ( (int_2_U arg0)) ))) (forall ((x T@U) ) (!  (=> (= (type x) intType) (= (int_2_U (U_2_int x)) x)) :qid |cast:U_2_int| :pattern ( (U_2_int x)) ))) (forall ((arg0@@0 Int) ) (! (= (type (int_2_U arg0@@0)) intType) :qid |funType:int_2_U| :pattern ( (int_2_U arg0@@0)) ))) (forall ((arg0@@1 Real) ) (! (= (U_2_real (real_2_U arg0@@1)) arg0@@1) :qid |typeInv:U_2_real| :pattern ( (real_2_U arg0@@1)) ))) (forall ((x@@0 T@U) ) (!  (=> (= (type x@@0) realType) (= (real_2_U (U_2_real x@@0)) x@@0)) :qid |cast:U_2_real| :pattern ( (U_2_real x@@0)) ))) (forall ((arg0@@2 Real) ) (! (= (type (real_2_U arg0@@2)) realType) :qid |funType:real_2_U| :pattern ( (real_2_U arg0@@2)) ))) (forall ((arg0@@3 Bool) ) (! (= (U_2_bool (bool_2_U arg0@@3)) arg0@@3) :qid |typeInv:U_2_bool| :pattern ( (bool_2_U arg0@@3)) ))) (forall ((x@@1 T@U) ) (!  (=> (= (type x@@1) boolType) (= (bool_2_U (U_2_bool x@@1)) x@@1)) :qid |cast:U_2_bool| :pattern ( (U_2_bool x@@1)) ))) (forall ((arg0@@4 Bool) ) (! (= (type (bool_2_U arg0@@4)) boolType) :qid |funType:bool_2_U| :pattern ( (bool_2_U arg0@@4)) ))) (forall ((arg0@@5 RoundingMode) ) (! (= (U_2_rmode (rmode_2_U arg0@@5)) arg0@@5) :qid |typeInv:U_2_rmode| :pattern ( (rmode_2_U arg0@@5)) ))) (forall ((x@@2 T@U) ) (!  (=> (= (type x@@2) rmodeType) (= (rmode_2_U (U_2_rmode x@@2)) x@@2)) :qid |cast:U_2_rmode| :pattern ( (U_2_rmode x@@2)) ))) (forall ((arg0@@6 RoundingMode) ) (! (= (type (rmode_2_U arg0@@6)) rmodeType) :qid |funType:rmode_2_U| :pattern ( (rmode_2_U arg0@@6)) ))) (forall ((arg0@@7 String) ) (! (= (U_2_string (string_2_U arg0@@7)) arg0@@7) :qid |typeInv:U_2_string| :pattern ( (string_2_U arg0@@7)) ))) (forall ((x@@3 T@U) ) (!  (=> (= (type x@@3) stringType) (= (string_2_U (U_2_string x@@3)) x@@3)) :qid |cast:U_2_string| :pattern ( (U_2_string x@@3)) ))) (forall ((arg0@@8 String) ) (! (= (type (string_2_U arg0@@8)) stringType) :qid |funType:string_2_U| :pattern ( (string_2_U arg0@@8)) ))) (forall ((arg0@@9 (RegEx String)) ) (! (= (U_2_regex (regex_2_U arg0@@9)) arg0@@9) :qid |typeInv:U_2_regex| :pattern ( (regex_2_U arg0@@9)) ))) (forall ((x@@4 T@U) ) (!  (=> (= (type x@@4) regexType) (= (regex_2_U (U_2_regex x@@4)) x@@4)) :qid |cast:U_2_regex| :pattern ( (U_2_regex x@@4)) ))) (forall ((arg0@@10 (RegEx String)) ) (! (= (type (regex_2_U arg0@@10)) regexType) :qid |funType:regex_2_U| :pattern ( (regex_2_U arg0@@10)) ))))
(assert (forall ((x@@5 T@U) ) (! (UOrdering2 x@@5 x@@5) :qid |bg:subtype-refl| :no-pattern (U_2_int x@@5) :no-pattern (U_2_bool x@@5) )))
(assert (forall ((x@@6 T@U) (y T@U) (z T@U) ) (! (let ((alpha (type x@@6))) (=> (and (and (= (type y) alpha) (= (type z) alpha)) (and (UOrdering2 x@@6 y) (UOrdering2 y z))) (UOrdering2 x@@6 z))) :qid |bg:subtype-trans| :pattern ( (UOrdering2 x@@6 y) (UOrdering2 y z)) )))
(assert (forall ((x@@7 T@U) (y@@0 T@U) ) (! (let ((alpha@@0 (type x@@7))) (=> (= (type y@@0) alpha@@0) (=> (and (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) (= x@@7 y@@0)))) :qid |bg:subtype-antisymm| :pattern ( (UOrdering2 x@@7 y@@0) (UOrdering2 y@@0 x@@7)) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (Ctor TyType) 6) (= (type TBool) TyType)) (= (type TChar) TyType)) (= (type TInt) TyType)) (= (type TReal) TyType)) (= (type TORDINAL) TyType)) (= (Ctor TyTagType) 7)) (= (type TagBool) TyTagType)) (= (type TagChar) TyTagType)) (= (type TagInt) TyTagType)) (= (type TagReal) TyTagType)) (= (type TagORDINAL) TyTagType)) (= (type TagSet) TyTagType)) (= (type TagISet) TyTagType)) (= (type TagMultiSet) TyTagType)) (= (type TagSeq) TyTagType)) (= (type TagMap) TyTagType)) (= (type TagIMap) TyTagType)) (= (type TagClass) TyTagType)) (= (Ctor ClassNameType) 8)) (= (type class._System.int) ClassNameType)) (= (type class._System.bool) ClassNameType)) (= (type class._System.set) ClassNameType)) (= (type class._System.seq) ClassNameType)) (= (type class._System.multiset) ClassNameType)) (forall ((arg0@@11 T@T) ) (! (= (Ctor (FieldType arg0@@11)) 9) :qid |ctor:FieldType| ))) (forall ((arg0@@12 T@T) ) (! (= (FieldTypeInv0 (FieldType arg0@@12)) arg0@@12) :qid |typeInv:FieldTypeInv0| :pattern ( (FieldType arg0@@12)) ))) (= (type alloc) (FieldType boolType))) (= (Ctor NameFamilyType) 10)) (= (type allocName) NameFamilyType)) (= (type Tagclass._System.nat) TyTagType)) (= (type class._System.object?) ClassNameType)) (= (type Tagclass._System.object?) TyTagType)) (= (type Tagclass._System.object) TyTagType)) (= (type class._System.array?) ClassNameType)) (= (type Tagclass._System.array?) TyTagType)) (= (type Tagclass._System.array) TyTagType)) (= (type Tagclass._System.___hFunc1) TyTagType)) (= (type Tagclass._System.___hPartialFunc1) TyTagType)) (= (type Tagclass._System.___hTotalFunc1) TyTagType)) (= (type Tagclass._System.___hFunc0) TyTagType)) (= (type Tagclass._System.___hPartialFunc0) TyTagType)) (= (type Tagclass._System.___hTotalFunc0) TyTagType)) (= (type class._System.__default) ClassNameType)) (= (type Tagclass._System.__default) TyTagType)) (= (type Tagclass._System.___hFunc2) TyTagType)) (= (type Tagclass._System.___hPartialFunc2) TyTagType)) (= (type Tagclass._System.___hTotalFunc2) TyTagType)) (= (type Tagclass._System.___hFunc4) TyTagType)) (= (type Tagclass._System.___hPartialFunc4) TyTagType)) (= (type Tagclass._System.___hTotalFunc4) TyTagType)) (= (type Tagclass._System.___hFunc10) TyTagType)) (= (type Tagclass._System.___hPartialFunc10) TyTagType)) (= (type Tagclass._System.___hTotalFunc10) TyTagType)) (= (type Tagclass._System.___hFunc3) TyTagType)) (= (type Tagclass._System.___hPartialFunc3) TyTagType)) (= (type Tagclass._System.___hTotalFunc3) TyTagType)) (= (type Tagclass._System.___hFunc6) TyTagType)) (= (type Tagclass._System.___hPartialFunc6) TyTagType)) (= (type Tagclass._System.___hTotalFunc6) TyTagType)) (= (Ctor DtCtorIdType) 11)) (= (type |##_System._tuple#2._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2) TyTagType)) (= (type class._System.Tuple2) ClassNameType)) (= (type Tagclass._System.___hFunc5) TyTagType)) (= (type Tagclass._System.___hPartialFunc5) TyTagType)) (= (type Tagclass._System.___hTotalFunc5) TyTagType)) (= (type Tagclass._System.___hFunc2OSO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2OSO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2OSO) TyTagType)) (= (type Tagclass._System.___hFunc3LLOO) TyTagType)) (= (type Tagclass._System.___hPartialFunc3LLOO) TyTagType)) (= (type Tagclass._System.___hTotalFunc3LLOO) TyTagType)) (= (type Tagclass._System.___hFunc1OS) TyTagType)) (= (type Tagclass._System.___hPartialFunc1OS) TyTagType)) (= (type Tagclass._System.___hTotalFunc1OS) TyTagType)) (= (type Tagclass._System.___hFunc0L) TyTagType)) (= (type Tagclass._System.___hPartialFunc0L) TyTagType)) (= (type Tagclass._System.___hTotalFunc0L) TyTagType)) (= (type Tagclass._System.___hFunc2LOO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2LOO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2LOO) TyTagType)) (= (type |##_System._tuple#0._#Make0|) DtCtorIdType)) (= (type Tagclass._System.Tuple0) TyTagType)) (= (type class._System.Tuple0) ClassNameType)) (= (type Tagclass._System.___hFunc1OL) TyTagType)) (= (type Tagclass._System.___hPartialFunc1OL) TyTagType)) (= (type Tagclass._System.___hTotalFunc1OL) TyTagType)) (= (type Tagclass._System.___hFunc1LO) TyTagType)) (= (type Tagclass._System.___hPartialFunc1LO) TyTagType)) (= (type Tagclass._System.___hTotalFunc1LO) TyTagType)) (= (type |##_System._tuple#2OLL._#Make2|) DtCtorIdType)) (= (type Tagclass._System.Tuple2OLL) TyTagType)) (= (type class._System.Tuple2OLL) ClassNameType)) (= (type Tagclass._System.___hFunc3LLOL) TyTagType)) (= (type Tagclass._System.___hPartialFunc3LLOL) TyTagType)) (= (type Tagclass._System.___hTotalFunc3LLOL) TyTagType)) (= (type Tagclass._System.___hFunc2SSO) TyTagType)) (= (type Tagclass._System.___hPartialFunc2SSO) TyTagType)) (= (type Tagclass._System.___hTotalFunc2SSO) TyTagType)) (= (type Tagclass._System.___hFunc1SS) TyTagType)) (= (type Tagclass._System.___hPartialFunc1SS) TyTagType)) (= (type Tagclass._System.___hTotalFunc1SS) TyTagType)) (= (type Tagclass._System.___hFunc1LL) TyTagType)) (= (type Tagclass._System.___hPartialFunc1LL) TyTagType)) (= (type Tagclass._System.___hTotalFunc1LL) TyTagType)) (= (type |##BucketFlushModel.singleMergeResult.MergeCompleted|) DtCtorIdType)) (= (type Tagclass.KeyType.Key) TyTagType)) (= (type Tagclass.ValueMessage.Message) TyTagType)) (= (type Tagclass.BucketFlushModel.singleMergeResult) TyTagType)) (= (type |##BucketFlushModel.singleMergeResult.SlackExhausted|) DtCtorIdType)) (= (type class.BucketFlushModel.singleMergeResult) ClassNameType)) (= (type |##BucketFlushModel.mergeResult.mergeResult|) DtCtorIdType)) (= (type Tagclass.BucketsLib.Bucket) TyTagType)) (= (type Tagclass.BucketFlushModel.mergeResult) TyTagType)) (= (type class.BucketFlushModel.mergeResult) ClassNameType)) (= (type |##BucketFlushModel.partialFlushResult.partialFlushResult|) DtCtorIdType)) (= (type Tagclass.BucketFlushModel.partialFlushResult) TyTagType)) (= (type class.BucketFlushModel.partialFlushResult) ClassNameType)) (= (type class.BucketFlushModel.__default) ClassNameType)) (= (type Tagclass.BucketFlushModel.__default) TyTagType)) (= (type Tagclass.NativeTypes.byte) TyTagType)) (= (type Tagclass.Upperbounded__Lexicographic__Byte__Order.Element) TyTagType)) (= (type class.SequencesLite.__default) ClassNameType)) (= (type Tagclass.SequencesLite.__default) TyTagType)) (= (type |##Options.Option.None|) DtCtorIdType)) (= (type Tagclass.Options.Option) TyTagType)) (= (type |##Options.Option.Some|) DtCtorIdType)) (= (type class.Options.Option) ClassNameType)) (= (type class.Options.__default) ClassNameType)) (= (type Tagclass.Options.__default) TyTagType)) (= (type Tagclass.NativeTypes.sbyte) TyTagType)) (= (type class.NativeTypes.sbyte) ClassNameType)) (= (type class.NativeTypes.byte) ClassNameType)) (= (type Tagclass.NativeTypes.int16) TyTagType)) (= (type class.NativeTypes.int16) ClassNameType)) (= (type Tagclass.NativeTypes.uint16) TyTagType)) (= (type class.NativeTypes.uint16) ClassNameType)) (= (type Tagclass.NativeTypes.int32) TyTagType)) (= (type class.NativeTypes.int32) ClassNameType)) (= (type Tagclass.NativeTypes.uint32) TyTagType)) (= (type class.NativeTypes.uint32) ClassNameType)) (= (type Tagclass.NativeTypes.int64) TyTagType)) (= (type class.NativeTypes.int64) ClassNameType)) (= (type Tagclass.NativeTypes.uint64) TyTagType)) (= (type class.NativeTypes.uint64) ClassNameType)) (= (type Tagclass.NativeTypes.nat8) TyTagType)) (= (type class.NativeTypes.nat8) ClassNameType)) (= (type Tagclass.NativeTypes.nat16) TyTagType)) (= (type class.NativeTypes.nat16) ClassNameType)) (= (type Tagclass.NativeTypes.nat32) TyTagType)) (= (type class.NativeTypes.nat32) ClassNameType)) (= (type Tagclass.NativeTypes.nat64) TyTagType)) (= (type class.NativeTypes.nat64) ClassNameType)) (= (type Tagclass.NativeTypes.uint128) TyTagType)) (= (type class.NativeTypes.uint128) ClassNameType)) (= (type class.NativeTypes.__default) ClassNameType)) (= (type Tagclass.NativeTypes.__default) TyTagType)) (= (type class.Mathematics.__default) ClassNameType)) (= (type Tagclass.Mathematics.__default) TyTagType)) (= (type class.Sequences.__default) ClassNameType)) (= (type Tagclass.Sequences.__default) TyTagType)) (= (type class.KeyType.__default) ClassNameType)) (= (type Tagclass.KeyType.__default) TyTagType)) (= (type class.Sets.__default) ClassNameType)) (= (type Tagclass.Sets.__default) TyTagType)) (= (type class.MapRemove_s.__default) ClassNameType)) (= (type Tagclass.MapRemove_s.__default) TyTagType)) (= (type class.Maps.__default) ClassNameType)) (= (type Tagclass.Maps.__default) TyTagType)) (= (type class.SeqComparison.__default) ClassNameType)) (= (type Tagclass.SeqComparison.__default) TyTagType)) (= (type class.NativeArrays.__default) ClassNameType)) (= (type Tagclass.NativeArrays.__default) TyTagType)) (= (type class.LinearMaybe.predefined) ClassNameType)) (= (type class.LinearMaybe.__default) ClassNameType)) (= (type Tagclass.LinearMaybe.__default) TyTagType)) (= (type class.LinearExtern.predefined) ClassNameType)) (= (type class.LinearExtern.__default) ClassNameType)) (= (type Tagclass.LinearExtern.__default) TyTagType)) (= (type class.Byte__Order.__default) ClassNameType)) (= (type Tagclass.Byte__Order.__default) TyTagType)) (= (type class.Lexicographic__Byte__Order.__default) ClassNameType)) (= (type Tagclass.Lexicographic__Byte__Order.__default) TyTagType)) (= (type class.Upperbounded__Lexicographic__Byte__Order.__default) ClassNameType)) (= (type Tagclass.Upperbounded__Lexicographic__Byte__Order.__default) TyTagType)) (= (type |##Upperbounded_Lexicographic_Byte_Order.Element.Element|) DtCtorIdType)) (= (type |##Upperbounded_Lexicographic_Byte_Order.Element.Max_Element|) DtCtorIdType)) (= (type class.Upperbounded__Lexicographic__Byte__Order.Element) ClassNameType)) (= (type class.Upperbounded__Lexicographic__Byte__Order__Impl.__default) ClassNameType)) (= (type Tagclass.Upperbounded__Lexicographic__Byte__Order__Impl.__default) TyTagType)) (= (type class.BoundedPivotsLib.__default) ClassNameType)) (= (type Tagclass.BoundedPivotsLib.__default) TyTagType)) (= (type Tagclass.ValueType.Value) TyTagType)) (= (type class.ValueType.__default) ClassNameType)) (= (type Tagclass.ValueType.__default) TyTagType)) (= (type |##ValueMessage.Delta.NoDelta|) DtCtorIdType)) (= (type Tagclass.ValueMessage.Delta) TyTagType)) (= (type class.ValueMessage.Delta) ClassNameType)) (= (type class.ValueMessage.__default) ClassNameType)) (= (type Tagclass.ValueMessage.__default) TyTagType)) (= (type |##ValueMessage.Message.Define|) DtCtorIdType)) (= (type |##ValueMessage.Message.Update|) DtCtorIdType)) (= (type class.ValueMessage.Message) ClassNameType)) (= (type |##UI.RangeStart.SInclusive|) DtCtorIdType)) (= (type Tagclass.UI.RangeStart) TyTagType)) (= (type |##UI.RangeStart.SExclusive|) DtCtorIdType)) (= (type |##UI.RangeStart.NegativeInf|) DtCtorIdType)) (= (type class.UI.RangeStart) ClassNameType)) (= (type |##UI.RangeEnd.EInclusive|) DtCtorIdType)) (= (type Tagclass.UI.RangeEnd) TyTagType)) (= (type |##UI.RangeEnd.EExclusive|) DtCtorIdType)) (= (type |##UI.RangeEnd.PositiveInf|) DtCtorIdType)) (= (type class.UI.RangeEnd) ClassNameType)) (= (type |##UI.SuccResult.SuccResult|) DtCtorIdType)) (= (type Tagclass.UI.SuccResult) TyTagType)) (= (type class.UI.SuccResult) ClassNameType)) (= (type |##UI.SuccResultList.SuccResultList|) DtCtorIdType)) (= (type Tagclass.UI.SuccResultList) TyTagType)) (= (type class.UI.SuccResultList) ClassNameType)) (= (type |##UI.Op.NoOp|) DtCtorIdType)) (= (type Tagclass.UI.Op) TyTagType)) (= (type |##UI.Op.SyncOp|) DtCtorIdType)) (= (type |##UI.Op.CrashOp|) DtCtorIdType)) (= (type |##UI.Op.PushSyncOp|) DtCtorIdType)) (= (type |##UI.Op.PopSyncOp|) DtCtorIdType)) (= (type |##UI.Op.GetOp|) DtCtorIdType)) (= (type |##UI.Op.GetBeginOp|) DtCtorIdType)) (= (type |##UI.Op.GetEndOp|) DtCtorIdType)) (= (type |##UI.Op.PutOp|) DtCtorIdType)) (= (type |##UI.Op.SuccOp|) DtCtorIdType)) (= (type class.UI.Op) ClassNameType)) (= (type class.UI.__default) ClassNameType)) (= (type Tagclass.UI.__default) TyTagType)) (= (type |##MapSpec.Variables.Variables|) DtCtorIdType)) (= (type Tagclass.MapSpec.Variables) TyTagType)) (= (type class.MapSpec.Variables) ClassNameType)) (= (type |##MapSpec.Step.QueryStep|) DtCtorIdType)) (= (type Tagclass.MapSpec.Step) TyTagType)) (= (type |##MapSpec.Step.WriteStep|) DtCtorIdType)) (= (type |##MapSpec.Step.SuccStep|) DtCtorIdType)) (= (type |##MapSpec.Step.StutterStep|) DtCtorIdType)) (= (type class.MapSpec.Step) ClassNameType)) (= (type class.MapSpec.__default) ClassNameType)) (= (type Tagclass.MapSpec.__default) TyTagType)) (= (type class.BucketMaps.__default) ClassNameType)) (= (type Tagclass.BucketMaps.__default) TyTagType)) (= (type class.Multisets.__default) ClassNameType)) (= (type Tagclass.Multisets.__default) TyTagType)) (= (type |##MapSeqs.SeqPair.SeqPair|) DtCtorIdType)) (= (type Tagclass.MapSeqs.SeqPair) TyTagType)) (= (type class.MapSeqs.SeqPair) ClassNameType)) (= (type class.MapSeqs.__default) ClassNameType)) (= (type Tagclass.MapSeqs.__default) TyTagType)) (= (type |##BucketsLib.Bucket.Bucket|) DtCtorIdType)) (= (type class.BucketsLib.Bucket) ClassNameType)) (= (type class.BucketsLib.__default) ClassNameType)) (= (type Tagclass.BucketsLib.__default) TyTagType)) (= (type class.Bounds.__default) ClassNameType)) (= (type Tagclass.Bounds.__default) TyTagType)) (= (type class.BucketWeights.__default) ClassNameType)) (= (type Tagclass.BucketWeights.__default) TyTagType)) (= (Ctor TyTagFamilyType) 12)) (= (type tytagFamily$nat) TyTagFamilyType)) (= (type tytagFamily$object) TyTagFamilyType)) (= (type tytagFamily$array) TyTagFamilyType)) (= (type |tytagFamily$_#Func1|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1|) TyTagFamilyType)) (= (type |tytagFamily$_#Func0|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc0|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc0|) TyTagFamilyType)) (= (type tytagFamily$_default) TyTagFamilyType)) (= (type |tytagFamily$_#Func2|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2|) TyTagFamilyType)) (= (type |tytagFamily$_#Func4|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc4|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc4|) TyTagFamilyType)) (= (type |tytagFamily$_#Func10|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc10|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc10|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3|) TyTagFamilyType)) (= (type |tytagFamily$_#Func6|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc6|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc6|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#2|) TyTagFamilyType)) (= (type |tytagFamily$_#Func5|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc5|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc5|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2OSO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2OSO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2OSO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3LLOO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3LLOO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3LLOO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1OS|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1OS|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1OS|) TyTagFamilyType)) (= (type |tytagFamily$_#Func0L|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc0L|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc0L|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2LOO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2LOO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2LOO|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#0|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1OL|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1OL|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1OL|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1LO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1LO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1LO|) TyTagFamilyType)) (= (type |tytagFamily$_tuple#2OLL|) TyTagFamilyType)) (= (type |tytagFamily$_#Func3LLOL|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc3LLOL|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc3LLOL|) TyTagFamilyType)) (= (type |tytagFamily$_#Func2SSO|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc2SSO|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc2SSO|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1SS|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1SS|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1SS|) TyTagFamilyType)) (= (type |tytagFamily$_#Func1LL|) TyTagFamilyType)) (= (type |tytagFamily$_#PartialFunc1LL|) TyTagFamilyType)) (= (type |tytagFamily$_#TotalFunc1LL|) TyTagFamilyType)) (= (type tytagFamily$Key) TyTagFamilyType)) (= (type tytagFamily$Message) TyTagFamilyType)) (= (type tytagFamily$singleMergeResult) TyTagFamilyType)) (= (type tytagFamily$Bucket) TyTagFamilyType)) (= (type tytagFamily$mergeResult) TyTagFamilyType)) (= (type tytagFamily$partialFlushResult) TyTagFamilyType)) (= (type tytagFamily$byte) TyTagFamilyType)) (= (type tytagFamily$Element) TyTagFamilyType)) (= (type tytagFamily$Option) TyTagFamilyType)) (= (type tytagFamily$sbyte) TyTagFamilyType)) (= (type tytagFamily$int16) TyTagFamilyType)) (= (type tytagFamily$uint16) TyTagFamilyType)) (= (type tytagFamily$int32) TyTagFamilyType)) (= (type tytagFamily$uint32) TyTagFamilyType)) (= (type tytagFamily$int64) TyTagFamilyType)) (= (type tytagFamily$uint64) TyTagFamilyType)) (= (type tytagFamily$nat8) TyTagFamilyType)) (= (type tytagFamily$nat16) TyTagFamilyType)) (= (type tytagFamily$nat32) TyTagFamilyType)) (= (type tytagFamily$nat64) TyTagFamilyType)) (= (type tytagFamily$uint128) TyTagFamilyType)) (= (type tytagFamily$Value) TyTagFamilyType)) (= (type tytagFamily$Delta) TyTagFamilyType)) (= (type tytagFamily$RangeStart) TyTagFamilyType)) (= (type tytagFamily$RangeEnd) TyTagFamilyType)) (= (type tytagFamily$SuccResult) TyTagFamilyType)) (= (type tytagFamily$SuccResultList) TyTagFamilyType)) (= (type tytagFamily$Op) TyTagFamilyType)) (= (type tytagFamily$Variables) TyTagFamilyType)) (= (type tytagFamily$Step) TyTagFamilyType)) (= (type tytagFamily$SeqPair) TyTagFamilyType)))
(assert (distinct TBool TChar TInt TReal TORDINAL TagBool TagChar TagInt TagReal TagORDINAL TagSet TagISet TagMultiSet TagSeq TagMap TagIMap TagClass class._System.int class._System.bool class._System.set class._System.seq class._System.multiset alloc allocName Tagclass._System.nat class._System.object? Tagclass._System.object? Tagclass._System.object class._System.array? Tagclass._System.array? Tagclass._System.array Tagclass._System.___hFunc1 Tagclass._System.___hPartialFunc1 Tagclass._System.___hTotalFunc1 Tagclass._System.___hFunc0 Tagclass._System.___hPartialFunc0 Tagclass._System.___hTotalFunc0 class._System.__default Tagclass._System.__default Tagclass._System.___hFunc2 Tagclass._System.___hPartialFunc2 Tagclass._System.___hTotalFunc2 Tagclass._System.___hFunc4 Tagclass._System.___hPartialFunc4 Tagclass._System.___hTotalFunc4 Tagclass._System.___hFunc10 Tagclass._System.___hPartialFunc10 Tagclass._System.___hTotalFunc10 Tagclass._System.___hFunc3 Tagclass._System.___hPartialFunc3 Tagclass._System.___hTotalFunc3 Tagclass._System.___hFunc6 Tagclass._System.___hPartialFunc6 Tagclass._System.___hTotalFunc6 |##_System._tuple#2._#Make2| Tagclass._System.Tuple2 class._System.Tuple2 Tagclass._System.___hFunc5 Tagclass._System.___hPartialFunc5 Tagclass._System.___hTotalFunc5 Tagclass._System.___hFunc2OSO Tagclass._System.___hPartialFunc2OSO Tagclass._System.___hTotalFunc2OSO Tagclass._System.___hFunc3LLOO Tagclass._System.___hPartialFunc3LLOO Tagclass._System.___hTotalFunc3LLOO Tagclass._System.___hFunc1OS Tagclass._System.___hPartialFunc1OS Tagclass._System.___hTotalFunc1OS Tagclass._System.___hFunc0L Tagclass._System.___hPartialFunc0L Tagclass._System.___hTotalFunc0L Tagclass._System.___hFunc2LOO Tagclass._System.___hPartialFunc2LOO Tagclass._System.___hTotalFunc2LOO |##_System._tuple#0._#Make0| Tagclass._System.Tuple0 class._System.Tuple0 Tagclass._System.___hFunc1OL Tagclass._System.___hPartialFunc1OL Tagclass._System.___hTotalFunc1OL Tagclass._System.___hFunc1LO Tagclass._System.___hPartialFunc1LO Tagclass._System.___hTotalFunc1LO |##_System._tuple#2OLL._#Make2| Tagclass._System.Tuple2OLL class._System.Tuple2OLL Tagclass._System.___hFunc3LLOL Tagclass._System.___hPartialFunc3LLOL Tagclass._System.___hTotalFunc3LLOL Tagclass._System.___hFunc2SSO Tagclass._System.___hPartialFunc2SSO Tagclass._System.___hTotalFunc2SSO Tagclass._System.___hFunc1SS Tagclass._System.___hPartialFunc1SS Tagclass._System.___hTotalFunc1SS Tagclass._System.___hFunc1LL Tagclass._System.___hPartialFunc1LL Tagclass._System.___hTotalFunc1LL |##BucketFlushModel.singleMergeResult.MergeCompleted| Tagclass.KeyType.Key Tagclass.ValueMessage.Message Tagclass.BucketFlushModel.singleMergeResult |##BucketFlushModel.singleMergeResult.SlackExhausted| class.BucketFlushModel.singleMergeResult |##BucketFlushModel.mergeResult.mergeResult| Tagclass.BucketsLib.Bucket Tagclass.BucketFlushModel.mergeResult class.BucketFlushModel.mergeResult |##BucketFlushModel.partialFlushResult.partialFlushResult| Tagclass.BucketFlushModel.partialFlushResult class.BucketFlushModel.partialFlushResult class.BucketFlushModel.__default Tagclass.BucketFlushModel.__default Tagclass.NativeTypes.byte Tagclass.Upperbounded__Lexicographic__Byte__Order.Element class.SequencesLite.__default Tagclass.SequencesLite.__default |##Options.Option.None| Tagclass.Options.Option |##Options.Option.Some| class.Options.Option class.Options.__default Tagclass.Options.__default Tagclass.NativeTypes.sbyte class.NativeTypes.sbyte class.NativeTypes.byte Tagclass.NativeTypes.int16 class.NativeTypes.int16 Tagclass.NativeTypes.uint16 class.NativeTypes.uint16 Tagclass.NativeTypes.int32 class.NativeTypes.int32 Tagclass.NativeTypes.uint32 class.NativeTypes.uint32 Tagclass.NativeTypes.int64 class.NativeTypes.int64 Tagclass.NativeTypes.uint64 class.NativeTypes.uint64 Tagclass.NativeTypes.nat8 class.NativeTypes.nat8 Tagclass.NativeTypes.nat16 class.NativeTypes.nat16 Tagclass.NativeTypes.nat32 class.NativeTypes.nat32 Tagclass.NativeTypes.nat64 class.NativeTypes.nat64 Tagclass.NativeTypes.uint128 class.NativeTypes.uint128 class.NativeTypes.__default Tagclass.NativeTypes.__default class.Mathematics.__default Tagclass.Mathematics.__default class.Sequences.__default Tagclass.Sequences.__default class.KeyType.__default Tagclass.KeyType.__default class.Sets.__default Tagclass.Sets.__default class.MapRemove_s.__default Tagclass.MapRemove_s.__default class.Maps.__default Tagclass.Maps.__default class.SeqComparison.__default Tagclass.SeqComparison.__default class.NativeArrays.__default Tagclass.NativeArrays.__default class.LinearMaybe.predefined class.LinearMaybe.__default Tagclass.LinearMaybe.__default class.LinearExtern.predefined class.LinearExtern.__default Tagclass.LinearExtern.__default class.Byte__Order.__default Tagclass.Byte__Order.__default class.Lexicographic__Byte__Order.__default Tagclass.Lexicographic__Byte__Order.__default class.Upperbounded__Lexicographic__Byte__Order.__default Tagclass.Upperbounded__Lexicographic__Byte__Order.__default |##Upperbounded_Lexicographic_Byte_Order.Element.Element| |##Upperbounded_Lexicographic_Byte_Order.Element.Max_Element| class.Upperbounded__Lexicographic__Byte__Order.Element class.Upperbounded__Lexicographic__Byte__Order__Impl.__default Tagclass.Upperbounded__Lexicographic__Byte__Order__Impl.__default class.BoundedPivotsLib.__default Tagclass.BoundedPivotsLib.__default Tagclass.ValueType.Value class.ValueType.__default Tagclass.ValueType.__default |##ValueMessage.Delta.NoDelta| Tagclass.ValueMessage.Delta class.ValueMessage.Delta class.ValueMessage.__default Tagclass.ValueMessage.__default |##ValueMessage.Message.Define| |##ValueMessage.Message.Update| class.ValueMessage.Message |##UI.RangeStart.SInclusive| Tagclass.UI.RangeStart |##UI.RangeStart.SExclusive| |##UI.RangeStart.NegativeInf| class.UI.RangeStart |##UI.RangeEnd.EInclusive| Tagclass.UI.RangeEnd |##UI.RangeEnd.EExclusive| |##UI.RangeEnd.PositiveInf| class.UI.RangeEnd |##UI.SuccResult.SuccResult| Tagclass.UI.SuccResult class.UI.SuccResult |##UI.SuccResultList.SuccResultList| Tagclass.UI.SuccResultList class.UI.SuccResultList |##UI.Op.NoOp| Tagclass.UI.Op |##UI.Op.SyncOp| |##UI.Op.CrashOp| |##UI.Op.PushSyncOp| |##UI.Op.PopSyncOp| |##UI.Op.GetOp| |##UI.Op.GetBeginOp| |##UI.Op.GetEndOp| |##UI.Op.PutOp| |##UI.Op.SuccOp| class.UI.Op class.UI.__default Tagclass.UI.__default |##MapSpec.Variables.Variables| Tagclass.MapSpec.Variables class.MapSpec.Variables |##MapSpec.Step.QueryStep| Tagclass.MapSpec.Step |##MapSpec.Step.WriteStep| |##MapSpec.Step.SuccStep| |##MapSpec.Step.StutterStep| class.MapSpec.Step class.MapSpec.__default Tagclass.MapSpec.__default class.BucketMaps.__default Tagclass.BucketMaps.__default class.Multisets.__default Tagclass.Multisets.__default |##MapSeqs.SeqPair.SeqPair| Tagclass.MapSeqs.SeqPair class.MapSeqs.SeqPair class.MapSeqs.__default Tagclass.MapSeqs.__default |##BucketsLib.Bucket.Bucket| class.BucketsLib.Bucket class.BucketsLib.__default Tagclass.BucketsLib.__default class.Bounds.__default Tagclass.Bounds.__default class.BucketWeights.__default Tagclass.BucketWeights.__default tytagFamily$nat tytagFamily$object tytagFamily$array |tytagFamily$_#Func1| |tytagFamily$_#PartialFunc1| |tytagFamily$_#TotalFunc1| |tytagFamily$_#Func0| |tytagFamily$_#PartialFunc0| |tytagFamily$_#TotalFunc0| tytagFamily$_default |tytagFamily$_#Func2| |tytagFamily$_#PartialFunc2| |tytagFamily$_#TotalFunc2| |tytagFamily$_#Func4| |tytagFamily$_#PartialFunc4| |tytagFamily$_#TotalFunc4| |tytagFamily$_#Func10| |tytagFamily$_#PartialFunc10| |tytagFamily$_#TotalFunc10| |tytagFamily$_#Func3| |tytagFamily$_#PartialFunc3| |tytagFamily$_#TotalFunc3| |tytagFamily$_#Func6| |tytagFamily$_#PartialFunc6| |tytagFamily$_#TotalFunc6| |tytagFamily$_tuple#2| |tytagFamily$_#Func5| |tytagFamily$_#PartialFunc5| |tytagFamily$_#TotalFunc5| |tytagFamily$_#Func2OSO| |tytagFamily$_#PartialFunc2OSO| |tytagFamily$_#TotalFunc2OSO| |tytagFamily$_#Func3LLOO| |tytagFamily$_#PartialFunc3LLOO| |tytagFamily$_#TotalFunc3LLOO| |tytagFamily$_#Func1OS| |tytagFamily$_#PartialFunc1OS| |tytagFamily$_#TotalFunc1OS| |tytagFamily$_#Func0L| |tytagFamily$_#PartialFunc0L| |tytagFamily$_#TotalFunc0L| |tytagFamily$_#Func2LOO| |tytagFamily$_#PartialFunc2LOO| |tytagFamily$_#TotalFunc2LOO| |tytagFamily$_tuple#0| |tytagFamily$_#Func1OL| |tytagFamily$_#PartialFunc1OL| |tytagFamily$_#TotalFunc1OL| |tytagFamily$_#Func1LO| |tytagFamily$_#PartialFunc1LO| |tytagFamily$_#TotalFunc1LO| |tytagFamily$_tuple#2OLL| |tytagFamily$_#Func3LLOL| |tytagFamily$_#PartialFunc3LLOL| |tytagFamily$_#TotalFunc3LLOL| |tytagFamily$_#Func2SSO| |tytagFamily$_#PartialFunc2SSO| |tytagFamily$_#TotalFunc2SSO| |tytagFamily$_#Func1SS| |tytagFamily$_#PartialFunc1SS| |tytagFamily$_#TotalFunc1SS| |tytagFamily$_#Func1LL| |tytagFamily$_#PartialFunc1LL| |tytagFamily$_#TotalFunc1LL| tytagFamily$Key tytagFamily$Message tytagFamily$singleMergeResult tytagFamily$Bucket tytagFamily$mergeResult tytagFamily$partialFlushResult tytagFamily$byte tytagFamily$Element tytagFamily$Option tytagFamily$sbyte tytagFamily$int16 tytagFamily$uint16 tytagFamily$int32 tytagFamily$uint32 tytagFamily$int64 tytagFamily$uint64 tytagFamily$nat8 tytagFamily$nat16 tytagFamily$nat32 tytagFamily$nat64 tytagFamily$uint128 tytagFamily$Value tytagFamily$Delta tytagFamily$RangeStart tytagFamily$RangeEnd tytagFamily$SuccResult tytagFamily$SuccResultList tytagFamily$Op tytagFamily$Variables tytagFamily$Step tytagFamily$SeqPair) )
(assert $$Language$Dafny)
(assert (forall ((arg0@@13 Int) ) (! (= (type (TBitvector arg0@@13)) TyType) :qid |funType:TBitvector| :pattern ( (TBitvector arg0@@13)) )))
(assert (forall ((w Int) ) (! (= (Inv0_TBitvector (TBitvector w)) w) :qid |DafnyPreludebpl.34:15| :skolemid |347| :pattern ( (TBitvector w)) )))
(assert  (and (forall ((arg0@@14 T@U) ) (! (= (type (TSet arg0@@14)) TyType) :qid |funType:TSet| :pattern ( (TSet arg0@@14)) )) (forall ((arg0@@15 T@U) ) (! (= (type (Inv0_TSet arg0@@15)) TyType) :qid |funType:Inv0_TSet| :pattern ( (Inv0_TSet arg0@@15)) ))))
(assert (forall ((t T@U) ) (!  (=> (= (type t) TyType) (= (Inv0_TSet (TSet t)) t)) :qid |DafnyPreludebpl.36:15| :skolemid |348| :pattern ( (TSet t)) )))
(assert  (and (forall ((arg0@@16 T@U) ) (! (= (type (TISet arg0@@16)) TyType) :qid |funType:TISet| :pattern ( (TISet arg0@@16)) )) (forall ((arg0@@17 T@U) ) (! (= (type (Inv0_TISet arg0@@17)) TyType) :qid |funType:Inv0_TISet| :pattern ( (Inv0_TISet arg0@@17)) ))))
(assert (forall ((t@@0 T@U) ) (!  (=> (= (type t@@0) TyType) (= (Inv0_TISet (TISet t@@0)) t@@0)) :qid |DafnyPreludebpl.38:15| :skolemid |349| :pattern ( (TISet t@@0)) )))
(assert  (and (forall ((arg0@@18 T@U) ) (! (= (type (TSeq arg0@@18)) TyType) :qid |funType:TSeq| :pattern ( (TSeq arg0@@18)) )) (forall ((arg0@@19 T@U) ) (! (= (type (Inv0_TSeq arg0@@19)) TyType) :qid |funType:Inv0_TSeq| :pattern ( (Inv0_TSeq arg0@@19)) ))))
(assert (forall ((t@@1 T@U) ) (!  (=> (= (type t@@1) TyType) (= (Inv0_TSeq (TSeq t@@1)) t@@1)) :qid |DafnyPreludebpl.40:15| :skolemid |350| :pattern ( (TSeq t@@1)) )))
(assert  (and (forall ((arg0@@20 T@U) ) (! (= (type (TMultiSet arg0@@20)) TyType) :qid |funType:TMultiSet| :pattern ( (TMultiSet arg0@@20)) )) (forall ((arg0@@21 T@U) ) (! (= (type (Inv0_TMultiSet arg0@@21)) TyType) :qid |funType:Inv0_TMultiSet| :pattern ( (Inv0_TMultiSet arg0@@21)) ))))
(assert (forall ((t@@2 T@U) ) (!  (=> (= (type t@@2) TyType) (= (Inv0_TMultiSet (TMultiSet t@@2)) t@@2)) :qid |DafnyPreludebpl.42:15| :skolemid |351| :pattern ( (TMultiSet t@@2)) )))
(assert  (and (forall ((arg0@@22 T@U) (arg1 T@U) ) (! (= (type (TMap arg0@@22 arg1)) TyType) :qid |funType:TMap| :pattern ( (TMap arg0@@22 arg1)) )) (forall ((arg0@@23 T@U) ) (! (= (type (Inv0_TMap arg0@@23)) TyType) :qid |funType:Inv0_TMap| :pattern ( (Inv0_TMap arg0@@23)) ))))
(assert (forall ((t@@3 T@U) (u T@U) ) (!  (=> (and (= (type t@@3) TyType) (= (type u) TyType)) (= (Inv0_TMap (TMap t@@3 u)) t@@3)) :qid |DafnyPreludebpl.45:15| :skolemid |352| :pattern ( (TMap t@@3 u)) )))
(assert (forall ((arg0@@24 T@U) ) (! (= (type (Inv1_TMap arg0@@24)) TyType) :qid |funType:Inv1_TMap| :pattern ( (Inv1_TMap arg0@@24)) )))
(assert (forall ((t@@4 T@U) (u@@0 T@U) ) (!  (=> (and (= (type t@@4) TyType) (= (type u@@0) TyType)) (= (Inv1_TMap (TMap t@@4 u@@0)) u@@0)) :qid |DafnyPreludebpl.46:15| :skolemid |353| :pattern ( (TMap t@@4 u@@0)) )))
(assert  (and (forall ((arg0@@25 T@U) (arg1@@0 T@U) ) (! (= (type (TIMap arg0@@25 arg1@@0)) TyType) :qid |funType:TIMap| :pattern ( (TIMap arg0@@25 arg1@@0)) )) (forall ((arg0@@26 T@U) ) (! (= (type (Inv0_TIMap arg0@@26)) TyType) :qid |funType:Inv0_TIMap| :pattern ( (Inv0_TIMap arg0@@26)) ))))
(assert (forall ((t@@5 T@U) (u@@1 T@U) ) (!  (=> (and (= (type t@@5) TyType) (= (type u@@1) TyType)) (= (Inv0_TIMap (TIMap t@@5 u@@1)) t@@5)) :qid |DafnyPreludebpl.49:15| :skolemid |354| :pattern ( (TIMap t@@5 u@@1)) )))
(assert (forall ((arg0@@27 T@U) ) (! (= (type (Inv1_TIMap arg0@@27)) TyType) :qid |funType:Inv1_TIMap| :pattern ( (Inv1_TIMap arg0@@27)) )))
(assert (forall ((t@@6 T@U) (u@@2 T@U) ) (!  (=> (and (= (type t@@6) TyType) (= (type u@@2) TyType)) (= (Inv1_TIMap (TIMap t@@6 u@@2)) u@@2)) :qid |DafnyPreludebpl.50:15| :skolemid |355| :pattern ( (TIMap t@@6 u@@2)) )))
(assert (forall ((arg0@@28 T@U) ) (! (= (type (Tag arg0@@28)) TyTagType) :qid |funType:Tag| :pattern ( (Tag arg0@@28)) )))
(assert (= (Tag TBool) TagBool))
(assert (= (Tag TChar) TagChar))
(assert (= (Tag TInt) TagInt))
(assert (= (Tag TReal) TagReal))
(assert (= (Tag TORDINAL) TagORDINAL))
(assert (forall ((t@@7 T@U) ) (!  (=> (= (type t@@7) TyType) (= (Tag (TSet t@@7)) TagSet)) :qid |DafnyPreludebpl.76:15| :skolemid |356| :pattern ( (TSet t@@7)) )))
(assert (forall ((t@@8 T@U) ) (!  (=> (= (type t@@8) TyType) (= (Tag (TISet t@@8)) TagISet)) :qid |DafnyPreludebpl.77:15| :skolemid |357| :pattern ( (TISet t@@8)) )))
(assert (forall ((t@@9 T@U) ) (!  (=> (= (type t@@9) TyType) (= (Tag (TMultiSet t@@9)) TagMultiSet)) :qid |DafnyPreludebpl.78:15| :skolemid |358| :pattern ( (TMultiSet t@@9)) )))
(assert (forall ((t@@10 T@U) ) (!  (=> (= (type t@@10) TyType) (= (Tag (TSeq t@@10)) TagSeq)) :qid |DafnyPreludebpl.79:15| :skolemid |359| :pattern ( (TSeq t@@10)) )))
(assert (forall ((t@@11 T@U) (u@@3 T@U) ) (!  (=> (and (= (type t@@11) TyType) (= (type u@@3) TyType)) (= (Tag (TMap t@@11 u@@3)) TagMap)) :qid |DafnyPreludebpl.80:15| :skolemid |360| :pattern ( (TMap t@@11 u@@3)) )))
(assert (forall ((t@@12 T@U) (u@@4 T@U) ) (!  (=> (and (= (type t@@12) TyType) (= (type u@@4) TyType)) (= (Tag (TIMap t@@12 u@@4)) TagIMap)) :qid |DafnyPreludebpl.81:15| :skolemid |361| :pattern ( (TIMap t@@12 u@@4)) )))
(assert (forall ((arg0@@29 T@U) ) (! (let ((T (type arg0@@29))) (= (type (Lit arg0@@29)) T)) :qid |funType:Lit| :pattern ( (Lit arg0@@29)) )))
(assert (forall ((x@@8 T@U) ) (! (= (Lit x@@8) x@@8) :qid |DafnyPreludebpl.89:29| :skolemid |362| :pattern ( (Lit x@@8)) )))
(assert  (and (= (Ctor BoxType) 13) (forall ((arg0@@30 T@U) ) (! (= (type ($Box arg0@@30)) BoxType) :qid |funType:$Box| :pattern ( ($Box arg0@@30)) ))))
(assert (forall ((x@@9 T@U) ) (! (= ($Box (Lit x@@9)) (Lit ($Box x@@9))) :qid |DafnyPreludebpl.90:18| :skolemid |363| :pattern ( ($Box (Lit x@@9))) )))
(assert (forall ((x@@10 Int) ) (! (= (LitInt x@@10) x@@10) :qid |DafnyPreludebpl.95:29| :skolemid |364| :pattern ( (LitInt x@@10)) )))
(assert (forall ((x@@11 Int) ) (! (= ($Box (int_2_U (LitInt x@@11))) (Lit ($Box (int_2_U x@@11)))) :qid |DafnyPreludebpl.96:15| :skolemid |365| :pattern ( ($Box (int_2_U (LitInt x@@11)))) )))
(assert (forall ((x@@12 Real) ) (! (= (LitReal x@@12) x@@12) :qid |DafnyPreludebpl.97:30| :skolemid |366| :pattern ( (LitReal x@@12)) )))
(assert (forall ((x@@13 Real) ) (! (= ($Box (real_2_U (LitReal x@@13))) (Lit ($Box (real_2_U x@@13)))) :qid |DafnyPreludebpl.98:15| :skolemid |367| :pattern ( ($Box (real_2_U (LitReal x@@13)))) )))
(assert  (and (= (Ctor charType) 14) (forall ((arg0@@31 Int) ) (! (= (type (|char#FromInt| arg0@@31)) charType) :qid |funType:char#FromInt| :pattern ( (|char#FromInt| arg0@@31)) ))))
(assert (forall ((ch T@U) ) (!  (=> (= (type ch) charType) (and (and (= (|char#FromInt| (|char#ToInt| ch)) ch) (<= 0 (|char#ToInt| ch))) (< (|char#ToInt| ch) 65536))) :qid |DafnyPreludebpl.107:15| :skolemid |368| :pattern ( (|char#ToInt| ch)) )))
(assert (forall ((n Int) ) (!  (=> (and (<= 0 n) (< n 65536)) (= (|char#ToInt| (|char#FromInt| n)) n)) :qid |DafnyPreludebpl.111:15| :skolemid |369| :pattern ( (|char#FromInt| n)) )))
(assert (forall ((arg0@@32 T@U) (arg1@@1 T@U) ) (! (= (type (|char#Plus| arg0@@32 arg1@@1)) charType) :qid |funType:char#Plus| :pattern ( (|char#Plus| arg0@@32 arg1@@1)) )))
(assert (forall ((a T@U) (b T@U) ) (!  (=> (and (= (type a) charType) (= (type b) charType)) (= (|char#Plus| a b) (|char#FromInt| (+ (|char#ToInt| a) (|char#ToInt| b))))) :qid |DafnyPreludebpl.117:15| :skolemid |370| :pattern ( (|char#Plus| a b)) )))
(assert (forall ((arg0@@33 T@U) (arg1@@2 T@U) ) (! (= (type (|char#Minus| arg0@@33 arg1@@2)) charType) :qid |funType:char#Minus| :pattern ( (|char#Minus| arg0@@33 arg1@@2)) )))
(assert (forall ((a@@0 T@U) (b@@0 T@U) ) (!  (=> (and (= (type a@@0) charType) (= (type b@@0) charType)) (= (|char#Minus| a@@0 b@@0) (|char#FromInt| (- (|char#ToInt| a@@0) (|char#ToInt| b@@0))))) :qid |DafnyPreludebpl.120:15| :skolemid |371| :pattern ( (|char#Minus| a@@0 b@@0)) )))
(assert (forall ((T@@0 T@T) (arg0@@34 T@U) ) (! (= (type ($Unbox T@@0 arg0@@34)) T@@0) :qid |funType:$Unbox| :pattern ( ($Unbox T@@0 arg0@@34)) )))
(assert (forall ((x@@14 T@U) ) (! (let ((T@@1 (type x@@14))) (= ($Unbox T@@1 ($Box x@@14)) x@@14)) :qid |DafnyPreludebpl.141:18| :skolemid |372| :pattern ( ($Box x@@14)) )))
(assert (forall ((bx T@U) ) (!  (=> (and (= (type bx) BoxType) ($IsBox bx TInt)) (and (= ($Box ($Unbox intType bx)) bx) ($Is ($Unbox intType bx) TInt))) :qid |DafnyPreludebpl.143:15| :skolemid |373| :pattern ( ($IsBox bx TInt)) )))
(assert (forall ((bx@@0 T@U) ) (!  (=> (and (= (type bx@@0) BoxType) ($IsBox bx@@0 TReal)) (and (= ($Box ($Unbox realType bx@@0)) bx@@0) ($Is ($Unbox realType bx@@0) TReal))) :qid |DafnyPreludebpl.146:15| :skolemid |374| :pattern ( ($IsBox bx@@0 TReal)) )))
(assert (forall ((bx@@1 T@U) ) (!  (=> (and (= (type bx@@1) BoxType) ($IsBox bx@@1 TBool)) (and (= ($Box ($Unbox boolType bx@@1)) bx@@1) ($Is ($Unbox boolType bx@@1) TBool))) :qid |DafnyPreludebpl.149:15| :skolemid |375| :pattern ( ($IsBox bx@@1 TBool)) )))
(assert (forall ((bx@@2 T@U) ) (!  (=> (and (= (type bx@@2) BoxType) ($IsBox bx@@2 TChar)) (and (= ($Box ($Unbox charType bx@@2)) bx@@2) ($Is ($Unbox charType bx@@2) TChar))) :qid |DafnyPreludebpl.152:15| :skolemid |376| :pattern ( ($IsBox bx@@2 TChar)) )))
(assert  (and (and (and (and (and (and (forall ((arg0@@35 T@T) (arg1@@3 T@T) ) (! (= (Ctor (MapType0Type arg0@@35 arg1@@3)) 15) :qid |ctor:MapType0Type| )) (forall ((arg0@@36 T@T) (arg1@@4 T@T) ) (! (= (MapType0TypeInv0 (MapType0Type arg0@@36 arg1@@4)) arg0@@36) :qid |typeInv:MapType0TypeInv0| :pattern ( (MapType0Type arg0@@36 arg1@@4)) ))) (forall ((arg0@@37 T@T) (arg1@@5 T@T) ) (! (= (MapType0TypeInv1 (MapType0Type arg0@@37 arg1@@5)) arg1@@5) :qid |typeInv:MapType0TypeInv1| :pattern ( (MapType0Type arg0@@37 arg1@@5)) ))) (forall ((arg0@@38 T@U) (arg1@@6 T@U) ) (! (let ((aVar1 (MapType0TypeInv1 (type arg0@@38)))) (= (type (MapType0Select arg0@@38 arg1@@6)) aVar1)) :qid |funType:MapType0Select| :pattern ( (MapType0Select arg0@@38 arg1@@6)) ))) (forall ((arg0@@39 T@U) (arg1@@7 T@U) (arg2 T@U) ) (! (let ((aVar1@@0 (type arg2))) (let ((aVar0 (type arg1@@7))) (= (type (MapType0Store arg0@@39 arg1@@7 arg2)) (MapType0Type aVar0 aVar1@@0)))) :qid |funType:MapType0Store| :pattern ( (MapType0Store arg0@@39 arg1@@7 arg2)) ))) (forall ((m T@U) (x0 T@U) (val T@U) ) (! (let ((aVar1@@1 (MapType0TypeInv1 (type m)))) (=> (= (type val) aVar1@@1) (= (MapType0Select (MapType0Store m x0 val) x0) val))) :qid |mapAx0:MapType0Select| :weight 0 ))) (and (forall ((val@@0 T@U) (m@@0 T@U) (x0@@0 T@U) (y0 T@U) ) (!  (or (= x0@@0 y0) (= (MapType0Select (MapType0Store m@@0 x0@@0 val@@0) y0) (MapType0Select m@@0 y0))) :qid |mapAx1:MapType0Select:0| :weight 0 )) (forall ((val@@1 T@U) (m@@1 T@U) (x0@@1 T@U) (y0@@0 T@U) ) (!  (or true (= (MapType0Select (MapType0Store m@@1 x0@@1 val@@1) y0@@0) (MapType0Select m@@1 y0@@0))) :qid |mapAx2:MapType0Select| :weight 0 )))))
(assert (forall ((bx@@3 T@U) ) (!  (=> (and (= (type bx@@3) BoxType) ($IsBox bx@@3 (TBitvector 0))) (and (= ($Box ($Unbox intType bx@@3)) bx@@3) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@3) (TBitvector 0)))) :qid |DafnyPreludebpl.158:15| :skolemid |377| :pattern ( ($IsBox bx@@3 (TBitvector 0))) )))
(assert (forall ((bx@@4 T@U) (t@@13 T@U) ) (!  (=> (and (and (= (type bx@@4) BoxType) (= (type t@@13) TyType)) ($IsBox bx@@4 (TSet t@@13))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@4)) bx@@4) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@4) (TSet t@@13)))) :qid |DafnyPreludebpl.162:15| :skolemid |378| :pattern ( ($IsBox bx@@4 (TSet t@@13))) )))
(assert (forall ((bx@@5 T@U) (t@@14 T@U) ) (!  (=> (and (and (= (type bx@@5) BoxType) (= (type t@@14) TyType)) ($IsBox bx@@5 (TISet t@@14))) (and (= ($Box ($Unbox (MapType0Type BoxType boolType) bx@@5)) bx@@5) ($Is ($Unbox (MapType0Type BoxType boolType) bx@@5) (TISet t@@14)))) :qid |DafnyPreludebpl.165:15| :skolemid |379| :pattern ( ($IsBox bx@@5 (TISet t@@14))) )))
(assert (forall ((bx@@6 T@U) (t@@15 T@U) ) (!  (=> (and (and (= (type bx@@6) BoxType) (= (type t@@15) TyType)) ($IsBox bx@@6 (TMultiSet t@@15))) (and (= ($Box ($Unbox (MapType0Type BoxType intType) bx@@6)) bx@@6) ($Is ($Unbox (MapType0Type BoxType intType) bx@@6) (TMultiSet t@@15)))) :qid |DafnyPreludebpl.168:15| :skolemid |380| :pattern ( ($IsBox bx@@6 (TMultiSet t@@15))) )))
(assert  (and (forall ((arg0@@40 T@T) ) (! (= (Ctor (SeqType arg0@@40)) 16) :qid |ctor:SeqType| )) (forall ((arg0@@41 T@T) ) (! (= (SeqTypeInv0 (SeqType arg0@@41)) arg0@@41) :qid |typeInv:SeqTypeInv0| :pattern ( (SeqType arg0@@41)) ))))
(assert (forall ((bx@@7 T@U) (t@@16 T@U) ) (!  (=> (and (and (= (type bx@@7) BoxType) (= (type t@@16) TyType)) ($IsBox bx@@7 (TSeq t@@16))) (and (= ($Box ($Unbox (SeqType BoxType) bx@@7)) bx@@7) ($Is ($Unbox (SeqType BoxType) bx@@7) (TSeq t@@16)))) :qid |DafnyPreludebpl.171:15| :skolemid |381| :pattern ( ($IsBox bx@@7 (TSeq t@@16))) )))
(assert  (and (and (forall ((arg0@@42 T@T) (arg1@@8 T@T) ) (! (= (Ctor (MapType arg0@@42 arg1@@8)) 17) :qid |ctor:MapType| )) (forall ((arg0@@43 T@T) (arg1@@9 T@T) ) (! (= (MapTypeInv0 (MapType arg0@@43 arg1@@9)) arg0@@43) :qid |typeInv:MapTypeInv0| :pattern ( (MapType arg0@@43 arg1@@9)) ))) (forall ((arg0@@44 T@T) (arg1@@10 T@T) ) (! (= (MapTypeInv1 (MapType arg0@@44 arg1@@10)) arg1@@10) :qid |typeInv:MapTypeInv1| :pattern ( (MapType arg0@@44 arg1@@10)) ))))
(assert (forall ((bx@@8 T@U) (s T@U) (t@@17 T@U) ) (!  (=> (and (and (and (= (type bx@@8) BoxType) (= (type s) TyType)) (= (type t@@17) TyType)) ($IsBox bx@@8 (TMap s t@@17))) (and (= ($Box ($Unbox (MapType BoxType BoxType) bx@@8)) bx@@8) ($Is ($Unbox (MapType BoxType BoxType) bx@@8) (TMap s t@@17)))) :qid |DafnyPreludebpl.174:15| :skolemid |382| :pattern ( ($IsBox bx@@8 (TMap s t@@17))) )))
(assert  (and (and (forall ((arg0@@45 T@T) (arg1@@11 T@T) ) (! (= (Ctor (IMapType arg0@@45 arg1@@11)) 18) :qid |ctor:IMapType| )) (forall ((arg0@@46 T@T) (arg1@@12 T@T) ) (! (= (IMapTypeInv0 (IMapType arg0@@46 arg1@@12)) arg0@@46) :qid |typeInv:IMapTypeInv0| :pattern ( (IMapType arg0@@46 arg1@@12)) ))) (forall ((arg0@@47 T@T) (arg1@@13 T@T) ) (! (= (IMapTypeInv1 (IMapType arg0@@47 arg1@@13)) arg1@@13) :qid |typeInv:IMapTypeInv1| :pattern ( (IMapType arg0@@47 arg1@@13)) ))))
(assert (forall ((bx@@9 T@U) (s@@0 T@U) (t@@18 T@U) ) (!  (=> (and (and (and (= (type bx@@9) BoxType) (= (type s@@0) TyType)) (= (type t@@18) TyType)) ($IsBox bx@@9 (TIMap s@@0 t@@18))) (and (= ($Box ($Unbox (IMapType BoxType BoxType) bx@@9)) bx@@9) ($Is ($Unbox (IMapType BoxType BoxType) bx@@9) (TIMap s@@0 t@@18)))) :qid |DafnyPreludebpl.177:15| :skolemid |383| :pattern ( ($IsBox bx@@9 (TIMap s@@0 t@@18))) )))
(assert (forall ((v T@U) (t@@19 T@U) ) (!  (=> (= (type t@@19) TyType) (= ($IsBox ($Box v) t@@19) ($Is v t@@19))) :qid |DafnyPreludebpl.181:18| :skolemid |384| :pattern ( ($IsBox ($Box v) t@@19)) )))
(assert  (and (and (and (and (and (forall ((arg0@@48 T@U) (arg1@@14 T@U) ) (! (let ((alpha@@1 (FieldTypeInv0 (type arg1@@14)))) (= (type (MapType1Select arg0@@48 arg1@@14)) alpha@@1)) :qid |funType:MapType1Select| :pattern ( (MapType1Select arg0@@48 arg1@@14)) )) (= (Ctor MapType1Type) 19)) (forall ((arg0@@49 T@U) (arg1@@15 T@U) (arg2@@0 T@U) ) (! (= (type (MapType1Store arg0@@49 arg1@@15 arg2@@0)) MapType1Type) :qid |funType:MapType1Store| :pattern ( (MapType1Store arg0@@49 arg1@@15 arg2@@0)) ))) (forall ((m@@2 T@U) (x0@@2 T@U) (val@@2 T@U) ) (! (let ((alpha@@2 (FieldTypeInv0 (type x0@@2)))) (=> (= (type val@@2) alpha@@2) (= (MapType1Select (MapType1Store m@@2 x0@@2 val@@2) x0@@2) val@@2))) :qid |mapAx0:MapType1Select| :weight 0 ))) (and (forall ((val@@3 T@U) (m@@3 T@U) (x0@@3 T@U) (y0@@1 T@U) ) (!  (or (= x0@@3 y0@@1) (= (MapType1Select (MapType1Store m@@3 x0@@3 val@@3) y0@@1) (MapType1Select m@@3 y0@@1))) :qid |mapAx1:MapType1Select:0| :weight 0 )) (forall ((val@@4 T@U) (m@@4 T@U) (x0@@4 T@U) (y0@@2 T@U) ) (!  (or true (= (MapType1Select (MapType1Store m@@4 x0@@4 val@@4) y0@@2) (MapType1Select m@@4 y0@@2))) :qid |mapAx2:MapType1Select| :weight 0 )))) (= (Ctor refType) 20)))
(assert (forall ((v@@0 T@U) (t@@20 T@U) (h T@U) ) (!  (=> (and (= (type t@@20) TyType) (= (type h) (MapType0Type refType MapType1Type))) (= ($IsAllocBox ($Box v@@0) t@@20 h) ($IsAlloc v@@0 t@@20 h))) :qid |DafnyPreludebpl.184:18| :skolemid |385| :pattern ( ($IsAllocBox ($Box v@@0) t@@20 h)) )))
(assert (forall ((v@@1 T@U) ) (!  (=> (= (type v@@1) intType) ($Is v@@1 TInt)) :qid |DafnyPreludebpl.202:14| :skolemid |386| :pattern ( ($Is v@@1 TInt)) )))
(assert (forall ((v@@2 T@U) ) (!  (=> (= (type v@@2) realType) ($Is v@@2 TReal)) :qid |DafnyPreludebpl.203:14| :skolemid |387| :pattern ( ($Is v@@2 TReal)) )))
(assert (forall ((v@@3 T@U) ) (!  (=> (= (type v@@3) boolType) ($Is v@@3 TBool)) :qid |DafnyPreludebpl.204:14| :skolemid |388| :pattern ( ($Is v@@3 TBool)) )))
(assert (forall ((v@@4 T@U) ) (!  (=> (= (type v@@4) charType) ($Is v@@4 TChar)) :qid |DafnyPreludebpl.205:14| :skolemid |389| :pattern ( ($Is v@@4 TChar)) )))
(assert (forall ((v@@5 T@U) ) (!  (=> (= (type v@@5) BoxType) ($Is v@@5 TORDINAL)) :qid |DafnyPreludebpl.206:14| :skolemid |390| :pattern ( ($Is v@@5 TORDINAL)) )))
(assert (forall ((h@@0 T@U) (v@@6 T@U) ) (!  (=> (and (= (type h@@0) (MapType0Type refType MapType1Type)) (= (type v@@6) intType)) ($IsAlloc v@@6 TInt h@@0)) :qid |DafnyPreludebpl.208:14| :skolemid |391| :pattern ( ($IsAlloc v@@6 TInt h@@0)) )))
(assert (forall ((h@@1 T@U) (v@@7 T@U) ) (!  (=> (and (= (type h@@1) (MapType0Type refType MapType1Type)) (= (type v@@7) realType)) ($IsAlloc v@@7 TReal h@@1)) :qid |DafnyPreludebpl.209:14| :skolemid |392| :pattern ( ($IsAlloc v@@7 TReal h@@1)) )))
(assert (forall ((h@@2 T@U) (v@@8 T@U) ) (!  (=> (and (= (type h@@2) (MapType0Type refType MapType1Type)) (= (type v@@8) boolType)) ($IsAlloc v@@8 TBool h@@2)) :qid |DafnyPreludebpl.210:14| :skolemid |393| :pattern ( ($IsAlloc v@@8 TBool h@@2)) )))
(assert (forall ((h@@3 T@U) (v@@9 T@U) ) (!  (=> (and (= (type h@@3) (MapType0Type refType MapType1Type)) (= (type v@@9) charType)) ($IsAlloc v@@9 TChar h@@3)) :qid |DafnyPreludebpl.211:14| :skolemid |394| :pattern ( ($IsAlloc v@@9 TChar h@@3)) )))
(assert (forall ((h@@4 T@U) (v@@10 T@U) ) (!  (=> (and (= (type h@@4) (MapType0Type refType MapType1Type)) (= (type v@@10) BoxType)) ($IsAlloc v@@10 TORDINAL h@@4)) :qid |DafnyPreludebpl.212:14| :skolemid |395| :pattern ( ($IsAlloc v@@10 TORDINAL h@@4)) )))
(assert (forall ((v@@11 T@U) ) (!  (=> (= (type v@@11) intType) ($Is v@@11 (TBitvector 0))) :qid |DafnyPreludebpl.216:15| :skolemid |396| :pattern ( ($Is v@@11 (TBitvector 0))) )))
(assert (forall ((v@@12 T@U) (h@@5 T@U) ) (!  (=> (and (= (type v@@12) intType) (= (type h@@5) (MapType0Type refType MapType1Type))) ($IsAlloc v@@12 (TBitvector 0) h@@5)) :qid |DafnyPreludebpl.217:15| :skolemid |397| :pattern ( ($IsAlloc v@@12 (TBitvector 0) h@@5)) )))
(assert (forall ((v@@13 T@U) (t0 T@U) ) (!  (=> (and (= (type v@@13) (MapType0Type BoxType boolType)) (= (type t0) TyType)) (= ($Is v@@13 (TSet t0)) (forall ((bx@@10 T@U) ) (!  (=> (and (= (type bx@@10) BoxType) (U_2_bool (MapType0Select v@@13 bx@@10))) ($IsBox bx@@10 t0)) :qid |DafnyPreludebpl.221:11| :skolemid |398| :pattern ( (MapType0Select v@@13 bx@@10)) )))) :qid |DafnyPreludebpl.219:15| :skolemid |399| :pattern ( ($Is v@@13 (TSet t0))) )))
(assert (forall ((v@@14 T@U) (t0@@0 T@U) ) (!  (=> (and (= (type v@@14) (MapType0Type BoxType boolType)) (= (type t0@@0) TyType)) (= ($Is v@@14 (TISet t0@@0)) (forall ((bx@@11 T@U) ) (!  (=> (and (= (type bx@@11) BoxType) (U_2_bool (MapType0Select v@@14 bx@@11))) ($IsBox bx@@11 t0@@0)) :qid |DafnyPreludebpl.225:11| :skolemid |400| :pattern ( (MapType0Select v@@14 bx@@11)) )))) :qid |DafnyPreludebpl.223:15| :skolemid |401| :pattern ( ($Is v@@14 (TISet t0@@0))) )))
(assert (forall ((v@@15 T@U) (t0@@1 T@U) ) (!  (=> (and (= (type v@@15) (MapType0Type BoxType intType)) (= (type t0@@1) TyType)) (= ($Is v@@15 (TMultiSet t0@@1)) (forall ((bx@@12 T@U) ) (!  (=> (and (= (type bx@@12) BoxType) (< 0 (U_2_int (MapType0Select v@@15 bx@@12)))) ($IsBox bx@@12 t0@@1)) :qid |DafnyPreludebpl.229:11| :skolemid |402| :pattern ( (MapType0Select v@@15 bx@@12)) )))) :qid |DafnyPreludebpl.227:15| :skolemid |403| :pattern ( ($Is v@@15 (TMultiSet t0@@1))) )))
(assert (forall ((v@@16 T@U) (t0@@2 T@U) ) (!  (=> (and (and (= (type v@@16) (MapType0Type BoxType intType)) (= (type t0@@2) TyType)) ($Is v@@16 (TMultiSet t0@@2))) ($IsGoodMultiSet v@@16)) :qid |DafnyPreludebpl.231:15| :skolemid |404| :pattern ( ($Is v@@16 (TMultiSet t0@@2))) )))
(assert (forall ((arg0@@50 T@U) (arg1@@16 Int) ) (! (let ((T@@2 (SeqTypeInv0 (type arg0@@50)))) (= (type (|Seq#Index| arg0@@50 arg1@@16)) T@@2)) :qid |funType:Seq#Index| :pattern ( (|Seq#Index| arg0@@50 arg1@@16)) )))
(assert (forall ((v@@17 T@U) (t0@@3 T@U) ) (!  (=> (and (= (type v@@17) (SeqType BoxType)) (= (type t0@@3) TyType)) (= ($Is v@@17 (TSeq t0@@3)) (forall ((i Int) ) (!  (=> (and (<= 0 i) (< i (|Seq#Length| v@@17))) ($IsBox (|Seq#Index| v@@17 i) t0@@3)) :qid |DafnyPreludebpl.235:11| :skolemid |405| :pattern ( (|Seq#Index| v@@17 i)) )))) :qid |DafnyPreludebpl.233:15| :skolemid |406| :pattern ( ($Is v@@17 (TSeq t0@@3))) )))
(assert (forall ((v@@18 T@U) (t0@@4 T@U) (h@@6 T@U) ) (!  (=> (and (and (= (type v@@18) (MapType0Type BoxType boolType)) (= (type t0@@4) TyType)) (= (type h@@6) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@18 (TSet t0@@4) h@@6) (forall ((bx@@13 T@U) ) (!  (=> (and (= (type bx@@13) BoxType) (U_2_bool (MapType0Select v@@18 bx@@13))) ($IsAllocBox bx@@13 t0@@4 h@@6)) :qid |DafnyPreludebpl.240:11| :skolemid |407| :pattern ( (MapType0Select v@@18 bx@@13)) )))) :qid |DafnyPreludebpl.238:15| :skolemid |408| :pattern ( ($IsAlloc v@@18 (TSet t0@@4) h@@6)) )))
(assert (forall ((v@@19 T@U) (t0@@5 T@U) (h@@7 T@U) ) (!  (=> (and (and (= (type v@@19) (MapType0Type BoxType boolType)) (= (type t0@@5) TyType)) (= (type h@@7) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@19 (TISet t0@@5) h@@7) (forall ((bx@@14 T@U) ) (!  (=> (and (= (type bx@@14) BoxType) (U_2_bool (MapType0Select v@@19 bx@@14))) ($IsAllocBox bx@@14 t0@@5 h@@7)) :qid |DafnyPreludebpl.244:11| :skolemid |409| :pattern ( (MapType0Select v@@19 bx@@14)) )))) :qid |DafnyPreludebpl.242:15| :skolemid |410| :pattern ( ($IsAlloc v@@19 (TISet t0@@5) h@@7)) )))
(assert (forall ((v@@20 T@U) (t0@@6 T@U) (h@@8 T@U) ) (!  (=> (and (and (= (type v@@20) (MapType0Type BoxType intType)) (= (type t0@@6) TyType)) (= (type h@@8) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@20 (TMultiSet t0@@6) h@@8) (forall ((bx@@15 T@U) ) (!  (=> (and (= (type bx@@15) BoxType) (< 0 (U_2_int (MapType0Select v@@20 bx@@15)))) ($IsAllocBox bx@@15 t0@@6 h@@8)) :qid |DafnyPreludebpl.248:11| :skolemid |411| :pattern ( (MapType0Select v@@20 bx@@15)) )))) :qid |DafnyPreludebpl.246:15| :skolemid |412| :pattern ( ($IsAlloc v@@20 (TMultiSet t0@@6) h@@8)) )))
(assert (forall ((v@@21 T@U) (t0@@7 T@U) (h@@9 T@U) ) (!  (=> (and (and (= (type v@@21) (SeqType BoxType)) (= (type t0@@7) TyType)) (= (type h@@9) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@21 (TSeq t0@@7) h@@9) (forall ((i@@0 Int) ) (!  (=> (and (<= 0 i@@0) (< i@@0 (|Seq#Length| v@@21))) ($IsAllocBox (|Seq#Index| v@@21 i@@0) t0@@7 h@@9)) :qid |DafnyPreludebpl.252:11| :skolemid |413| :pattern ( (|Seq#Index| v@@21 i@@0)) )))) :qid |DafnyPreludebpl.250:15| :skolemid |414| :pattern ( ($IsAlloc v@@21 (TSeq t0@@7) h@@9)) )))
(assert  (and (forall ((arg0@@51 T@U) ) (! (let ((V (MapTypeInv1 (type arg0@@51)))) (let ((U (MapTypeInv0 (type arg0@@51)))) (= (type (|Map#Elements| arg0@@51)) (MapType0Type U V)))) :qid |funType:Map#Elements| :pattern ( (|Map#Elements| arg0@@51)) )) (forall ((arg0@@52 T@U) ) (! (let ((U@@0 (MapTypeInv0 (type arg0@@52)))) (= (type (|Map#Domain| arg0@@52)) (MapType0Type U@@0 boolType))) :qid |funType:Map#Domain| :pattern ( (|Map#Domain| arg0@@52)) ))))
(assert (forall ((v@@22 T@U) (t0@@8 T@U) (t1 T@U) ) (!  (=> (and (and (= (type v@@22) (MapType BoxType BoxType)) (= (type t0@@8) TyType)) (= (type t1) TyType)) (= ($Is v@@22 (TMap t0@@8 t1)) (forall ((bx@@16 T@U) ) (!  (=> (and (= (type bx@@16) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@22) bx@@16))) (and ($IsBox (MapType0Select (|Map#Elements| v@@22) bx@@16) t1) ($IsBox bx@@16 t0@@8))) :qid |DafnyPreludebpl.259:19| :skolemid |415| :pattern ( (MapType0Select (|Map#Elements| v@@22) bx@@16)) :pattern ( (MapType0Select (|Map#Domain| v@@22) bx@@16)) )))) :qid |DafnyPreludebpl.256:15| :skolemid |416| :pattern ( ($Is v@@22 (TMap t0@@8 t1))) )))
(assert (forall ((v@@23 T@U) (t0@@9 T@U) (t1@@0 T@U) (h@@10 T@U) ) (!  (=> (and (and (and (= (type v@@23) (MapType BoxType BoxType)) (= (type t0@@9) TyType)) (= (type t1@@0) TyType)) (= (type h@@10) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@23 (TMap t0@@9 t1@@0) h@@10) (forall ((bx@@17 T@U) ) (!  (=> (and (= (type bx@@17) BoxType) (U_2_bool (MapType0Select (|Map#Domain| v@@23) bx@@17))) (and ($IsAllocBox (MapType0Select (|Map#Elements| v@@23) bx@@17) t1@@0 h@@10) ($IsAllocBox bx@@17 t0@@9 h@@10))) :qid |DafnyPreludebpl.267:19| :skolemid |417| :pattern ( (MapType0Select (|Map#Elements| v@@23) bx@@17)) :pattern ( (MapType0Select (|Map#Domain| v@@23) bx@@17)) )))) :qid |DafnyPreludebpl.264:15| :skolemid |418| :pattern ( ($IsAlloc v@@23 (TMap t0@@9 t1@@0) h@@10)) )))
(assert  (and (and (forall ((arg0@@53 T@U) ) (! (let ((V@@0 (MapTypeInv1 (type arg0@@53)))) (= (type (|Map#Values| arg0@@53)) (MapType0Type V@@0 boolType))) :qid |funType:Map#Values| :pattern ( (|Map#Values| arg0@@53)) )) (forall ((arg0@@54 T@U) ) (! (= (type (|Map#Items| arg0@@54)) (MapType0Type BoxType boolType)) :qid |funType:Map#Items| :pattern ( (|Map#Items| arg0@@54)) ))) (forall ((arg0@@55 T@U) (arg1@@17 T@U) ) (! (= (type (Tclass._System.Tuple2 arg0@@55 arg1@@17)) TyType) :qid |funType:Tclass._System.Tuple2| :pattern ( (Tclass._System.Tuple2 arg0@@55 arg1@@17)) ))))
(assert (forall ((v@@24 T@U) (t0@@10 T@U) (t1@@1 T@U) ) (!  (=> (and (and (and (= (type v@@24) (MapType BoxType BoxType)) (= (type t0@@10) TyType)) (= (type t1@@1) TyType)) ($Is v@@24 (TMap t0@@10 t1@@1))) (and (and ($Is (|Map#Domain| v@@24) (TSet t0@@10)) ($Is (|Map#Values| v@@24) (TSet t1@@1))) ($Is (|Map#Items| v@@24) (TSet (Tclass._System.Tuple2 t0@@10 t1@@1))))) :qid |DafnyPreludebpl.272:15| :skolemid |419| :pattern ( ($Is v@@24 (TMap t0@@10 t1@@1))) )))
(assert  (and (forall ((arg0@@56 T@U) ) (! (let ((V@@1 (IMapTypeInv1 (type arg0@@56)))) (let ((U@@1 (IMapTypeInv0 (type arg0@@56)))) (= (type (|IMap#Elements| arg0@@56)) (MapType0Type U@@1 V@@1)))) :qid |funType:IMap#Elements| :pattern ( (|IMap#Elements| arg0@@56)) )) (forall ((arg0@@57 T@U) ) (! (let ((U@@2 (IMapTypeInv0 (type arg0@@57)))) (= (type (|IMap#Domain| arg0@@57)) (MapType0Type U@@2 boolType))) :qid |funType:IMap#Domain| :pattern ( (|IMap#Domain| arg0@@57)) ))))
(assert (forall ((v@@25 T@U) (t0@@11 T@U) (t1@@2 T@U) ) (!  (=> (and (and (= (type v@@25) (IMapType BoxType BoxType)) (= (type t0@@11) TyType)) (= (type t1@@2) TyType)) (= ($Is v@@25 (TIMap t0@@11 t1@@2)) (forall ((bx@@18 T@U) ) (!  (=> (and (= (type bx@@18) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@25) bx@@18))) (and ($IsBox (MapType0Select (|IMap#Elements| v@@25) bx@@18) t1@@2) ($IsBox bx@@18 t0@@11))) :qid |DafnyPreludebpl.282:19| :skolemid |420| :pattern ( (MapType0Select (|IMap#Elements| v@@25) bx@@18)) :pattern ( (MapType0Select (|IMap#Domain| v@@25) bx@@18)) )))) :qid |DafnyPreludebpl.279:15| :skolemid |421| :pattern ( ($Is v@@25 (TIMap t0@@11 t1@@2))) )))
(assert (forall ((v@@26 T@U) (t0@@12 T@U) (t1@@3 T@U) (h@@11 T@U) ) (!  (=> (and (and (and (= (type v@@26) (IMapType BoxType BoxType)) (= (type t0@@12) TyType)) (= (type t1@@3) TyType)) (= (type h@@11) (MapType0Type refType MapType1Type))) (= ($IsAlloc v@@26 (TIMap t0@@12 t1@@3) h@@11) (forall ((bx@@19 T@U) ) (!  (=> (and (= (type bx@@19) BoxType) (U_2_bool (MapType0Select (|IMap#Domain| v@@26) bx@@19))) (and ($IsAllocBox (MapType0Select (|IMap#Elements| v@@26) bx@@19) t1@@3 h@@11) ($IsAllocBox bx@@19 t0@@12 h@@11))) :qid |DafnyPreludebpl.290:19| :skolemid |422| :pattern ( (MapType0Select (|IMap#Elements| v@@26) bx@@19)) :pattern ( (MapType0Select (|IMap#Domain| v@@26) bx@@19)) )))) :qid |DafnyPreludebpl.287:15| :skolemid |423| :pattern ( ($IsAlloc v@@26 (TIMap t0@@12 t1@@3) h@@11)) )))
(assert  (and (forall ((arg0@@58 T@U) ) (! (let ((V@@2 (IMapTypeInv1 (type arg0@@58)))) (= (type (|IMap#Values| arg0@@58)) (MapType0Type V@@2 boolType))) :qid |funType:IMap#Values| :pattern ( (|IMap#Values| arg0@@58)) )) (forall ((arg0@@59 T@U) ) (! (= (type (|IMap#Items| arg0@@59)) (MapType0Type BoxType boolType)) :qid |funType:IMap#Items| :pattern ( (|IMap#Items| arg0@@59)) ))))
(assert (forall ((v@@27 T@U) (t0@@13 T@U) (t1@@4 T@U) ) (!  (=> (and (and (and (= (type v@@27) (IMapType BoxType BoxType)) (= (type t0@@13) TyType)) (= (type t1@@4) TyType)) ($Is v@@27 (TIMap t0@@13 t1@@4))) (and (and ($Is (|IMap#Domain| v@@27) (TISet t0@@13)) ($Is (|IMap#Values| v@@27) (TISet t1@@4))) ($Is (|IMap#Items| v@@27) (TISet (Tclass._System.Tuple2 t0@@13 t1@@4))))) :qid |DafnyPreludebpl.295:15| :skolemid |424| :pattern ( ($Is v@@27 (TIMap t0@@13 t1@@4))) )))
(assert  (and (and (forall ((arg0@@60 T@U) (arg1@@18 T@U) ) (! (= (type (TypeTuple arg0@@60 arg1@@18)) ClassNameType) :qid |funType:TypeTuple| :pattern ( (TypeTuple arg0@@60 arg1@@18)) )) (forall ((arg0@@61 T@U) ) (! (= (type (TypeTupleCar arg0@@61)) ClassNameType) :qid |funType:TypeTupleCar| :pattern ( (TypeTupleCar arg0@@61)) ))) (forall ((arg0@@62 T@U) ) (! (= (type (TypeTupleCdr arg0@@62)) ClassNameType) :qid |funType:TypeTupleCdr| :pattern ( (TypeTupleCdr arg0@@62)) ))))
(assert (forall ((a@@1 T@U) (b@@1 T@U) ) (!  (=> (and (= (type a@@1) ClassNameType) (= (type b@@1) ClassNameType)) (and (= (TypeTupleCar (TypeTuple a@@1 b@@1)) a@@1) (= (TypeTupleCdr (TypeTuple a@@1 b@@1)) b@@1))) :qid |DafnyPreludebpl.322:15| :skolemid |425| :pattern ( (TypeTuple a@@1 b@@1)) )))
(assert (forall ((arg0@@63 T@U) ) (! (= (type (SetRef_to_SetBox arg0@@63)) (MapType0Type BoxType boolType)) :qid |funType:SetRef_to_SetBox| :pattern ( (SetRef_to_SetBox arg0@@63)) )))
(assert (forall ((s@@1 T@U) (bx@@20 T@U) ) (!  (=> (and (= (type s@@1) (MapType0Type refType boolType)) (= (type bx@@20) BoxType)) (= (U_2_bool (MapType0Select (SetRef_to_SetBox s@@1) bx@@20)) (U_2_bool (MapType0Select s@@1 ($Unbox refType bx@@20))))) :qid |DafnyPreludebpl.331:15| :skolemid |426| :pattern ( (MapType0Select (SetRef_to_SetBox s@@1) bx@@20)) )))
(assert (= (type Tclass._System.object?) TyType))
(assert (forall ((s@@2 T@U) ) (!  (=> (= (type s@@2) (MapType0Type refType boolType)) ($Is (SetRef_to_SetBox s@@2) (TSet Tclass._System.object?))) :qid |DafnyPreludebpl.333:15| :skolemid |427| :pattern ( (SetRef_to_SetBox s@@2)) )))
(assert (= (Ctor DatatypeTypeType) 21))
(assert (forall ((d T@U) ) (!  (=> (= (type d) DatatypeTypeType) (= (BoxRank ($Box d)) (DtRank d))) :qid |DafnyPreludebpl.352:15| :skolemid |428| :pattern ( (BoxRank ($Box d))) )))
(assert (forall ((o T@U) ) (!  (=> (= (type o) BoxType) (<= 0 (|ORD#Offset| o))) :qid |DafnyPreludebpl.367:15| :skolemid |429| :pattern ( (|ORD#Offset| o)) )))
(assert (forall ((arg0@@64 Int) ) (! (= (type (|ORD#FromNat| arg0@@64)) BoxType) :qid |funType:ORD#FromNat| :pattern ( (|ORD#FromNat| arg0@@64)) )))
(assert (forall ((n@@0 Int) ) (!  (=> (<= 0 n@@0) (and (|ORD#IsNat| (|ORD#FromNat| n@@0)) (= (|ORD#Offset| (|ORD#FromNat| n@@0)) n@@0))) :qid |DafnyPreludebpl.373:15| :skolemid |430| :pattern ( (|ORD#FromNat| n@@0)) )))
(assert (forall ((o@@0 T@U) ) (!  (=> (and (= (type o@@0) BoxType) (|ORD#IsNat| o@@0)) (= o@@0 (|ORD#FromNat| (|ORD#Offset| o@@0)))) :qid |DafnyPreludebpl.375:15| :skolemid |431| :pattern ( (|ORD#Offset| o@@0)) :pattern ( (|ORD#IsNat| o@@0)) )))
(assert (forall ((o@@1 T@U) (p T@U) ) (!  (=> (and (= (type o@@1) BoxType) (= (type p) BoxType)) (and (and (and (=> (|ORD#Less| o@@1 p) (not (= o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (not (|ORD#IsNat| p))) (|ORD#Less| o@@1 p))) (=> (and (|ORD#IsNat| o@@1) (|ORD#IsNat| p)) (= (|ORD#Less| o@@1 p) (< (|ORD#Offset| o@@1) (|ORD#Offset| p))))) (=> (and (|ORD#Less| o@@1 p) (|ORD#IsNat| p)) (|ORD#IsNat| o@@1)))) :qid |DafnyPreludebpl.379:15| :skolemid |432| :pattern ( (|ORD#Less| o@@1 p)) )))
(assert (forall ((o@@2 T@U) (p@@0 T@U) ) (!  (=> (and (= (type o@@2) BoxType) (= (type p@@0) BoxType)) (or (or (|ORD#Less| o@@2 p@@0) (= o@@2 p@@0)) (|ORD#Less| p@@0 o@@2))) :qid |DafnyPreludebpl.385:15| :skolemid |433| :pattern ( (|ORD#Less| o@@2 p@@0) (|ORD#Less| p@@0 o@@2)) )))
(assert (forall ((o@@3 T@U) (p@@1 T@U) (r T@U) ) (!  (=> (and (and (and (= (type o@@3) BoxType) (= (type p@@1) BoxType)) (= (type r) BoxType)) (and (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r))) (|ORD#Less| o@@3 r)) :qid |DafnyPreludebpl.388:15| :skolemid |434| :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| p@@1 r)) :pattern ( (|ORD#Less| o@@3 p@@1) (|ORD#Less| o@@3 r)) )))
(assert (forall ((o@@4 T@U) (p@@2 T@U) ) (!  (=> (and (= (type o@@4) BoxType) (= (type p@@2) BoxType)) (= (|ORD#LessThanLimit| o@@4 p@@2) (|ORD#Less| o@@4 p@@2))) :qid |DafnyPreludebpl.395:15| :skolemid |435| :pattern ( (|ORD#LessThanLimit| o@@4 p@@2)) )))
(assert (forall ((arg0@@65 T@U) (arg1@@19 T@U) ) (! (= (type (|ORD#Plus| arg0@@65 arg1@@19)) BoxType) :qid |funType:ORD#Plus| :pattern ( (|ORD#Plus| arg0@@65 arg1@@19)) )))
(assert (forall ((o@@5 T@U) (p@@3 T@U) ) (!  (=> (and (= (type o@@5) BoxType) (= (type p@@3) BoxType)) (and (=> (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (and (|ORD#IsNat| o@@5) (|ORD#IsNat| p@@3))) (=> (|ORD#IsNat| p@@3) (and (= (|ORD#IsNat| (|ORD#Plus| o@@5 p@@3)) (|ORD#IsNat| o@@5)) (= (|ORD#Offset| (|ORD#Plus| o@@5 p@@3)) (+ (|ORD#Offset| o@@5) (|ORD#Offset| p@@3))))))) :qid |DafnyPreludebpl.399:15| :skolemid |436| :pattern ( (|ORD#Plus| o@@5 p@@3)) )))
(assert (forall ((o@@6 T@U) (p@@4 T@U) ) (!  (=> (and (= (type o@@6) BoxType) (= (type p@@4) BoxType)) (and (or (= o@@6 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| o@@6 (|ORD#Plus| o@@6 p@@4))) (or (= p@@4 (|ORD#Plus| o@@6 p@@4)) (|ORD#Less| p@@4 (|ORD#Plus| o@@6 p@@4))))) :qid |DafnyPreludebpl.404:15| :skolemid |437| :pattern ( (|ORD#Plus| o@@6 p@@4)) )))
(assert (forall ((o@@7 T@U) (p@@5 T@U) ) (!  (=> (and (= (type o@@7) BoxType) (= (type p@@5) BoxType)) (and (=> (= o@@7 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) p@@5)) (=> (= p@@5 (|ORD#FromNat| 0)) (= (|ORD#Plus| o@@7 p@@5) o@@7)))) :qid |DafnyPreludebpl.407:15| :skolemid |438| :pattern ( (|ORD#Plus| o@@7 p@@5)) )))
(assert (forall ((arg0@@66 T@U) (arg1@@20 T@U) ) (! (= (type (|ORD#Minus| arg0@@66 arg1@@20)) BoxType) :qid |funType:ORD#Minus| :pattern ( (|ORD#Minus| arg0@@66 arg1@@20)) )))
(assert (forall ((o@@8 T@U) (p@@6 T@U) ) (!  (=> (and (and (= (type o@@8) BoxType) (= (type p@@6) BoxType)) (and (|ORD#IsNat| p@@6) (<= (|ORD#Offset| p@@6) (|ORD#Offset| o@@8)))) (and (= (|ORD#IsNat| (|ORD#Minus| o@@8 p@@6)) (|ORD#IsNat| o@@8)) (= (|ORD#Offset| (|ORD#Minus| o@@8 p@@6)) (- (|ORD#Offset| o@@8) (|ORD#Offset| p@@6))))) :qid |DafnyPreludebpl.412:15| :skolemid |439| :pattern ( (|ORD#Minus| o@@8 p@@6)) )))
(assert (forall ((o@@9 T@U) (p@@7 T@U) ) (!  (=> (and (and (= (type o@@9) BoxType) (= (type p@@7) BoxType)) (and (|ORD#IsNat| p@@7) (<= (|ORD#Offset| p@@7) (|ORD#Offset| o@@9)))) (or (and (= p@@7 (|ORD#FromNat| 0)) (= (|ORD#Minus| o@@9 p@@7) o@@9)) (and (not (= p@@7 (|ORD#FromNat| 0))) (|ORD#Less| (|ORD#Minus| o@@9 p@@7) o@@9)))) :qid |DafnyPreludebpl.416:15| :skolemid |440| :pattern ( (|ORD#Minus| o@@9 p@@7)) )))
(assert (forall ((o@@10 T@U) (m@@5 Int) (n@@1 Int) ) (!  (=> (= (type o@@10) BoxType) (=> (and (<= 0 m@@5) (<= 0 n@@1)) (= (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1)) (|ORD#Plus| o@@10 (|ORD#FromNat| (+ m@@5 n@@1)))))) :qid |DafnyPreludebpl.422:15| :skolemid |441| :pattern ( (|ORD#Plus| (|ORD#Plus| o@@10 (|ORD#FromNat| m@@5)) (|ORD#FromNat| n@@1))) )))
(assert (forall ((o@@11 T@U) (m@@6 Int) (n@@2 Int) ) (!  (=> (= (type o@@11) BoxType) (=> (and (and (<= 0 m@@6) (<= 0 n@@2)) (<= (+ m@@6 n@@2) (|ORD#Offset| o@@11))) (= (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2)) (|ORD#Minus| o@@11 (|ORD#FromNat| (+ m@@6 n@@2)))))) :qid |DafnyPreludebpl.427:15| :skolemid |442| :pattern ( (|ORD#Minus| (|ORD#Minus| o@@11 (|ORD#FromNat| m@@6)) (|ORD#FromNat| n@@2))) )))
(assert (forall ((o@@12 T@U) (m@@7 Int) (n@@3 Int) ) (!  (=> (= (type o@@12) BoxType) (=> (and (and (<= 0 m@@7) (<= 0 n@@3)) (<= n@@3 (+ (|ORD#Offset| o@@12) m@@7))) (and (=> (<= 0 (- m@@7 n@@3)) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Plus| o@@12 (|ORD#FromNat| (- m@@7 n@@3))))) (=> (<= (- m@@7 n@@3) 0) (= (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3)) (|ORD#Minus| o@@12 (|ORD#FromNat| (- n@@3 m@@7)))))))) :qid |DafnyPreludebpl.432:15| :skolemid |443| :pattern ( (|ORD#Minus| (|ORD#Plus| o@@12 (|ORD#FromNat| m@@7)) (|ORD#FromNat| n@@3))) )))
(assert (forall ((o@@13 T@U) (m@@8 Int) (n@@4 Int) ) (!  (=> (= (type o@@13) BoxType) (=> (and (and (<= 0 m@@8) (<= 0 n@@4)) (<= n@@4 (+ (|ORD#Offset| o@@13) m@@8))) (and (=> (<= 0 (- m@@8 n@@4)) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Minus| o@@13 (|ORD#FromNat| (- m@@8 n@@4))))) (=> (<= (- m@@8 n@@4) 0) (= (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4)) (|ORD#Plus| o@@13 (|ORD#FromNat| (- n@@4 m@@8)))))))) :qid |DafnyPreludebpl.438:15| :skolemid |444| :pattern ( (|ORD#Plus| (|ORD#Minus| o@@13 (|ORD#FromNat| m@@8)) (|ORD#FromNat| n@@4))) )))
(assert  (and (= (Ctor LayerTypeType) 22) (forall ((arg0@@67 T@U) (arg1@@21 T@U) ) (! (let ((A (MapType0TypeInv1 (type arg0@@67)))) (= (type (AtLayer arg0@@67 arg1@@21)) A)) :qid |funType:AtLayer| :pattern ( (AtLayer arg0@@67 arg1@@21)) ))))
(assert (forall ((f T@U) (ly T@U) ) (! (let ((A@@0 (MapType0TypeInv1 (type f)))) (=> (and (= (type f) (MapType0Type LayerTypeType A@@0)) (= (type ly) LayerTypeType)) (= (AtLayer f ly) (MapType0Select f ly)))) :qid |DafnyPreludebpl.462:18| :skolemid |445| :pattern ( (AtLayer f ly)) )))
(assert (forall ((arg0@@68 T@U) ) (! (= (type ($LS arg0@@68)) LayerTypeType) :qid |funType:$LS| :pattern ( ($LS arg0@@68)) )))
(assert (forall ((f@@0 T@U) (ly@@0 T@U) ) (! (let ((A@@1 (MapType0TypeInv1 (type f@@0)))) (=> (and (= (type f@@0) (MapType0Type LayerTypeType A@@1)) (= (type ly@@0) LayerTypeType)) (= (AtLayer f@@0 ($LS ly@@0)) (AtLayer f@@0 ly@@0)))) :qid |DafnyPreludebpl.463:18| :skolemid |446| :pattern ( (AtLayer f@@0 ($LS ly@@0))) )))
(assert (forall ((arg0@@69 Int) ) (! (= (type (IndexField arg0@@69)) (FieldType BoxType)) :qid |funType:IndexField| :pattern ( (IndexField arg0@@69)) )))
(assert (forall ((i@@1 Int) ) (! (= (FDim (IndexField i@@1)) 1) :qid |DafnyPreludebpl.474:15| :skolemid |447| :pattern ( (IndexField i@@1)) )))
(assert (forall ((i@@2 Int) ) (! (= (IndexField_Inverse (IndexField i@@2)) i@@2) :qid |DafnyPreludebpl.476:15| :skolemid |448| :pattern ( (IndexField i@@2)) )))
(assert (forall ((arg0@@70 T@U) (arg1@@22 Int) ) (! (= (type (MultiIndexField arg0@@70 arg1@@22)) (FieldType BoxType)) :qid |funType:MultiIndexField| :pattern ( (MultiIndexField arg0@@70 arg1@@22)) )))
(assert (forall ((f@@1 T@U) (i@@3 Int) ) (!  (=> (= (type f@@1) (FieldType BoxType)) (= (FDim (MultiIndexField f@@1 i@@3)) (+ (FDim f@@1) 1))) :qid |DafnyPreludebpl.479:15| :skolemid |449| :pattern ( (MultiIndexField f@@1 i@@3)) )))
(assert (forall ((arg0@@71 T@U) ) (! (let ((T@@3 (FieldTypeInv0 (type arg0@@71)))) (= (type (MultiIndexField_Inverse0 arg0@@71)) (FieldType T@@3))) :qid |funType:MultiIndexField_Inverse0| :pattern ( (MultiIndexField_Inverse0 arg0@@71)) )))
(assert (forall ((f@@2 T@U) (i@@4 Int) ) (!  (=> (= (type f@@2) (FieldType BoxType)) (and (= (MultiIndexField_Inverse0 (MultiIndexField f@@2 i@@4)) f@@2) (= (MultiIndexField_Inverse1 (MultiIndexField f@@2 i@@4)) i@@4))) :qid |DafnyPreludebpl.482:15| :skolemid |450| :pattern ( (MultiIndexField f@@2 i@@4)) )))
(assert  (and (and (forall ((alpha@@3 T@T) (arg0@@72 T@U) (arg1@@23 T@U) ) (! (= (type (FieldOfDecl alpha@@3 arg0@@72 arg1@@23)) (FieldType alpha@@3)) :qid |funType:FieldOfDecl| :pattern ( (FieldOfDecl alpha@@3 arg0@@72 arg1@@23)) )) (forall ((arg0@@73 T@U) ) (! (= (type (DeclType arg0@@73)) ClassNameType) :qid |funType:DeclType| :pattern ( (DeclType arg0@@73)) ))) (forall ((arg0@@74 T@U) ) (! (= (type (DeclName arg0@@74)) NameFamilyType) :qid |funType:DeclName| :pattern ( (DeclName arg0@@74)) ))))
(assert (forall ((cl T@U) (nm T@U) (T@@4 T@T) ) (!  (=> (and (= (type cl) ClassNameType) (= (type nm) NameFamilyType)) (and (= (DeclType (FieldOfDecl T@@4 cl nm)) cl) (= (DeclName (FieldOfDecl T@@4 cl nm)) nm))) :qid |DafnyPreludebpl.491:18| :skolemid |451| :pattern ( (FieldOfDecl T@@4 cl nm)) )))
(assert (forall ((h@@12 T@U) (k T@U) (v@@28 T@U) (t@@21 T@U) ) (!  (=> (and (and (and (and (= (type h@@12) (MapType0Type refType MapType1Type)) (= (type k) (MapType0Type refType MapType1Type))) (= (type t@@21) TyType)) ($HeapSucc h@@12 k)) ($IsAlloc v@@28 t@@21 h@@12)) ($IsAlloc v@@28 t@@21 k)) :qid |DafnyPreludebpl.504:17| :skolemid |452| :pattern ( ($HeapSucc h@@12 k) ($IsAlloc v@@28 t@@21 h@@12)) )))
(assert (forall ((h@@13 T@U) (k@@0 T@U) (bx@@21 T@U) (t@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@13) (MapType0Type refType MapType1Type)) (= (type k@@0) (MapType0Type refType MapType1Type))) (= (type bx@@21) BoxType)) (= (type t@@22) TyType)) ($HeapSucc h@@13 k@@0)) ($IsAllocBox bx@@21 t@@22 h@@13)) ($IsAllocBox bx@@21 t@@22 k@@0)) :qid |DafnyPreludebpl.507:14| :skolemid |453| :pattern ( ($HeapSucc h@@13 k@@0) ($IsAllocBox bx@@21 t@@22 h@@13)) )))
(assert (= (FDim alloc) 0))
(assert (= (DeclName alloc) allocName))
(assert  (not ($IsGhostField alloc)))
(assert (forall ((o@@14 T@U) ) (!  (=> (= (type o@@14) refType) (<= 0 (_System.array.Length o@@14))) :qid |DafnyPreludebpl.524:15| :skolemid |454| :no-pattern (type o@@14) :no-pattern (U_2_int o@@14) :no-pattern (U_2_bool o@@14) )))
(assert (forall ((x@@15 Real) ) (! (= (q@Int x@@15) (to_int x@@15)) :qid |DafnyPreludebpl.530:14| :skolemid |455| :pattern ( (q@Int x@@15)) )))
(assert (forall ((x@@16 Int) ) (! (= (q@Real x@@16) (to_real x@@16)) :qid |DafnyPreludebpl.531:15| :skolemid |456| :pattern ( (q@Real x@@16)) )))
(assert (forall ((i@@5 Int) ) (! (= (q@Int (q@Real i@@5)) i@@5) :qid |DafnyPreludebpl.532:15| :skolemid |457| :pattern ( (q@Int (q@Real i@@5))) )))
(assert (= (type $OneHeap) (MapType0Type refType MapType1Type)))
(assert ($IsGoodHeap $OneHeap))
(assert (forall ((h@@14 T@U) (r@@0 T@U) (f@@3 T@U) (x@@17 T@U) ) (! (let ((alpha@@4 (type x@@17))) (=> (and (and (and (= (type h@@14) (MapType0Type refType MapType1Type)) (= (type r@@0) refType)) (= (type f@@3) (FieldType alpha@@4))) ($IsGoodHeap (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17)))) ($HeapSucc h@@14 (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17))))) :qid |DafnyPreludebpl.554:22| :skolemid |458| :pattern ( (MapType0Store h@@14 r@@0 (MapType1Store (MapType0Select h@@14 r@@0) f@@3 x@@17))) )))
(assert (forall ((a@@2 T@U) (b@@2 T@U) (c T@U) ) (!  (=> (and (and (and (and (= (type a@@2) (MapType0Type refType MapType1Type)) (= (type b@@2) (MapType0Type refType MapType1Type))) (= (type c) (MapType0Type refType MapType1Type))) (not (= a@@2 c))) (and ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c))) ($HeapSucc a@@2 c)) :qid |DafnyPreludebpl.557:15| :skolemid |459| :pattern ( ($HeapSucc a@@2 b@@2) ($HeapSucc b@@2 c)) )))
(assert (forall ((h@@15 T@U) (k@@1 T@U) ) (!  (=> (and (and (= (type h@@15) (MapType0Type refType MapType1Type)) (= (type k@@1) (MapType0Type refType MapType1Type))) ($HeapSucc h@@15 k@@1)) (forall ((o@@15 T@U) ) (!  (=> (and (= (type o@@15) refType) (U_2_bool (MapType1Select (MapType0Select h@@15 o@@15) alloc))) (U_2_bool (MapType1Select (MapType0Select k@@1 o@@15) alloc))) :qid |DafnyPreludebpl.560:30| :skolemid |460| :pattern ( (MapType1Select (MapType0Select k@@1 o@@15) alloc)) ))) :qid |DafnyPreludebpl.559:15| :skolemid |461| :pattern ( ($HeapSucc h@@15 k@@1)) )))
(assert (forall ((h@@16 T@U) (k@@2 T@U) ) (!  (=> (and (and (= (type h@@16) (MapType0Type refType MapType1Type)) (= (type k@@2) (MapType0Type refType MapType1Type))) ($HeapSuccGhost h@@16 k@@2)) (and ($HeapSucc h@@16 k@@2) (forall ((o@@16 T@U) (f@@4 T@U) ) (! (let ((alpha@@5 (FieldTypeInv0 (type f@@4)))) (=> (and (and (= (type o@@16) refType) (= (type f@@4) (FieldType alpha@@5))) (not ($IsGhostField f@@4))) (= (MapType1Select (MapType0Select h@@16 o@@16) f@@4) (MapType1Select (MapType0Select k@@2 o@@16) f@@4)))) :qid |DafnyPreludebpl.566:20| :skolemid |462| :pattern ( (MapType1Select (MapType0Select k@@2 o@@16) f@@4)) )))) :qid |DafnyPreludebpl.563:15| :skolemid |463| :pattern ( ($HeapSuccGhost h@@16 k@@2)) )))
(assert (forall ((s@@3 T@U) ) (! (let ((T@@5 (MapType0TypeInv0 (type s@@3)))) (=> (= (type s@@3) (MapType0Type T@@5 boolType)) (<= 0 (|Set#Card| s@@3)))) :qid |DafnyPreludebpl.624:18| :skolemid |468| :pattern ( (|Set#Card| s@@3)) )))
(assert (forall ((T@@6 T@T) ) (! (= (type (|Set#Empty| T@@6)) (MapType0Type T@@6 boolType)) :qid |funType:Set#Empty| :pattern ( (|Set#Empty| T@@6)) )))
(assert (forall ((o@@17 T@U) ) (! (let ((T@@7 (type o@@17))) (not (U_2_bool (MapType0Select (|Set#Empty| T@@7) o@@17)))) :qid |DafnyPreludebpl.627:18| :skolemid |469| :pattern ( (let ((T@@7 (type o@@17))) (MapType0Select (|Set#Empty| T@@7) o@@17))) )))
(assert (forall ((s@@4 T@U) ) (! (let ((T@@8 (MapType0TypeInv0 (type s@@4)))) (=> (= (type s@@4) (MapType0Type T@@8 boolType)) (and (= (= (|Set#Card| s@@4) 0) (= s@@4 (|Set#Empty| T@@8))) (=> (not (= (|Set#Card| s@@4) 0)) (exists ((x@@18 T@U) ) (!  (and (= (type x@@18) T@@8) (U_2_bool (MapType0Select s@@4 x@@18))) :qid |DafnyPreludebpl.630:33| :skolemid |470| :no-pattern (type x@@18) :no-pattern (U_2_int x@@18) :no-pattern (U_2_bool x@@18) )))))) :qid |DafnyPreludebpl.628:18| :skolemid |471| :pattern ( (|Set#Card| s@@4)) )))
(assert (forall ((arg0@@75 T@U) ) (! (let ((T@@9 (type arg0@@75))) (= (type (|Set#Singleton| arg0@@75)) (MapType0Type T@@9 boolType))) :qid |funType:Set#Singleton| :pattern ( (|Set#Singleton| arg0@@75)) )))
(assert (forall ((r@@1 T@U) ) (! (U_2_bool (MapType0Select (|Set#Singleton| r@@1) r@@1)) :qid |DafnyPreludebpl.636:18| :skolemid |472| :pattern ( (|Set#Singleton| r@@1)) )))
(assert (forall ((r@@2 T@U) (o@@18 T@U) ) (! (let ((T@@10 (type r@@2))) (=> (= (type o@@18) T@@10) (= (U_2_bool (MapType0Select (|Set#Singleton| r@@2) o@@18)) (= r@@2 o@@18)))) :qid |DafnyPreludebpl.637:18| :skolemid |473| :pattern ( (MapType0Select (|Set#Singleton| r@@2) o@@18)) )))
(assert (forall ((r@@3 T@U) ) (! (= (|Set#Card| (|Set#Singleton| r@@3)) 1) :qid |DafnyPreludebpl.638:18| :skolemid |474| :pattern ( (|Set#Card| (|Set#Singleton| r@@3))) )))
(assert (forall ((arg0@@76 T@U) (arg1@@24 T@U) ) (! (let ((T@@11 (type arg1@@24))) (= (type (|Set#UnionOne| arg0@@76 arg1@@24)) (MapType0Type T@@11 boolType))) :qid |funType:Set#UnionOne| :pattern ( (|Set#UnionOne| arg0@@76 arg1@@24)) )))
(assert (forall ((a@@3 T@U) (x@@19 T@U) (o@@19 T@U) ) (! (let ((T@@12 (type x@@19))) (=> (and (= (type a@@3) (MapType0Type T@@12 boolType)) (= (type o@@19) T@@12)) (= (U_2_bool (MapType0Select (|Set#UnionOne| a@@3 x@@19) o@@19))  (or (= o@@19 x@@19) (U_2_bool (MapType0Select a@@3 o@@19)))))) :qid |DafnyPreludebpl.641:18| :skolemid |475| :pattern ( (MapType0Select (|Set#UnionOne| a@@3 x@@19) o@@19)) )))
(assert (forall ((a@@4 T@U) (x@@20 T@U) ) (! (let ((T@@13 (type x@@20))) (=> (= (type a@@4) (MapType0Type T@@13 boolType)) (U_2_bool (MapType0Select (|Set#UnionOne| a@@4 x@@20) x@@20)))) :qid |DafnyPreludebpl.643:18| :skolemid |476| :pattern ( (|Set#UnionOne| a@@4 x@@20)) )))
(assert (forall ((a@@5 T@U) (x@@21 T@U) (y@@1 T@U) ) (! (let ((T@@14 (type x@@21))) (=> (and (and (= (type a@@5) (MapType0Type T@@14 boolType)) (= (type y@@1) T@@14)) (U_2_bool (MapType0Select a@@5 y@@1))) (U_2_bool (MapType0Select (|Set#UnionOne| a@@5 x@@21) y@@1)))) :qid |DafnyPreludebpl.645:18| :skolemid |477| :pattern ( (|Set#UnionOne| a@@5 x@@21) (MapType0Select a@@5 y@@1)) )))
(assert (forall ((a@@6 T@U) (x@@22 T@U) ) (! (let ((T@@15 (type x@@22))) (=> (and (= (type a@@6) (MapType0Type T@@15 boolType)) (U_2_bool (MapType0Select a@@6 x@@22))) (= (|Set#Card| (|Set#UnionOne| a@@6 x@@22)) (|Set#Card| a@@6)))) :qid |DafnyPreludebpl.647:18| :skolemid |478| :pattern ( (|Set#Card| (|Set#UnionOne| a@@6 x@@22))) )))
(assert (forall ((a@@7 T@U) (x@@23 T@U) ) (! (let ((T@@16 (type x@@23))) (=> (and (= (type a@@7) (MapType0Type T@@16 boolType)) (not (U_2_bool (MapType0Select a@@7 x@@23)))) (= (|Set#Card| (|Set#UnionOne| a@@7 x@@23)) (+ (|Set#Card| a@@7) 1)))) :qid |DafnyPreludebpl.649:18| :skolemid |479| :pattern ( (|Set#Card| (|Set#UnionOne| a@@7 x@@23))) )))
(assert (forall ((arg0@@77 T@U) (arg1@@25 T@U) ) (! (let ((T@@17 (MapType0TypeInv0 (type arg0@@77)))) (= (type (|Set#Union| arg0@@77 arg1@@25)) (MapType0Type T@@17 boolType))) :qid |funType:Set#Union| :pattern ( (|Set#Union| arg0@@77 arg1@@25)) )))
(assert (forall ((a@@8 T@U) (b@@3 T@U) (o@@20 T@U) ) (! (let ((T@@18 (type o@@20))) (=> (and (= (type a@@8) (MapType0Type T@@18 boolType)) (= (type b@@3) (MapType0Type T@@18 boolType))) (= (U_2_bool (MapType0Select (|Set#Union| a@@8 b@@3) o@@20))  (or (U_2_bool (MapType0Select a@@8 o@@20)) (U_2_bool (MapType0Select b@@3 o@@20)))))) :qid |DafnyPreludebpl.653:18| :skolemid |480| :pattern ( (MapType0Select (|Set#Union| a@@8 b@@3) o@@20)) )))
(assert (forall ((a@@9 T@U) (b@@4 T@U) (y@@2 T@U) ) (! (let ((T@@19 (type y@@2))) (=> (and (and (= (type a@@9) (MapType0Type T@@19 boolType)) (= (type b@@4) (MapType0Type T@@19 boolType))) (U_2_bool (MapType0Select a@@9 y@@2))) (U_2_bool (MapType0Select (|Set#Union| a@@9 b@@4) y@@2)))) :qid |DafnyPreludebpl.655:18| :skolemid |481| :pattern ( (|Set#Union| a@@9 b@@4) (MapType0Select a@@9 y@@2)) )))
(assert (forall ((a@@10 T@U) (b@@5 T@U) (y@@3 T@U) ) (! (let ((T@@20 (type y@@3))) (=> (and (and (= (type a@@10) (MapType0Type T@@20 boolType)) (= (type b@@5) (MapType0Type T@@20 boolType))) (U_2_bool (MapType0Select b@@5 y@@3))) (U_2_bool (MapType0Select (|Set#Union| a@@10 b@@5) y@@3)))) :qid |DafnyPreludebpl.657:18| :skolemid |482| :pattern ( (|Set#Union| a@@10 b@@5) (MapType0Select b@@5 y@@3)) )))
(assert (forall ((arg0@@78 T@U) (arg1@@26 T@U) ) (! (let ((T@@21 (MapType0TypeInv0 (type arg0@@78)))) (= (type (|Set#Difference| arg0@@78 arg1@@26)) (MapType0Type T@@21 boolType))) :qid |funType:Set#Difference| :pattern ( (|Set#Difference| arg0@@78 arg1@@26)) )))
(assert (forall ((a@@11 T@U) (b@@6 T@U) ) (! (let ((T@@22 (MapType0TypeInv0 (type a@@11)))) (=> (and (and (= (type a@@11) (MapType0Type T@@22 boolType)) (= (type b@@6) (MapType0Type T@@22 boolType))) (|Set#Disjoint| a@@11 b@@6)) (and (= (|Set#Difference| (|Set#Union| a@@11 b@@6) a@@11) b@@6) (= (|Set#Difference| (|Set#Union| a@@11 b@@6) b@@6) a@@11)))) :qid |DafnyPreludebpl.659:18| :skolemid |483| :pattern ( (|Set#Union| a@@11 b@@6)) )))
(assert (forall ((arg0@@79 T@U) (arg1@@27 T@U) ) (! (let ((T@@23 (MapType0TypeInv0 (type arg0@@79)))) (= (type (|Set#Intersection| arg0@@79 arg1@@27)) (MapType0Type T@@23 boolType))) :qid |funType:Set#Intersection| :pattern ( (|Set#Intersection| arg0@@79 arg1@@27)) )))
(assert (forall ((a@@12 T@U) (b@@7 T@U) (o@@21 T@U) ) (! (let ((T@@24 (type o@@21))) (=> (and (= (type a@@12) (MapType0Type T@@24 boolType)) (= (type b@@7) (MapType0Type T@@24 boolType))) (= (U_2_bool (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21))  (and (U_2_bool (MapType0Select a@@12 o@@21)) (U_2_bool (MapType0Select b@@7 o@@21)))))) :qid |DafnyPreludebpl.669:18| :skolemid |484| :pattern ( (MapType0Select (|Set#Intersection| a@@12 b@@7) o@@21)) )))
(assert (forall ((a@@13 T@U) (b@@8 T@U) ) (! (let ((T@@25 (MapType0TypeInv0 (type a@@13)))) (=> (and (= (type a@@13) (MapType0Type T@@25 boolType)) (= (type b@@8) (MapType0Type T@@25 boolType))) (= (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8) (|Set#Union| a@@13 b@@8)))) :qid |DafnyPreludebpl.672:18| :skolemid |485| :pattern ( (|Set#Union| (|Set#Union| a@@13 b@@8) b@@8)) )))
(assert (forall ((a@@14 T@U) (b@@9 T@U) ) (! (let ((T@@26 (MapType0TypeInv0 (type a@@14)))) (=> (and (= (type a@@14) (MapType0Type T@@26 boolType)) (= (type b@@9) (MapType0Type T@@26 boolType))) (= (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9)) (|Set#Union| a@@14 b@@9)))) :qid |DafnyPreludebpl.674:18| :skolemid |486| :pattern ( (|Set#Union| a@@14 (|Set#Union| a@@14 b@@9))) )))
(assert (forall ((a@@15 T@U) (b@@10 T@U) ) (! (let ((T@@27 (MapType0TypeInv0 (type a@@15)))) (=> (and (= (type a@@15) (MapType0Type T@@27 boolType)) (= (type b@@10) (MapType0Type T@@27 boolType))) (= (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10) (|Set#Intersection| a@@15 b@@10)))) :qid |DafnyPreludebpl.676:18| :skolemid |487| :pattern ( (|Set#Intersection| (|Set#Intersection| a@@15 b@@10) b@@10)) )))
(assert (forall ((a@@16 T@U) (b@@11 T@U) ) (! (let ((T@@28 (MapType0TypeInv0 (type a@@16)))) (=> (and (= (type a@@16) (MapType0Type T@@28 boolType)) (= (type b@@11) (MapType0Type T@@28 boolType))) (= (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11)) (|Set#Intersection| a@@16 b@@11)))) :qid |DafnyPreludebpl.678:18| :skolemid |488| :pattern ( (|Set#Intersection| a@@16 (|Set#Intersection| a@@16 b@@11))) )))
(assert (forall ((a@@17 T@U) (b@@12 T@U) ) (! (let ((T@@29 (MapType0TypeInv0 (type a@@17)))) (=> (and (= (type a@@17) (MapType0Type T@@29 boolType)) (= (type b@@12) (MapType0Type T@@29 boolType))) (= (+ (|Set#Card| (|Set#Union| a@@17 b@@12)) (|Set#Card| (|Set#Intersection| a@@17 b@@12))) (+ (|Set#Card| a@@17) (|Set#Card| b@@12))))) :qid |DafnyPreludebpl.680:18| :skolemid |489| :pattern ( (|Set#Card| (|Set#Union| a@@17 b@@12))) :pattern ( (|Set#Card| (|Set#Intersection| a@@17 b@@12))) )))
(assert (forall ((a@@18 T@U) (b@@13 T@U) (o@@22 T@U) ) (! (let ((T@@30 (type o@@22))) (=> (and (= (type a@@18) (MapType0Type T@@30 boolType)) (= (type b@@13) (MapType0Type T@@30 boolType))) (= (U_2_bool (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22))  (and (U_2_bool (MapType0Select a@@18 o@@22)) (not (U_2_bool (MapType0Select b@@13 o@@22))))))) :qid |DafnyPreludebpl.684:18| :skolemid |490| :pattern ( (MapType0Select (|Set#Difference| a@@18 b@@13) o@@22)) )))
(assert (forall ((a@@19 T@U) (b@@14 T@U) (y@@4 T@U) ) (! (let ((T@@31 (type y@@4))) (=> (and (and (= (type a@@19) (MapType0Type T@@31 boolType)) (= (type b@@14) (MapType0Type T@@31 boolType))) (U_2_bool (MapType0Select b@@14 y@@4))) (not (U_2_bool (MapType0Select (|Set#Difference| a@@19 b@@14) y@@4))))) :qid |DafnyPreludebpl.686:18| :skolemid |491| :pattern ( (|Set#Difference| a@@19 b@@14) (MapType0Select b@@14 y@@4)) )))
(assert (forall ((a@@20 T@U) (b@@15 T@U) ) (! (let ((T@@32 (MapType0TypeInv0 (type a@@20)))) (=> (and (= (type a@@20) (MapType0Type T@@32 boolType)) (= (type b@@15) (MapType0Type T@@32 boolType))) (and (= (+ (+ (|Set#Card| (|Set#Difference| a@@20 b@@15)) (|Set#Card| (|Set#Difference| b@@15 a@@20))) (|Set#Card| (|Set#Intersection| a@@20 b@@15))) (|Set#Card| (|Set#Union| a@@20 b@@15))) (= (|Set#Card| (|Set#Difference| a@@20 b@@15)) (- (|Set#Card| a@@20) (|Set#Card| (|Set#Intersection| a@@20 b@@15))))))) :qid |DafnyPreludebpl.688:18| :skolemid |492| :pattern ( (|Set#Card| (|Set#Difference| a@@20 b@@15))) )))
(assert (forall ((a@@21 T@U) (b@@16 T@U) ) (! (let ((T@@33 (MapType0TypeInv0 (type a@@21)))) (=> (and (= (type a@@21) (MapType0Type T@@33 boolType)) (= (type b@@16) (MapType0Type T@@33 boolType))) (= (|Set#Subset| a@@21 b@@16) (forall ((o@@23 T@U) ) (!  (=> (and (= (type o@@23) T@@33) (U_2_bool (MapType0Select a@@21 o@@23))) (U_2_bool (MapType0Select b@@16 o@@23))) :qid |DafnyPreludebpl.697:32| :skolemid |493| :pattern ( (MapType0Select a@@21 o@@23)) :pattern ( (MapType0Select b@@16 o@@23)) ))))) :qid |DafnyPreludebpl.696:17| :skolemid |494| :pattern ( (|Set#Subset| a@@21 b@@16)) )))
(assert (forall ((a@@22 T@U) (b@@17 T@U) ) (! (let ((T@@34 (MapType0TypeInv0 (type a@@22)))) (=> (and (= (type a@@22) (MapType0Type T@@34 boolType)) (= (type b@@17) (MapType0Type T@@34 boolType))) (= (|Set#Equal| a@@22 b@@17) (forall ((o@@24 T@U) ) (!  (=> (= (type o@@24) T@@34) (= (U_2_bool (MapType0Select a@@22 o@@24)) (U_2_bool (MapType0Select b@@17 o@@24)))) :qid |DafnyPreludebpl.705:31| :skolemid |495| :pattern ( (MapType0Select a@@22 o@@24)) :pattern ( (MapType0Select b@@17 o@@24)) ))))) :qid |DafnyPreludebpl.704:17| :skolemid |496| :pattern ( (|Set#Equal| a@@22 b@@17)) )))
(assert (forall ((a@@23 T@U) (b@@18 T@U) ) (! (let ((T@@35 (MapType0TypeInv0 (type a@@23)))) (=> (and (and (= (type a@@23) (MapType0Type T@@35 boolType)) (= (type b@@18) (MapType0Type T@@35 boolType))) (|Set#Equal| a@@23 b@@18)) (= a@@23 b@@18))) :qid |DafnyPreludebpl.706:17| :skolemid |497| :pattern ( (|Set#Equal| a@@23 b@@18)) )))
(assert (forall ((a@@24 T@U) (b@@19 T@U) ) (! (let ((T@@36 (MapType0TypeInv0 (type a@@24)))) (=> (and (= (type a@@24) (MapType0Type T@@36 boolType)) (= (type b@@19) (MapType0Type T@@36 boolType))) (= (|Set#Disjoint| a@@24 b@@19) (forall ((o@@25 T@U) ) (!  (=> (= (type o@@25) T@@36) (or (not (U_2_bool (MapType0Select a@@24 o@@25))) (not (U_2_bool (MapType0Select b@@19 o@@25))))) :qid |DafnyPreludebpl.711:34| :skolemid |498| :pattern ( (MapType0Select a@@24 o@@25)) :pattern ( (MapType0Select b@@19 o@@25)) ))))) :qid |DafnyPreludebpl.710:18| :skolemid |499| :pattern ( (|Set#Disjoint| a@@24 b@@19)) )))
(assert (forall ((T@@37 T@T) ) (! (= (type (|ISet#Empty| T@@37)) (MapType0Type T@@37 boolType)) :qid |funType:ISet#Empty| :pattern ( (|ISet#Empty| T@@37)) )))
(assert (forall ((o@@26 T@U) ) (! (let ((T@@38 (type o@@26))) (not (U_2_bool (MapType0Select (|ISet#Empty| T@@38) o@@26)))) :qid |DafnyPreludebpl.720:18| :skolemid |500| :pattern ( (let ((T@@38 (type o@@26))) (MapType0Select (|ISet#Empty| T@@38) o@@26))) )))
(assert (forall ((arg0@@80 T@U) (arg1@@28 T@U) ) (! (let ((T@@39 (type arg1@@28))) (= (type (|ISet#UnionOne| arg0@@80 arg1@@28)) (MapType0Type T@@39 boolType))) :qid |funType:ISet#UnionOne| :pattern ( (|ISet#UnionOne| arg0@@80 arg1@@28)) )))
(assert (forall ((a@@25 T@U) (x@@24 T@U) (o@@27 T@U) ) (! (let ((T@@40 (type x@@24))) (=> (and (= (type a@@25) (MapType0Type T@@40 boolType)) (= (type o@@27) T@@40)) (= (U_2_bool (MapType0Select (|ISet#UnionOne| a@@25 x@@24) o@@27))  (or (= o@@27 x@@24) (U_2_bool (MapType0Select a@@25 o@@27)))))) :qid |DafnyPreludebpl.727:18| :skolemid |501| :pattern ( (MapType0Select (|ISet#UnionOne| a@@25 x@@24) o@@27)) )))
(assert (forall ((a@@26 T@U) (x@@25 T@U) ) (! (let ((T@@41 (type x@@25))) (=> (= (type a@@26) (MapType0Type T@@41 boolType)) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@26 x@@25) x@@25)))) :qid |DafnyPreludebpl.729:18| :skolemid |502| :pattern ( (|ISet#UnionOne| a@@26 x@@25)) )))
(assert (forall ((a@@27 T@U) (x@@26 T@U) (y@@5 T@U) ) (! (let ((T@@42 (type x@@26))) (=> (and (and (= (type a@@27) (MapType0Type T@@42 boolType)) (= (type y@@5) T@@42)) (U_2_bool (MapType0Select a@@27 y@@5))) (U_2_bool (MapType0Select (|ISet#UnionOne| a@@27 x@@26) y@@5)))) :qid |DafnyPreludebpl.731:18| :skolemid |503| :pattern ( (|ISet#UnionOne| a@@27 x@@26) (MapType0Select a@@27 y@@5)) )))
(assert (forall ((arg0@@81 T@U) (arg1@@29 T@U) ) (! (let ((T@@43 (MapType0TypeInv0 (type arg0@@81)))) (= (type (|ISet#Union| arg0@@81 arg1@@29)) (MapType0Type T@@43 boolType))) :qid |funType:ISet#Union| :pattern ( (|ISet#Union| arg0@@81 arg1@@29)) )))
(assert (forall ((a@@28 T@U) (b@@20 T@U) (o@@28 T@U) ) (! (let ((T@@44 (type o@@28))) (=> (and (= (type a@@28) (MapType0Type T@@44 boolType)) (= (type b@@20) (MapType0Type T@@44 boolType))) (= (U_2_bool (MapType0Select (|ISet#Union| a@@28 b@@20) o@@28))  (or (U_2_bool (MapType0Select a@@28 o@@28)) (U_2_bool (MapType0Select b@@20 o@@28)))))) :qid |DafnyPreludebpl.735:18| :skolemid |504| :pattern ( (MapType0Select (|ISet#Union| a@@28 b@@20) o@@28)) )))
(assert (forall ((a@@29 T@U) (b@@21 T@U) (y@@6 T@U) ) (! (let ((T@@45 (type y@@6))) (=> (and (and (= (type a@@29) (MapType0Type T@@45 boolType)) (= (type b@@21) (MapType0Type T@@45 boolType))) (U_2_bool (MapType0Select a@@29 y@@6))) (U_2_bool (MapType0Select (|ISet#Union| a@@29 b@@21) y@@6)))) :qid |DafnyPreludebpl.737:18| :skolemid |505| :pattern ( (|ISet#Union| a@@29 b@@21) (MapType0Select a@@29 y@@6)) )))
(assert (forall ((a@@30 T@U) (b@@22 T@U) (y@@7 T@U) ) (! (let ((T@@46 (type y@@7))) (=> (and (and (= (type a@@30) (MapType0Type T@@46 boolType)) (= (type b@@22) (MapType0Type T@@46 boolType))) (U_2_bool (MapType0Select b@@22 y@@7))) (U_2_bool (MapType0Select (|ISet#Union| a@@30 b@@22) y@@7)))) :qid |DafnyPreludebpl.739:18| :skolemid |506| :pattern ( (|ISet#Union| a@@30 b@@22) (MapType0Select b@@22 y@@7)) )))
(assert (forall ((arg0@@82 T@U) (arg1@@30 T@U) ) (! (let ((T@@47 (MapType0TypeInv0 (type arg0@@82)))) (= (type (|ISet#Difference| arg0@@82 arg1@@30)) (MapType0Type T@@47 boolType))) :qid |funType:ISet#Difference| :pattern ( (|ISet#Difference| arg0@@82 arg1@@30)) )))
(assert (forall ((a@@31 T@U) (b@@23 T@U) ) (! (let ((T@@48 (MapType0TypeInv0 (type a@@31)))) (=> (and (and (= (type a@@31) (MapType0Type T@@48 boolType)) (= (type b@@23) (MapType0Type T@@48 boolType))) (|ISet#Disjoint| a@@31 b@@23)) (and (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) a@@31) b@@23) (= (|ISet#Difference| (|ISet#Union| a@@31 b@@23) b@@23) a@@31)))) :qid |DafnyPreludebpl.741:18| :skolemid |507| :pattern ( (|ISet#Union| a@@31 b@@23)) )))
(assert (forall ((arg0@@83 T@U) (arg1@@31 T@U) ) (! (let ((T@@49 (MapType0TypeInv0 (type arg0@@83)))) (= (type (|ISet#Intersection| arg0@@83 arg1@@31)) (MapType0Type T@@49 boolType))) :qid |funType:ISet#Intersection| :pattern ( (|ISet#Intersection| arg0@@83 arg1@@31)) )))
(assert (forall ((a@@32 T@U) (b@@24 T@U) (o@@29 T@U) ) (! (let ((T@@50 (type o@@29))) (=> (and (= (type a@@32) (MapType0Type T@@50 boolType)) (= (type b@@24) (MapType0Type T@@50 boolType))) (= (U_2_bool (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@29))  (and (U_2_bool (MapType0Select a@@32 o@@29)) (U_2_bool (MapType0Select b@@24 o@@29)))))) :qid |DafnyPreludebpl.747:18| :skolemid |508| :pattern ( (MapType0Select (|ISet#Intersection| a@@32 b@@24) o@@29)) )))
(assert (forall ((a@@33 T@U) (b@@25 T@U) ) (! (let ((T@@51 (MapType0TypeInv0 (type a@@33)))) (=> (and (= (type a@@33) (MapType0Type T@@51 boolType)) (= (type b@@25) (MapType0Type T@@51 boolType))) (= (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25) (|ISet#Union| a@@33 b@@25)))) :qid |DafnyPreludebpl.750:18| :skolemid |509| :pattern ( (|ISet#Union| (|ISet#Union| a@@33 b@@25) b@@25)) )))
(assert (forall ((a@@34 T@U) (b@@26 T@U) ) (! (let ((T@@52 (MapType0TypeInv0 (type a@@34)))) (=> (and (= (type a@@34) (MapType0Type T@@52 boolType)) (= (type b@@26) (MapType0Type T@@52 boolType))) (= (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26)) (|ISet#Union| a@@34 b@@26)))) :qid |DafnyPreludebpl.752:18| :skolemid |510| :pattern ( (|ISet#Union| a@@34 (|ISet#Union| a@@34 b@@26))) )))
(assert (forall ((a@@35 T@U) (b@@27 T@U) ) (! (let ((T@@53 (MapType0TypeInv0 (type a@@35)))) (=> (and (= (type a@@35) (MapType0Type T@@53 boolType)) (= (type b@@27) (MapType0Type T@@53 boolType))) (= (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27) (|ISet#Intersection| a@@35 b@@27)))) :qid |DafnyPreludebpl.754:18| :skolemid |511| :pattern ( (|ISet#Intersection| (|ISet#Intersection| a@@35 b@@27) b@@27)) )))
(assert (forall ((a@@36 T@U) (b@@28 T@U) ) (! (let ((T@@54 (MapType0TypeInv0 (type a@@36)))) (=> (and (= (type a@@36) (MapType0Type T@@54 boolType)) (= (type b@@28) (MapType0Type T@@54 boolType))) (= (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28)) (|ISet#Intersection| a@@36 b@@28)))) :qid |DafnyPreludebpl.756:18| :skolemid |512| :pattern ( (|ISet#Intersection| a@@36 (|ISet#Intersection| a@@36 b@@28))) )))
(assert (forall ((a@@37 T@U) (b@@29 T@U) (o@@30 T@U) ) (! (let ((T@@55 (type o@@30))) (=> (and (= (type a@@37) (MapType0Type T@@55 boolType)) (= (type b@@29) (MapType0Type T@@55 boolType))) (= (U_2_bool (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@30))  (and (U_2_bool (MapType0Select a@@37 o@@30)) (not (U_2_bool (MapType0Select b@@29 o@@30))))))) :qid |DafnyPreludebpl.761:18| :skolemid |513| :pattern ( (MapType0Select (|ISet#Difference| a@@37 b@@29) o@@30)) )))
(assert (forall ((a@@38 T@U) (b@@30 T@U) (y@@8 T@U) ) (! (let ((T@@56 (type y@@8))) (=> (and (and (= (type a@@38) (MapType0Type T@@56 boolType)) (= (type b@@30) (MapType0Type T@@56 boolType))) (U_2_bool (MapType0Select b@@30 y@@8))) (not (U_2_bool (MapType0Select (|ISet#Difference| a@@38 b@@30) y@@8))))) :qid |DafnyPreludebpl.763:18| :skolemid |514| :pattern ( (|ISet#Difference| a@@38 b@@30) (MapType0Select b@@30 y@@8)) )))
(assert (forall ((a@@39 T@U) (b@@31 T@U) ) (! (let ((T@@57 (MapType0TypeInv0 (type a@@39)))) (=> (and (= (type a@@39) (MapType0Type T@@57 boolType)) (= (type b@@31) (MapType0Type T@@57 boolType))) (= (|ISet#Subset| a@@39 b@@31) (forall ((o@@31 T@U) ) (!  (=> (and (= (type o@@31) T@@57) (U_2_bool (MapType0Select a@@39 o@@31))) (U_2_bool (MapType0Select b@@31 o@@31))) :qid |DafnyPreludebpl.768:33| :skolemid |515| :pattern ( (MapType0Select a@@39 o@@31)) :pattern ( (MapType0Select b@@31 o@@31)) ))))) :qid |DafnyPreludebpl.767:17| :skolemid |516| :pattern ( (|ISet#Subset| a@@39 b@@31)) )))
(assert (forall ((a@@40 T@U) (b@@32 T@U) ) (! (let ((T@@58 (MapType0TypeInv0 (type a@@40)))) (=> (and (= (type a@@40) (MapType0Type T@@58 boolType)) (= (type b@@32) (MapType0Type T@@58 boolType))) (= (|ISet#Equal| a@@40 b@@32) (forall ((o@@32 T@U) ) (!  (=> (= (type o@@32) T@@58) (= (U_2_bool (MapType0Select a@@40 o@@32)) (U_2_bool (MapType0Select b@@32 o@@32)))) :qid |DafnyPreludebpl.772:32| :skolemid |517| :pattern ( (MapType0Select a@@40 o@@32)) :pattern ( (MapType0Select b@@32 o@@32)) ))))) :qid |DafnyPreludebpl.771:17| :skolemid |518| :pattern ( (|ISet#Equal| a@@40 b@@32)) )))
(assert (forall ((a@@41 T@U) (b@@33 T@U) ) (! (let ((T@@59 (MapType0TypeInv0 (type a@@41)))) (=> (and (and (= (type a@@41) (MapType0Type T@@59 boolType)) (= (type b@@33) (MapType0Type T@@59 boolType))) (|ISet#Equal| a@@41 b@@33)) (= a@@41 b@@33))) :qid |DafnyPreludebpl.773:17| :skolemid |519| :pattern ( (|ISet#Equal| a@@41 b@@33)) )))
(assert (forall ((a@@42 T@U) (b@@34 T@U) ) (! (let ((T@@60 (MapType0TypeInv0 (type a@@42)))) (=> (and (= (type a@@42) (MapType0Type T@@60 boolType)) (= (type b@@34) (MapType0Type T@@60 boolType))) (= (|ISet#Disjoint| a@@42 b@@34) (forall ((o@@33 T@U) ) (!  (=> (= (type o@@33) T@@60) (or (not (U_2_bool (MapType0Select a@@42 o@@33))) (not (U_2_bool (MapType0Select b@@34 o@@33))))) :qid |DafnyPreludebpl.778:35| :skolemid |520| :pattern ( (MapType0Select a@@42 o@@33)) :pattern ( (MapType0Select b@@34 o@@33)) ))))) :qid |DafnyPreludebpl.777:18| :skolemid |521| :pattern ( (|ISet#Disjoint| a@@42 b@@34)) )))
(assert (forall ((a@@43 Int) (b@@35 Int) ) (! (= (<= a@@43 b@@35) (= (|Math#min| a@@43 b@@35) a@@43)) :qid |DafnyPreludebpl.785:15| :skolemid |522| :pattern ( (|Math#min| a@@43 b@@35)) )))
(assert (forall ((a@@44 Int) (b@@36 Int) ) (! (= (<= b@@36 a@@44) (= (|Math#min| a@@44 b@@36) b@@36)) :qid |DafnyPreludebpl.786:15| :skolemid |523| :pattern ( (|Math#min| a@@44 b@@36)) )))
(assert (forall ((a@@45 Int) (b@@37 Int) ) (!  (or (= (|Math#min| a@@45 b@@37) a@@45) (= (|Math#min| a@@45 b@@37) b@@37)) :qid |DafnyPreludebpl.787:15| :skolemid |524| :pattern ( (|Math#min| a@@45 b@@37)) )))
(assert (forall ((a@@46 Int) ) (!  (=> (<= 0 a@@46) (= (|Math#clip| a@@46) a@@46)) :qid |DafnyPreludebpl.790:15| :skolemid |525| :pattern ( (|Math#clip| a@@46)) )))
(assert (forall ((a@@47 Int) ) (!  (=> (< a@@47 0) (= (|Math#clip| a@@47) 0)) :qid |DafnyPreludebpl.791:15| :skolemid |526| :pattern ( (|Math#clip| a@@47)) )))
(assert (forall ((ms T@U) ) (! (let ((T@@61 (MapType0TypeInv0 (type ms)))) (=> (= (type ms) (MapType0Type T@@61 intType)) (= ($IsGoodMultiSet ms) (forall ((bx@@22 T@U) ) (!  (=> (= (type bx@@22) T@@61) (and (<= 0 (U_2_int (MapType0Select ms bx@@22))) (<= (U_2_int (MapType0Select ms bx@@22)) (|MultiSet#Card| ms)))) :qid |DafnyPreludebpl.799:11| :skolemid |527| :pattern ( (MapType0Select ms bx@@22)) ))))) :qid |DafnyPreludebpl.797:18| :skolemid |528| :pattern ( ($IsGoodMultiSet ms)) )))
(assert (forall ((s@@5 T@U) ) (! (let ((T@@62 (MapType0TypeInv0 (type s@@5)))) (=> (= (type s@@5) (MapType0Type T@@62 intType)) (<= 0 (|MultiSet#Card| s@@5)))) :qid |DafnyPreludebpl.802:18| :skolemid |529| :pattern ( (|MultiSet#Card| s@@5)) )))
(assert (forall ((s@@6 T@U) (x@@27 T@U) (n@@5 T@U) ) (! (let ((T@@63 (type x@@27))) (=> (and (and (= (type s@@6) (MapType0Type T@@63 intType)) (= (type n@@5) intType)) (<= 0 (U_2_int n@@5))) (= (|MultiSet#Card| (MapType0Store s@@6 x@@27 n@@5)) (+ (- (|MultiSet#Card| s@@6) (U_2_int (MapType0Select s@@6 x@@27))) (U_2_int n@@5))))) :qid |DafnyPreludebpl.803:18| :skolemid |530| :pattern ( (|MultiSet#Card| (MapType0Store s@@6 x@@27 n@@5))) )))
(assert (forall ((T@@64 T@T) ) (! (= (type (|MultiSet#Empty| T@@64)) (MapType0Type T@@64 intType)) :qid |funType:MultiSet#Empty| :pattern ( (|MultiSet#Empty| T@@64)) )))
(assert (forall ((o@@34 T@U) ) (! (let ((T@@65 (type o@@34))) (= (U_2_int (MapType0Select (|MultiSet#Empty| T@@65) o@@34)) 0)) :qid |DafnyPreludebpl.807:18| :skolemid |531| :pattern ( (let ((T@@65 (type o@@34))) (MapType0Select (|MultiSet#Empty| T@@65) o@@34))) )))
(assert (forall ((s@@7 T@U) ) (! (let ((T@@66 (MapType0TypeInv0 (type s@@7)))) (=> (= (type s@@7) (MapType0Type T@@66 intType)) (and (= (= (|MultiSet#Card| s@@7) 0) (= s@@7 (|MultiSet#Empty| T@@66))) (=> (not (= (|MultiSet#Card| s@@7) 0)) (exists ((x@@28 T@U) ) (!  (and (= (type x@@28) T@@66) (< 0 (U_2_int (MapType0Select s@@7 x@@28)))) :qid |DafnyPreludebpl.810:38| :skolemid |532| :no-pattern (type x@@28) :no-pattern (U_2_int x@@28) :no-pattern (U_2_bool x@@28) )))))) :qid |DafnyPreludebpl.808:18| :skolemid |533| :pattern ( (|MultiSet#Card| s@@7)) )))
(assert (forall ((arg0@@84 T@U) ) (! (let ((T@@67 (type arg0@@84))) (= (type (|MultiSet#Singleton| arg0@@84)) (MapType0Type T@@67 intType))) :qid |funType:MultiSet#Singleton| :pattern ( (|MultiSet#Singleton| arg0@@84)) )))
(assert (forall ((r@@4 T@U) (o@@35 T@U) ) (! (let ((T@@68 (type r@@4))) (=> (= (type o@@35) T@@68) (and (= (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) 1) (= r@@4 o@@35)) (= (= (U_2_int (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) 0) (not (= r@@4 o@@35)))))) :qid |DafnyPreludebpl.813:18| :skolemid |534| :pattern ( (MapType0Select (|MultiSet#Singleton| r@@4) o@@35)) )))
(assert (forall ((arg0@@85 T@U) (arg1@@32 T@U) ) (! (let ((T@@69 (type arg1@@32))) (= (type (|MultiSet#UnionOne| arg0@@85 arg1@@32)) (MapType0Type T@@69 intType))) :qid |funType:MultiSet#UnionOne| :pattern ( (|MultiSet#UnionOne| arg0@@85 arg1@@32)) )))
(assert (forall ((r@@5 T@U) ) (! (let ((T@@70 (type r@@5))) (= (|MultiSet#Singleton| r@@5) (|MultiSet#UnionOne| (|MultiSet#Empty| T@@70) r@@5))) :qid |DafnyPreludebpl.815:18| :skolemid |535| :pattern ( (|MultiSet#Singleton| r@@5)) )))
(assert (forall ((a@@48 T@U) (x@@29 T@U) (o@@36 T@U) ) (! (let ((T@@71 (type x@@29))) (=> (and (= (type a@@48) (MapType0Type T@@71 intType)) (= (type o@@36) T@@71)) (= (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@48 x@@29) o@@36)))  (or (= o@@36 x@@29) (< 0 (U_2_int (MapType0Select a@@48 o@@36))))))) :qid |DafnyPreludebpl.819:18| :skolemid |536| :pattern ( (MapType0Select (|MultiSet#UnionOne| a@@48 x@@29) o@@36)) )))
(assert (forall ((a@@49 T@U) (x@@30 T@U) ) (! (let ((T@@72 (type x@@30))) (=> (= (type a@@49) (MapType0Type T@@72 intType)) (= (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@49 x@@30) x@@30)) (+ (U_2_int (MapType0Select a@@49 x@@30)) 1)))) :qid |DafnyPreludebpl.822:18| :skolemid |537| :pattern ( (|MultiSet#UnionOne| a@@49 x@@30)) )))
(assert (forall ((a@@50 T@U) (x@@31 T@U) (y@@9 T@U) ) (! (let ((T@@73 (type x@@31))) (=> (and (and (= (type a@@50) (MapType0Type T@@73 intType)) (= (type y@@9) T@@73)) (< 0 (U_2_int (MapType0Select a@@50 y@@9)))) (< 0 (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@50 x@@31) y@@9))))) :qid |DafnyPreludebpl.825:18| :skolemid |538| :pattern ( (|MultiSet#UnionOne| a@@50 x@@31) (MapType0Select a@@50 y@@9)) )))
(assert (forall ((a@@51 T@U) (x@@32 T@U) (y@@10 T@U) ) (! (let ((T@@74 (type x@@32))) (=> (and (and (= (type a@@51) (MapType0Type T@@74 intType)) (= (type y@@10) T@@74)) (not (= x@@32 y@@10))) (= (U_2_int (MapType0Select a@@51 y@@10)) (U_2_int (MapType0Select (|MultiSet#UnionOne| a@@51 x@@32) y@@10))))) :qid |DafnyPreludebpl.828:18| :skolemid |539| :pattern ( (|MultiSet#UnionOne| a@@51 x@@32) (MapType0Select a@@51 y@@10)) )))
(assert (forall ((a@@52 T@U) (x@@33 T@U) ) (! (let ((T@@75 (type x@@33))) (=> (= (type a@@52) (MapType0Type T@@75 intType)) (= (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@33)) (+ (|MultiSet#Card| a@@52) 1)))) :qid |DafnyPreludebpl.830:18| :skolemid |540| :pattern ( (|MultiSet#Card| (|MultiSet#UnionOne| a@@52 x@@33))) )))
(assert (forall ((arg0@@86 T@U) (arg1@@33 T@U) ) (! (let ((T@@76 (MapType0TypeInv0 (type arg0@@86)))) (= (type (|MultiSet#Union| arg0@@86 arg1@@33)) (MapType0Type T@@76 intType))) :qid |funType:MultiSet#Union| :pattern ( (|MultiSet#Union| arg0@@86 arg1@@33)) )))
(assert (forall ((a@@53 T@U) (b@@38 T@U) (o@@37 T@U) ) (! (let ((T@@77 (type o@@37))) (=> (and (= (type a@@53) (MapType0Type T@@77 intType)) (= (type b@@38) (MapType0Type T@@77 intType))) (= (U_2_int (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@37)) (+ (U_2_int (MapType0Select a@@53 o@@37)) (U_2_int (MapType0Select b@@38 o@@37)))))) :qid |DafnyPreludebpl.836:18| :skolemid |541| :pattern ( (MapType0Select (|MultiSet#Union| a@@53 b@@38) o@@37)) )))
(assert (forall ((a@@54 T@U) (b@@39 T@U) ) (! (let ((T@@78 (MapType0TypeInv0 (type a@@54)))) (=> (and (= (type a@@54) (MapType0Type T@@78 intType)) (= (type b@@39) (MapType0Type T@@78 intType))) (= (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39)) (+ (|MultiSet#Card| a@@54) (|MultiSet#Card| b@@39))))) :qid |DafnyPreludebpl.838:18| :skolemid |542| :pattern ( (|MultiSet#Card| (|MultiSet#Union| a@@54 b@@39))) )))
(assert (forall ((arg0@@87 T@U) (arg1@@34 T@U) ) (! (let ((T@@79 (MapType0TypeInv0 (type arg0@@87)))) (= (type (|MultiSet#Intersection| arg0@@87 arg1@@34)) (MapType0Type T@@79 intType))) :qid |funType:MultiSet#Intersection| :pattern ( (|MultiSet#Intersection| arg0@@87 arg1@@34)) )))
(assert (forall ((a@@55 T@U) (b@@40 T@U) (o@@38 T@U) ) (! (let ((T@@80 (type o@@38))) (=> (and (= (type a@@55) (MapType0Type T@@80 intType)) (= (type b@@40) (MapType0Type T@@80 intType))) (= (U_2_int (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@38)) (|Math#min| (U_2_int (MapType0Select a@@55 o@@38)) (U_2_int (MapType0Select b@@40 o@@38)))))) :qid |DafnyPreludebpl.842:18| :skolemid |543| :pattern ( (MapType0Select (|MultiSet#Intersection| a@@55 b@@40) o@@38)) )))
(assert (forall ((a@@56 T@U) (b@@41 T@U) ) (! (let ((T@@81 (MapType0TypeInv0 (type a@@56)))) (=> (and (= (type a@@56) (MapType0Type T@@81 intType)) (= (type b@@41) (MapType0Type T@@81 intType))) (= (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41) (|MultiSet#Intersection| a@@56 b@@41)))) :qid |DafnyPreludebpl.846:18| :skolemid |544| :pattern ( (|MultiSet#Intersection| (|MultiSet#Intersection| a@@56 b@@41) b@@41)) )))
(assert (forall ((a@@57 T@U) (b@@42 T@U) ) (! (let ((T@@82 (MapType0TypeInv0 (type a@@57)))) (=> (and (= (type a@@57) (MapType0Type T@@82 intType)) (= (type b@@42) (MapType0Type T@@82 intType))) (= (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42)) (|MultiSet#Intersection| a@@57 b@@42)))) :qid |DafnyPreludebpl.848:18| :skolemid |545| :pattern ( (|MultiSet#Intersection| a@@57 (|MultiSet#Intersection| a@@57 b@@42))) )))
(assert (forall ((arg0@@88 T@U) (arg1@@35 T@U) ) (! (let ((T@@83 (MapType0TypeInv0 (type arg0@@88)))) (= (type (|MultiSet#Difference| arg0@@88 arg1@@35)) (MapType0Type T@@83 intType))) :qid |funType:MultiSet#Difference| :pattern ( (|MultiSet#Difference| arg0@@88 arg1@@35)) )))
(assert (forall ((a@@58 T@U) (b@@43 T@U) (o@@39 T@U) ) (! (let ((T@@84 (type o@@39))) (=> (and (= (type a@@58) (MapType0Type T@@84 intType)) (= (type b@@43) (MapType0Type T@@84 intType))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@39)) (|Math#clip| (- (U_2_int (MapType0Select a@@58 o@@39)) (U_2_int (MapType0Select b@@43 o@@39))))))) :qid |DafnyPreludebpl.853:18| :skolemid |546| :pattern ( (MapType0Select (|MultiSet#Difference| a@@58 b@@43) o@@39)) )))
(assert (forall ((a@@59 T@U) (b@@44 T@U) (y@@11 T@U) ) (! (let ((T@@85 (type y@@11))) (=> (and (and (= (type a@@59) (MapType0Type T@@85 intType)) (= (type b@@44) (MapType0Type T@@85 intType))) (<= (U_2_int (MapType0Select a@@59 y@@11)) (U_2_int (MapType0Select b@@44 y@@11)))) (= (U_2_int (MapType0Select (|MultiSet#Difference| a@@59 b@@44) y@@11)) 0))) :qid |DafnyPreludebpl.855:18| :skolemid |547| :pattern ( (|MultiSet#Difference| a@@59 b@@44) (MapType0Select b@@44 y@@11) (MapType0Select a@@59 y@@11)) )))
(assert (forall ((a@@60 T@U) (b@@45 T@U) ) (! (let ((T@@86 (MapType0TypeInv0 (type a@@60)))) (=> (and (= (type a@@60) (MapType0Type T@@86 intType)) (= (type b@@45) (MapType0Type T@@86 intType))) (and (= (+ (+ (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (|MultiSet#Card| (|MultiSet#Difference| b@@45 a@@60))) (* 2 (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45)))) (|MultiSet#Card| (|MultiSet#Union| a@@60 b@@45))) (= (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45)) (- (|MultiSet#Card| a@@60) (|MultiSet#Card| (|MultiSet#Intersection| a@@60 b@@45))))))) :qid |DafnyPreludebpl.857:18| :skolemid |548| :pattern ( (|MultiSet#Card| (|MultiSet#Difference| a@@60 b@@45))) )))
(assert (forall ((a@@61 T@U) (b@@46 T@U) ) (! (let ((T@@87 (MapType0TypeInv0 (type a@@61)))) (=> (and (= (type a@@61) (MapType0Type T@@87 intType)) (= (type b@@46) (MapType0Type T@@87 intType))) (= (|MultiSet#Subset| a@@61 b@@46) (forall ((o@@40 T@U) ) (!  (=> (= (type o@@40) T@@87) (<= (U_2_int (MapType0Select a@@61 o@@40)) (U_2_int (MapType0Select b@@46 o@@40)))) :qid |DafnyPreludebpl.867:37| :skolemid |549| :pattern ( (MapType0Select a@@61 o@@40)) :pattern ( (MapType0Select b@@46 o@@40)) ))))) :qid |DafnyPreludebpl.866:17| :skolemid |550| :pattern ( (|MultiSet#Subset| a@@61 b@@46)) )))
(assert (forall ((a@@62 T@U) (b@@47 T@U) ) (! (let ((T@@88 (MapType0TypeInv0 (type a@@62)))) (=> (and (= (type a@@62) (MapType0Type T@@88 intType)) (= (type b@@47) (MapType0Type T@@88 intType))) (= (|MultiSet#Equal| a@@62 b@@47) (forall ((o@@41 T@U) ) (!  (=> (= (type o@@41) T@@88) (= (U_2_int (MapType0Select a@@62 o@@41)) (U_2_int (MapType0Select b@@47 o@@41)))) :qid |DafnyPreludebpl.871:36| :skolemid |551| :pattern ( (MapType0Select a@@62 o@@41)) :pattern ( (MapType0Select b@@47 o@@41)) ))))) :qid |DafnyPreludebpl.870:17| :skolemid |552| :pattern ( (|MultiSet#Equal| a@@62 b@@47)) )))
(assert (forall ((a@@63 T@U) (b@@48 T@U) ) (! (let ((T@@89 (MapType0TypeInv0 (type a@@63)))) (=> (and (and (= (type a@@63) (MapType0Type T@@89 intType)) (= (type b@@48) (MapType0Type T@@89 intType))) (|MultiSet#Equal| a@@63 b@@48)) (= a@@63 b@@48))) :qid |DafnyPreludebpl.873:17| :skolemid |553| :pattern ( (|MultiSet#Equal| a@@63 b@@48)) )))
(assert (forall ((a@@64 T@U) (b@@49 T@U) ) (! (let ((T@@90 (MapType0TypeInv0 (type a@@64)))) (=> (and (= (type a@@64) (MapType0Type T@@90 intType)) (= (type b@@49) (MapType0Type T@@90 intType))) (= (|MultiSet#Disjoint| a@@64 b@@49) (forall ((o@@42 T@U) ) (!  (=> (= (type o@@42) T@@90) (or (= (U_2_int (MapType0Select a@@64 o@@42)) 0) (= (U_2_int (MapType0Select b@@49 o@@42)) 0))) :qid |DafnyPreludebpl.878:39| :skolemid |554| :pattern ( (MapType0Select a@@64 o@@42)) :pattern ( (MapType0Select b@@49 o@@42)) ))))) :qid |DafnyPreludebpl.877:18| :skolemid |555| :pattern ( (|MultiSet#Disjoint| a@@64 b@@49)) )))
(assert (forall ((arg0@@89 T@U) ) (! (let ((T@@91 (MapType0TypeInv0 (type arg0@@89)))) (= (type (|MultiSet#FromSet| arg0@@89)) (MapType0Type T@@91 intType))) :qid |funType:MultiSet#FromSet| :pattern ( (|MultiSet#FromSet| arg0@@89)) )))
(assert (forall ((s@@8 T@U) (a@@65 T@U) ) (! (let ((T@@92 (type a@@65))) (=> (= (type s@@8) (MapType0Type T@@92 boolType)) (and (= (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 0)  (not (U_2_bool (MapType0Select s@@8 a@@65)))) (= (= (U_2_int (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) 1) (U_2_bool (MapType0Select s@@8 a@@65)))))) :qid |DafnyPreludebpl.882:18| :skolemid |556| :pattern ( (MapType0Select (|MultiSet#FromSet| s@@8) a@@65)) )))
(assert (forall ((s@@9 T@U) ) (! (let ((T@@93 (MapType0TypeInv0 (type s@@9)))) (=> (= (type s@@9) (MapType0Type T@@93 boolType)) (= (|MultiSet#Card| (|MultiSet#FromSet| s@@9)) (|Set#Card| s@@9)))) :qid |DafnyPreludebpl.885:18| :skolemid |557| :pattern ( (|MultiSet#Card| (|MultiSet#FromSet| s@@9))) )))
(assert (forall ((arg0@@90 T@U) ) (! (let ((T@@94 (SeqTypeInv0 (type arg0@@90)))) (= (type (|MultiSet#FromSeq| arg0@@90)) (MapType0Type T@@94 intType))) :qid |funType:MultiSet#FromSeq| :pattern ( (|MultiSet#FromSeq| arg0@@90)) )))
(assert (forall ((s@@10 T@U) ) (! (let ((T@@95 (SeqTypeInv0 (type s@@10)))) (=> (= (type s@@10) (SeqType T@@95)) ($IsGoodMultiSet (|MultiSet#FromSeq| s@@10)))) :qid |DafnyPreludebpl.891:18| :skolemid |558| :pattern ( (|MultiSet#FromSeq| s@@10)) )))
(assert (forall ((s@@11 T@U) ) (! (let ((T@@96 (SeqTypeInv0 (type s@@11)))) (=> (= (type s@@11) (SeqType T@@96)) (= (|MultiSet#Card| (|MultiSet#FromSeq| s@@11)) (|Seq#Length| s@@11)))) :qid |DafnyPreludebpl.893:18| :skolemid |559| :pattern ( (|MultiSet#Card| (|MultiSet#FromSeq| s@@11))) )))
(assert (forall ((arg0@@91 T@U) (arg1@@36 T@U) ) (! (let ((T@@97 (type arg1@@36))) (= (type (|Seq#Build| arg0@@91 arg1@@36)) (SeqType T@@97))) :qid |funType:Seq#Build| :pattern ( (|Seq#Build| arg0@@91 arg1@@36)) )))
(assert (forall ((s@@12 T@U) (v@@29 T@U) ) (! (let ((T@@98 (type v@@29))) (=> (= (type s@@12) (SeqType T@@98)) (= (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@29)) (|MultiSet#UnionOne| (|MultiSet#FromSeq| s@@12) v@@29)))) :qid |DafnyPreludebpl.897:18| :skolemid |560| :pattern ( (|MultiSet#FromSeq| (|Seq#Build| s@@12 v@@29))) )))
(assert (forall ((T@@99 T@T) ) (! (= (type (|Seq#Empty| T@@99)) (SeqType T@@99)) :qid |funType:Seq#Empty| :pattern ( (|Seq#Empty| T@@99)) )))
(assert (forall ((T@@100 T@T) ) (! (= (|MultiSet#FromSeq| (|Seq#Empty| T@@100)) (|MultiSet#Empty| T@@100)) :skolemid |561| )))
(assert (forall ((arg0@@92 T@U) (arg1@@37 T@U) ) (! (let ((T@@101 (SeqTypeInv0 (type arg0@@92)))) (= (type (|Seq#Append| arg0@@92 arg1@@37)) (SeqType T@@101))) :qid |funType:Seq#Append| :pattern ( (|Seq#Append| arg0@@92 arg1@@37)) )))
(assert (forall ((a@@66 T@U) (b@@50 T@U) ) (! (let ((T@@102 (SeqTypeInv0 (type a@@66)))) (=> (and (= (type a@@66) (SeqType T@@102)) (= (type b@@50) (SeqType T@@102))) (= (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50)) (|MultiSet#Union| (|MultiSet#FromSeq| a@@66) (|MultiSet#FromSeq| b@@50))))) :qid |DafnyPreludebpl.904:18| :skolemid |562| :pattern ( (|MultiSet#FromSeq| (|Seq#Append| a@@66 b@@50))) )))
(assert (forall ((arg0@@93 T@U) (arg1@@38 Int) (arg2@@1 T@U) ) (! (let ((T@@103 (type arg2@@1))) (= (type (|Seq#Update| arg0@@93 arg1@@38 arg2@@1)) (SeqType T@@103))) :qid |funType:Seq#Update| :pattern ( (|Seq#Update| arg0@@93 arg1@@38 arg2@@1)) )))
(assert (forall ((s@@13 T@U) (i@@6 Int) (v@@30 T@U) (x@@34 T@U) ) (! (let ((T@@104 (type v@@30))) (=> (and (and (= (type s@@13) (SeqType T@@104)) (= (type x@@34) T@@104)) (and (<= 0 i@@6) (< i@@6 (|Seq#Length| s@@13)))) (= (U_2_int (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@6 v@@30)) x@@34)) (U_2_int (MapType0Select (|MultiSet#Union| (|MultiSet#Difference| (|MultiSet#FromSeq| s@@13) (|MultiSet#Singleton| (|Seq#Index| s@@13 i@@6))) (|MultiSet#Singleton| v@@30)) x@@34))))) :qid |DafnyPreludebpl.909:18| :skolemid |563| :pattern ( (MapType0Select (|MultiSet#FromSeq| (|Seq#Update| s@@13 i@@6 v@@30)) x@@34)) )))
(assert (forall ((s@@14 T@U) (x@@35 T@U) ) (! (let ((T@@105 (type x@@35))) (=> (= (type s@@14) (SeqType T@@105)) (= (exists ((i@@7 Int) ) (!  (and (and (<= 0 i@@7) (< i@@7 (|Seq#Length| s@@14))) (= x@@35 (|Seq#Index| s@@14 i@@7))) :qid |DafnyPreludebpl.916:11| :skolemid |564| :pattern ( (|Seq#Index| s@@14 i@@7)) )) (< 0 (U_2_int (MapType0Select (|MultiSet#FromSeq| s@@14) x@@35)))))) :qid |DafnyPreludebpl.915:18| :skolemid |565| :pattern ( (MapType0Select (|MultiSet#FromSeq| s@@14) x@@35)) )))
(assert (forall ((s@@15 T@U) ) (! (let ((T@@106 (SeqTypeInv0 (type s@@15)))) (=> (= (type s@@15) (SeqType T@@106)) (<= 0 (|Seq#Length| s@@15)))) :qid |DafnyPreludebpl.925:18| :skolemid |566| :pattern ( (|Seq#Length| s@@15)) )))
(assert (forall ((T@@107 T@T) ) (! (= (|Seq#Length| (|Seq#Empty| T@@107)) 0) :skolemid |567| :pattern ( (|Seq#Empty| T@@107)) )))
(assert (forall ((s@@16 T@U) ) (! (let ((T@@108 (SeqTypeInv0 (type s@@16)))) (=> (and (= (type s@@16) (SeqType T@@108)) (= (|Seq#Length| s@@16) 0)) (= s@@16 (|Seq#Empty| T@@108)))) :qid |DafnyPreludebpl.929:18| :skolemid |568| :pattern ( (|Seq#Length| s@@16)) )))
(assert (forall ((arg0@@94 T@U) ) (! (let ((T@@109 (type arg0@@94))) (= (type (|Seq#Singleton| arg0@@94)) (SeqType T@@109))) :qid |funType:Seq#Singleton| :pattern ( (|Seq#Singleton| arg0@@94)) )))
(assert (forall ((t@@23 T@U) ) (! (= (|Seq#Length| (|Seq#Singleton| t@@23)) 1) :qid |DafnyPreludebpl.942:18| :skolemid |569| :pattern ( (|Seq#Length| (|Seq#Singleton| t@@23))) )))
(assert  (and (forall ((arg0@@95 T@U) ) (! (let ((T@@110 (SeqTypeInv0 (type arg0@@95)))) (= (type (|Seq#Build_inv0| arg0@@95)) (SeqType T@@110))) :qid |funType:Seq#Build_inv0| :pattern ( (|Seq#Build_inv0| arg0@@95)) )) (forall ((arg0@@96 T@U) ) (! (let ((T@@111 (SeqTypeInv0 (type arg0@@96)))) (= (type (|Seq#Build_inv1| arg0@@96)) T@@111)) :qid |funType:Seq#Build_inv1| :pattern ( (|Seq#Build_inv1| arg0@@96)) ))))
(assert (forall ((s@@17 T@U) (val@@5 T@U) ) (! (let ((T@@112 (type val@@5))) (=> (= (type s@@17) (SeqType T@@112)) (and (= (|Seq#Build_inv0| (|Seq#Build| s@@17 val@@5)) s@@17) (= (|Seq#Build_inv1| (|Seq#Build| s@@17 val@@5)) val@@5)))) :qid |DafnyPreludebpl.947:18| :skolemid |570| :pattern ( (|Seq#Build| s@@17 val@@5)) )))
(assert (forall ((s@@18 T@U) (v@@31 T@U) ) (! (let ((T@@113 (type v@@31))) (=> (= (type s@@18) (SeqType T@@113)) (= (|Seq#Length| (|Seq#Build| s@@18 v@@31)) (+ 1 (|Seq#Length| s@@18))))) :qid |DafnyPreludebpl.952:18| :skolemid |571| :pattern ( (|Seq#Build| s@@18 v@@31)) )))
(assert (forall ((s@@19 T@U) (i@@8 Int) (v@@32 T@U) ) (! (let ((T@@114 (type v@@32))) (=> (= (type s@@19) (SeqType T@@114)) (and (=> (= i@@8 (|Seq#Length| s@@19)) (= (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8) v@@32)) (=> (not (= i@@8 (|Seq#Length| s@@19))) (= (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8) (|Seq#Index| s@@19 i@@8)))))) :qid |DafnyPreludebpl.955:18| :skolemid |572| :pattern ( (|Seq#Index| (|Seq#Build| s@@19 v@@32) i@@8)) )))
(assert (forall ((s@@20 T@U) (bx@@23 T@U) (t@@24 T@U) ) (!  (=> (and (and (and (= (type s@@20) (SeqType BoxType)) (= (type bx@@23) BoxType)) (= (type t@@24) TyType)) (and ($Is s@@20 (TSeq t@@24)) ($IsBox bx@@23 t@@24))) ($Is (|Seq#Build| s@@20 bx@@23) (TSeq t@@24))) :qid |DafnyPreludebpl.960:15| :skolemid |573| :pattern ( ($Is (|Seq#Build| s@@20 bx@@23) (TSeq t@@24))) )))
(assert  (and (= (Ctor HandleTypeType) 23) (forall ((arg0@@97 T@U) (arg1@@39 T@U) (arg2@@2 Int) (arg3 T@U) ) (! (= (type (|Seq#Create| arg0@@97 arg1@@39 arg2@@2 arg3)) (SeqType BoxType)) :qid |funType:Seq#Create| :pattern ( (|Seq#Create| arg0@@97 arg1@@39 arg2@@2 arg3)) ))))
(assert (forall ((ty T@U) (heap T@U) (len Int) (init T@U) ) (!  (=> (and (and (and (= (type ty) TyType) (= (type heap) (MapType0Type refType MapType1Type))) (= (type init) HandleTypeType)) (and ($IsGoodHeap heap) (<= 0 len))) (= (|Seq#Length| (|Seq#Create| ty heap len init)) len)) :qid |DafnyPreludebpl.964:15| :skolemid |574| :pattern ( (|Seq#Length| (|Seq#Create| ty heap len init))) )))
(assert (forall ((arg0@@98 T@U) (arg1@@40 T@U) (arg2@@3 T@U) (arg3@@0 T@U) (arg4 T@U) ) (! (= (type (Apply1 arg0@@98 arg1@@40 arg2@@3 arg3@@0 arg4)) BoxType) :qid |funType:Apply1| :pattern ( (Apply1 arg0@@98 arg1@@40 arg2@@3 arg3@@0 arg4)) )))
(assert (forall ((ty@@0 T@U) (heap@@0 T@U) (len@@0 Int) (init@@0 T@U) (i@@9 Int) ) (!  (=> (and (and (and (= (type ty@@0) TyType) (= (type heap@@0) (MapType0Type refType MapType1Type))) (= (type init@@0) HandleTypeType)) (and (and ($IsGoodHeap heap@@0) (<= 0 i@@9)) (< i@@9 len@@0))) (= (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@9) (Apply1 TInt (TSeq ty@@0) heap@@0 init@@0 ($Box (int_2_U i@@9))))) :qid |DafnyPreludebpl.968:15| :skolemid |575| :pattern ( (|Seq#Index| (|Seq#Create| ty@@0 heap@@0 len@@0 init@@0) i@@9)) )))
(assert (forall ((s0 T@U) (s1 T@U) ) (! (let ((T@@115 (SeqTypeInv0 (type s0)))) (=> (and (= (type s0) (SeqType T@@115)) (= (type s1) (SeqType T@@115))) (= (|Seq#Length| (|Seq#Append| s0 s1)) (+ (|Seq#Length| s0) (|Seq#Length| s1))))) :qid |DafnyPreludebpl.974:18| :skolemid |576| :pattern ( (|Seq#Length| (|Seq#Append| s0 s1))) )))
(assert (forall ((t@@25 T@U) ) (! (= (|Seq#Index| (|Seq#Singleton| t@@25) 0) t@@25) :qid |DafnyPreludebpl.978:18| :skolemid |577| :pattern ( (|Seq#Index| (|Seq#Singleton| t@@25) 0)) )))
(assert (forall ((s0@@0 T@U) (s1@@0 T@U) (n@@6 Int) ) (! (let ((T@@116 (SeqTypeInv0 (type s0@@0)))) (=> (and (= (type s0@@0) (SeqType T@@116)) (= (type s1@@0) (SeqType T@@116))) (and (=> (< n@@6 (|Seq#Length| s0@@0)) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6) (|Seq#Index| s0@@0 n@@6))) (=> (<= (|Seq#Length| s0@@0) n@@6) (= (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6) (|Seq#Index| s1@@0 (- n@@6 (|Seq#Length| s0@@0)))))))) :qid |DafnyPreludebpl.979:18| :skolemid |578| :pattern ( (|Seq#Index| (|Seq#Append| s0@@0 s1@@0) n@@6)) )))
(assert (forall ((s@@21 T@U) (i@@10 Int) (v@@33 T@U) ) (! (let ((T@@117 (type v@@33))) (=> (= (type s@@21) (SeqType T@@117)) (=> (and (<= 0 i@@10) (< i@@10 (|Seq#Length| s@@21))) (= (|Seq#Length| (|Seq#Update| s@@21 i@@10 v@@33)) (|Seq#Length| s@@21))))) :qid |DafnyPreludebpl.984:18| :skolemid |579| :pattern ( (|Seq#Length| (|Seq#Update| s@@21 i@@10 v@@33))) )))
(assert (forall ((s@@22 T@U) (i@@11 Int) (v@@34 T@U) (n@@7 Int) ) (! (let ((T@@118 (type v@@34))) (=> (= (type s@@22) (SeqType T@@118)) (=> (and (<= 0 n@@7) (< n@@7 (|Seq#Length| s@@22))) (and (=> (= i@@11 n@@7) (= (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7) v@@34)) (=> (not (= i@@11 n@@7)) (= (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7) (|Seq#Index| s@@22 n@@7))))))) :qid |DafnyPreludebpl.986:18| :skolemid |580| :pattern ( (|Seq#Index| (|Seq#Update| s@@22 i@@11 v@@34) n@@7)) )))
(assert (forall ((s@@23 T@U) (x@@36 T@U) ) (! (let ((T@@119 (type x@@36))) (=> (= (type s@@23) (SeqType T@@119)) (= (|Seq#Contains| s@@23 x@@36) (exists ((i@@12 Int) ) (!  (and (and (<= 0 i@@12) (< i@@12 (|Seq#Length| s@@23))) (= (|Seq#Index| s@@23 i@@12) x@@36)) :qid |DafnyPreludebpl.994:13| :skolemid |581| :pattern ( (|Seq#Index| s@@23 i@@12)) ))))) :qid |DafnyPreludebpl.992:18| :skolemid |582| :pattern ( (|Seq#Contains| s@@23 x@@36)) )))
(assert (forall ((x@@37 T@U) ) (! (let ((T@@120 (type x@@37))) (not (|Seq#Contains| (|Seq#Empty| T@@120) x@@37))) :qid |DafnyPreludebpl.995:18| :skolemid |583| :pattern ( (let ((T@@120 (type x@@37))) (|Seq#Contains| (|Seq#Empty| T@@120) x@@37))) )))
(assert (forall ((s0@@1 T@U) (s1@@1 T@U) (x@@38 T@U) ) (! (let ((T@@121 (type x@@38))) (=> (and (= (type s0@@1) (SeqType T@@121)) (= (type s1@@1) (SeqType T@@121))) (= (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@38)  (or (|Seq#Contains| s0@@1 x@@38) (|Seq#Contains| s1@@1 x@@38))))) :qid |DafnyPreludebpl.999:18| :skolemid |584| :pattern ( (|Seq#Contains| (|Seq#Append| s0@@1 s1@@1) x@@38)) )))
(assert (forall ((s@@24 T@U) (v@@35 T@U) (x@@39 T@U) ) (! (let ((T@@122 (type v@@35))) (=> (and (= (type s@@24) (SeqType T@@122)) (= (type x@@39) T@@122)) (= (|Seq#Contains| (|Seq#Build| s@@24 v@@35) x@@39)  (or (= v@@35 x@@39) (|Seq#Contains| s@@24 x@@39))))) :qid |DafnyPreludebpl.1004:18| :skolemid |585| :pattern ( (|Seq#Contains| (|Seq#Build| s@@24 v@@35) x@@39)) )))
(assert (forall ((arg0@@99 T@U) (arg1@@41 Int) ) (! (let ((T@@123 (SeqTypeInv0 (type arg0@@99)))) (= (type (|Seq#Take| arg0@@99 arg1@@41)) (SeqType T@@123))) :qid |funType:Seq#Take| :pattern ( (|Seq#Take| arg0@@99 arg1@@41)) )))
(assert (forall ((s@@25 T@U) (n@@8 Int) (x@@40 T@U) ) (! (let ((T@@124 (type x@@40))) (=> (= (type s@@25) (SeqType T@@124)) (= (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@40) (exists ((i@@13 Int) ) (!  (and (and (and (<= 0 i@@13) (< i@@13 n@@8)) (< i@@13 (|Seq#Length| s@@25))) (= (|Seq#Index| s@@25 i@@13) x@@40)) :qid |DafnyPreludebpl.1011:13| :skolemid |586| :pattern ( (|Seq#Index| s@@25 i@@13)) ))))) :qid |DafnyPreludebpl.1008:18| :skolemid |587| :pattern ( (|Seq#Contains| (|Seq#Take| s@@25 n@@8) x@@40)) )))
(assert (forall ((arg0@@100 T@U) (arg1@@42 Int) ) (! (let ((T@@125 (SeqTypeInv0 (type arg0@@100)))) (= (type (|Seq#Drop| arg0@@100 arg1@@42)) (SeqType T@@125))) :qid |funType:Seq#Drop| :pattern ( (|Seq#Drop| arg0@@100 arg1@@42)) )))
(assert (forall ((s@@26 T@U) (n@@9 Int) (x@@41 T@U) ) (! (let ((T@@126 (type x@@41))) (=> (= (type s@@26) (SeqType T@@126)) (= (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@41) (exists ((i@@14 Int) ) (!  (and (and (and (<= 0 n@@9) (<= n@@9 i@@14)) (< i@@14 (|Seq#Length| s@@26))) (= (|Seq#Index| s@@26 i@@14) x@@41)) :qid |DafnyPreludebpl.1016:13| :skolemid |588| :pattern ( (|Seq#Index| s@@26 i@@14)) ))))) :qid |DafnyPreludebpl.1013:18| :skolemid |589| :pattern ( (|Seq#Contains| (|Seq#Drop| s@@26 n@@9) x@@41)) )))
(assert (forall ((s0@@2 T@U) (s1@@2 T@U) ) (! (let ((T@@127 (SeqTypeInv0 (type s0@@2)))) (=> (and (= (type s0@@2) (SeqType T@@127)) (= (type s1@@2) (SeqType T@@127))) (= (|Seq#Equal| s0@@2 s1@@2)  (and (= (|Seq#Length| s0@@2) (|Seq#Length| s1@@2)) (forall ((j Int) ) (!  (=> (and (<= 0 j) (< j (|Seq#Length| s0@@2))) (= (|Seq#Index| s0@@2 j) (|Seq#Index| s1@@2 j))) :qid |DafnyPreludebpl.1023:13| :skolemid |590| :pattern ( (|Seq#Index| s0@@2 j)) :pattern ( (|Seq#Index| s1@@2 j)) )))))) :qid |DafnyPreludebpl.1020:18| :skolemid |591| :pattern ( (|Seq#Equal| s0@@2 s1@@2)) )))
(assert (forall ((a@@67 T@U) (b@@51 T@U) ) (! (let ((T@@128 (SeqTypeInv0 (type a@@67)))) (=> (and (and (= (type a@@67) (SeqType T@@128)) (= (type b@@51) (SeqType T@@128))) (|Seq#Equal| a@@67 b@@51)) (= a@@67 b@@51))) :qid |DafnyPreludebpl.1025:18| :skolemid |592| :pattern ( (|Seq#Equal| a@@67 b@@51)) )))
(assert (forall ((s0@@3 T@U) (s1@@3 T@U) (n@@10 Int) ) (! (let ((T@@129 (SeqTypeInv0 (type s0@@3)))) (=> (and (= (type s0@@3) (SeqType T@@129)) (= (type s1@@3) (SeqType T@@129))) (= (|Seq#SameUntil| s0@@3 s1@@3 n@@10) (forall ((j@@0 Int) ) (!  (=> (and (<= 0 j@@0) (< j@@0 n@@10)) (= (|Seq#Index| s0@@3 j@@0) (|Seq#Index| s1@@3 j@@0))) :qid |DafnyPreludebpl.1031:13| :skolemid |593| :pattern ( (|Seq#Index| s0@@3 j@@0)) :pattern ( (|Seq#Index| s1@@3 j@@0)) ))))) :qid |DafnyPreludebpl.1029:18| :skolemid |594| :pattern ( (|Seq#SameUntil| s0@@3 s1@@3 n@@10)) )))
(assert (forall ((s@@27 T@U) (n@@11 Int) ) (! (let ((T@@130 (SeqTypeInv0 (type s@@27)))) (=> (= (type s@@27) (SeqType T@@130)) (=> (and (<= 0 n@@11) (<= n@@11 (|Seq#Length| s@@27))) (= (|Seq#Length| (|Seq#Take| s@@27 n@@11)) n@@11)))) :qid |DafnyPreludebpl.1035:18| :skolemid |595| :pattern ( (|Seq#Length| (|Seq#Take| s@@27 n@@11))) )))
(assert (forall ((s@@28 T@U) (n@@12 Int) (j@@1 Int) ) (! (let ((T@@131 (SeqTypeInv0 (type s@@28)))) (=> (= (type s@@28) (SeqType T@@131)) (=> (and (and (<= 0 j@@1) (< j@@1 n@@12)) (< j@@1 (|Seq#Length| s@@28))) (= (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@1) (|Seq#Index| s@@28 j@@1))))) :qid |DafnyPreludebpl.1037:18| :weight 25 :skolemid |596| :pattern ( (|Seq#Index| (|Seq#Take| s@@28 n@@12) j@@1)) :pattern ( (|Seq#Index| s@@28 j@@1) (|Seq#Take| s@@28 n@@12)) )))
(assert (forall ((s@@29 T@U) (n@@13 Int) ) (! (let ((T@@132 (SeqTypeInv0 (type s@@29)))) (=> (= (type s@@29) (SeqType T@@132)) (=> (and (<= 0 n@@13) (<= n@@13 (|Seq#Length| s@@29))) (= (|Seq#Length| (|Seq#Drop| s@@29 n@@13)) (- (|Seq#Length| s@@29) n@@13))))) :qid |DafnyPreludebpl.1045:18| :skolemid |597| :pattern ( (|Seq#Length| (|Seq#Drop| s@@29 n@@13))) )))
(assert (forall ((s@@30 T@U) (n@@14 Int) (j@@2 Int) ) (! (let ((T@@133 (SeqTypeInv0 (type s@@30)))) (=> (= (type s@@30) (SeqType T@@133)) (=> (and (and (<= 0 n@@14) (<= 0 j@@2)) (< j@@2 (- (|Seq#Length| s@@30) n@@14))) (= (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@2) (|Seq#Index| s@@30 (+ j@@2 n@@14)))))) :qid |DafnyPreludebpl.1047:18| :weight 25 :skolemid |598| :pattern ( (|Seq#Index| (|Seq#Drop| s@@30 n@@14) j@@2)) )))
(assert (forall ((s@@31 T@U) (n@@15 Int) (k@@3 Int) ) (! (let ((T@@134 (SeqTypeInv0 (type s@@31)))) (=> (= (type s@@31) (SeqType T@@134)) (=> (and (and (<= 0 n@@15) (<= n@@15 k@@3)) (< k@@3 (|Seq#Length| s@@31))) (= (|Seq#Index| (|Seq#Drop| s@@31 n@@15) (- k@@3 n@@15)) (|Seq#Index| s@@31 k@@3))))) :qid |DafnyPreludebpl.1052:18| :weight 25 :skolemid |599| :pattern ( (|Seq#Index| s@@31 k@@3) (|Seq#Drop| s@@31 n@@15)) )))
(assert (forall ((s@@32 T@U) (t@@26 T@U) (n@@16 Int) ) (! (let ((T@@135 (SeqTypeInv0 (type s@@32)))) (=> (and (and (= (type s@@32) (SeqType T@@135)) (= (type t@@26) (SeqType T@@135))) (= n@@16 (|Seq#Length| s@@32))) (and (= (|Seq#Take| (|Seq#Append| s@@32 t@@26) n@@16) s@@32) (= (|Seq#Drop| (|Seq#Append| s@@32 t@@26) n@@16) t@@26)))) :qid |DafnyPreludebpl.1058:18| :skolemid |600| :pattern ( (|Seq#Take| (|Seq#Append| s@@32 t@@26) n@@16)) :pattern ( (|Seq#Drop| (|Seq#Append| s@@32 t@@26) n@@16)) )))
(assert (forall ((arg0@@101 T@U) (arg1@@43 T@U) ) (! (= (type (|Seq#FromArray| arg0@@101 arg1@@43)) (SeqType BoxType)) :qid |funType:Seq#FromArray| :pattern ( (|Seq#FromArray| arg0@@101 arg1@@43)) )))
(assert (forall ((h@@17 T@U) (a@@68 T@U) ) (!  (=> (and (= (type h@@17) (MapType0Type refType MapType1Type)) (= (type a@@68) refType)) (= (|Seq#Length| (|Seq#FromArray| h@@17 a@@68)) (_System.array.Length a@@68))) :qid |DafnyPreludebpl.1067:15| :skolemid |601| :pattern ( (|Seq#Length| (|Seq#FromArray| h@@17 a@@68))) )))
(assert (forall ((h@@18 T@U) (a@@69 T@U) ) (!  (=> (and (= (type h@@18) (MapType0Type refType MapType1Type)) (= (type a@@69) refType)) (forall ((i@@15 Int) ) (!  (=> (and (<= 0 i@@15) (< i@@15 (|Seq#Length| (|Seq#FromArray| h@@18 a@@69)))) (= (|Seq#Index| (|Seq#FromArray| h@@18 a@@69) i@@15) (MapType1Select (MapType0Select h@@18 a@@69) (IndexField i@@15)))) :qid |DafnyPreludebpl.1072:11| :skolemid |602| :pattern ( (MapType1Select (MapType0Select h@@18 a@@69) (IndexField i@@15))) :pattern ( (|Seq#Index| (|Seq#FromArray| h@@18 a@@69) i@@15)) ))) :qid |DafnyPreludebpl.1070:15| :skolemid |603| :pattern ( (|Seq#FromArray| h@@18 a@@69)) )))
(assert (forall ((h0 T@U) (h1 T@U) (a@@70 T@U) ) (!  (=> (and (and (= (type h0) (MapType0Type refType MapType1Type)) (= (type h1) (MapType0Type refType MapType1Type))) (= (type a@@70) refType)) (=> (and (and (and ($IsGoodHeap h0) ($IsGoodHeap h1)) ($HeapSucc h0 h1)) (= (MapType0Select h0 a@@70) (MapType0Select h1 a@@70))) (= (|Seq#FromArray| h0 a@@70) (|Seq#FromArray| h1 a@@70)))) :qid |DafnyPreludebpl.1082:15| :skolemid |604| :pattern ( (|Seq#FromArray| h1 a@@70) ($HeapSucc h0 h1)) )))
(assert (forall ((h@@19 T@U) (i@@16 Int) (v@@36 T@U) (a@@71 T@U) ) (!  (=> (and (and (and (= (type h@@19) (MapType0Type refType MapType1Type)) (= (type v@@36) BoxType)) (= (type a@@71) refType)) (and (<= 0 i@@16) (< i@@16 (_System.array.Length a@@71)))) (= (|Seq#FromArray| (MapType0Store h@@19 a@@71 (MapType1Store (MapType0Select h@@19 a@@71) (IndexField i@@16) v@@36)) a@@71) (|Seq#Update| (|Seq#FromArray| h@@19 a@@71) i@@16 v@@36))) :qid |DafnyPreludebpl.1087:15| :skolemid |605| :pattern ( (|Seq#FromArray| (MapType0Store h@@19 a@@71 (MapType1Store (MapType0Select h@@19 a@@71) (IndexField i@@16) v@@36)) a@@71)) )))
(assert (forall ((s@@33 T@U) (i@@17 Int) (v@@37 T@U) (n@@17 Int) ) (! (let ((T@@136 (type v@@37))) (=> (= (type s@@33) (SeqType T@@136)) (=> (and (and (<= 0 i@@17) (< i@@17 n@@17)) (<= n@@17 (|Seq#Length| s@@33))) (= (|Seq#Take| (|Seq#Update| s@@33 i@@17 v@@37) n@@17) (|Seq#Update| (|Seq#Take| s@@33 n@@17) i@@17 v@@37))))) :qid |DafnyPreludebpl.1092:18| :skolemid |606| :pattern ( (|Seq#Take| (|Seq#Update| s@@33 i@@17 v@@37) n@@17)) )))
(assert (forall ((s@@34 T@U) (i@@18 Int) (v@@38 T@U) (n@@18 Int) ) (! (let ((T@@137 (type v@@38))) (=> (= (type s@@34) (SeqType T@@137)) (=> (and (<= n@@18 i@@18) (< i@@18 (|Seq#Length| s@@34))) (= (|Seq#Take| (|Seq#Update| s@@34 i@@18 v@@38) n@@18) (|Seq#Take| s@@34 n@@18))))) :qid |DafnyPreludebpl.1095:18| :skolemid |607| :pattern ( (|Seq#Take| (|Seq#Update| s@@34 i@@18 v@@38) n@@18)) )))
(assert (forall ((s@@35 T@U) (i@@19 Int) (v@@39 T@U) (n@@19 Int) ) (! (let ((T@@138 (type v@@39))) (=> (= (type s@@35) (SeqType T@@138)) (=> (and (and (<= 0 n@@19) (<= n@@19 i@@19)) (< i@@19 (|Seq#Length| s@@35))) (= (|Seq#Drop| (|Seq#Update| s@@35 i@@19 v@@39) n@@19) (|Seq#Update| (|Seq#Drop| s@@35 n@@19) (- i@@19 n@@19) v@@39))))) :qid |DafnyPreludebpl.1098:18| :skolemid |608| :pattern ( (|Seq#Drop| (|Seq#Update| s@@35 i@@19 v@@39) n@@19)) )))
(assert (forall ((s@@36 T@U) (i@@20 Int) (v@@40 T@U) (n@@20 Int) ) (! (let ((T@@139 (type v@@40))) (=> (= (type s@@36) (SeqType T@@139)) (=> (and (and (<= 0 i@@20) (< i@@20 n@@20)) (< n@@20 (|Seq#Length| s@@36))) (= (|Seq#Drop| (|Seq#Update| s@@36 i@@20 v@@40) n@@20) (|Seq#Drop| s@@36 n@@20))))) :qid |DafnyPreludebpl.1101:18| :skolemid |609| :pattern ( (|Seq#Drop| (|Seq#Update| s@@36 i@@20 v@@40) n@@20)) )))
(assert (forall ((h@@20 T@U) (a@@72 T@U) (n0 Int) (n1 Int) ) (!  (=> (and (= (type h@@20) (MapType0Type refType MapType1Type)) (= (type a@@72) refType)) (=> (and (and (= (+ n0 1) n1) (<= 0 n0)) (<= n1 (_System.array.Length a@@72))) (= (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n1) (|Seq#Build| (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n0) (MapType1Select (MapType0Select h@@20 a@@72) (IndexField n0)))))) :qid |DafnyPreludebpl.1105:15| :skolemid |610| :pattern ( (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n0) (|Seq#Take| (|Seq#FromArray| h@@20 a@@72) n1)) )))
(assert (forall ((s@@37 T@U) (v@@41 T@U) (n@@21 Int) ) (! (let ((T@@140 (type v@@41))) (=> (= (type s@@37) (SeqType T@@140)) (=> (and (<= 0 n@@21) (<= n@@21 (|Seq#Length| s@@37))) (= (|Seq#Drop| (|Seq#Build| s@@37 v@@41) n@@21) (|Seq#Build| (|Seq#Drop| s@@37 n@@21) v@@41))))) :qid |DafnyPreludebpl.1109:18| :skolemid |611| :pattern ( (|Seq#Drop| (|Seq#Build| s@@37 v@@41) n@@21)) )))
(assert (forall ((s@@38 T@U) (i@@21 Int) ) (!  (=> (= (type s@@38) (SeqType BoxType)) (=> (and (<= 0 i@@21) (< i@@21 (|Seq#Length| s@@38))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@21))) (|Seq#Rank| s@@38)))) :qid |DafnyPreludebpl.1114:15| :skolemid |612| :pattern ( (DtRank ($Unbox DatatypeTypeType (|Seq#Index| s@@38 i@@21)))) )))
(assert (forall ((s@@39 T@U) (i@@22 Int) ) (! (let ((T@@141 (SeqTypeInv0 (type s@@39)))) (=> (= (type s@@39) (SeqType T@@141)) (=> (and (< 0 i@@22) (<= i@@22 (|Seq#Length| s@@39))) (< (|Seq#Rank| (|Seq#Drop| s@@39 i@@22)) (|Seq#Rank| s@@39))))) :qid |DafnyPreludebpl.1117:18| :skolemid |613| :pattern ( (|Seq#Rank| (|Seq#Drop| s@@39 i@@22))) )))
(assert (forall ((s@@40 T@U) (i@@23 Int) ) (! (let ((T@@142 (SeqTypeInv0 (type s@@40)))) (=> (= (type s@@40) (SeqType T@@142)) (=> (and (<= 0 i@@23) (< i@@23 (|Seq#Length| s@@40))) (< (|Seq#Rank| (|Seq#Take| s@@40 i@@23)) (|Seq#Rank| s@@40))))) :qid |DafnyPreludebpl.1120:18| :skolemid |614| :pattern ( (|Seq#Rank| (|Seq#Take| s@@40 i@@23))) )))
(assert (forall ((s@@41 T@U) (i@@24 Int) (j@@3 Int) ) (! (let ((T@@143 (SeqTypeInv0 (type s@@41)))) (=> (= (type s@@41) (SeqType T@@143)) (=> (and (and (<= 0 i@@24) (< i@@24 j@@3)) (<= j@@3 (|Seq#Length| s@@41))) (< (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@24) (|Seq#Drop| s@@41 j@@3))) (|Seq#Rank| s@@41))))) :qid |DafnyPreludebpl.1123:18| :skolemid |615| :pattern ( (|Seq#Rank| (|Seq#Append| (|Seq#Take| s@@41 i@@24) (|Seq#Drop| s@@41 j@@3)))) )))
(assert (forall ((s@@42 T@U) (n@@22 Int) ) (! (let ((T@@144 (SeqTypeInv0 (type s@@42)))) (=> (and (= (type s@@42) (SeqType T@@144)) (= n@@22 0)) (= (|Seq#Drop| s@@42 n@@22) s@@42))) :qid |DafnyPreludebpl.1128:18| :skolemid |616| :pattern ( (|Seq#Drop| s@@42 n@@22)) )))
(assert (forall ((s@@43 T@U) (n@@23 Int) ) (! (let ((T@@145 (SeqTypeInv0 (type s@@43)))) (=> (and (= (type s@@43) (SeqType T@@145)) (= n@@23 0)) (= (|Seq#Take| s@@43 n@@23) (|Seq#Empty| T@@145)))) :qid |DafnyPreludebpl.1130:18| :skolemid |617| :pattern ( (|Seq#Take| s@@43 n@@23)) )))
(assert (forall ((s@@44 T@U) (m@@9 Int) (n@@24 Int) ) (! (let ((T@@146 (SeqTypeInv0 (type s@@44)))) (=> (= (type s@@44) (SeqType T@@146)) (=> (and (and (<= 0 m@@9) (<= 0 n@@24)) (<= (+ m@@9 n@@24) (|Seq#Length| s@@44))) (= (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24) (|Seq#Drop| s@@44 (+ m@@9 n@@24)))))) :qid |DafnyPreludebpl.1132:18| :skolemid |618| :pattern ( (|Seq#Drop| (|Seq#Drop| s@@44 m@@9) n@@24)) )))
(assert (forall ((m@@10 T@U) ) (! (let ((V@@3 (MapTypeInv1 (type m@@10)))) (let ((U@@3 (MapTypeInv0 (type m@@10)))) (=> (= (type m@@10) (MapType U@@3 V@@3)) (<= 0 (|Map#Card| m@@10))))) :qid |DafnyPreludebpl.1150:20| :skolemid |619| :pattern ( (|Map#Card| m@@10)) )))
(assert (forall ((U@@4 T@T) (V@@4 T@T) ) (! (= (type (|Map#Empty| U@@4 V@@4)) (MapType U@@4 V@@4)) :qid |funType:Map#Empty| :pattern ( (|Map#Empty| U@@4 V@@4)) )))
(assert (forall ((m@@11 T@U) ) (! (let ((V@@5 (MapTypeInv1 (type m@@11)))) (let ((U@@5 (MapTypeInv0 (type m@@11)))) (=> (= (type m@@11) (MapType U@@5 V@@5)) (= (= (|Map#Card| m@@11) 0) (= m@@11 (|Map#Empty| U@@5 V@@5)))))) :qid |DafnyPreludebpl.1152:21| :skolemid |620| :pattern ( (|Map#Card| m@@11)) )))
(assert (forall ((m@@12 T@U) ) (! (let ((V@@6 (MapTypeInv1 (type m@@12)))) (let ((U@@6 (MapTypeInv0 (type m@@12)))) (=> (= (type m@@12) (MapType U@@6 V@@6)) (or (= m@@12 (|Map#Empty| U@@6 V@@6)) (exists ((k@@4 T@U) ) (!  (and (= (type k@@4) U@@6) (U_2_bool (MapType0Select (|Map#Domain| m@@12) k@@4))) :qid |DafnyPreludebpl.1158:31| :skolemid |621| :no-pattern (type k@@4) :no-pattern (U_2_int k@@4) :no-pattern (U_2_bool k@@4) )))))) :qid |DafnyPreludebpl.1156:21| :skolemid |622| :pattern ( (|Map#Domain| m@@12)) )))
(assert (forall ((m@@13 T@U) ) (! (let ((V@@7 (MapTypeInv1 (type m@@13)))) (let ((U@@7 (MapTypeInv0 (type m@@13)))) (=> (= (type m@@13) (MapType U@@7 V@@7)) (or (= m@@13 (|Map#Empty| U@@7 V@@7)) (exists ((v@@42 T@U) ) (!  (and (= (type v@@42) V@@7) (U_2_bool (MapType0Select (|Map#Values| m@@13) v@@42))) :qid |DafnyPreludebpl.1161:31| :skolemid |623| :no-pattern (type v@@42) :no-pattern (U_2_int v@@42) :no-pattern (U_2_bool v@@42) )))))) :qid |DafnyPreludebpl.1159:21| :skolemid |624| :pattern ( (|Map#Values| m@@13)) )))
(assert (forall ((arg0@@102 T@U) (arg1@@44 T@U) ) (! (= (type (|#_System._tuple#2._#Make2| arg0@@102 arg1@@44)) DatatypeTypeType) :qid |funType:#_System._tuple#2._#Make2| :pattern ( (|#_System._tuple#2._#Make2| arg0@@102 arg1@@44)) )))
(assert (forall ((m@@14 T@U) ) (! (let ((V@@8 (MapTypeInv1 (type m@@14)))) (let ((U@@8 (MapTypeInv0 (type m@@14)))) (=> (= (type m@@14) (MapType U@@8 V@@8)) (or (= m@@14 (|Map#Empty| U@@8 V@@8)) (exists ((k@@5 T@U) (v@@43 T@U) ) (!  (and (and (= (type k@@5) BoxType) (= (type v@@43) BoxType)) (U_2_bool (MapType0Select (|Map#Items| m@@14) ($Box (|#_System._tuple#2._#Make2| k@@5 v@@43))))) :qid |DafnyPreludebpl.1164:31| :skolemid |625| :no-pattern (type k@@5) :no-pattern (type v@@43) :no-pattern (U_2_int k@@5) :no-pattern (U_2_bool k@@5) :no-pattern (U_2_int v@@43) :no-pattern (U_2_bool v@@43) )))))) :qid |DafnyPreludebpl.1162:21| :skolemid |626| :pattern ( (|Map#Items| m@@14)) )))
(assert (forall ((m@@15 T@U) ) (! (let ((V@@9 (MapTypeInv1 (type m@@15)))) (let ((U@@9 (MapTypeInv0 (type m@@15)))) (=> (= (type m@@15) (MapType U@@9 V@@9)) (= (|Set#Card| (|Map#Domain| m@@15)) (|Map#Card| m@@15))))) :qid |DafnyPreludebpl.1166:21| :skolemid |627| :pattern ( (|Set#Card| (|Map#Domain| m@@15))) )))
(assert (forall ((m@@16 T@U) ) (! (let ((V@@10 (MapTypeInv1 (type m@@16)))) (let ((U@@10 (MapTypeInv0 (type m@@16)))) (=> (= (type m@@16) (MapType U@@10 V@@10)) (<= (|Set#Card| (|Map#Values| m@@16)) (|Map#Card| m@@16))))) :qid |DafnyPreludebpl.1169:21| :skolemid |628| :pattern ( (|Set#Card| (|Map#Values| m@@16))) )))
(assert (forall ((m@@17 T@U) ) (! (let ((V@@11 (MapTypeInv1 (type m@@17)))) (let ((U@@11 (MapTypeInv0 (type m@@17)))) (=> (= (type m@@17) (MapType U@@11 V@@11)) (= (|Set#Card| (|Map#Items| m@@17)) (|Map#Card| m@@17))))) :qid |DafnyPreludebpl.1172:21| :skolemid |629| :pattern ( (|Set#Card| (|Map#Items| m@@17))) )))
(assert (forall ((m@@18 T@U) (v@@44 T@U) ) (! (let ((V@@12 (type v@@44))) (let ((U@@12 (MapTypeInv0 (type m@@18)))) (=> (= (type m@@18) (MapType U@@12 V@@12)) (= (U_2_bool (MapType0Select (|Map#Values| m@@18) v@@44)) (exists ((u@@5 T@U) ) (!  (and (= (type u@@5) U@@12) (and (U_2_bool (MapType0Select (|Map#Domain| m@@18) u@@5)) (= v@@44 (MapType0Select (|Map#Elements| m@@18) u@@5)))) :qid |DafnyPreludebpl.1185:10| :skolemid |630| :pattern ( (MapType0Select (|Map#Domain| m@@18) u@@5)) :pattern ( (MapType0Select (|Map#Elements| m@@18) u@@5)) )))))) :qid |DafnyPreludebpl.1183:20| :skolemid |631| :pattern ( (MapType0Select (|Map#Values| m@@18) v@@44)) )))
(assert  (and (forall ((arg0@@103 T@U) ) (! (= (type (_System.Tuple2._0 arg0@@103)) BoxType) :qid |funType:_System.Tuple2._0| :pattern ( (_System.Tuple2._0 arg0@@103)) )) (forall ((arg0@@104 T@U) ) (! (= (type (_System.Tuple2._1 arg0@@104)) BoxType) :qid |funType:_System.Tuple2._1| :pattern ( (_System.Tuple2._1 arg0@@104)) ))))
(assert (forall ((m@@19 T@U) (item T@U) ) (!  (=> (and (= (type m@@19) (MapType BoxType BoxType)) (= (type item) BoxType)) (= (U_2_bool (MapType0Select (|Map#Items| m@@19) item))  (and (U_2_bool (MapType0Select (|Map#Domain| m@@19) (_System.Tuple2._0 ($Unbox DatatypeTypeType item)))) (= (MapType0Select (|Map#Elements| m@@19) (_System.Tuple2._0 ($Unbox DatatypeTypeType item))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item)))))) :qid |DafnyPreludebpl.1204:15| :skolemid |632| :pattern ( (MapType0Select (|Map#Items| m@@19) item)) )))
(assert (forall ((u@@6 T@U) (V@@13 T@T) ) (! (let ((U@@13 (type u@@6))) (not (U_2_bool (MapType0Select (|Map#Domain| (|Map#Empty| U@@13 V@@13)) u@@6)))) :qid |DafnyPreludebpl.1212:21| :skolemid |633| :pattern ( (let ((U@@13 (type u@@6))) (MapType0Select (|Map#Domain| (|Map#Empty| U@@13 V@@13)) u@@6))) )))
(assert (forall ((arg0@@105 T@U) (arg1@@45 T@U) (arg2@@4 T@U) ) (! (let ((V@@14 (MapType0TypeInv1 (type arg1@@45)))) (let ((U@@14 (MapType0TypeInv0 (type arg0@@105)))) (= (type (|Map#Glue| arg0@@105 arg1@@45 arg2@@4)) (MapType U@@14 V@@14)))) :qid |funType:Map#Glue| :pattern ( (|Map#Glue| arg0@@105 arg1@@45 arg2@@4)) )))
(assert (forall ((a@@73 T@U) (b@@52 T@U) (t@@27 T@U) ) (! (let ((V@@15 (MapType0TypeInv1 (type b@@52)))) (let ((U@@15 (MapType0TypeInv0 (type a@@73)))) (=> (and (and (= (type a@@73) (MapType0Type U@@15 boolType)) (= (type b@@52) (MapType0Type U@@15 V@@15))) (= (type t@@27) TyType)) (= (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27)) a@@73)))) :qid |DafnyPreludebpl.1217:21| :skolemid |634| :pattern ( (|Map#Domain| (|Map#Glue| a@@73 b@@52 t@@27))) )))
(assert (forall ((a@@74 T@U) (b@@53 T@U) (t@@28 T@U) ) (! (let ((V@@16 (MapType0TypeInv1 (type b@@53)))) (let ((U@@16 (MapType0TypeInv0 (type a@@74)))) (=> (and (and (= (type a@@74) (MapType0Type U@@16 boolType)) (= (type b@@53) (MapType0Type U@@16 V@@16))) (= (type t@@28) TyType)) (= (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@28)) b@@53)))) :qid |DafnyPreludebpl.1220:21| :skolemid |635| :pattern ( (|Map#Elements| (|Map#Glue| a@@74 b@@53 t@@28))) )))
(assert (forall ((a@@75 T@U) (b@@54 T@U) (t0@@14 T@U) (t1@@5 T@U) ) (!  (=> (and (and (and (and (= (type a@@75) (MapType0Type BoxType boolType)) (= (type b@@54) (MapType0Type BoxType BoxType))) (= (type t0@@14) TyType)) (= (type t1@@5) TyType)) (forall ((bx@@24 T@U) ) (!  (=> (and (= (type bx@@24) BoxType) (U_2_bool (MapType0Select a@@75 bx@@24))) (and ($IsBox bx@@24 t0@@14) ($IsBox (MapType0Select b@@54 bx@@24) t1@@5))) :qid |DafnyPreludebpl.1226:11| :skolemid |636| :no-pattern (type bx@@24) :no-pattern (U_2_int bx@@24) :no-pattern (U_2_bool bx@@24) ))) ($Is (|Map#Glue| a@@75 b@@54 (TMap t0@@14 t1@@5)) (TMap t0@@14 t1@@5))) :qid |DafnyPreludebpl.1223:15| :skolemid |637| :pattern ( (|Map#Glue| a@@75 b@@54 (TMap t0@@14 t1@@5))) )))
(assert (forall ((arg0@@106 T@U) (arg1@@46 T@U) (arg2@@5 T@U) ) (! (let ((V@@17 (type arg2@@5))) (let ((U@@17 (type arg1@@46))) (= (type (|Map#Build| arg0@@106 arg1@@46 arg2@@5)) (MapType U@@17 V@@17)))) :qid |funType:Map#Build| :pattern ( (|Map#Build| arg0@@106 arg1@@46 arg2@@5)) )))
(assert (forall ((m@@20 T@U) (u@@7 T@U) (|u'| T@U) (v@@45 T@U) ) (! (let ((V@@18 (type v@@45))) (let ((U@@18 (type u@@7))) (=> (and (= (type m@@20) (MapType U@@18 V@@18)) (= (type |u'|) U@@18)) (and (=> (= |u'| u@@7) (and (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|) v@@45))) (=> (not (= |u'| u@@7)) (and (= (U_2_bool (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) (U_2_bool (MapType0Select (|Map#Domain| m@@20) |u'|))) (= (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|) (MapType0Select (|Map#Elements| m@@20) |u'|)))))))) :qid |DafnyPreludebpl.1237:21| :skolemid |638| :pattern ( (MapType0Select (|Map#Domain| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) :pattern ( (MapType0Select (|Map#Elements| (|Map#Build| m@@20 u@@7 v@@45)) |u'|)) )))
(assert (forall ((m@@21 T@U) (u@@8 T@U) (v@@46 T@U) ) (! (let ((V@@19 (type v@@46))) (let ((U@@19 (type u@@8))) (=> (and (= (type m@@21) (MapType U@@19 V@@19)) (U_2_bool (MapType0Select (|Map#Domain| m@@21) u@@8))) (= (|Map#Card| (|Map#Build| m@@21 u@@8 v@@46)) (|Map#Card| m@@21))))) :qid |DafnyPreludebpl.1243:21| :skolemid |639| :pattern ( (|Map#Card| (|Map#Build| m@@21 u@@8 v@@46))) )))
(assert (forall ((m@@22 T@U) (u@@9 T@U) (v@@47 T@U) ) (! (let ((V@@20 (type v@@47))) (let ((U@@20 (type u@@9))) (=> (and (= (type m@@22) (MapType U@@20 V@@20)) (not (U_2_bool (MapType0Select (|Map#Domain| m@@22) u@@9)))) (= (|Map#Card| (|Map#Build| m@@22 u@@9 v@@47)) (+ (|Map#Card| m@@22) 1))))) :qid |DafnyPreludebpl.1245:21| :skolemid |640| :pattern ( (|Map#Card| (|Map#Build| m@@22 u@@9 v@@47))) )))
(assert (forall ((arg0@@107 T@U) (arg1@@47 T@U) ) (! (let ((V@@21 (MapTypeInv1 (type arg0@@107)))) (let ((U@@21 (MapTypeInv0 (type arg0@@107)))) (= (type (|Map#Merge| arg0@@107 arg1@@47)) (MapType U@@21 V@@21)))) :qid |funType:Map#Merge| :pattern ( (|Map#Merge| arg0@@107 arg1@@47)) )))
(assert (forall ((m@@23 T@U) (n@@25 T@U) ) (! (let ((V@@22 (MapTypeInv1 (type m@@23)))) (let ((U@@22 (MapTypeInv0 (type m@@23)))) (=> (and (= (type m@@23) (MapType U@@22 V@@22)) (= (type n@@25) (MapType U@@22 V@@22))) (= (|Map#Domain| (|Map#Merge| m@@23 n@@25)) (|Set#Union| (|Map#Domain| m@@23) (|Map#Domain| n@@25)))))) :qid |DafnyPreludebpl.1250:21| :skolemid |641| :pattern ( (|Map#Domain| (|Map#Merge| m@@23 n@@25))) )))
(assert (forall ((m@@24 T@U) (n@@26 T@U) (u@@10 T@U) ) (! (let ((V@@23 (MapTypeInv1 (type m@@24)))) (let ((U@@23 (type u@@10))) (=> (and (and (= (type m@@24) (MapType U@@23 V@@23)) (= (type n@@26) (MapType U@@23 V@@23))) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Merge| m@@24 n@@26)) u@@10))) (and (=> (not (U_2_bool (MapType0Select (|Map#Domain| n@@26) u@@10))) (= (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10) (MapType0Select (|Map#Elements| m@@24) u@@10))) (=> (U_2_bool (MapType0Select (|Map#Domain| n@@26) u@@10)) (= (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10) (MapType0Select (|Map#Elements| n@@26) u@@10))))))) :qid |DafnyPreludebpl.1253:21| :skolemid |642| :pattern ( (MapType0Select (|Map#Elements| (|Map#Merge| m@@24 n@@26)) u@@10)) )))
(assert (forall ((arg0@@108 T@U) (arg1@@48 T@U) ) (! (let ((V@@24 (MapTypeInv1 (type arg0@@108)))) (let ((U@@24 (MapTypeInv0 (type arg0@@108)))) (= (type (|Map#Subtract| arg0@@108 arg1@@48)) (MapType U@@24 V@@24)))) :qid |funType:Map#Subtract| :pattern ( (|Map#Subtract| arg0@@108 arg1@@48)) )))
(assert (forall ((m@@25 T@U) (s@@45 T@U) ) (! (let ((V@@25 (MapTypeInv1 (type m@@25)))) (let ((U@@25 (MapTypeInv0 (type m@@25)))) (=> (and (= (type m@@25) (MapType U@@25 V@@25)) (= (type s@@45) (MapType0Type U@@25 boolType))) (= (|Map#Domain| (|Map#Subtract| m@@25 s@@45)) (|Set#Difference| (|Map#Domain| m@@25) s@@45))))) :qid |DafnyPreludebpl.1260:21| :skolemid |643| :pattern ( (|Map#Domain| (|Map#Subtract| m@@25 s@@45))) )))
(assert (forall ((m@@26 T@U) (s@@46 T@U) (u@@11 T@U) ) (! (let ((V@@26 (MapTypeInv1 (type m@@26)))) (let ((U@@26 (type u@@11))) (=> (and (and (= (type m@@26) (MapType U@@26 V@@26)) (= (type s@@46) (MapType0Type U@@26 boolType))) (U_2_bool (MapType0Select (|Map#Domain| (|Map#Subtract| m@@26 s@@46)) u@@11))) (= (MapType0Select (|Map#Elements| (|Map#Subtract| m@@26 s@@46)) u@@11) (MapType0Select (|Map#Elements| m@@26) u@@11))))) :qid |DafnyPreludebpl.1263:21| :skolemid |644| :pattern ( (MapType0Select (|Map#Elements| (|Map#Subtract| m@@26 s@@46)) u@@11)) )))
(assert (forall ((m@@27 T@U) (|m'| T@U) ) (! (let ((V@@27 (MapTypeInv1 (type m@@27)))) (let ((U@@27 (MapTypeInv0 (type m@@27)))) (=> (and (= (type m@@27) (MapType U@@27 V@@27)) (= (type |m'|) (MapType U@@27 V@@27))) (= (|Map#Equal| m@@27 |m'|)  (and (forall ((u@@12 T@U) ) (!  (=> (= (type u@@12) U@@27) (= (U_2_bool (MapType0Select (|Map#Domain| m@@27) u@@12)) (U_2_bool (MapType0Select (|Map#Domain| |m'|) u@@12)))) :qid |DafnyPreludebpl.1272:35| :skolemid |645| :no-pattern (type u@@12) :no-pattern (U_2_int u@@12) :no-pattern (U_2_bool u@@12) )) (forall ((u@@13 T@U) ) (!  (=> (and (= (type u@@13) U@@27) (U_2_bool (MapType0Select (|Map#Domain| m@@27) u@@13))) (= (MapType0Select (|Map#Elements| m@@27) u@@13) (MapType0Select (|Map#Elements| |m'|) u@@13))) :qid |DafnyPreludebpl.1273:35| :skolemid |646| :no-pattern (type u@@13) :no-pattern (U_2_int u@@13) :no-pattern (U_2_bool u@@13) ))))))) :qid |DafnyPreludebpl.1270:21| :skolemid |647| :pattern ( (|Map#Equal| m@@27 |m'|)) )))
(assert (forall ((m@@28 T@U) (|m'@@0| T@U) ) (! (let ((V@@28 (MapTypeInv1 (type m@@28)))) (let ((U@@28 (MapTypeInv0 (type m@@28)))) (=> (and (and (= (type m@@28) (MapType U@@28 V@@28)) (= (type |m'@@0|) (MapType U@@28 V@@28))) (|Map#Equal| m@@28 |m'@@0|)) (= m@@28 |m'@@0|)))) :qid |DafnyPreludebpl.1275:21| :skolemid |648| :pattern ( (|Map#Equal| m@@28 |m'@@0|)) )))
(assert (forall ((m@@29 T@U) (|m'@@1| T@U) ) (! (let ((V@@29 (MapTypeInv1 (type m@@29)))) (let ((U@@29 (MapTypeInv0 (type m@@29)))) (=> (and (= (type m@@29) (MapType U@@29 V@@29)) (= (type |m'@@1|) (MapType U@@29 V@@29))) (= (|Map#Disjoint| m@@29 |m'@@1|) (forall ((o@@43 T@U) ) (!  (=> (= (type o@@43) U@@29) (or (not (U_2_bool (MapType0Select (|Map#Domain| m@@29) o@@43))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'@@1|) o@@43))))) :qid |DafnyPreludebpl.1282:38| :skolemid |649| :pattern ( (MapType0Select (|Map#Domain| m@@29) o@@43)) :pattern ( (MapType0Select (|Map#Domain| |m'@@1|) o@@43)) )))))) :qid |DafnyPreludebpl.1280:21| :skolemid |650| :pattern ( (|Map#Disjoint| m@@29 |m'@@1|)) )))
(assert (forall ((U@@30 T@T) (V@@30 T@T) ) (! (= (type (|IMap#Empty| U@@30 V@@30)) (IMapType U@@30 V@@30)) :qid |funType:IMap#Empty| :pattern ( (|IMap#Empty| U@@30 V@@30)) )))
(assert (forall ((m@@30 T@U) ) (! (let ((V@@31 (IMapTypeInv1 (type m@@30)))) (let ((U@@31 (IMapTypeInv0 (type m@@30)))) (=> (= (type m@@30) (IMapType U@@31 V@@31)) (or (= m@@30 (|IMap#Empty| U@@31 V@@31)) (exists ((k@@6 T@U) ) (!  (and (= (type k@@6) U@@31) (U_2_bool (MapType0Select (|IMap#Domain| m@@30) k@@6))) :qid |DafnyPreludebpl.1298:32| :skolemid |651| :no-pattern (type k@@6) :no-pattern (U_2_int k@@6) :no-pattern (U_2_bool k@@6) )))))) :qid |DafnyPreludebpl.1296:21| :skolemid |652| :pattern ( (|IMap#Domain| m@@30)) )))
(assert (forall ((m@@31 T@U) ) (! (let ((V@@32 (IMapTypeInv1 (type m@@31)))) (let ((U@@32 (IMapTypeInv0 (type m@@31)))) (=> (= (type m@@31) (IMapType U@@32 V@@32)) (or (= m@@31 (|IMap#Empty| U@@32 V@@32)) (exists ((v@@48 T@U) ) (!  (and (= (type v@@48) V@@32) (U_2_bool (MapType0Select (|IMap#Values| m@@31) v@@48))) :qid |DafnyPreludebpl.1301:32| :skolemid |653| :no-pattern (type v@@48) :no-pattern (U_2_int v@@48) :no-pattern (U_2_bool v@@48) )))))) :qid |DafnyPreludebpl.1299:21| :skolemid |654| :pattern ( (|IMap#Values| m@@31)) )))
(assert (forall ((m@@32 T@U) ) (! (let ((V@@33 (IMapTypeInv1 (type m@@32)))) (let ((U@@33 (IMapTypeInv0 (type m@@32)))) (=> (= (type m@@32) (IMapType U@@33 V@@33)) (or (= m@@32 (|IMap#Empty| U@@33 V@@33)) (exists ((k@@7 T@U) (v@@49 T@U) ) (!  (and (and (= (type k@@7) BoxType) (= (type v@@49) BoxType)) (U_2_bool (MapType0Select (|IMap#Items| m@@32) ($Box (|#_System._tuple#2._#Make2| k@@7 v@@49))))) :qid |DafnyPreludebpl.1304:32| :skolemid |655| :no-pattern (type k@@7) :no-pattern (type v@@49) :no-pattern (U_2_int k@@7) :no-pattern (U_2_bool k@@7) :no-pattern (U_2_int v@@49) :no-pattern (U_2_bool v@@49) )))))) :qid |DafnyPreludebpl.1302:21| :skolemid |656| :pattern ( (|IMap#Items| m@@32)) )))
(assert (forall ((m@@33 T@U) ) (! (let ((V@@34 (IMapTypeInv1 (type m@@33)))) (let ((U@@34 (IMapTypeInv0 (type m@@33)))) (=> (= (type m@@33) (IMapType U@@34 V@@34)) (= (= m@@33 (|IMap#Empty| U@@34 V@@34)) (= (|IMap#Domain| m@@33) (|ISet#Empty| U@@34)))))) :qid |DafnyPreludebpl.1306:21| :skolemid |657| :pattern ( (|IMap#Domain| m@@33)) )))
(assert (forall ((m@@34 T@U) ) (! (let ((V@@35 (IMapTypeInv1 (type m@@34)))) (let ((U@@35 (IMapTypeInv0 (type m@@34)))) (=> (= (type m@@34) (IMapType U@@35 V@@35)) (= (= m@@34 (|IMap#Empty| U@@35 V@@35)) (= (|IMap#Values| m@@34) (|ISet#Empty| V@@35)))))) :qid |DafnyPreludebpl.1309:21| :skolemid |658| :pattern ( (|IMap#Values| m@@34)) )))
(assert (forall ((m@@35 T@U) ) (! (let ((V@@36 (IMapTypeInv1 (type m@@35)))) (let ((U@@36 (IMapTypeInv0 (type m@@35)))) (=> (= (type m@@35) (IMapType U@@36 V@@36)) (= (= m@@35 (|IMap#Empty| U@@36 V@@36)) (= (|IMap#Items| m@@35) (|ISet#Empty| BoxType)))))) :qid |DafnyPreludebpl.1312:21| :skolemid |659| :pattern ( (|IMap#Items| m@@35)) )))
(assert (forall ((m@@36 T@U) (v@@50 T@U) ) (! (let ((V@@37 (type v@@50))) (let ((U@@37 (IMapTypeInv0 (type m@@36)))) (=> (= (type m@@36) (IMapType U@@37 V@@37)) (= (U_2_bool (MapType0Select (|IMap#Values| m@@36) v@@50)) (exists ((u@@14 T@U) ) (!  (and (= (type u@@14) U@@37) (and (U_2_bool (MapType0Select (|IMap#Domain| m@@36) u@@14)) (= v@@50 (MapType0Select (|IMap#Elements| m@@36) u@@14)))) :qid |DafnyPreludebpl.1325:10| :skolemid |660| :pattern ( (MapType0Select (|IMap#Domain| m@@36) u@@14)) :pattern ( (MapType0Select (|IMap#Elements| m@@36) u@@14)) )))))) :qid |DafnyPreludebpl.1323:20| :skolemid |661| :pattern ( (MapType0Select (|IMap#Values| m@@36) v@@50)) )))
(assert (forall ((m@@37 T@U) (item@@0 T@U) ) (!  (=> (and (= (type m@@37) (IMapType BoxType BoxType)) (= (type item@@0) BoxType)) (= (U_2_bool (MapType0Select (|IMap#Items| m@@37) item@@0))  (and (U_2_bool (MapType0Select (|IMap#Domain| m@@37) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0)))) (= (MapType0Select (|IMap#Elements| m@@37) (_System.Tuple2._0 ($Unbox DatatypeTypeType item@@0))) (_System.Tuple2._1 ($Unbox DatatypeTypeType item@@0)))))) :qid |DafnyPreludebpl.1340:15| :skolemid |662| :pattern ( (MapType0Select (|IMap#Items| m@@37) item@@0)) )))
(assert (forall ((u@@15 T@U) (V@@38 T@T) ) (! (let ((U@@38 (type u@@15))) (not (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@38 V@@38)) u@@15)))) :qid |DafnyPreludebpl.1347:21| :skolemid |663| :pattern ( (let ((U@@38 (type u@@15))) (MapType0Select (|IMap#Domain| (|IMap#Empty| U@@38 V@@38)) u@@15))) )))
(assert (forall ((arg0@@109 T@U) (arg1@@49 T@U) (arg2@@6 T@U) ) (! (let ((V@@39 (MapType0TypeInv1 (type arg1@@49)))) (let ((U@@39 (MapType0TypeInv0 (type arg0@@109)))) (= (type (|IMap#Glue| arg0@@109 arg1@@49 arg2@@6)) (IMapType U@@39 V@@39)))) :qid |funType:IMap#Glue| :pattern ( (|IMap#Glue| arg0@@109 arg1@@49 arg2@@6)) )))
(assert (forall ((a@@76 T@U) (b@@55 T@U) (t@@29 T@U) ) (! (let ((V@@40 (MapType0TypeInv1 (type b@@55)))) (let ((U@@40 (MapType0TypeInv0 (type a@@76)))) (=> (and (and (= (type a@@76) (MapType0Type U@@40 boolType)) (= (type b@@55) (MapType0Type U@@40 V@@40))) (= (type t@@29) TyType)) (= (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@29)) a@@76)))) :qid |DafnyPreludebpl.1352:21| :skolemid |664| :pattern ( (|IMap#Domain| (|IMap#Glue| a@@76 b@@55 t@@29))) )))
(assert (forall ((a@@77 T@U) (b@@56 T@U) (t@@30 T@U) ) (! (let ((V@@41 (MapType0TypeInv1 (type b@@56)))) (let ((U@@41 (MapType0TypeInv0 (type a@@77)))) (=> (and (and (= (type a@@77) (MapType0Type U@@41 boolType)) (= (type b@@56) (MapType0Type U@@41 V@@41))) (= (type t@@30) TyType)) (= (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@30)) b@@56)))) :qid |DafnyPreludebpl.1355:21| :skolemid |665| :pattern ( (|IMap#Elements| (|IMap#Glue| a@@77 b@@56 t@@30))) )))
(assert (forall ((a@@78 T@U) (b@@57 T@U) (t0@@15 T@U) (t1@@6 T@U) ) (!  (=> (and (and (and (and (= (type a@@78) (MapType0Type BoxType boolType)) (= (type b@@57) (MapType0Type BoxType BoxType))) (= (type t0@@15) TyType)) (= (type t1@@6) TyType)) (forall ((bx@@25 T@U) ) (!  (=> (and (= (type bx@@25) BoxType) (U_2_bool (MapType0Select a@@78 bx@@25))) (and ($IsBox bx@@25 t0@@15) ($IsBox (MapType0Select b@@57 bx@@25) t1@@6))) :qid |DafnyPreludebpl.1361:11| :skolemid |666| :no-pattern (type bx@@25) :no-pattern (U_2_int bx@@25) :no-pattern (U_2_bool bx@@25) ))) ($Is (|Map#Glue| a@@78 b@@57 (TIMap t0@@15 t1@@6)) (TIMap t0@@15 t1@@6))) :qid |DafnyPreludebpl.1358:15| :skolemid |667| :pattern ( (|IMap#Glue| a@@78 b@@57 (TIMap t0@@15 t1@@6))) )))
(assert (forall ((arg0@@110 T@U) (arg1@@50 T@U) (arg2@@7 T@U) ) (! (let ((V@@42 (type arg2@@7))) (let ((U@@42 (type arg1@@50))) (= (type (|IMap#Build| arg0@@110 arg1@@50 arg2@@7)) (IMapType U@@42 V@@42)))) :qid |funType:IMap#Build| :pattern ( (|IMap#Build| arg0@@110 arg1@@50 arg2@@7)) )))
(assert (forall ((m@@38 T@U) (u@@16 T@U) (|u'@@0| T@U) (v@@51 T@U) ) (! (let ((V@@43 (type v@@51))) (let ((U@@43 (type u@@16))) (=> (and (= (type m@@38) (IMapType U@@43 V@@43)) (= (type |u'@@0|) U@@43)) (and (=> (= |u'@@0| u@@16) (and (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|) v@@51))) (=> (not (= |u'@@0| u@@16)) (and (= (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) (U_2_bool (MapType0Select (|IMap#Domain| m@@38) |u'@@0|))) (= (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|) (MapType0Select (|IMap#Elements| m@@38) |u'@@0|)))))))) :qid |DafnyPreludebpl.1371:21| :skolemid |668| :pattern ( (MapType0Select (|IMap#Domain| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Build| m@@38 u@@16 v@@51)) |u'@@0|)) )))
(assert (forall ((m@@39 T@U) (|m'@@2| T@U) ) (! (let ((V@@44 (IMapTypeInv1 (type m@@39)))) (let ((U@@44 (IMapTypeInv0 (type m@@39)))) (=> (and (= (type m@@39) (IMapType U@@44 V@@44)) (= (type |m'@@2|) (IMapType U@@44 V@@44))) (= (|IMap#Equal| m@@39 |m'@@2|)  (and (forall ((u@@17 T@U) ) (!  (=> (= (type u@@17) U@@44) (= (U_2_bool (MapType0Select (|IMap#Domain| m@@39) u@@17)) (U_2_bool (MapType0Select (|IMap#Domain| |m'@@2|) u@@17)))) :qid |DafnyPreludebpl.1382:36| :skolemid |669| :no-pattern (type u@@17) :no-pattern (U_2_int u@@17) :no-pattern (U_2_bool u@@17) )) (forall ((u@@18 T@U) ) (!  (=> (and (= (type u@@18) U@@44) (U_2_bool (MapType0Select (|IMap#Domain| m@@39) u@@18))) (= (MapType0Select (|IMap#Elements| m@@39) u@@18) (MapType0Select (|IMap#Elements| |m'@@2|) u@@18))) :qid |DafnyPreludebpl.1383:35| :skolemid |670| :no-pattern (type u@@18) :no-pattern (U_2_int u@@18) :no-pattern (U_2_bool u@@18) ))))))) :qid |DafnyPreludebpl.1380:21| :skolemid |671| :pattern ( (|IMap#Equal| m@@39 |m'@@2|)) )))
(assert (forall ((m@@40 T@U) (|m'@@3| T@U) ) (! (let ((V@@45 (IMapTypeInv1 (type m@@40)))) (let ((U@@45 (IMapTypeInv0 (type m@@40)))) (=> (and (and (= (type m@@40) (IMapType U@@45 V@@45)) (= (type |m'@@3|) (IMapType U@@45 V@@45))) (|IMap#Equal| m@@40 |m'@@3|)) (= m@@40 |m'@@3|)))) :qid |DafnyPreludebpl.1385:21| :skolemid |672| :pattern ( (|IMap#Equal| m@@40 |m'@@3|)) )))
(assert (forall ((arg0@@111 T@U) (arg1@@51 T@U) ) (! (let ((V@@46 (IMapTypeInv1 (type arg0@@111)))) (let ((U@@46 (IMapTypeInv0 (type arg0@@111)))) (= (type (|IMap#Merge| arg0@@111 arg1@@51)) (IMapType U@@46 V@@46)))) :qid |funType:IMap#Merge| :pattern ( (|IMap#Merge| arg0@@111 arg1@@51)) )))
(assert (forall ((m@@41 T@U) (n@@27 T@U) ) (! (let ((V@@47 (IMapTypeInv1 (type m@@41)))) (let ((U@@47 (IMapTypeInv0 (type m@@41)))) (=> (and (= (type m@@41) (IMapType U@@47 V@@47)) (= (type n@@27) (IMapType U@@47 V@@47))) (= (|IMap#Domain| (|IMap#Merge| m@@41 n@@27)) (|Set#Union| (|IMap#Domain| m@@41) (|IMap#Domain| n@@27)))))) :qid |DafnyPreludebpl.1391:21| :skolemid |673| :pattern ( (|IMap#Domain| (|IMap#Merge| m@@41 n@@27))) )))
(assert (forall ((m@@42 T@U) (n@@28 T@U) (u@@19 T@U) ) (! (let ((V@@48 (IMapTypeInv1 (type m@@42)))) (let ((U@@48 (type u@@19))) (=> (and (and (= (type m@@42) (IMapType U@@48 V@@48)) (= (type n@@28) (IMapType U@@48 V@@48))) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Merge| m@@42 n@@28)) u@@19))) (and (=> (not (U_2_bool (MapType0Select (|IMap#Domain| n@@28) u@@19))) (= (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19) (MapType0Select (|IMap#Elements| m@@42) u@@19))) (=> (U_2_bool (MapType0Select (|IMap#Domain| n@@28) u@@19)) (= (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19) (MapType0Select (|IMap#Elements| n@@28) u@@19))))))) :qid |DafnyPreludebpl.1394:21| :skolemid |674| :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Merge| m@@42 n@@28)) u@@19)) )))
(assert (forall ((arg0@@112 T@U) (arg1@@52 T@U) ) (! (let ((V@@49 (IMapTypeInv1 (type arg0@@112)))) (let ((U@@49 (IMapTypeInv0 (type arg0@@112)))) (= (type (|IMap#Subtract| arg0@@112 arg1@@52)) (IMapType U@@49 V@@49)))) :qid |funType:IMap#Subtract| :pattern ( (|IMap#Subtract| arg0@@112 arg1@@52)) )))
(assert (forall ((m@@43 T@U) (s@@47 T@U) ) (! (let ((V@@50 (IMapTypeInv1 (type m@@43)))) (let ((U@@50 (IMapTypeInv0 (type m@@43)))) (=> (and (= (type m@@43) (IMapType U@@50 V@@50)) (= (type s@@47) (MapType0Type U@@50 boolType))) (= (|IMap#Domain| (|IMap#Subtract| m@@43 s@@47)) (|Set#Difference| (|IMap#Domain| m@@43) s@@47))))) :qid |DafnyPreludebpl.1401:21| :skolemid |675| :pattern ( (|IMap#Domain| (|IMap#Subtract| m@@43 s@@47))) )))
(assert (forall ((m@@44 T@U) (s@@48 T@U) (u@@20 T@U) ) (! (let ((V@@51 (IMapTypeInv1 (type m@@44)))) (let ((U@@51 (type u@@20))) (=> (and (and (= (type m@@44) (IMapType U@@51 V@@51)) (= (type s@@48) (MapType0Type U@@51 boolType))) (U_2_bool (MapType0Select (|IMap#Domain| (|IMap#Subtract| m@@44 s@@48)) u@@20))) (= (MapType0Select (|IMap#Elements| (|IMap#Subtract| m@@44 s@@48)) u@@20) (MapType0Select (|IMap#Elements| m@@44) u@@20))))) :qid |DafnyPreludebpl.1404:21| :skolemid |676| :pattern ( (MapType0Select (|IMap#Elements| (|IMap#Subtract| m@@44 s@@48)) u@@20)) )))
(assert (forall ((x@@42 Int) (y@@12 Int) ) (! (= (INTERNAL_add_boogie x@@42 y@@12) (+ x@@42 y@@12)) :qid |DafnyPreludebpl.1413:30| :skolemid |677| :pattern ( (INTERNAL_add_boogie x@@42 y@@12)) )))
(assert (forall ((x@@43 Int) (y@@13 Int) ) (! (= (INTERNAL_sub_boogie x@@43 y@@13) (- x@@43 y@@13)) :qid |DafnyPreludebpl.1414:30| :skolemid |678| :pattern ( (INTERNAL_sub_boogie x@@43 y@@13)) )))
(assert (forall ((x@@44 Int) (y@@14 Int) ) (! (= (INTERNAL_mul_boogie x@@44 y@@14) (* x@@44 y@@14)) :qid |DafnyPreludebpl.1415:30| :skolemid |679| :pattern ( (INTERNAL_mul_boogie x@@44 y@@14)) )))
(assert (forall ((x@@45 Int) (y@@15 Int) ) (! (= (INTERNAL_div_boogie x@@45 y@@15) (div x@@45 y@@15)) :qid |DafnyPreludebpl.1416:30| :skolemid |680| :pattern ( (INTERNAL_div_boogie x@@45 y@@15)) )))
(assert (forall ((x@@46 Int) (y@@16 Int) ) (! (= (INTERNAL_mod_boogie x@@46 y@@16) (mod x@@46 y@@16)) :qid |DafnyPreludebpl.1417:30| :skolemid |681| :pattern ( (INTERNAL_mod_boogie x@@46 y@@16)) )))
(assert (forall ((x@@47 Int) (y@@17 Int) ) (! (= (INTERNAL_lt_boogie x@@47 y@@17) (< x@@47 y@@17)) :qid |DafnyPreludebpl.1418:51| :skolemid |682| :pattern ( (INTERNAL_lt_boogie x@@47 y@@17)) )))
(assert (forall ((x@@48 Int) (y@@18 Int) ) (! (= (INTERNAL_le_boogie x@@48 y@@18) (<= x@@48 y@@18)) :qid |DafnyPreludebpl.1419:51| :skolemid |683| :pattern ( (INTERNAL_le_boogie x@@48 y@@18)) )))
(assert (forall ((x@@49 Int) (y@@19 Int) ) (! (= (INTERNAL_gt_boogie x@@49 y@@19) (> x@@49 y@@19)) :qid |DafnyPreludebpl.1420:51| :skolemid |684| :pattern ( (INTERNAL_gt_boogie x@@49 y@@19)) )))
(assert (forall ((x@@50 Int) (y@@20 Int) ) (! (= (INTERNAL_ge_boogie x@@50 y@@20) (>= x@@50 y@@20)) :qid |DafnyPreludebpl.1421:51| :skolemid |685| :pattern ( (INTERNAL_ge_boogie x@@50 y@@20)) )))
(assert (forall ((x@@51 Int) (y@@21 Int) ) (! (= (Mul x@@51 y@@21) (* x@@51 y@@21)) :qid |DafnyPreludebpl.1423:14| :skolemid |686| :pattern ( (Mul x@@51 y@@21)) )))
(assert (forall ((x@@52 Int) (y@@22 Int) ) (! (= (Div x@@52 y@@22) (div x@@52 y@@22)) :qid |DafnyPreludebpl.1424:14| :skolemid |687| :pattern ( (Div x@@52 y@@22)) )))
(assert (forall ((x@@53 Int) (y@@23 Int) ) (! (= (Mod x@@53 y@@23) (mod x@@53 y@@23)) :qid |DafnyPreludebpl.1425:14| :skolemid |688| :pattern ( (Mod x@@53 y@@23)) )))
(assert (forall ((x@@54 Int) (y@@24 Int) ) (! (= (Add x@@54 y@@24) (+ x@@54 y@@24)) :qid |DafnyPreludebpl.1426:14| :skolemid |689| :pattern ( (Add x@@54 y@@24)) )))
(assert (forall ((x@@55 Int) (y@@25 Int) ) (! (= (Sub x@@55 y@@25) (- x@@55 y@@25)) :qid |DafnyPreludebpl.1427:14| :skolemid |690| :pattern ( (Sub x@@55 y@@25)) )))
(assert (forall ((A@@2 T@U) (B T@U) (a@@79 T@U) (b@@58 T@U) ) (!  (=> (and (and (and (and (= (type A@@2) TyType) (= (type B) TyType)) (= (type a@@79) BoxType)) (= (type b@@58) BoxType)) (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58)) (< (BoxRank a@@79) (BoxRank b@@58))) :qid |DafnyPreludebpl.1468:15| :skolemid |691| :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank a@@79)) :pattern ( (_System.__default.rank__is__less__than A@@2 B a@@79 b@@58) (BoxRank b@@58)) )))
(assert (forall ((A@@3 T@U) (B@@0 T@U) (a@@80 T@U) (b@@59 T@U) ) (!  (=> (and (and (and (and (= (type A@@3) TyType) (= (type B@@0) TyType)) (= (type a@@80) BoxType)) (= (type b@@59) (SeqType BoxType))) (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59))) (< (BoxRank a@@80) (|Seq#Rank| b@@59))) :qid |DafnyPreludebpl.1473:15| :skolemid |692| :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (BoxRank a@@80)) :pattern ( (_System.__default.rank__is__less__than A@@3 B@@0 a@@80 ($Box b@@59)) (|Seq#Rank| b@@59)) )))
(assert (forall ((A@@4 T@U) (B@@1 T@U) (a@@81 T@U) (b@@60 T@U) ) (!  (=> (and (and (and (and (= (type A@@4) TyType) (= (type B@@1) TyType)) (= (type a@@81) (SeqType BoxType))) (= (type b@@60) BoxType)) (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60)) (< (|Seq#Rank| a@@81) (BoxRank b@@60))) :qid |DafnyPreludebpl.1478:15| :skolemid |693| :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (|Seq#Rank| a@@81)) :pattern ( (_System.__default.rank__is__less__than A@@4 B@@1 ($Box a@@81) b@@60) (BoxRank b@@60)) )))
(assert (= (type Tclass._System.nat) TyType))
(assert (= (Tag Tclass._System.nat) Tagclass._System.nat))
(assert (forall ((arg0@@113 T@U) ) (! (= (type (TagFamily arg0@@113)) TyTagFamilyType) :qid |funType:TagFamily| :pattern ( (TagFamily arg0@@113)) )))
(assert (= (TagFamily Tclass._System.nat) tytagFamily$nat))
(assert (forall ((bx@@26 T@U) ) (!  (=> (and (= (type bx@@26) BoxType) ($IsBox bx@@26 Tclass._System.nat)) (and (= ($Box ($Unbox intType bx@@26)) bx@@26) ($Is ($Unbox intType bx@@26) Tclass._System.nat))) :qid |unknown.0:0| :skolemid |694| :pattern ( ($IsBox bx@@26 Tclass._System.nat)) )))
(assert (forall ((|x#0| T@U) ) (!  (=> (= (type |x#0|) intType) (= ($Is |x#0| Tclass._System.nat) (<= (LitInt 0) (U_2_int |x#0|)))) :qid |unknown.0:0| :skolemid |695| :pattern ( ($Is |x#0| Tclass._System.nat)) )))
(assert (forall ((|x#0@@0| T@U) ($h T@U) ) (!  (=> (and (= (type |x#0@@0|) intType) (= (type $h) (MapType0Type refType MapType1Type))) ($IsAlloc |x#0@@0| Tclass._System.nat $h)) :qid |unknown.0:0| :skolemid |696| :pattern ( ($IsAlloc |x#0@@0| Tclass._System.nat $h)) )))
(assert (= (Tag Tclass._System.object?) Tagclass._System.object?))
(assert (= (TagFamily Tclass._System.object?) tytagFamily$object))
(assert (forall ((bx@@27 T@U) ) (!  (=> (and (= (type bx@@27) BoxType) ($IsBox bx@@27 Tclass._System.object?)) (and (= ($Box ($Unbox refType bx@@27)) bx@@27) ($Is ($Unbox refType bx@@27) Tclass._System.object?))) :qid |unknown.0:0| :skolemid |697| :pattern ( ($IsBox bx@@27 Tclass._System.object?)) )))
(assert (forall (($o T@U) ) (!  (=> (= (type $o) refType) ($Is $o Tclass._System.object?)) :qid |unknown.0:0| :skolemid |698| :pattern ( ($Is $o Tclass._System.object?)) )))
(assert (= (type null) refType))
(assert (forall (($o@@0 T@U) ($h@@0 T@U) ) (!  (=> (and (= (type $o@@0) refType) (= (type $h@@0) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@0 Tclass._System.object? $h@@0)  (or (= $o@@0 null) (U_2_bool (MapType1Select (MapType0Select $h@@0 $o@@0) alloc))))) :qid |unknown.0:0| :skolemid |699| :pattern ( ($IsAlloc $o@@0 Tclass._System.object? $h@@0)) )))
(assert (= (type Tclass._System.object) TyType))
(assert (= (Tag Tclass._System.object) Tagclass._System.object))
(assert (= (TagFamily Tclass._System.object) tytagFamily$object))
(assert (forall ((bx@@28 T@U) ) (!  (=> (and (= (type bx@@28) BoxType) ($IsBox bx@@28 Tclass._System.object)) (and (= ($Box ($Unbox refType bx@@28)) bx@@28) ($Is ($Unbox refType bx@@28) Tclass._System.object))) :qid |unknown.0:0| :skolemid |700| :pattern ( ($IsBox bx@@28 Tclass._System.object)) )))
(assert (forall ((|c#0| T@U) ) (!  (=> (= (type |c#0|) refType) (= ($Is |c#0| Tclass._System.object)  (and ($Is |c#0| Tclass._System.object?) (not (= |c#0| null))))) :qid |unknown.0:0| :skolemid |701| :pattern ( ($Is |c#0| Tclass._System.object)) )))
(assert (forall ((|c#0@@0| T@U) ($h@@1 T@U) ) (!  (=> (and (= (type |c#0@@0|) refType) (= (type $h@@1) (MapType0Type refType MapType1Type))) (= ($IsAlloc |c#0@@0| Tclass._System.object $h@@1) ($IsAlloc |c#0@@0| Tclass._System.object? $h@@1))) :qid |unknown.0:0| :skolemid |702| :pattern ( ($IsAlloc |c#0@@0| Tclass._System.object $h@@1)) )))
(assert (forall ((arg0@@114 T@U) ) (! (= (type (Tclass._System.array? arg0@@114)) TyType) :qid |funType:Tclass._System.array?| :pattern ( (Tclass._System.array? arg0@@114)) )))
(assert (forall ((_System.array$arg T@U) ) (!  (=> (= (type _System.array$arg) TyType) (and (= (Tag (Tclass._System.array? _System.array$arg)) Tagclass._System.array?) (= (TagFamily (Tclass._System.array? _System.array$arg)) tytagFamily$array))) :qid |unknown.0:0| :skolemid |703| :pattern ( (Tclass._System.array? _System.array$arg)) )))
(assert (forall ((arg0@@115 T@U) ) (! (= (type (Tclass._System.array?_0 arg0@@115)) TyType) :qid |funType:Tclass._System.array?_0| :pattern ( (Tclass._System.array?_0 arg0@@115)) )))
(assert (forall ((_System.array$arg@@0 T@U) ) (!  (=> (= (type _System.array$arg@@0) TyType) (= (Tclass._System.array?_0 (Tclass._System.array? _System.array$arg@@0)) _System.array$arg@@0)) :qid |unknown.0:0| :skolemid |704| :pattern ( (Tclass._System.array? _System.array$arg@@0)) )))
(assert (forall ((_System.array$arg@@1 T@U) (bx@@29 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@1) TyType) (= (type bx@@29) BoxType)) ($IsBox bx@@29 (Tclass._System.array? _System.array$arg@@1))) (and (= ($Box ($Unbox refType bx@@29)) bx@@29) ($Is ($Unbox refType bx@@29) (Tclass._System.array? _System.array$arg@@1)))) :qid |unknown.0:0| :skolemid |705| :pattern ( ($IsBox bx@@29 (Tclass._System.array? _System.array$arg@@1))) )))
(assert (forall ((arg0@@116 T@U) ) (! (= (type (dtype arg0@@116)) TyType) :qid |funType:dtype| :pattern ( (dtype arg0@@116)) )))
(assert (forall ((_System.array$arg@@2 T@U) ($h@@2 T@U) ($o@@1 T@U) ($i0 Int) ) (!  (=> (and (and (and (= (type _System.array$arg@@2) TyType) (= (type $h@@2) (MapType0Type refType MapType1Type))) (= (type $o@@1) refType)) (and (and ($IsGoodHeap $h@@2) (and (not (= $o@@1 null)) (= (dtype $o@@1) (Tclass._System.array? _System.array$arg@@2)))) (and (<= 0 $i0) (< $i0 (_System.array.Length $o@@1))))) ($IsBox (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) _System.array$arg@@2)) :qid |unknown.0:0| :skolemid |706| :pattern ( (MapType1Select (MapType0Select $h@@2 $o@@1) (IndexField $i0)) (Tclass._System.array? _System.array$arg@@2)) )))
(assert (forall ((_System.array$arg@@3 T@U) ($h@@3 T@U) ($o@@2 T@U) ($i0@@0 Int) ) (!  (=> (and (and (= (type _System.array$arg@@3) TyType) (= (type $h@@3) (MapType0Type refType MapType1Type))) (= (type $o@@2) refType)) (=> (and (and (and ($IsGoodHeap $h@@3) (and (not (= $o@@2 null)) (= (dtype $o@@2) (Tclass._System.array? _System.array$arg@@3)))) (and (<= 0 $i0@@0) (< $i0@@0 (_System.array.Length $o@@2)))) (U_2_bool (MapType1Select (MapType0Select $h@@3 $o@@2) alloc))) ($IsAllocBox (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) _System.array$arg@@3 $h@@3))) :qid |unknown.0:0| :skolemid |707| :pattern ( (MapType1Select (MapType0Select $h@@3 $o@@2) (IndexField $i0@@0)) (Tclass._System.array? _System.array$arg@@3)) )))
(assert (forall ((_System.array$arg@@4 T@U) ($o@@3 T@U) ) (!  (=> (and (= (type _System.array$arg@@4) TyType) (= (type $o@@3) refType)) (= ($Is $o@@3 (Tclass._System.array? _System.array$arg@@4))  (or (= $o@@3 null) (= (dtype $o@@3) (Tclass._System.array? _System.array$arg@@4))))) :qid |unknown.0:0| :skolemid |708| :pattern ( ($Is $o@@3 (Tclass._System.array? _System.array$arg@@4))) )))
(assert (forall ((_System.array$arg@@5 T@U) ($o@@4 T@U) ($h@@4 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@5) TyType) (= (type $o@@4) refType)) (= (type $h@@4) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@4 (Tclass._System.array? _System.array$arg@@5) $h@@4)  (or (= $o@@4 null) (U_2_bool (MapType1Select (MapType0Select $h@@4 $o@@4) alloc))))) :qid |unknown.0:0| :skolemid |709| :pattern ( ($IsAlloc $o@@4 (Tclass._System.array? _System.array$arg@@5) $h@@4)) )))
(assert (forall ((_System.array$arg@@6 T@U) ($o@@5 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@6) TyType) (= (type $o@@5) refType)) (and (not (= $o@@5 null)) (= (dtype $o@@5) (Tclass._System.array? _System.array$arg@@6)))) ($Is (int_2_U (_System.array.Length $o@@5)) TInt)) :qid |unknown.0:0| :skolemid |710| :pattern ( (_System.array.Length $o@@5) (Tclass._System.array? _System.array$arg@@6)) )))
(assert (forall ((_System.array$arg@@7 T@U) ($h@@5 T@U) ($o@@6 T@U) ) (!  (=> (and (and (and (= (type _System.array$arg@@7) TyType) (= (type $h@@5) (MapType0Type refType MapType1Type))) (= (type $o@@6) refType)) (and (and ($IsGoodHeap $h@@5) (and (not (= $o@@6 null)) (= (dtype $o@@6) (Tclass._System.array? _System.array$arg@@7)))) (U_2_bool (MapType1Select (MapType0Select $h@@5 $o@@6) alloc)))) ($IsAlloc (int_2_U (_System.array.Length $o@@6)) TInt $h@@5)) :qid |unknown.0:0| :skolemid |711| :pattern ( (_System.array.Length $o@@6) (MapType1Select (MapType0Select $h@@5 $o@@6) alloc) (Tclass._System.array? _System.array$arg@@7)) )))
(assert (forall ((arg0@@117 T@U) ) (! (= (type (Tclass._System.array arg0@@117)) TyType) :qid |funType:Tclass._System.array| :pattern ( (Tclass._System.array arg0@@117)) )))
(assert (forall ((_System.array$arg@@8 T@U) ) (!  (=> (= (type _System.array$arg@@8) TyType) (and (= (Tag (Tclass._System.array _System.array$arg@@8)) Tagclass._System.array) (= (TagFamily (Tclass._System.array _System.array$arg@@8)) tytagFamily$array))) :qid |unknown.0:0| :skolemid |712| :pattern ( (Tclass._System.array _System.array$arg@@8)) )))
(assert (forall ((arg0@@118 T@U) ) (! (= (type (Tclass._System.array_0 arg0@@118)) TyType) :qid |funType:Tclass._System.array_0| :pattern ( (Tclass._System.array_0 arg0@@118)) )))
(assert (forall ((_System.array$arg@@9 T@U) ) (!  (=> (= (type _System.array$arg@@9) TyType) (= (Tclass._System.array_0 (Tclass._System.array _System.array$arg@@9)) _System.array$arg@@9)) :qid |unknown.0:0| :skolemid |713| :pattern ( (Tclass._System.array _System.array$arg@@9)) )))
(assert (forall ((_System.array$arg@@10 T@U) (bx@@30 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@10) TyType) (= (type bx@@30) BoxType)) ($IsBox bx@@30 (Tclass._System.array _System.array$arg@@10))) (and (= ($Box ($Unbox refType bx@@30)) bx@@30) ($Is ($Unbox refType bx@@30) (Tclass._System.array _System.array$arg@@10)))) :qid |unknown.0:0| :skolemid |714| :pattern ( ($IsBox bx@@30 (Tclass._System.array _System.array$arg@@10))) )))
(assert (forall ((_System.array$arg@@11 T@U) (|c#0@@1| T@U) ) (!  (=> (and (= (type _System.array$arg@@11) TyType) (= (type |c#0@@1|) refType)) (= ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@11))  (and ($Is |c#0@@1| (Tclass._System.array? _System.array$arg@@11)) (not (= |c#0@@1| null))))) :qid |unknown.0:0| :skolemid |715| :pattern ( ($Is |c#0@@1| (Tclass._System.array _System.array$arg@@11))) )))
(assert (forall ((_System.array$arg@@12 T@U) (|c#0@@2| T@U) ($h@@6 T@U) ) (!  (=> (and (and (= (type _System.array$arg@@12) TyType) (= (type |c#0@@2|) refType)) (= (type $h@@6) (MapType0Type refType MapType1Type))) (= ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@12) $h@@6) ($IsAlloc |c#0@@2| (Tclass._System.array? _System.array$arg@@12) $h@@6))) :qid |unknown.0:0| :skolemid |716| :pattern ( ($IsAlloc |c#0@@2| (Tclass._System.array _System.array$arg@@12) $h@@6)) )))
(assert (forall ((arg0@@119 T@U) (arg1@@53 T@U) ) (! (= (type (Tclass._System.___hFunc1 arg0@@119 arg1@@53)) TyType) :qid |funType:Tclass._System.___hFunc1| :pattern ( (Tclass._System.___hFunc1 arg0@@119 arg1@@53)) )))
(assert (forall ((|#$T0| T@U) (|#$R| T@U) ) (!  (=> (and (= (type |#$T0|) TyType) (= (type |#$R|) TyType)) (and (= (Tag (Tclass._System.___hFunc1 |#$T0| |#$R|)) Tagclass._System.___hFunc1) (= (TagFamily (Tclass._System.___hFunc1 |#$T0| |#$R|)) |tytagFamily$_#Func1|))) :qid |unknown.0:0| :skolemid |717| :pattern ( (Tclass._System.___hFunc1 |#$T0| |#$R|)) )))
(assert (forall ((arg0@@120 T@U) ) (! (= (type (Tclass._System.___hFunc1_0 arg0@@120)) TyType) :qid |funType:Tclass._System.___hFunc1_0| :pattern ( (Tclass._System.___hFunc1_0 arg0@@120)) )))
(assert (forall ((|#$T0@@0| T@U) (|#$R@@0| T@U) ) (!  (=> (and (= (type |#$T0@@0|) TyType) (= (type |#$R@@0|) TyType)) (= (Tclass._System.___hFunc1_0 (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) |#$T0@@0|)) :qid |unknown.0:0| :skolemid |718| :pattern ( (Tclass._System.___hFunc1 |#$T0@@0| |#$R@@0|)) )))
(assert (forall ((arg0@@121 T@U) ) (! (= (type (Tclass._System.___hFunc1_1 arg0@@121)) TyType) :qid |funType:Tclass._System.___hFunc1_1| :pattern ( (Tclass._System.___hFunc1_1 arg0@@121)) )))
(assert (forall ((|#$T0@@1| T@U) (|#$R@@1| T@U) ) (!  (=> (and (= (type |#$T0@@1|) TyType) (= (type |#$R@@1|) TyType)) (= (Tclass._System.___hFunc1_1 (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) |#$R@@1|)) :qid |unknown.0:0| :skolemid |719| :pattern ( (Tclass._System.___hFunc1 |#$T0@@1| |#$R@@1|)) )))
(assert (forall ((|#$T0@@2| T@U) (|#$R@@2| T@U) (bx@@31 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@2|) TyType) (= (type |#$R@@2|) TyType)) (= (type bx@@31) BoxType)) ($IsBox bx@@31 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))) (and (= ($Box ($Unbox HandleTypeType bx@@31)) bx@@31) ($Is ($Unbox HandleTypeType bx@@31) (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|)))) :qid |unknown.0:0| :skolemid |720| :pattern ( ($IsBox bx@@31 (Tclass._System.___hFunc1 |#$T0@@2| |#$R@@2|))) )))
(assert  (and (and (and (and (and (and (and (and (forall ((arg0@@122 T@T) (arg1@@54 T@T) (arg2@@8 T@T) ) (! (= (Ctor (MapType2Type arg0@@122 arg1@@54 arg2@@8)) 24) :qid |ctor:MapType2Type| )) (forall ((arg0@@123 T@T) (arg1@@55 T@T) (arg2@@9 T@T) ) (! (= (MapType2TypeInv0 (MapType2Type arg0@@123 arg1@@55 arg2@@9)) arg0@@123) :qid |typeInv:MapType2TypeInv0| :pattern ( (MapType2Type arg0@@123 arg1@@55 arg2@@9)) ))) (forall ((arg0@@124 T@T) (arg1@@56 T@T) (arg2@@10 T@T) ) (! (= (MapType2TypeInv1 (MapType2Type arg0@@124 arg1@@56 arg2@@10)) arg1@@56) :qid |typeInv:MapType2TypeInv1| :pattern ( (MapType2Type arg0@@124 arg1@@56 arg2@@10)) ))) (forall ((arg0@@125 T@T) (arg1@@57 T@T) (arg2@@11 T@T) ) (! (= (MapType2TypeInv2 (MapType2Type arg0@@125 arg1@@57 arg2@@11)) arg2@@11) :qid |typeInv:MapType2TypeInv2| :pattern ( (MapType2Type arg0@@125 arg1@@57 arg2@@11)) ))) (forall ((arg0@@126 T@U) (arg1@@58 T@U) (arg2@@12 T@U) ) (! (let ((aVar2 (MapType2TypeInv2 (type arg0@@126)))) (= (type (MapType2Select arg0@@126 arg1@@58 arg2@@12)) aVar2)) :qid |funType:MapType2Select| :pattern ( (MapType2Select arg0@@126 arg1@@58 arg2@@12)) ))) (forall ((arg0@@127 T@U) (arg1@@59 T@U) (arg2@@13 T@U) (arg3@@1 T@U) ) (! (let ((aVar2@@0 (type arg3@@1))) (let ((aVar1@@2 (type arg2@@13))) (let ((aVar0@@0 (type arg1@@59))) (= (type (MapType2Store arg0@@127 arg1@@59 arg2@@13 arg3@@1)) (MapType2Type aVar0@@0 aVar1@@2 aVar2@@0))))) :qid |funType:MapType2Store| :pattern ( (MapType2Store arg0@@127 arg1@@59 arg2@@13 arg3@@1)) ))) (forall ((m@@45 T@U) (x0@@5 T@U) (x1 T@U) (val@@6 T@U) ) (! (let ((aVar2@@1 (MapType2TypeInv2 (type m@@45)))) (=> (= (type val@@6) aVar2@@1) (= (MapType2Select (MapType2Store m@@45 x0@@5 x1 val@@6) x0@@5 x1) val@@6))) :qid |mapAx0:MapType2Select| :weight 0 ))) (and (and (forall ((val@@7 T@U) (m@@46 T@U) (x0@@6 T@U) (x1@@0 T@U) (y0@@3 T@U) (y1 T@U) ) (!  (or (= x0@@6 y0@@3) (= (MapType2Select (MapType2Store m@@46 x0@@6 x1@@0 val@@7) y0@@3 y1) (MapType2Select m@@46 y0@@3 y1))) :qid |mapAx1:MapType2Select:0| :weight 0 )) (forall ((val@@8 T@U) (m@@47 T@U) (x0@@7 T@U) (x1@@1 T@U) (y0@@4 T@U) (y1@@0 T@U) ) (!  (or (= x1@@1 y1@@0) (= (MapType2Select (MapType2Store m@@47 x0@@7 x1@@1 val@@8) y0@@4 y1@@0) (MapType2Select m@@47 y0@@4 y1@@0))) :qid |mapAx1:MapType2Select:1| :weight 0 ))) (forall ((val@@9 T@U) (m@@48 T@U) (x0@@8 T@U) (x1@@2 T@U) (y0@@5 T@U) (y1@@1 T@U) ) (!  (or true (= (MapType2Select (MapType2Store m@@48 x0@@8 x1@@2 val@@9) y0@@5 y1@@1) (MapType2Select m@@48 y0@@5 y1@@1))) :qid |mapAx2:MapType2Select| :weight 0 )))) (forall ((arg0@@128 T@U) (arg1@@60 T@U) (arg2@@14 T@U) ) (! (= (type (Handle1 arg0@@128 arg1@@60 arg2@@14)) HandleTypeType) :qid |funType:Handle1| :pattern ( (Handle1 arg0@@128 arg1@@60 arg2@@14)) ))))
(assert (forall ((t0@@16 T@U) (t1@@7 T@U) (heap@@1 T@U) (h@@21 T@U) (r@@6 T@U) (rd T@U) (bx0 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@16) TyType) (= (type t1@@7) TyType)) (= (type heap@@1) (MapType0Type refType MapType1Type))) (= (type h@@21) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@6) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0) BoxType)) (= (Apply1 t0@@16 t1@@7 heap@@1 (Handle1 h@@21 r@@6 rd) bx0) (MapType2Select h@@21 heap@@1 bx0))) :qid |unknown.0:0| :skolemid |721| :pattern ( (Apply1 t0@@16 t1@@7 heap@@1 (Handle1 h@@21 r@@6 rd) bx0)) )))
(assert (forall ((t0@@17 T@U) (t1@@8 T@U) (heap@@2 T@U) (h@@22 T@U) (r@@7 T@U) (rd@@0 T@U) (bx0@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@17) TyType) (= (type t1@@8) TyType)) (= (type heap@@2) (MapType0Type refType MapType1Type))) (= (type h@@22) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@7) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@0) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@0) BoxType)) (U_2_bool (MapType2Select r@@7 heap@@2 bx0@@0))) (Requires1 t0@@17 t1@@8 heap@@2 (Handle1 h@@22 r@@7 rd@@0) bx0@@0)) :qid |unknown.0:0| :skolemid |722| :pattern ( (Requires1 t0@@17 t1@@8 heap@@2 (Handle1 h@@22 r@@7 rd@@0) bx0@@0)) )))
(assert (forall ((arg0@@129 T@U) (arg1@@61 T@U) (arg2@@15 T@U) (arg3@@2 T@U) (arg4@@0 T@U) ) (! (= (type (Reads1 arg0@@129 arg1@@61 arg2@@15 arg3@@2 arg4@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads1| :pattern ( (Reads1 arg0@@129 arg1@@61 arg2@@15 arg3@@2 arg4@@0)) )))
(assert (forall ((t0@@18 T@U) (t1@@9 T@U) (heap@@3 T@U) (h@@23 T@U) (r@@8 T@U) (rd@@1 T@U) (bx0@@1 T@U) (bx@@32 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@18) TyType) (= (type t1@@9) TyType)) (= (type heap@@3) (MapType0Type refType MapType1Type))) (= (type h@@23) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType))) (= (type r@@8) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType))) (= (type rd@@1) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@1) BoxType)) (= (type bx@@32) BoxType)) (= (U_2_bool (MapType0Select (Reads1 t0@@18 t1@@9 heap@@3 (Handle1 h@@23 r@@8 rd@@1) bx0@@1) bx@@32)) (U_2_bool (MapType0Select (MapType2Select rd@@1 heap@@3 bx0@@1) bx@@32)))) :qid |unknown.0:0| :skolemid |723| :pattern ( (MapType0Select (Reads1 t0@@18 t1@@9 heap@@3 (Handle1 h@@23 r@@8 rd@@1) bx0@@1) bx@@32)) )))
(assert (forall ((t0@@19 T@U) (t1@@10 T@U) (h0@@0 T@U) (h1@@0 T@U) (f@@5 T@U) (bx0@@2 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@19) TyType) (= (type t1@@10) TyType)) (= (type h0@@0) (MapType0Type refType MapType1Type))) (= (type h1@@0) (MapType0Type refType MapType1Type))) (= (type f@@5) HandleTypeType)) (= (type bx0@@2) BoxType)) (and (and (and ($HeapSucc h0@@0 h1@@0) (and ($IsGoodHeap h0@@0) ($IsGoodHeap h1@@0))) (and ($IsBox bx0@@2 t0@@19) ($Is f@@5 (Tclass._System.___hFunc1 t0@@19 t1@@10)))) (forall ((o@@44 T@U) (fld T@U) ) (! (let ((a@@82 (FieldTypeInv0 (type fld)))) (=> (and (and (= (type o@@44) refType) (= (type fld) (FieldType a@@82))) (and (not (= o@@44 null)) (U_2_bool (MapType0Select (Reads1 t0@@19 t1@@10 h0@@0 f@@5 bx0@@2) ($Box o@@44))))) (= (MapType1Select (MapType0Select h0@@0 o@@44) fld) (MapType1Select (MapType0Select h1@@0 o@@44) fld)))) :qid |unknown.0:0| :skolemid |724| :no-pattern (type o@@44) :no-pattern (type fld) :no-pattern (U_2_int o@@44) :no-pattern (U_2_bool o@@44) :no-pattern (U_2_int fld) :no-pattern (U_2_bool fld) )))) (= (Reads1 t0@@19 t1@@10 h0@@0 f@@5 bx0@@2) (Reads1 t0@@19 t1@@10 h1@@0 f@@5 bx0@@2))) :qid |unknown.0:0| :skolemid |725| :pattern ( ($HeapSucc h0@@0 h1@@0) (Reads1 t0@@19 t1@@10 h1@@0 f@@5 bx0@@2)) )))
(assert (forall ((t0@@20 T@U) (t1@@11 T@U) (h0@@1 T@U) (h1@@1 T@U) (f@@6 T@U) (bx0@@3 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@20) TyType) (= (type t1@@11) TyType)) (= (type h0@@1) (MapType0Type refType MapType1Type))) (= (type h1@@1) (MapType0Type refType MapType1Type))) (= (type f@@6) HandleTypeType)) (= (type bx0@@3) BoxType)) (and (and (and ($HeapSucc h0@@1 h1@@1) (and ($IsGoodHeap h0@@1) ($IsGoodHeap h1@@1))) (and ($IsBox bx0@@3 t0@@20) ($Is f@@6 (Tclass._System.___hFunc1 t0@@20 t1@@11)))) (forall ((o@@45 T@U) (fld@@0 T@U) ) (! (let ((a@@83 (FieldTypeInv0 (type fld@@0)))) (=> (and (and (= (type o@@45) refType) (= (type fld@@0) (FieldType a@@83))) (and (not (= o@@45 null)) (U_2_bool (MapType0Select (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3) ($Box o@@45))))) (= (MapType1Select (MapType0Select h0@@1 o@@45) fld@@0) (MapType1Select (MapType0Select h1@@1 o@@45) fld@@0)))) :qid |unknown.0:0| :skolemid |726| :no-pattern (type o@@45) :no-pattern (type fld@@0) :no-pattern (U_2_int o@@45) :no-pattern (U_2_bool o@@45) :no-pattern (U_2_int fld@@0) :no-pattern (U_2_bool fld@@0) )))) (= (Reads1 t0@@20 t1@@11 h0@@1 f@@6 bx0@@3) (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3))) :qid |unknown.0:0| :skolemid |727| :pattern ( ($HeapSucc h0@@1 h1@@1) (Reads1 t0@@20 t1@@11 h1@@1 f@@6 bx0@@3)) )))
(assert (forall ((t0@@21 T@U) (t1@@12 T@U) (h0@@2 T@U) (h1@@2 T@U) (f@@7 T@U) (bx0@@4 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@21) TyType) (= (type t1@@12) TyType)) (= (type h0@@2) (MapType0Type refType MapType1Type))) (= (type h1@@2) (MapType0Type refType MapType1Type))) (= (type f@@7) HandleTypeType)) (= (type bx0@@4) BoxType)) (and (and (and ($HeapSucc h0@@2 h1@@2) (and ($IsGoodHeap h0@@2) ($IsGoodHeap h1@@2))) (and ($IsBox bx0@@4 t0@@21) ($Is f@@7 (Tclass._System.___hFunc1 t0@@21 t1@@12)))) (forall ((o@@46 T@U) (fld@@1 T@U) ) (! (let ((a@@84 (FieldTypeInv0 (type fld@@1)))) (=> (and (and (= (type o@@46) refType) (= (type fld@@1) (FieldType a@@84))) (and (not (= o@@46 null)) (U_2_bool (MapType0Select (Reads1 t0@@21 t1@@12 h0@@2 f@@7 bx0@@4) ($Box o@@46))))) (= (MapType1Select (MapType0Select h0@@2 o@@46) fld@@1) (MapType1Select (MapType0Select h1@@2 o@@46) fld@@1)))) :qid |unknown.0:0| :skolemid |728| :no-pattern (type o@@46) :no-pattern (type fld@@1) :no-pattern (U_2_int o@@46) :no-pattern (U_2_bool o@@46) :no-pattern (U_2_int fld@@1) :no-pattern (U_2_bool fld@@1) )))) (= (Requires1 t0@@21 t1@@12 h0@@2 f@@7 bx0@@4) (Requires1 t0@@21 t1@@12 h1@@2 f@@7 bx0@@4))) :qid |unknown.0:0| :skolemid |729| :pattern ( ($HeapSucc h0@@2 h1@@2) (Requires1 t0@@21 t1@@12 h1@@2 f@@7 bx0@@4)) )))
(assert (forall ((t0@@22 T@U) (t1@@13 T@U) (h0@@3 T@U) (h1@@3 T@U) (f@@8 T@U) (bx0@@5 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@22) TyType) (= (type t1@@13) TyType)) (= (type h0@@3) (MapType0Type refType MapType1Type))) (= (type h1@@3) (MapType0Type refType MapType1Type))) (= (type f@@8) HandleTypeType)) (= (type bx0@@5) BoxType)) (and (and (and ($HeapSucc h0@@3 h1@@3) (and ($IsGoodHeap h0@@3) ($IsGoodHeap h1@@3))) (and ($IsBox bx0@@5 t0@@22) ($Is f@@8 (Tclass._System.___hFunc1 t0@@22 t1@@13)))) (forall ((o@@47 T@U) (fld@@2 T@U) ) (! (let ((a@@85 (FieldTypeInv0 (type fld@@2)))) (=> (and (and (= (type o@@47) refType) (= (type fld@@2) (FieldType a@@85))) (and (not (= o@@47 null)) (U_2_bool (MapType0Select (Reads1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5) ($Box o@@47))))) (= (MapType1Select (MapType0Select h0@@3 o@@47) fld@@2) (MapType1Select (MapType0Select h1@@3 o@@47) fld@@2)))) :qid |unknown.0:0| :skolemid |730| :no-pattern (type o@@47) :no-pattern (type fld@@2) :no-pattern (U_2_int o@@47) :no-pattern (U_2_bool o@@47) :no-pattern (U_2_int fld@@2) :no-pattern (U_2_bool fld@@2) )))) (= (Requires1 t0@@22 t1@@13 h0@@3 f@@8 bx0@@5) (Requires1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5))) :qid |unknown.0:0| :skolemid |731| :pattern ( ($HeapSucc h0@@3 h1@@3) (Requires1 t0@@22 t1@@13 h1@@3 f@@8 bx0@@5)) )))
(assert (forall ((t0@@23 T@U) (t1@@14 T@U) (h0@@4 T@U) (h1@@4 T@U) (f@@9 T@U) (bx0@@6 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@23) TyType) (= (type t1@@14) TyType)) (= (type h0@@4) (MapType0Type refType MapType1Type))) (= (type h1@@4) (MapType0Type refType MapType1Type))) (= (type f@@9) HandleTypeType)) (= (type bx0@@6) BoxType)) (and (and (and ($HeapSucc h0@@4 h1@@4) (and ($IsGoodHeap h0@@4) ($IsGoodHeap h1@@4))) (and ($IsBox bx0@@6 t0@@23) ($Is f@@9 (Tclass._System.___hFunc1 t0@@23 t1@@14)))) (forall ((o@@48 T@U) (fld@@3 T@U) ) (! (let ((a@@86 (FieldTypeInv0 (type fld@@3)))) (=> (and (and (= (type o@@48) refType) (= (type fld@@3) (FieldType a@@86))) (and (not (= o@@48 null)) (U_2_bool (MapType0Select (Reads1 t0@@23 t1@@14 h0@@4 f@@9 bx0@@6) ($Box o@@48))))) (= (MapType1Select (MapType0Select h0@@4 o@@48) fld@@3) (MapType1Select (MapType0Select h1@@4 o@@48) fld@@3)))) :qid |unknown.0:0| :skolemid |732| :no-pattern (type o@@48) :no-pattern (type fld@@3) :no-pattern (U_2_int o@@48) :no-pattern (U_2_bool o@@48) :no-pattern (U_2_int fld@@3) :no-pattern (U_2_bool fld@@3) )))) (= (Apply1 t0@@23 t1@@14 h0@@4 f@@9 bx0@@6) (Apply1 t0@@23 t1@@14 h1@@4 f@@9 bx0@@6))) :qid |unknown.0:0| :skolemid |733| :pattern ( ($HeapSucc h0@@4 h1@@4) (Apply1 t0@@23 t1@@14 h1@@4 f@@9 bx0@@6)) )))
(assert (forall ((t0@@24 T@U) (t1@@15 T@U) (h0@@5 T@U) (h1@@5 T@U) (f@@10 T@U) (bx0@@7 T@U) ) (!  (=> (and (and (and (and (and (and (= (type t0@@24) TyType) (= (type t1@@15) TyType)) (= (type h0@@5) (MapType0Type refType MapType1Type))) (= (type h1@@5) (MapType0Type refType MapType1Type))) (= (type f@@10) HandleTypeType)) (= (type bx0@@7) BoxType)) (and (and (and ($HeapSucc h0@@5 h1@@5) (and ($IsGoodHeap h0@@5) ($IsGoodHeap h1@@5))) (and ($IsBox bx0@@7 t0@@24) ($Is f@@10 (Tclass._System.___hFunc1 t0@@24 t1@@15)))) (forall ((o@@49 T@U) (fld@@4 T@U) ) (! (let ((a@@87 (FieldTypeInv0 (type fld@@4)))) (=> (and (and (= (type o@@49) refType) (= (type fld@@4) (FieldType a@@87))) (and (not (= o@@49 null)) (U_2_bool (MapType0Select (Reads1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7) ($Box o@@49))))) (= (MapType1Select (MapType0Select h0@@5 o@@49) fld@@4) (MapType1Select (MapType0Select h1@@5 o@@49) fld@@4)))) :qid |unknown.0:0| :skolemid |734| :no-pattern (type o@@49) :no-pattern (type fld@@4) :no-pattern (U_2_int o@@49) :no-pattern (U_2_bool o@@49) :no-pattern (U_2_int fld@@4) :no-pattern (U_2_bool fld@@4) )))) (= (Apply1 t0@@24 t1@@15 h0@@5 f@@10 bx0@@7) (Apply1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7))) :qid |unknown.0:0| :skolemid |735| :pattern ( ($HeapSucc h0@@5 h1@@5) (Apply1 t0@@24 t1@@15 h1@@5 f@@10 bx0@@7)) )))
(assert (forall ((t0@@25 T@U) (t1@@16 T@U) (heap@@4 T@U) (f@@11 T@U) (bx0@@8 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@25) TyType) (= (type t1@@16) TyType)) (= (type heap@@4) (MapType0Type refType MapType1Type))) (= (type f@@11) HandleTypeType)) (= (type bx0@@8) BoxType)) (and ($IsGoodHeap heap@@4) (and ($IsBox bx0@@8 t0@@25) ($Is f@@11 (Tclass._System.___hFunc1 t0@@25 t1@@16))))) (= (|Set#Equal| (Reads1 t0@@25 t1@@16 $OneHeap f@@11 bx0@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads1 t0@@25 t1@@16 heap@@4 f@@11 bx0@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |736| :pattern ( (Reads1 t0@@25 t1@@16 $OneHeap f@@11 bx0@@8) ($IsGoodHeap heap@@4)) :pattern ( (Reads1 t0@@25 t1@@16 heap@@4 f@@11 bx0@@8)) )))
(assert (forall ((t0@@26 T@U) (t1@@17 T@U) (heap@@5 T@U) (f@@12 T@U) (bx0@@9 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@26) TyType) (= (type t1@@17) TyType)) (= (type heap@@5) (MapType0Type refType MapType1Type))) (= (type f@@12) HandleTypeType)) (= (type bx0@@9) BoxType)) (and (and ($IsGoodHeap heap@@5) (and ($IsBox bx0@@9 t0@@26) ($Is f@@12 (Tclass._System.___hFunc1 t0@@26 t1@@17)))) (|Set#Equal| (Reads1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) (|Set#Empty| BoxType)))) (= (Requires1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) (Requires1 t0@@26 t1@@17 heap@@5 f@@12 bx0@@9))) :qid |unknown.0:0| :skolemid |737| :pattern ( (Requires1 t0@@26 t1@@17 $OneHeap f@@12 bx0@@9) ($IsGoodHeap heap@@5)) :pattern ( (Requires1 t0@@26 t1@@17 heap@@5 f@@12 bx0@@9)) )))
(assert (forall ((f@@13 T@U) (t0@@27 T@U) (t1@@18 T@U) ) (!  (=> (and (and (= (type f@@13) HandleTypeType) (= (type t0@@27) TyType)) (= (type t1@@18) TyType)) (= ($Is f@@13 (Tclass._System.___hFunc1 t0@@27 t1@@18)) (forall ((h@@24 T@U) (bx0@@10 T@U) ) (!  (=> (and (= (type h@@24) (MapType0Type refType MapType1Type)) (= (type bx0@@10) BoxType)) (=> (and (and ($IsGoodHeap h@@24) ($IsBox bx0@@10 t0@@27)) (Requires1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10)) ($IsBox (Apply1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10) t1@@18))) :qid |DafnyPreludebpl.545:12| :skolemid |738| :pattern ( (Apply1 t0@@27 t1@@18 h@@24 f@@13 bx0@@10)) )))) :qid |unknown.0:0| :skolemid |739| :pattern ( ($Is f@@13 (Tclass._System.___hFunc1 t0@@27 t1@@18))) )))
(assert (forall ((f@@14 T@U) (t0@@28 T@U) (t1@@19 T@U) (u0 T@U) (u1 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@14) HandleTypeType) (= (type t0@@28) TyType)) (= (type t1@@19) TyType)) (= (type u0) TyType)) (= (type u1) TyType)) (and (and ($Is f@@14 (Tclass._System.___hFunc1 t0@@28 t1@@19)) (forall ((bx@@33 T@U) ) (!  (=> (and (= (type bx@@33) BoxType) ($IsBox bx@@33 u0)) ($IsBox bx@@33 t0@@28)) :qid |unknown.0:0| :skolemid |740| :pattern ( ($IsBox bx@@33 u0)) :pattern ( ($IsBox bx@@33 t0@@28)) ))) (forall ((bx@@34 T@U) ) (!  (=> (and (= (type bx@@34) BoxType) ($IsBox bx@@34 t1@@19)) ($IsBox bx@@34 u1)) :qid |unknown.0:0| :skolemid |741| :pattern ( ($IsBox bx@@34 t1@@19)) :pattern ( ($IsBox bx@@34 u1)) )))) ($Is f@@14 (Tclass._System.___hFunc1 u0 u1))) :qid |unknown.0:0| :skolemid |742| :pattern ( ($Is f@@14 (Tclass._System.___hFunc1 t0@@28 t1@@19)) ($Is f@@14 (Tclass._System.___hFunc1 u0 u1))) )))
(assert (forall ((f@@15 T@U) (t0@@29 T@U) (t1@@20 T@U) (h@@25 T@U) ) (!  (=> (and (and (and (and (= (type f@@15) HandleTypeType) (= (type t0@@29) TyType)) (= (type t1@@20) TyType)) (= (type h@@25) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@25)) (= ($IsAlloc f@@15 (Tclass._System.___hFunc1 t0@@29 t1@@20) h@@25) (forall ((bx0@@11 T@U) ) (!  (=> (= (type bx0@@11) BoxType) (=> (and (and ($IsBox bx0@@11 t0@@29) ($IsAllocBox bx0@@11 t0@@29 h@@25)) (Requires1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) (forall ((r@@9 T@U) ) (!  (=> (= (type r@@9) refType) (=> (and (not (= r@@9 null)) (U_2_bool (MapType0Select (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11) ($Box r@@9)))) (U_2_bool (MapType1Select (MapType0Select h@@25 r@@9) alloc)))) :qid |unknown.0:0| :skolemid |743| :pattern ( (MapType0Select (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11) ($Box r@@9))) )))) :qid |unknown.0:0| :skolemid |744| :pattern ( (Apply1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) :pattern ( (Reads1 t0@@29 t1@@20 h@@25 f@@15 bx0@@11)) )))) :qid |unknown.0:0| :skolemid |745| :pattern ( ($IsAlloc f@@15 (Tclass._System.___hFunc1 t0@@29 t1@@20) h@@25)) )))
(assert (forall ((f@@16 T@U) (t0@@30 T@U) (t1@@21 T@U) (h@@26 T@U) ) (!  (=> (and (and (and (and (= (type f@@16) HandleTypeType) (= (type t0@@30) TyType)) (= (type t1@@21) TyType)) (= (type h@@26) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@26) ($IsAlloc f@@16 (Tclass._System.___hFunc1 t0@@30 t1@@21) h@@26))) (forall ((bx0@@12 T@U) ) (!  (=> (= (type bx0@@12) BoxType) (=> (and ($IsAllocBox bx0@@12 t0@@30 h@@26) (Requires1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12)) ($IsAllocBox (Apply1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12) t1@@21 h@@26))) :qid |unknown.0:0| :skolemid |746| :pattern ( (Apply1 t0@@30 t1@@21 h@@26 f@@16 bx0@@12)) ))) :qid |unknown.0:0| :skolemid |747| :pattern ( ($IsAlloc f@@16 (Tclass._System.___hFunc1 t0@@30 t1@@21) h@@26)) )))
(assert (forall ((arg0@@130 T@U) (arg1@@62 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1 arg0@@130 arg1@@62)) TyType) :qid |funType:Tclass._System.___hPartialFunc1| :pattern ( (Tclass._System.___hPartialFunc1 arg0@@130 arg1@@62)) )))
(assert (forall ((|#$T0@@3| T@U) (|#$R@@3| T@U) ) (!  (=> (and (= (type |#$T0@@3|) TyType) (= (type |#$R@@3|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) Tagclass._System.___hPartialFunc1) (= (TagFamily (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) |tytagFamily$_#PartialFunc1|))) :qid |unknown.0:0| :skolemid |748| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@3| |#$R@@3|)) )))
(assert (forall ((arg0@@131 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_0 arg0@@131)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_0| :pattern ( (Tclass._System.___hPartialFunc1_0 arg0@@131)) )))
(assert (forall ((|#$T0@@4| T@U) (|#$R@@4| T@U) ) (!  (=> (and (= (type |#$T0@@4|) TyType) (= (type |#$R@@4|) TyType)) (= (Tclass._System.___hPartialFunc1_0 (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) |#$T0@@4|)) :qid |unknown.0:0| :skolemid |749| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@4| |#$R@@4|)) )))
(assert (forall ((arg0@@132 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1_1 arg0@@132)) TyType) :qid |funType:Tclass._System.___hPartialFunc1_1| :pattern ( (Tclass._System.___hPartialFunc1_1 arg0@@132)) )))
(assert (forall ((|#$T0@@5| T@U) (|#$R@@5| T@U) ) (!  (=> (and (= (type |#$T0@@5|) TyType) (= (type |#$R@@5|) TyType)) (= (Tclass._System.___hPartialFunc1_1 (Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|)) |#$R@@5|)) :qid |unknown.0:0| :skolemid |750| :pattern ( (Tclass._System.___hPartialFunc1 |#$T0@@5| |#$R@@5|)) )))
(assert (forall ((|#$T0@@6| T@U) (|#$R@@6| T@U) (bx@@35 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@6|) TyType) (= (type |#$R@@6|) TyType)) (= (type bx@@35) BoxType)) ($IsBox bx@@35 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))) (and (= ($Box ($Unbox HandleTypeType bx@@35)) bx@@35) ($Is ($Unbox HandleTypeType bx@@35) (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|)))) :qid |unknown.0:0| :skolemid |751| :pattern ( ($IsBox bx@@35 (Tclass._System.___hPartialFunc1 |#$T0@@6| |#$R@@6|))) )))
(assert (forall ((|#$T0@@7| T@U) (|#$R@@7| T@U) (|f#0| T@U) ) (!  (=> (and (and (= (type |#$T0@@7|) TyType) (= (type |#$R@@7|) TyType)) (= (type |f#0|) HandleTypeType)) (= ($Is |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|))  (and ($Is |f#0| (Tclass._System.___hFunc1 |#$T0@@7| |#$R@@7|)) (forall ((|x0#0| T@U) ) (!  (=> (and (= (type |x0#0|) BoxType) ($IsBox |x0#0| |#$T0@@7|)) (|Set#Equal| (Reads1 |#$T0@@7| |#$R@@7| $OneHeap |f#0| |x0#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |752| :no-pattern (type |x0#0|) :no-pattern (U_2_int |x0#0|) :no-pattern (U_2_bool |x0#0|) ))))) :qid |unknown.0:0| :skolemid |753| :pattern ( ($Is |f#0| (Tclass._System.___hPartialFunc1 |#$T0@@7| |#$R@@7|))) )))
(assert (forall ((|#$T0@@8| T@U) (|#$R@@8| T@U) (|f#0@@0| T@U) ($h@@7 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@8|) TyType) (= (type |#$R@@8|) TyType)) (= (type |f#0@@0|) HandleTypeType)) (= (type $h@@7) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|) $h@@7) ($IsAlloc |f#0@@0| (Tclass._System.___hFunc1 |#$T0@@8| |#$R@@8|) $h@@7))) :qid |unknown.0:0| :skolemid |754| :pattern ( ($IsAlloc |f#0@@0| (Tclass._System.___hPartialFunc1 |#$T0@@8| |#$R@@8|) $h@@7)) )))
(assert (forall ((arg0@@133 T@U) (arg1@@63 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1 arg0@@133 arg1@@63)) TyType) :qid |funType:Tclass._System.___hTotalFunc1| :pattern ( (Tclass._System.___hTotalFunc1 arg0@@133 arg1@@63)) )))
(assert (forall ((|#$T0@@9| T@U) (|#$R@@9| T@U) ) (!  (=> (and (= (type |#$T0@@9|) TyType) (= (type |#$R@@9|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) Tagclass._System.___hTotalFunc1) (= (TagFamily (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) |tytagFamily$_#TotalFunc1|))) :qid |unknown.0:0| :skolemid |755| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@9| |#$R@@9|)) )))
(assert (forall ((arg0@@134 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_0 arg0@@134)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_0| :pattern ( (Tclass._System.___hTotalFunc1_0 arg0@@134)) )))
(assert (forall ((|#$T0@@10| T@U) (|#$R@@10| T@U) ) (!  (=> (and (= (type |#$T0@@10|) TyType) (= (type |#$R@@10|) TyType)) (= (Tclass._System.___hTotalFunc1_0 (Tclass._System.___hTotalFunc1 |#$T0@@10| |#$R@@10|)) |#$T0@@10|)) :qid |unknown.0:0| :skolemid |756| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@10| |#$R@@10|)) )))
(assert (forall ((arg0@@135 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1_1 arg0@@135)) TyType) :qid |funType:Tclass._System.___hTotalFunc1_1| :pattern ( (Tclass._System.___hTotalFunc1_1 arg0@@135)) )))
(assert (forall ((|#$T0@@11| T@U) (|#$R@@11| T@U) ) (!  (=> (and (= (type |#$T0@@11|) TyType) (= (type |#$R@@11|) TyType)) (= (Tclass._System.___hTotalFunc1_1 (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) |#$R@@11|)) :qid |unknown.0:0| :skolemid |757| :pattern ( (Tclass._System.___hTotalFunc1 |#$T0@@11| |#$R@@11|)) )))
(assert (forall ((|#$T0@@12| T@U) (|#$R@@12| T@U) (bx@@36 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@12|) TyType) (= (type |#$R@@12|) TyType)) (= (type bx@@36) BoxType)) ($IsBox bx@@36 (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|))) (and (= ($Box ($Unbox HandleTypeType bx@@36)) bx@@36) ($Is ($Unbox HandleTypeType bx@@36) (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|)))) :qid |unknown.0:0| :skolemid |758| :pattern ( ($IsBox bx@@36 (Tclass._System.___hTotalFunc1 |#$T0@@12| |#$R@@12|))) )))
(assert (forall ((|#$T0@@13| T@U) (|#$R@@13| T@U) (|f#0@@1| T@U) ) (!  (=> (and (and (= (type |#$T0@@13|) TyType) (= (type |#$R@@13|) TyType)) (= (type |f#0@@1|) HandleTypeType)) (= ($Is |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@13| |#$R@@13|))  (and ($Is |f#0@@1| (Tclass._System.___hPartialFunc1 |#$T0@@13| |#$R@@13|)) (forall ((|x0#0@@0| T@U) ) (!  (=> (and (= (type |x0#0@@0|) BoxType) ($IsBox |x0#0@@0| |#$T0@@13|)) (Requires1 |#$T0@@13| |#$R@@13| $OneHeap |f#0@@1| |x0#0@@0|)) :qid |unknown.0:0| :skolemid |759| :no-pattern (type |x0#0@@0|) :no-pattern (U_2_int |x0#0@@0|) :no-pattern (U_2_bool |x0#0@@0|) ))))) :qid |unknown.0:0| :skolemid |760| :pattern ( ($Is |f#0@@1| (Tclass._System.___hTotalFunc1 |#$T0@@13| |#$R@@13|))) )))
(assert (forall ((|#$T0@@14| T@U) (|#$R@@14| T@U) (|f#0@@2| T@U) ($h@@8 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@14|) TyType) (= (type |#$R@@14|) TyType)) (= (type |f#0@@2|) HandleTypeType)) (= (type $h@@8) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|) $h@@8) ($IsAlloc |f#0@@2| (Tclass._System.___hPartialFunc1 |#$T0@@14| |#$R@@14|) $h@@8))) :qid |unknown.0:0| :skolemid |761| :pattern ( ($IsAlloc |f#0@@2| (Tclass._System.___hTotalFunc1 |#$T0@@14| |#$R@@14|) $h@@8)) )))
(assert (forall ((arg0@@136 T@U) ) (! (= (type (Tclass._System.___hFunc0 arg0@@136)) TyType) :qid |funType:Tclass._System.___hFunc0| :pattern ( (Tclass._System.___hFunc0 arg0@@136)) )))
(assert (forall ((|#$R@@15| T@U) ) (!  (=> (= (type |#$R@@15|) TyType) (and (= (Tag (Tclass._System.___hFunc0 |#$R@@15|)) Tagclass._System.___hFunc0) (= (TagFamily (Tclass._System.___hFunc0 |#$R@@15|)) |tytagFamily$_#Func0|))) :qid |unknown.0:0| :skolemid |762| :pattern ( (Tclass._System.___hFunc0 |#$R@@15|)) )))
(assert (forall ((arg0@@137 T@U) ) (! (= (type (Tclass._System.___hFunc0_0 arg0@@137)) TyType) :qid |funType:Tclass._System.___hFunc0_0| :pattern ( (Tclass._System.___hFunc0_0 arg0@@137)) )))
(assert (forall ((|#$R@@16| T@U) ) (!  (=> (= (type |#$R@@16|) TyType) (= (Tclass._System.___hFunc0_0 (Tclass._System.___hFunc0 |#$R@@16|)) |#$R@@16|)) :qid |unknown.0:0| :skolemid |763| :pattern ( (Tclass._System.___hFunc0 |#$R@@16|)) )))
(assert (forall ((|#$R@@17| T@U) (bx@@37 T@U) ) (!  (=> (and (and (= (type |#$R@@17|) TyType) (= (type bx@@37) BoxType)) ($IsBox bx@@37 (Tclass._System.___hFunc0 |#$R@@17|))) (and (= ($Box ($Unbox HandleTypeType bx@@37)) bx@@37) ($Is ($Unbox HandleTypeType bx@@37) (Tclass._System.___hFunc0 |#$R@@17|)))) :qid |unknown.0:0| :skolemid |764| :pattern ( ($IsBox bx@@37 (Tclass._System.___hFunc0 |#$R@@17|))) )))
(assert  (and (forall ((arg0@@138 T@U) (arg1@@64 T@U) (arg2@@16 T@U) ) (! (= (type (Apply0 arg0@@138 arg1@@64 arg2@@16)) BoxType) :qid |funType:Apply0| :pattern ( (Apply0 arg0@@138 arg1@@64 arg2@@16)) )) (forall ((arg0@@139 T@U) (arg1@@65 T@U) (arg2@@17 T@U) ) (! (= (type (Handle0 arg0@@139 arg1@@65 arg2@@17)) HandleTypeType) :qid |funType:Handle0| :pattern ( (Handle0 arg0@@139 arg1@@65 arg2@@17)) ))))
(assert (forall ((t0@@31 T@U) (heap@@6 T@U) (h@@27 T@U) (r@@10 T@U) (rd@@2 T@U) ) (!  (=> (and (and (and (and (= (type t0@@31) TyType) (= (type heap@@6) (MapType0Type refType MapType1Type))) (= (type h@@27) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@10) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@2) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (Apply0 t0@@31 heap@@6 (Handle0 h@@27 r@@10 rd@@2)) (MapType0Select h@@27 heap@@6))) :qid |unknown.0:0| :skolemid |765| :pattern ( (Apply0 t0@@31 heap@@6 (Handle0 h@@27 r@@10 rd@@2))) )))
(assert (forall ((t0@@32 T@U) (heap@@7 T@U) (h@@28 T@U) (r@@11 T@U) (rd@@3 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@32) TyType) (= (type heap@@7) (MapType0Type refType MapType1Type))) (= (type h@@28) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@11) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@3) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (U_2_bool (MapType0Select r@@11 heap@@7))) (Requires0 t0@@32 heap@@7 (Handle0 h@@28 r@@11 rd@@3))) :qid |unknown.0:0| :skolemid |766| :pattern ( (Requires0 t0@@32 heap@@7 (Handle0 h@@28 r@@11 rd@@3))) )))
(assert (forall ((arg0@@140 T@U) (arg1@@66 T@U) (arg2@@18 T@U) ) (! (= (type (Reads0 arg0@@140 arg1@@66 arg2@@18)) (MapType0Type BoxType boolType)) :qid |funType:Reads0| :pattern ( (Reads0 arg0@@140 arg1@@66 arg2@@18)) )))
(assert (forall ((t0@@33 T@U) (heap@@8 T@U) (h@@29 T@U) (r@@12 T@U) (rd@@4 T@U) (bx@@38 T@U) ) (!  (=> (and (and (and (and (and (= (type t0@@33) TyType) (= (type heap@@8) (MapType0Type refType MapType1Type))) (= (type h@@29) (MapType0Type (MapType0Type refType MapType1Type) BoxType))) (= (type r@@12) (MapType0Type (MapType0Type refType MapType1Type) boolType))) (= (type rd@@4) (MapType0Type (MapType0Type refType MapType1Type) (MapType0Type BoxType boolType)))) (= (type bx@@38) BoxType)) (= (U_2_bool (MapType0Select (Reads0 t0@@33 heap@@8 (Handle0 h@@29 r@@12 rd@@4)) bx@@38)) (U_2_bool (MapType0Select (MapType0Select rd@@4 heap@@8) bx@@38)))) :qid |unknown.0:0| :skolemid |767| :pattern ( (MapType0Select (Reads0 t0@@33 heap@@8 (Handle0 h@@29 r@@12 rd@@4)) bx@@38)) )))
(assert (forall ((t0@@34 T@U) (h0@@6 T@U) (h1@@6 T@U) (f@@17 T@U) ) (!  (=> (and (and (and (and (= (type t0@@34) TyType) (= (type h0@@6) (MapType0Type refType MapType1Type))) (= (type h1@@6) (MapType0Type refType MapType1Type))) (= (type f@@17) HandleTypeType)) (and (and (and ($HeapSucc h0@@6 h1@@6) (and ($IsGoodHeap h0@@6) ($IsGoodHeap h1@@6))) ($Is f@@17 (Tclass._System.___hFunc0 t0@@34))) (forall ((o@@50 T@U) (fld@@5 T@U) ) (! (let ((a@@88 (FieldTypeInv0 (type fld@@5)))) (=> (and (and (= (type o@@50) refType) (= (type fld@@5) (FieldType a@@88))) (and (not (= o@@50 null)) (U_2_bool (MapType0Select (Reads0 t0@@34 h0@@6 f@@17) ($Box o@@50))))) (= (MapType1Select (MapType0Select h0@@6 o@@50) fld@@5) (MapType1Select (MapType0Select h1@@6 o@@50) fld@@5)))) :qid |unknown.0:0| :skolemid |768| :no-pattern (type o@@50) :no-pattern (type fld@@5) :no-pattern (U_2_int o@@50) :no-pattern (U_2_bool o@@50) :no-pattern (U_2_int fld@@5) :no-pattern (U_2_bool fld@@5) )))) (= (Reads0 t0@@34 h0@@6 f@@17) (Reads0 t0@@34 h1@@6 f@@17))) :qid |unknown.0:0| :skolemid |769| :pattern ( ($HeapSucc h0@@6 h1@@6) (Reads0 t0@@34 h1@@6 f@@17)) )))
(assert (forall ((t0@@35 T@U) (h0@@7 T@U) (h1@@7 T@U) (f@@18 T@U) ) (!  (=> (and (and (and (and (= (type t0@@35) TyType) (= (type h0@@7) (MapType0Type refType MapType1Type))) (= (type h1@@7) (MapType0Type refType MapType1Type))) (= (type f@@18) HandleTypeType)) (and (and (and ($HeapSucc h0@@7 h1@@7) (and ($IsGoodHeap h0@@7) ($IsGoodHeap h1@@7))) ($Is f@@18 (Tclass._System.___hFunc0 t0@@35))) (forall ((o@@51 T@U) (fld@@6 T@U) ) (! (let ((a@@89 (FieldTypeInv0 (type fld@@6)))) (=> (and (and (= (type o@@51) refType) (= (type fld@@6) (FieldType a@@89))) (and (not (= o@@51 null)) (U_2_bool (MapType0Select (Reads0 t0@@35 h1@@7 f@@18) ($Box o@@51))))) (= (MapType1Select (MapType0Select h0@@7 o@@51) fld@@6) (MapType1Select (MapType0Select h1@@7 o@@51) fld@@6)))) :qid |unknown.0:0| :skolemid |770| :no-pattern (type o@@51) :no-pattern (type fld@@6) :no-pattern (U_2_int o@@51) :no-pattern (U_2_bool o@@51) :no-pattern (U_2_int fld@@6) :no-pattern (U_2_bool fld@@6) )))) (= (Reads0 t0@@35 h0@@7 f@@18) (Reads0 t0@@35 h1@@7 f@@18))) :qid |unknown.0:0| :skolemid |771| :pattern ( ($HeapSucc h0@@7 h1@@7) (Reads0 t0@@35 h1@@7 f@@18)) )))
(assert (forall ((t0@@36 T@U) (h0@@8 T@U) (h1@@8 T@U) (f@@19 T@U) ) (!  (=> (and (and (and (and (= (type t0@@36) TyType) (= (type h0@@8) (MapType0Type refType MapType1Type))) (= (type h1@@8) (MapType0Type refType MapType1Type))) (= (type f@@19) HandleTypeType)) (and (and (and ($HeapSucc h0@@8 h1@@8) (and ($IsGoodHeap h0@@8) ($IsGoodHeap h1@@8))) ($Is f@@19 (Tclass._System.___hFunc0 t0@@36))) (forall ((o@@52 T@U) (fld@@7 T@U) ) (! (let ((a@@90 (FieldTypeInv0 (type fld@@7)))) (=> (and (and (= (type o@@52) refType) (= (type fld@@7) (FieldType a@@90))) (and (not (= o@@52 null)) (U_2_bool (MapType0Select (Reads0 t0@@36 h0@@8 f@@19) ($Box o@@52))))) (= (MapType1Select (MapType0Select h0@@8 o@@52) fld@@7) (MapType1Select (MapType0Select h1@@8 o@@52) fld@@7)))) :qid |unknown.0:0| :skolemid |772| :no-pattern (type o@@52) :no-pattern (type fld@@7) :no-pattern (U_2_int o@@52) :no-pattern (U_2_bool o@@52) :no-pattern (U_2_int fld@@7) :no-pattern (U_2_bool fld@@7) )))) (= (Requires0 t0@@36 h0@@8 f@@19) (Requires0 t0@@36 h1@@8 f@@19))) :qid |unknown.0:0| :skolemid |773| :pattern ( ($HeapSucc h0@@8 h1@@8) (Requires0 t0@@36 h1@@8 f@@19)) )))
(assert (forall ((t0@@37 T@U) (h0@@9 T@U) (h1@@9 T@U) (f@@20 T@U) ) (!  (=> (and (and (and (and (= (type t0@@37) TyType) (= (type h0@@9) (MapType0Type refType MapType1Type))) (= (type h1@@9) (MapType0Type refType MapType1Type))) (= (type f@@20) HandleTypeType)) (and (and (and ($HeapSucc h0@@9 h1@@9) (and ($IsGoodHeap h0@@9) ($IsGoodHeap h1@@9))) ($Is f@@20 (Tclass._System.___hFunc0 t0@@37))) (forall ((o@@53 T@U) (fld@@8 T@U) ) (! (let ((a@@91 (FieldTypeInv0 (type fld@@8)))) (=> (and (and (= (type o@@53) refType) (= (type fld@@8) (FieldType a@@91))) (and (not (= o@@53 null)) (U_2_bool (MapType0Select (Reads0 t0@@37 h1@@9 f@@20) ($Box o@@53))))) (= (MapType1Select (MapType0Select h0@@9 o@@53) fld@@8) (MapType1Select (MapType0Select h1@@9 o@@53) fld@@8)))) :qid |unknown.0:0| :skolemid |774| :no-pattern (type o@@53) :no-pattern (type fld@@8) :no-pattern (U_2_int o@@53) :no-pattern (U_2_bool o@@53) :no-pattern (U_2_int fld@@8) :no-pattern (U_2_bool fld@@8) )))) (= (Requires0 t0@@37 h0@@9 f@@20) (Requires0 t0@@37 h1@@9 f@@20))) :qid |unknown.0:0| :skolemid |775| :pattern ( ($HeapSucc h0@@9 h1@@9) (Requires0 t0@@37 h1@@9 f@@20)) )))
(assert (forall ((t0@@38 T@U) (h0@@10 T@U) (h1@@10 T@U) (f@@21 T@U) ) (!  (=> (and (and (and (and (= (type t0@@38) TyType) (= (type h0@@10) (MapType0Type refType MapType1Type))) (= (type h1@@10) (MapType0Type refType MapType1Type))) (= (type f@@21) HandleTypeType)) (and (and (and ($HeapSucc h0@@10 h1@@10) (and ($IsGoodHeap h0@@10) ($IsGoodHeap h1@@10))) ($Is f@@21 (Tclass._System.___hFunc0 t0@@38))) (forall ((o@@54 T@U) (fld@@9 T@U) ) (! (let ((a@@92 (FieldTypeInv0 (type fld@@9)))) (=> (and (and (= (type o@@54) refType) (= (type fld@@9) (FieldType a@@92))) (and (not (= o@@54 null)) (U_2_bool (MapType0Select (Reads0 t0@@38 h0@@10 f@@21) ($Box o@@54))))) (= (MapType1Select (MapType0Select h0@@10 o@@54) fld@@9) (MapType1Select (MapType0Select h1@@10 o@@54) fld@@9)))) :qid |unknown.0:0| :skolemid |776| :no-pattern (type o@@54) :no-pattern (type fld@@9) :no-pattern (U_2_int o@@54) :no-pattern (U_2_bool o@@54) :no-pattern (U_2_int fld@@9) :no-pattern (U_2_bool fld@@9) )))) (= (Apply0 t0@@38 h0@@10 f@@21) (Apply0 t0@@38 h1@@10 f@@21))) :qid |unknown.0:0| :skolemid |777| :pattern ( ($HeapSucc h0@@10 h1@@10) (Apply0 t0@@38 h1@@10 f@@21)) )))
(assert (forall ((t0@@39 T@U) (h0@@11 T@U) (h1@@11 T@U) (f@@22 T@U) ) (!  (=> (and (and (and (and (= (type t0@@39) TyType) (= (type h0@@11) (MapType0Type refType MapType1Type))) (= (type h1@@11) (MapType0Type refType MapType1Type))) (= (type f@@22) HandleTypeType)) (and (and (and ($HeapSucc h0@@11 h1@@11) (and ($IsGoodHeap h0@@11) ($IsGoodHeap h1@@11))) ($Is f@@22 (Tclass._System.___hFunc0 t0@@39))) (forall ((o@@55 T@U) (fld@@10 T@U) ) (! (let ((a@@93 (FieldTypeInv0 (type fld@@10)))) (=> (and (and (= (type o@@55) refType) (= (type fld@@10) (FieldType a@@93))) (and (not (= o@@55 null)) (U_2_bool (MapType0Select (Reads0 t0@@39 h1@@11 f@@22) ($Box o@@55))))) (= (MapType1Select (MapType0Select h0@@11 o@@55) fld@@10) (MapType1Select (MapType0Select h1@@11 o@@55) fld@@10)))) :qid |unknown.0:0| :skolemid |778| :no-pattern (type o@@55) :no-pattern (type fld@@10) :no-pattern (U_2_int o@@55) :no-pattern (U_2_bool o@@55) :no-pattern (U_2_int fld@@10) :no-pattern (U_2_bool fld@@10) )))) (= (Apply0 t0@@39 h0@@11 f@@22) (Apply0 t0@@39 h1@@11 f@@22))) :qid |unknown.0:0| :skolemid |779| :pattern ( ($HeapSucc h0@@11 h1@@11) (Apply0 t0@@39 h1@@11 f@@22)) )))
(assert (forall ((t0@@40 T@U) (heap@@9 T@U) (f@@23 T@U) ) (!  (=> (and (and (and (= (type t0@@40) TyType) (= (type heap@@9) (MapType0Type refType MapType1Type))) (= (type f@@23) HandleTypeType)) (and ($IsGoodHeap heap@@9) ($Is f@@23 (Tclass._System.___hFunc0 t0@@40)))) (= (|Set#Equal| (Reads0 t0@@40 $OneHeap f@@23) (|Set#Empty| BoxType)) (|Set#Equal| (Reads0 t0@@40 heap@@9 f@@23) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |780| :pattern ( (Reads0 t0@@40 $OneHeap f@@23) ($IsGoodHeap heap@@9)) :pattern ( (Reads0 t0@@40 heap@@9 f@@23)) )))
(assert (forall ((t0@@41 T@U) (heap@@10 T@U) (f@@24 T@U) ) (!  (=> (and (and (and (= (type t0@@41) TyType) (= (type heap@@10) (MapType0Type refType MapType1Type))) (= (type f@@24) HandleTypeType)) (and (and ($IsGoodHeap heap@@10) ($Is f@@24 (Tclass._System.___hFunc0 t0@@41))) (|Set#Equal| (Reads0 t0@@41 $OneHeap f@@24) (|Set#Empty| BoxType)))) (= (Requires0 t0@@41 $OneHeap f@@24) (Requires0 t0@@41 heap@@10 f@@24))) :qid |unknown.0:0| :skolemid |781| :pattern ( (Requires0 t0@@41 $OneHeap f@@24) ($IsGoodHeap heap@@10)) :pattern ( (Requires0 t0@@41 heap@@10 f@@24)) )))
(assert (forall ((f@@25 T@U) (t0@@42 T@U) ) (!  (=> (and (= (type f@@25) HandleTypeType) (= (type t0@@42) TyType)) (= ($Is f@@25 (Tclass._System.___hFunc0 t0@@42)) (forall ((h@@30 T@U) ) (!  (=> (= (type h@@30) (MapType0Type refType MapType1Type)) (=> (and ($IsGoodHeap h@@30) (Requires0 t0@@42 h@@30 f@@25)) ($IsBox (Apply0 t0@@42 h@@30 f@@25) t0@@42))) :qid |DafnyPreludebpl.545:12| :skolemid |782| :pattern ( (Apply0 t0@@42 h@@30 f@@25)) )))) :qid |unknown.0:0| :skolemid |783| :pattern ( ($Is f@@25 (Tclass._System.___hFunc0 t0@@42))) )))
(assert (forall ((f@@26 T@U) (t0@@43 T@U) (u0@@0 T@U) ) (!  (=> (and (and (and (= (type f@@26) HandleTypeType) (= (type t0@@43) TyType)) (= (type u0@@0) TyType)) (and ($Is f@@26 (Tclass._System.___hFunc0 t0@@43)) (forall ((bx@@39 T@U) ) (!  (=> (and (= (type bx@@39) BoxType) ($IsBox bx@@39 t0@@43)) ($IsBox bx@@39 u0@@0)) :qid |unknown.0:0| :skolemid |784| :pattern ( ($IsBox bx@@39 t0@@43)) :pattern ( ($IsBox bx@@39 u0@@0)) )))) ($Is f@@26 (Tclass._System.___hFunc0 u0@@0))) :qid |unknown.0:0| :skolemid |785| :pattern ( ($Is f@@26 (Tclass._System.___hFunc0 t0@@43)) ($Is f@@26 (Tclass._System.___hFunc0 u0@@0))) )))
(assert (forall ((f@@27 T@U) (t0@@44 T@U) (h@@31 T@U) ) (!  (=> (and (and (and (= (type f@@27) HandleTypeType) (= (type t0@@44) TyType)) (= (type h@@31) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@31)) (= ($IsAlloc f@@27 (Tclass._System.___hFunc0 t0@@44) h@@31)  (=> (Requires0 t0@@44 h@@31 f@@27) (forall ((r@@13 T@U) ) (!  (=> (= (type r@@13) refType) (=> (and (not (= r@@13 null)) (U_2_bool (MapType0Select (Reads0 t0@@44 h@@31 f@@27) ($Box r@@13)))) (U_2_bool (MapType1Select (MapType0Select h@@31 r@@13) alloc)))) :qid |unknown.0:0| :skolemid |786| :pattern ( (MapType0Select (Reads0 t0@@44 h@@31 f@@27) ($Box r@@13))) ))))) :qid |unknown.0:0| :skolemid |787| :pattern ( ($IsAlloc f@@27 (Tclass._System.___hFunc0 t0@@44) h@@31)) )))
(assert (forall ((f@@28 T@U) (t0@@45 T@U) (h@@32 T@U) ) (!  (=> (and (and (and (and (= (type f@@28) HandleTypeType) (= (type t0@@45) TyType)) (= (type h@@32) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@32) ($IsAlloc f@@28 (Tclass._System.___hFunc0 t0@@45) h@@32))) (Requires0 t0@@45 h@@32 f@@28)) ($IsAllocBox (Apply0 t0@@45 h@@32 f@@28) t0@@45 h@@32)) :qid |unknown.0:0| :skolemid |788| :pattern ( ($IsAlloc f@@28 (Tclass._System.___hFunc0 t0@@45) h@@32)) )))
(assert (forall ((arg0@@141 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0 arg0@@141)) TyType) :qid |funType:Tclass._System.___hPartialFunc0| :pattern ( (Tclass._System.___hPartialFunc0 arg0@@141)) )))
(assert (forall ((|#$R@@18| T@U) ) (!  (=> (= (type |#$R@@18|) TyType) (and (= (Tag (Tclass._System.___hPartialFunc0 |#$R@@18|)) Tagclass._System.___hPartialFunc0) (= (TagFamily (Tclass._System.___hPartialFunc0 |#$R@@18|)) |tytagFamily$_#PartialFunc0|))) :qid |unknown.0:0| :skolemid |789| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@18|)) )))
(assert (forall ((arg0@@142 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0_0 arg0@@142)) TyType) :qid |funType:Tclass._System.___hPartialFunc0_0| :pattern ( (Tclass._System.___hPartialFunc0_0 arg0@@142)) )))
(assert (forall ((|#$R@@19| T@U) ) (!  (=> (= (type |#$R@@19|) TyType) (= (Tclass._System.___hPartialFunc0_0 (Tclass._System.___hPartialFunc0 |#$R@@19|)) |#$R@@19|)) :qid |unknown.0:0| :skolemid |790| :pattern ( (Tclass._System.___hPartialFunc0 |#$R@@19|)) )))
(assert (forall ((|#$R@@20| T@U) (bx@@40 T@U) ) (!  (=> (and (and (= (type |#$R@@20|) TyType) (= (type bx@@40) BoxType)) ($IsBox bx@@40 (Tclass._System.___hPartialFunc0 |#$R@@20|))) (and (= ($Box ($Unbox HandleTypeType bx@@40)) bx@@40) ($Is ($Unbox HandleTypeType bx@@40) (Tclass._System.___hPartialFunc0 |#$R@@20|)))) :qid |unknown.0:0| :skolemid |791| :pattern ( ($IsBox bx@@40 (Tclass._System.___hPartialFunc0 |#$R@@20|))) )))
(assert (forall ((|#$R@@21| T@U) (|f#0@@3| T@U) ) (!  (=> (and (= (type |#$R@@21|) TyType) (= (type |f#0@@3|) HandleTypeType)) (= ($Is |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@21|))  (and ($Is |f#0@@3| (Tclass._System.___hFunc0 |#$R@@21|)) (|Set#Equal| (Reads0 |#$R@@21| $OneHeap |f#0@@3|) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |792| :pattern ( ($Is |f#0@@3| (Tclass._System.___hPartialFunc0 |#$R@@21|))) )))
(assert (forall ((|#$R@@22| T@U) (|f#0@@4| T@U) ($h@@9 T@U) ) (!  (=> (and (and (= (type |#$R@@22|) TyType) (= (type |f#0@@4|) HandleTypeType)) (= (type $h@@9) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc0 |#$R@@22|) $h@@9) ($IsAlloc |f#0@@4| (Tclass._System.___hFunc0 |#$R@@22|) $h@@9))) :qid |unknown.0:0| :skolemid |793| :pattern ( ($IsAlloc |f#0@@4| (Tclass._System.___hPartialFunc0 |#$R@@22|) $h@@9)) )))
(assert (forall ((arg0@@143 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0 arg0@@143)) TyType) :qid |funType:Tclass._System.___hTotalFunc0| :pattern ( (Tclass._System.___hTotalFunc0 arg0@@143)) )))
(assert (forall ((|#$R@@23| T@U) ) (!  (=> (= (type |#$R@@23|) TyType) (and (= (Tag (Tclass._System.___hTotalFunc0 |#$R@@23|)) Tagclass._System.___hTotalFunc0) (= (TagFamily (Tclass._System.___hTotalFunc0 |#$R@@23|)) |tytagFamily$_#TotalFunc0|))) :qid |unknown.0:0| :skolemid |794| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@23|)) )))
(assert (forall ((arg0@@144 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0_0 arg0@@144)) TyType) :qid |funType:Tclass._System.___hTotalFunc0_0| :pattern ( (Tclass._System.___hTotalFunc0_0 arg0@@144)) )))
(assert (forall ((|#$R@@24| T@U) ) (!  (=> (= (type |#$R@@24|) TyType) (= (Tclass._System.___hTotalFunc0_0 (Tclass._System.___hTotalFunc0 |#$R@@24|)) |#$R@@24|)) :qid |unknown.0:0| :skolemid |795| :pattern ( (Tclass._System.___hTotalFunc0 |#$R@@24|)) )))
(assert (forall ((|#$R@@25| T@U) (bx@@41 T@U) ) (!  (=> (and (and (= (type |#$R@@25|) TyType) (= (type bx@@41) BoxType)) ($IsBox bx@@41 (Tclass._System.___hTotalFunc0 |#$R@@25|))) (and (= ($Box ($Unbox HandleTypeType bx@@41)) bx@@41) ($Is ($Unbox HandleTypeType bx@@41) (Tclass._System.___hTotalFunc0 |#$R@@25|)))) :qid |unknown.0:0| :skolemid |796| :pattern ( ($IsBox bx@@41 (Tclass._System.___hTotalFunc0 |#$R@@25|))) )))
(assert (forall ((|#$R@@26| T@U) (|f#0@@5| T@U) ) (!  (=> (and (= (type |#$R@@26|) TyType) (= (type |f#0@@5|) HandleTypeType)) (= ($Is |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|))  (and ($Is |f#0@@5| (Tclass._System.___hPartialFunc0 |#$R@@26|)) (Requires0 |#$R@@26| $OneHeap |f#0@@5|)))) :qid |unknown.0:0| :skolemid |797| :pattern ( ($Is |f#0@@5| (Tclass._System.___hTotalFunc0 |#$R@@26|))) )))
(assert (forall ((|#$R@@27| T@U) (|f#0@@6| T@U) ($h@@10 T@U) ) (!  (=> (and (and (= (type |#$R@@27|) TyType) (= (type |f#0@@6|) HandleTypeType)) (= (type $h@@10) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc0 |#$R@@27|) $h@@10) ($IsAlloc |f#0@@6| (Tclass._System.___hPartialFunc0 |#$R@@27|) $h@@10))) :qid |unknown.0:0| :skolemid |798| :pattern ( ($IsAlloc |f#0@@6| (Tclass._System.___hTotalFunc0 |#$R@@27|) $h@@10)) )))
(assert (= (type Tclass._System.__default) TyType))
(assert (= (Tag Tclass._System.__default) Tagclass._System.__default))
(assert (= (TagFamily Tclass._System.__default) tytagFamily$_default))
(assert (forall ((bx@@42 T@U) ) (!  (=> (and (= (type bx@@42) BoxType) ($IsBox bx@@42 Tclass._System.__default)) (and (= ($Box ($Unbox refType bx@@42)) bx@@42) ($Is ($Unbox refType bx@@42) Tclass._System.__default))) :qid |unknown.0:0| :skolemid |799| :pattern ( ($IsBox bx@@42 Tclass._System.__default)) )))
(assert (forall (($o@@7 T@U) ) (!  (=> (= (type $o@@7) refType) (= ($Is $o@@7 Tclass._System.__default)  (or (= $o@@7 null) (= (dtype $o@@7) Tclass._System.__default)))) :qid |unknown.0:0| :skolemid |800| :pattern ( ($Is $o@@7 Tclass._System.__default)) )))
(assert (forall (($o@@8 T@U) ($h@@11 T@U) ) (!  (=> (and (= (type $o@@8) refType) (= (type $h@@11) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@8 Tclass._System.__default $h@@11)  (or (= $o@@8 null) (U_2_bool (MapType1Select (MapType0Select $h@@11 $o@@8) alloc))))) :qid |unknown.0:0| :skolemid |801| :pattern ( ($IsAlloc $o@@8 Tclass._System.__default $h@@11)) )))
(assert  (=> true (forall ((|#$A| T@U) (|#$B| T@U) (|a#0| T@U) (|b#0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A|) TyType) (= (type |#$B|) TyType)) (= (type |a#0|) BoxType)) (= (type |b#0|) BoxType)) (or (|_System.__default.rank__is__less__than#canCall| |#$A| |#$B| |a#0| |b#0|) (and ($IsBox |a#0| |#$A|) ($IsBox |b#0| |#$B|)))) true) :qid |unknown.0:0| :skolemid |802| :pattern ( (_System.__default.rank__is__less__than |#$A| |#$B| |a#0| |b#0|)) ))))
(assert (forall ((|#$A@@0| T@U) (|#$B@@0| T@U) (|a#0@@0| T@U) (|b#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |#$A@@0|) TyType) (= (type |#$B@@0|) TyType)) (= (type |a#0@@0|) BoxType)) (= (type |b#0@@0|) BoxType)) (and ($IsBox |a#0@@0| |#$A@@0|) ($IsBox |b#0@@0| |#$B@@0|))) (= (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|) true)) :qid |unknown.0:0| :skolemid |803| :pattern ( (|_System.__default.rank__is__less__than#requires| |#$A@@0| |#$B@@0| |a#0@@0| |b#0@@0|)) )))
(assert (forall ((arg0@@145 T@U) (arg1@@67 T@U) (arg2@@19 T@U) ) (! (= (type (Tclass._System.___hFunc2 arg0@@145 arg1@@67 arg2@@19)) TyType) :qid |funType:Tclass._System.___hFunc2| :pattern ( (Tclass._System.___hFunc2 arg0@@145 arg1@@67 arg2@@19)) )))
(assert (forall ((|#$T0@@15| T@U) (|#$T1| T@U) (|#$R@@28| T@U) ) (!  (=> (and (and (= (type |#$T0@@15|) TyType) (= (type |#$T1|) TyType)) (= (type |#$R@@28|) TyType)) (and (= (Tag (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) Tagclass._System.___hFunc2) (= (TagFamily (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) |tytagFamily$_#Func2|))) :qid |unknown.0:0| :skolemid |804| :pattern ( (Tclass._System.___hFunc2 |#$T0@@15| |#$T1| |#$R@@28|)) )))
(assert (forall ((arg0@@146 T@U) ) (! (= (type (Tclass._System.___hFunc2_0 arg0@@146)) TyType) :qid |funType:Tclass._System.___hFunc2_0| :pattern ( (Tclass._System.___hFunc2_0 arg0@@146)) )))
(assert (forall ((|#$T0@@16| T@U) (|#$T1@@0| T@U) (|#$R@@29| T@U) ) (!  (=> (and (and (= (type |#$T0@@16|) TyType) (= (type |#$T1@@0|) TyType)) (= (type |#$R@@29|) TyType)) (= (Tclass._System.___hFunc2_0 (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@0| |#$R@@29|)) |#$T0@@16|)) :qid |unknown.0:0| :skolemid |805| :pattern ( (Tclass._System.___hFunc2 |#$T0@@16| |#$T1@@0| |#$R@@29|)) )))
(assert (forall ((arg0@@147 T@U) ) (! (= (type (Tclass._System.___hFunc2_1 arg0@@147)) TyType) :qid |funType:Tclass._System.___hFunc2_1| :pattern ( (Tclass._System.___hFunc2_1 arg0@@147)) )))
(assert (forall ((|#$T0@@17| T@U) (|#$T1@@1| T@U) (|#$R@@30| T@U) ) (!  (=> (and (and (= (type |#$T0@@17|) TyType) (= (type |#$T1@@1|) TyType)) (= (type |#$R@@30|) TyType)) (= (Tclass._System.___hFunc2_1 (Tclass._System.___hFunc2 |#$T0@@17| |#$T1@@1| |#$R@@30|)) |#$T1@@1|)) :qid |unknown.0:0| :skolemid |806| :pattern ( (Tclass._System.___hFunc2 |#$T0@@17| |#$T1@@1| |#$R@@30|)) )))
(assert (forall ((arg0@@148 T@U) ) (! (= (type (Tclass._System.___hFunc2_2 arg0@@148)) TyType) :qid |funType:Tclass._System.___hFunc2_2| :pattern ( (Tclass._System.___hFunc2_2 arg0@@148)) )))
(assert (forall ((|#$T0@@18| T@U) (|#$T1@@2| T@U) (|#$R@@31| T@U) ) (!  (=> (and (and (= (type |#$T0@@18|) TyType) (= (type |#$T1@@2|) TyType)) (= (type |#$R@@31|) TyType)) (= (Tclass._System.___hFunc2_2 (Tclass._System.___hFunc2 |#$T0@@18| |#$T1@@2| |#$R@@31|)) |#$R@@31|)) :qid |unknown.0:0| :skolemid |807| :pattern ( (Tclass._System.___hFunc2 |#$T0@@18| |#$T1@@2| |#$R@@31|)) )))
(assert (forall ((|#$T0@@19| T@U) (|#$T1@@3| T@U) (|#$R@@32| T@U) (bx@@43 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@19|) TyType) (= (type |#$T1@@3|) TyType)) (= (type |#$R@@32|) TyType)) (= (type bx@@43) BoxType)) ($IsBox bx@@43 (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|))) (and (= ($Box ($Unbox HandleTypeType bx@@43)) bx@@43) ($Is ($Unbox HandleTypeType bx@@43) (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|)))) :qid |unknown.0:0| :skolemid |808| :pattern ( ($IsBox bx@@43 (Tclass._System.___hFunc2 |#$T0@@19| |#$T1@@3| |#$R@@32|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@149 T@T) (arg1@@68 T@T) (arg2@@20 T@T) (arg3@@3 T@T) ) (! (= (Ctor (MapType3Type arg0@@149 arg1@@68 arg2@@20 arg3@@3)) 25) :qid |ctor:MapType3Type| )) (forall ((arg0@@150 T@T) (arg1@@69 T@T) (arg2@@21 T@T) (arg3@@4 T@T) ) (! (= (MapType3TypeInv0 (MapType3Type arg0@@150 arg1@@69 arg2@@21 arg3@@4)) arg0@@150) :qid |typeInv:MapType3TypeInv0| :pattern ( (MapType3Type arg0@@150 arg1@@69 arg2@@21 arg3@@4)) ))) (forall ((arg0@@151 T@T) (arg1@@70 T@T) (arg2@@22 T@T) (arg3@@5 T@T) ) (! (= (MapType3TypeInv1 (MapType3Type arg0@@151 arg1@@70 arg2@@22 arg3@@5)) arg1@@70) :qid |typeInv:MapType3TypeInv1| :pattern ( (MapType3Type arg0@@151 arg1@@70 arg2@@22 arg3@@5)) ))) (forall ((arg0@@152 T@T) (arg1@@71 T@T) (arg2@@23 T@T) (arg3@@6 T@T) ) (! (= (MapType3TypeInv2 (MapType3Type arg0@@152 arg1@@71 arg2@@23 arg3@@6)) arg2@@23) :qid |typeInv:MapType3TypeInv2| :pattern ( (MapType3Type arg0@@152 arg1@@71 arg2@@23 arg3@@6)) ))) (forall ((arg0@@153 T@T) (arg1@@72 T@T) (arg2@@24 T@T) (arg3@@7 T@T) ) (! (= (MapType3TypeInv3 (MapType3Type arg0@@153 arg1@@72 arg2@@24 arg3@@7)) arg3@@7) :qid |typeInv:MapType3TypeInv3| :pattern ( (MapType3Type arg0@@153 arg1@@72 arg2@@24 arg3@@7)) ))) (forall ((arg0@@154 T@U) (arg1@@73 T@U) (arg2@@25 T@U) (arg3@@8 T@U) ) (! (let ((aVar3 (MapType3TypeInv3 (type arg0@@154)))) (= (type (MapType3Select arg0@@154 arg1@@73 arg2@@25 arg3@@8)) aVar3)) :qid |funType:MapType3Select| :pattern ( (MapType3Select arg0@@154 arg1@@73 arg2@@25 arg3@@8)) ))) (forall ((arg0@@155 T@U) (arg1@@74 T@U) (arg2@@26 T@U) (arg3@@9 T@U) (arg4@@1 T@U) ) (! (let ((aVar3@@0 (type arg4@@1))) (let ((aVar2@@2 (type arg3@@9))) (let ((aVar1@@3 (type arg2@@26))) (let ((aVar0@@1 (type arg1@@74))) (= (type (MapType3Store arg0@@155 arg1@@74 arg2@@26 arg3@@9 arg4@@1)) (MapType3Type aVar0@@1 aVar1@@3 aVar2@@2 aVar3@@0)))))) :qid |funType:MapType3Store| :pattern ( (MapType3Store arg0@@155 arg1@@74 arg2@@26 arg3@@9 arg4@@1)) ))) (forall ((m@@49 T@U) (x0@@9 T@U) (x1@@3 T@U) (x2 T@U) (val@@10 T@U) ) (! (let ((aVar3@@1 (MapType3TypeInv3 (type m@@49)))) (=> (= (type val@@10) aVar3@@1) (= (MapType3Select (MapType3Store m@@49 x0@@9 x1@@3 x2 val@@10) x0@@9 x1@@3 x2) val@@10))) :qid |mapAx0:MapType3Select| :weight 0 ))) (and (and (and (forall ((val@@11 T@U) (m@@50 T@U) (x0@@10 T@U) (x1@@4 T@U) (x2@@0 T@U) (y0@@6 T@U) (y1@@2 T@U) (y2 T@U) ) (!  (or (= x0@@10 y0@@6) (= (MapType3Select (MapType3Store m@@50 x0@@10 x1@@4 x2@@0 val@@11) y0@@6 y1@@2 y2) (MapType3Select m@@50 y0@@6 y1@@2 y2))) :qid |mapAx1:MapType3Select:0| :weight 0 )) (forall ((val@@12 T@U) (m@@51 T@U) (x0@@11 T@U) (x1@@5 T@U) (x2@@1 T@U) (y0@@7 T@U) (y1@@3 T@U) (y2@@0 T@U) ) (!  (or (= x1@@5 y1@@3) (= (MapType3Select (MapType3Store m@@51 x0@@11 x1@@5 x2@@1 val@@12) y0@@7 y1@@3 y2@@0) (MapType3Select m@@51 y0@@7 y1@@3 y2@@0))) :qid |mapAx1:MapType3Select:1| :weight 0 ))) (forall ((val@@13 T@U) (m@@52 T@U) (x0@@12 T@U) (x1@@6 T@U) (x2@@2 T@U) (y0@@8 T@U) (y1@@4 T@U) (y2@@1 T@U) ) (!  (or (= x2@@2 y2@@1) (= (MapType3Select (MapType3Store m@@52 x0@@12 x1@@6 x2@@2 val@@13) y0@@8 y1@@4 y2@@1) (MapType3Select m@@52 y0@@8 y1@@4 y2@@1))) :qid |mapAx1:MapType3Select:2| :weight 0 ))) (forall ((val@@14 T@U) (m@@53 T@U) (x0@@13 T@U) (x1@@7 T@U) (x2@@3 T@U) (y0@@9 T@U) (y1@@5 T@U) (y2@@2 T@U) ) (!  (or true (= (MapType3Select (MapType3Store m@@53 x0@@13 x1@@7 x2@@3 val@@14) y0@@9 y1@@5 y2@@2) (MapType3Select m@@53 y0@@9 y1@@5 y2@@2))) :qid |mapAx2:MapType3Select| :weight 0 )))) (forall ((arg0@@156 T@U) (arg1@@75 T@U) (arg2@@27 T@U) (arg3@@10 T@U) (arg4@@2 T@U) (arg5 T@U) (arg6 T@U) ) (! (= (type (Apply2 arg0@@156 arg1@@75 arg2@@27 arg3@@10 arg4@@2 arg5 arg6)) BoxType) :qid |funType:Apply2| :pattern ( (Apply2 arg0@@156 arg1@@75 arg2@@27 arg3@@10 arg4@@2 arg5 arg6)) ))) (forall ((arg0@@157 T@U) (arg1@@76 T@U) (arg2@@28 T@U) ) (! (= (type (Handle2 arg0@@157 arg1@@76 arg2@@28)) HandleTypeType) :qid |funType:Handle2| :pattern ( (Handle2 arg0@@157 arg1@@76 arg2@@28)) ))))
(assert (forall ((t0@@46 T@U) (t1@@22 T@U) (t2 T@U) (heap@@11 T@U) (h@@33 T@U) (r@@14 T@U) (rd@@5 T@U) (bx0@@13 T@U) (bx1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@46) TyType) (= (type t1@@22) TyType)) (= (type t2) TyType)) (= (type heap@@11) (MapType0Type refType MapType1Type))) (= (type h@@33) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@14) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@5) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@13) BoxType)) (= (type bx1) BoxType)) (= (Apply2 t0@@46 t1@@22 t2 heap@@11 (Handle2 h@@33 r@@14 rd@@5) bx0@@13 bx1) (MapType3Select h@@33 heap@@11 bx0@@13 bx1))) :qid |unknown.0:0| :skolemid |809| :pattern ( (Apply2 t0@@46 t1@@22 t2 heap@@11 (Handle2 h@@33 r@@14 rd@@5) bx0@@13 bx1)) )))
(assert (forall ((t0@@47 T@U) (t1@@23 T@U) (t2@@0 T@U) (heap@@12 T@U) (h@@34 T@U) (r@@15 T@U) (rd@@6 T@U) (bx0@@14 T@U) (bx1@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@47) TyType) (= (type t1@@23) TyType)) (= (type t2@@0) TyType)) (= (type heap@@12) (MapType0Type refType MapType1Type))) (= (type h@@34) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@15) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@6) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@14) BoxType)) (= (type bx1@@0) BoxType)) (U_2_bool (MapType3Select r@@15 heap@@12 bx0@@14 bx1@@0))) (Requires2 t0@@47 t1@@23 t2@@0 heap@@12 (Handle2 h@@34 r@@15 rd@@6) bx0@@14 bx1@@0)) :qid |unknown.0:0| :skolemid |810| :pattern ( (Requires2 t0@@47 t1@@23 t2@@0 heap@@12 (Handle2 h@@34 r@@15 rd@@6) bx0@@14 bx1@@0)) )))
(assert (forall ((arg0@@158 T@U) (arg1@@77 T@U) (arg2@@29 T@U) (arg3@@11 T@U) (arg4@@3 T@U) (arg5@@0 T@U) (arg6@@0 T@U) ) (! (= (type (Reads2 arg0@@158 arg1@@77 arg2@@29 arg3@@11 arg4@@3 arg5@@0 arg6@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads2| :pattern ( (Reads2 arg0@@158 arg1@@77 arg2@@29 arg3@@11 arg4@@3 arg5@@0 arg6@@0)) )))
(assert (forall ((t0@@48 T@U) (t1@@24 T@U) (t2@@1 T@U) (heap@@13 T@U) (h@@35 T@U) (r@@16 T@U) (rd@@7 T@U) (bx0@@15 T@U) (bx1@@1 T@U) (bx@@44 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@48) TyType) (= (type t1@@24) TyType)) (= (type t2@@1) TyType)) (= (type heap@@13) (MapType0Type refType MapType1Type))) (= (type h@@35) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType))) (= (type r@@16) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType boolType))) (= (type rd@@7) (MapType3Type (MapType0Type refType MapType1Type) BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@15) BoxType)) (= (type bx1@@1) BoxType)) (= (type bx@@44) BoxType)) (= (U_2_bool (MapType0Select (Reads2 t0@@48 t1@@24 t2@@1 heap@@13 (Handle2 h@@35 r@@16 rd@@7) bx0@@15 bx1@@1) bx@@44)) (U_2_bool (MapType0Select (MapType3Select rd@@7 heap@@13 bx0@@15 bx1@@1) bx@@44)))) :qid |unknown.0:0| :skolemid |811| :pattern ( (MapType0Select (Reads2 t0@@48 t1@@24 t2@@1 heap@@13 (Handle2 h@@35 r@@16 rd@@7) bx0@@15 bx1@@1) bx@@44)) )))
(assert (forall ((t0@@49 T@U) (t1@@25 T@U) (t2@@2 T@U) (h0@@12 T@U) (h1@@12 T@U) (f@@29 T@U) (bx0@@16 T@U) (bx1@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@49) TyType) (= (type t1@@25) TyType)) (= (type t2@@2) TyType)) (= (type h0@@12) (MapType0Type refType MapType1Type))) (= (type h1@@12) (MapType0Type refType MapType1Type))) (= (type f@@29) HandleTypeType)) (= (type bx0@@16) BoxType)) (= (type bx1@@2) BoxType)) (and (and (and ($HeapSucc h0@@12 h1@@12) (and ($IsGoodHeap h0@@12) ($IsGoodHeap h1@@12))) (and (and ($IsBox bx0@@16 t0@@49) ($IsBox bx1@@2 t1@@25)) ($Is f@@29 (Tclass._System.___hFunc2 t0@@49 t1@@25 t2@@2)))) (forall ((o@@56 T@U) (fld@@11 T@U) ) (! (let ((a@@94 (FieldTypeInv0 (type fld@@11)))) (=> (and (and (= (type o@@56) refType) (= (type fld@@11) (FieldType a@@94))) (and (not (= o@@56 null)) (U_2_bool (MapType0Select (Reads2 t0@@49 t1@@25 t2@@2 h0@@12 f@@29 bx0@@16 bx1@@2) ($Box o@@56))))) (= (MapType1Select (MapType0Select h0@@12 o@@56) fld@@11) (MapType1Select (MapType0Select h1@@12 o@@56) fld@@11)))) :qid |unknown.0:0| :skolemid |812| :no-pattern (type o@@56) :no-pattern (type fld@@11) :no-pattern (U_2_int o@@56) :no-pattern (U_2_bool o@@56) :no-pattern (U_2_int fld@@11) :no-pattern (U_2_bool fld@@11) )))) (= (Reads2 t0@@49 t1@@25 t2@@2 h0@@12 f@@29 bx0@@16 bx1@@2) (Reads2 t0@@49 t1@@25 t2@@2 h1@@12 f@@29 bx0@@16 bx1@@2))) :qid |unknown.0:0| :skolemid |813| :pattern ( ($HeapSucc h0@@12 h1@@12) (Reads2 t0@@49 t1@@25 t2@@2 h1@@12 f@@29 bx0@@16 bx1@@2)) )))
(assert (forall ((t0@@50 T@U) (t1@@26 T@U) (t2@@3 T@U) (h0@@13 T@U) (h1@@13 T@U) (f@@30 T@U) (bx0@@17 T@U) (bx1@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@50) TyType) (= (type t1@@26) TyType)) (= (type t2@@3) TyType)) (= (type h0@@13) (MapType0Type refType MapType1Type))) (= (type h1@@13) (MapType0Type refType MapType1Type))) (= (type f@@30) HandleTypeType)) (= (type bx0@@17) BoxType)) (= (type bx1@@3) BoxType)) (and (and (and ($HeapSucc h0@@13 h1@@13) (and ($IsGoodHeap h0@@13) ($IsGoodHeap h1@@13))) (and (and ($IsBox bx0@@17 t0@@50) ($IsBox bx1@@3 t1@@26)) ($Is f@@30 (Tclass._System.___hFunc2 t0@@50 t1@@26 t2@@3)))) (forall ((o@@57 T@U) (fld@@12 T@U) ) (! (let ((a@@95 (FieldTypeInv0 (type fld@@12)))) (=> (and (and (= (type o@@57) refType) (= (type fld@@12) (FieldType a@@95))) (and (not (= o@@57 null)) (U_2_bool (MapType0Select (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3) ($Box o@@57))))) (= (MapType1Select (MapType0Select h0@@13 o@@57) fld@@12) (MapType1Select (MapType0Select h1@@13 o@@57) fld@@12)))) :qid |unknown.0:0| :skolemid |814| :no-pattern (type o@@57) :no-pattern (type fld@@12) :no-pattern (U_2_int o@@57) :no-pattern (U_2_bool o@@57) :no-pattern (U_2_int fld@@12) :no-pattern (U_2_bool fld@@12) )))) (= (Reads2 t0@@50 t1@@26 t2@@3 h0@@13 f@@30 bx0@@17 bx1@@3) (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3))) :qid |unknown.0:0| :skolemid |815| :pattern ( ($HeapSucc h0@@13 h1@@13) (Reads2 t0@@50 t1@@26 t2@@3 h1@@13 f@@30 bx0@@17 bx1@@3)) )))
(assert (forall ((t0@@51 T@U) (t1@@27 T@U) (t2@@4 T@U) (h0@@14 T@U) (h1@@14 T@U) (f@@31 T@U) (bx0@@18 T@U) (bx1@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@51) TyType) (= (type t1@@27) TyType)) (= (type t2@@4) TyType)) (= (type h0@@14) (MapType0Type refType MapType1Type))) (= (type h1@@14) (MapType0Type refType MapType1Type))) (= (type f@@31) HandleTypeType)) (= (type bx0@@18) BoxType)) (= (type bx1@@4) BoxType)) (and (and (and ($HeapSucc h0@@14 h1@@14) (and ($IsGoodHeap h0@@14) ($IsGoodHeap h1@@14))) (and (and ($IsBox bx0@@18 t0@@51) ($IsBox bx1@@4 t1@@27)) ($Is f@@31 (Tclass._System.___hFunc2 t0@@51 t1@@27 t2@@4)))) (forall ((o@@58 T@U) (fld@@13 T@U) ) (! (let ((a@@96 (FieldTypeInv0 (type fld@@13)))) (=> (and (and (= (type o@@58) refType) (= (type fld@@13) (FieldType a@@96))) (and (not (= o@@58 null)) (U_2_bool (MapType0Select (Reads2 t0@@51 t1@@27 t2@@4 h0@@14 f@@31 bx0@@18 bx1@@4) ($Box o@@58))))) (= (MapType1Select (MapType0Select h0@@14 o@@58) fld@@13) (MapType1Select (MapType0Select h1@@14 o@@58) fld@@13)))) :qid |unknown.0:0| :skolemid |816| :no-pattern (type o@@58) :no-pattern (type fld@@13) :no-pattern (U_2_int o@@58) :no-pattern (U_2_bool o@@58) :no-pattern (U_2_int fld@@13) :no-pattern (U_2_bool fld@@13) )))) (= (Requires2 t0@@51 t1@@27 t2@@4 h0@@14 f@@31 bx0@@18 bx1@@4) (Requires2 t0@@51 t1@@27 t2@@4 h1@@14 f@@31 bx0@@18 bx1@@4))) :qid |unknown.0:0| :skolemid |817| :pattern ( ($HeapSucc h0@@14 h1@@14) (Requires2 t0@@51 t1@@27 t2@@4 h1@@14 f@@31 bx0@@18 bx1@@4)) )))
(assert (forall ((t0@@52 T@U) (t1@@28 T@U) (t2@@5 T@U) (h0@@15 T@U) (h1@@15 T@U) (f@@32 T@U) (bx0@@19 T@U) (bx1@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@52) TyType) (= (type t1@@28) TyType)) (= (type t2@@5) TyType)) (= (type h0@@15) (MapType0Type refType MapType1Type))) (= (type h1@@15) (MapType0Type refType MapType1Type))) (= (type f@@32) HandleTypeType)) (= (type bx0@@19) BoxType)) (= (type bx1@@5) BoxType)) (and (and (and ($HeapSucc h0@@15 h1@@15) (and ($IsGoodHeap h0@@15) ($IsGoodHeap h1@@15))) (and (and ($IsBox bx0@@19 t0@@52) ($IsBox bx1@@5 t1@@28)) ($Is f@@32 (Tclass._System.___hFunc2 t0@@52 t1@@28 t2@@5)))) (forall ((o@@59 T@U) (fld@@14 T@U) ) (! (let ((a@@97 (FieldTypeInv0 (type fld@@14)))) (=> (and (and (= (type o@@59) refType) (= (type fld@@14) (FieldType a@@97))) (and (not (= o@@59 null)) (U_2_bool (MapType0Select (Reads2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5) ($Box o@@59))))) (= (MapType1Select (MapType0Select h0@@15 o@@59) fld@@14) (MapType1Select (MapType0Select h1@@15 o@@59) fld@@14)))) :qid |unknown.0:0| :skolemid |818| :no-pattern (type o@@59) :no-pattern (type fld@@14) :no-pattern (U_2_int o@@59) :no-pattern (U_2_bool o@@59) :no-pattern (U_2_int fld@@14) :no-pattern (U_2_bool fld@@14) )))) (= (Requires2 t0@@52 t1@@28 t2@@5 h0@@15 f@@32 bx0@@19 bx1@@5) (Requires2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5))) :qid |unknown.0:0| :skolemid |819| :pattern ( ($HeapSucc h0@@15 h1@@15) (Requires2 t0@@52 t1@@28 t2@@5 h1@@15 f@@32 bx0@@19 bx1@@5)) )))
(assert (forall ((t0@@53 T@U) (t1@@29 T@U) (t2@@6 T@U) (h0@@16 T@U) (h1@@16 T@U) (f@@33 T@U) (bx0@@20 T@U) (bx1@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@53) TyType) (= (type t1@@29) TyType)) (= (type t2@@6) TyType)) (= (type h0@@16) (MapType0Type refType MapType1Type))) (= (type h1@@16) (MapType0Type refType MapType1Type))) (= (type f@@33) HandleTypeType)) (= (type bx0@@20) BoxType)) (= (type bx1@@6) BoxType)) (and (and (and ($HeapSucc h0@@16 h1@@16) (and ($IsGoodHeap h0@@16) ($IsGoodHeap h1@@16))) (and (and ($IsBox bx0@@20 t0@@53) ($IsBox bx1@@6 t1@@29)) ($Is f@@33 (Tclass._System.___hFunc2 t0@@53 t1@@29 t2@@6)))) (forall ((o@@60 T@U) (fld@@15 T@U) ) (! (let ((a@@98 (FieldTypeInv0 (type fld@@15)))) (=> (and (and (= (type o@@60) refType) (= (type fld@@15) (FieldType a@@98))) (and (not (= o@@60 null)) (U_2_bool (MapType0Select (Reads2 t0@@53 t1@@29 t2@@6 h0@@16 f@@33 bx0@@20 bx1@@6) ($Box o@@60))))) (= (MapType1Select (MapType0Select h0@@16 o@@60) fld@@15) (MapType1Select (MapType0Select h1@@16 o@@60) fld@@15)))) :qid |unknown.0:0| :skolemid |820| :no-pattern (type o@@60) :no-pattern (type fld@@15) :no-pattern (U_2_int o@@60) :no-pattern (U_2_bool o@@60) :no-pattern (U_2_int fld@@15) :no-pattern (U_2_bool fld@@15) )))) (= (Apply2 t0@@53 t1@@29 t2@@6 h0@@16 f@@33 bx0@@20 bx1@@6) (Apply2 t0@@53 t1@@29 t2@@6 h1@@16 f@@33 bx0@@20 bx1@@6))) :qid |unknown.0:0| :skolemid |821| :pattern ( ($HeapSucc h0@@16 h1@@16) (Apply2 t0@@53 t1@@29 t2@@6 h1@@16 f@@33 bx0@@20 bx1@@6)) )))
(assert (forall ((t0@@54 T@U) (t1@@30 T@U) (t2@@7 T@U) (h0@@17 T@U) (h1@@17 T@U) (f@@34 T@U) (bx0@@21 T@U) (bx1@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type t0@@54) TyType) (= (type t1@@30) TyType)) (= (type t2@@7) TyType)) (= (type h0@@17) (MapType0Type refType MapType1Type))) (= (type h1@@17) (MapType0Type refType MapType1Type))) (= (type f@@34) HandleTypeType)) (= (type bx0@@21) BoxType)) (= (type bx1@@7) BoxType)) (and (and (and ($HeapSucc h0@@17 h1@@17) (and ($IsGoodHeap h0@@17) ($IsGoodHeap h1@@17))) (and (and ($IsBox bx0@@21 t0@@54) ($IsBox bx1@@7 t1@@30)) ($Is f@@34 (Tclass._System.___hFunc2 t0@@54 t1@@30 t2@@7)))) (forall ((o@@61 T@U) (fld@@16 T@U) ) (! (let ((a@@99 (FieldTypeInv0 (type fld@@16)))) (=> (and (and (= (type o@@61) refType) (= (type fld@@16) (FieldType a@@99))) (and (not (= o@@61 null)) (U_2_bool (MapType0Select (Reads2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7) ($Box o@@61))))) (= (MapType1Select (MapType0Select h0@@17 o@@61) fld@@16) (MapType1Select (MapType0Select h1@@17 o@@61) fld@@16)))) :qid |unknown.0:0| :skolemid |822| :no-pattern (type o@@61) :no-pattern (type fld@@16) :no-pattern (U_2_int o@@61) :no-pattern (U_2_bool o@@61) :no-pattern (U_2_int fld@@16) :no-pattern (U_2_bool fld@@16) )))) (= (Apply2 t0@@54 t1@@30 t2@@7 h0@@17 f@@34 bx0@@21 bx1@@7) (Apply2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7))) :qid |unknown.0:0| :skolemid |823| :pattern ( ($HeapSucc h0@@17 h1@@17) (Apply2 t0@@54 t1@@30 t2@@7 h1@@17 f@@34 bx0@@21 bx1@@7)) )))
(assert (forall ((t0@@55 T@U) (t1@@31 T@U) (t2@@8 T@U) (heap@@14 T@U) (f@@35 T@U) (bx0@@22 T@U) (bx1@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@55) TyType) (= (type t1@@31) TyType)) (= (type t2@@8) TyType)) (= (type heap@@14) (MapType0Type refType MapType1Type))) (= (type f@@35) HandleTypeType)) (= (type bx0@@22) BoxType)) (= (type bx1@@8) BoxType)) (and ($IsGoodHeap heap@@14) (and (and ($IsBox bx0@@22 t0@@55) ($IsBox bx1@@8 t1@@31)) ($Is f@@35 (Tclass._System.___hFunc2 t0@@55 t1@@31 t2@@8))))) (= (|Set#Equal| (Reads2 t0@@55 t1@@31 t2@@8 $OneHeap f@@35 bx0@@22 bx1@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads2 t0@@55 t1@@31 t2@@8 heap@@14 f@@35 bx0@@22 bx1@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |824| :pattern ( (Reads2 t0@@55 t1@@31 t2@@8 $OneHeap f@@35 bx0@@22 bx1@@8) ($IsGoodHeap heap@@14)) :pattern ( (Reads2 t0@@55 t1@@31 t2@@8 heap@@14 f@@35 bx0@@22 bx1@@8)) )))
(assert (forall ((t0@@56 T@U) (t1@@32 T@U) (t2@@9 T@U) (heap@@15 T@U) (f@@36 T@U) (bx0@@23 T@U) (bx1@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type t0@@56) TyType) (= (type t1@@32) TyType)) (= (type t2@@9) TyType)) (= (type heap@@15) (MapType0Type refType MapType1Type))) (= (type f@@36) HandleTypeType)) (= (type bx0@@23) BoxType)) (= (type bx1@@9) BoxType)) (and (and ($IsGoodHeap heap@@15) (and (and ($IsBox bx0@@23 t0@@56) ($IsBox bx1@@9 t1@@32)) ($Is f@@36 (Tclass._System.___hFunc2 t0@@56 t1@@32 t2@@9)))) (|Set#Equal| (Reads2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) (|Set#Empty| BoxType)))) (= (Requires2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) (Requires2 t0@@56 t1@@32 t2@@9 heap@@15 f@@36 bx0@@23 bx1@@9))) :qid |unknown.0:0| :skolemid |825| :pattern ( (Requires2 t0@@56 t1@@32 t2@@9 $OneHeap f@@36 bx0@@23 bx1@@9) ($IsGoodHeap heap@@15)) :pattern ( (Requires2 t0@@56 t1@@32 t2@@9 heap@@15 f@@36 bx0@@23 bx1@@9)) )))
(assert (forall ((f@@37 T@U) (t0@@57 T@U) (t1@@33 T@U) (t2@@10 T@U) ) (!  (=> (and (and (and (= (type f@@37) HandleTypeType) (= (type t0@@57) TyType)) (= (type t1@@33) TyType)) (= (type t2@@10) TyType)) (= ($Is f@@37 (Tclass._System.___hFunc2 t0@@57 t1@@33 t2@@10)) (forall ((h@@36 T@U) (bx0@@24 T@U) (bx1@@10 T@U) ) (!  (=> (and (and (and (= (type h@@36) (MapType0Type refType MapType1Type)) (= (type bx0@@24) BoxType)) (= (type bx1@@10) BoxType)) (and (and ($IsGoodHeap h@@36) (and ($IsBox bx0@@24 t0@@57) ($IsBox bx1@@10 t1@@33))) (Requires2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10))) ($IsBox (Apply2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10) t2@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |826| :pattern ( (Apply2 t0@@57 t1@@33 t2@@10 h@@36 f@@37 bx0@@24 bx1@@10)) )))) :qid |unknown.0:0| :skolemid |827| :pattern ( ($Is f@@37 (Tclass._System.___hFunc2 t0@@57 t1@@33 t2@@10))) )))
(assert (forall ((f@@38 T@U) (t0@@58 T@U) (t1@@34 T@U) (t2@@11 T@U) (u0@@1 T@U) (u1@@0 T@U) (u2 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@38) HandleTypeType) (= (type t0@@58) TyType)) (= (type t1@@34) TyType)) (= (type t2@@11) TyType)) (= (type u0@@1) TyType)) (= (type u1@@0) TyType)) (= (type u2) TyType)) (and (and (and ($Is f@@38 (Tclass._System.___hFunc2 t0@@58 t1@@34 t2@@11)) (forall ((bx@@45 T@U) ) (!  (=> (and (= (type bx@@45) BoxType) ($IsBox bx@@45 u0@@1)) ($IsBox bx@@45 t0@@58)) :qid |unknown.0:0| :skolemid |828| :pattern ( ($IsBox bx@@45 u0@@1)) :pattern ( ($IsBox bx@@45 t0@@58)) ))) (forall ((bx@@46 T@U) ) (!  (=> (and (= (type bx@@46) BoxType) ($IsBox bx@@46 u1@@0)) ($IsBox bx@@46 t1@@34)) :qid |unknown.0:0| :skolemid |829| :pattern ( ($IsBox bx@@46 u1@@0)) :pattern ( ($IsBox bx@@46 t1@@34)) ))) (forall ((bx@@47 T@U) ) (!  (=> (and (= (type bx@@47) BoxType) ($IsBox bx@@47 t2@@11)) ($IsBox bx@@47 u2)) :qid |unknown.0:0| :skolemid |830| :pattern ( ($IsBox bx@@47 t2@@11)) :pattern ( ($IsBox bx@@47 u2)) )))) ($Is f@@38 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2))) :qid |unknown.0:0| :skolemid |831| :pattern ( ($Is f@@38 (Tclass._System.___hFunc2 t0@@58 t1@@34 t2@@11)) ($Is f@@38 (Tclass._System.___hFunc2 u0@@1 u1@@0 u2))) )))
(assert (forall ((f@@39 T@U) (t0@@59 T@U) (t1@@35 T@U) (t2@@12 T@U) (h@@37 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@39) HandleTypeType) (= (type t0@@59) TyType)) (= (type t1@@35) TyType)) (= (type t2@@12) TyType)) (= (type h@@37) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@37)) (= ($IsAlloc f@@39 (Tclass._System.___hFunc2 t0@@59 t1@@35 t2@@12) h@@37) (forall ((bx0@@25 T@U) (bx1@@11 T@U) ) (!  (=> (and (= (type bx0@@25) BoxType) (= (type bx1@@11) BoxType)) (=> (and (and (and ($IsBox bx0@@25 t0@@59) ($IsAllocBox bx0@@25 t0@@59 h@@37)) (and ($IsBox bx1@@11 t1@@35) ($IsAllocBox bx1@@11 t1@@35 h@@37))) (Requires2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) (forall ((r@@17 T@U) ) (!  (=> (= (type r@@17) refType) (=> (and (not (= r@@17 null)) (U_2_bool (MapType0Select (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11) ($Box r@@17)))) (U_2_bool (MapType1Select (MapType0Select h@@37 r@@17) alloc)))) :qid |unknown.0:0| :skolemid |832| :pattern ( (MapType0Select (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11) ($Box r@@17))) )))) :qid |unknown.0:0| :skolemid |833| :pattern ( (Apply2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) :pattern ( (Reads2 t0@@59 t1@@35 t2@@12 h@@37 f@@39 bx0@@25 bx1@@11)) )))) :qid |unknown.0:0| :skolemid |834| :pattern ( ($IsAlloc f@@39 (Tclass._System.___hFunc2 t0@@59 t1@@35 t2@@12) h@@37)) )))
(assert (forall ((f@@40 T@U) (t0@@60 T@U) (t1@@36 T@U) (t2@@13 T@U) (h@@38 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@40) HandleTypeType) (= (type t0@@60) TyType)) (= (type t1@@36) TyType)) (= (type t2@@13) TyType)) (= (type h@@38) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@38) ($IsAlloc f@@40 (Tclass._System.___hFunc2 t0@@60 t1@@36 t2@@13) h@@38))) (forall ((bx0@@26 T@U) (bx1@@12 T@U) ) (!  (=> (and (= (type bx0@@26) BoxType) (= (type bx1@@12) BoxType)) (=> (and (and ($IsAllocBox bx0@@26 t0@@60 h@@38) ($IsAllocBox bx1@@12 t1@@36 h@@38)) (Requires2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12)) ($IsAllocBox (Apply2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12) t2@@13 h@@38))) :qid |unknown.0:0| :skolemid |835| :pattern ( (Apply2 t0@@60 t1@@36 t2@@13 h@@38 f@@40 bx0@@26 bx1@@12)) ))) :qid |unknown.0:0| :skolemid |836| :pattern ( ($IsAlloc f@@40 (Tclass._System.___hFunc2 t0@@60 t1@@36 t2@@13) h@@38)) )))
(assert (forall ((arg0@@159 T@U) (arg1@@78 T@U) (arg2@@30 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2 arg0@@159 arg1@@78 arg2@@30)) TyType) :qid |funType:Tclass._System.___hPartialFunc2| :pattern ( (Tclass._System.___hPartialFunc2 arg0@@159 arg1@@78 arg2@@30)) )))
(assert (forall ((|#$T0@@20| T@U) (|#$T1@@4| T@U) (|#$R@@33| T@U) ) (!  (=> (and (and (= (type |#$T0@@20|) TyType) (= (type |#$T1@@4|) TyType)) (= (type |#$R@@33|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) Tagclass._System.___hPartialFunc2) (= (TagFamily (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) |tytagFamily$_#PartialFunc2|))) :qid |unknown.0:0| :skolemid |837| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@20| |#$T1@@4| |#$R@@33|)) )))
(assert (forall ((arg0@@160 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_0 arg0@@160)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_0| :pattern ( (Tclass._System.___hPartialFunc2_0 arg0@@160)) )))
(assert (forall ((|#$T0@@21| T@U) (|#$T1@@5| T@U) (|#$R@@34| T@U) ) (!  (=> (and (and (= (type |#$T0@@21|) TyType) (= (type |#$T1@@5|) TyType)) (= (type |#$R@@34|) TyType)) (= (Tclass._System.___hPartialFunc2_0 (Tclass._System.___hPartialFunc2 |#$T0@@21| |#$T1@@5| |#$R@@34|)) |#$T0@@21|)) :qid |unknown.0:0| :skolemid |838| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@21| |#$T1@@5| |#$R@@34|)) )))
(assert (forall ((arg0@@161 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_1 arg0@@161)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_1| :pattern ( (Tclass._System.___hPartialFunc2_1 arg0@@161)) )))
(assert (forall ((|#$T0@@22| T@U) (|#$T1@@6| T@U) (|#$R@@35| T@U) ) (!  (=> (and (and (= (type |#$T0@@22|) TyType) (= (type |#$T1@@6|) TyType)) (= (type |#$R@@35|) TyType)) (= (Tclass._System.___hPartialFunc2_1 (Tclass._System.___hPartialFunc2 |#$T0@@22| |#$T1@@6| |#$R@@35|)) |#$T1@@6|)) :qid |unknown.0:0| :skolemid |839| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@22| |#$T1@@6| |#$R@@35|)) )))
(assert (forall ((arg0@@162 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2_2 arg0@@162)) TyType) :qid |funType:Tclass._System.___hPartialFunc2_2| :pattern ( (Tclass._System.___hPartialFunc2_2 arg0@@162)) )))
(assert (forall ((|#$T0@@23| T@U) (|#$T1@@7| T@U) (|#$R@@36| T@U) ) (!  (=> (and (and (= (type |#$T0@@23|) TyType) (= (type |#$T1@@7|) TyType)) (= (type |#$R@@36|) TyType)) (= (Tclass._System.___hPartialFunc2_2 (Tclass._System.___hPartialFunc2 |#$T0@@23| |#$T1@@7| |#$R@@36|)) |#$R@@36|)) :qid |unknown.0:0| :skolemid |840| :pattern ( (Tclass._System.___hPartialFunc2 |#$T0@@23| |#$T1@@7| |#$R@@36|)) )))
(assert (forall ((|#$T0@@24| T@U) (|#$T1@@8| T@U) (|#$R@@37| T@U) (bx@@48 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@24|) TyType) (= (type |#$T1@@8|) TyType)) (= (type |#$R@@37|) TyType)) (= (type bx@@48) BoxType)) ($IsBox bx@@48 (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|))) (and (= ($Box ($Unbox HandleTypeType bx@@48)) bx@@48) ($Is ($Unbox HandleTypeType bx@@48) (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|)))) :qid |unknown.0:0| :skolemid |841| :pattern ( ($IsBox bx@@48 (Tclass._System.___hPartialFunc2 |#$T0@@24| |#$T1@@8| |#$R@@37|))) )))
(assert (forall ((|#$T0@@25| T@U) (|#$T1@@9| T@U) (|#$R@@38| T@U) (|f#0@@7| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@25|) TyType) (= (type |#$T1@@9|) TyType)) (= (type |#$R@@38|) TyType)) (= (type |f#0@@7|) HandleTypeType)) (= ($Is |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|))  (and ($Is |f#0@@7| (Tclass._System.___hFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|)) (forall ((|x0#0@@1| T@U) (|x1#0| T@U) ) (!  (=> (and (and (= (type |x0#0@@1|) BoxType) (= (type |x1#0|) BoxType)) (and ($IsBox |x0#0@@1| |#$T0@@25|) ($IsBox |x1#0| |#$T1@@9|))) (|Set#Equal| (Reads2 |#$T0@@25| |#$T1@@9| |#$R@@38| $OneHeap |f#0@@7| |x0#0@@1| |x1#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |842| :no-pattern (type |x0#0@@1|) :no-pattern (type |x1#0|) :no-pattern (U_2_int |x0#0@@1|) :no-pattern (U_2_bool |x0#0@@1|) :no-pattern (U_2_int |x1#0|) :no-pattern (U_2_bool |x1#0|) ))))) :qid |unknown.0:0| :skolemid |843| :pattern ( ($Is |f#0@@7| (Tclass._System.___hPartialFunc2 |#$T0@@25| |#$T1@@9| |#$R@@38|))) )))
(assert (forall ((|#$T0@@26| T@U) (|#$T1@@10| T@U) (|#$R@@39| T@U) (|f#0@@8| T@U) ($h@@12 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@26|) TyType) (= (type |#$T1@@10|) TyType)) (= (type |#$R@@39|) TyType)) (= (type |f#0@@8|) HandleTypeType)) (= (type $h@@12) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12) ($IsAlloc |f#0@@8| (Tclass._System.___hFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12))) :qid |unknown.0:0| :skolemid |844| :pattern ( ($IsAlloc |f#0@@8| (Tclass._System.___hPartialFunc2 |#$T0@@26| |#$T1@@10| |#$R@@39|) $h@@12)) )))
(assert (forall ((arg0@@163 T@U) (arg1@@79 T@U) (arg2@@31 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2 arg0@@163 arg1@@79 arg2@@31)) TyType) :qid |funType:Tclass._System.___hTotalFunc2| :pattern ( (Tclass._System.___hTotalFunc2 arg0@@163 arg1@@79 arg2@@31)) )))
(assert (forall ((|#$T0@@27| T@U) (|#$T1@@11| T@U) (|#$R@@40| T@U) ) (!  (=> (and (and (= (type |#$T0@@27|) TyType) (= (type |#$T1@@11|) TyType)) (= (type |#$R@@40|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) Tagclass._System.___hTotalFunc2) (= (TagFamily (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) |tytagFamily$_#TotalFunc2|))) :qid |unknown.0:0| :skolemid |845| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@27| |#$T1@@11| |#$R@@40|)) )))
(assert (forall ((arg0@@164 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_0 arg0@@164)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_0| :pattern ( (Tclass._System.___hTotalFunc2_0 arg0@@164)) )))
(assert (forall ((|#$T0@@28| T@U) (|#$T1@@12| T@U) (|#$R@@41| T@U) ) (!  (=> (and (and (= (type |#$T0@@28|) TyType) (= (type |#$T1@@12|) TyType)) (= (type |#$R@@41|) TyType)) (= (Tclass._System.___hTotalFunc2_0 (Tclass._System.___hTotalFunc2 |#$T0@@28| |#$T1@@12| |#$R@@41|)) |#$T0@@28|)) :qid |unknown.0:0| :skolemid |846| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@28| |#$T1@@12| |#$R@@41|)) )))
(assert (forall ((arg0@@165 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_1 arg0@@165)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_1| :pattern ( (Tclass._System.___hTotalFunc2_1 arg0@@165)) )))
(assert (forall ((|#$T0@@29| T@U) (|#$T1@@13| T@U) (|#$R@@42| T@U) ) (!  (=> (and (and (= (type |#$T0@@29|) TyType) (= (type |#$T1@@13|) TyType)) (= (type |#$R@@42|) TyType)) (= (Tclass._System.___hTotalFunc2_1 (Tclass._System.___hTotalFunc2 |#$T0@@29| |#$T1@@13| |#$R@@42|)) |#$T1@@13|)) :qid |unknown.0:0| :skolemid |847| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@29| |#$T1@@13| |#$R@@42|)) )))
(assert (forall ((arg0@@166 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2_2 arg0@@166)) TyType) :qid |funType:Tclass._System.___hTotalFunc2_2| :pattern ( (Tclass._System.___hTotalFunc2_2 arg0@@166)) )))
(assert (forall ((|#$T0@@30| T@U) (|#$T1@@14| T@U) (|#$R@@43| T@U) ) (!  (=> (and (and (= (type |#$T0@@30|) TyType) (= (type |#$T1@@14|) TyType)) (= (type |#$R@@43|) TyType)) (= (Tclass._System.___hTotalFunc2_2 (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@14| |#$R@@43|)) |#$R@@43|)) :qid |unknown.0:0| :skolemid |848| :pattern ( (Tclass._System.___hTotalFunc2 |#$T0@@30| |#$T1@@14| |#$R@@43|)) )))
(assert (forall ((|#$T0@@31| T@U) (|#$T1@@15| T@U) (|#$R@@44| T@U) (bx@@49 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@31|) TyType) (= (type |#$T1@@15|) TyType)) (= (type |#$R@@44|) TyType)) (= (type bx@@49) BoxType)) ($IsBox bx@@49 (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|))) (and (= ($Box ($Unbox HandleTypeType bx@@49)) bx@@49) ($Is ($Unbox HandleTypeType bx@@49) (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|)))) :qid |unknown.0:0| :skolemid |849| :pattern ( ($IsBox bx@@49 (Tclass._System.___hTotalFunc2 |#$T0@@31| |#$T1@@15| |#$R@@44|))) )))
(assert (forall ((|#$T0@@32| T@U) (|#$T1@@16| T@U) (|#$R@@45| T@U) (|f#0@@9| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@32|) TyType) (= (type |#$T1@@16|) TyType)) (= (type |#$R@@45|) TyType)) (= (type |f#0@@9|) HandleTypeType)) (= ($Is |f#0@@9| (Tclass._System.___hTotalFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|))  (and ($Is |f#0@@9| (Tclass._System.___hPartialFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|)) (forall ((|x0#0@@2| T@U) (|x1#0@@0| T@U) ) (!  (=> (and (and (= (type |x0#0@@2|) BoxType) (= (type |x1#0@@0|) BoxType)) (and ($IsBox |x0#0@@2| |#$T0@@32|) ($IsBox |x1#0@@0| |#$T1@@16|))) (Requires2 |#$T0@@32| |#$T1@@16| |#$R@@45| $OneHeap |f#0@@9| |x0#0@@2| |x1#0@@0|)) :qid |unknown.0:0| :skolemid |850| :no-pattern (type |x0#0@@2|) :no-pattern (type |x1#0@@0|) :no-pattern (U_2_int |x0#0@@2|) :no-pattern (U_2_bool |x0#0@@2|) :no-pattern (U_2_int |x1#0@@0|) :no-pattern (U_2_bool |x1#0@@0|) ))))) :qid |unknown.0:0| :skolemid |851| :pattern ( ($Is |f#0@@9| (Tclass._System.___hTotalFunc2 |#$T0@@32| |#$T1@@16| |#$R@@45|))) )))
(assert (forall ((|#$T0@@33| T@U) (|#$T1@@17| T@U) (|#$R@@46| T@U) (|f#0@@10| T@U) ($h@@13 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@33|) TyType) (= (type |#$T1@@17|) TyType)) (= (type |#$R@@46|) TyType)) (= (type |f#0@@10|) HandleTypeType)) (= (type $h@@13) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13) ($IsAlloc |f#0@@10| (Tclass._System.___hPartialFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13))) :qid |unknown.0:0| :skolemid |852| :pattern ( ($IsAlloc |f#0@@10| (Tclass._System.___hTotalFunc2 |#$T0@@33| |#$T1@@17| |#$R@@46|) $h@@13)) )))
(assert (forall ((arg0@@167 T@U) (arg1@@80 T@U) (arg2@@32 T@U) (arg3@@12 T@U) (arg4@@4 T@U) ) (! (= (type (Tclass._System.___hFunc4 arg0@@167 arg1@@80 arg2@@32 arg3@@12 arg4@@4)) TyType) :qid |funType:Tclass._System.___hFunc4| :pattern ( (Tclass._System.___hFunc4 arg0@@167 arg1@@80 arg2@@32 arg3@@12 arg4@@4)) )))
(assert (forall ((|#$T0@@34| T@U) (|#$T1@@18| T@U) (|#$T2| T@U) (|#$T3| T@U) (|#$R@@47| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@34|) TyType) (= (type |#$T1@@18|) TyType)) (= (type |#$T2|) TyType)) (= (type |#$T3|) TyType)) (= (type |#$R@@47|) TyType)) (and (= (Tag (Tclass._System.___hFunc4 |#$T0@@34| |#$T1@@18| |#$T2| |#$T3| |#$R@@47|)) Tagclass._System.___hFunc4) (= (TagFamily (Tclass._System.___hFunc4 |#$T0@@34| |#$T1@@18| |#$T2| |#$T3| |#$R@@47|)) |tytagFamily$_#Func4|))) :qid |unknown.0:0| :skolemid |853| :pattern ( (Tclass._System.___hFunc4 |#$T0@@34| |#$T1@@18| |#$T2| |#$T3| |#$R@@47|)) )))
(assert (forall ((arg0@@168 T@U) ) (! (= (type (Tclass._System.___hFunc4_0 arg0@@168)) TyType) :qid |funType:Tclass._System.___hFunc4_0| :pattern ( (Tclass._System.___hFunc4_0 arg0@@168)) )))
(assert (forall ((|#$T0@@35| T@U) (|#$T1@@19| T@U) (|#$T2@@0| T@U) (|#$T3@@0| T@U) (|#$R@@48| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@35|) TyType) (= (type |#$T1@@19|) TyType)) (= (type |#$T2@@0|) TyType)) (= (type |#$T3@@0|) TyType)) (= (type |#$R@@48|) TyType)) (= (Tclass._System.___hFunc4_0 (Tclass._System.___hFunc4 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$T3@@0| |#$R@@48|)) |#$T0@@35|)) :qid |unknown.0:0| :skolemid |854| :pattern ( (Tclass._System.___hFunc4 |#$T0@@35| |#$T1@@19| |#$T2@@0| |#$T3@@0| |#$R@@48|)) )))
(assert (forall ((arg0@@169 T@U) ) (! (= (type (Tclass._System.___hFunc4_1 arg0@@169)) TyType) :qid |funType:Tclass._System.___hFunc4_1| :pattern ( (Tclass._System.___hFunc4_1 arg0@@169)) )))
(assert (forall ((|#$T0@@36| T@U) (|#$T1@@20| T@U) (|#$T2@@1| T@U) (|#$T3@@1| T@U) (|#$R@@49| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@36|) TyType) (= (type |#$T1@@20|) TyType)) (= (type |#$T2@@1|) TyType)) (= (type |#$T3@@1|) TyType)) (= (type |#$R@@49|) TyType)) (= (Tclass._System.___hFunc4_1 (Tclass._System.___hFunc4 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$T3@@1| |#$R@@49|)) |#$T1@@20|)) :qid |unknown.0:0| :skolemid |855| :pattern ( (Tclass._System.___hFunc4 |#$T0@@36| |#$T1@@20| |#$T2@@1| |#$T3@@1| |#$R@@49|)) )))
(assert (forall ((arg0@@170 T@U) ) (! (= (type (Tclass._System.___hFunc4_2 arg0@@170)) TyType) :qid |funType:Tclass._System.___hFunc4_2| :pattern ( (Tclass._System.___hFunc4_2 arg0@@170)) )))
(assert (forall ((|#$T0@@37| T@U) (|#$T1@@21| T@U) (|#$T2@@2| T@U) (|#$T3@@2| T@U) (|#$R@@50| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@37|) TyType) (= (type |#$T1@@21|) TyType)) (= (type |#$T2@@2|) TyType)) (= (type |#$T3@@2|) TyType)) (= (type |#$R@@50|) TyType)) (= (Tclass._System.___hFunc4_2 (Tclass._System.___hFunc4 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$T3@@2| |#$R@@50|)) |#$T2@@2|)) :qid |unknown.0:0| :skolemid |856| :pattern ( (Tclass._System.___hFunc4 |#$T0@@37| |#$T1@@21| |#$T2@@2| |#$T3@@2| |#$R@@50|)) )))
(assert (forall ((arg0@@171 T@U) ) (! (= (type (Tclass._System.___hFunc4_3 arg0@@171)) TyType) :qid |funType:Tclass._System.___hFunc4_3| :pattern ( (Tclass._System.___hFunc4_3 arg0@@171)) )))
(assert (forall ((|#$T0@@38| T@U) (|#$T1@@22| T@U) (|#$T2@@3| T@U) (|#$T3@@3| T@U) (|#$R@@51| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@38|) TyType) (= (type |#$T1@@22|) TyType)) (= (type |#$T2@@3|) TyType)) (= (type |#$T3@@3|) TyType)) (= (type |#$R@@51|) TyType)) (= (Tclass._System.___hFunc4_3 (Tclass._System.___hFunc4 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$T3@@3| |#$R@@51|)) |#$T3@@3|)) :qid |unknown.0:0| :skolemid |857| :pattern ( (Tclass._System.___hFunc4 |#$T0@@38| |#$T1@@22| |#$T2@@3| |#$T3@@3| |#$R@@51|)) )))
(assert (forall ((arg0@@172 T@U) ) (! (= (type (Tclass._System.___hFunc4_4 arg0@@172)) TyType) :qid |funType:Tclass._System.___hFunc4_4| :pattern ( (Tclass._System.___hFunc4_4 arg0@@172)) )))
(assert (forall ((|#$T0@@39| T@U) (|#$T1@@23| T@U) (|#$T2@@4| T@U) (|#$T3@@4| T@U) (|#$R@@52| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@39|) TyType) (= (type |#$T1@@23|) TyType)) (= (type |#$T2@@4|) TyType)) (= (type |#$T3@@4|) TyType)) (= (type |#$R@@52|) TyType)) (= (Tclass._System.___hFunc4_4 (Tclass._System.___hFunc4 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$T3@@4| |#$R@@52|)) |#$R@@52|)) :qid |unknown.0:0| :skolemid |858| :pattern ( (Tclass._System.___hFunc4 |#$T0@@39| |#$T1@@23| |#$T2@@4| |#$T3@@4| |#$R@@52|)) )))
(assert (forall ((|#$T0@@40| T@U) (|#$T1@@24| T@U) (|#$T2@@5| T@U) (|#$T3@@5| T@U) (|#$R@@53| T@U) (bx@@50 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@40|) TyType) (= (type |#$T1@@24|) TyType)) (= (type |#$T2@@5|) TyType)) (= (type |#$T3@@5|) TyType)) (= (type |#$R@@53|) TyType)) (= (type bx@@50) BoxType)) ($IsBox bx@@50 (Tclass._System.___hFunc4 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$T3@@5| |#$R@@53|))) (and (= ($Box ($Unbox HandleTypeType bx@@50)) bx@@50) ($Is ($Unbox HandleTypeType bx@@50) (Tclass._System.___hFunc4 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$T3@@5| |#$R@@53|)))) :qid |unknown.0:0| :skolemid |859| :pattern ( ($IsBox bx@@50 (Tclass._System.___hFunc4 |#$T0@@40| |#$T1@@24| |#$T2@@5| |#$T3@@5| |#$R@@53|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@173 T@T) (arg1@@81 T@T) (arg2@@33 T@T) (arg3@@13 T@T) (arg4@@5 T@T) (arg5@@1 T@T) ) (! (= (Ctor (MapType4Type arg0@@173 arg1@@81 arg2@@33 arg3@@13 arg4@@5 arg5@@1)) 26) :qid |ctor:MapType4Type| )) (forall ((arg0@@174 T@T) (arg1@@82 T@T) (arg2@@34 T@T) (arg3@@14 T@T) (arg4@@6 T@T) (arg5@@2 T@T) ) (! (= (MapType4TypeInv0 (MapType4Type arg0@@174 arg1@@82 arg2@@34 arg3@@14 arg4@@6 arg5@@2)) arg0@@174) :qid |typeInv:MapType4TypeInv0| :pattern ( (MapType4Type arg0@@174 arg1@@82 arg2@@34 arg3@@14 arg4@@6 arg5@@2)) ))) (forall ((arg0@@175 T@T) (arg1@@83 T@T) (arg2@@35 T@T) (arg3@@15 T@T) (arg4@@7 T@T) (arg5@@3 T@T) ) (! (= (MapType4TypeInv1 (MapType4Type arg0@@175 arg1@@83 arg2@@35 arg3@@15 arg4@@7 arg5@@3)) arg1@@83) :qid |typeInv:MapType4TypeInv1| :pattern ( (MapType4Type arg0@@175 arg1@@83 arg2@@35 arg3@@15 arg4@@7 arg5@@3)) ))) (forall ((arg0@@176 T@T) (arg1@@84 T@T) (arg2@@36 T@T) (arg3@@16 T@T) (arg4@@8 T@T) (arg5@@4 T@T) ) (! (= (MapType4TypeInv2 (MapType4Type arg0@@176 arg1@@84 arg2@@36 arg3@@16 arg4@@8 arg5@@4)) arg2@@36) :qid |typeInv:MapType4TypeInv2| :pattern ( (MapType4Type arg0@@176 arg1@@84 arg2@@36 arg3@@16 arg4@@8 arg5@@4)) ))) (forall ((arg0@@177 T@T) (arg1@@85 T@T) (arg2@@37 T@T) (arg3@@17 T@T) (arg4@@9 T@T) (arg5@@5 T@T) ) (! (= (MapType4TypeInv3 (MapType4Type arg0@@177 arg1@@85 arg2@@37 arg3@@17 arg4@@9 arg5@@5)) arg3@@17) :qid |typeInv:MapType4TypeInv3| :pattern ( (MapType4Type arg0@@177 arg1@@85 arg2@@37 arg3@@17 arg4@@9 arg5@@5)) ))) (forall ((arg0@@178 T@T) (arg1@@86 T@T) (arg2@@38 T@T) (arg3@@18 T@T) (arg4@@10 T@T) (arg5@@6 T@T) ) (! (= (MapType4TypeInv4 (MapType4Type arg0@@178 arg1@@86 arg2@@38 arg3@@18 arg4@@10 arg5@@6)) arg4@@10) :qid |typeInv:MapType4TypeInv4| :pattern ( (MapType4Type arg0@@178 arg1@@86 arg2@@38 arg3@@18 arg4@@10 arg5@@6)) ))) (forall ((arg0@@179 T@T) (arg1@@87 T@T) (arg2@@39 T@T) (arg3@@19 T@T) (arg4@@11 T@T) (arg5@@7 T@T) ) (! (= (MapType4TypeInv5 (MapType4Type arg0@@179 arg1@@87 arg2@@39 arg3@@19 arg4@@11 arg5@@7)) arg5@@7) :qid |typeInv:MapType4TypeInv5| :pattern ( (MapType4Type arg0@@179 arg1@@87 arg2@@39 arg3@@19 arg4@@11 arg5@@7)) ))) (forall ((arg0@@180 T@U) (arg1@@88 T@U) (arg2@@40 T@U) (arg3@@20 T@U) (arg4@@12 T@U) (arg5@@8 T@U) ) (! (let ((aVar5 (MapType4TypeInv5 (type arg0@@180)))) (= (type (MapType4Select arg0@@180 arg1@@88 arg2@@40 arg3@@20 arg4@@12 arg5@@8)) aVar5)) :qid |funType:MapType4Select| :pattern ( (MapType4Select arg0@@180 arg1@@88 arg2@@40 arg3@@20 arg4@@12 arg5@@8)) ))) (forall ((arg0@@181 T@U) (arg1@@89 T@U) (arg2@@41 T@U) (arg3@@21 T@U) (arg4@@13 T@U) (arg5@@9 T@U) (arg6@@1 T@U) ) (! (let ((aVar5@@0 (type arg6@@1))) (let ((aVar4 (type arg5@@9))) (let ((aVar3@@2 (type arg4@@13))) (let ((aVar2@@3 (type arg3@@21))) (let ((aVar1@@4 (type arg2@@41))) (let ((aVar0@@2 (type arg1@@89))) (= (type (MapType4Store arg0@@181 arg1@@89 arg2@@41 arg3@@21 arg4@@13 arg5@@9 arg6@@1)) (MapType4Type aVar0@@2 aVar1@@4 aVar2@@3 aVar3@@2 aVar4 aVar5@@0)))))))) :qid |funType:MapType4Store| :pattern ( (MapType4Store arg0@@181 arg1@@89 arg2@@41 arg3@@21 arg4@@13 arg5@@9 arg6@@1)) ))) (forall ((m@@54 T@U) (x0@@14 T@U) (x1@@8 T@U) (x2@@4 T@U) (x3 T@U) (x4 T@U) (val@@15 T@U) ) (! (let ((aVar5@@1 (MapType4TypeInv5 (type m@@54)))) (=> (= (type val@@15) aVar5@@1) (= (MapType4Select (MapType4Store m@@54 x0@@14 x1@@8 x2@@4 x3 x4 val@@15) x0@@14 x1@@8 x2@@4 x3 x4) val@@15))) :qid |mapAx0:MapType4Select| :weight 0 ))) (and (and (and (and (and (forall ((val@@16 T@U) (m@@55 T@U) (x0@@15 T@U) (x1@@9 T@U) (x2@@5 T@U) (x3@@0 T@U) (x4@@0 T@U) (y0@@10 T@U) (y1@@6 T@U) (y2@@3 T@U) (y3 T@U) (y4 T@U) ) (!  (or (= x0@@15 y0@@10) (= (MapType4Select (MapType4Store m@@55 x0@@15 x1@@9 x2@@5 x3@@0 x4@@0 val@@16) y0@@10 y1@@6 y2@@3 y3 y4) (MapType4Select m@@55 y0@@10 y1@@6 y2@@3 y3 y4))) :qid |mapAx1:MapType4Select:0| :weight 0 )) (forall ((val@@17 T@U) (m@@56 T@U) (x0@@16 T@U) (x1@@10 T@U) (x2@@6 T@U) (x3@@1 T@U) (x4@@1 T@U) (y0@@11 T@U) (y1@@7 T@U) (y2@@4 T@U) (y3@@0 T@U) (y4@@0 T@U) ) (!  (or (= x1@@10 y1@@7) (= (MapType4Select (MapType4Store m@@56 x0@@16 x1@@10 x2@@6 x3@@1 x4@@1 val@@17) y0@@11 y1@@7 y2@@4 y3@@0 y4@@0) (MapType4Select m@@56 y0@@11 y1@@7 y2@@4 y3@@0 y4@@0))) :qid |mapAx1:MapType4Select:1| :weight 0 ))) (forall ((val@@18 T@U) (m@@57 T@U) (x0@@17 T@U) (x1@@11 T@U) (x2@@7 T@U) (x3@@2 T@U) (x4@@2 T@U) (y0@@12 T@U) (y1@@8 T@U) (y2@@5 T@U) (y3@@1 T@U) (y4@@1 T@U) ) (!  (or (= x2@@7 y2@@5) (= (MapType4Select (MapType4Store m@@57 x0@@17 x1@@11 x2@@7 x3@@2 x4@@2 val@@18) y0@@12 y1@@8 y2@@5 y3@@1 y4@@1) (MapType4Select m@@57 y0@@12 y1@@8 y2@@5 y3@@1 y4@@1))) :qid |mapAx1:MapType4Select:2| :weight 0 ))) (forall ((val@@19 T@U) (m@@58 T@U) (x0@@18 T@U) (x1@@12 T@U) (x2@@8 T@U) (x3@@3 T@U) (x4@@3 T@U) (y0@@13 T@U) (y1@@9 T@U) (y2@@6 T@U) (y3@@2 T@U) (y4@@2 T@U) ) (!  (or (= x3@@3 y3@@2) (= (MapType4Select (MapType4Store m@@58 x0@@18 x1@@12 x2@@8 x3@@3 x4@@3 val@@19) y0@@13 y1@@9 y2@@6 y3@@2 y4@@2) (MapType4Select m@@58 y0@@13 y1@@9 y2@@6 y3@@2 y4@@2))) :qid |mapAx1:MapType4Select:3| :weight 0 ))) (forall ((val@@20 T@U) (m@@59 T@U) (x0@@19 T@U) (x1@@13 T@U) (x2@@9 T@U) (x3@@4 T@U) (x4@@4 T@U) (y0@@14 T@U) (y1@@10 T@U) (y2@@7 T@U) (y3@@3 T@U) (y4@@3 T@U) ) (!  (or (= x4@@4 y4@@3) (= (MapType4Select (MapType4Store m@@59 x0@@19 x1@@13 x2@@9 x3@@4 x4@@4 val@@20) y0@@14 y1@@10 y2@@7 y3@@3 y4@@3) (MapType4Select m@@59 y0@@14 y1@@10 y2@@7 y3@@3 y4@@3))) :qid |mapAx1:MapType4Select:4| :weight 0 ))) (forall ((val@@21 T@U) (m@@60 T@U) (x0@@20 T@U) (x1@@14 T@U) (x2@@10 T@U) (x3@@5 T@U) (x4@@5 T@U) (y0@@15 T@U) (y1@@11 T@U) (y2@@8 T@U) (y3@@4 T@U) (y4@@4 T@U) ) (!  (or true (= (MapType4Select (MapType4Store m@@60 x0@@20 x1@@14 x2@@10 x3@@5 x4@@5 val@@21) y0@@15 y1@@11 y2@@8 y3@@4 y4@@4) (MapType4Select m@@60 y0@@15 y1@@11 y2@@8 y3@@4 y4@@4))) :qid |mapAx2:MapType4Select| :weight 0 )))) (forall ((arg0@@182 T@U) (arg1@@90 T@U) (arg2@@42 T@U) (arg3@@22 T@U) (arg4@@14 T@U) (arg5@@10 T@U) (arg6@@2 T@U) (arg7 T@U) (arg8 T@U) (arg9 T@U) (arg10 T@U) ) (! (= (type (Apply4 arg0@@182 arg1@@90 arg2@@42 arg3@@22 arg4@@14 arg5@@10 arg6@@2 arg7 arg8 arg9 arg10)) BoxType) :qid |funType:Apply4| :pattern ( (Apply4 arg0@@182 arg1@@90 arg2@@42 arg3@@22 arg4@@14 arg5@@10 arg6@@2 arg7 arg8 arg9 arg10)) ))) (forall ((arg0@@183 T@U) (arg1@@91 T@U) (arg2@@43 T@U) ) (! (= (type (Handle4 arg0@@183 arg1@@91 arg2@@43)) HandleTypeType) :qid |funType:Handle4| :pattern ( (Handle4 arg0@@183 arg1@@91 arg2@@43)) ))))
(assert (forall ((t0@@61 T@U) (t1@@37 T@U) (t2@@14 T@U) (t3 T@U) (t4 T@U) (heap@@16 T@U) (h@@39 T@U) (r@@18 T@U) (rd@@8 T@U) (bx0@@27 T@U) (bx1@@13 T@U) (bx2 T@U) (bx3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@61) TyType) (= (type t1@@37) TyType)) (= (type t2@@14) TyType)) (= (type t3) TyType)) (= (type t4) TyType)) (= (type heap@@16) (MapType0Type refType MapType1Type))) (= (type h@@39) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@18) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@8) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@27) BoxType)) (= (type bx1@@13) BoxType)) (= (type bx2) BoxType)) (= (type bx3) BoxType)) (= (Apply4 t0@@61 t1@@37 t2@@14 t3 t4 heap@@16 (Handle4 h@@39 r@@18 rd@@8) bx0@@27 bx1@@13 bx2 bx3) (MapType4Select h@@39 heap@@16 bx0@@27 bx1@@13 bx2 bx3))) :qid |unknown.0:0| :skolemid |860| :pattern ( (Apply4 t0@@61 t1@@37 t2@@14 t3 t4 heap@@16 (Handle4 h@@39 r@@18 rd@@8) bx0@@27 bx1@@13 bx2 bx3)) )))
(assert (forall ((t0@@62 T@U) (t1@@38 T@U) (t2@@15 T@U) (t3@@0 T@U) (t4@@0 T@U) (heap@@17 T@U) (h@@40 T@U) (r@@19 T@U) (rd@@9 T@U) (bx0@@28 T@U) (bx1@@14 T@U) (bx2@@0 T@U) (bx3@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@62) TyType) (= (type t1@@38) TyType)) (= (type t2@@15) TyType)) (= (type t3@@0) TyType)) (= (type t4@@0) TyType)) (= (type heap@@17) (MapType0Type refType MapType1Type))) (= (type h@@40) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@19) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@9) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@28) BoxType)) (= (type bx1@@14) BoxType)) (= (type bx2@@0) BoxType)) (= (type bx3@@0) BoxType)) (U_2_bool (MapType4Select r@@19 heap@@17 bx0@@28 bx1@@14 bx2@@0 bx3@@0))) (Requires4 t0@@62 t1@@38 t2@@15 t3@@0 t4@@0 heap@@17 (Handle4 h@@40 r@@19 rd@@9) bx0@@28 bx1@@14 bx2@@0 bx3@@0)) :qid |unknown.0:0| :skolemid |861| :pattern ( (Requires4 t0@@62 t1@@38 t2@@15 t3@@0 t4@@0 heap@@17 (Handle4 h@@40 r@@19 rd@@9) bx0@@28 bx1@@14 bx2@@0 bx3@@0)) )))
(assert (forall ((arg0@@184 T@U) (arg1@@92 T@U) (arg2@@44 T@U) (arg3@@23 T@U) (arg4@@15 T@U) (arg5@@11 T@U) (arg6@@3 T@U) (arg7@@0 T@U) (arg8@@0 T@U) (arg9@@0 T@U) (arg10@@0 T@U) ) (! (= (type (Reads4 arg0@@184 arg1@@92 arg2@@44 arg3@@23 arg4@@15 arg5@@11 arg6@@3 arg7@@0 arg8@@0 arg9@@0 arg10@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads4| :pattern ( (Reads4 arg0@@184 arg1@@92 arg2@@44 arg3@@23 arg4@@15 arg5@@11 arg6@@3 arg7@@0 arg8@@0 arg9@@0 arg10@@0)) )))
(assert (forall ((t0@@63 T@U) (t1@@39 T@U) (t2@@16 T@U) (t3@@1 T@U) (t4@@1 T@U) (heap@@18 T@U) (h@@41 T@U) (r@@20 T@U) (rd@@10 T@U) (bx0@@29 T@U) (bx1@@15 T@U) (bx2@@1 T@U) (bx3@@1 T@U) (bx@@51 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@63) TyType) (= (type t1@@39) TyType)) (= (type t2@@16) TyType)) (= (type t3@@1) TyType)) (= (type t4@@1) TyType)) (= (type heap@@18) (MapType0Type refType MapType1Type))) (= (type h@@41) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType))) (= (type r@@20) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType boolType))) (= (type rd@@10) (MapType4Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@29) BoxType)) (= (type bx1@@15) BoxType)) (= (type bx2@@1) BoxType)) (= (type bx3@@1) BoxType)) (= (type bx@@51) BoxType)) (= (U_2_bool (MapType0Select (Reads4 t0@@63 t1@@39 t2@@16 t3@@1 t4@@1 heap@@18 (Handle4 h@@41 r@@20 rd@@10) bx0@@29 bx1@@15 bx2@@1 bx3@@1) bx@@51)) (U_2_bool (MapType0Select (MapType4Select rd@@10 heap@@18 bx0@@29 bx1@@15 bx2@@1 bx3@@1) bx@@51)))) :qid |unknown.0:0| :skolemid |862| :pattern ( (MapType0Select (Reads4 t0@@63 t1@@39 t2@@16 t3@@1 t4@@1 heap@@18 (Handle4 h@@41 r@@20 rd@@10) bx0@@29 bx1@@15 bx2@@1 bx3@@1) bx@@51)) )))
(assert (forall ((t0@@64 T@U) (t1@@40 T@U) (t2@@17 T@U) (t3@@2 T@U) (t4@@2 T@U) (h0@@18 T@U) (h1@@18 T@U) (f@@41 T@U) (bx0@@30 T@U) (bx1@@16 T@U) (bx2@@2 T@U) (bx3@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@64) TyType) (= (type t1@@40) TyType)) (= (type t2@@17) TyType)) (= (type t3@@2) TyType)) (= (type t4@@2) TyType)) (= (type h0@@18) (MapType0Type refType MapType1Type))) (= (type h1@@18) (MapType0Type refType MapType1Type))) (= (type f@@41) HandleTypeType)) (= (type bx0@@30) BoxType)) (= (type bx1@@16) BoxType)) (= (type bx2@@2) BoxType)) (= (type bx3@@2) BoxType)) (and (and (and ($HeapSucc h0@@18 h1@@18) (and ($IsGoodHeap h0@@18) ($IsGoodHeap h1@@18))) (and (and (and (and ($IsBox bx0@@30 t0@@64) ($IsBox bx1@@16 t1@@40)) ($IsBox bx2@@2 t2@@17)) ($IsBox bx3@@2 t3@@2)) ($Is f@@41 (Tclass._System.___hFunc4 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2)))) (forall ((o@@62 T@U) (fld@@17 T@U) ) (! (let ((a@@100 (FieldTypeInv0 (type fld@@17)))) (=> (and (and (= (type o@@62) refType) (= (type fld@@17) (FieldType a@@100))) (and (not (= o@@62 null)) (U_2_bool (MapType0Select (Reads4 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2 h0@@18 f@@41 bx0@@30 bx1@@16 bx2@@2 bx3@@2) ($Box o@@62))))) (= (MapType1Select (MapType0Select h0@@18 o@@62) fld@@17) (MapType1Select (MapType0Select h1@@18 o@@62) fld@@17)))) :qid |unknown.0:0| :skolemid |863| :no-pattern (type o@@62) :no-pattern (type fld@@17) :no-pattern (U_2_int o@@62) :no-pattern (U_2_bool o@@62) :no-pattern (U_2_int fld@@17) :no-pattern (U_2_bool fld@@17) )))) (= (Reads4 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2 h0@@18 f@@41 bx0@@30 bx1@@16 bx2@@2 bx3@@2) (Reads4 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2 h1@@18 f@@41 bx0@@30 bx1@@16 bx2@@2 bx3@@2))) :qid |unknown.0:0| :skolemid |864| :pattern ( ($HeapSucc h0@@18 h1@@18) (Reads4 t0@@64 t1@@40 t2@@17 t3@@2 t4@@2 h1@@18 f@@41 bx0@@30 bx1@@16 bx2@@2 bx3@@2)) )))
(assert (forall ((t0@@65 T@U) (t1@@41 T@U) (t2@@18 T@U) (t3@@3 T@U) (t4@@3 T@U) (h0@@19 T@U) (h1@@19 T@U) (f@@42 T@U) (bx0@@31 T@U) (bx1@@17 T@U) (bx2@@3 T@U) (bx3@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@65) TyType) (= (type t1@@41) TyType)) (= (type t2@@18) TyType)) (= (type t3@@3) TyType)) (= (type t4@@3) TyType)) (= (type h0@@19) (MapType0Type refType MapType1Type))) (= (type h1@@19) (MapType0Type refType MapType1Type))) (= (type f@@42) HandleTypeType)) (= (type bx0@@31) BoxType)) (= (type bx1@@17) BoxType)) (= (type bx2@@3) BoxType)) (= (type bx3@@3) BoxType)) (and (and (and ($HeapSucc h0@@19 h1@@19) (and ($IsGoodHeap h0@@19) ($IsGoodHeap h1@@19))) (and (and (and (and ($IsBox bx0@@31 t0@@65) ($IsBox bx1@@17 t1@@41)) ($IsBox bx2@@3 t2@@18)) ($IsBox bx3@@3 t3@@3)) ($Is f@@42 (Tclass._System.___hFunc4 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3)))) (forall ((o@@63 T@U) (fld@@18 T@U) ) (! (let ((a@@101 (FieldTypeInv0 (type fld@@18)))) (=> (and (and (= (type o@@63) refType) (= (type fld@@18) (FieldType a@@101))) (and (not (= o@@63 null)) (U_2_bool (MapType0Select (Reads4 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3 bx3@@3) ($Box o@@63))))) (= (MapType1Select (MapType0Select h0@@19 o@@63) fld@@18) (MapType1Select (MapType0Select h1@@19 o@@63) fld@@18)))) :qid |unknown.0:0| :skolemid |865| :no-pattern (type o@@63) :no-pattern (type fld@@18) :no-pattern (U_2_int o@@63) :no-pattern (U_2_bool o@@63) :no-pattern (U_2_int fld@@18) :no-pattern (U_2_bool fld@@18) )))) (= (Reads4 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3 h0@@19 f@@42 bx0@@31 bx1@@17 bx2@@3 bx3@@3) (Reads4 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3 bx3@@3))) :qid |unknown.0:0| :skolemid |866| :pattern ( ($HeapSucc h0@@19 h1@@19) (Reads4 t0@@65 t1@@41 t2@@18 t3@@3 t4@@3 h1@@19 f@@42 bx0@@31 bx1@@17 bx2@@3 bx3@@3)) )))
(assert (forall ((t0@@66 T@U) (t1@@42 T@U) (t2@@19 T@U) (t3@@4 T@U) (t4@@4 T@U) (h0@@20 T@U) (h1@@20 T@U) (f@@43 T@U) (bx0@@32 T@U) (bx1@@18 T@U) (bx2@@4 T@U) (bx3@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@66) TyType) (= (type t1@@42) TyType)) (= (type t2@@19) TyType)) (= (type t3@@4) TyType)) (= (type t4@@4) TyType)) (= (type h0@@20) (MapType0Type refType MapType1Type))) (= (type h1@@20) (MapType0Type refType MapType1Type))) (= (type f@@43) HandleTypeType)) (= (type bx0@@32) BoxType)) (= (type bx1@@18) BoxType)) (= (type bx2@@4) BoxType)) (= (type bx3@@4) BoxType)) (and (and (and ($HeapSucc h0@@20 h1@@20) (and ($IsGoodHeap h0@@20) ($IsGoodHeap h1@@20))) (and (and (and (and ($IsBox bx0@@32 t0@@66) ($IsBox bx1@@18 t1@@42)) ($IsBox bx2@@4 t2@@19)) ($IsBox bx3@@4 t3@@4)) ($Is f@@43 (Tclass._System.___hFunc4 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4)))) (forall ((o@@64 T@U) (fld@@19 T@U) ) (! (let ((a@@102 (FieldTypeInv0 (type fld@@19)))) (=> (and (and (= (type o@@64) refType) (= (type fld@@19) (FieldType a@@102))) (and (not (= o@@64 null)) (U_2_bool (MapType0Select (Reads4 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4 h0@@20 f@@43 bx0@@32 bx1@@18 bx2@@4 bx3@@4) ($Box o@@64))))) (= (MapType1Select (MapType0Select h0@@20 o@@64) fld@@19) (MapType1Select (MapType0Select h1@@20 o@@64) fld@@19)))) :qid |unknown.0:0| :skolemid |867| :no-pattern (type o@@64) :no-pattern (type fld@@19) :no-pattern (U_2_int o@@64) :no-pattern (U_2_bool o@@64) :no-pattern (U_2_int fld@@19) :no-pattern (U_2_bool fld@@19) )))) (= (Requires4 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4 h0@@20 f@@43 bx0@@32 bx1@@18 bx2@@4 bx3@@4) (Requires4 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4 h1@@20 f@@43 bx0@@32 bx1@@18 bx2@@4 bx3@@4))) :qid |unknown.0:0| :skolemid |868| :pattern ( ($HeapSucc h0@@20 h1@@20) (Requires4 t0@@66 t1@@42 t2@@19 t3@@4 t4@@4 h1@@20 f@@43 bx0@@32 bx1@@18 bx2@@4 bx3@@4)) )))
(assert (forall ((t0@@67 T@U) (t1@@43 T@U) (t2@@20 T@U) (t3@@5 T@U) (t4@@5 T@U) (h0@@21 T@U) (h1@@21 T@U) (f@@44 T@U) (bx0@@33 T@U) (bx1@@19 T@U) (bx2@@5 T@U) (bx3@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@67) TyType) (= (type t1@@43) TyType)) (= (type t2@@20) TyType)) (= (type t3@@5) TyType)) (= (type t4@@5) TyType)) (= (type h0@@21) (MapType0Type refType MapType1Type))) (= (type h1@@21) (MapType0Type refType MapType1Type))) (= (type f@@44) HandleTypeType)) (= (type bx0@@33) BoxType)) (= (type bx1@@19) BoxType)) (= (type bx2@@5) BoxType)) (= (type bx3@@5) BoxType)) (and (and (and ($HeapSucc h0@@21 h1@@21) (and ($IsGoodHeap h0@@21) ($IsGoodHeap h1@@21))) (and (and (and (and ($IsBox bx0@@33 t0@@67) ($IsBox bx1@@19 t1@@43)) ($IsBox bx2@@5 t2@@20)) ($IsBox bx3@@5 t3@@5)) ($Is f@@44 (Tclass._System.___hFunc4 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5)))) (forall ((o@@65 T@U) (fld@@20 T@U) ) (! (let ((a@@103 (FieldTypeInv0 (type fld@@20)))) (=> (and (and (= (type o@@65) refType) (= (type fld@@20) (FieldType a@@103))) (and (not (= o@@65 null)) (U_2_bool (MapType0Select (Reads4 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5 bx3@@5) ($Box o@@65))))) (= (MapType1Select (MapType0Select h0@@21 o@@65) fld@@20) (MapType1Select (MapType0Select h1@@21 o@@65) fld@@20)))) :qid |unknown.0:0| :skolemid |869| :no-pattern (type o@@65) :no-pattern (type fld@@20) :no-pattern (U_2_int o@@65) :no-pattern (U_2_bool o@@65) :no-pattern (U_2_int fld@@20) :no-pattern (U_2_bool fld@@20) )))) (= (Requires4 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5 h0@@21 f@@44 bx0@@33 bx1@@19 bx2@@5 bx3@@5) (Requires4 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5 bx3@@5))) :qid |unknown.0:0| :skolemid |870| :pattern ( ($HeapSucc h0@@21 h1@@21) (Requires4 t0@@67 t1@@43 t2@@20 t3@@5 t4@@5 h1@@21 f@@44 bx0@@33 bx1@@19 bx2@@5 bx3@@5)) )))
(assert (forall ((t0@@68 T@U) (t1@@44 T@U) (t2@@21 T@U) (t3@@6 T@U) (t4@@6 T@U) (h0@@22 T@U) (h1@@22 T@U) (f@@45 T@U) (bx0@@34 T@U) (bx1@@20 T@U) (bx2@@6 T@U) (bx3@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@68) TyType) (= (type t1@@44) TyType)) (= (type t2@@21) TyType)) (= (type t3@@6) TyType)) (= (type t4@@6) TyType)) (= (type h0@@22) (MapType0Type refType MapType1Type))) (= (type h1@@22) (MapType0Type refType MapType1Type))) (= (type f@@45) HandleTypeType)) (= (type bx0@@34) BoxType)) (= (type bx1@@20) BoxType)) (= (type bx2@@6) BoxType)) (= (type bx3@@6) BoxType)) (and (and (and ($HeapSucc h0@@22 h1@@22) (and ($IsGoodHeap h0@@22) ($IsGoodHeap h1@@22))) (and (and (and (and ($IsBox bx0@@34 t0@@68) ($IsBox bx1@@20 t1@@44)) ($IsBox bx2@@6 t2@@21)) ($IsBox bx3@@6 t3@@6)) ($Is f@@45 (Tclass._System.___hFunc4 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6)))) (forall ((o@@66 T@U) (fld@@21 T@U) ) (! (let ((a@@104 (FieldTypeInv0 (type fld@@21)))) (=> (and (and (= (type o@@66) refType) (= (type fld@@21) (FieldType a@@104))) (and (not (= o@@66 null)) (U_2_bool (MapType0Select (Reads4 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6 h0@@22 f@@45 bx0@@34 bx1@@20 bx2@@6 bx3@@6) ($Box o@@66))))) (= (MapType1Select (MapType0Select h0@@22 o@@66) fld@@21) (MapType1Select (MapType0Select h1@@22 o@@66) fld@@21)))) :qid |unknown.0:0| :skolemid |871| :no-pattern (type o@@66) :no-pattern (type fld@@21) :no-pattern (U_2_int o@@66) :no-pattern (U_2_bool o@@66) :no-pattern (U_2_int fld@@21) :no-pattern (U_2_bool fld@@21) )))) (= (Apply4 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6 h0@@22 f@@45 bx0@@34 bx1@@20 bx2@@6 bx3@@6) (Apply4 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6 h1@@22 f@@45 bx0@@34 bx1@@20 bx2@@6 bx3@@6))) :qid |unknown.0:0| :skolemid |872| :pattern ( ($HeapSucc h0@@22 h1@@22) (Apply4 t0@@68 t1@@44 t2@@21 t3@@6 t4@@6 h1@@22 f@@45 bx0@@34 bx1@@20 bx2@@6 bx3@@6)) )))
(assert (forall ((t0@@69 T@U) (t1@@45 T@U) (t2@@22 T@U) (t3@@7 T@U) (t4@@7 T@U) (h0@@23 T@U) (h1@@23 T@U) (f@@46 T@U) (bx0@@35 T@U) (bx1@@21 T@U) (bx2@@7 T@U) (bx3@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@69) TyType) (= (type t1@@45) TyType)) (= (type t2@@22) TyType)) (= (type t3@@7) TyType)) (= (type t4@@7) TyType)) (= (type h0@@23) (MapType0Type refType MapType1Type))) (= (type h1@@23) (MapType0Type refType MapType1Type))) (= (type f@@46) HandleTypeType)) (= (type bx0@@35) BoxType)) (= (type bx1@@21) BoxType)) (= (type bx2@@7) BoxType)) (= (type bx3@@7) BoxType)) (and (and (and ($HeapSucc h0@@23 h1@@23) (and ($IsGoodHeap h0@@23) ($IsGoodHeap h1@@23))) (and (and (and (and ($IsBox bx0@@35 t0@@69) ($IsBox bx1@@21 t1@@45)) ($IsBox bx2@@7 t2@@22)) ($IsBox bx3@@7 t3@@7)) ($Is f@@46 (Tclass._System.___hFunc4 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7)))) (forall ((o@@67 T@U) (fld@@22 T@U) ) (! (let ((a@@105 (FieldTypeInv0 (type fld@@22)))) (=> (and (and (= (type o@@67) refType) (= (type fld@@22) (FieldType a@@105))) (and (not (= o@@67 null)) (U_2_bool (MapType0Select (Reads4 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7 bx3@@7) ($Box o@@67))))) (= (MapType1Select (MapType0Select h0@@23 o@@67) fld@@22) (MapType1Select (MapType0Select h1@@23 o@@67) fld@@22)))) :qid |unknown.0:0| :skolemid |873| :no-pattern (type o@@67) :no-pattern (type fld@@22) :no-pattern (U_2_int o@@67) :no-pattern (U_2_bool o@@67) :no-pattern (U_2_int fld@@22) :no-pattern (U_2_bool fld@@22) )))) (= (Apply4 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7 h0@@23 f@@46 bx0@@35 bx1@@21 bx2@@7 bx3@@7) (Apply4 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7 bx3@@7))) :qid |unknown.0:0| :skolemid |874| :pattern ( ($HeapSucc h0@@23 h1@@23) (Apply4 t0@@69 t1@@45 t2@@22 t3@@7 t4@@7 h1@@23 f@@46 bx0@@35 bx1@@21 bx2@@7 bx3@@7)) )))
(assert (forall ((t0@@70 T@U) (t1@@46 T@U) (t2@@23 T@U) (t3@@8 T@U) (t4@@8 T@U) (heap@@19 T@U) (f@@47 T@U) (bx0@@36 T@U) (bx1@@22 T@U) (bx2@@8 T@U) (bx3@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@70) TyType) (= (type t1@@46) TyType)) (= (type t2@@23) TyType)) (= (type t3@@8) TyType)) (= (type t4@@8) TyType)) (= (type heap@@19) (MapType0Type refType MapType1Type))) (= (type f@@47) HandleTypeType)) (= (type bx0@@36) BoxType)) (= (type bx1@@22) BoxType)) (= (type bx2@@8) BoxType)) (= (type bx3@@8) BoxType)) (and ($IsGoodHeap heap@@19) (and (and (and (and ($IsBox bx0@@36 t0@@70) ($IsBox bx1@@22 t1@@46)) ($IsBox bx2@@8 t2@@23)) ($IsBox bx3@@8 t3@@8)) ($Is f@@47 (Tclass._System.___hFunc4 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8))))) (= (|Set#Equal| (Reads4 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8 $OneHeap f@@47 bx0@@36 bx1@@22 bx2@@8 bx3@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads4 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8 heap@@19 f@@47 bx0@@36 bx1@@22 bx2@@8 bx3@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |875| :pattern ( (Reads4 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8 $OneHeap f@@47 bx0@@36 bx1@@22 bx2@@8 bx3@@8) ($IsGoodHeap heap@@19)) :pattern ( (Reads4 t0@@70 t1@@46 t2@@23 t3@@8 t4@@8 heap@@19 f@@47 bx0@@36 bx1@@22 bx2@@8 bx3@@8)) )))
(assert (forall ((t0@@71 T@U) (t1@@47 T@U) (t2@@24 T@U) (t3@@9 T@U) (t4@@9 T@U) (heap@@20 T@U) (f@@48 T@U) (bx0@@37 T@U) (bx1@@23 T@U) (bx2@@9 T@U) (bx3@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@71) TyType) (= (type t1@@47) TyType)) (= (type t2@@24) TyType)) (= (type t3@@9) TyType)) (= (type t4@@9) TyType)) (= (type heap@@20) (MapType0Type refType MapType1Type))) (= (type f@@48) HandleTypeType)) (= (type bx0@@37) BoxType)) (= (type bx1@@23) BoxType)) (= (type bx2@@9) BoxType)) (= (type bx3@@9) BoxType)) (and (and ($IsGoodHeap heap@@20) (and (and (and (and ($IsBox bx0@@37 t0@@71) ($IsBox bx1@@23 t1@@47)) ($IsBox bx2@@9 t2@@24)) ($IsBox bx3@@9 t3@@9)) ($Is f@@48 (Tclass._System.___hFunc4 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9)))) (|Set#Equal| (Reads4 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9) (|Set#Empty| BoxType)))) (= (Requires4 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9) (Requires4 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 heap@@20 f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9))) :qid |unknown.0:0| :skolemid |876| :pattern ( (Requires4 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 $OneHeap f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9) ($IsGoodHeap heap@@20)) :pattern ( (Requires4 t0@@71 t1@@47 t2@@24 t3@@9 t4@@9 heap@@20 f@@48 bx0@@37 bx1@@23 bx2@@9 bx3@@9)) )))
(assert (forall ((f@@49 T@U) (t0@@72 T@U) (t1@@48 T@U) (t2@@25 T@U) (t3@@10 T@U) (t4@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type f@@49) HandleTypeType) (= (type t0@@72) TyType)) (= (type t1@@48) TyType)) (= (type t2@@25) TyType)) (= (type t3@@10) TyType)) (= (type t4@@10) TyType)) (= ($Is f@@49 (Tclass._System.___hFunc4 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10)) (forall ((h@@42 T@U) (bx0@@38 T@U) (bx1@@24 T@U) (bx2@@10 T@U) (bx3@@10 T@U) ) (!  (=> (and (and (and (and (and (= (type h@@42) (MapType0Type refType MapType1Type)) (= (type bx0@@38) BoxType)) (= (type bx1@@24) BoxType)) (= (type bx2@@10) BoxType)) (= (type bx3@@10) BoxType)) (and (and ($IsGoodHeap h@@42) (and (and (and ($IsBox bx0@@38 t0@@72) ($IsBox bx1@@24 t1@@48)) ($IsBox bx2@@10 t2@@25)) ($IsBox bx3@@10 t3@@10))) (Requires4 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10 bx3@@10))) ($IsBox (Apply4 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10 bx3@@10) t4@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |877| :pattern ( (Apply4 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10 h@@42 f@@49 bx0@@38 bx1@@24 bx2@@10 bx3@@10)) )))) :qid |unknown.0:0| :skolemid |878| :pattern ( ($Is f@@49 (Tclass._System.___hFunc4 t0@@72 t1@@48 t2@@25 t3@@10 t4@@10))) )))
(assert (forall ((f@@50 T@U) (t0@@73 T@U) (t1@@49 T@U) (t2@@26 T@U) (t3@@11 T@U) (t4@@11 T@U) (u0@@2 T@U) (u1@@1 T@U) (u2@@0 T@U) (u3 T@U) (u4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type f@@50) HandleTypeType) (= (type t0@@73) TyType)) (= (type t1@@49) TyType)) (= (type t2@@26) TyType)) (= (type t3@@11) TyType)) (= (type t4@@11) TyType)) (= (type u0@@2) TyType)) (= (type u1@@1) TyType)) (= (type u2@@0) TyType)) (= (type u3) TyType)) (= (type u4) TyType)) (and (and (and (and (and ($Is f@@50 (Tclass._System.___hFunc4 t0@@73 t1@@49 t2@@26 t3@@11 t4@@11)) (forall ((bx@@52 T@U) ) (!  (=> (and (= (type bx@@52) BoxType) ($IsBox bx@@52 u0@@2)) ($IsBox bx@@52 t0@@73)) :qid |unknown.0:0| :skolemid |879| :pattern ( ($IsBox bx@@52 u0@@2)) :pattern ( ($IsBox bx@@52 t0@@73)) ))) (forall ((bx@@53 T@U) ) (!  (=> (and (= (type bx@@53) BoxType) ($IsBox bx@@53 u1@@1)) ($IsBox bx@@53 t1@@49)) :qid |unknown.0:0| :skolemid |880| :pattern ( ($IsBox bx@@53 u1@@1)) :pattern ( ($IsBox bx@@53 t1@@49)) ))) (forall ((bx@@54 T@U) ) (!  (=> (and (= (type bx@@54) BoxType) ($IsBox bx@@54 u2@@0)) ($IsBox bx@@54 t2@@26)) :qid |unknown.0:0| :skolemid |881| :pattern ( ($IsBox bx@@54 u2@@0)) :pattern ( ($IsBox bx@@54 t2@@26)) ))) (forall ((bx@@55 T@U) ) (!  (=> (and (= (type bx@@55) BoxType) ($IsBox bx@@55 u3)) ($IsBox bx@@55 t3@@11)) :qid |unknown.0:0| :skolemid |882| :pattern ( ($IsBox bx@@55 u3)) :pattern ( ($IsBox bx@@55 t3@@11)) ))) (forall ((bx@@56 T@U) ) (!  (=> (and (= (type bx@@56) BoxType) ($IsBox bx@@56 t4@@11)) ($IsBox bx@@56 u4)) :qid |unknown.0:0| :skolemid |883| :pattern ( ($IsBox bx@@56 t4@@11)) :pattern ( ($IsBox bx@@56 u4)) )))) ($Is f@@50 (Tclass._System.___hFunc4 u0@@2 u1@@1 u2@@0 u3 u4))) :qid |unknown.0:0| :skolemid |884| :pattern ( ($Is f@@50 (Tclass._System.___hFunc4 t0@@73 t1@@49 t2@@26 t3@@11 t4@@11)) ($Is f@@50 (Tclass._System.___hFunc4 u0@@2 u1@@1 u2@@0 u3 u4))) )))
(assert (forall ((f@@51 T@U) (t0@@74 T@U) (t1@@50 T@U) (t2@@27 T@U) (t3@@12 T@U) (t4@@12 T@U) (h@@43 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@51) HandleTypeType) (= (type t0@@74) TyType)) (= (type t1@@50) TyType)) (= (type t2@@27) TyType)) (= (type t3@@12) TyType)) (= (type t4@@12) TyType)) (= (type h@@43) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@43)) (= ($IsAlloc f@@51 (Tclass._System.___hFunc4 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12) h@@43) (forall ((bx0@@39 T@U) (bx1@@25 T@U) (bx2@@11 T@U) (bx3@@11 T@U) ) (!  (=> (and (and (and (= (type bx0@@39) BoxType) (= (type bx1@@25) BoxType)) (= (type bx2@@11) BoxType)) (= (type bx3@@11) BoxType)) (=> (and (and (and (and (and ($IsBox bx0@@39 t0@@74) ($IsAllocBox bx0@@39 t0@@74 h@@43)) (and ($IsBox bx1@@25 t1@@50) ($IsAllocBox bx1@@25 t1@@50 h@@43))) (and ($IsBox bx2@@11 t2@@27) ($IsAllocBox bx2@@11 t2@@27 h@@43))) (and ($IsBox bx3@@11 t3@@12) ($IsAllocBox bx3@@11 t3@@12 h@@43))) (Requires4 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11)) (forall ((r@@21 T@U) ) (!  (=> (= (type r@@21) refType) (=> (and (not (= r@@21 null)) (U_2_bool (MapType0Select (Reads4 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11) ($Box r@@21)))) (U_2_bool (MapType1Select (MapType0Select h@@43 r@@21) alloc)))) :qid |unknown.0:0| :skolemid |885| :pattern ( (MapType0Select (Reads4 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11) ($Box r@@21))) )))) :qid |unknown.0:0| :skolemid |886| :pattern ( (Apply4 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11)) :pattern ( (Reads4 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12 h@@43 f@@51 bx0@@39 bx1@@25 bx2@@11 bx3@@11)) )))) :qid |unknown.0:0| :skolemid |887| :pattern ( ($IsAlloc f@@51 (Tclass._System.___hFunc4 t0@@74 t1@@50 t2@@27 t3@@12 t4@@12) h@@43)) )))
(assert (forall ((f@@52 T@U) (t0@@75 T@U) (t1@@51 T@U) (t2@@28 T@U) (t3@@13 T@U) (t4@@13 T@U) (h@@44 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@52) HandleTypeType) (= (type t0@@75) TyType)) (= (type t1@@51) TyType)) (= (type t2@@28) TyType)) (= (type t3@@13) TyType)) (= (type t4@@13) TyType)) (= (type h@@44) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@44) ($IsAlloc f@@52 (Tclass._System.___hFunc4 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13) h@@44))) (forall ((bx0@@40 T@U) (bx1@@26 T@U) (bx2@@12 T@U) (bx3@@12 T@U) ) (!  (=> (and (and (and (= (type bx0@@40) BoxType) (= (type bx1@@26) BoxType)) (= (type bx2@@12) BoxType)) (= (type bx3@@12) BoxType)) (=> (and (and (and (and ($IsAllocBox bx0@@40 t0@@75 h@@44) ($IsAllocBox bx1@@26 t1@@51 h@@44)) ($IsAllocBox bx2@@12 t2@@28 h@@44)) ($IsAllocBox bx3@@12 t3@@13 h@@44)) (Requires4 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12 bx3@@12)) ($IsAllocBox (Apply4 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12 bx3@@12) t4@@13 h@@44))) :qid |unknown.0:0| :skolemid |888| :pattern ( (Apply4 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13 h@@44 f@@52 bx0@@40 bx1@@26 bx2@@12 bx3@@12)) ))) :qid |unknown.0:0| :skolemid |889| :pattern ( ($IsAlloc f@@52 (Tclass._System.___hFunc4 t0@@75 t1@@51 t2@@28 t3@@13 t4@@13) h@@44)) )))
(assert (forall ((arg0@@185 T@U) (arg1@@93 T@U) (arg2@@45 T@U) (arg3@@24 T@U) (arg4@@16 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4 arg0@@185 arg1@@93 arg2@@45 arg3@@24 arg4@@16)) TyType) :qid |funType:Tclass._System.___hPartialFunc4| :pattern ( (Tclass._System.___hPartialFunc4 arg0@@185 arg1@@93 arg2@@45 arg3@@24 arg4@@16)) )))
(assert (forall ((|#$T0@@41| T@U) (|#$T1@@25| T@U) (|#$T2@@6| T@U) (|#$T3@@6| T@U) (|#$R@@54| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@41|) TyType) (= (type |#$T1@@25|) TyType)) (= (type |#$T2@@6|) TyType)) (= (type |#$T3@@6|) TyType)) (= (type |#$R@@54|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc4 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$T3@@6| |#$R@@54|)) Tagclass._System.___hPartialFunc4) (= (TagFamily (Tclass._System.___hPartialFunc4 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$T3@@6| |#$R@@54|)) |tytagFamily$_#PartialFunc4|))) :qid |unknown.0:0| :skolemid |890| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@41| |#$T1@@25| |#$T2@@6| |#$T3@@6| |#$R@@54|)) )))
(assert (forall ((arg0@@186 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_0 arg0@@186)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_0| :pattern ( (Tclass._System.___hPartialFunc4_0 arg0@@186)) )))
(assert (forall ((|#$T0@@42| T@U) (|#$T1@@26| T@U) (|#$T2@@7| T@U) (|#$T3@@7| T@U) (|#$R@@55| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@42|) TyType) (= (type |#$T1@@26|) TyType)) (= (type |#$T2@@7|) TyType)) (= (type |#$T3@@7|) TyType)) (= (type |#$R@@55|) TyType)) (= (Tclass._System.___hPartialFunc4_0 (Tclass._System.___hPartialFunc4 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$T3@@7| |#$R@@55|)) |#$T0@@42|)) :qid |unknown.0:0| :skolemid |891| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@42| |#$T1@@26| |#$T2@@7| |#$T3@@7| |#$R@@55|)) )))
(assert (forall ((arg0@@187 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_1 arg0@@187)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_1| :pattern ( (Tclass._System.___hPartialFunc4_1 arg0@@187)) )))
(assert (forall ((|#$T0@@43| T@U) (|#$T1@@27| T@U) (|#$T2@@8| T@U) (|#$T3@@8| T@U) (|#$R@@56| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@43|) TyType) (= (type |#$T1@@27|) TyType)) (= (type |#$T2@@8|) TyType)) (= (type |#$T3@@8|) TyType)) (= (type |#$R@@56|) TyType)) (= (Tclass._System.___hPartialFunc4_1 (Tclass._System.___hPartialFunc4 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$T3@@8| |#$R@@56|)) |#$T1@@27|)) :qid |unknown.0:0| :skolemid |892| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@43| |#$T1@@27| |#$T2@@8| |#$T3@@8| |#$R@@56|)) )))
(assert (forall ((arg0@@188 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_2 arg0@@188)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_2| :pattern ( (Tclass._System.___hPartialFunc4_2 arg0@@188)) )))
(assert (forall ((|#$T0@@44| T@U) (|#$T1@@28| T@U) (|#$T2@@9| T@U) (|#$T3@@9| T@U) (|#$R@@57| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@44|) TyType) (= (type |#$T1@@28|) TyType)) (= (type |#$T2@@9|) TyType)) (= (type |#$T3@@9|) TyType)) (= (type |#$R@@57|) TyType)) (= (Tclass._System.___hPartialFunc4_2 (Tclass._System.___hPartialFunc4 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$T3@@9| |#$R@@57|)) |#$T2@@9|)) :qid |unknown.0:0| :skolemid |893| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@44| |#$T1@@28| |#$T2@@9| |#$T3@@9| |#$R@@57|)) )))
(assert (forall ((arg0@@189 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_3 arg0@@189)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_3| :pattern ( (Tclass._System.___hPartialFunc4_3 arg0@@189)) )))
(assert (forall ((|#$T0@@45| T@U) (|#$T1@@29| T@U) (|#$T2@@10| T@U) (|#$T3@@10| T@U) (|#$R@@58| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@45|) TyType) (= (type |#$T1@@29|) TyType)) (= (type |#$T2@@10|) TyType)) (= (type |#$T3@@10|) TyType)) (= (type |#$R@@58|) TyType)) (= (Tclass._System.___hPartialFunc4_3 (Tclass._System.___hPartialFunc4 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$T3@@10| |#$R@@58|)) |#$T3@@10|)) :qid |unknown.0:0| :skolemid |894| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@45| |#$T1@@29| |#$T2@@10| |#$T3@@10| |#$R@@58|)) )))
(assert (forall ((arg0@@190 T@U) ) (! (= (type (Tclass._System.___hPartialFunc4_4 arg0@@190)) TyType) :qid |funType:Tclass._System.___hPartialFunc4_4| :pattern ( (Tclass._System.___hPartialFunc4_4 arg0@@190)) )))
(assert (forall ((|#$T0@@46| T@U) (|#$T1@@30| T@U) (|#$T2@@11| T@U) (|#$T3@@11| T@U) (|#$R@@59| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@46|) TyType) (= (type |#$T1@@30|) TyType)) (= (type |#$T2@@11|) TyType)) (= (type |#$T3@@11|) TyType)) (= (type |#$R@@59|) TyType)) (= (Tclass._System.___hPartialFunc4_4 (Tclass._System.___hPartialFunc4 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$T3@@11| |#$R@@59|)) |#$R@@59|)) :qid |unknown.0:0| :skolemid |895| :pattern ( (Tclass._System.___hPartialFunc4 |#$T0@@46| |#$T1@@30| |#$T2@@11| |#$T3@@11| |#$R@@59|)) )))
(assert (forall ((|#$T0@@47| T@U) (|#$T1@@31| T@U) (|#$T2@@12| T@U) (|#$T3@@12| T@U) (|#$R@@60| T@U) (bx@@57 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@47|) TyType) (= (type |#$T1@@31|) TyType)) (= (type |#$T2@@12|) TyType)) (= (type |#$T3@@12|) TyType)) (= (type |#$R@@60|) TyType)) (= (type bx@@57) BoxType)) ($IsBox bx@@57 (Tclass._System.___hPartialFunc4 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$T3@@12| |#$R@@60|))) (and (= ($Box ($Unbox HandleTypeType bx@@57)) bx@@57) ($Is ($Unbox HandleTypeType bx@@57) (Tclass._System.___hPartialFunc4 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$T3@@12| |#$R@@60|)))) :qid |unknown.0:0| :skolemid |896| :pattern ( ($IsBox bx@@57 (Tclass._System.___hPartialFunc4 |#$T0@@47| |#$T1@@31| |#$T2@@12| |#$T3@@12| |#$R@@60|))) )))
(assert (forall ((|#$T0@@48| T@U) (|#$T1@@32| T@U) (|#$T2@@13| T@U) (|#$T3@@13| T@U) (|#$R@@61| T@U) (|f#0@@11| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@48|) TyType) (= (type |#$T1@@32|) TyType)) (= (type |#$T2@@13|) TyType)) (= (type |#$T3@@13|) TyType)) (= (type |#$R@@61|) TyType)) (= (type |f#0@@11|) HandleTypeType)) (= ($Is |f#0@@11| (Tclass._System.___hPartialFunc4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61|))  (and ($Is |f#0@@11| (Tclass._System.___hFunc4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61|)) (forall ((|x0#0@@3| T@U) (|x1#0@@1| T@U) (|x2#0| T@U) (|x3#0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@3|) BoxType) (= (type |x1#0@@1|) BoxType)) (= (type |x2#0|) BoxType)) (= (type |x3#0|) BoxType)) (and (and (and ($IsBox |x0#0@@3| |#$T0@@48|) ($IsBox |x1#0@@1| |#$T1@@32|)) ($IsBox |x2#0| |#$T2@@13|)) ($IsBox |x3#0| |#$T3@@13|))) (|Set#Equal| (Reads4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61| $OneHeap |f#0@@11| |x0#0@@3| |x1#0@@1| |x2#0| |x3#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |897| :no-pattern (type |x0#0@@3|) :no-pattern (type |x1#0@@1|) :no-pattern (type |x2#0|) :no-pattern (type |x3#0|) :no-pattern (U_2_int |x0#0@@3|) :no-pattern (U_2_bool |x0#0@@3|) :no-pattern (U_2_int |x1#0@@1|) :no-pattern (U_2_bool |x1#0@@1|) :no-pattern (U_2_int |x2#0|) :no-pattern (U_2_bool |x2#0|) :no-pattern (U_2_int |x3#0|) :no-pattern (U_2_bool |x3#0|) ))))) :qid |unknown.0:0| :skolemid |898| :pattern ( ($Is |f#0@@11| (Tclass._System.___hPartialFunc4 |#$T0@@48| |#$T1@@32| |#$T2@@13| |#$T3@@13| |#$R@@61|))) )))
(assert (forall ((|#$T0@@49| T@U) (|#$T1@@33| T@U) (|#$T2@@14| T@U) (|#$T3@@14| T@U) (|#$R@@62| T@U) (|f#0@@12| T@U) ($h@@14 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@49|) TyType) (= (type |#$T1@@33|) TyType)) (= (type |#$T2@@14|) TyType)) (= (type |#$T3@@14|) TyType)) (= (type |#$R@@62|) TyType)) (= (type |f#0@@12|) HandleTypeType)) (= (type $h@@14) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc4 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@62|) $h@@14) ($IsAlloc |f#0@@12| (Tclass._System.___hFunc4 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@62|) $h@@14))) :qid |unknown.0:0| :skolemid |899| :pattern ( ($IsAlloc |f#0@@12| (Tclass._System.___hPartialFunc4 |#$T0@@49| |#$T1@@33| |#$T2@@14| |#$T3@@14| |#$R@@62|) $h@@14)) )))
(assert (forall ((arg0@@191 T@U) (arg1@@94 T@U) (arg2@@46 T@U) (arg3@@25 T@U) (arg4@@17 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4 arg0@@191 arg1@@94 arg2@@46 arg3@@25 arg4@@17)) TyType) :qid |funType:Tclass._System.___hTotalFunc4| :pattern ( (Tclass._System.___hTotalFunc4 arg0@@191 arg1@@94 arg2@@46 arg3@@25 arg4@@17)) )))
(assert (forall ((|#$T0@@50| T@U) (|#$T1@@34| T@U) (|#$T2@@15| T@U) (|#$T3@@15| T@U) (|#$R@@63| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@50|) TyType) (= (type |#$T1@@34|) TyType)) (= (type |#$T2@@15|) TyType)) (= (type |#$T3@@15|) TyType)) (= (type |#$R@@63|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc4 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$T3@@15| |#$R@@63|)) Tagclass._System.___hTotalFunc4) (= (TagFamily (Tclass._System.___hTotalFunc4 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$T3@@15| |#$R@@63|)) |tytagFamily$_#TotalFunc4|))) :qid |unknown.0:0| :skolemid |900| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@50| |#$T1@@34| |#$T2@@15| |#$T3@@15| |#$R@@63|)) )))
(assert (forall ((arg0@@192 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_0 arg0@@192)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_0| :pattern ( (Tclass._System.___hTotalFunc4_0 arg0@@192)) )))
(assert (forall ((|#$T0@@51| T@U) (|#$T1@@35| T@U) (|#$T2@@16| T@U) (|#$T3@@16| T@U) (|#$R@@64| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@51|) TyType) (= (type |#$T1@@35|) TyType)) (= (type |#$T2@@16|) TyType)) (= (type |#$T3@@16|) TyType)) (= (type |#$R@@64|) TyType)) (= (Tclass._System.___hTotalFunc4_0 (Tclass._System.___hTotalFunc4 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$T3@@16| |#$R@@64|)) |#$T0@@51|)) :qid |unknown.0:0| :skolemid |901| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@51| |#$T1@@35| |#$T2@@16| |#$T3@@16| |#$R@@64|)) )))
(assert (forall ((arg0@@193 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_1 arg0@@193)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_1| :pattern ( (Tclass._System.___hTotalFunc4_1 arg0@@193)) )))
(assert (forall ((|#$T0@@52| T@U) (|#$T1@@36| T@U) (|#$T2@@17| T@U) (|#$T3@@17| T@U) (|#$R@@65| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@52|) TyType) (= (type |#$T1@@36|) TyType)) (= (type |#$T2@@17|) TyType)) (= (type |#$T3@@17|) TyType)) (= (type |#$R@@65|) TyType)) (= (Tclass._System.___hTotalFunc4_1 (Tclass._System.___hTotalFunc4 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$T3@@17| |#$R@@65|)) |#$T1@@36|)) :qid |unknown.0:0| :skolemid |902| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@52| |#$T1@@36| |#$T2@@17| |#$T3@@17| |#$R@@65|)) )))
(assert (forall ((arg0@@194 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_2 arg0@@194)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_2| :pattern ( (Tclass._System.___hTotalFunc4_2 arg0@@194)) )))
(assert (forall ((|#$T0@@53| T@U) (|#$T1@@37| T@U) (|#$T2@@18| T@U) (|#$T3@@18| T@U) (|#$R@@66| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@53|) TyType) (= (type |#$T1@@37|) TyType)) (= (type |#$T2@@18|) TyType)) (= (type |#$T3@@18|) TyType)) (= (type |#$R@@66|) TyType)) (= (Tclass._System.___hTotalFunc4_2 (Tclass._System.___hTotalFunc4 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$T3@@18| |#$R@@66|)) |#$T2@@18|)) :qid |unknown.0:0| :skolemid |903| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@53| |#$T1@@37| |#$T2@@18| |#$T3@@18| |#$R@@66|)) )))
(assert (forall ((arg0@@195 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_3 arg0@@195)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_3| :pattern ( (Tclass._System.___hTotalFunc4_3 arg0@@195)) )))
(assert (forall ((|#$T0@@54| T@U) (|#$T1@@38| T@U) (|#$T2@@19| T@U) (|#$T3@@19| T@U) (|#$R@@67| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@54|) TyType) (= (type |#$T1@@38|) TyType)) (= (type |#$T2@@19|) TyType)) (= (type |#$T3@@19|) TyType)) (= (type |#$R@@67|) TyType)) (= (Tclass._System.___hTotalFunc4_3 (Tclass._System.___hTotalFunc4 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$T3@@19| |#$R@@67|)) |#$T3@@19|)) :qid |unknown.0:0| :skolemid |904| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@54| |#$T1@@38| |#$T2@@19| |#$T3@@19| |#$R@@67|)) )))
(assert (forall ((arg0@@196 T@U) ) (! (= (type (Tclass._System.___hTotalFunc4_4 arg0@@196)) TyType) :qid |funType:Tclass._System.___hTotalFunc4_4| :pattern ( (Tclass._System.___hTotalFunc4_4 arg0@@196)) )))
(assert (forall ((|#$T0@@55| T@U) (|#$T1@@39| T@U) (|#$T2@@20| T@U) (|#$T3@@20| T@U) (|#$R@@68| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@55|) TyType) (= (type |#$T1@@39|) TyType)) (= (type |#$T2@@20|) TyType)) (= (type |#$T3@@20|) TyType)) (= (type |#$R@@68|) TyType)) (= (Tclass._System.___hTotalFunc4_4 (Tclass._System.___hTotalFunc4 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$T3@@20| |#$R@@68|)) |#$R@@68|)) :qid |unknown.0:0| :skolemid |905| :pattern ( (Tclass._System.___hTotalFunc4 |#$T0@@55| |#$T1@@39| |#$T2@@20| |#$T3@@20| |#$R@@68|)) )))
(assert (forall ((|#$T0@@56| T@U) (|#$T1@@40| T@U) (|#$T2@@21| T@U) (|#$T3@@21| T@U) (|#$R@@69| T@U) (bx@@58 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@56|) TyType) (= (type |#$T1@@40|) TyType)) (= (type |#$T2@@21|) TyType)) (= (type |#$T3@@21|) TyType)) (= (type |#$R@@69|) TyType)) (= (type bx@@58) BoxType)) ($IsBox bx@@58 (Tclass._System.___hTotalFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3@@21| |#$R@@69|))) (and (= ($Box ($Unbox HandleTypeType bx@@58)) bx@@58) ($Is ($Unbox HandleTypeType bx@@58) (Tclass._System.___hTotalFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3@@21| |#$R@@69|)))) :qid |unknown.0:0| :skolemid |906| :pattern ( ($IsBox bx@@58 (Tclass._System.___hTotalFunc4 |#$T0@@56| |#$T1@@40| |#$T2@@21| |#$T3@@21| |#$R@@69|))) )))
(assert (forall ((|#$T0@@57| T@U) (|#$T1@@41| T@U) (|#$T2@@22| T@U) (|#$T3@@22| T@U) (|#$R@@70| T@U) (|f#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@57|) TyType) (= (type |#$T1@@41|) TyType)) (= (type |#$T2@@22|) TyType)) (= (type |#$T3@@22|) TyType)) (= (type |#$R@@70|) TyType)) (= (type |f#0@@13|) HandleTypeType)) (= ($Is |f#0@@13| (Tclass._System.___hTotalFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70|))  (and ($Is |f#0@@13| (Tclass._System.___hPartialFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70|)) (forall ((|x0#0@@4| T@U) (|x1#0@@2| T@U) (|x2#0@@0| T@U) (|x3#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |x0#0@@4|) BoxType) (= (type |x1#0@@2|) BoxType)) (= (type |x2#0@@0|) BoxType)) (= (type |x3#0@@0|) BoxType)) (and (and (and ($IsBox |x0#0@@4| |#$T0@@57|) ($IsBox |x1#0@@2| |#$T1@@41|)) ($IsBox |x2#0@@0| |#$T2@@22|)) ($IsBox |x3#0@@0| |#$T3@@22|))) (Requires4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70| $OneHeap |f#0@@13| |x0#0@@4| |x1#0@@2| |x2#0@@0| |x3#0@@0|)) :qid |unknown.0:0| :skolemid |907| :no-pattern (type |x0#0@@4|) :no-pattern (type |x1#0@@2|) :no-pattern (type |x2#0@@0|) :no-pattern (type |x3#0@@0|) :no-pattern (U_2_int |x0#0@@4|) :no-pattern (U_2_bool |x0#0@@4|) :no-pattern (U_2_int |x1#0@@2|) :no-pattern (U_2_bool |x1#0@@2|) :no-pattern (U_2_int |x2#0@@0|) :no-pattern (U_2_bool |x2#0@@0|) :no-pattern (U_2_int |x3#0@@0|) :no-pattern (U_2_bool |x3#0@@0|) ))))) :qid |unknown.0:0| :skolemid |908| :pattern ( ($Is |f#0@@13| (Tclass._System.___hTotalFunc4 |#$T0@@57| |#$T1@@41| |#$T2@@22| |#$T3@@22| |#$R@@70|))) )))
(assert (forall ((|#$T0@@58| T@U) (|#$T1@@42| T@U) (|#$T2@@23| T@U) (|#$T3@@23| T@U) (|#$R@@71| T@U) (|f#0@@14| T@U) ($h@@15 T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@58|) TyType) (= (type |#$T1@@42|) TyType)) (= (type |#$T2@@23|) TyType)) (= (type |#$T3@@23|) TyType)) (= (type |#$R@@71|) TyType)) (= (type |f#0@@14|) HandleTypeType)) (= (type $h@@15) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@71|) $h@@15) ($IsAlloc |f#0@@14| (Tclass._System.___hPartialFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@71|) $h@@15))) :qid |unknown.0:0| :skolemid |909| :pattern ( ($IsAlloc |f#0@@14| (Tclass._System.___hTotalFunc4 |#$T0@@58| |#$T1@@42| |#$T2@@23| |#$T3@@23| |#$R@@71|) $h@@15)) )))
(assert (forall ((arg0@@197 T@U) (arg1@@95 T@U) (arg2@@47 T@U) (arg3@@26 T@U) (arg4@@18 T@U) (arg5@@12 T@U) (arg6@@4 T@U) (arg7@@1 T@U) (arg8@@1 T@U) (arg9@@1 T@U) (arg10@@1 T@U) ) (! (= (type (Tclass._System.___hFunc10 arg0@@197 arg1@@95 arg2@@47 arg3@@26 arg4@@18 arg5@@12 arg6@@4 arg7@@1 arg8@@1 arg9@@1 arg10@@1)) TyType) :qid |funType:Tclass._System.___hFunc10| :pattern ( (Tclass._System.___hFunc10 arg0@@197 arg1@@95 arg2@@47 arg3@@26 arg4@@18 arg5@@12 arg6@@4 arg7@@1 arg8@@1 arg9@@1 arg10@@1)) )))
(assert (forall ((|#$T0@@59| T@U) (|#$T1@@43| T@U) (|#$T2@@24| T@U) (|#$T3@@24| T@U) (|#$T4| T@U) (|#$T5| T@U) (|#$T6| T@U) (|#$T7| T@U) (|#$T8| T@U) (|#$T9| T@U) (|#$R@@72| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@59|) TyType) (= (type |#$T1@@43|) TyType)) (= (type |#$T2@@24|) TyType)) (= (type |#$T3@@24|) TyType)) (= (type |#$T4|) TyType)) (= (type |#$T5|) TyType)) (= (type |#$T6|) TyType)) (= (type |#$T7|) TyType)) (= (type |#$T8|) TyType)) (= (type |#$T9|) TyType)) (= (type |#$R@@72|) TyType)) (and (= (Tag (Tclass._System.___hFunc10 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$T3@@24| |#$T4| |#$T5| |#$T6| |#$T7| |#$T8| |#$T9| |#$R@@72|)) Tagclass._System.___hFunc10) (= (TagFamily (Tclass._System.___hFunc10 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$T3@@24| |#$T4| |#$T5| |#$T6| |#$T7| |#$T8| |#$T9| |#$R@@72|)) |tytagFamily$_#Func10|))) :qid |unknown.0:0| :skolemid |910| :pattern ( (Tclass._System.___hFunc10 |#$T0@@59| |#$T1@@43| |#$T2@@24| |#$T3@@24| |#$T4| |#$T5| |#$T6| |#$T7| |#$T8| |#$T9| |#$R@@72|)) )))
(assert (forall ((arg0@@198 T@U) ) (! (= (type (Tclass._System.___hFunc10_0 arg0@@198)) TyType) :qid |funType:Tclass._System.___hFunc10_0| :pattern ( (Tclass._System.___hFunc10_0 arg0@@198)) )))
(assert (forall ((|#$T0@@60| T@U) (|#$T1@@44| T@U) (|#$T2@@25| T@U) (|#$T3@@25| T@U) (|#$T4@@0| T@U) (|#$T5@@0| T@U) (|#$T6@@0| T@U) (|#$T7@@0| T@U) (|#$T8@@0| T@U) (|#$T9@@0| T@U) (|#$R@@73| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@60|) TyType) (= (type |#$T1@@44|) TyType)) (= (type |#$T2@@25|) TyType)) (= (type |#$T3@@25|) TyType)) (= (type |#$T4@@0|) TyType)) (= (type |#$T5@@0|) TyType)) (= (type |#$T6@@0|) TyType)) (= (type |#$T7@@0|) TyType)) (= (type |#$T8@@0|) TyType)) (= (type |#$T9@@0|) TyType)) (= (type |#$R@@73|) TyType)) (= (Tclass._System.___hFunc10_0 (Tclass._System.___hFunc10 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$T3@@25| |#$T4@@0| |#$T5@@0| |#$T6@@0| |#$T7@@0| |#$T8@@0| |#$T9@@0| |#$R@@73|)) |#$T0@@60|)) :qid |unknown.0:0| :skolemid |911| :pattern ( (Tclass._System.___hFunc10 |#$T0@@60| |#$T1@@44| |#$T2@@25| |#$T3@@25| |#$T4@@0| |#$T5@@0| |#$T6@@0| |#$T7@@0| |#$T8@@0| |#$T9@@0| |#$R@@73|)) )))
(assert (forall ((arg0@@199 T@U) ) (! (= (type (Tclass._System.___hFunc10_1 arg0@@199)) TyType) :qid |funType:Tclass._System.___hFunc10_1| :pattern ( (Tclass._System.___hFunc10_1 arg0@@199)) )))
(assert (forall ((|#$T0@@61| T@U) (|#$T1@@45| T@U) (|#$T2@@26| T@U) (|#$T3@@26| T@U) (|#$T4@@1| T@U) (|#$T5@@1| T@U) (|#$T6@@1| T@U) (|#$T7@@1| T@U) (|#$T8@@1| T@U) (|#$T9@@1| T@U) (|#$R@@74| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@61|) TyType) (= (type |#$T1@@45|) TyType)) (= (type |#$T2@@26|) TyType)) (= (type |#$T3@@26|) TyType)) (= (type |#$T4@@1|) TyType)) (= (type |#$T5@@1|) TyType)) (= (type |#$T6@@1|) TyType)) (= (type |#$T7@@1|) TyType)) (= (type |#$T8@@1|) TyType)) (= (type |#$T9@@1|) TyType)) (= (type |#$R@@74|) TyType)) (= (Tclass._System.___hFunc10_1 (Tclass._System.___hFunc10 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$T3@@26| |#$T4@@1| |#$T5@@1| |#$T6@@1| |#$T7@@1| |#$T8@@1| |#$T9@@1| |#$R@@74|)) |#$T1@@45|)) :qid |unknown.0:0| :skolemid |912| :pattern ( (Tclass._System.___hFunc10 |#$T0@@61| |#$T1@@45| |#$T2@@26| |#$T3@@26| |#$T4@@1| |#$T5@@1| |#$T6@@1| |#$T7@@1| |#$T8@@1| |#$T9@@1| |#$R@@74|)) )))
(assert (forall ((arg0@@200 T@U) ) (! (= (type (Tclass._System.___hFunc10_2 arg0@@200)) TyType) :qid |funType:Tclass._System.___hFunc10_2| :pattern ( (Tclass._System.___hFunc10_2 arg0@@200)) )))
(assert (forall ((|#$T0@@62| T@U) (|#$T1@@46| T@U) (|#$T2@@27| T@U) (|#$T3@@27| T@U) (|#$T4@@2| T@U) (|#$T5@@2| T@U) (|#$T6@@2| T@U) (|#$T7@@2| T@U) (|#$T8@@2| T@U) (|#$T9@@2| T@U) (|#$R@@75| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@62|) TyType) (= (type |#$T1@@46|) TyType)) (= (type |#$T2@@27|) TyType)) (= (type |#$T3@@27|) TyType)) (= (type |#$T4@@2|) TyType)) (= (type |#$T5@@2|) TyType)) (= (type |#$T6@@2|) TyType)) (= (type |#$T7@@2|) TyType)) (= (type |#$T8@@2|) TyType)) (= (type |#$T9@@2|) TyType)) (= (type |#$R@@75|) TyType)) (= (Tclass._System.___hFunc10_2 (Tclass._System.___hFunc10 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$T3@@27| |#$T4@@2| |#$T5@@2| |#$T6@@2| |#$T7@@2| |#$T8@@2| |#$T9@@2| |#$R@@75|)) |#$T2@@27|)) :qid |unknown.0:0| :skolemid |913| :pattern ( (Tclass._System.___hFunc10 |#$T0@@62| |#$T1@@46| |#$T2@@27| |#$T3@@27| |#$T4@@2| |#$T5@@2| |#$T6@@2| |#$T7@@2| |#$T8@@2| |#$T9@@2| |#$R@@75|)) )))
(assert (forall ((arg0@@201 T@U) ) (! (= (type (Tclass._System.___hFunc10_3 arg0@@201)) TyType) :qid |funType:Tclass._System.___hFunc10_3| :pattern ( (Tclass._System.___hFunc10_3 arg0@@201)) )))
(assert (forall ((|#$T0@@63| T@U) (|#$T1@@47| T@U) (|#$T2@@28| T@U) (|#$T3@@28| T@U) (|#$T4@@3| T@U) (|#$T5@@3| T@U) (|#$T6@@3| T@U) (|#$T7@@3| T@U) (|#$T8@@3| T@U) (|#$T9@@3| T@U) (|#$R@@76| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@63|) TyType) (= (type |#$T1@@47|) TyType)) (= (type |#$T2@@28|) TyType)) (= (type |#$T3@@28|) TyType)) (= (type |#$T4@@3|) TyType)) (= (type |#$T5@@3|) TyType)) (= (type |#$T6@@3|) TyType)) (= (type |#$T7@@3|) TyType)) (= (type |#$T8@@3|) TyType)) (= (type |#$T9@@3|) TyType)) (= (type |#$R@@76|) TyType)) (= (Tclass._System.___hFunc10_3 (Tclass._System.___hFunc10 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$T3@@28| |#$T4@@3| |#$T5@@3| |#$T6@@3| |#$T7@@3| |#$T8@@3| |#$T9@@3| |#$R@@76|)) |#$T3@@28|)) :qid |unknown.0:0| :skolemid |914| :pattern ( (Tclass._System.___hFunc10 |#$T0@@63| |#$T1@@47| |#$T2@@28| |#$T3@@28| |#$T4@@3| |#$T5@@3| |#$T6@@3| |#$T7@@3| |#$T8@@3| |#$T9@@3| |#$R@@76|)) )))
(assert (forall ((arg0@@202 T@U) ) (! (= (type (Tclass._System.___hFunc10_4 arg0@@202)) TyType) :qid |funType:Tclass._System.___hFunc10_4| :pattern ( (Tclass._System.___hFunc10_4 arg0@@202)) )))
(assert (forall ((|#$T0@@64| T@U) (|#$T1@@48| T@U) (|#$T2@@29| T@U) (|#$T3@@29| T@U) (|#$T4@@4| T@U) (|#$T5@@4| T@U) (|#$T6@@4| T@U) (|#$T7@@4| T@U) (|#$T8@@4| T@U) (|#$T9@@4| T@U) (|#$R@@77| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@64|) TyType) (= (type |#$T1@@48|) TyType)) (= (type |#$T2@@29|) TyType)) (= (type |#$T3@@29|) TyType)) (= (type |#$T4@@4|) TyType)) (= (type |#$T5@@4|) TyType)) (= (type |#$T6@@4|) TyType)) (= (type |#$T7@@4|) TyType)) (= (type |#$T8@@4|) TyType)) (= (type |#$T9@@4|) TyType)) (= (type |#$R@@77|) TyType)) (= (Tclass._System.___hFunc10_4 (Tclass._System.___hFunc10 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$T3@@29| |#$T4@@4| |#$T5@@4| |#$T6@@4| |#$T7@@4| |#$T8@@4| |#$T9@@4| |#$R@@77|)) |#$T4@@4|)) :qid |unknown.0:0| :skolemid |915| :pattern ( (Tclass._System.___hFunc10 |#$T0@@64| |#$T1@@48| |#$T2@@29| |#$T3@@29| |#$T4@@4| |#$T5@@4| |#$T6@@4| |#$T7@@4| |#$T8@@4| |#$T9@@4| |#$R@@77|)) )))
(assert (forall ((arg0@@203 T@U) ) (! (= (type (Tclass._System.___hFunc10_5 arg0@@203)) TyType) :qid |funType:Tclass._System.___hFunc10_5| :pattern ( (Tclass._System.___hFunc10_5 arg0@@203)) )))
(assert (forall ((|#$T0@@65| T@U) (|#$T1@@49| T@U) (|#$T2@@30| T@U) (|#$T3@@30| T@U) (|#$T4@@5| T@U) (|#$T5@@5| T@U) (|#$T6@@5| T@U) (|#$T7@@5| T@U) (|#$T8@@5| T@U) (|#$T9@@5| T@U) (|#$R@@78| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@65|) TyType) (= (type |#$T1@@49|) TyType)) (= (type |#$T2@@30|) TyType)) (= (type |#$T3@@30|) TyType)) (= (type |#$T4@@5|) TyType)) (= (type |#$T5@@5|) TyType)) (= (type |#$T6@@5|) TyType)) (= (type |#$T7@@5|) TyType)) (= (type |#$T8@@5|) TyType)) (= (type |#$T9@@5|) TyType)) (= (type |#$R@@78|) TyType)) (= (Tclass._System.___hFunc10_5 (Tclass._System.___hFunc10 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$T3@@30| |#$T4@@5| |#$T5@@5| |#$T6@@5| |#$T7@@5| |#$T8@@5| |#$T9@@5| |#$R@@78|)) |#$T5@@5|)) :qid |unknown.0:0| :skolemid |916| :pattern ( (Tclass._System.___hFunc10 |#$T0@@65| |#$T1@@49| |#$T2@@30| |#$T3@@30| |#$T4@@5| |#$T5@@5| |#$T6@@5| |#$T7@@5| |#$T8@@5| |#$T9@@5| |#$R@@78|)) )))
(assert (forall ((arg0@@204 T@U) ) (! (= (type (Tclass._System.___hFunc10_6 arg0@@204)) TyType) :qid |funType:Tclass._System.___hFunc10_6| :pattern ( (Tclass._System.___hFunc10_6 arg0@@204)) )))
(assert (forall ((|#$T0@@66| T@U) (|#$T1@@50| T@U) (|#$T2@@31| T@U) (|#$T3@@31| T@U) (|#$T4@@6| T@U) (|#$T5@@6| T@U) (|#$T6@@6| T@U) (|#$T7@@6| T@U) (|#$T8@@6| T@U) (|#$T9@@6| T@U) (|#$R@@79| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@66|) TyType) (= (type |#$T1@@50|) TyType)) (= (type |#$T2@@31|) TyType)) (= (type |#$T3@@31|) TyType)) (= (type |#$T4@@6|) TyType)) (= (type |#$T5@@6|) TyType)) (= (type |#$T6@@6|) TyType)) (= (type |#$T7@@6|) TyType)) (= (type |#$T8@@6|) TyType)) (= (type |#$T9@@6|) TyType)) (= (type |#$R@@79|) TyType)) (= (Tclass._System.___hFunc10_6 (Tclass._System.___hFunc10 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$T3@@31| |#$T4@@6| |#$T5@@6| |#$T6@@6| |#$T7@@6| |#$T8@@6| |#$T9@@6| |#$R@@79|)) |#$T6@@6|)) :qid |unknown.0:0| :skolemid |917| :pattern ( (Tclass._System.___hFunc10 |#$T0@@66| |#$T1@@50| |#$T2@@31| |#$T3@@31| |#$T4@@6| |#$T5@@6| |#$T6@@6| |#$T7@@6| |#$T8@@6| |#$T9@@6| |#$R@@79|)) )))
(assert (forall ((arg0@@205 T@U) ) (! (= (type (Tclass._System.___hFunc10_7 arg0@@205)) TyType) :qid |funType:Tclass._System.___hFunc10_7| :pattern ( (Tclass._System.___hFunc10_7 arg0@@205)) )))
(assert (forall ((|#$T0@@67| T@U) (|#$T1@@51| T@U) (|#$T2@@32| T@U) (|#$T3@@32| T@U) (|#$T4@@7| T@U) (|#$T5@@7| T@U) (|#$T6@@7| T@U) (|#$T7@@7| T@U) (|#$T8@@7| T@U) (|#$T9@@7| T@U) (|#$R@@80| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@67|) TyType) (= (type |#$T1@@51|) TyType)) (= (type |#$T2@@32|) TyType)) (= (type |#$T3@@32|) TyType)) (= (type |#$T4@@7|) TyType)) (= (type |#$T5@@7|) TyType)) (= (type |#$T6@@7|) TyType)) (= (type |#$T7@@7|) TyType)) (= (type |#$T8@@7|) TyType)) (= (type |#$T9@@7|) TyType)) (= (type |#$R@@80|) TyType)) (= (Tclass._System.___hFunc10_7 (Tclass._System.___hFunc10 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$T3@@32| |#$T4@@7| |#$T5@@7| |#$T6@@7| |#$T7@@7| |#$T8@@7| |#$T9@@7| |#$R@@80|)) |#$T7@@7|)) :qid |unknown.0:0| :skolemid |918| :pattern ( (Tclass._System.___hFunc10 |#$T0@@67| |#$T1@@51| |#$T2@@32| |#$T3@@32| |#$T4@@7| |#$T5@@7| |#$T6@@7| |#$T7@@7| |#$T8@@7| |#$T9@@7| |#$R@@80|)) )))
(assert (forall ((arg0@@206 T@U) ) (! (= (type (Tclass._System.___hFunc10_8 arg0@@206)) TyType) :qid |funType:Tclass._System.___hFunc10_8| :pattern ( (Tclass._System.___hFunc10_8 arg0@@206)) )))
(assert (forall ((|#$T0@@68| T@U) (|#$T1@@52| T@U) (|#$T2@@33| T@U) (|#$T3@@33| T@U) (|#$T4@@8| T@U) (|#$T5@@8| T@U) (|#$T6@@8| T@U) (|#$T7@@8| T@U) (|#$T8@@8| T@U) (|#$T9@@8| T@U) (|#$R@@81| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@68|) TyType) (= (type |#$T1@@52|) TyType)) (= (type |#$T2@@33|) TyType)) (= (type |#$T3@@33|) TyType)) (= (type |#$T4@@8|) TyType)) (= (type |#$T5@@8|) TyType)) (= (type |#$T6@@8|) TyType)) (= (type |#$T7@@8|) TyType)) (= (type |#$T8@@8|) TyType)) (= (type |#$T9@@8|) TyType)) (= (type |#$R@@81|) TyType)) (= (Tclass._System.___hFunc10_8 (Tclass._System.___hFunc10 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$T3@@33| |#$T4@@8| |#$T5@@8| |#$T6@@8| |#$T7@@8| |#$T8@@8| |#$T9@@8| |#$R@@81|)) |#$T8@@8|)) :qid |unknown.0:0| :skolemid |919| :pattern ( (Tclass._System.___hFunc10 |#$T0@@68| |#$T1@@52| |#$T2@@33| |#$T3@@33| |#$T4@@8| |#$T5@@8| |#$T6@@8| |#$T7@@8| |#$T8@@8| |#$T9@@8| |#$R@@81|)) )))
(assert (forall ((arg0@@207 T@U) ) (! (= (type (Tclass._System.___hFunc10_9 arg0@@207)) TyType) :qid |funType:Tclass._System.___hFunc10_9| :pattern ( (Tclass._System.___hFunc10_9 arg0@@207)) )))
(assert (forall ((|#$T0@@69| T@U) (|#$T1@@53| T@U) (|#$T2@@34| T@U) (|#$T3@@34| T@U) (|#$T4@@9| T@U) (|#$T5@@9| T@U) (|#$T6@@9| T@U) (|#$T7@@9| T@U) (|#$T8@@9| T@U) (|#$T9@@9| T@U) (|#$R@@82| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@69|) TyType) (= (type |#$T1@@53|) TyType)) (= (type |#$T2@@34|) TyType)) (= (type |#$T3@@34|) TyType)) (= (type |#$T4@@9|) TyType)) (= (type |#$T5@@9|) TyType)) (= (type |#$T6@@9|) TyType)) (= (type |#$T7@@9|) TyType)) (= (type |#$T8@@9|) TyType)) (= (type |#$T9@@9|) TyType)) (= (type |#$R@@82|) TyType)) (= (Tclass._System.___hFunc10_9 (Tclass._System.___hFunc10 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$T3@@34| |#$T4@@9| |#$T5@@9| |#$T6@@9| |#$T7@@9| |#$T8@@9| |#$T9@@9| |#$R@@82|)) |#$T9@@9|)) :qid |unknown.0:0| :skolemid |920| :pattern ( (Tclass._System.___hFunc10 |#$T0@@69| |#$T1@@53| |#$T2@@34| |#$T3@@34| |#$T4@@9| |#$T5@@9| |#$T6@@9| |#$T7@@9| |#$T8@@9| |#$T9@@9| |#$R@@82|)) )))
(assert (forall ((arg0@@208 T@U) ) (! (= (type (Tclass._System.___hFunc10_10 arg0@@208)) TyType) :qid |funType:Tclass._System.___hFunc10_10| :pattern ( (Tclass._System.___hFunc10_10 arg0@@208)) )))
(assert (forall ((|#$T0@@70| T@U) (|#$T1@@54| T@U) (|#$T2@@35| T@U) (|#$T3@@35| T@U) (|#$T4@@10| T@U) (|#$T5@@10| T@U) (|#$T6@@10| T@U) (|#$T7@@10| T@U) (|#$T8@@10| T@U) (|#$T9@@10| T@U) (|#$R@@83| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@70|) TyType) (= (type |#$T1@@54|) TyType)) (= (type |#$T2@@35|) TyType)) (= (type |#$T3@@35|) TyType)) (= (type |#$T4@@10|) TyType)) (= (type |#$T5@@10|) TyType)) (= (type |#$T6@@10|) TyType)) (= (type |#$T7@@10|) TyType)) (= (type |#$T8@@10|) TyType)) (= (type |#$T9@@10|) TyType)) (= (type |#$R@@83|) TyType)) (= (Tclass._System.___hFunc10_10 (Tclass._System.___hFunc10 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@35| |#$T4@@10| |#$T5@@10| |#$T6@@10| |#$T7@@10| |#$T8@@10| |#$T9@@10| |#$R@@83|)) |#$R@@83|)) :qid |unknown.0:0| :skolemid |921| :pattern ( (Tclass._System.___hFunc10 |#$T0@@70| |#$T1@@54| |#$T2@@35| |#$T3@@35| |#$T4@@10| |#$T5@@10| |#$T6@@10| |#$T7@@10| |#$T8@@10| |#$T9@@10| |#$R@@83|)) )))
(assert (forall ((|#$T0@@71| T@U) (|#$T1@@55| T@U) (|#$T2@@36| T@U) (|#$T3@@36| T@U) (|#$T4@@11| T@U) (|#$T5@@11| T@U) (|#$T6@@11| T@U) (|#$T7@@11| T@U) (|#$T8@@11| T@U) (|#$T9@@11| T@U) (|#$R@@84| T@U) (bx@@59 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@71|) TyType) (= (type |#$T1@@55|) TyType)) (= (type |#$T2@@36|) TyType)) (= (type |#$T3@@36|) TyType)) (= (type |#$T4@@11|) TyType)) (= (type |#$T5@@11|) TyType)) (= (type |#$T6@@11|) TyType)) (= (type |#$T7@@11|) TyType)) (= (type |#$T8@@11|) TyType)) (= (type |#$T9@@11|) TyType)) (= (type |#$R@@84|) TyType)) (= (type bx@@59) BoxType)) ($IsBox bx@@59 (Tclass._System.___hFunc10 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$T3@@36| |#$T4@@11| |#$T5@@11| |#$T6@@11| |#$T7@@11| |#$T8@@11| |#$T9@@11| |#$R@@84|))) (and (= ($Box ($Unbox HandleTypeType bx@@59)) bx@@59) ($Is ($Unbox HandleTypeType bx@@59) (Tclass._System.___hFunc10 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$T3@@36| |#$T4@@11| |#$T5@@11| |#$T6@@11| |#$T7@@11| |#$T8@@11| |#$T9@@11| |#$R@@84|)))) :qid |unknown.0:0| :skolemid |922| :pattern ( ($IsBox bx@@59 (Tclass._System.___hFunc10 |#$T0@@71| |#$T1@@55| |#$T2@@36| |#$T3@@36| |#$T4@@11| |#$T5@@11| |#$T6@@11| |#$T7@@11| |#$T8@@11| |#$T9@@11| |#$R@@84|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@209 T@T) (arg1@@96 T@T) (arg2@@48 T@T) (arg3@@27 T@T) (arg4@@19 T@T) (arg5@@13 T@T) (arg6@@5 T@T) (arg7@@2 T@T) (arg8@@2 T@T) (arg9@@2 T@T) (arg10@@2 T@T) (arg11 T@T) ) (! (= (Ctor (MapType5Type arg0@@209 arg1@@96 arg2@@48 arg3@@27 arg4@@19 arg5@@13 arg6@@5 arg7@@2 arg8@@2 arg9@@2 arg10@@2 arg11)) 27) :qid |ctor:MapType5Type| )) (forall ((arg0@@210 T@T) (arg1@@97 T@T) (arg2@@49 T@T) (arg3@@28 T@T) (arg4@@20 T@T) (arg5@@14 T@T) (arg6@@6 T@T) (arg7@@3 T@T) (arg8@@3 T@T) (arg9@@3 T@T) (arg10@@3 T@T) (arg11@@0 T@T) ) (! (= (MapType5TypeInv0 (MapType5Type arg0@@210 arg1@@97 arg2@@49 arg3@@28 arg4@@20 arg5@@14 arg6@@6 arg7@@3 arg8@@3 arg9@@3 arg10@@3 arg11@@0)) arg0@@210) :qid |typeInv:MapType5TypeInv0| :pattern ( (MapType5Type arg0@@210 arg1@@97 arg2@@49 arg3@@28 arg4@@20 arg5@@14 arg6@@6 arg7@@3 arg8@@3 arg9@@3 arg10@@3 arg11@@0)) ))) (forall ((arg0@@211 T@T) (arg1@@98 T@T) (arg2@@50 T@T) (arg3@@29 T@T) (arg4@@21 T@T) (arg5@@15 T@T) (arg6@@7 T@T) (arg7@@4 T@T) (arg8@@4 T@T) (arg9@@4 T@T) (arg10@@4 T@T) (arg11@@1 T@T) ) (! (= (MapType5TypeInv1 (MapType5Type arg0@@211 arg1@@98 arg2@@50 arg3@@29 arg4@@21 arg5@@15 arg6@@7 arg7@@4 arg8@@4 arg9@@4 arg10@@4 arg11@@1)) arg1@@98) :qid |typeInv:MapType5TypeInv1| :pattern ( (MapType5Type arg0@@211 arg1@@98 arg2@@50 arg3@@29 arg4@@21 arg5@@15 arg6@@7 arg7@@4 arg8@@4 arg9@@4 arg10@@4 arg11@@1)) ))) (forall ((arg0@@212 T@T) (arg1@@99 T@T) (arg2@@51 T@T) (arg3@@30 T@T) (arg4@@22 T@T) (arg5@@16 T@T) (arg6@@8 T@T) (arg7@@5 T@T) (arg8@@5 T@T) (arg9@@5 T@T) (arg10@@5 T@T) (arg11@@2 T@T) ) (! (= (MapType5TypeInv2 (MapType5Type arg0@@212 arg1@@99 arg2@@51 arg3@@30 arg4@@22 arg5@@16 arg6@@8 arg7@@5 arg8@@5 arg9@@5 arg10@@5 arg11@@2)) arg2@@51) :qid |typeInv:MapType5TypeInv2| :pattern ( (MapType5Type arg0@@212 arg1@@99 arg2@@51 arg3@@30 arg4@@22 arg5@@16 arg6@@8 arg7@@5 arg8@@5 arg9@@5 arg10@@5 arg11@@2)) ))) (forall ((arg0@@213 T@T) (arg1@@100 T@T) (arg2@@52 T@T) (arg3@@31 T@T) (arg4@@23 T@T) (arg5@@17 T@T) (arg6@@9 T@T) (arg7@@6 T@T) (arg8@@6 T@T) (arg9@@6 T@T) (arg10@@6 T@T) (arg11@@3 T@T) ) (! (= (MapType5TypeInv3 (MapType5Type arg0@@213 arg1@@100 arg2@@52 arg3@@31 arg4@@23 arg5@@17 arg6@@9 arg7@@6 arg8@@6 arg9@@6 arg10@@6 arg11@@3)) arg3@@31) :qid |typeInv:MapType5TypeInv3| :pattern ( (MapType5Type arg0@@213 arg1@@100 arg2@@52 arg3@@31 arg4@@23 arg5@@17 arg6@@9 arg7@@6 arg8@@6 arg9@@6 arg10@@6 arg11@@3)) ))) (forall ((arg0@@214 T@T) (arg1@@101 T@T) (arg2@@53 T@T) (arg3@@32 T@T) (arg4@@24 T@T) (arg5@@18 T@T) (arg6@@10 T@T) (arg7@@7 T@T) (arg8@@7 T@T) (arg9@@7 T@T) (arg10@@7 T@T) (arg11@@4 T@T) ) (! (= (MapType5TypeInv4 (MapType5Type arg0@@214 arg1@@101 arg2@@53 arg3@@32 arg4@@24 arg5@@18 arg6@@10 arg7@@7 arg8@@7 arg9@@7 arg10@@7 arg11@@4)) arg4@@24) :qid |typeInv:MapType5TypeInv4| :pattern ( (MapType5Type arg0@@214 arg1@@101 arg2@@53 arg3@@32 arg4@@24 arg5@@18 arg6@@10 arg7@@7 arg8@@7 arg9@@7 arg10@@7 arg11@@4)) ))) (forall ((arg0@@215 T@T) (arg1@@102 T@T) (arg2@@54 T@T) (arg3@@33 T@T) (arg4@@25 T@T) (arg5@@19 T@T) (arg6@@11 T@T) (arg7@@8 T@T) (arg8@@8 T@T) (arg9@@8 T@T) (arg10@@8 T@T) (arg11@@5 T@T) ) (! (= (MapType5TypeInv5 (MapType5Type arg0@@215 arg1@@102 arg2@@54 arg3@@33 arg4@@25 arg5@@19 arg6@@11 arg7@@8 arg8@@8 arg9@@8 arg10@@8 arg11@@5)) arg5@@19) :qid |typeInv:MapType5TypeInv5| :pattern ( (MapType5Type arg0@@215 arg1@@102 arg2@@54 arg3@@33 arg4@@25 arg5@@19 arg6@@11 arg7@@8 arg8@@8 arg9@@8 arg10@@8 arg11@@5)) ))) (forall ((arg0@@216 T@T) (arg1@@103 T@T) (arg2@@55 T@T) (arg3@@34 T@T) (arg4@@26 T@T) (arg5@@20 T@T) (arg6@@12 T@T) (arg7@@9 T@T) (arg8@@9 T@T) (arg9@@9 T@T) (arg10@@9 T@T) (arg11@@6 T@T) ) (! (= (MapType5TypeInv6 (MapType5Type arg0@@216 arg1@@103 arg2@@55 arg3@@34 arg4@@26 arg5@@20 arg6@@12 arg7@@9 arg8@@9 arg9@@9 arg10@@9 arg11@@6)) arg6@@12) :qid |typeInv:MapType5TypeInv6| :pattern ( (MapType5Type arg0@@216 arg1@@103 arg2@@55 arg3@@34 arg4@@26 arg5@@20 arg6@@12 arg7@@9 arg8@@9 arg9@@9 arg10@@9 arg11@@6)) ))) (forall ((arg0@@217 T@T) (arg1@@104 T@T) (arg2@@56 T@T) (arg3@@35 T@T) (arg4@@27 T@T) (arg5@@21 T@T) (arg6@@13 T@T) (arg7@@10 T@T) (arg8@@10 T@T) (arg9@@10 T@T) (arg10@@10 T@T) (arg11@@7 T@T) ) (! (= (MapType5TypeInv7 (MapType5Type arg0@@217 arg1@@104 arg2@@56 arg3@@35 arg4@@27 arg5@@21 arg6@@13 arg7@@10 arg8@@10 arg9@@10 arg10@@10 arg11@@7)) arg7@@10) :qid |typeInv:MapType5TypeInv7| :pattern ( (MapType5Type arg0@@217 arg1@@104 arg2@@56 arg3@@35 arg4@@27 arg5@@21 arg6@@13 arg7@@10 arg8@@10 arg9@@10 arg10@@10 arg11@@7)) ))) (forall ((arg0@@218 T@T) (arg1@@105 T@T) (arg2@@57 T@T) (arg3@@36 T@T) (arg4@@28 T@T) (arg5@@22 T@T) (arg6@@14 T@T) (arg7@@11 T@T) (arg8@@11 T@T) (arg9@@11 T@T) (arg10@@11 T@T) (arg11@@8 T@T) ) (! (= (MapType5TypeInv8 (MapType5Type arg0@@218 arg1@@105 arg2@@57 arg3@@36 arg4@@28 arg5@@22 arg6@@14 arg7@@11 arg8@@11 arg9@@11 arg10@@11 arg11@@8)) arg8@@11) :qid |typeInv:MapType5TypeInv8| :pattern ( (MapType5Type arg0@@218 arg1@@105 arg2@@57 arg3@@36 arg4@@28 arg5@@22 arg6@@14 arg7@@11 arg8@@11 arg9@@11 arg10@@11 arg11@@8)) ))) (forall ((arg0@@219 T@T) (arg1@@106 T@T) (arg2@@58 T@T) (arg3@@37 T@T) (arg4@@29 T@T) (arg5@@23 T@T) (arg6@@15 T@T) (arg7@@12 T@T) (arg8@@12 T@T) (arg9@@12 T@T) (arg10@@12 T@T) (arg11@@9 T@T) ) (! (= (MapType5TypeInv9 (MapType5Type arg0@@219 arg1@@106 arg2@@58 arg3@@37 arg4@@29 arg5@@23 arg6@@15 arg7@@12 arg8@@12 arg9@@12 arg10@@12 arg11@@9)) arg9@@12) :qid |typeInv:MapType5TypeInv9| :pattern ( (MapType5Type arg0@@219 arg1@@106 arg2@@58 arg3@@37 arg4@@29 arg5@@23 arg6@@15 arg7@@12 arg8@@12 arg9@@12 arg10@@12 arg11@@9)) ))) (forall ((arg0@@220 T@T) (arg1@@107 T@T) (arg2@@59 T@T) (arg3@@38 T@T) (arg4@@30 T@T) (arg5@@24 T@T) (arg6@@16 T@T) (arg7@@13 T@T) (arg8@@13 T@T) (arg9@@13 T@T) (arg10@@13 T@T) (arg11@@10 T@T) ) (! (= (MapType5TypeInv10 (MapType5Type arg0@@220 arg1@@107 arg2@@59 arg3@@38 arg4@@30 arg5@@24 arg6@@16 arg7@@13 arg8@@13 arg9@@13 arg10@@13 arg11@@10)) arg10@@13) :qid |typeInv:MapType5TypeInv10| :pattern ( (MapType5Type arg0@@220 arg1@@107 arg2@@59 arg3@@38 arg4@@30 arg5@@24 arg6@@16 arg7@@13 arg8@@13 arg9@@13 arg10@@13 arg11@@10)) ))) (forall ((arg0@@221 T@T) (arg1@@108 T@T) (arg2@@60 T@T) (arg3@@39 T@T) (arg4@@31 T@T) (arg5@@25 T@T) (arg6@@17 T@T) (arg7@@14 T@T) (arg8@@14 T@T) (arg9@@14 T@T) (arg10@@14 T@T) (arg11@@11 T@T) ) (! (= (MapType5TypeInv11 (MapType5Type arg0@@221 arg1@@108 arg2@@60 arg3@@39 arg4@@31 arg5@@25 arg6@@17 arg7@@14 arg8@@14 arg9@@14 arg10@@14 arg11@@11)) arg11@@11) :qid |typeInv:MapType5TypeInv11| :pattern ( (MapType5Type arg0@@221 arg1@@108 arg2@@60 arg3@@39 arg4@@31 arg5@@25 arg6@@17 arg7@@14 arg8@@14 arg9@@14 arg10@@14 arg11@@11)) ))) (forall ((arg0@@222 T@U) (arg1@@109 T@U) (arg2@@61 T@U) (arg3@@40 T@U) (arg4@@32 T@U) (arg5@@26 T@U) (arg6@@18 T@U) (arg7@@15 T@U) (arg8@@15 T@U) (arg9@@15 T@U) (arg10@@15 T@U) (arg11@@12 T@U) ) (! (let ((aVar11 (MapType5TypeInv11 (type arg0@@222)))) (= (type (MapType5Select arg0@@222 arg1@@109 arg2@@61 arg3@@40 arg4@@32 arg5@@26 arg6@@18 arg7@@15 arg8@@15 arg9@@15 arg10@@15 arg11@@12)) aVar11)) :qid |funType:MapType5Select| :pattern ( (MapType5Select arg0@@222 arg1@@109 arg2@@61 arg3@@40 arg4@@32 arg5@@26 arg6@@18 arg7@@15 arg8@@15 arg9@@15 arg10@@15 arg11@@12)) ))) (forall ((arg0@@223 T@U) (arg1@@110 T@U) (arg2@@62 T@U) (arg3@@41 T@U) (arg4@@33 T@U) (arg5@@27 T@U) (arg6@@19 T@U) (arg7@@16 T@U) (arg8@@16 T@U) (arg9@@16 T@U) (arg10@@16 T@U) (arg11@@13 T@U) (arg12 T@U) ) (! (let ((aVar11@@0 (type arg12))) (let ((aVar10 (type arg11@@13))) (let ((aVar9 (type arg10@@16))) (let ((aVar8 (type arg9@@16))) (let ((aVar7 (type arg8@@16))) (let ((aVar6 (type arg7@@16))) (let ((aVar5@@2 (type arg6@@19))) (let ((aVar4@@0 (type arg5@@27))) (let ((aVar3@@3 (type arg4@@33))) (let ((aVar2@@4 (type arg3@@41))) (let ((aVar1@@5 (type arg2@@62))) (let ((aVar0@@3 (type arg1@@110))) (= (type (MapType5Store arg0@@223 arg1@@110 arg2@@62 arg3@@41 arg4@@33 arg5@@27 arg6@@19 arg7@@16 arg8@@16 arg9@@16 arg10@@16 arg11@@13 arg12)) (MapType5Type aVar0@@3 aVar1@@5 aVar2@@4 aVar3@@3 aVar4@@0 aVar5@@2 aVar6 aVar7 aVar8 aVar9 aVar10 aVar11@@0)))))))))))))) :qid |funType:MapType5Store| :pattern ( (MapType5Store arg0@@223 arg1@@110 arg2@@62 arg3@@41 arg4@@33 arg5@@27 arg6@@19 arg7@@16 arg8@@16 arg9@@16 arg10@@16 arg11@@13 arg12)) ))) (forall ((m@@61 T@U) (x0@@21 T@U) (x1@@15 T@U) (x2@@11 T@U) (x3@@6 T@U) (x4@@6 T@U) (x5 T@U) (x6 T@U) (x7 T@U) (x8 T@U) (x9 T@U) (x10 T@U) (val@@22 T@U) ) (! (let ((aVar11@@1 (MapType5TypeInv11 (type m@@61)))) (=> (= (type val@@22) aVar11@@1) (= (MapType5Select (MapType5Store m@@61 x0@@21 x1@@15 x2@@11 x3@@6 x4@@6 x5 x6 x7 x8 x9 x10 val@@22) x0@@21 x1@@15 x2@@11 x3@@6 x4@@6 x5 x6 x7 x8 x9 x10) val@@22))) :qid |mapAx0:MapType5Select| :weight 0 ))) (and (and (and (and (and (and (and (and (and (and (and (forall ((val@@23 T@U) (m@@62 T@U) (x0@@22 T@U) (x1@@16 T@U) (x2@@12 T@U) (x3@@7 T@U) (x4@@7 T@U) (x5@@0 T@U) (x6@@0 T@U) (x7@@0 T@U) (x8@@0 T@U) (x9@@0 T@U) (x10@@0 T@U) (y0@@16 T@U) (y1@@12 T@U) (y2@@9 T@U) (y3@@5 T@U) (y4@@5 T@U) (y5 T@U) (y6 T@U) (y7 T@U) (y8 T@U) (y9 T@U) (y10 T@U) ) (!  (or (= x0@@22 y0@@16) (= (MapType5Select (MapType5Store m@@62 x0@@22 x1@@16 x2@@12 x3@@7 x4@@7 x5@@0 x6@@0 x7@@0 x8@@0 x9@@0 x10@@0 val@@23) y0@@16 y1@@12 y2@@9 y3@@5 y4@@5 y5 y6 y7 y8 y9 y10) (MapType5Select m@@62 y0@@16 y1@@12 y2@@9 y3@@5 y4@@5 y5 y6 y7 y8 y9 y10))) :qid |mapAx1:MapType5Select:0| :weight 0 )) (forall ((val@@24 T@U) (m@@63 T@U) (x0@@23 T@U) (x1@@17 T@U) (x2@@13 T@U) (x3@@8 T@U) (x4@@8 T@U) (x5@@1 T@U) (x6@@1 T@U) (x7@@1 T@U) (x8@@1 T@U) (x9@@1 T@U) (x10@@1 T@U) (y0@@17 T@U) (y1@@13 T@U) (y2@@10 T@U) (y3@@6 T@U) (y4@@6 T@U) (y5@@0 T@U) (y6@@0 T@U) (y7@@0 T@U) (y8@@0 T@U) (y9@@0 T@U) (y10@@0 T@U) ) (!  (or (= x1@@17 y1@@13) (= (MapType5Select (MapType5Store m@@63 x0@@23 x1@@17 x2@@13 x3@@8 x4@@8 x5@@1 x6@@1 x7@@1 x8@@1 x9@@1 x10@@1 val@@24) y0@@17 y1@@13 y2@@10 y3@@6 y4@@6 y5@@0 y6@@0 y7@@0 y8@@0 y9@@0 y10@@0) (MapType5Select m@@63 y0@@17 y1@@13 y2@@10 y3@@6 y4@@6 y5@@0 y6@@0 y7@@0 y8@@0 y9@@0 y10@@0))) :qid |mapAx1:MapType5Select:1| :weight 0 ))) (forall ((val@@25 T@U) (m@@64 T@U) (x0@@24 T@U) (x1@@18 T@U) (x2@@14 T@U) (x3@@9 T@U) (x4@@9 T@U) (x5@@2 T@U) (x6@@2 T@U) (x7@@2 T@U) (x8@@2 T@U) (x9@@2 T@U) (x10@@2 T@U) (y0@@18 T@U) (y1@@14 T@U) (y2@@11 T@U) (y3@@7 T@U) (y4@@7 T@U) (y5@@1 T@U) (y6@@1 T@U) (y7@@1 T@U) (y8@@1 T@U) (y9@@1 T@U) (y10@@1 T@U) ) (!  (or (= x2@@14 y2@@11) (= (MapType5Select (MapType5Store m@@64 x0@@24 x1@@18 x2@@14 x3@@9 x4@@9 x5@@2 x6@@2 x7@@2 x8@@2 x9@@2 x10@@2 val@@25) y0@@18 y1@@14 y2@@11 y3@@7 y4@@7 y5@@1 y6@@1 y7@@1 y8@@1 y9@@1 y10@@1) (MapType5Select m@@64 y0@@18 y1@@14 y2@@11 y3@@7 y4@@7 y5@@1 y6@@1 y7@@1 y8@@1 y9@@1 y10@@1))) :qid |mapAx1:MapType5Select:2| :weight 0 ))) (forall ((val@@26 T@U) (m@@65 T@U) (x0@@25 T@U) (x1@@19 T@U) (x2@@15 T@U) (x3@@10 T@U) (x4@@10 T@U) (x5@@3 T@U) (x6@@3 T@U) (x7@@3 T@U) (x8@@3 T@U) (x9@@3 T@U) (x10@@3 T@U) (y0@@19 T@U) (y1@@15 T@U) (y2@@12 T@U) (y3@@8 T@U) (y4@@8 T@U) (y5@@2 T@U) (y6@@2 T@U) (y7@@2 T@U) (y8@@2 T@U) (y9@@2 T@U) (y10@@2 T@U) ) (!  (or (= x3@@10 y3@@8) (= (MapType5Select (MapType5Store m@@65 x0@@25 x1@@19 x2@@15 x3@@10 x4@@10 x5@@3 x6@@3 x7@@3 x8@@3 x9@@3 x10@@3 val@@26) y0@@19 y1@@15 y2@@12 y3@@8 y4@@8 y5@@2 y6@@2 y7@@2 y8@@2 y9@@2 y10@@2) (MapType5Select m@@65 y0@@19 y1@@15 y2@@12 y3@@8 y4@@8 y5@@2 y6@@2 y7@@2 y8@@2 y9@@2 y10@@2))) :qid |mapAx1:MapType5Select:3| :weight 0 ))) (forall ((val@@27 T@U) (m@@66 T@U) (x0@@26 T@U) (x1@@20 T@U) (x2@@16 T@U) (x3@@11 T@U) (x4@@11 T@U) (x5@@4 T@U) (x6@@4 T@U) (x7@@4 T@U) (x8@@4 T@U) (x9@@4 T@U) (x10@@4 T@U) (y0@@20 T@U) (y1@@16 T@U) (y2@@13 T@U) (y3@@9 T@U) (y4@@9 T@U) (y5@@3 T@U) (y6@@3 T@U) (y7@@3 T@U) (y8@@3 T@U) (y9@@3 T@U) (y10@@3 T@U) ) (!  (or (= x4@@11 y4@@9) (= (MapType5Select (MapType5Store m@@66 x0@@26 x1@@20 x2@@16 x3@@11 x4@@11 x5@@4 x6@@4 x7@@4 x8@@4 x9@@4 x10@@4 val@@27) y0@@20 y1@@16 y2@@13 y3@@9 y4@@9 y5@@3 y6@@3 y7@@3 y8@@3 y9@@3 y10@@3) (MapType5Select m@@66 y0@@20 y1@@16 y2@@13 y3@@9 y4@@9 y5@@3 y6@@3 y7@@3 y8@@3 y9@@3 y10@@3))) :qid |mapAx1:MapType5Select:4| :weight 0 ))) (forall ((val@@28 T@U) (m@@67 T@U) (x0@@27 T@U) (x1@@21 T@U) (x2@@17 T@U) (x3@@12 T@U) (x4@@12 T@U) (x5@@5 T@U) (x6@@5 T@U) (x7@@5 T@U) (x8@@5 T@U) (x9@@5 T@U) (x10@@5 T@U) (y0@@21 T@U) (y1@@17 T@U) (y2@@14 T@U) (y3@@10 T@U) (y4@@10 T@U) (y5@@4 T@U) (y6@@4 T@U) (y7@@4 T@U) (y8@@4 T@U) (y9@@4 T@U) (y10@@4 T@U) ) (!  (or (= x5@@5 y5@@4) (= (MapType5Select (MapType5Store m@@67 x0@@27 x1@@21 x2@@17 x3@@12 x4@@12 x5@@5 x6@@5 x7@@5 x8@@5 x9@@5 x10@@5 val@@28) y0@@21 y1@@17 y2@@14 y3@@10 y4@@10 y5@@4 y6@@4 y7@@4 y8@@4 y9@@4 y10@@4) (MapType5Select m@@67 y0@@21 y1@@17 y2@@14 y3@@10 y4@@10 y5@@4 y6@@4 y7@@4 y8@@4 y9@@4 y10@@4))) :qid |mapAx1:MapType5Select:5| :weight 0 ))) (forall ((val@@29 T@U) (m@@68 T@U) (x0@@28 T@U) (x1@@22 T@U) (x2@@18 T@U) (x3@@13 T@U) (x4@@13 T@U) (x5@@6 T@U) (x6@@6 T@U) (x7@@6 T@U) (x8@@6 T@U) (x9@@6 T@U) (x10@@6 T@U) (y0@@22 T@U) (y1@@18 T@U) (y2@@15 T@U) (y3@@11 T@U) (y4@@11 T@U) (y5@@5 T@U) (y6@@5 T@U) (y7@@5 T@U) (y8@@5 T@U) (y9@@5 T@U) (y10@@5 T@U) ) (!  (or (= x6@@6 y6@@5) (= (MapType5Select (MapType5Store m@@68 x0@@28 x1@@22 x2@@18 x3@@13 x4@@13 x5@@6 x6@@6 x7@@6 x8@@6 x9@@6 x10@@6 val@@29) y0@@22 y1@@18 y2@@15 y3@@11 y4@@11 y5@@5 y6@@5 y7@@5 y8@@5 y9@@5 y10@@5) (MapType5Select m@@68 y0@@22 y1@@18 y2@@15 y3@@11 y4@@11 y5@@5 y6@@5 y7@@5 y8@@5 y9@@5 y10@@5))) :qid |mapAx1:MapType5Select:6| :weight 0 ))) (forall ((val@@30 T@U) (m@@69 T@U) (x0@@29 T@U) (x1@@23 T@U) (x2@@19 T@U) (x3@@14 T@U) (x4@@14 T@U) (x5@@7 T@U) (x6@@7 T@U) (x7@@7 T@U) (x8@@7 T@U) (x9@@7 T@U) (x10@@7 T@U) (y0@@23 T@U) (y1@@19 T@U) (y2@@16 T@U) (y3@@12 T@U) (y4@@12 T@U) (y5@@6 T@U) (y6@@6 T@U) (y7@@6 T@U) (y8@@6 T@U) (y9@@6 T@U) (y10@@6 T@U) ) (!  (or (= x7@@7 y7@@6) (= (MapType5Select (MapType5Store m@@69 x0@@29 x1@@23 x2@@19 x3@@14 x4@@14 x5@@7 x6@@7 x7@@7 x8@@7 x9@@7 x10@@7 val@@30) y0@@23 y1@@19 y2@@16 y3@@12 y4@@12 y5@@6 y6@@6 y7@@6 y8@@6 y9@@6 y10@@6) (MapType5Select m@@69 y0@@23 y1@@19 y2@@16 y3@@12 y4@@12 y5@@6 y6@@6 y7@@6 y8@@6 y9@@6 y10@@6))) :qid |mapAx1:MapType5Select:7| :weight 0 ))) (forall ((val@@31 T@U) (m@@70 T@U) (x0@@30 T@U) (x1@@24 T@U) (x2@@20 T@U) (x3@@15 T@U) (x4@@15 T@U) (x5@@8 T@U) (x6@@8 T@U) (x7@@8 T@U) (x8@@8 T@U) (x9@@8 T@U) (x10@@8 T@U) (y0@@24 T@U) (y1@@20 T@U) (y2@@17 T@U) (y3@@13 T@U) (y4@@13 T@U) (y5@@7 T@U) (y6@@7 T@U) (y7@@7 T@U) (y8@@7 T@U) (y9@@7 T@U) (y10@@7 T@U) ) (!  (or (= x8@@8 y8@@7) (= (MapType5Select (MapType5Store m@@70 x0@@30 x1@@24 x2@@20 x3@@15 x4@@15 x5@@8 x6@@8 x7@@8 x8@@8 x9@@8 x10@@8 val@@31) y0@@24 y1@@20 y2@@17 y3@@13 y4@@13 y5@@7 y6@@7 y7@@7 y8@@7 y9@@7 y10@@7) (MapType5Select m@@70 y0@@24 y1@@20 y2@@17 y3@@13 y4@@13 y5@@7 y6@@7 y7@@7 y8@@7 y9@@7 y10@@7))) :qid |mapAx1:MapType5Select:8| :weight 0 ))) (forall ((val@@32 T@U) (m@@71 T@U) (x0@@31 T@U) (x1@@25 T@U) (x2@@21 T@U) (x3@@16 T@U) (x4@@16 T@U) (x5@@9 T@U) (x6@@9 T@U) (x7@@9 T@U) (x8@@9 T@U) (x9@@9 T@U) (x10@@9 T@U) (y0@@25 T@U) (y1@@21 T@U) (y2@@18 T@U) (y3@@14 T@U) (y4@@14 T@U) (y5@@8 T@U) (y6@@8 T@U) (y7@@8 T@U) (y8@@8 T@U) (y9@@8 T@U) (y10@@8 T@U) ) (!  (or (= x9@@9 y9@@8) (= (MapType5Select (MapType5Store m@@71 x0@@31 x1@@25 x2@@21 x3@@16 x4@@16 x5@@9 x6@@9 x7@@9 x8@@9 x9@@9 x10@@9 val@@32) y0@@25 y1@@21 y2@@18 y3@@14 y4@@14 y5@@8 y6@@8 y7@@8 y8@@8 y9@@8 y10@@8) (MapType5Select m@@71 y0@@25 y1@@21 y2@@18 y3@@14 y4@@14 y5@@8 y6@@8 y7@@8 y8@@8 y9@@8 y10@@8))) :qid |mapAx1:MapType5Select:9| :weight 0 ))) (forall ((val@@33 T@U) (m@@72 T@U) (x0@@32 T@U) (x1@@26 T@U) (x2@@22 T@U) (x3@@17 T@U) (x4@@17 T@U) (x5@@10 T@U) (x6@@10 T@U) (x7@@10 T@U) (x8@@10 T@U) (x9@@10 T@U) (x10@@10 T@U) (y0@@26 T@U) (y1@@22 T@U) (y2@@19 T@U) (y3@@15 T@U) (y4@@15 T@U) (y5@@9 T@U) (y6@@9 T@U) (y7@@9 T@U) (y8@@9 T@U) (y9@@9 T@U) (y10@@9 T@U) ) (!  (or (= x10@@10 y10@@9) (= (MapType5Select (MapType5Store m@@72 x0@@32 x1@@26 x2@@22 x3@@17 x4@@17 x5@@10 x6@@10 x7@@10 x8@@10 x9@@10 x10@@10 val@@33) y0@@26 y1@@22 y2@@19 y3@@15 y4@@15 y5@@9 y6@@9 y7@@9 y8@@9 y9@@9 y10@@9) (MapType5Select m@@72 y0@@26 y1@@22 y2@@19 y3@@15 y4@@15 y5@@9 y6@@9 y7@@9 y8@@9 y9@@9 y10@@9))) :qid |mapAx1:MapType5Select:10| :weight 0 ))) (forall ((val@@34 T@U) (m@@73 T@U) (x0@@33 T@U) (x1@@27 T@U) (x2@@23 T@U) (x3@@18 T@U) (x4@@18 T@U) (x5@@11 T@U) (x6@@11 T@U) (x7@@11 T@U) (x8@@11 T@U) (x9@@11 T@U) (x10@@11 T@U) (y0@@27 T@U) (y1@@23 T@U) (y2@@20 T@U) (y3@@16 T@U) (y4@@16 T@U) (y5@@10 T@U) (y6@@10 T@U) (y7@@10 T@U) (y8@@10 T@U) (y9@@10 T@U) (y10@@10 T@U) ) (!  (or true (= (MapType5Select (MapType5Store m@@73 x0@@33 x1@@27 x2@@23 x3@@18 x4@@18 x5@@11 x6@@11 x7@@11 x8@@11 x9@@11 x10@@11 val@@34) y0@@27 y1@@23 y2@@20 y3@@16 y4@@16 y5@@10 y6@@10 y7@@10 y8@@10 y9@@10 y10@@10) (MapType5Select m@@73 y0@@27 y1@@23 y2@@20 y3@@16 y4@@16 y5@@10 y6@@10 y7@@10 y8@@10 y9@@10 y10@@10))) :qid |mapAx2:MapType5Select| :weight 0 )))) (forall ((arg0@@224 T@U) (arg1@@111 T@U) (arg2@@63 T@U) (arg3@@42 T@U) (arg4@@34 T@U) (arg5@@28 T@U) (arg6@@20 T@U) (arg7@@17 T@U) (arg8@@17 T@U) (arg9@@17 T@U) (arg10@@17 T@U) (arg11@@14 T@U) (arg12@@0 T@U) (arg13 T@U) (arg14 T@U) (arg15 T@U) (arg16 T@U) (arg17 T@U) (arg18 T@U) (arg19 T@U) (arg20 T@U) (arg21 T@U) (arg22 T@U) ) (! (= (type (Apply10 arg0@@224 arg1@@111 arg2@@63 arg3@@42 arg4@@34 arg5@@28 arg6@@20 arg7@@17 arg8@@17 arg9@@17 arg10@@17 arg11@@14 arg12@@0 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22)) BoxType) :qid |funType:Apply10| :pattern ( (Apply10 arg0@@224 arg1@@111 arg2@@63 arg3@@42 arg4@@34 arg5@@28 arg6@@20 arg7@@17 arg8@@17 arg9@@17 arg10@@17 arg11@@14 arg12@@0 arg13 arg14 arg15 arg16 arg17 arg18 arg19 arg20 arg21 arg22)) ))) (forall ((arg0@@225 T@U) (arg1@@112 T@U) (arg2@@64 T@U) ) (! (= (type (Handle10 arg0@@225 arg1@@112 arg2@@64)) HandleTypeType) :qid |funType:Handle10| :pattern ( (Handle10 arg0@@225 arg1@@112 arg2@@64)) ))))
(assert (forall ((t0@@76 T@U) (t1@@52 T@U) (t2@@29 T@U) (t3@@14 T@U) (t4@@14 T@U) (t5 T@U) (t6 T@U) (t7 T@U) (t8 T@U) (t9 T@U) (t10 T@U) (heap@@21 T@U) (h@@45 T@U) (r@@22 T@U) (rd@@11 T@U) (bx0@@41 T@U) (bx1@@27 T@U) (bx2@@13 T@U) (bx3@@13 T@U) (bx4 T@U) (bx5 T@U) (bx6 T@U) (bx7 T@U) (bx8 T@U) (bx9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@76) TyType) (= (type t1@@52) TyType)) (= (type t2@@29) TyType)) (= (type t3@@14) TyType)) (= (type t4@@14) TyType)) (= (type t5) TyType)) (= (type t6) TyType)) (= (type t7) TyType)) (= (type t8) TyType)) (= (type t9) TyType)) (= (type t10) TyType)) (= (type heap@@21) (MapType0Type refType MapType1Type))) (= (type h@@45) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@22) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@11) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@41) BoxType)) (= (type bx1@@27) BoxType)) (= (type bx2@@13) BoxType)) (= (type bx3@@13) BoxType)) (= (type bx4) BoxType)) (= (type bx5) BoxType)) (= (type bx6) BoxType)) (= (type bx7) BoxType)) (= (type bx8) BoxType)) (= (type bx9) BoxType)) (= (Apply10 t0@@76 t1@@52 t2@@29 t3@@14 t4@@14 t5 t6 t7 t8 t9 t10 heap@@21 (Handle10 h@@45 r@@22 rd@@11) bx0@@41 bx1@@27 bx2@@13 bx3@@13 bx4 bx5 bx6 bx7 bx8 bx9) (MapType5Select h@@45 heap@@21 bx0@@41 bx1@@27 bx2@@13 bx3@@13 bx4 bx5 bx6 bx7 bx8 bx9))) :qid |unknown.0:0| :skolemid |923| :pattern ( (Apply10 t0@@76 t1@@52 t2@@29 t3@@14 t4@@14 t5 t6 t7 t8 t9 t10 heap@@21 (Handle10 h@@45 r@@22 rd@@11) bx0@@41 bx1@@27 bx2@@13 bx3@@13 bx4 bx5 bx6 bx7 bx8 bx9)) )))
(assert (forall ((t0@@77 T@U) (t1@@53 T@U) (t2@@30 T@U) (t3@@15 T@U) (t4@@15 T@U) (t5@@0 T@U) (t6@@0 T@U) (t7@@0 T@U) (t8@@0 T@U) (t9@@0 T@U) (t10@@0 T@U) (heap@@22 T@U) (h@@46 T@U) (r@@23 T@U) (rd@@12 T@U) (bx0@@42 T@U) (bx1@@28 T@U) (bx2@@14 T@U) (bx3@@14 T@U) (bx4@@0 T@U) (bx5@@0 T@U) (bx6@@0 T@U) (bx7@@0 T@U) (bx8@@0 T@U) (bx9@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@77) TyType) (= (type t1@@53) TyType)) (= (type t2@@30) TyType)) (= (type t3@@15) TyType)) (= (type t4@@15) TyType)) (= (type t5@@0) TyType)) (= (type t6@@0) TyType)) (= (type t7@@0) TyType)) (= (type t8@@0) TyType)) (= (type t9@@0) TyType)) (= (type t10@@0) TyType)) (= (type heap@@22) (MapType0Type refType MapType1Type))) (= (type h@@46) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@23) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@12) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@42) BoxType)) (= (type bx1@@28) BoxType)) (= (type bx2@@14) BoxType)) (= (type bx3@@14) BoxType)) (= (type bx4@@0) BoxType)) (= (type bx5@@0) BoxType)) (= (type bx6@@0) BoxType)) (= (type bx7@@0) BoxType)) (= (type bx8@@0) BoxType)) (= (type bx9@@0) BoxType)) (U_2_bool (MapType5Select r@@23 heap@@22 bx0@@42 bx1@@28 bx2@@14 bx3@@14 bx4@@0 bx5@@0 bx6@@0 bx7@@0 bx8@@0 bx9@@0))) (Requires10 t0@@77 t1@@53 t2@@30 t3@@15 t4@@15 t5@@0 t6@@0 t7@@0 t8@@0 t9@@0 t10@@0 heap@@22 (Handle10 h@@46 r@@23 rd@@12) bx0@@42 bx1@@28 bx2@@14 bx3@@14 bx4@@0 bx5@@0 bx6@@0 bx7@@0 bx8@@0 bx9@@0)) :qid |unknown.0:0| :skolemid |924| :pattern ( (Requires10 t0@@77 t1@@53 t2@@30 t3@@15 t4@@15 t5@@0 t6@@0 t7@@0 t8@@0 t9@@0 t10@@0 heap@@22 (Handle10 h@@46 r@@23 rd@@12) bx0@@42 bx1@@28 bx2@@14 bx3@@14 bx4@@0 bx5@@0 bx6@@0 bx7@@0 bx8@@0 bx9@@0)) )))
(assert (forall ((arg0@@226 T@U) (arg1@@113 T@U) (arg2@@65 T@U) (arg3@@43 T@U) (arg4@@35 T@U) (arg5@@29 T@U) (arg6@@21 T@U) (arg7@@18 T@U) (arg8@@18 T@U) (arg9@@18 T@U) (arg10@@18 T@U) (arg11@@15 T@U) (arg12@@1 T@U) (arg13@@0 T@U) (arg14@@0 T@U) (arg15@@0 T@U) (arg16@@0 T@U) (arg17@@0 T@U) (arg18@@0 T@U) (arg19@@0 T@U) (arg20@@0 T@U) (arg21@@0 T@U) (arg22@@0 T@U) ) (! (= (type (Reads10 arg0@@226 arg1@@113 arg2@@65 arg3@@43 arg4@@35 arg5@@29 arg6@@21 arg7@@18 arg8@@18 arg9@@18 arg10@@18 arg11@@15 arg12@@1 arg13@@0 arg14@@0 arg15@@0 arg16@@0 arg17@@0 arg18@@0 arg19@@0 arg20@@0 arg21@@0 arg22@@0)) (MapType0Type BoxType boolType)) :qid |funType:Reads10| :pattern ( (Reads10 arg0@@226 arg1@@113 arg2@@65 arg3@@43 arg4@@35 arg5@@29 arg6@@21 arg7@@18 arg8@@18 arg9@@18 arg10@@18 arg11@@15 arg12@@1 arg13@@0 arg14@@0 arg15@@0 arg16@@0 arg17@@0 arg18@@0 arg19@@0 arg20@@0 arg21@@0 arg22@@0)) )))
(assert (forall ((t0@@78 T@U) (t1@@54 T@U) (t2@@31 T@U) (t3@@16 T@U) (t4@@16 T@U) (t5@@1 T@U) (t6@@1 T@U) (t7@@1 T@U) (t8@@1 T@U) (t9@@1 T@U) (t10@@1 T@U) (heap@@23 T@U) (h@@47 T@U) (r@@24 T@U) (rd@@13 T@U) (bx0@@43 T@U) (bx1@@29 T@U) (bx2@@15 T@U) (bx3@@15 T@U) (bx4@@1 T@U) (bx5@@1 T@U) (bx6@@1 T@U) (bx7@@1 T@U) (bx8@@1 T@U) (bx9@@1 T@U) (bx@@60 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@78) TyType) (= (type t1@@54) TyType)) (= (type t2@@31) TyType)) (= (type t3@@16) TyType)) (= (type t4@@16) TyType)) (= (type t5@@1) TyType)) (= (type t6@@1) TyType)) (= (type t7@@1) TyType)) (= (type t8@@1) TyType)) (= (type t9@@1) TyType)) (= (type t10@@1) TyType)) (= (type heap@@23) (MapType0Type refType MapType1Type))) (= (type h@@47) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@24) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@13) (MapType5Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@43) BoxType)) (= (type bx1@@29) BoxType)) (= (type bx2@@15) BoxType)) (= (type bx3@@15) BoxType)) (= (type bx4@@1) BoxType)) (= (type bx5@@1) BoxType)) (= (type bx6@@1) BoxType)) (= (type bx7@@1) BoxType)) (= (type bx8@@1) BoxType)) (= (type bx9@@1) BoxType)) (= (type bx@@60) BoxType)) (= (U_2_bool (MapType0Select (Reads10 t0@@78 t1@@54 t2@@31 t3@@16 t4@@16 t5@@1 t6@@1 t7@@1 t8@@1 t9@@1 t10@@1 heap@@23 (Handle10 h@@47 r@@24 rd@@13) bx0@@43 bx1@@29 bx2@@15 bx3@@15 bx4@@1 bx5@@1 bx6@@1 bx7@@1 bx8@@1 bx9@@1) bx@@60)) (U_2_bool (MapType0Select (MapType5Select rd@@13 heap@@23 bx0@@43 bx1@@29 bx2@@15 bx3@@15 bx4@@1 bx5@@1 bx6@@1 bx7@@1 bx8@@1 bx9@@1) bx@@60)))) :qid |unknown.0:0| :skolemid |925| :pattern ( (MapType0Select (Reads10 t0@@78 t1@@54 t2@@31 t3@@16 t4@@16 t5@@1 t6@@1 t7@@1 t8@@1 t9@@1 t10@@1 heap@@23 (Handle10 h@@47 r@@24 rd@@13) bx0@@43 bx1@@29 bx2@@15 bx3@@15 bx4@@1 bx5@@1 bx6@@1 bx7@@1 bx8@@1 bx9@@1) bx@@60)) )))
(assert (forall ((t0@@79 T@U) (t1@@55 T@U) (t2@@32 T@U) (t3@@17 T@U) (t4@@17 T@U) (t5@@2 T@U) (t6@@2 T@U) (t7@@2 T@U) (t8@@2 T@U) (t9@@2 T@U) (t10@@2 T@U) (h0@@24 T@U) (h1@@24 T@U) (f@@53 T@U) (bx0@@44 T@U) (bx1@@30 T@U) (bx2@@16 T@U) (bx3@@16 T@U) (bx4@@2 T@U) (bx5@@2 T@U) (bx6@@2 T@U) (bx7@@2 T@U) (bx8@@2 T@U) (bx9@@2 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@79) TyType) (= (type t1@@55) TyType)) (= (type t2@@32) TyType)) (= (type t3@@17) TyType)) (= (type t4@@17) TyType)) (= (type t5@@2) TyType)) (= (type t6@@2) TyType)) (= (type t7@@2) TyType)) (= (type t8@@2) TyType)) (= (type t9@@2) TyType)) (= (type t10@@2) TyType)) (= (type h0@@24) (MapType0Type refType MapType1Type))) (= (type h1@@24) (MapType0Type refType MapType1Type))) (= (type f@@53) HandleTypeType)) (= (type bx0@@44) BoxType)) (= (type bx1@@30) BoxType)) (= (type bx2@@16) BoxType)) (= (type bx3@@16) BoxType)) (= (type bx4@@2) BoxType)) (= (type bx5@@2) BoxType)) (= (type bx6@@2) BoxType)) (= (type bx7@@2) BoxType)) (= (type bx8@@2) BoxType)) (= (type bx9@@2) BoxType)) (and (and (and ($HeapSucc h0@@24 h1@@24) (and ($IsGoodHeap h0@@24) ($IsGoodHeap h1@@24))) (and (and (and (and (and (and (and (and (and (and ($IsBox bx0@@44 t0@@79) ($IsBox bx1@@30 t1@@55)) ($IsBox bx2@@16 t2@@32)) ($IsBox bx3@@16 t3@@17)) ($IsBox bx4@@2 t4@@17)) ($IsBox bx5@@2 t5@@2)) ($IsBox bx6@@2 t6@@2)) ($IsBox bx7@@2 t7@@2)) ($IsBox bx8@@2 t8@@2)) ($IsBox bx9@@2 t9@@2)) ($Is f@@53 (Tclass._System.___hFunc10 t0@@79 t1@@55 t2@@32 t3@@17 t4@@17 t5@@2 t6@@2 t7@@2 t8@@2 t9@@2 t10@@2)))) (forall ((o@@68 T@U) (fld@@23 T@U) ) (! (let ((a@@106 (FieldTypeInv0 (type fld@@23)))) (=> (and (and (= (type o@@68) refType) (= (type fld@@23) (FieldType a@@106))) (and (not (= o@@68 null)) (U_2_bool (MapType0Select (Reads10 t0@@79 t1@@55 t2@@32 t3@@17 t4@@17 t5@@2 t6@@2 t7@@2 t8@@2 t9@@2 t10@@2 h0@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@16 bx4@@2 bx5@@2 bx6@@2 bx7@@2 bx8@@2 bx9@@2) ($Box o@@68))))) (= (MapType1Select (MapType0Select h0@@24 o@@68) fld@@23) (MapType1Select (MapType0Select h1@@24 o@@68) fld@@23)))) :qid |unknown.0:0| :skolemid |926| :no-pattern (type o@@68) :no-pattern (type fld@@23) :no-pattern (U_2_int o@@68) :no-pattern (U_2_bool o@@68) :no-pattern (U_2_int fld@@23) :no-pattern (U_2_bool fld@@23) )))) (= (Reads10 t0@@79 t1@@55 t2@@32 t3@@17 t4@@17 t5@@2 t6@@2 t7@@2 t8@@2 t9@@2 t10@@2 h0@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@16 bx4@@2 bx5@@2 bx6@@2 bx7@@2 bx8@@2 bx9@@2) (Reads10 t0@@79 t1@@55 t2@@32 t3@@17 t4@@17 t5@@2 t6@@2 t7@@2 t8@@2 t9@@2 t10@@2 h1@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@16 bx4@@2 bx5@@2 bx6@@2 bx7@@2 bx8@@2 bx9@@2))) :qid |unknown.0:0| :skolemid |927| :pattern ( ($HeapSucc h0@@24 h1@@24) (Reads10 t0@@79 t1@@55 t2@@32 t3@@17 t4@@17 t5@@2 t6@@2 t7@@2 t8@@2 t9@@2 t10@@2 h1@@24 f@@53 bx0@@44 bx1@@30 bx2@@16 bx3@@16 bx4@@2 bx5@@2 bx6@@2 bx7@@2 bx8@@2 bx9@@2)) )))
(assert (forall ((t0@@80 T@U) (t1@@56 T@U) (t2@@33 T@U) (t3@@18 T@U) (t4@@18 T@U) (t5@@3 T@U) (t6@@3 T@U) (t7@@3 T@U) (t8@@3 T@U) (t9@@3 T@U) (t10@@3 T@U) (h0@@25 T@U) (h1@@25 T@U) (f@@54 T@U) (bx0@@45 T@U) (bx1@@31 T@U) (bx2@@17 T@U) (bx3@@17 T@U) (bx4@@3 T@U) (bx5@@3 T@U) (bx6@@3 T@U) (bx7@@3 T@U) (bx8@@3 T@U) (bx9@@3 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@80) TyType) (= (type t1@@56) TyType)) (= (type t2@@33) TyType)) (= (type t3@@18) TyType)) (= (type t4@@18) TyType)) (= (type t5@@3) TyType)) (= (type t6@@3) TyType)) (= (type t7@@3) TyType)) (= (type t8@@3) TyType)) (= (type t9@@3) TyType)) (= (type t10@@3) TyType)) (= (type h0@@25) (MapType0Type refType MapType1Type))) (= (type h1@@25) (MapType0Type refType MapType1Type))) (= (type f@@54) HandleTypeType)) (= (type bx0@@45) BoxType)) (= (type bx1@@31) BoxType)) (= (type bx2@@17) BoxType)) (= (type bx3@@17) BoxType)) (= (type bx4@@3) BoxType)) (= (type bx5@@3) BoxType)) (= (type bx6@@3) BoxType)) (= (type bx7@@3) BoxType)) (= (type bx8@@3) BoxType)) (= (type bx9@@3) BoxType)) (and (and (and ($HeapSucc h0@@25 h1@@25) (and ($IsGoodHeap h0@@25) ($IsGoodHeap h1@@25))) (and (and (and (and (and (and (and (and (and (and ($IsBox bx0@@45 t0@@80) ($IsBox bx1@@31 t1@@56)) ($IsBox bx2@@17 t2@@33)) ($IsBox bx3@@17 t3@@18)) ($IsBox bx4@@3 t4@@18)) ($IsBox bx5@@3 t5@@3)) ($IsBox bx6@@3 t6@@3)) ($IsBox bx7@@3 t7@@3)) ($IsBox bx8@@3 t8@@3)) ($IsBox bx9@@3 t9@@3)) ($Is f@@54 (Tclass._System.___hFunc10 t0@@80 t1@@56 t2@@33 t3@@18 t4@@18 t5@@3 t6@@3 t7@@3 t8@@3 t9@@3 t10@@3)))) (forall ((o@@69 T@U) (fld@@24 T@U) ) (! (let ((a@@107 (FieldTypeInv0 (type fld@@24)))) (=> (and (and (= (type o@@69) refType) (= (type fld@@24) (FieldType a@@107))) (and (not (= o@@69 null)) (U_2_bool (MapType0Select (Reads10 t0@@80 t1@@56 t2@@33 t3@@18 t4@@18 t5@@3 t6@@3 t7@@3 t8@@3 t9@@3 t10@@3 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@17 bx4@@3 bx5@@3 bx6@@3 bx7@@3 bx8@@3 bx9@@3) ($Box o@@69))))) (= (MapType1Select (MapType0Select h0@@25 o@@69) fld@@24) (MapType1Select (MapType0Select h1@@25 o@@69) fld@@24)))) :qid |unknown.0:0| :skolemid |928| :no-pattern (type o@@69) :no-pattern (type fld@@24) :no-pattern (U_2_int o@@69) :no-pattern (U_2_bool o@@69) :no-pattern (U_2_int fld@@24) :no-pattern (U_2_bool fld@@24) )))) (= (Reads10 t0@@80 t1@@56 t2@@33 t3@@18 t4@@18 t5@@3 t6@@3 t7@@3 t8@@3 t9@@3 t10@@3 h0@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@17 bx4@@3 bx5@@3 bx6@@3 bx7@@3 bx8@@3 bx9@@3) (Reads10 t0@@80 t1@@56 t2@@33 t3@@18 t4@@18 t5@@3 t6@@3 t7@@3 t8@@3 t9@@3 t10@@3 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@17 bx4@@3 bx5@@3 bx6@@3 bx7@@3 bx8@@3 bx9@@3))) :qid |unknown.0:0| :skolemid |929| :pattern ( ($HeapSucc h0@@25 h1@@25) (Reads10 t0@@80 t1@@56 t2@@33 t3@@18 t4@@18 t5@@3 t6@@3 t7@@3 t8@@3 t9@@3 t10@@3 h1@@25 f@@54 bx0@@45 bx1@@31 bx2@@17 bx3@@17 bx4@@3 bx5@@3 bx6@@3 bx7@@3 bx8@@3 bx9@@3)) )))
(assert (forall ((t0@@81 T@U) (t1@@57 T@U) (t2@@34 T@U) (t3@@19 T@U) (t4@@19 T@U) (t5@@4 T@U) (t6@@4 T@U) (t7@@4 T@U) (t8@@4 T@U) (t9@@4 T@U) (t10@@4 T@U) (h0@@26 T@U) (h1@@26 T@U) (f@@55 T@U) (bx0@@46 T@U) (bx1@@32 T@U) (bx2@@18 T@U) (bx3@@18 T@U) (bx4@@4 T@U) (bx5@@4 T@U) (bx6@@4 T@U) (bx7@@4 T@U) (bx8@@4 T@U) (bx9@@4 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@81) TyType) (= (type t1@@57) TyType)) (= (type t2@@34) TyType)) (= (type t3@@19) TyType)) (= (type t4@@19) TyType)) (= (type t5@@4) TyType)) (= (type t6@@4) TyType)) (= (type t7@@4) TyType)) (= (type t8@@4) TyType)) (= (type t9@@4) TyType)) (= (type t10@@4) TyType)) (= (type h0@@26) (MapType0Type refType MapType1Type))) (= (type h1@@26) (MapType0Type refType MapType1Type))) (= (type f@@55) HandleTypeType)) (= (type bx0@@46) BoxType)) (= (type bx1@@32) BoxType)) (= (type bx2@@18) BoxType)) (= (type bx3@@18) BoxType)) (= (type bx4@@4) BoxType)) (= (type bx5@@4) BoxType)) (= (type bx6@@4) BoxType)) (= (type bx7@@4) BoxType)) (= (type bx8@@4) BoxType)) (= (type bx9@@4) BoxType)) (and (and (and ($HeapSucc h0@@26 h1@@26) (and ($IsGoodHeap h0@@26) ($IsGoodHeap h1@@26))) (and (and (and (and (and (and (and (and (and (and ($IsBox bx0@@46 t0@@81) ($IsBox bx1@@32 t1@@57)) ($IsBox bx2@@18 t2@@34)) ($IsBox bx3@@18 t3@@19)) ($IsBox bx4@@4 t4@@19)) ($IsBox bx5@@4 t5@@4)) ($IsBox bx6@@4 t6@@4)) ($IsBox bx7@@4 t7@@4)) ($IsBox bx8@@4 t8@@4)) ($IsBox bx9@@4 t9@@4)) ($Is f@@55 (Tclass._System.___hFunc10 t0@@81 t1@@57 t2@@34 t3@@19 t4@@19 t5@@4 t6@@4 t7@@4 t8@@4 t9@@4 t10@@4)))) (forall ((o@@70 T@U) (fld@@25 T@U) ) (! (let ((a@@108 (FieldTypeInv0 (type fld@@25)))) (=> (and (and (= (type o@@70) refType) (= (type fld@@25) (FieldType a@@108))) (and (not (= o@@70 null)) (U_2_bool (MapType0Select (Reads10 t0@@81 t1@@57 t2@@34 t3@@19 t4@@19 t5@@4 t6@@4 t7@@4 t8@@4 t9@@4 t10@@4 h0@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@18 bx4@@4 bx5@@4 bx6@@4 bx7@@4 bx8@@4 bx9@@4) ($Box o@@70))))) (= (MapType1Select (MapType0Select h0@@26 o@@70) fld@@25) (MapType1Select (MapType0Select h1@@26 o@@70) fld@@25)))) :qid |unknown.0:0| :skolemid |930| :no-pattern (type o@@70) :no-pattern (type fld@@25) :no-pattern (U_2_int o@@70) :no-pattern (U_2_bool o@@70) :no-pattern (U_2_int fld@@25) :no-pattern (U_2_bool fld@@25) )))) (= (Requires10 t0@@81 t1@@57 t2@@34 t3@@19 t4@@19 t5@@4 t6@@4 t7@@4 t8@@4 t9@@4 t10@@4 h0@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@18 bx4@@4 bx5@@4 bx6@@4 bx7@@4 bx8@@4 bx9@@4) (Requires10 t0@@81 t1@@57 t2@@34 t3@@19 t4@@19 t5@@4 t6@@4 t7@@4 t8@@4 t9@@4 t10@@4 h1@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@18 bx4@@4 bx5@@4 bx6@@4 bx7@@4 bx8@@4 bx9@@4))) :qid |unknown.0:0| :skolemid |931| :pattern ( ($HeapSucc h0@@26 h1@@26) (Requires10 t0@@81 t1@@57 t2@@34 t3@@19 t4@@19 t5@@4 t6@@4 t7@@4 t8@@4 t9@@4 t10@@4 h1@@26 f@@55 bx0@@46 bx1@@32 bx2@@18 bx3@@18 bx4@@4 bx5@@4 bx6@@4 bx7@@4 bx8@@4 bx9@@4)) )))
(assert (forall ((t0@@82 T@U) (t1@@58 T@U) (t2@@35 T@U) (t3@@20 T@U) (t4@@20 T@U) (t5@@5 T@U) (t6@@5 T@U) (t7@@5 T@U) (t8@@5 T@U) (t9@@5 T@U) (t10@@5 T@U) (h0@@27 T@U) (h1@@27 T@U) (f@@56 T@U) (bx0@@47 T@U) (bx1@@33 T@U) (bx2@@19 T@U) (bx3@@19 T@U) (bx4@@5 T@U) (bx5@@5 T@U) (bx6@@5 T@U) (bx7@@5 T@U) (bx8@@5 T@U) (bx9@@5 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@82) TyType) (= (type t1@@58) TyType)) (= (type t2@@35) TyType)) (= (type t3@@20) TyType)) (= (type t4@@20) TyType)) (= (type t5@@5) TyType)) (= (type t6@@5) TyType)) (= (type t7@@5) TyType)) (= (type t8@@5) TyType)) (= (type t9@@5) TyType)) (= (type t10@@5) TyType)) (= (type h0@@27) (MapType0Type refType MapType1Type))) (= (type h1@@27) (MapType0Type refType MapType1Type))) (= (type f@@56) HandleTypeType)) (= (type bx0@@47) BoxType)) (= (type bx1@@33) BoxType)) (= (type bx2@@19) BoxType)) (= (type bx3@@19) BoxType)) (= (type bx4@@5) BoxType)) (= (type bx5@@5) BoxType)) (= (type bx6@@5) BoxType)) (= (type bx7@@5) BoxType)) (= (type bx8@@5) BoxType)) (= (type bx9@@5) BoxType)) (and (and (and ($HeapSucc h0@@27 h1@@27) (and ($IsGoodHeap h0@@27) ($IsGoodHeap h1@@27))) (and (and (and (and (and (and (and (and (and (and ($IsBox bx0@@47 t0@@82) ($IsBox bx1@@33 t1@@58)) ($IsBox bx2@@19 t2@@35)) ($IsBox bx3@@19 t3@@20)) ($IsBox bx4@@5 t4@@20)) ($IsBox bx5@@5 t5@@5)) ($IsBox bx6@@5 t6@@5)) ($IsBox bx7@@5 t7@@5)) ($IsBox bx8@@5 t8@@5)) ($IsBox bx9@@5 t9@@5)) ($Is f@@56 (Tclass._System.___hFunc10 t0@@82 t1@@58 t2@@35 t3@@20 t4@@20 t5@@5 t6@@5 t7@@5 t8@@5 t9@@5 t10@@5)))) (forall ((o@@71 T@U) (fld@@26 T@U) ) (! (let ((a@@109 (FieldTypeInv0 (type fld@@26)))) (=> (and (and (= (type o@@71) refType) (= (type fld@@26) (FieldType a@@109))) (and (not (= o@@71 null)) (U_2_bool (MapType0Select (Reads10 t0@@82 t1@@58 t2@@35 t3@@20 t4@@20 t5@@5 t6@@5 t7@@5 t8@@5 t9@@5 t10@@5 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@19 bx4@@5 bx5@@5 bx6@@5 bx7@@5 bx8@@5 bx9@@5) ($Box o@@71))))) (= (MapType1Select (MapType0Select h0@@27 o@@71) fld@@26) (MapType1Select (MapType0Select h1@@27 o@@71) fld@@26)))) :qid |unknown.0:0| :skolemid |932| :no-pattern (type o@@71) :no-pattern (type fld@@26) :no-pattern (U_2_int o@@71) :no-pattern (U_2_bool o@@71) :no-pattern (U_2_int fld@@26) :no-pattern (U_2_bool fld@@26) )))) (= (Requires10 t0@@82 t1@@58 t2@@35 t3@@20 t4@@20 t5@@5 t6@@5 t7@@5 t8@@5 t9@@5 t10@@5 h0@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@19 bx4@@5 bx5@@5 bx6@@5 bx7@@5 bx8@@5 bx9@@5) (Requires10 t0@@82 t1@@58 t2@@35 t3@@20 t4@@20 t5@@5 t6@@5 t7@@5 t8@@5 t9@@5 t10@@5 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@19 bx4@@5 bx5@@5 bx6@@5 bx7@@5 bx8@@5 bx9@@5))) :qid |unknown.0:0| :skolemid |933| :pattern ( ($HeapSucc h0@@27 h1@@27) (Requires10 t0@@82 t1@@58 t2@@35 t3@@20 t4@@20 t5@@5 t6@@5 t7@@5 t8@@5 t9@@5 t10@@5 h1@@27 f@@56 bx0@@47 bx1@@33 bx2@@19 bx3@@19 bx4@@5 bx5@@5 bx6@@5 bx7@@5 bx8@@5 bx9@@5)) )))
(assert (forall ((t0@@83 T@U) (t1@@59 T@U) (t2@@36 T@U) (t3@@21 T@U) (t4@@21 T@U) (t5@@6 T@U) (t6@@6 T@U) (t7@@6 T@U) (t8@@6 T@U) (t9@@6 T@U) (t10@@6 T@U) (h0@@28 T@U) (h1@@28 T@U) (f@@57 T@U) (bx0@@48 T@U) (bx1@@34 T@U) (bx2@@20 T@U) (bx3@@20 T@U) (bx4@@6 T@U) (bx5@@6 T@U) (bx6@@6 T@U) (bx7@@6 T@U) (bx8@@6 T@U) (bx9@@6 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@83) TyType) (= (type t1@@59) TyType)) (= (type t2@@36) TyType)) (= (type t3@@21) TyType)) (= (type t4@@21) TyType)) (= (type t5@@6) TyType)) (= (type t6@@6) TyType)) (= (type t7@@6) TyType)) (= (type t8@@6) TyType)) (= (type t9@@6) TyType)) (= (type t10@@6) TyType)) (= (type h0@@28) (MapType0Type refType MapType1Type))) (= (type h1@@28) (MapType0Type refType MapType1Type))) (= (type f@@57) HandleTypeType)) (= (type bx0@@48) BoxType)) (= (type bx1@@34) BoxType)) (= (type bx2@@20) BoxType)) (= (type bx3@@20) BoxType)) (= (type bx4@@6) BoxType)) (= (type bx5@@6) BoxType)) (= (type bx6@@6) BoxType)) (= (type bx7@@6) BoxType)) (= (type bx8@@6) BoxType)) (= (type bx9@@6) BoxType)) (and (and (and ($HeapSucc h0@@28 h1@@28) (and ($IsGoodHeap h0@@28) ($IsGoodHeap h1@@28))) (and (and (and (and (and (and (and (and (and (and ($IsBox bx0@@48 t0@@83) ($IsBox bx1@@34 t1@@59)) ($IsBox bx2@@20 t2@@36)) ($IsBox bx3@@20 t3@@21)) ($IsBox bx4@@6 t4@@21)) ($IsBox bx5@@6 t5@@6)) ($IsBox bx6@@6 t6@@6)) ($IsBox bx7@@6 t7@@6)) ($IsBox bx8@@6 t8@@6)) ($IsBox bx9@@6 t9@@6)) ($Is f@@57 (Tclass._System.___hFunc10 t0@@83 t1@@59 t2@@36 t3@@21 t4@@21 t5@@6 t6@@6 t7@@6 t8@@6 t9@@6 t10@@6)))) (forall ((o@@72 T@U) (fld@@27 T@U) ) (! (let ((a@@110 (FieldTypeInv0 (type fld@@27)))) (=> (and (and (= (type o@@72) refType) (= (type fld@@27) (FieldType a@@110))) (and (not (= o@@72 null)) (U_2_bool (MapType0Select (Reads10 t0@@83 t1@@59 t2@@36 t3@@21 t4@@21 t5@@6 t6@@6 t7@@6 t8@@6 t9@@6 t10@@6 h0@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@20 bx4@@6 bx5@@6 bx6@@6 bx7@@6 bx8@@6 bx9@@6) ($Box o@@72))))) (= (MapType1Select (MapType0Select h0@@28 o@@72) fld@@27) (MapType1Select (MapType0Select h1@@28 o@@72) fld@@27)))) :qid |unknown.0:0| :skolemid |934| :no-pattern (type o@@72) :no-pattern (type fld@@27) :no-pattern (U_2_int o@@72) :no-pattern (U_2_bool o@@72) :no-pattern (U_2_int fld@@27) :no-pattern (U_2_bool fld@@27) )))) (= (Apply10 t0@@83 t1@@59 t2@@36 t3@@21 t4@@21 t5@@6 t6@@6 t7@@6 t8@@6 t9@@6 t10@@6 h0@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@20 bx4@@6 bx5@@6 bx6@@6 bx7@@6 bx8@@6 bx9@@6) (Apply10 t0@@83 t1@@59 t2@@36 t3@@21 t4@@21 t5@@6 t6@@6 t7@@6 t8@@6 t9@@6 t10@@6 h1@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@20 bx4@@6 bx5@@6 bx6@@6 bx7@@6 bx8@@6 bx9@@6))) :qid |unknown.0:0| :skolemid |935| :pattern ( ($HeapSucc h0@@28 h1@@28) (Apply10 t0@@83 t1@@59 t2@@36 t3@@21 t4@@21 t5@@6 t6@@6 t7@@6 t8@@6 t9@@6 t10@@6 h1@@28 f@@57 bx0@@48 bx1@@34 bx2@@20 bx3@@20 bx4@@6 bx5@@6 bx6@@6 bx7@@6 bx8@@6 bx9@@6)) )))
(assert (forall ((t0@@84 T@U) (t1@@60 T@U) (t2@@37 T@U) (t3@@22 T@U) (t4@@22 T@U) (t5@@7 T@U) (t6@@7 T@U) (t7@@7 T@U) (t8@@7 T@U) (t9@@7 T@U) (t10@@7 T@U) (h0@@29 T@U) (h1@@29 T@U) (f@@58 T@U) (bx0@@49 T@U) (bx1@@35 T@U) (bx2@@21 T@U) (bx3@@21 T@U) (bx4@@7 T@U) (bx5@@7 T@U) (bx6@@7 T@U) (bx7@@7 T@U) (bx8@@7 T@U) (bx9@@7 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@84) TyType) (= (type t1@@60) TyType)) (= (type t2@@37) TyType)) (= (type t3@@22) TyType)) (= (type t4@@22) TyType)) (= (type t5@@7) TyType)) (= (type t6@@7) TyType)) (= (type t7@@7) TyType)) (= (type t8@@7) TyType)) (= (type t9@@7) TyType)) (= (type t10@@7) TyType)) (= (type h0@@29) (MapType0Type refType MapType1Type))) (= (type h1@@29) (MapType0Type refType MapType1Type))) (= (type f@@58) HandleTypeType)) (= (type bx0@@49) BoxType)) (= (type bx1@@35) BoxType)) (= (type bx2@@21) BoxType)) (= (type bx3@@21) BoxType)) (= (type bx4@@7) BoxType)) (= (type bx5@@7) BoxType)) (= (type bx6@@7) BoxType)) (= (type bx7@@7) BoxType)) (= (type bx8@@7) BoxType)) (= (type bx9@@7) BoxType)) (and (and (and ($HeapSucc h0@@29 h1@@29) (and ($IsGoodHeap h0@@29) ($IsGoodHeap h1@@29))) (and (and (and (and (and (and (and (and (and (and ($IsBox bx0@@49 t0@@84) ($IsBox bx1@@35 t1@@60)) ($IsBox bx2@@21 t2@@37)) ($IsBox bx3@@21 t3@@22)) ($IsBox bx4@@7 t4@@22)) ($IsBox bx5@@7 t5@@7)) ($IsBox bx6@@7 t6@@7)) ($IsBox bx7@@7 t7@@7)) ($IsBox bx8@@7 t8@@7)) ($IsBox bx9@@7 t9@@7)) ($Is f@@58 (Tclass._System.___hFunc10 t0@@84 t1@@60 t2@@37 t3@@22 t4@@22 t5@@7 t6@@7 t7@@7 t8@@7 t9@@7 t10@@7)))) (forall ((o@@73 T@U) (fld@@28 T@U) ) (! (let ((a@@111 (FieldTypeInv0 (type fld@@28)))) (=> (and (and (= (type o@@73) refType) (= (type fld@@28) (FieldType a@@111))) (and (not (= o@@73 null)) (U_2_bool (MapType0Select (Reads10 t0@@84 t1@@60 t2@@37 t3@@22 t4@@22 t5@@7 t6@@7 t7@@7 t8@@7 t9@@7 t10@@7 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@21 bx4@@7 bx5@@7 bx6@@7 bx7@@7 bx8@@7 bx9@@7) ($Box o@@73))))) (= (MapType1Select (MapType0Select h0@@29 o@@73) fld@@28) (MapType1Select (MapType0Select h1@@29 o@@73) fld@@28)))) :qid |unknown.0:0| :skolemid |936| :no-pattern (type o@@73) :no-pattern (type fld@@28) :no-pattern (U_2_int o@@73) :no-pattern (U_2_bool o@@73) :no-pattern (U_2_int fld@@28) :no-pattern (U_2_bool fld@@28) )))) (= (Apply10 t0@@84 t1@@60 t2@@37 t3@@22 t4@@22 t5@@7 t6@@7 t7@@7 t8@@7 t9@@7 t10@@7 h0@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@21 bx4@@7 bx5@@7 bx6@@7 bx7@@7 bx8@@7 bx9@@7) (Apply10 t0@@84 t1@@60 t2@@37 t3@@22 t4@@22 t5@@7 t6@@7 t7@@7 t8@@7 t9@@7 t10@@7 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@21 bx4@@7 bx5@@7 bx6@@7 bx7@@7 bx8@@7 bx9@@7))) :qid |unknown.0:0| :skolemid |937| :pattern ( ($HeapSucc h0@@29 h1@@29) (Apply10 t0@@84 t1@@60 t2@@37 t3@@22 t4@@22 t5@@7 t6@@7 t7@@7 t8@@7 t9@@7 t10@@7 h1@@29 f@@58 bx0@@49 bx1@@35 bx2@@21 bx3@@21 bx4@@7 bx5@@7 bx6@@7 bx7@@7 bx8@@7 bx9@@7)) )))
(assert (forall ((t0@@85 T@U) (t1@@61 T@U) (t2@@38 T@U) (t3@@23 T@U) (t4@@23 T@U) (t5@@8 T@U) (t6@@8 T@U) (t7@@8 T@U) (t8@@8 T@U) (t9@@8 T@U) (t10@@8 T@U) (heap@@24 T@U) (f@@59 T@U) (bx0@@50 T@U) (bx1@@36 T@U) (bx2@@22 T@U) (bx3@@22 T@U) (bx4@@8 T@U) (bx5@@8 T@U) (bx6@@8 T@U) (bx7@@8 T@U) (bx8@@8 T@U) (bx9@@8 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@85) TyType) (= (type t1@@61) TyType)) (= (type t2@@38) TyType)) (= (type t3@@23) TyType)) (= (type t4@@23) TyType)) (= (type t5@@8) TyType)) (= (type t6@@8) TyType)) (= (type t7@@8) TyType)) (= (type t8@@8) TyType)) (= (type t9@@8) TyType)) (= (type t10@@8) TyType)) (= (type heap@@24) (MapType0Type refType MapType1Type))) (= (type f@@59) HandleTypeType)) (= (type bx0@@50) BoxType)) (= (type bx1@@36) BoxType)) (= (type bx2@@22) BoxType)) (= (type bx3@@22) BoxType)) (= (type bx4@@8) BoxType)) (= (type bx5@@8) BoxType)) (= (type bx6@@8) BoxType)) (= (type bx7@@8) BoxType)) (= (type bx8@@8) BoxType)) (= (type bx9@@8) BoxType)) (and ($IsGoodHeap heap@@24) (and (and (and (and (and (and (and (and (and (and ($IsBox bx0@@50 t0@@85) ($IsBox bx1@@36 t1@@61)) ($IsBox bx2@@22 t2@@38)) ($IsBox bx3@@22 t3@@23)) ($IsBox bx4@@8 t4@@23)) ($IsBox bx5@@8 t5@@8)) ($IsBox bx6@@8 t6@@8)) ($IsBox bx7@@8 t7@@8)) ($IsBox bx8@@8 t8@@8)) ($IsBox bx9@@8 t9@@8)) ($Is f@@59 (Tclass._System.___hFunc10 t0@@85 t1@@61 t2@@38 t3@@23 t4@@23 t5@@8 t6@@8 t7@@8 t8@@8 t9@@8 t10@@8))))) (= (|Set#Equal| (Reads10 t0@@85 t1@@61 t2@@38 t3@@23 t4@@23 t5@@8 t6@@8 t7@@8 t8@@8 t9@@8 t10@@8 $OneHeap f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@22 bx4@@8 bx5@@8 bx6@@8 bx7@@8 bx8@@8 bx9@@8) (|Set#Empty| BoxType)) (|Set#Equal| (Reads10 t0@@85 t1@@61 t2@@38 t3@@23 t4@@23 t5@@8 t6@@8 t7@@8 t8@@8 t9@@8 t10@@8 heap@@24 f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@22 bx4@@8 bx5@@8 bx6@@8 bx7@@8 bx8@@8 bx9@@8) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |938| :pattern ( (Reads10 t0@@85 t1@@61 t2@@38 t3@@23 t4@@23 t5@@8 t6@@8 t7@@8 t8@@8 t9@@8 t10@@8 $OneHeap f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@22 bx4@@8 bx5@@8 bx6@@8 bx7@@8 bx8@@8 bx9@@8) ($IsGoodHeap heap@@24)) :pattern ( (Reads10 t0@@85 t1@@61 t2@@38 t3@@23 t4@@23 t5@@8 t6@@8 t7@@8 t8@@8 t9@@8 t10@@8 heap@@24 f@@59 bx0@@50 bx1@@36 bx2@@22 bx3@@22 bx4@@8 bx5@@8 bx6@@8 bx7@@8 bx8@@8 bx9@@8)) )))
(assert (forall ((t0@@86 T@U) (t1@@62 T@U) (t2@@39 T@U) (t3@@24 T@U) (t4@@24 T@U) (t5@@9 T@U) (t6@@9 T@U) (t7@@9 T@U) (t8@@9 T@U) (t9@@9 T@U) (t10@@9 T@U) (heap@@25 T@U) (f@@60 T@U) (bx0@@51 T@U) (bx1@@37 T@U) (bx2@@23 T@U) (bx3@@23 T@U) (bx4@@9 T@U) (bx5@@9 T@U) (bx6@@9 T@U) (bx7@@9 T@U) (bx8@@9 T@U) (bx9@@9 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@86) TyType) (= (type t1@@62) TyType)) (= (type t2@@39) TyType)) (= (type t3@@24) TyType)) (= (type t4@@24) TyType)) (= (type t5@@9) TyType)) (= (type t6@@9) TyType)) (= (type t7@@9) TyType)) (= (type t8@@9) TyType)) (= (type t9@@9) TyType)) (= (type t10@@9) TyType)) (= (type heap@@25) (MapType0Type refType MapType1Type))) (= (type f@@60) HandleTypeType)) (= (type bx0@@51) BoxType)) (= (type bx1@@37) BoxType)) (= (type bx2@@23) BoxType)) (= (type bx3@@23) BoxType)) (= (type bx4@@9) BoxType)) (= (type bx5@@9) BoxType)) (= (type bx6@@9) BoxType)) (= (type bx7@@9) BoxType)) (= (type bx8@@9) BoxType)) (= (type bx9@@9) BoxType)) (and (and ($IsGoodHeap heap@@25) (and (and (and (and (and (and (and (and (and (and ($IsBox bx0@@51 t0@@86) ($IsBox bx1@@37 t1@@62)) ($IsBox bx2@@23 t2@@39)) ($IsBox bx3@@23 t3@@24)) ($IsBox bx4@@9 t4@@24)) ($IsBox bx5@@9 t5@@9)) ($IsBox bx6@@9 t6@@9)) ($IsBox bx7@@9 t7@@9)) ($IsBox bx8@@9 t8@@9)) ($IsBox bx9@@9 t9@@9)) ($Is f@@60 (Tclass._System.___hFunc10 t0@@86 t1@@62 t2@@39 t3@@24 t4@@24 t5@@9 t6@@9 t7@@9 t8@@9 t9@@9 t10@@9)))) (|Set#Equal| (Reads10 t0@@86 t1@@62 t2@@39 t3@@24 t4@@24 t5@@9 t6@@9 t7@@9 t8@@9 t9@@9 t10@@9 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@23 bx4@@9 bx5@@9 bx6@@9 bx7@@9 bx8@@9 bx9@@9) (|Set#Empty| BoxType)))) (= (Requires10 t0@@86 t1@@62 t2@@39 t3@@24 t4@@24 t5@@9 t6@@9 t7@@9 t8@@9 t9@@9 t10@@9 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@23 bx4@@9 bx5@@9 bx6@@9 bx7@@9 bx8@@9 bx9@@9) (Requires10 t0@@86 t1@@62 t2@@39 t3@@24 t4@@24 t5@@9 t6@@9 t7@@9 t8@@9 t9@@9 t10@@9 heap@@25 f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@23 bx4@@9 bx5@@9 bx6@@9 bx7@@9 bx8@@9 bx9@@9))) :qid |unknown.0:0| :skolemid |939| :pattern ( (Requires10 t0@@86 t1@@62 t2@@39 t3@@24 t4@@24 t5@@9 t6@@9 t7@@9 t8@@9 t9@@9 t10@@9 $OneHeap f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@23 bx4@@9 bx5@@9 bx6@@9 bx7@@9 bx8@@9 bx9@@9) ($IsGoodHeap heap@@25)) :pattern ( (Requires10 t0@@86 t1@@62 t2@@39 t3@@24 t4@@24 t5@@9 t6@@9 t7@@9 t8@@9 t9@@9 t10@@9 heap@@25 f@@60 bx0@@51 bx1@@37 bx2@@23 bx3@@23 bx4@@9 bx5@@9 bx6@@9 bx7@@9 bx8@@9 bx9@@9)) )))
(assert (forall ((f@@61 T@U) (t0@@87 T@U) (t1@@63 T@U) (t2@@40 T@U) (t3@@25 T@U) (t4@@25 T@U) (t5@@10 T@U) (t6@@10 T@U) (t7@@10 T@U) (t8@@10 T@U) (t9@@10 T@U) (t10@@10 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type f@@61) HandleTypeType) (= (type t0@@87) TyType)) (= (type t1@@63) TyType)) (= (type t2@@40) TyType)) (= (type t3@@25) TyType)) (= (type t4@@25) TyType)) (= (type t5@@10) TyType)) (= (type t6@@10) TyType)) (= (type t7@@10) TyType)) (= (type t8@@10) TyType)) (= (type t9@@10) TyType)) (= (type t10@@10) TyType)) (= ($Is f@@61 (Tclass._System.___hFunc10 t0@@87 t1@@63 t2@@40 t3@@25 t4@@25 t5@@10 t6@@10 t7@@10 t8@@10 t9@@10 t10@@10)) (forall ((h@@48 T@U) (bx0@@52 T@U) (bx1@@38 T@U) (bx2@@24 T@U) (bx3@@24 T@U) (bx4@@10 T@U) (bx5@@10 T@U) (bx6@@10 T@U) (bx7@@10 T@U) (bx8@@10 T@U) (bx9@@10 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type h@@48) (MapType0Type refType MapType1Type)) (= (type bx0@@52) BoxType)) (= (type bx1@@38) BoxType)) (= (type bx2@@24) BoxType)) (= (type bx3@@24) BoxType)) (= (type bx4@@10) BoxType)) (= (type bx5@@10) BoxType)) (= (type bx6@@10) BoxType)) (= (type bx7@@10) BoxType)) (= (type bx8@@10) BoxType)) (= (type bx9@@10) BoxType)) (and (and ($IsGoodHeap h@@48) (and (and (and (and (and (and (and (and (and ($IsBox bx0@@52 t0@@87) ($IsBox bx1@@38 t1@@63)) ($IsBox bx2@@24 t2@@40)) ($IsBox bx3@@24 t3@@25)) ($IsBox bx4@@10 t4@@25)) ($IsBox bx5@@10 t5@@10)) ($IsBox bx6@@10 t6@@10)) ($IsBox bx7@@10 t7@@10)) ($IsBox bx8@@10 t8@@10)) ($IsBox bx9@@10 t9@@10))) (Requires10 t0@@87 t1@@63 t2@@40 t3@@25 t4@@25 t5@@10 t6@@10 t7@@10 t8@@10 t9@@10 t10@@10 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24 bx3@@24 bx4@@10 bx5@@10 bx6@@10 bx7@@10 bx8@@10 bx9@@10))) ($IsBox (Apply10 t0@@87 t1@@63 t2@@40 t3@@25 t4@@25 t5@@10 t6@@10 t7@@10 t8@@10 t9@@10 t10@@10 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24 bx3@@24 bx4@@10 bx5@@10 bx6@@10 bx7@@10 bx8@@10 bx9@@10) t10@@10)) :qid |DafnyPreludebpl.545:12| :skolemid |940| :pattern ( (Apply10 t0@@87 t1@@63 t2@@40 t3@@25 t4@@25 t5@@10 t6@@10 t7@@10 t8@@10 t9@@10 t10@@10 h@@48 f@@61 bx0@@52 bx1@@38 bx2@@24 bx3@@24 bx4@@10 bx5@@10 bx6@@10 bx7@@10 bx8@@10 bx9@@10)) )))) :qid |unknown.0:0| :skolemid |941| :pattern ( ($Is f@@61 (Tclass._System.___hFunc10 t0@@87 t1@@63 t2@@40 t3@@25 t4@@25 t5@@10 t6@@10 t7@@10 t8@@10 t9@@10 t10@@10))) )))
(assert (forall ((f@@62 T@U) (t0@@88 T@U) (t1@@64 T@U) (t2@@41 T@U) (t3@@26 T@U) (t4@@26 T@U) (t5@@11 T@U) (t6@@11 T@U) (t7@@11 T@U) (t8@@11 T@U) (t9@@11 T@U) (t10@@11 T@U) (u0@@3 T@U) (u1@@2 T@U) (u2@@1 T@U) (u3@@0 T@U) (u4@@0 T@U) (u5 T@U) (u6 T@U) (u7 T@U) (u8 T@U) (u9 T@U) (u10 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type f@@62) HandleTypeType) (= (type t0@@88) TyType)) (= (type t1@@64) TyType)) (= (type t2@@41) TyType)) (= (type t3@@26) TyType)) (= (type t4@@26) TyType)) (= (type t5@@11) TyType)) (= (type t6@@11) TyType)) (= (type t7@@11) TyType)) (= (type t8@@11) TyType)) (= (type t9@@11) TyType)) (= (type t10@@11) TyType)) (= (type u0@@3) TyType)) (= (type u1@@2) TyType)) (= (type u2@@1) TyType)) (= (type u3@@0) TyType)) (= (type u4@@0) TyType)) (= (type u5) TyType)) (= (type u6) TyType)) (= (type u7) TyType)) (= (type u8) TyType)) (= (type u9) TyType)) (= (type u10) TyType)) (and (and (and (and (and (and (and (and (and (and (and ($Is f@@62 (Tclass._System.___hFunc10 t0@@88 t1@@64 t2@@41 t3@@26 t4@@26 t5@@11 t6@@11 t7@@11 t8@@11 t9@@11 t10@@11)) (forall ((bx@@61 T@U) ) (!  (=> (and (= (type bx@@61) BoxType) ($IsBox bx@@61 u0@@3)) ($IsBox bx@@61 t0@@88)) :qid |unknown.0:0| :skolemid |942| :pattern ( ($IsBox bx@@61 u0@@3)) :pattern ( ($IsBox bx@@61 t0@@88)) ))) (forall ((bx@@62 T@U) ) (!  (=> (and (= (type bx@@62) BoxType) ($IsBox bx@@62 u1@@2)) ($IsBox bx@@62 t1@@64)) :qid |unknown.0:0| :skolemid |943| :pattern ( ($IsBox bx@@62 u1@@2)) :pattern ( ($IsBox bx@@62 t1@@64)) ))) (forall ((bx@@63 T@U) ) (!  (=> (and (= (type bx@@63) BoxType) ($IsBox bx@@63 u2@@1)) ($IsBox bx@@63 t2@@41)) :qid |unknown.0:0| :skolemid |944| :pattern ( ($IsBox bx@@63 u2@@1)) :pattern ( ($IsBox bx@@63 t2@@41)) ))) (forall ((bx@@64 T@U) ) (!  (=> (and (= (type bx@@64) BoxType) ($IsBox bx@@64 u3@@0)) ($IsBox bx@@64 t3@@26)) :qid |unknown.0:0| :skolemid |945| :pattern ( ($IsBox bx@@64 u3@@0)) :pattern ( ($IsBox bx@@64 t3@@26)) ))) (forall ((bx@@65 T@U) ) (!  (=> (and (= (type bx@@65) BoxType) ($IsBox bx@@65 u4@@0)) ($IsBox bx@@65 t4@@26)) :qid |unknown.0:0| :skolemid |946| :pattern ( ($IsBox bx@@65 u4@@0)) :pattern ( ($IsBox bx@@65 t4@@26)) ))) (forall ((bx@@66 T@U) ) (!  (=> (and (= (type bx@@66) BoxType) ($IsBox bx@@66 u5)) ($IsBox bx@@66 t5@@11)) :qid |unknown.0:0| :skolemid |947| :pattern ( ($IsBox bx@@66 u5)) :pattern ( ($IsBox bx@@66 t5@@11)) ))) (forall ((bx@@67 T@U) ) (!  (=> (and (= (type bx@@67) BoxType) ($IsBox bx@@67 u6)) ($IsBox bx@@67 t6@@11)) :qid |unknown.0:0| :skolemid |948| :pattern ( ($IsBox bx@@67 u6)) :pattern ( ($IsBox bx@@67 t6@@11)) ))) (forall ((bx@@68 T@U) ) (!  (=> (and (= (type bx@@68) BoxType) ($IsBox bx@@68 u7)) ($IsBox bx@@68 t7@@11)) :qid |unknown.0:0| :skolemid |949| :pattern ( ($IsBox bx@@68 u7)) :pattern ( ($IsBox bx@@68 t7@@11)) ))) (forall ((bx@@69 T@U) ) (!  (=> (and (= (type bx@@69) BoxType) ($IsBox bx@@69 u8)) ($IsBox bx@@69 t8@@11)) :qid |unknown.0:0| :skolemid |950| :pattern ( ($IsBox bx@@69 u8)) :pattern ( ($IsBox bx@@69 t8@@11)) ))) (forall ((bx@@70 T@U) ) (!  (=> (and (= (type bx@@70) BoxType) ($IsBox bx@@70 u9)) ($IsBox bx@@70 t9@@11)) :qid |unknown.0:0| :skolemid |951| :pattern ( ($IsBox bx@@70 u9)) :pattern ( ($IsBox bx@@70 t9@@11)) ))) (forall ((bx@@71 T@U) ) (!  (=> (and (= (type bx@@71) BoxType) ($IsBox bx@@71 t10@@11)) ($IsBox bx@@71 u10)) :qid |unknown.0:0| :skolemid |952| :pattern ( ($IsBox bx@@71 t10@@11)) :pattern ( ($IsBox bx@@71 u10)) )))) ($Is f@@62 (Tclass._System.___hFunc10 u0@@3 u1@@2 u2@@1 u3@@0 u4@@0 u5 u6 u7 u8 u9 u10))) :qid |unknown.0:0| :skolemid |953| :pattern ( ($Is f@@62 (Tclass._System.___hFunc10 t0@@88 t1@@64 t2@@41 t3@@26 t4@@26 t5@@11 t6@@11 t7@@11 t8@@11 t9@@11 t10@@11)) ($Is f@@62 (Tclass._System.___hFunc10 u0@@3 u1@@2 u2@@1 u3@@0 u4@@0 u5 u6 u7 u8 u9 u10))) )))
(assert (forall ((f@@63 T@U) (t0@@89 T@U) (t1@@65 T@U) (t2@@42 T@U) (t3@@27 T@U) (t4@@27 T@U) (t5@@12 T@U) (t6@@12 T@U) (t7@@12 T@U) (t8@@12 T@U) (t9@@12 T@U) (t10@@12 T@U) (h@@49 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type f@@63) HandleTypeType) (= (type t0@@89) TyType)) (= (type t1@@65) TyType)) (= (type t2@@42) TyType)) (= (type t3@@27) TyType)) (= (type t4@@27) TyType)) (= (type t5@@12) TyType)) (= (type t6@@12) TyType)) (= (type t7@@12) TyType)) (= (type t8@@12) TyType)) (= (type t9@@12) TyType)) (= (type t10@@12) TyType)) (= (type h@@49) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@49)) (= ($IsAlloc f@@63 (Tclass._System.___hFunc10 t0@@89 t1@@65 t2@@42 t3@@27 t4@@27 t5@@12 t6@@12 t7@@12 t8@@12 t9@@12 t10@@12) h@@49) (forall ((bx0@@53 T@U) (bx1@@39 T@U) (bx2@@25 T@U) (bx3@@25 T@U) (bx4@@11 T@U) (bx5@@11 T@U) (bx6@@11 T@U) (bx7@@11 T@U) (bx8@@11 T@U) (bx9@@11 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type bx0@@53) BoxType) (= (type bx1@@39) BoxType)) (= (type bx2@@25) BoxType)) (= (type bx3@@25) BoxType)) (= (type bx4@@11) BoxType)) (= (type bx5@@11) BoxType)) (= (type bx6@@11) BoxType)) (= (type bx7@@11) BoxType)) (= (type bx8@@11) BoxType)) (= (type bx9@@11) BoxType)) (=> (and (and (and (and (and (and (and (and (and (and (and ($IsBox bx0@@53 t0@@89) ($IsAllocBox bx0@@53 t0@@89 h@@49)) (and ($IsBox bx1@@39 t1@@65) ($IsAllocBox bx1@@39 t1@@65 h@@49))) (and ($IsBox bx2@@25 t2@@42) ($IsAllocBox bx2@@25 t2@@42 h@@49))) (and ($IsBox bx3@@25 t3@@27) ($IsAllocBox bx3@@25 t3@@27 h@@49))) (and ($IsBox bx4@@11 t4@@27) ($IsAllocBox bx4@@11 t4@@27 h@@49))) (and ($IsBox bx5@@11 t5@@12) ($IsAllocBox bx5@@11 t5@@12 h@@49))) (and ($IsBox bx6@@11 t6@@12) ($IsAllocBox bx6@@11 t6@@12 h@@49))) (and ($IsBox bx7@@11 t7@@12) ($IsAllocBox bx7@@11 t7@@12 h@@49))) (and ($IsBox bx8@@11 t8@@12) ($IsAllocBox bx8@@11 t8@@12 h@@49))) (and ($IsBox bx9@@11 t9@@12) ($IsAllocBox bx9@@11 t9@@12 h@@49))) (Requires10 t0@@89 t1@@65 t2@@42 t3@@27 t4@@27 t5@@12 t6@@12 t7@@12 t8@@12 t9@@12 t10@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@25 bx4@@11 bx5@@11 bx6@@11 bx7@@11 bx8@@11 bx9@@11)) (forall ((r@@25 T@U) ) (!  (=> (= (type r@@25) refType) (=> (and (not (= r@@25 null)) (U_2_bool (MapType0Select (Reads10 t0@@89 t1@@65 t2@@42 t3@@27 t4@@27 t5@@12 t6@@12 t7@@12 t8@@12 t9@@12 t10@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@25 bx4@@11 bx5@@11 bx6@@11 bx7@@11 bx8@@11 bx9@@11) ($Box r@@25)))) (U_2_bool (MapType1Select (MapType0Select h@@49 r@@25) alloc)))) :qid |unknown.0:0| :skolemid |954| :pattern ( (MapType0Select (Reads10 t0@@89 t1@@65 t2@@42 t3@@27 t4@@27 t5@@12 t6@@12 t7@@12 t8@@12 t9@@12 t10@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@25 bx4@@11 bx5@@11 bx6@@11 bx7@@11 bx8@@11 bx9@@11) ($Box r@@25))) )))) :qid |unknown.0:0| :skolemid |955| :pattern ( (Apply10 t0@@89 t1@@65 t2@@42 t3@@27 t4@@27 t5@@12 t6@@12 t7@@12 t8@@12 t9@@12 t10@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@25 bx4@@11 bx5@@11 bx6@@11 bx7@@11 bx8@@11 bx9@@11)) :pattern ( (Reads10 t0@@89 t1@@65 t2@@42 t3@@27 t4@@27 t5@@12 t6@@12 t7@@12 t8@@12 t9@@12 t10@@12 h@@49 f@@63 bx0@@53 bx1@@39 bx2@@25 bx3@@25 bx4@@11 bx5@@11 bx6@@11 bx7@@11 bx8@@11 bx9@@11)) )))) :qid |unknown.0:0| :skolemid |956| :pattern ( ($IsAlloc f@@63 (Tclass._System.___hFunc10 t0@@89 t1@@65 t2@@42 t3@@27 t4@@27 t5@@12 t6@@12 t7@@12 t8@@12 t9@@12 t10@@12) h@@49)) )))
(assert (forall ((f@@64 T@U) (t0@@90 T@U) (t1@@66 T@U) (t2@@43 T@U) (t3@@28 T@U) (t4@@28 T@U) (t5@@13 T@U) (t6@@13 T@U) (t7@@13 T@U) (t8@@13 T@U) (t9@@13 T@U) (t10@@13 T@U) (h@@50 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type f@@64) HandleTypeType) (= (type t0@@90) TyType)) (= (type t1@@66) TyType)) (= (type t2@@43) TyType)) (= (type t3@@28) TyType)) (= (type t4@@28) TyType)) (= (type t5@@13) TyType)) (= (type t6@@13) TyType)) (= (type t7@@13) TyType)) (= (type t8@@13) TyType)) (= (type t9@@13) TyType)) (= (type t10@@13) TyType)) (= (type h@@50) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@50) ($IsAlloc f@@64 (Tclass._System.___hFunc10 t0@@90 t1@@66 t2@@43 t3@@28 t4@@28 t5@@13 t6@@13 t7@@13 t8@@13 t9@@13 t10@@13) h@@50))) (forall ((bx0@@54 T@U) (bx1@@40 T@U) (bx2@@26 T@U) (bx3@@26 T@U) (bx4@@12 T@U) (bx5@@12 T@U) (bx6@@12 T@U) (bx7@@12 T@U) (bx8@@12 T@U) (bx9@@12 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type bx0@@54) BoxType) (= (type bx1@@40) BoxType)) (= (type bx2@@26) BoxType)) (= (type bx3@@26) BoxType)) (= (type bx4@@12) BoxType)) (= (type bx5@@12) BoxType)) (= (type bx6@@12) BoxType)) (= (type bx7@@12) BoxType)) (= (type bx8@@12) BoxType)) (= (type bx9@@12) BoxType)) (=> (and (and (and (and (and (and (and (and (and (and ($IsAllocBox bx0@@54 t0@@90 h@@50) ($IsAllocBox bx1@@40 t1@@66 h@@50)) ($IsAllocBox bx2@@26 t2@@43 h@@50)) ($IsAllocBox bx3@@26 t3@@28 h@@50)) ($IsAllocBox bx4@@12 t4@@28 h@@50)) ($IsAllocBox bx5@@12 t5@@13 h@@50)) ($IsAllocBox bx6@@12 t6@@13 h@@50)) ($IsAllocBox bx7@@12 t7@@13 h@@50)) ($IsAllocBox bx8@@12 t8@@13 h@@50)) ($IsAllocBox bx9@@12 t9@@13 h@@50)) (Requires10 t0@@90 t1@@66 t2@@43 t3@@28 t4@@28 t5@@13 t6@@13 t7@@13 t8@@13 t9@@13 t10@@13 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26 bx3@@26 bx4@@12 bx5@@12 bx6@@12 bx7@@12 bx8@@12 bx9@@12)) ($IsAllocBox (Apply10 t0@@90 t1@@66 t2@@43 t3@@28 t4@@28 t5@@13 t6@@13 t7@@13 t8@@13 t9@@13 t10@@13 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26 bx3@@26 bx4@@12 bx5@@12 bx6@@12 bx7@@12 bx8@@12 bx9@@12) t10@@13 h@@50))) :qid |unknown.0:0| :skolemid |957| :pattern ( (Apply10 t0@@90 t1@@66 t2@@43 t3@@28 t4@@28 t5@@13 t6@@13 t7@@13 t8@@13 t9@@13 t10@@13 h@@50 f@@64 bx0@@54 bx1@@40 bx2@@26 bx3@@26 bx4@@12 bx5@@12 bx6@@12 bx7@@12 bx8@@12 bx9@@12)) ))) :qid |unknown.0:0| :skolemid |958| :pattern ( ($IsAlloc f@@64 (Tclass._System.___hFunc10 t0@@90 t1@@66 t2@@43 t3@@28 t4@@28 t5@@13 t6@@13 t7@@13 t8@@13 t9@@13 t10@@13) h@@50)) )))
(assert (forall ((arg0@@227 T@U) (arg1@@114 T@U) (arg2@@66 T@U) (arg3@@44 T@U) (arg4@@36 T@U) (arg5@@30 T@U) (arg6@@22 T@U) (arg7@@19 T@U) (arg8@@19 T@U) (arg9@@19 T@U) (arg10@@19 T@U) ) (! (= (type (Tclass._System.___hPartialFunc10 arg0@@227 arg1@@114 arg2@@66 arg3@@44 arg4@@36 arg5@@30 arg6@@22 arg7@@19 arg8@@19 arg9@@19 arg10@@19)) TyType) :qid |funType:Tclass._System.___hPartialFunc10| :pattern ( (Tclass._System.___hPartialFunc10 arg0@@227 arg1@@114 arg2@@66 arg3@@44 arg4@@36 arg5@@30 arg6@@22 arg7@@19 arg8@@19 arg9@@19 arg10@@19)) )))
(assert (forall ((|#$T0@@72| T@U) (|#$T1@@56| T@U) (|#$T2@@37| T@U) (|#$T3@@37| T@U) (|#$T4@@12| T@U) (|#$T5@@12| T@U) (|#$T6@@12| T@U) (|#$T7@@12| T@U) (|#$T8@@12| T@U) (|#$T9@@12| T@U) (|#$R@@85| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@72|) TyType) (= (type |#$T1@@56|) TyType)) (= (type |#$T2@@37|) TyType)) (= (type |#$T3@@37|) TyType)) (= (type |#$T4@@12|) TyType)) (= (type |#$T5@@12|) TyType)) (= (type |#$T6@@12|) TyType)) (= (type |#$T7@@12|) TyType)) (= (type |#$T8@@12|) TyType)) (= (type |#$T9@@12|) TyType)) (= (type |#$R@@85|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc10 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@37| |#$T4@@12| |#$T5@@12| |#$T6@@12| |#$T7@@12| |#$T8@@12| |#$T9@@12| |#$R@@85|)) Tagclass._System.___hPartialFunc10) (= (TagFamily (Tclass._System.___hPartialFunc10 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@37| |#$T4@@12| |#$T5@@12| |#$T6@@12| |#$T7@@12| |#$T8@@12| |#$T9@@12| |#$R@@85|)) |tytagFamily$_#PartialFunc10|))) :qid |unknown.0:0| :skolemid |959| :pattern ( (Tclass._System.___hPartialFunc10 |#$T0@@72| |#$T1@@56| |#$T2@@37| |#$T3@@37| |#$T4@@12| |#$T5@@12| |#$T6@@12| |#$T7@@12| |#$T8@@12| |#$T9@@12| |#$R@@85|)) )))
(assert (forall ((arg0@@228 T@U) ) (! (= (type (Tclass._System.___hPartialFunc10_0 arg0@@228)) TyType) :qid |funType:Tclass._System.___hPartialFunc10_0| :pattern ( (Tclass._System.___hPartialFunc10_0 arg0@@228)) )))
(assert (forall ((|#$T0@@73| T@U) (|#$T1@@57| T@U) (|#$T2@@38| T@U) (|#$T3@@38| T@U) (|#$T4@@13| T@U) (|#$T5@@13| T@U) (|#$T6@@13| T@U) (|#$T7@@13| T@U) (|#$T8@@13| T@U) (|#$T9@@13| T@U) (|#$R@@86| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@73|) TyType) (= (type |#$T1@@57|) TyType)) (= (type |#$T2@@38|) TyType)) (= (type |#$T3@@38|) TyType)) (= (type |#$T4@@13|) TyType)) (= (type |#$T5@@13|) TyType)) (= (type |#$T6@@13|) TyType)) (= (type |#$T7@@13|) TyType)) (= (type |#$T8@@13|) TyType)) (= (type |#$T9@@13|) TyType)) (= (type |#$R@@86|) TyType)) (= (Tclass._System.___hPartialFunc10_0 (Tclass._System.___hPartialFunc10 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$T3@@38| |#$T4@@13| |#$T5@@13| |#$T6@@13| |#$T7@@13| |#$T8@@13| |#$T9@@13| |#$R@@86|)) |#$T0@@73|)) :qid |unknown.0:0| :skolemid |960| :pattern ( (Tclass._System.___hPartialFunc10 |#$T0@@73| |#$T1@@57| |#$T2@@38| |#$T3@@38| |#$T4@@13| |#$T5@@13| |#$T6@@13| |#$T7@@13| |#$T8@@13| |#$T9@@13| |#$R@@86|)) )))
(assert (forall ((arg0@@229 T@U) ) (! (= (type (Tclass._System.___hPartialFunc10_1 arg0@@229)) TyType) :qid |funType:Tclass._System.___hPartialFunc10_1| :pattern ( (Tclass._System.___hPartialFunc10_1 arg0@@229)) )))
(assert (forall ((|#$T0@@74| T@U) (|#$T1@@58| T@U) (|#$T2@@39| T@U) (|#$T3@@39| T@U) (|#$T4@@14| T@U) (|#$T5@@14| T@U) (|#$T6@@14| T@U) (|#$T7@@14| T@U) (|#$T8@@14| T@U) (|#$T9@@14| T@U) (|#$R@@87| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@74|) TyType) (= (type |#$T1@@58|) TyType)) (= (type |#$T2@@39|) TyType)) (= (type |#$T3@@39|) TyType)) (= (type |#$T4@@14|) TyType)) (= (type |#$T5@@14|) TyType)) (= (type |#$T6@@14|) TyType)) (= (type |#$T7@@14|) TyType)) (= (type |#$T8@@14|) TyType)) (= (type |#$T9@@14|) TyType)) (= (type |#$R@@87|) TyType)) (= (Tclass._System.___hPartialFunc10_1 (Tclass._System.___hPartialFunc10 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$T3@@39| |#$T4@@14| |#$T5@@14| |#$T6@@14| |#$T7@@14| |#$T8@@14| |#$T9@@14| |#$R@@87|)) |#$T1@@58|)) :qid |unknown.0:0| :skolemid |961| :pattern ( (Tclass._System.___hPartialFunc10 |#$T0@@74| |#$T1@@58| |#$T2@@39| |#$T3@@39| |#$T4@@14| |#$T5@@14| |#$T6@@14| |#$T7@@14| |#$T8@@14| |#$T9@@14| |#$R@@87|)) )))
(assert (forall ((arg0@@230 T@U) ) (! (= (type (Tclass._System.___hPartialFunc10_2 arg0@@230)) TyType) :qid |funType:Tclass._System.___hPartialFunc10_2| :pattern ( (Tclass._System.___hPartialFunc10_2 arg0@@230)) )))
(assert (forall ((|#$T0@@75| T@U) (|#$T1@@59| T@U) (|#$T2@@40| T@U) (|#$T3@@40| T@U) (|#$T4@@15| T@U) (|#$T5@@15| T@U) (|#$T6@@15| T@U) (|#$T7@@15| T@U) (|#$T8@@15| T@U) (|#$T9@@15| T@U) (|#$R@@88| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@75|) TyType) (= (type |#$T1@@59|) TyType)) (= (type |#$T2@@40|) TyType)) (= (type |#$T3@@40|) TyType)) (= (type |#$T4@@15|) TyType)) (= (type |#$T5@@15|) TyType)) (= (type |#$T6@@15|) TyType)) (= (type |#$T7@@15|) TyType)) (= (type |#$T8@@15|) TyType)) (= (type |#$T9@@15|) TyType)) (= (type |#$R@@88|) TyType)) (= (Tclass._System.___hPartialFunc10_2 (Tclass._System.___hPartialFunc10 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$T3@@40| |#$T4@@15| |#$T5@@15| |#$T6@@15| |#$T7@@15| |#$T8@@15| |#$T9@@15| |#$R@@88|)) |#$T2@@40|)) :qid |unknown.0:0| :skolemid |962| :pattern ( (Tclass._System.___hPartialFunc10 |#$T0@@75| |#$T1@@59| |#$T2@@40| |#$T3@@40| |#$T4@@15| |#$T5@@15| |#$T6@@15| |#$T7@@15| |#$T8@@15| |#$T9@@15| |#$R@@88|)) )))
(assert (forall ((arg0@@231 T@U) ) (! (= (type (Tclass._System.___hPartialFunc10_3 arg0@@231)) TyType) :qid |funType:Tclass._System.___hPartialFunc10_3| :pattern ( (Tclass._System.___hPartialFunc10_3 arg0@@231)) )))
(assert (forall ((|#$T0@@76| T@U) (|#$T1@@60| T@U) (|#$T2@@41| T@U) (|#$T3@@41| T@U) (|#$T4@@16| T@U) (|#$T5@@16| T@U) (|#$T6@@16| T@U) (|#$T7@@16| T@U) (|#$T8@@16| T@U) (|#$T9@@16| T@U) (|#$R@@89| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@76|) TyType) (= (type |#$T1@@60|) TyType)) (= (type |#$T2@@41|) TyType)) (= (type |#$T3@@41|) TyType)) (= (type |#$T4@@16|) TyType)) (= (type |#$T5@@16|) TyType)) (= (type |#$T6@@16|) TyType)) (= (type |#$T7@@16|) TyType)) (= (type |#$T8@@16|) TyType)) (= (type |#$T9@@16|) TyType)) (= (type |#$R@@89|) TyType)) (= (Tclass._System.___hPartialFunc10_3 (Tclass._System.___hPartialFunc10 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$T3@@41| |#$T4@@16| |#$T5@@16| |#$T6@@16| |#$T7@@16| |#$T8@@16| |#$T9@@16| |#$R@@89|)) |#$T3@@41|)) :qid |unknown.0:0| :skolemid |963| :pattern ( (Tclass._System.___hPartialFunc10 |#$T0@@76| |#$T1@@60| |#$T2@@41| |#$T3@@41| |#$T4@@16| |#$T5@@16| |#$T6@@16| |#$T7@@16| |#$T8@@16| |#$T9@@16| |#$R@@89|)) )))
(assert (forall ((arg0@@232 T@U) ) (! (= (type (Tclass._System.___hPartialFunc10_4 arg0@@232)) TyType) :qid |funType:Tclass._System.___hPartialFunc10_4| :pattern ( (Tclass._System.___hPartialFunc10_4 arg0@@232)) )))
(assert (forall ((|#$T0@@77| T@U) (|#$T1@@61| T@U) (|#$T2@@42| T@U) (|#$T3@@42| T@U) (|#$T4@@17| T@U) (|#$T5@@17| T@U) (|#$T6@@17| T@U) (|#$T7@@17| T@U) (|#$T8@@17| T@U) (|#$T9@@17| T@U) (|#$R@@90| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@77|) TyType) (= (type |#$T1@@61|) TyType)) (= (type |#$T2@@42|) TyType)) (= (type |#$T3@@42|) TyType)) (= (type |#$T4@@17|) TyType)) (= (type |#$T5@@17|) TyType)) (= (type |#$T6@@17|) TyType)) (= (type |#$T7@@17|) TyType)) (= (type |#$T8@@17|) TyType)) (= (type |#$T9@@17|) TyType)) (= (type |#$R@@90|) TyType)) (= (Tclass._System.___hPartialFunc10_4 (Tclass._System.___hPartialFunc10 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$T3@@42| |#$T4@@17| |#$T5@@17| |#$T6@@17| |#$T7@@17| |#$T8@@17| |#$T9@@17| |#$R@@90|)) |#$T4@@17|)) :qid |unknown.0:0| :skolemid |964| :pattern ( (Tclass._System.___hPartialFunc10 |#$T0@@77| |#$T1@@61| |#$T2@@42| |#$T3@@42| |#$T4@@17| |#$T5@@17| |#$T6@@17| |#$T7@@17| |#$T8@@17| |#$T9@@17| |#$R@@90|)) )))
(assert (forall ((arg0@@233 T@U) ) (! (= (type (Tclass._System.___hPartialFunc10_5 arg0@@233)) TyType) :qid |funType:Tclass._System.___hPartialFunc10_5| :pattern ( (Tclass._System.___hPartialFunc10_5 arg0@@233)) )))
(assert (forall ((|#$T0@@78| T@U) (|#$T1@@62| T@U) (|#$T2@@43| T@U) (|#$T3@@43| T@U) (|#$T4@@18| T@U) (|#$T5@@18| T@U) (|#$T6@@18| T@U) (|#$T7@@18| T@U) (|#$T8@@18| T@U) (|#$T9@@18| T@U) (|#$R@@91| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@78|) TyType) (= (type |#$T1@@62|) TyType)) (= (type |#$T2@@43|) TyType)) (= (type |#$T3@@43|) TyType)) (= (type |#$T4@@18|) TyType)) (= (type |#$T5@@18|) TyType)) (= (type |#$T6@@18|) TyType)) (= (type |#$T7@@18|) TyType)) (= (type |#$T8@@18|) TyType)) (= (type |#$T9@@18|) TyType)) (= (type |#$R@@91|) TyType)) (= (Tclass._System.___hPartialFunc10_5 (Tclass._System.___hPartialFunc10 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$T3@@43| |#$T4@@18| |#$T5@@18| |#$T6@@18| |#$T7@@18| |#$T8@@18| |#$T9@@18| |#$R@@91|)) |#$T5@@18|)) :qid |unknown.0:0| :skolemid |965| :pattern ( (Tclass._System.___hPartialFunc10 |#$T0@@78| |#$T1@@62| |#$T2@@43| |#$T3@@43| |#$T4@@18| |#$T5@@18| |#$T6@@18| |#$T7@@18| |#$T8@@18| |#$T9@@18| |#$R@@91|)) )))
(assert (forall ((arg0@@234 T@U) ) (! (= (type (Tclass._System.___hPartialFunc10_6 arg0@@234)) TyType) :qid |funType:Tclass._System.___hPartialFunc10_6| :pattern ( (Tclass._System.___hPartialFunc10_6 arg0@@234)) )))
(assert (forall ((|#$T0@@79| T@U) (|#$T1@@63| T@U) (|#$T2@@44| T@U) (|#$T3@@44| T@U) (|#$T4@@19| T@U) (|#$T5@@19| T@U) (|#$T6@@19| T@U) (|#$T7@@19| T@U) (|#$T8@@19| T@U) (|#$T9@@19| T@U) (|#$R@@92| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@79|) TyType) (= (type |#$T1@@63|) TyType)) (= (type |#$T2@@44|) TyType)) (= (type |#$T3@@44|) TyType)) (= (type |#$T4@@19|) TyType)) (= (type |#$T5@@19|) TyType)) (= (type |#$T6@@19|) TyType)) (= (type |#$T7@@19|) TyType)) (= (type |#$T8@@19|) TyType)) (= (type |#$T9@@19|) TyType)) (= (type |#$R@@92|) TyType)) (= (Tclass._System.___hPartialFunc10_6 (Tclass._System.___hPartialFunc10 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@44| |#$T4@@19| |#$T5@@19| |#$T6@@19| |#$T7@@19| |#$T8@@19| |#$T9@@19| |#$R@@92|)) |#$T6@@19|)) :qid |unknown.0:0| :skolemid |966| :pattern ( (Tclass._System.___hPartialFunc10 |#$T0@@79| |#$T1@@63| |#$T2@@44| |#$T3@@44| |#$T4@@19| |#$T5@@19| |#$T6@@19| |#$T7@@19| |#$T8@@19| |#$T9@@19| |#$R@@92|)) )))
(assert (forall ((arg0@@235 T@U) ) (! (= (type (Tclass._System.___hPartialFunc10_7 arg0@@235)) TyType) :qid |funType:Tclass._System.___hPartialFunc10_7| :pattern ( (Tclass._System.___hPartialFunc10_7 arg0@@235)) )))
(assert (forall ((|#$T0@@80| T@U) (|#$T1@@64| T@U) (|#$T2@@45| T@U) (|#$T3@@45| T@U) (|#$T4@@20| T@U) (|#$T5@@20| T@U) (|#$T6@@20| T@U) (|#$T7@@20| T@U) (|#$T8@@20| T@U) (|#$T9@@20| T@U) (|#$R@@93| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@80|) TyType) (= (type |#$T1@@64|) TyType)) (= (type |#$T2@@45|) TyType)) (= (type |#$T3@@45|) TyType)) (= (type |#$T4@@20|) TyType)) (= (type |#$T5@@20|) TyType)) (= (type |#$T6@@20|) TyType)) (= (type |#$T7@@20|) TyType)) (= (type |#$T8@@20|) TyType)) (= (type |#$T9@@20|) TyType)) (= (type |#$R@@93|) TyType)) (= (Tclass._System.___hPartialFunc10_7 (Tclass._System.___hPartialFunc10 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$T3@@45| |#$T4@@20| |#$T5@@20| |#$T6@@20| |#$T7@@20| |#$T8@@20| |#$T9@@20| |#$R@@93|)) |#$T7@@20|)) :qid |unknown.0:0| :skolemid |967| :pattern ( (Tclass._System.___hPartialFunc10 |#$T0@@80| |#$T1@@64| |#$T2@@45| |#$T3@@45| |#$T4@@20| |#$T5@@20| |#$T6@@20| |#$T7@@20| |#$T8@@20| |#$T9@@20| |#$R@@93|)) )))
(assert (forall ((arg0@@236 T@U) ) (! (= (type (Tclass._System.___hPartialFunc10_8 arg0@@236)) TyType) :qid |funType:Tclass._System.___hPartialFunc10_8| :pattern ( (Tclass._System.___hPartialFunc10_8 arg0@@236)) )))
(assert (forall ((|#$T0@@81| T@U) (|#$T1@@65| T@U) (|#$T2@@46| T@U) (|#$T3@@46| T@U) (|#$T4@@21| T@U) (|#$T5@@21| T@U) (|#$T6@@21| T@U) (|#$T7@@21| T@U) (|#$T8@@21| T@U) (|#$T9@@21| T@U) (|#$R@@94| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@81|) TyType) (= (type |#$T1@@65|) TyType)) (= (type |#$T2@@46|) TyType)) (= (type |#$T3@@46|) TyType)) (= (type |#$T4@@21|) TyType)) (= (type |#$T5@@21|) TyType)) (= (type |#$T6@@21|) TyType)) (= (type |#$T7@@21|) TyType)) (= (type |#$T8@@21|) TyType)) (= (type |#$T9@@21|) TyType)) (= (type |#$R@@94|) TyType)) (= (Tclass._System.___hPartialFunc10_8 (Tclass._System.___hPartialFunc10 |#$T0@@81| |#$T1@@65| |#$T2@@46| |#$T3@@46| |#$T4@@21| |#$T5@@21| |#$T6@@21| |#$T7@@21| |#$T8@@21| |#$T9@@21| |#$R@@94|)) |#$T8@@21|)) :qid |unknown.0:0| :skolemid |968| :pattern ( (Tclass._System.___hPartialFunc10 |#$T0@@81| |#$T1@@65| |#$T2@@46| |#$T3@@46| |#$T4@@21| |#$T5@@21| |#$T6@@21| |#$T7@@21| |#$T8@@21| |#$T9@@21| |#$R@@94|)) )))
(assert (forall ((arg0@@237 T@U) ) (! (= (type (Tclass._System.___hPartialFunc10_9 arg0@@237)) TyType) :qid |funType:Tclass._System.___hPartialFunc10_9| :pattern ( (Tclass._System.___hPartialFunc10_9 arg0@@237)) )))
(assert (forall ((|#$T0@@82| T@U) (|#$T1@@66| T@U) (|#$T2@@47| T@U) (|#$T3@@47| T@U) (|#$T4@@22| T@U) (|#$T5@@22| T@U) (|#$T6@@22| T@U) (|#$T7@@22| T@U) (|#$T8@@22| T@U) (|#$T9@@22| T@U) (|#$R@@95| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@82|) TyType) (= (type |#$T1@@66|) TyType)) (= (type |#$T2@@47|) TyType)) (= (type |#$T3@@47|) TyType)) (= (type |#$T4@@22|) TyType)) (= (type |#$T5@@22|) TyType)) (= (type |#$T6@@22|) TyType)) (= (type |#$T7@@22|) TyType)) (= (type |#$T8@@22|) TyType)) (= (type |#$T9@@22|) TyType)) (= (type |#$R@@95|) TyType)) (= (Tclass._System.___hPartialFunc10_9 (Tclass._System.___hPartialFunc10 |#$T0@@82| |#$T1@@66| |#$T2@@47| |#$T3@@47| |#$T4@@22| |#$T5@@22| |#$T6@@22| |#$T7@@22| |#$T8@@22| |#$T9@@22| |#$R@@95|)) |#$T9@@22|)) :qid |unknown.0:0| :skolemid |969| :pattern ( (Tclass._System.___hPartialFunc10 |#$T0@@82| |#$T1@@66| |#$T2@@47| |#$T3@@47| |#$T4@@22| |#$T5@@22| |#$T6@@22| |#$T7@@22| |#$T8@@22| |#$T9@@22| |#$R@@95|)) )))
(assert (forall ((arg0@@238 T@U) ) (! (= (type (Tclass._System.___hPartialFunc10_10 arg0@@238)) TyType) :qid |funType:Tclass._System.___hPartialFunc10_10| :pattern ( (Tclass._System.___hPartialFunc10_10 arg0@@238)) )))
(assert (forall ((|#$T0@@83| T@U) (|#$T1@@67| T@U) (|#$T2@@48| T@U) (|#$T3@@48| T@U) (|#$T4@@23| T@U) (|#$T5@@23| T@U) (|#$T6@@23| T@U) (|#$T7@@23| T@U) (|#$T8@@23| T@U) (|#$T9@@23| T@U) (|#$R@@96| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@83|) TyType) (= (type |#$T1@@67|) TyType)) (= (type |#$T2@@48|) TyType)) (= (type |#$T3@@48|) TyType)) (= (type |#$T4@@23|) TyType)) (= (type |#$T5@@23|) TyType)) (= (type |#$T6@@23|) TyType)) (= (type |#$T7@@23|) TyType)) (= (type |#$T8@@23|) TyType)) (= (type |#$T9@@23|) TyType)) (= (type |#$R@@96|) TyType)) (= (Tclass._System.___hPartialFunc10_10 (Tclass._System.___hPartialFunc10 |#$T0@@83| |#$T1@@67| |#$T2@@48| |#$T3@@48| |#$T4@@23| |#$T5@@23| |#$T6@@23| |#$T7@@23| |#$T8@@23| |#$T9@@23| |#$R@@96|)) |#$R@@96|)) :qid |unknown.0:0| :skolemid |970| :pattern ( (Tclass._System.___hPartialFunc10 |#$T0@@83| |#$T1@@67| |#$T2@@48| |#$T3@@48| |#$T4@@23| |#$T5@@23| |#$T6@@23| |#$T7@@23| |#$T8@@23| |#$T9@@23| |#$R@@96|)) )))
(assert (forall ((|#$T0@@84| T@U) (|#$T1@@68| T@U) (|#$T2@@49| T@U) (|#$T3@@49| T@U) (|#$T4@@24| T@U) (|#$T5@@24| T@U) (|#$T6@@24| T@U) (|#$T7@@24| T@U) (|#$T8@@24| T@U) (|#$T9@@24| T@U) (|#$R@@97| T@U) (bx@@72 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@84|) TyType) (= (type |#$T1@@68|) TyType)) (= (type |#$T2@@49|) TyType)) (= (type |#$T3@@49|) TyType)) (= (type |#$T4@@24|) TyType)) (= (type |#$T5@@24|) TyType)) (= (type |#$T6@@24|) TyType)) (= (type |#$T7@@24|) TyType)) (= (type |#$T8@@24|) TyType)) (= (type |#$T9@@24|) TyType)) (= (type |#$R@@97|) TyType)) (= (type bx@@72) BoxType)) ($IsBox bx@@72 (Tclass._System.___hPartialFunc10 |#$T0@@84| |#$T1@@68| |#$T2@@49| |#$T3@@49| |#$T4@@24| |#$T5@@24| |#$T6@@24| |#$T7@@24| |#$T8@@24| |#$T9@@24| |#$R@@97|))) (and (= ($Box ($Unbox HandleTypeType bx@@72)) bx@@72) ($Is ($Unbox HandleTypeType bx@@72) (Tclass._System.___hPartialFunc10 |#$T0@@84| |#$T1@@68| |#$T2@@49| |#$T3@@49| |#$T4@@24| |#$T5@@24| |#$T6@@24| |#$T7@@24| |#$T8@@24| |#$T9@@24| |#$R@@97|)))) :qid |unknown.0:0| :skolemid |971| :pattern ( ($IsBox bx@@72 (Tclass._System.___hPartialFunc10 |#$T0@@84| |#$T1@@68| |#$T2@@49| |#$T3@@49| |#$T4@@24| |#$T5@@24| |#$T6@@24| |#$T7@@24| |#$T8@@24| |#$T9@@24| |#$R@@97|))) )))
(assert (forall ((|#$T0@@85| T@U) (|#$T1@@69| T@U) (|#$T2@@50| T@U) (|#$T3@@50| T@U) (|#$T4@@25| T@U) (|#$T5@@25| T@U) (|#$T6@@25| T@U) (|#$T7@@25| T@U) (|#$T8@@25| T@U) (|#$T9@@25| T@U) (|#$R@@98| T@U) (|f#0@@15| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@85|) TyType) (= (type |#$T1@@69|) TyType)) (= (type |#$T2@@50|) TyType)) (= (type |#$T3@@50|) TyType)) (= (type |#$T4@@25|) TyType)) (= (type |#$T5@@25|) TyType)) (= (type |#$T6@@25|) TyType)) (= (type |#$T7@@25|) TyType)) (= (type |#$T8@@25|) TyType)) (= (type |#$T9@@25|) TyType)) (= (type |#$R@@98|) TyType)) (= (type |f#0@@15|) HandleTypeType)) (= ($Is |f#0@@15| (Tclass._System.___hPartialFunc10 |#$T0@@85| |#$T1@@69| |#$T2@@50| |#$T3@@50| |#$T4@@25| |#$T5@@25| |#$T6@@25| |#$T7@@25| |#$T8@@25| |#$T9@@25| |#$R@@98|))  (and ($Is |f#0@@15| (Tclass._System.___hFunc10 |#$T0@@85| |#$T1@@69| |#$T2@@50| |#$T3@@50| |#$T4@@25| |#$T5@@25| |#$T6@@25| |#$T7@@25| |#$T8@@25| |#$T9@@25| |#$R@@98|)) (forall ((|x0#0@@5| T@U) (|x1#0@@3| T@U) (|x2#0@@1| T@U) (|x3#0@@1| T@U) (|x4#0| T@U) (|x5#0| T@U) (|x6#0| T@U) (|x7#0| T@U) (|x8#0| T@U) (|x9#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |x0#0@@5|) BoxType) (= (type |x1#0@@3|) BoxType)) (= (type |x2#0@@1|) BoxType)) (= (type |x3#0@@1|) BoxType)) (= (type |x4#0|) BoxType)) (= (type |x5#0|) BoxType)) (= (type |x6#0|) BoxType)) (= (type |x7#0|) BoxType)) (= (type |x8#0|) BoxType)) (= (type |x9#0|) BoxType)) (and (and (and (and (and (and (and (and (and ($IsBox |x0#0@@5| |#$T0@@85|) ($IsBox |x1#0@@3| |#$T1@@69|)) ($IsBox |x2#0@@1| |#$T2@@50|)) ($IsBox |x3#0@@1| |#$T3@@50|)) ($IsBox |x4#0| |#$T4@@25|)) ($IsBox |x5#0| |#$T5@@25|)) ($IsBox |x6#0| |#$T6@@25|)) ($IsBox |x7#0| |#$T7@@25|)) ($IsBox |x8#0| |#$T8@@25|)) ($IsBox |x9#0| |#$T9@@25|))) (|Set#Equal| (Reads10 |#$T0@@85| |#$T1@@69| |#$T2@@50| |#$T3@@50| |#$T4@@25| |#$T5@@25| |#$T6@@25| |#$T7@@25| |#$T8@@25| |#$T9@@25| |#$R@@98| $OneHeap |f#0@@15| |x0#0@@5| |x1#0@@3| |x2#0@@1| |x3#0@@1| |x4#0| |x5#0| |x6#0| |x7#0| |x8#0| |x9#0|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |972| :no-pattern (type |x0#0@@5|) :no-pattern (type |x1#0@@3|) :no-pattern (type |x2#0@@1|) :no-pattern (type |x3#0@@1|) :no-pattern (type |x4#0|) :no-pattern (type |x5#0|) :no-pattern (type |x6#0|) :no-pattern (type |x7#0|) :no-pattern (type |x8#0|) :no-pattern (type |x9#0|) :no-pattern (U_2_int |x0#0@@5|) :no-pattern (U_2_bool |x0#0@@5|) :no-pattern (U_2_int |x1#0@@3|) :no-pattern (U_2_bool |x1#0@@3|) :no-pattern (U_2_int |x2#0@@1|) :no-pattern (U_2_bool |x2#0@@1|) :no-pattern (U_2_int |x3#0@@1|) :no-pattern (U_2_bool |x3#0@@1|) :no-pattern (U_2_int |x4#0|) :no-pattern (U_2_bool |x4#0|) :no-pattern (U_2_int |x5#0|) :no-pattern (U_2_bool |x5#0|) :no-pattern (U_2_int |x6#0|) :no-pattern (U_2_bool |x6#0|) :no-pattern (U_2_int |x7#0|) :no-pattern (U_2_bool |x7#0|) :no-pattern (U_2_int |x8#0|) :no-pattern (U_2_bool |x8#0|) :no-pattern (U_2_int |x9#0|) :no-pattern (U_2_bool |x9#0|) ))))) :qid |unknown.0:0| :skolemid |973| :pattern ( ($Is |f#0@@15| (Tclass._System.___hPartialFunc10 |#$T0@@85| |#$T1@@69| |#$T2@@50| |#$T3@@50| |#$T4@@25| |#$T5@@25| |#$T6@@25| |#$T7@@25| |#$T8@@25| |#$T9@@25| |#$R@@98|))) )))
(assert (forall ((|#$T0@@86| T@U) (|#$T1@@70| T@U) (|#$T2@@51| T@U) (|#$T3@@51| T@U) (|#$T4@@26| T@U) (|#$T5@@26| T@U) (|#$T6@@26| T@U) (|#$T7@@26| T@U) (|#$T8@@26| T@U) (|#$T9@@26| T@U) (|#$R@@99| T@U) (|f#0@@16| T@U) ($h@@16 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@86|) TyType) (= (type |#$T1@@70|) TyType)) (= (type |#$T2@@51|) TyType)) (= (type |#$T3@@51|) TyType)) (= (type |#$T4@@26|) TyType)) (= (type |#$T5@@26|) TyType)) (= (type |#$T6@@26|) TyType)) (= (type |#$T7@@26|) TyType)) (= (type |#$T8@@26|) TyType)) (= (type |#$T9@@26|) TyType)) (= (type |#$R@@99|) TyType)) (= (type |f#0@@16|) HandleTypeType)) (= (type $h@@16) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc10 |#$T0@@86| |#$T1@@70| |#$T2@@51| |#$T3@@51| |#$T4@@26| |#$T5@@26| |#$T6@@26| |#$T7@@26| |#$T8@@26| |#$T9@@26| |#$R@@99|) $h@@16) ($IsAlloc |f#0@@16| (Tclass._System.___hFunc10 |#$T0@@86| |#$T1@@70| |#$T2@@51| |#$T3@@51| |#$T4@@26| |#$T5@@26| |#$T6@@26| |#$T7@@26| |#$T8@@26| |#$T9@@26| |#$R@@99|) $h@@16))) :qid |unknown.0:0| :skolemid |974| :pattern ( ($IsAlloc |f#0@@16| (Tclass._System.___hPartialFunc10 |#$T0@@86| |#$T1@@70| |#$T2@@51| |#$T3@@51| |#$T4@@26| |#$T5@@26| |#$T6@@26| |#$T7@@26| |#$T8@@26| |#$T9@@26| |#$R@@99|) $h@@16)) )))
(assert (forall ((arg0@@239 T@U) (arg1@@115 T@U) (arg2@@67 T@U) (arg3@@45 T@U) (arg4@@37 T@U) (arg5@@31 T@U) (arg6@@23 T@U) (arg7@@20 T@U) (arg8@@20 T@U) (arg9@@20 T@U) (arg10@@20 T@U) ) (! (= (type (Tclass._System.___hTotalFunc10 arg0@@239 arg1@@115 arg2@@67 arg3@@45 arg4@@37 arg5@@31 arg6@@23 arg7@@20 arg8@@20 arg9@@20 arg10@@20)) TyType) :qid |funType:Tclass._System.___hTotalFunc10| :pattern ( (Tclass._System.___hTotalFunc10 arg0@@239 arg1@@115 arg2@@67 arg3@@45 arg4@@37 arg5@@31 arg6@@23 arg7@@20 arg8@@20 arg9@@20 arg10@@20)) )))
(assert (forall ((|#$T0@@87| T@U) (|#$T1@@71| T@U) (|#$T2@@52| T@U) (|#$T3@@52| T@U) (|#$T4@@27| T@U) (|#$T5@@27| T@U) (|#$T6@@27| T@U) (|#$T7@@27| T@U) (|#$T8@@27| T@U) (|#$T9@@27| T@U) (|#$R@@100| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@87|) TyType) (= (type |#$T1@@71|) TyType)) (= (type |#$T2@@52|) TyType)) (= (type |#$T3@@52|) TyType)) (= (type |#$T4@@27|) TyType)) (= (type |#$T5@@27|) TyType)) (= (type |#$T6@@27|) TyType)) (= (type |#$T7@@27|) TyType)) (= (type |#$T8@@27|) TyType)) (= (type |#$T9@@27|) TyType)) (= (type |#$R@@100|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc10 |#$T0@@87| |#$T1@@71| |#$T2@@52| |#$T3@@52| |#$T4@@27| |#$T5@@27| |#$T6@@27| |#$T7@@27| |#$T8@@27| |#$T9@@27| |#$R@@100|)) Tagclass._System.___hTotalFunc10) (= (TagFamily (Tclass._System.___hTotalFunc10 |#$T0@@87| |#$T1@@71| |#$T2@@52| |#$T3@@52| |#$T4@@27| |#$T5@@27| |#$T6@@27| |#$T7@@27| |#$T8@@27| |#$T9@@27| |#$R@@100|)) |tytagFamily$_#TotalFunc10|))) :qid |unknown.0:0| :skolemid |975| :pattern ( (Tclass._System.___hTotalFunc10 |#$T0@@87| |#$T1@@71| |#$T2@@52| |#$T3@@52| |#$T4@@27| |#$T5@@27| |#$T6@@27| |#$T7@@27| |#$T8@@27| |#$T9@@27| |#$R@@100|)) )))
(assert (forall ((arg0@@240 T@U) ) (! (= (type (Tclass._System.___hTotalFunc10_0 arg0@@240)) TyType) :qid |funType:Tclass._System.___hTotalFunc10_0| :pattern ( (Tclass._System.___hTotalFunc10_0 arg0@@240)) )))
(assert (forall ((|#$T0@@88| T@U) (|#$T1@@72| T@U) (|#$T2@@53| T@U) (|#$T3@@53| T@U) (|#$T4@@28| T@U) (|#$T5@@28| T@U) (|#$T6@@28| T@U) (|#$T7@@28| T@U) (|#$T8@@28| T@U) (|#$T9@@28| T@U) (|#$R@@101| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@88|) TyType) (= (type |#$T1@@72|) TyType)) (= (type |#$T2@@53|) TyType)) (= (type |#$T3@@53|) TyType)) (= (type |#$T4@@28|) TyType)) (= (type |#$T5@@28|) TyType)) (= (type |#$T6@@28|) TyType)) (= (type |#$T7@@28|) TyType)) (= (type |#$T8@@28|) TyType)) (= (type |#$T9@@28|) TyType)) (= (type |#$R@@101|) TyType)) (= (Tclass._System.___hTotalFunc10_0 (Tclass._System.___hTotalFunc10 |#$T0@@88| |#$T1@@72| |#$T2@@53| |#$T3@@53| |#$T4@@28| |#$T5@@28| |#$T6@@28| |#$T7@@28| |#$T8@@28| |#$T9@@28| |#$R@@101|)) |#$T0@@88|)) :qid |unknown.0:0| :skolemid |976| :pattern ( (Tclass._System.___hTotalFunc10 |#$T0@@88| |#$T1@@72| |#$T2@@53| |#$T3@@53| |#$T4@@28| |#$T5@@28| |#$T6@@28| |#$T7@@28| |#$T8@@28| |#$T9@@28| |#$R@@101|)) )))
(assert (forall ((arg0@@241 T@U) ) (! (= (type (Tclass._System.___hTotalFunc10_1 arg0@@241)) TyType) :qid |funType:Tclass._System.___hTotalFunc10_1| :pattern ( (Tclass._System.___hTotalFunc10_1 arg0@@241)) )))
(assert (forall ((|#$T0@@89| T@U) (|#$T1@@73| T@U) (|#$T2@@54| T@U) (|#$T3@@54| T@U) (|#$T4@@29| T@U) (|#$T5@@29| T@U) (|#$T6@@29| T@U) (|#$T7@@29| T@U) (|#$T8@@29| T@U) (|#$T9@@29| T@U) (|#$R@@102| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@89|) TyType) (= (type |#$T1@@73|) TyType)) (= (type |#$T2@@54|) TyType)) (= (type |#$T3@@54|) TyType)) (= (type |#$T4@@29|) TyType)) (= (type |#$T5@@29|) TyType)) (= (type |#$T6@@29|) TyType)) (= (type |#$T7@@29|) TyType)) (= (type |#$T8@@29|) TyType)) (= (type |#$T9@@29|) TyType)) (= (type |#$R@@102|) TyType)) (= (Tclass._System.___hTotalFunc10_1 (Tclass._System.___hTotalFunc10 |#$T0@@89| |#$T1@@73| |#$T2@@54| |#$T3@@54| |#$T4@@29| |#$T5@@29| |#$T6@@29| |#$T7@@29| |#$T8@@29| |#$T9@@29| |#$R@@102|)) |#$T1@@73|)) :qid |unknown.0:0| :skolemid |977| :pattern ( (Tclass._System.___hTotalFunc10 |#$T0@@89| |#$T1@@73| |#$T2@@54| |#$T3@@54| |#$T4@@29| |#$T5@@29| |#$T6@@29| |#$T7@@29| |#$T8@@29| |#$T9@@29| |#$R@@102|)) )))
(assert (forall ((arg0@@242 T@U) ) (! (= (type (Tclass._System.___hTotalFunc10_2 arg0@@242)) TyType) :qid |funType:Tclass._System.___hTotalFunc10_2| :pattern ( (Tclass._System.___hTotalFunc10_2 arg0@@242)) )))
(assert (forall ((|#$T0@@90| T@U) (|#$T1@@74| T@U) (|#$T2@@55| T@U) (|#$T3@@55| T@U) (|#$T4@@30| T@U) (|#$T5@@30| T@U) (|#$T6@@30| T@U) (|#$T7@@30| T@U) (|#$T8@@30| T@U) (|#$T9@@30| T@U) (|#$R@@103| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@90|) TyType) (= (type |#$T1@@74|) TyType)) (= (type |#$T2@@55|) TyType)) (= (type |#$T3@@55|) TyType)) (= (type |#$T4@@30|) TyType)) (= (type |#$T5@@30|) TyType)) (= (type |#$T6@@30|) TyType)) (= (type |#$T7@@30|) TyType)) (= (type |#$T8@@30|) TyType)) (= (type |#$T9@@30|) TyType)) (= (type |#$R@@103|) TyType)) (= (Tclass._System.___hTotalFunc10_2 (Tclass._System.___hTotalFunc10 |#$T0@@90| |#$T1@@74| |#$T2@@55| |#$T3@@55| |#$T4@@30| |#$T5@@30| |#$T6@@30| |#$T7@@30| |#$T8@@30| |#$T9@@30| |#$R@@103|)) |#$T2@@55|)) :qid |unknown.0:0| :skolemid |978| :pattern ( (Tclass._System.___hTotalFunc10 |#$T0@@90| |#$T1@@74| |#$T2@@55| |#$T3@@55| |#$T4@@30| |#$T5@@30| |#$T6@@30| |#$T7@@30| |#$T8@@30| |#$T9@@30| |#$R@@103|)) )))
(assert (forall ((arg0@@243 T@U) ) (! (= (type (Tclass._System.___hTotalFunc10_3 arg0@@243)) TyType) :qid |funType:Tclass._System.___hTotalFunc10_3| :pattern ( (Tclass._System.___hTotalFunc10_3 arg0@@243)) )))
(assert (forall ((|#$T0@@91| T@U) (|#$T1@@75| T@U) (|#$T2@@56| T@U) (|#$T3@@56| T@U) (|#$T4@@31| T@U) (|#$T5@@31| T@U) (|#$T6@@31| T@U) (|#$T7@@31| T@U) (|#$T8@@31| T@U) (|#$T9@@31| T@U) (|#$R@@104| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@91|) TyType) (= (type |#$T1@@75|) TyType)) (= (type |#$T2@@56|) TyType)) (= (type |#$T3@@56|) TyType)) (= (type |#$T4@@31|) TyType)) (= (type |#$T5@@31|) TyType)) (= (type |#$T6@@31|) TyType)) (= (type |#$T7@@31|) TyType)) (= (type |#$T8@@31|) TyType)) (= (type |#$T9@@31|) TyType)) (= (type |#$R@@104|) TyType)) (= (Tclass._System.___hTotalFunc10_3 (Tclass._System.___hTotalFunc10 |#$T0@@91| |#$T1@@75| |#$T2@@56| |#$T3@@56| |#$T4@@31| |#$T5@@31| |#$T6@@31| |#$T7@@31| |#$T8@@31| |#$T9@@31| |#$R@@104|)) |#$T3@@56|)) :qid |unknown.0:0| :skolemid |979| :pattern ( (Tclass._System.___hTotalFunc10 |#$T0@@91| |#$T1@@75| |#$T2@@56| |#$T3@@56| |#$T4@@31| |#$T5@@31| |#$T6@@31| |#$T7@@31| |#$T8@@31| |#$T9@@31| |#$R@@104|)) )))
(assert (forall ((arg0@@244 T@U) ) (! (= (type (Tclass._System.___hTotalFunc10_4 arg0@@244)) TyType) :qid |funType:Tclass._System.___hTotalFunc10_4| :pattern ( (Tclass._System.___hTotalFunc10_4 arg0@@244)) )))
(assert (forall ((|#$T0@@92| T@U) (|#$T1@@76| T@U) (|#$T2@@57| T@U) (|#$T3@@57| T@U) (|#$T4@@32| T@U) (|#$T5@@32| T@U) (|#$T6@@32| T@U) (|#$T7@@32| T@U) (|#$T8@@32| T@U) (|#$T9@@32| T@U) (|#$R@@105| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@92|) TyType) (= (type |#$T1@@76|) TyType)) (= (type |#$T2@@57|) TyType)) (= (type |#$T3@@57|) TyType)) (= (type |#$T4@@32|) TyType)) (= (type |#$T5@@32|) TyType)) (= (type |#$T6@@32|) TyType)) (= (type |#$T7@@32|) TyType)) (= (type |#$T8@@32|) TyType)) (= (type |#$T9@@32|) TyType)) (= (type |#$R@@105|) TyType)) (= (Tclass._System.___hTotalFunc10_4 (Tclass._System.___hTotalFunc10 |#$T0@@92| |#$T1@@76| |#$T2@@57| |#$T3@@57| |#$T4@@32| |#$T5@@32| |#$T6@@32| |#$T7@@32| |#$T8@@32| |#$T9@@32| |#$R@@105|)) |#$T4@@32|)) :qid |unknown.0:0| :skolemid |980| :pattern ( (Tclass._System.___hTotalFunc10 |#$T0@@92| |#$T1@@76| |#$T2@@57| |#$T3@@57| |#$T4@@32| |#$T5@@32| |#$T6@@32| |#$T7@@32| |#$T8@@32| |#$T9@@32| |#$R@@105|)) )))
(assert (forall ((arg0@@245 T@U) ) (! (= (type (Tclass._System.___hTotalFunc10_5 arg0@@245)) TyType) :qid |funType:Tclass._System.___hTotalFunc10_5| :pattern ( (Tclass._System.___hTotalFunc10_5 arg0@@245)) )))
(assert (forall ((|#$T0@@93| T@U) (|#$T1@@77| T@U) (|#$T2@@58| T@U) (|#$T3@@58| T@U) (|#$T4@@33| T@U) (|#$T5@@33| T@U) (|#$T6@@33| T@U) (|#$T7@@33| T@U) (|#$T8@@33| T@U) (|#$T9@@33| T@U) (|#$R@@106| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@93|) TyType) (= (type |#$T1@@77|) TyType)) (= (type |#$T2@@58|) TyType)) (= (type |#$T3@@58|) TyType)) (= (type |#$T4@@33|) TyType)) (= (type |#$T5@@33|) TyType)) (= (type |#$T6@@33|) TyType)) (= (type |#$T7@@33|) TyType)) (= (type |#$T8@@33|) TyType)) (= (type |#$T9@@33|) TyType)) (= (type |#$R@@106|) TyType)) (= (Tclass._System.___hTotalFunc10_5 (Tclass._System.___hTotalFunc10 |#$T0@@93| |#$T1@@77| |#$T2@@58| |#$T3@@58| |#$T4@@33| |#$T5@@33| |#$T6@@33| |#$T7@@33| |#$T8@@33| |#$T9@@33| |#$R@@106|)) |#$T5@@33|)) :qid |unknown.0:0| :skolemid |981| :pattern ( (Tclass._System.___hTotalFunc10 |#$T0@@93| |#$T1@@77| |#$T2@@58| |#$T3@@58| |#$T4@@33| |#$T5@@33| |#$T6@@33| |#$T7@@33| |#$T8@@33| |#$T9@@33| |#$R@@106|)) )))
(assert (forall ((arg0@@246 T@U) ) (! (= (type (Tclass._System.___hTotalFunc10_6 arg0@@246)) TyType) :qid |funType:Tclass._System.___hTotalFunc10_6| :pattern ( (Tclass._System.___hTotalFunc10_6 arg0@@246)) )))
(assert (forall ((|#$T0@@94| T@U) (|#$T1@@78| T@U) (|#$T2@@59| T@U) (|#$T3@@59| T@U) (|#$T4@@34| T@U) (|#$T5@@34| T@U) (|#$T6@@34| T@U) (|#$T7@@34| T@U) (|#$T8@@34| T@U) (|#$T9@@34| T@U) (|#$R@@107| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@94|) TyType) (= (type |#$T1@@78|) TyType)) (= (type |#$T2@@59|) TyType)) (= (type |#$T3@@59|) TyType)) (= (type |#$T4@@34|) TyType)) (= (type |#$T5@@34|) TyType)) (= (type |#$T6@@34|) TyType)) (= (type |#$T7@@34|) TyType)) (= (type |#$T8@@34|) TyType)) (= (type |#$T9@@34|) TyType)) (= (type |#$R@@107|) TyType)) (= (Tclass._System.___hTotalFunc10_6 (Tclass._System.___hTotalFunc10 |#$T0@@94| |#$T1@@78| |#$T2@@59| |#$T3@@59| |#$T4@@34| |#$T5@@34| |#$T6@@34| |#$T7@@34| |#$T8@@34| |#$T9@@34| |#$R@@107|)) |#$T6@@34|)) :qid |unknown.0:0| :skolemid |982| :pattern ( (Tclass._System.___hTotalFunc10 |#$T0@@94| |#$T1@@78| |#$T2@@59| |#$T3@@59| |#$T4@@34| |#$T5@@34| |#$T6@@34| |#$T7@@34| |#$T8@@34| |#$T9@@34| |#$R@@107|)) )))
(assert (forall ((arg0@@247 T@U) ) (! (= (type (Tclass._System.___hTotalFunc10_7 arg0@@247)) TyType) :qid |funType:Tclass._System.___hTotalFunc10_7| :pattern ( (Tclass._System.___hTotalFunc10_7 arg0@@247)) )))
(assert (forall ((|#$T0@@95| T@U) (|#$T1@@79| T@U) (|#$T2@@60| T@U) (|#$T3@@60| T@U) (|#$T4@@35| T@U) (|#$T5@@35| T@U) (|#$T6@@35| T@U) (|#$T7@@35| T@U) (|#$T8@@35| T@U) (|#$T9@@35| T@U) (|#$R@@108| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@95|) TyType) (= (type |#$T1@@79|) TyType)) (= (type |#$T2@@60|) TyType)) (= (type |#$T3@@60|) TyType)) (= (type |#$T4@@35|) TyType)) (= (type |#$T5@@35|) TyType)) (= (type |#$T6@@35|) TyType)) (= (type |#$T7@@35|) TyType)) (= (type |#$T8@@35|) TyType)) (= (type |#$T9@@35|) TyType)) (= (type |#$R@@108|) TyType)) (= (Tclass._System.___hTotalFunc10_7 (Tclass._System.___hTotalFunc10 |#$T0@@95| |#$T1@@79| |#$T2@@60| |#$T3@@60| |#$T4@@35| |#$T5@@35| |#$T6@@35| |#$T7@@35| |#$T8@@35| |#$T9@@35| |#$R@@108|)) |#$T7@@35|)) :qid |unknown.0:0| :skolemid |983| :pattern ( (Tclass._System.___hTotalFunc10 |#$T0@@95| |#$T1@@79| |#$T2@@60| |#$T3@@60| |#$T4@@35| |#$T5@@35| |#$T6@@35| |#$T7@@35| |#$T8@@35| |#$T9@@35| |#$R@@108|)) )))
(assert (forall ((arg0@@248 T@U) ) (! (= (type (Tclass._System.___hTotalFunc10_8 arg0@@248)) TyType) :qid |funType:Tclass._System.___hTotalFunc10_8| :pattern ( (Tclass._System.___hTotalFunc10_8 arg0@@248)) )))
(assert (forall ((|#$T0@@96| T@U) (|#$T1@@80| T@U) (|#$T2@@61| T@U) (|#$T3@@61| T@U) (|#$T4@@36| T@U) (|#$T5@@36| T@U) (|#$T6@@36| T@U) (|#$T7@@36| T@U) (|#$T8@@36| T@U) (|#$T9@@36| T@U) (|#$R@@109| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@96|) TyType) (= (type |#$T1@@80|) TyType)) (= (type |#$T2@@61|) TyType)) (= (type |#$T3@@61|) TyType)) (= (type |#$T4@@36|) TyType)) (= (type |#$T5@@36|) TyType)) (= (type |#$T6@@36|) TyType)) (= (type |#$T7@@36|) TyType)) (= (type |#$T8@@36|) TyType)) (= (type |#$T9@@36|) TyType)) (= (type |#$R@@109|) TyType)) (= (Tclass._System.___hTotalFunc10_8 (Tclass._System.___hTotalFunc10 |#$T0@@96| |#$T1@@80| |#$T2@@61| |#$T3@@61| |#$T4@@36| |#$T5@@36| |#$T6@@36| |#$T7@@36| |#$T8@@36| |#$T9@@36| |#$R@@109|)) |#$T8@@36|)) :qid |unknown.0:0| :skolemid |984| :pattern ( (Tclass._System.___hTotalFunc10 |#$T0@@96| |#$T1@@80| |#$T2@@61| |#$T3@@61| |#$T4@@36| |#$T5@@36| |#$T6@@36| |#$T7@@36| |#$T8@@36| |#$T9@@36| |#$R@@109|)) )))
(assert (forall ((arg0@@249 T@U) ) (! (= (type (Tclass._System.___hTotalFunc10_9 arg0@@249)) TyType) :qid |funType:Tclass._System.___hTotalFunc10_9| :pattern ( (Tclass._System.___hTotalFunc10_9 arg0@@249)) )))
(assert (forall ((|#$T0@@97| T@U) (|#$T1@@81| T@U) (|#$T2@@62| T@U) (|#$T3@@62| T@U) (|#$T4@@37| T@U) (|#$T5@@37| T@U) (|#$T6@@37| T@U) (|#$T7@@37| T@U) (|#$T8@@37| T@U) (|#$T9@@37| T@U) (|#$R@@110| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@97|) TyType) (= (type |#$T1@@81|) TyType)) (= (type |#$T2@@62|) TyType)) (= (type |#$T3@@62|) TyType)) (= (type |#$T4@@37|) TyType)) (= (type |#$T5@@37|) TyType)) (= (type |#$T6@@37|) TyType)) (= (type |#$T7@@37|) TyType)) (= (type |#$T8@@37|) TyType)) (= (type |#$T9@@37|) TyType)) (= (type |#$R@@110|) TyType)) (= (Tclass._System.___hTotalFunc10_9 (Tclass._System.___hTotalFunc10 |#$T0@@97| |#$T1@@81| |#$T2@@62| |#$T3@@62| |#$T4@@37| |#$T5@@37| |#$T6@@37| |#$T7@@37| |#$T8@@37| |#$T9@@37| |#$R@@110|)) |#$T9@@37|)) :qid |unknown.0:0| :skolemid |985| :pattern ( (Tclass._System.___hTotalFunc10 |#$T0@@97| |#$T1@@81| |#$T2@@62| |#$T3@@62| |#$T4@@37| |#$T5@@37| |#$T6@@37| |#$T7@@37| |#$T8@@37| |#$T9@@37| |#$R@@110|)) )))
(assert (forall ((arg0@@250 T@U) ) (! (= (type (Tclass._System.___hTotalFunc10_10 arg0@@250)) TyType) :qid |funType:Tclass._System.___hTotalFunc10_10| :pattern ( (Tclass._System.___hTotalFunc10_10 arg0@@250)) )))
(assert (forall ((|#$T0@@98| T@U) (|#$T1@@82| T@U) (|#$T2@@63| T@U) (|#$T3@@63| T@U) (|#$T4@@38| T@U) (|#$T5@@38| T@U) (|#$T6@@38| T@U) (|#$T7@@38| T@U) (|#$T8@@38| T@U) (|#$T9@@38| T@U) (|#$R@@111| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@98|) TyType) (= (type |#$T1@@82|) TyType)) (= (type |#$T2@@63|) TyType)) (= (type |#$T3@@63|) TyType)) (= (type |#$T4@@38|) TyType)) (= (type |#$T5@@38|) TyType)) (= (type |#$T6@@38|) TyType)) (= (type |#$T7@@38|) TyType)) (= (type |#$T8@@38|) TyType)) (= (type |#$T9@@38|) TyType)) (= (type |#$R@@111|) TyType)) (= (Tclass._System.___hTotalFunc10_10 (Tclass._System.___hTotalFunc10 |#$T0@@98| |#$T1@@82| |#$T2@@63| |#$T3@@63| |#$T4@@38| |#$T5@@38| |#$T6@@38| |#$T7@@38| |#$T8@@38| |#$T9@@38| |#$R@@111|)) |#$R@@111|)) :qid |unknown.0:0| :skolemid |986| :pattern ( (Tclass._System.___hTotalFunc10 |#$T0@@98| |#$T1@@82| |#$T2@@63| |#$T3@@63| |#$T4@@38| |#$T5@@38| |#$T6@@38| |#$T7@@38| |#$T8@@38| |#$T9@@38| |#$R@@111|)) )))
(assert (forall ((|#$T0@@99| T@U) (|#$T1@@83| T@U) (|#$T2@@64| T@U) (|#$T3@@64| T@U) (|#$T4@@39| T@U) (|#$T5@@39| T@U) (|#$T6@@39| T@U) (|#$T7@@39| T@U) (|#$T8@@39| T@U) (|#$T9@@39| T@U) (|#$R@@112| T@U) (bx@@73 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@99|) TyType) (= (type |#$T1@@83|) TyType)) (= (type |#$T2@@64|) TyType)) (= (type |#$T3@@64|) TyType)) (= (type |#$T4@@39|) TyType)) (= (type |#$T5@@39|) TyType)) (= (type |#$T6@@39|) TyType)) (= (type |#$T7@@39|) TyType)) (= (type |#$T8@@39|) TyType)) (= (type |#$T9@@39|) TyType)) (= (type |#$R@@112|) TyType)) (= (type bx@@73) BoxType)) ($IsBox bx@@73 (Tclass._System.___hTotalFunc10 |#$T0@@99| |#$T1@@83| |#$T2@@64| |#$T3@@64| |#$T4@@39| |#$T5@@39| |#$T6@@39| |#$T7@@39| |#$T8@@39| |#$T9@@39| |#$R@@112|))) (and (= ($Box ($Unbox HandleTypeType bx@@73)) bx@@73) ($Is ($Unbox HandleTypeType bx@@73) (Tclass._System.___hTotalFunc10 |#$T0@@99| |#$T1@@83| |#$T2@@64| |#$T3@@64| |#$T4@@39| |#$T5@@39| |#$T6@@39| |#$T7@@39| |#$T8@@39| |#$T9@@39| |#$R@@112|)))) :qid |unknown.0:0| :skolemid |987| :pattern ( ($IsBox bx@@73 (Tclass._System.___hTotalFunc10 |#$T0@@99| |#$T1@@83| |#$T2@@64| |#$T3@@64| |#$T4@@39| |#$T5@@39| |#$T6@@39| |#$T7@@39| |#$T8@@39| |#$T9@@39| |#$R@@112|))) )))
(assert (forall ((|#$T0@@100| T@U) (|#$T1@@84| T@U) (|#$T2@@65| T@U) (|#$T3@@65| T@U) (|#$T4@@40| T@U) (|#$T5@@40| T@U) (|#$T6@@40| T@U) (|#$T7@@40| T@U) (|#$T8@@40| T@U) (|#$T9@@40| T@U) (|#$R@@113| T@U) (|f#0@@17| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@100|) TyType) (= (type |#$T1@@84|) TyType)) (= (type |#$T2@@65|) TyType)) (= (type |#$T3@@65|) TyType)) (= (type |#$T4@@40|) TyType)) (= (type |#$T5@@40|) TyType)) (= (type |#$T6@@40|) TyType)) (= (type |#$T7@@40|) TyType)) (= (type |#$T8@@40|) TyType)) (= (type |#$T9@@40|) TyType)) (= (type |#$R@@113|) TyType)) (= (type |f#0@@17|) HandleTypeType)) (= ($Is |f#0@@17| (Tclass._System.___hTotalFunc10 |#$T0@@100| |#$T1@@84| |#$T2@@65| |#$T3@@65| |#$T4@@40| |#$T5@@40| |#$T6@@40| |#$T7@@40| |#$T8@@40| |#$T9@@40| |#$R@@113|))  (and ($Is |f#0@@17| (Tclass._System.___hPartialFunc10 |#$T0@@100| |#$T1@@84| |#$T2@@65| |#$T3@@65| |#$T4@@40| |#$T5@@40| |#$T6@@40| |#$T7@@40| |#$T8@@40| |#$T9@@40| |#$R@@113|)) (forall ((|x0#0@@6| T@U) (|x1#0@@4| T@U) (|x2#0@@2| T@U) (|x3#0@@2| T@U) (|x4#0@@0| T@U) (|x5#0@@0| T@U) (|x6#0@@0| T@U) (|x7#0@@0| T@U) (|x8#0@@0| T@U) (|x9#0@@0| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type |x0#0@@6|) BoxType) (= (type |x1#0@@4|) BoxType)) (= (type |x2#0@@2|) BoxType)) (= (type |x3#0@@2|) BoxType)) (= (type |x4#0@@0|) BoxType)) (= (type |x5#0@@0|) BoxType)) (= (type |x6#0@@0|) BoxType)) (= (type |x7#0@@0|) BoxType)) (= (type |x8#0@@0|) BoxType)) (= (type |x9#0@@0|) BoxType)) (and (and (and (and (and (and (and (and (and ($IsBox |x0#0@@6| |#$T0@@100|) ($IsBox |x1#0@@4| |#$T1@@84|)) ($IsBox |x2#0@@2| |#$T2@@65|)) ($IsBox |x3#0@@2| |#$T3@@65|)) ($IsBox |x4#0@@0| |#$T4@@40|)) ($IsBox |x5#0@@0| |#$T5@@40|)) ($IsBox |x6#0@@0| |#$T6@@40|)) ($IsBox |x7#0@@0| |#$T7@@40|)) ($IsBox |x8#0@@0| |#$T8@@40|)) ($IsBox |x9#0@@0| |#$T9@@40|))) (Requires10 |#$T0@@100| |#$T1@@84| |#$T2@@65| |#$T3@@65| |#$T4@@40| |#$T5@@40| |#$T6@@40| |#$T7@@40| |#$T8@@40| |#$T9@@40| |#$R@@113| $OneHeap |f#0@@17| |x0#0@@6| |x1#0@@4| |x2#0@@2| |x3#0@@2| |x4#0@@0| |x5#0@@0| |x6#0@@0| |x7#0@@0| |x8#0@@0| |x9#0@@0|)) :qid |unknown.0:0| :skolemid |988| :no-pattern (type |x0#0@@6|) :no-pattern (type |x1#0@@4|) :no-pattern (type |x2#0@@2|) :no-pattern (type |x3#0@@2|) :no-pattern (type |x4#0@@0|) :no-pattern (type |x5#0@@0|) :no-pattern (type |x6#0@@0|) :no-pattern (type |x7#0@@0|) :no-pattern (type |x8#0@@0|) :no-pattern (type |x9#0@@0|) :no-pattern (U_2_int |x0#0@@6|) :no-pattern (U_2_bool |x0#0@@6|) :no-pattern (U_2_int |x1#0@@4|) :no-pattern (U_2_bool |x1#0@@4|) :no-pattern (U_2_int |x2#0@@2|) :no-pattern (U_2_bool |x2#0@@2|) :no-pattern (U_2_int |x3#0@@2|) :no-pattern (U_2_bool |x3#0@@2|) :no-pattern (U_2_int |x4#0@@0|) :no-pattern (U_2_bool |x4#0@@0|) :no-pattern (U_2_int |x5#0@@0|) :no-pattern (U_2_bool |x5#0@@0|) :no-pattern (U_2_int |x6#0@@0|) :no-pattern (U_2_bool |x6#0@@0|) :no-pattern (U_2_int |x7#0@@0|) :no-pattern (U_2_bool |x7#0@@0|) :no-pattern (U_2_int |x8#0@@0|) :no-pattern (U_2_bool |x8#0@@0|) :no-pattern (U_2_int |x9#0@@0|) :no-pattern (U_2_bool |x9#0@@0|) ))))) :qid |unknown.0:0| :skolemid |989| :pattern ( ($Is |f#0@@17| (Tclass._System.___hTotalFunc10 |#$T0@@100| |#$T1@@84| |#$T2@@65| |#$T3@@65| |#$T4@@40| |#$T5@@40| |#$T6@@40| |#$T7@@40| |#$T8@@40| |#$T9@@40| |#$R@@113|))) )))
(assert (forall ((|#$T0@@101| T@U) (|#$T1@@85| T@U) (|#$T2@@66| T@U) (|#$T3@@66| T@U) (|#$T4@@41| T@U) (|#$T5@@41| T@U) (|#$T6@@41| T@U) (|#$T7@@41| T@U) (|#$T8@@41| T@U) (|#$T9@@41| T@U) (|#$R@@114| T@U) (|f#0@@18| T@U) ($h@@17 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (= (type |#$T0@@101|) TyType) (= (type |#$T1@@85|) TyType)) (= (type |#$T2@@66|) TyType)) (= (type |#$T3@@66|) TyType)) (= (type |#$T4@@41|) TyType)) (= (type |#$T5@@41|) TyType)) (= (type |#$T6@@41|) TyType)) (= (type |#$T7@@41|) TyType)) (= (type |#$T8@@41|) TyType)) (= (type |#$T9@@41|) TyType)) (= (type |#$R@@114|) TyType)) (= (type |f#0@@18|) HandleTypeType)) (= (type $h@@17) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc10 |#$T0@@101| |#$T1@@85| |#$T2@@66| |#$T3@@66| |#$T4@@41| |#$T5@@41| |#$T6@@41| |#$T7@@41| |#$T8@@41| |#$T9@@41| |#$R@@114|) $h@@17) ($IsAlloc |f#0@@18| (Tclass._System.___hPartialFunc10 |#$T0@@101| |#$T1@@85| |#$T2@@66| |#$T3@@66| |#$T4@@41| |#$T5@@41| |#$T6@@41| |#$T7@@41| |#$T8@@41| |#$T9@@41| |#$R@@114|) $h@@17))) :qid |unknown.0:0| :skolemid |990| :pattern ( ($IsAlloc |f#0@@18| (Tclass._System.___hTotalFunc10 |#$T0@@101| |#$T1@@85| |#$T2@@66| |#$T3@@66| |#$T4@@41| |#$T5@@41| |#$T6@@41| |#$T7@@41| |#$T8@@41| |#$T9@@41| |#$R@@114|) $h@@17)) )))
(assert (forall ((arg0@@251 T@U) (arg1@@116 T@U) (arg2@@68 T@U) (arg3@@46 T@U) ) (! (= (type (Tclass._System.___hFunc3 arg0@@251 arg1@@116 arg2@@68 arg3@@46)) TyType) :qid |funType:Tclass._System.___hFunc3| :pattern ( (Tclass._System.___hFunc3 arg0@@251 arg1@@116 arg2@@68 arg3@@46)) )))
(assert (forall ((|#$T0@@102| T@U) (|#$T1@@86| T@U) (|#$T2@@67| T@U) (|#$R@@115| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@102|) TyType) (= (type |#$T1@@86|) TyType)) (= (type |#$T2@@67|) TyType)) (= (type |#$R@@115|) TyType)) (and (= (Tag (Tclass._System.___hFunc3 |#$T0@@102| |#$T1@@86| |#$T2@@67| |#$R@@115|)) Tagclass._System.___hFunc3) (= (TagFamily (Tclass._System.___hFunc3 |#$T0@@102| |#$T1@@86| |#$T2@@67| |#$R@@115|)) |tytagFamily$_#Func3|))) :qid |unknown.0:0| :skolemid |991| :pattern ( (Tclass._System.___hFunc3 |#$T0@@102| |#$T1@@86| |#$T2@@67| |#$R@@115|)) )))
(assert (forall ((arg0@@252 T@U) ) (! (= (type (Tclass._System.___hFunc3_0 arg0@@252)) TyType) :qid |funType:Tclass._System.___hFunc3_0| :pattern ( (Tclass._System.___hFunc3_0 arg0@@252)) )))
(assert (forall ((|#$T0@@103| T@U) (|#$T1@@87| T@U) (|#$T2@@68| T@U) (|#$R@@116| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@103|) TyType) (= (type |#$T1@@87|) TyType)) (= (type |#$T2@@68|) TyType)) (= (type |#$R@@116|) TyType)) (= (Tclass._System.___hFunc3_0 (Tclass._System.___hFunc3 |#$T0@@103| |#$T1@@87| |#$T2@@68| |#$R@@116|)) |#$T0@@103|)) :qid |unknown.0:0| :skolemid |992| :pattern ( (Tclass._System.___hFunc3 |#$T0@@103| |#$T1@@87| |#$T2@@68| |#$R@@116|)) )))
(assert (forall ((arg0@@253 T@U) ) (! (= (type (Tclass._System.___hFunc3_1 arg0@@253)) TyType) :qid |funType:Tclass._System.___hFunc3_1| :pattern ( (Tclass._System.___hFunc3_1 arg0@@253)) )))
(assert (forall ((|#$T0@@104| T@U) (|#$T1@@88| T@U) (|#$T2@@69| T@U) (|#$R@@117| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@104|) TyType) (= (type |#$T1@@88|) TyType)) (= (type |#$T2@@69|) TyType)) (= (type |#$R@@117|) TyType)) (= (Tclass._System.___hFunc3_1 (Tclass._System.___hFunc3 |#$T0@@104| |#$T1@@88| |#$T2@@69| |#$R@@117|)) |#$T1@@88|)) :qid |unknown.0:0| :skolemid |993| :pattern ( (Tclass._System.___hFunc3 |#$T0@@104| |#$T1@@88| |#$T2@@69| |#$R@@117|)) )))
(assert (forall ((arg0@@254 T@U) ) (! (= (type (Tclass._System.___hFunc3_2 arg0@@254)) TyType) :qid |funType:Tclass._System.___hFunc3_2| :pattern ( (Tclass._System.___hFunc3_2 arg0@@254)) )))
(assert (forall ((|#$T0@@105| T@U) (|#$T1@@89| T@U) (|#$T2@@70| T@U) (|#$R@@118| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@105|) TyType) (= (type |#$T1@@89|) TyType)) (= (type |#$T2@@70|) TyType)) (= (type |#$R@@118|) TyType)) (= (Tclass._System.___hFunc3_2 (Tclass._System.___hFunc3 |#$T0@@105| |#$T1@@89| |#$T2@@70| |#$R@@118|)) |#$T2@@70|)) :qid |unknown.0:0| :skolemid |994| :pattern ( (Tclass._System.___hFunc3 |#$T0@@105| |#$T1@@89| |#$T2@@70| |#$R@@118|)) )))
(assert (forall ((arg0@@255 T@U) ) (! (= (type (Tclass._System.___hFunc3_3 arg0@@255)) TyType) :qid |funType:Tclass._System.___hFunc3_3| :pattern ( (Tclass._System.___hFunc3_3 arg0@@255)) )))
(assert (forall ((|#$T0@@106| T@U) (|#$T1@@90| T@U) (|#$T2@@71| T@U) (|#$R@@119| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@106|) TyType) (= (type |#$T1@@90|) TyType)) (= (type |#$T2@@71|) TyType)) (= (type |#$R@@119|) TyType)) (= (Tclass._System.___hFunc3_3 (Tclass._System.___hFunc3 |#$T0@@106| |#$T1@@90| |#$T2@@71| |#$R@@119|)) |#$R@@119|)) :qid |unknown.0:0| :skolemid |995| :pattern ( (Tclass._System.___hFunc3 |#$T0@@106| |#$T1@@90| |#$T2@@71| |#$R@@119|)) )))
(assert (forall ((|#$T0@@107| T@U) (|#$T1@@91| T@U) (|#$T2@@72| T@U) (|#$R@@120| T@U) (bx@@74 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@107|) TyType) (= (type |#$T1@@91|) TyType)) (= (type |#$T2@@72|) TyType)) (= (type |#$R@@120|) TyType)) (= (type bx@@74) BoxType)) ($IsBox bx@@74 (Tclass._System.___hFunc3 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$R@@120|))) (and (= ($Box ($Unbox HandleTypeType bx@@74)) bx@@74) ($Is ($Unbox HandleTypeType bx@@74) (Tclass._System.___hFunc3 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$R@@120|)))) :qid |unknown.0:0| :skolemid |996| :pattern ( ($IsBox bx@@74 (Tclass._System.___hFunc3 |#$T0@@107| |#$T1@@91| |#$T2@@72| |#$R@@120|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@256 T@T) (arg1@@117 T@T) (arg2@@69 T@T) (arg3@@47 T@T) (arg4@@38 T@T) ) (! (= (Ctor (MapType6Type arg0@@256 arg1@@117 arg2@@69 arg3@@47 arg4@@38)) 28) :qid |ctor:MapType6Type| )) (forall ((arg0@@257 T@T) (arg1@@118 T@T) (arg2@@70 T@T) (arg3@@48 T@T) (arg4@@39 T@T) ) (! (= (MapType6TypeInv0 (MapType6Type arg0@@257 arg1@@118 arg2@@70 arg3@@48 arg4@@39)) arg0@@257) :qid |typeInv:MapType6TypeInv0| :pattern ( (MapType6Type arg0@@257 arg1@@118 arg2@@70 arg3@@48 arg4@@39)) ))) (forall ((arg0@@258 T@T) (arg1@@119 T@T) (arg2@@71 T@T) (arg3@@49 T@T) (arg4@@40 T@T) ) (! (= (MapType6TypeInv1 (MapType6Type arg0@@258 arg1@@119 arg2@@71 arg3@@49 arg4@@40)) arg1@@119) :qid |typeInv:MapType6TypeInv1| :pattern ( (MapType6Type arg0@@258 arg1@@119 arg2@@71 arg3@@49 arg4@@40)) ))) (forall ((arg0@@259 T@T) (arg1@@120 T@T) (arg2@@72 T@T) (arg3@@50 T@T) (arg4@@41 T@T) ) (! (= (MapType6TypeInv2 (MapType6Type arg0@@259 arg1@@120 arg2@@72 arg3@@50 arg4@@41)) arg2@@72) :qid |typeInv:MapType6TypeInv2| :pattern ( (MapType6Type arg0@@259 arg1@@120 arg2@@72 arg3@@50 arg4@@41)) ))) (forall ((arg0@@260 T@T) (arg1@@121 T@T) (arg2@@73 T@T) (arg3@@51 T@T) (arg4@@42 T@T) ) (! (= (MapType6TypeInv3 (MapType6Type arg0@@260 arg1@@121 arg2@@73 arg3@@51 arg4@@42)) arg3@@51) :qid |typeInv:MapType6TypeInv3| :pattern ( (MapType6Type arg0@@260 arg1@@121 arg2@@73 arg3@@51 arg4@@42)) ))) (forall ((arg0@@261 T@T) (arg1@@122 T@T) (arg2@@74 T@T) (arg3@@52 T@T) (arg4@@43 T@T) ) (! (= (MapType6TypeInv4 (MapType6Type arg0@@261 arg1@@122 arg2@@74 arg3@@52 arg4@@43)) arg4@@43) :qid |typeInv:MapType6TypeInv4| :pattern ( (MapType6Type arg0@@261 arg1@@122 arg2@@74 arg3@@52 arg4@@43)) ))) (forall ((arg0@@262 T@U) (arg1@@123 T@U) (arg2@@75 T@U) (arg3@@53 T@U) (arg4@@44 T@U) ) (! (let ((aVar4@@1 (MapType6TypeInv4 (type arg0@@262)))) (= (type (MapType6Select arg0@@262 arg1@@123 arg2@@75 arg3@@53 arg4@@44)) aVar4@@1)) :qid |funType:MapType6Select| :pattern ( (MapType6Select arg0@@262 arg1@@123 arg2@@75 arg3@@53 arg4@@44)) ))) (forall ((arg0@@263 T@U) (arg1@@124 T@U) (arg2@@76 T@U) (arg3@@54 T@U) (arg4@@45 T@U) (arg5@@32 T@U) ) (! (let ((aVar4@@2 (type arg5@@32))) (let ((aVar3@@4 (type arg4@@45))) (let ((aVar2@@5 (type arg3@@54))) (let ((aVar1@@6 (type arg2@@76))) (let ((aVar0@@4 (type arg1@@124))) (= (type (MapType6Store arg0@@263 arg1@@124 arg2@@76 arg3@@54 arg4@@45 arg5@@32)) (MapType6Type aVar0@@4 aVar1@@6 aVar2@@5 aVar3@@4 aVar4@@2))))))) :qid |funType:MapType6Store| :pattern ( (MapType6Store arg0@@263 arg1@@124 arg2@@76 arg3@@54 arg4@@45 arg5@@32)) ))) (forall ((m@@74 T@U) (x0@@34 T@U) (x1@@28 T@U) (x2@@24 T@U) (x3@@19 T@U) (val@@35 T@U) ) (! (let ((aVar4@@3 (MapType6TypeInv4 (type m@@74)))) (=> (= (type val@@35) aVar4@@3) (= (MapType6Select (MapType6Store m@@74 x0@@34 x1@@28 x2@@24 x3@@19 val@@35) x0@@34 x1@@28 x2@@24 x3@@19) val@@35))) :qid |mapAx0:MapType6Select| :weight 0 ))) (and (and (and (and (forall ((val@@36 T@U) (m@@75 T@U) (x0@@35 T@U) (x1@@29 T@U) (x2@@25 T@U) (x3@@20 T@U) (y0@@28 T@U) (y1@@24 T@U) (y2@@21 T@U) (y3@@17 T@U) ) (!  (or (= x0@@35 y0@@28) (= (MapType6Select (MapType6Store m@@75 x0@@35 x1@@29 x2@@25 x3@@20 val@@36) y0@@28 y1@@24 y2@@21 y3@@17) (MapType6Select m@@75 y0@@28 y1@@24 y2@@21 y3@@17))) :qid |mapAx1:MapType6Select:0| :weight 0 )) (forall ((val@@37 T@U) (m@@76 T@U) (x0@@36 T@U) (x1@@30 T@U) (x2@@26 T@U) (x3@@21 T@U) (y0@@29 T@U) (y1@@25 T@U) (y2@@22 T@U) (y3@@18 T@U) ) (!  (or (= x1@@30 y1@@25) (= (MapType6Select (MapType6Store m@@76 x0@@36 x1@@30 x2@@26 x3@@21 val@@37) y0@@29 y1@@25 y2@@22 y3@@18) (MapType6Select m@@76 y0@@29 y1@@25 y2@@22 y3@@18))) :qid |mapAx1:MapType6Select:1| :weight 0 ))) (forall ((val@@38 T@U) (m@@77 T@U) (x0@@37 T@U) (x1@@31 T@U) (x2@@27 T@U) (x3@@22 T@U) (y0@@30 T@U) (y1@@26 T@U) (y2@@23 T@U) (y3@@19 T@U) ) (!  (or (= x2@@27 y2@@23) (= (MapType6Select (MapType6Store m@@77 x0@@37 x1@@31 x2@@27 x3@@22 val@@38) y0@@30 y1@@26 y2@@23 y3@@19) (MapType6Select m@@77 y0@@30 y1@@26 y2@@23 y3@@19))) :qid |mapAx1:MapType6Select:2| :weight 0 ))) (forall ((val@@39 T@U) (m@@78 T@U) (x0@@38 T@U) (x1@@32 T@U) (x2@@28 T@U) (x3@@23 T@U) (y0@@31 T@U) (y1@@27 T@U) (y2@@24 T@U) (y3@@20 T@U) ) (!  (or (= x3@@23 y3@@20) (= (MapType6Select (MapType6Store m@@78 x0@@38 x1@@32 x2@@28 x3@@23 val@@39) y0@@31 y1@@27 y2@@24 y3@@20) (MapType6Select m@@78 y0@@31 y1@@27 y2@@24 y3@@20))) :qid |mapAx1:MapType6Select:3| :weight 0 ))) (forall ((val@@40 T@U) (m@@79 T@U) (x0@@39 T@U) (x1@@33 T@U) (x2@@29 T@U) (x3@@24 T@U) (y0@@32 T@U) (y1@@28 T@U) (y2@@25 T@U) (y3@@21 T@U) ) (!  (or true (= (MapType6Select (MapType6Store m@@79 x0@@39 x1@@33 x2@@29 x3@@24 val@@40) y0@@32 y1@@28 y2@@25 y3@@21) (MapType6Select m@@79 y0@@32 y1@@28 y2@@25 y3@@21))) :qid |mapAx2:MapType6Select| :weight 0 )))) (forall ((arg0@@264 T@U) (arg1@@125 T@U) (arg2@@77 T@U) (arg3@@55 T@U) (arg4@@46 T@U) (arg5@@33 T@U) (arg6@@24 T@U) (arg7@@21 T@U) (arg8@@21 T@U) ) (! (= (type (Apply3 arg0@@264 arg1@@125 arg2@@77 arg3@@55 arg4@@46 arg5@@33 arg6@@24 arg7@@21 arg8@@21)) BoxType) :qid |funType:Apply3| :pattern ( (Apply3 arg0@@264 arg1@@125 arg2@@77 arg3@@55 arg4@@46 arg5@@33 arg6@@24 arg7@@21 arg8@@21)) ))) (forall ((arg0@@265 T@U) (arg1@@126 T@U) (arg2@@78 T@U) ) (! (= (type (Handle3 arg0@@265 arg1@@126 arg2@@78)) HandleTypeType) :qid |funType:Handle3| :pattern ( (Handle3 arg0@@265 arg1@@126 arg2@@78)) ))))
(assert (forall ((t0@@91 T@U) (t1@@67 T@U) (t2@@44 T@U) (t3@@29 T@U) (heap@@26 T@U) (h@@51 T@U) (r@@26 T@U) (rd@@14 T@U) (bx0@@55 T@U) (bx1@@41 T@U) (bx2@@27 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@91) TyType) (= (type t1@@67) TyType)) (= (type t2@@44) TyType)) (= (type t3@@29) TyType)) (= (type heap@@26) (MapType0Type refType MapType1Type))) (= (type h@@51) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@26) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@14) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@55) BoxType)) (= (type bx1@@41) BoxType)) (= (type bx2@@27) BoxType)) (= (Apply3 t0@@91 t1@@67 t2@@44 t3@@29 heap@@26 (Handle3 h@@51 r@@26 rd@@14) bx0@@55 bx1@@41 bx2@@27) (MapType6Select h@@51 heap@@26 bx0@@55 bx1@@41 bx2@@27))) :qid |unknown.0:0| :skolemid |997| :pattern ( (Apply3 t0@@91 t1@@67 t2@@44 t3@@29 heap@@26 (Handle3 h@@51 r@@26 rd@@14) bx0@@55 bx1@@41 bx2@@27)) )))
(assert (forall ((t0@@92 T@U) (t1@@68 T@U) (t2@@45 T@U) (t3@@30 T@U) (heap@@27 T@U) (h@@52 T@U) (r@@27 T@U) (rd@@15 T@U) (bx0@@56 T@U) (bx1@@42 T@U) (bx2@@28 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@92) TyType) (= (type t1@@68) TyType)) (= (type t2@@45) TyType)) (= (type t3@@30) TyType)) (= (type heap@@27) (MapType0Type refType MapType1Type))) (= (type h@@52) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@27) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@15) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@56) BoxType)) (= (type bx1@@42) BoxType)) (= (type bx2@@28) BoxType)) (U_2_bool (MapType6Select r@@27 heap@@27 bx0@@56 bx1@@42 bx2@@28))) (Requires3 t0@@92 t1@@68 t2@@45 t3@@30 heap@@27 (Handle3 h@@52 r@@27 rd@@15) bx0@@56 bx1@@42 bx2@@28)) :qid |unknown.0:0| :skolemid |998| :pattern ( (Requires3 t0@@92 t1@@68 t2@@45 t3@@30 heap@@27 (Handle3 h@@52 r@@27 rd@@15) bx0@@56 bx1@@42 bx2@@28)) )))
(assert (forall ((arg0@@266 T@U) (arg1@@127 T@U) (arg2@@79 T@U) (arg3@@56 T@U) (arg4@@47 T@U) (arg5@@34 T@U) (arg6@@25 T@U) (arg7@@22 T@U) (arg8@@22 T@U) ) (! (= (type (Reads3 arg0@@266 arg1@@127 arg2@@79 arg3@@56 arg4@@47 arg5@@34 arg6@@25 arg7@@22 arg8@@22)) (MapType0Type BoxType boolType)) :qid |funType:Reads3| :pattern ( (Reads3 arg0@@266 arg1@@127 arg2@@79 arg3@@56 arg4@@47 arg5@@34 arg6@@25 arg7@@22 arg8@@22)) )))
(assert (forall ((t0@@93 T@U) (t1@@69 T@U) (t2@@46 T@U) (t3@@31 T@U) (heap@@28 T@U) (h@@53 T@U) (r@@28 T@U) (rd@@16 T@U) (bx0@@57 T@U) (bx1@@43 T@U) (bx2@@29 T@U) (bx@@75 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@93) TyType) (= (type t1@@69) TyType)) (= (type t2@@46) TyType)) (= (type t3@@31) TyType)) (= (type heap@@28) (MapType0Type refType MapType1Type))) (= (type h@@53) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType))) (= (type r@@28) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType boolType))) (= (type rd@@16) (MapType6Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@57) BoxType)) (= (type bx1@@43) BoxType)) (= (type bx2@@29) BoxType)) (= (type bx@@75) BoxType)) (= (U_2_bool (MapType0Select (Reads3 t0@@93 t1@@69 t2@@46 t3@@31 heap@@28 (Handle3 h@@53 r@@28 rd@@16) bx0@@57 bx1@@43 bx2@@29) bx@@75)) (U_2_bool (MapType0Select (MapType6Select rd@@16 heap@@28 bx0@@57 bx1@@43 bx2@@29) bx@@75)))) :qid |unknown.0:0| :skolemid |999| :pattern ( (MapType0Select (Reads3 t0@@93 t1@@69 t2@@46 t3@@31 heap@@28 (Handle3 h@@53 r@@28 rd@@16) bx0@@57 bx1@@43 bx2@@29) bx@@75)) )))
(assert (forall ((t0@@94 T@U) (t1@@70 T@U) (t2@@47 T@U) (t3@@32 T@U) (h0@@30 T@U) (h1@@30 T@U) (f@@65 T@U) (bx0@@58 T@U) (bx1@@44 T@U) (bx2@@30 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@94) TyType) (= (type t1@@70) TyType)) (= (type t2@@47) TyType)) (= (type t3@@32) TyType)) (= (type h0@@30) (MapType0Type refType MapType1Type))) (= (type h1@@30) (MapType0Type refType MapType1Type))) (= (type f@@65) HandleTypeType)) (= (type bx0@@58) BoxType)) (= (type bx1@@44) BoxType)) (= (type bx2@@30) BoxType)) (and (and (and ($HeapSucc h0@@30 h1@@30) (and ($IsGoodHeap h0@@30) ($IsGoodHeap h1@@30))) (and (and (and ($IsBox bx0@@58 t0@@94) ($IsBox bx1@@44 t1@@70)) ($IsBox bx2@@30 t2@@47)) ($Is f@@65 (Tclass._System.___hFunc3 t0@@94 t1@@70 t2@@47 t3@@32)))) (forall ((o@@74 T@U) (fld@@29 T@U) ) (! (let ((a@@112 (FieldTypeInv0 (type fld@@29)))) (=> (and (and (= (type o@@74) refType) (= (type fld@@29) (FieldType a@@112))) (and (not (= o@@74 null)) (U_2_bool (MapType0Select (Reads3 t0@@94 t1@@70 t2@@47 t3@@32 h0@@30 f@@65 bx0@@58 bx1@@44 bx2@@30) ($Box o@@74))))) (= (MapType1Select (MapType0Select h0@@30 o@@74) fld@@29) (MapType1Select (MapType0Select h1@@30 o@@74) fld@@29)))) :qid |unknown.0:0| :skolemid |1000| :no-pattern (type o@@74) :no-pattern (type fld@@29) :no-pattern (U_2_int o@@74) :no-pattern (U_2_bool o@@74) :no-pattern (U_2_int fld@@29) :no-pattern (U_2_bool fld@@29) )))) (= (Reads3 t0@@94 t1@@70 t2@@47 t3@@32 h0@@30 f@@65 bx0@@58 bx1@@44 bx2@@30) (Reads3 t0@@94 t1@@70 t2@@47 t3@@32 h1@@30 f@@65 bx0@@58 bx1@@44 bx2@@30))) :qid |unknown.0:0| :skolemid |1001| :pattern ( ($HeapSucc h0@@30 h1@@30) (Reads3 t0@@94 t1@@70 t2@@47 t3@@32 h1@@30 f@@65 bx0@@58 bx1@@44 bx2@@30)) )))
(assert (forall ((t0@@95 T@U) (t1@@71 T@U) (t2@@48 T@U) (t3@@33 T@U) (h0@@31 T@U) (h1@@31 T@U) (f@@66 T@U) (bx0@@59 T@U) (bx1@@45 T@U) (bx2@@31 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@95) TyType) (= (type t1@@71) TyType)) (= (type t2@@48) TyType)) (= (type t3@@33) TyType)) (= (type h0@@31) (MapType0Type refType MapType1Type))) (= (type h1@@31) (MapType0Type refType MapType1Type))) (= (type f@@66) HandleTypeType)) (= (type bx0@@59) BoxType)) (= (type bx1@@45) BoxType)) (= (type bx2@@31) BoxType)) (and (and (and ($HeapSucc h0@@31 h1@@31) (and ($IsGoodHeap h0@@31) ($IsGoodHeap h1@@31))) (and (and (and ($IsBox bx0@@59 t0@@95) ($IsBox bx1@@45 t1@@71)) ($IsBox bx2@@31 t2@@48)) ($Is f@@66 (Tclass._System.___hFunc3 t0@@95 t1@@71 t2@@48 t3@@33)))) (forall ((o@@75 T@U) (fld@@30 T@U) ) (! (let ((a@@113 (FieldTypeInv0 (type fld@@30)))) (=> (and (and (= (type o@@75) refType) (= (type fld@@30) (FieldType a@@113))) (and (not (= o@@75 null)) (U_2_bool (MapType0Select (Reads3 t0@@95 t1@@71 t2@@48 t3@@33 h1@@31 f@@66 bx0@@59 bx1@@45 bx2@@31) ($Box o@@75))))) (= (MapType1Select (MapType0Select h0@@31 o@@75) fld@@30) (MapType1Select (MapType0Select h1@@31 o@@75) fld@@30)))) :qid |unknown.0:0| :skolemid |1002| :no-pattern (type o@@75) :no-pattern (type fld@@30) :no-pattern (U_2_int o@@75) :no-pattern (U_2_bool o@@75) :no-pattern (U_2_int fld@@30) :no-pattern (U_2_bool fld@@30) )))) (= (Reads3 t0@@95 t1@@71 t2@@48 t3@@33 h0@@31 f@@66 bx0@@59 bx1@@45 bx2@@31) (Reads3 t0@@95 t1@@71 t2@@48 t3@@33 h1@@31 f@@66 bx0@@59 bx1@@45 bx2@@31))) :qid |unknown.0:0| :skolemid |1003| :pattern ( ($HeapSucc h0@@31 h1@@31) (Reads3 t0@@95 t1@@71 t2@@48 t3@@33 h1@@31 f@@66 bx0@@59 bx1@@45 bx2@@31)) )))
(assert (forall ((t0@@96 T@U) (t1@@72 T@U) (t2@@49 T@U) (t3@@34 T@U) (h0@@32 T@U) (h1@@32 T@U) (f@@67 T@U) (bx0@@60 T@U) (bx1@@46 T@U) (bx2@@32 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@96) TyType) (= (type t1@@72) TyType)) (= (type t2@@49) TyType)) (= (type t3@@34) TyType)) (= (type h0@@32) (MapType0Type refType MapType1Type))) (= (type h1@@32) (MapType0Type refType MapType1Type))) (= (type f@@67) HandleTypeType)) (= (type bx0@@60) BoxType)) (= (type bx1@@46) BoxType)) (= (type bx2@@32) BoxType)) (and (and (and ($HeapSucc h0@@32 h1@@32) (and ($IsGoodHeap h0@@32) ($IsGoodHeap h1@@32))) (and (and (and ($IsBox bx0@@60 t0@@96) ($IsBox bx1@@46 t1@@72)) ($IsBox bx2@@32 t2@@49)) ($Is f@@67 (Tclass._System.___hFunc3 t0@@96 t1@@72 t2@@49 t3@@34)))) (forall ((o@@76 T@U) (fld@@31 T@U) ) (! (let ((a@@114 (FieldTypeInv0 (type fld@@31)))) (=> (and (and (= (type o@@76) refType) (= (type fld@@31) (FieldType a@@114))) (and (not (= o@@76 null)) (U_2_bool (MapType0Select (Reads3 t0@@96 t1@@72 t2@@49 t3@@34 h0@@32 f@@67 bx0@@60 bx1@@46 bx2@@32) ($Box o@@76))))) (= (MapType1Select (MapType0Select h0@@32 o@@76) fld@@31) (MapType1Select (MapType0Select h1@@32 o@@76) fld@@31)))) :qid |unknown.0:0| :skolemid |1004| :no-pattern (type o@@76) :no-pattern (type fld@@31) :no-pattern (U_2_int o@@76) :no-pattern (U_2_bool o@@76) :no-pattern (U_2_int fld@@31) :no-pattern (U_2_bool fld@@31) )))) (= (Requires3 t0@@96 t1@@72 t2@@49 t3@@34 h0@@32 f@@67 bx0@@60 bx1@@46 bx2@@32) (Requires3 t0@@96 t1@@72 t2@@49 t3@@34 h1@@32 f@@67 bx0@@60 bx1@@46 bx2@@32))) :qid |unknown.0:0| :skolemid |1005| :pattern ( ($HeapSucc h0@@32 h1@@32) (Requires3 t0@@96 t1@@72 t2@@49 t3@@34 h1@@32 f@@67 bx0@@60 bx1@@46 bx2@@32)) )))
(assert (forall ((t0@@97 T@U) (t1@@73 T@U) (t2@@50 T@U) (t3@@35 T@U) (h0@@33 T@U) (h1@@33 T@U) (f@@68 T@U) (bx0@@61 T@U) (bx1@@47 T@U) (bx2@@33 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@97) TyType) (= (type t1@@73) TyType)) (= (type t2@@50) TyType)) (= (type t3@@35) TyType)) (= (type h0@@33) (MapType0Type refType MapType1Type))) (= (type h1@@33) (MapType0Type refType MapType1Type))) (= (type f@@68) HandleTypeType)) (= (type bx0@@61) BoxType)) (= (type bx1@@47) BoxType)) (= (type bx2@@33) BoxType)) (and (and (and ($HeapSucc h0@@33 h1@@33) (and ($IsGoodHeap h0@@33) ($IsGoodHeap h1@@33))) (and (and (and ($IsBox bx0@@61 t0@@97) ($IsBox bx1@@47 t1@@73)) ($IsBox bx2@@33 t2@@50)) ($Is f@@68 (Tclass._System.___hFunc3 t0@@97 t1@@73 t2@@50 t3@@35)))) (forall ((o@@77 T@U) (fld@@32 T@U) ) (! (let ((a@@115 (FieldTypeInv0 (type fld@@32)))) (=> (and (and (= (type o@@77) refType) (= (type fld@@32) (FieldType a@@115))) (and (not (= o@@77 null)) (U_2_bool (MapType0Select (Reads3 t0@@97 t1@@73 t2@@50 t3@@35 h1@@33 f@@68 bx0@@61 bx1@@47 bx2@@33) ($Box o@@77))))) (= (MapType1Select (MapType0Select h0@@33 o@@77) fld@@32) (MapType1Select (MapType0Select h1@@33 o@@77) fld@@32)))) :qid |unknown.0:0| :skolemid |1006| :no-pattern (type o@@77) :no-pattern (type fld@@32) :no-pattern (U_2_int o@@77) :no-pattern (U_2_bool o@@77) :no-pattern (U_2_int fld@@32) :no-pattern (U_2_bool fld@@32) )))) (= (Requires3 t0@@97 t1@@73 t2@@50 t3@@35 h0@@33 f@@68 bx0@@61 bx1@@47 bx2@@33) (Requires3 t0@@97 t1@@73 t2@@50 t3@@35 h1@@33 f@@68 bx0@@61 bx1@@47 bx2@@33))) :qid |unknown.0:0| :skolemid |1007| :pattern ( ($HeapSucc h0@@33 h1@@33) (Requires3 t0@@97 t1@@73 t2@@50 t3@@35 h1@@33 f@@68 bx0@@61 bx1@@47 bx2@@33)) )))
(assert (forall ((t0@@98 T@U) (t1@@74 T@U) (t2@@51 T@U) (t3@@36 T@U) (h0@@34 T@U) (h1@@34 T@U) (f@@69 T@U) (bx0@@62 T@U) (bx1@@48 T@U) (bx2@@34 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@98) TyType) (= (type t1@@74) TyType)) (= (type t2@@51) TyType)) (= (type t3@@36) TyType)) (= (type h0@@34) (MapType0Type refType MapType1Type))) (= (type h1@@34) (MapType0Type refType MapType1Type))) (= (type f@@69) HandleTypeType)) (= (type bx0@@62) BoxType)) (= (type bx1@@48) BoxType)) (= (type bx2@@34) BoxType)) (and (and (and ($HeapSucc h0@@34 h1@@34) (and ($IsGoodHeap h0@@34) ($IsGoodHeap h1@@34))) (and (and (and ($IsBox bx0@@62 t0@@98) ($IsBox bx1@@48 t1@@74)) ($IsBox bx2@@34 t2@@51)) ($Is f@@69 (Tclass._System.___hFunc3 t0@@98 t1@@74 t2@@51 t3@@36)))) (forall ((o@@78 T@U) (fld@@33 T@U) ) (! (let ((a@@116 (FieldTypeInv0 (type fld@@33)))) (=> (and (and (= (type o@@78) refType) (= (type fld@@33) (FieldType a@@116))) (and (not (= o@@78 null)) (U_2_bool (MapType0Select (Reads3 t0@@98 t1@@74 t2@@51 t3@@36 h0@@34 f@@69 bx0@@62 bx1@@48 bx2@@34) ($Box o@@78))))) (= (MapType1Select (MapType0Select h0@@34 o@@78) fld@@33) (MapType1Select (MapType0Select h1@@34 o@@78) fld@@33)))) :qid |unknown.0:0| :skolemid |1008| :no-pattern (type o@@78) :no-pattern (type fld@@33) :no-pattern (U_2_int o@@78) :no-pattern (U_2_bool o@@78) :no-pattern (U_2_int fld@@33) :no-pattern (U_2_bool fld@@33) )))) (= (Apply3 t0@@98 t1@@74 t2@@51 t3@@36 h0@@34 f@@69 bx0@@62 bx1@@48 bx2@@34) (Apply3 t0@@98 t1@@74 t2@@51 t3@@36 h1@@34 f@@69 bx0@@62 bx1@@48 bx2@@34))) :qid |unknown.0:0| :skolemid |1009| :pattern ( ($HeapSucc h0@@34 h1@@34) (Apply3 t0@@98 t1@@74 t2@@51 t3@@36 h1@@34 f@@69 bx0@@62 bx1@@48 bx2@@34)) )))
(assert (forall ((t0@@99 T@U) (t1@@75 T@U) (t2@@52 T@U) (t3@@37 T@U) (h0@@35 T@U) (h1@@35 T@U) (f@@70 T@U) (bx0@@63 T@U) (bx1@@49 T@U) (bx2@@35 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (= (type t0@@99) TyType) (= (type t1@@75) TyType)) (= (type t2@@52) TyType)) (= (type t3@@37) TyType)) (= (type h0@@35) (MapType0Type refType MapType1Type))) (= (type h1@@35) (MapType0Type refType MapType1Type))) (= (type f@@70) HandleTypeType)) (= (type bx0@@63) BoxType)) (= (type bx1@@49) BoxType)) (= (type bx2@@35) BoxType)) (and (and (and ($HeapSucc h0@@35 h1@@35) (and ($IsGoodHeap h0@@35) ($IsGoodHeap h1@@35))) (and (and (and ($IsBox bx0@@63 t0@@99) ($IsBox bx1@@49 t1@@75)) ($IsBox bx2@@35 t2@@52)) ($Is f@@70 (Tclass._System.___hFunc3 t0@@99 t1@@75 t2@@52 t3@@37)))) (forall ((o@@79 T@U) (fld@@34 T@U) ) (! (let ((a@@117 (FieldTypeInv0 (type fld@@34)))) (=> (and (and (= (type o@@79) refType) (= (type fld@@34) (FieldType a@@117))) (and (not (= o@@79 null)) (U_2_bool (MapType0Select (Reads3 t0@@99 t1@@75 t2@@52 t3@@37 h1@@35 f@@70 bx0@@63 bx1@@49 bx2@@35) ($Box o@@79))))) (= (MapType1Select (MapType0Select h0@@35 o@@79) fld@@34) (MapType1Select (MapType0Select h1@@35 o@@79) fld@@34)))) :qid |unknown.0:0| :skolemid |1010| :no-pattern (type o@@79) :no-pattern (type fld@@34) :no-pattern (U_2_int o@@79) :no-pattern (U_2_bool o@@79) :no-pattern (U_2_int fld@@34) :no-pattern (U_2_bool fld@@34) )))) (= (Apply3 t0@@99 t1@@75 t2@@52 t3@@37 h0@@35 f@@70 bx0@@63 bx1@@49 bx2@@35) (Apply3 t0@@99 t1@@75 t2@@52 t3@@37 h1@@35 f@@70 bx0@@63 bx1@@49 bx2@@35))) :qid |unknown.0:0| :skolemid |1011| :pattern ( ($HeapSucc h0@@35 h1@@35) (Apply3 t0@@99 t1@@75 t2@@52 t3@@37 h1@@35 f@@70 bx0@@63 bx1@@49 bx2@@35)) )))
(assert (forall ((t0@@100 T@U) (t1@@76 T@U) (t2@@53 T@U) (t3@@38 T@U) (heap@@29 T@U) (f@@71 T@U) (bx0@@64 T@U) (bx1@@50 T@U) (bx2@@36 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@100) TyType) (= (type t1@@76) TyType)) (= (type t2@@53) TyType)) (= (type t3@@38) TyType)) (= (type heap@@29) (MapType0Type refType MapType1Type))) (= (type f@@71) HandleTypeType)) (= (type bx0@@64) BoxType)) (= (type bx1@@50) BoxType)) (= (type bx2@@36) BoxType)) (and ($IsGoodHeap heap@@29) (and (and (and ($IsBox bx0@@64 t0@@100) ($IsBox bx1@@50 t1@@76)) ($IsBox bx2@@36 t2@@53)) ($Is f@@71 (Tclass._System.___hFunc3 t0@@100 t1@@76 t2@@53 t3@@38))))) (= (|Set#Equal| (Reads3 t0@@100 t1@@76 t2@@53 t3@@38 $OneHeap f@@71 bx0@@64 bx1@@50 bx2@@36) (|Set#Empty| BoxType)) (|Set#Equal| (Reads3 t0@@100 t1@@76 t2@@53 t3@@38 heap@@29 f@@71 bx0@@64 bx1@@50 bx2@@36) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |1012| :pattern ( (Reads3 t0@@100 t1@@76 t2@@53 t3@@38 $OneHeap f@@71 bx0@@64 bx1@@50 bx2@@36) ($IsGoodHeap heap@@29)) :pattern ( (Reads3 t0@@100 t1@@76 t2@@53 t3@@38 heap@@29 f@@71 bx0@@64 bx1@@50 bx2@@36)) )))
(assert (forall ((t0@@101 T@U) (t1@@77 T@U) (t2@@54 T@U) (t3@@39 T@U) (heap@@30 T@U) (f@@72 T@U) (bx0@@65 T@U) (bx1@@51 T@U) (bx2@@37 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type t0@@101) TyType) (= (type t1@@77) TyType)) (= (type t2@@54) TyType)) (= (type t3@@39) TyType)) (= (type heap@@30) (MapType0Type refType MapType1Type))) (= (type f@@72) HandleTypeType)) (= (type bx0@@65) BoxType)) (= (type bx1@@51) BoxType)) (= (type bx2@@37) BoxType)) (and (and ($IsGoodHeap heap@@30) (and (and (and ($IsBox bx0@@65 t0@@101) ($IsBox bx1@@51 t1@@77)) ($IsBox bx2@@37 t2@@54)) ($Is f@@72 (Tclass._System.___hFunc3 t0@@101 t1@@77 t2@@54 t3@@39)))) (|Set#Equal| (Reads3 t0@@101 t1@@77 t2@@54 t3@@39 $OneHeap f@@72 bx0@@65 bx1@@51 bx2@@37) (|Set#Empty| BoxType)))) (= (Requires3 t0@@101 t1@@77 t2@@54 t3@@39 $OneHeap f@@72 bx0@@65 bx1@@51 bx2@@37) (Requires3 t0@@101 t1@@77 t2@@54 t3@@39 heap@@30 f@@72 bx0@@65 bx1@@51 bx2@@37))) :qid |unknown.0:0| :skolemid |1013| :pattern ( (Requires3 t0@@101 t1@@77 t2@@54 t3@@39 $OneHeap f@@72 bx0@@65 bx1@@51 bx2@@37) ($IsGoodHeap heap@@30)) :pattern ( (Requires3 t0@@101 t1@@77 t2@@54 t3@@39 heap@@30 f@@72 bx0@@65 bx1@@51 bx2@@37)) )))
(assert (forall ((f@@73 T@U) (t0@@102 T@U) (t1@@78 T@U) (t2@@55 T@U) (t3@@40 T@U) ) (!  (=> (and (and (and (and (= (type f@@73) HandleTypeType) (= (type t0@@102) TyType)) (= (type t1@@78) TyType)) (= (type t2@@55) TyType)) (= (type t3@@40) TyType)) (= ($Is f@@73 (Tclass._System.___hFunc3 t0@@102 t1@@78 t2@@55 t3@@40)) (forall ((h@@54 T@U) (bx0@@66 T@U) (bx1@@52 T@U) (bx2@@38 T@U) ) (!  (=> (and (and (and (and (= (type h@@54) (MapType0Type refType MapType1Type)) (= (type bx0@@66) BoxType)) (= (type bx1@@52) BoxType)) (= (type bx2@@38) BoxType)) (and (and ($IsGoodHeap h@@54) (and (and ($IsBox bx0@@66 t0@@102) ($IsBox bx1@@52 t1@@78)) ($IsBox bx2@@38 t2@@55))) (Requires3 t0@@102 t1@@78 t2@@55 t3@@40 h@@54 f@@73 bx0@@66 bx1@@52 bx2@@38))) ($IsBox (Apply3 t0@@102 t1@@78 t2@@55 t3@@40 h@@54 f@@73 bx0@@66 bx1@@52 bx2@@38) t3@@40)) :qid |DafnyPreludebpl.545:12| :skolemid |1014| :pattern ( (Apply3 t0@@102 t1@@78 t2@@55 t3@@40 h@@54 f@@73 bx0@@66 bx1@@52 bx2@@38)) )))) :qid |unknown.0:0| :skolemid |1015| :pattern ( ($Is f@@73 (Tclass._System.___hFunc3 t0@@102 t1@@78 t2@@55 t3@@40))) )))
(assert (forall ((f@@74 T@U) (t0@@103 T@U) (t1@@79 T@U) (t2@@56 T@U) (t3@@41 T@U) (u0@@4 T@U) (u1@@3 T@U) (u2@@2 T@U) (u3@@1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@74) HandleTypeType) (= (type t0@@103) TyType)) (= (type t1@@79) TyType)) (= (type t2@@56) TyType)) (= (type t3@@41) TyType)) (= (type u0@@4) TyType)) (= (type u1@@3) TyType)) (= (type u2@@2) TyType)) (= (type u3@@1) TyType)) (and (and (and (and ($Is f@@74 (Tclass._System.___hFunc3 t0@@103 t1@@79 t2@@56 t3@@41)) (forall ((bx@@76 T@U) ) (!  (=> (and (= (type bx@@76) BoxType) ($IsBox bx@@76 u0@@4)) ($IsBox bx@@76 t0@@103)) :qid |unknown.0:0| :skolemid |1016| :pattern ( ($IsBox bx@@76 u0@@4)) :pattern ( ($IsBox bx@@76 t0@@103)) ))) (forall ((bx@@77 T@U) ) (!  (=> (and (= (type bx@@77) BoxType) ($IsBox bx@@77 u1@@3)) ($IsBox bx@@77 t1@@79)) :qid |unknown.0:0| :skolemid |1017| :pattern ( ($IsBox bx@@77 u1@@3)) :pattern ( ($IsBox bx@@77 t1@@79)) ))) (forall ((bx@@78 T@U) ) (!  (=> (and (= (type bx@@78) BoxType) ($IsBox bx@@78 u2@@2)) ($IsBox bx@@78 t2@@56)) :qid |unknown.0:0| :skolemid |1018| :pattern ( ($IsBox bx@@78 u2@@2)) :pattern ( ($IsBox bx@@78 t2@@56)) ))) (forall ((bx@@79 T@U) ) (!  (=> (and (= (type bx@@79) BoxType) ($IsBox bx@@79 t3@@41)) ($IsBox bx@@79 u3@@1)) :qid |unknown.0:0| :skolemid |1019| :pattern ( ($IsBox bx@@79 t3@@41)) :pattern ( ($IsBox bx@@79 u3@@1)) )))) ($Is f@@74 (Tclass._System.___hFunc3 u0@@4 u1@@3 u2@@2 u3@@1))) :qid |unknown.0:0| :skolemid |1020| :pattern ( ($Is f@@74 (Tclass._System.___hFunc3 t0@@103 t1@@79 t2@@56 t3@@41)) ($Is f@@74 (Tclass._System.___hFunc3 u0@@4 u1@@3 u2@@2 u3@@1))) )))
(assert (forall ((f@@75 T@U) (t0@@104 T@U) (t1@@80 T@U) (t2@@57 T@U) (t3@@42 T@U) (h@@55 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@75) HandleTypeType) (= (type t0@@104) TyType)) (= (type t1@@80) TyType)) (= (type t2@@57) TyType)) (= (type t3@@42) TyType)) (= (type h@@55) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@55)) (= ($IsAlloc f@@75 (Tclass._System.___hFunc3 t0@@104 t1@@80 t2@@57 t3@@42) h@@55) (forall ((bx0@@67 T@U) (bx1@@53 T@U) (bx2@@39 T@U) ) (!  (=> (and (and (= (type bx0@@67) BoxType) (= (type bx1@@53) BoxType)) (= (type bx2@@39) BoxType)) (=> (and (and (and (and ($IsBox bx0@@67 t0@@104) ($IsAllocBox bx0@@67 t0@@104 h@@55)) (and ($IsBox bx1@@53 t1@@80) ($IsAllocBox bx1@@53 t1@@80 h@@55))) (and ($IsBox bx2@@39 t2@@57) ($IsAllocBox bx2@@39 t2@@57 h@@55))) (Requires3 t0@@104 t1@@80 t2@@57 t3@@42 h@@55 f@@75 bx0@@67 bx1@@53 bx2@@39)) (forall ((r@@29 T@U) ) (!  (=> (= (type r@@29) refType) (=> (and (not (= r@@29 null)) (U_2_bool (MapType0Select (Reads3 t0@@104 t1@@80 t2@@57 t3@@42 h@@55 f@@75 bx0@@67 bx1@@53 bx2@@39) ($Box r@@29)))) (U_2_bool (MapType1Select (MapType0Select h@@55 r@@29) alloc)))) :qid |unknown.0:0| :skolemid |1021| :pattern ( (MapType0Select (Reads3 t0@@104 t1@@80 t2@@57 t3@@42 h@@55 f@@75 bx0@@67 bx1@@53 bx2@@39) ($Box r@@29))) )))) :qid |unknown.0:0| :skolemid |1022| :pattern ( (Apply3 t0@@104 t1@@80 t2@@57 t3@@42 h@@55 f@@75 bx0@@67 bx1@@53 bx2@@39)) :pattern ( (Reads3 t0@@104 t1@@80 t2@@57 t3@@42 h@@55 f@@75 bx0@@67 bx1@@53 bx2@@39)) )))) :qid |unknown.0:0| :skolemid |1023| :pattern ( ($IsAlloc f@@75 (Tclass._System.___hFunc3 t0@@104 t1@@80 t2@@57 t3@@42) h@@55)) )))
(assert (forall ((f@@76 T@U) (t0@@105 T@U) (t1@@81 T@U) (t2@@58 T@U) (t3@@43 T@U) (h@@56 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@76) HandleTypeType) (= (type t0@@105) TyType)) (= (type t1@@81) TyType)) (= (type t2@@58) TyType)) (= (type t3@@43) TyType)) (= (type h@@56) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@56) ($IsAlloc f@@76 (Tclass._System.___hFunc3 t0@@105 t1@@81 t2@@58 t3@@43) h@@56))) (forall ((bx0@@68 T@U) (bx1@@54 T@U) (bx2@@40 T@U) ) (!  (=> (and (and (= (type bx0@@68) BoxType) (= (type bx1@@54) BoxType)) (= (type bx2@@40) BoxType)) (=> (and (and (and ($IsAllocBox bx0@@68 t0@@105 h@@56) ($IsAllocBox bx1@@54 t1@@81 h@@56)) ($IsAllocBox bx2@@40 t2@@58 h@@56)) (Requires3 t0@@105 t1@@81 t2@@58 t3@@43 h@@56 f@@76 bx0@@68 bx1@@54 bx2@@40)) ($IsAllocBox (Apply3 t0@@105 t1@@81 t2@@58 t3@@43 h@@56 f@@76 bx0@@68 bx1@@54 bx2@@40) t3@@43 h@@56))) :qid |unknown.0:0| :skolemid |1024| :pattern ( (Apply3 t0@@105 t1@@81 t2@@58 t3@@43 h@@56 f@@76 bx0@@68 bx1@@54 bx2@@40)) ))) :qid |unknown.0:0| :skolemid |1025| :pattern ( ($IsAlloc f@@76 (Tclass._System.___hFunc3 t0@@105 t1@@81 t2@@58 t3@@43) h@@56)) )))
(assert (forall ((arg0@@267 T@U) (arg1@@128 T@U) (arg2@@80 T@U) (arg3@@57 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3 arg0@@267 arg1@@128 arg2@@80 arg3@@57)) TyType) :qid |funType:Tclass._System.___hPartialFunc3| :pattern ( (Tclass._System.___hPartialFunc3 arg0@@267 arg1@@128 arg2@@80 arg3@@57)) )))
(assert (forall ((|#$T0@@108| T@U) (|#$T1@@92| T@U) (|#$T2@@73| T@U) (|#$R@@121| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@108|) TyType) (= (type |#$T1@@92|) TyType)) (= (type |#$T2@@73|) TyType)) (= (type |#$R@@121|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3 |#$T0@@108| |#$T1@@92| |#$T2@@73| |#$R@@121|)) Tagclass._System.___hPartialFunc3) (= (TagFamily (Tclass._System.___hPartialFunc3 |#$T0@@108| |#$T1@@92| |#$T2@@73| |#$R@@121|)) |tytagFamily$_#PartialFunc3|))) :qid |unknown.0:0| :skolemid |1026| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@108| |#$T1@@92| |#$T2@@73| |#$R@@121|)) )))
(assert (forall ((arg0@@268 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_0 arg0@@268)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_0| :pattern ( (Tclass._System.___hPartialFunc3_0 arg0@@268)) )))
(assert (forall ((|#$T0@@109| T@U) (|#$T1@@93| T@U) (|#$T2@@74| T@U) (|#$R@@122| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@109|) TyType) (= (type |#$T1@@93|) TyType)) (= (type |#$T2@@74|) TyType)) (= (type |#$R@@122|) TyType)) (= (Tclass._System.___hPartialFunc3_0 (Tclass._System.___hPartialFunc3 |#$T0@@109| |#$T1@@93| |#$T2@@74| |#$R@@122|)) |#$T0@@109|)) :qid |unknown.0:0| :skolemid |1027| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@109| |#$T1@@93| |#$T2@@74| |#$R@@122|)) )))
(assert (forall ((arg0@@269 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_1 arg0@@269)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_1| :pattern ( (Tclass._System.___hPartialFunc3_1 arg0@@269)) )))
(assert (forall ((|#$T0@@110| T@U) (|#$T1@@94| T@U) (|#$T2@@75| T@U) (|#$R@@123| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@110|) TyType) (= (type |#$T1@@94|) TyType)) (= (type |#$T2@@75|) TyType)) (= (type |#$R@@123|) TyType)) (= (Tclass._System.___hPartialFunc3_1 (Tclass._System.___hPartialFunc3 |#$T0@@110| |#$T1@@94| |#$T2@@75| |#$R@@123|)) |#$T1@@94|)) :qid |unknown.0:0| :skolemid |1028| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@110| |#$T1@@94| |#$T2@@75| |#$R@@123|)) )))
(assert (forall ((arg0@@270 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_2 arg0@@270)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_2| :pattern ( (Tclass._System.___hPartialFunc3_2 arg0@@270)) )))
(assert (forall ((|#$T0@@111| T@U) (|#$T1@@95| T@U) (|#$T2@@76| T@U) (|#$R@@124| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@111|) TyType) (= (type |#$T1@@95|) TyType)) (= (type |#$T2@@76|) TyType)) (= (type |#$R@@124|) TyType)) (= (Tclass._System.___hPartialFunc3_2 (Tclass._System.___hPartialFunc3 |#$T0@@111| |#$T1@@95| |#$T2@@76| |#$R@@124|)) |#$T2@@76|)) :qid |unknown.0:0| :skolemid |1029| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@111| |#$T1@@95| |#$T2@@76| |#$R@@124|)) )))
(assert (forall ((arg0@@271 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3_3 arg0@@271)) TyType) :qid |funType:Tclass._System.___hPartialFunc3_3| :pattern ( (Tclass._System.___hPartialFunc3_3 arg0@@271)) )))
(assert (forall ((|#$T0@@112| T@U) (|#$T1@@96| T@U) (|#$T2@@77| T@U) (|#$R@@125| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@112|) TyType) (= (type |#$T1@@96|) TyType)) (= (type |#$T2@@77|) TyType)) (= (type |#$R@@125|) TyType)) (= (Tclass._System.___hPartialFunc3_3 (Tclass._System.___hPartialFunc3 |#$T0@@112| |#$T1@@96| |#$T2@@77| |#$R@@125|)) |#$R@@125|)) :qid |unknown.0:0| :skolemid |1030| :pattern ( (Tclass._System.___hPartialFunc3 |#$T0@@112| |#$T1@@96| |#$T2@@77| |#$R@@125|)) )))
(assert (forall ((|#$T0@@113| T@U) (|#$T1@@97| T@U) (|#$T2@@78| T@U) (|#$R@@126| T@U) (bx@@80 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@113|) TyType) (= (type |#$T1@@97|) TyType)) (= (type |#$T2@@78|) TyType)) (= (type |#$R@@126|) TyType)) (= (type bx@@80) BoxType)) ($IsBox bx@@80 (Tclass._System.___hPartialFunc3 |#$T0@@113| |#$T1@@97| |#$T2@@78| |#$R@@126|))) (and (= ($Box ($Unbox HandleTypeType bx@@80)) bx@@80) ($Is ($Unbox HandleTypeType bx@@80) (Tclass._System.___hPartialFunc3 |#$T0@@113| |#$T1@@97| |#$T2@@78| |#$R@@126|)))) :qid |unknown.0:0| :skolemid |1031| :pattern ( ($IsBox bx@@80 (Tclass._System.___hPartialFunc3 |#$T0@@113| |#$T1@@97| |#$T2@@78| |#$R@@126|))) )))
(assert (forall ((|#$T0@@114| T@U) (|#$T1@@98| T@U) (|#$T2@@79| T@U) (|#$R@@127| T@U) (|f#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@114|) TyType) (= (type |#$T1@@98|) TyType)) (= (type |#$T2@@79|) TyType)) (= (type |#$R@@127|) TyType)) (= (type |f#0@@19|) HandleTypeType)) (= ($Is |f#0@@19| (Tclass._System.___hPartialFunc3 |#$T0@@114| |#$T1@@98| |#$T2@@79| |#$R@@127|))  (and ($Is |f#0@@19| (Tclass._System.___hFunc3 |#$T0@@114| |#$T1@@98| |#$T2@@79| |#$R@@127|)) (forall ((|x0#0@@7| T@U) (|x1#0@@5| T@U) (|x2#0@@3| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@7|) BoxType) (= (type |x1#0@@5|) BoxType)) (= (type |x2#0@@3|) BoxType)) (and (and ($IsBox |x0#0@@7| |#$T0@@114|) ($IsBox |x1#0@@5| |#$T1@@98|)) ($IsBox |x2#0@@3| |#$T2@@79|))) (|Set#Equal| (Reads3 |#$T0@@114| |#$T1@@98| |#$T2@@79| |#$R@@127| $OneHeap |f#0@@19| |x0#0@@7| |x1#0@@5| |x2#0@@3|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1032| :no-pattern (type |x0#0@@7|) :no-pattern (type |x1#0@@5|) :no-pattern (type |x2#0@@3|) :no-pattern (U_2_int |x0#0@@7|) :no-pattern (U_2_bool |x0#0@@7|) :no-pattern (U_2_int |x1#0@@5|) :no-pattern (U_2_bool |x1#0@@5|) :no-pattern (U_2_int |x2#0@@3|) :no-pattern (U_2_bool |x2#0@@3|) ))))) :qid |unknown.0:0| :skolemid |1033| :pattern ( ($Is |f#0@@19| (Tclass._System.___hPartialFunc3 |#$T0@@114| |#$T1@@98| |#$T2@@79| |#$R@@127|))) )))
(assert (forall ((|#$T0@@115| T@U) (|#$T1@@99| T@U) (|#$T2@@80| T@U) (|#$R@@128| T@U) (|f#0@@20| T@U) ($h@@18 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@115|) TyType) (= (type |#$T1@@99|) TyType)) (= (type |#$T2@@80|) TyType)) (= (type |#$R@@128|) TyType)) (= (type |f#0@@20|) HandleTypeType)) (= (type $h@@18) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@20| (Tclass._System.___hPartialFunc3 |#$T0@@115| |#$T1@@99| |#$T2@@80| |#$R@@128|) $h@@18) ($IsAlloc |f#0@@20| (Tclass._System.___hFunc3 |#$T0@@115| |#$T1@@99| |#$T2@@80| |#$R@@128|) $h@@18))) :qid |unknown.0:0| :skolemid |1034| :pattern ( ($IsAlloc |f#0@@20| (Tclass._System.___hPartialFunc3 |#$T0@@115| |#$T1@@99| |#$T2@@80| |#$R@@128|) $h@@18)) )))
(assert (forall ((arg0@@272 T@U) (arg1@@129 T@U) (arg2@@81 T@U) (arg3@@58 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3 arg0@@272 arg1@@129 arg2@@81 arg3@@58)) TyType) :qid |funType:Tclass._System.___hTotalFunc3| :pattern ( (Tclass._System.___hTotalFunc3 arg0@@272 arg1@@129 arg2@@81 arg3@@58)) )))
(assert (forall ((|#$T0@@116| T@U) (|#$T1@@100| T@U) (|#$T2@@81| T@U) (|#$R@@129| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@116|) TyType) (= (type |#$T1@@100|) TyType)) (= (type |#$T2@@81|) TyType)) (= (type |#$R@@129|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3 |#$T0@@116| |#$T1@@100| |#$T2@@81| |#$R@@129|)) Tagclass._System.___hTotalFunc3) (= (TagFamily (Tclass._System.___hTotalFunc3 |#$T0@@116| |#$T1@@100| |#$T2@@81| |#$R@@129|)) |tytagFamily$_#TotalFunc3|))) :qid |unknown.0:0| :skolemid |1035| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@116| |#$T1@@100| |#$T2@@81| |#$R@@129|)) )))
(assert (forall ((arg0@@273 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_0 arg0@@273)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_0| :pattern ( (Tclass._System.___hTotalFunc3_0 arg0@@273)) )))
(assert (forall ((|#$T0@@117| T@U) (|#$T1@@101| T@U) (|#$T2@@82| T@U) (|#$R@@130| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@117|) TyType) (= (type |#$T1@@101|) TyType)) (= (type |#$T2@@82|) TyType)) (= (type |#$R@@130|) TyType)) (= (Tclass._System.___hTotalFunc3_0 (Tclass._System.___hTotalFunc3 |#$T0@@117| |#$T1@@101| |#$T2@@82| |#$R@@130|)) |#$T0@@117|)) :qid |unknown.0:0| :skolemid |1036| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@117| |#$T1@@101| |#$T2@@82| |#$R@@130|)) )))
(assert (forall ((arg0@@274 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_1 arg0@@274)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_1| :pattern ( (Tclass._System.___hTotalFunc3_1 arg0@@274)) )))
(assert (forall ((|#$T0@@118| T@U) (|#$T1@@102| T@U) (|#$T2@@83| T@U) (|#$R@@131| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@118|) TyType) (= (type |#$T1@@102|) TyType)) (= (type |#$T2@@83|) TyType)) (= (type |#$R@@131|) TyType)) (= (Tclass._System.___hTotalFunc3_1 (Tclass._System.___hTotalFunc3 |#$T0@@118| |#$T1@@102| |#$T2@@83| |#$R@@131|)) |#$T1@@102|)) :qid |unknown.0:0| :skolemid |1037| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@118| |#$T1@@102| |#$T2@@83| |#$R@@131|)) )))
(assert (forall ((arg0@@275 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_2 arg0@@275)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_2| :pattern ( (Tclass._System.___hTotalFunc3_2 arg0@@275)) )))
(assert (forall ((|#$T0@@119| T@U) (|#$T1@@103| T@U) (|#$T2@@84| T@U) (|#$R@@132| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@119|) TyType) (= (type |#$T1@@103|) TyType)) (= (type |#$T2@@84|) TyType)) (= (type |#$R@@132|) TyType)) (= (Tclass._System.___hTotalFunc3_2 (Tclass._System.___hTotalFunc3 |#$T0@@119| |#$T1@@103| |#$T2@@84| |#$R@@132|)) |#$T2@@84|)) :qid |unknown.0:0| :skolemid |1038| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@119| |#$T1@@103| |#$T2@@84| |#$R@@132|)) )))
(assert (forall ((arg0@@276 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3_3 arg0@@276)) TyType) :qid |funType:Tclass._System.___hTotalFunc3_3| :pattern ( (Tclass._System.___hTotalFunc3_3 arg0@@276)) )))
(assert (forall ((|#$T0@@120| T@U) (|#$T1@@104| T@U) (|#$T2@@85| T@U) (|#$R@@133| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@120|) TyType) (= (type |#$T1@@104|) TyType)) (= (type |#$T2@@85|) TyType)) (= (type |#$R@@133|) TyType)) (= (Tclass._System.___hTotalFunc3_3 (Tclass._System.___hTotalFunc3 |#$T0@@120| |#$T1@@104| |#$T2@@85| |#$R@@133|)) |#$R@@133|)) :qid |unknown.0:0| :skolemid |1039| :pattern ( (Tclass._System.___hTotalFunc3 |#$T0@@120| |#$T1@@104| |#$T2@@85| |#$R@@133|)) )))
(assert (forall ((|#$T0@@121| T@U) (|#$T1@@105| T@U) (|#$T2@@86| T@U) (|#$R@@134| T@U) (bx@@81 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@121|) TyType) (= (type |#$T1@@105|) TyType)) (= (type |#$T2@@86|) TyType)) (= (type |#$R@@134|) TyType)) (= (type bx@@81) BoxType)) ($IsBox bx@@81 (Tclass._System.___hTotalFunc3 |#$T0@@121| |#$T1@@105| |#$T2@@86| |#$R@@134|))) (and (= ($Box ($Unbox HandleTypeType bx@@81)) bx@@81) ($Is ($Unbox HandleTypeType bx@@81) (Tclass._System.___hTotalFunc3 |#$T0@@121| |#$T1@@105| |#$T2@@86| |#$R@@134|)))) :qid |unknown.0:0| :skolemid |1040| :pattern ( ($IsBox bx@@81 (Tclass._System.___hTotalFunc3 |#$T0@@121| |#$T1@@105| |#$T2@@86| |#$R@@134|))) )))
(assert (forall ((|#$T0@@122| T@U) (|#$T1@@106| T@U) (|#$T2@@87| T@U) (|#$R@@135| T@U) (|f#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@122|) TyType) (= (type |#$T1@@106|) TyType)) (= (type |#$T2@@87|) TyType)) (= (type |#$R@@135|) TyType)) (= (type |f#0@@21|) HandleTypeType)) (= ($Is |f#0@@21| (Tclass._System.___hTotalFunc3 |#$T0@@122| |#$T1@@106| |#$T2@@87| |#$R@@135|))  (and ($Is |f#0@@21| (Tclass._System.___hPartialFunc3 |#$T0@@122| |#$T1@@106| |#$T2@@87| |#$R@@135|)) (forall ((|x0#0@@8| T@U) (|x1#0@@6| T@U) (|x2#0@@4| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@8|) BoxType) (= (type |x1#0@@6|) BoxType)) (= (type |x2#0@@4|) BoxType)) (and (and ($IsBox |x0#0@@8| |#$T0@@122|) ($IsBox |x1#0@@6| |#$T1@@106|)) ($IsBox |x2#0@@4| |#$T2@@87|))) (Requires3 |#$T0@@122| |#$T1@@106| |#$T2@@87| |#$R@@135| $OneHeap |f#0@@21| |x0#0@@8| |x1#0@@6| |x2#0@@4|)) :qid |unknown.0:0| :skolemid |1041| :no-pattern (type |x0#0@@8|) :no-pattern (type |x1#0@@6|) :no-pattern (type |x2#0@@4|) :no-pattern (U_2_int |x0#0@@8|) :no-pattern (U_2_bool |x0#0@@8|) :no-pattern (U_2_int |x1#0@@6|) :no-pattern (U_2_bool |x1#0@@6|) :no-pattern (U_2_int |x2#0@@4|) :no-pattern (U_2_bool |x2#0@@4|) ))))) :qid |unknown.0:0| :skolemid |1042| :pattern ( ($Is |f#0@@21| (Tclass._System.___hTotalFunc3 |#$T0@@122| |#$T1@@106| |#$T2@@87| |#$R@@135|))) )))
(assert (forall ((|#$T0@@123| T@U) (|#$T1@@107| T@U) (|#$T2@@88| T@U) (|#$R@@136| T@U) (|f#0@@22| T@U) ($h@@19 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@123|) TyType) (= (type |#$T1@@107|) TyType)) (= (type |#$T2@@88|) TyType)) (= (type |#$R@@136|) TyType)) (= (type |f#0@@22|) HandleTypeType)) (= (type $h@@19) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@22| (Tclass._System.___hTotalFunc3 |#$T0@@123| |#$T1@@107| |#$T2@@88| |#$R@@136|) $h@@19) ($IsAlloc |f#0@@22| (Tclass._System.___hPartialFunc3 |#$T0@@123| |#$T1@@107| |#$T2@@88| |#$R@@136|) $h@@19))) :qid |unknown.0:0| :skolemid |1043| :pattern ( ($IsAlloc |f#0@@22| (Tclass._System.___hTotalFunc3 |#$T0@@123| |#$T1@@107| |#$T2@@88| |#$R@@136|) $h@@19)) )))
(assert (forall ((arg0@@277 T@U) (arg1@@130 T@U) (arg2@@82 T@U) (arg3@@59 T@U) (arg4@@48 T@U) (arg5@@35 T@U) (arg6@@26 T@U) ) (! (= (type (Tclass._System.___hFunc6 arg0@@277 arg1@@130 arg2@@82 arg3@@59 arg4@@48 arg5@@35 arg6@@26)) TyType) :qid |funType:Tclass._System.___hFunc6| :pattern ( (Tclass._System.___hFunc6 arg0@@277 arg1@@130 arg2@@82 arg3@@59 arg4@@48 arg5@@35 arg6@@26)) )))
(assert (forall ((|#$T0@@124| T@U) (|#$T1@@108| T@U) (|#$T2@@89| T@U) (|#$T3@@67| T@U) (|#$T4@@42| T@U) (|#$T5@@42| T@U) (|#$R@@137| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@124|) TyType) (= (type |#$T1@@108|) TyType)) (= (type |#$T2@@89|) TyType)) (= (type |#$T3@@67|) TyType)) (= (type |#$T4@@42|) TyType)) (= (type |#$T5@@42|) TyType)) (= (type |#$R@@137|) TyType)) (and (= (Tag (Tclass._System.___hFunc6 |#$T0@@124| |#$T1@@108| |#$T2@@89| |#$T3@@67| |#$T4@@42| |#$T5@@42| |#$R@@137|)) Tagclass._System.___hFunc6) (= (TagFamily (Tclass._System.___hFunc6 |#$T0@@124| |#$T1@@108| |#$T2@@89| |#$T3@@67| |#$T4@@42| |#$T5@@42| |#$R@@137|)) |tytagFamily$_#Func6|))) :qid |unknown.0:0| :skolemid |1044| :pattern ( (Tclass._System.___hFunc6 |#$T0@@124| |#$T1@@108| |#$T2@@89| |#$T3@@67| |#$T4@@42| |#$T5@@42| |#$R@@137|)) )))
(assert (forall ((arg0@@278 T@U) ) (! (= (type (Tclass._System.___hFunc6_0 arg0@@278)) TyType) :qid |funType:Tclass._System.___hFunc6_0| :pattern ( (Tclass._System.___hFunc6_0 arg0@@278)) )))
(assert (forall ((|#$T0@@125| T@U) (|#$T1@@109| T@U) (|#$T2@@90| T@U) (|#$T3@@68| T@U) (|#$T4@@43| T@U) (|#$T5@@43| T@U) (|#$R@@138| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@125|) TyType) (= (type |#$T1@@109|) TyType)) (= (type |#$T2@@90|) TyType)) (= (type |#$T3@@68|) TyType)) (= (type |#$T4@@43|) TyType)) (= (type |#$T5@@43|) TyType)) (= (type |#$R@@138|) TyType)) (= (Tclass._System.___hFunc6_0 (Tclass._System.___hFunc6 |#$T0@@125| |#$T1@@109| |#$T2@@90| |#$T3@@68| |#$T4@@43| |#$T5@@43| |#$R@@138|)) |#$T0@@125|)) :qid |unknown.0:0| :skolemid |1045| :pattern ( (Tclass._System.___hFunc6 |#$T0@@125| |#$T1@@109| |#$T2@@90| |#$T3@@68| |#$T4@@43| |#$T5@@43| |#$R@@138|)) )))
(assert (forall ((arg0@@279 T@U) ) (! (= (type (Tclass._System.___hFunc6_1 arg0@@279)) TyType) :qid |funType:Tclass._System.___hFunc6_1| :pattern ( (Tclass._System.___hFunc6_1 arg0@@279)) )))
(assert (forall ((|#$T0@@126| T@U) (|#$T1@@110| T@U) (|#$T2@@91| T@U) (|#$T3@@69| T@U) (|#$T4@@44| T@U) (|#$T5@@44| T@U) (|#$R@@139| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@126|) TyType) (= (type |#$T1@@110|) TyType)) (= (type |#$T2@@91|) TyType)) (= (type |#$T3@@69|) TyType)) (= (type |#$T4@@44|) TyType)) (= (type |#$T5@@44|) TyType)) (= (type |#$R@@139|) TyType)) (= (Tclass._System.___hFunc6_1 (Tclass._System.___hFunc6 |#$T0@@126| |#$T1@@110| |#$T2@@91| |#$T3@@69| |#$T4@@44| |#$T5@@44| |#$R@@139|)) |#$T1@@110|)) :qid |unknown.0:0| :skolemid |1046| :pattern ( (Tclass._System.___hFunc6 |#$T0@@126| |#$T1@@110| |#$T2@@91| |#$T3@@69| |#$T4@@44| |#$T5@@44| |#$R@@139|)) )))
(assert (forall ((arg0@@280 T@U) ) (! (= (type (Tclass._System.___hFunc6_2 arg0@@280)) TyType) :qid |funType:Tclass._System.___hFunc6_2| :pattern ( (Tclass._System.___hFunc6_2 arg0@@280)) )))
(assert (forall ((|#$T0@@127| T@U) (|#$T1@@111| T@U) (|#$T2@@92| T@U) (|#$T3@@70| T@U) (|#$T4@@45| T@U) (|#$T5@@45| T@U) (|#$R@@140| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@127|) TyType) (= (type |#$T1@@111|) TyType)) (= (type |#$T2@@92|) TyType)) (= (type |#$T3@@70|) TyType)) (= (type |#$T4@@45|) TyType)) (= (type |#$T5@@45|) TyType)) (= (type |#$R@@140|) TyType)) (= (Tclass._System.___hFunc6_2 (Tclass._System.___hFunc6 |#$T0@@127| |#$T1@@111| |#$T2@@92| |#$T3@@70| |#$T4@@45| |#$T5@@45| |#$R@@140|)) |#$T2@@92|)) :qid |unknown.0:0| :skolemid |1047| :pattern ( (Tclass._System.___hFunc6 |#$T0@@127| |#$T1@@111| |#$T2@@92| |#$T3@@70| |#$T4@@45| |#$T5@@45| |#$R@@140|)) )))
(assert (forall ((arg0@@281 T@U) ) (! (= (type (Tclass._System.___hFunc6_3 arg0@@281)) TyType) :qid |funType:Tclass._System.___hFunc6_3| :pattern ( (Tclass._System.___hFunc6_3 arg0@@281)) )))
(assert (forall ((|#$T0@@128| T@U) (|#$T1@@112| T@U) (|#$T2@@93| T@U) (|#$T3@@71| T@U) (|#$T4@@46| T@U) (|#$T5@@46| T@U) (|#$R@@141| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@128|) TyType) (= (type |#$T1@@112|) TyType)) (= (type |#$T2@@93|) TyType)) (= (type |#$T3@@71|) TyType)) (= (type |#$T4@@46|) TyType)) (= (type |#$T5@@46|) TyType)) (= (type |#$R@@141|) TyType)) (= (Tclass._System.___hFunc6_3 (Tclass._System.___hFunc6 |#$T0@@128| |#$T1@@112| |#$T2@@93| |#$T3@@71| |#$T4@@46| |#$T5@@46| |#$R@@141|)) |#$T3@@71|)) :qid |unknown.0:0| :skolemid |1048| :pattern ( (Tclass._System.___hFunc6 |#$T0@@128| |#$T1@@112| |#$T2@@93| |#$T3@@71| |#$T4@@46| |#$T5@@46| |#$R@@141|)) )))
(assert (forall ((arg0@@282 T@U) ) (! (= (type (Tclass._System.___hFunc6_4 arg0@@282)) TyType) :qid |funType:Tclass._System.___hFunc6_4| :pattern ( (Tclass._System.___hFunc6_4 arg0@@282)) )))
(assert (forall ((|#$T0@@129| T@U) (|#$T1@@113| T@U) (|#$T2@@94| T@U) (|#$T3@@72| T@U) (|#$T4@@47| T@U) (|#$T5@@47| T@U) (|#$R@@142| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@129|) TyType) (= (type |#$T1@@113|) TyType)) (= (type |#$T2@@94|) TyType)) (= (type |#$T3@@72|) TyType)) (= (type |#$T4@@47|) TyType)) (= (type |#$T5@@47|) TyType)) (= (type |#$R@@142|) TyType)) (= (Tclass._System.___hFunc6_4 (Tclass._System.___hFunc6 |#$T0@@129| |#$T1@@113| |#$T2@@94| |#$T3@@72| |#$T4@@47| |#$T5@@47| |#$R@@142|)) |#$T4@@47|)) :qid |unknown.0:0| :skolemid |1049| :pattern ( (Tclass._System.___hFunc6 |#$T0@@129| |#$T1@@113| |#$T2@@94| |#$T3@@72| |#$T4@@47| |#$T5@@47| |#$R@@142|)) )))
(assert (forall ((arg0@@283 T@U) ) (! (= (type (Tclass._System.___hFunc6_5 arg0@@283)) TyType) :qid |funType:Tclass._System.___hFunc6_5| :pattern ( (Tclass._System.___hFunc6_5 arg0@@283)) )))
(assert (forall ((|#$T0@@130| T@U) (|#$T1@@114| T@U) (|#$T2@@95| T@U) (|#$T3@@73| T@U) (|#$T4@@48| T@U) (|#$T5@@48| T@U) (|#$R@@143| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@130|) TyType) (= (type |#$T1@@114|) TyType)) (= (type |#$T2@@95|) TyType)) (= (type |#$T3@@73|) TyType)) (= (type |#$T4@@48|) TyType)) (= (type |#$T5@@48|) TyType)) (= (type |#$R@@143|) TyType)) (= (Tclass._System.___hFunc6_5 (Tclass._System.___hFunc6 |#$T0@@130| |#$T1@@114| |#$T2@@95| |#$T3@@73| |#$T4@@48| |#$T5@@48| |#$R@@143|)) |#$T5@@48|)) :qid |unknown.0:0| :skolemid |1050| :pattern ( (Tclass._System.___hFunc6 |#$T0@@130| |#$T1@@114| |#$T2@@95| |#$T3@@73| |#$T4@@48| |#$T5@@48| |#$R@@143|)) )))
(assert (forall ((arg0@@284 T@U) ) (! (= (type (Tclass._System.___hFunc6_6 arg0@@284)) TyType) :qid |funType:Tclass._System.___hFunc6_6| :pattern ( (Tclass._System.___hFunc6_6 arg0@@284)) )))
(assert (forall ((|#$T0@@131| T@U) (|#$T1@@115| T@U) (|#$T2@@96| T@U) (|#$T3@@74| T@U) (|#$T4@@49| T@U) (|#$T5@@49| T@U) (|#$R@@144| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@131|) TyType) (= (type |#$T1@@115|) TyType)) (= (type |#$T2@@96|) TyType)) (= (type |#$T3@@74|) TyType)) (= (type |#$T4@@49|) TyType)) (= (type |#$T5@@49|) TyType)) (= (type |#$R@@144|) TyType)) (= (Tclass._System.___hFunc6_6 (Tclass._System.___hFunc6 |#$T0@@131| |#$T1@@115| |#$T2@@96| |#$T3@@74| |#$T4@@49| |#$T5@@49| |#$R@@144|)) |#$R@@144|)) :qid |unknown.0:0| :skolemid |1051| :pattern ( (Tclass._System.___hFunc6 |#$T0@@131| |#$T1@@115| |#$T2@@96| |#$T3@@74| |#$T4@@49| |#$T5@@49| |#$R@@144|)) )))
(assert (forall ((|#$T0@@132| T@U) (|#$T1@@116| T@U) (|#$T2@@97| T@U) (|#$T3@@75| T@U) (|#$T4@@50| T@U) (|#$T5@@50| T@U) (|#$R@@145| T@U) (bx@@82 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@132|) TyType) (= (type |#$T1@@116|) TyType)) (= (type |#$T2@@97|) TyType)) (= (type |#$T3@@75|) TyType)) (= (type |#$T4@@50|) TyType)) (= (type |#$T5@@50|) TyType)) (= (type |#$R@@145|) TyType)) (= (type bx@@82) BoxType)) ($IsBox bx@@82 (Tclass._System.___hFunc6 |#$T0@@132| |#$T1@@116| |#$T2@@97| |#$T3@@75| |#$T4@@50| |#$T5@@50| |#$R@@145|))) (and (= ($Box ($Unbox HandleTypeType bx@@82)) bx@@82) ($Is ($Unbox HandleTypeType bx@@82) (Tclass._System.___hFunc6 |#$T0@@132| |#$T1@@116| |#$T2@@97| |#$T3@@75| |#$T4@@50| |#$T5@@50| |#$R@@145|)))) :qid |unknown.0:0| :skolemid |1052| :pattern ( ($IsBox bx@@82 (Tclass._System.___hFunc6 |#$T0@@132| |#$T1@@116| |#$T2@@97| |#$T3@@75| |#$T4@@50| |#$T5@@50| |#$R@@145|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@285 T@T) (arg1@@131 T@T) (arg2@@83 T@T) (arg3@@60 T@T) (arg4@@49 T@T) (arg5@@36 T@T) (arg6@@27 T@T) (arg7@@23 T@T) ) (! (= (Ctor (MapType7Type arg0@@285 arg1@@131 arg2@@83 arg3@@60 arg4@@49 arg5@@36 arg6@@27 arg7@@23)) 29) :qid |ctor:MapType7Type| )) (forall ((arg0@@286 T@T) (arg1@@132 T@T) (arg2@@84 T@T) (arg3@@61 T@T) (arg4@@50 T@T) (arg5@@37 T@T) (arg6@@28 T@T) (arg7@@24 T@T) ) (! (= (MapType7TypeInv0 (MapType7Type arg0@@286 arg1@@132 arg2@@84 arg3@@61 arg4@@50 arg5@@37 arg6@@28 arg7@@24)) arg0@@286) :qid |typeInv:MapType7TypeInv0| :pattern ( (MapType7Type arg0@@286 arg1@@132 arg2@@84 arg3@@61 arg4@@50 arg5@@37 arg6@@28 arg7@@24)) ))) (forall ((arg0@@287 T@T) (arg1@@133 T@T) (arg2@@85 T@T) (arg3@@62 T@T) (arg4@@51 T@T) (arg5@@38 T@T) (arg6@@29 T@T) (arg7@@25 T@T) ) (! (= (MapType7TypeInv1 (MapType7Type arg0@@287 arg1@@133 arg2@@85 arg3@@62 arg4@@51 arg5@@38 arg6@@29 arg7@@25)) arg1@@133) :qid |typeInv:MapType7TypeInv1| :pattern ( (MapType7Type arg0@@287 arg1@@133 arg2@@85 arg3@@62 arg4@@51 arg5@@38 arg6@@29 arg7@@25)) ))) (forall ((arg0@@288 T@T) (arg1@@134 T@T) (arg2@@86 T@T) (arg3@@63 T@T) (arg4@@52 T@T) (arg5@@39 T@T) (arg6@@30 T@T) (arg7@@26 T@T) ) (! (= (MapType7TypeInv2 (MapType7Type arg0@@288 arg1@@134 arg2@@86 arg3@@63 arg4@@52 arg5@@39 arg6@@30 arg7@@26)) arg2@@86) :qid |typeInv:MapType7TypeInv2| :pattern ( (MapType7Type arg0@@288 arg1@@134 arg2@@86 arg3@@63 arg4@@52 arg5@@39 arg6@@30 arg7@@26)) ))) (forall ((arg0@@289 T@T) (arg1@@135 T@T) (arg2@@87 T@T) (arg3@@64 T@T) (arg4@@53 T@T) (arg5@@40 T@T) (arg6@@31 T@T) (arg7@@27 T@T) ) (! (= (MapType7TypeInv3 (MapType7Type arg0@@289 arg1@@135 arg2@@87 arg3@@64 arg4@@53 arg5@@40 arg6@@31 arg7@@27)) arg3@@64) :qid |typeInv:MapType7TypeInv3| :pattern ( (MapType7Type arg0@@289 arg1@@135 arg2@@87 arg3@@64 arg4@@53 arg5@@40 arg6@@31 arg7@@27)) ))) (forall ((arg0@@290 T@T) (arg1@@136 T@T) (arg2@@88 T@T) (arg3@@65 T@T) (arg4@@54 T@T) (arg5@@41 T@T) (arg6@@32 T@T) (arg7@@28 T@T) ) (! (= (MapType7TypeInv4 (MapType7Type arg0@@290 arg1@@136 arg2@@88 arg3@@65 arg4@@54 arg5@@41 arg6@@32 arg7@@28)) arg4@@54) :qid |typeInv:MapType7TypeInv4| :pattern ( (MapType7Type arg0@@290 arg1@@136 arg2@@88 arg3@@65 arg4@@54 arg5@@41 arg6@@32 arg7@@28)) ))) (forall ((arg0@@291 T@T) (arg1@@137 T@T) (arg2@@89 T@T) (arg3@@66 T@T) (arg4@@55 T@T) (arg5@@42 T@T) (arg6@@33 T@T) (arg7@@29 T@T) ) (! (= (MapType7TypeInv5 (MapType7Type arg0@@291 arg1@@137 arg2@@89 arg3@@66 arg4@@55 arg5@@42 arg6@@33 arg7@@29)) arg5@@42) :qid |typeInv:MapType7TypeInv5| :pattern ( (MapType7Type arg0@@291 arg1@@137 arg2@@89 arg3@@66 arg4@@55 arg5@@42 arg6@@33 arg7@@29)) ))) (forall ((arg0@@292 T@T) (arg1@@138 T@T) (arg2@@90 T@T) (arg3@@67 T@T) (arg4@@56 T@T) (arg5@@43 T@T) (arg6@@34 T@T) (arg7@@30 T@T) ) (! (= (MapType7TypeInv6 (MapType7Type arg0@@292 arg1@@138 arg2@@90 arg3@@67 arg4@@56 arg5@@43 arg6@@34 arg7@@30)) arg6@@34) :qid |typeInv:MapType7TypeInv6| :pattern ( (MapType7Type arg0@@292 arg1@@138 arg2@@90 arg3@@67 arg4@@56 arg5@@43 arg6@@34 arg7@@30)) ))) (forall ((arg0@@293 T@T) (arg1@@139 T@T) (arg2@@91 T@T) (arg3@@68 T@T) (arg4@@57 T@T) (arg5@@44 T@T) (arg6@@35 T@T) (arg7@@31 T@T) ) (! (= (MapType7TypeInv7 (MapType7Type arg0@@293 arg1@@139 arg2@@91 arg3@@68 arg4@@57 arg5@@44 arg6@@35 arg7@@31)) arg7@@31) :qid |typeInv:MapType7TypeInv7| :pattern ( (MapType7Type arg0@@293 arg1@@139 arg2@@91 arg3@@68 arg4@@57 arg5@@44 arg6@@35 arg7@@31)) ))) (forall ((arg0@@294 T@U) (arg1@@140 T@U) (arg2@@92 T@U) (arg3@@69 T@U) (arg4@@58 T@U) (arg5@@45 T@U) (arg6@@36 T@U) (arg7@@32 T@U) ) (! (let ((aVar7@@0 (MapType7TypeInv7 (type arg0@@294)))) (= (type (MapType7Select arg0@@294 arg1@@140 arg2@@92 arg3@@69 arg4@@58 arg5@@45 arg6@@36 arg7@@32)) aVar7@@0)) :qid |funType:MapType7Select| :pattern ( (MapType7Select arg0@@294 arg1@@140 arg2@@92 arg3@@69 arg4@@58 arg5@@45 arg6@@36 arg7@@32)) ))) (forall ((arg0@@295 T@U) (arg1@@141 T@U) (arg2@@93 T@U) (arg3@@70 T@U) (arg4@@59 T@U) (arg5@@46 T@U) (arg6@@37 T@U) (arg7@@33 T@U) (arg8@@23 T@U) ) (! (let ((aVar7@@1 (type arg8@@23))) (let ((aVar6@@0 (type arg7@@33))) (let ((aVar5@@3 (type arg6@@37))) (let ((aVar4@@4 (type arg5@@46))) (let ((aVar3@@5 (type arg4@@59))) (let ((aVar2@@6 (type arg3@@70))) (let ((aVar1@@7 (type arg2@@93))) (let ((aVar0@@5 (type arg1@@141))) (= (type (MapType7Store arg0@@295 arg1@@141 arg2@@93 arg3@@70 arg4@@59 arg5@@46 arg6@@37 arg7@@33 arg8@@23)) (MapType7Type aVar0@@5 aVar1@@7 aVar2@@6 aVar3@@5 aVar4@@4 aVar5@@3 aVar6@@0 aVar7@@1)))))))))) :qid |funType:MapType7Store| :pattern ( (MapType7Store arg0@@295 arg1@@141 arg2@@93 arg3@@70 arg4@@59 arg5@@46 arg6@@37 arg7@@33 arg8@@23)) ))) (forall ((m@@80 T@U) (x0@@40 T@U) (x1@@34 T@U) (x2@@30 T@U) (x3@@25 T@U) (x4@@19 T@U) (x5@@12 T@U) (x6@@12 T@U) (val@@41 T@U) ) (! (let ((aVar7@@2 (MapType7TypeInv7 (type m@@80)))) (=> (= (type val@@41) aVar7@@2) (= (MapType7Select (MapType7Store m@@80 x0@@40 x1@@34 x2@@30 x3@@25 x4@@19 x5@@12 x6@@12 val@@41) x0@@40 x1@@34 x2@@30 x3@@25 x4@@19 x5@@12 x6@@12) val@@41))) :qid |mapAx0:MapType7Select| :weight 0 ))) (and (and (and (and (and (and (and (forall ((val@@42 T@U) (m@@81 T@U) (x0@@41 T@U) (x1@@35 T@U) (x2@@31 T@U) (x3@@26 T@U) (x4@@20 T@U) (x5@@13 T@U) (x6@@13 T@U) (y0@@33 T@U) (y1@@29 T@U) (y2@@26 T@U) (y3@@22 T@U) (y4@@17 T@U) (y5@@11 T@U) (y6@@11 T@U) ) (!  (or (= x0@@41 y0@@33) (= (MapType7Select (MapType7Store m@@81 x0@@41 x1@@35 x2@@31 x3@@26 x4@@20 x5@@13 x6@@13 val@@42) y0@@33 y1@@29 y2@@26 y3@@22 y4@@17 y5@@11 y6@@11) (MapType7Select m@@81 y0@@33 y1@@29 y2@@26 y3@@22 y4@@17 y5@@11 y6@@11))) :qid |mapAx1:MapType7Select:0| :weight 0 )) (forall ((val@@43 T@U) (m@@82 T@U) (x0@@42 T@U) (x1@@36 T@U) (x2@@32 T@U) (x3@@27 T@U) (x4@@21 T@U) (x5@@14 T@U) (x6@@14 T@U) (y0@@34 T@U) (y1@@30 T@U) (y2@@27 T@U) (y3@@23 T@U) (y4@@18 T@U) (y5@@12 T@U) (y6@@12 T@U) ) (!  (or (= x1@@36 y1@@30) (= (MapType7Select (MapType7Store m@@82 x0@@42 x1@@36 x2@@32 x3@@27 x4@@21 x5@@14 x6@@14 val@@43) y0@@34 y1@@30 y2@@27 y3@@23 y4@@18 y5@@12 y6@@12) (MapType7Select m@@82 y0@@34 y1@@30 y2@@27 y3@@23 y4@@18 y5@@12 y6@@12))) :qid |mapAx1:MapType7Select:1| :weight 0 ))) (forall ((val@@44 T@U) (m@@83 T@U) (x0@@43 T@U) (x1@@37 T@U) (x2@@33 T@U) (x3@@28 T@U) (x4@@22 T@U) (x5@@15 T@U) (x6@@15 T@U) (y0@@35 T@U) (y1@@31 T@U) (y2@@28 T@U) (y3@@24 T@U) (y4@@19 T@U) (y5@@13 T@U) (y6@@13 T@U) ) (!  (or (= x2@@33 y2@@28) (= (MapType7Select (MapType7Store m@@83 x0@@43 x1@@37 x2@@33 x3@@28 x4@@22 x5@@15 x6@@15 val@@44) y0@@35 y1@@31 y2@@28 y3@@24 y4@@19 y5@@13 y6@@13) (MapType7Select m@@83 y0@@35 y1@@31 y2@@28 y3@@24 y4@@19 y5@@13 y6@@13))) :qid |mapAx1:MapType7Select:2| :weight 0 ))) (forall ((val@@45 T@U) (m@@84 T@U) (x0@@44 T@U) (x1@@38 T@U) (x2@@34 T@U) (x3@@29 T@U) (x4@@23 T@U) (x5@@16 T@U) (x6@@16 T@U) (y0@@36 T@U) (y1@@32 T@U) (y2@@29 T@U) (y3@@25 T@U) (y4@@20 T@U) (y5@@14 T@U) (y6@@14 T@U) ) (!  (or (= x3@@29 y3@@25) (= (MapType7Select (MapType7Store m@@84 x0@@44 x1@@38 x2@@34 x3@@29 x4@@23 x5@@16 x6@@16 val@@45) y0@@36 y1@@32 y2@@29 y3@@25 y4@@20 y5@@14 y6@@14) (MapType7Select m@@84 y0@@36 y1@@32 y2@@29 y3@@25 y4@@20 y5@@14 y6@@14))) :qid |mapAx1:MapType7Select:3| :weight 0 ))) (forall ((val@@46 T@U) (m@@85 T@U) (x0@@45 T@U) (x1@@39 T@U) (x2@@35 T@U) (x3@@30 T@U) (x4@@24 T@U) (x5@@17 T@U) (x6@@17 T@U) (y0@@37 T@U) (y1@@33 T@U) (y2@@30 T@U) (y3@@26 T@U) (y4@@21 T@U) (y5@@15 T@U) (y6@@15 T@U) ) (!  (or (= x4@@24 y4@@21) (= (MapType7Select (MapType7Store m@@85 x0@@45 x1@@39 x2@@35 x3@@30 x4@@24 x5@@17 x6@@17 val@@46) y0@@37 y1@@33 y2@@30 y3@@26 y4@@21 y5@@15 y6@@15) (MapType7Select m@@85 y0@@37 y1@@33 y2@@30 y3@@26 y4@@21 y5@@15 y6@@15))) :qid |mapAx1:MapType7Select:4| :weight 0 ))) (forall ((val@@47 T@U) (m@@86 T@U) (x0@@46 T@U) (x1@@40 T@U) (x2@@36 T@U) (x3@@31 T@U) (x4@@25 T@U) (x5@@18 T@U) (x6@@18 T@U) (y0@@38 T@U) (y1@@34 T@U) (y2@@31 T@U) (y3@@27 T@U) (y4@@22 T@U) (y5@@16 T@U) (y6@@16 T@U) ) (!  (or (= x5@@18 y5@@16) (= (MapType7Select (MapType7Store m@@86 x0@@46 x1@@40 x2@@36 x3@@31 x4@@25 x5@@18 x6@@18 val@@47) y0@@38 y1@@34 y2@@31 y3@@27 y4@@22 y5@@16 y6@@16) (MapType7Select m@@86 y0@@38 y1@@34 y2@@31 y3@@27 y4@@22 y5@@16 y6@@16))) :qid |mapAx1:MapType7Select:5| :weight 0 ))) (forall ((val@@48 T@U) (m@@87 T@U) (x0@@47 T@U) (x1@@41 T@U) (x2@@37 T@U) (x3@@32 T@U) (x4@@26 T@U) (x5@@19 T@U) (x6@@19 T@U) (y0@@39 T@U) (y1@@35 T@U) (y2@@32 T@U) (y3@@28 T@U) (y4@@23 T@U) (y5@@17 T@U) (y6@@17 T@U) ) (!  (or (= x6@@19 y6@@17) (= (MapType7Select (MapType7Store m@@87 x0@@47 x1@@41 x2@@37 x3@@32 x4@@26 x5@@19 x6@@19 val@@48) y0@@39 y1@@35 y2@@32 y3@@28 y4@@23 y5@@17 y6@@17) (MapType7Select m@@87 y0@@39 y1@@35 y2@@32 y3@@28 y4@@23 y5@@17 y6@@17))) :qid |mapAx1:MapType7Select:6| :weight 0 ))) (forall ((val@@49 T@U) (m@@88 T@U) (x0@@48 T@U) (x1@@42 T@U) (x2@@38 T@U) (x3@@33 T@U) (x4@@27 T@U) (x5@@20 T@U) (x6@@20 T@U) (y0@@40 T@U) (y1@@36 T@U) (y2@@33 T@U) (y3@@29 T@U) (y4@@24 T@U) (y5@@18 T@U) (y6@@18 T@U) ) (!  (or true (= (MapType7Select (MapType7Store m@@88 x0@@48 x1@@42 x2@@38 x3@@33 x4@@27 x5@@20 x6@@20 val@@49) y0@@40 y1@@36 y2@@33 y3@@29 y4@@24 y5@@18 y6@@18) (MapType7Select m@@88 y0@@40 y1@@36 y2@@33 y3@@29 y4@@24 y5@@18 y6@@18))) :qid |mapAx2:MapType7Select| :weight 0 )))) (forall ((arg0@@296 T@U) (arg1@@142 T@U) (arg2@@94 T@U) (arg3@@71 T@U) (arg4@@60 T@U) (arg5@@47 T@U) (arg6@@38 T@U) (arg7@@34 T@U) (arg8@@24 T@U) (arg9@@21 T@U) (arg10@@21 T@U) (arg11@@16 T@U) (arg12@@2 T@U) (arg13@@1 T@U) (arg14@@1 T@U) ) (! (= (type (Apply6 arg0@@296 arg1@@142 arg2@@94 arg3@@71 arg4@@60 arg5@@47 arg6@@38 arg7@@34 arg8@@24 arg9@@21 arg10@@21 arg11@@16 arg12@@2 arg13@@1 arg14@@1)) BoxType) :qid |funType:Apply6| :pattern ( (Apply6 arg0@@296 arg1@@142 arg2@@94 arg3@@71 arg4@@60 arg5@@47 arg6@@38 arg7@@34 arg8@@24 arg9@@21 arg10@@21 arg11@@16 arg12@@2 arg13@@1 arg14@@1)) ))) (forall ((arg0@@297 T@U) (arg1@@143 T@U) (arg2@@95 T@U) ) (! (= (type (Handle6 arg0@@297 arg1@@143 arg2@@95)) HandleTypeType) :qid |funType:Handle6| :pattern ( (Handle6 arg0@@297 arg1@@143 arg2@@95)) ))))
(assert (forall ((t0@@106 T@U) (t1@@82 T@U) (t2@@59 T@U) (t3@@44 T@U) (t4@@29 T@U) (t5@@14 T@U) (t6@@14 T@U) (heap@@31 T@U) (h@@57 T@U) (r@@30 T@U) (rd@@17 T@U) (bx0@@69 T@U) (bx1@@55 T@U) (bx2@@41 T@U) (bx3@@27 T@U) (bx4@@13 T@U) (bx5@@13 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@106) TyType) (= (type t1@@82) TyType)) (= (type t2@@59) TyType)) (= (type t3@@44) TyType)) (= (type t4@@29) TyType)) (= (type t5@@14) TyType)) (= (type t6@@14) TyType)) (= (type heap@@31) (MapType0Type refType MapType1Type))) (= (type h@@57) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@30) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@17) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@69) BoxType)) (= (type bx1@@55) BoxType)) (= (type bx2@@41) BoxType)) (= (type bx3@@27) BoxType)) (= (type bx4@@13) BoxType)) (= (type bx5@@13) BoxType)) (= (Apply6 t0@@106 t1@@82 t2@@59 t3@@44 t4@@29 t5@@14 t6@@14 heap@@31 (Handle6 h@@57 r@@30 rd@@17) bx0@@69 bx1@@55 bx2@@41 bx3@@27 bx4@@13 bx5@@13) (MapType7Select h@@57 heap@@31 bx0@@69 bx1@@55 bx2@@41 bx3@@27 bx4@@13 bx5@@13))) :qid |unknown.0:0| :skolemid |1053| :pattern ( (Apply6 t0@@106 t1@@82 t2@@59 t3@@44 t4@@29 t5@@14 t6@@14 heap@@31 (Handle6 h@@57 r@@30 rd@@17) bx0@@69 bx1@@55 bx2@@41 bx3@@27 bx4@@13 bx5@@13)) )))
(assert (forall ((t0@@107 T@U) (t1@@83 T@U) (t2@@60 T@U) (t3@@45 T@U) (t4@@30 T@U) (t5@@15 T@U) (t6@@15 T@U) (heap@@32 T@U) (h@@58 T@U) (r@@31 T@U) (rd@@18 T@U) (bx0@@70 T@U) (bx1@@56 T@U) (bx2@@42 T@U) (bx3@@28 T@U) (bx4@@14 T@U) (bx5@@14 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@107) TyType) (= (type t1@@83) TyType)) (= (type t2@@60) TyType)) (= (type t3@@45) TyType)) (= (type t4@@30) TyType)) (= (type t5@@15) TyType)) (= (type t6@@15) TyType)) (= (type heap@@32) (MapType0Type refType MapType1Type))) (= (type h@@58) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@31) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@18) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@70) BoxType)) (= (type bx1@@56) BoxType)) (= (type bx2@@42) BoxType)) (= (type bx3@@28) BoxType)) (= (type bx4@@14) BoxType)) (= (type bx5@@14) BoxType)) (U_2_bool (MapType7Select r@@31 heap@@32 bx0@@70 bx1@@56 bx2@@42 bx3@@28 bx4@@14 bx5@@14))) (Requires6 t0@@107 t1@@83 t2@@60 t3@@45 t4@@30 t5@@15 t6@@15 heap@@32 (Handle6 h@@58 r@@31 rd@@18) bx0@@70 bx1@@56 bx2@@42 bx3@@28 bx4@@14 bx5@@14)) :qid |unknown.0:0| :skolemid |1054| :pattern ( (Requires6 t0@@107 t1@@83 t2@@60 t3@@45 t4@@30 t5@@15 t6@@15 heap@@32 (Handle6 h@@58 r@@31 rd@@18) bx0@@70 bx1@@56 bx2@@42 bx3@@28 bx4@@14 bx5@@14)) )))
(assert (forall ((arg0@@298 T@U) (arg1@@144 T@U) (arg2@@96 T@U) (arg3@@72 T@U) (arg4@@61 T@U) (arg5@@48 T@U) (arg6@@39 T@U) (arg7@@35 T@U) (arg8@@25 T@U) (arg9@@22 T@U) (arg10@@22 T@U) (arg11@@17 T@U) (arg12@@3 T@U) (arg13@@2 T@U) (arg14@@2 T@U) ) (! (= (type (Reads6 arg0@@298 arg1@@144 arg2@@96 arg3@@72 arg4@@61 arg5@@48 arg6@@39 arg7@@35 arg8@@25 arg9@@22 arg10@@22 arg11@@17 arg12@@3 arg13@@2 arg14@@2)) (MapType0Type BoxType boolType)) :qid |funType:Reads6| :pattern ( (Reads6 arg0@@298 arg1@@144 arg2@@96 arg3@@72 arg4@@61 arg5@@48 arg6@@39 arg7@@35 arg8@@25 arg9@@22 arg10@@22 arg11@@17 arg12@@3 arg13@@2 arg14@@2)) )))
(assert (forall ((t0@@108 T@U) (t1@@84 T@U) (t2@@61 T@U) (t3@@46 T@U) (t4@@31 T@U) (t5@@16 T@U) (t6@@16 T@U) (heap@@33 T@U) (h@@59 T@U) (r@@32 T@U) (rd@@19 T@U) (bx0@@71 T@U) (bx1@@57 T@U) (bx2@@43 T@U) (bx3@@29 T@U) (bx4@@15 T@U) (bx5@@15 T@U) (bx@@83 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@108) TyType) (= (type t1@@84) TyType)) (= (type t2@@61) TyType)) (= (type t3@@46) TyType)) (= (type t4@@31) TyType)) (= (type t5@@16) TyType)) (= (type t6@@16) TyType)) (= (type heap@@33) (MapType0Type refType MapType1Type))) (= (type h@@59) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@32) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@19) (MapType7Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@71) BoxType)) (= (type bx1@@57) BoxType)) (= (type bx2@@43) BoxType)) (= (type bx3@@29) BoxType)) (= (type bx4@@15) BoxType)) (= (type bx5@@15) BoxType)) (= (type bx@@83) BoxType)) (= (U_2_bool (MapType0Select (Reads6 t0@@108 t1@@84 t2@@61 t3@@46 t4@@31 t5@@16 t6@@16 heap@@33 (Handle6 h@@59 r@@32 rd@@19) bx0@@71 bx1@@57 bx2@@43 bx3@@29 bx4@@15 bx5@@15) bx@@83)) (U_2_bool (MapType0Select (MapType7Select rd@@19 heap@@33 bx0@@71 bx1@@57 bx2@@43 bx3@@29 bx4@@15 bx5@@15) bx@@83)))) :qid |unknown.0:0| :skolemid |1055| :pattern ( (MapType0Select (Reads6 t0@@108 t1@@84 t2@@61 t3@@46 t4@@31 t5@@16 t6@@16 heap@@33 (Handle6 h@@59 r@@32 rd@@19) bx0@@71 bx1@@57 bx2@@43 bx3@@29 bx4@@15 bx5@@15) bx@@83)) )))
(assert (forall ((t0@@109 T@U) (t1@@85 T@U) (t2@@62 T@U) (t3@@47 T@U) (t4@@32 T@U) (t5@@17 T@U) (t6@@17 T@U) (h0@@36 T@U) (h1@@36 T@U) (f@@77 T@U) (bx0@@72 T@U) (bx1@@58 T@U) (bx2@@44 T@U) (bx3@@30 T@U) (bx4@@16 T@U) (bx5@@16 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@109) TyType) (= (type t1@@85) TyType)) (= (type t2@@62) TyType)) (= (type t3@@47) TyType)) (= (type t4@@32) TyType)) (= (type t5@@17) TyType)) (= (type t6@@17) TyType)) (= (type h0@@36) (MapType0Type refType MapType1Type))) (= (type h1@@36) (MapType0Type refType MapType1Type))) (= (type f@@77) HandleTypeType)) (= (type bx0@@72) BoxType)) (= (type bx1@@58) BoxType)) (= (type bx2@@44) BoxType)) (= (type bx3@@30) BoxType)) (= (type bx4@@16) BoxType)) (= (type bx5@@16) BoxType)) (and (and (and ($HeapSucc h0@@36 h1@@36) (and ($IsGoodHeap h0@@36) ($IsGoodHeap h1@@36))) (and (and (and (and (and (and ($IsBox bx0@@72 t0@@109) ($IsBox bx1@@58 t1@@85)) ($IsBox bx2@@44 t2@@62)) ($IsBox bx3@@30 t3@@47)) ($IsBox bx4@@16 t4@@32)) ($IsBox bx5@@16 t5@@17)) ($Is f@@77 (Tclass._System.___hFunc6 t0@@109 t1@@85 t2@@62 t3@@47 t4@@32 t5@@17 t6@@17)))) (forall ((o@@80 T@U) (fld@@35 T@U) ) (! (let ((a@@118 (FieldTypeInv0 (type fld@@35)))) (=> (and (and (= (type o@@80) refType) (= (type fld@@35) (FieldType a@@118))) (and (not (= o@@80 null)) (U_2_bool (MapType0Select (Reads6 t0@@109 t1@@85 t2@@62 t3@@47 t4@@32 t5@@17 t6@@17 h0@@36 f@@77 bx0@@72 bx1@@58 bx2@@44 bx3@@30 bx4@@16 bx5@@16) ($Box o@@80))))) (= (MapType1Select (MapType0Select h0@@36 o@@80) fld@@35) (MapType1Select (MapType0Select h1@@36 o@@80) fld@@35)))) :qid |unknown.0:0| :skolemid |1056| :no-pattern (type o@@80) :no-pattern (type fld@@35) :no-pattern (U_2_int o@@80) :no-pattern (U_2_bool o@@80) :no-pattern (U_2_int fld@@35) :no-pattern (U_2_bool fld@@35) )))) (= (Reads6 t0@@109 t1@@85 t2@@62 t3@@47 t4@@32 t5@@17 t6@@17 h0@@36 f@@77 bx0@@72 bx1@@58 bx2@@44 bx3@@30 bx4@@16 bx5@@16) (Reads6 t0@@109 t1@@85 t2@@62 t3@@47 t4@@32 t5@@17 t6@@17 h1@@36 f@@77 bx0@@72 bx1@@58 bx2@@44 bx3@@30 bx4@@16 bx5@@16))) :qid |unknown.0:0| :skolemid |1057| :pattern ( ($HeapSucc h0@@36 h1@@36) (Reads6 t0@@109 t1@@85 t2@@62 t3@@47 t4@@32 t5@@17 t6@@17 h1@@36 f@@77 bx0@@72 bx1@@58 bx2@@44 bx3@@30 bx4@@16 bx5@@16)) )))
(assert (forall ((t0@@110 T@U) (t1@@86 T@U) (t2@@63 T@U) (t3@@48 T@U) (t4@@33 T@U) (t5@@18 T@U) (t6@@18 T@U) (h0@@37 T@U) (h1@@37 T@U) (f@@78 T@U) (bx0@@73 T@U) (bx1@@59 T@U) (bx2@@45 T@U) (bx3@@31 T@U) (bx4@@17 T@U) (bx5@@17 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@110) TyType) (= (type t1@@86) TyType)) (= (type t2@@63) TyType)) (= (type t3@@48) TyType)) (= (type t4@@33) TyType)) (= (type t5@@18) TyType)) (= (type t6@@18) TyType)) (= (type h0@@37) (MapType0Type refType MapType1Type))) (= (type h1@@37) (MapType0Type refType MapType1Type))) (= (type f@@78) HandleTypeType)) (= (type bx0@@73) BoxType)) (= (type bx1@@59) BoxType)) (= (type bx2@@45) BoxType)) (= (type bx3@@31) BoxType)) (= (type bx4@@17) BoxType)) (= (type bx5@@17) BoxType)) (and (and (and ($HeapSucc h0@@37 h1@@37) (and ($IsGoodHeap h0@@37) ($IsGoodHeap h1@@37))) (and (and (and (and (and (and ($IsBox bx0@@73 t0@@110) ($IsBox bx1@@59 t1@@86)) ($IsBox bx2@@45 t2@@63)) ($IsBox bx3@@31 t3@@48)) ($IsBox bx4@@17 t4@@33)) ($IsBox bx5@@17 t5@@18)) ($Is f@@78 (Tclass._System.___hFunc6 t0@@110 t1@@86 t2@@63 t3@@48 t4@@33 t5@@18 t6@@18)))) (forall ((o@@81 T@U) (fld@@36 T@U) ) (! (let ((a@@119 (FieldTypeInv0 (type fld@@36)))) (=> (and (and (= (type o@@81) refType) (= (type fld@@36) (FieldType a@@119))) (and (not (= o@@81 null)) (U_2_bool (MapType0Select (Reads6 t0@@110 t1@@86 t2@@63 t3@@48 t4@@33 t5@@18 t6@@18 h1@@37 f@@78 bx0@@73 bx1@@59 bx2@@45 bx3@@31 bx4@@17 bx5@@17) ($Box o@@81))))) (= (MapType1Select (MapType0Select h0@@37 o@@81) fld@@36) (MapType1Select (MapType0Select h1@@37 o@@81) fld@@36)))) :qid |unknown.0:0| :skolemid |1058| :no-pattern (type o@@81) :no-pattern (type fld@@36) :no-pattern (U_2_int o@@81) :no-pattern (U_2_bool o@@81) :no-pattern (U_2_int fld@@36) :no-pattern (U_2_bool fld@@36) )))) (= (Reads6 t0@@110 t1@@86 t2@@63 t3@@48 t4@@33 t5@@18 t6@@18 h0@@37 f@@78 bx0@@73 bx1@@59 bx2@@45 bx3@@31 bx4@@17 bx5@@17) (Reads6 t0@@110 t1@@86 t2@@63 t3@@48 t4@@33 t5@@18 t6@@18 h1@@37 f@@78 bx0@@73 bx1@@59 bx2@@45 bx3@@31 bx4@@17 bx5@@17))) :qid |unknown.0:0| :skolemid |1059| :pattern ( ($HeapSucc h0@@37 h1@@37) (Reads6 t0@@110 t1@@86 t2@@63 t3@@48 t4@@33 t5@@18 t6@@18 h1@@37 f@@78 bx0@@73 bx1@@59 bx2@@45 bx3@@31 bx4@@17 bx5@@17)) )))
(assert (forall ((t0@@111 T@U) (t1@@87 T@U) (t2@@64 T@U) (t3@@49 T@U) (t4@@34 T@U) (t5@@19 T@U) (t6@@19 T@U) (h0@@38 T@U) (h1@@38 T@U) (f@@79 T@U) (bx0@@74 T@U) (bx1@@60 T@U) (bx2@@46 T@U) (bx3@@32 T@U) (bx4@@18 T@U) (bx5@@18 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@111) TyType) (= (type t1@@87) TyType)) (= (type t2@@64) TyType)) (= (type t3@@49) TyType)) (= (type t4@@34) TyType)) (= (type t5@@19) TyType)) (= (type t6@@19) TyType)) (= (type h0@@38) (MapType0Type refType MapType1Type))) (= (type h1@@38) (MapType0Type refType MapType1Type))) (= (type f@@79) HandleTypeType)) (= (type bx0@@74) BoxType)) (= (type bx1@@60) BoxType)) (= (type bx2@@46) BoxType)) (= (type bx3@@32) BoxType)) (= (type bx4@@18) BoxType)) (= (type bx5@@18) BoxType)) (and (and (and ($HeapSucc h0@@38 h1@@38) (and ($IsGoodHeap h0@@38) ($IsGoodHeap h1@@38))) (and (and (and (and (and (and ($IsBox bx0@@74 t0@@111) ($IsBox bx1@@60 t1@@87)) ($IsBox bx2@@46 t2@@64)) ($IsBox bx3@@32 t3@@49)) ($IsBox bx4@@18 t4@@34)) ($IsBox bx5@@18 t5@@19)) ($Is f@@79 (Tclass._System.___hFunc6 t0@@111 t1@@87 t2@@64 t3@@49 t4@@34 t5@@19 t6@@19)))) (forall ((o@@82 T@U) (fld@@37 T@U) ) (! (let ((a@@120 (FieldTypeInv0 (type fld@@37)))) (=> (and (and (= (type o@@82) refType) (= (type fld@@37) (FieldType a@@120))) (and (not (= o@@82 null)) (U_2_bool (MapType0Select (Reads6 t0@@111 t1@@87 t2@@64 t3@@49 t4@@34 t5@@19 t6@@19 h0@@38 f@@79 bx0@@74 bx1@@60 bx2@@46 bx3@@32 bx4@@18 bx5@@18) ($Box o@@82))))) (= (MapType1Select (MapType0Select h0@@38 o@@82) fld@@37) (MapType1Select (MapType0Select h1@@38 o@@82) fld@@37)))) :qid |unknown.0:0| :skolemid |1060| :no-pattern (type o@@82) :no-pattern (type fld@@37) :no-pattern (U_2_int o@@82) :no-pattern (U_2_bool o@@82) :no-pattern (U_2_int fld@@37) :no-pattern (U_2_bool fld@@37) )))) (= (Requires6 t0@@111 t1@@87 t2@@64 t3@@49 t4@@34 t5@@19 t6@@19 h0@@38 f@@79 bx0@@74 bx1@@60 bx2@@46 bx3@@32 bx4@@18 bx5@@18) (Requires6 t0@@111 t1@@87 t2@@64 t3@@49 t4@@34 t5@@19 t6@@19 h1@@38 f@@79 bx0@@74 bx1@@60 bx2@@46 bx3@@32 bx4@@18 bx5@@18))) :qid |unknown.0:0| :skolemid |1061| :pattern ( ($HeapSucc h0@@38 h1@@38) (Requires6 t0@@111 t1@@87 t2@@64 t3@@49 t4@@34 t5@@19 t6@@19 h1@@38 f@@79 bx0@@74 bx1@@60 bx2@@46 bx3@@32 bx4@@18 bx5@@18)) )))
(assert (forall ((t0@@112 T@U) (t1@@88 T@U) (t2@@65 T@U) (t3@@50 T@U) (t4@@35 T@U) (t5@@20 T@U) (t6@@20 T@U) (h0@@39 T@U) (h1@@39 T@U) (f@@80 T@U) (bx0@@75 T@U) (bx1@@61 T@U) (bx2@@47 T@U) (bx3@@33 T@U) (bx4@@19 T@U) (bx5@@19 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@112) TyType) (= (type t1@@88) TyType)) (= (type t2@@65) TyType)) (= (type t3@@50) TyType)) (= (type t4@@35) TyType)) (= (type t5@@20) TyType)) (= (type t6@@20) TyType)) (= (type h0@@39) (MapType0Type refType MapType1Type))) (= (type h1@@39) (MapType0Type refType MapType1Type))) (= (type f@@80) HandleTypeType)) (= (type bx0@@75) BoxType)) (= (type bx1@@61) BoxType)) (= (type bx2@@47) BoxType)) (= (type bx3@@33) BoxType)) (= (type bx4@@19) BoxType)) (= (type bx5@@19) BoxType)) (and (and (and ($HeapSucc h0@@39 h1@@39) (and ($IsGoodHeap h0@@39) ($IsGoodHeap h1@@39))) (and (and (and (and (and (and ($IsBox bx0@@75 t0@@112) ($IsBox bx1@@61 t1@@88)) ($IsBox bx2@@47 t2@@65)) ($IsBox bx3@@33 t3@@50)) ($IsBox bx4@@19 t4@@35)) ($IsBox bx5@@19 t5@@20)) ($Is f@@80 (Tclass._System.___hFunc6 t0@@112 t1@@88 t2@@65 t3@@50 t4@@35 t5@@20 t6@@20)))) (forall ((o@@83 T@U) (fld@@38 T@U) ) (! (let ((a@@121 (FieldTypeInv0 (type fld@@38)))) (=> (and (and (= (type o@@83) refType) (= (type fld@@38) (FieldType a@@121))) (and (not (= o@@83 null)) (U_2_bool (MapType0Select (Reads6 t0@@112 t1@@88 t2@@65 t3@@50 t4@@35 t5@@20 t6@@20 h1@@39 f@@80 bx0@@75 bx1@@61 bx2@@47 bx3@@33 bx4@@19 bx5@@19) ($Box o@@83))))) (= (MapType1Select (MapType0Select h0@@39 o@@83) fld@@38) (MapType1Select (MapType0Select h1@@39 o@@83) fld@@38)))) :qid |unknown.0:0| :skolemid |1062| :no-pattern (type o@@83) :no-pattern (type fld@@38) :no-pattern (U_2_int o@@83) :no-pattern (U_2_bool o@@83) :no-pattern (U_2_int fld@@38) :no-pattern (U_2_bool fld@@38) )))) (= (Requires6 t0@@112 t1@@88 t2@@65 t3@@50 t4@@35 t5@@20 t6@@20 h0@@39 f@@80 bx0@@75 bx1@@61 bx2@@47 bx3@@33 bx4@@19 bx5@@19) (Requires6 t0@@112 t1@@88 t2@@65 t3@@50 t4@@35 t5@@20 t6@@20 h1@@39 f@@80 bx0@@75 bx1@@61 bx2@@47 bx3@@33 bx4@@19 bx5@@19))) :qid |unknown.0:0| :skolemid |1063| :pattern ( ($HeapSucc h0@@39 h1@@39) (Requires6 t0@@112 t1@@88 t2@@65 t3@@50 t4@@35 t5@@20 t6@@20 h1@@39 f@@80 bx0@@75 bx1@@61 bx2@@47 bx3@@33 bx4@@19 bx5@@19)) )))
(assert (forall ((t0@@113 T@U) (t1@@89 T@U) (t2@@66 T@U) (t3@@51 T@U) (t4@@36 T@U) (t5@@21 T@U) (t6@@21 T@U) (h0@@40 T@U) (h1@@40 T@U) (f@@81 T@U) (bx0@@76 T@U) (bx1@@62 T@U) (bx2@@48 T@U) (bx3@@34 T@U) (bx4@@20 T@U) (bx5@@20 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@113) TyType) (= (type t1@@89) TyType)) (= (type t2@@66) TyType)) (= (type t3@@51) TyType)) (= (type t4@@36) TyType)) (= (type t5@@21) TyType)) (= (type t6@@21) TyType)) (= (type h0@@40) (MapType0Type refType MapType1Type))) (= (type h1@@40) (MapType0Type refType MapType1Type))) (= (type f@@81) HandleTypeType)) (= (type bx0@@76) BoxType)) (= (type bx1@@62) BoxType)) (= (type bx2@@48) BoxType)) (= (type bx3@@34) BoxType)) (= (type bx4@@20) BoxType)) (= (type bx5@@20) BoxType)) (and (and (and ($HeapSucc h0@@40 h1@@40) (and ($IsGoodHeap h0@@40) ($IsGoodHeap h1@@40))) (and (and (and (and (and (and ($IsBox bx0@@76 t0@@113) ($IsBox bx1@@62 t1@@89)) ($IsBox bx2@@48 t2@@66)) ($IsBox bx3@@34 t3@@51)) ($IsBox bx4@@20 t4@@36)) ($IsBox bx5@@20 t5@@21)) ($Is f@@81 (Tclass._System.___hFunc6 t0@@113 t1@@89 t2@@66 t3@@51 t4@@36 t5@@21 t6@@21)))) (forall ((o@@84 T@U) (fld@@39 T@U) ) (! (let ((a@@122 (FieldTypeInv0 (type fld@@39)))) (=> (and (and (= (type o@@84) refType) (= (type fld@@39) (FieldType a@@122))) (and (not (= o@@84 null)) (U_2_bool (MapType0Select (Reads6 t0@@113 t1@@89 t2@@66 t3@@51 t4@@36 t5@@21 t6@@21 h0@@40 f@@81 bx0@@76 bx1@@62 bx2@@48 bx3@@34 bx4@@20 bx5@@20) ($Box o@@84))))) (= (MapType1Select (MapType0Select h0@@40 o@@84) fld@@39) (MapType1Select (MapType0Select h1@@40 o@@84) fld@@39)))) :qid |unknown.0:0| :skolemid |1064| :no-pattern (type o@@84) :no-pattern (type fld@@39) :no-pattern (U_2_int o@@84) :no-pattern (U_2_bool o@@84) :no-pattern (U_2_int fld@@39) :no-pattern (U_2_bool fld@@39) )))) (= (Apply6 t0@@113 t1@@89 t2@@66 t3@@51 t4@@36 t5@@21 t6@@21 h0@@40 f@@81 bx0@@76 bx1@@62 bx2@@48 bx3@@34 bx4@@20 bx5@@20) (Apply6 t0@@113 t1@@89 t2@@66 t3@@51 t4@@36 t5@@21 t6@@21 h1@@40 f@@81 bx0@@76 bx1@@62 bx2@@48 bx3@@34 bx4@@20 bx5@@20))) :qid |unknown.0:0| :skolemid |1065| :pattern ( ($HeapSucc h0@@40 h1@@40) (Apply6 t0@@113 t1@@89 t2@@66 t3@@51 t4@@36 t5@@21 t6@@21 h1@@40 f@@81 bx0@@76 bx1@@62 bx2@@48 bx3@@34 bx4@@20 bx5@@20)) )))
(assert (forall ((t0@@114 T@U) (t1@@90 T@U) (t2@@67 T@U) (t3@@52 T@U) (t4@@37 T@U) (t5@@22 T@U) (t6@@22 T@U) (h0@@41 T@U) (h1@@41 T@U) (f@@82 T@U) (bx0@@77 T@U) (bx1@@63 T@U) (bx2@@49 T@U) (bx3@@35 T@U) (bx4@@21 T@U) (bx5@@21 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@114) TyType) (= (type t1@@90) TyType)) (= (type t2@@67) TyType)) (= (type t3@@52) TyType)) (= (type t4@@37) TyType)) (= (type t5@@22) TyType)) (= (type t6@@22) TyType)) (= (type h0@@41) (MapType0Type refType MapType1Type))) (= (type h1@@41) (MapType0Type refType MapType1Type))) (= (type f@@82) HandleTypeType)) (= (type bx0@@77) BoxType)) (= (type bx1@@63) BoxType)) (= (type bx2@@49) BoxType)) (= (type bx3@@35) BoxType)) (= (type bx4@@21) BoxType)) (= (type bx5@@21) BoxType)) (and (and (and ($HeapSucc h0@@41 h1@@41) (and ($IsGoodHeap h0@@41) ($IsGoodHeap h1@@41))) (and (and (and (and (and (and ($IsBox bx0@@77 t0@@114) ($IsBox bx1@@63 t1@@90)) ($IsBox bx2@@49 t2@@67)) ($IsBox bx3@@35 t3@@52)) ($IsBox bx4@@21 t4@@37)) ($IsBox bx5@@21 t5@@22)) ($Is f@@82 (Tclass._System.___hFunc6 t0@@114 t1@@90 t2@@67 t3@@52 t4@@37 t5@@22 t6@@22)))) (forall ((o@@85 T@U) (fld@@40 T@U) ) (! (let ((a@@123 (FieldTypeInv0 (type fld@@40)))) (=> (and (and (= (type o@@85) refType) (= (type fld@@40) (FieldType a@@123))) (and (not (= o@@85 null)) (U_2_bool (MapType0Select (Reads6 t0@@114 t1@@90 t2@@67 t3@@52 t4@@37 t5@@22 t6@@22 h1@@41 f@@82 bx0@@77 bx1@@63 bx2@@49 bx3@@35 bx4@@21 bx5@@21) ($Box o@@85))))) (= (MapType1Select (MapType0Select h0@@41 o@@85) fld@@40) (MapType1Select (MapType0Select h1@@41 o@@85) fld@@40)))) :qid |unknown.0:0| :skolemid |1066| :no-pattern (type o@@85) :no-pattern (type fld@@40) :no-pattern (U_2_int o@@85) :no-pattern (U_2_bool o@@85) :no-pattern (U_2_int fld@@40) :no-pattern (U_2_bool fld@@40) )))) (= (Apply6 t0@@114 t1@@90 t2@@67 t3@@52 t4@@37 t5@@22 t6@@22 h0@@41 f@@82 bx0@@77 bx1@@63 bx2@@49 bx3@@35 bx4@@21 bx5@@21) (Apply6 t0@@114 t1@@90 t2@@67 t3@@52 t4@@37 t5@@22 t6@@22 h1@@41 f@@82 bx0@@77 bx1@@63 bx2@@49 bx3@@35 bx4@@21 bx5@@21))) :qid |unknown.0:0| :skolemid |1067| :pattern ( ($HeapSucc h0@@41 h1@@41) (Apply6 t0@@114 t1@@90 t2@@67 t3@@52 t4@@37 t5@@22 t6@@22 h1@@41 f@@82 bx0@@77 bx1@@63 bx2@@49 bx3@@35 bx4@@21 bx5@@21)) )))
(assert (forall ((t0@@115 T@U) (t1@@91 T@U) (t2@@68 T@U) (t3@@53 T@U) (t4@@38 T@U) (t5@@23 T@U) (t6@@23 T@U) (heap@@34 T@U) (f@@83 T@U) (bx0@@78 T@U) (bx1@@64 T@U) (bx2@@50 T@U) (bx3@@36 T@U) (bx4@@22 T@U) (bx5@@22 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@115) TyType) (= (type t1@@91) TyType)) (= (type t2@@68) TyType)) (= (type t3@@53) TyType)) (= (type t4@@38) TyType)) (= (type t5@@23) TyType)) (= (type t6@@23) TyType)) (= (type heap@@34) (MapType0Type refType MapType1Type))) (= (type f@@83) HandleTypeType)) (= (type bx0@@78) BoxType)) (= (type bx1@@64) BoxType)) (= (type bx2@@50) BoxType)) (= (type bx3@@36) BoxType)) (= (type bx4@@22) BoxType)) (= (type bx5@@22) BoxType)) (and ($IsGoodHeap heap@@34) (and (and (and (and (and (and ($IsBox bx0@@78 t0@@115) ($IsBox bx1@@64 t1@@91)) ($IsBox bx2@@50 t2@@68)) ($IsBox bx3@@36 t3@@53)) ($IsBox bx4@@22 t4@@38)) ($IsBox bx5@@22 t5@@23)) ($Is f@@83 (Tclass._System.___hFunc6 t0@@115 t1@@91 t2@@68 t3@@53 t4@@38 t5@@23 t6@@23))))) (= (|Set#Equal| (Reads6 t0@@115 t1@@91 t2@@68 t3@@53 t4@@38 t5@@23 t6@@23 $OneHeap f@@83 bx0@@78 bx1@@64 bx2@@50 bx3@@36 bx4@@22 bx5@@22) (|Set#Empty| BoxType)) (|Set#Equal| (Reads6 t0@@115 t1@@91 t2@@68 t3@@53 t4@@38 t5@@23 t6@@23 heap@@34 f@@83 bx0@@78 bx1@@64 bx2@@50 bx3@@36 bx4@@22 bx5@@22) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |1068| :pattern ( (Reads6 t0@@115 t1@@91 t2@@68 t3@@53 t4@@38 t5@@23 t6@@23 $OneHeap f@@83 bx0@@78 bx1@@64 bx2@@50 bx3@@36 bx4@@22 bx5@@22) ($IsGoodHeap heap@@34)) :pattern ( (Reads6 t0@@115 t1@@91 t2@@68 t3@@53 t4@@38 t5@@23 t6@@23 heap@@34 f@@83 bx0@@78 bx1@@64 bx2@@50 bx3@@36 bx4@@22 bx5@@22)) )))
(assert (forall ((t0@@116 T@U) (t1@@92 T@U) (t2@@69 T@U) (t3@@54 T@U) (t4@@39 T@U) (t5@@24 T@U) (t6@@24 T@U) (heap@@35 T@U) (f@@84 T@U) (bx0@@79 T@U) (bx1@@65 T@U) (bx2@@51 T@U) (bx3@@37 T@U) (bx4@@23 T@U) (bx5@@23 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@116) TyType) (= (type t1@@92) TyType)) (= (type t2@@69) TyType)) (= (type t3@@54) TyType)) (= (type t4@@39) TyType)) (= (type t5@@24) TyType)) (= (type t6@@24) TyType)) (= (type heap@@35) (MapType0Type refType MapType1Type))) (= (type f@@84) HandleTypeType)) (= (type bx0@@79) BoxType)) (= (type bx1@@65) BoxType)) (= (type bx2@@51) BoxType)) (= (type bx3@@37) BoxType)) (= (type bx4@@23) BoxType)) (= (type bx5@@23) BoxType)) (and (and ($IsGoodHeap heap@@35) (and (and (and (and (and (and ($IsBox bx0@@79 t0@@116) ($IsBox bx1@@65 t1@@92)) ($IsBox bx2@@51 t2@@69)) ($IsBox bx3@@37 t3@@54)) ($IsBox bx4@@23 t4@@39)) ($IsBox bx5@@23 t5@@24)) ($Is f@@84 (Tclass._System.___hFunc6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@24)))) (|Set#Equal| (Reads6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@24 $OneHeap f@@84 bx0@@79 bx1@@65 bx2@@51 bx3@@37 bx4@@23 bx5@@23) (|Set#Empty| BoxType)))) (= (Requires6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@24 $OneHeap f@@84 bx0@@79 bx1@@65 bx2@@51 bx3@@37 bx4@@23 bx5@@23) (Requires6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@24 heap@@35 f@@84 bx0@@79 bx1@@65 bx2@@51 bx3@@37 bx4@@23 bx5@@23))) :qid |unknown.0:0| :skolemid |1069| :pattern ( (Requires6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@24 $OneHeap f@@84 bx0@@79 bx1@@65 bx2@@51 bx3@@37 bx4@@23 bx5@@23) ($IsGoodHeap heap@@35)) :pattern ( (Requires6 t0@@116 t1@@92 t2@@69 t3@@54 t4@@39 t5@@24 t6@@24 heap@@35 f@@84 bx0@@79 bx1@@65 bx2@@51 bx3@@37 bx4@@23 bx5@@23)) )))
(assert (forall ((f@@85 T@U) (t0@@117 T@U) (t1@@93 T@U) (t2@@70 T@U) (t3@@55 T@U) (t4@@40 T@U) (t5@@25 T@U) (t6@@25 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type f@@85) HandleTypeType) (= (type t0@@117) TyType)) (= (type t1@@93) TyType)) (= (type t2@@70) TyType)) (= (type t3@@55) TyType)) (= (type t4@@40) TyType)) (= (type t5@@25) TyType)) (= (type t6@@25) TyType)) (= ($Is f@@85 (Tclass._System.___hFunc6 t0@@117 t1@@93 t2@@70 t3@@55 t4@@40 t5@@25 t6@@25)) (forall ((h@@60 T@U) (bx0@@80 T@U) (bx1@@66 T@U) (bx2@@52 T@U) (bx3@@38 T@U) (bx4@@24 T@U) (bx5@@24 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type h@@60) (MapType0Type refType MapType1Type)) (= (type bx0@@80) BoxType)) (= (type bx1@@66) BoxType)) (= (type bx2@@52) BoxType)) (= (type bx3@@38) BoxType)) (= (type bx4@@24) BoxType)) (= (type bx5@@24) BoxType)) (and (and ($IsGoodHeap h@@60) (and (and (and (and (and ($IsBox bx0@@80 t0@@117) ($IsBox bx1@@66 t1@@93)) ($IsBox bx2@@52 t2@@70)) ($IsBox bx3@@38 t3@@55)) ($IsBox bx4@@24 t4@@40)) ($IsBox bx5@@24 t5@@25))) (Requires6 t0@@117 t1@@93 t2@@70 t3@@55 t4@@40 t5@@25 t6@@25 h@@60 f@@85 bx0@@80 bx1@@66 bx2@@52 bx3@@38 bx4@@24 bx5@@24))) ($IsBox (Apply6 t0@@117 t1@@93 t2@@70 t3@@55 t4@@40 t5@@25 t6@@25 h@@60 f@@85 bx0@@80 bx1@@66 bx2@@52 bx3@@38 bx4@@24 bx5@@24) t6@@25)) :qid |DafnyPreludebpl.545:12| :skolemid |1070| :pattern ( (Apply6 t0@@117 t1@@93 t2@@70 t3@@55 t4@@40 t5@@25 t6@@25 h@@60 f@@85 bx0@@80 bx1@@66 bx2@@52 bx3@@38 bx4@@24 bx5@@24)) )))) :qid |unknown.0:0| :skolemid |1071| :pattern ( ($Is f@@85 (Tclass._System.___hFunc6 t0@@117 t1@@93 t2@@70 t3@@55 t4@@40 t5@@25 t6@@25))) )))
(assert (forall ((f@@86 T@U) (t0@@118 T@U) (t1@@94 T@U) (t2@@71 T@U) (t3@@56 T@U) (t4@@41 T@U) (t5@@26 T@U) (t6@@26 T@U) (u0@@5 T@U) (u1@@4 T@U) (u2@@3 T@U) (u3@@2 T@U) (u4@@1 T@U) (u5@@0 T@U) (u6@@0 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type f@@86) HandleTypeType) (= (type t0@@118) TyType)) (= (type t1@@94) TyType)) (= (type t2@@71) TyType)) (= (type t3@@56) TyType)) (= (type t4@@41) TyType)) (= (type t5@@26) TyType)) (= (type t6@@26) TyType)) (= (type u0@@5) TyType)) (= (type u1@@4) TyType)) (= (type u2@@3) TyType)) (= (type u3@@2) TyType)) (= (type u4@@1) TyType)) (= (type u5@@0) TyType)) (= (type u6@@0) TyType)) (and (and (and (and (and (and (and ($Is f@@86 (Tclass._System.___hFunc6 t0@@118 t1@@94 t2@@71 t3@@56 t4@@41 t5@@26 t6@@26)) (forall ((bx@@84 T@U) ) (!  (=> (and (= (type bx@@84) BoxType) ($IsBox bx@@84 u0@@5)) ($IsBox bx@@84 t0@@118)) :qid |unknown.0:0| :skolemid |1072| :pattern ( ($IsBox bx@@84 u0@@5)) :pattern ( ($IsBox bx@@84 t0@@118)) ))) (forall ((bx@@85 T@U) ) (!  (=> (and (= (type bx@@85) BoxType) ($IsBox bx@@85 u1@@4)) ($IsBox bx@@85 t1@@94)) :qid |unknown.0:0| :skolemid |1073| :pattern ( ($IsBox bx@@85 u1@@4)) :pattern ( ($IsBox bx@@85 t1@@94)) ))) (forall ((bx@@86 T@U) ) (!  (=> (and (= (type bx@@86) BoxType) ($IsBox bx@@86 u2@@3)) ($IsBox bx@@86 t2@@71)) :qid |unknown.0:0| :skolemid |1074| :pattern ( ($IsBox bx@@86 u2@@3)) :pattern ( ($IsBox bx@@86 t2@@71)) ))) (forall ((bx@@87 T@U) ) (!  (=> (and (= (type bx@@87) BoxType) ($IsBox bx@@87 u3@@2)) ($IsBox bx@@87 t3@@56)) :qid |unknown.0:0| :skolemid |1075| :pattern ( ($IsBox bx@@87 u3@@2)) :pattern ( ($IsBox bx@@87 t3@@56)) ))) (forall ((bx@@88 T@U) ) (!  (=> (and (= (type bx@@88) BoxType) ($IsBox bx@@88 u4@@1)) ($IsBox bx@@88 t4@@41)) :qid |unknown.0:0| :skolemid |1076| :pattern ( ($IsBox bx@@88 u4@@1)) :pattern ( ($IsBox bx@@88 t4@@41)) ))) (forall ((bx@@89 T@U) ) (!  (=> (and (= (type bx@@89) BoxType) ($IsBox bx@@89 u5@@0)) ($IsBox bx@@89 t5@@26)) :qid |unknown.0:0| :skolemid |1077| :pattern ( ($IsBox bx@@89 u5@@0)) :pattern ( ($IsBox bx@@89 t5@@26)) ))) (forall ((bx@@90 T@U) ) (!  (=> (and (= (type bx@@90) BoxType) ($IsBox bx@@90 t6@@26)) ($IsBox bx@@90 u6@@0)) :qid |unknown.0:0| :skolemid |1078| :pattern ( ($IsBox bx@@90 t6@@26)) :pattern ( ($IsBox bx@@90 u6@@0)) )))) ($Is f@@86 (Tclass._System.___hFunc6 u0@@5 u1@@4 u2@@3 u3@@2 u4@@1 u5@@0 u6@@0))) :qid |unknown.0:0| :skolemid |1079| :pattern ( ($Is f@@86 (Tclass._System.___hFunc6 t0@@118 t1@@94 t2@@71 t3@@56 t4@@41 t5@@26 t6@@26)) ($Is f@@86 (Tclass._System.___hFunc6 u0@@5 u1@@4 u2@@3 u3@@2 u4@@1 u5@@0 u6@@0))) )))
(assert (forall ((f@@87 T@U) (t0@@119 T@U) (t1@@95 T@U) (t2@@72 T@U) (t3@@57 T@U) (t4@@42 T@U) (t5@@27 T@U) (t6@@27 T@U) (h@@61 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@87) HandleTypeType) (= (type t0@@119) TyType)) (= (type t1@@95) TyType)) (= (type t2@@72) TyType)) (= (type t3@@57) TyType)) (= (type t4@@42) TyType)) (= (type t5@@27) TyType)) (= (type t6@@27) TyType)) (= (type h@@61) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@61)) (= ($IsAlloc f@@87 (Tclass._System.___hFunc6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@27) h@@61) (forall ((bx0@@81 T@U) (bx1@@67 T@U) (bx2@@53 T@U) (bx3@@39 T@U) (bx4@@25 T@U) (bx5@@25 T@U) ) (!  (=> (and (and (and (and (and (= (type bx0@@81) BoxType) (= (type bx1@@67) BoxType)) (= (type bx2@@53) BoxType)) (= (type bx3@@39) BoxType)) (= (type bx4@@25) BoxType)) (= (type bx5@@25) BoxType)) (=> (and (and (and (and (and (and (and ($IsBox bx0@@81 t0@@119) ($IsAllocBox bx0@@81 t0@@119 h@@61)) (and ($IsBox bx1@@67 t1@@95) ($IsAllocBox bx1@@67 t1@@95 h@@61))) (and ($IsBox bx2@@53 t2@@72) ($IsAllocBox bx2@@53 t2@@72 h@@61))) (and ($IsBox bx3@@39 t3@@57) ($IsAllocBox bx3@@39 t3@@57 h@@61))) (and ($IsBox bx4@@25 t4@@42) ($IsAllocBox bx4@@25 t4@@42 h@@61))) (and ($IsBox bx5@@25 t5@@27) ($IsAllocBox bx5@@25 t5@@27 h@@61))) (Requires6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@27 h@@61 f@@87 bx0@@81 bx1@@67 bx2@@53 bx3@@39 bx4@@25 bx5@@25)) (forall ((r@@33 T@U) ) (!  (=> (= (type r@@33) refType) (=> (and (not (= r@@33 null)) (U_2_bool (MapType0Select (Reads6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@27 h@@61 f@@87 bx0@@81 bx1@@67 bx2@@53 bx3@@39 bx4@@25 bx5@@25) ($Box r@@33)))) (U_2_bool (MapType1Select (MapType0Select h@@61 r@@33) alloc)))) :qid |unknown.0:0| :skolemid |1080| :pattern ( (MapType0Select (Reads6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@27 h@@61 f@@87 bx0@@81 bx1@@67 bx2@@53 bx3@@39 bx4@@25 bx5@@25) ($Box r@@33))) )))) :qid |unknown.0:0| :skolemid |1081| :pattern ( (Apply6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@27 h@@61 f@@87 bx0@@81 bx1@@67 bx2@@53 bx3@@39 bx4@@25 bx5@@25)) :pattern ( (Reads6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@27 h@@61 f@@87 bx0@@81 bx1@@67 bx2@@53 bx3@@39 bx4@@25 bx5@@25)) )))) :qid |unknown.0:0| :skolemid |1082| :pattern ( ($IsAlloc f@@87 (Tclass._System.___hFunc6 t0@@119 t1@@95 t2@@72 t3@@57 t4@@42 t5@@27 t6@@27) h@@61)) )))
(assert (forall ((f@@88 T@U) (t0@@120 T@U) (t1@@96 T@U) (t2@@73 T@U) (t3@@58 T@U) (t4@@43 T@U) (t5@@28 T@U) (t6@@28 T@U) (h@@62 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type f@@88) HandleTypeType) (= (type t0@@120) TyType)) (= (type t1@@96) TyType)) (= (type t2@@73) TyType)) (= (type t3@@58) TyType)) (= (type t4@@43) TyType)) (= (type t5@@28) TyType)) (= (type t6@@28) TyType)) (= (type h@@62) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@62) ($IsAlloc f@@88 (Tclass._System.___hFunc6 t0@@120 t1@@96 t2@@73 t3@@58 t4@@43 t5@@28 t6@@28) h@@62))) (forall ((bx0@@82 T@U) (bx1@@68 T@U) (bx2@@54 T@U) (bx3@@40 T@U) (bx4@@26 T@U) (bx5@@26 T@U) ) (!  (=> (and (and (and (and (and (= (type bx0@@82) BoxType) (= (type bx1@@68) BoxType)) (= (type bx2@@54) BoxType)) (= (type bx3@@40) BoxType)) (= (type bx4@@26) BoxType)) (= (type bx5@@26) BoxType)) (=> (and (and (and (and (and (and ($IsAllocBox bx0@@82 t0@@120 h@@62) ($IsAllocBox bx1@@68 t1@@96 h@@62)) ($IsAllocBox bx2@@54 t2@@73 h@@62)) ($IsAllocBox bx3@@40 t3@@58 h@@62)) ($IsAllocBox bx4@@26 t4@@43 h@@62)) ($IsAllocBox bx5@@26 t5@@28 h@@62)) (Requires6 t0@@120 t1@@96 t2@@73 t3@@58 t4@@43 t5@@28 t6@@28 h@@62 f@@88 bx0@@82 bx1@@68 bx2@@54 bx3@@40 bx4@@26 bx5@@26)) ($IsAllocBox (Apply6 t0@@120 t1@@96 t2@@73 t3@@58 t4@@43 t5@@28 t6@@28 h@@62 f@@88 bx0@@82 bx1@@68 bx2@@54 bx3@@40 bx4@@26 bx5@@26) t6@@28 h@@62))) :qid |unknown.0:0| :skolemid |1083| :pattern ( (Apply6 t0@@120 t1@@96 t2@@73 t3@@58 t4@@43 t5@@28 t6@@28 h@@62 f@@88 bx0@@82 bx1@@68 bx2@@54 bx3@@40 bx4@@26 bx5@@26)) ))) :qid |unknown.0:0| :skolemid |1084| :pattern ( ($IsAlloc f@@88 (Tclass._System.___hFunc6 t0@@120 t1@@96 t2@@73 t3@@58 t4@@43 t5@@28 t6@@28) h@@62)) )))
(assert (forall ((arg0@@299 T@U) (arg1@@145 T@U) (arg2@@97 T@U) (arg3@@73 T@U) (arg4@@62 T@U) (arg5@@49 T@U) (arg6@@40 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6 arg0@@299 arg1@@145 arg2@@97 arg3@@73 arg4@@62 arg5@@49 arg6@@40)) TyType) :qid |funType:Tclass._System.___hPartialFunc6| :pattern ( (Tclass._System.___hPartialFunc6 arg0@@299 arg1@@145 arg2@@97 arg3@@73 arg4@@62 arg5@@49 arg6@@40)) )))
(assert (forall ((|#$T0@@133| T@U) (|#$T1@@117| T@U) (|#$T2@@98| T@U) (|#$T3@@76| T@U) (|#$T4@@51| T@U) (|#$T5@@51| T@U) (|#$R@@146| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@133|) TyType) (= (type |#$T1@@117|) TyType)) (= (type |#$T2@@98|) TyType)) (= (type |#$T3@@76|) TyType)) (= (type |#$T4@@51|) TyType)) (= (type |#$T5@@51|) TyType)) (= (type |#$R@@146|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc6 |#$T0@@133| |#$T1@@117| |#$T2@@98| |#$T3@@76| |#$T4@@51| |#$T5@@51| |#$R@@146|)) Tagclass._System.___hPartialFunc6) (= (TagFamily (Tclass._System.___hPartialFunc6 |#$T0@@133| |#$T1@@117| |#$T2@@98| |#$T3@@76| |#$T4@@51| |#$T5@@51| |#$R@@146|)) |tytagFamily$_#PartialFunc6|))) :qid |unknown.0:0| :skolemid |1085| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@133| |#$T1@@117| |#$T2@@98| |#$T3@@76| |#$T4@@51| |#$T5@@51| |#$R@@146|)) )))
(assert (forall ((arg0@@300 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_0 arg0@@300)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_0| :pattern ( (Tclass._System.___hPartialFunc6_0 arg0@@300)) )))
(assert (forall ((|#$T0@@134| T@U) (|#$T1@@118| T@U) (|#$T2@@99| T@U) (|#$T3@@77| T@U) (|#$T4@@52| T@U) (|#$T5@@52| T@U) (|#$R@@147| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@134|) TyType) (= (type |#$T1@@118|) TyType)) (= (type |#$T2@@99|) TyType)) (= (type |#$T3@@77|) TyType)) (= (type |#$T4@@52|) TyType)) (= (type |#$T5@@52|) TyType)) (= (type |#$R@@147|) TyType)) (= (Tclass._System.___hPartialFunc6_0 (Tclass._System.___hPartialFunc6 |#$T0@@134| |#$T1@@118| |#$T2@@99| |#$T3@@77| |#$T4@@52| |#$T5@@52| |#$R@@147|)) |#$T0@@134|)) :qid |unknown.0:0| :skolemid |1086| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@134| |#$T1@@118| |#$T2@@99| |#$T3@@77| |#$T4@@52| |#$T5@@52| |#$R@@147|)) )))
(assert (forall ((arg0@@301 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_1 arg0@@301)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_1| :pattern ( (Tclass._System.___hPartialFunc6_1 arg0@@301)) )))
(assert (forall ((|#$T0@@135| T@U) (|#$T1@@119| T@U) (|#$T2@@100| T@U) (|#$T3@@78| T@U) (|#$T4@@53| T@U) (|#$T5@@53| T@U) (|#$R@@148| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@135|) TyType) (= (type |#$T1@@119|) TyType)) (= (type |#$T2@@100|) TyType)) (= (type |#$T3@@78|) TyType)) (= (type |#$T4@@53|) TyType)) (= (type |#$T5@@53|) TyType)) (= (type |#$R@@148|) TyType)) (= (Tclass._System.___hPartialFunc6_1 (Tclass._System.___hPartialFunc6 |#$T0@@135| |#$T1@@119| |#$T2@@100| |#$T3@@78| |#$T4@@53| |#$T5@@53| |#$R@@148|)) |#$T1@@119|)) :qid |unknown.0:0| :skolemid |1087| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@135| |#$T1@@119| |#$T2@@100| |#$T3@@78| |#$T4@@53| |#$T5@@53| |#$R@@148|)) )))
(assert (forall ((arg0@@302 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_2 arg0@@302)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_2| :pattern ( (Tclass._System.___hPartialFunc6_2 arg0@@302)) )))
(assert (forall ((|#$T0@@136| T@U) (|#$T1@@120| T@U) (|#$T2@@101| T@U) (|#$T3@@79| T@U) (|#$T4@@54| T@U) (|#$T5@@54| T@U) (|#$R@@149| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@136|) TyType) (= (type |#$T1@@120|) TyType)) (= (type |#$T2@@101|) TyType)) (= (type |#$T3@@79|) TyType)) (= (type |#$T4@@54|) TyType)) (= (type |#$T5@@54|) TyType)) (= (type |#$R@@149|) TyType)) (= (Tclass._System.___hPartialFunc6_2 (Tclass._System.___hPartialFunc6 |#$T0@@136| |#$T1@@120| |#$T2@@101| |#$T3@@79| |#$T4@@54| |#$T5@@54| |#$R@@149|)) |#$T2@@101|)) :qid |unknown.0:0| :skolemid |1088| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@136| |#$T1@@120| |#$T2@@101| |#$T3@@79| |#$T4@@54| |#$T5@@54| |#$R@@149|)) )))
(assert (forall ((arg0@@303 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_3 arg0@@303)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_3| :pattern ( (Tclass._System.___hPartialFunc6_3 arg0@@303)) )))
(assert (forall ((|#$T0@@137| T@U) (|#$T1@@121| T@U) (|#$T2@@102| T@U) (|#$T3@@80| T@U) (|#$T4@@55| T@U) (|#$T5@@55| T@U) (|#$R@@150| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@137|) TyType) (= (type |#$T1@@121|) TyType)) (= (type |#$T2@@102|) TyType)) (= (type |#$T3@@80|) TyType)) (= (type |#$T4@@55|) TyType)) (= (type |#$T5@@55|) TyType)) (= (type |#$R@@150|) TyType)) (= (Tclass._System.___hPartialFunc6_3 (Tclass._System.___hPartialFunc6 |#$T0@@137| |#$T1@@121| |#$T2@@102| |#$T3@@80| |#$T4@@55| |#$T5@@55| |#$R@@150|)) |#$T3@@80|)) :qid |unknown.0:0| :skolemid |1089| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@137| |#$T1@@121| |#$T2@@102| |#$T3@@80| |#$T4@@55| |#$T5@@55| |#$R@@150|)) )))
(assert (forall ((arg0@@304 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_4 arg0@@304)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_4| :pattern ( (Tclass._System.___hPartialFunc6_4 arg0@@304)) )))
(assert (forall ((|#$T0@@138| T@U) (|#$T1@@122| T@U) (|#$T2@@103| T@U) (|#$T3@@81| T@U) (|#$T4@@56| T@U) (|#$T5@@56| T@U) (|#$R@@151| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@138|) TyType) (= (type |#$T1@@122|) TyType)) (= (type |#$T2@@103|) TyType)) (= (type |#$T3@@81|) TyType)) (= (type |#$T4@@56|) TyType)) (= (type |#$T5@@56|) TyType)) (= (type |#$R@@151|) TyType)) (= (Tclass._System.___hPartialFunc6_4 (Tclass._System.___hPartialFunc6 |#$T0@@138| |#$T1@@122| |#$T2@@103| |#$T3@@81| |#$T4@@56| |#$T5@@56| |#$R@@151|)) |#$T4@@56|)) :qid |unknown.0:0| :skolemid |1090| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@138| |#$T1@@122| |#$T2@@103| |#$T3@@81| |#$T4@@56| |#$T5@@56| |#$R@@151|)) )))
(assert (forall ((arg0@@305 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_5 arg0@@305)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_5| :pattern ( (Tclass._System.___hPartialFunc6_5 arg0@@305)) )))
(assert (forall ((|#$T0@@139| T@U) (|#$T1@@123| T@U) (|#$T2@@104| T@U) (|#$T3@@82| T@U) (|#$T4@@57| T@U) (|#$T5@@57| T@U) (|#$R@@152| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@139|) TyType) (= (type |#$T1@@123|) TyType)) (= (type |#$T2@@104|) TyType)) (= (type |#$T3@@82|) TyType)) (= (type |#$T4@@57|) TyType)) (= (type |#$T5@@57|) TyType)) (= (type |#$R@@152|) TyType)) (= (Tclass._System.___hPartialFunc6_5 (Tclass._System.___hPartialFunc6 |#$T0@@139| |#$T1@@123| |#$T2@@104| |#$T3@@82| |#$T4@@57| |#$T5@@57| |#$R@@152|)) |#$T5@@57|)) :qid |unknown.0:0| :skolemid |1091| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@139| |#$T1@@123| |#$T2@@104| |#$T3@@82| |#$T4@@57| |#$T5@@57| |#$R@@152|)) )))
(assert (forall ((arg0@@306 T@U) ) (! (= (type (Tclass._System.___hPartialFunc6_6 arg0@@306)) TyType) :qid |funType:Tclass._System.___hPartialFunc6_6| :pattern ( (Tclass._System.___hPartialFunc6_6 arg0@@306)) )))
(assert (forall ((|#$T0@@140| T@U) (|#$T1@@124| T@U) (|#$T2@@105| T@U) (|#$T3@@83| T@U) (|#$T4@@58| T@U) (|#$T5@@58| T@U) (|#$R@@153| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@140|) TyType) (= (type |#$T1@@124|) TyType)) (= (type |#$T2@@105|) TyType)) (= (type |#$T3@@83|) TyType)) (= (type |#$T4@@58|) TyType)) (= (type |#$T5@@58|) TyType)) (= (type |#$R@@153|) TyType)) (= (Tclass._System.___hPartialFunc6_6 (Tclass._System.___hPartialFunc6 |#$T0@@140| |#$T1@@124| |#$T2@@105| |#$T3@@83| |#$T4@@58| |#$T5@@58| |#$R@@153|)) |#$R@@153|)) :qid |unknown.0:0| :skolemid |1092| :pattern ( (Tclass._System.___hPartialFunc6 |#$T0@@140| |#$T1@@124| |#$T2@@105| |#$T3@@83| |#$T4@@58| |#$T5@@58| |#$R@@153|)) )))
(assert (forall ((|#$T0@@141| T@U) (|#$T1@@125| T@U) (|#$T2@@106| T@U) (|#$T3@@84| T@U) (|#$T4@@59| T@U) (|#$T5@@59| T@U) (|#$R@@154| T@U) (bx@@91 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@141|) TyType) (= (type |#$T1@@125|) TyType)) (= (type |#$T2@@106|) TyType)) (= (type |#$T3@@84|) TyType)) (= (type |#$T4@@59|) TyType)) (= (type |#$T5@@59|) TyType)) (= (type |#$R@@154|) TyType)) (= (type bx@@91) BoxType)) ($IsBox bx@@91 (Tclass._System.___hPartialFunc6 |#$T0@@141| |#$T1@@125| |#$T2@@106| |#$T3@@84| |#$T4@@59| |#$T5@@59| |#$R@@154|))) (and (= ($Box ($Unbox HandleTypeType bx@@91)) bx@@91) ($Is ($Unbox HandleTypeType bx@@91) (Tclass._System.___hPartialFunc6 |#$T0@@141| |#$T1@@125| |#$T2@@106| |#$T3@@84| |#$T4@@59| |#$T5@@59| |#$R@@154|)))) :qid |unknown.0:0| :skolemid |1093| :pattern ( ($IsBox bx@@91 (Tclass._System.___hPartialFunc6 |#$T0@@141| |#$T1@@125| |#$T2@@106| |#$T3@@84| |#$T4@@59| |#$T5@@59| |#$R@@154|))) )))
(assert (forall ((|#$T0@@142| T@U) (|#$T1@@126| T@U) (|#$T2@@107| T@U) (|#$T3@@85| T@U) (|#$T4@@60| T@U) (|#$T5@@60| T@U) (|#$R@@155| T@U) (|f#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@142|) TyType) (= (type |#$T1@@126|) TyType)) (= (type |#$T2@@107|) TyType)) (= (type |#$T3@@85|) TyType)) (= (type |#$T4@@60|) TyType)) (= (type |#$T5@@60|) TyType)) (= (type |#$R@@155|) TyType)) (= (type |f#0@@23|) HandleTypeType)) (= ($Is |f#0@@23| (Tclass._System.___hPartialFunc6 |#$T0@@142| |#$T1@@126| |#$T2@@107| |#$T3@@85| |#$T4@@60| |#$T5@@60| |#$R@@155|))  (and ($Is |f#0@@23| (Tclass._System.___hFunc6 |#$T0@@142| |#$T1@@126| |#$T2@@107| |#$T3@@85| |#$T4@@60| |#$T5@@60| |#$R@@155|)) (forall ((|x0#0@@9| T@U) (|x1#0@@7| T@U) (|x2#0@@5| T@U) (|x3#0@@3| T@U) (|x4#0@@1| T@U) (|x5#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |x0#0@@9|) BoxType) (= (type |x1#0@@7|) BoxType)) (= (type |x2#0@@5|) BoxType)) (= (type |x3#0@@3|) BoxType)) (= (type |x4#0@@1|) BoxType)) (= (type |x5#0@@1|) BoxType)) (and (and (and (and (and ($IsBox |x0#0@@9| |#$T0@@142|) ($IsBox |x1#0@@7| |#$T1@@126|)) ($IsBox |x2#0@@5| |#$T2@@107|)) ($IsBox |x3#0@@3| |#$T3@@85|)) ($IsBox |x4#0@@1| |#$T4@@60|)) ($IsBox |x5#0@@1| |#$T5@@60|))) (|Set#Equal| (Reads6 |#$T0@@142| |#$T1@@126| |#$T2@@107| |#$T3@@85| |#$T4@@60| |#$T5@@60| |#$R@@155| $OneHeap |f#0@@23| |x0#0@@9| |x1#0@@7| |x2#0@@5| |x3#0@@3| |x4#0@@1| |x5#0@@1|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1094| :no-pattern (type |x0#0@@9|) :no-pattern (type |x1#0@@7|) :no-pattern (type |x2#0@@5|) :no-pattern (type |x3#0@@3|) :no-pattern (type |x4#0@@1|) :no-pattern (type |x5#0@@1|) :no-pattern (U_2_int |x0#0@@9|) :no-pattern (U_2_bool |x0#0@@9|) :no-pattern (U_2_int |x1#0@@7|) :no-pattern (U_2_bool |x1#0@@7|) :no-pattern (U_2_int |x2#0@@5|) :no-pattern (U_2_bool |x2#0@@5|) :no-pattern (U_2_int |x3#0@@3|) :no-pattern (U_2_bool |x3#0@@3|) :no-pattern (U_2_int |x4#0@@1|) :no-pattern (U_2_bool |x4#0@@1|) :no-pattern (U_2_int |x5#0@@1|) :no-pattern (U_2_bool |x5#0@@1|) ))))) :qid |unknown.0:0| :skolemid |1095| :pattern ( ($Is |f#0@@23| (Tclass._System.___hPartialFunc6 |#$T0@@142| |#$T1@@126| |#$T2@@107| |#$T3@@85| |#$T4@@60| |#$T5@@60| |#$R@@155|))) )))
(assert (forall ((|#$T0@@143| T@U) (|#$T1@@127| T@U) (|#$T2@@108| T@U) (|#$T3@@86| T@U) (|#$T4@@61| T@U) (|#$T5@@61| T@U) (|#$R@@156| T@U) (|f#0@@24| T@U) ($h@@20 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@143|) TyType) (= (type |#$T1@@127|) TyType)) (= (type |#$T2@@108|) TyType)) (= (type |#$T3@@86|) TyType)) (= (type |#$T4@@61|) TyType)) (= (type |#$T5@@61|) TyType)) (= (type |#$R@@156|) TyType)) (= (type |f#0@@24|) HandleTypeType)) (= (type $h@@20) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@24| (Tclass._System.___hPartialFunc6 |#$T0@@143| |#$T1@@127| |#$T2@@108| |#$T3@@86| |#$T4@@61| |#$T5@@61| |#$R@@156|) $h@@20) ($IsAlloc |f#0@@24| (Tclass._System.___hFunc6 |#$T0@@143| |#$T1@@127| |#$T2@@108| |#$T3@@86| |#$T4@@61| |#$T5@@61| |#$R@@156|) $h@@20))) :qid |unknown.0:0| :skolemid |1096| :pattern ( ($IsAlloc |f#0@@24| (Tclass._System.___hPartialFunc6 |#$T0@@143| |#$T1@@127| |#$T2@@108| |#$T3@@86| |#$T4@@61| |#$T5@@61| |#$R@@156|) $h@@20)) )))
(assert (forall ((arg0@@307 T@U) (arg1@@146 T@U) (arg2@@98 T@U) (arg3@@74 T@U) (arg4@@63 T@U) (arg5@@50 T@U) (arg6@@41 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6 arg0@@307 arg1@@146 arg2@@98 arg3@@74 arg4@@63 arg5@@50 arg6@@41)) TyType) :qid |funType:Tclass._System.___hTotalFunc6| :pattern ( (Tclass._System.___hTotalFunc6 arg0@@307 arg1@@146 arg2@@98 arg3@@74 arg4@@63 arg5@@50 arg6@@41)) )))
(assert (forall ((|#$T0@@144| T@U) (|#$T1@@128| T@U) (|#$T2@@109| T@U) (|#$T3@@87| T@U) (|#$T4@@62| T@U) (|#$T5@@62| T@U) (|#$R@@157| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@144|) TyType) (= (type |#$T1@@128|) TyType)) (= (type |#$T2@@109|) TyType)) (= (type |#$T3@@87|) TyType)) (= (type |#$T4@@62|) TyType)) (= (type |#$T5@@62|) TyType)) (= (type |#$R@@157|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc6 |#$T0@@144| |#$T1@@128| |#$T2@@109| |#$T3@@87| |#$T4@@62| |#$T5@@62| |#$R@@157|)) Tagclass._System.___hTotalFunc6) (= (TagFamily (Tclass._System.___hTotalFunc6 |#$T0@@144| |#$T1@@128| |#$T2@@109| |#$T3@@87| |#$T4@@62| |#$T5@@62| |#$R@@157|)) |tytagFamily$_#TotalFunc6|))) :qid |unknown.0:0| :skolemid |1097| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@144| |#$T1@@128| |#$T2@@109| |#$T3@@87| |#$T4@@62| |#$T5@@62| |#$R@@157|)) )))
(assert (forall ((arg0@@308 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_0 arg0@@308)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_0| :pattern ( (Tclass._System.___hTotalFunc6_0 arg0@@308)) )))
(assert (forall ((|#$T0@@145| T@U) (|#$T1@@129| T@U) (|#$T2@@110| T@U) (|#$T3@@88| T@U) (|#$T4@@63| T@U) (|#$T5@@63| T@U) (|#$R@@158| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@145|) TyType) (= (type |#$T1@@129|) TyType)) (= (type |#$T2@@110|) TyType)) (= (type |#$T3@@88|) TyType)) (= (type |#$T4@@63|) TyType)) (= (type |#$T5@@63|) TyType)) (= (type |#$R@@158|) TyType)) (= (Tclass._System.___hTotalFunc6_0 (Tclass._System.___hTotalFunc6 |#$T0@@145| |#$T1@@129| |#$T2@@110| |#$T3@@88| |#$T4@@63| |#$T5@@63| |#$R@@158|)) |#$T0@@145|)) :qid |unknown.0:0| :skolemid |1098| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@145| |#$T1@@129| |#$T2@@110| |#$T3@@88| |#$T4@@63| |#$T5@@63| |#$R@@158|)) )))
(assert (forall ((arg0@@309 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_1 arg0@@309)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_1| :pattern ( (Tclass._System.___hTotalFunc6_1 arg0@@309)) )))
(assert (forall ((|#$T0@@146| T@U) (|#$T1@@130| T@U) (|#$T2@@111| T@U) (|#$T3@@89| T@U) (|#$T4@@64| T@U) (|#$T5@@64| T@U) (|#$R@@159| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@146|) TyType) (= (type |#$T1@@130|) TyType)) (= (type |#$T2@@111|) TyType)) (= (type |#$T3@@89|) TyType)) (= (type |#$T4@@64|) TyType)) (= (type |#$T5@@64|) TyType)) (= (type |#$R@@159|) TyType)) (= (Tclass._System.___hTotalFunc6_1 (Tclass._System.___hTotalFunc6 |#$T0@@146| |#$T1@@130| |#$T2@@111| |#$T3@@89| |#$T4@@64| |#$T5@@64| |#$R@@159|)) |#$T1@@130|)) :qid |unknown.0:0| :skolemid |1099| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@146| |#$T1@@130| |#$T2@@111| |#$T3@@89| |#$T4@@64| |#$T5@@64| |#$R@@159|)) )))
(assert (forall ((arg0@@310 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_2 arg0@@310)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_2| :pattern ( (Tclass._System.___hTotalFunc6_2 arg0@@310)) )))
(assert (forall ((|#$T0@@147| T@U) (|#$T1@@131| T@U) (|#$T2@@112| T@U) (|#$T3@@90| T@U) (|#$T4@@65| T@U) (|#$T5@@65| T@U) (|#$R@@160| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@147|) TyType) (= (type |#$T1@@131|) TyType)) (= (type |#$T2@@112|) TyType)) (= (type |#$T3@@90|) TyType)) (= (type |#$T4@@65|) TyType)) (= (type |#$T5@@65|) TyType)) (= (type |#$R@@160|) TyType)) (= (Tclass._System.___hTotalFunc6_2 (Tclass._System.___hTotalFunc6 |#$T0@@147| |#$T1@@131| |#$T2@@112| |#$T3@@90| |#$T4@@65| |#$T5@@65| |#$R@@160|)) |#$T2@@112|)) :qid |unknown.0:0| :skolemid |1100| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@147| |#$T1@@131| |#$T2@@112| |#$T3@@90| |#$T4@@65| |#$T5@@65| |#$R@@160|)) )))
(assert (forall ((arg0@@311 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_3 arg0@@311)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_3| :pattern ( (Tclass._System.___hTotalFunc6_3 arg0@@311)) )))
(assert (forall ((|#$T0@@148| T@U) (|#$T1@@132| T@U) (|#$T2@@113| T@U) (|#$T3@@91| T@U) (|#$T4@@66| T@U) (|#$T5@@66| T@U) (|#$R@@161| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@148|) TyType) (= (type |#$T1@@132|) TyType)) (= (type |#$T2@@113|) TyType)) (= (type |#$T3@@91|) TyType)) (= (type |#$T4@@66|) TyType)) (= (type |#$T5@@66|) TyType)) (= (type |#$R@@161|) TyType)) (= (Tclass._System.___hTotalFunc6_3 (Tclass._System.___hTotalFunc6 |#$T0@@148| |#$T1@@132| |#$T2@@113| |#$T3@@91| |#$T4@@66| |#$T5@@66| |#$R@@161|)) |#$T3@@91|)) :qid |unknown.0:0| :skolemid |1101| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@148| |#$T1@@132| |#$T2@@113| |#$T3@@91| |#$T4@@66| |#$T5@@66| |#$R@@161|)) )))
(assert (forall ((arg0@@312 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_4 arg0@@312)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_4| :pattern ( (Tclass._System.___hTotalFunc6_4 arg0@@312)) )))
(assert (forall ((|#$T0@@149| T@U) (|#$T1@@133| T@U) (|#$T2@@114| T@U) (|#$T3@@92| T@U) (|#$T4@@67| T@U) (|#$T5@@67| T@U) (|#$R@@162| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@149|) TyType) (= (type |#$T1@@133|) TyType)) (= (type |#$T2@@114|) TyType)) (= (type |#$T3@@92|) TyType)) (= (type |#$T4@@67|) TyType)) (= (type |#$T5@@67|) TyType)) (= (type |#$R@@162|) TyType)) (= (Tclass._System.___hTotalFunc6_4 (Tclass._System.___hTotalFunc6 |#$T0@@149| |#$T1@@133| |#$T2@@114| |#$T3@@92| |#$T4@@67| |#$T5@@67| |#$R@@162|)) |#$T4@@67|)) :qid |unknown.0:0| :skolemid |1102| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@149| |#$T1@@133| |#$T2@@114| |#$T3@@92| |#$T4@@67| |#$T5@@67| |#$R@@162|)) )))
(assert (forall ((arg0@@313 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_5 arg0@@313)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_5| :pattern ( (Tclass._System.___hTotalFunc6_5 arg0@@313)) )))
(assert (forall ((|#$T0@@150| T@U) (|#$T1@@134| T@U) (|#$T2@@115| T@U) (|#$T3@@93| T@U) (|#$T4@@68| T@U) (|#$T5@@68| T@U) (|#$R@@163| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@150|) TyType) (= (type |#$T1@@134|) TyType)) (= (type |#$T2@@115|) TyType)) (= (type |#$T3@@93|) TyType)) (= (type |#$T4@@68|) TyType)) (= (type |#$T5@@68|) TyType)) (= (type |#$R@@163|) TyType)) (= (Tclass._System.___hTotalFunc6_5 (Tclass._System.___hTotalFunc6 |#$T0@@150| |#$T1@@134| |#$T2@@115| |#$T3@@93| |#$T4@@68| |#$T5@@68| |#$R@@163|)) |#$T5@@68|)) :qid |unknown.0:0| :skolemid |1103| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@150| |#$T1@@134| |#$T2@@115| |#$T3@@93| |#$T4@@68| |#$T5@@68| |#$R@@163|)) )))
(assert (forall ((arg0@@314 T@U) ) (! (= (type (Tclass._System.___hTotalFunc6_6 arg0@@314)) TyType) :qid |funType:Tclass._System.___hTotalFunc6_6| :pattern ( (Tclass._System.___hTotalFunc6_6 arg0@@314)) )))
(assert (forall ((|#$T0@@151| T@U) (|#$T1@@135| T@U) (|#$T2@@116| T@U) (|#$T3@@94| T@U) (|#$T4@@69| T@U) (|#$T5@@69| T@U) (|#$R@@164| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@151|) TyType) (= (type |#$T1@@135|) TyType)) (= (type |#$T2@@116|) TyType)) (= (type |#$T3@@94|) TyType)) (= (type |#$T4@@69|) TyType)) (= (type |#$T5@@69|) TyType)) (= (type |#$R@@164|) TyType)) (= (Tclass._System.___hTotalFunc6_6 (Tclass._System.___hTotalFunc6 |#$T0@@151| |#$T1@@135| |#$T2@@116| |#$T3@@94| |#$T4@@69| |#$T5@@69| |#$R@@164|)) |#$R@@164|)) :qid |unknown.0:0| :skolemid |1104| :pattern ( (Tclass._System.___hTotalFunc6 |#$T0@@151| |#$T1@@135| |#$T2@@116| |#$T3@@94| |#$T4@@69| |#$T5@@69| |#$R@@164|)) )))
(assert (forall ((|#$T0@@152| T@U) (|#$T1@@136| T@U) (|#$T2@@117| T@U) (|#$T3@@95| T@U) (|#$T4@@70| T@U) (|#$T5@@70| T@U) (|#$R@@165| T@U) (bx@@92 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@152|) TyType) (= (type |#$T1@@136|) TyType)) (= (type |#$T2@@117|) TyType)) (= (type |#$T3@@95|) TyType)) (= (type |#$T4@@70|) TyType)) (= (type |#$T5@@70|) TyType)) (= (type |#$R@@165|) TyType)) (= (type bx@@92) BoxType)) ($IsBox bx@@92 (Tclass._System.___hTotalFunc6 |#$T0@@152| |#$T1@@136| |#$T2@@117| |#$T3@@95| |#$T4@@70| |#$T5@@70| |#$R@@165|))) (and (= ($Box ($Unbox HandleTypeType bx@@92)) bx@@92) ($Is ($Unbox HandleTypeType bx@@92) (Tclass._System.___hTotalFunc6 |#$T0@@152| |#$T1@@136| |#$T2@@117| |#$T3@@95| |#$T4@@70| |#$T5@@70| |#$R@@165|)))) :qid |unknown.0:0| :skolemid |1105| :pattern ( ($IsBox bx@@92 (Tclass._System.___hTotalFunc6 |#$T0@@152| |#$T1@@136| |#$T2@@117| |#$T3@@95| |#$T4@@70| |#$T5@@70| |#$R@@165|))) )))
(assert (forall ((|#$T0@@153| T@U) (|#$T1@@137| T@U) (|#$T2@@118| T@U) (|#$T3@@96| T@U) (|#$T4@@71| T@U) (|#$T5@@71| T@U) (|#$R@@166| T@U) (|f#0@@25| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@153|) TyType) (= (type |#$T1@@137|) TyType)) (= (type |#$T2@@118|) TyType)) (= (type |#$T3@@96|) TyType)) (= (type |#$T4@@71|) TyType)) (= (type |#$T5@@71|) TyType)) (= (type |#$R@@166|) TyType)) (= (type |f#0@@25|) HandleTypeType)) (= ($Is |f#0@@25| (Tclass._System.___hTotalFunc6 |#$T0@@153| |#$T1@@137| |#$T2@@118| |#$T3@@96| |#$T4@@71| |#$T5@@71| |#$R@@166|))  (and ($Is |f#0@@25| (Tclass._System.___hPartialFunc6 |#$T0@@153| |#$T1@@137| |#$T2@@118| |#$T3@@96| |#$T4@@71| |#$T5@@71| |#$R@@166|)) (forall ((|x0#0@@10| T@U) (|x1#0@@8| T@U) (|x2#0@@6| T@U) (|x3#0@@4| T@U) (|x4#0@@2| T@U) (|x5#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |x0#0@@10|) BoxType) (= (type |x1#0@@8|) BoxType)) (= (type |x2#0@@6|) BoxType)) (= (type |x3#0@@4|) BoxType)) (= (type |x4#0@@2|) BoxType)) (= (type |x5#0@@2|) BoxType)) (and (and (and (and (and ($IsBox |x0#0@@10| |#$T0@@153|) ($IsBox |x1#0@@8| |#$T1@@137|)) ($IsBox |x2#0@@6| |#$T2@@118|)) ($IsBox |x3#0@@4| |#$T3@@96|)) ($IsBox |x4#0@@2| |#$T4@@71|)) ($IsBox |x5#0@@2| |#$T5@@71|))) (Requires6 |#$T0@@153| |#$T1@@137| |#$T2@@118| |#$T3@@96| |#$T4@@71| |#$T5@@71| |#$R@@166| $OneHeap |f#0@@25| |x0#0@@10| |x1#0@@8| |x2#0@@6| |x3#0@@4| |x4#0@@2| |x5#0@@2|)) :qid |unknown.0:0| :skolemid |1106| :no-pattern (type |x0#0@@10|) :no-pattern (type |x1#0@@8|) :no-pattern (type |x2#0@@6|) :no-pattern (type |x3#0@@4|) :no-pattern (type |x4#0@@2|) :no-pattern (type |x5#0@@2|) :no-pattern (U_2_int |x0#0@@10|) :no-pattern (U_2_bool |x0#0@@10|) :no-pattern (U_2_int |x1#0@@8|) :no-pattern (U_2_bool |x1#0@@8|) :no-pattern (U_2_int |x2#0@@6|) :no-pattern (U_2_bool |x2#0@@6|) :no-pattern (U_2_int |x3#0@@4|) :no-pattern (U_2_bool |x3#0@@4|) :no-pattern (U_2_int |x4#0@@2|) :no-pattern (U_2_bool |x4#0@@2|) :no-pattern (U_2_int |x5#0@@2|) :no-pattern (U_2_bool |x5#0@@2|) ))))) :qid |unknown.0:0| :skolemid |1107| :pattern ( ($Is |f#0@@25| (Tclass._System.___hTotalFunc6 |#$T0@@153| |#$T1@@137| |#$T2@@118| |#$T3@@96| |#$T4@@71| |#$T5@@71| |#$R@@166|))) )))
(assert (forall ((|#$T0@@154| T@U) (|#$T1@@138| T@U) (|#$T2@@119| T@U) (|#$T3@@97| T@U) (|#$T4@@72| T@U) (|#$T5@@72| T@U) (|#$R@@167| T@U) (|f#0@@26| T@U) ($h@@21 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type |#$T0@@154|) TyType) (= (type |#$T1@@138|) TyType)) (= (type |#$T2@@119|) TyType)) (= (type |#$T3@@97|) TyType)) (= (type |#$T4@@72|) TyType)) (= (type |#$T5@@72|) TyType)) (= (type |#$R@@167|) TyType)) (= (type |f#0@@26|) HandleTypeType)) (= (type $h@@21) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@26| (Tclass._System.___hTotalFunc6 |#$T0@@154| |#$T1@@138| |#$T2@@119| |#$T3@@97| |#$T4@@72| |#$T5@@72| |#$R@@167|) $h@@21) ($IsAlloc |f#0@@26| (Tclass._System.___hPartialFunc6 |#$T0@@154| |#$T1@@138| |#$T2@@119| |#$T3@@97| |#$T4@@72| |#$T5@@72| |#$R@@167|) $h@@21))) :qid |unknown.0:0| :skolemid |1108| :pattern ( ($IsAlloc |f#0@@26| (Tclass._System.___hTotalFunc6 |#$T0@@154| |#$T1@@138| |#$T2@@119| |#$T3@@97| |#$T4@@72| |#$T5@@72| |#$R@@167|) $h@@21)) )))
(assert (forall ((arg0@@315 T@U) ) (! (= (type (DatatypeCtorId arg0@@315)) DtCtorIdType) :qid |funType:DatatypeCtorId| :pattern ( (DatatypeCtorId arg0@@315)) )))
(assert (forall ((|a#0#0#0| T@U) (|a#0#1#0| T@U) ) (!  (=> (and (= (type |a#0#0#0|) BoxType) (= (type |a#0#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) |##_System._tuple#2._#Make2|)) :qid |unknown.0:0| :skolemid |1109| :pattern ( (|#_System._tuple#2._#Make2| |a#0#0#0| |a#0#1#0|)) )))
(assert (forall ((d@@0 T@U) ) (!  (=> (= (type d@@0) DatatypeTypeType) (= (_System.Tuple2.___hMake2_q d@@0) (= (DatatypeCtorId d@@0) |##_System._tuple#2._#Make2|))) :qid |unknown.0:0| :skolemid |1110| :pattern ( (_System.Tuple2.___hMake2_q d@@0)) )))
(assert (forall ((d@@1 T@U) ) (!  (=> (and (= (type d@@1) DatatypeTypeType) (_System.Tuple2.___hMake2_q d@@1)) (exists ((|a#1#0#0| T@U) (|a#1#1#0| T@U) ) (!  (and (and (= (type |a#1#0#0|) BoxType) (= (type |a#1#1#0|) BoxType)) (= d@@1 (|#_System._tuple#2._#Make2| |a#1#0#0| |a#1#1#0|))) :qid |unknown.0:0| :skolemid |1111| :no-pattern (type |a#1#0#0|) :no-pattern (type |a#1#1#0|) :no-pattern (U_2_int |a#1#0#0|) :no-pattern (U_2_bool |a#1#0#0|) :no-pattern (U_2_int |a#1#1#0|) :no-pattern (U_2_bool |a#1#1#0|) ))) :qid |unknown.0:0| :skolemid |1112| :pattern ( (_System.Tuple2.___hMake2_q d@@1)) )))
(assert (forall ((|_System._tuple#2$T0| T@U) (|_System._tuple#2$T1| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0|) TyType) (= (type |_System._tuple#2$T1|) TyType)) (and (= (Tag (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) Tagclass._System.Tuple2) (= (TagFamily (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) |tytagFamily$_tuple#2|))) :qid |unknown.0:0| :skolemid |1113| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0| |_System._tuple#2$T1|)) )))
(assert (forall ((arg0@@316 T@U) ) (! (= (type (Tclass._System.Tuple2_0 arg0@@316)) TyType) :qid |funType:Tclass._System.Tuple2_0| :pattern ( (Tclass._System.Tuple2_0 arg0@@316)) )))
(assert (forall ((|_System._tuple#2$T0@@0| T@U) (|_System._tuple#2$T1@@0| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0@@0|) TyType) (= (type |_System._tuple#2$T1@@0|) TyType)) (= (Tclass._System.Tuple2_0 (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)) |_System._tuple#2$T0@@0|)) :qid |unknown.0:0| :skolemid |1114| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@0| |_System._tuple#2$T1@@0|)) )))
(assert (forall ((arg0@@317 T@U) ) (! (= (type (Tclass._System.Tuple2_1 arg0@@317)) TyType) :qid |funType:Tclass._System.Tuple2_1| :pattern ( (Tclass._System.Tuple2_1 arg0@@317)) )))
(assert (forall ((|_System._tuple#2$T0@@1| T@U) (|_System._tuple#2$T1@@1| T@U) ) (!  (=> (and (= (type |_System._tuple#2$T0@@1|) TyType) (= (type |_System._tuple#2$T1@@1|) TyType)) (= (Tclass._System.Tuple2_1 (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|)) |_System._tuple#2$T1@@1|)) :qid |unknown.0:0| :skolemid |1115| :pattern ( (Tclass._System.Tuple2 |_System._tuple#2$T0@@1| |_System._tuple#2$T1@@1|)) )))
(assert (forall ((|_System._tuple#2$T0@@2| T@U) (|_System._tuple#2$T1@@2| T@U) (bx@@93 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@2|) TyType) (= (type |_System._tuple#2$T1@@2|) TyType)) (= (type bx@@93) BoxType)) ($IsBox bx@@93 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@93)) bx@@93) ($Is ($Unbox DatatypeTypeType bx@@93) (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|)))) :qid |unknown.0:0| :skolemid |1116| :pattern ( ($IsBox bx@@93 (Tclass._System.Tuple2 |_System._tuple#2$T0@@2| |_System._tuple#2$T1@@2|))) )))
(assert (forall ((|_System._tuple#2$T0@@3| T@U) (|_System._tuple#2$T1@@3| T@U) (|a#2#0#0| T@U) (|a#2#1#0| T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@3|) TyType) (= (type |_System._tuple#2$T1@@3|) TyType)) (= (type |a#2#0#0|) BoxType)) (= (type |a#2#1#0|) BoxType)) (= ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))  (and ($IsBox |a#2#0#0| |_System._tuple#2$T0@@3|) ($IsBox |a#2#1#0| |_System._tuple#2$T1@@3|)))) :qid |unknown.0:0| :skolemid |1117| :pattern ( ($Is (|#_System._tuple#2._#Make2| |a#2#0#0| |a#2#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@3| |_System._tuple#2$T1@@3|))) )))
(assert (forall ((|_System._tuple#2$T0@@4| T@U) (|_System._tuple#2$T1@@4| T@U) (|a#3#0#0| T@U) (|a#3#1#0| T@U) ($h@@22 T@U) ) (!  (=> (and (and (and (and (and (= (type |_System._tuple#2$T0@@4|) TyType) (= (type |_System._tuple#2$T1@@4|) TyType)) (= (type |a#3#0#0|) BoxType)) (= (type |a#3#1#0|) BoxType)) (= (type $h@@22) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@22)) (= ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|) $h@@22)  (and ($IsAllocBox |a#3#0#0| |_System._tuple#2$T0@@4| $h@@22) ($IsAllocBox |a#3#1#0| |_System._tuple#2$T1@@4| $h@@22)))) :qid |unknown.0:0| :skolemid |1118| :pattern ( ($IsAlloc (|#_System._tuple#2._#Make2| |a#3#0#0| |a#3#1#0|) (Tclass._System.Tuple2 |_System._tuple#2$T0@@4| |_System._tuple#2$T1@@4|) $h@@22)) )))
(assert (forall ((d@@2 T@U) (|_System._tuple#2$T0@@5| T@U) ($h@@23 T@U) ) (!  (=> (and (and (and (= (type d@@2) DatatypeTypeType) (= (type |_System._tuple#2$T0@@5|) TyType)) (= (type $h@@23) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@23) (and (_System.Tuple2.___hMake2_q d@@2) (exists ((|_System._tuple#2$T1@@5| T@U) ) (!  (and (= (type |_System._tuple#2$T1@@5|) TyType) ($IsAlloc d@@2 (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|) $h@@23)) :qid |unknown.0:0| :skolemid |1119| :pattern ( ($IsAlloc d@@2 (Tclass._System.Tuple2 |_System._tuple#2$T0@@5| |_System._tuple#2$T1@@5|) $h@@23)) ))))) ($IsAllocBox (_System.Tuple2._0 d@@2) |_System._tuple#2$T0@@5| $h@@23)) :qid |unknown.0:0| :skolemid |1120| :pattern ( ($IsAllocBox (_System.Tuple2._0 d@@2) |_System._tuple#2$T0@@5| $h@@23)) )))
(assert (forall ((d@@3 T@U) (|_System._tuple#2$T1@@6| T@U) ($h@@24 T@U) ) (!  (=> (and (and (and (= (type d@@3) DatatypeTypeType) (= (type |_System._tuple#2$T1@@6|) TyType)) (= (type $h@@24) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@24) (and (_System.Tuple2.___hMake2_q d@@3) (exists ((|_System._tuple#2$T0@@6| T@U) ) (!  (and (= (type |_System._tuple#2$T0@@6|) TyType) ($IsAlloc d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@24)) :qid |unknown.0:0| :skolemid |1121| :pattern ( ($IsAlloc d@@3 (Tclass._System.Tuple2 |_System._tuple#2$T0@@6| |_System._tuple#2$T1@@6|) $h@@24)) ))))) ($IsAllocBox (_System.Tuple2._1 d@@3) |_System._tuple#2$T1@@6| $h@@24)) :qid |unknown.0:0| :skolemid |1122| :pattern ( ($IsAllocBox (_System.Tuple2._1 d@@3) |_System._tuple#2$T1@@6| $h@@24)) )))
(assert (forall ((|a#4#0#0| T@U) (|a#4#1#0| T@U) ) (!  (=> (and (= (type |a#4#0#0|) BoxType) (= (type |a#4#1#0|) BoxType)) (= (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|)) (Lit (|#_System._tuple#2._#Make2| |a#4#0#0| |a#4#1#0|)))) :qid |unknown.0:0| :skolemid |1123| :pattern ( (|#_System._tuple#2._#Make2| (Lit |a#4#0#0|) (Lit |a#4#1#0|))) )))
(assert (forall ((|a#5#0#0| T@U) (|a#5#1#0| T@U) ) (!  (=> (and (= (type |a#5#0#0|) BoxType) (= (type |a#5#1#0|) BoxType)) (= (_System.Tuple2._0 (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) |a#5#0#0|)) :qid |unknown.0:0| :skolemid |1124| :pattern ( (|#_System._tuple#2._#Make2| |a#5#0#0| |a#5#1#0|)) )))
(assert (forall ((|a#6#0#0| T@U) (|a#6#1#0| T@U) ) (!  (=> (and (= (type |a#6#0#0|) BoxType) (= (type |a#6#1#0|) BoxType)) (< (BoxRank |a#6#0#0|) (DtRank (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)))) :qid |unknown.0:0| :skolemid |1125| :pattern ( (|#_System._tuple#2._#Make2| |a#6#0#0| |a#6#1#0|)) )))
(assert (forall ((|a#7#0#0| T@U) (|a#7#1#0| T@U) ) (!  (=> (and (= (type |a#7#0#0|) BoxType) (= (type |a#7#1#0|) BoxType)) (= (_System.Tuple2._1 (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) |a#7#1#0|)) :qid |unknown.0:0| :skolemid |1126| :pattern ( (|#_System._tuple#2._#Make2| |a#7#0#0| |a#7#1#0|)) )))
(assert (forall ((|a#8#0#0| T@U) (|a#8#1#0| T@U) ) (!  (=> (and (= (type |a#8#0#0|) BoxType) (= (type |a#8#1#0|) BoxType)) (< (BoxRank |a#8#1#0|) (DtRank (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)))) :qid |unknown.0:0| :skolemid |1127| :pattern ( (|#_System._tuple#2._#Make2| |a#8#0#0| |a#8#1#0|)) )))
(assert (forall ((d@@4 T@U) ) (!  (=> (and (= (type d@@4) DatatypeTypeType) (|$IsA#_System.Tuple2| d@@4)) (_System.Tuple2.___hMake2_q d@@4)) :qid |unknown.0:0| :skolemid |1128| :pattern ( (|$IsA#_System.Tuple2| d@@4)) )))
(assert (forall ((|_System._tuple#2$T0@@7| T@U) (|_System._tuple#2$T1@@7| T@U) (d@@5 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2$T0@@7|) TyType) (= (type |_System._tuple#2$T1@@7|) TyType)) (= (type d@@5) DatatypeTypeType)) ($Is d@@5 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|))) (_System.Tuple2.___hMake2_q d@@5)) :qid |unknown.0:0| :skolemid |1129| :pattern ( (_System.Tuple2.___hMake2_q d@@5) ($Is d@@5 (Tclass._System.Tuple2 |_System._tuple#2$T0@@7| |_System._tuple#2$T1@@7|))) )))
(assert (forall ((a@@124 T@U) (b@@61 T@U) ) (!  (=> (and (and (= (type a@@124) DatatypeTypeType) (= (type b@@61) DatatypeTypeType)) true) (= (|_System.Tuple2#Equal| a@@124 b@@61)  (and (= (_System.Tuple2._0 a@@124) (_System.Tuple2._0 b@@61)) (= (_System.Tuple2._1 a@@124) (_System.Tuple2._1 b@@61))))) :qid |unknown.0:0| :skolemid |1130| :pattern ( (|_System.Tuple2#Equal| a@@124 b@@61)) )))
(assert (forall ((a@@125 T@U) (b@@62 T@U) ) (!  (=> (and (= (type a@@125) DatatypeTypeType) (= (type b@@62) DatatypeTypeType)) (= (|_System.Tuple2#Equal| a@@125 b@@62) (= a@@125 b@@62))) :qid |unknown.0:0| :skolemid |1131| :pattern ( (|_System.Tuple2#Equal| a@@125 b@@62)) )))
(assert (forall ((arg0@@318 T@U) (arg1@@147 T@U) (arg2@@99 T@U) (arg3@@75 T@U) (arg4@@64 T@U) (arg5@@51 T@U) ) (! (= (type (Tclass._System.___hFunc5 arg0@@318 arg1@@147 arg2@@99 arg3@@75 arg4@@64 arg5@@51)) TyType) :qid |funType:Tclass._System.___hFunc5| :pattern ( (Tclass._System.___hFunc5 arg0@@318 arg1@@147 arg2@@99 arg3@@75 arg4@@64 arg5@@51)) )))
(assert (forall ((|#$T0@@155| T@U) (|#$T1@@139| T@U) (|#$T2@@120| T@U) (|#$T3@@98| T@U) (|#$T4@@73| T@U) (|#$R@@168| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@155|) TyType) (= (type |#$T1@@139|) TyType)) (= (type |#$T2@@120|) TyType)) (= (type |#$T3@@98|) TyType)) (= (type |#$T4@@73|) TyType)) (= (type |#$R@@168|) TyType)) (and (= (Tag (Tclass._System.___hFunc5 |#$T0@@155| |#$T1@@139| |#$T2@@120| |#$T3@@98| |#$T4@@73| |#$R@@168|)) Tagclass._System.___hFunc5) (= (TagFamily (Tclass._System.___hFunc5 |#$T0@@155| |#$T1@@139| |#$T2@@120| |#$T3@@98| |#$T4@@73| |#$R@@168|)) |tytagFamily$_#Func5|))) :qid |unknown.0:0| :skolemid |1132| :pattern ( (Tclass._System.___hFunc5 |#$T0@@155| |#$T1@@139| |#$T2@@120| |#$T3@@98| |#$T4@@73| |#$R@@168|)) )))
(assert (forall ((arg0@@319 T@U) ) (! (= (type (Tclass._System.___hFunc5_0 arg0@@319)) TyType) :qid |funType:Tclass._System.___hFunc5_0| :pattern ( (Tclass._System.___hFunc5_0 arg0@@319)) )))
(assert (forall ((|#$T0@@156| T@U) (|#$T1@@140| T@U) (|#$T2@@121| T@U) (|#$T3@@99| T@U) (|#$T4@@74| T@U) (|#$R@@169| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@156|) TyType) (= (type |#$T1@@140|) TyType)) (= (type |#$T2@@121|) TyType)) (= (type |#$T3@@99|) TyType)) (= (type |#$T4@@74|) TyType)) (= (type |#$R@@169|) TyType)) (= (Tclass._System.___hFunc5_0 (Tclass._System.___hFunc5 |#$T0@@156| |#$T1@@140| |#$T2@@121| |#$T3@@99| |#$T4@@74| |#$R@@169|)) |#$T0@@156|)) :qid |unknown.0:0| :skolemid |1133| :pattern ( (Tclass._System.___hFunc5 |#$T0@@156| |#$T1@@140| |#$T2@@121| |#$T3@@99| |#$T4@@74| |#$R@@169|)) )))
(assert (forall ((arg0@@320 T@U) ) (! (= (type (Tclass._System.___hFunc5_1 arg0@@320)) TyType) :qid |funType:Tclass._System.___hFunc5_1| :pattern ( (Tclass._System.___hFunc5_1 arg0@@320)) )))
(assert (forall ((|#$T0@@157| T@U) (|#$T1@@141| T@U) (|#$T2@@122| T@U) (|#$T3@@100| T@U) (|#$T4@@75| T@U) (|#$R@@170| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@157|) TyType) (= (type |#$T1@@141|) TyType)) (= (type |#$T2@@122|) TyType)) (= (type |#$T3@@100|) TyType)) (= (type |#$T4@@75|) TyType)) (= (type |#$R@@170|) TyType)) (= (Tclass._System.___hFunc5_1 (Tclass._System.___hFunc5 |#$T0@@157| |#$T1@@141| |#$T2@@122| |#$T3@@100| |#$T4@@75| |#$R@@170|)) |#$T1@@141|)) :qid |unknown.0:0| :skolemid |1134| :pattern ( (Tclass._System.___hFunc5 |#$T0@@157| |#$T1@@141| |#$T2@@122| |#$T3@@100| |#$T4@@75| |#$R@@170|)) )))
(assert (forall ((arg0@@321 T@U) ) (! (= (type (Tclass._System.___hFunc5_2 arg0@@321)) TyType) :qid |funType:Tclass._System.___hFunc5_2| :pattern ( (Tclass._System.___hFunc5_2 arg0@@321)) )))
(assert (forall ((|#$T0@@158| T@U) (|#$T1@@142| T@U) (|#$T2@@123| T@U) (|#$T3@@101| T@U) (|#$T4@@76| T@U) (|#$R@@171| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@158|) TyType) (= (type |#$T1@@142|) TyType)) (= (type |#$T2@@123|) TyType)) (= (type |#$T3@@101|) TyType)) (= (type |#$T4@@76|) TyType)) (= (type |#$R@@171|) TyType)) (= (Tclass._System.___hFunc5_2 (Tclass._System.___hFunc5 |#$T0@@158| |#$T1@@142| |#$T2@@123| |#$T3@@101| |#$T4@@76| |#$R@@171|)) |#$T2@@123|)) :qid |unknown.0:0| :skolemid |1135| :pattern ( (Tclass._System.___hFunc5 |#$T0@@158| |#$T1@@142| |#$T2@@123| |#$T3@@101| |#$T4@@76| |#$R@@171|)) )))
(assert (forall ((arg0@@322 T@U) ) (! (= (type (Tclass._System.___hFunc5_3 arg0@@322)) TyType) :qid |funType:Tclass._System.___hFunc5_3| :pattern ( (Tclass._System.___hFunc5_3 arg0@@322)) )))
(assert (forall ((|#$T0@@159| T@U) (|#$T1@@143| T@U) (|#$T2@@124| T@U) (|#$T3@@102| T@U) (|#$T4@@77| T@U) (|#$R@@172| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@159|) TyType) (= (type |#$T1@@143|) TyType)) (= (type |#$T2@@124|) TyType)) (= (type |#$T3@@102|) TyType)) (= (type |#$T4@@77|) TyType)) (= (type |#$R@@172|) TyType)) (= (Tclass._System.___hFunc5_3 (Tclass._System.___hFunc5 |#$T0@@159| |#$T1@@143| |#$T2@@124| |#$T3@@102| |#$T4@@77| |#$R@@172|)) |#$T3@@102|)) :qid |unknown.0:0| :skolemid |1136| :pattern ( (Tclass._System.___hFunc5 |#$T0@@159| |#$T1@@143| |#$T2@@124| |#$T3@@102| |#$T4@@77| |#$R@@172|)) )))
(assert (forall ((arg0@@323 T@U) ) (! (= (type (Tclass._System.___hFunc5_4 arg0@@323)) TyType) :qid |funType:Tclass._System.___hFunc5_4| :pattern ( (Tclass._System.___hFunc5_4 arg0@@323)) )))
(assert (forall ((|#$T0@@160| T@U) (|#$T1@@144| T@U) (|#$T2@@125| T@U) (|#$T3@@103| T@U) (|#$T4@@78| T@U) (|#$R@@173| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@160|) TyType) (= (type |#$T1@@144|) TyType)) (= (type |#$T2@@125|) TyType)) (= (type |#$T3@@103|) TyType)) (= (type |#$T4@@78|) TyType)) (= (type |#$R@@173|) TyType)) (= (Tclass._System.___hFunc5_4 (Tclass._System.___hFunc5 |#$T0@@160| |#$T1@@144| |#$T2@@125| |#$T3@@103| |#$T4@@78| |#$R@@173|)) |#$T4@@78|)) :qid |unknown.0:0| :skolemid |1137| :pattern ( (Tclass._System.___hFunc5 |#$T0@@160| |#$T1@@144| |#$T2@@125| |#$T3@@103| |#$T4@@78| |#$R@@173|)) )))
(assert (forall ((arg0@@324 T@U) ) (! (= (type (Tclass._System.___hFunc5_5 arg0@@324)) TyType) :qid |funType:Tclass._System.___hFunc5_5| :pattern ( (Tclass._System.___hFunc5_5 arg0@@324)) )))
(assert (forall ((|#$T0@@161| T@U) (|#$T1@@145| T@U) (|#$T2@@126| T@U) (|#$T3@@104| T@U) (|#$T4@@79| T@U) (|#$R@@174| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@161|) TyType) (= (type |#$T1@@145|) TyType)) (= (type |#$T2@@126|) TyType)) (= (type |#$T3@@104|) TyType)) (= (type |#$T4@@79|) TyType)) (= (type |#$R@@174|) TyType)) (= (Tclass._System.___hFunc5_5 (Tclass._System.___hFunc5 |#$T0@@161| |#$T1@@145| |#$T2@@126| |#$T3@@104| |#$T4@@79| |#$R@@174|)) |#$R@@174|)) :qid |unknown.0:0| :skolemid |1138| :pattern ( (Tclass._System.___hFunc5 |#$T0@@161| |#$T1@@145| |#$T2@@126| |#$T3@@104| |#$T4@@79| |#$R@@174|)) )))
(assert (forall ((|#$T0@@162| T@U) (|#$T1@@146| T@U) (|#$T2@@127| T@U) (|#$T3@@105| T@U) (|#$T4@@80| T@U) (|#$R@@175| T@U) (bx@@94 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@162|) TyType) (= (type |#$T1@@146|) TyType)) (= (type |#$T2@@127|) TyType)) (= (type |#$T3@@105|) TyType)) (= (type |#$T4@@80|) TyType)) (= (type |#$R@@175|) TyType)) (= (type bx@@94) BoxType)) ($IsBox bx@@94 (Tclass._System.___hFunc5 |#$T0@@162| |#$T1@@146| |#$T2@@127| |#$T3@@105| |#$T4@@80| |#$R@@175|))) (and (= ($Box ($Unbox HandleTypeType bx@@94)) bx@@94) ($Is ($Unbox HandleTypeType bx@@94) (Tclass._System.___hFunc5 |#$T0@@162| |#$T1@@146| |#$T2@@127| |#$T3@@105| |#$T4@@80| |#$R@@175|)))) :qid |unknown.0:0| :skolemid |1139| :pattern ( ($IsBox bx@@94 (Tclass._System.___hFunc5 |#$T0@@162| |#$T1@@146| |#$T2@@127| |#$T3@@105| |#$T4@@80| |#$R@@175|))) )))
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (forall ((arg0@@325 T@T) (arg1@@148 T@T) (arg2@@100 T@T) (arg3@@76 T@T) (arg4@@65 T@T) (arg5@@52 T@T) (arg6@@42 T@T) ) (! (= (Ctor (MapType8Type arg0@@325 arg1@@148 arg2@@100 arg3@@76 arg4@@65 arg5@@52 arg6@@42)) 30) :qid |ctor:MapType8Type| )) (forall ((arg0@@326 T@T) (arg1@@149 T@T) (arg2@@101 T@T) (arg3@@77 T@T) (arg4@@66 T@T) (arg5@@53 T@T) (arg6@@43 T@T) ) (! (= (MapType8TypeInv0 (MapType8Type arg0@@326 arg1@@149 arg2@@101 arg3@@77 arg4@@66 arg5@@53 arg6@@43)) arg0@@326) :qid |typeInv:MapType8TypeInv0| :pattern ( (MapType8Type arg0@@326 arg1@@149 arg2@@101 arg3@@77 arg4@@66 arg5@@53 arg6@@43)) ))) (forall ((arg0@@327 T@T) (arg1@@150 T@T) (arg2@@102 T@T) (arg3@@78 T@T) (arg4@@67 T@T) (arg5@@54 T@T) (arg6@@44 T@T) ) (! (= (MapType8TypeInv1 (MapType8Type arg0@@327 arg1@@150 arg2@@102 arg3@@78 arg4@@67 arg5@@54 arg6@@44)) arg1@@150) :qid |typeInv:MapType8TypeInv1| :pattern ( (MapType8Type arg0@@327 arg1@@150 arg2@@102 arg3@@78 arg4@@67 arg5@@54 arg6@@44)) ))) (forall ((arg0@@328 T@T) (arg1@@151 T@T) (arg2@@103 T@T) (arg3@@79 T@T) (arg4@@68 T@T) (arg5@@55 T@T) (arg6@@45 T@T) ) (! (= (MapType8TypeInv2 (MapType8Type arg0@@328 arg1@@151 arg2@@103 arg3@@79 arg4@@68 arg5@@55 arg6@@45)) arg2@@103) :qid |typeInv:MapType8TypeInv2| :pattern ( (MapType8Type arg0@@328 arg1@@151 arg2@@103 arg3@@79 arg4@@68 arg5@@55 arg6@@45)) ))) (forall ((arg0@@329 T@T) (arg1@@152 T@T) (arg2@@104 T@T) (arg3@@80 T@T) (arg4@@69 T@T) (arg5@@56 T@T) (arg6@@46 T@T) ) (! (= (MapType8TypeInv3 (MapType8Type arg0@@329 arg1@@152 arg2@@104 arg3@@80 arg4@@69 arg5@@56 arg6@@46)) arg3@@80) :qid |typeInv:MapType8TypeInv3| :pattern ( (MapType8Type arg0@@329 arg1@@152 arg2@@104 arg3@@80 arg4@@69 arg5@@56 arg6@@46)) ))) (forall ((arg0@@330 T@T) (arg1@@153 T@T) (arg2@@105 T@T) (arg3@@81 T@T) (arg4@@70 T@T) (arg5@@57 T@T) (arg6@@47 T@T) ) (! (= (MapType8TypeInv4 (MapType8Type arg0@@330 arg1@@153 arg2@@105 arg3@@81 arg4@@70 arg5@@57 arg6@@47)) arg4@@70) :qid |typeInv:MapType8TypeInv4| :pattern ( (MapType8Type arg0@@330 arg1@@153 arg2@@105 arg3@@81 arg4@@70 arg5@@57 arg6@@47)) ))) (forall ((arg0@@331 T@T) (arg1@@154 T@T) (arg2@@106 T@T) (arg3@@82 T@T) (arg4@@71 T@T) (arg5@@58 T@T) (arg6@@48 T@T) ) (! (= (MapType8TypeInv5 (MapType8Type arg0@@331 arg1@@154 arg2@@106 arg3@@82 arg4@@71 arg5@@58 arg6@@48)) arg5@@58) :qid |typeInv:MapType8TypeInv5| :pattern ( (MapType8Type arg0@@331 arg1@@154 arg2@@106 arg3@@82 arg4@@71 arg5@@58 arg6@@48)) ))) (forall ((arg0@@332 T@T) (arg1@@155 T@T) (arg2@@107 T@T) (arg3@@83 T@T) (arg4@@72 T@T) (arg5@@59 T@T) (arg6@@49 T@T) ) (! (= (MapType8TypeInv6 (MapType8Type arg0@@332 arg1@@155 arg2@@107 arg3@@83 arg4@@72 arg5@@59 arg6@@49)) arg6@@49) :qid |typeInv:MapType8TypeInv6| :pattern ( (MapType8Type arg0@@332 arg1@@155 arg2@@107 arg3@@83 arg4@@72 arg5@@59 arg6@@49)) ))) (forall ((arg0@@333 T@U) (arg1@@156 T@U) (arg2@@108 T@U) (arg3@@84 T@U) (arg4@@73 T@U) (arg5@@60 T@U) (arg6@@50 T@U) ) (! (let ((aVar6@@1 (MapType8TypeInv6 (type arg0@@333)))) (= (type (MapType8Select arg0@@333 arg1@@156 arg2@@108 arg3@@84 arg4@@73 arg5@@60 arg6@@50)) aVar6@@1)) :qid |funType:MapType8Select| :pattern ( (MapType8Select arg0@@333 arg1@@156 arg2@@108 arg3@@84 arg4@@73 arg5@@60 arg6@@50)) ))) (forall ((arg0@@334 T@U) (arg1@@157 T@U) (arg2@@109 T@U) (arg3@@85 T@U) (arg4@@74 T@U) (arg5@@61 T@U) (arg6@@51 T@U) (arg7@@36 T@U) ) (! (let ((aVar6@@2 (type arg7@@36))) (let ((aVar5@@4 (type arg6@@51))) (let ((aVar4@@5 (type arg5@@61))) (let ((aVar3@@6 (type arg4@@74))) (let ((aVar2@@7 (type arg3@@85))) (let ((aVar1@@8 (type arg2@@109))) (let ((aVar0@@6 (type arg1@@157))) (= (type (MapType8Store arg0@@334 arg1@@157 arg2@@109 arg3@@85 arg4@@74 arg5@@61 arg6@@51 arg7@@36)) (MapType8Type aVar0@@6 aVar1@@8 aVar2@@7 aVar3@@6 aVar4@@5 aVar5@@4 aVar6@@2))))))))) :qid |funType:MapType8Store| :pattern ( (MapType8Store arg0@@334 arg1@@157 arg2@@109 arg3@@85 arg4@@74 arg5@@61 arg6@@51 arg7@@36)) ))) (forall ((m@@89 T@U) (x0@@49 T@U) (x1@@43 T@U) (x2@@39 T@U) (x3@@34 T@U) (x4@@28 T@U) (x5@@21 T@U) (val@@50 T@U) ) (! (let ((aVar6@@3 (MapType8TypeInv6 (type m@@89)))) (=> (= (type val@@50) aVar6@@3) (= (MapType8Select (MapType8Store m@@89 x0@@49 x1@@43 x2@@39 x3@@34 x4@@28 x5@@21 val@@50) x0@@49 x1@@43 x2@@39 x3@@34 x4@@28 x5@@21) val@@50))) :qid |mapAx0:MapType8Select| :weight 0 ))) (and (and (and (and (and (and (forall ((val@@51 T@U) (m@@90 T@U) (x0@@50 T@U) (x1@@44 T@U) (x2@@40 T@U) (x3@@35 T@U) (x4@@29 T@U) (x5@@22 T@U) (y0@@41 T@U) (y1@@37 T@U) (y2@@34 T@U) (y3@@30 T@U) (y4@@25 T@U) (y5@@19 T@U) ) (!  (or (= x0@@50 y0@@41) (= (MapType8Select (MapType8Store m@@90 x0@@50 x1@@44 x2@@40 x3@@35 x4@@29 x5@@22 val@@51) y0@@41 y1@@37 y2@@34 y3@@30 y4@@25 y5@@19) (MapType8Select m@@90 y0@@41 y1@@37 y2@@34 y3@@30 y4@@25 y5@@19))) :qid |mapAx1:MapType8Select:0| :weight 0 )) (forall ((val@@52 T@U) (m@@91 T@U) (x0@@51 T@U) (x1@@45 T@U) (x2@@41 T@U) (x3@@36 T@U) (x4@@30 T@U) (x5@@23 T@U) (y0@@42 T@U) (y1@@38 T@U) (y2@@35 T@U) (y3@@31 T@U) (y4@@26 T@U) (y5@@20 T@U) ) (!  (or (= x1@@45 y1@@38) (= (MapType8Select (MapType8Store m@@91 x0@@51 x1@@45 x2@@41 x3@@36 x4@@30 x5@@23 val@@52) y0@@42 y1@@38 y2@@35 y3@@31 y4@@26 y5@@20) (MapType8Select m@@91 y0@@42 y1@@38 y2@@35 y3@@31 y4@@26 y5@@20))) :qid |mapAx1:MapType8Select:1| :weight 0 ))) (forall ((val@@53 T@U) (m@@92 T@U) (x0@@52 T@U) (x1@@46 T@U) (x2@@42 T@U) (x3@@37 T@U) (x4@@31 T@U) (x5@@24 T@U) (y0@@43 T@U) (y1@@39 T@U) (y2@@36 T@U) (y3@@32 T@U) (y4@@27 T@U) (y5@@21 T@U) ) (!  (or (= x2@@42 y2@@36) (= (MapType8Select (MapType8Store m@@92 x0@@52 x1@@46 x2@@42 x3@@37 x4@@31 x5@@24 val@@53) y0@@43 y1@@39 y2@@36 y3@@32 y4@@27 y5@@21) (MapType8Select m@@92 y0@@43 y1@@39 y2@@36 y3@@32 y4@@27 y5@@21))) :qid |mapAx1:MapType8Select:2| :weight 0 ))) (forall ((val@@54 T@U) (m@@93 T@U) (x0@@53 T@U) (x1@@47 T@U) (x2@@43 T@U) (x3@@38 T@U) (x4@@32 T@U) (x5@@25 T@U) (y0@@44 T@U) (y1@@40 T@U) (y2@@37 T@U) (y3@@33 T@U) (y4@@28 T@U) (y5@@22 T@U) ) (!  (or (= x3@@38 y3@@33) (= (MapType8Select (MapType8Store m@@93 x0@@53 x1@@47 x2@@43 x3@@38 x4@@32 x5@@25 val@@54) y0@@44 y1@@40 y2@@37 y3@@33 y4@@28 y5@@22) (MapType8Select m@@93 y0@@44 y1@@40 y2@@37 y3@@33 y4@@28 y5@@22))) :qid |mapAx1:MapType8Select:3| :weight 0 ))) (forall ((val@@55 T@U) (m@@94 T@U) (x0@@54 T@U) (x1@@48 T@U) (x2@@44 T@U) (x3@@39 T@U) (x4@@33 T@U) (x5@@26 T@U) (y0@@45 T@U) (y1@@41 T@U) (y2@@38 T@U) (y3@@34 T@U) (y4@@29 T@U) (y5@@23 T@U) ) (!  (or (= x4@@33 y4@@29) (= (MapType8Select (MapType8Store m@@94 x0@@54 x1@@48 x2@@44 x3@@39 x4@@33 x5@@26 val@@55) y0@@45 y1@@41 y2@@38 y3@@34 y4@@29 y5@@23) (MapType8Select m@@94 y0@@45 y1@@41 y2@@38 y3@@34 y4@@29 y5@@23))) :qid |mapAx1:MapType8Select:4| :weight 0 ))) (forall ((val@@56 T@U) (m@@95 T@U) (x0@@55 T@U) (x1@@49 T@U) (x2@@45 T@U) (x3@@40 T@U) (x4@@34 T@U) (x5@@27 T@U) (y0@@46 T@U) (y1@@42 T@U) (y2@@39 T@U) (y3@@35 T@U) (y4@@30 T@U) (y5@@24 T@U) ) (!  (or (= x5@@27 y5@@24) (= (MapType8Select (MapType8Store m@@95 x0@@55 x1@@49 x2@@45 x3@@40 x4@@34 x5@@27 val@@56) y0@@46 y1@@42 y2@@39 y3@@35 y4@@30 y5@@24) (MapType8Select m@@95 y0@@46 y1@@42 y2@@39 y3@@35 y4@@30 y5@@24))) :qid |mapAx1:MapType8Select:5| :weight 0 ))) (forall ((val@@57 T@U) (m@@96 T@U) (x0@@56 T@U) (x1@@50 T@U) (x2@@46 T@U) (x3@@41 T@U) (x4@@35 T@U) (x5@@28 T@U) (y0@@47 T@U) (y1@@43 T@U) (y2@@40 T@U) (y3@@36 T@U) (y4@@31 T@U) (y5@@25 T@U) ) (!  (or true (= (MapType8Select (MapType8Store m@@96 x0@@56 x1@@50 x2@@46 x3@@41 x4@@35 x5@@28 val@@57) y0@@47 y1@@43 y2@@40 y3@@36 y4@@31 y5@@25) (MapType8Select m@@96 y0@@47 y1@@43 y2@@40 y3@@36 y4@@31 y5@@25))) :qid |mapAx2:MapType8Select| :weight 0 )))) (forall ((arg0@@335 T@U) (arg1@@158 T@U) (arg2@@110 T@U) (arg3@@86 T@U) (arg4@@75 T@U) (arg5@@62 T@U) (arg6@@52 T@U) (arg7@@37 T@U) (arg8@@26 T@U) (arg9@@23 T@U) (arg10@@23 T@U) (arg11@@18 T@U) (arg12@@4 T@U) ) (! (= (type (Apply5 arg0@@335 arg1@@158 arg2@@110 arg3@@86 arg4@@75 arg5@@62 arg6@@52 arg7@@37 arg8@@26 arg9@@23 arg10@@23 arg11@@18 arg12@@4)) BoxType) :qid |funType:Apply5| :pattern ( (Apply5 arg0@@335 arg1@@158 arg2@@110 arg3@@86 arg4@@75 arg5@@62 arg6@@52 arg7@@37 arg8@@26 arg9@@23 arg10@@23 arg11@@18 arg12@@4)) ))) (forall ((arg0@@336 T@U) (arg1@@159 T@U) (arg2@@111 T@U) ) (! (= (type (Handle5 arg0@@336 arg1@@159 arg2@@111)) HandleTypeType) :qid |funType:Handle5| :pattern ( (Handle5 arg0@@336 arg1@@159 arg2@@111)) ))))
(assert (forall ((t0@@121 T@U) (t1@@97 T@U) (t2@@74 T@U) (t3@@59 T@U) (t4@@44 T@U) (t5@@29 T@U) (heap@@36 T@U) (h@@63 T@U) (r@@34 T@U) (rd@@20 T@U) (bx0@@83 T@U) (bx1@@69 T@U) (bx2@@55 T@U) (bx3@@41 T@U) (bx4@@27 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@121) TyType) (= (type t1@@97) TyType)) (= (type t2@@74) TyType)) (= (type t3@@59) TyType)) (= (type t4@@44) TyType)) (= (type t5@@29) TyType)) (= (type heap@@36) (MapType0Type refType MapType1Type))) (= (type h@@63) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@34) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@20) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@83) BoxType)) (= (type bx1@@69) BoxType)) (= (type bx2@@55) BoxType)) (= (type bx3@@41) BoxType)) (= (type bx4@@27) BoxType)) (= (Apply5 t0@@121 t1@@97 t2@@74 t3@@59 t4@@44 t5@@29 heap@@36 (Handle5 h@@63 r@@34 rd@@20) bx0@@83 bx1@@69 bx2@@55 bx3@@41 bx4@@27) (MapType8Select h@@63 heap@@36 bx0@@83 bx1@@69 bx2@@55 bx3@@41 bx4@@27))) :qid |unknown.0:0| :skolemid |1140| :pattern ( (Apply5 t0@@121 t1@@97 t2@@74 t3@@59 t4@@44 t5@@29 heap@@36 (Handle5 h@@63 r@@34 rd@@20) bx0@@83 bx1@@69 bx2@@55 bx3@@41 bx4@@27)) )))
(assert (forall ((t0@@122 T@U) (t1@@98 T@U) (t2@@75 T@U) (t3@@60 T@U) (t4@@45 T@U) (t5@@30 T@U) (heap@@37 T@U) (h@@64 T@U) (r@@35 T@U) (rd@@21 T@U) (bx0@@84 T@U) (bx1@@70 T@U) (bx2@@56 T@U) (bx3@@42 T@U) (bx4@@28 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@122) TyType) (= (type t1@@98) TyType)) (= (type t2@@75) TyType)) (= (type t3@@60) TyType)) (= (type t4@@45) TyType)) (= (type t5@@30) TyType)) (= (type heap@@37) (MapType0Type refType MapType1Type))) (= (type h@@64) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@35) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@21) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@84) BoxType)) (= (type bx1@@70) BoxType)) (= (type bx2@@56) BoxType)) (= (type bx3@@42) BoxType)) (= (type bx4@@28) BoxType)) (U_2_bool (MapType8Select r@@35 heap@@37 bx0@@84 bx1@@70 bx2@@56 bx3@@42 bx4@@28))) (Requires5 t0@@122 t1@@98 t2@@75 t3@@60 t4@@45 t5@@30 heap@@37 (Handle5 h@@64 r@@35 rd@@21) bx0@@84 bx1@@70 bx2@@56 bx3@@42 bx4@@28)) :qid |unknown.0:0| :skolemid |1141| :pattern ( (Requires5 t0@@122 t1@@98 t2@@75 t3@@60 t4@@45 t5@@30 heap@@37 (Handle5 h@@64 r@@35 rd@@21) bx0@@84 bx1@@70 bx2@@56 bx3@@42 bx4@@28)) )))
(assert (forall ((arg0@@337 T@U) (arg1@@160 T@U) (arg2@@112 T@U) (arg3@@87 T@U) (arg4@@76 T@U) (arg5@@63 T@U) (arg6@@53 T@U) (arg7@@38 T@U) (arg8@@27 T@U) (arg9@@24 T@U) (arg10@@24 T@U) (arg11@@19 T@U) (arg12@@5 T@U) ) (! (= (type (Reads5 arg0@@337 arg1@@160 arg2@@112 arg3@@87 arg4@@76 arg5@@63 arg6@@53 arg7@@38 arg8@@27 arg9@@24 arg10@@24 arg11@@19 arg12@@5)) (MapType0Type BoxType boolType)) :qid |funType:Reads5| :pattern ( (Reads5 arg0@@337 arg1@@160 arg2@@112 arg3@@87 arg4@@76 arg5@@63 arg6@@53 arg7@@38 arg8@@27 arg9@@24 arg10@@24 arg11@@19 arg12@@5)) )))
(assert (forall ((t0@@123 T@U) (t1@@99 T@U) (t2@@76 T@U) (t3@@61 T@U) (t4@@46 T@U) (t5@@31 T@U) (heap@@38 T@U) (h@@65 T@U) (r@@36 T@U) (rd@@22 T@U) (bx0@@85 T@U) (bx1@@71 T@U) (bx2@@57 T@U) (bx3@@43 T@U) (bx4@@29 T@U) (bx@@95 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@123) TyType) (= (type t1@@99) TyType)) (= (type t2@@76) TyType)) (= (type t3@@61) TyType)) (= (type t4@@46) TyType)) (= (type t5@@31) TyType)) (= (type heap@@38) (MapType0Type refType MapType1Type))) (= (type h@@65) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType BoxType))) (= (type r@@36) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType boolType))) (= (type rd@@22) (MapType8Type (MapType0Type refType MapType1Type) BoxType BoxType BoxType BoxType BoxType (MapType0Type BoxType boolType)))) (= (type bx0@@85) BoxType)) (= (type bx1@@71) BoxType)) (= (type bx2@@57) BoxType)) (= (type bx3@@43) BoxType)) (= (type bx4@@29) BoxType)) (= (type bx@@95) BoxType)) (= (U_2_bool (MapType0Select (Reads5 t0@@123 t1@@99 t2@@76 t3@@61 t4@@46 t5@@31 heap@@38 (Handle5 h@@65 r@@36 rd@@22) bx0@@85 bx1@@71 bx2@@57 bx3@@43 bx4@@29) bx@@95)) (U_2_bool (MapType0Select (MapType8Select rd@@22 heap@@38 bx0@@85 bx1@@71 bx2@@57 bx3@@43 bx4@@29) bx@@95)))) :qid |unknown.0:0| :skolemid |1142| :pattern ( (MapType0Select (Reads5 t0@@123 t1@@99 t2@@76 t3@@61 t4@@46 t5@@31 heap@@38 (Handle5 h@@65 r@@36 rd@@22) bx0@@85 bx1@@71 bx2@@57 bx3@@43 bx4@@29) bx@@95)) )))
(assert (forall ((t0@@124 T@U) (t1@@100 T@U) (t2@@77 T@U) (t3@@62 T@U) (t4@@47 T@U) (t5@@32 T@U) (h0@@42 T@U) (h1@@42 T@U) (f@@89 T@U) (bx0@@86 T@U) (bx1@@72 T@U) (bx2@@58 T@U) (bx3@@44 T@U) (bx4@@30 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@124) TyType) (= (type t1@@100) TyType)) (= (type t2@@77) TyType)) (= (type t3@@62) TyType)) (= (type t4@@47) TyType)) (= (type t5@@32) TyType)) (= (type h0@@42) (MapType0Type refType MapType1Type))) (= (type h1@@42) (MapType0Type refType MapType1Type))) (= (type f@@89) HandleTypeType)) (= (type bx0@@86) BoxType)) (= (type bx1@@72) BoxType)) (= (type bx2@@58) BoxType)) (= (type bx3@@44) BoxType)) (= (type bx4@@30) BoxType)) (and (and (and ($HeapSucc h0@@42 h1@@42) (and ($IsGoodHeap h0@@42) ($IsGoodHeap h1@@42))) (and (and (and (and (and ($IsBox bx0@@86 t0@@124) ($IsBox bx1@@72 t1@@100)) ($IsBox bx2@@58 t2@@77)) ($IsBox bx3@@44 t3@@62)) ($IsBox bx4@@30 t4@@47)) ($Is f@@89 (Tclass._System.___hFunc5 t0@@124 t1@@100 t2@@77 t3@@62 t4@@47 t5@@32)))) (forall ((o@@86 T@U) (fld@@41 T@U) ) (! (let ((a@@126 (FieldTypeInv0 (type fld@@41)))) (=> (and (and (= (type o@@86) refType) (= (type fld@@41) (FieldType a@@126))) (and (not (= o@@86 null)) (U_2_bool (MapType0Select (Reads5 t0@@124 t1@@100 t2@@77 t3@@62 t4@@47 t5@@32 h0@@42 f@@89 bx0@@86 bx1@@72 bx2@@58 bx3@@44 bx4@@30) ($Box o@@86))))) (= (MapType1Select (MapType0Select h0@@42 o@@86) fld@@41) (MapType1Select (MapType0Select h1@@42 o@@86) fld@@41)))) :qid |unknown.0:0| :skolemid |1143| :no-pattern (type o@@86) :no-pattern (type fld@@41) :no-pattern (U_2_int o@@86) :no-pattern (U_2_bool o@@86) :no-pattern (U_2_int fld@@41) :no-pattern (U_2_bool fld@@41) )))) (= (Reads5 t0@@124 t1@@100 t2@@77 t3@@62 t4@@47 t5@@32 h0@@42 f@@89 bx0@@86 bx1@@72 bx2@@58 bx3@@44 bx4@@30) (Reads5 t0@@124 t1@@100 t2@@77 t3@@62 t4@@47 t5@@32 h1@@42 f@@89 bx0@@86 bx1@@72 bx2@@58 bx3@@44 bx4@@30))) :qid |unknown.0:0| :skolemid |1144| :pattern ( ($HeapSucc h0@@42 h1@@42) (Reads5 t0@@124 t1@@100 t2@@77 t3@@62 t4@@47 t5@@32 h1@@42 f@@89 bx0@@86 bx1@@72 bx2@@58 bx3@@44 bx4@@30)) )))
(assert (forall ((t0@@125 T@U) (t1@@101 T@U) (t2@@78 T@U) (t3@@63 T@U) (t4@@48 T@U) (t5@@33 T@U) (h0@@43 T@U) (h1@@43 T@U) (f@@90 T@U) (bx0@@87 T@U) (bx1@@73 T@U) (bx2@@59 T@U) (bx3@@45 T@U) (bx4@@31 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@125) TyType) (= (type t1@@101) TyType)) (= (type t2@@78) TyType)) (= (type t3@@63) TyType)) (= (type t4@@48) TyType)) (= (type t5@@33) TyType)) (= (type h0@@43) (MapType0Type refType MapType1Type))) (= (type h1@@43) (MapType0Type refType MapType1Type))) (= (type f@@90) HandleTypeType)) (= (type bx0@@87) BoxType)) (= (type bx1@@73) BoxType)) (= (type bx2@@59) BoxType)) (= (type bx3@@45) BoxType)) (= (type bx4@@31) BoxType)) (and (and (and ($HeapSucc h0@@43 h1@@43) (and ($IsGoodHeap h0@@43) ($IsGoodHeap h1@@43))) (and (and (and (and (and ($IsBox bx0@@87 t0@@125) ($IsBox bx1@@73 t1@@101)) ($IsBox bx2@@59 t2@@78)) ($IsBox bx3@@45 t3@@63)) ($IsBox bx4@@31 t4@@48)) ($Is f@@90 (Tclass._System.___hFunc5 t0@@125 t1@@101 t2@@78 t3@@63 t4@@48 t5@@33)))) (forall ((o@@87 T@U) (fld@@42 T@U) ) (! (let ((a@@127 (FieldTypeInv0 (type fld@@42)))) (=> (and (and (= (type o@@87) refType) (= (type fld@@42) (FieldType a@@127))) (and (not (= o@@87 null)) (U_2_bool (MapType0Select (Reads5 t0@@125 t1@@101 t2@@78 t3@@63 t4@@48 t5@@33 h1@@43 f@@90 bx0@@87 bx1@@73 bx2@@59 bx3@@45 bx4@@31) ($Box o@@87))))) (= (MapType1Select (MapType0Select h0@@43 o@@87) fld@@42) (MapType1Select (MapType0Select h1@@43 o@@87) fld@@42)))) :qid |unknown.0:0| :skolemid |1145| :no-pattern (type o@@87) :no-pattern (type fld@@42) :no-pattern (U_2_int o@@87) :no-pattern (U_2_bool o@@87) :no-pattern (U_2_int fld@@42) :no-pattern (U_2_bool fld@@42) )))) (= (Reads5 t0@@125 t1@@101 t2@@78 t3@@63 t4@@48 t5@@33 h0@@43 f@@90 bx0@@87 bx1@@73 bx2@@59 bx3@@45 bx4@@31) (Reads5 t0@@125 t1@@101 t2@@78 t3@@63 t4@@48 t5@@33 h1@@43 f@@90 bx0@@87 bx1@@73 bx2@@59 bx3@@45 bx4@@31))) :qid |unknown.0:0| :skolemid |1146| :pattern ( ($HeapSucc h0@@43 h1@@43) (Reads5 t0@@125 t1@@101 t2@@78 t3@@63 t4@@48 t5@@33 h1@@43 f@@90 bx0@@87 bx1@@73 bx2@@59 bx3@@45 bx4@@31)) )))
(assert (forall ((t0@@126 T@U) (t1@@102 T@U) (t2@@79 T@U) (t3@@64 T@U) (t4@@49 T@U) (t5@@34 T@U) (h0@@44 T@U) (h1@@44 T@U) (f@@91 T@U) (bx0@@88 T@U) (bx1@@74 T@U) (bx2@@60 T@U) (bx3@@46 T@U) (bx4@@32 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@126) TyType) (= (type t1@@102) TyType)) (= (type t2@@79) TyType)) (= (type t3@@64) TyType)) (= (type t4@@49) TyType)) (= (type t5@@34) TyType)) (= (type h0@@44) (MapType0Type refType MapType1Type))) (= (type h1@@44) (MapType0Type refType MapType1Type))) (= (type f@@91) HandleTypeType)) (= (type bx0@@88) BoxType)) (= (type bx1@@74) BoxType)) (= (type bx2@@60) BoxType)) (= (type bx3@@46) BoxType)) (= (type bx4@@32) BoxType)) (and (and (and ($HeapSucc h0@@44 h1@@44) (and ($IsGoodHeap h0@@44) ($IsGoodHeap h1@@44))) (and (and (and (and (and ($IsBox bx0@@88 t0@@126) ($IsBox bx1@@74 t1@@102)) ($IsBox bx2@@60 t2@@79)) ($IsBox bx3@@46 t3@@64)) ($IsBox bx4@@32 t4@@49)) ($Is f@@91 (Tclass._System.___hFunc5 t0@@126 t1@@102 t2@@79 t3@@64 t4@@49 t5@@34)))) (forall ((o@@88 T@U) (fld@@43 T@U) ) (! (let ((a@@128 (FieldTypeInv0 (type fld@@43)))) (=> (and (and (= (type o@@88) refType) (= (type fld@@43) (FieldType a@@128))) (and (not (= o@@88 null)) (U_2_bool (MapType0Select (Reads5 t0@@126 t1@@102 t2@@79 t3@@64 t4@@49 t5@@34 h0@@44 f@@91 bx0@@88 bx1@@74 bx2@@60 bx3@@46 bx4@@32) ($Box o@@88))))) (= (MapType1Select (MapType0Select h0@@44 o@@88) fld@@43) (MapType1Select (MapType0Select h1@@44 o@@88) fld@@43)))) :qid |unknown.0:0| :skolemid |1147| :no-pattern (type o@@88) :no-pattern (type fld@@43) :no-pattern (U_2_int o@@88) :no-pattern (U_2_bool o@@88) :no-pattern (U_2_int fld@@43) :no-pattern (U_2_bool fld@@43) )))) (= (Requires5 t0@@126 t1@@102 t2@@79 t3@@64 t4@@49 t5@@34 h0@@44 f@@91 bx0@@88 bx1@@74 bx2@@60 bx3@@46 bx4@@32) (Requires5 t0@@126 t1@@102 t2@@79 t3@@64 t4@@49 t5@@34 h1@@44 f@@91 bx0@@88 bx1@@74 bx2@@60 bx3@@46 bx4@@32))) :qid |unknown.0:0| :skolemid |1148| :pattern ( ($HeapSucc h0@@44 h1@@44) (Requires5 t0@@126 t1@@102 t2@@79 t3@@64 t4@@49 t5@@34 h1@@44 f@@91 bx0@@88 bx1@@74 bx2@@60 bx3@@46 bx4@@32)) )))
(assert (forall ((t0@@127 T@U) (t1@@103 T@U) (t2@@80 T@U) (t3@@65 T@U) (t4@@50 T@U) (t5@@35 T@U) (h0@@45 T@U) (h1@@45 T@U) (f@@92 T@U) (bx0@@89 T@U) (bx1@@75 T@U) (bx2@@61 T@U) (bx3@@47 T@U) (bx4@@33 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@127) TyType) (= (type t1@@103) TyType)) (= (type t2@@80) TyType)) (= (type t3@@65) TyType)) (= (type t4@@50) TyType)) (= (type t5@@35) TyType)) (= (type h0@@45) (MapType0Type refType MapType1Type))) (= (type h1@@45) (MapType0Type refType MapType1Type))) (= (type f@@92) HandleTypeType)) (= (type bx0@@89) BoxType)) (= (type bx1@@75) BoxType)) (= (type bx2@@61) BoxType)) (= (type bx3@@47) BoxType)) (= (type bx4@@33) BoxType)) (and (and (and ($HeapSucc h0@@45 h1@@45) (and ($IsGoodHeap h0@@45) ($IsGoodHeap h1@@45))) (and (and (and (and (and ($IsBox bx0@@89 t0@@127) ($IsBox bx1@@75 t1@@103)) ($IsBox bx2@@61 t2@@80)) ($IsBox bx3@@47 t3@@65)) ($IsBox bx4@@33 t4@@50)) ($Is f@@92 (Tclass._System.___hFunc5 t0@@127 t1@@103 t2@@80 t3@@65 t4@@50 t5@@35)))) (forall ((o@@89 T@U) (fld@@44 T@U) ) (! (let ((a@@129 (FieldTypeInv0 (type fld@@44)))) (=> (and (and (= (type o@@89) refType) (= (type fld@@44) (FieldType a@@129))) (and (not (= o@@89 null)) (U_2_bool (MapType0Select (Reads5 t0@@127 t1@@103 t2@@80 t3@@65 t4@@50 t5@@35 h1@@45 f@@92 bx0@@89 bx1@@75 bx2@@61 bx3@@47 bx4@@33) ($Box o@@89))))) (= (MapType1Select (MapType0Select h0@@45 o@@89) fld@@44) (MapType1Select (MapType0Select h1@@45 o@@89) fld@@44)))) :qid |unknown.0:0| :skolemid |1149| :no-pattern (type o@@89) :no-pattern (type fld@@44) :no-pattern (U_2_int o@@89) :no-pattern (U_2_bool o@@89) :no-pattern (U_2_int fld@@44) :no-pattern (U_2_bool fld@@44) )))) (= (Requires5 t0@@127 t1@@103 t2@@80 t3@@65 t4@@50 t5@@35 h0@@45 f@@92 bx0@@89 bx1@@75 bx2@@61 bx3@@47 bx4@@33) (Requires5 t0@@127 t1@@103 t2@@80 t3@@65 t4@@50 t5@@35 h1@@45 f@@92 bx0@@89 bx1@@75 bx2@@61 bx3@@47 bx4@@33))) :qid |unknown.0:0| :skolemid |1150| :pattern ( ($HeapSucc h0@@45 h1@@45) (Requires5 t0@@127 t1@@103 t2@@80 t3@@65 t4@@50 t5@@35 h1@@45 f@@92 bx0@@89 bx1@@75 bx2@@61 bx3@@47 bx4@@33)) )))
(assert (forall ((t0@@128 T@U) (t1@@104 T@U) (t2@@81 T@U) (t3@@66 T@U) (t4@@51 T@U) (t5@@36 T@U) (h0@@46 T@U) (h1@@46 T@U) (f@@93 T@U) (bx0@@90 T@U) (bx1@@76 T@U) (bx2@@62 T@U) (bx3@@48 T@U) (bx4@@34 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@128) TyType) (= (type t1@@104) TyType)) (= (type t2@@81) TyType)) (= (type t3@@66) TyType)) (= (type t4@@51) TyType)) (= (type t5@@36) TyType)) (= (type h0@@46) (MapType0Type refType MapType1Type))) (= (type h1@@46) (MapType0Type refType MapType1Type))) (= (type f@@93) HandleTypeType)) (= (type bx0@@90) BoxType)) (= (type bx1@@76) BoxType)) (= (type bx2@@62) BoxType)) (= (type bx3@@48) BoxType)) (= (type bx4@@34) BoxType)) (and (and (and ($HeapSucc h0@@46 h1@@46) (and ($IsGoodHeap h0@@46) ($IsGoodHeap h1@@46))) (and (and (and (and (and ($IsBox bx0@@90 t0@@128) ($IsBox bx1@@76 t1@@104)) ($IsBox bx2@@62 t2@@81)) ($IsBox bx3@@48 t3@@66)) ($IsBox bx4@@34 t4@@51)) ($Is f@@93 (Tclass._System.___hFunc5 t0@@128 t1@@104 t2@@81 t3@@66 t4@@51 t5@@36)))) (forall ((o@@90 T@U) (fld@@45 T@U) ) (! (let ((a@@130 (FieldTypeInv0 (type fld@@45)))) (=> (and (and (= (type o@@90) refType) (= (type fld@@45) (FieldType a@@130))) (and (not (= o@@90 null)) (U_2_bool (MapType0Select (Reads5 t0@@128 t1@@104 t2@@81 t3@@66 t4@@51 t5@@36 h0@@46 f@@93 bx0@@90 bx1@@76 bx2@@62 bx3@@48 bx4@@34) ($Box o@@90))))) (= (MapType1Select (MapType0Select h0@@46 o@@90) fld@@45) (MapType1Select (MapType0Select h1@@46 o@@90) fld@@45)))) :qid |unknown.0:0| :skolemid |1151| :no-pattern (type o@@90) :no-pattern (type fld@@45) :no-pattern (U_2_int o@@90) :no-pattern (U_2_bool o@@90) :no-pattern (U_2_int fld@@45) :no-pattern (U_2_bool fld@@45) )))) (= (Apply5 t0@@128 t1@@104 t2@@81 t3@@66 t4@@51 t5@@36 h0@@46 f@@93 bx0@@90 bx1@@76 bx2@@62 bx3@@48 bx4@@34) (Apply5 t0@@128 t1@@104 t2@@81 t3@@66 t4@@51 t5@@36 h1@@46 f@@93 bx0@@90 bx1@@76 bx2@@62 bx3@@48 bx4@@34))) :qid |unknown.0:0| :skolemid |1152| :pattern ( ($HeapSucc h0@@46 h1@@46) (Apply5 t0@@128 t1@@104 t2@@81 t3@@66 t4@@51 t5@@36 h1@@46 f@@93 bx0@@90 bx1@@76 bx2@@62 bx3@@48 bx4@@34)) )))
(assert (forall ((t0@@129 T@U) (t1@@105 T@U) (t2@@82 T@U) (t3@@67 T@U) (t4@@52 T@U) (t5@@37 T@U) (h0@@47 T@U) (h1@@47 T@U) (f@@94 T@U) (bx0@@91 T@U) (bx1@@77 T@U) (bx2@@63 T@U) (bx3@@49 T@U) (bx4@@35 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@129) TyType) (= (type t1@@105) TyType)) (= (type t2@@82) TyType)) (= (type t3@@67) TyType)) (= (type t4@@52) TyType)) (= (type t5@@37) TyType)) (= (type h0@@47) (MapType0Type refType MapType1Type))) (= (type h1@@47) (MapType0Type refType MapType1Type))) (= (type f@@94) HandleTypeType)) (= (type bx0@@91) BoxType)) (= (type bx1@@77) BoxType)) (= (type bx2@@63) BoxType)) (= (type bx3@@49) BoxType)) (= (type bx4@@35) BoxType)) (and (and (and ($HeapSucc h0@@47 h1@@47) (and ($IsGoodHeap h0@@47) ($IsGoodHeap h1@@47))) (and (and (and (and (and ($IsBox bx0@@91 t0@@129) ($IsBox bx1@@77 t1@@105)) ($IsBox bx2@@63 t2@@82)) ($IsBox bx3@@49 t3@@67)) ($IsBox bx4@@35 t4@@52)) ($Is f@@94 (Tclass._System.___hFunc5 t0@@129 t1@@105 t2@@82 t3@@67 t4@@52 t5@@37)))) (forall ((o@@91 T@U) (fld@@46 T@U) ) (! (let ((a@@131 (FieldTypeInv0 (type fld@@46)))) (=> (and (and (= (type o@@91) refType) (= (type fld@@46) (FieldType a@@131))) (and (not (= o@@91 null)) (U_2_bool (MapType0Select (Reads5 t0@@129 t1@@105 t2@@82 t3@@67 t4@@52 t5@@37 h1@@47 f@@94 bx0@@91 bx1@@77 bx2@@63 bx3@@49 bx4@@35) ($Box o@@91))))) (= (MapType1Select (MapType0Select h0@@47 o@@91) fld@@46) (MapType1Select (MapType0Select h1@@47 o@@91) fld@@46)))) :qid |unknown.0:0| :skolemid |1153| :no-pattern (type o@@91) :no-pattern (type fld@@46) :no-pattern (U_2_int o@@91) :no-pattern (U_2_bool o@@91) :no-pattern (U_2_int fld@@46) :no-pattern (U_2_bool fld@@46) )))) (= (Apply5 t0@@129 t1@@105 t2@@82 t3@@67 t4@@52 t5@@37 h0@@47 f@@94 bx0@@91 bx1@@77 bx2@@63 bx3@@49 bx4@@35) (Apply5 t0@@129 t1@@105 t2@@82 t3@@67 t4@@52 t5@@37 h1@@47 f@@94 bx0@@91 bx1@@77 bx2@@63 bx3@@49 bx4@@35))) :qid |unknown.0:0| :skolemid |1154| :pattern ( ($HeapSucc h0@@47 h1@@47) (Apply5 t0@@129 t1@@105 t2@@82 t3@@67 t4@@52 t5@@37 h1@@47 f@@94 bx0@@91 bx1@@77 bx2@@63 bx3@@49 bx4@@35)) )))
(assert (forall ((t0@@130 T@U) (t1@@106 T@U) (t2@@83 T@U) (t3@@68 T@U) (t4@@53 T@U) (t5@@38 T@U) (heap@@39 T@U) (f@@95 T@U) (bx0@@92 T@U) (bx1@@78 T@U) (bx2@@64 T@U) (bx3@@50 T@U) (bx4@@36 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@130) TyType) (= (type t1@@106) TyType)) (= (type t2@@83) TyType)) (= (type t3@@68) TyType)) (= (type t4@@53) TyType)) (= (type t5@@38) TyType)) (= (type heap@@39) (MapType0Type refType MapType1Type))) (= (type f@@95) HandleTypeType)) (= (type bx0@@92) BoxType)) (= (type bx1@@78) BoxType)) (= (type bx2@@64) BoxType)) (= (type bx3@@50) BoxType)) (= (type bx4@@36) BoxType)) (and ($IsGoodHeap heap@@39) (and (and (and (and (and ($IsBox bx0@@92 t0@@130) ($IsBox bx1@@78 t1@@106)) ($IsBox bx2@@64 t2@@83)) ($IsBox bx3@@50 t3@@68)) ($IsBox bx4@@36 t4@@53)) ($Is f@@95 (Tclass._System.___hFunc5 t0@@130 t1@@106 t2@@83 t3@@68 t4@@53 t5@@38))))) (= (|Set#Equal| (Reads5 t0@@130 t1@@106 t2@@83 t3@@68 t4@@53 t5@@38 $OneHeap f@@95 bx0@@92 bx1@@78 bx2@@64 bx3@@50 bx4@@36) (|Set#Empty| BoxType)) (|Set#Equal| (Reads5 t0@@130 t1@@106 t2@@83 t3@@68 t4@@53 t5@@38 heap@@39 f@@95 bx0@@92 bx1@@78 bx2@@64 bx3@@50 bx4@@36) (|Set#Empty| BoxType)))) :qid |unknown.0:0| :skolemid |1155| :pattern ( (Reads5 t0@@130 t1@@106 t2@@83 t3@@68 t4@@53 t5@@38 $OneHeap f@@95 bx0@@92 bx1@@78 bx2@@64 bx3@@50 bx4@@36) ($IsGoodHeap heap@@39)) :pattern ( (Reads5 t0@@130 t1@@106 t2@@83 t3@@68 t4@@53 t5@@38 heap@@39 f@@95 bx0@@92 bx1@@78 bx2@@64 bx3@@50 bx4@@36)) )))
(assert (forall ((t0@@131 T@U) (t1@@107 T@U) (t2@@84 T@U) (t3@@69 T@U) (t4@@54 T@U) (t5@@39 T@U) (heap@@40 T@U) (f@@96 T@U) (bx0@@93 T@U) (bx1@@79 T@U) (bx2@@65 T@U) (bx3@@51 T@U) (bx4@@37 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type t0@@131) TyType) (= (type t1@@107) TyType)) (= (type t2@@84) TyType)) (= (type t3@@69) TyType)) (= (type t4@@54) TyType)) (= (type t5@@39) TyType)) (= (type heap@@40) (MapType0Type refType MapType1Type))) (= (type f@@96) HandleTypeType)) (= (type bx0@@93) BoxType)) (= (type bx1@@79) BoxType)) (= (type bx2@@65) BoxType)) (= (type bx3@@51) BoxType)) (= (type bx4@@37) BoxType)) (and (and ($IsGoodHeap heap@@40) (and (and (and (and (and ($IsBox bx0@@93 t0@@131) ($IsBox bx1@@79 t1@@107)) ($IsBox bx2@@65 t2@@84)) ($IsBox bx3@@51 t3@@69)) ($IsBox bx4@@37 t4@@54)) ($Is f@@96 (Tclass._System.___hFunc5 t0@@131 t1@@107 t2@@84 t3@@69 t4@@54 t5@@39)))) (|Set#Equal| (Reads5 t0@@131 t1@@107 t2@@84 t3@@69 t4@@54 t5@@39 $OneHeap f@@96 bx0@@93 bx1@@79 bx2@@65 bx3@@51 bx4@@37) (|Set#Empty| BoxType)))) (= (Requires5 t0@@131 t1@@107 t2@@84 t3@@69 t4@@54 t5@@39 $OneHeap f@@96 bx0@@93 bx1@@79 bx2@@65 bx3@@51 bx4@@37) (Requires5 t0@@131 t1@@107 t2@@84 t3@@69 t4@@54 t5@@39 heap@@40 f@@96 bx0@@93 bx1@@79 bx2@@65 bx3@@51 bx4@@37))) :qid |unknown.0:0| :skolemid |1156| :pattern ( (Requires5 t0@@131 t1@@107 t2@@84 t3@@69 t4@@54 t5@@39 $OneHeap f@@96 bx0@@93 bx1@@79 bx2@@65 bx3@@51 bx4@@37) ($IsGoodHeap heap@@40)) :pattern ( (Requires5 t0@@131 t1@@107 t2@@84 t3@@69 t4@@54 t5@@39 heap@@40 f@@96 bx0@@93 bx1@@79 bx2@@65 bx3@@51 bx4@@37)) )))
(assert (forall ((f@@97 T@U) (t0@@132 T@U) (t1@@108 T@U) (t2@@85 T@U) (t3@@70 T@U) (t4@@55 T@U) (t5@@40 T@U) ) (!  (=> (and (and (and (and (and (and (= (type f@@97) HandleTypeType) (= (type t0@@132) TyType)) (= (type t1@@108) TyType)) (= (type t2@@85) TyType)) (= (type t3@@70) TyType)) (= (type t4@@55) TyType)) (= (type t5@@40) TyType)) (= ($Is f@@97 (Tclass._System.___hFunc5 t0@@132 t1@@108 t2@@85 t3@@70 t4@@55 t5@@40)) (forall ((h@@66 T@U) (bx0@@94 T@U) (bx1@@80 T@U) (bx2@@66 T@U) (bx3@@52 T@U) (bx4@@38 T@U) ) (!  (=> (and (and (and (and (and (and (= (type h@@66) (MapType0Type refType MapType1Type)) (= (type bx0@@94) BoxType)) (= (type bx1@@80) BoxType)) (= (type bx2@@66) BoxType)) (= (type bx3@@52) BoxType)) (= (type bx4@@38) BoxType)) (and (and ($IsGoodHeap h@@66) (and (and (and (and ($IsBox bx0@@94 t0@@132) ($IsBox bx1@@80 t1@@108)) ($IsBox bx2@@66 t2@@85)) ($IsBox bx3@@52 t3@@70)) ($IsBox bx4@@38 t4@@55))) (Requires5 t0@@132 t1@@108 t2@@85 t3@@70 t4@@55 t5@@40 h@@66 f@@97 bx0@@94 bx1@@80 bx2@@66 bx3@@52 bx4@@38))) ($IsBox (Apply5 t0@@132 t1@@108 t2@@85 t3@@70 t4@@55 t5@@40 h@@66 f@@97 bx0@@94 bx1@@80 bx2@@66 bx3@@52 bx4@@38) t5@@40)) :qid |DafnyPreludebpl.545:12| :skolemid |1157| :pattern ( (Apply5 t0@@132 t1@@108 t2@@85 t3@@70 t4@@55 t5@@40 h@@66 f@@97 bx0@@94 bx1@@80 bx2@@66 bx3@@52 bx4@@38)) )))) :qid |unknown.0:0| :skolemid |1158| :pattern ( ($Is f@@97 (Tclass._System.___hFunc5 t0@@132 t1@@108 t2@@85 t3@@70 t4@@55 t5@@40))) )))
(assert (forall ((f@@98 T@U) (t0@@133 T@U) (t1@@109 T@U) (t2@@86 T@U) (t3@@71 T@U) (t4@@56 T@U) (t5@@41 T@U) (u0@@6 T@U) (u1@@5 T@U) (u2@@4 T@U) (u3@@3 T@U) (u4@@2 T@U) (u5@@1 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type f@@98) HandleTypeType) (= (type t0@@133) TyType)) (= (type t1@@109) TyType)) (= (type t2@@86) TyType)) (= (type t3@@71) TyType)) (= (type t4@@56) TyType)) (= (type t5@@41) TyType)) (= (type u0@@6) TyType)) (= (type u1@@5) TyType)) (= (type u2@@4) TyType)) (= (type u3@@3) TyType)) (= (type u4@@2) TyType)) (= (type u5@@1) TyType)) (and (and (and (and (and (and ($Is f@@98 (Tclass._System.___hFunc5 t0@@133 t1@@109 t2@@86 t3@@71 t4@@56 t5@@41)) (forall ((bx@@96 T@U) ) (!  (=> (and (= (type bx@@96) BoxType) ($IsBox bx@@96 u0@@6)) ($IsBox bx@@96 t0@@133)) :qid |unknown.0:0| :skolemid |1159| :pattern ( ($IsBox bx@@96 u0@@6)) :pattern ( ($IsBox bx@@96 t0@@133)) ))) (forall ((bx@@97 T@U) ) (!  (=> (and (= (type bx@@97) BoxType) ($IsBox bx@@97 u1@@5)) ($IsBox bx@@97 t1@@109)) :qid |unknown.0:0| :skolemid |1160| :pattern ( ($IsBox bx@@97 u1@@5)) :pattern ( ($IsBox bx@@97 t1@@109)) ))) (forall ((bx@@98 T@U) ) (!  (=> (and (= (type bx@@98) BoxType) ($IsBox bx@@98 u2@@4)) ($IsBox bx@@98 t2@@86)) :qid |unknown.0:0| :skolemid |1161| :pattern ( ($IsBox bx@@98 u2@@4)) :pattern ( ($IsBox bx@@98 t2@@86)) ))) (forall ((bx@@99 T@U) ) (!  (=> (and (= (type bx@@99) BoxType) ($IsBox bx@@99 u3@@3)) ($IsBox bx@@99 t3@@71)) :qid |unknown.0:0| :skolemid |1162| :pattern ( ($IsBox bx@@99 u3@@3)) :pattern ( ($IsBox bx@@99 t3@@71)) ))) (forall ((bx@@100 T@U) ) (!  (=> (and (= (type bx@@100) BoxType) ($IsBox bx@@100 u4@@2)) ($IsBox bx@@100 t4@@56)) :qid |unknown.0:0| :skolemid |1163| :pattern ( ($IsBox bx@@100 u4@@2)) :pattern ( ($IsBox bx@@100 t4@@56)) ))) (forall ((bx@@101 T@U) ) (!  (=> (and (= (type bx@@101) BoxType) ($IsBox bx@@101 t5@@41)) ($IsBox bx@@101 u5@@1)) :qid |unknown.0:0| :skolemid |1164| :pattern ( ($IsBox bx@@101 t5@@41)) :pattern ( ($IsBox bx@@101 u5@@1)) )))) ($Is f@@98 (Tclass._System.___hFunc5 u0@@6 u1@@5 u2@@4 u3@@3 u4@@2 u5@@1))) :qid |unknown.0:0| :skolemid |1165| :pattern ( ($Is f@@98 (Tclass._System.___hFunc5 t0@@133 t1@@109 t2@@86 t3@@71 t4@@56 t5@@41)) ($Is f@@98 (Tclass._System.___hFunc5 u0@@6 u1@@5 u2@@4 u3@@3 u4@@2 u5@@1))) )))
(assert (forall ((f@@99 T@U) (t0@@134 T@U) (t1@@110 T@U) (t2@@87 T@U) (t3@@72 T@U) (t4@@57 T@U) (t5@@42 T@U) (h@@67 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type f@@99) HandleTypeType) (= (type t0@@134) TyType)) (= (type t1@@110) TyType)) (= (type t2@@87) TyType)) (= (type t3@@72) TyType)) (= (type t4@@57) TyType)) (= (type t5@@42) TyType)) (= (type h@@67) (MapType0Type refType MapType1Type))) ($IsGoodHeap h@@67)) (= ($IsAlloc f@@99 (Tclass._System.___hFunc5 t0@@134 t1@@110 t2@@87 t3@@72 t4@@57 t5@@42) h@@67) (forall ((bx0@@95 T@U) (bx1@@81 T@U) (bx2@@67 T@U) (bx3@@53 T@U) (bx4@@39 T@U) ) (!  (=> (and (and (and (and (= (type bx0@@95) BoxType) (= (type bx1@@81) BoxType)) (= (type bx2@@67) BoxType)) (= (type bx3@@53) BoxType)) (= (type bx4@@39) BoxType)) (=> (and (and (and (and (and (and ($IsBox bx0@@95 t0@@134) ($IsAllocBox bx0@@95 t0@@134 h@@67)) (and ($IsBox bx1@@81 t1@@110) ($IsAllocBox bx1@@81 t1@@110 h@@67))) (and ($IsBox bx2@@67 t2@@87) ($IsAllocBox bx2@@67 t2@@87 h@@67))) (and ($IsBox bx3@@53 t3@@72) ($IsAllocBox bx3@@53 t3@@72 h@@67))) (and ($IsBox bx4@@39 t4@@57) ($IsAllocBox bx4@@39 t4@@57 h@@67))) (Requires5 t0@@134 t1@@110 t2@@87 t3@@72 t4@@57 t5@@42 h@@67 f@@99 bx0@@95 bx1@@81 bx2@@67 bx3@@53 bx4@@39)) (forall ((r@@37 T@U) ) (!  (=> (= (type r@@37) refType) (=> (and (not (= r@@37 null)) (U_2_bool (MapType0Select (Reads5 t0@@134 t1@@110 t2@@87 t3@@72 t4@@57 t5@@42 h@@67 f@@99 bx0@@95 bx1@@81 bx2@@67 bx3@@53 bx4@@39) ($Box r@@37)))) (U_2_bool (MapType1Select (MapType0Select h@@67 r@@37) alloc)))) :qid |unknown.0:0| :skolemid |1166| :pattern ( (MapType0Select (Reads5 t0@@134 t1@@110 t2@@87 t3@@72 t4@@57 t5@@42 h@@67 f@@99 bx0@@95 bx1@@81 bx2@@67 bx3@@53 bx4@@39) ($Box r@@37))) )))) :qid |unknown.0:0| :skolemid |1167| :pattern ( (Apply5 t0@@134 t1@@110 t2@@87 t3@@72 t4@@57 t5@@42 h@@67 f@@99 bx0@@95 bx1@@81 bx2@@67 bx3@@53 bx4@@39)) :pattern ( (Reads5 t0@@134 t1@@110 t2@@87 t3@@72 t4@@57 t5@@42 h@@67 f@@99 bx0@@95 bx1@@81 bx2@@67 bx3@@53 bx4@@39)) )))) :qid |unknown.0:0| :skolemid |1168| :pattern ( ($IsAlloc f@@99 (Tclass._System.___hFunc5 t0@@134 t1@@110 t2@@87 t3@@72 t4@@57 t5@@42) h@@67)) )))
(assert (forall ((f@@100 T@U) (t0@@135 T@U) (t1@@111 T@U) (t2@@88 T@U) (t3@@73 T@U) (t4@@58 T@U) (t5@@43 T@U) (h@@68 T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type f@@100) HandleTypeType) (= (type t0@@135) TyType)) (= (type t1@@111) TyType)) (= (type t2@@88) TyType)) (= (type t3@@73) TyType)) (= (type t4@@58) TyType)) (= (type t5@@43) TyType)) (= (type h@@68) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap h@@68) ($IsAlloc f@@100 (Tclass._System.___hFunc5 t0@@135 t1@@111 t2@@88 t3@@73 t4@@58 t5@@43) h@@68))) (forall ((bx0@@96 T@U) (bx1@@82 T@U) (bx2@@68 T@U) (bx3@@54 T@U) (bx4@@40 T@U) ) (!  (=> (and (and (and (and (= (type bx0@@96) BoxType) (= (type bx1@@82) BoxType)) (= (type bx2@@68) BoxType)) (= (type bx3@@54) BoxType)) (= (type bx4@@40) BoxType)) (=> (and (and (and (and (and ($IsAllocBox bx0@@96 t0@@135 h@@68) ($IsAllocBox bx1@@82 t1@@111 h@@68)) ($IsAllocBox bx2@@68 t2@@88 h@@68)) ($IsAllocBox bx3@@54 t3@@73 h@@68)) ($IsAllocBox bx4@@40 t4@@58 h@@68)) (Requires5 t0@@135 t1@@111 t2@@88 t3@@73 t4@@58 t5@@43 h@@68 f@@100 bx0@@96 bx1@@82 bx2@@68 bx3@@54 bx4@@40)) ($IsAllocBox (Apply5 t0@@135 t1@@111 t2@@88 t3@@73 t4@@58 t5@@43 h@@68 f@@100 bx0@@96 bx1@@82 bx2@@68 bx3@@54 bx4@@40) t5@@43 h@@68))) :qid |unknown.0:0| :skolemid |1169| :pattern ( (Apply5 t0@@135 t1@@111 t2@@88 t3@@73 t4@@58 t5@@43 h@@68 f@@100 bx0@@96 bx1@@82 bx2@@68 bx3@@54 bx4@@40)) ))) :qid |unknown.0:0| :skolemid |1170| :pattern ( ($IsAlloc f@@100 (Tclass._System.___hFunc5 t0@@135 t1@@111 t2@@88 t3@@73 t4@@58 t5@@43) h@@68)) )))
(assert (forall ((arg0@@338 T@U) (arg1@@161 T@U) (arg2@@113 T@U) (arg3@@88 T@U) (arg4@@77 T@U) (arg5@@64 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5 arg0@@338 arg1@@161 arg2@@113 arg3@@88 arg4@@77 arg5@@64)) TyType) :qid |funType:Tclass._System.___hPartialFunc5| :pattern ( (Tclass._System.___hPartialFunc5 arg0@@338 arg1@@161 arg2@@113 arg3@@88 arg4@@77 arg5@@64)) )))
(assert (forall ((|#$T0@@163| T@U) (|#$T1@@147| T@U) (|#$T2@@128| T@U) (|#$T3@@106| T@U) (|#$T4@@81| T@U) (|#$R@@176| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@163|) TyType) (= (type |#$T1@@147|) TyType)) (= (type |#$T2@@128|) TyType)) (= (type |#$T3@@106|) TyType)) (= (type |#$T4@@81|) TyType)) (= (type |#$R@@176|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc5 |#$T0@@163| |#$T1@@147| |#$T2@@128| |#$T3@@106| |#$T4@@81| |#$R@@176|)) Tagclass._System.___hPartialFunc5) (= (TagFamily (Tclass._System.___hPartialFunc5 |#$T0@@163| |#$T1@@147| |#$T2@@128| |#$T3@@106| |#$T4@@81| |#$R@@176|)) |tytagFamily$_#PartialFunc5|))) :qid |unknown.0:0| :skolemid |1171| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@163| |#$T1@@147| |#$T2@@128| |#$T3@@106| |#$T4@@81| |#$R@@176|)) )))
(assert (forall ((arg0@@339 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_0 arg0@@339)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_0| :pattern ( (Tclass._System.___hPartialFunc5_0 arg0@@339)) )))
(assert (forall ((|#$T0@@164| T@U) (|#$T1@@148| T@U) (|#$T2@@129| T@U) (|#$T3@@107| T@U) (|#$T4@@82| T@U) (|#$R@@177| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@164|) TyType) (= (type |#$T1@@148|) TyType)) (= (type |#$T2@@129|) TyType)) (= (type |#$T3@@107|) TyType)) (= (type |#$T4@@82|) TyType)) (= (type |#$R@@177|) TyType)) (= (Tclass._System.___hPartialFunc5_0 (Tclass._System.___hPartialFunc5 |#$T0@@164| |#$T1@@148| |#$T2@@129| |#$T3@@107| |#$T4@@82| |#$R@@177|)) |#$T0@@164|)) :qid |unknown.0:0| :skolemid |1172| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@164| |#$T1@@148| |#$T2@@129| |#$T3@@107| |#$T4@@82| |#$R@@177|)) )))
(assert (forall ((arg0@@340 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_1 arg0@@340)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_1| :pattern ( (Tclass._System.___hPartialFunc5_1 arg0@@340)) )))
(assert (forall ((|#$T0@@165| T@U) (|#$T1@@149| T@U) (|#$T2@@130| T@U) (|#$T3@@108| T@U) (|#$T4@@83| T@U) (|#$R@@178| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@165|) TyType) (= (type |#$T1@@149|) TyType)) (= (type |#$T2@@130|) TyType)) (= (type |#$T3@@108|) TyType)) (= (type |#$T4@@83|) TyType)) (= (type |#$R@@178|) TyType)) (= (Tclass._System.___hPartialFunc5_1 (Tclass._System.___hPartialFunc5 |#$T0@@165| |#$T1@@149| |#$T2@@130| |#$T3@@108| |#$T4@@83| |#$R@@178|)) |#$T1@@149|)) :qid |unknown.0:0| :skolemid |1173| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@165| |#$T1@@149| |#$T2@@130| |#$T3@@108| |#$T4@@83| |#$R@@178|)) )))
(assert (forall ((arg0@@341 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_2 arg0@@341)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_2| :pattern ( (Tclass._System.___hPartialFunc5_2 arg0@@341)) )))
(assert (forall ((|#$T0@@166| T@U) (|#$T1@@150| T@U) (|#$T2@@131| T@U) (|#$T3@@109| T@U) (|#$T4@@84| T@U) (|#$R@@179| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@166|) TyType) (= (type |#$T1@@150|) TyType)) (= (type |#$T2@@131|) TyType)) (= (type |#$T3@@109|) TyType)) (= (type |#$T4@@84|) TyType)) (= (type |#$R@@179|) TyType)) (= (Tclass._System.___hPartialFunc5_2 (Tclass._System.___hPartialFunc5 |#$T0@@166| |#$T1@@150| |#$T2@@131| |#$T3@@109| |#$T4@@84| |#$R@@179|)) |#$T2@@131|)) :qid |unknown.0:0| :skolemid |1174| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@166| |#$T1@@150| |#$T2@@131| |#$T3@@109| |#$T4@@84| |#$R@@179|)) )))
(assert (forall ((arg0@@342 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_3 arg0@@342)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_3| :pattern ( (Tclass._System.___hPartialFunc5_3 arg0@@342)) )))
(assert (forall ((|#$T0@@167| T@U) (|#$T1@@151| T@U) (|#$T2@@132| T@U) (|#$T3@@110| T@U) (|#$T4@@85| T@U) (|#$R@@180| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@167|) TyType) (= (type |#$T1@@151|) TyType)) (= (type |#$T2@@132|) TyType)) (= (type |#$T3@@110|) TyType)) (= (type |#$T4@@85|) TyType)) (= (type |#$R@@180|) TyType)) (= (Tclass._System.___hPartialFunc5_3 (Tclass._System.___hPartialFunc5 |#$T0@@167| |#$T1@@151| |#$T2@@132| |#$T3@@110| |#$T4@@85| |#$R@@180|)) |#$T3@@110|)) :qid |unknown.0:0| :skolemid |1175| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@167| |#$T1@@151| |#$T2@@132| |#$T3@@110| |#$T4@@85| |#$R@@180|)) )))
(assert (forall ((arg0@@343 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_4 arg0@@343)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_4| :pattern ( (Tclass._System.___hPartialFunc5_4 arg0@@343)) )))
(assert (forall ((|#$T0@@168| T@U) (|#$T1@@152| T@U) (|#$T2@@133| T@U) (|#$T3@@111| T@U) (|#$T4@@86| T@U) (|#$R@@181| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@168|) TyType) (= (type |#$T1@@152|) TyType)) (= (type |#$T2@@133|) TyType)) (= (type |#$T3@@111|) TyType)) (= (type |#$T4@@86|) TyType)) (= (type |#$R@@181|) TyType)) (= (Tclass._System.___hPartialFunc5_4 (Tclass._System.___hPartialFunc5 |#$T0@@168| |#$T1@@152| |#$T2@@133| |#$T3@@111| |#$T4@@86| |#$R@@181|)) |#$T4@@86|)) :qid |unknown.0:0| :skolemid |1176| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@168| |#$T1@@152| |#$T2@@133| |#$T3@@111| |#$T4@@86| |#$R@@181|)) )))
(assert (forall ((arg0@@344 T@U) ) (! (= (type (Tclass._System.___hPartialFunc5_5 arg0@@344)) TyType) :qid |funType:Tclass._System.___hPartialFunc5_5| :pattern ( (Tclass._System.___hPartialFunc5_5 arg0@@344)) )))
(assert (forall ((|#$T0@@169| T@U) (|#$T1@@153| T@U) (|#$T2@@134| T@U) (|#$T3@@112| T@U) (|#$T4@@87| T@U) (|#$R@@182| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@169|) TyType) (= (type |#$T1@@153|) TyType)) (= (type |#$T2@@134|) TyType)) (= (type |#$T3@@112|) TyType)) (= (type |#$T4@@87|) TyType)) (= (type |#$R@@182|) TyType)) (= (Tclass._System.___hPartialFunc5_5 (Tclass._System.___hPartialFunc5 |#$T0@@169| |#$T1@@153| |#$T2@@134| |#$T3@@112| |#$T4@@87| |#$R@@182|)) |#$R@@182|)) :qid |unknown.0:0| :skolemid |1177| :pattern ( (Tclass._System.___hPartialFunc5 |#$T0@@169| |#$T1@@153| |#$T2@@134| |#$T3@@112| |#$T4@@87| |#$R@@182|)) )))
(assert (forall ((|#$T0@@170| T@U) (|#$T1@@154| T@U) (|#$T2@@135| T@U) (|#$T3@@113| T@U) (|#$T4@@88| T@U) (|#$R@@183| T@U) (bx@@102 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@170|) TyType) (= (type |#$T1@@154|) TyType)) (= (type |#$T2@@135|) TyType)) (= (type |#$T3@@113|) TyType)) (= (type |#$T4@@88|) TyType)) (= (type |#$R@@183|) TyType)) (= (type bx@@102) BoxType)) ($IsBox bx@@102 (Tclass._System.___hPartialFunc5 |#$T0@@170| |#$T1@@154| |#$T2@@135| |#$T3@@113| |#$T4@@88| |#$R@@183|))) (and (= ($Box ($Unbox HandleTypeType bx@@102)) bx@@102) ($Is ($Unbox HandleTypeType bx@@102) (Tclass._System.___hPartialFunc5 |#$T0@@170| |#$T1@@154| |#$T2@@135| |#$T3@@113| |#$T4@@88| |#$R@@183|)))) :qid |unknown.0:0| :skolemid |1178| :pattern ( ($IsBox bx@@102 (Tclass._System.___hPartialFunc5 |#$T0@@170| |#$T1@@154| |#$T2@@135| |#$T3@@113| |#$T4@@88| |#$R@@183|))) )))
(assert (forall ((|#$T0@@171| T@U) (|#$T1@@155| T@U) (|#$T2@@136| T@U) (|#$T3@@114| T@U) (|#$T4@@89| T@U) (|#$R@@184| T@U) (|f#0@@27| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@171|) TyType) (= (type |#$T1@@155|) TyType)) (= (type |#$T2@@136|) TyType)) (= (type |#$T3@@114|) TyType)) (= (type |#$T4@@89|) TyType)) (= (type |#$R@@184|) TyType)) (= (type |f#0@@27|) HandleTypeType)) (= ($Is |f#0@@27| (Tclass._System.___hPartialFunc5 |#$T0@@171| |#$T1@@155| |#$T2@@136| |#$T3@@114| |#$T4@@89| |#$R@@184|))  (and ($Is |f#0@@27| (Tclass._System.___hFunc5 |#$T0@@171| |#$T1@@155| |#$T2@@136| |#$T3@@114| |#$T4@@89| |#$R@@184|)) (forall ((|x0#0@@11| T@U) (|x1#0@@9| T@U) (|x2#0@@7| T@U) (|x3#0@@5| T@U) (|x4#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type |x0#0@@11|) BoxType) (= (type |x1#0@@9|) BoxType)) (= (type |x2#0@@7|) BoxType)) (= (type |x3#0@@5|) BoxType)) (= (type |x4#0@@3|) BoxType)) (and (and (and (and ($IsBox |x0#0@@11| |#$T0@@171|) ($IsBox |x1#0@@9| |#$T1@@155|)) ($IsBox |x2#0@@7| |#$T2@@136|)) ($IsBox |x3#0@@5| |#$T3@@114|)) ($IsBox |x4#0@@3| |#$T4@@89|))) (|Set#Equal| (Reads5 |#$T0@@171| |#$T1@@155| |#$T2@@136| |#$T3@@114| |#$T4@@89| |#$R@@184| $OneHeap |f#0@@27| |x0#0@@11| |x1#0@@9| |x2#0@@7| |x3#0@@5| |x4#0@@3|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1179| :no-pattern (type |x0#0@@11|) :no-pattern (type |x1#0@@9|) :no-pattern (type |x2#0@@7|) :no-pattern (type |x3#0@@5|) :no-pattern (type |x4#0@@3|) :no-pattern (U_2_int |x0#0@@11|) :no-pattern (U_2_bool |x0#0@@11|) :no-pattern (U_2_int |x1#0@@9|) :no-pattern (U_2_bool |x1#0@@9|) :no-pattern (U_2_int |x2#0@@7|) :no-pattern (U_2_bool |x2#0@@7|) :no-pattern (U_2_int |x3#0@@5|) :no-pattern (U_2_bool |x3#0@@5|) :no-pattern (U_2_int |x4#0@@3|) :no-pattern (U_2_bool |x4#0@@3|) ))))) :qid |unknown.0:0| :skolemid |1180| :pattern ( ($Is |f#0@@27| (Tclass._System.___hPartialFunc5 |#$T0@@171| |#$T1@@155| |#$T2@@136| |#$T3@@114| |#$T4@@89| |#$R@@184|))) )))
(assert (forall ((|#$T0@@172| T@U) (|#$T1@@156| T@U) (|#$T2@@137| T@U) (|#$T3@@115| T@U) (|#$T4@@90| T@U) (|#$R@@185| T@U) (|f#0@@28| T@U) ($h@@25 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@172|) TyType) (= (type |#$T1@@156|) TyType)) (= (type |#$T2@@137|) TyType)) (= (type |#$T3@@115|) TyType)) (= (type |#$T4@@90|) TyType)) (= (type |#$R@@185|) TyType)) (= (type |f#0@@28|) HandleTypeType)) (= (type $h@@25) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@28| (Tclass._System.___hPartialFunc5 |#$T0@@172| |#$T1@@156| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$R@@185|) $h@@25) ($IsAlloc |f#0@@28| (Tclass._System.___hFunc5 |#$T0@@172| |#$T1@@156| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$R@@185|) $h@@25))) :qid |unknown.0:0| :skolemid |1181| :pattern ( ($IsAlloc |f#0@@28| (Tclass._System.___hPartialFunc5 |#$T0@@172| |#$T1@@156| |#$T2@@137| |#$T3@@115| |#$T4@@90| |#$R@@185|) $h@@25)) )))
(assert (forall ((arg0@@345 T@U) (arg1@@162 T@U) (arg2@@114 T@U) (arg3@@89 T@U) (arg4@@78 T@U) (arg5@@65 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5 arg0@@345 arg1@@162 arg2@@114 arg3@@89 arg4@@78 arg5@@65)) TyType) :qid |funType:Tclass._System.___hTotalFunc5| :pattern ( (Tclass._System.___hTotalFunc5 arg0@@345 arg1@@162 arg2@@114 arg3@@89 arg4@@78 arg5@@65)) )))
(assert (forall ((|#$T0@@173| T@U) (|#$T1@@157| T@U) (|#$T2@@138| T@U) (|#$T3@@116| T@U) (|#$T4@@91| T@U) (|#$R@@186| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@173|) TyType) (= (type |#$T1@@157|) TyType)) (= (type |#$T2@@138|) TyType)) (= (type |#$T3@@116|) TyType)) (= (type |#$T4@@91|) TyType)) (= (type |#$R@@186|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc5 |#$T0@@173| |#$T1@@157| |#$T2@@138| |#$T3@@116| |#$T4@@91| |#$R@@186|)) Tagclass._System.___hTotalFunc5) (= (TagFamily (Tclass._System.___hTotalFunc5 |#$T0@@173| |#$T1@@157| |#$T2@@138| |#$T3@@116| |#$T4@@91| |#$R@@186|)) |tytagFamily$_#TotalFunc5|))) :qid |unknown.0:0| :skolemid |1182| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@173| |#$T1@@157| |#$T2@@138| |#$T3@@116| |#$T4@@91| |#$R@@186|)) )))
(assert (forall ((arg0@@346 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_0 arg0@@346)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_0| :pattern ( (Tclass._System.___hTotalFunc5_0 arg0@@346)) )))
(assert (forall ((|#$T0@@174| T@U) (|#$T1@@158| T@U) (|#$T2@@139| T@U) (|#$T3@@117| T@U) (|#$T4@@92| T@U) (|#$R@@187| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@174|) TyType) (= (type |#$T1@@158|) TyType)) (= (type |#$T2@@139|) TyType)) (= (type |#$T3@@117|) TyType)) (= (type |#$T4@@92|) TyType)) (= (type |#$R@@187|) TyType)) (= (Tclass._System.___hTotalFunc5_0 (Tclass._System.___hTotalFunc5 |#$T0@@174| |#$T1@@158| |#$T2@@139| |#$T3@@117| |#$T4@@92| |#$R@@187|)) |#$T0@@174|)) :qid |unknown.0:0| :skolemid |1183| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@174| |#$T1@@158| |#$T2@@139| |#$T3@@117| |#$T4@@92| |#$R@@187|)) )))
(assert (forall ((arg0@@347 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_1 arg0@@347)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_1| :pattern ( (Tclass._System.___hTotalFunc5_1 arg0@@347)) )))
(assert (forall ((|#$T0@@175| T@U) (|#$T1@@159| T@U) (|#$T2@@140| T@U) (|#$T3@@118| T@U) (|#$T4@@93| T@U) (|#$R@@188| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@175|) TyType) (= (type |#$T1@@159|) TyType)) (= (type |#$T2@@140|) TyType)) (= (type |#$T3@@118|) TyType)) (= (type |#$T4@@93|) TyType)) (= (type |#$R@@188|) TyType)) (= (Tclass._System.___hTotalFunc5_1 (Tclass._System.___hTotalFunc5 |#$T0@@175| |#$T1@@159| |#$T2@@140| |#$T3@@118| |#$T4@@93| |#$R@@188|)) |#$T1@@159|)) :qid |unknown.0:0| :skolemid |1184| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@175| |#$T1@@159| |#$T2@@140| |#$T3@@118| |#$T4@@93| |#$R@@188|)) )))
(assert (forall ((arg0@@348 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_2 arg0@@348)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_2| :pattern ( (Tclass._System.___hTotalFunc5_2 arg0@@348)) )))
(assert (forall ((|#$T0@@176| T@U) (|#$T1@@160| T@U) (|#$T2@@141| T@U) (|#$T3@@119| T@U) (|#$T4@@94| T@U) (|#$R@@189| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@176|) TyType) (= (type |#$T1@@160|) TyType)) (= (type |#$T2@@141|) TyType)) (= (type |#$T3@@119|) TyType)) (= (type |#$T4@@94|) TyType)) (= (type |#$R@@189|) TyType)) (= (Tclass._System.___hTotalFunc5_2 (Tclass._System.___hTotalFunc5 |#$T0@@176| |#$T1@@160| |#$T2@@141| |#$T3@@119| |#$T4@@94| |#$R@@189|)) |#$T2@@141|)) :qid |unknown.0:0| :skolemid |1185| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@176| |#$T1@@160| |#$T2@@141| |#$T3@@119| |#$T4@@94| |#$R@@189|)) )))
(assert (forall ((arg0@@349 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_3 arg0@@349)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_3| :pattern ( (Tclass._System.___hTotalFunc5_3 arg0@@349)) )))
(assert (forall ((|#$T0@@177| T@U) (|#$T1@@161| T@U) (|#$T2@@142| T@U) (|#$T3@@120| T@U) (|#$T4@@95| T@U) (|#$R@@190| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@177|) TyType) (= (type |#$T1@@161|) TyType)) (= (type |#$T2@@142|) TyType)) (= (type |#$T3@@120|) TyType)) (= (type |#$T4@@95|) TyType)) (= (type |#$R@@190|) TyType)) (= (Tclass._System.___hTotalFunc5_3 (Tclass._System.___hTotalFunc5 |#$T0@@177| |#$T1@@161| |#$T2@@142| |#$T3@@120| |#$T4@@95| |#$R@@190|)) |#$T3@@120|)) :qid |unknown.0:0| :skolemid |1186| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@177| |#$T1@@161| |#$T2@@142| |#$T3@@120| |#$T4@@95| |#$R@@190|)) )))
(assert (forall ((arg0@@350 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_4 arg0@@350)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_4| :pattern ( (Tclass._System.___hTotalFunc5_4 arg0@@350)) )))
(assert (forall ((|#$T0@@178| T@U) (|#$T1@@162| T@U) (|#$T2@@143| T@U) (|#$T3@@121| T@U) (|#$T4@@96| T@U) (|#$R@@191| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@178|) TyType) (= (type |#$T1@@162|) TyType)) (= (type |#$T2@@143|) TyType)) (= (type |#$T3@@121|) TyType)) (= (type |#$T4@@96|) TyType)) (= (type |#$R@@191|) TyType)) (= (Tclass._System.___hTotalFunc5_4 (Tclass._System.___hTotalFunc5 |#$T0@@178| |#$T1@@162| |#$T2@@143| |#$T3@@121| |#$T4@@96| |#$R@@191|)) |#$T4@@96|)) :qid |unknown.0:0| :skolemid |1187| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@178| |#$T1@@162| |#$T2@@143| |#$T3@@121| |#$T4@@96| |#$R@@191|)) )))
(assert (forall ((arg0@@351 T@U) ) (! (= (type (Tclass._System.___hTotalFunc5_5 arg0@@351)) TyType) :qid |funType:Tclass._System.___hTotalFunc5_5| :pattern ( (Tclass._System.___hTotalFunc5_5 arg0@@351)) )))
(assert (forall ((|#$T0@@179| T@U) (|#$T1@@163| T@U) (|#$T2@@144| T@U) (|#$T3@@122| T@U) (|#$T4@@97| T@U) (|#$R@@192| T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@179|) TyType) (= (type |#$T1@@163|) TyType)) (= (type |#$T2@@144|) TyType)) (= (type |#$T3@@122|) TyType)) (= (type |#$T4@@97|) TyType)) (= (type |#$R@@192|) TyType)) (= (Tclass._System.___hTotalFunc5_5 (Tclass._System.___hTotalFunc5 |#$T0@@179| |#$T1@@163| |#$T2@@144| |#$T3@@122| |#$T4@@97| |#$R@@192|)) |#$R@@192|)) :qid |unknown.0:0| :skolemid |1188| :pattern ( (Tclass._System.___hTotalFunc5 |#$T0@@179| |#$T1@@163| |#$T2@@144| |#$T3@@122| |#$T4@@97| |#$R@@192|)) )))
(assert (forall ((|#$T0@@180| T@U) (|#$T1@@164| T@U) (|#$T2@@145| T@U) (|#$T3@@123| T@U) (|#$T4@@98| T@U) (|#$R@@193| T@U) (bx@@103 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@180|) TyType) (= (type |#$T1@@164|) TyType)) (= (type |#$T2@@145|) TyType)) (= (type |#$T3@@123|) TyType)) (= (type |#$T4@@98|) TyType)) (= (type |#$R@@193|) TyType)) (= (type bx@@103) BoxType)) ($IsBox bx@@103 (Tclass._System.___hTotalFunc5 |#$T0@@180| |#$T1@@164| |#$T2@@145| |#$T3@@123| |#$T4@@98| |#$R@@193|))) (and (= ($Box ($Unbox HandleTypeType bx@@103)) bx@@103) ($Is ($Unbox HandleTypeType bx@@103) (Tclass._System.___hTotalFunc5 |#$T0@@180| |#$T1@@164| |#$T2@@145| |#$T3@@123| |#$T4@@98| |#$R@@193|)))) :qid |unknown.0:0| :skolemid |1189| :pattern ( ($IsBox bx@@103 (Tclass._System.___hTotalFunc5 |#$T0@@180| |#$T1@@164| |#$T2@@145| |#$T3@@123| |#$T4@@98| |#$R@@193|))) )))
(assert (forall ((|#$T0@@181| T@U) (|#$T1@@165| T@U) (|#$T2@@146| T@U) (|#$T3@@124| T@U) (|#$T4@@99| T@U) (|#$R@@194| T@U) (|f#0@@29| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |#$T0@@181|) TyType) (= (type |#$T1@@165|) TyType)) (= (type |#$T2@@146|) TyType)) (= (type |#$T3@@124|) TyType)) (= (type |#$T4@@99|) TyType)) (= (type |#$R@@194|) TyType)) (= (type |f#0@@29|) HandleTypeType)) (= ($Is |f#0@@29| (Tclass._System.___hTotalFunc5 |#$T0@@181| |#$T1@@165| |#$T2@@146| |#$T3@@124| |#$T4@@99| |#$R@@194|))  (and ($Is |f#0@@29| (Tclass._System.___hPartialFunc5 |#$T0@@181| |#$T1@@165| |#$T2@@146| |#$T3@@124| |#$T4@@99| |#$R@@194|)) (forall ((|x0#0@@12| T@U) (|x1#0@@10| T@U) (|x2#0@@8| T@U) (|x3#0@@6| T@U) (|x4#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type |x0#0@@12|) BoxType) (= (type |x1#0@@10|) BoxType)) (= (type |x2#0@@8|) BoxType)) (= (type |x3#0@@6|) BoxType)) (= (type |x4#0@@4|) BoxType)) (and (and (and (and ($IsBox |x0#0@@12| |#$T0@@181|) ($IsBox |x1#0@@10| |#$T1@@165|)) ($IsBox |x2#0@@8| |#$T2@@146|)) ($IsBox |x3#0@@6| |#$T3@@124|)) ($IsBox |x4#0@@4| |#$T4@@99|))) (Requires5 |#$T0@@181| |#$T1@@165| |#$T2@@146| |#$T3@@124| |#$T4@@99| |#$R@@194| $OneHeap |f#0@@29| |x0#0@@12| |x1#0@@10| |x2#0@@8| |x3#0@@6| |x4#0@@4|)) :qid |unknown.0:0| :skolemid |1190| :no-pattern (type |x0#0@@12|) :no-pattern (type |x1#0@@10|) :no-pattern (type |x2#0@@8|) :no-pattern (type |x3#0@@6|) :no-pattern (type |x4#0@@4|) :no-pattern (U_2_int |x0#0@@12|) :no-pattern (U_2_bool |x0#0@@12|) :no-pattern (U_2_int |x1#0@@10|) :no-pattern (U_2_bool |x1#0@@10|) :no-pattern (U_2_int |x2#0@@8|) :no-pattern (U_2_bool |x2#0@@8|) :no-pattern (U_2_int |x3#0@@6|) :no-pattern (U_2_bool |x3#0@@6|) :no-pattern (U_2_int |x4#0@@4|) :no-pattern (U_2_bool |x4#0@@4|) ))))) :qid |unknown.0:0| :skolemid |1191| :pattern ( ($Is |f#0@@29| (Tclass._System.___hTotalFunc5 |#$T0@@181| |#$T1@@165| |#$T2@@146| |#$T3@@124| |#$T4@@99| |#$R@@194|))) )))
(assert (forall ((|#$T0@@182| T@U) (|#$T1@@166| T@U) (|#$T2@@147| T@U) (|#$T3@@125| T@U) (|#$T4@@100| T@U) (|#$R@@195| T@U) (|f#0@@30| T@U) ($h@@26 T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |#$T0@@182|) TyType) (= (type |#$T1@@166|) TyType)) (= (type |#$T2@@147|) TyType)) (= (type |#$T3@@125|) TyType)) (= (type |#$T4@@100|) TyType)) (= (type |#$R@@195|) TyType)) (= (type |f#0@@30|) HandleTypeType)) (= (type $h@@26) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@30| (Tclass._System.___hTotalFunc5 |#$T0@@182| |#$T1@@166| |#$T2@@147| |#$T3@@125| |#$T4@@100| |#$R@@195|) $h@@26) ($IsAlloc |f#0@@30| (Tclass._System.___hPartialFunc5 |#$T0@@182| |#$T1@@166| |#$T2@@147| |#$T3@@125| |#$T4@@100| |#$R@@195|) $h@@26))) :qid |unknown.0:0| :skolemid |1192| :pattern ( ($IsAlloc |f#0@@30| (Tclass._System.___hTotalFunc5 |#$T0@@182| |#$T1@@166| |#$T2@@147| |#$T3@@125| |#$T4@@100| |#$R@@195|) $h@@26)) )))
(assert (forall ((arg0@@352 T@U) (arg1@@163 T@U) (arg2@@115 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO arg0@@352 arg1@@163 arg2@@115)) TyType) :qid |funType:Tclass._System.___hFunc2OSO| :pattern ( (Tclass._System.___hFunc2OSO arg0@@352 arg1@@163 arg2@@115)) )))
(assert (forall ((|#$T0@@183| T@U) (|#$T1@@167| T@U) (|#$R@@196| T@U) ) (!  (=> (and (and (= (type |#$T0@@183|) TyType) (= (type |#$T1@@167|) TyType)) (= (type |#$R@@196|) TyType)) (and (= (Tag (Tclass._System.___hFunc2OSO |#$T0@@183| |#$T1@@167| |#$R@@196|)) Tagclass._System.___hFunc2OSO) (= (TagFamily (Tclass._System.___hFunc2OSO |#$T0@@183| |#$T1@@167| |#$R@@196|)) |tytagFamily$_#Func2OSO|))) :qid |unknown.0:0| :skolemid |1193| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@183| |#$T1@@167| |#$R@@196|)) )))
(assert (forall ((arg0@@353 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO_0 arg0@@353)) TyType) :qid |funType:Tclass._System.___hFunc2OSO_0| :pattern ( (Tclass._System.___hFunc2OSO_0 arg0@@353)) )))
(assert (forall ((|#$T0@@184| T@U) (|#$T1@@168| T@U) (|#$R@@197| T@U) ) (!  (=> (and (and (= (type |#$T0@@184|) TyType) (= (type |#$T1@@168|) TyType)) (= (type |#$R@@197|) TyType)) (= (Tclass._System.___hFunc2OSO_0 (Tclass._System.___hFunc2OSO |#$T0@@184| |#$T1@@168| |#$R@@197|)) |#$T0@@184|)) :qid |unknown.0:0| :skolemid |1194| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@184| |#$T1@@168| |#$R@@197|)) )))
(assert (forall ((arg0@@354 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO_1 arg0@@354)) TyType) :qid |funType:Tclass._System.___hFunc2OSO_1| :pattern ( (Tclass._System.___hFunc2OSO_1 arg0@@354)) )))
(assert (forall ((|#$T0@@185| T@U) (|#$T1@@169| T@U) (|#$R@@198| T@U) ) (!  (=> (and (and (= (type |#$T0@@185|) TyType) (= (type |#$T1@@169|) TyType)) (= (type |#$R@@198|) TyType)) (= (Tclass._System.___hFunc2OSO_1 (Tclass._System.___hFunc2OSO |#$T0@@185| |#$T1@@169| |#$R@@198|)) |#$T1@@169|)) :qid |unknown.0:0| :skolemid |1195| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@185| |#$T1@@169| |#$R@@198|)) )))
(assert (forall ((arg0@@355 T@U) ) (! (= (type (Tclass._System.___hFunc2OSO_2 arg0@@355)) TyType) :qid |funType:Tclass._System.___hFunc2OSO_2| :pattern ( (Tclass._System.___hFunc2OSO_2 arg0@@355)) )))
(assert (forall ((|#$T0@@186| T@U) (|#$T1@@170| T@U) (|#$R@@199| T@U) ) (!  (=> (and (and (= (type |#$T0@@186|) TyType) (= (type |#$T1@@170|) TyType)) (= (type |#$R@@199|) TyType)) (= (Tclass._System.___hFunc2OSO_2 (Tclass._System.___hFunc2OSO |#$T0@@186| |#$T1@@170| |#$R@@199|)) |#$R@@199|)) :qid |unknown.0:0| :skolemid |1196| :pattern ( (Tclass._System.___hFunc2OSO |#$T0@@186| |#$T1@@170| |#$R@@199|)) )))
(assert (forall ((|#$T0@@187| T@U) (|#$T1@@171| T@U) (|#$R@@200| T@U) (bx@@104 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@187|) TyType) (= (type |#$T1@@171|) TyType)) (= (type |#$R@@200|) TyType)) (= (type bx@@104) BoxType)) ($IsBox bx@@104 (Tclass._System.___hFunc2OSO |#$T0@@187| |#$T1@@171| |#$R@@200|))) (and (= ($Box ($Unbox HandleTypeType bx@@104)) bx@@104) ($Is ($Unbox HandleTypeType bx@@104) (Tclass._System.___hFunc2OSO |#$T0@@187| |#$T1@@171| |#$R@@200|)))) :qid |unknown.0:0| :skolemid |1197| :pattern ( ($IsBox bx@@104 (Tclass._System.___hFunc2OSO |#$T0@@187| |#$T1@@171| |#$R@@200|))) )))
(assert (forall ((arg0@@356 T@U) (arg1@@164 T@U) (arg2@@116 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO arg0@@356 arg1@@164 arg2@@116)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO| :pattern ( (Tclass._System.___hPartialFunc2OSO arg0@@356 arg1@@164 arg2@@116)) )))
(assert (forall ((|#$T0@@188| T@U) (|#$T1@@172| T@U) (|#$R@@201| T@U) ) (!  (=> (and (and (= (type |#$T0@@188|) TyType) (= (type |#$T1@@172|) TyType)) (= (type |#$R@@201|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2OSO |#$T0@@188| |#$T1@@172| |#$R@@201|)) Tagclass._System.___hPartialFunc2OSO) (= (TagFamily (Tclass._System.___hPartialFunc2OSO |#$T0@@188| |#$T1@@172| |#$R@@201|)) |tytagFamily$_#PartialFunc2OSO|))) :qid |unknown.0:0| :skolemid |1198| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@188| |#$T1@@172| |#$R@@201|)) )))
(assert (forall ((arg0@@357 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO_0 arg0@@357)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO_0| :pattern ( (Tclass._System.___hPartialFunc2OSO_0 arg0@@357)) )))
(assert (forall ((|#$T0@@189| T@U) (|#$T1@@173| T@U) (|#$R@@202| T@U) ) (!  (=> (and (and (= (type |#$T0@@189|) TyType) (= (type |#$T1@@173|) TyType)) (= (type |#$R@@202|) TyType)) (= (Tclass._System.___hPartialFunc2OSO_0 (Tclass._System.___hPartialFunc2OSO |#$T0@@189| |#$T1@@173| |#$R@@202|)) |#$T0@@189|)) :qid |unknown.0:0| :skolemid |1199| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@189| |#$T1@@173| |#$R@@202|)) )))
(assert (forall ((arg0@@358 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO_1 arg0@@358)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO_1| :pattern ( (Tclass._System.___hPartialFunc2OSO_1 arg0@@358)) )))
(assert (forall ((|#$T0@@190| T@U) (|#$T1@@174| T@U) (|#$R@@203| T@U) ) (!  (=> (and (and (= (type |#$T0@@190|) TyType) (= (type |#$T1@@174|) TyType)) (= (type |#$R@@203|) TyType)) (= (Tclass._System.___hPartialFunc2OSO_1 (Tclass._System.___hPartialFunc2OSO |#$T0@@190| |#$T1@@174| |#$R@@203|)) |#$T1@@174|)) :qid |unknown.0:0| :skolemid |1200| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@190| |#$T1@@174| |#$R@@203|)) )))
(assert (forall ((arg0@@359 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2OSO_2 arg0@@359)) TyType) :qid |funType:Tclass._System.___hPartialFunc2OSO_2| :pattern ( (Tclass._System.___hPartialFunc2OSO_2 arg0@@359)) )))
(assert (forall ((|#$T0@@191| T@U) (|#$T1@@175| T@U) (|#$R@@204| T@U) ) (!  (=> (and (and (= (type |#$T0@@191|) TyType) (= (type |#$T1@@175|) TyType)) (= (type |#$R@@204|) TyType)) (= (Tclass._System.___hPartialFunc2OSO_2 (Tclass._System.___hPartialFunc2OSO |#$T0@@191| |#$T1@@175| |#$R@@204|)) |#$R@@204|)) :qid |unknown.0:0| :skolemid |1201| :pattern ( (Tclass._System.___hPartialFunc2OSO |#$T0@@191| |#$T1@@175| |#$R@@204|)) )))
(assert (forall ((|#$T0@@192| T@U) (|#$T1@@176| T@U) (|#$R@@205| T@U) (bx@@105 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@192|) TyType) (= (type |#$T1@@176|) TyType)) (= (type |#$R@@205|) TyType)) (= (type bx@@105) BoxType)) ($IsBox bx@@105 (Tclass._System.___hPartialFunc2OSO |#$T0@@192| |#$T1@@176| |#$R@@205|))) (and (= ($Box ($Unbox HandleTypeType bx@@105)) bx@@105) ($Is ($Unbox HandleTypeType bx@@105) (Tclass._System.___hPartialFunc2OSO |#$T0@@192| |#$T1@@176| |#$R@@205|)))) :qid |unknown.0:0| :skolemid |1202| :pattern ( ($IsBox bx@@105 (Tclass._System.___hPartialFunc2OSO |#$T0@@192| |#$T1@@176| |#$R@@205|))) )))
(assert (forall ((|#$T0@@193| T@U) (|#$T1@@177| T@U) (|#$R@@206| T@U) (|f#0@@31| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@193|) TyType) (= (type |#$T1@@177|) TyType)) (= (type |#$R@@206|) TyType)) (= (type |f#0@@31|) HandleTypeType)) (= ($Is |f#0@@31| (Tclass._System.___hPartialFunc2OSO |#$T0@@193| |#$T1@@177| |#$R@@206|))  (and ($Is |f#0@@31| (Tclass._System.___hFunc2OSO |#$T0@@193| |#$T1@@177| |#$R@@206|)) (forall ((|x0#0@@13| T@U) (|x1#0@@11| T@U) ) (!  (=> (and (and (= (type |x0#0@@13|) BoxType) (= (type |x1#0@@11|) BoxType)) (and ($IsBox |x0#0@@13| |#$T0@@193|) ($IsBox |x1#0@@11| |#$T1@@177|))) (|Set#Equal| (Reads2 |#$T0@@193| |#$T1@@177| |#$R@@206| $OneHeap |f#0@@31| |x0#0@@13| |x1#0@@11|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1203| :no-pattern (type |x0#0@@13|) :no-pattern (type |x1#0@@11|) :no-pattern (U_2_int |x0#0@@13|) :no-pattern (U_2_bool |x0#0@@13|) :no-pattern (U_2_int |x1#0@@11|) :no-pattern (U_2_bool |x1#0@@11|) ))))) :qid |unknown.0:0| :skolemid |1204| :pattern ( ($Is |f#0@@31| (Tclass._System.___hPartialFunc2OSO |#$T0@@193| |#$T1@@177| |#$R@@206|))) )))
(assert (forall ((|#$T0@@194| T@U) (|#$T1@@178| T@U) (|#$R@@207| T@U) (|f#0@@32| T@U) ($h@@27 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@194|) TyType) (= (type |#$T1@@178|) TyType)) (= (type |#$R@@207|) TyType)) (= (type |f#0@@32|) HandleTypeType)) (= (type $h@@27) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@32| (Tclass._System.___hPartialFunc2OSO |#$T0@@194| |#$T1@@178| |#$R@@207|) $h@@27) ($IsAlloc |f#0@@32| (Tclass._System.___hFunc2OSO |#$T0@@194| |#$T1@@178| |#$R@@207|) $h@@27))) :qid |unknown.0:0| :skolemid |1205| :pattern ( ($IsAlloc |f#0@@32| (Tclass._System.___hPartialFunc2OSO |#$T0@@194| |#$T1@@178| |#$R@@207|) $h@@27)) )))
(assert (forall ((arg0@@360 T@U) (arg1@@165 T@U) (arg2@@117 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO arg0@@360 arg1@@165 arg2@@117)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO| :pattern ( (Tclass._System.___hTotalFunc2OSO arg0@@360 arg1@@165 arg2@@117)) )))
(assert (forall ((|#$T0@@195| T@U) (|#$T1@@179| T@U) (|#$R@@208| T@U) ) (!  (=> (and (and (= (type |#$T0@@195|) TyType) (= (type |#$T1@@179|) TyType)) (= (type |#$R@@208|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2OSO |#$T0@@195| |#$T1@@179| |#$R@@208|)) Tagclass._System.___hTotalFunc2OSO) (= (TagFamily (Tclass._System.___hTotalFunc2OSO |#$T0@@195| |#$T1@@179| |#$R@@208|)) |tytagFamily$_#TotalFunc2OSO|))) :qid |unknown.0:0| :skolemid |1206| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@195| |#$T1@@179| |#$R@@208|)) )))
(assert (forall ((arg0@@361 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO_0 arg0@@361)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO_0| :pattern ( (Tclass._System.___hTotalFunc2OSO_0 arg0@@361)) )))
(assert (forall ((|#$T0@@196| T@U) (|#$T1@@180| T@U) (|#$R@@209| T@U) ) (!  (=> (and (and (= (type |#$T0@@196|) TyType) (= (type |#$T1@@180|) TyType)) (= (type |#$R@@209|) TyType)) (= (Tclass._System.___hTotalFunc2OSO_0 (Tclass._System.___hTotalFunc2OSO |#$T0@@196| |#$T1@@180| |#$R@@209|)) |#$T0@@196|)) :qid |unknown.0:0| :skolemid |1207| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@196| |#$T1@@180| |#$R@@209|)) )))
(assert (forall ((arg0@@362 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO_1 arg0@@362)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO_1| :pattern ( (Tclass._System.___hTotalFunc2OSO_1 arg0@@362)) )))
(assert (forall ((|#$T0@@197| T@U) (|#$T1@@181| T@U) (|#$R@@210| T@U) ) (!  (=> (and (and (= (type |#$T0@@197|) TyType) (= (type |#$T1@@181|) TyType)) (= (type |#$R@@210|) TyType)) (= (Tclass._System.___hTotalFunc2OSO_1 (Tclass._System.___hTotalFunc2OSO |#$T0@@197| |#$T1@@181| |#$R@@210|)) |#$T1@@181|)) :qid |unknown.0:0| :skolemid |1208| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@197| |#$T1@@181| |#$R@@210|)) )))
(assert (forall ((arg0@@363 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2OSO_2 arg0@@363)) TyType) :qid |funType:Tclass._System.___hTotalFunc2OSO_2| :pattern ( (Tclass._System.___hTotalFunc2OSO_2 arg0@@363)) )))
(assert (forall ((|#$T0@@198| T@U) (|#$T1@@182| T@U) (|#$R@@211| T@U) ) (!  (=> (and (and (= (type |#$T0@@198|) TyType) (= (type |#$T1@@182|) TyType)) (= (type |#$R@@211|) TyType)) (= (Tclass._System.___hTotalFunc2OSO_2 (Tclass._System.___hTotalFunc2OSO |#$T0@@198| |#$T1@@182| |#$R@@211|)) |#$R@@211|)) :qid |unknown.0:0| :skolemid |1209| :pattern ( (Tclass._System.___hTotalFunc2OSO |#$T0@@198| |#$T1@@182| |#$R@@211|)) )))
(assert (forall ((|#$T0@@199| T@U) (|#$T1@@183| T@U) (|#$R@@212| T@U) (bx@@106 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@199|) TyType) (= (type |#$T1@@183|) TyType)) (= (type |#$R@@212|) TyType)) (= (type bx@@106) BoxType)) ($IsBox bx@@106 (Tclass._System.___hTotalFunc2OSO |#$T0@@199| |#$T1@@183| |#$R@@212|))) (and (= ($Box ($Unbox HandleTypeType bx@@106)) bx@@106) ($Is ($Unbox HandleTypeType bx@@106) (Tclass._System.___hTotalFunc2OSO |#$T0@@199| |#$T1@@183| |#$R@@212|)))) :qid |unknown.0:0| :skolemid |1210| :pattern ( ($IsBox bx@@106 (Tclass._System.___hTotalFunc2OSO |#$T0@@199| |#$T1@@183| |#$R@@212|))) )))
(assert (forall ((|#$T0@@200| T@U) (|#$T1@@184| T@U) (|#$R@@213| T@U) (|f#0@@33| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@200|) TyType) (= (type |#$T1@@184|) TyType)) (= (type |#$R@@213|) TyType)) (= (type |f#0@@33|) HandleTypeType)) (= ($Is |f#0@@33| (Tclass._System.___hTotalFunc2OSO |#$T0@@200| |#$T1@@184| |#$R@@213|))  (and ($Is |f#0@@33| (Tclass._System.___hPartialFunc2OSO |#$T0@@200| |#$T1@@184| |#$R@@213|)) (forall ((|x0#0@@14| T@U) (|x1#0@@12| T@U) ) (!  (=> (and (and (= (type |x0#0@@14|) BoxType) (= (type |x1#0@@12|) BoxType)) (and ($IsBox |x0#0@@14| |#$T0@@200|) ($IsBox |x1#0@@12| |#$T1@@184|))) (Requires2 |#$T0@@200| |#$T1@@184| |#$R@@213| $OneHeap |f#0@@33| |x0#0@@14| |x1#0@@12|)) :qid |unknown.0:0| :skolemid |1211| :no-pattern (type |x0#0@@14|) :no-pattern (type |x1#0@@12|) :no-pattern (U_2_int |x0#0@@14|) :no-pattern (U_2_bool |x0#0@@14|) :no-pattern (U_2_int |x1#0@@12|) :no-pattern (U_2_bool |x1#0@@12|) ))))) :qid |unknown.0:0| :skolemid |1212| :pattern ( ($Is |f#0@@33| (Tclass._System.___hTotalFunc2OSO |#$T0@@200| |#$T1@@184| |#$R@@213|))) )))
(assert (forall ((|#$T0@@201| T@U) (|#$T1@@185| T@U) (|#$R@@214| T@U) (|f#0@@34| T@U) ($h@@28 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@201|) TyType) (= (type |#$T1@@185|) TyType)) (= (type |#$R@@214|) TyType)) (= (type |f#0@@34|) HandleTypeType)) (= (type $h@@28) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@34| (Tclass._System.___hTotalFunc2OSO |#$T0@@201| |#$T1@@185| |#$R@@214|) $h@@28) ($IsAlloc |f#0@@34| (Tclass._System.___hPartialFunc2OSO |#$T0@@201| |#$T1@@185| |#$R@@214|) $h@@28))) :qid |unknown.0:0| :skolemid |1213| :pattern ( ($IsAlloc |f#0@@34| (Tclass._System.___hTotalFunc2OSO |#$T0@@201| |#$T1@@185| |#$R@@214|) $h@@28)) )))
(assert (forall ((arg0@@364 T@U) (arg1@@166 T@U) (arg2@@118 T@U) (arg3@@90 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO arg0@@364 arg1@@166 arg2@@118 arg3@@90)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO| :pattern ( (Tclass._System.___hFunc3LLOO arg0@@364 arg1@@166 arg2@@118 arg3@@90)) )))
(assert (forall ((|#$T0@@202| T@U) (|#$T1@@186| T@U) (|#$T2@@148| T@U) (|#$R@@215| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@202|) TyType) (= (type |#$T1@@186|) TyType)) (= (type |#$T2@@148|) TyType)) (= (type |#$R@@215|) TyType)) (and (= (Tag (Tclass._System.___hFunc3LLOO |#$T0@@202| |#$T1@@186| |#$T2@@148| |#$R@@215|)) Tagclass._System.___hFunc3LLOO) (= (TagFamily (Tclass._System.___hFunc3LLOO |#$T0@@202| |#$T1@@186| |#$T2@@148| |#$R@@215|)) |tytagFamily$_#Func3LLOO|))) :qid |unknown.0:0| :skolemid |1214| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@202| |#$T1@@186| |#$T2@@148| |#$R@@215|)) )))
(assert (forall ((arg0@@365 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_0 arg0@@365)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_0| :pattern ( (Tclass._System.___hFunc3LLOO_0 arg0@@365)) )))
(assert (forall ((|#$T0@@203| T@U) (|#$T1@@187| T@U) (|#$T2@@149| T@U) (|#$R@@216| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@203|) TyType) (= (type |#$T1@@187|) TyType)) (= (type |#$T2@@149|) TyType)) (= (type |#$R@@216|) TyType)) (= (Tclass._System.___hFunc3LLOO_0 (Tclass._System.___hFunc3LLOO |#$T0@@203| |#$T1@@187| |#$T2@@149| |#$R@@216|)) |#$T0@@203|)) :qid |unknown.0:0| :skolemid |1215| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@203| |#$T1@@187| |#$T2@@149| |#$R@@216|)) )))
(assert (forall ((arg0@@366 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_1 arg0@@366)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_1| :pattern ( (Tclass._System.___hFunc3LLOO_1 arg0@@366)) )))
(assert (forall ((|#$T0@@204| T@U) (|#$T1@@188| T@U) (|#$T2@@150| T@U) (|#$R@@217| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@204|) TyType) (= (type |#$T1@@188|) TyType)) (= (type |#$T2@@150|) TyType)) (= (type |#$R@@217|) TyType)) (= (Tclass._System.___hFunc3LLOO_1 (Tclass._System.___hFunc3LLOO |#$T0@@204| |#$T1@@188| |#$T2@@150| |#$R@@217|)) |#$T1@@188|)) :qid |unknown.0:0| :skolemid |1216| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@204| |#$T1@@188| |#$T2@@150| |#$R@@217|)) )))
(assert (forall ((arg0@@367 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_2 arg0@@367)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_2| :pattern ( (Tclass._System.___hFunc3LLOO_2 arg0@@367)) )))
(assert (forall ((|#$T0@@205| T@U) (|#$T1@@189| T@U) (|#$T2@@151| T@U) (|#$R@@218| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@205|) TyType) (= (type |#$T1@@189|) TyType)) (= (type |#$T2@@151|) TyType)) (= (type |#$R@@218|) TyType)) (= (Tclass._System.___hFunc3LLOO_2 (Tclass._System.___hFunc3LLOO |#$T0@@205| |#$T1@@189| |#$T2@@151| |#$R@@218|)) |#$T2@@151|)) :qid |unknown.0:0| :skolemid |1217| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@205| |#$T1@@189| |#$T2@@151| |#$R@@218|)) )))
(assert (forall ((arg0@@368 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOO_3 arg0@@368)) TyType) :qid |funType:Tclass._System.___hFunc3LLOO_3| :pattern ( (Tclass._System.___hFunc3LLOO_3 arg0@@368)) )))
(assert (forall ((|#$T0@@206| T@U) (|#$T1@@190| T@U) (|#$T2@@152| T@U) (|#$R@@219| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@206|) TyType) (= (type |#$T1@@190|) TyType)) (= (type |#$T2@@152|) TyType)) (= (type |#$R@@219|) TyType)) (= (Tclass._System.___hFunc3LLOO_3 (Tclass._System.___hFunc3LLOO |#$T0@@206| |#$T1@@190| |#$T2@@152| |#$R@@219|)) |#$R@@219|)) :qid |unknown.0:0| :skolemid |1218| :pattern ( (Tclass._System.___hFunc3LLOO |#$T0@@206| |#$T1@@190| |#$T2@@152| |#$R@@219|)) )))
(assert (forall ((|#$T0@@207| T@U) (|#$T1@@191| T@U) (|#$T2@@153| T@U) (|#$R@@220| T@U) (bx@@107 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@207|) TyType) (= (type |#$T1@@191|) TyType)) (= (type |#$T2@@153|) TyType)) (= (type |#$R@@220|) TyType)) (= (type bx@@107) BoxType)) ($IsBox bx@@107 (Tclass._System.___hFunc3LLOO |#$T0@@207| |#$T1@@191| |#$T2@@153| |#$R@@220|))) (and (= ($Box ($Unbox HandleTypeType bx@@107)) bx@@107) ($Is ($Unbox HandleTypeType bx@@107) (Tclass._System.___hFunc3LLOO |#$T0@@207| |#$T1@@191| |#$T2@@153| |#$R@@220|)))) :qid |unknown.0:0| :skolemid |1219| :pattern ( ($IsBox bx@@107 (Tclass._System.___hFunc3LLOO |#$T0@@207| |#$T1@@191| |#$T2@@153| |#$R@@220|))) )))
(assert (forall ((arg0@@369 T@U) (arg1@@167 T@U) (arg2@@119 T@U) (arg3@@91 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO arg0@@369 arg1@@167 arg2@@119 arg3@@91)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO| :pattern ( (Tclass._System.___hPartialFunc3LLOO arg0@@369 arg1@@167 arg2@@119 arg3@@91)) )))
(assert (forall ((|#$T0@@208| T@U) (|#$T1@@192| T@U) (|#$T2@@154| T@U) (|#$R@@221| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@208|) TyType) (= (type |#$T1@@192|) TyType)) (= (type |#$T2@@154|) TyType)) (= (type |#$R@@221|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3LLOO |#$T0@@208| |#$T1@@192| |#$T2@@154| |#$R@@221|)) Tagclass._System.___hPartialFunc3LLOO) (= (TagFamily (Tclass._System.___hPartialFunc3LLOO |#$T0@@208| |#$T1@@192| |#$T2@@154| |#$R@@221|)) |tytagFamily$_#PartialFunc3LLOO|))) :qid |unknown.0:0| :skolemid |1220| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@208| |#$T1@@192| |#$T2@@154| |#$R@@221|)) )))
(assert (forall ((arg0@@370 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_0 arg0@@370)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_0| :pattern ( (Tclass._System.___hPartialFunc3LLOO_0 arg0@@370)) )))
(assert (forall ((|#$T0@@209| T@U) (|#$T1@@193| T@U) (|#$T2@@155| T@U) (|#$R@@222| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@209|) TyType) (= (type |#$T1@@193|) TyType)) (= (type |#$T2@@155|) TyType)) (= (type |#$R@@222|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_0 (Tclass._System.___hPartialFunc3LLOO |#$T0@@209| |#$T1@@193| |#$T2@@155| |#$R@@222|)) |#$T0@@209|)) :qid |unknown.0:0| :skolemid |1221| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@209| |#$T1@@193| |#$T2@@155| |#$R@@222|)) )))
(assert (forall ((arg0@@371 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_1 arg0@@371)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_1| :pattern ( (Tclass._System.___hPartialFunc3LLOO_1 arg0@@371)) )))
(assert (forall ((|#$T0@@210| T@U) (|#$T1@@194| T@U) (|#$T2@@156| T@U) (|#$R@@223| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@210|) TyType) (= (type |#$T1@@194|) TyType)) (= (type |#$T2@@156|) TyType)) (= (type |#$R@@223|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_1 (Tclass._System.___hPartialFunc3LLOO |#$T0@@210| |#$T1@@194| |#$T2@@156| |#$R@@223|)) |#$T1@@194|)) :qid |unknown.0:0| :skolemid |1222| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@210| |#$T1@@194| |#$T2@@156| |#$R@@223|)) )))
(assert (forall ((arg0@@372 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_2 arg0@@372)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_2| :pattern ( (Tclass._System.___hPartialFunc3LLOO_2 arg0@@372)) )))
(assert (forall ((|#$T0@@211| T@U) (|#$T1@@195| T@U) (|#$T2@@157| T@U) (|#$R@@224| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@211|) TyType) (= (type |#$T1@@195|) TyType)) (= (type |#$T2@@157|) TyType)) (= (type |#$R@@224|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_2 (Tclass._System.___hPartialFunc3LLOO |#$T0@@211| |#$T1@@195| |#$T2@@157| |#$R@@224|)) |#$T2@@157|)) :qid |unknown.0:0| :skolemid |1223| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@211| |#$T1@@195| |#$T2@@157| |#$R@@224|)) )))
(assert (forall ((arg0@@373 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOO_3 arg0@@373)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOO_3| :pattern ( (Tclass._System.___hPartialFunc3LLOO_3 arg0@@373)) )))
(assert (forall ((|#$T0@@212| T@U) (|#$T1@@196| T@U) (|#$T2@@158| T@U) (|#$R@@225| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@212|) TyType) (= (type |#$T1@@196|) TyType)) (= (type |#$T2@@158|) TyType)) (= (type |#$R@@225|) TyType)) (= (Tclass._System.___hPartialFunc3LLOO_3 (Tclass._System.___hPartialFunc3LLOO |#$T0@@212| |#$T1@@196| |#$T2@@158| |#$R@@225|)) |#$R@@225|)) :qid |unknown.0:0| :skolemid |1224| :pattern ( (Tclass._System.___hPartialFunc3LLOO |#$T0@@212| |#$T1@@196| |#$T2@@158| |#$R@@225|)) )))
(assert (forall ((|#$T0@@213| T@U) (|#$T1@@197| T@U) (|#$T2@@159| T@U) (|#$R@@226| T@U) (bx@@108 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@213|) TyType) (= (type |#$T1@@197|) TyType)) (= (type |#$T2@@159|) TyType)) (= (type |#$R@@226|) TyType)) (= (type bx@@108) BoxType)) ($IsBox bx@@108 (Tclass._System.___hPartialFunc3LLOO |#$T0@@213| |#$T1@@197| |#$T2@@159| |#$R@@226|))) (and (= ($Box ($Unbox HandleTypeType bx@@108)) bx@@108) ($Is ($Unbox HandleTypeType bx@@108) (Tclass._System.___hPartialFunc3LLOO |#$T0@@213| |#$T1@@197| |#$T2@@159| |#$R@@226|)))) :qid |unknown.0:0| :skolemid |1225| :pattern ( ($IsBox bx@@108 (Tclass._System.___hPartialFunc3LLOO |#$T0@@213| |#$T1@@197| |#$T2@@159| |#$R@@226|))) )))
(assert (forall ((|#$T0@@214| T@U) (|#$T1@@198| T@U) (|#$T2@@160| T@U) (|#$R@@227| T@U) (|f#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@214|) TyType) (= (type |#$T1@@198|) TyType)) (= (type |#$T2@@160|) TyType)) (= (type |#$R@@227|) TyType)) (= (type |f#0@@35|) HandleTypeType)) (= ($Is |f#0@@35| (Tclass._System.___hPartialFunc3LLOO |#$T0@@214| |#$T1@@198| |#$T2@@160| |#$R@@227|))  (and ($Is |f#0@@35| (Tclass._System.___hFunc3LLOO |#$T0@@214| |#$T1@@198| |#$T2@@160| |#$R@@227|)) (forall ((|x0#0@@15| T@U) (|x1#0@@13| T@U) (|x2#0@@9| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@15|) BoxType) (= (type |x1#0@@13|) BoxType)) (= (type |x2#0@@9|) BoxType)) (and (and ($IsBox |x0#0@@15| |#$T0@@214|) ($IsBox |x1#0@@13| |#$T1@@198|)) ($IsBox |x2#0@@9| |#$T2@@160|))) (|Set#Equal| (Reads3 |#$T0@@214| |#$T1@@198| |#$T2@@160| |#$R@@227| $OneHeap |f#0@@35| |x0#0@@15| |x1#0@@13| |x2#0@@9|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1226| :no-pattern (type |x0#0@@15|) :no-pattern (type |x1#0@@13|) :no-pattern (type |x2#0@@9|) :no-pattern (U_2_int |x0#0@@15|) :no-pattern (U_2_bool |x0#0@@15|) :no-pattern (U_2_int |x1#0@@13|) :no-pattern (U_2_bool |x1#0@@13|) :no-pattern (U_2_int |x2#0@@9|) :no-pattern (U_2_bool |x2#0@@9|) ))))) :qid |unknown.0:0| :skolemid |1227| :pattern ( ($Is |f#0@@35| (Tclass._System.___hPartialFunc3LLOO |#$T0@@214| |#$T1@@198| |#$T2@@160| |#$R@@227|))) )))
(assert (forall ((|#$T0@@215| T@U) (|#$T1@@199| T@U) (|#$T2@@161| T@U) (|#$R@@228| T@U) (|f#0@@36| T@U) ($h@@29 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@215|) TyType) (= (type |#$T1@@199|) TyType)) (= (type |#$T2@@161|) TyType)) (= (type |#$R@@228|) TyType)) (= (type |f#0@@36|) HandleTypeType)) (= (type $h@@29) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@36| (Tclass._System.___hPartialFunc3LLOO |#$T0@@215| |#$T1@@199| |#$T2@@161| |#$R@@228|) $h@@29) ($IsAlloc |f#0@@36| (Tclass._System.___hFunc3LLOO |#$T0@@215| |#$T1@@199| |#$T2@@161| |#$R@@228|) $h@@29))) :qid |unknown.0:0| :skolemid |1228| :pattern ( ($IsAlloc |f#0@@36| (Tclass._System.___hPartialFunc3LLOO |#$T0@@215| |#$T1@@199| |#$T2@@161| |#$R@@228|) $h@@29)) )))
(assert (forall ((arg0@@374 T@U) (arg1@@168 T@U) (arg2@@120 T@U) (arg3@@92 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO arg0@@374 arg1@@168 arg2@@120 arg3@@92)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO| :pattern ( (Tclass._System.___hTotalFunc3LLOO arg0@@374 arg1@@168 arg2@@120 arg3@@92)) )))
(assert (forall ((|#$T0@@216| T@U) (|#$T1@@200| T@U) (|#$T2@@162| T@U) (|#$R@@229| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@216|) TyType) (= (type |#$T1@@200|) TyType)) (= (type |#$T2@@162|) TyType)) (= (type |#$R@@229|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3LLOO |#$T0@@216| |#$T1@@200| |#$T2@@162| |#$R@@229|)) Tagclass._System.___hTotalFunc3LLOO) (= (TagFamily (Tclass._System.___hTotalFunc3LLOO |#$T0@@216| |#$T1@@200| |#$T2@@162| |#$R@@229|)) |tytagFamily$_#TotalFunc3LLOO|))) :qid |unknown.0:0| :skolemid |1229| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@216| |#$T1@@200| |#$T2@@162| |#$R@@229|)) )))
(assert (forall ((arg0@@375 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_0 arg0@@375)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_0| :pattern ( (Tclass._System.___hTotalFunc3LLOO_0 arg0@@375)) )))
(assert (forall ((|#$T0@@217| T@U) (|#$T1@@201| T@U) (|#$T2@@163| T@U) (|#$R@@230| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@217|) TyType) (= (type |#$T1@@201|) TyType)) (= (type |#$T2@@163|) TyType)) (= (type |#$R@@230|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_0 (Tclass._System.___hTotalFunc3LLOO |#$T0@@217| |#$T1@@201| |#$T2@@163| |#$R@@230|)) |#$T0@@217|)) :qid |unknown.0:0| :skolemid |1230| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@217| |#$T1@@201| |#$T2@@163| |#$R@@230|)) )))
(assert (forall ((arg0@@376 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_1 arg0@@376)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_1| :pattern ( (Tclass._System.___hTotalFunc3LLOO_1 arg0@@376)) )))
(assert (forall ((|#$T0@@218| T@U) (|#$T1@@202| T@U) (|#$T2@@164| T@U) (|#$R@@231| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@218|) TyType) (= (type |#$T1@@202|) TyType)) (= (type |#$T2@@164|) TyType)) (= (type |#$R@@231|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_1 (Tclass._System.___hTotalFunc3LLOO |#$T0@@218| |#$T1@@202| |#$T2@@164| |#$R@@231|)) |#$T1@@202|)) :qid |unknown.0:0| :skolemid |1231| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@218| |#$T1@@202| |#$T2@@164| |#$R@@231|)) )))
(assert (forall ((arg0@@377 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_2 arg0@@377)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_2| :pattern ( (Tclass._System.___hTotalFunc3LLOO_2 arg0@@377)) )))
(assert (forall ((|#$T0@@219| T@U) (|#$T1@@203| T@U) (|#$T2@@165| T@U) (|#$R@@232| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@219|) TyType) (= (type |#$T1@@203|) TyType)) (= (type |#$T2@@165|) TyType)) (= (type |#$R@@232|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_2 (Tclass._System.___hTotalFunc3LLOO |#$T0@@219| |#$T1@@203| |#$T2@@165| |#$R@@232|)) |#$T2@@165|)) :qid |unknown.0:0| :skolemid |1232| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@219| |#$T1@@203| |#$T2@@165| |#$R@@232|)) )))
(assert (forall ((arg0@@378 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOO_3 arg0@@378)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOO_3| :pattern ( (Tclass._System.___hTotalFunc3LLOO_3 arg0@@378)) )))
(assert (forall ((|#$T0@@220| T@U) (|#$T1@@204| T@U) (|#$T2@@166| T@U) (|#$R@@233| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@220|) TyType) (= (type |#$T1@@204|) TyType)) (= (type |#$T2@@166|) TyType)) (= (type |#$R@@233|) TyType)) (= (Tclass._System.___hTotalFunc3LLOO_3 (Tclass._System.___hTotalFunc3LLOO |#$T0@@220| |#$T1@@204| |#$T2@@166| |#$R@@233|)) |#$R@@233|)) :qid |unknown.0:0| :skolemid |1233| :pattern ( (Tclass._System.___hTotalFunc3LLOO |#$T0@@220| |#$T1@@204| |#$T2@@166| |#$R@@233|)) )))
(assert (forall ((|#$T0@@221| T@U) (|#$T1@@205| T@U) (|#$T2@@167| T@U) (|#$R@@234| T@U) (bx@@109 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@221|) TyType) (= (type |#$T1@@205|) TyType)) (= (type |#$T2@@167|) TyType)) (= (type |#$R@@234|) TyType)) (= (type bx@@109) BoxType)) ($IsBox bx@@109 (Tclass._System.___hTotalFunc3LLOO |#$T0@@221| |#$T1@@205| |#$T2@@167| |#$R@@234|))) (and (= ($Box ($Unbox HandleTypeType bx@@109)) bx@@109) ($Is ($Unbox HandleTypeType bx@@109) (Tclass._System.___hTotalFunc3LLOO |#$T0@@221| |#$T1@@205| |#$T2@@167| |#$R@@234|)))) :qid |unknown.0:0| :skolemid |1234| :pattern ( ($IsBox bx@@109 (Tclass._System.___hTotalFunc3LLOO |#$T0@@221| |#$T1@@205| |#$T2@@167| |#$R@@234|))) )))
(assert (forall ((|#$T0@@222| T@U) (|#$T1@@206| T@U) (|#$T2@@168| T@U) (|#$R@@235| T@U) (|f#0@@37| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@222|) TyType) (= (type |#$T1@@206|) TyType)) (= (type |#$T2@@168|) TyType)) (= (type |#$R@@235|) TyType)) (= (type |f#0@@37|) HandleTypeType)) (= ($Is |f#0@@37| (Tclass._System.___hTotalFunc3LLOO |#$T0@@222| |#$T1@@206| |#$T2@@168| |#$R@@235|))  (and ($Is |f#0@@37| (Tclass._System.___hPartialFunc3LLOO |#$T0@@222| |#$T1@@206| |#$T2@@168| |#$R@@235|)) (forall ((|x0#0@@16| T@U) (|x1#0@@14| T@U) (|x2#0@@10| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@16|) BoxType) (= (type |x1#0@@14|) BoxType)) (= (type |x2#0@@10|) BoxType)) (and (and ($IsBox |x0#0@@16| |#$T0@@222|) ($IsBox |x1#0@@14| |#$T1@@206|)) ($IsBox |x2#0@@10| |#$T2@@168|))) (Requires3 |#$T0@@222| |#$T1@@206| |#$T2@@168| |#$R@@235| $OneHeap |f#0@@37| |x0#0@@16| |x1#0@@14| |x2#0@@10|)) :qid |unknown.0:0| :skolemid |1235| :no-pattern (type |x0#0@@16|) :no-pattern (type |x1#0@@14|) :no-pattern (type |x2#0@@10|) :no-pattern (U_2_int |x0#0@@16|) :no-pattern (U_2_bool |x0#0@@16|) :no-pattern (U_2_int |x1#0@@14|) :no-pattern (U_2_bool |x1#0@@14|) :no-pattern (U_2_int |x2#0@@10|) :no-pattern (U_2_bool |x2#0@@10|) ))))) :qid |unknown.0:0| :skolemid |1236| :pattern ( ($Is |f#0@@37| (Tclass._System.___hTotalFunc3LLOO |#$T0@@222| |#$T1@@206| |#$T2@@168| |#$R@@235|))) )))
(assert (forall ((|#$T0@@223| T@U) (|#$T1@@207| T@U) (|#$T2@@169| T@U) (|#$R@@236| T@U) (|f#0@@38| T@U) ($h@@30 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@223|) TyType) (= (type |#$T1@@207|) TyType)) (= (type |#$T2@@169|) TyType)) (= (type |#$R@@236|) TyType)) (= (type |f#0@@38|) HandleTypeType)) (= (type $h@@30) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@38| (Tclass._System.___hTotalFunc3LLOO |#$T0@@223| |#$T1@@207| |#$T2@@169| |#$R@@236|) $h@@30) ($IsAlloc |f#0@@38| (Tclass._System.___hPartialFunc3LLOO |#$T0@@223| |#$T1@@207| |#$T2@@169| |#$R@@236|) $h@@30))) :qid |unknown.0:0| :skolemid |1237| :pattern ( ($IsAlloc |f#0@@38| (Tclass._System.___hTotalFunc3LLOO |#$T0@@223| |#$T1@@207| |#$T2@@169| |#$R@@236|) $h@@30)) )))
(assert (forall ((arg0@@379 T@U) (arg1@@169 T@U) ) (! (= (type (Tclass._System.___hFunc1OS arg0@@379 arg1@@169)) TyType) :qid |funType:Tclass._System.___hFunc1OS| :pattern ( (Tclass._System.___hFunc1OS arg0@@379 arg1@@169)) )))
(assert (forall ((|#$T0@@224| T@U) (|#$R@@237| T@U) ) (!  (=> (and (= (type |#$T0@@224|) TyType) (= (type |#$R@@237|) TyType)) (and (= (Tag (Tclass._System.___hFunc1OS |#$T0@@224| |#$R@@237|)) Tagclass._System.___hFunc1OS) (= (TagFamily (Tclass._System.___hFunc1OS |#$T0@@224| |#$R@@237|)) |tytagFamily$_#Func1OS|))) :qid |unknown.0:0| :skolemid |1238| :pattern ( (Tclass._System.___hFunc1OS |#$T0@@224| |#$R@@237|)) )))
(assert (forall ((arg0@@380 T@U) ) (! (= (type (Tclass._System.___hFunc1OS_0 arg0@@380)) TyType) :qid |funType:Tclass._System.___hFunc1OS_0| :pattern ( (Tclass._System.___hFunc1OS_0 arg0@@380)) )))
(assert (forall ((|#$T0@@225| T@U) (|#$R@@238| T@U) ) (!  (=> (and (= (type |#$T0@@225|) TyType) (= (type |#$R@@238|) TyType)) (= (Tclass._System.___hFunc1OS_0 (Tclass._System.___hFunc1OS |#$T0@@225| |#$R@@238|)) |#$T0@@225|)) :qid |unknown.0:0| :skolemid |1239| :pattern ( (Tclass._System.___hFunc1OS |#$T0@@225| |#$R@@238|)) )))
(assert (forall ((arg0@@381 T@U) ) (! (= (type (Tclass._System.___hFunc1OS_1 arg0@@381)) TyType) :qid |funType:Tclass._System.___hFunc1OS_1| :pattern ( (Tclass._System.___hFunc1OS_1 arg0@@381)) )))
(assert (forall ((|#$T0@@226| T@U) (|#$R@@239| T@U) ) (!  (=> (and (= (type |#$T0@@226|) TyType) (= (type |#$R@@239|) TyType)) (= (Tclass._System.___hFunc1OS_1 (Tclass._System.___hFunc1OS |#$T0@@226| |#$R@@239|)) |#$R@@239|)) :qid |unknown.0:0| :skolemid |1240| :pattern ( (Tclass._System.___hFunc1OS |#$T0@@226| |#$R@@239|)) )))
(assert (forall ((|#$T0@@227| T@U) (|#$R@@240| T@U) (bx@@110 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@227|) TyType) (= (type |#$R@@240|) TyType)) (= (type bx@@110) BoxType)) ($IsBox bx@@110 (Tclass._System.___hFunc1OS |#$T0@@227| |#$R@@240|))) (and (= ($Box ($Unbox HandleTypeType bx@@110)) bx@@110) ($Is ($Unbox HandleTypeType bx@@110) (Tclass._System.___hFunc1OS |#$T0@@227| |#$R@@240|)))) :qid |unknown.0:0| :skolemid |1241| :pattern ( ($IsBox bx@@110 (Tclass._System.___hFunc1OS |#$T0@@227| |#$R@@240|))) )))
(assert (forall ((arg0@@382 T@U) (arg1@@170 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OS arg0@@382 arg1@@170)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OS| :pattern ( (Tclass._System.___hPartialFunc1OS arg0@@382 arg1@@170)) )))
(assert (forall ((|#$T0@@228| T@U) (|#$R@@241| T@U) ) (!  (=> (and (= (type |#$T0@@228|) TyType) (= (type |#$R@@241|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1OS |#$T0@@228| |#$R@@241|)) Tagclass._System.___hPartialFunc1OS) (= (TagFamily (Tclass._System.___hPartialFunc1OS |#$T0@@228| |#$R@@241|)) |tytagFamily$_#PartialFunc1OS|))) :qid |unknown.0:0| :skolemid |1242| :pattern ( (Tclass._System.___hPartialFunc1OS |#$T0@@228| |#$R@@241|)) )))
(assert (forall ((arg0@@383 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OS_0 arg0@@383)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OS_0| :pattern ( (Tclass._System.___hPartialFunc1OS_0 arg0@@383)) )))
(assert (forall ((|#$T0@@229| T@U) (|#$R@@242| T@U) ) (!  (=> (and (= (type |#$T0@@229|) TyType) (= (type |#$R@@242|) TyType)) (= (Tclass._System.___hPartialFunc1OS_0 (Tclass._System.___hPartialFunc1OS |#$T0@@229| |#$R@@242|)) |#$T0@@229|)) :qid |unknown.0:0| :skolemid |1243| :pattern ( (Tclass._System.___hPartialFunc1OS |#$T0@@229| |#$R@@242|)) )))
(assert (forall ((arg0@@384 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OS_1 arg0@@384)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OS_1| :pattern ( (Tclass._System.___hPartialFunc1OS_1 arg0@@384)) )))
(assert (forall ((|#$T0@@230| T@U) (|#$R@@243| T@U) ) (!  (=> (and (= (type |#$T0@@230|) TyType) (= (type |#$R@@243|) TyType)) (= (Tclass._System.___hPartialFunc1OS_1 (Tclass._System.___hPartialFunc1OS |#$T0@@230| |#$R@@243|)) |#$R@@243|)) :qid |unknown.0:0| :skolemid |1244| :pattern ( (Tclass._System.___hPartialFunc1OS |#$T0@@230| |#$R@@243|)) )))
(assert (forall ((|#$T0@@231| T@U) (|#$R@@244| T@U) (bx@@111 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@231|) TyType) (= (type |#$R@@244|) TyType)) (= (type bx@@111) BoxType)) ($IsBox bx@@111 (Tclass._System.___hPartialFunc1OS |#$T0@@231| |#$R@@244|))) (and (= ($Box ($Unbox HandleTypeType bx@@111)) bx@@111) ($Is ($Unbox HandleTypeType bx@@111) (Tclass._System.___hPartialFunc1OS |#$T0@@231| |#$R@@244|)))) :qid |unknown.0:0| :skolemid |1245| :pattern ( ($IsBox bx@@111 (Tclass._System.___hPartialFunc1OS |#$T0@@231| |#$R@@244|))) )))
(assert (forall ((|#$T0@@232| T@U) (|#$R@@245| T@U) (|f#0@@39| T@U) ) (!  (=> (and (and (= (type |#$T0@@232|) TyType) (= (type |#$R@@245|) TyType)) (= (type |f#0@@39|) HandleTypeType)) (= ($Is |f#0@@39| (Tclass._System.___hPartialFunc1OS |#$T0@@232| |#$R@@245|))  (and ($Is |f#0@@39| (Tclass._System.___hFunc1OS |#$T0@@232| |#$R@@245|)) (forall ((|x0#0@@17| T@U) ) (!  (=> (and (= (type |x0#0@@17|) BoxType) ($IsBox |x0#0@@17| |#$T0@@232|)) (|Set#Equal| (Reads1 |#$T0@@232| |#$R@@245| $OneHeap |f#0@@39| |x0#0@@17|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1246| :no-pattern (type |x0#0@@17|) :no-pattern (U_2_int |x0#0@@17|) :no-pattern (U_2_bool |x0#0@@17|) ))))) :qid |unknown.0:0| :skolemid |1247| :pattern ( ($Is |f#0@@39| (Tclass._System.___hPartialFunc1OS |#$T0@@232| |#$R@@245|))) )))
(assert (forall ((|#$T0@@233| T@U) (|#$R@@246| T@U) (|f#0@@40| T@U) ($h@@31 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@233|) TyType) (= (type |#$R@@246|) TyType)) (= (type |f#0@@40|) HandleTypeType)) (= (type $h@@31) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@40| (Tclass._System.___hPartialFunc1OS |#$T0@@233| |#$R@@246|) $h@@31) ($IsAlloc |f#0@@40| (Tclass._System.___hFunc1OS |#$T0@@233| |#$R@@246|) $h@@31))) :qid |unknown.0:0| :skolemid |1248| :pattern ( ($IsAlloc |f#0@@40| (Tclass._System.___hPartialFunc1OS |#$T0@@233| |#$R@@246|) $h@@31)) )))
(assert (forall ((arg0@@385 T@U) (arg1@@171 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OS arg0@@385 arg1@@171)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OS| :pattern ( (Tclass._System.___hTotalFunc1OS arg0@@385 arg1@@171)) )))
(assert (forall ((|#$T0@@234| T@U) (|#$R@@247| T@U) ) (!  (=> (and (= (type |#$T0@@234|) TyType) (= (type |#$R@@247|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1OS |#$T0@@234| |#$R@@247|)) Tagclass._System.___hTotalFunc1OS) (= (TagFamily (Tclass._System.___hTotalFunc1OS |#$T0@@234| |#$R@@247|)) |tytagFamily$_#TotalFunc1OS|))) :qid |unknown.0:0| :skolemid |1249| :pattern ( (Tclass._System.___hTotalFunc1OS |#$T0@@234| |#$R@@247|)) )))
(assert (forall ((arg0@@386 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OS_0 arg0@@386)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OS_0| :pattern ( (Tclass._System.___hTotalFunc1OS_0 arg0@@386)) )))
(assert (forall ((|#$T0@@235| T@U) (|#$R@@248| T@U) ) (!  (=> (and (= (type |#$T0@@235|) TyType) (= (type |#$R@@248|) TyType)) (= (Tclass._System.___hTotalFunc1OS_0 (Tclass._System.___hTotalFunc1OS |#$T0@@235| |#$R@@248|)) |#$T0@@235|)) :qid |unknown.0:0| :skolemid |1250| :pattern ( (Tclass._System.___hTotalFunc1OS |#$T0@@235| |#$R@@248|)) )))
(assert (forall ((arg0@@387 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OS_1 arg0@@387)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OS_1| :pattern ( (Tclass._System.___hTotalFunc1OS_1 arg0@@387)) )))
(assert (forall ((|#$T0@@236| T@U) (|#$R@@249| T@U) ) (!  (=> (and (= (type |#$T0@@236|) TyType) (= (type |#$R@@249|) TyType)) (= (Tclass._System.___hTotalFunc1OS_1 (Tclass._System.___hTotalFunc1OS |#$T0@@236| |#$R@@249|)) |#$R@@249|)) :qid |unknown.0:0| :skolemid |1251| :pattern ( (Tclass._System.___hTotalFunc1OS |#$T0@@236| |#$R@@249|)) )))
(assert (forall ((|#$T0@@237| T@U) (|#$R@@250| T@U) (bx@@112 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@237|) TyType) (= (type |#$R@@250|) TyType)) (= (type bx@@112) BoxType)) ($IsBox bx@@112 (Tclass._System.___hTotalFunc1OS |#$T0@@237| |#$R@@250|))) (and (= ($Box ($Unbox HandleTypeType bx@@112)) bx@@112) ($Is ($Unbox HandleTypeType bx@@112) (Tclass._System.___hTotalFunc1OS |#$T0@@237| |#$R@@250|)))) :qid |unknown.0:0| :skolemid |1252| :pattern ( ($IsBox bx@@112 (Tclass._System.___hTotalFunc1OS |#$T0@@237| |#$R@@250|))) )))
(assert (forall ((|#$T0@@238| T@U) (|#$R@@251| T@U) (|f#0@@41| T@U) ) (!  (=> (and (and (= (type |#$T0@@238|) TyType) (= (type |#$R@@251|) TyType)) (= (type |f#0@@41|) HandleTypeType)) (= ($Is |f#0@@41| (Tclass._System.___hTotalFunc1OS |#$T0@@238| |#$R@@251|))  (and ($Is |f#0@@41| (Tclass._System.___hPartialFunc1OS |#$T0@@238| |#$R@@251|)) (forall ((|x0#0@@18| T@U) ) (!  (=> (and (= (type |x0#0@@18|) BoxType) ($IsBox |x0#0@@18| |#$T0@@238|)) (Requires1 |#$T0@@238| |#$R@@251| $OneHeap |f#0@@41| |x0#0@@18|)) :qid |unknown.0:0| :skolemid |1253| :no-pattern (type |x0#0@@18|) :no-pattern (U_2_int |x0#0@@18|) :no-pattern (U_2_bool |x0#0@@18|) ))))) :qid |unknown.0:0| :skolemid |1254| :pattern ( ($Is |f#0@@41| (Tclass._System.___hTotalFunc1OS |#$T0@@238| |#$R@@251|))) )))
(assert (forall ((|#$T0@@239| T@U) (|#$R@@252| T@U) (|f#0@@42| T@U) ($h@@32 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@239|) TyType) (= (type |#$R@@252|) TyType)) (= (type |f#0@@42|) HandleTypeType)) (= (type $h@@32) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@42| (Tclass._System.___hTotalFunc1OS |#$T0@@239| |#$R@@252|) $h@@32) ($IsAlloc |f#0@@42| (Tclass._System.___hPartialFunc1OS |#$T0@@239| |#$R@@252|) $h@@32))) :qid |unknown.0:0| :skolemid |1255| :pattern ( ($IsAlloc |f#0@@42| (Tclass._System.___hTotalFunc1OS |#$T0@@239| |#$R@@252|) $h@@32)) )))
(assert (forall ((arg0@@388 T@U) ) (! (= (type (Tclass._System.___hFunc0L arg0@@388)) TyType) :qid |funType:Tclass._System.___hFunc0L| :pattern ( (Tclass._System.___hFunc0L arg0@@388)) )))
(assert (forall ((|#$R@@253| T@U) ) (!  (=> (= (type |#$R@@253|) TyType) (and (= (Tag (Tclass._System.___hFunc0L |#$R@@253|)) Tagclass._System.___hFunc0L) (= (TagFamily (Tclass._System.___hFunc0L |#$R@@253|)) |tytagFamily$_#Func0L|))) :qid |unknown.0:0| :skolemid |1256| :pattern ( (Tclass._System.___hFunc0L |#$R@@253|)) )))
(assert (forall ((arg0@@389 T@U) ) (! (= (type (Tclass._System.___hFunc0L_0 arg0@@389)) TyType) :qid |funType:Tclass._System.___hFunc0L_0| :pattern ( (Tclass._System.___hFunc0L_0 arg0@@389)) )))
(assert (forall ((|#$R@@254| T@U) ) (!  (=> (= (type |#$R@@254|) TyType) (= (Tclass._System.___hFunc0L_0 (Tclass._System.___hFunc0L |#$R@@254|)) |#$R@@254|)) :qid |unknown.0:0| :skolemid |1257| :pattern ( (Tclass._System.___hFunc0L |#$R@@254|)) )))
(assert (forall ((|#$R@@255| T@U) (bx@@113 T@U) ) (!  (=> (and (and (= (type |#$R@@255|) TyType) (= (type bx@@113) BoxType)) ($IsBox bx@@113 (Tclass._System.___hFunc0L |#$R@@255|))) (and (= ($Box ($Unbox HandleTypeType bx@@113)) bx@@113) ($Is ($Unbox HandleTypeType bx@@113) (Tclass._System.___hFunc0L |#$R@@255|)))) :qid |unknown.0:0| :skolemid |1258| :pattern ( ($IsBox bx@@113 (Tclass._System.___hFunc0L |#$R@@255|))) )))
(assert (forall ((arg0@@390 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0L arg0@@390)) TyType) :qid |funType:Tclass._System.___hPartialFunc0L| :pattern ( (Tclass._System.___hPartialFunc0L arg0@@390)) )))
(assert (forall ((|#$R@@256| T@U) ) (!  (=> (= (type |#$R@@256|) TyType) (and (= (Tag (Tclass._System.___hPartialFunc0L |#$R@@256|)) Tagclass._System.___hPartialFunc0L) (= (TagFamily (Tclass._System.___hPartialFunc0L |#$R@@256|)) |tytagFamily$_#PartialFunc0L|))) :qid |unknown.0:0| :skolemid |1259| :pattern ( (Tclass._System.___hPartialFunc0L |#$R@@256|)) )))
(assert (forall ((arg0@@391 T@U) ) (! (= (type (Tclass._System.___hPartialFunc0L_0 arg0@@391)) TyType) :qid |funType:Tclass._System.___hPartialFunc0L_0| :pattern ( (Tclass._System.___hPartialFunc0L_0 arg0@@391)) )))
(assert (forall ((|#$R@@257| T@U) ) (!  (=> (= (type |#$R@@257|) TyType) (= (Tclass._System.___hPartialFunc0L_0 (Tclass._System.___hPartialFunc0L |#$R@@257|)) |#$R@@257|)) :qid |unknown.0:0| :skolemid |1260| :pattern ( (Tclass._System.___hPartialFunc0L |#$R@@257|)) )))
(assert (forall ((|#$R@@258| T@U) (bx@@114 T@U) ) (!  (=> (and (and (= (type |#$R@@258|) TyType) (= (type bx@@114) BoxType)) ($IsBox bx@@114 (Tclass._System.___hPartialFunc0L |#$R@@258|))) (and (= ($Box ($Unbox HandleTypeType bx@@114)) bx@@114) ($Is ($Unbox HandleTypeType bx@@114) (Tclass._System.___hPartialFunc0L |#$R@@258|)))) :qid |unknown.0:0| :skolemid |1261| :pattern ( ($IsBox bx@@114 (Tclass._System.___hPartialFunc0L |#$R@@258|))) )))
(assert (forall ((|#$R@@259| T@U) (|f#0@@43| T@U) ) (!  (=> (and (= (type |#$R@@259|) TyType) (= (type |f#0@@43|) HandleTypeType)) (= ($Is |f#0@@43| (Tclass._System.___hPartialFunc0L |#$R@@259|))  (and ($Is |f#0@@43| (Tclass._System.___hFunc0L |#$R@@259|)) (|Set#Equal| (Reads0 |#$R@@259| $OneHeap |f#0@@43|) (|Set#Empty| BoxType))))) :qid |unknown.0:0| :skolemid |1262| :pattern ( ($Is |f#0@@43| (Tclass._System.___hPartialFunc0L |#$R@@259|))) )))
(assert (forall ((|#$R@@260| T@U) (|f#0@@44| T@U) ($h@@33 T@U) ) (!  (=> (and (and (= (type |#$R@@260|) TyType) (= (type |f#0@@44|) HandleTypeType)) (= (type $h@@33) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@44| (Tclass._System.___hPartialFunc0L |#$R@@260|) $h@@33) ($IsAlloc |f#0@@44| (Tclass._System.___hFunc0L |#$R@@260|) $h@@33))) :qid |unknown.0:0| :skolemid |1263| :pattern ( ($IsAlloc |f#0@@44| (Tclass._System.___hPartialFunc0L |#$R@@260|) $h@@33)) )))
(assert (forall ((arg0@@392 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0L arg0@@392)) TyType) :qid |funType:Tclass._System.___hTotalFunc0L| :pattern ( (Tclass._System.___hTotalFunc0L arg0@@392)) )))
(assert (forall ((|#$R@@261| T@U) ) (!  (=> (= (type |#$R@@261|) TyType) (and (= (Tag (Tclass._System.___hTotalFunc0L |#$R@@261|)) Tagclass._System.___hTotalFunc0L) (= (TagFamily (Tclass._System.___hTotalFunc0L |#$R@@261|)) |tytagFamily$_#TotalFunc0L|))) :qid |unknown.0:0| :skolemid |1264| :pattern ( (Tclass._System.___hTotalFunc0L |#$R@@261|)) )))
(assert (forall ((arg0@@393 T@U) ) (! (= (type (Tclass._System.___hTotalFunc0L_0 arg0@@393)) TyType) :qid |funType:Tclass._System.___hTotalFunc0L_0| :pattern ( (Tclass._System.___hTotalFunc0L_0 arg0@@393)) )))
(assert (forall ((|#$R@@262| T@U) ) (!  (=> (= (type |#$R@@262|) TyType) (= (Tclass._System.___hTotalFunc0L_0 (Tclass._System.___hTotalFunc0L |#$R@@262|)) |#$R@@262|)) :qid |unknown.0:0| :skolemid |1265| :pattern ( (Tclass._System.___hTotalFunc0L |#$R@@262|)) )))
(assert (forall ((|#$R@@263| T@U) (bx@@115 T@U) ) (!  (=> (and (and (= (type |#$R@@263|) TyType) (= (type bx@@115) BoxType)) ($IsBox bx@@115 (Tclass._System.___hTotalFunc0L |#$R@@263|))) (and (= ($Box ($Unbox HandleTypeType bx@@115)) bx@@115) ($Is ($Unbox HandleTypeType bx@@115) (Tclass._System.___hTotalFunc0L |#$R@@263|)))) :qid |unknown.0:0| :skolemid |1266| :pattern ( ($IsBox bx@@115 (Tclass._System.___hTotalFunc0L |#$R@@263|))) )))
(assert (forall ((|#$R@@264| T@U) (|f#0@@45| T@U) ) (!  (=> (and (= (type |#$R@@264|) TyType) (= (type |f#0@@45|) HandleTypeType)) (= ($Is |f#0@@45| (Tclass._System.___hTotalFunc0L |#$R@@264|))  (and ($Is |f#0@@45| (Tclass._System.___hPartialFunc0L |#$R@@264|)) (Requires0 |#$R@@264| $OneHeap |f#0@@45|)))) :qid |unknown.0:0| :skolemid |1267| :pattern ( ($Is |f#0@@45| (Tclass._System.___hTotalFunc0L |#$R@@264|))) )))
(assert (forall ((|#$R@@265| T@U) (|f#0@@46| T@U) ($h@@34 T@U) ) (!  (=> (and (and (= (type |#$R@@265|) TyType) (= (type |f#0@@46|) HandleTypeType)) (= (type $h@@34) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@46| (Tclass._System.___hTotalFunc0L |#$R@@265|) $h@@34) ($IsAlloc |f#0@@46| (Tclass._System.___hPartialFunc0L |#$R@@265|) $h@@34))) :qid |unknown.0:0| :skolemid |1268| :pattern ( ($IsAlloc |f#0@@46| (Tclass._System.___hTotalFunc0L |#$R@@265|) $h@@34)) )))
(assert (forall ((arg0@@394 T@U) (arg1@@172 T@U) (arg2@@121 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO arg0@@394 arg1@@172 arg2@@121)) TyType) :qid |funType:Tclass._System.___hFunc2LOO| :pattern ( (Tclass._System.___hFunc2LOO arg0@@394 arg1@@172 arg2@@121)) )))
(assert (forall ((|#$T0@@240| T@U) (|#$T1@@208| T@U) (|#$R@@266| T@U) ) (!  (=> (and (and (= (type |#$T0@@240|) TyType) (= (type |#$T1@@208|) TyType)) (= (type |#$R@@266|) TyType)) (and (= (Tag (Tclass._System.___hFunc2LOO |#$T0@@240| |#$T1@@208| |#$R@@266|)) Tagclass._System.___hFunc2LOO) (= (TagFamily (Tclass._System.___hFunc2LOO |#$T0@@240| |#$T1@@208| |#$R@@266|)) |tytagFamily$_#Func2LOO|))) :qid |unknown.0:0| :skolemid |1269| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@240| |#$T1@@208| |#$R@@266|)) )))
(assert (forall ((arg0@@395 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO_0 arg0@@395)) TyType) :qid |funType:Tclass._System.___hFunc2LOO_0| :pattern ( (Tclass._System.___hFunc2LOO_0 arg0@@395)) )))
(assert (forall ((|#$T0@@241| T@U) (|#$T1@@209| T@U) (|#$R@@267| T@U) ) (!  (=> (and (and (= (type |#$T0@@241|) TyType) (= (type |#$T1@@209|) TyType)) (= (type |#$R@@267|) TyType)) (= (Tclass._System.___hFunc2LOO_0 (Tclass._System.___hFunc2LOO |#$T0@@241| |#$T1@@209| |#$R@@267|)) |#$T0@@241|)) :qid |unknown.0:0| :skolemid |1270| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@241| |#$T1@@209| |#$R@@267|)) )))
(assert (forall ((arg0@@396 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO_1 arg0@@396)) TyType) :qid |funType:Tclass._System.___hFunc2LOO_1| :pattern ( (Tclass._System.___hFunc2LOO_1 arg0@@396)) )))
(assert (forall ((|#$T0@@242| T@U) (|#$T1@@210| T@U) (|#$R@@268| T@U) ) (!  (=> (and (and (= (type |#$T0@@242|) TyType) (= (type |#$T1@@210|) TyType)) (= (type |#$R@@268|) TyType)) (= (Tclass._System.___hFunc2LOO_1 (Tclass._System.___hFunc2LOO |#$T0@@242| |#$T1@@210| |#$R@@268|)) |#$T1@@210|)) :qid |unknown.0:0| :skolemid |1271| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@242| |#$T1@@210| |#$R@@268|)) )))
(assert (forall ((arg0@@397 T@U) ) (! (= (type (Tclass._System.___hFunc2LOO_2 arg0@@397)) TyType) :qid |funType:Tclass._System.___hFunc2LOO_2| :pattern ( (Tclass._System.___hFunc2LOO_2 arg0@@397)) )))
(assert (forall ((|#$T0@@243| T@U) (|#$T1@@211| T@U) (|#$R@@269| T@U) ) (!  (=> (and (and (= (type |#$T0@@243|) TyType) (= (type |#$T1@@211|) TyType)) (= (type |#$R@@269|) TyType)) (= (Tclass._System.___hFunc2LOO_2 (Tclass._System.___hFunc2LOO |#$T0@@243| |#$T1@@211| |#$R@@269|)) |#$R@@269|)) :qid |unknown.0:0| :skolemid |1272| :pattern ( (Tclass._System.___hFunc2LOO |#$T0@@243| |#$T1@@211| |#$R@@269|)) )))
(assert (forall ((|#$T0@@244| T@U) (|#$T1@@212| T@U) (|#$R@@270| T@U) (bx@@116 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@244|) TyType) (= (type |#$T1@@212|) TyType)) (= (type |#$R@@270|) TyType)) (= (type bx@@116) BoxType)) ($IsBox bx@@116 (Tclass._System.___hFunc2LOO |#$T0@@244| |#$T1@@212| |#$R@@270|))) (and (= ($Box ($Unbox HandleTypeType bx@@116)) bx@@116) ($Is ($Unbox HandleTypeType bx@@116) (Tclass._System.___hFunc2LOO |#$T0@@244| |#$T1@@212| |#$R@@270|)))) :qid |unknown.0:0| :skolemid |1273| :pattern ( ($IsBox bx@@116 (Tclass._System.___hFunc2LOO |#$T0@@244| |#$T1@@212| |#$R@@270|))) )))
(assert (forall ((arg0@@398 T@U) (arg1@@173 T@U) (arg2@@122 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO arg0@@398 arg1@@173 arg2@@122)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO| :pattern ( (Tclass._System.___hPartialFunc2LOO arg0@@398 arg1@@173 arg2@@122)) )))
(assert (forall ((|#$T0@@245| T@U) (|#$T1@@213| T@U) (|#$R@@271| T@U) ) (!  (=> (and (and (= (type |#$T0@@245|) TyType) (= (type |#$T1@@213|) TyType)) (= (type |#$R@@271|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2LOO |#$T0@@245| |#$T1@@213| |#$R@@271|)) Tagclass._System.___hPartialFunc2LOO) (= (TagFamily (Tclass._System.___hPartialFunc2LOO |#$T0@@245| |#$T1@@213| |#$R@@271|)) |tytagFamily$_#PartialFunc2LOO|))) :qid |unknown.0:0| :skolemid |1274| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@245| |#$T1@@213| |#$R@@271|)) )))
(assert (forall ((arg0@@399 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO_0 arg0@@399)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO_0| :pattern ( (Tclass._System.___hPartialFunc2LOO_0 arg0@@399)) )))
(assert (forall ((|#$T0@@246| T@U) (|#$T1@@214| T@U) (|#$R@@272| T@U) ) (!  (=> (and (and (= (type |#$T0@@246|) TyType) (= (type |#$T1@@214|) TyType)) (= (type |#$R@@272|) TyType)) (= (Tclass._System.___hPartialFunc2LOO_0 (Tclass._System.___hPartialFunc2LOO |#$T0@@246| |#$T1@@214| |#$R@@272|)) |#$T0@@246|)) :qid |unknown.0:0| :skolemid |1275| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@246| |#$T1@@214| |#$R@@272|)) )))
(assert (forall ((arg0@@400 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO_1 arg0@@400)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO_1| :pattern ( (Tclass._System.___hPartialFunc2LOO_1 arg0@@400)) )))
(assert (forall ((|#$T0@@247| T@U) (|#$T1@@215| T@U) (|#$R@@273| T@U) ) (!  (=> (and (and (= (type |#$T0@@247|) TyType) (= (type |#$T1@@215|) TyType)) (= (type |#$R@@273|) TyType)) (= (Tclass._System.___hPartialFunc2LOO_1 (Tclass._System.___hPartialFunc2LOO |#$T0@@247| |#$T1@@215| |#$R@@273|)) |#$T1@@215|)) :qid |unknown.0:0| :skolemid |1276| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@247| |#$T1@@215| |#$R@@273|)) )))
(assert (forall ((arg0@@401 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2LOO_2 arg0@@401)) TyType) :qid |funType:Tclass._System.___hPartialFunc2LOO_2| :pattern ( (Tclass._System.___hPartialFunc2LOO_2 arg0@@401)) )))
(assert (forall ((|#$T0@@248| T@U) (|#$T1@@216| T@U) (|#$R@@274| T@U) ) (!  (=> (and (and (= (type |#$T0@@248|) TyType) (= (type |#$T1@@216|) TyType)) (= (type |#$R@@274|) TyType)) (= (Tclass._System.___hPartialFunc2LOO_2 (Tclass._System.___hPartialFunc2LOO |#$T0@@248| |#$T1@@216| |#$R@@274|)) |#$R@@274|)) :qid |unknown.0:0| :skolemid |1277| :pattern ( (Tclass._System.___hPartialFunc2LOO |#$T0@@248| |#$T1@@216| |#$R@@274|)) )))
(assert (forall ((|#$T0@@249| T@U) (|#$T1@@217| T@U) (|#$R@@275| T@U) (bx@@117 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@249|) TyType) (= (type |#$T1@@217|) TyType)) (= (type |#$R@@275|) TyType)) (= (type bx@@117) BoxType)) ($IsBox bx@@117 (Tclass._System.___hPartialFunc2LOO |#$T0@@249| |#$T1@@217| |#$R@@275|))) (and (= ($Box ($Unbox HandleTypeType bx@@117)) bx@@117) ($Is ($Unbox HandleTypeType bx@@117) (Tclass._System.___hPartialFunc2LOO |#$T0@@249| |#$T1@@217| |#$R@@275|)))) :qid |unknown.0:0| :skolemid |1278| :pattern ( ($IsBox bx@@117 (Tclass._System.___hPartialFunc2LOO |#$T0@@249| |#$T1@@217| |#$R@@275|))) )))
(assert (forall ((|#$T0@@250| T@U) (|#$T1@@218| T@U) (|#$R@@276| T@U) (|f#0@@47| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@250|) TyType) (= (type |#$T1@@218|) TyType)) (= (type |#$R@@276|) TyType)) (= (type |f#0@@47|) HandleTypeType)) (= ($Is |f#0@@47| (Tclass._System.___hPartialFunc2LOO |#$T0@@250| |#$T1@@218| |#$R@@276|))  (and ($Is |f#0@@47| (Tclass._System.___hFunc2LOO |#$T0@@250| |#$T1@@218| |#$R@@276|)) (forall ((|x0#0@@19| T@U) (|x1#0@@15| T@U) ) (!  (=> (and (and (= (type |x0#0@@19|) BoxType) (= (type |x1#0@@15|) BoxType)) (and ($IsBox |x0#0@@19| |#$T0@@250|) ($IsBox |x1#0@@15| |#$T1@@218|))) (|Set#Equal| (Reads2 |#$T0@@250| |#$T1@@218| |#$R@@276| $OneHeap |f#0@@47| |x0#0@@19| |x1#0@@15|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1279| :no-pattern (type |x0#0@@19|) :no-pattern (type |x1#0@@15|) :no-pattern (U_2_int |x0#0@@19|) :no-pattern (U_2_bool |x0#0@@19|) :no-pattern (U_2_int |x1#0@@15|) :no-pattern (U_2_bool |x1#0@@15|) ))))) :qid |unknown.0:0| :skolemid |1280| :pattern ( ($Is |f#0@@47| (Tclass._System.___hPartialFunc2LOO |#$T0@@250| |#$T1@@218| |#$R@@276|))) )))
(assert (forall ((|#$T0@@251| T@U) (|#$T1@@219| T@U) (|#$R@@277| T@U) (|f#0@@48| T@U) ($h@@35 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@251|) TyType) (= (type |#$T1@@219|) TyType)) (= (type |#$R@@277|) TyType)) (= (type |f#0@@48|) HandleTypeType)) (= (type $h@@35) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@48| (Tclass._System.___hPartialFunc2LOO |#$T0@@251| |#$T1@@219| |#$R@@277|) $h@@35) ($IsAlloc |f#0@@48| (Tclass._System.___hFunc2LOO |#$T0@@251| |#$T1@@219| |#$R@@277|) $h@@35))) :qid |unknown.0:0| :skolemid |1281| :pattern ( ($IsAlloc |f#0@@48| (Tclass._System.___hPartialFunc2LOO |#$T0@@251| |#$T1@@219| |#$R@@277|) $h@@35)) )))
(assert (forall ((arg0@@402 T@U) (arg1@@174 T@U) (arg2@@123 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO arg0@@402 arg1@@174 arg2@@123)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO| :pattern ( (Tclass._System.___hTotalFunc2LOO arg0@@402 arg1@@174 arg2@@123)) )))
(assert (forall ((|#$T0@@252| T@U) (|#$T1@@220| T@U) (|#$R@@278| T@U) ) (!  (=> (and (and (= (type |#$T0@@252|) TyType) (= (type |#$T1@@220|) TyType)) (= (type |#$R@@278|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2LOO |#$T0@@252| |#$T1@@220| |#$R@@278|)) Tagclass._System.___hTotalFunc2LOO) (= (TagFamily (Tclass._System.___hTotalFunc2LOO |#$T0@@252| |#$T1@@220| |#$R@@278|)) |tytagFamily$_#TotalFunc2LOO|))) :qid |unknown.0:0| :skolemid |1282| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@252| |#$T1@@220| |#$R@@278|)) )))
(assert (forall ((arg0@@403 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO_0 arg0@@403)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO_0| :pattern ( (Tclass._System.___hTotalFunc2LOO_0 arg0@@403)) )))
(assert (forall ((|#$T0@@253| T@U) (|#$T1@@221| T@U) (|#$R@@279| T@U) ) (!  (=> (and (and (= (type |#$T0@@253|) TyType) (= (type |#$T1@@221|) TyType)) (= (type |#$R@@279|) TyType)) (= (Tclass._System.___hTotalFunc2LOO_0 (Tclass._System.___hTotalFunc2LOO |#$T0@@253| |#$T1@@221| |#$R@@279|)) |#$T0@@253|)) :qid |unknown.0:0| :skolemid |1283| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@253| |#$T1@@221| |#$R@@279|)) )))
(assert (forall ((arg0@@404 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO_1 arg0@@404)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO_1| :pattern ( (Tclass._System.___hTotalFunc2LOO_1 arg0@@404)) )))
(assert (forall ((|#$T0@@254| T@U) (|#$T1@@222| T@U) (|#$R@@280| T@U) ) (!  (=> (and (and (= (type |#$T0@@254|) TyType) (= (type |#$T1@@222|) TyType)) (= (type |#$R@@280|) TyType)) (= (Tclass._System.___hTotalFunc2LOO_1 (Tclass._System.___hTotalFunc2LOO |#$T0@@254| |#$T1@@222| |#$R@@280|)) |#$T1@@222|)) :qid |unknown.0:0| :skolemid |1284| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@254| |#$T1@@222| |#$R@@280|)) )))
(assert (forall ((arg0@@405 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2LOO_2 arg0@@405)) TyType) :qid |funType:Tclass._System.___hTotalFunc2LOO_2| :pattern ( (Tclass._System.___hTotalFunc2LOO_2 arg0@@405)) )))
(assert (forall ((|#$T0@@255| T@U) (|#$T1@@223| T@U) (|#$R@@281| T@U) ) (!  (=> (and (and (= (type |#$T0@@255|) TyType) (= (type |#$T1@@223|) TyType)) (= (type |#$R@@281|) TyType)) (= (Tclass._System.___hTotalFunc2LOO_2 (Tclass._System.___hTotalFunc2LOO |#$T0@@255| |#$T1@@223| |#$R@@281|)) |#$R@@281|)) :qid |unknown.0:0| :skolemid |1285| :pattern ( (Tclass._System.___hTotalFunc2LOO |#$T0@@255| |#$T1@@223| |#$R@@281|)) )))
(assert (forall ((|#$T0@@256| T@U) (|#$T1@@224| T@U) (|#$R@@282| T@U) (bx@@118 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@256|) TyType) (= (type |#$T1@@224|) TyType)) (= (type |#$R@@282|) TyType)) (= (type bx@@118) BoxType)) ($IsBox bx@@118 (Tclass._System.___hTotalFunc2LOO |#$T0@@256| |#$T1@@224| |#$R@@282|))) (and (= ($Box ($Unbox HandleTypeType bx@@118)) bx@@118) ($Is ($Unbox HandleTypeType bx@@118) (Tclass._System.___hTotalFunc2LOO |#$T0@@256| |#$T1@@224| |#$R@@282|)))) :qid |unknown.0:0| :skolemid |1286| :pattern ( ($IsBox bx@@118 (Tclass._System.___hTotalFunc2LOO |#$T0@@256| |#$T1@@224| |#$R@@282|))) )))
(assert (forall ((|#$T0@@257| T@U) (|#$T1@@225| T@U) (|#$R@@283| T@U) (|f#0@@49| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@257|) TyType) (= (type |#$T1@@225|) TyType)) (= (type |#$R@@283|) TyType)) (= (type |f#0@@49|) HandleTypeType)) (= ($Is |f#0@@49| (Tclass._System.___hTotalFunc2LOO |#$T0@@257| |#$T1@@225| |#$R@@283|))  (and ($Is |f#0@@49| (Tclass._System.___hPartialFunc2LOO |#$T0@@257| |#$T1@@225| |#$R@@283|)) (forall ((|x0#0@@20| T@U) (|x1#0@@16| T@U) ) (!  (=> (and (and (= (type |x0#0@@20|) BoxType) (= (type |x1#0@@16|) BoxType)) (and ($IsBox |x0#0@@20| |#$T0@@257|) ($IsBox |x1#0@@16| |#$T1@@225|))) (Requires2 |#$T0@@257| |#$T1@@225| |#$R@@283| $OneHeap |f#0@@49| |x0#0@@20| |x1#0@@16|)) :qid |unknown.0:0| :skolemid |1287| :no-pattern (type |x0#0@@20|) :no-pattern (type |x1#0@@16|) :no-pattern (U_2_int |x0#0@@20|) :no-pattern (U_2_bool |x0#0@@20|) :no-pattern (U_2_int |x1#0@@16|) :no-pattern (U_2_bool |x1#0@@16|) ))))) :qid |unknown.0:0| :skolemid |1288| :pattern ( ($Is |f#0@@49| (Tclass._System.___hTotalFunc2LOO |#$T0@@257| |#$T1@@225| |#$R@@283|))) )))
(assert (forall ((|#$T0@@258| T@U) (|#$T1@@226| T@U) (|#$R@@284| T@U) (|f#0@@50| T@U) ($h@@36 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@258|) TyType) (= (type |#$T1@@226|) TyType)) (= (type |#$R@@284|) TyType)) (= (type |f#0@@50|) HandleTypeType)) (= (type $h@@36) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@50| (Tclass._System.___hTotalFunc2LOO |#$T0@@258| |#$T1@@226| |#$R@@284|) $h@@36) ($IsAlloc |f#0@@50| (Tclass._System.___hPartialFunc2LOO |#$T0@@258| |#$T1@@226| |#$R@@284|) $h@@36))) :qid |unknown.0:0| :skolemid |1289| :pattern ( ($IsAlloc |f#0@@50| (Tclass._System.___hTotalFunc2LOO |#$T0@@258| |#$T1@@226| |#$R@@284|) $h@@36)) )))
(assert (= (type |#_System._tuple#0._#Make0|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#_System._tuple#0._#Make0|) |##_System._tuple#0._#Make0|))
(assert (forall ((d@@6 T@U) ) (!  (=> (= (type d@@6) DatatypeTypeType) (= (_System.Tuple0.___hMake0_q d@@6) (= (DatatypeCtorId d@@6) |##_System._tuple#0._#Make0|))) :qid |unknown.0:0| :skolemid |1290| :pattern ( (_System.Tuple0.___hMake0_q d@@6)) )))
(assert (forall ((d@@7 T@U) ) (!  (=> (and (= (type d@@7) DatatypeTypeType) (_System.Tuple0.___hMake0_q d@@7)) (= d@@7 |#_System._tuple#0._#Make0|)) :qid |unknown.0:0| :skolemid |1291| :pattern ( (_System.Tuple0.___hMake0_q d@@7)) )))
(assert (= (type Tclass._System.Tuple0) TyType))
(assert (= (Tag Tclass._System.Tuple0) Tagclass._System.Tuple0))
(assert (= (TagFamily Tclass._System.Tuple0) |tytagFamily$_tuple#0|))
(assert (forall ((bx@@119 T@U) ) (!  (=> (and (= (type bx@@119) BoxType) ($IsBox bx@@119 Tclass._System.Tuple0)) (and (= ($Box ($Unbox DatatypeTypeType bx@@119)) bx@@119) ($Is ($Unbox DatatypeTypeType bx@@119) Tclass._System.Tuple0))) :qid |unknown.0:0| :skolemid |1292| :pattern ( ($IsBox bx@@119 Tclass._System.Tuple0)) )))
(assert ($Is |#_System._tuple#0._#Make0| Tclass._System.Tuple0))
(assert (forall (($h@@37 T@U) ) (!  (=> (and (= (type $h@@37) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@37)) ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@37)) :qid |DafnyPreludebpl.545:12| :skolemid |1293| :pattern ( ($IsAlloc |#_System._tuple#0._#Make0| Tclass._System.Tuple0 $h@@37)) )))
(assert (= |#_System._tuple#0._#Make0| (Lit |#_System._tuple#0._#Make0|)))
(assert (forall ((d@@8 T@U) ) (!  (=> (and (= (type d@@8) DatatypeTypeType) (|$IsA#_System.Tuple0| d@@8)) (_System.Tuple0.___hMake0_q d@@8)) :qid |unknown.0:0| :skolemid |1294| :pattern ( (|$IsA#_System.Tuple0| d@@8)) )))
(assert (forall ((d@@9 T@U) ) (!  (=> (and (= (type d@@9) DatatypeTypeType) ($Is d@@9 Tclass._System.Tuple0)) (_System.Tuple0.___hMake0_q d@@9)) :qid |unknown.0:0| :skolemid |1295| :pattern ( (_System.Tuple0.___hMake0_q d@@9) ($Is d@@9 Tclass._System.Tuple0)) )))
(assert (forall ((a@@132 T@U) (b@@63 T@U) ) (!  (=> (and (and (= (type a@@132) DatatypeTypeType) (= (type b@@63) DatatypeTypeType)) true) (= (|_System.Tuple0#Equal| a@@132 b@@63) true)) :qid |unknown.0:0| :skolemid |1296| :pattern ( (|_System.Tuple0#Equal| a@@132 b@@63)) )))
(assert (forall ((a@@133 T@U) (b@@64 T@U) ) (!  (=> (and (= (type a@@133) DatatypeTypeType) (= (type b@@64) DatatypeTypeType)) (= (|_System.Tuple0#Equal| a@@133 b@@64) (= a@@133 b@@64))) :qid |unknown.0:0| :skolemid |1297| :pattern ( (|_System.Tuple0#Equal| a@@133 b@@64)) )))
(assert (forall ((arg0@@406 T@U) (arg1@@175 T@U) ) (! (= (type (Tclass._System.___hFunc1OL arg0@@406 arg1@@175)) TyType) :qid |funType:Tclass._System.___hFunc1OL| :pattern ( (Tclass._System.___hFunc1OL arg0@@406 arg1@@175)) )))
(assert (forall ((|#$T0@@259| T@U) (|#$R@@285| T@U) ) (!  (=> (and (= (type |#$T0@@259|) TyType) (= (type |#$R@@285|) TyType)) (and (= (Tag (Tclass._System.___hFunc1OL |#$T0@@259| |#$R@@285|)) Tagclass._System.___hFunc1OL) (= (TagFamily (Tclass._System.___hFunc1OL |#$T0@@259| |#$R@@285|)) |tytagFamily$_#Func1OL|))) :qid |unknown.0:0| :skolemid |1298| :pattern ( (Tclass._System.___hFunc1OL |#$T0@@259| |#$R@@285|)) )))
(assert (forall ((arg0@@407 T@U) ) (! (= (type (Tclass._System.___hFunc1OL_0 arg0@@407)) TyType) :qid |funType:Tclass._System.___hFunc1OL_0| :pattern ( (Tclass._System.___hFunc1OL_0 arg0@@407)) )))
(assert (forall ((|#$T0@@260| T@U) (|#$R@@286| T@U) ) (!  (=> (and (= (type |#$T0@@260|) TyType) (= (type |#$R@@286|) TyType)) (= (Tclass._System.___hFunc1OL_0 (Tclass._System.___hFunc1OL |#$T0@@260| |#$R@@286|)) |#$T0@@260|)) :qid |unknown.0:0| :skolemid |1299| :pattern ( (Tclass._System.___hFunc1OL |#$T0@@260| |#$R@@286|)) )))
(assert (forall ((arg0@@408 T@U) ) (! (= (type (Tclass._System.___hFunc1OL_1 arg0@@408)) TyType) :qid |funType:Tclass._System.___hFunc1OL_1| :pattern ( (Tclass._System.___hFunc1OL_1 arg0@@408)) )))
(assert (forall ((|#$T0@@261| T@U) (|#$R@@287| T@U) ) (!  (=> (and (= (type |#$T0@@261|) TyType) (= (type |#$R@@287|) TyType)) (= (Tclass._System.___hFunc1OL_1 (Tclass._System.___hFunc1OL |#$T0@@261| |#$R@@287|)) |#$R@@287|)) :qid |unknown.0:0| :skolemid |1300| :pattern ( (Tclass._System.___hFunc1OL |#$T0@@261| |#$R@@287|)) )))
(assert (forall ((|#$T0@@262| T@U) (|#$R@@288| T@U) (bx@@120 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@262|) TyType) (= (type |#$R@@288|) TyType)) (= (type bx@@120) BoxType)) ($IsBox bx@@120 (Tclass._System.___hFunc1OL |#$T0@@262| |#$R@@288|))) (and (= ($Box ($Unbox HandleTypeType bx@@120)) bx@@120) ($Is ($Unbox HandleTypeType bx@@120) (Tclass._System.___hFunc1OL |#$T0@@262| |#$R@@288|)))) :qid |unknown.0:0| :skolemid |1301| :pattern ( ($IsBox bx@@120 (Tclass._System.___hFunc1OL |#$T0@@262| |#$R@@288|))) )))
(assert (forall ((arg0@@409 T@U) (arg1@@176 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OL arg0@@409 arg1@@176)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OL| :pattern ( (Tclass._System.___hPartialFunc1OL arg0@@409 arg1@@176)) )))
(assert (forall ((|#$T0@@263| T@U) (|#$R@@289| T@U) ) (!  (=> (and (= (type |#$T0@@263|) TyType) (= (type |#$R@@289|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1OL |#$T0@@263| |#$R@@289|)) Tagclass._System.___hPartialFunc1OL) (= (TagFamily (Tclass._System.___hPartialFunc1OL |#$T0@@263| |#$R@@289|)) |tytagFamily$_#PartialFunc1OL|))) :qid |unknown.0:0| :skolemid |1302| :pattern ( (Tclass._System.___hPartialFunc1OL |#$T0@@263| |#$R@@289|)) )))
(assert (forall ((arg0@@410 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OL_0 arg0@@410)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OL_0| :pattern ( (Tclass._System.___hPartialFunc1OL_0 arg0@@410)) )))
(assert (forall ((|#$T0@@264| T@U) (|#$R@@290| T@U) ) (!  (=> (and (= (type |#$T0@@264|) TyType) (= (type |#$R@@290|) TyType)) (= (Tclass._System.___hPartialFunc1OL_0 (Tclass._System.___hPartialFunc1OL |#$T0@@264| |#$R@@290|)) |#$T0@@264|)) :qid |unknown.0:0| :skolemid |1303| :pattern ( (Tclass._System.___hPartialFunc1OL |#$T0@@264| |#$R@@290|)) )))
(assert (forall ((arg0@@411 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1OL_1 arg0@@411)) TyType) :qid |funType:Tclass._System.___hPartialFunc1OL_1| :pattern ( (Tclass._System.___hPartialFunc1OL_1 arg0@@411)) )))
(assert (forall ((|#$T0@@265| T@U) (|#$R@@291| T@U) ) (!  (=> (and (= (type |#$T0@@265|) TyType) (= (type |#$R@@291|) TyType)) (= (Tclass._System.___hPartialFunc1OL_1 (Tclass._System.___hPartialFunc1OL |#$T0@@265| |#$R@@291|)) |#$R@@291|)) :qid |unknown.0:0| :skolemid |1304| :pattern ( (Tclass._System.___hPartialFunc1OL |#$T0@@265| |#$R@@291|)) )))
(assert (forall ((|#$T0@@266| T@U) (|#$R@@292| T@U) (bx@@121 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@266|) TyType) (= (type |#$R@@292|) TyType)) (= (type bx@@121) BoxType)) ($IsBox bx@@121 (Tclass._System.___hPartialFunc1OL |#$T0@@266| |#$R@@292|))) (and (= ($Box ($Unbox HandleTypeType bx@@121)) bx@@121) ($Is ($Unbox HandleTypeType bx@@121) (Tclass._System.___hPartialFunc1OL |#$T0@@266| |#$R@@292|)))) :qid |unknown.0:0| :skolemid |1305| :pattern ( ($IsBox bx@@121 (Tclass._System.___hPartialFunc1OL |#$T0@@266| |#$R@@292|))) )))
(assert (forall ((|#$T0@@267| T@U) (|#$R@@293| T@U) (|f#0@@51| T@U) ) (!  (=> (and (and (= (type |#$T0@@267|) TyType) (= (type |#$R@@293|) TyType)) (= (type |f#0@@51|) HandleTypeType)) (= ($Is |f#0@@51| (Tclass._System.___hPartialFunc1OL |#$T0@@267| |#$R@@293|))  (and ($Is |f#0@@51| (Tclass._System.___hFunc1OL |#$T0@@267| |#$R@@293|)) (forall ((|x0#0@@21| T@U) ) (!  (=> (and (= (type |x0#0@@21|) BoxType) ($IsBox |x0#0@@21| |#$T0@@267|)) (|Set#Equal| (Reads1 |#$T0@@267| |#$R@@293| $OneHeap |f#0@@51| |x0#0@@21|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1306| :no-pattern (type |x0#0@@21|) :no-pattern (U_2_int |x0#0@@21|) :no-pattern (U_2_bool |x0#0@@21|) ))))) :qid |unknown.0:0| :skolemid |1307| :pattern ( ($Is |f#0@@51| (Tclass._System.___hPartialFunc1OL |#$T0@@267| |#$R@@293|))) )))
(assert (forall ((|#$T0@@268| T@U) (|#$R@@294| T@U) (|f#0@@52| T@U) ($h@@38 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@268|) TyType) (= (type |#$R@@294|) TyType)) (= (type |f#0@@52|) HandleTypeType)) (= (type $h@@38) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@52| (Tclass._System.___hPartialFunc1OL |#$T0@@268| |#$R@@294|) $h@@38) ($IsAlloc |f#0@@52| (Tclass._System.___hFunc1OL |#$T0@@268| |#$R@@294|) $h@@38))) :qid |unknown.0:0| :skolemid |1308| :pattern ( ($IsAlloc |f#0@@52| (Tclass._System.___hPartialFunc1OL |#$T0@@268| |#$R@@294|) $h@@38)) )))
(assert (forall ((arg0@@412 T@U) (arg1@@177 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OL arg0@@412 arg1@@177)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OL| :pattern ( (Tclass._System.___hTotalFunc1OL arg0@@412 arg1@@177)) )))
(assert (forall ((|#$T0@@269| T@U) (|#$R@@295| T@U) ) (!  (=> (and (= (type |#$T0@@269|) TyType) (= (type |#$R@@295|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1OL |#$T0@@269| |#$R@@295|)) Tagclass._System.___hTotalFunc1OL) (= (TagFamily (Tclass._System.___hTotalFunc1OL |#$T0@@269| |#$R@@295|)) |tytagFamily$_#TotalFunc1OL|))) :qid |unknown.0:0| :skolemid |1309| :pattern ( (Tclass._System.___hTotalFunc1OL |#$T0@@269| |#$R@@295|)) )))
(assert (forall ((arg0@@413 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OL_0 arg0@@413)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OL_0| :pattern ( (Tclass._System.___hTotalFunc1OL_0 arg0@@413)) )))
(assert (forall ((|#$T0@@270| T@U) (|#$R@@296| T@U) ) (!  (=> (and (= (type |#$T0@@270|) TyType) (= (type |#$R@@296|) TyType)) (= (Tclass._System.___hTotalFunc1OL_0 (Tclass._System.___hTotalFunc1OL |#$T0@@270| |#$R@@296|)) |#$T0@@270|)) :qid |unknown.0:0| :skolemid |1310| :pattern ( (Tclass._System.___hTotalFunc1OL |#$T0@@270| |#$R@@296|)) )))
(assert (forall ((arg0@@414 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1OL_1 arg0@@414)) TyType) :qid |funType:Tclass._System.___hTotalFunc1OL_1| :pattern ( (Tclass._System.___hTotalFunc1OL_1 arg0@@414)) )))
(assert (forall ((|#$T0@@271| T@U) (|#$R@@297| T@U) ) (!  (=> (and (= (type |#$T0@@271|) TyType) (= (type |#$R@@297|) TyType)) (= (Tclass._System.___hTotalFunc1OL_1 (Tclass._System.___hTotalFunc1OL |#$T0@@271| |#$R@@297|)) |#$R@@297|)) :qid |unknown.0:0| :skolemid |1311| :pattern ( (Tclass._System.___hTotalFunc1OL |#$T0@@271| |#$R@@297|)) )))
(assert (forall ((|#$T0@@272| T@U) (|#$R@@298| T@U) (bx@@122 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@272|) TyType) (= (type |#$R@@298|) TyType)) (= (type bx@@122) BoxType)) ($IsBox bx@@122 (Tclass._System.___hTotalFunc1OL |#$T0@@272| |#$R@@298|))) (and (= ($Box ($Unbox HandleTypeType bx@@122)) bx@@122) ($Is ($Unbox HandleTypeType bx@@122) (Tclass._System.___hTotalFunc1OL |#$T0@@272| |#$R@@298|)))) :qid |unknown.0:0| :skolemid |1312| :pattern ( ($IsBox bx@@122 (Tclass._System.___hTotalFunc1OL |#$T0@@272| |#$R@@298|))) )))
(assert (forall ((|#$T0@@273| T@U) (|#$R@@299| T@U) (|f#0@@53| T@U) ) (!  (=> (and (and (= (type |#$T0@@273|) TyType) (= (type |#$R@@299|) TyType)) (= (type |f#0@@53|) HandleTypeType)) (= ($Is |f#0@@53| (Tclass._System.___hTotalFunc1OL |#$T0@@273| |#$R@@299|))  (and ($Is |f#0@@53| (Tclass._System.___hPartialFunc1OL |#$T0@@273| |#$R@@299|)) (forall ((|x0#0@@22| T@U) ) (!  (=> (and (= (type |x0#0@@22|) BoxType) ($IsBox |x0#0@@22| |#$T0@@273|)) (Requires1 |#$T0@@273| |#$R@@299| $OneHeap |f#0@@53| |x0#0@@22|)) :qid |unknown.0:0| :skolemid |1313| :no-pattern (type |x0#0@@22|) :no-pattern (U_2_int |x0#0@@22|) :no-pattern (U_2_bool |x0#0@@22|) ))))) :qid |unknown.0:0| :skolemid |1314| :pattern ( ($Is |f#0@@53| (Tclass._System.___hTotalFunc1OL |#$T0@@273| |#$R@@299|))) )))
(assert (forall ((|#$T0@@274| T@U) (|#$R@@300| T@U) (|f#0@@54| T@U) ($h@@39 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@274|) TyType) (= (type |#$R@@300|) TyType)) (= (type |f#0@@54|) HandleTypeType)) (= (type $h@@39) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@54| (Tclass._System.___hTotalFunc1OL |#$T0@@274| |#$R@@300|) $h@@39) ($IsAlloc |f#0@@54| (Tclass._System.___hPartialFunc1OL |#$T0@@274| |#$R@@300|) $h@@39))) :qid |unknown.0:0| :skolemid |1315| :pattern ( ($IsAlloc |f#0@@54| (Tclass._System.___hTotalFunc1OL |#$T0@@274| |#$R@@300|) $h@@39)) )))
(assert (forall ((arg0@@415 T@U) (arg1@@178 T@U) ) (! (= (type (Tclass._System.___hFunc1LO arg0@@415 arg1@@178)) TyType) :qid |funType:Tclass._System.___hFunc1LO| :pattern ( (Tclass._System.___hFunc1LO arg0@@415 arg1@@178)) )))
(assert (forall ((|#$T0@@275| T@U) (|#$R@@301| T@U) ) (!  (=> (and (= (type |#$T0@@275|) TyType) (= (type |#$R@@301|) TyType)) (and (= (Tag (Tclass._System.___hFunc1LO |#$T0@@275| |#$R@@301|)) Tagclass._System.___hFunc1LO) (= (TagFamily (Tclass._System.___hFunc1LO |#$T0@@275| |#$R@@301|)) |tytagFamily$_#Func1LO|))) :qid |unknown.0:0| :skolemid |1316| :pattern ( (Tclass._System.___hFunc1LO |#$T0@@275| |#$R@@301|)) )))
(assert (forall ((arg0@@416 T@U) ) (! (= (type (Tclass._System.___hFunc1LO_0 arg0@@416)) TyType) :qid |funType:Tclass._System.___hFunc1LO_0| :pattern ( (Tclass._System.___hFunc1LO_0 arg0@@416)) )))
(assert (forall ((|#$T0@@276| T@U) (|#$R@@302| T@U) ) (!  (=> (and (= (type |#$T0@@276|) TyType) (= (type |#$R@@302|) TyType)) (= (Tclass._System.___hFunc1LO_0 (Tclass._System.___hFunc1LO |#$T0@@276| |#$R@@302|)) |#$T0@@276|)) :qid |unknown.0:0| :skolemid |1317| :pattern ( (Tclass._System.___hFunc1LO |#$T0@@276| |#$R@@302|)) )))
(assert (forall ((arg0@@417 T@U) ) (! (= (type (Tclass._System.___hFunc1LO_1 arg0@@417)) TyType) :qid |funType:Tclass._System.___hFunc1LO_1| :pattern ( (Tclass._System.___hFunc1LO_1 arg0@@417)) )))
(assert (forall ((|#$T0@@277| T@U) (|#$R@@303| T@U) ) (!  (=> (and (= (type |#$T0@@277|) TyType) (= (type |#$R@@303|) TyType)) (= (Tclass._System.___hFunc1LO_1 (Tclass._System.___hFunc1LO |#$T0@@277| |#$R@@303|)) |#$R@@303|)) :qid |unknown.0:0| :skolemid |1318| :pattern ( (Tclass._System.___hFunc1LO |#$T0@@277| |#$R@@303|)) )))
(assert (forall ((|#$T0@@278| T@U) (|#$R@@304| T@U) (bx@@123 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@278|) TyType) (= (type |#$R@@304|) TyType)) (= (type bx@@123) BoxType)) ($IsBox bx@@123 (Tclass._System.___hFunc1LO |#$T0@@278| |#$R@@304|))) (and (= ($Box ($Unbox HandleTypeType bx@@123)) bx@@123) ($Is ($Unbox HandleTypeType bx@@123) (Tclass._System.___hFunc1LO |#$T0@@278| |#$R@@304|)))) :qid |unknown.0:0| :skolemid |1319| :pattern ( ($IsBox bx@@123 (Tclass._System.___hFunc1LO |#$T0@@278| |#$R@@304|))) )))
(assert (forall ((arg0@@418 T@U) (arg1@@179 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LO arg0@@418 arg1@@179)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LO| :pattern ( (Tclass._System.___hPartialFunc1LO arg0@@418 arg1@@179)) )))
(assert (forall ((|#$T0@@279| T@U) (|#$R@@305| T@U) ) (!  (=> (and (= (type |#$T0@@279|) TyType) (= (type |#$R@@305|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1LO |#$T0@@279| |#$R@@305|)) Tagclass._System.___hPartialFunc1LO) (= (TagFamily (Tclass._System.___hPartialFunc1LO |#$T0@@279| |#$R@@305|)) |tytagFamily$_#PartialFunc1LO|))) :qid |unknown.0:0| :skolemid |1320| :pattern ( (Tclass._System.___hPartialFunc1LO |#$T0@@279| |#$R@@305|)) )))
(assert (forall ((arg0@@419 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LO_0 arg0@@419)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LO_0| :pattern ( (Tclass._System.___hPartialFunc1LO_0 arg0@@419)) )))
(assert (forall ((|#$T0@@280| T@U) (|#$R@@306| T@U) ) (!  (=> (and (= (type |#$T0@@280|) TyType) (= (type |#$R@@306|) TyType)) (= (Tclass._System.___hPartialFunc1LO_0 (Tclass._System.___hPartialFunc1LO |#$T0@@280| |#$R@@306|)) |#$T0@@280|)) :qid |unknown.0:0| :skolemid |1321| :pattern ( (Tclass._System.___hPartialFunc1LO |#$T0@@280| |#$R@@306|)) )))
(assert (forall ((arg0@@420 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LO_1 arg0@@420)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LO_1| :pattern ( (Tclass._System.___hPartialFunc1LO_1 arg0@@420)) )))
(assert (forall ((|#$T0@@281| T@U) (|#$R@@307| T@U) ) (!  (=> (and (= (type |#$T0@@281|) TyType) (= (type |#$R@@307|) TyType)) (= (Tclass._System.___hPartialFunc1LO_1 (Tclass._System.___hPartialFunc1LO |#$T0@@281| |#$R@@307|)) |#$R@@307|)) :qid |unknown.0:0| :skolemid |1322| :pattern ( (Tclass._System.___hPartialFunc1LO |#$T0@@281| |#$R@@307|)) )))
(assert (forall ((|#$T0@@282| T@U) (|#$R@@308| T@U) (bx@@124 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@282|) TyType) (= (type |#$R@@308|) TyType)) (= (type bx@@124) BoxType)) ($IsBox bx@@124 (Tclass._System.___hPartialFunc1LO |#$T0@@282| |#$R@@308|))) (and (= ($Box ($Unbox HandleTypeType bx@@124)) bx@@124) ($Is ($Unbox HandleTypeType bx@@124) (Tclass._System.___hPartialFunc1LO |#$T0@@282| |#$R@@308|)))) :qid |unknown.0:0| :skolemid |1323| :pattern ( ($IsBox bx@@124 (Tclass._System.___hPartialFunc1LO |#$T0@@282| |#$R@@308|))) )))
(assert (forall ((|#$T0@@283| T@U) (|#$R@@309| T@U) (|f#0@@55| T@U) ) (!  (=> (and (and (= (type |#$T0@@283|) TyType) (= (type |#$R@@309|) TyType)) (= (type |f#0@@55|) HandleTypeType)) (= ($Is |f#0@@55| (Tclass._System.___hPartialFunc1LO |#$T0@@283| |#$R@@309|))  (and ($Is |f#0@@55| (Tclass._System.___hFunc1LO |#$T0@@283| |#$R@@309|)) (forall ((|x0#0@@23| T@U) ) (!  (=> (and (= (type |x0#0@@23|) BoxType) ($IsBox |x0#0@@23| |#$T0@@283|)) (|Set#Equal| (Reads1 |#$T0@@283| |#$R@@309| $OneHeap |f#0@@55| |x0#0@@23|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1324| :no-pattern (type |x0#0@@23|) :no-pattern (U_2_int |x0#0@@23|) :no-pattern (U_2_bool |x0#0@@23|) ))))) :qid |unknown.0:0| :skolemid |1325| :pattern ( ($Is |f#0@@55| (Tclass._System.___hPartialFunc1LO |#$T0@@283| |#$R@@309|))) )))
(assert (forall ((|#$T0@@284| T@U) (|#$R@@310| T@U) (|f#0@@56| T@U) ($h@@40 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@284|) TyType) (= (type |#$R@@310|) TyType)) (= (type |f#0@@56|) HandleTypeType)) (= (type $h@@40) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@56| (Tclass._System.___hPartialFunc1LO |#$T0@@284| |#$R@@310|) $h@@40) ($IsAlloc |f#0@@56| (Tclass._System.___hFunc1LO |#$T0@@284| |#$R@@310|) $h@@40))) :qid |unknown.0:0| :skolemid |1326| :pattern ( ($IsAlloc |f#0@@56| (Tclass._System.___hPartialFunc1LO |#$T0@@284| |#$R@@310|) $h@@40)) )))
(assert (forall ((arg0@@421 T@U) (arg1@@180 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LO arg0@@421 arg1@@180)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LO| :pattern ( (Tclass._System.___hTotalFunc1LO arg0@@421 arg1@@180)) )))
(assert (forall ((|#$T0@@285| T@U) (|#$R@@311| T@U) ) (!  (=> (and (= (type |#$T0@@285|) TyType) (= (type |#$R@@311|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1LO |#$T0@@285| |#$R@@311|)) Tagclass._System.___hTotalFunc1LO) (= (TagFamily (Tclass._System.___hTotalFunc1LO |#$T0@@285| |#$R@@311|)) |tytagFamily$_#TotalFunc1LO|))) :qid |unknown.0:0| :skolemid |1327| :pattern ( (Tclass._System.___hTotalFunc1LO |#$T0@@285| |#$R@@311|)) )))
(assert (forall ((arg0@@422 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LO_0 arg0@@422)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LO_0| :pattern ( (Tclass._System.___hTotalFunc1LO_0 arg0@@422)) )))
(assert (forall ((|#$T0@@286| T@U) (|#$R@@312| T@U) ) (!  (=> (and (= (type |#$T0@@286|) TyType) (= (type |#$R@@312|) TyType)) (= (Tclass._System.___hTotalFunc1LO_0 (Tclass._System.___hTotalFunc1LO |#$T0@@286| |#$R@@312|)) |#$T0@@286|)) :qid |unknown.0:0| :skolemid |1328| :pattern ( (Tclass._System.___hTotalFunc1LO |#$T0@@286| |#$R@@312|)) )))
(assert (forall ((arg0@@423 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LO_1 arg0@@423)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LO_1| :pattern ( (Tclass._System.___hTotalFunc1LO_1 arg0@@423)) )))
(assert (forall ((|#$T0@@287| T@U) (|#$R@@313| T@U) ) (!  (=> (and (= (type |#$T0@@287|) TyType) (= (type |#$R@@313|) TyType)) (= (Tclass._System.___hTotalFunc1LO_1 (Tclass._System.___hTotalFunc1LO |#$T0@@287| |#$R@@313|)) |#$R@@313|)) :qid |unknown.0:0| :skolemid |1329| :pattern ( (Tclass._System.___hTotalFunc1LO |#$T0@@287| |#$R@@313|)) )))
(assert (forall ((|#$T0@@288| T@U) (|#$R@@314| T@U) (bx@@125 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@288|) TyType) (= (type |#$R@@314|) TyType)) (= (type bx@@125) BoxType)) ($IsBox bx@@125 (Tclass._System.___hTotalFunc1LO |#$T0@@288| |#$R@@314|))) (and (= ($Box ($Unbox HandleTypeType bx@@125)) bx@@125) ($Is ($Unbox HandleTypeType bx@@125) (Tclass._System.___hTotalFunc1LO |#$T0@@288| |#$R@@314|)))) :qid |unknown.0:0| :skolemid |1330| :pattern ( ($IsBox bx@@125 (Tclass._System.___hTotalFunc1LO |#$T0@@288| |#$R@@314|))) )))
(assert (forall ((|#$T0@@289| T@U) (|#$R@@315| T@U) (|f#0@@57| T@U) ) (!  (=> (and (and (= (type |#$T0@@289|) TyType) (= (type |#$R@@315|) TyType)) (= (type |f#0@@57|) HandleTypeType)) (= ($Is |f#0@@57| (Tclass._System.___hTotalFunc1LO |#$T0@@289| |#$R@@315|))  (and ($Is |f#0@@57| (Tclass._System.___hPartialFunc1LO |#$T0@@289| |#$R@@315|)) (forall ((|x0#0@@24| T@U) ) (!  (=> (and (= (type |x0#0@@24|) BoxType) ($IsBox |x0#0@@24| |#$T0@@289|)) (Requires1 |#$T0@@289| |#$R@@315| $OneHeap |f#0@@57| |x0#0@@24|)) :qid |unknown.0:0| :skolemid |1331| :no-pattern (type |x0#0@@24|) :no-pattern (U_2_int |x0#0@@24|) :no-pattern (U_2_bool |x0#0@@24|) ))))) :qid |unknown.0:0| :skolemid |1332| :pattern ( ($Is |f#0@@57| (Tclass._System.___hTotalFunc1LO |#$T0@@289| |#$R@@315|))) )))
(assert (forall ((|#$T0@@290| T@U) (|#$R@@316| T@U) (|f#0@@58| T@U) ($h@@41 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@290|) TyType) (= (type |#$R@@316|) TyType)) (= (type |f#0@@58|) HandleTypeType)) (= (type $h@@41) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@58| (Tclass._System.___hTotalFunc1LO |#$T0@@290| |#$R@@316|) $h@@41) ($IsAlloc |f#0@@58| (Tclass._System.___hPartialFunc1LO |#$T0@@290| |#$R@@316|) $h@@41))) :qid |unknown.0:0| :skolemid |1333| :pattern ( ($IsAlloc |f#0@@58| (Tclass._System.___hTotalFunc1LO |#$T0@@290| |#$R@@316|) $h@@41)) )))
(assert (forall ((arg0@@424 T@U) (arg1@@181 T@U) ) (! (= (type (|#_System._tuple#2OLL._#Make2| arg0@@424 arg1@@181)) DatatypeTypeType) :qid |funType:#_System._tuple#2OLL._#Make2| :pattern ( (|#_System._tuple#2OLL._#Make2| arg0@@424 arg1@@181)) )))
(assert (forall ((|a#14#0#0| T@U) (|a#14#1#0| T@U) ) (!  (=> (and (= (type |a#14#0#0|) BoxType) (= (type |a#14#1#0|) BoxType)) (= (DatatypeCtorId (|#_System._tuple#2OLL._#Make2| |a#14#0#0| |a#14#1#0|)) |##_System._tuple#2OLL._#Make2|)) :qid |unknown.0:0| :skolemid |1334| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#14#0#0| |a#14#1#0|)) )))
(assert (forall ((d@@10 T@U) ) (!  (=> (= (type d@@10) DatatypeTypeType) (= (_System.Tuple2OLL.___hMake2_q d@@10) (= (DatatypeCtorId d@@10) |##_System._tuple#2OLL._#Make2|))) :qid |unknown.0:0| :skolemid |1335| :pattern ( (_System.Tuple2OLL.___hMake2_q d@@10)) )))
(assert (forall ((d@@11 T@U) ) (!  (=> (and (= (type d@@11) DatatypeTypeType) (_System.Tuple2OLL.___hMake2_q d@@11)) (exists ((|a#15#0#0| T@U) (|a#15#1#0| T@U) ) (!  (and (and (= (type |a#15#0#0|) BoxType) (= (type |a#15#1#0|) BoxType)) (= d@@11 (|#_System._tuple#2OLL._#Make2| |a#15#0#0| |a#15#1#0|))) :qid |unknown.0:0| :skolemid |1336| :no-pattern (type |a#15#0#0|) :no-pattern (type |a#15#1#0|) :no-pattern (U_2_int |a#15#0#0|) :no-pattern (U_2_bool |a#15#0#0|) :no-pattern (U_2_int |a#15#1#0|) :no-pattern (U_2_bool |a#15#1#0|) ))) :qid |unknown.0:0| :skolemid |1337| :pattern ( (_System.Tuple2OLL.___hMake2_q d@@11)) )))
(assert (forall ((arg0@@425 T@U) (arg1@@182 T@U) ) (! (= (type (Tclass._System.Tuple2OLL arg0@@425 arg1@@182)) TyType) :qid |funType:Tclass._System.Tuple2OLL| :pattern ( (Tclass._System.Tuple2OLL arg0@@425 arg1@@182)) )))
(assert (forall ((|_System._tuple#2OLL$T0| T@U) (|_System._tuple#2OLL$T1| T@U) ) (!  (=> (and (= (type |_System._tuple#2OLL$T0|) TyType) (= (type |_System._tuple#2OLL$T1|) TyType)) (and (= (Tag (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0| |_System._tuple#2OLL$T1|)) Tagclass._System.Tuple2OLL) (= (TagFamily (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0| |_System._tuple#2OLL$T1|)) |tytagFamily$_tuple#2OLL|))) :qid |unknown.0:0| :skolemid |1338| :pattern ( (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0| |_System._tuple#2OLL$T1|)) )))
(assert (forall ((arg0@@426 T@U) ) (! (= (type (Tclass._System.Tuple2OLL_0 arg0@@426)) TyType) :qid |funType:Tclass._System.Tuple2OLL_0| :pattern ( (Tclass._System.Tuple2OLL_0 arg0@@426)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@0| T@U) (|_System._tuple#2OLL$T1@@0| T@U) ) (!  (=> (and (= (type |_System._tuple#2OLL$T0@@0|) TyType) (= (type |_System._tuple#2OLL$T1@@0|) TyType)) (= (Tclass._System.Tuple2OLL_0 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@0| |_System._tuple#2OLL$T1@@0|)) |_System._tuple#2OLL$T0@@0|)) :qid |unknown.0:0| :skolemid |1339| :pattern ( (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@0| |_System._tuple#2OLL$T1@@0|)) )))
(assert (forall ((arg0@@427 T@U) ) (! (= (type (Tclass._System.Tuple2OLL_1 arg0@@427)) TyType) :qid |funType:Tclass._System.Tuple2OLL_1| :pattern ( (Tclass._System.Tuple2OLL_1 arg0@@427)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@1| T@U) (|_System._tuple#2OLL$T1@@1| T@U) ) (!  (=> (and (= (type |_System._tuple#2OLL$T0@@1|) TyType) (= (type |_System._tuple#2OLL$T1@@1|) TyType)) (= (Tclass._System.Tuple2OLL_1 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@1| |_System._tuple#2OLL$T1@@1|)) |_System._tuple#2OLL$T1@@1|)) :qid |unknown.0:0| :skolemid |1340| :pattern ( (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@1| |_System._tuple#2OLL$T1@@1|)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@2| T@U) (|_System._tuple#2OLL$T1@@2| T@U) (bx@@126 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2OLL$T0@@2|) TyType) (= (type |_System._tuple#2OLL$T1@@2|) TyType)) (= (type bx@@126) BoxType)) ($IsBox bx@@126 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@2| |_System._tuple#2OLL$T1@@2|))) (and (= ($Box ($Unbox DatatypeTypeType bx@@126)) bx@@126) ($Is ($Unbox DatatypeTypeType bx@@126) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@2| |_System._tuple#2OLL$T1@@2|)))) :qid |unknown.0:0| :skolemid |1341| :pattern ( ($IsBox bx@@126 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@2| |_System._tuple#2OLL$T1@@2|))) )))
(assert (forall ((|_System._tuple#2OLL$T0@@3| T@U) (|_System._tuple#2OLL$T1@@3| T@U) (|a#16#0#0| T@U) (|a#16#1#0| T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2OLL$T0@@3|) TyType) (= (type |_System._tuple#2OLL$T1@@3|) TyType)) (= (type |a#16#0#0|) BoxType)) (= (type |a#16#1#0|) BoxType)) (= ($Is (|#_System._tuple#2OLL._#Make2| |a#16#0#0| |a#16#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@3| |_System._tuple#2OLL$T1@@3|))  (and ($IsBox |a#16#0#0| |_System._tuple#2OLL$T0@@3|) ($IsBox |a#16#1#0| |_System._tuple#2OLL$T1@@3|)))) :qid |unknown.0:0| :skolemid |1342| :pattern ( ($Is (|#_System._tuple#2OLL._#Make2| |a#16#0#0| |a#16#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@3| |_System._tuple#2OLL$T1@@3|))) )))
(assert (forall ((|_System._tuple#2OLL$T0@@4| T@U) (|_System._tuple#2OLL$T1@@4| T@U) (|a#17#0#0| T@U) (|a#17#1#0| T@U) ($h@@42 T@U) ) (!  (=> (and (and (and (and (and (= (type |_System._tuple#2OLL$T0@@4|) TyType) (= (type |_System._tuple#2OLL$T1@@4|) TyType)) (= (type |a#17#0#0|) BoxType)) (= (type |a#17#1#0|) BoxType)) (= (type $h@@42) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@42)) (= ($IsAlloc (|#_System._tuple#2OLL._#Make2| |a#17#0#0| |a#17#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@4| |_System._tuple#2OLL$T1@@4|) $h@@42)  (and ($IsAllocBox |a#17#0#0| |_System._tuple#2OLL$T0@@4| $h@@42) ($IsAllocBox |a#17#1#0| |_System._tuple#2OLL$T1@@4| $h@@42)))) :qid |unknown.0:0| :skolemid |1343| :pattern ( ($IsAlloc (|#_System._tuple#2OLL._#Make2| |a#17#0#0| |a#17#1#0|) (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@4| |_System._tuple#2OLL$T1@@4|) $h@@42)) )))
(assert (forall ((arg0@@428 T@U) ) (! (= (type (_System.Tuple2OLL._0 arg0@@428)) BoxType) :qid |funType:_System.Tuple2OLL._0| :pattern ( (_System.Tuple2OLL._0 arg0@@428)) )))
(assert (forall ((d@@12 T@U) (|_System._tuple#2OLL$T0@@5| T@U) ($h@@43 T@U) ) (!  (=> (and (and (and (= (type d@@12) DatatypeTypeType) (= (type |_System._tuple#2OLL$T0@@5|) TyType)) (= (type $h@@43) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@43) (and (_System.Tuple2OLL.___hMake2_q d@@12) (exists ((|_System._tuple#2OLL$T1@@5| T@U) ) (!  (and (= (type |_System._tuple#2OLL$T1@@5|) TyType) ($IsAlloc d@@12 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@5| |_System._tuple#2OLL$T1@@5|) $h@@43)) :qid |unknown.0:0| :skolemid |1344| :pattern ( ($IsAlloc d@@12 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@5| |_System._tuple#2OLL$T1@@5|) $h@@43)) ))))) ($IsAllocBox (_System.Tuple2OLL._0 d@@12) |_System._tuple#2OLL$T0@@5| $h@@43)) :qid |unknown.0:0| :skolemid |1345| :pattern ( ($IsAllocBox (_System.Tuple2OLL._0 d@@12) |_System._tuple#2OLL$T0@@5| $h@@43)) )))
(assert (forall ((arg0@@429 T@U) ) (! (= (type (_System.Tuple2OLL._1 arg0@@429)) BoxType) :qid |funType:_System.Tuple2OLL._1| :pattern ( (_System.Tuple2OLL._1 arg0@@429)) )))
(assert (forall ((d@@13 T@U) (|_System._tuple#2OLL$T1@@6| T@U) ($h@@44 T@U) ) (!  (=> (and (and (and (= (type d@@13) DatatypeTypeType) (= (type |_System._tuple#2OLL$T1@@6|) TyType)) (= (type $h@@44) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@44) (and (_System.Tuple2OLL.___hMake2_q d@@13) (exists ((|_System._tuple#2OLL$T0@@6| T@U) ) (!  (and (= (type |_System._tuple#2OLL$T0@@6|) TyType) ($IsAlloc d@@13 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@6| |_System._tuple#2OLL$T1@@6|) $h@@44)) :qid |unknown.0:0| :skolemid |1346| :pattern ( ($IsAlloc d@@13 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@6| |_System._tuple#2OLL$T1@@6|) $h@@44)) ))))) ($IsAllocBox (_System.Tuple2OLL._1 d@@13) |_System._tuple#2OLL$T1@@6| $h@@44)) :qid |unknown.0:0| :skolemid |1347| :pattern ( ($IsAllocBox (_System.Tuple2OLL._1 d@@13) |_System._tuple#2OLL$T1@@6| $h@@44)) )))
(assert (forall ((|a#18#0#0| T@U) (|a#18#1#0| T@U) ) (!  (=> (and (= (type |a#18#0#0|) BoxType) (= (type |a#18#1#0|) BoxType)) (= (|#_System._tuple#2OLL._#Make2| (Lit |a#18#0#0|) (Lit |a#18#1#0|)) (Lit (|#_System._tuple#2OLL._#Make2| |a#18#0#0| |a#18#1#0|)))) :qid |unknown.0:0| :skolemid |1348| :pattern ( (|#_System._tuple#2OLL._#Make2| (Lit |a#18#0#0|) (Lit |a#18#1#0|))) )))
(assert (forall ((|a#19#0#0| T@U) (|a#19#1#0| T@U) ) (!  (=> (and (= (type |a#19#0#0|) BoxType) (= (type |a#19#1#0|) BoxType)) (= (_System.Tuple2OLL._0 (|#_System._tuple#2OLL._#Make2| |a#19#0#0| |a#19#1#0|)) |a#19#0#0|)) :qid |unknown.0:0| :skolemid |1349| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#19#0#0| |a#19#1#0|)) )))
(assert (forall ((|a#20#0#0| T@U) (|a#20#1#0| T@U) ) (!  (=> (and (= (type |a#20#0#0|) BoxType) (= (type |a#20#1#0|) BoxType)) (< (BoxRank |a#20#0#0|) (DtRank (|#_System._tuple#2OLL._#Make2| |a#20#0#0| |a#20#1#0|)))) :qid |unknown.0:0| :skolemid |1350| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#20#0#0| |a#20#1#0|)) )))
(assert (forall ((|a#21#0#0| T@U) (|a#21#1#0| T@U) ) (!  (=> (and (= (type |a#21#0#0|) BoxType) (= (type |a#21#1#0|) BoxType)) (= (_System.Tuple2OLL._1 (|#_System._tuple#2OLL._#Make2| |a#21#0#0| |a#21#1#0|)) |a#21#1#0|)) :qid |unknown.0:0| :skolemid |1351| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#21#0#0| |a#21#1#0|)) )))
(assert (forall ((|a#22#0#0| T@U) (|a#22#1#0| T@U) ) (!  (=> (and (= (type |a#22#0#0|) BoxType) (= (type |a#22#1#0|) BoxType)) (< (BoxRank |a#22#1#0|) (DtRank (|#_System._tuple#2OLL._#Make2| |a#22#0#0| |a#22#1#0|)))) :qid |unknown.0:0| :skolemid |1352| :pattern ( (|#_System._tuple#2OLL._#Make2| |a#22#0#0| |a#22#1#0|)) )))
(assert (forall ((d@@14 T@U) ) (!  (=> (and (= (type d@@14) DatatypeTypeType) (|$IsA#_System.Tuple2OLL| d@@14)) (_System.Tuple2OLL.___hMake2_q d@@14)) :qid |unknown.0:0| :skolemid |1353| :pattern ( (|$IsA#_System.Tuple2OLL| d@@14)) )))
(assert (forall ((|_System._tuple#2OLL$T0@@7| T@U) (|_System._tuple#2OLL$T1@@7| T@U) (d@@15 T@U) ) (!  (=> (and (and (and (= (type |_System._tuple#2OLL$T0@@7|) TyType) (= (type |_System._tuple#2OLL$T1@@7|) TyType)) (= (type d@@15) DatatypeTypeType)) ($Is d@@15 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@7| |_System._tuple#2OLL$T1@@7|))) (_System.Tuple2OLL.___hMake2_q d@@15)) :qid |unknown.0:0| :skolemid |1354| :pattern ( (_System.Tuple2OLL.___hMake2_q d@@15) ($Is d@@15 (Tclass._System.Tuple2OLL |_System._tuple#2OLL$T0@@7| |_System._tuple#2OLL$T1@@7|))) )))
(assert (forall ((a@@134 T@U) (b@@65 T@U) ) (!  (=> (and (and (= (type a@@134) DatatypeTypeType) (= (type b@@65) DatatypeTypeType)) true) (= (|_System.Tuple2OLL#Equal| a@@134 b@@65)  (and (= (_System.Tuple2OLL._0 a@@134) (_System.Tuple2OLL._0 b@@65)) (= (_System.Tuple2OLL._1 a@@134) (_System.Tuple2OLL._1 b@@65))))) :qid |unknown.0:0| :skolemid |1355| :pattern ( (|_System.Tuple2OLL#Equal| a@@134 b@@65)) )))
(assert (forall ((a@@135 T@U) (b@@66 T@U) ) (!  (=> (and (= (type a@@135) DatatypeTypeType) (= (type b@@66) DatatypeTypeType)) (= (|_System.Tuple2OLL#Equal| a@@135 b@@66) (= a@@135 b@@66))) :qid |unknown.0:0| :skolemid |1356| :pattern ( (|_System.Tuple2OLL#Equal| a@@135 b@@66)) )))
(assert (forall ((arg0@@430 T@U) (arg1@@183 T@U) (arg2@@124 T@U) (arg3@@93 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL arg0@@430 arg1@@183 arg2@@124 arg3@@93)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL| :pattern ( (Tclass._System.___hFunc3LLOL arg0@@430 arg1@@183 arg2@@124 arg3@@93)) )))
(assert (forall ((|#$T0@@291| T@U) (|#$T1@@227| T@U) (|#$T2@@170| T@U) (|#$R@@317| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@291|) TyType) (= (type |#$T1@@227|) TyType)) (= (type |#$T2@@170|) TyType)) (= (type |#$R@@317|) TyType)) (and (= (Tag (Tclass._System.___hFunc3LLOL |#$T0@@291| |#$T1@@227| |#$T2@@170| |#$R@@317|)) Tagclass._System.___hFunc3LLOL) (= (TagFamily (Tclass._System.___hFunc3LLOL |#$T0@@291| |#$T1@@227| |#$T2@@170| |#$R@@317|)) |tytagFamily$_#Func3LLOL|))) :qid |unknown.0:0| :skolemid |1357| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@291| |#$T1@@227| |#$T2@@170| |#$R@@317|)) )))
(assert (forall ((arg0@@431 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_0 arg0@@431)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_0| :pattern ( (Tclass._System.___hFunc3LLOL_0 arg0@@431)) )))
(assert (forall ((|#$T0@@292| T@U) (|#$T1@@228| T@U) (|#$T2@@171| T@U) (|#$R@@318| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@292|) TyType) (= (type |#$T1@@228|) TyType)) (= (type |#$T2@@171|) TyType)) (= (type |#$R@@318|) TyType)) (= (Tclass._System.___hFunc3LLOL_0 (Tclass._System.___hFunc3LLOL |#$T0@@292| |#$T1@@228| |#$T2@@171| |#$R@@318|)) |#$T0@@292|)) :qid |unknown.0:0| :skolemid |1358| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@292| |#$T1@@228| |#$T2@@171| |#$R@@318|)) )))
(assert (forall ((arg0@@432 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_1 arg0@@432)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_1| :pattern ( (Tclass._System.___hFunc3LLOL_1 arg0@@432)) )))
(assert (forall ((|#$T0@@293| T@U) (|#$T1@@229| T@U) (|#$T2@@172| T@U) (|#$R@@319| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@293|) TyType) (= (type |#$T1@@229|) TyType)) (= (type |#$T2@@172|) TyType)) (= (type |#$R@@319|) TyType)) (= (Tclass._System.___hFunc3LLOL_1 (Tclass._System.___hFunc3LLOL |#$T0@@293| |#$T1@@229| |#$T2@@172| |#$R@@319|)) |#$T1@@229|)) :qid |unknown.0:0| :skolemid |1359| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@293| |#$T1@@229| |#$T2@@172| |#$R@@319|)) )))
(assert (forall ((arg0@@433 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_2 arg0@@433)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_2| :pattern ( (Tclass._System.___hFunc3LLOL_2 arg0@@433)) )))
(assert (forall ((|#$T0@@294| T@U) (|#$T1@@230| T@U) (|#$T2@@173| T@U) (|#$R@@320| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@294|) TyType) (= (type |#$T1@@230|) TyType)) (= (type |#$T2@@173|) TyType)) (= (type |#$R@@320|) TyType)) (= (Tclass._System.___hFunc3LLOL_2 (Tclass._System.___hFunc3LLOL |#$T0@@294| |#$T1@@230| |#$T2@@173| |#$R@@320|)) |#$T2@@173|)) :qid |unknown.0:0| :skolemid |1360| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@294| |#$T1@@230| |#$T2@@173| |#$R@@320|)) )))
(assert (forall ((arg0@@434 T@U) ) (! (= (type (Tclass._System.___hFunc3LLOL_3 arg0@@434)) TyType) :qid |funType:Tclass._System.___hFunc3LLOL_3| :pattern ( (Tclass._System.___hFunc3LLOL_3 arg0@@434)) )))
(assert (forall ((|#$T0@@295| T@U) (|#$T1@@231| T@U) (|#$T2@@174| T@U) (|#$R@@321| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@295|) TyType) (= (type |#$T1@@231|) TyType)) (= (type |#$T2@@174|) TyType)) (= (type |#$R@@321|) TyType)) (= (Tclass._System.___hFunc3LLOL_3 (Tclass._System.___hFunc3LLOL |#$T0@@295| |#$T1@@231| |#$T2@@174| |#$R@@321|)) |#$R@@321|)) :qid |unknown.0:0| :skolemid |1361| :pattern ( (Tclass._System.___hFunc3LLOL |#$T0@@295| |#$T1@@231| |#$T2@@174| |#$R@@321|)) )))
(assert (forall ((|#$T0@@296| T@U) (|#$T1@@232| T@U) (|#$T2@@175| T@U) (|#$R@@322| T@U) (bx@@127 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@296|) TyType) (= (type |#$T1@@232|) TyType)) (= (type |#$T2@@175|) TyType)) (= (type |#$R@@322|) TyType)) (= (type bx@@127) BoxType)) ($IsBox bx@@127 (Tclass._System.___hFunc3LLOL |#$T0@@296| |#$T1@@232| |#$T2@@175| |#$R@@322|))) (and (= ($Box ($Unbox HandleTypeType bx@@127)) bx@@127) ($Is ($Unbox HandleTypeType bx@@127) (Tclass._System.___hFunc3LLOL |#$T0@@296| |#$T1@@232| |#$T2@@175| |#$R@@322|)))) :qid |unknown.0:0| :skolemid |1362| :pattern ( ($IsBox bx@@127 (Tclass._System.___hFunc3LLOL |#$T0@@296| |#$T1@@232| |#$T2@@175| |#$R@@322|))) )))
(assert (forall ((arg0@@435 T@U) (arg1@@184 T@U) (arg2@@125 T@U) (arg3@@94 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL arg0@@435 arg1@@184 arg2@@125 arg3@@94)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL| :pattern ( (Tclass._System.___hPartialFunc3LLOL arg0@@435 arg1@@184 arg2@@125 arg3@@94)) )))
(assert (forall ((|#$T0@@297| T@U) (|#$T1@@233| T@U) (|#$T2@@176| T@U) (|#$R@@323| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@297|) TyType) (= (type |#$T1@@233|) TyType)) (= (type |#$T2@@176|) TyType)) (= (type |#$R@@323|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc3LLOL |#$T0@@297| |#$T1@@233| |#$T2@@176| |#$R@@323|)) Tagclass._System.___hPartialFunc3LLOL) (= (TagFamily (Tclass._System.___hPartialFunc3LLOL |#$T0@@297| |#$T1@@233| |#$T2@@176| |#$R@@323|)) |tytagFamily$_#PartialFunc3LLOL|))) :qid |unknown.0:0| :skolemid |1363| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@297| |#$T1@@233| |#$T2@@176| |#$R@@323|)) )))
(assert (forall ((arg0@@436 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_0 arg0@@436)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_0| :pattern ( (Tclass._System.___hPartialFunc3LLOL_0 arg0@@436)) )))
(assert (forall ((|#$T0@@298| T@U) (|#$T1@@234| T@U) (|#$T2@@177| T@U) (|#$R@@324| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@298|) TyType) (= (type |#$T1@@234|) TyType)) (= (type |#$T2@@177|) TyType)) (= (type |#$R@@324|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_0 (Tclass._System.___hPartialFunc3LLOL |#$T0@@298| |#$T1@@234| |#$T2@@177| |#$R@@324|)) |#$T0@@298|)) :qid |unknown.0:0| :skolemid |1364| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@298| |#$T1@@234| |#$T2@@177| |#$R@@324|)) )))
(assert (forall ((arg0@@437 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_1 arg0@@437)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_1| :pattern ( (Tclass._System.___hPartialFunc3LLOL_1 arg0@@437)) )))
(assert (forall ((|#$T0@@299| T@U) (|#$T1@@235| T@U) (|#$T2@@178| T@U) (|#$R@@325| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@299|) TyType) (= (type |#$T1@@235|) TyType)) (= (type |#$T2@@178|) TyType)) (= (type |#$R@@325|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_1 (Tclass._System.___hPartialFunc3LLOL |#$T0@@299| |#$T1@@235| |#$T2@@178| |#$R@@325|)) |#$T1@@235|)) :qid |unknown.0:0| :skolemid |1365| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@299| |#$T1@@235| |#$T2@@178| |#$R@@325|)) )))
(assert (forall ((arg0@@438 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_2 arg0@@438)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_2| :pattern ( (Tclass._System.___hPartialFunc3LLOL_2 arg0@@438)) )))
(assert (forall ((|#$T0@@300| T@U) (|#$T1@@236| T@U) (|#$T2@@179| T@U) (|#$R@@326| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@300|) TyType) (= (type |#$T1@@236|) TyType)) (= (type |#$T2@@179|) TyType)) (= (type |#$R@@326|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_2 (Tclass._System.___hPartialFunc3LLOL |#$T0@@300| |#$T1@@236| |#$T2@@179| |#$R@@326|)) |#$T2@@179|)) :qid |unknown.0:0| :skolemid |1366| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@300| |#$T1@@236| |#$T2@@179| |#$R@@326|)) )))
(assert (forall ((arg0@@439 T@U) ) (! (= (type (Tclass._System.___hPartialFunc3LLOL_3 arg0@@439)) TyType) :qid |funType:Tclass._System.___hPartialFunc3LLOL_3| :pattern ( (Tclass._System.___hPartialFunc3LLOL_3 arg0@@439)) )))
(assert (forall ((|#$T0@@301| T@U) (|#$T1@@237| T@U) (|#$T2@@180| T@U) (|#$R@@327| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@301|) TyType) (= (type |#$T1@@237|) TyType)) (= (type |#$T2@@180|) TyType)) (= (type |#$R@@327|) TyType)) (= (Tclass._System.___hPartialFunc3LLOL_3 (Tclass._System.___hPartialFunc3LLOL |#$T0@@301| |#$T1@@237| |#$T2@@180| |#$R@@327|)) |#$R@@327|)) :qid |unknown.0:0| :skolemid |1367| :pattern ( (Tclass._System.___hPartialFunc3LLOL |#$T0@@301| |#$T1@@237| |#$T2@@180| |#$R@@327|)) )))
(assert (forall ((|#$T0@@302| T@U) (|#$T1@@238| T@U) (|#$T2@@181| T@U) (|#$R@@328| T@U) (bx@@128 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@302|) TyType) (= (type |#$T1@@238|) TyType)) (= (type |#$T2@@181|) TyType)) (= (type |#$R@@328|) TyType)) (= (type bx@@128) BoxType)) ($IsBox bx@@128 (Tclass._System.___hPartialFunc3LLOL |#$T0@@302| |#$T1@@238| |#$T2@@181| |#$R@@328|))) (and (= ($Box ($Unbox HandleTypeType bx@@128)) bx@@128) ($Is ($Unbox HandleTypeType bx@@128) (Tclass._System.___hPartialFunc3LLOL |#$T0@@302| |#$T1@@238| |#$T2@@181| |#$R@@328|)))) :qid |unknown.0:0| :skolemid |1368| :pattern ( ($IsBox bx@@128 (Tclass._System.___hPartialFunc3LLOL |#$T0@@302| |#$T1@@238| |#$T2@@181| |#$R@@328|))) )))
(assert (forall ((|#$T0@@303| T@U) (|#$T1@@239| T@U) (|#$T2@@182| T@U) (|#$R@@329| T@U) (|f#0@@59| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@303|) TyType) (= (type |#$T1@@239|) TyType)) (= (type |#$T2@@182|) TyType)) (= (type |#$R@@329|) TyType)) (= (type |f#0@@59|) HandleTypeType)) (= ($Is |f#0@@59| (Tclass._System.___hPartialFunc3LLOL |#$T0@@303| |#$T1@@239| |#$T2@@182| |#$R@@329|))  (and ($Is |f#0@@59| (Tclass._System.___hFunc3LLOL |#$T0@@303| |#$T1@@239| |#$T2@@182| |#$R@@329|)) (forall ((|x0#0@@25| T@U) (|x1#0@@17| T@U) (|x2#0@@11| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@25|) BoxType) (= (type |x1#0@@17|) BoxType)) (= (type |x2#0@@11|) BoxType)) (and (and ($IsBox |x0#0@@25| |#$T0@@303|) ($IsBox |x1#0@@17| |#$T1@@239|)) ($IsBox |x2#0@@11| |#$T2@@182|))) (|Set#Equal| (Reads3 |#$T0@@303| |#$T1@@239| |#$T2@@182| |#$R@@329| $OneHeap |f#0@@59| |x0#0@@25| |x1#0@@17| |x2#0@@11|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1369| :no-pattern (type |x0#0@@25|) :no-pattern (type |x1#0@@17|) :no-pattern (type |x2#0@@11|) :no-pattern (U_2_int |x0#0@@25|) :no-pattern (U_2_bool |x0#0@@25|) :no-pattern (U_2_int |x1#0@@17|) :no-pattern (U_2_bool |x1#0@@17|) :no-pattern (U_2_int |x2#0@@11|) :no-pattern (U_2_bool |x2#0@@11|) ))))) :qid |unknown.0:0| :skolemid |1370| :pattern ( ($Is |f#0@@59| (Tclass._System.___hPartialFunc3LLOL |#$T0@@303| |#$T1@@239| |#$T2@@182| |#$R@@329|))) )))
(assert (forall ((|#$T0@@304| T@U) (|#$T1@@240| T@U) (|#$T2@@183| T@U) (|#$R@@330| T@U) (|f#0@@60| T@U) ($h@@45 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@304|) TyType) (= (type |#$T1@@240|) TyType)) (= (type |#$T2@@183|) TyType)) (= (type |#$R@@330|) TyType)) (= (type |f#0@@60|) HandleTypeType)) (= (type $h@@45) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@60| (Tclass._System.___hPartialFunc3LLOL |#$T0@@304| |#$T1@@240| |#$T2@@183| |#$R@@330|) $h@@45) ($IsAlloc |f#0@@60| (Tclass._System.___hFunc3LLOL |#$T0@@304| |#$T1@@240| |#$T2@@183| |#$R@@330|) $h@@45))) :qid |unknown.0:0| :skolemid |1371| :pattern ( ($IsAlloc |f#0@@60| (Tclass._System.___hPartialFunc3LLOL |#$T0@@304| |#$T1@@240| |#$T2@@183| |#$R@@330|) $h@@45)) )))
(assert (forall ((arg0@@440 T@U) (arg1@@185 T@U) (arg2@@126 T@U) (arg3@@95 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL arg0@@440 arg1@@185 arg2@@126 arg3@@95)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL| :pattern ( (Tclass._System.___hTotalFunc3LLOL arg0@@440 arg1@@185 arg2@@126 arg3@@95)) )))
(assert (forall ((|#$T0@@305| T@U) (|#$T1@@241| T@U) (|#$T2@@184| T@U) (|#$R@@331| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@305|) TyType) (= (type |#$T1@@241|) TyType)) (= (type |#$T2@@184|) TyType)) (= (type |#$R@@331|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc3LLOL |#$T0@@305| |#$T1@@241| |#$T2@@184| |#$R@@331|)) Tagclass._System.___hTotalFunc3LLOL) (= (TagFamily (Tclass._System.___hTotalFunc3LLOL |#$T0@@305| |#$T1@@241| |#$T2@@184| |#$R@@331|)) |tytagFamily$_#TotalFunc3LLOL|))) :qid |unknown.0:0| :skolemid |1372| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@305| |#$T1@@241| |#$T2@@184| |#$R@@331|)) )))
(assert (forall ((arg0@@441 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_0 arg0@@441)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_0| :pattern ( (Tclass._System.___hTotalFunc3LLOL_0 arg0@@441)) )))
(assert (forall ((|#$T0@@306| T@U) (|#$T1@@242| T@U) (|#$T2@@185| T@U) (|#$R@@332| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@306|) TyType) (= (type |#$T1@@242|) TyType)) (= (type |#$T2@@185|) TyType)) (= (type |#$R@@332|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_0 (Tclass._System.___hTotalFunc3LLOL |#$T0@@306| |#$T1@@242| |#$T2@@185| |#$R@@332|)) |#$T0@@306|)) :qid |unknown.0:0| :skolemid |1373| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@306| |#$T1@@242| |#$T2@@185| |#$R@@332|)) )))
(assert (forall ((arg0@@442 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_1 arg0@@442)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_1| :pattern ( (Tclass._System.___hTotalFunc3LLOL_1 arg0@@442)) )))
(assert (forall ((|#$T0@@307| T@U) (|#$T1@@243| T@U) (|#$T2@@186| T@U) (|#$R@@333| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@307|) TyType) (= (type |#$T1@@243|) TyType)) (= (type |#$T2@@186|) TyType)) (= (type |#$R@@333|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_1 (Tclass._System.___hTotalFunc3LLOL |#$T0@@307| |#$T1@@243| |#$T2@@186| |#$R@@333|)) |#$T1@@243|)) :qid |unknown.0:0| :skolemid |1374| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@307| |#$T1@@243| |#$T2@@186| |#$R@@333|)) )))
(assert (forall ((arg0@@443 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_2 arg0@@443)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_2| :pattern ( (Tclass._System.___hTotalFunc3LLOL_2 arg0@@443)) )))
(assert (forall ((|#$T0@@308| T@U) (|#$T1@@244| T@U) (|#$T2@@187| T@U) (|#$R@@334| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@308|) TyType) (= (type |#$T1@@244|) TyType)) (= (type |#$T2@@187|) TyType)) (= (type |#$R@@334|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_2 (Tclass._System.___hTotalFunc3LLOL |#$T0@@308| |#$T1@@244| |#$T2@@187| |#$R@@334|)) |#$T2@@187|)) :qid |unknown.0:0| :skolemid |1375| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@308| |#$T1@@244| |#$T2@@187| |#$R@@334|)) )))
(assert (forall ((arg0@@444 T@U) ) (! (= (type (Tclass._System.___hTotalFunc3LLOL_3 arg0@@444)) TyType) :qid |funType:Tclass._System.___hTotalFunc3LLOL_3| :pattern ( (Tclass._System.___hTotalFunc3LLOL_3 arg0@@444)) )))
(assert (forall ((|#$T0@@309| T@U) (|#$T1@@245| T@U) (|#$T2@@188| T@U) (|#$R@@335| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@309|) TyType) (= (type |#$T1@@245|) TyType)) (= (type |#$T2@@188|) TyType)) (= (type |#$R@@335|) TyType)) (= (Tclass._System.___hTotalFunc3LLOL_3 (Tclass._System.___hTotalFunc3LLOL |#$T0@@309| |#$T1@@245| |#$T2@@188| |#$R@@335|)) |#$R@@335|)) :qid |unknown.0:0| :skolemid |1376| :pattern ( (Tclass._System.___hTotalFunc3LLOL |#$T0@@309| |#$T1@@245| |#$T2@@188| |#$R@@335|)) )))
(assert (forall ((|#$T0@@310| T@U) (|#$T1@@246| T@U) (|#$T2@@189| T@U) (|#$R@@336| T@U) (bx@@129 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@310|) TyType) (= (type |#$T1@@246|) TyType)) (= (type |#$T2@@189|) TyType)) (= (type |#$R@@336|) TyType)) (= (type bx@@129) BoxType)) ($IsBox bx@@129 (Tclass._System.___hTotalFunc3LLOL |#$T0@@310| |#$T1@@246| |#$T2@@189| |#$R@@336|))) (and (= ($Box ($Unbox HandleTypeType bx@@129)) bx@@129) ($Is ($Unbox HandleTypeType bx@@129) (Tclass._System.___hTotalFunc3LLOL |#$T0@@310| |#$T1@@246| |#$T2@@189| |#$R@@336|)))) :qid |unknown.0:0| :skolemid |1377| :pattern ( ($IsBox bx@@129 (Tclass._System.___hTotalFunc3LLOL |#$T0@@310| |#$T1@@246| |#$T2@@189| |#$R@@336|))) )))
(assert (forall ((|#$T0@@311| T@U) (|#$T1@@247| T@U) (|#$T2@@190| T@U) (|#$R@@337| T@U) (|f#0@@61| T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@311|) TyType) (= (type |#$T1@@247|) TyType)) (= (type |#$T2@@190|) TyType)) (= (type |#$R@@337|) TyType)) (= (type |f#0@@61|) HandleTypeType)) (= ($Is |f#0@@61| (Tclass._System.___hTotalFunc3LLOL |#$T0@@311| |#$T1@@247| |#$T2@@190| |#$R@@337|))  (and ($Is |f#0@@61| (Tclass._System.___hPartialFunc3LLOL |#$T0@@311| |#$T1@@247| |#$T2@@190| |#$R@@337|)) (forall ((|x0#0@@26| T@U) (|x1#0@@18| T@U) (|x2#0@@12| T@U) ) (!  (=> (and (and (and (= (type |x0#0@@26|) BoxType) (= (type |x1#0@@18|) BoxType)) (= (type |x2#0@@12|) BoxType)) (and (and ($IsBox |x0#0@@26| |#$T0@@311|) ($IsBox |x1#0@@18| |#$T1@@247|)) ($IsBox |x2#0@@12| |#$T2@@190|))) (Requires3 |#$T0@@311| |#$T1@@247| |#$T2@@190| |#$R@@337| $OneHeap |f#0@@61| |x0#0@@26| |x1#0@@18| |x2#0@@12|)) :qid |unknown.0:0| :skolemid |1378| :no-pattern (type |x0#0@@26|) :no-pattern (type |x1#0@@18|) :no-pattern (type |x2#0@@12|) :no-pattern (U_2_int |x0#0@@26|) :no-pattern (U_2_bool |x0#0@@26|) :no-pattern (U_2_int |x1#0@@18|) :no-pattern (U_2_bool |x1#0@@18|) :no-pattern (U_2_int |x2#0@@12|) :no-pattern (U_2_bool |x2#0@@12|) ))))) :qid |unknown.0:0| :skolemid |1379| :pattern ( ($Is |f#0@@61| (Tclass._System.___hTotalFunc3LLOL |#$T0@@311| |#$T1@@247| |#$T2@@190| |#$R@@337|))) )))
(assert (forall ((|#$T0@@312| T@U) (|#$T1@@248| T@U) (|#$T2@@191| T@U) (|#$R@@338| T@U) (|f#0@@62| T@U) ($h@@46 T@U) ) (!  (=> (and (and (and (and (and (= (type |#$T0@@312|) TyType) (= (type |#$T1@@248|) TyType)) (= (type |#$T2@@191|) TyType)) (= (type |#$R@@338|) TyType)) (= (type |f#0@@62|) HandleTypeType)) (= (type $h@@46) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@62| (Tclass._System.___hTotalFunc3LLOL |#$T0@@312| |#$T1@@248| |#$T2@@191| |#$R@@338|) $h@@46) ($IsAlloc |f#0@@62| (Tclass._System.___hPartialFunc3LLOL |#$T0@@312| |#$T1@@248| |#$T2@@191| |#$R@@338|) $h@@46))) :qid |unknown.0:0| :skolemid |1380| :pattern ( ($IsAlloc |f#0@@62| (Tclass._System.___hTotalFunc3LLOL |#$T0@@312| |#$T1@@248| |#$T2@@191| |#$R@@338|) $h@@46)) )))
(assert (forall ((arg0@@445 T@U) (arg1@@186 T@U) (arg2@@127 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO arg0@@445 arg1@@186 arg2@@127)) TyType) :qid |funType:Tclass._System.___hFunc2SSO| :pattern ( (Tclass._System.___hFunc2SSO arg0@@445 arg1@@186 arg2@@127)) )))
(assert (forall ((|#$T0@@313| T@U) (|#$T1@@249| T@U) (|#$R@@339| T@U) ) (!  (=> (and (and (= (type |#$T0@@313|) TyType) (= (type |#$T1@@249|) TyType)) (= (type |#$R@@339|) TyType)) (and (= (Tag (Tclass._System.___hFunc2SSO |#$T0@@313| |#$T1@@249| |#$R@@339|)) Tagclass._System.___hFunc2SSO) (= (TagFamily (Tclass._System.___hFunc2SSO |#$T0@@313| |#$T1@@249| |#$R@@339|)) |tytagFamily$_#Func2SSO|))) :qid |unknown.0:0| :skolemid |1381| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@313| |#$T1@@249| |#$R@@339|)) )))
(assert (forall ((arg0@@446 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO_0 arg0@@446)) TyType) :qid |funType:Tclass._System.___hFunc2SSO_0| :pattern ( (Tclass._System.___hFunc2SSO_0 arg0@@446)) )))
(assert (forall ((|#$T0@@314| T@U) (|#$T1@@250| T@U) (|#$R@@340| T@U) ) (!  (=> (and (and (= (type |#$T0@@314|) TyType) (= (type |#$T1@@250|) TyType)) (= (type |#$R@@340|) TyType)) (= (Tclass._System.___hFunc2SSO_0 (Tclass._System.___hFunc2SSO |#$T0@@314| |#$T1@@250| |#$R@@340|)) |#$T0@@314|)) :qid |unknown.0:0| :skolemid |1382| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@314| |#$T1@@250| |#$R@@340|)) )))
(assert (forall ((arg0@@447 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO_1 arg0@@447)) TyType) :qid |funType:Tclass._System.___hFunc2SSO_1| :pattern ( (Tclass._System.___hFunc2SSO_1 arg0@@447)) )))
(assert (forall ((|#$T0@@315| T@U) (|#$T1@@251| T@U) (|#$R@@341| T@U) ) (!  (=> (and (and (= (type |#$T0@@315|) TyType) (= (type |#$T1@@251|) TyType)) (= (type |#$R@@341|) TyType)) (= (Tclass._System.___hFunc2SSO_1 (Tclass._System.___hFunc2SSO |#$T0@@315| |#$T1@@251| |#$R@@341|)) |#$T1@@251|)) :qid |unknown.0:0| :skolemid |1383| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@315| |#$T1@@251| |#$R@@341|)) )))
(assert (forall ((arg0@@448 T@U) ) (! (= (type (Tclass._System.___hFunc2SSO_2 arg0@@448)) TyType) :qid |funType:Tclass._System.___hFunc2SSO_2| :pattern ( (Tclass._System.___hFunc2SSO_2 arg0@@448)) )))
(assert (forall ((|#$T0@@316| T@U) (|#$T1@@252| T@U) (|#$R@@342| T@U) ) (!  (=> (and (and (= (type |#$T0@@316|) TyType) (= (type |#$T1@@252|) TyType)) (= (type |#$R@@342|) TyType)) (= (Tclass._System.___hFunc2SSO_2 (Tclass._System.___hFunc2SSO |#$T0@@316| |#$T1@@252| |#$R@@342|)) |#$R@@342|)) :qid |unknown.0:0| :skolemid |1384| :pattern ( (Tclass._System.___hFunc2SSO |#$T0@@316| |#$T1@@252| |#$R@@342|)) )))
(assert (forall ((|#$T0@@317| T@U) (|#$T1@@253| T@U) (|#$R@@343| T@U) (bx@@130 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@317|) TyType) (= (type |#$T1@@253|) TyType)) (= (type |#$R@@343|) TyType)) (= (type bx@@130) BoxType)) ($IsBox bx@@130 (Tclass._System.___hFunc2SSO |#$T0@@317| |#$T1@@253| |#$R@@343|))) (and (= ($Box ($Unbox HandleTypeType bx@@130)) bx@@130) ($Is ($Unbox HandleTypeType bx@@130) (Tclass._System.___hFunc2SSO |#$T0@@317| |#$T1@@253| |#$R@@343|)))) :qid |unknown.0:0| :skolemid |1385| :pattern ( ($IsBox bx@@130 (Tclass._System.___hFunc2SSO |#$T0@@317| |#$T1@@253| |#$R@@343|))) )))
(assert (forall ((arg0@@449 T@U) (arg1@@187 T@U) (arg2@@128 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO arg0@@449 arg1@@187 arg2@@128)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO| :pattern ( (Tclass._System.___hPartialFunc2SSO arg0@@449 arg1@@187 arg2@@128)) )))
(assert (forall ((|#$T0@@318| T@U) (|#$T1@@254| T@U) (|#$R@@344| T@U) ) (!  (=> (and (and (= (type |#$T0@@318|) TyType) (= (type |#$T1@@254|) TyType)) (= (type |#$R@@344|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc2SSO |#$T0@@318| |#$T1@@254| |#$R@@344|)) Tagclass._System.___hPartialFunc2SSO) (= (TagFamily (Tclass._System.___hPartialFunc2SSO |#$T0@@318| |#$T1@@254| |#$R@@344|)) |tytagFamily$_#PartialFunc2SSO|))) :qid |unknown.0:0| :skolemid |1386| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@318| |#$T1@@254| |#$R@@344|)) )))
(assert (forall ((arg0@@450 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO_0 arg0@@450)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO_0| :pattern ( (Tclass._System.___hPartialFunc2SSO_0 arg0@@450)) )))
(assert (forall ((|#$T0@@319| T@U) (|#$T1@@255| T@U) (|#$R@@345| T@U) ) (!  (=> (and (and (= (type |#$T0@@319|) TyType) (= (type |#$T1@@255|) TyType)) (= (type |#$R@@345|) TyType)) (= (Tclass._System.___hPartialFunc2SSO_0 (Tclass._System.___hPartialFunc2SSO |#$T0@@319| |#$T1@@255| |#$R@@345|)) |#$T0@@319|)) :qid |unknown.0:0| :skolemid |1387| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@319| |#$T1@@255| |#$R@@345|)) )))
(assert (forall ((arg0@@451 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO_1 arg0@@451)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO_1| :pattern ( (Tclass._System.___hPartialFunc2SSO_1 arg0@@451)) )))
(assert (forall ((|#$T0@@320| T@U) (|#$T1@@256| T@U) (|#$R@@346| T@U) ) (!  (=> (and (and (= (type |#$T0@@320|) TyType) (= (type |#$T1@@256|) TyType)) (= (type |#$R@@346|) TyType)) (= (Tclass._System.___hPartialFunc2SSO_1 (Tclass._System.___hPartialFunc2SSO |#$T0@@320| |#$T1@@256| |#$R@@346|)) |#$T1@@256|)) :qid |unknown.0:0| :skolemid |1388| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@320| |#$T1@@256| |#$R@@346|)) )))
(assert (forall ((arg0@@452 T@U) ) (! (= (type (Tclass._System.___hPartialFunc2SSO_2 arg0@@452)) TyType) :qid |funType:Tclass._System.___hPartialFunc2SSO_2| :pattern ( (Tclass._System.___hPartialFunc2SSO_2 arg0@@452)) )))
(assert (forall ((|#$T0@@321| T@U) (|#$T1@@257| T@U) (|#$R@@347| T@U) ) (!  (=> (and (and (= (type |#$T0@@321|) TyType) (= (type |#$T1@@257|) TyType)) (= (type |#$R@@347|) TyType)) (= (Tclass._System.___hPartialFunc2SSO_2 (Tclass._System.___hPartialFunc2SSO |#$T0@@321| |#$T1@@257| |#$R@@347|)) |#$R@@347|)) :qid |unknown.0:0| :skolemid |1389| :pattern ( (Tclass._System.___hPartialFunc2SSO |#$T0@@321| |#$T1@@257| |#$R@@347|)) )))
(assert (forall ((|#$T0@@322| T@U) (|#$T1@@258| T@U) (|#$R@@348| T@U) (bx@@131 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@322|) TyType) (= (type |#$T1@@258|) TyType)) (= (type |#$R@@348|) TyType)) (= (type bx@@131) BoxType)) ($IsBox bx@@131 (Tclass._System.___hPartialFunc2SSO |#$T0@@322| |#$T1@@258| |#$R@@348|))) (and (= ($Box ($Unbox HandleTypeType bx@@131)) bx@@131) ($Is ($Unbox HandleTypeType bx@@131) (Tclass._System.___hPartialFunc2SSO |#$T0@@322| |#$T1@@258| |#$R@@348|)))) :qid |unknown.0:0| :skolemid |1390| :pattern ( ($IsBox bx@@131 (Tclass._System.___hPartialFunc2SSO |#$T0@@322| |#$T1@@258| |#$R@@348|))) )))
(assert (forall ((|#$T0@@323| T@U) (|#$T1@@259| T@U) (|#$R@@349| T@U) (|f#0@@63| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@323|) TyType) (= (type |#$T1@@259|) TyType)) (= (type |#$R@@349|) TyType)) (= (type |f#0@@63|) HandleTypeType)) (= ($Is |f#0@@63| (Tclass._System.___hPartialFunc2SSO |#$T0@@323| |#$T1@@259| |#$R@@349|))  (and ($Is |f#0@@63| (Tclass._System.___hFunc2SSO |#$T0@@323| |#$T1@@259| |#$R@@349|)) (forall ((|x0#0@@27| T@U) (|x1#0@@19| T@U) ) (!  (=> (and (and (= (type |x0#0@@27|) BoxType) (= (type |x1#0@@19|) BoxType)) (and ($IsBox |x0#0@@27| |#$T0@@323|) ($IsBox |x1#0@@19| |#$T1@@259|))) (|Set#Equal| (Reads2 |#$T0@@323| |#$T1@@259| |#$R@@349| $OneHeap |f#0@@63| |x0#0@@27| |x1#0@@19|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1391| :no-pattern (type |x0#0@@27|) :no-pattern (type |x1#0@@19|) :no-pattern (U_2_int |x0#0@@27|) :no-pattern (U_2_bool |x0#0@@27|) :no-pattern (U_2_int |x1#0@@19|) :no-pattern (U_2_bool |x1#0@@19|) ))))) :qid |unknown.0:0| :skolemid |1392| :pattern ( ($Is |f#0@@63| (Tclass._System.___hPartialFunc2SSO |#$T0@@323| |#$T1@@259| |#$R@@349|))) )))
(assert (forall ((|#$T0@@324| T@U) (|#$T1@@260| T@U) (|#$R@@350| T@U) (|f#0@@64| T@U) ($h@@47 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@324|) TyType) (= (type |#$T1@@260|) TyType)) (= (type |#$R@@350|) TyType)) (= (type |f#0@@64|) HandleTypeType)) (= (type $h@@47) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@64| (Tclass._System.___hPartialFunc2SSO |#$T0@@324| |#$T1@@260| |#$R@@350|) $h@@47) ($IsAlloc |f#0@@64| (Tclass._System.___hFunc2SSO |#$T0@@324| |#$T1@@260| |#$R@@350|) $h@@47))) :qid |unknown.0:0| :skolemid |1393| :pattern ( ($IsAlloc |f#0@@64| (Tclass._System.___hPartialFunc2SSO |#$T0@@324| |#$T1@@260| |#$R@@350|) $h@@47)) )))
(assert (forall ((arg0@@453 T@U) (arg1@@188 T@U) (arg2@@129 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO arg0@@453 arg1@@188 arg2@@129)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO| :pattern ( (Tclass._System.___hTotalFunc2SSO arg0@@453 arg1@@188 arg2@@129)) )))
(assert (forall ((|#$T0@@325| T@U) (|#$T1@@261| T@U) (|#$R@@351| T@U) ) (!  (=> (and (and (= (type |#$T0@@325|) TyType) (= (type |#$T1@@261|) TyType)) (= (type |#$R@@351|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc2SSO |#$T0@@325| |#$T1@@261| |#$R@@351|)) Tagclass._System.___hTotalFunc2SSO) (= (TagFamily (Tclass._System.___hTotalFunc2SSO |#$T0@@325| |#$T1@@261| |#$R@@351|)) |tytagFamily$_#TotalFunc2SSO|))) :qid |unknown.0:0| :skolemid |1394| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@325| |#$T1@@261| |#$R@@351|)) )))
(assert (forall ((arg0@@454 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO_0 arg0@@454)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO_0| :pattern ( (Tclass._System.___hTotalFunc2SSO_0 arg0@@454)) )))
(assert (forall ((|#$T0@@326| T@U) (|#$T1@@262| T@U) (|#$R@@352| T@U) ) (!  (=> (and (and (= (type |#$T0@@326|) TyType) (= (type |#$T1@@262|) TyType)) (= (type |#$R@@352|) TyType)) (= (Tclass._System.___hTotalFunc2SSO_0 (Tclass._System.___hTotalFunc2SSO |#$T0@@326| |#$T1@@262| |#$R@@352|)) |#$T0@@326|)) :qid |unknown.0:0| :skolemid |1395| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@326| |#$T1@@262| |#$R@@352|)) )))
(assert (forall ((arg0@@455 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO_1 arg0@@455)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO_1| :pattern ( (Tclass._System.___hTotalFunc2SSO_1 arg0@@455)) )))
(assert (forall ((|#$T0@@327| T@U) (|#$T1@@263| T@U) (|#$R@@353| T@U) ) (!  (=> (and (and (= (type |#$T0@@327|) TyType) (= (type |#$T1@@263|) TyType)) (= (type |#$R@@353|) TyType)) (= (Tclass._System.___hTotalFunc2SSO_1 (Tclass._System.___hTotalFunc2SSO |#$T0@@327| |#$T1@@263| |#$R@@353|)) |#$T1@@263|)) :qid |unknown.0:0| :skolemid |1396| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@327| |#$T1@@263| |#$R@@353|)) )))
(assert (forall ((arg0@@456 T@U) ) (! (= (type (Tclass._System.___hTotalFunc2SSO_2 arg0@@456)) TyType) :qid |funType:Tclass._System.___hTotalFunc2SSO_2| :pattern ( (Tclass._System.___hTotalFunc2SSO_2 arg0@@456)) )))
(assert (forall ((|#$T0@@328| T@U) (|#$T1@@264| T@U) (|#$R@@354| T@U) ) (!  (=> (and (and (= (type |#$T0@@328|) TyType) (= (type |#$T1@@264|) TyType)) (= (type |#$R@@354|) TyType)) (= (Tclass._System.___hTotalFunc2SSO_2 (Tclass._System.___hTotalFunc2SSO |#$T0@@328| |#$T1@@264| |#$R@@354|)) |#$R@@354|)) :qid |unknown.0:0| :skolemid |1397| :pattern ( (Tclass._System.___hTotalFunc2SSO |#$T0@@328| |#$T1@@264| |#$R@@354|)) )))
(assert (forall ((|#$T0@@329| T@U) (|#$T1@@265| T@U) (|#$R@@355| T@U) (bx@@132 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@329|) TyType) (= (type |#$T1@@265|) TyType)) (= (type |#$R@@355|) TyType)) (= (type bx@@132) BoxType)) ($IsBox bx@@132 (Tclass._System.___hTotalFunc2SSO |#$T0@@329| |#$T1@@265| |#$R@@355|))) (and (= ($Box ($Unbox HandleTypeType bx@@132)) bx@@132) ($Is ($Unbox HandleTypeType bx@@132) (Tclass._System.___hTotalFunc2SSO |#$T0@@329| |#$T1@@265| |#$R@@355|)))) :qid |unknown.0:0| :skolemid |1398| :pattern ( ($IsBox bx@@132 (Tclass._System.___hTotalFunc2SSO |#$T0@@329| |#$T1@@265| |#$R@@355|))) )))
(assert (forall ((|#$T0@@330| T@U) (|#$T1@@266| T@U) (|#$R@@356| T@U) (|f#0@@65| T@U) ) (!  (=> (and (and (and (= (type |#$T0@@330|) TyType) (= (type |#$T1@@266|) TyType)) (= (type |#$R@@356|) TyType)) (= (type |f#0@@65|) HandleTypeType)) (= ($Is |f#0@@65| (Tclass._System.___hTotalFunc2SSO |#$T0@@330| |#$T1@@266| |#$R@@356|))  (and ($Is |f#0@@65| (Tclass._System.___hPartialFunc2SSO |#$T0@@330| |#$T1@@266| |#$R@@356|)) (forall ((|x0#0@@28| T@U) (|x1#0@@20| T@U) ) (!  (=> (and (and (= (type |x0#0@@28|) BoxType) (= (type |x1#0@@20|) BoxType)) (and ($IsBox |x0#0@@28| |#$T0@@330|) ($IsBox |x1#0@@20| |#$T1@@266|))) (Requires2 |#$T0@@330| |#$T1@@266| |#$R@@356| $OneHeap |f#0@@65| |x0#0@@28| |x1#0@@20|)) :qid |unknown.0:0| :skolemid |1399| :no-pattern (type |x0#0@@28|) :no-pattern (type |x1#0@@20|) :no-pattern (U_2_int |x0#0@@28|) :no-pattern (U_2_bool |x0#0@@28|) :no-pattern (U_2_int |x1#0@@20|) :no-pattern (U_2_bool |x1#0@@20|) ))))) :qid |unknown.0:0| :skolemid |1400| :pattern ( ($Is |f#0@@65| (Tclass._System.___hTotalFunc2SSO |#$T0@@330| |#$T1@@266| |#$R@@356|))) )))
(assert (forall ((|#$T0@@331| T@U) (|#$T1@@267| T@U) (|#$R@@357| T@U) (|f#0@@66| T@U) ($h@@48 T@U) ) (!  (=> (and (and (and (and (= (type |#$T0@@331|) TyType) (= (type |#$T1@@267|) TyType)) (= (type |#$R@@357|) TyType)) (= (type |f#0@@66|) HandleTypeType)) (= (type $h@@48) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@66| (Tclass._System.___hTotalFunc2SSO |#$T0@@331| |#$T1@@267| |#$R@@357|) $h@@48) ($IsAlloc |f#0@@66| (Tclass._System.___hPartialFunc2SSO |#$T0@@331| |#$T1@@267| |#$R@@357|) $h@@48))) :qid |unknown.0:0| :skolemid |1401| :pattern ( ($IsAlloc |f#0@@66| (Tclass._System.___hTotalFunc2SSO |#$T0@@331| |#$T1@@267| |#$R@@357|) $h@@48)) )))
(assert (forall ((arg0@@457 T@U) (arg1@@189 T@U) ) (! (= (type (Tclass._System.___hFunc1SS arg0@@457 arg1@@189)) TyType) :qid |funType:Tclass._System.___hFunc1SS| :pattern ( (Tclass._System.___hFunc1SS arg0@@457 arg1@@189)) )))
(assert (forall ((|#$T0@@332| T@U) (|#$R@@358| T@U) ) (!  (=> (and (= (type |#$T0@@332|) TyType) (= (type |#$R@@358|) TyType)) (and (= (Tag (Tclass._System.___hFunc1SS |#$T0@@332| |#$R@@358|)) Tagclass._System.___hFunc1SS) (= (TagFamily (Tclass._System.___hFunc1SS |#$T0@@332| |#$R@@358|)) |tytagFamily$_#Func1SS|))) :qid |unknown.0:0| :skolemid |1402| :pattern ( (Tclass._System.___hFunc1SS |#$T0@@332| |#$R@@358|)) )))
(assert (forall ((arg0@@458 T@U) ) (! (= (type (Tclass._System.___hFunc1SS_0 arg0@@458)) TyType) :qid |funType:Tclass._System.___hFunc1SS_0| :pattern ( (Tclass._System.___hFunc1SS_0 arg0@@458)) )))
(assert (forall ((|#$T0@@333| T@U) (|#$R@@359| T@U) ) (!  (=> (and (= (type |#$T0@@333|) TyType) (= (type |#$R@@359|) TyType)) (= (Tclass._System.___hFunc1SS_0 (Tclass._System.___hFunc1SS |#$T0@@333| |#$R@@359|)) |#$T0@@333|)) :qid |unknown.0:0| :skolemid |1403| :pattern ( (Tclass._System.___hFunc1SS |#$T0@@333| |#$R@@359|)) )))
(assert (forall ((arg0@@459 T@U) ) (! (= (type (Tclass._System.___hFunc1SS_1 arg0@@459)) TyType) :qid |funType:Tclass._System.___hFunc1SS_1| :pattern ( (Tclass._System.___hFunc1SS_1 arg0@@459)) )))
(assert (forall ((|#$T0@@334| T@U) (|#$R@@360| T@U) ) (!  (=> (and (= (type |#$T0@@334|) TyType) (= (type |#$R@@360|) TyType)) (= (Tclass._System.___hFunc1SS_1 (Tclass._System.___hFunc1SS |#$T0@@334| |#$R@@360|)) |#$R@@360|)) :qid |unknown.0:0| :skolemid |1404| :pattern ( (Tclass._System.___hFunc1SS |#$T0@@334| |#$R@@360|)) )))
(assert (forall ((|#$T0@@335| T@U) (|#$R@@361| T@U) (bx@@133 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@335|) TyType) (= (type |#$R@@361|) TyType)) (= (type bx@@133) BoxType)) ($IsBox bx@@133 (Tclass._System.___hFunc1SS |#$T0@@335| |#$R@@361|))) (and (= ($Box ($Unbox HandleTypeType bx@@133)) bx@@133) ($Is ($Unbox HandleTypeType bx@@133) (Tclass._System.___hFunc1SS |#$T0@@335| |#$R@@361|)))) :qid |unknown.0:0| :skolemid |1405| :pattern ( ($IsBox bx@@133 (Tclass._System.___hFunc1SS |#$T0@@335| |#$R@@361|))) )))
(assert (forall ((arg0@@460 T@U) (arg1@@190 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1SS arg0@@460 arg1@@190)) TyType) :qid |funType:Tclass._System.___hPartialFunc1SS| :pattern ( (Tclass._System.___hPartialFunc1SS arg0@@460 arg1@@190)) )))
(assert (forall ((|#$T0@@336| T@U) (|#$R@@362| T@U) ) (!  (=> (and (= (type |#$T0@@336|) TyType) (= (type |#$R@@362|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1SS |#$T0@@336| |#$R@@362|)) Tagclass._System.___hPartialFunc1SS) (= (TagFamily (Tclass._System.___hPartialFunc1SS |#$T0@@336| |#$R@@362|)) |tytagFamily$_#PartialFunc1SS|))) :qid |unknown.0:0| :skolemid |1406| :pattern ( (Tclass._System.___hPartialFunc1SS |#$T0@@336| |#$R@@362|)) )))
(assert (forall ((arg0@@461 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1SS_0 arg0@@461)) TyType) :qid |funType:Tclass._System.___hPartialFunc1SS_0| :pattern ( (Tclass._System.___hPartialFunc1SS_0 arg0@@461)) )))
(assert (forall ((|#$T0@@337| T@U) (|#$R@@363| T@U) ) (!  (=> (and (= (type |#$T0@@337|) TyType) (= (type |#$R@@363|) TyType)) (= (Tclass._System.___hPartialFunc1SS_0 (Tclass._System.___hPartialFunc1SS |#$T0@@337| |#$R@@363|)) |#$T0@@337|)) :qid |unknown.0:0| :skolemid |1407| :pattern ( (Tclass._System.___hPartialFunc1SS |#$T0@@337| |#$R@@363|)) )))
(assert (forall ((arg0@@462 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1SS_1 arg0@@462)) TyType) :qid |funType:Tclass._System.___hPartialFunc1SS_1| :pattern ( (Tclass._System.___hPartialFunc1SS_1 arg0@@462)) )))
(assert (forall ((|#$T0@@338| T@U) (|#$R@@364| T@U) ) (!  (=> (and (= (type |#$T0@@338|) TyType) (= (type |#$R@@364|) TyType)) (= (Tclass._System.___hPartialFunc1SS_1 (Tclass._System.___hPartialFunc1SS |#$T0@@338| |#$R@@364|)) |#$R@@364|)) :qid |unknown.0:0| :skolemid |1408| :pattern ( (Tclass._System.___hPartialFunc1SS |#$T0@@338| |#$R@@364|)) )))
(assert (forall ((|#$T0@@339| T@U) (|#$R@@365| T@U) (bx@@134 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@339|) TyType) (= (type |#$R@@365|) TyType)) (= (type bx@@134) BoxType)) ($IsBox bx@@134 (Tclass._System.___hPartialFunc1SS |#$T0@@339| |#$R@@365|))) (and (= ($Box ($Unbox HandleTypeType bx@@134)) bx@@134) ($Is ($Unbox HandleTypeType bx@@134) (Tclass._System.___hPartialFunc1SS |#$T0@@339| |#$R@@365|)))) :qid |unknown.0:0| :skolemid |1409| :pattern ( ($IsBox bx@@134 (Tclass._System.___hPartialFunc1SS |#$T0@@339| |#$R@@365|))) )))
(assert (forall ((|#$T0@@340| T@U) (|#$R@@366| T@U) (|f#0@@67| T@U) ) (!  (=> (and (and (= (type |#$T0@@340|) TyType) (= (type |#$R@@366|) TyType)) (= (type |f#0@@67|) HandleTypeType)) (= ($Is |f#0@@67| (Tclass._System.___hPartialFunc1SS |#$T0@@340| |#$R@@366|))  (and ($Is |f#0@@67| (Tclass._System.___hFunc1SS |#$T0@@340| |#$R@@366|)) (forall ((|x0#0@@29| T@U) ) (!  (=> (and (= (type |x0#0@@29|) BoxType) ($IsBox |x0#0@@29| |#$T0@@340|)) (|Set#Equal| (Reads1 |#$T0@@340| |#$R@@366| $OneHeap |f#0@@67| |x0#0@@29|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1410| :no-pattern (type |x0#0@@29|) :no-pattern (U_2_int |x0#0@@29|) :no-pattern (U_2_bool |x0#0@@29|) ))))) :qid |unknown.0:0| :skolemid |1411| :pattern ( ($Is |f#0@@67| (Tclass._System.___hPartialFunc1SS |#$T0@@340| |#$R@@366|))) )))
(assert (forall ((|#$T0@@341| T@U) (|#$R@@367| T@U) (|f#0@@68| T@U) ($h@@49 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@341|) TyType) (= (type |#$R@@367|) TyType)) (= (type |f#0@@68|) HandleTypeType)) (= (type $h@@49) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@68| (Tclass._System.___hPartialFunc1SS |#$T0@@341| |#$R@@367|) $h@@49) ($IsAlloc |f#0@@68| (Tclass._System.___hFunc1SS |#$T0@@341| |#$R@@367|) $h@@49))) :qid |unknown.0:0| :skolemid |1412| :pattern ( ($IsAlloc |f#0@@68| (Tclass._System.___hPartialFunc1SS |#$T0@@341| |#$R@@367|) $h@@49)) )))
(assert (forall ((arg0@@463 T@U) (arg1@@191 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1SS arg0@@463 arg1@@191)) TyType) :qid |funType:Tclass._System.___hTotalFunc1SS| :pattern ( (Tclass._System.___hTotalFunc1SS arg0@@463 arg1@@191)) )))
(assert (forall ((|#$T0@@342| T@U) (|#$R@@368| T@U) ) (!  (=> (and (= (type |#$T0@@342|) TyType) (= (type |#$R@@368|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1SS |#$T0@@342| |#$R@@368|)) Tagclass._System.___hTotalFunc1SS) (= (TagFamily (Tclass._System.___hTotalFunc1SS |#$T0@@342| |#$R@@368|)) |tytagFamily$_#TotalFunc1SS|))) :qid |unknown.0:0| :skolemid |1413| :pattern ( (Tclass._System.___hTotalFunc1SS |#$T0@@342| |#$R@@368|)) )))
(assert (forall ((arg0@@464 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1SS_0 arg0@@464)) TyType) :qid |funType:Tclass._System.___hTotalFunc1SS_0| :pattern ( (Tclass._System.___hTotalFunc1SS_0 arg0@@464)) )))
(assert (forall ((|#$T0@@343| T@U) (|#$R@@369| T@U) ) (!  (=> (and (= (type |#$T0@@343|) TyType) (= (type |#$R@@369|) TyType)) (= (Tclass._System.___hTotalFunc1SS_0 (Tclass._System.___hTotalFunc1SS |#$T0@@343| |#$R@@369|)) |#$T0@@343|)) :qid |unknown.0:0| :skolemid |1414| :pattern ( (Tclass._System.___hTotalFunc1SS |#$T0@@343| |#$R@@369|)) )))
(assert (forall ((arg0@@465 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1SS_1 arg0@@465)) TyType) :qid |funType:Tclass._System.___hTotalFunc1SS_1| :pattern ( (Tclass._System.___hTotalFunc1SS_1 arg0@@465)) )))
(assert (forall ((|#$T0@@344| T@U) (|#$R@@370| T@U) ) (!  (=> (and (= (type |#$T0@@344|) TyType) (= (type |#$R@@370|) TyType)) (= (Tclass._System.___hTotalFunc1SS_1 (Tclass._System.___hTotalFunc1SS |#$T0@@344| |#$R@@370|)) |#$R@@370|)) :qid |unknown.0:0| :skolemid |1415| :pattern ( (Tclass._System.___hTotalFunc1SS |#$T0@@344| |#$R@@370|)) )))
(assert (forall ((|#$T0@@345| T@U) (|#$R@@371| T@U) (bx@@135 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@345|) TyType) (= (type |#$R@@371|) TyType)) (= (type bx@@135) BoxType)) ($IsBox bx@@135 (Tclass._System.___hTotalFunc1SS |#$T0@@345| |#$R@@371|))) (and (= ($Box ($Unbox HandleTypeType bx@@135)) bx@@135) ($Is ($Unbox HandleTypeType bx@@135) (Tclass._System.___hTotalFunc1SS |#$T0@@345| |#$R@@371|)))) :qid |unknown.0:0| :skolemid |1416| :pattern ( ($IsBox bx@@135 (Tclass._System.___hTotalFunc1SS |#$T0@@345| |#$R@@371|))) )))
(assert (forall ((|#$T0@@346| T@U) (|#$R@@372| T@U) (|f#0@@69| T@U) ) (!  (=> (and (and (= (type |#$T0@@346|) TyType) (= (type |#$R@@372|) TyType)) (= (type |f#0@@69|) HandleTypeType)) (= ($Is |f#0@@69| (Tclass._System.___hTotalFunc1SS |#$T0@@346| |#$R@@372|))  (and ($Is |f#0@@69| (Tclass._System.___hPartialFunc1SS |#$T0@@346| |#$R@@372|)) (forall ((|x0#0@@30| T@U) ) (!  (=> (and (= (type |x0#0@@30|) BoxType) ($IsBox |x0#0@@30| |#$T0@@346|)) (Requires1 |#$T0@@346| |#$R@@372| $OneHeap |f#0@@69| |x0#0@@30|)) :qid |unknown.0:0| :skolemid |1417| :no-pattern (type |x0#0@@30|) :no-pattern (U_2_int |x0#0@@30|) :no-pattern (U_2_bool |x0#0@@30|) ))))) :qid |unknown.0:0| :skolemid |1418| :pattern ( ($Is |f#0@@69| (Tclass._System.___hTotalFunc1SS |#$T0@@346| |#$R@@372|))) )))
(assert (forall ((|#$T0@@347| T@U) (|#$R@@373| T@U) (|f#0@@70| T@U) ($h@@50 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@347|) TyType) (= (type |#$R@@373|) TyType)) (= (type |f#0@@70|) HandleTypeType)) (= (type $h@@50) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@70| (Tclass._System.___hTotalFunc1SS |#$T0@@347| |#$R@@373|) $h@@50) ($IsAlloc |f#0@@70| (Tclass._System.___hPartialFunc1SS |#$T0@@347| |#$R@@373|) $h@@50))) :qid |unknown.0:0| :skolemid |1419| :pattern ( ($IsAlloc |f#0@@70| (Tclass._System.___hTotalFunc1SS |#$T0@@347| |#$R@@373|) $h@@50)) )))
(assert (forall ((arg0@@466 T@U) (arg1@@192 T@U) ) (! (= (type (Tclass._System.___hFunc1LL arg0@@466 arg1@@192)) TyType) :qid |funType:Tclass._System.___hFunc1LL| :pattern ( (Tclass._System.___hFunc1LL arg0@@466 arg1@@192)) )))
(assert (forall ((|#$T0@@348| T@U) (|#$R@@374| T@U) ) (!  (=> (and (= (type |#$T0@@348|) TyType) (= (type |#$R@@374|) TyType)) (and (= (Tag (Tclass._System.___hFunc1LL |#$T0@@348| |#$R@@374|)) Tagclass._System.___hFunc1LL) (= (TagFamily (Tclass._System.___hFunc1LL |#$T0@@348| |#$R@@374|)) |tytagFamily$_#Func1LL|))) :qid |unknown.0:0| :skolemid |1420| :pattern ( (Tclass._System.___hFunc1LL |#$T0@@348| |#$R@@374|)) )))
(assert (forall ((arg0@@467 T@U) ) (! (= (type (Tclass._System.___hFunc1LL_0 arg0@@467)) TyType) :qid |funType:Tclass._System.___hFunc1LL_0| :pattern ( (Tclass._System.___hFunc1LL_0 arg0@@467)) )))
(assert (forall ((|#$T0@@349| T@U) (|#$R@@375| T@U) ) (!  (=> (and (= (type |#$T0@@349|) TyType) (= (type |#$R@@375|) TyType)) (= (Tclass._System.___hFunc1LL_0 (Tclass._System.___hFunc1LL |#$T0@@349| |#$R@@375|)) |#$T0@@349|)) :qid |unknown.0:0| :skolemid |1421| :pattern ( (Tclass._System.___hFunc1LL |#$T0@@349| |#$R@@375|)) )))
(assert (forall ((arg0@@468 T@U) ) (! (= (type (Tclass._System.___hFunc1LL_1 arg0@@468)) TyType) :qid |funType:Tclass._System.___hFunc1LL_1| :pattern ( (Tclass._System.___hFunc1LL_1 arg0@@468)) )))
(assert (forall ((|#$T0@@350| T@U) (|#$R@@376| T@U) ) (!  (=> (and (= (type |#$T0@@350|) TyType) (= (type |#$R@@376|) TyType)) (= (Tclass._System.___hFunc1LL_1 (Tclass._System.___hFunc1LL |#$T0@@350| |#$R@@376|)) |#$R@@376|)) :qid |unknown.0:0| :skolemid |1422| :pattern ( (Tclass._System.___hFunc1LL |#$T0@@350| |#$R@@376|)) )))
(assert (forall ((|#$T0@@351| T@U) (|#$R@@377| T@U) (bx@@136 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@351|) TyType) (= (type |#$R@@377|) TyType)) (= (type bx@@136) BoxType)) ($IsBox bx@@136 (Tclass._System.___hFunc1LL |#$T0@@351| |#$R@@377|))) (and (= ($Box ($Unbox HandleTypeType bx@@136)) bx@@136) ($Is ($Unbox HandleTypeType bx@@136) (Tclass._System.___hFunc1LL |#$T0@@351| |#$R@@377|)))) :qid |unknown.0:0| :skolemid |1423| :pattern ( ($IsBox bx@@136 (Tclass._System.___hFunc1LL |#$T0@@351| |#$R@@377|))) )))
(assert (forall ((arg0@@469 T@U) (arg1@@193 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LL arg0@@469 arg1@@193)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LL| :pattern ( (Tclass._System.___hPartialFunc1LL arg0@@469 arg1@@193)) )))
(assert (forall ((|#$T0@@352| T@U) (|#$R@@378| T@U) ) (!  (=> (and (= (type |#$T0@@352|) TyType) (= (type |#$R@@378|) TyType)) (and (= (Tag (Tclass._System.___hPartialFunc1LL |#$T0@@352| |#$R@@378|)) Tagclass._System.___hPartialFunc1LL) (= (TagFamily (Tclass._System.___hPartialFunc1LL |#$T0@@352| |#$R@@378|)) |tytagFamily$_#PartialFunc1LL|))) :qid |unknown.0:0| :skolemid |1424| :pattern ( (Tclass._System.___hPartialFunc1LL |#$T0@@352| |#$R@@378|)) )))
(assert (forall ((arg0@@470 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LL_0 arg0@@470)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LL_0| :pattern ( (Tclass._System.___hPartialFunc1LL_0 arg0@@470)) )))
(assert (forall ((|#$T0@@353| T@U) (|#$R@@379| T@U) ) (!  (=> (and (= (type |#$T0@@353|) TyType) (= (type |#$R@@379|) TyType)) (= (Tclass._System.___hPartialFunc1LL_0 (Tclass._System.___hPartialFunc1LL |#$T0@@353| |#$R@@379|)) |#$T0@@353|)) :qid |unknown.0:0| :skolemid |1425| :pattern ( (Tclass._System.___hPartialFunc1LL |#$T0@@353| |#$R@@379|)) )))
(assert (forall ((arg0@@471 T@U) ) (! (= (type (Tclass._System.___hPartialFunc1LL_1 arg0@@471)) TyType) :qid |funType:Tclass._System.___hPartialFunc1LL_1| :pattern ( (Tclass._System.___hPartialFunc1LL_1 arg0@@471)) )))
(assert (forall ((|#$T0@@354| T@U) (|#$R@@380| T@U) ) (!  (=> (and (= (type |#$T0@@354|) TyType) (= (type |#$R@@380|) TyType)) (= (Tclass._System.___hPartialFunc1LL_1 (Tclass._System.___hPartialFunc1LL |#$T0@@354| |#$R@@380|)) |#$R@@380|)) :qid |unknown.0:0| :skolemid |1426| :pattern ( (Tclass._System.___hPartialFunc1LL |#$T0@@354| |#$R@@380|)) )))
(assert (forall ((|#$T0@@355| T@U) (|#$R@@381| T@U) (bx@@137 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@355|) TyType) (= (type |#$R@@381|) TyType)) (= (type bx@@137) BoxType)) ($IsBox bx@@137 (Tclass._System.___hPartialFunc1LL |#$T0@@355| |#$R@@381|))) (and (= ($Box ($Unbox HandleTypeType bx@@137)) bx@@137) ($Is ($Unbox HandleTypeType bx@@137) (Tclass._System.___hPartialFunc1LL |#$T0@@355| |#$R@@381|)))) :qid |unknown.0:0| :skolemid |1427| :pattern ( ($IsBox bx@@137 (Tclass._System.___hPartialFunc1LL |#$T0@@355| |#$R@@381|))) )))
(assert (forall ((|#$T0@@356| T@U) (|#$R@@382| T@U) (|f#0@@71| T@U) ) (!  (=> (and (and (= (type |#$T0@@356|) TyType) (= (type |#$R@@382|) TyType)) (= (type |f#0@@71|) HandleTypeType)) (= ($Is |f#0@@71| (Tclass._System.___hPartialFunc1LL |#$T0@@356| |#$R@@382|))  (and ($Is |f#0@@71| (Tclass._System.___hFunc1LL |#$T0@@356| |#$R@@382|)) (forall ((|x0#0@@31| T@U) ) (!  (=> (and (= (type |x0#0@@31|) BoxType) ($IsBox |x0#0@@31| |#$T0@@356|)) (|Set#Equal| (Reads1 |#$T0@@356| |#$R@@382| $OneHeap |f#0@@71| |x0#0@@31|) (|Set#Empty| BoxType))) :qid |unknown.0:0| :skolemid |1428| :no-pattern (type |x0#0@@31|) :no-pattern (U_2_int |x0#0@@31|) :no-pattern (U_2_bool |x0#0@@31|) ))))) :qid |unknown.0:0| :skolemid |1429| :pattern ( ($Is |f#0@@71| (Tclass._System.___hPartialFunc1LL |#$T0@@356| |#$R@@382|))) )))
(assert (forall ((|#$T0@@357| T@U) (|#$R@@383| T@U) (|f#0@@72| T@U) ($h@@51 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@357|) TyType) (= (type |#$R@@383|) TyType)) (= (type |f#0@@72|) HandleTypeType)) (= (type $h@@51) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@72| (Tclass._System.___hPartialFunc1LL |#$T0@@357| |#$R@@383|) $h@@51) ($IsAlloc |f#0@@72| (Tclass._System.___hFunc1LL |#$T0@@357| |#$R@@383|) $h@@51))) :qid |unknown.0:0| :skolemid |1430| :pattern ( ($IsAlloc |f#0@@72| (Tclass._System.___hPartialFunc1LL |#$T0@@357| |#$R@@383|) $h@@51)) )))
(assert (forall ((arg0@@472 T@U) (arg1@@194 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LL arg0@@472 arg1@@194)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LL| :pattern ( (Tclass._System.___hTotalFunc1LL arg0@@472 arg1@@194)) )))
(assert (forall ((|#$T0@@358| T@U) (|#$R@@384| T@U) ) (!  (=> (and (= (type |#$T0@@358|) TyType) (= (type |#$R@@384|) TyType)) (and (= (Tag (Tclass._System.___hTotalFunc1LL |#$T0@@358| |#$R@@384|)) Tagclass._System.___hTotalFunc1LL) (= (TagFamily (Tclass._System.___hTotalFunc1LL |#$T0@@358| |#$R@@384|)) |tytagFamily$_#TotalFunc1LL|))) :qid |unknown.0:0| :skolemid |1431| :pattern ( (Tclass._System.___hTotalFunc1LL |#$T0@@358| |#$R@@384|)) )))
(assert (forall ((arg0@@473 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LL_0 arg0@@473)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LL_0| :pattern ( (Tclass._System.___hTotalFunc1LL_0 arg0@@473)) )))
(assert (forall ((|#$T0@@359| T@U) (|#$R@@385| T@U) ) (!  (=> (and (= (type |#$T0@@359|) TyType) (= (type |#$R@@385|) TyType)) (= (Tclass._System.___hTotalFunc1LL_0 (Tclass._System.___hTotalFunc1LL |#$T0@@359| |#$R@@385|)) |#$T0@@359|)) :qid |unknown.0:0| :skolemid |1432| :pattern ( (Tclass._System.___hTotalFunc1LL |#$T0@@359| |#$R@@385|)) )))
(assert (forall ((arg0@@474 T@U) ) (! (= (type (Tclass._System.___hTotalFunc1LL_1 arg0@@474)) TyType) :qid |funType:Tclass._System.___hTotalFunc1LL_1| :pattern ( (Tclass._System.___hTotalFunc1LL_1 arg0@@474)) )))
(assert (forall ((|#$T0@@360| T@U) (|#$R@@386| T@U) ) (!  (=> (and (= (type |#$T0@@360|) TyType) (= (type |#$R@@386|) TyType)) (= (Tclass._System.___hTotalFunc1LL_1 (Tclass._System.___hTotalFunc1LL |#$T0@@360| |#$R@@386|)) |#$R@@386|)) :qid |unknown.0:0| :skolemid |1433| :pattern ( (Tclass._System.___hTotalFunc1LL |#$T0@@360| |#$R@@386|)) )))
(assert (forall ((|#$T0@@361| T@U) (|#$R@@387| T@U) (bx@@138 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@361|) TyType) (= (type |#$R@@387|) TyType)) (= (type bx@@138) BoxType)) ($IsBox bx@@138 (Tclass._System.___hTotalFunc1LL |#$T0@@361| |#$R@@387|))) (and (= ($Box ($Unbox HandleTypeType bx@@138)) bx@@138) ($Is ($Unbox HandleTypeType bx@@138) (Tclass._System.___hTotalFunc1LL |#$T0@@361| |#$R@@387|)))) :qid |unknown.0:0| :skolemid |1434| :pattern ( ($IsBox bx@@138 (Tclass._System.___hTotalFunc1LL |#$T0@@361| |#$R@@387|))) )))
(assert (forall ((|#$T0@@362| T@U) (|#$R@@388| T@U) (|f#0@@73| T@U) ) (!  (=> (and (and (= (type |#$T0@@362|) TyType) (= (type |#$R@@388|) TyType)) (= (type |f#0@@73|) HandleTypeType)) (= ($Is |f#0@@73| (Tclass._System.___hTotalFunc1LL |#$T0@@362| |#$R@@388|))  (and ($Is |f#0@@73| (Tclass._System.___hPartialFunc1LL |#$T0@@362| |#$R@@388|)) (forall ((|x0#0@@32| T@U) ) (!  (=> (and (= (type |x0#0@@32|) BoxType) ($IsBox |x0#0@@32| |#$T0@@362|)) (Requires1 |#$T0@@362| |#$R@@388| $OneHeap |f#0@@73| |x0#0@@32|)) :qid |unknown.0:0| :skolemid |1435| :no-pattern (type |x0#0@@32|) :no-pattern (U_2_int |x0#0@@32|) :no-pattern (U_2_bool |x0#0@@32|) ))))) :qid |unknown.0:0| :skolemid |1436| :pattern ( ($Is |f#0@@73| (Tclass._System.___hTotalFunc1LL |#$T0@@362| |#$R@@388|))) )))
(assert (forall ((|#$T0@@363| T@U) (|#$R@@389| T@U) (|f#0@@74| T@U) ($h@@52 T@U) ) (!  (=> (and (and (and (= (type |#$T0@@363|) TyType) (= (type |#$R@@389|) TyType)) (= (type |f#0@@74|) HandleTypeType)) (= (type $h@@52) (MapType0Type refType MapType1Type))) (= ($IsAlloc |f#0@@74| (Tclass._System.___hTotalFunc1LL |#$T0@@363| |#$R@@389|) $h@@52) ($IsAlloc |f#0@@74| (Tclass._System.___hPartialFunc1LL |#$T0@@363| |#$R@@389|) $h@@52))) :qid |unknown.0:0| :skolemid |1437| :pattern ( ($IsAlloc |f#0@@74| (Tclass._System.___hTotalFunc1LL |#$T0@@363| |#$R@@389|) $h@@52)) )))
(assert (forall ((arg0@@475 T@U) (arg1@@195 T@U) (arg2@@130 Int) ) (! (= (type (|#BucketFlushModel.singleMergeResult.MergeCompleted| arg0@@475 arg1@@195 arg2@@130)) DatatypeTypeType) :qid |funType:#BucketFlushModel.singleMergeResult.MergeCompleted| :pattern ( (|#BucketFlushModel.singleMergeResult.MergeCompleted| arg0@@475 arg1@@195 arg2@@130)) )))
(assert (forall ((|a#23#0#0| T@U) (|a#23#1#0| T@U) (|a#23#2#0| Int) ) (!  (=> (and (= (type |a#23#0#0|) (SeqType BoxType)) (= (type |a#23#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#BucketFlushModel.singleMergeResult.MergeCompleted| |a#23#0#0| |a#23#1#0| |a#23#2#0|)) |##BucketFlushModel.singleMergeResult.MergeCompleted|)) :qid |BucketFlushModelidfy.34:15| :skolemid |1438| :pattern ( (|#BucketFlushModel.singleMergeResult.MergeCompleted| |a#23#0#0| |a#23#1#0| |a#23#2#0|)) )))
(assert (forall ((d@@16 T@U) ) (!  (=> (= (type d@@16) DatatypeTypeType) (= (BucketFlushModel.singleMergeResult.MergeCompleted_q d@@16) (= (DatatypeCtorId d@@16) |##BucketFlushModel.singleMergeResult.MergeCompleted|))) :qid |unknown.0:0| :skolemid |1439| :pattern ( (BucketFlushModel.singleMergeResult.MergeCompleted_q d@@16)) )))
(assert (forall ((d@@17 T@U) ) (!  (=> (and (= (type d@@17) DatatypeTypeType) (BucketFlushModel.singleMergeResult.MergeCompleted_q d@@17)) (exists ((|a#24#0#0| T@U) (|a#24#1#0| T@U) (|a#24#2#0| Int) ) (!  (and (and (= (type |a#24#0#0|) (SeqType BoxType)) (= (type |a#24#1#0|) (SeqType BoxType))) (= d@@17 (|#BucketFlushModel.singleMergeResult.MergeCompleted| |a#24#0#0| |a#24#1#0| |a#24#2#0|))) :qid |BucketFlushModelidfy.34:15| :skolemid |1440| :no-pattern (type |a#24#0#0|) :no-pattern (type |a#24#1#0|) :no-pattern (U_2_int |a#24#0#0|) :no-pattern (U_2_bool |a#24#0#0|) :no-pattern (U_2_int |a#24#1#0|) :no-pattern (U_2_bool |a#24#1#0|) ))) :qid |unknown.0:0| :skolemid |1441| :pattern ( (BucketFlushModel.singleMergeResult.MergeCompleted_q d@@17)) )))
(assert (= (type Tclass.KeyType.Key) TyType))
(assert (= (Tag Tclass.KeyType.Key) Tagclass.KeyType.Key))
(assert (= (TagFamily Tclass.KeyType.Key) tytagFamily$Key))
(assert (forall ((bx@@139 T@U) ) (!  (=> (and (= (type bx@@139) BoxType) ($IsBox bx@@139 Tclass.KeyType.Key)) (and (= ($Box ($Unbox (SeqType BoxType) bx@@139)) bx@@139) ($Is ($Unbox (SeqType BoxType) bx@@139) Tclass.KeyType.Key))) :qid |unknown.0:0| :skolemid |1442| :pattern ( ($IsBox bx@@139 Tclass.KeyType.Key)) )))
(assert (= (type Tclass.ValueMessage.Message) TyType))
(assert (= (Tag Tclass.ValueMessage.Message) Tagclass.ValueMessage.Message))
(assert (= (TagFamily Tclass.ValueMessage.Message) tytagFamily$Message))
(assert (forall ((bx@@140 T@U) ) (!  (=> (and (= (type bx@@140) BoxType) ($IsBox bx@@140 Tclass.ValueMessage.Message)) (and (= ($Box ($Unbox DatatypeTypeType bx@@140)) bx@@140) ($Is ($Unbox DatatypeTypeType bx@@140) Tclass.ValueMessage.Message))) :qid |unknown.0:0| :skolemid |1443| :pattern ( ($IsBox bx@@140 Tclass.ValueMessage.Message)) )))
(assert (= (type Tclass.BucketFlushModel.singleMergeResult) TyType))
(assert (= (Tag Tclass.BucketFlushModel.singleMergeResult) Tagclass.BucketFlushModel.singleMergeResult))
(assert (= (TagFamily Tclass.BucketFlushModel.singleMergeResult) tytagFamily$singleMergeResult))
(assert (forall ((bx@@141 T@U) ) (!  (=> (and (= (type bx@@141) BoxType) ($IsBox bx@@141 Tclass.BucketFlushModel.singleMergeResult)) (and (= ($Box ($Unbox DatatypeTypeType bx@@141)) bx@@141) ($Is ($Unbox DatatypeTypeType bx@@141) Tclass.BucketFlushModel.singleMergeResult))) :qid |unknown.0:0| :skolemid |1444| :pattern ( ($IsBox bx@@141 Tclass.BucketFlushModel.singleMergeResult)) )))
(assert (forall ((|a#25#0#0| T@U) (|a#25#1#0| T@U) (|a#25#2#0| Int) ) (!  (=> (and (= (type |a#25#0#0|) (SeqType BoxType)) (= (type |a#25#1#0|) (SeqType BoxType))) (= ($Is (|#BucketFlushModel.singleMergeResult.MergeCompleted| |a#25#0#0| |a#25#1#0| |a#25#2#0|) Tclass.BucketFlushModel.singleMergeResult)  (and (and ($Is |a#25#0#0| (TSeq Tclass.KeyType.Key)) ($Is |a#25#1#0| (TSeq Tclass.ValueMessage.Message))) ($Is (int_2_U |a#25#2#0|) Tclass._System.nat)))) :qid |BucketFlushModelidfy.34:15| :skolemid |1445| :pattern ( ($Is (|#BucketFlushModel.singleMergeResult.MergeCompleted| |a#25#0#0| |a#25#1#0| |a#25#2#0|) Tclass.BucketFlushModel.singleMergeResult)) )))
(assert (forall ((|a#26#0#0| T@U) (|a#26#1#0| T@U) (|a#26#2#0| Int) ($h@@53 T@U) ) (!  (=> (and (and (and (= (type |a#26#0#0|) (SeqType BoxType)) (= (type |a#26#1#0|) (SeqType BoxType))) (= (type $h@@53) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@53)) (= ($IsAlloc (|#BucketFlushModel.singleMergeResult.MergeCompleted| |a#26#0#0| |a#26#1#0| |a#26#2#0|) Tclass.BucketFlushModel.singleMergeResult $h@@53)  (and (and ($IsAlloc |a#26#0#0| (TSeq Tclass.KeyType.Key) $h@@53) ($IsAlloc |a#26#1#0| (TSeq Tclass.ValueMessage.Message) $h@@53)) ($IsAlloc (int_2_U |a#26#2#0|) Tclass._System.nat $h@@53)))) :qid |BucketFlushModelidfy.34:15| :skolemid |1446| :pattern ( ($IsAlloc (|#BucketFlushModel.singleMergeResult.MergeCompleted| |a#26#0#0| |a#26#1#0| |a#26#2#0|) Tclass.BucketFlushModel.singleMergeResult $h@@53)) )))
(assert (forall ((arg0@@476 T@U) ) (! (= (type (BucketFlushModel.singleMergeResult.keys arg0@@476)) (SeqType BoxType)) :qid |funType:BucketFlushModel.singleMergeResult.keys| :pattern ( (BucketFlushModel.singleMergeResult.keys arg0@@476)) )))
(assert (forall ((d@@18 T@U) ($h@@54 T@U) ) (!  (=> (and (and (= (type d@@18) DatatypeTypeType) (= (type $h@@54) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@54) (and (BucketFlushModel.singleMergeResult.MergeCompleted_q d@@18) ($IsAlloc d@@18 Tclass.BucketFlushModel.singleMergeResult $h@@54)))) ($IsAlloc (BucketFlushModel.singleMergeResult.keys d@@18) (TSeq Tclass.KeyType.Key) $h@@54)) :qid |unknown.0:0| :skolemid |1447| :pattern ( ($IsAlloc (BucketFlushModel.singleMergeResult.keys d@@18) (TSeq Tclass.KeyType.Key) $h@@54)) )))
(assert (forall ((arg0@@477 T@U) ) (! (= (type (BucketFlushModel.singleMergeResult.msgs arg0@@477)) (SeqType BoxType)) :qid |funType:BucketFlushModel.singleMergeResult.msgs| :pattern ( (BucketFlushModel.singleMergeResult.msgs arg0@@477)) )))
(assert (forall ((d@@19 T@U) ($h@@55 T@U) ) (!  (=> (and (and (= (type d@@19) DatatypeTypeType) (= (type $h@@55) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@55) (and (BucketFlushModel.singleMergeResult.MergeCompleted_q d@@19) ($IsAlloc d@@19 Tclass.BucketFlushModel.singleMergeResult $h@@55)))) ($IsAlloc (BucketFlushModel.singleMergeResult.msgs d@@19) (TSeq Tclass.ValueMessage.Message) $h@@55)) :qid |unknown.0:0| :skolemid |1448| :pattern ( ($IsAlloc (BucketFlushModel.singleMergeResult.msgs d@@19) (TSeq Tclass.ValueMessage.Message) $h@@55)) )))
(assert (forall ((d@@20 T@U) ($h@@56 T@U) ) (!  (=> (and (and (= (type d@@20) DatatypeTypeType) (= (type $h@@56) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@56) (and (BucketFlushModel.singleMergeResult.MergeCompleted_q d@@20) ($IsAlloc d@@20 Tclass.BucketFlushModel.singleMergeResult $h@@56)))) ($IsAlloc (int_2_U (BucketFlushModel.singleMergeResult.slack d@@20)) Tclass._System.nat $h@@56)) :qid |unknown.0:0| :skolemid |1449| :pattern ( ($IsAlloc (int_2_U (BucketFlushModel.singleMergeResult.slack d@@20)) Tclass._System.nat $h@@56)) )))
(assert (forall ((|a#27#0#0| T@U) (|a#27#1#0| T@U) (|a#27#2#0| Int) ) (!  (=> (and (= (type |a#27#0#0|) (SeqType BoxType)) (= (type |a#27#1#0|) (SeqType BoxType))) (= (|#BucketFlushModel.singleMergeResult.MergeCompleted| (Lit |a#27#0#0|) (Lit |a#27#1#0|) (LitInt |a#27#2#0|)) (Lit (|#BucketFlushModel.singleMergeResult.MergeCompleted| |a#27#0#0| |a#27#1#0| |a#27#2#0|)))) :qid |BucketFlushModelidfy.34:15| :skolemid |1450| :pattern ( (|#BucketFlushModel.singleMergeResult.MergeCompleted| (Lit |a#27#0#0|) (Lit |a#27#1#0|) (LitInt |a#27#2#0|))) )))
(assert (forall ((|a#28#0#0| T@U) (|a#28#1#0| T@U) (|a#28#2#0| Int) ) (!  (=> (and (= (type |a#28#0#0|) (SeqType BoxType)) (= (type |a#28#1#0|) (SeqType BoxType))) (= (BucketFlushModel.singleMergeResult.keys (|#BucketFlushModel.singleMergeResult.MergeCompleted| |a#28#0#0| |a#28#1#0| |a#28#2#0|)) |a#28#0#0|)) :qid |BucketFlushModelidfy.34:15| :skolemid |1451| :pattern ( (|#BucketFlushModel.singleMergeResult.MergeCompleted| |a#28#0#0| |a#28#1#0| |a#28#2#0|)) )))
(assert (forall ((|a#29#0#0| T@U) (|a#29#1#0| T@U) (|a#29#2#0| Int) (i@@25 Int) ) (!  (=> (and (and (= (type |a#29#0#0|) (SeqType BoxType)) (= (type |a#29#1#0|) (SeqType BoxType))) (and (<= 0 i@@25) (< i@@25 (|Seq#Length| |a#29#0#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#29#0#0| i@@25))) (DtRank (|#BucketFlushModel.singleMergeResult.MergeCompleted| |a#29#0#0| |a#29#1#0| |a#29#2#0|)))) :qid |BucketFlushModelidfy.34:15| :skolemid |1452| :pattern ( (|Seq#Index| |a#29#0#0| i@@25) (|#BucketFlushModel.singleMergeResult.MergeCompleted| |a#29#0#0| |a#29#1#0| |a#29#2#0|)) )))
(assert (forall ((|a#30#0#0| T@U) (|a#30#1#0| T@U) (|a#30#2#0| Int) ) (!  (=> (and (= (type |a#30#0#0|) (SeqType BoxType)) (= (type |a#30#1#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#30#0#0|) (DtRank (|#BucketFlushModel.singleMergeResult.MergeCompleted| |a#30#0#0| |a#30#1#0| |a#30#2#0|)))) :qid |BucketFlushModelidfy.34:15| :skolemid |1453| :pattern ( (|#BucketFlushModel.singleMergeResult.MergeCompleted| |a#30#0#0| |a#30#1#0| |a#30#2#0|)) )))
(assert (forall ((|a#31#0#0| T@U) (|a#31#1#0| T@U) (|a#31#2#0| Int) ) (!  (=> (and (= (type |a#31#0#0|) (SeqType BoxType)) (= (type |a#31#1#0|) (SeqType BoxType))) (= (BucketFlushModel.singleMergeResult.msgs (|#BucketFlushModel.singleMergeResult.MergeCompleted| |a#31#0#0| |a#31#1#0| |a#31#2#0|)) |a#31#1#0|)) :qid |BucketFlushModelidfy.34:15| :skolemid |1454| :pattern ( (|#BucketFlushModel.singleMergeResult.MergeCompleted| |a#31#0#0| |a#31#1#0| |a#31#2#0|)) )))
(assert (forall ((|a#32#0#0| T@U) (|a#32#1#0| T@U) (|a#32#2#0| Int) (i@@26 Int) ) (!  (=> (and (and (= (type |a#32#0#0|) (SeqType BoxType)) (= (type |a#32#1#0|) (SeqType BoxType))) (and (<= 0 i@@26) (< i@@26 (|Seq#Length| |a#32#1#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#32#1#0| i@@26))) (DtRank (|#BucketFlushModel.singleMergeResult.MergeCompleted| |a#32#0#0| |a#32#1#0| |a#32#2#0|)))) :qid |BucketFlushModelidfy.34:15| :skolemid |1455| :pattern ( (|Seq#Index| |a#32#1#0| i@@26) (|#BucketFlushModel.singleMergeResult.MergeCompleted| |a#32#0#0| |a#32#1#0| |a#32#2#0|)) )))
(assert (forall ((|a#33#0#0| T@U) (|a#33#1#0| T@U) (|a#33#2#0| Int) ) (!  (=> (and (= (type |a#33#0#0|) (SeqType BoxType)) (= (type |a#33#1#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#33#1#0|) (DtRank (|#BucketFlushModel.singleMergeResult.MergeCompleted| |a#33#0#0| |a#33#1#0| |a#33#2#0|)))) :qid |BucketFlushModelidfy.34:15| :skolemid |1456| :pattern ( (|#BucketFlushModel.singleMergeResult.MergeCompleted| |a#33#0#0| |a#33#1#0| |a#33#2#0|)) )))
(assert (forall ((|a#34#0#0| T@U) (|a#34#1#0| T@U) (|a#34#2#0| Int) ) (!  (=> (and (= (type |a#34#0#0|) (SeqType BoxType)) (= (type |a#34#1#0|) (SeqType BoxType))) (= (BucketFlushModel.singleMergeResult.slack (|#BucketFlushModel.singleMergeResult.MergeCompleted| |a#34#0#0| |a#34#1#0| |a#34#2#0|)) |a#34#2#0|)) :qid |BucketFlushModelidfy.34:15| :skolemid |1457| :pattern ( (|#BucketFlushModel.singleMergeResult.MergeCompleted| |a#34#0#0| |a#34#1#0| |a#34#2#0|)) )))
(assert (forall ((arg0@@478 T@U) (arg1@@196 T@U) (arg2@@131 Int) (arg3@@96 Int) ) (! (= (type (|#BucketFlushModel.singleMergeResult.SlackExhausted| arg0@@478 arg1@@196 arg2@@131 arg3@@96)) DatatypeTypeType) :qid |funType:#BucketFlushModel.singleMergeResult.SlackExhausted| :pattern ( (|#BucketFlushModel.singleMergeResult.SlackExhausted| arg0@@478 arg1@@196 arg2@@131 arg3@@96)) )))
(assert (forall ((|a#35#0#0| T@U) (|a#35#1#0| T@U) (|a#35#2#0| Int) (|a#35#3#0| Int) ) (!  (=> (and (= (type |a#35#0#0|) (SeqType BoxType)) (= (type |a#35#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#35#0#0| |a#35#1#0| |a#35#2#0| |a#35#3#0|)) |##BucketFlushModel.singleMergeResult.SlackExhausted|)) :qid |BucketFlushModelidfy.38:15| :skolemid |1458| :pattern ( (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#35#0#0| |a#35#1#0| |a#35#2#0| |a#35#3#0|)) )))
(assert (forall ((d@@21 T@U) ) (!  (=> (= (type d@@21) DatatypeTypeType) (= (BucketFlushModel.singleMergeResult.SlackExhausted_q d@@21) (= (DatatypeCtorId d@@21) |##BucketFlushModel.singleMergeResult.SlackExhausted|))) :qid |unknown.0:0| :skolemid |1459| :pattern ( (BucketFlushModel.singleMergeResult.SlackExhausted_q d@@21)) )))
(assert (forall ((d@@22 T@U) ) (!  (=> (and (= (type d@@22) DatatypeTypeType) (BucketFlushModel.singleMergeResult.SlackExhausted_q d@@22)) (exists ((|a#36#0#0| T@U) (|a#36#1#0| T@U) (|a#36#2#0| Int) (|a#36#3#0| Int) ) (!  (and (and (= (type |a#36#0#0|) (SeqType BoxType)) (= (type |a#36#1#0|) (SeqType BoxType))) (= d@@22 (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#36#0#0| |a#36#1#0| |a#36#2#0| |a#36#3#0|))) :qid |BucketFlushModelidfy.38:15| :skolemid |1460| :no-pattern (type |a#36#0#0|) :no-pattern (type |a#36#1#0|) :no-pattern (U_2_int |a#36#0#0|) :no-pattern (U_2_bool |a#36#0#0|) :no-pattern (U_2_int |a#36#1#0|) :no-pattern (U_2_bool |a#36#1#0|) ))) :qid |unknown.0:0| :skolemid |1461| :pattern ( (BucketFlushModel.singleMergeResult.SlackExhausted_q d@@22)) )))
(assert (forall ((|a#37#0#0| T@U) (|a#37#1#0| T@U) (|a#37#2#0| Int) (|a#37#3#0| Int) ) (!  (=> (and (= (type |a#37#0#0|) (SeqType BoxType)) (= (type |a#37#1#0|) (SeqType BoxType))) (= ($Is (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#37#0#0| |a#37#1#0| |a#37#2#0| |a#37#3#0|) Tclass.BucketFlushModel.singleMergeResult)  (and (and (and ($Is |a#37#0#0| (TSeq Tclass.KeyType.Key)) ($Is |a#37#1#0| (TSeq Tclass.ValueMessage.Message))) ($Is (int_2_U |a#37#2#0|) Tclass._System.nat)) ($Is (int_2_U |a#37#3#0|) Tclass._System.nat)))) :qid |BucketFlushModelidfy.38:15| :skolemid |1462| :pattern ( ($Is (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#37#0#0| |a#37#1#0| |a#37#2#0| |a#37#3#0|) Tclass.BucketFlushModel.singleMergeResult)) )))
(assert (forall ((|a#38#0#0| T@U) (|a#38#1#0| T@U) (|a#38#2#0| Int) (|a#38#3#0| Int) ($h@@57 T@U) ) (!  (=> (and (and (and (= (type |a#38#0#0|) (SeqType BoxType)) (= (type |a#38#1#0|) (SeqType BoxType))) (= (type $h@@57) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@57)) (= ($IsAlloc (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#38#0#0| |a#38#1#0| |a#38#2#0| |a#38#3#0|) Tclass.BucketFlushModel.singleMergeResult $h@@57)  (and (and (and ($IsAlloc |a#38#0#0| (TSeq Tclass.KeyType.Key) $h@@57) ($IsAlloc |a#38#1#0| (TSeq Tclass.ValueMessage.Message) $h@@57)) ($IsAlloc (int_2_U |a#38#2#0|) Tclass._System.nat $h@@57)) ($IsAlloc (int_2_U |a#38#3#0|) Tclass._System.nat $h@@57)))) :qid |BucketFlushModelidfy.38:15| :skolemid |1463| :pattern ( ($IsAlloc (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#38#0#0| |a#38#1#0| |a#38#2#0| |a#38#3#0|) Tclass.BucketFlushModel.singleMergeResult $h@@57)) )))
(assert (forall ((d@@23 T@U) ($h@@58 T@U) ) (!  (=> (and (and (= (type d@@23) DatatypeTypeType) (= (type $h@@58) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@58) (and (BucketFlushModel.singleMergeResult.SlackExhausted_q d@@23) ($IsAlloc d@@23 Tclass.BucketFlushModel.singleMergeResult $h@@58)))) ($IsAlloc (BucketFlushModel.singleMergeResult.keys d@@23) (TSeq Tclass.KeyType.Key) $h@@58)) :qid |unknown.0:0| :skolemid |1464| :pattern ( ($IsAlloc (BucketFlushModel.singleMergeResult.keys d@@23) (TSeq Tclass.KeyType.Key) $h@@58)) )))
(assert (forall ((d@@24 T@U) ($h@@59 T@U) ) (!  (=> (and (and (= (type d@@24) DatatypeTypeType) (= (type $h@@59) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@59) (and (BucketFlushModel.singleMergeResult.SlackExhausted_q d@@24) ($IsAlloc d@@24 Tclass.BucketFlushModel.singleMergeResult $h@@59)))) ($IsAlloc (BucketFlushModel.singleMergeResult.msgs d@@24) (TSeq Tclass.ValueMessage.Message) $h@@59)) :qid |unknown.0:0| :skolemid |1465| :pattern ( ($IsAlloc (BucketFlushModel.singleMergeResult.msgs d@@24) (TSeq Tclass.ValueMessage.Message) $h@@59)) )))
(assert (forall ((d@@25 T@U) ($h@@60 T@U) ) (!  (=> (and (and (= (type d@@25) DatatypeTypeType) (= (type $h@@60) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@60) (and (BucketFlushModel.singleMergeResult.SlackExhausted_q d@@25) ($IsAlloc d@@25 Tclass.BucketFlushModel.singleMergeResult $h@@60)))) ($IsAlloc (int_2_U (BucketFlushModel.singleMergeResult.end d@@25)) Tclass._System.nat $h@@60)) :qid |unknown.0:0| :skolemid |1466| :pattern ( ($IsAlloc (int_2_U (BucketFlushModel.singleMergeResult.end d@@25)) Tclass._System.nat $h@@60)) )))
(assert (forall ((d@@26 T@U) ($h@@61 T@U) ) (!  (=> (and (and (= (type d@@26) DatatypeTypeType) (= (type $h@@61) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@61) (and (BucketFlushModel.singleMergeResult.SlackExhausted_q d@@26) ($IsAlloc d@@26 Tclass.BucketFlushModel.singleMergeResult $h@@61)))) ($IsAlloc (int_2_U (BucketFlushModel.singleMergeResult.slack d@@26)) Tclass._System.nat $h@@61)) :qid |unknown.0:0| :skolemid |1467| :pattern ( ($IsAlloc (int_2_U (BucketFlushModel.singleMergeResult.slack d@@26)) Tclass._System.nat $h@@61)) )))
(assert (forall ((|a#39#0#0| T@U) (|a#39#1#0| T@U) (|a#39#2#0| Int) (|a#39#3#0| Int) ) (!  (=> (and (= (type |a#39#0#0|) (SeqType BoxType)) (= (type |a#39#1#0|) (SeqType BoxType))) (= (|#BucketFlushModel.singleMergeResult.SlackExhausted| (Lit |a#39#0#0|) (Lit |a#39#1#0|) (LitInt |a#39#2#0|) (LitInt |a#39#3#0|)) (Lit (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#39#0#0| |a#39#1#0| |a#39#2#0| |a#39#3#0|)))) :qid |BucketFlushModelidfy.38:15| :skolemid |1468| :pattern ( (|#BucketFlushModel.singleMergeResult.SlackExhausted| (Lit |a#39#0#0|) (Lit |a#39#1#0|) (LitInt |a#39#2#0|) (LitInt |a#39#3#0|))) )))
(assert (forall ((|a#40#0#0| T@U) (|a#40#1#0| T@U) (|a#40#2#0| Int) (|a#40#3#0| Int) ) (!  (=> (and (= (type |a#40#0#0|) (SeqType BoxType)) (= (type |a#40#1#0|) (SeqType BoxType))) (= (BucketFlushModel.singleMergeResult.keys (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#40#0#0| |a#40#1#0| |a#40#2#0| |a#40#3#0|)) |a#40#0#0|)) :qid |BucketFlushModelidfy.38:15| :skolemid |1469| :pattern ( (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#40#0#0| |a#40#1#0| |a#40#2#0| |a#40#3#0|)) )))
(assert (forall ((|a#41#0#0| T@U) (|a#41#1#0| T@U) (|a#41#2#0| Int) (|a#41#3#0| Int) (i@@27 Int) ) (!  (=> (and (and (= (type |a#41#0#0|) (SeqType BoxType)) (= (type |a#41#1#0|) (SeqType BoxType))) (and (<= 0 i@@27) (< i@@27 (|Seq#Length| |a#41#0#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#41#0#0| i@@27))) (DtRank (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#41#0#0| |a#41#1#0| |a#41#2#0| |a#41#3#0|)))) :qid |BucketFlushModelidfy.38:15| :skolemid |1470| :pattern ( (|Seq#Index| |a#41#0#0| i@@27) (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#41#0#0| |a#41#1#0| |a#41#2#0| |a#41#3#0|)) )))
(assert (forall ((|a#42#0#0| T@U) (|a#42#1#0| T@U) (|a#42#2#0| Int) (|a#42#3#0| Int) ) (!  (=> (and (= (type |a#42#0#0|) (SeqType BoxType)) (= (type |a#42#1#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#42#0#0|) (DtRank (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#42#0#0| |a#42#1#0| |a#42#2#0| |a#42#3#0|)))) :qid |BucketFlushModelidfy.38:15| :skolemid |1471| :pattern ( (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#42#0#0| |a#42#1#0| |a#42#2#0| |a#42#3#0|)) )))
(assert (forall ((|a#43#0#0| T@U) (|a#43#1#0| T@U) (|a#43#2#0| Int) (|a#43#3#0| Int) ) (!  (=> (and (= (type |a#43#0#0|) (SeqType BoxType)) (= (type |a#43#1#0|) (SeqType BoxType))) (= (BucketFlushModel.singleMergeResult.msgs (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#43#0#0| |a#43#1#0| |a#43#2#0| |a#43#3#0|)) |a#43#1#0|)) :qid |BucketFlushModelidfy.38:15| :skolemid |1472| :pattern ( (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#43#0#0| |a#43#1#0| |a#43#2#0| |a#43#3#0|)) )))
(assert (forall ((|a#44#0#0| T@U) (|a#44#1#0| T@U) (|a#44#2#0| Int) (|a#44#3#0| Int) (i@@28 Int) ) (!  (=> (and (and (= (type |a#44#0#0|) (SeqType BoxType)) (= (type |a#44#1#0|) (SeqType BoxType))) (and (<= 0 i@@28) (< i@@28 (|Seq#Length| |a#44#1#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#44#1#0| i@@28))) (DtRank (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#44#0#0| |a#44#1#0| |a#44#2#0| |a#44#3#0|)))) :qid |BucketFlushModelidfy.38:15| :skolemid |1473| :pattern ( (|Seq#Index| |a#44#1#0| i@@28) (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#44#0#0| |a#44#1#0| |a#44#2#0| |a#44#3#0|)) )))
(assert (forall ((|a#45#0#0| T@U) (|a#45#1#0| T@U) (|a#45#2#0| Int) (|a#45#3#0| Int) ) (!  (=> (and (= (type |a#45#0#0|) (SeqType BoxType)) (= (type |a#45#1#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#45#1#0|) (DtRank (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#45#0#0| |a#45#1#0| |a#45#2#0| |a#45#3#0|)))) :qid |BucketFlushModelidfy.38:15| :skolemid |1474| :pattern ( (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#45#0#0| |a#45#1#0| |a#45#2#0| |a#45#3#0|)) )))
(assert (forall ((|a#46#0#0| T@U) (|a#46#1#0| T@U) (|a#46#2#0| Int) (|a#46#3#0| Int) ) (!  (=> (and (= (type |a#46#0#0|) (SeqType BoxType)) (= (type |a#46#1#0|) (SeqType BoxType))) (= (BucketFlushModel.singleMergeResult.end (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#46#0#0| |a#46#1#0| |a#46#2#0| |a#46#3#0|)) |a#46#2#0|)) :qid |BucketFlushModelidfy.38:15| :skolemid |1475| :pattern ( (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#46#0#0| |a#46#1#0| |a#46#2#0| |a#46#3#0|)) )))
(assert (forall ((|a#47#0#0| T@U) (|a#47#1#0| T@U) (|a#47#2#0| Int) (|a#47#3#0| Int) ) (!  (=> (and (= (type |a#47#0#0|) (SeqType BoxType)) (= (type |a#47#1#0|) (SeqType BoxType))) (= (BucketFlushModel.singleMergeResult.slack (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#47#0#0| |a#47#1#0| |a#47#2#0| |a#47#3#0|)) |a#47#3#0|)) :qid |BucketFlushModelidfy.38:15| :skolemid |1476| :pattern ( (|#BucketFlushModel.singleMergeResult.SlackExhausted| |a#47#0#0| |a#47#1#0| |a#47#2#0| |a#47#3#0|)) )))
(assert (forall ((d@@27 T@U) ) (!  (=> (and (= (type d@@27) DatatypeTypeType) (|$IsA#BucketFlushModel.singleMergeResult| d@@27)) (or (BucketFlushModel.singleMergeResult.MergeCompleted_q d@@27) (BucketFlushModel.singleMergeResult.SlackExhausted_q d@@27))) :qid |unknown.0:0| :skolemid |1477| :pattern ( (|$IsA#BucketFlushModel.singleMergeResult| d@@27)) )))
(assert (forall ((d@@28 T@U) ) (!  (=> (and (= (type d@@28) DatatypeTypeType) ($Is d@@28 Tclass.BucketFlushModel.singleMergeResult)) (or (BucketFlushModel.singleMergeResult.MergeCompleted_q d@@28) (BucketFlushModel.singleMergeResult.SlackExhausted_q d@@28))) :qid |unknown.0:0| :skolemid |1478| :pattern ( (BucketFlushModel.singleMergeResult.SlackExhausted_q d@@28) ($Is d@@28 Tclass.BucketFlushModel.singleMergeResult)) :pattern ( (BucketFlushModel.singleMergeResult.MergeCompleted_q d@@28) ($Is d@@28 Tclass.BucketFlushModel.singleMergeResult)) )))
(assert (forall ((a@@136 T@U) (b@@67 T@U) ) (!  (=> (and (and (= (type a@@136) DatatypeTypeType) (= (type b@@67) DatatypeTypeType)) (and (BucketFlushModel.singleMergeResult.MergeCompleted_q a@@136) (BucketFlushModel.singleMergeResult.MergeCompleted_q b@@67))) (= (|BucketFlushModel.singleMergeResult#Equal| a@@136 b@@67)  (and (and (|Seq#Equal| (BucketFlushModel.singleMergeResult.keys a@@136) (BucketFlushModel.singleMergeResult.keys b@@67)) (|Seq#Equal| (BucketFlushModel.singleMergeResult.msgs a@@136) (BucketFlushModel.singleMergeResult.msgs b@@67))) (= (BucketFlushModel.singleMergeResult.slack a@@136) (BucketFlushModel.singleMergeResult.slack b@@67))))) :qid |unknown.0:0| :skolemid |1479| :pattern ( (|BucketFlushModel.singleMergeResult#Equal| a@@136 b@@67) (BucketFlushModel.singleMergeResult.MergeCompleted_q a@@136)) :pattern ( (|BucketFlushModel.singleMergeResult#Equal| a@@136 b@@67) (BucketFlushModel.singleMergeResult.MergeCompleted_q b@@67)) )))
(assert (forall ((a@@137 T@U) (b@@68 T@U) ) (!  (=> (and (and (= (type a@@137) DatatypeTypeType) (= (type b@@68) DatatypeTypeType)) (and (BucketFlushModel.singleMergeResult.SlackExhausted_q a@@137) (BucketFlushModel.singleMergeResult.SlackExhausted_q b@@68))) (= (|BucketFlushModel.singleMergeResult#Equal| a@@137 b@@68)  (and (and (and (|Seq#Equal| (BucketFlushModel.singleMergeResult.keys a@@137) (BucketFlushModel.singleMergeResult.keys b@@68)) (|Seq#Equal| (BucketFlushModel.singleMergeResult.msgs a@@137) (BucketFlushModel.singleMergeResult.msgs b@@68))) (= (BucketFlushModel.singleMergeResult.end a@@137) (BucketFlushModel.singleMergeResult.end b@@68))) (= (BucketFlushModel.singleMergeResult.slack a@@137) (BucketFlushModel.singleMergeResult.slack b@@68))))) :qid |unknown.0:0| :skolemid |1480| :pattern ( (|BucketFlushModel.singleMergeResult#Equal| a@@137 b@@68) (BucketFlushModel.singleMergeResult.SlackExhausted_q a@@137)) :pattern ( (|BucketFlushModel.singleMergeResult#Equal| a@@137 b@@68) (BucketFlushModel.singleMergeResult.SlackExhausted_q b@@68)) )))
(assert (forall ((a@@138 T@U) (b@@69 T@U) ) (!  (=> (and (= (type a@@138) DatatypeTypeType) (= (type b@@69) DatatypeTypeType)) (= (|BucketFlushModel.singleMergeResult#Equal| a@@138 b@@69) (= a@@138 b@@69))) :qid |unknown.0:0| :skolemid |1481| :pattern ( (|BucketFlushModel.singleMergeResult#Equal| a@@138 b@@69)) )))
(assert (forall ((arg0@@479 T@U) ) (! (= (type (BucketFlushModel.singleMergeResult.bucketMap arg0@@479)) (MapType BoxType BoxType)) :qid |funType:BucketFlushModel.singleMergeResult.bucketMap| :pattern ( (BucketFlushModel.singleMergeResult.bucketMap arg0@@479)) )))
(assert  (=> (<= 5 $FunctionContextHeight) (forall ((this T@U) ) (!  (=> (and (= (type this) DatatypeTypeType) (or (|BucketFlushModel.singleMergeResult.bucketMap#canCall| this) (and (not (= 5 $FunctionContextHeight)) (and ($Is this Tclass.BucketFlushModel.singleMergeResult) (= (|Seq#Length| (BucketFlushModel.singleMergeResult.keys this)) (|Seq#Length| (BucketFlushModel.singleMergeResult.msgs this))))))) ($Is (BucketFlushModel.singleMergeResult.bucketMap this) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) :qid |BucketFlushModelidfy.43:14| :skolemid |1482| :pattern ( (BucketFlushModel.singleMergeResult.bucketMap this)) ))))
(assert (forall ((this@@0 T@U) ) (!  (=> (and (= (type this@@0) DatatypeTypeType) ($Is this@@0 Tclass.BucketFlushModel.singleMergeResult)) (= (|BucketFlushModel.singleMergeResult.bucketMap#requires| this@@0) (= (|Seq#Length| (BucketFlushModel.singleMergeResult.keys this@@0)) (|Seq#Length| (BucketFlushModel.singleMergeResult.msgs this@@0))))) :qid |BucketFlushModelidfy.43:14| :skolemid |1483| :pattern ( (|BucketFlushModel.singleMergeResult.bucketMap#requires| this@@0)) )))
(assert  (and (forall ((arg0@@480 T@U) (arg1@@197 T@U) (arg2@@132 T@U) ) (! (= (type (MapSeqs.__default.map__of__seqs arg0@@480 arg1@@197 arg2@@132)) (MapType BoxType BoxType)) :qid |funType:MapSeqs.__default.map__of__seqs| :pattern ( (MapSeqs.__default.map__of__seqs arg0@@480 arg1@@197 arg2@@132)) )) (= (type $LZ) LayerTypeType)))
(assert  (=> (<= 5 $FunctionContextHeight) (forall ((this@@1 T@U) ) (!  (=> (and (= (type this@@1) DatatypeTypeType) (or (|BucketFlushModel.singleMergeResult.bucketMap#canCall| this@@1) (and (not (= 5 $FunctionContextHeight)) (and ($Is this@@1 Tclass.BucketFlushModel.singleMergeResult) (= (|Seq#Length| (BucketFlushModel.singleMergeResult.keys this@@1)) (|Seq#Length| (BucketFlushModel.singleMergeResult.msgs this@@1))))))) (and (and (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q this@@1) (BucketFlushModel.singleMergeResult.SlackExhausted_q this@@1)) (or (BucketFlushModel.singleMergeResult.MergeCompleted_q this@@1) (BucketFlushModel.singleMergeResult.SlackExhausted_q this@@1))) (|MapSeqs.__default.map__of__seqs#canCall| (BucketFlushModel.singleMergeResult.keys this@@1) (BucketFlushModel.singleMergeResult.msgs this@@1))) (= (BucketFlushModel.singleMergeResult.bucketMap this@@1) (MapSeqs.__default.map__of__seqs ($LS $LZ) (BucketFlushModel.singleMergeResult.keys this@@1) (BucketFlushModel.singleMergeResult.msgs this@@1))))) :qid |BucketFlushModelidfy.43:14| :skolemid |1484| :pattern ( (BucketFlushModel.singleMergeResult.bucketMap this@@1)) ))))
(assert  (=> (<= 5 $FunctionContextHeight) (forall ((this@@2 T@U) ) (!  (=> (and (= (type this@@2) DatatypeTypeType) (or (|BucketFlushModel.singleMergeResult.bucketMap#canCall| (Lit this@@2)) (and (not (= 5 $FunctionContextHeight)) (and ($Is this@@2 Tclass.BucketFlushModel.singleMergeResult) (= (|Seq#Length| (Lit (BucketFlushModel.singleMergeResult.keys (Lit this@@2)))) (|Seq#Length| (Lit (BucketFlushModel.singleMergeResult.msgs (Lit this@@2))))))))) (and (and (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q (Lit this@@2)) (BucketFlushModel.singleMergeResult.SlackExhausted_q (Lit this@@2))) (or (BucketFlushModel.singleMergeResult.MergeCompleted_q (Lit this@@2)) (BucketFlushModel.singleMergeResult.SlackExhausted_q (Lit this@@2)))) (|MapSeqs.__default.map__of__seqs#canCall| (Lit (BucketFlushModel.singleMergeResult.keys (Lit this@@2))) (Lit (BucketFlushModel.singleMergeResult.msgs (Lit this@@2))))) (= (BucketFlushModel.singleMergeResult.bucketMap (Lit this@@2)) (MapSeqs.__default.map__of__seqs ($LS $LZ) (Lit (BucketFlushModel.singleMergeResult.keys (Lit this@@2))) (Lit (BucketFlushModel.singleMergeResult.msgs (Lit this@@2))))))) :qid |BucketFlushModelidfy.43:14| :weight 3 :skolemid |1485| :pattern ( (BucketFlushModel.singleMergeResult.bucketMap (Lit this@@2))) ))))
(assert (forall ((arg0@@481 T@U) (arg1@@198 T@U) (arg2@@133 T@U) (arg3@@97 Int) (arg4@@79 Int) ) (! (= (type (BucketFlushModel.singleMergeResult.flushedKeys arg0@@481 arg1@@198 arg2@@133 arg3@@97 arg4@@79)) (MapType0Type BoxType boolType)) :qid |funType:BucketFlushModel.singleMergeResult.flushedKeys| :pattern ( (BucketFlushModel.singleMergeResult.flushedKeys arg0@@481 arg1@@198 arg2@@133 arg3@@97 arg4@@79)) )))
(assert  (=> (<= 6 $FunctionContextHeight) (forall ((this@@3 T@U) (|top_keys#0| T@U) (|top_msgs#0| T@U) (|from#0| Int) (|to#0| Int) ) (!  (=> (and (and (and (= (type this@@3) DatatypeTypeType) (= (type |top_keys#0|) (SeqType BoxType))) (= (type |top_msgs#0|) (SeqType BoxType))) (or (|BucketFlushModel.singleMergeResult.flushedKeys#canCall| this@@3 |top_keys#0| |top_msgs#0| |from#0| |to#0|) (and (not (= 6 $FunctionContextHeight)) (and (and (and (and (and ($Is this@@3 Tclass.BucketFlushModel.singleMergeResult) ($Is |top_keys#0| (TSeq Tclass.KeyType.Key))) ($Is |top_msgs#0| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |from#0|)) (<= (LitInt 0) |to#0|)) (and (and (and (and (<= (LitInt 0) |from#0|) (<= |from#0| |to#0|)) (<= |to#0| (|Seq#Length| |top_keys#0|))) (= (|Seq#Length| |top_keys#0|) (|Seq#Length| |top_msgs#0|))) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q this@@3) (and (<= |from#0| (BucketFlushModel.singleMergeResult.end this@@3)) (<= (BucketFlushModel.singleMergeResult.end this@@3) (|Seq#Length| |top_keys#0|))))))))) ($Is (BucketFlushModel.singleMergeResult.flushedKeys this@@3 |top_keys#0| |top_msgs#0| |from#0| |to#0|) (TSet Tclass.KeyType.Key))) :qid |BucketFlushModelidfy.49:14| :skolemid |1487| :pattern ( (BucketFlushModel.singleMergeResult.flushedKeys this@@3 |top_keys#0| |top_msgs#0| |from#0| |to#0|)) ))))
(assert (forall ((this@@4 T@U) (|top_keys#0@@0| T@U) (|top_msgs#0@@0| T@U) (|from#0@@0| Int) (|to#0@@0| Int) ) (!  (=> (and (and (= (type this@@4) DatatypeTypeType) (= (type |top_keys#0@@0|) (SeqType BoxType))) (= (type |top_msgs#0@@0|) (SeqType BoxType))) (=> (and (and (and (and ($Is this@@4 Tclass.BucketFlushModel.singleMergeResult) ($Is |top_keys#0@@0| (TSeq Tclass.KeyType.Key))) ($Is |top_msgs#0@@0| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |from#0@@0|)) (<= (LitInt 0) |to#0@@0|)) (= (|BucketFlushModel.singleMergeResult.flushedKeys#requires| this@@4 |top_keys#0@@0| |top_msgs#0@@0| |from#0@@0| |to#0@@0|)  (and (and (and (and (<= (LitInt 0) |from#0@@0|) (<= |from#0@@0| |to#0@@0|)) (<= |to#0@@0| (|Seq#Length| |top_keys#0@@0|))) (= (|Seq#Length| |top_keys#0@@0|) (|Seq#Length| |top_msgs#0@@0|))) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q this@@4) (and (<= |from#0@@0| (BucketFlushModel.singleMergeResult.end this@@4)) (<= (BucketFlushModel.singleMergeResult.end this@@4) (|Seq#Length| |top_keys#0@@0|)))))))) :qid |BucketFlushModelidfy.49:14| :skolemid |1488| :pattern ( (|BucketFlushModel.singleMergeResult.flushedKeys#requires| this@@4 |top_keys#0@@0| |top_msgs#0@@0| |from#0@@0| |to#0@@0|)) )))
(assert (forall ((arg0@@482 T@U) (arg1@@199 T@U) ) (! (= (type (|lambda#2| arg0@@482 arg1@@199)) (MapType0Type BoxType boolType)) :qid |funType:lambda#2| :pattern ( (|lambda#2| arg0@@482 arg1@@199)) )))
(assert  (=> (<= 6 $FunctionContextHeight) (forall ((this@@5 T@U) (|top_keys#0@@1| T@U) (|top_msgs#0@@1| T@U) (|from#0@@1| Int) (|to#0@@1| Int) ) (!  (=> (and (and (and (= (type this@@5) DatatypeTypeType) (= (type |top_keys#0@@1|) (SeqType BoxType))) (= (type |top_msgs#0@@1|) (SeqType BoxType))) (or (|BucketFlushModel.singleMergeResult.flushedKeys#canCall| this@@5 |top_keys#0@@1| |top_msgs#0@@1| |from#0@@1| |to#0@@1|) (and (not (= 6 $FunctionContextHeight)) (and (and (and (and (and ($Is this@@5 Tclass.BucketFlushModel.singleMergeResult) ($Is |top_keys#0@@1| (TSeq Tclass.KeyType.Key))) ($Is |top_msgs#0@@1| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |from#0@@1|)) (<= (LitInt 0) |to#0@@1|)) (and (and (and (and (<= (LitInt 0) |from#0@@1|) (<= |from#0@@1| |to#0@@1|)) (<= |to#0@@1| (|Seq#Length| |top_keys#0@@1|))) (= (|Seq#Length| |top_keys#0@@1|) (|Seq#Length| |top_msgs#0@@1|))) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q this@@5) (and (<= |from#0@@1| (BucketFlushModel.singleMergeResult.end this@@5)) (<= (BucketFlushModel.singleMergeResult.end this@@5) (|Seq#Length| |top_keys#0@@1|))))))))) (= (BucketFlushModel.singleMergeResult.flushedKeys this@@5 |top_keys#0@@1| |top_msgs#0@@1| |from#0@@1| |to#0@@1|) (ite (BucketFlushModel.singleMergeResult.MergeCompleted_q this@@5) (|lambda#2| Tclass.KeyType.Key (|Seq#Drop| (|Seq#Take| |top_keys#0@@1| |to#0@@1|) |from#0@@1|)) (|lambda#2| Tclass.KeyType.Key (|Seq#Drop| (|Seq#Take| |top_keys#0@@1| (BucketFlushModel.singleMergeResult.end this@@5)) |from#0@@1|))))) :qid |BucketFlushModelidfy.49:14| :skolemid |1489| :pattern ( (BucketFlushModel.singleMergeResult.flushedKeys this@@5 |top_keys#0@@1| |top_msgs#0@@1| |from#0@@1| |to#0@@1|)) ))))
(assert  (=> (<= 6 $FunctionContextHeight) (forall ((this@@6 T@U) (|top_keys#0@@2| T@U) (|top_msgs#0@@2| T@U) (|from#0@@2| Int) (|to#0@@2| Int) ) (!  (=> (and (and (and (= (type this@@6) DatatypeTypeType) (= (type |top_keys#0@@2|) (SeqType BoxType))) (= (type |top_msgs#0@@2|) (SeqType BoxType))) (or (|BucketFlushModel.singleMergeResult.flushedKeys#canCall| (Lit this@@6) (Lit |top_keys#0@@2|) (Lit |top_msgs#0@@2|) (LitInt |from#0@@2|) (LitInt |to#0@@2|)) (and (not (= 6 $FunctionContextHeight)) (and (and (and (and (and ($Is this@@6 Tclass.BucketFlushModel.singleMergeResult) ($Is |top_keys#0@@2| (TSeq Tclass.KeyType.Key))) ($Is |top_msgs#0@@2| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |from#0@@2|)) (<= (LitInt 0) |to#0@@2|)) (and (and (and (and (<= (LitInt 0) (LitInt |from#0@@2|)) (<= (LitInt |from#0@@2|) (LitInt |to#0@@2|))) (<= (LitInt |to#0@@2|) (|Seq#Length| (Lit |top_keys#0@@2|)))) (= (|Seq#Length| (Lit |top_keys#0@@2|)) (|Seq#Length| (Lit |top_msgs#0@@2|)))) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q (Lit this@@6)) (and (<= (LitInt |from#0@@2|) (LitInt (BucketFlushModel.singleMergeResult.end (Lit this@@6)))) (<= (LitInt (BucketFlushModel.singleMergeResult.end (Lit this@@6))) (|Seq#Length| (Lit |top_keys#0@@2|)))))))))) (= (BucketFlushModel.singleMergeResult.flushedKeys (Lit this@@6) (Lit |top_keys#0@@2|) (Lit |top_msgs#0@@2|) (LitInt |from#0@@2|) (LitInt |to#0@@2|)) (ite (BucketFlushModel.singleMergeResult.MergeCompleted_q (Lit this@@6)) (|lambda#2| Tclass.KeyType.Key (|Seq#Drop| (|Seq#Take| (Lit |top_keys#0@@2|) (LitInt |to#0@@2|)) (LitInt |from#0@@2|))) (|lambda#2| Tclass.KeyType.Key (|Seq#Drop| (|Seq#Take| (Lit |top_keys#0@@2|) (LitInt (BucketFlushModel.singleMergeResult.end (Lit this@@6)))) (LitInt |from#0@@2|)))))) :qid |BucketFlushModelidfy.49:14| :weight 3 :skolemid |1490| :pattern ( (BucketFlushModel.singleMergeResult.flushedKeys (Lit this@@6) (Lit |top_keys#0@@2|) (Lit |top_msgs#0@@2|) (LitInt |from#0@@2|) (LitInt |to#0@@2|))) ))))
(assert (forall ((arg0@@483 T@U) (arg1@@200 T@U) (arg2@@134 T@U) (arg3@@98 Int) (arg4@@80 Int) ) (! (= (type (BucketFlushModel.singleMergeResult.flushedMap arg0@@483 arg1@@200 arg2@@134 arg3@@98 arg4@@80)) (MapType BoxType BoxType)) :qid |funType:BucketFlushModel.singleMergeResult.flushedMap| :pattern ( (BucketFlushModel.singleMergeResult.flushedMap arg0@@483 arg1@@200 arg2@@134 arg3@@98 arg4@@80)) )))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((this@@7 T@U) (|top_keys#0@@3| T@U) (|top_msgs#0@@3| T@U) (|from#0@@3| Int) (|to#0@@3| Int) ) (!  (=> (and (and (and (= (type this@@7) DatatypeTypeType) (= (type |top_keys#0@@3|) (SeqType BoxType))) (= (type |top_msgs#0@@3|) (SeqType BoxType))) (or (|BucketFlushModel.singleMergeResult.flushedMap#canCall| this@@7 |top_keys#0@@3| |top_msgs#0@@3| |from#0@@3| |to#0@@3|) (and (not (= 7 $FunctionContextHeight)) (and (and (and (and (and ($Is this@@7 Tclass.BucketFlushModel.singleMergeResult) ($Is |top_keys#0@@3| (TSeq Tclass.KeyType.Key))) ($Is |top_msgs#0@@3| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |from#0@@3|)) (<= (LitInt 0) |to#0@@3|)) (and (and (and (and (<= (LitInt 0) |from#0@@3|) (<= |from#0@@3| |to#0@@3|)) (<= |to#0@@3| (|Seq#Length| |top_keys#0@@3|))) (= (|Seq#Length| |top_keys#0@@3|) (|Seq#Length| |top_msgs#0@@3|))) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q this@@7) (and (<= |from#0@@3| (BucketFlushModel.singleMergeResult.end this@@7)) (<= (BucketFlushModel.singleMergeResult.end this@@7) (|Seq#Length| |top_keys#0@@3|))))))))) ($Is (BucketFlushModel.singleMergeResult.flushedMap this@@7 |top_keys#0@@3| |top_msgs#0@@3| |from#0@@3| |to#0@@3|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) :qid |BucketFlushModelidfy.63:14| :skolemid |1491| :pattern ( (BucketFlushModel.singleMergeResult.flushedMap this@@7 |top_keys#0@@3| |top_msgs#0@@3| |from#0@@3| |to#0@@3|)) ))))
(assert (forall ((this@@8 T@U) (|top_keys#0@@4| T@U) (|top_msgs#0@@4| T@U) (|from#0@@4| Int) (|to#0@@4| Int) ) (!  (=> (and (and (= (type this@@8) DatatypeTypeType) (= (type |top_keys#0@@4|) (SeqType BoxType))) (= (type |top_msgs#0@@4|) (SeqType BoxType))) (=> (and (and (and (and ($Is this@@8 Tclass.BucketFlushModel.singleMergeResult) ($Is |top_keys#0@@4| (TSeq Tclass.KeyType.Key))) ($Is |top_msgs#0@@4| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |from#0@@4|)) (<= (LitInt 0) |to#0@@4|)) (= (|BucketFlushModel.singleMergeResult.flushedMap#requires| this@@8 |top_keys#0@@4| |top_msgs#0@@4| |from#0@@4| |to#0@@4|)  (and (and (and (and (<= (LitInt 0) |from#0@@4|) (<= |from#0@@4| |to#0@@4|)) (<= |to#0@@4| (|Seq#Length| |top_keys#0@@4|))) (= (|Seq#Length| |top_keys#0@@4|) (|Seq#Length| |top_msgs#0@@4|))) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q this@@8) (and (<= |from#0@@4| (BucketFlushModel.singleMergeResult.end this@@8)) (<= (BucketFlushModel.singleMergeResult.end this@@8) (|Seq#Length| |top_keys#0@@4|)))))))) :qid |BucketFlushModelidfy.63:14| :skolemid |1492| :pattern ( (|BucketFlushModel.singleMergeResult.flushedMap#requires| this@@8 |top_keys#0@@4| |top_msgs#0@@4| |from#0@@4| |to#0@@4|)) )))
(assert  (and (forall ((arg0@@484 T@U) (arg1@@201 T@U) (arg2@@135 T@U) ) (! (= (type (|lambda#10| arg0@@484 arg1@@201 arg2@@135)) (MapType0Type BoxType boolType)) :qid |funType:lambda#10| :pattern ( (|lambda#10| arg0@@484 arg1@@201 arg2@@135)) )) (forall ((arg0@@485 T@U) ) (! (= (type (|lambda#11| arg0@@485)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#11| :pattern ( (|lambda#11| arg0@@485)) ))))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((this@@9 T@U) (|top_keys#0@@5| T@U) (|top_msgs#0@@5| T@U) (|from#0@@5| Int) (|to#0@@5| Int) ) (!  (=> (and (and (and (= (type this@@9) DatatypeTypeType) (= (type |top_keys#0@@5|) (SeqType BoxType))) (= (type |top_msgs#0@@5|) (SeqType BoxType))) (or (|BucketFlushModel.singleMergeResult.flushedMap#canCall| this@@9 |top_keys#0@@5| |top_msgs#0@@5| |from#0@@5| |to#0@@5|) (and (not (= 7 $FunctionContextHeight)) (and (and (and (and (and ($Is this@@9 Tclass.BucketFlushModel.singleMergeResult) ($Is |top_keys#0@@5| (TSeq Tclass.KeyType.Key))) ($Is |top_msgs#0@@5| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |from#0@@5|)) (<= (LitInt 0) |to#0@@5|)) (and (and (and (and (<= (LitInt 0) |from#0@@5|) (<= |from#0@@5| |to#0@@5|)) (<= |to#0@@5| (|Seq#Length| |top_keys#0@@5|))) (= (|Seq#Length| |top_keys#0@@5|) (|Seq#Length| |top_msgs#0@@5|))) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q this@@9) (and (<= |from#0@@5| (BucketFlushModel.singleMergeResult.end this@@9)) (<= (BucketFlushModel.singleMergeResult.end this@@9) (|Seq#Length| |top_keys#0@@5|))))))))) (and (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| (|Seq#Take| |top_keys#0@@5| |to#0@@5|) |from#0@@5|) (|Seq#Drop| (|Seq#Take| |top_msgs#0@@5| |to#0@@5|) |from#0@@5|)) (let ((|top#0| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| (|Seq#Take| |top_keys#0@@5| |to#0@@5|) |from#0@@5|) (|Seq#Drop| (|Seq#Take| |top_msgs#0@@5| |to#0@@5|) |from#0@@5|)))) (forall ((|key#0| T@U) ) (!  (=> (and (and (= (type |key#0|) (SeqType BoxType)) ($Is |key#0| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|Map#Domain| |top#0|) ($Box |key#0|)))) (|BucketFlushModel.singleMergeResult.flushedKeys#canCall| this@@9 |top_keys#0@@5| |top_msgs#0@@5| |from#0@@5| |to#0@@5|)) :qid |BucketFlushModelidfy.73:11| :skolemid |1493| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |top#0|) ($Box |key#0|)))) :pattern ( (MapType0Select (BucketFlushModel.singleMergeResult.flushedKeys this@@9 |top_keys#0@@5| |top_msgs#0@@5| |from#0@@5| |to#0@@5|) ($Box |key#0|))) :pattern ( (MapType0Select (|Map#Domain| |top#0|) ($Box |key#0|))) )))) (= (BucketFlushModel.singleMergeResult.flushedMap this@@9 |top_keys#0@@5| |top_msgs#0@@5| |from#0@@5| |to#0@@5|) (let ((|top#0@@0| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| (|Seq#Take| |top_keys#0@@5| |to#0@@5|) |from#0@@5|) (|Seq#Drop| (|Seq#Take| |top_msgs#0@@5| |to#0@@5|) |from#0@@5|)))) (|Map#Glue| (|lambda#10| Tclass.KeyType.Key (|Map#Domain| |top#0@@0|) (BucketFlushModel.singleMergeResult.flushedKeys this@@9 |top_keys#0@@5| |top_msgs#0@@5| |from#0@@5| |to#0@@5|)) (|lambda#11| (|Map#Elements| |top#0@@0|)) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketFlushModelidfy.63:14| :skolemid |1494| :pattern ( (BucketFlushModel.singleMergeResult.flushedMap this@@9 |top_keys#0@@5| |top_msgs#0@@5| |from#0@@5| |to#0@@5|)) ))))
(assert  (=> (<= 7 $FunctionContextHeight) (forall ((this@@10 T@U) (|top_keys#0@@6| T@U) (|top_msgs#0@@6| T@U) (|from#0@@6| Int) (|to#0@@6| Int) ) (!  (=> (and (and (and (= (type this@@10) DatatypeTypeType) (= (type |top_keys#0@@6|) (SeqType BoxType))) (= (type |top_msgs#0@@6|) (SeqType BoxType))) (or (|BucketFlushModel.singleMergeResult.flushedMap#canCall| (Lit this@@10) (Lit |top_keys#0@@6|) (Lit |top_msgs#0@@6|) (LitInt |from#0@@6|) (LitInt |to#0@@6|)) (and (not (= 7 $FunctionContextHeight)) (and (and (and (and (and ($Is this@@10 Tclass.BucketFlushModel.singleMergeResult) ($Is |top_keys#0@@6| (TSeq Tclass.KeyType.Key))) ($Is |top_msgs#0@@6| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |from#0@@6|)) (<= (LitInt 0) |to#0@@6|)) (and (and (and (and (<= (LitInt 0) (LitInt |from#0@@6|)) (<= (LitInt |from#0@@6|) (LitInt |to#0@@6|))) (<= (LitInt |to#0@@6|) (|Seq#Length| (Lit |top_keys#0@@6|)))) (= (|Seq#Length| (Lit |top_keys#0@@6|)) (|Seq#Length| (Lit |top_msgs#0@@6|)))) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q (Lit this@@10)) (and (<= (LitInt |from#0@@6|) (LitInt (BucketFlushModel.singleMergeResult.end (Lit this@@10)))) (<= (LitInt (BucketFlushModel.singleMergeResult.end (Lit this@@10))) (|Seq#Length| (Lit |top_keys#0@@6|)))))))))) (and (and (|MapSeqs.__default.map__of__seqs#canCall| (Lit (|Seq#Drop| (|Seq#Take| (Lit |top_keys#0@@6|) (LitInt |to#0@@6|)) (LitInt |from#0@@6|))) (Lit (|Seq#Drop| (|Seq#Take| (Lit |top_msgs#0@@6|) (LitInt |to#0@@6|)) (LitInt |from#0@@6|)))) (let ((|top#1| (MapSeqs.__default.map__of__seqs ($LS $LZ) (Lit (|Seq#Drop| (|Seq#Take| (Lit |top_keys#0@@6|) (LitInt |to#0@@6|)) (LitInt |from#0@@6|))) (Lit (|Seq#Drop| (|Seq#Take| (Lit |top_msgs#0@@6|) (LitInt |to#0@@6|)) (LitInt |from#0@@6|)))))) (forall ((|key#0@@0| T@U) ) (!  (=> (and (and (= (type |key#0@@0|) (SeqType BoxType)) ($Is |key#0@@0| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|Map#Domain| |top#1|) ($Box |key#0@@0|)))) (|BucketFlushModel.singleMergeResult.flushedKeys#canCall| (Lit this@@10) (Lit |top_keys#0@@6|) (Lit |top_msgs#0@@6|) (LitInt |from#0@@6|) (LitInt |to#0@@6|))) :qid |BucketFlushModelidfy.73:11| :skolemid |1495| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |top#1|) ($Box |key#0@@0|)))) :pattern ( (MapType0Select (BucketFlushModel.singleMergeResult.flushedKeys this@@10 |top_keys#0@@6| |top_msgs#0@@6| |from#0@@6| |to#0@@6|) ($Box |key#0@@0|))) :pattern ( (MapType0Select (|Map#Domain| |top#1|) ($Box |key#0@@0|))) )))) (= (BucketFlushModel.singleMergeResult.flushedMap (Lit this@@10) (Lit |top_keys#0@@6|) (Lit |top_msgs#0@@6|) (LitInt |from#0@@6|) (LitInt |to#0@@6|)) (let ((|top#1@@0| (MapSeqs.__default.map__of__seqs ($LS $LZ) (Lit (|Seq#Drop| (|Seq#Take| (Lit |top_keys#0@@6|) (LitInt |to#0@@6|)) (LitInt |from#0@@6|))) (Lit (|Seq#Drop| (|Seq#Take| (Lit |top_msgs#0@@6|) (LitInt |to#0@@6|)) (LitInt |from#0@@6|)))))) (|Map#Glue| (|lambda#10| Tclass.KeyType.Key (|Map#Domain| |top#1@@0|) (Lit (BucketFlushModel.singleMergeResult.flushedKeys (Lit this@@10) (Lit |top_keys#0@@6|) (Lit |top_msgs#0@@6|) (LitInt |from#0@@6|) (LitInt |to#0@@6|)))) (|lambda#11| (|Map#Elements| |top#1@@0|)) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) :qid |BucketFlushModelidfy.63:14| :weight 3 :skolemid |1496| :pattern ( (BucketFlushModel.singleMergeResult.flushedMap (Lit this@@10) (Lit |top_keys#0@@6|) (Lit |top_msgs#0@@6|) (LitInt |from#0@@6|) (LitInt |to#0@@6|))) ))))
(assert (forall ((arg0@@486 T@U) (arg1@@202 T@U) (arg2@@136 Int) ) (! (= (type (|#BucketFlushModel.mergeResult.mergeResult| arg0@@486 arg1@@202 arg2@@136)) DatatypeTypeType) :qid |funType:#BucketFlushModel.mergeResult.mergeResult| :pattern ( (|#BucketFlushModel.mergeResult.mergeResult| arg0@@486 arg1@@202 arg2@@136)) )))
(assert (forall ((|a#0#0#0@@0| T@U) (|a#0#1#0@@0| T@U) (|a#0#2#0| Int) ) (!  (=> (and (= (type |a#0#0#0@@0|) DatatypeTypeType) (= (type |a#0#1#0@@0|) (SeqType BoxType))) (= (DatatypeCtorId (|#BucketFlushModel.mergeResult.mergeResult| |a#0#0#0@@0| |a#0#1#0@@0| |a#0#2#0|)) |##BucketFlushModel.mergeResult.mergeResult|)) :qid |BucketFlushModelidfy.939:11| :skolemid |1500| :pattern ( (|#BucketFlushModel.mergeResult.mergeResult| |a#0#0#0@@0| |a#0#1#0@@0| |a#0#2#0|)) )))
(assert (forall ((d@@29 T@U) ) (!  (=> (= (type d@@29) DatatypeTypeType) (= (BucketFlushModel.mergeResult.mergeResult_q d@@29) (= (DatatypeCtorId d@@29) |##BucketFlushModel.mergeResult.mergeResult|))) :qid |unknown.0:0| :skolemid |1501| :pattern ( (BucketFlushModel.mergeResult.mergeResult_q d@@29)) )))
(assert (forall ((d@@30 T@U) ) (!  (=> (and (= (type d@@30) DatatypeTypeType) (BucketFlushModel.mergeResult.mergeResult_q d@@30)) (exists ((|a#1#0#0@@0| T@U) (|a#1#1#0@@0| T@U) (|a#1#2#0| Int) ) (!  (and (and (= (type |a#1#0#0@@0|) DatatypeTypeType) (= (type |a#1#1#0@@0|) (SeqType BoxType))) (= d@@30 (|#BucketFlushModel.mergeResult.mergeResult| |a#1#0#0@@0| |a#1#1#0@@0| |a#1#2#0|))) :qid |BucketFlushModelidfy.939:11| :skolemid |1502| :no-pattern (type |a#1#0#0@@0|) :no-pattern (type |a#1#1#0@@0|) :no-pattern (U_2_int |a#1#0#0@@0|) :no-pattern (U_2_bool |a#1#0#0@@0|) :no-pattern (U_2_int |a#1#1#0@@0|) :no-pattern (U_2_bool |a#1#1#0@@0|) ))) :qid |unknown.0:0| :skolemid |1503| :pattern ( (BucketFlushModel.mergeResult.mergeResult_q d@@30)) )))
(assert (= (type Tclass.BucketsLib.Bucket) TyType))
(assert (= (Tag Tclass.BucketsLib.Bucket) Tagclass.BucketsLib.Bucket))
(assert (= (TagFamily Tclass.BucketsLib.Bucket) tytagFamily$Bucket))
(assert (forall ((bx@@142 T@U) ) (!  (=> (and (= (type bx@@142) BoxType) ($IsBox bx@@142 Tclass.BucketsLib.Bucket)) (and (= ($Box ($Unbox DatatypeTypeType bx@@142)) bx@@142) ($Is ($Unbox DatatypeTypeType bx@@142) Tclass.BucketsLib.Bucket))) :qid |unknown.0:0| :skolemid |1504| :pattern ( ($IsBox bx@@142 Tclass.BucketsLib.Bucket)) )))
(assert (= (type Tclass.BucketFlushModel.mergeResult) TyType))
(assert (= (Tag Tclass.BucketFlushModel.mergeResult) Tagclass.BucketFlushModel.mergeResult))
(assert (= (TagFamily Tclass.BucketFlushModel.mergeResult) tytagFamily$mergeResult))
(assert (forall ((bx@@143 T@U) ) (!  (=> (and (= (type bx@@143) BoxType) ($IsBox bx@@143 Tclass.BucketFlushModel.mergeResult)) (and (= ($Box ($Unbox DatatypeTypeType bx@@143)) bx@@143) ($Is ($Unbox DatatypeTypeType bx@@143) Tclass.BucketFlushModel.mergeResult))) :qid |unknown.0:0| :skolemid |1505| :pattern ( ($IsBox bx@@143 Tclass.BucketFlushModel.mergeResult)) )))
(assert (forall ((|a#2#0#0@@0| T@U) (|a#2#1#0@@0| T@U) (|a#2#2#0| Int) ) (!  (=> (and (= (type |a#2#0#0@@0|) DatatypeTypeType) (= (type |a#2#1#0@@0|) (SeqType BoxType))) (= ($Is (|#BucketFlushModel.mergeResult.mergeResult| |a#2#0#0@@0| |a#2#1#0@@0| |a#2#2#0|) Tclass.BucketFlushModel.mergeResult)  (and (and ($Is |a#2#0#0@@0| Tclass.BucketsLib.Bucket) ($Is |a#2#1#0@@0| (TSeq Tclass.BucketsLib.Bucket))) ($Is (int_2_U |a#2#2#0|) Tclass._System.nat)))) :qid |BucketFlushModelidfy.939:11| :skolemid |1506| :pattern ( ($Is (|#BucketFlushModel.mergeResult.mergeResult| |a#2#0#0@@0| |a#2#1#0@@0| |a#2#2#0|) Tclass.BucketFlushModel.mergeResult)) )))
(assert (forall ((|a#3#0#0@@0| T@U) (|a#3#1#0@@0| T@U) (|a#3#2#0| Int) ($h@@62 T@U) ) (!  (=> (and (and (and (= (type |a#3#0#0@@0|) DatatypeTypeType) (= (type |a#3#1#0@@0|) (SeqType BoxType))) (= (type $h@@62) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@62)) (= ($IsAlloc (|#BucketFlushModel.mergeResult.mergeResult| |a#3#0#0@@0| |a#3#1#0@@0| |a#3#2#0|) Tclass.BucketFlushModel.mergeResult $h@@62)  (and (and ($IsAlloc |a#3#0#0@@0| Tclass.BucketsLib.Bucket $h@@62) ($IsAlloc |a#3#1#0@@0| (TSeq Tclass.BucketsLib.Bucket) $h@@62)) ($IsAlloc (int_2_U |a#3#2#0|) Tclass._System.nat $h@@62)))) :qid |BucketFlushModelidfy.939:11| :skolemid |1507| :pattern ( ($IsAlloc (|#BucketFlushModel.mergeResult.mergeResult| |a#3#0#0@@0| |a#3#1#0@@0| |a#3#2#0|) Tclass.BucketFlushModel.mergeResult $h@@62)) )))
(assert (forall ((arg0@@487 T@U) ) (! (= (type (BucketFlushModel.mergeResult.top arg0@@487)) DatatypeTypeType) :qid |funType:BucketFlushModel.mergeResult.top| :pattern ( (BucketFlushModel.mergeResult.top arg0@@487)) )))
(assert (forall ((d@@31 T@U) ($h@@63 T@U) ) (!  (=> (and (and (= (type d@@31) DatatypeTypeType) (= (type $h@@63) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@63) (and (BucketFlushModel.mergeResult.mergeResult_q d@@31) ($IsAlloc d@@31 Tclass.BucketFlushModel.mergeResult $h@@63)))) ($IsAlloc (BucketFlushModel.mergeResult.top d@@31) Tclass.BucketsLib.Bucket $h@@63)) :qid |unknown.0:0| :skolemid |1508| :pattern ( ($IsAlloc (BucketFlushModel.mergeResult.top d@@31) Tclass.BucketsLib.Bucket $h@@63)) )))
(assert (forall ((arg0@@488 T@U) ) (! (= (type (BucketFlushModel.mergeResult.bots arg0@@488)) (SeqType BoxType)) :qid |funType:BucketFlushModel.mergeResult.bots| :pattern ( (BucketFlushModel.mergeResult.bots arg0@@488)) )))
(assert (forall ((d@@32 T@U) ($h@@64 T@U) ) (!  (=> (and (and (= (type d@@32) DatatypeTypeType) (= (type $h@@64) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@64) (and (BucketFlushModel.mergeResult.mergeResult_q d@@32) ($IsAlloc d@@32 Tclass.BucketFlushModel.mergeResult $h@@64)))) ($IsAlloc (BucketFlushModel.mergeResult.bots d@@32) (TSeq Tclass.BucketsLib.Bucket) $h@@64)) :qid |unknown.0:0| :skolemid |1509| :pattern ( ($IsAlloc (BucketFlushModel.mergeResult.bots d@@32) (TSeq Tclass.BucketsLib.Bucket) $h@@64)) )))
(assert (forall ((d@@33 T@U) ($h@@65 T@U) ) (!  (=> (and (and (= (type d@@33) DatatypeTypeType) (= (type $h@@65) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@65) (and (BucketFlushModel.mergeResult.mergeResult_q d@@33) ($IsAlloc d@@33 Tclass.BucketFlushModel.mergeResult $h@@65)))) ($IsAlloc (int_2_U (BucketFlushModel.mergeResult.slack d@@33)) Tclass._System.nat $h@@65)) :qid |unknown.0:0| :skolemid |1510| :pattern ( ($IsAlloc (int_2_U (BucketFlushModel.mergeResult.slack d@@33)) Tclass._System.nat $h@@65)) )))
(assert (forall ((|a#4#0#0@@0| T@U) (|a#4#1#0@@0| T@U) (|a#4#2#0| Int) ) (!  (=> (and (= (type |a#4#0#0@@0|) DatatypeTypeType) (= (type |a#4#1#0@@0|) (SeqType BoxType))) (= (|#BucketFlushModel.mergeResult.mergeResult| (Lit |a#4#0#0@@0|) (Lit |a#4#1#0@@0|) (LitInt |a#4#2#0|)) (Lit (|#BucketFlushModel.mergeResult.mergeResult| |a#4#0#0@@0| |a#4#1#0@@0| |a#4#2#0|)))) :qid |BucketFlushModelidfy.939:11| :skolemid |1511| :pattern ( (|#BucketFlushModel.mergeResult.mergeResult| (Lit |a#4#0#0@@0|) (Lit |a#4#1#0@@0|) (LitInt |a#4#2#0|))) )))
(assert (forall ((|a#5#0#0@@0| T@U) (|a#5#1#0@@0| T@U) (|a#5#2#0| Int) ) (!  (=> (and (= (type |a#5#0#0@@0|) DatatypeTypeType) (= (type |a#5#1#0@@0|) (SeqType BoxType))) (= (BucketFlushModel.mergeResult.top (|#BucketFlushModel.mergeResult.mergeResult| |a#5#0#0@@0| |a#5#1#0@@0| |a#5#2#0|)) |a#5#0#0@@0|)) :qid |BucketFlushModelidfy.939:11| :skolemid |1512| :pattern ( (|#BucketFlushModel.mergeResult.mergeResult| |a#5#0#0@@0| |a#5#1#0@@0| |a#5#2#0|)) )))
(assert (forall ((|a#6#0#0@@0| T@U) (|a#6#1#0@@0| T@U) (|a#6#2#0| Int) ) (!  (=> (and (= (type |a#6#0#0@@0|) DatatypeTypeType) (= (type |a#6#1#0@@0|) (SeqType BoxType))) (< (DtRank |a#6#0#0@@0|) (DtRank (|#BucketFlushModel.mergeResult.mergeResult| |a#6#0#0@@0| |a#6#1#0@@0| |a#6#2#0|)))) :qid |BucketFlushModelidfy.939:11| :skolemid |1513| :pattern ( (|#BucketFlushModel.mergeResult.mergeResult| |a#6#0#0@@0| |a#6#1#0@@0| |a#6#2#0|)) )))
(assert (forall ((|a#7#0#0@@0| T@U) (|a#7#1#0@@0| T@U) (|a#7#2#0| Int) ) (!  (=> (and (= (type |a#7#0#0@@0|) DatatypeTypeType) (= (type |a#7#1#0@@0|) (SeqType BoxType))) (= (BucketFlushModel.mergeResult.bots (|#BucketFlushModel.mergeResult.mergeResult| |a#7#0#0@@0| |a#7#1#0@@0| |a#7#2#0|)) |a#7#1#0@@0|)) :qid |BucketFlushModelidfy.939:11| :skolemid |1514| :pattern ( (|#BucketFlushModel.mergeResult.mergeResult| |a#7#0#0@@0| |a#7#1#0@@0| |a#7#2#0|)) )))
(assert (forall ((|a#8#0#0@@0| T@U) (|a#8#1#0@@0| T@U) (|a#8#2#0| Int) (i@@29 Int) ) (!  (=> (and (and (= (type |a#8#0#0@@0|) DatatypeTypeType) (= (type |a#8#1#0@@0|) (SeqType BoxType))) (and (<= 0 i@@29) (< i@@29 (|Seq#Length| |a#8#1#0@@0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#8#1#0@@0| i@@29))) (DtRank (|#BucketFlushModel.mergeResult.mergeResult| |a#8#0#0@@0| |a#8#1#0@@0| |a#8#2#0|)))) :qid |BucketFlushModelidfy.939:11| :skolemid |1515| :pattern ( (|Seq#Index| |a#8#1#0@@0| i@@29) (|#BucketFlushModel.mergeResult.mergeResult| |a#8#0#0@@0| |a#8#1#0@@0| |a#8#2#0|)) )))
(assert (forall ((|a#9#0#0| T@U) (|a#9#1#0| T@U) (|a#9#2#0| Int) ) (!  (=> (and (= (type |a#9#0#0|) DatatypeTypeType) (= (type |a#9#1#0|) (SeqType BoxType))) (< (|Seq#Rank| |a#9#1#0|) (DtRank (|#BucketFlushModel.mergeResult.mergeResult| |a#9#0#0| |a#9#1#0| |a#9#2#0|)))) :qid |BucketFlushModelidfy.939:11| :skolemid |1516| :pattern ( (|#BucketFlushModel.mergeResult.mergeResult| |a#9#0#0| |a#9#1#0| |a#9#2#0|)) )))
(assert (forall ((|a#10#0#0| T@U) (|a#10#1#0| T@U) (|a#10#2#0| Int) ) (!  (=> (and (= (type |a#10#0#0|) DatatypeTypeType) (= (type |a#10#1#0|) (SeqType BoxType))) (= (BucketFlushModel.mergeResult.slack (|#BucketFlushModel.mergeResult.mergeResult| |a#10#0#0| |a#10#1#0| |a#10#2#0|)) |a#10#2#0|)) :qid |BucketFlushModelidfy.939:11| :skolemid |1517| :pattern ( (|#BucketFlushModel.mergeResult.mergeResult| |a#10#0#0| |a#10#1#0| |a#10#2#0|)) )))
(assert (forall ((d@@34 T@U) ) (!  (=> (and (= (type d@@34) DatatypeTypeType) (|$IsA#BucketFlushModel.mergeResult| d@@34)) (BucketFlushModel.mergeResult.mergeResult_q d@@34)) :qid |unknown.0:0| :skolemid |1518| :pattern ( (|$IsA#BucketFlushModel.mergeResult| d@@34)) )))
(assert (forall ((d@@35 T@U) ) (!  (=> (and (= (type d@@35) DatatypeTypeType) ($Is d@@35 Tclass.BucketFlushModel.mergeResult)) (BucketFlushModel.mergeResult.mergeResult_q d@@35)) :qid |unknown.0:0| :skolemid |1519| :pattern ( (BucketFlushModel.mergeResult.mergeResult_q d@@35) ($Is d@@35 Tclass.BucketFlushModel.mergeResult)) )))
(assert (forall ((a@@139 T@U) (b@@70 T@U) ) (!  (=> (and (and (= (type a@@139) DatatypeTypeType) (= (type b@@70) DatatypeTypeType)) true) (= (|BucketFlushModel.mergeResult#Equal| a@@139 b@@70)  (and (and (|BucketsLib.Bucket#Equal| (BucketFlushModel.mergeResult.top a@@139) (BucketFlushModel.mergeResult.top b@@70)) (|Seq#Equal| (BucketFlushModel.mergeResult.bots a@@139) (BucketFlushModel.mergeResult.bots b@@70))) (= (BucketFlushModel.mergeResult.slack a@@139) (BucketFlushModel.mergeResult.slack b@@70))))) :qid |unknown.0:0| :skolemid |1520| :pattern ( (|BucketFlushModel.mergeResult#Equal| a@@139 b@@70)) )))
(assert (forall ((a@@140 T@U) (b@@71 T@U) ) (!  (=> (and (= (type a@@140) DatatypeTypeType) (= (type b@@71) DatatypeTypeType)) (= (|BucketFlushModel.mergeResult#Equal| a@@140 b@@71) (= a@@140 b@@71))) :qid |unknown.0:0| :skolemid |1521| :pattern ( (|BucketFlushModel.mergeResult#Equal| a@@140 b@@71)) )))
(assert (forall ((arg0@@489 T@U) (arg1@@203 T@U) ) (! (= (type (|#BucketFlushModel.partialFlushResult.partialFlushResult| arg0@@489 arg1@@203)) DatatypeTypeType) :qid |funType:#BucketFlushModel.partialFlushResult.partialFlushResult| :pattern ( (|#BucketFlushModel.partialFlushResult.partialFlushResult| arg0@@489 arg1@@203)) )))
(assert (forall ((|a#11#0#0| T@U) (|a#11#1#0| T@U) ) (!  (=> (and (= (type |a#11#0#0|) DatatypeTypeType) (= (type |a#11#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#BucketFlushModel.partialFlushResult.partialFlushResult| |a#11#0#0| |a#11#1#0|)) |##BucketFlushModel.partialFlushResult.partialFlushResult|)) :qid |BucketFlushModelidfy.1544:52| :skolemid |1522| :pattern ( (|#BucketFlushModel.partialFlushResult.partialFlushResult| |a#11#0#0| |a#11#1#0|)) )))
(assert (forall ((d@@36 T@U) ) (!  (=> (= (type d@@36) DatatypeTypeType) (= (BucketFlushModel.partialFlushResult.partialFlushResult_q d@@36) (= (DatatypeCtorId d@@36) |##BucketFlushModel.partialFlushResult.partialFlushResult|))) :qid |unknown.0:0| :skolemid |1523| :pattern ( (BucketFlushModel.partialFlushResult.partialFlushResult_q d@@36)) )))
(assert (forall ((d@@37 T@U) ) (!  (=> (and (= (type d@@37) DatatypeTypeType) (BucketFlushModel.partialFlushResult.partialFlushResult_q d@@37)) (exists ((|a#12#0#0| T@U) (|a#12#1#0| T@U) ) (!  (and (and (= (type |a#12#0#0|) DatatypeTypeType) (= (type |a#12#1#0|) (SeqType BoxType))) (= d@@37 (|#BucketFlushModel.partialFlushResult.partialFlushResult| |a#12#0#0| |a#12#1#0|))) :qid |BucketFlushModelidfy.1544:52| :skolemid |1524| :no-pattern (type |a#12#0#0|) :no-pattern (type |a#12#1#0|) :no-pattern (U_2_int |a#12#0#0|) :no-pattern (U_2_bool |a#12#0#0|) :no-pattern (U_2_int |a#12#1#0|) :no-pattern (U_2_bool |a#12#1#0|) ))) :qid |unknown.0:0| :skolemid |1525| :pattern ( (BucketFlushModel.partialFlushResult.partialFlushResult_q d@@37)) )))
(assert (= (type Tclass.BucketFlushModel.partialFlushResult) TyType))
(assert (= (Tag Tclass.BucketFlushModel.partialFlushResult) Tagclass.BucketFlushModel.partialFlushResult))
(assert (= (TagFamily Tclass.BucketFlushModel.partialFlushResult) tytagFamily$partialFlushResult))
(assert (forall ((bx@@144 T@U) ) (!  (=> (and (= (type bx@@144) BoxType) ($IsBox bx@@144 Tclass.BucketFlushModel.partialFlushResult)) (and (= ($Box ($Unbox DatatypeTypeType bx@@144)) bx@@144) ($Is ($Unbox DatatypeTypeType bx@@144) Tclass.BucketFlushModel.partialFlushResult))) :qid |unknown.0:0| :skolemid |1526| :pattern ( ($IsBox bx@@144 Tclass.BucketFlushModel.partialFlushResult)) )))
(assert (forall ((|a#13#0#0| T@U) (|a#13#1#0| T@U) ) (!  (=> (and (= (type |a#13#0#0|) DatatypeTypeType) (= (type |a#13#1#0|) (SeqType BoxType))) (= ($Is (|#BucketFlushModel.partialFlushResult.partialFlushResult| |a#13#0#0| |a#13#1#0|) Tclass.BucketFlushModel.partialFlushResult)  (and ($Is |a#13#0#0| Tclass.BucketsLib.Bucket) ($Is |a#13#1#0| (TSeq Tclass.BucketsLib.Bucket))))) :qid |BucketFlushModelidfy.1544:52| :skolemid |1527| :pattern ( ($Is (|#BucketFlushModel.partialFlushResult.partialFlushResult| |a#13#0#0| |a#13#1#0|) Tclass.BucketFlushModel.partialFlushResult)) )))
(assert (forall ((|a#14#0#0@@0| T@U) (|a#14#1#0@@0| T@U) ($h@@66 T@U) ) (!  (=> (and (and (and (= (type |a#14#0#0@@0|) DatatypeTypeType) (= (type |a#14#1#0@@0|) (SeqType BoxType))) (= (type $h@@66) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@66)) (= ($IsAlloc (|#BucketFlushModel.partialFlushResult.partialFlushResult| |a#14#0#0@@0| |a#14#1#0@@0|) Tclass.BucketFlushModel.partialFlushResult $h@@66)  (and ($IsAlloc |a#14#0#0@@0| Tclass.BucketsLib.Bucket $h@@66) ($IsAlloc |a#14#1#0@@0| (TSeq Tclass.BucketsLib.Bucket) $h@@66)))) :qid |BucketFlushModelidfy.1544:52| :skolemid |1528| :pattern ( ($IsAlloc (|#BucketFlushModel.partialFlushResult.partialFlushResult| |a#14#0#0@@0| |a#14#1#0@@0|) Tclass.BucketFlushModel.partialFlushResult $h@@66)) )))
(assert (forall ((arg0@@490 T@U) ) (! (= (type (BucketFlushModel.partialFlushResult.top arg0@@490)) DatatypeTypeType) :qid |funType:BucketFlushModel.partialFlushResult.top| :pattern ( (BucketFlushModel.partialFlushResult.top arg0@@490)) )))
(assert (forall ((d@@38 T@U) ($h@@67 T@U) ) (!  (=> (and (and (= (type d@@38) DatatypeTypeType) (= (type $h@@67) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@67) (and (BucketFlushModel.partialFlushResult.partialFlushResult_q d@@38) ($IsAlloc d@@38 Tclass.BucketFlushModel.partialFlushResult $h@@67)))) ($IsAlloc (BucketFlushModel.partialFlushResult.top d@@38) Tclass.BucketsLib.Bucket $h@@67)) :qid |unknown.0:0| :skolemid |1529| :pattern ( ($IsAlloc (BucketFlushModel.partialFlushResult.top d@@38) Tclass.BucketsLib.Bucket $h@@67)) )))
(assert (forall ((arg0@@491 T@U) ) (! (= (type (BucketFlushModel.partialFlushResult.bots arg0@@491)) (SeqType BoxType)) :qid |funType:BucketFlushModel.partialFlushResult.bots| :pattern ( (BucketFlushModel.partialFlushResult.bots arg0@@491)) )))
(assert (forall ((d@@39 T@U) ($h@@68 T@U) ) (!  (=> (and (and (= (type d@@39) DatatypeTypeType) (= (type $h@@68) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@68) (and (BucketFlushModel.partialFlushResult.partialFlushResult_q d@@39) ($IsAlloc d@@39 Tclass.BucketFlushModel.partialFlushResult $h@@68)))) ($IsAlloc (BucketFlushModel.partialFlushResult.bots d@@39) (TSeq Tclass.BucketsLib.Bucket) $h@@68)) :qid |unknown.0:0| :skolemid |1530| :pattern ( ($IsAlloc (BucketFlushModel.partialFlushResult.bots d@@39) (TSeq Tclass.BucketsLib.Bucket) $h@@68)) )))
(assert (forall ((|a#15#0#0@@0| T@U) (|a#15#1#0@@0| T@U) ) (!  (=> (and (= (type |a#15#0#0@@0|) DatatypeTypeType) (= (type |a#15#1#0@@0|) (SeqType BoxType))) (= (|#BucketFlushModel.partialFlushResult.partialFlushResult| (Lit |a#15#0#0@@0|) (Lit |a#15#1#0@@0|)) (Lit (|#BucketFlushModel.partialFlushResult.partialFlushResult| |a#15#0#0@@0| |a#15#1#0@@0|)))) :qid |BucketFlushModelidfy.1544:52| :skolemid |1531| :pattern ( (|#BucketFlushModel.partialFlushResult.partialFlushResult| (Lit |a#15#0#0@@0|) (Lit |a#15#1#0@@0|))) )))
(assert (forall ((|a#16#0#0@@0| T@U) (|a#16#1#0@@0| T@U) ) (!  (=> (and (= (type |a#16#0#0@@0|) DatatypeTypeType) (= (type |a#16#1#0@@0|) (SeqType BoxType))) (= (BucketFlushModel.partialFlushResult.top (|#BucketFlushModel.partialFlushResult.partialFlushResult| |a#16#0#0@@0| |a#16#1#0@@0|)) |a#16#0#0@@0|)) :qid |BucketFlushModelidfy.1544:52| :skolemid |1532| :pattern ( (|#BucketFlushModel.partialFlushResult.partialFlushResult| |a#16#0#0@@0| |a#16#1#0@@0|)) )))
(assert (forall ((|a#17#0#0@@0| T@U) (|a#17#1#0@@0| T@U) ) (!  (=> (and (= (type |a#17#0#0@@0|) DatatypeTypeType) (= (type |a#17#1#0@@0|) (SeqType BoxType))) (< (DtRank |a#17#0#0@@0|) (DtRank (|#BucketFlushModel.partialFlushResult.partialFlushResult| |a#17#0#0@@0| |a#17#1#0@@0|)))) :qid |BucketFlushModelidfy.1544:52| :skolemid |1533| :pattern ( (|#BucketFlushModel.partialFlushResult.partialFlushResult| |a#17#0#0@@0| |a#17#1#0@@0|)) )))
(assert (forall ((|a#18#0#0@@0| T@U) (|a#18#1#0@@0| T@U) ) (!  (=> (and (= (type |a#18#0#0@@0|) DatatypeTypeType) (= (type |a#18#1#0@@0|) (SeqType BoxType))) (= (BucketFlushModel.partialFlushResult.bots (|#BucketFlushModel.partialFlushResult.partialFlushResult| |a#18#0#0@@0| |a#18#1#0@@0|)) |a#18#1#0@@0|)) :qid |BucketFlushModelidfy.1544:52| :skolemid |1534| :pattern ( (|#BucketFlushModel.partialFlushResult.partialFlushResult| |a#18#0#0@@0| |a#18#1#0@@0|)) )))
(assert (forall ((|a#19#0#0@@0| T@U) (|a#19#1#0@@0| T@U) (i@@30 Int) ) (!  (=> (and (and (= (type |a#19#0#0@@0|) DatatypeTypeType) (= (type |a#19#1#0@@0|) (SeqType BoxType))) (and (<= 0 i@@30) (< i@@30 (|Seq#Length| |a#19#1#0@@0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#19#1#0@@0| i@@30))) (DtRank (|#BucketFlushModel.partialFlushResult.partialFlushResult| |a#19#0#0@@0| |a#19#1#0@@0|)))) :qid |BucketFlushModelidfy.1544:52| :skolemid |1535| :pattern ( (|Seq#Index| |a#19#1#0@@0| i@@30) (|#BucketFlushModel.partialFlushResult.partialFlushResult| |a#19#0#0@@0| |a#19#1#0@@0|)) )))
(assert (forall ((|a#20#0#0@@0| T@U) (|a#20#1#0@@0| T@U) ) (!  (=> (and (= (type |a#20#0#0@@0|) DatatypeTypeType) (= (type |a#20#1#0@@0|) (SeqType BoxType))) (< (|Seq#Rank| |a#20#1#0@@0|) (DtRank (|#BucketFlushModel.partialFlushResult.partialFlushResult| |a#20#0#0@@0| |a#20#1#0@@0|)))) :qid |BucketFlushModelidfy.1544:52| :skolemid |1536| :pattern ( (|#BucketFlushModel.partialFlushResult.partialFlushResult| |a#20#0#0@@0| |a#20#1#0@@0|)) )))
(assert (forall ((d@@40 T@U) ) (!  (=> (and (= (type d@@40) DatatypeTypeType) (|$IsA#BucketFlushModel.partialFlushResult| d@@40)) (BucketFlushModel.partialFlushResult.partialFlushResult_q d@@40)) :qid |unknown.0:0| :skolemid |1537| :pattern ( (|$IsA#BucketFlushModel.partialFlushResult| d@@40)) )))
(assert (forall ((d@@41 T@U) ) (!  (=> (and (= (type d@@41) DatatypeTypeType) ($Is d@@41 Tclass.BucketFlushModel.partialFlushResult)) (BucketFlushModel.partialFlushResult.partialFlushResult_q d@@41)) :qid |unknown.0:0| :skolemid |1538| :pattern ( (BucketFlushModel.partialFlushResult.partialFlushResult_q d@@41) ($Is d@@41 Tclass.BucketFlushModel.partialFlushResult)) )))
(assert (forall ((a@@141 T@U) (b@@72 T@U) ) (!  (=> (and (and (= (type a@@141) DatatypeTypeType) (= (type b@@72) DatatypeTypeType)) true) (= (|BucketFlushModel.partialFlushResult#Equal| a@@141 b@@72)  (and (|BucketsLib.Bucket#Equal| (BucketFlushModel.partialFlushResult.top a@@141) (BucketFlushModel.partialFlushResult.top b@@72)) (|Seq#Equal| (BucketFlushModel.partialFlushResult.bots a@@141) (BucketFlushModel.partialFlushResult.bots b@@72))))) :qid |unknown.0:0| :skolemid |1539| :pattern ( (|BucketFlushModel.partialFlushResult#Equal| a@@141 b@@72)) )))
(assert (forall ((a@@142 T@U) (b@@73 T@U) ) (!  (=> (and (= (type a@@142) DatatypeTypeType) (= (type b@@73) DatatypeTypeType)) (= (|BucketFlushModel.partialFlushResult#Equal| a@@142 b@@73) (= a@@142 b@@73))) :qid |unknown.0:0| :skolemid |1540| :pattern ( (|BucketFlushModel.partialFlushResult#Equal| a@@142 b@@73)) )))
(assert (= (type Tclass.BucketFlushModel.__default) TyType))
(assert (= (Tag Tclass.BucketFlushModel.__default) Tagclass.BucketFlushModel.__default))
(assert (= (TagFamily Tclass.BucketFlushModel.__default) tytagFamily$_default))
(assert (forall ((bx@@145 T@U) ) (!  (=> (and (= (type bx@@145) BoxType) ($IsBox bx@@145 Tclass.BucketFlushModel.__default)) (and (= ($Box ($Unbox refType bx@@145)) bx@@145) ($Is ($Unbox refType bx@@145) Tclass.BucketFlushModel.__default))) :qid |unknown.0:0| :skolemid |1541| :pattern ( ($IsBox bx@@145 Tclass.BucketFlushModel.__default)) )))
(assert (forall (($o@@9 T@U) ) (!  (=> (= (type $o@@9) refType) (= ($Is $o@@9 Tclass.BucketFlushModel.__default)  (or (= $o@@9 null) (= (dtype $o@@9) Tclass.BucketFlushModel.__default)))) :qid |unknown.0:0| :skolemid |1542| :pattern ( ($Is $o@@9 Tclass.BucketFlushModel.__default)) )))
(assert (forall (($o@@10 T@U) ($h@@69 T@U) ) (!  (=> (and (= (type $o@@10) refType) (= (type $h@@69) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@10 Tclass.BucketFlushModel.__default $h@@69)  (or (= $o@@10 null) (U_2_bool (MapType1Select (MapType0Select $h@@69 $o@@10) alloc))))) :qid |unknown.0:0| :skolemid |1543| :pattern ( ($IsAlloc $o@@10 Tclass.BucketFlushModel.__default $h@@69)) )))
(assert (forall ((arg0@@492 T@U) (arg1@@204 T@U) (arg2@@137 T@U) (arg3@@99 Int) (arg4@@81 Int) (arg5@@66 T@U) (arg6@@54 T@U) (arg7@@39 Int) (arg8@@28 T@U) (arg9@@25 T@U) (arg10@@25 Int) ) (! (= (type (BucketFlushModel.__default.mergeToOneChild arg0@@492 arg1@@204 arg2@@137 arg3@@99 arg4@@81 arg5@@66 arg6@@54 arg7@@39 arg8@@28 arg9@@25 arg10@@25)) DatatypeTypeType) :qid |funType:BucketFlushModel.__default.mergeToOneChild| :pattern ( (BucketFlushModel.__default.mergeToOneChild arg0@@492 arg1@@204 arg2@@137 arg3@@99 arg4@@81 arg5@@66 arg6@@54 arg7@@39 arg8@@28 arg9@@25 arg10@@25)) )))
(assert (forall (($ly T@U) (|top_keys#0@@7| T@U) (|top_msgs#0@@7| T@U) (|from#0@@7| Int) (|to#0@@7| Int) (|bot_keys#0| T@U) (|bot_msgs#0| T@U) (|bot_from#0| Int) (|acc_keys#0| T@U) (|acc_msgs#0| T@U) (|slack#0| Int) ) (!  (=> (and (and (and (and (and (and (= (type $ly) LayerTypeType) (= (type |top_keys#0@@7|) (SeqType BoxType))) (= (type |top_msgs#0@@7|) (SeqType BoxType))) (= (type |bot_keys#0|) (SeqType BoxType))) (= (type |bot_msgs#0|) (SeqType BoxType))) (= (type |acc_keys#0|) (SeqType BoxType))) (= (type |acc_msgs#0|) (SeqType BoxType))) (= (BucketFlushModel.__default.mergeToOneChild ($LS $ly) |top_keys#0@@7| |top_msgs#0@@7| |from#0@@7| |to#0@@7| |bot_keys#0| |bot_msgs#0| |bot_from#0| |acc_keys#0| |acc_msgs#0| |slack#0|) (BucketFlushModel.__default.mergeToOneChild $ly |top_keys#0@@7| |top_msgs#0@@7| |from#0@@7| |to#0@@7| |bot_keys#0| |bot_msgs#0| |bot_from#0| |acc_keys#0| |acc_msgs#0| |slack#0|))) :qid |BucketFlushModelidfy.79:22| :skolemid |1544| :pattern ( (BucketFlushModel.__default.mergeToOneChild ($LS $ly) |top_keys#0@@7| |top_msgs#0@@7| |from#0@@7| |to#0@@7| |bot_keys#0| |bot_msgs#0| |bot_from#0| |acc_keys#0| |acc_msgs#0| |slack#0|)) )))
(assert (forall ((arg0@@493 T@U) ) (! (= (type (AsFuelBottom arg0@@493)) LayerTypeType) :qid |funType:AsFuelBottom| :pattern ( (AsFuelBottom arg0@@493)) )))
(assert (forall (($ly@@0 T@U) (|top_keys#0@@8| T@U) (|top_msgs#0@@8| T@U) (|from#0@@8| Int) (|to#0@@8| Int) (|bot_keys#0@@0| T@U) (|bot_msgs#0@@0| T@U) (|bot_from#0@@0| Int) (|acc_keys#0@@0| T@U) (|acc_msgs#0@@0| T@U) (|slack#0@@0| Int) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@0) LayerTypeType) (= (type |top_keys#0@@8|) (SeqType BoxType))) (= (type |top_msgs#0@@8|) (SeqType BoxType))) (= (type |bot_keys#0@@0|) (SeqType BoxType))) (= (type |bot_msgs#0@@0|) (SeqType BoxType))) (= (type |acc_keys#0@@0|) (SeqType BoxType))) (= (type |acc_msgs#0@@0|) (SeqType BoxType))) (= (BucketFlushModel.__default.mergeToOneChild $ly@@0 |top_keys#0@@8| |top_msgs#0@@8| |from#0@@8| |to#0@@8| |bot_keys#0@@0| |bot_msgs#0@@0| |bot_from#0@@0| |acc_keys#0@@0| |acc_msgs#0@@0| |slack#0@@0|) (BucketFlushModel.__default.mergeToOneChild $LZ |top_keys#0@@8| |top_msgs#0@@8| |from#0@@8| |to#0@@8| |bot_keys#0@@0| |bot_msgs#0@@0| |bot_from#0@@0| |acc_keys#0@@0| |acc_msgs#0@@0| |slack#0@@0|))) :qid |BucketFlushModelidfy.79:22| :skolemid |1545| :pattern ( (BucketFlushModel.__default.mergeToOneChild (AsFuelBottom $ly@@0) |top_keys#0@@8| |top_msgs#0@@8| |from#0@@8| |to#0@@8| |bot_keys#0@@0| |bot_msgs#0@@0| |bot_from#0@@0| |acc_keys#0@@0| |acc_msgs#0@@0| |slack#0@@0|)) )))
(assert  (=> (<= 11 $FunctionContextHeight) (forall (($ly@@1 T@U) (|top_keys#0@@9| T@U) (|top_msgs#0@@9| T@U) (|from#0@@9| Int) (|to#0@@9| Int) (|bot_keys#0@@1| T@U) (|bot_msgs#0@@1| T@U) (|bot_from#0@@1| Int) (|acc_keys#0@@1| T@U) (|acc_msgs#0@@1| T@U) (|slack#0@@1| Int) ) (!  (=> (and (and (and (and (and (and (and (= (type $ly@@1) LayerTypeType) (= (type |top_keys#0@@9|) (SeqType BoxType))) (= (type |top_msgs#0@@9|) (SeqType BoxType))) (= (type |bot_keys#0@@1|) (SeqType BoxType))) (= (type |bot_msgs#0@@1|) (SeqType BoxType))) (= (type |acc_keys#0@@1|) (SeqType BoxType))) (= (type |acc_msgs#0@@1|) (SeqType BoxType))) (or (|BucketFlushModel.__default.mergeToOneChild#canCall| |top_keys#0@@9| |top_msgs#0@@9| |from#0@@9| |to#0@@9| |bot_keys#0@@1| |bot_msgs#0@@1| |bot_from#0@@1| |acc_keys#0@@1| |acc_msgs#0@@1| |slack#0@@1|) (and (not (= 11 $FunctionContextHeight)) (and (and (and (and (and (and (and (and (and (and ($Is |top_keys#0@@9| (TSeq Tclass.KeyType.Key)) ($Is |top_msgs#0@@9| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |from#0@@9|)) (<= (LitInt 0) |to#0@@9|)) ($Is |bot_keys#0@@1| (TSeq Tclass.KeyType.Key))) ($Is |bot_msgs#0@@1| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |bot_from#0@@1|)) ($Is |acc_keys#0@@1| (TSeq Tclass.KeyType.Key))) ($Is |acc_msgs#0@@1| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |slack#0@@1|)) (and (and (and (and (= (|Seq#Length| |top_keys#0@@9|) (|Seq#Length| |top_msgs#0@@9|)) (= (|Seq#Length| |bot_keys#0@@1|) (|Seq#Length| |bot_msgs#0@@1|))) (= (|Seq#Length| |acc_keys#0@@1|) (|Seq#Length| |acc_msgs#0@@1|))) (and (<= |from#0@@9| |to#0@@9|) (<= |to#0@@9| (|Seq#Length| |top_keys#0@@9|)))) (<= |bot_from#0@@1| (|Seq#Length| |bot_keys#0@@1|))))))) (and (and (= (|Seq#Length| (BucketFlushModel.singleMergeResult.keys (BucketFlushModel.__default.mergeToOneChild $ly@@1 |top_keys#0@@9| |top_msgs#0@@9| |from#0@@9| |to#0@@9| |bot_keys#0@@1| |bot_msgs#0@@1| |bot_from#0@@1| |acc_keys#0@@1| |acc_msgs#0@@1| |slack#0@@1|))) (|Seq#Length| (BucketFlushModel.singleMergeResult.msgs (BucketFlushModel.__default.mergeToOneChild $ly@@1 |top_keys#0@@9| |top_msgs#0@@9| |from#0@@9| |to#0@@9| |bot_keys#0@@1| |bot_msgs#0@@1| |bot_from#0@@1| |acc_keys#0@@1| |acc_msgs#0@@1| |slack#0@@1|)))) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q (BucketFlushModel.__default.mergeToOneChild $ly@@1 |top_keys#0@@9| |top_msgs#0@@9| |from#0@@9| |to#0@@9| |bot_keys#0@@1| |bot_msgs#0@@1| |bot_from#0@@1| |acc_keys#0@@1| |acc_msgs#0@@1| |slack#0@@1|)) (and (<= |from#0@@9| (BucketFlushModel.singleMergeResult.end (BucketFlushModel.__default.mergeToOneChild $ly@@1 |top_keys#0@@9| |top_msgs#0@@9| |from#0@@9| |to#0@@9| |bot_keys#0@@1| |bot_msgs#0@@1| |bot_from#0@@1| |acc_keys#0@@1| |acc_msgs#0@@1| |slack#0@@1|))) (<= (BucketFlushModel.singleMergeResult.end (BucketFlushModel.__default.mergeToOneChild $ly@@1 |top_keys#0@@9| |top_msgs#0@@9| |from#0@@9| |to#0@@9| |bot_keys#0@@1| |bot_msgs#0@@1| |bot_from#0@@1| |acc_keys#0@@1| |acc_msgs#0@@1| |slack#0@@1|)) |to#0@@9|)))) ($Is (BucketFlushModel.__default.mergeToOneChild $ly@@1 |top_keys#0@@9| |top_msgs#0@@9| |from#0@@9| |to#0@@9| |bot_keys#0@@1| |bot_msgs#0@@1| |bot_from#0@@1| |acc_keys#0@@1| |acc_msgs#0@@1| |slack#0@@1|) Tclass.BucketFlushModel.singleMergeResult))) :qid |BucketFlushModelidfy.79:22| :skolemid |1546| :pattern ( (BucketFlushModel.__default.mergeToOneChild $ly@@1 |top_keys#0@@9| |top_msgs#0@@9| |from#0@@9| |to#0@@9| |bot_keys#0@@1| |bot_msgs#0@@1| |bot_from#0@@1| |acc_keys#0@@1| |acc_msgs#0@@1| |slack#0@@1|)) ))))
(assert (forall (($ly@@2 T@U) (|top_keys#0@@10| T@U) (|top_msgs#0@@10| T@U) (|from#0@@10| Int) (|to#0@@10| Int) (|bot_keys#0@@2| T@U) (|bot_msgs#0@@2| T@U) (|bot_from#0@@2| Int) (|acc_keys#0@@2| T@U) (|acc_msgs#0@@2| T@U) (|slack#0@@2| Int) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@2) LayerTypeType) (= (type |top_keys#0@@10|) (SeqType BoxType))) (= (type |top_msgs#0@@10|) (SeqType BoxType))) (= (type |bot_keys#0@@2|) (SeqType BoxType))) (= (type |bot_msgs#0@@2|) (SeqType BoxType))) (= (type |acc_keys#0@@2|) (SeqType BoxType))) (= (type |acc_msgs#0@@2|) (SeqType BoxType))) (=> (and (and (and (and (and (and (and (and (and ($Is |top_keys#0@@10| (TSeq Tclass.KeyType.Key)) ($Is |top_msgs#0@@10| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |from#0@@10|)) (<= (LitInt 0) |to#0@@10|)) ($Is |bot_keys#0@@2| (TSeq Tclass.KeyType.Key))) ($Is |bot_msgs#0@@2| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |bot_from#0@@2|)) ($Is |acc_keys#0@@2| (TSeq Tclass.KeyType.Key))) ($Is |acc_msgs#0@@2| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |slack#0@@2|)) (= (|BucketFlushModel.__default.mergeToOneChild#requires| $ly@@2 |top_keys#0@@10| |top_msgs#0@@10| |from#0@@10| |to#0@@10| |bot_keys#0@@2| |bot_msgs#0@@2| |bot_from#0@@2| |acc_keys#0@@2| |acc_msgs#0@@2| |slack#0@@2|)  (and (and (and (and (= (|Seq#Length| |top_keys#0@@10|) (|Seq#Length| |top_msgs#0@@10|)) (= (|Seq#Length| |bot_keys#0@@2|) (|Seq#Length| |bot_msgs#0@@2|))) (= (|Seq#Length| |acc_keys#0@@2|) (|Seq#Length| |acc_msgs#0@@2|))) (and (<= |from#0@@10| |to#0@@10|) (<= |to#0@@10| (|Seq#Length| |top_keys#0@@10|)))) (<= |bot_from#0@@2| (|Seq#Length| |bot_keys#0@@2|)))))) :qid |BucketFlushModelidfy.79:22| :skolemid |1547| :pattern ( (|BucketFlushModel.__default.mergeToOneChild#requires| $ly@@2 |top_keys#0@@10| |top_msgs#0@@10| |from#0@@10| |to#0@@10| |bot_keys#0@@2| |bot_msgs#0@@2| |bot_from#0@@2| |acc_keys#0@@2| |acc_msgs#0@@2| |slack#0@@2|)) )))
(assert  (and (forall ((arg0@@494 T@U) (arg1@@205 T@U) ) (! (= (type (ValueMessage.__default.Merge arg0@@494 arg1@@205)) DatatypeTypeType) :qid |funType:ValueMessage.__default.Merge| :pattern ( (ValueMessage.__default.Merge arg0@@494 arg1@@205)) )) (= (type ValueMessage.__default.IdentityMessage) DatatypeTypeType)))
(assert  (=> (<= 11 $FunctionContextHeight) (forall (($ly@@3 T@U) (|top_keys#0@@11| T@U) (|top_msgs#0@@11| T@U) (|from#0@@11| Int) (|to#0@@11| Int) (|bot_keys#0@@3| T@U) (|bot_msgs#0@@3| T@U) (|bot_from#0@@3| Int) (|acc_keys#0@@3| T@U) (|acc_msgs#0@@3| T@U) (|slack#0@@3| Int) ) (!  (=> (and (and (and (and (and (and (and (= (type $ly@@3) LayerTypeType) (= (type |top_keys#0@@11|) (SeqType BoxType))) (= (type |top_msgs#0@@11|) (SeqType BoxType))) (= (type |bot_keys#0@@3|) (SeqType BoxType))) (= (type |bot_msgs#0@@3|) (SeqType BoxType))) (= (type |acc_keys#0@@3|) (SeqType BoxType))) (= (type |acc_msgs#0@@3|) (SeqType BoxType))) (or (|BucketFlushModel.__default.mergeToOneChild#canCall| |top_keys#0@@11| |top_msgs#0@@11| |from#0@@11| |to#0@@11| |bot_keys#0@@3| |bot_msgs#0@@3| |bot_from#0@@3| |acc_keys#0@@3| |acc_msgs#0@@3| |slack#0@@3|) (and (not (= 11 $FunctionContextHeight)) (and (and (and (and (and (and (and (and (and (and ($Is |top_keys#0@@11| (TSeq Tclass.KeyType.Key)) ($Is |top_msgs#0@@11| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |from#0@@11|)) (<= (LitInt 0) |to#0@@11|)) ($Is |bot_keys#0@@3| (TSeq Tclass.KeyType.Key))) ($Is |bot_msgs#0@@3| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |bot_from#0@@3|)) ($Is |acc_keys#0@@3| (TSeq Tclass.KeyType.Key))) ($Is |acc_msgs#0@@3| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |slack#0@@3|)) (and (and (and (and (= (|Seq#Length| |top_keys#0@@11|) (|Seq#Length| |top_msgs#0@@11|)) (= (|Seq#Length| |bot_keys#0@@3|) (|Seq#Length| |bot_msgs#0@@3|))) (= (|Seq#Length| |acc_keys#0@@3|) (|Seq#Length| |acc_msgs#0@@3|))) (and (<= |from#0@@11| |to#0@@11|) (<= |to#0@@11| (|Seq#Length| |top_keys#0@@11|)))) (<= |bot_from#0@@3| (|Seq#Length| |bot_keys#0@@3|))))))) (and (=> (not (= |from#0@@11| |to#0@@11|)) (and (=> (and (< |bot_from#0@@3| (|Seq#Length| |bot_keys#0@@3|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@11| |from#0@@11|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@3| |bot_from#0@@3|)))) (let ((|key#0@@1| ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@11| |from#0@@11|)))) (let ((|topmsg#0| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@11| |from#0@@11|)))) (let ((|botmsg#0| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@3| |bot_from#0@@3|)))) (and (|ValueMessage.__default.Merge#canCall| |topmsg#0| |botmsg#0|) (let ((|msg#0| (ValueMessage.__default.Merge |topmsg#0| |botmsg#0|))) (and (and (and (and (|$IsA#ValueMessage.Message| |msg#0|) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) |ValueMessage.__default.IdentityMessage#canCall|) (=> (|ValueMessage.Message#Equal| |msg#0| ValueMessage.__default.IdentityMessage) (and (and (|BucketWeights.__default.WeightKey#canCall| |key#0@@1|) (|BucketWeights.__default.WeightMessage#canCall| |botmsg#0|)) (|BucketFlushModel.__default.mergeToOneChild#canCall| |top_keys#0@@11| |top_msgs#0@@11| (+ |from#0@@11| 1) |to#0@@11| |bot_keys#0@@3| |bot_msgs#0@@3| (+ |bot_from#0@@3| 1) |acc_keys#0@@3| |acc_msgs#0@@3| (+ (+ |slack#0@@3| (BucketWeights.__default.WeightKey |key#0@@1|)) (BucketWeights.__default.WeightMessage |botmsg#0|)))))) (=> (not (|ValueMessage.Message#Equal| |msg#0| ValueMessage.__default.IdentityMessage)) (and (and (|BucketWeights.__default.WeightMessage#canCall| |msg#0|) (|BucketWeights.__default.WeightMessage#canCall| |botmsg#0|)) (let ((|delta#0| (- (BucketWeights.__default.WeightMessage |msg#0|) (BucketWeights.__default.WeightMessage |botmsg#0|)))) (=> (>= |slack#0@@3| |delta#0|) (|BucketFlushModel.__default.mergeToOneChild#canCall| |top_keys#0@@11| |top_msgs#0@@11| (+ |from#0@@11| 1) |to#0@@11| |bot_keys#0@@3| |bot_msgs#0@@3| (+ |bot_from#0@@3| 1) (|Seq#Append| |acc_keys#0@@3| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#0@@1|))) (|Seq#Append| |acc_msgs#0@@3| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#0|))) (- |slack#0@@3| |delta#0|))))))))))))) (=> (not (and (< |bot_from#0@@3| (|Seq#Length| |bot_keys#0@@3|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@11| |from#0@@11|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@3| |bot_from#0@@3|))))) (and (and (=> (not (= |bot_from#0@@3| (|Seq#Length| |bot_keys#0@@3|))) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@11| |from#0@@11|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@3| |bot_from#0@@3|)))) (=> (or (= |bot_from#0@@3| (|Seq#Length| |bot_keys#0@@3|)) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@11| |from#0@@11|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@3| |bot_from#0@@3|)))) (let ((|key#1| ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@11| |from#0@@11|)))) (let ((|msg#1| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@11| |from#0@@11|)))) (and (and (|BucketWeights.__default.WeightKey#canCall| |key#1|) (|BucketWeights.__default.WeightMessage#canCall| |msg#1|)) (let ((|delta#1| (+ (BucketWeights.__default.WeightKey |key#1|) (BucketWeights.__default.WeightMessage |msg#1|)))) (=> (>= |slack#0@@3| |delta#1|) (|BucketFlushModel.__default.mergeToOneChild#canCall| |top_keys#0@@11| |top_msgs#0@@11| (+ |from#0@@11| 1) |to#0@@11| |bot_keys#0@@3| |bot_msgs#0@@3| |bot_from#0@@3| (|Seq#Append| |acc_keys#0@@3| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#1|))) (|Seq#Append| |acc_msgs#0@@3| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#1|))) (- |slack#0@@3| |delta#1|))))))))) (=> (not (or (= |bot_from#0@@3| (|Seq#Length| |bot_keys#0@@3|)) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@11| |from#0@@11|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@3| |bot_from#0@@3|))))) (let ((|key#2| ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@3| |bot_from#0@@3|)))) (let ((|msg#2| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@3| |bot_from#0@@3|)))) (|BucketFlushModel.__default.mergeToOneChild#canCall| |top_keys#0@@11| |top_msgs#0@@11| |from#0@@11| |to#0@@11| |bot_keys#0@@3| |bot_msgs#0@@3| (+ |bot_from#0@@3| 1) (|Seq#Append| |acc_keys#0@@3| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#2|))) (|Seq#Append| |acc_msgs#0@@3| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#2|))) |slack#0@@3|)))))))) (= (BucketFlushModel.__default.mergeToOneChild ($LS $ly@@3) |top_keys#0@@11| |top_msgs#0@@11| |from#0@@11| |to#0@@11| |bot_keys#0@@3| |bot_msgs#0@@3| |bot_from#0@@3| |acc_keys#0@@3| |acc_msgs#0@@3| |slack#0@@3|) (ite (= |from#0@@11| |to#0@@11|) (|#BucketFlushModel.singleMergeResult.MergeCompleted| (|Seq#Append| |acc_keys#0@@3| (|Seq#Drop| |bot_keys#0@@3| |bot_from#0@@3|)) (|Seq#Append| |acc_msgs#0@@3| (|Seq#Drop| |bot_msgs#0@@3| |bot_from#0@@3|)) |slack#0@@3|) (ite  (and (< |bot_from#0@@3| (|Seq#Length| |bot_keys#0@@3|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@11| |from#0@@11|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@3| |bot_from#0@@3|)))) (let ((|key#0@@2| ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@11| |from#0@@11|)))) (let ((|topmsg#0@@0| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@11| |from#0@@11|)))) (let ((|botmsg#0@@0| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@3| |bot_from#0@@3|)))) (let ((|msg#0@@0| (ValueMessage.__default.Merge |topmsg#0@@0| |botmsg#0@@0|))) (ite (|ValueMessage.Message#Equal| |msg#0@@0| ValueMessage.__default.IdentityMessage) (BucketFlushModel.__default.mergeToOneChild $ly@@3 |top_keys#0@@11| |top_msgs#0@@11| (+ |from#0@@11| 1) |to#0@@11| |bot_keys#0@@3| |bot_msgs#0@@3| (+ |bot_from#0@@3| 1) |acc_keys#0@@3| |acc_msgs#0@@3| (+ (+ |slack#0@@3| (BucketWeights.__default.WeightKey |key#0@@2|)) (BucketWeights.__default.WeightMessage |botmsg#0@@0|))) (let ((|delta#0@@0| (- (BucketWeights.__default.WeightMessage |msg#0@@0|) (BucketWeights.__default.WeightMessage |botmsg#0@@0|)))) (ite (> |delta#0@@0| |slack#0@@3|) (|#BucketFlushModel.singleMergeResult.SlackExhausted| (|Seq#Append| |acc_keys#0@@3| (|Seq#Drop| |bot_keys#0@@3| |bot_from#0@@3|)) (|Seq#Append| |acc_msgs#0@@3| (|Seq#Drop| |bot_msgs#0@@3| |bot_from#0@@3|)) |from#0@@11| |slack#0@@3|) (BucketFlushModel.__default.mergeToOneChild $ly@@3 |top_keys#0@@11| |top_msgs#0@@11| (+ |from#0@@11| 1) |to#0@@11| |bot_keys#0@@3| |bot_msgs#0@@3| (+ |bot_from#0@@3| 1) (|Seq#Append| |acc_keys#0@@3| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#0@@2|))) (|Seq#Append| |acc_msgs#0@@3| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#0@@0|))) (- |slack#0@@3| |delta#0@@0|))))))))) (ite  (or (= |bot_from#0@@3| (|Seq#Length| |bot_keys#0@@3|)) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@11| |from#0@@11|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@3| |bot_from#0@@3|)))) (let ((|key#1@@0| ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@11| |from#0@@11|)))) (let ((|msg#1@@0| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@11| |from#0@@11|)))) (let ((|delta#1@@0| (+ (BucketWeights.__default.WeightKey |key#1@@0|) (BucketWeights.__default.WeightMessage |msg#1@@0|)))) (ite (> |delta#1@@0| |slack#0@@3|) (|#BucketFlushModel.singleMergeResult.SlackExhausted| (|Seq#Append| |acc_keys#0@@3| (|Seq#Drop| |bot_keys#0@@3| |bot_from#0@@3|)) (|Seq#Append| |acc_msgs#0@@3| (|Seq#Drop| |bot_msgs#0@@3| |bot_from#0@@3|)) |from#0@@11| |slack#0@@3|) (BucketFlushModel.__default.mergeToOneChild $ly@@3 |top_keys#0@@11| |top_msgs#0@@11| (+ |from#0@@11| 1) |to#0@@11| |bot_keys#0@@3| |bot_msgs#0@@3| |bot_from#0@@3| (|Seq#Append| |acc_keys#0@@3| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#1@@0|))) (|Seq#Append| |acc_msgs#0@@3| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#1@@0|))) (- |slack#0@@3| |delta#1@@0|)))))) (let ((|key#2@@0| ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@3| |bot_from#0@@3|)))) (let ((|msg#2@@0| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@3| |bot_from#0@@3|)))) (BucketFlushModel.__default.mergeToOneChild $ly@@3 |top_keys#0@@11| |top_msgs#0@@11| |from#0@@11| |to#0@@11| |bot_keys#0@@3| |bot_msgs#0@@3| (+ |bot_from#0@@3| 1) (|Seq#Append| |acc_keys#0@@3| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#2@@0|))) (|Seq#Append| |acc_msgs#0@@3| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#2@@0|))) |slack#0@@3|))))))))) :qid |BucketFlushModelidfy.79:22| :skolemid |1548| :pattern ( (BucketFlushModel.__default.mergeToOneChild ($LS $ly@@3) |top_keys#0@@11| |top_msgs#0@@11| |from#0@@11| |to#0@@11| |bot_keys#0@@3| |bot_msgs#0@@3| |bot_from#0@@3| |acc_keys#0@@3| |acc_msgs#0@@3| |slack#0@@3|)) ))))
(assert  (=> (<= 11 $FunctionContextHeight) (forall (($ly@@4 T@U) (|top_keys#0@@12| T@U) (|top_msgs#0@@12| T@U) (|from#0@@12| Int) (|to#0@@12| Int) (|bot_keys#0@@4| T@U) (|bot_msgs#0@@4| T@U) (|bot_from#0@@4| Int) (|acc_keys#0@@4| T@U) (|acc_msgs#0@@4| T@U) (|slack#0@@4| Int) ) (!  (=> (and (and (and (and (and (and (and (= (type $ly@@4) LayerTypeType) (= (type |top_keys#0@@12|) (SeqType BoxType))) (= (type |top_msgs#0@@12|) (SeqType BoxType))) (= (type |bot_keys#0@@4|) (SeqType BoxType))) (= (type |bot_msgs#0@@4|) (SeqType BoxType))) (= (type |acc_keys#0@@4|) (SeqType BoxType))) (= (type |acc_msgs#0@@4|) (SeqType BoxType))) (or (|BucketFlushModel.__default.mergeToOneChild#canCall| (Lit |top_keys#0@@12|) |top_msgs#0@@12| (LitInt |from#0@@12|) |to#0@@12| (Lit |bot_keys#0@@4|) |bot_msgs#0@@4| (LitInt |bot_from#0@@4|) |acc_keys#0@@4| |acc_msgs#0@@4| |slack#0@@4|) (and (not (= 11 $FunctionContextHeight)) (and (and (and (and (and (and (and (and (and (and ($Is |top_keys#0@@12| (TSeq Tclass.KeyType.Key)) ($Is |top_msgs#0@@12| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |from#0@@12|)) (<= (LitInt 0) |to#0@@12|)) ($Is |bot_keys#0@@4| (TSeq Tclass.KeyType.Key))) ($Is |bot_msgs#0@@4| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |bot_from#0@@4|)) ($Is |acc_keys#0@@4| (TSeq Tclass.KeyType.Key))) ($Is |acc_msgs#0@@4| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |slack#0@@4|)) (and (and (and (and (= (|Seq#Length| (Lit |top_keys#0@@12|)) (|Seq#Length| |top_msgs#0@@12|)) (= (|Seq#Length| (Lit |bot_keys#0@@4|)) (|Seq#Length| |bot_msgs#0@@4|))) (= (|Seq#Length| |acc_keys#0@@4|) (|Seq#Length| |acc_msgs#0@@4|))) (and (<= (LitInt |from#0@@12|) |to#0@@12|) (<= |to#0@@12| (|Seq#Length| (Lit |top_keys#0@@12|))))) (<= (LitInt |bot_from#0@@4|) (|Seq#Length| (Lit |bot_keys#0@@4|)))))))) (and (=> (not (= (LitInt |from#0@@12|) |to#0@@12|)) (and (=> (and (< |bot_from#0@@4| (|Seq#Length| (Lit |bot_keys#0@@4|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |top_keys#0@@12|) (LitInt |from#0@@12|))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |bot_keys#0@@4|) (LitInt |bot_from#0@@4|))))) (let ((|key#3| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |top_keys#0@@12|) (LitInt |from#0@@12|))))) (let ((|topmsg#1| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@12| (LitInt |from#0@@12|))))) (let ((|botmsg#1| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@4| (LitInt |bot_from#0@@4|))))) (and (|ValueMessage.__default.Merge#canCall| |topmsg#1| |botmsg#1|) (let ((|msg#3| (ValueMessage.__default.Merge |topmsg#1| |botmsg#1|))) (and (and (and (and (|$IsA#ValueMessage.Message| |msg#3|) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) |ValueMessage.__default.IdentityMessage#canCall|) (=> (|ValueMessage.Message#Equal| |msg#3| ValueMessage.__default.IdentityMessage) (and (and (|BucketWeights.__default.WeightKey#canCall| |key#3|) (|BucketWeights.__default.WeightMessage#canCall| |botmsg#1|)) (|BucketFlushModel.__default.mergeToOneChild#canCall| (Lit |top_keys#0@@12|) |top_msgs#0@@12| (LitInt (+ |from#0@@12| 1)) |to#0@@12| (Lit |bot_keys#0@@4|) |bot_msgs#0@@4| (LitInt (+ |bot_from#0@@4| 1)) |acc_keys#0@@4| |acc_msgs#0@@4| (+ (+ |slack#0@@4| (BucketWeights.__default.WeightKey |key#3|)) (BucketWeights.__default.WeightMessage |botmsg#1|)))))) (=> (not (|ValueMessage.Message#Equal| |msg#3| ValueMessage.__default.IdentityMessage)) (and (and (|BucketWeights.__default.WeightMessage#canCall| |msg#3|) (|BucketWeights.__default.WeightMessage#canCall| |botmsg#1|)) (let ((|delta#2| (- (BucketWeights.__default.WeightMessage |msg#3|) (BucketWeights.__default.WeightMessage |botmsg#1|)))) (=> (>= |slack#0@@4| |delta#2|) (|BucketFlushModel.__default.mergeToOneChild#canCall| (Lit |top_keys#0@@12|) |top_msgs#0@@12| (LitInt (+ |from#0@@12| 1)) |to#0@@12| (Lit |bot_keys#0@@4|) |bot_msgs#0@@4| (LitInt (+ |bot_from#0@@4| 1)) (|Seq#Append| |acc_keys#0@@4| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#3|))) (|Seq#Append| |acc_msgs#0@@4| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#3|))) (- |slack#0@@4| |delta#2|))))))))))))) (=> (not (and (< |bot_from#0@@4| (|Seq#Length| (Lit |bot_keys#0@@4|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |top_keys#0@@12|) (LitInt |from#0@@12|))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |bot_keys#0@@4|) (LitInt |bot_from#0@@4|)))))) (and (and (=> (not (= (LitInt |bot_from#0@@4|) (|Seq#Length| (Lit |bot_keys#0@@4|)))) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |top_keys#0@@12|) (LitInt |from#0@@12|))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |bot_keys#0@@4|) (LitInt |bot_from#0@@4|))))) (=> (or (= (LitInt |bot_from#0@@4|) (|Seq#Length| (Lit |bot_keys#0@@4|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |top_keys#0@@12|) (LitInt |from#0@@12|))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |bot_keys#0@@4|) (LitInt |bot_from#0@@4|))))) (let ((|key#4| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |top_keys#0@@12|) (LitInt |from#0@@12|))))) (let ((|msg#4| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@12| (LitInt |from#0@@12|))))) (and (and (|BucketWeights.__default.WeightKey#canCall| |key#4|) (|BucketWeights.__default.WeightMessage#canCall| |msg#4|)) (let ((|delta#3| (+ (BucketWeights.__default.WeightKey |key#4|) (BucketWeights.__default.WeightMessage |msg#4|)))) (=> (>= |slack#0@@4| |delta#3|) (|BucketFlushModel.__default.mergeToOneChild#canCall| (Lit |top_keys#0@@12|) |top_msgs#0@@12| (LitInt (+ |from#0@@12| 1)) |to#0@@12| (Lit |bot_keys#0@@4|) |bot_msgs#0@@4| (LitInt |bot_from#0@@4|) (|Seq#Append| |acc_keys#0@@4| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#4|))) (|Seq#Append| |acc_msgs#0@@4| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#4|))) (- |slack#0@@4| |delta#3|))))))))) (=> (not (or (= (LitInt |bot_from#0@@4|) (|Seq#Length| (Lit |bot_keys#0@@4|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |top_keys#0@@12|) (LitInt |from#0@@12|))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |bot_keys#0@@4|) (LitInt |bot_from#0@@4|)))))) (let ((|key#5| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |bot_keys#0@@4|) (LitInt |bot_from#0@@4|))))) (let ((|msg#5| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@4| (LitInt |bot_from#0@@4|))))) (|BucketFlushModel.__default.mergeToOneChild#canCall| (Lit |top_keys#0@@12|) |top_msgs#0@@12| (LitInt |from#0@@12|) |to#0@@12| (Lit |bot_keys#0@@4|) |bot_msgs#0@@4| (LitInt (+ |bot_from#0@@4| 1)) (|Seq#Append| |acc_keys#0@@4| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#5|))) (|Seq#Append| |acc_msgs#0@@4| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#5|))) |slack#0@@4|)))))))) (= (BucketFlushModel.__default.mergeToOneChild ($LS $ly@@4) (Lit |top_keys#0@@12|) |top_msgs#0@@12| (LitInt |from#0@@12|) |to#0@@12| (Lit |bot_keys#0@@4|) |bot_msgs#0@@4| (LitInt |bot_from#0@@4|) |acc_keys#0@@4| |acc_msgs#0@@4| |slack#0@@4|) (ite (= (LitInt |from#0@@12|) |to#0@@12|) (|#BucketFlushModel.singleMergeResult.MergeCompleted| (|Seq#Append| |acc_keys#0@@4| (|Seq#Drop| (Lit |bot_keys#0@@4|) (LitInt |bot_from#0@@4|))) (|Seq#Append| |acc_msgs#0@@4| (|Seq#Drop| |bot_msgs#0@@4| (LitInt |bot_from#0@@4|))) |slack#0@@4|) (ite  (and (< |bot_from#0@@4| (|Seq#Length| (Lit |bot_keys#0@@4|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |top_keys#0@@12|) (LitInt |from#0@@12|))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |bot_keys#0@@4|) (LitInt |bot_from#0@@4|))))) (let ((|key#3@@0| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |top_keys#0@@12|) (LitInt |from#0@@12|))))) (let ((|topmsg#1@@0| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@12| (LitInt |from#0@@12|))))) (let ((|botmsg#1@@0| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@4| (LitInt |bot_from#0@@4|))))) (let ((|msg#3@@0| (ValueMessage.__default.Merge |topmsg#1@@0| |botmsg#1@@0|))) (ite (|ValueMessage.Message#Equal| |msg#3@@0| ValueMessage.__default.IdentityMessage) (BucketFlushModel.__default.mergeToOneChild ($LS $ly@@4) (Lit |top_keys#0@@12|) |top_msgs#0@@12| (LitInt (+ |from#0@@12| 1)) |to#0@@12| (Lit |bot_keys#0@@4|) |bot_msgs#0@@4| (LitInt (+ |bot_from#0@@4| 1)) |acc_keys#0@@4| |acc_msgs#0@@4| (+ (+ |slack#0@@4| (BucketWeights.__default.WeightKey |key#3@@0|)) (BucketWeights.__default.WeightMessage |botmsg#1@@0|))) (let ((|delta#2@@0| (- (BucketWeights.__default.WeightMessage |msg#3@@0|) (BucketWeights.__default.WeightMessage |botmsg#1@@0|)))) (ite (> |delta#2@@0| |slack#0@@4|) (|#BucketFlushModel.singleMergeResult.SlackExhausted| (|Seq#Append| |acc_keys#0@@4| (|Seq#Drop| (Lit |bot_keys#0@@4|) (LitInt |bot_from#0@@4|))) (|Seq#Append| |acc_msgs#0@@4| (|Seq#Drop| |bot_msgs#0@@4| (LitInt |bot_from#0@@4|))) (LitInt |from#0@@12|) |slack#0@@4|) (BucketFlushModel.__default.mergeToOneChild ($LS $ly@@4) (Lit |top_keys#0@@12|) |top_msgs#0@@12| (LitInt (+ |from#0@@12| 1)) |to#0@@12| (Lit |bot_keys#0@@4|) |bot_msgs#0@@4| (LitInt (+ |bot_from#0@@4| 1)) (|Seq#Append| |acc_keys#0@@4| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#3@@0|))) (|Seq#Append| |acc_msgs#0@@4| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#3@@0|))) (- |slack#0@@4| |delta#2@@0|))))))))) (ite  (or (= (LitInt |bot_from#0@@4|) (|Seq#Length| (Lit |bot_keys#0@@4|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |top_keys#0@@12|) (LitInt |from#0@@12|))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |bot_keys#0@@4|) (LitInt |bot_from#0@@4|))))) (let ((|key#4@@0| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |top_keys#0@@12|) (LitInt |from#0@@12|))))) (let ((|msg#4@@0| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@12| (LitInt |from#0@@12|))))) (let ((|delta#3@@0| (+ (BucketWeights.__default.WeightKey |key#4@@0|) (BucketWeights.__default.WeightMessage |msg#4@@0|)))) (ite (> |delta#3@@0| |slack#0@@4|) (|#BucketFlushModel.singleMergeResult.SlackExhausted| (|Seq#Append| |acc_keys#0@@4| (|Seq#Drop| (Lit |bot_keys#0@@4|) (LitInt |bot_from#0@@4|))) (|Seq#Append| |acc_msgs#0@@4| (|Seq#Drop| |bot_msgs#0@@4| (LitInt |bot_from#0@@4|))) (LitInt |from#0@@12|) |slack#0@@4|) (BucketFlushModel.__default.mergeToOneChild ($LS $ly@@4) (Lit |top_keys#0@@12|) |top_msgs#0@@12| (LitInt (+ |from#0@@12| 1)) |to#0@@12| (Lit |bot_keys#0@@4|) |bot_msgs#0@@4| (LitInt |bot_from#0@@4|) (|Seq#Append| |acc_keys#0@@4| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#4@@0|))) (|Seq#Append| |acc_msgs#0@@4| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#4@@0|))) (- |slack#0@@4| |delta#3@@0|)))))) (let ((|key#5@@0| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |bot_keys#0@@4|) (LitInt |bot_from#0@@4|))))) (let ((|msg#5@@0| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@4| (LitInt |bot_from#0@@4|))))) (BucketFlushModel.__default.mergeToOneChild ($LS $ly@@4) (Lit |top_keys#0@@12|) |top_msgs#0@@12| (LitInt |from#0@@12|) |to#0@@12| (Lit |bot_keys#0@@4|) |bot_msgs#0@@4| (LitInt (+ |bot_from#0@@4| 1)) (|Seq#Append| |acc_keys#0@@4| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#5@@0|))) (|Seq#Append| |acc_msgs#0@@4| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#5@@0|))) |slack#0@@4|))))))))) :qid |BucketFlushModelidfy.79:22| :weight 3 :skolemid |1549| :pattern ( (BucketFlushModel.__default.mergeToOneChild ($LS $ly@@4) (Lit |top_keys#0@@12|) |top_msgs#0@@12| (LitInt |from#0@@12|) |to#0@@12| (Lit |bot_keys#0@@4|) |bot_msgs#0@@4| (LitInt |bot_from#0@@4|) |acc_keys#0@@4| |acc_msgs#0@@4| |slack#0@@4|)) ))))
(assert  (=> (<= 11 $FunctionContextHeight) (forall (($ly@@5 T@U) (|top_keys#0@@13| T@U) (|top_msgs#0@@13| T@U) (|from#0@@13| Int) (|to#0@@13| Int) (|bot_keys#0@@5| T@U) (|bot_msgs#0@@5| T@U) (|bot_from#0@@5| Int) (|acc_keys#0@@5| T@U) (|acc_msgs#0@@5| T@U) (|slack#0@@5| Int) ) (!  (=> (and (and (and (and (and (and (and (= (type $ly@@5) LayerTypeType) (= (type |top_keys#0@@13|) (SeqType BoxType))) (= (type |top_msgs#0@@13|) (SeqType BoxType))) (= (type |bot_keys#0@@5|) (SeqType BoxType))) (= (type |bot_msgs#0@@5|) (SeqType BoxType))) (= (type |acc_keys#0@@5|) (SeqType BoxType))) (= (type |acc_msgs#0@@5|) (SeqType BoxType))) (or (|BucketFlushModel.__default.mergeToOneChild#canCall| (Lit |top_keys#0@@13|) (Lit |top_msgs#0@@13|) (LitInt |from#0@@13|) (LitInt |to#0@@13|) (Lit |bot_keys#0@@5|) (Lit |bot_msgs#0@@5|) (LitInt |bot_from#0@@5|) (Lit |acc_keys#0@@5|) (Lit |acc_msgs#0@@5|) (LitInt |slack#0@@5|)) (and (not (= 11 $FunctionContextHeight)) (and (and (and (and (and (and (and (and (and (and ($Is |top_keys#0@@13| (TSeq Tclass.KeyType.Key)) ($Is |top_msgs#0@@13| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |from#0@@13|)) (<= (LitInt 0) |to#0@@13|)) ($Is |bot_keys#0@@5| (TSeq Tclass.KeyType.Key))) ($Is |bot_msgs#0@@5| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |bot_from#0@@5|)) ($Is |acc_keys#0@@5| (TSeq Tclass.KeyType.Key))) ($Is |acc_msgs#0@@5| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |slack#0@@5|)) (and (and (and (and (= (|Seq#Length| (Lit |top_keys#0@@13|)) (|Seq#Length| (Lit |top_msgs#0@@13|))) (= (|Seq#Length| (Lit |bot_keys#0@@5|)) (|Seq#Length| (Lit |bot_msgs#0@@5|)))) (= (|Seq#Length| (Lit |acc_keys#0@@5|)) (|Seq#Length| (Lit |acc_msgs#0@@5|)))) (and (<= (LitInt |from#0@@13|) (LitInt |to#0@@13|)) (<= (LitInt |to#0@@13|) (|Seq#Length| (Lit |top_keys#0@@13|))))) (<= (LitInt |bot_from#0@@5|) (|Seq#Length| (Lit |bot_keys#0@@5|)))))))) (and (=> (not (= (LitInt |from#0@@13|) (LitInt |to#0@@13|))) (and (=> (and (< |bot_from#0@@5| (|Seq#Length| (Lit |bot_keys#0@@5|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |top_keys#0@@13|) (LitInt |from#0@@13|))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |bot_keys#0@@5|) (LitInt |bot_from#0@@5|))))) (let ((|key#6| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |top_keys#0@@13|) (LitInt |from#0@@13|))))) (let ((|topmsg#2| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |top_msgs#0@@13|) (LitInt |from#0@@13|))))) (let ((|botmsg#2| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bot_msgs#0@@5|) (LitInt |bot_from#0@@5|))))) (and (|ValueMessage.__default.Merge#canCall| |topmsg#2| |botmsg#2|) (let ((|msg#6| (ValueMessage.__default.Merge |topmsg#2| |botmsg#2|))) (and (and (and (and (|$IsA#ValueMessage.Message| |msg#6|) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) |ValueMessage.__default.IdentityMessage#canCall|) (=> (|ValueMessage.Message#Equal| |msg#6| ValueMessage.__default.IdentityMessage) (and (and (|BucketWeights.__default.WeightKey#canCall| |key#6|) (|BucketWeights.__default.WeightMessage#canCall| |botmsg#2|)) (|BucketFlushModel.__default.mergeToOneChild#canCall| (Lit |top_keys#0@@13|) (Lit |top_msgs#0@@13|) (LitInt (+ |from#0@@13| 1)) (LitInt |to#0@@13|) (Lit |bot_keys#0@@5|) (Lit |bot_msgs#0@@5|) (LitInt (+ |bot_from#0@@5| 1)) (Lit |acc_keys#0@@5|) (Lit |acc_msgs#0@@5|) (+ (+ |slack#0@@5| (BucketWeights.__default.WeightKey |key#6|)) (BucketWeights.__default.WeightMessage |botmsg#2|)))))) (=> (not (|ValueMessage.Message#Equal| |msg#6| ValueMessage.__default.IdentityMessage)) (and (and (|BucketWeights.__default.WeightMessage#canCall| |msg#6|) (|BucketWeights.__default.WeightMessage#canCall| |botmsg#2|)) (let ((|delta#4| (- (BucketWeights.__default.WeightMessage |msg#6|) (BucketWeights.__default.WeightMessage |botmsg#2|)))) (=> (>= |slack#0@@5| |delta#4|) (|BucketFlushModel.__default.mergeToOneChild#canCall| (Lit |top_keys#0@@13|) (Lit |top_msgs#0@@13|) (LitInt (+ |from#0@@13| 1)) (LitInt |to#0@@13|) (Lit |bot_keys#0@@5|) (Lit |bot_msgs#0@@5|) (LitInt (+ |bot_from#0@@5| 1)) (|Seq#Append| |acc_keys#0@@5| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#6|))) (|Seq#Append| |acc_msgs#0@@5| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#6|))) (- |slack#0@@5| |delta#4|))))))))))))) (=> (not (and (< |bot_from#0@@5| (|Seq#Length| (Lit |bot_keys#0@@5|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |top_keys#0@@13|) (LitInt |from#0@@13|))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |bot_keys#0@@5|) (LitInt |bot_from#0@@5|)))))) (and (and (=> (not (= (LitInt |bot_from#0@@5|) (|Seq#Length| (Lit |bot_keys#0@@5|)))) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |top_keys#0@@13|) (LitInt |from#0@@13|))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |bot_keys#0@@5|) (LitInt |bot_from#0@@5|))))) (=> (or (= (LitInt |bot_from#0@@5|) (|Seq#Length| (Lit |bot_keys#0@@5|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |top_keys#0@@13|) (LitInt |from#0@@13|))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |bot_keys#0@@5|) (LitInt |bot_from#0@@5|))))) (let ((|key#7| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |top_keys#0@@13|) (LitInt |from#0@@13|))))) (let ((|msg#7| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |top_msgs#0@@13|) (LitInt |from#0@@13|))))) (and (and (|BucketWeights.__default.WeightKey#canCall| |key#7|) (|BucketWeights.__default.WeightMessage#canCall| |msg#7|)) (let ((|delta#5| (+ (BucketWeights.__default.WeightKey |key#7|) (BucketWeights.__default.WeightMessage |msg#7|)))) (=> (>= |slack#0@@5| |delta#5|) (|BucketFlushModel.__default.mergeToOneChild#canCall| (Lit |top_keys#0@@13|) (Lit |top_msgs#0@@13|) (LitInt (+ |from#0@@13| 1)) (LitInt |to#0@@13|) (Lit |bot_keys#0@@5|) (Lit |bot_msgs#0@@5|) (LitInt |bot_from#0@@5|) (|Seq#Append| |acc_keys#0@@5| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#7|))) (|Seq#Append| |acc_msgs#0@@5| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#7|))) (- |slack#0@@5| |delta#5|))))))))) (=> (not (or (= (LitInt |bot_from#0@@5|) (|Seq#Length| (Lit |bot_keys#0@@5|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |top_keys#0@@13|) (LitInt |from#0@@13|))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |bot_keys#0@@5|) (LitInt |bot_from#0@@5|)))))) (let ((|key#8| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |bot_keys#0@@5|) (LitInt |bot_from#0@@5|))))) (let ((|msg#8| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bot_msgs#0@@5|) (LitInt |bot_from#0@@5|))))) (|BucketFlushModel.__default.mergeToOneChild#canCall| (Lit |top_keys#0@@13|) (Lit |top_msgs#0@@13|) (LitInt |from#0@@13|) (LitInt |to#0@@13|) (Lit |bot_keys#0@@5|) (Lit |bot_msgs#0@@5|) (LitInt (+ |bot_from#0@@5| 1)) (|Seq#Append| |acc_keys#0@@5| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#8|))) (|Seq#Append| |acc_msgs#0@@5| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#8|))) (LitInt |slack#0@@5|))))))))) (= (BucketFlushModel.__default.mergeToOneChild ($LS $ly@@5) (Lit |top_keys#0@@13|) (Lit |top_msgs#0@@13|) (LitInt |from#0@@13|) (LitInt |to#0@@13|) (Lit |bot_keys#0@@5|) (Lit |bot_msgs#0@@5|) (LitInt |bot_from#0@@5|) (Lit |acc_keys#0@@5|) (Lit |acc_msgs#0@@5|) (LitInt |slack#0@@5|)) (ite (= (LitInt |from#0@@13|) (LitInt |to#0@@13|)) (|#BucketFlushModel.singleMergeResult.MergeCompleted| (|Seq#Append| |acc_keys#0@@5| (|Seq#Drop| (Lit |bot_keys#0@@5|) (LitInt |bot_from#0@@5|))) (|Seq#Append| |acc_msgs#0@@5| (|Seq#Drop| (Lit |bot_msgs#0@@5|) (LitInt |bot_from#0@@5|))) (LitInt |slack#0@@5|)) (ite  (and (< |bot_from#0@@5| (|Seq#Length| (Lit |bot_keys#0@@5|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |top_keys#0@@13|) (LitInt |from#0@@13|))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |bot_keys#0@@5|) (LitInt |bot_from#0@@5|))))) (let ((|key#6@@0| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |top_keys#0@@13|) (LitInt |from#0@@13|))))) (let ((|topmsg#2@@0| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |top_msgs#0@@13|) (LitInt |from#0@@13|))))) (let ((|botmsg#2@@0| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bot_msgs#0@@5|) (LitInt |bot_from#0@@5|))))) (let ((|msg#6@@0| (ValueMessage.__default.Merge |topmsg#2@@0| |botmsg#2@@0|))) (ite (|ValueMessage.Message#Equal| |msg#6@@0| ValueMessage.__default.IdentityMessage) (BucketFlushModel.__default.mergeToOneChild ($LS $ly@@5) (Lit |top_keys#0@@13|) (Lit |top_msgs#0@@13|) (LitInt (+ |from#0@@13| 1)) (LitInt |to#0@@13|) (Lit |bot_keys#0@@5|) (Lit |bot_msgs#0@@5|) (LitInt (+ |bot_from#0@@5| 1)) (Lit |acc_keys#0@@5|) (Lit |acc_msgs#0@@5|) (+ (+ |slack#0@@5| (BucketWeights.__default.WeightKey |key#6@@0|)) (BucketWeights.__default.WeightMessage |botmsg#2@@0|))) (let ((|delta#4@@0| (- (BucketWeights.__default.WeightMessage |msg#6@@0|) (BucketWeights.__default.WeightMessage |botmsg#2@@0|)))) (ite (> |delta#4@@0| |slack#0@@5|) (|#BucketFlushModel.singleMergeResult.SlackExhausted| (|Seq#Append| |acc_keys#0@@5| (|Seq#Drop| (Lit |bot_keys#0@@5|) (LitInt |bot_from#0@@5|))) (|Seq#Append| |acc_msgs#0@@5| (|Seq#Drop| (Lit |bot_msgs#0@@5|) (LitInt |bot_from#0@@5|))) (LitInt |from#0@@13|) (LitInt |slack#0@@5|)) (BucketFlushModel.__default.mergeToOneChild ($LS $ly@@5) (Lit |top_keys#0@@13|) (Lit |top_msgs#0@@13|) (LitInt (+ |from#0@@13| 1)) (LitInt |to#0@@13|) (Lit |bot_keys#0@@5|) (Lit |bot_msgs#0@@5|) (LitInt (+ |bot_from#0@@5| 1)) (|Seq#Append| |acc_keys#0@@5| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#6@@0|))) (|Seq#Append| |acc_msgs#0@@5| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#6@@0|))) (- |slack#0@@5| |delta#4@@0|))))))))) (ite  (or (= (LitInt |bot_from#0@@5|) (|Seq#Length| (Lit |bot_keys#0@@5|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |top_keys#0@@13|) (LitInt |from#0@@13|))) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |bot_keys#0@@5|) (LitInt |bot_from#0@@5|))))) (let ((|key#7@@0| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |top_keys#0@@13|) (LitInt |from#0@@13|))))) (let ((|msg#7@@0| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |top_msgs#0@@13|) (LitInt |from#0@@13|))))) (let ((|delta#5@@0| (+ (BucketWeights.__default.WeightKey |key#7@@0|) (BucketWeights.__default.WeightMessage |msg#7@@0|)))) (ite (> |delta#5@@0| |slack#0@@5|) (|#BucketFlushModel.singleMergeResult.SlackExhausted| (|Seq#Append| |acc_keys#0@@5| (|Seq#Drop| (Lit |bot_keys#0@@5|) (LitInt |bot_from#0@@5|))) (|Seq#Append| |acc_msgs#0@@5| (|Seq#Drop| (Lit |bot_msgs#0@@5|) (LitInt |bot_from#0@@5|))) (LitInt |from#0@@13|) (LitInt |slack#0@@5|)) (BucketFlushModel.__default.mergeToOneChild ($LS $ly@@5) (Lit |top_keys#0@@13|) (Lit |top_msgs#0@@13|) (LitInt (+ |from#0@@13| 1)) (LitInt |to#0@@13|) (Lit |bot_keys#0@@5|) (Lit |bot_msgs#0@@5|) (LitInt |bot_from#0@@5|) (|Seq#Append| |acc_keys#0@@5| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#7@@0|))) (|Seq#Append| |acc_msgs#0@@5| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#7@@0|))) (- |slack#0@@5| |delta#5@@0|)))))) (let ((|key#8@@0| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |bot_keys#0@@5|) (LitInt |bot_from#0@@5|))))) (let ((|msg#8@@0| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bot_msgs#0@@5|) (LitInt |bot_from#0@@5|))))) (BucketFlushModel.__default.mergeToOneChild ($LS $ly@@5) (Lit |top_keys#0@@13|) (Lit |top_msgs#0@@13|) (LitInt |from#0@@13|) (LitInt |to#0@@13|) (Lit |bot_keys#0@@5|) (Lit |bot_msgs#0@@5|) (LitInt (+ |bot_from#0@@5| 1)) (|Seq#Append| |acc_keys#0@@5| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#8@@0|))) (|Seq#Append| |acc_msgs#0@@5| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#8@@0|))) (LitInt |slack#0@@5|)))))))))) :qid |BucketFlushModelidfy.79:22| :weight 3 :skolemid |1550| :pattern ( (BucketFlushModel.__default.mergeToOneChild ($LS $ly@@5) (Lit |top_keys#0@@13|) (Lit |top_msgs#0@@13|) (LitInt |from#0@@13|) (LitInt |to#0@@13|) (Lit |bot_keys#0@@5|) (Lit |bot_msgs#0@@5|) (LitInt |bot_from#0@@5|) (Lit |acc_keys#0@@5|) (Lit |acc_msgs#0@@5|) (LitInt |slack#0@@5|))) ))))
(assert (= (type Tclass.NativeTypes.byte) TyType))
(assert (= (Tag Tclass.NativeTypes.byte) Tagclass.NativeTypes.byte))
(assert (= (TagFamily Tclass.NativeTypes.byte) tytagFamily$byte))
(assert (forall ((bx@@146 T@U) ) (!  (=> (and (= (type bx@@146) BoxType) ($IsBox bx@@146 Tclass.NativeTypes.byte)) (and (= ($Box ($Unbox intType bx@@146)) bx@@146) ($Is ($Unbox intType bx@@146) Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |1559| :pattern ( ($IsBox bx@@146 Tclass.NativeTypes.byte)) )))
(assert (forall ((arg0@@495 T@U) (arg1@@206 T@U) (arg2@@138 T@U) (arg3@@100 T@U) ) (! (= (type (BucketFlushModel.__default.topBotAccMergeForKey arg0@@495 arg1@@206 arg2@@138 arg3@@100)) DatatypeTypeType) :qid |funType:BucketFlushModel.__default.topBotAccMergeForKey| :pattern ( (BucketFlushModel.__default.topBotAccMergeForKey arg0@@495 arg1@@206 arg2@@138 arg3@@100)) )))
(assert  (=> (<= 12 $FunctionContextHeight) (forall ((|top#0@@1| T@U) (|bot#0| T@U) (|acc#0| T@U) (|key#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type |top#0@@1|) (MapType BoxType BoxType)) (= (type |bot#0|) (MapType BoxType BoxType))) (= (type |acc#0|) (MapType BoxType BoxType))) (= (type |key#0@@3|) (SeqType BoxType))) (or (|BucketFlushModel.__default.topBotAccMergeForKey#canCall| |top#0@@1| |bot#0| |acc#0| |key#0@@3|) (and (not (= 12 $FunctionContextHeight)) (and (and (and ($Is |top#0@@1| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |bot#0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) ($Is |acc#0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) ($Is |key#0@@3| Tclass.KeyType.Key))))) ($Is (BucketFlushModel.__default.topBotAccMergeForKey |top#0@@1| |bot#0| |acc#0| |key#0@@3|) Tclass.ValueMessage.Message)) :qid |BucketFlushModelidfy.162:5| :skolemid |1565| :pattern ( (BucketFlushModel.__default.topBotAccMergeForKey |top#0@@1| |bot#0| |acc#0| |key#0@@3|)) ))))
(assert (forall ((|top#0@@2| T@U) (|bot#0@@0| T@U) (|acc#0@@0| T@U) (|key#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type |top#0@@2|) (MapType BoxType BoxType)) (= (type |bot#0@@0|) (MapType BoxType BoxType))) (= (type |acc#0@@0|) (MapType BoxType BoxType))) (= (type |key#0@@4|) (SeqType BoxType))) (and (and (and ($Is |top#0@@2| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |bot#0@@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) ($Is |acc#0@@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) ($Is |key#0@@4| Tclass.KeyType.Key))) (= (|BucketFlushModel.__default.topBotAccMergeForKey#requires| |top#0@@2| |bot#0@@0| |acc#0@@0| |key#0@@4|) true)) :qid |BucketFlushModelidfy.162:5| :skolemid |1566| :pattern ( (|BucketFlushModel.__default.topBotAccMergeForKey#requires| |top#0@@2| |bot#0@@0| |acc#0@@0| |key#0@@4|)) )))
(assert  (=> (<= 12 $FunctionContextHeight) (forall ((|top#0@@3| T@U) (|bot#0@@1| T@U) (|acc#0@@1| T@U) (|key#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type |top#0@@3|) (MapType BoxType BoxType)) (= (type |bot#0@@1|) (MapType BoxType BoxType))) (= (type |acc#0@@1|) (MapType BoxType BoxType))) (= (type |key#0@@5|) (SeqType BoxType))) (or (|BucketFlushModel.__default.topBotAccMergeForKey#canCall| |top#0@@3| |bot#0@@1| |acc#0@@1| |key#0@@5|) (and (not (= 12 $FunctionContextHeight)) (and (and (and ($Is |top#0@@3| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |bot#0@@1| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) ($Is |acc#0@@1| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) ($Is |key#0@@5| Tclass.KeyType.Key))))) (and (and (=> (not (U_2_bool (MapType0Select (|Map#Domain| |top#0@@3|) ($Box |key#0@@5|)))) |ValueMessage.__default.IdentityMessage#canCall|) (let ((|topmsg#0@@1| (ite (U_2_bool (MapType0Select (|Map#Domain| |top#0@@3|) ($Box |key#0@@5|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |top#0@@3|) ($Box |key#0@@5|))) ValueMessage.__default.IdentityMessage))) (and (=> (not (U_2_bool (MapType0Select (|Map#Domain| |acc#0@@1|) ($Box |key#0@@5|)))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |bot#0@@1|) ($Box |key#0@@5|)))) |ValueMessage.__default.IdentityMessage#canCall|)) (let ((|botmsg#0@@1| (ite (U_2_bool (MapType0Select (|Map#Domain| |acc#0@@1|) ($Box |key#0@@5|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |acc#0@@1|) ($Box |key#0@@5|))) (ite (U_2_bool (MapType0Select (|Map#Domain| |bot#0@@1|) ($Box |key#0@@5|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bot#0@@1|) ($Box |key#0@@5|))) ValueMessage.__default.IdentityMessage)))) (|ValueMessage.__default.Merge#canCall| |topmsg#0@@1| |botmsg#0@@1|))))) (= (BucketFlushModel.__default.topBotAccMergeForKey |top#0@@3| |bot#0@@1| |acc#0@@1| |key#0@@5|) (let ((|topmsg#0@@2| (ite (U_2_bool (MapType0Select (|Map#Domain| |top#0@@3|) ($Box |key#0@@5|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |top#0@@3|) ($Box |key#0@@5|))) ValueMessage.__default.IdentityMessage))) (let ((|botmsg#0@@2| (ite (U_2_bool (MapType0Select (|Map#Domain| |acc#0@@1|) ($Box |key#0@@5|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |acc#0@@1|) ($Box |key#0@@5|))) (ite (U_2_bool (MapType0Select (|Map#Domain| |bot#0@@1|) ($Box |key#0@@5|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bot#0@@1|) ($Box |key#0@@5|))) ValueMessage.__default.IdentityMessage)))) (ValueMessage.__default.Merge |topmsg#0@@2| |botmsg#0@@2|)))))) :qid |BucketFlushModelidfy.162:5| :skolemid |1567| :pattern ( (BucketFlushModel.__default.topBotAccMergeForKey |top#0@@3| |bot#0@@1| |acc#0@@1| |key#0@@5|)) ))))
(assert  (=> (<= 12 $FunctionContextHeight) (forall ((|top#0@@4| T@U) (|bot#0@@2| T@U) (|acc#0@@2| T@U) (|key#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type |top#0@@4|) (MapType BoxType BoxType)) (= (type |bot#0@@2|) (MapType BoxType BoxType))) (= (type |acc#0@@2|) (MapType BoxType BoxType))) (= (type |key#0@@6|) (SeqType BoxType))) (or (|BucketFlushModel.__default.topBotAccMergeForKey#canCall| (Lit |top#0@@4|) (Lit |bot#0@@2|) (Lit |acc#0@@2|) (Lit |key#0@@6|)) (and (not (= 12 $FunctionContextHeight)) (and (and (and ($Is |top#0@@4| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |bot#0@@2| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) ($Is |acc#0@@2| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) ($Is |key#0@@6| Tclass.KeyType.Key))))) (and (and (=> (not (U_2_bool (MapType0Select (|Map#Domain| |top#0@@4|) ($Box |key#0@@6|)))) |ValueMessage.__default.IdentityMessage#canCall|) (let ((|topmsg#1@@1| (ite (U_2_bool (MapType0Select (|Map#Domain| |top#0@@4|) ($Box |key#0@@6|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |top#0@@4|)) ($Box (Lit |key#0@@6|)))) ValueMessage.__default.IdentityMessage))) (and (=> (not (U_2_bool (MapType0Select (|Map#Domain| |acc#0@@2|) ($Box |key#0@@6|)))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |bot#0@@2|) ($Box |key#0@@6|)))) |ValueMessage.__default.IdentityMessage#canCall|)) (let ((|botmsg#1@@1| (ite (U_2_bool (MapType0Select (|Map#Domain| |acc#0@@2|) ($Box |key#0@@6|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |acc#0@@2|)) ($Box (Lit |key#0@@6|)))) (ite (U_2_bool (MapType0Select (|Map#Domain| |bot#0@@2|) ($Box |key#0@@6|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |bot#0@@2|)) ($Box (Lit |key#0@@6|)))) ValueMessage.__default.IdentityMessage)))) (|ValueMessage.__default.Merge#canCall| |topmsg#1@@1| |botmsg#1@@1|))))) (= (BucketFlushModel.__default.topBotAccMergeForKey (Lit |top#0@@4|) (Lit |bot#0@@2|) (Lit |acc#0@@2|) (Lit |key#0@@6|)) (let ((|topmsg#1@@2| (ite (U_2_bool (MapType0Select (|Map#Domain| |top#0@@4|) ($Box |key#0@@6|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |top#0@@4|)) ($Box (Lit |key#0@@6|)))) ValueMessage.__default.IdentityMessage))) (let ((|botmsg#1@@2| (ite (U_2_bool (MapType0Select (|Map#Domain| |acc#0@@2|) ($Box |key#0@@6|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |acc#0@@2|)) ($Box (Lit |key#0@@6|)))) (ite (U_2_bool (MapType0Select (|Map#Domain| |bot#0@@2|) ($Box |key#0@@6|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |bot#0@@2|)) ($Box (Lit |key#0@@6|)))) ValueMessage.__default.IdentityMessage)))) (ValueMessage.__default.Merge |topmsg#1@@2| |botmsg#1@@2|)))))) :qid |BucketFlushModelidfy.162:5| :weight 3 :skolemid |1568| :pattern ( (BucketFlushModel.__default.topBotAccMergeForKey (Lit |top#0@@4|) (Lit |bot#0@@2|) (Lit |acc#0@@2|) (Lit |key#0@@6|))) ))))
(assert (forall ((arg0@@496 T@U) (arg1@@207 T@U) (arg2@@139 T@U) ) (! (= (type (BucketFlushModel.__default.topBotAccMerge arg0@@496 arg1@@207 arg2@@139)) (MapType BoxType BoxType)) :qid |funType:BucketFlushModel.__default.topBotAccMerge| :pattern ( (BucketFlushModel.__default.topBotAccMerge arg0@@496 arg1@@207 arg2@@139)) )))
(assert  (=> (<= 13 $FunctionContextHeight) (forall ((|top#0@@5| T@U) (|bot#0@@3| T@U) (|acc#0@@3| T@U) ) (!  (=> (and (and (and (= (type |top#0@@5|) (MapType BoxType BoxType)) (= (type |bot#0@@3|) (MapType BoxType BoxType))) (= (type |acc#0@@3|) (MapType BoxType BoxType))) (or (|BucketFlushModel.__default.topBotAccMerge#canCall| |top#0@@5| |bot#0@@3| |acc#0@@3|) (and (not (= 13 $FunctionContextHeight)) (and (and ($Is |top#0@@5| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |bot#0@@3| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) ($Is |acc#0@@3| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) ($Is (BucketFlushModel.__default.topBotAccMerge |top#0@@5| |bot#0@@3| |acc#0@@3|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) :qid |BucketFlushModelidfy.174:5| :skolemid |1572| :pattern ( (BucketFlushModel.__default.topBotAccMerge |top#0@@5| |bot#0@@3| |acc#0@@3|)) ))))
(assert (forall ((|top#0@@6| T@U) (|bot#0@@4| T@U) (|acc#0@@4| T@U) ) (!  (=> (and (and (and (= (type |top#0@@6|) (MapType BoxType BoxType)) (= (type |bot#0@@4|) (MapType BoxType BoxType))) (= (type |acc#0@@4|) (MapType BoxType BoxType))) (and (and ($Is |top#0@@6| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |bot#0@@4| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) ($Is |acc#0@@4| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (|BucketFlushModel.__default.topBotAccMerge#requires| |top#0@@6| |bot#0@@4| |acc#0@@4|) true)) :qid |BucketFlushModelidfy.174:5| :skolemid |1573| :pattern ( (|BucketFlushModel.__default.topBotAccMerge#requires| |top#0@@6| |bot#0@@4| |acc#0@@4|)) )))
(assert  (and (forall ((arg0@@497 T@U) (arg1@@208 T@U) (arg2@@140 T@U) (arg3@@101 T@U) (arg4@@82 T@U) (arg5@@67 T@U) ) (! (= (type (|lambda#22| arg0@@497 arg1@@208 arg2@@140 arg3@@101 arg4@@82 arg5@@67)) (MapType0Type BoxType boolType)) :qid |funType:lambda#22| :pattern ( (|lambda#22| arg0@@497 arg1@@208 arg2@@140 arg3@@101 arg4@@82 arg5@@67)) )) (forall ((arg0@@498 T@U) (arg1@@209 T@U) (arg2@@141 T@U) ) (! (= (type (|lambda#23| arg0@@498 arg1@@209 arg2@@141)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#23| :pattern ( (|lambda#23| arg0@@498 arg1@@209 arg2@@141)) ))))
(assert  (=> (<= 13 $FunctionContextHeight) (forall ((|top#0@@7| T@U) (|bot#0@@5| T@U) (|acc#0@@5| T@U) ) (!  (=> (and (and (and (= (type |top#0@@7|) (MapType BoxType BoxType)) (= (type |bot#0@@5|) (MapType BoxType BoxType))) (= (type |acc#0@@5|) (MapType BoxType BoxType))) (or (|BucketFlushModel.__default.topBotAccMerge#canCall| |top#0@@7| |bot#0@@5| |acc#0@@5|) (and (not (= 13 $FunctionContextHeight)) (and (and ($Is |top#0@@7| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |bot#0@@5| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) ($Is |acc#0@@5| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) (and (forall ((|key#0@@7| T@U) ) (!  (=> (and (= (type |key#0@@7|) (SeqType BoxType)) ($Is |key#0@@7| Tclass.KeyType.Key)) (and (=> (U_2_bool (MapType0Select (|Set#Union| (|Set#Union| (|Map#Domain| |top#0@@7|) (|Map#Domain| |bot#0@@5|)) (|Map#Domain| |acc#0@@5|)) ($Box |key#0@@7|))) (and (and (|$IsA#ValueMessage.Message| (BucketFlushModel.__default.topBotAccMergeForKey |top#0@@7| |bot#0@@5| |acc#0@@5| |key#0@@7|)) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) (and (|BucketFlushModel.__default.topBotAccMergeForKey#canCall| |top#0@@7| |bot#0@@5| |acc#0@@5| |key#0@@7|) |ValueMessage.__default.IdentityMessage#canCall|))) (=> (and (U_2_bool (MapType0Select (|Set#Union| (|Set#Union| (|Map#Domain| |top#0@@7|) (|Map#Domain| |bot#0@@5|)) (|Map#Domain| |acc#0@@5|)) ($Box |key#0@@7|))) (not (|ValueMessage.Message#Equal| (BucketFlushModel.__default.topBotAccMergeForKey |top#0@@7| |bot#0@@5| |acc#0@@5| |key#0@@7|) ValueMessage.__default.IdentityMessage))) (|BucketFlushModel.__default.topBotAccMergeForKey#canCall| |top#0@@7| |bot#0@@5| |acc#0@@5| |key#0@@7|)))) :qid |BucketFlushModelidfy.178:9| :skolemid |1574| :pattern ( (BucketFlushModel.__default.topBotAccMergeForKey |top#0@@7| |bot#0@@5| |acc#0@@5| |key#0@@7|)) :pattern ( (MapType0Select (|Set#Union| (|Set#Union| (|Map#Domain| |top#0@@7|) (|Map#Domain| |bot#0@@5|)) (|Map#Domain| |acc#0@@5|)) ($Box |key#0@@7|))) )) (= (BucketFlushModel.__default.topBotAccMerge |top#0@@7| |bot#0@@5| |acc#0@@5|) (|Map#Glue| (|lambda#22| Tclass.KeyType.Key (|Set#Union| (|Set#Union| (|Map#Domain| |top#0@@7|) (|Map#Domain| |bot#0@@5|)) (|Map#Domain| |acc#0@@5|)) |top#0@@7| |bot#0@@5| |acc#0@@5| ValueMessage.__default.IdentityMessage) (|lambda#23| |top#0@@7| |bot#0@@5| |acc#0@@5|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) :qid |BucketFlushModelidfy.174:5| :skolemid |1575| :pattern ( (BucketFlushModel.__default.topBotAccMerge |top#0@@7| |bot#0@@5| |acc#0@@5|)) ))))
(assert  (=> (<= 13 $FunctionContextHeight) (forall ((|top#0@@8| T@U) (|bot#0@@6| T@U) (|acc#0@@6| T@U) ) (!  (=> (and (and (and (= (type |top#0@@8|) (MapType BoxType BoxType)) (= (type |bot#0@@6|) (MapType BoxType BoxType))) (= (type |acc#0@@6|) (MapType BoxType BoxType))) (or (|BucketFlushModel.__default.topBotAccMerge#canCall| (Lit |top#0@@8|) (Lit |bot#0@@6|) (Lit |acc#0@@6|)) (and (not (= 13 $FunctionContextHeight)) (and (and ($Is |top#0@@8| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |bot#0@@6| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) ($Is |acc#0@@6| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))))) (and (forall ((|key#0@@8| T@U) ) (!  (=> (and (= (type |key#0@@8|) (SeqType BoxType)) ($Is |key#0@@8| Tclass.KeyType.Key)) (and (=> (U_2_bool (MapType0Select (|Set#Union| (|Set#Union| (|Map#Domain| (Lit |top#0@@8|)) (|Map#Domain| (Lit |bot#0@@6|))) (|Map#Domain| (Lit |acc#0@@6|))) ($Box |key#0@@8|))) (and (and (|$IsA#ValueMessage.Message| (BucketFlushModel.__default.topBotAccMergeForKey (Lit |top#0@@8|) (Lit |bot#0@@6|) (Lit |acc#0@@6|) |key#0@@8|)) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) (and (|BucketFlushModel.__default.topBotAccMergeForKey#canCall| (Lit |top#0@@8|) (Lit |bot#0@@6|) (Lit |acc#0@@6|) |key#0@@8|) |ValueMessage.__default.IdentityMessage#canCall|))) (=> (and (U_2_bool (MapType0Select (|Set#Union| (|Set#Union| (|Map#Domain| (Lit |top#0@@8|)) (|Map#Domain| (Lit |bot#0@@6|))) (|Map#Domain| (Lit |acc#0@@6|))) ($Box |key#0@@8|))) (not (|ValueMessage.Message#Equal| (BucketFlushModel.__default.topBotAccMergeForKey (Lit |top#0@@8|) (Lit |bot#0@@6|) (Lit |acc#0@@6|) |key#0@@8|) ValueMessage.__default.IdentityMessage))) (|BucketFlushModel.__default.topBotAccMergeForKey#canCall| (Lit |top#0@@8|) (Lit |bot#0@@6|) (Lit |acc#0@@6|) |key#0@@8|)))) :qid |BucketFlushModelidfy.178:9| :skolemid |1576| :pattern ( (BucketFlushModel.__default.topBotAccMergeForKey |top#0@@8| |bot#0@@6| |acc#0@@6| |key#0@@8|)) :pattern ( (MapType0Select (|Set#Union| (|Set#Union| (|Map#Domain| |top#0@@8|) (|Map#Domain| |bot#0@@6|)) (|Map#Domain| |acc#0@@6|)) ($Box |key#0@@8|))) )) (= (BucketFlushModel.__default.topBotAccMerge (Lit |top#0@@8|) (Lit |bot#0@@6|) (Lit |acc#0@@6|)) (|Map#Glue| (|lambda#22| Tclass.KeyType.Key (|Set#Union| (|Set#Union| (|Map#Domain| (Lit |top#0@@8|)) (|Map#Domain| (Lit |bot#0@@6|))) (|Map#Domain| (Lit |acc#0@@6|))) (Lit |top#0@@8|) (Lit |bot#0@@6|) (Lit |acc#0@@6|) ValueMessage.__default.IdentityMessage) (|lambda#23| (Lit |top#0@@8|) (Lit |bot#0@@6|) (Lit |acc#0@@6|)) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) :qid |BucketFlushModelidfy.174:5| :weight 3 :skolemid |1577| :pattern ( (BucketFlushModel.__default.topBotAccMerge (Lit |top#0@@8|) (Lit |bot#0@@6|) (Lit |acc#0@@6|))) ))))
(assert  (=> (<= 15 $FunctionContextHeight) (forall ((|a#0@@1| T@U) (|b#0@@1| T@U) (|start#0| Int) ) (!  (=> (and (and (= (type |a#0@@1|) (SeqType BoxType)) (= (type |b#0@@1|) (SeqType BoxType))) (or (|BucketFlushModel.__default.seq__lt#canCall| |a#0@@1| |b#0@@1| |start#0|) (and (not (= 15 $FunctionContextHeight)) (and (and ($Is |a#0@@1| (TSeq Tclass.KeyType.Key)) ($Is |b#0@@1| (TSeq Tclass.KeyType.Key))) (and (<= (LitInt 0) |start#0|) (<= |start#0| (|Seq#Length| |b#0@@1|))))))) true) :qid |BucketFlushModelidfy.225:20| :skolemid |1592| :pattern ( (BucketFlushModel.__default.seq__lt |a#0@@1| |b#0@@1| |start#0|)) ))))
(assert (forall ((|a#0@@2| T@U) (|b#0@@2| T@U) (|start#0@@0| Int) ) (!  (=> (and (and (= (type |a#0@@2|) (SeqType BoxType)) (= (type |b#0@@2|) (SeqType BoxType))) (and ($Is |a#0@@2| (TSeq Tclass.KeyType.Key)) ($Is |b#0@@2| (TSeq Tclass.KeyType.Key)))) (= (|BucketFlushModel.__default.seq__lt#requires| |a#0@@2| |b#0@@2| |start#0@@0|)  (and (<= (LitInt 0) |start#0@@0|) (<= |start#0@@0| (|Seq#Length| |b#0@@2|))))) :qid |BucketFlushModelidfy.225:20| :skolemid |1593| :pattern ( (|BucketFlushModel.__default.seq__lt#requires| |a#0@@2| |b#0@@2| |start#0@@0|)) )))
(assert  (=> (<= 15 $FunctionContextHeight) (forall ((|a#0@@3| T@U) (|b#0@@3| T@U) (|start#0@@1| Int) ) (!  (=> (and (and (= (type |a#0@@3|) (SeqType BoxType)) (= (type |b#0@@3|) (SeqType BoxType))) (or (|BucketFlushModel.__default.seq__lt#canCall| |a#0@@3| |b#0@@3| |start#0@@1|) (and (not (= 15 $FunctionContextHeight)) (and (and ($Is |a#0@@3| (TSeq Tclass.KeyType.Key)) ($Is |b#0@@3| (TSeq Tclass.KeyType.Key))) (and (<= (LitInt 0) |start#0@@1|) (<= |start#0@@1| (|Seq#Length| |b#0@@3|))))))) (and (forall ((|i#0| Int) (|j#0| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#0|) (< |i#0| (|Seq#Length| |a#0@@3|))) (and (<= |start#0@@1| |j#0|) (< |j#0| (|Seq#Length| |b#0@@3|)))) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |a#0@@3| |i#0|)) ($Unbox (SeqType BoxType) (|Seq#Index| |b#0@@3| |j#0|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1595| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |b#0@@3| |j#0|)) ($Unbox (SeqType BoxType) (|Seq#Index| |a#0@@3| |i#0|))) )) (= (BucketFlushModel.__default.seq__lt |a#0@@3| |b#0@@3| |start#0@@1|) (forall ((|i#0@@0| Int) (|j#0@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#0@@0|) (< |i#0@@0| (|Seq#Length| |a#0@@3|))) (and (<= |start#0@@1| |j#0@@0|) (< |j#0@@0| (|Seq#Length| |b#0@@3|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |a#0@@3| |i#0@@0|)) ($Unbox (SeqType BoxType) (|Seq#Index| |b#0@@3| |j#0@@0|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1594| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |b#0@@3| |j#0@@0|)) ($Unbox (SeqType BoxType) (|Seq#Index| |a#0@@3| |i#0@@0|))) ))))) :qid |BucketFlushModelidfy.225:20| :skolemid |1596| :pattern ( (BucketFlushModel.__default.seq__lt |a#0@@3| |b#0@@3| |start#0@@1|)) ))))
(assert  (=> (<= 15 $FunctionContextHeight) (forall ((|a#0@@4| T@U) (|b#0@@4| T@U) (|start#0@@2| Int) ) (!  (=> (and (and (= (type |a#0@@4|) (SeqType BoxType)) (= (type |b#0@@4|) (SeqType BoxType))) (or (|BucketFlushModel.__default.seq__lt#canCall| (Lit |a#0@@4|) (Lit |b#0@@4|) (LitInt |start#0@@2|)) (and (not (= 15 $FunctionContextHeight)) (and (and ($Is |a#0@@4| (TSeq Tclass.KeyType.Key)) ($Is |b#0@@4| (TSeq Tclass.KeyType.Key))) (and (<= (LitInt 0) (LitInt |start#0@@2|)) (<= (LitInt |start#0@@2|) (|Seq#Length| (Lit |b#0@@4|)))))))) (and (forall ((|i#1| Int) (|j#1| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1|) (< |i#1| (|Seq#Length| (Lit |a#0@@4|)))) (and (<= (LitInt |start#0@@2|) |j#1|) (< |j#1| (|Seq#Length| (Lit |b#0@@4|))))) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |a#0@@4|) |i#1|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |b#0@@4|) |j#1|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1598| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |b#0@@4| |j#1|)) ($Unbox (SeqType BoxType) (|Seq#Index| |a#0@@4| |i#1|))) )) (= (BucketFlushModel.__default.seq__lt (Lit |a#0@@4|) (Lit |b#0@@4|) (LitInt |start#0@@2|)) (forall ((|i#1@@0| Int) (|j#1@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@0|) (< |i#1@@0| (|Seq#Length| (Lit |a#0@@4|)))) (and (<= (LitInt |start#0@@2|) |j#1@@0|) (< |j#1@@0| (|Seq#Length| (Lit |b#0@@4|))))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |a#0@@4|) |i#1@@0|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |b#0@@4|) |j#1@@0|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1597| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |b#0@@4| |j#1@@0|)) ($Unbox (SeqType BoxType) (|Seq#Index| |a#0@@4| |i#1@@0|))) ))))) :qid |BucketFlushModelidfy.225:20| :weight 3 :skolemid |1599| :pattern ( (BucketFlushModel.__default.seq__lt (Lit |a#0@@4|) (Lit |b#0@@4|) (LitInt |start#0@@2|))) ))))
(assert (= (type Tclass.Upperbounded__Lexicographic__Byte__Order.Element) TyType))
(assert (= (Tag Tclass.Upperbounded__Lexicographic__Byte__Order.Element) Tagclass.Upperbounded__Lexicographic__Byte__Order.Element))
(assert (= (TagFamily Tclass.Upperbounded__Lexicographic__Byte__Order.Element) tytagFamily$Element))
(assert (forall ((bx@@147 T@U) ) (!  (=> (and (= (type bx@@147) BoxType) ($IsBox bx@@147 Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (and (= ($Box ($Unbox DatatypeTypeType bx@@147)) bx@@147) ($Is ($Unbox DatatypeTypeType bx@@147) Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) :qid |unknown.0:0| :skolemid |1692| :pattern ( ($IsBox bx@@147 Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) )))
(assert  (=> (<= 20 $FunctionContextHeight) (forall ((|top_keys#0@@14| T@U) (|pivots#0| T@U) (|r#0| Int) ) (!  (=> (and (and (= (type |top_keys#0@@14|) (SeqType BoxType)) (= (type |pivots#0|) (SeqType BoxType))) (or (|BucketFlushModel.__default.bucketStartIdx#canCall| |top_keys#0@@14| |pivots#0| |r#0|) (and (not (= 20 $FunctionContextHeight)) (and (and ($Is |top_keys#0@@14| (TSeq Tclass.KeyType.Key)) ($Is |pivots#0| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (and (BoundedPivotsLib.__default.WFPivots |pivots#0|) (and (<= (LitInt 0) |r#0|) (< |r#0| (BoundedPivotsLib.__default.NumBuckets |pivots#0|)))))))) true) :qid |BucketFlushModelidfy.603:27| :skolemid |1693| :pattern ( (BucketFlushModel.__default.bucketStartIdx |top_keys#0@@14| |pivots#0| |r#0|)) ))))
(assert (forall ((|top_keys#0@@15| T@U) (|pivots#0@@0| T@U) (|r#0@@0| Int) ) (!  (=> (and (and (= (type |top_keys#0@@15|) (SeqType BoxType)) (= (type |pivots#0@@0|) (SeqType BoxType))) (and ($Is |top_keys#0@@15| (TSeq Tclass.KeyType.Key)) ($Is |pivots#0@@0| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (= (|BucketFlushModel.__default.bucketStartIdx#requires| |top_keys#0@@15| |pivots#0@@0| |r#0@@0|)  (and (BoundedPivotsLib.__default.WFPivots |pivots#0@@0|) (and (<= (LitInt 0) |r#0@@0|) (< |r#0@@0| (BoundedPivotsLib.__default.NumBuckets |pivots#0@@0|)))))) :qid |BucketFlushModelidfy.603:27| :skolemid |1694| :pattern ( (|BucketFlushModel.__default.bucketStartIdx#requires| |top_keys#0@@15| |pivots#0@@0| |r#0@@0|)) )))
(assert  (and (forall ((arg0@@499 T@U) ) (! (= (type (BoundedPivotsLib.__default.KeysToElements arg0@@499)) (SeqType BoxType)) :qid |funType:BoundedPivotsLib.__default.KeysToElements| :pattern ( (BoundedPivotsLib.__default.KeysToElements arg0@@499)) )) (= (type StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)))
(assert  (=> (<= 20 $FunctionContextHeight) (forall ((|top_keys#0@@16| T@U) (|pivots#0@@1| T@U) (|r#0@@1| Int) ) (!  (=> (and (and (= (type |top_keys#0@@16|) (SeqType BoxType)) (= (type |pivots#0@@1|) (SeqType BoxType))) (or (|BucketFlushModel.__default.bucketStartIdx#canCall| |top_keys#0@@16| |pivots#0@@1| |r#0@@1|) (and (not (= 20 $FunctionContextHeight)) (and (and ($Is |top_keys#0@@16| (TSeq Tclass.KeyType.Key)) ($Is |pivots#0@@1| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (and (BoundedPivotsLib.__default.WFPivots |pivots#0@@1|) (and (<= (LitInt 0) |r#0@@1|) (< |r#0@@1| (BoundedPivotsLib.__default.NumBuckets |pivots#0@@1|)))))))) (and (and (|BoundedPivotsLib.__default.KeysToElements#canCall| |top_keys#0@@16|) (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (BoundedPivotsLib.__default.KeysToElements |top_keys#0@@16|) ($Unbox DatatypeTypeType (|Seq#Index| |pivots#0@@1| |r#0@@1|)))) (= (BucketFlushModel.__default.bucketStartIdx |top_keys#0@@16| |pivots#0@@1| |r#0@@1|) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte (BoundedPivotsLib.__default.KeysToElements |top_keys#0@@16|) ($Unbox DatatypeTypeType (|Seq#Index| |pivots#0@@1| |r#0@@1|)))))) :qid |BucketFlushModelidfy.603:27| :skolemid |1695| :pattern ( (BucketFlushModel.__default.bucketStartIdx |top_keys#0@@16| |pivots#0@@1| |r#0@@1|)) ))))
(assert  (=> (<= 20 $FunctionContextHeight) (forall ((|top_keys#0@@17| T@U) (|pivots#0@@2| T@U) (|r#0@@2| Int) ) (!  (=> (and (and (= (type |top_keys#0@@17|) (SeqType BoxType)) (= (type |pivots#0@@2|) (SeqType BoxType))) (or (|BucketFlushModel.__default.bucketStartIdx#canCall| (Lit |top_keys#0@@17|) (Lit |pivots#0@@2|) (LitInt |r#0@@2|)) (and (not (= 20 $FunctionContextHeight)) (and (and ($Is |top_keys#0@@17| (TSeq Tclass.KeyType.Key)) ($Is |pivots#0@@2| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (and (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.WFPivots (Lit |pivots#0@@2|))))) (and (<= (LitInt 0) (LitInt |r#0@@2|)) (< |r#0@@2| (BoundedPivotsLib.__default.NumBuckets (Lit |pivots#0@@2|))))))))) (and (and (|BoundedPivotsLib.__default.KeysToElements#canCall| (Lit |top_keys#0@@17|)) (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (Lit (BoundedPivotsLib.__default.KeysToElements (Lit |top_keys#0@@17|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pivots#0@@2|) (LitInt |r#0@@2|))))) (= (BucketFlushModel.__default.bucketStartIdx (Lit |top_keys#0@@17|) (Lit |pivots#0@@2|) (LitInt |r#0@@2|)) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte (Lit (BoundedPivotsLib.__default.KeysToElements (Lit |top_keys#0@@17|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pivots#0@@2|) (LitInt |r#0@@2|))))))) :qid |BucketFlushModelidfy.603:27| :weight 3 :skolemid |1696| :pattern ( (BucketFlushModel.__default.bucketStartIdx (Lit |top_keys#0@@17|) (Lit |pivots#0@@2|) (LitInt |r#0@@2|))) ))))
(assert  (=> (<= 21 $FunctionContextHeight) (forall ((|top_keys#0@@18| T@U) (|pivots#0@@3| T@U) (|r#0@@3| Int) ) (!  (=> (and (and (= (type |top_keys#0@@18|) (SeqType BoxType)) (= (type |pivots#0@@3|) (SeqType BoxType))) (or (|BucketFlushModel.__default.bucketEndIdx#canCall| |top_keys#0@@18| |pivots#0@@3| |r#0@@3|) (and (not (= 21 $FunctionContextHeight)) (and (and ($Is |top_keys#0@@18| (TSeq Tclass.KeyType.Key)) ($Is |pivots#0@@3| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (and (BoundedPivotsLib.__default.WFPivots |pivots#0@@3|) (and (<= (LitInt 0) |r#0@@3|) (< |r#0@@3| (BoundedPivotsLib.__default.NumBuckets |pivots#0@@3|)))))))) true) :qid |BucketFlushModelidfy.610:25| :skolemid |1701| :pattern ( (BucketFlushModel.__default.bucketEndIdx |top_keys#0@@18| |pivots#0@@3| |r#0@@3|)) ))))
(assert (forall ((|top_keys#0@@19| T@U) (|pivots#0@@4| T@U) (|r#0@@4| Int) ) (!  (=> (and (and (= (type |top_keys#0@@19|) (SeqType BoxType)) (= (type |pivots#0@@4|) (SeqType BoxType))) (and ($Is |top_keys#0@@19| (TSeq Tclass.KeyType.Key)) ($Is |pivots#0@@4| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (= (|BucketFlushModel.__default.bucketEndIdx#requires| |top_keys#0@@19| |pivots#0@@4| |r#0@@4|)  (and (BoundedPivotsLib.__default.WFPivots |pivots#0@@4|) (and (<= (LitInt 0) |r#0@@4|) (< |r#0@@4| (BoundedPivotsLib.__default.NumBuckets |pivots#0@@4|)))))) :qid |BucketFlushModelidfy.610:25| :skolemid |1702| :pattern ( (|BucketFlushModel.__default.bucketEndIdx#requires| |top_keys#0@@19| |pivots#0@@4| |r#0@@4|)) )))
(assert  (=> (<= 21 $FunctionContextHeight) (forall ((|top_keys#0@@20| T@U) (|pivots#0@@5| T@U) (|r#0@@5| Int) ) (!  (=> (and (and (= (type |top_keys#0@@20|) (SeqType BoxType)) (= (type |pivots#0@@5|) (SeqType BoxType))) (or (|BucketFlushModel.__default.bucketEndIdx#canCall| |top_keys#0@@20| |pivots#0@@5| |r#0@@5|) (and (not (= 21 $FunctionContextHeight)) (and (and ($Is |top_keys#0@@20| (TSeq Tclass.KeyType.Key)) ($Is |pivots#0@@5| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (and (BoundedPivotsLib.__default.WFPivots |pivots#0@@5|) (and (<= (LitInt 0) |r#0@@5|) (< |r#0@@5| (BoundedPivotsLib.__default.NumBuckets |pivots#0@@5|)))))))) (and (and (|BoundedPivotsLib.__default.KeysToElements#canCall| |top_keys#0@@20|) (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (BoundedPivotsLib.__default.KeysToElements |top_keys#0@@20|) ($Unbox DatatypeTypeType (|Seq#Index| |pivots#0@@5| (+ |r#0@@5| 1))))) (= (BucketFlushModel.__default.bucketEndIdx |top_keys#0@@20| |pivots#0@@5| |r#0@@5|) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte (BoundedPivotsLib.__default.KeysToElements |top_keys#0@@20|) ($Unbox DatatypeTypeType (|Seq#Index| |pivots#0@@5| (+ |r#0@@5| 1))))))) :qid |BucketFlushModelidfy.610:25| :skolemid |1703| :pattern ( (BucketFlushModel.__default.bucketEndIdx |top_keys#0@@20| |pivots#0@@5| |r#0@@5|)) ))))
(assert  (=> (<= 21 $FunctionContextHeight) (forall ((|top_keys#0@@21| T@U) (|pivots#0@@6| T@U) (|r#0@@6| Int) ) (!  (=> (and (and (= (type |top_keys#0@@21|) (SeqType BoxType)) (= (type |pivots#0@@6|) (SeqType BoxType))) (or (|BucketFlushModel.__default.bucketEndIdx#canCall| (Lit |top_keys#0@@21|) (Lit |pivots#0@@6|) (LitInt |r#0@@6|)) (and (not (= 21 $FunctionContextHeight)) (and (and ($Is |top_keys#0@@21| (TSeq Tclass.KeyType.Key)) ($Is |pivots#0@@6| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (and (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.WFPivots (Lit |pivots#0@@6|))))) (and (<= (LitInt 0) (LitInt |r#0@@6|)) (< |r#0@@6| (BoundedPivotsLib.__default.NumBuckets (Lit |pivots#0@@6|))))))))) (and (and (|BoundedPivotsLib.__default.KeysToElements#canCall| (Lit |top_keys#0@@21|)) (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (Lit (BoundedPivotsLib.__default.KeysToElements (Lit |top_keys#0@@21|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pivots#0@@6|) (LitInt (+ |r#0@@6| 1)))))) (= (BucketFlushModel.__default.bucketEndIdx (Lit |top_keys#0@@21|) (Lit |pivots#0@@6|) (LitInt |r#0@@6|)) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte (Lit (BoundedPivotsLib.__default.KeysToElements (Lit |top_keys#0@@21|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pivots#0@@6|) (LitInt (+ |r#0@@6| 1)))))))) :qid |BucketFlushModelidfy.610:25| :weight 3 :skolemid |1704| :pattern ( (BucketFlushModel.__default.bucketEndIdx (Lit |top_keys#0@@21|) (Lit |pivots#0@@6|) (LitInt |r#0@@6|))) ))))
(assert (forall ((arg0@@500 T@U) (arg1@@210 T@U) (arg2@@142 T@U) ) (! (= (type (BucketFlushModel.__default.pivotIndexes arg0@@500 arg1@@210 arg2@@142)) (SeqType BoxType)) :qid |funType:BucketFlushModel.__default.pivotIndexes| :pattern ( (BucketFlushModel.__default.pivotIndexes arg0@@500 arg1@@210 arg2@@142)) )))
(assert (forall (($ly@@6 T@U) (|top_keys#0@@22| T@U) (|pivots#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@6) LayerTypeType) (= (type |top_keys#0@@22|) (SeqType BoxType))) (= (type |pivots#0@@7|) (SeqType BoxType))) (= (BucketFlushModel.__default.pivotIndexes ($LS $ly@@6) |top_keys#0@@22| |pivots#0@@7|) (BucketFlushModel.__default.pivotIndexes $ly@@6 |top_keys#0@@22| |pivots#0@@7|))) :qid |BucketFlushModelidfy.924:11| :skolemid |1837| :pattern ( (BucketFlushModel.__default.pivotIndexes ($LS $ly@@6) |top_keys#0@@22| |pivots#0@@7|)) )))
(assert (forall (($ly@@7 T@U) (|top_keys#0@@23| T@U) (|pivots#0@@8| T@U) ) (!  (=> (and (and (= (type $ly@@7) LayerTypeType) (= (type |top_keys#0@@23|) (SeqType BoxType))) (= (type |pivots#0@@8|) (SeqType BoxType))) (= (BucketFlushModel.__default.pivotIndexes $ly@@7 |top_keys#0@@23| |pivots#0@@8|) (BucketFlushModel.__default.pivotIndexes $LZ |top_keys#0@@23| |pivots#0@@8|))) :qid |BucketFlushModelidfy.924:11| :skolemid |1838| :pattern ( (BucketFlushModel.__default.pivotIndexes (AsFuelBottom $ly@@7) |top_keys#0@@23| |pivots#0@@8|)) )))
(assert  (=> (<= 26 $FunctionContextHeight) (forall (($ly@@8 T@U) (|top_keys#0@@24| T@U) (|pivots#0@@9| T@U) ) (!  (=> (and (and (and (= (type $ly@@8) LayerTypeType) (= (type |top_keys#0@@24|) (SeqType BoxType))) (= (type |pivots#0@@9|) (SeqType BoxType))) (or (|BucketFlushModel.__default.pivotIndexes#canCall| |top_keys#0@@24| |pivots#0@@9|) (and (not (= 26 $FunctionContextHeight)) (and ($Is |top_keys#0@@24| (TSeq Tclass.KeyType.Key)) ($Is |pivots#0@@9| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))))) (and (and (= (|Seq#Length| (BucketFlushModel.__default.pivotIndexes $ly@@8 |top_keys#0@@24| |pivots#0@@9|)) (|Seq#Length| |pivots#0@@9|)) (forall ((|i#0@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@1|) (< |i#0@@1| (|Seq#Length| (BucketFlushModel.__default.pivotIndexes $ly@@8 |top_keys#0@@24| |pivots#0@@9|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (BucketFlushModel.__default.pivotIndexes $ly@@8 |top_keys#0@@24| |pivots#0@@9|) |i#0@@1|))) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte (BoundedPivotsLib.__default.KeysToElements |top_keys#0@@24|) ($Unbox DatatypeTypeType (|Seq#Index| |pivots#0@@9| |i#0@@1|))))) :qid |BucketFlushModelidfy.926:18| :skolemid |1839| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pivots#0@@9| |i#0@@1|))) :pattern ( ($Unbox intType (|Seq#Index| (BucketFlushModel.__default.pivotIndexes $ly@@8 |top_keys#0@@24| |pivots#0@@9|) |i#0@@1|))) ))) ($Is (BucketFlushModel.__default.pivotIndexes $ly@@8 |top_keys#0@@24| |pivots#0@@9|) (TSeq TInt)))) :qid |BucketFlushModelidfy.924:11| :skolemid |1840| :pattern ( (BucketFlushModel.__default.pivotIndexes $ly@@8 |top_keys#0@@24| |pivots#0@@9|)) ))))
(assert (forall (($ly@@9 T@U) (|top_keys#0@@25| T@U) (|pivots#0@@10| T@U) ) (!  (=> (and (and (and (= (type $ly@@9) LayerTypeType) (= (type |top_keys#0@@25|) (SeqType BoxType))) (= (type |pivots#0@@10|) (SeqType BoxType))) (and ($Is |top_keys#0@@25| (TSeq Tclass.KeyType.Key)) ($Is |pivots#0@@10| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (= (|BucketFlushModel.__default.pivotIndexes#requires| $ly@@9 |top_keys#0@@25| |pivots#0@@10|) true)) :qid |BucketFlushModelidfy.924:11| :skolemid |1841| :pattern ( (|BucketFlushModel.__default.pivotIndexes#requires| $ly@@9 |top_keys#0@@25| |pivots#0@@10|)) )))
(assert  (and (forall ((arg0@@501 T@U) (arg1@@211 T@U) ) (! (= (type (Sequences.__default.DropLast arg0@@501 arg1@@211)) (SeqType BoxType)) :qid |funType:Sequences.__default.DropLast| :pattern ( (Sequences.__default.DropLast arg0@@501 arg1@@211)) )) (forall ((arg0@@502 T@U) (arg1@@212 T@U) ) (! (= (type (Sequences.__default.Last arg0@@502 arg1@@212)) BoxType) :qid |funType:Sequences.__default.Last| :pattern ( (Sequences.__default.Last arg0@@502 arg1@@212)) ))))
(assert  (=> (<= 26 $FunctionContextHeight) (forall (($ly@@10 T@U) (|top_keys#0@@26| T@U) (|pivots#0@@11| T@U) ) (!  (=> (and (and (and (= (type $ly@@10) LayerTypeType) (= (type |top_keys#0@@26|) (SeqType BoxType))) (= (type |pivots#0@@11|) (SeqType BoxType))) (or (|BucketFlushModel.__default.pivotIndexes#canCall| |top_keys#0@@26| |pivots#0@@11|) (and (not (= 26 $FunctionContextHeight)) (and ($Is |top_keys#0@@26| (TSeq Tclass.KeyType.Key)) ($Is |pivots#0@@11| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))))) (and (=> (not (= (|Seq#Length| |pivots#0@@11|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element |pivots#0@@11|) (|BucketFlushModel.__default.pivotIndexes#canCall| |top_keys#0@@26| (Sequences.__default.DropLast Tclass.Upperbounded__Lexicographic__Byte__Order.Element |pivots#0@@11|))) (and (and (|BoundedPivotsLib.__default.KeysToElements#canCall| |top_keys#0@@26|) (|Sequences.__default.Last#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element |pivots#0@@11|)) (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (BoundedPivotsLib.__default.KeysToElements |top_keys#0@@26|) ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Upperbounded__Lexicographic__Byte__Order.Element |pivots#0@@11|)))))) (= (BucketFlushModel.__default.pivotIndexes ($LS $ly@@10) |top_keys#0@@26| |pivots#0@@11|) (ite (= (|Seq#Length| |pivots#0@@11|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (BucketFlushModel.__default.pivotIndexes $ly@@10 |top_keys#0@@26| (Sequences.__default.DropLast Tclass.Upperbounded__Lexicographic__Byte__Order.Element |pivots#0@@11|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte (BoundedPivotsLib.__default.KeysToElements |top_keys#0@@26|) ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Upperbounded__Lexicographic__Byte__Order.Element |pivots#0@@11|))))))))))) :qid |BucketFlushModelidfy.924:11| :skolemid |1842| :pattern ( (BucketFlushModel.__default.pivotIndexes ($LS $ly@@10) |top_keys#0@@26| |pivots#0@@11|)) ))))
(assert  (=> (<= 26 $FunctionContextHeight) (forall (($ly@@11 T@U) (|top_keys#0@@27| T@U) (|pivots#0@@12| T@U) ) (!  (=> (and (and (and (= (type $ly@@11) LayerTypeType) (= (type |top_keys#0@@27|) (SeqType BoxType))) (= (type |pivots#0@@12|) (SeqType BoxType))) (or (|BucketFlushModel.__default.pivotIndexes#canCall| |top_keys#0@@27| (Lit |pivots#0@@12|)) (and (not (= 26 $FunctionContextHeight)) (and ($Is |top_keys#0@@27| (TSeq Tclass.KeyType.Key)) ($Is |pivots#0@@12| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))))) (and (=> (not (= (|Seq#Length| (Lit |pivots#0@@12|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |pivots#0@@12|)) (|BucketFlushModel.__default.pivotIndexes#canCall| |top_keys#0@@27| (Lit (Sequences.__default.DropLast Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |pivots#0@@12|))))) (and (and (|BoundedPivotsLib.__default.KeysToElements#canCall| |top_keys#0@@27|) (|Sequences.__default.Last#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |pivots#0@@12|))) (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (BoundedPivotsLib.__default.KeysToElements |top_keys#0@@27|) (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |pivots#0@@12|)))))))) (= (BucketFlushModel.__default.pivotIndexes ($LS $ly@@11) |top_keys#0@@27| (Lit |pivots#0@@12|)) (ite (= (|Seq#Length| (Lit |pivots#0@@12|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (BucketFlushModel.__default.pivotIndexes ($LS $ly@@11) |top_keys#0@@27| (Lit (Sequences.__default.DropLast Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |pivots#0@@12|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte (BoundedPivotsLib.__default.KeysToElements |top_keys#0@@27|) (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |pivots#0@@12|))))))))))))) :qid |BucketFlushModelidfy.924:11| :weight 3 :skolemid |1843| :pattern ( (BucketFlushModel.__default.pivotIndexes ($LS $ly@@11) |top_keys#0@@27| (Lit |pivots#0@@12|))) ))))
(assert  (=> (<= 26 $FunctionContextHeight) (forall (($ly@@12 T@U) (|top_keys#0@@28| T@U) (|pivots#0@@13| T@U) ) (!  (=> (and (and (and (= (type $ly@@12) LayerTypeType) (= (type |top_keys#0@@28|) (SeqType BoxType))) (= (type |pivots#0@@13|) (SeqType BoxType))) (or (|BucketFlushModel.__default.pivotIndexes#canCall| (Lit |top_keys#0@@28|) (Lit |pivots#0@@13|)) (and (not (= 26 $FunctionContextHeight)) (and ($Is |top_keys#0@@28| (TSeq Tclass.KeyType.Key)) ($Is |pivots#0@@13| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))))) (and (=> (not (= (|Seq#Length| (Lit |pivots#0@@13|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |pivots#0@@13|)) (|BucketFlushModel.__default.pivotIndexes#canCall| (Lit |top_keys#0@@28|) (Lit (Sequences.__default.DropLast Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |pivots#0@@13|))))) (and (and (|BoundedPivotsLib.__default.KeysToElements#canCall| (Lit |top_keys#0@@28|)) (|Sequences.__default.Last#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |pivots#0@@13|))) (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (Lit (BoundedPivotsLib.__default.KeysToElements (Lit |top_keys#0@@28|))) (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |pivots#0@@13|)))))))) (= (BucketFlushModel.__default.pivotIndexes ($LS $ly@@12) (Lit |top_keys#0@@28|) (Lit |pivots#0@@13|)) (ite (= (|Seq#Length| (Lit |pivots#0@@13|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (BucketFlushModel.__default.pivotIndexes ($LS $ly@@12) (Lit |top_keys#0@@28|) (Lit (Sequences.__default.DropLast Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |pivots#0@@13|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte (Lit (BoundedPivotsLib.__default.KeysToElements (Lit |top_keys#0@@28|))) (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |pivots#0@@13|))))))))))))) :qid |BucketFlushModelidfy.924:11| :weight 3 :skolemid |1844| :pattern ( (BucketFlushModel.__default.pivotIndexes ($LS $ly@@12) (Lit |top_keys#0@@28|) (Lit |pivots#0@@13|))) ))))
(assert (forall ((arg0@@503 T@U) (arg1@@213 T@U) (arg2@@143 T@U) (arg3@@102 T@U) (arg4@@83 T@U) (arg5@@68 Int) (arg6@@55 T@U) ) (! (= (type (BucketFlushModel.__default.mergeToChildrenIter arg0@@503 arg1@@213 arg2@@143 arg3@@102 arg4@@83 arg5@@68 arg6@@55)) DatatypeTypeType) :qid |funType:BucketFlushModel.__default.mergeToChildrenIter| :pattern ( (BucketFlushModel.__default.mergeToChildrenIter arg0@@503 arg1@@213 arg2@@143 arg3@@102 arg4@@83 arg5@@68 arg6@@55)) )))
(assert (forall (($ly@@13 T@U) (|top#0@@9| T@U) (|bots#0| T@U) (|idxs#0| T@U) (|tmp#0| T@U) (|i#0@@2| Int) (|results#0| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@13) LayerTypeType) (= (type |top#0@@9|) DatatypeTypeType)) (= (type |bots#0|) (SeqType BoxType))) (= (type |idxs#0|) (SeqType BoxType))) (= (type |tmp#0|) DatatypeTypeType)) (= (type |results#0|) (SeqType BoxType))) (= (BucketFlushModel.__default.mergeToChildrenIter ($LS $ly@@13) |top#0@@9| |bots#0| |idxs#0| |tmp#0| |i#0@@2| |results#0|) (BucketFlushModel.__default.mergeToChildrenIter $ly@@13 |top#0@@9| |bots#0| |idxs#0| |tmp#0| |i#0@@2| |results#0|))) :qid |BucketFlushModelidfy.943:12| :skolemid |1853| :pattern ( (BucketFlushModel.__default.mergeToChildrenIter ($LS $ly@@13) |top#0@@9| |bots#0| |idxs#0| |tmp#0| |i#0@@2| |results#0|)) )))
(assert (forall (($ly@@14 T@U) (|top#0@@10| T@U) (|bots#0@@0| T@U) (|idxs#0@@0| T@U) (|tmp#0@@0| T@U) (|i#0@@3| Int) (|results#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type $ly@@14) LayerTypeType) (= (type |top#0@@10|) DatatypeTypeType)) (= (type |bots#0@@0|) (SeqType BoxType))) (= (type |idxs#0@@0|) (SeqType BoxType))) (= (type |tmp#0@@0|) DatatypeTypeType)) (= (type |results#0@@0|) (SeqType BoxType))) (= (BucketFlushModel.__default.mergeToChildrenIter $ly@@14 |top#0@@10| |bots#0@@0| |idxs#0@@0| |tmp#0@@0| |i#0@@3| |results#0@@0|) (BucketFlushModel.__default.mergeToChildrenIter $LZ |top#0@@10| |bots#0@@0| |idxs#0@@0| |tmp#0@@0| |i#0@@3| |results#0@@0|))) :qid |BucketFlushModelidfy.943:12| :skolemid |1854| :pattern ( (BucketFlushModel.__default.mergeToChildrenIter (AsFuelBottom $ly@@14) |top#0@@10| |bots#0@@0| |idxs#0@@0| |tmp#0@@0| |i#0@@3| |results#0@@0|)) )))
(assert (forall ((arg0@@504 T@U) ) (! (= (type (BucketsLib.Bucket.keys arg0@@504)) (SeqType BoxType)) :qid |funType:BucketsLib.Bucket.keys| :pattern ( (BucketsLib.Bucket.keys arg0@@504)) )))
(assert  (=> (<= 27 $FunctionContextHeight) (forall (($ly@@15 T@U) (|top#0@@11| T@U) (|bots#0@@1| T@U) (|idxs#0@@1| T@U) (|tmp#0@@1| T@U) (|i#0@@4| Int) (|results#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@15) LayerTypeType) (= (type |top#0@@11|) DatatypeTypeType)) (= (type |bots#0@@1|) (SeqType BoxType))) (= (type |idxs#0@@1|) (SeqType BoxType))) (= (type |tmp#0@@1|) DatatypeTypeType)) (= (type |results#0@@1|) (SeqType BoxType))) (or (|BucketFlushModel.__default.mergeToChildrenIter#canCall| |top#0@@11| |bots#0@@1| |idxs#0@@1| |tmp#0@@1| |i#0@@4| |results#0@@1|) (and (not (= 27 $FunctionContextHeight)) (and (and (and (and (and ($Is |top#0@@11| Tclass.BucketsLib.Bucket) ($Is |bots#0@@1| (TSeq Tclass.BucketsLib.Bucket))) ($Is |idxs#0@@1| (TSeq TInt))) ($Is |tmp#0@@1| Tclass.BucketFlushModel.singleMergeResult)) ($Is |results#0@@1| (TSeq Tclass.BucketsLib.Bucket))) (and (and (and (and (and (and (and (BucketsLib.__default.WFBucket |top#0@@11|) (forall ((|i#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@1|) (< |i#1@@1| (|Seq#Length| |bots#0@@1|))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@1| |i#1@@1|)))) :qid |BucketFlushModelidfy.951:19| :skolemid |1855| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@1| |i#1@@1|))) ))) (< 0 (|Seq#Length| |bots#0@@1|))) (= (|Seq#Length| |results#0@@1|) |i#0@@4|)) (and (<= (LitInt 0) |i#0@@4|) (<= |i#0@@4| (|Seq#Length| |bots#0@@1|)))) (= (|Seq#Length| |idxs#0@@1|) (+ (|Seq#Length| |bots#0@@1|) 1))) (forall ((|i#2| Int) ) (!  (=> (and (<= (LitInt 0) |i#2|) (< |i#2| (|Seq#Length| |idxs#0@@1|))) (and (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |idxs#0@@1| |i#2|)))) (<= (U_2_int ($Unbox intType (|Seq#Index| |idxs#0@@1| |i#2|))) (|Seq#Length| (BucketsLib.Bucket.keys |top#0@@11|))))) :qid |BucketFlushModelidfy.956:19| :skolemid |1856| :pattern ( ($Unbox intType (|Seq#Index| |idxs#0@@1| |i#2|))) ))) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp#0@@1|) (and (<= (LitInt 0) (BucketFlushModel.singleMergeResult.end |tmp#0@@1|)) (<= (BucketFlushModel.singleMergeResult.end |tmp#0@@1|) (|Seq#Length| (BucketsLib.Bucket.keys |top#0@@11|)))))))))) (and (= (|Seq#Length| (BucketFlushModel.mergeResult.bots (BucketFlushModel.__default.mergeToChildrenIter $ly@@15 |top#0@@11| |bots#0@@1| |idxs#0@@1| |tmp#0@@1| |i#0@@4| |results#0@@1|))) (|Seq#Length| |bots#0@@1|)) ($Is (BucketFlushModel.__default.mergeToChildrenIter $ly@@15 |top#0@@11| |bots#0@@1| |idxs#0@@1| |tmp#0@@1| |i#0@@4| |results#0@@1|) Tclass.BucketFlushModel.mergeResult))) :qid |BucketFlushModelidfy.943:12| :skolemid |1857| :pattern ( (BucketFlushModel.__default.mergeToChildrenIter $ly@@15 |top#0@@11| |bots#0@@1| |idxs#0@@1| |tmp#0@@1| |i#0@@4| |results#0@@1|)) ))))
(assert (forall (($ly@@16 T@U) (|top#0@@12| T@U) (|bots#0@@2| T@U) (|idxs#0@@2| T@U) (|tmp#0@@2| T@U) (|i#0@@5| Int) (|results#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@16) LayerTypeType) (= (type |top#0@@12|) DatatypeTypeType)) (= (type |bots#0@@2|) (SeqType BoxType))) (= (type |idxs#0@@2|) (SeqType BoxType))) (= (type |tmp#0@@2|) DatatypeTypeType)) (= (type |results#0@@2|) (SeqType BoxType))) (and (and (and (and ($Is |top#0@@12| Tclass.BucketsLib.Bucket) ($Is |bots#0@@2| (TSeq Tclass.BucketsLib.Bucket))) ($Is |idxs#0@@2| (TSeq TInt))) ($Is |tmp#0@@2| Tclass.BucketFlushModel.singleMergeResult)) ($Is |results#0@@2| (TSeq Tclass.BucketsLib.Bucket)))) (= (|BucketFlushModel.__default.mergeToChildrenIter#requires| $ly@@16 |top#0@@12| |bots#0@@2| |idxs#0@@2| |tmp#0@@2| |i#0@@5| |results#0@@2|)  (and (and (and (and (and (and (and (BucketsLib.__default.WFBucket |top#0@@12|) (forall ((|i#3| Int) ) (!  (=> (and (<= (LitInt 0) |i#3|) (< |i#3| (|Seq#Length| |bots#0@@2|))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@2| |i#3|)))) :qid |BucketFlushModelidfy.951:19| :skolemid |1858| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@2| |i#3|))) ))) (< 0 (|Seq#Length| |bots#0@@2|))) (= (|Seq#Length| |results#0@@2|) |i#0@@5|)) (and (<= (LitInt 0) |i#0@@5|) (<= |i#0@@5| (|Seq#Length| |bots#0@@2|)))) (= (|Seq#Length| |idxs#0@@2|) (+ (|Seq#Length| |bots#0@@2|) 1))) (forall ((|i#4| Int) ) (!  (=> (and (<= (LitInt 0) |i#4|) (< |i#4| (|Seq#Length| |idxs#0@@2|))) (and (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |idxs#0@@2| |i#4|)))) (<= (U_2_int ($Unbox intType (|Seq#Index| |idxs#0@@2| |i#4|))) (|Seq#Length| (BucketsLib.Bucket.keys |top#0@@12|))))) :qid |BucketFlushModelidfy.956:19| :skolemid |1859| :pattern ( ($Unbox intType (|Seq#Index| |idxs#0@@2| |i#4|))) ))) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp#0@@2|) (and (<= (LitInt 0) (BucketFlushModel.singleMergeResult.end |tmp#0@@2|)) (<= (BucketFlushModel.singleMergeResult.end |tmp#0@@2|) (|Seq#Length| (BucketsLib.Bucket.keys |top#0@@12|)))))))) :qid |BucketFlushModelidfy.943:12| :skolemid |1860| :pattern ( (|BucketFlushModel.__default.mergeToChildrenIter#requires| $ly@@16 |top#0@@12| |bots#0@@2| |idxs#0@@2| |tmp#0@@2| |i#0@@5| |results#0@@2|)) )))
(assert  (and (and (and (forall ((arg0@@505 T@U) ) (! (= (type (BucketsLib.Bucket.msgs arg0@@505)) (SeqType BoxType)) :qid |funType:BucketsLib.Bucket.msgs| :pattern ( (BucketsLib.Bucket.msgs arg0@@505)) )) (= (type StartFuel_BucketFlushModel._default.mergeToOneChild) LayerTypeType)) (forall ((arg0@@506 T@U) (arg1@@214 T@U) ) (! (= (type (|#BucketsLib.Bucket.Bucket| arg0@@506 arg1@@214)) DatatypeTypeType) :qid |funType:#BucketsLib.Bucket.Bucket| :pattern ( (|#BucketsLib.Bucket.Bucket| arg0@@506 arg1@@214)) ))) (= (type BucketsLib.__default.EmptyBucket) DatatypeTypeType)))
(assert  (=> (<= 27 $FunctionContextHeight) (forall (($ly@@17 T@U) (|top#0@@13| T@U) (|bots#0@@3| T@U) (|idxs#0@@3| T@U) (|tmp#0@@3| T@U) (|i#0@@6| Int) (|results#0@@3| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@17) LayerTypeType) (= (type |top#0@@13|) DatatypeTypeType)) (= (type |bots#0@@3|) (SeqType BoxType))) (= (type |idxs#0@@3|) (SeqType BoxType))) (= (type |tmp#0@@3|) DatatypeTypeType)) (= (type |results#0@@3|) (SeqType BoxType))) (or (|BucketFlushModel.__default.mergeToChildrenIter#canCall| |top#0@@13| |bots#0@@3| |idxs#0@@3| |tmp#0@@3| |i#0@@6| |results#0@@3|) (and (not (= 27 $FunctionContextHeight)) (and (and (and (and (and ($Is |top#0@@13| Tclass.BucketsLib.Bucket) ($Is |bots#0@@3| (TSeq Tclass.BucketsLib.Bucket))) ($Is |idxs#0@@3| (TSeq TInt))) ($Is |tmp#0@@3| Tclass.BucketFlushModel.singleMergeResult)) ($Is |results#0@@3| (TSeq Tclass.BucketsLib.Bucket))) (and (and (and (and (and (and (and (BucketsLib.__default.WFBucket |top#0@@13|) (forall ((|i#3@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@0|) (< |i#3@@0| (|Seq#Length| |bots#0@@3|))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@3| |i#3@@0|)))) :qid |BucketFlushModelidfy.951:19| :skolemid |1858| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@3| |i#3@@0|))) ))) (< 0 (|Seq#Length| |bots#0@@3|))) (= (|Seq#Length| |results#0@@3|) |i#0@@6|)) (and (<= (LitInt 0) |i#0@@6|) (<= |i#0@@6| (|Seq#Length| |bots#0@@3|)))) (= (|Seq#Length| |idxs#0@@3|) (+ (|Seq#Length| |bots#0@@3|) 1))) (forall ((|i#4@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#4@@0|) (< |i#4@@0| (|Seq#Length| |idxs#0@@3|))) (and (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |idxs#0@@3| |i#4@@0|)))) (<= (U_2_int ($Unbox intType (|Seq#Index| |idxs#0@@3| |i#4@@0|))) (|Seq#Length| (BucketsLib.Bucket.keys |top#0@@13|))))) :qid |BucketFlushModelidfy.956:19| :skolemid |1859| :pattern ( ($Unbox intType (|Seq#Index| |idxs#0@@3| |i#4@@0|))) ))) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp#0@@3|) (and (<= (LitInt 0) (BucketFlushModel.singleMergeResult.end |tmp#0@@3|)) (<= (BucketFlushModel.singleMergeResult.end |tmp#0@@3|) (|Seq#Length| (BucketsLib.Bucket.keys |top#0@@13|)))))))))) (and (and (=> (= |i#0@@6| (|Seq#Length| |bots#0@@3|)) (and (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp#0@@3|) (and (and (BucketsLib.Bucket.Bucket_q |top#0@@13|) (BucketsLib.Bucket.Bucket_q |top#0@@13|)) (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |tmp#0@@3|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp#0@@3|)))) (=> (not (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp#0@@3|)) (and |BucketsLib.__default.EmptyBucket#canCall| (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |tmp#0@@3|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp#0@@3|)))))) (=> (not (= |i#0@@6| (|Seq#Length| |bots#0@@3|))) (and (=> (BucketFlushModel.singleMergeResult.MergeCompleted_q |tmp#0@@3|) (let ((|from#0@@14| (U_2_int ($Unbox intType (|Seq#Index| |idxs#0@@3| |i#0@@6|))))) (let ((|to1#0| (U_2_int ($Unbox intType (|Seq#Index| |idxs#0@@3| (+ |i#0@@6| 1)))))) (let ((|to#0@@14| (ite (< |to1#0| |from#0@@14|) |from#0@@14| |to1#0|))) (and (and (and (and (and (and (BucketsLib.Bucket.Bucket_q |top#0@@13|) (BucketsLib.Bucket.Bucket_q |top#0@@13|)) (BucketsLib.Bucket.Bucket_q ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@3| |i#0@@6|)))) (BucketsLib.Bucket.Bucket_q ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@3| |i#0@@6|)))) (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |tmp#0@@3|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp#0@@3|))) (|BucketFlushModel.__default.mergeToOneChild#canCall| (BucketsLib.Bucket.keys |top#0@@13|) (BucketsLib.Bucket.msgs |top#0@@13|) |from#0@@14| |to#0@@14| (BucketsLib.Bucket.keys ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@3| |i#0@@6|))) (BucketsLib.Bucket.msgs ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@3| |i#0@@6|))) (LitInt 0) (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType)) (BucketFlushModel.singleMergeResult.slack |tmp#0@@3|))) (let ((|tmp'#0| (BucketFlushModel.__default.mergeToOneChild StartFuel_BucketFlushModel._default.mergeToOneChild (BucketsLib.Bucket.keys |top#0@@13|) (BucketsLib.Bucket.msgs |top#0@@13|) |from#0@@14| |to#0@@14| (BucketsLib.Bucket.keys ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@3| |i#0@@6|))) (BucketsLib.Bucket.msgs ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@3| |i#0@@6|))) (LitInt 0) (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType)) (BucketFlushModel.singleMergeResult.slack |tmp#0@@3|)))) (and (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |tmp'#0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp'#0|)) (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |tmp'#0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp'#0|))) (let ((|results'#0| (|Seq#Append| |results#0@@3| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#BucketsLib.Bucket.Bucket| (BucketFlushModel.singleMergeResult.keys |tmp'#0|) (BucketFlushModel.singleMergeResult.msgs |tmp'#0|))))))) (|BucketFlushModel.__default.mergeToChildrenIter#canCall| |top#0@@13| |bots#0@@3| |idxs#0@@3| |tmp'#0| (+ |i#0@@6| 1) |results'#0|))))))))) (=> (not (BucketFlushModel.singleMergeResult.MergeCompleted_q |tmp#0@@3|)) (let ((|results'#1| (|Seq#Append| |results#0@@3| (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |bots#0@@3| |i#0@@6|))))) (|BucketFlushModel.__default.mergeToChildrenIter#canCall| |top#0@@13| |bots#0@@3| |idxs#0@@3| |tmp#0@@3| (+ |i#0@@6| 1) |results'#1|)))))) (= (BucketFlushModel.__default.mergeToChildrenIter ($LS $ly@@17) |top#0@@13| |bots#0@@3| |idxs#0@@3| |tmp#0@@3| |i#0@@6| |results#0@@3|) (ite (= |i#0@@6| (|Seq#Length| |bots#0@@3|)) (ite (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp#0@@3|) (let ((|leftover_top#0| (|#BucketsLib.Bucket.Bucket| (|Seq#Drop| (BucketsLib.Bucket.keys |top#0@@13|) (BucketFlushModel.singleMergeResult.end |tmp#0@@3|)) (|Seq#Drop| (BucketsLib.Bucket.msgs |top#0@@13|) (BucketFlushModel.singleMergeResult.end |tmp#0@@3|))))) (|#BucketFlushModel.mergeResult.mergeResult| |leftover_top#0| |results#0@@3| (BucketFlushModel.singleMergeResult.slack |tmp#0@@3|))) (|#BucketFlushModel.mergeResult.mergeResult| (Lit BucketsLib.__default.EmptyBucket) |results#0@@3| (BucketFlushModel.singleMergeResult.slack |tmp#0@@3|))) (ite (BucketFlushModel.singleMergeResult.MergeCompleted_q |tmp#0@@3|) (let ((|from#0@@15| (U_2_int ($Unbox intType (|Seq#Index| |idxs#0@@3| |i#0@@6|))))) (let ((|to1#0@@0| (U_2_int ($Unbox intType (|Seq#Index| |idxs#0@@3| (+ |i#0@@6| 1)))))) (let ((|to#0@@15| (ite (< |to1#0@@0| |from#0@@15|) |from#0@@15| |to1#0@@0|))) (let ((|tmp'#0@@0| (BucketFlushModel.__default.mergeToOneChild StartFuel_BucketFlushModel._default.mergeToOneChild (BucketsLib.Bucket.keys |top#0@@13|) (BucketsLib.Bucket.msgs |top#0@@13|) |from#0@@15| |to#0@@15| (BucketsLib.Bucket.keys ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@3| |i#0@@6|))) (BucketsLib.Bucket.msgs ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@3| |i#0@@6|))) (LitInt 0) (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType)) (BucketFlushModel.singleMergeResult.slack |tmp#0@@3|)))) (let ((|results'#0@@0| (|Seq#Append| |results#0@@3| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#BucketsLib.Bucket.Bucket| (BucketFlushModel.singleMergeResult.keys |tmp'#0@@0|) (BucketFlushModel.singleMergeResult.msgs |tmp'#0@@0|))))))) (BucketFlushModel.__default.mergeToChildrenIter $ly@@17 |top#0@@13| |bots#0@@3| |idxs#0@@3| |tmp'#0@@0| (+ |i#0@@6| 1) |results'#0@@0|)))))) (let ((|results'#1@@0| (|Seq#Append| |results#0@@3| (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |bots#0@@3| |i#0@@6|))))) (BucketFlushModel.__default.mergeToChildrenIter $ly@@17 |top#0@@13| |bots#0@@3| |idxs#0@@3| |tmp#0@@3| (+ |i#0@@6| 1) |results'#1@@0|))))))) :qid |BucketFlushModelidfy.943:12| :skolemid |1861| :pattern ( (BucketFlushModel.__default.mergeToChildrenIter ($LS $ly@@17) |top#0@@13| |bots#0@@3| |idxs#0@@3| |tmp#0@@3| |i#0@@6| |results#0@@3|)) ))))
(assert  (=> (<= 27 $FunctionContextHeight) (forall (($ly@@18 T@U) (|top#0@@14| T@U) (|bots#0@@4| T@U) (|idxs#0@@4| T@U) (|tmp#0@@4| T@U) (|i#0@@7| Int) (|results#0@@4| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@18) LayerTypeType) (= (type |top#0@@14|) DatatypeTypeType)) (= (type |bots#0@@4|) (SeqType BoxType))) (= (type |idxs#0@@4|) (SeqType BoxType))) (= (type |tmp#0@@4|) DatatypeTypeType)) (= (type |results#0@@4|) (SeqType BoxType))) (or (|BucketFlushModel.__default.mergeToChildrenIter#canCall| |top#0@@14| (Lit |bots#0@@4|) |idxs#0@@4| |tmp#0@@4| (LitInt |i#0@@7|) |results#0@@4|) (and (not (= 27 $FunctionContextHeight)) (and (and (and (and (and ($Is |top#0@@14| Tclass.BucketsLib.Bucket) ($Is |bots#0@@4| (TSeq Tclass.BucketsLib.Bucket))) ($Is |idxs#0@@4| (TSeq TInt))) ($Is |tmp#0@@4| Tclass.BucketFlushModel.singleMergeResult)) ($Is |results#0@@4| (TSeq Tclass.BucketsLib.Bucket))) (and (and (and (and (and (and (and (BucketsLib.__default.WFBucket |top#0@@14|) (forall ((|i#5| Int) ) (!  (=> (and (<= (LitInt 0) |i#5|) (< |i#5| (|Seq#Length| (Lit |bots#0@@4|)))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bots#0@@4|) |i#5|)))) :qid |BucketFlushModelidfy.951:19| :skolemid |1862| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@4| |i#5|))) ))) (< 0 (|Seq#Length| (Lit |bots#0@@4|)))) (= (|Seq#Length| |results#0@@4|) (LitInt |i#0@@7|))) (and (<= (LitInt 0) (LitInt |i#0@@7|)) (<= (LitInt |i#0@@7|) (|Seq#Length| (Lit |bots#0@@4|))))) (= (|Seq#Length| |idxs#0@@4|) (+ (|Seq#Length| (Lit |bots#0@@4|)) 1))) (forall ((|i#6| Int) ) (!  (=> (and (<= (LitInt 0) |i#6|) (< |i#6| (|Seq#Length| |idxs#0@@4|))) (and (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| |idxs#0@@4| |i#6|)))) (<= (U_2_int ($Unbox intType (|Seq#Index| |idxs#0@@4| |i#6|))) (|Seq#Length| (BucketsLib.Bucket.keys |top#0@@14|))))) :qid |BucketFlushModelidfy.956:19| :skolemid |1863| :pattern ( ($Unbox intType (|Seq#Index| |idxs#0@@4| |i#6|))) ))) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp#0@@4|) (and (<= (LitInt 0) (BucketFlushModel.singleMergeResult.end |tmp#0@@4|)) (<= (BucketFlushModel.singleMergeResult.end |tmp#0@@4|) (|Seq#Length| (BucketsLib.Bucket.keys |top#0@@14|)))))))))) (and (and (=> (= (LitInt |i#0@@7|) (|Seq#Length| (Lit |bots#0@@4|))) (and (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp#0@@4|) (and (and (BucketsLib.Bucket.Bucket_q |top#0@@14|) (BucketsLib.Bucket.Bucket_q |top#0@@14|)) (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |tmp#0@@4|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp#0@@4|)))) (=> (not (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp#0@@4|)) (and |BucketsLib.__default.EmptyBucket#canCall| (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |tmp#0@@4|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp#0@@4|)))))) (=> (not (= (LitInt |i#0@@7|) (|Seq#Length| (Lit |bots#0@@4|)))) (and (=> (BucketFlushModel.singleMergeResult.MergeCompleted_q |tmp#0@@4|) (let ((|from#1| (U_2_int ($Unbox intType (|Seq#Index| |idxs#0@@4| (LitInt |i#0@@7|)))))) (let ((|to1#1| (U_2_int ($Unbox intType (|Seq#Index| |idxs#0@@4| (LitInt (+ |i#0@@7| 1))))))) (let ((|to#1| (ite (< |to1#1| |from#1|) |from#1| |to1#1|))) (and (and (and (and (and (and (BucketsLib.Bucket.Bucket_q |top#0@@14|) (BucketsLib.Bucket.Bucket_q |top#0@@14|)) (BucketsLib.Bucket.Bucket_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bots#0@@4|) (LitInt |i#0@@7|))))) (BucketsLib.Bucket.Bucket_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bots#0@@4|) (LitInt |i#0@@7|))))) (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |tmp#0@@4|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp#0@@4|))) (|BucketFlushModel.__default.mergeToOneChild#canCall| (BucketsLib.Bucket.keys |top#0@@14|) (BucketsLib.Bucket.msgs |top#0@@14|) |from#1| |to#1| (BucketsLib.Bucket.keys ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bots#0@@4|) (LitInt |i#0@@7|)))) (BucketsLib.Bucket.msgs ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bots#0@@4|) (LitInt |i#0@@7|)))) (LitInt 0) (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType)) (BucketFlushModel.singleMergeResult.slack |tmp#0@@4|))) (let ((|tmp'#1| (BucketFlushModel.__default.mergeToOneChild StartFuel_BucketFlushModel._default.mergeToOneChild (BucketsLib.Bucket.keys |top#0@@14|) (BucketsLib.Bucket.msgs |top#0@@14|) |from#1| |to#1| (BucketsLib.Bucket.keys ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bots#0@@4|) (LitInt |i#0@@7|)))) (BucketsLib.Bucket.msgs ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bots#0@@4|) (LitInt |i#0@@7|)))) (LitInt 0) (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType)) (BucketFlushModel.singleMergeResult.slack |tmp#0@@4|)))) (and (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |tmp'#1|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp'#1|)) (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |tmp'#1|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp'#1|))) (let ((|results'#2| (|Seq#Append| |results#0@@4| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#BucketsLib.Bucket.Bucket| (BucketFlushModel.singleMergeResult.keys |tmp'#1|) (BucketFlushModel.singleMergeResult.msgs |tmp'#1|))))))) (|BucketFlushModel.__default.mergeToChildrenIter#canCall| |top#0@@14| (Lit |bots#0@@4|) |idxs#0@@4| |tmp'#1| (LitInt (+ |i#0@@7| 1)) |results'#2|))))))))) (=> (not (BucketFlushModel.singleMergeResult.MergeCompleted_q |tmp#0@@4|)) (let ((|results'#3| (|Seq#Append| |results#0@@4| (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| (Lit |bots#0@@4|) (LitInt |i#0@@7|)))))) (|BucketFlushModel.__default.mergeToChildrenIter#canCall| |top#0@@14| (Lit |bots#0@@4|) |idxs#0@@4| |tmp#0@@4| (LitInt (+ |i#0@@7| 1)) |results'#3|)))))) (= (BucketFlushModel.__default.mergeToChildrenIter ($LS $ly@@18) |top#0@@14| (Lit |bots#0@@4|) |idxs#0@@4| |tmp#0@@4| (LitInt |i#0@@7|) |results#0@@4|) (ite (= (LitInt |i#0@@7|) (|Seq#Length| (Lit |bots#0@@4|))) (ite (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp#0@@4|) (let ((|leftover_top#1| (|#BucketsLib.Bucket.Bucket| (|Seq#Drop| (BucketsLib.Bucket.keys |top#0@@14|) (BucketFlushModel.singleMergeResult.end |tmp#0@@4|)) (|Seq#Drop| (BucketsLib.Bucket.msgs |top#0@@14|) (BucketFlushModel.singleMergeResult.end |tmp#0@@4|))))) (|#BucketFlushModel.mergeResult.mergeResult| |leftover_top#1| |results#0@@4| (BucketFlushModel.singleMergeResult.slack |tmp#0@@4|))) (|#BucketFlushModel.mergeResult.mergeResult| (Lit BucketsLib.__default.EmptyBucket) |results#0@@4| (BucketFlushModel.singleMergeResult.slack |tmp#0@@4|))) (ite (BucketFlushModel.singleMergeResult.MergeCompleted_q |tmp#0@@4|) (let ((|from#1@@0| (U_2_int ($Unbox intType (|Seq#Index| |idxs#0@@4| (LitInt |i#0@@7|)))))) (let ((|to1#1@@0| (U_2_int ($Unbox intType (|Seq#Index| |idxs#0@@4| (LitInt (+ |i#0@@7| 1))))))) (let ((|to#1@@0| (ite (< |to1#1@@0| |from#1@@0|) |from#1@@0| |to1#1@@0|))) (let ((|tmp'#1@@0| (BucketFlushModel.__default.mergeToOneChild StartFuel_BucketFlushModel._default.mergeToOneChild (BucketsLib.Bucket.keys |top#0@@14|) (BucketsLib.Bucket.msgs |top#0@@14|) |from#1@@0| |to#1@@0| (BucketsLib.Bucket.keys ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bots#0@@4|) (LitInt |i#0@@7|)))) (BucketsLib.Bucket.msgs ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bots#0@@4|) (LitInt |i#0@@7|)))) (LitInt 0) (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType)) (BucketFlushModel.singleMergeResult.slack |tmp#0@@4|)))) (let ((|results'#2@@0| (|Seq#Append| |results#0@@4| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#BucketsLib.Bucket.Bucket| (BucketFlushModel.singleMergeResult.keys |tmp'#1@@0|) (BucketFlushModel.singleMergeResult.msgs |tmp'#1@@0|))))))) (BucketFlushModel.__default.mergeToChildrenIter ($LS $ly@@18) |top#0@@14| (Lit |bots#0@@4|) |idxs#0@@4| |tmp'#1@@0| (LitInt (+ |i#0@@7| 1)) |results'#2@@0|)))))) (let ((|results'#3@@0| (|Seq#Append| |results#0@@4| (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| (Lit |bots#0@@4|) (LitInt |i#0@@7|)))))) (BucketFlushModel.__default.mergeToChildrenIter ($LS $ly@@18) |top#0@@14| (Lit |bots#0@@4|) |idxs#0@@4| |tmp#0@@4| (LitInt (+ |i#0@@7| 1)) |results'#3@@0|))))))) :qid |BucketFlushModelidfy.943:12| :weight 3 :skolemid |1864| :pattern ( (BucketFlushModel.__default.mergeToChildrenIter ($LS $ly@@18) |top#0@@14| (Lit |bots#0@@4|) |idxs#0@@4| |tmp#0@@4| (LitInt |i#0@@7|) |results#0@@4|)) ))))
(assert  (=> (<= 27 $FunctionContextHeight) (forall (($ly@@19 T@U) (|top#0@@15| T@U) (|bots#0@@5| T@U) (|idxs#0@@5| T@U) (|tmp#0@@5| T@U) (|i#0@@8| Int) (|results#0@@5| T@U) ) (!  (=> (and (and (and (and (and (and (= (type $ly@@19) LayerTypeType) (= (type |top#0@@15|) DatatypeTypeType)) (= (type |bots#0@@5|) (SeqType BoxType))) (= (type |idxs#0@@5|) (SeqType BoxType))) (= (type |tmp#0@@5|) DatatypeTypeType)) (= (type |results#0@@5|) (SeqType BoxType))) (or (|BucketFlushModel.__default.mergeToChildrenIter#canCall| (Lit |top#0@@15|) (Lit |bots#0@@5|) (Lit |idxs#0@@5|) (Lit |tmp#0@@5|) (LitInt |i#0@@8|) (Lit |results#0@@5|)) (and (not (= 27 $FunctionContextHeight)) (and (and (and (and (and ($Is |top#0@@15| Tclass.BucketsLib.Bucket) ($Is |bots#0@@5| (TSeq Tclass.BucketsLib.Bucket))) ($Is |idxs#0@@5| (TSeq TInt))) ($Is |tmp#0@@5| Tclass.BucketFlushModel.singleMergeResult)) ($Is |results#0@@5| (TSeq Tclass.BucketsLib.Bucket))) (and (and (and (and (and (and (and (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucket (Lit |top#0@@15|))))) (forall ((|i#7| Int) ) (!  (=> (and (<= (LitInt 0) |i#7|) (< |i#7| (|Seq#Length| (Lit |bots#0@@5|)))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bots#0@@5|) |i#7|)))) :qid |BucketFlushModelidfy.951:19| :skolemid |1865| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@5| |i#7|))) ))) (< 0 (|Seq#Length| (Lit |bots#0@@5|)))) (= (|Seq#Length| (Lit |results#0@@5|)) (LitInt |i#0@@8|))) (and (<= (LitInt 0) (LitInt |i#0@@8|)) (<= (LitInt |i#0@@8|) (|Seq#Length| (Lit |bots#0@@5|))))) (= (|Seq#Length| (Lit |idxs#0@@5|)) (+ (|Seq#Length| (Lit |bots#0@@5|)) 1))) (forall ((|i#8| Int) ) (!  (=> (and (<= (LitInt 0) |i#8|) (< |i#8| (|Seq#Length| (Lit |idxs#0@@5|)))) (and (<= (LitInt 0) (U_2_int ($Unbox intType (|Seq#Index| (Lit |idxs#0@@5|) |i#8|)))) (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |idxs#0@@5|) |i#8|))) (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |top#0@@15|))))))) :qid |BucketFlushModelidfy.956:19| :skolemid |1866| :pattern ( ($Unbox intType (|Seq#Index| |idxs#0@@5| |i#8|))) ))) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q (Lit |tmp#0@@5|)) (and (<= (LitInt 0) (LitInt (BucketFlushModel.singleMergeResult.end (Lit |tmp#0@@5|)))) (<= (LitInt (BucketFlushModel.singleMergeResult.end (Lit |tmp#0@@5|))) (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |top#0@@15|)))))))))))) (and (and (=> (= (LitInt |i#0@@8|) (|Seq#Length| (Lit |bots#0@@5|))) (and (=> (U_2_bool (Lit (bool_2_U (BucketFlushModel.singleMergeResult.SlackExhausted_q (Lit |tmp#0@@5|))))) (and (and (BucketsLib.Bucket.Bucket_q (Lit |top#0@@15|)) (BucketsLib.Bucket.Bucket_q (Lit |top#0@@15|))) (or (BucketFlushModel.singleMergeResult.MergeCompleted_q (Lit |tmp#0@@5|)) (BucketFlushModel.singleMergeResult.SlackExhausted_q (Lit |tmp#0@@5|))))) (=> (not (U_2_bool (Lit (bool_2_U (BucketFlushModel.singleMergeResult.SlackExhausted_q (Lit |tmp#0@@5|)))))) (and |BucketsLib.__default.EmptyBucket#canCall| (or (BucketFlushModel.singleMergeResult.MergeCompleted_q (Lit |tmp#0@@5|)) (BucketFlushModel.singleMergeResult.SlackExhausted_q (Lit |tmp#0@@5|))))))) (=> (not (= (LitInt |i#0@@8|) (|Seq#Length| (Lit |bots#0@@5|)))) (and (=> (U_2_bool (Lit (bool_2_U (BucketFlushModel.singleMergeResult.MergeCompleted_q (Lit |tmp#0@@5|))))) (let ((|from#2| (U_2_int ($Unbox intType (|Seq#Index| (Lit |idxs#0@@5|) (LitInt |i#0@@8|)))))) (let ((|to1#2| (U_2_int ($Unbox intType (|Seq#Index| (Lit |idxs#0@@5|) (LitInt (+ |i#0@@8| 1))))))) (let ((|to#2| (ite (< |to1#2| |from#2|) |from#2| |to1#2|))) (and (and (and (and (and (and (BucketsLib.Bucket.Bucket_q (Lit |top#0@@15|)) (BucketsLib.Bucket.Bucket_q (Lit |top#0@@15|))) (BucketsLib.Bucket.Bucket_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bots#0@@5|) (LitInt |i#0@@8|))))) (BucketsLib.Bucket.Bucket_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bots#0@@5|) (LitInt |i#0@@8|))))) (or (BucketFlushModel.singleMergeResult.MergeCompleted_q (Lit |tmp#0@@5|)) (BucketFlushModel.singleMergeResult.SlackExhausted_q (Lit |tmp#0@@5|)))) (|BucketFlushModel.__default.mergeToOneChild#canCall| (Lit (BucketsLib.Bucket.keys (Lit |top#0@@15|))) (Lit (BucketsLib.Bucket.msgs (Lit |top#0@@15|))) |from#2| |to#2| (BucketsLib.Bucket.keys ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bots#0@@5|) (LitInt |i#0@@8|)))) (BucketsLib.Bucket.msgs ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bots#0@@5|) (LitInt |i#0@@8|)))) (LitInt 0) (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType)) (LitInt (BucketFlushModel.singleMergeResult.slack (Lit |tmp#0@@5|))))) (let ((|tmp'#2| (BucketFlushModel.__default.mergeToOneChild StartFuel_BucketFlushModel._default.mergeToOneChild (Lit (BucketsLib.Bucket.keys (Lit |top#0@@15|))) (Lit (BucketsLib.Bucket.msgs (Lit |top#0@@15|))) |from#2| |to#2| (BucketsLib.Bucket.keys ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bots#0@@5|) (LitInt |i#0@@8|)))) (BucketsLib.Bucket.msgs ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bots#0@@5|) (LitInt |i#0@@8|)))) (LitInt 0) (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType)) (LitInt (BucketFlushModel.singleMergeResult.slack (Lit |tmp#0@@5|)))))) (and (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |tmp'#2|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp'#2|)) (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |tmp'#2|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp'#2|))) (let ((|results'#4| (|Seq#Append| |results#0@@5| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#BucketsLib.Bucket.Bucket| (BucketFlushModel.singleMergeResult.keys |tmp'#2|) (BucketFlushModel.singleMergeResult.msgs |tmp'#2|))))))) (|BucketFlushModel.__default.mergeToChildrenIter#canCall| (Lit |top#0@@15|) (Lit |bots#0@@5|) (Lit |idxs#0@@5|) |tmp'#2| (LitInt (+ |i#0@@8| 1)) |results'#4|))))))))) (=> (not (U_2_bool (Lit (bool_2_U (BucketFlushModel.singleMergeResult.MergeCompleted_q (Lit |tmp#0@@5|)))))) (let ((|results'#5| (|Seq#Append| |results#0@@5| (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| (Lit |bots#0@@5|) (LitInt |i#0@@8|)))))) (|BucketFlushModel.__default.mergeToChildrenIter#canCall| (Lit |top#0@@15|) (Lit |bots#0@@5|) (Lit |idxs#0@@5|) (Lit |tmp#0@@5|) (LitInt (+ |i#0@@8| 1)) |results'#5|)))))) (= (BucketFlushModel.__default.mergeToChildrenIter ($LS $ly@@19) (Lit |top#0@@15|) (Lit |bots#0@@5|) (Lit |idxs#0@@5|) (Lit |tmp#0@@5|) (LitInt |i#0@@8|) (Lit |results#0@@5|)) (ite (= (LitInt |i#0@@8|) (|Seq#Length| (Lit |bots#0@@5|))) (ite (BucketFlushModel.singleMergeResult.SlackExhausted_q (Lit |tmp#0@@5|)) (let ((|leftover_top#2| (Lit (|#BucketsLib.Bucket.Bucket| (Lit (|Seq#Drop| (Lit (BucketsLib.Bucket.keys (Lit |top#0@@15|))) (LitInt (BucketFlushModel.singleMergeResult.end (Lit |tmp#0@@5|))))) (Lit (|Seq#Drop| (Lit (BucketsLib.Bucket.msgs (Lit |top#0@@15|))) (LitInt (BucketFlushModel.singleMergeResult.end (Lit |tmp#0@@5|))))))))) (Lit (|#BucketFlushModel.mergeResult.mergeResult| |leftover_top#2| (Lit |results#0@@5|) (LitInt (BucketFlushModel.singleMergeResult.slack (Lit |tmp#0@@5|)))))) (|#BucketFlushModel.mergeResult.mergeResult| (Lit BucketsLib.__default.EmptyBucket) (Lit |results#0@@5|) (LitInt (BucketFlushModel.singleMergeResult.slack (Lit |tmp#0@@5|))))) (ite (BucketFlushModel.singleMergeResult.MergeCompleted_q (Lit |tmp#0@@5|)) (let ((|from#2@@0| (U_2_int ($Unbox intType (|Seq#Index| (Lit |idxs#0@@5|) (LitInt |i#0@@8|)))))) (let ((|to1#2@@0| (U_2_int ($Unbox intType (|Seq#Index| (Lit |idxs#0@@5|) (LitInt (+ |i#0@@8| 1))))))) (let ((|to#2@@0| (ite (< |to1#2@@0| |from#2@@0|) |from#2@@0| |to1#2@@0|))) (let ((|tmp'#2@@0| (BucketFlushModel.__default.mergeToOneChild StartFuel_BucketFlushModel._default.mergeToOneChild (Lit (BucketsLib.Bucket.keys (Lit |top#0@@15|))) (Lit (BucketsLib.Bucket.msgs (Lit |top#0@@15|))) |from#2@@0| |to#2@@0| (BucketsLib.Bucket.keys ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bots#0@@5|) (LitInt |i#0@@8|)))) (BucketsLib.Bucket.msgs ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bots#0@@5|) (LitInt |i#0@@8|)))) (LitInt 0) (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType)) (LitInt (BucketFlushModel.singleMergeResult.slack (Lit |tmp#0@@5|)))))) (let ((|results'#4@@0| (|Seq#Append| |results#0@@5| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#BucketsLib.Bucket.Bucket| (BucketFlushModel.singleMergeResult.keys |tmp'#2@@0|) (BucketFlushModel.singleMergeResult.msgs |tmp'#2@@0|))))))) (BucketFlushModel.__default.mergeToChildrenIter ($LS $ly@@19) (Lit |top#0@@15|) (Lit |bots#0@@5|) (Lit |idxs#0@@5|) |tmp'#2@@0| (LitInt (+ |i#0@@8| 1)) |results'#4@@0|)))))) (let ((|results'#5@@0| (|Seq#Append| |results#0@@5| (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| (Lit |bots#0@@5|) (LitInt |i#0@@8|)))))) (BucketFlushModel.__default.mergeToChildrenIter ($LS $ly@@19) (Lit |top#0@@15|) (Lit |bots#0@@5|) (Lit |idxs#0@@5|) (Lit |tmp#0@@5|) (LitInt (+ |i#0@@8| 1)) |results'#5@@0|))))))) :qid |BucketFlushModelidfy.943:12| :weight 3 :skolemid |1867| :pattern ( (BucketFlushModel.__default.mergeToChildrenIter ($LS $ly@@19) (Lit |top#0@@15|) (Lit |bots#0@@5|) (Lit |idxs#0@@5|) (Lit |tmp#0@@5|) (LitInt |i#0@@8|) (Lit |results#0@@5|))) ))))
(assert (forall ((arg0@@507 T@U) (arg1@@215 T@U) (arg2@@144 T@U) (arg3@@103 T@U) (arg4@@84 Int) ) (! (= (type (BucketFlushModel.__default.mergeToChildren arg0@@507 arg1@@215 arg2@@144 arg3@@103 arg4@@84)) DatatypeTypeType) :qid |funType:BucketFlushModel.__default.mergeToChildren| :pattern ( (BucketFlushModel.__default.mergeToChildren arg0@@507 arg1@@215 arg2@@144 arg3@@103 arg4@@84)) )))
(assert (forall (($ly@@20 T@U) (|top#0@@16| T@U) (|pivots#0@@14| T@U) (|bots#0@@6| T@U) (|slack#0@@6| Int) ) (!  (=> (and (and (and (= (type $ly@@20) LayerTypeType) (= (type |top#0@@16|) DatatypeTypeType)) (= (type |pivots#0@@14|) (SeqType BoxType))) (= (type |bots#0@@6|) (SeqType BoxType))) (= (BucketFlushModel.__default.mergeToChildren ($LS $ly@@20) |top#0@@16| |pivots#0@@14| |bots#0@@6| |slack#0@@6|) (BucketFlushModel.__default.mergeToChildren $ly@@20 |top#0@@16| |pivots#0@@14| |bots#0@@6| |slack#0@@6|))) :qid |BucketFlushModelidfy.986:22| :skolemid |1888| :pattern ( (BucketFlushModel.__default.mergeToChildren ($LS $ly@@20) |top#0@@16| |pivots#0@@14| |bots#0@@6| |slack#0@@6|)) )))
(assert (forall (($ly@@21 T@U) (|top#0@@17| T@U) (|pivots#0@@15| T@U) (|bots#0@@7| T@U) (|slack#0@@7| Int) ) (!  (=> (and (and (and (= (type $ly@@21) LayerTypeType) (= (type |top#0@@17|) DatatypeTypeType)) (= (type |pivots#0@@15|) (SeqType BoxType))) (= (type |bots#0@@7|) (SeqType BoxType))) (= (BucketFlushModel.__default.mergeToChildren $ly@@21 |top#0@@17| |pivots#0@@15| |bots#0@@7| |slack#0@@7|) (BucketFlushModel.__default.mergeToChildren $LZ |top#0@@17| |pivots#0@@15| |bots#0@@7| |slack#0@@7|))) :qid |BucketFlushModelidfy.986:22| :skolemid |1889| :pattern ( (BucketFlushModel.__default.mergeToChildren (AsFuelBottom $ly@@21) |top#0@@17| |pivots#0@@15| |bots#0@@7| |slack#0@@7|)) )))
(assert  (=> (<= 28 $FunctionContextHeight) (forall (($ly@@22 T@U) (|top#0@@18| T@U) (|pivots#0@@16| T@U) (|bots#0@@8| T@U) (|slack#0@@8| Int) ) (!  (=> (and (and (and (and (= (type $ly@@22) LayerTypeType) (= (type |top#0@@18|) DatatypeTypeType)) (= (type |pivots#0@@16|) (SeqType BoxType))) (= (type |bots#0@@8|) (SeqType BoxType))) (or (|BucketFlushModel.__default.mergeToChildren#canCall| |top#0@@18| |pivots#0@@16| |bots#0@@8| |slack#0@@8|) (and (not (= 28 $FunctionContextHeight)) (and (and (and (and ($Is |top#0@@18| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@16| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |bots#0@@8| (TSeq Tclass.BucketsLib.Bucket))) (<= (LitInt 0) |slack#0@@8|)) (and (and (BucketsLib.__default.WFBucket |top#0@@18|) (forall ((|i#0@@9| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@9|) (< |i#0@@9| (|Seq#Length| |bots#0@@8|))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@8| |i#0@@9|)))) :qid |BucketFlushModelidfy.992:19| :skolemid |1890| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@8| |i#0@@9|))) ))) (and (< 0 (|Seq#Length| |bots#0@@8|)) (= (|Seq#Length| |bots#0@@8|) (BoundedPivotsLib.__default.NumBuckets |pivots#0@@16|)))))))) (and (= (|Seq#Length| (BucketFlushModel.mergeResult.bots (BucketFlushModel.__default.mergeToChildren $ly@@22 |top#0@@18| |pivots#0@@16| |bots#0@@8| |slack#0@@8|))) (|Seq#Length| |bots#0@@8|)) ($Is (BucketFlushModel.__default.mergeToChildren $ly@@22 |top#0@@18| |pivots#0@@16| |bots#0@@8| |slack#0@@8|) Tclass.BucketFlushModel.mergeResult))) :qid |BucketFlushModelidfy.986:22| :skolemid |1891| :pattern ( (BucketFlushModel.__default.mergeToChildren $ly@@22 |top#0@@18| |pivots#0@@16| |bots#0@@8| |slack#0@@8|)) ))))
(assert (forall (($ly@@23 T@U) (|top#0@@19| T@U) (|pivots#0@@17| T@U) (|bots#0@@9| T@U) (|slack#0@@9| Int) ) (!  (=> (and (and (and (and (= (type $ly@@23) LayerTypeType) (= (type |top#0@@19|) DatatypeTypeType)) (= (type |pivots#0@@17|) (SeqType BoxType))) (= (type |bots#0@@9|) (SeqType BoxType))) (and (and (and ($Is |top#0@@19| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@17| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |bots#0@@9| (TSeq Tclass.BucketsLib.Bucket))) (<= (LitInt 0) |slack#0@@9|))) (= (|BucketFlushModel.__default.mergeToChildren#requires| $ly@@23 |top#0@@19| |pivots#0@@17| |bots#0@@9| |slack#0@@9|)  (and (and (BucketsLib.__default.WFBucket |top#0@@19|) (forall ((|i#1@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@2|) (< |i#1@@2| (|Seq#Length| |bots#0@@9|))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@9| |i#1@@2|)))) :qid |BucketFlushModelidfy.992:19| :skolemid |1892| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@9| |i#1@@2|))) ))) (and (< 0 (|Seq#Length| |bots#0@@9|)) (= (|Seq#Length| |bots#0@@9|) (BoundedPivotsLib.__default.NumBuckets |pivots#0@@17|)))))) :qid |BucketFlushModelidfy.986:22| :skolemid |1893| :pattern ( (|BucketFlushModel.__default.mergeToChildren#requires| $ly@@23 |top#0@@19| |pivots#0@@17| |bots#0@@9| |slack#0@@9|)) )))
(assert  (=> (<= 28 $FunctionContextHeight) (forall (($ly@@24 T@U) (|top#0@@20| T@U) (|pivots#0@@18| T@U) (|bots#0@@10| T@U) (|slack#0@@10| Int) ) (!  (=> (and (and (and (and (= (type $ly@@24) LayerTypeType) (= (type |top#0@@20|) DatatypeTypeType)) (= (type |pivots#0@@18|) (SeqType BoxType))) (= (type |bots#0@@10|) (SeqType BoxType))) (or (|BucketFlushModel.__default.mergeToChildren#canCall| |top#0@@20| |pivots#0@@18| |bots#0@@10| |slack#0@@10|) (and (not (= 28 $FunctionContextHeight)) (and (and (and (and ($Is |top#0@@20| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@18| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |bots#0@@10| (TSeq Tclass.BucketsLib.Bucket))) (<= (LitInt 0) |slack#0@@10|)) (and (and (BucketsLib.__default.WFBucket |top#0@@20|) (forall ((|i#1@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@3|) (< |i#1@@3| (|Seq#Length| |bots#0@@10|))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@10| |i#1@@3|)))) :qid |BucketFlushModelidfy.992:19| :skolemid |1892| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@10| |i#1@@3|))) ))) (and (< 0 (|Seq#Length| |bots#0@@10|)) (= (|Seq#Length| |bots#0@@10|) (BoundedPivotsLib.__default.NumBuckets |pivots#0@@18|)))))))) (and (and (and (BucketsLib.Bucket.Bucket_q |top#0@@20|) (|BucketFlushModel.__default.pivotIndexes#canCall| (BucketsLib.Bucket.keys |top#0@@20|) |pivots#0@@18|)) (let ((|idxs#0@@6| (BucketFlushModel.__default.pivotIndexes ($LS $LZ) (BucketsLib.Bucket.keys |top#0@@20|) |pivots#0@@18|))) (let ((|tmp#0@@6| (|#BucketFlushModel.singleMergeResult.MergeCompleted| (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType)) |slack#0@@10|))) (|BucketFlushModel.__default.mergeToChildrenIter#canCall| |top#0@@20| |bots#0@@10| |idxs#0@@6| |tmp#0@@6| (LitInt 0) (Lit (|Seq#Empty| BoxType)))))) (= (BucketFlushModel.__default.mergeToChildren ($LS $ly@@24) |top#0@@20| |pivots#0@@18| |bots#0@@10| |slack#0@@10|) (let ((|idxs#0@@7| (BucketFlushModel.__default.pivotIndexes ($LS $LZ) (BucketsLib.Bucket.keys |top#0@@20|) |pivots#0@@18|))) (let ((|tmp#0@@7| (|#BucketFlushModel.singleMergeResult.MergeCompleted| (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType)) |slack#0@@10|))) (BucketFlushModel.__default.mergeToChildrenIter ($LS $LZ) |top#0@@20| |bots#0@@10| |idxs#0@@7| |tmp#0@@7| (LitInt 0) (Lit (|Seq#Empty| BoxType)))))))) :qid |BucketFlushModelidfy.986:22| :skolemid |1894| :pattern ( (BucketFlushModel.__default.mergeToChildren ($LS $ly@@24) |top#0@@20| |pivots#0@@18| |bots#0@@10| |slack#0@@10|)) ))))
(assert  (=> (<= 28 $FunctionContextHeight) (forall (($ly@@25 T@U) (|top#0@@21| T@U) (|pivots#0@@19| T@U) (|bots#0@@11| T@U) (|slack#0@@11| Int) ) (!  (=> (and (and (and (and (= (type $ly@@25) LayerTypeType) (= (type |top#0@@21|) DatatypeTypeType)) (= (type |pivots#0@@19|) (SeqType BoxType))) (= (type |bots#0@@11|) (SeqType BoxType))) (or (|BucketFlushModel.__default.mergeToChildren#canCall| (Lit |top#0@@21|) (Lit |pivots#0@@19|) (Lit |bots#0@@11|) (LitInt |slack#0@@11|)) (and (not (= 28 $FunctionContextHeight)) (and (and (and (and ($Is |top#0@@21| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@19| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |bots#0@@11| (TSeq Tclass.BucketsLib.Bucket))) (<= (LitInt 0) |slack#0@@11|)) (and (and (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucket (Lit |top#0@@21|))))) (forall ((|i#2@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@0|) (< |i#2@@0| (|Seq#Length| (Lit |bots#0@@11|)))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bots#0@@11|) |i#2@@0|)))) :qid |BucketFlushModelidfy.992:19| :skolemid |1895| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@11| |i#2@@0|))) ))) (and (< 0 (|Seq#Length| (Lit |bots#0@@11|))) (= (|Seq#Length| (Lit |bots#0@@11|)) (LitInt (BoundedPivotsLib.__default.NumBuckets (Lit |pivots#0@@19|)))))))))) (and (and (and (BucketsLib.Bucket.Bucket_q (Lit |top#0@@21|)) (|BucketFlushModel.__default.pivotIndexes#canCall| (Lit (BucketsLib.Bucket.keys (Lit |top#0@@21|))) (Lit |pivots#0@@19|))) (let ((|idxs#1| (Lit (BucketFlushModel.__default.pivotIndexes ($LS $LZ) (Lit (BucketsLib.Bucket.keys (Lit |top#0@@21|))) (Lit |pivots#0@@19|))))) (let ((|tmp#1| (Lit (|#BucketFlushModel.singleMergeResult.MergeCompleted| (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType)) (LitInt |slack#0@@11|))))) (|BucketFlushModel.__default.mergeToChildrenIter#canCall| (Lit |top#0@@21|) (Lit |bots#0@@11|) |idxs#1| |tmp#1| (LitInt 0) (Lit (|Seq#Empty| BoxType)))))) (= (BucketFlushModel.__default.mergeToChildren ($LS $ly@@25) (Lit |top#0@@21|) (Lit |pivots#0@@19|) (Lit |bots#0@@11|) (LitInt |slack#0@@11|)) (let ((|idxs#1@@0| (Lit (BucketFlushModel.__default.pivotIndexes ($LS $LZ) (Lit (BucketsLib.Bucket.keys (Lit |top#0@@21|))) (Lit |pivots#0@@19|))))) (let ((|tmp#1@@0| (Lit (|#BucketFlushModel.singleMergeResult.MergeCompleted| (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType)) (LitInt |slack#0@@11|))))) (Lit (BucketFlushModel.__default.mergeToChildrenIter ($LS $LZ) (Lit |top#0@@21|) (Lit |bots#0@@11|) |idxs#1@@0| |tmp#1@@0| (LitInt 0) (Lit (|Seq#Empty| BoxType))))))))) :qid |BucketFlushModelidfy.986:22| :weight 3 :skolemid |1896| :pattern ( (BucketFlushModel.__default.mergeToChildren ($LS $ly@@25) (Lit |top#0@@21|) (Lit |pivots#0@@19|) (Lit |bots#0@@11|) (LitInt |slack#0@@11|))) ))))
(assert (forall ((arg0@@508 T@U) (arg1@@216 T@U) ) (! (= (type (BucketFlushModel.__default.getFlushedKeys arg0@@508 arg1@@216)) (MapType0Type BoxType boolType)) :qid |funType:BucketFlushModel.__default.getFlushedKeys| :pattern ( (BucketFlushModel.__default.getFlushedKeys arg0@@508 arg1@@216)) )))
(assert  (=> (<= 29 $FunctionContextHeight) (forall ((|tmp#0@@8| T@U) (|top#0@@22| T@U) ) (!  (=> (and (and (= (type |tmp#0@@8|) DatatypeTypeType) (= (type |top#0@@22|) DatatypeTypeType)) (or (|BucketFlushModel.__default.getFlushedKeys#canCall| |tmp#0@@8| |top#0@@22|) (and (not (= 29 $FunctionContextHeight)) (and (and ($Is |tmp#0@@8| Tclass.BucketFlushModel.singleMergeResult) ($Is |top#0@@22| Tclass.BucketsLib.Bucket)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp#0@@8|) (<= (BucketFlushModel.singleMergeResult.end |tmp#0@@8|) (|Seq#Length| (BucketsLib.Bucket.keys |top#0@@22|)))))))) (and (forall ((|k#0| T@U) ) (!  (=> (= (type |k#0|) (SeqType BoxType)) (=> (and ($Is |k#0| Tclass.KeyType.Key) (U_2_bool (MapType0Select (BucketFlushModel.__default.getFlushedKeys |tmp#0@@8| |top#0@@22|) ($Box |k#0|)))) (|Seq#Contains| (BucketsLib.Bucket.keys |top#0@@22|) ($Box |k#0|)))) :qid |BucketFlushModelidfy.1003:18| :skolemid |1909| :pattern ( (|Seq#Contains| (BucketsLib.Bucket.keys |top#0@@22|) ($Box |k#0|))) :pattern ( (MapType0Select (BucketFlushModel.__default.getFlushedKeys |tmp#0@@8| |top#0@@22|) ($Box |k#0|))) )) ($Is (BucketFlushModel.__default.getFlushedKeys |tmp#0@@8| |top#0@@22|) (TSet Tclass.KeyType.Key)))) :qid |BucketFlushModelidfy.1001:27| :skolemid |1910| :pattern ( (BucketFlushModel.__default.getFlushedKeys |tmp#0@@8| |top#0@@22|)) ))))
(assert (forall ((|tmp#0@@9| T@U) (|top#0@@23| T@U) ) (!  (=> (and (and (= (type |tmp#0@@9|) DatatypeTypeType) (= (type |top#0@@23|) DatatypeTypeType)) (and ($Is |tmp#0@@9| Tclass.BucketFlushModel.singleMergeResult) ($Is |top#0@@23| Tclass.BucketsLib.Bucket))) (= (|BucketFlushModel.__default.getFlushedKeys#requires| |tmp#0@@9| |top#0@@23|)  (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp#0@@9|) (<= (BucketFlushModel.singleMergeResult.end |tmp#0@@9|) (|Seq#Length| (BucketsLib.Bucket.keys |top#0@@23|)))))) :qid |BucketFlushModelidfy.1001:27| :skolemid |1911| :pattern ( (|BucketFlushModel.__default.getFlushedKeys#requires| |tmp#0@@9| |top#0@@23|)) )))
(assert (forall ((arg0@@509 Int) (arg1@@217 Int) (arg2@@145 T@U) (arg3@@104 T@U) ) (! (= (type (|lambda#56| arg0@@509 arg1@@217 arg2@@145 arg3@@104)) (MapType0Type BoxType boolType)) :qid |funType:lambda#56| :pattern ( (|lambda#56| arg0@@509 arg1@@217 arg2@@145 arg3@@104)) )))
(assert  (=> (<= 29 $FunctionContextHeight) (forall ((|tmp#0@@10| T@U) (|top#0@@24| T@U) ) (!  (=> (and (and (= (type |tmp#0@@10|) DatatypeTypeType) (= (type |top#0@@24|) DatatypeTypeType)) (or (|BucketFlushModel.__default.getFlushedKeys#canCall| |tmp#0@@10| |top#0@@24|) (and (not (= 29 $FunctionContextHeight)) (and (and ($Is |tmp#0@@10| Tclass.BucketFlushModel.singleMergeResult) ($Is |top#0@@24| Tclass.BucketsLib.Bucket)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp#0@@10|) (<= (BucketFlushModel.singleMergeResult.end |tmp#0@@10|) (|Seq#Length| (BucketsLib.Bucket.keys |top#0@@24|)))))))) (and (and (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp#0@@10|) (forall ((|i#0@@10| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@10|) (< |i#0@@10| (BucketFlushModel.singleMergeResult.end |tmp#0@@10|))) (BucketsLib.Bucket.Bucket_q |top#0@@24|)) :qid |BucketFlushModelidfy.1006:11| :skolemid |1914| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (BucketsLib.Bucket.keys |top#0@@24|) |i#0@@10|))) ))) (=> (not (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp#0@@10|)) (forall ((|i#1@@4| Int) ) (!  (and (=> (<= (LitInt 0) |i#1@@4|) (BucketsLib.Bucket.Bucket_q |top#0@@24|)) (=> (and (<= (LitInt 0) |i#1@@4|) (< |i#1@@4| (|Seq#Length| (BucketsLib.Bucket.keys |top#0@@24|)))) (BucketsLib.Bucket.Bucket_q |top#0@@24|))) :qid |BucketFlushModelidfy.1008:11| :skolemid |1915| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (BucketsLib.Bucket.keys |top#0@@24|) |i#1@@4|))) )))) (= (BucketFlushModel.__default.getFlushedKeys |tmp#0@@10| |top#0@@24|) (ite (BucketFlushModel.singleMergeResult.SlackExhausted_q |tmp#0@@10|) (|lambda#56| (LitInt 0) (BucketFlushModel.singleMergeResult.end |tmp#0@@10|) (BucketsLib.Bucket.keys |top#0@@24|) (BucketsLib.Bucket.keys |top#0@@24|)) (|lambda#56| (LitInt 0) (|Seq#Length| (BucketsLib.Bucket.keys |top#0@@24|)) (BucketsLib.Bucket.keys |top#0@@24|) (BucketsLib.Bucket.keys |top#0@@24|)))))) :qid |BucketFlushModelidfy.1001:27| :skolemid |1916| :pattern ( (BucketFlushModel.__default.getFlushedKeys |tmp#0@@10| |top#0@@24|)) ))))
(assert  (=> (<= 29 $FunctionContextHeight) (forall ((|tmp#0@@11| T@U) (|top#0@@25| T@U) ) (!  (=> (and (and (= (type |tmp#0@@11|) DatatypeTypeType) (= (type |top#0@@25|) DatatypeTypeType)) (or (|BucketFlushModel.__default.getFlushedKeys#canCall| (Lit |tmp#0@@11|) (Lit |top#0@@25|)) (and (not (= 29 $FunctionContextHeight)) (and (and ($Is |tmp#0@@11| Tclass.BucketFlushModel.singleMergeResult) ($Is |top#0@@25| Tclass.BucketsLib.Bucket)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q (Lit |tmp#0@@11|)) (<= (LitInt (BucketFlushModel.singleMergeResult.end (Lit |tmp#0@@11|))) (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |top#0@@25|)))))))))) (and (and (=> (U_2_bool (Lit (bool_2_U (BucketFlushModel.singleMergeResult.SlackExhausted_q (Lit |tmp#0@@11|))))) (forall ((|i#2@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@1|) (< |i#2@@1| (BucketFlushModel.singleMergeResult.end (Lit |tmp#0@@11|)))) (BucketsLib.Bucket.Bucket_q (Lit |top#0@@25|))) :qid |BucketFlushModelidfy.1006:11| :skolemid |1919| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (BucketsLib.Bucket.keys |top#0@@25|) |i#2@@1|))) ))) (=> (not (U_2_bool (Lit (bool_2_U (BucketFlushModel.singleMergeResult.SlackExhausted_q (Lit |tmp#0@@11|)))))) (forall ((|i#3@@1| Int) ) (!  (and (=> (<= (LitInt 0) |i#3@@1|) (BucketsLib.Bucket.Bucket_q (Lit |top#0@@25|))) (=> (and (<= (LitInt 0) |i#3@@1|) (< |i#3@@1| (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |top#0@@25|)))))) (BucketsLib.Bucket.Bucket_q (Lit |top#0@@25|)))) :qid |BucketFlushModelidfy.1008:11| :skolemid |1920| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (BucketsLib.Bucket.keys |top#0@@25|) |i#3@@1|))) )))) (= (BucketFlushModel.__default.getFlushedKeys (Lit |tmp#0@@11|) (Lit |top#0@@25|)) (ite (BucketFlushModel.singleMergeResult.SlackExhausted_q (Lit |tmp#0@@11|)) (|lambda#56| (LitInt 0) (BucketFlushModel.singleMergeResult.end (Lit |tmp#0@@11|)) (Lit (BucketsLib.Bucket.keys (Lit |top#0@@25|))) (BucketsLib.Bucket.keys |top#0@@25|)) (|lambda#56| (LitInt 0) (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |top#0@@25|)))) (Lit (BucketsLib.Bucket.keys (Lit |top#0@@25|))) (BucketsLib.Bucket.keys |top#0@@25|)))))) :qid |BucketFlushModelidfy.1001:27| :weight 3 :skolemid |1921| :pattern ( (BucketFlushModel.__default.getFlushedKeys (Lit |tmp#0@@11|) (Lit |top#0@@25|))) ))))
(assert (forall ((arg0@@510 T@U) (arg1@@218 T@U) (arg2@@146 T@U) (arg3@@105 T@U) ) (! (= (type (BucketFlushModel.__default.partialFlush arg0@@510 arg1@@218 arg2@@146 arg3@@105)) DatatypeTypeType) :qid |funType:BucketFlushModel.__default.partialFlush| :pattern ( (BucketFlushModel.__default.partialFlush arg0@@510 arg1@@218 arg2@@146 arg3@@105)) )))
(assert (forall (($ly@@26 T@U) (|top#0@@26| T@U) (|pivots#0@@20| T@U) (|bots#0@@12| T@U) ) (!  (=> (and (and (and (= (type $ly@@26) LayerTypeType) (= (type |top#0@@26|) DatatypeTypeType)) (= (type |pivots#0@@20|) (SeqType BoxType))) (= (type |bots#0@@12|) (SeqType BoxType))) (= (BucketFlushModel.__default.partialFlush ($LS $ly@@26) |top#0@@26| |pivots#0@@20| |bots#0@@12|) (BucketFlushModel.__default.partialFlush $ly@@26 |top#0@@26| |pivots#0@@20| |bots#0@@12|))) :qid |BucketFlushModelidfy.1546:22| :skolemid |2474| :pattern ( (BucketFlushModel.__default.partialFlush ($LS $ly@@26) |top#0@@26| |pivots#0@@20| |bots#0@@12|)) )))
(assert (forall (($ly@@27 T@U) (|top#0@@27| T@U) (|pivots#0@@21| T@U) (|bots#0@@13| T@U) ) (!  (=> (and (and (and (= (type $ly@@27) LayerTypeType) (= (type |top#0@@27|) DatatypeTypeType)) (= (type |pivots#0@@21|) (SeqType BoxType))) (= (type |bots#0@@13|) (SeqType BoxType))) (= (BucketFlushModel.__default.partialFlush $ly@@27 |top#0@@27| |pivots#0@@21| |bots#0@@13|) (BucketFlushModel.__default.partialFlush $LZ |top#0@@27| |pivots#0@@21| |bots#0@@13|))) :qid |BucketFlushModelidfy.1546:22| :skolemid |2475| :pattern ( (BucketFlushModel.__default.partialFlush (AsFuelBottom $ly@@27) |top#0@@27| |pivots#0@@21| |bots#0@@13|)) )))
(assert (= (type StartFuel_BucketWeights._default.WeightBucketList) LayerTypeType))
(assert  (=> (<= 40 $FunctionContextHeight) (forall (($ly@@28 T@U) (|top#0@@28| T@U) (|pivots#0@@22| T@U) (|bots#0@@14| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@28) LayerTypeType) (= (type |top#0@@28|) DatatypeTypeType)) (= (type |pivots#0@@22|) (SeqType BoxType))) (= (type |bots#0@@14|) (SeqType BoxType))) (or (|BucketFlushModel.__default.partialFlush#canCall| |top#0@@28| |pivots#0@@22| |bots#0@@14|) (and (not (= 40 $FunctionContextHeight)) (and (and (and ($Is |top#0@@28| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@22| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |bots#0@@14| (TSeq Tclass.BucketsLib.Bucket))) (and (and (and (BucketsLib.__default.WFBucket |top#0@@28|) (forall ((|i#0@@11| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@11|) (< |i#0@@11| (|Seq#Length| |bots#0@@14|))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@14| |i#0@@11|)))) :qid |BucketFlushModelidfy.1551:19| :skolemid |2476| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@14| |i#0@@11|))) ))) (and (< 0 (|Seq#Length| |bots#0@@14|)) (= (|Seq#Length| |bots#0@@14|) (BoundedPivotsLib.__default.NumBuckets |pivots#0@@22|)))) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList |bots#0@@14|) (LitInt Bounds.__default.MaxTotalBucketWeight))))))) (and (= (|Seq#Length| (BucketFlushModel.partialFlushResult.bots (BucketFlushModel.__default.partialFlush $ly@@28 |top#0@@28| |pivots#0@@22| |bots#0@@14|))) (|Seq#Length| |bots#0@@14|)) ($Is (BucketFlushModel.__default.partialFlush $ly@@28 |top#0@@28| |pivots#0@@22| |bots#0@@14|) Tclass.BucketFlushModel.partialFlushResult))) :qid |BucketFlushModelidfy.1546:22| :skolemid |2477| :pattern ( (BucketFlushModel.__default.partialFlush $ly@@28 |top#0@@28| |pivots#0@@22| |bots#0@@14|)) ))))
(assert (forall (($ly@@29 T@U) (|top#0@@29| T@U) (|pivots#0@@23| T@U) (|bots#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@29) LayerTypeType) (= (type |top#0@@29|) DatatypeTypeType)) (= (type |pivots#0@@23|) (SeqType BoxType))) (= (type |bots#0@@15|) (SeqType BoxType))) (and (and ($Is |top#0@@29| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@23| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |bots#0@@15| (TSeq Tclass.BucketsLib.Bucket)))) (= (|BucketFlushModel.__default.partialFlush#requires| $ly@@29 |top#0@@29| |pivots#0@@23| |bots#0@@15|)  (and (and (and (BucketsLib.__default.WFBucket |top#0@@29|) (forall ((|i#1@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@5|) (< |i#1@@5| (|Seq#Length| |bots#0@@15|))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@15| |i#1@@5|)))) :qid |BucketFlushModelidfy.1551:19| :skolemid |2478| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@15| |i#1@@5|))) ))) (and (< 0 (|Seq#Length| |bots#0@@15|)) (= (|Seq#Length| |bots#0@@15|) (BoundedPivotsLib.__default.NumBuckets |pivots#0@@23|)))) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList |bots#0@@15|) (LitInt Bounds.__default.MaxTotalBucketWeight))))) :qid |BucketFlushModelidfy.1546:22| :skolemid |2479| :pattern ( (|BucketFlushModel.__default.partialFlush#requires| $ly@@29 |top#0@@29| |pivots#0@@23| |bots#0@@15|)) )))
(assert (= (type StartFuel_BucketFlushModel._default.mergeToChildren) LayerTypeType))
(assert  (=> (<= 40 $FunctionContextHeight) (forall (($ly@@30 T@U) (|top#0@@30| T@U) (|pivots#0@@24| T@U) (|bots#0@@16| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@30) LayerTypeType) (= (type |top#0@@30|) DatatypeTypeType)) (= (type |pivots#0@@24|) (SeqType BoxType))) (= (type |bots#0@@16|) (SeqType BoxType))) (or (|BucketFlushModel.__default.partialFlush#canCall| |top#0@@30| |pivots#0@@24| |bots#0@@16|) (and (not (= 40 $FunctionContextHeight)) (and (and (and ($Is |top#0@@30| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@24| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |bots#0@@16| (TSeq Tclass.BucketsLib.Bucket))) (and (and (and (BucketsLib.__default.WFBucket |top#0@@30|) (forall ((|i#1@@6| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@6|) (< |i#1@@6| (|Seq#Length| |bots#0@@16|))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@16| |i#1@@6|)))) :qid |BucketFlushModelidfy.1551:19| :skolemid |2478| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@16| |i#1@@6|))) ))) (and (< 0 (|Seq#Length| |bots#0@@16|)) (= (|Seq#Length| |bots#0@@16|) (BoundedPivotsLib.__default.NumBuckets |pivots#0@@24|)))) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList |bots#0@@16|) (LitInt Bounds.__default.MaxTotalBucketWeight))))))) (and (and (and (and |Bounds.__default.MaxTotalBucketWeight#canCall| (|BucketWeights.__default.WeightBucketList#canCall| |bots#0@@16|)) (|BucketFlushModel.__default.mergeToChildren#canCall| |top#0@@30| |pivots#0@@24| |bots#0@@16| (- Bounds.__default.MaxTotalBucketWeight (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList |bots#0@@16|)))) (let ((|res#0| (BucketFlushModel.__default.mergeToChildren StartFuel_BucketFlushModel._default.mergeToChildren |top#0@@30| |pivots#0@@24| |bots#0@@16| (- Bounds.__default.MaxTotalBucketWeight (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList |bots#0@@16|))))) (and (BucketFlushModel.mergeResult.mergeResult_q |res#0|) (BucketFlushModel.mergeResult.mergeResult_q |res#0|)))) (= (BucketFlushModel.__default.partialFlush ($LS $ly@@30) |top#0@@30| |pivots#0@@24| |bots#0@@16|) (let ((|res#0@@0| (BucketFlushModel.__default.mergeToChildren StartFuel_BucketFlushModel._default.mergeToChildren |top#0@@30| |pivots#0@@24| |bots#0@@16| (- Bounds.__default.MaxTotalBucketWeight (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList |bots#0@@16|))))) (|#BucketFlushModel.partialFlushResult.partialFlushResult| (BucketFlushModel.mergeResult.top |res#0@@0|) (BucketFlushModel.mergeResult.bots |res#0@@0|)))))) :qid |BucketFlushModelidfy.1546:22| :skolemid |2480| :pattern ( (BucketFlushModel.__default.partialFlush ($LS $ly@@30) |top#0@@30| |pivots#0@@24| |bots#0@@16|)) ))))
(assert  (=> (<= 40 $FunctionContextHeight) (forall (($ly@@31 T@U) (|top#0@@31| T@U) (|pivots#0@@25| T@U) (|bots#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@31) LayerTypeType) (= (type |top#0@@31|) DatatypeTypeType)) (= (type |pivots#0@@25|) (SeqType BoxType))) (= (type |bots#0@@17|) (SeqType BoxType))) (or (|BucketFlushModel.__default.partialFlush#canCall| (Lit |top#0@@31|) (Lit |pivots#0@@25|) (Lit |bots#0@@17|)) (and (not (= 40 $FunctionContextHeight)) (and (and (and ($Is |top#0@@31| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@25| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |bots#0@@17| (TSeq Tclass.BucketsLib.Bucket))) (and (and (and (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucket (Lit |top#0@@31|))))) (forall ((|i#2@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@2|) (< |i#2@@2| (|Seq#Length| (Lit |bots#0@@17|)))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |bots#0@@17|) |i#2@@2|)))) :qid |BucketFlushModelidfy.1551:19| :skolemid |2481| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bots#0@@17| |i#2@@2|))) ))) (and (< 0 (|Seq#Length| (Lit |bots#0@@17|))) (= (|Seq#Length| (Lit |bots#0@@17|)) (LitInt (BoundedPivotsLib.__default.NumBuckets (Lit |pivots#0@@25|)))))) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (Lit |bots#0@@17|)) (LitInt Bounds.__default.MaxTotalBucketWeight))))))) (and (and (and (and |Bounds.__default.MaxTotalBucketWeight#canCall| (|BucketWeights.__default.WeightBucketList#canCall| (Lit |bots#0@@17|))) (|BucketFlushModel.__default.mergeToChildren#canCall| (Lit |top#0@@31|) (Lit |pivots#0@@25|) (Lit |bots#0@@17|) (- Bounds.__default.MaxTotalBucketWeight (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (Lit |bots#0@@17|))))) (let ((|res#1| (BucketFlushModel.__default.mergeToChildren StartFuel_BucketFlushModel._default.mergeToChildren (Lit |top#0@@31|) (Lit |pivots#0@@25|) (Lit |bots#0@@17|) (- Bounds.__default.MaxTotalBucketWeight (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (Lit |bots#0@@17|)))))) (and (BucketFlushModel.mergeResult.mergeResult_q |res#1|) (BucketFlushModel.mergeResult.mergeResult_q |res#1|)))) (= (BucketFlushModel.__default.partialFlush ($LS $ly@@31) (Lit |top#0@@31|) (Lit |pivots#0@@25|) (Lit |bots#0@@17|)) (let ((|res#1@@0| (BucketFlushModel.__default.mergeToChildren StartFuel_BucketFlushModel._default.mergeToChildren (Lit |top#0@@31|) (Lit |pivots#0@@25|) (Lit |bots#0@@17|) (- Bounds.__default.MaxTotalBucketWeight (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (Lit |bots#0@@17|)))))) (|#BucketFlushModel.partialFlushResult.partialFlushResult| (BucketFlushModel.mergeResult.top |res#1@@0|) (BucketFlushModel.mergeResult.bots |res#1@@0|)))))) :qid |BucketFlushModelidfy.1546:22| :weight 3 :skolemid |2482| :pattern ( (BucketFlushModel.__default.partialFlush ($LS $ly@@31) (Lit |top#0@@31|) (Lit |pivots#0@@25|) (Lit |bots#0@@17|))) ))))
(assert (= (type Tclass.SequencesLite.__default) TyType))
(assert (= (Tag Tclass.SequencesLite.__default) Tagclass.SequencesLite.__default))
(assert (= (TagFamily Tclass.SequencesLite.__default) tytagFamily$_default))
(assert (forall ((bx@@148 T@U) ) (!  (=> (and (= (type bx@@148) BoxType) ($IsBox bx@@148 Tclass.SequencesLite.__default)) (and (= ($Box ($Unbox refType bx@@148)) bx@@148) ($Is ($Unbox refType bx@@148) Tclass.SequencesLite.__default))) :qid |unknown.0:0| :skolemid |2649| :pattern ( ($IsBox bx@@148 Tclass.SequencesLite.__default)) )))
(assert (forall (($o@@11 T@U) ) (!  (=> (= (type $o@@11) refType) (= ($Is $o@@11 Tclass.SequencesLite.__default)  (or (= $o@@11 null) (= (dtype $o@@11) Tclass.SequencesLite.__default)))) :qid |unknown.0:0| :skolemid |2650| :pattern ( ($Is $o@@11 Tclass.SequencesLite.__default)) )))
(assert (forall (($o@@12 T@U) ($h@@70 T@U) ) (!  (=> (and (= (type $o@@12) refType) (= (type $h@@70) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@12 Tclass.SequencesLite.__default $h@@70)  (or (= $o@@12 null) (U_2_bool (MapType1Select (MapType0Select $h@@70 $o@@12) alloc))))) :qid |unknown.0:0| :skolemid |2651| :pattern ( ($IsAlloc $o@@12 Tclass.SequencesLite.__default $h@@70)) )))
(assert (forall ((arg0@@511 T@U) (arg1@@219 T@U) ) (! (= (type (SequencesLite.__default.Last arg0@@511 arg1@@219)) BoxType) :qid |funType:SequencesLite.__default.Last| :pattern ( (SequencesLite.__default.Last arg0@@511 arg1@@219)) )))
(assert  (=> true (forall ((SequencesLite._default.Last$E T@U) (|run#0| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E) TyType) (= (type |run#0|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E |run#0|) (and ($Is |run#0| (TSeq SequencesLite._default.Last$E)) (> (|Seq#Length| |run#0|) 0)))) ($IsBox (SequencesLite.__default.Last SequencesLite._default.Last$E |run#0|) SequencesLite._default.Last$E)) :qid |unknown.0:0| :skolemid |2652| :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E |run#0|)) ))))
(assert (forall ((SequencesLite._default.Last$E@@0 T@U) (|run#0@@0| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@0) TyType) (= (type |run#0@@0|) (SeqType BoxType))) ($Is |run#0@@0| (TSeq SequencesLite._default.Last$E@@0))) (= (|SequencesLite.__default.Last#requires| SequencesLite._default.Last$E@@0 |run#0@@0|) (> (|Seq#Length| |run#0@@0|) 0))) :qid |unknown.0:0| :skolemid |2653| :pattern ( (|SequencesLite.__default.Last#requires| SequencesLite._default.Last$E@@0 |run#0@@0|)) )))
(assert  (=> true (forall ((SequencesLite._default.Last$E@@1 T@U) (|run#0@@1| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@1) TyType) (= (type |run#0@@1|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E@@1 |run#0@@1|) (and ($Is |run#0@@1| (TSeq SequencesLite._default.Last$E@@1)) (> (|Seq#Length| |run#0@@1|) 0)))) (= (SequencesLite.__default.Last SequencesLite._default.Last$E@@1 |run#0@@1|) (|Seq#Index| |run#0@@1| (- (|Seq#Length| |run#0@@1|) 1)))) :qid |unknown.0:0| :skolemid |2654| :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E@@1 |run#0@@1|)) ))))
(assert  (=> true (forall ((SequencesLite._default.Last$E@@2 T@U) (|run#0@@2| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.Last$E@@2) TyType) (= (type |run#0@@2|) (SeqType BoxType))) (or (|SequencesLite.__default.Last#canCall| SequencesLite._default.Last$E@@2 (Lit |run#0@@2|)) (and ($Is |run#0@@2| (TSeq SequencesLite._default.Last$E@@2)) (> (|Seq#Length| (Lit |run#0@@2|)) 0)))) (= (SequencesLite.__default.Last SequencesLite._default.Last$E@@2 (Lit |run#0@@2|)) (|Seq#Index| (Lit |run#0@@2|) (- (|Seq#Length| (Lit |run#0@@2|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |2655| :pattern ( (SequencesLite.__default.Last SequencesLite._default.Last$E@@2 (Lit |run#0@@2|))) ))))
(assert (forall ((arg0@@512 T@U) (arg1@@220 T@U) ) (! (= (type (SequencesLite.__default.DropLast arg0@@512 arg1@@220)) (SeqType BoxType)) :qid |funType:SequencesLite.__default.DropLast| :pattern ( (SequencesLite.__default.DropLast arg0@@512 arg1@@220)) )))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E T@U) (|run#0@@3| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E) TyType) (= (type |run#0@@3|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E |run#0@@3|) (and ($Is |run#0@@3| (TSeq SequencesLite._default.DropLast$E)) (> (|Seq#Length| |run#0@@3|) 0)))) ($Is (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E |run#0@@3|) (TSeq SequencesLite._default.DropLast$E))) :qid |unknown.0:0| :skolemid |2656| :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E |run#0@@3|)) ))))
(assert (forall ((SequencesLite._default.DropLast$E@@0 T@U) (|run#0@@4| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@0) TyType) (= (type |run#0@@4|) (SeqType BoxType))) ($Is |run#0@@4| (TSeq SequencesLite._default.DropLast$E@@0))) (= (|SequencesLite.__default.DropLast#requires| SequencesLite._default.DropLast$E@@0 |run#0@@4|) (> (|Seq#Length| |run#0@@4|) 0))) :qid |unknown.0:0| :skolemid |2657| :pattern ( (|SequencesLite.__default.DropLast#requires| SequencesLite._default.DropLast$E@@0 |run#0@@4|)) )))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E@@1 T@U) (|run#0@@5| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@1) TyType) (= (type |run#0@@5|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E@@1 |run#0@@5|) (and ($Is |run#0@@5| (TSeq SequencesLite._default.DropLast$E@@1)) (> (|Seq#Length| |run#0@@5|) 0)))) (= (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@1 |run#0@@5|) (|Seq#Take| |run#0@@5| (- (|Seq#Length| |run#0@@5|) 1)))) :qid |unknown.0:0| :skolemid |2658| :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@1 |run#0@@5|)) ))))
(assert  (=> true (forall ((SequencesLite._default.DropLast$E@@2 T@U) (|run#0@@6| T@U) ) (!  (=> (and (and (= (type SequencesLite._default.DropLast$E@@2) TyType) (= (type |run#0@@6|) (SeqType BoxType))) (or (|SequencesLite.__default.DropLast#canCall| SequencesLite._default.DropLast$E@@2 (Lit |run#0@@6|)) (and ($Is |run#0@@6| (TSeq SequencesLite._default.DropLast$E@@2)) (> (|Seq#Length| (Lit |run#0@@6|)) 0)))) (= (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@2 (Lit |run#0@@6|)) (|Seq#Take| (Lit |run#0@@6|) (- (|Seq#Length| (Lit |run#0@@6|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |2659| :pattern ( (SequencesLite.__default.DropLast SequencesLite._default.DropLast$E@@2 (Lit |run#0@@6|))) ))))
(assert (= (type |#Options.Option.None|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#Options.Option.None|) |##Options.Option.None|))
(assert (forall ((d@@42 T@U) ) (!  (=> (= (type d@@42) DatatypeTypeType) (= (Options.Option.None_q d@@42) (= (DatatypeCtorId d@@42) |##Options.Option.None|))) :qid |unknown.0:0| :skolemid |2660| :pattern ( (Options.Option.None_q d@@42)) )))
(assert (forall ((d@@43 T@U) ) (!  (=> (and (= (type d@@43) DatatypeTypeType) (Options.Option.None_q d@@43)) (= d@@43 |#Options.Option.None|)) :qid |unknown.0:0| :skolemid |2661| :pattern ( (Options.Option.None_q d@@43)) )))
(assert (forall ((arg0@@513 T@U) ) (! (= (type (Tclass.Options.Option arg0@@513)) TyType) :qid |funType:Tclass.Options.Option| :pattern ( (Tclass.Options.Option arg0@@513)) )))
(assert (forall ((Options.Option$V T@U) ) (!  (=> (= (type Options.Option$V) TyType) (and (= (Tag (Tclass.Options.Option Options.Option$V)) Tagclass.Options.Option) (= (TagFamily (Tclass.Options.Option Options.Option$V)) tytagFamily$Option))) :qid |unknown.0:0| :skolemid |2662| :pattern ( (Tclass.Options.Option Options.Option$V)) )))
(assert (forall ((arg0@@514 T@U) ) (! (= (type (Tclass.Options.Option_0 arg0@@514)) TyType) :qid |funType:Tclass.Options.Option_0| :pattern ( (Tclass.Options.Option_0 arg0@@514)) )))
(assert (forall ((Options.Option$V@@0 T@U) ) (!  (=> (= (type Options.Option$V@@0) TyType) (= (Tclass.Options.Option_0 (Tclass.Options.Option Options.Option$V@@0)) Options.Option$V@@0)) :qid |unknown.0:0| :skolemid |2663| :pattern ( (Tclass.Options.Option Options.Option$V@@0)) )))
(assert (forall ((Options.Option$V@@1 T@U) (bx@@149 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@1) TyType) (= (type bx@@149) BoxType)) ($IsBox bx@@149 (Tclass.Options.Option Options.Option$V@@1))) (and (= ($Box ($Unbox DatatypeTypeType bx@@149)) bx@@149) ($Is ($Unbox DatatypeTypeType bx@@149) (Tclass.Options.Option Options.Option$V@@1)))) :qid |unknown.0:0| :skolemid |2664| :pattern ( ($IsBox bx@@149 (Tclass.Options.Option Options.Option$V@@1))) )))
(assert (forall ((Options.Option$V@@2 T@U) ) (!  (=> (= (type Options.Option$V@@2) TyType) ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) :qid |unknown.0:0| :skolemid |2665| :pattern ( ($Is |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@2))) )))
(assert (forall ((Options.Option$V@@3 T@U) ($h@@71 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@3) TyType) (= (type $h@@71) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@71)) ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@71)) :qid |unknown.0:0| :skolemid |2666| :pattern ( ($IsAlloc |#Options.Option.None| (Tclass.Options.Option Options.Option$V@@3) $h@@71)) )))
(assert (= |#Options.Option.None| (Lit |#Options.Option.None|)))
(assert (forall ((arg0@@515 T@U) ) (! (= (type (|#Options.Option.Some| arg0@@515)) DatatypeTypeType) :qid |funType:#Options.Option.Some| :pattern ( (|#Options.Option.Some| arg0@@515)) )))
(assert (forall ((|a#5#0#0@@1| T@U) ) (!  (=> (= (type |a#5#0#0@@1|) BoxType) (= (DatatypeCtorId (|#Options.Option.Some| |a#5#0#0@@1|)) |##Options.Option.Some|)) :qid |Optionsdfy.5:36| :skolemid |2667| :pattern ( (|#Options.Option.Some| |a#5#0#0@@1|)) )))
(assert (forall ((d@@44 T@U) ) (!  (=> (= (type d@@44) DatatypeTypeType) (= (Options.Option.Some_q d@@44) (= (DatatypeCtorId d@@44) |##Options.Option.Some|))) :qid |unknown.0:0| :skolemid |2668| :pattern ( (Options.Option.Some_q d@@44)) )))
(assert (forall ((d@@45 T@U) ) (!  (=> (and (= (type d@@45) DatatypeTypeType) (Options.Option.Some_q d@@45)) (exists ((|a#6#0#0@@1| T@U) ) (!  (and (= (type |a#6#0#0@@1|) BoxType) (= d@@45 (|#Options.Option.Some| |a#6#0#0@@1|))) :qid |Optionsdfy.5:36| :skolemid |2669| :no-pattern (type |a#6#0#0@@1|) :no-pattern (U_2_int |a#6#0#0@@1|) :no-pattern (U_2_bool |a#6#0#0@@1|) ))) :qid |unknown.0:0| :skolemid |2670| :pattern ( (Options.Option.Some_q d@@45)) )))
(assert (forall ((Options.Option$V@@4 T@U) (|a#7#0#0@@1| T@U) ) (!  (=> (and (= (type Options.Option$V@@4) TyType) (= (type |a#7#0#0@@1|) BoxType)) (= ($Is (|#Options.Option.Some| |a#7#0#0@@1|) (Tclass.Options.Option Options.Option$V@@4)) ($IsBox |a#7#0#0@@1| Options.Option$V@@4))) :qid |unknown.0:0| :skolemid |2671| :pattern ( ($Is (|#Options.Option.Some| |a#7#0#0@@1|) (Tclass.Options.Option Options.Option$V@@4))) )))
(assert (forall ((Options.Option$V@@5 T@U) (|a#8#0#0@@1| T@U) ($h@@72 T@U) ) (!  (=> (and (and (and (= (type Options.Option$V@@5) TyType) (= (type |a#8#0#0@@1|) BoxType)) (= (type $h@@72) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@72)) (= ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@1|) (Tclass.Options.Option Options.Option$V@@5) $h@@72) ($IsAllocBox |a#8#0#0@@1| Options.Option$V@@5 $h@@72))) :qid |unknown.0:0| :skolemid |2672| :pattern ( ($IsAlloc (|#Options.Option.Some| |a#8#0#0@@1|) (Tclass.Options.Option Options.Option$V@@5) $h@@72)) )))
(assert (forall ((arg0@@516 T@U) ) (! (= (type (Options.Option.value arg0@@516)) BoxType) :qid |funType:Options.Option.value| :pattern ( (Options.Option.value arg0@@516)) )))
(assert (forall ((d@@46 T@U) (Options.Option$V@@6 T@U) ($h@@73 T@U) ) (!  (=> (and (and (and (= (type d@@46) DatatypeTypeType) (= (type Options.Option$V@@6) TyType)) (= (type $h@@73) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@73) (and (Options.Option.Some_q d@@46) ($IsAlloc d@@46 (Tclass.Options.Option Options.Option$V@@6) $h@@73)))) ($IsAllocBox (Options.Option.value d@@46) Options.Option$V@@6 $h@@73)) :qid |unknown.0:0| :skolemid |2673| :pattern ( ($IsAllocBox (Options.Option.value d@@46) Options.Option$V@@6 $h@@73)) )))
(assert (forall ((|a#9#0#0@@0| T@U) ) (!  (=> (= (type |a#9#0#0@@0|) BoxType) (= (|#Options.Option.Some| (Lit |a#9#0#0@@0|)) (Lit (|#Options.Option.Some| |a#9#0#0@@0|)))) :qid |Optionsdfy.5:36| :skolemid |2674| :pattern ( (|#Options.Option.Some| (Lit |a#9#0#0@@0|))) )))
(assert (forall ((|a#10#0#0@@0| T@U) ) (!  (=> (= (type |a#10#0#0@@0|) BoxType) (= (Options.Option.value (|#Options.Option.Some| |a#10#0#0@@0|)) |a#10#0#0@@0|)) :qid |Optionsdfy.5:36| :skolemid |2675| :pattern ( (|#Options.Option.Some| |a#10#0#0@@0|)) )))
(assert (forall ((|a#11#0#0@@0| T@U) ) (!  (=> (= (type |a#11#0#0@@0|) BoxType) (< (BoxRank |a#11#0#0@@0|) (DtRank (|#Options.Option.Some| |a#11#0#0@@0|)))) :qid |Optionsdfy.5:36| :skolemid |2676| :pattern ( (|#Options.Option.Some| |a#11#0#0@@0|)) )))
(assert (forall ((d@@47 T@U) ) (!  (=> (and (= (type d@@47) DatatypeTypeType) (|$IsA#Options.Option| d@@47)) (or (Options.Option.None_q d@@47) (Options.Option.Some_q d@@47))) :qid |unknown.0:0| :skolemid |2677| :pattern ( (|$IsA#Options.Option| d@@47)) )))
(assert (forall ((Options.Option$V@@7 T@U) (d@@48 T@U) ) (!  (=> (and (and (= (type Options.Option$V@@7) TyType) (= (type d@@48) DatatypeTypeType)) ($Is d@@48 (Tclass.Options.Option Options.Option$V@@7))) (or (Options.Option.None_q d@@48) (Options.Option.Some_q d@@48))) :qid |unknown.0:0| :skolemid |2678| :pattern ( (Options.Option.Some_q d@@48) ($Is d@@48 (Tclass.Options.Option Options.Option$V@@7))) :pattern ( (Options.Option.None_q d@@48) ($Is d@@48 (Tclass.Options.Option Options.Option$V@@7))) )))
(assert (forall ((a@@143 T@U) (b@@74 T@U) ) (!  (=> (and (and (= (type a@@143) DatatypeTypeType) (= (type b@@74) DatatypeTypeType)) (and (Options.Option.None_q a@@143) (Options.Option.None_q b@@74))) (= (|Options.Option#Equal| a@@143 b@@74) true)) :qid |unknown.0:0| :skolemid |2679| :pattern ( (|Options.Option#Equal| a@@143 b@@74) (Options.Option.None_q a@@143)) :pattern ( (|Options.Option#Equal| a@@143 b@@74) (Options.Option.None_q b@@74)) )))
(assert (forall ((a@@144 T@U) (b@@75 T@U) ) (!  (=> (and (and (= (type a@@144) DatatypeTypeType) (= (type b@@75) DatatypeTypeType)) (and (Options.Option.Some_q a@@144) (Options.Option.Some_q b@@75))) (= (|Options.Option#Equal| a@@144 b@@75) (= (Options.Option.value a@@144) (Options.Option.value b@@75)))) :qid |unknown.0:0| :skolemid |2680| :pattern ( (|Options.Option#Equal| a@@144 b@@75) (Options.Option.Some_q a@@144)) :pattern ( (|Options.Option#Equal| a@@144 b@@75) (Options.Option.Some_q b@@75)) )))
(assert (forall ((a@@145 T@U) (b@@76 T@U) ) (!  (=> (and (= (type a@@145) DatatypeTypeType) (= (type b@@76) DatatypeTypeType)) (= (|Options.Option#Equal| a@@145 b@@76) (= a@@145 b@@76))) :qid |unknown.0:0| :skolemid |2681| :pattern ( (|Options.Option#Equal| a@@145 b@@76)) )))
(assert (= (type Tclass.Options.__default) TyType))
(assert (= (Tag Tclass.Options.__default) Tagclass.Options.__default))
(assert (= (TagFamily Tclass.Options.__default) tytagFamily$_default))
(assert (forall ((bx@@150 T@U) ) (!  (=> (and (= (type bx@@150) BoxType) ($IsBox bx@@150 Tclass.Options.__default)) (and (= ($Box ($Unbox refType bx@@150)) bx@@150) ($Is ($Unbox refType bx@@150) Tclass.Options.__default))) :qid |unknown.0:0| :skolemid |2682| :pattern ( ($IsBox bx@@150 Tclass.Options.__default)) )))
(assert (forall (($o@@13 T@U) ) (!  (=> (= (type $o@@13) refType) (= ($Is $o@@13 Tclass.Options.__default)  (or (= $o@@13 null) (= (dtype $o@@13) Tclass.Options.__default)))) :qid |unknown.0:0| :skolemid |2683| :pattern ( ($Is $o@@13 Tclass.Options.__default)) )))
(assert (forall (($o@@14 T@U) ($h@@74 T@U) ) (!  (=> (and (= (type $o@@14) refType) (= (type $h@@74) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@14 Tclass.Options.__default $h@@74)  (or (= $o@@14 null) (U_2_bool (MapType1Select (MapType0Select $h@@74 $o@@14) alloc))))) :qid |unknown.0:0| :skolemid |2684| :pattern ( ($IsAlloc $o@@14 Tclass.Options.__default $h@@74)) )))
(assert (forall ((arg0@@517 T@U) (arg1@@221 T@U) (arg2@@147 T@U) (arg3@@106 T@U) (arg4@@85 T@U) ) (! (= (type (Options.__default.MapOption arg0@@517 arg1@@221 arg2@@147 arg3@@106 arg4@@85)) DatatypeTypeType) :qid |funType:Options.__default.MapOption| :pattern ( (Options.__default.MapOption arg0@@517 arg1@@221 arg2@@147 arg3@@106 arg4@@85)) )))
(assert (forall ((Options._default.MapOption$V0 T@U) (Options._default.MapOption$V1 T@U) ($h0 T@U) ($h1 T@U) (|opt#0| T@U) (|f#0@@75| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.MapOption$V0) TyType) (= (type Options._default.MapOption$V1) TyType)) (= (type $h0) (MapType0Type refType MapType1Type))) (= (type $h1) (MapType0Type refType MapType1Type))) (= (type |opt#0|) DatatypeTypeType)) (= (type |f#0@@75|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0) ($IsGoodHeap $h1)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@75|) (and ($Is |opt#0| (Tclass.Options.Option Options._default.MapOption$V0)) ($Is |f#0@@75| (Tclass._System.___hFunc1 Options._default.MapOption$V0 Options._default.MapOption$V1))))) (and ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1)))) (forall (($o@@15 T@U) ($f T@U) ) (! (let ((alpha@@6 (FieldTypeInv0 (type $f)))) (=> (and (and (= (type $o@@15) refType) (= (type $f) (FieldType alpha@@6))) (and (not (= $o@@15 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0|) (Reads1 Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |f#0@@75| (Options.Option.value |opt#0|)) (|Set#Empty| BoxType)) ($Box $o@@15))))) (= (MapType1Select (MapType0Select $h0 $o@@15) $f) (MapType1Select (MapType0Select $h1 $o@@15) $f)))) :qid |unknown.0:0| :skolemid |2685| :no-pattern (type $o@@15) :no-pattern (type $f) :no-pattern (U_2_int $o@@15) :no-pattern (U_2_bool $o@@15) :no-pattern (U_2_int $f) :no-pattern (U_2_bool $f) ))) (= (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h0 |opt#0| |f#0@@75|) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@75|))) :qid |unknown.0:0| :skolemid |2686| :pattern ( ($IsHeapAnchor $h0) ($HeapSucc $h0 $h1) (Options.__default.MapOption Options._default.MapOption$V0 Options._default.MapOption$V1 $h1 |opt#0| |f#0@@75|)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@0 T@U) (Options._default.MapOption$V1@@0 T@U) ($Heap T@U) (|opt#0@@0| T@U) (|f#0@@76| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@0) TyType) (= (type Options._default.MapOption$V1@@0) TyType)) (= (type $Heap) (MapType0Type refType MapType1Type))) (= (type |opt#0@@0|) DatatypeTypeType)) (= (type |f#0@@76|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@76|) (and (and (and ($IsGoodHeap $Heap) ($Is |opt#0@@0| (Tclass.Options.Option Options._default.MapOption$V0@@0))) ($Is |f#0@@76| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0))) (=> (Options.Option.Some_q |opt#0@@0|) (Requires1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |f#0@@76| (Options.Option.value |opt#0@@0|)))))) (and (and (= (Options.Option.Some_q |opt#0@@0|) (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@76|))) (=> (Options.Option.Some_q (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@76|)) (= (Options.Option.value (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@76|)) (Apply1 Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |f#0@@76| (Options.Option.value |opt#0@@0|))))) ($Is (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@76|) (Tclass.Options.Option Options._default.MapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |2687| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@0 Options._default.MapOption$V1@@0 $Heap |opt#0@@0| |f#0@@76|)) ))))
(assert (forall ((Options._default.MapOption$V0@@1 T@U) (Options._default.MapOption$V1@@1 T@U) ($Heap@@0 T@U) (|opt#0@@1| T@U) (|f#0@@77| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@1) TyType) (= (type Options._default.MapOption$V1@@1) TyType)) (= (type $Heap@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0@@1|) DatatypeTypeType)) (= (type |f#0@@77|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@0) ($Is |opt#0@@1| (Tclass.Options.Option Options._default.MapOption$V0@@1))) ($Is |f#0@@77| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1)))) (= (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |opt#0@@1| |f#0@@77|)  (=> (Options.Option.Some_q |opt#0@@1|) (Requires1 Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |f#0@@77| (Options.Option.value |opt#0@@1|))))) :qid |unknown.0:0| :skolemid |2688| :pattern ( (|Options.__default.MapOption#requires| Options._default.MapOption$V0@@1 Options._default.MapOption$V1@@1 $Heap@@0 |opt#0@@1| |f#0@@77|) ($IsGoodHeap $Heap@@0)) )))
(assert  (=> true (forall ((Options._default.MapOption$V0@@2 T@U) (Options._default.MapOption$V1@@2 T@U) ($Heap@@1 T@U) (|opt#0@@2| T@U) (|f#0@@78| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.MapOption$V0@@2) TyType) (= (type Options._default.MapOption$V1@@2) TyType)) (= (type $Heap@@1) (MapType0Type refType MapType1Type))) (= (type |opt#0@@2|) DatatypeTypeType)) (= (type |f#0@@78|) HandleTypeType)) (or (|Options.__default.MapOption#canCall| Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@78|) (and (and (and ($IsGoodHeap $Heap@@1) ($Is |opt#0@@2| (Tclass.Options.Option Options._default.MapOption$V0@@2))) ($Is |f#0@@78| (Tclass._System.___hFunc1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2))) (=> (Options.Option.Some_q |opt#0@@2|) (Requires1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |f#0@@78| (Options.Option.value |opt#0@@2|)))))) (= (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@78|) (ite (Options.Option.None_q |opt#0@@2|) |#Options.Option.None| (let ((|v#0| (Options.Option.value |opt#0@@2|))) (|#Options.Option.Some| (Apply1 Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |f#0@@78| |v#0|)))))) :qid |unknown.0:0| :skolemid |2689| :pattern ( (Options.__default.MapOption Options._default.MapOption$V0@@2 Options._default.MapOption$V1@@2 $Heap@@1 |opt#0@@2| |f#0@@78|) ($IsGoodHeap $Heap@@1)) ))))
(assert (forall ((arg0@@518 T@U) (arg1@@222 T@U) (arg2@@148 T@U) (arg3@@107 T@U) (arg4@@86 T@U) ) (! (= (type (Options.__default.FlatMapOption arg0@@518 arg1@@222 arg2@@148 arg3@@107 arg4@@86)) DatatypeTypeType) :qid |funType:Options.__default.FlatMapOption| :pattern ( (Options.__default.FlatMapOption arg0@@518 arg1@@222 arg2@@148 arg3@@107 arg4@@86)) )))
(assert (forall ((Options._default.FlatMapOption$V0 T@U) (Options._default.FlatMapOption$V1 T@U) ($h0@@0 T@U) ($h1@@0 T@U) (|opt#0@@3| T@U) (|f#0@@79| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Options._default.FlatMapOption$V0) TyType) (= (type Options._default.FlatMapOption$V1) TyType)) (= (type $h0@@0) (MapType0Type refType MapType1Type))) (= (type $h1@@0) (MapType0Type refType MapType1Type))) (= (type |opt#0@@3|) DatatypeTypeType)) (= (type |f#0@@79|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@0) ($IsGoodHeap $h1@@0)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@79|) (and ($Is |opt#0@@3| (Tclass.Options.Option Options._default.FlatMapOption$V0)) ($Is |f#0@@79| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1)))))) (and ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0)))) (forall (($o@@16 T@U) ($f@@0 T@U) ) (! (let ((alpha@@7 (FieldTypeInv0 (type $f@@0)))) (=> (and (and (= (type $o@@16) refType) (= (type $f@@0) (FieldType alpha@@7))) (and (not (= $o@@16 null)) (U_2_bool (MapType0Select (ite (Options.Option.Some_q |opt#0@@3|) (Reads1 Options._default.FlatMapOption$V0 (Tclass.Options.Option Options._default.FlatMapOption$V1) $h0@@0 |f#0@@79| (Options.Option.value |opt#0@@3|)) (|Set#Empty| BoxType)) ($Box $o@@16))))) (= (MapType1Select (MapType0Select $h0@@0 $o@@16) $f@@0) (MapType1Select (MapType0Select $h1@@0 $o@@16) $f@@0)))) :qid |unknown.0:0| :skolemid |2690| :no-pattern (type $o@@16) :no-pattern (type $f@@0) :no-pattern (U_2_int $o@@16) :no-pattern (U_2_bool $o@@16) :no-pattern (U_2_int $f@@0) :no-pattern (U_2_bool $f@@0) ))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h0@@0 |opt#0@@3| |f#0@@79|) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@79|))) :qid |unknown.0:0| :skolemid |2691| :pattern ( ($IsHeapAnchor $h0@@0) ($HeapSucc $h0@@0 $h1@@0) (Options.__default.FlatMapOption Options._default.FlatMapOption$V0 Options._default.FlatMapOption$V1 $h1@@0 |opt#0@@3| |f#0@@79|)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@0 T@U) (Options._default.FlatMapOption$V1@@0 T@U) ($Heap@@2 T@U) (|opt#0@@4| T@U) (|f#0@@80| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@0) TyType) (= (type Options._default.FlatMapOption$V1@@0) TyType)) (= (type $Heap@@2) (MapType0Type refType MapType1Type))) (= (type |opt#0@@4|) DatatypeTypeType)) (= (type |f#0@@80|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@80|) (and (and (and ($IsGoodHeap $Heap@@2) ($Is |opt#0@@4| (Tclass.Options.Option Options._default.FlatMapOption$V0@@0))) ($Is |f#0@@80| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) (=> (Options.Option.Some_q |opt#0@@4|) (Requires1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@80| (Options.Option.value |opt#0@@4|)))))) (and (and (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@80| (Options.Option.value |opt#0@@4|))))) (Options.Option.Some_q (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@80|))) (=> (and (Options.Option.Some_q |opt#0@@4|) (Options.Option.Some_q ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@80| (Options.Option.value |opt#0@@4|))))) (= (Options.Option.value (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@80|)) (Options.Option.value ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@0 (Tclass.Options.Option Options._default.FlatMapOption$V1@@0) $Heap@@2 |f#0@@80| (Options.Option.value |opt#0@@4|))))))) ($Is (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@80|) (Tclass.Options.Option Options._default.FlatMapOption$V1@@0)))) :qid |unknown.0:0| :skolemid |2692| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@0 Options._default.FlatMapOption$V1@@0 $Heap@@2 |opt#0@@4| |f#0@@80|)) ))))
(assert (forall ((Options._default.FlatMapOption$V0@@1 T@U) (Options._default.FlatMapOption$V1@@1 T@U) ($Heap@@3 T@U) (|opt#0@@5| T@U) (|f#0@@81| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@1) TyType) (= (type Options._default.FlatMapOption$V1@@1) TyType)) (= (type $Heap@@3) (MapType0Type refType MapType1Type))) (= (type |opt#0@@5|) DatatypeTypeType)) (= (type |f#0@@81|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@3) ($Is |opt#0@@5| (Tclass.Options.Option Options._default.FlatMapOption$V0@@1))) ($Is |f#0@@81| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1))))) (= (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@3 |opt#0@@5| |f#0@@81|)  (=> (Options.Option.Some_q |opt#0@@5|) (Requires1 Options._default.FlatMapOption$V0@@1 (Tclass.Options.Option Options._default.FlatMapOption$V1@@1) $Heap@@3 |f#0@@81| (Options.Option.value |opt#0@@5|))))) :qid |unknown.0:0| :skolemid |2693| :pattern ( (|Options.__default.FlatMapOption#requires| Options._default.FlatMapOption$V0@@1 Options._default.FlatMapOption$V1@@1 $Heap@@3 |opt#0@@5| |f#0@@81|) ($IsGoodHeap $Heap@@3)) )))
(assert  (=> true (forall ((Options._default.FlatMapOption$V0@@2 T@U) (Options._default.FlatMapOption$V1@@2 T@U) ($Heap@@4 T@U) (|opt#0@@6| T@U) (|f#0@@82| T@U) ) (!  (=> (and (and (and (and (and (= (type Options._default.FlatMapOption$V0@@2) TyType) (= (type Options._default.FlatMapOption$V1@@2) TyType)) (= (type $Heap@@4) (MapType0Type refType MapType1Type))) (= (type |opt#0@@6|) DatatypeTypeType)) (= (type |f#0@@82|) HandleTypeType)) (or (|Options.__default.FlatMapOption#canCall| Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@82|) (and (and (and ($IsGoodHeap $Heap@@4) ($Is |opt#0@@6| (Tclass.Options.Option Options._default.FlatMapOption$V0@@2))) ($Is |f#0@@82| (Tclass._System.___hFunc1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2)))) (=> (Options.Option.Some_q |opt#0@@6|) (Requires1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@4 |f#0@@82| (Options.Option.value |opt#0@@6|)))))) (= (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@82|) (ite (Options.Option.None_q |opt#0@@6|) |#Options.Option.None| (let ((|v#0@@0| (Options.Option.value |opt#0@@6|))) ($Unbox DatatypeTypeType (Apply1 Options._default.FlatMapOption$V0@@2 (Tclass.Options.Option Options._default.FlatMapOption$V1@@2) $Heap@@4 |f#0@@82| |v#0@@0|)))))) :qid |unknown.0:0| :skolemid |2694| :pattern ( (Options.__default.FlatMapOption Options._default.FlatMapOption$V0@@2 Options._default.FlatMapOption$V1@@2 $Heap@@4 |opt#0@@6| |f#0@@82|) ($IsGoodHeap $Heap@@4)) ))))
(assert (= (type Tclass.NativeTypes.sbyte) TyType))
(assert (= (Tag Tclass.NativeTypes.sbyte) Tagclass.NativeTypes.sbyte))
(assert (= (TagFamily Tclass.NativeTypes.sbyte) tytagFamily$sbyte))
(assert (forall ((bx@@151 T@U) ) (!  (=> (and (= (type bx@@151) BoxType) ($IsBox bx@@151 Tclass.NativeTypes.sbyte)) (and (= ($Box ($Unbox intType bx@@151)) bx@@151) ($Is ($Unbox intType bx@@151) Tclass.NativeTypes.sbyte))) :qid |unknown.0:0| :skolemid |2695| :pattern ( ($IsBox bx@@151 Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@12| T@U) ) (!  (=> (= (type |i#0@@12|) intType) (= ($Is |i#0@@12| Tclass.NativeTypes.sbyte)  (and (<= (LitInt (- 0 128)) (U_2_int |i#0@@12|)) (< (U_2_int |i#0@@12|) 128)))) :qid |unknown.0:0| :skolemid |2696| :pattern ( ($Is |i#0@@12| Tclass.NativeTypes.sbyte)) )))
(assert (forall ((|i#0@@13| T@U) ($h@@75 T@U) ) (!  (=> (and (= (type |i#0@@13|) intType) (= (type $h@@75) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@13| Tclass.NativeTypes.sbyte $h@@75)) :qid |unknown.0:0| :skolemid |2697| :pattern ( ($IsAlloc |i#0@@13| Tclass.NativeTypes.sbyte $h@@75)) )))
(assert (forall ((|i#0@@14| T@U) ) (!  (=> (= (type |i#0@@14|) intType) (= ($Is |i#0@@14| Tclass.NativeTypes.byte)  (and (<= (LitInt 0) (U_2_int |i#0@@14|)) (< (U_2_int |i#0@@14|) 256)))) :qid |unknown.0:0| :skolemid |2698| :pattern ( ($Is |i#0@@14| Tclass.NativeTypes.byte)) )))
(assert (forall ((|i#0@@15| T@U) ($h@@76 T@U) ) (!  (=> (and (= (type |i#0@@15|) intType) (= (type $h@@76) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@15| Tclass.NativeTypes.byte $h@@76)) :qid |unknown.0:0| :skolemid |2699| :pattern ( ($IsAlloc |i#0@@15| Tclass.NativeTypes.byte $h@@76)) )))
(assert (= (type Tclass.NativeTypes.int16) TyType))
(assert (= (Tag Tclass.NativeTypes.int16) Tagclass.NativeTypes.int16))
(assert (= (TagFamily Tclass.NativeTypes.int16) tytagFamily$int16))
(assert (forall ((bx@@152 T@U) ) (!  (=> (and (= (type bx@@152) BoxType) ($IsBox bx@@152 Tclass.NativeTypes.int16)) (and (= ($Box ($Unbox intType bx@@152)) bx@@152) ($Is ($Unbox intType bx@@152) Tclass.NativeTypes.int16))) :qid |unknown.0:0| :skolemid |2700| :pattern ( ($IsBox bx@@152 Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@16| T@U) ) (!  (=> (= (type |i#0@@16|) intType) (= ($Is |i#0@@16| Tclass.NativeTypes.int16)  (and (<= (LitInt (- 0 32768)) (U_2_int |i#0@@16|)) (< (U_2_int |i#0@@16|) 32768)))) :qid |unknown.0:0| :skolemid |2701| :pattern ( ($Is |i#0@@16| Tclass.NativeTypes.int16)) )))
(assert (forall ((|i#0@@17| T@U) ($h@@77 T@U) ) (!  (=> (and (= (type |i#0@@17|) intType) (= (type $h@@77) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@17| Tclass.NativeTypes.int16 $h@@77)) :qid |unknown.0:0| :skolemid |2702| :pattern ( ($IsAlloc |i#0@@17| Tclass.NativeTypes.int16 $h@@77)) )))
(assert (= (type Tclass.NativeTypes.uint16) TyType))
(assert (= (Tag Tclass.NativeTypes.uint16) Tagclass.NativeTypes.uint16))
(assert (= (TagFamily Tclass.NativeTypes.uint16) tytagFamily$uint16))
(assert (forall ((bx@@153 T@U) ) (!  (=> (and (= (type bx@@153) BoxType) ($IsBox bx@@153 Tclass.NativeTypes.uint16)) (and (= ($Box ($Unbox intType bx@@153)) bx@@153) ($Is ($Unbox intType bx@@153) Tclass.NativeTypes.uint16))) :qid |unknown.0:0| :skolemid |2703| :pattern ( ($IsBox bx@@153 Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@18| T@U) ) (!  (=> (= (type |i#0@@18|) intType) (= ($Is |i#0@@18| Tclass.NativeTypes.uint16)  (and (<= (LitInt 0) (U_2_int |i#0@@18|)) (< (U_2_int |i#0@@18|) 65536)))) :qid |unknown.0:0| :skolemid |2704| :pattern ( ($Is |i#0@@18| Tclass.NativeTypes.uint16)) )))
(assert (forall ((|i#0@@19| T@U) ($h@@78 T@U) ) (!  (=> (and (= (type |i#0@@19|) intType) (= (type $h@@78) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@19| Tclass.NativeTypes.uint16 $h@@78)) :qid |unknown.0:0| :skolemid |2705| :pattern ( ($IsAlloc |i#0@@19| Tclass.NativeTypes.uint16 $h@@78)) )))
(assert (= (type Tclass.NativeTypes.int32) TyType))
(assert (= (Tag Tclass.NativeTypes.int32) Tagclass.NativeTypes.int32))
(assert (= (TagFamily Tclass.NativeTypes.int32) tytagFamily$int32))
(assert (forall ((bx@@154 T@U) ) (!  (=> (and (= (type bx@@154) BoxType) ($IsBox bx@@154 Tclass.NativeTypes.int32)) (and (= ($Box ($Unbox intType bx@@154)) bx@@154) ($Is ($Unbox intType bx@@154) Tclass.NativeTypes.int32))) :qid |unknown.0:0| :skolemid |2706| :pattern ( ($IsBox bx@@154 Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@20| T@U) ) (!  (=> (= (type |i#0@@20|) intType) (= ($Is |i#0@@20| Tclass.NativeTypes.int32)  (and (<= (LitInt (- 0 2147483648)) (U_2_int |i#0@@20|)) (< (U_2_int |i#0@@20|) 2147483648)))) :qid |unknown.0:0| :skolemid |2707| :pattern ( ($Is |i#0@@20| Tclass.NativeTypes.int32)) )))
(assert (forall ((|i#0@@21| T@U) ($h@@79 T@U) ) (!  (=> (and (= (type |i#0@@21|) intType) (= (type $h@@79) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@21| Tclass.NativeTypes.int32 $h@@79)) :qid |unknown.0:0| :skolemid |2708| :pattern ( ($IsAlloc |i#0@@21| Tclass.NativeTypes.int32 $h@@79)) )))
(assert (= (type Tclass.NativeTypes.uint32) TyType))
(assert (= (Tag Tclass.NativeTypes.uint32) Tagclass.NativeTypes.uint32))
(assert (= (TagFamily Tclass.NativeTypes.uint32) tytagFamily$uint32))
(assert (forall ((bx@@155 T@U) ) (!  (=> (and (= (type bx@@155) BoxType) ($IsBox bx@@155 Tclass.NativeTypes.uint32)) (and (= ($Box ($Unbox intType bx@@155)) bx@@155) ($Is ($Unbox intType bx@@155) Tclass.NativeTypes.uint32))) :qid |unknown.0:0| :skolemid |2709| :pattern ( ($IsBox bx@@155 Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@22| T@U) ) (!  (=> (= (type |i#0@@22|) intType) (= ($Is |i#0@@22| Tclass.NativeTypes.uint32)  (and (<= (LitInt 0) (U_2_int |i#0@@22|)) (< (U_2_int |i#0@@22|) 4294967296)))) :qid |unknown.0:0| :skolemid |2710| :pattern ( ($Is |i#0@@22| Tclass.NativeTypes.uint32)) )))
(assert (forall ((|i#0@@23| T@U) ($h@@80 T@U) ) (!  (=> (and (= (type |i#0@@23|) intType) (= (type $h@@80) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@23| Tclass.NativeTypes.uint32 $h@@80)) :qid |unknown.0:0| :skolemid |2711| :pattern ( ($IsAlloc |i#0@@23| Tclass.NativeTypes.uint32 $h@@80)) )))
(assert (= (type Tclass.NativeTypes.int64) TyType))
(assert (= (Tag Tclass.NativeTypes.int64) Tagclass.NativeTypes.int64))
(assert (= (TagFamily Tclass.NativeTypes.int64) tytagFamily$int64))
(assert (forall ((bx@@156 T@U) ) (!  (=> (and (= (type bx@@156) BoxType) ($IsBox bx@@156 Tclass.NativeTypes.int64)) (and (= ($Box ($Unbox intType bx@@156)) bx@@156) ($Is ($Unbox intType bx@@156) Tclass.NativeTypes.int64))) :qid |unknown.0:0| :skolemid |2712| :pattern ( ($IsBox bx@@156 Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@24| T@U) ) (!  (=> (= (type |i#0@@24|) intType) (= ($Is |i#0@@24| Tclass.NativeTypes.int64)  (and (<= (LitInt (- 0 9223372036854775808)) (U_2_int |i#0@@24|)) (< (U_2_int |i#0@@24|) 9223372036854775808)))) :qid |unknown.0:0| :skolemid |2713| :pattern ( ($Is |i#0@@24| Tclass.NativeTypes.int64)) )))
(assert (forall ((|i#0@@25| T@U) ($h@@81 T@U) ) (!  (=> (and (= (type |i#0@@25|) intType) (= (type $h@@81) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@25| Tclass.NativeTypes.int64 $h@@81)) :qid |unknown.0:0| :skolemid |2714| :pattern ( ($IsAlloc |i#0@@25| Tclass.NativeTypes.int64 $h@@81)) )))
(assert (= (type Tclass.NativeTypes.uint64) TyType))
(assert (= (Tag Tclass.NativeTypes.uint64) Tagclass.NativeTypes.uint64))
(assert (= (TagFamily Tclass.NativeTypes.uint64) tytagFamily$uint64))
(assert (forall ((bx@@157 T@U) ) (!  (=> (and (= (type bx@@157) BoxType) ($IsBox bx@@157 Tclass.NativeTypes.uint64)) (and (= ($Box ($Unbox intType bx@@157)) bx@@157) ($Is ($Unbox intType bx@@157) Tclass.NativeTypes.uint64))) :qid |unknown.0:0| :skolemid |2715| :pattern ( ($IsBox bx@@157 Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@26| T@U) ) (!  (=> (= (type |i#0@@26|) intType) (= ($Is |i#0@@26| Tclass.NativeTypes.uint64)  (and (<= (LitInt 0) (U_2_int |i#0@@26|)) (< (U_2_int |i#0@@26|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |2716| :pattern ( ($Is |i#0@@26| Tclass.NativeTypes.uint64)) )))
(assert (forall ((|i#0@@27| T@U) ($h@@82 T@U) ) (!  (=> (and (= (type |i#0@@27|) intType) (= (type $h@@82) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@27| Tclass.NativeTypes.uint64 $h@@82)) :qid |unknown.0:0| :skolemid |2717| :pattern ( ($IsAlloc |i#0@@27| Tclass.NativeTypes.uint64 $h@@82)) )))
(assert (= (type Tclass.NativeTypes.nat8) TyType))
(assert (= (Tag Tclass.NativeTypes.nat8) Tagclass.NativeTypes.nat8))
(assert (= (TagFamily Tclass.NativeTypes.nat8) tytagFamily$nat8))
(assert (forall ((bx@@158 T@U) ) (!  (=> (and (= (type bx@@158) BoxType) ($IsBox bx@@158 Tclass.NativeTypes.nat8)) (and (= ($Box ($Unbox intType bx@@158)) bx@@158) ($Is ($Unbox intType bx@@158) Tclass.NativeTypes.nat8))) :qid |unknown.0:0| :skolemid |2718| :pattern ( ($IsBox bx@@158 Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@28| T@U) ) (!  (=> (= (type |i#0@@28|) intType) (= ($Is |i#0@@28| Tclass.NativeTypes.nat8)  (and (<= (LitInt 0) (U_2_int |i#0@@28|)) (< (U_2_int |i#0@@28|) 128)))) :qid |unknown.0:0| :skolemid |2719| :pattern ( ($Is |i#0@@28| Tclass.NativeTypes.nat8)) )))
(assert (forall ((|i#0@@29| T@U) ($h@@83 T@U) ) (!  (=> (and (= (type |i#0@@29|) intType) (= (type $h@@83) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@29| Tclass.NativeTypes.nat8 $h@@83)) :qid |unknown.0:0| :skolemid |2720| :pattern ( ($IsAlloc |i#0@@29| Tclass.NativeTypes.nat8 $h@@83)) )))
(assert (= (type Tclass.NativeTypes.nat16) TyType))
(assert (= (Tag Tclass.NativeTypes.nat16) Tagclass.NativeTypes.nat16))
(assert (= (TagFamily Tclass.NativeTypes.nat16) tytagFamily$nat16))
(assert (forall ((bx@@159 T@U) ) (!  (=> (and (= (type bx@@159) BoxType) ($IsBox bx@@159 Tclass.NativeTypes.nat16)) (and (= ($Box ($Unbox intType bx@@159)) bx@@159) ($Is ($Unbox intType bx@@159) Tclass.NativeTypes.nat16))) :qid |unknown.0:0| :skolemid |2721| :pattern ( ($IsBox bx@@159 Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@30| T@U) ) (!  (=> (= (type |i#0@@30|) intType) (= ($Is |i#0@@30| Tclass.NativeTypes.nat16)  (and (<= (LitInt 0) (U_2_int |i#0@@30|)) (< (U_2_int |i#0@@30|) 32768)))) :qid |unknown.0:0| :skolemid |2722| :pattern ( ($Is |i#0@@30| Tclass.NativeTypes.nat16)) )))
(assert (forall ((|i#0@@31| T@U) ($h@@84 T@U) ) (!  (=> (and (= (type |i#0@@31|) intType) (= (type $h@@84) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@31| Tclass.NativeTypes.nat16 $h@@84)) :qid |unknown.0:0| :skolemid |2723| :pattern ( ($IsAlloc |i#0@@31| Tclass.NativeTypes.nat16 $h@@84)) )))
(assert (= (type Tclass.NativeTypes.nat32) TyType))
(assert (= (Tag Tclass.NativeTypes.nat32) Tagclass.NativeTypes.nat32))
(assert (= (TagFamily Tclass.NativeTypes.nat32) tytagFamily$nat32))
(assert (forall ((bx@@160 T@U) ) (!  (=> (and (= (type bx@@160) BoxType) ($IsBox bx@@160 Tclass.NativeTypes.nat32)) (and (= ($Box ($Unbox intType bx@@160)) bx@@160) ($Is ($Unbox intType bx@@160) Tclass.NativeTypes.nat32))) :qid |unknown.0:0| :skolemid |2724| :pattern ( ($IsBox bx@@160 Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@32| T@U) ) (!  (=> (= (type |i#0@@32|) intType) (= ($Is |i#0@@32| Tclass.NativeTypes.nat32)  (and (<= (LitInt 0) (U_2_int |i#0@@32|)) (< (U_2_int |i#0@@32|) 2147483648)))) :qid |unknown.0:0| :skolemid |2725| :pattern ( ($Is |i#0@@32| Tclass.NativeTypes.nat32)) )))
(assert (forall ((|i#0@@33| T@U) ($h@@85 T@U) ) (!  (=> (and (= (type |i#0@@33|) intType) (= (type $h@@85) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@33| Tclass.NativeTypes.nat32 $h@@85)) :qid |unknown.0:0| :skolemid |2726| :pattern ( ($IsAlloc |i#0@@33| Tclass.NativeTypes.nat32 $h@@85)) )))
(assert (= (type Tclass.NativeTypes.nat64) TyType))
(assert (= (Tag Tclass.NativeTypes.nat64) Tagclass.NativeTypes.nat64))
(assert (= (TagFamily Tclass.NativeTypes.nat64) tytagFamily$nat64))
(assert (forall ((bx@@161 T@U) ) (!  (=> (and (= (type bx@@161) BoxType) ($IsBox bx@@161 Tclass.NativeTypes.nat64)) (and (= ($Box ($Unbox intType bx@@161)) bx@@161) ($Is ($Unbox intType bx@@161) Tclass.NativeTypes.nat64))) :qid |unknown.0:0| :skolemid |2727| :pattern ( ($IsBox bx@@161 Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@34| T@U) ) (!  (=> (= (type |i#0@@34|) intType) (= ($Is |i#0@@34| Tclass.NativeTypes.nat64)  (and (<= (LitInt 0) (U_2_int |i#0@@34|)) (< (U_2_int |i#0@@34|) 9223372036854775808)))) :qid |unknown.0:0| :skolemid |2728| :pattern ( ($Is |i#0@@34| Tclass.NativeTypes.nat64)) )))
(assert (forall ((|i#0@@35| T@U) ($h@@86 T@U) ) (!  (=> (and (= (type |i#0@@35|) intType) (= (type $h@@86) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@35| Tclass.NativeTypes.nat64 $h@@86)) :qid |unknown.0:0| :skolemid |2729| :pattern ( ($IsAlloc |i#0@@35| Tclass.NativeTypes.nat64 $h@@86)) )))
(assert (= (type Tclass.NativeTypes.uint128) TyType))
(assert (= (Tag Tclass.NativeTypes.uint128) Tagclass.NativeTypes.uint128))
(assert (= (TagFamily Tclass.NativeTypes.uint128) tytagFamily$uint128))
(assert (forall ((bx@@162 T@U) ) (!  (=> (and (= (type bx@@162) BoxType) ($IsBox bx@@162 Tclass.NativeTypes.uint128)) (and (= ($Box ($Unbox intType bx@@162)) bx@@162) ($Is ($Unbox intType bx@@162) Tclass.NativeTypes.uint128))) :qid |unknown.0:0| :skolemid |2730| :pattern ( ($IsBox bx@@162 Tclass.NativeTypes.uint128)) )))
(assert (forall ((|i#0@@36| T@U) ) (!  (=> (= (type |i#0@@36|) intType) (= ($Is |i#0@@36| Tclass.NativeTypes.uint128)  (and (<= (LitInt 0) (U_2_int |i#0@@36|)) (< (U_2_int |i#0@@36|) 340282366920938463463374607431768211456)))) :qid |unknown.0:0| :skolemid |2731| :pattern ( ($Is |i#0@@36| Tclass.NativeTypes.uint128)) )))
(assert (forall ((|i#0@@37| T@U) ($h@@87 T@U) ) (!  (=> (and (= (type |i#0@@37|) intType) (= (type $h@@87) (MapType0Type refType MapType1Type))) ($IsAlloc |i#0@@37| Tclass.NativeTypes.uint128 $h@@87)) :qid |unknown.0:0| :skolemid |2732| :pattern ( ($IsAlloc |i#0@@37| Tclass.NativeTypes.uint128 $h@@87)) )))
(assert (= (type Tclass.NativeTypes.__default) TyType))
(assert (= (Tag Tclass.NativeTypes.__default) Tagclass.NativeTypes.__default))
(assert (= (TagFamily Tclass.NativeTypes.__default) tytagFamily$_default))
(assert (forall ((bx@@163 T@U) ) (!  (=> (and (= (type bx@@163) BoxType) ($IsBox bx@@163 Tclass.NativeTypes.__default)) (and (= ($Box ($Unbox refType bx@@163)) bx@@163) ($Is ($Unbox refType bx@@163) Tclass.NativeTypes.__default))) :qid |unknown.0:0| :skolemid |2733| :pattern ( ($IsBox bx@@163 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@17 T@U) ) (!  (=> (= (type $o@@17) refType) (= ($Is $o@@17 Tclass.NativeTypes.__default)  (or (= $o@@17 null) (= (dtype $o@@17) Tclass.NativeTypes.__default)))) :qid |unknown.0:0| :skolemid |2734| :pattern ( ($Is $o@@17 Tclass.NativeTypes.__default)) )))
(assert (forall (($o@@18 T@U) ($h@@88 T@U) ) (!  (=> (and (= (type $o@@18) refType) (= (type $h@@88) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@18 Tclass.NativeTypes.__default $h@@88)  (or (= $o@@18 null) (U_2_bool (MapType1Select (MapType0Select $h@@88 $o@@18) alloc))))) :qid |unknown.0:0| :skolemid |2735| :pattern ( ($IsAlloc $o@@18 Tclass.NativeTypes.__default $h@@88)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint64Size) (< NativeTypes.__default.Uint64Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint64Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64Size (LitInt 8)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint32Size) (< NativeTypes.__default.Uint32Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint32Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32Size (LitInt 4)))))
(assert  (=> true (=> true (and (<= (LitInt 0) NativeTypes.__default.Uint16Size) (< NativeTypes.__default.Uint16Size 18446744073709551616)))))
(assert (= |NativeTypes.__default.Uint16Size#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint16Size (LitInt 2)))))
(assert  (=> true (=> true true)))
(assert (= |NativeTypes.__default.Uint64UpperBound#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint64UpperBound (LitInt 18446744073709551616)))))
(assert  (=> true (=> true true)))
(assert (= |NativeTypes.__default.Uint32UpperBound#requires| true))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert  (=> true (=> true (= NativeTypes.__default.Uint32UpperBound (LitInt 4294967296)))))
(assert (= (type Tclass.Mathematics.__default) TyType))
(assert (= (Tag Tclass.Mathematics.__default) Tagclass.Mathematics.__default))
(assert (= (TagFamily Tclass.Mathematics.__default) tytagFamily$_default))
(assert (forall ((bx@@164 T@U) ) (!  (=> (and (= (type bx@@164) BoxType) ($IsBox bx@@164 Tclass.Mathematics.__default)) (and (= ($Box ($Unbox refType bx@@164)) bx@@164) ($Is ($Unbox refType bx@@164) Tclass.Mathematics.__default))) :qid |unknown.0:0| :skolemid |2736| :pattern ( ($IsBox bx@@164 Tclass.Mathematics.__default)) )))
(assert (forall (($o@@19 T@U) ) (!  (=> (= (type $o@@19) refType) (= ($Is $o@@19 Tclass.Mathematics.__default)  (or (= $o@@19 null) (= (dtype $o@@19) Tclass.Mathematics.__default)))) :qid |unknown.0:0| :skolemid |2737| :pattern ( ($Is $o@@19 Tclass.Mathematics.__default)) )))
(assert (forall (($o@@20 T@U) ($h@@89 T@U) ) (!  (=> (and (= (type $o@@20) refType) (= (type $h@@89) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@20 Tclass.Mathematics.__default $h@@89)  (or (= $o@@20 null) (U_2_bool (MapType1Select (MapType0Select $h@@89 $o@@20) alloc))))) :qid |unknown.0:0| :skolemid |2738| :pattern ( ($IsAlloc $o@@20 Tclass.Mathematics.__default $h@@89)) )))
(assert  (=> true (forall ((|a#0@@5| Int) (|b#0@@5| Int) ) (!  (=> true true) :qid |mathematicsidfy.6:15| :skolemid |2739| :pattern ( (Mathematics.__default.min |a#0@@5| |b#0@@5|)) ))))
(assert (forall ((|a#0@@6| Int) (|b#0@@6| Int) ) (! (= (|Mathematics.__default.min#requires| |a#0@@6| |b#0@@6|) true) :qid |mathematicsidfy.6:15| :skolemid |2740| :pattern ( (|Mathematics.__default.min#requires| |a#0@@6| |b#0@@6|)) )))
(assert  (=> true (forall ((|a#0@@7| Int) (|b#0@@7| Int) ) (!  (=> true (= (Mathematics.__default.min |a#0@@7| |b#0@@7|) (ite (< |a#0@@7| |b#0@@7|) |a#0@@7| |b#0@@7|))) :qid |mathematicsidfy.6:15| :skolemid |2741| :pattern ( (Mathematics.__default.min |a#0@@7| |b#0@@7|)) ))))
(assert  (=> true (forall ((|a#0@@8| Int) (|b#0@@8| Int) ) (!  (=> true (= (Mathematics.__default.min (LitInt |a#0@@8|) (LitInt |b#0@@8|)) (ite (< |a#0@@8| |b#0@@8|) |a#0@@8| |b#0@@8|))) :qid |mathematicsidfy.6:15| :weight 3 :skolemid |2742| :pattern ( (Mathematics.__default.min (LitInt |a#0@@8|) (LitInt |b#0@@8|))) ))))
(assert  (=> true (forall ((|a#0@@9| Int) (|b#0@@9| Int) ) (!  (=> true true) :qid |mathematicsidfy.14:15| :skolemid |2743| :pattern ( (Mathematics.__default.max |a#0@@9| |b#0@@9|)) ))))
(assert (forall ((|a#0@@10| Int) (|b#0@@10| Int) ) (! (= (|Mathematics.__default.max#requires| |a#0@@10| |b#0@@10|) true) :qid |mathematicsidfy.14:15| :skolemid |2744| :pattern ( (|Mathematics.__default.max#requires| |a#0@@10| |b#0@@10|)) )))
(assert  (=> true (forall ((|a#0@@11| Int) (|b#0@@11| Int) ) (!  (=> true (= (Mathematics.__default.max |a#0@@11| |b#0@@11|) (ite (< |a#0@@11| |b#0@@11|) |b#0@@11| |a#0@@11|))) :qid |mathematicsidfy.14:15| :skolemid |2745| :pattern ( (Mathematics.__default.max |a#0@@11| |b#0@@11|)) ))))
(assert  (=> true (forall ((|a#0@@12| Int) (|b#0@@12| Int) ) (!  (=> true (= (Mathematics.__default.max (LitInt |a#0@@12|) (LitInt |b#0@@12|)) (ite (< |a#0@@12| |b#0@@12|) |b#0@@12| |a#0@@12|))) :qid |mathematicsidfy.14:15| :weight 3 :skolemid |2746| :pattern ( (Mathematics.__default.max (LitInt |a#0@@12|) (LitInt |b#0@@12|))) ))))
(assert (forall ((arg0@@519 T@U) (arg1@@223 T@U) ) (! (= (type (Mathematics.__default.Set arg0@@519 arg1@@223)) (MapType0Type BoxType boolType)) :qid |funType:Mathematics.__default.Set| :pattern ( (Mathematics.__default.Set arg0@@519 arg1@@223)) )))
(assert  (=> true (forall ((Mathematics._default.Set$T T@U) (|ms#0| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T) TyType) (= (type |ms#0|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T |ms#0|) ($Is |ms#0| (TMultiSet Mathematics._default.Set$T)))) ($Is (Mathematics.__default.Set Mathematics._default.Set$T |ms#0|) (TSet Mathematics._default.Set$T))) :qid |unknown.0:0| :skolemid |2747| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T |ms#0|)) ))))
(assert (forall ((Mathematics._default.Set$T@@0 T@U) (|ms#0@@0| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@0) TyType) (= (type |ms#0@@0|) (MapType0Type BoxType intType))) ($Is |ms#0@@0| (TMultiSet Mathematics._default.Set$T@@0))) (= (|Mathematics.__default.Set#requires| Mathematics._default.Set$T@@0 |ms#0@@0|) true)) :qid |unknown.0:0| :skolemid |2748| :pattern ( (|Mathematics.__default.Set#requires| Mathematics._default.Set$T@@0 |ms#0@@0|)) )))
(assert (forall ((arg0@@520 T@U) (arg1@@224 T@U) (arg2@@149 Int) ) (! (= (type (|lambda#90| arg0@@520 arg1@@224 arg2@@149)) (MapType0Type BoxType boolType)) :qid |funType:lambda#90| :pattern ( (|lambda#90| arg0@@520 arg1@@224 arg2@@149)) )))
(assert  (=> true (forall ((Mathematics._default.Set$T@@1 T@U) (|ms#0@@1| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@1) TyType) (= (type |ms#0@@1|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T@@1 |ms#0@@1|) ($Is |ms#0@@1| (TMultiSet Mathematics._default.Set$T@@1)))) (= (Mathematics.__default.Set Mathematics._default.Set$T@@1 |ms#0@@1|) (|lambda#90| Mathematics._default.Set$T@@1 |ms#0@@1| 0))) :qid |unknown.0:0| :skolemid |2749| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T@@1 |ms#0@@1|)) ))))
(assert  (=> true (forall ((Mathematics._default.Set$T@@2 T@U) (|ms#0@@2| T@U) ) (!  (=> (and (and (= (type Mathematics._default.Set$T@@2) TyType) (= (type |ms#0@@2|) (MapType0Type BoxType intType))) (or (|Mathematics.__default.Set#canCall| Mathematics._default.Set$T@@2 (Lit |ms#0@@2|)) ($Is |ms#0@@2| (TMultiSet Mathematics._default.Set$T@@2)))) (= (Mathematics.__default.Set Mathematics._default.Set$T@@2 (Lit |ms#0@@2|)) (|lambda#90| Mathematics._default.Set$T@@2 (Lit |ms#0@@2|) 0))) :qid |unknown.0:0| :weight 3 :skolemid |2750| :pattern ( (Mathematics.__default.Set Mathematics._default.Set$T@@2 (Lit |ms#0@@2|))) ))))
(assert (forall ((arg0@@521 T@U) (arg1@@225 T@U) ) (! (= (type (Mathematics.__default.ISet arg0@@521 arg1@@225)) (MapType0Type BoxType boolType)) :qid |funType:Mathematics.__default.ISet| :pattern ( (Mathematics.__default.ISet arg0@@521 arg1@@225)) )))
(assert  (=> true (forall ((Mathematics._default.ISet$T T@U) (|ms#0@@3| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T) TyType) (= (type |ms#0@@3|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T |ms#0@@3|) ($Is |ms#0@@3| (TSet Mathematics._default.ISet$T)))) ($Is (Mathematics.__default.ISet Mathematics._default.ISet$T |ms#0@@3|) (TISet Mathematics._default.ISet$T))) :qid |unknown.0:0| :skolemid |2751| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T |ms#0@@3|)) ))))
(assert (forall ((Mathematics._default.ISet$T@@0 T@U) (|ms#0@@4| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@0) TyType) (= (type |ms#0@@4|) (MapType0Type BoxType boolType))) ($Is |ms#0@@4| (TSet Mathematics._default.ISet$T@@0))) (= (|Mathematics.__default.ISet#requires| Mathematics._default.ISet$T@@0 |ms#0@@4|) true)) :qid |unknown.0:0| :skolemid |2752| :pattern ( (|Mathematics.__default.ISet#requires| Mathematics._default.ISet$T@@0 |ms#0@@4|)) )))
(assert (forall ((arg0@@522 T@U) (arg1@@226 T@U) ) (! (= (type (|lambda#92| arg0@@522 arg1@@226)) (MapType0Type BoxType boolType)) :qid |funType:lambda#92| :pattern ( (|lambda#92| arg0@@522 arg1@@226)) )))
(assert  (=> true (forall ((Mathematics._default.ISet$T@@1 T@U) (|ms#0@@5| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@1) TyType) (= (type |ms#0@@5|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T@@1 |ms#0@@5|) ($Is |ms#0@@5| (TSet Mathematics._default.ISet$T@@1)))) (= (Mathematics.__default.ISet Mathematics._default.ISet$T@@1 |ms#0@@5|) (|lambda#92| Mathematics._default.ISet$T@@1 |ms#0@@5|))) :qid |unknown.0:0| :skolemid |2753| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T@@1 |ms#0@@5|)) ))))
(assert  (=> true (forall ((Mathematics._default.ISet$T@@2 T@U) (|ms#0@@6| T@U) ) (!  (=> (and (and (= (type Mathematics._default.ISet$T@@2) TyType) (= (type |ms#0@@6|) (MapType0Type BoxType boolType))) (or (|Mathematics.__default.ISet#canCall| Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)) ($Is |ms#0@@6| (TSet Mathematics._default.ISet$T@@2)))) (= (Mathematics.__default.ISet Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)) (|lambda#92| Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|)))) :qid |unknown.0:0| :weight 3 :skolemid |2754| :pattern ( (Mathematics.__default.ISet Mathematics._default.ISet$T@@2 (Lit |ms#0@@6|))) ))))
(assert (= (type Tclass.Sequences.__default) TyType))
(assert (= (Tag Tclass.Sequences.__default) Tagclass.Sequences.__default))
(assert (= (TagFamily Tclass.Sequences.__default) tytagFamily$_default))
(assert (forall ((bx@@165 T@U) ) (!  (=> (and (= (type bx@@165) BoxType) ($IsBox bx@@165 Tclass.Sequences.__default)) (and (= ($Box ($Unbox refType bx@@165)) bx@@165) ($Is ($Unbox refType bx@@165) Tclass.Sequences.__default))) :qid |unknown.0:0| :skolemid |2755| :pattern ( ($IsBox bx@@165 Tclass.Sequences.__default)) )))
(assert (forall (($o@@21 T@U) ) (!  (=> (= (type $o@@21) refType) (= ($Is $o@@21 Tclass.Sequences.__default)  (or (= $o@@21 null) (= (dtype $o@@21) Tclass.Sequences.__default)))) :qid |unknown.0:0| :skolemid |2756| :pattern ( ($Is $o@@21 Tclass.Sequences.__default)) )))
(assert (forall (($o@@22 T@U) ($h@@90 T@U) ) (!  (=> (and (= (type $o@@22) refType) (= (type $h@@90) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@22 Tclass.Sequences.__default $h@@90)  (or (= $o@@22 null) (U_2_bool (MapType1Select (MapType0Select $h@@90 $o@@22) alloc))))) :qid |unknown.0:0| :skolemid |2757| :pattern ( ($IsAlloc $o@@22 Tclass.Sequences.__default $h@@90)) )))
(assert  (=> true (forall ((Sequences._default.Last$E T@U) (|run#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E) TyType) (= (type |run#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E |run#0@@7|) (and ($Is |run#0@@7| (TSeq Sequences._default.Last$E)) (> (|Seq#Length| |run#0@@7|) 0)))) ($IsBox (Sequences.__default.Last Sequences._default.Last$E |run#0@@7|) Sequences._default.Last$E)) :qid |unknown.0:0| :skolemid |2758| :pattern ( (Sequences.__default.Last Sequences._default.Last$E |run#0@@7|)) ))))
(assert (forall ((Sequences._default.Last$E@@0 T@U) (|run#0@@8| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@0) TyType) (= (type |run#0@@8|) (SeqType BoxType))) ($Is |run#0@@8| (TSeq Sequences._default.Last$E@@0))) (= (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@8|) (> (|Seq#Length| |run#0@@8|) 0))) :qid |unknown.0:0| :skolemid |2759| :pattern ( (|Sequences.__default.Last#requires| Sequences._default.Last$E@@0 |run#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.Last$E@@1 T@U) (|run#0@@9| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@1) TyType) (= (type |run#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@1 |run#0@@9|) (and ($Is |run#0@@9| (TSeq Sequences._default.Last$E@@1)) (> (|Seq#Length| |run#0@@9|) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@9|) (|Seq#Index| |run#0@@9| (- (|Seq#Length| |run#0@@9|) 1)))) :qid |unknown.0:0| :skolemid |2760| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@1 |run#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.Last$E@@2 T@U) (|run#0@@10| T@U) ) (!  (=> (and (and (= (type Sequences._default.Last$E@@2) TyType) (= (type |run#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Last#canCall| Sequences._default.Last$E@@2 (Lit |run#0@@10|)) (and ($Is |run#0@@10| (TSeq Sequences._default.Last$E@@2)) (> (|Seq#Length| (Lit |run#0@@10|)) 0)))) (= (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@10|)) (|Seq#Index| (Lit |run#0@@10|) (- (|Seq#Length| (Lit |run#0@@10|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |2761| :pattern ( (Sequences.__default.Last Sequences._default.Last$E@@2 (Lit |run#0@@10|))) ))))
(assert (forall ((arg0@@523 T@U) (arg1@@227 T@U) ) (! (= (type (Sequences.__default.FirstOpt arg0@@523 arg1@@227)) DatatypeTypeType) :qid |funType:Sequences.__default.FirstOpt| :pattern ( (Sequences.__default.FirstOpt arg0@@523 arg1@@227)) )))
(assert  (=> true (forall ((Sequences._default.FirstOpt$E T@U) (|run#0@@11| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E) TyType) (= (type |run#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E |run#0@@11|) ($Is |run#0@@11| (TSeq Sequences._default.FirstOpt$E)))) ($Is (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E |run#0@@11|) (Tclass.Options.Option Sequences._default.FirstOpt$E))) :qid |unknown.0:0| :skolemid |2762| :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E |run#0@@11|)) ))))
(assert (forall ((Sequences._default.FirstOpt$E@@0 T@U) (|run#0@@12| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@0) TyType) (= (type |run#0@@12|) (SeqType BoxType))) ($Is |run#0@@12| (TSeq Sequences._default.FirstOpt$E@@0))) (= (|Sequences.__default.FirstOpt#requires| Sequences._default.FirstOpt$E@@0 |run#0@@12|) true)) :qid |unknown.0:0| :skolemid |2763| :pattern ( (|Sequences.__default.FirstOpt#requires| Sequences._default.FirstOpt$E@@0 |run#0@@12|)) )))
(assert  (=> true (forall ((Sequences._default.FirstOpt$E@@1 T@U) (|run#0@@13| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@1) TyType) (= (type |run#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E@@1 |run#0@@13|) ($Is |run#0@@13| (TSeq Sequences._default.FirstOpt$E@@1)))) (= (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@1 |run#0@@13|) (ite (= (|Seq#Length| |run#0@@13|) (LitInt 0)) |#Options.Option.None| (|#Options.Option.Some| (|Seq#Index| |run#0@@13| (LitInt 0)))))) :qid |unknown.0:0| :skolemid |2764| :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@1 |run#0@@13|)) ))))
(assert  (=> true (forall ((Sequences._default.FirstOpt$E@@2 T@U) (|run#0@@14| T@U) ) (!  (=> (and (and (= (type Sequences._default.FirstOpt$E@@2) TyType) (= (type |run#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.FirstOpt#canCall| Sequences._default.FirstOpt$E@@2 (Lit |run#0@@14|)) ($Is |run#0@@14| (TSeq Sequences._default.FirstOpt$E@@2)))) (= (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@2 (Lit |run#0@@14|)) (ite (= (|Seq#Length| (Lit |run#0@@14|)) (LitInt 0)) |#Options.Option.None| (|#Options.Option.Some| (|Seq#Index| (Lit |run#0@@14|) (LitInt 0)))))) :qid |unknown.0:0| :weight 3 :skolemid |2765| :pattern ( (Sequences.__default.FirstOpt Sequences._default.FirstOpt$E@@2 (Lit |run#0@@14|))) ))))
(assert  (=> true (forall ((Sequences._default.DropLast$E T@U) (|run#0@@15| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E) TyType) (= (type |run#0@@15|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E |run#0@@15|) (and ($Is |run#0@@15| (TSeq Sequences._default.DropLast$E)) (> (|Seq#Length| |run#0@@15|) 0)))) ($Is (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@15|) (TSeq Sequences._default.DropLast$E))) :qid |unknown.0:0| :skolemid |2766| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E |run#0@@15|)) ))))
(assert (forall ((Sequences._default.DropLast$E@@0 T@U) (|run#0@@16| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@0) TyType) (= (type |run#0@@16|) (SeqType BoxType))) ($Is |run#0@@16| (TSeq Sequences._default.DropLast$E@@0))) (= (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@16|) (> (|Seq#Length| |run#0@@16|) 0))) :qid |unknown.0:0| :skolemid |2767| :pattern ( (|Sequences.__default.DropLast#requires| Sequences._default.DropLast$E@@0 |run#0@@16|)) )))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@1 T@U) (|run#0@@17| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@1) TyType) (= (type |run#0@@17|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@1 |run#0@@17|) (and ($Is |run#0@@17| (TSeq Sequences._default.DropLast$E@@1)) (> (|Seq#Length| |run#0@@17|) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@17|) (|Seq#Take| |run#0@@17| (- (|Seq#Length| |run#0@@17|) 1)))) :qid |unknown.0:0| :skolemid |2768| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@1 |run#0@@17|)) ))))
(assert  (=> true (forall ((Sequences._default.DropLast$E@@2 T@U) (|run#0@@18| T@U) ) (!  (=> (and (and (= (type Sequences._default.DropLast$E@@2) TyType) (= (type |run#0@@18|) (SeqType BoxType))) (or (|Sequences.__default.DropLast#canCall| Sequences._default.DropLast$E@@2 (Lit |run#0@@18|)) (and ($Is |run#0@@18| (TSeq Sequences._default.DropLast$E@@2)) (> (|Seq#Length| (Lit |run#0@@18|)) 0)))) (= (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@18|)) (|Seq#Take| (Lit |run#0@@18|) (- (|Seq#Length| (Lit |run#0@@18|)) 1)))) :qid |unknown.0:0| :weight 3 :skolemid |2769| :pattern ( (Sequences.__default.DropLast Sequences._default.DropLast$E@@2 (Lit |run#0@@18|))) ))))
(assert (forall ((arg0@@524 T@U) (arg1@@228 T@U) ) (! (= (type (Sequences.__default.Set arg0@@524 arg1@@228)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.Set| :pattern ( (Sequences.__default.Set arg0@@524 arg1@@228)) )))
(assert  (=> true (forall ((Sequences._default.Set$T T@U) (|run#0@@19| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T) TyType) (= (type |run#0@@19|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T |run#0@@19|) ($Is |run#0@@19| (TSeq Sequences._default.Set$T)))) ($Is (Sequences.__default.Set Sequences._default.Set$T |run#0@@19|) (TSet Sequences._default.Set$T))) :qid |unknown.0:0| :skolemid |2770| :pattern ( (Sequences.__default.Set Sequences._default.Set$T |run#0@@19|)) ))))
(assert (forall ((Sequences._default.Set$T@@0 T@U) (|run#0@@20| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@0) TyType) (= (type |run#0@@20|) (SeqType BoxType))) ($Is |run#0@@20| (TSeq Sequences._default.Set$T@@0))) (= (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@20|) true)) :qid |unknown.0:0| :skolemid |2771| :pattern ( (|Sequences.__default.Set#requires| Sequences._default.Set$T@@0 |run#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.Set$T@@1 T@U) (|run#0@@21| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@1) TyType) (= (type |run#0@@21|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@1 |run#0@@21|) ($Is |run#0@@21| (TSeq Sequences._default.Set$T@@1)))) (= (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@21|) (|lambda#90| Sequences._default.Set$T@@1 (|MultiSet#FromSeq| |run#0@@21|) 0))) :qid |unknown.0:0| :skolemid |2772| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@1 |run#0@@21|)) ))))
(assert  (=> true (forall ((Sequences._default.Set$T@@2 T@U) (|run#0@@22| T@U) ) (!  (=> (and (and (= (type Sequences._default.Set$T@@2) TyType) (= (type |run#0@@22|) (SeqType BoxType))) (or (|Sequences.__default.Set#canCall| Sequences._default.Set$T@@2 (Lit |run#0@@22|)) ($Is |run#0@@22| (TSeq Sequences._default.Set$T@@2)))) (= (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@22|)) (|lambda#90| Sequences._default.Set$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@22|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |2773| :pattern ( (Sequences.__default.Set Sequences._default.Set$T@@2 (Lit |run#0@@22|))) ))))
(assert (forall ((arg0@@525 T@U) (arg1@@229 T@U) ) (! (= (type (Sequences.__default.ISet arg0@@525 arg1@@229)) (MapType0Type BoxType boolType)) :qid |funType:Sequences.__default.ISet| :pattern ( (Sequences.__default.ISet arg0@@525 arg1@@229)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T T@U) (|run#0@@23| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T) TyType) (= (type |run#0@@23|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T |run#0@@23|) ($Is |run#0@@23| (TSeq Sequences._default.ISet$T)))) ($Is (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@23|) (TISet Sequences._default.ISet$T))) :qid |unknown.0:0| :skolemid |2774| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T |run#0@@23|)) ))))
(assert (forall ((Sequences._default.ISet$T@@0 T@U) (|run#0@@24| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@0) TyType) (= (type |run#0@@24|) (SeqType BoxType))) ($Is |run#0@@24| (TSeq Sequences._default.ISet$T@@0))) (= (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@24|) true)) :qid |unknown.0:0| :skolemid |2775| :pattern ( (|Sequences.__default.ISet#requires| Sequences._default.ISet$T@@0 |run#0@@24|)) )))
(assert  (=> true (forall ((Sequences._default.ISet$T@@1 T@U) (|run#0@@25| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@1) TyType) (= (type |run#0@@25|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@1 |run#0@@25|) ($Is |run#0@@25| (TSeq Sequences._default.ISet$T@@1)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@25|) (|lambda#90| Sequences._default.ISet$T@@1 (|MultiSet#FromSeq| |run#0@@25|) 0))) :qid |unknown.0:0| :skolemid |2776| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@1 |run#0@@25|)) ))))
(assert  (=> true (forall ((Sequences._default.ISet$T@@2 T@U) (|run#0@@26| T@U) ) (!  (=> (and (and (= (type Sequences._default.ISet$T@@2) TyType) (= (type |run#0@@26|) (SeqType BoxType))) (or (|Sequences.__default.ISet#canCall| Sequences._default.ISet$T@@2 (Lit |run#0@@26|)) ($Is |run#0@@26| (TSeq Sequences._default.ISet$T@@2)))) (= (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@26|)) (|lambda#90| Sequences._default.ISet$T@@2 (|MultiSet#FromSeq| (Lit |run#0@@26|)) 0))) :qid |unknown.0:0| :weight 3 :skolemid |2777| :pattern ( (Sequences.__default.ISet Sequences._default.ISet$T@@2 (Lit |run#0@@26|))) ))))
(assert (forall ((Sequences._default.NoDupes$T T@U) ($ly@@32 T@U) (|a#0@@13| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T) TyType) (= (type $ly@@32) LayerTypeType)) (= (type |a#0@@13|) (SeqType BoxType))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@32) |a#0@@13|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T $ly@@32 |a#0@@13|))) :qid |unknown.0:0| :skolemid |2778| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T ($LS $ly@@32) |a#0@@13|)) )))
(assert (forall ((Sequences._default.NoDupes$T@@0 T@U) ($ly@@33 T@U) (|a#0@@14| T@U) ) (!  (=> (and (and (= (type Sequences._default.NoDupes$T@@0) TyType) (= (type $ly@@33) LayerTypeType)) (= (type |a#0@@14|) (SeqType BoxType))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $ly@@33 |a#0@@14|) (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 $LZ |a#0@@14|))) :qid |unknown.0:0| :skolemid |2779| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@0 (AsFuelBottom $ly@@33) |a#0@@14|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@1 T@U) ($ly@@34 T@U) (|a#0@@15| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@1) TyType) (= (type $ly@@34) LayerTypeType)) (= (type |a#0@@15|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@1 |a#0@@15|) ($Is |a#0@@15| (TSeq Sequences._default.NoDupes$T@@1)))) true) :qid |unknown.0:0| :skolemid |2780| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@1 $ly@@34 |a#0@@15|)) ))))
(assert (forall ((Sequences._default.NoDupes$T@@2 T@U) ($ly@@35 T@U) (|a#0@@16| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@2) TyType) (= (type $ly@@35) LayerTypeType)) (= (type |a#0@@16|) (SeqType BoxType))) ($Is |a#0@@16| (TSeq Sequences._default.NoDupes$T@@2))) (= (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@35 |a#0@@16|) true)) :qid |unknown.0:0| :skolemid |2781| :pattern ( (|Sequences.__default.NoDupes#requires| Sequences._default.NoDupes$T@@2 $ly@@35 |a#0@@16|)) )))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@3 T@U) ($ly@@36 T@U) (|a#0@@17| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@3) TyType) (= (type $ly@@36) LayerTypeType)) (= (type |a#0@@17|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@3 |a#0@@17|) ($Is |a#0@@17| (TSeq Sequences._default.NoDupes$T@@3)))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@36) |a#0@@17|) (forall ((|i#0@@38| Int) (|j#0@@1| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#0@@38|) (< |i#0@@38| (|Seq#Length| |a#0@@17|))) (and (<= (LitInt 0) |j#0@@1|) (< |j#0@@1| (|Seq#Length| |a#0@@17|)))) (not (= |i#0@@38| |j#0@@1|))) (not (= (|Seq#Index| |a#0@@17| |i#0@@38|) (|Seq#Index| |a#0@@17| |j#0@@1|))))) :qid |Sequencesidfy.66:13| :skolemid |2782| :pattern ( (|Seq#Index| |a#0@@17| |j#0@@1|) (|Seq#Index| |a#0@@17| |i#0@@38|)) )))) :qid |unknown.0:0| :skolemid |2783| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@3 ($LS $ly@@36) |a#0@@17|)) ))))
(assert  (=> true (forall ((Sequences._default.NoDupes$T@@4 T@U) ($ly@@37 T@U) (|a#0@@18| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.NoDupes$T@@4) TyType) (= (type $ly@@37) LayerTypeType)) (= (type |a#0@@18|) (SeqType BoxType))) (or (|Sequences.__default.NoDupes#canCall| Sequences._default.NoDupes$T@@4 (Lit |a#0@@18|)) ($Is |a#0@@18| (TSeq Sequences._default.NoDupes$T@@4)))) (= (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@37) (Lit |a#0@@18|)) (forall ((|i#1@@7| Int) (|j#1@@1| Int) ) (!  (=> true (=> (and (and (and (<= (LitInt 0) |i#1@@7|) (< |i#1@@7| (|Seq#Length| (Lit |a#0@@18|)))) (and (<= (LitInt 0) |j#1@@1|) (< |j#1@@1| (|Seq#Length| (Lit |a#0@@18|))))) (not (= |i#1@@7| |j#1@@1|))) (not (= (|Seq#Index| (Lit |a#0@@18|) |i#1@@7|) (|Seq#Index| (Lit |a#0@@18|) |j#1@@1|))))) :qid |Sequencesidfy.66:13| :skolemid |2784| :pattern ( (|Seq#Index| |a#0@@18| |j#1@@1|) (|Seq#Index| |a#0@@18| |i#1@@7|)) )))) :qid |unknown.0:0| :weight 3 :skolemid |2785| :pattern ( (Sequences.__default.NoDupes Sequences._default.NoDupes$T@@4 ($LS $ly@@37) (Lit |a#0@@18|))) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T T@U) (|s#0| T@U) (|e#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T) TyType) (= (type |s#0|) (SeqType BoxType))) (= (type |e#0|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T |s#0| |e#0|) (and (and ($Is |s#0| (TSeq Sequences._default.IndexOf$T)) ($IsBox |e#0| Sequences._default.IndexOf$T)) (|Seq#Contains| |s#0| |e#0|)))) (and (and (<= (LitInt 0) (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|)) (< (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|) (|Seq#Length| |s#0|))) (= (|Seq#Index| |s#0| (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|)) |e#0|))) :qid |unknown.0:0| :skolemid |2786| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T |s#0| |e#0|)) ))))
(assert (forall ((Sequences._default.IndexOf$T@@0 T@U) ($Heap@@5 T@U) (|s#0@@0| T@U) (|e#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@0) TyType) (= (type $Heap@@5) (MapType0Type refType MapType1Type))) (= (type |s#0@@0|) (SeqType BoxType))) (= (type |e#0@@0|) BoxType)) (and (and ($IsGoodHeap $Heap@@5) ($Is |s#0@@0| (TSeq Sequences._default.IndexOf$T@@0))) ($IsBox |e#0@@0| Sequences._default.IndexOf$T@@0))) (= (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@0| |e#0@@0|) (|Seq#Contains| |s#0@@0| |e#0@@0|))) :qid |unknown.0:0| :skolemid |2787| :pattern ( (|Sequences.__default.IndexOf#requires| Sequences._default.IndexOf$T@@0 |s#0@@0| |e#0@@0|) ($IsGoodHeap $Heap@@5)) )))
(assert (forall ((Sequences._default.IndexOf$T@@1 T@U) (s@@49 T@U) (e T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IndexOf$T@@1) TyType) (= (type s@@49) (SeqType BoxType))) (= (type e) BoxType)) (|$let#0$canCall| Sequences._default.IndexOf$T@@1 s@@49 e)) (and (and (<= (LitInt 0) (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e)) (< (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e) (|Seq#Length| s@@49))) (= (|Seq#Index| s@@49 (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e)) e))) :qid |Sequencesidfy.117:5| :skolemid |2788| :pattern ( (|$let#0_i| Sequences._default.IndexOf$T@@1 s@@49 e)) )))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@2 T@U) ($Heap@@6 T@U) (|s#0@@1| T@U) (|e#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@2) TyType) (= (type $Heap@@6) (MapType0Type refType MapType1Type))) (= (type |s#0@@1|) (SeqType BoxType))) (= (type |e#0@@1|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) (and (and (and ($IsGoodHeap $Heap@@6) ($Is |s#0@@1| (TSeq Sequences._default.IndexOf$T@@2))) ($IsBox |e#0@@1| Sequences._default.IndexOf$T@@2)) (|Seq#Contains| |s#0@@1| |e#0@@1|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) (let ((|i#0@@39| (|$let#0_i| Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|))) |i#0@@39|)))) :qid |unknown.0:0| :skolemid |2789| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@2 |s#0@@1| |e#0@@1|) ($IsGoodHeap $Heap@@6)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@3 T@U) ($Heap@@7 T@U) (|s#0@@2| T@U) (|e#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@3) TyType) (= (type $Heap@@7) (MapType0Type refType MapType1Type))) (= (type |s#0@@2|) (SeqType BoxType))) (= (type |e#0@@2|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) (and (and (and ($IsGoodHeap $Heap@@7) ($Is |s#0@@2| (TSeq Sequences._default.IndexOf$T@@3))) ($IsBox |e#0@@2| Sequences._default.IndexOf$T@@3)) (|Seq#Contains| |s#0@@2| |e#0@@2|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) (let ((|i#1@@8| (|$let#0_i| Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|))) |i#1@@8|)))) :qid |unknown.0:0| :weight 3 :skolemid |2790| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@3 (Lit |s#0@@2|) |e#0@@2|) ($IsGoodHeap $Heap@@7)) ))))
(assert  (=> true (forall ((Sequences._default.IndexOf$T@@4 T@U) ($Heap@@8 T@U) (|s#0@@3| T@U) (|e#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IndexOf$T@@4) TyType) (= (type $Heap@@8) (MapType0Type refType MapType1Type))) (= (type |s#0@@3|) (SeqType BoxType))) (= (type |e#0@@3|) BoxType)) (or (|Sequences.__default.IndexOf#canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) (and (and (and ($IsGoodHeap $Heap@@8) ($Is |s#0@@3| (TSeq Sequences._default.IndexOf$T@@4))) ($IsBox |e#0@@3| Sequences._default.IndexOf$T@@4)) (|Seq#Contains| |s#0@@3| |e#0@@3|)))) (and (|$let#0$canCall| Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) (= (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) (let ((|i#2@@3| (|$let#0_i| Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)))) |i#2@@3|)))) :qid |unknown.0:0| :weight 3 :skolemid |2791| :pattern ( (Sequences.__default.IndexOf Sequences._default.IndexOf$T@@4 (Lit |s#0@@3|) (Lit |e#0@@3|)) ($IsGoodHeap $Heap@@8)) ))))
(assert (forall ((arg0@@526 T@U) (arg1@@230 Int) ) (! (= (type (Sequences.__default.Range arg0@@526 arg1@@230)) (SeqType BoxType)) :qid |funType:Sequences.__default.Range| :pattern ( (Sequences.__default.Range arg0@@526 arg1@@230)) )))
(assert (forall (($ly@@38 T@U) (|n#0| Int) ) (!  (=> (= (type $ly@@38) LayerTypeType) (= (Sequences.__default.Range ($LS $ly@@38) |n#0|) (Sequences.__default.Range $ly@@38 |n#0|))) :qid |Sequencesidfy.121:22| :skolemid |2792| :pattern ( (Sequences.__default.Range ($LS $ly@@38) |n#0|)) )))
(assert (forall (($ly@@39 T@U) (|n#0@@0| Int) ) (!  (=> (= (type $ly@@39) LayerTypeType) (= (Sequences.__default.Range $ly@@39 |n#0@@0|) (Sequences.__default.Range $LZ |n#0@@0|))) :qid |Sequencesidfy.121:22| :skolemid |2793| :pattern ( (Sequences.__default.Range (AsFuelBottom $ly@@39) |n#0@@0|)) )))
(assert  (=> true (forall (($ly@@40 T@U) (|n#0@@1| Int) ) (!  (=> (and (= (type $ly@@40) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@1|) (>= |n#0@@1| (LitInt 0)))) (and (and (= (|Seq#Length| (Sequences.__default.Range $ly@@40 |n#0@@1|)) |n#0@@1|) (forall ((|i#0@@40| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@40|) (< |i#0@@40| |n#0@@1|)) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@40 |n#0@@1|) |i#0@@40|))) |i#0@@40|)) :qid |Sequencesidfy.124:20| :skolemid |2794| :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.Range $ly@@40 |n#0@@1|) |i#0@@40|))) ))) ($Is (Sequences.__default.Range $ly@@40 |n#0@@1|) (TSeq TInt)))) :qid |Sequencesidfy.121:22| :skolemid |2795| :pattern ( (Sequences.__default.Range $ly@@40 |n#0@@1|)) ))))
(assert (forall (($ly@@41 T@U) (|n#0@@2| Int) ) (!  (=> (= (type $ly@@41) LayerTypeType) (= (|Sequences.__default.Range#requires| $ly@@41 |n#0@@2|) (>= |n#0@@2| (LitInt 0)))) :qid |Sequencesidfy.121:22| :skolemid |2796| :pattern ( (|Sequences.__default.Range#requires| $ly@@41 |n#0@@2|)) )))
(assert  (=> true (forall (($ly@@42 T@U) (|n#0@@3| Int) ) (!  (=> (and (= (type $ly@@42) LayerTypeType) (or (|Sequences.__default.Range#canCall| |n#0@@3|) (>= |n#0@@3| (LitInt 0)))) (and (=> (not (= |n#0@@3| (LitInt 0))) (|Sequences.__default.Range#canCall| (- |n#0@@3| 1))) (= (Sequences.__default.Range ($LS $ly@@42) |n#0@@3|) (ite (= |n#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range $ly@@42 (- |n#0@@3| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (- |n#0@@3| 1))))))))) :qid |Sequencesidfy.121:22| :skolemid |2797| :pattern ( (Sequences.__default.Range ($LS $ly@@42) |n#0@@3|)) ))))
(assert  (=> true (forall (($ly@@43 T@U) (|n#0@@4| Int) ) (!  (=> (and (= (type $ly@@43) LayerTypeType) (or (|Sequences.__default.Range#canCall| (LitInt |n#0@@4|)) (>= (LitInt |n#0@@4|) (LitInt 0)))) (and (=> (not (= (LitInt |n#0@@4|) (LitInt 0))) (|Sequences.__default.Range#canCall| (LitInt (- |n#0@@4| 1)))) (= (Sequences.__default.Range ($LS $ly@@43) (LitInt |n#0@@4|)) (ite (= (LitInt |n#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Range ($LS $ly@@43) (LitInt (- |n#0@@4| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt (- |n#0@@4| 1)))))))))) :qid |Sequencesidfy.121:22| :weight 3 :skolemid |2798| :pattern ( (Sequences.__default.Range ($LS $ly@@43) (LitInt |n#0@@4|))) ))))
(assert (forall ((arg0@@527 T@U) (arg1@@231 T@U) (arg2@@150 T@U) (arg3@@108 T@U) (arg4@@87 T@U) (arg5@@69 T@U) ) (! (= (type (Sequences.__default.Apply arg0@@527 arg1@@231 arg2@@150 arg3@@108 arg4@@87 arg5@@69)) (SeqType BoxType)) :qid |funType:Sequences.__default.Apply| :pattern ( (Sequences.__default.Apply arg0@@527 arg1@@231 arg2@@150 arg3@@108 arg4@@87 arg5@@69)) )))
(assert (forall ((Sequences._default.Apply$E T@U) (Sequences._default.Apply$R T@U) ($ly@@44 T@U) ($Heap@@9 T@U) (|f#0@@83| T@U) (|run#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E) TyType) (= (type Sequences._default.Apply$R) TyType)) (= (type $ly@@44) LayerTypeType)) (= (type $Heap@@9) (MapType0Type refType MapType1Type))) (= (type |f#0@@83|) HandleTypeType)) (= (type |run#0@@27|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@44) $Heap@@9 |f#0@@83| |run#0@@27|) (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R $ly@@44 $Heap@@9 |f#0@@83| |run#0@@27|))) :qid |unknown.0:0| :skolemid |2799| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E Sequences._default.Apply$R ($LS $ly@@44) $Heap@@9 |f#0@@83| |run#0@@27|)) )))
(assert (forall ((Sequences._default.Apply$E@@0 T@U) (Sequences._default.Apply$R@@0 T@U) ($ly@@45 T@U) ($Heap@@10 T@U) (|f#0@@84| T@U) (|run#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Apply$E@@0) TyType) (= (type Sequences._default.Apply$R@@0) TyType)) (= (type $ly@@45) LayerTypeType)) (= (type $Heap@@10) (MapType0Type refType MapType1Type))) (= (type |f#0@@84|) HandleTypeType)) (= (type |run#0@@28|) (SeqType BoxType))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $ly@@45 $Heap@@10 |f#0@@84| |run#0@@28|) (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 $LZ $Heap@@10 |f#0@@84| |run#0@@28|))) :qid |unknown.0:0| :skolemid |2800| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@0 Sequences._default.Apply$R@@0 (AsFuelBottom $ly@@45) $Heap@@10 |f#0@@84| |run#0@@28|)) )))
(assert (forall ((Sequences._default.Apply$E@@1 T@U) (Sequences._default.Apply$R@@1 T@U) ($ly@@46 T@U) ($h0@@1 T@U) ($h1@@1 T@U) (|f#0@@85| T@U) (|run#0@@29| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@1) TyType) (= (type Sequences._default.Apply$R@@1) TyType)) (= (type $ly@@46) LayerTypeType)) (= (type $h0@@1) (MapType0Type refType MapType1Type))) (= (type $h1@@1) (MapType0Type refType MapType1Type))) (= (type |f#0@@85|) HandleTypeType)) (= (type |run#0@@29|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@1) ($IsGoodHeap $h1@@1)) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@85| |run#0@@29|) (and ($Is |f#0@@85| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1)) ($Is |run#0@@29| (TSeq Sequences._default.Apply$E@@1))))) (and ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1)))) (forall (($o@@23 T@U) ($f@@1 T@U) ) (! (let ((alpha@@8 (FieldTypeInv0 (type $f@@1)))) (=> (and (and (= (type $o@@23) refType) (= (type $f@@1) (FieldType alpha@@8))) (and (not (= $o@@23 null)) (exists ((|i#0@@41| Int) (|o#0| T@U) ) (!  (and (= (type |o#0|) refType) (and (and ($Is |o#0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@41|) (< |i#0@@41| (|Seq#Length| |run#0@@29|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@85| (|Seq#Index| |run#0@@29| |i#0@@41|)) ($Box |o#0|))))) (= ($Box $o@@23) ($Box |o#0|)))) :qid |Sequencesidfy.133:15| :skolemid |2801| :pattern ( (MapType0Select (Reads1 Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $h0@@1 |f#0@@85| (|Seq#Index| |run#0@@29| |i#0@@41|)) ($Box |o#0|))) )))) (= (MapType1Select (MapType0Select $h0@@1 $o@@23) $f@@1) (MapType1Select (MapType0Select $h1@@1 $o@@23) $f@@1)))) :qid |unknown.0:0| :skolemid |2802| :no-pattern (type $o@@23) :no-pattern (type $f@@1) :no-pattern (U_2_int $o@@23) :no-pattern (U_2_bool $o@@23) :no-pattern (U_2_int $f@@1) :no-pattern (U_2_bool $f@@1) ))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@46 $h0@@1 |f#0@@85| |run#0@@29|) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@46 $h1@@1 |f#0@@85| |run#0@@29|))) :qid |unknown.0:0| :skolemid |2803| :pattern ( ($IsHeapAnchor $h0@@1) ($HeapSucc $h0@@1 $h1@@1) (Sequences.__default.Apply Sequences._default.Apply$E@@1 Sequences._default.Apply$R@@1 $ly@@46 $h1@@1 |f#0@@85| |run#0@@29|)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@2 T@U) (Sequences._default.Apply$R@@2 T@U) ($ly@@47 T@U) ($Heap@@11 T@U) (|f#0@@86| T@U) (|run#0@@30| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@2) TyType) (= (type Sequences._default.Apply$R@@2) TyType)) (= (type $ly@@47) LayerTypeType)) (= (type $Heap@@11) (MapType0Type refType MapType1Type))) (= (type |f#0@@86|) HandleTypeType)) (= (type |run#0@@30|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@11 |f#0@@86| |run#0@@30|) (and (and (and ($IsGoodHeap $Heap@@11) ($Is |f#0@@86| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2))) ($Is |run#0@@30| (TSeq Sequences._default.Apply$E@@2))) (forall ((|i#1@@9| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@9|) (< |i#1@@9| (|Seq#Length| |run#0@@30|))) (Requires1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@11 |f#0@@86| (|Seq#Index| |run#0@@30| |i#1@@9|)))) :qid |Sequencesidfy.130:21| :skolemid |2804| :pattern ( (|Seq#Index| |run#0@@30| |i#1@@9|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@47 $Heap@@11 |f#0@@86| |run#0@@30|)) (|Seq#Length| |run#0@@30|)) (forall ((|i#2@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@4|) (< |i#2@@4| (|Seq#Length| |run#0@@30|))) (= (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@47 $Heap@@11 |f#0@@86| |run#0@@30|) |i#2@@4|) (Apply1 Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $Heap@@11 |f#0@@86| (|Seq#Index| |run#0@@30| |i#2@@4|))))) :qid |Sequencesidfy.132:20| :skolemid |2805| :pattern ( (|Seq#Index| |run#0@@30| |i#2@@4|)) :pattern ( (|Seq#Index| (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@47 $Heap@@11 |f#0@@86| |run#0@@30|) |i#2@@4|)) ))) ($Is (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@47 $Heap@@11 |f#0@@86| |run#0@@30|) (TSeq Sequences._default.Apply$R@@2)))) :qid |unknown.0:0| :skolemid |2806| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@2 Sequences._default.Apply$R@@2 $ly@@47 $Heap@@11 |f#0@@86| |run#0@@30|)) ))))
(assert (forall ((Sequences._default.Apply$E@@3 T@U) (Sequences._default.Apply$R@@3 T@U) ($ly@@48 T@U) ($Heap@@12 T@U) (|f#0@@87| T@U) (|run#0@@31| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@3) TyType) (= (type Sequences._default.Apply$R@@3) TyType)) (= (type $ly@@48) LayerTypeType)) (= (type $Heap@@12) (MapType0Type refType MapType1Type))) (= (type |f#0@@87|) HandleTypeType)) (= (type |run#0@@31|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@12) ($Is |f#0@@87| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3))) ($Is |run#0@@31| (TSeq Sequences._default.Apply$E@@3)))) (= (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@48 $Heap@@12 |f#0@@87| |run#0@@31|) (forall ((|i#3@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@2|) (< |i#3@@2| (|Seq#Length| |run#0@@31|))) (Requires1 Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $Heap@@12 |f#0@@87| (|Seq#Index| |run#0@@31| |i#3@@2|)))) :qid |Sequencesidfy.130:21| :skolemid |2807| :pattern ( (|Seq#Index| |run#0@@31| |i#3@@2|)) )))) :qid |unknown.0:0| :skolemid |2808| :pattern ( (|Sequences.__default.Apply#requires| Sequences._default.Apply$E@@3 Sequences._default.Apply$R@@3 $ly@@48 $Heap@@12 |f#0@@87| |run#0@@31|) ($IsGoodHeap $Heap@@12)) )))
(assert  (=> true (forall ((Sequences._default.Apply$E@@4 T@U) (Sequences._default.Apply$R@@4 T@U) ($ly@@49 T@U) ($Heap@@13 T@U) (|f#0@@88| T@U) (|run#0@@32| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.Apply$E@@4) TyType) (= (type Sequences._default.Apply$R@@4) TyType)) (= (type $ly@@49) LayerTypeType)) (= (type $Heap@@13) (MapType0Type refType MapType1Type))) (= (type |f#0@@88|) HandleTypeType)) (= (type |run#0@@32|) (SeqType BoxType))) (or (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@88| |run#0@@32|) (and (and (and ($IsGoodHeap $Heap@@13) ($Is |f#0@@88| (Tclass._System.___hFunc1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4))) ($Is |run#0@@32| (TSeq Sequences._default.Apply$E@@4))) (forall ((|i#3@@3| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@3|) (< |i#3@@3| (|Seq#Length| |run#0@@32|))) (Requires1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@88| (|Seq#Index| |run#0@@32| |i#3@@3|)))) :qid |Sequencesidfy.130:21| :skolemid |2807| :pattern ( (|Seq#Index| |run#0@@32| |i#3@@3|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@32|) (LitInt 0))) (|Sequences.__default.Apply#canCall| Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@88| (|Seq#Drop| |run#0@@32| (LitInt 1)))) (= (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@49) $Heap@@13 |f#0@@88| |run#0@@32|) (ite (= (|Seq#Length| |run#0@@32|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Apply1 Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $Heap@@13 |f#0@@88| (|Seq#Index| |run#0@@32| (LitInt 0)))) (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 $ly@@49 $Heap@@13 |f#0@@88| (|Seq#Drop| |run#0@@32| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |2809| :pattern ( (Sequences.__default.Apply Sequences._default.Apply$E@@4 Sequences._default.Apply$R@@4 ($LS $ly@@49) $Heap@@13 |f#0@@88| |run#0@@32|) ($IsGoodHeap $Heap@@13)) ))))
(assert (forall ((arg0@@528 T@U) (arg1@@232 T@U) (arg2@@151 T@U) (arg3@@109 T@U) (arg4@@88 T@U) (arg5@@70 T@U) ) (! (= (type (Sequences.__default.ApplyOpaque arg0@@528 arg1@@232 arg2@@151 arg3@@109 arg4@@88 arg5@@70)) (SeqType BoxType)) :qid |funType:Sequences.__default.ApplyOpaque| :pattern ( (Sequences.__default.ApplyOpaque arg0@@528 arg1@@232 arg2@@151 arg3@@109 arg4@@88 arg5@@70)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E T@U) (Sequences._default.ApplyOpaque$R T@U) ($ly@@50 T@U) ($Heap@@14 T@U) (|f#0@@89| T@U) (|run#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E) TyType) (= (type Sequences._default.ApplyOpaque$R) TyType)) (= (type $ly@@50) LayerTypeType)) (= (type $Heap@@14) (MapType0Type refType MapType1Type))) (= (type |f#0@@89|) HandleTypeType)) (= (type |run#0@@33|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@50) $Heap@@14 |f#0@@89| |run#0@@33|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R $ly@@50 $Heap@@14 |f#0@@89| |run#0@@33|))) :qid |unknown.0:0| :skolemid |2810| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E Sequences._default.ApplyOpaque$R ($LS $ly@@50) $Heap@@14 |f#0@@89| |run#0@@33|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@0 T@U) (Sequences._default.ApplyOpaque$R@@0 T@U) ($ly@@51 T@U) ($Heap@@15 T@U) (|f#0@@90| T@U) (|run#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@0) TyType) (= (type Sequences._default.ApplyOpaque$R@@0) TyType)) (= (type $ly@@51) LayerTypeType)) (= (type $Heap@@15) (MapType0Type refType MapType1Type))) (= (type |f#0@@90|) HandleTypeType)) (= (type |run#0@@34|) (SeqType BoxType))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $ly@@51 $Heap@@15 |f#0@@90| |run#0@@34|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 $LZ $Heap@@15 |f#0@@90| |run#0@@34|))) :qid |unknown.0:0| :skolemid |2811| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@0 Sequences._default.ApplyOpaque$R@@0 (AsFuelBottom $ly@@51) $Heap@@15 |f#0@@90| |run#0@@34|)) )))
(assert (forall ((Sequences._default.ApplyOpaque$E@@1 T@U) (Sequences._default.ApplyOpaque$R@@1 T@U) ($ly@@52 T@U) ($h0@@2 T@U) ($h1@@2 T@U) (|f#0@@91| T@U) (|run#0@@35| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@1) TyType) (= (type Sequences._default.ApplyOpaque$R@@1) TyType)) (= (type $ly@@52) LayerTypeType)) (= (type $h0@@2) (MapType0Type refType MapType1Type))) (= (type $h1@@2) (MapType0Type refType MapType1Type))) (= (type |f#0@@91|) HandleTypeType)) (= (type |run#0@@35|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@2) ($IsGoodHeap $h1@@2)) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@91| |run#0@@35|) (and ($Is |f#0@@91| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1)) ($Is |run#0@@35| (TSeq Sequences._default.ApplyOpaque$E@@1))))) (and ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2)))) (forall (($o@@24 T@U) ($f@@2 T@U) ) (! (let ((alpha@@9 (FieldTypeInv0 (type $f@@2)))) (=> (and (and (= (type $o@@24) refType) (= (type $f@@2) (FieldType alpha@@9))) (and (not (= $o@@24 null)) (exists ((|i#0@@42| Int) (|o#0@@0| T@U) ) (!  (and (= (type |o#0@@0|) refType) (and (and ($Is |o#0@@0| Tclass._System.object?) (and (and (<= (LitInt 0) |i#0@@42|) (< |i#0@@42| (|Seq#Length| |run#0@@35|))) (U_2_bool (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@91| (|Seq#Index| |run#0@@35| |i#0@@42|)) ($Box |o#0@@0|))))) (= ($Box $o@@24) ($Box |o#0@@0|)))) :qid |Sequencesidfy.144:15| :skolemid |2812| :pattern ( (MapType0Select (Reads1 Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $h0@@2 |f#0@@91| (|Seq#Index| |run#0@@35| |i#0@@42|)) ($Box |o#0@@0|))) )))) (= (MapType1Select (MapType0Select $h0@@2 $o@@24) $f@@2) (MapType1Select (MapType0Select $h1@@2 $o@@24) $f@@2)))) :qid |unknown.0:0| :skolemid |2813| :no-pattern (type $o@@24) :no-pattern (type $f@@2) :no-pattern (U_2_int $o@@24) :no-pattern (U_2_bool $o@@24) :no-pattern (U_2_int $f@@2) :no-pattern (U_2_bool $f@@2) ))) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@52 $h0@@2 |f#0@@91| |run#0@@35|) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@52 $h1@@2 |f#0@@91| |run#0@@35|))) :qid |unknown.0:0| :skolemid |2814| :pattern ( ($IsHeapAnchor $h0@@2) ($HeapSucc $h0@@2 $h1@@2) (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@1 Sequences._default.ApplyOpaque$R@@1 $ly@@52 $h1@@2 |f#0@@91| |run#0@@35|)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@2 T@U) (Sequences._default.ApplyOpaque$R@@2 T@U) ($ly@@53 T@U) ($Heap@@16 T@U) (|f#0@@92| T@U) (|run#0@@36| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@2) TyType) (= (type Sequences._default.ApplyOpaque$R@@2) TyType)) (= (type $ly@@53) LayerTypeType)) (= (type $Heap@@16) (MapType0Type refType MapType1Type))) (= (type |f#0@@92|) HandleTypeType)) (= (type |run#0@@36|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@16 |f#0@@92| |run#0@@36|) (and (and (and ($IsGoodHeap $Heap@@16) ($Is |f#0@@92| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2))) ($Is |run#0@@36| (TSeq Sequences._default.ApplyOpaque$E@@2))) (forall ((|i#1@@10| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@10|) (< |i#1@@10| (|Seq#Length| |run#0@@36|))) (Requires1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@16 |f#0@@92| (|Seq#Index| |run#0@@36| |i#1@@10|)))) :qid |Sequencesidfy.141:21| :skolemid |2815| :pattern ( (|Seq#Index| |run#0@@36| |i#1@@10|)) ))))) (and (and (= (|Seq#Length| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@53 $Heap@@16 |f#0@@92| |run#0@@36|)) (|Seq#Length| |run#0@@36|)) (forall ((|i#2@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@5|) (< |i#2@@5| (|Seq#Length| |run#0@@36|))) (= (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@53 $Heap@@16 |f#0@@92| |run#0@@36|) |i#2@@5|) (Apply1 Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $Heap@@16 |f#0@@92| (|Seq#Index| |run#0@@36| |i#2@@5|))))) :qid |Sequencesidfy.143:20| :skolemid |2816| :pattern ( (|Seq#Index| |run#0@@36| |i#2@@5|)) :pattern ( (|Seq#Index| (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@53 $Heap@@16 |f#0@@92| |run#0@@36|) |i#2@@5|)) ))) ($Is (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@53 $Heap@@16 |f#0@@92| |run#0@@36|) (TSeq Sequences._default.ApplyOpaque$R@@2)))) :qid |unknown.0:0| :skolemid |2817| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@2 Sequences._default.ApplyOpaque$R@@2 $ly@@53 $Heap@@16 |f#0@@92| |run#0@@36|)) ))))
(assert (forall ((Sequences._default.ApplyOpaque$E@@3 T@U) (Sequences._default.ApplyOpaque$R@@3 T@U) ($ly@@54 T@U) ($Heap@@17 T@U) (|f#0@@93| T@U) (|run#0@@37| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@3) TyType) (= (type Sequences._default.ApplyOpaque$R@@3) TyType)) (= (type $ly@@54) LayerTypeType)) (= (type $Heap@@17) (MapType0Type refType MapType1Type))) (= (type |f#0@@93|) HandleTypeType)) (= (type |run#0@@37|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@17) ($Is |f#0@@93| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3))) ($Is |run#0@@37| (TSeq Sequences._default.ApplyOpaque$E@@3)))) (= (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@54 $Heap@@17 |f#0@@93| |run#0@@37|) (forall ((|i#3@@4| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@4|) (< |i#3@@4| (|Seq#Length| |run#0@@37|))) (Requires1 Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $Heap@@17 |f#0@@93| (|Seq#Index| |run#0@@37| |i#3@@4|)))) :qid |Sequencesidfy.141:21| :skolemid |2818| :pattern ( (|Seq#Index| |run#0@@37| |i#3@@4|)) )))) :qid |unknown.0:0| :skolemid |2819| :pattern ( (|Sequences.__default.ApplyOpaque#requires| Sequences._default.ApplyOpaque$E@@3 Sequences._default.ApplyOpaque$R@@3 $ly@@54 $Heap@@17 |f#0@@93| |run#0@@37|) ($IsGoodHeap $Heap@@17)) )))
(assert  (=> true (forall ((Sequences._default.ApplyOpaque$E@@4 T@U) (Sequences._default.ApplyOpaque$R@@4 T@U) ($ly@@55 T@U) ($Heap@@18 T@U) (|f#0@@94| T@U) (|run#0@@38| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.ApplyOpaque$E@@4) TyType) (= (type Sequences._default.ApplyOpaque$R@@4) TyType)) (= (type $ly@@55) LayerTypeType)) (= (type $Heap@@18) (MapType0Type refType MapType1Type))) (= (type |f#0@@94|) HandleTypeType)) (= (type |run#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.ApplyOpaque#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@18 |f#0@@94| |run#0@@38|) (and (and (and ($IsGoodHeap $Heap@@18) ($Is |f#0@@94| (Tclass._System.___hFunc1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4))) ($Is |run#0@@38| (TSeq Sequences._default.ApplyOpaque$E@@4))) (forall ((|i#3@@5| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#3@@5|) (< |i#3@@5| (|Seq#Length| |run#0@@38|))) (Requires1 Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@18 |f#0@@94| (|Seq#Index| |run#0@@38| |i#3@@5|)))) :qid |Sequencesidfy.141:21| :skolemid |2818| :pattern ( (|Seq#Index| |run#0@@38| |i#3@@5|)) ))))) (and (|Sequences.__default.Apply#canCall| Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 $Heap@@18 |f#0@@94| |run#0@@38|) (= (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@55) $Heap@@18 |f#0@@94| |run#0@@38|) (Sequences.__default.Apply Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $LZ) $Heap@@18 |f#0@@94| |run#0@@38|)))) :qid |unknown.0:0| :skolemid |2820| :pattern ( (Sequences.__default.ApplyOpaque Sequences._default.ApplyOpaque$E@@4 Sequences._default.ApplyOpaque$R@@4 ($LS $ly@@55) $Heap@@18 |f#0@@94| |run#0@@38|) ($IsGoodHeap $Heap@@18)) ))))
(assert (forall ((arg0@@529 T@U) (arg1@@233 T@U) (arg2@@152 T@U) (arg3@@110 T@U) (arg4@@89 T@U) ) (! (= (type (Sequences.__default.Filter arg0@@529 arg1@@233 arg2@@152 arg3@@110 arg4@@89)) (SeqType BoxType)) :qid |funType:Sequences.__default.Filter| :pattern ( (Sequences.__default.Filter arg0@@529 arg1@@233 arg2@@152 arg3@@110 arg4@@89)) )))
(assert (forall ((Sequences._default.Filter$E T@U) ($ly@@56 T@U) ($Heap@@19 T@U) (|f#0@@95| T@U) (|run#0@@39| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E) TyType) (= (type $ly@@56) LayerTypeType)) (= (type $Heap@@19) (MapType0Type refType MapType1Type))) (= (type |f#0@@95|) HandleTypeType)) (= (type |run#0@@39|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@56) $Heap@@19 |f#0@@95| |run#0@@39|) (Sequences.__default.Filter Sequences._default.Filter$E $ly@@56 $Heap@@19 |f#0@@95| |run#0@@39|))) :qid |unknown.0:0| :skolemid |2821| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E ($LS $ly@@56) $Heap@@19 |f#0@@95| |run#0@@39|)) )))
(assert (forall ((Sequences._default.Filter$E@@0 T@U) ($ly@@57 T@U) ($Heap@@20 T@U) (|f#0@@96| T@U) (|run#0@@40| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Filter$E@@0) TyType) (= (type $ly@@57) LayerTypeType)) (= (type $Heap@@20) (MapType0Type refType MapType1Type))) (= (type |f#0@@96|) HandleTypeType)) (= (type |run#0@@40|) (SeqType BoxType))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@0 $ly@@57 $Heap@@20 |f#0@@96| |run#0@@40|) (Sequences.__default.Filter Sequences._default.Filter$E@@0 $LZ $Heap@@20 |f#0@@96| |run#0@@40|))) :qid |unknown.0:0| :skolemid |2822| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@0 (AsFuelBottom $ly@@57) $Heap@@20 |f#0@@96| |run#0@@40|)) )))
(assert (forall ((Sequences._default.Filter$E@@1 T@U) ($ly@@58 T@U) ($h0@@3 T@U) ($h1@@3 T@U) (|f#0@@97| T@U) (|run#0@@41| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.Filter$E@@1) TyType) (= (type $ly@@58) LayerTypeType)) (= (type $h0@@3) (MapType0Type refType MapType1Type))) (= (type $h1@@3) (MapType0Type refType MapType1Type))) (= (type |f#0@@97|) HandleTypeType)) (= (type |run#0@@41|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $h0@@3) ($IsGoodHeap $h1@@3)) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@1 $h0@@3 |f#0@@97| |run#0@@41|) (and ($Is |f#0@@97| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@1 TBool)) ($Is |run#0@@41| (TSeq Sequences._default.Filter$E@@1))))) (and ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3)))) (forall (($o@@25 T@U) ($f@@3 T@U) ) (! (let ((alpha@@10 (FieldTypeInv0 (type $f@@3)))) (=> (and (and (= (type $o@@25) refType) (= (type $f@@3) (FieldType alpha@@10))) (and (not (= $o@@25 null)) (exists ((|_x0#0| T@U) (|_o0#0| T@U) ) (!  (and (and (= (type |_x0#0|) BoxType) (= (type |_o0#0|) refType)) (and (and (and ($IsBox |_x0#0| Sequences._default.Filter$E@@1) ($Is |_o0#0| Tclass._System.object?)) (U_2_bool (MapType0Select (Reads1 Sequences._default.Filter$E@@1 TBool $h0@@3 |f#0@@97| |_x0#0|) ($Box |_o0#0|)))) (= ($Box $o@@25) ($Box |_o0#0|)))) :qid |Sequencesidfy.153:13| :skolemid |2823| :no-pattern (type |_x0#0|) :no-pattern (type |_o0#0|) :no-pattern (U_2_int |_x0#0|) :no-pattern (U_2_bool |_x0#0|) :no-pattern (U_2_int |_o0#0|) :no-pattern (U_2_bool |_o0#0|) )))) (= (MapType1Select (MapType0Select $h0@@3 $o@@25) $f@@3) (MapType1Select (MapType0Select $h1@@3 $o@@25) $f@@3)))) :qid |unknown.0:0| :skolemid |2824| :no-pattern (type $o@@25) :no-pattern (type $f@@3) :no-pattern (U_2_int $o@@25) :no-pattern (U_2_bool $o@@25) :no-pattern (U_2_int $f@@3) :no-pattern (U_2_bool $f@@3) ))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@58 $h0@@3 |f#0@@97| |run#0@@41|) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@58 $h1@@3 |f#0@@97| |run#0@@41|))) :qid |unknown.0:0| :skolemid |2825| :pattern ( ($IsHeapAnchor $h0@@3) ($HeapSucc $h0@@3 $h1@@3) (Sequences.__default.Filter Sequences._default.Filter$E@@1 $ly@@58 $h1@@3 |f#0@@97| |run#0@@41|)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@2 T@U) ($ly@@59 T@U) ($Heap@@21 T@U) (|f#0@@98| T@U) (|run#0@@42| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@2) TyType) (= (type $ly@@59) LayerTypeType)) (= (type $Heap@@21) (MapType0Type refType MapType1Type))) (= (type |f#0@@98|) HandleTypeType)) (= (type |run#0@@42|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@2 $Heap@@21 |f#0@@98| |run#0@@42|) (and (and (and ($IsGoodHeap $Heap@@21) ($Is |f#0@@98| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@2 TBool))) ($Is |run#0@@42| (TSeq Sequences._default.Filter$E@@2))) (forall ((|i#0@@43| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@43|) (< |i#0@@43| (|Seq#Length| |run#0@@42|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@21 |f#0@@98| (|Seq#Index| |run#0@@42| |i#0@@43|)))) :qid |Sequencesidfy.150:21| :skolemid |2826| :pattern ( (|Seq#Index| |run#0@@42| |i#0@@43|)) ))))) (and (and (<= (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@59 $Heap@@21 |f#0@@98| |run#0@@42|)) (|Seq#Length| |run#0@@42|)) (forall ((|i#1@@11| Int) ) (!  (=> (<= (LitInt 0) |i#1@@11|) (=> (and (< |i#1@@11| (|Seq#Length| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@59 $Heap@@21 |f#0@@98| |run#0@@42|))) (Requires1 Sequences._default.Filter$E@@2 TBool $Heap@@21 |f#0@@98| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@59 $Heap@@21 |f#0@@98| |run#0@@42|) |i#1@@11|))) (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@2 TBool $Heap@@21 |f#0@@98| (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@59 $Heap@@21 |f#0@@98| |run#0@@42|) |i#1@@11|)))))) :qid |Sequencesidfy.152:20| :skolemid |2827| :pattern ( (|Seq#Index| (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@59 $Heap@@21 |f#0@@98| |run#0@@42|) |i#1@@11|)) ))) ($Is (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@59 $Heap@@21 |f#0@@98| |run#0@@42|) (TSeq Sequences._default.Filter$E@@2)))) :qid |unknown.0:0| :skolemid |2828| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@2 $ly@@59 $Heap@@21 |f#0@@98| |run#0@@42|)) ))))
(assert (forall ((Sequences._default.Filter$E@@3 T@U) ($ly@@60 T@U) ($Heap@@22 T@U) (|f#0@@99| T@U) (|run#0@@43| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@3) TyType) (= (type $ly@@60) LayerTypeType)) (= (type $Heap@@22) (MapType0Type refType MapType1Type))) (= (type |f#0@@99|) HandleTypeType)) (= (type |run#0@@43|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@22) ($Is |f#0@@99| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@3 TBool))) ($Is |run#0@@43| (TSeq Sequences._default.Filter$E@@3)))) (= (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@60 $Heap@@22 |f#0@@99| |run#0@@43|) (forall ((|i#2@@6| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@6|) (< |i#2@@6| (|Seq#Length| |run#0@@43|))) (Requires1 Sequences._default.Filter$E@@3 TBool $Heap@@22 |f#0@@99| (|Seq#Index| |run#0@@43| |i#2@@6|)))) :qid |Sequencesidfy.150:21| :skolemid |2829| :pattern ( (|Seq#Index| |run#0@@43| |i#2@@6|)) )))) :qid |unknown.0:0| :skolemid |2830| :pattern ( (|Sequences.__default.Filter#requires| Sequences._default.Filter$E@@3 $ly@@60 $Heap@@22 |f#0@@99| |run#0@@43|) ($IsGoodHeap $Heap@@22)) )))
(assert  (=> true (forall ((Sequences._default.Filter$E@@4 T@U) ($ly@@61 T@U) ($Heap@@23 T@U) (|f#0@@100| T@U) (|run#0@@44| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Filter$E@@4) TyType) (= (type $ly@@61) LayerTypeType)) (= (type $Heap@@23) (MapType0Type refType MapType1Type))) (= (type |f#0@@100|) HandleTypeType)) (= (type |run#0@@44|) (SeqType BoxType))) (or (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@23 |f#0@@100| |run#0@@44|) (and (and (and ($IsGoodHeap $Heap@@23) ($Is |f#0@@100| (Tclass._System.___hFunc1 Sequences._default.Filter$E@@4 TBool))) ($Is |run#0@@44| (TSeq Sequences._default.Filter$E@@4))) (forall ((|i#2@@7| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#2@@7|) (< |i#2@@7| (|Seq#Length| |run#0@@44|))) (Requires1 Sequences._default.Filter$E@@4 TBool $Heap@@23 |f#0@@100| (|Seq#Index| |run#0@@44| |i#2@@7|)))) :qid |Sequencesidfy.150:21| :skolemid |2829| :pattern ( (|Seq#Index| |run#0@@44| |i#2@@7|)) ))))) (and (=> (not (= (|Seq#Length| |run#0@@44|) (LitInt 0))) (|Sequences.__default.Filter#canCall| Sequences._default.Filter$E@@4 $Heap@@23 |f#0@@100| (|Seq#Drop| |run#0@@44| (LitInt 1)))) (= (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@61) $Heap@@23 |f#0@@100| |run#0@@44|) (ite (= (|Seq#Length| |run#0@@44|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ite (U_2_bool ($Unbox boolType (Apply1 Sequences._default.Filter$E@@4 TBool $Heap@@23 |f#0@@100| (|Seq#Index| |run#0@@44| (LitInt 0))))) (|Seq#Build| (|Seq#Empty| BoxType) (|Seq#Index| |run#0@@44| (LitInt 0))) (|Seq#Empty| BoxType)) (Sequences.__default.Filter Sequences._default.Filter$E@@4 $ly@@61 $Heap@@23 |f#0@@100| (|Seq#Drop| |run#0@@44| (LitInt 1)))))))) :qid |unknown.0:0| :skolemid |2831| :pattern ( (Sequences.__default.Filter Sequences._default.Filter$E@@4 ($LS $ly@@61) $Heap@@23 |f#0@@100| |run#0@@44|) ($IsGoodHeap $Heap@@23)) ))))
(assert (forall ((arg0@@530 T@U) (arg1@@234 T@U) (arg2@@153 T@U) (arg3@@111 T@U) (arg4@@90 T@U) (arg5@@71 T@U) ) (! (= (type (Sequences.__default.FoldLeft arg0@@530 arg1@@234 arg2@@153 arg3@@111 arg4@@90 arg5@@71)) BoxType) :qid |funType:Sequences.__default.FoldLeft| :pattern ( (Sequences.__default.FoldLeft arg0@@530 arg1@@234 arg2@@153 arg3@@111 arg4@@90 arg5@@71)) )))
(assert (forall ((Sequences._default.FoldLeft$A T@U) (Sequences._default.FoldLeft$E T@U) ($ly@@62 T@U) (|f#0@@101| T@U) (|init#0| T@U) (|run#0@@45| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A) TyType) (= (type Sequences._default.FoldLeft$E) TyType)) (= (type $ly@@62) LayerTypeType)) (= (type |f#0@@101|) HandleTypeType)) (= (type |init#0|) BoxType)) (= (type |run#0@@45|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@62) |f#0@@101| |init#0| |run#0@@45|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E $ly@@62 |f#0@@101| |init#0| |run#0@@45|))) :qid |unknown.0:0| :skolemid |2832| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A Sequences._default.FoldLeft$E ($LS $ly@@62) |f#0@@101| |init#0| |run#0@@45|)) )))
(assert (forall ((Sequences._default.FoldLeft$A@@0 T@U) (Sequences._default.FoldLeft$E@@0 T@U) ($ly@@63 T@U) (|f#0@@102| T@U) (|init#0@@0| T@U) (|run#0@@46| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@0) TyType) (= (type Sequences._default.FoldLeft$E@@0) TyType)) (= (type $ly@@63) LayerTypeType)) (= (type |f#0@@102|) HandleTypeType)) (= (type |init#0@@0|) BoxType)) (= (type |run#0@@46|) (SeqType BoxType))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $ly@@63 |f#0@@102| |init#0@@0| |run#0@@46|) (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 $LZ |f#0@@102| |init#0@@0| |run#0@@46|))) :qid |unknown.0:0| :skolemid |2833| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@0 Sequences._default.FoldLeft$E@@0 (AsFuelBottom $ly@@63) |f#0@@102| |init#0@@0| |run#0@@46|)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@1 T@U) (Sequences._default.FoldLeft$E@@1 T@U) ($ly@@64 T@U) (|f#0@@103| T@U) (|init#0@@1| T@U) (|run#0@@47| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@1) TyType) (= (type Sequences._default.FoldLeft$E@@1) TyType)) (= (type $ly@@64) LayerTypeType)) (= (type |f#0@@103|) HandleTypeType)) (= (type |init#0@@1|) BoxType)) (= (type |run#0@@47|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 |f#0@@103| |init#0@@1| |run#0@@47|) (and (and ($Is |f#0@@103| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 Sequences._default.FoldLeft$A@@1)) ($IsBox |init#0@@1| Sequences._default.FoldLeft$A@@1)) ($Is |run#0@@47| (TSeq Sequences._default.FoldLeft$E@@1))))) ($IsBox (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@64 |f#0@@103| |init#0@@1| |run#0@@47|) Sequences._default.FoldLeft$A@@1)) :qid |unknown.0:0| :skolemid |2834| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@1 Sequences._default.FoldLeft$E@@1 $ly@@64 |f#0@@103| |init#0@@1| |run#0@@47|)) ))))
(assert (forall ((Sequences._default.FoldLeft$A@@2 T@U) (Sequences._default.FoldLeft$E@@2 T@U) ($ly@@65 T@U) ($Heap@@24 T@U) (|f#0@@104| T@U) (|init#0@@2| T@U) (|run#0@@48| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@2) TyType) (= (type Sequences._default.FoldLeft$E@@2) TyType)) (= (type $ly@@65) LayerTypeType)) (= (type $Heap@@24) (MapType0Type refType MapType1Type))) (= (type |f#0@@104|) HandleTypeType)) (= (type |init#0@@2|) BoxType)) (= (type |run#0@@48|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@24) ($Is |f#0@@104| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 Sequences._default.FoldLeft$A@@2))) ($IsBox |init#0@@2| Sequences._default.FoldLeft$A@@2)) ($Is |run#0@@48| (TSeq Sequences._default.FoldLeft$E@@2)))) (= (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@65 |f#0@@104| |init#0@@2| |run#0@@48|) true)) :qid |unknown.0:0| :skolemid |2835| :pattern ( (|Sequences.__default.FoldLeft#requires| Sequences._default.FoldLeft$A@@2 Sequences._default.FoldLeft$E@@2 $ly@@65 |f#0@@104| |init#0@@2| |run#0@@48|) ($IsGoodHeap $Heap@@24)) )))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@3 T@U) (Sequences._default.FoldLeft$E@@3 T@U) ($ly@@66 T@U) ($Heap@@25 T@U) (|f#0@@105| T@U) (|init#0@@3| T@U) (|run#0@@49| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@3) TyType) (= (type Sequences._default.FoldLeft$E@@3) TyType)) (= (type $ly@@66) LayerTypeType)) (= (type $Heap@@25) (MapType0Type refType MapType1Type))) (= (type |f#0@@105|) HandleTypeType)) (= (type |init#0@@3|) BoxType)) (= (type |run#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@105| |init#0@@3| |run#0@@49|) (and (and (and ($IsGoodHeap $Heap@@25) ($Is |f#0@@105| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3))) ($IsBox |init#0@@3| Sequences._default.FoldLeft$A@@3)) ($Is |run#0@@49| (TSeq Sequences._default.FoldLeft$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@49|) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 |f#0@@105| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@25 |f#0@@105| |init#0@@3| (|Seq#Index| |run#0@@49| (LitInt 0))) (|Seq#Drop| |run#0@@49| (LitInt 1)))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@66) |f#0@@105| |init#0@@3| |run#0@@49|) (ite (= (|Seq#Length| |run#0@@49|) (LitInt 0)) |init#0@@3| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 $ly@@66 |f#0@@105| (Apply2 Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 Sequences._default.FoldLeft$A@@3 $Heap@@25 |f#0@@105| |init#0@@3| (|Seq#Index| |run#0@@49| (LitInt 0))) (|Seq#Drop| |run#0@@49| (LitInt 1))))))) :qid |unknown.0:0| :skolemid |2836| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@3 Sequences._default.FoldLeft$E@@3 ($LS $ly@@66) |f#0@@105| |init#0@@3| |run#0@@49|) ($IsGoodHeap $Heap@@25)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@4 T@U) (Sequences._default.FoldLeft$E@@4 T@U) ($ly@@67 T@U) ($Heap@@26 T@U) (|f#0@@106| T@U) (|init#0@@4| T@U) (|run#0@@50| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@4) TyType) (= (type Sequences._default.FoldLeft$E@@4) TyType)) (= (type $ly@@67) LayerTypeType)) (= (type $Heap@@26) (MapType0Type refType MapType1Type))) (= (type |f#0@@106|) HandleTypeType)) (= (type |init#0@@4|) BoxType)) (= (type |run#0@@50|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@106| |init#0@@4| (Lit |run#0@@50|)) (and (and (and ($IsGoodHeap $Heap@@26) ($Is |f#0@@106| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4))) ($IsBox |init#0@@4| Sequences._default.FoldLeft$A@@4)) ($Is |run#0@@50| (TSeq Sequences._default.FoldLeft$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@50|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 |f#0@@106| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@26 |f#0@@106| |init#0@@4| (|Seq#Index| (Lit |run#0@@50|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@50|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@67) |f#0@@106| |init#0@@4| (Lit |run#0@@50|)) (ite (= (|Seq#Length| (Lit |run#0@@50|)) (LitInt 0)) |init#0@@4| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@67) |f#0@@106| (Apply2 Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 Sequences._default.FoldLeft$A@@4 $Heap@@26 |f#0@@106| |init#0@@4| (|Seq#Index| (Lit |run#0@@50|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@50|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2837| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@4 Sequences._default.FoldLeft$E@@4 ($LS $ly@@67) |f#0@@106| |init#0@@4| (Lit |run#0@@50|)) ($IsGoodHeap $Heap@@26)) ))))
(assert  (=> true (forall ((Sequences._default.FoldLeft$A@@5 T@U) (Sequences._default.FoldLeft$E@@5 T@U) ($ly@@68 T@U) ($Heap@@27 T@U) (|f#0@@107| T@U) (|init#0@@5| T@U) (|run#0@@51| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldLeft$A@@5) TyType) (= (type Sequences._default.FoldLeft$E@@5) TyType)) (= (type $ly@@68) LayerTypeType)) (= (type $Heap@@27) (MapType0Type refType MapType1Type))) (= (type |f#0@@107|) HandleTypeType)) (= (type |init#0@@5|) BoxType)) (= (type |run#0@@51|) (SeqType BoxType))) (or (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@107|) (Lit |init#0@@5|) (Lit |run#0@@51|)) (and (and (and ($IsGoodHeap $Heap@@27) ($Is |f#0@@107| (Tclass._System.___hTotalFunc2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5))) ($IsBox |init#0@@5| Sequences._default.FoldLeft$A@@5)) ($Is |run#0@@51| (TSeq Sequences._default.FoldLeft$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@51|)) (LitInt 0))) (|Sequences.__default.FoldLeft#canCall| Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 (Lit |f#0@@107|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@27 (Lit |f#0@@107|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@51|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@51|) (LitInt 1))))) (= (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@68) (Lit |f#0@@107|) (Lit |init#0@@5|) (Lit |run#0@@51|)) (ite (= (|Seq#Length| (Lit |run#0@@51|)) (LitInt 0)) |init#0@@5| (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@68) (Lit |f#0@@107|) (Apply2 Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 Sequences._default.FoldLeft$A@@5 $Heap@@27 (Lit |f#0@@107|) (Lit |init#0@@5|) (|Seq#Index| (Lit |run#0@@51|) (LitInt 0))) (Lit (|Seq#Drop| (Lit |run#0@@51|) (LitInt 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2838| :pattern ( (Sequences.__default.FoldLeft Sequences._default.FoldLeft$A@@5 Sequences._default.FoldLeft$E@@5 ($LS $ly@@68) (Lit |f#0@@107|) (Lit |init#0@@5|) (Lit |run#0@@51|)) ($IsGoodHeap $Heap@@27)) ))))
(assert (forall ((arg0@@531 T@U) (arg1@@235 T@U) (arg2@@154 T@U) (arg3@@112 T@U) (arg4@@91 T@U) (arg5@@72 T@U) ) (! (= (type (Sequences.__default.FoldRight arg0@@531 arg1@@235 arg2@@154 arg3@@112 arg4@@91 arg5@@72)) BoxType) :qid |funType:Sequences.__default.FoldRight| :pattern ( (Sequences.__default.FoldRight arg0@@531 arg1@@235 arg2@@154 arg3@@112 arg4@@91 arg5@@72)) )))
(assert (forall ((Sequences._default.FoldRight$A T@U) (Sequences._default.FoldRight$E T@U) ($ly@@69 T@U) (|f#0@@108| T@U) (|init#0@@6| T@U) (|run#0@@52| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A) TyType) (= (type Sequences._default.FoldRight$E) TyType)) (= (type $ly@@69) LayerTypeType)) (= (type |f#0@@108|) HandleTypeType)) (= (type |init#0@@6|) BoxType)) (= (type |run#0@@52|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@69) |f#0@@108| |init#0@@6| |run#0@@52|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E $ly@@69 |f#0@@108| |init#0@@6| |run#0@@52|))) :qid |unknown.0:0| :skolemid |2839| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A Sequences._default.FoldRight$E ($LS $ly@@69) |f#0@@108| |init#0@@6| |run#0@@52|)) )))
(assert (forall ((Sequences._default.FoldRight$A@@0 T@U) (Sequences._default.FoldRight$E@@0 T@U) ($ly@@70 T@U) (|f#0@@109| T@U) (|init#0@@7| T@U) (|run#0@@53| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@0) TyType) (= (type Sequences._default.FoldRight$E@@0) TyType)) (= (type $ly@@70) LayerTypeType)) (= (type |f#0@@109|) HandleTypeType)) (= (type |init#0@@7|) BoxType)) (= (type |run#0@@53|) (SeqType BoxType))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $ly@@70 |f#0@@109| |init#0@@7| |run#0@@53|) (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 $LZ |f#0@@109| |init#0@@7| |run#0@@53|))) :qid |unknown.0:0| :skolemid |2840| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@0 Sequences._default.FoldRight$E@@0 (AsFuelBottom $ly@@70) |f#0@@109| |init#0@@7| |run#0@@53|)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@1 T@U) (Sequences._default.FoldRight$E@@1 T@U) ($ly@@71 T@U) (|f#0@@110| T@U) (|init#0@@8| T@U) (|run#0@@54| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@1) TyType) (= (type Sequences._default.FoldRight$E@@1) TyType)) (= (type $ly@@71) LayerTypeType)) (= (type |f#0@@110|) HandleTypeType)) (= (type |init#0@@8|) BoxType)) (= (type |run#0@@54|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 |f#0@@110| |init#0@@8| |run#0@@54|) (and (and ($Is |f#0@@110| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 Sequences._default.FoldRight$A@@1)) ($IsBox |init#0@@8| Sequences._default.FoldRight$A@@1)) ($Is |run#0@@54| (TSeq Sequences._default.FoldRight$E@@1))))) ($IsBox (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@71 |f#0@@110| |init#0@@8| |run#0@@54|) Sequences._default.FoldRight$A@@1)) :qid |unknown.0:0| :skolemid |2841| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@1 Sequences._default.FoldRight$E@@1 $ly@@71 |f#0@@110| |init#0@@8| |run#0@@54|)) ))))
(assert (forall ((Sequences._default.FoldRight$A@@2 T@U) (Sequences._default.FoldRight$E@@2 T@U) ($ly@@72 T@U) ($Heap@@28 T@U) (|f#0@@111| T@U) (|init#0@@9| T@U) (|run#0@@55| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@2) TyType) (= (type Sequences._default.FoldRight$E@@2) TyType)) (= (type $ly@@72) LayerTypeType)) (= (type $Heap@@28) (MapType0Type refType MapType1Type))) (= (type |f#0@@111|) HandleTypeType)) (= (type |init#0@@9|) BoxType)) (= (type |run#0@@55|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@28) ($Is |f#0@@111| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 Sequences._default.FoldRight$A@@2))) ($IsBox |init#0@@9| Sequences._default.FoldRight$A@@2)) ($Is |run#0@@55| (TSeq Sequences._default.FoldRight$E@@2)))) (= (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@72 |f#0@@111| |init#0@@9| |run#0@@55|) true)) :qid |unknown.0:0| :skolemid |2842| :pattern ( (|Sequences.__default.FoldRight#requires| Sequences._default.FoldRight$A@@2 Sequences._default.FoldRight$E@@2 $ly@@72 |f#0@@111| |init#0@@9| |run#0@@55|) ($IsGoodHeap $Heap@@28)) )))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@3 T@U) (Sequences._default.FoldRight$E@@3 T@U) ($ly@@73 T@U) ($Heap@@29 T@U) (|f#0@@112| T@U) (|init#0@@10| T@U) (|run#0@@56| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@3) TyType) (= (type Sequences._default.FoldRight$E@@3) TyType)) (= (type $ly@@73) LayerTypeType)) (= (type $Heap@@29) (MapType0Type refType MapType1Type))) (= (type |f#0@@112|) HandleTypeType)) (= (type |init#0@@10|) BoxType)) (= (type |run#0@@56|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@112| |init#0@@10| |run#0@@56|) (and (and (and ($IsGoodHeap $Heap@@29) ($Is |f#0@@112| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3))) ($IsBox |init#0@@10| Sequences._default.FoldRight$A@@3)) ($Is |run#0@@56| (TSeq Sequences._default.FoldRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@56|) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 |f#0@@112| |init#0@@10| (|Seq#Drop| |run#0@@56| (LitInt 1)))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@73) |f#0@@112| |init#0@@10| |run#0@@56|) (ite (= (|Seq#Length| |run#0@@56|) (LitInt 0)) |init#0@@10| (Apply2 Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 Sequences._default.FoldRight$A@@3 $Heap@@29 |f#0@@112| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 $ly@@73 |f#0@@112| |init#0@@10| (|Seq#Drop| |run#0@@56| (LitInt 1))) (|Seq#Index| |run#0@@56| (LitInt 0))))))) :qid |unknown.0:0| :skolemid |2843| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@3 Sequences._default.FoldRight$E@@3 ($LS $ly@@73) |f#0@@112| |init#0@@10| |run#0@@56|) ($IsGoodHeap $Heap@@29)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@4 T@U) (Sequences._default.FoldRight$E@@4 T@U) ($ly@@74 T@U) ($Heap@@30 T@U) (|f#0@@113| T@U) (|init#0@@11| T@U) (|run#0@@57| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@4) TyType) (= (type Sequences._default.FoldRight$E@@4) TyType)) (= (type $ly@@74) LayerTypeType)) (= (type $Heap@@30) (MapType0Type refType MapType1Type))) (= (type |f#0@@113|) HandleTypeType)) (= (type |init#0@@11|) BoxType)) (= (type |run#0@@57|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@113| |init#0@@11| (Lit |run#0@@57|)) (and (and (and ($IsGoodHeap $Heap@@30) ($Is |f#0@@113| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4))) ($IsBox |init#0@@11| Sequences._default.FoldRight$A@@4)) ($Is |run#0@@57| (TSeq Sequences._default.FoldRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@57|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 |f#0@@113| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@57|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@74) |f#0@@113| |init#0@@11| (Lit |run#0@@57|)) (ite (= (|Seq#Length| (Lit |run#0@@57|)) (LitInt 0)) |init#0@@11| (Apply2 Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 Sequences._default.FoldRight$A@@4 $Heap@@30 |f#0@@113| (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@74) |f#0@@113| |init#0@@11| (Lit (|Seq#Drop| (Lit |run#0@@57|) (LitInt 1)))) (|Seq#Index| (Lit |run#0@@57|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |2844| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@4 Sequences._default.FoldRight$E@@4 ($LS $ly@@74) |f#0@@113| |init#0@@11| (Lit |run#0@@57|)) ($IsGoodHeap $Heap@@30)) ))))
(assert  (=> true (forall ((Sequences._default.FoldRight$A@@5 T@U) (Sequences._default.FoldRight$E@@5 T@U) ($ly@@75 T@U) ($Heap@@31 T@U) (|f#0@@114| T@U) (|init#0@@12| T@U) (|run#0@@58| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldRight$A@@5) TyType) (= (type Sequences._default.FoldRight$E@@5) TyType)) (= (type $ly@@75) LayerTypeType)) (= (type $Heap@@31) (MapType0Type refType MapType1Type))) (= (type |f#0@@114|) HandleTypeType)) (= (type |init#0@@12|) BoxType)) (= (type |run#0@@58|) (SeqType BoxType))) (or (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@114|) (Lit |init#0@@12|) (Lit |run#0@@58|)) (and (and (and ($IsGoodHeap $Heap@@31) ($Is |f#0@@114| (Tclass._System.___hTotalFunc2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5))) ($IsBox |init#0@@12| Sequences._default.FoldRight$A@@5)) ($Is |run#0@@58| (TSeq Sequences._default.FoldRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@58|)) (LitInt 0))) (|Sequences.__default.FoldRight#canCall| Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 (Lit |f#0@@114|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@58|) (LitInt 1))))) (= (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@75) (Lit |f#0@@114|) (Lit |init#0@@12|) (Lit |run#0@@58|)) (ite (= (|Seq#Length| (Lit |run#0@@58|)) (LitInt 0)) |init#0@@12| (Apply2 Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 Sequences._default.FoldRight$A@@5 $Heap@@31 (Lit |f#0@@114|) (Lit (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@75) (Lit |f#0@@114|) (Lit |init#0@@12|) (Lit (|Seq#Drop| (Lit |run#0@@58|) (LitInt 1))))) (|Seq#Index| (Lit |run#0@@58|) (LitInt 0))))))) :qid |unknown.0:0| :weight 3 :skolemid |2845| :pattern ( (Sequences.__default.FoldRight Sequences._default.FoldRight$A@@5 Sequences._default.FoldRight$E@@5 ($LS $ly@@75) (Lit |f#0@@114|) (Lit |init#0@@12|) (Lit |run#0@@58|)) ($IsGoodHeap $Heap@@31)) ))))
(assert (forall ((arg0@@532 T@U) (arg1@@236 T@U) (arg2@@155 T@U) (arg3@@113 T@U) (arg4@@92 T@U) (arg5@@73 T@U) ) (! (= (type (Sequences.__default.FoldFromRight arg0@@532 arg1@@236 arg2@@155 arg3@@113 arg4@@92 arg5@@73)) BoxType) :qid |funType:Sequences.__default.FoldFromRight| :pattern ( (Sequences.__default.FoldFromRight arg0@@532 arg1@@236 arg2@@155 arg3@@113 arg4@@92 arg5@@73)) )))
(assert (forall ((Sequences._default.FoldFromRight$A T@U) (Sequences._default.FoldFromRight$E T@U) ($ly@@76 T@U) (|f#0@@115| T@U) (|init#0@@13| T@U) (|run#0@@59| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A) TyType) (= (type Sequences._default.FoldFromRight$E) TyType)) (= (type $ly@@76) LayerTypeType)) (= (type |f#0@@115|) HandleTypeType)) (= (type |init#0@@13|) BoxType)) (= (type |run#0@@59|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@76) |f#0@@115| |init#0@@13| |run#0@@59|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E $ly@@76 |f#0@@115| |init#0@@13| |run#0@@59|))) :qid |unknown.0:0| :skolemid |2846| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A Sequences._default.FoldFromRight$E ($LS $ly@@76) |f#0@@115| |init#0@@13| |run#0@@59|)) )))
(assert (forall ((Sequences._default.FoldFromRight$A@@0 T@U) (Sequences._default.FoldFromRight$E@@0 T@U) ($ly@@77 T@U) (|f#0@@116| T@U) (|init#0@@14| T@U) (|run#0@@60| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@0) TyType) (= (type Sequences._default.FoldFromRight$E@@0) TyType)) (= (type $ly@@77) LayerTypeType)) (= (type |f#0@@116|) HandleTypeType)) (= (type |init#0@@14|) BoxType)) (= (type |run#0@@60|) (SeqType BoxType))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $ly@@77 |f#0@@116| |init#0@@14| |run#0@@60|) (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 $LZ |f#0@@116| |init#0@@14| |run#0@@60|))) :qid |unknown.0:0| :skolemid |2847| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@0 Sequences._default.FoldFromRight$E@@0 (AsFuelBottom $ly@@77) |f#0@@116| |init#0@@14| |run#0@@60|)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@1 T@U) (Sequences._default.FoldFromRight$E@@1 T@U) ($ly@@78 T@U) (|f#0@@117| T@U) (|init#0@@15| T@U) (|run#0@@61| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@1) TyType) (= (type Sequences._default.FoldFromRight$E@@1) TyType)) (= (type $ly@@78) LayerTypeType)) (= (type |f#0@@117|) HandleTypeType)) (= (type |init#0@@15|) BoxType)) (= (type |run#0@@61|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 |f#0@@117| |init#0@@15| |run#0@@61|) (and (and ($Is |f#0@@117| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 Sequences._default.FoldFromRight$A@@1)) ($IsBox |init#0@@15| Sequences._default.FoldFromRight$A@@1)) ($Is |run#0@@61| (TSeq Sequences._default.FoldFromRight$E@@1))))) ($IsBox (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@78 |f#0@@117| |init#0@@15| |run#0@@61|) Sequences._default.FoldFromRight$A@@1)) :qid |unknown.0:0| :skolemid |2848| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@1 Sequences._default.FoldFromRight$E@@1 $ly@@78 |f#0@@117| |init#0@@15| |run#0@@61|)) ))))
(assert (forall ((Sequences._default.FoldFromRight$A@@2 T@U) (Sequences._default.FoldFromRight$E@@2 T@U) ($ly@@79 T@U) ($Heap@@32 T@U) (|f#0@@118| T@U) (|init#0@@16| T@U) (|run#0@@62| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@2) TyType) (= (type Sequences._default.FoldFromRight$E@@2) TyType)) (= (type $ly@@79) LayerTypeType)) (= (type $Heap@@32) (MapType0Type refType MapType1Type))) (= (type |f#0@@118|) HandleTypeType)) (= (type |init#0@@16|) BoxType)) (= (type |run#0@@62|) (SeqType BoxType))) (and (and (and ($IsGoodHeap $Heap@@32) ($Is |f#0@@118| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 Sequences._default.FoldFromRight$A@@2))) ($IsBox |init#0@@16| Sequences._default.FoldFromRight$A@@2)) ($Is |run#0@@62| (TSeq Sequences._default.FoldFromRight$E@@2)))) (= (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@79 |f#0@@118| |init#0@@16| |run#0@@62|) true)) :qid |unknown.0:0| :skolemid |2849| :pattern ( (|Sequences.__default.FoldFromRight#requires| Sequences._default.FoldFromRight$A@@2 Sequences._default.FoldFromRight$E@@2 $ly@@79 |f#0@@118| |init#0@@16| |run#0@@62|) ($IsGoodHeap $Heap@@32)) )))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@3 T@U) (Sequences._default.FoldFromRight$E@@3 T@U) ($ly@@80 T@U) ($Heap@@33 T@U) (|f#0@@119| T@U) (|init#0@@17| T@U) (|run#0@@63| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@3) TyType) (= (type Sequences._default.FoldFromRight$E@@3) TyType)) (= (type $ly@@80) LayerTypeType)) (= (type $Heap@@33) (MapType0Type refType MapType1Type))) (= (type |f#0@@119|) HandleTypeType)) (= (type |init#0@@17|) BoxType)) (= (type |run#0@@63|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@119| |init#0@@17| |run#0@@63|) (and (and (and ($IsGoodHeap $Heap@@33) ($Is |f#0@@119| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3))) ($IsBox |init#0@@17| Sequences._default.FoldFromRight$A@@3)) ($Is |run#0@@63| (TSeq Sequences._default.FoldFromRight$E@@3))))) (and (=> (not (= (|Seq#Length| |run#0@@63|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@63|) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 |f#0@@119| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@63|))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@3 |run#0@@63|))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@80) |f#0@@119| |init#0@@17| |run#0@@63|) (ite (= (|Seq#Length| |run#0@@63|) (LitInt 0)) |init#0@@17| (Apply2 Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 Sequences._default.FoldFromRight$A@@3 $Heap@@33 |f#0@@119| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 $ly@@80 |f#0@@119| |init#0@@17| (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@3 |run#0@@63|)) (Sequences.__default.Last Sequences._default.FoldFromRight$E@@3 |run#0@@63|)))))) :qid |unknown.0:0| :skolemid |2850| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@3 Sequences._default.FoldFromRight$E@@3 ($LS $ly@@80) |f#0@@119| |init#0@@17| |run#0@@63|) ($IsGoodHeap $Heap@@33)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@4 T@U) (Sequences._default.FoldFromRight$E@@4 T@U) ($ly@@81 T@U) ($Heap@@34 T@U) (|f#0@@120| T@U) (|init#0@@18| T@U) (|run#0@@64| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@4) TyType) (= (type Sequences._default.FoldFromRight$E@@4) TyType)) (= (type $ly@@81) LayerTypeType)) (= (type $Heap@@34) (MapType0Type refType MapType1Type))) (= (type |f#0@@120|) HandleTypeType)) (= (type |init#0@@18|) BoxType)) (= (type |run#0@@64|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@120| |init#0@@18| (Lit |run#0@@64|)) (and (and (and ($IsGoodHeap $Heap@@34) ($Is |f#0@@120| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4))) ($IsBox |init#0@@18| Sequences._default.FoldFromRight$A@@4)) ($Is |run#0@@64| (TSeq Sequences._default.FoldFromRight$E@@4))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@64|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 |f#0@@120| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@81) |f#0@@120| |init#0@@18| (Lit |run#0@@64|)) (ite (= (|Seq#Length| (Lit |run#0@@64|)) (LitInt 0)) |init#0@@18| (Apply2 Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 Sequences._default.FoldFromRight$A@@4 $Heap@@34 |f#0@@120| (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@81) |f#0@@120| |init#0@@18| (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@4 (Lit |run#0@@64|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2851| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@4 Sequences._default.FoldFromRight$E@@4 ($LS $ly@@81) |f#0@@120| |init#0@@18| (Lit |run#0@@64|)) ($IsGoodHeap $Heap@@34)) ))))
(assert  (=> true (forall ((Sequences._default.FoldFromRight$A@@5 T@U) (Sequences._default.FoldFromRight$E@@5 T@U) ($ly@@82 T@U) ($Heap@@35 T@U) (|f#0@@121| T@U) (|init#0@@19| T@U) (|run#0@@65| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Sequences._default.FoldFromRight$A@@5) TyType) (= (type Sequences._default.FoldFromRight$E@@5) TyType)) (= (type $ly@@82) LayerTypeType)) (= (type $Heap@@35) (MapType0Type refType MapType1Type))) (= (type |f#0@@121|) HandleTypeType)) (= (type |init#0@@19|) BoxType)) (= (type |run#0@@65|) (SeqType BoxType))) (or (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@121|) (Lit |init#0@@19|) (Lit |run#0@@65|)) (and (and (and ($IsGoodHeap $Heap@@35) ($Is |f#0@@121| (Tclass._System.___hTotalFunc2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5))) ($IsBox |init#0@@19| Sequences._default.FoldFromRight$A@@5)) ($Is |run#0@@65| (TSeq Sequences._default.FoldFromRight$E@@5))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@65|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|)) (|Sequences.__default.FoldFromRight#canCall| Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 (Lit |f#0@@121|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|))))) (|Sequences.__default.Last#canCall| Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|)))) (= (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@82) (Lit |f#0@@121|) (Lit |init#0@@19|) (Lit |run#0@@65|)) (ite (= (|Seq#Length| (Lit |run#0@@65|)) (LitInt 0)) |init#0@@19| (Apply2 Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 Sequences._default.FoldFromRight$A@@5 $Heap@@35 (Lit |f#0@@121|) (Lit (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@82) (Lit |f#0@@121|) (Lit |init#0@@19|) (Lit (Sequences.__default.DropLast Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|))))) (Lit (Sequences.__default.Last Sequences._default.FoldFromRight$E@@5 (Lit |run#0@@65|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2852| :pattern ( (Sequences.__default.FoldFromRight Sequences._default.FoldFromRight$A@@5 Sequences._default.FoldFromRight$E@@5 ($LS $ly@@82) (Lit |f#0@@121|) (Lit |init#0@@19|) (Lit |run#0@@65|)) ($IsGoodHeap $Heap@@35)) ))))
(assert (forall ((arg0@@533 T@U) (arg1@@237 T@U) (arg2@@156 T@U) (arg3@@114 Int) ) (! (= (type (Sequences.__default.remove arg0@@533 arg1@@237 arg2@@156 arg3@@114)) (SeqType BoxType)) :qid |funType:Sequences.__default.remove| :pattern ( (Sequences.__default.remove arg0@@533 arg1@@237 arg2@@156 arg3@@114)) )))
(assert (forall ((Sequences._default.remove$A T@U) ($ly@@83 T@U) (|s#0@@4| T@U) (|pos#0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A) TyType) (= (type $ly@@83) LayerTypeType)) (= (type |s#0@@4|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@83) |s#0@@4| |pos#0|) (Sequences.__default.remove Sequences._default.remove$A $ly@@83 |s#0@@4| |pos#0|))) :qid |unknown.0:0| :skolemid |2853| :pattern ( (Sequences.__default.remove Sequences._default.remove$A ($LS $ly@@83) |s#0@@4| |pos#0|)) )))
(assert (forall ((Sequences._default.remove$A@@0 T@U) ($ly@@84 T@U) (|s#0@@5| T@U) (|pos#0@@0| Int) ) (!  (=> (and (and (= (type Sequences._default.remove$A@@0) TyType) (= (type $ly@@84) LayerTypeType)) (= (type |s#0@@5|) (SeqType BoxType))) (= (Sequences.__default.remove Sequences._default.remove$A@@0 $ly@@84 |s#0@@5| |pos#0@@0|) (Sequences.__default.remove Sequences._default.remove$A@@0 $LZ |s#0@@5| |pos#0@@0|))) :qid |unknown.0:0| :skolemid |2854| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@0 (AsFuelBottom $ly@@84) |s#0@@5| |pos#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@1 T@U) ($ly@@85 T@U) (|s#0@@6| T@U) (|pos#0@@1| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@1) TyType) (= (type $ly@@85) LayerTypeType)) (= (type |s#0@@6|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@1 |s#0@@6| |pos#0@@1|) (and ($Is |s#0@@6| (TSeq Sequences._default.remove$A@@1)) (and (<= (LitInt 0) |pos#0@@1|) (< |pos#0@@1| (|Seq#Length| |s#0@@6|)))))) (and (and (and (= (|Seq#Length| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@85 |s#0@@6| |pos#0@@1|)) (- (|Seq#Length| |s#0@@6|) 1)) (forall ((|i#0@@44| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@44|) (< |i#0@@44| |pos#0@@1|)) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@85 |s#0@@6| |pos#0@@1|) |i#0@@44|) (|Seq#Index| |s#0@@6| |i#0@@44|))) :qid |Sequencesidfy.180:18| :skolemid |2855| :pattern ( (|Seq#Index| |s#0@@6| |i#0@@44|)) :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@85 |s#0@@6| |pos#0@@1|) |i#0@@44|)) ))) (forall ((|i#1@@12| Int) ) (!  (=> (and (<= |pos#0@@1| |i#1@@12|) (< |i#1@@12| (- (|Seq#Length| |s#0@@6|) 1))) (= (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@85 |s#0@@6| |pos#0@@1|) |i#1@@12|) (|Seq#Index| |s#0@@6| (+ |i#1@@12| 1)))) :qid |Sequencesidfy.181:18| :skolemid |2856| :pattern ( (|Seq#Index| (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@85 |s#0@@6| |pos#0@@1|) |i#1@@12|)) ))) ($Is (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@85 |s#0@@6| |pos#0@@1|) (TSeq Sequences._default.remove$A@@1)))) :qid |unknown.0:0| :skolemid |2857| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@1 $ly@@85 |s#0@@6| |pos#0@@1|)) ))))
(assert (forall ((Sequences._default.remove$A@@2 T@U) ($ly@@86 T@U) (|s#0@@7| T@U) (|pos#0@@2| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@2) TyType) (= (type $ly@@86) LayerTypeType)) (= (type |s#0@@7|) (SeqType BoxType))) ($Is |s#0@@7| (TSeq Sequences._default.remove$A@@2))) (= (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@86 |s#0@@7| |pos#0@@2|)  (and (<= (LitInt 0) |pos#0@@2|) (< |pos#0@@2| (|Seq#Length| |s#0@@7|))))) :qid |unknown.0:0| :skolemid |2858| :pattern ( (|Sequences.__default.remove#requires| Sequences._default.remove$A@@2 $ly@@86 |s#0@@7| |pos#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.remove$A@@3 T@U) ($ly@@87 T@U) (|s#0@@8| T@U) (|pos#0@@3| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@3) TyType) (= (type $ly@@87) LayerTypeType)) (= (type |s#0@@8|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@3 |s#0@@8| |pos#0@@3|) (and ($Is |s#0@@8| (TSeq Sequences._default.remove$A@@3)) (and (<= (LitInt 0) |pos#0@@3|) (< |pos#0@@3| (|Seq#Length| |s#0@@8|)))))) (= (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@87) |s#0@@8| |pos#0@@3|) (|Seq#Append| (|Seq#Take| |s#0@@8| |pos#0@@3|) (|Seq#Drop| |s#0@@8| (+ |pos#0@@3| 1))))) :qid |unknown.0:0| :skolemid |2859| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@3 ($LS $ly@@87) |s#0@@8| |pos#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.remove$A@@4 T@U) ($ly@@88 T@U) (|s#0@@9| T@U) (|pos#0@@4| Int) ) (!  (=> (and (and (and (= (type Sequences._default.remove$A@@4) TyType) (= (type $ly@@88) LayerTypeType)) (= (type |s#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.remove#canCall| Sequences._default.remove$A@@4 (Lit |s#0@@9|) (LitInt |pos#0@@4|)) (and ($Is |s#0@@9| (TSeq Sequences._default.remove$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@4|)) (< |pos#0@@4| (|Seq#Length| (Lit |s#0@@9|))))))) (= (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@88) (Lit |s#0@@9|) (LitInt |pos#0@@4|)) (|Seq#Append| (|Seq#Take| (Lit |s#0@@9|) (LitInt |pos#0@@4|)) (|Seq#Drop| (Lit |s#0@@9|) (LitInt (+ |pos#0@@4| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2860| :pattern ( (Sequences.__default.remove Sequences._default.remove$A@@4 ($LS $ly@@88) (Lit |s#0@@9|) (LitInt |pos#0@@4|))) ))))
(assert (forall ((arg0@@534 T@U) (arg1@@238 T@U) (arg2@@157 T@U) (arg3@@115 T@U) ) (! (= (type (Sequences.__default.RemoveOneValue arg0@@534 arg1@@238 arg2@@157 arg3@@115)) (SeqType BoxType)) :qid |funType:Sequences.__default.RemoveOneValue| :pattern ( (Sequences.__default.RemoveOneValue arg0@@534 arg1@@238 arg2@@157 arg3@@115)) )))
(assert (forall ((Sequences._default.RemoveOneValue$V T@U) ($ly@@89 T@U) (|s#0@@10| T@U) (|v#0@@1| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V) TyType) (= (type $ly@@89) LayerTypeType)) (= (type |s#0@@10|) (SeqType BoxType))) (= (type |v#0@@1|) BoxType)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V ($LS $ly@@89) |s#0@@10| |v#0@@1|) (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V $ly@@89 |s#0@@10| |v#0@@1|))) :qid |unknown.0:0| :skolemid |2861| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V ($LS $ly@@89) |s#0@@10| |v#0@@1|)) )))
(assert (forall ((Sequences._default.RemoveOneValue$V@@0 T@U) ($ly@@90 T@U) (|s#0@@11| T@U) (|v#0@@2| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V@@0) TyType) (= (type $ly@@90) LayerTypeType)) (= (type |s#0@@11|) (SeqType BoxType))) (= (type |v#0@@2|) BoxType)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 $ly@@90 |s#0@@11| |v#0@@2|) (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 $LZ |s#0@@11| |v#0@@2|))) :qid |unknown.0:0| :skolemid |2862| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@0 (AsFuelBottom $ly@@90) |s#0@@11| |v#0@@2|)) )))
(assert (= (type StartFuel_Sequences._default.NoDupes) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@1 T@U) ($ly@@91 T@U) (|s#0@@12| T@U) (|v#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@1) TyType) (= (type $ly@@91) LayerTypeType)) (= (type |s#0@@12|) (SeqType BoxType))) (= (type |v#0@@3|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@1 |s#0@@12| |v#0@@3|) (and ($Is |s#0@@12| (TSeq Sequences._default.RemoveOneValue$V@@1)) ($IsBox |v#0@@3| Sequences._default.RemoveOneValue$V@@1)))) (and (=> (Sequences.__default.NoDupes Sequences._default.RemoveOneValue$V@@1 StartFuel_Sequences._default.NoDupes |s#0@@12|) (and (Sequences.__default.NoDupes Sequences._default.RemoveOneValue$V@@1 StartFuel_Sequences._default.NoDupes (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@91 |s#0@@12| |v#0@@3|)) (|Set#Equal| (Sequences.__default.Set Sequences._default.RemoveOneValue$V@@1 (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@91 |s#0@@12| |v#0@@3|)) (|Set#Difference| (Sequences.__default.Set Sequences._default.RemoveOneValue$V@@1 |s#0@@12|) (|Set#UnionOne| (|Set#Empty| BoxType) |v#0@@3|))))) ($Is (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@91 |s#0@@12| |v#0@@3|) (TSeq Sequences._default.RemoveOneValue$V@@1)))) :qid |unknown.0:0| :skolemid |2863| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@1 $ly@@91 |s#0@@12| |v#0@@3|)) ))))
(assert (forall ((Sequences._default.RemoveOneValue$V@@2 T@U) ($ly@@92 T@U) ($Heap@@36 T@U) (|s#0@@13| T@U) (|v#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@2) TyType) (= (type $ly@@92) LayerTypeType)) (= (type $Heap@@36) (MapType0Type refType MapType1Type))) (= (type |s#0@@13|) (SeqType BoxType))) (= (type |v#0@@4|) BoxType)) (and (and ($IsGoodHeap $Heap@@36) ($Is |s#0@@13| (TSeq Sequences._default.RemoveOneValue$V@@2))) ($IsBox |v#0@@4| Sequences._default.RemoveOneValue$V@@2))) (= (|Sequences.__default.RemoveOneValue#requires| Sequences._default.RemoveOneValue$V@@2 $ly@@92 |s#0@@13| |v#0@@4|) true)) :qid |unknown.0:0| :skolemid |2864| :pattern ( (|Sequences.__default.RemoveOneValue#requires| Sequences._default.RemoveOneValue$V@@2 $ly@@92 |s#0@@13| |v#0@@4|) ($IsGoodHeap $Heap@@36)) )))
(assert (forall ((Sequences._default.RemoveOneValue$V@@3 T@U) (s@@50 T@U) (v@@52 T@U) ) (!  (=> (and (and (and (= (type Sequences._default.RemoveOneValue$V@@3) TyType) (= (type s@@50) (SeqType BoxType))) (= (type v@@52) BoxType)) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52)) (and (and (<= (LitInt 0) (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52)) (< (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52) (|Seq#Length| s@@50))) (= (|Seq#Index| s@@50 (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52)) v@@52))) :qid |Sequencesidfy.191:5| :skolemid |2865| :pattern ( (|$let#4_i| Sequences._default.RemoveOneValue$V@@3 s@@50 v@@52)) )))
(assert  (and (= (type MoreFuel_Sequences._default.NoDupes0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.NoDupes) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@4 T@U) ($ly@@93 T@U) ($Heap@@37 T@U) (|s#0@@14| T@U) (|v#0@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@4) TyType) (= (type $ly@@93) LayerTypeType)) (= (type $Heap@@37) (MapType0Type refType MapType1Type))) (= (type |s#0@@14|) (SeqType BoxType))) (= (type |v#0@@5|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@4 |s#0@@14| |v#0@@5|) (and (and ($IsGoodHeap $Heap@@37) ($Is |s#0@@14| (TSeq Sequences._default.RemoveOneValue$V@@4))) ($IsBox |v#0@@5| Sequences._default.RemoveOneValue$V@@4)))) (and (=> (|Seq#Contains| |s#0@@14| |v#0@@5|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@4 |s#0@@14| |v#0@@5|)) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes0)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes0)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes0) MoreFuel_Sequences._default.NoDupes0)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@4 ($LS $ly@@93) |s#0@@14| |v#0@@5|) (ite  (not (|Seq#Contains| |s#0@@14| |v#0@@5|)) |s#0@@14| (let ((|i#0@@45| (|$let#4_i| Sequences._default.RemoveOneValue$V@@4 |s#0@@14| |v#0@@5|))) (|Seq#Append| (|Seq#Take| |s#0@@14| |i#0@@45|) (|Seq#Drop| |s#0@@14| (+ |i#0@@45| 1))))))))) :qid |unknown.0:0| :skolemid |2866| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@4 ($LS $ly@@93) |s#0@@14| |v#0@@5|) ($IsGoodHeap $Heap@@37)) ))))
(assert (= (type MoreFuel_Sequences._default.NoDupes1) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@5 T@U) ($ly@@94 T@U) ($Heap@@38 T@U) (|s#0@@15| T@U) (|v#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@5) TyType) (= (type $ly@@94) LayerTypeType)) (= (type $Heap@@38) (MapType0Type refType MapType1Type))) (= (type |s#0@@15|) (SeqType BoxType))) (= (type |v#0@@6|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@15|) |v#0@@6|) (and (and ($IsGoodHeap $Heap@@38) ($Is |s#0@@15| (TSeq Sequences._default.RemoveOneValue$V@@5))) ($IsBox |v#0@@6| Sequences._default.RemoveOneValue$V@@5)))) (and (=> (|Seq#Contains| |s#0@@15| |v#0@@6|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@15|) |v#0@@6|)) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes1)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes1)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes1) MoreFuel_Sequences._default.NoDupes1)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@5 ($LS $ly@@94) (Lit |s#0@@15|) |v#0@@6|) (ite  (not (|Seq#Contains| |s#0@@15| |v#0@@6|)) |s#0@@15| (let ((|i#1@@13| (|$let#4_i| Sequences._default.RemoveOneValue$V@@5 (Lit |s#0@@15|) |v#0@@6|))) (|Seq#Append| (|Seq#Take| (Lit |s#0@@15|) |i#1@@13|) (|Seq#Drop| (Lit |s#0@@15|) (+ |i#1@@13| 1))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2867| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@5 ($LS $ly@@94) (Lit |s#0@@15|) |v#0@@6|) ($IsGoodHeap $Heap@@38)) ))))
(assert (= (type MoreFuel_Sequences._default.NoDupes2) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.RemoveOneValue$V@@6 T@U) ($ly@@95 T@U) ($Heap@@39 T@U) (|s#0@@16| T@U) (|v#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.RemoveOneValue$V@@6) TyType) (= (type $ly@@95) LayerTypeType)) (= (type $Heap@@39) (MapType0Type refType MapType1Type))) (= (type |s#0@@16|) (SeqType BoxType))) (= (type |v#0@@7|) BoxType)) (or (|Sequences.__default.RemoveOneValue#canCall| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@16|) (Lit |v#0@@7|)) (and (and ($IsGoodHeap $Heap@@39) ($Is |s#0@@16| (TSeq Sequences._default.RemoveOneValue$V@@6))) ($IsBox |v#0@@7| Sequences._default.RemoveOneValue$V@@6)))) (and (=> (|Seq#Contains| |s#0@@16| |v#0@@7|) (|$let#4$canCall| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@16|) (Lit |v#0@@7|))) (and (and (and (= StartFuel_Sequences._default.NoDupes ($LS MoreFuel_Sequences._default.NoDupes2)) (= StartFuelAssert_Sequences._default.NoDupes ($LS ($LS MoreFuel_Sequences._default.NoDupes2)))) (= (AsFuelBottom MoreFuel_Sequences._default.NoDupes2) MoreFuel_Sequences._default.NoDupes2)) (= (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@6 ($LS $ly@@95) (Lit |s#0@@16|) (Lit |v#0@@7|)) (ite  (not (|Seq#Contains| |s#0@@16| |v#0@@7|)) |s#0@@16| (let ((|i#2@@8| (|$let#4_i| Sequences._default.RemoveOneValue$V@@6 (Lit |s#0@@16|) (Lit |v#0@@7|)))) (|Seq#Append| (|Seq#Take| (Lit |s#0@@16|) |i#2@@8|) (|Seq#Drop| (Lit |s#0@@16|) (+ |i#2@@8| 1))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2868| :pattern ( (Sequences.__default.RemoveOneValue Sequences._default.RemoveOneValue$V@@6 ($LS $ly@@95) (Lit |s#0@@16|) (Lit |v#0@@7|)) ($IsGoodHeap $Heap@@39)) ))))
(assert (forall ((arg0@@535 T@U) (arg1@@239 T@U) (arg2@@158 T@U) (arg3@@116 T@U) (arg4@@93 Int) ) (! (= (type (Sequences.__default.insert arg0@@535 arg1@@239 arg2@@158 arg3@@116 arg4@@93)) (SeqType BoxType)) :qid |funType:Sequences.__default.insert| :pattern ( (Sequences.__default.insert arg0@@535 arg1@@239 arg2@@158 arg3@@116 arg4@@93)) )))
(assert (forall ((Sequences._default.insert$A T@U) ($ly@@96 T@U) (|s#0@@17| T@U) (|a#0@@19| T@U) (|pos#0@@5| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A) TyType) (= (type $ly@@96) LayerTypeType)) (= (type |s#0@@17|) (SeqType BoxType))) (= (type |a#0@@19|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@96) |s#0@@17| |a#0@@19| |pos#0@@5|) (Sequences.__default.insert Sequences._default.insert$A $ly@@96 |s#0@@17| |a#0@@19| |pos#0@@5|))) :qid |unknown.0:0| :skolemid |2869| :pattern ( (Sequences.__default.insert Sequences._default.insert$A ($LS $ly@@96) |s#0@@17| |a#0@@19| |pos#0@@5|)) )))
(assert (forall ((Sequences._default.insert$A@@0 T@U) ($ly@@97 T@U) (|s#0@@18| T@U) (|a#0@@20| T@U) (|pos#0@@6| Int) ) (!  (=> (and (and (and (= (type Sequences._default.insert$A@@0) TyType) (= (type $ly@@97) LayerTypeType)) (= (type |s#0@@18|) (SeqType BoxType))) (= (type |a#0@@20|) BoxType)) (= (Sequences.__default.insert Sequences._default.insert$A@@0 $ly@@97 |s#0@@18| |a#0@@20| |pos#0@@6|) (Sequences.__default.insert Sequences._default.insert$A@@0 $LZ |s#0@@18| |a#0@@20| |pos#0@@6|))) :qid |unknown.0:0| :skolemid |2870| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@0 (AsFuelBottom $ly@@97) |s#0@@18| |a#0@@20| |pos#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@1 T@U) ($ly@@98 T@U) (|s#0@@19| T@U) (|a#0@@21| T@U) (|pos#0@@7| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@1) TyType) (= (type $ly@@98) LayerTypeType)) (= (type |s#0@@19|) (SeqType BoxType))) (= (type |a#0@@21|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@1 |s#0@@19| |a#0@@21| |pos#0@@7|) (and (and ($Is |s#0@@19| (TSeq Sequences._default.insert$A@@1)) ($IsBox |a#0@@21| Sequences._default.insert$A@@1)) (and (<= (LitInt 0) |pos#0@@7|) (<= |pos#0@@7| (|Seq#Length| |s#0@@19|)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@98 |s#0@@19| |a#0@@21| |pos#0@@7|)) (+ (|Seq#Length| |s#0@@19|) 1)) (forall ((|i#0@@46| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@46|) (< |i#0@@46| |pos#0@@7|)) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@98 |s#0@@19| |a#0@@21| |pos#0@@7|) |i#0@@46|) (|Seq#Index| |s#0@@19| |i#0@@46|)))) :qid |Sequencesidfy.198:18| :skolemid |2871| :pattern ( (|Seq#Index| |s#0@@19| |i#0@@46|)) :pattern ( (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@98 |s#0@@19| |a#0@@21| |pos#0@@7|) |i#0@@46|)) ))) (forall ((|i#1@@14| Int) ) (!  (=> true (=> (and (<= |pos#0@@7| |i#1@@14|) (< |i#1@@14| (|Seq#Length| |s#0@@19|))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@98 |s#0@@19| |a#0@@21| |pos#0@@7|) (+ |i#1@@14| 1)) (|Seq#Index| |s#0@@19| |i#1@@14|)))) :qid |Sequencesidfy.199:18| :skolemid |2872| :pattern ( (|Seq#Index| |s#0@@19| |i#1@@14|)) ))) (= (|Seq#Index| (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@98 |s#0@@19| |a#0@@21| |pos#0@@7|) |pos#0@@7|) |a#0@@21|)) ($Is (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@98 |s#0@@19| |a#0@@21| |pos#0@@7|) (TSeq Sequences._default.insert$A@@1)))) :qid |unknown.0:0| :skolemid |2873| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@1 $ly@@98 |s#0@@19| |a#0@@21| |pos#0@@7|)) ))))
(assert (forall ((Sequences._default.insert$A@@2 T@U) ($ly@@99 T@U) (|s#0@@20| T@U) (|a#0@@22| T@U) (|pos#0@@8| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@2) TyType) (= (type $ly@@99) LayerTypeType)) (= (type |s#0@@20|) (SeqType BoxType))) (= (type |a#0@@22|) BoxType)) (and ($Is |s#0@@20| (TSeq Sequences._default.insert$A@@2)) ($IsBox |a#0@@22| Sequences._default.insert$A@@2))) (= (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@99 |s#0@@20| |a#0@@22| |pos#0@@8|)  (and (<= (LitInt 0) |pos#0@@8|) (<= |pos#0@@8| (|Seq#Length| |s#0@@20|))))) :qid |unknown.0:0| :skolemid |2874| :pattern ( (|Sequences.__default.insert#requires| Sequences._default.insert$A@@2 $ly@@99 |s#0@@20| |a#0@@22| |pos#0@@8|)) )))
(assert  (=> true (forall ((Sequences._default.insert$A@@3 T@U) ($ly@@100 T@U) (|s#0@@21| T@U) (|a#0@@23| T@U) (|pos#0@@9| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@3) TyType) (= (type $ly@@100) LayerTypeType)) (= (type |s#0@@21|) (SeqType BoxType))) (= (type |a#0@@23|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@3 |s#0@@21| |a#0@@23| |pos#0@@9|) (and (and ($Is |s#0@@21| (TSeq Sequences._default.insert$A@@3)) ($IsBox |a#0@@23| Sequences._default.insert$A@@3)) (and (<= (LitInt 0) |pos#0@@9|) (<= |pos#0@@9| (|Seq#Length| |s#0@@21|)))))) (= (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@100) |s#0@@21| |a#0@@23| |pos#0@@9|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@21| |pos#0@@9|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@23|)) (|Seq#Drop| |s#0@@21| |pos#0@@9|)))) :qid |unknown.0:0| :skolemid |2875| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@3 ($LS $ly@@100) |s#0@@21| |a#0@@23| |pos#0@@9|)) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@4 T@U) ($ly@@101 T@U) (|s#0@@22| T@U) (|a#0@@24| T@U) (|pos#0@@10| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@4) TyType) (= (type $ly@@101) LayerTypeType)) (= (type |s#0@@22|) (SeqType BoxType))) (= (type |a#0@@24|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@4 (Lit |s#0@@22|) |a#0@@24| (LitInt |pos#0@@10|)) (and (and ($Is |s#0@@22| (TSeq Sequences._default.insert$A@@4)) ($IsBox |a#0@@24| Sequences._default.insert$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@10|)) (<= (LitInt |pos#0@@10|) (|Seq#Length| (Lit |s#0@@22|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@101) (Lit |s#0@@22|) |a#0@@24| (LitInt |pos#0@@10|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@22|) (LitInt |pos#0@@10|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@24|)) (|Seq#Drop| (Lit |s#0@@22|) (LitInt |pos#0@@10|))))) :qid |unknown.0:0| :weight 3 :skolemid |2876| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@4 ($LS $ly@@101) (Lit |s#0@@22|) |a#0@@24| (LitInt |pos#0@@10|))) ))))
(assert  (=> true (forall ((Sequences._default.insert$A@@5 T@U) ($ly@@102 T@U) (|s#0@@23| T@U) (|a#0@@25| T@U) (|pos#0@@11| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.insert$A@@5) TyType) (= (type $ly@@102) LayerTypeType)) (= (type |s#0@@23|) (SeqType BoxType))) (= (type |a#0@@25|) BoxType)) (or (|Sequences.__default.insert#canCall| Sequences._default.insert$A@@5 (Lit |s#0@@23|) (Lit |a#0@@25|) (LitInt |pos#0@@11|)) (and (and ($Is |s#0@@23| (TSeq Sequences._default.insert$A@@5)) ($IsBox |a#0@@25| Sequences._default.insert$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@11|)) (<= (LitInt |pos#0@@11|) (|Seq#Length| (Lit |s#0@@23|))))))) (= (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@102) (Lit |s#0@@23|) (Lit |a#0@@25|) (LitInt |pos#0@@11|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@23|) (LitInt |pos#0@@11|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@25|))) (|Seq#Drop| (Lit |s#0@@23|) (LitInt |pos#0@@11|))))) :qid |unknown.0:0| :weight 3 :skolemid |2877| :pattern ( (Sequences.__default.insert Sequences._default.insert$A@@5 ($LS $ly@@102) (Lit |s#0@@23|) (Lit |a#0@@25|) (LitInt |pos#0@@11|))) ))))
(assert (forall ((arg0@@536 T@U) (arg1@@240 T@U) (arg2@@159 T@U) (arg3@@117 T@U) (arg4@@94 T@U) (arg5@@74 Int) ) (! (= (type (Sequences.__default.replace1with2 arg0@@536 arg1@@240 arg2@@159 arg3@@117 arg4@@94 arg5@@74)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace1with2| :pattern ( (Sequences.__default.replace1with2 arg0@@536 arg1@@240 arg2@@159 arg3@@117 arg4@@94 arg5@@74)) )))
(assert (forall ((Sequences._default.replace1with2$A T@U) ($ly@@103 T@U) (|s#0@@24| T@U) (|a#0@@26| T@U) (|b#0@@13| T@U) (|pos#0@@12| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A) TyType) (= (type $ly@@103) LayerTypeType)) (= (type |s#0@@24|) (SeqType BoxType))) (= (type |a#0@@26|) BoxType)) (= (type |b#0@@13|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@103) |s#0@@24| |a#0@@26| |b#0@@13| |pos#0@@12|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A $ly@@103 |s#0@@24| |a#0@@26| |b#0@@13| |pos#0@@12|))) :qid |unknown.0:0| :skolemid |2878| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A ($LS $ly@@103) |s#0@@24| |a#0@@26| |b#0@@13| |pos#0@@12|)) )))
(assert (forall ((Sequences._default.replace1with2$A@@0 T@U) ($ly@@104 T@U) (|s#0@@25| T@U) (|a#0@@27| T@U) (|b#0@@14| T@U) (|pos#0@@13| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace1with2$A@@0) TyType) (= (type $ly@@104) LayerTypeType)) (= (type |s#0@@25|) (SeqType BoxType))) (= (type |a#0@@27|) BoxType)) (= (type |b#0@@14|) BoxType)) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $ly@@104 |s#0@@25| |a#0@@27| |b#0@@14| |pos#0@@13|) (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 $LZ |s#0@@25| |a#0@@27| |b#0@@14| |pos#0@@13|))) :qid |unknown.0:0| :skolemid |2879| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@0 (AsFuelBottom $ly@@104) |s#0@@25| |a#0@@27| |b#0@@14| |pos#0@@13|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@1 T@U) ($ly@@105 T@U) (|s#0@@26| T@U) (|a#0@@28| T@U) (|b#0@@15| T@U) (|pos#0@@14| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@1) TyType) (= (type $ly@@105) LayerTypeType)) (= (type |s#0@@26|) (SeqType BoxType))) (= (type |a#0@@28|) BoxType)) (= (type |b#0@@15|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@1 |s#0@@26| |a#0@@28| |b#0@@15| |pos#0@@14|) (and (and (and ($Is |s#0@@26| (TSeq Sequences._default.replace1with2$A@@1)) ($IsBox |a#0@@28| Sequences._default.replace1with2$A@@1)) ($IsBox |b#0@@15| Sequences._default.replace1with2$A@@1)) (and (<= (LitInt 0) |pos#0@@14|) (< |pos#0@@14| (|Seq#Length| |s#0@@26|)))))) (and (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@105 |s#0@@26| |a#0@@28| |b#0@@15| |pos#0@@14|)) (+ (|Seq#Length| |s#0@@26|) 1)) (forall ((|i#0@@47| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@47|) (< |i#0@@47| |pos#0@@14|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@105 |s#0@@26| |a#0@@28| |b#0@@15| |pos#0@@14|) |i#0@@47|) (|Seq#Index| |s#0@@26| |i#0@@47|)))) :qid |Sequencesidfy.223:18| :skolemid |2880| :pattern ( (|Seq#Index| |s#0@@26| |i#0@@47|)) :pattern ( (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@105 |s#0@@26| |a#0@@28| |b#0@@15| |pos#0@@14|) |i#0@@47|)) ))) (forall ((|i#1@@15| Int) ) (!  (=> true (=> (and (< |pos#0@@14| |i#1@@15|) (< |i#1@@15| (|Seq#Length| |s#0@@26|))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@105 |s#0@@26| |a#0@@28| |b#0@@15| |pos#0@@14|) (+ |i#1@@15| 1)) (|Seq#Index| |s#0@@26| |i#1@@15|)))) :qid |Sequencesidfy.224:18| :skolemid |2881| :pattern ( (|Seq#Index| |s#0@@26| |i#1@@15|)) ))) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@105 |s#0@@26| |a#0@@28| |b#0@@15| |pos#0@@14|) |pos#0@@14|) |a#0@@28|)) (= (|Seq#Index| (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@105 |s#0@@26| |a#0@@28| |b#0@@15| |pos#0@@14|) (+ |pos#0@@14| 1)) |b#0@@15|)) ($Is (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@105 |s#0@@26| |a#0@@28| |b#0@@15| |pos#0@@14|) (TSeq Sequences._default.replace1with2$A@@1)))) :qid |unknown.0:0| :skolemid |2882| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@1 $ly@@105 |s#0@@26| |a#0@@28| |b#0@@15| |pos#0@@14|)) ))))
(assert (forall ((Sequences._default.replace1with2$A@@2 T@U) ($ly@@106 T@U) (|s#0@@27| T@U) (|a#0@@29| T@U) (|b#0@@16| T@U) (|pos#0@@15| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@2) TyType) (= (type $ly@@106) LayerTypeType)) (= (type |s#0@@27|) (SeqType BoxType))) (= (type |a#0@@29|) BoxType)) (= (type |b#0@@16|) BoxType)) (and (and ($Is |s#0@@27| (TSeq Sequences._default.replace1with2$A@@2)) ($IsBox |a#0@@29| Sequences._default.replace1with2$A@@2)) ($IsBox |b#0@@16| Sequences._default.replace1with2$A@@2))) (= (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@106 |s#0@@27| |a#0@@29| |b#0@@16| |pos#0@@15|)  (and (<= (LitInt 0) |pos#0@@15|) (< |pos#0@@15| (|Seq#Length| |s#0@@27|))))) :qid |unknown.0:0| :skolemid |2883| :pattern ( (|Sequences.__default.replace1with2#requires| Sequences._default.replace1with2$A@@2 $ly@@106 |s#0@@27| |a#0@@29| |b#0@@16| |pos#0@@15|)) )))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@3 T@U) ($ly@@107 T@U) (|s#0@@28| T@U) (|a#0@@30| T@U) (|b#0@@17| T@U) (|pos#0@@16| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@3) TyType) (= (type $ly@@107) LayerTypeType)) (= (type |s#0@@28|) (SeqType BoxType))) (= (type |a#0@@30|) BoxType)) (= (type |b#0@@17|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@3 |s#0@@28| |a#0@@30| |b#0@@17| |pos#0@@16|) (and (and (and ($Is |s#0@@28| (TSeq Sequences._default.replace1with2$A@@3)) ($IsBox |a#0@@30| Sequences._default.replace1with2$A@@3)) ($IsBox |b#0@@17| Sequences._default.replace1with2$A@@3)) (and (<= (LitInt 0) |pos#0@@16|) (< |pos#0@@16| (|Seq#Length| |s#0@@28|)))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@107) |s#0@@28| |a#0@@30| |b#0@@17| |pos#0@@16|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@28| |pos#0@@16|) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@30|) |b#0@@17|)) (|Seq#Drop| |s#0@@28| (+ |pos#0@@16| 1))))) :qid |unknown.0:0| :skolemid |2884| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@3 ($LS $ly@@107) |s#0@@28| |a#0@@30| |b#0@@17| |pos#0@@16|)) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@4 T@U) ($ly@@108 T@U) (|s#0@@29| T@U) (|a#0@@31| T@U) (|b#0@@18| T@U) (|pos#0@@17| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@4) TyType) (= (type $ly@@108) LayerTypeType)) (= (type |s#0@@29|) (SeqType BoxType))) (= (type |a#0@@31|) BoxType)) (= (type |b#0@@18|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@4 (Lit |s#0@@29|) |a#0@@31| |b#0@@18| (LitInt |pos#0@@17|)) (and (and (and ($Is |s#0@@29| (TSeq Sequences._default.replace1with2$A@@4)) ($IsBox |a#0@@31| Sequences._default.replace1with2$A@@4)) ($IsBox |b#0@@18| Sequences._default.replace1with2$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@17|)) (< |pos#0@@17| (|Seq#Length| (Lit |s#0@@29|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@108) (Lit |s#0@@29|) |a#0@@31| |b#0@@18| (LitInt |pos#0@@17|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@29|) (LitInt |pos#0@@17|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@31|) |b#0@@18|)) (|Seq#Drop| (Lit |s#0@@29|) (LitInt (+ |pos#0@@17| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2885| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@4 ($LS $ly@@108) (Lit |s#0@@29|) |a#0@@31| |b#0@@18| (LitInt |pos#0@@17|))) ))))
(assert  (=> true (forall ((Sequences._default.replace1with2$A@@5 T@U) ($ly@@109 T@U) (|s#0@@30| T@U) (|a#0@@32| T@U) (|b#0@@19| T@U) (|pos#0@@18| Int) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.replace1with2$A@@5) TyType) (= (type $ly@@109) LayerTypeType)) (= (type |s#0@@30|) (SeqType BoxType))) (= (type |a#0@@32|) BoxType)) (= (type |b#0@@19|) BoxType)) (or (|Sequences.__default.replace1with2#canCall| Sequences._default.replace1with2$A@@5 (Lit |s#0@@30|) (Lit |a#0@@32|) (Lit |b#0@@19|) (LitInt |pos#0@@18|)) (and (and (and ($Is |s#0@@30| (TSeq Sequences._default.replace1with2$A@@5)) ($IsBox |a#0@@32| Sequences._default.replace1with2$A@@5)) ($IsBox |b#0@@19| Sequences._default.replace1with2$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@18|)) (< |pos#0@@18| (|Seq#Length| (Lit |s#0@@30|))))))) (= (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@109) (Lit |s#0@@30|) (Lit |a#0@@32|) (Lit |b#0@@19|) (LitInt |pos#0@@18|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@30|) (LitInt |pos#0@@18|)) (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@32|)) (Lit |b#0@@19|))) (|Seq#Drop| (Lit |s#0@@30|) (LitInt (+ |pos#0@@18| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2886| :pattern ( (Sequences.__default.replace1with2 Sequences._default.replace1with2$A@@5 ($LS $ly@@109) (Lit |s#0@@30|) (Lit |a#0@@32|) (Lit |b#0@@19|) (LitInt |pos#0@@18|))) ))))
(assert (forall ((arg0@@537 T@U) (arg1@@241 T@U) (arg2@@160 T@U) (arg3@@118 T@U) (arg4@@95 Int) ) (! (= (type (Sequences.__default.replace2with1 arg0@@537 arg1@@241 arg2@@160 arg3@@118 arg4@@95)) (SeqType BoxType)) :qid |funType:Sequences.__default.replace2with1| :pattern ( (Sequences.__default.replace2with1 arg0@@537 arg1@@241 arg2@@160 arg3@@118 arg4@@95)) )))
(assert (forall ((Sequences._default.replace2with1$A T@U) ($ly@@110 T@U) (|s#0@@31| T@U) (|a#0@@33| T@U) (|pos#0@@19| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A) TyType) (= (type $ly@@110) LayerTypeType)) (= (type |s#0@@31|) (SeqType BoxType))) (= (type |a#0@@33|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@110) |s#0@@31| |a#0@@33| |pos#0@@19|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A $ly@@110 |s#0@@31| |a#0@@33| |pos#0@@19|))) :qid |unknown.0:0| :skolemid |2887| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A ($LS $ly@@110) |s#0@@31| |a#0@@33| |pos#0@@19|)) )))
(assert (forall ((Sequences._default.replace2with1$A@@0 T@U) ($ly@@111 T@U) (|s#0@@32| T@U) (|a#0@@34| T@U) (|pos#0@@20| Int) ) (!  (=> (and (and (and (= (type Sequences._default.replace2with1$A@@0) TyType) (= (type $ly@@111) LayerTypeType)) (= (type |s#0@@32|) (SeqType BoxType))) (= (type |a#0@@34|) BoxType)) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $ly@@111 |s#0@@32| |a#0@@34| |pos#0@@20|) (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 $LZ |s#0@@32| |a#0@@34| |pos#0@@20|))) :qid |unknown.0:0| :skolemid |2888| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@0 (AsFuelBottom $ly@@111) |s#0@@32| |a#0@@34| |pos#0@@20|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@1 T@U) ($ly@@112 T@U) (|s#0@@33| T@U) (|a#0@@35| T@U) (|pos#0@@21| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@1) TyType) (= (type $ly@@112) LayerTypeType)) (= (type |s#0@@33|) (SeqType BoxType))) (= (type |a#0@@35|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@1 |s#0@@33| |a#0@@35| |pos#0@@21|) (and (and ($Is |s#0@@33| (TSeq Sequences._default.replace2with1$A@@1)) ($IsBox |a#0@@35| Sequences._default.replace2with1$A@@1)) (and (<= (LitInt 0) |pos#0@@21|) (< |pos#0@@21| (- (|Seq#Length| |s#0@@33|) 1)))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@112 |s#0@@33| |a#0@@35| |pos#0@@21|)) (- (|Seq#Length| |s#0@@33|) 1)) (forall ((|i#0@@48| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@48|) (< |i#0@@48| |pos#0@@21|)) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@112 |s#0@@33| |a#0@@35| |pos#0@@21|) |i#0@@48|) (|Seq#Index| |s#0@@33| |i#0@@48|)))) :qid |Sequencesidfy.242:18| :skolemid |2889| :pattern ( (|Seq#Index| |s#0@@33| |i#0@@48|)) :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@112 |s#0@@33| |a#0@@35| |pos#0@@21|) |i#0@@48|)) ))) (forall ((|i#1@@16| Int) ) (!  (=> true (=> (and (< |pos#0@@21| |i#1@@16|) (< |i#1@@16| (- (|Seq#Length| |s#0@@33|) 1))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@112 |s#0@@33| |a#0@@35| |pos#0@@21|) |i#1@@16|) (|Seq#Index| |s#0@@33| (+ |i#1@@16| 1))))) :qid |Sequencesidfy.243:18| :skolemid |2890| :pattern ( (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@112 |s#0@@33| |a#0@@35| |pos#0@@21|) |i#1@@16|)) ))) (= (|Seq#Index| (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@112 |s#0@@33| |a#0@@35| |pos#0@@21|) |pos#0@@21|) |a#0@@35|)) ($Is (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@112 |s#0@@33| |a#0@@35| |pos#0@@21|) (TSeq Sequences._default.replace2with1$A@@1)))) :qid |unknown.0:0| :skolemid |2891| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@1 $ly@@112 |s#0@@33| |a#0@@35| |pos#0@@21|)) ))))
(assert (forall ((Sequences._default.replace2with1$A@@2 T@U) ($ly@@113 T@U) (|s#0@@34| T@U) (|a#0@@36| T@U) (|pos#0@@22| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@2) TyType) (= (type $ly@@113) LayerTypeType)) (= (type |s#0@@34|) (SeqType BoxType))) (= (type |a#0@@36|) BoxType)) (and ($Is |s#0@@34| (TSeq Sequences._default.replace2with1$A@@2)) ($IsBox |a#0@@36| Sequences._default.replace2with1$A@@2))) (= (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@113 |s#0@@34| |a#0@@36| |pos#0@@22|)  (and (<= (LitInt 0) |pos#0@@22|) (< |pos#0@@22| (- (|Seq#Length| |s#0@@34|) 1))))) :qid |unknown.0:0| :skolemid |2892| :pattern ( (|Sequences.__default.replace2with1#requires| Sequences._default.replace2with1$A@@2 $ly@@113 |s#0@@34| |a#0@@36| |pos#0@@22|)) )))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@3 T@U) ($ly@@114 T@U) (|s#0@@35| T@U) (|a#0@@37| T@U) (|pos#0@@23| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@3) TyType) (= (type $ly@@114) LayerTypeType)) (= (type |s#0@@35|) (SeqType BoxType))) (= (type |a#0@@37|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@3 |s#0@@35| |a#0@@37| |pos#0@@23|) (and (and ($Is |s#0@@35| (TSeq Sequences._default.replace2with1$A@@3)) ($IsBox |a#0@@37| Sequences._default.replace2with1$A@@3)) (and (<= (LitInt 0) |pos#0@@23|) (< |pos#0@@23| (- (|Seq#Length| |s#0@@35|) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@114) |s#0@@35| |a#0@@37| |pos#0@@23|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@35| |pos#0@@23|) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@37|)) (|Seq#Drop| |s#0@@35| (+ |pos#0@@23| 2))))) :qid |unknown.0:0| :skolemid |2893| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@3 ($LS $ly@@114) |s#0@@35| |a#0@@37| |pos#0@@23|)) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@4 T@U) ($ly@@115 T@U) (|s#0@@36| T@U) (|a#0@@38| T@U) (|pos#0@@24| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@4) TyType) (= (type $ly@@115) LayerTypeType)) (= (type |s#0@@36|) (SeqType BoxType))) (= (type |a#0@@38|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@4 (Lit |s#0@@36|) |a#0@@38| (LitInt |pos#0@@24|)) (and (and ($Is |s#0@@36| (TSeq Sequences._default.replace2with1$A@@4)) ($IsBox |a#0@@38| Sequences._default.replace2with1$A@@4)) (and (<= (LitInt 0) (LitInt |pos#0@@24|)) (< |pos#0@@24| (- (|Seq#Length| (Lit |s#0@@36|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@115) (Lit |s#0@@36|) |a#0@@38| (LitInt |pos#0@@24|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@36|) (LitInt |pos#0@@24|)) (|Seq#Build| (|Seq#Empty| BoxType) |a#0@@38|)) (|Seq#Drop| (Lit |s#0@@36|) (LitInt (+ |pos#0@@24| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |2894| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@4 ($LS $ly@@115) (Lit |s#0@@36|) |a#0@@38| (LitInt |pos#0@@24|))) ))))
(assert  (=> true (forall ((Sequences._default.replace2with1$A@@5 T@U) ($ly@@116 T@U) (|s#0@@37| T@U) (|a#0@@39| T@U) (|pos#0@@25| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.replace2with1$A@@5) TyType) (= (type $ly@@116) LayerTypeType)) (= (type |s#0@@37|) (SeqType BoxType))) (= (type |a#0@@39|) BoxType)) (or (|Sequences.__default.replace2with1#canCall| Sequences._default.replace2with1$A@@5 (Lit |s#0@@37|) (Lit |a#0@@39|) (LitInt |pos#0@@25|)) (and (and ($Is |s#0@@37| (TSeq Sequences._default.replace2with1$A@@5)) ($IsBox |a#0@@39| Sequences._default.replace2with1$A@@5)) (and (<= (LitInt 0) (LitInt |pos#0@@25|)) (< |pos#0@@25| (- (|Seq#Length| (Lit |s#0@@37|)) 1)))))) (= (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@116) (Lit |s#0@@37|) (Lit |a#0@@39|) (LitInt |pos#0@@25|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@37|) (LitInt |pos#0@@25|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |a#0@@39|))) (|Seq#Drop| (Lit |s#0@@37|) (LitInt (+ |pos#0@@25| 2)))))) :qid |unknown.0:0| :weight 3 :skolemid |2895| :pattern ( (Sequences.__default.replace2with1 Sequences._default.replace2with1$A@@5 ($LS $ly@@116) (Lit |s#0@@37|) (Lit |a#0@@39|) (LitInt |pos#0@@25|))) ))))
(assert (forall ((arg0@@538 T@U) (arg1@@242 T@U) (arg2@@161 T@U) (arg3@@119 T@U) ) (! (= (type (Sequences.__default.concat arg0@@538 arg1@@242 arg2@@161 arg3@@119)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat| :pattern ( (Sequences.__default.concat arg0@@538 arg1@@242 arg2@@161 arg3@@119)) )))
(assert (forall ((Sequences._default.concat$A T@U) ($ly@@117 T@U) (|a#0@@40| T@U) (|b#0@@20| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A) TyType) (= (type $ly@@117) LayerTypeType)) (= (type |a#0@@40|) (SeqType BoxType))) (= (type |b#0@@20|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@117) |a#0@@40| |b#0@@20|) (Sequences.__default.concat Sequences._default.concat$A $ly@@117 |a#0@@40| |b#0@@20|))) :qid |unknown.0:0| :skolemid |2896| :pattern ( (Sequences.__default.concat Sequences._default.concat$A ($LS $ly@@117) |a#0@@40| |b#0@@20|)) )))
(assert (forall ((Sequences._default.concat$A@@0 T@U) ($ly@@118 T@U) (|a#0@@41| T@U) (|b#0@@21| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concat$A@@0) TyType) (= (type $ly@@118) LayerTypeType)) (= (type |a#0@@41|) (SeqType BoxType))) (= (type |b#0@@21|) (SeqType BoxType))) (= (Sequences.__default.concat Sequences._default.concat$A@@0 $ly@@118 |a#0@@41| |b#0@@21|) (Sequences.__default.concat Sequences._default.concat$A@@0 $LZ |a#0@@41| |b#0@@21|))) :qid |unknown.0:0| :skolemid |2897| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@0 (AsFuelBottom $ly@@118) |a#0@@41| |b#0@@21|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@1 T@U) ($ly@@119 T@U) (|a#0@@42| T@U) (|b#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@1) TyType) (= (type $ly@@119) LayerTypeType)) (= (type |a#0@@42|) (SeqType BoxType))) (= (type |b#0@@22|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@1 |a#0@@42| |b#0@@22|) (and ($Is |a#0@@42| (TSeq Sequences._default.concat$A@@1)) ($Is |b#0@@22| (TSeq Sequences._default.concat$A@@1))))) (and (and (and (= (|Seq#Length| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@119 |a#0@@42| |b#0@@22|)) (+ (|Seq#Length| |a#0@@42|) (|Seq#Length| |b#0@@22|))) (forall ((|i#0@@49| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@49|) (< |i#0@@49| (|Seq#Length| |a#0@@42|))) (= (|Seq#Index| |a#0@@42| |i#0@@49|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@119 |a#0@@42| |b#0@@22|) |i#0@@49|)))) :qid |Sequencesidfy.251:18| :skolemid |2898| :pattern ( (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@119 |a#0@@42| |b#0@@22|) |i#0@@49|)) :pattern ( (|Seq#Index| |a#0@@42| |i#0@@49|)) ))) (forall ((|i#1@@17| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@17|) (< |i#1@@17| (|Seq#Length| |b#0@@22|))) (= (|Seq#Index| |b#0@@22| |i#1@@17|) (|Seq#Index| (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@119 |a#0@@42| |b#0@@22|) (+ (|Seq#Length| |a#0@@42|) |i#1@@17|))))) :qid |Sequencesidfy.252:18| :skolemid |2899| :pattern ( (|Seq#Index| |b#0@@22| |i#1@@17|)) ))) ($Is (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@119 |a#0@@42| |b#0@@22|) (TSeq Sequences._default.concat$A@@1)))) :qid |unknown.0:0| :skolemid |2900| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@1 $ly@@119 |a#0@@42| |b#0@@22|)) ))))
(assert (forall ((Sequences._default.concat$A@@2 T@U) ($ly@@120 T@U) (|a#0@@43| T@U) (|b#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@2) TyType) (= (type $ly@@120) LayerTypeType)) (= (type |a#0@@43|) (SeqType BoxType))) (= (type |b#0@@23|) (SeqType BoxType))) (and ($Is |a#0@@43| (TSeq Sequences._default.concat$A@@2)) ($Is |b#0@@23| (TSeq Sequences._default.concat$A@@2)))) (= (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@120 |a#0@@43| |b#0@@23|) true)) :qid |unknown.0:0| :skolemid |2901| :pattern ( (|Sequences.__default.concat#requires| Sequences._default.concat$A@@2 $ly@@120 |a#0@@43| |b#0@@23|)) )))
(assert  (=> true (forall ((Sequences._default.concat$A@@3 T@U) ($ly@@121 T@U) (|a#0@@44| T@U) (|b#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@3) TyType) (= (type $ly@@121) LayerTypeType)) (= (type |a#0@@44|) (SeqType BoxType))) (= (type |b#0@@24|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@3 |a#0@@44| |b#0@@24|) (and ($Is |a#0@@44| (TSeq Sequences._default.concat$A@@3)) ($Is |b#0@@24| (TSeq Sequences._default.concat$A@@3))))) (= (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@121) |a#0@@44| |b#0@@24|) (|Seq#Append| |a#0@@44| |b#0@@24|))) :qid |unknown.0:0| :skolemid |2902| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@3 ($LS $ly@@121) |a#0@@44| |b#0@@24|)) ))))
(assert  (=> true (forall ((Sequences._default.concat$A@@4 T@U) ($ly@@122 T@U) (|a#0@@45| T@U) (|b#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat$A@@4) TyType) (= (type $ly@@122) LayerTypeType)) (= (type |a#0@@45|) (SeqType BoxType))) (= (type |b#0@@25|) (SeqType BoxType))) (or (|Sequences.__default.concat#canCall| Sequences._default.concat$A@@4 (Lit |a#0@@45|) (Lit |b#0@@25|)) (and ($Is |a#0@@45| (TSeq Sequences._default.concat$A@@4)) ($Is |b#0@@25| (TSeq Sequences._default.concat$A@@4))))) (= (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@122) (Lit |a#0@@45|) (Lit |b#0@@25|)) (|Seq#Append| |a#0@@45| |b#0@@25|))) :qid |unknown.0:0| :weight 3 :skolemid |2903| :pattern ( (Sequences.__default.concat Sequences._default.concat$A@@4 ($LS $ly@@122) (Lit |a#0@@45|) (Lit |b#0@@25|))) ))))
(assert (forall ((arg0@@539 T@U) (arg1@@243 T@U) (arg2@@162 T@U) (arg3@@120 T@U) (arg4@@96 T@U) ) (! (= (type (Sequences.__default.concat3 arg0@@539 arg1@@243 arg2@@162 arg3@@120 arg4@@96)) (SeqType BoxType)) :qid |funType:Sequences.__default.concat3| :pattern ( (Sequences.__default.concat3 arg0@@539 arg1@@243 arg2@@162 arg3@@120 arg4@@96)) )))
(assert (forall ((Sequences._default.concat3$A T@U) ($ly@@123 T@U) (|a#0@@46| T@U) (|b#0@@26| T@U) (|c#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A) TyType) (= (type $ly@@123) LayerTypeType)) (= (type |a#0@@46|) (SeqType BoxType))) (= (type |b#0@@26|) BoxType)) (= (type |c#0@@3|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@123) |a#0@@46| |b#0@@26| |c#0@@3|) (Sequences.__default.concat3 Sequences._default.concat3$A $ly@@123 |a#0@@46| |b#0@@26| |c#0@@3|))) :qid |unknown.0:0| :skolemid |2904| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A ($LS $ly@@123) |a#0@@46| |b#0@@26| |c#0@@3|)) )))
(assert (forall ((Sequences._default.concat3$A@@0 T@U) ($ly@@124 T@U) (|a#0@@47| T@U) (|b#0@@27| T@U) (|c#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.concat3$A@@0) TyType) (= (type $ly@@124) LayerTypeType)) (= (type |a#0@@47|) (SeqType BoxType))) (= (type |b#0@@27|) BoxType)) (= (type |c#0@@4|) (SeqType BoxType))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $ly@@124 |a#0@@47| |b#0@@27| |c#0@@4|) (Sequences.__default.concat3 Sequences._default.concat3$A@@0 $LZ |a#0@@47| |b#0@@27| |c#0@@4|))) :qid |unknown.0:0| :skolemid |2905| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@0 (AsFuelBottom $ly@@124) |a#0@@47| |b#0@@27| |c#0@@4|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@1 T@U) ($ly@@125 T@U) (|a#0@@48| T@U) (|b#0@@28| T@U) (|c#0@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@1) TyType) (= (type $ly@@125) LayerTypeType)) (= (type |a#0@@48|) (SeqType BoxType))) (= (type |b#0@@28|) BoxType)) (= (type |c#0@@5|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@1 |a#0@@48| |b#0@@28| |c#0@@5|) (and (and ($Is |a#0@@48| (TSeq Sequences._default.concat3$A@@1)) ($IsBox |b#0@@28| Sequences._default.concat3$A@@1)) ($Is |c#0@@5| (TSeq Sequences._default.concat3$A@@1))))) (and (and (and (and (= (|Seq#Length| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@125 |a#0@@48| |b#0@@28| |c#0@@5|)) (+ (+ (|Seq#Length| |a#0@@48|) (|Seq#Length| |c#0@@5|)) 1)) (forall ((|i#0@@50| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@50|) (< |i#0@@50| (|Seq#Length| |a#0@@48|))) (= (|Seq#Index| |a#0@@48| |i#0@@50|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@125 |a#0@@48| |b#0@@28| |c#0@@5|) |i#0@@50|)))) :qid |Sequencesidfy.259:18| :skolemid |2906| :pattern ( (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@125 |a#0@@48| |b#0@@28| |c#0@@5|) |i#0@@50|)) :pattern ( (|Seq#Index| |a#0@@48| |i#0@@50|)) ))) (= (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@125 |a#0@@48| |b#0@@28| |c#0@@5|) (|Seq#Length| |a#0@@48|)) |b#0@@28|)) (forall ((|i#1@@18| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#1@@18|) (< |i#1@@18| (|Seq#Length| |c#0@@5|))) (= (|Seq#Index| |c#0@@5| |i#1@@18|) (|Seq#Index| (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@125 |a#0@@48| |b#0@@28| |c#0@@5|) (+ (+ (|Seq#Length| |a#0@@48|) 1) |i#1@@18|))))) :qid |Sequencesidfy.261:18| :skolemid |2907| :pattern ( (|Seq#Index| |c#0@@5| |i#1@@18|)) ))) ($Is (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@125 |a#0@@48| |b#0@@28| |c#0@@5|) (TSeq Sequences._default.concat3$A@@1)))) :qid |unknown.0:0| :skolemid |2908| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@1 $ly@@125 |a#0@@48| |b#0@@28| |c#0@@5|)) ))))
(assert (forall ((Sequences._default.concat3$A@@2 T@U) ($ly@@126 T@U) (|a#0@@49| T@U) (|b#0@@29| T@U) (|c#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@2) TyType) (= (type $ly@@126) LayerTypeType)) (= (type |a#0@@49|) (SeqType BoxType))) (= (type |b#0@@29|) BoxType)) (= (type |c#0@@6|) (SeqType BoxType))) (and (and ($Is |a#0@@49| (TSeq Sequences._default.concat3$A@@2)) ($IsBox |b#0@@29| Sequences._default.concat3$A@@2)) ($Is |c#0@@6| (TSeq Sequences._default.concat3$A@@2)))) (= (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@126 |a#0@@49| |b#0@@29| |c#0@@6|) true)) :qid |unknown.0:0| :skolemid |2909| :pattern ( (|Sequences.__default.concat3#requires| Sequences._default.concat3$A@@2 $ly@@126 |a#0@@49| |b#0@@29| |c#0@@6|)) )))
(assert  (=> true (forall ((Sequences._default.concat3$A@@3 T@U) ($ly@@127 T@U) (|a#0@@50| T@U) (|b#0@@30| T@U) (|c#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@3) TyType) (= (type $ly@@127) LayerTypeType)) (= (type |a#0@@50|) (SeqType BoxType))) (= (type |b#0@@30|) BoxType)) (= (type |c#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@3 |a#0@@50| |b#0@@30| |c#0@@7|) (and (and ($Is |a#0@@50| (TSeq Sequences._default.concat3$A@@3)) ($IsBox |b#0@@30| Sequences._default.concat3$A@@3)) ($Is |c#0@@7| (TSeq Sequences._default.concat3$A@@3))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@127) |a#0@@50| |b#0@@30| |c#0@@7|) (|Seq#Append| (|Seq#Append| |a#0@@50| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@30|)) |c#0@@7|))) :qid |unknown.0:0| :skolemid |2910| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@3 ($LS $ly@@127) |a#0@@50| |b#0@@30| |c#0@@7|)) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@4 T@U) ($ly@@128 T@U) (|a#0@@51| T@U) (|b#0@@31| T@U) (|c#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@4) TyType) (= (type $ly@@128) LayerTypeType)) (= (type |a#0@@51|) (SeqType BoxType))) (= (type |b#0@@31|) BoxType)) (= (type |c#0@@8|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@4 (Lit |a#0@@51|) |b#0@@31| (Lit |c#0@@8|)) (and (and ($Is |a#0@@51| (TSeq Sequences._default.concat3$A@@4)) ($IsBox |b#0@@31| Sequences._default.concat3$A@@4)) ($Is |c#0@@8| (TSeq Sequences._default.concat3$A@@4))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@128) (Lit |a#0@@51|) |b#0@@31| (Lit |c#0@@8|)) (|Seq#Append| (|Seq#Append| |a#0@@51| (|Seq#Build| (|Seq#Empty| BoxType) |b#0@@31|)) |c#0@@8|))) :qid |unknown.0:0| :weight 3 :skolemid |2911| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@4 ($LS $ly@@128) (Lit |a#0@@51|) |b#0@@31| (Lit |c#0@@8|))) ))))
(assert  (=> true (forall ((Sequences._default.concat3$A@@5 T@U) ($ly@@129 T@U) (|a#0@@52| T@U) (|b#0@@32| T@U) (|c#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.concat3$A@@5) TyType) (= (type $ly@@129) LayerTypeType)) (= (type |a#0@@52|) (SeqType BoxType))) (= (type |b#0@@32|) BoxType)) (= (type |c#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.concat3#canCall| Sequences._default.concat3$A@@5 (Lit |a#0@@52|) (Lit |b#0@@32|) (Lit |c#0@@9|)) (and (and ($Is |a#0@@52| (TSeq Sequences._default.concat3$A@@5)) ($IsBox |b#0@@32| Sequences._default.concat3$A@@5)) ($Is |c#0@@9| (TSeq Sequences._default.concat3$A@@5))))) (= (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@129) (Lit |a#0@@52|) (Lit |b#0@@32|) (Lit |c#0@@9|)) (|Seq#Append| (|Seq#Append| |a#0@@52| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |b#0@@32|))) |c#0@@9|))) :qid |unknown.0:0| :weight 3 :skolemid |2912| :pattern ( (Sequences.__default.concat3 Sequences._default.concat3$A@@5 ($LS $ly@@129) (Lit |a#0@@52|) (Lit |b#0@@32|) (Lit |c#0@@9|))) ))))
(assert (forall ((arg0@@540 T@U) (arg1@@244 T@U) (arg2@@163 T@U) ) (! (= (type (Sequences.__default.concatSeq arg0@@540 arg1@@244 arg2@@163)) (SeqType BoxType)) :qid |funType:Sequences.__default.concatSeq| :pattern ( (Sequences.__default.concatSeq arg0@@540 arg1@@244 arg2@@163)) )))
(assert (forall ((Sequences._default.concatSeq$A T@U) ($ly@@130 T@U) (|a#0@@53| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A) TyType) (= (type $ly@@130) LayerTypeType)) (= (type |a#0@@53|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@130) |a#0@@53|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A $ly@@130 |a#0@@53|))) :qid |unknown.0:0| :skolemid |2913| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A ($LS $ly@@130) |a#0@@53|)) )))
(assert (forall ((Sequences._default.concatSeq$A@@0 T@U) ($ly@@131 T@U) (|a#0@@54| T@U) ) (!  (=> (and (and (= (type Sequences._default.concatSeq$A@@0) TyType) (= (type $ly@@131) LayerTypeType)) (= (type |a#0@@54|) (SeqType BoxType))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $ly@@131 |a#0@@54|) (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 $LZ |a#0@@54|))) :qid |unknown.0:0| :skolemid |2914| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@0 (AsFuelBottom $ly@@131) |a#0@@54|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@1 T@U) ($ly@@132 T@U) (|a#0@@55| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@1) TyType) (= (type $ly@@132) LayerTypeType)) (= (type |a#0@@55|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@1 |a#0@@55|) ($Is |a#0@@55| (TSeq (TSeq Sequences._default.concatSeq$A@@1))))) ($Is (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@132 |a#0@@55|) (TSeq Sequences._default.concatSeq$A@@1))) :qid |unknown.0:0| :skolemid |2915| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@1 $ly@@132 |a#0@@55|)) ))))
(assert (forall ((Sequences._default.concatSeq$A@@2 T@U) ($ly@@133 T@U) (|a#0@@56| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@2) TyType) (= (type $ly@@133) LayerTypeType)) (= (type |a#0@@56|) (SeqType BoxType))) ($Is |a#0@@56| (TSeq (TSeq Sequences._default.concatSeq$A@@2)))) (= (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@133 |a#0@@56|) true)) :qid |unknown.0:0| :skolemid |2916| :pattern ( (|Sequences.__default.concatSeq#requires| Sequences._default.concatSeq$A@@2 $ly@@133 |a#0@@56|)) )))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@3 T@U) ($ly@@134 T@U) (|a#0@@57| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@3) TyType) (= (type $ly@@134) LayerTypeType)) (= (type |a#0@@57|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 |a#0@@57|) ($Is |a#0@@57| (TSeq (TSeq Sequences._default.concatSeq$A@@3))))) (and (=> (not (= (|Seq#Length| |a#0@@57|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@57|) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@57|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@3) |a#0@@57|))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@134) |a#0@@57|) (ite (= (|Seq#Length| |a#0@@57|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 $ly@@134 (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@3) |a#0@@57|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@3) |a#0@@57|))))))) :qid |unknown.0:0| :skolemid |2917| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@3 ($LS $ly@@134) |a#0@@57|)) ))))
(assert  (=> true (forall ((Sequences._default.concatSeq$A@@4 T@U) ($ly@@135 T@U) (|a#0@@58| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.concatSeq$A@@4) TyType) (= (type $ly@@135) LayerTypeType)) (= (type |a#0@@58|) (SeqType BoxType))) (or (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit |a#0@@58|)) ($Is |a#0@@58| (TSeq (TSeq Sequences._default.concatSeq$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@58|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@58|)) (|Sequences.__default.concatSeq#canCall| Sequences._default.concatSeq$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@58|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@58|)))) (= (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@135) (Lit |a#0@@58|)) (ite (= (|Seq#Length| (Lit |a#0@@58|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@135) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@58|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.concatSeq$A@@4) (Lit |a#0@@58|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2918| :pattern ( (Sequences.__default.concatSeq Sequences._default.concatSeq$A@@4 ($LS $ly@@135) (Lit |a#0@@58|))) ))))
(assert (forall ((Sequences._default.IsPrefix$A T@U) ($ly@@136 T@U) (|a#0@@59| T@U) (|b#0@@33| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A) TyType) (= (type $ly@@136) LayerTypeType)) (= (type |a#0@@59|) (SeqType BoxType))) (= (type |b#0@@33|) (SeqType BoxType))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@136) |a#0@@59| |b#0@@33|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A $ly@@136 |a#0@@59| |b#0@@33|))) :qid |unknown.0:0| :skolemid |2919| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A ($LS $ly@@136) |a#0@@59| |b#0@@33|)) )))
(assert (forall ((Sequences._default.IsPrefix$A@@0 T@U) ($ly@@137 T@U) (|a#0@@60| T@U) (|b#0@@34| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsPrefix$A@@0) TyType) (= (type $ly@@137) LayerTypeType)) (= (type |a#0@@60|) (SeqType BoxType))) (= (type |b#0@@34|) (SeqType BoxType))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $ly@@137 |a#0@@60| |b#0@@34|) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 $LZ |a#0@@60| |b#0@@34|))) :qid |unknown.0:0| :skolemid |2920| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@0 (AsFuelBottom $ly@@137) |a#0@@60| |b#0@@34|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@1 T@U) ($ly@@138 T@U) (|a#0@@61| T@U) (|b#0@@35| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.IsPrefix$A@@1) TyType) (= (type $ly@@138) LayerTypeType)) (= (type |a#0@@61|) (SeqType BoxType))) (= (type |b#0@@35|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@1 |a#0@@61| |b#0@@35|) (and ($Is |a#0@@61| (TSeq Sequences._default.IsPrefix$A@@1)) ($Is |b#0@@35| (TSeq Sequences._default.IsPrefix$A@@1))))) (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@138 |a#0@@61| |b#0@@35|)) (<= (|Seq#Length| |a#0@@61|) (|Seq#Length| |b#0@@35|))) :qid |unknown.0:0| :skolemid |2921| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@1 $ly@@138 |a#0@@61| |b#0@@35|)) ))))
(assert (forall ((Sequences._default.IsPrefix$A@@2 T@U) ($ly@@139 T@U) (|a#0@@62| T@U) (|b#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@2) TyType) (= (type $ly@@139) LayerTypeType)) (= (type |a#0@@62|) (SeqType BoxType))) (= (type |b#0@@36|) (SeqType BoxType))) (and ($Is |a#0@@62| (TSeq Sequences._default.IsPrefix$A@@2)) ($Is |b#0@@36| (TSeq Sequences._default.IsPrefix$A@@2)))) (= (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@139 |a#0@@62| |b#0@@36|) true)) :qid |unknown.0:0| :skolemid |2922| :pattern ( (|Sequences.__default.IsPrefix#requires| Sequences._default.IsPrefix$A@@2 $ly@@139 |a#0@@62| |b#0@@36|)) )))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@3 T@U) ($ly@@140 T@U) (|a#0@@63| T@U) (|b#0@@37| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@3) TyType) (= (type $ly@@140) LayerTypeType)) (= (type |a#0@@63|) (SeqType BoxType))) (= (type |b#0@@37|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@3 |a#0@@63| |b#0@@37|) (and ($Is |a#0@@63| (TSeq Sequences._default.IsPrefix$A@@3)) ($Is |b#0@@37| (TSeq Sequences._default.IsPrefix$A@@3))))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@140) |a#0@@63| |b#0@@37|)  (and (<= (|Seq#Length| |a#0@@63|) (|Seq#Length| |b#0@@37|)) (|Seq#Equal| |a#0@@63| (|Seq#Take| |b#0@@37| (|Seq#Length| |a#0@@63|)))))) :qid |unknown.0:0| :skolemid |2923| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@3 ($LS $ly@@140) |a#0@@63| |b#0@@37|)) ))))
(assert  (=> true (forall ((Sequences._default.IsPrefix$A@@4 T@U) ($ly@@141 T@U) (|a#0@@64| T@U) (|b#0@@38| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsPrefix$A@@4) TyType) (= (type $ly@@141) LayerTypeType)) (= (type |a#0@@64|) (SeqType BoxType))) (= (type |b#0@@38|) (SeqType BoxType))) (or (|Sequences.__default.IsPrefix#canCall| Sequences._default.IsPrefix$A@@4 (Lit |a#0@@64|) (Lit |b#0@@38|)) (and ($Is |a#0@@64| (TSeq Sequences._default.IsPrefix$A@@4)) ($Is |b#0@@38| (TSeq Sequences._default.IsPrefix$A@@4))))) (= (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@141) (Lit |a#0@@64|) (Lit |b#0@@38|))  (and (<= (|Seq#Length| (Lit |a#0@@64|)) (|Seq#Length| (Lit |b#0@@38|))) (|Seq#Equal| |a#0@@64| (|Seq#Take| (Lit |b#0@@38|) (|Seq#Length| (Lit |a#0@@64|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2924| :pattern ( (Sequences.__default.IsPrefix Sequences._default.IsPrefix$A@@4 ($LS $ly@@141) (Lit |a#0@@64|) (Lit |b#0@@38|))) ))))
(assert (forall ((Sequences._default.IsSuffix$A T@U) ($ly@@142 T@U) (|a#0@@65| T@U) (|b#0@@39| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A) TyType) (= (type $ly@@142) LayerTypeType)) (= (type |a#0@@65|) (SeqType BoxType))) (= (type |b#0@@39|) (SeqType BoxType))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@142) |a#0@@65| |b#0@@39|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A $ly@@142 |a#0@@65| |b#0@@39|))) :qid |unknown.0:0| :skolemid |2925| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A ($LS $ly@@142) |a#0@@65| |b#0@@39|)) )))
(assert (forall ((Sequences._default.IsSuffix$A@@0 T@U) ($ly@@143 T@U) (|a#0@@66| T@U) (|b#0@@40| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.IsSuffix$A@@0) TyType) (= (type $ly@@143) LayerTypeType)) (= (type |a#0@@66|) (SeqType BoxType))) (= (type |b#0@@40|) (SeqType BoxType))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $ly@@143 |a#0@@66| |b#0@@40|) (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 $LZ |a#0@@66| |b#0@@40|))) :qid |unknown.0:0| :skolemid |2926| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@0 (AsFuelBottom $ly@@143) |a#0@@66| |b#0@@40|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@1 T@U) ($ly@@144 T@U) (|a#0@@67| T@U) (|b#0@@41| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@1) TyType) (= (type $ly@@144) LayerTypeType)) (= (type |a#0@@67|) (SeqType BoxType))) (= (type |b#0@@41|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@1 |a#0@@67| |b#0@@41|) (and ($Is |a#0@@67| (TSeq Sequences._default.IsSuffix$A@@1)) ($Is |b#0@@41| (TSeq Sequences._default.IsSuffix$A@@1))))) true) :qid |unknown.0:0| :skolemid |2927| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@1 $ly@@144 |a#0@@67| |b#0@@41|)) ))))
(assert (forall ((Sequences._default.IsSuffix$A@@2 T@U) ($ly@@145 T@U) (|a#0@@68| T@U) (|b#0@@42| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@2) TyType) (= (type $ly@@145) LayerTypeType)) (= (type |a#0@@68|) (SeqType BoxType))) (= (type |b#0@@42|) (SeqType BoxType))) (and ($Is |a#0@@68| (TSeq Sequences._default.IsSuffix$A@@2)) ($Is |b#0@@42| (TSeq Sequences._default.IsSuffix$A@@2)))) (= (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@145 |a#0@@68| |b#0@@42|) true)) :qid |unknown.0:0| :skolemid |2928| :pattern ( (|Sequences.__default.IsSuffix#requires| Sequences._default.IsSuffix$A@@2 $ly@@145 |a#0@@68| |b#0@@42|)) )))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@3 T@U) ($ly@@146 T@U) (|a#0@@69| T@U) (|b#0@@43| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@3) TyType) (= (type $ly@@146) LayerTypeType)) (= (type |a#0@@69|) (SeqType BoxType))) (= (type |b#0@@43|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@3 |a#0@@69| |b#0@@43|) (and ($Is |a#0@@69| (TSeq Sequences._default.IsSuffix$A@@3)) ($Is |b#0@@43| (TSeq Sequences._default.IsSuffix$A@@3))))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@146) |a#0@@69| |b#0@@43|)  (and (<= (|Seq#Length| |a#0@@69|) (|Seq#Length| |b#0@@43|)) (|Seq#Equal| |a#0@@69| (|Seq#Drop| |b#0@@43| (- (|Seq#Length| |b#0@@43|) (|Seq#Length| |a#0@@69|))))))) :qid |unknown.0:0| :skolemid |2929| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@3 ($LS $ly@@146) |a#0@@69| |b#0@@43|)) ))))
(assert  (=> true (forall ((Sequences._default.IsSuffix$A@@4 T@U) ($ly@@147 T@U) (|a#0@@70| T@U) (|b#0@@44| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.IsSuffix$A@@4) TyType) (= (type $ly@@147) LayerTypeType)) (= (type |a#0@@70|) (SeqType BoxType))) (= (type |b#0@@44|) (SeqType BoxType))) (or (|Sequences.__default.IsSuffix#canCall| Sequences._default.IsSuffix$A@@4 (Lit |a#0@@70|) (Lit |b#0@@44|)) (and ($Is |a#0@@70| (TSeq Sequences._default.IsSuffix$A@@4)) ($Is |b#0@@44| (TSeq Sequences._default.IsSuffix$A@@4))))) (= (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@147) (Lit |a#0@@70|) (Lit |b#0@@44|))  (and (<= (|Seq#Length| (Lit |a#0@@70|)) (|Seq#Length| (Lit |b#0@@44|))) (|Seq#Equal| |a#0@@70| (|Seq#Drop| (Lit |b#0@@44|) (- (|Seq#Length| (Lit |b#0@@44|)) (|Seq#Length| (Lit |a#0@@70|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2930| :pattern ( (Sequences.__default.IsSuffix Sequences._default.IsSuffix$A@@4 ($LS $ly@@147) (Lit |a#0@@70|) (Lit |b#0@@44|))) ))))
(assert (forall ((arg0@@541 T@U) (arg1@@245 T@U) (arg2@@164 T@U) (arg3@@121 T@U) (arg4@@97 Int) ) (! (= (type (Sequences.__default.SeqIndexIterate arg0@@541 arg1@@245 arg2@@164 arg3@@121 arg4@@97)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndexIterate| :pattern ( (Sequences.__default.SeqIndexIterate arg0@@541 arg1@@245 arg2@@164 arg3@@121 arg4@@97)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A T@U) ($ly@@148 T@U) (|run#0@@66| T@U) (|needle#0| T@U) (|i#0@@51| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A) TyType) (= (type $ly@@148) LayerTypeType)) (= (type |run#0@@66|) (SeqType BoxType))) (= (type |needle#0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@148) |run#0@@66| |needle#0| |i#0@@51|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A $ly@@148 |run#0@@66| |needle#0| |i#0@@51|))) :qid |unknown.0:0| :skolemid |2931| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A ($LS $ly@@148) |run#0@@66| |needle#0| |i#0@@51|)) )))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@0 T@U) ($ly@@149 T@U) (|run#0@@67| T@U) (|needle#0@@0| T@U) (|i#0@@52| Int) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@0) TyType) (= (type $ly@@149) LayerTypeType)) (= (type |run#0@@67|) (SeqType BoxType))) (= (type |needle#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $ly@@149 |run#0@@67| |needle#0@@0| |i#0@@52|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 $LZ |run#0@@67| |needle#0@@0| |i#0@@52|))) :qid |unknown.0:0| :skolemid |2932| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@0 (AsFuelBottom $ly@@149) |run#0@@67| |needle#0@@0| |i#0@@52|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@1 T@U) ($ly@@150 T@U) (|run#0@@68| T@U) (|needle#0@@1| T@U) (|i#0@@53| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@1) TyType) (= (type $ly@@150) LayerTypeType)) (= (type |run#0@@68|) (SeqType BoxType))) (= (type |needle#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@1 |run#0@@68| |needle#0@@1| |i#0@@53|) (and (and ($Is |run#0@@68| (TSeq Sequences._default.SeqIndexIterate$A@@1)) ($IsBox |needle#0@@1| Sequences._default.SeqIndexIterate$A@@1)) (and (<= (LitInt 0) |i#0@@53|) (<= |i#0@@53| (|Seq#Length| |run#0@@68|)))))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@150 |run#0@@68| |needle#0@@1| |i#0@@53|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@150 |run#0@@68| |needle#0@@1| |i#0@@53|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@150 |run#0@@68| |needle#0@@1| |i#0@@53|)))) (|Seq#Length| |run#0@@68|))) (= (|Seq#Index| |run#0@@68| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@150 |run#0@@68| |needle#0@@1| |i#0@@53|))))) |needle#0@@1|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@150 |run#0@@68| |needle#0@@1| |i#0@@53|)) (forall ((|j#0@@2| Int) ) (!  (=> (and (<= |i#0@@53| |j#0@@2|) (< |j#0@@2| (|Seq#Length| |run#0@@68|))) (not (= (|Seq#Index| |run#0@@68| |j#0@@2|) |needle#0@@1|))) :qid |Sequencesidfy.341:32| :skolemid |2933| :pattern ( (|Seq#Index| |run#0@@68| |j#0@@2|)) )))) ($Is (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@150 |run#0@@68| |needle#0@@1| |i#0@@53|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |2934| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@1 $ly@@150 |run#0@@68| |needle#0@@1| |i#0@@53|)) ))))
(assert (forall ((Sequences._default.SeqIndexIterate$A@@2 T@U) ($ly@@151 T@U) (|run#0@@69| T@U) (|needle#0@@2| T@U) (|i#0@@54| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@2) TyType) (= (type $ly@@151) LayerTypeType)) (= (type |run#0@@69|) (SeqType BoxType))) (= (type |needle#0@@2|) BoxType)) (and ($Is |run#0@@69| (TSeq Sequences._default.SeqIndexIterate$A@@2)) ($IsBox |needle#0@@2| Sequences._default.SeqIndexIterate$A@@2))) (= (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@151 |run#0@@69| |needle#0@@2| |i#0@@54|)  (and (<= (LitInt 0) |i#0@@54|) (<= |i#0@@54| (|Seq#Length| |run#0@@69|))))) :qid |unknown.0:0| :skolemid |2935| :pattern ( (|Sequences.__default.SeqIndexIterate#requires| Sequences._default.SeqIndexIterate$A@@2 $ly@@151 |run#0@@69| |needle#0@@2| |i#0@@54|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@3 T@U) ($ly@@152 T@U) (|run#0@@70| T@U) (|needle#0@@3| T@U) (|i#0@@55| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@3) TyType) (= (type $ly@@152) LayerTypeType)) (= (type |run#0@@70|) (SeqType BoxType))) (= (type |needle#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@70| |needle#0@@3| |i#0@@55|) (and (and ($Is |run#0@@70| (TSeq Sequences._default.SeqIndexIterate$A@@3)) ($IsBox |needle#0@@3| Sequences._default.SeqIndexIterate$A@@3)) (and (<= (LitInt 0) |i#0@@55|) (<= |i#0@@55| (|Seq#Length| |run#0@@70|)))))) (and (=> (not (= |i#0@@55| (|Seq#Length| |run#0@@70|))) (=> (not (= (|Seq#Index| |run#0@@70| |i#0@@55|) |needle#0@@3|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@3 |run#0@@70| |needle#0@@3| (+ |i#0@@55| 1)))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@152) |run#0@@70| |needle#0@@3| |i#0@@55|) (ite (= |i#0@@55| (|Seq#Length| |run#0@@70|)) |#Options.Option.None| (ite (= (|Seq#Index| |run#0@@70| |i#0@@55|) |needle#0@@3|) (|#Options.Option.Some| ($Box (int_2_U |i#0@@55|))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 $ly@@152 |run#0@@70| |needle#0@@3| (+ |i#0@@55| 1))))))) :qid |unknown.0:0| :skolemid |2936| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@3 ($LS $ly@@152) |run#0@@70| |needle#0@@3| |i#0@@55|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@4 T@U) ($ly@@153 T@U) (|run#0@@71| T@U) (|needle#0@@4| T@U) (|i#0@@56| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@4) TyType) (= (type $ly@@153) LayerTypeType)) (= (type |run#0@@71|) (SeqType BoxType))) (= (type |needle#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@71|) |needle#0@@4| (LitInt |i#0@@56|)) (and (and ($Is |run#0@@71| (TSeq Sequences._default.SeqIndexIterate$A@@4)) ($IsBox |needle#0@@4| Sequences._default.SeqIndexIterate$A@@4)) (and (<= (LitInt 0) (LitInt |i#0@@56|)) (<= (LitInt |i#0@@56|) (|Seq#Length| (Lit |run#0@@71|))))))) (and (=> (not (= (LitInt |i#0@@56|) (|Seq#Length| (Lit |run#0@@71|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@71|) (LitInt |i#0@@56|)) |needle#0@@4|)) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@4 (Lit |run#0@@71|) |needle#0@@4| (LitInt (+ |i#0@@56| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@153) (Lit |run#0@@71|) |needle#0@@4| (LitInt |i#0@@56|)) (ite (= (LitInt |i#0@@56|) (|Seq#Length| (Lit |run#0@@71|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@71|) (LitInt |i#0@@56|)) |needle#0@@4|) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@56|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@153) (Lit |run#0@@71|) |needle#0@@4| (LitInt (+ |i#0@@56| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2937| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@4 ($LS $ly@@153) (Lit |run#0@@71|) |needle#0@@4| (LitInt |i#0@@56|))) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexIterate$A@@5 T@U) ($ly@@154 T@U) (|run#0@@72| T@U) (|needle#0@@5| T@U) (|i#0@@57| Int) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexIterate$A@@5) TyType) (= (type $ly@@154) LayerTypeType)) (= (type |run#0@@72|) (SeqType BoxType))) (= (type |needle#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt |i#0@@57|)) (and (and ($Is |run#0@@72| (TSeq Sequences._default.SeqIndexIterate$A@@5)) ($IsBox |needle#0@@5| Sequences._default.SeqIndexIterate$A@@5)) (and (<= (LitInt 0) (LitInt |i#0@@57|)) (<= (LitInt |i#0@@57|) (|Seq#Length| (Lit |run#0@@72|))))))) (and (=> (not (= (LitInt |i#0@@57|) (|Seq#Length| (Lit |run#0@@72|)))) (=> (not (= (|Seq#Index| (Lit |run#0@@72|) (LitInt |i#0@@57|)) (Lit |needle#0@@5|))) (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndexIterate$A@@5 (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@57| 1))))) (= (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@154) (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt |i#0@@57|)) (ite (= (LitInt |i#0@@57|) (|Seq#Length| (Lit |run#0@@72|))) |#Options.Option.None| (ite (= (|Seq#Index| (Lit |run#0@@72|) (LitInt |i#0@@57|)) (Lit |needle#0@@5|)) (|#Options.Option.Some| ($Box (int_2_U (LitInt |i#0@@57|)))) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@154) (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt (+ |i#0@@57| 1)))))))) :qid |unknown.0:0| :weight 3 :skolemid |2938| :pattern ( (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndexIterate$A@@5 ($LS $ly@@154) (Lit |run#0@@72|) (Lit |needle#0@@5|) (LitInt |i#0@@57|))) ))))
(assert (forall ((arg0@@542 T@U) (arg1@@246 T@U) (arg2@@165 T@U) (arg3@@122 T@U) ) (! (= (type (Sequences.__default.SeqIndex arg0@@542 arg1@@246 arg2@@165 arg3@@122)) DatatypeTypeType) :qid |funType:Sequences.__default.SeqIndex| :pattern ( (Sequences.__default.SeqIndex arg0@@542 arg1@@246 arg2@@165 arg3@@122)) )))
(assert (forall ((Sequences._default.SeqIndex$A T@U) ($ly@@155 T@U) (|run#0@@73| T@U) (|needle#0@@6| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A) TyType) (= (type $ly@@155) LayerTypeType)) (= (type |run#0@@73|) (SeqType BoxType))) (= (type |needle#0@@6|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@155) |run#0@@73| |needle#0@@6|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A $ly@@155 |run#0@@73| |needle#0@@6|))) :qid |unknown.0:0| :skolemid |2939| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A ($LS $ly@@155) |run#0@@73| |needle#0@@6|)) )))
(assert (forall ((Sequences._default.SeqIndex$A@@0 T@U) ($ly@@156 T@U) (|run#0@@74| T@U) (|needle#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndex$A@@0) TyType) (= (type $ly@@156) LayerTypeType)) (= (type |run#0@@74|) (SeqType BoxType))) (= (type |needle#0@@7|) BoxType)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $ly@@156 |run#0@@74| |needle#0@@7|) (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 $LZ |run#0@@74| |needle#0@@7|))) :qid |unknown.0:0| :skolemid |2940| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@0 (AsFuelBottom $ly@@156) |run#0@@74| |needle#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@1 T@U) ($ly@@157 T@U) (|run#0@@75| T@U) (|needle#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@1) TyType) (= (type $ly@@157) LayerTypeType)) (= (type |run#0@@75|) (SeqType BoxType))) (= (type |needle#0@@8|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@1 |run#0@@75| |needle#0@@8|) (and ($Is |run#0@@75| (TSeq Sequences._default.SeqIndex$A@@1)) ($IsBox |needle#0@@8| Sequences._default.SeqIndex$A@@1)))) (and (and (=> (Options.Option.Some_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@157 |run#0@@75| |needle#0@@8|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@157 |run#0@@75| |needle#0@@8|))))) (< (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@157 |run#0@@75| |needle#0@@8|)))) (|Seq#Length| |run#0@@75|))) (= (|Seq#Index| |run#0@@75| (U_2_int ($Unbox intType (Options.Option.value (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@157 |run#0@@75| |needle#0@@8|))))) |needle#0@@8|))) (=> (Options.Option.None_q (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@157 |run#0@@75| |needle#0@@8|)) (forall ((|i#0@@58| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@58|) (< |i#0@@58| (|Seq#Length| |run#0@@75|))) (not (= (|Seq#Index| |run#0@@75| |i#0@@58|) |needle#0@@8|))) :qid |Sequencesidfy.351:32| :skolemid |2941| :pattern ( (|Seq#Index| |run#0@@75| |i#0@@58|)) )))) ($Is (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@157 |run#0@@75| |needle#0@@8|) (Tclass.Options.Option TInt)))) :qid |unknown.0:0| :skolemid |2942| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@1 $ly@@157 |run#0@@75| |needle#0@@8|)) ))))
(assert (forall ((Sequences._default.SeqIndex$A@@2 T@U) ($ly@@158 T@U) (|run#0@@76| T@U) (|needle#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@2) TyType) (= (type $ly@@158) LayerTypeType)) (= (type |run#0@@76|) (SeqType BoxType))) (= (type |needle#0@@9|) BoxType)) (and ($Is |run#0@@76| (TSeq Sequences._default.SeqIndex$A@@2)) ($IsBox |needle#0@@9| Sequences._default.SeqIndex$A@@2))) (= (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@158 |run#0@@76| |needle#0@@9|) true)) :qid |unknown.0:0| :skolemid |2943| :pattern ( (|Sequences.__default.SeqIndex#requires| Sequences._default.SeqIndex$A@@2 $ly@@158 |run#0@@76| |needle#0@@9|)) )))
(assert (= (type StartFuel_Sequences._default.SeqIndexIterate) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@3 T@U) ($ly@@159 T@U) (|run#0@@77| T@U) (|needle#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@3) TyType) (= (type $ly@@159) LayerTypeType)) (= (type |run#0@@77|) (SeqType BoxType))) (= (type |needle#0@@10|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@77| |needle#0@@10|) (and ($Is |run#0@@77| (TSeq Sequences._default.SeqIndex$A@@3)) ($IsBox |needle#0@@10| Sequences._default.SeqIndex$A@@3)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@3 |run#0@@77| |needle#0@@10| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@159) |run#0@@77| |needle#0@@10|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@3 StartFuel_Sequences._default.SeqIndexIterate |run#0@@77| |needle#0@@10| (LitInt 0))))) :qid |unknown.0:0| :skolemid |2944| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@3 ($LS $ly@@159) |run#0@@77| |needle#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@4 T@U) ($ly@@160 T@U) (|run#0@@78| T@U) (|needle#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@4) TyType) (= (type $ly@@160) LayerTypeType)) (= (type |run#0@@78|) (SeqType BoxType))) (= (type |needle#0@@11|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@78|) |needle#0@@11|) (and ($Is |run#0@@78| (TSeq Sequences._default.SeqIndex$A@@4)) ($IsBox |needle#0@@11| Sequences._default.SeqIndex$A@@4)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@4 (Lit |run#0@@78|) |needle#0@@11| (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@160) (Lit |run#0@@78|) |needle#0@@11|) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@4 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@78|) |needle#0@@11| (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |2945| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@4 ($LS $ly@@160) (Lit |run#0@@78|) |needle#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndex$A@@5 T@U) ($ly@@161 T@U) (|run#0@@79| T@U) (|needle#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndex$A@@5) TyType) (= (type $ly@@161) LayerTypeType)) (= (type |run#0@@79|) (SeqType BoxType))) (= (type |needle#0@@12|) BoxType)) (or (|Sequences.__default.SeqIndex#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@79|) (Lit |needle#0@@12|)) (and ($Is |run#0@@79| (TSeq Sequences._default.SeqIndex$A@@5)) ($IsBox |needle#0@@12| Sequences._default.SeqIndex$A@@5)))) (and (|Sequences.__default.SeqIndexIterate#canCall| Sequences._default.SeqIndex$A@@5 (Lit |run#0@@79|) (Lit |needle#0@@12|) (LitInt 0)) (= (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@161) (Lit |run#0@@79|) (Lit |needle#0@@12|)) (Sequences.__default.SeqIndexIterate Sequences._default.SeqIndex$A@@5 StartFuel_Sequences._default.SeqIndexIterate (Lit |run#0@@79|) (Lit |needle#0@@12|) (LitInt 0))))) :qid |unknown.0:0| :weight 3 :skolemid |2946| :pattern ( (Sequences.__default.SeqIndex Sequences._default.SeqIndex$A@@5 ($LS $ly@@161) (Lit |run#0@@79|) (Lit |needle#0@@12|))) ))))
(assert (forall ((arg0@@543 T@U) (arg1@@247 T@U) (arg2@@166 Int) (arg3@@123 T@U) ) (! (= (type (Sequences.__default.SeqOfLength arg0@@543 arg1@@247 arg2@@166 arg3@@123)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqOfLength| :pattern ( (Sequences.__default.SeqOfLength arg0@@543 arg1@@247 arg2@@166 arg3@@123)) )))
(assert (forall ((Sequences._default.SeqOfLength$V T@U) ($ly@@162 T@U) (|length#0| Int) (|v#0@@8| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V) TyType) (= (type $ly@@162) LayerTypeType)) (= (type |v#0@@8|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@162) |length#0| |v#0@@8|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V $ly@@162 |length#0| |v#0@@8|))) :qid |unknown.0:0| :skolemid |2947| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V ($LS $ly@@162) |length#0| |v#0@@8|)) )))
(assert (forall ((Sequences._default.SeqOfLength$V@@0 T@U) ($ly@@163 T@U) (|length#0@@0| Int) (|v#0@@9| T@U) ) (!  (=> (and (and (= (type Sequences._default.SeqOfLength$V@@0) TyType) (= (type $ly@@163) LayerTypeType)) (= (type |v#0@@9|) BoxType)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $ly@@163 |length#0@@0| |v#0@@9|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 $LZ |length#0@@0| |v#0@@9|))) :qid |unknown.0:0| :skolemid |2948| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@0 (AsFuelBottom $ly@@163) |length#0@@0| |v#0@@9|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@1 T@U) ($ly@@164 T@U) (|length#0@@1| Int) (|v#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@1) TyType) (= (type $ly@@164) LayerTypeType)) (= (type |v#0@@10|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@1 |length#0@@1| |v#0@@10|) (and (<= (LitInt 0) |length#0@@1|) ($IsBox |v#0@@10| Sequences._default.SeqOfLength$V@@1)))) (and (and (= (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@164 |length#0@@1| |v#0@@10|)) |length#0@@1|) (forall ((|i#0@@59| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@59|) (< |i#0@@59| (|Seq#Length| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@164 |length#0@@1| |v#0@@10|)))) (= (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@164 |length#0@@1| |v#0@@10|) |i#0@@59|) |v#0@@10|)) :qid |Sequencesidfy.358:18| :skolemid |2949| :pattern ( (|Seq#Index| (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@164 |length#0@@1| |v#0@@10|) |i#0@@59|)) ))) ($Is (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@164 |length#0@@1| |v#0@@10|) (TSeq Sequences._default.SeqOfLength$V@@1)))) :qid |unknown.0:0| :skolemid |2950| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@1 $ly@@164 |length#0@@1| |v#0@@10|)) ))))
(assert (forall ((Sequences._default.SeqOfLength$V@@2 T@U) ($ly@@165 T@U) (|length#0@@2| Int) (|v#0@@11| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@2) TyType) (= (type $ly@@165) LayerTypeType)) (= (type |v#0@@11|) BoxType)) (and (<= (LitInt 0) |length#0@@2|) ($IsBox |v#0@@11| Sequences._default.SeqOfLength$V@@2))) (= (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@165 |length#0@@2| |v#0@@11|) true)) :qid |unknown.0:0| :skolemid |2951| :pattern ( (|Sequences.__default.SeqOfLength#requires| Sequences._default.SeqOfLength$V@@2 $ly@@165 |length#0@@2| |v#0@@11|)) )))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@3 T@U) ($ly@@166 T@U) (|length#0@@3| Int) (|v#0@@12| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@3) TyType) (= (type $ly@@166) LayerTypeType)) (= (type |v#0@@12|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 |length#0@@3| |v#0@@12|) (and (<= (LitInt 0) |length#0@@3|) ($IsBox |v#0@@12| Sequences._default.SeqOfLength$V@@3)))) (and (=> (not (= |length#0@@3| (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@3 (- |length#0@@3| 1) |v#0@@12|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@166) |length#0@@3| |v#0@@12|) (ite (= |length#0@@3| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@12|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 $ly@@166 (- |length#0@@3| 1) |v#0@@12|)))))) :qid |unknown.0:0| :skolemid |2952| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@3 ($LS $ly@@166) |length#0@@3| |v#0@@12|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@4 T@U) ($ly@@167 T@U) (|length#0@@4| Int) (|v#0@@13| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@4) TyType) (= (type $ly@@167) LayerTypeType)) (= (type |v#0@@13|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt |length#0@@4|) |v#0@@13|) (and (<= (LitInt 0) |length#0@@4|) ($IsBox |v#0@@13| Sequences._default.SeqOfLength$V@@4)))) (and (=> (not (= (LitInt |length#0@@4|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@4 (LitInt (- |length#0@@4| 1)) |v#0@@13|)) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@167) (LitInt |length#0@@4|) |v#0@@13|) (ite (= (LitInt |length#0@@4|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) |v#0@@13|) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@167) (LitInt (- |length#0@@4| 1)) |v#0@@13|)))))) :qid |unknown.0:0| :weight 3 :skolemid |2953| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@4 ($LS $ly@@167) (LitInt |length#0@@4|) |v#0@@13|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqOfLength$V@@5 T@U) ($ly@@168 T@U) (|length#0@@5| Int) (|v#0@@14| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqOfLength$V@@5) TyType) (= (type $ly@@168) LayerTypeType)) (= (type |v#0@@14|) BoxType)) (or (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt |length#0@@5|) (Lit |v#0@@14|)) (and (<= (LitInt 0) |length#0@@5|) ($IsBox |v#0@@14| Sequences._default.SeqOfLength$V@@5)))) (and (=> (not (= (LitInt |length#0@@5|) (LitInt 0))) (|Sequences.__default.SeqOfLength#canCall| Sequences._default.SeqOfLength$V@@5 (LitInt (- |length#0@@5| 1)) (Lit |v#0@@14|))) (= (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@168) (LitInt |length#0@@5|) (Lit |v#0@@14|)) (ite (= (LitInt |length#0@@5|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) (Lit |v#0@@14|)) (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@168) (LitInt (- |length#0@@5| 1)) (Lit |v#0@@14|))))))) :qid |unknown.0:0| :weight 3 :skolemid |2954| :pattern ( (Sequences.__default.SeqOfLength Sequences._default.SeqOfLength$V@@5 ($LS $ly@@168) (LitInt |length#0@@5|) (Lit |v#0@@14|))) ))))
(assert (forall ((arg0@@544 T@U) (arg1@@248 T@U) (arg2@@167 T@U) (arg3@@124 Int) (arg4@@98 T@U) ) (! (= (type (Sequences.__default.SeqIndexUpdate arg0@@544 arg1@@248 arg2@@167 arg3@@124 arg4@@98)) (SeqType BoxType)) :qid |funType:Sequences.__default.SeqIndexUpdate| :pattern ( (Sequences.__default.SeqIndexUpdate arg0@@544 arg1@@248 arg2@@167 arg3@@124 arg4@@98)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T T@U) ($ly@@169 T@U) (|s#0@@38| T@U) (|i#0@@60| Int) (|t#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T) TyType) (= (type $ly@@169) LayerTypeType)) (= (type |s#0@@38|) (SeqType BoxType))) (= (type |t#0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@169) |s#0@@38| |i#0@@60| |t#0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T $ly@@169 |s#0@@38| |i#0@@60| |t#0|))) :qid |unknown.0:0| :skolemid |2955| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T ($LS $ly@@169) |s#0@@38| |i#0@@60| |t#0|)) )))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@0 T@U) ($ly@@170 T@U) (|s#0@@39| T@U) (|i#0@@61| Int) (|t#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@0) TyType) (= (type $ly@@170) LayerTypeType)) (= (type |s#0@@39|) (SeqType BoxType))) (= (type |t#0@@0|) BoxType)) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $ly@@170 |s#0@@39| |i#0@@61| |t#0@@0|) (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 $LZ |s#0@@39| |i#0@@61| |t#0@@0|))) :qid |unknown.0:0| :skolemid |2956| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@0 (AsFuelBottom $ly@@170) |s#0@@39| |i#0@@61| |t#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@1 T@U) ($ly@@171 T@U) (|s#0@@40| T@U) (|i#0@@62| Int) (|t#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@1) TyType) (= (type $ly@@171) LayerTypeType)) (= (type |s#0@@40|) (SeqType BoxType))) (= (type |t#0@@1|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@1 |s#0@@40| |i#0@@62| |t#0@@1|) (and (and (and ($Is |s#0@@40| (TSeq Sequences._default.SeqIndexUpdate$T@@1)) (and (<= (LitInt 0) |i#0@@62|) (< |i#0@@62| 18446744073709551616))) ($IsBox |t#0@@1| Sequences._default.SeqIndexUpdate$T@@1)) (and (< (+ |i#0@@62| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@62|) (< |i#0@@62| (|Seq#Length| |s#0@@40|))))))) (and (|Seq#Equal| (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@171 |s#0@@40| |i#0@@62| |t#0@@1|) (|Seq#Update| |s#0@@40| |i#0@@62| |t#0@@1|)) ($Is (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@171 |s#0@@40| |i#0@@62| |t#0@@1|) (TSeq Sequences._default.SeqIndexUpdate$T@@1)))) :qid |unknown.0:0| :skolemid |2957| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@1 $ly@@171 |s#0@@40| |i#0@@62| |t#0@@1|)) ))))
(assert (forall ((Sequences._default.SeqIndexUpdate$T@@2 T@U) ($ly@@172 T@U) (|s#0@@41| T@U) (|i#0@@63| Int) (|t#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@2) TyType) (= (type $ly@@172) LayerTypeType)) (= (type |s#0@@41|) (SeqType BoxType))) (= (type |t#0@@2|) BoxType)) (and (and ($Is |s#0@@41| (TSeq Sequences._default.SeqIndexUpdate$T@@2)) (and (<= (LitInt 0) |i#0@@63|) (< |i#0@@63| 18446744073709551616))) ($IsBox |t#0@@2| Sequences._default.SeqIndexUpdate$T@@2))) (= (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@172 |s#0@@41| |i#0@@63| |t#0@@2|)  (and (< (+ |i#0@@63| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@63|) (< |i#0@@63| (|Seq#Length| |s#0@@41|)))))) :qid |unknown.0:0| :skolemid |2958| :pattern ( (|Sequences.__default.SeqIndexUpdate#requires| Sequences._default.SeqIndexUpdate$T@@2 $ly@@172 |s#0@@41| |i#0@@63| |t#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@3 T@U) ($ly@@173 T@U) (|s#0@@42| T@U) (|i#0@@64| Int) (|t#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@3) TyType) (= (type $ly@@173) LayerTypeType)) (= (type |s#0@@42|) (SeqType BoxType))) (= (type |t#0@@3|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@3 |s#0@@42| |i#0@@64| |t#0@@3|) (and (and (and ($Is |s#0@@42| (TSeq Sequences._default.SeqIndexUpdate$T@@3)) (and (<= (LitInt 0) |i#0@@64|) (< |i#0@@64| 18446744073709551616))) ($IsBox |t#0@@3| Sequences._default.SeqIndexUpdate$T@@3)) (and (< (+ |i#0@@64| 1) 18446744073709551616) (and (<= (LitInt 0) |i#0@@64|) (< |i#0@@64| (|Seq#Length| |s#0@@42|))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@173) |s#0@@42| |i#0@@64| |t#0@@3|) (|Seq#Append| (|Seq#Append| (|Seq#Take| |s#0@@42| |i#0@@64|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@3|)) (|Seq#Drop| |s#0@@42| (+ |i#0@@64| 1))))) :qid |unknown.0:0| :skolemid |2959| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@3 ($LS $ly@@173) |s#0@@42| |i#0@@64| |t#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@4 T@U) ($ly@@174 T@U) (|s#0@@43| T@U) (|i#0@@65| Int) (|t#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@4) TyType) (= (type $ly@@174) LayerTypeType)) (= (type |s#0@@43|) (SeqType BoxType))) (= (type |t#0@@4|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@4 (Lit |s#0@@43|) (LitInt |i#0@@65|) |t#0@@4|) (and (and (and ($Is |s#0@@43| (TSeq Sequences._default.SeqIndexUpdate$T@@4)) (and (<= (LitInt 0) |i#0@@65|) (< |i#0@@65| 18446744073709551616))) ($IsBox |t#0@@4| Sequences._default.SeqIndexUpdate$T@@4)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@65| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@65|)) (< |i#0@@65| (|Seq#Length| (Lit |s#0@@43|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@174) (Lit |s#0@@43|) (LitInt |i#0@@65|) |t#0@@4|) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@43|) (LitInt |i#0@@65|)) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@4|)) (|Seq#Drop| (Lit |s#0@@43|) (LitInt (+ |i#0@@65| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2960| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@4 ($LS $ly@@174) (Lit |s#0@@43|) (LitInt |i#0@@65|) |t#0@@4|)) ))))
(assert  (=> true (forall ((Sequences._default.SeqIndexUpdate$T@@5 T@U) ($ly@@175 T@U) (|s#0@@44| T@U) (|i#0@@66| Int) (|t#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.SeqIndexUpdate$T@@5) TyType) (= (type $ly@@175) LayerTypeType)) (= (type |s#0@@44|) (SeqType BoxType))) (= (type |t#0@@5|) BoxType)) (or (|Sequences.__default.SeqIndexUpdate#canCall| Sequences._default.SeqIndexUpdate$T@@5 (Lit |s#0@@44|) (LitInt |i#0@@66|) (Lit |t#0@@5|)) (and (and (and ($Is |s#0@@44| (TSeq Sequences._default.SeqIndexUpdate$T@@5)) (and (<= (LitInt 0) |i#0@@66|) (< |i#0@@66| 18446744073709551616))) ($IsBox |t#0@@5| Sequences._default.SeqIndexUpdate$T@@5)) (and (U_2_bool (Lit (bool_2_U (< (+ |i#0@@66| 1) 18446744073709551616)))) (and (<= (LitInt 0) (LitInt |i#0@@66|)) (< |i#0@@66| (|Seq#Length| (Lit |s#0@@44|)))))))) (= (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@175) (Lit |s#0@@44|) (LitInt |i#0@@66|) (Lit |t#0@@5|)) (|Seq#Append| (|Seq#Append| (|Seq#Take| (Lit |s#0@@44|) (LitInt |i#0@@66|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@5|))) (|Seq#Drop| (Lit |s#0@@44|) (LitInt (+ |i#0@@66| 1)))))) :qid |unknown.0:0| :weight 3 :skolemid |2961| :pattern ( (Sequences.__default.SeqIndexUpdate Sequences._default.SeqIndexUpdate$T@@5 ($LS $ly@@175) (Lit |s#0@@44|) (LitInt |i#0@@66|) (Lit |t#0@@5|))) ))))
(assert (forall ((arg0@@545 T@U) (arg1@@249 T@U) (arg2@@168 T@U) (arg3@@125 T@U) (arg4@@99 T@U) ) (! (= (type (Sequences.__default.Zip arg0@@545 arg1@@249 arg2@@168 arg3@@125 arg4@@99)) (SeqType BoxType)) :qid |funType:Sequences.__default.Zip| :pattern ( (Sequences.__default.Zip arg0@@545 arg1@@249 arg2@@168 arg3@@125 arg4@@99)) )))
(assert (forall ((Sequences._default.Zip$A T@U) (Sequences._default.Zip$B T@U) ($ly@@176 T@U) (|a#0@@71| T@U) (|b#0@@45| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A) TyType) (= (type Sequences._default.Zip$B) TyType)) (= (type $ly@@176) LayerTypeType)) (= (type |a#0@@71|) (SeqType BoxType))) (= (type |b#0@@45|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@176) |a#0@@71| |b#0@@45|) (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B $ly@@176 |a#0@@71| |b#0@@45|))) :qid |unknown.0:0| :skolemid |2962| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A Sequences._default.Zip$B ($LS $ly@@176) |a#0@@71| |b#0@@45|)) )))
(assert (forall ((Sequences._default.Zip$A@@0 T@U) (Sequences._default.Zip$B@@0 T@U) ($ly@@177 T@U) (|a#0@@72| T@U) (|b#0@@46| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Zip$A@@0) TyType) (= (type Sequences._default.Zip$B@@0) TyType)) (= (type $ly@@177) LayerTypeType)) (= (type |a#0@@72|) (SeqType BoxType))) (= (type |b#0@@46|) (SeqType BoxType))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $ly@@177 |a#0@@72| |b#0@@46|) (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 $LZ |a#0@@72| |b#0@@46|))) :qid |unknown.0:0| :skolemid |2963| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@0 Sequences._default.Zip$B@@0 (AsFuelBottom $ly@@177) |a#0@@72| |b#0@@46|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@1 T@U) (Sequences._default.Zip$B@@1 T@U) ($ly@@178 T@U) (|a#0@@73| T@U) (|b#0@@47| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@1) TyType) (= (type Sequences._default.Zip$B@@1) TyType)) (= (type $ly@@178) LayerTypeType)) (= (type |a#0@@73|) (SeqType BoxType))) (= (type |b#0@@47|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 |a#0@@73| |b#0@@47|) (and (and ($Is |a#0@@73| (TSeq Sequences._default.Zip$A@@1)) ($Is |b#0@@47| (TSeq Sequences._default.Zip$B@@1))) (= (|Seq#Length| |a#0@@73|) (|Seq#Length| |b#0@@47|))))) (and (and (= (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@178 |a#0@@73| |b#0@@47|)) (|Seq#Length| |a#0@@73|)) (forall ((|i#0@@67| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@67|) (< |i#0@@67| (|Seq#Length| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@178 |a#0@@73| |b#0@@47|)))) (|_System.Tuple2#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@178 |a#0@@73| |b#0@@47|) |i#0@@67|)) (|#_System._tuple#2._#Make2| (|Seq#Index| |a#0@@73| |i#0@@67|) (|Seq#Index| |b#0@@47| |i#0@@67|))))) :qid |Sequencesidfy.379:20| :skolemid |2964| :pattern ( (|Seq#Index| |b#0@@47| |i#0@@67|)) :pattern ( (|Seq#Index| |a#0@@73| |i#0@@67|)) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@178 |a#0@@73| |b#0@@47|) |i#0@@67|))) ))) ($Is (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@178 |a#0@@73| |b#0@@47|) (TSeq (Tclass._System.Tuple2 Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1))))) :qid |unknown.0:0| :skolemid |2965| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@1 Sequences._default.Zip$B@@1 $ly@@178 |a#0@@73| |b#0@@47|)) ))))
(assert (forall ((Sequences._default.Zip$A@@2 T@U) (Sequences._default.Zip$B@@2 T@U) ($ly@@179 T@U) (|a#0@@74| T@U) (|b#0@@48| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@2) TyType) (= (type Sequences._default.Zip$B@@2) TyType)) (= (type $ly@@179) LayerTypeType)) (= (type |a#0@@74|) (SeqType BoxType))) (= (type |b#0@@48|) (SeqType BoxType))) (and ($Is |a#0@@74| (TSeq Sequences._default.Zip$A@@2)) ($Is |b#0@@48| (TSeq Sequences._default.Zip$B@@2)))) (= (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@179 |a#0@@74| |b#0@@48|) (= (|Seq#Length| |a#0@@74|) (|Seq#Length| |b#0@@48|)))) :qid |unknown.0:0| :skolemid |2966| :pattern ( (|Sequences.__default.Zip#requires| Sequences._default.Zip$A@@2 Sequences._default.Zip$B@@2 $ly@@179 |a#0@@74| |b#0@@48|)) )))
(assert  (=> true (forall ((Sequences._default.Zip$A@@3 T@U) (Sequences._default.Zip$B@@3 T@U) ($ly@@180 T@U) (|a#0@@75| T@U) (|b#0@@49| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@3) TyType) (= (type Sequences._default.Zip$B@@3) TyType)) (= (type $ly@@180) LayerTypeType)) (= (type |a#0@@75|) (SeqType BoxType))) (= (type |b#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 |a#0@@75| |b#0@@49|) (and (and ($Is |a#0@@75| (TSeq Sequences._default.Zip$A@@3)) ($Is |b#0@@49| (TSeq Sequences._default.Zip$B@@3))) (= (|Seq#Length| |a#0@@75|) (|Seq#Length| |b#0@@49|))))) (and (=> (not (= (|Seq#Length| |a#0@@75|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@3 |a#0@@75|) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@3 |b#0@@49|)) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@75|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@49|))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@3 |a#0@@75|) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@3 |b#0@@49|)))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@180) |a#0@@75| |b#0@@49|) (ite (= (|Seq#Length| |a#0@@75|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 $ly@@180 (Sequences.__default.DropLast Sequences._default.Zip$A@@3 |a#0@@75|) (Sequences.__default.DropLast Sequences._default.Zip$B@@3 |b#0@@49|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#_System._tuple#2._#Make2| (Sequences.__default.Last Sequences._default.Zip$A@@3 |a#0@@75|) (Sequences.__default.Last Sequences._default.Zip$B@@3 |b#0@@49|))))))))) :qid |unknown.0:0| :skolemid |2967| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@3 Sequences._default.Zip$B@@3 ($LS $ly@@180) |a#0@@75| |b#0@@49|)) ))))
(assert  (=> true (forall ((Sequences._default.Zip$A@@4 T@U) (Sequences._default.Zip$B@@4 T@U) ($ly@@181 T@U) (|a#0@@76| T@U) (|b#0@@50| T@U) ) (!  (=> (and (and (and (and (and (= (type Sequences._default.Zip$A@@4) TyType) (= (type Sequences._default.Zip$B@@4) TyType)) (= (type $ly@@181) LayerTypeType)) (= (type |a#0@@76|) (SeqType BoxType))) (= (type |b#0@@50|) (SeqType BoxType))) (or (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit |a#0@@76|) (Lit |b#0@@50|)) (and (and ($Is |a#0@@76| (TSeq Sequences._default.Zip$A@@4)) ($Is |b#0@@50| (TSeq Sequences._default.Zip$B@@4))) (= (|Seq#Length| (Lit |a#0@@76|)) (|Seq#Length| (Lit |b#0@@50|)))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@76|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@76|)) (|Sequences.__default.DropLast#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@50|))) (|Sequences.__default.Zip#canCall| Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@76|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@50|))))) (and (|Sequences.__default.Last#canCall| Sequences._default.Zip$A@@4 (Lit |a#0@@76|)) (|Sequences.__default.Last#canCall| Sequences._default.Zip$B@@4 (Lit |b#0@@50|))))) (= (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@181) (Lit |a#0@@76|) (Lit |b#0@@50|)) (ite (= (|Seq#Length| (Lit |a#0@@76|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@181) (Lit (Sequences.__default.DropLast Sequences._default.Zip$A@@4 (Lit |a#0@@76|))) (Lit (Sequences.__default.DropLast Sequences._default.Zip$B@@4 (Lit |b#0@@50|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#_System._tuple#2._#Make2| (Lit (Sequences.__default.Last Sequences._default.Zip$A@@4 (Lit |a#0@@76|))) (Lit (Sequences.__default.Last Sequences._default.Zip$B@@4 (Lit |b#0@@50|)))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2968| :pattern ( (Sequences.__default.Zip Sequences._default.Zip$A@@4 Sequences._default.Zip$B@@4 ($LS $ly@@181) (Lit |a#0@@76|) (Lit |b#0@@50|))) ))))
(assert (forall ((arg0@@546 T@U) (arg1@@250 T@U) (arg2@@169 T@U) (arg3@@126 T@U) ) (! (= (type (Sequences.__default.Unzip arg0@@546 arg1@@250 arg2@@169 arg3@@126)) DatatypeTypeType) :qid |funType:Sequences.__default.Unzip| :pattern ( (Sequences.__default.Unzip arg0@@546 arg1@@250 arg2@@169 arg3@@126)) )))
(assert (forall ((Sequences._default.Unzip$A T@U) (Sequences._default.Unzip$B T@U) ($ly@@182 T@U) (|z#0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A) TyType) (= (type Sequences._default.Unzip$B) TyType)) (= (type $ly@@182) LayerTypeType)) (= (type |z#0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@182) |z#0|) (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B $ly@@182 |z#0|))) :qid |unknown.0:0| :skolemid |2969| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A Sequences._default.Unzip$B ($LS $ly@@182) |z#0|)) )))
(assert (forall ((Sequences._default.Unzip$A@@0 T@U) (Sequences._default.Unzip$B@@0 T@U) ($ly@@183 T@U) (|z#0@@0| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Unzip$A@@0) TyType) (= (type Sequences._default.Unzip$B@@0) TyType)) (= (type $ly@@183) LayerTypeType)) (= (type |z#0@@0|) (SeqType BoxType))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $ly@@183 |z#0@@0|) (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 $LZ |z#0@@0|))) :qid |unknown.0:0| :skolemid |2970| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@0 Sequences._default.Unzip$B@@0 (AsFuelBottom $ly@@183) |z#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@1 T@U) (Sequences._default.Unzip$B@@1 T@U) ($ly@@184 T@U) (|z#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@1) TyType) (= (type Sequences._default.Unzip$B@@1) TyType)) (= (type $ly@@184) LayerTypeType)) (= (type |z#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 |z#0@@1|) ($Is |z#0@@1| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1))))) (and (and (and (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@184 |z#0@@1|)))) (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@184 |z#0@@1|))))) (= (|Seq#Length| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@184 |z#0@@1|)))) (|Seq#Length| |z#0@@1|))) (forall ((|i#0@@68| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@68|) (< |i#0@@68| (|Seq#Length| |z#0@@1|))) (|_System.Tuple2#Equal| (|#_System._tuple#2._#Make2| (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@184 |z#0@@1|))) |i#0@@68|) (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@184 |z#0@@1|))) |i#0@@68|)) ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@68|))))) :qid |Sequencesidfy.387:20| :skolemid |2971| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |z#0@@1| |i#0@@68|))) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@184 |z#0@@1|))) |i#0@@68|)) :pattern ( (|Seq#Index| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@184 |z#0@@1|))) |i#0@@68|)) ))) ($Is (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@184 |z#0@@1|) (Tclass._System.Tuple2 (TSeq Sequences._default.Unzip$A@@1) (TSeq Sequences._default.Unzip$B@@1))))) :qid |unknown.0:0| :skolemid |2972| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@1 Sequences._default.Unzip$B@@1 $ly@@184 |z#0@@1|)) ))))
(assert (forall ((Sequences._default.Unzip$A@@2 T@U) (Sequences._default.Unzip$B@@2 T@U) ($ly@@185 T@U) (|z#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@2) TyType) (= (type Sequences._default.Unzip$B@@2) TyType)) (= (type $ly@@185) LayerTypeType)) (= (type |z#0@@2|) (SeqType BoxType))) ($Is |z#0@@2| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2)))) (= (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@185 |z#0@@2|) true)) :qid |unknown.0:0| :skolemid |2973| :pattern ( (|Sequences.__default.Unzip#requires| Sequences._default.Unzip$A@@2 Sequences._default.Unzip$B@@2 $ly@@185 |z#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@3 T@U) (Sequences._default.Unzip$B@@3 T@U) ($ly@@186 T@U) (|z#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@3) TyType) (= (type Sequences._default.Unzip$B@@3) TyType)) (= (type $ly@@186) LayerTypeType)) (= (type |z#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 |z#0@@3|) ($Is |z#0@@3| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3))))) (and (=> (not (= (|Seq#Length| |z#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@186) |z#0@@3|) (ite (= (|Seq#Length| |z#0@@3|) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#0@@51| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@186 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (let ((|a#0@@77| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 $ly@@186 (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#0@@77| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|)))))) ($Box (|Seq#Append| |b#0@@51| (|Seq#Build| (|Seq#Empty| BoxType) (_System.Tuple2._1 ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3) |z#0@@3|))))))))))))) :qid |unknown.0:0| :skolemid |2974| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@3 Sequences._default.Unzip$B@@3 ($LS $ly@@186) |z#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.Unzip$A@@4 T@U) (Sequences._default.Unzip$B@@4 T@U) ($ly@@187 T@U) (|z#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Sequences._default.Unzip$A@@4) TyType) (= (type Sequences._default.Unzip$B@@4) TyType)) (= (type $ly@@187) LayerTypeType)) (= (type |z#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit |z#0@@4|)) ($Is |z#0@@4| (TSeq (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4))))) (and (=> (not (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (|Sequences.__default.Unzip#canCall| Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))) (and (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))) (and (|Sequences.__default.Last#canCall| (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)) (_System.Tuple2.___hMake2_q (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) (= (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@187) (Lit |z#0@@4|)) (ite (= (|Seq#Length| (Lit |z#0@@4|)) (LitInt 0)) (|#_System._tuple#2._#Make2| ($Box (Lit (|Seq#Empty| BoxType))) ($Box (Lit (|Seq#Empty| BoxType)))) (let ((|b#1| ($Unbox (SeqType BoxType) (_System.Tuple2._1 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@187) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (let ((|a#1| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@187) (Lit (Sequences.__default.DropLast (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))) (|#_System._tuple#2._#Make2| ($Box (|Seq#Append| |a#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._0 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|))))))))) ($Box (|Seq#Append| |b#1| (|Seq#Build| (|Seq#Empty| BoxType) (Lit (_System.Tuple2._1 (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last (Tclass._System.Tuple2 Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4) (Lit |z#0@@4|)))))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2975| :pattern ( (Sequences.__default.Unzip Sequences._default.Unzip$A@@4 Sequences._default.Unzip$B@@4 ($LS $ly@@187) (Lit |z#0@@4|))) ))))
(assert (forall ((arg0@@547 T@U) (arg1@@251 T@U) (arg2@@170 T@U) ) (! (= (type (Sequences.__default.FlattenShape arg0@@547 arg1@@251 arg2@@170)) (SeqType BoxType)) :qid |funType:Sequences.__default.FlattenShape| :pattern ( (Sequences.__default.FlattenShape arg0@@547 arg1@@251 arg2@@170)) )))
(assert (forall ((Sequences._default.FlattenShape$A T@U) ($ly@@188 T@U) (|seqs#0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A) TyType) (= (type $ly@@188) LayerTypeType)) (= (type |seqs#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@188) |seqs#0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A $ly@@188 |seqs#0|))) :qid |unknown.0:0| :skolemid |2976| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A ($LS $ly@@188) |seqs#0|)) )))
(assert (forall ((Sequences._default.FlattenShape$A@@0 T@U) ($ly@@189 T@U) (|seqs#0@@0| T@U) ) (!  (=> (and (and (= (type Sequences._default.FlattenShape$A@@0) TyType) (= (type $ly@@189) LayerTypeType)) (= (type |seqs#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $ly@@189 |seqs#0@@0|) (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 $LZ |seqs#0@@0|))) :qid |unknown.0:0| :skolemid |2977| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@0 (AsFuelBottom $ly@@189) |seqs#0@@0|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@1 T@U) ($ly@@190 T@U) (|seqs#0@@1| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@1) TyType) (= (type $ly@@190) LayerTypeType)) (= (type |seqs#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@1 |seqs#0@@1|) ($Is |seqs#0@@1| (TSeq (TSeq Sequences._default.FlattenShape$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@190 |seqs#0@@1|)) (|Seq#Length| |seqs#0@@1|)) (forall ((|i#0@@69| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@69|) (< |i#0@@69| (|Seq#Length| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@190 |seqs#0@@1|)))) (= (U_2_int ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@190 |seqs#0@@1|) |i#0@@69|))) (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@69|)))))) :qid |Sequencesidfy.409:20| :skolemid |2978| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |seqs#0@@1| |i#0@@69|))) :pattern ( ($Unbox intType (|Seq#Index| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@190 |seqs#0@@1|) |i#0@@69|))) ))) ($Is (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@190 |seqs#0@@1|) (TSeq Tclass._System.nat)))) :qid |unknown.0:0| :skolemid |2979| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@1 $ly@@190 |seqs#0@@1|)) ))))
(assert (forall ((Sequences._default.FlattenShape$A@@2 T@U) ($ly@@191 T@U) (|seqs#0@@2| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@2) TyType) (= (type $ly@@191) LayerTypeType)) (= (type |seqs#0@@2|) (SeqType BoxType))) ($Is |seqs#0@@2| (TSeq (TSeq Sequences._default.FlattenShape$A@@2)))) (= (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@191 |seqs#0@@2|) true)) :qid |unknown.0:0| :skolemid |2980| :pattern ( (|Sequences.__default.FlattenShape#requires| Sequences._default.FlattenShape$A@@2 $ly@@191 |seqs#0@@2|)) )))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@3 T@U) ($ly@@192 T@U) (|seqs#0@@3| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@3) TyType) (= (type $ly@@192) LayerTypeType)) (= (type |seqs#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 |seqs#0@@3|) ($Is |seqs#0@@3| (TSeq (TSeq Sequences._default.FlattenShape$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@192) |seqs#0@@3|) (ite (= (|Seq#Length| |seqs#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 $ly@@192 (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@3) |seqs#0@@3|))))))))))) :qid |unknown.0:0| :skolemid |2981| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@3 ($LS $ly@@192) |seqs#0@@3|)) ))))
(assert  (=> true (forall ((Sequences._default.FlattenShape$A@@4 T@U) ($ly@@193 T@U) (|seqs#0@@4| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.FlattenShape$A@@4) TyType) (= (type $ly@@193) LayerTypeType)) (= (type |seqs#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit |seqs#0@@4|)) ($Is |seqs#0@@4| (TSeq (TSeq Sequences._default.FlattenShape$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)) (|Sequences.__default.FlattenShape#canCall| Sequences._default.FlattenShape$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (= (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@193) (Lit |seqs#0@@4|)) (ite (= (|Seq#Length| (Lit |seqs#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@193) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (|Seq#Length| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.FlattenShape$A@@4) (Lit |seqs#0@@4|))))))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2982| :pattern ( (Sequences.__default.FlattenShape Sequences._default.FlattenShape$A@@4 ($LS $ly@@193) (Lit |seqs#0@@4|))) ))))
(assert (forall (($ly@@194 T@U) (|shape#0| T@U) ) (!  (=> (and (= (type $ly@@194) LayerTypeType) (= (type |shape#0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength ($LS $ly@@194) |shape#0|) (Sequences.__default.FlattenLength $ly@@194 |shape#0|))) :qid |Sequencesidfy.420:22| :skolemid |2983| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@194) |shape#0|)) )))
(assert (forall (($ly@@195 T@U) (|shape#0@@0| T@U) ) (!  (=> (and (= (type $ly@@195) LayerTypeType) (= (type |shape#0@@0|) (SeqType BoxType))) (= (Sequences.__default.FlattenLength $ly@@195 |shape#0@@0|) (Sequences.__default.FlattenLength $LZ |shape#0@@0|))) :qid |Sequencesidfy.420:22| :skolemid |2984| :pattern ( (Sequences.__default.FlattenLength (AsFuelBottom $ly@@195) |shape#0@@0|)) )))
(assert  (=> true (forall (($ly@@196 T@U) (|shape#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@196) LayerTypeType) (= (type |shape#0@@1|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@1|) ($Is |shape#0@@1| (TSeq Tclass._System.nat)))) (and (=> (= (|Seq#Length| |shape#0@@1|) (LitInt 0)) (= (Sequences.__default.FlattenLength $ly@@196 |shape#0@@1|) (LitInt 0))) (<= (LitInt 0) (Sequences.__default.FlattenLength $ly@@196 |shape#0@@1|)))) :qid |Sequencesidfy.420:22| :skolemid |2985| :pattern ( (Sequences.__default.FlattenLength $ly@@196 |shape#0@@1|)) ))))
(assert (forall (($ly@@197 T@U) (|shape#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@197) LayerTypeType) (= (type |shape#0@@2|) (SeqType BoxType))) ($Is |shape#0@@2| (TSeq Tclass._System.nat))) (= (|Sequences.__default.FlattenLength#requires| $ly@@197 |shape#0@@2|) true)) :qid |Sequencesidfy.420:22| :skolemid |2986| :pattern ( (|Sequences.__default.FlattenLength#requires| $ly@@197 |shape#0@@2|)) )))
(assert  (=> true (forall (($ly@@198 T@U) (|shape#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@198) LayerTypeType) (= (type |shape#0@@3|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| |shape#0@@3|) ($Is |shape#0@@3| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| |shape#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@3|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|))) (|Sequences.__default.Last#canCall| Tclass._System.nat |shape#0@@3|))) (= (Sequences.__default.FlattenLength ($LS $ly@@198) |shape#0@@3|) (ite (= (|Seq#Length| |shape#0@@3|) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength $ly@@198 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@3|)) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat |shape#0@@3|)))))))) :qid |Sequencesidfy.420:22| :skolemid |2987| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@198) |shape#0@@3|)) ))))
(assert  (=> true (forall (($ly@@199 T@U) (|shape#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@199) LayerTypeType) (= (type |shape#0@@4|) (SeqType BoxType))) (or (|Sequences.__default.FlattenLength#canCall| (Lit |shape#0@@4|)) ($Is |shape#0@@4| (TSeq Tclass._System.nat)))) (and (=> (not (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@4|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|))))) (|Sequences.__default.Last#canCall| Tclass._System.nat (Lit |shape#0@@4|)))) (= (Sequences.__default.FlattenLength ($LS $ly@@199) (Lit |shape#0@@4|)) (ite (= (|Seq#Length| (Lit |shape#0@@4|)) (LitInt 0)) 0 (+ (Sequences.__default.FlattenLength ($LS $ly@@199) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@4|)))) (U_2_int ($Unbox intType (Sequences.__default.Last Tclass._System.nat (Lit |shape#0@@4|))))))))) :qid |Sequencesidfy.420:22| :weight 3 :skolemid |2988| :pattern ( (Sequences.__default.FlattenLength ($LS $ly@@199) (Lit |shape#0@@4|))) ))))
(assert (forall ((arg0@@548 T@U) (arg1@@252 T@U) (arg2@@171 T@U) ) (! (= (type (Sequences.__default.Flatten arg0@@548 arg1@@252 arg2@@171)) (SeqType BoxType)) :qid |funType:Sequences.__default.Flatten| :pattern ( (Sequences.__default.Flatten arg0@@548 arg1@@252 arg2@@171)) )))
(assert (forall ((Sequences._default.Flatten$A T@U) ($ly@@200 T@U) (|seqs#0@@5| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A) TyType) (= (type $ly@@200) LayerTypeType)) (= (type |seqs#0@@5|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@200) |seqs#0@@5|) (Sequences.__default.Flatten Sequences._default.Flatten$A $ly@@200 |seqs#0@@5|))) :qid |unknown.0:0| :skolemid |2989| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A ($LS $ly@@200) |seqs#0@@5|)) )))
(assert (forall ((Sequences._default.Flatten$A@@0 T@U) ($ly@@201 T@U) (|seqs#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.Flatten$A@@0) TyType) (= (type $ly@@201) LayerTypeType)) (= (type |seqs#0@@6|) (SeqType BoxType))) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $ly@@201 |seqs#0@@6|) (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 $LZ |seqs#0@@6|))) :qid |unknown.0:0| :skolemid |2990| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@0 (AsFuelBottom $ly@@201) |seqs#0@@6|)) )))
(assert  (and (= (type StartFuel_Sequences._default.FlattenLength) LayerTypeType) (= (type StartFuel_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@1 T@U) ($ly@@202 T@U) (|seqs#0@@7| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@1) TyType) (= (type $ly@@202) LayerTypeType)) (= (type |seqs#0@@7|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@1 |seqs#0@@7|) ($Is |seqs#0@@7| (TSeq (TSeq Sequences._default.Flatten$A@@1))))) (and (and (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@202 |seqs#0@@7|)) (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.FlattenShape Sequences._default.Flatten$A@@1 StartFuel_Sequences._default.FlattenShape |seqs#0@@7|))) (=> (= (|Seq#Length| |seqs#0@@7|) (LitInt 0)) (= (|Seq#Length| (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@202 |seqs#0@@7|)) (LitInt 0)))) ($Is (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@202 |seqs#0@@7|) (TSeq Sequences._default.Flatten$A@@1)))) :qid |unknown.0:0| :skolemid |2991| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@1 $ly@@202 |seqs#0@@7|)) ))))
(assert (forall ((Sequences._default.Flatten$A@@2 T@U) ($ly@@203 T@U) (|seqs#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@2) TyType) (= (type $ly@@203) LayerTypeType)) (= (type |seqs#0@@8|) (SeqType BoxType))) ($Is |seqs#0@@8| (TSeq (TSeq Sequences._default.Flatten$A@@2)))) (= (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@203 |seqs#0@@8|) true)) :qid |unknown.0:0| :skolemid |2992| :pattern ( (|Sequences.__default.Flatten#requires| Sequences._default.Flatten$A@@2 $ly@@203 |seqs#0@@8|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenShape0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenShape) LayerTypeType)))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@3 T@U) ($ly@@204 T@U) (|seqs#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@3) TyType) (= (type $ly@@204) LayerTypeType)) (= (type |seqs#0@@9|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 |seqs#0@@9|) ($Is |seqs#0@@9| (TSeq (TSeq Sequences._default.Flatten$A@@3))))) (and (=> (not (= (|Seq#Length| |seqs#0@@9|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@3 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape0)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape0) MoreFuel_Sequences._default.FlattenShape0)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@204) |seqs#0@@9|) (ite (= (|Seq#Length| |seqs#0@@9|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 $ly@@204 (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@3) |seqs#0@@9|)))))))) :qid |unknown.0:0| :skolemid |2993| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@3 ($LS $ly@@204) |seqs#0@@9|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenShape1) LayerTypeType))
(assert  (=> true (forall ((Sequences._default.Flatten$A@@4 T@U) ($ly@@205 T@U) (|seqs#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.Flatten$A@@4) TyType) (= (type $ly@@205) LayerTypeType)) (= (type |seqs#0@@10|) (SeqType BoxType))) (or (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit |seqs#0@@10|)) ($Is |seqs#0@@10| (TSeq (TSeq Sequences._default.Flatten$A@@4))))) (and (=> (not (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)) (|Sequences.__default.Flatten#canCall| Sequences._default.Flatten$A@@4 (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))) (|Sequences.__default.Last#canCall| (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) (and (and (and (= StartFuel_Sequences._default.FlattenShape ($LS MoreFuel_Sequences._default.FlattenShape1)) (= StartFuelAssert_Sequences._default.FlattenShape ($LS ($LS MoreFuel_Sequences._default.FlattenShape1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenShape1) MoreFuel_Sequences._default.FlattenShape1)) (= (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@205) (Lit |seqs#0@@10|)) (ite (= (|Seq#Length| (Lit |seqs#0@@10|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@205) (Lit (Sequences.__default.DropLast (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|)))) ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Sequences._default.Flatten$A@@4) (Lit |seqs#0@@10|))))))))) :qid |unknown.0:0| :weight 3 :skolemid |2994| :pattern ( (Sequences.__default.Flatten Sequences._default.Flatten$A@@4 ($LS $ly@@205) (Lit |seqs#0@@10|))) ))))
(assert  (=> true (forall ((|shape#0@@5| T@U) (|i#0@@70| Int) (|j#0@@3| Int) ) (!  (=> (and (= (type |shape#0@@5|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@5| |i#0@@70| |j#0@@3|) (and (and (and ($Is |shape#0@@5| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@70|)) (<= (LitInt 0) |j#0@@3|)) (and (< |i#0@@70| (|Seq#Length| |shape#0@@5|)) (< |j#0@@3| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@5| |i#0@@70|)))))))) (<= (LitInt 0) (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@70| |j#0@@3|))) :qid |Sequencesidfy.489:25| :skolemid |2995| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@5| |i#0@@70| |j#0@@3|)) ))))
(assert (forall ((|shape#0@@6| T@U) (|i#0@@71| Int) (|j#0@@4| Int) ) (!  (=> (= (type |shape#0@@6|) (SeqType BoxType)) (=> (and (and ($Is |shape#0@@6| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@71|)) (<= (LitInt 0) |j#0@@4|)) (= (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@71| |j#0@@4|)  (and (< |i#0@@71| (|Seq#Length| |shape#0@@6|)) (< |j#0@@4| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@6| |i#0@@71|)))))))) :qid |Sequencesidfy.489:25| :skolemid |2996| :pattern ( (|Sequences.__default.FlattenIndex#requires| |shape#0@@6| |i#0@@71| |j#0@@4|)) )))
(assert  (=> true (forall ((|shape#0@@7| T@U) (|i#0@@72| Int) (|j#0@@5| Int) ) (!  (=> (and (= (type |shape#0@@7|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| |shape#0@@7| |i#0@@72| |j#0@@5|) (and (and (and ($Is |shape#0@@7| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@72|)) (<= (LitInt 0) |j#0@@5|)) (and (< |i#0@@72| (|Seq#Length| |shape#0@@7|)) (< |j#0@@5| (U_2_int ($Unbox intType (|Seq#Index| |shape#0@@7| |i#0@@72|)))))))) (and (|Sequences.__default.FlattenLength#canCall| (|Seq#Take| |shape#0@@7| |i#0@@72|)) (= (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@72| |j#0@@5|) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (|Seq#Take| |shape#0@@7| |i#0@@72|)) |j#0@@5|)))) :qid |Sequencesidfy.489:25| :skolemid |2997| :pattern ( (Sequences.__default.FlattenIndex |shape#0@@7| |i#0@@72| |j#0@@5|)) ))))
(assert  (=> true (forall ((|shape#0@@8| T@U) (|i#0@@73| Int) (|j#0@@6| Int) ) (!  (=> (and (= (type |shape#0@@8|) (SeqType BoxType)) (or (|Sequences.__default.FlattenIndex#canCall| (Lit |shape#0@@8|) (LitInt |i#0@@73|) (LitInt |j#0@@6|)) (and (and (and ($Is |shape#0@@8| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@73|)) (<= (LitInt 0) |j#0@@6|)) (and (< |i#0@@73| (|Seq#Length| (Lit |shape#0@@8|))) (< |j#0@@6| (U_2_int ($Unbox intType (|Seq#Index| (Lit |shape#0@@8|) (LitInt |i#0@@73|))))))))) (and (|Sequences.__default.FlattenLength#canCall| (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@73|)))) (= (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@73|) (LitInt |j#0@@6|)) (+ (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (|Seq#Take| (Lit |shape#0@@8|) (LitInt |i#0@@73|)))) |j#0@@6|)))) :qid |Sequencesidfy.489:25| :weight 3 :skolemid |2998| :pattern ( (Sequences.__default.FlattenIndex (Lit |shape#0@@8|) (LitInt |i#0@@73|) (LitInt |j#0@@6|))) ))))
(assert (forall ((arg0@@549 T@U) (arg1@@253 T@U) (arg2@@172 Int) ) (! (= (type (Sequences.__default.UnflattenIndex arg0@@549 arg1@@253 arg2@@172)) DatatypeTypeType) :qid |funType:Sequences.__default.UnflattenIndex| :pattern ( (Sequences.__default.UnflattenIndex arg0@@549 arg1@@253 arg2@@172)) )))
(assert (forall (($ly@@206 T@U) (|shape#0@@9| T@U) (|i#0@@74| Int) ) (!  (=> (and (= (type $ly@@206) LayerTypeType) (= (type |shape#0@@9|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex ($LS $ly@@206) |shape#0@@9| |i#0@@74|) (Sequences.__default.UnflattenIndex $ly@@206 |shape#0@@9| |i#0@@74|))) :qid |Sequencesidfy.496:12| :skolemid |2999| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@206) |shape#0@@9| |i#0@@74|)) )))
(assert (forall (($ly@@207 T@U) (|shape#0@@10| T@U) (|i#0@@75| Int) ) (!  (=> (and (= (type $ly@@207) LayerTypeType) (= (type |shape#0@@10|) (SeqType BoxType))) (= (Sequences.__default.UnflattenIndex $ly@@207 |shape#0@@10| |i#0@@75|) (Sequences.__default.UnflattenIndex $LZ |shape#0@@10| |i#0@@75|))) :qid |Sequencesidfy.496:12| :skolemid |3000| :pattern ( (Sequences.__default.UnflattenIndex (AsFuelBottom $ly@@207) |shape#0@@10| |i#0@@75|)) )))
(assert  (=> true (forall (($ly@@208 T@U) (|shape#0@@11| T@U) (|i#0@@76| Int) ) (!  (=> (and (and (= (type $ly@@208) LayerTypeType) (= (type |shape#0@@11|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@11| |i#0@@76|) (and (and ($Is |shape#0@@11| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@76|)) (< |i#0@@76| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@11|))))) ($Is (Sequences.__default.UnflattenIndex $ly@@208 |shape#0@@11| |i#0@@76|) (Tclass._System.Tuple2 Tclass._System.nat Tclass._System.nat))) :qid |Sequencesidfy.496:12| :skolemid |3001| :pattern ( (Sequences.__default.UnflattenIndex $ly@@208 |shape#0@@11| |i#0@@76|)) ))))
(assert (forall (($ly@@209 T@U) (|shape#0@@12| T@U) (|i#0@@77| Int) ) (!  (=> (and (and (= (type $ly@@209) LayerTypeType) (= (type |shape#0@@12|) (SeqType BoxType))) (and ($Is |shape#0@@12| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@77|))) (= (|Sequences.__default.UnflattenIndex#requires| $ly@@209 |shape#0@@12| |i#0@@77|) (< |i#0@@77| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@12|)))) :qid |Sequencesidfy.496:12| :skolemid |3002| :pattern ( (|Sequences.__default.UnflattenIndex#requires| $ly@@209 |shape#0@@12| |i#0@@77|)) )))
(assert  (and (= (type MoreFuel_Sequences._default.FlattenLength0) LayerTypeType) (= (type StartFuelAssert_Sequences._default.FlattenLength) LayerTypeType)))
(assert  (=> true (forall (($ly@@210 T@U) (|shape#0@@13| T@U) (|i#0@@78| Int) ) (!  (=> (and (and (= (type $ly@@210) LayerTypeType) (= (type |shape#0@@13|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| |shape#0@@13| |i#0@@78|) (and (and ($Is |shape#0@@13| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@78|)) (< |i#0@@78| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength |shape#0@@13|))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (=> (< |i#0@@78| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.UnflattenIndex#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@78|)))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|)) |i#0@@78|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat |shape#0@@13|) (|Sequences.__default.FlattenLength#canCall| (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength0)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength0)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength0) MoreFuel_Sequences._default.FlattenLength0)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@210) |shape#0@@13| |i#0@@78|) (ite (< |i#0@@78| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))) (Sequences.__default.UnflattenIndex $ly@@210 (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|) |i#0@@78|) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| |shape#0@@13|) 1))) ($Box (int_2_U (- |i#0@@78| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Sequences.__default.DropLast Tclass._System.nat |shape#0@@13|))))))))))) :qid |Sequencesidfy.496:12| :skolemid |3003| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@210) |shape#0@@13| |i#0@@78|)) ))))
(assert (= (type MoreFuel_Sequences._default.FlattenLength1) LayerTypeType))
(assert  (=> true (forall (($ly@@211 T@U) (|shape#0@@14| T@U) (|i#0@@79| Int) ) (!  (=> (and (and (= (type $ly@@211) LayerTypeType) (= (type |shape#0@@14|) (SeqType BoxType))) (or (|Sequences.__default.UnflattenIndex#canCall| (Lit |shape#0@@14|) (LitInt |i#0@@79|)) (and (and ($Is |shape#0@@14| (TSeq Tclass._System.nat)) (<= (LitInt 0) |i#0@@79|)) (< |i#0@@79| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit |shape#0@@14|)))))) (and (and (and (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (=> (< |i#0@@79| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.UnflattenIndex#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@79|))))) (=> (<= (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|)))) |i#0@@79|) (and (|Sequences.__default.DropLast#canCall| Tclass._System.nat (Lit |shape#0@@14|)) (|Sequences.__default.FlattenLength#canCall| (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))) (and (and (and (= StartFuel_Sequences._default.FlattenLength ($LS MoreFuel_Sequences._default.FlattenLength1)) (= StartFuelAssert_Sequences._default.FlattenLength ($LS ($LS MoreFuel_Sequences._default.FlattenLength1)))) (= (AsFuelBottom MoreFuel_Sequences._default.FlattenLength1) MoreFuel_Sequences._default.FlattenLength1)) (= (Sequences.__default.UnflattenIndex ($LS $ly@@211) (Lit |shape#0@@14|) (LitInt |i#0@@79|)) (ite (< |i#0@@79| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))) (Sequences.__default.UnflattenIndex ($LS $ly@@211) (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))) (LitInt |i#0@@79|)) (|#_System._tuple#2._#Make2| ($Box (int_2_U (- (|Seq#Length| (Lit |shape#0@@14|)) 1))) ($Box (int_2_U (- |i#0@@79| (Sequences.__default.FlattenLength StartFuel_Sequences._default.FlattenLength (Lit (Sequences.__default.DropLast Tclass._System.nat (Lit |shape#0@@14|))))))))))))) :qid |Sequencesidfy.496:12| :weight 3 :skolemid |3004| :pattern ( (Sequences.__default.UnflattenIndex ($LS $ly@@211) (Lit |shape#0@@14|) (LitInt |i#0@@79|))) ))))
(assert (forall (($ly@@212 T@U) (|s#0@@45| T@U) ) (!  (=> (and (= (type $ly@@212) LayerTypeType) (= (type |s#0@@45|) (SeqType BoxType))) (= (Sequences.__default.seqMax ($LS $ly@@212) |s#0@@45|) (Sequences.__default.seqMax $ly@@212 |s#0@@45|))) :qid |Sequencesidfy.606:22| :skolemid |3005| :pattern ( (Sequences.__default.seqMax ($LS $ly@@212) |s#0@@45|)) )))
(assert (forall (($ly@@213 T@U) (|s#0@@46| T@U) ) (!  (=> (and (= (type $ly@@213) LayerTypeType) (= (type |s#0@@46|) (SeqType BoxType))) (= (Sequences.__default.seqMax $ly@@213 |s#0@@46|) (Sequences.__default.seqMax $LZ |s#0@@46|))) :qid |Sequencesidfy.606:22| :skolemid |3006| :pattern ( (Sequences.__default.seqMax (AsFuelBottom $ly@@213) |s#0@@46|)) )))
(assert  (=> true (forall (($ly@@214 T@U) (|s#0@@47| T@U) ) (!  (=> (and (and (= (type $ly@@214) LayerTypeType) (= (type |s#0@@47|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| |s#0@@47|) (and ($Is |s#0@@47| (TSeq TInt)) (< 0 (|Seq#Length| |s#0@@47|))))) (and (forall ((|k#0@@0| T@U) ) (!  (=> (and (and (= (type |k#0@@0|) intType) true) (|Seq#Contains| |s#0@@47| ($Box |k#0@@0|))) (>= (Sequences.__default.seqMax $ly@@214 |s#0@@47|) (U_2_int |k#0@@0|))) :qid |Sequencesidfy.608:20| :skolemid |3007| :pattern ( (|Seq#Contains| |s#0@@47| ($Box |k#0@@0|))) )) (|Seq#Contains| |s#0@@47| ($Box (int_2_U (Sequences.__default.seqMax $ly@@214 |s#0@@47|)))))) :qid |Sequencesidfy.606:22| :skolemid |3008| :pattern ( (Sequences.__default.seqMax $ly@@214 |s#0@@47|)) ))))
(assert (forall (($ly@@215 T@U) (|s#0@@48| T@U) ) (!  (=> (and (and (= (type $ly@@215) LayerTypeType) (= (type |s#0@@48|) (SeqType BoxType))) ($Is |s#0@@48| (TSeq TInt))) (= (|Sequences.__default.seqMax#requires| $ly@@215 |s#0@@48|) (< 0 (|Seq#Length| |s#0@@48|)))) :qid |Sequencesidfy.606:22| :skolemid |3009| :pattern ( (|Sequences.__default.seqMax#requires| $ly@@215 |s#0@@48|)) )))
(assert  (=> true (forall (($ly@@216 T@U) (|s#0@@49| T@U) ) (!  (=> (and (and (= (type $ly@@216) LayerTypeType) (= (type |s#0@@49|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| |s#0@@49|) (and ($Is |s#0@@49| (TSeq TInt)) (< 0 (|Seq#Length| |s#0@@49|))))) (and (=> (not (= (|Seq#Length| |s#0@@49|) (LitInt 1))) (and (and (and (|Sequences.__default.DropLast#canCall| TInt |s#0@@49|) (|Sequences.__default.seqMax#canCall| (Sequences.__default.DropLast TInt |s#0@@49|))) (|Sequences.__default.Last#canCall| TInt |s#0@@49|)) (|Mathematics.__default.max#canCall| (Sequences.__default.seqMax $ly@@216 (Sequences.__default.DropLast TInt |s#0@@49|)) (U_2_int ($Unbox intType (Sequences.__default.Last TInt |s#0@@49|)))))) (= (Sequences.__default.seqMax ($LS $ly@@216) |s#0@@49|) (ite (= (|Seq#Length| |s#0@@49|) (LitInt 1)) (U_2_int ($Unbox intType (|Seq#Index| |s#0@@49| (LitInt 0)))) (Mathematics.__default.max (Sequences.__default.seqMax $ly@@216 (Sequences.__default.DropLast TInt |s#0@@49|)) (U_2_int ($Unbox intType (Sequences.__default.Last TInt |s#0@@49|)))))))) :qid |Sequencesidfy.606:22| :skolemid |3010| :pattern ( (Sequences.__default.seqMax ($LS $ly@@216) |s#0@@49|)) ))))
(assert  (=> true (forall (($ly@@217 T@U) (|s#0@@50| T@U) ) (!  (=> (and (and (= (type $ly@@217) LayerTypeType) (= (type |s#0@@50|) (SeqType BoxType))) (or (|Sequences.__default.seqMax#canCall| (Lit |s#0@@50|)) (and ($Is |s#0@@50| (TSeq TInt)) (< 0 (|Seq#Length| (Lit |s#0@@50|)))))) (and (=> (not (= (|Seq#Length| (Lit |s#0@@50|)) (LitInt 1))) (and (and (and (|Sequences.__default.DropLast#canCall| TInt (Lit |s#0@@50|)) (|Sequences.__default.seqMax#canCall| (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@50|))))) (|Sequences.__default.Last#canCall| TInt (Lit |s#0@@50|))) (|Mathematics.__default.max#canCall| (Sequences.__default.seqMax ($LS $ly@@217) (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@50|)))) (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |s#0@@50|)))))))) (= (Sequences.__default.seqMax ($LS $ly@@217) (Lit |s#0@@50|)) (ite (= (|Seq#Length| (Lit |s#0@@50|)) (LitInt 1)) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@50|) (LitInt 0)))) (Mathematics.__default.max (Sequences.__default.seqMax ($LS $ly@@217) (Lit (Sequences.__default.DropLast TInt (Lit |s#0@@50|)))) (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last TInt (Lit |s#0@@50|)))))))))) :qid |Sequencesidfy.606:22| :weight 3 :skolemid |3011| :pattern ( (Sequences.__default.seqMax ($LS $ly@@217) (Lit |s#0@@50|))) ))))
(assert (forall ((arg0@@550 T@U) (arg1@@254 T@U) (arg2@@173 Int) (arg3@@127 T@U) ) (! (= (type (Sequences.__default.fill arg0@@550 arg1@@254 arg2@@173 arg3@@127)) (SeqType BoxType)) :qid |funType:Sequences.__default.fill| :pattern ( (Sequences.__default.fill arg0@@550 arg1@@254 arg2@@173 arg3@@127)) )))
(assert (forall ((Sequences._default.fill$T T@U) ($ly@@218 T@U) (|n#0@@5| Int) (|t#0@@6| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T) TyType) (= (type $ly@@218) LayerTypeType)) (= (type |t#0@@6|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@218) |n#0@@5| |t#0@@6|) (Sequences.__default.fill Sequences._default.fill$T $ly@@218 |n#0@@5| |t#0@@6|))) :qid |unknown.0:0| :skolemid |3012| :pattern ( (Sequences.__default.fill Sequences._default.fill$T ($LS $ly@@218) |n#0@@5| |t#0@@6|)) )))
(assert (forall ((Sequences._default.fill$T@@0 T@U) ($ly@@219 T@U) (|n#0@@6| Int) (|t#0@@7| T@U) ) (!  (=> (and (and (= (type Sequences._default.fill$T@@0) TyType) (= (type $ly@@219) LayerTypeType)) (= (type |t#0@@7|) BoxType)) (= (Sequences.__default.fill Sequences._default.fill$T@@0 $ly@@219 |n#0@@6| |t#0@@7|) (Sequences.__default.fill Sequences._default.fill$T@@0 $LZ |n#0@@6| |t#0@@7|))) :qid |unknown.0:0| :skolemid |3013| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@0 (AsFuelBottom $ly@@219) |n#0@@6| |t#0@@7|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@1 T@U) ($ly@@220 T@U) (|n#0@@7| Int) (|t#0@@8| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@1) TyType) (= (type $ly@@220) LayerTypeType)) (= (type |t#0@@8|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@1 |n#0@@7| |t#0@@8|) (and ($IsBox |t#0@@8| Sequences._default.fill$T@@1) (>= |n#0@@7| (LitInt 0))))) (and (and (= (|Seq#Length| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@220 |n#0@@7| |t#0@@8|)) |n#0@@7|) (forall ((|i#0@@80| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@80|) (< |i#0@@80| |n#0@@7|)) (= (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@220 |n#0@@7| |t#0@@8|) |i#0@@80|) |t#0@@8|)) :qid |Sequencesidfy.695:18| :skolemid |3014| :pattern ( (|Seq#Index| (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@220 |n#0@@7| |t#0@@8|) |i#0@@80|)) ))) ($Is (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@220 |n#0@@7| |t#0@@8|) (TSeq Sequences._default.fill$T@@1)))) :qid |unknown.0:0| :skolemid |3015| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@1 $ly@@220 |n#0@@7| |t#0@@8|)) ))))
(assert (forall ((Sequences._default.fill$T@@2 T@U) ($ly@@221 T@U) (|n#0@@8| Int) (|t#0@@9| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@2) TyType) (= (type $ly@@221) LayerTypeType)) (= (type |t#0@@9|) BoxType)) ($IsBox |t#0@@9| Sequences._default.fill$T@@2)) (= (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@221 |n#0@@8| |t#0@@9|) (>= |n#0@@8| (LitInt 0)))) :qid |unknown.0:0| :skolemid |3016| :pattern ( (|Sequences.__default.fill#requires| Sequences._default.fill$T@@2 $ly@@221 |n#0@@8| |t#0@@9|)) )))
(assert  (=> true (forall ((Sequences._default.fill$T@@3 T@U) ($ly@@222 T@U) (|n#0@@9| Int) (|t#0@@10| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@3) TyType) (= (type $ly@@222) LayerTypeType)) (= (type |t#0@@10|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 |n#0@@9| |t#0@@10|) (and ($IsBox |t#0@@10| Sequences._default.fill$T@@3) (>= |n#0@@9| (LitInt 0))))) (and (=> (not (= |n#0@@9| (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@3 (- |n#0@@9| 1) |t#0@@10|)) (= (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@222) |n#0@@9| |t#0@@10|) (ite (= |n#0@@9| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@3 $ly@@222 (- |n#0@@9| 1) |t#0@@10|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@10|)))))) :qid |unknown.0:0| :skolemid |3017| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@3 ($LS $ly@@222) |n#0@@9| |t#0@@10|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@4 T@U) ($ly@@223 T@U) (|n#0@@10| Int) (|t#0@@11| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@4) TyType) (= (type $ly@@223) LayerTypeType)) (= (type |t#0@@11|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt |n#0@@10|) |t#0@@11|) (and ($IsBox |t#0@@11| Sequences._default.fill$T@@4) (>= (LitInt |n#0@@10|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@10|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@4 (LitInt (- |n#0@@10| 1)) |t#0@@11|)) (= (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@223) (LitInt |n#0@@10|) |t#0@@11|) (ite (= (LitInt |n#0@@10|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@223) (LitInt (- |n#0@@10| 1)) |t#0@@11|) (|Seq#Build| (|Seq#Empty| BoxType) |t#0@@11|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3018| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@4 ($LS $ly@@223) (LitInt |n#0@@10|) |t#0@@11|)) ))))
(assert  (=> true (forall ((Sequences._default.fill$T@@5 T@U) ($ly@@224 T@U) (|n#0@@11| Int) (|t#0@@12| T@U) ) (!  (=> (and (and (and (= (type Sequences._default.fill$T@@5) TyType) (= (type $ly@@224) LayerTypeType)) (= (type |t#0@@12|) BoxType)) (or (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt |n#0@@11|) (Lit |t#0@@12|)) (and ($IsBox |t#0@@12| Sequences._default.fill$T@@5) (>= (LitInt |n#0@@11|) (LitInt 0))))) (and (=> (not (= (LitInt |n#0@@11|) (LitInt 0))) (|Sequences.__default.fill#canCall| Sequences._default.fill$T@@5 (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|))) (= (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@224) (LitInt |n#0@@11|) (Lit |t#0@@12|)) (ite (= (LitInt |n#0@@11|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@224) (LitInt (- |n#0@@11| 1)) (Lit |t#0@@12|)) (|Seq#Build| (|Seq#Empty| BoxType) (Lit |t#0@@12|))))))) :qid |unknown.0:0| :weight 3 :skolemid |3019| :pattern ( (Sequences.__default.fill Sequences._default.fill$T@@5 ($LS $ly@@224) (LitInt |n#0@@11|) (Lit |t#0@@12|))) ))))
(assert (forall ((|s#0@@51| T@U) ) (!  (=> (= (type |s#0@@51|) (SeqType BoxType)) (= ($Is |s#0@@51| Tclass.KeyType.Key)  (and ($Is |s#0@@51| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0@@51|) (LitInt 1024))))) :qid |unknown.0:0| :skolemid |3020| :pattern ( ($Is |s#0@@51| Tclass.KeyType.Key)) )))
(assert (forall ((|s#0@@52| T@U) ($h@@91 T@U) ) (!  (=> (and (= (type |s#0@@52|) (SeqType BoxType)) (= (type $h@@91) (MapType0Type refType MapType1Type))) (= ($IsAlloc |s#0@@52| Tclass.KeyType.Key $h@@91) ($IsAlloc |s#0@@52| (TSeq Tclass.NativeTypes.byte) $h@@91))) :qid |unknown.0:0| :skolemid |3021| :pattern ( ($IsAlloc |s#0@@52| Tclass.KeyType.Key $h@@91)) )))
(assert (= (type Tclass.KeyType.__default) TyType))
(assert (= (Tag Tclass.KeyType.__default) Tagclass.KeyType.__default))
(assert (= (TagFamily Tclass.KeyType.__default) tytagFamily$_default))
(assert (forall ((bx@@166 T@U) ) (!  (=> (and (= (type bx@@166) BoxType) ($IsBox bx@@166 Tclass.KeyType.__default)) (and (= ($Box ($Unbox refType bx@@166)) bx@@166) ($Is ($Unbox refType bx@@166) Tclass.KeyType.__default))) :qid |unknown.0:0| :skolemid |3022| :pattern ( ($IsBox bx@@166 Tclass.KeyType.__default)) )))
(assert (forall (($o@@26 T@U) ) (!  (=> (= (type $o@@26) refType) (= ($Is $o@@26 Tclass.KeyType.__default)  (or (= $o@@26 null) (= (dtype $o@@26) Tclass.KeyType.__default)))) :qid |unknown.0:0| :skolemid |3023| :pattern ( ($Is $o@@26 Tclass.KeyType.__default)) )))
(assert (forall (($o@@27 T@U) ($h@@92 T@U) ) (!  (=> (and (= (type $o@@27) refType) (= (type $h@@92) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@27 Tclass.KeyType.__default $h@@92)  (or (= $o@@27 null) (U_2_bool (MapType1Select (MapType0Select $h@@92 $o@@27) alloc))))) :qid |unknown.0:0| :skolemid |3024| :pattern ( ($IsAlloc $o@@27 Tclass.KeyType.__default $h@@92)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) KeyType.__default.MaxLen) (< KeyType.__default.MaxLen 18446744073709551616)))))
(assert (= |KeyType.__default.MaxLen#requires| true))
(assert  (=> true (=> true (= KeyType.__default.MaxLen (LitInt 1024)))))
(assert  (=> true (=> true (= KeyType.__default.MaxLen (LitInt 1024)))))
(assert (= (type Tclass.Sets.__default) TyType))
(assert (= (Tag Tclass.Sets.__default) Tagclass.Sets.__default))
(assert (= (TagFamily Tclass.Sets.__default) tytagFamily$_default))
(assert (forall ((bx@@167 T@U) ) (!  (=> (and (= (type bx@@167) BoxType) ($IsBox bx@@167 Tclass.Sets.__default)) (and (= ($Box ($Unbox refType bx@@167)) bx@@167) ($Is ($Unbox refType bx@@167) Tclass.Sets.__default))) :qid |unknown.0:0| :skolemid |3025| :pattern ( ($IsBox bx@@167 Tclass.Sets.__default)) )))
(assert (forall (($o@@28 T@U) ) (!  (=> (= (type $o@@28) refType) (= ($Is $o@@28 Tclass.Sets.__default)  (or (= $o@@28 null) (= (dtype $o@@28) Tclass.Sets.__default)))) :qid |unknown.0:0| :skolemid |3026| :pattern ( ($Is $o@@28 Tclass.Sets.__default)) )))
(assert (forall (($o@@29 T@U) ($h@@93 T@U) ) (!  (=> (and (= (type $o@@29) refType) (= (type $h@@93) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@29 Tclass.Sets.__default $h@@93)  (or (= $o@@29 null) (U_2_bool (MapType1Select (MapType0Select $h@@93 $o@@29) alloc))))) :qid |unknown.0:0| :skolemid |3027| :pattern ( ($IsAlloc $o@@29 Tclass.Sets.__default $h@@93)) )))
(assert (forall ((arg0@@551 Int) ) (! (= (type (Sets.__default.SetRange arg0@@551)) (MapType0Type BoxType boolType)) :qid |funType:Sets.__default.SetRange| :pattern ( (Sets.__default.SetRange arg0@@551)) )))
(assert  (=> true (forall ((|n#0@@12| Int) ) (!  (=> true ($Is (Sets.__default.SetRange |n#0@@12|) (TSet TInt))) :qid |Setsidfy.35:21| :skolemid |3028| :pattern ( (Sets.__default.SetRange |n#0@@12|)) ))))
(assert (forall ((|n#0@@13| Int) ) (! (= (|Sets.__default.SetRange#requires| |n#0@@13|) true) :qid |Setsidfy.35:21| :skolemid |3029| :pattern ( (|Sets.__default.SetRange#requires| |n#0@@13|)) )))
(assert (forall ((arg0@@552 T@U) (arg1@@255 Int) (arg2@@174 Int) ) (! (= (type (|lambda#98| arg0@@552 arg1@@255 arg2@@174)) (MapType0Type BoxType boolType)) :qid |funType:lambda#98| :pattern ( (|lambda#98| arg0@@552 arg1@@255 arg2@@174)) )))
(assert  (=> true (forall ((|n#0@@14| Int) ) (!  (=> true (= (Sets.__default.SetRange |n#0@@14|) (|lambda#98| TInt (LitInt 0) |n#0@@14|))) :qid |Setsidfy.35:21| :skolemid |3030| :pattern ( (Sets.__default.SetRange |n#0@@14|)) ))))
(assert  (=> true (forall ((|n#0@@15| Int) ) (!  (=> true (= (Sets.__default.SetRange (LitInt |n#0@@15|)) (|lambda#98| TInt (LitInt 0) |n#0@@15|))) :qid |Setsidfy.35:21| :weight 3 :skolemid |3031| :pattern ( (Sets.__default.SetRange (LitInt |n#0@@15|))) ))))
(assert (= (type Tclass.MapRemove_s.__default) TyType))
(assert (= (Tag Tclass.MapRemove_s.__default) Tagclass.MapRemove_s.__default))
(assert (= (TagFamily Tclass.MapRemove_s.__default) tytagFamily$_default))
(assert (forall ((bx@@168 T@U) ) (!  (=> (and (= (type bx@@168) BoxType) ($IsBox bx@@168 Tclass.MapRemove_s.__default)) (and (= ($Box ($Unbox refType bx@@168)) bx@@168) ($Is ($Unbox refType bx@@168) Tclass.MapRemove_s.__default))) :qid |unknown.0:0| :skolemid |3032| :pattern ( ($IsBox bx@@168 Tclass.MapRemove_s.__default)) )))
(assert (forall (($o@@30 T@U) ) (!  (=> (= (type $o@@30) refType) (= ($Is $o@@30 Tclass.MapRemove_s.__default)  (or (= $o@@30 null) (= (dtype $o@@30) Tclass.MapRemove_s.__default)))) :qid |unknown.0:0| :skolemid |3033| :pattern ( ($Is $o@@30 Tclass.MapRemove_s.__default)) )))
(assert (forall (($o@@31 T@U) ($h@@94 T@U) ) (!  (=> (and (= (type $o@@31) refType) (= (type $h@@94) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@31 Tclass.MapRemove_s.__default $h@@94)  (or (= $o@@31 null) (U_2_bool (MapType1Select (MapType0Select $h@@94 $o@@31) alloc))))) :qid |unknown.0:0| :skolemid |3034| :pattern ( ($IsAlloc $o@@31 Tclass.MapRemove_s.__default $h@@94)) )))
(assert (forall ((arg0@@553 T@U) (arg1@@256 T@U) (arg2@@175 T@U) (arg3@@128 T@U) (arg4@@100 T@U) ) (! (= (type (MapRemove_s.__default.MapRemove1 arg0@@553 arg1@@256 arg2@@175 arg3@@128 arg4@@100)) (MapType BoxType BoxType)) :qid |funType:MapRemove_s.__default.MapRemove1| :pattern ( (MapRemove_s.__default.MapRemove1 arg0@@553 arg1@@256 arg2@@175 arg3@@128 arg4@@100)) )))
(assert (forall ((MapRemove_s._default.MapRemove1$K T@U) (MapRemove_s._default.MapRemove1$V T@U) ($ly@@225 T@U) (|m#0| T@U) (|k#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K) TyType) (= (type MapRemove_s._default.MapRemove1$V) TyType)) (= (type $ly@@225) LayerTypeType)) (= (type |m#0|) (MapType BoxType BoxType))) (= (type |k#0@@1|) BoxType)) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K MapRemove_s._default.MapRemove1$V ($LS $ly@@225) |m#0| |k#0@@1|) (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K MapRemove_s._default.MapRemove1$V $ly@@225 |m#0| |k#0@@1|))) :qid |unknown.0:0| :skolemid |3035| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K MapRemove_s._default.MapRemove1$V ($LS $ly@@225) |m#0| |k#0@@1|)) )))
(assert (forall ((MapRemove_s._default.MapRemove1$K@@0 T@U) (MapRemove_s._default.MapRemove1$V@@0 T@U) ($ly@@226 T@U) (|m#0@@0| T@U) (|k#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@0) TyType) (= (type MapRemove_s._default.MapRemove1$V@@0) TyType)) (= (type $ly@@226) LayerTypeType)) (= (type |m#0@@0|) (MapType BoxType BoxType))) (= (type |k#0@@2|) BoxType)) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@0 MapRemove_s._default.MapRemove1$V@@0 $ly@@226 |m#0@@0| |k#0@@2|) (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@0 MapRemove_s._default.MapRemove1$V@@0 $LZ |m#0@@0| |k#0@@2|))) :qid |unknown.0:0| :skolemid |3036| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@0 MapRemove_s._default.MapRemove1$V@@0 (AsFuelBottom $ly@@226) |m#0@@0| |k#0@@2|)) )))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@1 T@U) (MapRemove_s._default.MapRemove1$V@@1 T@U) ($ly@@227 T@U) (|m#0@@1| T@U) (|k#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@1) TyType) (= (type MapRemove_s._default.MapRemove1$V@@1) TyType)) (= (type $ly@@227) LayerTypeType)) (= (type |m#0@@1|) (MapType BoxType BoxType))) (= (type |k#0@@3|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 |m#0@@1| |k#0@@3|) (and ($Is |m#0@@1| (TMap MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1)) ($IsBox |k#0@@3| MapRemove_s._default.MapRemove1$K@@1)))) (and (and (and (and (and (and (forall ((|j#0@@7| T@U) ) (!  (=> (and (and (= (type |j#0@@7|) BoxType) ($IsBox |j#0@@7| MapRemove_s._default.MapRemove1$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@1|) |j#0@@7|)) (not (= |j#0@@7| |k#0@@3|)))) (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@227 |m#0@@1| |k#0@@3|)) |j#0@@7|))) :qid |MapRemovesdfy.15:20| :skolemid |3037| :pattern ( (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@227 |m#0@@1| |k#0@@3|)) |j#0@@7|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@1|) |j#0@@7|)) )) (forall ((|j#1@@2| T@U) ) (!  (=> (and (= (type |j#1@@2|) BoxType) ($IsBox |j#1@@2| MapRemove_s._default.MapRemove1$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@227 |m#0@@1| |k#0@@3|)) |j#1@@2|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@1|) |j#1@@2|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@227 |m#0@@1| |k#0@@3|)) |j#1@@2|)) (not (= |j#1@@2| |k#0@@3|))))) :qid |MapRemovesdfy.16:20| :skolemid |3038| :pattern ( (MapType0Select (|Map#Domain| |m#0@@1|) |j#1@@2|)) :pattern ( (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@227 |m#0@@1| |k#0@@3|)) |j#1@@2|)) ))) (forall ((|j#2| T@U) ) (!  (=> (and (and (= (type |j#2|) BoxType) ($IsBox |j#2| MapRemove_s._default.MapRemove1$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@227 |m#0@@1| |k#0@@3|)) |j#2|))) (= (MapType0Select (|Map#Elements| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@227 |m#0@@1| |k#0@@3|)) |j#2|) (MapType0Select (|Map#Elements| |m#0@@1|) |j#2|))) :qid |MapRemovesdfy.17:20| :skolemid |3039| :pattern ( (MapType0Select (|Map#Elements| |m#0@@1|) |j#2|)) :pattern ( (MapType0Select (|Map#Elements| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@227 |m#0@@1| |k#0@@3|)) |j#2|)) :pattern ( (MapType0Select (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@227 |m#0@@1| |k#0@@3|)) |j#2|)) ))) (<= (|Set#Card| (|Map#Domain| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@227 |m#0@@1| |k#0@@3|))) (|Set#Card| (|Map#Domain| |m#0@@1|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@1|) |k#0@@3|)) (= (|Map#Card| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@227 |m#0@@1| |k#0@@3|)) (- (|Map#Card| |m#0@@1|) 1)))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@1|) |k#0@@3|))) (= (|Map#Card| (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@227 |m#0@@1| |k#0@@3|)) (|Map#Card| |m#0@@1|)))) ($Is (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@227 |m#0@@1| |k#0@@3|) (TMap MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |3040| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@1 MapRemove_s._default.MapRemove1$V@@1 $ly@@227 |m#0@@1| |k#0@@3|)) ))))
(assert (forall ((MapRemove_s._default.MapRemove1$K@@2 T@U) (MapRemove_s._default.MapRemove1$V@@2 T@U) ($ly@@228 T@U) (|m#0@@2| T@U) (|k#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@2) TyType) (= (type MapRemove_s._default.MapRemove1$V@@2) TyType)) (= (type $ly@@228) LayerTypeType)) (= (type |m#0@@2|) (MapType BoxType BoxType))) (= (type |k#0@@4|) BoxType)) (and ($Is |m#0@@2| (TMap MapRemove_s._default.MapRemove1$K@@2 MapRemove_s._default.MapRemove1$V@@2)) ($IsBox |k#0@@4| MapRemove_s._default.MapRemove1$K@@2))) (= (|MapRemove_s.__default.MapRemove1#requires| MapRemove_s._default.MapRemove1$K@@2 MapRemove_s._default.MapRemove1$V@@2 $ly@@228 |m#0@@2| |k#0@@4|) true)) :qid |unknown.0:0| :skolemid |3041| :pattern ( (|MapRemove_s.__default.MapRemove1#requires| MapRemove_s._default.MapRemove1$K@@2 MapRemove_s._default.MapRemove1$V@@2 $ly@@228 |m#0@@2| |k#0@@4|)) )))
(assert (forall ((arg0@@554 T@U) (arg1@@257 T@U) (arg2@@176 T@U) ) (! (= (type (|lambda#100| arg0@@554 arg1@@257 arg2@@176)) (MapType0Type BoxType boolType)) :qid |funType:lambda#100| :pattern ( (|lambda#100| arg0@@554 arg1@@257 arg2@@176)) )))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@3 T@U) (MapRemove_s._default.MapRemove1$V@@3 T@U) ($ly@@229 T@U) (|m#0@@3| T@U) (|k#0@@5| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@3) TyType) (= (type MapRemove_s._default.MapRemove1$V@@3) TyType)) (= (type $ly@@229) LayerTypeType)) (= (type |m#0@@3|) (MapType BoxType BoxType))) (= (type |k#0@@5|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3 |m#0@@3| |k#0@@5|) (and ($Is |m#0@@3| (TMap MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3)) ($IsBox |k#0@@5| MapRemove_s._default.MapRemove1$K@@3)))) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3 ($LS $ly@@229) |m#0@@3| |k#0@@5|) (let ((|m'#0| (|Map#Glue| (|lambda#100| MapRemove_s._default.MapRemove1$K@@3 (|Map#Domain| |m#0@@3|) |k#0@@5|) (|lambda#11| (|Map#Elements| |m#0@@3|)) (TMap MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3)))) |m'#0|))) :qid |unknown.0:0| :skolemid |3042| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@3 MapRemove_s._default.MapRemove1$V@@3 ($LS $ly@@229) |m#0@@3| |k#0@@5|)) ))))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@4 T@U) (MapRemove_s._default.MapRemove1$V@@4 T@U) ($ly@@230 T@U) (|m#0@@4| T@U) (|k#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@4) TyType) (= (type MapRemove_s._default.MapRemove1$V@@4) TyType)) (= (type $ly@@230) LayerTypeType)) (= (type |m#0@@4|) (MapType BoxType BoxType))) (= (type |k#0@@6|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4 (Lit |m#0@@4|) |k#0@@6|) (and ($Is |m#0@@4| (TMap MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4)) ($IsBox |k#0@@6| MapRemove_s._default.MapRemove1$K@@4)))) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4 ($LS $ly@@230) (Lit |m#0@@4|) |k#0@@6|) (let ((|m'#1| (|Map#Glue| (|lambda#100| MapRemove_s._default.MapRemove1$K@@4 (|Map#Domain| |m#0@@4|) |k#0@@6|) (|lambda#11| (|Map#Elements| (Lit |m#0@@4|))) (TMap MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4)))) |m'#1|))) :qid |unknown.0:0| :weight 3 :skolemid |3043| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@4 MapRemove_s._default.MapRemove1$V@@4 ($LS $ly@@230) (Lit |m#0@@4|) |k#0@@6|)) ))))
(assert  (=> true (forall ((MapRemove_s._default.MapRemove1$K@@5 T@U) (MapRemove_s._default.MapRemove1$V@@5 T@U) ($ly@@231 T@U) (|m#0@@5| T@U) (|k#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type MapRemove_s._default.MapRemove1$K@@5) TyType) (= (type MapRemove_s._default.MapRemove1$V@@5) TyType)) (= (type $ly@@231) LayerTypeType)) (= (type |m#0@@5|) (MapType BoxType BoxType))) (= (type |k#0@@7|) BoxType)) (or (|MapRemove_s.__default.MapRemove1#canCall| MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5 (Lit |m#0@@5|) (Lit |k#0@@7|)) (and ($Is |m#0@@5| (TMap MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5)) ($IsBox |k#0@@7| MapRemove_s._default.MapRemove1$K@@5)))) (= (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5 ($LS $ly@@231) (Lit |m#0@@5|) (Lit |k#0@@7|)) (let ((|m'#2| (|Map#Glue| (|lambda#100| MapRemove_s._default.MapRemove1$K@@5 (|Map#Domain| |m#0@@5|) |k#0@@7|) (|lambda#11| (|Map#Elements| (Lit |m#0@@5|))) (TMap MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5)))) |m'#2|))) :qid |unknown.0:0| :weight 3 :skolemid |3044| :pattern ( (MapRemove_s.__default.MapRemove1 MapRemove_s._default.MapRemove1$K@@5 MapRemove_s._default.MapRemove1$V@@5 ($LS $ly@@231) (Lit |m#0@@5|) (Lit |k#0@@7|))) ))))
(assert (= (type Tclass.Maps.__default) TyType))
(assert (= (Tag Tclass.Maps.__default) Tagclass.Maps.__default))
(assert (= (TagFamily Tclass.Maps.__default) tytagFamily$_default))
(assert (forall ((bx@@169 T@U) ) (!  (=> (and (= (type bx@@169) BoxType) ($IsBox bx@@169 Tclass.Maps.__default)) (and (= ($Box ($Unbox refType bx@@169)) bx@@169) ($Is ($Unbox refType bx@@169) Tclass.Maps.__default))) :qid |unknown.0:0| :skolemid |3045| :pattern ( ($IsBox bx@@169 Tclass.Maps.__default)) )))
(assert (forall (($o@@32 T@U) ) (!  (=> (= (type $o@@32) refType) (= ($Is $o@@32 Tclass.Maps.__default)  (or (= $o@@32 null) (= (dtype $o@@32) Tclass.Maps.__default)))) :qid |unknown.0:0| :skolemid |3046| :pattern ( ($Is $o@@32 Tclass.Maps.__default)) )))
(assert (forall (($o@@33 T@U) ($h@@95 T@U) ) (!  (=> (and (= (type $o@@33) refType) (= (type $h@@95) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@33 Tclass.Maps.__default $h@@95)  (or (= $o@@33 null) (U_2_bool (MapType1Select (MapType0Select $h@@95 $o@@33) alloc))))) :qid |unknown.0:0| :skolemid |3047| :pattern ( ($IsAlloc $o@@33 Tclass.Maps.__default $h@@95)) )))
(assert  (=> true (forall ((Maps._default.IMapsTo$K T@U) (Maps._default.IMapsTo$V T@U) (|m#0@@6| T@U) (|k#0@@8| T@U) (|v#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K) TyType) (= (type Maps._default.IMapsTo$V) TyType)) (= (type |m#0@@6|) (IMapType BoxType BoxType))) (= (type |k#0@@8|) BoxType)) (= (type |v#0@@15|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0@@6| |k#0@@8| |v#0@@15|) (and (and ($Is |m#0@@6| (TIMap Maps._default.IMapsTo$K Maps._default.IMapsTo$V)) ($IsBox |k#0@@8| Maps._default.IMapsTo$K)) ($IsBox |v#0@@15| Maps._default.IMapsTo$V)))) true) :qid |unknown.0:0| :skolemid |3048| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K Maps._default.IMapsTo$V |m#0@@6| |k#0@@8| |v#0@@15|)) ))))
(assert (forall ((Maps._default.IMapsTo$K@@0 T@U) (Maps._default.IMapsTo$V@@0 T@U) (|m#0@@7| T@U) (|k#0@@9| T@U) (|v#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@0) TyType) (= (type Maps._default.IMapsTo$V@@0) TyType)) (= (type |m#0@@7|) (IMapType BoxType BoxType))) (= (type |k#0@@9|) BoxType)) (= (type |v#0@@16|) BoxType)) (and (and ($Is |m#0@@7| (TIMap Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0)) ($IsBox |k#0@@9| Maps._default.IMapsTo$K@@0)) ($IsBox |v#0@@16| Maps._default.IMapsTo$V@@0))) (= (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@7| |k#0@@9| |v#0@@16|) true)) :qid |unknown.0:0| :skolemid |3049| :pattern ( (|Maps.__default.IMapsTo#requires| Maps._default.IMapsTo$K@@0 Maps._default.IMapsTo$V@@0 |m#0@@7| |k#0@@9| |v#0@@16|)) )))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@1 T@U) (Maps._default.IMapsTo$V@@1 T@U) (|m#0@@8| T@U) (|k#0@@10| T@U) (|v#0@@17| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@1) TyType) (= (type Maps._default.IMapsTo$V@@1) TyType)) (= (type |m#0@@8|) (IMapType BoxType BoxType))) (= (type |k#0@@10|) BoxType)) (= (type |v#0@@17|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@8| |k#0@@10| |v#0@@17|) (and (and ($Is |m#0@@8| (TIMap Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1)) ($IsBox |k#0@@10| Maps._default.IMapsTo$K@@1)) ($IsBox |v#0@@17| Maps._default.IMapsTo$V@@1)))) (= (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@8| |k#0@@10| |v#0@@17|)  (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@8|) |k#0@@10|)) (= (MapType0Select (|IMap#Elements| |m#0@@8|) |k#0@@10|) |v#0@@17|)))) :qid |unknown.0:0| :skolemid |3050| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@1 Maps._default.IMapsTo$V@@1 |m#0@@8| |k#0@@10| |v#0@@17|)) ))))
(assert  (=> true (forall ((Maps._default.IMapsTo$K@@2 T@U) (Maps._default.IMapsTo$V@@2 T@U) (|m#0@@9| T@U) (|k#0@@11| T@U) (|v#0@@18| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsTo$K@@2) TyType) (= (type Maps._default.IMapsTo$V@@2) TyType)) (= (type |m#0@@9|) (IMapType BoxType BoxType))) (= (type |k#0@@11|) BoxType)) (= (type |v#0@@18|) BoxType)) (or (|Maps.__default.IMapsTo#canCall| Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@9|) (Lit |k#0@@11|) (Lit |v#0@@18|)) (and (and ($Is |m#0@@9| (TIMap Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2)) ($IsBox |k#0@@11| Maps._default.IMapsTo$K@@2)) ($IsBox |v#0@@18| Maps._default.IMapsTo$V@@2)))) (= (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@9|) (Lit |k#0@@11|) (Lit |v#0@@18|))  (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@9|) |k#0@@11|)) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@9|)) (Lit |k#0@@11|)) (Lit |v#0@@18|))))) :qid |unknown.0:0| :weight 3 :skolemid |3051| :pattern ( (Maps.__default.IMapsTo Maps._default.IMapsTo$K@@2 Maps._default.IMapsTo$V@@2 (Lit |m#0@@9|) (Lit |k#0@@11|) (Lit |v#0@@18|))) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K T@U) (Maps._default.MapsTo$V T@U) (|m#0@@10| T@U) (|k#0@@12| T@U) (|v#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K) TyType) (= (type Maps._default.MapsTo$V) TyType)) (= (type |m#0@@10|) (MapType BoxType BoxType))) (= (type |k#0@@12|) BoxType)) (= (type |v#0@@19|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@10| |k#0@@12| |v#0@@19|) (and (and ($Is |m#0@@10| (TMap Maps._default.MapsTo$K Maps._default.MapsTo$V)) ($IsBox |k#0@@12| Maps._default.MapsTo$K)) ($IsBox |v#0@@19| Maps._default.MapsTo$V)))) true) :qid |unknown.0:0| :skolemid |3052| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K Maps._default.MapsTo$V |m#0@@10| |k#0@@12| |v#0@@19|)) ))))
(assert (forall ((Maps._default.MapsTo$K@@0 T@U) (Maps._default.MapsTo$V@@0 T@U) (|m#0@@11| T@U) (|k#0@@13| T@U) (|v#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@0) TyType) (= (type Maps._default.MapsTo$V@@0) TyType)) (= (type |m#0@@11|) (MapType BoxType BoxType))) (= (type |k#0@@13|) BoxType)) (= (type |v#0@@20|) BoxType)) (and (and ($Is |m#0@@11| (TMap Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0)) ($IsBox |k#0@@13| Maps._default.MapsTo$K@@0)) ($IsBox |v#0@@20| Maps._default.MapsTo$V@@0))) (= (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@11| |k#0@@13| |v#0@@20|) true)) :qid |unknown.0:0| :skolemid |3053| :pattern ( (|Maps.__default.MapsTo#requires| Maps._default.MapsTo$K@@0 Maps._default.MapsTo$V@@0 |m#0@@11| |k#0@@13| |v#0@@20|)) )))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@1 T@U) (Maps._default.MapsTo$V@@1 T@U) (|m#0@@12| T@U) (|k#0@@14| T@U) (|v#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@1) TyType) (= (type Maps._default.MapsTo$V@@1) TyType)) (= (type |m#0@@12|) (MapType BoxType BoxType))) (= (type |k#0@@14|) BoxType)) (= (type |v#0@@21|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@12| |k#0@@14| |v#0@@21|) (and (and ($Is |m#0@@12| (TMap Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1)) ($IsBox |k#0@@14| Maps._default.MapsTo$K@@1)) ($IsBox |v#0@@21| Maps._default.MapsTo$V@@1)))) (= (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@12| |k#0@@14| |v#0@@21|)  (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@12|) |k#0@@14|)) (= (MapType0Select (|Map#Elements| |m#0@@12|) |k#0@@14|) |v#0@@21|)))) :qid |unknown.0:0| :skolemid |3054| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@1 Maps._default.MapsTo$V@@1 |m#0@@12| |k#0@@14| |v#0@@21|)) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@2 T@U) (Maps._default.MapsTo$V@@2 T@U) (|m#0@@13| T@U) (|k#0@@15| T@U) (|v#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@2) TyType) (= (type Maps._default.MapsTo$V@@2) TyType)) (= (type |m#0@@13|) (MapType BoxType BoxType))) (= (type |k#0@@15|) BoxType)) (= (type |v#0@@22|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@13|) |k#0@@15| |v#0@@22|) (and (and ($Is |m#0@@13| (TMap Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2)) ($IsBox |k#0@@15| Maps._default.MapsTo$K@@2)) ($IsBox |v#0@@22| Maps._default.MapsTo$V@@2)))) (= (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@13|) |k#0@@15| |v#0@@22|)  (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@13|) |k#0@@15|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@13|)) |k#0@@15|) |v#0@@22|)))) :qid |unknown.0:0| :weight 3 :skolemid |3055| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@2 Maps._default.MapsTo$V@@2 (Lit |m#0@@13|) |k#0@@15| |v#0@@22|)) ))))
(assert  (=> true (forall ((Maps._default.MapsTo$K@@3 T@U) (Maps._default.MapsTo$V@@3 T@U) (|m#0@@14| T@U) (|k#0@@16| T@U) (|v#0@@23| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsTo$K@@3) TyType) (= (type Maps._default.MapsTo$V@@3) TyType)) (= (type |m#0@@14|) (MapType BoxType BoxType))) (= (type |k#0@@16|) BoxType)) (= (type |v#0@@23|) BoxType)) (or (|Maps.__default.MapsTo#canCall| Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@14|) (Lit |k#0@@16|) (Lit |v#0@@23|)) (and (and ($Is |m#0@@14| (TMap Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3)) ($IsBox |k#0@@16| Maps._default.MapsTo$K@@3)) ($IsBox |v#0@@23| Maps._default.MapsTo$V@@3)))) (= (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@14|) (Lit |k#0@@16|) (Lit |v#0@@23|))  (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@14|) |k#0@@16|)) (= (MapType0Select (|Map#Elements| (Lit |m#0@@14|)) (Lit |k#0@@16|)) (Lit |v#0@@23|))))) :qid |unknown.0:0| :weight 3 :skolemid |3056| :pattern ( (Maps.__default.MapsTo Maps._default.MapsTo$K@@3 Maps._default.MapsTo$V@@3 (Lit |m#0@@14|) (Lit |k#0@@16|) (Lit |v#0@@23|))) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K T@U) (Maps._default.MapsAgreeOnKey$V T@U) (|m#0@@15| T@U) (|m'#0@@0| T@U) (|k#0@@17| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K) TyType) (= (type Maps._default.MapsAgreeOnKey$V) TyType)) (= (type |m#0@@15|) (MapType BoxType BoxType))) (= (type |m'#0@@0|) (MapType BoxType BoxType))) (= (type |k#0@@17|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@15| |m'#0@@0| |k#0@@17|) (and (and ($Is |m#0@@15| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V)) ($Is |m'#0@@0| (TMap Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V))) ($IsBox |k#0@@17| Maps._default.MapsAgreeOnKey$K)))) true) :qid |unknown.0:0| :skolemid |3057| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K Maps._default.MapsAgreeOnKey$V |m#0@@15| |m'#0@@0| |k#0@@17|)) ))))
(assert (forall ((Maps._default.MapsAgreeOnKey$K@@0 T@U) (Maps._default.MapsAgreeOnKey$V@@0 T@U) (|m#0@@16| T@U) (|m'#0@@1| T@U) (|k#0@@18| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@16|) (MapType BoxType BoxType))) (= (type |m'#0@@1|) (MapType BoxType BoxType))) (= (type |k#0@@18|) BoxType)) (and (and ($Is |m#0@@16| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0)) ($Is |m'#0@@1| (TMap Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0))) ($IsBox |k#0@@18| Maps._default.MapsAgreeOnKey$K@@0))) (= (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@16| |m'#0@@1| |k#0@@18|) true)) :qid |unknown.0:0| :skolemid |3058| :pattern ( (|Maps.__default.MapsAgreeOnKey#requires| Maps._default.MapsAgreeOnKey$K@@0 Maps._default.MapsAgreeOnKey$V@@0 |m#0@@16| |m'#0@@1| |k#0@@18|)) )))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@1 T@U) (Maps._default.MapsAgreeOnKey$V@@1 T@U) (|m#0@@17| T@U) (|m'#0@@2| T@U) (|k#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@17|) (MapType BoxType BoxType))) (= (type |m'#0@@2|) (MapType BoxType BoxType))) (= (type |k#0@@19|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@17| |m'#0@@2| |k#0@@19|) (and (and ($Is |m#0@@17| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1)) ($Is |m'#0@@2| (TMap Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1))) ($IsBox |k#0@@19| Maps._default.MapsAgreeOnKey$K@@1)))) (= (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@17| |m'#0@@2| |k#0@@19|)  (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@17|) |k#0@@19|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@19|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@17|) |k#0@@19|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@2|) |k#0@@19|))) (= (MapType0Select (|Map#Elements| |m#0@@17|) |k#0@@19|) (MapType0Select (|Map#Elements| |m'#0@@2|) |k#0@@19|)))))) :qid |unknown.0:0| :skolemid |3059| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@1 Maps._default.MapsAgreeOnKey$V@@1 |m#0@@17| |m'#0@@2| |k#0@@19|)) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@2 T@U) (Maps._default.MapsAgreeOnKey$V@@2 T@U) (|m#0@@18| T@U) (|m'#0@@3| T@U) (|k#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@18|) (MapType BoxType BoxType))) (= (type |m'#0@@3|) (MapType BoxType BoxType))) (= (type |k#0@@20|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@18|) (Lit |m'#0@@3|) |k#0@@20|) (and (and ($Is |m#0@@18| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2)) ($Is |m'#0@@3| (TMap Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2))) ($IsBox |k#0@@20| Maps._default.MapsAgreeOnKey$K@@2)))) (= (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@18|) (Lit |m'#0@@3|) |k#0@@20|)  (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@18|) |k#0@@20|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@20|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@18|) |k#0@@20|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@3|) |k#0@@20|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@18|)) |k#0@@20|) (MapType0Select (|Map#Elements| (Lit |m'#0@@3|)) |k#0@@20|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3060| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@2 Maps._default.MapsAgreeOnKey$V@@2 (Lit |m#0@@18|) (Lit |m'#0@@3|) |k#0@@20|)) ))))
(assert  (=> true (forall ((Maps._default.MapsAgreeOnKey$K@@3 T@U) (Maps._default.MapsAgreeOnKey$V@@3 T@U) (|m#0@@19| T@U) (|m'#0@@4| T@U) (|k#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapsAgreeOnKey$K@@3) TyType) (= (type Maps._default.MapsAgreeOnKey$V@@3) TyType)) (= (type |m#0@@19|) (MapType BoxType BoxType))) (= (type |m'#0@@4|) (MapType BoxType BoxType))) (= (type |k#0@@21|) BoxType)) (or (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@19|) (Lit |m'#0@@4|) (Lit |k#0@@21|)) (and (and ($Is |m#0@@19| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3)) ($Is |m'#0@@4| (TMap Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3))) ($IsBox |k#0@@21| Maps._default.MapsAgreeOnKey$K@@3)))) (= (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@19|) (Lit |m'#0@@4|) (Lit |k#0@@21|))  (or (and (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@19|) |k#0@@21|))) (not (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@4|) |k#0@@21|)))) (and (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@19|) |k#0@@21|)) (U_2_bool (MapType0Select (|Map#Domain| |m'#0@@4|) |k#0@@21|))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@19|)) (Lit |k#0@@21|)) (MapType0Select (|Map#Elements| (Lit |m'#0@@4|)) (Lit |k#0@@21|))))))) :qid |unknown.0:0| :weight 3 :skolemid |3061| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.MapsAgreeOnKey$K@@3 Maps._default.MapsAgreeOnKey$V@@3 (Lit |m#0@@19|) (Lit |m'#0@@4|) (Lit |k#0@@21|))) ))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K T@U) (Maps._default.IMapsAgreeOnKey$V T@U) (|m#0@@20| T@U) (|m'#0@@5| T@U) (|k#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K) TyType) (= (type Maps._default.IMapsAgreeOnKey$V) TyType)) (= (type |m#0@@20|) (IMapType BoxType BoxType))) (= (type |m'#0@@5|) (IMapType BoxType BoxType))) (= (type |k#0@@22|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@20| |m'#0@@5| |k#0@@22|) (and (and ($Is |m#0@@20| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V)) ($Is |m'#0@@5| (TIMap Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V))) ($IsBox |k#0@@22| Maps._default.IMapsAgreeOnKey$K)))) true) :qid |unknown.0:0| :skolemid |3062| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K Maps._default.IMapsAgreeOnKey$V |m#0@@20| |m'#0@@5| |k#0@@22|)) ))))
(assert (forall ((Maps._default.IMapsAgreeOnKey$K@@0 T@U) (Maps._default.IMapsAgreeOnKey$V@@0 T@U) (|m#0@@21| T@U) (|m'#0@@6| T@U) (|k#0@@23| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@0) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@0) TyType)) (= (type |m#0@@21|) (IMapType BoxType BoxType))) (= (type |m'#0@@6|) (IMapType BoxType BoxType))) (= (type |k#0@@23|) BoxType)) (and (and ($Is |m#0@@21| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0)) ($Is |m'#0@@6| (TIMap Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0))) ($IsBox |k#0@@23| Maps._default.IMapsAgreeOnKey$K@@0))) (= (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@21| |m'#0@@6| |k#0@@23|) true)) :qid |unknown.0:0| :skolemid |3063| :pattern ( (|Maps.__default.IMapsAgreeOnKey#requires| Maps._default.IMapsAgreeOnKey$K@@0 Maps._default.IMapsAgreeOnKey$V@@0 |m#0@@21| |m'#0@@6| |k#0@@23|)) )))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@1 T@U) (Maps._default.IMapsAgreeOnKey$V@@1 T@U) (|m#0@@22| T@U) (|m'#0@@7| T@U) (|k#0@@24| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@1) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@1) TyType)) (= (type |m#0@@22|) (IMapType BoxType BoxType))) (= (type |m'#0@@7|) (IMapType BoxType BoxType))) (= (type |k#0@@24|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@22| |m'#0@@7| |k#0@@24|) (and (and ($Is |m#0@@22| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1)) ($Is |m'#0@@7| (TIMap Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1))) ($IsBox |k#0@@24| Maps._default.IMapsAgreeOnKey$K@@1)))) (= (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@22| |m'#0@@7| |k#0@@24|)  (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@22|) |k#0@@24|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@24|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@22|) |k#0@@24|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@7|) |k#0@@24|))) (= (MapType0Select (|IMap#Elements| |m#0@@22|) |k#0@@24|) (MapType0Select (|IMap#Elements| |m'#0@@7|) |k#0@@24|)))))) :qid |unknown.0:0| :skolemid |3064| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@1 Maps._default.IMapsAgreeOnKey$V@@1 |m#0@@22| |m'#0@@7| |k#0@@24|)) ))))
(assert  (=> true (forall ((Maps._default.IMapsAgreeOnKey$K@@2 T@U) (Maps._default.IMapsAgreeOnKey$V@@2 T@U) (|m#0@@23| T@U) (|m'#0@@8| T@U) (|k#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapsAgreeOnKey$K@@2) TyType) (= (type Maps._default.IMapsAgreeOnKey$V@@2) TyType)) (= (type |m#0@@23|) (IMapType BoxType BoxType))) (= (type |m'#0@@8|) (IMapType BoxType BoxType))) (= (type |k#0@@25|) BoxType)) (or (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@23|) (Lit |m'#0@@8|) (Lit |k#0@@25|)) (and (and ($Is |m#0@@23| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2)) ($Is |m'#0@@8| (TIMap Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2))) ($IsBox |k#0@@25| Maps._default.IMapsAgreeOnKey$K@@2)))) (= (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@23|) (Lit |m'#0@@8|) (Lit |k#0@@25|))  (or (and (not (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@23|) |k#0@@25|))) (not (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@8|) |k#0@@25|)))) (and (and (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@23|) |k#0@@25|)) (U_2_bool (MapType0Select (|IMap#Domain| |m'#0@@8|) |k#0@@25|))) (= (MapType0Select (|IMap#Elements| (Lit |m#0@@23|)) (Lit |k#0@@25|)) (MapType0Select (|IMap#Elements| (Lit |m'#0@@8|)) (Lit |k#0@@25|))))))) :qid |unknown.0:0| :weight 3 :skolemid |3065| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IMapsAgreeOnKey$K@@2 Maps._default.IMapsAgreeOnKey$V@@2 (Lit |m#0@@23|) (Lit |m'#0@@8|) (Lit |k#0@@25|))) ))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K T@U) (Maps._default.IsSubIMap$V T@U) (|sub#0| T@U) (|sup#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K) TyType) (= (type Maps._default.IsSubIMap$V) TyType)) (= (type |sub#0|) (IMapType BoxType BoxType))) (= (type |sup#0|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0| |sup#0|) (and ($Is |sub#0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V)) ($Is |sup#0| (TIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V))))) true) :qid |unknown.0:0| :skolemid |3066| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K Maps._default.IsSubIMap$V |sub#0| |sup#0|)) ))))
(assert (forall ((Maps._default.IsSubIMap$K@@0 T@U) (Maps._default.IsSubIMap$V@@0 T@U) (|sub#0@@0| T@U) (|sup#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@0) TyType) (= (type Maps._default.IsSubIMap$V@@0) TyType)) (= (type |sub#0@@0|) (IMapType BoxType BoxType))) (= (type |sup#0@@0|) (IMapType BoxType BoxType))) (and ($Is |sub#0@@0| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)) ($Is |sup#0@@0| (TIMap Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0)))) (= (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|) true)) :qid |unknown.0:0| :skolemid |3067| :pattern ( (|Maps.__default.IsSubIMap#requires| Maps._default.IsSubIMap$K@@0 Maps._default.IsSubIMap$V@@0 |sub#0@@0| |sup#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@1 T@U) (Maps._default.IsSubIMap$V@@1 T@U) (|sub#0@@1| T@U) (|sup#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@1) TyType) (= (type Maps._default.IsSubIMap$V@@1) TyType)) (= (type |sub#0@@1|) (IMapType BoxType BoxType))) (= (type |sup#0@@1|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|) (and ($Is |sub#0@@1| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1)) ($Is |sup#0@@1| (TIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1))))) (and (=> (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0@@9| T@U) ) (!  (=> (and (and (= (type |key#0@@9|) BoxType) ($IsBox |key#0@@9| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@9|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@9|)) :qid |Mapsidfy.31:16| :skolemid |3069| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@9|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@9|)) ))) (= (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|)  (and (|ISet#Subset| (|IMap#Domain| |sub#0@@1|) (|IMap#Domain| |sup#0@@1|)) (forall ((|key#0@@10| T@U) ) (!  (=> (and (and (= (type |key#0@@10|) BoxType) ($IsBox |key#0@@10| Maps._default.IsSubIMap$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@10|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@10|)) :qid |Mapsidfy.31:16| :skolemid |3068| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1| |key#0@@10|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@1|) |key#0@@10|)) )))))) :qid |unknown.0:0| :skolemid |3070| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@1 Maps._default.IsSubIMap$V@@1 |sub#0@@1| |sup#0@@1|)) ))))
(assert  (=> true (forall ((Maps._default.IsSubIMap$K@@2 T@U) (Maps._default.IsSubIMap$V@@2 T@U) (|sub#0@@2| T@U) (|sup#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubIMap$K@@2) TyType) (= (type Maps._default.IsSubIMap$V@@2) TyType)) (= (type |sub#0@@2|) (IMapType BoxType BoxType))) (= (type |sup#0@@2|) (IMapType BoxType BoxType))) (or (|Maps.__default.IsSubIMap#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|)) (and ($Is |sub#0@@2| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2)) ($Is |sup#0@@2| (TIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2))))) (and (=> (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1@@1| T@U) ) (!  (=> (and (and (= (type |key#1@@1|) BoxType) ($IsBox |key#1@@1| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#1@@1|))) (|Maps.__default.IMapsAgreeOnKey#canCall| Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#1@@1|)) :qid |Mapsidfy.31:16| :skolemid |3072| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#1@@1|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#1@@1|)) ))) (= (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|))  (and (|ISet#Subset| (|IMap#Domain| (Lit |sub#0@@2|)) (|IMap#Domain| (Lit |sup#0@@2|))) (forall ((|key#1@@2| T@U) ) (!  (=> (and (and (= (type |key#1@@2|) BoxType) ($IsBox |key#1@@2| Maps._default.IsSubIMap$K@@2)) (U_2_bool (MapType0Select (Lit (|IMap#Domain| (Lit |sub#0@@2|))) |key#1@@2|))) (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|) |key#1@@2|)) :qid |Mapsidfy.31:16| :skolemid |3071| :pattern ( (Maps.__default.IMapsAgreeOnKey Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 |sub#0@@2| |sup#0@@2| |key#1@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |sub#0@@2|) |key#1@@2|)) )))))) :qid |unknown.0:0| :weight 3 :skolemid |3073| :pattern ( (Maps.__default.IsSubIMap Maps._default.IsSubIMap$K@@2 Maps._default.IsSubIMap$V@@2 (Lit |sub#0@@2|) (Lit |sup#0@@2|))) ))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K T@U) (Maps._default.IsSubMap$V T@U) (|sub#0@@3| T@U) (|sup#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K) TyType) (= (type Maps._default.IsSubMap$V) TyType)) (= (type |sub#0@@3|) (MapType BoxType BoxType))) (= (type |sup#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@3| |sup#0@@3|) (and ($Is |sub#0@@3| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V)) ($Is |sup#0@@3| (TMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V))))) true) :qid |unknown.0:0| :skolemid |3074| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K Maps._default.IsSubMap$V |sub#0@@3| |sup#0@@3|)) ))))
(assert (forall ((Maps._default.IsSubMap$K@@0 T@U) (Maps._default.IsSubMap$V@@0 T@U) (|sub#0@@4| T@U) (|sup#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@0) TyType) (= (type Maps._default.IsSubMap$V@@0) TyType)) (= (type |sub#0@@4|) (MapType BoxType BoxType))) (= (type |sup#0@@4|) (MapType BoxType BoxType))) (and ($Is |sub#0@@4| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)) ($Is |sup#0@@4| (TMap Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0)))) (= (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|) true)) :qid |unknown.0:0| :skolemid |3075| :pattern ( (|Maps.__default.IsSubMap#requires| Maps._default.IsSubMap$K@@0 Maps._default.IsSubMap$V@@0 |sub#0@@4| |sup#0@@4|)) )))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@1 T@U) (Maps._default.IsSubMap$V@@1 T@U) (|sub#0@@5| T@U) (|sup#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@1) TyType) (= (type Maps._default.IsSubMap$V@@1) TyType)) (= (type |sub#0@@5|) (MapType BoxType BoxType))) (= (type |sup#0@@5|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|) (and ($Is |sub#0@@5| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1)) ($Is |sup#0@@5| (TMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1))))) (and (=> (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@11| T@U) ) (!  (=> (and (and (= (type |key#0@@11|) BoxType) ($IsBox |key#0@@11| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@11|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@11|)) :qid |Mapsidfy.36:16| :skolemid |3077| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@11|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@11|)) ))) (= (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|)  (and (|Set#Subset| (|Map#Domain| |sub#0@@5|) (|Map#Domain| |sup#0@@5|)) (forall ((|key#0@@12| T@U) ) (!  (=> (and (and (= (type |key#0@@12|) BoxType) ($IsBox |key#0@@12| Maps._default.IsSubMap$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@12|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@12|)) :qid |Mapsidfy.36:16| :skolemid |3076| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5| |key#0@@12|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@5|) |key#0@@12|)) )))))) :qid |unknown.0:0| :skolemid |3078| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@1 Maps._default.IsSubMap$V@@1 |sub#0@@5| |sup#0@@5|)) ))))
(assert  (=> true (forall ((Maps._default.IsSubMap$K@@2 T@U) (Maps._default.IsSubMap$V@@2 T@U) (|sub#0@@6| T@U) (|sup#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IsSubMap$K@@2) TyType) (= (type Maps._default.IsSubMap$V@@2) TyType)) (= (type |sub#0@@6|) (MapType BoxType BoxType))) (= (type |sup#0@@6|) (MapType BoxType BoxType))) (or (|Maps.__default.IsSubMap#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|)) (and ($Is |sub#0@@6| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2)) ($Is |sup#0@@6| (TMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2))))) (and (=> (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@3| T@U) ) (!  (=> (and (and (= (type |key#1@@3|) BoxType) ($IsBox |key#1@@3| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#1@@3|))) (|Maps.__default.MapsAgreeOnKey#canCall| Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#1@@3|)) :qid |Mapsidfy.36:16| :skolemid |3080| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#1@@3|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#1@@3|)) ))) (= (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|))  (and (|Set#Subset| (|Map#Domain| (Lit |sub#0@@6|)) (|Map#Domain| (Lit |sup#0@@6|))) (forall ((|key#1@@4| T@U) ) (!  (=> (and (and (= (type |key#1@@4|) BoxType) ($IsBox |key#1@@4| Maps._default.IsSubMap$K@@2)) (U_2_bool (MapType0Select (Lit (|Map#Domain| (Lit |sub#0@@6|))) |key#1@@4|))) (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|) |key#1@@4|)) :qid |Mapsidfy.36:16| :skolemid |3079| :pattern ( (Maps.__default.MapsAgreeOnKey Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 |sub#0@@6| |sup#0@@6| |key#1@@4|)) :pattern ( (MapType0Select (|Map#Domain| |sub#0@@6|) |key#1@@4|)) )))))) :qid |unknown.0:0| :weight 3 :skolemid |3081| :pattern ( (Maps.__default.IsSubMap Maps._default.IsSubMap$K@@2 Maps._default.IsSubMap$V@@2 (Lit |sub#0@@6|) (Lit |sup#0@@6|))) ))))
(assert (forall ((arg0@@555 T@U) (arg1@@258 T@U) (arg2@@177 T@U) (arg3@@129 T@U) (arg4@@101 T@U) ) (! (= (type (Maps.__default.MapRemove arg0@@555 arg1@@258 arg2@@177 arg3@@129 arg4@@101)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove| :pattern ( (Maps.__default.MapRemove arg0@@555 arg1@@258 arg2@@177 arg3@@129 arg4@@101)) )))
(assert (forall ((Maps._default.MapRemove$K T@U) (Maps._default.MapRemove$V T@U) ($ly@@232 T@U) (|m#0@@24| T@U) (|ks#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K) TyType) (= (type Maps._default.MapRemove$V) TyType)) (= (type $ly@@232) LayerTypeType)) (= (type |m#0@@24|) (MapType BoxType BoxType))) (= (type |ks#0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@232) |m#0@@24| |ks#0|) (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V $ly@@232 |m#0@@24| |ks#0|))) :qid |unknown.0:0| :skolemid |3082| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K Maps._default.MapRemove$V ($LS $ly@@232) |m#0@@24| |ks#0|)) )))
(assert (forall ((Maps._default.MapRemove$K@@0 T@U) (Maps._default.MapRemove$V@@0 T@U) ($ly@@233 T@U) (|m#0@@25| T@U) (|ks#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove$K@@0) TyType) (= (type Maps._default.MapRemove$V@@0) TyType)) (= (type $ly@@233) LayerTypeType)) (= (type |m#0@@25|) (MapType BoxType BoxType))) (= (type |ks#0@@0|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $ly@@233 |m#0@@25| |ks#0@@0|) (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 $LZ |m#0@@25| |ks#0@@0|))) :qid |unknown.0:0| :skolemid |3083| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@0 Maps._default.MapRemove$V@@0 (AsFuelBottom $ly@@233) |m#0@@25| |ks#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@1 T@U) (Maps._default.MapRemove$V@@1 T@U) ($ly@@234 T@U) (|m#0@@26| T@U) (|ks#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@1) TyType) (= (type Maps._default.MapRemove$V@@1) TyType)) (= (type $ly@@234) LayerTypeType)) (= (type |m#0@@26|) (MapType BoxType BoxType))) (= (type |ks#0@@1|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 |m#0@@26| |ks#0@@1|) (and ($Is |m#0@@26| (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1)) ($Is |ks#0@@1| (TSet Maps._default.MapRemove$K@@1))))) (and (and (and (and (and (forall ((|k#0@@26| T@U) ) (!  (=> (and (and (= (type |k#0@@26|) BoxType) ($IsBox |k#0@@26| Maps._default.MapRemove$K@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@26|) |k#0@@26|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#0@@26|))))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@234 |m#0@@26| |ks#0@@1|)) |k#0@@26|))) :qid |Mapsidfy.40:20| :skolemid |3084| :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@234 |m#0@@26| |ks#0@@1|)) |k#0@@26|)) :pattern ( (MapType0Select |ks#0@@1| |k#0@@26|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@26|) |k#0@@26|)) )) (forall ((|k#1| T@U) ) (!  (=> (and (= (type |k#1|) BoxType) ($IsBox |k#1| Maps._default.MapRemove$K@@1)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@234 |m#0@@26| |ks#0@@1|)) |k#1|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@26|) |k#1|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@234 |m#0@@26| |ks#0@@1|)) |k#1|)) (not (U_2_bool (MapType0Select |ks#0@@1| |k#1|)))))) :qid |Mapsidfy.41:20| :skolemid |3085| :pattern ( (MapType0Select |ks#0@@1| |k#1|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@26|) |k#1|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@234 |m#0@@26| |ks#0@@1|)) |k#1|)) ))) (forall ((|j#0@@8| T@U) ) (!  (=> (and (and (= (type |j#0@@8|) BoxType) ($IsBox |j#0@@8| Maps._default.MapRemove$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@234 |m#0@@26| |ks#0@@1|)) |j#0@@8|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@234 |m#0@@26| |ks#0@@1|)) |j#0@@8|) (MapType0Select (|Map#Elements| |m#0@@26|) |j#0@@8|))) :qid |Mapsidfy.42:20| :skolemid |3086| :pattern ( (MapType0Select (|Map#Elements| |m#0@@26|) |j#0@@8|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@234 |m#0@@26| |ks#0@@1|)) |j#0@@8|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@234 |m#0@@26| |ks#0@@1|)) |j#0@@8|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@234 |m#0@@26| |ks#0@@1|))) (|Set#Card| (|Map#Domain| |m#0@@26|)))) (<= (|Map#Card| (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@234 |m#0@@26| |ks#0@@1|)) (|Map#Card| |m#0@@26|))) ($Is (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@234 |m#0@@26| |ks#0@@1|) (TMap Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1)))) :qid |unknown.0:0| :skolemid |3087| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@1 Maps._default.MapRemove$V@@1 $ly@@234 |m#0@@26| |ks#0@@1|)) ))))
(assert (forall ((Maps._default.MapRemove$K@@2 T@U) (Maps._default.MapRemove$V@@2 T@U) ($ly@@235 T@U) (|m#0@@27| T@U) (|ks#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@2) TyType) (= (type Maps._default.MapRemove$V@@2) TyType)) (= (type $ly@@235) LayerTypeType)) (= (type |m#0@@27|) (MapType BoxType BoxType))) (= (type |ks#0@@2|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@27| (TMap Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2)) ($Is |ks#0@@2| (TSet Maps._default.MapRemove$K@@2)))) (= (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@235 |m#0@@27| |ks#0@@2|) true)) :qid |unknown.0:0| :skolemid |3088| :pattern ( (|Maps.__default.MapRemove#requires| Maps._default.MapRemove$K@@2 Maps._default.MapRemove$V@@2 $ly@@235 |m#0@@27| |ks#0@@2|)) )))
(assert (forall ((arg0@@556 T@U) (arg1@@259 T@U) (arg2@@178 T@U) ) (! (= (type (|lambda#106| arg0@@556 arg1@@259 arg2@@178)) (MapType0Type BoxType boolType)) :qid |funType:lambda#106| :pattern ( (|lambda#106| arg0@@556 arg1@@259 arg2@@178)) )))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@3 T@U) (Maps._default.MapRemove$V@@3 T@U) ($ly@@236 T@U) (|m#0@@28| T@U) (|ks#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@3) TyType) (= (type Maps._default.MapRemove$V@@3) TyType)) (= (type $ly@@236) LayerTypeType)) (= (type |m#0@@28|) (MapType BoxType BoxType))) (= (type |ks#0@@3|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 |m#0@@28| |ks#0@@3|) (and ($Is |m#0@@28| (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3)) ($Is |ks#0@@3| (TSet Maps._default.MapRemove$K@@3))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@236) |m#0@@28| |ks#0@@3|) (let ((|m'#0@@9| (|Map#Glue| (|lambda#106| Maps._default.MapRemove$K@@3 (|Map#Domain| |m#0@@28|) |ks#0@@3|) (|lambda#11| (|Map#Elements| |m#0@@28|)) (TMap Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3)))) |m'#0@@9|))) :qid |unknown.0:0| :skolemid |3089| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@3 Maps._default.MapRemove$V@@3 ($LS $ly@@236) |m#0@@28| |ks#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove$K@@4 T@U) (Maps._default.MapRemove$V@@4 T@U) ($ly@@237 T@U) (|m#0@@29| T@U) (|ks#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove$K@@4) TyType) (= (type Maps._default.MapRemove$V@@4) TyType)) (= (type $ly@@237) LayerTypeType)) (= (type |m#0@@29|) (MapType BoxType BoxType))) (= (type |ks#0@@4|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemove#canCall| Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 (Lit |m#0@@29|) (Lit |ks#0@@4|)) (and ($Is |m#0@@29| (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4)) ($Is |ks#0@@4| (TSet Maps._default.MapRemove$K@@4))))) (= (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@237) (Lit |m#0@@29|) (Lit |ks#0@@4|)) (let ((|m'#1@@0| (|Map#Glue| (|lambda#106| Maps._default.MapRemove$K@@4 (|Map#Domain| |m#0@@29|) (Lit |ks#0@@4|)) (|lambda#11| (|Map#Elements| (Lit |m#0@@29|))) (TMap Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4)))) |m'#1@@0|))) :qid |unknown.0:0| :weight 3 :skolemid |3090| :pattern ( (Maps.__default.MapRemove Maps._default.MapRemove$K@@4 Maps._default.MapRemove$V@@4 ($LS $ly@@237) (Lit |m#0@@29|) (Lit |ks#0@@4|))) ))))
(assert (forall ((arg0@@557 T@U) (arg1@@260 T@U) (arg2@@179 T@U) (arg3@@130 T@U) (arg4@@102 T@U) ) (! (= (type (Maps.__default.MapRemoveStrong arg0@@557 arg1@@260 arg2@@179 arg3@@130 arg4@@102)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemoveStrong| :pattern ( (Maps.__default.MapRemoveStrong arg0@@557 arg1@@260 arg2@@179 arg3@@130 arg4@@102)) )))
(assert (forall ((Maps._default.MapRemoveStrong$K T@U) (Maps._default.MapRemoveStrong$V T@U) ($ly@@238 T@U) (|m#0@@30| T@U) (|ks#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K) TyType) (= (type Maps._default.MapRemoveStrong$V) TyType)) (= (type $ly@@238) LayerTypeType)) (= (type |m#0@@30|) (MapType BoxType BoxType))) (= (type |ks#0@@5|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@238) |m#0@@30| |ks#0@@5|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V $ly@@238 |m#0@@30| |ks#0@@5|))) :qid |unknown.0:0| :skolemid |3091| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K Maps._default.MapRemoveStrong$V ($LS $ly@@238) |m#0@@30| |ks#0@@5|)) )))
(assert (forall ((Maps._default.MapRemoveStrong$K@@0 T@U) (Maps._default.MapRemoveStrong$V@@0 T@U) ($ly@@239 T@U) (|m#0@@31| T@U) (|ks#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@0) TyType) (= (type Maps._default.MapRemoveStrong$V@@0) TyType)) (= (type $ly@@239) LayerTypeType)) (= (type |m#0@@31|) (MapType BoxType BoxType))) (= (type |ks#0@@6|) (MapType0Type BoxType boolType))) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $ly@@239 |m#0@@31| |ks#0@@6|) (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 $LZ |m#0@@31| |ks#0@@6|))) :qid |unknown.0:0| :skolemid |3092| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@0 Maps._default.MapRemoveStrong$V@@0 (AsFuelBottom $ly@@239) |m#0@@31| |ks#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@1 T@U) (Maps._default.MapRemoveStrong$V@@1 T@U) ($ly@@240 T@U) (|m#0@@32| T@U) (|ks#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@1) TyType) (= (type Maps._default.MapRemoveStrong$V@@1) TyType)) (= (type $ly@@240) LayerTypeType)) (= (type |m#0@@32|) (MapType BoxType BoxType))) (= (type |ks#0@@7|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 |m#0@@32| |ks#0@@7|) (and ($Is |m#0@@32| (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1)) ($Is |ks#0@@7| (TSet Maps._default.MapRemoveStrong$K@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@240 |m#0@@32| |ks#0@@7|)) (|Set#Difference| (|Map#Domain| |m#0@@32|) |ks#0@@7|)) (forall ((|j#0@@9| T@U) ) (!  (=> (and (and (= (type |j#0@@9|) BoxType) ($IsBox |j#0@@9| Maps._default.MapRemoveStrong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@240 |m#0@@32| |ks#0@@7|)) |j#0@@9|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@240 |m#0@@32| |ks#0@@7|)) |j#0@@9|) (MapType0Select (|Map#Elements| |m#0@@32|) |j#0@@9|))) :qid |Mapsidfy.53:20| :skolemid |3093| :pattern ( (MapType0Select (|Map#Elements| |m#0@@32|) |j#0@@9|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@240 |m#0@@32| |ks#0@@7|)) |j#0@@9|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@240 |m#0@@32| |ks#0@@7|)) |j#0@@9|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@240 |m#0@@32| |ks#0@@7|))) (|Set#Card| (|Map#Domain| |m#0@@32|)))) (<= (|Map#Card| (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@240 |m#0@@32| |ks#0@@7|)) (|Map#Card| |m#0@@32|))) ($Is (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@240 |m#0@@32| |ks#0@@7|) (TMap Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1)))) :qid |unknown.0:0| :skolemid |3094| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@1 Maps._default.MapRemoveStrong$V@@1 $ly@@240 |m#0@@32| |ks#0@@7|)) ))))
(assert (forall ((Maps._default.MapRemoveStrong$K@@2 T@U) (Maps._default.MapRemoveStrong$V@@2 T@U) ($ly@@241 T@U) (|m#0@@33| T@U) (|ks#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@2) TyType) (= (type Maps._default.MapRemoveStrong$V@@2) TyType)) (= (type $ly@@241) LayerTypeType)) (= (type |m#0@@33|) (MapType BoxType BoxType))) (= (type |ks#0@@8|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@33| (TMap Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2)) ($Is |ks#0@@8| (TSet Maps._default.MapRemoveStrong$K@@2)))) (= (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@241 |m#0@@33| |ks#0@@8|) true)) :qid |unknown.0:0| :skolemid |3095| :pattern ( (|Maps.__default.MapRemoveStrong#requires| Maps._default.MapRemoveStrong$K@@2 Maps._default.MapRemoveStrong$V@@2 $ly@@241 |m#0@@33| |ks#0@@8|)) )))
(assert  (and (and (= (type StartFuel_Maps._default.MapRemove) LayerTypeType) (= (type MoreFuel_Maps._default.MapRemove0) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@3 T@U) (Maps._default.MapRemoveStrong$V@@3 T@U) ($ly@@242 T@U) (|m#0@@34| T@U) (|ks#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@3) TyType) (= (type Maps._default.MapRemoveStrong$V@@3) TyType)) (= (type $ly@@242) LayerTypeType)) (= (type |m#0@@34|) (MapType BoxType BoxType))) (= (type |ks#0@@9|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@34| |ks#0@@9|) (and ($Is |m#0@@34| (TMap Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3)) ($Is |ks#0@@9| (TSet Maps._default.MapRemoveStrong$K@@3))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 |m#0@@34| |ks#0@@9|) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove0)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove0)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove0) MoreFuel_Maps._default.MapRemove0)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@242) |m#0@@34| |ks#0@@9|) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 StartFuel_Maps._default.MapRemove |m#0@@34| |ks#0@@9|))))) :qid |unknown.0:0| :skolemid |3096| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@3 Maps._default.MapRemoveStrong$V@@3 ($LS $ly@@242) |m#0@@34| |ks#0@@9|)) ))))
(assert (= (type MoreFuel_Maps._default.MapRemove1) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemoveStrong$K@@4 T@U) (Maps._default.MapRemoveStrong$V@@4 T@U) ($ly@@243 T@U) (|m#0@@35| T@U) (|ks#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemoveStrong$K@@4) TyType) (= (type Maps._default.MapRemoveStrong$V@@4) TyType)) (= (type $ly@@243) LayerTypeType)) (= (type |m#0@@35|) (MapType BoxType BoxType))) (= (type |ks#0@@10|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRemoveStrong#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@35|) (Lit |ks#0@@10|)) (and ($Is |m#0@@35| (TMap Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4)) ($Is |ks#0@@10| (TSet Maps._default.MapRemoveStrong$K@@4))))) (and (|Maps.__default.MapRemove#canCall| Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 (Lit |m#0@@35|) (Lit |ks#0@@10|)) (and (and (and (= StartFuel_Maps._default.MapRemove ($LS MoreFuel_Maps._default.MapRemove1)) (= StartFuelAssert_Maps._default.MapRemove ($LS ($LS MoreFuel_Maps._default.MapRemove1)))) (= (AsFuelBottom MoreFuel_Maps._default.MapRemove1) MoreFuel_Maps._default.MapRemove1)) (= (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@243) (Lit |m#0@@35|) (Lit |ks#0@@10|)) (Maps.__default.MapRemove Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 StartFuel_Maps._default.MapRemove (Lit |m#0@@35|) (Lit |ks#0@@10|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3097| :pattern ( (Maps.__default.MapRemoveStrong Maps._default.MapRemoveStrong$K@@4 Maps._default.MapRemoveStrong$V@@4 ($LS $ly@@243) (Lit |m#0@@35|) (Lit |ks#0@@10|))) ))))
(assert (forall ((arg0@@558 T@U) (arg1@@261 T@U) (arg2@@180 T@U) (arg3@@131 T@U) ) (! (= (type (Maps.__default.MapRemove1 arg0@@558 arg1@@261 arg2@@180 arg3@@131)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove1| :pattern ( (Maps.__default.MapRemove1 arg0@@558 arg1@@261 arg2@@180 arg3@@131)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1$K T@U) (Maps._default.MapRemove1$V T@U) (|m#0@@36| T@U) (|k#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K) TyType) (= (type Maps._default.MapRemove1$V) TyType)) (= (type |m#0@@36|) (MapType BoxType BoxType))) (= (type |k#0@@27|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@27|) (and ($Is |m#0@@36| (TMap Maps._default.MapRemove1$K Maps._default.MapRemove1$V)) ($IsBox |k#0@@27| Maps._default.MapRemove1$K)))) (and (and (and (and (and (and (forall ((|j#0@@10| T@U) ) (!  (=> (and (and (= (type |j#0@@10|) BoxType) ($IsBox |j#0@@10| Maps._default.MapRemove1$K)) (and (U_2_bool (MapType0Select (|Map#Domain| |m#0@@36|) |j#0@@10|)) (not (= |j#0@@10| |k#0@@27|)))) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@27|)) |j#0@@10|))) :qid |Mapsidfy.62:18| :skolemid |3098| :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@27|)) |j#0@@10|)) :pattern ( (MapType0Select (|Map#Domain| |m#0@@36|) |j#0@@10|)) )) (forall ((|j#1@@3| T@U) ) (!  (=> (and (= (type |j#1@@3|) BoxType) ($IsBox |j#1@@3| Maps._default.MapRemove1$K)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@27|)) |j#1@@3|)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@36|) |j#1@@3|))) (=> (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@27|)) |j#1@@3|)) (not (= |j#1@@3| |k#0@@27|))))) :qid |Mapsidfy.63:18| :skolemid |3099| :pattern ( (MapType0Select (|Map#Domain| |m#0@@36|) |j#1@@3|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@27|)) |j#1@@3|)) ))) (forall ((|j#2@@0| T@U) ) (!  (=> (and (and (= (type |j#2@@0|) BoxType) ($IsBox |j#2@@0| Maps._default.MapRemove1$K)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@27|)) |j#2@@0|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@27|)) |j#2@@0|) (MapType0Select (|Map#Elements| |m#0@@36|) |j#2@@0|))) :qid |Mapsidfy.64:18| :skolemid |3100| :pattern ( (MapType0Select (|Map#Elements| |m#0@@36|) |j#2@@0|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@27|)) |j#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@27|)) |j#2@@0|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@27|))) (|Set#Card| (|Map#Domain| |m#0@@36|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@36|) |k#0@@27|)) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@27|)) (- (|Map#Card| |m#0@@36|) 1)))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@36|) |k#0@@27|))) (= (|Map#Card| (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@27|)) (|Map#Card| |m#0@@36|)))) ($Is (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@27|) (TMap Maps._default.MapRemove1$K Maps._default.MapRemove1$V)))) :qid |unknown.0:0| :skolemid |3101| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K Maps._default.MapRemove1$V |m#0@@36| |k#0@@27|)) ))))
(assert (forall ((Maps._default.MapRemove1$K@@0 T@U) (Maps._default.MapRemove1$V@@0 T@U) (|m#0@@37| T@U) (|k#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@0) TyType) (= (type Maps._default.MapRemove1$V@@0) TyType)) (= (type |m#0@@37|) (MapType BoxType BoxType))) (= (type |k#0@@28|) BoxType)) (and ($Is |m#0@@37| (TMap Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0)) ($IsBox |k#0@@28| Maps._default.MapRemove1$K@@0))) (= (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 |m#0@@37| |k#0@@28|) true)) :qid |unknown.0:0| :skolemid |3102| :pattern ( (|Maps.__default.MapRemove1#requires| Maps._default.MapRemove1$K@@0 Maps._default.MapRemove1$V@@0 |m#0@@37| |k#0@@28|)) )))
(assert (= (type StartFuel_MapRemove_s._default.MapRemove1) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@1 T@U) (Maps._default.MapRemove1$V@@1 T@U) (|m#0@@38| T@U) (|k#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@1) TyType) (= (type Maps._default.MapRemove1$V@@1) TyType)) (= (type |m#0@@38|) (MapType BoxType BoxType))) (= (type |k#0@@29|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@38| |k#0@@29|) (and ($Is |m#0@@38| (TMap Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1)) ($IsBox |k#0@@29| Maps._default.MapRemove1$K@@1)))) (and (|MapRemove_s.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@38| |k#0@@29|) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@38| |k#0@@29|) (MapRemove_s.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 StartFuel_MapRemove_s._default.MapRemove1 |m#0@@38| |k#0@@29|)))) :qid |unknown.0:0| :skolemid |3103| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@1 Maps._default.MapRemove1$V@@1 |m#0@@38| |k#0@@29|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@2 T@U) (Maps._default.MapRemove1$V@@2 T@U) (|m#0@@39| T@U) (|k#0@@30| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@2) TyType) (= (type Maps._default.MapRemove1$V@@2) TyType)) (= (type |m#0@@39|) (MapType BoxType BoxType))) (= (type |k#0@@30|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 (Lit |m#0@@39|) |k#0@@30|) (and ($Is |m#0@@39| (TMap Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2)) ($IsBox |k#0@@30| Maps._default.MapRemove1$K@@2)))) (and (|MapRemove_s.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 (Lit |m#0@@39|) |k#0@@30|) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 (Lit |m#0@@39|) |k#0@@30|) (MapRemove_s.__default.MapRemove1 Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 StartFuel_MapRemove_s._default.MapRemove1 (Lit |m#0@@39|) |k#0@@30|)))) :qid |unknown.0:0| :weight 3 :skolemid |3104| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@2 Maps._default.MapRemove1$V@@2 (Lit |m#0@@39|) |k#0@@30|)) ))))
(assert  (=> true (forall ((Maps._default.MapRemove1$K@@3 T@U) (Maps._default.MapRemove1$V@@3 T@U) (|m#0@@40| T@U) (|k#0@@31| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1$K@@3) TyType) (= (type Maps._default.MapRemove1$V@@3) TyType)) (= (type |m#0@@40|) (MapType BoxType BoxType))) (= (type |k#0@@31|) BoxType)) (or (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 (Lit |m#0@@40|) (Lit |k#0@@31|)) (and ($Is |m#0@@40| (TMap Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3)) ($IsBox |k#0@@31| Maps._default.MapRemove1$K@@3)))) (and (|MapRemove_s.__default.MapRemove1#canCall| Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 (Lit |m#0@@40|) (Lit |k#0@@31|)) (= (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 (Lit |m#0@@40|) (Lit |k#0@@31|)) (MapRemove_s.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 StartFuel_MapRemove_s._default.MapRemove1 (Lit |m#0@@40|) (Lit |k#0@@31|))))) :qid |unknown.0:0| :weight 3 :skolemid |3105| :pattern ( (Maps.__default.MapRemove1 Maps._default.MapRemove1$K@@3 Maps._default.MapRemove1$V@@3 (Lit |m#0@@40|) (Lit |k#0@@31|))) ))))
(assert (forall ((arg0@@559 T@U) (arg1@@262 T@U) (arg2@@181 T@U) (arg3@@132 T@U) (arg4@@103 T@U) ) (! (= (type (Maps.__default.MapRemove1Strong arg0@@559 arg1@@262 arg2@@181 arg3@@132 arg4@@103)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRemove1Strong| :pattern ( (Maps.__default.MapRemove1Strong arg0@@559 arg1@@262 arg2@@181 arg3@@132 arg4@@103)) )))
(assert (forall ((Maps._default.MapRemove1Strong$K T@U) (Maps._default.MapRemove1Strong$V T@U) ($ly@@244 T@U) (|m#0@@41| T@U) (|k#0@@32| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K) TyType) (= (type Maps._default.MapRemove1Strong$V) TyType)) (= (type $ly@@244) LayerTypeType)) (= (type |m#0@@41|) (MapType BoxType BoxType))) (= (type |k#0@@32|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@244) |m#0@@41| |k#0@@32|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V $ly@@244 |m#0@@41| |k#0@@32|))) :qid |unknown.0:0| :skolemid |3106| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K Maps._default.MapRemove1Strong$V ($LS $ly@@244) |m#0@@41| |k#0@@32|)) )))
(assert (forall ((Maps._default.MapRemove1Strong$K@@0 T@U) (Maps._default.MapRemove1Strong$V@@0 T@U) ($ly@@245 T@U) (|m#0@@42| T@U) (|k#0@@33| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@0) TyType) (= (type Maps._default.MapRemove1Strong$V@@0) TyType)) (= (type $ly@@245) LayerTypeType)) (= (type |m#0@@42|) (MapType BoxType BoxType))) (= (type |k#0@@33|) BoxType)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $ly@@245 |m#0@@42| |k#0@@33|) (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 $LZ |m#0@@42| |k#0@@33|))) :qid |unknown.0:0| :skolemid |3107| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@0 Maps._default.MapRemove1Strong$V@@0 (AsFuelBottom $ly@@245) |m#0@@42| |k#0@@33|)) )))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@1 T@U) (Maps._default.MapRemove1Strong$V@@1 T@U) ($ly@@246 T@U) (|m#0@@43| T@U) (|k#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@1) TyType) (= (type Maps._default.MapRemove1Strong$V@@1) TyType)) (= (type $ly@@246) LayerTypeType)) (= (type |m#0@@43|) (MapType BoxType BoxType))) (= (type |k#0@@34|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 |m#0@@43| |k#0@@34|) (and ($Is |m#0@@43| (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1)) ($IsBox |k#0@@34| Maps._default.MapRemove1Strong$K@@1)))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@246 |m#0@@43| |k#0@@34|)) (|Set#Difference| (|Map#Domain| |m#0@@43|) (|Set#UnionOne| (|Set#Empty| BoxType) |k#0@@34|))) (forall ((|j#0@@11| T@U) ) (!  (=> (and (and (= (type |j#0@@11|) BoxType) ($IsBox |j#0@@11| Maps._default.MapRemove1Strong$K@@1)) (U_2_bool (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@246 |m#0@@43| |k#0@@34|)) |j#0@@11|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@246 |m#0@@43| |k#0@@34|)) |j#0@@11|) (MapType0Select (|Map#Elements| |m#0@@43|) |j#0@@11|))) :qid |Mapsidfy.74:20| :skolemid |3108| :pattern ( (MapType0Select (|Map#Elements| |m#0@@43|) |j#0@@11|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@246 |m#0@@43| |k#0@@34|)) |j#0@@11|)) :pattern ( (MapType0Select (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@246 |m#0@@43| |k#0@@34|)) |j#0@@11|)) ))) (<= (|Set#Card| (|Map#Domain| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@246 |m#0@@43| |k#0@@34|))) (|Set#Card| (|Map#Domain| |m#0@@43|)))) (<= (|Map#Card| (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@246 |m#0@@43| |k#0@@34|)) (|Map#Card| |m#0@@43|))) ($Is (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@246 |m#0@@43| |k#0@@34|) (TMap Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1)))) :qid |unknown.0:0| :skolemid |3109| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@1 Maps._default.MapRemove1Strong$V@@1 $ly@@246 |m#0@@43| |k#0@@34|)) ))))
(assert (forall ((Maps._default.MapRemove1Strong$K@@2 T@U) (Maps._default.MapRemove1Strong$V@@2 T@U) ($ly@@247 T@U) (|m#0@@44| T@U) (|k#0@@35| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@2) TyType) (= (type Maps._default.MapRemove1Strong$V@@2) TyType)) (= (type $ly@@247) LayerTypeType)) (= (type |m#0@@44|) (MapType BoxType BoxType))) (= (type |k#0@@35|) BoxType)) (and ($Is |m#0@@44| (TMap Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2)) ($IsBox |k#0@@35| Maps._default.MapRemove1Strong$K@@2))) (= (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@247 |m#0@@44| |k#0@@35|) true)) :qid |unknown.0:0| :skolemid |3110| :pattern ( (|Maps.__default.MapRemove1Strong#requires| Maps._default.MapRemove1Strong$K@@2 Maps._default.MapRemove1Strong$V@@2 $ly@@247 |m#0@@44| |k#0@@35|)) )))
(assert  (and (= (type MoreFuel_MapRemove_s._default.MapRemove10) LayerTypeType) (= (type StartFuelAssert_MapRemove_s._default.MapRemove1) LayerTypeType)))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@3 T@U) (Maps._default.MapRemove1Strong$V@@3 T@U) ($ly@@248 T@U) (|m#0@@45| T@U) (|k#0@@36| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@3) TyType) (= (type Maps._default.MapRemove1Strong$V@@3) TyType)) (= (type $ly@@248) LayerTypeType)) (= (type |m#0@@45|) (MapType BoxType BoxType))) (= (type |k#0@@36|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@45| |k#0@@36|) (and ($Is |m#0@@45| (TMap Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3)) ($IsBox |k#0@@36| Maps._default.MapRemove1Strong$K@@3)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@45| |k#0@@36|) (and (and (and (= StartFuel_MapRemove_s._default.MapRemove1 ($LS MoreFuel_MapRemove_s._default.MapRemove10)) (= StartFuelAssert_MapRemove_s._default.MapRemove1 ($LS ($LS MoreFuel_MapRemove_s._default.MapRemove10)))) (= (AsFuelBottom MoreFuel_MapRemove_s._default.MapRemove10) MoreFuel_MapRemove_s._default.MapRemove10)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@248) |m#0@@45| |k#0@@36|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 |m#0@@45| |k#0@@36|))))) :qid |unknown.0:0| :skolemid |3111| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@3 Maps._default.MapRemove1Strong$V@@3 ($LS $ly@@248) |m#0@@45| |k#0@@36|)) ))))
(assert (= (type MoreFuel_MapRemove_s._default.MapRemove11) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@4 T@U) (Maps._default.MapRemove1Strong$V@@4 T@U) ($ly@@249 T@U) (|m#0@@46| T@U) (|k#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@4) TyType) (= (type Maps._default.MapRemove1Strong$V@@4) TyType)) (= (type $ly@@249) LayerTypeType)) (= (type |m#0@@46|) (MapType BoxType BoxType))) (= (type |k#0@@37|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@46|) |k#0@@37|) (and ($Is |m#0@@46| (TMap Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4)) ($IsBox |k#0@@37| Maps._default.MapRemove1Strong$K@@4)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@46|) |k#0@@37|) (and (and (and (= StartFuel_MapRemove_s._default.MapRemove1 ($LS MoreFuel_MapRemove_s._default.MapRemove11)) (= StartFuelAssert_MapRemove_s._default.MapRemove1 ($LS ($LS MoreFuel_MapRemove_s._default.MapRemove11)))) (= (AsFuelBottom MoreFuel_MapRemove_s._default.MapRemove11) MoreFuel_MapRemove_s._default.MapRemove11)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@249) (Lit |m#0@@46|) |k#0@@37|) (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 (Lit |m#0@@46|) |k#0@@37|))))) :qid |unknown.0:0| :weight 3 :skolemid |3112| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@4 Maps._default.MapRemove1Strong$V@@4 ($LS $ly@@249) (Lit |m#0@@46|) |k#0@@37|)) ))))
(assert (= (type MoreFuel_MapRemove_s._default.MapRemove12) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapRemove1Strong$K@@5 T@U) (Maps._default.MapRemove1Strong$V@@5 T@U) ($ly@@250 T@U) (|m#0@@47| T@U) (|k#0@@38| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapRemove1Strong$K@@5) TyType) (= (type Maps._default.MapRemove1Strong$V@@5) TyType)) (= (type $ly@@250) LayerTypeType)) (= (type |m#0@@47|) (MapType BoxType BoxType))) (= (type |k#0@@38|) BoxType)) (or (|Maps.__default.MapRemove1Strong#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@47|) (Lit |k#0@@38|)) (and ($Is |m#0@@47| (TMap Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5)) ($IsBox |k#0@@38| Maps._default.MapRemove1Strong$K@@5)))) (and (|Maps.__default.MapRemove1#canCall| Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@47|) (Lit |k#0@@38|)) (and (and (and (= StartFuel_MapRemove_s._default.MapRemove1 ($LS MoreFuel_MapRemove_s._default.MapRemove12)) (= StartFuelAssert_MapRemove_s._default.MapRemove1 ($LS ($LS MoreFuel_MapRemove_s._default.MapRemove12)))) (= (AsFuelBottom MoreFuel_MapRemove_s._default.MapRemove12) MoreFuel_MapRemove_s._default.MapRemove12)) (= (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@250) (Lit |m#0@@47|) (Lit |k#0@@38|)) (Lit (Maps.__default.MapRemove1 Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 (Lit |m#0@@47|) (Lit |k#0@@38|))))))) :qid |unknown.0:0| :weight 3 :skolemid |3113| :pattern ( (Maps.__default.MapRemove1Strong Maps._default.MapRemove1Strong$K@@5 Maps._default.MapRemove1Strong$V@@5 ($LS $ly@@250) (Lit |m#0@@47|) (Lit |k#0@@38|))) ))))
(assert (forall ((arg0@@560 T@U) (arg1@@263 T@U) (arg2@@182 T@U) (arg3@@133 T@U) (arg4@@104 T@U) ) (! (= (type (Maps.__default.IMapRemove arg0@@560 arg1@@263 arg2@@182 arg3@@133 arg4@@104)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRemove| :pattern ( (Maps.__default.IMapRemove arg0@@560 arg1@@263 arg2@@182 arg3@@133 arg4@@104)) )))
(assert (forall ((Maps._default.IMapRemove$K T@U) (Maps._default.IMapRemove$V T@U) ($ly@@251 T@U) (|m#0@@48| T@U) (|ks#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K) TyType) (= (type Maps._default.IMapRemove$V) TyType)) (= (type $ly@@251) LayerTypeType)) (= (type |m#0@@48|) (IMapType BoxType BoxType))) (= (type |ks#0@@11|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@251) |m#0@@48| |ks#0@@11|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V $ly@@251 |m#0@@48| |ks#0@@11|))) :qid |unknown.0:0| :skolemid |3114| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K Maps._default.IMapRemove$V ($LS $ly@@251) |m#0@@48| |ks#0@@11|)) )))
(assert (forall ((Maps._default.IMapRemove$K@@0 T@U) (Maps._default.IMapRemove$V@@0 T@U) ($ly@@252 T@U) (|m#0@@49| T@U) (|ks#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove$K@@0) TyType) (= (type Maps._default.IMapRemove$V@@0) TyType)) (= (type $ly@@252) LayerTypeType)) (= (type |m#0@@49|) (IMapType BoxType BoxType))) (= (type |ks#0@@12|) (MapType0Type BoxType boolType))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $ly@@252 |m#0@@49| |ks#0@@12|) (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 $LZ |m#0@@49| |ks#0@@12|))) :qid |unknown.0:0| :skolemid |3115| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@0 Maps._default.IMapRemove$V@@0 (AsFuelBottom $ly@@252) |m#0@@49| |ks#0@@12|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@1 T@U) (Maps._default.IMapRemove$V@@1 T@U) ($ly@@253 T@U) (|m#0@@50| T@U) (|ks#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@1) TyType) (= (type Maps._default.IMapRemove$V@@1) TyType)) (= (type $ly@@253) LayerTypeType)) (= (type |m#0@@50|) (IMapType BoxType BoxType))) (= (type |ks#0@@13|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 |m#0@@50| |ks#0@@13|) (and ($Is |m#0@@50| (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1)) ($Is |ks#0@@13| (TISet Maps._default.IMapRemove$K@@1))))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@253 |m#0@@50| |ks#0@@13|)) (|ISet#Difference| (|IMap#Domain| |m#0@@50|) |ks#0@@13|)) (forall ((|j#0@@12| T@U) ) (!  (=> (and (and (= (type |j#0@@12|) BoxType) ($IsBox |j#0@@12| Maps._default.IMapRemove$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@253 |m#0@@50| |ks#0@@13|)) |j#0@@12|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@253 |m#0@@50| |ks#0@@13|)) |j#0@@12|) (MapType0Select (|IMap#Elements| |m#0@@50|) |j#0@@12|))) :qid |Mapsidfy.84:20| :skolemid |3116| :pattern ( (MapType0Select (|IMap#Elements| |m#0@@50|) |j#0@@12|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@253 |m#0@@50| |ks#0@@13|)) |j#0@@12|)) :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@253 |m#0@@50| |ks#0@@13|)) |j#0@@12|)) ))) ($Is (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@253 |m#0@@50| |ks#0@@13|) (TIMap Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1)))) :qid |unknown.0:0| :skolemid |3117| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@1 Maps._default.IMapRemove$V@@1 $ly@@253 |m#0@@50| |ks#0@@13|)) ))))
(assert (forall ((Maps._default.IMapRemove$K@@2 T@U) (Maps._default.IMapRemove$V@@2 T@U) ($ly@@254 T@U) (|m#0@@51| T@U) (|ks#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@2) TyType) (= (type Maps._default.IMapRemove$V@@2) TyType)) (= (type $ly@@254) LayerTypeType)) (= (type |m#0@@51|) (IMapType BoxType BoxType))) (= (type |ks#0@@14|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@51| (TIMap Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2)) ($Is |ks#0@@14| (TISet Maps._default.IMapRemove$K@@2)))) (= (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@254 |m#0@@51| |ks#0@@14|) true)) :qid |unknown.0:0| :skolemid |3118| :pattern ( (|Maps.__default.IMapRemove#requires| Maps._default.IMapRemove$K@@2 Maps._default.IMapRemove$V@@2 $ly@@254 |m#0@@51| |ks#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@3 T@U) (Maps._default.IMapRemove$V@@3 T@U) ($ly@@255 T@U) (|m#0@@52| T@U) (|ks#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@3) TyType) (= (type Maps._default.IMapRemove$V@@3) TyType)) (= (type $ly@@255) LayerTypeType)) (= (type |m#0@@52|) (IMapType BoxType BoxType))) (= (type |ks#0@@15|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 |m#0@@52| |ks#0@@15|) (and ($Is |m#0@@52| (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3)) ($Is |ks#0@@15| (TISet Maps._default.IMapRemove$K@@3))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@255) |m#0@@52| |ks#0@@15|) (|IMap#Glue| (|lambda#106| Maps._default.IMapRemove$K@@3 (|IMap#Domain| |m#0@@52|) |ks#0@@15|) (|lambda#11| (|IMap#Elements| |m#0@@52|)) (TIMap Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3)))) :qid |unknown.0:0| :skolemid |3119| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@3 Maps._default.IMapRemove$V@@3 ($LS $ly@@255) |m#0@@52| |ks#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRemove$K@@4 T@U) (Maps._default.IMapRemove$V@@4 T@U) ($ly@@256 T@U) (|m#0@@53| T@U) (|ks#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove$K@@4) TyType) (= (type Maps._default.IMapRemove$V@@4) TyType)) (= (type $ly@@256) LayerTypeType)) (= (type |m#0@@53|) (IMapType BoxType BoxType))) (= (type |ks#0@@16|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRemove#canCall| Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 (Lit |m#0@@53|) (Lit |ks#0@@16|)) (and ($Is |m#0@@53| (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4)) ($Is |ks#0@@16| (TISet Maps._default.IMapRemove$K@@4))))) (= (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@256) (Lit |m#0@@53|) (Lit |ks#0@@16|)) (|IMap#Glue| (|lambda#106| Maps._default.IMapRemove$K@@4 (|IMap#Domain| |m#0@@53|) (Lit |ks#0@@16|)) (|lambda#11| (|IMap#Elements| (Lit |m#0@@53|))) (TIMap Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |3120| :pattern ( (Maps.__default.IMapRemove Maps._default.IMapRemove$K@@4 Maps._default.IMapRemove$V@@4 ($LS $ly@@256) (Lit |m#0@@53|) (Lit |ks#0@@16|))) ))))
(assert (forall ((arg0@@561 T@U) (arg1@@264 T@U) (arg2@@183 T@U) (arg3@@134 T@U) (arg4@@105 T@U) ) (! (= (type (Maps.__default.IMapRemove1 arg0@@561 arg1@@264 arg2@@183 arg3@@134 arg4@@105)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRemove1| :pattern ( (Maps.__default.IMapRemove1 arg0@@561 arg1@@264 arg2@@183 arg3@@134 arg4@@105)) )))
(assert (forall ((Maps._default.IMapRemove1$K T@U) (Maps._default.IMapRemove1$V T@U) ($ly@@257 T@U) (|m#0@@54| T@U) (|k#0@@39| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K) TyType) (= (type Maps._default.IMapRemove1$V) TyType)) (= (type $ly@@257) LayerTypeType)) (= (type |m#0@@54|) (IMapType BoxType BoxType))) (= (type |k#0@@39|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@257) |m#0@@54| |k#0@@39|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V $ly@@257 |m#0@@54| |k#0@@39|))) :qid |unknown.0:0| :skolemid |3121| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K Maps._default.IMapRemove1$V ($LS $ly@@257) |m#0@@54| |k#0@@39|)) )))
(assert (forall ((Maps._default.IMapRemove1$K@@0 T@U) (Maps._default.IMapRemove1$V@@0 T@U) ($ly@@258 T@U) (|m#0@@55| T@U) (|k#0@@40| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRemove1$K@@0) TyType) (= (type Maps._default.IMapRemove1$V@@0) TyType)) (= (type $ly@@258) LayerTypeType)) (= (type |m#0@@55|) (IMapType BoxType BoxType))) (= (type |k#0@@40|) BoxType)) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $ly@@258 |m#0@@55| |k#0@@40|) (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 $LZ |m#0@@55| |k#0@@40|))) :qid |unknown.0:0| :skolemid |3122| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@0 Maps._default.IMapRemove1$V@@0 (AsFuelBottom $ly@@258) |m#0@@55| |k#0@@40|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@1 T@U) (Maps._default.IMapRemove1$V@@1 T@U) ($ly@@259 T@U) (|m#0@@56| T@U) (|k#0@@41| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@1) TyType) (= (type Maps._default.IMapRemove1$V@@1) TyType)) (= (type $ly@@259) LayerTypeType)) (= (type |m#0@@56|) (IMapType BoxType BoxType))) (= (type |k#0@@41|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 |m#0@@56| |k#0@@41|) (and ($Is |m#0@@56| (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1)) ($IsBox |k#0@@41| Maps._default.IMapRemove1$K@@1)))) (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@259 |m#0@@56| |k#0@@41|)) (|ISet#Difference| (|IMap#Domain| |m#0@@56|) (|ISet#UnionOne| (|ISet#Empty| BoxType) |k#0@@41|))) (forall ((|j#0@@13| T@U) ) (!  (=> (and (and (= (type |j#0@@13|) BoxType) ($IsBox |j#0@@13| Maps._default.IMapRemove1$K@@1)) (U_2_bool (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@259 |m#0@@56| |k#0@@41|)) |j#0@@13|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@259 |m#0@@56| |k#0@@41|)) |j#0@@13|) (MapType0Select (|IMap#Elements| |m#0@@56|) |j#0@@13|))) :qid |Mapsidfy.91:20| :skolemid |3123| :pattern ( (MapType0Select (|IMap#Elements| |m#0@@56|) |j#0@@13|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@259 |m#0@@56| |k#0@@41|)) |j#0@@13|)) :pattern ( (MapType0Select (|IMap#Domain| (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@259 |m#0@@56| |k#0@@41|)) |j#0@@13|)) ))) ($Is (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@259 |m#0@@56| |k#0@@41|) (TIMap Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1)))) :qid |unknown.0:0| :skolemid |3124| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@1 Maps._default.IMapRemove1$V@@1 $ly@@259 |m#0@@56| |k#0@@41|)) ))))
(assert (forall ((Maps._default.IMapRemove1$K@@2 T@U) (Maps._default.IMapRemove1$V@@2 T@U) ($ly@@260 T@U) (|m#0@@57| T@U) (|k#0@@42| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@2) TyType) (= (type Maps._default.IMapRemove1$V@@2) TyType)) (= (type $ly@@260) LayerTypeType)) (= (type |m#0@@57|) (IMapType BoxType BoxType))) (= (type |k#0@@42|) BoxType)) (and ($Is |m#0@@57| (TIMap Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2)) ($IsBox |k#0@@42| Maps._default.IMapRemove1$K@@2))) (= (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@260 |m#0@@57| |k#0@@42|) true)) :qid |unknown.0:0| :skolemid |3125| :pattern ( (|Maps.__default.IMapRemove1#requires| Maps._default.IMapRemove1$K@@2 Maps._default.IMapRemove1$V@@2 $ly@@260 |m#0@@57| |k#0@@42|)) )))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@3 T@U) (Maps._default.IMapRemove1$V@@3 T@U) ($ly@@261 T@U) (|m#0@@58| T@U) (|k#0@@43| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@3) TyType) (= (type Maps._default.IMapRemove1$V@@3) TyType)) (= (type $ly@@261) LayerTypeType)) (= (type |m#0@@58|) (IMapType BoxType BoxType))) (= (type |k#0@@43|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 |m#0@@58| |k#0@@43|) (and ($Is |m#0@@58| (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3)) ($IsBox |k#0@@43| Maps._default.IMapRemove1$K@@3)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@261) |m#0@@58| |k#0@@43|) (|IMap#Glue| (|lambda#100| Maps._default.IMapRemove1$K@@3 (|IMap#Domain| |m#0@@58|) |k#0@@43|) (|lambda#11| (|IMap#Elements| |m#0@@58|)) (TIMap Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3)))) :qid |unknown.0:0| :skolemid |3126| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@3 Maps._default.IMapRemove1$V@@3 ($LS $ly@@261) |m#0@@58| |k#0@@43|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRemove1$K@@4 T@U) (Maps._default.IMapRemove1$V@@4 T@U) ($ly@@262 T@U) (|m#0@@59| T@U) (|k#0@@44| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapRemove1$K@@4) TyType) (= (type Maps._default.IMapRemove1$V@@4) TyType)) (= (type $ly@@262) LayerTypeType)) (= (type |m#0@@59|) (IMapType BoxType BoxType))) (= (type |k#0@@44|) BoxType)) (or (|Maps.__default.IMapRemove1#canCall| Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 (Lit |m#0@@59|) (Lit |k#0@@44|)) (and ($Is |m#0@@59| (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4)) ($IsBox |k#0@@44| Maps._default.IMapRemove1$K@@4)))) (= (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@262) (Lit |m#0@@59|) (Lit |k#0@@44|)) (|IMap#Glue| (|lambda#100| Maps._default.IMapRemove1$K@@4 (|IMap#Domain| |m#0@@59|) |k#0@@44|) (|lambda#11| (|IMap#Elements| (Lit |m#0@@59|))) (TIMap Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |3127| :pattern ( (Maps.__default.IMapRemove1 Maps._default.IMapRemove1$K@@4 Maps._default.IMapRemove1$V@@4 ($LS $ly@@262) (Lit |m#0@@59|) (Lit |k#0@@44|))) ))))
(assert (forall ((arg0@@562 T@U) (arg1@@265 T@U) (arg2@@184 T@U) (arg3@@135 T@U) ) (! (= (type (Maps.__default.MapRestrict arg0@@562 arg1@@265 arg2@@184 arg3@@135)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapRestrict| :pattern ( (Maps.__default.MapRestrict arg0@@562 arg1@@265 arg2@@184 arg3@@135)) )))
(assert  (=> true (forall ((Maps._default.MapRestrict$K T@U) (Maps._default.MapRestrict$V T@U) (|m#0@@60| T@U) (|ks#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K) TyType) (= (type Maps._default.MapRestrict$V) TyType)) (= (type |m#0@@60|) (MapType BoxType BoxType))) (= (type |ks#0@@17|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@60| |ks#0@@17|) (and ($Is |m#0@@60| (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V)) ($Is |ks#0@@17| (TSet Maps._default.MapRestrict$K))))) ($Is (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@60| |ks#0@@17|) (TMap Maps._default.MapRestrict$K Maps._default.MapRestrict$V))) :qid |unknown.0:0| :skolemid |3128| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K Maps._default.MapRestrict$V |m#0@@60| |ks#0@@17|)) ))))
(assert (forall ((Maps._default.MapRestrict$K@@0 T@U) (Maps._default.MapRestrict$V@@0 T@U) (|m#0@@61| T@U) (|ks#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@0) TyType) (= (type Maps._default.MapRestrict$V@@0) TyType)) (= (type |m#0@@61|) (MapType BoxType BoxType))) (= (type |ks#0@@18|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@61| (TMap Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0)) ($Is |ks#0@@18| (TSet Maps._default.MapRestrict$K@@0)))) (= (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@61| |ks#0@@18|) true)) :qid |unknown.0:0| :skolemid |3129| :pattern ( (|Maps.__default.MapRestrict#requires| Maps._default.MapRestrict$K@@0 Maps._default.MapRestrict$V@@0 |m#0@@61| |ks#0@@18|)) )))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@1 T@U) (Maps._default.MapRestrict$V@@1 T@U) (|m#0@@62| T@U) (|ks#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@1) TyType) (= (type Maps._default.MapRestrict$V@@1) TyType)) (= (type |m#0@@62|) (MapType BoxType BoxType))) (= (type |ks#0@@19|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@62| |ks#0@@19|) (and ($Is |m#0@@62| (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1)) ($Is |ks#0@@19| (TSet Maps._default.MapRestrict$K@@1))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@62| |ks#0@@19|) (|Map#Glue| (|lambda#10| Maps._default.MapRestrict$K@@1 |ks#0@@19| (|Map#Domain| |m#0@@62|)) (|lambda#11| (|Map#Elements| |m#0@@62|)) (TMap Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |3130| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@1 Maps._default.MapRestrict$V@@1 |m#0@@62| |ks#0@@19|)) ))))
(assert  (=> true (forall ((Maps._default.MapRestrict$K@@2 T@U) (Maps._default.MapRestrict$V@@2 T@U) (|m#0@@63| T@U) (|ks#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapRestrict$K@@2) TyType) (= (type Maps._default.MapRestrict$V@@2) TyType)) (= (type |m#0@@63|) (MapType BoxType BoxType))) (= (type |ks#0@@20|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapRestrict#canCall| Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@63|) (Lit |ks#0@@20|)) (and ($Is |m#0@@63| (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2)) ($Is |ks#0@@20| (TSet Maps._default.MapRestrict$K@@2))))) (= (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@63|) (Lit |ks#0@@20|)) (|Map#Glue| (|lambda#10| Maps._default.MapRestrict$K@@2 (Lit |ks#0@@20|) (|Map#Domain| |m#0@@63|)) (|lambda#11| (|Map#Elements| (Lit |m#0@@63|))) (TMap Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |3131| :pattern ( (Maps.__default.MapRestrict Maps._default.MapRestrict$K@@2 Maps._default.MapRestrict$V@@2 (Lit |m#0@@63|) (Lit |ks#0@@20|))) ))))
(assert (forall ((arg0@@563 T@U) (arg1@@266 T@U) (arg2@@185 T@U) (arg3@@136 T@U) ) (! (= (type (Maps.__default.MapIRestrict arg0@@563 arg1@@266 arg2@@185 arg3@@136)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapIRestrict| :pattern ( (Maps.__default.MapIRestrict arg0@@563 arg1@@266 arg2@@185 arg3@@136)) )))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K T@U) (Maps._default.MapIRestrict$V T@U) (|m#0@@64| T@U) (|ks#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K) TyType) (= (type Maps._default.MapIRestrict$V) TyType)) (= (type |m#0@@64|) (MapType BoxType BoxType))) (= (type |ks#0@@21|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@64| |ks#0@@21|) (and ($Is |m#0@@64| (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V)) ($Is |ks#0@@21| (TISet Maps._default.MapIRestrict$K))))) ($Is (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@64| |ks#0@@21|) (TMap Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V))) :qid |unknown.0:0| :skolemid |3132| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K Maps._default.MapIRestrict$V |m#0@@64| |ks#0@@21|)) ))))
(assert (forall ((Maps._default.MapIRestrict$K@@0 T@U) (Maps._default.MapIRestrict$V@@0 T@U) (|m#0@@65| T@U) (|ks#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@0) TyType) (= (type Maps._default.MapIRestrict$V@@0) TyType)) (= (type |m#0@@65|) (MapType BoxType BoxType))) (= (type |ks#0@@22|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@65| (TMap Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0)) ($Is |ks#0@@22| (TISet Maps._default.MapIRestrict$K@@0)))) (= (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@65| |ks#0@@22|) true)) :qid |unknown.0:0| :skolemid |3133| :pattern ( (|Maps.__default.MapIRestrict#requires| Maps._default.MapIRestrict$K@@0 Maps._default.MapIRestrict$V@@0 |m#0@@65| |ks#0@@22|)) )))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@1 T@U) (Maps._default.MapIRestrict$V@@1 T@U) (|m#0@@66| T@U) (|ks#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@1) TyType) (= (type Maps._default.MapIRestrict$V@@1) TyType)) (= (type |m#0@@66|) (MapType BoxType BoxType))) (= (type |ks#0@@23|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@66| |ks#0@@23|) (and ($Is |m#0@@66| (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1)) ($Is |ks#0@@23| (TISet Maps._default.MapIRestrict$K@@1))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@66| |ks#0@@23|) (|Map#Glue| (|lambda#10| Maps._default.MapIRestrict$K@@1 (|Map#Domain| |m#0@@66|) |ks#0@@23|) (|lambda#11| (|Map#Elements| |m#0@@66|)) (TMap Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |3134| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@1 Maps._default.MapIRestrict$V@@1 |m#0@@66| |ks#0@@23|)) ))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@2 T@U) (Maps._default.MapIRestrict$V@@2 T@U) (|m#0@@67| T@U) (|ks#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@2) TyType) (= (type Maps._default.MapIRestrict$V@@2) TyType)) (= (type |m#0@@67|) (MapType BoxType BoxType))) (= (type |ks#0@@24|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@67|) |ks#0@@24|) (and ($Is |m#0@@67| (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2)) ($Is |ks#0@@24| (TISet Maps._default.MapIRestrict$K@@2))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@67|) |ks#0@@24|) (|Map#Glue| (|lambda#10| Maps._default.MapIRestrict$K@@2 (|Map#Domain| |m#0@@67|) |ks#0@@24|) (|lambda#11| (|Map#Elements| (Lit |m#0@@67|))) (TMap Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |3135| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@2 Maps._default.MapIRestrict$V@@2 (Lit |m#0@@67|) |ks#0@@24|)) ))))
(assert  (=> true (forall ((Maps._default.MapIRestrict$K@@3 T@U) (Maps._default.MapIRestrict$V@@3 T@U) (|m#0@@68| T@U) (|ks#0@@25| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapIRestrict$K@@3) TyType) (= (type Maps._default.MapIRestrict$V@@3) TyType)) (= (type |m#0@@68|) (MapType BoxType BoxType))) (= (type |ks#0@@25|) (MapType0Type BoxType boolType))) (or (|Maps.__default.MapIRestrict#canCall| Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@68|) (Lit |ks#0@@25|)) (and ($Is |m#0@@68| (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3)) ($Is |ks#0@@25| (TISet Maps._default.MapIRestrict$K@@3))))) (= (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@68|) (Lit |ks#0@@25|)) (|Map#Glue| (|lambda#10| Maps._default.MapIRestrict$K@@3 (|Map#Domain| |m#0@@68|) (Lit |ks#0@@25|)) (|lambda#11| (|Map#Elements| (Lit |m#0@@68|))) (TMap Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3)))) :qid |unknown.0:0| :weight 3 :skolemid |3136| :pattern ( (Maps.__default.MapIRestrict Maps._default.MapIRestrict$K@@3 Maps._default.MapIRestrict$V@@3 (Lit |m#0@@68|) (Lit |ks#0@@25|))) ))))
(assert (forall ((arg0@@564 T@U) (arg1@@267 T@U) (arg2@@186 T@U) (arg3@@137 T@U) ) (! (= (type (Maps.__default.IMapRestrict arg0@@564 arg1@@267 arg2@@186 arg3@@137)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapRestrict| :pattern ( (Maps.__default.IMapRestrict arg0@@564 arg1@@267 arg2@@186 arg3@@137)) )))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K T@U) (Maps._default.IMapRestrict$V T@U) (|m#0@@69| T@U) (|ks#0@@26| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K) TyType) (= (type Maps._default.IMapRestrict$V) TyType)) (= (type |m#0@@69|) (IMapType BoxType BoxType))) (= (type |ks#0@@26|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@69| |ks#0@@26|) (and ($Is |m#0@@69| (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V)) ($Is |ks#0@@26| (TISet Maps._default.IMapRestrict$K))))) ($Is (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@69| |ks#0@@26|) (TIMap Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V))) :qid |unknown.0:0| :skolemid |3137| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K Maps._default.IMapRestrict$V |m#0@@69| |ks#0@@26|)) ))))
(assert (forall ((Maps._default.IMapRestrict$K@@0 T@U) (Maps._default.IMapRestrict$V@@0 T@U) (|m#0@@70| T@U) (|ks#0@@27| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@0) TyType) (= (type Maps._default.IMapRestrict$V@@0) TyType)) (= (type |m#0@@70|) (IMapType BoxType BoxType))) (= (type |ks#0@@27|) (MapType0Type BoxType boolType))) (and ($Is |m#0@@70| (TIMap Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0)) ($Is |ks#0@@27| (TISet Maps._default.IMapRestrict$K@@0)))) (= (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@70| |ks#0@@27|) true)) :qid |unknown.0:0| :skolemid |3138| :pattern ( (|Maps.__default.IMapRestrict#requires| Maps._default.IMapRestrict$K@@0 Maps._default.IMapRestrict$V@@0 |m#0@@70| |ks#0@@27|)) )))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@1 T@U) (Maps._default.IMapRestrict$V@@1 T@U) (|m#0@@71| T@U) (|ks#0@@28| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@1) TyType) (= (type Maps._default.IMapRestrict$V@@1) TyType)) (= (type |m#0@@71|) (IMapType BoxType BoxType))) (= (type |ks#0@@28|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@71| |ks#0@@28|) (and ($Is |m#0@@71| (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1)) ($Is |ks#0@@28| (TISet Maps._default.IMapRestrict$K@@1))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@71| |ks#0@@28|) (|IMap#Glue| (|lambda#10| Maps._default.IMapRestrict$K@@1 |ks#0@@28| (|IMap#Domain| |m#0@@71|)) (|lambda#11| (|IMap#Elements| |m#0@@71|)) (TIMap Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1)))) :qid |unknown.0:0| :skolemid |3139| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@1 Maps._default.IMapRestrict$V@@1 |m#0@@71| |ks#0@@28|)) ))))
(assert  (=> true (forall ((Maps._default.IMapRestrict$K@@2 T@U) (Maps._default.IMapRestrict$V@@2 T@U) (|m#0@@72| T@U) (|ks#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapRestrict$K@@2) TyType) (= (type Maps._default.IMapRestrict$V@@2) TyType)) (= (type |m#0@@72|) (IMapType BoxType BoxType))) (= (type |ks#0@@29|) (MapType0Type BoxType boolType))) (or (|Maps.__default.IMapRestrict#canCall| Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@72|) (Lit |ks#0@@29|)) (and ($Is |m#0@@72| (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2)) ($Is |ks#0@@29| (TISet Maps._default.IMapRestrict$K@@2))))) (= (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@72|) (Lit |ks#0@@29|)) (|IMap#Glue| (|lambda#10| Maps._default.IMapRestrict$K@@2 (Lit |ks#0@@29|) (|IMap#Domain| |m#0@@72|)) (|lambda#11| (|IMap#Elements| (Lit |m#0@@72|))) (TIMap Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |3140| :pattern ( (Maps.__default.IMapRestrict Maps._default.IMapRestrict$K@@2 Maps._default.IMapRestrict$V@@2 (Lit |m#0@@72|) (Lit |ks#0@@29|))) ))))
(assert (forall ((arg0@@565 T@U) (arg1@@268 T@U) (arg2@@187 T@U) (arg3@@138 T@U) (arg4@@106 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion arg0@@565 arg1@@268 arg2@@187 arg3@@138 arg4@@106)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapDisjointUnion| :pattern ( (Maps.__default.MapDisjointUnion arg0@@565 arg1@@268 arg2@@187 arg3@@138 arg4@@106)) )))
(assert (forall ((Maps._default.MapDisjointUnion$U T@U) (Maps._default.MapDisjointUnion$T T@U) ($ly@@263 T@U) (|mapa#0| T@U) (|mapb#0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U) TyType) (= (type Maps._default.MapDisjointUnion$T) TyType)) (= (type $ly@@263) LayerTypeType)) (= (type |mapa#0|) (MapType BoxType BoxType))) (= (type |mapb#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@263) |mapa#0| |mapb#0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T $ly@@263 |mapa#0| |mapb#0|))) :qid |unknown.0:0| :skolemid |3141| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U Maps._default.MapDisjointUnion$T ($LS $ly@@263) |mapa#0| |mapb#0|)) )))
(assert (forall ((Maps._default.MapDisjointUnion$U@@0 T@U) (Maps._default.MapDisjointUnion$T@@0 T@U) ($ly@@264 T@U) (|mapa#0@@0| T@U) (|mapb#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@0) TyType) (= (type Maps._default.MapDisjointUnion$T@@0) TyType)) (= (type $ly@@264) LayerTypeType)) (= (type |mapa#0@@0|) (MapType BoxType BoxType))) (= (type |mapb#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $ly@@264 |mapa#0@@0| |mapb#0@@0|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 $LZ |mapa#0@@0| |mapb#0@@0|))) :qid |unknown.0:0| :skolemid |3142| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@0 Maps._default.MapDisjointUnion$T@@0 (AsFuelBottom $ly@@264) |mapa#0@@0| |mapb#0@@0|)) )))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@1 T@U) (Maps._default.MapDisjointUnion$T@@1 T@U) ($ly@@265 T@U) (|mapa#0@@1| T@U) (|mapb#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@1) TyType) (= (type Maps._default.MapDisjointUnion$T@@1) TyType)) (= (type $ly@@265) LayerTypeType)) (= (type |mapa#0@@1|) (MapType BoxType BoxType))) (= (type |mapb#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 |mapa#0@@1| |mapb#0@@1|) (and (and ($Is |mapa#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)) ($Is |mapb#0@@1| (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))))) (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@265 |mapa#0@@1| |mapb#0@@1|)) (|Set#Union| (|Map#Domain| |mapa#0@@1|) (|Map#Domain| |mapb#0@@1|))) (forall ((|k#0@@45| T@U) ) (!  (=> (and (and (= (type |k#0@@45|) BoxType) ($IsBox |k#0@@45| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#0@@45|))) (= (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#0@@45|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@265 |mapa#0@@1| |mapb#0@@1|)) |k#0@@45|))) :qid |Mapsidfy.112:18| :skolemid |3143| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@265 |mapa#0@@1| |mapb#0@@1|)) |k#0@@45|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@1|) |k#0@@45|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@1|) |k#0@@45|)) ))) (forall ((|k#1@@0| T@U) ) (!  (=> (and (and (= (type |k#1@@0|) BoxType) ($IsBox |k#1@@0| Maps._default.MapDisjointUnion$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#1@@0|))) (= (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#1@@0|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@265 |mapa#0@@1| |mapb#0@@1|)) |k#1@@0|))) :qid |Mapsidfy.113:18| :skolemid |3144| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@265 |mapa#0@@1| |mapb#0@@1|)) |k#1@@0|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@1|) |k#1@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@1|) |k#1@@0|)) ))) ($Is (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@265 |mapa#0@@1| |mapb#0@@1|) (TMap Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1)))) :qid |unknown.0:0| :skolemid |3145| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@1 Maps._default.MapDisjointUnion$T@@1 $ly@@265 |mapa#0@@1| |mapb#0@@1|)) ))))
(assert (forall ((Maps._default.MapDisjointUnion$U@@2 T@U) (Maps._default.MapDisjointUnion$T@@2 T@U) ($ly@@266 T@U) (|mapa#0@@2| T@U) (|mapb#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@2) TyType) (= (type Maps._default.MapDisjointUnion$T@@2) TyType)) (= (type $ly@@266) LayerTypeType)) (= (type |mapa#0@@2|) (MapType BoxType BoxType))) (= (type |mapb#0@@2|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)) ($Is |mapb#0@@2| (TMap Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2)))) (= (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@266 |mapa#0@@2| |mapb#0@@2|) (|Set#Disjoint| (|Map#Domain| |mapa#0@@2|) (|Map#Domain| |mapb#0@@2|)))) :qid |unknown.0:0| :skolemid |3146| :pattern ( (|Maps.__default.MapDisjointUnion#requires| Maps._default.MapDisjointUnion$U@@2 Maps._default.MapDisjointUnion$T@@2 $ly@@266 |mapa#0@@2| |mapb#0@@2|)) )))
(assert (forall ((arg0@@566 T@U) (arg1@@269 T@U) (arg2@@188 T@U) ) (! (= (type (|lambda#133| arg0@@566 arg1@@269 arg2@@188)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#133| :pattern ( (|lambda#133| arg0@@566 arg1@@269 arg2@@188)) )))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@3 T@U) (Maps._default.MapDisjointUnion$T@@3 T@U) ($ly@@267 T@U) (|mapa#0@@3| T@U) (|mapb#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@3) TyType) (= (type Maps._default.MapDisjointUnion$T@@3) TyType)) (= (type $ly@@267) LayerTypeType)) (= (type |mapa#0@@3|) (MapType BoxType BoxType))) (= (type |mapb#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 |mapa#0@@3| |mapb#0@@3|) (and (and ($Is |mapa#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3)) ($Is |mapb#0@@3| (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3))) (|Set#Disjoint| (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@267) |mapa#0@@3| |mapb#0@@3|) (|Map#Glue| (|lambda#92| Maps._default.MapDisjointUnion$U@@3 (|Set#Union| (|Map#Domain| |mapa#0@@3|) (|Map#Domain| |mapb#0@@3|))) (|lambda#133| (|Map#Domain| |mapa#0@@3|) (|Map#Elements| |mapa#0@@3|) (|Map#Elements| |mapb#0@@3|)) (TMap Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3)))) :qid |unknown.0:0| :skolemid |3147| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@3 Maps._default.MapDisjointUnion$T@@3 ($LS $ly@@267) |mapa#0@@3| |mapb#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion$U@@4 T@U) (Maps._default.MapDisjointUnion$T@@4 T@U) ($ly@@268 T@U) (|mapa#0@@4| T@U) (|mapb#0@@4| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion$U@@4) TyType) (= (type Maps._default.MapDisjointUnion$T@@4) TyType)) (= (type $ly@@268) LayerTypeType)) (= (type |mapa#0@@4|) (MapType BoxType BoxType))) (= (type |mapb#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion#canCall| Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (and (and ($Is |mapa#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4)) ($Is |mapb#0@@4| (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@4|)) (|Map#Domain| (Lit |mapb#0@@4|)))))) (= (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@268) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|)) (|Map#Glue| (|lambda#92| Maps._default.MapDisjointUnion$U@@4 (|Set#Union| (|Map#Domain| (Lit |mapa#0@@4|)) (|Map#Domain| (Lit |mapb#0@@4|)))) (|lambda#133| (|Map#Domain| |mapa#0@@4|) (|Map#Elements| (Lit |mapa#0@@4|)) (|Map#Elements| (Lit |mapb#0@@4|))) (TMap Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |3148| :pattern ( (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion$U@@4 Maps._default.MapDisjointUnion$T@@4 ($LS $ly@@268) (Lit |mapa#0@@4|) (Lit |mapb#0@@4|))) ))))
(assert (forall ((arg0@@567 T@U) (arg1@@270 T@U) (arg2@@189 T@U) (arg3@@139 T@U) (arg4@@107 T@U) ) (! (= (type (Maps.__default.MapUnionPreferA arg0@@567 arg1@@270 arg2@@189 arg3@@139 arg4@@107)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnionPreferA| :pattern ( (Maps.__default.MapUnionPreferA arg0@@567 arg1@@270 arg2@@189 arg3@@139 arg4@@107)) )))
(assert (forall ((Maps._default.MapUnionPreferA$U T@U) (Maps._default.MapUnionPreferA$T T@U) ($ly@@269 T@U) (|mapa#0@@5| T@U) (|mapb#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U) TyType) (= (type Maps._default.MapUnionPreferA$T) TyType)) (= (type $ly@@269) LayerTypeType)) (= (type |mapa#0@@5|) (MapType BoxType BoxType))) (= (type |mapb#0@@5|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@269) |mapa#0@@5| |mapb#0@@5|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T $ly@@269 |mapa#0@@5| |mapb#0@@5|))) :qid |unknown.0:0| :skolemid |3149| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U Maps._default.MapUnionPreferA$T ($LS $ly@@269) |mapa#0@@5| |mapb#0@@5|)) )))
(assert (forall ((Maps._default.MapUnionPreferA$U@@0 T@U) (Maps._default.MapUnionPreferA$T@@0 T@U) ($ly@@270 T@U) (|mapa#0@@6| T@U) (|mapb#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@0) TyType) (= (type Maps._default.MapUnionPreferA$T@@0) TyType)) (= (type $ly@@270) LayerTypeType)) (= (type |mapa#0@@6|) (MapType BoxType BoxType))) (= (type |mapb#0@@6|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $ly@@270 |mapa#0@@6| |mapb#0@@6|) (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 $LZ |mapa#0@@6| |mapb#0@@6|))) :qid |unknown.0:0| :skolemid |3150| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@0 Maps._default.MapUnionPreferA$T@@0 (AsFuelBottom $ly@@270) |mapa#0@@6| |mapb#0@@6|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@1 T@U) (Maps._default.MapUnionPreferA$T@@1 T@U) ($ly@@271 T@U) (|mapa#0@@7| T@U) (|mapb#0@@7| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@1) TyType) (= (type Maps._default.MapUnionPreferA$T@@1) TyType)) (= (type $ly@@271) LayerTypeType)) (= (type |mapa#0@@7|) (MapType BoxType BoxType))) (= (type |mapb#0@@7|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 |mapa#0@@7| |mapb#0@@7|) (and ($Is |mapa#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1)) ($Is |mapb#0@@7| (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@271 |mapa#0@@7| |mapb#0@@7|)) (|Set#Union| (|Map#Domain| |mapa#0@@7|) (|Map#Domain| |mapb#0@@7|))) (forall ((|k#0@@46| T@U) ) (!  (=> (and (and (= (type |k#0@@46|) BoxType) ($IsBox |k#0@@46| Maps._default.MapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#0@@46|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@271 |mapa#0@@7| |mapb#0@@7|)) |k#0@@46|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#0@@46|))) :qid |Mapsidfy.122:20| :skolemid |3151| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#0@@46|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@271 |mapa#0@@7| |mapb#0@@7|)) |k#0@@46|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#0@@46|)) ))) (forall ((|k#1@@1| T@U) ) (!  (=> (and (and (= (type |k#1@@1|) BoxType) ($IsBox |k#1@@1| Maps._default.MapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|Set#Difference| (|Map#Domain| |mapb#0@@7|) (|Map#Domain| |mapa#0@@7|)) |k#1@@1|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@271 |mapa#0@@7| |mapb#0@@7|)) |k#1@@1|) (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#1@@1|))) :qid |Mapsidfy.123:20| :skolemid |3152| :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@7|) |k#1@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@271 |mapa#0@@7| |mapb#0@@7|)) |k#1@@1|)) :pattern ( (MapType0Select (|Set#Difference| (|Map#Domain| |mapb#0@@7|) (|Map#Domain| |mapa#0@@7|)) |k#1@@1|)) ))) (forall ((|k#2| T@U) ) (!  (=> (and (and (= (type |k#2|) BoxType) ($IsBox |k#2| Maps._default.MapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#2|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#2|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@271 |mapa#0@@7| |mapb#0@@7|)) |k#2|) (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#2|))) :qid |Mapsidfy.124:20| :skolemid |3153| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@7|) |k#2|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@271 |mapa#0@@7| |mapb#0@@7|)) |k#2|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@7|) |k#2|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@7|) |k#2|)) ))) ($Is (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@271 |mapa#0@@7| |mapb#0@@7|) (TMap Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1)))) :qid |unknown.0:0| :skolemid |3154| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@1 Maps._default.MapUnionPreferA$T@@1 $ly@@271 |mapa#0@@7| |mapb#0@@7|)) ))))
(assert (forall ((Maps._default.MapUnionPreferA$U@@2 T@U) (Maps._default.MapUnionPreferA$T@@2 T@U) ($ly@@272 T@U) (|mapa#0@@8| T@U) (|mapb#0@@8| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@2) TyType) (= (type Maps._default.MapUnionPreferA$T@@2) TyType)) (= (type $ly@@272) LayerTypeType)) (= (type |mapa#0@@8|) (MapType BoxType BoxType))) (= (type |mapb#0@@8|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)) ($Is |mapb#0@@8| (TMap Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2)))) (= (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@272 |mapa#0@@8| |mapb#0@@8|) true)) :qid |unknown.0:0| :skolemid |3155| :pattern ( (|Maps.__default.MapUnionPreferA#requires| Maps._default.MapUnionPreferA$U@@2 Maps._default.MapUnionPreferA$T@@2 $ly@@272 |mapa#0@@8| |mapb#0@@8|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@3 T@U) (Maps._default.MapUnionPreferA$T@@3 T@U) ($ly@@273 T@U) (|mapa#0@@9| T@U) (|mapb#0@@9| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@3) TyType) (= (type Maps._default.MapUnionPreferA$T@@3) TyType)) (= (type $ly@@273) LayerTypeType)) (= (type |mapa#0@@9|) (MapType BoxType BoxType))) (= (type |mapb#0@@9|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 |mapa#0@@9| |mapb#0@@9|) (and ($Is |mapa#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3)) ($Is |mapb#0@@9| (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@273) |mapa#0@@9| |mapb#0@@9|) (|Map#Glue| (|lambda#92| Maps._default.MapUnionPreferA$U@@3 (|Set#Union| (|Map#Domain| |mapa#0@@9|) (|Map#Domain| |mapb#0@@9|))) (|lambda#133| (|Map#Domain| |mapa#0@@9|) (|Map#Elements| |mapa#0@@9|) (|Map#Elements| |mapb#0@@9|)) (TMap Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3)))) :qid |unknown.0:0| :skolemid |3156| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@3 Maps._default.MapUnionPreferA$T@@3 ($LS $ly@@273) |mapa#0@@9| |mapb#0@@9|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferA$U@@4 T@U) (Maps._default.MapUnionPreferA$T@@4 T@U) ($ly@@274 T@U) (|mapa#0@@10| T@U) (|mapb#0@@10| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferA$U@@4) TyType) (= (type Maps._default.MapUnionPreferA$T@@4) TyType)) (= (type $ly@@274) LayerTypeType)) (= (type |mapa#0@@10|) (MapType BoxType BoxType))) (= (type |mapb#0@@10|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (and ($Is |mapa#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4)) ($Is |mapb#0@@10| (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4))))) (= (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@274) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|)) (|Map#Glue| (|lambda#92| Maps._default.MapUnionPreferA$U@@4 (|Set#Union| (|Map#Domain| (Lit |mapa#0@@10|)) (|Map#Domain| (Lit |mapb#0@@10|)))) (|lambda#133| (|Map#Domain| |mapa#0@@10|) (|Map#Elements| (Lit |mapa#0@@10|)) (|Map#Elements| (Lit |mapb#0@@10|))) (TMap Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |3157| :pattern ( (Maps.__default.MapUnionPreferA Maps._default.MapUnionPreferA$U@@4 Maps._default.MapUnionPreferA$T@@4 ($LS $ly@@274) (Lit |mapa#0@@10|) (Lit |mapb#0@@10|))) ))))
(assert (forall ((arg0@@568 T@U) (arg1@@271 T@U) (arg2@@190 T@U) (arg3@@140 T@U) (arg4@@108 T@U) ) (! (= (type (Maps.__default.MapUnionPreferB arg0@@568 arg1@@271 arg2@@190 arg3@@140 arg4@@108)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnionPreferB| :pattern ( (Maps.__default.MapUnionPreferB arg0@@568 arg1@@271 arg2@@190 arg3@@140 arg4@@108)) )))
(assert (forall ((Maps._default.MapUnionPreferB$U T@U) (Maps._default.MapUnionPreferB$T T@U) ($ly@@275 T@U) (|mapa#0@@11| T@U) (|mapb#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U) TyType) (= (type Maps._default.MapUnionPreferB$T) TyType)) (= (type $ly@@275) LayerTypeType)) (= (type |mapa#0@@11|) (MapType BoxType BoxType))) (= (type |mapb#0@@11|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@275) |mapa#0@@11| |mapb#0@@11|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T $ly@@275 |mapa#0@@11| |mapb#0@@11|))) :qid |unknown.0:0| :skolemid |3158| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U Maps._default.MapUnionPreferB$T ($LS $ly@@275) |mapa#0@@11| |mapb#0@@11|)) )))
(assert (forall ((Maps._default.MapUnionPreferB$U@@0 T@U) (Maps._default.MapUnionPreferB$T@@0 T@U) ($ly@@276 T@U) (|mapa#0@@12| T@U) (|mapb#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@0) TyType) (= (type Maps._default.MapUnionPreferB$T@@0) TyType)) (= (type $ly@@276) LayerTypeType)) (= (type |mapa#0@@12|) (MapType BoxType BoxType))) (= (type |mapb#0@@12|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $ly@@276 |mapa#0@@12| |mapb#0@@12|) (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 $LZ |mapa#0@@12| |mapb#0@@12|))) :qid |unknown.0:0| :skolemid |3159| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@0 Maps._default.MapUnionPreferB$T@@0 (AsFuelBottom $ly@@276) |mapa#0@@12| |mapb#0@@12|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@1 T@U) (Maps._default.MapUnionPreferB$T@@1 T@U) ($ly@@277 T@U) (|mapa#0@@13| T@U) (|mapb#0@@13| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@1) TyType) (= (type Maps._default.MapUnionPreferB$T@@1) TyType)) (= (type $ly@@277) LayerTypeType)) (= (type |mapa#0@@13|) (MapType BoxType BoxType))) (= (type |mapb#0@@13|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 |mapa#0@@13| |mapb#0@@13|) (and ($Is |mapa#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1)) ($Is |mapb#0@@13| (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@277 |mapa#0@@13| |mapb#0@@13|)) (|Set#Union| (|Map#Domain| |mapa#0@@13|) (|Map#Domain| |mapb#0@@13|))) (forall ((|k#0@@47| T@U) ) (!  (=> (and (and (= (type |k#0@@47|) BoxType) ($IsBox |k#0@@47| Maps._default.MapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#0@@47|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@277 |mapa#0@@13| |mapb#0@@13|)) |k#0@@47|) (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#0@@47|))) :qid |Mapsidfy.131:20| :skolemid |3160| :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@13|) |k#0@@47|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@277 |mapa#0@@13| |mapb#0@@13|)) |k#0@@47|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#0@@47|)) ))) (forall ((|k#1@@2| T@U) ) (!  (=> (and (and (= (type |k#1@@2|) BoxType) ($IsBox |k#1@@2| Maps._default.MapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|Set#Difference| (|Map#Domain| |mapa#0@@13|) (|Map#Domain| |mapb#0@@13|)) |k#1@@2|))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@277 |mapa#0@@13| |mapb#0@@13|)) |k#1@@2|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#1@@2|))) :qid |Mapsidfy.132:20| :skolemid |3161| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#1@@2|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@277 |mapa#0@@13| |mapb#0@@13|)) |k#1@@2|)) :pattern ( (MapType0Select (|Set#Difference| (|Map#Domain| |mapa#0@@13|) (|Map#Domain| |mapb#0@@13|)) |k#1@@2|)) ))) (forall ((|k#2@@0| T@U) ) (!  (=> (and (and (= (type |k#2@@0|) BoxType) ($IsBox |k#2@@0| Maps._default.MapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#2@@0|)) (not (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#2@@0|))))) (= (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@277 |mapa#0@@13| |mapb#0@@13|)) |k#2@@0|) (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#2@@0|))) :qid |Mapsidfy.133:20| :skolemid |3162| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@13|) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@277 |mapa#0@@13| |mapb#0@@13|)) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@13|) |k#2@@0|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@13|) |k#2@@0|)) ))) ($Is (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@277 |mapa#0@@13| |mapb#0@@13|) (TMap Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1)))) :qid |unknown.0:0| :skolemid |3163| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@1 Maps._default.MapUnionPreferB$T@@1 $ly@@277 |mapa#0@@13| |mapb#0@@13|)) ))))
(assert (forall ((Maps._default.MapUnionPreferB$U@@2 T@U) (Maps._default.MapUnionPreferB$T@@2 T@U) ($ly@@278 T@U) (|mapa#0@@14| T@U) (|mapb#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@2) TyType) (= (type Maps._default.MapUnionPreferB$T@@2) TyType)) (= (type $ly@@278) LayerTypeType)) (= (type |mapa#0@@14|) (MapType BoxType BoxType))) (= (type |mapb#0@@14|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)) ($Is |mapb#0@@14| (TMap Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2)))) (= (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@278 |mapa#0@@14| |mapb#0@@14|) true)) :qid |unknown.0:0| :skolemid |3164| :pattern ( (|Maps.__default.MapUnionPreferB#requires| Maps._default.MapUnionPreferB$U@@2 Maps._default.MapUnionPreferB$T@@2 $ly@@278 |mapa#0@@14| |mapb#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@3 T@U) (Maps._default.MapUnionPreferB$T@@3 T@U) ($ly@@279 T@U) (|mapa#0@@15| T@U) (|mapb#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@3) TyType) (= (type Maps._default.MapUnionPreferB$T@@3) TyType)) (= (type $ly@@279) LayerTypeType)) (= (type |mapa#0@@15|) (MapType BoxType BoxType))) (= (type |mapb#0@@15|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 |mapa#0@@15| |mapb#0@@15|) (and ($Is |mapa#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3)) ($Is |mapb#0@@15| (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@279) |mapa#0@@15| |mapb#0@@15|) (|Map#Glue| (|lambda#92| Maps._default.MapUnionPreferB$U@@3 (|Set#Union| (|Map#Domain| |mapa#0@@15|) (|Map#Domain| |mapb#0@@15|))) (|lambda#133| (|Map#Domain| |mapb#0@@15|) (|Map#Elements| |mapb#0@@15|) (|Map#Elements| |mapa#0@@15|)) (TMap Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3)))) :qid |unknown.0:0| :skolemid |3165| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@3 Maps._default.MapUnionPreferB$T@@3 ($LS $ly@@279) |mapa#0@@15| |mapb#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnionPreferB$U@@4 T@U) (Maps._default.MapUnionPreferB$T@@4 T@U) ($ly@@280 T@U) (|mapa#0@@16| T@U) (|mapb#0@@16| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnionPreferB$U@@4) TyType) (= (type Maps._default.MapUnionPreferB$T@@4) TyType)) (= (type $ly@@280) LayerTypeType)) (= (type |mapa#0@@16|) (MapType BoxType BoxType))) (= (type |mapb#0@@16|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnionPreferB#canCall| Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (and ($Is |mapa#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4)) ($Is |mapb#0@@16| (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4))))) (= (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@280) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|)) (|Map#Glue| (|lambda#92| Maps._default.MapUnionPreferB$U@@4 (|Set#Union| (|Map#Domain| (Lit |mapa#0@@16|)) (|Map#Domain| (Lit |mapb#0@@16|)))) (|lambda#133| (|Map#Domain| |mapb#0@@16|) (|Map#Elements| (Lit |mapb#0@@16|)) (|Map#Elements| (Lit |mapa#0@@16|))) (TMap Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |3166| :pattern ( (Maps.__default.MapUnionPreferB Maps._default.MapUnionPreferB$U@@4 Maps._default.MapUnionPreferB$T@@4 ($LS $ly@@280) (Lit |mapa#0@@16|) (Lit |mapb#0@@16|))) ))))
(assert (forall ((arg0@@569 T@U) (arg1@@272 T@U) (arg2@@191 T@U) (arg3@@141 T@U) (arg4@@109 T@U) ) (! (= (type (Maps.__default.MapUnion arg0@@569 arg1@@272 arg2@@191 arg3@@141 arg4@@109)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapUnion| :pattern ( (Maps.__default.MapUnion arg0@@569 arg1@@272 arg2@@191 arg3@@141 arg4@@109)) )))
(assert (forall ((Maps._default.MapUnion$U T@U) (Maps._default.MapUnion$T T@U) ($ly@@281 T@U) (|mapa#0@@17| T@U) (|mapb#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U) TyType) (= (type Maps._default.MapUnion$T) TyType)) (= (type $ly@@281) LayerTypeType)) (= (type |mapa#0@@17|) (MapType BoxType BoxType))) (= (type |mapb#0@@17|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@281) |mapa#0@@17| |mapb#0@@17|) (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T $ly@@281 |mapa#0@@17| |mapb#0@@17|))) :qid |unknown.0:0| :skolemid |3167| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U Maps._default.MapUnion$T ($LS $ly@@281) |mapa#0@@17| |mapb#0@@17|)) )))
(assert (forall ((Maps._default.MapUnion$U@@0 T@U) (Maps._default.MapUnion$T@@0 T@U) ($ly@@282 T@U) (|mapa#0@@18| T@U) (|mapb#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapUnion$U@@0) TyType) (= (type Maps._default.MapUnion$T@@0) TyType)) (= (type $ly@@282) LayerTypeType)) (= (type |mapa#0@@18|) (MapType BoxType BoxType))) (= (type |mapb#0@@18|) (MapType BoxType BoxType))) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $ly@@282 |mapa#0@@18| |mapb#0@@18|) (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 $LZ |mapa#0@@18| |mapb#0@@18|))) :qid |unknown.0:0| :skolemid |3168| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@0 Maps._default.MapUnion$T@@0 (AsFuelBottom $ly@@282) |mapa#0@@18| |mapb#0@@18|)) )))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@1 T@U) (Maps._default.MapUnion$T@@1 T@U) ($ly@@283 T@U) (|mapa#0@@19| T@U) (|mapb#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@1) TyType) (= (type Maps._default.MapUnion$T@@1) TyType)) (= (type $ly@@283) LayerTypeType)) (= (type |mapa#0@@19|) (MapType BoxType BoxType))) (= (type |mapb#0@@19|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 |mapa#0@@19| |mapb#0@@19|) (and ($Is |mapa#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1)) ($Is |mapb#0@@19| (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1))))) (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@283 |mapa#0@@19| |mapb#0@@19|)) (|Set#Union| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|))) (forall ((|k#0@@48| T@U) ) (!  (=> (and (and (= (type |k#0@@48|) BoxType) ($IsBox |k#0@@48| Maps._default.MapUnion$U@@1)) (U_2_bool (MapType0Select (|Set#Difference| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|)) |k#0@@48|))) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#0@@48|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@283 |mapa#0@@19| |mapb#0@@19|)) |k#0@@48|))) :qid |Mapsidfy.142:18| :skolemid |3169| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@283 |mapa#0@@19| |mapb#0@@19|)) |k#0@@48|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#0@@48|)) :pattern ( (MapType0Select (|Set#Difference| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|)) |k#0@@48|)) ))) (forall ((|k#1@@3| T@U) ) (!  (=> (and (and (= (type |k#1@@3|) BoxType) ($IsBox |k#1@@3| Maps._default.MapUnion$U@@1)) (U_2_bool (MapType0Select (|Set#Difference| (|Map#Domain| |mapb#0@@19|) (|Map#Domain| |mapa#0@@19|)) |k#1@@3|))) (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#1@@3|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@283 |mapa#0@@19| |mapb#0@@19|)) |k#1@@3|))) :qid |Mapsidfy.143:18| :skolemid |3170| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@283 |mapa#0@@19| |mapb#0@@19|)) |k#1@@3|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#1@@3|)) :pattern ( (MapType0Select (|Set#Difference| (|Map#Domain| |mapb#0@@19|) (|Map#Domain| |mapa#0@@19|)) |k#1@@3|)) ))) (forall ((|k#2@@1| T@U) ) (!  (=> (and (and (= (type |k#2@@1|) BoxType) ($IsBox |k#2@@1| Maps._default.MapUnion$U@@1)) (U_2_bool (MapType0Select (|Set#Intersection| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|)) |k#2@@1|))) (or (= (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#2@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@283 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)) (= (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#2@@1|) (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@283 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)))) :qid |Mapsidfy.144:18| :skolemid |3171| :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@19|) |k#2@@1|)) :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@283 |mapa#0@@19| |mapb#0@@19|)) |k#2@@1|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@19|) |k#2@@1|)) :pattern ( (MapType0Select (|Set#Intersection| (|Map#Domain| |mapa#0@@19|) (|Map#Domain| |mapb#0@@19|)) |k#2@@1|)) ))) ($Is (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@283 |mapa#0@@19| |mapb#0@@19|) (TMap Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1)))) :qid |unknown.0:0| :skolemid |3172| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@1 Maps._default.MapUnion$T@@1 $ly@@283 |mapa#0@@19| |mapb#0@@19|)) ))))
(assert (forall ((Maps._default.MapUnion$U@@2 T@U) (Maps._default.MapUnion$T@@2 T@U) ($ly@@284 T@U) (|mapa#0@@20| T@U) (|mapb#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@2) TyType) (= (type Maps._default.MapUnion$T@@2) TyType)) (= (type $ly@@284) LayerTypeType)) (= (type |mapa#0@@20|) (MapType BoxType BoxType))) (= (type |mapb#0@@20|) (MapType BoxType BoxType))) (and ($Is |mapa#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)) ($Is |mapb#0@@20| (TMap Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2)))) (= (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@284 |mapa#0@@20| |mapb#0@@20|) true)) :qid |unknown.0:0| :skolemid |3173| :pattern ( (|Maps.__default.MapUnion#requires| Maps._default.MapUnion$U@@2 Maps._default.MapUnion$T@@2 $ly@@284 |mapa#0@@20| |mapb#0@@20|)) )))
(assert (= (type StartFuel_Maps._default.MapUnionPreferA) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@3 T@U) (Maps._default.MapUnion$T@@3 T@U) ($ly@@285 T@U) (|mapa#0@@21| T@U) (|mapb#0@@21| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@3) TyType) (= (type Maps._default.MapUnion$T@@3) TyType)) (= (type $ly@@285) LayerTypeType)) (= (type |mapa#0@@21|) (MapType BoxType BoxType))) (= (type |mapb#0@@21|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (and ($Is |mapa#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3)) ($Is |mapb#0@@21| (TMap Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 |mapa#0@@21| |mapb#0@@21|) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@285) |mapa#0@@21| |mapb#0@@21|) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 StartFuel_Maps._default.MapUnionPreferA |mapa#0@@21| |mapb#0@@21|)))) :qid |unknown.0:0| :skolemid |3174| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@3 Maps._default.MapUnion$T@@3 ($LS $ly@@285) |mapa#0@@21| |mapb#0@@21|)) ))))
(assert  (=> true (forall ((Maps._default.MapUnion$U@@4 T@U) (Maps._default.MapUnion$T@@4 T@U) ($ly@@286 T@U) (|mapa#0@@22| T@U) (|mapb#0@@22| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapUnion$U@@4) TyType) (= (type Maps._default.MapUnion$T@@4) TyType)) (= (type $ly@@286) LayerTypeType)) (= (type |mapa#0@@22|) (MapType BoxType BoxType))) (= (type |mapb#0@@22|) (MapType BoxType BoxType))) (or (|Maps.__default.MapUnion#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (and ($Is |mapa#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4)) ($Is |mapb#0@@22| (TMap Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4))))) (and (|Maps.__default.MapUnionPreferA#canCall| Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (= (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@286) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|)) (Maps.__default.MapUnionPreferA Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 StartFuel_Maps._default.MapUnionPreferA (Lit |mapa#0@@22|) (Lit |mapb#0@@22|))))) :qid |unknown.0:0| :weight 3 :skolemid |3175| :pattern ( (Maps.__default.MapUnion Maps._default.MapUnion$U@@4 Maps._default.MapUnion$T@@4 ($LS $ly@@286) (Lit |mapa#0@@22|) (Lit |mapb#0@@22|))) ))))
(assert (forall ((arg0@@570 T@U) (arg1@@273 T@U) (arg2@@192 T@U) (arg3@@142 T@U) (arg4@@110 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferA arg0@@570 arg1@@273 arg2@@192 arg3@@142 arg4@@110)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnionPreferA| :pattern ( (Maps.__default.IMapUnionPreferA arg0@@570 arg1@@273 arg2@@192 arg3@@142 arg4@@110)) )))
(assert (forall ((Maps._default.IMapUnionPreferA$U T@U) (Maps._default.IMapUnionPreferA$T T@U) ($ly@@287 T@U) (|mapa#0@@23| T@U) (|mapb#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U) TyType) (= (type Maps._default.IMapUnionPreferA$T) TyType)) (= (type $ly@@287) LayerTypeType)) (= (type |mapa#0@@23|) (IMapType BoxType BoxType))) (= (type |mapb#0@@23|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@287) |mapa#0@@23| |mapb#0@@23|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T $ly@@287 |mapa#0@@23| |mapb#0@@23|))) :qid |unknown.0:0| :skolemid |3176| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U Maps._default.IMapUnionPreferA$T ($LS $ly@@287) |mapa#0@@23| |mapb#0@@23|)) )))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@0 T@U) (Maps._default.IMapUnionPreferA$T@@0 T@U) ($ly@@288 T@U) (|mapa#0@@24| T@U) (|mapb#0@@24| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@0) TyType) (= (type Maps._default.IMapUnionPreferA$T@@0) TyType)) (= (type $ly@@288) LayerTypeType)) (= (type |mapa#0@@24|) (IMapType BoxType BoxType))) (= (type |mapb#0@@24|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $ly@@288 |mapa#0@@24| |mapb#0@@24|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 $LZ |mapa#0@@24| |mapb#0@@24|))) :qid |unknown.0:0| :skolemid |3177| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@0 Maps._default.IMapUnionPreferA$T@@0 (AsFuelBottom $ly@@288) |mapa#0@@24| |mapb#0@@24|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@1 T@U) (Maps._default.IMapUnionPreferA$T@@1 T@U) ($ly@@289 T@U) (|mapa#0@@25| T@U) (|mapb#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@1) TyType) (= (type Maps._default.IMapUnionPreferA$T@@1) TyType)) (= (type $ly@@289) LayerTypeType)) (= (type |mapa#0@@25|) (IMapType BoxType BoxType))) (= (type |mapb#0@@25|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 |mapa#0@@25| |mapb#0@@25|) (and ($Is |mapa#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1)) ($Is |mapb#0@@25| (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@289 |mapa#0@@25| |mapb#0@@25|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@25|) (|IMap#Domain| |mapb#0@@25|))) (forall ((|k#0@@49| T@U) ) (!  (=> (and (and (= (type |k#0@@49|) BoxType) ($IsBox |k#0@@49| Maps._default.IMapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#0@@49|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@289 |mapa#0@@25| |mapb#0@@25|)) |k#0@@49|) (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#0@@49|))) :qid |Mapsidfy.151:20| :skolemid |3178| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@25|) |k#0@@49|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@289 |mapa#0@@25| |mapb#0@@25|)) |k#0@@49|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#0@@49|)) ))) (forall ((|k#1@@4| T@U) ) (!  (=> (and (and (= (type |k#1@@4|) BoxType) ($IsBox |k#1@@4| Maps._default.IMapUnionPreferA$U@@1)) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapb#0@@25|) (|IMap#Domain| |mapa#0@@25|)) |k#1@@4|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@289 |mapa#0@@25| |mapb#0@@25|)) |k#1@@4|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#1@@4|))) :qid |Mapsidfy.152:20| :skolemid |3179| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#1@@4|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@289 |mapa#0@@25| |mapb#0@@25|)) |k#1@@4|)) :pattern ( (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapb#0@@25|) (|IMap#Domain| |mapa#0@@25|)) |k#1@@4|)) ))) (forall ((|k#2@@2| T@U) ) (!  (=> (and (and (= (type |k#2@@2|) BoxType) ($IsBox |k#2@@2| Maps._default.IMapUnionPreferA$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#2@@2|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#2@@2|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@289 |mapa#0@@25| |mapb#0@@25|)) |k#2@@2|) (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#2@@2|))) :qid |Mapsidfy.153:20| :skolemid |3180| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@25|) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@289 |mapa#0@@25| |mapb#0@@25|)) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@25|) |k#2@@2|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@25|) |k#2@@2|)) ))) ($Is (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@289 |mapa#0@@25| |mapb#0@@25|) (TIMap Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1)))) :qid |unknown.0:0| :skolemid |3181| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@1 Maps._default.IMapUnionPreferA$T@@1 $ly@@289 |mapa#0@@25| |mapb#0@@25|)) ))))
(assert (forall ((Maps._default.IMapUnionPreferA$U@@2 T@U) (Maps._default.IMapUnionPreferA$T@@2 T@U) ($ly@@290 T@U) (|mapa#0@@26| T@U) (|mapb#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@2) TyType) (= (type Maps._default.IMapUnionPreferA$T@@2) TyType)) (= (type $ly@@290) LayerTypeType)) (= (type |mapa#0@@26|) (IMapType BoxType BoxType))) (= (type |mapb#0@@26|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)) ($Is |mapb#0@@26| (TIMap Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2)))) (= (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@290 |mapa#0@@26| |mapb#0@@26|) true)) :qid |unknown.0:0| :skolemid |3182| :pattern ( (|Maps.__default.IMapUnionPreferA#requires| Maps._default.IMapUnionPreferA$U@@2 Maps._default.IMapUnionPreferA$T@@2 $ly@@290 |mapa#0@@26| |mapb#0@@26|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@3 T@U) (Maps._default.IMapUnionPreferA$T@@3 T@U) ($ly@@291 T@U) (|mapa#0@@27| T@U) (|mapb#0@@27| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@3) TyType) (= (type Maps._default.IMapUnionPreferA$T@@3) TyType)) (= (type $ly@@291) LayerTypeType)) (= (type |mapa#0@@27|) (IMapType BoxType BoxType))) (= (type |mapb#0@@27|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 |mapa#0@@27| |mapb#0@@27|) (and ($Is |mapa#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3)) ($Is |mapb#0@@27| (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@291) |mapa#0@@27| |mapb#0@@27|) (|IMap#Glue| (|lambda#92| Maps._default.IMapUnionPreferA$U@@3 (|ISet#Union| (|IMap#Domain| |mapa#0@@27|) (|IMap#Domain| |mapb#0@@27|))) (|lambda#133| (|IMap#Domain| |mapa#0@@27|) (|IMap#Elements| |mapa#0@@27|) (|IMap#Elements| |mapb#0@@27|)) (TIMap Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3)))) :qid |unknown.0:0| :skolemid |3183| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@3 Maps._default.IMapUnionPreferA$T@@3 ($LS $ly@@291) |mapa#0@@27| |mapb#0@@27|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferA$U@@4 T@U) (Maps._default.IMapUnionPreferA$T@@4 T@U) ($ly@@292 T@U) (|mapa#0@@28| T@U) (|mapb#0@@28| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferA$U@@4) TyType) (= (type Maps._default.IMapUnionPreferA$T@@4) TyType)) (= (type $ly@@292) LayerTypeType)) (= (type |mapa#0@@28|) (IMapType BoxType BoxType))) (= (type |mapb#0@@28|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (and ($Is |mapa#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4)) ($Is |mapb#0@@28| (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4))))) (= (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@292) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|)) (|IMap#Glue| (|lambda#92| Maps._default.IMapUnionPreferA$U@@4 (|ISet#Union| (|IMap#Domain| (Lit |mapa#0@@28|)) (|IMap#Domain| (Lit |mapb#0@@28|)))) (|lambda#133| (|IMap#Domain| |mapa#0@@28|) (|IMap#Elements| (Lit |mapa#0@@28|)) (|IMap#Elements| (Lit |mapb#0@@28|))) (TIMap Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |3184| :pattern ( (Maps.__default.IMapUnionPreferA Maps._default.IMapUnionPreferA$U@@4 Maps._default.IMapUnionPreferA$T@@4 ($LS $ly@@292) (Lit |mapa#0@@28|) (Lit |mapb#0@@28|))) ))))
(assert (forall ((arg0@@571 T@U) (arg1@@274 T@U) (arg2@@193 T@U) (arg3@@143 T@U) (arg4@@111 T@U) ) (! (= (type (Maps.__default.IMapUnionPreferB arg0@@571 arg1@@274 arg2@@193 arg3@@143 arg4@@111)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnionPreferB| :pattern ( (Maps.__default.IMapUnionPreferB arg0@@571 arg1@@274 arg2@@193 arg3@@143 arg4@@111)) )))
(assert (forall ((Maps._default.IMapUnionPreferB$U T@U) (Maps._default.IMapUnionPreferB$T T@U) ($ly@@293 T@U) (|mapa#0@@29| T@U) (|mapb#0@@29| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U) TyType) (= (type Maps._default.IMapUnionPreferB$T) TyType)) (= (type $ly@@293) LayerTypeType)) (= (type |mapa#0@@29|) (IMapType BoxType BoxType))) (= (type |mapb#0@@29|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@293) |mapa#0@@29| |mapb#0@@29|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T $ly@@293 |mapa#0@@29| |mapb#0@@29|))) :qid |unknown.0:0| :skolemid |3185| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U Maps._default.IMapUnionPreferB$T ($LS $ly@@293) |mapa#0@@29| |mapb#0@@29|)) )))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@0 T@U) (Maps._default.IMapUnionPreferB$T@@0 T@U) ($ly@@294 T@U) (|mapa#0@@30| T@U) (|mapb#0@@30| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@0) TyType) (= (type Maps._default.IMapUnionPreferB$T@@0) TyType)) (= (type $ly@@294) LayerTypeType)) (= (type |mapa#0@@30|) (IMapType BoxType BoxType))) (= (type |mapb#0@@30|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $ly@@294 |mapa#0@@30| |mapb#0@@30|) (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 $LZ |mapa#0@@30| |mapb#0@@30|))) :qid |unknown.0:0| :skolemid |3186| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@0 Maps._default.IMapUnionPreferB$T@@0 (AsFuelBottom $ly@@294) |mapa#0@@30| |mapb#0@@30|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@1 T@U) (Maps._default.IMapUnionPreferB$T@@1 T@U) ($ly@@295 T@U) (|mapa#0@@31| T@U) (|mapb#0@@31| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@1) TyType) (= (type Maps._default.IMapUnionPreferB$T@@1) TyType)) (= (type $ly@@295) LayerTypeType)) (= (type |mapa#0@@31|) (IMapType BoxType BoxType))) (= (type |mapb#0@@31|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 |mapa#0@@31| |mapb#0@@31|) (and ($Is |mapa#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1)) ($Is |mapb#0@@31| (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@295 |mapa#0@@31| |mapb#0@@31|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@31|) (|IMap#Domain| |mapb#0@@31|))) (forall ((|k#0@@50| T@U) ) (!  (=> (and (and (= (type |k#0@@50|) BoxType) ($IsBox |k#0@@50| Maps._default.IMapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#0@@50|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@295 |mapa#0@@31| |mapb#0@@31|)) |k#0@@50|) (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#0@@50|))) :qid |Mapsidfy.160:20| :skolemid |3187| :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@31|) |k#0@@50|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@295 |mapa#0@@31| |mapb#0@@31|)) |k#0@@50|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#0@@50|)) ))) (forall ((|k#1@@5| T@U) ) (!  (=> (and (and (= (type |k#1@@5|) BoxType) ($IsBox |k#1@@5| Maps._default.IMapUnionPreferB$U@@1)) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapa#0@@31|) (|IMap#Domain| |mapb#0@@31|)) |k#1@@5|))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@295 |mapa#0@@31| |mapb#0@@31|)) |k#1@@5|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#1@@5|))) :qid |Mapsidfy.161:20| :skolemid |3188| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#1@@5|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@295 |mapa#0@@31| |mapb#0@@31|)) |k#1@@5|)) :pattern ( (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapa#0@@31|) (|IMap#Domain| |mapb#0@@31|)) |k#1@@5|)) ))) (forall ((|k#2@@3| T@U) ) (!  (=> (and (and (= (type |k#2@@3|) BoxType) ($IsBox |k#2@@3| Maps._default.IMapUnionPreferB$U@@1)) (and (U_2_bool (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#2@@3|)) (not (U_2_bool (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#2@@3|))))) (= (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@295 |mapa#0@@31| |mapb#0@@31|)) |k#2@@3|) (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#2@@3|))) :qid |Mapsidfy.162:20| :skolemid |3189| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@31|) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@295 |mapa#0@@31| |mapb#0@@31|)) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |mapb#0@@31|) |k#2@@3|)) :pattern ( (MapType0Select (|IMap#Domain| |mapa#0@@31|) |k#2@@3|)) ))) ($Is (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@295 |mapa#0@@31| |mapb#0@@31|) (TIMap Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1)))) :qid |unknown.0:0| :skolemid |3190| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@1 Maps._default.IMapUnionPreferB$T@@1 $ly@@295 |mapa#0@@31| |mapb#0@@31|)) ))))
(assert (forall ((Maps._default.IMapUnionPreferB$U@@2 T@U) (Maps._default.IMapUnionPreferB$T@@2 T@U) ($ly@@296 T@U) (|mapa#0@@32| T@U) (|mapb#0@@32| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@2) TyType) (= (type Maps._default.IMapUnionPreferB$T@@2) TyType)) (= (type $ly@@296) LayerTypeType)) (= (type |mapa#0@@32|) (IMapType BoxType BoxType))) (= (type |mapb#0@@32|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)) ($Is |mapb#0@@32| (TIMap Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2)))) (= (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@296 |mapa#0@@32| |mapb#0@@32|) true)) :qid |unknown.0:0| :skolemid |3191| :pattern ( (|Maps.__default.IMapUnionPreferB#requires| Maps._default.IMapUnionPreferB$U@@2 Maps._default.IMapUnionPreferB$T@@2 $ly@@296 |mapa#0@@32| |mapb#0@@32|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@3 T@U) (Maps._default.IMapUnionPreferB$T@@3 T@U) ($ly@@297 T@U) (|mapa#0@@33| T@U) (|mapb#0@@33| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@3) TyType) (= (type Maps._default.IMapUnionPreferB$T@@3) TyType)) (= (type $ly@@297) LayerTypeType)) (= (type |mapa#0@@33|) (IMapType BoxType BoxType))) (= (type |mapb#0@@33|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 |mapa#0@@33| |mapb#0@@33|) (and ($Is |mapa#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3)) ($Is |mapb#0@@33| (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@297) |mapa#0@@33| |mapb#0@@33|) (|IMap#Glue| (|lambda#92| Maps._default.IMapUnionPreferB$U@@3 (|ISet#Union| (|IMap#Domain| |mapa#0@@33|) (|IMap#Domain| |mapb#0@@33|))) (|lambda#133| (|IMap#Domain| |mapb#0@@33|) (|IMap#Elements| |mapb#0@@33|) (|IMap#Elements| |mapa#0@@33|)) (TIMap Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3)))) :qid |unknown.0:0| :skolemid |3192| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@3 Maps._default.IMapUnionPreferB$T@@3 ($LS $ly@@297) |mapa#0@@33| |mapb#0@@33|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnionPreferB$U@@4 T@U) (Maps._default.IMapUnionPreferB$T@@4 T@U) ($ly@@298 T@U) (|mapa#0@@34| T@U) (|mapb#0@@34| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnionPreferB$U@@4) TyType) (= (type Maps._default.IMapUnionPreferB$T@@4) TyType)) (= (type $ly@@298) LayerTypeType)) (= (type |mapa#0@@34|) (IMapType BoxType BoxType))) (= (type |mapb#0@@34|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnionPreferB#canCall| Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (and ($Is |mapa#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4)) ($Is |mapb#0@@34| (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4))))) (= (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@298) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|)) (|IMap#Glue| (|lambda#92| Maps._default.IMapUnionPreferB$U@@4 (|ISet#Union| (|IMap#Domain| (Lit |mapa#0@@34|)) (|IMap#Domain| (Lit |mapb#0@@34|)))) (|lambda#133| (|IMap#Domain| |mapb#0@@34|) (|IMap#Elements| (Lit |mapb#0@@34|)) (|IMap#Elements| (Lit |mapa#0@@34|))) (TIMap Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |3193| :pattern ( (Maps.__default.IMapUnionPreferB Maps._default.IMapUnionPreferB$U@@4 Maps._default.IMapUnionPreferB$T@@4 ($LS $ly@@298) (Lit |mapa#0@@34|) (Lit |mapb#0@@34|))) ))))
(assert (forall ((arg0@@572 T@U) (arg1@@275 T@U) (arg2@@194 T@U) (arg3@@144 T@U) (arg4@@112 T@U) ) (! (= (type (Maps.__default.IMapUnion arg0@@572 arg1@@275 arg2@@194 arg3@@144 arg4@@112)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.IMapUnion| :pattern ( (Maps.__default.IMapUnion arg0@@572 arg1@@275 arg2@@194 arg3@@144 arg4@@112)) )))
(assert (forall ((Maps._default.IMapUnion$U T@U) (Maps._default.IMapUnion$T T@U) ($ly@@299 T@U) (|mapa#0@@35| T@U) (|mapb#0@@35| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U) TyType) (= (type Maps._default.IMapUnion$T) TyType)) (= (type $ly@@299) LayerTypeType)) (= (type |mapa#0@@35|) (IMapType BoxType BoxType))) (= (type |mapb#0@@35|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@299) |mapa#0@@35| |mapb#0@@35|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T $ly@@299 |mapa#0@@35| |mapb#0@@35|))) :qid |unknown.0:0| :skolemid |3194| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U Maps._default.IMapUnion$T ($LS $ly@@299) |mapa#0@@35| |mapb#0@@35|)) )))
(assert (forall ((Maps._default.IMapUnion$U@@0 T@U) (Maps._default.IMapUnion$T@@0 T@U) ($ly@@300 T@U) (|mapa#0@@36| T@U) (|mapb#0@@36| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.IMapUnion$U@@0) TyType) (= (type Maps._default.IMapUnion$T@@0) TyType)) (= (type $ly@@300) LayerTypeType)) (= (type |mapa#0@@36|) (IMapType BoxType BoxType))) (= (type |mapb#0@@36|) (IMapType BoxType BoxType))) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $ly@@300 |mapa#0@@36| |mapb#0@@36|) (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 $LZ |mapa#0@@36| |mapb#0@@36|))) :qid |unknown.0:0| :skolemid |3195| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@0 Maps._default.IMapUnion$T@@0 (AsFuelBottom $ly@@300) |mapa#0@@36| |mapb#0@@36|)) )))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@1 T@U) (Maps._default.IMapUnion$T@@1 T@U) ($ly@@301 T@U) (|mapa#0@@37| T@U) (|mapb#0@@37| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@1) TyType) (= (type Maps._default.IMapUnion$T@@1) TyType)) (= (type $ly@@301) LayerTypeType)) (= (type |mapa#0@@37|) (IMapType BoxType BoxType))) (= (type |mapb#0@@37|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 |mapa#0@@37| |mapb#0@@37|) (and ($Is |mapa#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1)) ($Is |mapb#0@@37| (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1))))) (and (and (and (and (|ISet#Equal| (|IMap#Domain| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@301 |mapa#0@@37| |mapb#0@@37|)) (|ISet#Union| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|))) (forall ((|k#0@@51| T@U) ) (!  (=> (and (and (= (type |k#0@@51|) BoxType) ($IsBox |k#0@@51| Maps._default.IMapUnion$U@@1)) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|)) |k#0@@51|))) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#0@@51|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@301 |mapa#0@@37| |mapb#0@@37|)) |k#0@@51|))) :qid |Mapsidfy.171:18| :skolemid |3196| :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@301 |mapa#0@@37| |mapb#0@@37|)) |k#0@@51|)) :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#0@@51|)) :pattern ( (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|)) |k#0@@51|)) ))) (forall ((|k#1@@6| T@U) ) (!  (=> (and (and (= (type |k#1@@6|) BoxType) ($IsBox |k#1@@6| Maps._default.IMapUnion$U@@1)) (U_2_bool (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapb#0@@37|) (|IMap#Domain| |mapa#0@@37|)) |k#1@@6|))) (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#1@@6|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@301 |mapa#0@@37| |mapb#0@@37|)) |k#1@@6|))) :qid |Mapsidfy.172:18| :skolemid |3197| :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@301 |mapa#0@@37| |mapb#0@@37|)) |k#1@@6|)) :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#1@@6|)) :pattern ( (MapType0Select (|ISet#Difference| (|IMap#Domain| |mapb#0@@37|) (|IMap#Domain| |mapa#0@@37|)) |k#1@@6|)) ))) (forall ((|k#2@@4| T@U) ) (!  (=> (and (and (= (type |k#2@@4|) BoxType) ($IsBox |k#2@@4| Maps._default.IMapUnion$U@@1)) (U_2_bool (MapType0Select (|ISet#Intersection| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|)) |k#2@@4|))) (or (= (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#2@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@301 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)) (= (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#2@@4|) (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@301 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)))) :qid |Mapsidfy.173:18| :skolemid |3198| :pattern ( (MapType0Select (|IMap#Elements| |mapa#0@@37|) |k#2@@4|)) :pattern ( (MapType0Select (|IMap#Elements| (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@301 |mapa#0@@37| |mapb#0@@37|)) |k#2@@4|)) :pattern ( (MapType0Select (|IMap#Elements| |mapb#0@@37|) |k#2@@4|)) :pattern ( (MapType0Select (|ISet#Intersection| (|IMap#Domain| |mapa#0@@37|) (|IMap#Domain| |mapb#0@@37|)) |k#2@@4|)) ))) ($Is (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@301 |mapa#0@@37| |mapb#0@@37|) (TIMap Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1)))) :qid |unknown.0:0| :skolemid |3199| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@1 Maps._default.IMapUnion$T@@1 $ly@@301 |mapa#0@@37| |mapb#0@@37|)) ))))
(assert (forall ((Maps._default.IMapUnion$U@@2 T@U) (Maps._default.IMapUnion$T@@2 T@U) ($ly@@302 T@U) (|mapa#0@@38| T@U) (|mapb#0@@38| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@2) TyType) (= (type Maps._default.IMapUnion$T@@2) TyType)) (= (type $ly@@302) LayerTypeType)) (= (type |mapa#0@@38|) (IMapType BoxType BoxType))) (= (type |mapb#0@@38|) (IMapType BoxType BoxType))) (and ($Is |mapa#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)) ($Is |mapb#0@@38| (TIMap Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2)))) (= (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@302 |mapa#0@@38| |mapb#0@@38|) true)) :qid |unknown.0:0| :skolemid |3200| :pattern ( (|Maps.__default.IMapUnion#requires| Maps._default.IMapUnion$U@@2 Maps._default.IMapUnion$T@@2 $ly@@302 |mapa#0@@38| |mapb#0@@38|)) )))
(assert (= (type StartFuel_Maps._default.IMapUnionPreferA) LayerTypeType))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@3 T@U) (Maps._default.IMapUnion$T@@3 T@U) ($ly@@303 T@U) (|mapa#0@@39| T@U) (|mapb#0@@39| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@3) TyType) (= (type Maps._default.IMapUnion$T@@3) TyType)) (= (type $ly@@303) LayerTypeType)) (= (type |mapa#0@@39|) (IMapType BoxType BoxType))) (= (type |mapb#0@@39|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (and ($Is |mapa#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3)) ($Is |mapb#0@@39| (TIMap Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 |mapa#0@@39| |mapb#0@@39|) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@303) |mapa#0@@39| |mapb#0@@39|) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 StartFuel_Maps._default.IMapUnionPreferA |mapa#0@@39| |mapb#0@@39|)))) :qid |unknown.0:0| :skolemid |3201| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@3 Maps._default.IMapUnion$T@@3 ($LS $ly@@303) |mapa#0@@39| |mapb#0@@39|)) ))))
(assert  (=> true (forall ((Maps._default.IMapUnion$U@@4 T@U) (Maps._default.IMapUnion$T@@4 T@U) ($ly@@304 T@U) (|mapa#0@@40| T@U) (|mapb#0@@40| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.IMapUnion$U@@4) TyType) (= (type Maps._default.IMapUnion$T@@4) TyType)) (= (type $ly@@304) LayerTypeType)) (= (type |mapa#0@@40|) (IMapType BoxType BoxType))) (= (type |mapb#0@@40|) (IMapType BoxType BoxType))) (or (|Maps.__default.IMapUnion#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (and ($Is |mapa#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4)) ($Is |mapb#0@@40| (TIMap Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4))))) (and (|Maps.__default.IMapUnionPreferA#canCall| Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (= (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@304) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|)) (Maps.__default.IMapUnionPreferA Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 StartFuel_Maps._default.IMapUnionPreferA (Lit |mapa#0@@40|) (Lit |mapb#0@@40|))))) :qid |unknown.0:0| :weight 3 :skolemid |3202| :pattern ( (Maps.__default.IMapUnion Maps._default.IMapUnion$U@@4 Maps._default.IMapUnion$T@@4 ($LS $ly@@304) (Lit |mapa#0@@40|) (Lit |mapb#0@@40|))) ))))
(assert (forall ((arg0@@573 T@U) (arg1@@276 T@U) (arg2@@195 T@U) (arg3@@145 T@U) (arg4@@113 T@U) (arg5@@75 T@U) ) (! (= (type (Maps.__default.MapDisjointUnion3 arg0@@573 arg1@@276 arg2@@195 arg3@@145 arg4@@113 arg5@@75)) (MapType BoxType BoxType)) :qid |funType:Maps.__default.MapDisjointUnion3| :pattern ( (Maps.__default.MapDisjointUnion3 arg0@@573 arg1@@276 arg2@@195 arg3@@145 arg4@@113 arg5@@75)) )))
(assert (forall ((Maps._default.MapDisjointUnion3$U T@U) (Maps._default.MapDisjointUnion3$T T@U) ($ly@@305 T@U) (|mapa#0@@41| T@U) (|mapb#0@@41| T@U) (|mapc#0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U) TyType) (= (type Maps._default.MapDisjointUnion3$T) TyType)) (= (type $ly@@305) LayerTypeType)) (= (type |mapa#0@@41|) (MapType BoxType BoxType))) (= (type |mapb#0@@41|) (MapType BoxType BoxType))) (= (type |mapc#0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@305) |mapa#0@@41| |mapb#0@@41| |mapc#0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T $ly@@305 |mapa#0@@41| |mapb#0@@41| |mapc#0|))) :qid |unknown.0:0| :skolemid |3203| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U Maps._default.MapDisjointUnion3$T ($LS $ly@@305) |mapa#0@@41| |mapb#0@@41| |mapc#0|)) )))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@0 T@U) (Maps._default.MapDisjointUnion3$T@@0 T@U) ($ly@@306 T@U) (|mapa#0@@42| T@U) (|mapb#0@@42| T@U) (|mapc#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@0) TyType) (= (type Maps._default.MapDisjointUnion3$T@@0) TyType)) (= (type $ly@@306) LayerTypeType)) (= (type |mapa#0@@42|) (MapType BoxType BoxType))) (= (type |mapb#0@@42|) (MapType BoxType BoxType))) (= (type |mapc#0@@0|) (MapType BoxType BoxType))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $ly@@306 |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|) (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 $LZ |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|))) :qid |unknown.0:0| :skolemid |3204| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@0 Maps._default.MapDisjointUnion3$T@@0 (AsFuelBottom $ly@@306) |mapa#0@@42| |mapb#0@@42| |mapc#0@@0|)) )))
(assert (= (type StartFuel_Maps._default.MapDisjointUnion) LayerTypeType))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@1 T@U) (Maps._default.MapDisjointUnion3$T@@1 T@U) ($ly@@307 T@U) (|mapa#0@@43| T@U) (|mapb#0@@43| T@U) (|mapc#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@1) TyType) (= (type Maps._default.MapDisjointUnion3$T@@1) TyType)) (= (type $ly@@307) LayerTypeType)) (= (type |mapa#0@@43|) (MapType BoxType BoxType))) (= (type |mapb#0@@43|) (MapType BoxType BoxType))) (= (type |mapc#0@@1|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (and (and (and ($Is |mapa#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1)) ($Is |mapb#0@@43| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) ($Is |mapc#0@@1| (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|)))))) (and (and (and (and (and (and (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@307 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Union| (|Set#Union| (|Map#Domain| |mapa#0@@43|) (|Map#Domain| |mapb#0@@43|)) (|Map#Domain| |mapc#0@@1|))) (=> (or (or (not (|Set#Equal| (|Map#Domain| |mapa#0@@43|) (|Set#Empty| BoxType))) (not (|Set#Equal| (|Map#Domain| |mapb#0@@43|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| |mapc#0@@1|) (|Set#Empty| BoxType)))) (not (|Set#Equal| (|Map#Domain| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@307 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) (|Set#Empty| BoxType))))) (forall ((|k#0@@52| T@U) ) (!  (=> (and (and (= (type |k#0@@52|) BoxType) ($IsBox |k#0@@52| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#0@@52|))) (= (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#0@@52|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@307 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#0@@52|))) :qid |Mapsidfy.183:18| :skolemid |3205| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@307 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#0@@52|)) :pattern ( (MapType0Select (|Map#Elements| |mapa#0@@43|) |k#0@@52|)) :pattern ( (MapType0Select (|Map#Domain| |mapa#0@@43|) |k#0@@52|)) ))) (forall ((|k#1@@7| T@U) ) (!  (=> (and (and (= (type |k#1@@7|) BoxType) ($IsBox |k#1@@7| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#1@@7|))) (= (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#1@@7|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@307 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#1@@7|))) :qid |Mapsidfy.184:18| :skolemid |3206| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@307 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#1@@7|)) :pattern ( (MapType0Select (|Map#Elements| |mapb#0@@43|) |k#1@@7|)) :pattern ( (MapType0Select (|Map#Domain| |mapb#0@@43|) |k#1@@7|)) ))) (forall ((|k#2@@5| T@U) ) (!  (=> (and (and (= (type |k#2@@5|) BoxType) ($IsBox |k#2@@5| Maps._default.MapDisjointUnion3$U@@1)) (U_2_bool (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#2@@5|))) (= (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#2@@5|) (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@307 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#2@@5|))) :qid |Mapsidfy.185:18| :skolemid |3207| :pattern ( (MapType0Select (|Map#Elements| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@307 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) |k#2@@5|)) :pattern ( (MapType0Select (|Map#Elements| |mapc#0@@1|) |k#2@@5|)) :pattern ( (MapType0Select (|Map#Domain| |mapc#0@@1|) |k#2@@5|)) ))) (and (|Map#Equal| (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@307 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|))) (|Map#Equal| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapb#0@@43| |mapc#0@@1|)) (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion (Maps.__default.MapDisjointUnion Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 StartFuel_Maps._default.MapDisjointUnion |mapa#0@@43| |mapb#0@@43|) |mapc#0@@1|)))) ($Is (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@307 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|) (TMap Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1)))) :qid |unknown.0:0| :skolemid |3208| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@1 Maps._default.MapDisjointUnion3$T@@1 $ly@@307 |mapa#0@@43| |mapb#0@@43| |mapc#0@@1|)) ))))
(assert (forall ((Maps._default.MapDisjointUnion3$U@@2 T@U) (Maps._default.MapDisjointUnion3$T@@2 T@U) ($ly@@308 T@U) (|mapa#0@@44| T@U) (|mapb#0@@44| T@U) (|mapc#0@@2| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@2) TyType) (= (type Maps._default.MapDisjointUnion3$T@@2) TyType)) (= (type $ly@@308) LayerTypeType)) (= (type |mapa#0@@44|) (MapType BoxType BoxType))) (= (type |mapb#0@@44|) (MapType BoxType BoxType))) (= (type |mapc#0@@2|) (MapType BoxType BoxType))) (and (and ($Is |mapa#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)) ($Is |mapb#0@@44| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2))) ($Is |mapc#0@@2| (TMap Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2)))) (= (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@308 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|)  (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@44|) (|Map#Domain| |mapb#0@@44|)) (|Map#Domain| |mapc#0@@2|))))) :qid |unknown.0:0| :skolemid |3209| :pattern ( (|Maps.__default.MapDisjointUnion3#requires| Maps._default.MapDisjointUnion3$U@@2 Maps._default.MapDisjointUnion3$T@@2 $ly@@308 |mapa#0@@44| |mapb#0@@44| |mapc#0@@2|)) )))
(assert (forall ((arg0@@574 T@U) (arg1@@277 T@U) (arg2@@196 T@U) (arg3@@146 T@U) (arg4@@114 T@U) ) (! (= (type (|lambda#153| arg0@@574 arg1@@277 arg2@@196 arg3@@146 arg4@@114)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#153| :pattern ( (|lambda#153| arg0@@574 arg1@@277 arg2@@196 arg3@@146 arg4@@114)) )))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@3 T@U) (Maps._default.MapDisjointUnion3$T@@3 T@U) ($ly@@309 T@U) (|mapa#0@@45| T@U) (|mapb#0@@45| T@U) (|mapc#0@@3| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@3) TyType) (= (type Maps._default.MapDisjointUnion3$T@@3) TyType)) (= (type $ly@@309) LayerTypeType)) (= (type |mapa#0@@45|) (MapType BoxType BoxType))) (= (type |mapb#0@@45|) (MapType BoxType BoxType))) (= (type |mapc#0@@3|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (and (and (and ($Is |mapa#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3)) ($Is |mapb#0@@45| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) ($Is |mapc#0@@3| (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3))) (and (and (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Set#Disjoint| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Map#Domain| |mapc#0@@3|)))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@309) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|) (|Map#Glue| (|lambda#92| Maps._default.MapDisjointUnion3$U@@3 (|Set#Union| (|Set#Union| (|Map#Domain| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|)) (|Map#Domain| |mapc#0@@3|))) (|lambda#153| (|Map#Domain| |mapa#0@@45|) (|Map#Elements| |mapa#0@@45|) (|Map#Domain| |mapb#0@@45|) (|Map#Elements| |mapb#0@@45|) (|Map#Elements| |mapc#0@@3|)) (TMap Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3)))) :qid |unknown.0:0| :skolemid |3210| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@3 Maps._default.MapDisjointUnion3$T@@3 ($LS $ly@@309) |mapa#0@@45| |mapb#0@@45| |mapc#0@@3|)) ))))
(assert  (=> true (forall ((Maps._default.MapDisjointUnion3$U@@4 T@U) (Maps._default.MapDisjointUnion3$T@@4 T@U) ($ly@@310 T@U) (|mapa#0@@46| T@U) (|mapb#0@@46| T@U) (|mapc#0@@4| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Maps._default.MapDisjointUnion3$U@@4) TyType) (= (type Maps._default.MapDisjointUnion3$T@@4) TyType)) (= (type $ly@@310) LayerTypeType)) (= (type |mapa#0@@46|) (MapType BoxType BoxType))) (= (type |mapb#0@@46|) (MapType BoxType BoxType))) (= (type |mapc#0@@4|) (MapType BoxType BoxType))) (or (|Maps.__default.MapDisjointUnion3#canCall| Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (and (and (and ($Is |mapa#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4)) ($Is |mapb#0@@46| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) ($Is |mapc#0@@4| (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4))) (and (and (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Set#Disjoint| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|)))) (|Set#Disjoint| (|Set#Union| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Map#Domain| (Lit |mapc#0@@4|))))))) (= (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@310) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|)) (|Map#Glue| (|lambda#92| Maps._default.MapDisjointUnion3$U@@4 (|Set#Union| (|Set#Union| (|Map#Domain| (Lit |mapa#0@@46|)) (|Map#Domain| (Lit |mapb#0@@46|))) (|Map#Domain| (Lit |mapc#0@@4|)))) (|lambda#153| (|Map#Domain| |mapa#0@@46|) (|Map#Elements| (Lit |mapa#0@@46|)) (|Map#Domain| |mapb#0@@46|) (|Map#Elements| (Lit |mapb#0@@46|)) (|Map#Elements| (Lit |mapc#0@@4|))) (TMap Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4)))) :qid |unknown.0:0| :weight 3 :skolemid |3211| :pattern ( (Maps.__default.MapDisjointUnion3 Maps._default.MapDisjointUnion3$U@@4 Maps._default.MapDisjointUnion3$T@@4 ($LS $ly@@310) (Lit |mapa#0@@46|) (Lit |mapb#0@@46|) (Lit |mapc#0@@4|))) ))))
(assert (forall ((arg0@@575 T@U) (arg1@@278 T@U) (arg2@@197 T@U) ) (! (= (type (Maps.__default.MapToImap arg0@@575 arg1@@278 arg2@@197)) (IMapType BoxType BoxType)) :qid |funType:Maps.__default.MapToImap| :pattern ( (Maps.__default.MapToImap arg0@@575 arg1@@278 arg2@@197)) )))
(assert  (=> true (forall ((Maps._default.MapToImap$K T@U) (Maps._default.MapToImap$V T@U) (|m#0@@73| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K) TyType) (= (type Maps._default.MapToImap$V) TyType)) (= (type |m#0@@73|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@73|) ($Is |m#0@@73| (TMap Maps._default.MapToImap$K Maps._default.MapToImap$V)))) ($Is (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@73|) (TIMap Maps._default.MapToImap$K Maps._default.MapToImap$V))) :qid |unknown.0:0| :skolemid |3212| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K Maps._default.MapToImap$V |m#0@@73|)) ))))
(assert (forall ((Maps._default.MapToImap$K@@0 T@U) (Maps._default.MapToImap$V@@0 T@U) (|m#0@@74| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@0) TyType) (= (type Maps._default.MapToImap$V@@0) TyType)) (= (type |m#0@@74|) (MapType BoxType BoxType))) ($Is |m#0@@74| (TMap Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0))) (= (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@74|) true)) :qid |unknown.0:0| :skolemid |3213| :pattern ( (|Maps.__default.MapToImap#requires| Maps._default.MapToImap$K@@0 Maps._default.MapToImap$V@@0 |m#0@@74|)) )))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@1 T@U) (Maps._default.MapToImap$V@@1 T@U) (|m#0@@75| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@1) TyType) (= (type Maps._default.MapToImap$V@@1) TyType)) (= (type |m#0@@75|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@75|) ($Is |m#0@@75| (TMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@75|) (|IMap#Glue| (|lambda#92| Maps._default.MapToImap$K@@1 (|Map#Domain| |m#0@@75|)) (|lambda#11| (|Map#Elements| |m#0@@75|)) (TIMap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1)))) :qid |unknown.0:0| :skolemid |3214| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@1 Maps._default.MapToImap$V@@1 |m#0@@75|)) ))))
(assert  (=> true (forall ((Maps._default.MapToImap$K@@2 T@U) (Maps._default.MapToImap$V@@2 T@U) (|m#0@@76| T@U) ) (!  (=> (and (and (and (= (type Maps._default.MapToImap$K@@2) TyType) (= (type Maps._default.MapToImap$V@@2) TyType)) (= (type |m#0@@76|) (MapType BoxType BoxType))) (or (|Maps.__default.MapToImap#canCall| Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@76|)) ($Is |m#0@@76| (TMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2)))) (= (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@76|)) (|IMap#Glue| (|lambda#92| Maps._default.MapToImap$K@@2 (|Map#Domain| |m#0@@76|)) (|lambda#11| (|Map#Elements| (Lit |m#0@@76|))) (TIMap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2)))) :qid |unknown.0:0| :weight 3 :skolemid |3215| :pattern ( (Maps.__default.MapToImap Maps._default.MapToImap$K@@2 Maps._default.MapToImap$V@@2 (Lit |m#0@@76|))) ))))
(assert (forall ((arg0@@576 T@U) (arg1@@279 T@U) (arg2@@198 T@U) (arg3@@147 T@U) ) (! (= (type (Maps.__default.MapLookupOption arg0@@576 arg1@@279 arg2@@198 arg3@@147)) DatatypeTypeType) :qid |funType:Maps.__default.MapLookupOption| :pattern ( (Maps.__default.MapLookupOption arg0@@576 arg1@@279 arg2@@198 arg3@@147)) )))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K T@U) (Maps._default.MapLookupOption$V T@U) (|m#0@@77| T@U) (|key#0@@13| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K) TyType) (= (type Maps._default.MapLookupOption$V) TyType)) (= (type |m#0@@77|) (MapType BoxType BoxType))) (= (type |key#0@@13|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@77| |key#0@@13|) (and ($Is |m#0@@77| (TMap Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V)) ($IsBox |key#0@@13| Maps._default.MapLookupOption$K)))) ($Is (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@77| |key#0@@13|) (Tclass.Options.Option Maps._default.MapLookupOption$V))) :qid |unknown.0:0| :skolemid |3216| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K Maps._default.MapLookupOption$V |m#0@@77| |key#0@@13|)) ))))
(assert (forall ((Maps._default.MapLookupOption$K@@0 T@U) (Maps._default.MapLookupOption$V@@0 T@U) (|m#0@@78| T@U) (|key#0@@14| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@0) TyType) (= (type Maps._default.MapLookupOption$V@@0) TyType)) (= (type |m#0@@78|) (MapType BoxType BoxType))) (= (type |key#0@@14|) BoxType)) (and ($Is |m#0@@78| (TMap Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0)) ($IsBox |key#0@@14| Maps._default.MapLookupOption$K@@0))) (= (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@78| |key#0@@14|) true)) :qid |unknown.0:0| :skolemid |3217| :pattern ( (|Maps.__default.MapLookupOption#requires| Maps._default.MapLookupOption$K@@0 Maps._default.MapLookupOption$V@@0 |m#0@@78| |key#0@@14|)) )))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@1 T@U) (Maps._default.MapLookupOption$V@@1 T@U) (|m#0@@79| T@U) (|key#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@1) TyType) (= (type Maps._default.MapLookupOption$V@@1) TyType)) (= (type |m#0@@79|) (MapType BoxType BoxType))) (= (type |key#0@@15|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@79| |key#0@@15|) (and ($Is |m#0@@79| (TMap Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1)) ($IsBox |key#0@@15| Maps._default.MapLookupOption$K@@1)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@79| |key#0@@15|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@79|) |key#0@@15|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| |m#0@@79|) |key#0@@15|)) |#Options.Option.None|))) :qid |unknown.0:0| :skolemid |3218| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@1 Maps._default.MapLookupOption$V@@1 |m#0@@79| |key#0@@15|)) ))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@2 T@U) (Maps._default.MapLookupOption$V@@2 T@U) (|m#0@@80| T@U) (|key#0@@16| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@2) TyType) (= (type Maps._default.MapLookupOption$V@@2) TyType)) (= (type |m#0@@80|) (MapType BoxType BoxType))) (= (type |key#0@@16|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@80|) |key#0@@16|) (and ($Is |m#0@@80| (TMap Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2)) ($IsBox |key#0@@16| Maps._default.MapLookupOption$K@@2)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@80|) |key#0@@16|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@80|) |key#0@@16|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@80|)) |key#0@@16|)) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |3219| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@2 Maps._default.MapLookupOption$V@@2 (Lit |m#0@@80|) |key#0@@16|)) ))))
(assert  (=> true (forall ((Maps._default.MapLookupOption$K@@3 T@U) (Maps._default.MapLookupOption$V@@3 T@U) (|m#0@@81| T@U) (|key#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.MapLookupOption$K@@3) TyType) (= (type Maps._default.MapLookupOption$V@@3) TyType)) (= (type |m#0@@81|) (MapType BoxType BoxType))) (= (type |key#0@@17|) BoxType)) (or (|Maps.__default.MapLookupOption#canCall| Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@81|) (Lit |key#0@@17|)) (and ($Is |m#0@@81| (TMap Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3)) ($IsBox |key#0@@17| Maps._default.MapLookupOption$K@@3)))) (= (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@81|) (Lit |key#0@@17|)) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@81|) |key#0@@17|)) (|#Options.Option.Some| (MapType0Select (|Map#Elements| (Lit |m#0@@81|)) (Lit |key#0@@17|))) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |3220| :pattern ( (Maps.__default.MapLookupOption Maps._default.MapLookupOption$K@@3 Maps._default.MapLookupOption$V@@3 (Lit |m#0@@81|) (Lit |key#0@@17|))) ))))
(assert (forall ((arg0@@577 T@U) (arg1@@280 T@U) (arg2@@199 T@U) (arg3@@148 T@U) ) (! (= (type (Maps.__default.ImapLookupOption arg0@@577 arg1@@280 arg2@@199 arg3@@148)) DatatypeTypeType) :qid |funType:Maps.__default.ImapLookupOption| :pattern ( (Maps.__default.ImapLookupOption arg0@@577 arg1@@280 arg2@@199 arg3@@148)) )))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K T@U) (Maps._default.ImapLookupOption$V T@U) (|m#0@@82| T@U) (|key#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K) TyType) (= (type Maps._default.ImapLookupOption$V) TyType)) (= (type |m#0@@82|) (IMapType BoxType BoxType))) (= (type |key#0@@18|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@82| |key#0@@18|) (and ($Is |m#0@@82| (TIMap Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V)) ($IsBox |key#0@@18| Maps._default.ImapLookupOption$K)))) ($Is (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@82| |key#0@@18|) (Tclass.Options.Option Maps._default.ImapLookupOption$V))) :qid |unknown.0:0| :skolemid |3221| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K Maps._default.ImapLookupOption$V |m#0@@82| |key#0@@18|)) ))))
(assert (forall ((Maps._default.ImapLookupOption$K@@0 T@U) (Maps._default.ImapLookupOption$V@@0 T@U) (|m#0@@83| T@U) (|key#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@0) TyType) (= (type Maps._default.ImapLookupOption$V@@0) TyType)) (= (type |m#0@@83|) (IMapType BoxType BoxType))) (= (type |key#0@@19|) BoxType)) (and ($Is |m#0@@83| (TIMap Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0)) ($IsBox |key#0@@19| Maps._default.ImapLookupOption$K@@0))) (= (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@83| |key#0@@19|) true)) :qid |unknown.0:0| :skolemid |3222| :pattern ( (|Maps.__default.ImapLookupOption#requires| Maps._default.ImapLookupOption$K@@0 Maps._default.ImapLookupOption$V@@0 |m#0@@83| |key#0@@19|)) )))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@1 T@U) (Maps._default.ImapLookupOption$V@@1 T@U) (|m#0@@84| T@U) (|key#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@1) TyType) (= (type Maps._default.ImapLookupOption$V@@1) TyType)) (= (type |m#0@@84|) (IMapType BoxType BoxType))) (= (type |key#0@@20|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@84| |key#0@@20|) (and ($Is |m#0@@84| (TIMap Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1)) ($IsBox |key#0@@20| Maps._default.ImapLookupOption$K@@1)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@84| |key#0@@20|) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@84|) |key#0@@20|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| |m#0@@84|) |key#0@@20|)) |#Options.Option.None|))) :qid |unknown.0:0| :skolemid |3223| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@1 Maps._default.ImapLookupOption$V@@1 |m#0@@84| |key#0@@20|)) ))))
(assert  (=> true (forall ((Maps._default.ImapLookupOption$K@@2 T@U) (Maps._default.ImapLookupOption$V@@2 T@U) (|m#0@@85| T@U) (|key#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Maps._default.ImapLookupOption$K@@2) TyType) (= (type Maps._default.ImapLookupOption$V@@2) TyType)) (= (type |m#0@@85|) (IMapType BoxType BoxType))) (= (type |key#0@@21|) BoxType)) (or (|Maps.__default.ImapLookupOption#canCall| Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@85|) (Lit |key#0@@21|)) (and ($Is |m#0@@85| (TIMap Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2)) ($IsBox |key#0@@21| Maps._default.ImapLookupOption$K@@2)))) (= (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@85|) (Lit |key#0@@21|)) (ite (U_2_bool (MapType0Select (|IMap#Domain| |m#0@@85|) |key#0@@21|)) (|#Options.Option.Some| (MapType0Select (|IMap#Elements| (Lit |m#0@@85|)) (Lit |key#0@@21|))) |#Options.Option.None|))) :qid |unknown.0:0| :weight 3 :skolemid |3224| :pattern ( (Maps.__default.ImapLookupOption Maps._default.ImapLookupOption$K@@2 Maps._default.ImapLookupOption$V@@2 (Lit |m#0@@85|) (Lit |key#0@@21|))) ))))
(assert (= (type Tclass.SeqComparison.__default) TyType))
(assert (= (Tag Tclass.SeqComparison.__default) Tagclass.SeqComparison.__default))
(assert (= (TagFamily Tclass.SeqComparison.__default) tytagFamily$_default))
(assert (forall ((bx@@170 T@U) ) (!  (=> (and (= (type bx@@170) BoxType) ($IsBox bx@@170 Tclass.SeqComparison.__default)) (and (= ($Box ($Unbox refType bx@@170)) bx@@170) ($Is ($Unbox refType bx@@170) Tclass.SeqComparison.__default))) :qid |unknown.0:0| :skolemid |3225| :pattern ( ($IsBox bx@@170 Tclass.SeqComparison.__default)) )))
(assert (forall (($o@@34 T@U) ) (!  (=> (= (type $o@@34) refType) (= ($Is $o@@34 Tclass.SeqComparison.__default)  (or (= $o@@34 null) (= (dtype $o@@34) Tclass.SeqComparison.__default)))) :qid |unknown.0:0| :skolemid |3226| :pattern ( ($Is $o@@34 Tclass.SeqComparison.__default)) )))
(assert (forall (($o@@35 T@U) ($h@@96 T@U) ) (!  (=> (and (= (type $o@@35) refType) (= (type $h@@96) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@35 Tclass.SeqComparison.__default $h@@96)  (or (= $o@@35 null) (U_2_bool (MapType1Select (MapType0Select $h@@96 $o@@35) alloc))))) :qid |unknown.0:0| :skolemid |3227| :pattern ( ($IsAlloc $o@@35 Tclass.SeqComparison.__default $h@@96)) )))
(assert (forall (($ly@@311 T@U) (|a#0@@78| T@U) (|b#0@@52| T@U) ) (!  (=> (and (and (= (type $ly@@311) LayerTypeType) (= (type |a#0@@78|) (SeqType BoxType))) (= (type |b#0@@52|) (SeqType BoxType))) (= (SeqComparison.__default.lte ($LS $ly@@311) |a#0@@78| |b#0@@52|) (SeqComparison.__default.lte $ly@@311 |a#0@@78| |b#0@@52|))) :qid |SeqComparisonsdfy.14:23| :skolemid |3228| :pattern ( (SeqComparison.__default.lte ($LS $ly@@311) |a#0@@78| |b#0@@52|)) )))
(assert (forall (($ly@@312 T@U) (|a#0@@79| T@U) (|b#0@@53| T@U) ) (!  (=> (and (and (= (type $ly@@312) LayerTypeType) (= (type |a#0@@79|) (SeqType BoxType))) (= (type |b#0@@53|) (SeqType BoxType))) (= (SeqComparison.__default.lte $ly@@312 |a#0@@79| |b#0@@53|) (SeqComparison.__default.lte $LZ |a#0@@79| |b#0@@53|))) :qid |SeqComparisonsdfy.14:23| :skolemid |3229| :pattern ( (SeqComparison.__default.lte (AsFuelBottom $ly@@312) |a#0@@79| |b#0@@53|)) )))
(assert  (=> true (forall (($ly@@313 T@U) (|a#0@@80| T@U) (|b#0@@54| T@U) ) (!  (=> (and (and (and (= (type $ly@@313) LayerTypeType) (= (type |a#0@@80|) (SeqType BoxType))) (= (type |b#0@@54|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| |a#0@@80| |b#0@@54|) (and ($Is |a#0@@80| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@54| (TSeq Tclass.NativeTypes.byte))))) true) :qid |SeqComparisonsdfy.14:23| :skolemid |3230| :pattern ( (SeqComparison.__default.lte $ly@@313 |a#0@@80| |b#0@@54|)) ))))
(assert (forall (($ly@@314 T@U) (|a#0@@81| T@U) (|b#0@@55| T@U) ) (!  (=> (and (and (and (= (type $ly@@314) LayerTypeType) (= (type |a#0@@81|) (SeqType BoxType))) (= (type |b#0@@55|) (SeqType BoxType))) (and ($Is |a#0@@81| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@55| (TSeq Tclass.NativeTypes.byte)))) (= (|SeqComparison.__default.lte#requires| $ly@@314 |a#0@@81| |b#0@@55|) true)) :qid |SeqComparisonsdfy.14:23| :skolemid |3231| :pattern ( (|SeqComparison.__default.lte#requires| $ly@@314 |a#0@@81| |b#0@@55|)) )))
(assert  (=> true (forall (($ly@@315 T@U) (|a#0@@82| T@U) (|b#0@@56| T@U) ) (!  (=> (and (and (and (= (type $ly@@315) LayerTypeType) (= (type |a#0@@82|) (SeqType BoxType))) (= (type |b#0@@56|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| |a#0@@82| |b#0@@56|) (and ($Is |a#0@@82| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@56| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| |a#0@@82|) (LitInt 0))) (=> (not (= (|Seq#Length| |b#0@@56|) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |b#0@@56| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@82| (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |a#0@@82| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@56| (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (|Seq#Drop| |a#0@@82| (LitInt 1)) (|Seq#Drop| |b#0@@56| (LitInt 1))))))) (= (SeqComparison.__default.lte ($LS $ly@@315) |a#0@@82| |b#0@@56|) (ite (= (|Seq#Length| |a#0@@82|) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@56|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| |a#0@@82| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@56| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@56| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |a#0@@82| (LitInt 0))))) false (SeqComparison.__default.lte $ly@@315 (|Seq#Drop| |a#0@@82| (LitInt 1)) (|Seq#Drop| |b#0@@56| (LitInt 1)))))))))) :qid |SeqComparisonsdfy.14:23| :skolemid |3232| :pattern ( (SeqComparison.__default.lte ($LS $ly@@315) |a#0@@82| |b#0@@56|)) ))))
(assert  (=> true (forall (($ly@@316 T@U) (|a#0@@83| T@U) (|b#0@@57| T@U) ) (!  (=> (and (and (and (= (type $ly@@316) LayerTypeType) (= (type |a#0@@83|) (SeqType BoxType))) (= (type |b#0@@57|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| (Lit |a#0@@83|) |b#0@@57|) (and ($Is |a#0@@83| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@57| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@83|)) (LitInt 0))) (=> (not (= (|Seq#Length| |b#0@@57|) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| |b#0@@57| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@83|) (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@83|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@57| (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (Lit (|Seq#Drop| (Lit |a#0@@83|) (LitInt 1))) (|Seq#Drop| |b#0@@57| (LitInt 1))))))) (= (SeqComparison.__default.lte ($LS $ly@@316) (Lit |a#0@@83|) |b#0@@57|) (ite (= (|Seq#Length| (Lit |a#0@@83|)) (LitInt 0)) true (ite (= (|Seq#Length| |b#0@@57|) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@83|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| |b#0@@57| (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| |b#0@@57| (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@83|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@316) (Lit (|Seq#Drop| (Lit |a#0@@83|) (LitInt 1))) (|Seq#Drop| |b#0@@57| (LitInt 1)))))))))) :qid |SeqComparisonsdfy.14:23| :weight 3 :skolemid |3233| :pattern ( (SeqComparison.__default.lte ($LS $ly@@316) (Lit |a#0@@83|) |b#0@@57|)) ))))
(assert  (=> true (forall (($ly@@317 T@U) (|a#0@@84| T@U) (|b#0@@58| T@U) ) (!  (=> (and (and (and (= (type $ly@@317) LayerTypeType) (= (type |a#0@@84|) (SeqType BoxType))) (= (type |b#0@@58|) (SeqType BoxType))) (or (|SeqComparison.__default.lte#canCall| (Lit |a#0@@84|) (Lit |b#0@@58|)) (and ($Is |a#0@@84| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@58| (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (= (|Seq#Length| (Lit |a#0@@84|)) (LitInt 0))) (=> (not (= (|Seq#Length| (Lit |b#0@@58|)) (LitInt 0))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@58|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@84|) (LitInt 0))))) (=> (<= (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@84|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@58|) (LitInt 0))))) (|SeqComparison.__default.lte#canCall| (Lit (|Seq#Drop| (Lit |a#0@@84|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@58|) (LitInt 1)))))))) (= (SeqComparison.__default.lte ($LS $ly@@317) (Lit |a#0@@84|) (Lit |b#0@@58|)) (ite (= (|Seq#Length| (Lit |a#0@@84|)) (LitInt 0)) true (ite (= (|Seq#Length| (Lit |b#0@@58|)) (LitInt 0)) false (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@84|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@58|) (LitInt 0))))) true (ite (< (U_2_int ($Unbox intType (|Seq#Index| (Lit |b#0@@58|) (LitInt 0)))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |a#0@@84|) (LitInt 0))))) false (SeqComparison.__default.lte ($LS $ly@@317) (Lit (|Seq#Drop| (Lit |a#0@@84|) (LitInt 1))) (Lit (|Seq#Drop| (Lit |b#0@@58|) (LitInt 1))))))))))) :qid |SeqComparisonsdfy.14:23| :weight 3 :skolemid |3234| :pattern ( (SeqComparison.__default.lte ($LS $ly@@317) (Lit |a#0@@84|) (Lit |b#0@@58|))) ))))
(assert  (=> true (forall ((|a#0@@85| T@U) (|b#0@@59| T@U) ) (!  (=> (and (and (= (type |a#0@@85|) (SeqType BoxType)) (= (type |b#0@@59|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| |a#0@@85| |b#0@@59|) (and ($Is |a#0@@85| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@59| (TSeq Tclass.NativeTypes.byte))))) true) :qid |SeqComparisonsdfy.30:16| :skolemid |3235| :pattern ( (SeqComparison.__default.lt |a#0@@85| |b#0@@59|)) ))))
(assert (forall ((|a#0@@86| T@U) (|b#0@@60| T@U) ) (!  (=> (and (and (= (type |a#0@@86|) (SeqType BoxType)) (= (type |b#0@@60|) (SeqType BoxType))) (and ($Is |a#0@@86| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@60| (TSeq Tclass.NativeTypes.byte)))) (= (|SeqComparison.__default.lt#requires| |a#0@@86| |b#0@@60|) true)) :qid |SeqComparisonsdfy.30:16| :skolemid |3236| :pattern ( (|SeqComparison.__default.lt#requires| |a#0@@86| |b#0@@60|)) )))
(assert (= (type StartFuel_SeqComparison._default.lte) LayerTypeType))
(assert  (=> true (forall ((|a#0@@87| T@U) (|b#0@@61| T@U) ) (!  (=> (and (and (= (type |a#0@@87|) (SeqType BoxType)) (= (type |b#0@@61|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| |a#0@@87| |b#0@@61|) (and ($Is |a#0@@87| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@61| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| |a#0@@87| |b#0@@61|) (= (SeqComparison.__default.lt |a#0@@87| |b#0@@61|)  (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@87| |b#0@@61|) (not (|Seq#Equal| |a#0@@87| |b#0@@61|)))))) :qid |SeqComparisonsdfy.30:16| :skolemid |3237| :pattern ( (SeqComparison.__default.lt |a#0@@87| |b#0@@61|)) ))))
(assert  (=> true (forall ((|a#0@@88| T@U) (|b#0@@62| T@U) ) (!  (=> (and (and (= (type |a#0@@88|) (SeqType BoxType)) (= (type |b#0@@62|) (SeqType BoxType))) (or (|SeqComparison.__default.lt#canCall| (Lit |a#0@@88|) (Lit |b#0@@62|)) (and ($Is |a#0@@88| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@62| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| (Lit |a#0@@88|) (Lit |b#0@@62|)) (= (SeqComparison.__default.lt (Lit |a#0@@88|) (Lit |b#0@@62|))  (and (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@88|) (Lit |b#0@@62|)) (not (|Seq#Equal| |a#0@@88| |b#0@@62|)))))) :qid |SeqComparisonsdfy.30:16| :weight 3 :skolemid |3238| :pattern ( (SeqComparison.__default.lt (Lit |a#0@@88|) (Lit |b#0@@62|))) ))))
(assert (= (type Tclass.NativeArrays.__default) TyType))
(assert (= (Tag Tclass.NativeArrays.__default) Tagclass.NativeArrays.__default))
(assert (= (TagFamily Tclass.NativeArrays.__default) tytagFamily$_default))
(assert (forall ((bx@@171 T@U) ) (!  (=> (and (= (type bx@@171) BoxType) ($IsBox bx@@171 Tclass.NativeArrays.__default)) (and (= ($Box ($Unbox refType bx@@171)) bx@@171) ($Is ($Unbox refType bx@@171) Tclass.NativeArrays.__default))) :qid |unknown.0:0| :skolemid |3239| :pattern ( ($IsBox bx@@171 Tclass.NativeArrays.__default)) )))
(assert (forall (($o@@36 T@U) ) (!  (=> (= (type $o@@36) refType) (= ($Is $o@@36 Tclass.NativeArrays.__default)  (or (= $o@@36 null) (= (dtype $o@@36) Tclass.NativeArrays.__default)))) :qid |unknown.0:0| :skolemid |3240| :pattern ( ($Is $o@@36 Tclass.NativeArrays.__default)) )))
(assert (forall (($o@@37 T@U) ($h@@97 T@U) ) (!  (=> (and (= (type $o@@37) refType) (= (type $h@@97) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@37 Tclass.NativeArrays.__default $h@@97)  (or (= $o@@37 null) (U_2_bool (MapType1Select (MapType0Select $h@@97 $o@@37) alloc))))) :qid |unknown.0:0| :skolemid |3241| :pattern ( ($IsAlloc $o@@37 Tclass.NativeArrays.__default $h@@97)) )))
(assert (= (type Tclass.LinearMaybe.__default) TyType))
(assert (= (Tag Tclass.LinearMaybe.__default) Tagclass.LinearMaybe.__default))
(assert (= (TagFamily Tclass.LinearMaybe.__default) tytagFamily$_default))
(assert (forall ((bx@@172 T@U) ) (!  (=> (and (= (type bx@@172) BoxType) ($IsBox bx@@172 Tclass.LinearMaybe.__default)) (and (= ($Box ($Unbox refType bx@@172)) bx@@172) ($Is ($Unbox refType bx@@172) Tclass.LinearMaybe.__default))) :qid |unknown.0:0| :skolemid |3242| :pattern ( ($IsBox bx@@172 Tclass.LinearMaybe.__default)) )))
(assert (forall (($o@@38 T@U) ) (!  (=> (= (type $o@@38) refType) (= ($Is $o@@38 Tclass.LinearMaybe.__default)  (or (= $o@@38 null) (= (dtype $o@@38) Tclass.LinearMaybe.__default)))) :qid |unknown.0:0| :skolemid |3243| :pattern ( ($Is $o@@38 Tclass.LinearMaybe.__default)) )))
(assert (forall (($o@@39 T@U) ($h@@98 T@U) ) (!  (=> (and (= (type $o@@39) refType) (= (type $h@@98) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@39 Tclass.LinearMaybe.__default $h@@98)  (or (= $o@@39 null) (U_2_bool (MapType1Select (MapType0Select $h@@98 $o@@39) alloc))))) :qid |unknown.0:0| :skolemid |3244| :pattern ( ($IsAlloc $o@@39 Tclass.LinearMaybe.__default $h@@98)) )))
(assert (forall ((arg0@@578 T@U) ) (! (= (type (|#$maybe| arg0@@578)) TyType) :qid |funType:#$maybe| :pattern ( (|#$maybe| arg0@@578)) )))
(assert  (=> true (forall ((LinearMaybe._default.has$A T@U) (|m#0@@86| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.has$A) TyType) (= (type |m#0@@86|) BoxType)) (or (|LinearMaybe.__default.has#canCall| LinearMaybe._default.has$A |m#0@@86|) ($IsBox |m#0@@86| (|#$maybe| LinearMaybe._default.has$A)))) true) :qid |unknown.0:0| :skolemid |3245| :pattern ( (LinearMaybe.__default.has LinearMaybe._default.has$A |m#0@@86|)) ))))
(assert (forall ((LinearMaybe._default.has$A@@0 T@U) (|m#0@@87| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.has$A@@0) TyType) (= (type |m#0@@87|) BoxType)) ($IsBox |m#0@@87| (|#$maybe| LinearMaybe._default.has$A@@0))) (= (|LinearMaybe.__default.has#requires| LinearMaybe._default.has$A@@0 |m#0@@87|) true)) :qid |unknown.0:0| :skolemid |3246| :pattern ( (|LinearMaybe.__default.has#requires| LinearMaybe._default.has$A@@0 |m#0@@87|)) )))
(assert (forall ((arg0@@579 T@U) (arg1@@281 T@U) ) (! (= (type (LinearMaybe.__default.read arg0@@579 arg1@@281)) BoxType) :qid |funType:LinearMaybe.__default.read| :pattern ( (LinearMaybe.__default.read arg0@@579 arg1@@281)) )))
(assert  (=> true (forall ((LinearMaybe._default.read$A T@U) (|m#0@@88| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.read$A) TyType) (= (type |m#0@@88|) BoxType)) (or (|LinearMaybe.__default.read#canCall| LinearMaybe._default.read$A |m#0@@88|) ($IsBox |m#0@@88| (|#$maybe| LinearMaybe._default.read$A)))) ($IsBox (LinearMaybe.__default.read LinearMaybe._default.read$A |m#0@@88|) LinearMaybe._default.read$A)) :qid |unknown.0:0| :skolemid |3247| :pattern ( (LinearMaybe.__default.read LinearMaybe._default.read$A |m#0@@88|)) ))))
(assert (forall ((LinearMaybe._default.read$A@@0 T@U) (|m#0@@89| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.read$A@@0) TyType) (= (type |m#0@@89|) BoxType)) ($IsBox |m#0@@89| (|#$maybe| LinearMaybe._default.read$A@@0))) (= (|LinearMaybe.__default.read#requires| LinearMaybe._default.read$A@@0 |m#0@@89|) true)) :qid |unknown.0:0| :skolemid |3248| :pattern ( (|LinearMaybe.__default.read#requires| LinearMaybe._default.read$A@@0 |m#0@@89|)) )))
(assert (forall ((arg0@@580 T@U) (arg1@@282 T@U) ) (! (= (type (LinearMaybe.__default.peek arg0@@580 arg1@@282)) BoxType) :qid |funType:LinearMaybe.__default.peek| :pattern ( (LinearMaybe.__default.peek arg0@@580 arg1@@282)) )))
(assert  (=> true (forall ((LinearMaybe._default.peek$A T@U) (|m#0@@90| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.peek$A) TyType) (= (type |m#0@@90|) BoxType)) (or (|LinearMaybe.__default.peek#canCall| LinearMaybe._default.peek$A |m#0@@90|) (and ($IsBox |m#0@@90| (|#$maybe| LinearMaybe._default.peek$A)) (LinearMaybe.__default.has LinearMaybe._default.peek$A |m#0@@90|)))) (and (= (LinearMaybe.__default.peek LinearMaybe._default.peek$A |m#0@@90|) (LinearMaybe.__default.read LinearMaybe._default.peek$A |m#0@@90|)) ($IsBox (LinearMaybe.__default.peek LinearMaybe._default.peek$A |m#0@@90|) LinearMaybe._default.peek$A))) :qid |unknown.0:0| :skolemid |3249| :pattern ( (LinearMaybe.__default.peek LinearMaybe._default.peek$A |m#0@@90|)) ))))
(assert (forall ((LinearMaybe._default.peek$A@@0 T@U) (|m#0@@91| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.peek$A@@0) TyType) (= (type |m#0@@91|) BoxType)) ($IsBox |m#0@@91| (|#$maybe| LinearMaybe._default.peek$A@@0))) (= (|LinearMaybe.__default.peek#requires| LinearMaybe._default.peek$A@@0 |m#0@@91|) (LinearMaybe.__default.has LinearMaybe._default.peek$A@@0 |m#0@@91|))) :qid |unknown.0:0| :skolemid |3250| :pattern ( (|LinearMaybe.__default.peek#requires| LinearMaybe._default.peek$A@@0 |m#0@@91|)) )))
(assert (forall ((arg0@@581 T@U) (arg1@@283 T@U) ) (! (= (type (LinearMaybe.__default.unwrap arg0@@581 arg1@@283)) BoxType) :qid |funType:LinearMaybe.__default.unwrap| :pattern ( (LinearMaybe.__default.unwrap arg0@@581 arg1@@283)) )))
(assert  (=> true (forall ((LinearMaybe._default.unwrap$A T@U) (|m#0@@92| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.unwrap$A) TyType) (= (type |m#0@@92|) BoxType)) (or (|LinearMaybe.__default.unwrap#canCall| LinearMaybe._default.unwrap$A |m#0@@92|) (and ($IsBox |m#0@@92| (|#$maybe| LinearMaybe._default.unwrap$A)) (LinearMaybe.__default.has LinearMaybe._default.unwrap$A |m#0@@92|)))) (and (= (LinearMaybe.__default.unwrap LinearMaybe._default.unwrap$A |m#0@@92|) (LinearMaybe.__default.read LinearMaybe._default.unwrap$A |m#0@@92|)) ($IsBox (LinearMaybe.__default.unwrap LinearMaybe._default.unwrap$A |m#0@@92|) LinearMaybe._default.unwrap$A))) :qid |unknown.0:0| :skolemid |3251| :pattern ( (LinearMaybe.__default.unwrap LinearMaybe._default.unwrap$A |m#0@@92|)) ))))
(assert (forall ((LinearMaybe._default.unwrap$A@@0 T@U) (|m#0@@93| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.unwrap$A@@0) TyType) (= (type |m#0@@93|) BoxType)) ($IsBox |m#0@@93| (|#$maybe| LinearMaybe._default.unwrap$A@@0))) (= (|LinearMaybe.__default.unwrap#requires| LinearMaybe._default.unwrap$A@@0 |m#0@@93|) (LinearMaybe.__default.has LinearMaybe._default.unwrap$A@@0 |m#0@@93|))) :qid |unknown.0:0| :skolemid |3252| :pattern ( (|LinearMaybe.__default.unwrap#requires| LinearMaybe._default.unwrap$A@@0 |m#0@@93|)) )))
(assert (forall ((arg0@@582 T@U) (arg1@@284 T@U) (arg2@@200 T@U) ) (! (= (type (LinearMaybe.__default.give arg0@@582 arg1@@284 arg2@@200)) BoxType) :qid |funType:LinearMaybe.__default.give| :pattern ( (LinearMaybe.__default.give arg0@@582 arg1@@284 arg2@@200)) )))
(assert (forall ((LinearMaybe._default.give$A T@U) ($ly@@318 T@U) (|a#0@@89| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.give$A) TyType) (= (type $ly@@318) LayerTypeType)) (= (type |a#0@@89|) BoxType)) (= (LinearMaybe.__default.give LinearMaybe._default.give$A ($LS $ly@@318) |a#0@@89|) (LinearMaybe.__default.give LinearMaybe._default.give$A $ly@@318 |a#0@@89|))) :qid |unknown.0:0| :skolemid |3253| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A ($LS $ly@@318) |a#0@@89|)) )))
(assert (forall ((LinearMaybe._default.give$A@@0 T@U) ($ly@@319 T@U) (|a#0@@90| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.give$A@@0) TyType) (= (type $ly@@319) LayerTypeType)) (= (type |a#0@@90|) BoxType)) (= (LinearMaybe.__default.give LinearMaybe._default.give$A@@0 $ly@@319 |a#0@@90|) (LinearMaybe.__default.give LinearMaybe._default.give$A@@0 $LZ |a#0@@90|))) :qid |unknown.0:0| :skolemid |3254| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A@@0 (AsFuelBottom $ly@@319) |a#0@@90|)) )))
(assert  (=> true (forall ((LinearMaybe._default.give$A@@1 T@U) ($ly@@320 T@U) (|a#0@@91| T@U) ) (!  (=> (and (and (and (= (type LinearMaybe._default.give$A@@1) TyType) (= (type $ly@@320) LayerTypeType)) (= (type |a#0@@91|) BoxType)) (or (|LinearMaybe.__default.give#canCall| LinearMaybe._default.give$A@@1 |a#0@@91|) ($IsBox |a#0@@91| LinearMaybe._default.give$A@@1))) (and (and (and (LinearMaybe.__default.has LinearMaybe._default.give$A@@1 (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@320 |a#0@@91|)) (= (LinearMaybe.__default.read LinearMaybe._default.give$A@@1 (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@320 |a#0@@91|)) |a#0@@91|)) (forall ((|x#0@@1| T@U) ) (!  (=> (= (type |x#0@@1|) BoxType) (=> (and ($IsBox |x#0@@1| (|#$maybe| LinearMaybe._default.give$A@@1)) (and (LinearMaybe.__default.has LinearMaybe._default.give$A@@1 |x#0@@1|) (= |a#0@@91| (LinearMaybe.__default.read LinearMaybe._default.give$A@@1 |x#0@@1|)))) (= (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@320 |a#0@@91|) |x#0@@1|))) :qid |LinearMaybesdfy.25:20| :skolemid |3255| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@320 (LinearMaybe.__default.read LinearMaybe._default.give$A@@1 |x#0@@1|))) ))) ($IsBox (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@320 |a#0@@91|) (|#$maybe| LinearMaybe._default.give$A@@1)))) :qid |unknown.0:0| :skolemid |3256| :pattern ( (LinearMaybe.__default.give LinearMaybe._default.give$A@@1 $ly@@320 |a#0@@91|)) ))))
(assert (forall ((LinearMaybe._default.give$A@@2 T@U) ($ly@@321 T@U) (|a#0@@92| T@U) ) (!  (=> (and (and (and (= (type LinearMaybe._default.give$A@@2) TyType) (= (type $ly@@321) LayerTypeType)) (= (type |a#0@@92|) BoxType)) ($IsBox |a#0@@92| LinearMaybe._default.give$A@@2)) (= (|LinearMaybe.__default.give#requires| LinearMaybe._default.give$A@@2 $ly@@321 |a#0@@92|) true)) :qid |unknown.0:0| :skolemid |3257| :pattern ( (|LinearMaybe.__default.give#requires| LinearMaybe._default.give$A@@2 $ly@@321 |a#0@@92|)) )))
(assert (forall ((arg0@@583 T@U) ) (! (= (type (LinearMaybe.__default.empty arg0@@583)) BoxType) :qid |funType:LinearMaybe.__default.empty| :pattern ( (LinearMaybe.__default.empty arg0@@583)) )))
(assert  (=> true (forall ((LinearMaybe._default.empty$A T@U) ) (!  (=> (and (= (type LinearMaybe._default.empty$A) TyType) true) (and (not (LinearMaybe.__default.has LinearMaybe._default.empty$A (LinearMaybe.__default.empty LinearMaybe._default.empty$A))) ($IsBox (LinearMaybe.__default.empty LinearMaybe._default.empty$A) (|#$maybe| LinearMaybe._default.empty$A)))) :qid |unknown.0:0| :skolemid |3258| :pattern ( (LinearMaybe.__default.empty LinearMaybe._default.empty$A)) ))))
(assert (forall ((LinearMaybe._default.empty$A@@0 T@U) ) (!  (=> (= (type LinearMaybe._default.empty$A@@0) TyType) (= (|LinearMaybe.__default.empty#requires| LinearMaybe._default.empty$A@@0) true)) :qid |unknown.0:0| :skolemid |3259| :pattern ( (|LinearMaybe.__default.empty#requires| LinearMaybe._default.empty$A@@0)) )))
(assert (forall ((arg0@@584 T@U) (arg1@@285 T@U) ) (! (= (type (LinearMaybe.__default.discard arg0@@584 arg1@@285)) DatatypeTypeType) :qid |funType:LinearMaybe.__default.discard| :pattern ( (LinearMaybe.__default.discard arg0@@584 arg1@@285)) )))
(assert  (=> true (forall ((LinearMaybe._default.discard$A T@U) (|m#0@@94| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.discard$A) TyType) (= (type |m#0@@94|) BoxType)) (or (|LinearMaybe.__default.discard#canCall| LinearMaybe._default.discard$A |m#0@@94|) (and ($IsBox |m#0@@94| (|#$maybe| LinearMaybe._default.discard$A)) (not (LinearMaybe.__default.has LinearMaybe._default.discard$A |m#0@@94|))))) ($Is (LinearMaybe.__default.discard LinearMaybe._default.discard$A |m#0@@94|) Tclass._System.Tuple0)) :qid |unknown.0:0| :skolemid |3260| :pattern ( (LinearMaybe.__default.discard LinearMaybe._default.discard$A |m#0@@94|)) ))))
(assert (forall ((LinearMaybe._default.discard$A@@0 T@U) (|m#0@@95| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.discard$A@@0) TyType) (= (type |m#0@@95|) BoxType)) ($IsBox |m#0@@95| (|#$maybe| LinearMaybe._default.discard$A@@0))) (= (|LinearMaybe.__default.discard#requires| LinearMaybe._default.discard$A@@0 |m#0@@95|)  (not (LinearMaybe.__default.has LinearMaybe._default.discard$A@@0 |m#0@@95|)))) :qid |unknown.0:0| :skolemid |3261| :pattern ( (|LinearMaybe.__default.discard#requires| LinearMaybe._default.discard$A@@0 |m#0@@95|)) )))
(assert (forall ((arg0@@585 T@U) (arg1@@286 Bool) (arg2@@201 T@U) ) (! (= (type (LinearMaybe.__default.imagine arg0@@585 arg1@@286 arg2@@201)) BoxType) :qid |funType:LinearMaybe.__default.imagine| :pattern ( (LinearMaybe.__default.imagine arg0@@585 arg1@@286 arg2@@201)) )))
(assert  (=> true (forall ((LinearMaybe._default.imagine$A T@U) (|h#0| Bool) (|a#0@@93| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.imagine$A) TyType) (= (type |a#0@@93|) BoxType)) (or (|LinearMaybe.__default.imagine#canCall| LinearMaybe._default.imagine$A |h#0| |a#0@@93|) ($IsBox |a#0@@93| LinearMaybe._default.imagine$A))) (and (and (= (LinearMaybe.__default.has LinearMaybe._default.imagine$A (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@93|)) |h#0|) (= (LinearMaybe.__default.read LinearMaybe._default.imagine$A (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@93|)) |a#0@@93|)) ($IsBox (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@93|) (|#$maybe| LinearMaybe._default.imagine$A)))) :qid |unknown.0:0| :skolemid |3262| :pattern ( (LinearMaybe.__default.imagine LinearMaybe._default.imagine$A |h#0| |a#0@@93|)) ))))
(assert (forall ((LinearMaybe._default.imagine$A@@0 T@U) (|h#0@@0| Bool) (|a#0@@94| T@U) ) (!  (=> (and (and (= (type LinearMaybe._default.imagine$A@@0) TyType) (= (type |a#0@@94|) BoxType)) ($IsBox |a#0@@94| LinearMaybe._default.imagine$A@@0)) (= (|LinearMaybe.__default.imagine#requires| LinearMaybe._default.imagine$A@@0 |h#0@@0| |a#0@@94|) true)) :qid |unknown.0:0| :skolemid |3263| :pattern ( (|LinearMaybe.__default.imagine#requires| LinearMaybe._default.imagine$A@@0 |h#0@@0| |a#0@@94|)) )))
(assert (= (type Tclass.LinearExtern.__default) TyType))
(assert (= (Tag Tclass.LinearExtern.__default) Tagclass.LinearExtern.__default))
(assert (= (TagFamily Tclass.LinearExtern.__default) tytagFamily$_default))
(assert (forall ((bx@@173 T@U) ) (!  (=> (and (= (type bx@@173) BoxType) ($IsBox bx@@173 Tclass.LinearExtern.__default)) (and (= ($Box ($Unbox refType bx@@173)) bx@@173) ($Is ($Unbox refType bx@@173) Tclass.LinearExtern.__default))) :qid |unknown.0:0| :skolemid |3264| :pattern ( ($IsBox bx@@173 Tclass.LinearExtern.__default)) )))
(assert (forall (($o@@40 T@U) ) (!  (=> (= (type $o@@40) refType) (= ($Is $o@@40 Tclass.LinearExtern.__default)  (or (= $o@@40 null) (= (dtype $o@@40) Tclass.LinearExtern.__default)))) :qid |unknown.0:0| :skolemid |3265| :pattern ( ($Is $o@@40 Tclass.LinearExtern.__default)) )))
(assert (forall (($o@@41 T@U) ($h@@99 T@U) ) (!  (=> (and (= (type $o@@41) refType) (= (type $h@@99) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@41 Tclass.LinearExtern.__default $h@@99)  (or (= $o@@41 null) (U_2_bool (MapType1Select (MapType0Select $h@@99 $o@@41) alloc))))) :qid |unknown.0:0| :skolemid |3266| :pattern ( ($IsAlloc $o@@41 Tclass.LinearExtern.__default $h@@99)) )))
(assert (forall ((arg0@@586 T@U) (arg1@@287 T@U) (arg2@@202 Int) ) (! (= (type (LinearExtern.__default.seq_get arg0@@586 arg1@@287 arg2@@202)) BoxType) :qid |funType:LinearExtern.__default.seq_get| :pattern ( (LinearExtern.__default.seq_get arg0@@586 arg1@@287 arg2@@202)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_get$A T@U) (|s#0@@53| T@U) (|i#0@@81| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_get$A) TyType) (= (type |s#0@@53|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_get#canCall| LinearSequence_s._default.seq_get$A |s#0@@53| |i#0@@81|) (and (and ($Is |s#0@@53| (TSeq LinearSequence_s._default.seq_get$A)) (and (<= (LitInt 0) |i#0@@81|) (< |i#0@@81| 18446744073709551616))) (< |i#0@@81| (|Seq#Length| |s#0@@53|))))) (and (= (LinearExtern.__default.seq_get LinearSequence_s._default.seq_get$A |s#0@@53| |i#0@@81|) (|Seq#Index| |s#0@@53| |i#0@@81|)) ($IsBox (LinearExtern.__default.seq_get LinearSequence_s._default.seq_get$A |s#0@@53| |i#0@@81|) LinearSequence_s._default.seq_get$A))) :qid |unknown.0:0| :skolemid |3267| :pattern ( (LinearExtern.__default.seq_get LinearSequence_s._default.seq_get$A |s#0@@53| |i#0@@81|)) ))))
(assert (forall ((LinearSequence_s._default.seq_get$A@@0 T@U) (|s#0@@54| T@U) (|i#0@@82| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_get$A@@0) TyType) (= (type |s#0@@54|) (SeqType BoxType))) (and ($Is |s#0@@54| (TSeq LinearSequence_s._default.seq_get$A@@0)) (and (<= (LitInt 0) |i#0@@82|) (< |i#0@@82| 18446744073709551616)))) (= (|LinearExtern.__default.seq_get#requires| LinearSequence_s._default.seq_get$A@@0 |s#0@@54| |i#0@@82|) (< |i#0@@82| (|Seq#Length| |s#0@@54|)))) :qid |unknown.0:0| :skolemid |3268| :pattern ( (|LinearExtern.__default.seq_get#requires| LinearSequence_s._default.seq_get$A@@0 |s#0@@54| |i#0@@82|)) )))
(assert (forall ((arg0@@587 T@U) (arg1@@288 T@U) (arg2@@203 Int) (arg3@@149 T@U) ) (! (= (type (LinearExtern.__default.seq_set arg0@@587 arg1@@288 arg2@@203 arg3@@149)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_set| :pattern ( (LinearExtern.__default.seq_set arg0@@587 arg1@@288 arg2@@203 arg3@@149)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_set$A T@U) (|s1#0| T@U) (|i#0@@83| Int) (|a#0@@95| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.seq_set$A) TyType) (= (type |s1#0|) (SeqType BoxType))) (= (type |a#0@@95|) BoxType)) (or (|LinearExtern.__default.seq_set#canCall| LinearSequence_s._default.seq_set$A |s1#0| |i#0@@83| |a#0@@95|) (and (and (and ($Is |s1#0| (TSeq LinearSequence_s._default.seq_set$A)) (and (<= (LitInt 0) |i#0@@83|) (< |i#0@@83| 18446744073709551616))) ($IsBox |a#0@@95| LinearSequence_s._default.seq_set$A)) (< |i#0@@83| (|Seq#Length| |s1#0|))))) (and (|Seq#Equal| (LinearExtern.__default.seq_set LinearSequence_s._default.seq_set$A |s1#0| |i#0@@83| |a#0@@95|) (|Seq#Update| |s1#0| |i#0@@83| |a#0@@95|)) ($Is (LinearExtern.__default.seq_set LinearSequence_s._default.seq_set$A |s1#0| |i#0@@83| |a#0@@95|) (TSeq LinearSequence_s._default.seq_set$A)))) :qid |unknown.0:0| :skolemid |3269| :pattern ( (LinearExtern.__default.seq_set LinearSequence_s._default.seq_set$A |s1#0| |i#0@@83| |a#0@@95|)) ))))
(assert (forall ((LinearSequence_s._default.seq_set$A@@0 T@U) (|s1#0@@0| T@U) (|i#0@@84| Int) (|a#0@@96| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.seq_set$A@@0) TyType) (= (type |s1#0@@0|) (SeqType BoxType))) (= (type |a#0@@96|) BoxType)) (and (and ($Is |s1#0@@0| (TSeq LinearSequence_s._default.seq_set$A@@0)) (and (<= (LitInt 0) |i#0@@84|) (< |i#0@@84| 18446744073709551616))) ($IsBox |a#0@@96| LinearSequence_s._default.seq_set$A@@0))) (= (|LinearExtern.__default.seq_set#requires| LinearSequence_s._default.seq_set$A@@0 |s1#0@@0| |i#0@@84| |a#0@@96|) (< |i#0@@84| (|Seq#Length| |s1#0@@0|)))) :qid |unknown.0:0| :skolemid |3270| :pattern ( (|LinearExtern.__default.seq_set#requires| LinearSequence_s._default.seq_set$A@@0 |s1#0@@0| |i#0@@84| |a#0@@96|)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_length$A T@U) (|s#0@@55| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_length$A) TyType) (= (type |s#0@@55|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_length#canCall| LinearSequence_s._default.seq_length$A |s#0@@55|) (and ($Is |s#0@@55| (TSeq LinearSequence_s._default.seq_length$A)) (<= (|Seq#Length| |s#0@@55|) (LitInt 18446744073709551615))))) (and (= (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@55|) (|Seq#Length| |s#0@@55|)) (and (<= (LitInt 0) (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@55|)) (< (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@55|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |3271| :pattern ( (LinearExtern.__default.seq_length LinearSequence_s._default.seq_length$A |s#0@@55|)) ))))
(assert (forall ((LinearSequence_s._default.seq_length$A@@0 T@U) (|s#0@@56| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_length$A@@0) TyType) (= (type |s#0@@56|) (SeqType BoxType))) ($Is |s#0@@56| (TSeq LinearSequence_s._default.seq_length$A@@0))) (= (|LinearExtern.__default.seq_length#requires| LinearSequence_s._default.seq_length$A@@0 |s#0@@56|) (<= (|Seq#Length| |s#0@@56|) (LitInt 18446744073709551615)))) :qid |unknown.0:0| :skolemid |3272| :pattern ( (|LinearExtern.__default.seq_length#requires| LinearSequence_s._default.seq_length$A@@0 |s#0@@56|)) )))
(assert (forall ((arg0@@588 T@U) ) (! (= (type (LinearExtern.__default.seq_empty arg0@@588)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_empty| :pattern ( (LinearExtern.__default.seq_empty arg0@@588)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_empty$A T@U) ) (!  (=> (and (= (type LinearSequence_s._default.seq_empty$A) TyType) true) (and (= (|Seq#Length| (LinearExtern.__default.seq_empty LinearSequence_s._default.seq_empty$A)) (LitInt 0)) ($Is (LinearExtern.__default.seq_empty LinearSequence_s._default.seq_empty$A) (TSeq LinearSequence_s._default.seq_empty$A)))) :qid |unknown.0:0| :skolemid |3273| :pattern ( (LinearExtern.__default.seq_empty LinearSequence_s._default.seq_empty$A)) ))))
(assert (forall ((LinearSequence_s._default.seq_empty$A@@0 T@U) ) (!  (=> (= (type LinearSequence_s._default.seq_empty$A@@0) TyType) (= (|LinearExtern.__default.seq_empty#requires| LinearSequence_s._default.seq_empty$A@@0) true)) :qid |unknown.0:0| :skolemid |3274| :pattern ( (|LinearExtern.__default.seq_empty#requires| LinearSequence_s._default.seq_empty$A@@0)) )))
(assert (forall ((arg0@@589 T@U) (arg1@@289 Int) (arg2@@204 T@U) ) (! (= (type (LinearExtern.__default.seq_alloc arg0@@589 arg1@@289 arg2@@204)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_alloc| :pattern ( (LinearExtern.__default.seq_alloc arg0@@589 arg1@@289 arg2@@204)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_alloc$A T@U) (|length#0@@6| Int) (|a#0@@97| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_alloc$A) TyType) (= (type |a#0@@97|) BoxType)) (or (|LinearExtern.__default.seq_alloc#canCall| LinearSequence_s._default.seq_alloc$A |length#0@@6| |a#0@@97|) (and (and (<= (LitInt 0) |length#0@@6|) (< |length#0@@6| 18446744073709551616)) ($IsBox |a#0@@97| LinearSequence_s._default.seq_alloc$A)))) (and (and (= (|Seq#Length| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@6| |a#0@@97|)) |length#0@@6|) (forall ((|i#0@@85| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@85|) (< |i#0@@85| (|Seq#Length| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@6| |a#0@@97|)))) (= (|Seq#Index| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@6| |a#0@@97|) |i#0@@85|) |a#0@@97|))) :qid |LinearSequencesdfy.32:20| :skolemid |3275| :pattern ( (|Seq#Index| (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@6| |a#0@@97|) |i#0@@85|)) ))) ($Is (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@6| |a#0@@97|) (TSeq LinearSequence_s._default.seq_alloc$A)))) :qid |unknown.0:0| :skolemid |3276| :pattern ( (LinearExtern.__default.seq_alloc LinearSequence_s._default.seq_alloc$A |length#0@@6| |a#0@@97|)) ))))
(assert (forall ((LinearSequence_s._default.seq_alloc$A@@0 T@U) (|length#0@@7| Int) (|a#0@@98| T@U) ) (!  (=> (and (= (type LinearSequence_s._default.seq_alloc$A@@0) TyType) (= (type |a#0@@98|) BoxType)) (=> (and (and (<= (LitInt 0) |length#0@@7|) (< |length#0@@7| 18446744073709551616)) ($IsBox |a#0@@98| LinearSequence_s._default.seq_alloc$A@@0)) (= (|LinearExtern.__default.seq_alloc#requires| LinearSequence_s._default.seq_alloc$A@@0 |length#0@@7| |a#0@@98|) true))) :qid |unknown.0:0| :skolemid |3277| :pattern ( (|LinearExtern.__default.seq_alloc#requires| LinearSequence_s._default.seq_alloc$A@@0 |length#0@@7| |a#0@@98|)) )))
(assert (forall ((arg0@@590 T@U) (arg1@@290 T@U) ) (! (= (type (LinearExtern.__default.seq_free arg0@@590 arg1@@290)) DatatypeTypeType) :qid |funType:LinearExtern.__default.seq_free| :pattern ( (LinearExtern.__default.seq_free arg0@@590 arg1@@290)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_free$A T@U) (|s#0@@57| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_free$A) TyType) (= (type |s#0@@57|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_free#canCall| LinearSequence_s._default.seq_free$A |s#0@@57|) ($Is |s#0@@57| (TSeq LinearSequence_s._default.seq_free$A)))) ($Is (LinearExtern.__default.seq_free LinearSequence_s._default.seq_free$A |s#0@@57|) Tclass._System.Tuple0)) :qid |unknown.0:0| :skolemid |3278| :pattern ( (LinearExtern.__default.seq_free LinearSequence_s._default.seq_free$A |s#0@@57|)) ))))
(assert (forall ((LinearSequence_s._default.seq_free$A@@0 T@U) (|s#0@@58| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_free$A@@0) TyType) (= (type |s#0@@58|) (SeqType BoxType))) ($Is |s#0@@58| (TSeq LinearSequence_s._default.seq_free$A@@0))) (= (|LinearExtern.__default.seq_free#requires| LinearSequence_s._default.seq_free$A@@0 |s#0@@58|) true)) :qid |unknown.0:0| :skolemid |3279| :pattern ( (|LinearExtern.__default.seq_free#requires| LinearSequence_s._default.seq_free$A@@0 |s#0@@58|)) )))
(assert (forall ((arg0@@591 T@U) (arg1@@291 T@U) ) (! (= (type (LinearExtern.__default.seq_unleash arg0@@591 arg1@@291)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.seq_unleash| :pattern ( (LinearExtern.__default.seq_unleash arg0@@591 arg1@@291)) )))
(assert  (=> true (forall ((LinearSequence_s._default.seq_unleash$A T@U) (|s1#0@@1| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_unleash$A) TyType) (= (type |s1#0@@1|) (SeqType BoxType))) (or (|LinearExtern.__default.seq_unleash#canCall| LinearSequence_s._default.seq_unleash$A |s1#0@@1|) ($Is |s1#0@@1| (TSeq LinearSequence_s._default.seq_unleash$A)))) (and (|Seq#Equal| |s1#0@@1| (LinearExtern.__default.seq_unleash LinearSequence_s._default.seq_unleash$A |s1#0@@1|)) ($Is (LinearExtern.__default.seq_unleash LinearSequence_s._default.seq_unleash$A |s1#0@@1|) (TSeq LinearSequence_s._default.seq_unleash$A)))) :qid |unknown.0:0| :skolemid |3280| :pattern ( (LinearExtern.__default.seq_unleash LinearSequence_s._default.seq_unleash$A |s1#0@@1|)) ))))
(assert (forall ((LinearSequence_s._default.seq_unleash$A@@0 T@U) (|s1#0@@2| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.seq_unleash$A@@0) TyType) (= (type |s1#0@@2|) (SeqType BoxType))) ($Is |s1#0@@2| (TSeq LinearSequence_s._default.seq_unleash$A@@0))) (= (|LinearExtern.__default.seq_unleash#requires| LinearSequence_s._default.seq_unleash$A@@0 |s1#0@@2|) true)) :qid |unknown.0:0| :skolemid |3281| :pattern ( (|LinearExtern.__default.seq_unleash#requires| LinearSequence_s._default.seq_unleash$A@@0 |s1#0@@2|)) )))
(assert  (and (forall ((arg0@@592 T@U) (arg1@@292 T@U) ) (! (= (type (LinearExtern.__default.lseqs__raw arg0@@592 arg1@@292)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.lseqs__raw| :pattern ( (LinearExtern.__default.lseqs__raw arg0@@592 arg1@@292)) )) (forall ((arg0@@593 T@U) ) (! (= (type (|#$lseq| arg0@@593)) TyType) :qid |funType:#$lseq| :pattern ( (|#$lseq| arg0@@593)) ))))
(assert  (=> true (forall ((LinearSequence_s._default.lseqs_raw$A T@U) (|l#0| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseqs_raw$A) TyType) (= (type |l#0|) BoxType)) (or (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseqs_raw$A |l#0|) ($IsBox |l#0| (|#$lseq| LinearSequence_s._default.lseqs_raw$A)))) ($Is (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseqs_raw$A |l#0|) (TSeq (|#$maybe| LinearSequence_s._default.lseqs_raw$A)))) :qid |unknown.0:0| :skolemid |3282| :pattern ( (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseqs_raw$A |l#0|)) ))))
(assert (forall ((LinearSequence_s._default.lseqs_raw$A@@0 T@U) (|l#0@@0| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseqs_raw$A@@0) TyType) (= (type |l#0@@0|) BoxType)) ($IsBox |l#0@@0| (|#$lseq| LinearSequence_s._default.lseqs_raw$A@@0))) (= (|LinearExtern.__default.lseqs__raw#requires| LinearSequence_s._default.lseqs_raw$A@@0 |l#0@@0|) true)) :qid |unknown.0:0| :skolemid |3283| :pattern ( (|LinearExtern.__default.lseqs__raw#requires| LinearSequence_s._default.lseqs_raw$A@@0 |l#0@@0|)) )))
(assert (forall ((arg0@@594 T@U) (arg1@@293 T@U) ) (! (= (type (LinearExtern.__default.lseq__has arg0@@594 arg1@@293)) (SeqType BoxType)) :qid |funType:LinearExtern.__default.lseq__has| :pattern ( (LinearExtern.__default.lseq__has arg0@@594 arg1@@293)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_has$A T@U) (|l#0@@1| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_has$A) TyType) (= (type |l#0@@1|) BoxType)) (or (|LinearExtern.__default.lseq__has#canCall| LinearSequence_s._default.lseq_has$A |l#0@@1|) ($IsBox |l#0@@1| (|#$lseq| LinearSequence_s._default.lseq_has$A)))) (and (= (|Seq#Length| (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A |l#0@@1|)) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A |l#0@@1|))) ($Is (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A |l#0@@1|) (TSeq TBool)))) :qid |unknown.0:0| :skolemid |3284| :pattern ( (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A |l#0@@1|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_has$A@@0 T@U) ($Heap@@40 T@U) (|l#0@@2| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_has$A@@0) TyType) (= (type $Heap@@40) (MapType0Type refType MapType1Type))) (= (type |l#0@@2|) BoxType)) (and ($IsGoodHeap $Heap@@40) ($IsBox |l#0@@2| (|#$lseq| LinearSequence_s._default.lseq_has$A@@0)))) (= (|LinearExtern.__default.lseq__has#requires| LinearSequence_s._default.lseq_has$A@@0 |l#0@@2|) true)) :qid |unknown.0:0| :skolemid |3285| :pattern ( (|LinearExtern.__default.lseq__has#requires| LinearSequence_s._default.lseq_has$A@@0 |l#0@@2|) ($IsGoodHeap $Heap@@40)) )))
(assert  (and (and (and (and (forall ((arg0@@595 T@U) ) (! (= (type (|lambda#164| arg0@@595)) (MapType0Type LayerTypeType HandleTypeType)) :qid |funType:lambda#164| :pattern ( (|lambda#164| arg0@@595)) )) (forall ((arg0@@596 T@U) (arg1@@294 T@U) ) (! (= (type (|lambda#160| arg0@@596 arg1@@294)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#160| :pattern ( (|lambda#160| arg0@@596 arg1@@294)) ))) (forall ((arg0@@597 T@U) (arg1@@295 Int) (arg2@@205 Int) ) (! (= (type (|lambda#161| arg0@@597 arg1@@295 arg2@@205)) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType)) :qid |funType:lambda#161| :pattern ( (|lambda#161| arg0@@597 arg1@@295 arg2@@205)) ))) (forall ((arg0@@598 T@U) ) (! (= (type (|lambda#163| arg0@@598)) (MapType2Type (MapType0Type refType MapType1Type) BoxType (MapType0Type BoxType boolType))) :qid |funType:lambda#163| :pattern ( (|lambda#163| arg0@@598)) ))) (forall ((arg0@@599 Bool) ) (! (= (type (|lambda#162| arg0@@599)) (MapType0Type refType boolType)) :qid |funType:lambda#162| :pattern ( (|lambda#162| arg0@@599)) ))))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_has$A@@1 T@U) ($Heap@@41 T@U) (|l#0@@3| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_has$A@@1) TyType) (= (type $Heap@@41) (MapType0Type refType MapType1Type))) (= (type |l#0@@3|) BoxType)) (or (|LinearExtern.__default.lseq__has#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) (and ($IsGoodHeap $Heap@@41) ($IsBox |l#0@@3| (|#$lseq| LinearSequence_s._default.lseq_has$A@@1))))) (and (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) (forall ((|$l#1#i#0| Int) ) (!  (and (=> (<= (LitInt 0) |$l#1#i#0|) (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|)) (=> (and (<= (LitInt 0) |$l#1#i#0|) (< |$l#1#i#0| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|)))) (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) (|LinearMaybe.__default.has#canCall| LinearSequence_s._default.lseq_has$A@@1 (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) |$l#1#i#0|))))) :qid |unknown.0:0| :skolemid |3286| ))) (= (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) (|Seq#Create| TBool $Heap@@41 (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|)) (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#160| LinearSequence_s._default.lseq_has$A@@1 (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|)) (|lambda#161| TInt (LitInt 0) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|))) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ))))))) :qid |unknown.0:0| :skolemid |3287| :pattern ( (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@1 |l#0@@3|) ($IsGoodHeap $Heap@@41)) ))))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_has$A@@2 T@U) ($Heap@@42 T@U) (|l#0@@4| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_has$A@@2) TyType) (= (type $Heap@@42) (MapType0Type refType MapType1Type))) (= (type |l#0@@4|) BoxType)) (or (|LinearExtern.__default.lseq__has#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) (and ($IsGoodHeap $Heap@@42) ($IsBox |l#0@@4| (|#$lseq| LinearSequence_s._default.lseq_has$A@@2))))) (and (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) (forall ((|$l#3#i#0| Int) ) (!  (and (=> (<= (LitInt 0) |$l#3#i#0|) (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|))) (=> (and (<= (LitInt 0) |$l#3#i#0|) (< |$l#3#i#0| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|))))) (and (|LinearExtern.__default.lseqs__raw#canCall| LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) (|LinearMaybe.__default.has#canCall| LinearSequence_s._default.lseq_has$A@@2 (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) |$l#3#i#0|))))) :qid |unknown.0:0| :skolemid |3288| ))) (= (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) (|Seq#Create| TBool $Heap@@42 (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|))) (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#160| LinearSequence_s._default.lseq_has$A@@2 (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|))) (|lambda#161| TInt (LitInt 0) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)))) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ))))))) :qid |unknown.0:0| :weight 3 :skolemid |3289| :pattern ( (LinearExtern.__default.lseq__has LinearSequence_s._default.lseq_has$A@@2 (Lit |l#0@@4|)) ($IsGoodHeap $Heap@@42)) ))))
(assert (forall ((arg0@@600 T@U) (arg1@@296 T@U) ) (! (= (type (LinearExtern.__default.imagine__lseq__raw arg0@@600 arg1@@296)) BoxType) :qid |funType:LinearExtern.__default.imagine__lseq__raw| :pattern ( (LinearExtern.__default.imagine__lseq__raw arg0@@600 arg1@@296)) )))
(assert  (=> true (forall ((LinearSequence_s._default.imagine_lseq_raw$A T@U) (|s#0@@59| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.imagine_lseq_raw$A) TyType) (= (type |s#0@@59|) (SeqType BoxType))) (or (|LinearExtern.__default.imagine__lseq__raw#canCall| LinearSequence_s._default.imagine_lseq_raw$A |s#0@@59|) ($Is |s#0@@59| (TSeq (|#$maybe| LinearSequence_s._default.imagine_lseq_raw$A))))) (and (|Seq#Equal| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.imagine_lseq_raw$A (LinearExtern.__default.imagine__lseq__raw LinearSequence_s._default.imagine_lseq_raw$A |s#0@@59|)) |s#0@@59|) ($IsBox (LinearExtern.__default.imagine__lseq__raw LinearSequence_s._default.imagine_lseq_raw$A |s#0@@59|) (|#$lseq| LinearSequence_s._default.imagine_lseq_raw$A)))) :qid |unknown.0:0| :skolemid |3290| :pattern ( (LinearExtern.__default.imagine__lseq__raw LinearSequence_s._default.imagine_lseq_raw$A |s#0@@59|)) ))))
(assert (forall ((LinearSequence_s._default.imagine_lseq_raw$A@@0 T@U) (|s#0@@60| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.imagine_lseq_raw$A@@0) TyType) (= (type |s#0@@60|) (SeqType BoxType))) ($Is |s#0@@60| (TSeq (|#$maybe| LinearSequence_s._default.imagine_lseq_raw$A@@0)))) (= (|LinearExtern.__default.imagine__lseq__raw#requires| LinearSequence_s._default.imagine_lseq_raw$A@@0 |s#0@@60|) true)) :qid |unknown.0:0| :skolemid |3291| :pattern ( (|LinearExtern.__default.imagine__lseq__raw#requires| LinearSequence_s._default.imagine_lseq_raw$A@@0 |s#0@@60|)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_length_raw$A T@U) (|s#0@@61| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_length_raw$A) TyType) (= (type |s#0@@61|) BoxType)) (or (|LinearExtern.__default.lseq_length_raw#canCall| LinearSequence_s._default.lseq_length_raw$A |s#0@@61|) (and ($IsBox |s#0@@61| (|#$lseq| LinearSequence_s._default.lseq_length_raw$A)) (<= (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_length_raw$A |s#0@@61|)) (LitInt 18446744073709551615))))) (and (= (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@61|) (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_length_raw$A |s#0@@61|))) (and (<= (LitInt 0) (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@61|)) (< (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@61|) 18446744073709551616)))) :qid |unknown.0:0| :skolemid |3292| :pattern ( (LinearExtern.__default.lseq_length_raw LinearSequence_s._default.lseq_length_raw$A |s#0@@61|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_length_raw$A@@0 T@U) (|s#0@@62| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_length_raw$A@@0) TyType) (= (type |s#0@@62|) BoxType)) ($IsBox |s#0@@62| (|#$lseq| LinearSequence_s._default.lseq_length_raw$A@@0))) (= (|LinearExtern.__default.lseq_length_raw#requires| LinearSequence_s._default.lseq_length_raw$A@@0 |s#0@@62|) (<= (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_length_raw$A@@0 |s#0@@62|)) (LitInt 18446744073709551615)))) :qid |unknown.0:0| :skolemid |3293| :pattern ( (|LinearExtern.__default.lseq_length_raw#requires| LinearSequence_s._default.lseq_length_raw$A@@0 |s#0@@62|)) )))
(assert (forall ((arg0@@601 T@U) (arg1@@297 Int) ) (! (= (type (LinearExtern.__default.lseq_alloc_raw arg0@@601 arg1@@297)) BoxType) :qid |funType:LinearExtern.__default.lseq_alloc_raw| :pattern ( (LinearExtern.__default.lseq_alloc_raw arg0@@601 arg1@@297)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_alloc_raw$A T@U) (|length#0@@8| Int) ) (!  (=> (and (= (type LinearSequence_s._default.lseq_alloc_raw$A) TyType) (or (|LinearExtern.__default.lseq_alloc_raw#canCall| LinearSequence_s._default.lseq_alloc_raw$A |length#0@@8|) (and (<= (LitInt 0) |length#0@@8|) (< |length#0@@8| 18446744073709551616)))) (and (and (= (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_alloc_raw$A (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@8|))) |length#0@@8|) (forall ((|i#0@@86| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@86|) (< |i#0@@86| |length#0@@8|)) (not (LinearMaybe.__default.has LinearSequence_s._default.lseq_alloc_raw$A (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_alloc_raw$A (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@8|)) |i#0@@86|)))) :qid |LinearSequencesdfy.90:22| :skolemid |3294| :pattern ( (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_alloc_raw$A (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@8|)) |i#0@@86|)) ))) ($IsBox (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@8|) (|#$lseq| LinearSequence_s._default.lseq_alloc_raw$A)))) :qid |unknown.0:0| :skolemid |3295| :pattern ( (LinearExtern.__default.lseq_alloc_raw LinearSequence_s._default.lseq_alloc_raw$A |length#0@@8|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_alloc_raw$A@@0 T@U) (|length#0@@9| Int) ) (!  (=> (= (type LinearSequence_s._default.lseq_alloc_raw$A@@0) TyType) (=> (and (<= (LitInt 0) |length#0@@9|) (< |length#0@@9| 18446744073709551616)) (= (|LinearExtern.__default.lseq_alloc_raw#requires| LinearSequence_s._default.lseq_alloc_raw$A@@0 |length#0@@9|) true))) :qid |unknown.0:0| :skolemid |3296| :pattern ( (|LinearExtern.__default.lseq_alloc_raw#requires| LinearSequence_s._default.lseq_alloc_raw$A@@0 |length#0@@9|)) )))
(assert (forall ((arg0@@602 T@U) (arg1@@298 T@U) ) (! (= (type (LinearExtern.__default.lseq_free_raw arg0@@602 arg1@@298)) DatatypeTypeType) :qid |funType:LinearExtern.__default.lseq_free_raw| :pattern ( (LinearExtern.__default.lseq_free_raw arg0@@602 arg1@@298)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_free_raw$A T@U) (|s#0@@63| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_free_raw$A) TyType) (= (type |s#0@@63|) BoxType)) (or (|LinearExtern.__default.lseq_free_raw#canCall| LinearSequence_s._default.lseq_free_raw$A |s#0@@63|) (and ($IsBox |s#0@@63| (|#$lseq| LinearSequence_s._default.lseq_free_raw$A)) (forall ((|i#0@@87| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@87|) (< |i#0@@87| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A |s#0@@63|)))) (not (LinearMaybe.__default.has LinearSequence_s._default.lseq_free_raw$A (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A |s#0@@63|) |i#0@@87|)))) :qid |LinearSequencesdfy.93:23| :skolemid |3297| :pattern ( (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A |s#0@@63|) |i#0@@87|)) ))))) ($Is (LinearExtern.__default.lseq_free_raw LinearSequence_s._default.lseq_free_raw$A |s#0@@63|) Tclass._System.Tuple0)) :qid |unknown.0:0| :skolemid |3298| :pattern ( (LinearExtern.__default.lseq_free_raw LinearSequence_s._default.lseq_free_raw$A |s#0@@63|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_free_raw$A@@0 T@U) (|s#0@@64| T@U) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_free_raw$A@@0) TyType) (= (type |s#0@@64|) BoxType)) ($IsBox |s#0@@64| (|#$lseq| LinearSequence_s._default.lseq_free_raw$A@@0))) (= (|LinearExtern.__default.lseq_free_raw#requires| LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@64|) (forall ((|i#1@@19| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@19|) (< |i#1@@19| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@64|)))) (not (LinearMaybe.__default.has LinearSequence_s._default.lseq_free_raw$A@@0 (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@64|) |i#1@@19|)))) :qid |LinearSequencesdfy.93:23| :skolemid |3299| :pattern ( (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@64|) |i#1@@19|)) )))) :qid |unknown.0:0| :skolemid |3300| :pattern ( (|LinearExtern.__default.lseq_free_raw#requires| LinearSequence_s._default.lseq_free_raw$A@@0 |s#0@@64|)) )))
(assert (forall ((arg0@@603 T@U) (arg1@@299 T@U) (arg2@@206 Int) (arg3@@150 T@U) ) (! (= (type (LinearExtern.__default.lseq_swap_raw_fun arg0@@603 arg1@@299 arg2@@206 arg3@@150)) DatatypeTypeType) :qid |funType:LinearExtern.__default.lseq_swap_raw_fun| :pattern ( (LinearExtern.__default.lseq_swap_raw_fun arg0@@603 arg1@@299 arg2@@206 arg3@@150)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_swap_raw_fun$A T@U) (|s1#0@@3| T@U) (|i#0@@88| Int) (|a1#0| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_swap_raw_fun$A) TyType) (= (type |s1#0@@3|) BoxType)) (= (type |a1#0|) BoxType)) (or (|LinearExtern.__default.lseq_swap_raw_fun#canCall| LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@88| |a1#0|) (and (and (and ($IsBox |s1#0@@3| (|#$lseq| LinearSequence_s._default.lseq_swap_raw_fun$A)) (and (<= (LitInt 0) |i#0@@88|) (< |i#0@@88| 18446744073709551616))) ($IsBox |a1#0| (|#$maybe| LinearSequence_s._default.lseq_swap_raw_fun$A))) (< |i#0@@88| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3|)))))) (and (and (= (_System.Tuple2OLL._1 (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@88| |a1#0|)) (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3|) |i#0@@88|)) (|Seq#Equal| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A (_System.Tuple2OLL._0 (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@88| |a1#0|))) (|Seq#Update| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3|) |i#0@@88| |a1#0|))) ($Is (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@88| |a1#0|) (Tclass._System.Tuple2OLL (|#$lseq| LinearSequence_s._default.lseq_swap_raw_fun$A) (|#$maybe| LinearSequence_s._default.lseq_swap_raw_fun$A))))) :qid |unknown.0:0| :skolemid |3301| :pattern ( (LinearExtern.__default.lseq_swap_raw_fun LinearSequence_s._default.lseq_swap_raw_fun$A |s1#0@@3| |i#0@@88| |a1#0|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_swap_raw_fun$A@@0 T@U) (|s1#0@@4| T@U) (|i#0@@89| Int) (|a1#0@@0| T@U) ) (!  (=> (and (and (and (= (type LinearSequence_s._default.lseq_swap_raw_fun$A@@0) TyType) (= (type |s1#0@@4|) BoxType)) (= (type |a1#0@@0|) BoxType)) (and (and ($IsBox |s1#0@@4| (|#$lseq| LinearSequence_s._default.lseq_swap_raw_fun$A@@0)) (and (<= (LitInt 0) |i#0@@89|) (< |i#0@@89| 18446744073709551616))) ($IsBox |a1#0@@0| (|#$maybe| LinearSequence_s._default.lseq_swap_raw_fun$A@@0)))) (= (|LinearExtern.__default.lseq_swap_raw_fun#requires| LinearSequence_s._default.lseq_swap_raw_fun$A@@0 |s1#0@@4| |i#0@@89| |a1#0@@0|) (< |i#0@@89| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_swap_raw_fun$A@@0 |s1#0@@4|))))) :qid |unknown.0:0| :skolemid |3302| :pattern ( (|LinearExtern.__default.lseq_swap_raw_fun#requires| LinearSequence_s._default.lseq_swap_raw_fun$A@@0 |s1#0@@4| |i#0@@89| |a1#0@@0|)) )))
(assert (forall ((arg0@@604 T@U) (arg1@@300 T@U) (arg2@@207 Int) ) (! (= (type (LinearExtern.__default.lseq_share_raw arg0@@604 arg1@@300 arg2@@207)) BoxType) :qid |funType:LinearExtern.__default.lseq_share_raw| :pattern ( (LinearExtern.__default.lseq_share_raw arg0@@604 arg1@@300 arg2@@207)) )))
(assert  (=> true (forall ((LinearSequence_s._default.lseq_share_raw$A T@U) (|s#0@@65| T@U) (|i#0@@90| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_share_raw$A) TyType) (= (type |s#0@@65|) BoxType)) (or (|LinearExtern.__default.lseq_share_raw#canCall| LinearSequence_s._default.lseq_share_raw$A |s#0@@65| |i#0@@90|) (and (and ($IsBox |s#0@@65| (|#$lseq| LinearSequence_s._default.lseq_share_raw$A)) (and (<= (LitInt 0) |i#0@@90|) (< |i#0@@90| 18446744073709551616))) (< |i#0@@90| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_share_raw$A |s#0@@65|)))))) (and (= (LinearExtern.__default.lseq_share_raw LinearSequence_s._default.lseq_share_raw$A |s#0@@65| |i#0@@90|) (|Seq#Index| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_share_raw$A |s#0@@65|) |i#0@@90|)) ($IsBox (LinearExtern.__default.lseq_share_raw LinearSequence_s._default.lseq_share_raw$A |s#0@@65| |i#0@@90|) (|#$maybe| LinearSequence_s._default.lseq_share_raw$A)))) :qid |unknown.0:0| :skolemid |3303| :pattern ( (LinearExtern.__default.lseq_share_raw LinearSequence_s._default.lseq_share_raw$A |s#0@@65| |i#0@@90|)) ))))
(assert (forall ((LinearSequence_s._default.lseq_share_raw$A@@0 T@U) (|s#0@@66| T@U) (|i#0@@91| Int) ) (!  (=> (and (and (= (type LinearSequence_s._default.lseq_share_raw$A@@0) TyType) (= (type |s#0@@66|) BoxType)) (and ($IsBox |s#0@@66| (|#$lseq| LinearSequence_s._default.lseq_share_raw$A@@0)) (and (<= (LitInt 0) |i#0@@91|) (< |i#0@@91| 18446744073709551616)))) (= (|LinearExtern.__default.lseq_share_raw#requires| LinearSequence_s._default.lseq_share_raw$A@@0 |s#0@@66| |i#0@@91|) (< |i#0@@91| (|Seq#Length| (LinearExtern.__default.lseqs__raw LinearSequence_s._default.lseq_share_raw$A@@0 |s#0@@66|))))) :qid |unknown.0:0| :skolemid |3304| :pattern ( (|LinearExtern.__default.lseq_share_raw#requires| LinearSequence_s._default.lseq_share_raw$A@@0 |s#0@@66| |i#0@@91|)) )))
(assert (= (type Tclass.Byte__Order.__default) TyType))
(assert (= (Tag Tclass.Byte__Order.__default) Tagclass.Byte__Order.__default))
(assert (= (TagFamily Tclass.Byte__Order.__default) tytagFamily$_default))
(assert (forall ((bx@@174 T@U) ) (!  (=> (and (= (type bx@@174) BoxType) ($IsBox bx@@174 Tclass.Byte__Order.__default)) (and (= ($Box ($Unbox refType bx@@174)) bx@@174) ($Is ($Unbox refType bx@@174) Tclass.Byte__Order.__default))) :qid |unknown.0:0| :skolemid |3305| :pattern ( ($IsBox bx@@174 Tclass.Byte__Order.__default)) )))
(assert (forall (($o@@42 T@U) ) (!  (=> (= (type $o@@42) refType) (= ($Is $o@@42 Tclass.Byte__Order.__default)  (or (= $o@@42 null) (= (dtype $o@@42) Tclass.Byte__Order.__default)))) :qid |unknown.0:0| :skolemid |3306| :pattern ( ($Is $o@@42 Tclass.Byte__Order.__default)) )))
(assert (forall (($o@@43 T@U) ($h@@100 T@U) ) (!  (=> (and (= (type $o@@43) refType) (= (type $h@@100) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@43 Tclass.Byte__Order.__default $h@@100)  (or (= $o@@43 null) (U_2_bool (MapType1Select (MapType0Select $h@@100 $o@@43) alloc))))) :qid |unknown.0:0| :skolemid |3307| :pattern ( ($IsAlloc $o@@43 Tclass.Byte__Order.__default $h@@100)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) Byte__Order.__default.SomeElement) (< Byte__Order.__default.SomeElement 256)))))
(assert (= |Byte__Order.__default.SomeElement#requires| true))
(assert  (=> true (=> true (= Byte__Order.__default.SomeElement (LitInt 0)))))
(assert  (=> true (=> true (= Byte__Order.__default.SomeElement (LitInt 0)))))
(assert (forall (($ly@@322 T@U) (|a#0@@99| Int) (|b#0@@63| Int) ) (!  (=> (= (type $ly@@322) LayerTypeType) (= (Byte__Order.__default.lte ($LS $ly@@322) |a#0@@99| |b#0@@63|) (Byte__Order.__default.lte $ly@@322 |a#0@@99| |b#0@@63|))) :qid |totalorderidfy.910:30| :skolemid |3308| :pattern ( (Byte__Order.__default.lte ($LS $ly@@322) |a#0@@99| |b#0@@63|)) )))
(assert (forall (($ly@@323 T@U) (|a#0@@100| Int) (|b#0@@64| Int) ) (!  (=> (= (type $ly@@323) LayerTypeType) (= (Byte__Order.__default.lte $ly@@323 |a#0@@100| |b#0@@64|) (Byte__Order.__default.lte $LZ |a#0@@100| |b#0@@64|))) :qid |totalorderidfy.910:30| :skolemid |3309| :pattern ( (Byte__Order.__default.lte (AsFuelBottom $ly@@323) |a#0@@100| |b#0@@64|)) )))
(assert (= (type StartFuel_Byte_Order._default.ltedef) LayerTypeType))
(assert  (=> true (forall (($ly@@324 T@U) (|a#0@@101| Int) (|b#0@@65| Int) ) (!  (=> (and (= (type $ly@@324) LayerTypeType) (or (|Byte__Order.__default.lte#canCall| |a#0@@101| |b#0@@65|) (and (and (<= (LitInt 0) |a#0@@101|) (< |a#0@@101| 256)) (and (<= (LitInt 0) |b#0@@65|) (< |b#0@@65| 256))))) (and (and (and (and (and (and (= (Byte__Order.__default.lte $ly@@324 |a#0@@101| |b#0@@65|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@101| |b#0@@65|)) (or (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@101| |b#0@@65|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#0@@65| |a#0@@101|))) (forall ((|a#1@@0| Int) (|b#1@@0| Int) (|c#0@@10| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |a#1@@0|) (< |a#1@@0| 256)) (and (<= (LitInt 0) |b#1@@0|) (< |b#1@@0| 256))) (and (<= (LitInt 0) |c#0@@10|) (< |c#0@@10| 256))) (=> (and (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#1@@0| |b#1@@0|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#1@@0| |c#0@@10|)) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#1@@0| |c#0@@10|))) :qid |totalorderidfy.25:20| :skolemid |3310| :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#1@@0| |c#0@@10|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#1@@0| |c#0@@10|)) :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#1@@0| |c#0@@10|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#1@@0| |b#1@@0|)) ))) (= (Byte__Order.__default.lte $ly@@324 |a#0@@101| |b#0@@65|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@101| |b#0@@65|))) (or (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@101| |b#0@@65|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#0@@65| |a#0@@101|))) (=> (and (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#0@@101| |b#0@@65|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#0@@65| |a#0@@101|)) (= |a#0@@101| |b#0@@65|))) (forall ((|a#2| Int) (|b#2| Int) (|c#1| Int) ) (!  (=> (and (and (and (<= (LitInt 0) |a#2|) (< |a#2| 256)) (and (<= (LitInt 0) |b#2|) (< |b#2| 256))) (and (<= (LitInt 0) |c#1|) (< |c#1| 256))) (=> (and (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#2| |b#2|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#2| |c#1|)) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#2| |c#1|))) :qid |totalorderidfy.199:20| :skolemid |3311| :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#2| |c#1|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#2| |c#1|)) :pattern ( (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |b#2| |c#1|) (Byte__Order.__default.ltedef StartFuel_Byte_Order._default.ltedef |a#2| |b#2|)) )))) :qid |totalorderidfy.910:30| :skolemid |3312| :pattern ( (Byte__Order.__default.lte $ly@@324 |a#0@@101| |b#0@@65|)) ))))
(assert (forall (($ly@@325 T@U) (|a#0@@102| Int) (|b#0@@66| Int) ) (!  (=> (= (type $ly@@325) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@102|) (< |a#0@@102| 256)) (and (<= (LitInt 0) |b#0@@66|) (< |b#0@@66| 256))) (= (|Byte__Order.__default.lte#requires| $ly@@325 |a#0@@102| |b#0@@66|) true))) :qid |totalorderidfy.910:30| :skolemid |3313| :pattern ( (|Byte__Order.__default.lte#requires| $ly@@325 |a#0@@102| |b#0@@66|)) )))
(assert  (and (= (type MoreFuel_Byte_Order._default.ltedef0) LayerTypeType) (= (type StartFuelAssert_Byte_Order._default.ltedef) LayerTypeType)))
(assert  (=> true (forall (($ly@@326 T@U) (|a#0@@103| Int) (|b#0@@67| Int) ) (!  (=> (and (= (type $ly@@326) LayerTypeType) (or (|Byte__Order.__default.lte#canCall| |a#0@@103| |b#0@@67|) (and (and (<= (LitInt 0) |a#0@@103|) (< |a#0@@103| 256)) (and (<= (LitInt 0) |b#0@@67|) (< |b#0@@67| 256))))) (and (and (and (= StartFuel_Byte_Order._default.ltedef ($LS MoreFuel_Byte_Order._default.ltedef0)) (= StartFuelAssert_Byte_Order._default.ltedef ($LS ($LS MoreFuel_Byte_Order._default.ltedef0)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.ltedef0) MoreFuel_Byte_Order._default.ltedef0)) (= (Byte__Order.__default.lte ($LS $ly@@326) |a#0@@103| |b#0@@67|) (<= |a#0@@103| |b#0@@67|)))) :qid |totalorderidfy.910:30| :skolemid |3314| :pattern ( (Byte__Order.__default.lte ($LS $ly@@326) |a#0@@103| |b#0@@67|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.ltedef1) LayerTypeType))
(assert  (=> true (forall (($ly@@327 T@U) (|a#0@@104| Int) (|b#0@@68| Int) ) (!  (=> (and (= (type $ly@@327) LayerTypeType) (or (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@104|) (LitInt |b#0@@68|)) (and (and (<= (LitInt 0) |a#0@@104|) (< |a#0@@104| 256)) (and (<= (LitInt 0) |b#0@@68|) (< |b#0@@68| 256))))) (and (and (and (= StartFuel_Byte_Order._default.ltedef ($LS MoreFuel_Byte_Order._default.ltedef1)) (= StartFuelAssert_Byte_Order._default.ltedef ($LS ($LS MoreFuel_Byte_Order._default.ltedef1)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.ltedef1) MoreFuel_Byte_Order._default.ltedef1)) (= (Byte__Order.__default.lte ($LS $ly@@327) (LitInt |a#0@@104|) (LitInt |b#0@@68|)) (<= (LitInt |a#0@@104|) (LitInt |b#0@@68|))))) :qid |totalorderidfy.910:30| :weight 3 :skolemid |3315| :pattern ( (Byte__Order.__default.lte ($LS $ly@@327) (LitInt |a#0@@104|) (LitInt |b#0@@68|))) ))))
(assert (forall (($ly@@328 T@U) (|a#0@@105| Int) (|b#0@@69| Int) ) (!  (=> (= (type $ly@@328) LayerTypeType) (= (Byte__Order.__default.ltedef ($LS $ly@@328) |a#0@@105| |b#0@@69|) (Byte__Order.__default.ltedef $ly@@328 |a#0@@105| |b#0@@69|))) :qid |totalorderidfy.915:30| :skolemid |3316| :pattern ( (Byte__Order.__default.ltedef ($LS $ly@@328) |a#0@@105| |b#0@@69|)) )))
(assert (forall (($ly@@329 T@U) (|a#0@@106| Int) (|b#0@@70| Int) ) (!  (=> (= (type $ly@@329) LayerTypeType) (= (Byte__Order.__default.ltedef $ly@@329 |a#0@@106| |b#0@@70|) (Byte__Order.__default.ltedef $LZ |a#0@@106| |b#0@@70|))) :qid |totalorderidfy.915:30| :skolemid |3317| :pattern ( (Byte__Order.__default.ltedef (AsFuelBottom $ly@@329) |a#0@@106| |b#0@@70|)) )))
(assert  (=> true (forall (($ly@@330 T@U) (|a#0@@107| Int) (|b#0@@71| Int) ) (!  (=> (and (= (type $ly@@330) LayerTypeType) (or (|Byte__Order.__default.ltedef#canCall| |a#0@@107| |b#0@@71|) (and (and (<= (LitInt 0) |a#0@@107|) (< |a#0@@107| 256)) (and (<= (LitInt 0) |b#0@@71|) (< |b#0@@71| 256))))) true) :qid |totalorderidfy.915:30| :skolemid |3318| :pattern ( (Byte__Order.__default.ltedef $ly@@330 |a#0@@107| |b#0@@71|)) ))))
(assert (forall (($ly@@331 T@U) (|a#0@@108| Int) (|b#0@@72| Int) ) (!  (=> (= (type $ly@@331) LayerTypeType) (=> (and (and (<= (LitInt 0) |a#0@@108|) (< |a#0@@108| 256)) (and (<= (LitInt 0) |b#0@@72|) (< |b#0@@72| 256))) (= (|Byte__Order.__default.ltedef#requires| $ly@@331 |a#0@@108| |b#0@@72|) true))) :qid |totalorderidfy.915:30| :skolemid |3319| :pattern ( (|Byte__Order.__default.ltedef#requires| $ly@@331 |a#0@@108| |b#0@@72|)) )))
(assert  (=> true (forall (($ly@@332 T@U) (|a#0@@109| Int) (|b#0@@73| Int) ) (!  (=> (and (= (type $ly@@332) LayerTypeType) (or (|Byte__Order.__default.ltedef#canCall| |a#0@@109| |b#0@@73|) (and (and (<= (LitInt 0) |a#0@@109|) (< |a#0@@109| 256)) (and (<= (LitInt 0) |b#0@@73|) (< |b#0@@73| 256))))) (= (Byte__Order.__default.ltedef ($LS $ly@@332) |a#0@@109| |b#0@@73|) (<= |a#0@@109| |b#0@@73|))) :qid |totalorderidfy.915:30| :skolemid |3320| :pattern ( (Byte__Order.__default.ltedef ($LS $ly@@332) |a#0@@109| |b#0@@73|)) ))))
(assert  (=> true (forall (($ly@@333 T@U) (|a#0@@110| Int) (|b#0@@74| Int) ) (!  (=> (and (= (type $ly@@333) LayerTypeType) (or (|Byte__Order.__default.ltedef#canCall| (LitInt |a#0@@110|) (LitInt |b#0@@74|)) (and (and (<= (LitInt 0) |a#0@@110|) (< |a#0@@110| 256)) (and (<= (LitInt 0) |b#0@@74|) (< |b#0@@74| 256))))) (= (Byte__Order.__default.ltedef ($LS $ly@@333) (LitInt |a#0@@110|) (LitInt |b#0@@74|)) (<= (LitInt |a#0@@110|) (LitInt |b#0@@74|)))) :qid |totalorderidfy.915:30| :weight 3 :skolemid |3321| :pattern ( (Byte__Order.__default.ltedef ($LS $ly@@333) (LitInt |a#0@@110|) (LitInt |b#0@@74|))) ))))
(assert (forall (($ly@@334 T@U) (|run#0@@80| T@U) (|needle#0@@13| Int) ) (!  (=> (and (= (type $ly@@334) LayerTypeType) (= (type |run#0@@80|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLte ($LS $ly@@334) |run#0@@80| |needle#0@@13|) (Byte__Order.__default.LargestLte $ly@@334 |run#0@@80| |needle#0@@13|))) :qid |totalorderidfyByteOrder.264:12| :skolemid |3322| :pattern ( (Byte__Order.__default.LargestLte ($LS $ly@@334) |run#0@@80| |needle#0@@13|)) )))
(assert (forall (($ly@@335 T@U) (|run#0@@81| T@U) (|needle#0@@14| Int) ) (!  (=> (and (= (type $ly@@335) LayerTypeType) (= (type |run#0@@81|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLte $ly@@335 |run#0@@81| |needle#0@@14|) (Byte__Order.__default.LargestLte $LZ |run#0@@81| |needle#0@@14|))) :qid |totalorderidfyByteOrder.264:12| :skolemid |3323| :pattern ( (Byte__Order.__default.LargestLte (AsFuelBottom $ly@@335) |run#0@@81| |needle#0@@14|)) )))
(assert  (and (= (type StartFuel_Byte_Order._default.IsSorted) LayerTypeType) (= (type StartFuel_Byte_Order._default.lte) LayerTypeType)))
(assert  (=> true (forall (($ly@@336 T@U) (|run#0@@82| T@U) (|needle#0@@15| Int) ) (!  (=> (and (and (= (type $ly@@336) LayerTypeType) (= (type |run#0@@82|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLte#canCall| |run#0@@82| |needle#0@@15|) (and (and ($Is |run#0@@82| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@15|) (< |needle#0@@15| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@82|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Byte__Order.__default.LargestLte $ly@@336 |run#0@@82| |needle#0@@15|)) (< (Byte__Order.__default.LargestLte $ly@@336 |run#0@@82| |needle#0@@15|) (|Seq#Length| |run#0@@82|))) (forall ((|i#0@@92| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@92|) (<= |i#0@@92| (Byte__Order.__default.LargestLte $ly@@336 |run#0@@82| |needle#0@@15|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@82| |i#0@@92|))) |needle#0@@15|))) :qid |totalorderidfyByteOrder.267:20| :skolemid |3324| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@82| |i#0@@92|))) ))) (forall ((|i#1@@20| Int) ) (!  (=> true (=> (and (< (Byte__Order.__default.LargestLte $ly@@336 |run#0@@82| |needle#0@@15|) |i#1@@20|) (< |i#1@@20| (|Seq#Length| |run#0@@82|))) (Byte__Order.__default.lt |needle#0@@15| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@82| |i#1@@20|)))))) :qid |totalorderidfyByteOrder.268:20| :skolemid |3325| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@82| |i#1@@20|))) ))) (=> (|Seq#Contains| |run#0@@82| ($Box (int_2_U |needle#0@@15|))) (and (<= (LitInt 0) (Byte__Order.__default.LargestLte $ly@@336 |run#0@@82| |needle#0@@15|)) (= (U_2_int ($Unbox intType (|Seq#Index| |run#0@@82| (Byte__Order.__default.LargestLte $ly@@336 |run#0@@82| |needle#0@@15|)))) |needle#0@@15|))))) :qid |totalorderidfyByteOrder.264:12| :skolemid |3326| :pattern ( (Byte__Order.__default.LargestLte $ly@@336 |run#0@@82| |needle#0@@15|)) ))))
(assert (forall (($ly@@337 T@U) (|run#0@@83| T@U) (|needle#0@@16| Int) ) (!  (=> (and (and (= (type $ly@@337) LayerTypeType) (= (type |run#0@@83|) (SeqType BoxType))) (and ($Is |run#0@@83| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@16|) (< |needle#0@@16| 256)))) (= (|Byte__Order.__default.LargestLte#requires| $ly@@337 |run#0@@83| |needle#0@@16|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@83|))) :qid |totalorderidfyByteOrder.264:12| :skolemid |3327| :pattern ( (|Byte__Order.__default.LargestLte#requires| $ly@@337 |run#0@@83| |needle#0@@16|)) )))
(assert  (and (= (type MoreFuel_Byte_Order._default.IsSorted0) LayerTypeType) (= (type StartFuelAssert_Byte_Order._default.IsSorted) LayerTypeType)))
(assert  (=> true (forall (($ly@@338 T@U) (|run#0@@84| T@U) (|needle#0@@17| Int) ) (!  (=> (and (and (= (type $ly@@338) LayerTypeType) (= (type |run#0@@84|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLte#canCall| |run#0@@84| |needle#0@@17|) (and (and ($Is |run#0@@84| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@17|) (< |needle#0@@17| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@84|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@84|) (LitInt 0))) (|Byte__Order.__default.lt#canCall| |needle#0@@17| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@84| (LitInt 0)))))) (=> (not (or (= (|Seq#Length| |run#0@@84|) (LitInt 0)) (Byte__Order.__default.lt |needle#0@@17| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@84| (LitInt 0))))))) (|Byte__Order.__default.LargestLte#canCall| (|Seq#Drop| |run#0@@84| (LitInt 1)) |needle#0@@17|))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted0)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted0)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted0) MoreFuel_Byte_Order._default.IsSorted0)) (= (Byte__Order.__default.LargestLte ($LS $ly@@338) |run#0@@84| |needle#0@@17|) (ite  (or (= (|Seq#Length| |run#0@@84|) (LitInt 0)) (Byte__Order.__default.lt |needle#0@@17| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@84| (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLte $ly@@338 (|Seq#Drop| |run#0@@84| (LitInt 1)) |needle#0@@17|))))))) :qid |totalorderidfyByteOrder.264:12| :skolemid |3328| :pattern ( (Byte__Order.__default.LargestLte ($LS $ly@@338) |run#0@@84| |needle#0@@17|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted1) LayerTypeType))
(assert  (=> true (forall (($ly@@339 T@U) (|run#0@@85| T@U) (|needle#0@@18| Int) ) (!  (=> (and (and (= (type $ly@@339) LayerTypeType) (= (type |run#0@@85|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLte#canCall| (Lit |run#0@@85|) (LitInt |needle#0@@18|)) (and (and ($Is |run#0@@85| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@18|) (< |needle#0@@18| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@85|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@85|)) (LitInt 0))) (|Byte__Order.__default.lt#canCall| (LitInt |needle#0@@18|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@85|) (LitInt 0)))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@85|)) (LitInt 0)) (Byte__Order.__default.lt (LitInt |needle#0@@18|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@85|) (LitInt 0))))))) (|Byte__Order.__default.LargestLte#canCall| (Lit (|Seq#Drop| (Lit |run#0@@85|) (LitInt 1))) (LitInt |needle#0@@18|)))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted1)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted1)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted1) MoreFuel_Byte_Order._default.IsSorted1)) (= (Byte__Order.__default.LargestLte ($LS $ly@@339) (Lit |run#0@@85|) (LitInt |needle#0@@18|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@85|)) (LitInt 0)) (Byte__Order.__default.lt (LitInt |needle#0@@18|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@85|) (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLte ($LS $ly@@339) (Lit (|Seq#Drop| (Lit |run#0@@85|) (LitInt 1))) (LitInt |needle#0@@18|)))))))) :qid |totalorderidfyByteOrder.264:12| :weight 3 :skolemid |3329| :pattern ( (Byte__Order.__default.LargestLte ($LS $ly@@339) (Lit |run#0@@85|) (LitInt |needle#0@@18|))) ))))
(assert (forall (($ly@@340 T@U) (|run#0@@86| T@U) (|needle#0@@19| Int) ) (!  (=> (and (= (type $ly@@340) LayerTypeType) (= (type |run#0@@86|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLt ($LS $ly@@340) |run#0@@86| |needle#0@@19|) (Byte__Order.__default.LargestLt $ly@@340 |run#0@@86| |needle#0@@19|))) :qid |totalorderidfyByteOrder.360:12| :skolemid |3330| :pattern ( (Byte__Order.__default.LargestLt ($LS $ly@@340) |run#0@@86| |needle#0@@19|)) )))
(assert (forall (($ly@@341 T@U) (|run#0@@87| T@U) (|needle#0@@20| Int) ) (!  (=> (and (= (type $ly@@341) LayerTypeType) (= (type |run#0@@87|) (SeqType BoxType))) (= (Byte__Order.__default.LargestLt $ly@@341 |run#0@@87| |needle#0@@20|) (Byte__Order.__default.LargestLt $LZ |run#0@@87| |needle#0@@20|))) :qid |totalorderidfyByteOrder.360:12| :skolemid |3331| :pattern ( (Byte__Order.__default.LargestLt (AsFuelBottom $ly@@341) |run#0@@87| |needle#0@@20|)) )))
(assert  (=> true (forall (($ly@@342 T@U) (|run#0@@88| T@U) (|needle#0@@21| Int) ) (!  (=> (and (and (= (type $ly@@342) LayerTypeType) (= (type |run#0@@88|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLt#canCall| |run#0@@88| |needle#0@@21|) (and (and ($Is |run#0@@88| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@21|) (< |needle#0@@21| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@88|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Byte__Order.__default.LargestLt $ly@@342 |run#0@@88| |needle#0@@21|)) (< (Byte__Order.__default.LargestLt $ly@@342 |run#0@@88| |needle#0@@21|) (|Seq#Length| |run#0@@88|))) (forall ((|i#0@@93| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@93|) (<= |i#0@@93| (Byte__Order.__default.LargestLt $ly@@342 |run#0@@88| |needle#0@@21|))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@88| |i#0@@93|))) |needle#0@@21|))) :qid |totalorderidfyByteOrder.363:20| :skolemid |3332| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@88| |i#0@@93|))) ))) (forall ((|i#1@@21| Int) ) (!  (=> true (=> (and (< (Byte__Order.__default.LargestLt $ly@@342 |run#0@@88| |needle#0@@21|) |i#1@@21|) (< |i#1@@21| (|Seq#Length| |run#0@@88|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@21| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@88| |i#1@@21|)))))) :qid |totalorderidfyByteOrder.364:20| :skolemid |3333| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@88| |i#1@@21|))) ))) (=> (|Seq#Contains| |run#0@@88| ($Box (int_2_U |needle#0@@21|))) (and (< (+ (Byte__Order.__default.LargestLt $ly@@342 |run#0@@88| |needle#0@@21|) 1) (|Seq#Length| |run#0@@88|)) (= (U_2_int ($Unbox intType (|Seq#Index| |run#0@@88| (+ (Byte__Order.__default.LargestLt $ly@@342 |run#0@@88| |needle#0@@21|) 1)))) |needle#0@@21|))))) :qid |totalorderidfyByteOrder.360:12| :skolemid |3334| :pattern ( (Byte__Order.__default.LargestLt $ly@@342 |run#0@@88| |needle#0@@21|)) ))))
(assert (forall (($ly@@343 T@U) (|run#0@@89| T@U) (|needle#0@@22| Int) ) (!  (=> (and (and (= (type $ly@@343) LayerTypeType) (= (type |run#0@@89|) (SeqType BoxType))) (and ($Is |run#0@@89| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@22|) (< |needle#0@@22| 256)))) (= (|Byte__Order.__default.LargestLt#requires| $ly@@343 |run#0@@89| |needle#0@@22|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@89|))) :qid |totalorderidfyByteOrder.360:12| :skolemid |3335| :pattern ( (|Byte__Order.__default.LargestLt#requires| $ly@@343 |run#0@@89| |needle#0@@22|)) )))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted2) LayerTypeType))
(assert  (=> true (forall (($ly@@344 T@U) (|run#0@@90| T@U) (|needle#0@@23| Int) ) (!  (=> (and (and (= (type $ly@@344) LayerTypeType) (= (type |run#0@@90|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLt#canCall| |run#0@@90| |needle#0@@23|) (and (and ($Is |run#0@@90| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@23|) (< |needle#0@@23| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@90|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@90|) (LitInt 0))) (|Byte__Order.__default.lte#canCall| |needle#0@@23| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@90| (LitInt 0)))))) (=> (not (or (= (|Seq#Length| |run#0@@90|) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@23| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@90| (LitInt 0))))))) (|Byte__Order.__default.LargestLt#canCall| (|Seq#Drop| |run#0@@90| (LitInt 1)) |needle#0@@23|))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted2)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted2)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted2) MoreFuel_Byte_Order._default.IsSorted2)) (= (Byte__Order.__default.LargestLt ($LS $ly@@344) |run#0@@90| |needle#0@@23|) (ite  (or (= (|Seq#Length| |run#0@@90|) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@23| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@90| (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLt $ly@@344 (|Seq#Drop| |run#0@@90| (LitInt 1)) |needle#0@@23|))))))) :qid |totalorderidfyByteOrder.360:12| :skolemid |3336| :pattern ( (Byte__Order.__default.LargestLt ($LS $ly@@344) |run#0@@90| |needle#0@@23|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted3) LayerTypeType))
(assert  (=> true (forall (($ly@@345 T@U) (|run#0@@91| T@U) (|needle#0@@24| Int) ) (!  (=> (and (and (= (type $ly@@345) LayerTypeType) (= (type |run#0@@91|) (SeqType BoxType))) (or (|Byte__Order.__default.LargestLt#canCall| (Lit |run#0@@91|) (LitInt |needle#0@@24|)) (and (and ($Is |run#0@@91| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@24|) (< |needle#0@@24| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@91|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@91|)) (LitInt 0))) (|Byte__Order.__default.lte#canCall| (LitInt |needle#0@@24|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@91|) (LitInt 0)))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@91|)) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |needle#0@@24|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@91|) (LitInt 0))))))) (|Byte__Order.__default.LargestLt#canCall| (Lit (|Seq#Drop| (Lit |run#0@@91|) (LitInt 1))) (LitInt |needle#0@@24|)))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted3)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted3)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted3) MoreFuel_Byte_Order._default.IsSorted3)) (= (Byte__Order.__default.LargestLt ($LS $ly@@345) (Lit |run#0@@91|) (LitInt |needle#0@@24|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@91|)) (LitInt 0)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |needle#0@@24|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@91|) (LitInt 0)))))) (- 0 1) (+ 1 (Byte__Order.__default.LargestLt ($LS $ly@@345) (Lit (|Seq#Drop| (Lit |run#0@@91|) (LitInt 1))) (LitInt |needle#0@@24|)))))))) :qid |totalorderidfyByteOrder.360:12| :weight 3 :skolemid |3337| :pattern ( (Byte__Order.__default.LargestLt ($LS $ly@@345) (Lit |run#0@@91|) (LitInt |needle#0@@24|))) ))))
(assert (forall (($ly@@346 T@U) (|run#0@@92| T@U) (|needle#0@@25| Int) ) (!  (=> (and (= (type $ly@@346) LayerTypeType) (= (type |run#0@@92|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@346) |run#0@@92| |needle#0@@25|) (Byte__Order.__default.IndexOfFirstGte $ly@@346 |run#0@@92| |needle#0@@25|))) :qid |totalorderidfyByteOrder.392:12| :skolemid |3338| :pattern ( (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@346) |run#0@@92| |needle#0@@25|)) )))
(assert (forall (($ly@@347 T@U) (|run#0@@93| T@U) (|needle#0@@26| Int) ) (!  (=> (and (= (type $ly@@347) LayerTypeType) (= (type |run#0@@93|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGte $ly@@347 |run#0@@93| |needle#0@@26|) (Byte__Order.__default.IndexOfFirstGte $LZ |run#0@@93| |needle#0@@26|))) :qid |totalorderidfyByteOrder.392:12| :skolemid |3339| :pattern ( (Byte__Order.__default.IndexOfFirstGte (AsFuelBottom $ly@@347) |run#0@@93| |needle#0@@26|)) )))
(assert  (=> true (forall (($ly@@348 T@U) (|run#0@@94| T@U) (|needle#0@@27| Int) ) (!  (=> (and (and (= (type $ly@@348) LayerTypeType) (= (type |run#0@@94|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@94| |needle#0@@27|) (and (and ($Is |run#0@@94| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@27|) (< |needle#0@@27| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@94|)))) (and (and (and (<= (Byte__Order.__default.IndexOfFirstGte $ly@@348 |run#0@@94| |needle#0@@27|) (|Seq#Length| |run#0@@94|)) (forall ((|i#0@@94| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@94|) (< |i#0@@94| (Byte__Order.__default.IndexOfFirstGte $ly@@348 |run#0@@94| |needle#0@@27|))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@94| |i#0@@94|))) |needle#0@@27|)) :qid |totalorderidfyByteOrder.395:20| :skolemid |3340| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@94| |i#0@@94|))) ))) (forall ((|i#1@@22| Int) ) (!  (=> (and (<= (Byte__Order.__default.IndexOfFirstGte $ly@@348 |run#0@@94| |needle#0@@27|) |i#1@@22|) (< |i#1@@22| (|Seq#Length| |run#0@@94|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |needle#0@@27| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@94| |i#1@@22|))))) :qid |totalorderidfyByteOrder.396:20| :skolemid |3341| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@94| |i#1@@22|))) ))) (<= (LitInt 0) (Byte__Order.__default.IndexOfFirstGte $ly@@348 |run#0@@94| |needle#0@@27|)))) :qid |totalorderidfyByteOrder.392:12| :skolemid |3342| :pattern ( (Byte__Order.__default.IndexOfFirstGte $ly@@348 |run#0@@94| |needle#0@@27|)) ))))
(assert (forall (($ly@@349 T@U) (|run#0@@95| T@U) (|needle#0@@28| Int) ) (!  (=> (and (and (= (type $ly@@349) LayerTypeType) (= (type |run#0@@95|) (SeqType BoxType))) (and ($Is |run#0@@95| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@28|) (< |needle#0@@28| 256)))) (= (|Byte__Order.__default.IndexOfFirstGte#requires| $ly@@349 |run#0@@95| |needle#0@@28|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@95|))) :qid |totalorderidfyByteOrder.392:12| :skolemid |3343| :pattern ( (|Byte__Order.__default.IndexOfFirstGte#requires| $ly@@349 |run#0@@95| |needle#0@@28|)) )))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted4) LayerTypeType))
(assert  (=> true (forall (($ly@@350 T@U) (|run#0@@96| T@U) (|needle#0@@29| Int) ) (!  (=> (and (and (= (type $ly@@350) LayerTypeType) (= (type |run#0@@96|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@96| |needle#0@@29|) (and (and ($Is |run#0@@96| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@29|) (< |needle#0@@29| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@96|)))) (and (=> (not (= (|Seq#Length| |run#0@@96|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte |run#0@@96|) (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@96|))) |needle#0@@29|)) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@96|))) |needle#0@@29|)) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte |run#0@@96|) (|Byte__Order.__default.IndexOfFirstGte#canCall| (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@96|) |needle#0@@29|))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted4)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted4)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted4) MoreFuel_Byte_Order._default.IsSorted4)) (= (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@350) |run#0@@96| |needle#0@@29|) (ite (= (|Seq#Length| |run#0@@96|) (LitInt 0)) 0 (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@96|))) |needle#0@@29|) (|Seq#Length| |run#0@@96|) (Byte__Order.__default.IndexOfFirstGte $ly@@350 (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@96|) |needle#0@@29|))))))) :qid |totalorderidfyByteOrder.392:12| :skolemid |3344| :pattern ( (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@350) |run#0@@96| |needle#0@@29|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted5) LayerTypeType))
(assert  (=> true (forall (($ly@@351 T@U) (|run#0@@97| T@U) (|needle#0@@30| Int) ) (!  (=> (and (and (= (type $ly@@351) LayerTypeType) (= (type |run#0@@97|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGte#canCall| (Lit |run#0@@97|) (LitInt |needle#0@@30|)) (and (and ($Is |run#0@@97| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@30|) (< |needle#0@@30| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@97|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@97|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte (Lit |run#0@@97|)) (|Byte__Order.__default.lt#canCall| (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@97|))))) (LitInt |needle#0@@30|))) (=> (not (U_2_bool (Lit (bool_2_U (Byte__Order.__default.lt (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@97|))))) (LitInt |needle#0@@30|)))))) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte (Lit |run#0@@97|)) (|Byte__Order.__default.IndexOfFirstGte#canCall| (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@97|))) (LitInt |needle#0@@30|)))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted5)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted5)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted5) MoreFuel_Byte_Order._default.IsSorted5)) (= (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@351) (Lit |run#0@@97|) (LitInt |needle#0@@30|)) (ite (= (|Seq#Length| (Lit |run#0@@97|)) (LitInt 0)) 0 (ite (Byte__Order.__default.lt (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@97|))))) (LitInt |needle#0@@30|)) (|Seq#Length| (Lit |run#0@@97|)) (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@351) (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@97|))) (LitInt |needle#0@@30|)))))))) :qid |totalorderidfyByteOrder.392:12| :weight 3 :skolemid |3345| :pattern ( (Byte__Order.__default.IndexOfFirstGte ($LS $ly@@351) (Lit |run#0@@97|) (LitInt |needle#0@@30|))) ))))
(assert (forall (($ly@@352 T@U) (|s#0@@67| T@U) (|key#0@@22| Int) (|lo#0| Int) (|hi#0| Int) ) (!  (=> (and (= (type $ly@@352) LayerTypeType) (= (type |s#0@@67|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@352) |s#0@@67| |key#0@@22| |lo#0| |hi#0|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@352 |s#0@@67| |key#0@@22| |lo#0| |hi#0|))) :qid |totalorderidfyByteOrder.423:12| :skolemid |3346| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@352) |s#0@@67| |key#0@@22| |lo#0| |hi#0|)) )))
(assert (forall (($ly@@353 T@U) (|s#0@@68| T@U) (|key#0@@23| Int) (|lo#0@@0| Int) (|hi#0@@0| Int) ) (!  (=> (and (= (type $ly@@353) LayerTypeType) (= (type |s#0@@68|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@353 |s#0@@68| |key#0@@23| |lo#0@@0| |hi#0@@0|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $LZ |s#0@@68| |key#0@@23| |lo#0@@0| |hi#0@@0|))) :qid |totalorderidfyByteOrder.423:12| :skolemid |3347| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (AsFuelBottom $ly@@353) |s#0@@68| |key#0@@23| |lo#0@@0| |hi#0@@0|)) )))
(assert  (=> true (forall (($ly@@354 T@U) (|s#0@@69| T@U) (|key#0@@24| Int) (|lo#0@@1| Int) (|hi#0@@1| Int) ) (!  (=> (and (and (= (type $ly@@354) LayerTypeType) (= (type |s#0@@69|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@69| |key#0@@24| |lo#0@@1| |hi#0@@1|) (and (and ($Is |s#0@@69| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@24|) (< |key#0@@24| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@1|) (< |lo#0@@1| |hi#0@@1|)) (<= |hi#0@@1| (+ (|Seq#Length| |s#0@@69|) 1))) (=> (> |lo#0@@1| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@69| (- |lo#0@@1| 1)))) |key#0@@24|))) (=> (<= |hi#0@@1| (|Seq#Length| |s#0@@69|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@24| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@69| (- |hi#0@@1| 1)))))))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@354 |s#0@@69| |key#0@@24| |lo#0@@1| |hi#0@@1|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@354 |s#0@@69| |key#0@@24| |lo#0@@1| |hi#0@@1|) (|Seq#Length| |s#0@@69|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@354 |s#0@@69| |key#0@@24| |lo#0@@1| |hi#0@@1|) 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@69| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@354 |s#0@@69| |key#0@@24| |lo#0@@1| |hi#0@@1|) 1)))) |key#0@@24|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@354 |s#0@@69| |key#0@@24| |lo#0@@1| |hi#0@@1|) (|Seq#Length| |s#0@@69|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@24| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@69| (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@354 |s#0@@69| |key#0@@24| |lo#0@@1| |hi#0@@1|)))))))) :qid |totalorderidfyByteOrder.423:12| :skolemid |3348| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@354 |s#0@@69| |key#0@@24| |lo#0@@1| |hi#0@@1|)) ))))
(assert (forall (($ly@@355 T@U) (|s#0@@70| T@U) (|key#0@@25| Int) (|lo#0@@2| Int) (|hi#0@@2| Int) ) (!  (=> (and (and (= (type $ly@@355) LayerTypeType) (= (type |s#0@@70|) (SeqType BoxType))) (and ($Is |s#0@@70| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@25|) (< |key#0@@25| 256)))) (= (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@355 |s#0@@70| |key#0@@25| |lo#0@@2| |hi#0@@2|)  (and (and (and (and (<= (LitInt 0) |lo#0@@2|) (< |lo#0@@2| |hi#0@@2|)) (<= |hi#0@@2| (+ (|Seq#Length| |s#0@@70|) 1))) (=> (> |lo#0@@2| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@70| (- |lo#0@@2| 1)))) |key#0@@25|))) (=> (<= |hi#0@@2| (|Seq#Length| |s#0@@70|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@25| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@70| (- |hi#0@@2| 1))))))))) :qid |totalorderidfyByteOrder.423:12| :skolemid |3349| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@355 |s#0@@70| |key#0@@25| |lo#0@@2| |hi#0@@2|)) )))
(assert  (=> true (forall (($ly@@356 T@U) (|s#0@@71| T@U) (|key#0@@26| Int) (|lo#0@@3| Int) (|hi#0@@3| Int) ) (!  (=> (and (and (= (type $ly@@356) LayerTypeType) (= (type |s#0@@71|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@71| |key#0@@26| |lo#0@@3| |hi#0@@3|) (and (and ($Is |s#0@@71| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@26|) (< |key#0@@26| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@3|) (< |lo#0@@3| |hi#0@@3|)) (<= |hi#0@@3| (+ (|Seq#Length| |s#0@@71|) 1))) (=> (> |lo#0@@3| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@71| (- |lo#0@@3| 1)))) |key#0@@26|))) (=> (<= |hi#0@@3| (|Seq#Length| |s#0@@71|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@26| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@71| (- |hi#0@@3| 1)))))))))) (and (=> (< (+ |lo#0@@3| 1) |hi#0@@3|) (let ((|mid#0| (Div (+ |lo#0@@3| |hi#0@@3|) (LitInt 2)))) (and (and (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@71| (- |mid#0| 1)))) |key#0@@26|) (=> (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@71| (- |mid#0| 1)))) |key#0@@26|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@71| |key#0@@26| |mid#0| |hi#0@@3|))) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@71| (- |mid#0| 1)))) |key#0@@26|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@71| |key#0@@26| |lo#0@@3| |mid#0|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@356) |s#0@@71| |key#0@@26| |lo#0@@3| |hi#0@@3|) (ite (< (+ |lo#0@@3| 1) |hi#0@@3|) (let ((|mid#0@@0| (Div (+ |lo#0@@3| |hi#0@@3|) (LitInt 2)))) (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@71| (- |mid#0@@0| 1)))) |key#0@@26|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@356 |s#0@@71| |key#0@@26| |mid#0@@0| |hi#0@@3|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@356 |s#0@@71| |key#0@@26| |lo#0@@3| |mid#0@@0|))) |lo#0@@3|)))) :qid |totalorderidfyByteOrder.423:12| :skolemid |3350| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@356) |s#0@@71| |key#0@@26| |lo#0@@3| |hi#0@@3|)) ))))
(assert  (=> true (forall (($ly@@357 T@U) (|s#0@@72| T@U) (|key#0@@27| Int) (|lo#0@@4| Int) (|hi#0@@4| Int) ) (!  (=> (and (and (= (type $ly@@357) LayerTypeType) (= (type |s#0@@72|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@72| |key#0@@27| (LitInt |lo#0@@4|) (LitInt |hi#0@@4|)) (and (and ($Is |s#0@@72| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@27|) (< |key#0@@27| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@4|)) (< |lo#0@@4| |hi#0@@4|)) (<= (LitInt |hi#0@@4|) (+ (|Seq#Length| |s#0@@72|) 1))) (=> (> |lo#0@@4| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@72| (LitInt (- |lo#0@@4| 1))))) |key#0@@27|))) (=> (<= (LitInt |hi#0@@4|) (|Seq#Length| |s#0@@72|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@27| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@72| (LitInt (- |hi#0@@4| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@4| 1) |hi#0@@4|)))) (let ((|mid#1| (LitInt (Div (+ |lo#0@@4| |hi#0@@4|) (LitInt 2))))) (and (and (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@72| (- |mid#1| 1)))) |key#0@@27|) (=> (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@72| (- |mid#1| 1)))) |key#0@@27|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@72| |key#0@@27| |mid#1| (LitInt |hi#0@@4|)))) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@72| (- |mid#1| 1)))) |key#0@@27|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@72| |key#0@@27| (LitInt |lo#0@@4|) |mid#1|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@357) |s#0@@72| |key#0@@27| (LitInt |lo#0@@4|) (LitInt |hi#0@@4|)) (ite (< (+ |lo#0@@4| 1) |hi#0@@4|) (let ((|mid#1@@0| (LitInt (Div (+ |lo#0@@4| |hi#0@@4|) (LitInt 2))))) (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@72| (LitInt (- |mid#1@@0| 1))))) |key#0@@27|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@357) |s#0@@72| |key#0@@27| |mid#1@@0| (LitInt |hi#0@@4|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@357) |s#0@@72| |key#0@@27| (LitInt |lo#0@@4|) |mid#1@@0|))) |lo#0@@4|)))) :qid |totalorderidfyByteOrder.423:12| :weight 3 :skolemid |3351| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@357) |s#0@@72| |key#0@@27| (LitInt |lo#0@@4|) (LitInt |hi#0@@4|))) ))))
(assert  (=> true (forall (($ly@@358 T@U) (|s#0@@73| T@U) (|key#0@@28| Int) (|lo#0@@5| Int) (|hi#0@@5| Int) ) (!  (=> (and (and (= (type $ly@@358) LayerTypeType) (= (type |s#0@@73|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@73|) (LitInt |key#0@@28|) (LitInt |lo#0@@5|) (LitInt |hi#0@@5|)) (and (and ($Is |s#0@@73| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@28|) (< |key#0@@28| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@5|)) (< |lo#0@@5| |hi#0@@5|)) (<= (LitInt |hi#0@@5|) (+ (|Seq#Length| (Lit |s#0@@73|)) 1))) (=> (> |lo#0@@5| 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@73|) (LitInt (- |lo#0@@5| 1))))) (LitInt |key#0@@28|)))) (=> (<= (LitInt |hi#0@@5|) (|Seq#Length| (Lit |s#0@@73|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |key#0@@28|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@73|) (LitInt (- |hi#0@@5| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@5| 1) |hi#0@@5|)))) (let ((|mid#2| (LitInt (Div (+ |lo#0@@5| |hi#0@@5|) (LitInt 2))))) (and (and (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@73|) (- |mid#2| 1)))) (LitInt |key#0@@28|)) (=> (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@73|) (- |mid#2| 1)))) (LitInt |key#0@@28|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@73|) (LitInt |key#0@@28|) |mid#2| (LitInt |hi#0@@5|)))) (=> (not (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@73|) (- |mid#2| 1)))) (LitInt |key#0@@28|))) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@73|) (LitInt |key#0@@28|) (LitInt |lo#0@@5|) |mid#2|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@358) (Lit |s#0@@73|) (LitInt |key#0@@28|) (LitInt |lo#0@@5|) (LitInt |hi#0@@5|)) (ite (< (+ |lo#0@@5| 1) |hi#0@@5|) (let ((|mid#2@@0| (LitInt (Div (+ |lo#0@@5| |hi#0@@5|) (LitInt 2))))) (ite (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@73|) (LitInt (- |mid#2@@0| 1))))) (LitInt |key#0@@28|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@358) (Lit |s#0@@73|) (LitInt |key#0@@28|) |mid#2@@0| (LitInt |hi#0@@5|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@358) (Lit |s#0@@73|) (LitInt |key#0@@28|) (LitInt |lo#0@@5|) |mid#2@@0|))) |lo#0@@5|)))) :qid |totalorderidfyByteOrder.423:12| :weight 3 :skolemid |3352| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@358) (Lit |s#0@@73|) (LitInt |key#0@@28|) (LitInt |lo#0@@5|) (LitInt |hi#0@@5|))) ))))
(assert (forall (($ly@@359 T@U) (|s#0@@74| T@U) (|key#0@@29| Int) ) (!  (=> (and (= (type $ly@@359) LayerTypeType) (= (type |s#0@@74|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@359) |s#0@@74| |key#0@@29|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@359 |s#0@@74| |key#0@@29|))) :qid |totalorderidfyByteOrder.443:22| :skolemid |3353| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@359) |s#0@@74| |key#0@@29|)) )))
(assert (forall (($ly@@360 T@U) (|s#0@@75| T@U) (|key#0@@30| Int) ) (!  (=> (and (= (type $ly@@360) LayerTypeType) (= (type |s#0@@75|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@360 |s#0@@75| |key#0@@30|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $LZ |s#0@@75| |key#0@@30|))) :qid |totalorderidfyByteOrder.443:22| :skolemid |3354| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte (AsFuelBottom $ly@@360) |s#0@@75| |key#0@@30|)) )))
(assert  (=> true (forall (($ly@@361 T@U) (|s#0@@76| T@U) (|key#0@@31| Int) ) (!  (=> (and (and (= (type $ly@@361) LayerTypeType) (= (type |s#0@@76|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@76| |key#0@@31|) (and ($Is |s#0@@76| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@31|) (< |key#0@@31| 256))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@361 |s#0@@76| |key#0@@31|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@361 |s#0@@76| |key#0@@31|) (|Seq#Length| |s#0@@76|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@361 |s#0@@76| |key#0@@31|) 0) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |s#0@@76| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@361 |s#0@@76| |key#0@@31|) 1)))) |key#0@@31|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@361 |s#0@@76| |key#0@@31|) (|Seq#Length| |s#0@@76|)) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |key#0@@31| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@76| (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@361 |s#0@@76| |key#0@@31|)))))))) :qid |totalorderidfyByteOrder.443:22| :skolemid |3355| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@361 |s#0@@76| |key#0@@31|)) ))))
(assert (forall (($ly@@362 T@U) (|s#0@@77| T@U) (|key#0@@32| Int) ) (!  (=> (and (and (= (type $ly@@362) LayerTypeType) (= (type |s#0@@77|) (SeqType BoxType))) (and ($Is |s#0@@77| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@32|) (< |key#0@@32| 256)))) (= (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@362 |s#0@@77| |key#0@@32|) true)) :qid |totalorderidfyByteOrder.443:22| :skolemid |3356| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@362 |s#0@@77| |key#0@@32|)) )))
(assert  (=> true (forall (($ly@@363 T@U) (|s#0@@78| T@U) (|key#0@@33| Int) ) (!  (=> (and (and (= (type $ly@@363) LayerTypeType) (= (type |s#0@@78|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@78| |key#0@@33|) (and ($Is |s#0@@78| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@33|) (< |key#0@@33| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@78| |key#0@@33| (LitInt 0) (+ (|Seq#Length| |s#0@@78|) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@363) |s#0@@78| |key#0@@33|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) |s#0@@78| |key#0@@33| (LitInt 0) (+ (|Seq#Length| |s#0@@78|) 1))))) :qid |totalorderidfyByteOrder.443:22| :skolemid |3357| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@363) |s#0@@78| |key#0@@33|)) ))))
(assert  (=> true (forall (($ly@@364 T@U) (|s#0@@79| T@U) (|key#0@@34| Int) ) (!  (=> (and (and (= (type $ly@@364) LayerTypeType) (= (type |s#0@@79|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (Lit |s#0@@79|) (LitInt |key#0@@34|)) (and ($Is |s#0@@79| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@34|) (< |key#0@@34| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@79|) (LitInt |key#0@@34|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@79|)) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@364) (Lit |s#0@@79|) (LitInt |key#0@@34|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) (Lit |s#0@@79|) (LitInt |key#0@@34|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@79|)) 1))))) :qid |totalorderidfyByteOrder.443:22| :weight 3 :skolemid |3358| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@364) (Lit |s#0@@79|) (LitInt |key#0@@34|))) ))))
(assert (forall (($ly@@365 T@U) (|run#0@@98| T@U) (|needle#0@@31| Int) ) (!  (=> (and (= (type $ly@@365) LayerTypeType) (= (type |run#0@@98|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@365) |run#0@@98| |needle#0@@31|) (Byte__Order.__default.IndexOfFirstGt $ly@@365 |run#0@@98| |needle#0@@31|))) :qid |totalorderidfyByteOrder.451:12| :skolemid |3359| :pattern ( (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@365) |run#0@@98| |needle#0@@31|)) )))
(assert (forall (($ly@@366 T@U) (|run#0@@99| T@U) (|needle#0@@32| Int) ) (!  (=> (and (= (type $ly@@366) LayerTypeType) (= (type |run#0@@99|) (SeqType BoxType))) (= (Byte__Order.__default.IndexOfFirstGt $ly@@366 |run#0@@99| |needle#0@@32|) (Byte__Order.__default.IndexOfFirstGt $LZ |run#0@@99| |needle#0@@32|))) :qid |totalorderidfyByteOrder.451:12| :skolemid |3360| :pattern ( (Byte__Order.__default.IndexOfFirstGt (AsFuelBottom $ly@@366) |run#0@@99| |needle#0@@32|)) )))
(assert  (=> true (forall (($ly@@367 T@U) (|run#0@@100| T@U) (|needle#0@@33| Int) ) (!  (=> (and (and (= (type $ly@@367) LayerTypeType) (= (type |run#0@@100|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@100| |needle#0@@33|) (and (and ($Is |run#0@@100| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@33|) (< |needle#0@@33| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@100|)))) (and (and (and (<= (Byte__Order.__default.IndexOfFirstGt $ly@@367 |run#0@@100| |needle#0@@33|) (|Seq#Length| |run#0@@100|)) (forall ((|i#0@@95| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@95|) (< |i#0@@95| (Byte__Order.__default.IndexOfFirstGt $ly@@367 |run#0@@100| |needle#0@@33|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |i#0@@95|))) |needle#0@@33|)) :qid |totalorderidfyByteOrder.454:20| :skolemid |3361| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@100| |i#0@@95|))) ))) (forall ((|i#1@@23| Int) ) (!  (=> (and (<= (Byte__Order.__default.IndexOfFirstGt $ly@@367 |run#0@@100| |needle#0@@33|) |i#1@@23|) (< |i#1@@23| (|Seq#Length| |run#0@@100|))) (Byte__Order.__default.lt |needle#0@@33| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@100| |i#1@@23|))))) :qid |totalorderidfyByteOrder.455:20| :skolemid |3362| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@100| |i#1@@23|))) ))) (<= (LitInt 0) (Byte__Order.__default.IndexOfFirstGt $ly@@367 |run#0@@100| |needle#0@@33|)))) :qid |totalorderidfyByteOrder.451:12| :skolemid |3363| :pattern ( (Byte__Order.__default.IndexOfFirstGt $ly@@367 |run#0@@100| |needle#0@@33|)) ))))
(assert (forall (($ly@@368 T@U) (|run#0@@101| T@U) (|needle#0@@34| Int) ) (!  (=> (and (and (= (type $ly@@368) LayerTypeType) (= (type |run#0@@101|) (SeqType BoxType))) (and ($Is |run#0@@101| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@34|) (< |needle#0@@34| 256)))) (= (|Byte__Order.__default.IndexOfFirstGt#requires| $ly@@368 |run#0@@101| |needle#0@@34|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@101|))) :qid |totalorderidfyByteOrder.451:12| :skolemid |3364| :pattern ( (|Byte__Order.__default.IndexOfFirstGt#requires| $ly@@368 |run#0@@101| |needle#0@@34|)) )))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted6) LayerTypeType))
(assert  (=> true (forall (($ly@@369 T@U) (|run#0@@102| T@U) (|needle#0@@35| Int) ) (!  (=> (and (and (= (type $ly@@369) LayerTypeType) (= (type |run#0@@102|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@102| |needle#0@@35|) (and (and ($Is |run#0@@102| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@35|) (< |needle#0@@35| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@102|)))) (and (=> (not (= (|Seq#Length| |run#0@@102|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte |run#0@@102|) (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@102|))) |needle#0@@35|)) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@102|))) |needle#0@@35|)) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte |run#0@@102|) (|Byte__Order.__default.IndexOfFirstGt#canCall| (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@102|) |needle#0@@35|))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted6)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted6)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted6) MoreFuel_Byte_Order._default.IsSorted6)) (= (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@369) |run#0@@102| |needle#0@@35|) (ite (= (|Seq#Length| |run#0@@102|) (LitInt 0)) 0 (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte |run#0@@102|))) |needle#0@@35|) (|Seq#Length| |run#0@@102|) (Byte__Order.__default.IndexOfFirstGt $ly@@369 (Sequences.__default.DropLast Tclass.NativeTypes.byte |run#0@@102|) |needle#0@@35|))))))) :qid |totalorderidfyByteOrder.451:12| :skolemid |3365| :pattern ( (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@369) |run#0@@102| |needle#0@@35|)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted7) LayerTypeType))
(assert  (=> true (forall (($ly@@370 T@U) (|run#0@@103| T@U) (|needle#0@@36| Int) ) (!  (=> (and (and (= (type $ly@@370) LayerTypeType) (= (type |run#0@@103|) (SeqType BoxType))) (or (|Byte__Order.__default.IndexOfFirstGt#canCall| (Lit |run#0@@103|) (LitInt |needle#0@@36|)) (and (and ($Is |run#0@@103| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |needle#0@@36|) (< |needle#0@@36| 256))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Lit |run#0@@103|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@103|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.NativeTypes.byte (Lit |run#0@@103|)) (|Byte__Order.__default.lte#canCall| (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@103|))))) (LitInt |needle#0@@36|))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@103|))))) (LitInt |needle#0@@36|))) (and (|Sequences.__default.DropLast#canCall| Tclass.NativeTypes.byte (Lit |run#0@@103|)) (|Byte__Order.__default.IndexOfFirstGt#canCall| (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@103|))) (LitInt |needle#0@@36|)))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted7)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted7)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted7) MoreFuel_Byte_Order._default.IsSorted7)) (= (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@370) (Lit |run#0@@103|) (LitInt |needle#0@@36|)) (ite (= (|Seq#Length| (Lit |run#0@@103|)) (LitInt 0)) 0 (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt (U_2_int ($Unbox intType (Sequences.__default.Last Tclass.NativeTypes.byte (Lit |run#0@@103|))))) (LitInt |needle#0@@36|)) (|Seq#Length| (Lit |run#0@@103|)) (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@370) (Lit (Sequences.__default.DropLast Tclass.NativeTypes.byte (Lit |run#0@@103|))) (LitInt |needle#0@@36|)))))))) :qid |totalorderidfyByteOrder.451:12| :weight 3 :skolemid |3366| :pattern ( (Byte__Order.__default.IndexOfFirstGt ($LS $ly@@370) (Lit |run#0@@103|) (LitInt |needle#0@@36|))) ))))
(assert (forall (($ly@@371 T@U) (|s#0@@80| T@U) (|key#0@@35| Int) (|lo#0@@6| Int) (|hi#0@@6| Int) ) (!  (=> (and (= (type $ly@@371) LayerTypeType) (= (type |s#0@@80|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@371) |s#0@@80| |key#0@@35| |lo#0@@6| |hi#0@@6|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@371 |s#0@@80| |key#0@@35| |lo#0@@6| |hi#0@@6|))) :qid |totalorderidfyByteOrder.482:12| :skolemid |3367| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@371) |s#0@@80| |key#0@@35| |lo#0@@6| |hi#0@@6|)) )))
(assert (forall (($ly@@372 T@U) (|s#0@@81| T@U) (|key#0@@36| Int) (|lo#0@@7| Int) (|hi#0@@7| Int) ) (!  (=> (and (= (type $ly@@372) LayerTypeType) (= (type |s#0@@81|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@372 |s#0@@81| |key#0@@36| |lo#0@@7| |hi#0@@7|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $LZ |s#0@@81| |key#0@@36| |lo#0@@7| |hi#0@@7|))) :qid |totalorderidfyByteOrder.482:12| :skolemid |3368| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (AsFuelBottom $ly@@372) |s#0@@81| |key#0@@36| |lo#0@@7| |hi#0@@7|)) )))
(assert  (=> true (forall (($ly@@373 T@U) (|s#0@@82| T@U) (|key#0@@37| Int) (|lo#0@@8| Int) (|hi#0@@8| Int) ) (!  (=> (and (and (= (type $ly@@373) LayerTypeType) (= (type |s#0@@82|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@82| |key#0@@37| |lo#0@@8| |hi#0@@8|) (and (and ($Is |s#0@@82| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@37|) (< |key#0@@37| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@8|) (< |lo#0@@8| |hi#0@@8|)) (<= |hi#0@@8| (+ (|Seq#Length| |s#0@@82|) 1))) (=> (> |lo#0@@8| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@82| (- |lo#0@@8| 1)))) |key#0@@37|))) (=> (<= |hi#0@@8| (|Seq#Length| |s#0@@82|)) (Byte__Order.__default.lt |key#0@@37| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@82| (- |hi#0@@8| 1)))))))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@373 |s#0@@82| |key#0@@37| |lo#0@@8| |hi#0@@8|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@373 |s#0@@82| |key#0@@37| |lo#0@@8| |hi#0@@8|) (|Seq#Length| |s#0@@82|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@373 |s#0@@82| |key#0@@37| |lo#0@@8| |hi#0@@8|) 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@82| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@373 |s#0@@82| |key#0@@37| |lo#0@@8| |hi#0@@8|) 1)))) |key#0@@37|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@373 |s#0@@82| |key#0@@37| |lo#0@@8| |hi#0@@8|) (|Seq#Length| |s#0@@82|)) (Byte__Order.__default.lt |key#0@@37| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@82| (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@373 |s#0@@82| |key#0@@37| |lo#0@@8| |hi#0@@8|)))))))) :qid |totalorderidfyByteOrder.482:12| :skolemid |3369| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@373 |s#0@@82| |key#0@@37| |lo#0@@8| |hi#0@@8|)) ))))
(assert (forall (($ly@@374 T@U) (|s#0@@83| T@U) (|key#0@@38| Int) (|lo#0@@9| Int) (|hi#0@@9| Int) ) (!  (=> (and (and (= (type $ly@@374) LayerTypeType) (= (type |s#0@@83|) (SeqType BoxType))) (and ($Is |s#0@@83| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@38|) (< |key#0@@38| 256)))) (= (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@374 |s#0@@83| |key#0@@38| |lo#0@@9| |hi#0@@9|)  (and (and (and (and (<= (LitInt 0) |lo#0@@9|) (< |lo#0@@9| |hi#0@@9|)) (<= |hi#0@@9| (+ (|Seq#Length| |s#0@@83|) 1))) (=> (> |lo#0@@9| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@83| (- |lo#0@@9| 1)))) |key#0@@38|))) (=> (<= |hi#0@@9| (|Seq#Length| |s#0@@83|)) (Byte__Order.__default.lt |key#0@@38| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@83| (- |hi#0@@9| 1))))))))) :qid |totalorderidfyByteOrder.482:12| :skolemid |3370| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@374 |s#0@@83| |key#0@@38| |lo#0@@9| |hi#0@@9|)) )))
(assert  (=> true (forall (($ly@@375 T@U) (|s#0@@84| T@U) (|key#0@@39| Int) (|lo#0@@10| Int) (|hi#0@@10| Int) ) (!  (=> (and (and (= (type $ly@@375) LayerTypeType) (= (type |s#0@@84|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@84| |key#0@@39| |lo#0@@10| |hi#0@@10|) (and (and ($Is |s#0@@84| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@39|) (< |key#0@@39| 256))) (and (and (and (and (<= (LitInt 0) |lo#0@@10|) (< |lo#0@@10| |hi#0@@10|)) (<= |hi#0@@10| (+ (|Seq#Length| |s#0@@84|) 1))) (=> (> |lo#0@@10| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@84| (- |lo#0@@10| 1)))) |key#0@@39|))) (=> (<= |hi#0@@10| (|Seq#Length| |s#0@@84|)) (Byte__Order.__default.lt |key#0@@39| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@84| (- |hi#0@@10| 1)))))))))) (and (=> (< (+ |lo#0@@10| 1) |hi#0@@10|) (let ((|mid#0@@1| (Div (+ |lo#0@@10| |hi#0@@10|) (LitInt 2)))) (and (and (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@84| (- |mid#0@@1| 1)))) |key#0@@39|) (=> (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@84| (- |mid#0@@1| 1)))) |key#0@@39|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@84| |key#0@@39| |mid#0@@1| |hi#0@@10|))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@84| (- |mid#0@@1| 1)))) |key#0@@39|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@84| |key#0@@39| |lo#0@@10| |mid#0@@1|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@375) |s#0@@84| |key#0@@39| |lo#0@@10| |hi#0@@10|) (ite (< (+ |lo#0@@10| 1) |hi#0@@10|) (let ((|mid#0@@2| (Div (+ |lo#0@@10| |hi#0@@10|) (LitInt 2)))) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@84| (- |mid#0@@2| 1)))) |key#0@@39|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@375 |s#0@@84| |key#0@@39| |mid#0@@2| |hi#0@@10|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@375 |s#0@@84| |key#0@@39| |lo#0@@10| |mid#0@@2|))) |lo#0@@10|)))) :qid |totalorderidfyByteOrder.482:12| :skolemid |3371| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@375) |s#0@@84| |key#0@@39| |lo#0@@10| |hi#0@@10|)) ))))
(assert  (=> true (forall (($ly@@376 T@U) (|s#0@@85| T@U) (|key#0@@40| Int) (|lo#0@@11| Int) (|hi#0@@11| Int) ) (!  (=> (and (and (= (type $ly@@376) LayerTypeType) (= (type |s#0@@85|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@85| |key#0@@40| (LitInt |lo#0@@11|) (LitInt |hi#0@@11|)) (and (and ($Is |s#0@@85| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@40|) (< |key#0@@40| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@11|)) (< |lo#0@@11| |hi#0@@11|)) (<= (LitInt |hi#0@@11|) (+ (|Seq#Length| |s#0@@85|) 1))) (=> (> |lo#0@@11| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@85| (LitInt (- |lo#0@@11| 1))))) |key#0@@40|))) (=> (<= (LitInt |hi#0@@11|) (|Seq#Length| |s#0@@85|)) (Byte__Order.__default.lt |key#0@@40| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@85| (LitInt (- |hi#0@@11| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@11| 1) |hi#0@@11|)))) (let ((|mid#1@@1| (LitInt (Div (+ |lo#0@@11| |hi#0@@11|) (LitInt 2))))) (and (and (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@85| (- |mid#1@@1| 1)))) |key#0@@40|) (=> (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@85| (- |mid#1@@1| 1)))) |key#0@@40|) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@85| |key#0@@40| |mid#1@@1| (LitInt |hi#0@@11|)))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@85| (- |mid#1@@1| 1)))) |key#0@@40|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@85| |key#0@@40| (LitInt |lo#0@@11|) |mid#1@@1|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@376) |s#0@@85| |key#0@@40| (LitInt |lo#0@@11|) (LitInt |hi#0@@11|)) (ite (< (+ |lo#0@@11| 1) |hi#0@@11|) (let ((|mid#1@@2| (LitInt (Div (+ |lo#0@@11| |hi#0@@11|) (LitInt 2))))) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@85| (LitInt (- |mid#1@@2| 1))))) |key#0@@40|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@376) |s#0@@85| |key#0@@40| |mid#1@@2| (LitInt |hi#0@@11|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@376) |s#0@@85| |key#0@@40| (LitInt |lo#0@@11|) |mid#1@@2|))) |lo#0@@11|)))) :qid |totalorderidfyByteOrder.482:12| :weight 3 :skolemid |3372| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@376) |s#0@@85| |key#0@@40| (LitInt |lo#0@@11|) (LitInt |hi#0@@11|))) ))))
(assert  (=> true (forall (($ly@@377 T@U) (|s#0@@86| T@U) (|key#0@@41| Int) (|lo#0@@12| Int) (|hi#0@@12| Int) ) (!  (=> (and (and (= (type $ly@@377) LayerTypeType) (= (type |s#0@@86|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@86|) (LitInt |key#0@@41|) (LitInt |lo#0@@12|) (LitInt |hi#0@@12|)) (and (and ($Is |s#0@@86| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@41|) (< |key#0@@41| 256))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@12|)) (< |lo#0@@12| |hi#0@@12|)) (<= (LitInt |hi#0@@12|) (+ (|Seq#Length| (Lit |s#0@@86|)) 1))) (=> (> |lo#0@@12| 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@86|) (LitInt (- |lo#0@@12| 1))))) (LitInt |key#0@@41|)))) (=> (<= (LitInt |hi#0@@12|) (|Seq#Length| (Lit |s#0@@86|))) (Byte__Order.__default.lt (LitInt |key#0@@41|) (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@86|) (LitInt (- |hi#0@@12| 1))))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@12| 1) |hi#0@@12|)))) (let ((|mid#2@@1| (LitInt (Div (+ |lo#0@@12| |hi#0@@12|) (LitInt 2))))) (and (and (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@86|) (- |mid#2@@1| 1)))) (LitInt |key#0@@41|)) (=> (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@86|) (- |mid#2@@1| 1)))) (LitInt |key#0@@41|)) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@86|) (LitInt |key#0@@41|) |mid#2@@1| (LitInt |hi#0@@12|)))) (=> (not (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@86|) (- |mid#2@@1| 1)))) (LitInt |key#0@@41|))) (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@86|) (LitInt |key#0@@41|) (LitInt |lo#0@@12|) |mid#2@@1|))))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@377) (Lit |s#0@@86|) (LitInt |key#0@@41|) (LitInt |lo#0@@12|) (LitInt |hi#0@@12|)) (ite (< (+ |lo#0@@12| 1) |hi#0@@12|) (let ((|mid#2@@2| (LitInt (Div (+ |lo#0@@12| |hi#0@@12|) (LitInt 2))))) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |s#0@@86|) (LitInt (- |mid#2@@2| 1))))) (LitInt |key#0@@41|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@377) (Lit |s#0@@86|) (LitInt |key#0@@41|) |mid#2@@2| (LitInt |hi#0@@12|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@377) (Lit |s#0@@86|) (LitInt |key#0@@41|) (LitInt |lo#0@@12|) |mid#2@@2|))) |lo#0@@12|)))) :qid |totalorderidfyByteOrder.482:12| :weight 3 :skolemid |3373| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@377) (Lit |s#0@@86|) (LitInt |key#0@@41|) (LitInt |lo#0@@12|) (LitInt |hi#0@@12|))) ))))
(assert (forall (($ly@@378 T@U) (|s#0@@87| T@U) (|key#0@@42| Int) ) (!  (=> (and (= (type $ly@@378) LayerTypeType) (= (type |s#0@@87|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@378) |s#0@@87| |key#0@@42|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@378 |s#0@@87| |key#0@@42|))) :qid |totalorderidfyByteOrder.502:22| :skolemid |3374| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@378) |s#0@@87| |key#0@@42|)) )))
(assert (forall (($ly@@379 T@U) (|s#0@@88| T@U) (|key#0@@43| Int) ) (!  (=> (and (= (type $ly@@379) LayerTypeType) (= (type |s#0@@88|) (SeqType BoxType))) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@379 |s#0@@88| |key#0@@43|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $LZ |s#0@@88| |key#0@@43|))) :qid |totalorderidfyByteOrder.502:22| :skolemid |3375| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt (AsFuelBottom $ly@@379) |s#0@@88| |key#0@@43|)) )))
(assert  (=> true (forall (($ly@@380 T@U) (|s#0@@89| T@U) (|key#0@@44| Int) ) (!  (=> (and (and (= (type $ly@@380) LayerTypeType) (= (type |s#0@@89|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@89| |key#0@@44|) (and ($Is |s#0@@89| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@44|) (< |key#0@@44| 256))))) (and (and (and (<= (LitInt 0) (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@380 |s#0@@89| |key#0@@44|)) (<= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@380 |s#0@@89| |key#0@@44|) (|Seq#Length| |s#0@@89|))) (=> (> (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@380 |s#0@@89| |key#0@@44|) 0) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |s#0@@89| (- (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@380 |s#0@@89| |key#0@@44|) 1)))) |key#0@@44|))) (=> (< (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@380 |s#0@@89| |key#0@@44|) (|Seq#Length| |s#0@@89|)) (Byte__Order.__default.lt |key#0@@44| (U_2_int ($Unbox intType (|Seq#Index| |s#0@@89| (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@380 |s#0@@89| |key#0@@44|)))))))) :qid |totalorderidfyByteOrder.502:22| :skolemid |3376| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@380 |s#0@@89| |key#0@@44|)) ))))
(assert (forall (($ly@@381 T@U) (|s#0@@90| T@U) (|key#0@@45| Int) ) (!  (=> (and (and (= (type $ly@@381) LayerTypeType) (= (type |s#0@@90|) (SeqType BoxType))) (and ($Is |s#0@@90| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@45|) (< |key#0@@45| 256)))) (= (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@381 |s#0@@90| |key#0@@45|) true)) :qid |totalorderidfyByteOrder.502:22| :skolemid |3377| :pattern ( (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@381 |s#0@@90| |key#0@@45|)) )))
(assert  (=> true (forall (($ly@@382 T@U) (|s#0@@91| T@U) (|key#0@@46| Int) ) (!  (=> (and (and (= (type $ly@@382) LayerTypeType) (= (type |s#0@@91|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@91| |key#0@@46|) (and ($Is |s#0@@91| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@46|) (< |key#0@@46| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@91| |key#0@@46| (LitInt 0) (+ (|Seq#Length| |s#0@@91|) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@382) |s#0@@91| |key#0@@46|) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) |s#0@@91| |key#0@@46| (LitInt 0) (+ (|Seq#Length| |s#0@@91|) 1))))) :qid |totalorderidfyByteOrder.502:22| :skolemid |3378| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@382) |s#0@@91| |key#0@@46|)) ))))
(assert  (=> true (forall (($ly@@383 T@U) (|s#0@@92| T@U) (|key#0@@47| Int) ) (!  (=> (and (and (= (type $ly@@383) LayerTypeType) (= (type |s#0@@92|) (SeqType BoxType))) (or (|Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (Lit |s#0@@92|) (LitInt |key#0@@47|)) (and ($Is |s#0@@92| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@47|) (< |key#0@@47| 256))))) (and (|Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@92|) (LitInt |key#0@@47|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@92|)) 1)) (= (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@383) (Lit |s#0@@92|) (LitInt |key#0@@47|)) (Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) (Lit |s#0@@92|) (LitInt |key#0@@47|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@92|)) 1))))) :qid |totalorderidfyByteOrder.502:22| :weight 3 :skolemid |3379| :pattern ( (Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@383) (Lit |s#0@@92|) (LitInt |key#0@@47|))) ))))
(assert  (=> true (forall ((|a#0@@111| T@U) (|b#0@@75| T@U) ) (!  (=> (and (and (= (type |a#0@@111|) (MapType0Type BoxType boolType)) (= (type |b#0@@75|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLte#canCall| |a#0@@111| |b#0@@75|) (and ($Is |a#0@@111| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@75| (TSet Tclass.NativeTypes.byte))))) true) :qid |totalorderidfyByteOrder.658:23| :skolemid |3380| :pattern ( (Byte__Order.__default.SetAllLte |a#0@@111| |b#0@@75|)) ))))
(assert (forall ((|a#0@@112| T@U) (|b#0@@76| T@U) ) (!  (=> (and (and (= (type |a#0@@112|) (MapType0Type BoxType boolType)) (= (type |b#0@@76|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@112| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@76| (TSet Tclass.NativeTypes.byte)))) (= (|Byte__Order.__default.SetAllLte#requires| |a#0@@112| |b#0@@76|) true)) :qid |totalorderidfyByteOrder.658:23| :skolemid |3381| :pattern ( (|Byte__Order.__default.SetAllLte#requires| |a#0@@112| |b#0@@76|)) )))
(assert  (=> true (forall ((|a#0@@113| T@U) (|b#0@@77| T@U) ) (!  (=> (and (and (= (type |a#0@@113|) (MapType0Type BoxType boolType)) (= (type |b#0@@77|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLte#canCall| |a#0@@113| |b#0@@77|) (and ($Is |a#0@@113| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@77| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#0@@2| Int) (|y#0| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@2|) (< |x#0@@2| 256)) (and (<= (LitInt 0) |y#0|) (< |y#0| 256))) (=> (U_2_bool (MapType0Select |a#0@@113| ($Box (int_2_U |x#0@@2|)))) (=> (U_2_bool (MapType0Select |b#0@@77| ($Box (int_2_U |y#0|)))) (|Byte__Order.__default.lte#canCall| |x#0@@2| |y#0|)))) :qid |totalorderidfyByteOrder.659:12| :skolemid |3383| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#0@@2| |y#0|)) :pattern ( (MapType0Select |b#0@@77| ($Box (int_2_U |y#0|))) (MapType0Select |a#0@@113| ($Box (int_2_U |x#0@@2|)))) )) (= (Byte__Order.__default.SetAllLte |a#0@@113| |b#0@@77|) (forall ((|x#0@@3| Int) (|y#0@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@3|) (< |x#0@@3| 256)) (and (<= (LitInt 0) |y#0@@0|) (< |y#0@@0| 256))) (=> (and (U_2_bool (MapType0Select |a#0@@113| ($Box (int_2_U |x#0@@3|)))) (U_2_bool (MapType0Select |b#0@@77| ($Box (int_2_U |y#0@@0|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#0@@3| |y#0@@0|))) :qid |totalorderidfyByteOrder.659:12| :skolemid |3382| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#0@@3| |y#0@@0|)) :pattern ( (MapType0Select |b#0@@77| ($Box (int_2_U |y#0@@0|))) (MapType0Select |a#0@@113| ($Box (int_2_U |x#0@@3|)))) ))))) :qid |totalorderidfyByteOrder.658:23| :skolemid |3384| :pattern ( (Byte__Order.__default.SetAllLte |a#0@@113| |b#0@@77|)) ))))
(assert  (=> true (forall ((|a#0@@114| T@U) (|b#0@@78| T@U) ) (!  (=> (and (and (= (type |a#0@@114|) (MapType0Type BoxType boolType)) (= (type |b#0@@78|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLte#canCall| (Lit |a#0@@114|) (Lit |b#0@@78|)) (and ($Is |a#0@@114| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@78| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#1| Int) (|y#1| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1|) (< |x#1| 256)) (and (<= (LitInt 0) |y#1|) (< |y#1| 256))) (=> (U_2_bool (MapType0Select (Lit |a#0@@114|) ($Box (int_2_U |x#1|)))) (=> (U_2_bool (MapType0Select (Lit |b#0@@78|) ($Box (int_2_U |y#1|)))) (|Byte__Order.__default.lte#canCall| |x#1| |y#1|)))) :qid |totalorderidfyByteOrder.659:12| :skolemid |3386| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#1| |y#1|)) :pattern ( (MapType0Select |b#0@@78| ($Box (int_2_U |y#1|))) (MapType0Select |a#0@@114| ($Box (int_2_U |x#1|)))) )) (= (Byte__Order.__default.SetAllLte (Lit |a#0@@114|) (Lit |b#0@@78|)) (forall ((|x#1@@0| Int) (|y#1@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@0|) (< |x#1@@0| 256)) (and (<= (LitInt 0) |y#1@@0|) (< |y#1@@0| 256))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@114|) ($Box (int_2_U |x#1@@0|)))) (U_2_bool (MapType0Select (Lit |b#0@@78|) ($Box (int_2_U |y#1@@0|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#1@@0| |y#1@@0|))) :qid |totalorderidfyByteOrder.659:12| :skolemid |3385| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |x#1@@0| |y#1@@0|)) :pattern ( (MapType0Select |b#0@@78| ($Box (int_2_U |y#1@@0|))) (MapType0Select |a#0@@114| ($Box (int_2_U |x#1@@0|)))) ))))) :qid |totalorderidfyByteOrder.658:23| :weight 3 :skolemid |3387| :pattern ( (Byte__Order.__default.SetAllLte (Lit |a#0@@114|) (Lit |b#0@@78|))) ))))
(assert  (=> true (forall ((|a#0@@115| T@U) (|b#0@@79| T@U) ) (!  (=> (and (and (= (type |a#0@@115|) (MapType0Type BoxType boolType)) (= (type |b#0@@79|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLt#canCall| |a#0@@115| |b#0@@79|) (and ($Is |a#0@@115| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@79| (TSet Tclass.NativeTypes.byte))))) true) :qid |totalorderidfyByteOrder.662:22| :skolemid |3388| :pattern ( (Byte__Order.__default.SetAllLt |a#0@@115| |b#0@@79|)) ))))
(assert (forall ((|a#0@@116| T@U) (|b#0@@80| T@U) ) (!  (=> (and (and (= (type |a#0@@116|) (MapType0Type BoxType boolType)) (= (type |b#0@@80|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@116| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@80| (TSet Tclass.NativeTypes.byte)))) (= (|Byte__Order.__default.SetAllLt#requires| |a#0@@116| |b#0@@80|) true)) :qid |totalorderidfyByteOrder.662:22| :skolemid |3389| :pattern ( (|Byte__Order.__default.SetAllLt#requires| |a#0@@116| |b#0@@80|)) )))
(assert  (=> true (forall ((|a#0@@117| T@U) (|b#0@@81| T@U) ) (!  (=> (and (and (= (type |a#0@@117|) (MapType0Type BoxType boolType)) (= (type |b#0@@81|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLt#canCall| |a#0@@117| |b#0@@81|) (and ($Is |a#0@@117| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@81| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#0@@4| Int) (|y#0@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@4|) (< |x#0@@4| 256)) (and (<= (LitInt 0) |y#0@@1|) (< |y#0@@1| 256))) (=> (U_2_bool (MapType0Select |a#0@@117| ($Box (int_2_U |x#0@@4|)))) (=> (U_2_bool (MapType0Select |b#0@@81| ($Box (int_2_U |y#0@@1|)))) (|Byte__Order.__default.lt#canCall| |x#0@@4| |y#0@@1|)))) :qid |totalorderidfyByteOrder.663:12| :skolemid |3391| :pattern ( (Byte__Order.__default.lt |x#0@@4| |y#0@@1|)) :pattern ( (MapType0Select |b#0@@81| ($Box (int_2_U |y#0@@1|))) (MapType0Select |a#0@@117| ($Box (int_2_U |x#0@@4|)))) )) (= (Byte__Order.__default.SetAllLt |a#0@@117| |b#0@@81|) (forall ((|x#0@@5| Int) (|y#0@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#0@@5|) (< |x#0@@5| 256)) (and (<= (LitInt 0) |y#0@@2|) (< |y#0@@2| 256))) (=> (and (U_2_bool (MapType0Select |a#0@@117| ($Box (int_2_U |x#0@@5|)))) (U_2_bool (MapType0Select |b#0@@81| ($Box (int_2_U |y#0@@2|))))) (Byte__Order.__default.lt |x#0@@5| |y#0@@2|))) :qid |totalorderidfyByteOrder.663:12| :skolemid |3390| :pattern ( (Byte__Order.__default.lt |x#0@@5| |y#0@@2|)) :pattern ( (MapType0Select |b#0@@81| ($Box (int_2_U |y#0@@2|))) (MapType0Select |a#0@@117| ($Box (int_2_U |x#0@@5|)))) ))))) :qid |totalorderidfyByteOrder.662:22| :skolemid |3392| :pattern ( (Byte__Order.__default.SetAllLt |a#0@@117| |b#0@@81|)) ))))
(assert  (=> true (forall ((|a#0@@118| T@U) (|b#0@@82| T@U) ) (!  (=> (and (and (= (type |a#0@@118|) (MapType0Type BoxType boolType)) (= (type |b#0@@82|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetAllLt#canCall| (Lit |a#0@@118|) (Lit |b#0@@82|)) (and ($Is |a#0@@118| (TSet Tclass.NativeTypes.byte)) ($Is |b#0@@82| (TSet Tclass.NativeTypes.byte))))) (and (forall ((|x#1@@1| Int) (|y#1@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@1|) (< |x#1@@1| 256)) (and (<= (LitInt 0) |y#1@@1|) (< |y#1@@1| 256))) (=> (U_2_bool (MapType0Select (Lit |a#0@@118|) ($Box (int_2_U |x#1@@1|)))) (=> (U_2_bool (MapType0Select (Lit |b#0@@82|) ($Box (int_2_U |y#1@@1|)))) (|Byte__Order.__default.lt#canCall| |x#1@@1| |y#1@@1|)))) :qid |totalorderidfyByteOrder.663:12| :skolemid |3394| :pattern ( (Byte__Order.__default.lt |x#1@@1| |y#1@@1|)) :pattern ( (MapType0Select |b#0@@82| ($Box (int_2_U |y#1@@1|))) (MapType0Select |a#0@@118| ($Box (int_2_U |x#1@@1|)))) )) (= (Byte__Order.__default.SetAllLt (Lit |a#0@@118|) (Lit |b#0@@82|)) (forall ((|x#1@@2| Int) (|y#1@@2| Int) ) (!  (=> (and (and (<= (LitInt 0) |x#1@@2|) (< |x#1@@2| 256)) (and (<= (LitInt 0) |y#1@@2|) (< |y#1@@2| 256))) (=> (and (U_2_bool (MapType0Select (Lit |a#0@@118|) ($Box (int_2_U |x#1@@2|)))) (U_2_bool (MapType0Select (Lit |b#0@@82|) ($Box (int_2_U |y#1@@2|))))) (Byte__Order.__default.lt |x#1@@2| |y#1@@2|))) :qid |totalorderidfyByteOrder.663:12| :skolemid |3393| :pattern ( (Byte__Order.__default.lt |x#1@@2| |y#1@@2|)) :pattern ( (MapType0Select |b#0@@82| ($Box (int_2_U |y#1@@2|))) (MapType0Select |a#0@@118| ($Box (int_2_U |x#1@@2|)))) ))))) :qid |totalorderidfyByteOrder.662:22| :weight 3 :skolemid |3395| :pattern ( (Byte__Order.__default.SetAllLt (Lit |a#0@@118|) (Lit |b#0@@82|))) ))))
(assert (forall (($ly@@384 T@U) (|a#0@@119| Int) ) (!  (=> (= (type $ly@@384) LayerTypeType) (= (Byte__Order.__default.NotMinimum ($LS $ly@@384) |a#0@@119|) (Byte__Order.__default.NotMinimum $ly@@384 |a#0@@119|))) :qid |totalorderidfyByteOrder.674:23| :skolemid |3396| :pattern ( (Byte__Order.__default.NotMinimum ($LS $ly@@384) |a#0@@119|)) )))
(assert (forall (($ly@@385 T@U) (|a#0@@120| Int) ) (!  (=> (= (type $ly@@385) LayerTypeType) (= (Byte__Order.__default.NotMinimum $ly@@385 |a#0@@120|) (Byte__Order.__default.NotMinimum $LZ |a#0@@120|))) :qid |totalorderidfyByteOrder.674:23| :skolemid |3397| :pattern ( (Byte__Order.__default.NotMinimum (AsFuelBottom $ly@@385) |a#0@@120|)) )))
(assert  (=> true (forall (($ly@@386 T@U) (|a#0@@121| Int) ) (!  (=> (and (= (type $ly@@386) LayerTypeType) (or (|Byte__Order.__default.NotMinimum#canCall| |a#0@@121|) (and (<= (LitInt 0) |a#0@@121|) (< |a#0@@121| 256)))) true) :qid |totalorderidfyByteOrder.674:23| :skolemid |3398| :pattern ( (Byte__Order.__default.NotMinimum $ly@@386 |a#0@@121|)) ))))
(assert (forall (($ly@@387 T@U) (|a#0@@122| Int) ) (!  (=> (= (type $ly@@387) LayerTypeType) (=> (and (<= (LitInt 0) |a#0@@122|) (< |a#0@@122| 256)) (= (|Byte__Order.__default.NotMinimum#requires| $ly@@387 |a#0@@122|) true))) :qid |totalorderidfyByteOrder.674:23| :skolemid |3399| :pattern ( (|Byte__Order.__default.NotMinimum#requires| $ly@@387 |a#0@@122|)) )))
(assert  (=> true (forall (($ly@@388 T@U) (|a#0@@123| Int) ) (!  (=> (and (= (type $ly@@388) LayerTypeType) (or (|Byte__Order.__default.NotMinimum#canCall| |a#0@@123|) (and (<= (LitInt 0) |a#0@@123|) (< |a#0@@123| 256)))) (and (forall ((|b#0@@83| Int) ) (!  (=> (and (<= (LitInt 0) |b#0@@83|) (< |b#0@@83| 256)) (|Byte__Order.__default.lt#canCall| |b#0@@83| |a#0@@123|)) :qid |totalorderidfyByteOrder.675:12| :skolemid |3401| :pattern ( (Byte__Order.__default.lt |b#0@@83| |a#0@@123|)) )) (= (Byte__Order.__default.NotMinimum ($LS $ly@@388) |a#0@@123|) (exists ((|b#0@@84| Int) ) (!  (and (and (<= (LitInt 0) |b#0@@84|) (< |b#0@@84| 256)) (Byte__Order.__default.lt |b#0@@84| |a#0@@123|)) :qid |totalorderidfyByteOrder.675:12| :skolemid |3400| :pattern ( (Byte__Order.__default.lt |b#0@@84| |a#0@@123|)) ))))) :qid |totalorderidfyByteOrder.674:23| :skolemid |3402| :pattern ( (Byte__Order.__default.NotMinimum ($LS $ly@@388) |a#0@@123|)) ))))
(assert  (=> true (forall (($ly@@389 T@U) (|a#0@@124| Int) ) (!  (=> (and (= (type $ly@@389) LayerTypeType) (or (|Byte__Order.__default.NotMinimum#canCall| (LitInt |a#0@@124|)) (and (<= (LitInt 0) |a#0@@124|) (< |a#0@@124| 256)))) (and (forall ((|b#1@@1| Int) ) (!  (=> (and (<= (LitInt 0) |b#1@@1|) (< |b#1@@1| 256)) (|Byte__Order.__default.lt#canCall| |b#1@@1| (LitInt |a#0@@124|))) :qid |totalorderidfyByteOrder.675:12| :skolemid |3404| :pattern ( (Byte__Order.__default.lt |b#1@@1| |a#0@@124|)) )) (= (Byte__Order.__default.NotMinimum ($LS $ly@@389) (LitInt |a#0@@124|)) (exists ((|b#1@@2| Int) ) (!  (and (and (<= (LitInt 0) |b#1@@2|) (< |b#1@@2| 256)) (Byte__Order.__default.lt |b#1@@2| (LitInt |a#0@@124|))) :qid |totalorderidfyByteOrder.675:12| :skolemid |3403| :pattern ( (Byte__Order.__default.lt |b#1@@2| |a#0@@124|)) ))))) :qid |totalorderidfyByteOrder.674:23| :weight 3 :skolemid |3405| :pattern ( (Byte__Order.__default.NotMinimum ($LS $ly@@389) (LitInt |a#0@@124|))) ))))
(assert (forall ((arg0@@605 T@U) (arg1@@301 T@U) (arg2@@208 Int) (arg3@@151 T@U) ) (! (= (type (Byte__Order.__default.MapPivotedUnion arg0@@605 arg1@@301 arg2@@208 arg3@@151)) (MapType BoxType BoxType)) :qid |funType:Byte__Order.__default.MapPivotedUnion| :pattern ( (Byte__Order.__default.MapPivotedUnion arg0@@605 arg1@@301 arg2@@208 arg3@@151)) )))
(assert  (=> true (forall ((Byte_Order._default.MapPivotedUnion$Value T@U) (|left#0| T@U) (|pivot#0| Int) (|right#0| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value) TyType) (= (type |left#0|) (MapType BoxType BoxType))) (= (type |right#0|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapPivotedUnion#canCall| Byte_Order._default.MapPivotedUnion$Value |left#0| |pivot#0| |right#0|) (and (and ($Is |left#0| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value)) (and (<= (LitInt 0) |pivot#0|) (< |pivot#0| 256))) ($Is |right#0| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value))))) ($Is (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value |left#0| |pivot#0| |right#0|) (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value))) :qid |unknown.0:0| :skolemid |3406| :pattern ( (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value |left#0| |pivot#0| |right#0|)) ))))
(assert (forall ((Byte_Order._default.MapPivotedUnion$Value@@0 T@U) (|left#0@@0| T@U) (|pivot#0@@0| Int) (|right#0@@0| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value@@0) TyType) (= (type |left#0@@0|) (MapType BoxType BoxType))) (= (type |right#0@@0|) (MapType BoxType BoxType))) (and (and ($Is |left#0@@0| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@0)) (and (<= (LitInt 0) |pivot#0@@0|) (< |pivot#0@@0| 256))) ($Is |right#0@@0| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@0)))) (= (|Byte__Order.__default.MapPivotedUnion#requires| Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@0| |pivot#0@@0| |right#0@@0|) true)) :qid |unknown.0:0| :skolemid |3407| :pattern ( (|Byte__Order.__default.MapPivotedUnion#requires| Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@0| |pivot#0@@0| |right#0@@0|)) )))
(assert  (and (forall ((arg0@@606 T@U) (arg1@@302 Int) ) (! (= (type (|lambda#170| arg0@@606 arg1@@302)) (MapType0Type BoxType boolType)) :qid |funType:lambda#170| :pattern ( (|lambda#170| arg0@@606 arg1@@302)) )) (forall ((arg0@@607 T@U) (arg1@@303 T@U) (arg2@@209 Int) ) (! (= (type (|lambda#172| arg0@@607 arg1@@303 arg2@@209)) (MapType0Type BoxType boolType)) :qid |funType:lambda#172| :pattern ( (|lambda#172| arg0@@607 arg1@@303 arg2@@209)) ))))
(assert  (=> true (forall ((Byte_Order._default.MapPivotedUnion$Value@@1 T@U) (|left#0@@1| T@U) (|pivot#0@@1| Int) (|right#0@@1| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value@@1) TyType) (= (type |left#0@@1|) (MapType BoxType BoxType))) (= (type |right#0@@1|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapPivotedUnion#canCall| Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| |pivot#0@@1| |right#0@@1|) (and (and ($Is |left#0@@1| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1)) (and (<= (LitInt 0) |pivot#0@@1|) (< |pivot#0@@1| 256))) ($Is |right#0@@1| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1))))) (and (and (and (forall ((|k#0@@53| Int) ) (!  (=> (and (<= (LitInt 0) |k#0@@53|) (< |k#0@@53| 256)) (|Byte__Order.__default.lt#canCall| |k#0@@53| |pivot#0@@1|)) :qid |totalorderidfyByteOrder.694:57| :skolemid |3408| :pattern ( (Byte__Order.__default.lt |k#0@@53| |pivot#0@@1|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| (|lambda#170| Tclass.NativeTypes.byte |pivot#0@@1|))) (let ((|restricted_left#0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| (|lambda#170| Tclass.NativeTypes.byte |pivot#0@@1|)))) (and (and (forall ((|k#1@@8| Int) ) (!  (=> (and (<= (LitInt 0) |k#1@@8|) (< |k#1@@8| 256)) (|Byte__Order.__default.lte#canCall| |pivot#0@@1| |k#1@@8|)) :qid |totalorderidfyByteOrder.695:59| :skolemid |3409| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |pivot#0@@1| |k#1@@8|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@1| (|lambda#172| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte |pivot#0@@1|))) (let ((|restricted_right#0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@1| (|lambda#172| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte |pivot#0@@1|)))) (|Maps.__default.MapDisjointUnion#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |restricted_left#0| |restricted_right#0|))))) (= (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| |pivot#0@@1| |right#0@@1|) (let ((|restricted_left#0@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| (|lambda#170| Tclass.NativeTypes.byte |pivot#0@@1|)))) (let ((|restricted_right#0@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@1| (|lambda#172| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte |pivot#0@@1|)))) (Maps.__default.MapDisjointUnion Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@1 StartFuel_Maps._default.MapDisjointUnion |restricted_left#0@@0| |restricted_right#0@@0|)))))) :qid |unknown.0:0| :skolemid |3410| :pattern ( (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@1| |pivot#0@@1| |right#0@@1|)) ))))
(assert  (=> true (forall ((Byte_Order._default.MapPivotedUnion$Value@@2 T@U) (|left#0@@2| T@U) (|pivot#0@@2| Int) (|right#0@@2| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.MapPivotedUnion$Value@@2) TyType) (= (type |left#0@@2|) (MapType BoxType BoxType))) (= (type |right#0@@2|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapPivotedUnion#canCall| Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (LitInt |pivot#0@@2|) (Lit |right#0@@2|)) (and (and ($Is |left#0@@2| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2)) (and (<= (LitInt 0) |pivot#0@@2|) (< |pivot#0@@2| 256))) ($Is |right#0@@2| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2))))) (and (and (and (forall ((|k#2@@6| Int) ) (!  (=> (and (<= (LitInt 0) |k#2@@6|) (< |k#2@@6| 256)) (|Byte__Order.__default.lt#canCall| |k#2@@6| (LitInt |pivot#0@@2|))) :qid |totalorderidfyByteOrder.694:57| :skolemid |3411| :pattern ( (Byte__Order.__default.lt |k#2@@6| |pivot#0@@2|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (|lambda#170| Tclass.NativeTypes.byte (LitInt |pivot#0@@2|)))) (let ((|restricted_left#1| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (|lambda#170| Tclass.NativeTypes.byte (LitInt |pivot#0@@2|))))) (and (and (forall ((|k#3| Int) ) (!  (=> (and (<= (LitInt 0) |k#3|) (< |k#3| 256)) (|Byte__Order.__default.lte#canCall| (LitInt |pivot#0@@2|) |k#3|)) :qid |totalorderidfyByteOrder.695:59| :skolemid |3412| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |pivot#0@@2| |k#3|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@2|) (|lambda#172| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte (LitInt |pivot#0@@2|)))) (let ((|restricted_right#1| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@2|) (|lambda#172| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte (LitInt |pivot#0@@2|))))) (|Maps.__default.MapDisjointUnion#canCall| Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 |restricted_left#1| |restricted_right#1|))))) (= (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (LitInt |pivot#0@@2|) (Lit |right#0@@2|)) (let ((|restricted_left#1@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (|lambda#170| Tclass.NativeTypes.byte (LitInt |pivot#0@@2|))))) (let ((|restricted_right#1@@0| (Maps.__default.MapIRestrict Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@2|) (|lambda#172| Tclass.NativeTypes.byte StartFuel_Byte_Order._default.lte (LitInt |pivot#0@@2|))))) (Maps.__default.MapDisjointUnion Tclass.NativeTypes.byte Byte_Order._default.MapPivotedUnion$Value@@2 StartFuel_Maps._default.MapDisjointUnion |restricted_left#1@@0| |restricted_right#1@@0|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3413| :pattern ( (Byte__Order.__default.MapPivotedUnion Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@2|) (LitInt |pivot#0@@2|) (Lit |right#0@@2|))) ))))
(assert (forall ((arg0@@608 T@U) (arg1@@304 Int) ) (! (= (type (Byte__Order.__default.SetSuccessor arg0@@608 arg1@@304)) DatatypeTypeType) :qid |funType:Byte__Order.__default.SetSuccessor| :pattern ( (Byte__Order.__default.SetSuccessor arg0@@608 arg1@@304)) )))
(assert  (=> true (forall ((|m#0@@96| T@U) (|key#0@@48| Int) ) (!  (=> (and (= (type |m#0@@96|) (MapType0Type BoxType boolType)) (or (|Byte__Order.__default.SetSuccessor#canCall| |m#0@@96| |key#0@@48|) (and ($Is |m#0@@96| (TSet Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@48|) (< |key#0@@48| 256))))) ($Is (Byte__Order.__default.SetSuccessor |m#0@@96| |key#0@@48|) (Tclass.Options.Option Tclass.NativeTypes.byte))) :qid |totalorderidfyByteOrder.699:25| :skolemid |3414| :pattern ( (Byte__Order.__default.SetSuccessor |m#0@@96| |key#0@@48|)) ))))
(assert (forall (($Heap@@43 T@U) (|m#0@@97| T@U) (|key#0@@49| Int) ) (!  (=> (and (= (type $Heap@@43) (MapType0Type refType MapType1Type)) (= (type |m#0@@97|) (MapType0Type BoxType boolType))) (=> (and (and ($IsGoodHeap $Heap@@43) ($Is |m#0@@97| (TSet Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |key#0@@49|) (< |key#0@@49| 256))) (= (|Byte__Order.__default.SetSuccessor#requires| |m#0@@97| |key#0@@49|) true))) :qid |totalorderidfyByteOrder.699:12| :skolemid |3415| :pattern ( (|Byte__Order.__default.SetSuccessor#requires| |m#0@@97| |key#0@@49|) ($IsGoodHeap $Heap@@43)) )))
(assert (forall ((m@@97 T@U) (key Int) ) (!  (=> (and (= (type m@@97) (MapType0Type BoxType boolType)) (|$let#8$canCall| m@@97 key)) (and (and (<= (LitInt 0) (|$let#8_next| m@@97 key)) (< (|$let#8_next| m@@97 key) 256)) (and (and (U_2_bool (MapType0Select m@@97 ($Box (int_2_U (|$let#8_next| m@@97 key))))) (Byte__Order.__default.lt key (|$let#8_next| m@@97 key))) (forall ((|other#1| Int) ) (!  (=> (and (<= (LitInt 0) |other#1|) (< |other#1| 256)) (=> (and (and (U_2_bool (MapType0Select m@@97 ($Box (int_2_U |other#1|)))) (not (= |other#1| (|$let#8_next| m@@97 key)))) (Byte__Order.__default.lt key |other#1|)) (Byte__Order.__default.lt (|$let#8_next| m@@97 key) |other#1|))) :qid |totalorderidfyByteOrder.704:18| :skolemid |3418| :pattern ( (Byte__Order.__default.lt (|$let#8_next| m@@97 key) |other#1|)) :pattern ( (Byte__Order.__default.lt key |other#1|)) :pattern ( (MapType0Select m@@97 ($Box (int_2_U |other#1|)))) ))))) :qid |totalorderidfyByteOrder.701:8| :skolemid |3419| :pattern ( (|$let#8_next| m@@97 key)) )))
(assert  (=> true (forall (($Heap@@44 T@U) (|m#0@@98| T@U) (|key#0@@50| Int) ) (!  (=> (and (and (= (type $Heap@@44) (MapType0Type refType MapType1Type)) (= (type |m#0@@98|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetSuccessor#canCall| |m#0@@98| |key#0@@50|) (and (and ($IsGoodHeap $Heap@@44) ($Is |m#0@@98| (TSet Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |key#0@@50|) (< |key#0@@50| 256))))) (and (and (forall ((|next#0| Int) ) (!  (=> (and (<= (LitInt 0) |next#0|) (< |next#0| 256)) (=> (U_2_bool (MapType0Select |m#0@@98| ($Box (int_2_U |next#0|)))) (and (|Byte__Order.__default.lt#canCall| |key#0@@50| |next#0|) (=> (Byte__Order.__default.lt |key#0@@50| |next#0|) (forall ((|other#0| Int) ) (!  (=> (and (<= (LitInt 0) |other#0|) (< |other#0| 256)) (=> (U_2_bool (MapType0Select |m#0@@98| ($Box (int_2_U |other#0|)))) (=> (not (= |other#0| |next#0|)) (and (|Byte__Order.__default.lt#canCall| |key#0@@50| |other#0|) (=> (Byte__Order.__default.lt |key#0@@50| |other#0|) (|Byte__Order.__default.lt#canCall| |next#0| |other#0|)))))) :qid |totalorderidfyByteOrder.704:18| :skolemid |3420| :pattern ( (Byte__Order.__default.lt |next#0| |other#0|)) :pattern ( (Byte__Order.__default.lt |key#0@@50| |other#0|)) :pattern ( (MapType0Select |m#0@@98| ($Box (int_2_U |other#0|)))) )))))) :qid |totalorderidfyByteOrder.701:8| :skolemid |3421| :pattern ( (Byte__Order.__default.lt |key#0@@50| |next#0|)) :pattern ( (MapType0Select |m#0@@98| ($Box (int_2_U |next#0|)))) )) (=> (exists ((|next#0@@0| Int) ) (!  (and (and (<= (LitInt 0) |next#0@@0|) (< |next#0@@0| 256)) (and (and (U_2_bool (MapType0Select |m#0@@98| ($Box (int_2_U |next#0@@0|)))) (Byte__Order.__default.lt |key#0@@50| |next#0@@0|)) (forall ((|other#0@@0| Int) ) (!  (=> (and (<= (LitInt 0) |other#0@@0|) (< |other#0@@0| 256)) (=> (and (and (U_2_bool (MapType0Select |m#0@@98| ($Box (int_2_U |other#0@@0|)))) (not (= |other#0@@0| |next#0@@0|))) (Byte__Order.__default.lt |key#0@@50| |other#0@@0|)) (Byte__Order.__default.lt |next#0@@0| |other#0@@0|))) :qid |totalorderidfyByteOrder.704:18| :skolemid |3422| :pattern ( (Byte__Order.__default.lt |next#0@@0| |other#0@@0|)) :pattern ( (Byte__Order.__default.lt |key#0@@50| |other#0@@0|)) :pattern ( (MapType0Select |m#0@@98| ($Box (int_2_U |other#0@@0|)))) )))) :qid |totalorderidfyByteOrder.701:8| :skolemid |3423| :pattern ( (Byte__Order.__default.lt |key#0@@50| |next#0@@0|)) :pattern ( (MapType0Select |m#0@@98| ($Box (int_2_U |next#0@@0|)))) )) (|$let#8$canCall| |m#0@@98| |key#0@@50|))) (= (Byte__Order.__default.SetSuccessor |m#0@@98| |key#0@@50|) (ite (exists ((|next#0@@1| Int) ) (!  (and (and (<= (LitInt 0) |next#0@@1|) (< |next#0@@1| 256)) (and (and (U_2_bool (MapType0Select |m#0@@98| ($Box (int_2_U |next#0@@1|)))) (Byte__Order.__default.lt |key#0@@50| |next#0@@1|)) (forall ((|other#0@@1| Int) ) (!  (=> (and (<= (LitInt 0) |other#0@@1|) (< |other#0@@1| 256)) (=> (and (and (U_2_bool (MapType0Select |m#0@@98| ($Box (int_2_U |other#0@@1|)))) (not (= |other#0@@1| |next#0@@1|))) (Byte__Order.__default.lt |key#0@@50| |other#0@@1|)) (Byte__Order.__default.lt |next#0@@1| |other#0@@1|))) :qid |totalorderidfyByteOrder.704:18| :skolemid |3416| :pattern ( (Byte__Order.__default.lt |next#0@@1| |other#0@@1|)) :pattern ( (Byte__Order.__default.lt |key#0@@50| |other#0@@1|)) :pattern ( (MapType0Select |m#0@@98| ($Box (int_2_U |other#0@@1|)))) )))) :qid |totalorderidfyByteOrder.701:8| :skolemid |3417| :pattern ( (Byte__Order.__default.lt |key#0@@50| |next#0@@1|)) :pattern ( (MapType0Select |m#0@@98| ($Box (int_2_U |next#0@@1|)))) )) (let ((|next#1| (|$let#8_next| |m#0@@98| |key#0@@50|))) (|#Options.Option.Some| ($Box (int_2_U |next#1|)))) |#Options.Option.None|)))) :qid |totalorderidfyByteOrder.699:12| :skolemid |3424| :pattern ( (Byte__Order.__default.SetSuccessor |m#0@@98| |key#0@@50|) ($IsGoodHeap $Heap@@44)) ))))
(assert  (=> true (forall (($Heap@@45 T@U) (|m#0@@99| T@U) (|key#0@@51| Int) ) (!  (=> (and (and (= (type $Heap@@45) (MapType0Type refType MapType1Type)) (= (type |m#0@@99|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SetSuccessor#canCall| (Lit |m#0@@99|) (LitInt |key#0@@51|)) (and (and ($IsGoodHeap $Heap@@45) ($Is |m#0@@99| (TSet Tclass.NativeTypes.byte))) (and (<= (LitInt 0) |key#0@@51|) (< |key#0@@51| 256))))) (and (and (forall ((|next#2| Int) ) (!  (=> (and (<= (LitInt 0) |next#2|) (< |next#2| 256)) (=> (U_2_bool (MapType0Select (Lit |m#0@@99|) ($Box (int_2_U |next#2|)))) (and (|Byte__Order.__default.lt#canCall| (LitInt |key#0@@51|) |next#2|) (=> (Byte__Order.__default.lt (LitInt |key#0@@51|) |next#2|) (forall ((|other#2| Int) ) (!  (=> (and (<= (LitInt 0) |other#2|) (< |other#2| 256)) (=> (U_2_bool (MapType0Select (Lit |m#0@@99|) ($Box (int_2_U |other#2|)))) (=> (not (= |other#2| |next#2|)) (and (|Byte__Order.__default.lt#canCall| (LitInt |key#0@@51|) |other#2|) (=> (Byte__Order.__default.lt (LitInt |key#0@@51|) |other#2|) (|Byte__Order.__default.lt#canCall| |next#2| |other#2|)))))) :qid |totalorderidfyByteOrder.704:18| :skolemid |3427| :pattern ( (Byte__Order.__default.lt |next#2| |other#2|)) :pattern ( (Byte__Order.__default.lt |key#0@@51| |other#2|)) :pattern ( (MapType0Select |m#0@@99| ($Box (int_2_U |other#2|)))) )))))) :qid |totalorderidfyByteOrder.701:8| :skolemid |3428| :pattern ( (Byte__Order.__default.lt |key#0@@51| |next#2|)) :pattern ( (MapType0Select |m#0@@99| ($Box (int_2_U |next#2|)))) )) (=> (exists ((|next#2@@0| Int) ) (!  (and (and (<= (LitInt 0) |next#2@@0|) (< |next#2@@0| 256)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@99|) ($Box (int_2_U |next#2@@0|)))) (Byte__Order.__default.lt (LitInt |key#0@@51|) |next#2@@0|)) (forall ((|other#2@@0| Int) ) (!  (=> (and (<= (LitInt 0) |other#2@@0|) (< |other#2@@0| 256)) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@99|) ($Box (int_2_U |other#2@@0|)))) (not (= |other#2@@0| |next#2@@0|))) (Byte__Order.__default.lt (LitInt |key#0@@51|) |other#2@@0|)) (Byte__Order.__default.lt |next#2@@0| |other#2@@0|))) :qid |totalorderidfyByteOrder.704:18| :skolemid |3429| :pattern ( (Byte__Order.__default.lt |next#2@@0| |other#2@@0|)) :pattern ( (Byte__Order.__default.lt |key#0@@51| |other#2@@0|)) :pattern ( (MapType0Select |m#0@@99| ($Box (int_2_U |other#2@@0|)))) )))) :qid |totalorderidfyByteOrder.701:8| :skolemid |3430| :pattern ( (Byte__Order.__default.lt |key#0@@51| |next#2@@0|)) :pattern ( (MapType0Select |m#0@@99| ($Box (int_2_U |next#2@@0|)))) )) (|$let#8$canCall| (Lit |m#0@@99|) (LitInt |key#0@@51|)))) (= (Byte__Order.__default.SetSuccessor (Lit |m#0@@99|) (LitInt |key#0@@51|)) (ite (exists ((|next#2@@1| Int) ) (!  (and (and (<= (LitInt 0) |next#2@@1|) (< |next#2@@1| 256)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@99|) ($Box (int_2_U |next#2@@1|)))) (Byte__Order.__default.lt (LitInt |key#0@@51|) |next#2@@1|)) (forall ((|other#2@@1| Int) ) (!  (=> (and (<= (LitInt 0) |other#2@@1|) (< |other#2@@1| 256)) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@99|) ($Box (int_2_U |other#2@@1|)))) (not (= |other#2@@1| |next#2@@1|))) (Byte__Order.__default.lt (LitInt |key#0@@51|) |other#2@@1|)) (Byte__Order.__default.lt |next#2@@1| |other#2@@1|))) :qid |totalorderidfyByteOrder.704:18| :skolemid |3425| :pattern ( (Byte__Order.__default.lt |next#2@@1| |other#2@@1|)) :pattern ( (Byte__Order.__default.lt |key#0@@51| |other#2@@1|)) :pattern ( (MapType0Select |m#0@@99| ($Box (int_2_U |other#2@@1|)))) )))) :qid |totalorderidfyByteOrder.701:8| :skolemid |3426| :pattern ( (Byte__Order.__default.lt |key#0@@51| |next#2@@1|)) :pattern ( (MapType0Select |m#0@@99| ($Box (int_2_U |next#2@@1|)))) )) (let ((|next#3| (|$let#8_next| (Lit |m#0@@99|) (LitInt |key#0@@51|)))) (|#Options.Option.Some| ($Box (int_2_U |next#3|)))) |#Options.Option.None|)))) :qid |totalorderidfyByteOrder.699:12| :weight 3 :skolemid |3431| :pattern ( (Byte__Order.__default.SetSuccessor (Lit |m#0@@99|) (LitInt |key#0@@51|)) ($IsGoodHeap $Heap@@45)) ))))
(assert (forall ((arg0@@609 T@U) (arg1@@305 T@U) (arg2@@210 Int) ) (! (= (type (Byte__Order.__default.MapSuccessor arg0@@609 arg1@@305 arg2@@210)) DatatypeTypeType) :qid |funType:Byte__Order.__default.MapSuccessor| :pattern ( (Byte__Order.__default.MapSuccessor arg0@@609 arg1@@305 arg2@@210)) )))
(assert  (=> true (forall ((Byte_Order._default.MapSuccessor$V T@U) (|m#0@@100| T@U) (|key#0@@52| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V) TyType) (= (type |m#0@@100|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapSuccessor#canCall| Byte_Order._default.MapSuccessor$V |m#0@@100| |key#0@@52|) (and ($Is |m#0@@100| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V)) (and (<= (LitInt 0) |key#0@@52|) (< |key#0@@52| 256))))) ($Is (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V |m#0@@100| |key#0@@52|) (Tclass.Options.Option Tclass.NativeTypes.byte))) :qid |unknown.0:0| :skolemid |3432| :pattern ( (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V |m#0@@100| |key#0@@52|)) ))))
(assert (forall ((Byte_Order._default.MapSuccessor$V@@0 T@U) (|m#0@@101| T@U) (|key#0@@53| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V@@0) TyType) (= (type |m#0@@101|) (MapType BoxType BoxType))) (and ($Is |m#0@@101| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V@@0)) (and (<= (LitInt 0) |key#0@@53|) (< |key#0@@53| 256)))) (= (|Byte__Order.__default.MapSuccessor#requires| Byte_Order._default.MapSuccessor$V@@0 |m#0@@101| |key#0@@53|) true)) :qid |unknown.0:0| :skolemid |3433| :pattern ( (|Byte__Order.__default.MapSuccessor#requires| Byte_Order._default.MapSuccessor$V@@0 |m#0@@101| |key#0@@53|)) )))
(assert  (=> true (forall ((Byte_Order._default.MapSuccessor$V@@1 T@U) (|m#0@@102| T@U) (|key#0@@54| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V@@1) TyType) (= (type |m#0@@102|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapSuccessor#canCall| Byte_Order._default.MapSuccessor$V@@1 |m#0@@102| |key#0@@54|) (and ($Is |m#0@@102| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V@@1)) (and (<= (LitInt 0) |key#0@@54|) (< |key#0@@54| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (|Map#Domain| |m#0@@102|) |key#0@@54|) (= (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@1 |m#0@@102| |key#0@@54|) (Byte__Order.__default.SetSuccessor (|Map#Domain| |m#0@@102|) |key#0@@54|)))) :qid |unknown.0:0| :skolemid |3434| :pattern ( (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@1 |m#0@@102| |key#0@@54|)) ))))
(assert  (=> true (forall ((Byte_Order._default.MapSuccessor$V@@2 T@U) (|m#0@@103| T@U) (|key#0@@55| Int) ) (!  (=> (and (and (= (type Byte_Order._default.MapSuccessor$V@@2) TyType) (= (type |m#0@@103|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.MapSuccessor#canCall| Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@103|) (LitInt |key#0@@55|)) (and ($Is |m#0@@103| (TMap Tclass.NativeTypes.byte Byte_Order._default.MapSuccessor$V@@2)) (and (<= (LitInt 0) |key#0@@55|) (< |key#0@@55| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (Lit (|Map#Domain| (Lit |m#0@@103|))) (LitInt |key#0@@55|)) (= (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@103|) (LitInt |key#0@@55|)) (Lit (Byte__Order.__default.SetSuccessor (Lit (|Map#Domain| (Lit |m#0@@103|))) (LitInt |key#0@@55|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3435| :pattern ( (Byte__Order.__default.MapSuccessor Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@103|) (LitInt |key#0@@55|))) ))))
(assert (forall ((arg0@@610 T@U) (arg1@@306 Int) ) (! (= (type (Byte__Order.__default.SeqSuccessor arg0@@610 arg1@@306)) DatatypeTypeType) :qid |funType:Byte__Order.__default.SeqSuccessor| :pattern ( (Byte__Order.__default.SeqSuccessor arg0@@610 arg1@@306)) )))
(assert  (=> true (forall ((|m#0@@104| T@U) (|key#0@@56| Int) ) (!  (=> (and (= (type |m#0@@104|) (SeqType BoxType)) (or (|Byte__Order.__default.SeqSuccessor#canCall| |m#0@@104| |key#0@@56|) (and ($Is |m#0@@104| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@56|) (< |key#0@@56| 256))))) ($Is (Byte__Order.__default.SeqSuccessor |m#0@@104| |key#0@@56|) (Tclass.Options.Option Tclass.NativeTypes.byte))) :qid |totalorderidfyByteOrder.715:25| :skolemid |3436| :pattern ( (Byte__Order.__default.SeqSuccessor |m#0@@104| |key#0@@56|)) ))))
(assert (forall ((|m#0@@105| T@U) (|key#0@@57| Int) ) (!  (=> (= (type |m#0@@105|) (SeqType BoxType)) (=> (and ($Is |m#0@@105| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@57|) (< |key#0@@57| 256))) (= (|Byte__Order.__default.SeqSuccessor#requires| |m#0@@105| |key#0@@57|) true))) :qid |totalorderidfyByteOrder.715:25| :skolemid |3437| :pattern ( (|Byte__Order.__default.SeqSuccessor#requires| |m#0@@105| |key#0@@57|)) )))
(assert  (=> true (forall ((|m#0@@106| T@U) (|key#0@@58| Int) ) (!  (=> (and (= (type |m#0@@106|) (SeqType BoxType)) (or (|Byte__Order.__default.SeqSuccessor#canCall| |m#0@@106| |key#0@@58|) (and ($Is |m#0@@106| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@58|) (< |key#0@@58| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (|lambda#2| Tclass.NativeTypes.byte |m#0@@106|) |key#0@@58|) (= (Byte__Order.__default.SeqSuccessor |m#0@@106| |key#0@@58|) (Byte__Order.__default.SetSuccessor (|lambda#2| Tclass.NativeTypes.byte |m#0@@106|) |key#0@@58|)))) :qid |totalorderidfyByteOrder.715:25| :skolemid |3438| :pattern ( (Byte__Order.__default.SeqSuccessor |m#0@@106| |key#0@@58|)) ))))
(assert  (=> true (forall ((|m#0@@107| T@U) (|key#0@@59| Int) ) (!  (=> (and (= (type |m#0@@107|) (SeqType BoxType)) (or (|Byte__Order.__default.SeqSuccessor#canCall| (Lit |m#0@@107|) (LitInt |key#0@@59|)) (and ($Is |m#0@@107| (TSeq Tclass.NativeTypes.byte)) (and (<= (LitInt 0) |key#0@@59|) (< |key#0@@59| 256))))) (and (|Byte__Order.__default.SetSuccessor#canCall| (|lambda#2| Tclass.NativeTypes.byte |m#0@@107|) (LitInt |key#0@@59|)) (= (Byte__Order.__default.SeqSuccessor (Lit |m#0@@107|) (LitInt |key#0@@59|)) (Byte__Order.__default.SetSuccessor (|lambda#2| Tclass.NativeTypes.byte |m#0@@107|) (LitInt |key#0@@59|))))) :qid |totalorderidfyByteOrder.715:25| :weight 3 :skolemid |3439| :pattern ( (Byte__Order.__default.SeqSuccessor (Lit |m#0@@107|) (LitInt |key#0@@59|))) ))))
(assert (forall ((Byte_Order._default.SortedSeqForMap$V T@U) ($ly@@390 T@U) (|s#0@@93| T@U) (|m#0@@108| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V) TyType) (= (type $ly@@390) LayerTypeType)) (= (type |s#0@@93|) (SeqType BoxType))) (= (type |m#0@@108|) (MapType BoxType BoxType))) (= (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V ($LS $ly@@390) |s#0@@93| |m#0@@108|) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V $ly@@390 |s#0@@93| |m#0@@108|))) :qid |unknown.0:0| :skolemid |3440| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V ($LS $ly@@390) |s#0@@93| |m#0@@108|)) )))
(assert (forall ((Byte_Order._default.SortedSeqForMap$V@@0 T@U) ($ly@@391 T@U) (|s#0@@94| T@U) (|m#0@@109| T@U) ) (!  (=> (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@0) TyType) (= (type $ly@@391) LayerTypeType)) (= (type |s#0@@94|) (SeqType BoxType))) (= (type |m#0@@109|) (MapType BoxType BoxType))) (= (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 $ly@@391 |s#0@@94| |m#0@@109|) (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@94| |m#0@@109|))) :qid |unknown.0:0| :skolemid |3441| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@0 (AsFuelBottom $ly@@391) |s#0@@94| |m#0@@109|)) )))
(assert  (=> true (forall ((Byte_Order._default.SortedSeqForMap$V@@1 T@U) ($ly@@392 T@U) (|s#0@@95| T@U) (|m#0@@110| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@1) TyType) (= (type $ly@@392) LayerTypeType)) (= (type |s#0@@95|) (SeqType BoxType))) (= (type |m#0@@110|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.SortedSeqForMap#canCall| Byte_Order._default.SortedSeqForMap$V@@1 |s#0@@95| |m#0@@110|) (and ($Is |s#0@@95| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@1))) ($Is |m#0@@110| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@1))))) true) :qid |unknown.0:0| :skolemid |3442| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@1 $ly@@392 |s#0@@95| |m#0@@110|)) ))))
(assert (forall ((Byte_Order._default.SortedSeqForMap$V@@2 T@U) ($ly@@393 T@U) (|s#0@@96| T@U) (|m#0@@111| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@2) TyType) (= (type $ly@@393) LayerTypeType)) (= (type |s#0@@96|) (SeqType BoxType))) (= (type |m#0@@111|) (MapType BoxType BoxType))) (and ($Is |s#0@@96| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@2))) ($Is |m#0@@111| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@2)))) (= (|Byte__Order.__default.SortedSeqForMap#requires| Byte_Order._default.SortedSeqForMap$V@@2 $ly@@393 |s#0@@96| |m#0@@111|) true)) :qid |unknown.0:0| :skolemid |3443| :pattern ( (|Byte__Order.__default.SortedSeqForMap#requires| Byte_Order._default.SortedSeqForMap$V@@2 $ly@@393 |s#0@@96| |m#0@@111|)) )))
(assert  (and (= (type StartFuel_Sequences._default.Unzip) LayerTypeType) (= (type StartFuel_Byte_Order._default.IsStrictlySorted) LayerTypeType)))
(assert  (=> true (forall ((Byte_Order._default.SortedSeqForMap$V@@3 T@U) ($ly@@394 T@U) (|s#0@@97| T@U) (|m#0@@112| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@3) TyType) (= (type $ly@@394) LayerTypeType)) (= (type |s#0@@97|) (SeqType BoxType))) (= (type |m#0@@112|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.SortedSeqForMap#canCall| Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@97| |m#0@@112|) (and ($Is |s#0@@97| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3))) ($Is |m#0@@112| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3))))) (and (and (and (and (|Sequences.__default.Unzip#canCall| Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@97|) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@97|))) (|Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@97|))))) (=> (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@97|)))) (and (forall ((|i#0@@96| Int) ) (!  (and (=> (<= (LitInt 0) |i#0@@96|) (=> (< |i#0@@96| (|Seq#Length| |s#0@@97|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@97| |i#0@@96|))))) (=> (=> (and (<= (LitInt 0) |i#0@@96|) (< |i#0@@96| (|Seq#Length| |s#0@@97|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@112|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@97| |i#0@@96|)))))) (=> (<= (LitInt 0) |i#0@@96|) (=> (< |i#0@@96| (|Seq#Length| |s#0@@97|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@97| |i#0@@96|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@97| |i#0@@96|)))))))) :qid |totalorderidfyByteOrder.723:16| :skolemid |3447| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@97| |i#0@@96|))) )) (=> (forall ((|i#0@@97| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@97|) (< |i#0@@97| (|Seq#Length| |s#0@@97|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@112|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@97| |i#0@@97|)))))) (=> (and (<= (LitInt 0) |i#0@@97|) (< |i#0@@97| (|Seq#Length| |s#0@@97|))) (= (MapType0Select (|Map#Elements| |m#0@@112|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@97| |i#0@@97|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@97| |i#0@@97|))))))) :qid |totalorderidfyByteOrder.723:16| :skolemid |3450| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@97| |i#0@@97|))) )) (forall ((|key#0@@60| T@U) ) (!  (=> (= (type |key#0@@60|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#0@@60|)) (< (U_2_int |key#0@@60|) 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@112|) ($Box |key#0@@60|))) (forall ((|i#1@@24| Int) ) (!  (=> (<= (LitInt 0) |i#1@@24|) (=> (< |i#1@@24| (|Seq#Length| |s#0@@97|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@97| |i#1@@24|))) (=> (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@97| |i#1@@24|))))) (U_2_int |key#0@@60|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@97| |i#1@@24|))))))) :qid |totalorderidfyByteOrder.724:44| :skolemid |3448| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@97| |i#1@@24|))) ))))) :qid |totalorderidfyByteOrder.724:16| :skolemid |3449| :pattern ( (MapType0Select (|Map#Elements| |m#0@@112|) ($Box |key#0@@60|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@112|) ($Box |key#0@@60|))) )))))) (= (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@394) |s#0@@97| |m#0@@112|)  (and (and (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@97|)))) (forall ((|i#0@@98| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@98|) (< |i#0@@98| (|Seq#Length| |s#0@@97|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@112|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@97| |i#0@@98|)))))) (=> (and (<= (LitInt 0) |i#0@@98|) (< |i#0@@98| (|Seq#Length| |s#0@@97|))) (= (MapType0Select (|Map#Elements| |m#0@@112|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@97| |i#0@@98|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@97| |i#0@@98|))))))) :qid |totalorderidfyByteOrder.723:16| :skolemid |3444| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@97| |i#0@@98|))) ))) (forall ((|key#0@@61| Int) ) (!  (=> (and (<= (LitInt 0) |key#0@@61|) (< |key#0@@61| 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@112|) ($Box (int_2_U |key#0@@61|)))) (exists ((|i#1@@25| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1@@25|) (< |i#1@@25| (|Seq#Length| |s#0@@97|))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@97| |i#1@@25|))))) |key#0@@61|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@97| |i#1@@25|))) (MapType0Select (|Map#Elements| |m#0@@112|) ($Box (int_2_U |key#0@@61|))))) :qid |totalorderidfyByteOrder.724:44| :skolemid |3445| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@97| |i#1@@25|))) )))) :qid |totalorderidfyByteOrder.724:16| :skolemid |3446| :pattern ( (MapType0Select (|Map#Elements| |m#0@@112|) ($Box (int_2_U |key#0@@61|)))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@112|) ($Box (int_2_U |key#0@@61|)))) )))))) :qid |unknown.0:0| :skolemid |3451| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@394) |s#0@@97| |m#0@@112|)) ))))
(assert  (=> true (forall ((Byte_Order._default.SortedSeqForMap$V@@4 T@U) ($ly@@395 T@U) (|s#0@@98| T@U) (|m#0@@113| T@U) ) (!  (=> (and (and (and (and (= (type Byte_Order._default.SortedSeqForMap$V@@4) TyType) (= (type $ly@@395) LayerTypeType)) (= (type |s#0@@98|) (SeqType BoxType))) (= (type |m#0@@113|) (MapType BoxType BoxType))) (or (|Byte__Order.__default.SortedSeqForMap#canCall| Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@98|) (Lit |m#0@@113|)) (and ($Is |s#0@@98| (TSeq (Tclass._System.Tuple2 Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4))) ($Is |m#0@@113| (TMap Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4))))) (and (and (and (and (|Sequences.__default.Unzip#canCall| Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@98|)) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@98|)))) (|Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@98|)))))) (=> (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@98|))))) (and (forall ((|i#2@@9| Int) ) (!  (and (=> (<= (LitInt 0) |i#2@@9|) (=> (< |i#2@@9| (|Seq#Length| (Lit |s#0@@98|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@98|) |i#2@@9|))))) (=> (=> (and (<= (LitInt 0) |i#2@@9|) (< |i#2@@9| (|Seq#Length| (Lit |s#0@@98|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@113|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@98|) |i#2@@9|)))))) (=> (<= (LitInt 0) |i#2@@9|) (=> (< |i#2@@9| (|Seq#Length| (Lit |s#0@@98|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@98|) |i#2@@9|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@98|) |i#2@@9|)))))))) :qid |totalorderidfyByteOrder.723:16| :skolemid |3455| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@98| |i#2@@9|))) )) (=> (forall ((|i#2@@10| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@10|) (< |i#2@@10| (|Seq#Length| (Lit |s#0@@98|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@113|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@98|) |i#2@@10|)))))) (=> (and (<= (LitInt 0) |i#2@@10|) (< |i#2@@10| (|Seq#Length| (Lit |s#0@@98|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@113|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@98|) |i#2@@10|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@98|) |i#2@@10|))))))) :qid |totalorderidfyByteOrder.723:16| :skolemid |3458| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@98| |i#2@@10|))) )) (forall ((|key#1@@5| T@U) ) (!  (=> (= (type |key#1@@5|) intType) (=> (and (<= (LitInt 0) (U_2_int |key#1@@5|)) (< (U_2_int |key#1@@5|) 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@113|) ($Box |key#1@@5|))) (forall ((|i#3@@6| Int) ) (!  (=> (<= (LitInt 0) |i#3@@6|) (=> (< |i#3@@6| (|Seq#Length| (Lit |s#0@@98|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@98|) |i#3@@6|))) (=> (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@98|) |i#3@@6|))))) (U_2_int |key#1@@5|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@98|) |i#3@@6|))))))) :qid |totalorderidfyByteOrder.724:44| :skolemid |3456| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@98| |i#3@@6|))) ))))) :qid |totalorderidfyByteOrder.724:16| :skolemid |3457| :pattern ( (MapType0Select (|Map#Elements| |m#0@@113|) ($Box |key#1@@5|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@113|) ($Box |key#1@@5|))) )))))) (= (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@395) (Lit |s#0@@98|) (Lit |m#0@@113|))  (and (and (Byte__Order.__default.IsStrictlySorted StartFuel_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.NativeTypes.byte Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@98|))))) (forall ((|i#2@@11| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@11|) (< |i#2@@11| (|Seq#Length| (Lit |s#0@@98|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@113|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@98|) |i#2@@11|)))))) (=> (and (<= (LitInt 0) |i#2@@11|) (< |i#2@@11| (|Seq#Length| (Lit |s#0@@98|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@113|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@98|) |i#2@@11|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@98|) |i#2@@11|))))))) :qid |totalorderidfyByteOrder.723:16| :skolemid |3452| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@98| |i#2@@11|))) ))) (forall ((|key#1@@6| Int) ) (!  (=> (and (<= (LitInt 0) |key#1@@6|) (< |key#1@@6| 256)) (=> (U_2_bool (MapType0Select (|Map#Domain| |m#0@@113|) ($Box (int_2_U |key#1@@6|)))) (exists ((|i#3@@7| Int) ) (!  (and (and (and (<= (LitInt 0) |i#3@@7|) (< |i#3@@7| (|Seq#Length| (Lit |s#0@@98|)))) (= (U_2_int ($Unbox intType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@98|) |i#3@@7|))))) |key#1@@6|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@98|) |i#3@@7|))) (MapType0Select (|Map#Elements| (Lit |m#0@@113|)) ($Box (int_2_U |key#1@@6|))))) :qid |totalorderidfyByteOrder.724:44| :skolemid |3453| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@98| |i#3@@7|))) )))) :qid |totalorderidfyByteOrder.724:16| :skolemid |3454| :pattern ( (MapType0Select (|Map#Elements| |m#0@@113|) ($Box (int_2_U |key#1@@6|)))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@113|) ($Box (int_2_U |key#1@@6|)))) )))))) :qid |unknown.0:0| :weight 3 :skolemid |3459| :pattern ( (Byte__Order.__default.SortedSeqForMap Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@395) (Lit |s#0@@98|) (Lit |m#0@@113|))) ))))
(assert (forall (($ly@@396 T@U) (|s#0@@99| T@U) ) (!  (=> (and (= (type $ly@@396) LayerTypeType) (= (type |s#0@@99|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimum ($LS $ly@@396) |s#0@@99|) (Byte__Order.__default.minimum $ly@@396 |s#0@@99|))) :qid |totalorderidfyByteOrder.727:22| :skolemid |3460| :pattern ( (Byte__Order.__default.minimum ($LS $ly@@396) |s#0@@99|)) )))
(assert (forall (($ly@@397 T@U) (|s#0@@100| T@U) ) (!  (=> (and (= (type $ly@@397) LayerTypeType) (= (type |s#0@@100|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimum $ly@@397 |s#0@@100|) (Byte__Order.__default.minimum $LZ |s#0@@100|))) :qid |totalorderidfyByteOrder.727:22| :skolemid |3461| :pattern ( (Byte__Order.__default.minimum (AsFuelBottom $ly@@397) |s#0@@100|)) )))
(assert  (=> true (forall (($ly@@398 T@U) (|s#0@@101| T@U) ) (!  (=> (and (and (= (type $ly@@398) LayerTypeType) (= (type |s#0@@101|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimum#canCall| |s#0@@101|) (and ($Is |s#0@@101| (TSet Tclass.NativeTypes.byte)) (>= (|Set#Card| |s#0@@101|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@101| ($Box (int_2_U (Byte__Order.__default.minimum $ly@@398 |s#0@@101|))))) (forall ((|y#0@@3| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@3|) (< |y#0@@3| 256)) (U_2_bool (MapType0Select |s#0@@101| ($Box (int_2_U |y#0@@3|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (Byte__Order.__default.minimum $ly@@398 |s#0@@101|) |y#0@@3|)) :qid |totalorderidfyByteOrder.730:18| :skolemid |3462| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (Byte__Order.__default.minimum $ly@@398 |s#0@@101|) |y#0@@3|)) :pattern ( (MapType0Select |s#0@@101| ($Box (int_2_U |y#0@@3|)))) ))) (and (<= (LitInt 0) (Byte__Order.__default.minimum $ly@@398 |s#0@@101|)) (< (Byte__Order.__default.minimum $ly@@398 |s#0@@101|) 256)))) :qid |totalorderidfyByteOrder.727:22| :skolemid |3463| :pattern ( (Byte__Order.__default.minimum $ly@@398 |s#0@@101|)) ))))
(assert (forall (($ly@@399 T@U) ($Heap@@46 T@U) (|s#0@@102| T@U) ) (!  (=> (and (and (and (= (type $ly@@399) LayerTypeType) (= (type $Heap@@46) (MapType0Type refType MapType1Type))) (= (type |s#0@@102|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@46) ($Is |s#0@@102| (TSet Tclass.NativeTypes.byte)))) (= (|Byte__Order.__default.minimum#requires| $ly@@399 |s#0@@102|) (>= (|Set#Card| |s#0@@102|) (LitInt 1)))) :qid |totalorderidfyByteOrder.727:22| :skolemid |3464| :pattern ( (|Byte__Order.__default.minimum#requires| $ly@@399 |s#0@@102|) ($IsGoodHeap $Heap@@46)) )))
(assert (forall ((s@@51 T@U) ) (!  (=> (and (= (type s@@51) (MapType0Type BoxType boolType)) (|$let#11$canCall| s@@51)) (and (and (<= (LitInt 0) (|$let#11_a| s@@51)) (< (|$let#11_a| s@@51) 256)) (U_2_bool (MapType0Select s@@51 ($Box (int_2_U (|$let#11_a| s@@51))))))) :qid |totalorderidfyByteOrder.734:5| :skolemid |3465| :pattern ( (|$let#11_a| s@@51)) )))
(assert  (=> true (forall (($ly@@400 T@U) ($Heap@@47 T@U) (|s#0@@103| T@U) ) (!  (=> (and (and (and (= (type $ly@@400) LayerTypeType) (= (type $Heap@@47) (MapType0Type refType MapType1Type))) (= (type |s#0@@103|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimum#canCall| |s#0@@103|) (and (and ($IsGoodHeap $Heap@@47) ($Is |s#0@@103| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@103|) (LitInt 1))))) (and (and (|$let#11$canCall| |s#0@@103|) (let ((|s'#1| (|Set#Difference| |s#0@@103| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#11_a| |s#0@@103|))))))) (=> (not (|Set#Equal| |s'#1| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.minimum#canCall| |s'#1|) (let ((|m'#1@@1| (Byte__Order.__default.minimum $ly@@400 |s'#1|))) (|Byte__Order.__default.lt#canCall| (|$let#11_a| |s#0@@103|) |m'#1@@1|)))))) (= (Byte__Order.__default.minimum ($LS $ly@@400) |s#0@@103|) (let ((|a#0@@125| (|$let#11_a| |s#0@@103|))) (let ((|s'#0| (|Set#Difference| |s#0@@103| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#0@@125|)))))) (ite (|Set#Equal| |s'#0| (|Set#Empty| BoxType)) |a#0@@125| (let ((|m'#0@@10| (Byte__Order.__default.minimum $ly@@400 |s'#0|))) (ite (Byte__Order.__default.lt |a#0@@125| |m'#0@@10|) |a#0@@125| |m'#0@@10|)))))))) :qid |totalorderidfyByteOrder.727:22| :skolemid |3466| :pattern ( (Byte__Order.__default.minimum ($LS $ly@@400) |s#0@@103|) ($IsGoodHeap $Heap@@47)) ))))
(assert  (=> true (forall (($ly@@401 T@U) ($Heap@@48 T@U) (|s#0@@104| T@U) ) (!  (=> (and (and (and (= (type $ly@@401) LayerTypeType) (= (type $Heap@@48) (MapType0Type refType MapType1Type))) (= (type |s#0@@104|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimum#canCall| (Lit |s#0@@104|)) (and (and ($IsGoodHeap $Heap@@48) ($Is |s#0@@104| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| (Lit |s#0@@104|)) (LitInt 1))))) (and (and (|$let#11$canCall| (Lit |s#0@@104|)) (let ((|s'#3| (|Set#Difference| |s#0@@104| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#11_a| (Lit |s#0@@104|)))))))) (=> (not (|Set#Equal| |s'#3| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.minimum#canCall| |s'#3|) (let ((|m'#3| (Byte__Order.__default.minimum ($LS $ly@@401) |s'#3|))) (|Byte__Order.__default.lt#canCall| (|$let#11_a| (Lit |s#0@@104|)) |m'#3|)))))) (= (Byte__Order.__default.minimum ($LS $ly@@401) (Lit |s#0@@104|)) (let ((|a#1@@1| (|$let#11_a| (Lit |s#0@@104|)))) (let ((|s'#2| (|Set#Difference| |s#0@@104| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#1@@1|)))))) (ite (|Set#Equal| |s'#2| (|Set#Empty| BoxType)) |a#1@@1| (let ((|m'#2@@0| (Byte__Order.__default.minimum ($LS $ly@@401) |s'#2|))) (ite (Byte__Order.__default.lt |a#1@@1| |m'#2@@0|) |a#1@@1| |m'#2@@0|)))))))) :qid |totalorderidfyByteOrder.727:22| :weight 3 :skolemid |3467| :pattern ( (Byte__Order.__default.minimum ($LS $ly@@401) (Lit |s#0@@104|)) ($IsGoodHeap $Heap@@48)) ))))
(assert (forall ((arg0@@611 T@U) (arg1@@307 T@U) ) (! (= (type (Byte__Order.__default.minimumOpt arg0@@611 arg1@@307)) DatatypeTypeType) :qid |funType:Byte__Order.__default.minimumOpt| :pattern ( (Byte__Order.__default.minimumOpt arg0@@611 arg1@@307)) )))
(assert (forall (($ly@@402 T@U) (|s#0@@105| T@U) ) (!  (=> (and (= (type $ly@@402) LayerTypeType) (= (type |s#0@@105|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimumOpt ($LS $ly@@402) |s#0@@105|) (Byte__Order.__default.minimumOpt $ly@@402 |s#0@@105|))) :qid |totalorderidfyByteOrder.750:22| :skolemid |3468| :pattern ( (Byte__Order.__default.minimumOpt ($LS $ly@@402) |s#0@@105|)) )))
(assert (forall (($ly@@403 T@U) (|s#0@@106| T@U) ) (!  (=> (and (= (type $ly@@403) LayerTypeType) (= (type |s#0@@106|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.minimumOpt $ly@@403 |s#0@@106|) (Byte__Order.__default.minimumOpt $LZ |s#0@@106|))) :qid |totalorderidfyByteOrder.750:22| :skolemid |3469| :pattern ( (Byte__Order.__default.minimumOpt (AsFuelBottom $ly@@403) |s#0@@106|)) )))
(assert  (=> true (forall (($ly@@404 T@U) (|s#0@@107| T@U) ) (!  (=> (and (and (= (type $ly@@404) LayerTypeType) (= (type |s#0@@107|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimumOpt#canCall| |s#0@@107|) ($Is |s#0@@107| (TSet Tclass.NativeTypes.byte)))) (and (and (and (=> (Options.Option.Some_q (Byte__Order.__default.minimumOpt $ly@@404 |s#0@@107|)) (U_2_bool (MapType0Select |s#0@@107| (Options.Option.value (Byte__Order.__default.minimumOpt $ly@@404 |s#0@@107|))))) (=> (Options.Option.Some_q (Byte__Order.__default.minimumOpt $ly@@404 |s#0@@107|)) (forall ((|y#0@@4| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@4|) (< |y#0@@4| 256)) (U_2_bool (MapType0Select |s#0@@107| ($Box (int_2_U |y#0@@4|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.minimumOpt $ly@@404 |s#0@@107|)))) |y#0@@4|)) :qid |totalorderidfyByteOrder.752:30| :skolemid |3470| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.minimumOpt $ly@@404 |s#0@@107|)))) |y#0@@4|)) :pattern ( (MapType0Select |s#0@@107| ($Box (int_2_U |y#0@@4|)))) )))) (=> (Options.Option.None_q (Byte__Order.__default.minimumOpt $ly@@404 |s#0@@107|)) (|Set#Equal| |s#0@@107| (|Set#Empty| BoxType)))) ($Is (Byte__Order.__default.minimumOpt $ly@@404 |s#0@@107|) (Tclass.Options.Option Tclass.NativeTypes.byte)))) :qid |totalorderidfyByteOrder.750:22| :skolemid |3471| :pattern ( (Byte__Order.__default.minimumOpt $ly@@404 |s#0@@107|)) ))))
(assert (forall (($ly@@405 T@U) (|s#0@@108| T@U) ) (!  (=> (and (and (= (type $ly@@405) LayerTypeType) (= (type |s#0@@108|) (MapType0Type BoxType boolType))) ($Is |s#0@@108| (TSet Tclass.NativeTypes.byte))) (= (|Byte__Order.__default.minimumOpt#requires| $ly@@405 |s#0@@108|) true)) :qid |totalorderidfyByteOrder.750:22| :skolemid |3472| :pattern ( (|Byte__Order.__default.minimumOpt#requires| $ly@@405 |s#0@@108|)) )))
(assert (= (type StartFuel_Byte_Order._default.minimum) LayerTypeType))
(assert  (=> true (forall (($ly@@406 T@U) (|s#0@@109| T@U) ) (!  (=> (and (and (= (type $ly@@406) LayerTypeType) (= (type |s#0@@109|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimumOpt#canCall| |s#0@@109|) ($Is |s#0@@109| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@109| (|Set#Empty| BoxType))) (|Byte__Order.__default.minimum#canCall| |s#0@@109|)) (= (Byte__Order.__default.minimumOpt ($LS $ly@@406) |s#0@@109|) (ite (|Set#Equal| |s#0@@109| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.minimum StartFuel_Byte_Order._default.minimum |s#0@@109|)))))))) :qid |totalorderidfyByteOrder.750:22| :skolemid |3473| :pattern ( (Byte__Order.__default.minimumOpt ($LS $ly@@406) |s#0@@109|)) ))))
(assert  (=> true (forall (($ly@@407 T@U) (|s#0@@110| T@U) ) (!  (=> (and (and (= (type $ly@@407) LayerTypeType) (= (type |s#0@@110|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.minimumOpt#canCall| (Lit |s#0@@110|)) ($Is |s#0@@110| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@110| (|Set#Empty| BoxType))) (|Byte__Order.__default.minimum#canCall| (Lit |s#0@@110|))) (= (Byte__Order.__default.minimumOpt ($LS $ly@@407) (Lit |s#0@@110|)) (ite (|Set#Equal| |s#0@@110| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.minimum StartFuel_Byte_Order._default.minimum (Lit |s#0@@110|))))))))) :qid |totalorderidfyByteOrder.750:22| :weight 3 :skolemid |3474| :pattern ( (Byte__Order.__default.minimumOpt ($LS $ly@@407) (Lit |s#0@@110|))) ))))
(assert (forall (($ly@@408 T@U) (|s#0@@111| T@U) ) (!  (=> (and (= (type $ly@@408) LayerTypeType) (= (type |s#0@@111|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximum ($LS $ly@@408) |s#0@@111|) (Byte__Order.__default.maximum $ly@@408 |s#0@@111|))) :qid |totalorderidfyByteOrder.758:22| :skolemid |3475| :pattern ( (Byte__Order.__default.maximum ($LS $ly@@408) |s#0@@111|)) )))
(assert (forall (($ly@@409 T@U) (|s#0@@112| T@U) ) (!  (=> (and (= (type $ly@@409) LayerTypeType) (= (type |s#0@@112|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximum $ly@@409 |s#0@@112|) (Byte__Order.__default.maximum $LZ |s#0@@112|))) :qid |totalorderidfyByteOrder.758:22| :skolemid |3476| :pattern ( (Byte__Order.__default.maximum (AsFuelBottom $ly@@409) |s#0@@112|)) )))
(assert  (=> true (forall (($ly@@410 T@U) (|s#0@@113| T@U) ) (!  (=> (and (and (= (type $ly@@410) LayerTypeType) (= (type |s#0@@113|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximum#canCall| |s#0@@113|) (and ($Is |s#0@@113| (TSet Tclass.NativeTypes.byte)) (>= (|Set#Card| |s#0@@113|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@113| ($Box (int_2_U (Byte__Order.__default.maximum $ly@@410 |s#0@@113|))))) (forall ((|y#0@@5| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@5|) (< |y#0@@5| 256)) (U_2_bool (MapType0Select |s#0@@113| ($Box (int_2_U |y#0@@5|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#0@@5| (Byte__Order.__default.maximum $ly@@410 |s#0@@113|))) :qid |totalorderidfyByteOrder.761:18| :skolemid |3477| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#0@@5| (Byte__Order.__default.maximum $ly@@410 |s#0@@113|))) :pattern ( (MapType0Select |s#0@@113| ($Box (int_2_U |y#0@@5|)))) ))) (and (<= (LitInt 0) (Byte__Order.__default.maximum $ly@@410 |s#0@@113|)) (< (Byte__Order.__default.maximum $ly@@410 |s#0@@113|) 256)))) :qid |totalorderidfyByteOrder.758:22| :skolemid |3478| :pattern ( (Byte__Order.__default.maximum $ly@@410 |s#0@@113|)) ))))
(assert (forall (($ly@@411 T@U) ($Heap@@49 T@U) (|s#0@@114| T@U) ) (!  (=> (and (and (and (= (type $ly@@411) LayerTypeType) (= (type $Heap@@49) (MapType0Type refType MapType1Type))) (= (type |s#0@@114|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@49) ($Is |s#0@@114| (TSet Tclass.NativeTypes.byte)))) (= (|Byte__Order.__default.maximum#requires| $ly@@411 |s#0@@114|) (>= (|Set#Card| |s#0@@114|) (LitInt 1)))) :qid |totalorderidfyByteOrder.758:22| :skolemid |3479| :pattern ( (|Byte__Order.__default.maximum#requires| $ly@@411 |s#0@@114|) ($IsGoodHeap $Heap@@49)) )))
(assert (forall ((s@@52 T@U) ) (!  (=> (and (= (type s@@52) (MapType0Type BoxType boolType)) (|$let#14$canCall| s@@52)) (and (and (<= (LitInt 0) (|$let#14_a| s@@52)) (< (|$let#14_a| s@@52) 256)) (U_2_bool (MapType0Select s@@52 ($Box (int_2_U (|$let#14_a| s@@52))))))) :qid |totalorderidfyByteOrder.763:5| :skolemid |3480| :pattern ( (|$let#14_a| s@@52)) )))
(assert  (=> true (forall (($ly@@412 T@U) ($Heap@@50 T@U) (|s#0@@115| T@U) ) (!  (=> (and (and (and (= (type $ly@@412) LayerTypeType) (= (type $Heap@@50) (MapType0Type refType MapType1Type))) (= (type |s#0@@115|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximum#canCall| |s#0@@115|) (and (and ($IsGoodHeap $Heap@@50) ($Is |s#0@@115| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@115|) (LitInt 1))))) (and (and (|$let#14$canCall| |s#0@@115|) (let ((|s'#1@@0| (|Set#Difference| |s#0@@115| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#14_a| |s#0@@115|))))))) (=> (not (|Set#Equal| |s'#1@@0| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.maximum#canCall| |s'#1@@0|) (let ((|m'#1@@2| (Byte__Order.__default.maximum $ly@@412 |s'#1@@0|))) (|Byte__Order.__default.lt#canCall| |m'#1@@2| (|$let#14_a| |s#0@@115|))))))) (= (Byte__Order.__default.maximum ($LS $ly@@412) |s#0@@115|) (let ((|a#0@@126| (|$let#14_a| |s#0@@115|))) (let ((|s'#0@@0| (|Set#Difference| |s#0@@115| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#0@@126|)))))) (ite (|Set#Equal| |s'#0@@0| (|Set#Empty| BoxType)) |a#0@@126| (let ((|m'#0@@11| (Byte__Order.__default.maximum $ly@@412 |s'#0@@0|))) (ite (Byte__Order.__default.lt |m'#0@@11| |a#0@@126|) |a#0@@126| |m'#0@@11|)))))))) :qid |totalorderidfyByteOrder.758:22| :skolemid |3481| :pattern ( (Byte__Order.__default.maximum ($LS $ly@@412) |s#0@@115|) ($IsGoodHeap $Heap@@50)) ))))
(assert  (=> true (forall (($ly@@413 T@U) ($Heap@@51 T@U) (|s#0@@116| T@U) ) (!  (=> (and (and (and (= (type $ly@@413) LayerTypeType) (= (type $Heap@@51) (MapType0Type refType MapType1Type))) (= (type |s#0@@116|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximum#canCall| (Lit |s#0@@116|)) (and (and ($IsGoodHeap $Heap@@51) ($Is |s#0@@116| (TSet Tclass.NativeTypes.byte))) (>= (|Set#Card| (Lit |s#0@@116|)) (LitInt 1))))) (and (and (|$let#14$canCall| (Lit |s#0@@116|)) (let ((|s'#3@@0| (|Set#Difference| |s#0@@116| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#14_a| (Lit |s#0@@116|)))))))) (=> (not (|Set#Equal| |s'#3@@0| (|Set#Empty| BoxType))) (and (|Byte__Order.__default.maximum#canCall| |s'#3@@0|) (let ((|m'#3@@0| (Byte__Order.__default.maximum ($LS $ly@@413) |s'#3@@0|))) (|Byte__Order.__default.lt#canCall| |m'#3@@0| (|$let#14_a| (Lit |s#0@@116|)))))))) (= (Byte__Order.__default.maximum ($LS $ly@@413) (Lit |s#0@@116|)) (let ((|a#1@@2| (|$let#14_a| (Lit |s#0@@116|)))) (let ((|s'#2@@0| (|Set#Difference| |s#0@@116| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |a#1@@2|)))))) (ite (|Set#Equal| |s'#2@@0| (|Set#Empty| BoxType)) |a#1@@2| (let ((|m'#2@@1| (Byte__Order.__default.maximum ($LS $ly@@413) |s'#2@@0|))) (ite (Byte__Order.__default.lt |m'#2@@1| |a#1@@2|) |a#1@@2| |m'#2@@1|)))))))) :qid |totalorderidfyByteOrder.758:22| :weight 3 :skolemid |3482| :pattern ( (Byte__Order.__default.maximum ($LS $ly@@413) (Lit |s#0@@116|)) ($IsGoodHeap $Heap@@51)) ))))
(assert (forall ((arg0@@612 T@U) (arg1@@308 T@U) ) (! (= (type (Byte__Order.__default.maximumOpt arg0@@612 arg1@@308)) DatatypeTypeType) :qid |funType:Byte__Order.__default.maximumOpt| :pattern ( (Byte__Order.__default.maximumOpt arg0@@612 arg1@@308)) )))
(assert (forall (($ly@@414 T@U) (|s#0@@117| T@U) ) (!  (=> (and (= (type $ly@@414) LayerTypeType) (= (type |s#0@@117|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximumOpt ($LS $ly@@414) |s#0@@117|) (Byte__Order.__default.maximumOpt $ly@@414 |s#0@@117|))) :qid |totalorderidfyByteOrder.779:22| :skolemid |3483| :pattern ( (Byte__Order.__default.maximumOpt ($LS $ly@@414) |s#0@@117|)) )))
(assert (forall (($ly@@415 T@U) (|s#0@@118| T@U) ) (!  (=> (and (= (type $ly@@415) LayerTypeType) (= (type |s#0@@118|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.maximumOpt $ly@@415 |s#0@@118|) (Byte__Order.__default.maximumOpt $LZ |s#0@@118|))) :qid |totalorderidfyByteOrder.779:22| :skolemid |3484| :pattern ( (Byte__Order.__default.maximumOpt (AsFuelBottom $ly@@415) |s#0@@118|)) )))
(assert  (=> true (forall (($ly@@416 T@U) (|s#0@@119| T@U) ) (!  (=> (and (and (= (type $ly@@416) LayerTypeType) (= (type |s#0@@119|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximumOpt#canCall| |s#0@@119|) ($Is |s#0@@119| (TSet Tclass.NativeTypes.byte)))) (and (and (and (=> (Options.Option.Some_q (Byte__Order.__default.maximumOpt $ly@@416 |s#0@@119|)) (U_2_bool (MapType0Select |s#0@@119| (Options.Option.value (Byte__Order.__default.maximumOpt $ly@@416 |s#0@@119|))))) (=> (Options.Option.Some_q (Byte__Order.__default.maximumOpt $ly@@416 |s#0@@119|)) (forall ((|y#0@@6| Int) ) (!  (=> (and (and (<= (LitInt 0) |y#0@@6|) (< |y#0@@6| 256)) (U_2_bool (MapType0Select |s#0@@119| ($Box (int_2_U |y#0@@6|))))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#0@@6| (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.maximumOpt $ly@@416 |s#0@@119|)))))) :qid |totalorderidfyByteOrder.781:30| :skolemid |3485| :pattern ( (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |y#0@@6| (U_2_int ($Unbox intType (Options.Option.value (Byte__Order.__default.maximumOpt $ly@@416 |s#0@@119|)))))) :pattern ( (MapType0Select |s#0@@119| ($Box (int_2_U |y#0@@6|)))) )))) (=> (Options.Option.None_q (Byte__Order.__default.maximumOpt $ly@@416 |s#0@@119|)) (|Set#Equal| |s#0@@119| (|Set#Empty| BoxType)))) ($Is (Byte__Order.__default.maximumOpt $ly@@416 |s#0@@119|) (Tclass.Options.Option Tclass.NativeTypes.byte)))) :qid |totalorderidfyByteOrder.779:22| :skolemid |3486| :pattern ( (Byte__Order.__default.maximumOpt $ly@@416 |s#0@@119|)) ))))
(assert (forall (($ly@@417 T@U) (|s#0@@120| T@U) ) (!  (=> (and (and (= (type $ly@@417) LayerTypeType) (= (type |s#0@@120|) (MapType0Type BoxType boolType))) ($Is |s#0@@120| (TSet Tclass.NativeTypes.byte))) (= (|Byte__Order.__default.maximumOpt#requires| $ly@@417 |s#0@@120|) true)) :qid |totalorderidfyByteOrder.779:22| :skolemid |3487| :pattern ( (|Byte__Order.__default.maximumOpt#requires| $ly@@417 |s#0@@120|)) )))
(assert (= (type StartFuel_Byte_Order._default.maximum) LayerTypeType))
(assert  (=> true (forall (($ly@@418 T@U) (|s#0@@121| T@U) ) (!  (=> (and (and (= (type $ly@@418) LayerTypeType) (= (type |s#0@@121|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximumOpt#canCall| |s#0@@121|) ($Is |s#0@@121| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@121| (|Set#Empty| BoxType))) (|Byte__Order.__default.maximum#canCall| |s#0@@121|)) (= (Byte__Order.__default.maximumOpt ($LS $ly@@418) |s#0@@121|) (ite (|Set#Equal| |s#0@@121| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.maximum StartFuel_Byte_Order._default.maximum |s#0@@121|)))))))) :qid |totalorderidfyByteOrder.779:22| :skolemid |3488| :pattern ( (Byte__Order.__default.maximumOpt ($LS $ly@@418) |s#0@@121|)) ))))
(assert  (=> true (forall (($ly@@419 T@U) (|s#0@@122| T@U) ) (!  (=> (and (and (= (type $ly@@419) LayerTypeType) (= (type |s#0@@122|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.maximumOpt#canCall| (Lit |s#0@@122|)) ($Is |s#0@@122| (TSet Tclass.NativeTypes.byte)))) (and (=> (not (|Set#Equal| |s#0@@122| (|Set#Empty| BoxType))) (|Byte__Order.__default.maximum#canCall| (Lit |s#0@@122|))) (= (Byte__Order.__default.maximumOpt ($LS $ly@@419) (Lit |s#0@@122|)) (ite (|Set#Equal| |s#0@@122| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (int_2_U (Byte__Order.__default.maximum StartFuel_Byte_Order._default.maximum (Lit |s#0@@122|))))))))) :qid |totalorderidfyByteOrder.779:22| :weight 3 :skolemid |3489| :pattern ( (Byte__Order.__default.maximumOpt ($LS $ly@@419) (Lit |s#0@@122|))) ))))
(assert  (=> true (forall ((|a#0@@127| Int) (|b#0@@85| Int) ) (!  (=> (or (|Byte__Order.__default.lt#canCall| |a#0@@127| |b#0@@85|) (and (and (<= (LitInt 0) |a#0@@127|) (< |a#0@@127| 256)) (and (<= (LitInt 0) |b#0@@85|) (< |b#0@@85| 256)))) true) :qid |totalorderidfyTotalOrderByteOrder.17:16| :skolemid |3490| :pattern ( (Byte__Order.__default.lt |a#0@@127| |b#0@@85|)) ))))
(assert (forall ((|a#0@@128| Int) (|b#0@@86| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@128|) (< |a#0@@128| 256)) (and (<= (LitInt 0) |b#0@@86|) (< |b#0@@86| 256))) (= (|Byte__Order.__default.lt#requires| |a#0@@128| |b#0@@86|) true)) :qid |totalorderidfyTotalOrderByteOrder.17:16| :skolemid |3491| :pattern ( (|Byte__Order.__default.lt#requires| |a#0@@128| |b#0@@86|)) )))
(assert  (=> true (forall ((|a#0@@129| Int) (|b#0@@87| Int) ) (!  (=> (or (|Byte__Order.__default.lt#canCall| |a#0@@129| |b#0@@87|) (and (and (<= (LitInt 0) |a#0@@129|) (< |a#0@@129| 256)) (and (<= (LitInt 0) |b#0@@87|) (< |b#0@@87| 256)))) (and (|Byte__Order.__default.lte#canCall| |a#0@@129| |b#0@@87|) (= (Byte__Order.__default.lt |a#0@@129| |b#0@@87|)  (and (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |a#0@@129| |b#0@@87|) (not (= |a#0@@129| |b#0@@87|)))))) :qid |totalorderidfyTotalOrderByteOrder.17:16| :skolemid |3492| :pattern ( (Byte__Order.__default.lt |a#0@@129| |b#0@@87|)) ))))
(assert  (=> true (forall ((|a#0@@130| Int) (|b#0@@88| Int) ) (!  (=> (or (|Byte__Order.__default.lt#canCall| (LitInt |a#0@@130|) (LitInt |b#0@@88|)) (and (and (<= (LitInt 0) |a#0@@130|) (< |a#0@@130| 256)) (and (<= (LitInt 0) |b#0@@88|) (< |b#0@@88| 256)))) (and (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@130|) (LitInt |b#0@@88|)) (= (Byte__Order.__default.lt (LitInt |a#0@@130|) (LitInt |b#0@@88|))  (and (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |a#0@@130|) (LitInt |b#0@@88|)) (not (= |a#0@@130| |b#0@@88|)))))) :qid |totalorderidfyTotalOrderByteOrder.17:16| :weight 3 :skolemid |3493| :pattern ( (Byte__Order.__default.lt (LitInt |a#0@@130|) (LitInt |b#0@@88|))) ))))
(assert  (=> true (forall ((|a#0@@131| Int) (|b#0@@89| Int) ) (!  (=> (or (|Byte__Order.__default.Min#canCall| |a#0@@131| |b#0@@89|) (and (and (<= (LitInt 0) |a#0@@131|) (< |a#0@@131| 256)) (and (<= (LitInt 0) |b#0@@89|) (< |b#0@@89| 256)))) (and (<= (LitInt 0) (Byte__Order.__default.Min |a#0@@131| |b#0@@89|)) (< (Byte__Order.__default.Min |a#0@@131| |b#0@@89|) 256))) :qid |totalorderidfyTotalOrderByteOrder.29:16| :skolemid |3494| :pattern ( (Byte__Order.__default.Min |a#0@@131| |b#0@@89|)) ))))
(assert (forall ((|a#0@@132| Int) (|b#0@@90| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@132|) (< |a#0@@132| 256)) (and (<= (LitInt 0) |b#0@@90|) (< |b#0@@90| 256))) (= (|Byte__Order.__default.Min#requires| |a#0@@132| |b#0@@90|) true)) :qid |totalorderidfyTotalOrderByteOrder.29:16| :skolemid |3495| :pattern ( (|Byte__Order.__default.Min#requires| |a#0@@132| |b#0@@90|)) )))
(assert  (=> true (forall ((|a#0@@133| Int) (|b#0@@91| Int) ) (!  (=> (or (|Byte__Order.__default.Min#canCall| |a#0@@133| |b#0@@91|) (and (and (<= (LitInt 0) |a#0@@133|) (< |a#0@@133| 256)) (and (<= (LitInt 0) |b#0@@91|) (< |b#0@@91| 256)))) (and (|Byte__Order.__default.lte#canCall| |a#0@@133| |b#0@@91|) (= (Byte__Order.__default.Min |a#0@@133| |b#0@@91|) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |a#0@@133| |b#0@@91|) |a#0@@133| |b#0@@91|)))) :qid |totalorderidfyTotalOrderByteOrder.29:16| :skolemid |3496| :pattern ( (Byte__Order.__default.Min |a#0@@133| |b#0@@91|)) ))))
(assert  (=> true (forall ((|a#0@@134| Int) (|b#0@@92| Int) ) (!  (=> (or (|Byte__Order.__default.Min#canCall| (LitInt |a#0@@134|) (LitInt |b#0@@92|)) (and (and (<= (LitInt 0) |a#0@@134|) (< |a#0@@134| 256)) (and (<= (LitInt 0) |b#0@@92|) (< |b#0@@92| 256)))) (and (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@134|) (LitInt |b#0@@92|)) (= (Byte__Order.__default.Min (LitInt |a#0@@134|) (LitInt |b#0@@92|)) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |a#0@@134|) (LitInt |b#0@@92|)) |a#0@@134| |b#0@@92|)))) :qid |totalorderidfyTotalOrderByteOrder.29:16| :weight 3 :skolemid |3497| :pattern ( (Byte__Order.__default.Min (LitInt |a#0@@134|) (LitInt |b#0@@92|))) ))))
(assert  (=> true (forall ((|a#0@@135| Int) (|b#0@@93| Int) ) (!  (=> (or (|Byte__Order.__default.Max#canCall| |a#0@@135| |b#0@@93|) (and (and (<= (LitInt 0) |a#0@@135|) (< |a#0@@135| 256)) (and (<= (LitInt 0) |b#0@@93|) (< |b#0@@93| 256)))) (and (<= (LitInt 0) (Byte__Order.__default.Max |a#0@@135| |b#0@@93|)) (< (Byte__Order.__default.Max |a#0@@135| |b#0@@93|) 256))) :qid |totalorderidfyTotalOrderByteOrder.34:16| :skolemid |3498| :pattern ( (Byte__Order.__default.Max |a#0@@135| |b#0@@93|)) ))))
(assert (forall ((|a#0@@136| Int) (|b#0@@94| Int) ) (!  (=> (and (and (<= (LitInt 0) |a#0@@136|) (< |a#0@@136| 256)) (and (<= (LitInt 0) |b#0@@94|) (< |b#0@@94| 256))) (= (|Byte__Order.__default.Max#requires| |a#0@@136| |b#0@@94|) true)) :qid |totalorderidfyTotalOrderByteOrder.34:16| :skolemid |3499| :pattern ( (|Byte__Order.__default.Max#requires| |a#0@@136| |b#0@@94|)) )))
(assert  (=> true (forall ((|a#0@@137| Int) (|b#0@@95| Int) ) (!  (=> (or (|Byte__Order.__default.Max#canCall| |a#0@@137| |b#0@@95|) (and (and (<= (LitInt 0) |a#0@@137|) (< |a#0@@137| 256)) (and (<= (LitInt 0) |b#0@@95|) (< |b#0@@95| 256)))) (and (|Byte__Order.__default.lte#canCall| |a#0@@137| |b#0@@95|) (= (Byte__Order.__default.Max |a#0@@137| |b#0@@95|) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte |a#0@@137| |b#0@@95|) |b#0@@95| |a#0@@137|)))) :qid |totalorderidfyTotalOrderByteOrder.34:16| :skolemid |3500| :pattern ( (Byte__Order.__default.Max |a#0@@137| |b#0@@95|)) ))))
(assert  (=> true (forall ((|a#0@@138| Int) (|b#0@@96| Int) ) (!  (=> (or (|Byte__Order.__default.Max#canCall| (LitInt |a#0@@138|) (LitInt |b#0@@96|)) (and (and (<= (LitInt 0) |a#0@@138|) (< |a#0@@138| 256)) (and (<= (LitInt 0) |b#0@@96|) (< |b#0@@96| 256)))) (and (|Byte__Order.__default.lte#canCall| (LitInt |a#0@@138|) (LitInt |b#0@@96|)) (= (Byte__Order.__default.Max (LitInt |a#0@@138|) (LitInt |b#0@@96|)) (ite (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (LitInt |a#0@@138|) (LitInt |b#0@@96|)) |b#0@@96| |a#0@@138|)))) :qid |totalorderidfyTotalOrderByteOrder.34:16| :weight 3 :skolemid |3501| :pattern ( (Byte__Order.__default.Max (LitInt |a#0@@138|) (LitInt |b#0@@96|))) ))))
(assert (forall (($ly@@420 T@U) (|run#0@@104| T@U) ) (!  (=> (and (= (type $ly@@420) LayerTypeType) (= (type |run#0@@104|) (SeqType BoxType))) (= (Byte__Order.__default.IsSorted ($LS $ly@@420) |run#0@@104|) (Byte__Order.__default.IsSorted $ly@@420 |run#0@@104|))) :qid |totalorderidfyTotalOrderByteOrder.46:23| :skolemid |3502| :pattern ( (Byte__Order.__default.IsSorted ($LS $ly@@420) |run#0@@104|)) )))
(assert (forall (($ly@@421 T@U) (|run#0@@105| T@U) ) (!  (=> (and (= (type $ly@@421) LayerTypeType) (= (type |run#0@@105|) (SeqType BoxType))) (= (Byte__Order.__default.IsSorted $ly@@421 |run#0@@105|) (Byte__Order.__default.IsSorted $LZ |run#0@@105|))) :qid |totalorderidfyTotalOrderByteOrder.46:23| :skolemid |3503| :pattern ( (Byte__Order.__default.IsSorted (AsFuelBottom $ly@@421) |run#0@@105|)) )))
(assert  (=> true (forall (($ly@@422 T@U) (|run#0@@106| T@U) ) (!  (=> (and (and (= (type $ly@@422) LayerTypeType) (= (type |run#0@@106|) (SeqType BoxType))) (or (|Byte__Order.__default.IsSorted#canCall| |run#0@@106|) ($Is |run#0@@106| (TSeq Tclass.NativeTypes.byte)))) (and (=> (= (|Seq#Length| |run#0@@106|) (LitInt 0)) (Byte__Order.__default.IsSorted $ly@@422 |run#0@@106|)) (=> (= (|Seq#Length| |run#0@@106|) (LitInt 1)) (Byte__Order.__default.IsSorted $ly@@422 |run#0@@106|)))) :qid |totalorderidfyTotalOrderByteOrder.46:23| :skolemid |3504| :pattern ( (Byte__Order.__default.IsSorted $ly@@422 |run#0@@106|)) ))))
(assert (forall (($ly@@423 T@U) (|run#0@@107| T@U) ) (!  (=> (and (and (= (type $ly@@423) LayerTypeType) (= (type |run#0@@107|) (SeqType BoxType))) ($Is |run#0@@107| (TSeq Tclass.NativeTypes.byte))) (= (|Byte__Order.__default.IsSorted#requires| $ly@@423 |run#0@@107|) true)) :qid |totalorderidfyTotalOrderByteOrder.46:23| :skolemid |3505| :pattern ( (|Byte__Order.__default.IsSorted#requires| $ly@@423 |run#0@@107|)) )))
(assert  (=> true (forall (($ly@@424 T@U) (|run#0@@108| T@U) ) (!  (=> (and (and (= (type $ly@@424) LayerTypeType) (= (type |run#0@@108|) (SeqType BoxType))) (or (|Byte__Order.__default.IsSorted#canCall| |run#0@@108|) ($Is |run#0@@108| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#0@@99| Int) (|j#0@@14| Int) ) (!  (=> (<= (LitInt 0) |i#0@@99|) (=> (<= |i#0@@99| |j#0@@14|) (=> (< |j#0@@14| (|Seq#Length| |run#0@@108|)) (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@108| |i#0@@99|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@108| |j#0@@14|))))))) :qid |totalorderidfyTotalOrderByteOrder.50:12| :skolemid |3507| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@108| |j#0@@14|)) ($Unbox intType (|Seq#Index| |run#0@@108| |i#0@@99|))) )) (= (Byte__Order.__default.IsSorted ($LS $ly@@424) |run#0@@108|) (forall ((|i#0@@100| Int) (|j#0@@15| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@100|) (<= |i#0@@100| |j#0@@15|)) (< |j#0@@15| (|Seq#Length| |run#0@@108|))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| |run#0@@108| |i#0@@100|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@108| |j#0@@15|)))))) :qid |totalorderidfyTotalOrderByteOrder.50:12| :skolemid |3506| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@108| |j#0@@15|)) ($Unbox intType (|Seq#Index| |run#0@@108| |i#0@@100|))) ))))) :qid |totalorderidfyTotalOrderByteOrder.46:23| :skolemid |3508| :pattern ( (Byte__Order.__default.IsSorted ($LS $ly@@424) |run#0@@108|)) ))))
(assert  (=> true (forall (($ly@@425 T@U) (|run#0@@109| T@U) ) (!  (=> (and (and (= (type $ly@@425) LayerTypeType) (= (type |run#0@@109|) (SeqType BoxType))) (or (|Byte__Order.__default.IsSorted#canCall| (Lit |run#0@@109|)) ($Is |run#0@@109| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#1@@26| Int) (|j#1@@4| Int) ) (!  (=> (<= (LitInt 0) |i#1@@26|) (=> (<= |i#1@@26| |j#1@@4|) (=> (< |j#1@@4| (|Seq#Length| (Lit |run#0@@109|))) (|Byte__Order.__default.lte#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@109|) |i#1@@26|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@109|) |j#1@@4|))))))) :qid |totalorderidfyTotalOrderByteOrder.50:12| :skolemid |3510| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@109| |j#1@@4|)) ($Unbox intType (|Seq#Index| |run#0@@109| |i#1@@26|))) )) (= (Byte__Order.__default.IsSorted ($LS $ly@@425) (Lit |run#0@@109|)) (forall ((|i#1@@27| Int) (|j#1@@5| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@27|) (<= |i#1@@27| |j#1@@5|)) (< |j#1@@5| (|Seq#Length| (Lit |run#0@@109|)))) (Byte__Order.__default.lte StartFuel_Byte_Order._default.lte (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@109|) |i#1@@27|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@109|) |j#1@@5|)))))) :qid |totalorderidfyTotalOrderByteOrder.50:12| :skolemid |3509| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@109| |j#1@@5|)) ($Unbox intType (|Seq#Index| |run#0@@109| |i#1@@27|))) ))))) :qid |totalorderidfyTotalOrderByteOrder.46:23| :weight 3 :skolemid |3511| :pattern ( (Byte__Order.__default.IsSorted ($LS $ly@@425) (Lit |run#0@@109|))) ))))
(assert  (=> true (forall ((|run#0@@110| T@U) ) (!  (=> (and (= (type |run#0@@110|) (SeqType BoxType)) (or (|Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@110|) ($Is |run#0@@110| (TSeq Tclass.NativeTypes.byte)))) true) :qid |totalorderidfyTotalOrderByteOrder.53:38| :skolemid |3512| :pattern ( (Byte__Order.__default.IsStrictlySortedInternal |run#0@@110|)) ))))
(assert (forall ((|run#0@@111| T@U) ) (!  (=> (and (= (type |run#0@@111|) (SeqType BoxType)) ($Is |run#0@@111| (TSeq Tclass.NativeTypes.byte))) (= (|Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@111|) true)) :qid |totalorderidfyTotalOrderByteOrder.53:38| :skolemid |3513| :pattern ( (|Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@111|)) )))
(assert  (=> true (forall ((|run#0@@112| T@U) ) (!  (=> (and (= (type |run#0@@112|) (SeqType BoxType)) (or (|Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@112|) ($Is |run#0@@112| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#0@@101| Int) (|j#0@@16| Int) ) (!  (=> (<= (LitInt 0) |i#0@@101|) (=> (< |i#0@@101| |j#0@@16|) (=> (< |j#0@@16| (|Seq#Length| |run#0@@112|)) (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| |run#0@@112| |i#0@@101|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@112| |j#0@@16|))))))) :qid |totalorderidfyTotalOrderByteOrder.55:12| :skolemid |3515| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@112| |j#0@@16|)) ($Unbox intType (|Seq#Index| |run#0@@112| |i#0@@101|))) )) (= (Byte__Order.__default.IsStrictlySortedInternal |run#0@@112|) (forall ((|i#0@@102| Int) (|j#0@@17| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@102|) (< |i#0@@102| |j#0@@17|)) (< |j#0@@17| (|Seq#Length| |run#0@@112|))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| |run#0@@112| |i#0@@102|))) (U_2_int ($Unbox intType (|Seq#Index| |run#0@@112| |j#0@@17|)))))) :qid |totalorderidfyTotalOrderByteOrder.55:12| :skolemid |3514| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@112| |j#0@@17|)) ($Unbox intType (|Seq#Index| |run#0@@112| |i#0@@102|))) ))))) :qid |totalorderidfyTotalOrderByteOrder.53:38| :skolemid |3516| :pattern ( (Byte__Order.__default.IsStrictlySortedInternal |run#0@@112|)) ))))
(assert  (=> true (forall ((|run#0@@113| T@U) ) (!  (=> (and (= (type |run#0@@113|) (SeqType BoxType)) (or (|Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@113|)) ($Is |run#0@@113| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|i#1@@28| Int) (|j#1@@6| Int) ) (!  (=> (<= (LitInt 0) |i#1@@28|) (=> (< |i#1@@28| |j#1@@6|) (=> (< |j#1@@6| (|Seq#Length| (Lit |run#0@@113|))) (|Byte__Order.__default.lt#canCall| (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@113|) |i#1@@28|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@113|) |j#1@@6|))))))) :qid |totalorderidfyTotalOrderByteOrder.55:12| :skolemid |3518| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@113| |j#1@@6|)) ($Unbox intType (|Seq#Index| |run#0@@113| |i#1@@28|))) )) (= (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@113|)) (forall ((|i#1@@29| Int) (|j#1@@7| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@29|) (< |i#1@@29| |j#1@@7|)) (< |j#1@@7| (|Seq#Length| (Lit |run#0@@113|)))) (Byte__Order.__default.lt (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@113|) |i#1@@29|))) (U_2_int ($Unbox intType (|Seq#Index| (Lit |run#0@@113|) |j#1@@7|)))))) :qid |totalorderidfyTotalOrderByteOrder.55:12| :skolemid |3517| :pattern ( ($Unbox intType (|Seq#Index| |run#0@@113| |j#1@@7|)) ($Unbox intType (|Seq#Index| |run#0@@113| |i#1@@29|))) ))))) :qid |totalorderidfyTotalOrderByteOrder.53:38| :weight 3 :skolemid |3519| :pattern ( (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@113|))) ))))
(assert (forall (($ly@@426 T@U) (|run#0@@114| T@U) ) (!  (=> (and (= (type $ly@@426) LayerTypeType) (= (type |run#0@@114|) (SeqType BoxType))) (= (Byte__Order.__default.IsStrictlySorted ($LS $ly@@426) |run#0@@114|) (Byte__Order.__default.IsStrictlySorted $ly@@426 |run#0@@114|))) :qid |totalorderidfyTotalOrderByteOrder.69:23| :skolemid |3520| :pattern ( (Byte__Order.__default.IsStrictlySorted ($LS $ly@@426) |run#0@@114|)) )))
(assert (forall (($ly@@427 T@U) (|run#0@@115| T@U) ) (!  (=> (and (= (type $ly@@427) LayerTypeType) (= (type |run#0@@115|) (SeqType BoxType))) (= (Byte__Order.__default.IsStrictlySorted $ly@@427 |run#0@@115|) (Byte__Order.__default.IsStrictlySorted $LZ |run#0@@115|))) :qid |totalorderidfyTotalOrderByteOrder.69:23| :skolemid |3521| :pattern ( (Byte__Order.__default.IsStrictlySorted (AsFuelBottom $ly@@427) |run#0@@115|)) )))
(assert  (=> true (forall (($ly@@428 T@U) (|run#0@@116| T@U) ) (!  (=> (and (and (= (type $ly@@428) LayerTypeType) (= (type |run#0@@116|) (SeqType BoxType))) (or (|Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@116|) ($Is |run#0@@116| (TSeq Tclass.NativeTypes.byte)))) (and (and (=> (= (|Seq#Length| |run#0@@116|) (LitInt 0)) (Byte__Order.__default.IsStrictlySorted $ly@@428 |run#0@@116|)) (=> (= (|Seq#Length| |run#0@@116|) (LitInt 1)) (Byte__Order.__default.IsStrictlySorted $ly@@428 |run#0@@116|))) (=> (Byte__Order.__default.IsStrictlySorted $ly@@428 |run#0@@116|) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted |run#0@@116|)))) :qid |totalorderidfyTotalOrderByteOrder.69:23| :skolemid |3522| :pattern ( (Byte__Order.__default.IsStrictlySorted $ly@@428 |run#0@@116|)) ))))
(assert (forall (($ly@@429 T@U) (|run#0@@117| T@U) ) (!  (=> (and (and (= (type $ly@@429) LayerTypeType) (= (type |run#0@@117|) (SeqType BoxType))) ($Is |run#0@@117| (TSeq Tclass.NativeTypes.byte))) (= (|Byte__Order.__default.IsStrictlySorted#requires| $ly@@429 |run#0@@117|) true)) :qid |totalorderidfyTotalOrderByteOrder.69:23| :skolemid |3523| :pattern ( (|Byte__Order.__default.IsStrictlySorted#requires| $ly@@429 |run#0@@117|)) )))
(assert  (=> true (forall (($ly@@430 T@U) (|run#0@@118| T@U) ) (!  (=> (and (and (= (type $ly@@430) LayerTypeType) (= (type |run#0@@118|) (SeqType BoxType))) (or (|Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@118|) ($Is |run#0@@118| (TSeq Tclass.NativeTypes.byte)))) (and (|Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@118|) (= (Byte__Order.__default.IsStrictlySorted ($LS $ly@@430) |run#0@@118|) (let ((|b#0@@97| (Byte__Order.__default.IsStrictlySortedInternal |run#0@@118|))) (ite |b#0@@97| |b#0@@97| |b#0@@97|))))) :qid |totalorderidfyTotalOrderByteOrder.69:23| :skolemid |3524| :pattern ( (Byte__Order.__default.IsStrictlySorted ($LS $ly@@430) |run#0@@118|)) ))))
(assert  (=> true (forall (($ly@@431 T@U) (|run#0@@119| T@U) ) (!  (=> (and (and (= (type $ly@@431) LayerTypeType) (= (type |run#0@@119|) (SeqType BoxType))) (or (|Byte__Order.__default.IsStrictlySorted#canCall| (Lit |run#0@@119|)) ($Is |run#0@@119| (TSeq Tclass.NativeTypes.byte)))) (and (|Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@119|)) (= (Byte__Order.__default.IsStrictlySorted ($LS $ly@@431) (Lit |run#0@@119|)) (let ((|b#1@@3| (U_2_bool (Lit (bool_2_U (Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@119|))))))) (ite |b#1@@3| |b#1@@3| |b#1@@3|))))) :qid |totalorderidfyTotalOrderByteOrder.69:23| :weight 3 :skolemid |3525| :pattern ( (Byte__Order.__default.IsStrictlySorted ($LS $ly@@431) (Lit |run#0@@119|))) ))))
(assert  (=> true (forall ((|e#0@@4| Int) (|s#0@@123| T@U) ) (!  (=> (and (= (type |s#0@@123|) (MapType0Type BoxType boolType)) (or (|Byte__Order.__default.BiggestInSet#canCall| |e#0@@4| |s#0@@123|) (and (and (and (<= (LitInt 0) |e#0@@4|) (< |e#0@@4| 256)) ($Is |s#0@@123| (TSet Tclass.NativeTypes.byte))) (< 0 (|Set#Card| |s#0@@123|))))) true) :qid |totalorderidfyTotalOrderByteOrder.138:26| :skolemid |3526| :pattern ( (Byte__Order.__default.BiggestInSet |e#0@@4| |s#0@@123|)) ))))
(assert (forall ((|e#0@@5| Int) (|s#0@@124| T@U) ) (!  (=> (= (type |s#0@@124|) (MapType0Type BoxType boolType)) (=> (and (and (<= (LitInt 0) |e#0@@5|) (< |e#0@@5| 256)) ($Is |s#0@@124| (TSet Tclass.NativeTypes.byte))) (= (|Byte__Order.__default.BiggestInSet#requires| |e#0@@5| |s#0@@124|) (< 0 (|Set#Card| |s#0@@124|))))) :qid |totalorderidfyTotalOrderByteOrder.138:26| :skolemid |3527| :pattern ( (|Byte__Order.__default.BiggestInSet#requires| |e#0@@5| |s#0@@124|)) )))
(assert  (=> true (forall ((|e#0@@6| Int) (|s#0@@125| T@U) ) (!  (=> (and (= (type |s#0@@125|) (MapType0Type BoxType boolType)) (or (|Byte__Order.__default.BiggestInSet#canCall| |e#0@@6| |s#0@@125|) (and (and (and (<= (LitInt 0) |e#0@@6|) (< |e#0@@6| 256)) ($Is |s#0@@125| (TSet Tclass.NativeTypes.byte))) (< 0 (|Set#Card| |s#0@@125|))))) (and (=> (U_2_bool (MapType0Select |s#0@@125| ($Box (int_2_U |e#0@@6|)))) (forall ((|e2#0| Int) ) (!  (=> (and (<= (LitInt 0) |e2#0|) (< |e2#0| 256)) (=> (and (U_2_bool (MapType0Select |s#0@@125| ($Box (int_2_U |e2#0|)))) (not (= |e2#0| |e#0@@6|))) (|Byte__Order.__default.lt#canCall| |e2#0| |e#0@@6|))) :qid |totalorderidfyTotalOrderByteOrder.141:22| :skolemid |3529| :pattern ( (Byte__Order.__default.lt |e2#0| |e#0@@6|)) :pattern ( (MapType0Select |s#0@@125| ($Box (int_2_U |e2#0|)))) ))) (= (Byte__Order.__default.BiggestInSet |e#0@@6| |s#0@@125|)  (and (U_2_bool (MapType0Select |s#0@@125| ($Box (int_2_U |e#0@@6|)))) (forall ((|e2#0@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |e2#0@@0|) (< |e2#0@@0| 256)) (and (U_2_bool (MapType0Select |s#0@@125| ($Box (int_2_U |e2#0@@0|)))) (not (= |e2#0@@0| |e#0@@6|)))) (Byte__Order.__default.lt |e2#0@@0| |e#0@@6|)) :qid |totalorderidfyTotalOrderByteOrder.141:22| :skolemid |3528| :pattern ( (Byte__Order.__default.lt |e2#0@@0| |e#0@@6|)) :pattern ( (MapType0Select |s#0@@125| ($Box (int_2_U |e2#0@@0|)))) )))))) :qid |totalorderidfyTotalOrderByteOrder.138:26| :skolemid |3530| :pattern ( (Byte__Order.__default.BiggestInSet |e#0@@6| |s#0@@125|)) ))))
(assert  (=> true (forall ((|e#0@@7| Int) (|s#0@@126| T@U) ) (!  (=> (and (= (type |s#0@@126|) (MapType0Type BoxType boolType)) (or (|Byte__Order.__default.BiggestInSet#canCall| (LitInt |e#0@@7|) (Lit |s#0@@126|)) (and (and (and (<= (LitInt 0) |e#0@@7|) (< |e#0@@7| 256)) ($Is |s#0@@126| (TSet Tclass.NativeTypes.byte))) (< 0 (|Set#Card| (Lit |s#0@@126|)))))) (and (=> (U_2_bool (MapType0Select (Lit |s#0@@126|) ($Box (int_2_U (LitInt |e#0@@7|))))) (forall ((|e2#1| Int) ) (!  (=> (and (<= (LitInt 0) |e2#1|) (< |e2#1| 256)) (=> (and (U_2_bool (MapType0Select (Lit |s#0@@126|) ($Box (int_2_U |e2#1|)))) (not (= |e2#1| |e#0@@7|))) (|Byte__Order.__default.lt#canCall| |e2#1| (LitInt |e#0@@7|)))) :qid |totalorderidfyTotalOrderByteOrder.141:22| :skolemid |3532| :pattern ( (Byte__Order.__default.lt |e2#1| |e#0@@7|)) :pattern ( (MapType0Select |s#0@@126| ($Box (int_2_U |e2#1|)))) ))) (= (Byte__Order.__default.BiggestInSet (LitInt |e#0@@7|) (Lit |s#0@@126|))  (and (U_2_bool (MapType0Select (Lit |s#0@@126|) ($Box (int_2_U (LitInt |e#0@@7|))))) (forall ((|e2#1@@0| Int) ) (!  (=> (and (and (<= (LitInt 0) |e2#1@@0|) (< |e2#1@@0| 256)) (and (U_2_bool (MapType0Select (Lit |s#0@@126|) ($Box (int_2_U |e2#1@@0|)))) (not (= |e2#1@@0| |e#0@@7|)))) (Byte__Order.__default.lt |e2#1@@0| (LitInt |e#0@@7|))) :qid |totalorderidfyTotalOrderByteOrder.141:22| :skolemid |3531| :pattern ( (Byte__Order.__default.lt |e2#1@@0| |e#0@@7|)) :pattern ( (MapType0Select |s#0@@126| ($Box (int_2_U |e2#1@@0|)))) )))))) :qid |totalorderidfyTotalOrderByteOrder.138:26| :weight 3 :skolemid |3533| :pattern ( (Byte__Order.__default.BiggestInSet (LitInt |e#0@@7|) (Lit |s#0@@126|))) ))))
(assert (forall ((arg0@@613 T@U) (arg1@@309 T@U) ) (! (= (type (Byte__Order.__default.SortSet arg0@@613 arg1@@309)) (SeqType BoxType)) :qid |funType:Byte__Order.__default.SortSet| :pattern ( (Byte__Order.__default.SortSet arg0@@613 arg1@@309)) )))
(assert (forall (($ly@@432 T@U) (|s#0@@127| T@U) ) (!  (=> (and (= (type $ly@@432) LayerTypeType) (= (type |s#0@@127|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.SortSet ($LS $ly@@432) |s#0@@127|) (Byte__Order.__default.SortSet $ly@@432 |s#0@@127|))) :qid |totalorderidfyTotalOrderByteOrder.169:12| :skolemid |3534| :pattern ( (Byte__Order.__default.SortSet ($LS $ly@@432) |s#0@@127|)) )))
(assert (forall (($ly@@433 T@U) (|s#0@@128| T@U) ) (!  (=> (and (= (type $ly@@433) LayerTypeType) (= (type |s#0@@128|) (MapType0Type BoxType boolType))) (= (Byte__Order.__default.SortSet $ly@@433 |s#0@@128|) (Byte__Order.__default.SortSet $LZ |s#0@@128|))) :qid |totalorderidfyTotalOrderByteOrder.169:12| :skolemid |3535| :pattern ( (Byte__Order.__default.SortSet (AsFuelBottom $ly@@433) |s#0@@128|)) )))
(assert  (=> true (forall (($ly@@434 T@U) (|s#0@@129| T@U) ) (!  (=> (and (and (= (type $ly@@434) LayerTypeType) (= (type |s#0@@129|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SortSet#canCall| |s#0@@129|) ($Is |s#0@@129| (TSet Tclass.NativeTypes.byte)))) (and (and (and (= (|Set#Card| |s#0@@129|) (|Seq#Length| (Byte__Order.__default.SortSet $ly@@434 |s#0@@129|))) (forall ((|t#0@@13| T@U) ) (!  (=> (= (type |t#0@@13|) intType) (=> (and (<= (LitInt 0) (U_2_int |t#0@@13|)) (< (U_2_int |t#0@@13|) 256)) (= (U_2_bool (MapType0Select |s#0@@129| ($Box |t#0@@13|))) (|Seq#Contains| (Byte__Order.__default.SortSet $ly@@434 |s#0@@129|) ($Box |t#0@@13|))))) :qid |totalorderidfyTotalOrderByteOrder.171:20| :skolemid |3536| :pattern ( (|Seq#Contains| (Byte__Order.__default.SortSet $ly@@434 |s#0@@129|) ($Box |t#0@@13|))) :pattern ( (MapType0Select |s#0@@129| ($Box |t#0@@13|))) ))) (Byte__Order.__default.IsSorted StartFuel_Byte_Order._default.IsSorted (Byte__Order.__default.SortSet $ly@@434 |s#0@@129|))) ($Is (Byte__Order.__default.SortSet $ly@@434 |s#0@@129|) (TSeq Tclass.NativeTypes.byte)))) :qid |totalorderidfyTotalOrderByteOrder.169:12| :skolemid |3537| :pattern ( (Byte__Order.__default.SortSet $ly@@434 |s#0@@129|)) ))))
(assert (forall (($ly@@435 T@U) ($Heap@@52 T@U) (|s#0@@130| T@U) ) (!  (=> (and (and (and (= (type $ly@@435) LayerTypeType) (= (type $Heap@@52) (MapType0Type refType MapType1Type))) (= (type |s#0@@130|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@52) ($Is |s#0@@130| (TSet Tclass.NativeTypes.byte)))) (= (|Byte__Order.__default.SortSet#requires| $ly@@435 |s#0@@130|) true)) :qid |totalorderidfyTotalOrderByteOrder.169:12| :skolemid |3538| :pattern ( (|Byte__Order.__default.SortSet#requires| $ly@@435 |s#0@@130|) ($IsGoodHeap $Heap@@52)) )))
(assert (forall ((s@@53 T@U) ) (!  (=> (and (= (type s@@53) (MapType0Type BoxType boolType)) (|$let#17$canCall| s@@53)) (and (and (<= (LitInt 0) (|$let#17_e| s@@53)) (< (|$let#17_e| s@@53) 256)) (Byte__Order.__default.BiggestInSet (|$let#17_e| s@@53) s@@53))) :qid |totalorderidfyTotalOrderByteOrder.180:7| :skolemid |3539| :pattern ( (|$let#17_e| s@@53)) )))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted8) LayerTypeType))
(assert  (=> true (forall (($ly@@436 T@U) ($Heap@@53 T@U) (|s#0@@131| T@U) ) (!  (=> (and (and (and (= (type $ly@@436) LayerTypeType) (= (type $Heap@@53) (MapType0Type refType MapType1Type))) (= (type |s#0@@131|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SortSet#canCall| |s#0@@131|) (and ($IsGoodHeap $Heap@@53) ($Is |s#0@@131| (TSet Tclass.NativeTypes.byte))))) (and (=> (not (= (|Set#Card| |s#0@@131|) (LitInt 0))) (and (|$let#17$canCall| |s#0@@131|) (|Byte__Order.__default.SortSet#canCall| (|Set#Difference| |s#0@@131| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#17_e| |s#0@@131|)))))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted8)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted8)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted8) MoreFuel_Byte_Order._default.IsSorted8)) (= (Byte__Order.__default.SortSet ($LS $ly@@436) |s#0@@131|) (ite (= (|Set#Card| |s#0@@131|) (LitInt 0)) (|Seq#Empty| BoxType) (let ((|e#0@@8| (|$let#17_e| |s#0@@131|))) (|Seq#Append| (Byte__Order.__default.SortSet $ly@@436 (|Set#Difference| |s#0@@131| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |e#0@@8|))))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U |e#0@@8|)))))))))) :qid |totalorderidfyTotalOrderByteOrder.169:12| :skolemid |3540| :pattern ( (Byte__Order.__default.SortSet ($LS $ly@@436) |s#0@@131|) ($IsGoodHeap $Heap@@53)) ))))
(assert (= (type MoreFuel_Byte_Order._default.IsSorted9) LayerTypeType))
(assert  (=> true (forall (($ly@@437 T@U) ($Heap@@54 T@U) (|s#0@@132| T@U) ) (!  (=> (and (and (and (= (type $ly@@437) LayerTypeType) (= (type $Heap@@54) (MapType0Type refType MapType1Type))) (= (type |s#0@@132|) (MapType0Type BoxType boolType))) (or (|Byte__Order.__default.SortSet#canCall| (Lit |s#0@@132|)) (and ($IsGoodHeap $Heap@@54) ($Is |s#0@@132| (TSet Tclass.NativeTypes.byte))))) (and (=> (not (= (|Set#Card| (Lit |s#0@@132|)) (LitInt 0))) (and (|$let#17$canCall| (Lit |s#0@@132|)) (|Byte__Order.__default.SortSet#canCall| (|Set#Difference| |s#0@@132| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U (|$let#17_e| (Lit |s#0@@132|))))))))) (and (and (and (= StartFuel_Byte_Order._default.IsSorted ($LS MoreFuel_Byte_Order._default.IsSorted9)) (= StartFuelAssert_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Byte_Order._default.IsSorted9)))) (= (AsFuelBottom MoreFuel_Byte_Order._default.IsSorted9) MoreFuel_Byte_Order._default.IsSorted9)) (= (Byte__Order.__default.SortSet ($LS $ly@@437) (Lit |s#0@@132|)) (ite (= (|Set#Card| (Lit |s#0@@132|)) (LitInt 0)) (|Seq#Empty| BoxType) (let ((|e#1| (|$let#17_e| (Lit |s#0@@132|)))) (|Seq#Append| (Byte__Order.__default.SortSet ($LS $ly@@437) (|Set#Difference| |s#0@@132| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (int_2_U |e#1|))))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U |e#1|)))))))))) :qid |totalorderidfyTotalOrderByteOrder.169:12| :weight 3 :skolemid |3541| :pattern ( (Byte__Order.__default.SortSet ($LS $ly@@437) (Lit |s#0@@132|)) ($IsGoodHeap $Heap@@54)) ))))
(assert (= (type Tclass.Lexicographic__Byte__Order.__default) TyType))
(assert (= (Tag Tclass.Lexicographic__Byte__Order.__default) Tagclass.Lexicographic__Byte__Order.__default))
(assert (= (TagFamily Tclass.Lexicographic__Byte__Order.__default) tytagFamily$_default))
(assert (forall ((bx@@175 T@U) ) (!  (=> (and (= (type bx@@175) BoxType) ($IsBox bx@@175 Tclass.Lexicographic__Byte__Order.__default)) (and (= ($Box ($Unbox refType bx@@175)) bx@@175) ($Is ($Unbox refType bx@@175) Tclass.Lexicographic__Byte__Order.__default))) :qid |unknown.0:0| :skolemid |3542| :pattern ( ($IsBox bx@@175 Tclass.Lexicographic__Byte__Order.__default)) )))
(assert (forall (($o@@44 T@U) ) (!  (=> (= (type $o@@44) refType) (= ($Is $o@@44 Tclass.Lexicographic__Byte__Order.__default)  (or (= $o@@44 null) (= (dtype $o@@44) Tclass.Lexicographic__Byte__Order.__default)))) :qid |unknown.0:0| :skolemid |3543| :pattern ( ($Is $o@@44 Tclass.Lexicographic__Byte__Order.__default)) )))
(assert (forall (($o@@45 T@U) ($h@@101 T@U) ) (!  (=> (and (= (type $o@@45) refType) (= (type $h@@101) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@45 Tclass.Lexicographic__Byte__Order.__default $h@@101)  (or (= $o@@45 null) (U_2_bool (MapType1Select (MapType0Select $h@@101 $o@@45) alloc))))) :qid |unknown.0:0| :skolemid |3544| :pattern ( ($IsAlloc $o@@45 Tclass.Lexicographic__Byte__Order.__default $h@@101)) )))
(assert (= (type Lexicographic__Byte__Order.__default.SomeElement) (SeqType BoxType)))
(assert  (=> true (=> true ($Is Lexicographic__Byte__Order.__default.SomeElement (TSeq Tclass.NativeTypes.byte)))))
(assert (= |Lexicographic__Byte__Order.__default.SomeElement#requires| true))
(assert  (=> true (=> true (= Lexicographic__Byte__Order.__default.SomeElement (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (=> true (= Lexicographic__Byte__Order.__default.SomeElement (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (forall ((|a#0@@139| T@U) (|b#0@@98| T@U) ) (!  (=> (and (and (= (type |a#0@@139|) (SeqType BoxType)) (= (type |b#0@@98|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@139| |b#0@@98|) (and ($Is |a#0@@139| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@98| (TSeq Tclass.NativeTypes.byte))))) (and (and (and (and (and (and (= (Lexicographic__Byte__Order.__default.lte |a#0@@139| |b#0@@98|) (Lexicographic__Byte__Order.__default.ltedef |a#0@@139| |b#0@@98|)) (or (Lexicographic__Byte__Order.__default.ltedef |a#0@@139| |b#0@@98|) (Lexicographic__Byte__Order.__default.ltedef |b#0@@98| |a#0@@139|))) (forall ((|a#1@@3| T@U) (|b#1@@4| T@U) (|c#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type |a#1@@3|) (SeqType BoxType)) (= (type |b#1@@4|) (SeqType BoxType))) (= (type |c#0@@11|) (SeqType BoxType))) (and (and ($Is |a#1@@3| (TSeq Tclass.NativeTypes.byte)) ($Is |b#1@@4| (TSeq Tclass.NativeTypes.byte))) ($Is |c#0@@11| (TSeq Tclass.NativeTypes.byte)))) (and (Lexicographic__Byte__Order.__default.ltedef |a#1@@3| |b#1@@4|) (Lexicographic__Byte__Order.__default.ltedef |b#1@@4| |c#0@@11|))) (Lexicographic__Byte__Order.__default.ltedef |a#1@@3| |c#0@@11|)) :qid |totalorderidfy.25:20| :skolemid |3545| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#1@@3| |c#0@@11|) (Lexicographic__Byte__Order.__default.ltedef |b#1@@4| |c#0@@11|)) :pattern ( (Lexicographic__Byte__Order.__default.ltedef |b#1@@4| |c#0@@11|) (Lexicographic__Byte__Order.__default.ltedef |a#1@@3| |b#1@@4|)) ))) (= (Lexicographic__Byte__Order.__default.lte |a#0@@139| |b#0@@98|) (Lexicographic__Byte__Order.__default.ltedef |a#0@@139| |b#0@@98|))) (or (Lexicographic__Byte__Order.__default.ltedef |a#0@@139| |b#0@@98|) (Lexicographic__Byte__Order.__default.ltedef |b#0@@98| |a#0@@139|))) (=> (and (Lexicographic__Byte__Order.__default.ltedef |a#0@@139| |b#0@@98|) (Lexicographic__Byte__Order.__default.ltedef |b#0@@98| |a#0@@139|)) (|Seq#Equal| |a#0@@139| |b#0@@98|))) (forall ((|a#2@@0| T@U) (|b#2@@0| T@U) (|c#1@@0| T@U) ) (!  (=> (and (and (and (and (= (type |a#2@@0|) (SeqType BoxType)) (= (type |b#2@@0|) (SeqType BoxType))) (= (type |c#1@@0|) (SeqType BoxType))) (and (and ($Is |a#2@@0| (TSeq Tclass.NativeTypes.byte)) ($Is |b#2@@0| (TSeq Tclass.NativeTypes.byte))) ($Is |c#1@@0| (TSeq Tclass.NativeTypes.byte)))) (and (Lexicographic__Byte__Order.__default.ltedef |a#2@@0| |b#2@@0|) (Lexicographic__Byte__Order.__default.ltedef |b#2@@0| |c#1@@0|))) (Lexicographic__Byte__Order.__default.ltedef |a#2@@0| |c#1@@0|)) :qid |totalorderidfy.199:20| :skolemid |3546| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#2@@0| |c#1@@0|) (Lexicographic__Byte__Order.__default.ltedef |b#2@@0| |c#1@@0|)) :pattern ( (Lexicographic__Byte__Order.__default.ltedef |b#2@@0| |c#1@@0|) (Lexicographic__Byte__Order.__default.ltedef |a#2@@0| |b#2@@0|)) )))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.22:17| :skolemid |3547| :pattern ( (Lexicographic__Byte__Order.__default.lte |a#0@@139| |b#0@@98|)) ))))
(assert (forall ((|a#0@@140| T@U) (|b#0@@99| T@U) ) (!  (=> (and (and (= (type |a#0@@140|) (SeqType BoxType)) (= (type |b#0@@99|) (SeqType BoxType))) (and ($Is |a#0@@140| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@99| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.lte#requires| |a#0@@140| |b#0@@99|) true)) :qid |totalorderidfyTotalOrderLexicographicByteOrder.22:17| :skolemid |3548| :pattern ( (|Lexicographic__Byte__Order.__default.lte#requires| |a#0@@140| |b#0@@99|)) )))
(assert  (=> true (forall ((|a#0@@141| T@U) (|b#0@@100| T@U) ) (!  (=> (and (and (= (type |a#0@@141|) (SeqType BoxType)) (= (type |b#0@@100|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@141| |b#0@@100|) (and ($Is |a#0@@141| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@100| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| |a#0@@141| |b#0@@100|) (= (Lexicographic__Byte__Order.__default.lte |a#0@@141| |b#0@@100|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@141| |b#0@@100|)))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.22:17| :skolemid |3549| :pattern ( (Lexicographic__Byte__Order.__default.lte |a#0@@141| |b#0@@100|)) ))))
(assert  (=> true (forall ((|a#0@@142| T@U) (|b#0@@101| T@U) ) (!  (=> (and (and (= (type |a#0@@142|) (SeqType BoxType)) (= (type |b#0@@101|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@142|) (Lit |b#0@@101|)) (and ($Is |a#0@@142| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@101| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| (Lit |a#0@@142|) (Lit |b#0@@101|)) (= (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@142|) (Lit |b#0@@101|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@142|) (Lit |b#0@@101|))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.22:17| :weight 3 :skolemid |3550| :pattern ( (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@142|) (Lit |b#0@@101|))) ))))
(assert  (=> true (forall ((|a#0@@143| T@U) (|b#0@@102| T@U) ) (!  (=> (and (and (= (type |a#0@@143|) (SeqType BoxType)) (= (type |b#0@@102|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.ltedef#canCall| |a#0@@143| |b#0@@102|) (and ($Is |a#0@@143| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@102| (TSeq Tclass.NativeTypes.byte))))) true) :qid |totalorderidfyTotalOrderLexicographicByteOrder.27:20| :skolemid |3551| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#0@@143| |b#0@@102|)) ))))
(assert (forall ((|a#0@@144| T@U) (|b#0@@103| T@U) ) (!  (=> (and (and (= (type |a#0@@144|) (SeqType BoxType)) (= (type |b#0@@103|) (SeqType BoxType))) (and ($Is |a#0@@144| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@103| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.ltedef#requires| |a#0@@144| |b#0@@103|) true)) :qid |totalorderidfyTotalOrderLexicographicByteOrder.27:20| :skolemid |3552| :pattern ( (|Lexicographic__Byte__Order.__default.ltedef#requires| |a#0@@144| |b#0@@103|)) )))
(assert  (=> true (forall ((|a#0@@145| T@U) (|b#0@@104| T@U) ) (!  (=> (and (and (= (type |a#0@@145|) (SeqType BoxType)) (= (type |b#0@@104|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.ltedef#canCall| |a#0@@145| |b#0@@104|) (and ($Is |a#0@@145| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@104| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| |a#0@@145| |b#0@@104|) (= (Lexicographic__Byte__Order.__default.ltedef |a#0@@145| |b#0@@104|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |a#0@@145| |b#0@@104|)))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.27:20| :skolemid |3553| :pattern ( (Lexicographic__Byte__Order.__default.ltedef |a#0@@145| |b#0@@104|)) ))))
(assert  (=> true (forall ((|a#0@@146| T@U) (|b#0@@105| T@U) ) (!  (=> (and (and (= (type |a#0@@146|) (SeqType BoxType)) (= (type |b#0@@105|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.ltedef#canCall| (Lit |a#0@@146|) (Lit |b#0@@105|)) (and ($Is |a#0@@146| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@105| (TSeq Tclass.NativeTypes.byte))))) (and (|SeqComparison.__default.lte#canCall| (Lit |a#0@@146|) (Lit |b#0@@105|)) (= (Lexicographic__Byte__Order.__default.ltedef (Lit |a#0@@146|) (Lit |b#0@@105|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |a#0@@146|) (Lit |b#0@@105|))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.27:20| :weight 3 :skolemid |3554| :pattern ( (Lexicographic__Byte__Order.__default.ltedef (Lit |a#0@@146|) (Lit |b#0@@105|))) ))))
(assert (forall (($ly@@438 T@U) (|run#0@@120| T@U) (|needle#0@@37| T@U) ) (!  (=> (and (and (= (type $ly@@438) LayerTypeType) (= (type |run#0@@120|) (SeqType BoxType))) (= (type |needle#0@@37|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@438) |run#0@@120| |needle#0@@37|) (Lexicographic__Byte__Order.__default.LargestLte $ly@@438 |run#0@@120| |needle#0@@37|))) :qid |totalorderidfyLexicographicByteOrder.264:12| :skolemid |3555| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@438) |run#0@@120| |needle#0@@37|)) )))
(assert (forall (($ly@@439 T@U) (|run#0@@121| T@U) (|needle#0@@38| T@U) ) (!  (=> (and (and (= (type $ly@@439) LayerTypeType) (= (type |run#0@@121|) (SeqType BoxType))) (= (type |needle#0@@38|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLte $ly@@439 |run#0@@121| |needle#0@@38|) (Lexicographic__Byte__Order.__default.LargestLte $LZ |run#0@@121| |needle#0@@38|))) :qid |totalorderidfyLexicographicByteOrder.264:12| :skolemid |3556| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte (AsFuelBottom $ly@@439) |run#0@@121| |needle#0@@38|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.IsSorted) LayerTypeType))
(assert  (=> true (forall (($ly@@440 T@U) (|run#0@@122| T@U) (|needle#0@@39| T@U) ) (!  (=> (and (and (and (= (type $ly@@440) LayerTypeType) (= (type |run#0@@122|) (SeqType BoxType))) (= (type |needle#0@@39|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLte#canCall| |run#0@@122| |needle#0@@39|) (and (and ($Is |run#0@@122| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@39| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@122|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Lexicographic__Byte__Order.__default.LargestLte $ly@@440 |run#0@@122| |needle#0@@39|)) (< (Lexicographic__Byte__Order.__default.LargestLte $ly@@440 |run#0@@122| |needle#0@@39|) (|Seq#Length| |run#0@@122|))) (forall ((|i#0@@103| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@103|) (<= |i#0@@103| (Lexicographic__Byte__Order.__default.LargestLte $ly@@440 |run#0@@122| |needle#0@@39|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#0@@103|)) |needle#0@@39|))) :qid |totalorderidfyLexicographicByteOrder.267:20| :skolemid |3557| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#0@@103|))) ))) (forall ((|i#1@@30| Int) ) (!  (=> true (=> (and (< (Lexicographic__Byte__Order.__default.LargestLte $ly@@440 |run#0@@122| |needle#0@@39|) |i#1@@30|) (< |i#1@@30| (|Seq#Length| |run#0@@122|))) (Lexicographic__Byte__Order.__default.lt |needle#0@@39| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#1@@30|))))) :qid |totalorderidfyLexicographicByteOrder.268:20| :skolemid |3558| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| |i#1@@30|))) ))) (=> (|Seq#Contains| |run#0@@122| ($Box |needle#0@@39|)) (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.LargestLte $ly@@440 |run#0@@122| |needle#0@@39|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@122| (Lexicographic__Byte__Order.__default.LargestLte $ly@@440 |run#0@@122| |needle#0@@39|))) |needle#0@@39|))))) :qid |totalorderidfyLexicographicByteOrder.264:12| :skolemid |3559| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte $ly@@440 |run#0@@122| |needle#0@@39|)) ))))
(assert (forall (($ly@@441 T@U) (|run#0@@123| T@U) (|needle#0@@40| T@U) ) (!  (=> (and (and (and (= (type $ly@@441) LayerTypeType) (= (type |run#0@@123|) (SeqType BoxType))) (= (type |needle#0@@40|) (SeqType BoxType))) (and ($Is |run#0@@123| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@40| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.LargestLte#requires| $ly@@441 |run#0@@123| |needle#0@@40|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@123|))) :qid |totalorderidfyLexicographicByteOrder.264:12| :skolemid |3560| :pattern ( (|Lexicographic__Byte__Order.__default.LargestLte#requires| $ly@@441 |run#0@@123| |needle#0@@40|)) )))
(assert  (and (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted0) LayerTypeType) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted) LayerTypeType)))
(assert  (=> true (forall (($ly@@442 T@U) (|run#0@@124| T@U) (|needle#0@@41| T@U) ) (!  (=> (and (and (and (= (type $ly@@442) LayerTypeType) (= (type |run#0@@124|) (SeqType BoxType))) (= (type |needle#0@@41|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLte#canCall| |run#0@@124| |needle#0@@41|) (and (and ($Is |run#0@@124| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@41| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@124|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@124|) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lt#canCall| |needle#0@@41| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@124| (LitInt 0))))) (=> (not (or (= (|Seq#Length| |run#0@@124|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt |needle#0@@41| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@124| (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (|Seq#Drop| |run#0@@124| (LitInt 1)) |needle#0@@41|))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted0)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted0)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted0) MoreFuel_Lexicographic_Byte_Order._default.IsSorted0)) (= (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@442) |run#0@@124| |needle#0@@41|) (ite  (or (= (|Seq#Length| |run#0@@124|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt |needle#0@@41| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@124| (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLte $ly@@442 (|Seq#Drop| |run#0@@124| (LitInt 1)) |needle#0@@41|))))))) :qid |totalorderidfyLexicographicByteOrder.264:12| :skolemid |3561| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@442) |run#0@@124| |needle#0@@41|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted1) LayerTypeType))
(assert  (=> true (forall (($ly@@443 T@U) (|run#0@@125| T@U) (|needle#0@@42| T@U) ) (!  (=> (and (and (and (= (type $ly@@443) LayerTypeType) (= (type |run#0@@125|) (SeqType BoxType))) (= (type |needle#0@@42|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit |run#0@@125|) (Lit |needle#0@@42|)) (and (and ($Is |run#0@@125| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@42| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@125|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@125|)) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |needle#0@@42|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@125|) (LitInt 0))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@125|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt (Lit |needle#0@@42|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@125|) (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit (|Seq#Drop| (Lit |run#0@@125|) (LitInt 1))) (Lit |needle#0@@42|)))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted1)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted1)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted1) MoreFuel_Lexicographic_Byte_Order._default.IsSorted1)) (= (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@443) (Lit |run#0@@125|) (Lit |needle#0@@42|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@125|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lt (Lit |needle#0@@42|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@125|) (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@443) (Lit (|Seq#Drop| (Lit |run#0@@125|) (LitInt 1))) (Lit |needle#0@@42|)))))))) :qid |totalorderidfyLexicographicByteOrder.264:12| :weight 3 :skolemid |3562| :pattern ( (Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@443) (Lit |run#0@@125|) (Lit |needle#0@@42|))) ))))
(assert (forall (($ly@@444 T@U) (|run#0@@126| T@U) (|needle#0@@43| T@U) ) (!  (=> (and (and (= (type $ly@@444) LayerTypeType) (= (type |run#0@@126|) (SeqType BoxType))) (= (type |needle#0@@43|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@444) |run#0@@126| |needle#0@@43|) (Lexicographic__Byte__Order.__default.LargestLt $ly@@444 |run#0@@126| |needle#0@@43|))) :qid |totalorderidfyLexicographicByteOrder.360:12| :skolemid |3563| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@444) |run#0@@126| |needle#0@@43|)) )))
(assert (forall (($ly@@445 T@U) (|run#0@@127| T@U) (|needle#0@@44| T@U) ) (!  (=> (and (and (= (type $ly@@445) LayerTypeType) (= (type |run#0@@127|) (SeqType BoxType))) (= (type |needle#0@@44|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.LargestLt $ly@@445 |run#0@@127| |needle#0@@44|) (Lexicographic__Byte__Order.__default.LargestLt $LZ |run#0@@127| |needle#0@@44|))) :qid |totalorderidfyLexicographicByteOrder.360:12| :skolemid |3564| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt (AsFuelBottom $ly@@445) |run#0@@127| |needle#0@@44|)) )))
(assert  (=> true (forall (($ly@@446 T@U) (|run#0@@128| T@U) (|needle#0@@45| T@U) ) (!  (=> (and (and (and (= (type $ly@@446) LayerTypeType) (= (type |run#0@@128|) (SeqType BoxType))) (= (type |needle#0@@45|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLt#canCall| |run#0@@128| |needle#0@@45|) (and (and ($Is |run#0@@128| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@45| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@128|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Lexicographic__Byte__Order.__default.LargestLt $ly@@446 |run#0@@128| |needle#0@@45|)) (< (Lexicographic__Byte__Order.__default.LargestLt $ly@@446 |run#0@@128| |needle#0@@45|) (|Seq#Length| |run#0@@128|))) (forall ((|i#0@@104| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@104|) (<= |i#0@@104| (Lexicographic__Byte__Order.__default.LargestLt $ly@@446 |run#0@@128| |needle#0@@45|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#0@@104|)) |needle#0@@45|))) :qid |totalorderidfyLexicographicByteOrder.363:20| :skolemid |3565| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#0@@104|))) ))) (forall ((|i#1@@31| Int) ) (!  (=> true (=> (and (< (Lexicographic__Byte__Order.__default.LargestLt $ly@@446 |run#0@@128| |needle#0@@45|) |i#1@@31|) (< |i#1@@31| (|Seq#Length| |run#0@@128|))) (Lexicographic__Byte__Order.__default.lte |needle#0@@45| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#1@@31|))))) :qid |totalorderidfyLexicographicByteOrder.364:20| :skolemid |3566| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| |i#1@@31|))) ))) (=> (|Seq#Contains| |run#0@@128| ($Box |needle#0@@45|)) (and (< (+ (Lexicographic__Byte__Order.__default.LargestLt $ly@@446 |run#0@@128| |needle#0@@45|) 1) (|Seq#Length| |run#0@@128|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@128| (+ (Lexicographic__Byte__Order.__default.LargestLt $ly@@446 |run#0@@128| |needle#0@@45|) 1))) |needle#0@@45|))))) :qid |totalorderidfyLexicographicByteOrder.360:12| :skolemid |3567| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt $ly@@446 |run#0@@128| |needle#0@@45|)) ))))
(assert (forall (($ly@@447 T@U) (|run#0@@129| T@U) (|needle#0@@46| T@U) ) (!  (=> (and (and (and (= (type $ly@@447) LayerTypeType) (= (type |run#0@@129|) (SeqType BoxType))) (= (type |needle#0@@46|) (SeqType BoxType))) (and ($Is |run#0@@129| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@46| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.LargestLt#requires| $ly@@447 |run#0@@129| |needle#0@@46|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@129|))) :qid |totalorderidfyLexicographicByteOrder.360:12| :skolemid |3568| :pattern ( (|Lexicographic__Byte__Order.__default.LargestLt#requires| $ly@@447 |run#0@@129| |needle#0@@46|)) )))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted2) LayerTypeType))
(assert  (=> true (forall (($ly@@448 T@U) (|run#0@@130| T@U) (|needle#0@@47| T@U) ) (!  (=> (and (and (and (= (type $ly@@448) LayerTypeType) (= (type |run#0@@130|) (SeqType BoxType))) (= (type |needle#0@@47|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLt#canCall| |run#0@@130| |needle#0@@47|) (and (and ($Is |run#0@@130| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@47| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@130|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@130|) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lte#canCall| |needle#0@@47| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@130| (LitInt 0))))) (=> (not (or (= (|Seq#Length| |run#0@@130|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte |needle#0@@47| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@130| (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLt#canCall| (|Seq#Drop| |run#0@@130| (LitInt 1)) |needle#0@@47|))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted2)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted2)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted2) MoreFuel_Lexicographic_Byte_Order._default.IsSorted2)) (= (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@448) |run#0@@130| |needle#0@@47|) (ite  (or (= (|Seq#Length| |run#0@@130|) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte |needle#0@@47| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@130| (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLt $ly@@448 (|Seq#Drop| |run#0@@130| (LitInt 1)) |needle#0@@47|))))))) :qid |totalorderidfyLexicographicByteOrder.360:12| :skolemid |3569| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@448) |run#0@@130| |needle#0@@47|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted3) LayerTypeType))
(assert  (=> true (forall (($ly@@449 T@U) (|run#0@@131| T@U) (|needle#0@@48| T@U) ) (!  (=> (and (and (and (= (type $ly@@449) LayerTypeType) (= (type |run#0@@131|) (SeqType BoxType))) (= (type |needle#0@@48|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.LargestLt#canCall| (Lit |run#0@@131|) (Lit |needle#0@@48|)) (and (and ($Is |run#0@@131| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@48| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@131|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@131|)) (LitInt 0))) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |needle#0@@48|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@131|) (LitInt 0))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@131|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte (Lit |needle#0@@48|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@131|) (LitInt 0)))))) (|Lexicographic__Byte__Order.__default.LargestLt#canCall| (Lit (|Seq#Drop| (Lit |run#0@@131|) (LitInt 1))) (Lit |needle#0@@48|)))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted3)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted3)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted3) MoreFuel_Lexicographic_Byte_Order._default.IsSorted3)) (= (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@449) (Lit |run#0@@131|) (Lit |needle#0@@48|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@131|)) (LitInt 0)) (Lexicographic__Byte__Order.__default.lte (Lit |needle#0@@48|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@131|) (LitInt 0))))) (- 0 1) (+ 1 (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@449) (Lit (|Seq#Drop| (Lit |run#0@@131|) (LitInt 1))) (Lit |needle#0@@48|)))))))) :qid |totalorderidfyLexicographicByteOrder.360:12| :weight 3 :skolemid |3570| :pattern ( (Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@449) (Lit |run#0@@131|) (Lit |needle#0@@48|))) ))))
(assert (forall (($ly@@450 T@U) (|run#0@@132| T@U) (|needle#0@@49| T@U) ) (!  (=> (and (and (= (type $ly@@450) LayerTypeType) (= (type |run#0@@132|) (SeqType BoxType))) (= (type |needle#0@@49|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@450) |run#0@@132| |needle#0@@49|) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@450 |run#0@@132| |needle#0@@49|))) :qid |totalorderidfyLexicographicByteOrder.392:12| :skolemid |3571| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@450) |run#0@@132| |needle#0@@49|)) )))
(assert (forall (($ly@@451 T@U) (|run#0@@133| T@U) (|needle#0@@50| T@U) ) (!  (=> (and (and (= (type $ly@@451) LayerTypeType) (= (type |run#0@@133|) (SeqType BoxType))) (= (type |needle#0@@50|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@451 |run#0@@133| |needle#0@@50|) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $LZ |run#0@@133| |needle#0@@50|))) :qid |totalorderidfyLexicographicByteOrder.392:12| :skolemid |3572| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte (AsFuelBottom $ly@@451) |run#0@@133| |needle#0@@50|)) )))
(assert  (=> true (forall (($ly@@452 T@U) (|run#0@@134| T@U) (|needle#0@@51| T@U) ) (!  (=> (and (and (and (= (type $ly@@452) LayerTypeType) (= (type |run#0@@134|) (SeqType BoxType))) (= (type |needle#0@@51|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@134| |needle#0@@51|) (and (and ($Is |run#0@@134| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@51| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@134|)))) (and (and (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@452 |run#0@@134| |needle#0@@51|) (|Seq#Length| |run#0@@134|)) (forall ((|i#0@@105| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@105|) (< |i#0@@105| (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@452 |run#0@@134| |needle#0@@51|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@134| |i#0@@105|)) |needle#0@@51|)) :qid |totalorderidfyLexicographicByteOrder.395:20| :skolemid |3573| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@134| |i#0@@105|))) ))) (forall ((|i#1@@32| Int) ) (!  (=> (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@452 |run#0@@134| |needle#0@@51|) |i#1@@32|) (< |i#1@@32| (|Seq#Length| |run#0@@134|))) (Lexicographic__Byte__Order.__default.lte |needle#0@@51| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@134| |i#1@@32|)))) :qid |totalorderidfyLexicographicByteOrder.396:20| :skolemid |3574| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@134| |i#1@@32|))) ))) (<= (LitInt 0) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@452 |run#0@@134| |needle#0@@51|)))) :qid |totalorderidfyLexicographicByteOrder.392:12| :skolemid |3575| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@452 |run#0@@134| |needle#0@@51|)) ))))
(assert (forall (($ly@@453 T@U) (|run#0@@135| T@U) (|needle#0@@52| T@U) ) (!  (=> (and (and (and (= (type $ly@@453) LayerTypeType) (= (type |run#0@@135|) (SeqType BoxType))) (= (type |needle#0@@52|) (SeqType BoxType))) (and ($Is |run#0@@135| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@52| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| $ly@@453 |run#0@@135| |needle#0@@52|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@135|))) :qid |totalorderidfyLexicographicByteOrder.392:12| :skolemid |3576| :pattern ( (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| $ly@@453 |run#0@@135| |needle#0@@52|)) )))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted4) LayerTypeType))
(assert  (=> true (forall (($ly@@454 T@U) (|run#0@@136| T@U) (|needle#0@@53| T@U) ) (!  (=> (and (and (and (= (type $ly@@454) LayerTypeType) (= (type |run#0@@136|) (SeqType BoxType))) (= (type |needle#0@@53|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@136| |needle#0@@53|) (and (and ($Is |run#0@@136| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@53| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@136|)))) (and (=> (not (= (|Seq#Length| |run#0@@136|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@136|) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@136|)) |needle#0@@53|)) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@136|)) |needle#0@@53|)) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@136|) (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@136|) |needle#0@@53|))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted4)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted4)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted4) MoreFuel_Lexicographic_Byte_Order._default.IsSorted4)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@454) |run#0@@136| |needle#0@@53|) (ite (= (|Seq#Length| |run#0@@136|) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@136|)) |needle#0@@53|) (|Seq#Length| |run#0@@136|) (Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@454 (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@136|) |needle#0@@53|))))))) :qid |totalorderidfyLexicographicByteOrder.392:12| :skolemid |3577| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@454) |run#0@@136| |needle#0@@53|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted5) LayerTypeType))
(assert  (=> true (forall (($ly@@455 T@U) (|run#0@@137| T@U) (|needle#0@@54| T@U) ) (!  (=> (and (and (and (= (type $ly@@455) LayerTypeType) (= (type |run#0@@137|) (SeqType BoxType))) (= (type |needle#0@@54|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (Lit |run#0@@137|) (Lit |needle#0@@54|)) (and (and ($Is |run#0@@137| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@54| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@137|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@137|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@137|)) (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@137|)))) (Lit |needle#0@@54|))) (=> (not (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@137|)))) (Lit |needle#0@@54|)))))) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@137|)) (|Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@137|))) (Lit |needle#0@@54|)))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted5)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted5)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted5) MoreFuel_Lexicographic_Byte_Order._default.IsSorted5)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@455) (Lit |run#0@@137|) (Lit |needle#0@@54|)) (ite (= (|Seq#Length| (Lit |run#0@@137|)) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lt (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@137|)))) (Lit |needle#0@@54|)) (|Seq#Length| (Lit |run#0@@137|)) (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@455) (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@137|))) (Lit |needle#0@@54|)))))))) :qid |totalorderidfyLexicographicByteOrder.392:12| :weight 3 :skolemid |3578| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@455) (Lit |run#0@@137|) (Lit |needle#0@@54|))) ))))
(assert (forall (($ly@@456 T@U) (|s#0@@133| T@U) (|key#0@@62| T@U) (|lo#0@@13| Int) (|hi#0@@13| Int) ) (!  (=> (and (and (= (type $ly@@456) LayerTypeType) (= (type |s#0@@133|) (SeqType BoxType))) (= (type |key#0@@62|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@456) |s#0@@133| |key#0@@62| |lo#0@@13| |hi#0@@13|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@456 |s#0@@133| |key#0@@62| |lo#0@@13| |hi#0@@13|))) :qid |totalorderidfyLexicographicByteOrder.423:12| :skolemid |3579| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@456) |s#0@@133| |key#0@@62| |lo#0@@13| |hi#0@@13|)) )))
(assert (forall (($ly@@457 T@U) (|s#0@@134| T@U) (|key#0@@63| T@U) (|lo#0@@14| Int) (|hi#0@@14| Int) ) (!  (=> (and (and (= (type $ly@@457) LayerTypeType) (= (type |s#0@@134|) (SeqType BoxType))) (= (type |key#0@@63|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@457 |s#0@@134| |key#0@@63| |lo#0@@14| |hi#0@@14|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $LZ |s#0@@134| |key#0@@63| |lo#0@@14| |hi#0@@14|))) :qid |totalorderidfyLexicographicByteOrder.423:12| :skolemid |3580| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (AsFuelBottom $ly@@457) |s#0@@134| |key#0@@63| |lo#0@@14| |hi#0@@14|)) )))
(assert  (=> true (forall (($ly@@458 T@U) (|s#0@@135| T@U) (|key#0@@64| T@U) (|lo#0@@15| Int) (|hi#0@@15| Int) ) (!  (=> (and (and (and (= (type $ly@@458) LayerTypeType) (= (type |s#0@@135|) (SeqType BoxType))) (= (type |key#0@@64|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@135| |key#0@@64| |lo#0@@15| |hi#0@@15|) (and (and ($Is |s#0@@135| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@64| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@15|) (< |lo#0@@15| |hi#0@@15|)) (<= |hi#0@@15| (+ (|Seq#Length| |s#0@@135|) 1))) (=> (> |lo#0@@15| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@135| (- |lo#0@@15| 1))) |key#0@@64|))) (=> (<= |hi#0@@15| (|Seq#Length| |s#0@@135|)) (Lexicographic__Byte__Order.__default.lte |key#0@@64| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@135| (- |hi#0@@15| 1))))))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@458 |s#0@@135| |key#0@@64| |lo#0@@15| |hi#0@@15|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@458 |s#0@@135| |key#0@@64| |lo#0@@15| |hi#0@@15|) (|Seq#Length| |s#0@@135|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@458 |s#0@@135| |key#0@@64| |lo#0@@15| |hi#0@@15|) 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@135| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@458 |s#0@@135| |key#0@@64| |lo#0@@15| |hi#0@@15|) 1))) |key#0@@64|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@458 |s#0@@135| |key#0@@64| |lo#0@@15| |hi#0@@15|) (|Seq#Length| |s#0@@135|)) (Lexicographic__Byte__Order.__default.lte |key#0@@64| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@135| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@458 |s#0@@135| |key#0@@64| |lo#0@@15| |hi#0@@15|))))))) :qid |totalorderidfyLexicographicByteOrder.423:12| :skolemid |3581| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@458 |s#0@@135| |key#0@@64| |lo#0@@15| |hi#0@@15|)) ))))
(assert (forall (($ly@@459 T@U) (|s#0@@136| T@U) (|key#0@@65| T@U) (|lo#0@@16| Int) (|hi#0@@16| Int) ) (!  (=> (and (and (and (= (type $ly@@459) LayerTypeType) (= (type |s#0@@136|) (SeqType BoxType))) (= (type |key#0@@65|) (SeqType BoxType))) (and ($Is |s#0@@136| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@65| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@459 |s#0@@136| |key#0@@65| |lo#0@@16| |hi#0@@16|)  (and (and (and (and (<= (LitInt 0) |lo#0@@16|) (< |lo#0@@16| |hi#0@@16|)) (<= |hi#0@@16| (+ (|Seq#Length| |s#0@@136|) 1))) (=> (> |lo#0@@16| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@136| (- |lo#0@@16| 1))) |key#0@@65|))) (=> (<= |hi#0@@16| (|Seq#Length| |s#0@@136|)) (Lexicographic__Byte__Order.__default.lte |key#0@@65| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@136| (- |hi#0@@16| 1)))))))) :qid |totalorderidfyLexicographicByteOrder.423:12| :skolemid |3582| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@459 |s#0@@136| |key#0@@65| |lo#0@@16| |hi#0@@16|)) )))
(assert  (=> true (forall (($ly@@460 T@U) (|s#0@@137| T@U) (|key#0@@66| T@U) (|lo#0@@17| Int) (|hi#0@@17| Int) ) (!  (=> (and (and (and (= (type $ly@@460) LayerTypeType) (= (type |s#0@@137|) (SeqType BoxType))) (= (type |key#0@@66|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@137| |key#0@@66| |lo#0@@17| |hi#0@@17|) (and (and ($Is |s#0@@137| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@66| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@17|) (< |lo#0@@17| |hi#0@@17|)) (<= |hi#0@@17| (+ (|Seq#Length| |s#0@@137|) 1))) (=> (> |lo#0@@17| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@137| (- |lo#0@@17| 1))) |key#0@@66|))) (=> (<= |hi#0@@17| (|Seq#Length| |s#0@@137|)) (Lexicographic__Byte__Order.__default.lte |key#0@@66| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@137| (- |hi#0@@17| 1))))))))) (and (=> (< (+ |lo#0@@17| 1) |hi#0@@17|) (let ((|mid#0@@3| (Div (+ |lo#0@@17| |hi#0@@17|) (LitInt 2)))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@137| (- |mid#0@@3| 1))) |key#0@@66|) (=> (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@137| (- |mid#0@@3| 1))) |key#0@@66|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@137| |key#0@@66| |mid#0@@3| |hi#0@@17|))) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@137| (- |mid#0@@3| 1))) |key#0@@66|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@137| |key#0@@66| |lo#0@@17| |mid#0@@3|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@460) |s#0@@137| |key#0@@66| |lo#0@@17| |hi#0@@17|) (ite (< (+ |lo#0@@17| 1) |hi#0@@17|) (let ((|mid#0@@4| (Div (+ |lo#0@@17| |hi#0@@17|) (LitInt 2)))) (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@137| (- |mid#0@@4| 1))) |key#0@@66|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@460 |s#0@@137| |key#0@@66| |mid#0@@4| |hi#0@@17|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@460 |s#0@@137| |key#0@@66| |lo#0@@17| |mid#0@@4|))) |lo#0@@17|)))) :qid |totalorderidfyLexicographicByteOrder.423:12| :skolemid |3583| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@460) |s#0@@137| |key#0@@66| |lo#0@@17| |hi#0@@17|)) ))))
(assert  (=> true (forall (($ly@@461 T@U) (|s#0@@138| T@U) (|key#0@@67| T@U) (|lo#0@@18| Int) (|hi#0@@18| Int) ) (!  (=> (and (and (and (= (type $ly@@461) LayerTypeType) (= (type |s#0@@138|) (SeqType BoxType))) (= (type |key#0@@67|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@138| |key#0@@67| (LitInt |lo#0@@18|) (LitInt |hi#0@@18|)) (and (and ($Is |s#0@@138| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@67| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@18|)) (< |lo#0@@18| |hi#0@@18|)) (<= (LitInt |hi#0@@18|) (+ (|Seq#Length| |s#0@@138|) 1))) (=> (> |lo#0@@18| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@138| (LitInt (- |lo#0@@18| 1)))) |key#0@@67|))) (=> (<= (LitInt |hi#0@@18|) (|Seq#Length| |s#0@@138|)) (Lexicographic__Byte__Order.__default.lte |key#0@@67| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@138| (LitInt (- |hi#0@@18| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@18| 1) |hi#0@@18|)))) (let ((|mid#1@@3| (LitInt (Div (+ |lo#0@@18| |hi#0@@18|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@138| (- |mid#1@@3| 1))) |key#0@@67|) (=> (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@138| (- |mid#1@@3| 1))) |key#0@@67|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@138| |key#0@@67| |mid#1@@3| (LitInt |hi#0@@18|)))) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@138| (- |mid#1@@3| 1))) |key#0@@67|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@138| |key#0@@67| (LitInt |lo#0@@18|) |mid#1@@3|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@461) |s#0@@138| |key#0@@67| (LitInt |lo#0@@18|) (LitInt |hi#0@@18|)) (ite (< (+ |lo#0@@18| 1) |hi#0@@18|) (let ((|mid#1@@4| (LitInt (Div (+ |lo#0@@18| |hi#0@@18|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@138| (LitInt (- |mid#1@@4| 1)))) |key#0@@67|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@461) |s#0@@138| |key#0@@67| |mid#1@@4| (LitInt |hi#0@@18|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@461) |s#0@@138| |key#0@@67| (LitInt |lo#0@@18|) |mid#1@@4|))) |lo#0@@18|)))) :qid |totalorderidfyLexicographicByteOrder.423:12| :weight 3 :skolemid |3584| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@461) |s#0@@138| |key#0@@67| (LitInt |lo#0@@18|) (LitInt |hi#0@@18|))) ))))
(assert  (=> true (forall (($ly@@462 T@U) (|s#0@@139| T@U) (|key#0@@68| T@U) (|lo#0@@19| Int) (|hi#0@@19| Int) ) (!  (=> (and (and (and (= (type $ly@@462) LayerTypeType) (= (type |s#0@@139|) (SeqType BoxType))) (= (type |key#0@@68|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@139|) (Lit |key#0@@68|) (LitInt |lo#0@@19|) (LitInt |hi#0@@19|)) (and (and ($Is |s#0@@139| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@68| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@19|)) (< |lo#0@@19| |hi#0@@19|)) (<= (LitInt |hi#0@@19|) (+ (|Seq#Length| (Lit |s#0@@139|)) 1))) (=> (> |lo#0@@19| 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@139|) (LitInt (- |lo#0@@19| 1)))) (Lit |key#0@@68|)))) (=> (<= (LitInt |hi#0@@19|) (|Seq#Length| (Lit |s#0@@139|))) (Lexicographic__Byte__Order.__default.lte (Lit |key#0@@68|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@139|) (LitInt (- |hi#0@@19| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@19| 1) |hi#0@@19|)))) (let ((|mid#2@@3| (LitInt (Div (+ |lo#0@@19| |hi#0@@19|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@139|) (- |mid#2@@3| 1))) (Lit |key#0@@68|)) (=> (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@139|) (- |mid#2@@3| 1))) (Lit |key#0@@68|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@139|) (Lit |key#0@@68|) |mid#2@@3| (LitInt |hi#0@@19|)))) (=> (not (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@139|) (- |mid#2@@3| 1))) (Lit |key#0@@68|))) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@139|) (Lit |key#0@@68|) (LitInt |lo#0@@19|) |mid#2@@3|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@462) (Lit |s#0@@139|) (Lit |key#0@@68|) (LitInt |lo#0@@19|) (LitInt |hi#0@@19|)) (ite (< (+ |lo#0@@19| 1) |hi#0@@19|) (let ((|mid#2@@4| (LitInt (Div (+ |lo#0@@19| |hi#0@@19|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@139|) (LitInt (- |mid#2@@4| 1)))) (Lit |key#0@@68|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@462) (Lit |s#0@@139|) (Lit |key#0@@68|) |mid#2@@4| (LitInt |hi#0@@19|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@462) (Lit |s#0@@139|) (Lit |key#0@@68|) (LitInt |lo#0@@19|) |mid#2@@4|))) |lo#0@@19|)))) :qid |totalorderidfyLexicographicByteOrder.423:12| :weight 3 :skolemid |3585| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@462) (Lit |s#0@@139|) (Lit |key#0@@68|) (LitInt |lo#0@@19|) (LitInt |hi#0@@19|))) ))))
(assert (forall (($ly@@463 T@U) (|s#0@@140| T@U) (|key#0@@69| T@U) ) (!  (=> (and (and (= (type $ly@@463) LayerTypeType) (= (type |s#0@@140|) (SeqType BoxType))) (= (type |key#0@@69|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@463) |s#0@@140| |key#0@@69|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@463 |s#0@@140| |key#0@@69|))) :qid |totalorderidfyLexicographicByteOrder.443:22| :skolemid |3586| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@463) |s#0@@140| |key#0@@69|)) )))
(assert (forall (($ly@@464 T@U) (|s#0@@141| T@U) (|key#0@@70| T@U) ) (!  (=> (and (and (= (type $ly@@464) LayerTypeType) (= (type |s#0@@141|) (SeqType BoxType))) (= (type |key#0@@70|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@464 |s#0@@141| |key#0@@70|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $LZ |s#0@@141| |key#0@@70|))) :qid |totalorderidfyLexicographicByteOrder.443:22| :skolemid |3587| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte (AsFuelBottom $ly@@464) |s#0@@141| |key#0@@70|)) )))
(assert  (=> true (forall (($ly@@465 T@U) (|s#0@@142| T@U) (|key#0@@71| T@U) ) (!  (=> (and (and (and (= (type $ly@@465) LayerTypeType) (= (type |s#0@@142|) (SeqType BoxType))) (= (type |key#0@@71|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@142| |key#0@@71|) (and ($Is |s#0@@142| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@71| (TSeq Tclass.NativeTypes.byte))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@465 |s#0@@142| |key#0@@71|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@465 |s#0@@142| |key#0@@71|) (|Seq#Length| |s#0@@142|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@465 |s#0@@142| |key#0@@71|) 0) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@142| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@465 |s#0@@142| |key#0@@71|) 1))) |key#0@@71|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@465 |s#0@@142| |key#0@@71|) (|Seq#Length| |s#0@@142|)) (Lexicographic__Byte__Order.__default.lte |key#0@@71| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@142| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@465 |s#0@@142| |key#0@@71|))))))) :qid |totalorderidfyLexicographicByteOrder.443:22| :skolemid |3588| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@465 |s#0@@142| |key#0@@71|)) ))))
(assert (forall (($ly@@466 T@U) (|s#0@@143| T@U) (|key#0@@72| T@U) ) (!  (=> (and (and (and (= (type $ly@@466) LayerTypeType) (= (type |s#0@@143|) (SeqType BoxType))) (= (type |key#0@@72|) (SeqType BoxType))) (and ($Is |s#0@@143| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@72| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@466 |s#0@@143| |key#0@@72|) true)) :qid |totalorderidfyLexicographicByteOrder.443:22| :skolemid |3589| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@466 |s#0@@143| |key#0@@72|)) )))
(assert  (=> true (forall (($ly@@467 T@U) (|s#0@@144| T@U) (|key#0@@73| T@U) ) (!  (=> (and (and (and (= (type $ly@@467) LayerTypeType) (= (type |s#0@@144|) (SeqType BoxType))) (= (type |key#0@@73|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@144| |key#0@@73|) (and ($Is |s#0@@144| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@73| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@144| |key#0@@73| (LitInt 0) (+ (|Seq#Length| |s#0@@144|) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@467) |s#0@@144| |key#0@@73|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) |s#0@@144| |key#0@@73| (LitInt 0) (+ (|Seq#Length| |s#0@@144|) 1))))) :qid |totalorderidfyLexicographicByteOrder.443:22| :skolemid |3590| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@467) |s#0@@144| |key#0@@73|)) ))))
(assert  (=> true (forall (($ly@@468 T@U) (|s#0@@145| T@U) (|key#0@@74| T@U) ) (!  (=> (and (and (and (= (type $ly@@468) LayerTypeType) (= (type |s#0@@145|) (SeqType BoxType))) (= (type |key#0@@74|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (Lit |s#0@@145|) (Lit |key#0@@74|)) (and ($Is |s#0@@145| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@74| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@145|) (Lit |key#0@@74|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@145|)) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@468) (Lit |s#0@@145|) (Lit |key#0@@74|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) (Lit |s#0@@145|) (Lit |key#0@@74|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@145|)) 1))))) :qid |totalorderidfyLexicographicByteOrder.443:22| :weight 3 :skolemid |3591| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@468) (Lit |s#0@@145|) (Lit |key#0@@74|))) ))))
(assert (forall (($ly@@469 T@U) (|run#0@@138| T@U) (|needle#0@@55| T@U) ) (!  (=> (and (and (= (type $ly@@469) LayerTypeType) (= (type |run#0@@138|) (SeqType BoxType))) (= (type |needle#0@@55|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@469) |run#0@@138| |needle#0@@55|) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@469 |run#0@@138| |needle#0@@55|))) :qid |totalorderidfyLexicographicByteOrder.451:12| :skolemid |3592| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@469) |run#0@@138| |needle#0@@55|)) )))
(assert (forall (($ly@@470 T@U) (|run#0@@139| T@U) (|needle#0@@56| T@U) ) (!  (=> (and (and (= (type $ly@@470) LayerTypeType) (= (type |run#0@@139|) (SeqType BoxType))) (= (type |needle#0@@56|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@470 |run#0@@139| |needle#0@@56|) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $LZ |run#0@@139| |needle#0@@56|))) :qid |totalorderidfyLexicographicByteOrder.451:12| :skolemid |3593| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt (AsFuelBottom $ly@@470) |run#0@@139| |needle#0@@56|)) )))
(assert  (=> true (forall (($ly@@471 T@U) (|run#0@@140| T@U) (|needle#0@@57| T@U) ) (!  (=> (and (and (and (= (type $ly@@471) LayerTypeType) (= (type |run#0@@140|) (SeqType BoxType))) (= (type |needle#0@@57|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@140| |needle#0@@57|) (and (and ($Is |run#0@@140| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@57| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@140|)))) (and (and (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@471 |run#0@@140| |needle#0@@57|) (|Seq#Length| |run#0@@140|)) (forall ((|i#0@@106| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@106|) (< |i#0@@106| (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@471 |run#0@@140| |needle#0@@57|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#0@@106|)) |needle#0@@57|)) :qid |totalorderidfyLexicographicByteOrder.454:20| :skolemid |3594| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#0@@106|))) ))) (forall ((|i#1@@33| Int) ) (!  (=> (and (<= (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@471 |run#0@@140| |needle#0@@57|) |i#1@@33|) (< |i#1@@33| (|Seq#Length| |run#0@@140|))) (Lexicographic__Byte__Order.__default.lt |needle#0@@57| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#1@@33|)))) :qid |totalorderidfyLexicographicByteOrder.455:20| :skolemid |3595| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@140| |i#1@@33|))) ))) (<= (LitInt 0) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@471 |run#0@@140| |needle#0@@57|)))) :qid |totalorderidfyLexicographicByteOrder.451:12| :skolemid |3596| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@471 |run#0@@140| |needle#0@@57|)) ))))
(assert (forall (($ly@@472 T@U) (|run#0@@141| T@U) (|needle#0@@58| T@U) ) (!  (=> (and (and (and (= (type $ly@@472) LayerTypeType) (= (type |run#0@@141|) (SeqType BoxType))) (= (type |needle#0@@58|) (SeqType BoxType))) (and ($Is |run#0@@141| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@58| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| $ly@@472 |run#0@@141| |needle#0@@58|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@141|))) :qid |totalorderidfyLexicographicByteOrder.451:12| :skolemid |3597| :pattern ( (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| $ly@@472 |run#0@@141| |needle#0@@58|)) )))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted6) LayerTypeType))
(assert  (=> true (forall (($ly@@473 T@U) (|run#0@@142| T@U) (|needle#0@@59| T@U) ) (!  (=> (and (and (and (= (type $ly@@473) LayerTypeType) (= (type |run#0@@142|) (SeqType BoxType))) (= (type |needle#0@@59|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@142| |needle#0@@59|) (and (and ($Is |run#0@@142| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@59| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@142|)))) (and (=> (not (= (|Seq#Length| |run#0@@142|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@142|) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@142|)) |needle#0@@59|)) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@142|)) |needle#0@@59|)) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) |run#0@@142|) (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@142|) |needle#0@@59|))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted6)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted6)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted6) MoreFuel_Lexicographic_Byte_Order._default.IsSorted6)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@473) |run#0@@142| |needle#0@@59|) (ite (= (|Seq#Length| |run#0@@142|) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |run#0@@142|)) |needle#0@@59|) (|Seq#Length| |run#0@@142|) (Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@473 (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |run#0@@142|) |needle#0@@59|))))))) :qid |totalorderidfyLexicographicByteOrder.451:12| :skolemid |3598| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@473) |run#0@@142| |needle#0@@59|)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted7) LayerTypeType))
(assert  (=> true (forall (($ly@@474 T@U) (|run#0@@143| T@U) (|needle#0@@60| T@U) ) (!  (=> (and (and (and (= (type $ly@@474) LayerTypeType) (= (type |run#0@@143|) (SeqType BoxType))) (= (type |needle#0@@60|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (Lit |run#0@@143|) (Lit |needle#0@@60|)) (and (and ($Is |run#0@@143| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |needle#0@@60| (TSeq Tclass.NativeTypes.byte))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@143|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@143|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@143|)) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@143|)))) (Lit |needle#0@@60|))) (=> (not (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.lte (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@143|)))) (Lit |needle#0@@60|)))))) (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@143|)) (|Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@143|))) (Lit |needle#0@@60|)))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted7)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted7)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted7) MoreFuel_Lexicographic_Byte_Order._default.IsSorted7)) (= (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@474) (Lit |run#0@@143|) (Lit |needle#0@@60|)) (ite (= (|Seq#Length| (Lit |run#0@@143|)) (LitInt 0)) 0 (ite (Lexicographic__Byte__Order.__default.lte (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@143|)))) (Lit |needle#0@@60|)) (|Seq#Length| (Lit |run#0@@143|)) (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@474) (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |run#0@@143|))) (Lit |needle#0@@60|)))))))) :qid |totalorderidfyLexicographicByteOrder.451:12| :weight 3 :skolemid |3599| :pattern ( (Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@474) (Lit |run#0@@143|) (Lit |needle#0@@60|))) ))))
(assert (forall (($ly@@475 T@U) (|s#0@@146| T@U) (|key#0@@75| T@U) (|lo#0@@20| Int) (|hi#0@@20| Int) ) (!  (=> (and (and (= (type $ly@@475) LayerTypeType) (= (type |s#0@@146|) (SeqType BoxType))) (= (type |key#0@@75|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@475) |s#0@@146| |key#0@@75| |lo#0@@20| |hi#0@@20|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@475 |s#0@@146| |key#0@@75| |lo#0@@20| |hi#0@@20|))) :qid |totalorderidfyLexicographicByteOrder.482:12| :skolemid |3600| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@475) |s#0@@146| |key#0@@75| |lo#0@@20| |hi#0@@20|)) )))
(assert (forall (($ly@@476 T@U) (|s#0@@147| T@U) (|key#0@@76| T@U) (|lo#0@@21| Int) (|hi#0@@21| Int) ) (!  (=> (and (and (= (type $ly@@476) LayerTypeType) (= (type |s#0@@147|) (SeqType BoxType))) (= (type |key#0@@76|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@476 |s#0@@147| |key#0@@76| |lo#0@@21| |hi#0@@21|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $LZ |s#0@@147| |key#0@@76| |lo#0@@21| |hi#0@@21|))) :qid |totalorderidfyLexicographicByteOrder.482:12| :skolemid |3601| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (AsFuelBottom $ly@@476) |s#0@@147| |key#0@@76| |lo#0@@21| |hi#0@@21|)) )))
(assert  (=> true (forall (($ly@@477 T@U) (|s#0@@148| T@U) (|key#0@@77| T@U) (|lo#0@@22| Int) (|hi#0@@22| Int) ) (!  (=> (and (and (and (= (type $ly@@477) LayerTypeType) (= (type |s#0@@148|) (SeqType BoxType))) (= (type |key#0@@77|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@148| |key#0@@77| |lo#0@@22| |hi#0@@22|) (and (and ($Is |s#0@@148| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@77| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@22|) (< |lo#0@@22| |hi#0@@22|)) (<= |hi#0@@22| (+ (|Seq#Length| |s#0@@148|) 1))) (=> (> |lo#0@@22| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@148| (- |lo#0@@22| 1))) |key#0@@77|))) (=> (<= |hi#0@@22| (|Seq#Length| |s#0@@148|)) (Lexicographic__Byte__Order.__default.lt |key#0@@77| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@148| (- |hi#0@@22| 1))))))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@477 |s#0@@148| |key#0@@77| |lo#0@@22| |hi#0@@22|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@477 |s#0@@148| |key#0@@77| |lo#0@@22| |hi#0@@22|) (|Seq#Length| |s#0@@148|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@477 |s#0@@148| |key#0@@77| |lo#0@@22| |hi#0@@22|) 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@148| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@477 |s#0@@148| |key#0@@77| |lo#0@@22| |hi#0@@22|) 1))) |key#0@@77|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@477 |s#0@@148| |key#0@@77| |lo#0@@22| |hi#0@@22|) (|Seq#Length| |s#0@@148|)) (Lexicographic__Byte__Order.__default.lt |key#0@@77| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@148| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@477 |s#0@@148| |key#0@@77| |lo#0@@22| |hi#0@@22|))))))) :qid |totalorderidfyLexicographicByteOrder.482:12| :skolemid |3602| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@477 |s#0@@148| |key#0@@77| |lo#0@@22| |hi#0@@22|)) ))))
(assert (forall (($ly@@478 T@U) (|s#0@@149| T@U) (|key#0@@78| T@U) (|lo#0@@23| Int) (|hi#0@@23| Int) ) (!  (=> (and (and (and (= (type $ly@@478) LayerTypeType) (= (type |s#0@@149|) (SeqType BoxType))) (= (type |key#0@@78|) (SeqType BoxType))) (and ($Is |s#0@@149| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@78| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@478 |s#0@@149| |key#0@@78| |lo#0@@23| |hi#0@@23|)  (and (and (and (and (<= (LitInt 0) |lo#0@@23|) (< |lo#0@@23| |hi#0@@23|)) (<= |hi#0@@23| (+ (|Seq#Length| |s#0@@149|) 1))) (=> (> |lo#0@@23| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@149| (- |lo#0@@23| 1))) |key#0@@78|))) (=> (<= |hi#0@@23| (|Seq#Length| |s#0@@149|)) (Lexicographic__Byte__Order.__default.lt |key#0@@78| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@149| (- |hi#0@@23| 1)))))))) :qid |totalorderidfyLexicographicByteOrder.482:12| :skolemid |3603| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@478 |s#0@@149| |key#0@@78| |lo#0@@23| |hi#0@@23|)) )))
(assert  (=> true (forall (($ly@@479 T@U) (|s#0@@150| T@U) (|key#0@@79| T@U) (|lo#0@@24| Int) (|hi#0@@24| Int) ) (!  (=> (and (and (and (= (type $ly@@479) LayerTypeType) (= (type |s#0@@150|) (SeqType BoxType))) (= (type |key#0@@79|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@150| |key#0@@79| |lo#0@@24| |hi#0@@24|) (and (and ($Is |s#0@@150| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@79| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) |lo#0@@24|) (< |lo#0@@24| |hi#0@@24|)) (<= |hi#0@@24| (+ (|Seq#Length| |s#0@@150|) 1))) (=> (> |lo#0@@24| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@150| (- |lo#0@@24| 1))) |key#0@@79|))) (=> (<= |hi#0@@24| (|Seq#Length| |s#0@@150|)) (Lexicographic__Byte__Order.__default.lt |key#0@@79| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@150| (- |hi#0@@24| 1))))))))) (and (=> (< (+ |lo#0@@24| 1) |hi#0@@24|) (let ((|mid#0@@5| (Div (+ |lo#0@@24| |hi#0@@24|) (LitInt 2)))) (and (and (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@150| (- |mid#0@@5| 1))) |key#0@@79|) (=> (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@150| (- |mid#0@@5| 1))) |key#0@@79|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@150| |key#0@@79| |mid#0@@5| |hi#0@@24|))) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@150| (- |mid#0@@5| 1))) |key#0@@79|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@150| |key#0@@79| |lo#0@@24| |mid#0@@5|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@479) |s#0@@150| |key#0@@79| |lo#0@@24| |hi#0@@24|) (ite (< (+ |lo#0@@24| 1) |hi#0@@24|) (let ((|mid#0@@6| (Div (+ |lo#0@@24| |hi#0@@24|) (LitInt 2)))) (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@150| (- |mid#0@@6| 1))) |key#0@@79|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@479 |s#0@@150| |key#0@@79| |mid#0@@6| |hi#0@@24|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@479 |s#0@@150| |key#0@@79| |lo#0@@24| |mid#0@@6|))) |lo#0@@24|)))) :qid |totalorderidfyLexicographicByteOrder.482:12| :skolemid |3604| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@479) |s#0@@150| |key#0@@79| |lo#0@@24| |hi#0@@24|)) ))))
(assert  (=> true (forall (($ly@@480 T@U) (|s#0@@151| T@U) (|key#0@@80| T@U) (|lo#0@@25| Int) (|hi#0@@25| Int) ) (!  (=> (and (and (and (= (type $ly@@480) LayerTypeType) (= (type |s#0@@151|) (SeqType BoxType))) (= (type |key#0@@80|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@151| |key#0@@80| (LitInt |lo#0@@25|) (LitInt |hi#0@@25|)) (and (and ($Is |s#0@@151| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@80| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@25|)) (< |lo#0@@25| |hi#0@@25|)) (<= (LitInt |hi#0@@25|) (+ (|Seq#Length| |s#0@@151|) 1))) (=> (> |lo#0@@25| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@151| (LitInt (- |lo#0@@25| 1)))) |key#0@@80|))) (=> (<= (LitInt |hi#0@@25|) (|Seq#Length| |s#0@@151|)) (Lexicographic__Byte__Order.__default.lt |key#0@@80| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@151| (LitInt (- |hi#0@@25| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@25| 1) |hi#0@@25|)))) (let ((|mid#1@@5| (LitInt (Div (+ |lo#0@@25| |hi#0@@25|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@151| (- |mid#1@@5| 1))) |key#0@@80|) (=> (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@151| (- |mid#1@@5| 1))) |key#0@@80|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@151| |key#0@@80| |mid#1@@5| (LitInt |hi#0@@25|)))) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@151| (- |mid#1@@5| 1))) |key#0@@80|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@151| |key#0@@80| (LitInt |lo#0@@25|) |mid#1@@5|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@480) |s#0@@151| |key#0@@80| (LitInt |lo#0@@25|) (LitInt |hi#0@@25|)) (ite (< (+ |lo#0@@25| 1) |hi#0@@25|) (let ((|mid#1@@6| (LitInt (Div (+ |lo#0@@25| |hi#0@@25|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@151| (LitInt (- |mid#1@@6| 1)))) |key#0@@80|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@480) |s#0@@151| |key#0@@80| |mid#1@@6| (LitInt |hi#0@@25|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@480) |s#0@@151| |key#0@@80| (LitInt |lo#0@@25|) |mid#1@@6|))) |lo#0@@25|)))) :qid |totalorderidfyLexicographicByteOrder.482:12| :weight 3 :skolemid |3605| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@480) |s#0@@151| |key#0@@80| (LitInt |lo#0@@25|) (LitInt |hi#0@@25|))) ))))
(assert  (=> true (forall (($ly@@481 T@U) (|s#0@@152| T@U) (|key#0@@81| T@U) (|lo#0@@26| Int) (|hi#0@@26| Int) ) (!  (=> (and (and (and (= (type $ly@@481) LayerTypeType) (= (type |s#0@@152|) (SeqType BoxType))) (= (type |key#0@@81|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@152|) (Lit |key#0@@81|) (LitInt |lo#0@@26|) (LitInt |hi#0@@26|)) (and (and ($Is |s#0@@152| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@81| (TSeq Tclass.NativeTypes.byte))) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@26|)) (< |lo#0@@26| |hi#0@@26|)) (<= (LitInt |hi#0@@26|) (+ (|Seq#Length| (Lit |s#0@@152|)) 1))) (=> (> |lo#0@@26| 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@152|) (LitInt (- |lo#0@@26| 1)))) (Lit |key#0@@81|)))) (=> (<= (LitInt |hi#0@@26|) (|Seq#Length| (Lit |s#0@@152|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@81|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@152|) (LitInt (- |hi#0@@26| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@26| 1) |hi#0@@26|)))) (let ((|mid#2@@5| (LitInt (Div (+ |lo#0@@26| |hi#0@@26|) (LitInt 2))))) (and (and (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@152|) (- |mid#2@@5| 1))) (Lit |key#0@@81|)) (=> (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@152|) (- |mid#2@@5| 1))) (Lit |key#0@@81|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@152|) (Lit |key#0@@81|) |mid#2@@5| (LitInt |hi#0@@26|)))) (=> (not (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@152|) (- |mid#2@@5| 1))) (Lit |key#0@@81|))) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@152|) (Lit |key#0@@81|) (LitInt |lo#0@@26|) |mid#2@@5|))))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@481) (Lit |s#0@@152|) (Lit |key#0@@81|) (LitInt |lo#0@@26|) (LitInt |hi#0@@26|)) (ite (< (+ |lo#0@@26| 1) |hi#0@@26|) (let ((|mid#2@@6| (LitInt (Div (+ |lo#0@@26| |hi#0@@26|) (LitInt 2))))) (ite (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |s#0@@152|) (LitInt (- |mid#2@@6| 1)))) (Lit |key#0@@81|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@481) (Lit |s#0@@152|) (Lit |key#0@@81|) |mid#2@@6| (LitInt |hi#0@@26|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@481) (Lit |s#0@@152|) (Lit |key#0@@81|) (LitInt |lo#0@@26|) |mid#2@@6|))) |lo#0@@26|)))) :qid |totalorderidfyLexicographicByteOrder.482:12| :weight 3 :skolemid |3606| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@481) (Lit |s#0@@152|) (Lit |key#0@@81|) (LitInt |lo#0@@26|) (LitInt |hi#0@@26|))) ))))
(assert (forall (($ly@@482 T@U) (|s#0@@153| T@U) (|key#0@@82| T@U) ) (!  (=> (and (and (= (type $ly@@482) LayerTypeType) (= (type |s#0@@153|) (SeqType BoxType))) (= (type |key#0@@82|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@482) |s#0@@153| |key#0@@82|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@482 |s#0@@153| |key#0@@82|))) :qid |totalorderidfyLexicographicByteOrder.502:22| :skolemid |3607| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@482) |s#0@@153| |key#0@@82|)) )))
(assert (forall (($ly@@483 T@U) (|s#0@@154| T@U) (|key#0@@83| T@U) ) (!  (=> (and (and (= (type $ly@@483) LayerTypeType) (= (type |s#0@@154|) (SeqType BoxType))) (= (type |key#0@@83|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@483 |s#0@@154| |key#0@@83|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $LZ |s#0@@154| |key#0@@83|))) :qid |totalorderidfyLexicographicByteOrder.502:22| :skolemid |3608| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt (AsFuelBottom $ly@@483) |s#0@@154| |key#0@@83|)) )))
(assert  (=> true (forall (($ly@@484 T@U) (|s#0@@155| T@U) (|key#0@@84| T@U) ) (!  (=> (and (and (and (= (type $ly@@484) LayerTypeType) (= (type |s#0@@155|) (SeqType BoxType))) (= (type |key#0@@84|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@155| |key#0@@84|) (and ($Is |s#0@@155| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@84| (TSeq Tclass.NativeTypes.byte))))) (and (and (and (<= (LitInt 0) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@484 |s#0@@155| |key#0@@84|)) (<= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@484 |s#0@@155| |key#0@@84|) (|Seq#Length| |s#0@@155|))) (=> (> (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@484 |s#0@@155| |key#0@@84|) 0) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@155| (- (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@484 |s#0@@155| |key#0@@84|) 1))) |key#0@@84|))) (=> (< (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@484 |s#0@@155| |key#0@@84|) (|Seq#Length| |s#0@@155|)) (Lexicographic__Byte__Order.__default.lt |key#0@@84| ($Unbox (SeqType BoxType) (|Seq#Index| |s#0@@155| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@484 |s#0@@155| |key#0@@84|))))))) :qid |totalorderidfyLexicographicByteOrder.502:22| :skolemid |3609| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@484 |s#0@@155| |key#0@@84|)) ))))
(assert (forall (($ly@@485 T@U) (|s#0@@156| T@U) (|key#0@@85| T@U) ) (!  (=> (and (and (and (= (type $ly@@485) LayerTypeType) (= (type |s#0@@156|) (SeqType BoxType))) (= (type |key#0@@85|) (SeqType BoxType))) (and ($Is |s#0@@156| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@85| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@485 |s#0@@156| |key#0@@85|) true)) :qid |totalorderidfyLexicographicByteOrder.502:22| :skolemid |3610| :pattern ( (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@485 |s#0@@156| |key#0@@85|)) )))
(assert  (=> true (forall (($ly@@486 T@U) (|s#0@@157| T@U) (|key#0@@86| T@U) ) (!  (=> (and (and (and (= (type $ly@@486) LayerTypeType) (= (type |s#0@@157|) (SeqType BoxType))) (= (type |key#0@@86|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@157| |key#0@@86|) (and ($Is |s#0@@157| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@86| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@157| |key#0@@86| (LitInt 0) (+ (|Seq#Length| |s#0@@157|) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@486) |s#0@@157| |key#0@@86|) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) |s#0@@157| |key#0@@86| (LitInt 0) (+ (|Seq#Length| |s#0@@157|) 1))))) :qid |totalorderidfyLexicographicByteOrder.502:22| :skolemid |3611| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@486) |s#0@@157| |key#0@@86|)) ))))
(assert  (=> true (forall (($ly@@487 T@U) (|s#0@@158| T@U) (|key#0@@87| T@U) ) (!  (=> (and (and (and (= (type $ly@@487) LayerTypeType) (= (type |s#0@@158|) (SeqType BoxType))) (= (type |key#0@@87|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (Lit |s#0@@158|) (Lit |key#0@@87|)) (and ($Is |s#0@@158| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@87| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@158|) (Lit |key#0@@87|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@158|)) 1)) (= (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@487) (Lit |s#0@@158|) (Lit |key#0@@87|)) (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) (Lit |s#0@@158|) (Lit |key#0@@87|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@158|)) 1))))) :qid |totalorderidfyLexicographicByteOrder.502:22| :weight 3 :skolemid |3612| :pattern ( (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@487) (Lit |s#0@@158|) (Lit |key#0@@87|))) ))))
(assert  (=> true (forall ((|a#0@@147| T@U) (|b#0@@106| T@U) ) (!  (=> (and (and (= (type |a#0@@147|) (MapType0Type BoxType boolType)) (= (type |b#0@@106|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLte#canCall| |a#0@@147| |b#0@@106|) (and ($Is |a#0@@147| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@106| (TSet (TSeq Tclass.NativeTypes.byte)))))) true) :qid |totalorderidfyLexicographicByteOrder.658:23| :skolemid |3613| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLte |a#0@@147| |b#0@@106|)) ))))
(assert (forall ((|a#0@@148| T@U) (|b#0@@107| T@U) ) (!  (=> (and (and (= (type |a#0@@148|) (MapType0Type BoxType boolType)) (= (type |b#0@@107|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@148| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@107| (TSet (TSeq Tclass.NativeTypes.byte))))) (= (|Lexicographic__Byte__Order.__default.SetAllLte#requires| |a#0@@148| |b#0@@107|) true)) :qid |totalorderidfyLexicographicByteOrder.658:23| :skolemid |3614| :pattern ( (|Lexicographic__Byte__Order.__default.SetAllLte#requires| |a#0@@148| |b#0@@107|)) )))
(assert  (=> true (forall ((|a#0@@149| T@U) (|b#0@@108| T@U) ) (!  (=> (and (and (= (type |a#0@@149|) (MapType0Type BoxType boolType)) (= (type |b#0@@108|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLte#canCall| |a#0@@149| |b#0@@108|) (and ($Is |a#0@@149| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@108| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#0@@6| T@U) (|y#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type |x#0@@6|) (SeqType BoxType)) (= (type |y#0@@7|) (SeqType BoxType))) (and ($Is |x#0@@6| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@7| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select |a#0@@149| ($Box |x#0@@6|)))) (U_2_bool (MapType0Select |b#0@@108| ($Box |y#0@@7|)))) (|Lexicographic__Byte__Order.__default.lte#canCall| |x#0@@6| |y#0@@7|)) :qid |totalorderidfyLexicographicByteOrder.659:12| :skolemid |3616| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#0@@6| |y#0@@7|)) :pattern ( (MapType0Select |b#0@@108| ($Box |y#0@@7|)) (MapType0Select |a#0@@149| ($Box |x#0@@6|))) )) (= (Lexicographic__Byte__Order.__default.SetAllLte |a#0@@149| |b#0@@108|) (forall ((|x#0@@7| T@U) (|y#0@@8| T@U) ) (!  (=> (and (and (and (= (type |x#0@@7|) (SeqType BoxType)) (= (type |y#0@@8|) (SeqType BoxType))) (and ($Is |x#0@@7| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@8| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select |a#0@@149| ($Box |x#0@@7|))) (U_2_bool (MapType0Select |b#0@@108| ($Box |y#0@@8|))))) (Lexicographic__Byte__Order.__default.lte |x#0@@7| |y#0@@8|)) :qid |totalorderidfyLexicographicByteOrder.659:12| :skolemid |3615| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#0@@7| |y#0@@8|)) :pattern ( (MapType0Select |b#0@@108| ($Box |y#0@@8|)) (MapType0Select |a#0@@149| ($Box |x#0@@7|))) ))))) :qid |totalorderidfyLexicographicByteOrder.658:23| :skolemid |3617| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLte |a#0@@149| |b#0@@108|)) ))))
(assert  (=> true (forall ((|a#0@@150| T@U) (|b#0@@109| T@U) ) (!  (=> (and (and (= (type |a#0@@150|) (MapType0Type BoxType boolType)) (= (type |b#0@@109|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLte#canCall| (Lit |a#0@@150|) (Lit |b#0@@109|)) (and ($Is |a#0@@150| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@109| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#1@@3| T@U) (|y#1@@3| T@U) ) (!  (=> (and (and (and (and (= (type |x#1@@3|) (SeqType BoxType)) (= (type |y#1@@3|) (SeqType BoxType))) (and ($Is |x#1@@3| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@3| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select (Lit |a#0@@150|) ($Box |x#1@@3|)))) (U_2_bool (MapType0Select (Lit |b#0@@109|) ($Box |y#1@@3|)))) (|Lexicographic__Byte__Order.__default.lte#canCall| |x#1@@3| |y#1@@3|)) :qid |totalorderidfyLexicographicByteOrder.659:12| :skolemid |3619| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#1@@3| |y#1@@3|)) :pattern ( (MapType0Select |b#0@@109| ($Box |y#1@@3|)) (MapType0Select |a#0@@150| ($Box |x#1@@3|))) )) (= (Lexicographic__Byte__Order.__default.SetAllLte (Lit |a#0@@150|) (Lit |b#0@@109|)) (forall ((|x#1@@4| T@U) (|y#1@@4| T@U) ) (!  (=> (and (and (and (= (type |x#1@@4|) (SeqType BoxType)) (= (type |y#1@@4|) (SeqType BoxType))) (and ($Is |x#1@@4| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@4| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select (Lit |a#0@@150|) ($Box |x#1@@4|))) (U_2_bool (MapType0Select (Lit |b#0@@109|) ($Box |y#1@@4|))))) (Lexicographic__Byte__Order.__default.lte |x#1@@4| |y#1@@4|)) :qid |totalorderidfyLexicographicByteOrder.659:12| :skolemid |3618| :pattern ( (Lexicographic__Byte__Order.__default.lte |x#1@@4| |y#1@@4|)) :pattern ( (MapType0Select |b#0@@109| ($Box |y#1@@4|)) (MapType0Select |a#0@@150| ($Box |x#1@@4|))) ))))) :qid |totalorderidfyLexicographicByteOrder.658:23| :weight 3 :skolemid |3620| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLte (Lit |a#0@@150|) (Lit |b#0@@109|))) ))))
(assert  (=> true (forall ((|a#0@@151| T@U) (|b#0@@110| T@U) ) (!  (=> (and (and (= (type |a#0@@151|) (MapType0Type BoxType boolType)) (= (type |b#0@@110|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLt#canCall| |a#0@@151| |b#0@@110|) (and ($Is |a#0@@151| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@110| (TSet (TSeq Tclass.NativeTypes.byte)))))) true) :qid |totalorderidfyLexicographicByteOrder.662:22| :skolemid |3621| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLt |a#0@@151| |b#0@@110|)) ))))
(assert (forall ((|a#0@@152| T@U) (|b#0@@111| T@U) ) (!  (=> (and (and (= (type |a#0@@152|) (MapType0Type BoxType boolType)) (= (type |b#0@@111|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@152| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@111| (TSet (TSeq Tclass.NativeTypes.byte))))) (= (|Lexicographic__Byte__Order.__default.SetAllLt#requires| |a#0@@152| |b#0@@111|) true)) :qid |totalorderidfyLexicographicByteOrder.662:22| :skolemid |3622| :pattern ( (|Lexicographic__Byte__Order.__default.SetAllLt#requires| |a#0@@152| |b#0@@111|)) )))
(assert  (=> true (forall ((|a#0@@153| T@U) (|b#0@@112| T@U) ) (!  (=> (and (and (= (type |a#0@@153|) (MapType0Type BoxType boolType)) (= (type |b#0@@112|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLt#canCall| |a#0@@153| |b#0@@112|) (and ($Is |a#0@@153| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@112| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#0@@8| T@U) (|y#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type |x#0@@8|) (SeqType BoxType)) (= (type |y#0@@9|) (SeqType BoxType))) (and ($Is |x#0@@8| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@9| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select |a#0@@153| ($Box |x#0@@8|)))) (U_2_bool (MapType0Select |b#0@@112| ($Box |y#0@@9|)))) (|Lexicographic__Byte__Order.__default.lt#canCall| |x#0@@8| |y#0@@9|)) :qid |totalorderidfyLexicographicByteOrder.663:12| :skolemid |3624| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#0@@8| |y#0@@9|)) :pattern ( (MapType0Select |b#0@@112| ($Box |y#0@@9|)) (MapType0Select |a#0@@153| ($Box |x#0@@8|))) )) (= (Lexicographic__Byte__Order.__default.SetAllLt |a#0@@153| |b#0@@112|) (forall ((|x#0@@9| T@U) (|y#0@@10| T@U) ) (!  (=> (and (and (and (= (type |x#0@@9|) (SeqType BoxType)) (= (type |y#0@@10|) (SeqType BoxType))) (and ($Is |x#0@@9| (TSeq Tclass.NativeTypes.byte)) ($Is |y#0@@10| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select |a#0@@153| ($Box |x#0@@9|))) (U_2_bool (MapType0Select |b#0@@112| ($Box |y#0@@10|))))) (Lexicographic__Byte__Order.__default.lt |x#0@@9| |y#0@@10|)) :qid |totalorderidfyLexicographicByteOrder.663:12| :skolemid |3623| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#0@@9| |y#0@@10|)) :pattern ( (MapType0Select |b#0@@112| ($Box |y#0@@10|)) (MapType0Select |a#0@@153| ($Box |x#0@@9|))) ))))) :qid |totalorderidfyLexicographicByteOrder.662:22| :skolemid |3625| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLt |a#0@@153| |b#0@@112|)) ))))
(assert  (=> true (forall ((|a#0@@154| T@U) (|b#0@@113| T@U) ) (!  (=> (and (and (= (type |a#0@@154|) (MapType0Type BoxType boolType)) (= (type |b#0@@113|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SetAllLt#canCall| (Lit |a#0@@154|) (Lit |b#0@@113|)) (and ($Is |a#0@@154| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |b#0@@113| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (forall ((|x#1@@5| T@U) (|y#1@@5| T@U) ) (!  (=> (and (and (and (and (= (type |x#1@@5|) (SeqType BoxType)) (= (type |y#1@@5|) (SeqType BoxType))) (and ($Is |x#1@@5| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@5| (TSeq Tclass.NativeTypes.byte)))) (U_2_bool (MapType0Select (Lit |a#0@@154|) ($Box |x#1@@5|)))) (U_2_bool (MapType0Select (Lit |b#0@@113|) ($Box |y#1@@5|)))) (|Lexicographic__Byte__Order.__default.lt#canCall| |x#1@@5| |y#1@@5|)) :qid |totalorderidfyLexicographicByteOrder.663:12| :skolemid |3627| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#1@@5| |y#1@@5|)) :pattern ( (MapType0Select |b#0@@113| ($Box |y#1@@5|)) (MapType0Select |a#0@@154| ($Box |x#1@@5|))) )) (= (Lexicographic__Byte__Order.__default.SetAllLt (Lit |a#0@@154|) (Lit |b#0@@113|)) (forall ((|x#1@@6| T@U) (|y#1@@6| T@U) ) (!  (=> (and (and (and (= (type |x#1@@6|) (SeqType BoxType)) (= (type |y#1@@6|) (SeqType BoxType))) (and ($Is |x#1@@6| (TSeq Tclass.NativeTypes.byte)) ($Is |y#1@@6| (TSeq Tclass.NativeTypes.byte)))) (and (U_2_bool (MapType0Select (Lit |a#0@@154|) ($Box |x#1@@6|))) (U_2_bool (MapType0Select (Lit |b#0@@113|) ($Box |y#1@@6|))))) (Lexicographic__Byte__Order.__default.lt |x#1@@6| |y#1@@6|)) :qid |totalorderidfyLexicographicByteOrder.663:12| :skolemid |3626| :pattern ( (Lexicographic__Byte__Order.__default.lt |x#1@@6| |y#1@@6|)) :pattern ( (MapType0Select |b#0@@113| ($Box |y#1@@6|)) (MapType0Select |a#0@@154| ($Box |x#1@@6|))) ))))) :qid |totalorderidfyLexicographicByteOrder.662:22| :weight 3 :skolemid |3628| :pattern ( (Lexicographic__Byte__Order.__default.SetAllLt (Lit |a#0@@154|) (Lit |b#0@@113|))) ))))
(assert (forall (($ly@@488 T@U) (|a#0@@155| T@U) ) (!  (=> (and (= (type $ly@@488) LayerTypeType) (= (type |a#0@@155|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@488) |a#0@@155|) (Lexicographic__Byte__Order.__default.NotMinimum $ly@@488 |a#0@@155|))) :qid |totalorderidfyLexicographicByteOrder.674:23| :skolemid |3629| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@488) |a#0@@155|)) )))
(assert (forall (($ly@@489 T@U) (|a#0@@156| T@U) ) (!  (=> (and (= (type $ly@@489) LayerTypeType) (= (type |a#0@@156|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.NotMinimum $ly@@489 |a#0@@156|) (Lexicographic__Byte__Order.__default.NotMinimum $LZ |a#0@@156|))) :qid |totalorderidfyLexicographicByteOrder.674:23| :skolemid |3630| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum (AsFuelBottom $ly@@489) |a#0@@156|)) )))
(assert  (=> true (forall (($ly@@490 T@U) (|a#0@@157| T@U) ) (!  (=> (and (and (= (type $ly@@490) LayerTypeType) (= (type |a#0@@157|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| |a#0@@157|) ($Is |a#0@@157| (TSeq Tclass.NativeTypes.byte)))) true) :qid |totalorderidfyLexicographicByteOrder.674:23| :skolemid |3631| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum $ly@@490 |a#0@@157|)) ))))
(assert (forall (($ly@@491 T@U) (|a#0@@158| T@U) ) (!  (=> (and (and (= (type $ly@@491) LayerTypeType) (= (type |a#0@@158|) (SeqType BoxType))) ($Is |a#0@@158| (TSeq Tclass.NativeTypes.byte))) (= (|Lexicographic__Byte__Order.__default.NotMinimum#requires| $ly@@491 |a#0@@158|) true)) :qid |totalorderidfyLexicographicByteOrder.674:23| :skolemid |3632| :pattern ( (|Lexicographic__Byte__Order.__default.NotMinimum#requires| $ly@@491 |a#0@@158|)) )))
(assert  (=> true (forall (($ly@@492 T@U) (|a#0@@159| T@U) ) (!  (=> (and (and (= (type $ly@@492) LayerTypeType) (= (type |a#0@@159|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| |a#0@@159|) ($Is |a#0@@159| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|b#0@@114| T@U) ) (!  (=> (and (= (type |b#0@@114|) (SeqType BoxType)) ($Is |b#0@@114| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |b#0@@114| |a#0@@159|)) :qid |totalorderidfyLexicographicByteOrder.675:12| :skolemid |3634| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#0@@114| |a#0@@159|)) )) (= (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@492) |a#0@@159|) (exists ((|b#0@@115| T@U) ) (!  (and (= (type |b#0@@115|) (SeqType BoxType)) (and ($Is |b#0@@115| (TSeq Tclass.NativeTypes.byte)) (Lexicographic__Byte__Order.__default.lt |b#0@@115| |a#0@@159|))) :qid |totalorderidfyLexicographicByteOrder.675:12| :skolemid |3633| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#0@@115| |a#0@@159|)) ))))) :qid |totalorderidfyLexicographicByteOrder.674:23| :skolemid |3635| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@492) |a#0@@159|)) ))))
(assert  (=> true (forall (($ly@@493 T@U) (|a#0@@160| T@U) ) (!  (=> (and (and (= (type $ly@@493) LayerTypeType) (= (type |a#0@@160|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.NotMinimum#canCall| (Lit |a#0@@160|)) ($Is |a#0@@160| (TSeq Tclass.NativeTypes.byte)))) (and (forall ((|b#1@@5| T@U) ) (!  (=> (and (= (type |b#1@@5|) (SeqType BoxType)) ($Is |b#1@@5| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |b#1@@5| (Lit |a#0@@160|))) :qid |totalorderidfyLexicographicByteOrder.675:12| :skolemid |3637| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#1@@5| |a#0@@160|)) )) (= (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@493) (Lit |a#0@@160|)) (exists ((|b#1@@6| T@U) ) (!  (and (= (type |b#1@@6|) (SeqType BoxType)) (and ($Is |b#1@@6| (TSeq Tclass.NativeTypes.byte)) (Lexicographic__Byte__Order.__default.lt |b#1@@6| (Lit |a#0@@160|)))) :qid |totalorderidfyLexicographicByteOrder.675:12| :skolemid |3636| :pattern ( (Lexicographic__Byte__Order.__default.lt |b#1@@6| |a#0@@160|)) ))))) :qid |totalorderidfyLexicographicByteOrder.674:23| :weight 3 :skolemid |3638| :pattern ( (Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@493) (Lit |a#0@@160|))) ))))
(assert (forall ((arg0@@614 T@U) (arg1@@310 T@U) (arg2@@211 T@U) (arg3@@152 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.MapPivotedUnion arg0@@614 arg1@@310 arg2@@211 arg3@@152)) (MapType BoxType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.MapPivotedUnion| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion arg0@@614 arg1@@310 arg2@@211 arg3@@152)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value T@U) (|left#0@@3| T@U) (|pivot#0@@3| T@U) (|right#0@@3| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value) TyType) (= (type |left#0@@3|) (MapType BoxType BoxType))) (= (type |pivot#0@@3|) (SeqType BoxType))) (= (type |right#0@@3|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| Lexicographic_Byte_Order._default.MapPivotedUnion$Value |left#0@@3| |pivot#0@@3| |right#0@@3|) (and (and ($Is |left#0@@3| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value)) ($Is |pivot#0@@3| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@3| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value))))) ($Is (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value |left#0@@3| |pivot#0@@3| |right#0@@3|) (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value))) :qid |unknown.0:0| :skolemid |3639| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value |left#0@@3| |pivot#0@@3| |right#0@@3|)) ))))
(assert (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 T@U) (|left#0@@4| T@U) (|pivot#0@@4| T@U) (|right#0@@4| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0) TyType) (= (type |left#0@@4|) (MapType BoxType BoxType))) (= (type |pivot#0@@4|) (SeqType BoxType))) (= (type |right#0@@4|) (MapType BoxType BoxType))) (and (and ($Is |left#0@@4| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0)) ($Is |pivot#0@@4| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@4| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0)))) (= (|Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@4| |pivot#0@@4| |right#0@@4|) true)) :qid |unknown.0:0| :skolemid |3640| :pattern ( (|Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@4| |pivot#0@@4| |right#0@@4|)) )))
(assert  (and (forall ((arg0@@615 T@U) (arg1@@311 T@U) ) (! (= (type (|lambda#186| arg0@@615 arg1@@311)) (MapType0Type BoxType boolType)) :qid |funType:lambda#186| :pattern ( (|lambda#186| arg0@@615 arg1@@311)) )) (forall ((arg0@@616 T@U) (arg1@@312 T@U) ) (! (= (type (|lambda#188| arg0@@616 arg1@@312)) (MapType0Type BoxType boolType)) :qid |funType:lambda#188| :pattern ( (|lambda#188| arg0@@616 arg1@@312)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 T@U) (|left#0@@5| T@U) (|pivot#0@@5| T@U) (|right#0@@5| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1) TyType) (= (type |left#0@@5|) (MapType BoxType BoxType))) (= (type |pivot#0@@5|) (SeqType BoxType))) (= (type |right#0@@5|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| |pivot#0@@5| |right#0@@5|) (and (and ($Is |left#0@@5| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1)) ($Is |pivot#0@@5| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@5| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1))))) (and (and (and (forall ((|k#0@@54| T@U) ) (!  (=> (and (= (type |k#0@@54|) (SeqType BoxType)) ($Is |k#0@@54| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |k#0@@54| |pivot#0@@5|)) :qid |totalorderidfyLexicographicByteOrder.694:57| :skolemid |3641| :pattern ( (Lexicographic__Byte__Order.__default.lt |k#0@@54| |pivot#0@@5|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| (|lambda#186| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|))) (let ((|restricted_left#0@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| (|lambda#186| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|)))) (and (and (forall ((|k#1@@9| T@U) ) (!  (=> (and (= (type |k#1@@9|) (SeqType BoxType)) ($Is |k#1@@9| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lte#canCall| |pivot#0@@5| |k#1@@9|)) :qid |totalorderidfyLexicographicByteOrder.695:59| :skolemid |3642| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@5| |k#1@@9|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@5| (|lambda#188| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|))) (let ((|restricted_right#0@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@5| (|lambda#188| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|)))) (|Maps.__default.MapDisjointUnion#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |restricted_left#0@@1| |restricted_right#0@@1|))))) (= (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| |pivot#0@@5| |right#0@@5|) (let ((|restricted_left#0@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| (|lambda#186| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|)))) (let ((|restricted_right#0@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@5| (|lambda#188| (TSeq Tclass.NativeTypes.byte) |pivot#0@@5|)))) (Maps.__default.MapDisjointUnion (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 StartFuel_Maps._default.MapDisjointUnion |restricted_left#0@@2| |restricted_right#0@@2|)))))) :qid |unknown.0:0| :skolemid |3643| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@5| |pivot#0@@5| |right#0@@5|)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 T@U) (|left#0@@6| T@U) (|pivot#0@@6| T@U) (|right#0@@6| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2) TyType) (= (type |left#0@@6|) (MapType BoxType BoxType))) (= (type |pivot#0@@6|) (SeqType BoxType))) (= (type |right#0@@6|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (Lit |pivot#0@@6|) (Lit |right#0@@6|)) (and (and ($Is |left#0@@6| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2)) ($Is |pivot#0@@6| (TSeq Tclass.NativeTypes.byte))) ($Is |right#0@@6| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2))))) (and (and (and (forall ((|k#2@@7| T@U) ) (!  (=> (and (= (type |k#2@@7|) (SeqType BoxType)) ($Is |k#2@@7| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lt#canCall| |k#2@@7| (Lit |pivot#0@@6|))) :qid |totalorderidfyLexicographicByteOrder.694:57| :skolemid |3644| :pattern ( (Lexicographic__Byte__Order.__default.lt |k#2@@7| |pivot#0@@6|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (|lambda#186| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|)))) (let ((|restricted_left#1@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (|lambda#186| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|))))) (and (and (forall ((|k#3@@0| T@U) ) (!  (=> (and (= (type |k#3@@0|) (SeqType BoxType)) ($Is |k#3@@0| (TSeq Tclass.NativeTypes.byte))) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |pivot#0@@6|) |k#3@@0|)) :qid |totalorderidfyLexicographicByteOrder.695:59| :skolemid |3645| :pattern ( (Lexicographic__Byte__Order.__default.lte |pivot#0@@6| |k#3@@0|)) )) (|Maps.__default.MapIRestrict#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@6|) (|lambda#188| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|)))) (let ((|restricted_right#1@@1| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@6|) (|lambda#188| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|))))) (|Maps.__default.MapDisjointUnion#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 |restricted_left#1@@1| |restricted_right#1@@1|))))) (= (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (Lit |pivot#0@@6|) (Lit |right#0@@6|)) (let ((|restricted_left#1@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (|lambda#186| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|))))) (let ((|restricted_right#1@@2| (Maps.__default.MapIRestrict (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@6|) (|lambda#188| (TSeq Tclass.NativeTypes.byte) (Lit |pivot#0@@6|))))) (Maps.__default.MapDisjointUnion (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 StartFuel_Maps._default.MapDisjointUnion |restricted_left#1@@2| |restricted_right#1@@2|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3646| :pattern ( (Lexicographic__Byte__Order.__default.MapPivotedUnion Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@6|) (Lit |pivot#0@@6|) (Lit |right#0@@6|))) ))))
(assert (forall ((arg0@@617 T@U) (arg1@@313 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.SetSuccessor arg0@@617 arg1@@313)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.SetSuccessor| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor arg0@@617 arg1@@313)) )))
(assert  (=> true (forall ((|m#0@@114| T@U) (|key#0@@88| T@U) ) (!  (=> (and (and (= (type |m#0@@114|) (MapType0Type BoxType boolType)) (= (type |key#0@@88|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| |m#0@@114| |key#0@@88|) (and ($Is |m#0@@114| (TSet (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@88| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@114| |key#0@@88|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte)))) :qid |totalorderidfyLexicographicByteOrder.699:25| :skolemid |3647| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@114| |key#0@@88|)) ))))
(assert (forall (($Heap@@55 T@U) (|m#0@@115| T@U) (|key#0@@89| T@U) ) (!  (=> (and (and (and (= (type $Heap@@55) (MapType0Type refType MapType1Type)) (= (type |m#0@@115|) (MapType0Type BoxType boolType))) (= (type |key#0@@89|) (SeqType BoxType))) (and (and ($IsGoodHeap $Heap@@55) ($Is |m#0@@115| (TSet (TSeq Tclass.NativeTypes.byte)))) ($Is |key#0@@89| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.SetSuccessor#requires| |m#0@@115| |key#0@@89|) true)) :qid |totalorderidfyLexicographicByteOrder.699:12| :skolemid |3648| :pattern ( (|Lexicographic__Byte__Order.__default.SetSuccessor#requires| |m#0@@115| |key#0@@89|) ($IsGoodHeap $Heap@@55)) )))
(assert (forall ((arg0@@618 T@U) (arg1@@314 T@U) ) (! (= (type (|$let#20_next| arg0@@618 arg1@@314)) (SeqType BoxType)) :qid |funType:$let#20_next| :pattern ( (|$let#20_next| arg0@@618 arg1@@314)) )))
(assert (forall ((m@@98 T@U) (key@@0 T@U) ) (!  (=> (and (and (= (type m@@98) (MapType0Type BoxType boolType)) (= (type key@@0) (SeqType BoxType))) (|$let#20$canCall| m@@98 key@@0)) (and ($Is (|$let#20_next| m@@98 key@@0) (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select m@@98 ($Box (|$let#20_next| m@@98 key@@0)))) (Lexicographic__Byte__Order.__default.lt key@@0 (|$let#20_next| m@@98 key@@0))) (forall ((|other#1@@0| T@U) ) (!  (=> (and (= (type |other#1@@0|) (SeqType BoxType)) ($Is |other#1@@0| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select m@@98 ($Box |other#1@@0|))) (not (|Seq#Equal| |other#1@@0| (|$let#20_next| m@@98 key@@0)))) (Lexicographic__Byte__Order.__default.lt key@@0 |other#1@@0|)) (Lexicographic__Byte__Order.__default.lt (|$let#20_next| m@@98 key@@0) |other#1@@0|))) :qid |totalorderidfyLexicographicByteOrder.704:18| :skolemid |3651| :pattern ( (Lexicographic__Byte__Order.__default.lt (|$let#20_next| m@@98 key@@0) |other#1@@0|)) :pattern ( (Lexicographic__Byte__Order.__default.lt key@@0 |other#1@@0|)) :pattern ( (MapType0Select m@@98 ($Box |other#1@@0|))) ))))) :qid |totalorderidfyLexicographicByteOrder.701:8| :skolemid |3652| :pattern ( (|$let#20_next| m@@98 key@@0)) )))
(assert  (=> true (forall (($Heap@@56 T@U) (|m#0@@116| T@U) (|key#0@@90| T@U) ) (!  (=> (and (and (and (= (type $Heap@@56) (MapType0Type refType MapType1Type)) (= (type |m#0@@116|) (MapType0Type BoxType boolType))) (= (type |key#0@@90|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| |m#0@@116| |key#0@@90|) (and (and ($IsGoodHeap $Heap@@56) ($Is |m#0@@116| (TSet (TSeq Tclass.NativeTypes.byte)))) ($Is |key#0@@90| (TSeq Tclass.NativeTypes.byte))))) (and (and (forall ((|next#0@@2| T@U) ) (!  (=> (and (and (= (type |next#0@@2|) (SeqType BoxType)) ($Is |next#0@@2| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select |m#0@@116| ($Box |next#0@@2|)))) (and (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@90| |next#0@@2|) (=> (Lexicographic__Byte__Order.__default.lt |key#0@@90| |next#0@@2|) (forall ((|other#0@@2| T@U) ) (!  (=> (and (and (and (= (type |other#0@@2|) (SeqType BoxType)) ($Is |other#0@@2| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select |m#0@@116| ($Box |other#0@@2|)))) (not (|Seq#Equal| |other#0@@2| |next#0@@2|))) (and (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@90| |other#0@@2|) (=> (Lexicographic__Byte__Order.__default.lt |key#0@@90| |other#0@@2|) (|Lexicographic__Byte__Order.__default.lt#canCall| |next#0@@2| |other#0@@2|)))) :qid |totalorderidfyLexicographicByteOrder.704:18| :skolemid |3653| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#0@@2| |other#0@@2|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@90| |other#0@@2|)) :pattern ( (MapType0Select |m#0@@116| ($Box |other#0@@2|))) ))))) :qid |totalorderidfyLexicographicByteOrder.701:8| :skolemid |3654| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@90| |next#0@@2|)) :pattern ( (MapType0Select |m#0@@116| ($Box |next#0@@2|))) )) (=> (exists ((|next#0@@3| T@U) ) (!  (and (= (type |next#0@@3|) (SeqType BoxType)) (and ($Is |next#0@@3| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select |m#0@@116| ($Box |next#0@@3|))) (Lexicographic__Byte__Order.__default.lt |key#0@@90| |next#0@@3|)) (forall ((|other#0@@3| T@U) ) (!  (=> (and (= (type |other#0@@3|) (SeqType BoxType)) ($Is |other#0@@3| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select |m#0@@116| ($Box |other#0@@3|))) (not (|Seq#Equal| |other#0@@3| |next#0@@3|))) (Lexicographic__Byte__Order.__default.lt |key#0@@90| |other#0@@3|)) (Lexicographic__Byte__Order.__default.lt |next#0@@3| |other#0@@3|))) :qid |totalorderidfyLexicographicByteOrder.704:18| :skolemid |3655| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#0@@3| |other#0@@3|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@90| |other#0@@3|)) :pattern ( (MapType0Select |m#0@@116| ($Box |other#0@@3|))) ))))) :qid |totalorderidfyLexicographicByteOrder.701:8| :skolemid |3656| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@90| |next#0@@3|)) :pattern ( (MapType0Select |m#0@@116| ($Box |next#0@@3|))) )) (|$let#20$canCall| |m#0@@116| |key#0@@90|))) (= (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@116| |key#0@@90|) (ite (exists ((|next#0@@4| T@U) ) (!  (and (= (type |next#0@@4|) (SeqType BoxType)) (and ($Is |next#0@@4| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select |m#0@@116| ($Box |next#0@@4|))) (Lexicographic__Byte__Order.__default.lt |key#0@@90| |next#0@@4|)) (forall ((|other#0@@4| T@U) ) (!  (=> (and (= (type |other#0@@4|) (SeqType BoxType)) ($Is |other#0@@4| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select |m#0@@116| ($Box |other#0@@4|))) (not (|Seq#Equal| |other#0@@4| |next#0@@4|))) (Lexicographic__Byte__Order.__default.lt |key#0@@90| |other#0@@4|)) (Lexicographic__Byte__Order.__default.lt |next#0@@4| |other#0@@4|))) :qid |totalorderidfyLexicographicByteOrder.704:18| :skolemid |3649| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#0@@4| |other#0@@4|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@90| |other#0@@4|)) :pattern ( (MapType0Select |m#0@@116| ($Box |other#0@@4|))) ))))) :qid |totalorderidfyLexicographicByteOrder.701:8| :skolemid |3650| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@90| |next#0@@4|)) :pattern ( (MapType0Select |m#0@@116| ($Box |next#0@@4|))) )) (let ((|next#1@@0| (|$let#20_next| |m#0@@116| |key#0@@90|))) (|#Options.Option.Some| ($Box |next#1@@0|))) |#Options.Option.None|)))) :qid |totalorderidfyLexicographicByteOrder.699:12| :skolemid |3657| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@116| |key#0@@90|) ($IsGoodHeap $Heap@@56)) ))))
(assert  (=> true (forall (($Heap@@57 T@U) (|m#0@@117| T@U) (|key#0@@91| T@U) ) (!  (=> (and (and (and (= (type $Heap@@57) (MapType0Type refType MapType1Type)) (= (type |m#0@@117|) (MapType0Type BoxType boolType))) (= (type |key#0@@91|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (Lit |m#0@@117|) (Lit |key#0@@91|)) (and (and ($IsGoodHeap $Heap@@57) ($Is |m#0@@117| (TSet (TSeq Tclass.NativeTypes.byte)))) ($Is |key#0@@91| (TSeq Tclass.NativeTypes.byte))))) (and (and (forall ((|next#2@@2| T@U) ) (!  (=> (and (and (= (type |next#2@@2|) (SeqType BoxType)) ($Is |next#2@@2| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (Lit |m#0@@117|) ($Box |next#2@@2|)))) (and (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@91|) |next#2@@2|) (=> (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@91|) |next#2@@2|) (forall ((|other#2@@2| T@U) ) (!  (=> (and (and (and (= (type |other#2@@2|) (SeqType BoxType)) ($Is |other#2@@2| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (Lit |m#0@@117|) ($Box |other#2@@2|)))) (not (|Seq#Equal| |other#2@@2| |next#2@@2|))) (and (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@91|) |other#2@@2|) (=> (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@91|) |other#2@@2|) (|Lexicographic__Byte__Order.__default.lt#canCall| |next#2@@2| |other#2@@2|)))) :qid |totalorderidfyLexicographicByteOrder.704:18| :skolemid |3660| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#2@@2| |other#2@@2|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@91| |other#2@@2|)) :pattern ( (MapType0Select |m#0@@117| ($Box |other#2@@2|))) ))))) :qid |totalorderidfyLexicographicByteOrder.701:8| :skolemid |3661| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@91| |next#2@@2|)) :pattern ( (MapType0Select |m#0@@117| ($Box |next#2@@2|))) )) (=> (exists ((|next#2@@3| T@U) ) (!  (and (= (type |next#2@@3|) (SeqType BoxType)) (and ($Is |next#2@@3| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@117|) ($Box |next#2@@3|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@91|) |next#2@@3|)) (forall ((|other#2@@3| T@U) ) (!  (=> (and (= (type |other#2@@3|) (SeqType BoxType)) ($Is |other#2@@3| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@117|) ($Box |other#2@@3|))) (not (|Seq#Equal| |other#2@@3| |next#2@@3|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@91|) |other#2@@3|)) (Lexicographic__Byte__Order.__default.lt |next#2@@3| |other#2@@3|))) :qid |totalorderidfyLexicographicByteOrder.704:18| :skolemid |3662| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#2@@3| |other#2@@3|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@91| |other#2@@3|)) :pattern ( (MapType0Select |m#0@@117| ($Box |other#2@@3|))) ))))) :qid |totalorderidfyLexicographicByteOrder.701:8| :skolemid |3663| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@91| |next#2@@3|)) :pattern ( (MapType0Select |m#0@@117| ($Box |next#2@@3|))) )) (|$let#20$canCall| (Lit |m#0@@117|) (Lit |key#0@@91|)))) (= (Lexicographic__Byte__Order.__default.SetSuccessor (Lit |m#0@@117|) (Lit |key#0@@91|)) (ite (exists ((|next#2@@4| T@U) ) (!  (and (= (type |next#2@@4|) (SeqType BoxType)) (and ($Is |next#2@@4| (TSeq Tclass.NativeTypes.byte)) (and (and (U_2_bool (MapType0Select (Lit |m#0@@117|) ($Box |next#2@@4|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@91|) |next#2@@4|)) (forall ((|other#2@@4| T@U) ) (!  (=> (and (= (type |other#2@@4|) (SeqType BoxType)) ($Is |other#2@@4| (TSeq Tclass.NativeTypes.byte))) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@117|) ($Box |other#2@@4|))) (not (|Seq#Equal| |other#2@@4| |next#2@@4|))) (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@91|) |other#2@@4|)) (Lexicographic__Byte__Order.__default.lt |next#2@@4| |other#2@@4|))) :qid |totalorderidfyLexicographicByteOrder.704:18| :skolemid |3658| :pattern ( (Lexicographic__Byte__Order.__default.lt |next#2@@4| |other#2@@4|)) :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@91| |other#2@@4|)) :pattern ( (MapType0Select |m#0@@117| ($Box |other#2@@4|))) ))))) :qid |totalorderidfyLexicographicByteOrder.701:8| :skolemid |3659| :pattern ( (Lexicographic__Byte__Order.__default.lt |key#0@@91| |next#2@@4|)) :pattern ( (MapType0Select |m#0@@117| ($Box |next#2@@4|))) )) (let ((|next#3@@0| (|$let#20_next| (Lit |m#0@@117|) (Lit |key#0@@91|)))) (|#Options.Option.Some| ($Box |next#3@@0|))) |#Options.Option.None|)))) :qid |totalorderidfyLexicographicByteOrder.699:12| :weight 3 :skolemid |3664| :pattern ( (Lexicographic__Byte__Order.__default.SetSuccessor (Lit |m#0@@117|) (Lit |key#0@@91|)) ($IsGoodHeap $Heap@@57)) ))))
(assert (forall ((arg0@@619 T@U) (arg1@@315 T@U) (arg2@@212 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.MapSuccessor arg0@@619 arg1@@315 arg2@@212)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.MapSuccessor| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor arg0@@619 arg1@@315 arg2@@212)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V T@U) (|m#0@@118| T@U) (|key#0@@92| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V) TyType) (= (type |m#0@@118|) (MapType BoxType BoxType))) (= (type |key#0@@92|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapSuccessor#canCall| Lexicographic_Byte_Order._default.MapSuccessor$V |m#0@@118| |key#0@@92|) (and ($Is |m#0@@118| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V)) ($Is |key#0@@92| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V |m#0@@118| |key#0@@92|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte)))) :qid |unknown.0:0| :skolemid |3665| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V |m#0@@118| |key#0@@92|)) ))))
(assert (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V@@0 T@U) (|m#0@@119| T@U) (|key#0@@93| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V@@0) TyType) (= (type |m#0@@119|) (MapType BoxType BoxType))) (= (type |key#0@@93|) (SeqType BoxType))) (and ($Is |m#0@@119| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V@@0)) ($Is |key#0@@93| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.MapSuccessor#requires| Lexicographic_Byte_Order._default.MapSuccessor$V@@0 |m#0@@119| |key#0@@93|) true)) :qid |unknown.0:0| :skolemid |3666| :pattern ( (|Lexicographic__Byte__Order.__default.MapSuccessor#requires| Lexicographic_Byte_Order._default.MapSuccessor$V@@0 |m#0@@119| |key#0@@93|)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V@@1 T@U) (|m#0@@120| T@U) (|key#0@@94| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V@@1) TyType) (= (type |m#0@@120|) (MapType BoxType BoxType))) (= (type |key#0@@94|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapSuccessor#canCall| Lexicographic_Byte_Order._default.MapSuccessor$V@@1 |m#0@@120| |key#0@@94|) (and ($Is |m#0@@120| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V@@1)) ($Is |key#0@@94| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (|Map#Domain| |m#0@@120|) |key#0@@94|) (= (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@1 |m#0@@120| |key#0@@94|) (Lexicographic__Byte__Order.__default.SetSuccessor (|Map#Domain| |m#0@@120|) |key#0@@94|)))) :qid |unknown.0:0| :skolemid |3667| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@1 |m#0@@120| |key#0@@94|)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.MapSuccessor$V@@2 T@U) (|m#0@@121| T@U) (|key#0@@95| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.MapSuccessor$V@@2) TyType) (= (type |m#0@@121|) (MapType BoxType BoxType))) (= (type |key#0@@95|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.MapSuccessor#canCall| Lexicographic_Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@121|) (Lit |key#0@@95|)) (and ($Is |m#0@@121| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.MapSuccessor$V@@2)) ($Is |key#0@@95| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (Lit (|Map#Domain| (Lit |m#0@@121|))) (Lit |key#0@@95|)) (= (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@121|) (Lit |key#0@@95|)) (Lit (Lexicographic__Byte__Order.__default.SetSuccessor (Lit (|Map#Domain| (Lit |m#0@@121|))) (Lit |key#0@@95|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3668| :pattern ( (Lexicographic__Byte__Order.__default.MapSuccessor Lexicographic_Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@121|) (Lit |key#0@@95|))) ))))
(assert (forall ((arg0@@620 T@U) (arg1@@316 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.SeqSuccessor arg0@@620 arg1@@316)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.SeqSuccessor| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor arg0@@620 arg1@@316)) )))
(assert  (=> true (forall ((|m#0@@122| T@U) (|key#0@@96| T@U) ) (!  (=> (and (and (= (type |m#0@@122|) (SeqType BoxType)) (= (type |key#0@@96|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| |m#0@@122| |key#0@@96|) (and ($Is |m#0@@122| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@96| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@122| |key#0@@96|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte)))) :qid |totalorderidfyLexicographicByteOrder.715:25| :skolemid |3669| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@122| |key#0@@96|)) ))))
(assert (forall ((|m#0@@123| T@U) (|key#0@@97| T@U) ) (!  (=> (and (and (= (type |m#0@@123|) (SeqType BoxType)) (= (type |key#0@@97|) (SeqType BoxType))) (and ($Is |m#0@@123| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@97| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.SeqSuccessor#requires| |m#0@@123| |key#0@@97|) true)) :qid |totalorderidfyLexicographicByteOrder.715:25| :skolemid |3670| :pattern ( (|Lexicographic__Byte__Order.__default.SeqSuccessor#requires| |m#0@@123| |key#0@@97|)) )))
(assert  (=> true (forall ((|m#0@@124| T@U) (|key#0@@98| T@U) ) (!  (=> (and (and (= (type |m#0@@124|) (SeqType BoxType)) (= (type |key#0@@98|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| |m#0@@124| |key#0@@98|) (and ($Is |m#0@@124| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@98| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (|lambda#2| (TSeq Tclass.NativeTypes.byte) |m#0@@124|) |key#0@@98|) (= (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@124| |key#0@@98|) (Lexicographic__Byte__Order.__default.SetSuccessor (|lambda#2| (TSeq Tclass.NativeTypes.byte) |m#0@@124|) |key#0@@98|)))) :qid |totalorderidfyLexicographicByteOrder.715:25| :skolemid |3671| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@124| |key#0@@98|)) ))))
(assert  (=> true (forall ((|m#0@@125| T@U) (|key#0@@99| T@U) ) (!  (=> (and (and (= (type |m#0@@125|) (SeqType BoxType)) (= (type |key#0@@99|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| (Lit |m#0@@125|) (Lit |key#0@@99|)) (and ($Is |m#0@@125| (TSeq (TSeq Tclass.NativeTypes.byte))) ($Is |key#0@@99| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (|lambda#2| (TSeq Tclass.NativeTypes.byte) |m#0@@125|) (Lit |key#0@@99|)) (= (Lexicographic__Byte__Order.__default.SeqSuccessor (Lit |m#0@@125|) (Lit |key#0@@99|)) (Lexicographic__Byte__Order.__default.SetSuccessor (|lambda#2| (TSeq Tclass.NativeTypes.byte) |m#0@@125|) (Lit |key#0@@99|))))) :qid |totalorderidfyLexicographicByteOrder.715:25| :weight 3 :skolemid |3672| :pattern ( (Lexicographic__Byte__Order.__default.SeqSuccessor (Lit |m#0@@125|) (Lit |key#0@@99|))) ))))
(assert (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V T@U) ($ly@@494 T@U) (|s#0@@159| T@U) (|m#0@@126| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V) TyType) (= (type $ly@@494) LayerTypeType)) (= (type |s#0@@159|) (SeqType BoxType))) (= (type |m#0@@126|) (MapType BoxType BoxType))) (= (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V ($LS $ly@@494) |s#0@@159| |m#0@@126|) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V $ly@@494 |s#0@@159| |m#0@@126|))) :qid |unknown.0:0| :skolemid |3673| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V ($LS $ly@@494) |s#0@@159| |m#0@@126|)) )))
(assert (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 T@U) ($ly@@495 T@U) (|s#0@@160| T@U) (|m#0@@127| T@U) ) (!  (=> (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0) TyType) (= (type $ly@@495) LayerTypeType)) (= (type |s#0@@160|) (SeqType BoxType))) (= (type |m#0@@127|) (MapType BoxType BoxType))) (= (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 $ly@@495 |s#0@@160| |m#0@@127|) (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@160| |m#0@@127|))) :qid |unknown.0:0| :skolemid |3674| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 (AsFuelBottom $ly@@495) |s#0@@160| |m#0@@127|)) )))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1 T@U) ($ly@@496 T@U) (|s#0@@161| T@U) (|m#0@@128| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1) TyType) (= (type $ly@@496) LayerTypeType)) (= (type |s#0@@161|) (SeqType BoxType))) (= (type |m#0@@128|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1 |s#0@@161| |m#0@@128|) (and ($Is |s#0@@161| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1))) ($Is |m#0@@128| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1))))) true) :qid |unknown.0:0| :skolemid |3675| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1 $ly@@496 |s#0@@161| |m#0@@128|)) ))))
(assert (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 T@U) ($ly@@497 T@U) (|s#0@@162| T@U) (|m#0@@129| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2) TyType) (= (type $ly@@497) LayerTypeType)) (= (type |s#0@@162|) (SeqType BoxType))) (= (type |m#0@@129|) (MapType BoxType BoxType))) (and ($Is |s#0@@162| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2))) ($Is |m#0@@129| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2)))) (= (|Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 $ly@@497 |s#0@@162| |m#0@@129|) true)) :qid |unknown.0:0| :skolemid |3676| :pattern ( (|Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 $ly@@497 |s#0@@162| |m#0@@129|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted) LayerTypeType))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 T@U) ($ly@@498 T@U) (|s#0@@163| T@U) (|m#0@@130| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3) TyType) (= (type $ly@@498) LayerTypeType)) (= (type |s#0@@163|) (SeqType BoxType))) (= (type |m#0@@130|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@163| |m#0@@130|) (and ($Is |s#0@@163| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3))) ($Is |m#0@@130| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3))))) (and (and (and (and (|Sequences.__default.Unzip#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@163|) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@163|))) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@163|))))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@163|)))) (and (forall ((|i#0@@107| Int) ) (!  (and (=> (<= (LitInt 0) |i#0@@107|) (=> (< |i#0@@107| (|Seq#Length| |s#0@@163|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@163| |i#0@@107|))))) (=> (=> (and (<= (LitInt 0) |i#0@@107|) (< |i#0@@107| (|Seq#Length| |s#0@@163|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@130|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@163| |i#0@@107|)))))) (=> (<= (LitInt 0) |i#0@@107|) (=> (< |i#0@@107| (|Seq#Length| |s#0@@163|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@163| |i#0@@107|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@163| |i#0@@107|)))))))) :qid |totalorderidfyLexicographicByteOrder.723:16| :skolemid |3680| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@163| |i#0@@107|))) )) (=> (forall ((|i#0@@108| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@108|) (< |i#0@@108| (|Seq#Length| |s#0@@163|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@130|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@163| |i#0@@108|)))))) (=> (and (<= (LitInt 0) |i#0@@108|) (< |i#0@@108| (|Seq#Length| |s#0@@163|))) (= (MapType0Select (|Map#Elements| |m#0@@130|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@163| |i#0@@108|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@163| |i#0@@108|))))))) :qid |totalorderidfyLexicographicByteOrder.723:16| :skolemid |3683| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@163| |i#0@@108|))) )) (forall ((|key#0@@100| T@U) ) (!  (=> (and (and (= (type |key#0@@100|) (SeqType BoxType)) ($Is |key#0@@100| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@130|) ($Box |key#0@@100|)))) (forall ((|i#1@@34| Int) ) (!  (=> (<= (LitInt 0) |i#1@@34|) (=> (< |i#1@@34| (|Seq#Length| |s#0@@163|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@163| |i#1@@34|))) (=> (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@163| |i#1@@34|)))) |key#0@@100|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@163| |i#1@@34|))))))) :qid |totalorderidfyLexicographicByteOrder.724:44| :skolemid |3681| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@163| |i#1@@34|))) ))) :qid |totalorderidfyLexicographicByteOrder.724:16| :skolemid |3682| :pattern ( (MapType0Select (|Map#Elements| |m#0@@130|) ($Box |key#0@@100|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@130|) ($Box |key#0@@100|))) )))))) (= (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@498) |s#0@@163| |m#0@@130|)  (and (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@163|)))) (forall ((|i#0@@109| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@109|) (< |i#0@@109| (|Seq#Length| |s#0@@163|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@130|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@163| |i#0@@109|)))))) (=> (and (<= (LitInt 0) |i#0@@109|) (< |i#0@@109| (|Seq#Length| |s#0@@163|))) (= (MapType0Select (|Map#Elements| |m#0@@130|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@163| |i#0@@109|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@163| |i#0@@109|))))))) :qid |totalorderidfyLexicographicByteOrder.723:16| :skolemid |3677| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@163| |i#0@@109|))) ))) (forall ((|key#0@@101| T@U) ) (!  (=> (and (and (= (type |key#0@@101|) (SeqType BoxType)) ($Is |key#0@@101| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@130|) ($Box |key#0@@101|)))) (exists ((|i#1@@35| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1@@35|) (< |i#1@@35| (|Seq#Length| |s#0@@163|))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@163| |i#1@@35|)))) |key#0@@101|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@163| |i#1@@35|))) (MapType0Select (|Map#Elements| |m#0@@130|) ($Box |key#0@@101|)))) :qid |totalorderidfyLexicographicByteOrder.724:44| :skolemid |3678| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@163| |i#1@@35|))) ))) :qid |totalorderidfyLexicographicByteOrder.724:16| :skolemid |3679| :pattern ( (MapType0Select (|Map#Elements| |m#0@@130|) ($Box |key#0@@101|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@130|) ($Box |key#0@@101|))) )))))) :qid |unknown.0:0| :skolemid |3684| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@498) |s#0@@163| |m#0@@130|)) ))))
(assert  (=> true (forall ((Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 T@U) ($ly@@499 T@U) (|s#0@@164| T@U) (|m#0@@131| T@U) ) (!  (=> (and (and (and (and (= (type Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4) TyType) (= (type $ly@@499) LayerTypeType)) (= (type |s#0@@164|) (SeqType BoxType))) (= (type |m#0@@131|) (MapType BoxType BoxType))) (or (|Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@164|) (Lit |m#0@@131|)) (and ($Is |s#0@@164| (TSeq (Tclass._System.Tuple2 (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4))) ($Is |m#0@@131| (TMap (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4))))) (and (and (and (and (|Sequences.__default.Unzip#canCall| (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@164|)) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@164|)))) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@164|)))))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@164|))))) (and (forall ((|i#2@@12| Int) ) (!  (and (=> (<= (LitInt 0) |i#2@@12|) (=> (< |i#2@@12| (|Seq#Length| (Lit |s#0@@164|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@164|) |i#2@@12|))))) (=> (=> (and (<= (LitInt 0) |i#2@@12|) (< |i#2@@12| (|Seq#Length| (Lit |s#0@@164|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@131|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@164|) |i#2@@12|)))))) (=> (<= (LitInt 0) |i#2@@12|) (=> (< |i#2@@12| (|Seq#Length| (Lit |s#0@@164|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@164|) |i#2@@12|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@164|) |i#2@@12|)))))))) :qid |totalorderidfyLexicographicByteOrder.723:16| :skolemid |3688| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@164| |i#2@@12|))) )) (=> (forall ((|i#2@@13| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@13|) (< |i#2@@13| (|Seq#Length| (Lit |s#0@@164|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@131|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@164|) |i#2@@13|)))))) (=> (and (<= (LitInt 0) |i#2@@13|) (< |i#2@@13| (|Seq#Length| (Lit |s#0@@164|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@131|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@164|) |i#2@@13|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@164|) |i#2@@13|))))))) :qid |totalorderidfyLexicographicByteOrder.723:16| :skolemid |3691| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@164| |i#2@@13|))) )) (forall ((|key#1@@7| T@U) ) (!  (=> (and (and (= (type |key#1@@7|) (SeqType BoxType)) ($Is |key#1@@7| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@131|) ($Box |key#1@@7|)))) (forall ((|i#3@@8| Int) ) (!  (=> (<= (LitInt 0) |i#3@@8|) (=> (< |i#3@@8| (|Seq#Length| (Lit |s#0@@164|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@164|) |i#3@@8|))) (=> (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@164|) |i#3@@8|)))) |key#1@@7|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@164|) |i#3@@8|))))))) :qid |totalorderidfyLexicographicByteOrder.724:44| :skolemid |3689| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@164| |i#3@@8|))) ))) :qid |totalorderidfyLexicographicByteOrder.724:16| :skolemid |3690| :pattern ( (MapType0Select (|Map#Elements| |m#0@@131|) ($Box |key#1@@7|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@131|) ($Box |key#1@@7|))) )))))) (= (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@499) (Lit |s#0@@164|) (Lit |m#0@@131|))  (and (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip (TSeq Tclass.NativeTypes.byte) Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@164|))))) (forall ((|i#2@@14| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@14|) (< |i#2@@14| (|Seq#Length| (Lit |s#0@@164|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@131|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@164|) |i#2@@14|)))))) (=> (and (<= (LitInt 0) |i#2@@14|) (< |i#2@@14| (|Seq#Length| (Lit |s#0@@164|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@131|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@164|) |i#2@@14|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@164|) |i#2@@14|))))))) :qid |totalorderidfyLexicographicByteOrder.723:16| :skolemid |3685| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@164| |i#2@@14|))) ))) (forall ((|key#1@@8| T@U) ) (!  (=> (and (and (= (type |key#1@@8|) (SeqType BoxType)) ($Is |key#1@@8| (TSeq Tclass.NativeTypes.byte))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@131|) ($Box |key#1@@8|)))) (exists ((|i#3@@9| Int) ) (!  (and (and (and (<= (LitInt 0) |i#3@@9|) (< |i#3@@9| (|Seq#Length| (Lit |s#0@@164|)))) (|Seq#Equal| ($Unbox (SeqType BoxType) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@164|) |i#3@@9|)))) |key#1@@8|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@164|) |i#3@@9|))) (MapType0Select (|Map#Elements| (Lit |m#0@@131|)) ($Box |key#1@@8|)))) :qid |totalorderidfyLexicographicByteOrder.724:44| :skolemid |3686| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@164| |i#3@@9|))) ))) :qid |totalorderidfyLexicographicByteOrder.724:16| :skolemid |3687| :pattern ( (MapType0Select (|Map#Elements| |m#0@@131|) ($Box |key#1@@8|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@131|) ($Box |key#1@@8|))) )))))) :qid |unknown.0:0| :weight 3 :skolemid |3692| :pattern ( (Lexicographic__Byte__Order.__default.SortedSeqForMap Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@499) (Lit |s#0@@164|) (Lit |m#0@@131|))) ))))
(assert (forall ((arg0@@621 T@U) (arg1@@317 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.minimum arg0@@621 arg1@@317)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.minimum| :pattern ( (Lexicographic__Byte__Order.__default.minimum arg0@@621 arg1@@317)) )))
(assert (forall (($ly@@500 T@U) (|s#0@@165| T@U) ) (!  (=> (and (= (type $ly@@500) LayerTypeType) (= (type |s#0@@165|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@500) |s#0@@165|) (Lexicographic__Byte__Order.__default.minimum $ly@@500 |s#0@@165|))) :qid |totalorderidfyLexicographicByteOrder.727:22| :skolemid |3693| :pattern ( (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@500) |s#0@@165|)) )))
(assert (forall (($ly@@501 T@U) (|s#0@@166| T@U) ) (!  (=> (and (= (type $ly@@501) LayerTypeType) (= (type |s#0@@166|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimum $ly@@501 |s#0@@166|) (Lexicographic__Byte__Order.__default.minimum $LZ |s#0@@166|))) :qid |totalorderidfyLexicographicByteOrder.727:22| :skolemid |3694| :pattern ( (Lexicographic__Byte__Order.__default.minimum (AsFuelBottom $ly@@501) |s#0@@166|)) )))
(assert  (=> true (forall (($ly@@502 T@U) (|s#0@@167| T@U) ) (!  (=> (and (and (= (type $ly@@502) LayerTypeType) (= (type |s#0@@167|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimum#canCall| |s#0@@167|) (and ($Is |s#0@@167| (TSet (TSeq Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@167|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@167| ($Box (Lexicographic__Byte__Order.__default.minimum $ly@@502 |s#0@@167|)))) (forall ((|y#0@@11| T@U) ) (!  (=> (= (type |y#0@@11|) (SeqType BoxType)) (=> (and ($Is |y#0@@11| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@167| ($Box |y#0@@11|)))) (Lexicographic__Byte__Order.__default.lte (Lexicographic__Byte__Order.__default.minimum $ly@@502 |s#0@@167|) |y#0@@11|))) :qid |totalorderidfyLexicographicByteOrder.730:18| :skolemid |3695| :pattern ( (Lexicographic__Byte__Order.__default.lte (Lexicographic__Byte__Order.__default.minimum $ly@@502 |s#0@@167|) |y#0@@11|)) :pattern ( (MapType0Select |s#0@@167| ($Box |y#0@@11|))) ))) ($Is (Lexicographic__Byte__Order.__default.minimum $ly@@502 |s#0@@167|) (TSeq Tclass.NativeTypes.byte)))) :qid |totalorderidfyLexicographicByteOrder.727:22| :skolemid |3696| :pattern ( (Lexicographic__Byte__Order.__default.minimum $ly@@502 |s#0@@167|)) ))))
(assert (forall (($ly@@503 T@U) ($Heap@@58 T@U) (|s#0@@168| T@U) ) (!  (=> (and (and (and (= (type $ly@@503) LayerTypeType) (= (type $Heap@@58) (MapType0Type refType MapType1Type))) (= (type |s#0@@168|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@58) ($Is |s#0@@168| (TSet (TSeq Tclass.NativeTypes.byte))))) (= (|Lexicographic__Byte__Order.__default.minimum#requires| $ly@@503 |s#0@@168|) (>= (|Set#Card| |s#0@@168|) (LitInt 1)))) :qid |totalorderidfyLexicographicByteOrder.727:22| :skolemid |3697| :pattern ( (|Lexicographic__Byte__Order.__default.minimum#requires| $ly@@503 |s#0@@168|) ($IsGoodHeap $Heap@@58)) )))
(assert (forall ((arg0@@622 T@U) ) (! (= (type (|$let#23_a| arg0@@622)) (SeqType BoxType)) :qid |funType:$let#23_a| :pattern ( (|$let#23_a| arg0@@622)) )))
(assert (forall ((s@@54 T@U) ) (!  (=> (and (= (type s@@54) (MapType0Type BoxType boolType)) (|$let#23$canCall| s@@54)) (and ($Is (|$let#23_a| s@@54) (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select s@@54 ($Box (|$let#23_a| s@@54)))))) :qid |totalorderidfyLexicographicByteOrder.734:5| :skolemid |3698| :pattern ( (|$let#23_a| s@@54)) )))
(assert  (=> true (forall (($ly@@504 T@U) ($Heap@@59 T@U) (|s#0@@169| T@U) ) (!  (=> (and (and (and (= (type $ly@@504) LayerTypeType) (= (type $Heap@@59) (MapType0Type refType MapType1Type))) (= (type |s#0@@169|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimum#canCall| |s#0@@169|) (and (and ($IsGoodHeap $Heap@@59) ($Is |s#0@@169| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| |s#0@@169|) (LitInt 1))))) (and (and (|$let#23$canCall| |s#0@@169|) (let ((|s'#1@@1| (|Set#Difference| |s#0@@169| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#23_a| |s#0@@169|)))))) (=> (not (|Set#Equal| |s'#1@@1| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.minimum#canCall| |s'#1@@1|) (let ((|m'#1@@3| (Lexicographic__Byte__Order.__default.minimum $ly@@504 |s'#1@@1|))) (|Lexicographic__Byte__Order.__default.lt#canCall| (|$let#23_a| |s#0@@169|) |m'#1@@3|)))))) (= (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@504) |s#0@@169|) (let ((|a#0@@161| (|$let#23_a| |s#0@@169|))) (let ((|s'#0@@1| (|Set#Difference| |s#0@@169| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#0@@161|))))) (ite (|Set#Equal| |s'#0@@1| (|Set#Empty| BoxType)) |a#0@@161| (let ((|m'#0@@12| (Lexicographic__Byte__Order.__default.minimum $ly@@504 |s'#0@@1|))) (ite (Lexicographic__Byte__Order.__default.lt |a#0@@161| |m'#0@@12|) |a#0@@161| |m'#0@@12|)))))))) :qid |totalorderidfyLexicographicByteOrder.727:22| :skolemid |3699| :pattern ( (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@504) |s#0@@169|) ($IsGoodHeap $Heap@@59)) ))))
(assert  (=> true (forall (($ly@@505 T@U) ($Heap@@60 T@U) (|s#0@@170| T@U) ) (!  (=> (and (and (and (= (type $ly@@505) LayerTypeType) (= (type $Heap@@60) (MapType0Type refType MapType1Type))) (= (type |s#0@@170|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimum#canCall| (Lit |s#0@@170|)) (and (and ($IsGoodHeap $Heap@@60) ($Is |s#0@@170| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| (Lit |s#0@@170|)) (LitInt 1))))) (and (and (|$let#23$canCall| (Lit |s#0@@170|)) (let ((|s'#3@@1| (|Set#Difference| |s#0@@170| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#23_a| (Lit |s#0@@170|))))))) (=> (not (|Set#Equal| |s'#3@@1| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.minimum#canCall| |s'#3@@1|) (let ((|m'#3@@1| (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@505) |s'#3@@1|))) (|Lexicographic__Byte__Order.__default.lt#canCall| (|$let#23_a| (Lit |s#0@@170|)) |m'#3@@1|)))))) (= (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@505) (Lit |s#0@@170|)) (let ((|a#1@@4| (|$let#23_a| (Lit |s#0@@170|)))) (let ((|s'#2@@1| (|Set#Difference| |s#0@@170| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#1@@4|))))) (ite (|Set#Equal| |s'#2@@1| (|Set#Empty| BoxType)) |a#1@@4| (let ((|m'#2@@2| (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@505) |s'#2@@1|))) (ite (Lexicographic__Byte__Order.__default.lt |a#1@@4| |m'#2@@2|) |a#1@@4| |m'#2@@2|)))))))) :qid |totalorderidfyLexicographicByteOrder.727:22| :weight 3 :skolemid |3700| :pattern ( (Lexicographic__Byte__Order.__default.minimum ($LS $ly@@505) (Lit |s#0@@170|)) ($IsGoodHeap $Heap@@60)) ))))
(assert (forall ((arg0@@623 T@U) (arg1@@318 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.minimumOpt arg0@@623 arg1@@318)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.minimumOpt| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt arg0@@623 arg1@@318)) )))
(assert (forall (($ly@@506 T@U) (|s#0@@171| T@U) ) (!  (=> (and (= (type $ly@@506) LayerTypeType) (= (type |s#0@@171|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@506) |s#0@@171|) (Lexicographic__Byte__Order.__default.minimumOpt $ly@@506 |s#0@@171|))) :qid |totalorderidfyLexicographicByteOrder.750:22| :skolemid |3701| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@506) |s#0@@171|)) )))
(assert (forall (($ly@@507 T@U) (|s#0@@172| T@U) ) (!  (=> (and (= (type $ly@@507) LayerTypeType) (= (type |s#0@@172|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.minimumOpt $ly@@507 |s#0@@172|) (Lexicographic__Byte__Order.__default.minimumOpt $LZ |s#0@@172|))) :qid |totalorderidfyLexicographicByteOrder.750:22| :skolemid |3702| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt (AsFuelBottom $ly@@507) |s#0@@172|)) )))
(assert  (=> true (forall (($ly@@508 T@U) (|s#0@@173| T@U) ) (!  (=> (and (and (= (type $ly@@508) LayerTypeType) (= (type |s#0@@173|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimumOpt#canCall| |s#0@@173|) ($Is |s#0@@173| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (and (and (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.minimumOpt $ly@@508 |s#0@@173|)) (U_2_bool (MapType0Select |s#0@@173| (Options.Option.value (Lexicographic__Byte__Order.__default.minimumOpt $ly@@508 |s#0@@173|))))) (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.minimumOpt $ly@@508 |s#0@@173|)) (forall ((|y#0@@12| T@U) ) (!  (=> (= (type |y#0@@12|) (SeqType BoxType)) (=> (and ($Is |y#0@@12| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@173| ($Box |y#0@@12|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.minimumOpt $ly@@508 |s#0@@173|))) |y#0@@12|))) :qid |totalorderidfyLexicographicByteOrder.752:30| :skolemid |3703| :pattern ( (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.minimumOpt $ly@@508 |s#0@@173|))) |y#0@@12|)) :pattern ( (MapType0Select |s#0@@173| ($Box |y#0@@12|))) )))) (=> (Options.Option.None_q (Lexicographic__Byte__Order.__default.minimumOpt $ly@@508 |s#0@@173|)) (|Set#Equal| |s#0@@173| (|Set#Empty| BoxType)))) ($Is (Lexicographic__Byte__Order.__default.minimumOpt $ly@@508 |s#0@@173|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte))))) :qid |totalorderidfyLexicographicByteOrder.750:22| :skolemid |3704| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt $ly@@508 |s#0@@173|)) ))))
(assert (forall (($ly@@509 T@U) (|s#0@@174| T@U) ) (!  (=> (and (and (= (type $ly@@509) LayerTypeType) (= (type |s#0@@174|) (MapType0Type BoxType boolType))) ($Is |s#0@@174| (TSet (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.minimumOpt#requires| $ly@@509 |s#0@@174|) true)) :qid |totalorderidfyLexicographicByteOrder.750:22| :skolemid |3705| :pattern ( (|Lexicographic__Byte__Order.__default.minimumOpt#requires| $ly@@509 |s#0@@174|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.minimum) LayerTypeType))
(assert  (=> true (forall (($ly@@510 T@U) (|s#0@@175| T@U) ) (!  (=> (and (and (= (type $ly@@510) LayerTypeType) (= (type |s#0@@175|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimumOpt#canCall| |s#0@@175|) ($Is |s#0@@175| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@175| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.minimum#canCall| |s#0@@175|)) (= (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@510) |s#0@@175|) (ite (|Set#Equal| |s#0@@175| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.minimum StartFuel_Lexicographic_Byte_Order._default.minimum |s#0@@175|))))))) :qid |totalorderidfyLexicographicByteOrder.750:22| :skolemid |3706| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@510) |s#0@@175|)) ))))
(assert  (=> true (forall (($ly@@511 T@U) (|s#0@@176| T@U) ) (!  (=> (and (and (= (type $ly@@511) LayerTypeType) (= (type |s#0@@176|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.minimumOpt#canCall| (Lit |s#0@@176|)) ($Is |s#0@@176| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@176| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.minimum#canCall| (Lit |s#0@@176|))) (= (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@511) (Lit |s#0@@176|)) (ite (|Set#Equal| |s#0@@176| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.minimum StartFuel_Lexicographic_Byte_Order._default.minimum (Lit |s#0@@176|)))))))) :qid |totalorderidfyLexicographicByteOrder.750:22| :weight 3 :skolemid |3707| :pattern ( (Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@511) (Lit |s#0@@176|))) ))))
(assert (forall ((arg0@@624 T@U) (arg1@@319 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.maximum arg0@@624 arg1@@319)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.maximum| :pattern ( (Lexicographic__Byte__Order.__default.maximum arg0@@624 arg1@@319)) )))
(assert (forall (($ly@@512 T@U) (|s#0@@177| T@U) ) (!  (=> (and (= (type $ly@@512) LayerTypeType) (= (type |s#0@@177|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@512) |s#0@@177|) (Lexicographic__Byte__Order.__default.maximum $ly@@512 |s#0@@177|))) :qid |totalorderidfyLexicographicByteOrder.758:22| :skolemid |3708| :pattern ( (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@512) |s#0@@177|)) )))
(assert (forall (($ly@@513 T@U) (|s#0@@178| T@U) ) (!  (=> (and (= (type $ly@@513) LayerTypeType) (= (type |s#0@@178|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximum $ly@@513 |s#0@@178|) (Lexicographic__Byte__Order.__default.maximum $LZ |s#0@@178|))) :qid |totalorderidfyLexicographicByteOrder.758:22| :skolemid |3709| :pattern ( (Lexicographic__Byte__Order.__default.maximum (AsFuelBottom $ly@@513) |s#0@@178|)) )))
(assert  (=> true (forall (($ly@@514 T@U) (|s#0@@179| T@U) ) (!  (=> (and (and (= (type $ly@@514) LayerTypeType) (= (type |s#0@@179|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximum#canCall| |s#0@@179|) (and ($Is |s#0@@179| (TSet (TSeq Tclass.NativeTypes.byte))) (>= (|Set#Card| |s#0@@179|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@179| ($Box (Lexicographic__Byte__Order.__default.maximum $ly@@514 |s#0@@179|)))) (forall ((|y#0@@13| T@U) ) (!  (=> (= (type |y#0@@13|) (SeqType BoxType)) (=> (and ($Is |y#0@@13| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@179| ($Box |y#0@@13|)))) (Lexicographic__Byte__Order.__default.lte |y#0@@13| (Lexicographic__Byte__Order.__default.maximum $ly@@514 |s#0@@179|)))) :qid |totalorderidfyLexicographicByteOrder.761:18| :skolemid |3710| :pattern ( (Lexicographic__Byte__Order.__default.lte |y#0@@13| (Lexicographic__Byte__Order.__default.maximum $ly@@514 |s#0@@179|))) :pattern ( (MapType0Select |s#0@@179| ($Box |y#0@@13|))) ))) ($Is (Lexicographic__Byte__Order.__default.maximum $ly@@514 |s#0@@179|) (TSeq Tclass.NativeTypes.byte)))) :qid |totalorderidfyLexicographicByteOrder.758:22| :skolemid |3711| :pattern ( (Lexicographic__Byte__Order.__default.maximum $ly@@514 |s#0@@179|)) ))))
(assert (forall (($ly@@515 T@U) ($Heap@@61 T@U) (|s#0@@180| T@U) ) (!  (=> (and (and (and (= (type $ly@@515) LayerTypeType) (= (type $Heap@@61) (MapType0Type refType MapType1Type))) (= (type |s#0@@180|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@61) ($Is |s#0@@180| (TSet (TSeq Tclass.NativeTypes.byte))))) (= (|Lexicographic__Byte__Order.__default.maximum#requires| $ly@@515 |s#0@@180|) (>= (|Set#Card| |s#0@@180|) (LitInt 1)))) :qid |totalorderidfyLexicographicByteOrder.758:22| :skolemid |3712| :pattern ( (|Lexicographic__Byte__Order.__default.maximum#requires| $ly@@515 |s#0@@180|) ($IsGoodHeap $Heap@@61)) )))
(assert (forall ((arg0@@625 T@U) ) (! (= (type (|$let#26_a| arg0@@625)) (SeqType BoxType)) :qid |funType:$let#26_a| :pattern ( (|$let#26_a| arg0@@625)) )))
(assert (forall ((s@@55 T@U) ) (!  (=> (and (= (type s@@55) (MapType0Type BoxType boolType)) (|$let#26$canCall| s@@55)) (and ($Is (|$let#26_a| s@@55) (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select s@@55 ($Box (|$let#26_a| s@@55)))))) :qid |totalorderidfyLexicographicByteOrder.763:5| :skolemid |3713| :pattern ( (|$let#26_a| s@@55)) )))
(assert  (=> true (forall (($ly@@516 T@U) ($Heap@@62 T@U) (|s#0@@181| T@U) ) (!  (=> (and (and (and (= (type $ly@@516) LayerTypeType) (= (type $Heap@@62) (MapType0Type refType MapType1Type))) (= (type |s#0@@181|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximum#canCall| |s#0@@181|) (and (and ($IsGoodHeap $Heap@@62) ($Is |s#0@@181| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| |s#0@@181|) (LitInt 1))))) (and (and (|$let#26$canCall| |s#0@@181|) (let ((|s'#1@@2| (|Set#Difference| |s#0@@181| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#26_a| |s#0@@181|)))))) (=> (not (|Set#Equal| |s'#1@@2| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.maximum#canCall| |s'#1@@2|) (let ((|m'#1@@4| (Lexicographic__Byte__Order.__default.maximum $ly@@516 |s'#1@@2|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |m'#1@@4| (|$let#26_a| |s#0@@181|))))))) (= (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@516) |s#0@@181|) (let ((|a#0@@162| (|$let#26_a| |s#0@@181|))) (let ((|s'#0@@2| (|Set#Difference| |s#0@@181| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#0@@162|))))) (ite (|Set#Equal| |s'#0@@2| (|Set#Empty| BoxType)) |a#0@@162| (let ((|m'#0@@13| (Lexicographic__Byte__Order.__default.maximum $ly@@516 |s'#0@@2|))) (ite (Lexicographic__Byte__Order.__default.lt |m'#0@@13| |a#0@@162|) |a#0@@162| |m'#0@@13|)))))))) :qid |totalorderidfyLexicographicByteOrder.758:22| :skolemid |3714| :pattern ( (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@516) |s#0@@181|) ($IsGoodHeap $Heap@@62)) ))))
(assert  (=> true (forall (($ly@@517 T@U) ($Heap@@63 T@U) (|s#0@@182| T@U) ) (!  (=> (and (and (and (= (type $ly@@517) LayerTypeType) (= (type $Heap@@63) (MapType0Type refType MapType1Type))) (= (type |s#0@@182|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximum#canCall| (Lit |s#0@@182|)) (and (and ($IsGoodHeap $Heap@@63) ($Is |s#0@@182| (TSet (TSeq Tclass.NativeTypes.byte)))) (>= (|Set#Card| (Lit |s#0@@182|)) (LitInt 1))))) (and (and (|$let#26$canCall| (Lit |s#0@@182|)) (let ((|s'#3@@2| (|Set#Difference| |s#0@@182| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#26_a| (Lit |s#0@@182|))))))) (=> (not (|Set#Equal| |s'#3@@2| (|Set#Empty| BoxType))) (and (|Lexicographic__Byte__Order.__default.maximum#canCall| |s'#3@@2|) (let ((|m'#3@@2| (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@517) |s'#3@@2|))) (|Lexicographic__Byte__Order.__default.lt#canCall| |m'#3@@2| (|$let#26_a| (Lit |s#0@@182|)))))))) (= (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@517) (Lit |s#0@@182|)) (let ((|a#1@@5| (|$let#26_a| (Lit |s#0@@182|)))) (let ((|s'#2@@2| (|Set#Difference| |s#0@@182| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#1@@5|))))) (ite (|Set#Equal| |s'#2@@2| (|Set#Empty| BoxType)) |a#1@@5| (let ((|m'#2@@3| (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@517) |s'#2@@2|))) (ite (Lexicographic__Byte__Order.__default.lt |m'#2@@3| |a#1@@5|) |a#1@@5| |m'#2@@3|)))))))) :qid |totalorderidfyLexicographicByteOrder.758:22| :weight 3 :skolemid |3715| :pattern ( (Lexicographic__Byte__Order.__default.maximum ($LS $ly@@517) (Lit |s#0@@182|)) ($IsGoodHeap $Heap@@63)) ))))
(assert (forall ((arg0@@626 T@U) (arg1@@320 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.maximumOpt arg0@@626 arg1@@320)) DatatypeTypeType) :qid |funType:Lexicographic__Byte__Order.__default.maximumOpt| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt arg0@@626 arg1@@320)) )))
(assert (forall (($ly@@518 T@U) (|s#0@@183| T@U) ) (!  (=> (and (= (type $ly@@518) LayerTypeType) (= (type |s#0@@183|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@518) |s#0@@183|) (Lexicographic__Byte__Order.__default.maximumOpt $ly@@518 |s#0@@183|))) :qid |totalorderidfyLexicographicByteOrder.779:22| :skolemid |3716| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@518) |s#0@@183|)) )))
(assert (forall (($ly@@519 T@U) (|s#0@@184| T@U) ) (!  (=> (and (= (type $ly@@519) LayerTypeType) (= (type |s#0@@184|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.maximumOpt $ly@@519 |s#0@@184|) (Lexicographic__Byte__Order.__default.maximumOpt $LZ |s#0@@184|))) :qid |totalorderidfyLexicographicByteOrder.779:22| :skolemid |3717| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt (AsFuelBottom $ly@@519) |s#0@@184|)) )))
(assert  (=> true (forall (($ly@@520 T@U) (|s#0@@185| T@U) ) (!  (=> (and (and (= (type $ly@@520) LayerTypeType) (= (type |s#0@@185|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| |s#0@@185|) ($Is |s#0@@185| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (and (and (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.maximumOpt $ly@@520 |s#0@@185|)) (U_2_bool (MapType0Select |s#0@@185| (Options.Option.value (Lexicographic__Byte__Order.__default.maximumOpt $ly@@520 |s#0@@185|))))) (=> (Options.Option.Some_q (Lexicographic__Byte__Order.__default.maximumOpt $ly@@520 |s#0@@185|)) (forall ((|y#0@@14| T@U) ) (!  (=> (= (type |y#0@@14|) (SeqType BoxType)) (=> (and ($Is |y#0@@14| (TSeq Tclass.NativeTypes.byte)) (U_2_bool (MapType0Select |s#0@@185| ($Box |y#0@@14|)))) (Lexicographic__Byte__Order.__default.lte |y#0@@14| ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.maximumOpt $ly@@520 |s#0@@185|)))))) :qid |totalorderidfyLexicographicByteOrder.781:30| :skolemid |3718| :pattern ( (Lexicographic__Byte__Order.__default.lte |y#0@@14| ($Unbox (SeqType BoxType) (Options.Option.value (Lexicographic__Byte__Order.__default.maximumOpt $ly@@520 |s#0@@185|))))) :pattern ( (MapType0Select |s#0@@185| ($Box |y#0@@14|))) )))) (=> (Options.Option.None_q (Lexicographic__Byte__Order.__default.maximumOpt $ly@@520 |s#0@@185|)) (|Set#Equal| |s#0@@185| (|Set#Empty| BoxType)))) ($Is (Lexicographic__Byte__Order.__default.maximumOpt $ly@@520 |s#0@@185|) (Tclass.Options.Option (TSeq Tclass.NativeTypes.byte))))) :qid |totalorderidfyLexicographicByteOrder.779:22| :skolemid |3719| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt $ly@@520 |s#0@@185|)) ))))
(assert (forall (($ly@@521 T@U) (|s#0@@186| T@U) ) (!  (=> (and (and (= (type $ly@@521) LayerTypeType) (= (type |s#0@@186|) (MapType0Type BoxType boolType))) ($Is |s#0@@186| (TSet (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.maximumOpt#requires| $ly@@521 |s#0@@186|) true)) :qid |totalorderidfyLexicographicByteOrder.779:22| :skolemid |3720| :pattern ( (|Lexicographic__Byte__Order.__default.maximumOpt#requires| $ly@@521 |s#0@@186|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.maximum) LayerTypeType))
(assert  (=> true (forall (($ly@@522 T@U) (|s#0@@187| T@U) ) (!  (=> (and (and (= (type $ly@@522) LayerTypeType) (= (type |s#0@@187|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| |s#0@@187|) ($Is |s#0@@187| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@187| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.maximum#canCall| |s#0@@187|)) (= (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@522) |s#0@@187|) (ite (|Set#Equal| |s#0@@187| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.maximum StartFuel_Lexicographic_Byte_Order._default.maximum |s#0@@187|))))))) :qid |totalorderidfyLexicographicByteOrder.779:22| :skolemid |3721| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@522) |s#0@@187|)) ))))
(assert  (=> true (forall (($ly@@523 T@U) (|s#0@@188| T@U) ) (!  (=> (and (and (= (type $ly@@523) LayerTypeType) (= (type |s#0@@188|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| (Lit |s#0@@188|)) ($Is |s#0@@188| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (=> (not (|Set#Equal| |s#0@@188| (|Set#Empty| BoxType))) (|Lexicographic__Byte__Order.__default.maximum#canCall| (Lit |s#0@@188|))) (= (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@523) (Lit |s#0@@188|)) (ite (|Set#Equal| |s#0@@188| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Lexicographic__Byte__Order.__default.maximum StartFuel_Lexicographic_Byte_Order._default.maximum (Lit |s#0@@188|)))))))) :qid |totalorderidfyLexicographicByteOrder.779:22| :weight 3 :skolemid |3722| :pattern ( (Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@523) (Lit |s#0@@188|))) ))))
(assert  (=> true (forall ((|a#0@@163| T@U) (|b#0@@116| T@U) ) (!  (=> (and (and (= (type |a#0@@163|) (SeqType BoxType)) (= (type |b#0@@116|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lt#canCall| |a#0@@163| |b#0@@116|) (and ($Is |a#0@@163| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@116| (TSeq Tclass.NativeTypes.byte))))) true) :qid |totalorderidfyTotalOrderLexicographicByteOrder.17:16| :skolemid |3723| :pattern ( (Lexicographic__Byte__Order.__default.lt |a#0@@163| |b#0@@116|)) ))))
(assert (forall ((|a#0@@164| T@U) (|b#0@@117| T@U) ) (!  (=> (and (and (= (type |a#0@@164|) (SeqType BoxType)) (= (type |b#0@@117|) (SeqType BoxType))) (and ($Is |a#0@@164| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@117| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.lt#requires| |a#0@@164| |b#0@@117|) true)) :qid |totalorderidfyTotalOrderLexicographicByteOrder.17:16| :skolemid |3724| :pattern ( (|Lexicographic__Byte__Order.__default.lt#requires| |a#0@@164| |b#0@@117|)) )))
(assert  (=> true (forall ((|a#0@@165| T@U) (|b#0@@118| T@U) ) (!  (=> (and (and (= (type |a#0@@165|) (SeqType BoxType)) (= (type |b#0@@118|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lt#canCall| |a#0@@165| |b#0@@118|) (and ($Is |a#0@@165| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@118| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@165| |b#0@@118|) (= (Lexicographic__Byte__Order.__default.lt |a#0@@165| |b#0@@118|)  (and (Lexicographic__Byte__Order.__default.lte |a#0@@165| |b#0@@118|) (not (|Seq#Equal| |a#0@@165| |b#0@@118|)))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.17:16| :skolemid |3725| :pattern ( (Lexicographic__Byte__Order.__default.lt |a#0@@165| |b#0@@118|)) ))))
(assert  (=> true (forall ((|a#0@@166| T@U) (|b#0@@119| T@U) ) (!  (=> (and (and (= (type |a#0@@166|) (SeqType BoxType)) (= (type |b#0@@119|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |a#0@@166|) (Lit |b#0@@119|)) (and ($Is |a#0@@166| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@119| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@166|) (Lit |b#0@@119|)) (= (Lexicographic__Byte__Order.__default.lt (Lit |a#0@@166|) (Lit |b#0@@119|))  (and (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@166|) (Lit |b#0@@119|)) (not (|Seq#Equal| |a#0@@166| |b#0@@119|)))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.17:16| :weight 3 :skolemid |3726| :pattern ( (Lexicographic__Byte__Order.__default.lt (Lit |a#0@@166|) (Lit |b#0@@119|))) ))))
(assert (forall ((arg0@@627 T@U) (arg1@@321 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.Min arg0@@627 arg1@@321)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.Min| :pattern ( (Lexicographic__Byte__Order.__default.Min arg0@@627 arg1@@321)) )))
(assert  (=> true (forall ((|a#0@@167| T@U) (|b#0@@120| T@U) ) (!  (=> (and (and (= (type |a#0@@167|) (SeqType BoxType)) (= (type |b#0@@120|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Min#canCall| |a#0@@167| |b#0@@120|) (and ($Is |a#0@@167| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@120| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.Min |a#0@@167| |b#0@@120|) (TSeq Tclass.NativeTypes.byte))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.29:16| :skolemid |3727| :pattern ( (Lexicographic__Byte__Order.__default.Min |a#0@@167| |b#0@@120|)) ))))
(assert (forall ((|a#0@@168| T@U) (|b#0@@121| T@U) ) (!  (=> (and (and (= (type |a#0@@168|) (SeqType BoxType)) (= (type |b#0@@121|) (SeqType BoxType))) (and ($Is |a#0@@168| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@121| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.Min#requires| |a#0@@168| |b#0@@121|) true)) :qid |totalorderidfyTotalOrderLexicographicByteOrder.29:16| :skolemid |3728| :pattern ( (|Lexicographic__Byte__Order.__default.Min#requires| |a#0@@168| |b#0@@121|)) )))
(assert  (=> true (forall ((|a#0@@169| T@U) (|b#0@@122| T@U) ) (!  (=> (and (and (= (type |a#0@@169|) (SeqType BoxType)) (= (type |b#0@@122|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Min#canCall| |a#0@@169| |b#0@@122|) (and ($Is |a#0@@169| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@122| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@169| |b#0@@122|) (= (Lexicographic__Byte__Order.__default.Min |a#0@@169| |b#0@@122|) (ite (Lexicographic__Byte__Order.__default.lte |a#0@@169| |b#0@@122|) |a#0@@169| |b#0@@122|)))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.29:16| :skolemid |3729| :pattern ( (Lexicographic__Byte__Order.__default.Min |a#0@@169| |b#0@@122|)) ))))
(assert  (=> true (forall ((|a#0@@170| T@U) (|b#0@@123| T@U) ) (!  (=> (and (and (= (type |a#0@@170|) (SeqType BoxType)) (= (type |b#0@@123|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Min#canCall| (Lit |a#0@@170|) (Lit |b#0@@123|)) (and ($Is |a#0@@170| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@123| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@170|) (Lit |b#0@@123|)) (= (Lexicographic__Byte__Order.__default.Min (Lit |a#0@@170|) (Lit |b#0@@123|)) (ite (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@170|) (Lit |b#0@@123|)) |a#0@@170| |b#0@@123|)))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.29:16| :weight 3 :skolemid |3730| :pattern ( (Lexicographic__Byte__Order.__default.Min (Lit |a#0@@170|) (Lit |b#0@@123|))) ))))
(assert (forall ((arg0@@628 T@U) (arg1@@322 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.Max arg0@@628 arg1@@322)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.Max| :pattern ( (Lexicographic__Byte__Order.__default.Max arg0@@628 arg1@@322)) )))
(assert  (=> true (forall ((|a#0@@171| T@U) (|b#0@@124| T@U) ) (!  (=> (and (and (= (type |a#0@@171|) (SeqType BoxType)) (= (type |b#0@@124|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Max#canCall| |a#0@@171| |b#0@@124|) (and ($Is |a#0@@171| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@124| (TSeq Tclass.NativeTypes.byte))))) ($Is (Lexicographic__Byte__Order.__default.Max |a#0@@171| |b#0@@124|) (TSeq Tclass.NativeTypes.byte))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.34:16| :skolemid |3731| :pattern ( (Lexicographic__Byte__Order.__default.Max |a#0@@171| |b#0@@124|)) ))))
(assert (forall ((|a#0@@172| T@U) (|b#0@@125| T@U) ) (!  (=> (and (and (= (type |a#0@@172|) (SeqType BoxType)) (= (type |b#0@@125|) (SeqType BoxType))) (and ($Is |a#0@@172| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@125| (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.Max#requires| |a#0@@172| |b#0@@125|) true)) :qid |totalorderidfyTotalOrderLexicographicByteOrder.34:16| :skolemid |3732| :pattern ( (|Lexicographic__Byte__Order.__default.Max#requires| |a#0@@172| |b#0@@125|)) )))
(assert  (=> true (forall ((|a#0@@173| T@U) (|b#0@@126| T@U) ) (!  (=> (and (and (= (type |a#0@@173|) (SeqType BoxType)) (= (type |b#0@@126|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Max#canCall| |a#0@@173| |b#0@@126|) (and ($Is |a#0@@173| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@126| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@173| |b#0@@126|) (= (Lexicographic__Byte__Order.__default.Max |a#0@@173| |b#0@@126|) (ite (Lexicographic__Byte__Order.__default.lte |a#0@@173| |b#0@@126|) |b#0@@126| |a#0@@173|)))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.34:16| :skolemid |3733| :pattern ( (Lexicographic__Byte__Order.__default.Max |a#0@@173| |b#0@@126|)) ))))
(assert  (=> true (forall ((|a#0@@174| T@U) (|b#0@@127| T@U) ) (!  (=> (and (and (= (type |a#0@@174|) (SeqType BoxType)) (= (type |b#0@@127|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.Max#canCall| (Lit |a#0@@174|) (Lit |b#0@@127|)) (and ($Is |a#0@@174| (TSeq Tclass.NativeTypes.byte)) ($Is |b#0@@127| (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@174|) (Lit |b#0@@127|)) (= (Lexicographic__Byte__Order.__default.Max (Lit |a#0@@174|) (Lit |b#0@@127|)) (ite (Lexicographic__Byte__Order.__default.lte (Lit |a#0@@174|) (Lit |b#0@@127|)) |b#0@@127| |a#0@@174|)))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.34:16| :weight 3 :skolemid |3734| :pattern ( (Lexicographic__Byte__Order.__default.Max (Lit |a#0@@174|) (Lit |b#0@@127|))) ))))
(assert (forall (($ly@@524 T@U) (|run#0@@144| T@U) ) (!  (=> (and (= (type $ly@@524) LayerTypeType) (= (type |run#0@@144|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@524) |run#0@@144|) (Lexicographic__Byte__Order.__default.IsSorted $ly@@524 |run#0@@144|))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.46:23| :skolemid |3735| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@524) |run#0@@144|)) )))
(assert (forall (($ly@@525 T@U) (|run#0@@145| T@U) ) (!  (=> (and (= (type $ly@@525) LayerTypeType) (= (type |run#0@@145|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IsSorted $ly@@525 |run#0@@145|) (Lexicographic__Byte__Order.__default.IsSorted $LZ |run#0@@145|))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.46:23| :skolemid |3736| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted (AsFuelBottom $ly@@525) |run#0@@145|)) )))
(assert  (=> true (forall (($ly@@526 T@U) (|run#0@@146| T@U) ) (!  (=> (and (and (= (type $ly@@526) LayerTypeType) (= (type |run#0@@146|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsSorted#canCall| |run#0@@146|) ($Is |run#0@@146| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (=> (= (|Seq#Length| |run#0@@146|) (LitInt 0)) (Lexicographic__Byte__Order.__default.IsSorted $ly@@526 |run#0@@146|)) (=> (= (|Seq#Length| |run#0@@146|) (LitInt 1)) (Lexicographic__Byte__Order.__default.IsSorted $ly@@526 |run#0@@146|)))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.46:23| :skolemid |3737| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted $ly@@526 |run#0@@146|)) ))))
(assert (forall (($ly@@527 T@U) (|run#0@@147| T@U) ) (!  (=> (and (and (= (type $ly@@527) LayerTypeType) (= (type |run#0@@147|) (SeqType BoxType))) ($Is |run#0@@147| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.IsSorted#requires| $ly@@527 |run#0@@147|) true)) :qid |totalorderidfyTotalOrderLexicographicByteOrder.46:23| :skolemid |3738| :pattern ( (|Lexicographic__Byte__Order.__default.IsSorted#requires| $ly@@527 |run#0@@147|)) )))
(assert  (=> true (forall (($ly@@528 T@U) (|run#0@@148| T@U) ) (!  (=> (and (and (= (type $ly@@528) LayerTypeType) (= (type |run#0@@148|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsSorted#canCall| |run#0@@148|) ($Is |run#0@@148| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#0@@110| Int) (|j#0@@18| Int) ) (!  (=> (<= (LitInt 0) |i#0@@110|) (=> (<= |i#0@@110| |j#0@@18|) (=> (< |j#0@@18| (|Seq#Length| |run#0@@148|)) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@148| |i#0@@110|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@148| |j#0@@18|)))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.50:12| :skolemid |3740| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@148| |j#0@@18|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@148| |i#0@@110|))) )) (= (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@528) |run#0@@148|) (forall ((|i#0@@111| Int) (|j#0@@19| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@111|) (<= |i#0@@111| |j#0@@19|)) (< |j#0@@19| (|Seq#Length| |run#0@@148|))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@148| |i#0@@111|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@148| |j#0@@19|))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.50:12| :skolemid |3739| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@148| |j#0@@19|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@148| |i#0@@111|))) ))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.46:23| :skolemid |3741| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@528) |run#0@@148|)) ))))
(assert  (=> true (forall (($ly@@529 T@U) (|run#0@@149| T@U) ) (!  (=> (and (and (= (type $ly@@529) LayerTypeType) (= (type |run#0@@149|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsSorted#canCall| (Lit |run#0@@149|)) ($Is |run#0@@149| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#1@@36| Int) (|j#1@@8| Int) ) (!  (=> (<= (LitInt 0) |i#1@@36|) (=> (<= |i#1@@36| |j#1@@8|) (=> (< |j#1@@8| (|Seq#Length| (Lit |run#0@@149|))) (|Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@149|) |i#1@@36|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@149|) |j#1@@8|)))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.50:12| :skolemid |3743| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@149| |j#1@@8|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@149| |i#1@@36|))) )) (= (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@529) (Lit |run#0@@149|)) (forall ((|i#1@@37| Int) (|j#1@@9| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@37|) (<= |i#1@@37| |j#1@@9|)) (< |j#1@@9| (|Seq#Length| (Lit |run#0@@149|)))) (Lexicographic__Byte__Order.__default.lte ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@149|) |i#1@@37|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@149|) |j#1@@9|))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.50:12| :skolemid |3742| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@149| |j#1@@9|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@149| |i#1@@37|))) ))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.46:23| :weight 3 :skolemid |3744| :pattern ( (Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@529) (Lit |run#0@@149|))) ))))
(assert  (=> true (forall ((|run#0@@150| T@U) ) (!  (=> (and (= (type |run#0@@150|) (SeqType BoxType)) (or (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@150|) ($Is |run#0@@150| (TSeq (TSeq Tclass.NativeTypes.byte))))) true) :qid |totalorderidfyTotalOrderLexicographicByteOrder.53:38| :skolemid |3745| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@150|)) ))))
(assert (forall ((|run#0@@151| T@U) ) (!  (=> (and (= (type |run#0@@151|) (SeqType BoxType)) ($Is |run#0@@151| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@151|) true)) :qid |totalorderidfyTotalOrderLexicographicByteOrder.53:38| :skolemid |3746| :pattern ( (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@151|)) )))
(assert  (=> true (forall ((|run#0@@152| T@U) ) (!  (=> (and (= (type |run#0@@152|) (SeqType BoxType)) (or (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@152|) ($Is |run#0@@152| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#0@@112| Int) (|j#0@@20| Int) ) (!  (=> (<= (LitInt 0) |i#0@@112|) (=> (< |i#0@@112| |j#0@@20|) (=> (< |j#0@@20| (|Seq#Length| |run#0@@152|)) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@152| |i#0@@112|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@152| |j#0@@20|)))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.55:12| :skolemid |3748| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@152| |j#0@@20|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@152| |i#0@@112|))) )) (= (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@152|) (forall ((|i#0@@113| Int) (|j#0@@21| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@113|) (< |i#0@@113| |j#0@@21|)) (< |j#0@@21| (|Seq#Length| |run#0@@152|))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@152| |i#0@@113|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@152| |j#0@@21|))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.55:12| :skolemid |3747| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@152| |j#0@@21|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@152| |i#0@@113|))) ))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.53:38| :skolemid |3749| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@152|)) ))))
(assert  (=> true (forall ((|run#0@@153| T@U) ) (!  (=> (and (= (type |run#0@@153|) (SeqType BoxType)) (or (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@153|)) ($Is |run#0@@153| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#1@@38| Int) (|j#1@@10| Int) ) (!  (=> (<= (LitInt 0) |i#1@@38|) (=> (< |i#1@@38| |j#1@@10|) (=> (< |j#1@@10| (|Seq#Length| (Lit |run#0@@153|))) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@153|) |i#1@@38|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@153|) |j#1@@10|)))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.55:12| :skolemid |3751| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@153| |j#1@@10|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@153| |i#1@@38|))) )) (= (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@153|)) (forall ((|i#1@@39| Int) (|j#1@@11| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@39|) (< |i#1@@39| |j#1@@11|)) (< |j#1@@11| (|Seq#Length| (Lit |run#0@@153|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@153|) |i#1@@39|)) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |run#0@@153|) |j#1@@11|))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.55:12| :skolemid |3750| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@153| |j#1@@11|)) ($Unbox (SeqType BoxType) (|Seq#Index| |run#0@@153| |i#1@@39|))) ))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.53:38| :weight 3 :skolemid |3752| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@153|))) ))))
(assert (forall (($ly@@530 T@U) (|run#0@@154| T@U) ) (!  (=> (and (= (type $ly@@530) LayerTypeType) (= (type |run#0@@154|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@530) |run#0@@154|) (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@530 |run#0@@154|))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.69:23| :skolemid |3753| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@530) |run#0@@154|)) )))
(assert (forall (($ly@@531 T@U) (|run#0@@155| T@U) ) (!  (=> (and (= (type $ly@@531) LayerTypeType) (= (type |run#0@@155|) (SeqType BoxType))) (= (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@531 |run#0@@155|) (Lexicographic__Byte__Order.__default.IsStrictlySorted $LZ |run#0@@155|))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.69:23| :skolemid |3754| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted (AsFuelBottom $ly@@531) |run#0@@155|)) )))
(assert  (=> true (forall (($ly@@532 T@U) (|run#0@@156| T@U) ) (!  (=> (and (and (= (type $ly@@532) LayerTypeType) (= (type |run#0@@156|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@156|) ($Is |run#0@@156| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (and (=> (= (|Seq#Length| |run#0@@156|) (LitInt 0)) (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@532 |run#0@@156|)) (=> (= (|Seq#Length| |run#0@@156|) (LitInt 1)) (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@532 |run#0@@156|))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@532 |run#0@@156|) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted |run#0@@156|)))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.69:23| :skolemid |3755| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@532 |run#0@@156|)) ))))
(assert (forall (($ly@@533 T@U) (|run#0@@157| T@U) ) (!  (=> (and (and (= (type $ly@@533) LayerTypeType) (= (type |run#0@@157|) (SeqType BoxType))) ($Is |run#0@@157| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| $ly@@533 |run#0@@157|) true)) :qid |totalorderidfyTotalOrderLexicographicByteOrder.69:23| :skolemid |3756| :pattern ( (|Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| $ly@@533 |run#0@@157|)) )))
(assert  (=> true (forall (($ly@@534 T@U) (|run#0@@158| T@U) ) (!  (=> (and (and (= (type $ly@@534) LayerTypeType) (= (type |run#0@@158|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@158|) ($Is |run#0@@158| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@158|) (= (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@534) |run#0@@158|) (let ((|b#0@@128| (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@158|))) (ite |b#0@@128| |b#0@@128| |b#0@@128|))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.69:23| :skolemid |3757| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@534) |run#0@@158|)) ))))
(assert  (=> true (forall (($ly@@535 T@U) (|run#0@@159| T@U) ) (!  (=> (and (and (= (type $ly@@535) LayerTypeType) (= (type |run#0@@159|) (SeqType BoxType))) (or (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (Lit |run#0@@159|)) ($Is |run#0@@159| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (|Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@159|)) (= (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@535) (Lit |run#0@@159|)) (let ((|b#1@@7| (U_2_bool (Lit (bool_2_U (Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@159|))))))) (ite |b#1@@7| |b#1@@7| |b#1@@7|))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.69:23| :weight 3 :skolemid |3758| :pattern ( (Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@535) (Lit |run#0@@159|))) ))))
(assert  (=> true (forall ((|e#0@@9| T@U) (|s#0@@189| T@U) ) (!  (=> (and (and (= (type |e#0@@9|) (SeqType BoxType)) (= (type |s#0@@189|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.BiggestInSet#canCall| |e#0@@9| |s#0@@189|) (and (and ($Is |e#0@@9| (TSeq Tclass.NativeTypes.byte)) ($Is |s#0@@189| (TSet (TSeq Tclass.NativeTypes.byte)))) (< 0 (|Set#Card| |s#0@@189|))))) true) :qid |totalorderidfyTotalOrderLexicographicByteOrder.138:26| :skolemid |3759| :pattern ( (Lexicographic__Byte__Order.__default.BiggestInSet |e#0@@9| |s#0@@189|)) ))))
(assert (forall ((|e#0@@10| T@U) (|s#0@@190| T@U) ) (!  (=> (and (and (= (type |e#0@@10|) (SeqType BoxType)) (= (type |s#0@@190|) (MapType0Type BoxType boolType))) (and ($Is |e#0@@10| (TSeq Tclass.NativeTypes.byte)) ($Is |s#0@@190| (TSet (TSeq Tclass.NativeTypes.byte))))) (= (|Lexicographic__Byte__Order.__default.BiggestInSet#requires| |e#0@@10| |s#0@@190|) (< 0 (|Set#Card| |s#0@@190|)))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.138:26| :skolemid |3760| :pattern ( (|Lexicographic__Byte__Order.__default.BiggestInSet#requires| |e#0@@10| |s#0@@190|)) )))
(assert  (=> true (forall ((|e#0@@11| T@U) (|s#0@@191| T@U) ) (!  (=> (and (and (= (type |e#0@@11|) (SeqType BoxType)) (= (type |s#0@@191|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.BiggestInSet#canCall| |e#0@@11| |s#0@@191|) (and (and ($Is |e#0@@11| (TSeq Tclass.NativeTypes.byte)) ($Is |s#0@@191| (TSet (TSeq Tclass.NativeTypes.byte)))) (< 0 (|Set#Card| |s#0@@191|))))) (and (=> (U_2_bool (MapType0Select |s#0@@191| ($Box |e#0@@11|))) (forall ((|e2#0@@1| T@U) ) (!  (=> (and (and (= (type |e2#0@@1|) (SeqType BoxType)) ($Is |e2#0@@1| (TSeq Tclass.NativeTypes.byte))) (and (U_2_bool (MapType0Select |s#0@@191| ($Box |e2#0@@1|))) (not (|Seq#Equal| |e2#0@@1| |e#0@@11|)))) (|Lexicographic__Byte__Order.__default.lt#canCall| |e2#0@@1| |e#0@@11|)) :qid |totalorderidfyTotalOrderLexicographicByteOrder.141:22| :skolemid |3762| :pattern ( (Lexicographic__Byte__Order.__default.lt |e2#0@@1| |e#0@@11|)) :pattern ( (MapType0Select |s#0@@191| ($Box |e2#0@@1|))) ))) (= (Lexicographic__Byte__Order.__default.BiggestInSet |e#0@@11| |s#0@@191|)  (and (U_2_bool (MapType0Select |s#0@@191| ($Box |e#0@@11|))) (forall ((|e2#0@@2| T@U) ) (!  (=> (= (type |e2#0@@2|) (SeqType BoxType)) (=> (and ($Is |e2#0@@2| (TSeq Tclass.NativeTypes.byte)) (and (U_2_bool (MapType0Select |s#0@@191| ($Box |e2#0@@2|))) (not (|Seq#Equal| |e2#0@@2| |e#0@@11|)))) (Lexicographic__Byte__Order.__default.lt |e2#0@@2| |e#0@@11|))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.141:22| :skolemid |3761| :pattern ( (Lexicographic__Byte__Order.__default.lt |e2#0@@2| |e#0@@11|)) :pattern ( (MapType0Select |s#0@@191| ($Box |e2#0@@2|))) )))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.138:26| :skolemid |3763| :pattern ( (Lexicographic__Byte__Order.__default.BiggestInSet |e#0@@11| |s#0@@191|)) ))))
(assert  (=> true (forall ((|e#0@@12| T@U) (|s#0@@192| T@U) ) (!  (=> (and (and (= (type |e#0@@12|) (SeqType BoxType)) (= (type |s#0@@192|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.BiggestInSet#canCall| (Lit |e#0@@12|) (Lit |s#0@@192|)) (and (and ($Is |e#0@@12| (TSeq Tclass.NativeTypes.byte)) ($Is |s#0@@192| (TSet (TSeq Tclass.NativeTypes.byte)))) (< 0 (|Set#Card| (Lit |s#0@@192|)))))) (and (=> (U_2_bool (MapType0Select (Lit |s#0@@192|) ($Box (Lit |e#0@@12|)))) (forall ((|e2#1@@1| T@U) ) (!  (=> (and (and (= (type |e2#1@@1|) (SeqType BoxType)) ($Is |e2#1@@1| (TSeq Tclass.NativeTypes.byte))) (and (U_2_bool (MapType0Select (Lit |s#0@@192|) ($Box |e2#1@@1|))) (not (|Seq#Equal| |e2#1@@1| |e#0@@12|)))) (|Lexicographic__Byte__Order.__default.lt#canCall| |e2#1@@1| (Lit |e#0@@12|))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.141:22| :skolemid |3765| :pattern ( (Lexicographic__Byte__Order.__default.lt |e2#1@@1| |e#0@@12|)) :pattern ( (MapType0Select |s#0@@192| ($Box |e2#1@@1|))) ))) (= (Lexicographic__Byte__Order.__default.BiggestInSet (Lit |e#0@@12|) (Lit |s#0@@192|))  (and (U_2_bool (MapType0Select (Lit |s#0@@192|) ($Box (Lit |e#0@@12|)))) (forall ((|e2#1@@2| T@U) ) (!  (=> (= (type |e2#1@@2|) (SeqType BoxType)) (=> (and ($Is |e2#1@@2| (TSeq Tclass.NativeTypes.byte)) (and (U_2_bool (MapType0Select (Lit |s#0@@192|) ($Box |e2#1@@2|))) (not (|Seq#Equal| |e2#1@@2| |e#0@@12|)))) (Lexicographic__Byte__Order.__default.lt |e2#1@@2| (Lit |e#0@@12|)))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.141:22| :skolemid |3764| :pattern ( (Lexicographic__Byte__Order.__default.lt |e2#1@@2| |e#0@@12|)) :pattern ( (MapType0Select |s#0@@192| ($Box |e2#1@@2|))) )))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.138:26| :weight 3 :skolemid |3766| :pattern ( (Lexicographic__Byte__Order.__default.BiggestInSet (Lit |e#0@@12|) (Lit |s#0@@192|))) ))))
(assert (forall ((arg0@@629 T@U) (arg1@@323 T@U) ) (! (= (type (Lexicographic__Byte__Order.__default.SortSet arg0@@629 arg1@@323)) (SeqType BoxType)) :qid |funType:Lexicographic__Byte__Order.__default.SortSet| :pattern ( (Lexicographic__Byte__Order.__default.SortSet arg0@@629 arg1@@323)) )))
(assert (forall (($ly@@536 T@U) (|s#0@@193| T@U) ) (!  (=> (and (= (type $ly@@536) LayerTypeType) (= (type |s#0@@193|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.SortSet ($LS $ly@@536) |s#0@@193|) (Lexicographic__Byte__Order.__default.SortSet $ly@@536 |s#0@@193|))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.169:12| :skolemid |3767| :pattern ( (Lexicographic__Byte__Order.__default.SortSet ($LS $ly@@536) |s#0@@193|)) )))
(assert (forall (($ly@@537 T@U) (|s#0@@194| T@U) ) (!  (=> (and (= (type $ly@@537) LayerTypeType) (= (type |s#0@@194|) (MapType0Type BoxType boolType))) (= (Lexicographic__Byte__Order.__default.SortSet $ly@@537 |s#0@@194|) (Lexicographic__Byte__Order.__default.SortSet $LZ |s#0@@194|))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.169:12| :skolemid |3768| :pattern ( (Lexicographic__Byte__Order.__default.SortSet (AsFuelBottom $ly@@537) |s#0@@194|)) )))
(assert  (=> true (forall (($ly@@538 T@U) (|s#0@@195| T@U) ) (!  (=> (and (and (= (type $ly@@538) LayerTypeType) (= (type |s#0@@195|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SortSet#canCall| |s#0@@195|) ($Is |s#0@@195| (TSet (TSeq Tclass.NativeTypes.byte))))) (and (and (and (= (|Set#Card| |s#0@@195|) (|Seq#Length| (Lexicographic__Byte__Order.__default.SortSet $ly@@538 |s#0@@195|))) (forall ((|t#0@@14| T@U) ) (!  (=> (and (= (type |t#0@@14|) (SeqType BoxType)) ($Is |t#0@@14| (TSeq Tclass.NativeTypes.byte))) (= (U_2_bool (MapType0Select |s#0@@195| ($Box |t#0@@14|))) (|Seq#Contains| (Lexicographic__Byte__Order.__default.SortSet $ly@@538 |s#0@@195|) ($Box |t#0@@14|)))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.171:20| :skolemid |3769| :pattern ( (|Seq#Contains| (Lexicographic__Byte__Order.__default.SortSet $ly@@538 |s#0@@195|) ($Box |t#0@@14|))) :pattern ( (MapType0Select |s#0@@195| ($Box |t#0@@14|))) ))) (Lexicographic__Byte__Order.__default.IsSorted StartFuel_Lexicographic_Byte_Order._default.IsSorted (Lexicographic__Byte__Order.__default.SortSet $ly@@538 |s#0@@195|))) ($Is (Lexicographic__Byte__Order.__default.SortSet $ly@@538 |s#0@@195|) (TSeq (TSeq Tclass.NativeTypes.byte))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.169:12| :skolemid |3770| :pattern ( (Lexicographic__Byte__Order.__default.SortSet $ly@@538 |s#0@@195|)) ))))
(assert (forall (($ly@@539 T@U) ($Heap@@64 T@U) (|s#0@@196| T@U) ) (!  (=> (and (and (and (= (type $ly@@539) LayerTypeType) (= (type $Heap@@64) (MapType0Type refType MapType1Type))) (= (type |s#0@@196|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@64) ($Is |s#0@@196| (TSet (TSeq Tclass.NativeTypes.byte))))) (= (|Lexicographic__Byte__Order.__default.SortSet#requires| $ly@@539 |s#0@@196|) true)) :qid |totalorderidfyTotalOrderLexicographicByteOrder.169:12| :skolemid |3771| :pattern ( (|Lexicographic__Byte__Order.__default.SortSet#requires| $ly@@539 |s#0@@196|) ($IsGoodHeap $Heap@@64)) )))
(assert (forall ((arg0@@630 T@U) ) (! (= (type (|$let#29_e| arg0@@630)) (SeqType BoxType)) :qid |funType:$let#29_e| :pattern ( (|$let#29_e| arg0@@630)) )))
(assert (forall ((s@@56 T@U) ) (!  (=> (and (= (type s@@56) (MapType0Type BoxType boolType)) (|$let#29$canCall| s@@56)) (and ($Is (|$let#29_e| s@@56) (TSeq Tclass.NativeTypes.byte)) (Lexicographic__Byte__Order.__default.BiggestInSet (|$let#29_e| s@@56) s@@56))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.180:7| :skolemid |3772| :pattern ( (|$let#29_e| s@@56)) )))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted8) LayerTypeType))
(assert  (=> true (forall (($ly@@540 T@U) ($Heap@@65 T@U) (|s#0@@197| T@U) ) (!  (=> (and (and (and (= (type $ly@@540) LayerTypeType) (= (type $Heap@@65) (MapType0Type refType MapType1Type))) (= (type |s#0@@197|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SortSet#canCall| |s#0@@197|) (and ($IsGoodHeap $Heap@@65) ($Is |s#0@@197| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (=> (not (= (|Set#Card| |s#0@@197|) (LitInt 0))) (and (|$let#29$canCall| |s#0@@197|) (|Lexicographic__Byte__Order.__default.SortSet#canCall| (|Set#Difference| |s#0@@197| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#29_e| |s#0@@197|))))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted8)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted8)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted8) MoreFuel_Lexicographic_Byte_Order._default.IsSorted8)) (= (Lexicographic__Byte__Order.__default.SortSet ($LS $ly@@540) |s#0@@197|) (ite (= (|Set#Card| |s#0@@197|) (LitInt 0)) (|Seq#Empty| BoxType) (let ((|e#0@@13| (|$let#29_e| |s#0@@197|))) (|Seq#Append| (Lexicographic__Byte__Order.__default.SortSet $ly@@540 (|Set#Difference| |s#0@@197| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |e#0@@13|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |e#0@@13|))))))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.169:12| :skolemid |3773| :pattern ( (Lexicographic__Byte__Order.__default.SortSet ($LS $ly@@540) |s#0@@197|) ($IsGoodHeap $Heap@@65)) ))))
(assert (= (type MoreFuel_Lexicographic_Byte_Order._default.IsSorted9) LayerTypeType))
(assert  (=> true (forall (($ly@@541 T@U) ($Heap@@66 T@U) (|s#0@@198| T@U) ) (!  (=> (and (and (and (= (type $ly@@541) LayerTypeType) (= (type $Heap@@66) (MapType0Type refType MapType1Type))) (= (type |s#0@@198|) (MapType0Type BoxType boolType))) (or (|Lexicographic__Byte__Order.__default.SortSet#canCall| (Lit |s#0@@198|)) (and ($IsGoodHeap $Heap@@66) ($Is |s#0@@198| (TSet (TSeq Tclass.NativeTypes.byte)))))) (and (=> (not (= (|Set#Card| (Lit |s#0@@198|)) (LitInt 0))) (and (|$let#29$canCall| (Lit |s#0@@198|)) (|Lexicographic__Byte__Order.__default.SortSet#canCall| (|Set#Difference| |s#0@@198| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#29_e| (Lit |s#0@@198|)))))))) (and (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted9)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsSorted9)))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsSorted9) MoreFuel_Lexicographic_Byte_Order._default.IsSorted9)) (= (Lexicographic__Byte__Order.__default.SortSet ($LS $ly@@541) (Lit |s#0@@198|)) (ite (= (|Set#Card| (Lit |s#0@@198|)) (LitInt 0)) (|Seq#Empty| BoxType) (let ((|e#1@@0| (|$let#29_e| (Lit |s#0@@198|)))) (|Seq#Append| (Lexicographic__Byte__Order.__default.SortSet ($LS $ly@@541) (|Set#Difference| |s#0@@198| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |e#1@@0|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |e#1@@0|))))))))) :qid |totalorderidfyTotalOrderLexicographicByteOrder.169:12| :weight 3 :skolemid |3774| :pattern ( (Lexicographic__Byte__Order.__default.SortSet ($LS $ly@@541) (Lit |s#0@@198|)) ($IsGoodHeap $Heap@@66)) ))))
(assert (= (type Tclass.Upperbounded__Lexicographic__Byte__Order.__default) TyType))
(assert (= (Tag Tclass.Upperbounded__Lexicographic__Byte__Order.__default) Tagclass.Upperbounded__Lexicographic__Byte__Order.__default))
(assert (= (TagFamily Tclass.Upperbounded__Lexicographic__Byte__Order.__default) tytagFamily$_default))
(assert (forall ((bx@@176 T@U) ) (!  (=> (and (= (type bx@@176) BoxType) ($IsBox bx@@176 Tclass.Upperbounded__Lexicographic__Byte__Order.__default)) (and (= ($Box ($Unbox refType bx@@176)) bx@@176) ($Is ($Unbox refType bx@@176) Tclass.Upperbounded__Lexicographic__Byte__Order.__default))) :qid |unknown.0:0| :skolemid |3775| :pattern ( ($IsBox bx@@176 Tclass.Upperbounded__Lexicographic__Byte__Order.__default)) )))
(assert (forall (($o@@46 T@U) ) (!  (=> (= (type $o@@46) refType) (= ($Is $o@@46 Tclass.Upperbounded__Lexicographic__Byte__Order.__default)  (or (= $o@@46 null) (= (dtype $o@@46) Tclass.Upperbounded__Lexicographic__Byte__Order.__default)))) :qid |unknown.0:0| :skolemid |3776| :pattern ( ($Is $o@@46 Tclass.Upperbounded__Lexicographic__Byte__Order.__default)) )))
(assert (forall (($o@@47 T@U) ($h@@102 T@U) ) (!  (=> (and (= (type $o@@47) refType) (= (type $h@@102) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@47 Tclass.Upperbounded__Lexicographic__Byte__Order.__default $h@@102)  (or (= $o@@47 null) (U_2_bool (MapType1Select (MapType0Select $h@@102 $o@@47) alloc))))) :qid |unknown.0:0| :skolemid |3777| :pattern ( ($IsAlloc $o@@47 Tclass.Upperbounded__Lexicographic__Byte__Order.__default $h@@102)) )))
(assert (= (type Upperbounded__Lexicographic__Byte__Order.__default.SomeElement) DatatypeTypeType))
(assert  (=> true (=> true ($Is Upperbounded__Lexicographic__Byte__Order.__default.SomeElement Tclass.Upperbounded__Lexicographic__Byte__Order.Element))))
(assert (= |Upperbounded__Lexicographic__Byte__Order.__default.SomeElement#requires| true))
(assert (= (type |#Upperbounded_Lexicographic_Byte_Order.Element.Max_Element|) DatatypeTypeType))
(assert  (=> true (=> true (= Upperbounded__Lexicographic__Byte__Order.__default.SomeElement (Lit |#Upperbounded_Lexicographic_Byte_Order.Element.Max_Element|)))))
(assert  (=> true (=> true (= Upperbounded__Lexicographic__Byte__Order.__default.SomeElement (Lit |#Upperbounded_Lexicographic_Byte_Order.Element.Max_Element|)))))
(assert (forall ((arg0@@631 T@U) ) (! (= (type (Upperbounded__Lexicographic__Byte__Order.__default.ToElements arg0@@631)) (SeqType BoxType)) :qid |funType:Upperbounded__Lexicographic__Byte__Order.__default.ToElements| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.ToElements arg0@@631)) )))
(assert  (=> true (forall ((|es#0| T@U) ) (!  (=> (and (= (type |es#0|) (SeqType BoxType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.ToElements#canCall| |es#0|) ($Is |es#0| (TSeq (TSeq Tclass.NativeTypes.byte))))) ($Is (Upperbounded__Lexicographic__Byte__Order.__default.ToElements |es#0|) (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) :qid |totalorderidfyUpperboundedLexicographicByteOrder.813:23| :skolemid |3778| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.ToElements |es#0|)) ))))
(assert (forall (($Heap@@67 T@U) (|es#0@@0| T@U) ) (!  (=> (and (and (= (type $Heap@@67) (MapType0Type refType MapType1Type)) (= (type |es#0@@0|) (SeqType BoxType))) (and ($IsGoodHeap $Heap@@67) ($Is |es#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte))))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.ToElements#requires| |es#0@@0|) true)) :qid |totalorderidfyUpperboundedLexicographicByteOrder.813:12| :skolemid |3779| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.ToElements#requires| |es#0@@0|) ($IsGoodHeap $Heap@@67)) )))
(assert (forall ((arg0@@632 T@U) ) (! (= (type (|lambda#202| arg0@@632)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#202| :pattern ( (|lambda#202| arg0@@632)) )))
(assert  (=> true (forall (($Heap@@68 T@U) (|es#0@@1| T@U) ) (!  (=> (and (and (= (type $Heap@@68) (MapType0Type refType MapType1Type)) (= (type |es#0@@1|) (SeqType BoxType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.ToElements#canCall| |es#0@@1|) (and ($IsGoodHeap $Heap@@68) ($Is |es#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte)))))) (= (Upperbounded__Lexicographic__Byte__Order.__default.ToElements |es#0@@1|) (|Seq#Create| Tclass.Upperbounded__Lexicographic__Byte__Order.Element $Heap@@68 (|Seq#Length| |es#0@@1|) (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#202| |es#0@@1|) (|lambda#161| TInt (LitInt 0) (|Seq#Length| |es#0@@1|)) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ)))))) :qid |totalorderidfyUpperboundedLexicographicByteOrder.813:12| :skolemid |3780| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.ToElements |es#0@@1|) ($IsGoodHeap $Heap@@68)) ))))
(assert  (=> true (forall (($Heap@@69 T@U) (|es#0@@2| T@U) ) (!  (=> (and (and (= (type $Heap@@69) (MapType0Type refType MapType1Type)) (= (type |es#0@@2|) (SeqType BoxType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.ToElements#canCall| (Lit |es#0@@2|)) (and ($IsGoodHeap $Heap@@69) ($Is |es#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte)))))) (= (Upperbounded__Lexicographic__Byte__Order.__default.ToElements (Lit |es#0@@2|)) (|Seq#Create| Tclass.Upperbounded__Lexicographic__Byte__Order.Element $Heap@@69 (|Seq#Length| (Lit |es#0@@2|)) (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#202| (Lit |es#0@@2|)) (|lambda#161| TInt (LitInt 0) (|Seq#Length| (Lit |es#0@@2|))) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ)))))) :qid |totalorderidfyUpperboundedLexicographicByteOrder.813:12| :weight 3 :skolemid |3781| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.ToElements (Lit |es#0@@2|)) ($IsGoodHeap $Heap@@69)) ))))
(assert  (=> true (forall ((|a#0@@175| T@U) (|b#0@@129| T@U) ) (!  (=> (and (and (= (type |a#0@@175|) DatatypeTypeType) (= (type |b#0@@129|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@175| |b#0@@129|) (and ($Is |a#0@@175| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |b#0@@129| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (and (and (and (and (and (= (Upperbounded__Lexicographic__Byte__Order.__default.lte |a#0@@175| |b#0@@129|) (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |a#0@@175| |b#0@@129|)) (or (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |a#0@@175| |b#0@@129|) (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |b#0@@129| |a#0@@175|))) (forall ((|a#1@@6| T@U) (|b#1@@8| T@U) (|c#0@@12| T@U) ) (!  (=> (and (and (and (and (= (type |a#1@@6|) DatatypeTypeType) (= (type |b#1@@8|) DatatypeTypeType)) (= (type |c#0@@12|) DatatypeTypeType)) (and (and ($Is |a#1@@6| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |b#1@@8| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |c#0@@12| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (and (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |a#1@@6| |b#1@@8|) (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |b#1@@8| |c#0@@12|))) (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |a#1@@6| |c#0@@12|)) :qid |totalorderidfyUpperboundedLexicographicByteOrder.25:20| :skolemid |3782| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |a#1@@6| |c#0@@12|) (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |b#1@@8| |c#0@@12|)) :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |b#1@@8| |c#0@@12|) (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |a#1@@6| |b#1@@8|)) ))) (= (Upperbounded__Lexicographic__Byte__Order.__default.lte |a#0@@175| |b#0@@129|) (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |a#0@@175| |b#0@@129|))) (or (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |a#0@@175| |b#0@@129|) (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |b#0@@129| |a#0@@175|))) (=> (and (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |a#0@@175| |b#0@@129|) (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |b#0@@129| |a#0@@175|)) (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| |a#0@@175| |b#0@@129|))) (forall ((|a#2@@1| T@U) (|b#2@@1| T@U) (|c#1@@1| T@U) ) (!  (=> (and (and (and (and (= (type |a#2@@1|) DatatypeTypeType) (= (type |b#2@@1|) DatatypeTypeType)) (= (type |c#1@@1|) DatatypeTypeType)) (and (and ($Is |a#2@@1| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |b#2@@1| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |c#1@@1| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (and (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |a#2@@1| |b#2@@1|) (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |b#2@@1| |c#1@@1|))) (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |a#2@@1| |c#1@@1|)) :qid |totalorderidfyUpperboundedLexicographicByteOrder.199:20| :skolemid |3783| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |a#2@@1| |c#1@@1|) (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |b#2@@1| |c#1@@1|)) :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |b#2@@1| |c#1@@1|) (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |a#2@@1| |b#2@@1|)) )))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.22:17| :skolemid |3784| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lte |a#0@@175| |b#0@@129|)) ))))
(assert (forall ((|a#0@@176| T@U) (|b#0@@130| T@U) ) (!  (=> (and (and (= (type |a#0@@176|) DatatypeTypeType) (= (type |b#0@@130|) DatatypeTypeType)) (and ($Is |a#0@@176| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |b#0@@130| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.lte#requires| |a#0@@176| |b#0@@130|) true)) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.22:17| :skolemid |3785| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.lte#requires| |a#0@@176| |b#0@@130|)) )))
(assert (forall ((arg0@@633 T@U) ) (! (= (type (Upperbounded__Lexicographic__Byte__Order.Element.e arg0@@633)) (SeqType BoxType)) :qid |funType:Upperbounded__Lexicographic__Byte__Order.Element.e| :pattern ( (Upperbounded__Lexicographic__Byte__Order.Element.e arg0@@633)) )))
(assert  (=> true (forall ((|a#0@@177| T@U) (|b#0@@131| T@U) ) (!  (=> (and (and (= (type |a#0@@177|) DatatypeTypeType) (= (type |b#0@@131|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@177| |b#0@@131|) (and ($Is |a#0@@177| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |b#0@@131| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (=> (not (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q |b#0@@131|)) (=> (Upperbounded__Lexicographic__Byte__Order.Element.Element_q |a#0@@177|) (=> (Upperbounded__Lexicographic__Byte__Order.Element.Element_q |b#0@@131|) (|Lexicographic__Byte__Order.__default.lte#canCall| (Upperbounded__Lexicographic__Byte__Order.Element.e |a#0@@177|) (Upperbounded__Lexicographic__Byte__Order.Element.e |b#0@@131|))))) (= (Upperbounded__Lexicographic__Byte__Order.__default.lte |a#0@@177| |b#0@@131|)  (or (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q |b#0@@131|) (and (and (Upperbounded__Lexicographic__Byte__Order.Element.Element_q |a#0@@177|) (Upperbounded__Lexicographic__Byte__Order.Element.Element_q |b#0@@131|)) (Lexicographic__Byte__Order.__default.lte (Upperbounded__Lexicographic__Byte__Order.Element.e |a#0@@177|) (Upperbounded__Lexicographic__Byte__Order.Element.e |b#0@@131|))))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.22:17| :skolemid |3786| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lte |a#0@@177| |b#0@@131|)) ))))
(assert  (=> true (forall ((|a#0@@178| T@U) (|b#0@@132| T@U) ) (!  (=> (and (and (= (type |a#0@@178|) DatatypeTypeType) (= (type |b#0@@132|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@178|) (Lit |b#0@@132|)) (and ($Is |a#0@@178| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |b#0@@132| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (=> (not (U_2_bool (Lit (bool_2_U (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q (Lit |b#0@@132|)))))) (=> (U_2_bool (Lit (bool_2_U (Upperbounded__Lexicographic__Byte__Order.Element.Element_q (Lit |a#0@@178|))))) (=> (U_2_bool (Lit (bool_2_U (Upperbounded__Lexicographic__Byte__Order.Element.Element_q (Lit |b#0@@132|))))) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit (Upperbounded__Lexicographic__Byte__Order.Element.e (Lit |a#0@@178|))) (Lit (Upperbounded__Lexicographic__Byte__Order.Element.e (Lit |b#0@@132|))))))) (= (Upperbounded__Lexicographic__Byte__Order.__default.lte (Lit |a#0@@178|) (Lit |b#0@@132|)) (U_2_bool (Lit (bool_2_U  (or (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q (Lit |b#0@@132|)) (and (and (Upperbounded__Lexicographic__Byte__Order.Element.Element_q (Lit |a#0@@178|)) (Upperbounded__Lexicographic__Byte__Order.Element.Element_q (Lit |b#0@@132|))) (Lexicographic__Byte__Order.__default.lte (Lit (Upperbounded__Lexicographic__Byte__Order.Element.e (Lit |a#0@@178|))) (Lit (Upperbounded__Lexicographic__Byte__Order.Element.e (Lit |b#0@@132|)))))))))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.22:17| :weight 3 :skolemid |3787| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lte (Lit |a#0@@178|) (Lit |b#0@@132|))) ))))
(assert  (=> true (forall ((|a#0@@179| T@U) (|b#0@@133| T@U) ) (!  (=> (and (and (= (type |a#0@@179|) DatatypeTypeType) (= (type |b#0@@133|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.ltedef#canCall| |a#0@@179| |b#0@@133|) (and ($Is |a#0@@179| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |b#0@@133| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) true) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.27:20| :skolemid |3788| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |a#0@@179| |b#0@@133|)) ))))
(assert (forall ((|a#0@@180| T@U) (|b#0@@134| T@U) ) (!  (=> (and (and (= (type |a#0@@180|) DatatypeTypeType) (= (type |b#0@@134|) DatatypeTypeType)) (and ($Is |a#0@@180| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |b#0@@134| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.ltedef#requires| |a#0@@180| |b#0@@134|) true)) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.27:20| :skolemid |3789| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.ltedef#requires| |a#0@@180| |b#0@@134|)) )))
(assert  (=> true (forall ((|a#0@@181| T@U) (|b#0@@135| T@U) ) (!  (=> (and (and (= (type |a#0@@181|) DatatypeTypeType) (= (type |b#0@@135|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.ltedef#canCall| |a#0@@181| |b#0@@135|) (and ($Is |a#0@@181| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |b#0@@135| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (=> (not (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q |b#0@@135|)) (=> (Upperbounded__Lexicographic__Byte__Order.Element.Element_q |a#0@@181|) (=> (Upperbounded__Lexicographic__Byte__Order.Element.Element_q |b#0@@135|) (|Lexicographic__Byte__Order.__default.lte#canCall| (Upperbounded__Lexicographic__Byte__Order.Element.e |a#0@@181|) (Upperbounded__Lexicographic__Byte__Order.Element.e |b#0@@135|))))) (= (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |a#0@@181| |b#0@@135|)  (or (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q |b#0@@135|) (and (and (Upperbounded__Lexicographic__Byte__Order.Element.Element_q |a#0@@181|) (Upperbounded__Lexicographic__Byte__Order.Element.Element_q |b#0@@135|)) (Lexicographic__Byte__Order.__default.lte (Upperbounded__Lexicographic__Byte__Order.Element.e |a#0@@181|) (Upperbounded__Lexicographic__Byte__Order.Element.e |b#0@@135|))))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.27:20| :skolemid |3790| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.ltedef |a#0@@181| |b#0@@135|)) ))))
(assert  (=> true (forall ((|a#0@@182| T@U) (|b#0@@136| T@U) ) (!  (=> (and (and (= (type |a#0@@182|) DatatypeTypeType) (= (type |b#0@@136|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.ltedef#canCall| (Lit |a#0@@182|) (Lit |b#0@@136|)) (and ($Is |a#0@@182| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |b#0@@136| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (=> (not (U_2_bool (Lit (bool_2_U (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q (Lit |b#0@@136|)))))) (=> (U_2_bool (Lit (bool_2_U (Upperbounded__Lexicographic__Byte__Order.Element.Element_q (Lit |a#0@@182|))))) (=> (U_2_bool (Lit (bool_2_U (Upperbounded__Lexicographic__Byte__Order.Element.Element_q (Lit |b#0@@136|))))) (|Lexicographic__Byte__Order.__default.lte#canCall| (Lit (Upperbounded__Lexicographic__Byte__Order.Element.e (Lit |a#0@@182|))) (Lit (Upperbounded__Lexicographic__Byte__Order.Element.e (Lit |b#0@@136|))))))) (= (Upperbounded__Lexicographic__Byte__Order.__default.ltedef (Lit |a#0@@182|) (Lit |b#0@@136|)) (U_2_bool (Lit (bool_2_U  (or (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q (Lit |b#0@@136|)) (and (and (Upperbounded__Lexicographic__Byte__Order.Element.Element_q (Lit |a#0@@182|)) (Upperbounded__Lexicographic__Byte__Order.Element.Element_q (Lit |b#0@@136|))) (Lexicographic__Byte__Order.__default.lte (Lit (Upperbounded__Lexicographic__Byte__Order.Element.e (Lit |a#0@@182|))) (Lit (Upperbounded__Lexicographic__Byte__Order.Element.e (Lit |b#0@@136|)))))))))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.27:20| :weight 3 :skolemid |3791| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.ltedef (Lit |a#0@@182|) (Lit |b#0@@136|))) ))))
(assert (forall (($ly@@542 T@U) (|run#0@@160| T@U) (|needle#0@@61| T@U) ) (!  (=> (and (and (= (type $ly@@542) LayerTypeType) (= (type |run#0@@160|) (SeqType BoxType))) (= (type |needle#0@@61|) DatatypeTypeType)) (= (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@542) |run#0@@160| |needle#0@@61|) (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte $ly@@542 |run#0@@160| |needle#0@@61|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.264:12| :skolemid |3792| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@542) |run#0@@160| |needle#0@@61|)) )))
(assert (forall (($ly@@543 T@U) (|run#0@@161| T@U) (|needle#0@@62| T@U) ) (!  (=> (and (and (= (type $ly@@543) LayerTypeType) (= (type |run#0@@161|) (SeqType BoxType))) (= (type |needle#0@@62|) DatatypeTypeType)) (= (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte $ly@@543 |run#0@@161| |needle#0@@62|) (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte $LZ |run#0@@161| |needle#0@@62|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.264:12| :skolemid |3793| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte (AsFuelBottom $ly@@543) |run#0@@161| |needle#0@@62|)) )))
(assert (= (type StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted) LayerTypeType))
(assert  (=> true (forall (($ly@@544 T@U) (|run#0@@162| T@U) (|needle#0@@63| T@U) ) (!  (=> (and (and (and (= (type $ly@@544) LayerTypeType) (= (type |run#0@@162|) (SeqType BoxType))) (= (type |needle#0@@63|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.LargestLte#canCall| |run#0@@162| |needle#0@@63|) (and (and ($Is |run#0@@162| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |needle#0@@63| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted |run#0@@162|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte $ly@@544 |run#0@@162| |needle#0@@63|)) (< (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte $ly@@544 |run#0@@162| |needle#0@@63|) (|Seq#Length| |run#0@@162|))) (forall ((|i#0@@114| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@114|) (<= |i#0@@114| (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte $ly@@544 |run#0@@162| |needle#0@@63|))) (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@162| |i#0@@114|)) |needle#0@@63|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.267:20| :skolemid |3794| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@162| |i#0@@114|))) ))) (forall ((|i#1@@40| Int) ) (!  (=> true (=> (and (< (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte $ly@@544 |run#0@@162| |needle#0@@63|) |i#1@@40|) (< |i#1@@40| (|Seq#Length| |run#0@@162|))) (Upperbounded__Lexicographic__Byte__Order.__default.lt |needle#0@@63| ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@162| |i#1@@40|))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.268:20| :skolemid |3795| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@162| |i#1@@40|))) ))) (=> (|Seq#Contains| |run#0@@162| ($Box |needle#0@@63|)) (and (<= (LitInt 0) (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte $ly@@544 |run#0@@162| |needle#0@@63|)) (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@162| (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte $ly@@544 |run#0@@162| |needle#0@@63|))) |needle#0@@63|))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.264:12| :skolemid |3796| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte $ly@@544 |run#0@@162| |needle#0@@63|)) ))))
(assert (forall (($ly@@545 T@U) (|run#0@@163| T@U) (|needle#0@@64| T@U) ) (!  (=> (and (and (and (= (type $ly@@545) LayerTypeType) (= (type |run#0@@163|) (SeqType BoxType))) (= (type |needle#0@@64|) DatatypeTypeType)) (and ($Is |run#0@@163| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |needle#0@@64| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.LargestLte#requires| $ly@@545 |run#0@@163| |needle#0@@64|) (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted |run#0@@163|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.264:12| :skolemid |3797| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.LargestLte#requires| $ly@@545 |run#0@@163| |needle#0@@64|)) )))
(assert  (and (= (type MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted0) LayerTypeType) (= (type StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsSorted) LayerTypeType)))
(assert  (=> true (forall (($ly@@546 T@U) (|run#0@@164| T@U) (|needle#0@@65| T@U) ) (!  (=> (and (and (and (= (type $ly@@546) LayerTypeType) (= (type |run#0@@164|) (SeqType BoxType))) (= (type |needle#0@@65|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.LargestLte#canCall| |run#0@@164| |needle#0@@65|) (and (and ($Is |run#0@@164| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |needle#0@@65| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted |run#0@@164|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@164|) (LitInt 0))) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| |needle#0@@65| ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@164| (LitInt 0))))) (=> (not (or (= (|Seq#Length| |run#0@@164|) (LitInt 0)) (Upperbounded__Lexicographic__Byte__Order.__default.lt |needle#0@@65| ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@164| (LitInt 0)))))) (|Upperbounded__Lexicographic__Byte__Order.__default.LargestLte#canCall| (|Seq#Drop| |run#0@@164| (LitInt 1)) |needle#0@@65|))) (and (and (and (= StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted0)) (= StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted0)))) (= (AsFuelBottom MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted0) MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted0)) (= (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@546) |run#0@@164| |needle#0@@65|) (ite  (or (= (|Seq#Length| |run#0@@164|) (LitInt 0)) (Upperbounded__Lexicographic__Byte__Order.__default.lt |needle#0@@65| ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@164| (LitInt 0))))) (- 0 1) (+ 1 (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte $ly@@546 (|Seq#Drop| |run#0@@164| (LitInt 1)) |needle#0@@65|))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.264:12| :skolemid |3798| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@546) |run#0@@164| |needle#0@@65|)) ))))
(assert (= (type MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted1) LayerTypeType))
(assert  (=> true (forall (($ly@@547 T@U) (|run#0@@165| T@U) (|needle#0@@66| T@U) ) (!  (=> (and (and (and (= (type $ly@@547) LayerTypeType) (= (type |run#0@@165|) (SeqType BoxType))) (= (type |needle#0@@66|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit |run#0@@165|) (Lit |needle#0@@66|)) (and (and ($Is |run#0@@165| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |needle#0@@66| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@165|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@165|)) (LitInt 0))) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| (Lit |needle#0@@66|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |run#0@@165|) (LitInt 0))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@165|)) (LitInt 0)) (Upperbounded__Lexicographic__Byte__Order.__default.lt (Lit |needle#0@@66|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |run#0@@165|) (LitInt 0)))))) (|Upperbounded__Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit (|Seq#Drop| (Lit |run#0@@165|) (LitInt 1))) (Lit |needle#0@@66|)))) (and (and (and (= StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted1)) (= StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted1)))) (= (AsFuelBottom MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted1) MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted1)) (= (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@547) (Lit |run#0@@165|) (Lit |needle#0@@66|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@165|)) (LitInt 0)) (Upperbounded__Lexicographic__Byte__Order.__default.lt (Lit |needle#0@@66|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |run#0@@165|) (LitInt 0))))) (- 0 1) (+ 1 (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@547) (Lit (|Seq#Drop| (Lit |run#0@@165|) (LitInt 1))) (Lit |needle#0@@66|)))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.264:12| :weight 3 :skolemid |3799| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte ($LS $ly@@547) (Lit |run#0@@165|) (Lit |needle#0@@66|))) ))))
(assert (forall (($ly@@548 T@U) (|run#0@@166| T@U) (|needle#0@@67| T@U) ) (!  (=> (and (and (= (type $ly@@548) LayerTypeType) (= (type |run#0@@166|) (SeqType BoxType))) (= (type |needle#0@@67|) DatatypeTypeType)) (= (Upperbounded__Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@548) |run#0@@166| |needle#0@@67|) (Upperbounded__Lexicographic__Byte__Order.__default.LargestLt $ly@@548 |run#0@@166| |needle#0@@67|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.360:12| :skolemid |3800| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@548) |run#0@@166| |needle#0@@67|)) )))
(assert (forall (($ly@@549 T@U) (|run#0@@167| T@U) (|needle#0@@68| T@U) ) (!  (=> (and (and (= (type $ly@@549) LayerTypeType) (= (type |run#0@@167|) (SeqType BoxType))) (= (type |needle#0@@68|) DatatypeTypeType)) (= (Upperbounded__Lexicographic__Byte__Order.__default.LargestLt $ly@@549 |run#0@@167| |needle#0@@68|) (Upperbounded__Lexicographic__Byte__Order.__default.LargestLt $LZ |run#0@@167| |needle#0@@68|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.360:12| :skolemid |3801| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.LargestLt (AsFuelBottom $ly@@549) |run#0@@167| |needle#0@@68|)) )))
(assert  (=> true (forall (($ly@@550 T@U) (|run#0@@168| T@U) (|needle#0@@69| T@U) ) (!  (=> (and (and (and (= (type $ly@@550) LayerTypeType) (= (type |run#0@@168|) (SeqType BoxType))) (= (type |needle#0@@69|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.LargestLt#canCall| |run#0@@168| |needle#0@@69|) (and (and ($Is |run#0@@168| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |needle#0@@69| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted |run#0@@168|)))) (and (and (and (and (<= (LitInt (- 0 1)) (Upperbounded__Lexicographic__Byte__Order.__default.LargestLt $ly@@550 |run#0@@168| |needle#0@@69|)) (< (Upperbounded__Lexicographic__Byte__Order.__default.LargestLt $ly@@550 |run#0@@168| |needle#0@@69|) (|Seq#Length| |run#0@@168|))) (forall ((|i#0@@115| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |i#0@@115|) (<= |i#0@@115| (Upperbounded__Lexicographic__Byte__Order.__default.LargestLt $ly@@550 |run#0@@168| |needle#0@@69|))) (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@168| |i#0@@115|)) |needle#0@@69|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.363:20| :skolemid |3802| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@168| |i#0@@115|))) ))) (forall ((|i#1@@41| Int) ) (!  (=> true (=> (and (< (Upperbounded__Lexicographic__Byte__Order.__default.LargestLt $ly@@550 |run#0@@168| |needle#0@@69|) |i#1@@41|) (< |i#1@@41| (|Seq#Length| |run#0@@168|))) (Upperbounded__Lexicographic__Byte__Order.__default.lte |needle#0@@69| ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@168| |i#1@@41|))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.364:20| :skolemid |3803| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@168| |i#1@@41|))) ))) (=> (|Seq#Contains| |run#0@@168| ($Box |needle#0@@69|)) (and (< (+ (Upperbounded__Lexicographic__Byte__Order.__default.LargestLt $ly@@550 |run#0@@168| |needle#0@@69|) 1) (|Seq#Length| |run#0@@168|)) (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@168| (+ (Upperbounded__Lexicographic__Byte__Order.__default.LargestLt $ly@@550 |run#0@@168| |needle#0@@69|) 1))) |needle#0@@69|))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.360:12| :skolemid |3804| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.LargestLt $ly@@550 |run#0@@168| |needle#0@@69|)) ))))
(assert (forall (($ly@@551 T@U) (|run#0@@169| T@U) (|needle#0@@70| T@U) ) (!  (=> (and (and (and (= (type $ly@@551) LayerTypeType) (= (type |run#0@@169|) (SeqType BoxType))) (= (type |needle#0@@70|) DatatypeTypeType)) (and ($Is |run#0@@169| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |needle#0@@70| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.LargestLt#requires| $ly@@551 |run#0@@169| |needle#0@@70|) (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted |run#0@@169|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.360:12| :skolemid |3805| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.LargestLt#requires| $ly@@551 |run#0@@169| |needle#0@@70|)) )))
(assert (= (type MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted2) LayerTypeType))
(assert  (=> true (forall (($ly@@552 T@U) (|run#0@@170| T@U) (|needle#0@@71| T@U) ) (!  (=> (and (and (and (= (type $ly@@552) LayerTypeType) (= (type |run#0@@170|) (SeqType BoxType))) (= (type |needle#0@@71|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.LargestLt#canCall| |run#0@@170| |needle#0@@71|) (and (and ($Is |run#0@@170| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |needle#0@@71| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted |run#0@@170|)))) (and (and (=> (not (= (|Seq#Length| |run#0@@170|) (LitInt 0))) (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| |needle#0@@71| ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@170| (LitInt 0))))) (=> (not (or (= (|Seq#Length| |run#0@@170|) (LitInt 0)) (Upperbounded__Lexicographic__Byte__Order.__default.lte |needle#0@@71| ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@170| (LitInt 0)))))) (|Upperbounded__Lexicographic__Byte__Order.__default.LargestLt#canCall| (|Seq#Drop| |run#0@@170| (LitInt 1)) |needle#0@@71|))) (and (and (and (= StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted2)) (= StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted2)))) (= (AsFuelBottom MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted2) MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted2)) (= (Upperbounded__Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@552) |run#0@@170| |needle#0@@71|) (ite  (or (= (|Seq#Length| |run#0@@170|) (LitInt 0)) (Upperbounded__Lexicographic__Byte__Order.__default.lte |needle#0@@71| ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@170| (LitInt 0))))) (- 0 1) (+ 1 (Upperbounded__Lexicographic__Byte__Order.__default.LargestLt $ly@@552 (|Seq#Drop| |run#0@@170| (LitInt 1)) |needle#0@@71|))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.360:12| :skolemid |3806| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@552) |run#0@@170| |needle#0@@71|)) ))))
(assert (= (type MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted3) LayerTypeType))
(assert  (=> true (forall (($ly@@553 T@U) (|run#0@@171| T@U) (|needle#0@@72| T@U) ) (!  (=> (and (and (and (= (type $ly@@553) LayerTypeType) (= (type |run#0@@171|) (SeqType BoxType))) (= (type |needle#0@@72|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.LargestLt#canCall| (Lit |run#0@@171|) (Lit |needle#0@@72|)) (and (and ($Is |run#0@@171| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |needle#0@@72| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@171|))))) (and (and (=> (not (= (|Seq#Length| (Lit |run#0@@171|)) (LitInt 0))) (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| (Lit |needle#0@@72|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |run#0@@171|) (LitInt 0))))) (=> (not (or (= (|Seq#Length| (Lit |run#0@@171|)) (LitInt 0)) (Upperbounded__Lexicographic__Byte__Order.__default.lte (Lit |needle#0@@72|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |run#0@@171|) (LitInt 0)))))) (|Upperbounded__Lexicographic__Byte__Order.__default.LargestLt#canCall| (Lit (|Seq#Drop| (Lit |run#0@@171|) (LitInt 1))) (Lit |needle#0@@72|)))) (and (and (and (= StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted3)) (= StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted3)))) (= (AsFuelBottom MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted3) MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted3)) (= (Upperbounded__Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@553) (Lit |run#0@@171|) (Lit |needle#0@@72|)) (ite  (or (= (|Seq#Length| (Lit |run#0@@171|)) (LitInt 0)) (Upperbounded__Lexicographic__Byte__Order.__default.lte (Lit |needle#0@@72|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |run#0@@171|) (LitInt 0))))) (- 0 1) (+ 1 (Upperbounded__Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@553) (Lit (|Seq#Drop| (Lit |run#0@@171|) (LitInt 1))) (Lit |needle#0@@72|)))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.360:12| :weight 3 :skolemid |3807| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.LargestLt ($LS $ly@@553) (Lit |run#0@@171|) (Lit |needle#0@@72|))) ))))
(assert (forall (($ly@@554 T@U) (|run#0@@172| T@U) (|needle#0@@73| T@U) ) (!  (=> (and (and (= (type $ly@@554) LayerTypeType) (= (type |run#0@@172|) (SeqType BoxType))) (= (type |needle#0@@73|) DatatypeTypeType)) (= (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@554) |run#0@@172| |needle#0@@73|) (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@554 |run#0@@172| |needle#0@@73|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.392:12| :skolemid |3808| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@554) |run#0@@172| |needle#0@@73|)) )))
(assert (forall (($ly@@555 T@U) (|run#0@@173| T@U) (|needle#0@@74| T@U) ) (!  (=> (and (and (= (type $ly@@555) LayerTypeType) (= (type |run#0@@173|) (SeqType BoxType))) (= (type |needle#0@@74|) DatatypeTypeType)) (= (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@555 |run#0@@173| |needle#0@@74|) (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte $LZ |run#0@@173| |needle#0@@74|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.392:12| :skolemid |3809| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte (AsFuelBottom $ly@@555) |run#0@@173| |needle#0@@74|)) )))
(assert  (=> true (forall (($ly@@556 T@U) (|run#0@@174| T@U) (|needle#0@@75| T@U) ) (!  (=> (and (and (and (= (type $ly@@556) LayerTypeType) (= (type |run#0@@174|) (SeqType BoxType))) (= (type |needle#0@@75|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@174| |needle#0@@75|) (and (and ($Is |run#0@@174| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |needle#0@@75| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted |run#0@@174|)))) (and (and (and (<= (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@556 |run#0@@174| |needle#0@@75|) (|Seq#Length| |run#0@@174|)) (forall ((|i#0@@116| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@116|) (< |i#0@@116| (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@556 |run#0@@174| |needle#0@@75|))) (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@174| |i#0@@116|)) |needle#0@@75|)) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.395:20| :skolemid |3810| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@174| |i#0@@116|))) ))) (forall ((|i#1@@42| Int) ) (!  (=> (and (<= (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@556 |run#0@@174| |needle#0@@75|) |i#1@@42|) (< |i#1@@42| (|Seq#Length| |run#0@@174|))) (Upperbounded__Lexicographic__Byte__Order.__default.lte |needle#0@@75| ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@174| |i#1@@42|)))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.396:20| :skolemid |3811| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@174| |i#1@@42|))) ))) (<= (LitInt 0) (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@556 |run#0@@174| |needle#0@@75|)))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.392:12| :skolemid |3812| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@556 |run#0@@174| |needle#0@@75|)) ))))
(assert (forall (($ly@@557 T@U) (|run#0@@175| T@U) (|needle#0@@76| T@U) ) (!  (=> (and (and (and (= (type $ly@@557) LayerTypeType) (= (type |run#0@@175|) (SeqType BoxType))) (= (type |needle#0@@76|) DatatypeTypeType)) (and ($Is |run#0@@175| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |needle#0@@76| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| $ly@@557 |run#0@@175| |needle#0@@76|) (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted |run#0@@175|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.392:12| :skolemid |3813| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte#requires| $ly@@557 |run#0@@175| |needle#0@@76|)) )))
(assert (= (type MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted4) LayerTypeType))
(assert  (=> true (forall (($ly@@558 T@U) (|run#0@@176| T@U) (|needle#0@@77| T@U) ) (!  (=> (and (and (and (= (type $ly@@558) LayerTypeType) (= (type |run#0@@176|) (SeqType BoxType))) (= (type |needle#0@@77|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| |run#0@@176| |needle#0@@77|) (and (and ($Is |run#0@@176| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |needle#0@@77| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted |run#0@@176|)))) (and (=> (not (= (|Seq#Length| |run#0@@176|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element |run#0@@176|) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Upperbounded__Lexicographic__Byte__Order.Element |run#0@@176|)) |needle#0@@77|)) (=> (not (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Upperbounded__Lexicographic__Byte__Order.Element |run#0@@176|)) |needle#0@@77|)) (and (|Sequences.__default.DropLast#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element |run#0@@176|) (|Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (Sequences.__default.DropLast Tclass.Upperbounded__Lexicographic__Byte__Order.Element |run#0@@176|) |needle#0@@77|))))) (and (and (and (= StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted4)) (= StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted4)))) (= (AsFuelBottom MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted4) MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted4)) (= (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@558) |run#0@@176| |needle#0@@77|) (ite (= (|Seq#Length| |run#0@@176|) (LitInt 0)) 0 (ite (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Upperbounded__Lexicographic__Byte__Order.Element |run#0@@176|)) |needle#0@@77|) (|Seq#Length| |run#0@@176|) (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte $ly@@558 (Sequences.__default.DropLast Tclass.Upperbounded__Lexicographic__Byte__Order.Element |run#0@@176|) |needle#0@@77|))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.392:12| :skolemid |3814| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@558) |run#0@@176| |needle#0@@77|)) ))))
(assert (= (type MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted5) LayerTypeType))
(assert  (=> true (forall (($ly@@559 T@U) (|run#0@@177| T@U) (|needle#0@@78| T@U) ) (!  (=> (and (and (and (= (type $ly@@559) LayerTypeType) (= (type |run#0@@177|) (SeqType BoxType))) (= (type |needle#0@@78|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (Lit |run#0@@177|) (Lit |needle#0@@78|)) (and (and ($Is |run#0@@177| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |needle#0@@78| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@177|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@177|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |run#0@@177|)) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |run#0@@177|)))) (Lit |needle#0@@78|))) (=> (not (U_2_bool (Lit (bool_2_U (Upperbounded__Lexicographic__Byte__Order.__default.lt (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |run#0@@177|)))) (Lit |needle#0@@78|)))))) (and (|Sequences.__default.DropLast#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |run#0@@177|)) (|Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte#canCall| (Lit (Sequences.__default.DropLast Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |run#0@@177|))) (Lit |needle#0@@78|)))))) (and (and (and (= StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted5)) (= StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted5)))) (= (AsFuelBottom MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted5) MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted5)) (= (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@559) (Lit |run#0@@177|) (Lit |needle#0@@78|)) (ite (= (|Seq#Length| (Lit |run#0@@177|)) (LitInt 0)) 0 (ite (Upperbounded__Lexicographic__Byte__Order.__default.lt (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |run#0@@177|)))) (Lit |needle#0@@78|)) (|Seq#Length| (Lit |run#0@@177|)) (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@559) (Lit (Sequences.__default.DropLast Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |run#0@@177|))) (Lit |needle#0@@78|)))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.392:12| :weight 3 :skolemid |3815| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGte ($LS $ly@@559) (Lit |run#0@@177|) (Lit |needle#0@@78|))) ))))
(assert (forall (($ly@@560 T@U) (|s#0@@199| T@U) (|key#0@@102| T@U) (|lo#0@@27| Int) (|hi#0@@27| Int) ) (!  (=> (and (and (= (type $ly@@560) LayerTypeType) (= (type |s#0@@199|) (SeqType BoxType))) (= (type |key#0@@102|) DatatypeTypeType)) (= (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@560) |s#0@@199| |key#0@@102| |lo#0@@27| |hi#0@@27|) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@560 |s#0@@199| |key#0@@102| |lo#0@@27| |hi#0@@27|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.423:12| :skolemid |3816| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@560) |s#0@@199| |key#0@@102| |lo#0@@27| |hi#0@@27|)) )))
(assert (forall (($ly@@561 T@U) (|s#0@@200| T@U) (|key#0@@103| T@U) (|lo#0@@28| Int) (|hi#0@@28| Int) ) (!  (=> (and (and (= (type $ly@@561) LayerTypeType) (= (type |s#0@@200|) (SeqType BoxType))) (= (type |key#0@@103|) DatatypeTypeType)) (= (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@561 |s#0@@200| |key#0@@103| |lo#0@@28| |hi#0@@28|) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $LZ |s#0@@200| |key#0@@103| |lo#0@@28| |hi#0@@28|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.423:12| :skolemid |3817| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter (AsFuelBottom $ly@@561) |s#0@@200| |key#0@@103| |lo#0@@28| |hi#0@@28|)) )))
(assert  (=> true (forall (($ly@@562 T@U) (|s#0@@201| T@U) (|key#0@@104| T@U) (|lo#0@@29| Int) (|hi#0@@29| Int) ) (!  (=> (and (and (and (= (type $ly@@562) LayerTypeType) (= (type |s#0@@201|) (SeqType BoxType))) (= (type |key#0@@104|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@201| |key#0@@104| |lo#0@@29| |hi#0@@29|) (and (and ($Is |s#0@@201| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@104| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (and (and (and (and (<= (LitInt 0) |lo#0@@29|) (< |lo#0@@29| |hi#0@@29|)) (<= |hi#0@@29| (+ (|Seq#Length| |s#0@@201|) 1))) (=> (> |lo#0@@29| 0) (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@201| (- |lo#0@@29| 1))) |key#0@@104|))) (=> (<= |hi#0@@29| (|Seq#Length| |s#0@@201|)) (Upperbounded__Lexicographic__Byte__Order.__default.lte |key#0@@104| ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@201| (- |hi#0@@29| 1))))))))) (and (and (and (<= (LitInt 0) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@562 |s#0@@201| |key#0@@104| |lo#0@@29| |hi#0@@29|)) (<= (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@562 |s#0@@201| |key#0@@104| |lo#0@@29| |hi#0@@29|) (|Seq#Length| |s#0@@201|))) (=> (> (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@562 |s#0@@201| |key#0@@104| |lo#0@@29| |hi#0@@29|) 0) (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@201| (- (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@562 |s#0@@201| |key#0@@104| |lo#0@@29| |hi#0@@29|) 1))) |key#0@@104|))) (=> (< (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@562 |s#0@@201| |key#0@@104| |lo#0@@29| |hi#0@@29|) (|Seq#Length| |s#0@@201|)) (Upperbounded__Lexicographic__Byte__Order.__default.lte |key#0@@104| ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@201| (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@562 |s#0@@201| |key#0@@104| |lo#0@@29| |hi#0@@29|))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.423:12| :skolemid |3818| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@562 |s#0@@201| |key#0@@104| |lo#0@@29| |hi#0@@29|)) ))))
(assert (forall (($ly@@563 T@U) (|s#0@@202| T@U) (|key#0@@105| T@U) (|lo#0@@30| Int) (|hi#0@@30| Int) ) (!  (=> (and (and (and (= (type $ly@@563) LayerTypeType) (= (type |s#0@@202|) (SeqType BoxType))) (= (type |key#0@@105|) DatatypeTypeType)) (and ($Is |s#0@@202| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@105| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@563 |s#0@@202| |key#0@@105| |lo#0@@30| |hi#0@@30|)  (and (and (and (and (<= (LitInt 0) |lo#0@@30|) (< |lo#0@@30| |hi#0@@30|)) (<= |hi#0@@30| (+ (|Seq#Length| |s#0@@202|) 1))) (=> (> |lo#0@@30| 0) (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@202| (- |lo#0@@30| 1))) |key#0@@105|))) (=> (<= |hi#0@@30| (|Seq#Length| |s#0@@202|)) (Upperbounded__Lexicographic__Byte__Order.__default.lte |key#0@@105| ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@202| (- |hi#0@@30| 1)))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.423:12| :skolemid |3819| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#requires| $ly@@563 |s#0@@202| |key#0@@105| |lo#0@@30| |hi#0@@30|)) )))
(assert  (=> true (forall (($ly@@564 T@U) (|s#0@@203| T@U) (|key#0@@106| T@U) (|lo#0@@31| Int) (|hi#0@@31| Int) ) (!  (=> (and (and (and (= (type $ly@@564) LayerTypeType) (= (type |s#0@@203|) (SeqType BoxType))) (= (type |key#0@@106|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@203| |key#0@@106| |lo#0@@31| |hi#0@@31|) (and (and ($Is |s#0@@203| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@106| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (and (and (and (and (<= (LitInt 0) |lo#0@@31|) (< |lo#0@@31| |hi#0@@31|)) (<= |hi#0@@31| (+ (|Seq#Length| |s#0@@203|) 1))) (=> (> |lo#0@@31| 0) (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@203| (- |lo#0@@31| 1))) |key#0@@106|))) (=> (<= |hi#0@@31| (|Seq#Length| |s#0@@203|)) (Upperbounded__Lexicographic__Byte__Order.__default.lte |key#0@@106| ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@203| (- |hi#0@@31| 1))))))))) (and (=> (< (+ |lo#0@@31| 1) |hi#0@@31|) (let ((|mid#0@@7| (Div (+ |lo#0@@31| |hi#0@@31|) (LitInt 2)))) (and (and (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@203| (- |mid#0@@7| 1))) |key#0@@106|) (=> (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@203| (- |mid#0@@7| 1))) |key#0@@106|) (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@203| |key#0@@106| |mid#0@@7| |hi#0@@31|))) (=> (not (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@203| (- |mid#0@@7| 1))) |key#0@@106|)) (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@203| |key#0@@106| |lo#0@@31| |mid#0@@7|))))) (= (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@564) |s#0@@203| |key#0@@106| |lo#0@@31| |hi#0@@31|) (ite (< (+ |lo#0@@31| 1) |hi#0@@31|) (let ((|mid#0@@8| (Div (+ |lo#0@@31| |hi#0@@31|) (LitInt 2)))) (ite (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@203| (- |mid#0@@8| 1))) |key#0@@106|) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@564 |s#0@@203| |key#0@@106| |mid#0@@8| |hi#0@@31|) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter $ly@@564 |s#0@@203| |key#0@@106| |lo#0@@31| |mid#0@@8|))) |lo#0@@31|)))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.423:12| :skolemid |3820| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@564) |s#0@@203| |key#0@@106| |lo#0@@31| |hi#0@@31|)) ))))
(assert  (=> true (forall (($ly@@565 T@U) (|s#0@@204| T@U) (|key#0@@107| T@U) (|lo#0@@32| Int) (|hi#0@@32| Int) ) (!  (=> (and (and (and (= (type $ly@@565) LayerTypeType) (= (type |s#0@@204|) (SeqType BoxType))) (= (type |key#0@@107|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@204| |key#0@@107| (LitInt |lo#0@@32|) (LitInt |hi#0@@32|)) (and (and ($Is |s#0@@204| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@107| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@32|)) (< |lo#0@@32| |hi#0@@32|)) (<= (LitInt |hi#0@@32|) (+ (|Seq#Length| |s#0@@204|) 1))) (=> (> |lo#0@@32| 0) (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@204| (LitInt (- |lo#0@@32| 1)))) |key#0@@107|))) (=> (<= (LitInt |hi#0@@32|) (|Seq#Length| |s#0@@204|)) (Upperbounded__Lexicographic__Byte__Order.__default.lte |key#0@@107| ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@204| (LitInt (- |hi#0@@32| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@32| 1) |hi#0@@32|)))) (let ((|mid#1@@7| (LitInt (Div (+ |lo#0@@32| |hi#0@@32|) (LitInt 2))))) (and (and (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@204| (- |mid#1@@7| 1))) |key#0@@107|) (=> (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@204| (- |mid#1@@7| 1))) |key#0@@107|) (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@204| |key#0@@107| |mid#1@@7| (LitInt |hi#0@@32|)))) (=> (not (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@204| (- |mid#1@@7| 1))) |key#0@@107|)) (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@204| |key#0@@107| (LitInt |lo#0@@32|) |mid#1@@7|))))) (= (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@565) |s#0@@204| |key#0@@107| (LitInt |lo#0@@32|) (LitInt |hi#0@@32|)) (ite (< (+ |lo#0@@32| 1) |hi#0@@32|) (let ((|mid#1@@8| (LitInt (Div (+ |lo#0@@32| |hi#0@@32|) (LitInt 2))))) (ite (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@204| (LitInt (- |mid#1@@8| 1)))) |key#0@@107|) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@565) |s#0@@204| |key#0@@107| |mid#1@@8| (LitInt |hi#0@@32|)) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@565) |s#0@@204| |key#0@@107| (LitInt |lo#0@@32|) |mid#1@@8|))) |lo#0@@32|)))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.423:12| :weight 3 :skolemid |3821| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@565) |s#0@@204| |key#0@@107| (LitInt |lo#0@@32|) (LitInt |hi#0@@32|))) ))))
(assert  (=> true (forall (($ly@@566 T@U) (|s#0@@205| T@U) (|key#0@@108| T@U) (|lo#0@@33| Int) (|hi#0@@33| Int) ) (!  (=> (and (and (and (= (type $ly@@566) LayerTypeType) (= (type |s#0@@205|) (SeqType BoxType))) (= (type |key#0@@108|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@205|) (Lit |key#0@@108|) (LitInt |lo#0@@33|) (LitInt |hi#0@@33|)) (and (and ($Is |s#0@@205| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@108| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@33|)) (< |lo#0@@33| |hi#0@@33|)) (<= (LitInt |hi#0@@33|) (+ (|Seq#Length| (Lit |s#0@@205|)) 1))) (=> (> |lo#0@@33| 0) (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@205|) (LitInt (- |lo#0@@33| 1)))) (Lit |key#0@@108|)))) (=> (<= (LitInt |hi#0@@33|) (|Seq#Length| (Lit |s#0@@205|))) (Upperbounded__Lexicographic__Byte__Order.__default.lte (Lit |key#0@@108|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@205|) (LitInt (- |hi#0@@33| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@33| 1) |hi#0@@33|)))) (let ((|mid#2@@7| (LitInt (Div (+ |lo#0@@33| |hi#0@@33|) (LitInt 2))))) (and (and (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@205|) (- |mid#2@@7| 1))) (Lit |key#0@@108|)) (=> (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@205|) (- |mid#2@@7| 1))) (Lit |key#0@@108|)) (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@205|) (Lit |key#0@@108|) |mid#2@@7| (LitInt |hi#0@@33|)))) (=> (not (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@205|) (- |mid#2@@7| 1))) (Lit |key#0@@108|))) (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@205|) (Lit |key#0@@108|) (LitInt |lo#0@@33|) |mid#2@@7|))))) (= (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@566) (Lit |s#0@@205|) (Lit |key#0@@108|) (LitInt |lo#0@@33|) (LitInt |hi#0@@33|)) (ite (< (+ |lo#0@@33| 1) |hi#0@@33|) (let ((|mid#2@@8| (LitInt (Div (+ |lo#0@@33| |hi#0@@33|) (LitInt 2))))) (ite (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@205|) (LitInt (- |mid#2@@8| 1)))) (Lit |key#0@@108|)) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@566) (Lit |s#0@@205|) (Lit |key#0@@108|) |mid#2@@8| (LitInt |hi#0@@33|)) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@566) (Lit |s#0@@205|) (Lit |key#0@@108|) (LitInt |lo#0@@33|) |mid#2@@8|))) |lo#0@@33|)))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.423:12| :weight 3 :skolemid |3822| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $ly@@566) (Lit |s#0@@205|) (Lit |key#0@@108|) (LitInt |lo#0@@33|) (LitInt |hi#0@@33|))) ))))
(assert (forall (($ly@@567 T@U) (|s#0@@206| T@U) (|key#0@@109| T@U) ) (!  (=> (and (and (= (type $ly@@567) LayerTypeType) (= (type |s#0@@206|) (SeqType BoxType))) (= (type |key#0@@109|) DatatypeTypeType)) (= (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@567) |s#0@@206| |key#0@@109|) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@567 |s#0@@206| |key#0@@109|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.443:22| :skolemid |3823| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@567) |s#0@@206| |key#0@@109|)) )))
(assert (forall (($ly@@568 T@U) (|s#0@@207| T@U) (|key#0@@110| T@U) ) (!  (=> (and (and (= (type $ly@@568) LayerTypeType) (= (type |s#0@@207|) (SeqType BoxType))) (= (type |key#0@@110|) DatatypeTypeType)) (= (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@568 |s#0@@207| |key#0@@110|) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $LZ |s#0@@207| |key#0@@110|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.443:22| :skolemid |3824| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte (AsFuelBottom $ly@@568) |s#0@@207| |key#0@@110|)) )))
(assert  (=> true (forall (($ly@@569 T@U) (|s#0@@208| T@U) (|key#0@@111| T@U) ) (!  (=> (and (and (and (= (type $ly@@569) LayerTypeType) (= (type |s#0@@208|) (SeqType BoxType))) (= (type |key#0@@111|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@208| |key#0@@111|) (and ($Is |s#0@@208| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@111| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (and (and (<= (LitInt 0) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@569 |s#0@@208| |key#0@@111|)) (<= (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@569 |s#0@@208| |key#0@@111|) (|Seq#Length| |s#0@@208|))) (=> (> (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@569 |s#0@@208| |key#0@@111|) 0) (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@208| (- (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@569 |s#0@@208| |key#0@@111|) 1))) |key#0@@111|))) (=> (< (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@569 |s#0@@208| |key#0@@111|) (|Seq#Length| |s#0@@208|)) (Upperbounded__Lexicographic__Byte__Order.__default.lte |key#0@@111| ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@208| (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@569 |s#0@@208| |key#0@@111|))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.443:22| :skolemid |3825| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte $ly@@569 |s#0@@208| |key#0@@111|)) ))))
(assert (forall (($ly@@570 T@U) (|s#0@@209| T@U) (|key#0@@112| T@U) ) (!  (=> (and (and (and (= (type $ly@@570) LayerTypeType) (= (type |s#0@@209|) (SeqType BoxType))) (= (type |key#0@@112|) DatatypeTypeType)) (and ($Is |s#0@@209| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@112| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@570 |s#0@@209| |key#0@@112|) true)) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.443:22| :skolemid |3826| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#requires| $ly@@570 |s#0@@209| |key#0@@112|)) )))
(assert  (=> true (forall (($ly@@571 T@U) (|s#0@@210| T@U) (|key#0@@113| T@U) ) (!  (=> (and (and (and (= (type $ly@@571) LayerTypeType) (= (type |s#0@@210|) (SeqType BoxType))) (= (type |key#0@@113|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| |s#0@@210| |key#0@@113|) (and ($Is |s#0@@210| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@113| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| |s#0@@210| |key#0@@113| (LitInt 0) (+ (|Seq#Length| |s#0@@210|) 1)) (= (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@571) |s#0@@210| |key#0@@113|) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) |s#0@@210| |key#0@@113| (LitInt 0) (+ (|Seq#Length| |s#0@@210|) 1))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.443:22| :skolemid |3827| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@571) |s#0@@210| |key#0@@113|)) ))))
(assert  (=> true (forall (($ly@@572 T@U) (|s#0@@211| T@U) (|key#0@@114| T@U) ) (!  (=> (and (and (and (= (type $ly@@572) LayerTypeType) (= (type |s#0@@211|) (SeqType BoxType))) (= (type |key#0@@114|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (Lit |s#0@@211|) (Lit |key#0@@114|)) (and ($Is |s#0@@211| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@114| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter#canCall| (Lit |s#0@@211|) (Lit |key#0@@114|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@211|)) 1)) (= (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@572) (Lit |s#0@@211|) (Lit |key#0@@114|)) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGteIter ($LS $LZ) (Lit |s#0@@211|) (Lit |key#0@@114|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@211|)) 1))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.443:22| :weight 3 :skolemid |3828| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte ($LS $ly@@572) (Lit |s#0@@211|) (Lit |key#0@@114|))) ))))
(assert (forall (($ly@@573 T@U) (|run#0@@178| T@U) (|needle#0@@79| T@U) ) (!  (=> (and (and (= (type $ly@@573) LayerTypeType) (= (type |run#0@@178|) (SeqType BoxType))) (= (type |needle#0@@79|) DatatypeTypeType)) (= (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@573) |run#0@@178| |needle#0@@79|) (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@573 |run#0@@178| |needle#0@@79|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.451:12| :skolemid |3829| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@573) |run#0@@178| |needle#0@@79|)) )))
(assert (forall (($ly@@574 T@U) (|run#0@@179| T@U) (|needle#0@@80| T@U) ) (!  (=> (and (and (= (type $ly@@574) LayerTypeType) (= (type |run#0@@179|) (SeqType BoxType))) (= (type |needle#0@@80|) DatatypeTypeType)) (= (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@574 |run#0@@179| |needle#0@@80|) (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt $LZ |run#0@@179| |needle#0@@80|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.451:12| :skolemid |3830| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt (AsFuelBottom $ly@@574) |run#0@@179| |needle#0@@80|)) )))
(assert  (=> true (forall (($ly@@575 T@U) (|run#0@@180| T@U) (|needle#0@@81| T@U) ) (!  (=> (and (and (and (= (type $ly@@575) LayerTypeType) (= (type |run#0@@180|) (SeqType BoxType))) (= (type |needle#0@@81|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@180| |needle#0@@81|) (and (and ($Is |run#0@@180| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |needle#0@@81| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted |run#0@@180|)))) (and (and (and (<= (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@575 |run#0@@180| |needle#0@@81|) (|Seq#Length| |run#0@@180|)) (forall ((|i#0@@117| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@117|) (< |i#0@@117| (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@575 |run#0@@180| |needle#0@@81|))) (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@180| |i#0@@117|)) |needle#0@@81|)) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.454:20| :skolemid |3831| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@180| |i#0@@117|))) ))) (forall ((|i#1@@43| Int) ) (!  (=> (and (<= (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@575 |run#0@@180| |needle#0@@81|) |i#1@@43|) (< |i#1@@43| (|Seq#Length| |run#0@@180|))) (Upperbounded__Lexicographic__Byte__Order.__default.lt |needle#0@@81| ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@180| |i#1@@43|)))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.455:20| :skolemid |3832| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@180| |i#1@@43|))) ))) (<= (LitInt 0) (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@575 |run#0@@180| |needle#0@@81|)))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.451:12| :skolemid |3833| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@575 |run#0@@180| |needle#0@@81|)) ))))
(assert (forall (($ly@@576 T@U) (|run#0@@181| T@U) (|needle#0@@82| T@U) ) (!  (=> (and (and (and (= (type $ly@@576) LayerTypeType) (= (type |run#0@@181|) (SeqType BoxType))) (= (type |needle#0@@82|) DatatypeTypeType)) (and ($Is |run#0@@181| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |needle#0@@82| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| $ly@@576 |run#0@@181| |needle#0@@82|) (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted |run#0@@181|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.451:12| :skolemid |3834| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt#requires| $ly@@576 |run#0@@181| |needle#0@@82|)) )))
(assert (= (type MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted6) LayerTypeType))
(assert  (=> true (forall (($ly@@577 T@U) (|run#0@@182| T@U) (|needle#0@@83| T@U) ) (!  (=> (and (and (and (= (type $ly@@577) LayerTypeType) (= (type |run#0@@182|) (SeqType BoxType))) (= (type |needle#0@@83|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| |run#0@@182| |needle#0@@83|) (and (and ($Is |run#0@@182| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |needle#0@@83| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted |run#0@@182|)))) (and (=> (not (= (|Seq#Length| |run#0@@182|) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element |run#0@@182|) (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Upperbounded__Lexicographic__Byte__Order.Element |run#0@@182|)) |needle#0@@83|)) (=> (not (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Upperbounded__Lexicographic__Byte__Order.Element |run#0@@182|)) |needle#0@@83|)) (and (|Sequences.__default.DropLast#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element |run#0@@182|) (|Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (Sequences.__default.DropLast Tclass.Upperbounded__Lexicographic__Byte__Order.Element |run#0@@182|) |needle#0@@83|))))) (and (and (and (= StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted6)) (= StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted6)))) (= (AsFuelBottom MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted6) MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted6)) (= (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@577) |run#0@@182| |needle#0@@83|) (ite (= (|Seq#Length| |run#0@@182|) (LitInt 0)) 0 (ite (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Upperbounded__Lexicographic__Byte__Order.Element |run#0@@182|)) |needle#0@@83|) (|Seq#Length| |run#0@@182|) (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt $ly@@577 (Sequences.__default.DropLast Tclass.Upperbounded__Lexicographic__Byte__Order.Element |run#0@@182|) |needle#0@@83|))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.451:12| :skolemid |3835| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@577) |run#0@@182| |needle#0@@83|)) ))))
(assert (= (type MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted7) LayerTypeType))
(assert  (=> true (forall (($ly@@578 T@U) (|run#0@@183| T@U) (|needle#0@@84| T@U) ) (!  (=> (and (and (and (= (type $ly@@578) LayerTypeType) (= (type |run#0@@183|) (SeqType BoxType))) (= (type |needle#0@@84|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (Lit |run#0@@183|) (Lit |needle#0@@84|)) (and (and ($Is |run#0@@183| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |needle#0@@84| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted (Lit |run#0@@183|))))) (and (=> (not (= (|Seq#Length| (Lit |run#0@@183|)) (LitInt 0))) (and (and (|Sequences.__default.Last#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |run#0@@183|)) (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |run#0@@183|)))) (Lit |needle#0@@84|))) (=> (not (U_2_bool (Lit (bool_2_U (Upperbounded__Lexicographic__Byte__Order.__default.lte (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |run#0@@183|)))) (Lit |needle#0@@84|)))))) (and (|Sequences.__default.DropLast#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |run#0@@183|)) (|Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt#canCall| (Lit (Sequences.__default.DropLast Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |run#0@@183|))) (Lit |needle#0@@84|)))))) (and (and (and (= StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted7)) (= StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted7)))) (= (AsFuelBottom MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted7) MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted7)) (= (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@578) (Lit |run#0@@183|) (Lit |needle#0@@84|)) (ite (= (|Seq#Length| (Lit |run#0@@183|)) (LitInt 0)) 0 (ite (Upperbounded__Lexicographic__Byte__Order.__default.lte (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |run#0@@183|)))) (Lit |needle#0@@84|)) (|Seq#Length| (Lit |run#0@@183|)) (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@578) (Lit (Sequences.__default.DropLast Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |run#0@@183|))) (Lit |needle#0@@84|)))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.451:12| :weight 3 :skolemid |3836| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IndexOfFirstGt ($LS $ly@@578) (Lit |run#0@@183|) (Lit |needle#0@@84|))) ))))
(assert (forall (($ly@@579 T@U) (|s#0@@212| T@U) (|key#0@@115| T@U) (|lo#0@@34| Int) (|hi#0@@34| Int) ) (!  (=> (and (and (= (type $ly@@579) LayerTypeType) (= (type |s#0@@212|) (SeqType BoxType))) (= (type |key#0@@115|) DatatypeTypeType)) (= (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@579) |s#0@@212| |key#0@@115| |lo#0@@34| |hi#0@@34|) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@579 |s#0@@212| |key#0@@115| |lo#0@@34| |hi#0@@34|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.482:12| :skolemid |3837| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@579) |s#0@@212| |key#0@@115| |lo#0@@34| |hi#0@@34|)) )))
(assert (forall (($ly@@580 T@U) (|s#0@@213| T@U) (|key#0@@116| T@U) (|lo#0@@35| Int) (|hi#0@@35| Int) ) (!  (=> (and (and (= (type $ly@@580) LayerTypeType) (= (type |s#0@@213|) (SeqType BoxType))) (= (type |key#0@@116|) DatatypeTypeType)) (= (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@580 |s#0@@213| |key#0@@116| |lo#0@@35| |hi#0@@35|) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $LZ |s#0@@213| |key#0@@116| |lo#0@@35| |hi#0@@35|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.482:12| :skolemid |3838| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter (AsFuelBottom $ly@@580) |s#0@@213| |key#0@@116| |lo#0@@35| |hi#0@@35|)) )))
(assert  (=> true (forall (($ly@@581 T@U) (|s#0@@214| T@U) (|key#0@@117| T@U) (|lo#0@@36| Int) (|hi#0@@36| Int) ) (!  (=> (and (and (and (= (type $ly@@581) LayerTypeType) (= (type |s#0@@214|) (SeqType BoxType))) (= (type |key#0@@117|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@214| |key#0@@117| |lo#0@@36| |hi#0@@36|) (and (and ($Is |s#0@@214| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@117| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (and (and (and (and (<= (LitInt 0) |lo#0@@36|) (< |lo#0@@36| |hi#0@@36|)) (<= |hi#0@@36| (+ (|Seq#Length| |s#0@@214|) 1))) (=> (> |lo#0@@36| 0) (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@214| (- |lo#0@@36| 1))) |key#0@@117|))) (=> (<= |hi#0@@36| (|Seq#Length| |s#0@@214|)) (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@117| ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@214| (- |hi#0@@36| 1))))))))) (and (and (and (<= (LitInt 0) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@581 |s#0@@214| |key#0@@117| |lo#0@@36| |hi#0@@36|)) (<= (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@581 |s#0@@214| |key#0@@117| |lo#0@@36| |hi#0@@36|) (|Seq#Length| |s#0@@214|))) (=> (> (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@581 |s#0@@214| |key#0@@117| |lo#0@@36| |hi#0@@36|) 0) (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@214| (- (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@581 |s#0@@214| |key#0@@117| |lo#0@@36| |hi#0@@36|) 1))) |key#0@@117|))) (=> (< (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@581 |s#0@@214| |key#0@@117| |lo#0@@36| |hi#0@@36|) (|Seq#Length| |s#0@@214|)) (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@117| ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@214| (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@581 |s#0@@214| |key#0@@117| |lo#0@@36| |hi#0@@36|))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.482:12| :skolemid |3839| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@581 |s#0@@214| |key#0@@117| |lo#0@@36| |hi#0@@36|)) ))))
(assert (forall (($ly@@582 T@U) (|s#0@@215| T@U) (|key#0@@118| T@U) (|lo#0@@37| Int) (|hi#0@@37| Int) ) (!  (=> (and (and (and (= (type $ly@@582) LayerTypeType) (= (type |s#0@@215|) (SeqType BoxType))) (= (type |key#0@@118|) DatatypeTypeType)) (and ($Is |s#0@@215| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@118| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@582 |s#0@@215| |key#0@@118| |lo#0@@37| |hi#0@@37|)  (and (and (and (and (<= (LitInt 0) |lo#0@@37|) (< |lo#0@@37| |hi#0@@37|)) (<= |hi#0@@37| (+ (|Seq#Length| |s#0@@215|) 1))) (=> (> |lo#0@@37| 0) (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@215| (- |lo#0@@37| 1))) |key#0@@118|))) (=> (<= |hi#0@@37| (|Seq#Length| |s#0@@215|)) (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@118| ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@215| (- |hi#0@@37| 1)))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.482:12| :skolemid |3840| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#requires| $ly@@582 |s#0@@215| |key#0@@118| |lo#0@@37| |hi#0@@37|)) )))
(assert  (=> true (forall (($ly@@583 T@U) (|s#0@@216| T@U) (|key#0@@119| T@U) (|lo#0@@38| Int) (|hi#0@@38| Int) ) (!  (=> (and (and (and (= (type $ly@@583) LayerTypeType) (= (type |s#0@@216|) (SeqType BoxType))) (= (type |key#0@@119|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@216| |key#0@@119| |lo#0@@38| |hi#0@@38|) (and (and ($Is |s#0@@216| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@119| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (and (and (and (and (<= (LitInt 0) |lo#0@@38|) (< |lo#0@@38| |hi#0@@38|)) (<= |hi#0@@38| (+ (|Seq#Length| |s#0@@216|) 1))) (=> (> |lo#0@@38| 0) (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@216| (- |lo#0@@38| 1))) |key#0@@119|))) (=> (<= |hi#0@@38| (|Seq#Length| |s#0@@216|)) (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@119| ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@216| (- |hi#0@@38| 1))))))))) (and (=> (< (+ |lo#0@@38| 1) |hi#0@@38|) (let ((|mid#0@@9| (Div (+ |lo#0@@38| |hi#0@@38|) (LitInt 2)))) (and (and (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@216| (- |mid#0@@9| 1))) |key#0@@119|) (=> (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@216| (- |mid#0@@9| 1))) |key#0@@119|) (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@216| |key#0@@119| |mid#0@@9| |hi#0@@38|))) (=> (not (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@216| (- |mid#0@@9| 1))) |key#0@@119|)) (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@216| |key#0@@119| |lo#0@@38| |mid#0@@9|))))) (= (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@583) |s#0@@216| |key#0@@119| |lo#0@@38| |hi#0@@38|) (ite (< (+ |lo#0@@38| 1) |hi#0@@38|) (let ((|mid#0@@10| (Div (+ |lo#0@@38| |hi#0@@38|) (LitInt 2)))) (ite (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@216| (- |mid#0@@10| 1))) |key#0@@119|) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@583 |s#0@@216| |key#0@@119| |mid#0@@10| |hi#0@@38|) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter $ly@@583 |s#0@@216| |key#0@@119| |lo#0@@38| |mid#0@@10|))) |lo#0@@38|)))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.482:12| :skolemid |3841| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@583) |s#0@@216| |key#0@@119| |lo#0@@38| |hi#0@@38|)) ))))
(assert  (=> true (forall (($ly@@584 T@U) (|s#0@@217| T@U) (|key#0@@120| T@U) (|lo#0@@39| Int) (|hi#0@@39| Int) ) (!  (=> (and (and (and (= (type $ly@@584) LayerTypeType) (= (type |s#0@@217|) (SeqType BoxType))) (= (type |key#0@@120|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@217| |key#0@@120| (LitInt |lo#0@@39|) (LitInt |hi#0@@39|)) (and (and ($Is |s#0@@217| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@120| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@39|)) (< |lo#0@@39| |hi#0@@39|)) (<= (LitInt |hi#0@@39|) (+ (|Seq#Length| |s#0@@217|) 1))) (=> (> |lo#0@@39| 0) (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@217| (LitInt (- |lo#0@@39| 1)))) |key#0@@120|))) (=> (<= (LitInt |hi#0@@39|) (|Seq#Length| |s#0@@217|)) (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@120| ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@217| (LitInt (- |hi#0@@39| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@39| 1) |hi#0@@39|)))) (let ((|mid#1@@9| (LitInt (Div (+ |lo#0@@39| |hi#0@@39|) (LitInt 2))))) (and (and (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@217| (- |mid#1@@9| 1))) |key#0@@120|) (=> (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@217| (- |mid#1@@9| 1))) |key#0@@120|) (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@217| |key#0@@120| |mid#1@@9| (LitInt |hi#0@@39|)))) (=> (not (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@217| (- |mid#1@@9| 1))) |key#0@@120|)) (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@217| |key#0@@120| (LitInt |lo#0@@39|) |mid#1@@9|))))) (= (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@584) |s#0@@217| |key#0@@120| (LitInt |lo#0@@39|) (LitInt |hi#0@@39|)) (ite (< (+ |lo#0@@39| 1) |hi#0@@39|) (let ((|mid#1@@10| (LitInt (Div (+ |lo#0@@39| |hi#0@@39|) (LitInt 2))))) (ite (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@217| (LitInt (- |mid#1@@10| 1)))) |key#0@@120|) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@584) |s#0@@217| |key#0@@120| |mid#1@@10| (LitInt |hi#0@@39|)) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@584) |s#0@@217| |key#0@@120| (LitInt |lo#0@@39|) |mid#1@@10|))) |lo#0@@39|)))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.482:12| :weight 3 :skolemid |3842| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@584) |s#0@@217| |key#0@@120| (LitInt |lo#0@@39|) (LitInt |hi#0@@39|))) ))))
(assert  (=> true (forall (($ly@@585 T@U) (|s#0@@218| T@U) (|key#0@@121| T@U) (|lo#0@@40| Int) (|hi#0@@40| Int) ) (!  (=> (and (and (and (= (type $ly@@585) LayerTypeType) (= (type |s#0@@218|) (SeqType BoxType))) (= (type |key#0@@121|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@218|) (Lit |key#0@@121|) (LitInt |lo#0@@40|) (LitInt |hi#0@@40|)) (and (and ($Is |s#0@@218| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@121| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (and (and (and (and (<= (LitInt 0) (LitInt |lo#0@@40|)) (< |lo#0@@40| |hi#0@@40|)) (<= (LitInt |hi#0@@40|) (+ (|Seq#Length| (Lit |s#0@@218|)) 1))) (=> (> |lo#0@@40| 0) (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@218|) (LitInt (- |lo#0@@40| 1)))) (Lit |key#0@@121|)))) (=> (<= (LitInt |hi#0@@40|) (|Seq#Length| (Lit |s#0@@218|))) (Upperbounded__Lexicographic__Byte__Order.__default.lt (Lit |key#0@@121|) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@218|) (LitInt (- |hi#0@@40| 1)))))))))) (and (=> (U_2_bool (Lit (bool_2_U (< (+ |lo#0@@40| 1) |hi#0@@40|)))) (let ((|mid#2@@9| (LitInt (Div (+ |lo#0@@40| |hi#0@@40|) (LitInt 2))))) (and (and (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@218|) (- |mid#2@@9| 1))) (Lit |key#0@@121|)) (=> (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@218|) (- |mid#2@@9| 1))) (Lit |key#0@@121|)) (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@218|) (Lit |key#0@@121|) |mid#2@@9| (LitInt |hi#0@@40|)))) (=> (not (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@218|) (- |mid#2@@9| 1))) (Lit |key#0@@121|))) (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@218|) (Lit |key#0@@121|) (LitInt |lo#0@@40|) |mid#2@@9|))))) (= (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@585) (Lit |s#0@@218|) (Lit |key#0@@121|) (LitInt |lo#0@@40|) (LitInt |hi#0@@40|)) (ite (< (+ |lo#0@@40| 1) |hi#0@@40|) (let ((|mid#2@@10| (LitInt (Div (+ |lo#0@@40| |hi#0@@40|) (LitInt 2))))) (ite (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@218|) (LitInt (- |mid#2@@10| 1)))) (Lit |key#0@@121|)) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@585) (Lit |s#0@@218|) (Lit |key#0@@121|) |mid#2@@10| (LitInt |hi#0@@40|)) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@585) (Lit |s#0@@218|) (Lit |key#0@@121|) (LitInt |lo#0@@40|) |mid#2@@10|))) |lo#0@@40|)))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.482:12| :weight 3 :skolemid |3843| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $ly@@585) (Lit |s#0@@218|) (Lit |key#0@@121|) (LitInt |lo#0@@40|) (LitInt |hi#0@@40|))) ))))
(assert (forall (($ly@@586 T@U) (|s#0@@219| T@U) (|key#0@@122| T@U) ) (!  (=> (and (and (= (type $ly@@586) LayerTypeType) (= (type |s#0@@219|) (SeqType BoxType))) (= (type |key#0@@122|) DatatypeTypeType)) (= (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@586) |s#0@@219| |key#0@@122|) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@586 |s#0@@219| |key#0@@122|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.502:22| :skolemid |3844| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@586) |s#0@@219| |key#0@@122|)) )))
(assert (forall (($ly@@587 T@U) (|s#0@@220| T@U) (|key#0@@123| T@U) ) (!  (=> (and (and (= (type $ly@@587) LayerTypeType) (= (type |s#0@@220|) (SeqType BoxType))) (= (type |key#0@@123|) DatatypeTypeType)) (= (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@587 |s#0@@220| |key#0@@123|) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $LZ |s#0@@220| |key#0@@123|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.502:22| :skolemid |3845| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt (AsFuelBottom $ly@@587) |s#0@@220| |key#0@@123|)) )))
(assert  (=> true (forall (($ly@@588 T@U) (|s#0@@221| T@U) (|key#0@@124| T@U) ) (!  (=> (and (and (and (= (type $ly@@588) LayerTypeType) (= (type |s#0@@221|) (SeqType BoxType))) (= (type |key#0@@124|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@221| |key#0@@124|) (and ($Is |s#0@@221| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@124| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (and (and (<= (LitInt 0) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@588 |s#0@@221| |key#0@@124|)) (<= (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@588 |s#0@@221| |key#0@@124|) (|Seq#Length| |s#0@@221|))) (=> (> (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@588 |s#0@@221| |key#0@@124|) 0) (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@221| (- (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@588 |s#0@@221| |key#0@@124|) 1))) |key#0@@124|))) (=> (< (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@588 |s#0@@221| |key#0@@124|) (|Seq#Length| |s#0@@221|)) (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@124| ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@221| (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@588 |s#0@@221| |key#0@@124|))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.502:22| :skolemid |3846| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt $ly@@588 |s#0@@221| |key#0@@124|)) ))))
(assert (forall (($ly@@589 T@U) (|s#0@@222| T@U) (|key#0@@125| T@U) ) (!  (=> (and (and (and (= (type $ly@@589) LayerTypeType) (= (type |s#0@@222|) (SeqType BoxType))) (= (type |key#0@@125|) DatatypeTypeType)) (and ($Is |s#0@@222| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@125| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@589 |s#0@@222| |key#0@@125|) true)) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.502:22| :skolemid |3847| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#requires| $ly@@589 |s#0@@222| |key#0@@125|)) )))
(assert  (=> true (forall (($ly@@590 T@U) (|s#0@@223| T@U) (|key#0@@126| T@U) ) (!  (=> (and (and (and (= (type $ly@@590) LayerTypeType) (= (type |s#0@@223|) (SeqType BoxType))) (= (type |key#0@@126|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| |s#0@@223| |key#0@@126|) (and ($Is |s#0@@223| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@126| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| |s#0@@223| |key#0@@126| (LitInt 0) (+ (|Seq#Length| |s#0@@223|) 1)) (= (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@590) |s#0@@223| |key#0@@126|) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) |s#0@@223| |key#0@@126| (LitInt 0) (+ (|Seq#Length| |s#0@@223|) 1))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.502:22| :skolemid |3848| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@590) |s#0@@223| |key#0@@126|)) ))))
(assert  (=> true (forall (($ly@@591 T@U) (|s#0@@224| T@U) (|key#0@@127| T@U) ) (!  (=> (and (and (and (= (type $ly@@591) LayerTypeType) (= (type |s#0@@224|) (SeqType BoxType))) (= (type |key#0@@127|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt#canCall| (Lit |s#0@@224|) (Lit |key#0@@127|)) (and ($Is |s#0@@224| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@127| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (|Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter#canCall| (Lit |s#0@@224|) (Lit |key#0@@127|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@224|)) 1)) (= (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@591) (Lit |s#0@@224|) (Lit |key#0@@127|)) (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGtIter ($LS $LZ) (Lit |s#0@@224|) (Lit |key#0@@127|) (LitInt 0) (+ (|Seq#Length| (Lit |s#0@@224|)) 1))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.502:22| :weight 3 :skolemid |3849| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGt ($LS $ly@@591) (Lit |s#0@@224|) (Lit |key#0@@127|))) ))))
(assert  (=> true (forall ((|a#0@@183| T@U) (|b#0@@137| T@U) ) (!  (=> (and (and (= (type |a#0@@183|) (MapType0Type BoxType boolType)) (= (type |b#0@@137|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.SetAllLte#canCall| |a#0@@183| |b#0@@137|) (and ($Is |a#0@@183| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |b#0@@137| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element))))) true) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.658:23| :skolemid |3850| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SetAllLte |a#0@@183| |b#0@@137|)) ))))
(assert (forall ((|a#0@@184| T@U) (|b#0@@138| T@U) ) (!  (=> (and (and (= (type |a#0@@184|) (MapType0Type BoxType boolType)) (= (type |b#0@@138|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@184| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |b#0@@138| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.SetAllLte#requires| |a#0@@184| |b#0@@138|) true)) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.658:23| :skolemid |3851| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.SetAllLte#requires| |a#0@@184| |b#0@@138|)) )))
(assert  (=> true (forall ((|a#0@@185| T@U) (|b#0@@139| T@U) ) (!  (=> (and (and (= (type |a#0@@185|) (MapType0Type BoxType boolType)) (= (type |b#0@@139|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.SetAllLte#canCall| |a#0@@185| |b#0@@139|) (and ($Is |a#0@@185| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |b#0@@139| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element))))) (and (forall ((|x#0@@10| T@U) (|y#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type |x#0@@10|) DatatypeTypeType) (= (type |y#0@@15|) DatatypeTypeType)) (and ($Is |x#0@@10| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |y#0@@15| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (U_2_bool (MapType0Select |a#0@@185| ($Box |x#0@@10|)))) (U_2_bool (MapType0Select |b#0@@139| ($Box |y#0@@15|)))) (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| |x#0@@10| |y#0@@15|)) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.659:12| :skolemid |3853| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lte |x#0@@10| |y#0@@15|)) :pattern ( (MapType0Select |b#0@@139| ($Box |y#0@@15|)) (MapType0Select |a#0@@185| ($Box |x#0@@10|))) )) (= (Upperbounded__Lexicographic__Byte__Order.__default.SetAllLte |a#0@@185| |b#0@@139|) (forall ((|x#0@@11| T@U) (|y#0@@16| T@U) ) (!  (=> (and (and (and (= (type |x#0@@11|) DatatypeTypeType) (= (type |y#0@@16|) DatatypeTypeType)) (and ($Is |x#0@@11| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |y#0@@16| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (and (U_2_bool (MapType0Select |a#0@@185| ($Box |x#0@@11|))) (U_2_bool (MapType0Select |b#0@@139| ($Box |y#0@@16|))))) (Upperbounded__Lexicographic__Byte__Order.__default.lte |x#0@@11| |y#0@@16|)) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.659:12| :skolemid |3852| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lte |x#0@@11| |y#0@@16|)) :pattern ( (MapType0Select |b#0@@139| ($Box |y#0@@16|)) (MapType0Select |a#0@@185| ($Box |x#0@@11|))) ))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.658:23| :skolemid |3854| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SetAllLte |a#0@@185| |b#0@@139|)) ))))
(assert  (=> true (forall ((|a#0@@186| T@U) (|b#0@@140| T@U) ) (!  (=> (and (and (= (type |a#0@@186|) (MapType0Type BoxType boolType)) (= (type |b#0@@140|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.SetAllLte#canCall| (Lit |a#0@@186|) (Lit |b#0@@140|)) (and ($Is |a#0@@186| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |b#0@@140| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element))))) (and (forall ((|x#1@@7| T@U) (|y#1@@7| T@U) ) (!  (=> (and (and (and (and (= (type |x#1@@7|) DatatypeTypeType) (= (type |y#1@@7|) DatatypeTypeType)) (and ($Is |x#1@@7| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |y#1@@7| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (U_2_bool (MapType0Select (Lit |a#0@@186|) ($Box |x#1@@7|)))) (U_2_bool (MapType0Select (Lit |b#0@@140|) ($Box |y#1@@7|)))) (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| |x#1@@7| |y#1@@7|)) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.659:12| :skolemid |3856| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lte |x#1@@7| |y#1@@7|)) :pattern ( (MapType0Select |b#0@@140| ($Box |y#1@@7|)) (MapType0Select |a#0@@186| ($Box |x#1@@7|))) )) (= (Upperbounded__Lexicographic__Byte__Order.__default.SetAllLte (Lit |a#0@@186|) (Lit |b#0@@140|)) (forall ((|x#1@@8| T@U) (|y#1@@8| T@U) ) (!  (=> (and (and (and (= (type |x#1@@8|) DatatypeTypeType) (= (type |y#1@@8|) DatatypeTypeType)) (and ($Is |x#1@@8| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |y#1@@8| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (and (U_2_bool (MapType0Select (Lit |a#0@@186|) ($Box |x#1@@8|))) (U_2_bool (MapType0Select (Lit |b#0@@140|) ($Box |y#1@@8|))))) (Upperbounded__Lexicographic__Byte__Order.__default.lte |x#1@@8| |y#1@@8|)) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.659:12| :skolemid |3855| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lte |x#1@@8| |y#1@@8|)) :pattern ( (MapType0Select |b#0@@140| ($Box |y#1@@8|)) (MapType0Select |a#0@@186| ($Box |x#1@@8|))) ))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.658:23| :weight 3 :skolemid |3857| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SetAllLte (Lit |a#0@@186|) (Lit |b#0@@140|))) ))))
(assert  (=> true (forall ((|a#0@@187| T@U) (|b#0@@141| T@U) ) (!  (=> (and (and (= (type |a#0@@187|) (MapType0Type BoxType boolType)) (= (type |b#0@@141|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.SetAllLt#canCall| |a#0@@187| |b#0@@141|) (and ($Is |a#0@@187| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |b#0@@141| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element))))) true) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.662:22| :skolemid |3858| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SetAllLt |a#0@@187| |b#0@@141|)) ))))
(assert (forall ((|a#0@@188| T@U) (|b#0@@142| T@U) ) (!  (=> (and (and (= (type |a#0@@188|) (MapType0Type BoxType boolType)) (= (type |b#0@@142|) (MapType0Type BoxType boolType))) (and ($Is |a#0@@188| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |b#0@@142| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.SetAllLt#requires| |a#0@@188| |b#0@@142|) true)) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.662:22| :skolemid |3859| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.SetAllLt#requires| |a#0@@188| |b#0@@142|)) )))
(assert  (=> true (forall ((|a#0@@189| T@U) (|b#0@@143| T@U) ) (!  (=> (and (and (= (type |a#0@@189|) (MapType0Type BoxType boolType)) (= (type |b#0@@143|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.SetAllLt#canCall| |a#0@@189| |b#0@@143|) (and ($Is |a#0@@189| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |b#0@@143| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element))))) (and (forall ((|x#0@@12| T@U) (|y#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type |x#0@@12|) DatatypeTypeType) (= (type |y#0@@17|) DatatypeTypeType)) (and ($Is |x#0@@12| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |y#0@@17| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (U_2_bool (MapType0Select |a#0@@189| ($Box |x#0@@12|)))) (U_2_bool (MapType0Select |b#0@@143| ($Box |y#0@@17|)))) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| |x#0@@12| |y#0@@17|)) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.663:12| :skolemid |3861| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |x#0@@12| |y#0@@17|)) :pattern ( (MapType0Select |b#0@@143| ($Box |y#0@@17|)) (MapType0Select |a#0@@189| ($Box |x#0@@12|))) )) (= (Upperbounded__Lexicographic__Byte__Order.__default.SetAllLt |a#0@@189| |b#0@@143|) (forall ((|x#0@@13| T@U) (|y#0@@18| T@U) ) (!  (=> (and (and (and (= (type |x#0@@13|) DatatypeTypeType) (= (type |y#0@@18|) DatatypeTypeType)) (and ($Is |x#0@@13| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |y#0@@18| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (and (U_2_bool (MapType0Select |a#0@@189| ($Box |x#0@@13|))) (U_2_bool (MapType0Select |b#0@@143| ($Box |y#0@@18|))))) (Upperbounded__Lexicographic__Byte__Order.__default.lt |x#0@@13| |y#0@@18|)) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.663:12| :skolemid |3860| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |x#0@@13| |y#0@@18|)) :pattern ( (MapType0Select |b#0@@143| ($Box |y#0@@18|)) (MapType0Select |a#0@@189| ($Box |x#0@@13|))) ))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.662:22| :skolemid |3862| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SetAllLt |a#0@@189| |b#0@@143|)) ))))
(assert  (=> true (forall ((|a#0@@190| T@U) (|b#0@@144| T@U) ) (!  (=> (and (and (= (type |a#0@@190|) (MapType0Type BoxType boolType)) (= (type |b#0@@144|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.SetAllLt#canCall| (Lit |a#0@@190|) (Lit |b#0@@144|)) (and ($Is |a#0@@190| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |b#0@@144| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element))))) (and (forall ((|x#1@@9| T@U) (|y#1@@9| T@U) ) (!  (=> (and (and (and (and (= (type |x#1@@9|) DatatypeTypeType) (= (type |y#1@@9|) DatatypeTypeType)) (and ($Is |x#1@@9| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |y#1@@9| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (U_2_bool (MapType0Select (Lit |a#0@@190|) ($Box |x#1@@9|)))) (U_2_bool (MapType0Select (Lit |b#0@@144|) ($Box |y#1@@9|)))) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| |x#1@@9| |y#1@@9|)) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.663:12| :skolemid |3864| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |x#1@@9| |y#1@@9|)) :pattern ( (MapType0Select |b#0@@144| ($Box |y#1@@9|)) (MapType0Select |a#0@@190| ($Box |x#1@@9|))) )) (= (Upperbounded__Lexicographic__Byte__Order.__default.SetAllLt (Lit |a#0@@190|) (Lit |b#0@@144|)) (forall ((|x#1@@10| T@U) (|y#1@@10| T@U) ) (!  (=> (and (and (and (= (type |x#1@@10|) DatatypeTypeType) (= (type |y#1@@10|) DatatypeTypeType)) (and ($Is |x#1@@10| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |y#1@@10| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (and (U_2_bool (MapType0Select (Lit |a#0@@190|) ($Box |x#1@@10|))) (U_2_bool (MapType0Select (Lit |b#0@@144|) ($Box |y#1@@10|))))) (Upperbounded__Lexicographic__Byte__Order.__default.lt |x#1@@10| |y#1@@10|)) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.663:12| :skolemid |3863| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |x#1@@10| |y#1@@10|)) :pattern ( (MapType0Select |b#0@@144| ($Box |y#1@@10|)) (MapType0Select |a#0@@190| ($Box |x#1@@10|))) ))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.662:22| :weight 3 :skolemid |3865| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SetAllLt (Lit |a#0@@190|) (Lit |b#0@@144|))) ))))
(assert (forall (($ly@@592 T@U) (|a#0@@191| T@U) ) (!  (=> (and (= (type $ly@@592) LayerTypeType) (= (type |a#0@@191|) DatatypeTypeType)) (= (Upperbounded__Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@592) |a#0@@191|) (Upperbounded__Lexicographic__Byte__Order.__default.NotMinimum $ly@@592 |a#0@@191|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.674:23| :skolemid |3866| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@592) |a#0@@191|)) )))
(assert (forall (($ly@@593 T@U) (|a#0@@192| T@U) ) (!  (=> (and (= (type $ly@@593) LayerTypeType) (= (type |a#0@@192|) DatatypeTypeType)) (= (Upperbounded__Lexicographic__Byte__Order.__default.NotMinimum $ly@@593 |a#0@@192|) (Upperbounded__Lexicographic__Byte__Order.__default.NotMinimum $LZ |a#0@@192|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.674:23| :skolemid |3867| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.NotMinimum (AsFuelBottom $ly@@593) |a#0@@192|)) )))
(assert  (=> true (forall (($ly@@594 T@U) (|a#0@@193| T@U) ) (!  (=> (and (and (= (type $ly@@594) LayerTypeType) (= (type |a#0@@193|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.NotMinimum#canCall| |a#0@@193|) ($Is |a#0@@193| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) true) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.674:23| :skolemid |3868| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.NotMinimum $ly@@594 |a#0@@193|)) ))))
(assert (forall (($ly@@595 T@U) (|a#0@@194| T@U) ) (!  (=> (and (and (= (type $ly@@595) LayerTypeType) (= (type |a#0@@194|) DatatypeTypeType)) ($Is |a#0@@194| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (= (|Upperbounded__Lexicographic__Byte__Order.__default.NotMinimum#requires| $ly@@595 |a#0@@194|) true)) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.674:23| :skolemid |3869| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.NotMinimum#requires| $ly@@595 |a#0@@194|)) )))
(assert  (=> true (forall (($ly@@596 T@U) (|a#0@@195| T@U) ) (!  (=> (and (and (= (type $ly@@596) LayerTypeType) (= (type |a#0@@195|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.NotMinimum#canCall| |a#0@@195|) ($Is |a#0@@195| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (and (forall ((|b#0@@145| T@U) ) (!  (=> (and (= (type |b#0@@145|) DatatypeTypeType) ($Is |b#0@@145| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| |b#0@@145| |a#0@@195|)) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.675:12| :skolemid |3871| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |b#0@@145| |a#0@@195|)) )) (= (Upperbounded__Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@596) |a#0@@195|) (exists ((|b#0@@146| T@U) ) (!  (and (= (type |b#0@@146|) DatatypeTypeType) (and ($Is |b#0@@146| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) (Upperbounded__Lexicographic__Byte__Order.__default.lt |b#0@@146| |a#0@@195|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.675:12| :skolemid |3870| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |b#0@@146| |a#0@@195|)) ))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.674:23| :skolemid |3872| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@596) |a#0@@195|)) ))))
(assert  (=> true (forall (($ly@@597 T@U) (|a#0@@196| T@U) ) (!  (=> (and (and (= (type $ly@@597) LayerTypeType) (= (type |a#0@@196|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.NotMinimum#canCall| (Lit |a#0@@196|)) ($Is |a#0@@196| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (and (forall ((|b#1@@9| T@U) ) (!  (=> (and (= (type |b#1@@9|) DatatypeTypeType) ($Is |b#1@@9| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| |b#1@@9| (Lit |a#0@@196|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.675:12| :skolemid |3874| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |b#1@@9| |a#0@@196|)) )) (= (Upperbounded__Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@597) (Lit |a#0@@196|)) (exists ((|b#1@@10| T@U) ) (!  (and (= (type |b#1@@10|) DatatypeTypeType) (and ($Is |b#1@@10| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) (Upperbounded__Lexicographic__Byte__Order.__default.lt |b#1@@10| (Lit |a#0@@196|)))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.675:12| :skolemid |3873| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |b#1@@10| |a#0@@196|)) ))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.674:23| :weight 3 :skolemid |3875| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.NotMinimum ($LS $ly@@597) (Lit |a#0@@196|))) ))))
(assert (forall ((arg0@@634 T@U) (arg1@@324 T@U) (arg2@@213 T@U) (arg3@@153 T@U) ) (! (= (type (Upperbounded__Lexicographic__Byte__Order.__default.MapPivotedUnion arg0@@634 arg1@@324 arg2@@213 arg3@@153)) (MapType BoxType BoxType)) :qid |funType:Upperbounded__Lexicographic__Byte__Order.__default.MapPivotedUnion| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.MapPivotedUnion arg0@@634 arg1@@324 arg2@@213 arg3@@153)) )))
(assert  (=> true (forall ((Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value T@U) (|left#0@@7| T@U) (|pivot#0@@7| T@U) (|right#0@@7| T@U) ) (!  (=> (and (and (and (and (= (type Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value) TyType) (= (type |left#0@@7|) (MapType BoxType BoxType))) (= (type |pivot#0@@7|) DatatypeTypeType)) (= (type |right#0@@7|) (MapType BoxType BoxType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value |left#0@@7| |pivot#0@@7| |right#0@@7|) (and (and ($Is |left#0@@7| (TMap Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value)) ($Is |pivot#0@@7| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |right#0@@7| (TMap Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value))))) ($Is (Upperbounded__Lexicographic__Byte__Order.__default.MapPivotedUnion Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value |left#0@@7| |pivot#0@@7| |right#0@@7|) (TMap Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value))) :qid |unknown.0:0| :skolemid |3876| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.MapPivotedUnion Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value |left#0@@7| |pivot#0@@7| |right#0@@7|)) ))))
(assert (forall ((Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 T@U) (|left#0@@8| T@U) (|pivot#0@@8| T@U) (|right#0@@8| T@U) ) (!  (=> (and (and (and (and (= (type Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0) TyType) (= (type |left#0@@8|) (MapType BoxType BoxType))) (= (type |pivot#0@@8|) DatatypeTypeType)) (= (type |right#0@@8|) (MapType BoxType BoxType))) (and (and ($Is |left#0@@8| (TMap Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0)) ($Is |pivot#0@@8| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |right#0@@8| (TMap Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0)))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@8| |pivot#0@@8| |right#0@@8|) true)) :qid |unknown.0:0| :skolemid |3877| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.MapPivotedUnion#requires| Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@0 |left#0@@8| |pivot#0@@8| |right#0@@8|)) )))
(assert  (and (forall ((arg0@@635 T@U) (arg1@@325 T@U) ) (! (= (type (|lambda#212| arg0@@635 arg1@@325)) (MapType0Type BoxType boolType)) :qid |funType:lambda#212| :pattern ( (|lambda#212| arg0@@635 arg1@@325)) )) (forall ((arg0@@636 T@U) (arg1@@326 T@U) ) (! (= (type (|lambda#214| arg0@@636 arg1@@326)) (MapType0Type BoxType boolType)) :qid |funType:lambda#214| :pattern ( (|lambda#214| arg0@@636 arg1@@326)) ))))
(assert  (=> true (forall ((Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 T@U) (|left#0@@9| T@U) (|pivot#0@@9| T@U) (|right#0@@9| T@U) ) (!  (=> (and (and (and (and (= (type Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1) TyType) (= (type |left#0@@9|) (MapType BoxType BoxType))) (= (type |pivot#0@@9|) DatatypeTypeType)) (= (type |right#0@@9|) (MapType BoxType BoxType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@9| |pivot#0@@9| |right#0@@9|) (and (and ($Is |left#0@@9| (TMap Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1)) ($Is |pivot#0@@9| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |right#0@@9| (TMap Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1))))) (and (and (and (forall ((|k#0@@55| T@U) ) (!  (=> (and (= (type |k#0@@55|) DatatypeTypeType) ($Is |k#0@@55| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| |k#0@@55| |pivot#0@@9|)) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.694:57| :skolemid |3878| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |k#0@@55| |pivot#0@@9|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@9| (|lambda#212| Tclass.Upperbounded__Lexicographic__Byte__Order.Element |pivot#0@@9|))) (let ((|restricted_left#0@@3| (Maps.__default.MapIRestrict Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@9| (|lambda#212| Tclass.Upperbounded__Lexicographic__Byte__Order.Element |pivot#0@@9|)))) (and (and (forall ((|k#1@@10| T@U) ) (!  (=> (and (= (type |k#1@@10|) DatatypeTypeType) ($Is |k#1@@10| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| |pivot#0@@9| |k#1@@10|)) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.695:59| :skolemid |3879| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lte |pivot#0@@9| |k#1@@10|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@9| (|lambda#214| Tclass.Upperbounded__Lexicographic__Byte__Order.Element |pivot#0@@9|))) (let ((|restricted_right#0@@3| (Maps.__default.MapIRestrict Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@9| (|lambda#214| Tclass.Upperbounded__Lexicographic__Byte__Order.Element |pivot#0@@9|)))) (|Maps.__default.MapDisjointUnion#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |restricted_left#0@@3| |restricted_right#0@@3|))))) (= (Upperbounded__Lexicographic__Byte__Order.__default.MapPivotedUnion Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@9| |pivot#0@@9| |right#0@@9|) (let ((|restricted_left#0@@4| (Maps.__default.MapIRestrict Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@9| (|lambda#212| Tclass.Upperbounded__Lexicographic__Byte__Order.Element |pivot#0@@9|)))) (let ((|restricted_right#0@@4| (Maps.__default.MapIRestrict Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |right#0@@9| (|lambda#214| Tclass.Upperbounded__Lexicographic__Byte__Order.Element |pivot#0@@9|)))) (Maps.__default.MapDisjointUnion Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 StartFuel_Maps._default.MapDisjointUnion |restricted_left#0@@4| |restricted_right#0@@4|)))))) :qid |unknown.0:0| :skolemid |3880| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.MapPivotedUnion Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@1 |left#0@@9| |pivot#0@@9| |right#0@@9|)) ))))
(assert  (=> true (forall ((Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 T@U) (|left#0@@10| T@U) (|pivot#0@@10| T@U) (|right#0@@10| T@U) ) (!  (=> (and (and (and (and (= (type Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2) TyType) (= (type |left#0@@10|) (MapType BoxType BoxType))) (= (type |pivot#0@@10|) DatatypeTypeType)) (= (type |right#0@@10|) (MapType BoxType BoxType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.MapPivotedUnion#canCall| Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@10|) (Lit |pivot#0@@10|) (Lit |right#0@@10|)) (and (and ($Is |left#0@@10| (TMap Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2)) ($Is |pivot#0@@10| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |right#0@@10| (TMap Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2))))) (and (and (and (forall ((|k#2@@8| T@U) ) (!  (=> (and (= (type |k#2@@8|) DatatypeTypeType) ($Is |k#2@@8| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| |k#2@@8| (Lit |pivot#0@@10|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.694:57| :skolemid |3881| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |k#2@@8| |pivot#0@@10|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@10|) (|lambda#212| Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |pivot#0@@10|)))) (let ((|restricted_left#1@@3| (Maps.__default.MapIRestrict Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@10|) (|lambda#212| Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |pivot#0@@10|))))) (and (and (forall ((|k#3@@1| T@U) ) (!  (=> (and (= (type |k#3@@1|) DatatypeTypeType) ($Is |k#3@@1| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| (Lit |pivot#0@@10|) |k#3@@1|)) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.695:59| :skolemid |3882| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lte |pivot#0@@10| |k#3@@1|)) )) (|Maps.__default.MapIRestrict#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@10|) (|lambda#214| Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |pivot#0@@10|)))) (let ((|restricted_right#1@@3| (Maps.__default.MapIRestrict Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@10|) (|lambda#214| Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |pivot#0@@10|))))) (|Maps.__default.MapDisjointUnion#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 |restricted_left#1@@3| |restricted_right#1@@3|))))) (= (Upperbounded__Lexicographic__Byte__Order.__default.MapPivotedUnion Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@10|) (Lit |pivot#0@@10|) (Lit |right#0@@10|)) (let ((|restricted_left#1@@4| (Maps.__default.MapIRestrict Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@10|) (|lambda#212| Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |pivot#0@@10|))))) (let ((|restricted_right#1@@4| (Maps.__default.MapIRestrict Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |right#0@@10|) (|lambda#214| Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |pivot#0@@10|))))) (Maps.__default.MapDisjointUnion Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 StartFuel_Maps._default.MapDisjointUnion |restricted_left#1@@4| |restricted_right#1@@4|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3883| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.MapPivotedUnion Upperbounded_Lexicographic_Byte_Order._default.MapPivotedUnion$Value@@2 (Lit |left#0@@10|) (Lit |pivot#0@@10|) (Lit |right#0@@10|))) ))))
(assert (forall ((arg0@@637 T@U) (arg1@@327 T@U) ) (! (= (type (Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor arg0@@637 arg1@@327)) DatatypeTypeType) :qid |funType:Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor arg0@@637 arg1@@327)) )))
(assert  (=> true (forall ((|m#0@@132| T@U) (|key#0@@128| T@U) ) (!  (=> (and (and (= (type |m#0@@132|) (MapType0Type BoxType boolType)) (= (type |key#0@@128|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor#canCall| |m#0@@132| |key#0@@128|) (and ($Is |m#0@@132| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@128| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) ($Is (Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@132| |key#0@@128|) (Tclass.Options.Option Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.699:25| :skolemid |3884| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@132| |key#0@@128|)) ))))
(assert (forall (($Heap@@70 T@U) (|m#0@@133| T@U) (|key#0@@129| T@U) ) (!  (=> (and (and (and (= (type $Heap@@70) (MapType0Type refType MapType1Type)) (= (type |m#0@@133|) (MapType0Type BoxType boolType))) (= (type |key#0@@129|) DatatypeTypeType)) (and (and ($IsGoodHeap $Heap@@70) ($Is |m#0@@133| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |key#0@@129| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor#requires| |m#0@@133| |key#0@@129|) true)) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.699:12| :skolemid |3885| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor#requires| |m#0@@133| |key#0@@129|) ($IsGoodHeap $Heap@@70)) )))
(assert (forall ((arg0@@638 T@U) (arg1@@328 T@U) ) (! (= (type (|$let#32_next| arg0@@638 arg1@@328)) DatatypeTypeType) :qid |funType:$let#32_next| :pattern ( (|$let#32_next| arg0@@638 arg1@@328)) )))
(assert (forall ((m@@99 T@U) (key@@1 T@U) ) (!  (=> (and (and (= (type m@@99) (MapType0Type BoxType boolType)) (= (type key@@1) DatatypeTypeType)) (|$let#32$canCall| m@@99 key@@1)) (and ($Is (|$let#32_next| m@@99 key@@1) Tclass.Upperbounded__Lexicographic__Byte__Order.Element) (and (and (U_2_bool (MapType0Select m@@99 ($Box (|$let#32_next| m@@99 key@@1)))) (Upperbounded__Lexicographic__Byte__Order.__default.lt key@@1 (|$let#32_next| m@@99 key@@1))) (forall ((|other#1@@1| T@U) ) (!  (=> (and (= (type |other#1@@1|) DatatypeTypeType) ($Is |other#1@@1| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (=> (and (and (U_2_bool (MapType0Select m@@99 ($Box |other#1@@1|))) (not (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| |other#1@@1| (|$let#32_next| m@@99 key@@1)))) (Upperbounded__Lexicographic__Byte__Order.__default.lt key@@1 |other#1@@1|)) (Upperbounded__Lexicographic__Byte__Order.__default.lt (|$let#32_next| m@@99 key@@1) |other#1@@1|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.704:18| :skolemid |3888| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt (|$let#32_next| m@@99 key@@1) |other#1@@1|)) :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt key@@1 |other#1@@1|)) :pattern ( (MapType0Select m@@99 ($Box |other#1@@1|))) ))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.701:8| :skolemid |3889| :pattern ( (|$let#32_next| m@@99 key@@1)) )))
(assert  (=> true (forall (($Heap@@71 T@U) (|m#0@@134| T@U) (|key#0@@130| T@U) ) (!  (=> (and (and (and (= (type $Heap@@71) (MapType0Type refType MapType1Type)) (= (type |m#0@@134|) (MapType0Type BoxType boolType))) (= (type |key#0@@130|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor#canCall| |m#0@@134| |key#0@@130|) (and (and ($IsGoodHeap $Heap@@71) ($Is |m#0@@134| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |key#0@@130| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (and (forall ((|next#0@@5| T@U) ) (!  (=> (and (and (= (type |next#0@@5|) DatatypeTypeType) ($Is |next#0@@5| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (U_2_bool (MapType0Select |m#0@@134| ($Box |next#0@@5|)))) (and (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@130| |next#0@@5|) (=> (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@130| |next#0@@5|) (forall ((|other#0@@5| T@U) ) (!  (=> (and (and (= (type |other#0@@5|) DatatypeTypeType) ($Is |other#0@@5| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (U_2_bool (MapType0Select |m#0@@134| ($Box |other#0@@5|)))) (and (and (|$IsA#Upperbounded__Lexicographic__Byte__Order.Element| |other#0@@5|) (|$IsA#Upperbounded__Lexicographic__Byte__Order.Element| |next#0@@5|)) (=> (not (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| |other#0@@5| |next#0@@5|)) (and (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@130| |other#0@@5|) (=> (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@130| |other#0@@5|) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| |next#0@@5| |other#0@@5|)))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.704:18| :skolemid |3890| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |next#0@@5| |other#0@@5|)) :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@130| |other#0@@5|)) :pattern ( (MapType0Select |m#0@@134| ($Box |other#0@@5|))) ))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.701:8| :skolemid |3891| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@130| |next#0@@5|)) :pattern ( (MapType0Select |m#0@@134| ($Box |next#0@@5|))) )) (=> (exists ((|next#0@@6| T@U) ) (!  (and (= (type |next#0@@6|) DatatypeTypeType) (and ($Is |next#0@@6| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) (and (and (U_2_bool (MapType0Select |m#0@@134| ($Box |next#0@@6|))) (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@130| |next#0@@6|)) (forall ((|other#0@@6| T@U) ) (!  (=> (and (= (type |other#0@@6|) DatatypeTypeType) ($Is |other#0@@6| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (=> (and (and (U_2_bool (MapType0Select |m#0@@134| ($Box |other#0@@6|))) (not (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| |other#0@@6| |next#0@@6|))) (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@130| |other#0@@6|)) (Upperbounded__Lexicographic__Byte__Order.__default.lt |next#0@@6| |other#0@@6|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.704:18| :skolemid |3892| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |next#0@@6| |other#0@@6|)) :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@130| |other#0@@6|)) :pattern ( (MapType0Select |m#0@@134| ($Box |other#0@@6|))) ))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.701:8| :skolemid |3893| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@130| |next#0@@6|)) :pattern ( (MapType0Select |m#0@@134| ($Box |next#0@@6|))) )) (|$let#32$canCall| |m#0@@134| |key#0@@130|))) (= (Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@134| |key#0@@130|) (ite (exists ((|next#0@@7| T@U) ) (!  (and (= (type |next#0@@7|) DatatypeTypeType) (and ($Is |next#0@@7| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) (and (and (U_2_bool (MapType0Select |m#0@@134| ($Box |next#0@@7|))) (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@130| |next#0@@7|)) (forall ((|other#0@@7| T@U) ) (!  (=> (and (= (type |other#0@@7|) DatatypeTypeType) ($Is |other#0@@7| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (=> (and (and (U_2_bool (MapType0Select |m#0@@134| ($Box |other#0@@7|))) (not (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| |other#0@@7| |next#0@@7|))) (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@130| |other#0@@7|)) (Upperbounded__Lexicographic__Byte__Order.__default.lt |next#0@@7| |other#0@@7|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.704:18| :skolemid |3886| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |next#0@@7| |other#0@@7|)) :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@130| |other#0@@7|)) :pattern ( (MapType0Select |m#0@@134| ($Box |other#0@@7|))) ))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.701:8| :skolemid |3887| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@130| |next#0@@7|)) :pattern ( (MapType0Select |m#0@@134| ($Box |next#0@@7|))) )) (let ((|next#1@@1| (|$let#32_next| |m#0@@134| |key#0@@130|))) (|#Options.Option.Some| ($Box |next#1@@1|))) |#Options.Option.None|)))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.699:12| :skolemid |3894| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor |m#0@@134| |key#0@@130|) ($IsGoodHeap $Heap@@71)) ))))
(assert  (=> true (forall (($Heap@@72 T@U) (|m#0@@135| T@U) (|key#0@@131| T@U) ) (!  (=> (and (and (and (= (type $Heap@@72) (MapType0Type refType MapType1Type)) (= (type |m#0@@135|) (MapType0Type BoxType boolType))) (= (type |key#0@@131|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (Lit |m#0@@135|) (Lit |key#0@@131|)) (and (and ($IsGoodHeap $Heap@@72) ($Is |m#0@@135| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |key#0@@131| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (and (forall ((|next#2@@5| T@U) ) (!  (=> (and (and (= (type |next#2@@5|) DatatypeTypeType) ($Is |next#2@@5| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (U_2_bool (MapType0Select (Lit |m#0@@135|) ($Box |next#2@@5|)))) (and (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@131|) |next#2@@5|) (=> (Upperbounded__Lexicographic__Byte__Order.__default.lt (Lit |key#0@@131|) |next#2@@5|) (forall ((|other#2@@5| T@U) ) (!  (=> (and (and (= (type |other#2@@5|) DatatypeTypeType) ($Is |other#2@@5| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (U_2_bool (MapType0Select (Lit |m#0@@135|) ($Box |other#2@@5|)))) (and (and (|$IsA#Upperbounded__Lexicographic__Byte__Order.Element| |other#2@@5|) (|$IsA#Upperbounded__Lexicographic__Byte__Order.Element| |next#2@@5|)) (=> (not (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| |other#2@@5| |next#2@@5|)) (and (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@131|) |other#2@@5|) (=> (Upperbounded__Lexicographic__Byte__Order.__default.lt (Lit |key#0@@131|) |other#2@@5|) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| |next#2@@5| |other#2@@5|)))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.704:18| :skolemid |3897| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |next#2@@5| |other#2@@5|)) :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@131| |other#2@@5|)) :pattern ( (MapType0Select |m#0@@135| ($Box |other#2@@5|))) ))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.701:8| :skolemid |3898| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@131| |next#2@@5|)) :pattern ( (MapType0Select |m#0@@135| ($Box |next#2@@5|))) )) (=> (exists ((|next#2@@6| T@U) ) (!  (and (= (type |next#2@@6|) DatatypeTypeType) (and ($Is |next#2@@6| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) (and (and (U_2_bool (MapType0Select (Lit |m#0@@135|) ($Box |next#2@@6|))) (Upperbounded__Lexicographic__Byte__Order.__default.lt (Lit |key#0@@131|) |next#2@@6|)) (forall ((|other#2@@6| T@U) ) (!  (=> (and (= (type |other#2@@6|) DatatypeTypeType) ($Is |other#2@@6| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@135|) ($Box |other#2@@6|))) (not (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| |other#2@@6| |next#2@@6|))) (Upperbounded__Lexicographic__Byte__Order.__default.lt (Lit |key#0@@131|) |other#2@@6|)) (Upperbounded__Lexicographic__Byte__Order.__default.lt |next#2@@6| |other#2@@6|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.704:18| :skolemid |3899| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |next#2@@6| |other#2@@6|)) :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@131| |other#2@@6|)) :pattern ( (MapType0Select |m#0@@135| ($Box |other#2@@6|))) ))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.701:8| :skolemid |3900| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@131| |next#2@@6|)) :pattern ( (MapType0Select |m#0@@135| ($Box |next#2@@6|))) )) (|$let#32$canCall| (Lit |m#0@@135|) (Lit |key#0@@131|)))) (= (Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor (Lit |m#0@@135|) (Lit |key#0@@131|)) (ite (exists ((|next#2@@7| T@U) ) (!  (and (= (type |next#2@@7|) DatatypeTypeType) (and ($Is |next#2@@7| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) (and (and (U_2_bool (MapType0Select (Lit |m#0@@135|) ($Box |next#2@@7|))) (Upperbounded__Lexicographic__Byte__Order.__default.lt (Lit |key#0@@131|) |next#2@@7|)) (forall ((|other#2@@7| T@U) ) (!  (=> (and (= (type |other#2@@7|) DatatypeTypeType) ($Is |other#2@@7| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (=> (and (and (U_2_bool (MapType0Select (Lit |m#0@@135|) ($Box |other#2@@7|))) (not (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| |other#2@@7| |next#2@@7|))) (Upperbounded__Lexicographic__Byte__Order.__default.lt (Lit |key#0@@131|) |other#2@@7|)) (Upperbounded__Lexicographic__Byte__Order.__default.lt |next#2@@7| |other#2@@7|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.704:18| :skolemid |3895| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |next#2@@7| |other#2@@7|)) :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@131| |other#2@@7|)) :pattern ( (MapType0Select |m#0@@135| ($Box |other#2@@7|))) ))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.701:8| :skolemid |3896| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |key#0@@131| |next#2@@7|)) :pattern ( (MapType0Select |m#0@@135| ($Box |next#2@@7|))) )) (let ((|next#3@@1| (|$let#32_next| (Lit |m#0@@135|) (Lit |key#0@@131|)))) (|#Options.Option.Some| ($Box |next#3@@1|))) |#Options.Option.None|)))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.699:12| :weight 3 :skolemid |3901| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor (Lit |m#0@@135|) (Lit |key#0@@131|)) ($IsGoodHeap $Heap@@72)) ))))
(assert (forall ((arg0@@639 T@U) (arg1@@329 T@U) (arg2@@214 T@U) ) (! (= (type (Upperbounded__Lexicographic__Byte__Order.__default.MapSuccessor arg0@@639 arg1@@329 arg2@@214)) DatatypeTypeType) :qid |funType:Upperbounded__Lexicographic__Byte__Order.__default.MapSuccessor| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.MapSuccessor arg0@@639 arg1@@329 arg2@@214)) )))
(assert  (=> true (forall ((Upperbounded_Lexicographic_Byte_Order._default.MapSuccessor$V T@U) (|m#0@@136| T@U) (|key#0@@132| T@U) ) (!  (=> (and (and (and (= (type Upperbounded_Lexicographic_Byte_Order._default.MapSuccessor$V) TyType) (= (type |m#0@@136|) (MapType BoxType BoxType))) (= (type |key#0@@132|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.MapSuccessor#canCall| Upperbounded_Lexicographic_Byte_Order._default.MapSuccessor$V |m#0@@136| |key#0@@132|) (and ($Is |m#0@@136| (TMap Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapSuccessor$V)) ($Is |key#0@@132| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) ($Is (Upperbounded__Lexicographic__Byte__Order.__default.MapSuccessor Upperbounded_Lexicographic_Byte_Order._default.MapSuccessor$V |m#0@@136| |key#0@@132|) (Tclass.Options.Option Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) :qid |unknown.0:0| :skolemid |3902| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.MapSuccessor Upperbounded_Lexicographic_Byte_Order._default.MapSuccessor$V |m#0@@136| |key#0@@132|)) ))))
(assert (forall ((Upperbounded_Lexicographic_Byte_Order._default.MapSuccessor$V@@0 T@U) (|m#0@@137| T@U) (|key#0@@133| T@U) ) (!  (=> (and (and (and (= (type Upperbounded_Lexicographic_Byte_Order._default.MapSuccessor$V@@0) TyType) (= (type |m#0@@137|) (MapType BoxType BoxType))) (= (type |key#0@@133|) DatatypeTypeType)) (and ($Is |m#0@@137| (TMap Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapSuccessor$V@@0)) ($Is |key#0@@133| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.MapSuccessor#requires| Upperbounded_Lexicographic_Byte_Order._default.MapSuccessor$V@@0 |m#0@@137| |key#0@@133|) true)) :qid |unknown.0:0| :skolemid |3903| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.MapSuccessor#requires| Upperbounded_Lexicographic_Byte_Order._default.MapSuccessor$V@@0 |m#0@@137| |key#0@@133|)) )))
(assert  (=> true (forall ((Upperbounded_Lexicographic_Byte_Order._default.MapSuccessor$V@@1 T@U) (|m#0@@138| T@U) (|key#0@@134| T@U) ) (!  (=> (and (and (and (= (type Upperbounded_Lexicographic_Byte_Order._default.MapSuccessor$V@@1) TyType) (= (type |m#0@@138|) (MapType BoxType BoxType))) (= (type |key#0@@134|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.MapSuccessor#canCall| Upperbounded_Lexicographic_Byte_Order._default.MapSuccessor$V@@1 |m#0@@138| |key#0@@134|) (and ($Is |m#0@@138| (TMap Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapSuccessor$V@@1)) ($Is |key#0@@134| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (|Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (|Map#Domain| |m#0@@138|) |key#0@@134|) (= (Upperbounded__Lexicographic__Byte__Order.__default.MapSuccessor Upperbounded_Lexicographic_Byte_Order._default.MapSuccessor$V@@1 |m#0@@138| |key#0@@134|) (Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor (|Map#Domain| |m#0@@138|) |key#0@@134|)))) :qid |unknown.0:0| :skolemid |3904| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.MapSuccessor Upperbounded_Lexicographic_Byte_Order._default.MapSuccessor$V@@1 |m#0@@138| |key#0@@134|)) ))))
(assert  (=> true (forall ((Upperbounded_Lexicographic_Byte_Order._default.MapSuccessor$V@@2 T@U) (|m#0@@139| T@U) (|key#0@@135| T@U) ) (!  (=> (and (and (and (= (type Upperbounded_Lexicographic_Byte_Order._default.MapSuccessor$V@@2) TyType) (= (type |m#0@@139|) (MapType BoxType BoxType))) (= (type |key#0@@135|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.MapSuccessor#canCall| Upperbounded_Lexicographic_Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@139|) (Lit |key#0@@135|)) (and ($Is |m#0@@139| (TMap Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.MapSuccessor$V@@2)) ($Is |key#0@@135| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (|Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (Lit (|Map#Domain| (Lit |m#0@@139|))) (Lit |key#0@@135|)) (= (Upperbounded__Lexicographic__Byte__Order.__default.MapSuccessor Upperbounded_Lexicographic_Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@139|) (Lit |key#0@@135|)) (Lit (Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor (Lit (|Map#Domain| (Lit |m#0@@139|))) (Lit |key#0@@135|)))))) :qid |unknown.0:0| :weight 3 :skolemid |3905| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.MapSuccessor Upperbounded_Lexicographic_Byte_Order._default.MapSuccessor$V@@2 (Lit |m#0@@139|) (Lit |key#0@@135|))) ))))
(assert (forall ((arg0@@640 T@U) (arg1@@330 T@U) ) (! (= (type (Upperbounded__Lexicographic__Byte__Order.__default.SeqSuccessor arg0@@640 arg1@@330)) DatatypeTypeType) :qid |funType:Upperbounded__Lexicographic__Byte__Order.__default.SeqSuccessor| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SeqSuccessor arg0@@640 arg1@@330)) )))
(assert  (=> true (forall ((|m#0@@140| T@U) (|key#0@@136| T@U) ) (!  (=> (and (and (= (type |m#0@@140|) (SeqType BoxType)) (= (type |key#0@@136|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| |m#0@@140| |key#0@@136|) (and ($Is |m#0@@140| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@136| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) ($Is (Upperbounded__Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@140| |key#0@@136|) (Tclass.Options.Option Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.715:25| :skolemid |3906| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@140| |key#0@@136|)) ))))
(assert (forall ((|m#0@@141| T@U) (|key#0@@137| T@U) ) (!  (=> (and (and (= (type |m#0@@141|) (SeqType BoxType)) (= (type |key#0@@137|) DatatypeTypeType)) (and ($Is |m#0@@141| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@137| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.SeqSuccessor#requires| |m#0@@141| |key#0@@137|) true)) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.715:25| :skolemid |3907| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.SeqSuccessor#requires| |m#0@@141| |key#0@@137|)) )))
(assert  (=> true (forall ((|m#0@@142| T@U) (|key#0@@138| T@U) ) (!  (=> (and (and (= (type |m#0@@142|) (SeqType BoxType)) (= (type |key#0@@138|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| |m#0@@142| |key#0@@138|) (and ($Is |m#0@@142| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@138| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (|Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (|lambda#2| Tclass.Upperbounded__Lexicographic__Byte__Order.Element |m#0@@142|) |key#0@@138|) (= (Upperbounded__Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@142| |key#0@@138|) (Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor (|lambda#2| Tclass.Upperbounded__Lexicographic__Byte__Order.Element |m#0@@142|) |key#0@@138|)))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.715:25| :skolemid |3908| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SeqSuccessor |m#0@@142| |key#0@@138|)) ))))
(assert  (=> true (forall ((|m#0@@143| T@U) (|key#0@@139| T@U) ) (!  (=> (and (and (= (type |m#0@@143|) (SeqType BoxType)) (= (type |key#0@@139|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.SeqSuccessor#canCall| (Lit |m#0@@143|) (Lit |key#0@@139|)) (and ($Is |m#0@@143| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@139| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (|Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor#canCall| (|lambda#2| Tclass.Upperbounded__Lexicographic__Byte__Order.Element |m#0@@143|) (Lit |key#0@@139|)) (= (Upperbounded__Lexicographic__Byte__Order.__default.SeqSuccessor (Lit |m#0@@143|) (Lit |key#0@@139|)) (Upperbounded__Lexicographic__Byte__Order.__default.SetSuccessor (|lambda#2| Tclass.Upperbounded__Lexicographic__Byte__Order.Element |m#0@@143|) (Lit |key#0@@139|))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.715:25| :weight 3 :skolemid |3909| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SeqSuccessor (Lit |m#0@@143|) (Lit |key#0@@139|))) ))))
(assert (forall ((Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V T@U) ($ly@@598 T@U) (|s#0@@225| T@U) (|m#0@@144| T@U) ) (!  (=> (and (and (and (= (type Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V) TyType) (= (type $ly@@598) LayerTypeType)) (= (type |s#0@@225|) (SeqType BoxType))) (= (type |m#0@@144|) (MapType BoxType BoxType))) (= (Upperbounded__Lexicographic__Byte__Order.__default.SortedSeqForMap Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V ($LS $ly@@598) |s#0@@225| |m#0@@144|) (Upperbounded__Lexicographic__Byte__Order.__default.SortedSeqForMap Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V $ly@@598 |s#0@@225| |m#0@@144|))) :qid |unknown.0:0| :skolemid |3910| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SortedSeqForMap Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V ($LS $ly@@598) |s#0@@225| |m#0@@144|)) )))
(assert (forall ((Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 T@U) ($ly@@599 T@U) (|s#0@@226| T@U) (|m#0@@145| T@U) ) (!  (=> (and (and (and (= (type Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0) TyType) (= (type $ly@@599) LayerTypeType)) (= (type |s#0@@226|) (SeqType BoxType))) (= (type |m#0@@145|) (MapType BoxType BoxType))) (= (Upperbounded__Lexicographic__Byte__Order.__default.SortedSeqForMap Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 $ly@@599 |s#0@@226| |m#0@@145|) (Upperbounded__Lexicographic__Byte__Order.__default.SortedSeqForMap Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 $LZ |s#0@@226| |m#0@@145|))) :qid |unknown.0:0| :skolemid |3911| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SortedSeqForMap Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@0 (AsFuelBottom $ly@@599) |s#0@@226| |m#0@@145|)) )))
(assert  (=> true (forall ((Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1 T@U) ($ly@@600 T@U) (|s#0@@227| T@U) (|m#0@@146| T@U) ) (!  (=> (and (and (and (and (= (type Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1) TyType) (= (type $ly@@600) LayerTypeType)) (= (type |s#0@@227|) (SeqType BoxType))) (= (type |m#0@@146|) (MapType BoxType BoxType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1 |s#0@@227| |m#0@@146|) (and ($Is |s#0@@227| (TSeq (Tclass._System.Tuple2 Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1))) ($Is |m#0@@146| (TMap Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1))))) true) :qid |unknown.0:0| :skolemid |3912| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SortedSeqForMap Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@1 $ly@@600 |s#0@@227| |m#0@@146|)) ))))
(assert (forall ((Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 T@U) ($ly@@601 T@U) (|s#0@@228| T@U) (|m#0@@147| T@U) ) (!  (=> (and (and (and (and (= (type Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2) TyType) (= (type $ly@@601) LayerTypeType)) (= (type |s#0@@228|) (SeqType BoxType))) (= (type |m#0@@147|) (MapType BoxType BoxType))) (and ($Is |s#0@@228| (TSeq (Tclass._System.Tuple2 Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2))) ($Is |m#0@@147| (TMap Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2)))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 $ly@@601 |s#0@@228| |m#0@@147|) true)) :qid |unknown.0:0| :skolemid |3913| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.SortedSeqForMap#requires| Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@2 $ly@@601 |s#0@@228| |m#0@@147|)) )))
(assert (= (type StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted) LayerTypeType))
(assert  (=> true (forall ((Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 T@U) ($ly@@602 T@U) (|s#0@@229| T@U) (|m#0@@148| T@U) ) (!  (=> (and (and (and (and (= (type Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3) TyType) (= (type $ly@@602) LayerTypeType)) (= (type |s#0@@229|) (SeqType BoxType))) (= (type |m#0@@148|) (MapType BoxType BoxType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@229| |m#0@@148|) (and ($Is |s#0@@229| (TSeq (Tclass._System.Tuple2 Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3))) ($Is |m#0@@148| (TMap Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3))))) (and (and (and (and (|Sequences.__default.Unzip#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 |s#0@@229|) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@229|))) (|Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@229|))))) (=> (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@229|)))) (and (forall ((|i#0@@118| Int) ) (!  (and (=> (<= (LitInt 0) |i#0@@118|) (=> (< |i#0@@118| (|Seq#Length| |s#0@@229|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@229| |i#0@@118|))))) (=> (=> (and (<= (LitInt 0) |i#0@@118|) (< |i#0@@118| (|Seq#Length| |s#0@@229|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@148|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@229| |i#0@@118|)))))) (=> (<= (LitInt 0) |i#0@@118|) (=> (< |i#0@@118| (|Seq#Length| |s#0@@229|)) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@229| |i#0@@118|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@229| |i#0@@118|)))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.723:16| :skolemid |3917| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@229| |i#0@@118|))) )) (=> (forall ((|i#0@@119| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@119|) (< |i#0@@119| (|Seq#Length| |s#0@@229|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@148|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@229| |i#0@@119|)))))) (=> (and (<= (LitInt 0) |i#0@@119|) (< |i#0@@119| (|Seq#Length| |s#0@@229|))) (= (MapType0Select (|Map#Elements| |m#0@@148|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@229| |i#0@@119|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@229| |i#0@@119|))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.723:16| :skolemid |3920| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@229| |i#0@@119|))) )) (forall ((|key#0@@140| T@U) ) (!  (=> (and (and (= (type |key#0@@140|) DatatypeTypeType) ($Is |key#0@@140| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@148|) ($Box |key#0@@140|)))) (forall ((|i#1@@44| Int) ) (!  (=> (<= (LitInt 0) |i#1@@44|) (=> (< |i#1@@44| (|Seq#Length| |s#0@@229|)) (and (and (and (|$IsA#Upperbounded__Lexicographic__Byte__Order.Element| ($Unbox DatatypeTypeType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@229| |i#1@@44|))))) (|$IsA#Upperbounded__Lexicographic__Byte__Order.Element| |key#0@@140|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@229| |i#1@@44|)))) (=> (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| ($Unbox DatatypeTypeType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@229| |i#1@@44|)))) |key#0@@140|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@229| |i#1@@44|))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.724:44| :skolemid |3918| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@229| |i#1@@44|))) ))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.724:16| :skolemid |3919| :pattern ( (MapType0Select (|Map#Elements| |m#0@@148|) ($Box |key#0@@140|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@148|) ($Box |key#0@@140|))) )))))) (= (Upperbounded__Lexicographic__Byte__Order.__default.SortedSeqForMap Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@602) |s#0@@229| |m#0@@148|)  (and (and (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 StartFuel_Sequences._default.Unzip |s#0@@229|)))) (forall ((|i#0@@120| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#0@@120|) (< |i#0@@120| (|Seq#Length| |s#0@@229|))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@148|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@229| |i#0@@120|)))))) (=> (and (<= (LitInt 0) |i#0@@120|) (< |i#0@@120| (|Seq#Length| |s#0@@229|))) (= (MapType0Select (|Map#Elements| |m#0@@148|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@229| |i#0@@120|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@229| |i#0@@120|))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.723:16| :skolemid |3914| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@229| |i#0@@120|))) ))) (forall ((|key#0@@141| T@U) ) (!  (=> (and (and (= (type |key#0@@141|) DatatypeTypeType) ($Is |key#0@@141| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@148|) ($Box |key#0@@141|)))) (exists ((|i#1@@45| Int) ) (!  (and (and (and (<= (LitInt 0) |i#1@@45|) (< |i#1@@45| (|Seq#Length| |s#0@@229|))) (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| ($Unbox DatatypeTypeType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@229| |i#1@@45|)))) |key#0@@141|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@229| |i#1@@45|))) (MapType0Select (|Map#Elements| |m#0@@148|) ($Box |key#0@@141|)))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.724:44| :skolemid |3915| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@229| |i#1@@45|))) ))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.724:16| :skolemid |3916| :pattern ( (MapType0Select (|Map#Elements| |m#0@@148|) ($Box |key#0@@141|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@148|) ($Box |key#0@@141|))) )))))) :qid |unknown.0:0| :skolemid |3921| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SortedSeqForMap Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@3 ($LS $ly@@602) |s#0@@229| |m#0@@148|)) ))))
(assert  (=> true (forall ((Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 T@U) ($ly@@603 T@U) (|s#0@@230| T@U) (|m#0@@149| T@U) ) (!  (=> (and (and (and (and (= (type Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4) TyType) (= (type $ly@@603) LayerTypeType)) (= (type |s#0@@230|) (SeqType BoxType))) (= (type |m#0@@149|) (MapType BoxType BoxType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.SortedSeqForMap#canCall| Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@230|) (Lit |m#0@@149|)) (and ($Is |s#0@@230| (TSeq (Tclass._System.Tuple2 Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4))) ($Is |m#0@@149| (TMap Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4))))) (and (and (and (and (|Sequences.__default.Unzip#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 (Lit |s#0@@230|)) (_System.Tuple2.___hMake2_q (Sequences.__default.Unzip Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@230|)))) (|Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@230|)))))) (=> (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@230|))))) (and (forall ((|i#2@@15| Int) ) (!  (and (=> (<= (LitInt 0) |i#2@@15|) (=> (< |i#2@@15| (|Seq#Length| (Lit |s#0@@230|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@230|) |i#2@@15|))))) (=> (=> (and (<= (LitInt 0) |i#2@@15|) (< |i#2@@15| (|Seq#Length| (Lit |s#0@@230|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@149|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@230|) |i#2@@15|)))))) (=> (<= (LitInt 0) |i#2@@15|) (=> (< |i#2@@15| (|Seq#Length| (Lit |s#0@@230|))) (and (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@230|) |i#2@@15|))) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@230|) |i#2@@15|)))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.723:16| :skolemid |3925| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@230| |i#2@@15|))) )) (=> (forall ((|i#2@@16| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@16|) (< |i#2@@16| (|Seq#Length| (Lit |s#0@@230|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@149|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@230|) |i#2@@16|)))))) (=> (and (<= (LitInt 0) |i#2@@16|) (< |i#2@@16| (|Seq#Length| (Lit |s#0@@230|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@149|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@230|) |i#2@@16|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@230|) |i#2@@16|))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.723:16| :skolemid |3928| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@230| |i#2@@16|))) )) (forall ((|key#1@@9| T@U) ) (!  (=> (and (and (= (type |key#1@@9|) DatatypeTypeType) ($Is |key#1@@9| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@149|) ($Box |key#1@@9|)))) (forall ((|i#3@@10| Int) ) (!  (=> (<= (LitInt 0) |i#3@@10|) (=> (< |i#3@@10| (|Seq#Length| (Lit |s#0@@230|))) (and (and (and (|$IsA#Upperbounded__Lexicographic__Byte__Order.Element| ($Unbox DatatypeTypeType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@230|) |i#3@@10|))))) (|$IsA#Upperbounded__Lexicographic__Byte__Order.Element| |key#1@@9|)) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@230|) |i#3@@10|)))) (=> (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| ($Unbox DatatypeTypeType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@230|) |i#3@@10|)))) |key#1@@9|) (_System.Tuple2.___hMake2_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@230|) |i#3@@10|))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.724:44| :skolemid |3926| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@230| |i#3@@10|))) ))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.724:16| :skolemid |3927| :pattern ( (MapType0Select (|Map#Elements| |m#0@@149|) ($Box |key#1@@9|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@149|) ($Box |key#1@@9|))) )))))) (= (Upperbounded__Lexicographic__Byte__Order.__default.SortedSeqForMap Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@603) (Lit |s#0@@230|) (Lit |m#0@@149|))  (and (and (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted ($Unbox (SeqType BoxType) (_System.Tuple2._0 (Sequences.__default.Unzip Tclass.Upperbounded__Lexicographic__Byte__Order.Element Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 StartFuel_Sequences._default.Unzip (Lit |s#0@@230|))))) (forall ((|i#2@@17| Int) ) (!  (=> true (and (=> (and (<= (LitInt 0) |i#2@@17|) (< |i#2@@17| (|Seq#Length| (Lit |s#0@@230|)))) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@149|) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@230|) |i#2@@17|)))))) (=> (and (<= (LitInt 0) |i#2@@17|) (< |i#2@@17| (|Seq#Length| (Lit |s#0@@230|)))) (= (MapType0Select (|Map#Elements| (Lit |m#0@@149|)) (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@230|) |i#2@@17|)))) (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@230|) |i#2@@17|))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.723:16| :skolemid |3922| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@230| |i#2@@17|))) ))) (forall ((|key#1@@10| T@U) ) (!  (=> (and (and (= (type |key#1@@10|) DatatypeTypeType) ($Is |key#1@@10| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (U_2_bool (MapType0Select (|Map#Domain| |m#0@@149|) ($Box |key#1@@10|)))) (exists ((|i#3@@11| Int) ) (!  (and (and (and (<= (LitInt 0) |i#3@@11|) (< |i#3@@11| (|Seq#Length| (Lit |s#0@@230|)))) (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| ($Unbox DatatypeTypeType (_System.Tuple2._0 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@230|) |i#3@@11|)))) |key#1@@10|)) (= (_System.Tuple2._1 ($Unbox DatatypeTypeType (|Seq#Index| (Lit |s#0@@230|) |i#3@@11|))) (MapType0Select (|Map#Elements| (Lit |m#0@@149|)) ($Box |key#1@@10|)))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.724:44| :skolemid |3923| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |s#0@@230| |i#3@@11|))) ))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.724:16| :skolemid |3924| :pattern ( (MapType0Select (|Map#Elements| |m#0@@149|) ($Box |key#1@@10|))) :pattern ( (MapType0Select (|Map#Domain| |m#0@@149|) ($Box |key#1@@10|))) )))))) :qid |unknown.0:0| :weight 3 :skolemid |3929| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SortedSeqForMap Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap$V@@4 ($LS $ly@@603) (Lit |s#0@@230|) (Lit |m#0@@149|))) ))))
(assert (forall ((arg0@@641 T@U) (arg1@@331 T@U) ) (! (= (type (Upperbounded__Lexicographic__Byte__Order.__default.minimum arg0@@641 arg1@@331)) DatatypeTypeType) :qid |funType:Upperbounded__Lexicographic__Byte__Order.__default.minimum| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.minimum arg0@@641 arg1@@331)) )))
(assert (forall (($ly@@604 T@U) (|s#0@@231| T@U) ) (!  (=> (and (= (type $ly@@604) LayerTypeType) (= (type |s#0@@231|) (MapType0Type BoxType boolType))) (= (Upperbounded__Lexicographic__Byte__Order.__default.minimum ($LS $ly@@604) |s#0@@231|) (Upperbounded__Lexicographic__Byte__Order.__default.minimum $ly@@604 |s#0@@231|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.727:22| :skolemid |3930| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.minimum ($LS $ly@@604) |s#0@@231|)) )))
(assert (forall (($ly@@605 T@U) (|s#0@@232| T@U) ) (!  (=> (and (= (type $ly@@605) LayerTypeType) (= (type |s#0@@232|) (MapType0Type BoxType boolType))) (= (Upperbounded__Lexicographic__Byte__Order.__default.minimum $ly@@605 |s#0@@232|) (Upperbounded__Lexicographic__Byte__Order.__default.minimum $LZ |s#0@@232|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.727:22| :skolemid |3931| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.minimum (AsFuelBottom $ly@@605) |s#0@@232|)) )))
(assert  (=> true (forall (($ly@@606 T@U) (|s#0@@233| T@U) ) (!  (=> (and (and (= (type $ly@@606) LayerTypeType) (= (type |s#0@@233|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.minimum#canCall| |s#0@@233|) (and ($Is |s#0@@233| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (>= (|Set#Card| |s#0@@233|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@233| ($Box (Upperbounded__Lexicographic__Byte__Order.__default.minimum $ly@@606 |s#0@@233|)))) (forall ((|y#0@@19| T@U) ) (!  (=> (= (type |y#0@@19|) DatatypeTypeType) (=> (and ($Is |y#0@@19| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) (U_2_bool (MapType0Select |s#0@@233| ($Box |y#0@@19|)))) (Upperbounded__Lexicographic__Byte__Order.__default.lte (Upperbounded__Lexicographic__Byte__Order.__default.minimum $ly@@606 |s#0@@233|) |y#0@@19|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.730:18| :skolemid |3932| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lte (Upperbounded__Lexicographic__Byte__Order.__default.minimum $ly@@606 |s#0@@233|) |y#0@@19|)) :pattern ( (MapType0Select |s#0@@233| ($Box |y#0@@19|))) ))) ($Is (Upperbounded__Lexicographic__Byte__Order.__default.minimum $ly@@606 |s#0@@233|) Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.727:22| :skolemid |3933| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.minimum $ly@@606 |s#0@@233|)) ))))
(assert (forall (($ly@@607 T@U) ($Heap@@73 T@U) (|s#0@@234| T@U) ) (!  (=> (and (and (and (= (type $ly@@607) LayerTypeType) (= (type $Heap@@73) (MapType0Type refType MapType1Type))) (= (type |s#0@@234|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@73) ($Is |s#0@@234| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.minimum#requires| $ly@@607 |s#0@@234|) (>= (|Set#Card| |s#0@@234|) (LitInt 1)))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.727:22| :skolemid |3934| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.minimum#requires| $ly@@607 |s#0@@234|) ($IsGoodHeap $Heap@@73)) )))
(assert (forall ((arg0@@642 T@U) ) (! (= (type (|$let#35_a| arg0@@642)) DatatypeTypeType) :qid |funType:$let#35_a| :pattern ( (|$let#35_a| arg0@@642)) )))
(assert (forall ((s@@57 T@U) ) (!  (=> (and (= (type s@@57) (MapType0Type BoxType boolType)) (|$let#35$canCall| s@@57)) (and ($Is (|$let#35_a| s@@57) Tclass.Upperbounded__Lexicographic__Byte__Order.Element) (U_2_bool (MapType0Select s@@57 ($Box (|$let#35_a| s@@57)))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.734:5| :skolemid |3935| :pattern ( (|$let#35_a| s@@57)) )))
(assert  (=> true (forall (($ly@@608 T@U) ($Heap@@74 T@U) (|s#0@@235| T@U) ) (!  (=> (and (and (and (= (type $ly@@608) LayerTypeType) (= (type $Heap@@74) (MapType0Type refType MapType1Type))) (= (type |s#0@@235|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.minimum#canCall| |s#0@@235|) (and (and ($IsGoodHeap $Heap@@74) ($Is |s#0@@235| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (>= (|Set#Card| |s#0@@235|) (LitInt 1))))) (and (and (|$let#35$canCall| |s#0@@235|) (let ((|s'#1@@3| (|Set#Difference| |s#0@@235| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#35_a| |s#0@@235|)))))) (=> (not (|Set#Equal| |s'#1@@3| (|Set#Empty| BoxType))) (and (|Upperbounded__Lexicographic__Byte__Order.__default.minimum#canCall| |s'#1@@3|) (let ((|m'#1@@5| (Upperbounded__Lexicographic__Byte__Order.__default.minimum $ly@@608 |s'#1@@3|))) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| (|$let#35_a| |s#0@@235|) |m'#1@@5|)))))) (= (Upperbounded__Lexicographic__Byte__Order.__default.minimum ($LS $ly@@608) |s#0@@235|) (let ((|a#0@@197| (|$let#35_a| |s#0@@235|))) (let ((|s'#0@@3| (|Set#Difference| |s#0@@235| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#0@@197|))))) (ite (|Set#Equal| |s'#0@@3| (|Set#Empty| BoxType)) |a#0@@197| (let ((|m'#0@@14| (Upperbounded__Lexicographic__Byte__Order.__default.minimum $ly@@608 |s'#0@@3|))) (ite (Upperbounded__Lexicographic__Byte__Order.__default.lt |a#0@@197| |m'#0@@14|) |a#0@@197| |m'#0@@14|)))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.727:22| :skolemid |3936| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.minimum ($LS $ly@@608) |s#0@@235|) ($IsGoodHeap $Heap@@74)) ))))
(assert  (=> true (forall (($ly@@609 T@U) ($Heap@@75 T@U) (|s#0@@236| T@U) ) (!  (=> (and (and (and (= (type $ly@@609) LayerTypeType) (= (type $Heap@@75) (MapType0Type refType MapType1Type))) (= (type |s#0@@236|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.minimum#canCall| (Lit |s#0@@236|)) (and (and ($IsGoodHeap $Heap@@75) ($Is |s#0@@236| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (>= (|Set#Card| (Lit |s#0@@236|)) (LitInt 1))))) (and (and (|$let#35$canCall| (Lit |s#0@@236|)) (let ((|s'#3@@3| (|Set#Difference| |s#0@@236| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#35_a| (Lit |s#0@@236|))))))) (=> (not (|Set#Equal| |s'#3@@3| (|Set#Empty| BoxType))) (and (|Upperbounded__Lexicographic__Byte__Order.__default.minimum#canCall| |s'#3@@3|) (let ((|m'#3@@3| (Upperbounded__Lexicographic__Byte__Order.__default.minimum ($LS $ly@@609) |s'#3@@3|))) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| (|$let#35_a| (Lit |s#0@@236|)) |m'#3@@3|)))))) (= (Upperbounded__Lexicographic__Byte__Order.__default.minimum ($LS $ly@@609) (Lit |s#0@@236|)) (let ((|a#1@@7| (|$let#35_a| (Lit |s#0@@236|)))) (let ((|s'#2@@3| (|Set#Difference| |s#0@@236| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#1@@7|))))) (ite (|Set#Equal| |s'#2@@3| (|Set#Empty| BoxType)) |a#1@@7| (let ((|m'#2@@4| (Upperbounded__Lexicographic__Byte__Order.__default.minimum ($LS $ly@@609) |s'#2@@3|))) (ite (Upperbounded__Lexicographic__Byte__Order.__default.lt |a#1@@7| |m'#2@@4|) |a#1@@7| |m'#2@@4|)))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.727:22| :weight 3 :skolemid |3937| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.minimum ($LS $ly@@609) (Lit |s#0@@236|)) ($IsGoodHeap $Heap@@75)) ))))
(assert (forall ((arg0@@643 T@U) (arg1@@332 T@U) ) (! (= (type (Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt arg0@@643 arg1@@332)) DatatypeTypeType) :qid |funType:Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt arg0@@643 arg1@@332)) )))
(assert (forall (($ly@@610 T@U) (|s#0@@237| T@U) ) (!  (=> (and (= (type $ly@@610) LayerTypeType) (= (type |s#0@@237|) (MapType0Type BoxType boolType))) (= (Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@610) |s#0@@237|) (Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt $ly@@610 |s#0@@237|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.750:22| :skolemid |3938| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@610) |s#0@@237|)) )))
(assert (forall (($ly@@611 T@U) (|s#0@@238| T@U) ) (!  (=> (and (= (type $ly@@611) LayerTypeType) (= (type |s#0@@238|) (MapType0Type BoxType boolType))) (= (Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt $ly@@611 |s#0@@238|) (Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt $LZ |s#0@@238|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.750:22| :skolemid |3939| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt (AsFuelBottom $ly@@611) |s#0@@238|)) )))
(assert  (=> true (forall (($ly@@612 T@U) (|s#0@@239| T@U) ) (!  (=> (and (and (= (type $ly@@612) LayerTypeType) (= (type |s#0@@239|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt#canCall| |s#0@@239|) ($Is |s#0@@239| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (and (and (=> (Options.Option.Some_q (Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt $ly@@612 |s#0@@239|)) (U_2_bool (MapType0Select |s#0@@239| (Options.Option.value (Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt $ly@@612 |s#0@@239|))))) (=> (Options.Option.Some_q (Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt $ly@@612 |s#0@@239|)) (forall ((|y#0@@20| T@U) ) (!  (=> (= (type |y#0@@20|) DatatypeTypeType) (=> (and ($Is |y#0@@20| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) (U_2_bool (MapType0Select |s#0@@239| ($Box |y#0@@20|)))) (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (Options.Option.value (Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt $ly@@612 |s#0@@239|))) |y#0@@20|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.752:30| :skolemid |3940| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (Options.Option.value (Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt $ly@@612 |s#0@@239|))) |y#0@@20|)) :pattern ( (MapType0Select |s#0@@239| ($Box |y#0@@20|))) )))) (=> (Options.Option.None_q (Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt $ly@@612 |s#0@@239|)) (|Set#Equal| |s#0@@239| (|Set#Empty| BoxType)))) ($Is (Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt $ly@@612 |s#0@@239|) (Tclass.Options.Option Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.750:22| :skolemid |3941| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt $ly@@612 |s#0@@239|)) ))))
(assert (forall (($ly@@613 T@U) (|s#0@@240| T@U) ) (!  (=> (and (and (= (type $ly@@613) LayerTypeType) (= (type |s#0@@240|) (MapType0Type BoxType boolType))) ($Is |s#0@@240| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt#requires| $ly@@613 |s#0@@240|) true)) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.750:22| :skolemid |3942| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt#requires| $ly@@613 |s#0@@240|)) )))
(assert (= (type StartFuel_Upperbounded_Lexicographic_Byte_Order._default.minimum) LayerTypeType))
(assert  (=> true (forall (($ly@@614 T@U) (|s#0@@241| T@U) ) (!  (=> (and (and (= (type $ly@@614) LayerTypeType) (= (type |s#0@@241|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt#canCall| |s#0@@241|) ($Is |s#0@@241| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (=> (not (|Set#Equal| |s#0@@241| (|Set#Empty| BoxType))) (|Upperbounded__Lexicographic__Byte__Order.__default.minimum#canCall| |s#0@@241|)) (= (Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@614) |s#0@@241|) (ite (|Set#Equal| |s#0@@241| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Upperbounded__Lexicographic__Byte__Order.__default.minimum StartFuel_Upperbounded_Lexicographic_Byte_Order._default.minimum |s#0@@241|))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.750:22| :skolemid |3943| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@614) |s#0@@241|)) ))))
(assert  (=> true (forall (($ly@@615 T@U) (|s#0@@242| T@U) ) (!  (=> (and (and (= (type $ly@@615) LayerTypeType) (= (type |s#0@@242|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt#canCall| (Lit |s#0@@242|)) ($Is |s#0@@242| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (=> (not (|Set#Equal| |s#0@@242| (|Set#Empty| BoxType))) (|Upperbounded__Lexicographic__Byte__Order.__default.minimum#canCall| (Lit |s#0@@242|))) (= (Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@615) (Lit |s#0@@242|)) (ite (|Set#Equal| |s#0@@242| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Upperbounded__Lexicographic__Byte__Order.__default.minimum StartFuel_Upperbounded_Lexicographic_Byte_Order._default.minimum (Lit |s#0@@242|)))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.750:22| :weight 3 :skolemid |3944| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.minimumOpt ($LS $ly@@615) (Lit |s#0@@242|))) ))))
(assert (forall ((arg0@@644 T@U) (arg1@@333 T@U) ) (! (= (type (Upperbounded__Lexicographic__Byte__Order.__default.maximum arg0@@644 arg1@@333)) DatatypeTypeType) :qid |funType:Upperbounded__Lexicographic__Byte__Order.__default.maximum| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.maximum arg0@@644 arg1@@333)) )))
(assert (forall (($ly@@616 T@U) (|s#0@@243| T@U) ) (!  (=> (and (= (type $ly@@616) LayerTypeType) (= (type |s#0@@243|) (MapType0Type BoxType boolType))) (= (Upperbounded__Lexicographic__Byte__Order.__default.maximum ($LS $ly@@616) |s#0@@243|) (Upperbounded__Lexicographic__Byte__Order.__default.maximum $ly@@616 |s#0@@243|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.758:22| :skolemid |3945| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.maximum ($LS $ly@@616) |s#0@@243|)) )))
(assert (forall (($ly@@617 T@U) (|s#0@@244| T@U) ) (!  (=> (and (= (type $ly@@617) LayerTypeType) (= (type |s#0@@244|) (MapType0Type BoxType boolType))) (= (Upperbounded__Lexicographic__Byte__Order.__default.maximum $ly@@617 |s#0@@244|) (Upperbounded__Lexicographic__Byte__Order.__default.maximum $LZ |s#0@@244|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.758:22| :skolemid |3946| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.maximum (AsFuelBottom $ly@@617) |s#0@@244|)) )))
(assert  (=> true (forall (($ly@@618 T@U) (|s#0@@245| T@U) ) (!  (=> (and (and (= (type $ly@@618) LayerTypeType) (= (type |s#0@@245|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.maximum#canCall| |s#0@@245|) (and ($Is |s#0@@245| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (>= (|Set#Card| |s#0@@245|) (LitInt 1))))) (and (and (U_2_bool (MapType0Select |s#0@@245| ($Box (Upperbounded__Lexicographic__Byte__Order.__default.maximum $ly@@618 |s#0@@245|)))) (forall ((|y#0@@21| T@U) ) (!  (=> (= (type |y#0@@21|) DatatypeTypeType) (=> (and ($Is |y#0@@21| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) (U_2_bool (MapType0Select |s#0@@245| ($Box |y#0@@21|)))) (Upperbounded__Lexicographic__Byte__Order.__default.lte |y#0@@21| (Upperbounded__Lexicographic__Byte__Order.__default.maximum $ly@@618 |s#0@@245|)))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.761:18| :skolemid |3947| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lte |y#0@@21| (Upperbounded__Lexicographic__Byte__Order.__default.maximum $ly@@618 |s#0@@245|))) :pattern ( (MapType0Select |s#0@@245| ($Box |y#0@@21|))) ))) ($Is (Upperbounded__Lexicographic__Byte__Order.__default.maximum $ly@@618 |s#0@@245|) Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.758:22| :skolemid |3948| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.maximum $ly@@618 |s#0@@245|)) ))))
(assert (forall (($ly@@619 T@U) ($Heap@@76 T@U) (|s#0@@246| T@U) ) (!  (=> (and (and (and (= (type $ly@@619) LayerTypeType) (= (type $Heap@@76) (MapType0Type refType MapType1Type))) (= (type |s#0@@246|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@76) ($Is |s#0@@246| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.maximum#requires| $ly@@619 |s#0@@246|) (>= (|Set#Card| |s#0@@246|) (LitInt 1)))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.758:22| :skolemid |3949| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.maximum#requires| $ly@@619 |s#0@@246|) ($IsGoodHeap $Heap@@76)) )))
(assert (forall ((arg0@@645 T@U) ) (! (= (type (|$let#38_a| arg0@@645)) DatatypeTypeType) :qid |funType:$let#38_a| :pattern ( (|$let#38_a| arg0@@645)) )))
(assert (forall ((s@@58 T@U) ) (!  (=> (and (= (type s@@58) (MapType0Type BoxType boolType)) (|$let#38$canCall| s@@58)) (and ($Is (|$let#38_a| s@@58) Tclass.Upperbounded__Lexicographic__Byte__Order.Element) (U_2_bool (MapType0Select s@@58 ($Box (|$let#38_a| s@@58)))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.763:5| :skolemid |3950| :pattern ( (|$let#38_a| s@@58)) )))
(assert  (=> true (forall (($ly@@620 T@U) ($Heap@@77 T@U) (|s#0@@247| T@U) ) (!  (=> (and (and (and (= (type $ly@@620) LayerTypeType) (= (type $Heap@@77) (MapType0Type refType MapType1Type))) (= (type |s#0@@247|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.maximum#canCall| |s#0@@247|) (and (and ($IsGoodHeap $Heap@@77) ($Is |s#0@@247| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (>= (|Set#Card| |s#0@@247|) (LitInt 1))))) (and (and (|$let#38$canCall| |s#0@@247|) (let ((|s'#1@@4| (|Set#Difference| |s#0@@247| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#38_a| |s#0@@247|)))))) (=> (not (|Set#Equal| |s'#1@@4| (|Set#Empty| BoxType))) (and (|Upperbounded__Lexicographic__Byte__Order.__default.maximum#canCall| |s'#1@@4|) (let ((|m'#1@@6| (Upperbounded__Lexicographic__Byte__Order.__default.maximum $ly@@620 |s'#1@@4|))) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| |m'#1@@6| (|$let#38_a| |s#0@@247|))))))) (= (Upperbounded__Lexicographic__Byte__Order.__default.maximum ($LS $ly@@620) |s#0@@247|) (let ((|a#0@@198| (|$let#38_a| |s#0@@247|))) (let ((|s'#0@@4| (|Set#Difference| |s#0@@247| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#0@@198|))))) (ite (|Set#Equal| |s'#0@@4| (|Set#Empty| BoxType)) |a#0@@198| (let ((|m'#0@@15| (Upperbounded__Lexicographic__Byte__Order.__default.maximum $ly@@620 |s'#0@@4|))) (ite (Upperbounded__Lexicographic__Byte__Order.__default.lt |m'#0@@15| |a#0@@198|) |a#0@@198| |m'#0@@15|)))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.758:22| :skolemid |3951| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.maximum ($LS $ly@@620) |s#0@@247|) ($IsGoodHeap $Heap@@77)) ))))
(assert  (=> true (forall (($ly@@621 T@U) ($Heap@@78 T@U) (|s#0@@248| T@U) ) (!  (=> (and (and (and (= (type $ly@@621) LayerTypeType) (= (type $Heap@@78) (MapType0Type refType MapType1Type))) (= (type |s#0@@248|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.maximum#canCall| (Lit |s#0@@248|)) (and (and ($IsGoodHeap $Heap@@78) ($Is |s#0@@248| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (>= (|Set#Card| (Lit |s#0@@248|)) (LitInt 1))))) (and (and (|$let#38$canCall| (Lit |s#0@@248|)) (let ((|s'#3@@4| (|Set#Difference| |s#0@@248| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#38_a| (Lit |s#0@@248|))))))) (=> (not (|Set#Equal| |s'#3@@4| (|Set#Empty| BoxType))) (and (|Upperbounded__Lexicographic__Byte__Order.__default.maximum#canCall| |s'#3@@4|) (let ((|m'#3@@4| (Upperbounded__Lexicographic__Byte__Order.__default.maximum ($LS $ly@@621) |s'#3@@4|))) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| |m'#3@@4| (|$let#38_a| (Lit |s#0@@248|)))))))) (= (Upperbounded__Lexicographic__Byte__Order.__default.maximum ($LS $ly@@621) (Lit |s#0@@248|)) (let ((|a#1@@8| (|$let#38_a| (Lit |s#0@@248|)))) (let ((|s'#2@@4| (|Set#Difference| |s#0@@248| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |a#1@@8|))))) (ite (|Set#Equal| |s'#2@@4| (|Set#Empty| BoxType)) |a#1@@8| (let ((|m'#2@@5| (Upperbounded__Lexicographic__Byte__Order.__default.maximum ($LS $ly@@621) |s'#2@@4|))) (ite (Upperbounded__Lexicographic__Byte__Order.__default.lt |m'#2@@5| |a#1@@8|) |a#1@@8| |m'#2@@5|)))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.758:22| :weight 3 :skolemid |3952| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.maximum ($LS $ly@@621) (Lit |s#0@@248|)) ($IsGoodHeap $Heap@@78)) ))))
(assert (forall ((arg0@@646 T@U) (arg1@@334 T@U) ) (! (= (type (Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt arg0@@646 arg1@@334)) DatatypeTypeType) :qid |funType:Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt arg0@@646 arg1@@334)) )))
(assert (forall (($ly@@622 T@U) (|s#0@@249| T@U) ) (!  (=> (and (= (type $ly@@622) LayerTypeType) (= (type |s#0@@249|) (MapType0Type BoxType boolType))) (= (Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@622) |s#0@@249|) (Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt $ly@@622 |s#0@@249|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.779:22| :skolemid |3953| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@622) |s#0@@249|)) )))
(assert (forall (($ly@@623 T@U) (|s#0@@250| T@U) ) (!  (=> (and (= (type $ly@@623) LayerTypeType) (= (type |s#0@@250|) (MapType0Type BoxType boolType))) (= (Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt $ly@@623 |s#0@@250|) (Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt $LZ |s#0@@250|))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.779:22| :skolemid |3954| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt (AsFuelBottom $ly@@623) |s#0@@250|)) )))
(assert  (=> true (forall (($ly@@624 T@U) (|s#0@@251| T@U) ) (!  (=> (and (and (= (type $ly@@624) LayerTypeType) (= (type |s#0@@251|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt#canCall| |s#0@@251|) ($Is |s#0@@251| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (and (and (=> (Options.Option.Some_q (Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt $ly@@624 |s#0@@251|)) (U_2_bool (MapType0Select |s#0@@251| (Options.Option.value (Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt $ly@@624 |s#0@@251|))))) (=> (Options.Option.Some_q (Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt $ly@@624 |s#0@@251|)) (forall ((|y#0@@22| T@U) ) (!  (=> (= (type |y#0@@22|) DatatypeTypeType) (=> (and ($Is |y#0@@22| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) (U_2_bool (MapType0Select |s#0@@251| ($Box |y#0@@22|)))) (Upperbounded__Lexicographic__Byte__Order.__default.lte |y#0@@22| ($Unbox DatatypeTypeType (Options.Option.value (Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt $ly@@624 |s#0@@251|)))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.781:30| :skolemid |3955| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lte |y#0@@22| ($Unbox DatatypeTypeType (Options.Option.value (Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt $ly@@624 |s#0@@251|))))) :pattern ( (MapType0Select |s#0@@251| ($Box |y#0@@22|))) )))) (=> (Options.Option.None_q (Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt $ly@@624 |s#0@@251|)) (|Set#Equal| |s#0@@251| (|Set#Empty| BoxType)))) ($Is (Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt $ly@@624 |s#0@@251|) (Tclass.Options.Option Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.779:22| :skolemid |3956| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt $ly@@624 |s#0@@251|)) ))))
(assert (forall (($ly@@625 T@U) (|s#0@@252| T@U) ) (!  (=> (and (and (= (type $ly@@625) LayerTypeType) (= (type |s#0@@252|) (MapType0Type BoxType boolType))) ($Is |s#0@@252| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt#requires| $ly@@625 |s#0@@252|) true)) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.779:22| :skolemid |3957| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt#requires| $ly@@625 |s#0@@252|)) )))
(assert (= (type StartFuel_Upperbounded_Lexicographic_Byte_Order._default.maximum) LayerTypeType))
(assert  (=> true (forall (($ly@@626 T@U) (|s#0@@253| T@U) ) (!  (=> (and (and (= (type $ly@@626) LayerTypeType) (= (type |s#0@@253|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt#canCall| |s#0@@253|) ($Is |s#0@@253| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (=> (not (|Set#Equal| |s#0@@253| (|Set#Empty| BoxType))) (|Upperbounded__Lexicographic__Byte__Order.__default.maximum#canCall| |s#0@@253|)) (= (Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@626) |s#0@@253|) (ite (|Set#Equal| |s#0@@253| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Upperbounded__Lexicographic__Byte__Order.__default.maximum StartFuel_Upperbounded_Lexicographic_Byte_Order._default.maximum |s#0@@253|))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.779:22| :skolemid |3958| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@626) |s#0@@253|)) ))))
(assert  (=> true (forall (($ly@@627 T@U) (|s#0@@254| T@U) ) (!  (=> (and (and (= (type $ly@@627) LayerTypeType) (= (type |s#0@@254|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt#canCall| (Lit |s#0@@254|)) ($Is |s#0@@254| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (=> (not (|Set#Equal| |s#0@@254| (|Set#Empty| BoxType))) (|Upperbounded__Lexicographic__Byte__Order.__default.maximum#canCall| (Lit |s#0@@254|))) (= (Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@627) (Lit |s#0@@254|)) (ite (|Set#Equal| |s#0@@254| (|Set#Empty| BoxType)) |#Options.Option.None| (|#Options.Option.Some| ($Box (Upperbounded__Lexicographic__Byte__Order.__default.maximum StartFuel_Upperbounded_Lexicographic_Byte_Order._default.maximum (Lit |s#0@@254|)))))))) :qid |totalorderidfyUpperboundedTotalOrderUpperboundedLexicographicByteOrder.779:22| :weight 3 :skolemid |3959| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.maximumOpt ($LS $ly@@627) (Lit |s#0@@254|))) ))))
(assert  (=> true (forall ((|a#0@@199| T@U) (|b#0@@147| T@U) ) (!  (=> (and (and (= (type |a#0@@199|) DatatypeTypeType) (= (type |b#0@@147|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| |a#0@@199| |b#0@@147|) (and ($Is |a#0@@199| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |b#0@@147| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) true) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.17:16| :skolemid |3960| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |a#0@@199| |b#0@@147|)) ))))
(assert (forall ((|a#0@@200| T@U) (|b#0@@148| T@U) ) (!  (=> (and (and (= (type |a#0@@200|) DatatypeTypeType) (= (type |b#0@@148|) DatatypeTypeType)) (and ($Is |a#0@@200| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |b#0@@148| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.lt#requires| |a#0@@200| |b#0@@148|) true)) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.17:16| :skolemid |3961| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.lt#requires| |a#0@@200| |b#0@@148|)) )))
(assert  (=> true (forall ((|a#0@@201| T@U) (|b#0@@149| T@U) ) (!  (=> (and (and (= (type |a#0@@201|) DatatypeTypeType) (= (type |b#0@@149|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| |a#0@@201| |b#0@@149|) (and ($Is |a#0@@201| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |b#0@@149| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (and (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@201| |b#0@@149|) (=> (Upperbounded__Lexicographic__Byte__Order.__default.lte |a#0@@201| |b#0@@149|) (and (|$IsA#Upperbounded__Lexicographic__Byte__Order.Element| |a#0@@201|) (|$IsA#Upperbounded__Lexicographic__Byte__Order.Element| |b#0@@149|)))) (= (Upperbounded__Lexicographic__Byte__Order.__default.lt |a#0@@201| |b#0@@149|)  (and (Upperbounded__Lexicographic__Byte__Order.__default.lte |a#0@@201| |b#0@@149|) (not (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| |a#0@@201| |b#0@@149|)))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.17:16| :skolemid |3962| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |a#0@@201| |b#0@@149|)) ))))
(assert  (=> true (forall ((|a#0@@202| T@U) (|b#0@@150| T@U) ) (!  (=> (and (and (= (type |a#0@@202|) DatatypeTypeType) (= (type |b#0@@150|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| (Lit |a#0@@202|) (Lit |b#0@@150|)) (and ($Is |a#0@@202| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |b#0@@150| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (and (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@202|) (Lit |b#0@@150|)) (=> (U_2_bool (Lit (bool_2_U (Upperbounded__Lexicographic__Byte__Order.__default.lte (Lit |a#0@@202|) (Lit |b#0@@150|))))) (and (|$IsA#Upperbounded__Lexicographic__Byte__Order.Element| (Lit |a#0@@202|)) (|$IsA#Upperbounded__Lexicographic__Byte__Order.Element| (Lit |b#0@@150|))))) (= (Upperbounded__Lexicographic__Byte__Order.__default.lt (Lit |a#0@@202|) (Lit |b#0@@150|))  (and (Upperbounded__Lexicographic__Byte__Order.__default.lte (Lit |a#0@@202|) (Lit |b#0@@150|)) (not (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| |a#0@@202| |b#0@@150|)))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.17:16| :weight 3 :skolemid |3963| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt (Lit |a#0@@202|) (Lit |b#0@@150|))) ))))
(assert (forall ((arg0@@647 T@U) (arg1@@335 T@U) ) (! (= (type (Upperbounded__Lexicographic__Byte__Order.__default.Min arg0@@647 arg1@@335)) DatatypeTypeType) :qid |funType:Upperbounded__Lexicographic__Byte__Order.__default.Min| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.Min arg0@@647 arg1@@335)) )))
(assert  (=> true (forall ((|a#0@@203| T@U) (|b#0@@151| T@U) ) (!  (=> (and (and (= (type |a#0@@203|) DatatypeTypeType) (= (type |b#0@@151|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.Min#canCall| |a#0@@203| |b#0@@151|) (and ($Is |a#0@@203| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |b#0@@151| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) ($Is (Upperbounded__Lexicographic__Byte__Order.__default.Min |a#0@@203| |b#0@@151|) Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.29:16| :skolemid |3964| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.Min |a#0@@203| |b#0@@151|)) ))))
(assert (forall ((|a#0@@204| T@U) (|b#0@@152| T@U) ) (!  (=> (and (and (= (type |a#0@@204|) DatatypeTypeType) (= (type |b#0@@152|) DatatypeTypeType)) (and ($Is |a#0@@204| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |b#0@@152| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.Min#requires| |a#0@@204| |b#0@@152|) true)) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.29:16| :skolemid |3965| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.Min#requires| |a#0@@204| |b#0@@152|)) )))
(assert  (=> true (forall ((|a#0@@205| T@U) (|b#0@@153| T@U) ) (!  (=> (and (and (= (type |a#0@@205|) DatatypeTypeType) (= (type |b#0@@153|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.Min#canCall| |a#0@@205| |b#0@@153|) (and ($Is |a#0@@205| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |b#0@@153| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@205| |b#0@@153|) (= (Upperbounded__Lexicographic__Byte__Order.__default.Min |a#0@@205| |b#0@@153|) (ite (Upperbounded__Lexicographic__Byte__Order.__default.lte |a#0@@205| |b#0@@153|) |a#0@@205| |b#0@@153|)))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.29:16| :skolemid |3966| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.Min |a#0@@205| |b#0@@153|)) ))))
(assert  (=> true (forall ((|a#0@@206| T@U) (|b#0@@154| T@U) ) (!  (=> (and (and (= (type |a#0@@206|) DatatypeTypeType) (= (type |b#0@@154|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.Min#canCall| (Lit |a#0@@206|) (Lit |b#0@@154|)) (and ($Is |a#0@@206| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |b#0@@154| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@206|) (Lit |b#0@@154|)) (= (Upperbounded__Lexicographic__Byte__Order.__default.Min (Lit |a#0@@206|) (Lit |b#0@@154|)) (ite (Upperbounded__Lexicographic__Byte__Order.__default.lte (Lit |a#0@@206|) (Lit |b#0@@154|)) |a#0@@206| |b#0@@154|)))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.29:16| :weight 3 :skolemid |3967| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.Min (Lit |a#0@@206|) (Lit |b#0@@154|))) ))))
(assert (forall ((arg0@@648 T@U) (arg1@@336 T@U) ) (! (= (type (Upperbounded__Lexicographic__Byte__Order.__default.Max arg0@@648 arg1@@336)) DatatypeTypeType) :qid |funType:Upperbounded__Lexicographic__Byte__Order.__default.Max| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.Max arg0@@648 arg1@@336)) )))
(assert  (=> true (forall ((|a#0@@207| T@U) (|b#0@@155| T@U) ) (!  (=> (and (and (= (type |a#0@@207|) DatatypeTypeType) (= (type |b#0@@155|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.Max#canCall| |a#0@@207| |b#0@@155|) (and ($Is |a#0@@207| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |b#0@@155| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) ($Is (Upperbounded__Lexicographic__Byte__Order.__default.Max |a#0@@207| |b#0@@155|) Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.34:16| :skolemid |3968| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.Max |a#0@@207| |b#0@@155|)) ))))
(assert (forall ((|a#0@@208| T@U) (|b#0@@156| T@U) ) (!  (=> (and (and (= (type |a#0@@208|) DatatypeTypeType) (= (type |b#0@@156|) DatatypeTypeType)) (and ($Is |a#0@@208| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |b#0@@156| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.Max#requires| |a#0@@208| |b#0@@156|) true)) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.34:16| :skolemid |3969| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.Max#requires| |a#0@@208| |b#0@@156|)) )))
(assert  (=> true (forall ((|a#0@@209| T@U) (|b#0@@157| T@U) ) (!  (=> (and (and (= (type |a#0@@209|) DatatypeTypeType) (= (type |b#0@@157|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.Max#canCall| |a#0@@209| |b#0@@157|) (and ($Is |a#0@@209| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |b#0@@157| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| |a#0@@209| |b#0@@157|) (= (Upperbounded__Lexicographic__Byte__Order.__default.Max |a#0@@209| |b#0@@157|) (ite (Upperbounded__Lexicographic__Byte__Order.__default.lte |a#0@@209| |b#0@@157|) |b#0@@157| |a#0@@209|)))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.34:16| :skolemid |3970| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.Max |a#0@@209| |b#0@@157|)) ))))
(assert  (=> true (forall ((|a#0@@210| T@U) (|b#0@@158| T@U) ) (!  (=> (and (and (= (type |a#0@@210|) DatatypeTypeType) (= (type |b#0@@158|) DatatypeTypeType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.Max#canCall| (Lit |a#0@@210|) (Lit |b#0@@158|)) (and ($Is |a#0@@210| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |b#0@@158| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| (Lit |a#0@@210|) (Lit |b#0@@158|)) (= (Upperbounded__Lexicographic__Byte__Order.__default.Max (Lit |a#0@@210|) (Lit |b#0@@158|)) (ite (Upperbounded__Lexicographic__Byte__Order.__default.lte (Lit |a#0@@210|) (Lit |b#0@@158|)) |b#0@@158| |a#0@@210|)))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.34:16| :weight 3 :skolemid |3971| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.Max (Lit |a#0@@210|) (Lit |b#0@@158|))) ))))
(assert (forall (($ly@@628 T@U) (|run#0@@184| T@U) ) (!  (=> (and (= (type $ly@@628) LayerTypeType) (= (type |run#0@@184|) (SeqType BoxType))) (= (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@628) |run#0@@184|) (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted $ly@@628 |run#0@@184|))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.46:23| :skolemid |3972| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@628) |run#0@@184|)) )))
(assert (forall (($ly@@629 T@U) (|run#0@@185| T@U) ) (!  (=> (and (= (type $ly@@629) LayerTypeType) (= (type |run#0@@185|) (SeqType BoxType))) (= (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted $ly@@629 |run#0@@185|) (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted $LZ |run#0@@185|))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.46:23| :skolemid |3973| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted (AsFuelBottom $ly@@629) |run#0@@185|)) )))
(assert  (=> true (forall (($ly@@630 T@U) (|run#0@@186| T@U) ) (!  (=> (and (and (= (type $ly@@630) LayerTypeType) (= (type |run#0@@186|) (SeqType BoxType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.IsSorted#canCall| |run#0@@186|) ($Is |run#0@@186| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (=> (= (|Seq#Length| |run#0@@186|) (LitInt 0)) (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted $ly@@630 |run#0@@186|)) (=> (= (|Seq#Length| |run#0@@186|) (LitInt 1)) (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted $ly@@630 |run#0@@186|)))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.46:23| :skolemid |3974| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted $ly@@630 |run#0@@186|)) ))))
(assert (forall (($ly@@631 T@U) (|run#0@@187| T@U) ) (!  (=> (and (and (= (type $ly@@631) LayerTypeType) (= (type |run#0@@187|) (SeqType BoxType))) ($Is |run#0@@187| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.IsSorted#requires| $ly@@631 |run#0@@187|) true)) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.46:23| :skolemid |3975| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.IsSorted#requires| $ly@@631 |run#0@@187|)) )))
(assert  (=> true (forall (($ly@@632 T@U) (|run#0@@188| T@U) ) (!  (=> (and (and (= (type $ly@@632) LayerTypeType) (= (type |run#0@@188|) (SeqType BoxType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.IsSorted#canCall| |run#0@@188|) ($Is |run#0@@188| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (forall ((|i#0@@121| Int) (|j#0@@22| Int) ) (!  (=> (<= (LitInt 0) |i#0@@121|) (=> (<= |i#0@@121| |j#0@@22|) (=> (< |j#0@@22| (|Seq#Length| |run#0@@188|)) (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@188| |i#0@@121|)) ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@188| |j#0@@22|)))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.50:12| :skolemid |3977| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@188| |j#0@@22|)) ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@188| |i#0@@121|))) )) (= (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@632) |run#0@@188|) (forall ((|i#0@@122| Int) (|j#0@@23| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@122|) (<= |i#0@@122| |j#0@@23|)) (< |j#0@@23| (|Seq#Length| |run#0@@188|))) (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@188| |i#0@@122|)) ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@188| |j#0@@23|))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.50:12| :skolemid |3976| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@188| |j#0@@23|)) ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@188| |i#0@@122|))) ))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.46:23| :skolemid |3978| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@632) |run#0@@188|)) ))))
(assert  (=> true (forall (($ly@@633 T@U) (|run#0@@189| T@U) ) (!  (=> (and (and (= (type $ly@@633) LayerTypeType) (= (type |run#0@@189|) (SeqType BoxType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.IsSorted#canCall| (Lit |run#0@@189|)) ($Is |run#0@@189| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (forall ((|i#1@@46| Int) (|j#1@@12| Int) ) (!  (=> (<= (LitInt 0) |i#1@@46|) (=> (<= |i#1@@46| |j#1@@12|) (=> (< |j#1@@12| (|Seq#Length| (Lit |run#0@@189|))) (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |run#0@@189|) |i#1@@46|)) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |run#0@@189|) |j#1@@12|)))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.50:12| :skolemid |3980| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@189| |j#1@@12|)) ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@189| |i#1@@46|))) )) (= (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@633) (Lit |run#0@@189|)) (forall ((|i#1@@47| Int) (|j#1@@13| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@47|) (<= |i#1@@47| |j#1@@13|)) (< |j#1@@13| (|Seq#Length| (Lit |run#0@@189|)))) (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| (Lit |run#0@@189|) |i#1@@47|)) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |run#0@@189|) |j#1@@13|))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.50:12| :skolemid |3979| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@189| |j#1@@13|)) ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@189| |i#1@@47|))) ))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.46:23| :weight 3 :skolemid |3981| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted ($LS $ly@@633) (Lit |run#0@@189|))) ))))
(assert  (=> true (forall ((|run#0@@190| T@U) ) (!  (=> (and (= (type |run#0@@190|) (SeqType BoxType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@190|) ($Is |run#0@@190| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) true) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.53:38| :skolemid |3982| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@190|)) ))))
(assert (forall ((|run#0@@191| T@U) ) (!  (=> (and (= (type |run#0@@191|) (SeqType BoxType)) ($Is |run#0@@191| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@191|) true)) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.53:38| :skolemid |3983| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#requires| |run#0@@191|)) )))
(assert  (=> true (forall ((|run#0@@192| T@U) ) (!  (=> (and (= (type |run#0@@192|) (SeqType BoxType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@192|) ($Is |run#0@@192| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (forall ((|i#0@@123| Int) (|j#0@@24| Int) ) (!  (=> (<= (LitInt 0) |i#0@@123|) (=> (< |i#0@@123| |j#0@@24|) (=> (< |j#0@@24| (|Seq#Length| |run#0@@192|)) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@192| |i#0@@123|)) ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@192| |j#0@@24|)))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.55:12| :skolemid |3985| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@192| |j#0@@24|)) ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@192| |i#0@@123|))) )) (= (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@192|) (forall ((|i#0@@124| Int) (|j#0@@25| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#0@@124|) (< |i#0@@124| |j#0@@25|)) (< |j#0@@25| (|Seq#Length| |run#0@@192|))) (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@192| |i#0@@124|)) ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@192| |j#0@@25|))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.55:12| :skolemid |3984| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@192| |j#0@@25|)) ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@192| |i#0@@124|))) ))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.53:38| :skolemid |3986| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@192|)) ))))
(assert  (=> true (forall ((|run#0@@193| T@U) ) (!  (=> (and (= (type |run#0@@193|) (SeqType BoxType)) (or (|Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@193|)) ($Is |run#0@@193| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (forall ((|i#1@@48| Int) (|j#1@@14| Int) ) (!  (=> (<= (LitInt 0) |i#1@@48|) (=> (< |i#1@@48| |j#1@@14|) (=> (< |j#1@@14| (|Seq#Length| (Lit |run#0@@193|))) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |run#0@@193|) |i#1@@48|)) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |run#0@@193|) |j#1@@14|)))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.55:12| :skolemid |3988| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@193| |j#1@@14|)) ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@193| |i#1@@48|))) )) (= (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@193|)) (forall ((|i#1@@49| Int) (|j#1@@15| Int) ) (!  (=> true (=> (and (and (<= (LitInt 0) |i#1@@49|) (< |i#1@@49| |j#1@@15|)) (< |j#1@@15| (|Seq#Length| (Lit |run#0@@193|)))) (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| (Lit |run#0@@193|) |i#1@@49|)) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |run#0@@193|) |j#1@@15|))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.55:12| :skolemid |3987| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@193| |j#1@@15|)) ($Unbox DatatypeTypeType (|Seq#Index| |run#0@@193| |i#1@@49|))) ))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.53:38| :weight 3 :skolemid |3989| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@193|))) ))))
(assert (forall (($ly@@634 T@U) (|run#0@@194| T@U) ) (!  (=> (and (= (type $ly@@634) LayerTypeType) (= (type |run#0@@194|) (SeqType BoxType))) (= (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@634) |run#0@@194|) (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@634 |run#0@@194|))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.69:23| :skolemid |3990| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@634) |run#0@@194|)) )))
(assert (forall (($ly@@635 T@U) (|run#0@@195| T@U) ) (!  (=> (and (= (type $ly@@635) LayerTypeType) (= (type |run#0@@195|) (SeqType BoxType))) (= (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@635 |run#0@@195|) (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted $LZ |run#0@@195|))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.69:23| :skolemid |3991| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted (AsFuelBottom $ly@@635) |run#0@@195|)) )))
(assert  (=> true (forall (($ly@@636 T@U) (|run#0@@196| T@U) ) (!  (=> (and (and (= (type $ly@@636) LayerTypeType) (= (type |run#0@@196|) (SeqType BoxType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@196|) ($Is |run#0@@196| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (and (=> (= (|Seq#Length| |run#0@@196|) (LitInt 0)) (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@636 |run#0@@196|)) (=> (= (|Seq#Length| |run#0@@196|) (LitInt 1)) (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@636 |run#0@@196|))) (=> (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@636 |run#0@@196|) (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted |run#0@@196|)))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.69:23| :skolemid |3992| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted $ly@@636 |run#0@@196|)) ))))
(assert (forall (($ly@@637 T@U) (|run#0@@197| T@U) ) (!  (=> (and (and (= (type $ly@@637) LayerTypeType) (= (type |run#0@@197|) (SeqType BoxType))) ($Is |run#0@@197| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| $ly@@637 |run#0@@197|) true)) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.69:23| :skolemid |3993| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted#requires| $ly@@637 |run#0@@197|)) )))
(assert  (=> true (forall (($ly@@638 T@U) (|run#0@@198| T@U) ) (!  (=> (and (and (= (type $ly@@638) LayerTypeType) (= (type |run#0@@198|) (SeqType BoxType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| |run#0@@198|) ($Is |run#0@@198| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (|Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| |run#0@@198|) (= (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@638) |run#0@@198|) (let ((|b#0@@159| (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySortedInternal |run#0@@198|))) (ite |b#0@@159| |b#0@@159| |b#0@@159|))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.69:23| :skolemid |3994| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@638) |run#0@@198|)) ))))
(assert  (=> true (forall (($ly@@639 T@U) (|run#0@@199| T@U) ) (!  (=> (and (and (= (type $ly@@639) LayerTypeType) (= (type |run#0@@199|) (SeqType BoxType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (Lit |run#0@@199|)) ($Is |run#0@@199| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (|Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySortedInternal#canCall| (Lit |run#0@@199|)) (= (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@639) (Lit |run#0@@199|)) (let ((|b#1@@11| (U_2_bool (Lit (bool_2_U (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySortedInternal (Lit |run#0@@199|))))))) (ite |b#1@@11| |b#1@@11| |b#1@@11|))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.69:23| :weight 3 :skolemid |3995| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted ($LS $ly@@639) (Lit |run#0@@199|))) ))))
(assert  (=> true (forall ((|e#0@@14| T@U) (|s#0@@255| T@U) ) (!  (=> (and (and (= (type |e#0@@14|) DatatypeTypeType) (= (type |s#0@@255|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.BiggestInSet#canCall| |e#0@@14| |s#0@@255|) (and (and ($Is |e#0@@14| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |s#0@@255| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (< 0 (|Set#Card| |s#0@@255|))))) true) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.138:26| :skolemid |3996| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.BiggestInSet |e#0@@14| |s#0@@255|)) ))))
(assert (forall ((|e#0@@15| T@U) (|s#0@@256| T@U) ) (!  (=> (and (and (= (type |e#0@@15|) DatatypeTypeType) (= (type |s#0@@256|) (MapType0Type BoxType boolType))) (and ($Is |e#0@@15| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |s#0@@256| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.BiggestInSet#requires| |e#0@@15| |s#0@@256|) (< 0 (|Set#Card| |s#0@@256|)))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.138:26| :skolemid |3997| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.BiggestInSet#requires| |e#0@@15| |s#0@@256|)) )))
(assert  (=> true (forall ((|e#0@@16| T@U) (|s#0@@257| T@U) ) (!  (=> (and (and (= (type |e#0@@16|) DatatypeTypeType) (= (type |s#0@@257|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.BiggestInSet#canCall| |e#0@@16| |s#0@@257|) (and (and ($Is |e#0@@16| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |s#0@@257| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (< 0 (|Set#Card| |s#0@@257|))))) (and (=> (U_2_bool (MapType0Select |s#0@@257| ($Box |e#0@@16|))) (forall ((|e2#0@@3| T@U) ) (!  (=> (and (= (type |e2#0@@3|) DatatypeTypeType) ($Is |e2#0@@3| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (and (=> (U_2_bool (MapType0Select |s#0@@257| ($Box |e2#0@@3|))) (and (|$IsA#Upperbounded__Lexicographic__Byte__Order.Element| |e2#0@@3|) (|$IsA#Upperbounded__Lexicographic__Byte__Order.Element| |e#0@@16|))) (=> (and (U_2_bool (MapType0Select |s#0@@257| ($Box |e2#0@@3|))) (not (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| |e2#0@@3| |e#0@@16|))) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| |e2#0@@3| |e#0@@16|)))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.141:22| :skolemid |3999| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |e2#0@@3| |e#0@@16|)) :pattern ( (MapType0Select |s#0@@257| ($Box |e2#0@@3|))) ))) (= (Upperbounded__Lexicographic__Byte__Order.__default.BiggestInSet |e#0@@16| |s#0@@257|)  (and (U_2_bool (MapType0Select |s#0@@257| ($Box |e#0@@16|))) (forall ((|e2#0@@4| T@U) ) (!  (=> (= (type |e2#0@@4|) DatatypeTypeType) (=> (and ($Is |e2#0@@4| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) (and (U_2_bool (MapType0Select |s#0@@257| ($Box |e2#0@@4|))) (not (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| |e2#0@@4| |e#0@@16|)))) (Upperbounded__Lexicographic__Byte__Order.__default.lt |e2#0@@4| |e#0@@16|))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.141:22| :skolemid |3998| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |e2#0@@4| |e#0@@16|)) :pattern ( (MapType0Select |s#0@@257| ($Box |e2#0@@4|))) )))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.138:26| :skolemid |4000| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.BiggestInSet |e#0@@16| |s#0@@257|)) ))))
(assert  (=> true (forall ((|e#0@@17| T@U) (|s#0@@258| T@U) ) (!  (=> (and (and (= (type |e#0@@17|) DatatypeTypeType) (= (type |s#0@@258|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.BiggestInSet#canCall| (Lit |e#0@@17|) (Lit |s#0@@258|)) (and (and ($Is |e#0@@17| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |s#0@@258| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (< 0 (|Set#Card| (Lit |s#0@@258|)))))) (and (=> (U_2_bool (MapType0Select (Lit |s#0@@258|) ($Box (Lit |e#0@@17|)))) (forall ((|e2#1@@3| T@U) ) (!  (=> (and (= (type |e2#1@@3|) DatatypeTypeType) ($Is |e2#1@@3| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (and (=> (U_2_bool (MapType0Select (Lit |s#0@@258|) ($Box |e2#1@@3|))) (and (|$IsA#Upperbounded__Lexicographic__Byte__Order.Element| |e2#1@@3|) (|$IsA#Upperbounded__Lexicographic__Byte__Order.Element| (Lit |e#0@@17|)))) (=> (and (U_2_bool (MapType0Select (Lit |s#0@@258|) ($Box |e2#1@@3|))) (not (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| |e2#1@@3| |e#0@@17|))) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| |e2#1@@3| (Lit |e#0@@17|))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.141:22| :skolemid |4002| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |e2#1@@3| |e#0@@17|)) :pattern ( (MapType0Select |s#0@@258| ($Box |e2#1@@3|))) ))) (= (Upperbounded__Lexicographic__Byte__Order.__default.BiggestInSet (Lit |e#0@@17|) (Lit |s#0@@258|))  (and (U_2_bool (MapType0Select (Lit |s#0@@258|) ($Box (Lit |e#0@@17|)))) (forall ((|e2#1@@4| T@U) ) (!  (=> (= (type |e2#1@@4|) DatatypeTypeType) (=> (and ($Is |e2#1@@4| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) (and (U_2_bool (MapType0Select (Lit |s#0@@258|) ($Box |e2#1@@4|))) (not (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| |e2#1@@4| |e#0@@17|)))) (Upperbounded__Lexicographic__Byte__Order.__default.lt |e2#1@@4| (Lit |e#0@@17|)))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.141:22| :skolemid |4001| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.lt |e2#1@@4| |e#0@@17|)) :pattern ( (MapType0Select |s#0@@258| ($Box |e2#1@@4|))) )))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.138:26| :weight 3 :skolemid |4003| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.BiggestInSet (Lit |e#0@@17|) (Lit |s#0@@258|))) ))))
(assert (forall ((arg0@@649 T@U) (arg1@@337 T@U) ) (! (= (type (Upperbounded__Lexicographic__Byte__Order.__default.SortSet arg0@@649 arg1@@337)) (SeqType BoxType)) :qid |funType:Upperbounded__Lexicographic__Byte__Order.__default.SortSet| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SortSet arg0@@649 arg1@@337)) )))
(assert (forall (($ly@@640 T@U) (|s#0@@259| T@U) ) (!  (=> (and (= (type $ly@@640) LayerTypeType) (= (type |s#0@@259|) (MapType0Type BoxType boolType))) (= (Upperbounded__Lexicographic__Byte__Order.__default.SortSet ($LS $ly@@640) |s#0@@259|) (Upperbounded__Lexicographic__Byte__Order.__default.SortSet $ly@@640 |s#0@@259|))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.169:12| :skolemid |4004| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SortSet ($LS $ly@@640) |s#0@@259|)) )))
(assert (forall (($ly@@641 T@U) (|s#0@@260| T@U) ) (!  (=> (and (= (type $ly@@641) LayerTypeType) (= (type |s#0@@260|) (MapType0Type BoxType boolType))) (= (Upperbounded__Lexicographic__Byte__Order.__default.SortSet $ly@@641 |s#0@@260|) (Upperbounded__Lexicographic__Byte__Order.__default.SortSet $LZ |s#0@@260|))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.169:12| :skolemid |4005| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SortSet (AsFuelBottom $ly@@641) |s#0@@260|)) )))
(assert  (=> true (forall (($ly@@642 T@U) (|s#0@@261| T@U) ) (!  (=> (and (and (= (type $ly@@642) LayerTypeType) (= (type |s#0@@261|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.SortSet#canCall| |s#0@@261|) ($Is |s#0@@261| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (and (and (= (|Set#Card| |s#0@@261|) (|Seq#Length| (Upperbounded__Lexicographic__Byte__Order.__default.SortSet $ly@@642 |s#0@@261|))) (forall ((|t#0@@15| T@U) ) (!  (=> (and (= (type |t#0@@15|) DatatypeTypeType) ($Is |t#0@@15| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (= (U_2_bool (MapType0Select |s#0@@261| ($Box |t#0@@15|))) (|Seq#Contains| (Upperbounded__Lexicographic__Byte__Order.__default.SortSet $ly@@642 |s#0@@261|) ($Box |t#0@@15|)))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.171:20| :skolemid |4006| :pattern ( (|Seq#Contains| (Upperbounded__Lexicographic__Byte__Order.__default.SortSet $ly@@642 |s#0@@261|) ($Box |t#0@@15|))) :pattern ( (MapType0Select |s#0@@261| ($Box |t#0@@15|))) ))) (Upperbounded__Lexicographic__Byte__Order.__default.IsSorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted (Upperbounded__Lexicographic__Byte__Order.__default.SortSet $ly@@642 |s#0@@261|))) ($Is (Upperbounded__Lexicographic__Byte__Order.__default.SortSet $ly@@642 |s#0@@261|) (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.169:12| :skolemid |4007| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SortSet $ly@@642 |s#0@@261|)) ))))
(assert (forall (($ly@@643 T@U) ($Heap@@79 T@U) (|s#0@@262| T@U) ) (!  (=> (and (and (and (= (type $ly@@643) LayerTypeType) (= (type $Heap@@79) (MapType0Type refType MapType1Type))) (= (type |s#0@@262|) (MapType0Type BoxType boolType))) (and ($IsGoodHeap $Heap@@79) ($Is |s#0@@262| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (= (|Upperbounded__Lexicographic__Byte__Order.__default.SortSet#requires| $ly@@643 |s#0@@262|) true)) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.169:12| :skolemid |4008| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.__default.SortSet#requires| $ly@@643 |s#0@@262|) ($IsGoodHeap $Heap@@79)) )))
(assert (forall ((arg0@@650 T@U) ) (! (= (type (|$let#41_e| arg0@@650)) DatatypeTypeType) :qid |funType:$let#41_e| :pattern ( (|$let#41_e| arg0@@650)) )))
(assert (forall ((s@@59 T@U) ) (!  (=> (and (= (type s@@59) (MapType0Type BoxType boolType)) (|$let#41$canCall| s@@59)) (and ($Is (|$let#41_e| s@@59) Tclass.Upperbounded__Lexicographic__Byte__Order.Element) (Upperbounded__Lexicographic__Byte__Order.__default.BiggestInSet (|$let#41_e| s@@59) s@@59))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.180:7| :skolemid |4009| :pattern ( (|$let#41_e| s@@59)) )))
(assert (= (type MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted8) LayerTypeType))
(assert  (=> true (forall (($ly@@644 T@U) ($Heap@@80 T@U) (|s#0@@263| T@U) ) (!  (=> (and (and (and (= (type $ly@@644) LayerTypeType) (= (type $Heap@@80) (MapType0Type refType MapType1Type))) (= (type |s#0@@263|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.SortSet#canCall| |s#0@@263|) (and ($IsGoodHeap $Heap@@80) ($Is |s#0@@263| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element))))) (and (=> (not (= (|Set#Card| |s#0@@263|) (LitInt 0))) (and (|$let#41$canCall| |s#0@@263|) (|Upperbounded__Lexicographic__Byte__Order.__default.SortSet#canCall| (|Set#Difference| |s#0@@263| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#41_e| |s#0@@263|))))))) (and (and (and (= StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted8)) (= StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted8)))) (= (AsFuelBottom MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted8) MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted8)) (= (Upperbounded__Lexicographic__Byte__Order.__default.SortSet ($LS $ly@@644) |s#0@@263|) (ite (= (|Set#Card| |s#0@@263|) (LitInt 0)) (|Seq#Empty| BoxType) (let ((|e#0@@18| (|$let#41_e| |s#0@@263|))) (|Seq#Append| (Upperbounded__Lexicographic__Byte__Order.__default.SortSet $ly@@644 (|Set#Difference| |s#0@@263| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |e#0@@18|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |e#0@@18|))))))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.169:12| :skolemid |4010| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SortSet ($LS $ly@@644) |s#0@@263|) ($IsGoodHeap $Heap@@80)) ))))
(assert (= (type MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted9) LayerTypeType))
(assert  (=> true (forall (($ly@@645 T@U) ($Heap@@81 T@U) (|s#0@@264| T@U) ) (!  (=> (and (and (and (= (type $ly@@645) LayerTypeType) (= (type $Heap@@81) (MapType0Type refType MapType1Type))) (= (type |s#0@@264|) (MapType0Type BoxType boolType))) (or (|Upperbounded__Lexicographic__Byte__Order.__default.SortSet#canCall| (Lit |s#0@@264|)) (and ($IsGoodHeap $Heap@@81) ($Is |s#0@@264| (TSet Tclass.Upperbounded__Lexicographic__Byte__Order.Element))))) (and (=> (not (= (|Set#Card| (Lit |s#0@@264|)) (LitInt 0))) (and (|$let#41$canCall| (Lit |s#0@@264|)) (|Upperbounded__Lexicographic__Byte__Order.__default.SortSet#canCall| (|Set#Difference| |s#0@@264| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box (|$let#41_e| (Lit |s#0@@264|)))))))) (and (and (and (= StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted ($LS MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted9)) (= StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsSorted ($LS ($LS MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted9)))) (= (AsFuelBottom MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted9) MoreFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted9)) (= (Upperbounded__Lexicographic__Byte__Order.__default.SortSet ($LS $ly@@645) (Lit |s#0@@264|)) (ite (= (|Set#Card| (Lit |s#0@@264|)) (LitInt 0)) (|Seq#Empty| BoxType) (let ((|e#1@@1| (|$let#41_e| (Lit |s#0@@264|)))) (|Seq#Append| (Upperbounded__Lexicographic__Byte__Order.__default.SortSet ($LS $ly@@645) (|Set#Difference| |s#0@@264| (|Set#UnionOne| (|Set#Empty| BoxType) ($Box |e#1@@1|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |e#1@@1|))))))))) :qid |totalorderidfyTotalOrderUpperboundedTotalOrderUpperboundedLexicographicByteOrder.169:12| :weight 3 :skolemid |4011| :pattern ( (Upperbounded__Lexicographic__Byte__Order.__default.SortSet ($LS $ly@@645) (Lit |s#0@@264|)) ($IsGoodHeap $Heap@@81)) ))))
(assert (forall ((arg0@@651 T@U) ) (! (= (type (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| arg0@@651)) DatatypeTypeType) :qid |funType:#Upperbounded_Lexicographic_Byte_Order.Element.Element| :pattern ( (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| arg0@@651)) )))
(assert (forall ((|a#0#0#0@@1| T@U) ) (!  (=> (= (type |a#0#0#0@@1|) (SeqType BoxType)) (= (DatatypeCtorId (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| |a#0#0#0@@1|)) |##Upperbounded_Lexicographic_Byte_Order.Element.Element|)) :qid |totalorderidfyUpperboundedLexicographicByteOrder.809:30| :skolemid |4012| :pattern ( (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| |a#0#0#0@@1|)) )))
(assert (forall ((d@@49 T@U) ) (!  (=> (= (type d@@49) DatatypeTypeType) (= (Upperbounded__Lexicographic__Byte__Order.Element.Element_q d@@49) (= (DatatypeCtorId d@@49) |##Upperbounded_Lexicographic_Byte_Order.Element.Element|))) :qid |unknown.0:0| :skolemid |4013| :pattern ( (Upperbounded__Lexicographic__Byte__Order.Element.Element_q d@@49)) )))
(assert (forall ((d@@50 T@U) ) (!  (=> (and (= (type d@@50) DatatypeTypeType) (Upperbounded__Lexicographic__Byte__Order.Element.Element_q d@@50)) (exists ((|a#1#0#0@@1| T@U) ) (!  (and (= (type |a#1#0#0@@1|) (SeqType BoxType)) (= d@@50 (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| |a#1#0#0@@1|))) :qid |totalorderidfyUpperboundedLexicographicByteOrder.809:30| :skolemid |4014| :no-pattern (type |a#1#0#0@@1|) :no-pattern (U_2_int |a#1#0#0@@1|) :no-pattern (U_2_bool |a#1#0#0@@1|) ))) :qid |unknown.0:0| :skolemid |4015| :pattern ( (Upperbounded__Lexicographic__Byte__Order.Element.Element_q d@@50)) )))
(assert (forall ((|a#2#0#0@@1| T@U) ) (!  (=> (= (type |a#2#0#0@@1|) (SeqType BoxType)) (= ($Is (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| |a#2#0#0@@1|) Tclass.Upperbounded__Lexicographic__Byte__Order.Element) ($Is |a#2#0#0@@1| (TSeq Tclass.NativeTypes.byte)))) :qid |totalorderidfyUpperboundedLexicographicByteOrder.809:30| :skolemid |4016| :pattern ( ($Is (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| |a#2#0#0@@1|) Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) )))
(assert (forall ((|a#3#0#0@@1| T@U) ($h@@103 T@U) ) (!  (=> (and (and (= (type |a#3#0#0@@1|) (SeqType BoxType)) (= (type $h@@103) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@103)) (= ($IsAlloc (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| |a#3#0#0@@1|) Tclass.Upperbounded__Lexicographic__Byte__Order.Element $h@@103) ($IsAlloc |a#3#0#0@@1| (TSeq Tclass.NativeTypes.byte) $h@@103))) :qid |totalorderidfyUpperboundedLexicographicByteOrder.809:30| :skolemid |4017| :pattern ( ($IsAlloc (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| |a#3#0#0@@1|) Tclass.Upperbounded__Lexicographic__Byte__Order.Element $h@@103)) )))
(assert (forall ((d@@51 T@U) ($h@@104 T@U) ) (!  (=> (and (and (= (type d@@51) DatatypeTypeType) (= (type $h@@104) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@104) (and (Upperbounded__Lexicographic__Byte__Order.Element.Element_q d@@51) ($IsAlloc d@@51 Tclass.Upperbounded__Lexicographic__Byte__Order.Element $h@@104)))) ($IsAlloc (Upperbounded__Lexicographic__Byte__Order.Element.e d@@51) (TSeq Tclass.NativeTypes.byte) $h@@104)) :qid |unknown.0:0| :skolemid |4018| :pattern ( ($IsAlloc (Upperbounded__Lexicographic__Byte__Order.Element.e d@@51) (TSeq Tclass.NativeTypes.byte) $h@@104)) )))
(assert (forall ((|a#4#0#0@@1| T@U) ) (!  (=> (= (type |a#4#0#0@@1|) (SeqType BoxType)) (= (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| (Lit |a#4#0#0@@1|)) (Lit (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| |a#4#0#0@@1|)))) :qid |totalorderidfyUpperboundedLexicographicByteOrder.809:30| :skolemid |4019| :pattern ( (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| (Lit |a#4#0#0@@1|))) )))
(assert (forall ((|a#5#0#0@@2| T@U) ) (!  (=> (= (type |a#5#0#0@@2|) (SeqType BoxType)) (= (Upperbounded__Lexicographic__Byte__Order.Element.e (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| |a#5#0#0@@2|)) |a#5#0#0@@2|)) :qid |totalorderidfyUpperboundedLexicographicByteOrder.809:30| :skolemid |4020| :pattern ( (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| |a#5#0#0@@2|)) )))
(assert (forall ((|a#6#0#0@@2| T@U) (i@@31 Int) ) (!  (=> (= (type |a#6#0#0@@2|) (SeqType BoxType)) (=> (and (<= 0 i@@31) (< i@@31 (|Seq#Length| |a#6#0#0@@2|))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#6#0#0@@2| i@@31))) (DtRank (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| |a#6#0#0@@2|))))) :qid |totalorderidfyUpperboundedLexicographicByteOrder.809:30| :skolemid |4021| :pattern ( (|Seq#Index| |a#6#0#0@@2| i@@31) (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| |a#6#0#0@@2|)) )))
(assert (forall ((|a#7#0#0@@2| T@U) ) (!  (=> (= (type |a#7#0#0@@2|) (SeqType BoxType)) (< (|Seq#Rank| |a#7#0#0@@2|) (DtRank (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| |a#7#0#0@@2|)))) :qid |totalorderidfyUpperboundedLexicographicByteOrder.809:30| :skolemid |4022| :pattern ( (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| |a#7#0#0@@2|)) )))
(assert (= (DatatypeCtorId |#Upperbounded_Lexicographic_Byte_Order.Element.Max_Element|) |##Upperbounded_Lexicographic_Byte_Order.Element.Max_Element|))
(assert (forall ((d@@52 T@U) ) (!  (=> (= (type d@@52) DatatypeTypeType) (= (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q d@@52) (= (DatatypeCtorId d@@52) |##Upperbounded_Lexicographic_Byte_Order.Element.Max_Element|))) :qid |unknown.0:0| :skolemid |4023| :pattern ( (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q d@@52)) )))
(assert (forall ((d@@53 T@U) ) (!  (=> (and (= (type d@@53) DatatypeTypeType) (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q d@@53)) (= d@@53 |#Upperbounded_Lexicographic_Byte_Order.Element.Max_Element|)) :qid |unknown.0:0| :skolemid |4024| :pattern ( (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q d@@53)) )))
(assert ($Is |#Upperbounded_Lexicographic_Byte_Order.Element.Max_Element| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))
(assert (forall (($h@@105 T@U) ) (!  (=> (and (= (type $h@@105) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@105)) ($IsAlloc |#Upperbounded_Lexicographic_Byte_Order.Element.Max_Element| Tclass.Upperbounded__Lexicographic__Byte__Order.Element $h@@105)) :qid |DafnyPreludebpl.545:12| :skolemid |4025| :pattern ( ($IsAlloc |#Upperbounded_Lexicographic_Byte_Order.Element.Max_Element| Tclass.Upperbounded__Lexicographic__Byte__Order.Element $h@@105)) )))
(assert (= |#Upperbounded_Lexicographic_Byte_Order.Element.Max_Element| (Lit |#Upperbounded_Lexicographic_Byte_Order.Element.Max_Element|)))
(assert (forall ((d@@54 T@U) ) (!  (=> (and (= (type d@@54) DatatypeTypeType) (|$IsA#Upperbounded__Lexicographic__Byte__Order.Element| d@@54)) (or (Upperbounded__Lexicographic__Byte__Order.Element.Element_q d@@54) (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q d@@54))) :qid |unknown.0:0| :skolemid |4026| :pattern ( (|$IsA#Upperbounded__Lexicographic__Byte__Order.Element| d@@54)) )))
(assert (forall ((d@@55 T@U) ) (!  (=> (and (= (type d@@55) DatatypeTypeType) ($Is d@@55 Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (or (Upperbounded__Lexicographic__Byte__Order.Element.Element_q d@@55) (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q d@@55))) :qid |unknown.0:0| :skolemid |4027| :pattern ( (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q d@@55) ($Is d@@55 Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) :pattern ( (Upperbounded__Lexicographic__Byte__Order.Element.Element_q d@@55) ($Is d@@55 Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) )))
(assert (forall ((a@@146 T@U) (b@@77 T@U) ) (!  (=> (and (and (= (type a@@146) DatatypeTypeType) (= (type b@@77) DatatypeTypeType)) (and (Upperbounded__Lexicographic__Byte__Order.Element.Element_q a@@146) (Upperbounded__Lexicographic__Byte__Order.Element.Element_q b@@77))) (= (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| a@@146 b@@77) (|Seq#Equal| (Upperbounded__Lexicographic__Byte__Order.Element.e a@@146) (Upperbounded__Lexicographic__Byte__Order.Element.e b@@77)))) :qid |unknown.0:0| :skolemid |4028| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| a@@146 b@@77) (Upperbounded__Lexicographic__Byte__Order.Element.Element_q a@@146)) :pattern ( (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| a@@146 b@@77) (Upperbounded__Lexicographic__Byte__Order.Element.Element_q b@@77)) )))
(assert (forall ((a@@147 T@U) (b@@78 T@U) ) (!  (=> (and (and (= (type a@@147) DatatypeTypeType) (= (type b@@78) DatatypeTypeType)) (and (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q a@@147) (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q b@@78))) (= (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| a@@147 b@@78) true)) :qid |unknown.0:0| :skolemid |4029| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| a@@147 b@@78) (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q a@@147)) :pattern ( (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| a@@147 b@@78) (Upperbounded__Lexicographic__Byte__Order.Element.Max__Element_q b@@78)) )))
(assert (forall ((a@@148 T@U) (b@@79 T@U) ) (!  (=> (and (= (type a@@148) DatatypeTypeType) (= (type b@@79) DatatypeTypeType)) (= (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| a@@148 b@@79) (= a@@148 b@@79))) :qid |unknown.0:0| :skolemid |4030| :pattern ( (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| a@@148 b@@79)) )))
(assert (= (type Tclass.Upperbounded__Lexicographic__Byte__Order__Impl.__default) TyType))
(assert (= (Tag Tclass.Upperbounded__Lexicographic__Byte__Order__Impl.__default) Tagclass.Upperbounded__Lexicographic__Byte__Order__Impl.__default))
(assert (= (TagFamily Tclass.Upperbounded__Lexicographic__Byte__Order__Impl.__default) tytagFamily$_default))
(assert (forall ((bx@@177 T@U) ) (!  (=> (and (= (type bx@@177) BoxType) ($IsBox bx@@177 Tclass.Upperbounded__Lexicographic__Byte__Order__Impl.__default)) (and (= ($Box ($Unbox refType bx@@177)) bx@@177) ($Is ($Unbox refType bx@@177) Tclass.Upperbounded__Lexicographic__Byte__Order__Impl.__default))) :qid |unknown.0:0| :skolemid |4031| :pattern ( ($IsBox bx@@177 Tclass.Upperbounded__Lexicographic__Byte__Order__Impl.__default)) )))
(assert (forall (($o@@48 T@U) ) (!  (=> (= (type $o@@48) refType) (= ($Is $o@@48 Tclass.Upperbounded__Lexicographic__Byte__Order__Impl.__default)  (or (= $o@@48 null) (= (dtype $o@@48) Tclass.Upperbounded__Lexicographic__Byte__Order__Impl.__default)))) :qid |unknown.0:0| :skolemid |4032| :pattern ( ($Is $o@@48 Tclass.Upperbounded__Lexicographic__Byte__Order__Impl.__default)) )))
(assert (forall (($o@@49 T@U) ($h@@106 T@U) ) (!  (=> (and (= (type $o@@49) refType) (= (type $h@@106) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@49 Tclass.Upperbounded__Lexicographic__Byte__Order__Impl.__default $h@@106)  (or (= $o@@49 null) (U_2_bool (MapType1Select (MapType0Select $h@@106 $o@@49) alloc))))) :qid |unknown.0:0| :skolemid |4033| :pattern ( ($IsAlloc $o@@49 Tclass.Upperbounded__Lexicographic__Byte__Order__Impl.__default $h@@106)) )))
(assert (= (type Tclass.BoundedPivotsLib.__default) TyType))
(assert (= (Tag Tclass.BoundedPivotsLib.__default) Tagclass.BoundedPivotsLib.__default))
(assert (= (TagFamily Tclass.BoundedPivotsLib.__default) tytagFamily$_default))
(assert (forall ((bx@@178 T@U) ) (!  (=> (and (= (type bx@@178) BoxType) ($IsBox bx@@178 Tclass.BoundedPivotsLib.__default)) (and (= ($Box ($Unbox refType bx@@178)) bx@@178) ($Is ($Unbox refType bx@@178) Tclass.BoundedPivotsLib.__default))) :qid |unknown.0:0| :skolemid |4034| :pattern ( ($IsBox bx@@178 Tclass.BoundedPivotsLib.__default)) )))
(assert (forall (($o@@50 T@U) ) (!  (=> (= (type $o@@50) refType) (= ($Is $o@@50 Tclass.BoundedPivotsLib.__default)  (or (= $o@@50 null) (= (dtype $o@@50) Tclass.BoundedPivotsLib.__default)))) :qid |unknown.0:0| :skolemid |4035| :pattern ( ($Is $o@@50 Tclass.BoundedPivotsLib.__default)) )))
(assert (forall (($o@@51 T@U) ($h@@107 T@U) ) (!  (=> (and (= (type $o@@51) refType) (= (type $h@@107) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@51 Tclass.BoundedPivotsLib.__default $h@@107)  (or (= $o@@51 null) (U_2_bool (MapType1Select (MapType0Select $h@@107 $o@@51) alloc))))) :qid |unknown.0:0| :skolemid |4036| :pattern ( ($IsAlloc $o@@51 Tclass.BoundedPivotsLib.__default $h@@107)) )))
(assert  (=> true (forall ((|e#0@@19| T@U) ) (!  (=> (and (= (type |e#0@@19|) DatatypeTypeType) (or (|BoundedPivotsLib.__default.ElementIsKey#canCall| |e#0@@19|) ($Is |e#0@@19| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) true) :qid |BoundedPivotsLibidfy.29:26| :skolemid |4037| :pattern ( (BoundedPivotsLib.__default.ElementIsKey |e#0@@19|)) ))))
(assert (forall ((|e#0@@20| T@U) ) (!  (=> (and (= (type |e#0@@20|) DatatypeTypeType) ($Is |e#0@@20| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (= (|BoundedPivotsLib.__default.ElementIsKey#requires| |e#0@@20|) true)) :qid |BoundedPivotsLibidfy.29:26| :skolemid |4038| :pattern ( (|BoundedPivotsLib.__default.ElementIsKey#requires| |e#0@@20|)) )))
(assert  (=> true (forall ((|e#0@@21| T@U) ) (!  (=> (and (= (type |e#0@@21|) DatatypeTypeType) (or (|BoundedPivotsLib.__default.ElementIsKey#canCall| |e#0@@21|) ($Is |e#0@@21| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (and (=> (Upperbounded__Lexicographic__Byte__Order.Element.Element_q |e#0@@21|) |KeyType.__default.MaxLen#canCall|) (= (BoundedPivotsLib.__default.ElementIsKey |e#0@@21|)  (and (Upperbounded__Lexicographic__Byte__Order.Element.Element_q |e#0@@21|) (<= (|Seq#Length| (Upperbounded__Lexicographic__Byte__Order.Element.e |e#0@@21|)) (LitInt KeyType.__default.MaxLen)))))) :qid |BoundedPivotsLibidfy.29:26| :skolemid |4039| :pattern ( (BoundedPivotsLib.__default.ElementIsKey |e#0@@21|)) ))))
(assert  (=> true (forall ((|e#0@@22| T@U) ) (!  (=> (and (= (type |e#0@@22|) DatatypeTypeType) (or (|BoundedPivotsLib.__default.ElementIsKey#canCall| (Lit |e#0@@22|)) ($Is |e#0@@22| Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (and (=> (U_2_bool (Lit (bool_2_U (Upperbounded__Lexicographic__Byte__Order.Element.Element_q (Lit |e#0@@22|))))) |KeyType.__default.MaxLen#canCall|) (= (BoundedPivotsLib.__default.ElementIsKey (Lit |e#0@@22|))  (and (Upperbounded__Lexicographic__Byte__Order.Element.Element_q (Lit |e#0@@22|)) (<= (|Seq#Length| (Lit (Upperbounded__Lexicographic__Byte__Order.Element.e (Lit |e#0@@22|)))) (LitInt KeyType.__default.MaxLen)))))) :qid |BoundedPivotsLibidfy.29:26| :weight 3 :skolemid |4040| :pattern ( (BoundedPivotsLib.__default.ElementIsKey (Lit |e#0@@22|))) ))))
(assert  (=> true (forall ((|pt#0| T@U) ) (!  (=> (and (= (type |pt#0|) (SeqType BoxType)) (or (|BoundedPivotsLib.__default.ElementsAreKeys#canCall| |pt#0|) ($Is |pt#0| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) true) :qid |BoundedPivotsLibidfy.36:29| :skolemid |4041| :pattern ( (BoundedPivotsLib.__default.ElementsAreKeys |pt#0|)) ))))
(assert (forall ((|pt#0@@0| T@U) ) (!  (=> (and (= (type |pt#0@@0|) (SeqType BoxType)) ($Is |pt#0@@0| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|BoundedPivotsLib.__default.ElementsAreKeys#requires| |pt#0@@0|) true)) :qid |BoundedPivotsLibidfy.36:29| :skolemid |4042| :pattern ( (|BoundedPivotsLib.__default.ElementsAreKeys#requires| |pt#0@@0|)) )))
(assert  (=> true (forall ((|pt#0@@1| T@U) ) (!  (=> (and (= (type |pt#0@@1|) (SeqType BoxType)) (or (|BoundedPivotsLib.__default.ElementsAreKeys#canCall| |pt#0@@1|) ($Is |pt#0@@1| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|i#0@@125| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#0@@125|) (< |i#0@@125| (|Seq#Length| |pt#0@@1|))) (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@1| |i#0@@125|)))) (|BoundedPivotsLib.__default.ElementIsKey#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@1| |i#0@@125|)))) :qid |BoundedPivotsLibidfy.38:16| :skolemid |4044| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@1| |i#0@@125|))) ))) (= (BoundedPivotsLib.__default.ElementsAreKeys |pt#0@@1|)  (and true (forall ((|i#0@@126| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#0@@126|) (< |i#0@@126| (|Seq#Length| |pt#0@@1|))) (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@1| |i#0@@126|)))) (BoundedPivotsLib.__default.ElementIsKey ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@1| |i#0@@126|)))) :qid |BoundedPivotsLibidfy.38:16| :skolemid |4043| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@1| |i#0@@126|))) )))))) :qid |BoundedPivotsLibidfy.36:29| :skolemid |4045| :pattern ( (BoundedPivotsLib.__default.ElementsAreKeys |pt#0@@1|)) ))))
(assert  (=> true (forall ((|pt#0@@2| T@U) ) (!  (=> (and (= (type |pt#0@@2|) (SeqType BoxType)) (or (|BoundedPivotsLib.__default.ElementsAreKeys#canCall| (Lit |pt#0@@2|)) ($Is |pt#0@@2| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|i#1@@50| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@50|) (< |i#1@@50| (|Seq#Length| (Lit |pt#0@@2|)))) (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@2|) |i#1@@50|)))) (|BoundedPivotsLib.__default.ElementIsKey#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@2|) |i#1@@50|)))) :qid |BoundedPivotsLibidfy.38:16| :skolemid |4047| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@2| |i#1@@50|))) ))) (= (BoundedPivotsLib.__default.ElementsAreKeys (Lit |pt#0@@2|))  (and true (forall ((|i#1@@51| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#1@@51|) (< |i#1@@51| (|Seq#Length| (Lit |pt#0@@2|)))) (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@2|) |i#1@@51|)))) (BoundedPivotsLib.__default.ElementIsKey ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@2|) |i#1@@51|)))) :qid |BoundedPivotsLibidfy.38:16| :skolemid |4046| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@2| |i#1@@51|))) )))))) :qid |BoundedPivotsLibidfy.36:29| :weight 3 :skolemid |4048| :pattern ( (BoundedPivotsLib.__default.ElementsAreKeys (Lit |pt#0@@2|))) ))))
(assert (forall ((arg0@@652 T@U) ) (! (= (type (BoundedPivotsLib.__default.KeyToElement arg0@@652)) DatatypeTypeType) :qid |funType:BoundedPivotsLib.__default.KeyToElement| :pattern ( (BoundedPivotsLib.__default.KeyToElement arg0@@652)) )))
(assert  (=> true (forall ((|key#0@@142| T@U) ) (!  (=> (and (= (type |key#0@@142|) (SeqType BoxType)) (or (|BoundedPivotsLib.__default.KeyToElement#canCall| |key#0@@142|) ($Is |key#0@@142| Tclass.KeyType.Key))) ($Is (BoundedPivotsLib.__default.KeyToElement |key#0@@142|) Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) :qid |BoundedPivotsLibidfy.41:25| :skolemid |4049| :pattern ( (BoundedPivotsLib.__default.KeyToElement |key#0@@142|)) ))))
(assert (forall ((|key#0@@143| T@U) ) (!  (=> (and (= (type |key#0@@143|) (SeqType BoxType)) ($Is |key#0@@143| Tclass.KeyType.Key)) (= (|BoundedPivotsLib.__default.KeyToElement#requires| |key#0@@143|) true)) :qid |BoundedPivotsLibidfy.41:25| :skolemid |4050| :pattern ( (|BoundedPivotsLib.__default.KeyToElement#requires| |key#0@@143|)) )))
(assert  (=> true (forall ((|key#0@@144| T@U) ) (!  (=> (and (= (type |key#0@@144|) (SeqType BoxType)) (or (|BoundedPivotsLib.__default.KeyToElement#canCall| |key#0@@144|) ($Is |key#0@@144| Tclass.KeyType.Key))) (= (BoundedPivotsLib.__default.KeyToElement |key#0@@144|) (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| |key#0@@144|))) :qid |BoundedPivotsLibidfy.41:25| :skolemid |4051| :pattern ( (BoundedPivotsLib.__default.KeyToElement |key#0@@144|)) ))))
(assert  (=> true (forall ((|key#0@@145| T@U) ) (!  (=> (and (= (type |key#0@@145|) (SeqType BoxType)) (or (|BoundedPivotsLib.__default.KeyToElement#canCall| (Lit |key#0@@145|)) ($Is |key#0@@145| Tclass.KeyType.Key))) (= (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@145|)) (Lit (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| (Lit |key#0@@145|))))) :qid |BoundedPivotsLibidfy.41:25| :weight 3 :skolemid |4052| :pattern ( (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@145|))) ))))
(assert  (=> true (forall ((|keys#0| T@U) ) (!  (=> (and (= (type |keys#0|) (SeqType BoxType)) (or (|BoundedPivotsLib.__default.KeysToElements#canCall| |keys#0|) ($Is |keys#0| (TSeq Tclass.KeyType.Key)))) (and (= (|Seq#Length| |keys#0|) (|Seq#Length| (BoundedPivotsLib.__default.KeysToElements |keys#0|))) ($Is (BoundedPivotsLib.__default.KeysToElements |keys#0|) (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) :qid |BoundedPivotsLibidfy.46:27| :skolemid |4053| :pattern ( (BoundedPivotsLib.__default.KeysToElements |keys#0|)) ))))
(assert (forall (($Heap@@82 T@U) (|keys#0@@0| T@U) ) (!  (=> (and (and (= (type $Heap@@82) (MapType0Type refType MapType1Type)) (= (type |keys#0@@0|) (SeqType BoxType))) (and ($IsGoodHeap $Heap@@82) ($Is |keys#0@@0| (TSeq Tclass.KeyType.Key)))) (= (|BoundedPivotsLib.__default.KeysToElements#requires| |keys#0@@0|) true)) :qid |BoundedPivotsLibidfy.46:12| :skolemid |4054| :pattern ( (|BoundedPivotsLib.__default.KeysToElements#requires| |keys#0@@0|) ($IsGoodHeap $Heap@@82)) )))
(assert  (=> true (forall (($Heap@@83 T@U) (|keys#0@@1| T@U) ) (!  (=> (and (and (= (type $Heap@@83) (MapType0Type refType MapType1Type)) (= (type |keys#0@@1|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.KeysToElements#canCall| |keys#0@@1|) (and ($IsGoodHeap $Heap@@83) ($Is |keys#0@@1| (TSeq Tclass.KeyType.Key))))) (= (BoundedPivotsLib.__default.KeysToElements |keys#0@@1|) (|Seq#Create| Tclass.Upperbounded__Lexicographic__Byte__Order.Element $Heap@@83 (|Seq#Length| |keys#0@@1|) (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#202| |keys#0@@1|) (|lambda#161| TInt (LitInt 0) (|Seq#Length| |keys#0@@1|)) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ)))))) :qid |BoundedPivotsLibidfy.46:12| :skolemid |4055| :pattern ( (BoundedPivotsLib.__default.KeysToElements |keys#0@@1|) ($IsGoodHeap $Heap@@83)) ))))
(assert  (=> true (forall (($Heap@@84 T@U) (|keys#0@@2| T@U) ) (!  (=> (and (and (= (type $Heap@@84) (MapType0Type refType MapType1Type)) (= (type |keys#0@@2|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.KeysToElements#canCall| (Lit |keys#0@@2|)) (and ($IsGoodHeap $Heap@@84) ($Is |keys#0@@2| (TSeq Tclass.KeyType.Key))))) (= (BoundedPivotsLib.__default.KeysToElements (Lit |keys#0@@2|)) (|Seq#Create| Tclass.Upperbounded__Lexicographic__Byte__Order.Element $Heap@@84 (|Seq#Length| (Lit |keys#0@@2|)) (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#202| (Lit |keys#0@@2|)) (|lambda#161| TInt (LitInt 0) (|Seq#Length| (Lit |keys#0@@2|))) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ)))))) :qid |BoundedPivotsLibidfy.46:12| :weight 3 :skolemid |4056| :pattern ( (BoundedPivotsLib.__default.KeysToElements (Lit |keys#0@@2|)) ($IsGoodHeap $Heap@@84)) ))))
(assert  (=> true (forall ((|pt#0@@3| T@U) ) (!  (=> (and (= (type |pt#0@@3|) (SeqType BoxType)) (or (|BoundedPivotsLib.__default.WFPivots#canCall| |pt#0@@3|) ($Is |pt#0@@3| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) true) :qid |BoundedPivotsLibidfy.52:22| :skolemid |4057| :pattern ( (BoundedPivotsLib.__default.WFPivots |pt#0@@3|)) ))))
(assert (forall ((|pt#0@@4| T@U) ) (!  (=> (and (= (type |pt#0@@4|) (SeqType BoxType)) ($Is |pt#0@@4| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|BoundedPivotsLib.__default.WFPivots#requires| |pt#0@@4|) true)) :qid |BoundedPivotsLibidfy.52:22| :skolemid |4058| :pattern ( (|BoundedPivotsLib.__default.WFPivots#requires| |pt#0@@4|)) )))
(assert  (=> true (forall ((|pt#0@@5| T@U) ) (!  (=> (and (= (type |pt#0@@5|) (SeqType BoxType)) (or (|BoundedPivotsLib.__default.WFPivots#canCall| |pt#0@@5|) ($Is |pt#0@@5| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (and (|Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| |pt#0@@5|) (=> (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted |pt#0@@5|) (and (forall ((|i#0@@127| Int) ) (!  (=> (<= (LitInt 0) |i#0@@127|) (|BoundedPivotsLib.__default.NumBuckets#canCall| |pt#0@@5|)) :qid |BoundedPivotsLibidfy.55:16| :skolemid |4060| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@5| |i#0@@127|))) )) (=> (forall ((|i#0@@128| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@128|) (< |i#0@@128| (BoundedPivotsLib.__default.NumBuckets |pt#0@@5|))) (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@5| |i#0@@128|)))) :qid |BoundedPivotsLibidfy.55:16| :skolemid |4061| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@5| |i#0@@128|))) )) (|BoundedPivotsLib.__default.ElementsAreKeys#canCall| |pt#0@@5|))))) (= (BoundedPivotsLib.__default.WFPivots |pt#0@@5|)  (and (and (and (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted |pt#0@@5|) (forall ((|i#0@@129| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@129|) (< |i#0@@129| (BoundedPivotsLib.__default.NumBuckets |pt#0@@5|))) (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@5| |i#0@@129|)))) :qid |BoundedPivotsLibidfy.55:16| :skolemid |4059| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@5| |i#0@@129|))) ))) (BoundedPivotsLib.__default.ElementsAreKeys |pt#0@@5|)) (>= (|Seq#Length| |pt#0@@5|) (LitInt 2)))))) :qid |BoundedPivotsLibidfy.52:22| :skolemid |4062| :pattern ( (BoundedPivotsLib.__default.WFPivots |pt#0@@5|)) ))))
(assert  (=> true (forall ((|pt#0@@6| T@U) ) (!  (=> (and (= (type |pt#0@@6|) (SeqType BoxType)) (or (|BoundedPivotsLib.__default.WFPivots#canCall| (Lit |pt#0@@6|)) ($Is |pt#0@@6| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (and (|Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (Lit |pt#0@@6|)) (=> (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted (Lit |pt#0@@6|)) (and (forall ((|i#1@@52| Int) ) (!  (=> (<= (LitInt 0) |i#1@@52|) (|BoundedPivotsLib.__default.NumBuckets#canCall| (Lit |pt#0@@6|))) :qid |BoundedPivotsLibidfy.55:16| :skolemid |4064| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@6| |i#1@@52|))) )) (=> (forall ((|i#1@@53| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@53|) (< |i#1@@53| (BoundedPivotsLib.__default.NumBuckets (Lit |pt#0@@6|)))) (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@6|) |i#1@@53|)))) :qid |BoundedPivotsLibidfy.55:16| :skolemid |4065| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@6| |i#1@@53|))) )) (|BoundedPivotsLib.__default.ElementsAreKeys#canCall| (Lit |pt#0@@6|)))))) (= (BoundedPivotsLib.__default.WFPivots (Lit |pt#0@@6|))  (and (and (and (Upperbounded__Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted (Lit |pt#0@@6|)) (forall ((|i#1@@54| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@54|) (< |i#1@@54| (BoundedPivotsLib.__default.NumBuckets (Lit |pt#0@@6|)))) (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@6|) |i#1@@54|)))) :qid |BoundedPivotsLibidfy.55:16| :skolemid |4063| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@6| |i#1@@54|))) ))) (BoundedPivotsLib.__default.ElementsAreKeys (Lit |pt#0@@6|))) (>= (|Seq#Length| (Lit |pt#0@@6|)) (LitInt 2)))))) :qid |BoundedPivotsLibidfy.52:22| :weight 3 :skolemid |4066| :pattern ( (BoundedPivotsLib.__default.WFPivots (Lit |pt#0@@6|))) ))))
(assert  (=> true (forall ((|pt#0@@7| T@U) ) (!  (=> (and (= (type |pt#0@@7|) (SeqType BoxType)) (or (|BoundedPivotsLib.__default.ContainsAllKeys#canCall| |pt#0@@7|) ($Is |pt#0@@7| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) true) :qid |BoundedPivotsLibidfy.60:29| :skolemid |4067| :pattern ( (BoundedPivotsLib.__default.ContainsAllKeys |pt#0@@7|)) ))))
(assert (forall ((|pt#0@@8| T@U) ) (!  (=> (and (= (type |pt#0@@8|) (SeqType BoxType)) ($Is |pt#0@@8| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|BoundedPivotsLib.__default.ContainsAllKeys#requires| |pt#0@@8|) true)) :qid |BoundedPivotsLibidfy.60:29| :skolemid |4068| :pattern ( (|BoundedPivotsLib.__default.ContainsAllKeys#requires| |pt#0@@8|)) )))
(assert  (=> true (forall ((|pt#0@@9| T@U) ) (!  (=> (and (= (type |pt#0@@9|) (SeqType BoxType)) (or (|BoundedPivotsLib.__default.ContainsAllKeys#canCall| |pt#0@@9|) ($Is |pt#0@@9| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (and (|BoundedPivotsLib.__default.WFPivots#canCall| |pt#0@@9|) (=> (BoundedPivotsLib.__default.WFPivots |pt#0@@9|) (and (|$IsA#Upperbounded__Lexicographic__Byte__Order.Element| ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@9| (LitInt 0)))) (=> (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@9| (LitInt 0))) (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| (Lit (|Seq#Empty| BoxType)))) (|$IsA#Upperbounded__Lexicographic__Byte__Order.Element| ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@9| (- (|Seq#Length| |pt#0@@9|) 1)))))))) (= (BoundedPivotsLib.__default.ContainsAllKeys |pt#0@@9|)  (and (and (BoundedPivotsLib.__default.WFPivots |pt#0@@9|) (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@9| (LitInt 0))) (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| (Lit (|Seq#Empty| BoxType))))) (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@9| (- (|Seq#Length| |pt#0@@9|) 1))) |#Upperbounded_Lexicographic_Byte_Order.Element.Max_Element|))))) :qid |BoundedPivotsLibidfy.60:29| :skolemid |4069| :pattern ( (BoundedPivotsLib.__default.ContainsAllKeys |pt#0@@9|)) ))))
(assert  (=> true (forall ((|pt#0@@10| T@U) ) (!  (=> (and (= (type |pt#0@@10|) (SeqType BoxType)) (or (|BoundedPivotsLib.__default.ContainsAllKeys#canCall| (Lit |pt#0@@10|)) ($Is |pt#0@@10| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (and (and (|BoundedPivotsLib.__default.WFPivots#canCall| (Lit |pt#0@@10|)) (=> (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.WFPivots (Lit |pt#0@@10|))))) (and (|$IsA#Upperbounded__Lexicographic__Byte__Order.Element| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@10|) (LitInt 0)))) (=> (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@10|) (LitInt 0))) (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| (Lit (|Seq#Empty| BoxType)))) (|$IsA#Upperbounded__Lexicographic__Byte__Order.Element| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@10|) (- (|Seq#Length| (Lit |pt#0@@10|)) 1)))))))) (= (BoundedPivotsLib.__default.ContainsAllKeys (Lit |pt#0@@10|))  (and (and (BoundedPivotsLib.__default.WFPivots (Lit |pt#0@@10|)) (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@10|) (LitInt 0))) (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| (Lit (|Seq#Empty| BoxType))))) (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@10|) (- (|Seq#Length| (Lit |pt#0@@10|)) 1))) |#Upperbounded_Lexicographic_Byte_Order.Element.Max_Element|))))) :qid |BoundedPivotsLibidfy.60:29| :weight 3 :skolemid |4070| :pattern ( (BoundedPivotsLib.__default.ContainsAllKeys (Lit |pt#0@@10|))) ))))
(assert  (=> true (forall ((|pt#0@@11| T@U) (|key#0@@146| T@U) ) (!  (=> (and (and (= (type |pt#0@@11|) (SeqType BoxType)) (= (type |key#0@@146|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.BoundedKey#canCall| |pt#0@@11| |key#0@@146|) (and (and ($Is |pt#0@@11| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@146| Tclass.KeyType.Key)) (BoundedPivotsLib.__default.WFPivots |pt#0@@11|)))) true) :qid |BoundedPivotsLibidfy.78:24| :skolemid |4071| :pattern ( (BoundedPivotsLib.__default.BoundedKey |pt#0@@11| |key#0@@146|)) ))))
(assert (forall ((|pt#0@@12| T@U) (|key#0@@147| T@U) ) (!  (=> (and (and (= (type |pt#0@@12|) (SeqType BoxType)) (= (type |key#0@@147|) (SeqType BoxType))) (and ($Is |pt#0@@12| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@147| Tclass.KeyType.Key))) (= (|BoundedPivotsLib.__default.BoundedKey#requires| |pt#0@@12| |key#0@@147|) (BoundedPivotsLib.__default.WFPivots |pt#0@@12|))) :qid |BoundedPivotsLibidfy.78:24| :skolemid |4072| :pattern ( (|BoundedPivotsLib.__default.BoundedKey#requires| |pt#0@@12| |key#0@@147|)) )))
(assert  (=> true (forall ((|pt#0@@13| T@U) (|key#0@@148| T@U) ) (!  (=> (and (and (= (type |pt#0@@13|) (SeqType BoxType)) (= (type |key#0@@148|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.BoundedKey#canCall| |pt#0@@13| |key#0@@148|) (and (and ($Is |pt#0@@13| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@148| Tclass.KeyType.Key)) (BoundedPivotsLib.__default.WFPivots |pt#0@@13|)))) (and (and (and (|BoundedPivotsLib.__default.KeyToElement#canCall| |key#0@@148|) (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@13| (LitInt 0))) (BoundedPivotsLib.__default.KeyToElement |key#0@@148|))) (=> (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@13| (LitInt 0))) (BoundedPivotsLib.__default.KeyToElement |key#0@@148|)) (and (|BoundedPivotsLib.__default.KeyToElement#canCall| |key#0@@148|) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| (BoundedPivotsLib.__default.KeyToElement |key#0@@148|) ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@13| (- (|Seq#Length| |pt#0@@13|) 1))))))) (= (BoundedPivotsLib.__default.BoundedKey |pt#0@@13| |key#0@@148|)  (and (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@13| (LitInt 0))) (BoundedPivotsLib.__default.KeyToElement |key#0@@148|)) (Upperbounded__Lexicographic__Byte__Order.__default.lt (BoundedPivotsLib.__default.KeyToElement |key#0@@148|) ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@13| (- (|Seq#Length| |pt#0@@13|) 1)))))))) :qid |BoundedPivotsLibidfy.78:24| :skolemid |4073| :pattern ( (BoundedPivotsLib.__default.BoundedKey |pt#0@@13| |key#0@@148|)) ))))
(assert  (=> true (forall ((|pt#0@@14| T@U) (|key#0@@149| T@U) ) (!  (=> (and (and (= (type |pt#0@@14|) (SeqType BoxType)) (= (type |key#0@@149|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.BoundedKey#canCall| (Lit |pt#0@@14|) (Lit |key#0@@149|)) (and (and ($Is |pt#0@@14| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@149| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.WFPivots (Lit |pt#0@@14|)))))))) (and (and (and (|BoundedPivotsLib.__default.KeyToElement#canCall| (Lit |key#0@@149|)) (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@14|) (LitInt 0))) (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@149|))))) (=> (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@14|) (LitInt 0))) (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@149|)))) (and (|BoundedPivotsLib.__default.KeyToElement#canCall| (Lit |key#0@@149|)) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@149|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@14|) (- (|Seq#Length| (Lit |pt#0@@14|)) 1))))))) (= (BoundedPivotsLib.__default.BoundedKey (Lit |pt#0@@14|) (Lit |key#0@@149|))  (and (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@14|) (LitInt 0))) (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@149|)))) (Upperbounded__Lexicographic__Byte__Order.__default.lt (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@149|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@14|) (- (|Seq#Length| (Lit |pt#0@@14|)) 1)))))))) :qid |BoundedPivotsLibidfy.78:24| :weight 3 :skolemid |4074| :pattern ( (BoundedPivotsLib.__default.BoundedKey (Lit |pt#0@@14|) (Lit |key#0@@149|))) ))))
(assert  (=> true (forall ((|pt#0@@15| T@U) (|key#0@@150| T@U) ) (!  (=> (and (and (= (type |pt#0@@15|) (SeqType BoxType)) (= (type |key#0@@150|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.ValidLeftCutOffKey#canCall| |pt#0@@15| |key#0@@150|) (and (and ($Is |pt#0@@15| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@150| Tclass.KeyType.Key)) (BoundedPivotsLib.__default.WFPivots |pt#0@@15|)))) true) :qid |BoundedPivotsLibidfy.86:32| :skolemid |4075| :pattern ( (BoundedPivotsLib.__default.ValidLeftCutOffKey |pt#0@@15| |key#0@@150|)) ))))
(assert (forall ((|pt#0@@16| T@U) (|key#0@@151| T@U) ) (!  (=> (and (and (= (type |pt#0@@16|) (SeqType BoxType)) (= (type |key#0@@151|) (SeqType BoxType))) (and ($Is |pt#0@@16| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@151| Tclass.KeyType.Key))) (= (|BoundedPivotsLib.__default.ValidLeftCutOffKey#requires| |pt#0@@16| |key#0@@151|) (BoundedPivotsLib.__default.WFPivots |pt#0@@16|))) :qid |BoundedPivotsLibidfy.86:32| :skolemid |4076| :pattern ( (|BoundedPivotsLib.__default.ValidLeftCutOffKey#requires| |pt#0@@16| |key#0@@151|)) )))
(assert  (=> true (forall ((|pt#0@@17| T@U) (|key#0@@152| T@U) ) (!  (=> (and (and (= (type |pt#0@@17|) (SeqType BoxType)) (= (type |key#0@@152|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.ValidLeftCutOffKey#canCall| |pt#0@@17| |key#0@@152|) (and (and ($Is |pt#0@@17| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@152| Tclass.KeyType.Key)) (BoundedPivotsLib.__default.WFPivots |pt#0@@17|)))) (and (and (and (|BoundedPivotsLib.__default.KeyToElement#canCall| |key#0@@152|) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@17| (LitInt 0))) (BoundedPivotsLib.__default.KeyToElement |key#0@@152|))) (=> (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@17| (LitInt 0))) (BoundedPivotsLib.__default.KeyToElement |key#0@@152|)) (and (|BoundedPivotsLib.__default.KeyToElement#canCall| |key#0@@152|) (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| (BoundedPivotsLib.__default.KeyToElement |key#0@@152|) ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@17| (- (|Seq#Length| |pt#0@@17|) 1))))))) (= (BoundedPivotsLib.__default.ValidLeftCutOffKey |pt#0@@17| |key#0@@152|)  (and (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@17| (LitInt 0))) (BoundedPivotsLib.__default.KeyToElement |key#0@@152|)) (Upperbounded__Lexicographic__Byte__Order.__default.lte (BoundedPivotsLib.__default.KeyToElement |key#0@@152|) ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@17| (- (|Seq#Length| |pt#0@@17|) 1)))))))) :qid |BoundedPivotsLibidfy.86:32| :skolemid |4077| :pattern ( (BoundedPivotsLib.__default.ValidLeftCutOffKey |pt#0@@17| |key#0@@152|)) ))))
(assert  (=> true (forall ((|pt#0@@18| T@U) (|key#0@@153| T@U) ) (!  (=> (and (and (= (type |pt#0@@18|) (SeqType BoxType)) (= (type |key#0@@153|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.ValidLeftCutOffKey#canCall| (Lit |pt#0@@18|) (Lit |key#0@@153|)) (and (and ($Is |pt#0@@18| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@153| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.WFPivots (Lit |pt#0@@18|)))))))) (and (and (and (|BoundedPivotsLib.__default.KeyToElement#canCall| (Lit |key#0@@153|)) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@18|) (LitInt 0))) (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@153|))))) (=> (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@18|) (LitInt 0))) (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@153|)))) (and (|BoundedPivotsLib.__default.KeyToElement#canCall| (Lit |key#0@@153|)) (|Upperbounded__Lexicographic__Byte__Order.__default.lte#canCall| (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@153|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@18|) (- (|Seq#Length| (Lit |pt#0@@18|)) 1))))))) (= (BoundedPivotsLib.__default.ValidLeftCutOffKey (Lit |pt#0@@18|) (Lit |key#0@@153|))  (and (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@18|) (LitInt 0))) (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@153|)))) (Upperbounded__Lexicographic__Byte__Order.__default.lte (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@153|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@18|) (- (|Seq#Length| (Lit |pt#0@@18|)) 1)))))))) :qid |BoundedPivotsLibidfy.86:32| :weight 3 :skolemid |4078| :pattern ( (BoundedPivotsLib.__default.ValidLeftCutOffKey (Lit |pt#0@@18|) (Lit |key#0@@153|))) ))))
(assert  (=> true (forall ((|pt#0@@19| T@U) (|keys#0@@3| T@U) ) (!  (=> (and (and (= (type |pt#0@@19|) (SeqType BoxType)) (= (type |keys#0@@3|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.BoundedKeySeq#canCall| |pt#0@@19| |keys#0@@3|) (and (and ($Is |pt#0@@19| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |keys#0@@3| (TSeq Tclass.KeyType.Key))) (BoundedPivotsLib.__default.WFPivots |pt#0@@19|)))) true) :qid |BoundedPivotsLibidfy.115:27| :skolemid |4079| :pattern ( (BoundedPivotsLib.__default.BoundedKeySeq |pt#0@@19| |keys#0@@3|)) ))))
(assert (forall ((|pt#0@@20| T@U) (|keys#0@@4| T@U) ) (!  (=> (and (and (= (type |pt#0@@20|) (SeqType BoxType)) (= (type |keys#0@@4|) (SeqType BoxType))) (and ($Is |pt#0@@20| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |keys#0@@4| (TSeq Tclass.KeyType.Key)))) (= (|BoundedPivotsLib.__default.BoundedKeySeq#requires| |pt#0@@20| |keys#0@@4|) (BoundedPivotsLib.__default.WFPivots |pt#0@@20|))) :qid |BoundedPivotsLibidfy.115:27| :skolemid |4080| :pattern ( (|BoundedPivotsLib.__default.BoundedKeySeq#requires| |pt#0@@20| |keys#0@@4|)) )))
(assert  (=> true (forall ((|pt#0@@21| T@U) (|keys#0@@5| T@U) ) (!  (=> (and (and (= (type |pt#0@@21|) (SeqType BoxType)) (= (type |keys#0@@5|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.BoundedKeySeq#canCall| |pt#0@@21| |keys#0@@5|) (and (and ($Is |pt#0@@21| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |keys#0@@5| (TSeq Tclass.KeyType.Key))) (BoundedPivotsLib.__default.WFPivots |pt#0@@21|)))) (and (forall ((|k#0@@56| T@U) ) (!  (=> (and (and (= (type |k#0@@56|) (SeqType BoxType)) ($Is |k#0@@56| Tclass.KeyType.Key)) (|Seq#Contains| |keys#0@@5| ($Box |k#0@@56|))) (|BoundedPivotsLib.__default.BoundedKey#canCall| |pt#0@@21| |k#0@@56|)) :qid |BoundedPivotsLibidfy.118:13| :skolemid |4082| :pattern ( (BoundedPivotsLib.__default.BoundedKey |pt#0@@21| |k#0@@56|)) :pattern ( (|Seq#Contains| |keys#0@@5| ($Box |k#0@@56|))) )) (= (BoundedPivotsLib.__default.BoundedKeySeq |pt#0@@21| |keys#0@@5|) (forall ((|k#0@@57| T@U) ) (!  (=> (= (type |k#0@@57|) (SeqType BoxType)) (=> (and ($Is |k#0@@57| Tclass.KeyType.Key) (|Seq#Contains| |keys#0@@5| ($Box |k#0@@57|))) (BoundedPivotsLib.__default.BoundedKey |pt#0@@21| |k#0@@57|))) :qid |BoundedPivotsLibidfy.118:13| :skolemid |4081| :pattern ( (BoundedPivotsLib.__default.BoundedKey |pt#0@@21| |k#0@@57|)) :pattern ( (|Seq#Contains| |keys#0@@5| ($Box |k#0@@57|))) ))))) :qid |BoundedPivotsLibidfy.115:27| :skolemid |4083| :pattern ( (BoundedPivotsLib.__default.BoundedKeySeq |pt#0@@21| |keys#0@@5|)) ))))
(assert  (=> true (forall ((|pt#0@@22| T@U) (|keys#0@@6| T@U) ) (!  (=> (and (and (= (type |pt#0@@22|) (SeqType BoxType)) (= (type |keys#0@@6|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.BoundedKeySeq#canCall| (Lit |pt#0@@22|) (Lit |keys#0@@6|)) (and (and ($Is |pt#0@@22| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |keys#0@@6| (TSeq Tclass.KeyType.Key))) (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.WFPivots (Lit |pt#0@@22|)))))))) (and (forall ((|k#1@@11| T@U) ) (!  (=> (and (and (= (type |k#1@@11|) (SeqType BoxType)) ($Is |k#1@@11| Tclass.KeyType.Key)) (|Seq#Contains| |keys#0@@6| ($Box |k#1@@11|))) (|BoundedPivotsLib.__default.BoundedKey#canCall| (Lit |pt#0@@22|) |k#1@@11|)) :qid |BoundedPivotsLibidfy.118:13| :skolemid |4085| :pattern ( (BoundedPivotsLib.__default.BoundedKey |pt#0@@22| |k#1@@11|)) :pattern ( (|Seq#Contains| |keys#0@@6| ($Box |k#1@@11|))) )) (= (BoundedPivotsLib.__default.BoundedKeySeq (Lit |pt#0@@22|) (Lit |keys#0@@6|)) (forall ((|k#1@@12| T@U) ) (!  (=> (= (type |k#1@@12|) (SeqType BoxType)) (=> (and ($Is |k#1@@12| Tclass.KeyType.Key) (|Seq#Contains| |keys#0@@6| ($Box |k#1@@12|))) (BoundedPivotsLib.__default.BoundedKey (Lit |pt#0@@22|) |k#1@@12|))) :qid |BoundedPivotsLibidfy.118:13| :skolemid |4084| :pattern ( (BoundedPivotsLib.__default.BoundedKey |pt#0@@22| |k#1@@12|)) :pattern ( (|Seq#Contains| |keys#0@@6| ($Box |k#1@@12|))) ))))) :qid |BoundedPivotsLibidfy.115:27| :weight 3 :skolemid |4086| :pattern ( (BoundedPivotsLib.__default.BoundedKeySeq (Lit |pt#0@@22|) (Lit |keys#0@@6|))) ))))
(assert  (=> true (forall ((|pt#0@@23| T@U) ) (!  (=> (and (= (type |pt#0@@23|) (SeqType BoxType)) (or (|BoundedPivotsLib.__default.NumBuckets#canCall| |pt#0@@23|) ($Is |pt#0@@23| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) true) :qid |BoundedPivotsLibidfy.121:23| :skolemid |4087| :pattern ( (BoundedPivotsLib.__default.NumBuckets |pt#0@@23|)) ))))
(assert (forall ((|pt#0@@24| T@U) ) (!  (=> (and (= (type |pt#0@@24|) (SeqType BoxType)) ($Is |pt#0@@24| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|BoundedPivotsLib.__default.NumBuckets#requires| |pt#0@@24|) true)) :qid |BoundedPivotsLibidfy.121:23| :skolemid |4088| :pattern ( (|BoundedPivotsLib.__default.NumBuckets#requires| |pt#0@@24|)) )))
(assert  (=> true (forall ((|pt#0@@25| T@U) ) (!  (=> (and (= (type |pt#0@@25|) (SeqType BoxType)) (or (|BoundedPivotsLib.__default.NumBuckets#canCall| |pt#0@@25|) ($Is |pt#0@@25| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (= (BoundedPivotsLib.__default.NumBuckets |pt#0@@25|) (- (|Seq#Length| |pt#0@@25|) 1))) :qid |BoundedPivotsLibidfy.121:23| :skolemid |4089| :pattern ( (BoundedPivotsLib.__default.NumBuckets |pt#0@@25|)) ))))
(assert  (=> true (forall ((|pt#0@@26| T@U) ) (!  (=> (and (= (type |pt#0@@26|) (SeqType BoxType)) (or (|BoundedPivotsLib.__default.NumBuckets#canCall| (Lit |pt#0@@26|)) ($Is |pt#0@@26| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (= (BoundedPivotsLib.__default.NumBuckets (Lit |pt#0@@26|)) (- (|Seq#Length| (Lit |pt#0@@26|)) 1))) :qid |BoundedPivotsLibidfy.121:23| :weight 3 :skolemid |4090| :pattern ( (BoundedPivotsLib.__default.NumBuckets (Lit |pt#0@@26|))) ))))
(assert  (=> true (forall ((|e#0@@23| T@U) ) (!  (=> (and (= (type |e#0@@23|) DatatypeTypeType) (or (|BoundedPivotsLib.__default.PivotSize#canCall| |e#0@@23|) (and ($Is |e#0@@23| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) (=> (Upperbounded__Lexicographic__Byte__Order.Element.Element_q |e#0@@23|) (BoundedPivotsLib.__default.ElementIsKey |e#0@@23|))))) (and (<= (LitInt 0) (BoundedPivotsLib.__default.PivotSize |e#0@@23|)) (< (BoundedPivotsLib.__default.PivotSize |e#0@@23|) 18446744073709551616))) :qid |BoundedPivotsLibidfy.126:29| :skolemid |4091| :pattern ( (BoundedPivotsLib.__default.PivotSize |e#0@@23|)) ))))
(assert (forall ((|e#0@@24| T@U) ) (!  (=> (and (= (type |e#0@@24|) DatatypeTypeType) ($Is |e#0@@24| Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (= (|BoundedPivotsLib.__default.PivotSize#requires| |e#0@@24|)  (=> (Upperbounded__Lexicographic__Byte__Order.Element.Element_q |e#0@@24|) (BoundedPivotsLib.__default.ElementIsKey |e#0@@24|)))) :qid |BoundedPivotsLibidfy.126:29| :skolemid |4092| :pattern ( (|BoundedPivotsLib.__default.PivotSize#requires| |e#0@@24|)) )))
(assert  (=> true (forall ((|e#0@@25| T@U) ) (!  (=> (and (= (type |e#0@@25|) DatatypeTypeType) (or (|BoundedPivotsLib.__default.PivotSize#canCall| |e#0@@25|) (and ($Is |e#0@@25| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) (=> (Upperbounded__Lexicographic__Byte__Order.Element.Element_q |e#0@@25|) (BoundedPivotsLib.__default.ElementIsKey |e#0@@25|))))) (= (BoundedPivotsLib.__default.PivotSize |e#0@@25|) (ite (Upperbounded__Lexicographic__Byte__Order.Element.Element_q |e#0@@25|) (|Seq#Length| (Upperbounded__Lexicographic__Byte__Order.Element.e |e#0@@25|)) 0))) :qid |BoundedPivotsLibidfy.126:29| :skolemid |4093| :pattern ( (BoundedPivotsLib.__default.PivotSize |e#0@@25|)) ))))
(assert  (=> true (forall ((|e#0@@26| T@U) ) (!  (=> (and (= (type |e#0@@26|) DatatypeTypeType) (or (|BoundedPivotsLib.__default.PivotSize#canCall| (Lit |e#0@@26|)) (and ($Is |e#0@@26| Tclass.Upperbounded__Lexicographic__Byte__Order.Element) (U_2_bool (Lit (bool_2_U  (=> (Upperbounded__Lexicographic__Byte__Order.Element.Element_q (Lit |e#0@@26|)) (BoundedPivotsLib.__default.ElementIsKey (Lit |e#0@@26|))))))))) (= (BoundedPivotsLib.__default.PivotSize (Lit |e#0@@26|)) (ite (Upperbounded__Lexicographic__Byte__Order.Element.Element_q (Lit |e#0@@26|)) (|Seq#Length| (Lit (Upperbounded__Lexicographic__Byte__Order.Element.e (Lit |e#0@@26|)))) 0))) :qid |BoundedPivotsLibidfy.126:29| :weight 3 :skolemid |4094| :pattern ( (BoundedPivotsLib.__default.PivotSize (Lit |e#0@@26|))) ))))
(assert  (=> true (forall ((|pt#0@@27| T@U) (|key#0@@154| T@U) ) (!  (=> (and (and (= (type |pt#0@@27|) (SeqType BoxType)) (= (type |key#0@@154|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.Route#canCall| |pt#0@@27| |key#0@@154|) (and (and ($Is |pt#0@@27| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@154| Tclass.KeyType.Key)) (and (BoundedPivotsLib.__default.WFPivots |pt#0@@27|) (BoundedPivotsLib.__default.BoundedKey |pt#0@@27| |key#0@@154|))))) (and (<= (LitInt 0) (BoundedPivotsLib.__default.Route |pt#0@@27| |key#0@@154|)) (< (BoundedPivotsLib.__default.Route |pt#0@@27| |key#0@@154|) (BoundedPivotsLib.__default.NumBuckets |pt#0@@27|)))) :qid |BoundedPivotsLibidfy.134:18| :skolemid |4095| :pattern ( (BoundedPivotsLib.__default.Route |pt#0@@27| |key#0@@154|)) ))))
(assert (forall ((|pt#0@@28| T@U) (|key#0@@155| T@U) ) (!  (=> (and (and (= (type |pt#0@@28|) (SeqType BoxType)) (= (type |key#0@@155|) (SeqType BoxType))) (and ($Is |pt#0@@28| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@155| Tclass.KeyType.Key))) (= (|BoundedPivotsLib.__default.Route#requires| |pt#0@@28| |key#0@@155|)  (and (BoundedPivotsLib.__default.WFPivots |pt#0@@28|) (BoundedPivotsLib.__default.BoundedKey |pt#0@@28| |key#0@@155|)))) :qid |BoundedPivotsLibidfy.134:18| :skolemid |4096| :pattern ( (|BoundedPivotsLib.__default.Route#requires| |pt#0@@28| |key#0@@155|)) )))
(assert  (=> true (forall ((|pt#0@@29| T@U) (|key#0@@156| T@U) ) (!  (=> (and (and (= (type |pt#0@@29|) (SeqType BoxType)) (= (type |key#0@@156|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.Route#canCall| |pt#0@@29| |key#0@@156|) (and (and ($Is |pt#0@@29| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@156| Tclass.KeyType.Key)) (and (BoundedPivotsLib.__default.WFPivots |pt#0@@29|) (BoundedPivotsLib.__default.BoundedKey |pt#0@@29| |key#0@@156|))))) (and (and (|BoundedPivotsLib.__default.KeyToElement#canCall| |key#0@@156|) (|Upperbounded__Lexicographic__Byte__Order.__default.LargestLte#canCall| |pt#0@@29| (BoundedPivotsLib.__default.KeyToElement |key#0@@156|))) (= (BoundedPivotsLib.__default.Route |pt#0@@29| |key#0@@156|) (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) |pt#0@@29| (BoundedPivotsLib.__default.KeyToElement |key#0@@156|))))) :qid |BoundedPivotsLibidfy.134:18| :skolemid |4097| :pattern ( (BoundedPivotsLib.__default.Route |pt#0@@29| |key#0@@156|)) ))))
(assert  (=> true (forall ((|pt#0@@30| T@U) (|key#0@@157| T@U) ) (!  (=> (and (and (= (type |pt#0@@30|) (SeqType BoxType)) (= (type |key#0@@157|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.Route#canCall| (Lit |pt#0@@30|) (Lit |key#0@@157|)) (and (and ($Is |pt#0@@30| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@157| Tclass.KeyType.Key)) (and (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.WFPivots (Lit |pt#0@@30|))))) (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.BoundedKey (Lit |pt#0@@30|) (Lit |key#0@@157|))))))))) (and (and (|BoundedPivotsLib.__default.KeyToElement#canCall| (Lit |key#0@@157|)) (|Upperbounded__Lexicographic__Byte__Order.__default.LargestLte#canCall| (Lit |pt#0@@30|) (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@157|))))) (= (BoundedPivotsLib.__default.Route (Lit |pt#0@@30|) (Lit |key#0@@157|)) (LitInt (Upperbounded__Lexicographic__Byte__Order.__default.LargestLte ($LS $LZ) (Lit |pt#0@@30|) (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@157|)))))))) :qid |BoundedPivotsLibidfy.134:18| :weight 3 :skolemid |4098| :pattern ( (BoundedPivotsLib.__default.Route (Lit |pt#0@@30|) (Lit |key#0@@157|))) ))))
(assert (= (type BoundedPivotsLib.__default.InitPivotTable) (SeqType BoxType)))
(assert  (=> true (=> true (and (BoundedPivotsLib.__default.WFPivots BoundedPivotsLib.__default.InitPivotTable) ($Is BoundedPivotsLib.__default.InitPivotTable (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))))))
(assert (= |BoundedPivotsLib.__default.InitPivotTable#requires| true))
(assert  (=> true (=> true (= BoundedPivotsLib.__default.InitPivotTable (let ((|pt#0@@31| (Lit (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| (Lit (|Seq#Empty| BoxType)))))) ($Box (Lit |#Upperbounded_Lexicographic_Byte_Order.Element.Max_Element|)))))) |pt#0@@31|)))))
(assert  (=> true (=> true (= BoundedPivotsLib.__default.InitPivotTable (let ((|pt#1| (Lit (|Seq#Build| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| (Lit (|Seq#Empty| BoxType)))))) ($Box (Lit |#Upperbounded_Lexicographic_Byte_Order.Element.Max_Element|)))))) |pt#1|)))))
(assert (forall ((arg0@@653 T@U) (arg1@@338 Int) ) (! (= (type (BoundedPivotsLib.__default.GetKey arg0@@653 arg1@@338)) (SeqType BoxType)) :qid |funType:BoundedPivotsLib.__default.GetKey| :pattern ( (BoundedPivotsLib.__default.GetKey arg0@@653 arg1@@338)) )))
(assert  (=> true (forall ((|pt#0@@32| T@U) (|idx#0| Int) ) (!  (=> (and (= (type |pt#0@@32|) (SeqType BoxType)) (or (|BoundedPivotsLib.__default.GetKey#canCall| |pt#0@@32| |idx#0|) (and ($Is |pt#0@@32| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (and (and (BoundedPivotsLib.__default.WFPivots |pt#0@@32|) (and (<= (LitInt 0) |idx#0|) (< |idx#0| (|Seq#Length| |pt#0@@32|)))) (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@32| |idx#0|))))))) (and (|Upperbounded__Lexicographic__Byte__Order.Element#Equal| (BoundedPivotsLib.__default.KeyToElement (BoundedPivotsLib.__default.GetKey |pt#0@@32| |idx#0|)) ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@32| |idx#0|))) ($Is (BoundedPivotsLib.__default.GetKey |pt#0@@32| |idx#0|) Tclass.KeyType.Key))) :qid |BoundedPivotsLibidfy.173:19| :skolemid |4103| :pattern ( (BoundedPivotsLib.__default.GetKey |pt#0@@32| |idx#0|)) ))))
(assert (forall ((|pt#0@@33| T@U) (|idx#0@@0| Int) ) (!  (=> (and (= (type |pt#0@@33|) (SeqType BoxType)) ($Is |pt#0@@33| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|BoundedPivotsLib.__default.GetKey#requires| |pt#0@@33| |idx#0@@0|)  (and (and (BoundedPivotsLib.__default.WFPivots |pt#0@@33|) (and (<= (LitInt 0) |idx#0@@0|) (< |idx#0@@0| (|Seq#Length| |pt#0@@33|)))) (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@33| |idx#0@@0|)))))) :qid |BoundedPivotsLibidfy.173:19| :skolemid |4104| :pattern ( (|BoundedPivotsLib.__default.GetKey#requires| |pt#0@@33| |idx#0@@0|)) )))
(assert  (=> true (forall ((|pt#0@@34| T@U) (|idx#0@@1| Int) ) (!  (=> (and (= (type |pt#0@@34|) (SeqType BoxType)) (or (|BoundedPivotsLib.__default.GetKey#canCall| |pt#0@@34| |idx#0@@1|) (and ($Is |pt#0@@34| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (and (and (BoundedPivotsLib.__default.WFPivots |pt#0@@34|) (and (<= (LitInt 0) |idx#0@@1|) (< |idx#0@@1| (|Seq#Length| |pt#0@@34|)))) (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@34| |idx#0@@1|))))))) (= (BoundedPivotsLib.__default.GetKey |pt#0@@34| |idx#0@@1|) (let ((|k#0@@58| (Upperbounded__Lexicographic__Byte__Order.Element.e ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@34| |idx#0@@1|))))) |k#0@@58|))) :qid |BoundedPivotsLibidfy.173:19| :skolemid |4105| :pattern ( (BoundedPivotsLib.__default.GetKey |pt#0@@34| |idx#0@@1|)) ))))
(assert  (=> true (forall ((|pt#0@@35| T@U) (|idx#0@@2| Int) ) (!  (=> (and (= (type |pt#0@@35|) (SeqType BoxType)) (or (|BoundedPivotsLib.__default.GetKey#canCall| (Lit |pt#0@@35|) (LitInt |idx#0@@2|)) (and ($Is |pt#0@@35| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (and (and (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.WFPivots (Lit |pt#0@@35|))))) (and (<= (LitInt 0) (LitInt |idx#0@@2|)) (< |idx#0@@2| (|Seq#Length| (Lit |pt#0@@35|))))) (Upperbounded__Lexicographic__Byte__Order.Element.Element_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@35|) (LitInt |idx#0@@2|)))))))) (= (BoundedPivotsLib.__default.GetKey (Lit |pt#0@@35|) (LitInt |idx#0@@2|)) (let ((|k#1@@13| (Upperbounded__Lexicographic__Byte__Order.Element.e ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@35|) (LitInt |idx#0@@2|)))))) |k#1@@13|))) :qid |BoundedPivotsLibidfy.173:19| :weight 3 :skolemid |4106| :pattern ( (BoundedPivotsLib.__default.GetKey (Lit |pt#0@@35|) (LitInt |idx#0@@2|))) ))))
(assert  (=> true (forall ((|pt#0@@36| T@U) (|idx#0@@3| Int) (|key#0@@158| T@U) ) (!  (=> (and (and (= (type |pt#0@@36|) (SeqType BoxType)) (= (type |key#0@@158|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.PivotInsertable#canCall| |pt#0@@36| |idx#0@@3| |key#0@@158|) (and (and ($Is |pt#0@@36| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@158| Tclass.KeyType.Key)) (BoundedPivotsLib.__default.WFPivots |pt#0@@36|)))) true) :qid |BoundedPivotsLibidfy.229:29| :skolemid |4107| :pattern ( (BoundedPivotsLib.__default.PivotInsertable |pt#0@@36| |idx#0@@3| |key#0@@158|)) ))))
(assert (forall ((|pt#0@@37| T@U) (|idx#0@@4| Int) (|key#0@@159| T@U) ) (!  (=> (and (and (= (type |pt#0@@37|) (SeqType BoxType)) (= (type |key#0@@159|) (SeqType BoxType))) (and ($Is |pt#0@@37| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@159| Tclass.KeyType.Key))) (= (|BoundedPivotsLib.__default.PivotInsertable#requires| |pt#0@@37| |idx#0@@4| |key#0@@159|) (BoundedPivotsLib.__default.WFPivots |pt#0@@37|))) :qid |BoundedPivotsLibidfy.229:29| :skolemid |4108| :pattern ( (|BoundedPivotsLib.__default.PivotInsertable#requires| |pt#0@@37| |idx#0@@4| |key#0@@159|)) )))
(assert  (=> true (forall ((|pt#0@@38| T@U) (|idx#0@@5| Int) (|key#0@@160| T@U) ) (!  (=> (and (and (= (type |pt#0@@38|) (SeqType BoxType)) (= (type |key#0@@160|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.PivotInsertable#canCall| |pt#0@@38| |idx#0@@5| |key#0@@160|) (and (and ($Is |pt#0@@38| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@160| Tclass.KeyType.Key)) (BoundedPivotsLib.__default.WFPivots |pt#0@@38|)))) (and (=> (<= (LitInt 0) |idx#0@@5|) (=> (<= |idx#0@@5| (|Seq#Length| |pt#0@@38|)) (and (=> (= |idx#0@@5| (LitInt 0)) (and (|BoundedPivotsLib.__default.KeyToElement#canCall| |key#0@@160|) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| (BoundedPivotsLib.__default.KeyToElement |key#0@@160|) ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@38| (LitInt 0)))))) (=> (=> (= |idx#0@@5| (LitInt 0)) (Upperbounded__Lexicographic__Byte__Order.__default.lt (BoundedPivotsLib.__default.KeyToElement |key#0@@160|) ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@38| (LitInt 0))))) (and (=> (= |idx#0@@5| (|Seq#Length| |pt#0@@38|)) (and (|BoundedPivotsLib.__default.KeyToElement#canCall| |key#0@@160|) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@38| (- (|Seq#Length| |pt#0@@38|) 1))) (BoundedPivotsLib.__default.KeyToElement |key#0@@160|)))) (=> (=> (= |idx#0@@5| (|Seq#Length| |pt#0@@38|)) (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@38| (- (|Seq#Length| |pt#0@@38|) 1))) (BoundedPivotsLib.__default.KeyToElement |key#0@@160|))) (and (=> (> |idx#0@@5| 0) (=> (< |idx#0@@5| (|Seq#Length| |pt#0@@38|)) (and (and (|BoundedPivotsLib.__default.KeyToElement#canCall| |key#0@@160|) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@38| (- |idx#0@@5| 1))) (BoundedPivotsLib.__default.KeyToElement |key#0@@160|))) (=> (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@38| (- |idx#0@@5| 1))) (BoundedPivotsLib.__default.KeyToElement |key#0@@160|)) (and (|BoundedPivotsLib.__default.KeyToElement#canCall| |key#0@@160|) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| (BoundedPivotsLib.__default.KeyToElement |key#0@@160|) ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@38| |idx#0@@5|)))))))) (=> (=> (and (> |idx#0@@5| 0) (< |idx#0@@5| (|Seq#Length| |pt#0@@38|))) (and (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@38| (- |idx#0@@5| 1))) (BoundedPivotsLib.__default.KeyToElement |key#0@@160|)) (Upperbounded__Lexicographic__Byte__Order.__default.lt (BoundedPivotsLib.__default.KeyToElement |key#0@@160|) ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@38| |idx#0@@5|))))) (and (|BoundedPivotsLib.__default.BoundedKey#canCall| |pt#0@@38| |key#0@@160|) (=> (BoundedPivotsLib.__default.BoundedKey |pt#0@@38| |key#0@@160|) (|BoundedPivotsLib.__default.Route#canCall| |pt#0@@38| |key#0@@160|))))))))))) (= (BoundedPivotsLib.__default.PivotInsertable |pt#0@@38| |idx#0@@5| |key#0@@160|)  (and (and (and (and (and (<= (LitInt 0) |idx#0@@5|) (<= |idx#0@@5| (|Seq#Length| |pt#0@@38|))) (=> (= |idx#0@@5| (LitInt 0)) (Upperbounded__Lexicographic__Byte__Order.__default.lt (BoundedPivotsLib.__default.KeyToElement |key#0@@160|) ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@38| (LitInt 0)))))) (=> (= |idx#0@@5| (|Seq#Length| |pt#0@@38|)) (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@38| (- (|Seq#Length| |pt#0@@38|) 1))) (BoundedPivotsLib.__default.KeyToElement |key#0@@160|)))) (=> (and (> |idx#0@@5| 0) (< |idx#0@@5| (|Seq#Length| |pt#0@@38|))) (and (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@38| (- |idx#0@@5| 1))) (BoundedPivotsLib.__default.KeyToElement |key#0@@160|)) (Upperbounded__Lexicographic__Byte__Order.__default.lt (BoundedPivotsLib.__default.KeyToElement |key#0@@160|) ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@38| |idx#0@@5|)))))) (=> (BoundedPivotsLib.__default.BoundedKey |pt#0@@38| |key#0@@160|) (= (+ (BoundedPivotsLib.__default.Route |pt#0@@38| |key#0@@160|) 1) |idx#0@@5|)))))) :qid |BoundedPivotsLibidfy.229:29| :skolemid |4109| :pattern ( (BoundedPivotsLib.__default.PivotInsertable |pt#0@@38| |idx#0@@5| |key#0@@160|)) ))))
(assert  (=> true (forall ((|pt#0@@39| T@U) (|idx#0@@6| Int) (|key#0@@161| T@U) ) (!  (=> (and (and (= (type |pt#0@@39|) (SeqType BoxType)) (= (type |key#0@@161|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.PivotInsertable#canCall| (Lit |pt#0@@39|) (LitInt |idx#0@@6|) (Lit |key#0@@161|)) (and (and ($Is |pt#0@@39| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@161| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.WFPivots (Lit |pt#0@@39|)))))))) (and (=> (<= (LitInt 0) (LitInt |idx#0@@6|)) (=> (<= (LitInt |idx#0@@6|) (|Seq#Length| (Lit |pt#0@@39|))) (and (=> (= (LitInt |idx#0@@6|) (LitInt 0)) (and (|BoundedPivotsLib.__default.KeyToElement#canCall| (Lit |key#0@@161|)) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@161|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@39|) (LitInt 0)))))) (=> (=> (= (LitInt |idx#0@@6|) (LitInt 0)) (Upperbounded__Lexicographic__Byte__Order.__default.lt (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@161|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@39|) (LitInt 0))))) (and (=> (= (LitInt |idx#0@@6|) (|Seq#Length| (Lit |pt#0@@39|))) (and (|BoundedPivotsLib.__default.KeyToElement#canCall| (Lit |key#0@@161|)) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@39|) (- (|Seq#Length| (Lit |pt#0@@39|)) 1))) (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@161|)))))) (=> (=> (= (LitInt |idx#0@@6|) (|Seq#Length| (Lit |pt#0@@39|))) (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@39|) (- (|Seq#Length| (Lit |pt#0@@39|)) 1))) (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@161|))))) (and (=> (U_2_bool (Lit (bool_2_U (> |idx#0@@6| 0)))) (=> (< |idx#0@@6| (|Seq#Length| (Lit |pt#0@@39|))) (and (and (|BoundedPivotsLib.__default.KeyToElement#canCall| (Lit |key#0@@161|)) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@39|) (LitInt (- |idx#0@@6| 1)))) (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@161|))))) (=> (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@39|) (LitInt (- |idx#0@@6| 1)))) (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@161|)))) (and (|BoundedPivotsLib.__default.KeyToElement#canCall| (Lit |key#0@@161|)) (|Upperbounded__Lexicographic__Byte__Order.__default.lt#canCall| (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@161|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@39|) (LitInt |idx#0@@6|))))))))) (=> (=> (and (> |idx#0@@6| 0) (< |idx#0@@6| (|Seq#Length| (Lit |pt#0@@39|)))) (and (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@39|) (LitInt (- |idx#0@@6| 1)))) (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@161|)))) (Upperbounded__Lexicographic__Byte__Order.__default.lt (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@161|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@39|) (LitInt |idx#0@@6|)))))) (and (|BoundedPivotsLib.__default.BoundedKey#canCall| (Lit |pt#0@@39|) (Lit |key#0@@161|)) (=> (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.BoundedKey (Lit |pt#0@@39|) (Lit |key#0@@161|))))) (|BoundedPivotsLib.__default.Route#canCall| (Lit |pt#0@@39|) (Lit |key#0@@161|)))))))))))) (= (BoundedPivotsLib.__default.PivotInsertable (Lit |pt#0@@39|) (LitInt |idx#0@@6|) (Lit |key#0@@161|))  (and (and (and (and (and (<= (LitInt 0) (LitInt |idx#0@@6|)) (<= (LitInt |idx#0@@6|) (|Seq#Length| (Lit |pt#0@@39|)))) (=> (= (LitInt |idx#0@@6|) (LitInt 0)) (Upperbounded__Lexicographic__Byte__Order.__default.lt (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@161|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@39|) (LitInt 0)))))) (=> (= (LitInt |idx#0@@6|) (|Seq#Length| (Lit |pt#0@@39|))) (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@39|) (- (|Seq#Length| (Lit |pt#0@@39|)) 1))) (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@161|)))))) (=> (and (> |idx#0@@6| 0) (< |idx#0@@6| (|Seq#Length| (Lit |pt#0@@39|)))) (and (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@39|) (LitInt (- |idx#0@@6| 1)))) (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@161|)))) (Upperbounded__Lexicographic__Byte__Order.__default.lt (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@161|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |pt#0@@39|) (LitInt |idx#0@@6|))))))) (=> (BoundedPivotsLib.__default.BoundedKey (Lit |pt#0@@39|) (Lit |key#0@@161|)) (= (LitInt (+ (BoundedPivotsLib.__default.Route (Lit |pt#0@@39|) (Lit |key#0@@161|)) 1)) (LitInt |idx#0@@6|))))))) :qid |BoundedPivotsLibidfy.229:29| :weight 3 :skolemid |4110| :pattern ( (BoundedPivotsLib.__default.PivotInsertable (Lit |pt#0@@39|) (LitInt |idx#0@@6|) (Lit |key#0@@161|))) ))))
(assert (forall ((arg0@@654 T@U) (arg1@@339 Int) (arg2@@215 T@U) ) (! (= (type (BoundedPivotsLib.__default.InsertPivot arg0@@654 arg1@@339 arg2@@215)) (SeqType BoxType)) :qid |funType:BoundedPivotsLib.__default.InsertPivot| :pattern ( (BoundedPivotsLib.__default.InsertPivot arg0@@654 arg1@@339 arg2@@215)) )))
(assert  (=> true (forall ((|pt#0@@40| T@U) (|idx#0@@7| Int) (|key#0@@162| T@U) ) (!  (=> (and (and (= (type |pt#0@@40|) (SeqType BoxType)) (= (type |key#0@@162|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.InsertPivot#canCall| |pt#0@@40| |idx#0@@7| |key#0@@162|) (and (and ($Is |pt#0@@40| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@162| Tclass.KeyType.Key)) (and (BoundedPivotsLib.__default.WFPivots |pt#0@@40|) (BoundedPivotsLib.__default.PivotInsertable |pt#0@@40| |idx#0@@7| |key#0@@162|))))) ($Is (BoundedPivotsLib.__default.InsertPivot |pt#0@@40| |idx#0@@7| |key#0@@162|) (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) :qid |BoundedPivotsLibidfy.279:24| :skolemid |4111| :pattern ( (BoundedPivotsLib.__default.InsertPivot |pt#0@@40| |idx#0@@7| |key#0@@162|)) ))))
(assert (forall ((|pt#0@@41| T@U) (|idx#0@@8| Int) (|key#0@@163| T@U) ) (!  (=> (and (and (= (type |pt#0@@41|) (SeqType BoxType)) (= (type |key#0@@163|) (SeqType BoxType))) (and ($Is |pt#0@@41| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@163| Tclass.KeyType.Key))) (= (|BoundedPivotsLib.__default.InsertPivot#requires| |pt#0@@41| |idx#0@@8| |key#0@@163|)  (and (BoundedPivotsLib.__default.WFPivots |pt#0@@41|) (BoundedPivotsLib.__default.PivotInsertable |pt#0@@41| |idx#0@@8| |key#0@@163|)))) :qid |BoundedPivotsLibidfy.279:24| :skolemid |4112| :pattern ( (|BoundedPivotsLib.__default.InsertPivot#requires| |pt#0@@41| |idx#0@@8| |key#0@@163|)) )))
(assert (= (type StartFuel_Sequences._default.insert) LayerTypeType))
(assert  (=> true (forall ((|pt#0@@42| T@U) (|idx#0@@9| Int) (|key#0@@164| T@U) ) (!  (=> (and (and (= (type |pt#0@@42|) (SeqType BoxType)) (= (type |key#0@@164|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.InsertPivot#canCall| |pt#0@@42| |idx#0@@9| |key#0@@164|) (and (and ($Is |pt#0@@42| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@164| Tclass.KeyType.Key)) (and (BoundedPivotsLib.__default.WFPivots |pt#0@@42|) (BoundedPivotsLib.__default.PivotInsertable |pt#0@@42| |idx#0@@9| |key#0@@164|))))) (and (and (|BoundedPivotsLib.__default.KeyToElement#canCall| |key#0@@164|) (|Sequences.__default.insert#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element |pt#0@@42| ($Box (BoundedPivotsLib.__default.KeyToElement |key#0@@164|)) |idx#0@@9|)) (= (BoundedPivotsLib.__default.InsertPivot |pt#0@@42| |idx#0@@9| |key#0@@164|) (Sequences.__default.insert Tclass.Upperbounded__Lexicographic__Byte__Order.Element StartFuel_Sequences._default.insert |pt#0@@42| ($Box (BoundedPivotsLib.__default.KeyToElement |key#0@@164|)) |idx#0@@9|)))) :qid |BoundedPivotsLibidfy.279:24| :skolemid |4113| :pattern ( (BoundedPivotsLib.__default.InsertPivot |pt#0@@42| |idx#0@@9| |key#0@@164|)) ))))
(assert  (=> true (forall ((|pt#0@@43| T@U) (|idx#0@@10| Int) (|key#0@@165| T@U) ) (!  (=> (and (and (= (type |pt#0@@43|) (SeqType BoxType)) (= (type |key#0@@165|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.InsertPivot#canCall| (Lit |pt#0@@43|) (LitInt |idx#0@@10|) (Lit |key#0@@165|)) (and (and ($Is |pt#0@@43| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |key#0@@165| Tclass.KeyType.Key)) (and (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.WFPivots (Lit |pt#0@@43|))))) (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.PivotInsertable (Lit |pt#0@@43|) (LitInt |idx#0@@10|) (Lit |key#0@@165|))))))))) (and (and (|BoundedPivotsLib.__default.KeyToElement#canCall| (Lit |key#0@@165|)) (|Sequences.__default.insert#canCall| Tclass.Upperbounded__Lexicographic__Byte__Order.Element (Lit |pt#0@@43|) ($Box (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@165|)))) (LitInt |idx#0@@10|))) (= (BoundedPivotsLib.__default.InsertPivot (Lit |pt#0@@43|) (LitInt |idx#0@@10|) (Lit |key#0@@165|)) (Sequences.__default.insert Tclass.Upperbounded__Lexicographic__Byte__Order.Element StartFuel_Sequences._default.insert (Lit |pt#0@@43|) ($Box (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |key#0@@165|)))) (LitInt |idx#0@@10|))))) :qid |BoundedPivotsLibidfy.279:24| :weight 3 :skolemid |4114| :pattern ( (BoundedPivotsLib.__default.InsertPivot (Lit |pt#0@@43|) (LitInt |idx#0@@10|) (Lit |key#0@@165|))) ))))
(assert (forall (($ly@@646 T@U) (|pt#0@@44| T@U) (|pivot#0@@11| T@U) ) (!  (=> (and (and (= (type $ly@@646) LayerTypeType) (= (type |pt#0@@44|) (SeqType BoxType))) (= (type |pivot#0@@11|) (SeqType BoxType))) (= (BoundedPivotsLib.__default.CutoffForLeft ($LS $ly@@646) |pt#0@@44| |pivot#0@@11|) (BoundedPivotsLib.__default.CutoffForLeft $ly@@646 |pt#0@@44| |pivot#0@@11|))) :qid |BoundedPivotsLibidfy.349:22| :skolemid |4115| :pattern ( (BoundedPivotsLib.__default.CutoffForLeft ($LS $ly@@646) |pt#0@@44| |pivot#0@@11|)) )))
(assert (forall (($ly@@647 T@U) (|pt#0@@45| T@U) (|pivot#0@@12| T@U) ) (!  (=> (and (and (= (type $ly@@647) LayerTypeType) (= (type |pt#0@@45|) (SeqType BoxType))) (= (type |pivot#0@@12|) (SeqType BoxType))) (= (BoundedPivotsLib.__default.CutoffForLeft $ly@@647 |pt#0@@45| |pivot#0@@12|) (BoundedPivotsLib.__default.CutoffForLeft $LZ |pt#0@@45| |pivot#0@@12|))) :qid |BoundedPivotsLibidfy.349:22| :skolemid |4116| :pattern ( (BoundedPivotsLib.__default.CutoffForLeft (AsFuelBottom $ly@@647) |pt#0@@45| |pivot#0@@12|)) )))
(assert  (=> true (forall (($ly@@648 T@U) (|pt#0@@46| T@U) (|pivot#0@@13| T@U) ) (!  (=> (and (and (and (= (type $ly@@648) LayerTypeType) (= (type |pt#0@@46|) (SeqType BoxType))) (= (type |pivot#0@@13|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.CutoffForLeft#canCall| |pt#0@@46| |pivot#0@@13|) (and (and ($Is |pt#0@@46| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |pivot#0@@13| Tclass.KeyType.Key)) (and (BoundedPivotsLib.__default.WFPivots |pt#0@@46|) (BoundedPivotsLib.__default.ValidLeftCutOffKey |pt#0@@46| |pivot#0@@13|))))) (and (and (and (<= (LitInt 0) (BoundedPivotsLib.__default.CutoffForLeft $ly@@648 |pt#0@@46| |pivot#0@@13|)) (< (BoundedPivotsLib.__default.CutoffForLeft $ly@@648 |pt#0@@46| |pivot#0@@13|) (BoundedPivotsLib.__default.NumBuckets |pt#0@@46|))) (forall ((|i#0@@130| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@130|) (<= |i#0@@130| (BoundedPivotsLib.__default.CutoffForLeft $ly@@648 |pt#0@@46| |pivot#0@@13|))) (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@46| |i#0@@130|)) (BoundedPivotsLib.__default.KeyToElement |pivot#0@@13|))) :qid |BoundedPivotsLibidfy.353:18| :skolemid |4117| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@46| |i#0@@130|))) ))) (forall ((|i#1@@55| Int) ) (!  (=> (and (< (BoundedPivotsLib.__default.CutoffForLeft $ly@@648 |pt#0@@46| |pivot#0@@13|) |i#1@@55|) (< |i#1@@55| (|Seq#Length| |pt#0@@46|))) (Upperbounded__Lexicographic__Byte__Order.__default.lte (BoundedPivotsLib.__default.KeyToElement |pivot#0@@13|) ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@46| |i#1@@55|)))) :qid |BoundedPivotsLibidfy.354:18| :skolemid |4118| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@46| |i#1@@55|))) )))) :qid |BoundedPivotsLibidfy.349:22| :skolemid |4119| :pattern ( (BoundedPivotsLib.__default.CutoffForLeft $ly@@648 |pt#0@@46| |pivot#0@@13|)) ))))
(assert (forall (($ly@@649 T@U) (|pt#0@@47| T@U) (|pivot#0@@14| T@U) ) (!  (=> (and (and (and (= (type $ly@@649) LayerTypeType) (= (type |pt#0@@47|) (SeqType BoxType))) (= (type |pivot#0@@14|) (SeqType BoxType))) (and ($Is |pt#0@@47| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |pivot#0@@14| Tclass.KeyType.Key))) (= (|BoundedPivotsLib.__default.CutoffForLeft#requires| $ly@@649 |pt#0@@47| |pivot#0@@14|)  (and (BoundedPivotsLib.__default.WFPivots |pt#0@@47|) (BoundedPivotsLib.__default.ValidLeftCutOffKey |pt#0@@47| |pivot#0@@14|)))) :qid |BoundedPivotsLibidfy.349:22| :skolemid |4120| :pattern ( (|BoundedPivotsLib.__default.CutoffForLeft#requires| $ly@@649 |pt#0@@47| |pivot#0@@14|)) )))
(assert  (=> true (forall (($ly@@650 T@U) (|pt#0@@48| T@U) (|pivot#0@@15| T@U) ) (!  (=> (and (and (and (= (type $ly@@650) LayerTypeType) (= (type |pt#0@@48|) (SeqType BoxType))) (= (type |pivot#0@@15|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.CutoffForLeft#canCall| |pt#0@@48| |pivot#0@@15|) (and (and ($Is |pt#0@@48| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |pivot#0@@15| Tclass.KeyType.Key)) (and (BoundedPivotsLib.__default.WFPivots |pt#0@@48|) (BoundedPivotsLib.__default.ValidLeftCutOffKey |pt#0@@48| |pivot#0@@15|))))) (and (and (|BoundedPivotsLib.__default.KeyToElement#canCall| |pivot#0@@15|) (|Upperbounded__Lexicographic__Byte__Order.__default.LargestLt#canCall| |pt#0@@48| (BoundedPivotsLib.__default.KeyToElement |pivot#0@@15|))) (= (BoundedPivotsLib.__default.CutoffForLeft ($LS $ly@@650) |pt#0@@48| |pivot#0@@15|) (Upperbounded__Lexicographic__Byte__Order.__default.LargestLt ($LS $LZ) |pt#0@@48| (BoundedPivotsLib.__default.KeyToElement |pivot#0@@15|))))) :qid |BoundedPivotsLibidfy.349:22| :skolemid |4121| :pattern ( (BoundedPivotsLib.__default.CutoffForLeft ($LS $ly@@650) |pt#0@@48| |pivot#0@@15|)) ))))
(assert  (=> true (forall (($ly@@651 T@U) (|pt#0@@49| T@U) (|pivot#0@@16| T@U) ) (!  (=> (and (and (and (= (type $ly@@651) LayerTypeType) (= (type |pt#0@@49|) (SeqType BoxType))) (= (type |pivot#0@@16|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.CutoffForLeft#canCall| (Lit |pt#0@@49|) (Lit |pivot#0@@16|)) (and (and ($Is |pt#0@@49| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |pivot#0@@16| Tclass.KeyType.Key)) (and (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.WFPivots (Lit |pt#0@@49|))))) (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.ValidLeftCutOffKey (Lit |pt#0@@49|) (Lit |pivot#0@@16|))))))))) (and (and (|BoundedPivotsLib.__default.KeyToElement#canCall| (Lit |pivot#0@@16|)) (|Upperbounded__Lexicographic__Byte__Order.__default.LargestLt#canCall| (Lit |pt#0@@49|) (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |pivot#0@@16|))))) (= (BoundedPivotsLib.__default.CutoffForLeft ($LS $ly@@651) (Lit |pt#0@@49|) (Lit |pivot#0@@16|)) (LitInt (Upperbounded__Lexicographic__Byte__Order.__default.LargestLt ($LS $LZ) (Lit |pt#0@@49|) (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |pivot#0@@16|)))))))) :qid |BoundedPivotsLibidfy.349:22| :weight 3 :skolemid |4122| :pattern ( (BoundedPivotsLib.__default.CutoffForLeft ($LS $ly@@651) (Lit |pt#0@@49|) (Lit |pivot#0@@16|))) ))))
(assert (forall ((arg0@@655 T@U) (arg1@@340 T@U) ) (! (= (type (BoundedPivotsLib.__default.SplitLeft arg0@@655 arg1@@340)) (SeqType BoxType)) :qid |funType:BoundedPivotsLib.__default.SplitLeft| :pattern ( (BoundedPivotsLib.__default.SplitLeft arg0@@655 arg1@@340)) )))
(assert  (=> true (forall ((|pt#0@@50| T@U) (|pivot#0@@17| T@U) ) (!  (=> (and (and (= (type |pt#0@@50|) (SeqType BoxType)) (= (type |pivot#0@@17|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.SplitLeft#canCall| |pt#0@@50| |pivot#0@@17|) (and (and ($Is |pt#0@@50| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |pivot#0@@17| Tclass.KeyType.Key)) (and (BoundedPivotsLib.__default.WFPivots |pt#0@@50|) (BoundedPivotsLib.__default.ValidLeftCutOffKey |pt#0@@50| |pivot#0@@17|))))) (and (BoundedPivotsLib.__default.WFPivots (BoundedPivotsLib.__default.SplitLeft |pt#0@@50| |pivot#0@@17|)) ($Is (BoundedPivotsLib.__default.SplitLeft |pt#0@@50| |pivot#0@@17|) (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) :qid |BoundedPivotsLibidfy.370:22| :skolemid |4123| :pattern ( (BoundedPivotsLib.__default.SplitLeft |pt#0@@50| |pivot#0@@17|)) ))))
(assert (forall ((|pt#0@@51| T@U) (|pivot#0@@18| T@U) ) (!  (=> (and (and (= (type |pt#0@@51|) (SeqType BoxType)) (= (type |pivot#0@@18|) (SeqType BoxType))) (and ($Is |pt#0@@51| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |pivot#0@@18| Tclass.KeyType.Key))) (= (|BoundedPivotsLib.__default.SplitLeft#requires| |pt#0@@51| |pivot#0@@18|)  (and (BoundedPivotsLib.__default.WFPivots |pt#0@@51|) (BoundedPivotsLib.__default.ValidLeftCutOffKey |pt#0@@51| |pivot#0@@18|)))) :qid |BoundedPivotsLibidfy.370:22| :skolemid |4124| :pattern ( (|BoundedPivotsLib.__default.SplitLeft#requires| |pt#0@@51| |pivot#0@@18|)) )))
(assert (= (type StartFuel_BoundedPivotsLib._default.CutoffForLeft) LayerTypeType))
(assert  (=> true (forall ((|pt#0@@52| T@U) (|pivot#0@@19| T@U) ) (!  (=> (and (and (= (type |pt#0@@52|) (SeqType BoxType)) (= (type |pivot#0@@19|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.SplitLeft#canCall| |pt#0@@52| |pivot#0@@19|) (and (and ($Is |pt#0@@52| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |pivot#0@@19| Tclass.KeyType.Key)) (and (BoundedPivotsLib.__default.WFPivots |pt#0@@52|) (BoundedPivotsLib.__default.ValidLeftCutOffKey |pt#0@@52| |pivot#0@@19|))))) (and (and (|BoundedPivotsLib.__default.CutoffForLeft#canCall| |pt#0@@52| |pivot#0@@19|) (|BoundedPivotsLib.__default.KeyToElement#canCall| |pivot#0@@19|)) (= (BoundedPivotsLib.__default.SplitLeft |pt#0@@52| |pivot#0@@19|) (let ((|ret#0| (|Seq#Append| (|Seq#Take| |pt#0@@52| (+ (BoundedPivotsLib.__default.CutoffForLeft StartFuel_BoundedPivotsLib._default.CutoffForLeft |pt#0@@52| |pivot#0@@19|) 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BoundedPivotsLib.__default.KeyToElement |pivot#0@@19|)))))) |ret#0|)))) :qid |BoundedPivotsLibidfy.370:22| :skolemid |4125| :pattern ( (BoundedPivotsLib.__default.SplitLeft |pt#0@@52| |pivot#0@@19|)) ))))
(assert  (=> true (forall ((|pt#0@@53| T@U) (|pivot#0@@20| T@U) ) (!  (=> (and (and (= (type |pt#0@@53|) (SeqType BoxType)) (= (type |pivot#0@@20|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.SplitLeft#canCall| (Lit |pt#0@@53|) (Lit |pivot#0@@20|)) (and (and ($Is |pt#0@@53| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |pivot#0@@20| Tclass.KeyType.Key)) (and (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.WFPivots (Lit |pt#0@@53|))))) (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.ValidLeftCutOffKey (Lit |pt#0@@53|) (Lit |pivot#0@@20|))))))))) (and (and (|BoundedPivotsLib.__default.CutoffForLeft#canCall| (Lit |pt#0@@53|) (Lit |pivot#0@@20|)) (|BoundedPivotsLib.__default.KeyToElement#canCall| (Lit |pivot#0@@20|))) (= (BoundedPivotsLib.__default.SplitLeft (Lit |pt#0@@53|) (Lit |pivot#0@@20|)) (let ((|ret#1| (|Seq#Append| (|Seq#Take| (Lit |pt#0@@53|) (+ (BoundedPivotsLib.__default.CutoffForLeft StartFuel_BoundedPivotsLib._default.CutoffForLeft (Lit |pt#0@@53|) (Lit |pivot#0@@20|)) 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |pivot#0@@20|)))))))) |ret#1|)))) :qid |BoundedPivotsLibidfy.370:22| :weight 3 :skolemid |4126| :pattern ( (BoundedPivotsLib.__default.SplitLeft (Lit |pt#0@@53|) (Lit |pivot#0@@20|))) ))))
(assert (forall (($ly@@652 T@U) (|pt#0@@54| T@U) (|pivot#0@@21| T@U) ) (!  (=> (and (and (= (type $ly@@652) LayerTypeType) (= (type |pt#0@@54|) (SeqType BoxType))) (= (type |pivot#0@@21|) (SeqType BoxType))) (= (BoundedPivotsLib.__default.CutoffForRight ($LS $ly@@652) |pt#0@@54| |pivot#0@@21|) (BoundedPivotsLib.__default.CutoffForRight $ly@@652 |pt#0@@54| |pivot#0@@21|))) :qid |BoundedPivotsLibidfy.391:22| :skolemid |4127| :pattern ( (BoundedPivotsLib.__default.CutoffForRight ($LS $ly@@652) |pt#0@@54| |pivot#0@@21|)) )))
(assert (forall (($ly@@653 T@U) (|pt#0@@55| T@U) (|pivot#0@@22| T@U) ) (!  (=> (and (and (= (type $ly@@653) LayerTypeType) (= (type |pt#0@@55|) (SeqType BoxType))) (= (type |pivot#0@@22|) (SeqType BoxType))) (= (BoundedPivotsLib.__default.CutoffForRight $ly@@653 |pt#0@@55| |pivot#0@@22|) (BoundedPivotsLib.__default.CutoffForRight $LZ |pt#0@@55| |pivot#0@@22|))) :qid |BoundedPivotsLibidfy.391:22| :skolemid |4128| :pattern ( (BoundedPivotsLib.__default.CutoffForRight (AsFuelBottom $ly@@653) |pt#0@@55| |pivot#0@@22|)) )))
(assert  (=> true (forall (($ly@@654 T@U) (|pt#0@@56| T@U) (|pivot#0@@23| T@U) ) (!  (=> (and (and (and (= (type $ly@@654) LayerTypeType) (= (type |pt#0@@56|) (SeqType BoxType))) (= (type |pivot#0@@23|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.CutoffForRight#canCall| |pt#0@@56| |pivot#0@@23|) (and (and ($Is |pt#0@@56| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |pivot#0@@23| Tclass.KeyType.Key)) (and (BoundedPivotsLib.__default.WFPivots |pt#0@@56|) (BoundedPivotsLib.__default.BoundedKey |pt#0@@56| |pivot#0@@23|))))) (and (and (and (<= (LitInt 0) (BoundedPivotsLib.__default.CutoffForRight $ly@@654 |pt#0@@56| |pivot#0@@23|)) (< (BoundedPivotsLib.__default.CutoffForRight $ly@@654 |pt#0@@56| |pivot#0@@23|) (BoundedPivotsLib.__default.NumBuckets |pt#0@@56|))) (forall ((|i#0@@131| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@131|) (<= |i#0@@131| (BoundedPivotsLib.__default.CutoffForRight $ly@@654 |pt#0@@56| |pivot#0@@23|))) (Upperbounded__Lexicographic__Byte__Order.__default.lte ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@56| |i#0@@131|)) (BoundedPivotsLib.__default.KeyToElement |pivot#0@@23|))) :qid |BoundedPivotsLibidfy.395:18| :skolemid |4129| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@56| |i#0@@131|))) ))) (forall ((|i#1@@56| Int) ) (!  (=> (and (< (BoundedPivotsLib.__default.CutoffForRight $ly@@654 |pt#0@@56| |pivot#0@@23|) |i#1@@56|) (< |i#1@@56| (|Seq#Length| |pt#0@@56|))) (Upperbounded__Lexicographic__Byte__Order.__default.lt (BoundedPivotsLib.__default.KeyToElement |pivot#0@@23|) ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@56| |i#1@@56|)))) :qid |BoundedPivotsLibidfy.396:18| :skolemid |4130| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |pt#0@@56| |i#1@@56|))) )))) :qid |BoundedPivotsLibidfy.391:22| :skolemid |4131| :pattern ( (BoundedPivotsLib.__default.CutoffForRight $ly@@654 |pt#0@@56| |pivot#0@@23|)) ))))
(assert (forall (($ly@@655 T@U) (|pt#0@@57| T@U) (|pivot#0@@24| T@U) ) (!  (=> (and (and (and (= (type $ly@@655) LayerTypeType) (= (type |pt#0@@57|) (SeqType BoxType))) (= (type |pivot#0@@24|) (SeqType BoxType))) (and ($Is |pt#0@@57| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |pivot#0@@24| Tclass.KeyType.Key))) (= (|BoundedPivotsLib.__default.CutoffForRight#requires| $ly@@655 |pt#0@@57| |pivot#0@@24|)  (and (BoundedPivotsLib.__default.WFPivots |pt#0@@57|) (BoundedPivotsLib.__default.BoundedKey |pt#0@@57| |pivot#0@@24|)))) :qid |BoundedPivotsLibidfy.391:22| :skolemid |4132| :pattern ( (|BoundedPivotsLib.__default.CutoffForRight#requires| $ly@@655 |pt#0@@57| |pivot#0@@24|)) )))
(assert  (=> true (forall (($ly@@656 T@U) (|pt#0@@58| T@U) (|pivot#0@@25| T@U) ) (!  (=> (and (and (and (= (type $ly@@656) LayerTypeType) (= (type |pt#0@@58|) (SeqType BoxType))) (= (type |pivot#0@@25|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.CutoffForRight#canCall| |pt#0@@58| |pivot#0@@25|) (and (and ($Is |pt#0@@58| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |pivot#0@@25| Tclass.KeyType.Key)) (and (BoundedPivotsLib.__default.WFPivots |pt#0@@58|) (BoundedPivotsLib.__default.BoundedKey |pt#0@@58| |pivot#0@@25|))))) (and (|BoundedPivotsLib.__default.Route#canCall| |pt#0@@58| |pivot#0@@25|) (= (BoundedPivotsLib.__default.CutoffForRight ($LS $ly@@656) |pt#0@@58| |pivot#0@@25|) (BoundedPivotsLib.__default.Route |pt#0@@58| |pivot#0@@25|)))) :qid |BoundedPivotsLibidfy.391:22| :skolemid |4133| :pattern ( (BoundedPivotsLib.__default.CutoffForRight ($LS $ly@@656) |pt#0@@58| |pivot#0@@25|)) ))))
(assert  (=> true (forall (($ly@@657 T@U) (|pt#0@@59| T@U) (|pivot#0@@26| T@U) ) (!  (=> (and (and (and (= (type $ly@@657) LayerTypeType) (= (type |pt#0@@59|) (SeqType BoxType))) (= (type |pivot#0@@26|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.CutoffForRight#canCall| (Lit |pt#0@@59|) (Lit |pivot#0@@26|)) (and (and ($Is |pt#0@@59| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |pivot#0@@26| Tclass.KeyType.Key)) (and (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.WFPivots (Lit |pt#0@@59|))))) (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.BoundedKey (Lit |pt#0@@59|) (Lit |pivot#0@@26|))))))))) (and (|BoundedPivotsLib.__default.Route#canCall| (Lit |pt#0@@59|) (Lit |pivot#0@@26|)) (= (BoundedPivotsLib.__default.CutoffForRight ($LS $ly@@657) (Lit |pt#0@@59|) (Lit |pivot#0@@26|)) (LitInt (BoundedPivotsLib.__default.Route (Lit |pt#0@@59|) (Lit |pivot#0@@26|)))))) :qid |BoundedPivotsLibidfy.391:22| :weight 3 :skolemid |4134| :pattern ( (BoundedPivotsLib.__default.CutoffForRight ($LS $ly@@657) (Lit |pt#0@@59|) (Lit |pivot#0@@26|))) ))))
(assert (forall ((arg0@@656 T@U) (arg1@@341 T@U) ) (! (= (type (BoundedPivotsLib.__default.SplitRight arg0@@656 arg1@@341)) (SeqType BoxType)) :qid |funType:BoundedPivotsLib.__default.SplitRight| :pattern ( (BoundedPivotsLib.__default.SplitRight arg0@@656 arg1@@341)) )))
(assert  (=> true (forall ((|pt#0@@60| T@U) (|pivot#0@@27| T@U) ) (!  (=> (and (and (= (type |pt#0@@60|) (SeqType BoxType)) (= (type |pivot#0@@27|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.SplitRight#canCall| |pt#0@@60| |pivot#0@@27|) (and (and ($Is |pt#0@@60| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |pivot#0@@27| Tclass.KeyType.Key)) (and (BoundedPivotsLib.__default.WFPivots |pt#0@@60|) (BoundedPivotsLib.__default.BoundedKey |pt#0@@60| |pivot#0@@27|))))) (and (BoundedPivotsLib.__default.WFPivots (BoundedPivotsLib.__default.SplitRight |pt#0@@60| |pivot#0@@27|)) ($Is (BoundedPivotsLib.__default.SplitRight |pt#0@@60| |pivot#0@@27|) (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) :qid |BoundedPivotsLibidfy.412:23| :skolemid |4135| :pattern ( (BoundedPivotsLib.__default.SplitRight |pt#0@@60| |pivot#0@@27|)) ))))
(assert (forall ((|pt#0@@61| T@U) (|pivot#0@@28| T@U) ) (!  (=> (and (and (= (type |pt#0@@61|) (SeqType BoxType)) (= (type |pivot#0@@28|) (SeqType BoxType))) (and ($Is |pt#0@@61| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |pivot#0@@28| Tclass.KeyType.Key))) (= (|BoundedPivotsLib.__default.SplitRight#requires| |pt#0@@61| |pivot#0@@28|)  (and (BoundedPivotsLib.__default.WFPivots |pt#0@@61|) (BoundedPivotsLib.__default.BoundedKey |pt#0@@61| |pivot#0@@28|)))) :qid |BoundedPivotsLibidfy.412:23| :skolemid |4136| :pattern ( (|BoundedPivotsLib.__default.SplitRight#requires| |pt#0@@61| |pivot#0@@28|)) )))
(assert (= (type StartFuel_BoundedPivotsLib._default.CutoffForRight) LayerTypeType))
(assert  (=> true (forall ((|pt#0@@62| T@U) (|pivot#0@@29| T@U) ) (!  (=> (and (and (= (type |pt#0@@62|) (SeqType BoxType)) (= (type |pivot#0@@29|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.SplitRight#canCall| |pt#0@@62| |pivot#0@@29|) (and (and ($Is |pt#0@@62| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |pivot#0@@29| Tclass.KeyType.Key)) (and (BoundedPivotsLib.__default.WFPivots |pt#0@@62|) (BoundedPivotsLib.__default.BoundedKey |pt#0@@62| |pivot#0@@29|))))) (and (and (|BoundedPivotsLib.__default.KeyToElement#canCall| |pivot#0@@29|) (|BoundedPivotsLib.__default.CutoffForRight#canCall| |pt#0@@62| |pivot#0@@29|)) (= (BoundedPivotsLib.__default.SplitRight |pt#0@@62| |pivot#0@@29|) (let ((|ret#0@@0| (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BoundedPivotsLib.__default.KeyToElement |pivot#0@@29|))) (|Seq#Drop| |pt#0@@62| (+ (BoundedPivotsLib.__default.CutoffForRight StartFuel_BoundedPivotsLib._default.CutoffForRight |pt#0@@62| |pivot#0@@29|) 1))))) |ret#0@@0|)))) :qid |BoundedPivotsLibidfy.412:23| :skolemid |4137| :pattern ( (BoundedPivotsLib.__default.SplitRight |pt#0@@62| |pivot#0@@29|)) ))))
(assert  (=> true (forall ((|pt#0@@63| T@U) (|pivot#0@@30| T@U) ) (!  (=> (and (and (= (type |pt#0@@63|) (SeqType BoxType)) (= (type |pivot#0@@30|) (SeqType BoxType))) (or (|BoundedPivotsLib.__default.SplitRight#canCall| (Lit |pt#0@@63|) (Lit |pivot#0@@30|)) (and (and ($Is |pt#0@@63| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) ($Is |pivot#0@@30| Tclass.KeyType.Key)) (and (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.WFPivots (Lit |pt#0@@63|))))) (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.BoundedKey (Lit |pt#0@@63|) (Lit |pivot#0@@30|))))))))) (and (and (|BoundedPivotsLib.__default.KeyToElement#canCall| (Lit |pivot#0@@30|)) (|BoundedPivotsLib.__default.CutoffForRight#canCall| (Lit |pt#0@@63|) (Lit |pivot#0@@30|))) (= (BoundedPivotsLib.__default.SplitRight (Lit |pt#0@@63|) (Lit |pivot#0@@30|)) (let ((|ret#1@@0| (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (BoundedPivotsLib.__default.KeyToElement (Lit |pivot#0@@30|))))) (|Seq#Drop| (Lit |pt#0@@63|) (+ (BoundedPivotsLib.__default.CutoffForRight StartFuel_BoundedPivotsLib._default.CutoffForRight (Lit |pt#0@@63|) (Lit |pivot#0@@30|)) 1))))) |ret#1@@0|)))) :qid |BoundedPivotsLibidfy.412:23| :weight 3 :skolemid |4138| :pattern ( (BoundedPivotsLib.__default.SplitRight (Lit |pt#0@@63|) (Lit |pivot#0@@30|))) ))))
(assert (forall ((arg0@@657 T@U) (arg1@@342 Int) ) (! (= (type (BoundedPivotsLib.__default.PivotTableBucketKeySet arg0@@657 arg1@@342)) (MapType0Type BoxType boolType)) :qid |funType:BoundedPivotsLib.__default.PivotTableBucketKeySet| :pattern ( (BoundedPivotsLib.__default.PivotTableBucketKeySet arg0@@657 arg1@@342)) )))
(assert  (=> true (forall ((|pt#0@@64| T@U) (|i#0@@132| Int) ) (!  (=> (and (= (type |pt#0@@64|) (SeqType BoxType)) (or (|BoundedPivotsLib.__default.PivotTableBucketKeySet#canCall| |pt#0@@64| |i#0@@132|) (and ($Is |pt#0@@64| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (and (BoundedPivotsLib.__default.WFPivots |pt#0@@64|) (and (<= (LitInt 0) |i#0@@132|) (< |i#0@@132| (BoundedPivotsLib.__default.NumBuckets |pt#0@@64|))))))) ($Is (BoundedPivotsLib.__default.PivotTableBucketKeySet |pt#0@@64| |i#0@@132|) (TISet Tclass.KeyType.Key))) :qid |BoundedPivotsLibidfy.433:35| :skolemid |4139| :pattern ( (BoundedPivotsLib.__default.PivotTableBucketKeySet |pt#0@@64| |i#0@@132|)) ))))
(assert (forall ((|pt#0@@65| T@U) (|i#0@@133| Int) ) (!  (=> (and (= (type |pt#0@@65|) (SeqType BoxType)) ($Is |pt#0@@65| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (= (|BoundedPivotsLib.__default.PivotTableBucketKeySet#requires| |pt#0@@65| |i#0@@133|)  (and (BoundedPivotsLib.__default.WFPivots |pt#0@@65|) (and (<= (LitInt 0) |i#0@@133|) (< |i#0@@133| (BoundedPivotsLib.__default.NumBuckets |pt#0@@65|)))))) :qid |BoundedPivotsLibidfy.433:35| :skolemid |4140| :pattern ( (|BoundedPivotsLib.__default.PivotTableBucketKeySet#requires| |pt#0@@65| |i#0@@133|)) )))
(assert (forall ((arg0@@658 T@U) (arg1@@343 T@U) (arg2@@216 T@U) (arg3@@154 Int) ) (! (= (type (|lambda#238| arg0@@658 arg1@@343 arg2@@216 arg3@@154)) (MapType0Type BoxType boolType)) :qid |funType:lambda#238| :pattern ( (|lambda#238| arg0@@658 arg1@@343 arg2@@216 arg3@@154)) )))
(assert  (=> true (forall ((|pt#0@@66| T@U) (|i#0@@134| Int) ) (!  (=> (and (= (type |pt#0@@66|) (SeqType BoxType)) (or (|BoundedPivotsLib.__default.PivotTableBucketKeySet#canCall| |pt#0@@66| |i#0@@134|) (and ($Is |pt#0@@66| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (and (BoundedPivotsLib.__default.WFPivots |pt#0@@66|) (and (<= (LitInt 0) |i#0@@134|) (< |i#0@@134| (BoundedPivotsLib.__default.NumBuckets |pt#0@@66|))))))) (and (forall ((|key#0@@166| T@U) ) (!  (=> (and (= (type |key#0@@166|) (SeqType BoxType)) ($Is |key#0@@166| Tclass.KeyType.Key)) (and (|BoundedPivotsLib.__default.BoundedKey#canCall| |pt#0@@66| |key#0@@166|) (=> (BoundedPivotsLib.__default.BoundedKey |pt#0@@66| |key#0@@166|) (|BoundedPivotsLib.__default.Route#canCall| |pt#0@@66| |key#0@@166|)))) :qid |BoundedPivotsLibidfy.437:10| :skolemid |4141| :pattern ( (BoundedPivotsLib.__default.Route |pt#0@@66| |key#0@@166|)) :pattern ( (BoundedPivotsLib.__default.BoundedKey |pt#0@@66| |key#0@@166|)) )) (= (BoundedPivotsLib.__default.PivotTableBucketKeySet |pt#0@@66| |i#0@@134|) (|lambda#238| Tclass.KeyType.Key |pt#0@@66| |pt#0@@66| |i#0@@134|)))) :qid |BoundedPivotsLibidfy.433:35| :skolemid |4142| :pattern ( (BoundedPivotsLib.__default.PivotTableBucketKeySet |pt#0@@66| |i#0@@134|)) ))))
(assert  (=> true (forall ((|pt#0@@67| T@U) (|i#0@@135| Int) ) (!  (=> (and (= (type |pt#0@@67|) (SeqType BoxType)) (or (|BoundedPivotsLib.__default.PivotTableBucketKeySet#canCall| (Lit |pt#0@@67|) (LitInt |i#0@@135|)) (and ($Is |pt#0@@67| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)) (and (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.WFPivots (Lit |pt#0@@67|))))) (and (<= (LitInt 0) (LitInt |i#0@@135|)) (< |i#0@@135| (BoundedPivotsLib.__default.NumBuckets (Lit |pt#0@@67|)))))))) (and (forall ((|key#1@@11| T@U) ) (!  (=> (and (= (type |key#1@@11|) (SeqType BoxType)) ($Is |key#1@@11| Tclass.KeyType.Key)) (and (|BoundedPivotsLib.__default.BoundedKey#canCall| (Lit |pt#0@@67|) |key#1@@11|) (=> (BoundedPivotsLib.__default.BoundedKey (Lit |pt#0@@67|) |key#1@@11|) (|BoundedPivotsLib.__default.Route#canCall| (Lit |pt#0@@67|) |key#1@@11|)))) :qid |BoundedPivotsLibidfy.437:10| :skolemid |4143| :pattern ( (BoundedPivotsLib.__default.Route |pt#0@@67| |key#1@@11|)) :pattern ( (BoundedPivotsLib.__default.BoundedKey |pt#0@@67| |key#1@@11|)) )) (= (BoundedPivotsLib.__default.PivotTableBucketKeySet (Lit |pt#0@@67|) (LitInt |i#0@@135|)) (|lambda#238| Tclass.KeyType.Key (Lit |pt#0@@67|) (Lit |pt#0@@67|) (LitInt |i#0@@135|))))) :qid |BoundedPivotsLibidfy.433:35| :weight 3 :skolemid |4144| :pattern ( (BoundedPivotsLib.__default.PivotTableBucketKeySet (Lit |pt#0@@67|) (LitInt |i#0@@135|))) ))))
(assert (= (type Tclass.ValueType.Value) TyType))
(assert (= (Tag Tclass.ValueType.Value) Tagclass.ValueType.Value))
(assert (= (TagFamily Tclass.ValueType.Value) tytagFamily$Value))
(assert (forall ((bx@@179 T@U) ) (!  (=> (and (= (type bx@@179) BoxType) ($IsBox bx@@179 Tclass.ValueType.Value)) (and (= ($Box ($Unbox (SeqType BoxType) bx@@179)) bx@@179) ($Is ($Unbox (SeqType BoxType) bx@@179) Tclass.ValueType.Value))) :qid |unknown.0:0| :skolemid |4145| :pattern ( ($IsBox bx@@179 Tclass.ValueType.Value)) )))
(assert (forall ((|s#0@@265| T@U) ) (!  (=> (= (type |s#0@@265|) (SeqType BoxType)) (= ($Is |s#0@@265| Tclass.ValueType.Value)  (and ($Is |s#0@@265| (TSeq Tclass.NativeTypes.byte)) (<= (|Seq#Length| |s#0@@265|) (LitInt 1024))))) :qid |unknown.0:0| :skolemid |4146| :pattern ( ($Is |s#0@@265| Tclass.ValueType.Value)) )))
(assert (forall ((|s#0@@266| T@U) ($h@@108 T@U) ) (!  (=> (and (= (type |s#0@@266|) (SeqType BoxType)) (= (type $h@@108) (MapType0Type refType MapType1Type))) (= ($IsAlloc |s#0@@266| Tclass.ValueType.Value $h@@108) ($IsAlloc |s#0@@266| (TSeq Tclass.NativeTypes.byte) $h@@108))) :qid |unknown.0:0| :skolemid |4147| :pattern ( ($IsAlloc |s#0@@266| Tclass.ValueType.Value $h@@108)) )))
(assert (= (type Tclass.ValueType.__default) TyType))
(assert (= (Tag Tclass.ValueType.__default) Tagclass.ValueType.__default))
(assert (= (TagFamily Tclass.ValueType.__default) tytagFamily$_default))
(assert (forall (($o@@52 T@U) ) (!  (=> (= (type $o@@52) refType) (= ($Is $o@@52 Tclass.ValueType.__default)  (or (= $o@@52 null) (= (dtype $o@@52) Tclass.ValueType.__default)))) :qid |unknown.0:0| :skolemid |4148| :pattern ( ($Is $o@@52 Tclass.ValueType.__default)) )))
(assert (forall (($o@@53 T@U) ($h@@109 T@U) ) (!  (=> (and (= (type $o@@53) refType) (= (type $h@@109) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@53 Tclass.ValueType.__default $h@@109)  (or (= $o@@53 null) (U_2_bool (MapType1Select (MapType0Select $h@@109 $o@@53) alloc))))) :qid |unknown.0:0| :skolemid |4149| :pattern ( ($IsAlloc $o@@53 Tclass.ValueType.__default $h@@109)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) ValueType.__default.MaxLen) (< ValueType.__default.MaxLen 18446744073709551616)))))
(assert (= |ValueType.__default.MaxLen#requires| true))
(assert  (=> true (=> true (= ValueType.__default.MaxLen (LitInt 1024)))))
(assert  (=> true (=> true (= ValueType.__default.MaxLen (LitInt 1024)))))
(assert (= (type ValueType.__default.DefaultValue) (SeqType BoxType)))
(assert  (=> true (=> true ($Is ValueType.__default.DefaultValue Tclass.ValueType.Value))))
(assert (= |ValueType.__default.DefaultValue#requires| true))
(assert  (=> true (=> true (= ValueType.__default.DefaultValue (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (=> true (= ValueType.__default.DefaultValue (Lit (|Seq#Empty| BoxType))))))
(assert  (=> true (forall ((|v#0@@24| T@U) ) (!  (=> (and (= (type |v#0@@24|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| |v#0@@24|) ($Is |v#0@@24| Tclass.ValueType.Value))) (<= (LitInt 0) (ValueType.__default.Len |v#0@@24|))) :qid |KeyTypesdfy.20:15| :skolemid |4150| :pattern ( (ValueType.__default.Len |v#0@@24|)) ))))
(assert (forall ((|v#0@@25| T@U) ) (!  (=> (and (= (type |v#0@@25|) (SeqType BoxType)) ($Is |v#0@@25| Tclass.ValueType.Value)) (= (|ValueType.__default.Len#requires| |v#0@@25|) true)) :qid |KeyTypesdfy.20:15| :skolemid |4151| :pattern ( (|ValueType.__default.Len#requires| |v#0@@25|)) )))
(assert  (=> true (forall ((|v#0@@26| T@U) ) (!  (=> (and (= (type |v#0@@26|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| |v#0@@26|) ($Is |v#0@@26| Tclass.ValueType.Value))) (= (ValueType.__default.Len |v#0@@26|) (|Seq#Length| |v#0@@26|))) :qid |KeyTypesdfy.20:15| :skolemid |4152| :pattern ( (ValueType.__default.Len |v#0@@26|)) ))))
(assert  (=> true (forall ((|v#0@@27| T@U) ) (!  (=> (and (= (type |v#0@@27|) (SeqType BoxType)) (or (|ValueType.__default.Len#canCall| (Lit |v#0@@27|)) ($Is |v#0@@27| Tclass.ValueType.Value))) (= (ValueType.__default.Len (Lit |v#0@@27|)) (|Seq#Length| (Lit |v#0@@27|)))) :qid |KeyTypesdfy.20:15| :weight 3 :skolemid |4153| :pattern ( (ValueType.__default.Len (Lit |v#0@@27|))) ))))
(assert  (=> true (forall ((|s#0@@267| T@U) ) (!  (=> (and (= (type |s#0@@267|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| |s#0@@267|) ($Is |s#0@@267| (TSeq Tclass.NativeTypes.byte)))) true) :qid |KeyTypesdfy.22:36| :skolemid |4154| :pattern ( (ValueType.__default.ValidMessageBytestring |s#0@@267|)) ))))
(assert (forall ((|s#0@@268| T@U) ) (!  (=> (and (= (type |s#0@@268|) (SeqType BoxType)) ($Is |s#0@@268| (TSeq Tclass.NativeTypes.byte))) (= (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@268|) true)) :qid |KeyTypesdfy.22:36| :skolemid |4155| :pattern ( (|ValueType.__default.ValidMessageBytestring#requires| |s#0@@268|)) )))
(assert  (=> true (forall ((|s#0@@269| T@U) ) (!  (=> (and (= (type |s#0@@269|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| |s#0@@269|) ($Is |s#0@@269| (TSeq Tclass.NativeTypes.byte)))) (and |ValueType.__default.MaxLen#canCall| (= (ValueType.__default.ValidMessageBytestring |s#0@@269|) (<= (|Seq#Length| |s#0@@269|) (LitInt ValueType.__default.MaxLen))))) :qid |KeyTypesdfy.22:36| :skolemid |4156| :pattern ( (ValueType.__default.ValidMessageBytestring |s#0@@269|)) ))))
(assert  (=> true (forall ((|s#0@@270| T@U) ) (!  (=> (and (= (type |s#0@@270|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestring#canCall| (Lit |s#0@@270|)) ($Is |s#0@@270| (TSeq Tclass.NativeTypes.byte)))) (and |ValueType.__default.MaxLen#canCall| (= (ValueType.__default.ValidMessageBytestring (Lit |s#0@@270|)) (<= (|Seq#Length| (Lit |s#0@@270|)) (LitInt ValueType.__default.MaxLen))))) :qid |KeyTypesdfy.22:36| :weight 3 :skolemid |4157| :pattern ( (ValueType.__default.ValidMessageBytestring (Lit |s#0@@270|))) ))))
(assert  (=> true (forall ((|strs#0| T@U) ) (!  (=> (and (= (type |strs#0|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| |strs#0|) ($Is |strs#0| (TSeq (TSeq Tclass.NativeTypes.byte))))) true) :qid |KeyTypesdfy.27:37| :skolemid |4158| :pattern ( (ValueType.__default.ValidMessageBytestrings |strs#0|)) ))))
(assert (forall ((|strs#0@@0| T@U) ) (!  (=> (and (= (type |strs#0@@0|) (SeqType BoxType)) ($Is |strs#0@@0| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|) true)) :qid |KeyTypesdfy.27:37| :skolemid |4159| :pattern ( (|ValueType.__default.ValidMessageBytestrings#requires| |strs#0@@0|)) )))
(assert  (=> true (forall ((|strs#0@@1| T@U) ) (!  (=> (and (= (type |strs#0@@1|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| |strs#0@@1|) ($Is |strs#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#0@@136| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@136|) (< |i#0@@136| (|Seq#Length| |strs#0@@1|))) (|ValueType.__default.ValidMessageBytestring#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@136|)))) :qid |KeyTypesdfy.29:12| :skolemid |4161| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@136|))) )) (= (ValueType.__default.ValidMessageBytestrings |strs#0@@1|) (forall ((|i#0@@137| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@137|) (< |i#0@@137| (|Seq#Length| |strs#0@@1|))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@137|)))) :qid |KeyTypesdfy.29:12| :skolemid |4160| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@1| |i#0@@137|))) ))))) :qid |KeyTypesdfy.27:37| :skolemid |4162| :pattern ( (ValueType.__default.ValidMessageBytestrings |strs#0@@1|)) ))))
(assert  (=> true (forall ((|strs#0@@2| T@U) ) (!  (=> (and (= (type |strs#0@@2|) (SeqType BoxType)) (or (|ValueType.__default.ValidMessageBytestrings#canCall| (Lit |strs#0@@2|)) ($Is |strs#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte))))) (and (forall ((|i#1@@57| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@57|) (< |i#1@@57| (|Seq#Length| (Lit |strs#0@@2|)))) (|ValueType.__default.ValidMessageBytestring#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#1@@57|)))) :qid |KeyTypesdfy.29:12| :skolemid |4164| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#1@@57|))) )) (= (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|)) (forall ((|i#1@@58| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@58|) (< |i#1@@58| (|Seq#Length| (Lit |strs#0@@2|)))) (ValueType.__default.ValidMessageBytestring ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strs#0@@2|) |i#1@@58|)))) :qid |KeyTypesdfy.29:12| :skolemid |4163| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strs#0@@2| |i#1@@58|))) ))))) :qid |KeyTypesdfy.27:37| :weight 3 :skolemid |4165| :pattern ( (ValueType.__default.ValidMessageBytestrings (Lit |strs#0@@2|))) ))))
(assert (= (type |#ValueMessage.Delta.NoDelta|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#ValueMessage.Delta.NoDelta|) |##ValueMessage.Delta.NoDelta|))
(assert (forall ((d@@56 T@U) ) (!  (=> (= (type d@@56) DatatypeTypeType) (= (ValueMessage.Delta.NoDelta_q d@@56) (= (DatatypeCtorId d@@56) |##ValueMessage.Delta.NoDelta|))) :qid |unknown.0:0| :skolemid |4166| :pattern ( (ValueMessage.Delta.NoDelta_q d@@56)) )))
(assert (forall ((d@@57 T@U) ) (!  (=> (and (= (type d@@57) DatatypeTypeType) (ValueMessage.Delta.NoDelta_q d@@57)) (= d@@57 |#ValueMessage.Delta.NoDelta|)) :qid |unknown.0:0| :skolemid |4167| :pattern ( (ValueMessage.Delta.NoDelta_q d@@57)) )))
(assert (= (type Tclass.ValueMessage.Delta) TyType))
(assert (= (Tag Tclass.ValueMessage.Delta) Tagclass.ValueMessage.Delta))
(assert (= (TagFamily Tclass.ValueMessage.Delta) tytagFamily$Delta))
(assert (forall ((bx@@180 T@U) ) (!  (=> (and (= (type bx@@180) BoxType) ($IsBox bx@@180 Tclass.ValueMessage.Delta)) (and (= ($Box ($Unbox DatatypeTypeType bx@@180)) bx@@180) ($Is ($Unbox DatatypeTypeType bx@@180) Tclass.ValueMessage.Delta))) :qid |unknown.0:0| :skolemid |4168| :pattern ( ($IsBox bx@@180 Tclass.ValueMessage.Delta)) )))
(assert ($Is |#ValueMessage.Delta.NoDelta| Tclass.ValueMessage.Delta))
(assert (forall (($h@@110 T@U) ) (!  (=> (and (= (type $h@@110) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@110)) ($IsAlloc |#ValueMessage.Delta.NoDelta| Tclass.ValueMessage.Delta $h@@110)) :qid |DafnyPreludebpl.545:12| :skolemid |4169| :pattern ( ($IsAlloc |#ValueMessage.Delta.NoDelta| Tclass.ValueMessage.Delta $h@@110)) )))
(assert (= |#ValueMessage.Delta.NoDelta| (Lit |#ValueMessage.Delta.NoDelta|)))
(assert (forall ((d@@58 T@U) ) (!  (=> (and (= (type d@@58) DatatypeTypeType) (|$IsA#ValueMessage.Delta| d@@58)) (ValueMessage.Delta.NoDelta_q d@@58)) :qid |unknown.0:0| :skolemid |4170| :pattern ( (|$IsA#ValueMessage.Delta| d@@58)) )))
(assert (forall ((d@@59 T@U) ) (!  (=> (and (= (type d@@59) DatatypeTypeType) ($Is d@@59 Tclass.ValueMessage.Delta)) (ValueMessage.Delta.NoDelta_q d@@59)) :qid |unknown.0:0| :skolemid |4171| :pattern ( (ValueMessage.Delta.NoDelta_q d@@59) ($Is d@@59 Tclass.ValueMessage.Delta)) )))
(assert (forall ((a@@149 T@U) (b@@80 T@U) ) (!  (=> (and (and (= (type a@@149) DatatypeTypeType) (= (type b@@80) DatatypeTypeType)) true) (= (|ValueMessage.Delta#Equal| a@@149 b@@80) true)) :qid |unknown.0:0| :skolemid |4172| :pattern ( (|ValueMessage.Delta#Equal| a@@149 b@@80)) )))
(assert (forall ((a@@150 T@U) (b@@81 T@U) ) (!  (=> (and (= (type a@@150) DatatypeTypeType) (= (type b@@81) DatatypeTypeType)) (= (|ValueMessage.Delta#Equal| a@@150 b@@81) (= a@@150 b@@81))) :qid |unknown.0:0| :skolemid |4173| :pattern ( (|ValueMessage.Delta#Equal| a@@150 b@@81)) )))
(assert (= (type Tclass.ValueMessage.__default) TyType))
(assert (= (Tag Tclass.ValueMessage.__default) Tagclass.ValueMessage.__default))
(assert (= (TagFamily Tclass.ValueMessage.__default) tytagFamily$_default))
(assert (forall (($o@@54 T@U) ) (!  (=> (= (type $o@@54) refType) (= ($Is $o@@54 Tclass.ValueMessage.__default)  (or (= $o@@54 null) (= (dtype $o@@54) Tclass.ValueMessage.__default)))) :qid |unknown.0:0| :skolemid |4174| :pattern ( ($Is $o@@54 Tclass.ValueMessage.__default)) )))
(assert (forall (($o@@55 T@U) ($h@@111 T@U) ) (!  (=> (and (= (type $o@@55) refType) (= (type $h@@111) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@55 Tclass.ValueMessage.__default $h@@111)  (or (= $o@@55 null) (U_2_bool (MapType1Select (MapType0Select $h@@111 $o@@55) alloc))))) :qid |unknown.0:0| :skolemid |4175| :pattern ( ($IsAlloc $o@@55 Tclass.ValueMessage.__default $h@@111)) )))
(assert (= (type ValueMessage.__default.NopDelta) DatatypeTypeType))
(assert  (=> true (=> true ($Is ValueMessage.__default.NopDelta Tclass.ValueMessage.Delta))))
(assert (= |ValueMessage.__default.NopDelta#requires| true))
(assert  (=> true (=> true (= ValueMessage.__default.NopDelta (Lit |#ValueMessage.Delta.NoDelta|)))))
(assert  (=> true (=> true (= ValueMessage.__default.NopDelta (Lit |#ValueMessage.Delta.NoDelta|)))))
(assert (= (type ValueMessage.__default.DefaultValue) (SeqType BoxType)))
(assert  (=> true (=> true ($Is ValueMessage.__default.DefaultValue Tclass.ValueType.Value))))
(assert (= |ValueMessage.__default.DefaultValue#requires| true))
(assert  (=> true (=> true (and |ValueType.__default.DefaultValue#canCall| (= ValueMessage.__default.DefaultValue (Lit ValueType.__default.DefaultValue))))))
(assert  (=> true (=> true (and |ValueType.__default.DefaultValue#canCall| (= ValueMessage.__default.DefaultValue (Lit ValueType.__default.DefaultValue))))))
(assert (forall ((arg0@@659 T@U) (arg1@@344 T@U) ) (! (= (type (ValueMessage.__default.CombineDeltas arg0@@659 arg1@@344)) DatatypeTypeType) :qid |funType:ValueMessage.__default.CombineDeltas| :pattern ( (ValueMessage.__default.CombineDeltas arg0@@659 arg1@@344)) )))
(assert  (=> true (forall ((|newdelta#0| T@U) (|olddelta#0| T@U) ) (!  (=> (and (and (= (type |newdelta#0|) DatatypeTypeType) (= (type |olddelta#0|) DatatypeTypeType)) (or (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#0| |olddelta#0|) (and ($Is |newdelta#0| Tclass.ValueMessage.Delta) ($Is |olddelta#0| Tclass.ValueMessage.Delta)))) (and (and (=> (|ValueMessage.Delta#Equal| |newdelta#0| ValueMessage.__default.NopDelta) (|ValueMessage.Delta#Equal| (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) |olddelta#0|)) (=> (|ValueMessage.Delta#Equal| |olddelta#0| ValueMessage.__default.NopDelta) (|ValueMessage.Delta#Equal| (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) |newdelta#0|))) ($Is (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|) Tclass.ValueMessage.Delta))) :qid |MessageidfyValueMessage.29:33| :skolemid |4176| :pattern ( (ValueMessage.__default.CombineDeltas |newdelta#0| |olddelta#0|)) ))))
(assert (forall ((|newdelta#0@@0| T@U) (|olddelta#0@@0| T@U) ) (!  (=> (and (and (= (type |newdelta#0@@0|) DatatypeTypeType) (= (type |olddelta#0@@0|) DatatypeTypeType)) (and ($Is |newdelta#0@@0| Tclass.ValueMessage.Delta) ($Is |olddelta#0@@0| Tclass.ValueMessage.Delta))) (= (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|) true)) :qid |MessageidfyValueMessage.29:33| :skolemid |4177| :pattern ( (|ValueMessage.__default.CombineDeltas#requires| |newdelta#0@@0| |olddelta#0@@0|)) )))
(assert  (=> true (forall ((|newdelta#0@@1| T@U) (|olddelta#0@@1| T@U) ) (!  (=> (and (and (= (type |newdelta#0@@1|) DatatypeTypeType) (= (type |olddelta#0@@1|) DatatypeTypeType)) (or (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#0@@1| |olddelta#0@@1|) (and ($Is |newdelta#0@@1| Tclass.ValueMessage.Delta) ($Is |olddelta#0@@1| Tclass.ValueMessage.Delta)))) (= (ValueMessage.__default.CombineDeltas |newdelta#0@@1| |olddelta#0@@1|) (Lit |#ValueMessage.Delta.NoDelta|))) :qid |MessageidfyValueMessage.29:33| :skolemid |4178| :pattern ( (ValueMessage.__default.CombineDeltas |newdelta#0@@1| |olddelta#0@@1|)) ))))
(assert  (=> true (forall ((|newdelta#0@@2| T@U) (|olddelta#0@@2| T@U) ) (!  (=> (and (and (= (type |newdelta#0@@2|) DatatypeTypeType) (= (type |olddelta#0@@2|) DatatypeTypeType)) (or (|ValueMessage.__default.CombineDeltas#canCall| (Lit |newdelta#0@@2|) (Lit |olddelta#0@@2|)) (and ($Is |newdelta#0@@2| Tclass.ValueMessage.Delta) ($Is |olddelta#0@@2| Tclass.ValueMessage.Delta)))) (= (ValueMessage.__default.CombineDeltas (Lit |newdelta#0@@2|) (Lit |olddelta#0@@2|)) (Lit |#ValueMessage.Delta.NoDelta|))) :qid |MessageidfyValueMessage.29:33| :weight 3 :skolemid |4179| :pattern ( (ValueMessage.__default.CombineDeltas (Lit |newdelta#0@@2|) (Lit |olddelta#0@@2|))) ))))
(assert (forall ((arg0@@660 T@U) (arg1@@345 T@U) ) (! (= (type (ValueMessage.__default.ApplyDelta arg0@@660 arg1@@345)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.ApplyDelta| :pattern ( (ValueMessage.__default.ApplyDelta arg0@@660 arg1@@345)) )))
(assert  (=> true (forall ((|delta#0@@1| T@U) (|value#0| T@U) ) (!  (=> (and (and (= (type |delta#0@@1|) DatatypeTypeType) (= (type |value#0|) (SeqType BoxType))) (or (|ValueMessage.__default.ApplyDelta#canCall| |delta#0@@1| |value#0|) (and ($Is |delta#0@@1| Tclass.ValueMessage.Delta) ($Is |value#0| Tclass.ValueType.Value)))) (and (=> (|ValueMessage.Delta#Equal| |delta#0@@1| ValueMessage.__default.NopDelta) (|Seq#Equal| (ValueMessage.__default.ApplyDelta |delta#0@@1| |value#0|) |value#0|)) ($Is (ValueMessage.__default.ApplyDelta |delta#0@@1| |value#0|) Tclass.ValueType.Value))) :qid |MessageidfyValueMessage.33:30| :skolemid |4180| :pattern ( (ValueMessage.__default.ApplyDelta |delta#0@@1| |value#0|)) ))))
(assert (forall ((|delta#0@@2| T@U) (|value#0@@0| T@U) ) (!  (=> (and (and (= (type |delta#0@@2|) DatatypeTypeType) (= (type |value#0@@0|) (SeqType BoxType))) (and ($Is |delta#0@@2| Tclass.ValueMessage.Delta) ($Is |value#0@@0| Tclass.ValueType.Value))) (= (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@2| |value#0@@0|) true)) :qid |MessageidfyValueMessage.33:30| :skolemid |4181| :pattern ( (|ValueMessage.__default.ApplyDelta#requires| |delta#0@@2| |value#0@@0|)) )))
(assert  (=> true (forall ((|delta#0@@3| T@U) (|value#0@@1| T@U) ) (!  (=> (and (and (= (type |delta#0@@3|) DatatypeTypeType) (= (type |value#0@@1|) (SeqType BoxType))) (or (|ValueMessage.__default.ApplyDelta#canCall| |delta#0@@3| |value#0@@1|) (and ($Is |delta#0@@3| Tclass.ValueMessage.Delta) ($Is |value#0@@1| Tclass.ValueType.Value)))) (= (ValueMessage.__default.ApplyDelta |delta#0@@3| |value#0@@1|) |value#0@@1|)) :qid |MessageidfyValueMessage.33:30| :skolemid |4182| :pattern ( (ValueMessage.__default.ApplyDelta |delta#0@@3| |value#0@@1|)) ))))
(assert  (=> true (forall ((|delta#0@@4| T@U) (|value#0@@2| T@U) ) (!  (=> (and (and (= (type |delta#0@@4|) DatatypeTypeType) (= (type |value#0@@2|) (SeqType BoxType))) (or (|ValueMessage.__default.ApplyDelta#canCall| (Lit |delta#0@@4|) (Lit |value#0@@2|)) (and ($Is |delta#0@@4| Tclass.ValueMessage.Delta) ($Is |value#0@@2| Tclass.ValueType.Value)))) (= (ValueMessage.__default.ApplyDelta (Lit |delta#0@@4|) (Lit |value#0@@2|)) (Lit |value#0@@2|))) :qid |MessageidfyValueMessage.33:30| :weight 3 :skolemid |4183| :pattern ( (ValueMessage.__default.ApplyDelta (Lit |delta#0@@4|) (Lit |value#0@@2|))) ))))
(assert (forall ((arg0@@661 T@U) ) (! (= (type (ValueMessage.__default.bytestring__to__Message arg0@@661)) DatatypeTypeType) :qid |funType:ValueMessage.__default.bytestring__to__Message| :pattern ( (ValueMessage.__default.bytestring__to__Message arg0@@661)) )))
(assert  (=> true (forall ((|s#0@@271| T@U) ) (!  (=> (and (= (type |s#0@@271|) (SeqType BoxType)) (or (|ValueMessage.__default.bytestring__to__Message#canCall| |s#0@@271|) (and ($Is |s#0@@271| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| |s#0@@271|) 4294967296)))) ($Is (ValueMessage.__default.bytestring__to__Message |s#0@@271|) Tclass.ValueMessage.Message)) :qid |Messageidfy.105:41| :skolemid |4184| :pattern ( (ValueMessage.__default.bytestring__to__Message |s#0@@271|)) ))))
(assert (forall ((|s#0@@272| T@U) ) (!  (=> (and (= (type |s#0@@272|) (SeqType BoxType)) ($Is |s#0@@272| (TSeq Tclass.NativeTypes.byte))) (= (|ValueMessage.__default.bytestring__to__Message#requires| |s#0@@272|) (< (|Seq#Length| |s#0@@272|) 4294967296))) :qid |Messageidfy.105:41| :skolemid |4185| :pattern ( (|ValueMessage.__default.bytestring__to__Message#requires| |s#0@@272|)) )))
(assert (forall ((arg0@@662 T@U) ) (! (= (type (|#ValueMessage.Message.Define| arg0@@662)) DatatypeTypeType) :qid |funType:#ValueMessage.Message.Define| :pattern ( (|#ValueMessage.Message.Define| arg0@@662)) )))
(assert  (=> true (forall ((|s#0@@273| T@U) ) (!  (=> (and (= (type |s#0@@273|) (SeqType BoxType)) (or (|ValueMessage.__default.bytestring__to__Message#canCall| |s#0@@273|) (and ($Is |s#0@@273| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| |s#0@@273|) 4294967296)))) (and (and |ValueType.__default.MaxLen#canCall| (=> (< (LitInt ValueType.__default.MaxLen) (|Seq#Length| |s#0@@273|)) |ValueType.__default.DefaultValue#canCall|)) (= (ValueMessage.__default.bytestring__to__Message |s#0@@273|) (ite (<= (|Seq#Length| |s#0@@273|) (LitInt ValueType.__default.MaxLen)) (|#ValueMessage.Message.Define| |s#0@@273|) (|#ValueMessage.Message.Define| (Lit ValueType.__default.DefaultValue)))))) :qid |Messageidfy.105:41| :skolemid |4186| :pattern ( (ValueMessage.__default.bytestring__to__Message |s#0@@273|)) ))))
(assert  (=> true (forall ((|s#0@@274| T@U) ) (!  (=> (and (= (type |s#0@@274|) (SeqType BoxType)) (or (|ValueMessage.__default.bytestring__to__Message#canCall| (Lit |s#0@@274|)) (and ($Is |s#0@@274| (TSeq Tclass.NativeTypes.byte)) (< (|Seq#Length| (Lit |s#0@@274|)) 4294967296)))) (and (and |ValueType.__default.MaxLen#canCall| (=> (< (LitInt ValueType.__default.MaxLen) (|Seq#Length| (Lit |s#0@@274|))) |ValueType.__default.DefaultValue#canCall|)) (= (ValueMessage.__default.bytestring__to__Message (Lit |s#0@@274|)) (ite (<= (|Seq#Length| (Lit |s#0@@274|)) (LitInt ValueType.__default.MaxLen)) (|#ValueMessage.Message.Define| (Lit |s#0@@274|)) (|#ValueMessage.Message.Define| (Lit ValueType.__default.DefaultValue)))))) :qid |Messageidfy.105:41| :weight 3 :skolemid |4187| :pattern ( (ValueMessage.__default.bytestring__to__Message (Lit |s#0@@274|))) ))))
(assert  (=> true (forall ((|msg#0@@1| T@U) ) (!  (=> (and (= (type |msg#0@@1|) DatatypeTypeType) (or (|ValueMessage.__default.EncodableMessage#canCall| |msg#0@@1|) ($Is |msg#0@@1| Tclass.ValueMessage.Message))) true) :qid |Messageidfy.118:30| :skolemid |4188| :pattern ( (ValueMessage.__default.EncodableMessage |msg#0@@1|)) ))))
(assert (forall ((|msg#0@@2| T@U) ) (!  (=> (and (= (type |msg#0@@2|) DatatypeTypeType) ($Is |msg#0@@2| Tclass.ValueMessage.Message)) (= (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@2|) true)) :qid |Messageidfy.118:30| :skolemid |4189| :pattern ( (|ValueMessage.__default.EncodableMessage#requires| |msg#0@@2|)) )))
(assert  (=> true (forall ((|msg#0@@3| T@U) ) (!  (=> (and (= (type |msg#0@@3|) DatatypeTypeType) (or (|ValueMessage.__default.EncodableMessage#canCall| |msg#0@@3|) ($Is |msg#0@@3| Tclass.ValueMessage.Message))) (= (ValueMessage.__default.EncodableMessage |msg#0@@3|)  (and true (ValueMessage.Message.Define_q |msg#0@@3|)))) :qid |Messageidfy.118:30| :skolemid |4190| :pattern ( (ValueMessage.__default.EncodableMessage |msg#0@@3|)) ))))
(assert  (=> true (forall ((|msg#0@@4| T@U) ) (!  (=> (and (= (type |msg#0@@4|) DatatypeTypeType) (or (|ValueMessage.__default.EncodableMessage#canCall| (Lit |msg#0@@4|)) ($Is |msg#0@@4| Tclass.ValueMessage.Message))) (= (ValueMessage.__default.EncodableMessage (Lit |msg#0@@4|)) (U_2_bool (Lit (bool_2_U  (and true (ValueMessage.Message.Define_q (Lit |msg#0@@4|)))))))) :qid |Messageidfy.118:30| :weight 3 :skolemid |4191| :pattern ( (ValueMessage.__default.EncodableMessage (Lit |msg#0@@4|))) ))))
(assert  (=> true (forall ((|msgs#0| T@U) ) (!  (=> (and (= (type |msgs#0|) (SeqType BoxType)) (or (|ValueMessage.__default.EncodableMessageSeq#canCall| |msgs#0|) ($Is |msgs#0| (TSeq Tclass.ValueMessage.Message)))) true) :qid |Messageidfy.123:33| :skolemid |4192| :pattern ( (ValueMessage.__default.EncodableMessageSeq |msgs#0|)) ))))
(assert (forall ((|msgs#0@@0| T@U) ) (!  (=> (and (= (type |msgs#0@@0|) (SeqType BoxType)) ($Is |msgs#0@@0| (TSeq Tclass.ValueMessage.Message))) (= (|ValueMessage.__default.EncodableMessageSeq#requires| |msgs#0@@0|) true)) :qid |Messageidfy.123:33| :skolemid |4193| :pattern ( (|ValueMessage.__default.EncodableMessageSeq#requires| |msgs#0@@0|)) )))
(assert  (=> true (forall ((|msgs#0@@1| T@U) ) (!  (=> (and (= (type |msgs#0@@1|) (SeqType BoxType)) (or (|ValueMessage.__default.EncodableMessageSeq#canCall| |msgs#0@@1|) ($Is |msgs#0@@1| (TSeq Tclass.ValueMessage.Message)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|i#0@@138| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@138|) (< |i#0@@138| (|Seq#Length| |msgs#0@@1|))) (|ValueMessage.__default.EncodableMessage#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@1| |i#0@@138|)))) :qid |Messageidfy.125:16| :skolemid |4195| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@1| |i#0@@138|))) ))) (= (ValueMessage.__default.EncodableMessageSeq |msgs#0@@1|)  (and true (forall ((|i#0@@139| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@139|) (< |i#0@@139| (|Seq#Length| |msgs#0@@1|))) (ValueMessage.__default.EncodableMessage ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@1| |i#0@@139|)))) :qid |Messageidfy.125:16| :skolemid |4194| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@1| |i#0@@139|))) )))))) :qid |Messageidfy.123:33| :skolemid |4196| :pattern ( (ValueMessage.__default.EncodableMessageSeq |msgs#0@@1|)) ))))
(assert  (=> true (forall ((|msgs#0@@2| T@U) ) (!  (=> (and (= (type |msgs#0@@2|) (SeqType BoxType)) (or (|ValueMessage.__default.EncodableMessageSeq#canCall| (Lit |msgs#0@@2|)) ($Is |msgs#0@@2| (TSeq Tclass.ValueMessage.Message)))) (and (=> (U_2_bool (Lit (bool_2_U true))) (forall ((|i#1@@59| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@59|) (< |i#1@@59| (|Seq#Length| (Lit |msgs#0@@2|)))) (|ValueMessage.__default.EncodableMessage#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |msgs#0@@2|) |i#1@@59|)))) :qid |Messageidfy.125:16| :skolemid |4198| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@2| |i#1@@59|))) ))) (= (ValueMessage.__default.EncodableMessageSeq (Lit |msgs#0@@2|))  (and true (forall ((|i#1@@60| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@60|) (< |i#1@@60| (|Seq#Length| (Lit |msgs#0@@2|)))) (ValueMessage.__default.EncodableMessage ($Unbox DatatypeTypeType (|Seq#Index| (Lit |msgs#0@@2|) |i#1@@60|)))) :qid |Messageidfy.125:16| :skolemid |4197| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@2| |i#1@@60|))) )))))) :qid |Messageidfy.123:33| :weight 3 :skolemid |4199| :pattern ( (ValueMessage.__default.EncodableMessageSeq (Lit |msgs#0@@2|))) ))))
(assert (forall ((arg0@@663 T@U) ) (! (= (type (ValueMessage.__default.Message__to__bytestring arg0@@663)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.Message__to__bytestring| :pattern ( (ValueMessage.__default.Message__to__bytestring arg0@@663)) )))
(assert  (=> true (forall ((|msg#0@@5| T@U) ) (!  (=> (and (= (type |msg#0@@5|) DatatypeTypeType) (or (|ValueMessage.__default.Message__to__bytestring#canCall| |msg#0@@5|) (and ($Is |msg#0@@5| Tclass.ValueMessage.Message) (ValueMessage.Message.Define_q |msg#0@@5|)))) ($Is (ValueMessage.__default.Message__to__bytestring |msg#0@@5|) (TSeq Tclass.NativeTypes.byte))) :qid |Messageidfy.128:41| :skolemid |4200| :pattern ( (ValueMessage.__default.Message__to__bytestring |msg#0@@5|)) ))))
(assert (forall ((|msg#0@@6| T@U) ) (!  (=> (and (= (type |msg#0@@6|) DatatypeTypeType) ($Is |msg#0@@6| Tclass.ValueMessage.Message)) (= (|ValueMessage.__default.Message__to__bytestring#requires| |msg#0@@6|) (ValueMessage.Message.Define_q |msg#0@@6|))) :qid |Messageidfy.128:41| :skolemid |4201| :pattern ( (|ValueMessage.__default.Message__to__bytestring#requires| |msg#0@@6|)) )))
(assert (forall ((arg0@@664 T@U) ) (! (= (type (ValueMessage.Message.value arg0@@664)) (SeqType BoxType)) :qid |funType:ValueMessage.Message.value| :pattern ( (ValueMessage.Message.value arg0@@664)) )))
(assert  (=> true (forall ((|msg#0@@7| T@U) ) (!  (=> (and (= (type |msg#0@@7|) DatatypeTypeType) (or (|ValueMessage.__default.Message__to__bytestring#canCall| |msg#0@@7|) (and ($Is |msg#0@@7| Tclass.ValueMessage.Message) (ValueMessage.Message.Define_q |msg#0@@7|)))) (= (ValueMessage.__default.Message__to__bytestring |msg#0@@7|) (ValueMessage.Message.value |msg#0@@7|))) :qid |Messageidfy.128:41| :skolemid |4202| :pattern ( (ValueMessage.__default.Message__to__bytestring |msg#0@@7|)) ))))
(assert  (=> true (forall ((|msg#0@@8| T@U) ) (!  (=> (and (= (type |msg#0@@8|) DatatypeTypeType) (or (|ValueMessage.__default.Message__to__bytestring#canCall| (Lit |msg#0@@8|)) (and ($Is |msg#0@@8| Tclass.ValueMessage.Message) (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit |msg#0@@8|)))))))) (= (ValueMessage.__default.Message__to__bytestring (Lit |msg#0@@8|)) (Lit (ValueMessage.Message.value (Lit |msg#0@@8|))))) :qid |Messageidfy.128:41| :weight 3 :skolemid |4203| :pattern ( (ValueMessage.__default.Message__to__bytestring (Lit |msg#0@@8|))) ))))
(assert (forall ((arg0@@665 T@U) (arg1@@346 T@U) ) (! (= (type (ValueMessage.__default.messageSeq__to__bytestringSeq arg0@@665 arg1@@346)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.messageSeq__to__bytestringSeq| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq arg0@@665 arg1@@346)) )))
(assert (forall (($ly@@658 T@U) (|msgs#0@@3| T@U) ) (!  (=> (and (= (type $ly@@658) LayerTypeType) (= (type |msgs#0@@3|) (SeqType BoxType))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@658) |msgs#0@@3|) (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@658 |msgs#0@@3|))) :qid |Messageidfy.134:12| :skolemid |4204| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@658) |msgs#0@@3|)) )))
(assert (forall (($ly@@659 T@U) (|msgs#0@@4| T@U) ) (!  (=> (and (= (type $ly@@659) LayerTypeType) (= (type |msgs#0@@4|) (SeqType BoxType))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@659 |msgs#0@@4|) (ValueMessage.__default.messageSeq__to__bytestringSeq $LZ |msgs#0@@4|))) :qid |Messageidfy.134:12| :skolemid |4205| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq (AsFuelBottom $ly@@659) |msgs#0@@4|)) )))
(assert  (=> true (forall (($ly@@660 T@U) (|msgs#0@@5| T@U) ) (!  (=> (and (and (= (type $ly@@660) LayerTypeType) (= (type |msgs#0@@5|) (SeqType BoxType))) (or (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| |msgs#0@@5|) (and ($Is |msgs#0@@5| (TSeq Tclass.ValueMessage.Message)) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@5|)))) (and (and (= (|Seq#Length| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@660 |msgs#0@@5|)) (|Seq#Length| |msgs#0@@5|)) (forall ((|i#0@@140| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@140|) (< |i#0@@140| (|Seq#Length| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@660 |msgs#0@@5|)))) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@660 |msgs#0@@5|) |i#0@@140|)) (ValueMessage.__default.Message__to__bytestring ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@5| |i#0@@140|))))) :qid |Messageidfy.137:20| :skolemid |4206| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |msgs#0@@5| |i#0@@140|))) :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@660 |msgs#0@@5|) |i#0@@140|))) ))) ($Is (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@660 |msgs#0@@5|) (TSeq (TSeq Tclass.NativeTypes.byte))))) :qid |Messageidfy.134:12| :skolemid |4207| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@660 |msgs#0@@5|)) ))))
(assert (forall (($ly@@661 T@U) (|msgs#0@@6| T@U) ) (!  (=> (and (and (= (type $ly@@661) LayerTypeType) (= (type |msgs#0@@6|) (SeqType BoxType))) ($Is |msgs#0@@6| (TSeq Tclass.ValueMessage.Message))) (= (|ValueMessage.__default.messageSeq__to__bytestringSeq#requires| $ly@@661 |msgs#0@@6|) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@6|))) :qid |Messageidfy.134:12| :skolemid |4208| :pattern ( (|ValueMessage.__default.messageSeq__to__bytestringSeq#requires| $ly@@661 |msgs#0@@6|)) )))
(assert  (=> true (forall (($ly@@662 T@U) (|msgs#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@662) LayerTypeType) (= (type |msgs#0@@7|) (SeqType BoxType))) (or (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| |msgs#0@@7|) (and ($Is |msgs#0@@7| (TSeq Tclass.ValueMessage.Message)) (ValueMessage.__default.EncodableMessageSeq |msgs#0@@7|)))) (and (=> (not (= (|Seq#Length| |msgs#0@@7|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.ValueMessage.Message |msgs#0@@7|) (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| (Sequences.__default.DropLast Tclass.ValueMessage.Message |msgs#0@@7|))) (and (|Sequences.__default.Last#canCall| Tclass.ValueMessage.Message |msgs#0@@7|) (|ValueMessage.__default.Message__to__bytestring#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.ValueMessage.Message |msgs#0@@7|)))))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@662) |msgs#0@@7|) (ite (= (|Seq#Length| |msgs#0@@7|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ValueMessage.__default.messageSeq__to__bytestringSeq $ly@@662 (Sequences.__default.DropLast Tclass.ValueMessage.Message |msgs#0@@7|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (ValueMessage.__default.Message__to__bytestring ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.ValueMessage.Message |msgs#0@@7|)))))))))) :qid |Messageidfy.134:12| :skolemid |4209| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@662) |msgs#0@@7|)) ))))
(assert  (=> true (forall (($ly@@663 T@U) (|msgs#0@@8| T@U) ) (!  (=> (and (and (= (type $ly@@663) LayerTypeType) (= (type |msgs#0@@8|) (SeqType BoxType))) (or (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| (Lit |msgs#0@@8|)) (and ($Is |msgs#0@@8| (TSeq Tclass.ValueMessage.Message)) (U_2_bool (Lit (bool_2_U (ValueMessage.__default.EncodableMessageSeq (Lit |msgs#0@@8|)))))))) (and (=> (not (= (|Seq#Length| (Lit |msgs#0@@8|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.ValueMessage.Message (Lit |msgs#0@@8|)) (|ValueMessage.__default.messageSeq__to__bytestringSeq#canCall| (Lit (Sequences.__default.DropLast Tclass.ValueMessage.Message (Lit |msgs#0@@8|))))) (and (|Sequences.__default.Last#canCall| Tclass.ValueMessage.Message (Lit |msgs#0@@8|)) (|ValueMessage.__default.Message__to__bytestring#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.ValueMessage.Message (Lit |msgs#0@@8|)))))))) (= (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@663) (Lit |msgs#0@@8|)) (ite (= (|Seq#Length| (Lit |msgs#0@@8|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@663) (Lit (Sequences.__default.DropLast Tclass.ValueMessage.Message (Lit |msgs#0@@8|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (ValueMessage.__default.Message__to__bytestring (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.ValueMessage.Message (Lit |msgs#0@@8|))))))))))))) :qid |Messageidfy.134:12| :weight 3 :skolemid |4210| :pattern ( (ValueMessage.__default.messageSeq__to__bytestringSeq ($LS $ly@@663) (Lit |msgs#0@@8|))) ))))
(assert (forall ((arg0@@666 T@U) (arg1@@347 T@U) ) (! (= (type (ValueMessage.__default.bytestringSeq__to__MessageSeq arg0@@666 arg1@@347)) (SeqType BoxType)) :qid |funType:ValueMessage.__default.bytestringSeq__to__MessageSeq| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq arg0@@666 arg1@@347)) )))
(assert (forall (($ly@@664 T@U) (|strings#0| T@U) ) (!  (=> (and (= (type $ly@@664) LayerTypeType) (= (type |strings#0|) (SeqType BoxType))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@664) |strings#0|) (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@664 |strings#0|))) :qid |Messageidfy.145:12| :skolemid |4211| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@664) |strings#0|)) )))
(assert (forall (($ly@@665 T@U) (|strings#0@@0| T@U) ) (!  (=> (and (= (type $ly@@665) LayerTypeType) (= (type |strings#0@@0|) (SeqType BoxType))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@665 |strings#0@@0|) (ValueMessage.__default.bytestringSeq__to__MessageSeq $LZ |strings#0@@0|))) :qid |Messageidfy.145:12| :skolemid |4212| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq (AsFuelBottom $ly@@665) |strings#0@@0|)) )))
(assert  (=> true (forall (($ly@@666 T@U) (|strings#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@666) LayerTypeType) (= (type |strings#0@@1|) (SeqType BoxType))) (or (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| |strings#0@@1|) (and ($Is |strings#0@@1| (TSeq (TSeq Tclass.NativeTypes.byte))) (forall ((|i#0@@141| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@141|) (< |i#0@@141| (|Seq#Length| |strings#0@@1|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#0@@141|))) 4294967296)) :qid |Messageidfy.146:21| :skolemid |4213| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#0@@141|))) ))))) (and (and (= (|Seq#Length| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@666 |strings#0@@1|)) (|Seq#Length| |strings#0@@1|)) (forall ((|i#1@@61| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@61|) (< |i#1@@61| (|Seq#Length| |strings#0@@1|))) (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@666 |strings#0@@1|) |i#1@@61|)) (ValueMessage.__default.bytestring__to__Message ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#1@@61|))))) :qid |Messageidfy.148:20| :skolemid |4214| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@1| |i#1@@61|))) :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@666 |strings#0@@1|) |i#1@@61|))) ))) ($Is (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@666 |strings#0@@1|) (TSeq Tclass.ValueMessage.Message)))) :qid |Messageidfy.145:12| :skolemid |4215| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@666 |strings#0@@1|)) ))))
(assert (forall (($ly@@667 T@U) (|strings#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@667) LayerTypeType) (= (type |strings#0@@2|) (SeqType BoxType))) ($Is |strings#0@@2| (TSeq (TSeq Tclass.NativeTypes.byte)))) (= (|ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| $ly@@667 |strings#0@@2|) (forall ((|i#2@@18| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@18|) (< |i#2@@18| (|Seq#Length| |strings#0@@2|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@18|))) 4294967296)) :qid |Messageidfy.146:21| :skolemid |4216| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@2| |i#2@@18|))) )))) :qid |Messageidfy.145:12| :skolemid |4217| :pattern ( (|ValueMessage.__default.bytestringSeq__to__MessageSeq#requires| $ly@@667 |strings#0@@2|)) )))
(assert  (=> true (forall (($ly@@668 T@U) (|strings#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@668) LayerTypeType) (= (type |strings#0@@3|) (SeqType BoxType))) (or (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| |strings#0@@3|) (and ($Is |strings#0@@3| (TSeq (TSeq Tclass.NativeTypes.byte))) (forall ((|i#2@@19| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@19|) (< |i#2@@19| (|Seq#Length| |strings#0@@3|))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@3| |i#2@@19|))) 4294967296)) :qid |Messageidfy.146:21| :skolemid |4216| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@3| |i#2@@19|))) ))))) (and (=> (not (= (|Seq#Length| |strings#0@@3|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) |strings#0@@3|) (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |strings#0@@3|))) (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) |strings#0@@3|) (|ValueMessage.__default.bytestring__to__Message#canCall| ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |strings#0@@3|)))))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@668) |strings#0@@3|) (ite (= (|Seq#Length| |strings#0@@3|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ValueMessage.__default.bytestringSeq__to__MessageSeq $ly@@668 (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) |strings#0@@3|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (ValueMessage.__default.bytestring__to__Message ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) |strings#0@@3|)))))))))) :qid |Messageidfy.145:12| :skolemid |4218| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@668) |strings#0@@3|)) ))))
(assert  (=> true (forall (($ly@@669 T@U) (|strings#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@669) LayerTypeType) (= (type |strings#0@@4|) (SeqType BoxType))) (or (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| (Lit |strings#0@@4|)) (and ($Is |strings#0@@4| (TSeq (TSeq Tclass.NativeTypes.byte))) (forall ((|i#3@@12| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@12|) (< |i#3@@12| (|Seq#Length| (Lit |strings#0@@4|)))) (< (|Seq#Length| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |strings#0@@4|) |i#3@@12|))) 4294967296)) :qid |Messageidfy.146:21| :skolemid |4219| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |strings#0@@4| |i#3@@12|))) ))))) (and (=> (not (= (|Seq#Length| (Lit |strings#0@@4|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|)) (|ValueMessage.__default.bytestringSeq__to__MessageSeq#canCall| (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|))))) (and (|Sequences.__default.Last#canCall| (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|)) (|ValueMessage.__default.bytestring__to__Message#canCall| (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|)))))))) (= (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@669) (Lit |strings#0@@4|)) (ite (= (|Seq#Length| (Lit |strings#0@@4|)) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@669) (Lit (Sequences.__default.DropLast (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|)))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit (ValueMessage.__default.bytestring__to__Message (Lit ($Unbox (SeqType BoxType) (Sequences.__default.Last (TSeq Tclass.NativeTypes.byte) (Lit |strings#0@@4|))))))))))))) :qid |Messageidfy.145:12| :weight 3 :skolemid |4220| :pattern ( (ValueMessage.__default.bytestringSeq__to__MessageSeq ($LS $ly@@669) (Lit |strings#0@@4|))) ))))
(assert  (=> true (forall ((|newmessage#0| T@U) (|oldmessage#0| T@U) ) (!  (=> (and (and (= (type |newmessage#0|) DatatypeTypeType) (= (type |oldmessage#0|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| |newmessage#0| |oldmessage#0|) (and ($Is |newmessage#0| Tclass.ValueMessage.Message) ($Is |oldmessage#0| Tclass.ValueMessage.Message)))) ($Is (ValueMessage.__default.Merge |newmessage#0| |oldmessage#0|) Tclass.ValueMessage.Message)) :qid |MessageidfyValueMessage.36:25| :skolemid |4235| :pattern ( (ValueMessage.__default.Merge |newmessage#0| |oldmessage#0|)) ))))
(assert (forall ((|newmessage#0@@0| T@U) (|oldmessage#0@@0| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@0|) DatatypeTypeType) (= (type |oldmessage#0@@0|) DatatypeTypeType)) (and ($Is |newmessage#0@@0| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@0| Tclass.ValueMessage.Message))) (= (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|) true)) :qid |MessageidfyValueMessage.36:25| :skolemid |4236| :pattern ( (|ValueMessage.__default.Merge#requires| |newmessage#0@@0| |oldmessage#0@@0|)) )))
(assert  (and (forall ((arg0@@667 T@U) ) (! (= (type (ValueMessage.Message.delta arg0@@667)) DatatypeTypeType) :qid |funType:ValueMessage.Message.delta| :pattern ( (ValueMessage.Message.delta arg0@@667)) )) (forall ((arg0@@668 T@U) ) (! (= (type (|#ValueMessage.Message.Update| arg0@@668)) DatatypeTypeType) :qid |funType:#ValueMessage.Message.Update| :pattern ( (|#ValueMessage.Message.Update| arg0@@668)) ))))
(assert  (=> true (forall ((|newmessage#0@@1| T@U) (|oldmessage#0@@1| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@1|) DatatypeTypeType) (= (type |oldmessage#0@@1|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| |newmessage#0@@1| |oldmessage#0@@1|) (and ($Is |newmessage#0@@1| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@1| Tclass.ValueMessage.Message)))) (and (and (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (=> (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (=> (not (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))) (and (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (=> (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|value#1| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|delta#1@@1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|ValueMessage.__default.ApplyDelta#canCall| |delta#1@@1| |value#1|))))))) (=> (not (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|)))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|olddelta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (and (_System.Tuple2.___hMake2_q (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))) (let ((|newdelta#1| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#1| |olddelta#1|))))))))) (= (ValueMessage.__default.Merge |newmessage#0@@1| |oldmessage#0@@1|) (ite (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (let ((|newvalue#0| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Define| |newvalue#0|)) (ite (ValueMessage.Message.Define_q ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))) (let ((|value#0@@3| (ValueMessage.Message.value ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (let ((|delta#0@@5| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Define| (ValueMessage.__default.ApplyDelta |delta#0@@5| |value#0@@3|)))) (let ((|olddelta#0@@3| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._1 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (let ((|newdelta#0@@3| (ValueMessage.Message.delta ($Unbox DatatypeTypeType (_System.Tuple2._0 (|#_System._tuple#2._#Make2| ($Box |newmessage#0@@1|) ($Box |oldmessage#0@@1|))))))) (|#ValueMessage.Message.Update| (ValueMessage.__default.CombineDeltas |newdelta#0@@3| |olddelta#0@@3|))))))))) :qid |MessageidfyValueMessage.36:25| :skolemid |4237| :pattern ( (ValueMessage.__default.Merge |newmessage#0@@1| |oldmessage#0@@1|)) ))))
(assert  (=> true (forall ((|newmessage#0@@2| T@U) (|oldmessage#0@@2| T@U) ) (!  (=> (and (and (= (type |newmessage#0@@2|) DatatypeTypeType) (= (type |oldmessage#0@@2|) DatatypeTypeType)) (or (|ValueMessage.__default.Merge#canCall| (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|)) (and ($Is |newmessage#0@@2| Tclass.ValueMessage.Message) ($Is |oldmessage#0@@2| Tclass.ValueMessage.Message)))) (and (and (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))) (=> (not (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))) (and (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|value#3| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|delta#3@@1| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|ValueMessage.__default.ApplyDelta#canCall| |delta#3@@1| |value#3|))))))) (=> (not (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|olddelta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (and (_System.Tuple2.___hMake2_q (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))) (let ((|newdelta#3| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (|ValueMessage.__default.CombineDeltas#canCall| |newdelta#3| |olddelta#3|))))))))) (= (ValueMessage.__default.Merge (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|)) (ite (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))) (let ((|newvalue#2| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (Lit (|#ValueMessage.Message.Define| |newvalue#2|))) (ite (ValueMessage.Message.Define_q (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|)))))))) (let ((|value#2| (Lit (ValueMessage.Message.value (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (let ((|delta#2@@1| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (Lit (|#ValueMessage.Message.Define| (Lit (ValueMessage.__default.ApplyDelta |delta#2@@1| |value#2|)))))) (let ((|olddelta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._1 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (let ((|newdelta#2| (Lit (ValueMessage.Message.delta (Lit ($Unbox DatatypeTypeType (_System.Tuple2._0 (Lit (|#_System._tuple#2._#Make2| ($Box (Lit |newmessage#0@@2|)) ($Box (Lit |oldmessage#0@@2|))))))))))) (Lit (|#ValueMessage.Message.Update| (Lit (ValueMessage.__default.CombineDeltas |newdelta#2| |olddelta#2|))))))))))) :qid |MessageidfyValueMessage.36:25| :weight 3 :skolemid |4238| :pattern ( (ValueMessage.__default.Merge (Lit |newmessage#0@@2|) (Lit |oldmessage#0@@2|))) ))))
(assert  (=> true (=> true ($Is ValueMessage.__default.IdentityMessage Tclass.ValueMessage.Message))))
(assert (= |ValueMessage.__default.IdentityMessage#requires| true))
(assert  (=> true (=> true (and |ValueMessage.__default.NopDelta#canCall| (= ValueMessage.__default.IdentityMessage (Lit (|#ValueMessage.Message.Update| (Lit ValueMessage.__default.NopDelta))))))))
(assert  (=> true (=> true (and |ValueMessage.__default.NopDelta#canCall| (= ValueMessage.__default.IdentityMessage (Lit (|#ValueMessage.Message.Update| (Lit ValueMessage.__default.NopDelta))))))))
(assert (= (type ValueMessage.__default.DefineDefault) DatatypeTypeType))
(assert  (=> true (=> true ($Is ValueMessage.__default.DefineDefault Tclass.ValueMessage.Message))))
(assert (= |ValueMessage.__default.DefineDefault#requires| true))
(assert  (=> true (=> true (and |ValueMessage.__default.DefaultValue#canCall| (= ValueMessage.__default.DefineDefault (Lit (|#ValueMessage.Message.Define| (Lit ValueMessage.__default.DefaultValue))))))))
(assert  (=> true (=> true (and |ValueMessage.__default.DefaultValue#canCall| (= ValueMessage.__default.DefineDefault (Lit (|#ValueMessage.Message.Define| (Lit ValueMessage.__default.DefaultValue))))))))
(assert (forall ((|a#0#0#0@@2| T@U) ) (!  (=> (= (type |a#0#0#0@@2|) (SeqType BoxType)) (= (DatatypeCtorId (|#ValueMessage.Message.Define| |a#0#0#0@@2|)) |##ValueMessage.Message.Define|)) :qid |MessageidfyValueMessage.26:14| :skolemid |4239| :pattern ( (|#ValueMessage.Message.Define| |a#0#0#0@@2|)) )))
(assert (forall ((d@@60 T@U) ) (!  (=> (= (type d@@60) DatatypeTypeType) (= (ValueMessage.Message.Define_q d@@60) (= (DatatypeCtorId d@@60) |##ValueMessage.Message.Define|))) :qid |unknown.0:0| :skolemid |4240| :pattern ( (ValueMessage.Message.Define_q d@@60)) )))
(assert (forall ((d@@61 T@U) ) (!  (=> (and (= (type d@@61) DatatypeTypeType) (ValueMessage.Message.Define_q d@@61)) (exists ((|a#1#0#0@@2| T@U) ) (!  (and (= (type |a#1#0#0@@2|) (SeqType BoxType)) (= d@@61 (|#ValueMessage.Message.Define| |a#1#0#0@@2|))) :qid |MessageidfyValueMessage.26:14| :skolemid |4241| :no-pattern (type |a#1#0#0@@2|) :no-pattern (U_2_int |a#1#0#0@@2|) :no-pattern (U_2_bool |a#1#0#0@@2|) ))) :qid |unknown.0:0| :skolemid |4242| :pattern ( (ValueMessage.Message.Define_q d@@61)) )))
(assert (forall ((|a#2#0#0@@2| T@U) ) (!  (=> (= (type |a#2#0#0@@2|) (SeqType BoxType)) (= ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@2|) Tclass.ValueMessage.Message) ($Is |a#2#0#0@@2| Tclass.ValueType.Value))) :qid |MessageidfyValueMessage.26:14| :skolemid |4243| :pattern ( ($Is (|#ValueMessage.Message.Define| |a#2#0#0@@2|) Tclass.ValueMessage.Message)) )))
(assert (forall ((|a#3#0#0@@2| T@U) ($h@@112 T@U) ) (!  (=> (and (and (= (type |a#3#0#0@@2|) (SeqType BoxType)) (= (type $h@@112) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@112)) (= ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@2|) Tclass.ValueMessage.Message $h@@112) ($IsAlloc |a#3#0#0@@2| Tclass.ValueType.Value $h@@112))) :qid |MessageidfyValueMessage.26:14| :skolemid |4244| :pattern ( ($IsAlloc (|#ValueMessage.Message.Define| |a#3#0#0@@2|) Tclass.ValueMessage.Message $h@@112)) )))
(assert (forall ((d@@62 T@U) ($h@@113 T@U) ) (!  (=> (and (and (= (type d@@62) DatatypeTypeType) (= (type $h@@113) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@113) (and (ValueMessage.Message.Define_q d@@62) ($IsAlloc d@@62 Tclass.ValueMessage.Message $h@@113)))) ($IsAlloc (ValueMessage.Message.value d@@62) Tclass.ValueType.Value $h@@113)) :qid |unknown.0:0| :skolemid |4245| :pattern ( ($IsAlloc (ValueMessage.Message.value d@@62) Tclass.ValueType.Value $h@@113)) )))
(assert (forall ((|a#4#0#0@@2| T@U) ) (!  (=> (= (type |a#4#0#0@@2|) (SeqType BoxType)) (= (|#ValueMessage.Message.Define| (Lit |a#4#0#0@@2|)) (Lit (|#ValueMessage.Message.Define| |a#4#0#0@@2|)))) :qid |MessageidfyValueMessage.26:14| :skolemid |4246| :pattern ( (|#ValueMessage.Message.Define| (Lit |a#4#0#0@@2|))) )))
(assert (forall ((|a#5#0#0@@3| T@U) ) (!  (=> (= (type |a#5#0#0@@3|) (SeqType BoxType)) (= (ValueMessage.Message.value (|#ValueMessage.Message.Define| |a#5#0#0@@3|)) |a#5#0#0@@3|)) :qid |MessageidfyValueMessage.26:14| :skolemid |4247| :pattern ( (|#ValueMessage.Message.Define| |a#5#0#0@@3|)) )))
(assert (forall ((|a#6#0#0@@3| T@U) ) (!  (=> (= (type |a#6#0#0@@3|) DatatypeTypeType) (= (DatatypeCtorId (|#ValueMessage.Message.Update| |a#6#0#0@@3|)) |##ValueMessage.Message.Update|)) :qid |MessageidfyValueMessage.27:14| :skolemid |4248| :pattern ( (|#ValueMessage.Message.Update| |a#6#0#0@@3|)) )))
(assert (forall ((d@@63 T@U) ) (!  (=> (= (type d@@63) DatatypeTypeType) (= (ValueMessage.Message.Update_q d@@63) (= (DatatypeCtorId d@@63) |##ValueMessage.Message.Update|))) :qid |unknown.0:0| :skolemid |4249| :pattern ( (ValueMessage.Message.Update_q d@@63)) )))
(assert (forall ((d@@64 T@U) ) (!  (=> (and (= (type d@@64) DatatypeTypeType) (ValueMessage.Message.Update_q d@@64)) (exists ((|a#7#0#0@@3| T@U) ) (!  (and (= (type |a#7#0#0@@3|) DatatypeTypeType) (= d@@64 (|#ValueMessage.Message.Update| |a#7#0#0@@3|))) :qid |MessageidfyValueMessage.27:14| :skolemid |4250| :no-pattern (type |a#7#0#0@@3|) :no-pattern (U_2_int |a#7#0#0@@3|) :no-pattern (U_2_bool |a#7#0#0@@3|) ))) :qid |unknown.0:0| :skolemid |4251| :pattern ( (ValueMessage.Message.Update_q d@@64)) )))
(assert (forall ((|a#8#0#0@@2| T@U) ) (!  (=> (= (type |a#8#0#0@@2|) DatatypeTypeType) (= ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@2|) Tclass.ValueMessage.Message) ($Is |a#8#0#0@@2| Tclass.ValueMessage.Delta))) :qid |MessageidfyValueMessage.27:14| :skolemid |4252| :pattern ( ($Is (|#ValueMessage.Message.Update| |a#8#0#0@@2|) Tclass.ValueMessage.Message)) )))
(assert (forall ((|a#9#0#0@@1| T@U) ($h@@114 T@U) ) (!  (=> (and (and (= (type |a#9#0#0@@1|) DatatypeTypeType) (= (type $h@@114) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@114)) (= ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@1|) Tclass.ValueMessage.Message $h@@114) ($IsAlloc |a#9#0#0@@1| Tclass.ValueMessage.Delta $h@@114))) :qid |MessageidfyValueMessage.27:14| :skolemid |4253| :pattern ( ($IsAlloc (|#ValueMessage.Message.Update| |a#9#0#0@@1|) Tclass.ValueMessage.Message $h@@114)) )))
(assert (forall ((d@@65 T@U) ($h@@115 T@U) ) (!  (=> (and (and (= (type d@@65) DatatypeTypeType) (= (type $h@@115) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@115) (and (ValueMessage.Message.Update_q d@@65) ($IsAlloc d@@65 Tclass.ValueMessage.Message $h@@115)))) ($IsAlloc (ValueMessage.Message.delta d@@65) Tclass.ValueMessage.Delta $h@@115)) :qid |unknown.0:0| :skolemid |4254| :pattern ( ($IsAlloc (ValueMessage.Message.delta d@@65) Tclass.ValueMessage.Delta $h@@115)) )))
(assert (forall ((|a#10#0#0@@1| T@U) ) (!  (=> (= (type |a#10#0#0@@1|) DatatypeTypeType) (= (|#ValueMessage.Message.Update| (Lit |a#10#0#0@@1|)) (Lit (|#ValueMessage.Message.Update| |a#10#0#0@@1|)))) :qid |MessageidfyValueMessage.27:14| :skolemid |4255| :pattern ( (|#ValueMessage.Message.Update| (Lit |a#10#0#0@@1|))) )))
(assert (forall ((|a#11#0#0@@1| T@U) ) (!  (=> (= (type |a#11#0#0@@1|) DatatypeTypeType) (= (ValueMessage.Message.delta (|#ValueMessage.Message.Update| |a#11#0#0@@1|)) |a#11#0#0@@1|)) :qid |MessageidfyValueMessage.27:14| :skolemid |4256| :pattern ( (|#ValueMessage.Message.Update| |a#11#0#0@@1|)) )))
(assert (forall ((|a#12#0#0@@0| T@U) ) (!  (=> (= (type |a#12#0#0@@0|) DatatypeTypeType) (< (DtRank |a#12#0#0@@0|) (DtRank (|#ValueMessage.Message.Update| |a#12#0#0@@0|)))) :qid |MessageidfyValueMessage.27:14| :skolemid |4257| :pattern ( (|#ValueMessage.Message.Update| |a#12#0#0@@0|)) )))
(assert (forall ((d@@66 T@U) ) (!  (=> (and (= (type d@@66) DatatypeTypeType) (|$IsA#ValueMessage.Message| d@@66)) (or (ValueMessage.Message.Define_q d@@66) (ValueMessage.Message.Update_q d@@66))) :qid |unknown.0:0| :skolemid |4258| :pattern ( (|$IsA#ValueMessage.Message| d@@66)) )))
(assert (forall ((d@@67 T@U) ) (!  (=> (and (= (type d@@67) DatatypeTypeType) ($Is d@@67 Tclass.ValueMessage.Message)) (or (ValueMessage.Message.Define_q d@@67) (ValueMessage.Message.Update_q d@@67))) :qid |unknown.0:0| :skolemid |4259| :pattern ( (ValueMessage.Message.Update_q d@@67) ($Is d@@67 Tclass.ValueMessage.Message)) :pattern ( (ValueMessage.Message.Define_q d@@67) ($Is d@@67 Tclass.ValueMessage.Message)) )))
(assert (forall ((a@@151 T@U) (b@@82 T@U) ) (!  (=> (and (and (= (type a@@151) DatatypeTypeType) (= (type b@@82) DatatypeTypeType)) (and (ValueMessage.Message.Define_q a@@151) (ValueMessage.Message.Define_q b@@82))) (= (|ValueMessage.Message#Equal| a@@151 b@@82) (|Seq#Equal| (ValueMessage.Message.value a@@151) (ValueMessage.Message.value b@@82)))) :qid |unknown.0:0| :skolemid |4260| :pattern ( (|ValueMessage.Message#Equal| a@@151 b@@82) (ValueMessage.Message.Define_q a@@151)) :pattern ( (|ValueMessage.Message#Equal| a@@151 b@@82) (ValueMessage.Message.Define_q b@@82)) )))
(assert (forall ((a@@152 T@U) (b@@83 T@U) ) (!  (=> (and (and (= (type a@@152) DatatypeTypeType) (= (type b@@83) DatatypeTypeType)) (and (ValueMessage.Message.Update_q a@@152) (ValueMessage.Message.Update_q b@@83))) (= (|ValueMessage.Message#Equal| a@@152 b@@83) (|ValueMessage.Delta#Equal| (ValueMessage.Message.delta a@@152) (ValueMessage.Message.delta b@@83)))) :qid |unknown.0:0| :skolemid |4261| :pattern ( (|ValueMessage.Message#Equal| a@@152 b@@83) (ValueMessage.Message.Update_q a@@152)) :pattern ( (|ValueMessage.Message#Equal| a@@152 b@@83) (ValueMessage.Message.Update_q b@@83)) )))
(assert (forall ((a@@153 T@U) (b@@84 T@U) ) (!  (=> (and (= (type a@@153) DatatypeTypeType) (= (type b@@84) DatatypeTypeType)) (= (|ValueMessage.Message#Equal| a@@153 b@@84) (= a@@153 b@@84))) :qid |unknown.0:0| :skolemid |4262| :pattern ( (|ValueMessage.Message#Equal| a@@153 b@@84)) )))
(assert (forall ((arg0@@669 T@U) ) (! (= (type (|#UI.RangeStart.SInclusive| arg0@@669)) DatatypeTypeType) :qid |funType:#UI.RangeStart.SInclusive| :pattern ( (|#UI.RangeStart.SInclusive| arg0@@669)) )))
(assert (forall ((|a#13#0#0@@0| T@U) ) (!  (=> (= (type |a#13#0#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeStart.SInclusive| |a#13#0#0@@0|)) |##UI.RangeStart.SInclusive|)) :qid |UIsdfy.20:36| :skolemid |4263| :pattern ( (|#UI.RangeStart.SInclusive| |a#13#0#0@@0|)) )))
(assert (forall ((d@@68 T@U) ) (!  (=> (= (type d@@68) DatatypeTypeType) (= (UI.RangeStart.SInclusive_q d@@68) (= (DatatypeCtorId d@@68) |##UI.RangeStart.SInclusive|))) :qid |unknown.0:0| :skolemid |4264| :pattern ( (UI.RangeStart.SInclusive_q d@@68)) )))
(assert (forall ((d@@69 T@U) ) (!  (=> (and (= (type d@@69) DatatypeTypeType) (UI.RangeStart.SInclusive_q d@@69)) (exists ((|a#14#0#0@@1| T@U) ) (!  (and (= (type |a#14#0#0@@1|) (SeqType BoxType)) (= d@@69 (|#UI.RangeStart.SInclusive| |a#14#0#0@@1|))) :qid |UIsdfy.20:36| :skolemid |4265| :no-pattern (type |a#14#0#0@@1|) :no-pattern (U_2_int |a#14#0#0@@1|) :no-pattern (U_2_bool |a#14#0#0@@1|) ))) :qid |unknown.0:0| :skolemid |4266| :pattern ( (UI.RangeStart.SInclusive_q d@@69)) )))
(assert (= (type Tclass.UI.RangeStart) TyType))
(assert (= (Tag Tclass.UI.RangeStart) Tagclass.UI.RangeStart))
(assert (= (TagFamily Tclass.UI.RangeStart) tytagFamily$RangeStart))
(assert (forall ((bx@@181 T@U) ) (!  (=> (and (= (type bx@@181) BoxType) ($IsBox bx@@181 Tclass.UI.RangeStart)) (and (= ($Box ($Unbox DatatypeTypeType bx@@181)) bx@@181) ($Is ($Unbox DatatypeTypeType bx@@181) Tclass.UI.RangeStart))) :qid |unknown.0:0| :skolemid |4267| :pattern ( ($IsBox bx@@181 Tclass.UI.RangeStart)) )))
(assert (forall ((|a#15#0#0@@1| T@U) ) (!  (=> (= (type |a#15#0#0@@1|) (SeqType BoxType)) (= ($Is (|#UI.RangeStart.SInclusive| |a#15#0#0@@1|) Tclass.UI.RangeStart) ($Is |a#15#0#0@@1| Tclass.KeyType.Key))) :qid |UIsdfy.20:36| :skolemid |4268| :pattern ( ($Is (|#UI.RangeStart.SInclusive| |a#15#0#0@@1|) Tclass.UI.RangeStart)) )))
(assert (forall ((|a#16#0#0@@1| T@U) ($h@@116 T@U) ) (!  (=> (and (and (= (type |a#16#0#0@@1|) (SeqType BoxType)) (= (type $h@@116) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@116)) (= ($IsAlloc (|#UI.RangeStart.SInclusive| |a#16#0#0@@1|) Tclass.UI.RangeStart $h@@116) ($IsAlloc |a#16#0#0@@1| Tclass.KeyType.Key $h@@116))) :qid |UIsdfy.20:36| :skolemid |4269| :pattern ( ($IsAlloc (|#UI.RangeStart.SInclusive| |a#16#0#0@@1|) Tclass.UI.RangeStart $h@@116)) )))
(assert (forall ((arg0@@670 T@U) ) (! (= (type (UI.RangeStart.key arg0@@670)) (SeqType BoxType)) :qid |funType:UI.RangeStart.key| :pattern ( (UI.RangeStart.key arg0@@670)) )))
(assert (forall ((d@@70 T@U) ($h@@117 T@U) ) (!  (=> (and (and (= (type d@@70) DatatypeTypeType) (= (type $h@@117) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@117) (and (UI.RangeStart.SInclusive_q d@@70) ($IsAlloc d@@70 Tclass.UI.RangeStart $h@@117)))) ($IsAlloc (UI.RangeStart.key d@@70) Tclass.KeyType.Key $h@@117)) :qid |unknown.0:0| :skolemid |4270| :pattern ( ($IsAlloc (UI.RangeStart.key d@@70) Tclass.KeyType.Key $h@@117)) )))
(assert (forall ((|a#17#0#0@@1| T@U) ) (!  (=> (= (type |a#17#0#0@@1|) (SeqType BoxType)) (= (|#UI.RangeStart.SInclusive| (Lit |a#17#0#0@@1|)) (Lit (|#UI.RangeStart.SInclusive| |a#17#0#0@@1|)))) :qid |UIsdfy.20:36| :skolemid |4271| :pattern ( (|#UI.RangeStart.SInclusive| (Lit |a#17#0#0@@1|))) )))
(assert (forall ((|a#18#0#0@@1| T@U) ) (!  (=> (= (type |a#18#0#0@@1|) (SeqType BoxType)) (= (UI.RangeStart.key (|#UI.RangeStart.SInclusive| |a#18#0#0@@1|)) |a#18#0#0@@1|)) :qid |UIsdfy.20:36| :skolemid |4272| :pattern ( (|#UI.RangeStart.SInclusive| |a#18#0#0@@1|)) )))
(assert (forall ((arg0@@671 T@U) ) (! (= (type (|#UI.RangeStart.SExclusive| arg0@@671)) DatatypeTypeType) :qid |funType:#UI.RangeStart.SExclusive| :pattern ( (|#UI.RangeStart.SExclusive| arg0@@671)) )))
(assert (forall ((|a#19#0#0@@1| T@U) ) (!  (=> (= (type |a#19#0#0@@1|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeStart.SExclusive| |a#19#0#0@@1|)) |##UI.RangeStart.SExclusive|)) :qid |UIsdfy.20:59| :skolemid |4273| :pattern ( (|#UI.RangeStart.SExclusive| |a#19#0#0@@1|)) )))
(assert (forall ((d@@71 T@U) ) (!  (=> (= (type d@@71) DatatypeTypeType) (= (UI.RangeStart.SExclusive_q d@@71) (= (DatatypeCtorId d@@71) |##UI.RangeStart.SExclusive|))) :qid |unknown.0:0| :skolemid |4274| :pattern ( (UI.RangeStart.SExclusive_q d@@71)) )))
(assert (forall ((d@@72 T@U) ) (!  (=> (and (= (type d@@72) DatatypeTypeType) (UI.RangeStart.SExclusive_q d@@72)) (exists ((|a#20#0#0@@1| T@U) ) (!  (and (= (type |a#20#0#0@@1|) (SeqType BoxType)) (= d@@72 (|#UI.RangeStart.SExclusive| |a#20#0#0@@1|))) :qid |UIsdfy.20:59| :skolemid |4275| :no-pattern (type |a#20#0#0@@1|) :no-pattern (U_2_int |a#20#0#0@@1|) :no-pattern (U_2_bool |a#20#0#0@@1|) ))) :qid |unknown.0:0| :skolemid |4276| :pattern ( (UI.RangeStart.SExclusive_q d@@72)) )))
(assert (forall ((|a#21#0#0@@0| T@U) ) (!  (=> (= (type |a#21#0#0@@0|) (SeqType BoxType)) (= ($Is (|#UI.RangeStart.SExclusive| |a#21#0#0@@0|) Tclass.UI.RangeStart) ($Is |a#21#0#0@@0| Tclass.KeyType.Key))) :qid |UIsdfy.20:59| :skolemid |4277| :pattern ( ($Is (|#UI.RangeStart.SExclusive| |a#21#0#0@@0|) Tclass.UI.RangeStart)) )))
(assert (forall ((|a#22#0#0@@0| T@U) ($h@@118 T@U) ) (!  (=> (and (and (= (type |a#22#0#0@@0|) (SeqType BoxType)) (= (type $h@@118) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@118)) (= ($IsAlloc (|#UI.RangeStart.SExclusive| |a#22#0#0@@0|) Tclass.UI.RangeStart $h@@118) ($IsAlloc |a#22#0#0@@0| Tclass.KeyType.Key $h@@118))) :qid |UIsdfy.20:59| :skolemid |4278| :pattern ( ($IsAlloc (|#UI.RangeStart.SExclusive| |a#22#0#0@@0|) Tclass.UI.RangeStart $h@@118)) )))
(assert (forall ((d@@73 T@U) ($h@@119 T@U) ) (!  (=> (and (and (= (type d@@73) DatatypeTypeType) (= (type $h@@119) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@119) (and (UI.RangeStart.SExclusive_q d@@73) ($IsAlloc d@@73 Tclass.UI.RangeStart $h@@119)))) ($IsAlloc (UI.RangeStart.key d@@73) Tclass.KeyType.Key $h@@119)) :qid |unknown.0:0| :skolemid |4279| :pattern ( ($IsAlloc (UI.RangeStart.key d@@73) Tclass.KeyType.Key $h@@119)) )))
(assert (forall ((|a#23#0#0@@0| T@U) ) (!  (=> (= (type |a#23#0#0@@0|) (SeqType BoxType)) (= (|#UI.RangeStart.SExclusive| (Lit |a#23#0#0@@0|)) (Lit (|#UI.RangeStart.SExclusive| |a#23#0#0@@0|)))) :qid |UIsdfy.20:59| :skolemid |4280| :pattern ( (|#UI.RangeStart.SExclusive| (Lit |a#23#0#0@@0|))) )))
(assert (forall ((|a#24#0#0@@0| T@U) ) (!  (=> (= (type |a#24#0#0@@0|) (SeqType BoxType)) (= (UI.RangeStart.key (|#UI.RangeStart.SExclusive| |a#24#0#0@@0|)) |a#24#0#0@@0|)) :qid |UIsdfy.20:59| :skolemid |4281| :pattern ( (|#UI.RangeStart.SExclusive| |a#24#0#0@@0|)) )))
(assert (= (type |#UI.RangeStart.NegativeInf|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.RangeStart.NegativeInf|) |##UI.RangeStart.NegativeInf|))
(assert (forall ((d@@74 T@U) ) (!  (=> (= (type d@@74) DatatypeTypeType) (= (UI.RangeStart.NegativeInf_q d@@74) (= (DatatypeCtorId d@@74) |##UI.RangeStart.NegativeInf|))) :qid |unknown.0:0| :skolemid |4282| :pattern ( (UI.RangeStart.NegativeInf_q d@@74)) )))
(assert (forall ((d@@75 T@U) ) (!  (=> (and (= (type d@@75) DatatypeTypeType) (UI.RangeStart.NegativeInf_q d@@75)) (= d@@75 |#UI.RangeStart.NegativeInf|)) :qid |unknown.0:0| :skolemid |4283| :pattern ( (UI.RangeStart.NegativeInf_q d@@75)) )))
(assert ($Is |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart))
(assert (forall (($h@@120 T@U) ) (!  (=> (and (= (type $h@@120) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@120)) ($IsAlloc |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart $h@@120)) :qid |DafnyPreludebpl.545:12| :skolemid |4284| :pattern ( ($IsAlloc |#UI.RangeStart.NegativeInf| Tclass.UI.RangeStart $h@@120)) )))
(assert (= |#UI.RangeStart.NegativeInf| (Lit |#UI.RangeStart.NegativeInf|)))
(assert (forall ((d@@76 T@U) ) (!  (=> (and (= (type d@@76) DatatypeTypeType) (|$IsA#UI.RangeStart| d@@76)) (or (or (UI.RangeStart.SInclusive_q d@@76) (UI.RangeStart.SExclusive_q d@@76)) (UI.RangeStart.NegativeInf_q d@@76))) :qid |unknown.0:0| :skolemid |4285| :pattern ( (|$IsA#UI.RangeStart| d@@76)) )))
(assert (forall ((d@@77 T@U) ) (!  (=> (and (= (type d@@77) DatatypeTypeType) ($Is d@@77 Tclass.UI.RangeStart)) (or (or (UI.RangeStart.SInclusive_q d@@77) (UI.RangeStart.SExclusive_q d@@77)) (UI.RangeStart.NegativeInf_q d@@77))) :qid |unknown.0:0| :skolemid |4286| :pattern ( (UI.RangeStart.NegativeInf_q d@@77) ($Is d@@77 Tclass.UI.RangeStart)) :pattern ( (UI.RangeStart.SExclusive_q d@@77) ($Is d@@77 Tclass.UI.RangeStart)) :pattern ( (UI.RangeStart.SInclusive_q d@@77) ($Is d@@77 Tclass.UI.RangeStart)) )))
(assert (forall ((a@@154 T@U) (b@@85 T@U) ) (!  (=> (and (and (= (type a@@154) DatatypeTypeType) (= (type b@@85) DatatypeTypeType)) (and (UI.RangeStart.SInclusive_q a@@154) (UI.RangeStart.SInclusive_q b@@85))) (= (|UI.RangeStart#Equal| a@@154 b@@85) (|Seq#Equal| (UI.RangeStart.key a@@154) (UI.RangeStart.key b@@85)))) :qid |unknown.0:0| :skolemid |4287| :pattern ( (|UI.RangeStart#Equal| a@@154 b@@85) (UI.RangeStart.SInclusive_q a@@154)) :pattern ( (|UI.RangeStart#Equal| a@@154 b@@85) (UI.RangeStart.SInclusive_q b@@85)) )))
(assert (forall ((a@@155 T@U) (b@@86 T@U) ) (!  (=> (and (and (= (type a@@155) DatatypeTypeType) (= (type b@@86) DatatypeTypeType)) (and (UI.RangeStart.SExclusive_q a@@155) (UI.RangeStart.SExclusive_q b@@86))) (= (|UI.RangeStart#Equal| a@@155 b@@86) (|Seq#Equal| (UI.RangeStart.key a@@155) (UI.RangeStart.key b@@86)))) :qid |unknown.0:0| :skolemid |4288| :pattern ( (|UI.RangeStart#Equal| a@@155 b@@86) (UI.RangeStart.SExclusive_q a@@155)) :pattern ( (|UI.RangeStart#Equal| a@@155 b@@86) (UI.RangeStart.SExclusive_q b@@86)) )))
(assert (forall ((a@@156 T@U) (b@@87 T@U) ) (!  (=> (and (and (= (type a@@156) DatatypeTypeType) (= (type b@@87) DatatypeTypeType)) (and (UI.RangeStart.NegativeInf_q a@@156) (UI.RangeStart.NegativeInf_q b@@87))) (= (|UI.RangeStart#Equal| a@@156 b@@87) true)) :qid |unknown.0:0| :skolemid |4289| :pattern ( (|UI.RangeStart#Equal| a@@156 b@@87) (UI.RangeStart.NegativeInf_q a@@156)) :pattern ( (|UI.RangeStart#Equal| a@@156 b@@87) (UI.RangeStart.NegativeInf_q b@@87)) )))
(assert (forall ((a@@157 T@U) (b@@88 T@U) ) (!  (=> (and (= (type a@@157) DatatypeTypeType) (= (type b@@88) DatatypeTypeType)) (= (|UI.RangeStart#Equal| a@@157 b@@88) (= a@@157 b@@88))) :qid |unknown.0:0| :skolemid |4290| :pattern ( (|UI.RangeStart#Equal| a@@157 b@@88)) )))
(assert (forall ((arg0@@672 T@U) ) (! (= (type (|#UI.RangeEnd.EInclusive| arg0@@672)) DatatypeTypeType) :qid |funType:#UI.RangeEnd.EInclusive| :pattern ( (|#UI.RangeEnd.EInclusive| arg0@@672)) )))
(assert (forall ((|a#30#0#0@@0| T@U) ) (!  (=> (= (type |a#30#0#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeEnd.EInclusive| |a#30#0#0@@0|)) |##UI.RangeEnd.EInclusive|)) :qid |UIsdfy.21:34| :skolemid |4291| :pattern ( (|#UI.RangeEnd.EInclusive| |a#30#0#0@@0|)) )))
(assert (forall ((d@@78 T@U) ) (!  (=> (= (type d@@78) DatatypeTypeType) (= (UI.RangeEnd.EInclusive_q d@@78) (= (DatatypeCtorId d@@78) |##UI.RangeEnd.EInclusive|))) :qid |unknown.0:0| :skolemid |4292| :pattern ( (UI.RangeEnd.EInclusive_q d@@78)) )))
(assert (forall ((d@@79 T@U) ) (!  (=> (and (= (type d@@79) DatatypeTypeType) (UI.RangeEnd.EInclusive_q d@@79)) (exists ((|a#31#0#0@@0| T@U) ) (!  (and (= (type |a#31#0#0@@0|) (SeqType BoxType)) (= d@@79 (|#UI.RangeEnd.EInclusive| |a#31#0#0@@0|))) :qid |UIsdfy.21:34| :skolemid |4293| :no-pattern (type |a#31#0#0@@0|) :no-pattern (U_2_int |a#31#0#0@@0|) :no-pattern (U_2_bool |a#31#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |4294| :pattern ( (UI.RangeEnd.EInclusive_q d@@79)) )))
(assert (= (type Tclass.UI.RangeEnd) TyType))
(assert (= (Tag Tclass.UI.RangeEnd) Tagclass.UI.RangeEnd))
(assert (= (TagFamily Tclass.UI.RangeEnd) tytagFamily$RangeEnd))
(assert (forall ((bx@@182 T@U) ) (!  (=> (and (= (type bx@@182) BoxType) ($IsBox bx@@182 Tclass.UI.RangeEnd)) (and (= ($Box ($Unbox DatatypeTypeType bx@@182)) bx@@182) ($Is ($Unbox DatatypeTypeType bx@@182) Tclass.UI.RangeEnd))) :qid |unknown.0:0| :skolemid |4295| :pattern ( ($IsBox bx@@182 Tclass.UI.RangeEnd)) )))
(assert (forall ((|a#32#0#0@@0| T@U) ) (!  (=> (= (type |a#32#0#0@@0|) (SeqType BoxType)) (= ($Is (|#UI.RangeEnd.EInclusive| |a#32#0#0@@0|) Tclass.UI.RangeEnd) ($Is |a#32#0#0@@0| Tclass.KeyType.Key))) :qid |UIsdfy.21:34| :skolemid |4296| :pattern ( ($Is (|#UI.RangeEnd.EInclusive| |a#32#0#0@@0|) Tclass.UI.RangeEnd)) )))
(assert (forall ((|a#33#0#0@@0| T@U) ($h@@121 T@U) ) (!  (=> (and (and (= (type |a#33#0#0@@0|) (SeqType BoxType)) (= (type $h@@121) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@121)) (= ($IsAlloc (|#UI.RangeEnd.EInclusive| |a#33#0#0@@0|) Tclass.UI.RangeEnd $h@@121) ($IsAlloc |a#33#0#0@@0| Tclass.KeyType.Key $h@@121))) :qid |UIsdfy.21:34| :skolemid |4297| :pattern ( ($IsAlloc (|#UI.RangeEnd.EInclusive| |a#33#0#0@@0|) Tclass.UI.RangeEnd $h@@121)) )))
(assert (forall ((arg0@@673 T@U) ) (! (= (type (UI.RangeEnd.key arg0@@673)) (SeqType BoxType)) :qid |funType:UI.RangeEnd.key| :pattern ( (UI.RangeEnd.key arg0@@673)) )))
(assert (forall ((d@@80 T@U) ($h@@122 T@U) ) (!  (=> (and (and (= (type d@@80) DatatypeTypeType) (= (type $h@@122) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@122) (and (UI.RangeEnd.EInclusive_q d@@80) ($IsAlloc d@@80 Tclass.UI.RangeEnd $h@@122)))) ($IsAlloc (UI.RangeEnd.key d@@80) Tclass.KeyType.Key $h@@122)) :qid |unknown.0:0| :skolemid |4298| :pattern ( ($IsAlloc (UI.RangeEnd.key d@@80) Tclass.KeyType.Key $h@@122)) )))
(assert (forall ((|a#34#0#0@@0| T@U) ) (!  (=> (= (type |a#34#0#0@@0|) (SeqType BoxType)) (= (|#UI.RangeEnd.EInclusive| (Lit |a#34#0#0@@0|)) (Lit (|#UI.RangeEnd.EInclusive| |a#34#0#0@@0|)))) :qid |UIsdfy.21:34| :skolemid |4299| :pattern ( (|#UI.RangeEnd.EInclusive| (Lit |a#34#0#0@@0|))) )))
(assert (forall ((|a#35#0#0@@0| T@U) ) (!  (=> (= (type |a#35#0#0@@0|) (SeqType BoxType)) (= (UI.RangeEnd.key (|#UI.RangeEnd.EInclusive| |a#35#0#0@@0|)) |a#35#0#0@@0|)) :qid |UIsdfy.21:34| :skolemid |4300| :pattern ( (|#UI.RangeEnd.EInclusive| |a#35#0#0@@0|)) )))
(assert (forall ((arg0@@674 T@U) ) (! (= (type (|#UI.RangeEnd.EExclusive| arg0@@674)) DatatypeTypeType) :qid |funType:#UI.RangeEnd.EExclusive| :pattern ( (|#UI.RangeEnd.EExclusive| arg0@@674)) )))
(assert (forall ((|a#36#0#0@@0| T@U) ) (!  (=> (= (type |a#36#0#0@@0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.RangeEnd.EExclusive| |a#36#0#0@@0|)) |##UI.RangeEnd.EExclusive|)) :qid |UIsdfy.21:57| :skolemid |4301| :pattern ( (|#UI.RangeEnd.EExclusive| |a#36#0#0@@0|)) )))
(assert (forall ((d@@81 T@U) ) (!  (=> (= (type d@@81) DatatypeTypeType) (= (UI.RangeEnd.EExclusive_q d@@81) (= (DatatypeCtorId d@@81) |##UI.RangeEnd.EExclusive|))) :qid |unknown.0:0| :skolemid |4302| :pattern ( (UI.RangeEnd.EExclusive_q d@@81)) )))
(assert (forall ((d@@82 T@U) ) (!  (=> (and (= (type d@@82) DatatypeTypeType) (UI.RangeEnd.EExclusive_q d@@82)) (exists ((|a#37#0#0@@0| T@U) ) (!  (and (= (type |a#37#0#0@@0|) (SeqType BoxType)) (= d@@82 (|#UI.RangeEnd.EExclusive| |a#37#0#0@@0|))) :qid |UIsdfy.21:57| :skolemid |4303| :no-pattern (type |a#37#0#0@@0|) :no-pattern (U_2_int |a#37#0#0@@0|) :no-pattern (U_2_bool |a#37#0#0@@0|) ))) :qid |unknown.0:0| :skolemid |4304| :pattern ( (UI.RangeEnd.EExclusive_q d@@82)) )))
(assert (forall ((|a#38#0#0@@0| T@U) ) (!  (=> (= (type |a#38#0#0@@0|) (SeqType BoxType)) (= ($Is (|#UI.RangeEnd.EExclusive| |a#38#0#0@@0|) Tclass.UI.RangeEnd) ($Is |a#38#0#0@@0| Tclass.KeyType.Key))) :qid |UIsdfy.21:57| :skolemid |4305| :pattern ( ($Is (|#UI.RangeEnd.EExclusive| |a#38#0#0@@0|) Tclass.UI.RangeEnd)) )))
(assert (forall ((|a#39#0#0@@0| T@U) ($h@@123 T@U) ) (!  (=> (and (and (= (type |a#39#0#0@@0|) (SeqType BoxType)) (= (type $h@@123) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@123)) (= ($IsAlloc (|#UI.RangeEnd.EExclusive| |a#39#0#0@@0|) Tclass.UI.RangeEnd $h@@123) ($IsAlloc |a#39#0#0@@0| Tclass.KeyType.Key $h@@123))) :qid |UIsdfy.21:57| :skolemid |4306| :pattern ( ($IsAlloc (|#UI.RangeEnd.EExclusive| |a#39#0#0@@0|) Tclass.UI.RangeEnd $h@@123)) )))
(assert (forall ((d@@83 T@U) ($h@@124 T@U) ) (!  (=> (and (and (= (type d@@83) DatatypeTypeType) (= (type $h@@124) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@124) (and (UI.RangeEnd.EExclusive_q d@@83) ($IsAlloc d@@83 Tclass.UI.RangeEnd $h@@124)))) ($IsAlloc (UI.RangeEnd.key d@@83) Tclass.KeyType.Key $h@@124)) :qid |unknown.0:0| :skolemid |4307| :pattern ( ($IsAlloc (UI.RangeEnd.key d@@83) Tclass.KeyType.Key $h@@124)) )))
(assert (forall ((|a#40#0#0@@0| T@U) ) (!  (=> (= (type |a#40#0#0@@0|) (SeqType BoxType)) (= (|#UI.RangeEnd.EExclusive| (Lit |a#40#0#0@@0|)) (Lit (|#UI.RangeEnd.EExclusive| |a#40#0#0@@0|)))) :qid |UIsdfy.21:57| :skolemid |4308| :pattern ( (|#UI.RangeEnd.EExclusive| (Lit |a#40#0#0@@0|))) )))
(assert (forall ((|a#41#0#0@@0| T@U) ) (!  (=> (= (type |a#41#0#0@@0|) (SeqType BoxType)) (= (UI.RangeEnd.key (|#UI.RangeEnd.EExclusive| |a#41#0#0@@0|)) |a#41#0#0@@0|)) :qid |UIsdfy.21:57| :skolemid |4309| :pattern ( (|#UI.RangeEnd.EExclusive| |a#41#0#0@@0|)) )))
(assert (= (type |#UI.RangeEnd.PositiveInf|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.RangeEnd.PositiveInf|) |##UI.RangeEnd.PositiveInf|))
(assert (forall ((d@@84 T@U) ) (!  (=> (= (type d@@84) DatatypeTypeType) (= (UI.RangeEnd.PositiveInf_q d@@84) (= (DatatypeCtorId d@@84) |##UI.RangeEnd.PositiveInf|))) :qid |unknown.0:0| :skolemid |4310| :pattern ( (UI.RangeEnd.PositiveInf_q d@@84)) )))
(assert (forall ((d@@85 T@U) ) (!  (=> (and (= (type d@@85) DatatypeTypeType) (UI.RangeEnd.PositiveInf_q d@@85)) (= d@@85 |#UI.RangeEnd.PositiveInf|)) :qid |unknown.0:0| :skolemid |4311| :pattern ( (UI.RangeEnd.PositiveInf_q d@@85)) )))
(assert ($Is |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd))
(assert (forall (($h@@125 T@U) ) (!  (=> (and (= (type $h@@125) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@125)) ($IsAlloc |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd $h@@125)) :qid |DafnyPreludebpl.545:12| :skolemid |4312| :pattern ( ($IsAlloc |#UI.RangeEnd.PositiveInf| Tclass.UI.RangeEnd $h@@125)) )))
(assert (= |#UI.RangeEnd.PositiveInf| (Lit |#UI.RangeEnd.PositiveInf|)))
(assert (forall ((d@@86 T@U) ) (!  (=> (and (= (type d@@86) DatatypeTypeType) (|$IsA#UI.RangeEnd| d@@86)) (or (or (UI.RangeEnd.EInclusive_q d@@86) (UI.RangeEnd.EExclusive_q d@@86)) (UI.RangeEnd.PositiveInf_q d@@86))) :qid |unknown.0:0| :skolemid |4313| :pattern ( (|$IsA#UI.RangeEnd| d@@86)) )))
(assert (forall ((d@@87 T@U) ) (!  (=> (and (= (type d@@87) DatatypeTypeType) ($Is d@@87 Tclass.UI.RangeEnd)) (or (or (UI.RangeEnd.EInclusive_q d@@87) (UI.RangeEnd.EExclusive_q d@@87)) (UI.RangeEnd.PositiveInf_q d@@87))) :qid |unknown.0:0| :skolemid |4314| :pattern ( (UI.RangeEnd.PositiveInf_q d@@87) ($Is d@@87 Tclass.UI.RangeEnd)) :pattern ( (UI.RangeEnd.EExclusive_q d@@87) ($Is d@@87 Tclass.UI.RangeEnd)) :pattern ( (UI.RangeEnd.EInclusive_q d@@87) ($Is d@@87 Tclass.UI.RangeEnd)) )))
(assert (forall ((a@@158 T@U) (b@@89 T@U) ) (!  (=> (and (and (= (type a@@158) DatatypeTypeType) (= (type b@@89) DatatypeTypeType)) (and (UI.RangeEnd.EInclusive_q a@@158) (UI.RangeEnd.EInclusive_q b@@89))) (= (|UI.RangeEnd#Equal| a@@158 b@@89) (|Seq#Equal| (UI.RangeEnd.key a@@158) (UI.RangeEnd.key b@@89)))) :qid |unknown.0:0| :skolemid |4315| :pattern ( (|UI.RangeEnd#Equal| a@@158 b@@89) (UI.RangeEnd.EInclusive_q a@@158)) :pattern ( (|UI.RangeEnd#Equal| a@@158 b@@89) (UI.RangeEnd.EInclusive_q b@@89)) )))
(assert (forall ((a@@159 T@U) (b@@90 T@U) ) (!  (=> (and (and (= (type a@@159) DatatypeTypeType) (= (type b@@90) DatatypeTypeType)) (and (UI.RangeEnd.EExclusive_q a@@159) (UI.RangeEnd.EExclusive_q b@@90))) (= (|UI.RangeEnd#Equal| a@@159 b@@90) (|Seq#Equal| (UI.RangeEnd.key a@@159) (UI.RangeEnd.key b@@90)))) :qid |unknown.0:0| :skolemid |4316| :pattern ( (|UI.RangeEnd#Equal| a@@159 b@@90) (UI.RangeEnd.EExclusive_q a@@159)) :pattern ( (|UI.RangeEnd#Equal| a@@159 b@@90) (UI.RangeEnd.EExclusive_q b@@90)) )))
(assert (forall ((a@@160 T@U) (b@@91 T@U) ) (!  (=> (and (and (= (type a@@160) DatatypeTypeType) (= (type b@@91) DatatypeTypeType)) (and (UI.RangeEnd.PositiveInf_q a@@160) (UI.RangeEnd.PositiveInf_q b@@91))) (= (|UI.RangeEnd#Equal| a@@160 b@@91) true)) :qid |unknown.0:0| :skolemid |4317| :pattern ( (|UI.RangeEnd#Equal| a@@160 b@@91) (UI.RangeEnd.PositiveInf_q a@@160)) :pattern ( (|UI.RangeEnd#Equal| a@@160 b@@91) (UI.RangeEnd.PositiveInf_q b@@91)) )))
(assert (forall ((a@@161 T@U) (b@@92 T@U) ) (!  (=> (and (= (type a@@161) DatatypeTypeType) (= (type b@@92) DatatypeTypeType)) (= (|UI.RangeEnd#Equal| a@@161 b@@92) (= a@@161 b@@92))) :qid |unknown.0:0| :skolemid |4318| :pattern ( (|UI.RangeEnd#Equal| a@@161 b@@92)) )))
(assert (forall ((arg0@@675 T@U) (arg1@@348 T@U) ) (! (= (type (|#UI.SuccResult.SuccResult| arg0@@675 arg1@@348)) DatatypeTypeType) :qid |funType:#UI.SuccResult.SuccResult| :pattern ( (|#UI.SuccResult.SuccResult| arg0@@675 arg1@@348)) )))
(assert (forall ((|a#47#0#0@@0| T@U) (|a#47#1#0@@0| T@U) ) (!  (=> (and (= (type |a#47#0#0@@0|) (SeqType BoxType)) (= (type |a#47#1#0@@0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.SuccResult.SuccResult| |a#47#0#0@@0| |a#47#1#0@@0|)) |##UI.SuccResult.SuccResult|)) :qid |UIsdfy.23:36| :skolemid |4319| :pattern ( (|#UI.SuccResult.SuccResult| |a#47#0#0@@0| |a#47#1#0@@0|)) )))
(assert (forall ((d@@88 T@U) ) (!  (=> (= (type d@@88) DatatypeTypeType) (= (UI.SuccResult.SuccResult_q d@@88) (= (DatatypeCtorId d@@88) |##UI.SuccResult.SuccResult|))) :qid |unknown.0:0| :skolemid |4320| :pattern ( (UI.SuccResult.SuccResult_q d@@88)) )))
(assert (forall ((d@@89 T@U) ) (!  (=> (and (= (type d@@89) DatatypeTypeType) (UI.SuccResult.SuccResult_q d@@89)) (exists ((|a#48#0#0| T@U) (|a#48#1#0| T@U) ) (!  (and (and (= (type |a#48#0#0|) (SeqType BoxType)) (= (type |a#48#1#0|) (SeqType BoxType))) (= d@@89 (|#UI.SuccResult.SuccResult| |a#48#0#0| |a#48#1#0|))) :qid |UIsdfy.23:36| :skolemid |4321| :no-pattern (type |a#48#0#0|) :no-pattern (type |a#48#1#0|) :no-pattern (U_2_int |a#48#0#0|) :no-pattern (U_2_bool |a#48#0#0|) :no-pattern (U_2_int |a#48#1#0|) :no-pattern (U_2_bool |a#48#1#0|) ))) :qid |unknown.0:0| :skolemid |4322| :pattern ( (UI.SuccResult.SuccResult_q d@@89)) )))
(assert (= (type Tclass.UI.SuccResult) TyType))
(assert (= (Tag Tclass.UI.SuccResult) Tagclass.UI.SuccResult))
(assert (= (TagFamily Tclass.UI.SuccResult) tytagFamily$SuccResult))
(assert (forall ((bx@@183 T@U) ) (!  (=> (and (= (type bx@@183) BoxType) ($IsBox bx@@183 Tclass.UI.SuccResult)) (and (= ($Box ($Unbox DatatypeTypeType bx@@183)) bx@@183) ($Is ($Unbox DatatypeTypeType bx@@183) Tclass.UI.SuccResult))) :qid |unknown.0:0| :skolemid |4323| :pattern ( ($IsBox bx@@183 Tclass.UI.SuccResult)) )))
(assert (forall ((|a#49#0#0| T@U) (|a#49#1#0| T@U) ) (!  (=> (and (= (type |a#49#0#0|) (SeqType BoxType)) (= (type |a#49#1#0|) (SeqType BoxType))) (= ($Is (|#UI.SuccResult.SuccResult| |a#49#0#0| |a#49#1#0|) Tclass.UI.SuccResult)  (and ($Is |a#49#0#0| Tclass.KeyType.Key) ($Is |a#49#1#0| Tclass.ValueType.Value)))) :qid |UIsdfy.23:36| :skolemid |4324| :pattern ( ($Is (|#UI.SuccResult.SuccResult| |a#49#0#0| |a#49#1#0|) Tclass.UI.SuccResult)) )))
(assert (forall ((|a#50#0#0| T@U) (|a#50#1#0| T@U) ($h@@126 T@U) ) (!  (=> (and (and (and (= (type |a#50#0#0|) (SeqType BoxType)) (= (type |a#50#1#0|) (SeqType BoxType))) (= (type $h@@126) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@126)) (= ($IsAlloc (|#UI.SuccResult.SuccResult| |a#50#0#0| |a#50#1#0|) Tclass.UI.SuccResult $h@@126)  (and ($IsAlloc |a#50#0#0| Tclass.KeyType.Key $h@@126) ($IsAlloc |a#50#1#0| Tclass.ValueType.Value $h@@126)))) :qid |UIsdfy.23:36| :skolemid |4325| :pattern ( ($IsAlloc (|#UI.SuccResult.SuccResult| |a#50#0#0| |a#50#1#0|) Tclass.UI.SuccResult $h@@126)) )))
(assert (forall ((arg0@@676 T@U) ) (! (= (type (UI.SuccResult.key arg0@@676)) (SeqType BoxType)) :qid |funType:UI.SuccResult.key| :pattern ( (UI.SuccResult.key arg0@@676)) )))
(assert (forall ((d@@90 T@U) ($h@@127 T@U) ) (!  (=> (and (and (= (type d@@90) DatatypeTypeType) (= (type $h@@127) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@127) (and (UI.SuccResult.SuccResult_q d@@90) ($IsAlloc d@@90 Tclass.UI.SuccResult $h@@127)))) ($IsAlloc (UI.SuccResult.key d@@90) Tclass.KeyType.Key $h@@127)) :qid |unknown.0:0| :skolemid |4326| :pattern ( ($IsAlloc (UI.SuccResult.key d@@90) Tclass.KeyType.Key $h@@127)) )))
(assert (forall ((arg0@@677 T@U) ) (! (= (type (UI.SuccResult.value arg0@@677)) (SeqType BoxType)) :qid |funType:UI.SuccResult.value| :pattern ( (UI.SuccResult.value arg0@@677)) )))
(assert (forall ((d@@91 T@U) ($h@@128 T@U) ) (!  (=> (and (and (= (type d@@91) DatatypeTypeType) (= (type $h@@128) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@128) (and (UI.SuccResult.SuccResult_q d@@91) ($IsAlloc d@@91 Tclass.UI.SuccResult $h@@128)))) ($IsAlloc (UI.SuccResult.value d@@91) Tclass.ValueType.Value $h@@128)) :qid |unknown.0:0| :skolemid |4327| :pattern ( ($IsAlloc (UI.SuccResult.value d@@91) Tclass.ValueType.Value $h@@128)) )))
(assert (forall ((|a#51#0#0| T@U) (|a#51#1#0| T@U) ) (!  (=> (and (= (type |a#51#0#0|) (SeqType BoxType)) (= (type |a#51#1#0|) (SeqType BoxType))) (= (|#UI.SuccResult.SuccResult| (Lit |a#51#0#0|) (Lit |a#51#1#0|)) (Lit (|#UI.SuccResult.SuccResult| |a#51#0#0| |a#51#1#0|)))) :qid |UIsdfy.23:36| :skolemid |4328| :pattern ( (|#UI.SuccResult.SuccResult| (Lit |a#51#0#0|) (Lit |a#51#1#0|))) )))
(assert (forall ((|a#52#0#0| T@U) (|a#52#1#0| T@U) ) (!  (=> (and (= (type |a#52#0#0|) (SeqType BoxType)) (= (type |a#52#1#0|) (SeqType BoxType))) (= (UI.SuccResult.key (|#UI.SuccResult.SuccResult| |a#52#0#0| |a#52#1#0|)) |a#52#0#0|)) :qid |UIsdfy.23:36| :skolemid |4329| :pattern ( (|#UI.SuccResult.SuccResult| |a#52#0#0| |a#52#1#0|)) )))
(assert (forall ((|a#53#0#0| T@U) (|a#53#1#0| T@U) ) (!  (=> (and (= (type |a#53#0#0|) (SeqType BoxType)) (= (type |a#53#1#0|) (SeqType BoxType))) (= (UI.SuccResult.value (|#UI.SuccResult.SuccResult| |a#53#0#0| |a#53#1#0|)) |a#53#1#0|)) :qid |UIsdfy.23:36| :skolemid |4330| :pattern ( (|#UI.SuccResult.SuccResult| |a#53#0#0| |a#53#1#0|)) )))
(assert (forall ((d@@92 T@U) ) (!  (=> (and (= (type d@@92) DatatypeTypeType) (|$IsA#UI.SuccResult| d@@92)) (UI.SuccResult.SuccResult_q d@@92)) :qid |unknown.0:0| :skolemid |4331| :pattern ( (|$IsA#UI.SuccResult| d@@92)) )))
(assert (forall ((d@@93 T@U) ) (!  (=> (and (= (type d@@93) DatatypeTypeType) ($Is d@@93 Tclass.UI.SuccResult)) (UI.SuccResult.SuccResult_q d@@93)) :qid |unknown.0:0| :skolemid |4332| :pattern ( (UI.SuccResult.SuccResult_q d@@93) ($Is d@@93 Tclass.UI.SuccResult)) )))
(assert (forall ((a@@162 T@U) (b@@93 T@U) ) (!  (=> (and (and (= (type a@@162) DatatypeTypeType) (= (type b@@93) DatatypeTypeType)) true) (= (|UI.SuccResult#Equal| a@@162 b@@93)  (and (|Seq#Equal| (UI.SuccResult.key a@@162) (UI.SuccResult.key b@@93)) (|Seq#Equal| (UI.SuccResult.value a@@162) (UI.SuccResult.value b@@93))))) :qid |unknown.0:0| :skolemid |4333| :pattern ( (|UI.SuccResult#Equal| a@@162 b@@93)) )))
(assert (forall ((a@@163 T@U) (b@@94 T@U) ) (!  (=> (and (= (type a@@163) DatatypeTypeType) (= (type b@@94) DatatypeTypeType)) (= (|UI.SuccResult#Equal| a@@163 b@@94) (= a@@163 b@@94))) :qid |unknown.0:0| :skolemid |4334| :pattern ( (|UI.SuccResult#Equal| a@@163 b@@94)) )))
(assert (forall ((arg0@@678 T@U) (arg1@@349 T@U) ) (! (= (type (|#UI.SuccResultList.SuccResultList| arg0@@678 arg1@@349)) DatatypeTypeType) :qid |funType:#UI.SuccResultList.SuccResultList| :pattern ( (|#UI.SuccResultList.SuccResultList| arg0@@678 arg1@@349)) )))
(assert (forall ((|a#54#0#0| T@U) (|a#54#1#0| T@U) ) (!  (=> (and (= (type |a#54#0#0|) (SeqType BoxType)) (= (type |a#54#1#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#UI.SuccResultList.SuccResultList| |a#54#0#0| |a#54#1#0|)) |##UI.SuccResultList.SuccResultList|)) :qid |UIsdfy.24:44| :skolemid |4335| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#54#0#0| |a#54#1#0|)) )))
(assert (forall ((d@@94 T@U) ) (!  (=> (= (type d@@94) DatatypeTypeType) (= (UI.SuccResultList.SuccResultList_q d@@94) (= (DatatypeCtorId d@@94) |##UI.SuccResultList.SuccResultList|))) :qid |unknown.0:0| :skolemid |4336| :pattern ( (UI.SuccResultList.SuccResultList_q d@@94)) )))
(assert (forall ((d@@95 T@U) ) (!  (=> (and (= (type d@@95) DatatypeTypeType) (UI.SuccResultList.SuccResultList_q d@@95)) (exists ((|a#55#0#0| T@U) (|a#55#1#0| T@U) ) (!  (and (and (= (type |a#55#0#0|) (SeqType BoxType)) (= (type |a#55#1#0|) DatatypeTypeType)) (= d@@95 (|#UI.SuccResultList.SuccResultList| |a#55#0#0| |a#55#1#0|))) :qid |UIsdfy.24:44| :skolemid |4337| :no-pattern (type |a#55#0#0|) :no-pattern (type |a#55#1#0|) :no-pattern (U_2_int |a#55#0#0|) :no-pattern (U_2_bool |a#55#0#0|) :no-pattern (U_2_int |a#55#1#0|) :no-pattern (U_2_bool |a#55#1#0|) ))) :qid |unknown.0:0| :skolemid |4338| :pattern ( (UI.SuccResultList.SuccResultList_q d@@95)) )))
(assert (= (type Tclass.UI.SuccResultList) TyType))
(assert (= (Tag Tclass.UI.SuccResultList) Tagclass.UI.SuccResultList))
(assert (= (TagFamily Tclass.UI.SuccResultList) tytagFamily$SuccResultList))
(assert (forall ((bx@@184 T@U) ) (!  (=> (and (= (type bx@@184) BoxType) ($IsBox bx@@184 Tclass.UI.SuccResultList)) (and (= ($Box ($Unbox DatatypeTypeType bx@@184)) bx@@184) ($Is ($Unbox DatatypeTypeType bx@@184) Tclass.UI.SuccResultList))) :qid |unknown.0:0| :skolemid |4339| :pattern ( ($IsBox bx@@184 Tclass.UI.SuccResultList)) )))
(assert (forall ((|a#56#0#0| T@U) (|a#56#1#0| T@U) ) (!  (=> (and (= (type |a#56#0#0|) (SeqType BoxType)) (= (type |a#56#1#0|) DatatypeTypeType)) (= ($Is (|#UI.SuccResultList.SuccResultList| |a#56#0#0| |a#56#1#0|) Tclass.UI.SuccResultList)  (and ($Is |a#56#0#0| (TSeq Tclass.UI.SuccResult)) ($Is |a#56#1#0| Tclass.UI.RangeEnd)))) :qid |UIsdfy.24:44| :skolemid |4340| :pattern ( ($Is (|#UI.SuccResultList.SuccResultList| |a#56#0#0| |a#56#1#0|) Tclass.UI.SuccResultList)) )))
(assert (forall ((|a#57#0#0| T@U) (|a#57#1#0| T@U) ($h@@129 T@U) ) (!  (=> (and (and (and (= (type |a#57#0#0|) (SeqType BoxType)) (= (type |a#57#1#0|) DatatypeTypeType)) (= (type $h@@129) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@129)) (= ($IsAlloc (|#UI.SuccResultList.SuccResultList| |a#57#0#0| |a#57#1#0|) Tclass.UI.SuccResultList $h@@129)  (and ($IsAlloc |a#57#0#0| (TSeq Tclass.UI.SuccResult) $h@@129) ($IsAlloc |a#57#1#0| Tclass.UI.RangeEnd $h@@129)))) :qid |UIsdfy.24:44| :skolemid |4341| :pattern ( ($IsAlloc (|#UI.SuccResultList.SuccResultList| |a#57#0#0| |a#57#1#0|) Tclass.UI.SuccResultList $h@@129)) )))
(assert (forall ((arg0@@679 T@U) ) (! (= (type (UI.SuccResultList.results arg0@@679)) (SeqType BoxType)) :qid |funType:UI.SuccResultList.results| :pattern ( (UI.SuccResultList.results arg0@@679)) )))
(assert (forall ((d@@96 T@U) ($h@@130 T@U) ) (!  (=> (and (and (= (type d@@96) DatatypeTypeType) (= (type $h@@130) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@130) (and (UI.SuccResultList.SuccResultList_q d@@96) ($IsAlloc d@@96 Tclass.UI.SuccResultList $h@@130)))) ($IsAlloc (UI.SuccResultList.results d@@96) (TSeq Tclass.UI.SuccResult) $h@@130)) :qid |unknown.0:0| :skolemid |4342| :pattern ( ($IsAlloc (UI.SuccResultList.results d@@96) (TSeq Tclass.UI.SuccResult) $h@@130)) )))
(assert (forall ((arg0@@680 T@U) ) (! (= (type (UI.SuccResultList.end arg0@@680)) DatatypeTypeType) :qid |funType:UI.SuccResultList.end| :pattern ( (UI.SuccResultList.end arg0@@680)) )))
(assert (forall ((d@@97 T@U) ($h@@131 T@U) ) (!  (=> (and (and (= (type d@@97) DatatypeTypeType) (= (type $h@@131) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@131) (and (UI.SuccResultList.SuccResultList_q d@@97) ($IsAlloc d@@97 Tclass.UI.SuccResultList $h@@131)))) ($IsAlloc (UI.SuccResultList.end d@@97) Tclass.UI.RangeEnd $h@@131)) :qid |unknown.0:0| :skolemid |4343| :pattern ( ($IsAlloc (UI.SuccResultList.end d@@97) Tclass.UI.RangeEnd $h@@131)) )))
(assert (forall ((|a#58#0#0| T@U) (|a#58#1#0| T@U) ) (!  (=> (and (= (type |a#58#0#0|) (SeqType BoxType)) (= (type |a#58#1#0|) DatatypeTypeType)) (= (|#UI.SuccResultList.SuccResultList| (Lit |a#58#0#0|) (Lit |a#58#1#0|)) (Lit (|#UI.SuccResultList.SuccResultList| |a#58#0#0| |a#58#1#0|)))) :qid |UIsdfy.24:44| :skolemid |4344| :pattern ( (|#UI.SuccResultList.SuccResultList| (Lit |a#58#0#0|) (Lit |a#58#1#0|))) )))
(assert (forall ((|a#59#0#0| T@U) (|a#59#1#0| T@U) ) (!  (=> (and (= (type |a#59#0#0|) (SeqType BoxType)) (= (type |a#59#1#0|) DatatypeTypeType)) (= (UI.SuccResultList.results (|#UI.SuccResultList.SuccResultList| |a#59#0#0| |a#59#1#0|)) |a#59#0#0|)) :qid |UIsdfy.24:44| :skolemid |4345| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#59#0#0| |a#59#1#0|)) )))
(assert (forall ((|a#60#0#0| T@U) (|a#60#1#0| T@U) (i@@32 Int) ) (!  (=> (and (and (= (type |a#60#0#0|) (SeqType BoxType)) (= (type |a#60#1#0|) DatatypeTypeType)) (and (<= 0 i@@32) (< i@@32 (|Seq#Length| |a#60#0#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#60#0#0| i@@32))) (DtRank (|#UI.SuccResultList.SuccResultList| |a#60#0#0| |a#60#1#0|)))) :qid |UIsdfy.24:44| :skolemid |4346| :pattern ( (|Seq#Index| |a#60#0#0| i@@32) (|#UI.SuccResultList.SuccResultList| |a#60#0#0| |a#60#1#0|)) )))
(assert (forall ((|a#61#0#0| T@U) (|a#61#1#0| T@U) ) (!  (=> (and (= (type |a#61#0#0|) (SeqType BoxType)) (= (type |a#61#1#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#61#0#0|) (DtRank (|#UI.SuccResultList.SuccResultList| |a#61#0#0| |a#61#1#0|)))) :qid |UIsdfy.24:44| :skolemid |4347| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#61#0#0| |a#61#1#0|)) )))
(assert (forall ((|a#62#0#0| T@U) (|a#62#1#0| T@U) ) (!  (=> (and (= (type |a#62#0#0|) (SeqType BoxType)) (= (type |a#62#1#0|) DatatypeTypeType)) (= (UI.SuccResultList.end (|#UI.SuccResultList.SuccResultList| |a#62#0#0| |a#62#1#0|)) |a#62#1#0|)) :qid |UIsdfy.24:44| :skolemid |4348| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#62#0#0| |a#62#1#0|)) )))
(assert (forall ((|a#63#0#0| T@U) (|a#63#1#0| T@U) ) (!  (=> (and (= (type |a#63#0#0|) (SeqType BoxType)) (= (type |a#63#1#0|) DatatypeTypeType)) (< (DtRank |a#63#1#0|) (DtRank (|#UI.SuccResultList.SuccResultList| |a#63#0#0| |a#63#1#0|)))) :qid |UIsdfy.24:44| :skolemid |4349| :pattern ( (|#UI.SuccResultList.SuccResultList| |a#63#0#0| |a#63#1#0|)) )))
(assert (forall ((d@@98 T@U) ) (!  (=> (and (= (type d@@98) DatatypeTypeType) (|$IsA#UI.SuccResultList| d@@98)) (UI.SuccResultList.SuccResultList_q d@@98)) :qid |unknown.0:0| :skolemid |4350| :pattern ( (|$IsA#UI.SuccResultList| d@@98)) )))
(assert (forall ((d@@99 T@U) ) (!  (=> (and (= (type d@@99) DatatypeTypeType) ($Is d@@99 Tclass.UI.SuccResultList)) (UI.SuccResultList.SuccResultList_q d@@99)) :qid |unknown.0:0| :skolemid |4351| :pattern ( (UI.SuccResultList.SuccResultList_q d@@99) ($Is d@@99 Tclass.UI.SuccResultList)) )))
(assert (forall ((a@@164 T@U) (b@@95 T@U) ) (!  (=> (and (and (= (type a@@164) DatatypeTypeType) (= (type b@@95) DatatypeTypeType)) true) (= (|UI.SuccResultList#Equal| a@@164 b@@95)  (and (|Seq#Equal| (UI.SuccResultList.results a@@164) (UI.SuccResultList.results b@@95)) (|UI.RangeEnd#Equal| (UI.SuccResultList.end a@@164) (UI.SuccResultList.end b@@95))))) :qid |unknown.0:0| :skolemid |4352| :pattern ( (|UI.SuccResultList#Equal| a@@164 b@@95)) )))
(assert (forall ((a@@165 T@U) (b@@96 T@U) ) (!  (=> (and (= (type a@@165) DatatypeTypeType) (= (type b@@96) DatatypeTypeType)) (= (|UI.SuccResultList#Equal| a@@165 b@@96) (= a@@165 b@@96))) :qid |unknown.0:0| :skolemid |4353| :pattern ( (|UI.SuccResultList#Equal| a@@165 b@@96)) )))
(assert (= (type |#UI.Op.NoOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.NoOp|) |##UI.Op.NoOp|))
(assert (forall ((d@@100 T@U) ) (!  (=> (= (type d@@100) DatatypeTypeType) (= (UI.Op.NoOp_q d@@100) (= (DatatypeCtorId d@@100) |##UI.Op.NoOp|))) :qid |unknown.0:0| :skolemid |4354| :pattern ( (UI.Op.NoOp_q d@@100)) )))
(assert (forall ((d@@101 T@U) ) (!  (=> (and (= (type d@@101) DatatypeTypeType) (UI.Op.NoOp_q d@@101)) (= d@@101 |#UI.Op.NoOp|)) :qid |unknown.0:0| :skolemid |4355| :pattern ( (UI.Op.NoOp_q d@@101)) )))
(assert (= (type Tclass.UI.Op) TyType))
(assert (= (Tag Tclass.UI.Op) Tagclass.UI.Op))
(assert (= (TagFamily Tclass.UI.Op) tytagFamily$Op))
(assert (forall ((bx@@185 T@U) ) (!  (=> (and (= (type bx@@185) BoxType) ($IsBox bx@@185 Tclass.UI.Op)) (and (= ($Box ($Unbox DatatypeTypeType bx@@185)) bx@@185) ($Is ($Unbox DatatypeTypeType bx@@185) Tclass.UI.Op))) :qid |unknown.0:0| :skolemid |4356| :pattern ( ($IsBox bx@@185 Tclass.UI.Op)) )))
(assert ($Is |#UI.Op.NoOp| Tclass.UI.Op))
(assert (forall (($h@@132 T@U) ) (!  (=> (and (= (type $h@@132) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@132)) ($IsAlloc |#UI.Op.NoOp| Tclass.UI.Op $h@@132)) :qid |DafnyPreludebpl.545:12| :skolemid |4357| :pattern ( ($IsAlloc |#UI.Op.NoOp| Tclass.UI.Op $h@@132)) )))
(assert (= |#UI.Op.NoOp| (Lit |#UI.Op.NoOp|)))
(assert (= (type |#UI.Op.SyncOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.SyncOp|) |##UI.Op.SyncOp|))
(assert (forall ((d@@102 T@U) ) (!  (=> (= (type d@@102) DatatypeTypeType) (= (UI.Op.SyncOp_q d@@102) (= (DatatypeCtorId d@@102) |##UI.Op.SyncOp|))) :qid |unknown.0:0| :skolemid |4358| :pattern ( (UI.Op.SyncOp_q d@@102)) )))
(assert (forall ((d@@103 T@U) ) (!  (=> (and (= (type d@@103) DatatypeTypeType) (UI.Op.SyncOp_q d@@103)) (= d@@103 |#UI.Op.SyncOp|)) :qid |unknown.0:0| :skolemid |4359| :pattern ( (UI.Op.SyncOp_q d@@103)) )))
(assert ($Is |#UI.Op.SyncOp| Tclass.UI.Op))
(assert (forall (($h@@133 T@U) ) (!  (=> (and (= (type $h@@133) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@133)) ($IsAlloc |#UI.Op.SyncOp| Tclass.UI.Op $h@@133)) :qid |DafnyPreludebpl.545:12| :skolemid |4360| :pattern ( ($IsAlloc |#UI.Op.SyncOp| Tclass.UI.Op $h@@133)) )))
(assert (= |#UI.Op.SyncOp| (Lit |#UI.Op.SyncOp|)))
(assert (= (type |#UI.Op.CrashOp|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#UI.Op.CrashOp|) |##UI.Op.CrashOp|))
(assert (forall ((d@@104 T@U) ) (!  (=> (= (type d@@104) DatatypeTypeType) (= (UI.Op.CrashOp_q d@@104) (= (DatatypeCtorId d@@104) |##UI.Op.CrashOp|))) :qid |unknown.0:0| :skolemid |4361| :pattern ( (UI.Op.CrashOp_q d@@104)) )))
(assert (forall ((d@@105 T@U) ) (!  (=> (and (= (type d@@105) DatatypeTypeType) (UI.Op.CrashOp_q d@@105)) (= d@@105 |#UI.Op.CrashOp|)) :qid |unknown.0:0| :skolemid |4362| :pattern ( (UI.Op.CrashOp_q d@@105)) )))
(assert ($Is |#UI.Op.CrashOp| Tclass.UI.Op))
(assert (forall (($h@@134 T@U) ) (!  (=> (and (= (type $h@@134) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@134)) ($IsAlloc |#UI.Op.CrashOp| Tclass.UI.Op $h@@134)) :qid |DafnyPreludebpl.545:12| :skolemid |4363| :pattern ( ($IsAlloc |#UI.Op.CrashOp| Tclass.UI.Op $h@@134)) )))
(assert (= |#UI.Op.CrashOp| (Lit |#UI.Op.CrashOp|)))
(assert (forall ((arg0@@681 Int) ) (! (= (type (|#UI.Op.PushSyncOp| arg0@@681)) DatatypeTypeType) :qid |funType:#UI.Op.PushSyncOp| :pattern ( (|#UI.Op.PushSyncOp| arg0@@681)) )))
(assert (forall ((|a#79#0#0| Int) ) (! (= (DatatypeCtorId (|#UI.Op.PushSyncOp| |a#79#0#0|)) |##UI.Op.PushSyncOp|) :qid |UIsdfy.30:24| :skolemid |4364| :pattern ( (|#UI.Op.PushSyncOp| |a#79#0#0|)) )))
(assert (forall ((d@@106 T@U) ) (!  (=> (= (type d@@106) DatatypeTypeType) (= (UI.Op.PushSyncOp_q d@@106) (= (DatatypeCtorId d@@106) |##UI.Op.PushSyncOp|))) :qid |unknown.0:0| :skolemid |4365| :pattern ( (UI.Op.PushSyncOp_q d@@106)) )))
(assert (forall ((d@@107 T@U) ) (!  (=> (and (= (type d@@107) DatatypeTypeType) (UI.Op.PushSyncOp_q d@@107)) (exists ((|a#80#0#0| Int) ) (! (= d@@107 (|#UI.Op.PushSyncOp| |a#80#0#0|)) :qid |UIsdfy.30:24| :skolemid |4366| ))) :qid |unknown.0:0| :skolemid |4367| :pattern ( (UI.Op.PushSyncOp_q d@@107)) )))
(assert (forall ((|a#81#0#0| Int) ) (! (= ($Is (|#UI.Op.PushSyncOp| |a#81#0#0|) Tclass.UI.Op) ($Is (int_2_U |a#81#0#0|) TInt)) :qid |UIsdfy.30:24| :skolemid |4368| :pattern ( ($Is (|#UI.Op.PushSyncOp| |a#81#0#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#82#0#0| Int) ($h@@135 T@U) ) (!  (=> (and (= (type $h@@135) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@135)) (= ($IsAlloc (|#UI.Op.PushSyncOp| |a#82#0#0|) Tclass.UI.Op $h@@135) ($IsAlloc (int_2_U |a#82#0#0|) TInt $h@@135))) :qid |UIsdfy.30:24| :skolemid |4369| :pattern ( ($IsAlloc (|#UI.Op.PushSyncOp| |a#82#0#0|) Tclass.UI.Op $h@@135)) )))
(assert (forall ((d@@108 T@U) ($h@@136 T@U) ) (!  (=> (and (and (= (type d@@108) DatatypeTypeType) (= (type $h@@136) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@136) (and (UI.Op.PushSyncOp_q d@@108) ($IsAlloc d@@108 Tclass.UI.Op $h@@136)))) ($IsAlloc (int_2_U (UI.Op.id d@@108)) TInt $h@@136)) :qid |unknown.0:0| :skolemid |4370| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@108)) TInt $h@@136)) )))
(assert (forall ((|a#83#0#0| Int) ) (! (= (|#UI.Op.PushSyncOp| (LitInt |a#83#0#0|)) (Lit (|#UI.Op.PushSyncOp| |a#83#0#0|))) :qid |UIsdfy.30:24| :skolemid |4371| :pattern ( (|#UI.Op.PushSyncOp| (LitInt |a#83#0#0|))) )))
(assert (forall ((|a#84#0#0| Int) ) (! (= (UI.Op.id (|#UI.Op.PushSyncOp| |a#84#0#0|)) |a#84#0#0|) :qid |UIsdfy.30:24| :skolemid |4372| :pattern ( (|#UI.Op.PushSyncOp| |a#84#0#0|)) )))
(assert (forall ((arg0@@682 Int) ) (! (= (type (|#UI.Op.PopSyncOp| arg0@@682)) DatatypeTypeType) :qid |funType:#UI.Op.PopSyncOp| :pattern ( (|#UI.Op.PopSyncOp| arg0@@682)) )))
(assert (forall ((|a#85#0#0| Int) ) (! (= (DatatypeCtorId (|#UI.Op.PopSyncOp| |a#85#0#0|)) |##UI.Op.PopSyncOp|) :qid |UIsdfy.31:23| :skolemid |4373| :pattern ( (|#UI.Op.PopSyncOp| |a#85#0#0|)) )))
(assert (forall ((d@@109 T@U) ) (!  (=> (= (type d@@109) DatatypeTypeType) (= (UI.Op.PopSyncOp_q d@@109) (= (DatatypeCtorId d@@109) |##UI.Op.PopSyncOp|))) :qid |unknown.0:0| :skolemid |4374| :pattern ( (UI.Op.PopSyncOp_q d@@109)) )))
(assert (forall ((d@@110 T@U) ) (!  (=> (and (= (type d@@110) DatatypeTypeType) (UI.Op.PopSyncOp_q d@@110)) (exists ((|a#86#0#0| Int) ) (! (= d@@110 (|#UI.Op.PopSyncOp| |a#86#0#0|)) :qid |UIsdfy.31:23| :skolemid |4375| ))) :qid |unknown.0:0| :skolemid |4376| :pattern ( (UI.Op.PopSyncOp_q d@@110)) )))
(assert (forall ((|a#87#0#0| Int) ) (! (= ($Is (|#UI.Op.PopSyncOp| |a#87#0#0|) Tclass.UI.Op) ($Is (int_2_U |a#87#0#0|) TInt)) :qid |UIsdfy.31:23| :skolemid |4377| :pattern ( ($Is (|#UI.Op.PopSyncOp| |a#87#0#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#88#0#0| Int) ($h@@137 T@U) ) (!  (=> (and (= (type $h@@137) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@137)) (= ($IsAlloc (|#UI.Op.PopSyncOp| |a#88#0#0|) Tclass.UI.Op $h@@137) ($IsAlloc (int_2_U |a#88#0#0|) TInt $h@@137))) :qid |UIsdfy.31:23| :skolemid |4378| :pattern ( ($IsAlloc (|#UI.Op.PopSyncOp| |a#88#0#0|) Tclass.UI.Op $h@@137)) )))
(assert (forall ((d@@111 T@U) ($h@@138 T@U) ) (!  (=> (and (and (= (type d@@111) DatatypeTypeType) (= (type $h@@138) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@138) (and (UI.Op.PopSyncOp_q d@@111) ($IsAlloc d@@111 Tclass.UI.Op $h@@138)))) ($IsAlloc (int_2_U (UI.Op.id d@@111)) TInt $h@@138)) :qid |unknown.0:0| :skolemid |4379| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@111)) TInt $h@@138)) )))
(assert (forall ((|a#89#0#0| Int) ) (! (= (|#UI.Op.PopSyncOp| (LitInt |a#89#0#0|)) (Lit (|#UI.Op.PopSyncOp| |a#89#0#0|))) :qid |UIsdfy.31:23| :skolemid |4380| :pattern ( (|#UI.Op.PopSyncOp| (LitInt |a#89#0#0|))) )))
(assert (forall ((|a#90#0#0| Int) ) (! (= (UI.Op.id (|#UI.Op.PopSyncOp| |a#90#0#0|)) |a#90#0#0|) :qid |UIsdfy.31:23| :skolemid |4381| :pattern ( (|#UI.Op.PopSyncOp| |a#90#0#0|)) )))
(assert (forall ((arg0@@683 T@U) (arg1@@350 T@U) ) (! (= (type (|#UI.Op.GetOp| arg0@@683 arg1@@350)) DatatypeTypeType) :qid |funType:#UI.Op.GetOp| :pattern ( (|#UI.Op.GetOp| arg0@@683 arg1@@350)) )))
(assert (forall ((|a#91#0#0| T@U) (|a#91#1#0| T@U) ) (!  (=> (and (= (type |a#91#0#0|) (SeqType BoxType)) (= (type |a#91#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.Op.GetOp| |a#91#0#0| |a#91#1#0|)) |##UI.Op.GetOp|)) :qid |UIsdfy.33:13| :skolemid |4382| :pattern ( (|#UI.Op.GetOp| |a#91#0#0| |a#91#1#0|)) )))
(assert (forall ((d@@112 T@U) ) (!  (=> (= (type d@@112) DatatypeTypeType) (= (UI.Op.GetOp_q d@@112) (= (DatatypeCtorId d@@112) |##UI.Op.GetOp|))) :qid |unknown.0:0| :skolemid |4383| :pattern ( (UI.Op.GetOp_q d@@112)) )))
(assert (forall ((d@@113 T@U) ) (!  (=> (and (= (type d@@113) DatatypeTypeType) (UI.Op.GetOp_q d@@113)) (exists ((|a#92#0#0| T@U) (|a#92#1#0| T@U) ) (!  (and (and (= (type |a#92#0#0|) (SeqType BoxType)) (= (type |a#92#1#0|) (SeqType BoxType))) (= d@@113 (|#UI.Op.GetOp| |a#92#0#0| |a#92#1#0|))) :qid |UIsdfy.33:13| :skolemid |4384| :no-pattern (type |a#92#0#0|) :no-pattern (type |a#92#1#0|) :no-pattern (U_2_int |a#92#0#0|) :no-pattern (U_2_bool |a#92#0#0|) :no-pattern (U_2_int |a#92#1#0|) :no-pattern (U_2_bool |a#92#1#0|) ))) :qid |unknown.0:0| :skolemid |4385| :pattern ( (UI.Op.GetOp_q d@@113)) )))
(assert (forall ((|a#93#0#0| T@U) (|a#93#1#0| T@U) ) (!  (=> (and (= (type |a#93#0#0|) (SeqType BoxType)) (= (type |a#93#1#0|) (SeqType BoxType))) (= ($Is (|#UI.Op.GetOp| |a#93#0#0| |a#93#1#0|) Tclass.UI.Op)  (and ($Is |a#93#0#0| Tclass.KeyType.Key) ($Is |a#93#1#0| Tclass.ValueType.Value)))) :qid |UIsdfy.33:13| :skolemid |4386| :pattern ( ($Is (|#UI.Op.GetOp| |a#93#0#0| |a#93#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#94#0#0| T@U) (|a#94#1#0| T@U) ($h@@139 T@U) ) (!  (=> (and (and (and (= (type |a#94#0#0|) (SeqType BoxType)) (= (type |a#94#1#0|) (SeqType BoxType))) (= (type $h@@139) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@139)) (= ($IsAlloc (|#UI.Op.GetOp| |a#94#0#0| |a#94#1#0|) Tclass.UI.Op $h@@139)  (and ($IsAlloc |a#94#0#0| Tclass.KeyType.Key $h@@139) ($IsAlloc |a#94#1#0| Tclass.ValueType.Value $h@@139)))) :qid |UIsdfy.33:13| :skolemid |4387| :pattern ( ($IsAlloc (|#UI.Op.GetOp| |a#94#0#0| |a#94#1#0|) Tclass.UI.Op $h@@139)) )))
(assert (forall ((arg0@@684 T@U) ) (! (= (type (UI.Op.key arg0@@684)) (SeqType BoxType)) :qid |funType:UI.Op.key| :pattern ( (UI.Op.key arg0@@684)) )))
(assert (forall ((d@@114 T@U) ($h@@140 T@U) ) (!  (=> (and (and (= (type d@@114) DatatypeTypeType) (= (type $h@@140) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@140) (and (UI.Op.GetOp_q d@@114) ($IsAlloc d@@114 Tclass.UI.Op $h@@140)))) ($IsAlloc (UI.Op.key d@@114) Tclass.KeyType.Key $h@@140)) :qid |unknown.0:0| :skolemid |4388| :pattern ( ($IsAlloc (UI.Op.key d@@114) Tclass.KeyType.Key $h@@140)) )))
(assert (forall ((arg0@@685 T@U) ) (! (= (type (UI.Op.value arg0@@685)) (SeqType BoxType)) :qid |funType:UI.Op.value| :pattern ( (UI.Op.value arg0@@685)) )))
(assert (forall ((d@@115 T@U) ($h@@141 T@U) ) (!  (=> (and (and (= (type d@@115) DatatypeTypeType) (= (type $h@@141) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@141) (and (UI.Op.GetOp_q d@@115) ($IsAlloc d@@115 Tclass.UI.Op $h@@141)))) ($IsAlloc (UI.Op.value d@@115) Tclass.ValueType.Value $h@@141)) :qid |unknown.0:0| :skolemid |4389| :pattern ( ($IsAlloc (UI.Op.value d@@115) Tclass.ValueType.Value $h@@141)) )))
(assert (forall ((|a#95#0#0| T@U) (|a#95#1#0| T@U) ) (!  (=> (and (= (type |a#95#0#0|) (SeqType BoxType)) (= (type |a#95#1#0|) (SeqType BoxType))) (= (|#UI.Op.GetOp| (Lit |a#95#0#0|) (Lit |a#95#1#0|)) (Lit (|#UI.Op.GetOp| |a#95#0#0| |a#95#1#0|)))) :qid |UIsdfy.33:13| :skolemid |4390| :pattern ( (|#UI.Op.GetOp| (Lit |a#95#0#0|) (Lit |a#95#1#0|))) )))
(assert (forall ((|a#96#0#0| T@U) (|a#96#1#0| T@U) ) (!  (=> (and (= (type |a#96#0#0|) (SeqType BoxType)) (= (type |a#96#1#0|) (SeqType BoxType))) (= (UI.Op.key (|#UI.Op.GetOp| |a#96#0#0| |a#96#1#0|)) |a#96#0#0|)) :qid |UIsdfy.33:13| :skolemid |4391| :pattern ( (|#UI.Op.GetOp| |a#96#0#0| |a#96#1#0|)) )))
(assert (forall ((|a#97#0#0| T@U) (|a#97#1#0| T@U) ) (!  (=> (and (= (type |a#97#0#0|) (SeqType BoxType)) (= (type |a#97#1#0|) (SeqType BoxType))) (= (UI.Op.value (|#UI.Op.GetOp| |a#97#0#0| |a#97#1#0|)) |a#97#1#0|)) :qid |UIsdfy.33:13| :skolemid |4392| :pattern ( (|#UI.Op.GetOp| |a#97#0#0| |a#97#1#0|)) )))
(assert (forall ((arg0@@686 T@U) (arg1@@351 Int) ) (! (= (type (|#UI.Op.GetBeginOp| arg0@@686 arg1@@351)) DatatypeTypeType) :qid |funType:#UI.Op.GetBeginOp| :pattern ( (|#UI.Op.GetBeginOp| arg0@@686 arg1@@351)) )))
(assert (forall ((|a#98#0#0| T@U) (|a#98#1#0| Int) ) (!  (=> (= (type |a#98#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.Op.GetBeginOp| |a#98#0#0| |a#98#1#0|)) |##UI.Op.GetBeginOp|)) :qid |UIsdfy.35:18| :skolemid |4393| :pattern ( (|#UI.Op.GetBeginOp| |a#98#0#0| |a#98#1#0|)) )))
(assert (forall ((d@@116 T@U) ) (!  (=> (= (type d@@116) DatatypeTypeType) (= (UI.Op.GetBeginOp_q d@@116) (= (DatatypeCtorId d@@116) |##UI.Op.GetBeginOp|))) :qid |unknown.0:0| :skolemid |4394| :pattern ( (UI.Op.GetBeginOp_q d@@116)) )))
(assert (forall ((d@@117 T@U) ) (!  (=> (and (= (type d@@117) DatatypeTypeType) (UI.Op.GetBeginOp_q d@@117)) (exists ((|a#99#0#0| T@U) (|a#99#1#0| Int) ) (!  (and (= (type |a#99#0#0|) (SeqType BoxType)) (= d@@117 (|#UI.Op.GetBeginOp| |a#99#0#0| |a#99#1#0|))) :qid |UIsdfy.35:18| :skolemid |4395| :no-pattern (type |a#99#0#0|) :no-pattern (U_2_int |a#99#0#0|) :no-pattern (U_2_bool |a#99#0#0|) ))) :qid |unknown.0:0| :skolemid |4396| :pattern ( (UI.Op.GetBeginOp_q d@@117)) )))
(assert (forall ((|a#100#0#0| T@U) (|a#100#1#0| Int) ) (!  (=> (= (type |a#100#0#0|) (SeqType BoxType)) (= ($Is (|#UI.Op.GetBeginOp| |a#100#0#0| |a#100#1#0|) Tclass.UI.Op)  (and ($Is |a#100#0#0| Tclass.KeyType.Key) ($Is (int_2_U |a#100#1#0|) TInt)))) :qid |UIsdfy.35:18| :skolemid |4397| :pattern ( ($Is (|#UI.Op.GetBeginOp| |a#100#0#0| |a#100#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#101#0#0| T@U) (|a#101#1#0| Int) ($h@@142 T@U) ) (!  (=> (and (and (= (type |a#101#0#0|) (SeqType BoxType)) (= (type $h@@142) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@142)) (= ($IsAlloc (|#UI.Op.GetBeginOp| |a#101#0#0| |a#101#1#0|) Tclass.UI.Op $h@@142)  (and ($IsAlloc |a#101#0#0| Tclass.KeyType.Key $h@@142) ($IsAlloc (int_2_U |a#101#1#0|) TInt $h@@142)))) :qid |UIsdfy.35:18| :skolemid |4398| :pattern ( ($IsAlloc (|#UI.Op.GetBeginOp| |a#101#0#0| |a#101#1#0|) Tclass.UI.Op $h@@142)) )))
(assert (forall ((d@@118 T@U) ($h@@143 T@U) ) (!  (=> (and (and (= (type d@@118) DatatypeTypeType) (= (type $h@@143) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@143) (and (UI.Op.GetBeginOp_q d@@118) ($IsAlloc d@@118 Tclass.UI.Op $h@@143)))) ($IsAlloc (UI.Op.key d@@118) Tclass.KeyType.Key $h@@143)) :qid |unknown.0:0| :skolemid |4399| :pattern ( ($IsAlloc (UI.Op.key d@@118) Tclass.KeyType.Key $h@@143)) )))
(assert (forall ((d@@119 T@U) ($h@@144 T@U) ) (!  (=> (and (and (= (type d@@119) DatatypeTypeType) (= (type $h@@144) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@144) (and (UI.Op.GetBeginOp_q d@@119) ($IsAlloc d@@119 Tclass.UI.Op $h@@144)))) ($IsAlloc (int_2_U (UI.Op.id d@@119)) TInt $h@@144)) :qid |unknown.0:0| :skolemid |4400| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@119)) TInt $h@@144)) )))
(assert (forall ((|a#102#0#0| T@U) (|a#102#1#0| Int) ) (!  (=> (= (type |a#102#0#0|) (SeqType BoxType)) (= (|#UI.Op.GetBeginOp| (Lit |a#102#0#0|) (LitInt |a#102#1#0|)) (Lit (|#UI.Op.GetBeginOp| |a#102#0#0| |a#102#1#0|)))) :qid |UIsdfy.35:18| :skolemid |4401| :pattern ( (|#UI.Op.GetBeginOp| (Lit |a#102#0#0|) (LitInt |a#102#1#0|))) )))
(assert (forall ((|a#103#0#0| T@U) (|a#103#1#0| Int) ) (!  (=> (= (type |a#103#0#0|) (SeqType BoxType)) (= (UI.Op.key (|#UI.Op.GetBeginOp| |a#103#0#0| |a#103#1#0|)) |a#103#0#0|)) :qid |UIsdfy.35:18| :skolemid |4402| :pattern ( (|#UI.Op.GetBeginOp| |a#103#0#0| |a#103#1#0|)) )))
(assert (forall ((|a#104#0#0| T@U) (|a#104#1#0| Int) ) (!  (=> (= (type |a#104#0#0|) (SeqType BoxType)) (= (UI.Op.id (|#UI.Op.GetBeginOp| |a#104#0#0| |a#104#1#0|)) |a#104#1#0|)) :qid |UIsdfy.35:18| :skolemid |4403| :pattern ( (|#UI.Op.GetBeginOp| |a#104#0#0| |a#104#1#0|)) )))
(assert (forall ((arg0@@687 T@U) (arg1@@352 Int) ) (! (= (type (|#UI.Op.GetEndOp| arg0@@687 arg1@@352)) DatatypeTypeType) :qid |funType:#UI.Op.GetEndOp| :pattern ( (|#UI.Op.GetEndOp| arg0@@687 arg1@@352)) )))
(assert (forall ((|a#105#0#0| T@U) (|a#105#1#0| Int) ) (!  (=> (= (type |a#105#0#0|) (SeqType BoxType)) (= (DatatypeCtorId (|#UI.Op.GetEndOp| |a#105#0#0| |a#105#1#0|)) |##UI.Op.GetEndOp|)) :qid |UIsdfy.36:16| :skolemid |4404| :pattern ( (|#UI.Op.GetEndOp| |a#105#0#0| |a#105#1#0|)) )))
(assert (forall ((d@@120 T@U) ) (!  (=> (= (type d@@120) DatatypeTypeType) (= (UI.Op.GetEndOp_q d@@120) (= (DatatypeCtorId d@@120) |##UI.Op.GetEndOp|))) :qid |unknown.0:0| :skolemid |4405| :pattern ( (UI.Op.GetEndOp_q d@@120)) )))
(assert (forall ((d@@121 T@U) ) (!  (=> (and (= (type d@@121) DatatypeTypeType) (UI.Op.GetEndOp_q d@@121)) (exists ((|a#106#0#0| T@U) (|a#106#1#0| Int) ) (!  (and (= (type |a#106#0#0|) (SeqType BoxType)) (= d@@121 (|#UI.Op.GetEndOp| |a#106#0#0| |a#106#1#0|))) :qid |UIsdfy.36:16| :skolemid |4406| :no-pattern (type |a#106#0#0|) :no-pattern (U_2_int |a#106#0#0|) :no-pattern (U_2_bool |a#106#0#0|) ))) :qid |unknown.0:0| :skolemid |4407| :pattern ( (UI.Op.GetEndOp_q d@@121)) )))
(assert (forall ((|a#107#0#0| T@U) (|a#107#1#0| Int) ) (!  (=> (= (type |a#107#0#0|) (SeqType BoxType)) (= ($Is (|#UI.Op.GetEndOp| |a#107#0#0| |a#107#1#0|) Tclass.UI.Op)  (and ($Is |a#107#0#0| Tclass.ValueType.Value) ($Is (int_2_U |a#107#1#0|) TInt)))) :qid |UIsdfy.36:16| :skolemid |4408| :pattern ( ($Is (|#UI.Op.GetEndOp| |a#107#0#0| |a#107#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#108#0#0| T@U) (|a#108#1#0| Int) ($h@@145 T@U) ) (!  (=> (and (and (= (type |a#108#0#0|) (SeqType BoxType)) (= (type $h@@145) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@145)) (= ($IsAlloc (|#UI.Op.GetEndOp| |a#108#0#0| |a#108#1#0|) Tclass.UI.Op $h@@145)  (and ($IsAlloc |a#108#0#0| Tclass.ValueType.Value $h@@145) ($IsAlloc (int_2_U |a#108#1#0|) TInt $h@@145)))) :qid |UIsdfy.36:16| :skolemid |4409| :pattern ( ($IsAlloc (|#UI.Op.GetEndOp| |a#108#0#0| |a#108#1#0|) Tclass.UI.Op $h@@145)) )))
(assert (forall ((d@@122 T@U) ($h@@146 T@U) ) (!  (=> (and (and (= (type d@@122) DatatypeTypeType) (= (type $h@@146) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@146) (and (UI.Op.GetEndOp_q d@@122) ($IsAlloc d@@122 Tclass.UI.Op $h@@146)))) ($IsAlloc (UI.Op.value d@@122) Tclass.ValueType.Value $h@@146)) :qid |unknown.0:0| :skolemid |4410| :pattern ( ($IsAlloc (UI.Op.value d@@122) Tclass.ValueType.Value $h@@146)) )))
(assert (forall ((d@@123 T@U) ($h@@147 T@U) ) (!  (=> (and (and (= (type d@@123) DatatypeTypeType) (= (type $h@@147) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@147) (and (UI.Op.GetEndOp_q d@@123) ($IsAlloc d@@123 Tclass.UI.Op $h@@147)))) ($IsAlloc (int_2_U (UI.Op.id d@@123)) TInt $h@@147)) :qid |unknown.0:0| :skolemid |4411| :pattern ( ($IsAlloc (int_2_U (UI.Op.id d@@123)) TInt $h@@147)) )))
(assert (forall ((|a#109#0#0| T@U) (|a#109#1#0| Int) ) (!  (=> (= (type |a#109#0#0|) (SeqType BoxType)) (= (|#UI.Op.GetEndOp| (Lit |a#109#0#0|) (LitInt |a#109#1#0|)) (Lit (|#UI.Op.GetEndOp| |a#109#0#0| |a#109#1#0|)))) :qid |UIsdfy.36:16| :skolemid |4412| :pattern ( (|#UI.Op.GetEndOp| (Lit |a#109#0#0|) (LitInt |a#109#1#0|))) )))
(assert (forall ((|a#110#0#0| T@U) (|a#110#1#0| Int) ) (!  (=> (= (type |a#110#0#0|) (SeqType BoxType)) (= (UI.Op.value (|#UI.Op.GetEndOp| |a#110#0#0| |a#110#1#0|)) |a#110#0#0|)) :qid |UIsdfy.36:16| :skolemid |4413| :pattern ( (|#UI.Op.GetEndOp| |a#110#0#0| |a#110#1#0|)) )))
(assert (forall ((|a#111#0#0| T@U) (|a#111#1#0| Int) ) (!  (=> (= (type |a#111#0#0|) (SeqType BoxType)) (= (UI.Op.id (|#UI.Op.GetEndOp| |a#111#0#0| |a#111#1#0|)) |a#111#1#0|)) :qid |UIsdfy.36:16| :skolemid |4414| :pattern ( (|#UI.Op.GetEndOp| |a#111#0#0| |a#111#1#0|)) )))
(assert (forall ((arg0@@688 T@U) (arg1@@353 T@U) ) (! (= (type (|#UI.Op.PutOp| arg0@@688 arg1@@353)) DatatypeTypeType) :qid |funType:#UI.Op.PutOp| :pattern ( (|#UI.Op.PutOp| arg0@@688 arg1@@353)) )))
(assert (forall ((|a#112#0#0| T@U) (|a#112#1#0| T@U) ) (!  (=> (and (= (type |a#112#0#0|) (SeqType BoxType)) (= (type |a#112#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#UI.Op.PutOp| |a#112#0#0| |a#112#1#0|)) |##UI.Op.PutOp|)) :qid |UIsdfy.39:13| :skolemid |4415| :pattern ( (|#UI.Op.PutOp| |a#112#0#0| |a#112#1#0|)) )))
(assert (forall ((d@@124 T@U) ) (!  (=> (= (type d@@124) DatatypeTypeType) (= (UI.Op.PutOp_q d@@124) (= (DatatypeCtorId d@@124) |##UI.Op.PutOp|))) :qid |unknown.0:0| :skolemid |4416| :pattern ( (UI.Op.PutOp_q d@@124)) )))
(assert (forall ((d@@125 T@U) ) (!  (=> (and (= (type d@@125) DatatypeTypeType) (UI.Op.PutOp_q d@@125)) (exists ((|a#113#0#0| T@U) (|a#113#1#0| T@U) ) (!  (and (and (= (type |a#113#0#0|) (SeqType BoxType)) (= (type |a#113#1#0|) (SeqType BoxType))) (= d@@125 (|#UI.Op.PutOp| |a#113#0#0| |a#113#1#0|))) :qid |UIsdfy.39:13| :skolemid |4417| :no-pattern (type |a#113#0#0|) :no-pattern (type |a#113#1#0|) :no-pattern (U_2_int |a#113#0#0|) :no-pattern (U_2_bool |a#113#0#0|) :no-pattern (U_2_int |a#113#1#0|) :no-pattern (U_2_bool |a#113#1#0|) ))) :qid |unknown.0:0| :skolemid |4418| :pattern ( (UI.Op.PutOp_q d@@125)) )))
(assert (forall ((|a#114#0#0| T@U) (|a#114#1#0| T@U) ) (!  (=> (and (= (type |a#114#0#0|) (SeqType BoxType)) (= (type |a#114#1#0|) (SeqType BoxType))) (= ($Is (|#UI.Op.PutOp| |a#114#0#0| |a#114#1#0|) Tclass.UI.Op)  (and ($Is |a#114#0#0| Tclass.KeyType.Key) ($Is |a#114#1#0| Tclass.ValueType.Value)))) :qid |UIsdfy.39:13| :skolemid |4419| :pattern ( ($Is (|#UI.Op.PutOp| |a#114#0#0| |a#114#1#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#115#0#0| T@U) (|a#115#1#0| T@U) ($h@@148 T@U) ) (!  (=> (and (and (and (= (type |a#115#0#0|) (SeqType BoxType)) (= (type |a#115#1#0|) (SeqType BoxType))) (= (type $h@@148) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@148)) (= ($IsAlloc (|#UI.Op.PutOp| |a#115#0#0| |a#115#1#0|) Tclass.UI.Op $h@@148)  (and ($IsAlloc |a#115#0#0| Tclass.KeyType.Key $h@@148) ($IsAlloc |a#115#1#0| Tclass.ValueType.Value $h@@148)))) :qid |UIsdfy.39:13| :skolemid |4420| :pattern ( ($IsAlloc (|#UI.Op.PutOp| |a#115#0#0| |a#115#1#0|) Tclass.UI.Op $h@@148)) )))
(assert (forall ((d@@126 T@U) ($h@@149 T@U) ) (!  (=> (and (and (= (type d@@126) DatatypeTypeType) (= (type $h@@149) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@149) (and (UI.Op.PutOp_q d@@126) ($IsAlloc d@@126 Tclass.UI.Op $h@@149)))) ($IsAlloc (UI.Op.key d@@126) Tclass.KeyType.Key $h@@149)) :qid |unknown.0:0| :skolemid |4421| :pattern ( ($IsAlloc (UI.Op.key d@@126) Tclass.KeyType.Key $h@@149)) )))
(assert (forall ((d@@127 T@U) ($h@@150 T@U) ) (!  (=> (and (and (= (type d@@127) DatatypeTypeType) (= (type $h@@150) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@150) (and (UI.Op.PutOp_q d@@127) ($IsAlloc d@@127 Tclass.UI.Op $h@@150)))) ($IsAlloc (UI.Op.value d@@127) Tclass.ValueType.Value $h@@150)) :qid |unknown.0:0| :skolemid |4422| :pattern ( ($IsAlloc (UI.Op.value d@@127) Tclass.ValueType.Value $h@@150)) )))
(assert (forall ((|a#116#0#0| T@U) (|a#116#1#0| T@U) ) (!  (=> (and (= (type |a#116#0#0|) (SeqType BoxType)) (= (type |a#116#1#0|) (SeqType BoxType))) (= (|#UI.Op.PutOp| (Lit |a#116#0#0|) (Lit |a#116#1#0|)) (Lit (|#UI.Op.PutOp| |a#116#0#0| |a#116#1#0|)))) :qid |UIsdfy.39:13| :skolemid |4423| :pattern ( (|#UI.Op.PutOp| (Lit |a#116#0#0|) (Lit |a#116#1#0|))) )))
(assert (forall ((|a#117#0#0| T@U) (|a#117#1#0| T@U) ) (!  (=> (and (= (type |a#117#0#0|) (SeqType BoxType)) (= (type |a#117#1#0|) (SeqType BoxType))) (= (UI.Op.key (|#UI.Op.PutOp| |a#117#0#0| |a#117#1#0|)) |a#117#0#0|)) :qid |UIsdfy.39:13| :skolemid |4424| :pattern ( (|#UI.Op.PutOp| |a#117#0#0| |a#117#1#0|)) )))
(assert (forall ((|a#118#0#0| T@U) (|a#118#1#0| T@U) ) (!  (=> (and (= (type |a#118#0#0|) (SeqType BoxType)) (= (type |a#118#1#0|) (SeqType BoxType))) (= (UI.Op.value (|#UI.Op.PutOp| |a#118#0#0| |a#118#1#0|)) |a#118#1#0|)) :qid |UIsdfy.39:13| :skolemid |4425| :pattern ( (|#UI.Op.PutOp| |a#118#0#0| |a#118#1#0|)) )))
(assert (forall ((arg0@@689 T@U) (arg1@@354 T@U) (arg2@@217 T@U) ) (! (= (type (|#UI.Op.SuccOp| arg0@@689 arg1@@354 arg2@@217)) DatatypeTypeType) :qid |funType:#UI.Op.SuccOp| :pattern ( (|#UI.Op.SuccOp| arg0@@689 arg1@@354 arg2@@217)) )))
(assert (forall ((|a#119#0#0| T@U) (|a#119#1#0| T@U) (|a#119#2#0| T@U) ) (!  (=> (and (and (= (type |a#119#0#0|) DatatypeTypeType) (= (type |a#119#1#0|) (SeqType BoxType))) (= (type |a#119#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#UI.Op.SuccOp| |a#119#0#0| |a#119#1#0| |a#119#2#0|)) |##UI.Op.SuccOp|)) :qid |UIsdfy.41:14| :skolemid |4426| :pattern ( (|#UI.Op.SuccOp| |a#119#0#0| |a#119#1#0| |a#119#2#0|)) )))
(assert (forall ((d@@128 T@U) ) (!  (=> (= (type d@@128) DatatypeTypeType) (= (UI.Op.SuccOp_q d@@128) (= (DatatypeCtorId d@@128) |##UI.Op.SuccOp|))) :qid |unknown.0:0| :skolemid |4427| :pattern ( (UI.Op.SuccOp_q d@@128)) )))
(assert (forall ((d@@129 T@U) ) (!  (=> (and (= (type d@@129) DatatypeTypeType) (UI.Op.SuccOp_q d@@129)) (exists ((|a#120#0#0| T@U) (|a#120#1#0| T@U) (|a#120#2#0| T@U) ) (!  (and (and (and (= (type |a#120#0#0|) DatatypeTypeType) (= (type |a#120#1#0|) (SeqType BoxType))) (= (type |a#120#2#0|) DatatypeTypeType)) (= d@@129 (|#UI.Op.SuccOp| |a#120#0#0| |a#120#1#0| |a#120#2#0|))) :qid |UIsdfy.41:14| :skolemid |4428| :no-pattern (type |a#120#0#0|) :no-pattern (type |a#120#1#0|) :no-pattern (type |a#120#2#0|) :no-pattern (U_2_int |a#120#0#0|) :no-pattern (U_2_bool |a#120#0#0|) :no-pattern (U_2_int |a#120#1#0|) :no-pattern (U_2_bool |a#120#1#0|) :no-pattern (U_2_int |a#120#2#0|) :no-pattern (U_2_bool |a#120#2#0|) ))) :qid |unknown.0:0| :skolemid |4429| :pattern ( (UI.Op.SuccOp_q d@@129)) )))
(assert (forall ((|a#121#0#0| T@U) (|a#121#1#0| T@U) (|a#121#2#0| T@U) ) (!  (=> (and (and (= (type |a#121#0#0|) DatatypeTypeType) (= (type |a#121#1#0|) (SeqType BoxType))) (= (type |a#121#2#0|) DatatypeTypeType)) (= ($Is (|#UI.Op.SuccOp| |a#121#0#0| |a#121#1#0| |a#121#2#0|) Tclass.UI.Op)  (and (and ($Is |a#121#0#0| Tclass.UI.RangeStart) ($Is |a#121#1#0| (TSeq Tclass.UI.SuccResult))) ($Is |a#121#2#0| Tclass.UI.RangeEnd)))) :qid |UIsdfy.41:14| :skolemid |4430| :pattern ( ($Is (|#UI.Op.SuccOp| |a#121#0#0| |a#121#1#0| |a#121#2#0|) Tclass.UI.Op)) )))
(assert (forall ((|a#122#0#0| T@U) (|a#122#1#0| T@U) (|a#122#2#0| T@U) ($h@@151 T@U) ) (!  (=> (and (and (and (and (= (type |a#122#0#0|) DatatypeTypeType) (= (type |a#122#1#0|) (SeqType BoxType))) (= (type |a#122#2#0|) DatatypeTypeType)) (= (type $h@@151) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@151)) (= ($IsAlloc (|#UI.Op.SuccOp| |a#122#0#0| |a#122#1#0| |a#122#2#0|) Tclass.UI.Op $h@@151)  (and (and ($IsAlloc |a#122#0#0| Tclass.UI.RangeStart $h@@151) ($IsAlloc |a#122#1#0| (TSeq Tclass.UI.SuccResult) $h@@151)) ($IsAlloc |a#122#2#0| Tclass.UI.RangeEnd $h@@151)))) :qid |UIsdfy.41:14| :skolemid |4431| :pattern ( ($IsAlloc (|#UI.Op.SuccOp| |a#122#0#0| |a#122#1#0| |a#122#2#0|) Tclass.UI.Op $h@@151)) )))
(assert (forall ((arg0@@690 T@U) ) (! (= (type (UI.Op.start arg0@@690)) DatatypeTypeType) :qid |funType:UI.Op.start| :pattern ( (UI.Op.start arg0@@690)) )))
(assert (forall ((d@@130 T@U) ($h@@152 T@U) ) (!  (=> (and (and (= (type d@@130) DatatypeTypeType) (= (type $h@@152) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@152) (and (UI.Op.SuccOp_q d@@130) ($IsAlloc d@@130 Tclass.UI.Op $h@@152)))) ($IsAlloc (UI.Op.start d@@130) Tclass.UI.RangeStart $h@@152)) :qid |unknown.0:0| :skolemid |4432| :pattern ( ($IsAlloc (UI.Op.start d@@130) Tclass.UI.RangeStart $h@@152)) )))
(assert (forall ((arg0@@691 T@U) ) (! (= (type (UI.Op.results arg0@@691)) (SeqType BoxType)) :qid |funType:UI.Op.results| :pattern ( (UI.Op.results arg0@@691)) )))
(assert (forall ((d@@131 T@U) ($h@@153 T@U) ) (!  (=> (and (and (= (type d@@131) DatatypeTypeType) (= (type $h@@153) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@153) (and (UI.Op.SuccOp_q d@@131) ($IsAlloc d@@131 Tclass.UI.Op $h@@153)))) ($IsAlloc (UI.Op.results d@@131) (TSeq Tclass.UI.SuccResult) $h@@153)) :qid |unknown.0:0| :skolemid |4433| :pattern ( ($IsAlloc (UI.Op.results d@@131) (TSeq Tclass.UI.SuccResult) $h@@153)) )))
(assert (forall ((arg0@@692 T@U) ) (! (= (type (UI.Op.end arg0@@692)) DatatypeTypeType) :qid |funType:UI.Op.end| :pattern ( (UI.Op.end arg0@@692)) )))
(assert (forall ((d@@132 T@U) ($h@@154 T@U) ) (!  (=> (and (and (= (type d@@132) DatatypeTypeType) (= (type $h@@154) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@154) (and (UI.Op.SuccOp_q d@@132) ($IsAlloc d@@132 Tclass.UI.Op $h@@154)))) ($IsAlloc (UI.Op.end d@@132) Tclass.UI.RangeEnd $h@@154)) :qid |unknown.0:0| :skolemid |4434| :pattern ( ($IsAlloc (UI.Op.end d@@132) Tclass.UI.RangeEnd $h@@154)) )))
(assert (forall ((|a#123#0#0| T@U) (|a#123#1#0| T@U) (|a#123#2#0| T@U) ) (!  (=> (and (and (= (type |a#123#0#0|) DatatypeTypeType) (= (type |a#123#1#0|) (SeqType BoxType))) (= (type |a#123#2#0|) DatatypeTypeType)) (= (|#UI.Op.SuccOp| (Lit |a#123#0#0|) (Lit |a#123#1#0|) (Lit |a#123#2#0|)) (Lit (|#UI.Op.SuccOp| |a#123#0#0| |a#123#1#0| |a#123#2#0|)))) :qid |UIsdfy.41:14| :skolemid |4435| :pattern ( (|#UI.Op.SuccOp| (Lit |a#123#0#0|) (Lit |a#123#1#0|) (Lit |a#123#2#0|))) )))
(assert (forall ((|a#124#0#0| T@U) (|a#124#1#0| T@U) (|a#124#2#0| T@U) ) (!  (=> (and (and (= (type |a#124#0#0|) DatatypeTypeType) (= (type |a#124#1#0|) (SeqType BoxType))) (= (type |a#124#2#0|) DatatypeTypeType)) (= (UI.Op.start (|#UI.Op.SuccOp| |a#124#0#0| |a#124#1#0| |a#124#2#0|)) |a#124#0#0|)) :qid |UIsdfy.41:14| :skolemid |4436| :pattern ( (|#UI.Op.SuccOp| |a#124#0#0| |a#124#1#0| |a#124#2#0|)) )))
(assert (forall ((|a#125#0#0| T@U) (|a#125#1#0| T@U) (|a#125#2#0| T@U) ) (!  (=> (and (and (= (type |a#125#0#0|) DatatypeTypeType) (= (type |a#125#1#0|) (SeqType BoxType))) (= (type |a#125#2#0|) DatatypeTypeType)) (< (DtRank |a#125#0#0|) (DtRank (|#UI.Op.SuccOp| |a#125#0#0| |a#125#1#0| |a#125#2#0|)))) :qid |UIsdfy.41:14| :skolemid |4437| :pattern ( (|#UI.Op.SuccOp| |a#125#0#0| |a#125#1#0| |a#125#2#0|)) )))
(assert (forall ((|a#126#0#0| T@U) (|a#126#1#0| T@U) (|a#126#2#0| T@U) ) (!  (=> (and (and (= (type |a#126#0#0|) DatatypeTypeType) (= (type |a#126#1#0|) (SeqType BoxType))) (= (type |a#126#2#0|) DatatypeTypeType)) (= (UI.Op.results (|#UI.Op.SuccOp| |a#126#0#0| |a#126#1#0| |a#126#2#0|)) |a#126#1#0|)) :qid |UIsdfy.41:14| :skolemid |4438| :pattern ( (|#UI.Op.SuccOp| |a#126#0#0| |a#126#1#0| |a#126#2#0|)) )))
(assert (forall ((|a#127#0#0| T@U) (|a#127#1#0| T@U) (|a#127#2#0| T@U) (i@@33 Int) ) (!  (=> (and (and (and (= (type |a#127#0#0|) DatatypeTypeType) (= (type |a#127#1#0|) (SeqType BoxType))) (= (type |a#127#2#0|) DatatypeTypeType)) (and (<= 0 i@@33) (< i@@33 (|Seq#Length| |a#127#1#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#127#1#0| i@@33))) (DtRank (|#UI.Op.SuccOp| |a#127#0#0| |a#127#1#0| |a#127#2#0|)))) :qid |UIsdfy.41:14| :skolemid |4439| :pattern ( (|Seq#Index| |a#127#1#0| i@@33) (|#UI.Op.SuccOp| |a#127#0#0| |a#127#1#0| |a#127#2#0|)) )))
(assert (forall ((|a#128#0#0| T@U) (|a#128#1#0| T@U) (|a#128#2#0| T@U) ) (!  (=> (and (and (= (type |a#128#0#0|) DatatypeTypeType) (= (type |a#128#1#0|) (SeqType BoxType))) (= (type |a#128#2#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#128#1#0|) (DtRank (|#UI.Op.SuccOp| |a#128#0#0| |a#128#1#0| |a#128#2#0|)))) :qid |UIsdfy.41:14| :skolemid |4440| :pattern ( (|#UI.Op.SuccOp| |a#128#0#0| |a#128#1#0| |a#128#2#0|)) )))
(assert (forall ((|a#129#0#0| T@U) (|a#129#1#0| T@U) (|a#129#2#0| T@U) ) (!  (=> (and (and (= (type |a#129#0#0|) DatatypeTypeType) (= (type |a#129#1#0|) (SeqType BoxType))) (= (type |a#129#2#0|) DatatypeTypeType)) (= (UI.Op.end (|#UI.Op.SuccOp| |a#129#0#0| |a#129#1#0| |a#129#2#0|)) |a#129#2#0|)) :qid |UIsdfy.41:14| :skolemid |4441| :pattern ( (|#UI.Op.SuccOp| |a#129#0#0| |a#129#1#0| |a#129#2#0|)) )))
(assert (forall ((|a#130#0#0| T@U) (|a#130#1#0| T@U) (|a#130#2#0| T@U) ) (!  (=> (and (and (= (type |a#130#0#0|) DatatypeTypeType) (= (type |a#130#1#0|) (SeqType BoxType))) (= (type |a#130#2#0|) DatatypeTypeType)) (< (DtRank |a#130#2#0|) (DtRank (|#UI.Op.SuccOp| |a#130#0#0| |a#130#1#0| |a#130#2#0|)))) :qid |UIsdfy.41:14| :skolemid |4442| :pattern ( (|#UI.Op.SuccOp| |a#130#0#0| |a#130#1#0| |a#130#2#0|)) )))
(assert (forall ((d@@133 T@U) ) (!  (=> (and (= (type d@@133) DatatypeTypeType) (|$IsA#UI.Op| d@@133)) (or (or (or (or (or (or (or (or (or (UI.Op.NoOp_q d@@133) (UI.Op.SyncOp_q d@@133)) (UI.Op.CrashOp_q d@@133)) (UI.Op.PushSyncOp_q d@@133)) (UI.Op.PopSyncOp_q d@@133)) (UI.Op.GetOp_q d@@133)) (UI.Op.GetBeginOp_q d@@133)) (UI.Op.GetEndOp_q d@@133)) (UI.Op.PutOp_q d@@133)) (UI.Op.SuccOp_q d@@133))) :qid |unknown.0:0| :skolemid |4443| :pattern ( (|$IsA#UI.Op| d@@133)) )))
(assert (forall ((d@@134 T@U) ) (!  (=> (and (= (type d@@134) DatatypeTypeType) ($Is d@@134 Tclass.UI.Op)) (or (or (or (or (or (or (or (or (or (UI.Op.NoOp_q d@@134) (UI.Op.SyncOp_q d@@134)) (UI.Op.CrashOp_q d@@134)) (UI.Op.PushSyncOp_q d@@134)) (UI.Op.PopSyncOp_q d@@134)) (UI.Op.GetOp_q d@@134)) (UI.Op.GetBeginOp_q d@@134)) (UI.Op.GetEndOp_q d@@134)) (UI.Op.PutOp_q d@@134)) (UI.Op.SuccOp_q d@@134))) :qid |unknown.0:0| :skolemid |4444| :pattern ( (UI.Op.SuccOp_q d@@134) ($Is d@@134 Tclass.UI.Op)) :pattern ( (UI.Op.PutOp_q d@@134) ($Is d@@134 Tclass.UI.Op)) :pattern ( (UI.Op.GetEndOp_q d@@134) ($Is d@@134 Tclass.UI.Op)) :pattern ( (UI.Op.GetBeginOp_q d@@134) ($Is d@@134 Tclass.UI.Op)) :pattern ( (UI.Op.GetOp_q d@@134) ($Is d@@134 Tclass.UI.Op)) :pattern ( (UI.Op.PopSyncOp_q d@@134) ($Is d@@134 Tclass.UI.Op)) :pattern ( (UI.Op.PushSyncOp_q d@@134) ($Is d@@134 Tclass.UI.Op)) :pattern ( (UI.Op.CrashOp_q d@@134) ($Is d@@134 Tclass.UI.Op)) :pattern ( (UI.Op.SyncOp_q d@@134) ($Is d@@134 Tclass.UI.Op)) :pattern ( (UI.Op.NoOp_q d@@134) ($Is d@@134 Tclass.UI.Op)) )))
(assert (forall ((a@@166 T@U) (b@@97 T@U) ) (!  (=> (and (and (= (type a@@166) DatatypeTypeType) (= (type b@@97) DatatypeTypeType)) (and (UI.Op.NoOp_q a@@166) (UI.Op.NoOp_q b@@97))) (= (|UI.Op#Equal| a@@166 b@@97) true)) :qid |unknown.0:0| :skolemid |4445| :pattern ( (|UI.Op#Equal| a@@166 b@@97) (UI.Op.NoOp_q a@@166)) :pattern ( (|UI.Op#Equal| a@@166 b@@97) (UI.Op.NoOp_q b@@97)) )))
(assert (forall ((a@@167 T@U) (b@@98 T@U) ) (!  (=> (and (and (= (type a@@167) DatatypeTypeType) (= (type b@@98) DatatypeTypeType)) (and (UI.Op.SyncOp_q a@@167) (UI.Op.SyncOp_q b@@98))) (= (|UI.Op#Equal| a@@167 b@@98) true)) :qid |unknown.0:0| :skolemid |4446| :pattern ( (|UI.Op#Equal| a@@167 b@@98) (UI.Op.SyncOp_q a@@167)) :pattern ( (|UI.Op#Equal| a@@167 b@@98) (UI.Op.SyncOp_q b@@98)) )))
(assert (forall ((a@@168 T@U) (b@@99 T@U) ) (!  (=> (and (and (= (type a@@168) DatatypeTypeType) (= (type b@@99) DatatypeTypeType)) (and (UI.Op.CrashOp_q a@@168) (UI.Op.CrashOp_q b@@99))) (= (|UI.Op#Equal| a@@168 b@@99) true)) :qid |unknown.0:0| :skolemid |4447| :pattern ( (|UI.Op#Equal| a@@168 b@@99) (UI.Op.CrashOp_q a@@168)) :pattern ( (|UI.Op#Equal| a@@168 b@@99) (UI.Op.CrashOp_q b@@99)) )))
(assert (forall ((a@@169 T@U) (b@@100 T@U) ) (!  (=> (and (and (= (type a@@169) DatatypeTypeType) (= (type b@@100) DatatypeTypeType)) (and (UI.Op.PushSyncOp_q a@@169) (UI.Op.PushSyncOp_q b@@100))) (= (|UI.Op#Equal| a@@169 b@@100) (= (UI.Op.id a@@169) (UI.Op.id b@@100)))) :qid |unknown.0:0| :skolemid |4448| :pattern ( (|UI.Op#Equal| a@@169 b@@100) (UI.Op.PushSyncOp_q a@@169)) :pattern ( (|UI.Op#Equal| a@@169 b@@100) (UI.Op.PushSyncOp_q b@@100)) )))
(assert (forall ((a@@170 T@U) (b@@101 T@U) ) (!  (=> (and (and (= (type a@@170) DatatypeTypeType) (= (type b@@101) DatatypeTypeType)) (and (UI.Op.PopSyncOp_q a@@170) (UI.Op.PopSyncOp_q b@@101))) (= (|UI.Op#Equal| a@@170 b@@101) (= (UI.Op.id a@@170) (UI.Op.id b@@101)))) :qid |unknown.0:0| :skolemid |4449| :pattern ( (|UI.Op#Equal| a@@170 b@@101) (UI.Op.PopSyncOp_q a@@170)) :pattern ( (|UI.Op#Equal| a@@170 b@@101) (UI.Op.PopSyncOp_q b@@101)) )))
(assert (forall ((a@@171 T@U) (b@@102 T@U) ) (!  (=> (and (and (= (type a@@171) DatatypeTypeType) (= (type b@@102) DatatypeTypeType)) (and (UI.Op.GetOp_q a@@171) (UI.Op.GetOp_q b@@102))) (= (|UI.Op#Equal| a@@171 b@@102)  (and (|Seq#Equal| (UI.Op.key a@@171) (UI.Op.key b@@102)) (|Seq#Equal| (UI.Op.value a@@171) (UI.Op.value b@@102))))) :qid |unknown.0:0| :skolemid |4450| :pattern ( (|UI.Op#Equal| a@@171 b@@102) (UI.Op.GetOp_q a@@171)) :pattern ( (|UI.Op#Equal| a@@171 b@@102) (UI.Op.GetOp_q b@@102)) )))
(assert (forall ((a@@172 T@U) (b@@103 T@U) ) (!  (=> (and (and (= (type a@@172) DatatypeTypeType) (= (type b@@103) DatatypeTypeType)) (and (UI.Op.GetBeginOp_q a@@172) (UI.Op.GetBeginOp_q b@@103))) (= (|UI.Op#Equal| a@@172 b@@103)  (and (|Seq#Equal| (UI.Op.key a@@172) (UI.Op.key b@@103)) (= (UI.Op.id a@@172) (UI.Op.id b@@103))))) :qid |unknown.0:0| :skolemid |4451| :pattern ( (|UI.Op#Equal| a@@172 b@@103) (UI.Op.GetBeginOp_q a@@172)) :pattern ( (|UI.Op#Equal| a@@172 b@@103) (UI.Op.GetBeginOp_q b@@103)) )))
(assert (forall ((a@@173 T@U) (b@@104 T@U) ) (!  (=> (and (and (= (type a@@173) DatatypeTypeType) (= (type b@@104) DatatypeTypeType)) (and (UI.Op.GetEndOp_q a@@173) (UI.Op.GetEndOp_q b@@104))) (= (|UI.Op#Equal| a@@173 b@@104)  (and (|Seq#Equal| (UI.Op.value a@@173) (UI.Op.value b@@104)) (= (UI.Op.id a@@173) (UI.Op.id b@@104))))) :qid |unknown.0:0| :skolemid |4452| :pattern ( (|UI.Op#Equal| a@@173 b@@104) (UI.Op.GetEndOp_q a@@173)) :pattern ( (|UI.Op#Equal| a@@173 b@@104) (UI.Op.GetEndOp_q b@@104)) )))
(assert (forall ((a@@174 T@U) (b@@105 T@U) ) (!  (=> (and (and (= (type a@@174) DatatypeTypeType) (= (type b@@105) DatatypeTypeType)) (and (UI.Op.PutOp_q a@@174) (UI.Op.PutOp_q b@@105))) (= (|UI.Op#Equal| a@@174 b@@105)  (and (|Seq#Equal| (UI.Op.key a@@174) (UI.Op.key b@@105)) (|Seq#Equal| (UI.Op.value a@@174) (UI.Op.value b@@105))))) :qid |unknown.0:0| :skolemid |4453| :pattern ( (|UI.Op#Equal| a@@174 b@@105) (UI.Op.PutOp_q a@@174)) :pattern ( (|UI.Op#Equal| a@@174 b@@105) (UI.Op.PutOp_q b@@105)) )))
(assert (forall ((a@@175 T@U) (b@@106 T@U) ) (!  (=> (and (and (= (type a@@175) DatatypeTypeType) (= (type b@@106) DatatypeTypeType)) (and (UI.Op.SuccOp_q a@@175) (UI.Op.SuccOp_q b@@106))) (= (|UI.Op#Equal| a@@175 b@@106)  (and (and (|UI.RangeStart#Equal| (UI.Op.start a@@175) (UI.Op.start b@@106)) (|Seq#Equal| (UI.Op.results a@@175) (UI.Op.results b@@106))) (|UI.RangeEnd#Equal| (UI.Op.end a@@175) (UI.Op.end b@@106))))) :qid |unknown.0:0| :skolemid |4454| :pattern ( (|UI.Op#Equal| a@@175 b@@106) (UI.Op.SuccOp_q a@@175)) :pattern ( (|UI.Op#Equal| a@@175 b@@106) (UI.Op.SuccOp_q b@@106)) )))
(assert (forall ((a@@176 T@U) (b@@107 T@U) ) (!  (=> (and (= (type a@@176) DatatypeTypeType) (= (type b@@107) DatatypeTypeType)) (= (|UI.Op#Equal| a@@176 b@@107) (= a@@176 b@@107))) :qid |unknown.0:0| :skolemid |4455| :pattern ( (|UI.Op#Equal| a@@176 b@@107)) )))
(assert (= (type Tclass.UI.__default) TyType))
(assert (= (Tag Tclass.UI.__default) Tagclass.UI.__default))
(assert (= (TagFamily Tclass.UI.__default) tytagFamily$_default))
(assert (forall ((bx@@186 T@U) ) (!  (=> (and (= (type bx@@186) BoxType) ($IsBox bx@@186 Tclass.UI.__default)) (and (= ($Box ($Unbox refType bx@@186)) bx@@186) ($Is ($Unbox refType bx@@186) Tclass.UI.__default))) :qid |unknown.0:0| :skolemid |4456| :pattern ( ($IsBox bx@@186 Tclass.UI.__default)) )))
(assert (forall (($o@@56 T@U) ) (!  (=> (= (type $o@@56) refType) (= ($Is $o@@56 Tclass.UI.__default)  (or (= $o@@56 null) (= (dtype $o@@56) Tclass.UI.__default)))) :qid |unknown.0:0| :skolemid |4457| :pattern ( ($Is $o@@56 Tclass.UI.__default)) )))
(assert (forall (($o@@57 T@U) ($h@@155 T@U) ) (!  (=> (and (= (type $o@@57) refType) (= (type $h@@155) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@57 Tclass.UI.__default $h@@155)  (or (= $o@@57 null) (U_2_bool (MapType1Select (MapType0Select $h@@155 $o@@57) alloc))))) :qid |unknown.0:0| :skolemid |4458| :pattern ( ($IsAlloc $o@@57 Tclass.UI.__default $h@@155)) )))
(assert (forall ((arg0@@693 T@U) ) (! (= (type (|#MapSpec.Variables.Variables| arg0@@693)) DatatypeTypeType) :qid |funType:#MapSpec.Variables.Variables| :pattern ( (|#MapSpec.Variables.Variables| arg0@@693)) )))
(assert (forall ((|a#131#0#0| T@U) ) (!  (=> (= (type |a#131#0#0|) (IMapType BoxType BoxType)) (= (DatatypeCtorId (|#MapSpec.Variables.Variables| |a#131#0#0|)) |##MapSpec.Variables.Variables|)) :qid |MapSpecsdfy.25:40| :skolemid |4459| :pattern ( (|#MapSpec.Variables.Variables| |a#131#0#0|)) )))
(assert (forall ((d@@135 T@U) ) (!  (=> (= (type d@@135) DatatypeTypeType) (= (MapSpec.Variables.Variables_q d@@135) (= (DatatypeCtorId d@@135) |##MapSpec.Variables.Variables|))) :qid |unknown.0:0| :skolemid |4460| :pattern ( (MapSpec.Variables.Variables_q d@@135)) )))
(assert (forall ((d@@136 T@U) ) (!  (=> (and (= (type d@@136) DatatypeTypeType) (MapSpec.Variables.Variables_q d@@136)) (exists ((|a#132#0#0| T@U) ) (!  (and (= (type |a#132#0#0|) (IMapType BoxType BoxType)) (= d@@136 (|#MapSpec.Variables.Variables| |a#132#0#0|))) :qid |MapSpecsdfy.25:40| :skolemid |4461| :no-pattern (type |a#132#0#0|) :no-pattern (U_2_int |a#132#0#0|) :no-pattern (U_2_bool |a#132#0#0|) ))) :qid |unknown.0:0| :skolemid |4462| :pattern ( (MapSpec.Variables.Variables_q d@@136)) )))
(assert (= (type Tclass.MapSpec.Variables) TyType))
(assert (= (Tag Tclass.MapSpec.Variables) Tagclass.MapSpec.Variables))
(assert (= (TagFamily Tclass.MapSpec.Variables) tytagFamily$Variables))
(assert (forall ((bx@@187 T@U) ) (!  (=> (and (= (type bx@@187) BoxType) ($IsBox bx@@187 Tclass.MapSpec.Variables)) (and (= ($Box ($Unbox DatatypeTypeType bx@@187)) bx@@187) ($Is ($Unbox DatatypeTypeType bx@@187) Tclass.MapSpec.Variables))) :qid |unknown.0:0| :skolemid |4463| :pattern ( ($IsBox bx@@187 Tclass.MapSpec.Variables)) )))
(assert (forall ((|a#133#0#0| T@U) ) (!  (=> (= (type |a#133#0#0|) (IMapType BoxType BoxType)) (= ($Is (|#MapSpec.Variables.Variables| |a#133#0#0|) Tclass.MapSpec.Variables) ($Is |a#133#0#0| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)))) :qid |MapSpecsdfy.25:40| :skolemid |4464| :pattern ( ($Is (|#MapSpec.Variables.Variables| |a#133#0#0|) Tclass.MapSpec.Variables)) )))
(assert (forall ((|a#134#0#0| T@U) ($h@@156 T@U) ) (!  (=> (and (and (= (type |a#134#0#0|) (IMapType BoxType BoxType)) (= (type $h@@156) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@156)) (= ($IsAlloc (|#MapSpec.Variables.Variables| |a#134#0#0|) Tclass.MapSpec.Variables $h@@156) ($IsAlloc |a#134#0#0| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value) $h@@156))) :qid |MapSpecsdfy.25:40| :skolemid |4465| :pattern ( ($IsAlloc (|#MapSpec.Variables.Variables| |a#134#0#0|) Tclass.MapSpec.Variables $h@@156)) )))
(assert (forall ((arg0@@694 T@U) ) (! (= (type (MapSpec.Variables.view arg0@@694)) (IMapType BoxType BoxType)) :qid |funType:MapSpec.Variables.view| :pattern ( (MapSpec.Variables.view arg0@@694)) )))
(assert (forall ((d@@137 T@U) ($h@@157 T@U) ) (!  (=> (and (and (= (type d@@137) DatatypeTypeType) (= (type $h@@157) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@157) (and (MapSpec.Variables.Variables_q d@@137) ($IsAlloc d@@137 Tclass.MapSpec.Variables $h@@157)))) ($IsAlloc (MapSpec.Variables.view d@@137) (TIMap Tclass.KeyType.Key Tclass.ValueType.Value) $h@@157)) :qid |unknown.0:0| :skolemid |4466| :pattern ( ($IsAlloc (MapSpec.Variables.view d@@137) (TIMap Tclass.KeyType.Key Tclass.ValueType.Value) $h@@157)) )))
(assert (forall ((|a#135#0#0| T@U) ) (!  (=> (= (type |a#135#0#0|) (IMapType BoxType BoxType)) (= (|#MapSpec.Variables.Variables| (Lit |a#135#0#0|)) (Lit (|#MapSpec.Variables.Variables| |a#135#0#0|)))) :qid |MapSpecsdfy.25:40| :skolemid |4467| :pattern ( (|#MapSpec.Variables.Variables| (Lit |a#135#0#0|))) )))
(assert (forall ((|a#136#0#0| T@U) ) (!  (=> (= (type |a#136#0#0|) (IMapType BoxType BoxType)) (= (MapSpec.Variables.view (|#MapSpec.Variables.Variables| |a#136#0#0|)) |a#136#0#0|)) :qid |MapSpecsdfy.25:40| :skolemid |4468| :pattern ( (|#MapSpec.Variables.Variables| |a#136#0#0|)) )))
(assert (forall ((|a#137#0#0| T@U) (d@@138 T@U) ) (!  (=> (and (and (= (type |a#137#0#0|) (IMapType BoxType BoxType)) (= (type d@@138) DatatypeTypeType)) (U_2_bool (MapType0Select (|IMap#Domain| |a#137#0#0|) ($Box d@@138)))) (< (DtRank d@@138) (DtRank (|#MapSpec.Variables.Variables| |a#137#0#0|)))) :qid |MapSpecsdfy.25:40| :skolemid |4469| :pattern ( (MapType0Select (|IMap#Domain| |a#137#0#0|) ($Box d@@138)) (|#MapSpec.Variables.Variables| |a#137#0#0|)) )))
(assert (forall ((|a#138#0#0| T@U) (bx@@188 T@U) ) (!  (=> (and (and (= (type |a#138#0#0|) (IMapType BoxType BoxType)) (= (type bx@@188) BoxType)) (U_2_bool (MapType0Select (|IMap#Domain| |a#138#0#0|) bx@@188))) (< (DtRank ($Unbox DatatypeTypeType (MapType0Select (|IMap#Elements| |a#138#0#0|) bx@@188))) (DtRank (|#MapSpec.Variables.Variables| |a#138#0#0|)))) :qid |MapSpecsdfy.25:40| :skolemid |4470| :pattern ( (MapType0Select (|IMap#Domain| |a#138#0#0|) bx@@188) (|#MapSpec.Variables.Variables| |a#138#0#0|)) )))
(assert (forall ((d@@139 T@U) ) (!  (=> (and (= (type d@@139) DatatypeTypeType) (|$IsA#MapSpec.Variables| d@@139)) (MapSpec.Variables.Variables_q d@@139)) :qid |unknown.0:0| :skolemid |4471| :pattern ( (|$IsA#MapSpec.Variables| d@@139)) )))
(assert (forall ((d@@140 T@U) ) (!  (=> (and (= (type d@@140) DatatypeTypeType) ($Is d@@140 Tclass.MapSpec.Variables)) (MapSpec.Variables.Variables_q d@@140)) :qid |unknown.0:0| :skolemid |4472| :pattern ( (MapSpec.Variables.Variables_q d@@140) ($Is d@@140 Tclass.MapSpec.Variables)) )))
(assert (forall ((a@@177 T@U) (b@@108 T@U) ) (!  (=> (and (and (= (type a@@177) DatatypeTypeType) (= (type b@@108) DatatypeTypeType)) true) (= (|MapSpec.Variables#Equal| a@@177 b@@108) (|IMap#Equal| (MapSpec.Variables.view a@@177) (MapSpec.Variables.view b@@108)))) :qid |unknown.0:0| :skolemid |4473| :pattern ( (|MapSpec.Variables#Equal| a@@177 b@@108)) )))
(assert (forall ((a@@178 T@U) (b@@109 T@U) ) (!  (=> (and (= (type a@@178) DatatypeTypeType) (= (type b@@109) DatatypeTypeType)) (= (|MapSpec.Variables#Equal| a@@178 b@@109) (= a@@178 b@@109))) :qid |unknown.0:0| :skolemid |4474| :pattern ( (|MapSpec.Variables#Equal| a@@178 b@@109)) )))
(assert (forall ((arg0@@695 T@U) (arg1@@355 T@U) ) (! (= (type (|#MapSpec.Step.QueryStep| arg0@@695 arg1@@355)) DatatypeTypeType) :qid |funType:#MapSpec.Step.QueryStep| :pattern ( (|#MapSpec.Step.QueryStep| arg0@@695 arg1@@355)) )))
(assert (forall ((|a#139#0#0| T@U) (|a#139#1#0| T@U) ) (!  (=> (and (= (type |a#139#0#0|) (SeqType BoxType)) (= (type |a#139#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#MapSpec.Step.QueryStep| |a#139#0#0| |a#139#1#0|)) |##MapSpec.Step.QueryStep|)) :qid |MapSpecsdfy.123:19| :skolemid |4475| :pattern ( (|#MapSpec.Step.QueryStep| |a#139#0#0| |a#139#1#0|)) )))
(assert (forall ((d@@141 T@U) ) (!  (=> (= (type d@@141) DatatypeTypeType) (= (MapSpec.Step.QueryStep_q d@@141) (= (DatatypeCtorId d@@141) |##MapSpec.Step.QueryStep|))) :qid |unknown.0:0| :skolemid |4476| :pattern ( (MapSpec.Step.QueryStep_q d@@141)) )))
(assert (forall ((d@@142 T@U) ) (!  (=> (and (= (type d@@142) DatatypeTypeType) (MapSpec.Step.QueryStep_q d@@142)) (exists ((|a#140#0#0| T@U) (|a#140#1#0| T@U) ) (!  (and (and (= (type |a#140#0#0|) (SeqType BoxType)) (= (type |a#140#1#0|) (SeqType BoxType))) (= d@@142 (|#MapSpec.Step.QueryStep| |a#140#0#0| |a#140#1#0|))) :qid |MapSpecsdfy.123:19| :skolemid |4477| :no-pattern (type |a#140#0#0|) :no-pattern (type |a#140#1#0|) :no-pattern (U_2_int |a#140#0#0|) :no-pattern (U_2_bool |a#140#0#0|) :no-pattern (U_2_int |a#140#1#0|) :no-pattern (U_2_bool |a#140#1#0|) ))) :qid |unknown.0:0| :skolemid |4478| :pattern ( (MapSpec.Step.QueryStep_q d@@142)) )))
(assert (= (type Tclass.MapSpec.Step) TyType))
(assert (= (Tag Tclass.MapSpec.Step) Tagclass.MapSpec.Step))
(assert (= (TagFamily Tclass.MapSpec.Step) tytagFamily$Step))
(assert (forall ((bx@@189 T@U) ) (!  (=> (and (= (type bx@@189) BoxType) ($IsBox bx@@189 Tclass.MapSpec.Step)) (and (= ($Box ($Unbox DatatypeTypeType bx@@189)) bx@@189) ($Is ($Unbox DatatypeTypeType bx@@189) Tclass.MapSpec.Step))) :qid |unknown.0:0| :skolemid |4479| :pattern ( ($IsBox bx@@189 Tclass.MapSpec.Step)) )))
(assert (forall ((|a#141#0#0| T@U) (|a#141#1#0| T@U) ) (!  (=> (and (= (type |a#141#0#0|) (SeqType BoxType)) (= (type |a#141#1#0|) (SeqType BoxType))) (= ($Is (|#MapSpec.Step.QueryStep| |a#141#0#0| |a#141#1#0|) Tclass.MapSpec.Step)  (and ($Is |a#141#0#0| Tclass.KeyType.Key) ($Is |a#141#1#0| Tclass.ValueType.Value)))) :qid |MapSpecsdfy.123:19| :skolemid |4480| :pattern ( ($Is (|#MapSpec.Step.QueryStep| |a#141#0#0| |a#141#1#0|) Tclass.MapSpec.Step)) )))
(assert (forall ((|a#142#0#0| T@U) (|a#142#1#0| T@U) ($h@@158 T@U) ) (!  (=> (and (and (and (= (type |a#142#0#0|) (SeqType BoxType)) (= (type |a#142#1#0|) (SeqType BoxType))) (= (type $h@@158) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@158)) (= ($IsAlloc (|#MapSpec.Step.QueryStep| |a#142#0#0| |a#142#1#0|) Tclass.MapSpec.Step $h@@158)  (and ($IsAlloc |a#142#0#0| Tclass.KeyType.Key $h@@158) ($IsAlloc |a#142#1#0| Tclass.ValueType.Value $h@@158)))) :qid |MapSpecsdfy.123:19| :skolemid |4481| :pattern ( ($IsAlloc (|#MapSpec.Step.QueryStep| |a#142#0#0| |a#142#1#0|) Tclass.MapSpec.Step $h@@158)) )))
(assert (forall ((arg0@@696 T@U) ) (! (= (type (MapSpec.Step.key arg0@@696)) (SeqType BoxType)) :qid |funType:MapSpec.Step.key| :pattern ( (MapSpec.Step.key arg0@@696)) )))
(assert (forall ((d@@143 T@U) ($h@@159 T@U) ) (!  (=> (and (and (= (type d@@143) DatatypeTypeType) (= (type $h@@159) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@159) (and (MapSpec.Step.QueryStep_q d@@143) ($IsAlloc d@@143 Tclass.MapSpec.Step $h@@159)))) ($IsAlloc (MapSpec.Step.key d@@143) Tclass.KeyType.Key $h@@159)) :qid |unknown.0:0| :skolemid |4482| :pattern ( ($IsAlloc (MapSpec.Step.key d@@143) Tclass.KeyType.Key $h@@159)) )))
(assert (forall ((arg0@@697 T@U) ) (! (= (type (MapSpec.Step.result arg0@@697)) (SeqType BoxType)) :qid |funType:MapSpec.Step.result| :pattern ( (MapSpec.Step.result arg0@@697)) )))
(assert (forall ((d@@144 T@U) ($h@@160 T@U) ) (!  (=> (and (and (= (type d@@144) DatatypeTypeType) (= (type $h@@160) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@160) (and (MapSpec.Step.QueryStep_q d@@144) ($IsAlloc d@@144 Tclass.MapSpec.Step $h@@160)))) ($IsAlloc (MapSpec.Step.result d@@144) Tclass.ValueType.Value $h@@160)) :qid |unknown.0:0| :skolemid |4483| :pattern ( ($IsAlloc (MapSpec.Step.result d@@144) Tclass.ValueType.Value $h@@160)) )))
(assert (forall ((|a#143#0#0| T@U) (|a#143#1#0| T@U) ) (!  (=> (and (= (type |a#143#0#0|) (SeqType BoxType)) (= (type |a#143#1#0|) (SeqType BoxType))) (= (|#MapSpec.Step.QueryStep| (Lit |a#143#0#0|) (Lit |a#143#1#0|)) (Lit (|#MapSpec.Step.QueryStep| |a#143#0#0| |a#143#1#0|)))) :qid |MapSpecsdfy.123:19| :skolemid |4484| :pattern ( (|#MapSpec.Step.QueryStep| (Lit |a#143#0#0|) (Lit |a#143#1#0|))) )))
(assert (forall ((|a#144#0#0| T@U) (|a#144#1#0| T@U) ) (!  (=> (and (= (type |a#144#0#0|) (SeqType BoxType)) (= (type |a#144#1#0|) (SeqType BoxType))) (= (MapSpec.Step.key (|#MapSpec.Step.QueryStep| |a#144#0#0| |a#144#1#0|)) |a#144#0#0|)) :qid |MapSpecsdfy.123:19| :skolemid |4485| :pattern ( (|#MapSpec.Step.QueryStep| |a#144#0#0| |a#144#1#0|)) )))
(assert (forall ((|a#145#0#0| T@U) (|a#145#1#0| T@U) ) (!  (=> (and (= (type |a#145#0#0|) (SeqType BoxType)) (= (type |a#145#1#0|) (SeqType BoxType))) (= (MapSpec.Step.result (|#MapSpec.Step.QueryStep| |a#145#0#0| |a#145#1#0|)) |a#145#1#0|)) :qid |MapSpecsdfy.123:19| :skolemid |4486| :pattern ( (|#MapSpec.Step.QueryStep| |a#145#0#0| |a#145#1#0|)) )))
(assert (forall ((arg0@@698 T@U) (arg1@@356 T@U) ) (! (= (type (|#MapSpec.Step.WriteStep| arg0@@698 arg1@@356)) DatatypeTypeType) :qid |funType:#MapSpec.Step.WriteStep| :pattern ( (|#MapSpec.Step.WriteStep| arg0@@698 arg1@@356)) )))
(assert (forall ((|a#146#0#0| T@U) (|a#146#1#0| T@U) ) (!  (=> (and (= (type |a#146#0#0|) (SeqType BoxType)) (= (type |a#146#1#0|) (SeqType BoxType))) (= (DatatypeCtorId (|#MapSpec.Step.WriteStep| |a#146#0#0| |a#146#1#0|)) |##MapSpec.Step.WriteStep|)) :qid |MapSpecsdfy.124:19| :skolemid |4487| :pattern ( (|#MapSpec.Step.WriteStep| |a#146#0#0| |a#146#1#0|)) )))
(assert (forall ((d@@145 T@U) ) (!  (=> (= (type d@@145) DatatypeTypeType) (= (MapSpec.Step.WriteStep_q d@@145) (= (DatatypeCtorId d@@145) |##MapSpec.Step.WriteStep|))) :qid |unknown.0:0| :skolemid |4488| :pattern ( (MapSpec.Step.WriteStep_q d@@145)) )))
(assert (forall ((d@@146 T@U) ) (!  (=> (and (= (type d@@146) DatatypeTypeType) (MapSpec.Step.WriteStep_q d@@146)) (exists ((|a#147#0#0| T@U) (|a#147#1#0| T@U) ) (!  (and (and (= (type |a#147#0#0|) (SeqType BoxType)) (= (type |a#147#1#0|) (SeqType BoxType))) (= d@@146 (|#MapSpec.Step.WriteStep| |a#147#0#0| |a#147#1#0|))) :qid |MapSpecsdfy.124:19| :skolemid |4489| :no-pattern (type |a#147#0#0|) :no-pattern (type |a#147#1#0|) :no-pattern (U_2_int |a#147#0#0|) :no-pattern (U_2_bool |a#147#0#0|) :no-pattern (U_2_int |a#147#1#0|) :no-pattern (U_2_bool |a#147#1#0|) ))) :qid |unknown.0:0| :skolemid |4490| :pattern ( (MapSpec.Step.WriteStep_q d@@146)) )))
(assert (forall ((|a#148#0#0| T@U) (|a#148#1#0| T@U) ) (!  (=> (and (= (type |a#148#0#0|) (SeqType BoxType)) (= (type |a#148#1#0|) (SeqType BoxType))) (= ($Is (|#MapSpec.Step.WriteStep| |a#148#0#0| |a#148#1#0|) Tclass.MapSpec.Step)  (and ($Is |a#148#0#0| Tclass.KeyType.Key) ($Is |a#148#1#0| Tclass.ValueType.Value)))) :qid |MapSpecsdfy.124:19| :skolemid |4491| :pattern ( ($Is (|#MapSpec.Step.WriteStep| |a#148#0#0| |a#148#1#0|) Tclass.MapSpec.Step)) )))
(assert (forall ((|a#149#0#0| T@U) (|a#149#1#0| T@U) ($h@@161 T@U) ) (!  (=> (and (and (and (= (type |a#149#0#0|) (SeqType BoxType)) (= (type |a#149#1#0|) (SeqType BoxType))) (= (type $h@@161) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@161)) (= ($IsAlloc (|#MapSpec.Step.WriteStep| |a#149#0#0| |a#149#1#0|) Tclass.MapSpec.Step $h@@161)  (and ($IsAlloc |a#149#0#0| Tclass.KeyType.Key $h@@161) ($IsAlloc |a#149#1#0| Tclass.ValueType.Value $h@@161)))) :qid |MapSpecsdfy.124:19| :skolemid |4492| :pattern ( ($IsAlloc (|#MapSpec.Step.WriteStep| |a#149#0#0| |a#149#1#0|) Tclass.MapSpec.Step $h@@161)) )))
(assert (forall ((d@@147 T@U) ($h@@162 T@U) ) (!  (=> (and (and (= (type d@@147) DatatypeTypeType) (= (type $h@@162) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@162) (and (MapSpec.Step.WriteStep_q d@@147) ($IsAlloc d@@147 Tclass.MapSpec.Step $h@@162)))) ($IsAlloc (MapSpec.Step.key d@@147) Tclass.KeyType.Key $h@@162)) :qid |unknown.0:0| :skolemid |4493| :pattern ( ($IsAlloc (MapSpec.Step.key d@@147) Tclass.KeyType.Key $h@@162)) )))
(assert (forall ((arg0@@699 T@U) ) (! (= (type (MapSpec.Step.new__value arg0@@699)) (SeqType BoxType)) :qid |funType:MapSpec.Step.new__value| :pattern ( (MapSpec.Step.new__value arg0@@699)) )))
(assert (forall ((d@@148 T@U) ($h@@163 T@U) ) (!  (=> (and (and (= (type d@@148) DatatypeTypeType) (= (type $h@@163) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@163) (and (MapSpec.Step.WriteStep_q d@@148) ($IsAlloc d@@148 Tclass.MapSpec.Step $h@@163)))) ($IsAlloc (MapSpec.Step.new__value d@@148) Tclass.ValueType.Value $h@@163)) :qid |unknown.0:0| :skolemid |4494| :pattern ( ($IsAlloc (MapSpec.Step.new__value d@@148) Tclass.ValueType.Value $h@@163)) )))
(assert (forall ((|a#150#0#0| T@U) (|a#150#1#0| T@U) ) (!  (=> (and (= (type |a#150#0#0|) (SeqType BoxType)) (= (type |a#150#1#0|) (SeqType BoxType))) (= (|#MapSpec.Step.WriteStep| (Lit |a#150#0#0|) (Lit |a#150#1#0|)) (Lit (|#MapSpec.Step.WriteStep| |a#150#0#0| |a#150#1#0|)))) :qid |MapSpecsdfy.124:19| :skolemid |4495| :pattern ( (|#MapSpec.Step.WriteStep| (Lit |a#150#0#0|) (Lit |a#150#1#0|))) )))
(assert (forall ((|a#151#0#0| T@U) (|a#151#1#0| T@U) ) (!  (=> (and (= (type |a#151#0#0|) (SeqType BoxType)) (= (type |a#151#1#0|) (SeqType BoxType))) (= (MapSpec.Step.key (|#MapSpec.Step.WriteStep| |a#151#0#0| |a#151#1#0|)) |a#151#0#0|)) :qid |MapSpecsdfy.124:19| :skolemid |4496| :pattern ( (|#MapSpec.Step.WriteStep| |a#151#0#0| |a#151#1#0|)) )))
(assert (forall ((|a#152#0#0| T@U) (|a#152#1#0| T@U) ) (!  (=> (and (= (type |a#152#0#0|) (SeqType BoxType)) (= (type |a#152#1#0|) (SeqType BoxType))) (= (MapSpec.Step.new__value (|#MapSpec.Step.WriteStep| |a#152#0#0| |a#152#1#0|)) |a#152#1#0|)) :qid |MapSpecsdfy.124:19| :skolemid |4497| :pattern ( (|#MapSpec.Step.WriteStep| |a#152#0#0| |a#152#1#0|)) )))
(assert (forall ((arg0@@700 T@U) (arg1@@357 T@U) (arg2@@218 T@U) ) (! (= (type (|#MapSpec.Step.SuccStep| arg0@@700 arg1@@357 arg2@@218)) DatatypeTypeType) :qid |funType:#MapSpec.Step.SuccStep| :pattern ( (|#MapSpec.Step.SuccStep| arg0@@700 arg1@@357 arg2@@218)) )))
(assert (forall ((|a#153#0#0| T@U) (|a#153#1#0| T@U) (|a#153#2#0| T@U) ) (!  (=> (and (and (= (type |a#153#0#0|) DatatypeTypeType) (= (type |a#153#1#0|) (SeqType BoxType))) (= (type |a#153#2#0|) DatatypeTypeType)) (= (DatatypeCtorId (|#MapSpec.Step.SuccStep| |a#153#0#0| |a#153#1#0| |a#153#2#0|)) |##MapSpec.Step.SuccStep|)) :qid |MapSpecsdfy.125:18| :skolemid |4498| :pattern ( (|#MapSpec.Step.SuccStep| |a#153#0#0| |a#153#1#0| |a#153#2#0|)) )))
(assert (forall ((d@@149 T@U) ) (!  (=> (= (type d@@149) DatatypeTypeType) (= (MapSpec.Step.SuccStep_q d@@149) (= (DatatypeCtorId d@@149) |##MapSpec.Step.SuccStep|))) :qid |unknown.0:0| :skolemid |4499| :pattern ( (MapSpec.Step.SuccStep_q d@@149)) )))
(assert (forall ((d@@150 T@U) ) (!  (=> (and (= (type d@@150) DatatypeTypeType) (MapSpec.Step.SuccStep_q d@@150)) (exists ((|a#154#0#0| T@U) (|a#154#1#0| T@U) (|a#154#2#0| T@U) ) (!  (and (and (and (= (type |a#154#0#0|) DatatypeTypeType) (= (type |a#154#1#0|) (SeqType BoxType))) (= (type |a#154#2#0|) DatatypeTypeType)) (= d@@150 (|#MapSpec.Step.SuccStep| |a#154#0#0| |a#154#1#0| |a#154#2#0|))) :qid |MapSpecsdfy.125:18| :skolemid |4500| :no-pattern (type |a#154#0#0|) :no-pattern (type |a#154#1#0|) :no-pattern (type |a#154#2#0|) :no-pattern (U_2_int |a#154#0#0|) :no-pattern (U_2_bool |a#154#0#0|) :no-pattern (U_2_int |a#154#1#0|) :no-pattern (U_2_bool |a#154#1#0|) :no-pattern (U_2_int |a#154#2#0|) :no-pattern (U_2_bool |a#154#2#0|) ))) :qid |unknown.0:0| :skolemid |4501| :pattern ( (MapSpec.Step.SuccStep_q d@@150)) )))
(assert (forall ((|a#155#0#0| T@U) (|a#155#1#0| T@U) (|a#155#2#0| T@U) ) (!  (=> (and (and (= (type |a#155#0#0|) DatatypeTypeType) (= (type |a#155#1#0|) (SeqType BoxType))) (= (type |a#155#2#0|) DatatypeTypeType)) (= ($Is (|#MapSpec.Step.SuccStep| |a#155#0#0| |a#155#1#0| |a#155#2#0|) Tclass.MapSpec.Step)  (and (and ($Is |a#155#0#0| Tclass.UI.RangeStart) ($Is |a#155#1#0| (TSeq Tclass.UI.SuccResult))) ($Is |a#155#2#0| Tclass.UI.RangeEnd)))) :qid |MapSpecsdfy.125:18| :skolemid |4502| :pattern ( ($Is (|#MapSpec.Step.SuccStep| |a#155#0#0| |a#155#1#0| |a#155#2#0|) Tclass.MapSpec.Step)) )))
(assert (forall ((|a#156#0#0| T@U) (|a#156#1#0| T@U) (|a#156#2#0| T@U) ($h@@164 T@U) ) (!  (=> (and (and (and (and (= (type |a#156#0#0|) DatatypeTypeType) (= (type |a#156#1#0|) (SeqType BoxType))) (= (type |a#156#2#0|) DatatypeTypeType)) (= (type $h@@164) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@164)) (= ($IsAlloc (|#MapSpec.Step.SuccStep| |a#156#0#0| |a#156#1#0| |a#156#2#0|) Tclass.MapSpec.Step $h@@164)  (and (and ($IsAlloc |a#156#0#0| Tclass.UI.RangeStart $h@@164) ($IsAlloc |a#156#1#0| (TSeq Tclass.UI.SuccResult) $h@@164)) ($IsAlloc |a#156#2#0| Tclass.UI.RangeEnd $h@@164)))) :qid |MapSpecsdfy.125:18| :skolemid |4503| :pattern ( ($IsAlloc (|#MapSpec.Step.SuccStep| |a#156#0#0| |a#156#1#0| |a#156#2#0|) Tclass.MapSpec.Step $h@@164)) )))
(assert (forall ((arg0@@701 T@U) ) (! (= (type (MapSpec.Step.start arg0@@701)) DatatypeTypeType) :qid |funType:MapSpec.Step.start| :pattern ( (MapSpec.Step.start arg0@@701)) )))
(assert (forall ((d@@151 T@U) ($h@@165 T@U) ) (!  (=> (and (and (= (type d@@151) DatatypeTypeType) (= (type $h@@165) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@165) (and (MapSpec.Step.SuccStep_q d@@151) ($IsAlloc d@@151 Tclass.MapSpec.Step $h@@165)))) ($IsAlloc (MapSpec.Step.start d@@151) Tclass.UI.RangeStart $h@@165)) :qid |unknown.0:0| :skolemid |4504| :pattern ( ($IsAlloc (MapSpec.Step.start d@@151) Tclass.UI.RangeStart $h@@165)) )))
(assert (forall ((arg0@@702 T@U) ) (! (= (type (MapSpec.Step.results arg0@@702)) (SeqType BoxType)) :qid |funType:MapSpec.Step.results| :pattern ( (MapSpec.Step.results arg0@@702)) )))
(assert (forall ((d@@152 T@U) ($h@@166 T@U) ) (!  (=> (and (and (= (type d@@152) DatatypeTypeType) (= (type $h@@166) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@166) (and (MapSpec.Step.SuccStep_q d@@152) ($IsAlloc d@@152 Tclass.MapSpec.Step $h@@166)))) ($IsAlloc (MapSpec.Step.results d@@152) (TSeq Tclass.UI.SuccResult) $h@@166)) :qid |unknown.0:0| :skolemid |4505| :pattern ( ($IsAlloc (MapSpec.Step.results d@@152) (TSeq Tclass.UI.SuccResult) $h@@166)) )))
(assert (forall ((arg0@@703 T@U) ) (! (= (type (MapSpec.Step.end arg0@@703)) DatatypeTypeType) :qid |funType:MapSpec.Step.end| :pattern ( (MapSpec.Step.end arg0@@703)) )))
(assert (forall ((d@@153 T@U) ($h@@167 T@U) ) (!  (=> (and (and (= (type d@@153) DatatypeTypeType) (= (type $h@@167) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@167) (and (MapSpec.Step.SuccStep_q d@@153) ($IsAlloc d@@153 Tclass.MapSpec.Step $h@@167)))) ($IsAlloc (MapSpec.Step.end d@@153) Tclass.UI.RangeEnd $h@@167)) :qid |unknown.0:0| :skolemid |4506| :pattern ( ($IsAlloc (MapSpec.Step.end d@@153) Tclass.UI.RangeEnd $h@@167)) )))
(assert (forall ((|a#157#0#0| T@U) (|a#157#1#0| T@U) (|a#157#2#0| T@U) ) (!  (=> (and (and (= (type |a#157#0#0|) DatatypeTypeType) (= (type |a#157#1#0|) (SeqType BoxType))) (= (type |a#157#2#0|) DatatypeTypeType)) (= (|#MapSpec.Step.SuccStep| (Lit |a#157#0#0|) (Lit |a#157#1#0|) (Lit |a#157#2#0|)) (Lit (|#MapSpec.Step.SuccStep| |a#157#0#0| |a#157#1#0| |a#157#2#0|)))) :qid |MapSpecsdfy.125:18| :skolemid |4507| :pattern ( (|#MapSpec.Step.SuccStep| (Lit |a#157#0#0|) (Lit |a#157#1#0|) (Lit |a#157#2#0|))) )))
(assert (forall ((|a#158#0#0| T@U) (|a#158#1#0| T@U) (|a#158#2#0| T@U) ) (!  (=> (and (and (= (type |a#158#0#0|) DatatypeTypeType) (= (type |a#158#1#0|) (SeqType BoxType))) (= (type |a#158#2#0|) DatatypeTypeType)) (= (MapSpec.Step.start (|#MapSpec.Step.SuccStep| |a#158#0#0| |a#158#1#0| |a#158#2#0|)) |a#158#0#0|)) :qid |MapSpecsdfy.125:18| :skolemid |4508| :pattern ( (|#MapSpec.Step.SuccStep| |a#158#0#0| |a#158#1#0| |a#158#2#0|)) )))
(assert (forall ((|a#159#0#0| T@U) (|a#159#1#0| T@U) (|a#159#2#0| T@U) ) (!  (=> (and (and (= (type |a#159#0#0|) DatatypeTypeType) (= (type |a#159#1#0|) (SeqType BoxType))) (= (type |a#159#2#0|) DatatypeTypeType)) (< (DtRank |a#159#0#0|) (DtRank (|#MapSpec.Step.SuccStep| |a#159#0#0| |a#159#1#0| |a#159#2#0|)))) :qid |MapSpecsdfy.125:18| :skolemid |4509| :pattern ( (|#MapSpec.Step.SuccStep| |a#159#0#0| |a#159#1#0| |a#159#2#0|)) )))
(assert (forall ((|a#160#0#0| T@U) (|a#160#1#0| T@U) (|a#160#2#0| T@U) ) (!  (=> (and (and (= (type |a#160#0#0|) DatatypeTypeType) (= (type |a#160#1#0|) (SeqType BoxType))) (= (type |a#160#2#0|) DatatypeTypeType)) (= (MapSpec.Step.results (|#MapSpec.Step.SuccStep| |a#160#0#0| |a#160#1#0| |a#160#2#0|)) |a#160#1#0|)) :qid |MapSpecsdfy.125:18| :skolemid |4510| :pattern ( (|#MapSpec.Step.SuccStep| |a#160#0#0| |a#160#1#0| |a#160#2#0|)) )))
(assert (forall ((|a#161#0#0| T@U) (|a#161#1#0| T@U) (|a#161#2#0| T@U) (i@@34 Int) ) (!  (=> (and (and (and (= (type |a#161#0#0|) DatatypeTypeType) (= (type |a#161#1#0|) (SeqType BoxType))) (= (type |a#161#2#0|) DatatypeTypeType)) (and (<= 0 i@@34) (< i@@34 (|Seq#Length| |a#161#1#0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#161#1#0| i@@34))) (DtRank (|#MapSpec.Step.SuccStep| |a#161#0#0| |a#161#1#0| |a#161#2#0|)))) :qid |MapSpecsdfy.125:18| :skolemid |4511| :pattern ( (|Seq#Index| |a#161#1#0| i@@34) (|#MapSpec.Step.SuccStep| |a#161#0#0| |a#161#1#0| |a#161#2#0|)) )))
(assert (forall ((|a#162#0#0| T@U) (|a#162#1#0| T@U) (|a#162#2#0| T@U) ) (!  (=> (and (and (= (type |a#162#0#0|) DatatypeTypeType) (= (type |a#162#1#0|) (SeqType BoxType))) (= (type |a#162#2#0|) DatatypeTypeType)) (< (|Seq#Rank| |a#162#1#0|) (DtRank (|#MapSpec.Step.SuccStep| |a#162#0#0| |a#162#1#0| |a#162#2#0|)))) :qid |MapSpecsdfy.125:18| :skolemid |4512| :pattern ( (|#MapSpec.Step.SuccStep| |a#162#0#0| |a#162#1#0| |a#162#2#0|)) )))
(assert (forall ((|a#163#0#0| T@U) (|a#163#1#0| T@U) (|a#163#2#0| T@U) ) (!  (=> (and (and (= (type |a#163#0#0|) DatatypeTypeType) (= (type |a#163#1#0|) (SeqType BoxType))) (= (type |a#163#2#0|) DatatypeTypeType)) (= (MapSpec.Step.end (|#MapSpec.Step.SuccStep| |a#163#0#0| |a#163#1#0| |a#163#2#0|)) |a#163#2#0|)) :qid |MapSpecsdfy.125:18| :skolemid |4513| :pattern ( (|#MapSpec.Step.SuccStep| |a#163#0#0| |a#163#1#0| |a#163#2#0|)) )))
(assert (forall ((|a#164#0#0| T@U) (|a#164#1#0| T@U) (|a#164#2#0| T@U) ) (!  (=> (and (and (= (type |a#164#0#0|) DatatypeTypeType) (= (type |a#164#1#0|) (SeqType BoxType))) (= (type |a#164#2#0|) DatatypeTypeType)) (< (DtRank |a#164#2#0|) (DtRank (|#MapSpec.Step.SuccStep| |a#164#0#0| |a#164#1#0| |a#164#2#0|)))) :qid |MapSpecsdfy.125:18| :skolemid |4514| :pattern ( (|#MapSpec.Step.SuccStep| |a#164#0#0| |a#164#1#0| |a#164#2#0|)) )))
(assert (= (type |#MapSpec.Step.StutterStep|) DatatypeTypeType))
(assert (= (DatatypeCtorId |#MapSpec.Step.StutterStep|) |##MapSpec.Step.StutterStep|))
(assert (forall ((d@@154 T@U) ) (!  (=> (= (type d@@154) DatatypeTypeType) (= (MapSpec.Step.StutterStep_q d@@154) (= (DatatypeCtorId d@@154) |##MapSpec.Step.StutterStep|))) :qid |unknown.0:0| :skolemid |4515| :pattern ( (MapSpec.Step.StutterStep_q d@@154)) )))
(assert (forall ((d@@155 T@U) ) (!  (=> (and (= (type d@@155) DatatypeTypeType) (MapSpec.Step.StutterStep_q d@@155)) (= d@@155 |#MapSpec.Step.StutterStep|)) :qid |unknown.0:0| :skolemid |4516| :pattern ( (MapSpec.Step.StutterStep_q d@@155)) )))
(assert ($Is |#MapSpec.Step.StutterStep| Tclass.MapSpec.Step))
(assert (forall (($h@@168 T@U) ) (!  (=> (and (= (type $h@@168) (MapType0Type refType MapType1Type)) ($IsGoodHeap $h@@168)) ($IsAlloc |#MapSpec.Step.StutterStep| Tclass.MapSpec.Step $h@@168)) :qid |DafnyPreludebpl.545:12| :skolemid |4517| :pattern ( ($IsAlloc |#MapSpec.Step.StutterStep| Tclass.MapSpec.Step $h@@168)) )))
(assert (= |#MapSpec.Step.StutterStep| (Lit |#MapSpec.Step.StutterStep|)))
(assert (forall ((d@@156 T@U) ) (!  (=> (and (= (type d@@156) DatatypeTypeType) (|$IsA#MapSpec.Step| d@@156)) (or (or (or (MapSpec.Step.QueryStep_q d@@156) (MapSpec.Step.WriteStep_q d@@156)) (MapSpec.Step.SuccStep_q d@@156)) (MapSpec.Step.StutterStep_q d@@156))) :qid |unknown.0:0| :skolemid |4518| :pattern ( (|$IsA#MapSpec.Step| d@@156)) )))
(assert (forall ((d@@157 T@U) ) (!  (=> (and (= (type d@@157) DatatypeTypeType) ($Is d@@157 Tclass.MapSpec.Step)) (or (or (or (MapSpec.Step.QueryStep_q d@@157) (MapSpec.Step.WriteStep_q d@@157)) (MapSpec.Step.SuccStep_q d@@157)) (MapSpec.Step.StutterStep_q d@@157))) :qid |unknown.0:0| :skolemid |4519| :pattern ( (MapSpec.Step.StutterStep_q d@@157) ($Is d@@157 Tclass.MapSpec.Step)) :pattern ( (MapSpec.Step.SuccStep_q d@@157) ($Is d@@157 Tclass.MapSpec.Step)) :pattern ( (MapSpec.Step.WriteStep_q d@@157) ($Is d@@157 Tclass.MapSpec.Step)) :pattern ( (MapSpec.Step.QueryStep_q d@@157) ($Is d@@157 Tclass.MapSpec.Step)) )))
(assert (forall ((a@@179 T@U) (b@@110 T@U) ) (!  (=> (and (and (= (type a@@179) DatatypeTypeType) (= (type b@@110) DatatypeTypeType)) (and (MapSpec.Step.QueryStep_q a@@179) (MapSpec.Step.QueryStep_q b@@110))) (= (|MapSpec.Step#Equal| a@@179 b@@110)  (and (|Seq#Equal| (MapSpec.Step.key a@@179) (MapSpec.Step.key b@@110)) (|Seq#Equal| (MapSpec.Step.result a@@179) (MapSpec.Step.result b@@110))))) :qid |unknown.0:0| :skolemid |4520| :pattern ( (|MapSpec.Step#Equal| a@@179 b@@110) (MapSpec.Step.QueryStep_q a@@179)) :pattern ( (|MapSpec.Step#Equal| a@@179 b@@110) (MapSpec.Step.QueryStep_q b@@110)) )))
(assert (forall ((a@@180 T@U) (b@@111 T@U) ) (!  (=> (and (and (= (type a@@180) DatatypeTypeType) (= (type b@@111) DatatypeTypeType)) (and (MapSpec.Step.WriteStep_q a@@180) (MapSpec.Step.WriteStep_q b@@111))) (= (|MapSpec.Step#Equal| a@@180 b@@111)  (and (|Seq#Equal| (MapSpec.Step.key a@@180) (MapSpec.Step.key b@@111)) (|Seq#Equal| (MapSpec.Step.new__value a@@180) (MapSpec.Step.new__value b@@111))))) :qid |unknown.0:0| :skolemid |4521| :pattern ( (|MapSpec.Step#Equal| a@@180 b@@111) (MapSpec.Step.WriteStep_q a@@180)) :pattern ( (|MapSpec.Step#Equal| a@@180 b@@111) (MapSpec.Step.WriteStep_q b@@111)) )))
(assert (forall ((a@@181 T@U) (b@@112 T@U) ) (!  (=> (and (and (= (type a@@181) DatatypeTypeType) (= (type b@@112) DatatypeTypeType)) (and (MapSpec.Step.SuccStep_q a@@181) (MapSpec.Step.SuccStep_q b@@112))) (= (|MapSpec.Step#Equal| a@@181 b@@112)  (and (and (|UI.RangeStart#Equal| (MapSpec.Step.start a@@181) (MapSpec.Step.start b@@112)) (|Seq#Equal| (MapSpec.Step.results a@@181) (MapSpec.Step.results b@@112))) (|UI.RangeEnd#Equal| (MapSpec.Step.end a@@181) (MapSpec.Step.end b@@112))))) :qid |unknown.0:0| :skolemid |4522| :pattern ( (|MapSpec.Step#Equal| a@@181 b@@112) (MapSpec.Step.SuccStep_q a@@181)) :pattern ( (|MapSpec.Step#Equal| a@@181 b@@112) (MapSpec.Step.SuccStep_q b@@112)) )))
(assert (forall ((a@@182 T@U) (b@@113 T@U) ) (!  (=> (and (and (= (type a@@182) DatatypeTypeType) (= (type b@@113) DatatypeTypeType)) (and (MapSpec.Step.StutterStep_q a@@182) (MapSpec.Step.StutterStep_q b@@113))) (= (|MapSpec.Step#Equal| a@@182 b@@113) true)) :qid |unknown.0:0| :skolemid |4523| :pattern ( (|MapSpec.Step#Equal| a@@182 b@@113) (MapSpec.Step.StutterStep_q a@@182)) :pattern ( (|MapSpec.Step#Equal| a@@182 b@@113) (MapSpec.Step.StutterStep_q b@@113)) )))
(assert (forall ((a@@183 T@U) (b@@114 T@U) ) (!  (=> (and (= (type a@@183) DatatypeTypeType) (= (type b@@114) DatatypeTypeType)) (= (|MapSpec.Step#Equal| a@@183 b@@114) (= a@@183 b@@114))) :qid |unknown.0:0| :skolemid |4524| :pattern ( (|MapSpec.Step#Equal| a@@183 b@@114)) )))
(assert (= (type Tclass.MapSpec.__default) TyType))
(assert (= (Tag Tclass.MapSpec.__default) Tagclass.MapSpec.__default))
(assert (= (TagFamily Tclass.MapSpec.__default) tytagFamily$_default))
(assert (forall ((bx@@190 T@U) ) (!  (=> (and (= (type bx@@190) BoxType) ($IsBox bx@@190 Tclass.MapSpec.__default)) (and (= ($Box ($Unbox refType bx@@190)) bx@@190) ($Is ($Unbox refType bx@@190) Tclass.MapSpec.__default))) :qid |unknown.0:0| :skolemid |4525| :pattern ( ($IsBox bx@@190 Tclass.MapSpec.__default)) )))
(assert (forall (($o@@58 T@U) ) (!  (=> (= (type $o@@58) refType) (= ($Is $o@@58 Tclass.MapSpec.__default)  (or (= $o@@58 null) (= (dtype $o@@58) Tclass.MapSpec.__default)))) :qid |unknown.0:0| :skolemid |4526| :pattern ( ($Is $o@@58 Tclass.MapSpec.__default)) )))
(assert (forall (($o@@59 T@U) ($h@@169 T@U) ) (!  (=> (and (= (type $o@@59) refType) (= (type $h@@169) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@59 Tclass.MapSpec.__default $h@@169)  (or (= $o@@59 null) (U_2_bool (MapType1Select (MapType0Select $h@@169 $o@@59) alloc))))) :qid |unknown.0:0| :skolemid |4527| :pattern ( ($IsAlloc $o@@59 Tclass.MapSpec.__default $h@@169)) )))
(assert (= (type MapSpec.__default.EmptyValue) (SeqType BoxType)))
(assert  (=> true (=> true ($Is MapSpec.__default.EmptyValue Tclass.ValueType.Value))))
(assert (= |MapSpec.__default.EmptyValue#requires| true))
(assert  (=> true (=> true (and |ValueType.__default.DefaultValue#canCall| (= MapSpec.__default.EmptyValue (Lit ValueType.__default.DefaultValue))))))
(assert  (=> true (=> true (and |ValueType.__default.DefaultValue#canCall| (= MapSpec.__default.EmptyValue (Lit ValueType.__default.DefaultValue))))))
(assert  (=> true (forall ((|view#0| T@U) ) (!  (=> (and (= (type |view#0|) (IMapType BoxType BoxType)) (or (|MapSpec.__default.ViewComplete#canCall| |view#0|) ($Is |view#0| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)))) true) :qid |MapSpecsdfy.27:26| :skolemid |4528| :pattern ( (MapSpec.__default.ViewComplete |view#0|)) ))))
(assert (forall ((|view#0@@0| T@U) ) (!  (=> (and (= (type |view#0@@0|) (IMapType BoxType BoxType)) ($Is |view#0@@0| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value))) (= (|MapSpec.__default.ViewComplete#requires| |view#0@@0|) true)) :qid |MapSpecsdfy.27:26| :skolemid |4529| :pattern ( (|MapSpec.__default.ViewComplete#requires| |view#0@@0|)) )))
(assert  (=> true (forall ((|view#0@@1| T@U) ) (!  (=> (and (= (type |view#0@@1|) (IMapType BoxType BoxType)) (or (|MapSpec.__default.ViewComplete#canCall| |view#0@@1|) ($Is |view#0@@1| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)))) (= (MapSpec.__default.ViewComplete |view#0@@1|) (forall ((|k#0@@59| T@U) ) (!  (=> (and (= (type |k#0@@59|) (SeqType BoxType)) ($Is |k#0@@59| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|IMap#Domain| |view#0@@1|) ($Box |k#0@@59|)))) :qid |MapSpecsdfy.29:12| :skolemid |4530| :pattern ( (MapType0Select (|IMap#Domain| |view#0@@1|) ($Box |k#0@@59|))) )))) :qid |MapSpecsdfy.27:26| :skolemid |4531| :pattern ( (MapSpec.__default.ViewComplete |view#0@@1|)) ))))
(assert  (=> true (forall ((|view#0@@2| T@U) ) (!  (=> (and (= (type |view#0@@2|) (IMapType BoxType BoxType)) (or (|MapSpec.__default.ViewComplete#canCall| (Lit |view#0@@2|)) ($Is |view#0@@2| (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)))) (= (MapSpec.__default.ViewComplete (Lit |view#0@@2|)) (forall ((|k#1@@14| T@U) ) (!  (=> (and (= (type |k#1@@14|) (SeqType BoxType)) ($Is |k#1@@14| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|IMap#Domain| |view#0@@2|) ($Box |k#1@@14|)))) :qid |MapSpecsdfy.29:12| :skolemid |4532| :pattern ( (MapType0Select (|IMap#Domain| |view#0@@2|) ($Box |k#1@@14|))) )))) :qid |MapSpecsdfy.27:26| :weight 3 :skolemid |4533| :pattern ( (MapSpec.__default.ViewComplete (Lit |view#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@275| T@U) ) (!  (=> (and (= (type |s#0@@275|) DatatypeTypeType) (or (|MapSpec.__default.WF#canCall| |s#0@@275|) ($Is |s#0@@275| Tclass.MapSpec.Variables))) true) :qid |MapSpecsdfy.32:16| :skolemid |4534| :pattern ( (MapSpec.__default.WF |s#0@@275|)) ))))
(assert (forall ((|s#0@@276| T@U) ) (!  (=> (and (= (type |s#0@@276|) DatatypeTypeType) ($Is |s#0@@276| Tclass.MapSpec.Variables)) (= (|MapSpec.__default.WF#requires| |s#0@@276|) true)) :qid |MapSpecsdfy.32:16| :skolemid |4535| :pattern ( (|MapSpec.__default.WF#requires| |s#0@@276|)) )))
(assert  (=> true (forall ((|s#0@@277| T@U) ) (!  (=> (and (= (type |s#0@@277|) DatatypeTypeType) (or (|MapSpec.__default.WF#canCall| |s#0@@277|) ($Is |s#0@@277| Tclass.MapSpec.Variables))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (MapSpec.Variables.Variables_q |s#0@@277|) (|MapSpec.__default.ViewComplete#canCall| (MapSpec.Variables.view |s#0@@277|)))) (= (MapSpec.__default.WF |s#0@@277|)  (and true (MapSpec.__default.ViewComplete (MapSpec.Variables.view |s#0@@277|)))))) :qid |MapSpecsdfy.32:16| :skolemid |4536| :pattern ( (MapSpec.__default.WF |s#0@@277|)) ))))
(assert  (=> true (forall ((|s#0@@278| T@U) ) (!  (=> (and (= (type |s#0@@278|) DatatypeTypeType) (or (|MapSpec.__default.WF#canCall| (Lit |s#0@@278|)) ($Is |s#0@@278| Tclass.MapSpec.Variables))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (MapSpec.Variables.Variables_q (Lit |s#0@@278|)) (|MapSpec.__default.ViewComplete#canCall| (Lit (MapSpec.Variables.view (Lit |s#0@@278|)))))) (= (MapSpec.__default.WF (Lit |s#0@@278|)) (U_2_bool (Lit (bool_2_U  (and true (MapSpec.__default.ViewComplete (Lit (MapSpec.Variables.view (Lit |s#0@@278|))))))))))) :qid |MapSpecsdfy.32:16| :weight 3 :skolemid |4537| :pattern ( (MapSpec.__default.WF (Lit |s#0@@278|))) ))))
(assert  (=> true (forall ((|k#0@@60| T@U) ) (!  (=> (and (= (type |k#0@@60|) (SeqType BoxType)) (or (|MapSpec.__default.InDomain#canCall| |k#0@@60|) ($Is |k#0@@60| Tclass.KeyType.Key))) true) :qid |MapSpecsdfy.39:22| :skolemid |4538| :pattern ( (MapSpec.__default.InDomain |k#0@@60|)) ))))
(assert (forall ((|k#0@@61| T@U) ) (!  (=> (and (= (type |k#0@@61|) (SeqType BoxType)) ($Is |k#0@@61| Tclass.KeyType.Key)) (= (|MapSpec.__default.InDomain#requires| |k#0@@61|) true)) :qid |MapSpecsdfy.39:22| :skolemid |4539| :pattern ( (|MapSpec.__default.InDomain#requires| |k#0@@61|)) )))
(assert  (=> true (forall ((|k#0@@62| T@U) ) (!  (=> (and (= (type |k#0@@62|) (SeqType BoxType)) (or (|MapSpec.__default.InDomain#canCall| |k#0@@62|) ($Is |k#0@@62| Tclass.KeyType.Key))) (= (MapSpec.__default.InDomain |k#0@@62|) (U_2_bool (Lit (bool_2_U true))))) :qid |MapSpecsdfy.39:22| :skolemid |4540| :pattern ( (MapSpec.__default.InDomain |k#0@@62|)) ))))
(assert  (=> true (forall ((|k#0@@63| T@U) ) (!  (=> (and (= (type |k#0@@63|) (SeqType BoxType)) (or (|MapSpec.__default.InDomain#canCall| (Lit |k#0@@63|)) ($Is |k#0@@63| Tclass.KeyType.Key))) (= (MapSpec.__default.InDomain (Lit |k#0@@63|)) (U_2_bool (Lit (bool_2_U true))))) :qid |MapSpecsdfy.39:22| :weight 3 :skolemid |4541| :pattern ( (MapSpec.__default.InDomain (Lit |k#0@@63|))) ))))
(assert (= (type MapSpec.__default.EmptyMap) (IMapType BoxType BoxType)))
(assert  (=> true (=> true (and (MapSpec.__default.ViewComplete MapSpec.__default.EmptyMap) ($Is MapSpec.__default.EmptyMap (TIMap Tclass.KeyType.Key Tclass.ValueType.Value))))))
(assert (= |MapSpec.__default.EmptyMap#requires| true))
(assert  (and (forall ((arg0@@704 T@U) ) (! (= (type (|lambda#240| arg0@@704)) (MapType0Type BoxType boolType)) :qid |funType:lambda#240| :pattern ( (|lambda#240| arg0@@704)) )) (forall ((arg0@@705 T@U) ) (! (= (type (|lambda#241| arg0@@705)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#241| :pattern ( (|lambda#241| arg0@@705)) ))))
(assert  (=> true (=> true (and (forall ((|k#0@@64| T@U) ) (!  (=> (and (= (type |k#0@@64|) (SeqType BoxType)) ($Is |k#0@@64| Tclass.KeyType.Key)) (and (|MapSpec.__default.InDomain#canCall| |k#0@@64|) (=> (MapSpec.__default.InDomain |k#0@@64|) |MapSpec.__default.EmptyValue#canCall|))) :qid |MapSpecsdfy.47:10| :skolemid |4542| :pattern ( (MapSpec.__default.InDomain |k#0@@64|)) )) (= MapSpec.__default.EmptyMap (|IMap#Glue| (|lambda#240| Tclass.KeyType.Key) (|lambda#241| ($Box (Lit MapSpec.__default.EmptyValue))) (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)))))))
(assert  (=> true (=> true (and (forall ((|k#0@@65| T@U) ) (!  (=> (and (= (type |k#0@@65|) (SeqType BoxType)) ($Is |k#0@@65| Tclass.KeyType.Key)) (and (|MapSpec.__default.InDomain#canCall| |k#0@@65|) (=> (MapSpec.__default.InDomain |k#0@@65|) |MapSpec.__default.EmptyValue#canCall|))) :qid |MapSpecsdfy.47:10| :skolemid |4543| :pattern ( (MapSpec.__default.InDomain |k#0@@65|)) )) (= MapSpec.__default.EmptyMap (|IMap#Glue| (|lambda#240| Tclass.KeyType.Key) (|lambda#241| ($Box (Lit MapSpec.__default.EmptyValue))) (TIMap Tclass.KeyType.Key Tclass.ValueType.Value)))))))
(assert  (=> true (forall ((|s#0@@279| T@U) ) (!  (=> (and (and (= (type |s#0@@279|) DatatypeTypeType) (or (|MapSpec.__default.Init#canCall| |s#0@@279|) ($Is |s#0@@279| Tclass.MapSpec.Variables))) (MapSpec.__default.Init |s#0@@279|)) (MapSpec.__default.WF |s#0@@279|)) :qid |UIStateMachinesdfyMapSpec.15:18| :skolemid |4544| :pattern ( (MapSpec.__default.Init |s#0@@279|)) ))))
(assert (forall ((|s#0@@280| T@U) ) (!  (=> (and (= (type |s#0@@280|) DatatypeTypeType) ($Is |s#0@@280| Tclass.MapSpec.Variables)) (= (|MapSpec.__default.Init#requires| |s#0@@280|) true)) :qid |UIStateMachinesdfyMapSpec.15:18| :skolemid |4545| :pattern ( (|MapSpec.__default.Init#requires| |s#0@@280|)) )))
(assert  (=> true (forall ((|s#0@@281| T@U) ) (!  (=> (and (= (type |s#0@@281|) DatatypeTypeType) (or (|MapSpec.__default.Init#canCall| |s#0@@281|) ($Is |s#0@@281| Tclass.MapSpec.Variables))) (and (and (|$IsA#MapSpec.Variables| |s#0@@281|) |MapSpec.__default.EmptyMap#canCall|) (= (MapSpec.__default.Init |s#0@@281|) (|MapSpec.Variables#Equal| |s#0@@281| (|#MapSpec.Variables.Variables| (Lit MapSpec.__default.EmptyMap)))))) :qid |UIStateMachinesdfyMapSpec.15:18| :skolemid |4546| :pattern ( (MapSpec.__default.Init |s#0@@281|)) ))))
(assert  (=> true (forall ((|s#0@@282| T@U) ) (!  (=> (and (= (type |s#0@@282|) DatatypeTypeType) (or (|MapSpec.__default.Init#canCall| (Lit |s#0@@282|)) ($Is |s#0@@282| Tclass.MapSpec.Variables))) (and (and (|$IsA#MapSpec.Variables| (Lit |s#0@@282|)) |MapSpec.__default.EmptyMap#canCall|) (= (MapSpec.__default.Init (Lit |s#0@@282|)) (|MapSpec.Variables#Equal| |s#0@@282| (|#MapSpec.Variables.Variables| (Lit MapSpec.__default.EmptyMap)))))) :qid |UIStateMachinesdfyMapSpec.15:18| :weight 3 :skolemid |4547| :pattern ( (MapSpec.__default.Init (Lit |s#0@@282|))) ))))
(assert  (=> true (forall ((|s#0@@283| T@U) (|s'#0@@5| T@U) (|uiop#0| T@U) (|key#0@@167| T@U) (|result#0| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@283|) DatatypeTypeType) (= (type |s'#0@@5|) DatatypeTypeType)) (= (type |uiop#0|) DatatypeTypeType)) (= (type |key#0@@167|) (SeqType BoxType))) (= (type |result#0|) (SeqType BoxType))) (or (|MapSpec.__default.Query#canCall| |s#0@@283| |s'#0@@5| |uiop#0| |key#0@@167| |result#0|) (and (and (and (and ($Is |s#0@@283| Tclass.MapSpec.Variables) ($Is |s'#0@@5| Tclass.MapSpec.Variables)) ($Is |uiop#0| Tclass.UI.Op)) ($Is |key#0@@167| Tclass.KeyType.Key)) ($Is |result#0| Tclass.ValueType.Value)))) true) :qid |MapSpecsdfy.57:19| :skolemid |4548| :pattern ( (MapSpec.__default.Query |s#0@@283| |s'#0@@5| |uiop#0| |key#0@@167| |result#0|)) ))))
(assert (forall ((|s#0@@284| T@U) (|s'#0@@6| T@U) (|uiop#0@@0| T@U) (|key#0@@168| T@U) (|result#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@284|) DatatypeTypeType) (= (type |s'#0@@6|) DatatypeTypeType)) (= (type |uiop#0@@0|) DatatypeTypeType)) (= (type |key#0@@168|) (SeqType BoxType))) (= (type |result#0@@0|) (SeqType BoxType))) (and (and (and (and ($Is |s#0@@284| Tclass.MapSpec.Variables) ($Is |s'#0@@6| Tclass.MapSpec.Variables)) ($Is |uiop#0@@0| Tclass.UI.Op)) ($Is |key#0@@168| Tclass.KeyType.Key)) ($Is |result#0@@0| Tclass.ValueType.Value))) (= (|MapSpec.__default.Query#requires| |s#0@@284| |s'#0@@6| |uiop#0@@0| |key#0@@168| |result#0@@0|) true)) :qid |MapSpecsdfy.57:19| :skolemid |4549| :pattern ( (|MapSpec.__default.Query#requires| |s#0@@284| |s'#0@@6| |uiop#0@@0| |key#0@@168| |result#0@@0|)) )))
(assert  (=> true (forall ((|s#0@@285| T@U) (|s'#0@@7| T@U) (|uiop#0@@1| T@U) (|key#0@@169| T@U) (|result#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@285|) DatatypeTypeType) (= (type |s'#0@@7|) DatatypeTypeType)) (= (type |uiop#0@@1|) DatatypeTypeType)) (= (type |key#0@@169|) (SeqType BoxType))) (= (type |result#0@@1|) (SeqType BoxType))) (or (|MapSpec.__default.Query#canCall| |s#0@@285| |s'#0@@7| |uiop#0@@1| |key#0@@169| |result#0@@1|) (and (and (and (and ($Is |s#0@@285| Tclass.MapSpec.Variables) ($Is |s'#0@@7| Tclass.MapSpec.Variables)) ($Is |uiop#0@@1| Tclass.UI.Op)) ($Is |key#0@@169| Tclass.KeyType.Key)) ($Is |result#0@@1| Tclass.ValueType.Value)))) (and (and (|$IsA#UI.Op| |uiop#0@@1|) (=> (|UI.Op#Equal| |uiop#0@@1| (|#UI.Op.GetOp| |key#0@@169| |result#0@@1|)) (and (|MapSpec.__default.WF#canCall| |s#0@@285|) (=> (MapSpec.__default.WF |s#0@@285|) (and (MapSpec.Variables.Variables_q |s#0@@285|) (=> (= |result#0@@1| ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@285|)) ($Box |key#0@@169|)))) (and (|$IsA#MapSpec.Variables| |s'#0@@7|) (|$IsA#MapSpec.Variables| |s#0@@285|)))))))) (= (MapSpec.__default.Query |s#0@@285| |s'#0@@7| |uiop#0@@1| |key#0@@169| |result#0@@1|)  (and (and (and (|UI.Op#Equal| |uiop#0@@1| (|#UI.Op.GetOp| |key#0@@169| |result#0@@1|)) (MapSpec.__default.WF |s#0@@285|)) (= |result#0@@1| ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@285|)) ($Box |key#0@@169|))))) (|MapSpec.Variables#Equal| |s'#0@@7| |s#0@@285|))))) :qid |MapSpecsdfy.57:19| :skolemid |4550| :pattern ( (MapSpec.__default.Query |s#0@@285| |s'#0@@7| |uiop#0@@1| |key#0@@169| |result#0@@1|)) ))))
(assert  (=> true (forall ((|s#0@@286| T@U) (|s'#0@@8| T@U) (|uiop#0@@2| T@U) (|key#0@@170| T@U) (|result#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@286|) DatatypeTypeType) (= (type |s'#0@@8|) DatatypeTypeType)) (= (type |uiop#0@@2|) DatatypeTypeType)) (= (type |key#0@@170|) (SeqType BoxType))) (= (type |result#0@@2|) (SeqType BoxType))) (or (|MapSpec.__default.Query#canCall| (Lit |s#0@@286|) (Lit |s'#0@@8|) (Lit |uiop#0@@2|) (Lit |key#0@@170|) |result#0@@2|) (and (and (and (and ($Is |s#0@@286| Tclass.MapSpec.Variables) ($Is |s'#0@@8| Tclass.MapSpec.Variables)) ($Is |uiop#0@@2| Tclass.UI.Op)) ($Is |key#0@@170| Tclass.KeyType.Key)) ($Is |result#0@@2| Tclass.ValueType.Value)))) (and (and (|$IsA#UI.Op| (Lit |uiop#0@@2|)) (=> (|UI.Op#Equal| |uiop#0@@2| (|#UI.Op.GetOp| (Lit |key#0@@170|) |result#0@@2|)) (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@286|)) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@286|))))) (and (MapSpec.Variables.Variables_q (Lit |s#0@@286|)) (=> (= |result#0@@2| ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@286|)))) ($Box (Lit |key#0@@170|))))) (and (|$IsA#MapSpec.Variables| (Lit |s'#0@@8|)) (|$IsA#MapSpec.Variables| (Lit |s#0@@286|))))))))) (= (MapSpec.__default.Query (Lit |s#0@@286|) (Lit |s'#0@@8|) (Lit |uiop#0@@2|) (Lit |key#0@@170|) |result#0@@2|)  (and (and (and (|UI.Op#Equal| |uiop#0@@2| (|#UI.Op.GetOp| (Lit |key#0@@170|) |result#0@@2|)) (MapSpec.__default.WF (Lit |s#0@@286|))) (= |result#0@@2| ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@286|)))) ($Box (Lit |key#0@@170|)))))) (|MapSpec.Variables#Equal| |s'#0@@8| |s#0@@286|))))) :qid |MapSpecsdfy.57:19| :weight 3 :skolemid |4551| :pattern ( (MapSpec.__default.Query (Lit |s#0@@286|) (Lit |s'#0@@8|) (Lit |uiop#0@@2|) (Lit |key#0@@170|) |result#0@@2|)) ))))
(assert  (=> true (forall ((|s#0@@287| T@U) (|s'#0@@9| T@U) (|uiop#0@@3| T@U) (|key#0@@171| T@U) (|result#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@287|) DatatypeTypeType) (= (type |s'#0@@9|) DatatypeTypeType)) (= (type |uiop#0@@3|) DatatypeTypeType)) (= (type |key#0@@171|) (SeqType BoxType))) (= (type |result#0@@3|) (SeqType BoxType))) (or (|MapSpec.__default.Query#canCall| (Lit |s#0@@287|) (Lit |s'#0@@9|) (Lit |uiop#0@@3|) (Lit |key#0@@171|) (Lit |result#0@@3|)) (and (and (and (and ($Is |s#0@@287| Tclass.MapSpec.Variables) ($Is |s'#0@@9| Tclass.MapSpec.Variables)) ($Is |uiop#0@@3| Tclass.UI.Op)) ($Is |key#0@@171| Tclass.KeyType.Key)) ($Is |result#0@@3| Tclass.ValueType.Value)))) (and (and (|$IsA#UI.Op| (Lit |uiop#0@@3|)) (=> (|UI.Op#Equal| |uiop#0@@3| (|#UI.Op.GetOp| (Lit |key#0@@171|) (Lit |result#0@@3|))) (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@287|)) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@287|))))) (and (MapSpec.Variables.Variables_q (Lit |s#0@@287|)) (=> (= (Lit |result#0@@3|) ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@287|)))) ($Box (Lit |key#0@@171|))))) (and (|$IsA#MapSpec.Variables| (Lit |s'#0@@9|)) (|$IsA#MapSpec.Variables| (Lit |s#0@@287|))))))))) (= (MapSpec.__default.Query (Lit |s#0@@287|) (Lit |s'#0@@9|) (Lit |uiop#0@@3|) (Lit |key#0@@171|) (Lit |result#0@@3|))  (and (and (and (|UI.Op#Equal| |uiop#0@@3| (|#UI.Op.GetOp| (Lit |key#0@@171|) (Lit |result#0@@3|))) (MapSpec.__default.WF (Lit |s#0@@287|))) (= (Lit |result#0@@3|) ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@287|)))) ($Box (Lit |key#0@@171|)))))) (|MapSpec.Variables#Equal| |s'#0@@9| |s#0@@287|))))) :qid |MapSpecsdfy.57:19| :weight 3 :skolemid |4552| :pattern ( (MapSpec.__default.Query (Lit |s#0@@287|) (Lit |s'#0@@9|) (Lit |uiop#0@@3|) (Lit |key#0@@171|) (Lit |result#0@@3|))) ))))
(assert  (=> true (forall ((|start#0@@3| T@U) (|key#0@@172| T@U) ) (!  (=> (and (and (= (type |start#0@@3|) DatatypeTypeType) (= (type |key#0@@172|) (SeqType BoxType))) (or (|MapSpec.__default.LowerBound#canCall| |start#0@@3| |key#0@@172|) (and ($Is |start#0@@3| Tclass.UI.RangeStart) ($Is |key#0@@172| Tclass.KeyType.Key)))) true) :qid |MapSpecsdfy.65:24| :skolemid |4553| :pattern ( (MapSpec.__default.LowerBound |start#0@@3| |key#0@@172|)) ))))
(assert (forall ((|start#0@@4| T@U) (|key#0@@173| T@U) ) (!  (=> (and (and (= (type |start#0@@4|) DatatypeTypeType) (= (type |key#0@@173|) (SeqType BoxType))) (and ($Is |start#0@@4| Tclass.UI.RangeStart) ($Is |key#0@@173| Tclass.KeyType.Key))) (= (|MapSpec.__default.LowerBound#requires| |start#0@@4| |key#0@@173|) true)) :qid |MapSpecsdfy.65:24| :skolemid |4554| :pattern ( (|MapSpec.__default.LowerBound#requires| |start#0@@4| |key#0@@173|)) )))
(assert  (=> true (forall ((|start#0@@5| T@U) (|key#0@@174| T@U) ) (!  (=> (and (and (= (type |start#0@@5|) DatatypeTypeType) (= (type |key#0@@174|) (SeqType BoxType))) (or (|MapSpec.__default.LowerBound#canCall| |start#0@@5| |key#0@@174|) (and ($Is |start#0@@5| Tclass.UI.RangeStart) ($Is |key#0@@174| Tclass.KeyType.Key)))) (and (and (=> (UI.RangeStart.SInclusive_q |start#0@@5|) (|SeqComparison.__default.lte#canCall| (UI.RangeStart.key |start#0@@5|) |key#0@@174|)) (=> (=> (UI.RangeStart.SInclusive_q |start#0@@5|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (UI.RangeStart.key |start#0@@5|) |key#0@@174|)) (=> (UI.RangeStart.SExclusive_q |start#0@@5|) (|SeqComparison.__default.lt#canCall| (UI.RangeStart.key |start#0@@5|) |key#0@@174|)))) (= (MapSpec.__default.LowerBound |start#0@@5| |key#0@@174|)  (and (=> (UI.RangeStart.SInclusive_q |start#0@@5|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (UI.RangeStart.key |start#0@@5|) |key#0@@174|)) (=> (UI.RangeStart.SExclusive_q |start#0@@5|) (SeqComparison.__default.lt (UI.RangeStart.key |start#0@@5|) |key#0@@174|)))))) :qid |MapSpecsdfy.65:24| :skolemid |4555| :pattern ( (MapSpec.__default.LowerBound |start#0@@5| |key#0@@174|)) ))))
(assert  (=> true (forall ((|start#0@@6| T@U) (|key#0@@175| T@U) ) (!  (=> (and (and (= (type |start#0@@6|) DatatypeTypeType) (= (type |key#0@@175|) (SeqType BoxType))) (or (|MapSpec.__default.LowerBound#canCall| (Lit |start#0@@6|) (Lit |key#0@@175|)) (and ($Is |start#0@@6| Tclass.UI.RangeStart) ($Is |key#0@@175| Tclass.KeyType.Key)))) (and (and (=> (U_2_bool (Lit (bool_2_U (UI.RangeStart.SInclusive_q (Lit |start#0@@6|))))) (|SeqComparison.__default.lte#canCall| (Lit (UI.RangeStart.key (Lit |start#0@@6|))) (Lit |key#0@@175|))) (=> (=> (UI.RangeStart.SInclusive_q (Lit |start#0@@6|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit (UI.RangeStart.key (Lit |start#0@@6|))) (Lit |key#0@@175|))) (=> (U_2_bool (Lit (bool_2_U (UI.RangeStart.SExclusive_q (Lit |start#0@@6|))))) (|SeqComparison.__default.lt#canCall| (Lit (UI.RangeStart.key (Lit |start#0@@6|))) (Lit |key#0@@175|))))) (= (MapSpec.__default.LowerBound (Lit |start#0@@6|) (Lit |key#0@@175|))  (and (=> (UI.RangeStart.SInclusive_q (Lit |start#0@@6|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit (UI.RangeStart.key (Lit |start#0@@6|))) (Lit |key#0@@175|))) (=> (UI.RangeStart.SExclusive_q (Lit |start#0@@6|)) (SeqComparison.__default.lt (Lit (UI.RangeStart.key (Lit |start#0@@6|))) (Lit |key#0@@175|))))))) :qid |MapSpecsdfy.65:24| :weight 3 :skolemid |4556| :pattern ( (MapSpec.__default.LowerBound (Lit |start#0@@6|) (Lit |key#0@@175|))) ))))
(assert  (=> true (forall ((|key#0@@176| T@U) (|end#0| T@U) ) (!  (=> (and (and (= (type |key#0@@176|) (SeqType BoxType)) (= (type |end#0|) DatatypeTypeType)) (or (|MapSpec.__default.UpperBound#canCall| |key#0@@176| |end#0|) (and ($Is |key#0@@176| Tclass.KeyType.Key) ($Is |end#0| Tclass.UI.RangeEnd)))) true) :qid |MapSpecsdfy.71:24| :skolemid |4557| :pattern ( (MapSpec.__default.UpperBound |key#0@@176| |end#0|)) ))))
(assert (forall ((|key#0@@177| T@U) (|end#0@@0| T@U) ) (!  (=> (and (and (= (type |key#0@@177|) (SeqType BoxType)) (= (type |end#0@@0|) DatatypeTypeType)) (and ($Is |key#0@@177| Tclass.KeyType.Key) ($Is |end#0@@0| Tclass.UI.RangeEnd))) (= (|MapSpec.__default.UpperBound#requires| |key#0@@177| |end#0@@0|) true)) :qid |MapSpecsdfy.71:24| :skolemid |4558| :pattern ( (|MapSpec.__default.UpperBound#requires| |key#0@@177| |end#0@@0|)) )))
(assert  (=> true (forall ((|key#0@@178| T@U) (|end#0@@1| T@U) ) (!  (=> (and (and (= (type |key#0@@178|) (SeqType BoxType)) (= (type |end#0@@1|) DatatypeTypeType)) (or (|MapSpec.__default.UpperBound#canCall| |key#0@@178| |end#0@@1|) (and ($Is |key#0@@178| Tclass.KeyType.Key) ($Is |end#0@@1| Tclass.UI.RangeEnd)))) (and (and (=> (UI.RangeEnd.EInclusive_q |end#0@@1|) (|SeqComparison.__default.lte#canCall| |key#0@@178| (UI.RangeEnd.key |end#0@@1|))) (=> (=> (UI.RangeEnd.EInclusive_q |end#0@@1|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |key#0@@178| (UI.RangeEnd.key |end#0@@1|))) (=> (UI.RangeEnd.EExclusive_q |end#0@@1|) (|SeqComparison.__default.lt#canCall| |key#0@@178| (UI.RangeEnd.key |end#0@@1|))))) (= (MapSpec.__default.UpperBound |key#0@@178| |end#0@@1|)  (and (=> (UI.RangeEnd.EInclusive_q |end#0@@1|) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte |key#0@@178| (UI.RangeEnd.key |end#0@@1|))) (=> (UI.RangeEnd.EExclusive_q |end#0@@1|) (SeqComparison.__default.lt |key#0@@178| (UI.RangeEnd.key |end#0@@1|))))))) :qid |MapSpecsdfy.71:24| :skolemid |4559| :pattern ( (MapSpec.__default.UpperBound |key#0@@178| |end#0@@1|)) ))))
(assert  (=> true (forall ((|key#0@@179| T@U) (|end#0@@2| T@U) ) (!  (=> (and (and (= (type |key#0@@179|) (SeqType BoxType)) (= (type |end#0@@2|) DatatypeTypeType)) (or (|MapSpec.__default.UpperBound#canCall| (Lit |key#0@@179|) (Lit |end#0@@2|)) (and ($Is |key#0@@179| Tclass.KeyType.Key) ($Is |end#0@@2| Tclass.UI.RangeEnd)))) (and (and (=> (U_2_bool (Lit (bool_2_U (UI.RangeEnd.EInclusive_q (Lit |end#0@@2|))))) (|SeqComparison.__default.lte#canCall| (Lit |key#0@@179|) (Lit (UI.RangeEnd.key (Lit |end#0@@2|))))) (=> (=> (UI.RangeEnd.EInclusive_q (Lit |end#0@@2|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |key#0@@179|) (Lit (UI.RangeEnd.key (Lit |end#0@@2|))))) (=> (U_2_bool (Lit (bool_2_U (UI.RangeEnd.EExclusive_q (Lit |end#0@@2|))))) (|SeqComparison.__default.lt#canCall| (Lit |key#0@@179|) (Lit (UI.RangeEnd.key (Lit |end#0@@2|))))))) (= (MapSpec.__default.UpperBound (Lit |key#0@@179|) (Lit |end#0@@2|))  (and (=> (UI.RangeEnd.EInclusive_q (Lit |end#0@@2|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit |key#0@@179|) (Lit (UI.RangeEnd.key (Lit |end#0@@2|))))) (=> (UI.RangeEnd.EExclusive_q (Lit |end#0@@2|)) (SeqComparison.__default.lt (Lit |key#0@@179|) (Lit (UI.RangeEnd.key (Lit |end#0@@2|))))))))) :qid |MapSpecsdfy.71:24| :weight 3 :skolemid |4560| :pattern ( (MapSpec.__default.UpperBound (Lit |key#0@@179|) (Lit |end#0@@2|))) ))))
(assert  (=> true (forall ((|start#0@@7| T@U) (|key#0@@180| T@U) (|end#0@@3| T@U) ) (!  (=> (and (and (and (= (type |start#0@@7|) DatatypeTypeType) (= (type |key#0@@180|) (SeqType BoxType))) (= (type |end#0@@3|) DatatypeTypeType)) (or (|MapSpec.__default.InRange#canCall| |start#0@@7| |key#0@@180| |end#0@@3|) (and (and ($Is |start#0@@7| Tclass.UI.RangeStart) ($Is |key#0@@180| Tclass.KeyType.Key)) ($Is |end#0@@3| Tclass.UI.RangeEnd)))) true) :qid |MapSpecsdfy.77:21| :skolemid |4561| :pattern ( (MapSpec.__default.InRange |start#0@@7| |key#0@@180| |end#0@@3|)) ))))
(assert (forall ((|start#0@@8| T@U) (|key#0@@181| T@U) (|end#0@@4| T@U) ) (!  (=> (and (and (and (= (type |start#0@@8|) DatatypeTypeType) (= (type |key#0@@181|) (SeqType BoxType))) (= (type |end#0@@4|) DatatypeTypeType)) (and (and ($Is |start#0@@8| Tclass.UI.RangeStart) ($Is |key#0@@181| Tclass.KeyType.Key)) ($Is |end#0@@4| Tclass.UI.RangeEnd))) (= (|MapSpec.__default.InRange#requires| |start#0@@8| |key#0@@181| |end#0@@4|) true)) :qid |MapSpecsdfy.77:21| :skolemid |4562| :pattern ( (|MapSpec.__default.InRange#requires| |start#0@@8| |key#0@@181| |end#0@@4|)) )))
(assert  (=> true (forall ((|start#0@@9| T@U) (|key#0@@182| T@U) (|end#0@@5| T@U) ) (!  (=> (and (and (and (= (type |start#0@@9|) DatatypeTypeType) (= (type |key#0@@182|) (SeqType BoxType))) (= (type |end#0@@5|) DatatypeTypeType)) (or (|MapSpec.__default.InRange#canCall| |start#0@@9| |key#0@@182| |end#0@@5|) (and (and ($Is |start#0@@9| Tclass.UI.RangeStart) ($Is |key#0@@182| Tclass.KeyType.Key)) ($Is |end#0@@5| Tclass.UI.RangeEnd)))) (and (and (|MapSpec.__default.LowerBound#canCall| |start#0@@9| |key#0@@182|) (=> (MapSpec.__default.LowerBound |start#0@@9| |key#0@@182|) (|MapSpec.__default.UpperBound#canCall| |key#0@@182| |end#0@@5|))) (= (MapSpec.__default.InRange |start#0@@9| |key#0@@182| |end#0@@5|)  (and (MapSpec.__default.LowerBound |start#0@@9| |key#0@@182|) (MapSpec.__default.UpperBound |key#0@@182| |end#0@@5|))))) :qid |MapSpecsdfy.77:21| :skolemid |4563| :pattern ( (MapSpec.__default.InRange |start#0@@9| |key#0@@182| |end#0@@5|)) ))))
(assert  (=> true (forall ((|start#0@@10| T@U) (|key#0@@183| T@U) (|end#0@@6| T@U) ) (!  (=> (and (and (and (= (type |start#0@@10|) DatatypeTypeType) (= (type |key#0@@183|) (SeqType BoxType))) (= (type |end#0@@6|) DatatypeTypeType)) (or (|MapSpec.__default.InRange#canCall| (Lit |start#0@@10|) (Lit |key#0@@183|) (Lit |end#0@@6|)) (and (and ($Is |start#0@@10| Tclass.UI.RangeStart) ($Is |key#0@@183| Tclass.KeyType.Key)) ($Is |end#0@@6| Tclass.UI.RangeEnd)))) (and (and (|MapSpec.__default.LowerBound#canCall| (Lit |start#0@@10|) (Lit |key#0@@183|)) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.LowerBound (Lit |start#0@@10|) (Lit |key#0@@183|))))) (|MapSpec.__default.UpperBound#canCall| (Lit |key#0@@183|) (Lit |end#0@@6|)))) (= (MapSpec.__default.InRange (Lit |start#0@@10|) (Lit |key#0@@183|) (Lit |end#0@@6|)) (U_2_bool (Lit (bool_2_U  (and (MapSpec.__default.LowerBound (Lit |start#0@@10|) (Lit |key#0@@183|)) (MapSpec.__default.UpperBound (Lit |key#0@@183|) (Lit |end#0@@6|))))))))) :qid |MapSpecsdfy.77:21| :weight 3 :skolemid |4564| :pattern ( (MapSpec.__default.InRange (Lit |start#0@@10|) (Lit |key#0@@183|) (Lit |end#0@@6|))) ))))
(assert  (=> true (forall ((|start#0@@11| T@U) (|end#0@@7| T@U) ) (!  (=> (and (and (= (type |start#0@@11|) DatatypeTypeType) (= (type |end#0@@7|) DatatypeTypeType)) (or (|MapSpec.__default.NonEmptyRange#canCall| |start#0@@11| |end#0@@7|) (and ($Is |start#0@@11| Tclass.UI.RangeStart) ($Is |end#0@@7| Tclass.UI.RangeEnd)))) true) :qid |MapSpecsdfy.83:27| :skolemid |4565| :pattern ( (MapSpec.__default.NonEmptyRange |start#0@@11| |end#0@@7|)) ))))
(assert (forall ((|start#0@@12| T@U) (|end#0@@8| T@U) ) (!  (=> (and (and (= (type |start#0@@12|) DatatypeTypeType) (= (type |end#0@@8|) DatatypeTypeType)) (and ($Is |start#0@@12| Tclass.UI.RangeStart) ($Is |end#0@@8| Tclass.UI.RangeEnd))) (= (|MapSpec.__default.NonEmptyRange#requires| |start#0@@12| |end#0@@8|) true)) :qid |MapSpecsdfy.83:27| :skolemid |4566| :pattern ( (|MapSpec.__default.NonEmptyRange#requires| |start#0@@12| |end#0@@8|)) )))
(assert  (=> true (forall ((|start#0@@13| T@U) (|end#0@@9| T@U) ) (!  (=> (and (and (= (type |start#0@@13|) DatatypeTypeType) (= (type |end#0@@9|) DatatypeTypeType)) (or (|MapSpec.__default.NonEmptyRange#canCall| |start#0@@13| |end#0@@9|) (and ($Is |start#0@@13| Tclass.UI.RangeStart) ($Is |end#0@@9| Tclass.UI.RangeEnd)))) (and (=> (not (UI.RangeStart.NegativeInf_q |start#0@@13|)) (=> (not (UI.RangeEnd.PositiveInf_q |end#0@@9|)) (and (=> (UI.RangeStart.SInclusive_q |start#0@@13|) (=> (UI.RangeEnd.EInclusive_q |end#0@@9|) (|SeqComparison.__default.lte#canCall| (UI.RangeStart.key |start#0@@13|) (UI.RangeEnd.key |end#0@@9|)))) (=> (not (and (and (UI.RangeStart.SInclusive_q |start#0@@13|) (UI.RangeEnd.EInclusive_q |end#0@@9|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (UI.RangeStart.key |start#0@@13|) (UI.RangeEnd.key |end#0@@9|)))) (|SeqComparison.__default.lt#canCall| (UI.RangeStart.key |start#0@@13|) (UI.RangeEnd.key |end#0@@9|)))))) (= (MapSpec.__default.NonEmptyRange |start#0@@13| |end#0@@9|)  (or (or (or (UI.RangeStart.NegativeInf_q |start#0@@13|) (UI.RangeEnd.PositiveInf_q |end#0@@9|)) (and (and (UI.RangeStart.SInclusive_q |start#0@@13|) (UI.RangeEnd.EInclusive_q |end#0@@9|)) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (UI.RangeStart.key |start#0@@13|) (UI.RangeEnd.key |end#0@@9|)))) (SeqComparison.__default.lt (UI.RangeStart.key |start#0@@13|) (UI.RangeEnd.key |end#0@@9|)))))) :qid |MapSpecsdfy.83:27| :skolemid |4567| :pattern ( (MapSpec.__default.NonEmptyRange |start#0@@13| |end#0@@9|)) ))))
(assert  (=> true (forall ((|start#0@@14| T@U) (|end#0@@10| T@U) ) (!  (=> (and (and (= (type |start#0@@14|) DatatypeTypeType) (= (type |end#0@@10|) DatatypeTypeType)) (or (|MapSpec.__default.NonEmptyRange#canCall| (Lit |start#0@@14|) (Lit |end#0@@10|)) (and ($Is |start#0@@14| Tclass.UI.RangeStart) ($Is |end#0@@10| Tclass.UI.RangeEnd)))) (and (=> (not (U_2_bool (Lit (bool_2_U (UI.RangeStart.NegativeInf_q (Lit |start#0@@14|)))))) (=> (not (U_2_bool (Lit (bool_2_U (UI.RangeEnd.PositiveInf_q (Lit |end#0@@10|)))))) (and (=> (U_2_bool (Lit (bool_2_U (UI.RangeStart.SInclusive_q (Lit |start#0@@14|))))) (=> (U_2_bool (Lit (bool_2_U (UI.RangeEnd.EInclusive_q (Lit |end#0@@10|))))) (|SeqComparison.__default.lte#canCall| (Lit (UI.RangeStart.key (Lit |start#0@@14|))) (Lit (UI.RangeEnd.key (Lit |end#0@@10|)))))) (=> (not (and (and (UI.RangeStart.SInclusive_q (Lit |start#0@@14|)) (UI.RangeEnd.EInclusive_q (Lit |end#0@@10|))) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit (UI.RangeStart.key (Lit |start#0@@14|))) (Lit (UI.RangeEnd.key (Lit |end#0@@10|)))))) (|SeqComparison.__default.lt#canCall| (Lit (UI.RangeStart.key (Lit |start#0@@14|))) (Lit (UI.RangeEnd.key (Lit |end#0@@10|)))))))) (= (MapSpec.__default.NonEmptyRange (Lit |start#0@@14|) (Lit |end#0@@10|))  (or (or (or (UI.RangeStart.NegativeInf_q (Lit |start#0@@14|)) (UI.RangeEnd.PositiveInf_q (Lit |end#0@@10|))) (and (and (UI.RangeStart.SInclusive_q (Lit |start#0@@14|)) (UI.RangeEnd.EInclusive_q (Lit |end#0@@10|))) (SeqComparison.__default.lte StartFuel_SeqComparison._default.lte (Lit (UI.RangeStart.key (Lit |start#0@@14|))) (Lit (UI.RangeEnd.key (Lit |end#0@@10|)))))) (SeqComparison.__default.lt (Lit (UI.RangeStart.key (Lit |start#0@@14|))) (Lit (UI.RangeEnd.key (Lit |end#0@@10|)))))))) :qid |MapSpecsdfy.83:27| :weight 3 :skolemid |4568| :pattern ( (MapSpec.__default.NonEmptyRange (Lit |start#0@@14|) (Lit |end#0@@10|))) ))))
(assert  (=> true (forall ((|s#0@@288| T@U) (|s'#0@@10| T@U) (|uiop#0@@4| T@U) (|start#0@@15| T@U) (|results#0@@6| T@U) (|end#0@@11| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |s#0@@288|) DatatypeTypeType) (= (type |s'#0@@10|) DatatypeTypeType)) (= (type |uiop#0@@4|) DatatypeTypeType)) (= (type |start#0@@15|) DatatypeTypeType)) (= (type |results#0@@6|) (SeqType BoxType))) (= (type |end#0@@11|) DatatypeTypeType)) (or (|MapSpec.__default.Succ#canCall| |s#0@@288| |s'#0@@10| |uiop#0@@4| |start#0@@15| |results#0@@6| |end#0@@11|) (and (and (and (and (and ($Is |s#0@@288| Tclass.MapSpec.Variables) ($Is |s'#0@@10| Tclass.MapSpec.Variables)) ($Is |uiop#0@@4| Tclass.UI.Op)) ($Is |start#0@@15| Tclass.UI.RangeStart)) ($Is |results#0@@6| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@11| Tclass.UI.RangeEnd)))) true) :qid |MapSpecsdfy.91:18| :skolemid |4569| :pattern ( (MapSpec.__default.Succ |s#0@@288| |s'#0@@10| |uiop#0@@4| |start#0@@15| |results#0@@6| |end#0@@11|)) ))))
(assert (forall ((|s#0@@289| T@U) (|s'#0@@11| T@U) (|uiop#0@@5| T@U) (|start#0@@16| T@U) (|results#0@@7| T@U) (|end#0@@12| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |s#0@@289|) DatatypeTypeType) (= (type |s'#0@@11|) DatatypeTypeType)) (= (type |uiop#0@@5|) DatatypeTypeType)) (= (type |start#0@@16|) DatatypeTypeType)) (= (type |results#0@@7|) (SeqType BoxType))) (= (type |end#0@@12|) DatatypeTypeType)) (and (and (and (and (and ($Is |s#0@@289| Tclass.MapSpec.Variables) ($Is |s'#0@@11| Tclass.MapSpec.Variables)) ($Is |uiop#0@@5| Tclass.UI.Op)) ($Is |start#0@@16| Tclass.UI.RangeStart)) ($Is |results#0@@7| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@12| Tclass.UI.RangeEnd))) (= (|MapSpec.__default.Succ#requires| |s#0@@289| |s'#0@@11| |uiop#0@@5| |start#0@@16| |results#0@@7| |end#0@@12|) true)) :qid |MapSpecsdfy.91:18| :skolemid |4570| :pattern ( (|MapSpec.__default.Succ#requires| |s#0@@289| |s'#0@@11| |uiop#0@@5| |start#0@@16| |results#0@@7| |end#0@@12|)) )))
(assert  (=> true (forall ((|s#0@@290| T@U) (|s'#0@@12| T@U) (|uiop#0@@6| T@U) (|start#0@@17| T@U) (|results#0@@8| T@U) (|end#0@@13| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |s#0@@290|) DatatypeTypeType) (= (type |s'#0@@12|) DatatypeTypeType)) (= (type |uiop#0@@6|) DatatypeTypeType)) (= (type |start#0@@17|) DatatypeTypeType)) (= (type |results#0@@8|) (SeqType BoxType))) (= (type |end#0@@13|) DatatypeTypeType)) (or (|MapSpec.__default.Succ#canCall| |s#0@@290| |s'#0@@12| |uiop#0@@6| |start#0@@17| |results#0@@8| |end#0@@13|) (and (and (and (and (and ($Is |s#0@@290| Tclass.MapSpec.Variables) ($Is |s'#0@@12| Tclass.MapSpec.Variables)) ($Is |uiop#0@@6| Tclass.UI.Op)) ($Is |start#0@@17| Tclass.UI.RangeStart)) ($Is |results#0@@8| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@13| Tclass.UI.RangeEnd)))) (and (and (|$IsA#UI.Op| |uiop#0@@6|) (=> (|UI.Op#Equal| |uiop#0@@6| (|#UI.Op.SuccOp| |start#0@@17| |results#0@@8| |end#0@@13|)) (and (|MapSpec.__default.WF#canCall| |s#0@@290|) (=> (MapSpec.__default.WF |s#0@@290|) (and (and (|$IsA#MapSpec.Variables| |s'#0@@12|) (|$IsA#MapSpec.Variables| |s#0@@290|)) (=> (|MapSpec.Variables#Equal| |s'#0@@12| |s#0@@290|) (and (|MapSpec.__default.NonEmptyRange#canCall| |start#0@@17| |end#0@@13|) (=> (MapSpec.__default.NonEmptyRange |start#0@@17| |end#0@@13|) (and (forall ((|i#0@@142| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@142|) (< |i#0@@142| (|Seq#Length| |results#0@@8|))) (and (and (MapSpec.Variables.Variables_q |s#0@@290|) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#0@@142|)))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#0@@142|))))) :qid |MapSpecsdfy.98:16| :skolemid |4577| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#0@@142|))) )) (=> (forall ((|i#0@@143| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@143|) (< |i#0@@143| (|Seq#Length| |results#0@@8|))) (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@290|)) ($Box (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#0@@143|)))))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#0@@143|))))) :qid |MapSpecsdfy.98:16| :skolemid |4586| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#0@@143|))) )) (and (forall ((|i#1@@62| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@62|) (< |i#1@@62| (|Seq#Length| |results#0@@8|))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#1@@62|))) |MapSpec.__default.EmptyValue#canCall|)) :qid |MapSpecsdfy.99:16| :skolemid |4578| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#1@@62|))) )) (=> (forall ((|i#1@@63| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@63|) (< |i#1@@63| (|Seq#Length| |results#0@@8|))) (not (= (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#1@@63|))) MapSpec.__default.EmptyValue))) :qid |MapSpecsdfy.99:16| :skolemid |4585| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#1@@63|))) )) (and (forall ((|i#2@@20| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@20|) (< |i#2@@20| (|Seq#Length| |results#0@@8|))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#2@@20|))) (|MapSpec.__default.InRange#canCall| |start#0@@17| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#2@@20|))) |end#0@@13|))) :qid |MapSpecsdfy.100:16| :skolemid |4579| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#2@@20|))) )) (=> (forall ((|i#2@@21| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@21|) (< |i#2@@21| (|Seq#Length| |results#0@@8|))) (MapSpec.__default.InRange |start#0@@17| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#2@@21|))) |end#0@@13|)) :qid |MapSpecsdfy.100:16| :skolemid |4584| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#2@@21|))) )) (and (forall ((|i#3@@13| Int) (|j#0@@26| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@13|) (< |i#3@@13| |j#0@@26|)) (< |j#0@@26| (|Seq#Length| |results#0@@8|))) (and (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#3@@13|))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |j#0@@26|)))) (|SeqComparison.__default.lt#canCall| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#3@@13|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |j#0@@26|)))))) :qid |MapSpecsdfy.101:16| :skolemid |4580| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |j#0@@26|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#3@@13|))) )) (=> (forall ((|i#3@@14| Int) (|j#0@@27| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@14|) (< |i#3@@14| |j#0@@27|)) (< |j#0@@27| (|Seq#Length| |results#0@@8|))) (SeqComparison.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#3@@14|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |j#0@@27|))))) :qid |MapSpecsdfy.101:16| :skolemid |4583| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |j#0@@27|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#3@@14|))) )) (forall ((|key#0@@184| T@U) ) (!  (=> (and (= (type |key#0@@184|) (SeqType BoxType)) ($Is |key#0@@184| Tclass.KeyType.Key)) (and (and (|MapSpec.__default.InRange#canCall| |start#0@@17| |key#0@@184| |end#0@@13|) (=> (MapSpec.__default.InRange |start#0@@17| |key#0@@184| |end#0@@13|) (and (MapSpec.Variables.Variables_q |s#0@@290|) |MapSpec.__default.EmptyValue#canCall|))) (=> (and (MapSpec.__default.InRange |start#0@@17| |key#0@@184| |end#0@@13|) (not (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@290|)) ($Box |key#0@@184|))) MapSpec.__default.EmptyValue))) (forall ((|i#4@@1| Int) ) (!  (=> (<= (LitInt 0) |i#4@@1|) (=> (< |i#4@@1| (|Seq#Length| |results#0@@8|)) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#4@@1|))))) :qid |MapSpecsdfy.103:16| :skolemid |4581| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#4@@1|))) ))))) :qid |MapSpecsdfy.102:16| :skolemid |4582| :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@290|)) ($Box |key#0@@184|)))) :pattern ( (MapSpec.__default.InRange |start#0@@17| |key#0@@184| |end#0@@13|)) )))))))))))))))))) (= (MapSpec.__default.Succ |s#0@@290| |s'#0@@12| |uiop#0@@6| |start#0@@17| |results#0@@8| |end#0@@13|)  (and (and (and (and (and (and (and (and (|UI.Op#Equal| |uiop#0@@6| (|#UI.Op.SuccOp| |start#0@@17| |results#0@@8| |end#0@@13|)) (MapSpec.__default.WF |s#0@@290|)) (|MapSpec.Variables#Equal| |s'#0@@12| |s#0@@290|)) (MapSpec.__default.NonEmptyRange |start#0@@17| |end#0@@13|)) (forall ((|i#0@@144| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@144|) (< |i#0@@144| (|Seq#Length| |results#0@@8|))) (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@290|)) ($Box (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#0@@144|)))))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#0@@144|))))) :qid |MapSpecsdfy.98:16| :skolemid |4571| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#0@@144|))) ))) (forall ((|i#1@@64| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@64|) (< |i#1@@64| (|Seq#Length| |results#0@@8|))) (not (= (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#1@@64|))) MapSpec.__default.EmptyValue))) :qid |MapSpecsdfy.99:16| :skolemid |4572| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#1@@64|))) ))) (forall ((|i#2@@22| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@22|) (< |i#2@@22| (|Seq#Length| |results#0@@8|))) (MapSpec.__default.InRange |start#0@@17| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#2@@22|))) |end#0@@13|)) :qid |MapSpecsdfy.100:16| :skolemid |4573| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#2@@22|))) ))) (forall ((|i#3@@15| Int) (|j#0@@28| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#3@@15|) (< |i#3@@15| |j#0@@28|)) (< |j#0@@28| (|Seq#Length| |results#0@@8|))) (SeqComparison.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#3@@15|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |j#0@@28|))))) :qid |MapSpecsdfy.101:16| :skolemid |4574| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |j#0@@28|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#3@@15|))) ))) (forall ((|key#0@@185| T@U) ) (!  (=> (= (type |key#0@@185|) (SeqType BoxType)) (=> (and ($Is |key#0@@185| Tclass.KeyType.Key) (and (MapSpec.__default.InRange |start#0@@17| |key#0@@185| |end#0@@13|) (not (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@290|)) ($Box |key#0@@185|))) MapSpec.__default.EmptyValue)))) (exists ((|i#4@@2| Int) ) (!  (and (and (<= (LitInt 0) |i#4@@2|) (< |i#4@@2| (|Seq#Length| |results#0@@8|))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#4@@2|))) |key#0@@185|)) :qid |MapSpecsdfy.103:16| :skolemid |4575| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@8| |i#4@@2|))) )))) :qid |MapSpecsdfy.102:16| :skolemid |4576| :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@290|)) ($Box |key#0@@185|)))) :pattern ( (MapSpec.__default.InRange |start#0@@17| |key#0@@185| |end#0@@13|)) )))))) :qid |MapSpecsdfy.91:18| :skolemid |4587| :pattern ( (MapSpec.__default.Succ |s#0@@290| |s'#0@@12| |uiop#0@@6| |start#0@@17| |results#0@@8| |end#0@@13|)) ))))
(assert  (=> true (forall ((|s#0@@291| T@U) (|s'#0@@13| T@U) (|uiop#0@@7| T@U) (|start#0@@18| T@U) (|results#0@@9| T@U) (|end#0@@14| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |s#0@@291|) DatatypeTypeType) (= (type |s'#0@@13|) DatatypeTypeType)) (= (type |uiop#0@@7|) DatatypeTypeType)) (= (type |start#0@@18|) DatatypeTypeType)) (= (type |results#0@@9|) (SeqType BoxType))) (= (type |end#0@@14|) DatatypeTypeType)) (or (|MapSpec.__default.Succ#canCall| (Lit |s#0@@291|) (Lit |s'#0@@13|) (Lit |uiop#0@@7|) (Lit |start#0@@18|) (Lit |results#0@@9|) (Lit |end#0@@14|)) (and (and (and (and (and ($Is |s#0@@291| Tclass.MapSpec.Variables) ($Is |s'#0@@13| Tclass.MapSpec.Variables)) ($Is |uiop#0@@7| Tclass.UI.Op)) ($Is |start#0@@18| Tclass.UI.RangeStart)) ($Is |results#0@@9| (TSeq Tclass.UI.SuccResult))) ($Is |end#0@@14| Tclass.UI.RangeEnd)))) (and (and (|$IsA#UI.Op| (Lit |uiop#0@@7|)) (=> (|UI.Op#Equal| |uiop#0@@7| (|#UI.Op.SuccOp| (Lit |start#0@@18|) (Lit |results#0@@9|) (Lit |end#0@@14|))) (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@291|)) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@291|))))) (and (and (|$IsA#MapSpec.Variables| (Lit |s'#0@@13|)) (|$IsA#MapSpec.Variables| (Lit |s#0@@291|))) (=> (|MapSpec.Variables#Equal| |s'#0@@13| |s#0@@291|) (and (|MapSpec.__default.NonEmptyRange#canCall| (Lit |start#0@@18|) (Lit |end#0@@14|)) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.NonEmptyRange (Lit |start#0@@18|) (Lit |end#0@@14|))))) (and (forall ((|i#5@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@0|) (< |i#5@@0| (|Seq#Length| (Lit |results#0@@9|)))) (and (and (MapSpec.Variables.Variables_q (Lit |s#0@@291|)) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@9|) |i#5@@0|)))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@9|) |i#5@@0|))))) :qid |MapSpecsdfy.98:16| :skolemid |4594| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@9| |i#5@@0|))) )) (=> (forall ((|i#5@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@1|) (< |i#5@@1| (|Seq#Length| (Lit |results#0@@9|)))) (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@291|)))) ($Box (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@9|) |i#5@@1|)))))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@9|) |i#5@@1|))))) :qid |MapSpecsdfy.98:16| :skolemid |4603| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@9| |i#5@@1|))) )) (and (forall ((|i#6@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#6@@0|) (< |i#6@@0| (|Seq#Length| (Lit |results#0@@9|)))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@9|) |i#6@@0|))) |MapSpec.__default.EmptyValue#canCall|)) :qid |MapSpecsdfy.99:16| :skolemid |4595| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@9| |i#6@@0|))) )) (=> (forall ((|i#6@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#6@@1|) (< |i#6@@1| (|Seq#Length| (Lit |results#0@@9|)))) (not (= (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@9|) |i#6@@1|))) MapSpec.__default.EmptyValue))) :qid |MapSpecsdfy.99:16| :skolemid |4602| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@9| |i#6@@1|))) )) (and (forall ((|i#7@@0| Int) ) (!  (=> (and (<= (LitInt 0) |i#7@@0|) (< |i#7@@0| (|Seq#Length| (Lit |results#0@@9|)))) (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@9|) |i#7@@0|))) (|MapSpec.__default.InRange#canCall| (Lit |start#0@@18|) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@9|) |i#7@@0|))) (Lit |end#0@@14|)))) :qid |MapSpecsdfy.100:16| :skolemid |4596| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@9| |i#7@@0|))) )) (=> (forall ((|i#7@@1| Int) ) (!  (=> (and (<= (LitInt 0) |i#7@@1|) (< |i#7@@1| (|Seq#Length| (Lit |results#0@@9|)))) (MapSpec.__default.InRange (Lit |start#0@@18|) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@9|) |i#7@@1|))) (Lit |end#0@@14|))) :qid |MapSpecsdfy.100:16| :skolemid |4601| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@9| |i#7@@1|))) )) (and (forall ((|i#8@@0| Int) (|j#1@@16| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#8@@0|) (< |i#8@@0| |j#1@@16|)) (< |j#1@@16| (|Seq#Length| (Lit |results#0@@9|)))) (and (and (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@9|) |i#8@@0|))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@9|) |j#1@@16|)))) (|SeqComparison.__default.lt#canCall| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@9|) |i#8@@0|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@9|) |j#1@@16|)))))) :qid |MapSpecsdfy.101:16| :skolemid |4597| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@9| |j#1@@16|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@9| |i#8@@0|))) )) (=> (forall ((|i#8@@1| Int) (|j#1@@17| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#8@@1|) (< |i#8@@1| |j#1@@17|)) (< |j#1@@17| (|Seq#Length| (Lit |results#0@@9|)))) (SeqComparison.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@9|) |i#8@@1|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@9|) |j#1@@17|))))) :qid |MapSpecsdfy.101:16| :skolemid |4600| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@9| |j#1@@17|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@9| |i#8@@1|))) )) (forall ((|key#1@@12| T@U) ) (!  (=> (and (= (type |key#1@@12|) (SeqType BoxType)) ($Is |key#1@@12| Tclass.KeyType.Key)) (and (and (|MapSpec.__default.InRange#canCall| (Lit |start#0@@18|) |key#1@@12| (Lit |end#0@@14|)) (=> (MapSpec.__default.InRange (Lit |start#0@@18|) |key#1@@12| (Lit |end#0@@14|)) (and (MapSpec.Variables.Variables_q (Lit |s#0@@291|)) |MapSpec.__default.EmptyValue#canCall|))) (=> (and (MapSpec.__default.InRange (Lit |start#0@@18|) |key#1@@12| (Lit |end#0@@14|)) (not (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@291|)))) ($Box |key#1@@12|))) MapSpec.__default.EmptyValue))) (forall ((|i#9| Int) ) (!  (=> (<= (LitInt 0) |i#9|) (=> (< |i#9| (|Seq#Length| (Lit |results#0@@9|))) (UI.SuccResult.SuccResult_q ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@9|) |i#9|))))) :qid |MapSpecsdfy.103:16| :skolemid |4598| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@9| |i#9|))) ))))) :qid |MapSpecsdfy.102:16| :skolemid |4599| :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@291|)) ($Box |key#1@@12|)))) :pattern ( (MapSpec.__default.InRange |start#0@@18| |key#1@@12| |end#0@@14|)) )))))))))))))))))) (= (MapSpec.__default.Succ (Lit |s#0@@291|) (Lit |s'#0@@13|) (Lit |uiop#0@@7|) (Lit |start#0@@18|) (Lit |results#0@@9|) (Lit |end#0@@14|))  (and (and (and (and (and (and (and (and (|UI.Op#Equal| |uiop#0@@7| (|#UI.Op.SuccOp| (Lit |start#0@@18|) (Lit |results#0@@9|) (Lit |end#0@@14|))) (MapSpec.__default.WF (Lit |s#0@@291|))) (|MapSpec.Variables#Equal| |s'#0@@13| |s#0@@291|)) (MapSpec.__default.NonEmptyRange (Lit |start#0@@18|) (Lit |end#0@@14|))) (forall ((|i#5@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@2|) (< |i#5@@2| (|Seq#Length| (Lit |results#0@@9|)))) (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@291|)))) ($Box (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@9|) |i#5@@2|)))))) (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@9|) |i#5@@2|))))) :qid |MapSpecsdfy.98:16| :skolemid |4588| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@9| |i#5@@2|))) ))) (forall ((|i#6@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#6@@2|) (< |i#6@@2| (|Seq#Length| (Lit |results#0@@9|)))) (not (= (UI.SuccResult.value ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@9|) |i#6@@2|))) MapSpec.__default.EmptyValue))) :qid |MapSpecsdfy.99:16| :skolemid |4589| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@9| |i#6@@2|))) ))) (forall ((|i#7@@2| Int) ) (!  (=> (and (<= (LitInt 0) |i#7@@2|) (< |i#7@@2| (|Seq#Length| (Lit |results#0@@9|)))) (MapSpec.__default.InRange (Lit |start#0@@18|) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@9|) |i#7@@2|))) (Lit |end#0@@14|))) :qid |MapSpecsdfy.100:16| :skolemid |4590| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@9| |i#7@@2|))) ))) (forall ((|i#8@@2| Int) (|j#1@@18| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#8@@2|) (< |i#8@@2| |j#1@@18|)) (< |j#1@@18| (|Seq#Length| (Lit |results#0@@9|)))) (SeqComparison.__default.lt (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@9|) |i#8@@2|))) (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@9|) |j#1@@18|))))) :qid |MapSpecsdfy.101:16| :skolemid |4591| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@9| |j#1@@18|)) ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@9| |i#8@@2|))) ))) (forall ((|key#1@@13| T@U) ) (!  (=> (= (type |key#1@@13|) (SeqType BoxType)) (=> (and ($Is |key#1@@13| Tclass.KeyType.Key) (and (MapSpec.__default.InRange (Lit |start#0@@18|) |key#1@@13| (Lit |end#0@@14|)) (not (= ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (Lit (MapSpec.Variables.view (Lit |s#0@@291|)))) ($Box |key#1@@13|))) MapSpec.__default.EmptyValue)))) (exists ((|i#9@@0| Int) ) (!  (and (and (<= (LitInt 0) |i#9@@0|) (< |i#9@@0| (|Seq#Length| (Lit |results#0@@9|)))) (|Seq#Equal| (UI.SuccResult.key ($Unbox DatatypeTypeType (|Seq#Index| (Lit |results#0@@9|) |i#9@@0|))) |key#1@@13|)) :qid |MapSpecsdfy.103:16| :skolemid |4592| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |results#0@@9| |i#9@@0|))) )))) :qid |MapSpecsdfy.102:16| :skolemid |4593| :pattern ( ($Unbox (SeqType BoxType) (MapType0Select (|IMap#Elements| (MapSpec.Variables.view |s#0@@291|)) ($Box |key#1@@13|)))) :pattern ( (MapSpec.__default.InRange |start#0@@18| |key#1@@13| |end#0@@14|)) )))))) :qid |MapSpecsdfy.91:18| :weight 3 :skolemid |4604| :pattern ( (MapSpec.__default.Succ (Lit |s#0@@291|) (Lit |s'#0@@13|) (Lit |uiop#0@@7|) (Lit |start#0@@18|) (Lit |results#0@@9|) (Lit |end#0@@14|))) ))))
(assert  (=> true (forall ((|s#0@@292| T@U) (|s'#0@@14| T@U) (|uiop#0@@8| T@U) (|key#0@@186| T@U) (|new_value#0| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |s#0@@292|) DatatypeTypeType) (= (type |s'#0@@14|) DatatypeTypeType)) (= (type |uiop#0@@8|) DatatypeTypeType)) (= (type |key#0@@186|) (SeqType BoxType))) (= (type |new_value#0|) (SeqType BoxType))) (or (|MapSpec.__default.Write#canCall| |s#0@@292| |s'#0@@14| |uiop#0@@8| |key#0@@186| |new_value#0|) (and (and (and (and ($Is |s#0@@292| Tclass.MapSpec.Variables) ($Is |s'#0@@14| Tclass.MapSpec.Variables)) ($Is |uiop#0@@8| Tclass.UI.Op)) ($Is |key#0@@186| Tclass.KeyType.Key)) ($Is |new_value#0| Tclass.ValueType.Value)))) (MapSpec.__default.Write |s#0@@292| |s'#0@@14| |uiop#0@@8| |key#0@@186| |new_value#0|)) (MapSpec.__default.WF |s'#0@@14|)) :qid |MapSpecsdfy.106:19| :skolemid |4605| :pattern ( (MapSpec.__default.Write |s#0@@292| |s'#0@@14| |uiop#0@@8| |key#0@@186| |new_value#0|)) ))))
(assert (forall ((|s#0@@293| T@U) (|s'#0@@15| T@U) (|uiop#0@@9| T@U) (|key#0@@187| T@U) (|new_value#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@293|) DatatypeTypeType) (= (type |s'#0@@15|) DatatypeTypeType)) (= (type |uiop#0@@9|) DatatypeTypeType)) (= (type |key#0@@187|) (SeqType BoxType))) (= (type |new_value#0@@0|) (SeqType BoxType))) (and (and (and (and ($Is |s#0@@293| Tclass.MapSpec.Variables) ($Is |s'#0@@15| Tclass.MapSpec.Variables)) ($Is |uiop#0@@9| Tclass.UI.Op)) ($Is |key#0@@187| Tclass.KeyType.Key)) ($Is |new_value#0@@0| Tclass.ValueType.Value))) (= (|MapSpec.__default.Write#requires| |s#0@@293| |s'#0@@15| |uiop#0@@9| |key#0@@187| |new_value#0@@0|) true)) :qid |MapSpecsdfy.106:19| :skolemid |4606| :pattern ( (|MapSpec.__default.Write#requires| |s#0@@293| |s'#0@@15| |uiop#0@@9| |key#0@@187| |new_value#0@@0|)) )))
(assert  (=> true (forall ((|s#0@@294| T@U) (|s'#0@@16| T@U) (|uiop#0@@10| T@U) (|key#0@@188| T@U) (|new_value#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@294|) DatatypeTypeType) (= (type |s'#0@@16|) DatatypeTypeType)) (= (type |uiop#0@@10|) DatatypeTypeType)) (= (type |key#0@@188|) (SeqType BoxType))) (= (type |new_value#0@@1|) (SeqType BoxType))) (or (|MapSpec.__default.Write#canCall| |s#0@@294| |s'#0@@16| |uiop#0@@10| |key#0@@188| |new_value#0@@1|) (and (and (and (and ($Is |s#0@@294| Tclass.MapSpec.Variables) ($Is |s'#0@@16| Tclass.MapSpec.Variables)) ($Is |uiop#0@@10| Tclass.UI.Op)) ($Is |key#0@@188| Tclass.KeyType.Key)) ($Is |new_value#0@@1| Tclass.ValueType.Value)))) (and (and (|$IsA#UI.Op| |uiop#0@@10|) (=> (|UI.Op#Equal| |uiop#0@@10| (|#UI.Op.PutOp| |key#0@@188| |new_value#0@@1|)) (and (|MapSpec.__default.WF#canCall| |s#0@@294|) (=> (MapSpec.__default.WF |s#0@@294|) (and (|MapSpec.__default.WF#canCall| |s'#0@@16|) (=> (MapSpec.__default.WF |s'#0@@16|) (and (MapSpec.Variables.Variables_q |s'#0@@16|) (MapSpec.Variables.Variables_q |s#0@@294|)))))))) (= (MapSpec.__default.Write |s#0@@294| |s'#0@@16| |uiop#0@@10| |key#0@@188| |new_value#0@@1|)  (and (and (and (|UI.Op#Equal| |uiop#0@@10| (|#UI.Op.PutOp| |key#0@@188| |new_value#0@@1|)) (MapSpec.__default.WF |s#0@@294|)) (MapSpec.__default.WF |s'#0@@16|)) (|IMap#Equal| (MapSpec.Variables.view |s'#0@@16|) (|IMap#Build| (MapSpec.Variables.view |s#0@@294|) ($Box |key#0@@188|) ($Box |new_value#0@@1|))))))) :qid |MapSpecsdfy.106:19| :skolemid |4607| :pattern ( (MapSpec.__default.Write |s#0@@294| |s'#0@@16| |uiop#0@@10| |key#0@@188| |new_value#0@@1|)) ))))
(assert  (=> true (forall ((|s#0@@295| T@U) (|s'#0@@17| T@U) (|uiop#0@@11| T@U) (|key#0@@189| T@U) (|new_value#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@295|) DatatypeTypeType) (= (type |s'#0@@17|) DatatypeTypeType)) (= (type |uiop#0@@11|) DatatypeTypeType)) (= (type |key#0@@189|) (SeqType BoxType))) (= (type |new_value#0@@2|) (SeqType BoxType))) (or (|MapSpec.__default.Write#canCall| (Lit |s#0@@295|) (Lit |s'#0@@17|) (Lit |uiop#0@@11|) (Lit |key#0@@189|) |new_value#0@@2|) (and (and (and (and ($Is |s#0@@295| Tclass.MapSpec.Variables) ($Is |s'#0@@17| Tclass.MapSpec.Variables)) ($Is |uiop#0@@11| Tclass.UI.Op)) ($Is |key#0@@189| Tclass.KeyType.Key)) ($Is |new_value#0@@2| Tclass.ValueType.Value)))) (and (and (|$IsA#UI.Op| (Lit |uiop#0@@11|)) (=> (|UI.Op#Equal| |uiop#0@@11| (|#UI.Op.PutOp| (Lit |key#0@@189|) |new_value#0@@2|)) (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@295|)) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@295|))))) (and (|MapSpec.__default.WF#canCall| (Lit |s'#0@@17|)) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s'#0@@17|))))) (and (MapSpec.Variables.Variables_q (Lit |s'#0@@17|)) (MapSpec.Variables.Variables_q (Lit |s#0@@295|))))))))) (= (MapSpec.__default.Write (Lit |s#0@@295|) (Lit |s'#0@@17|) (Lit |uiop#0@@11|) (Lit |key#0@@189|) |new_value#0@@2|)  (and (and (and (|UI.Op#Equal| |uiop#0@@11| (|#UI.Op.PutOp| (Lit |key#0@@189|) |new_value#0@@2|)) (MapSpec.__default.WF (Lit |s#0@@295|))) (MapSpec.__default.WF (Lit |s'#0@@17|))) (|IMap#Equal| (MapSpec.Variables.view (Lit |s'#0@@17|)) (|IMap#Build| (Lit (MapSpec.Variables.view (Lit |s#0@@295|))) ($Box (Lit |key#0@@189|)) ($Box |new_value#0@@2|))))))) :qid |MapSpecsdfy.106:19| :weight 3 :skolemid |4608| :pattern ( (MapSpec.__default.Write (Lit |s#0@@295|) (Lit |s'#0@@17|) (Lit |uiop#0@@11|) (Lit |key#0@@189|) |new_value#0@@2|)) ))))
(assert  (=> true (forall ((|s#0@@296| T@U) (|s'#0@@18| T@U) (|uiop#0@@12| T@U) (|key#0@@190| T@U) (|new_value#0@@3| T@U) ) (!  (=> (and (and (and (and (and (= (type |s#0@@296|) DatatypeTypeType) (= (type |s'#0@@18|) DatatypeTypeType)) (= (type |uiop#0@@12|) DatatypeTypeType)) (= (type |key#0@@190|) (SeqType BoxType))) (= (type |new_value#0@@3|) (SeqType BoxType))) (or (|MapSpec.__default.Write#canCall| (Lit |s#0@@296|) (Lit |s'#0@@18|) (Lit |uiop#0@@12|) (Lit |key#0@@190|) (Lit |new_value#0@@3|)) (and (and (and (and ($Is |s#0@@296| Tclass.MapSpec.Variables) ($Is |s'#0@@18| Tclass.MapSpec.Variables)) ($Is |uiop#0@@12| Tclass.UI.Op)) ($Is |key#0@@190| Tclass.KeyType.Key)) ($Is |new_value#0@@3| Tclass.ValueType.Value)))) (and (and (|$IsA#UI.Op| (Lit |uiop#0@@12|)) (=> (|UI.Op#Equal| |uiop#0@@12| (|#UI.Op.PutOp| (Lit |key#0@@190|) (Lit |new_value#0@@3|))) (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@296|)) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@296|))))) (and (|MapSpec.__default.WF#canCall| (Lit |s'#0@@18|)) (=> (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s'#0@@18|))))) (and (MapSpec.Variables.Variables_q (Lit |s'#0@@18|)) (MapSpec.Variables.Variables_q (Lit |s#0@@296|))))))))) (= (MapSpec.__default.Write (Lit |s#0@@296|) (Lit |s'#0@@18|) (Lit |uiop#0@@12|) (Lit |key#0@@190|) (Lit |new_value#0@@3|))  (and (and (and (|UI.Op#Equal| |uiop#0@@12| (|#UI.Op.PutOp| (Lit |key#0@@190|) (Lit |new_value#0@@3|))) (MapSpec.__default.WF (Lit |s#0@@296|))) (MapSpec.__default.WF (Lit |s'#0@@18|))) (|IMap#Equal| (MapSpec.Variables.view (Lit |s'#0@@18|)) (|IMap#Build| (Lit (MapSpec.Variables.view (Lit |s#0@@296|))) ($Box (Lit |key#0@@190|)) ($Box (Lit |new_value#0@@3|)))))))) :qid |MapSpecsdfy.106:19| :weight 3 :skolemid |4609| :pattern ( (MapSpec.__default.Write (Lit |s#0@@296|) (Lit |s'#0@@18|) (Lit |uiop#0@@12|) (Lit |key#0@@190|) (Lit |new_value#0@@3|))) ))))
(assert  (=> true (forall ((|s#0@@297| T@U) (|s'#0@@19| T@U) (|uiop#0@@13| T@U) ) (!  (=> (and (and (and (= (type |s#0@@297|) DatatypeTypeType) (= (type |s'#0@@19|) DatatypeTypeType)) (= (type |uiop#0@@13|) DatatypeTypeType)) (or (|MapSpec.__default.Stutter#canCall| |s#0@@297| |s'#0@@19| |uiop#0@@13|) (and (and ($Is |s#0@@297| Tclass.MapSpec.Variables) ($Is |s'#0@@19| Tclass.MapSpec.Variables)) ($Is |uiop#0@@13| Tclass.UI.Op)))) true) :qid |MapSpecsdfy.115:21| :skolemid |4610| :pattern ( (MapSpec.__default.Stutter |s#0@@297| |s'#0@@19| |uiop#0@@13|)) ))))
(assert (forall ((|s#0@@298| T@U) (|s'#0@@20| T@U) (|uiop#0@@14| T@U) ) (!  (=> (and (and (and (= (type |s#0@@298|) DatatypeTypeType) (= (type |s'#0@@20|) DatatypeTypeType)) (= (type |uiop#0@@14|) DatatypeTypeType)) (and (and ($Is |s#0@@298| Tclass.MapSpec.Variables) ($Is |s'#0@@20| Tclass.MapSpec.Variables)) ($Is |uiop#0@@14| Tclass.UI.Op))) (= (|MapSpec.__default.Stutter#requires| |s#0@@298| |s'#0@@20| |uiop#0@@14|) true)) :qid |MapSpecsdfy.115:21| :skolemid |4611| :pattern ( (|MapSpec.__default.Stutter#requires| |s#0@@298| |s'#0@@20| |uiop#0@@14|)) )))
(assert  (=> true (forall ((|s#0@@299| T@U) (|s'#0@@21| T@U) (|uiop#0@@15| T@U) ) (!  (=> (and (and (and (= (type |s#0@@299|) DatatypeTypeType) (= (type |s'#0@@21|) DatatypeTypeType)) (= (type |uiop#0@@15|) DatatypeTypeType)) (or (|MapSpec.__default.Stutter#canCall| |s#0@@299| |s'#0@@21| |uiop#0@@15|) (and (and ($Is |s#0@@299| Tclass.MapSpec.Variables) ($Is |s'#0@@21| Tclass.MapSpec.Variables)) ($Is |uiop#0@@15| Tclass.UI.Op)))) (and (=> (UI.Op.NoOp_q |uiop#0@@15|) (and (|$IsA#MapSpec.Variables| |s'#0@@21|) (|$IsA#MapSpec.Variables| |s#0@@299|))) (= (MapSpec.__default.Stutter |s#0@@299| |s'#0@@21| |uiop#0@@15|)  (and (UI.Op.NoOp_q |uiop#0@@15|) (|MapSpec.Variables#Equal| |s'#0@@21| |s#0@@299|))))) :qid |MapSpecsdfy.115:21| :skolemid |4612| :pattern ( (MapSpec.__default.Stutter |s#0@@299| |s'#0@@21| |uiop#0@@15|)) ))))
(assert  (=> true (forall ((|s#0@@300| T@U) (|s'#0@@22| T@U) (|uiop#0@@16| T@U) ) (!  (=> (and (and (and (= (type |s#0@@300|) DatatypeTypeType) (= (type |s'#0@@22|) DatatypeTypeType)) (= (type |uiop#0@@16|) DatatypeTypeType)) (or (|MapSpec.__default.Stutter#canCall| (Lit |s#0@@300|) (Lit |s'#0@@22|) (Lit |uiop#0@@16|)) (and (and ($Is |s#0@@300| Tclass.MapSpec.Variables) ($Is |s'#0@@22| Tclass.MapSpec.Variables)) ($Is |uiop#0@@16| Tclass.UI.Op)))) (and (=> (U_2_bool (Lit (bool_2_U (UI.Op.NoOp_q (Lit |uiop#0@@16|))))) (and (|$IsA#MapSpec.Variables| (Lit |s'#0@@22|)) (|$IsA#MapSpec.Variables| (Lit |s#0@@300|)))) (= (MapSpec.__default.Stutter (Lit |s#0@@300|) (Lit |s'#0@@22|) (Lit |uiop#0@@16|))  (and (UI.Op.NoOp_q (Lit |uiop#0@@16|)) (|MapSpec.Variables#Equal| |s'#0@@22| |s#0@@300|))))) :qid |MapSpecsdfy.115:21| :weight 3 :skolemid |4613| :pattern ( (MapSpec.__default.Stutter (Lit |s#0@@300|) (Lit |s'#0@@22|) (Lit |uiop#0@@16|))) ))))
(assert  (=> true (forall ((|s#0@@301| T@U) (|s'#0@@23| T@U) (|uiop#0@@17| T@U) (|step#0| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@301|) DatatypeTypeType) (= (type |s'#0@@23|) DatatypeTypeType)) (= (type |uiop#0@@17|) DatatypeTypeType)) (= (type |step#0|) DatatypeTypeType)) (or (|MapSpec.__default.NextStep#canCall| |s#0@@301| |s'#0@@23| |uiop#0@@17| |step#0|) (and (and (and ($Is |s#0@@301| Tclass.MapSpec.Variables) ($Is |s'#0@@23| Tclass.MapSpec.Variables)) ($Is |uiop#0@@17| Tclass.UI.Op)) ($Is |step#0| Tclass.MapSpec.Step)))) true) :qid |MapSpecsdfy.128:22| :skolemid |4614| :pattern ( (MapSpec.__default.NextStep |s#0@@301| |s'#0@@23| |uiop#0@@17| |step#0|)) ))))
(assert (forall ((|s#0@@302| T@U) (|s'#0@@24| T@U) (|uiop#0@@18| T@U) (|step#0@@0| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@302|) DatatypeTypeType) (= (type |s'#0@@24|) DatatypeTypeType)) (= (type |uiop#0@@18|) DatatypeTypeType)) (= (type |step#0@@0|) DatatypeTypeType)) (and (and (and ($Is |s#0@@302| Tclass.MapSpec.Variables) ($Is |s'#0@@24| Tclass.MapSpec.Variables)) ($Is |uiop#0@@18| Tclass.UI.Op)) ($Is |step#0@@0| Tclass.MapSpec.Step))) (= (|MapSpec.__default.NextStep#requires| |s#0@@302| |s'#0@@24| |uiop#0@@18| |step#0@@0|) true)) :qid |MapSpecsdfy.128:22| :skolemid |4615| :pattern ( (|MapSpec.__default.NextStep#requires| |s#0@@302| |s'#0@@24| |uiop#0@@18| |step#0@@0|)) )))
(assert  (=> true (forall ((|s#0@@303| T@U) (|s'#0@@25| T@U) (|uiop#0@@19| T@U) (|step#0@@1| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@303|) DatatypeTypeType) (= (type |s'#0@@25|) DatatypeTypeType)) (= (type |uiop#0@@19|) DatatypeTypeType)) (= (type |step#0@@1|) DatatypeTypeType)) (or (|MapSpec.__default.NextStep#canCall| |s#0@@303| |s'#0@@25| |uiop#0@@19| |step#0@@1|) (and (and (and ($Is |s#0@@303| Tclass.MapSpec.Variables) ($Is |s'#0@@25| Tclass.MapSpec.Variables)) ($Is |uiop#0@@19| Tclass.UI.Op)) ($Is |step#0@@1| Tclass.MapSpec.Step)))) (and (and (=> (MapSpec.Step.QueryStep_q |step#0@@1|) (let ((|result#1| (MapSpec.Step.result |step#0@@1|))) (let ((|key#2@@1| (MapSpec.Step.key |step#0@@1|))) (|MapSpec.__default.Query#canCall| |s#0@@303| |s'#0@@25| |uiop#0@@19| |key#2@@1| |result#1|)))) (=> (not (MapSpec.Step.QueryStep_q |step#0@@1|)) (and (=> (MapSpec.Step.WriteStep_q |step#0@@1|) (let ((|new_value#1| (MapSpec.Step.new__value |step#0@@1|))) (let ((|key#3@@1| (MapSpec.Step.key |step#0@@1|))) (|MapSpec.__default.Write#canCall| |s#0@@303| |s'#0@@25| |uiop#0@@19| |key#3@@1| |new_value#1|)))) (=> (not (MapSpec.Step.WriteStep_q |step#0@@1|)) (and (=> (MapSpec.Step.SuccStep_q |step#0@@1|) (let ((|end#1| (MapSpec.Step.end |step#0@@1|))) (let ((|results#1| (MapSpec.Step.results |step#0@@1|))) (let ((|start#1| (MapSpec.Step.start |step#0@@1|))) (|MapSpec.__default.Succ#canCall| |s#0@@303| |s'#0@@25| |uiop#0@@19| |start#1| |results#1| |end#1|))))) (=> (not (MapSpec.Step.SuccStep_q |step#0@@1|)) (|MapSpec.__default.Stutter#canCall| |s#0@@303| |s'#0@@25| |uiop#0@@19|))))))) (= (MapSpec.__default.NextStep |s#0@@303| |s'#0@@25| |uiop#0@@19| |step#0@@1|) (ite (MapSpec.Step.QueryStep_q |step#0@@1|) (let ((|result#0@@4| (MapSpec.Step.result |step#0@@1|))) (let ((|key#0@@191| (MapSpec.Step.key |step#0@@1|))) (MapSpec.__default.Query |s#0@@303| |s'#0@@25| |uiop#0@@19| |key#0@@191| |result#0@@4|))) (ite (MapSpec.Step.WriteStep_q |step#0@@1|) (let ((|new_value#0@@4| (MapSpec.Step.new__value |step#0@@1|))) (let ((|key#1@@14| (MapSpec.Step.key |step#0@@1|))) (MapSpec.__default.Write |s#0@@303| |s'#0@@25| |uiop#0@@19| |key#1@@14| |new_value#0@@4|))) (ite (MapSpec.Step.SuccStep_q |step#0@@1|) (let ((|end#0@@15| (MapSpec.Step.end |step#0@@1|))) (let ((|results#0@@10| (MapSpec.Step.results |step#0@@1|))) (let ((|start#0@@19| (MapSpec.Step.start |step#0@@1|))) (MapSpec.__default.Succ |s#0@@303| |s'#0@@25| |uiop#0@@19| |start#0@@19| |results#0@@10| |end#0@@15|)))) (MapSpec.__default.Stutter |s#0@@303| |s'#0@@25| |uiop#0@@19|))))))) :qid |MapSpecsdfy.128:22| :skolemid |4616| :pattern ( (MapSpec.__default.NextStep |s#0@@303| |s'#0@@25| |uiop#0@@19| |step#0@@1|)) ))))
(assert  (=> true (forall ((|s#0@@304| T@U) (|s'#0@@26| T@U) (|uiop#0@@20| T@U) (|step#0@@2| T@U) ) (!  (=> (and (and (and (and (= (type |s#0@@304|) DatatypeTypeType) (= (type |s'#0@@26|) DatatypeTypeType)) (= (type |uiop#0@@20|) DatatypeTypeType)) (= (type |step#0@@2|) DatatypeTypeType)) (or (|MapSpec.__default.NextStep#canCall| (Lit |s#0@@304|) (Lit |s'#0@@26|) (Lit |uiop#0@@20|) (Lit |step#0@@2|)) (and (and (and ($Is |s#0@@304| Tclass.MapSpec.Variables) ($Is |s'#0@@26| Tclass.MapSpec.Variables)) ($Is |uiop#0@@20| Tclass.UI.Op)) ($Is |step#0@@2| Tclass.MapSpec.Step)))) (and (and (=> (U_2_bool (Lit (bool_2_U (MapSpec.Step.QueryStep_q (Lit |step#0@@2|))))) (let ((|result#3| (Lit (MapSpec.Step.result (Lit |step#0@@2|))))) (let ((|key#6@@1| (Lit (MapSpec.Step.key (Lit |step#0@@2|))))) (|MapSpec.__default.Query#canCall| (Lit |s#0@@304|) (Lit |s'#0@@26|) (Lit |uiop#0@@20|) |key#6@@1| |result#3|)))) (=> (not (U_2_bool (Lit (bool_2_U (MapSpec.Step.QueryStep_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (MapSpec.Step.WriteStep_q (Lit |step#0@@2|))))) (let ((|new_value#3| (Lit (MapSpec.Step.new__value (Lit |step#0@@2|))))) (let ((|key#7@@1| (Lit (MapSpec.Step.key (Lit |step#0@@2|))))) (|MapSpec.__default.Write#canCall| (Lit |s#0@@304|) (Lit |s'#0@@26|) (Lit |uiop#0@@20|) |key#7@@1| |new_value#3|)))) (=> (not (U_2_bool (Lit (bool_2_U (MapSpec.Step.WriteStep_q (Lit |step#0@@2|)))))) (and (=> (U_2_bool (Lit (bool_2_U (MapSpec.Step.SuccStep_q (Lit |step#0@@2|))))) (let ((|end#3| (Lit (MapSpec.Step.end (Lit |step#0@@2|))))) (let ((|results#3| (Lit (MapSpec.Step.results (Lit |step#0@@2|))))) (let ((|start#3| (Lit (MapSpec.Step.start (Lit |step#0@@2|))))) (|MapSpec.__default.Succ#canCall| (Lit |s#0@@304|) (Lit |s'#0@@26|) (Lit |uiop#0@@20|) |start#3| |results#3| |end#3|))))) (=> (not (U_2_bool (Lit (bool_2_U (MapSpec.Step.SuccStep_q (Lit |step#0@@2|)))))) (|MapSpec.__default.Stutter#canCall| (Lit |s#0@@304|) (Lit |s'#0@@26|) (Lit |uiop#0@@20|)))))))) (= (MapSpec.__default.NextStep (Lit |s#0@@304|) (Lit |s'#0@@26|) (Lit |uiop#0@@20|) (Lit |step#0@@2|)) (ite (MapSpec.Step.QueryStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|result#2| (Lit (MapSpec.Step.result (Lit |step#0@@2|))))) (let ((|key#4@@1| (Lit (MapSpec.Step.key (Lit |step#0@@2|))))) (Lit (bool_2_U (MapSpec.__default.Query (Lit |s#0@@304|) (Lit |s'#0@@26|) (Lit |uiop#0@@20|) |key#4@@1| |result#2|)))))) (ite (MapSpec.Step.WriteStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|new_value#2| (Lit (MapSpec.Step.new__value (Lit |step#0@@2|))))) (let ((|key#5@@1| (Lit (MapSpec.Step.key (Lit |step#0@@2|))))) (Lit (bool_2_U (MapSpec.__default.Write (Lit |s#0@@304|) (Lit |s'#0@@26|) (Lit |uiop#0@@20|) |key#5@@1| |new_value#2|)))))) (ite (MapSpec.Step.SuccStep_q (Lit |step#0@@2|)) (U_2_bool (let ((|end#2| (Lit (MapSpec.Step.end (Lit |step#0@@2|))))) (let ((|results#2| (Lit (MapSpec.Step.results (Lit |step#0@@2|))))) (let ((|start#2| (Lit (MapSpec.Step.start (Lit |step#0@@2|))))) (Lit (bool_2_U (MapSpec.__default.Succ (Lit |s#0@@304|) (Lit |s'#0@@26|) (Lit |uiop#0@@20|) |start#2| |results#2| |end#2|))))))) (MapSpec.__default.Stutter (Lit |s#0@@304|) (Lit |s'#0@@26|) (Lit |uiop#0@@20|)))))))) :qid |MapSpecsdfy.128:22| :weight 3 :skolemid |4617| :pattern ( (MapSpec.__default.NextStep (Lit |s#0@@304|) (Lit |s'#0@@26|) (Lit |uiop#0@@20|) (Lit |step#0@@2|))) ))))
(assert  (=> true (forall ((|s#0@@305| T@U) (|s'#0@@27| T@U) (|uiop#0@@21| T@U) ) (!  (=> (and (and (and (= (type |s#0@@305|) DatatypeTypeType) (= (type |s'#0@@27|) DatatypeTypeType)) (= (type |uiop#0@@21|) DatatypeTypeType)) (or (|MapSpec.__default.Next#canCall| |s#0@@305| |s'#0@@27| |uiop#0@@21|) (and (and ($Is |s#0@@305| Tclass.MapSpec.Variables) ($Is |s'#0@@27| Tclass.MapSpec.Variables)) ($Is |uiop#0@@21| Tclass.UI.Op)))) true) :qid |UIStateMachinesdfyMapSpec.16:18| :skolemid |4618| :pattern ( (MapSpec.__default.Next |s#0@@305| |s'#0@@27| |uiop#0@@21|)) ))))
(assert (forall ((|s#0@@306| T@U) (|s'#0@@28| T@U) (|uiop#0@@22| T@U) ) (!  (=> (and (and (and (= (type |s#0@@306|) DatatypeTypeType) (= (type |s'#0@@28|) DatatypeTypeType)) (= (type |uiop#0@@22|) DatatypeTypeType)) (and (and ($Is |s#0@@306| Tclass.MapSpec.Variables) ($Is |s'#0@@28| Tclass.MapSpec.Variables)) ($Is |uiop#0@@22| Tclass.UI.Op))) (= (|MapSpec.__default.Next#requires| |s#0@@306| |s'#0@@28| |uiop#0@@22|) true)) :qid |UIStateMachinesdfyMapSpec.16:18| :skolemid |4619| :pattern ( (|MapSpec.__default.Next#requires| |s#0@@306| |s'#0@@28| |uiop#0@@22|)) )))
(assert  (=> true (forall ((|s#0@@307| T@U) (|s'#0@@29| T@U) (|uiop#0@@23| T@U) ) (!  (=> (and (and (and (= (type |s#0@@307|) DatatypeTypeType) (= (type |s'#0@@29|) DatatypeTypeType)) (= (type |uiop#0@@23|) DatatypeTypeType)) (or (|MapSpec.__default.Next#canCall| |s#0@@307| |s'#0@@29| |uiop#0@@23|) (and (and ($Is |s#0@@307| Tclass.MapSpec.Variables) ($Is |s'#0@@29| Tclass.MapSpec.Variables)) ($Is |uiop#0@@23| Tclass.UI.Op)))) (and (forall ((|step#0@@3| T@U) ) (!  (=> (and (= (type |step#0@@3|) DatatypeTypeType) ($Is |step#0@@3| Tclass.MapSpec.Step)) (|MapSpec.__default.NextStep#canCall| |s#0@@307| |s'#0@@29| |uiop#0@@23| |step#0@@3|)) :qid |MapSpecsdfy.140:12| :skolemid |4621| :pattern ( (MapSpec.__default.NextStep |s#0@@307| |s'#0@@29| |uiop#0@@23| |step#0@@3|)) )) (= (MapSpec.__default.Next |s#0@@307| |s'#0@@29| |uiop#0@@23|) (exists ((|step#0@@4| T@U) ) (!  (and (= (type |step#0@@4|) DatatypeTypeType) (and ($Is |step#0@@4| Tclass.MapSpec.Step) (MapSpec.__default.NextStep |s#0@@307| |s'#0@@29| |uiop#0@@23| |step#0@@4|))) :qid |MapSpecsdfy.140:12| :skolemid |4620| :pattern ( (MapSpec.__default.NextStep |s#0@@307| |s'#0@@29| |uiop#0@@23| |step#0@@4|)) ))))) :qid |UIStateMachinesdfyMapSpec.16:18| :skolemid |4622| :pattern ( (MapSpec.__default.Next |s#0@@307| |s'#0@@29| |uiop#0@@23|)) ))))
(assert  (=> true (forall ((|s#0@@308| T@U) (|s'#0@@30| T@U) (|uiop#0@@24| T@U) ) (!  (=> (and (and (and (= (type |s#0@@308|) DatatypeTypeType) (= (type |s'#0@@30|) DatatypeTypeType)) (= (type |uiop#0@@24|) DatatypeTypeType)) (or (|MapSpec.__default.Next#canCall| (Lit |s#0@@308|) (Lit |s'#0@@30|) (Lit |uiop#0@@24|)) (and (and ($Is |s#0@@308| Tclass.MapSpec.Variables) ($Is |s'#0@@30| Tclass.MapSpec.Variables)) ($Is |uiop#0@@24| Tclass.UI.Op)))) (and (forall ((|step#1| T@U) ) (!  (=> (and (= (type |step#1|) DatatypeTypeType) ($Is |step#1| Tclass.MapSpec.Step)) (|MapSpec.__default.NextStep#canCall| (Lit |s#0@@308|) (Lit |s'#0@@30|) (Lit |uiop#0@@24|) |step#1|)) :qid |MapSpecsdfy.140:12| :skolemid |4624| :pattern ( (MapSpec.__default.NextStep |s#0@@308| |s'#0@@30| |uiop#0@@24| |step#1|)) )) (= (MapSpec.__default.Next (Lit |s#0@@308|) (Lit |s'#0@@30|) (Lit |uiop#0@@24|)) (exists ((|step#1@@0| T@U) ) (!  (and (= (type |step#1@@0|) DatatypeTypeType) (and ($Is |step#1@@0| Tclass.MapSpec.Step) (MapSpec.__default.NextStep (Lit |s#0@@308|) (Lit |s'#0@@30|) (Lit |uiop#0@@24|) |step#1@@0|))) :qid |MapSpecsdfy.140:12| :skolemid |4623| :pattern ( (MapSpec.__default.NextStep |s#0@@308| |s'#0@@30| |uiop#0@@24| |step#1@@0|)) ))))) :qid |UIStateMachinesdfyMapSpec.16:18| :weight 3 :skolemid |4625| :pattern ( (MapSpec.__default.Next (Lit |s#0@@308|) (Lit |s'#0@@30|) (Lit |uiop#0@@24|))) ))))
(assert  (=> true (forall ((|s#0@@309| T@U) ) (!  (=> (and (= (type |s#0@@309|) DatatypeTypeType) (or (|MapSpec.__default.Inv#canCall| |s#0@@309|) ($Is |s#0@@309| Tclass.MapSpec.Variables))) true) :qid |UIStateMachinesdfyMapSpec.18:17| :skolemid |4626| :pattern ( (MapSpec.__default.Inv |s#0@@309|)) ))))
(assert (forall ((|s#0@@310| T@U) ) (!  (=> (and (= (type |s#0@@310|) DatatypeTypeType) ($Is |s#0@@310| Tclass.MapSpec.Variables)) (= (|MapSpec.__default.Inv#requires| |s#0@@310|) true)) :qid |UIStateMachinesdfyMapSpec.18:17| :skolemid |4627| :pattern ( (|MapSpec.__default.Inv#requires| |s#0@@310|)) )))
(assert  (=> true (forall ((|s#0@@311| T@U) ) (!  (=> (and (= (type |s#0@@311|) DatatypeTypeType) (or (|MapSpec.__default.Inv#canCall| |s#0@@311|) ($Is |s#0@@311| Tclass.MapSpec.Variables))) (and (|MapSpec.__default.WF#canCall| |s#0@@311|) (= (MapSpec.__default.Inv |s#0@@311|) (MapSpec.__default.WF |s#0@@311|)))) :qid |UIStateMachinesdfyMapSpec.18:17| :skolemid |4628| :pattern ( (MapSpec.__default.Inv |s#0@@311|)) ))))
(assert  (=> true (forall ((|s#0@@312| T@U) ) (!  (=> (and (= (type |s#0@@312|) DatatypeTypeType) (or (|MapSpec.__default.Inv#canCall| (Lit |s#0@@312|)) ($Is |s#0@@312| Tclass.MapSpec.Variables))) (and (|MapSpec.__default.WF#canCall| (Lit |s#0@@312|)) (= (MapSpec.__default.Inv (Lit |s#0@@312|)) (U_2_bool (Lit (bool_2_U (MapSpec.__default.WF (Lit |s#0@@312|)))))))) :qid |UIStateMachinesdfyMapSpec.18:17| :weight 3 :skolemid |4629| :pattern ( (MapSpec.__default.Inv (Lit |s#0@@312|))) ))))
(assert (= (type Tclass.BucketMaps.__default) TyType))
(assert (= (Tag Tclass.BucketMaps.__default) Tagclass.BucketMaps.__default))
(assert (= (TagFamily Tclass.BucketMaps.__default) tytagFamily$_default))
(assert (forall ((bx@@191 T@U) ) (!  (=> (and (= (type bx@@191) BoxType) ($IsBox bx@@191 Tclass.BucketMaps.__default)) (and (= ($Box ($Unbox refType bx@@191)) bx@@191) ($Is ($Unbox refType bx@@191) Tclass.BucketMaps.__default))) :qid |unknown.0:0| :skolemid |4630| :pattern ( ($IsBox bx@@191 Tclass.BucketMaps.__default)) )))
(assert (forall (($o@@60 T@U) ) (!  (=> (= (type $o@@60) refType) (= ($Is $o@@60 Tclass.BucketMaps.__default)  (or (= $o@@60 null) (= (dtype $o@@60) Tclass.BucketMaps.__default)))) :qid |unknown.0:0| :skolemid |4631| :pattern ( ($Is $o@@60 Tclass.BucketMaps.__default)) )))
(assert (forall (($o@@61 T@U) ($h@@170 T@U) ) (!  (=> (and (= (type $o@@61) refType) (= (type $h@@170) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@61 Tclass.BucketMaps.__default $h@@170)  (or (= $o@@61 null) (U_2_bool (MapType1Select (MapType0Select $h@@170 $o@@61) alloc))))) :qid |unknown.0:0| :skolemid |4632| :pattern ( ($IsAlloc $o@@61 Tclass.BucketMaps.__default $h@@170)) )))
(assert (forall ((arg0@@706 T@U) (arg1@@358 T@U) ) (! (= (type (BucketMaps.__default.BucketGet arg0@@706 arg1@@358)) DatatypeTypeType) :qid |funType:BucketMaps.__default.BucketGet| :pattern ( (BucketMaps.__default.BucketGet arg0@@706 arg1@@358)) )))
(assert  (=> true (forall ((|m#0@@150| T@U) (|key#0@@192| T@U) ) (!  (=> (and (and (= (type |m#0@@150|) (MapType BoxType BoxType)) (= (type |key#0@@192|) (SeqType BoxType))) (or (|BucketMaps.__default.BucketGet#canCall| |m#0@@150| |key#0@@192|) (and ($Is |m#0@@150| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |key#0@@192| Tclass.KeyType.Key)))) ($Is (BucketMaps.__default.BucketGet |m#0@@150| |key#0@@192|) Tclass.ValueMessage.Message)) :qid |BucketMapidfy.21:22| :skolemid |4633| :pattern ( (BucketMaps.__default.BucketGet |m#0@@150| |key#0@@192|)) ))))
(assert (forall ((|m#0@@151| T@U) (|key#0@@193| T@U) ) (!  (=> (and (and (= (type |m#0@@151|) (MapType BoxType BoxType)) (= (type |key#0@@193|) (SeqType BoxType))) (and ($Is |m#0@@151| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |key#0@@193| Tclass.KeyType.Key))) (= (|BucketMaps.__default.BucketGet#requires| |m#0@@151| |key#0@@193|) true)) :qid |BucketMapidfy.21:22| :skolemid |4634| :pattern ( (|BucketMaps.__default.BucketGet#requires| |m#0@@151| |key#0@@193|)) )))
(assert  (=> true (forall ((|m#0@@152| T@U) (|key#0@@194| T@U) ) (!  (=> (and (and (= (type |m#0@@152|) (MapType BoxType BoxType)) (= (type |key#0@@194|) (SeqType BoxType))) (or (|BucketMaps.__default.BucketGet#canCall| |m#0@@152| |key#0@@194|) (and ($Is |m#0@@152| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |key#0@@194| Tclass.KeyType.Key)))) (and (=> (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@152|) ($Box |key#0@@194|)))) |ValueMessage.__default.IdentityMessage#canCall|) (= (BucketMaps.__default.BucketGet |m#0@@152| |key#0@@194|) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@152|) ($Box |key#0@@194|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |m#0@@152|) ($Box |key#0@@194|))) ValueMessage.__default.IdentityMessage)))) :qid |BucketMapidfy.21:22| :skolemid |4635| :pattern ( (BucketMaps.__default.BucketGet |m#0@@152| |key#0@@194|)) ))))
(assert  (=> true (forall ((|m#0@@153| T@U) (|key#0@@195| T@U) ) (!  (=> (and (and (= (type |m#0@@153|) (MapType BoxType BoxType)) (= (type |key#0@@195|) (SeqType BoxType))) (or (|BucketMaps.__default.BucketGet#canCall| (Lit |m#0@@153|) (Lit |key#0@@195|)) (and ($Is |m#0@@153| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |key#0@@195| Tclass.KeyType.Key)))) (and (=> (not (U_2_bool (MapType0Select (|Map#Domain| |m#0@@153|) ($Box |key#0@@195|)))) |ValueMessage.__default.IdentityMessage#canCall|) (= (BucketMaps.__default.BucketGet (Lit |m#0@@153|) (Lit |key#0@@195|)) (ite (U_2_bool (MapType0Select (|Map#Domain| |m#0@@153|) ($Box |key#0@@195|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |m#0@@153|)) ($Box (Lit |key#0@@195|)))) ValueMessage.__default.IdentityMessage)))) :qid |BucketMapidfy.21:22| :weight 3 :skolemid |4636| :pattern ( (BucketMaps.__default.BucketGet (Lit |m#0@@153|) (Lit |key#0@@195|))) ))))
(assert (forall ((arg0@@707 T@U) (arg1@@359 T@U) (arg2@@219 T@U) (arg3@@155 Int) ) (! (= (type (BucketMaps.__default.BucketListItemFlush arg0@@707 arg1@@359 arg2@@219 arg3@@155)) (MapType BoxType BoxType)) :qid |funType:BucketMaps.__default.BucketListItemFlush| :pattern ( (BucketMaps.__default.BucketListItemFlush arg0@@707 arg1@@359 arg2@@219 arg3@@155)) )))
(assert  (=> true (forall ((|parent#0| T@U) (|child#0| T@U) (|pivots#0@@26| T@U) (|i#0@@145| Int) ) (!  (=> (and (and (and (= (type |parent#0|) (MapType BoxType BoxType)) (= (type |child#0|) (MapType BoxType BoxType))) (= (type |pivots#0@@26|) (SeqType BoxType))) (or (|BucketMaps.__default.BucketListItemFlush#canCall| |parent#0| |child#0| |pivots#0@@26| |i#0@@145|) (and (and (and ($Is |parent#0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |child#0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) ($Is |pivots#0@@26| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (BoundedPivotsLib.__default.WFPivots |pivots#0@@26|)))) ($Is (BucketMaps.__default.BucketListItemFlush |parent#0| |child#0| |pivots#0@@26| |i#0@@145|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) :qid |BucketMapidfy.28:32| :skolemid |4637| :pattern ( (BucketMaps.__default.BucketListItemFlush |parent#0| |child#0| |pivots#0@@26| |i#0@@145|)) ))))
(assert (forall ((|parent#0@@0| T@U) (|child#0@@0| T@U) (|pivots#0@@27| T@U) (|i#0@@146| Int) ) (!  (=> (and (and (and (= (type |parent#0@@0|) (MapType BoxType BoxType)) (= (type |child#0@@0|) (MapType BoxType BoxType))) (= (type |pivots#0@@27|) (SeqType BoxType))) (and (and ($Is |parent#0@@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |child#0@@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) ($Is |pivots#0@@27| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (= (|BucketMaps.__default.BucketListItemFlush#requires| |parent#0@@0| |child#0@@0| |pivots#0@@27| |i#0@@146|) (BoundedPivotsLib.__default.WFPivots |pivots#0@@27|))) :qid |BucketMapidfy.28:32| :skolemid |4638| :pattern ( (|BucketMaps.__default.BucketListItemFlush#requires| |parent#0@@0| |child#0@@0| |pivots#0@@27| |i#0@@146|)) )))
(assert  (and (forall ((arg0@@708 T@U) (arg1@@360 T@U) (arg2@@220 T@U) (arg3@@156 T@U) (arg4@@115 Int) (arg5@@76 T@U) (arg6@@56 T@U) (arg7@@40 T@U) ) (! (= (type (|lambda#244| arg0@@708 arg1@@360 arg2@@220 arg3@@156 arg4@@115 arg5@@76 arg6@@56 arg7@@40)) (MapType0Type BoxType boolType)) :qid |funType:lambda#244| :pattern ( (|lambda#244| arg0@@708 arg1@@360 arg2@@220 arg3@@156 arg4@@115 arg5@@76 arg6@@56 arg7@@40)) )) (forall ((arg0@@709 T@U) (arg1@@361 T@U) ) (! (= (type (|lambda#245| arg0@@709 arg1@@361)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#245| :pattern ( (|lambda#245| arg0@@709 arg1@@361)) ))))
(assert  (=> true (forall ((|parent#0@@1| T@U) (|child#0@@1| T@U) (|pivots#0@@28| T@U) (|i#0@@147| Int) ) (!  (=> (and (and (and (= (type |parent#0@@1|) (MapType BoxType BoxType)) (= (type |child#0@@1|) (MapType BoxType BoxType))) (= (type |pivots#0@@28|) (SeqType BoxType))) (or (|BucketMaps.__default.BucketListItemFlush#canCall| |parent#0@@1| |child#0@@1| |pivots#0@@28| |i#0@@147|) (and (and (and ($Is |parent#0@@1| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |child#0@@1| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) ($Is |pivots#0@@28| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (BoundedPivotsLib.__default.WFPivots |pivots#0@@28|)))) (and (forall ((|key#0@@196| T@U) ) (!  (=> (and (= (type |key#0@@196|) (SeqType BoxType)) ($Is |key#0@@196| Tclass.KeyType.Key)) (and (=> (U_2_bool (MapType0Select (|Set#Union| (|Map#Domain| |child#0@@1|) (|Map#Domain| |parent#0@@1|)) ($Box |key#0@@196|))) (and (|BoundedPivotsLib.__default.BoundedKey#canCall| |pivots#0@@28| |key#0@@196|) (=> (BoundedPivotsLib.__default.BoundedKey |pivots#0@@28| |key#0@@196|) (and (|BoundedPivotsLib.__default.Route#canCall| |pivots#0@@28| |key#0@@196|) (=> (= (BoundedPivotsLib.__default.Route |pivots#0@@28| |key#0@@196|) |i#0@@147|) (and (and (|$IsA#ValueMessage.Message| (ValueMessage.__default.Merge (BucketMaps.__default.BucketGet |parent#0@@1| |key#0@@196|) (BucketMaps.__default.BucketGet |child#0@@1| |key#0@@196|))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) (and (and (and (|BucketMaps.__default.BucketGet#canCall| |parent#0@@1| |key#0@@196|) (|BucketMaps.__default.BucketGet#canCall| |child#0@@1| |key#0@@196|)) (|ValueMessage.__default.Merge#canCall| (BucketMaps.__default.BucketGet |parent#0@@1| |key#0@@196|) (BucketMaps.__default.BucketGet |child#0@@1| |key#0@@196|))) |ValueMessage.__default.IdentityMessage#canCall|))))))) (=> (and (and (and (U_2_bool (MapType0Select (|Set#Union| (|Map#Domain| |child#0@@1|) (|Map#Domain| |parent#0@@1|)) ($Box |key#0@@196|))) (BoundedPivotsLib.__default.BoundedKey |pivots#0@@28| |key#0@@196|)) (= (BoundedPivotsLib.__default.Route |pivots#0@@28| |key#0@@196|) |i#0@@147|)) (not (|ValueMessage.Message#Equal| (ValueMessage.__default.Merge (BucketMaps.__default.BucketGet |parent#0@@1| |key#0@@196|) (BucketMaps.__default.BucketGet |child#0@@1| |key#0@@196|)) ValueMessage.__default.IdentityMessage))) (and (and (|BucketMaps.__default.BucketGet#canCall| |parent#0@@1| |key#0@@196|) (|BucketMaps.__default.BucketGet#canCall| |child#0@@1| |key#0@@196|)) (|ValueMessage.__default.Merge#canCall| (BucketMaps.__default.BucketGet |parent#0@@1| |key#0@@196|) (BucketMaps.__default.BucketGet |child#0@@1| |key#0@@196|)))))) :qid |BucketMapidfy.31:9| :skolemid |4639| :pattern ( (BucketMaps.__default.BucketGet |child#0@@1| |key#0@@196|)) :pattern ( (BucketMaps.__default.BucketGet |parent#0@@1| |key#0@@196|)) :pattern ( (BoundedPivotsLib.__default.Route |pivots#0@@28| |key#0@@196|)) :pattern ( (BoundedPivotsLib.__default.BoundedKey |pivots#0@@28| |key#0@@196|)) :pattern ( (MapType0Select (|Set#Union| (|Map#Domain| |child#0@@1|) (|Map#Domain| |parent#0@@1|)) ($Box |key#0@@196|))) )) (= (BucketMaps.__default.BucketListItemFlush |parent#0@@1| |child#0@@1| |pivots#0@@28| |i#0@@147|) (|Map#Glue| (|lambda#244| Tclass.KeyType.Key (|Set#Union| (|Map#Domain| |child#0@@1|) (|Map#Domain| |parent#0@@1|)) |pivots#0@@28| |pivots#0@@28| |i#0@@147| |parent#0@@1| |child#0@@1| ValueMessage.__default.IdentityMessage) (|lambda#245| |parent#0@@1| |child#0@@1|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) :qid |BucketMapidfy.28:32| :skolemid |4640| :pattern ( (BucketMaps.__default.BucketListItemFlush |parent#0@@1| |child#0@@1| |pivots#0@@28| |i#0@@147|)) ))))
(assert  (=> true (forall ((|parent#0@@2| T@U) (|child#0@@2| T@U) (|pivots#0@@29| T@U) (|i#0@@148| Int) ) (!  (=> (and (and (and (= (type |parent#0@@2|) (MapType BoxType BoxType)) (= (type |child#0@@2|) (MapType BoxType BoxType))) (= (type |pivots#0@@29|) (SeqType BoxType))) (or (|BucketMaps.__default.BucketListItemFlush#canCall| (Lit |parent#0@@2|) (Lit |child#0@@2|) (Lit |pivots#0@@29|) (LitInt |i#0@@148|)) (and (and (and ($Is |parent#0@@2| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |child#0@@2| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) ($Is |pivots#0@@29| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.WFPivots (Lit |pivots#0@@29|)))))))) (and (forall ((|key#0@@197| T@U) ) (!  (=> (and (= (type |key#0@@197|) (SeqType BoxType)) ($Is |key#0@@197| Tclass.KeyType.Key)) (and (=> (U_2_bool (MapType0Select (|Set#Union| (|Map#Domain| (Lit |child#0@@2|)) (|Map#Domain| (Lit |parent#0@@2|))) ($Box |key#0@@197|))) (and (|BoundedPivotsLib.__default.BoundedKey#canCall| (Lit |pivots#0@@29|) |key#0@@197|) (=> (BoundedPivotsLib.__default.BoundedKey (Lit |pivots#0@@29|) |key#0@@197|) (and (|BoundedPivotsLib.__default.Route#canCall| (Lit |pivots#0@@29|) |key#0@@197|) (=> (= (BoundedPivotsLib.__default.Route (Lit |pivots#0@@29|) |key#0@@197|) (LitInt |i#0@@148|)) (and (and (|$IsA#ValueMessage.Message| (ValueMessage.__default.Merge (BucketMaps.__default.BucketGet (Lit |parent#0@@2|) |key#0@@197|) (BucketMaps.__default.BucketGet (Lit |child#0@@2|) |key#0@@197|))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) (and (and (and (|BucketMaps.__default.BucketGet#canCall| (Lit |parent#0@@2|) |key#0@@197|) (|BucketMaps.__default.BucketGet#canCall| (Lit |child#0@@2|) |key#0@@197|)) (|ValueMessage.__default.Merge#canCall| (BucketMaps.__default.BucketGet (Lit |parent#0@@2|) |key#0@@197|) (BucketMaps.__default.BucketGet (Lit |child#0@@2|) |key#0@@197|))) |ValueMessage.__default.IdentityMessage#canCall|))))))) (=> (and (and (and (U_2_bool (MapType0Select (|Set#Union| (|Map#Domain| (Lit |child#0@@2|)) (|Map#Domain| (Lit |parent#0@@2|))) ($Box |key#0@@197|))) (BoundedPivotsLib.__default.BoundedKey (Lit |pivots#0@@29|) |key#0@@197|)) (= (BoundedPivotsLib.__default.Route (Lit |pivots#0@@29|) |key#0@@197|) (LitInt |i#0@@148|))) (not (|ValueMessage.Message#Equal| (ValueMessage.__default.Merge (BucketMaps.__default.BucketGet (Lit |parent#0@@2|) |key#0@@197|) (BucketMaps.__default.BucketGet (Lit |child#0@@2|) |key#0@@197|)) ValueMessage.__default.IdentityMessage))) (and (and (|BucketMaps.__default.BucketGet#canCall| (Lit |parent#0@@2|) |key#0@@197|) (|BucketMaps.__default.BucketGet#canCall| (Lit |child#0@@2|) |key#0@@197|)) (|ValueMessage.__default.Merge#canCall| (BucketMaps.__default.BucketGet (Lit |parent#0@@2|) |key#0@@197|) (BucketMaps.__default.BucketGet (Lit |child#0@@2|) |key#0@@197|)))))) :qid |BucketMapidfy.31:9| :skolemid |4641| :pattern ( (BucketMaps.__default.BucketGet |child#0@@2| |key#0@@197|)) :pattern ( (BucketMaps.__default.BucketGet |parent#0@@2| |key#0@@197|)) :pattern ( (BoundedPivotsLib.__default.Route |pivots#0@@29| |key#0@@197|)) :pattern ( (BoundedPivotsLib.__default.BoundedKey |pivots#0@@29| |key#0@@197|)) :pattern ( (MapType0Select (|Set#Union| (|Map#Domain| |child#0@@2|) (|Map#Domain| |parent#0@@2|)) ($Box |key#0@@197|))) )) (= (BucketMaps.__default.BucketListItemFlush (Lit |parent#0@@2|) (Lit |child#0@@2|) (Lit |pivots#0@@29|) (LitInt |i#0@@148|)) (|Map#Glue| (|lambda#244| Tclass.KeyType.Key (|Set#Union| (|Map#Domain| (Lit |child#0@@2|)) (|Map#Domain| (Lit |parent#0@@2|))) (Lit |pivots#0@@29|) (Lit |pivots#0@@29|) (LitInt |i#0@@148|) (Lit |parent#0@@2|) (Lit |child#0@@2|) ValueMessage.__default.IdentityMessage) (|lambda#245| (Lit |parent#0@@2|) (Lit |child#0@@2|)) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) :qid |BucketMapidfy.28:32| :weight 3 :skolemid |4642| :pattern ( (BucketMaps.__default.BucketListItemFlush (Lit |parent#0@@2|) (Lit |child#0@@2|) (Lit |pivots#0@@29|) (LitInt |i#0@@148|))) ))))
(assert (forall ((arg0@@710 T@U) (arg1@@362 T@U) (arg2@@221 T@U) (arg3@@157 T@U) (arg4@@116 Int) ) (! (= (type (BucketMaps.__default.BucketListFlushPartial arg0@@710 arg1@@362 arg2@@221 arg3@@157 arg4@@116)) (SeqType BoxType)) :qid |funType:BucketMaps.__default.BucketListFlushPartial| :pattern ( (BucketMaps.__default.BucketListFlushPartial arg0@@710 arg1@@362 arg2@@221 arg3@@157 arg4@@116)) )))
(assert (forall (($ly@@670 T@U) (|parent#0@@3| T@U) (|children#0| T@U) (|pivots#0@@30| T@U) (|i#0@@149| Int) ) (!  (=> (and (and (and (= (type $ly@@670) LayerTypeType) (= (type |parent#0@@3|) (MapType BoxType BoxType))) (= (type |children#0|) (SeqType BoxType))) (= (type |pivots#0@@30|) (SeqType BoxType))) (= (BucketMaps.__default.BucketListFlushPartial ($LS $ly@@670) |parent#0@@3| |children#0| |pivots#0@@30| |i#0@@149|) (BucketMaps.__default.BucketListFlushPartial $ly@@670 |parent#0@@3| |children#0| |pivots#0@@30| |i#0@@149|))) :qid |BucketMapidfy.39:12| :skolemid |4643| :pattern ( (BucketMaps.__default.BucketListFlushPartial ($LS $ly@@670) |parent#0@@3| |children#0| |pivots#0@@30| |i#0@@149|)) )))
(assert (forall (($ly@@671 T@U) (|parent#0@@4| T@U) (|children#0@@0| T@U) (|pivots#0@@31| T@U) (|i#0@@150| Int) ) (!  (=> (and (and (and (= (type $ly@@671) LayerTypeType) (= (type |parent#0@@4|) (MapType BoxType BoxType))) (= (type |children#0@@0|) (SeqType BoxType))) (= (type |pivots#0@@31|) (SeqType BoxType))) (= (BucketMaps.__default.BucketListFlushPartial $ly@@671 |parent#0@@4| |children#0@@0| |pivots#0@@31| |i#0@@150|) (BucketMaps.__default.BucketListFlushPartial $LZ |parent#0@@4| |children#0@@0| |pivots#0@@31| |i#0@@150|))) :qid |BucketMapidfy.39:12| :skolemid |4644| :pattern ( (BucketMaps.__default.BucketListFlushPartial (AsFuelBottom $ly@@671) |parent#0@@4| |children#0@@0| |pivots#0@@31| |i#0@@150|)) )))
(assert  (=> true (forall (($ly@@672 T@U) (|parent#0@@5| T@U) (|children#0@@1| T@U) (|pivots#0@@32| T@U) (|i#0@@151| Int) ) (!  (=> (and (and (and (and (= (type $ly@@672) LayerTypeType) (= (type |parent#0@@5|) (MapType BoxType BoxType))) (= (type |children#0@@1|) (SeqType BoxType))) (= (type |pivots#0@@32|) (SeqType BoxType))) (or (|BucketMaps.__default.BucketListFlushPartial#canCall| |parent#0@@5| |children#0@@1| |pivots#0@@32| |i#0@@151|) (and (and (and ($Is |parent#0@@5| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |children#0@@1| (TSeq (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) ($Is |pivots#0@@32| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (and (BoundedPivotsLib.__default.WFPivots |pivots#0@@32|) (and (<= (LitInt 0) |i#0@@151|) (<= |i#0@@151| (|Seq#Length| |children#0@@1|))))))) (and (and (= (|Seq#Length| (BucketMaps.__default.BucketListFlushPartial $ly@@672 |parent#0@@5| |children#0@@1| |pivots#0@@32| |i#0@@151|)) |i#0@@151|) (forall ((|h#0@@1| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |h#0@@1|) (< |h#0@@1| |i#0@@151|)) (|Map#Equal| ($Unbox (MapType BoxType BoxType) (|Seq#Index| (BucketMaps.__default.BucketListFlushPartial $ly@@672 |parent#0@@5| |children#0@@1| |pivots#0@@32| |i#0@@151|) |h#0@@1|)) (BucketMaps.__default.BucketListItemFlush |parent#0@@5| ($Unbox (MapType BoxType BoxType) (|Seq#Index| |children#0@@1| |h#0@@1|)) |pivots#0@@32| |h#0@@1|)))) :qid |BucketMapidfy.43:18| :skolemid |4645| :pattern ( ($Unbox (MapType BoxType BoxType) (|Seq#Index| |children#0@@1| |h#0@@1|))) :pattern ( ($Unbox (MapType BoxType BoxType) (|Seq#Index| (BucketMaps.__default.BucketListFlushPartial $ly@@672 |parent#0@@5| |children#0@@1| |pivots#0@@32| |i#0@@151|) |h#0@@1|))) ))) ($Is (BucketMaps.__default.BucketListFlushPartial $ly@@672 |parent#0@@5| |children#0@@1| |pivots#0@@32| |i#0@@151|) (TSeq (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) :qid |BucketMapidfy.39:12| :skolemid |4646| :pattern ( (BucketMaps.__default.BucketListFlushPartial $ly@@672 |parent#0@@5| |children#0@@1| |pivots#0@@32| |i#0@@151|)) ))))
(assert (forall (($ly@@673 T@U) (|parent#0@@6| T@U) (|children#0@@2| T@U) (|pivots#0@@33| T@U) (|i#0@@152| Int) ) (!  (=> (and (and (and (and (= (type $ly@@673) LayerTypeType) (= (type |parent#0@@6|) (MapType BoxType BoxType))) (= (type |children#0@@2|) (SeqType BoxType))) (= (type |pivots#0@@33|) (SeqType BoxType))) (and (and ($Is |parent#0@@6| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |children#0@@2| (TSeq (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) ($Is |pivots#0@@33| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (= (|BucketMaps.__default.BucketListFlushPartial#requires| $ly@@673 |parent#0@@6| |children#0@@2| |pivots#0@@33| |i#0@@152|)  (and (BoundedPivotsLib.__default.WFPivots |pivots#0@@33|) (and (<= (LitInt 0) |i#0@@152|) (<= |i#0@@152| (|Seq#Length| |children#0@@2|)))))) :qid |BucketMapidfy.39:12| :skolemid |4647| :pattern ( (|BucketMaps.__default.BucketListFlushPartial#requires| $ly@@673 |parent#0@@6| |children#0@@2| |pivots#0@@33| |i#0@@152|)) )))
(assert  (=> true (forall (($ly@@674 T@U) (|parent#0@@7| T@U) (|children#0@@3| T@U) (|pivots#0@@34| T@U) (|i#0@@153| Int) ) (!  (=> (and (and (and (and (= (type $ly@@674) LayerTypeType) (= (type |parent#0@@7|) (MapType BoxType BoxType))) (= (type |children#0@@3|) (SeqType BoxType))) (= (type |pivots#0@@34|) (SeqType BoxType))) (or (|BucketMaps.__default.BucketListFlushPartial#canCall| |parent#0@@7| |children#0@@3| |pivots#0@@34| |i#0@@153|) (and (and (and ($Is |parent#0@@7| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |children#0@@3| (TSeq (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) ($Is |pivots#0@@34| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (and (BoundedPivotsLib.__default.WFPivots |pivots#0@@34|) (and (<= (LitInt 0) |i#0@@153|) (<= |i#0@@153| (|Seq#Length| |children#0@@3|))))))) (and (=> (not (= |i#0@@153| (LitInt 0))) (and (|BucketMaps.__default.BucketListFlushPartial#canCall| |parent#0@@7| |children#0@@3| |pivots#0@@34| (- |i#0@@153| 1)) (|BucketMaps.__default.BucketListItemFlush#canCall| |parent#0@@7| ($Unbox (MapType BoxType BoxType) (|Seq#Index| |children#0@@3| (- |i#0@@153| 1))) |pivots#0@@34| (- |i#0@@153| 1)))) (= (BucketMaps.__default.BucketListFlushPartial ($LS $ly@@674) |parent#0@@7| |children#0@@3| |pivots#0@@34| |i#0@@153|) (ite (= |i#0@@153| (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (BucketMaps.__default.BucketListFlushPartial $ly@@674 |parent#0@@7| |children#0@@3| |pivots#0@@34| (- |i#0@@153| 1)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketMaps.__default.BucketListItemFlush |parent#0@@7| ($Unbox (MapType BoxType BoxType) (|Seq#Index| |children#0@@3| (- |i#0@@153| 1))) |pivots#0@@34| (- |i#0@@153| 1))))))))) :qid |BucketMapidfy.39:12| :skolemid |4648| :pattern ( (BucketMaps.__default.BucketListFlushPartial ($LS $ly@@674) |parent#0@@7| |children#0@@3| |pivots#0@@34| |i#0@@153|)) ))))
(assert  (=> true (forall (($ly@@675 T@U) (|parent#0@@8| T@U) (|children#0@@4| T@U) (|pivots#0@@35| T@U) (|i#0@@154| Int) ) (!  (=> (and (and (and (and (= (type $ly@@675) LayerTypeType) (= (type |parent#0@@8|) (MapType BoxType BoxType))) (= (type |children#0@@4|) (SeqType BoxType))) (= (type |pivots#0@@35|) (SeqType BoxType))) (or (|BucketMaps.__default.BucketListFlushPartial#canCall| (Lit |parent#0@@8|) (Lit |children#0@@4|) (Lit |pivots#0@@35|) (LitInt |i#0@@154|)) (and (and (and ($Is |parent#0@@8| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |children#0@@4| (TSeq (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) ($Is |pivots#0@@35| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (and (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.WFPivots (Lit |pivots#0@@35|))))) (and (<= (LitInt 0) (LitInt |i#0@@154|)) (<= (LitInt |i#0@@154|) (|Seq#Length| (Lit |children#0@@4|)))))))) (and (=> (not (= (LitInt |i#0@@154|) (LitInt 0))) (and (|BucketMaps.__default.BucketListFlushPartial#canCall| (Lit |parent#0@@8|) (Lit |children#0@@4|) (Lit |pivots#0@@35|) (LitInt (- |i#0@@154| 1))) (|BucketMaps.__default.BucketListItemFlush#canCall| (Lit |parent#0@@8|) ($Unbox (MapType BoxType BoxType) (|Seq#Index| (Lit |children#0@@4|) (LitInt (- |i#0@@154| 1)))) (Lit |pivots#0@@35|) (LitInt (- |i#0@@154| 1))))) (= (BucketMaps.__default.BucketListFlushPartial ($LS $ly@@675) (Lit |parent#0@@8|) (Lit |children#0@@4|) (Lit |pivots#0@@35|) (LitInt |i#0@@154|)) (ite (= (LitInt |i#0@@154|) (LitInt 0)) (|Seq#Empty| BoxType) (|Seq#Append| (BucketMaps.__default.BucketListFlushPartial ($LS $ly@@675) (Lit |parent#0@@8|) (Lit |children#0@@4|) (Lit |pivots#0@@35|) (LitInt (- |i#0@@154| 1))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketMaps.__default.BucketListItemFlush (Lit |parent#0@@8|) ($Unbox (MapType BoxType BoxType) (|Seq#Index| (Lit |children#0@@4|) (LitInt (- |i#0@@154| 1)))) (Lit |pivots#0@@35|) (LitInt (- |i#0@@154| 1)))))))))) :qid |BucketMapidfy.39:12| :weight 3 :skolemid |4649| :pattern ( (BucketMaps.__default.BucketListFlushPartial ($LS $ly@@675) (Lit |parent#0@@8|) (Lit |children#0@@4|) (Lit |pivots#0@@35|) (LitInt |i#0@@154|))) ))))
(assert (forall ((arg0@@711 T@U) (arg1@@363 T@U) (arg2@@222 T@U) ) (! (= (type (BucketMaps.__default.BucketListFlush arg0@@711 arg1@@363 arg2@@222)) (SeqType BoxType)) :qid |funType:BucketMaps.__default.BucketListFlush| :pattern ( (BucketMaps.__default.BucketListFlush arg0@@711 arg1@@363 arg2@@222)) )))
(assert  (=> true (forall ((|parent#0@@9| T@U) (|children#0@@5| T@U) (|pivots#0@@36| T@U) ) (!  (=> (and (and (and (= (type |parent#0@@9|) (MapType BoxType BoxType)) (= (type |children#0@@5|) (SeqType BoxType))) (= (type |pivots#0@@36|) (SeqType BoxType))) (or (|BucketMaps.__default.BucketListFlush#canCall| |parent#0@@9| |children#0@@5| |pivots#0@@36|) (and (and (and ($Is |parent#0@@9| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |children#0@@5| (TSeq (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) ($Is |pivots#0@@36| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (BoundedPivotsLib.__default.WFPivots |pivots#0@@36|)))) (and (and (= (|Seq#Length| (BucketMaps.__default.BucketListFlush |parent#0@@9| |children#0@@5| |pivots#0@@36|)) (|Seq#Length| |children#0@@5|)) (forall ((|h#0@@2| Int) ) (!  (=> true (=> (and (<= (LitInt 0) |h#0@@2|) (< |h#0@@2| (|Seq#Length| (BucketMaps.__default.BucketListFlush |parent#0@@9| |children#0@@5| |pivots#0@@36|)))) (|Map#Equal| ($Unbox (MapType BoxType BoxType) (|Seq#Index| (BucketMaps.__default.BucketListFlush |parent#0@@9| |children#0@@5| |pivots#0@@36|) |h#0@@2|)) (BucketMaps.__default.BucketListItemFlush |parent#0@@9| ($Unbox (MapType BoxType BoxType) (|Seq#Index| |children#0@@5| |h#0@@2|)) |pivots#0@@36| |h#0@@2|)))) :qid |BucketMapidfy.53:18| :skolemid |4650| :pattern ( ($Unbox (MapType BoxType BoxType) (|Seq#Index| |children#0@@5| |h#0@@2|))) :pattern ( ($Unbox (MapType BoxType BoxType) (|Seq#Index| (BucketMaps.__default.BucketListFlush |parent#0@@9| |children#0@@5| |pivots#0@@36|) |h#0@@2|))) ))) ($Is (BucketMaps.__default.BucketListFlush |parent#0@@9| |children#0@@5| |pivots#0@@36|) (TSeq (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) :qid |BucketMapidfy.50:28| :skolemid |4651| :pattern ( (BucketMaps.__default.BucketListFlush |parent#0@@9| |children#0@@5| |pivots#0@@36|)) ))))
(assert (forall ((|parent#0@@10| T@U) (|children#0@@6| T@U) (|pivots#0@@37| T@U) ) (!  (=> (and (and (and (= (type |parent#0@@10|) (MapType BoxType BoxType)) (= (type |children#0@@6|) (SeqType BoxType))) (= (type |pivots#0@@37|) (SeqType BoxType))) (and (and ($Is |parent#0@@10| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |children#0@@6| (TSeq (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) ($Is |pivots#0@@37| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (= (|BucketMaps.__default.BucketListFlush#requires| |parent#0@@10| |children#0@@6| |pivots#0@@37|) (BoundedPivotsLib.__default.WFPivots |pivots#0@@37|))) :qid |BucketMapidfy.50:28| :skolemid |4652| :pattern ( (|BucketMaps.__default.BucketListFlush#requires| |parent#0@@10| |children#0@@6| |pivots#0@@37|)) )))
(assert  (=> true (forall ((|parent#0@@11| T@U) (|children#0@@7| T@U) (|pivots#0@@38| T@U) ) (!  (=> (and (and (and (= (type |parent#0@@11|) (MapType BoxType BoxType)) (= (type |children#0@@7|) (SeqType BoxType))) (= (type |pivots#0@@38|) (SeqType BoxType))) (or (|BucketMaps.__default.BucketListFlush#canCall| |parent#0@@11| |children#0@@7| |pivots#0@@38|) (and (and (and ($Is |parent#0@@11| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |children#0@@7| (TSeq (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) ($Is |pivots#0@@38| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (BoundedPivotsLib.__default.WFPivots |pivots#0@@38|)))) (and (|BucketMaps.__default.BucketListFlushPartial#canCall| |parent#0@@11| |children#0@@7| |pivots#0@@38| (|Seq#Length| |children#0@@7|)) (= (BucketMaps.__default.BucketListFlush |parent#0@@11| |children#0@@7| |pivots#0@@38|) (BucketMaps.__default.BucketListFlushPartial ($LS $LZ) |parent#0@@11| |children#0@@7| |pivots#0@@38| (|Seq#Length| |children#0@@7|))))) :qid |BucketMapidfy.50:28| :skolemid |4653| :pattern ( (BucketMaps.__default.BucketListFlush |parent#0@@11| |children#0@@7| |pivots#0@@38|)) ))))
(assert  (=> true (forall ((|parent#0@@12| T@U) (|children#0@@8| T@U) (|pivots#0@@39| T@U) ) (!  (=> (and (and (and (= (type |parent#0@@12|) (MapType BoxType BoxType)) (= (type |children#0@@8|) (SeqType BoxType))) (= (type |pivots#0@@39|) (SeqType BoxType))) (or (|BucketMaps.__default.BucketListFlush#canCall| (Lit |parent#0@@12|) (Lit |children#0@@8|) (Lit |pivots#0@@39|)) (and (and (and ($Is |parent#0@@12| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |children#0@@8| (TSeq (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) ($Is |pivots#0@@39| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.WFPivots (Lit |pivots#0@@39|)))))))) (and (|BucketMaps.__default.BucketListFlushPartial#canCall| (Lit |parent#0@@12|) (Lit |children#0@@8|) (Lit |pivots#0@@39|) (|Seq#Length| (Lit |children#0@@8|))) (= (BucketMaps.__default.BucketListFlush (Lit |parent#0@@12|) (Lit |children#0@@8|) (Lit |pivots#0@@39|)) (BucketMaps.__default.BucketListFlushPartial ($LS $LZ) (Lit |parent#0@@12|) (Lit |children#0@@8|) (Lit |pivots#0@@39|) (|Seq#Length| (Lit |children#0@@8|)))))) :qid |BucketMapidfy.50:28| :weight 3 :skolemid |4654| :pattern ( (BucketMaps.__default.BucketListFlush (Lit |parent#0@@12|) (Lit |children#0@@8|) (Lit |pivots#0@@39|))) ))))
(assert (forall ((arg0@@712 T@U) (arg1@@364 T@U) (arg2@@223 T@U) ) (! (= (type (BucketMaps.__default.BucketIntersect arg0@@712 arg1@@364 arg2@@223)) (MapType BoxType BoxType)) :qid |funType:BucketMaps.__default.BucketIntersect| :pattern ( (BucketMaps.__default.BucketIntersect arg0@@712 arg1@@364 arg2@@223)) )))
(assert (forall (($ly@@676 T@U) (|bucket#0| T@U) (|keys#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@676) LayerTypeType) (= (type |bucket#0|) (MapType BoxType BoxType))) (= (type |keys#0@@7|) (MapType0Type BoxType boolType))) (= (BucketMaps.__default.BucketIntersect ($LS $ly@@676) |bucket#0| |keys#0@@7|) (BucketMaps.__default.BucketIntersect $ly@@676 |bucket#0| |keys#0@@7|))) :qid |BucketMapidfy.58:22| :skolemid |4655| :pattern ( (BucketMaps.__default.BucketIntersect ($LS $ly@@676) |bucket#0| |keys#0@@7|)) )))
(assert (forall (($ly@@677 T@U) (|bucket#0@@0| T@U) (|keys#0@@8| T@U) ) (!  (=> (and (and (= (type $ly@@677) LayerTypeType) (= (type |bucket#0@@0|) (MapType BoxType BoxType))) (= (type |keys#0@@8|) (MapType0Type BoxType boolType))) (= (BucketMaps.__default.BucketIntersect $ly@@677 |bucket#0@@0| |keys#0@@8|) (BucketMaps.__default.BucketIntersect $LZ |bucket#0@@0| |keys#0@@8|))) :qid |BucketMapidfy.58:22| :skolemid |4656| :pattern ( (BucketMaps.__default.BucketIntersect (AsFuelBottom $ly@@677) |bucket#0@@0| |keys#0@@8|)) )))
(assert  (=> true (forall (($ly@@678 T@U) (|bucket#0@@1| T@U) (|keys#0@@9| T@U) ) (!  (=> (and (and (and (= (type $ly@@678) LayerTypeType) (= (type |bucket#0@@1|) (MapType BoxType BoxType))) (= (type |keys#0@@9|) (MapType0Type BoxType boolType))) (or (|BucketMaps.__default.BucketIntersect#canCall| |bucket#0@@1| |keys#0@@9|) (and ($Is |bucket#0@@1| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |keys#0@@9| (TSet Tclass.KeyType.Key))))) ($Is (BucketMaps.__default.BucketIntersect $ly@@678 |bucket#0@@1| |keys#0@@9|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) :qid |BucketMapidfy.58:22| :skolemid |4657| :pattern ( (BucketMaps.__default.BucketIntersect $ly@@678 |bucket#0@@1| |keys#0@@9|)) ))))
(assert (forall (($ly@@679 T@U) (|bucket#0@@2| T@U) (|keys#0@@10| T@U) ) (!  (=> (and (and (and (= (type $ly@@679) LayerTypeType) (= (type |bucket#0@@2|) (MapType BoxType BoxType))) (= (type |keys#0@@10|) (MapType0Type BoxType boolType))) (and ($Is |bucket#0@@2| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |keys#0@@10| (TSet Tclass.KeyType.Key)))) (= (|BucketMaps.__default.BucketIntersect#requires| $ly@@679 |bucket#0@@2| |keys#0@@10|) true)) :qid |BucketMapidfy.58:22| :skolemid |4658| :pattern ( (|BucketMaps.__default.BucketIntersect#requires| $ly@@679 |bucket#0@@2| |keys#0@@10|)) )))
(assert  (=> true (forall (($ly@@680 T@U) (|bucket#0@@3| T@U) (|keys#0@@11| T@U) ) (!  (=> (and (and (and (= (type $ly@@680) LayerTypeType) (= (type |bucket#0@@3|) (MapType BoxType BoxType))) (= (type |keys#0@@11|) (MapType0Type BoxType boolType))) (or (|BucketMaps.__default.BucketIntersect#canCall| |bucket#0@@3| |keys#0@@11|) (and ($Is |bucket#0@@3| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |keys#0@@11| (TSet Tclass.KeyType.Key))))) (= (BucketMaps.__default.BucketIntersect ($LS $ly@@680) |bucket#0@@3| |keys#0@@11|) (|Map#Glue| (|lambda#10| Tclass.KeyType.Key (|Map#Domain| |bucket#0@@3|) |keys#0@@11|) (|lambda#11| (|Map#Elements| |bucket#0@@3|)) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) :qid |BucketMapidfy.58:22| :skolemid |4659| :pattern ( (BucketMaps.__default.BucketIntersect ($LS $ly@@680) |bucket#0@@3| |keys#0@@11|)) ))))
(assert  (=> true (forall (($ly@@681 T@U) (|bucket#0@@4| T@U) (|keys#0@@12| T@U) ) (!  (=> (and (and (and (= (type $ly@@681) LayerTypeType) (= (type |bucket#0@@4|) (MapType BoxType BoxType))) (= (type |keys#0@@12|) (MapType0Type BoxType boolType))) (or (|BucketMaps.__default.BucketIntersect#canCall| (Lit |bucket#0@@4|) (Lit |keys#0@@12|)) (and ($Is |bucket#0@@4| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |keys#0@@12| (TSet Tclass.KeyType.Key))))) (= (BucketMaps.__default.BucketIntersect ($LS $ly@@681) (Lit |bucket#0@@4|) (Lit |keys#0@@12|)) (|Map#Glue| (|lambda#10| Tclass.KeyType.Key (|Map#Domain| |bucket#0@@4|) (Lit |keys#0@@12|)) (|lambda#11| (|Map#Elements| (Lit |bucket#0@@4|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) :qid |BucketMapidfy.58:22| :weight 3 :skolemid |4660| :pattern ( (BucketMaps.__default.BucketIntersect ($LS $ly@@681) (Lit |bucket#0@@4|) (Lit |keys#0@@12|))) ))))
(assert (forall ((arg0@@713 T@U) (arg1@@365 T@U) (arg2@@224 T@U) ) (! (= (type (BucketMaps.__default.BucketComplement arg0@@713 arg1@@365 arg2@@224)) (MapType BoxType BoxType)) :qid |funType:BucketMaps.__default.BucketComplement| :pattern ( (BucketMaps.__default.BucketComplement arg0@@713 arg1@@365 arg2@@224)) )))
(assert (forall (($ly@@682 T@U) (|bucket#0@@5| T@U) (|keys#0@@13| T@U) ) (!  (=> (and (and (= (type $ly@@682) LayerTypeType) (= (type |bucket#0@@5|) (MapType BoxType BoxType))) (= (type |keys#0@@13|) (MapType0Type BoxType boolType))) (= (BucketMaps.__default.BucketComplement ($LS $ly@@682) |bucket#0@@5| |keys#0@@13|) (BucketMaps.__default.BucketComplement $ly@@682 |bucket#0@@5| |keys#0@@13|))) :qid |BucketMapidfy.63:22| :skolemid |4661| :pattern ( (BucketMaps.__default.BucketComplement ($LS $ly@@682) |bucket#0@@5| |keys#0@@13|)) )))
(assert (forall (($ly@@683 T@U) (|bucket#0@@6| T@U) (|keys#0@@14| T@U) ) (!  (=> (and (and (= (type $ly@@683) LayerTypeType) (= (type |bucket#0@@6|) (MapType BoxType BoxType))) (= (type |keys#0@@14|) (MapType0Type BoxType boolType))) (= (BucketMaps.__default.BucketComplement $ly@@683 |bucket#0@@6| |keys#0@@14|) (BucketMaps.__default.BucketComplement $LZ |bucket#0@@6| |keys#0@@14|))) :qid |BucketMapidfy.63:22| :skolemid |4662| :pattern ( (BucketMaps.__default.BucketComplement (AsFuelBottom $ly@@683) |bucket#0@@6| |keys#0@@14|)) )))
(assert  (=> true (forall (($ly@@684 T@U) (|bucket#0@@7| T@U) (|keys#0@@15| T@U) ) (!  (=> (and (and (and (= (type $ly@@684) LayerTypeType) (= (type |bucket#0@@7|) (MapType BoxType BoxType))) (= (type |keys#0@@15|) (MapType0Type BoxType boolType))) (or (|BucketMaps.__default.BucketComplement#canCall| |bucket#0@@7| |keys#0@@15|) (and ($Is |bucket#0@@7| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |keys#0@@15| (TSet Tclass.KeyType.Key))))) ($Is (BucketMaps.__default.BucketComplement $ly@@684 |bucket#0@@7| |keys#0@@15|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) :qid |BucketMapidfy.63:22| :skolemid |4663| :pattern ( (BucketMaps.__default.BucketComplement $ly@@684 |bucket#0@@7| |keys#0@@15|)) ))))
(assert (forall (($ly@@685 T@U) (|bucket#0@@8| T@U) (|keys#0@@16| T@U) ) (!  (=> (and (and (and (= (type $ly@@685) LayerTypeType) (= (type |bucket#0@@8|) (MapType BoxType BoxType))) (= (type |keys#0@@16|) (MapType0Type BoxType boolType))) (and ($Is |bucket#0@@8| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |keys#0@@16| (TSet Tclass.KeyType.Key)))) (= (|BucketMaps.__default.BucketComplement#requires| $ly@@685 |bucket#0@@8| |keys#0@@16|) true)) :qid |BucketMapidfy.63:22| :skolemid |4664| :pattern ( (|BucketMaps.__default.BucketComplement#requires| $ly@@685 |bucket#0@@8| |keys#0@@16|)) )))
(assert  (=> true (forall (($ly@@686 T@U) (|bucket#0@@9| T@U) (|keys#0@@17| T@U) ) (!  (=> (and (and (and (= (type $ly@@686) LayerTypeType) (= (type |bucket#0@@9|) (MapType BoxType BoxType))) (= (type |keys#0@@17|) (MapType0Type BoxType boolType))) (or (|BucketMaps.__default.BucketComplement#canCall| |bucket#0@@9| |keys#0@@17|) (and ($Is |bucket#0@@9| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |keys#0@@17| (TSet Tclass.KeyType.Key))))) (= (BucketMaps.__default.BucketComplement ($LS $ly@@686) |bucket#0@@9| |keys#0@@17|) (|Map#Glue| (|lambda#106| Tclass.KeyType.Key (|Map#Domain| |bucket#0@@9|) |keys#0@@17|) (|lambda#11| (|Map#Elements| |bucket#0@@9|)) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) :qid |BucketMapidfy.63:22| :skolemid |4665| :pattern ( (BucketMaps.__default.BucketComplement ($LS $ly@@686) |bucket#0@@9| |keys#0@@17|)) ))))
(assert  (=> true (forall (($ly@@687 T@U) (|bucket#0@@10| T@U) (|keys#0@@18| T@U) ) (!  (=> (and (and (and (= (type $ly@@687) LayerTypeType) (= (type |bucket#0@@10|) (MapType BoxType BoxType))) (= (type |keys#0@@18|) (MapType0Type BoxType boolType))) (or (|BucketMaps.__default.BucketComplement#canCall| (Lit |bucket#0@@10|) (Lit |keys#0@@18|)) (and ($Is |bucket#0@@10| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |keys#0@@18| (TSet Tclass.KeyType.Key))))) (= (BucketMaps.__default.BucketComplement ($LS $ly@@687) (Lit |bucket#0@@10|) (Lit |keys#0@@18|)) (|Map#Glue| (|lambda#106| Tclass.KeyType.Key (|Map#Domain| |bucket#0@@10|) (Lit |keys#0@@18|)) (|lambda#11| (|Map#Elements| (Lit |bucket#0@@10|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) :qid |BucketMapidfy.63:22| :weight 3 :skolemid |4666| :pattern ( (BucketMaps.__default.BucketComplement ($LS $ly@@687) (Lit |bucket#0@@10|) (Lit |keys#0@@18|))) ))))
(assert (forall ((arg0@@714 T@U) (arg1@@366 T@U) (arg2@@225 T@U) (arg3@@158 T@U) ) (! (= (type (BucketMaps.__default.ClampRange arg0@@714 arg1@@366 arg2@@225 arg3@@158)) (MapType BoxType BoxType)) :qid |funType:BucketMaps.__default.ClampRange| :pattern ( (BucketMaps.__default.ClampRange arg0@@714 arg1@@366 arg2@@225 arg3@@158)) )))
(assert (forall (($ly@@688 T@U) (|bucket#0@@11| T@U) (|start#0@@20| T@U) (|end#0@@16| T@U) ) (!  (=> (and (and (and (= (type $ly@@688) LayerTypeType) (= (type |bucket#0@@11|) (MapType BoxType BoxType))) (= (type |start#0@@20|) DatatypeTypeType)) (= (type |end#0@@16|) DatatypeTypeType)) (= (BucketMaps.__default.ClampRange ($LS $ly@@688) |bucket#0@@11| |start#0@@20| |end#0@@16|) (BucketMaps.__default.ClampRange $ly@@688 |bucket#0@@11| |start#0@@20| |end#0@@16|))) :qid |BucketMapidfy.70:22| :skolemid |4667| :pattern ( (BucketMaps.__default.ClampRange ($LS $ly@@688) |bucket#0@@11| |start#0@@20| |end#0@@16|)) )))
(assert (forall (($ly@@689 T@U) (|bucket#0@@12| T@U) (|start#0@@21| T@U) (|end#0@@17| T@U) ) (!  (=> (and (and (and (= (type $ly@@689) LayerTypeType) (= (type |bucket#0@@12|) (MapType BoxType BoxType))) (= (type |start#0@@21|) DatatypeTypeType)) (= (type |end#0@@17|) DatatypeTypeType)) (= (BucketMaps.__default.ClampRange $ly@@689 |bucket#0@@12| |start#0@@21| |end#0@@17|) (BucketMaps.__default.ClampRange $LZ |bucket#0@@12| |start#0@@21| |end#0@@17|))) :qid |BucketMapidfy.70:22| :skolemid |4668| :pattern ( (BucketMaps.__default.ClampRange (AsFuelBottom $ly@@689) |bucket#0@@12| |start#0@@21| |end#0@@17|)) )))
(assert  (=> true (forall (($ly@@690 T@U) (|bucket#0@@13| T@U) (|start#0@@22| T@U) (|end#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@690) LayerTypeType) (= (type |bucket#0@@13|) (MapType BoxType BoxType))) (= (type |start#0@@22|) DatatypeTypeType)) (= (type |end#0@@18|) DatatypeTypeType)) (or (|BucketMaps.__default.ClampRange#canCall| |bucket#0@@13| |start#0@@22| |end#0@@18|) (and (and ($Is |bucket#0@@13| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |start#0@@22| Tclass.UI.RangeStart)) ($Is |end#0@@18| Tclass.UI.RangeEnd)))) ($Is (BucketMaps.__default.ClampRange $ly@@690 |bucket#0@@13| |start#0@@22| |end#0@@18|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) :qid |BucketMapidfy.70:22| :skolemid |4669| :pattern ( (BucketMaps.__default.ClampRange $ly@@690 |bucket#0@@13| |start#0@@22| |end#0@@18|)) ))))
(assert (forall (($ly@@691 T@U) (|bucket#0@@14| T@U) (|start#0@@23| T@U) (|end#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@691) LayerTypeType) (= (type |bucket#0@@14|) (MapType BoxType BoxType))) (= (type |start#0@@23|) DatatypeTypeType)) (= (type |end#0@@19|) DatatypeTypeType)) (and (and ($Is |bucket#0@@14| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |start#0@@23| Tclass.UI.RangeStart)) ($Is |end#0@@19| Tclass.UI.RangeEnd))) (= (|BucketMaps.__default.ClampRange#requires| $ly@@691 |bucket#0@@14| |start#0@@23| |end#0@@19|) true)) :qid |BucketMapidfy.70:22| :skolemid |4670| :pattern ( (|BucketMaps.__default.ClampRange#requires| $ly@@691 |bucket#0@@14| |start#0@@23| |end#0@@19|)) )))
(assert (forall ((arg0@@715 T@U) (arg1@@367 T@U) (arg2@@226 T@U) (arg3@@159 T@U) ) (! (= (type (|lambda#256| arg0@@715 arg1@@367 arg2@@226 arg3@@159)) (MapType0Type BoxType boolType)) :qid |funType:lambda#256| :pattern ( (|lambda#256| arg0@@715 arg1@@367 arg2@@226 arg3@@159)) )))
(assert  (=> true (forall (($ly@@692 T@U) (|bucket#0@@15| T@U) (|start#0@@24| T@U) (|end#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@692) LayerTypeType) (= (type |bucket#0@@15|) (MapType BoxType BoxType))) (= (type |start#0@@24|) DatatypeTypeType)) (= (type |end#0@@20|) DatatypeTypeType)) (or (|BucketMaps.__default.ClampRange#canCall| |bucket#0@@15| |start#0@@24| |end#0@@20|) (and (and ($Is |bucket#0@@15| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |start#0@@24| Tclass.UI.RangeStart)) ($Is |end#0@@20| Tclass.UI.RangeEnd)))) (and (forall ((|key#0@@198| T@U) ) (!  (=> (and (and (= (type |key#0@@198|) (SeqType BoxType)) ($Is |key#0@@198| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|Map#Domain| |bucket#0@@15|) ($Box |key#0@@198|)))) (|MapSpec.__default.InRange#canCall| |start#0@@24| |key#0@@198| |end#0@@20|)) :qid |BucketMapidfy.72:9| :skolemid |4671| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@15|) ($Box |key#0@@198|)))) :pattern ( (MapSpec.__default.InRange |start#0@@24| |key#0@@198| |end#0@@20|)) :pattern ( (MapType0Select (|Map#Domain| |bucket#0@@15|) ($Box |key#0@@198|))) )) (= (BucketMaps.__default.ClampRange ($LS $ly@@692) |bucket#0@@15| |start#0@@24| |end#0@@20|) (|Map#Glue| (|lambda#256| Tclass.KeyType.Key (|Map#Domain| |bucket#0@@15|) |start#0@@24| |end#0@@20|) (|lambda#11| (|Map#Elements| |bucket#0@@15|)) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) :qid |BucketMapidfy.70:22| :skolemid |4672| :pattern ( (BucketMaps.__default.ClampRange ($LS $ly@@692) |bucket#0@@15| |start#0@@24| |end#0@@20|)) ))))
(assert  (=> true (forall (($ly@@693 T@U) (|bucket#0@@16| T@U) (|start#0@@25| T@U) (|end#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type $ly@@693) LayerTypeType) (= (type |bucket#0@@16|) (MapType BoxType BoxType))) (= (type |start#0@@25|) DatatypeTypeType)) (= (type |end#0@@21|) DatatypeTypeType)) (or (|BucketMaps.__default.ClampRange#canCall| (Lit |bucket#0@@16|) (Lit |start#0@@25|) (Lit |end#0@@21|)) (and (and ($Is |bucket#0@@16| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |start#0@@25| Tclass.UI.RangeStart)) ($Is |end#0@@21| Tclass.UI.RangeEnd)))) (and (forall ((|key#0@@199| T@U) ) (!  (=> (and (and (= (type |key#0@@199|) (SeqType BoxType)) ($Is |key#0@@199| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|Map#Domain| |bucket#0@@16|) ($Box |key#0@@199|)))) (|MapSpec.__default.InRange#canCall| (Lit |start#0@@25|) |key#0@@199| (Lit |end#0@@21|))) :qid |BucketMapidfy.72:9| :skolemid |4673| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@16|) ($Box |key#0@@199|)))) :pattern ( (MapSpec.__default.InRange |start#0@@25| |key#0@@199| |end#0@@21|)) :pattern ( (MapType0Select (|Map#Domain| |bucket#0@@16|) ($Box |key#0@@199|))) )) (= (BucketMaps.__default.ClampRange ($LS $ly@@693) (Lit |bucket#0@@16|) (Lit |start#0@@25|) (Lit |end#0@@21|)) (|Map#Glue| (|lambda#256| Tclass.KeyType.Key (|Map#Domain| |bucket#0@@16|) (Lit |start#0@@25|) (Lit |end#0@@21|)) (|lambda#11| (|Map#Elements| (Lit |bucket#0@@16|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) :qid |BucketMapidfy.70:22| :weight 3 :skolemid |4674| :pattern ( (BucketMaps.__default.ClampRange ($LS $ly@@693) (Lit |bucket#0@@16|) (Lit |start#0@@25|) (Lit |end#0@@21|))) ))))
(assert (forall ((arg0@@716 T@U) (arg1@@368 T@U) (arg2@@227 T@U) ) (! (= (type (BucketMaps.__default.ClampStart arg0@@716 arg1@@368 arg2@@227)) (MapType BoxType BoxType)) :qid |funType:BucketMaps.__default.ClampStart| :pattern ( (BucketMaps.__default.ClampStart arg0@@716 arg1@@368 arg2@@227)) )))
(assert (forall (($ly@@694 T@U) (|bucket#0@@17| T@U) (|start#0@@26| T@U) ) (!  (=> (and (and (= (type $ly@@694) LayerTypeType) (= (type |bucket#0@@17|) (MapType BoxType BoxType))) (= (type |start#0@@26|) DatatypeTypeType)) (= (BucketMaps.__default.ClampStart ($LS $ly@@694) |bucket#0@@17| |start#0@@26|) (BucketMaps.__default.ClampStart $ly@@694 |bucket#0@@17| |start#0@@26|))) :qid |BucketMapidfy.75:22| :skolemid |4675| :pattern ( (BucketMaps.__default.ClampStart ($LS $ly@@694) |bucket#0@@17| |start#0@@26|)) )))
(assert (forall (($ly@@695 T@U) (|bucket#0@@18| T@U) (|start#0@@27| T@U) ) (!  (=> (and (and (= (type $ly@@695) LayerTypeType) (= (type |bucket#0@@18|) (MapType BoxType BoxType))) (= (type |start#0@@27|) DatatypeTypeType)) (= (BucketMaps.__default.ClampStart $ly@@695 |bucket#0@@18| |start#0@@27|) (BucketMaps.__default.ClampStart $LZ |bucket#0@@18| |start#0@@27|))) :qid |BucketMapidfy.75:22| :skolemid |4676| :pattern ( (BucketMaps.__default.ClampStart (AsFuelBottom $ly@@695) |bucket#0@@18| |start#0@@27|)) )))
(assert  (=> true (forall (($ly@@696 T@U) (|bucket#0@@19| T@U) (|start#0@@28| T@U) ) (!  (=> (and (and (and (= (type $ly@@696) LayerTypeType) (= (type |bucket#0@@19|) (MapType BoxType BoxType))) (= (type |start#0@@28|) DatatypeTypeType)) (or (|BucketMaps.__default.ClampStart#canCall| |bucket#0@@19| |start#0@@28|) (and ($Is |bucket#0@@19| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |start#0@@28| Tclass.UI.RangeStart)))) ($Is (BucketMaps.__default.ClampStart $ly@@696 |bucket#0@@19| |start#0@@28|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) :qid |BucketMapidfy.75:22| :skolemid |4677| :pattern ( (BucketMaps.__default.ClampStart $ly@@696 |bucket#0@@19| |start#0@@28|)) ))))
(assert (forall (($ly@@697 T@U) (|bucket#0@@20| T@U) (|start#0@@29| T@U) ) (!  (=> (and (and (and (= (type $ly@@697) LayerTypeType) (= (type |bucket#0@@20|) (MapType BoxType BoxType))) (= (type |start#0@@29|) DatatypeTypeType)) (and ($Is |bucket#0@@20| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |start#0@@29| Tclass.UI.RangeStart))) (= (|BucketMaps.__default.ClampStart#requires| $ly@@697 |bucket#0@@20| |start#0@@29|) true)) :qid |BucketMapidfy.75:22| :skolemid |4678| :pattern ( (|BucketMaps.__default.ClampStart#requires| $ly@@697 |bucket#0@@20| |start#0@@29|)) )))
(assert (forall ((arg0@@717 T@U) (arg1@@369 T@U) (arg2@@228 T@U) ) (! (= (type (|lambda#260| arg0@@717 arg1@@369 arg2@@228)) (MapType0Type BoxType boolType)) :qid |funType:lambda#260| :pattern ( (|lambda#260| arg0@@717 arg1@@369 arg2@@228)) )))
(assert  (=> true (forall (($ly@@698 T@U) (|bucket#0@@21| T@U) (|start#0@@30| T@U) ) (!  (=> (and (and (and (= (type $ly@@698) LayerTypeType) (= (type |bucket#0@@21|) (MapType BoxType BoxType))) (= (type |start#0@@30|) DatatypeTypeType)) (or (|BucketMaps.__default.ClampStart#canCall| |bucket#0@@21| |start#0@@30|) (and ($Is |bucket#0@@21| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |start#0@@30| Tclass.UI.RangeStart)))) (and (forall ((|key#0@@200| T@U) ) (!  (=> (and (and (= (type |key#0@@200|) (SeqType BoxType)) ($Is |key#0@@200| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|Map#Domain| |bucket#0@@21|) ($Box |key#0@@200|)))) (|MapSpec.__default.LowerBound#canCall| |start#0@@30| |key#0@@200|)) :qid |BucketMapidfy.77:9| :skolemid |4679| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@21|) ($Box |key#0@@200|)))) :pattern ( (MapSpec.__default.LowerBound |start#0@@30| |key#0@@200|)) :pattern ( (MapType0Select (|Map#Domain| |bucket#0@@21|) ($Box |key#0@@200|))) )) (= (BucketMaps.__default.ClampStart ($LS $ly@@698) |bucket#0@@21| |start#0@@30|) (|Map#Glue| (|lambda#260| Tclass.KeyType.Key (|Map#Domain| |bucket#0@@21|) |start#0@@30|) (|lambda#11| (|Map#Elements| |bucket#0@@21|)) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) :qid |BucketMapidfy.75:22| :skolemid |4680| :pattern ( (BucketMaps.__default.ClampStart ($LS $ly@@698) |bucket#0@@21| |start#0@@30|)) ))))
(assert  (=> true (forall (($ly@@699 T@U) (|bucket#0@@22| T@U) (|start#0@@31| T@U) ) (!  (=> (and (and (and (= (type $ly@@699) LayerTypeType) (= (type |bucket#0@@22|) (MapType BoxType BoxType))) (= (type |start#0@@31|) DatatypeTypeType)) (or (|BucketMaps.__default.ClampStart#canCall| (Lit |bucket#0@@22|) (Lit |start#0@@31|)) (and ($Is |bucket#0@@22| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |start#0@@31| Tclass.UI.RangeStart)))) (and (forall ((|key#0@@201| T@U) ) (!  (=> (and (and (= (type |key#0@@201|) (SeqType BoxType)) ($Is |key#0@@201| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|Map#Domain| |bucket#0@@22|) ($Box |key#0@@201|)))) (|MapSpec.__default.LowerBound#canCall| (Lit |start#0@@31|) |key#0@@201|)) :qid |BucketMapidfy.77:9| :skolemid |4681| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@22|) ($Box |key#0@@201|)))) :pattern ( (MapSpec.__default.LowerBound |start#0@@31| |key#0@@201|)) :pattern ( (MapType0Select (|Map#Domain| |bucket#0@@22|) ($Box |key#0@@201|))) )) (= (BucketMaps.__default.ClampStart ($LS $ly@@699) (Lit |bucket#0@@22|) (Lit |start#0@@31|)) (|Map#Glue| (|lambda#260| Tclass.KeyType.Key (|Map#Domain| |bucket#0@@22|) (Lit |start#0@@31|)) (|lambda#11| (|Map#Elements| (Lit |bucket#0@@22|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) :qid |BucketMapidfy.75:22| :weight 3 :skolemid |4682| :pattern ( (BucketMaps.__default.ClampStart ($LS $ly@@699) (Lit |bucket#0@@22|) (Lit |start#0@@31|))) ))))
(assert (forall ((arg0@@718 T@U) (arg1@@370 T@U) (arg2@@229 T@U) ) (! (= (type (BucketMaps.__default.ClampEnd arg0@@718 arg1@@370 arg2@@229)) (MapType BoxType BoxType)) :qid |funType:BucketMaps.__default.ClampEnd| :pattern ( (BucketMaps.__default.ClampEnd arg0@@718 arg1@@370 arg2@@229)) )))
(assert (forall (($ly@@700 T@U) (|bucket#0@@23| T@U) (|end#0@@22| T@U) ) (!  (=> (and (and (= (type $ly@@700) LayerTypeType) (= (type |bucket#0@@23|) (MapType BoxType BoxType))) (= (type |end#0@@22|) DatatypeTypeType)) (= (BucketMaps.__default.ClampEnd ($LS $ly@@700) |bucket#0@@23| |end#0@@22|) (BucketMaps.__default.ClampEnd $ly@@700 |bucket#0@@23| |end#0@@22|))) :qid |BucketMapidfy.80:22| :skolemid |4683| :pattern ( (BucketMaps.__default.ClampEnd ($LS $ly@@700) |bucket#0@@23| |end#0@@22|)) )))
(assert (forall (($ly@@701 T@U) (|bucket#0@@24| T@U) (|end#0@@23| T@U) ) (!  (=> (and (and (= (type $ly@@701) LayerTypeType) (= (type |bucket#0@@24|) (MapType BoxType BoxType))) (= (type |end#0@@23|) DatatypeTypeType)) (= (BucketMaps.__default.ClampEnd $ly@@701 |bucket#0@@24| |end#0@@23|) (BucketMaps.__default.ClampEnd $LZ |bucket#0@@24| |end#0@@23|))) :qid |BucketMapidfy.80:22| :skolemid |4684| :pattern ( (BucketMaps.__default.ClampEnd (AsFuelBottom $ly@@701) |bucket#0@@24| |end#0@@23|)) )))
(assert  (=> true (forall (($ly@@702 T@U) (|bucket#0@@25| T@U) (|end#0@@24| T@U) ) (!  (=> (and (and (and (= (type $ly@@702) LayerTypeType) (= (type |bucket#0@@25|) (MapType BoxType BoxType))) (= (type |end#0@@24|) DatatypeTypeType)) (or (|BucketMaps.__default.ClampEnd#canCall| |bucket#0@@25| |end#0@@24|) (and ($Is |bucket#0@@25| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |end#0@@24| Tclass.UI.RangeEnd)))) ($Is (BucketMaps.__default.ClampEnd $ly@@702 |bucket#0@@25| |end#0@@24|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) :qid |BucketMapidfy.80:22| :skolemid |4685| :pattern ( (BucketMaps.__default.ClampEnd $ly@@702 |bucket#0@@25| |end#0@@24|)) ))))
(assert (forall (($ly@@703 T@U) (|bucket#0@@26| T@U) (|end#0@@25| T@U) ) (!  (=> (and (and (and (= (type $ly@@703) LayerTypeType) (= (type |bucket#0@@26|) (MapType BoxType BoxType))) (= (type |end#0@@25|) DatatypeTypeType)) (and ($Is |bucket#0@@26| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |end#0@@25| Tclass.UI.RangeEnd))) (= (|BucketMaps.__default.ClampEnd#requires| $ly@@703 |bucket#0@@26| |end#0@@25|) true)) :qid |BucketMapidfy.80:22| :skolemid |4686| :pattern ( (|BucketMaps.__default.ClampEnd#requires| $ly@@703 |bucket#0@@26| |end#0@@25|)) )))
(assert (forall ((arg0@@719 T@U) (arg1@@371 T@U) (arg2@@230 T@U) ) (! (= (type (|lambda#264| arg0@@719 arg1@@371 arg2@@230)) (MapType0Type BoxType boolType)) :qid |funType:lambda#264| :pattern ( (|lambda#264| arg0@@719 arg1@@371 arg2@@230)) )))
(assert  (=> true (forall (($ly@@704 T@U) (|bucket#0@@27| T@U) (|end#0@@26| T@U) ) (!  (=> (and (and (and (= (type $ly@@704) LayerTypeType) (= (type |bucket#0@@27|) (MapType BoxType BoxType))) (= (type |end#0@@26|) DatatypeTypeType)) (or (|BucketMaps.__default.ClampEnd#canCall| |bucket#0@@27| |end#0@@26|) (and ($Is |bucket#0@@27| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |end#0@@26| Tclass.UI.RangeEnd)))) (and (forall ((|key#0@@202| T@U) ) (!  (=> (and (and (= (type |key#0@@202|) (SeqType BoxType)) ($Is |key#0@@202| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|Map#Domain| |bucket#0@@27|) ($Box |key#0@@202|)))) (|MapSpec.__default.UpperBound#canCall| |key#0@@202| |end#0@@26|)) :qid |BucketMapidfy.82:9| :skolemid |4687| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@27|) ($Box |key#0@@202|)))) :pattern ( (MapSpec.__default.UpperBound |key#0@@202| |end#0@@26|)) :pattern ( (MapType0Select (|Map#Domain| |bucket#0@@27|) ($Box |key#0@@202|))) )) (= (BucketMaps.__default.ClampEnd ($LS $ly@@704) |bucket#0@@27| |end#0@@26|) (|Map#Glue| (|lambda#264| Tclass.KeyType.Key (|Map#Domain| |bucket#0@@27|) |end#0@@26|) (|lambda#11| (|Map#Elements| |bucket#0@@27|)) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) :qid |BucketMapidfy.80:22| :skolemid |4688| :pattern ( (BucketMaps.__default.ClampEnd ($LS $ly@@704) |bucket#0@@27| |end#0@@26|)) ))))
(assert  (=> true (forall (($ly@@705 T@U) (|bucket#0@@28| T@U) (|end#0@@27| T@U) ) (!  (=> (and (and (and (= (type $ly@@705) LayerTypeType) (= (type |bucket#0@@28|) (MapType BoxType BoxType))) (= (type |end#0@@27|) DatatypeTypeType)) (or (|BucketMaps.__default.ClampEnd#canCall| (Lit |bucket#0@@28|) (Lit |end#0@@27|)) (and ($Is |bucket#0@@28| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |end#0@@27| Tclass.UI.RangeEnd)))) (and (forall ((|key#0@@203| T@U) ) (!  (=> (and (and (= (type |key#0@@203|) (SeqType BoxType)) ($Is |key#0@@203| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|Map#Domain| |bucket#0@@28|) ($Box |key#0@@203|)))) (|MapSpec.__default.UpperBound#canCall| |key#0@@203| (Lit |end#0@@27|))) :qid |BucketMapidfy.82:9| :skolemid |4689| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@28|) ($Box |key#0@@203|)))) :pattern ( (MapSpec.__default.UpperBound |key#0@@203| |end#0@@27|)) :pattern ( (MapType0Select (|Map#Domain| |bucket#0@@28|) ($Box |key#0@@203|))) )) (= (BucketMaps.__default.ClampEnd ($LS $ly@@705) (Lit |bucket#0@@28|) (Lit |end#0@@27|)) (|Map#Glue| (|lambda#264| Tclass.KeyType.Key (|Map#Domain| |bucket#0@@28|) (Lit |end#0@@27|)) (|lambda#11| (|Map#Elements| (Lit |bucket#0@@28|))) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) :qid |BucketMapidfy.80:22| :weight 3 :skolemid |4690| :pattern ( (BucketMaps.__default.ClampEnd ($LS $ly@@705) (Lit |bucket#0@@28|) (Lit |end#0@@27|))) ))))
(assert (forall ((arg0@@720 T@U) (arg1@@372 T@U) (arg2@@231 T@U) ) (! (= (type (BucketMaps.__default.Compose arg0@@720 arg1@@372 arg2@@231)) (MapType BoxType BoxType)) :qid |funType:BucketMaps.__default.Compose| :pattern ( (BucketMaps.__default.Compose arg0@@720 arg1@@372 arg2@@231)) )))
(assert (forall (($ly@@706 T@U) (|top#0@@32| T@U) (|bot#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@706) LayerTypeType) (= (type |top#0@@32|) (MapType BoxType BoxType))) (= (type |bot#0@@7|) (MapType BoxType BoxType))) (= (BucketMaps.__default.Compose ($LS $ly@@706) |top#0@@32| |bot#0@@7|) (BucketMaps.__default.Compose $ly@@706 |top#0@@32| |bot#0@@7|))) :qid |BucketMapidfy.89:22| :skolemid |4691| :pattern ( (BucketMaps.__default.Compose ($LS $ly@@706) |top#0@@32| |bot#0@@7|)) )))
(assert (forall (($ly@@707 T@U) (|top#0@@33| T@U) (|bot#0@@8| T@U) ) (!  (=> (and (and (= (type $ly@@707) LayerTypeType) (= (type |top#0@@33|) (MapType BoxType BoxType))) (= (type |bot#0@@8|) (MapType BoxType BoxType))) (= (BucketMaps.__default.Compose $ly@@707 |top#0@@33| |bot#0@@8|) (BucketMaps.__default.Compose $LZ |top#0@@33| |bot#0@@8|))) :qid |BucketMapidfy.89:22| :skolemid |4692| :pattern ( (BucketMaps.__default.Compose (AsFuelBottom $ly@@707) |top#0@@33| |bot#0@@8|)) )))
(assert  (=> true (forall (($ly@@708 T@U) (|top#0@@34| T@U) (|bot#0@@9| T@U) ) (!  (=> (and (and (and (= (type $ly@@708) LayerTypeType) (= (type |top#0@@34|) (MapType BoxType BoxType))) (= (type |bot#0@@9|) (MapType BoxType BoxType))) (or (|BucketMaps.__default.Compose#canCall| |top#0@@34| |bot#0@@9|) (and ($Is |top#0@@34| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |bot#0@@9| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) ($Is (BucketMaps.__default.Compose $ly@@708 |top#0@@34| |bot#0@@9|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) :qid |BucketMapidfy.89:22| :skolemid |4693| :pattern ( (BucketMaps.__default.Compose $ly@@708 |top#0@@34| |bot#0@@9|)) ))))
(assert (forall (($ly@@709 T@U) (|top#0@@35| T@U) (|bot#0@@10| T@U) ) (!  (=> (and (and (and (= (type $ly@@709) LayerTypeType) (= (type |top#0@@35|) (MapType BoxType BoxType))) (= (type |bot#0@@10|) (MapType BoxType BoxType))) (and ($Is |top#0@@35| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |bot#0@@10| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (|BucketMaps.__default.Compose#requires| $ly@@709 |top#0@@35| |bot#0@@10|) true)) :qid |BucketMapidfy.89:22| :skolemid |4694| :pattern ( (|BucketMaps.__default.Compose#requires| $ly@@709 |top#0@@35| |bot#0@@10|)) )))
(assert  (=> true (forall (($ly@@710 T@U) (|top#0@@36| T@U) (|bot#0@@11| T@U) ) (!  (=> (and (and (and (= (type $ly@@710) LayerTypeType) (= (type |top#0@@36|) (MapType BoxType BoxType))) (= (type |bot#0@@11|) (MapType BoxType BoxType))) (or (|BucketMaps.__default.Compose#canCall| |top#0@@36| |bot#0@@11|) (and ($Is |top#0@@36| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |bot#0@@11| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (and (forall ((|key#0@@204| T@U) ) (!  (=> (and (and (= (type |key#0@@204|) (SeqType BoxType)) ($Is |key#0@@204| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|Set#Union| (|Map#Domain| |top#0@@36|) (|Map#Domain| |bot#0@@11|)) ($Box |key#0@@204|)))) (and (and (|BucketMaps.__default.BucketGet#canCall| |top#0@@36| |key#0@@204|) (|BucketMaps.__default.BucketGet#canCall| |bot#0@@11| |key#0@@204|)) (|ValueMessage.__default.Merge#canCall| (BucketMaps.__default.BucketGet |top#0@@36| |key#0@@204|) (BucketMaps.__default.BucketGet |bot#0@@11| |key#0@@204|)))) :qid |BucketMapidfy.91:9| :skolemid |4695| :pattern ( (BucketMaps.__default.BucketGet |bot#0@@11| |key#0@@204|)) :pattern ( (BucketMaps.__default.BucketGet |top#0@@36| |key#0@@204|)) :pattern ( (MapType0Select (|Set#Union| (|Map#Domain| |top#0@@36|) (|Map#Domain| |bot#0@@11|)) ($Box |key#0@@204|))) )) (= (BucketMaps.__default.Compose ($LS $ly@@710) |top#0@@36| |bot#0@@11|) (|Map#Glue| (|lambda#92| Tclass.KeyType.Key (|Set#Union| (|Map#Domain| |top#0@@36|) (|Map#Domain| |bot#0@@11|))) (|lambda#245| |top#0@@36| |bot#0@@11|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) :qid |BucketMapidfy.89:22| :skolemid |4696| :pattern ( (BucketMaps.__default.Compose ($LS $ly@@710) |top#0@@36| |bot#0@@11|)) ))))
(assert  (=> true (forall (($ly@@711 T@U) (|top#0@@37| T@U) (|bot#0@@12| T@U) ) (!  (=> (and (and (and (= (type $ly@@711) LayerTypeType) (= (type |top#0@@37|) (MapType BoxType BoxType))) (= (type |bot#0@@12|) (MapType BoxType BoxType))) (or (|BucketMaps.__default.Compose#canCall| (Lit |top#0@@37|) (Lit |bot#0@@12|)) (and ($Is |top#0@@37| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($Is |bot#0@@12| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (and (forall ((|key#0@@205| T@U) ) (!  (=> (and (and (= (type |key#0@@205|) (SeqType BoxType)) ($Is |key#0@@205| Tclass.KeyType.Key)) (U_2_bool (MapType0Select (|Set#Union| (|Map#Domain| (Lit |top#0@@37|)) (|Map#Domain| (Lit |bot#0@@12|))) ($Box |key#0@@205|)))) (and (and (|BucketMaps.__default.BucketGet#canCall| (Lit |top#0@@37|) |key#0@@205|) (|BucketMaps.__default.BucketGet#canCall| (Lit |bot#0@@12|) |key#0@@205|)) (|ValueMessage.__default.Merge#canCall| (BucketMaps.__default.BucketGet (Lit |top#0@@37|) |key#0@@205|) (BucketMaps.__default.BucketGet (Lit |bot#0@@12|) |key#0@@205|)))) :qid |BucketMapidfy.91:9| :skolemid |4697| :pattern ( (BucketMaps.__default.BucketGet |bot#0@@12| |key#0@@205|)) :pattern ( (BucketMaps.__default.BucketGet |top#0@@37| |key#0@@205|)) :pattern ( (MapType0Select (|Set#Union| (|Map#Domain| |top#0@@37|) (|Map#Domain| |bot#0@@12|)) ($Box |key#0@@205|))) )) (= (BucketMaps.__default.Compose ($LS $ly@@711) (Lit |top#0@@37|) (Lit |bot#0@@12|)) (|Map#Glue| (|lambda#92| Tclass.KeyType.Key (|Set#Union| (|Map#Domain| (Lit |top#0@@37|)) (|Map#Domain| (Lit |bot#0@@12|)))) (|lambda#245| (Lit |top#0@@37|) (Lit |bot#0@@12|)) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) :qid |BucketMapidfy.89:22| :weight 3 :skolemid |4698| :pattern ( (BucketMaps.__default.Compose ($LS $ly@@711) (Lit |top#0@@37|) (Lit |bot#0@@12|))) ))))
(assert (forall ((arg0@@721 T@U) (arg1@@373 T@U) ) (! (= (type (BucketMaps.__default.ComposeSeq arg0@@721 arg1@@373)) (MapType BoxType BoxType)) :qid |funType:BucketMaps.__default.ComposeSeq| :pattern ( (BucketMaps.__default.ComposeSeq arg0@@721 arg1@@373)) )))
(assert (forall (($ly@@712 T@U) (|buckets#0| T@U) ) (!  (=> (and (= (type $ly@@712) LayerTypeType) (= (type |buckets#0|) (SeqType BoxType))) (= (BucketMaps.__default.ComposeSeq ($LS $ly@@712) |buckets#0|) (BucketMaps.__default.ComposeSeq $ly@@712 |buckets#0|))) :qid |BucketMapidfy.96:22| :skolemid |4699| :pattern ( (BucketMaps.__default.ComposeSeq ($LS $ly@@712) |buckets#0|)) )))
(assert (forall (($ly@@713 T@U) (|buckets#0@@0| T@U) ) (!  (=> (and (= (type $ly@@713) LayerTypeType) (= (type |buckets#0@@0|) (SeqType BoxType))) (= (BucketMaps.__default.ComposeSeq $ly@@713 |buckets#0@@0|) (BucketMaps.__default.ComposeSeq $LZ |buckets#0@@0|))) :qid |BucketMapidfy.96:22| :skolemid |4700| :pattern ( (BucketMaps.__default.ComposeSeq (AsFuelBottom $ly@@713) |buckets#0@@0|)) )))
(assert  (=> true (forall (($ly@@714 T@U) (|buckets#0@@1| T@U) ) (!  (=> (and (and (= (type $ly@@714) LayerTypeType) (= (type |buckets#0@@1|) (SeqType BoxType))) (or (|BucketMaps.__default.ComposeSeq#canCall| |buckets#0@@1|) ($Is |buckets#0@@1| (TSeq (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) ($Is (BucketMaps.__default.ComposeSeq $ly@@714 |buckets#0@@1|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) :qid |BucketMapidfy.96:22| :skolemid |4701| :pattern ( (BucketMaps.__default.ComposeSeq $ly@@714 |buckets#0@@1|)) ))))
(assert (forall (($ly@@715 T@U) (|buckets#0@@2| T@U) ) (!  (=> (and (and (= (type $ly@@715) LayerTypeType) (= (type |buckets#0@@2|) (SeqType BoxType))) ($Is |buckets#0@@2| (TSeq (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (= (|BucketMaps.__default.ComposeSeq#requires| $ly@@715 |buckets#0@@2|) true)) :qid |BucketMapidfy.96:22| :skolemid |4702| :pattern ( (|BucketMaps.__default.ComposeSeq#requires| $ly@@715 |buckets#0@@2|)) )))
(assert (= (type StartFuel_BucketMaps._default.Compose) LayerTypeType))
(assert  (=> true (forall (($ly@@716 T@U) (|buckets#0@@3| T@U) ) (!  (=> (and (and (= (type $ly@@716) LayerTypeType) (= (type |buckets#0@@3|) (SeqType BoxType))) (or (|BucketMaps.__default.ComposeSeq#canCall| |buckets#0@@3|) ($Is |buckets#0@@3| (TSeq (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (and (=> (not (= (|Seq#Length| |buckets#0@@3|) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) |buckets#0@@3|) (|BucketMaps.__default.ComposeSeq#canCall| (Sequences.__default.DropLast (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) |buckets#0@@3|))) (|Sequences.__default.Last#canCall| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) |buckets#0@@3|)) (|BucketMaps.__default.Compose#canCall| (BucketMaps.__default.ComposeSeq $ly@@716 (Sequences.__default.DropLast (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) |buckets#0@@3|)) ($Unbox (MapType BoxType BoxType) (Sequences.__default.Last (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) |buckets#0@@3|))))) (= (BucketMaps.__default.ComposeSeq ($LS $ly@@716) |buckets#0@@3|) (ite (= (|Seq#Length| |buckets#0@@3|) (LitInt 0)) (|Map#Empty| BoxType BoxType) (BucketMaps.__default.Compose StartFuel_BucketMaps._default.Compose (BucketMaps.__default.ComposeSeq $ly@@716 (Sequences.__default.DropLast (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) |buckets#0@@3|)) ($Unbox (MapType BoxType BoxType) (Sequences.__default.Last (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) |buckets#0@@3|))))))) :qid |BucketMapidfy.96:22| :skolemid |4703| :pattern ( (BucketMaps.__default.ComposeSeq ($LS $ly@@716) |buckets#0@@3|)) ))))
(assert  (=> true (forall (($ly@@717 T@U) (|buckets#0@@4| T@U) ) (!  (=> (and (and (= (type $ly@@717) LayerTypeType) (= (type |buckets#0@@4|) (SeqType BoxType))) (or (|BucketMaps.__default.ComposeSeq#canCall| (Lit |buckets#0@@4|)) ($Is |buckets#0@@4| (TSeq (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) (and (=> (not (= (|Seq#Length| (Lit |buckets#0@@4|)) (LitInt 0))) (and (and (and (|Sequences.__default.DropLast#canCall| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) (Lit |buckets#0@@4|)) (|BucketMaps.__default.ComposeSeq#canCall| (Lit (Sequences.__default.DropLast (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) (Lit |buckets#0@@4|))))) (|Sequences.__default.Last#canCall| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) (Lit |buckets#0@@4|))) (|BucketMaps.__default.Compose#canCall| (BucketMaps.__default.ComposeSeq ($LS $ly@@717) (Lit (Sequences.__default.DropLast (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) (Lit |buckets#0@@4|)))) (Lit ($Unbox (MapType BoxType BoxType) (Sequences.__default.Last (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) (Lit |buckets#0@@4|))))))) (= (BucketMaps.__default.ComposeSeq ($LS $ly@@717) (Lit |buckets#0@@4|)) (ite (= (|Seq#Length| (Lit |buckets#0@@4|)) (LitInt 0)) (|Map#Empty| BoxType BoxType) (BucketMaps.__default.Compose StartFuel_BucketMaps._default.Compose (BucketMaps.__default.ComposeSeq ($LS $ly@@717) (Lit (Sequences.__default.DropLast (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) (Lit |buckets#0@@4|)))) (Lit ($Unbox (MapType BoxType BoxType) (Sequences.__default.Last (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) (Lit |buckets#0@@4|))))))))) :qid |BucketMapidfy.96:22| :weight 3 :skolemid |4704| :pattern ( (BucketMaps.__default.ComposeSeq ($LS $ly@@717) (Lit |buckets#0@@4|))) ))))
(assert (forall ((arg0@@722 T@U) (arg1@@374 T@U) ) (! (= (type (BucketMaps.__default.KeyValueMapOfBucket arg0@@722 arg1@@374)) (MapType BoxType BoxType)) :qid |funType:BucketMaps.__default.KeyValueMapOfBucket| :pattern ( (BucketMaps.__default.KeyValueMapOfBucket arg0@@722 arg1@@374)) )))
(assert (forall (($ly@@718 T@U) (|bucket#0@@29| T@U) ) (!  (=> (and (= (type $ly@@718) LayerTypeType) (= (type |bucket#0@@29|) (MapType BoxType BoxType))) (= (BucketMaps.__default.KeyValueMapOfBucket ($LS $ly@@718) |bucket#0@@29|) (BucketMaps.__default.KeyValueMapOfBucket $ly@@718 |bucket#0@@29|))) :qid |BucketMapidfy.162:22| :skolemid |4705| :pattern ( (BucketMaps.__default.KeyValueMapOfBucket ($LS $ly@@718) |bucket#0@@29|)) )))
(assert (forall (($ly@@719 T@U) (|bucket#0@@30| T@U) ) (!  (=> (and (= (type $ly@@719) LayerTypeType) (= (type |bucket#0@@30|) (MapType BoxType BoxType))) (= (BucketMaps.__default.KeyValueMapOfBucket $ly@@719 |bucket#0@@30|) (BucketMaps.__default.KeyValueMapOfBucket $LZ |bucket#0@@30|))) :qid |BucketMapidfy.162:22| :skolemid |4706| :pattern ( (BucketMaps.__default.KeyValueMapOfBucket (AsFuelBottom $ly@@719) |bucket#0@@30|)) )))
(assert  (=> true (forall (($ly@@720 T@U) (|bucket#0@@31| T@U) ) (!  (=> (and (and (= (type $ly@@720) LayerTypeType) (= (type |bucket#0@@31|) (MapType BoxType BoxType))) (or (|BucketMaps.__default.KeyValueMapOfBucket#canCall| |bucket#0@@31|) ($Is |bucket#0@@31| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) ($Is (BucketMaps.__default.KeyValueMapOfBucket $ly@@720 |bucket#0@@31|) (TMap Tclass.KeyType.Key Tclass.ValueType.Value))) :qid |BucketMapidfy.162:22| :skolemid |4707| :pattern ( (BucketMaps.__default.KeyValueMapOfBucket $ly@@720 |bucket#0@@31|)) ))))
(assert (forall (($ly@@721 T@U) (|bucket#0@@32| T@U) ) (!  (=> (and (and (= (type $ly@@721) LayerTypeType) (= (type |bucket#0@@32|) (MapType BoxType BoxType))) ($Is |bucket#0@@32| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) (= (|BucketMaps.__default.KeyValueMapOfBucket#requires| $ly@@721 |bucket#0@@32|) true)) :qid |BucketMapidfy.162:22| :skolemid |4708| :pattern ( (|BucketMaps.__default.KeyValueMapOfBucket#requires| $ly@@721 |bucket#0@@32|)) )))
(assert  (and (forall ((arg0@@723 T@U) (arg1@@375 T@U) (arg2@@232 T@U) (arg3@@160 T@U) (arg4@@117 T@U) ) (! (= (type (|lambda#272| arg0@@723 arg1@@375 arg2@@232 arg3@@160 arg4@@117)) (MapType0Type BoxType boolType)) :qid |funType:lambda#272| :pattern ( (|lambda#272| arg0@@723 arg1@@375 arg2@@232 arg3@@160 arg4@@117)) )) (forall ((arg0@@724 T@U) (arg1@@376 T@U) ) (! (= (type (|lambda#273| arg0@@724 arg1@@376)) (MapType0Type BoxType BoxType)) :qid |funType:lambda#273| :pattern ( (|lambda#273| arg0@@724 arg1@@376)) ))))
(assert  (=> true (forall (($ly@@722 T@U) (|bucket#0@@33| T@U) ) (!  (=> (and (and (= (type $ly@@722) LayerTypeType) (= (type |bucket#0@@33|) (MapType BoxType BoxType))) (or (|BucketMaps.__default.KeyValueMapOfBucket#canCall| |bucket#0@@33|) ($Is |bucket#0@@33| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (forall ((|key#0@@206| T@U) ) (!  (=> (and (= (type |key#0@@206|) (SeqType BoxType)) ($Is |key#0@@206| Tclass.KeyType.Key)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |bucket#0@@33|) ($Box |key#0@@206|))) (and (and |ValueMessage.__default.DefineDefault#canCall| (|ValueMessage.__default.Merge#canCall| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@33|) ($Box |key#0@@206|))) (Lit ValueMessage.__default.DefineDefault))) |ValueMessage.__default.DefaultValue#canCall|)) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |bucket#0@@33|) ($Box |key#0@@206|))) (not (|Seq#Equal| (ValueMessage.Message.value (ValueMessage.__default.Merge ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@33|) ($Box |key#0@@206|))) (Lit ValueMessage.__default.DefineDefault))) ValueMessage.__default.DefaultValue))) (and |ValueMessage.__default.DefineDefault#canCall| (|ValueMessage.__default.Merge#canCall| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@33|) ($Box |key#0@@206|))) (Lit ValueMessage.__default.DefineDefault)))))) :qid |BucketMapidfy.164:9| :skolemid |4709| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@33|) ($Box |key#0@@206|)))) :pattern ( (MapType0Select (|Map#Domain| |bucket#0@@33|) ($Box |key#0@@206|))) )) (= (BucketMaps.__default.KeyValueMapOfBucket ($LS $ly@@722) |bucket#0@@33|) (|Map#Glue| (|lambda#272| Tclass.KeyType.Key (|Map#Domain| |bucket#0@@33|) (|Map#Elements| |bucket#0@@33|) (Lit ValueMessage.__default.DefineDefault) ValueMessage.__default.DefaultValue) (|lambda#273| (|Map#Elements| |bucket#0@@33|) (Lit ValueMessage.__default.DefineDefault)) (TMap Tclass.KeyType.Key Tclass.ValueType.Value))))) :qid |BucketMapidfy.162:22| :skolemid |4710| :pattern ( (BucketMaps.__default.KeyValueMapOfBucket ($LS $ly@@722) |bucket#0@@33|)) ))))
(assert  (=> true (forall (($ly@@723 T@U) (|bucket#0@@34| T@U) ) (!  (=> (and (and (= (type $ly@@723) LayerTypeType) (= (type |bucket#0@@34|) (MapType BoxType BoxType))) (or (|BucketMaps.__default.KeyValueMapOfBucket#canCall| (Lit |bucket#0@@34|)) ($Is |bucket#0@@34| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (forall ((|key#0@@207| T@U) ) (!  (=> (and (= (type |key#0@@207|) (SeqType BoxType)) ($Is |key#0@@207| Tclass.KeyType.Key)) (and (=> (U_2_bool (MapType0Select (|Map#Domain| |bucket#0@@34|) ($Box |key#0@@207|))) (and (and |ValueMessage.__default.DefineDefault#canCall| (|ValueMessage.__default.Merge#canCall| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |bucket#0@@34|)) ($Box |key#0@@207|))) (Lit ValueMessage.__default.DefineDefault))) |ValueMessage.__default.DefaultValue#canCall|)) (=> (and (U_2_bool (MapType0Select (|Map#Domain| |bucket#0@@34|) ($Box |key#0@@207|))) (not (|Seq#Equal| (ValueMessage.Message.value (ValueMessage.__default.Merge ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |bucket#0@@34|)) ($Box |key#0@@207|))) (Lit ValueMessage.__default.DefineDefault))) ValueMessage.__default.DefaultValue))) (and |ValueMessage.__default.DefineDefault#canCall| (|ValueMessage.__default.Merge#canCall| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (Lit |bucket#0@@34|)) ($Box |key#0@@207|))) (Lit ValueMessage.__default.DefineDefault)))))) :qid |BucketMapidfy.164:9| :skolemid |4711| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |bucket#0@@34|) ($Box |key#0@@207|)))) :pattern ( (MapType0Select (|Map#Domain| |bucket#0@@34|) ($Box |key#0@@207|))) )) (= (BucketMaps.__default.KeyValueMapOfBucket ($LS $ly@@723) (Lit |bucket#0@@34|)) (|Map#Glue| (|lambda#272| Tclass.KeyType.Key (|Map#Domain| |bucket#0@@34|) (|Map#Elements| (Lit |bucket#0@@34|)) (Lit ValueMessage.__default.DefineDefault) ValueMessage.__default.DefaultValue) (|lambda#273| (|Map#Elements| (Lit |bucket#0@@34|)) (Lit ValueMessage.__default.DefineDefault)) (TMap Tclass.KeyType.Key Tclass.ValueType.Value))))) :qid |BucketMapidfy.162:22| :weight 3 :skolemid |4712| :pattern ( (BucketMaps.__default.KeyValueMapOfBucket ($LS $ly@@723) (Lit |bucket#0@@34|))) ))))
(assert (forall ((arg0@@725 T@U) (arg1@@377 T@U) ) (! (= (type (BucketMaps.__default.SortedSeqOfKeyValueMap arg0@@725 arg1@@377)) (SeqType BoxType)) :qid |funType:BucketMaps.__default.SortedSeqOfKeyValueMap| :pattern ( (BucketMaps.__default.SortedSeqOfKeyValueMap arg0@@725 arg1@@377)) )))
(assert (forall (($ly@@724 T@U) (|m#0@@154| T@U) ) (!  (=> (and (= (type $ly@@724) LayerTypeType) (= (type |m#0@@154|) (MapType BoxType BoxType))) (= (BucketMaps.__default.SortedSeqOfKeyValueMap ($LS $ly@@724) |m#0@@154|) (BucketMaps.__default.SortedSeqOfKeyValueMap $ly@@724 |m#0@@154|))) :qid |BucketMapidfy.168:22| :skolemid |4713| :pattern ( (BucketMaps.__default.SortedSeqOfKeyValueMap ($LS $ly@@724) |m#0@@154|)) )))
(assert (forall (($ly@@725 T@U) (|m#0@@155| T@U) ) (!  (=> (and (= (type $ly@@725) LayerTypeType) (= (type |m#0@@155|) (MapType BoxType BoxType))) (= (BucketMaps.__default.SortedSeqOfKeyValueMap $ly@@725 |m#0@@155|) (BucketMaps.__default.SortedSeqOfKeyValueMap $LZ |m#0@@155|))) :qid |BucketMapidfy.168:22| :skolemid |4714| :pattern ( (BucketMaps.__default.SortedSeqOfKeyValueMap (AsFuelBottom $ly@@725) |m#0@@155|)) )))
(assert  (=> true (forall (($ly@@726 T@U) (|m#0@@156| T@U) ) (!  (=> (and (and (= (type $ly@@726) LayerTypeType) (= (type |m#0@@156|) (MapType BoxType BoxType))) (or (|BucketMaps.__default.SortedSeqOfKeyValueMap#canCall| |m#0@@156|) ($Is |m#0@@156| (TMap Tclass.KeyType.Key Tclass.ValueType.Value)))) ($Is (BucketMaps.__default.SortedSeqOfKeyValueMap $ly@@726 |m#0@@156|) (TSeq Tclass.UI.SuccResult))) :qid |BucketMapidfy.168:22| :skolemid |4715| :pattern ( (BucketMaps.__default.SortedSeqOfKeyValueMap $ly@@726 |m#0@@156|)) ))))
(assert (forall (($ly@@727 T@U) (|m#0@@157| T@U) ) (!  (=> (and (and (= (type $ly@@727) LayerTypeType) (= (type |m#0@@157|) (MapType BoxType BoxType))) ($Is |m#0@@157| (TMap Tclass.KeyType.Key Tclass.ValueType.Value))) (= (|BucketMaps.__default.SortedSeqOfKeyValueMap#requires| $ly@@727 |m#0@@157|) true)) :qid |BucketMapidfy.168:22| :skolemid |4716| :pattern ( (|BucketMaps.__default.SortedSeqOfKeyValueMap#requires| $ly@@727 |m#0@@157|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.maximumOpt) LayerTypeType))
(assert  (=> true (forall (($ly@@728 T@U) (|m#0@@158| T@U) ) (!  (=> (and (and (= (type $ly@@728) LayerTypeType) (= (type |m#0@@158|) (MapType BoxType BoxType))) (or (|BucketMaps.__default.SortedSeqOfKeyValueMap#canCall| |m#0@@158|) ($Is |m#0@@158| (TMap Tclass.KeyType.Key Tclass.ValueType.Value)))) (and (and (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| (|Map#Domain| |m#0@@158|)) (let ((|max#0| (Lexicographic__Byte__Order.__default.maximumOpt StartFuel_Lexicographic_Byte_Order._default.maximumOpt (|Map#Domain| |m#0@@158|)))) (=> (not (Options.Option.None_q |max#0|)) (and (|Maps.__default.MapRemove1#canCall| (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value |m#0@@158| (Options.Option.value |max#0|)) (|BucketMaps.__default.SortedSeqOfKeyValueMap#canCall| (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value |m#0@@158| (Options.Option.value |max#0|))))))) (= (BucketMaps.__default.SortedSeqOfKeyValueMap ($LS $ly@@728) |m#0@@158|) (let ((|max#0@@0| (Lexicographic__Byte__Order.__default.maximumOpt StartFuel_Lexicographic_Byte_Order._default.maximumOpt (|Map#Domain| |m#0@@158|)))) (ite (Options.Option.None_q |max#0@@0|) (|Seq#Empty| BoxType) (|Seq#Append| (BucketMaps.__default.SortedSeqOfKeyValueMap $ly@@728 (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value |m#0@@158| (Options.Option.value |max#0@@0|))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#UI.SuccResult.SuccResult| ($Unbox (SeqType BoxType) (Options.Option.value |max#0@@0|)) ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| |m#0@@158|) (Options.Option.value |max#0@@0|)))))))))))) :qid |BucketMapidfy.168:22| :skolemid |4717| :pattern ( (BucketMaps.__default.SortedSeqOfKeyValueMap ($LS $ly@@728) |m#0@@158|)) ))))
(assert  (=> true (forall (($ly@@729 T@U) (|m#0@@159| T@U) ) (!  (=> (and (and (= (type $ly@@729) LayerTypeType) (= (type |m#0@@159|) (MapType BoxType BoxType))) (or (|BucketMaps.__default.SortedSeqOfKeyValueMap#canCall| (Lit |m#0@@159|)) ($Is |m#0@@159| (TMap Tclass.KeyType.Key Tclass.ValueType.Value)))) (and (and (|Lexicographic__Byte__Order.__default.maximumOpt#canCall| (Lit (|Map#Domain| (Lit |m#0@@159|)))) (let ((|max#1| (Lexicographic__Byte__Order.__default.maximumOpt StartFuel_Lexicographic_Byte_Order._default.maximumOpt (Lit (|Map#Domain| (Lit |m#0@@159|)))))) (=> (not (Options.Option.None_q |max#1|)) (and (|Maps.__default.MapRemove1#canCall| (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value (Lit |m#0@@159|) (Options.Option.value |max#1|)) (|BucketMaps.__default.SortedSeqOfKeyValueMap#canCall| (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value (Lit |m#0@@159|) (Options.Option.value |max#1|))))))) (= (BucketMaps.__default.SortedSeqOfKeyValueMap ($LS $ly@@729) (Lit |m#0@@159|)) (let ((|max#1@@0| (Lexicographic__Byte__Order.__default.maximumOpt StartFuel_Lexicographic_Byte_Order._default.maximumOpt (Lit (|Map#Domain| (Lit |m#0@@159|)))))) (ite (Options.Option.None_q |max#1@@0|) (|Seq#Empty| BoxType) (|Seq#Append| (BucketMaps.__default.SortedSeqOfKeyValueMap ($LS $ly@@729) (Maps.__default.MapRemove1 (TSeq Tclass.NativeTypes.byte) Tclass.ValueType.Value (Lit |m#0@@159|) (Options.Option.value |max#1@@0|))) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (|#UI.SuccResult.SuccResult| ($Unbox (SeqType BoxType) (Options.Option.value |max#1@@0|)) ($Unbox (SeqType BoxType) (MapType0Select (|Map#Elements| (Lit |m#0@@159|)) (Options.Option.value |max#1@@0|)))))))))))) :qid |BucketMapidfy.168:22| :weight 3 :skolemid |4718| :pattern ( (BucketMaps.__default.SortedSeqOfKeyValueMap ($LS $ly@@729) (Lit |m#0@@159|))) ))))
(assert (= (type Tclass.Multisets.__default) TyType))
(assert (= (Tag Tclass.Multisets.__default) Tagclass.Multisets.__default))
(assert (= (TagFamily Tclass.Multisets.__default) tytagFamily$_default))
(assert (forall ((bx@@192 T@U) ) (!  (=> (and (= (type bx@@192) BoxType) ($IsBox bx@@192 Tclass.Multisets.__default)) (and (= ($Box ($Unbox refType bx@@192)) bx@@192) ($Is ($Unbox refType bx@@192) Tclass.Multisets.__default))) :qid |unknown.0:0| :skolemid |4719| :pattern ( ($IsBox bx@@192 Tclass.Multisets.__default)) )))
(assert (forall (($o@@62 T@U) ) (!  (=> (= (type $o@@62) refType) (= ($Is $o@@62 Tclass.Multisets.__default)  (or (= $o@@62 null) (= (dtype $o@@62) Tclass.Multisets.__default)))) :qid |unknown.0:0| :skolemid |4720| :pattern ( ($Is $o@@62 Tclass.Multisets.__default)) )))
(assert (forall (($o@@63 T@U) ($h@@171 T@U) ) (!  (=> (and (= (type $o@@63) refType) (= (type $h@@171) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@63 Tclass.Multisets.__default $h@@171)  (or (= $o@@63 null) (U_2_bool (MapType1Select (MapType0Select $h@@171 $o@@63) alloc))))) :qid |unknown.0:0| :skolemid |4721| :pattern ( ($IsAlloc $o@@63 Tclass.Multisets.__default $h@@171)) )))
(assert (forall ((arg0@@726 T@U) (arg1@@378 T@U) (arg2@@233 T@U) ) (! (= (type (Multisets.__default.Choose arg0@@726 arg1@@378 arg2@@233)) BoxType) :qid |funType:Multisets.__default.Choose| :pattern ( (Multisets.__default.Choose arg0@@726 arg1@@378 arg2@@233)) )))
(assert (forall ((Multisets._default.Choose$A T@U) ($ly@@730 T@U) (|s#0@@313| T@U) ) (!  (=> (and (and (= (type Multisets._default.Choose$A) TyType) (= (type $ly@@730) LayerTypeType)) (= (type |s#0@@313|) (MapType0Type BoxType intType))) (= (Multisets.__default.Choose Multisets._default.Choose$A ($LS $ly@@730) |s#0@@313|) (Multisets.__default.Choose Multisets._default.Choose$A $ly@@730 |s#0@@313|))) :qid |unknown.0:0| :skolemid |4722| :pattern ( (Multisets.__default.Choose Multisets._default.Choose$A ($LS $ly@@730) |s#0@@313|)) )))
(assert (forall ((Multisets._default.Choose$A@@0 T@U) ($ly@@731 T@U) (|s#0@@314| T@U) ) (!  (=> (and (and (= (type Multisets._default.Choose$A@@0) TyType) (= (type $ly@@731) LayerTypeType)) (= (type |s#0@@314|) (MapType0Type BoxType intType))) (= (Multisets.__default.Choose Multisets._default.Choose$A@@0 $ly@@731 |s#0@@314|) (Multisets.__default.Choose Multisets._default.Choose$A@@0 $LZ |s#0@@314|))) :qid |unknown.0:0| :skolemid |4723| :pattern ( (Multisets.__default.Choose Multisets._default.Choose$A@@0 (AsFuelBottom $ly@@731) |s#0@@314|)) )))
(assert  (=> true (forall ((Multisets._default.Choose$A@@1 T@U) ($ly@@732 T@U) (|s#0@@315| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.Choose$A@@1) TyType) (= (type $ly@@732) LayerTypeType)) (= (type |s#0@@315|) (MapType0Type BoxType intType))) (or (|Multisets.__default.Choose#canCall| Multisets._default.Choose$A@@1 |s#0@@315|) (and ($Is |s#0@@315| (TMultiSet Multisets._default.Choose$A@@1)) (< 0 (|MultiSet#Card| |s#0@@315|))))) (and (> (U_2_int (MapType0Select |s#0@@315| (Multisets.__default.Choose Multisets._default.Choose$A@@1 $ly@@732 |s#0@@315|))) 0) ($IsBox (Multisets.__default.Choose Multisets._default.Choose$A@@1 $ly@@732 |s#0@@315|) Multisets._default.Choose$A@@1))) :qid |unknown.0:0| :skolemid |4724| :pattern ( (Multisets.__default.Choose Multisets._default.Choose$A@@1 $ly@@732 |s#0@@315|)) ))))
(assert (forall ((Multisets._default.Choose$A@@2 T@U) ($ly@@733 T@U) ($Heap@@85 T@U) (|s#0@@316| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.Choose$A@@2) TyType) (= (type $ly@@733) LayerTypeType)) (= (type $Heap@@85) (MapType0Type refType MapType1Type))) (= (type |s#0@@316|) (MapType0Type BoxType intType))) (and ($IsGoodHeap $Heap@@85) ($Is |s#0@@316| (TMultiSet Multisets._default.Choose$A@@2)))) (= (|Multisets.__default.Choose#requires| Multisets._default.Choose$A@@2 $ly@@733 |s#0@@316|) (< 0 (|MultiSet#Card| |s#0@@316|)))) :qid |unknown.0:0| :skolemid |4725| :pattern ( (|Multisets.__default.Choose#requires| Multisets._default.Choose$A@@2 $ly@@733 |s#0@@316|) ($IsGoodHeap $Heap@@85)) )))
(assert (forall ((arg0@@727 T@U) (arg1@@379 T@U) ) (! (= (type (|$let#44_a| arg0@@727 arg1@@379)) BoxType) :qid |funType:$let#44_a| :pattern ( (|$let#44_a| arg0@@727 arg1@@379)) )))
(assert (forall ((Multisets._default.Choose$A@@3 T@U) (s@@60 T@U) ) (!  (=> (and (and (= (type Multisets._default.Choose$A@@3) TyType) (= (type s@@60) (MapType0Type BoxType intType))) (|$let#44$canCall| Multisets._default.Choose$A@@3 s@@60)) (> (U_2_int (MapType0Select s@@60 (|$let#44_a| Multisets._default.Choose$A@@3 s@@60))) 0)) :qid |Multisetsidfy.19:5| :skolemid |4726| :pattern ( (|$let#44_a| Multisets._default.Choose$A@@3 s@@60)) )))
(assert  (=> true (forall ((Multisets._default.Choose$A@@4 T@U) ($ly@@734 T@U) ($Heap@@86 T@U) (|s#0@@317| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.Choose$A@@4) TyType) (= (type $ly@@734) LayerTypeType)) (= (type $Heap@@86) (MapType0Type refType MapType1Type))) (= (type |s#0@@317|) (MapType0Type BoxType intType))) (or (|Multisets.__default.Choose#canCall| Multisets._default.Choose$A@@4 |s#0@@317|) (and (and ($IsGoodHeap $Heap@@86) ($Is |s#0@@317| (TMultiSet Multisets._default.Choose$A@@4))) (< 0 (|MultiSet#Card| |s#0@@317|))))) (and (|$let#44$canCall| Multisets._default.Choose$A@@4 |s#0@@317|) (= (Multisets.__default.Choose Multisets._default.Choose$A@@4 ($LS $ly@@734) |s#0@@317|) (let ((|a#0@@211| (|$let#44_a| Multisets._default.Choose$A@@4 |s#0@@317|))) |a#0@@211|)))) :qid |unknown.0:0| :skolemid |4727| :pattern ( (Multisets.__default.Choose Multisets._default.Choose$A@@4 ($LS $ly@@734) |s#0@@317|) ($IsGoodHeap $Heap@@86)) ))))
(assert  (=> true (forall ((Multisets._default.Choose$A@@5 T@U) ($ly@@735 T@U) ($Heap@@87 T@U) (|s#0@@318| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.Choose$A@@5) TyType) (= (type $ly@@735) LayerTypeType)) (= (type $Heap@@87) (MapType0Type refType MapType1Type))) (= (type |s#0@@318|) (MapType0Type BoxType intType))) (or (|Multisets.__default.Choose#canCall| Multisets._default.Choose$A@@5 (Lit |s#0@@318|)) (and (and ($IsGoodHeap $Heap@@87) ($Is |s#0@@318| (TMultiSet Multisets._default.Choose$A@@5))) (< 0 (|MultiSet#Card| (Lit |s#0@@318|)))))) (and (|$let#44$canCall| Multisets._default.Choose$A@@5 (Lit |s#0@@318|)) (= (Multisets.__default.Choose Multisets._default.Choose$A@@5 ($LS $ly@@735) (Lit |s#0@@318|)) (let ((|a#1@@9| (|$let#44_a| Multisets._default.Choose$A@@5 (Lit |s#0@@318|)))) |a#1@@9|)))) :qid |unknown.0:0| :weight 3 :skolemid |4728| :pattern ( (Multisets.__default.Choose Multisets._default.Choose$A@@5 ($LS $ly@@735) (Lit |s#0@@318|)) ($IsGoodHeap $Heap@@87)) ))))
(assert (forall ((arg0@@728 T@U) (arg1@@380 T@U) (arg2@@234 T@U) (arg3@@161 T@U) (arg4@@118 T@U) (arg5@@77 T@U) ) (! (= (type (Multisets.__default.Apply arg0@@728 arg1@@380 arg2@@234 arg3@@161 arg4@@118 arg5@@77)) (MapType0Type BoxType intType)) :qid |funType:Multisets.__default.Apply| :pattern ( (Multisets.__default.Apply arg0@@728 arg1@@380 arg2@@234 arg3@@161 arg4@@118 arg5@@77)) )))
(assert (forall ((Multisets._default.Apply$A T@U) (Multisets._default.Apply$B T@U) ($ly@@736 T@U) ($Heap@@88 T@U) (|fn#0| T@U) (|s#0@@319| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.Apply$A) TyType) (= (type Multisets._default.Apply$B) TyType)) (= (type $ly@@736) LayerTypeType)) (= (type $Heap@@88) (MapType0Type refType MapType1Type))) (= (type |fn#0|) HandleTypeType)) (= (type |s#0@@319|) (MapType0Type BoxType intType))) (= (Multisets.__default.Apply Multisets._default.Apply$A Multisets._default.Apply$B ($LS $ly@@736) $Heap@@88 |fn#0| |s#0@@319|) (Multisets.__default.Apply Multisets._default.Apply$A Multisets._default.Apply$B $ly@@736 $Heap@@88 |fn#0| |s#0@@319|))) :qid |unknown.0:0| :skolemid |4729| :pattern ( (Multisets.__default.Apply Multisets._default.Apply$A Multisets._default.Apply$B ($LS $ly@@736) $Heap@@88 |fn#0| |s#0@@319|)) )))
(assert (forall ((Multisets._default.Apply$A@@0 T@U) (Multisets._default.Apply$B@@0 T@U) ($ly@@737 T@U) ($Heap@@89 T@U) (|fn#0@@0| T@U) (|s#0@@320| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.Apply$A@@0) TyType) (= (type Multisets._default.Apply$B@@0) TyType)) (= (type $ly@@737) LayerTypeType)) (= (type $Heap@@89) (MapType0Type refType MapType1Type))) (= (type |fn#0@@0|) HandleTypeType)) (= (type |s#0@@320|) (MapType0Type BoxType intType))) (= (Multisets.__default.Apply Multisets._default.Apply$A@@0 Multisets._default.Apply$B@@0 $ly@@737 $Heap@@89 |fn#0@@0| |s#0@@320|) (Multisets.__default.Apply Multisets._default.Apply$A@@0 Multisets._default.Apply$B@@0 $LZ $Heap@@89 |fn#0@@0| |s#0@@320|))) :qid |unknown.0:0| :skolemid |4730| :pattern ( (Multisets.__default.Apply Multisets._default.Apply$A@@0 Multisets._default.Apply$B@@0 (AsFuelBottom $ly@@737) $Heap@@89 |fn#0@@0| |s#0@@320|)) )))
(assert (forall ((Multisets._default.Apply$A@@1 T@U) (Multisets._default.Apply$B@@1 T@U) ($ly@@738 T@U) ($h0@@4 T@U) ($h1@@4 T@U) (|fn#0@@1| T@U) (|s#0@@321| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Multisets._default.Apply$A@@1) TyType) (= (type Multisets._default.Apply$B@@1) TyType)) (= (type $ly@@738) LayerTypeType)) (= (type $h0@@4) (MapType0Type refType MapType1Type))) (= (type $h1@@4) (MapType0Type refType MapType1Type))) (= (type |fn#0@@1|) HandleTypeType)) (= (type |s#0@@321|) (MapType0Type BoxType intType))) (and (and (and ($IsGoodHeap $h0@@4) ($IsGoodHeap $h1@@4)) (or (|Multisets.__default.Apply#canCall| Multisets._default.Apply$A@@1 Multisets._default.Apply$B@@1 $h0@@4 |fn#0@@1| |s#0@@321|) (and ($Is |fn#0@@1| (Tclass._System.___hFunc1 Multisets._default.Apply$A@@1 Multisets._default.Apply$B@@1)) ($Is |s#0@@321| (TMultiSet Multisets._default.Apply$A@@1))))) (and ($IsHeapAnchor $h0@@4) ($HeapSucc $h0@@4 $h1@@4)))) (forall (($o@@64 T@U) ($f@@4 T@U) ) (! (let ((alpha@@11 (FieldTypeInv0 (type $f@@4)))) (=> (and (and (= (type $o@@64) refType) (= (type $f@@4) (FieldType alpha@@11))) (and (not (= $o@@64 null)) (exists ((|x#0@@14| T@U) (|o#0@@1| T@U) ) (!  (and (and (= (type |x#0@@14|) BoxType) (= (type |o#0@@1|) refType)) (and (and (and ($IsBox |x#0@@14| Multisets._default.Apply$A@@1) ($Is |o#0@@1| Tclass._System.object?)) (and (> (U_2_int (MapType0Select |s#0@@321| |x#0@@14|)) 0) (U_2_bool (MapType0Select (Reads1 Multisets._default.Apply$A@@1 Multisets._default.Apply$B@@1 $h0@@4 |fn#0@@1| |x#0@@14|) ($Box |o#0@@1|))))) (= ($Box $o@@64) ($Box |o#0@@1|)))) :qid |Multisetsidfy.26:15| :skolemid |4731| :pattern ( (MapType0Select (Reads1 Multisets._default.Apply$A@@1 Multisets._default.Apply$B@@1 $h0@@4 |fn#0@@1| |x#0@@14|) ($Box |o#0@@1|))) )))) (= (MapType1Select (MapType0Select $h0@@4 $o@@64) $f@@4) (MapType1Select (MapType0Select $h1@@4 $o@@64) $f@@4)))) :qid |unknown.0:0| :skolemid |4732| :no-pattern (type $o@@64) :no-pattern (type $f@@4) :no-pattern (U_2_int $o@@64) :no-pattern (U_2_bool $o@@64) :no-pattern (U_2_int $f@@4) :no-pattern (U_2_bool $f@@4) ))) (= (Multisets.__default.Apply Multisets._default.Apply$A@@1 Multisets._default.Apply$B@@1 $ly@@738 $h0@@4 |fn#0@@1| |s#0@@321|) (Multisets.__default.Apply Multisets._default.Apply$A@@1 Multisets._default.Apply$B@@1 $ly@@738 $h1@@4 |fn#0@@1| |s#0@@321|))) :qid |unknown.0:0| :skolemid |4733| :pattern ( ($IsHeapAnchor $h0@@4) ($HeapSucc $h0@@4 $h1@@4) (Multisets.__default.Apply Multisets._default.Apply$A@@1 Multisets._default.Apply$B@@1 $ly@@738 $h1@@4 |fn#0@@1| |s#0@@321|)) )))
(assert  (=> true (forall ((Multisets._default.Apply$A@@2 T@U) (Multisets._default.Apply$B@@2 T@U) ($ly@@739 T@U) ($Heap@@90 T@U) (|fn#0@@2| T@U) (|s#0@@322| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.Apply$A@@2) TyType) (= (type Multisets._default.Apply$B@@2) TyType)) (= (type $ly@@739) LayerTypeType)) (= (type $Heap@@90) (MapType0Type refType MapType1Type))) (= (type |fn#0@@2|) HandleTypeType)) (= (type |s#0@@322|) (MapType0Type BoxType intType))) (or (|Multisets.__default.Apply#canCall| Multisets._default.Apply$A@@2 Multisets._default.Apply$B@@2 $Heap@@90 |fn#0@@2| |s#0@@322|) (and (and (and ($IsGoodHeap $Heap@@90) ($Is |fn#0@@2| (Tclass._System.___hFunc1 Multisets._default.Apply$A@@2 Multisets._default.Apply$B@@2))) ($Is |s#0@@322| (TMultiSet Multisets._default.Apply$A@@2))) (forall ((|x#1@@11| T@U) ) (!  (=> (= (type |x#1@@11|) BoxType) (=> (and ($IsBox |x#1@@11| Multisets._default.Apply$A@@2) (> (U_2_int (MapType0Select |s#0@@322| |x#1@@11|)) 0)) (Requires1 Multisets._default.Apply$A@@2 Multisets._default.Apply$B@@2 $Heap@@90 |fn#0@@2| |x#1@@11|))) :qid |Multisetsidfy.24:21| :skolemid |4734| :pattern ( (Requires1 Multisets._default.Apply$A@@2 Multisets._default.Apply$B@@2 $Heap@@90 |fn#0@@2| |x#1@@11|)) :pattern ( (MapType0Select |s#0@@322| |x#1@@11|)) ))))) (and (= (|MultiSet#Card| (Multisets.__default.Apply Multisets._default.Apply$A@@2 Multisets._default.Apply$B@@2 $ly@@739 $Heap@@90 |fn#0@@2| |s#0@@322|)) (|MultiSet#Card| |s#0@@322|)) ($Is (Multisets.__default.Apply Multisets._default.Apply$A@@2 Multisets._default.Apply$B@@2 $ly@@739 $Heap@@90 |fn#0@@2| |s#0@@322|) (TMultiSet Multisets._default.Apply$B@@2)))) :qid |unknown.0:0| :skolemid |4735| :pattern ( (Multisets.__default.Apply Multisets._default.Apply$A@@2 Multisets._default.Apply$B@@2 $ly@@739 $Heap@@90 |fn#0@@2| |s#0@@322|)) ))))
(assert (forall ((Multisets._default.Apply$A@@3 T@U) (Multisets._default.Apply$B@@3 T@U) ($ly@@740 T@U) ($Heap@@91 T@U) (|fn#0@@3| T@U) (|s#0@@323| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.Apply$A@@3) TyType) (= (type Multisets._default.Apply$B@@3) TyType)) (= (type $ly@@740) LayerTypeType)) (= (type $Heap@@91) (MapType0Type refType MapType1Type))) (= (type |fn#0@@3|) HandleTypeType)) (= (type |s#0@@323|) (MapType0Type BoxType intType))) (and (and ($IsGoodHeap $Heap@@91) ($Is |fn#0@@3| (Tclass._System.___hFunc1 Multisets._default.Apply$A@@3 Multisets._default.Apply$B@@3))) ($Is |s#0@@323| (TMultiSet Multisets._default.Apply$A@@3)))) (= (|Multisets.__default.Apply#requires| Multisets._default.Apply$A@@3 Multisets._default.Apply$B@@3 $ly@@740 $Heap@@91 |fn#0@@3| |s#0@@323|) (forall ((|x#2| T@U) ) (!  (=> (= (type |x#2|) BoxType) (=> (and ($IsBox |x#2| Multisets._default.Apply$A@@3) (> (U_2_int (MapType0Select |s#0@@323| |x#2|)) 0)) (Requires1 Multisets._default.Apply$A@@3 Multisets._default.Apply$B@@3 $Heap@@91 |fn#0@@3| |x#2|))) :qid |Multisetsidfy.24:21| :skolemid |4736| :pattern ( (Requires1 Multisets._default.Apply$A@@3 Multisets._default.Apply$B@@3 $Heap@@91 |fn#0@@3| |x#2|)) :pattern ( (MapType0Select |s#0@@323| |x#2|)) )))) :qid |unknown.0:0| :skolemid |4737| :pattern ( (|Multisets.__default.Apply#requires| Multisets._default.Apply$A@@3 Multisets._default.Apply$B@@3 $ly@@740 $Heap@@91 |fn#0@@3| |s#0@@323|) ($IsGoodHeap $Heap@@91)) )))
(assert (= (type StartFuel_Multisets._default.Choose) LayerTypeType))
(assert  (=> true (forall ((Multisets._default.Apply$A@@4 T@U) (Multisets._default.Apply$B@@4 T@U) ($ly@@741 T@U) ($Heap@@92 T@U) (|fn#0@@4| T@U) (|s#0@@324| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.Apply$A@@4) TyType) (= (type Multisets._default.Apply$B@@4) TyType)) (= (type $ly@@741) LayerTypeType)) (= (type $Heap@@92) (MapType0Type refType MapType1Type))) (= (type |fn#0@@4|) HandleTypeType)) (= (type |s#0@@324|) (MapType0Type BoxType intType))) (or (|Multisets.__default.Apply#canCall| Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 $Heap@@92 |fn#0@@4| |s#0@@324|) (and (and (and ($IsGoodHeap $Heap@@92) ($Is |fn#0@@4| (Tclass._System.___hFunc1 Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4))) ($Is |s#0@@324| (TMultiSet Multisets._default.Apply$A@@4))) (forall ((|x#2@@0| T@U) ) (!  (=> (= (type |x#2@@0|) BoxType) (=> (and ($IsBox |x#2@@0| Multisets._default.Apply$A@@4) (> (U_2_int (MapType0Select |s#0@@324| |x#2@@0|)) 0)) (Requires1 Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 $Heap@@92 |fn#0@@4| |x#2@@0|))) :qid |Multisetsidfy.24:21| :skolemid |4736| :pattern ( (Requires1 Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 $Heap@@92 |fn#0@@4| |x#2@@0|)) :pattern ( (MapType0Select |s#0@@324| |x#2@@0|)) ))))) (and (=> (not (= (|MultiSet#Card| |s#0@@324|) (LitInt 0))) (and (|Multisets.__default.Choose#canCall| Multisets._default.Apply$A@@4 |s#0@@324|) (let ((|x#3| (Multisets.__default.Choose Multisets._default.Apply$A@@4 StartFuel_Multisets._default.Choose |s#0@@324|))) (|Multisets.__default.Apply#canCall| Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 $Heap@@92 |fn#0@@4| (|MultiSet#Difference| |s#0@@324| (|MultiSet#UnionOne| (|MultiSet#Empty| BoxType) |x#3|)))))) (= (Multisets.__default.Apply Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 ($LS $ly@@741) $Heap@@92 |fn#0@@4| |s#0@@324|) (ite (= (|MultiSet#Card| |s#0@@324|) (LitInt 0)) (|MultiSet#Empty| BoxType) (let ((|x#3@@0| (Multisets.__default.Choose Multisets._default.Apply$A@@4 StartFuel_Multisets._default.Choose |s#0@@324|))) (|MultiSet#Union| (|MultiSet#UnionOne| (|MultiSet#Empty| BoxType) (Apply1 Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 $Heap@@92 |fn#0@@4| |x#3@@0|)) (Multisets.__default.Apply Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 $ly@@741 $Heap@@92 |fn#0@@4| (|MultiSet#Difference| |s#0@@324| (|MultiSet#UnionOne| (|MultiSet#Empty| BoxType) |x#3@@0|))))))))) :qid |unknown.0:0| :skolemid |4738| :pattern ( (Multisets.__default.Apply Multisets._default.Apply$A@@4 Multisets._default.Apply$B@@4 ($LS $ly@@741) $Heap@@92 |fn#0@@4| |s#0@@324|) ($IsGoodHeap $Heap@@92)) ))))
(assert (forall ((Multisets._default.Foldable$A T@U) ($h0@@5 T@U) ($h1@@5 T@U) (|zero#0| T@U) (|add#0| T@U) (|inv#0| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Multisets._default.Foldable$A) TyType) (= (type $h0@@5) (MapType0Type refType MapType1Type))) (= (type $h1@@5) (MapType0Type refType MapType1Type))) (= (type |zero#0|) BoxType)) (= (type |add#0|) HandleTypeType)) (= (type |inv#0|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@5) ($IsGoodHeap $h1@@5)) (or (|Multisets.__default.Foldable#canCall| Multisets._default.Foldable$A $h0@@5 |zero#0| |add#0| |inv#0|) (and (and ($IsBox |zero#0| Multisets._default.Foldable$A) ($Is |add#0| (Tclass._System.___hFunc2 Multisets._default.Foldable$A Multisets._default.Foldable$A Multisets._default.Foldable$A))) ($Is |inv#0| (Tclass._System.___hTotalFunc1 Multisets._default.Foldable$A TBool))))) (and ($IsHeapAnchor $h0@@5) ($HeapSucc $h0@@5 $h1@@5)))) (forall (($o@@65 T@U) ($f@@5 T@U) ) (! (let ((alpha@@12 (FieldTypeInv0 (type $f@@5)))) (=> (and (and (= (type $o@@65) refType) (= (type $f@@5) (FieldType alpha@@12))) (and (not (= $o@@65 null)) (exists ((|x#0@@15| T@U) (|y#0@@23| T@U) (|o#0@@2| T@U) ) (!  (and (and (and (= (type |x#0@@15|) BoxType) (= (type |y#0@@23|) BoxType)) (= (type |o#0@@2|) refType)) (and (and (and (and ($IsBox |x#0@@15| Multisets._default.Foldable$A) ($IsBox |y#0@@23| Multisets._default.Foldable$A)) ($Is |o#0@@2| Tclass._System.object?)) (and (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A TBool $h0@@5 |inv#0| |x#0@@15|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A TBool $h0@@5 |inv#0| |y#0@@23|)))) (U_2_bool (MapType0Select (Reads2 Multisets._default.Foldable$A Multisets._default.Foldable$A Multisets._default.Foldable$A $h0@@5 |add#0| |x#0@@15| |y#0@@23|) ($Box |o#0@@2|))))) (= ($Box $o@@65) ($Box |o#0@@2|)))) :qid |Multisetsidfy.146:15| :skolemid |4739| :pattern ( (MapType0Select (Reads2 Multisets._default.Foldable$A Multisets._default.Foldable$A Multisets._default.Foldable$A $h0@@5 |add#0| |x#0@@15| |y#0@@23|) ($Box |o#0@@2|))) )))) (= (MapType1Select (MapType0Select $h0@@5 $o@@65) $f@@5) (MapType1Select (MapType0Select $h1@@5 $o@@65) $f@@5)))) :qid |unknown.0:0| :skolemid |4740| :no-pattern (type $o@@65) :no-pattern (type $f@@5) :no-pattern (U_2_int $o@@65) :no-pattern (U_2_bool $o@@65) :no-pattern (U_2_int $f@@5) :no-pattern (U_2_bool $f@@5) ))) (= (Multisets.__default.Foldable Multisets._default.Foldable$A $h0@@5 |zero#0| |add#0| |inv#0|) (Multisets.__default.Foldable Multisets._default.Foldable$A $h1@@5 |zero#0| |add#0| |inv#0|))) :qid |unknown.0:0| :skolemid |4741| :pattern ( ($IsHeapAnchor $h0@@5) ($HeapSucc $h0@@5 $h1@@5) (Multisets.__default.Foldable Multisets._default.Foldable$A $h1@@5 |zero#0| |add#0| |inv#0|)) )))
(assert  (=> true (forall ((Multisets._default.Foldable$A@@0 T@U) ($Heap@@93 T@U) (|zero#0@@0| T@U) (|add#0@@0| T@U) (|inv#0@@0| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.Foldable$A@@0) TyType) (= (type $Heap@@93) (MapType0Type refType MapType1Type))) (= (type |zero#0@@0|) BoxType)) (= (type |add#0@@0|) HandleTypeType)) (= (type |inv#0@@0|) HandleTypeType)) (or (|Multisets.__default.Foldable#canCall| Multisets._default.Foldable$A@@0 $Heap@@93 |zero#0@@0| |add#0@@0| |inv#0@@0|) (and (and (and ($IsGoodHeap $Heap@@93) ($IsBox |zero#0@@0| Multisets._default.Foldable$A@@0)) ($Is |add#0@@0| (Tclass._System.___hFunc2 Multisets._default.Foldable$A@@0 Multisets._default.Foldable$A@@0 Multisets._default.Foldable$A@@0))) ($Is |inv#0@@0| (Tclass._System.___hTotalFunc1 Multisets._default.Foldable$A@@0 TBool))))) true) :qid |unknown.0:0| :skolemid |4742| :pattern ( (Multisets.__default.Foldable Multisets._default.Foldable$A@@0 $Heap@@93 |zero#0@@0| |add#0@@0| |inv#0@@0|)) ))))
(assert (forall ((Multisets._default.Foldable$A@@1 T@U) ($Heap@@94 T@U) (|zero#0@@1| T@U) (|add#0@@1| T@U) (|inv#0@@1| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.Foldable$A@@1) TyType) (= (type $Heap@@94) (MapType0Type refType MapType1Type))) (= (type |zero#0@@1|) BoxType)) (= (type |add#0@@1|) HandleTypeType)) (= (type |inv#0@@1|) HandleTypeType)) (and (and (and ($IsGoodHeap $Heap@@94) ($IsBox |zero#0@@1| Multisets._default.Foldable$A@@1)) ($Is |add#0@@1| (Tclass._System.___hFunc2 Multisets._default.Foldable$A@@1 Multisets._default.Foldable$A@@1 Multisets._default.Foldable$A@@1))) ($Is |inv#0@@1| (Tclass._System.___hTotalFunc1 Multisets._default.Foldable$A@@1 TBool)))) (= (|Multisets.__default.Foldable#requires| Multisets._default.Foldable$A@@1 $Heap@@94 |zero#0@@1| |add#0@@1| |inv#0@@1|) true)) :qid |unknown.0:0| :skolemid |4743| :pattern ( (|Multisets.__default.Foldable#requires| Multisets._default.Foldable$A@@1 $Heap@@94 |zero#0@@1| |add#0@@1| |inv#0@@1|) ($IsGoodHeap $Heap@@94)) )))
(assert  (=> true (forall ((Multisets._default.Foldable$A@@2 T@U) ($Heap@@95 T@U) (|zero#0@@2| T@U) (|add#0@@2| T@U) (|inv#0@@2| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.Foldable$A@@2) TyType) (= (type $Heap@@95) (MapType0Type refType MapType1Type))) (= (type |zero#0@@2|) BoxType)) (= (type |add#0@@2|) HandleTypeType)) (= (type |inv#0@@2|) HandleTypeType)) (or (|Multisets.__default.Foldable#canCall| Multisets._default.Foldable$A@@2 $Heap@@95 |zero#0@@2| |add#0@@2| |inv#0@@2|) (and (and (and ($IsGoodHeap $Heap@@95) ($IsBox |zero#0@@2| Multisets._default.Foldable$A@@2)) ($Is |add#0@@2| (Tclass._System.___hFunc2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2))) ($Is |inv#0@@2| (Tclass._System.___hTotalFunc1 Multisets._default.Foldable$A@@2 TBool))))) (and (=> (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@95 |inv#0@@2| |zero#0@@2|))) (forall ((|x#1@@12| T@U) (|y#1@@11| T@U) ) (!  (=> (and (and (and (= (type |x#1@@12|) BoxType) (= (type |y#1@@11|) BoxType)) (and ($IsBox |x#1@@12| Multisets._default.Foldable$A@@2) ($IsBox |y#1@@11| Multisets._default.Foldable$A@@2))) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@95 |inv#0@@2| |x#1@@12|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@95 |inv#0@@2| |y#1@@11|))))) true) :qid |Multisetsidfy.149:15| :skolemid |4746| :pattern ( (Requires2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 $Heap@@95 |add#0@@2| |x#1@@12| |y#1@@11|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@95 |inv#0@@2| |y#1@@11|)) ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@95 |inv#0@@2| |x#1@@12|))) ))) (= (Multisets.__default.Foldable Multisets._default.Foldable$A@@2 $Heap@@95 |zero#0@@2| |add#0@@2| |inv#0@@2|)  (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@95 |inv#0@@2| |zero#0@@2|))) (and (forall ((|x#1@@13| T@U) (|y#1@@12| T@U) ) (!  (=> (and (= (type |x#1@@13|) BoxType) (= (type |y#1@@12|) BoxType)) (=> (and (and ($IsBox |x#1@@13| Multisets._default.Foldable$A@@2) ($IsBox |y#1@@12| Multisets._default.Foldable$A@@2)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@95 |inv#0@@2| |x#1@@13|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@95 |inv#0@@2| |y#1@@12|))))) (Requires2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 $Heap@@95 |add#0@@2| |x#1@@13| |y#1@@12|))) :qid |Multisetsidfy.149:15| :skolemid |4744| :pattern ( (Requires2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 $Heap@@95 |add#0@@2| |x#1@@13| |y#1@@12|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@95 |inv#0@@2| |y#1@@12|)) ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@95 |inv#0@@2| |x#1@@13|))) )) (forall ((|x#2@@1| T@U) (|y#2| T@U) ) (!  (=> (and (= (type |x#2@@1|) BoxType) (= (type |y#2|) BoxType)) (=> (and (and ($IsBox |x#2@@1| Multisets._default.Foldable$A@@2) ($IsBox |y#2| Multisets._default.Foldable$A@@2)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@95 |inv#0@@2| |x#2@@1|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@95 |inv#0@@2| |y#2|))))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Foldable$A@@2 TBool $Heap@@95 |inv#0@@2| (Apply2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 $Heap@@95 |add#0@@2| |x#2@@1| |y#2|)))))) :qid |Multisetsidfy.149:15| :skolemid |4745| :pattern ( (Apply2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 Multisets._default.Foldable$A@@2 $Heap@@95 |add#0@@2| |x#2@@1| |y#2|)) ))))))) :qid |unknown.0:0| :skolemid |4748| :pattern ( (Multisets.__default.Foldable Multisets._default.Foldable$A@@2 $Heap@@95 |zero#0@@2| |add#0@@2| |inv#0@@2|) ($IsGoodHeap $Heap@@95)) ))))
(assert (forall ((arg0@@729 T@U) (arg1@@381 T@U) (arg2@@235 T@U) (arg3@@162 T@U) (arg4@@119 T@U) (arg5@@78 T@U) (arg6@@57 T@U) ) (! (= (type (Multisets.__default.Fold arg0@@729 arg1@@381 arg2@@235 arg3@@162 arg4@@119 arg5@@78 arg6@@57)) BoxType) :qid |funType:Multisets.__default.Fold| :pattern ( (Multisets.__default.Fold arg0@@729 arg1@@381 arg2@@235 arg3@@162 arg4@@119 arg5@@78 arg6@@57)) )))
(assert (forall ((Multisets._default.Fold$A T@U) ($ly@@742 T@U) ($Heap@@96 T@U) (|zero#0@@3| T@U) (|add#0@@3| T@U) (|inv#0@@3| T@U) (|s#0@@325| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.Fold$A) TyType) (= (type $ly@@742) LayerTypeType)) (= (type $Heap@@96) (MapType0Type refType MapType1Type))) (= (type |zero#0@@3|) BoxType)) (= (type |add#0@@3|) HandleTypeType)) (= (type |inv#0@@3|) HandleTypeType)) (= (type |s#0@@325|) (MapType0Type BoxType intType))) (= (Multisets.__default.Fold Multisets._default.Fold$A ($LS $ly@@742) $Heap@@96 |zero#0@@3| |add#0@@3| |inv#0@@3| |s#0@@325|) (Multisets.__default.Fold Multisets._default.Fold$A $ly@@742 $Heap@@96 |zero#0@@3| |add#0@@3| |inv#0@@3| |s#0@@325|))) :qid |unknown.0:0| :skolemid |4749| :pattern ( (Multisets.__default.Fold Multisets._default.Fold$A ($LS $ly@@742) $Heap@@96 |zero#0@@3| |add#0@@3| |inv#0@@3| |s#0@@325|)) )))
(assert (forall ((Multisets._default.Fold$A@@0 T@U) ($ly@@743 T@U) ($Heap@@97 T@U) (|zero#0@@4| T@U) (|add#0@@4| T@U) (|inv#0@@4| T@U) (|s#0@@326| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.Fold$A@@0) TyType) (= (type $ly@@743) LayerTypeType)) (= (type $Heap@@97) (MapType0Type refType MapType1Type))) (= (type |zero#0@@4|) BoxType)) (= (type |add#0@@4|) HandleTypeType)) (= (type |inv#0@@4|) HandleTypeType)) (= (type |s#0@@326|) (MapType0Type BoxType intType))) (= (Multisets.__default.Fold Multisets._default.Fold$A@@0 $ly@@743 $Heap@@97 |zero#0@@4| |add#0@@4| |inv#0@@4| |s#0@@326|) (Multisets.__default.Fold Multisets._default.Fold$A@@0 $LZ $Heap@@97 |zero#0@@4| |add#0@@4| |inv#0@@4| |s#0@@326|))) :qid |unknown.0:0| :skolemid |4750| :pattern ( (Multisets.__default.Fold Multisets._default.Fold$A@@0 (AsFuelBottom $ly@@743) $Heap@@97 |zero#0@@4| |add#0@@4| |inv#0@@4| |s#0@@326|)) )))
(assert (forall ((Multisets._default.Fold$A@@1 T@U) ($ly@@744 T@U) ($h0@@6 T@U) ($h1@@6 T@U) (|zero#0@@5| T@U) (|add#0@@5| T@U) (|inv#0@@5| T@U) (|s#0@@327| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (and (= (type Multisets._default.Fold$A@@1) TyType) (= (type $ly@@744) LayerTypeType)) (= (type $h0@@6) (MapType0Type refType MapType1Type))) (= (type $h1@@6) (MapType0Type refType MapType1Type))) (= (type |zero#0@@5|) BoxType)) (= (type |add#0@@5|) HandleTypeType)) (= (type |inv#0@@5|) HandleTypeType)) (= (type |s#0@@327|) (MapType0Type BoxType intType))) (and (and (and ($IsGoodHeap $h0@@6) ($IsGoodHeap $h1@@6)) (or (|Multisets.__default.Fold#canCall| Multisets._default.Fold$A@@1 $h0@@6 |zero#0@@5| |add#0@@5| |inv#0@@5| |s#0@@327|) (and (and (and ($IsBox |zero#0@@5| Multisets._default.Fold$A@@1) ($Is |add#0@@5| (Tclass._System.___hFunc2 Multisets._default.Fold$A@@1 Multisets._default.Fold$A@@1 Multisets._default.Fold$A@@1))) ($Is |inv#0@@5| (Tclass._System.___hTotalFunc1 Multisets._default.Fold$A@@1 TBool))) ($Is |s#0@@327| (TMultiSet Multisets._default.Fold$A@@1))))) (and ($IsHeapAnchor $h0@@6) ($HeapSucc $h0@@6 $h1@@6)))) (forall (($o@@66 T@U) ($f@@6 T@U) ) (! (let ((alpha@@13 (FieldTypeInv0 (type $f@@6)))) (=> (and (and (= (type $o@@66) refType) (= (type $f@@6) (FieldType alpha@@13))) (and (not (= $o@@66 null)) (exists ((|x#0@@16| T@U) (|y#0@@24| T@U) (|o#0@@3| T@U) ) (!  (and (and (and (= (type |x#0@@16|) BoxType) (= (type |y#0@@24|) BoxType)) (= (type |o#0@@3|) refType)) (and (and (and (and ($IsBox |x#0@@16| Multisets._default.Fold$A@@1) ($IsBox |y#0@@24| Multisets._default.Fold$A@@1)) ($Is |o#0@@3| Tclass._System.object?)) (and (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Fold$A@@1 TBool $h0@@6 |inv#0@@5| |x#0@@16|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Fold$A@@1 TBool $h0@@6 |inv#0@@5| |y#0@@24|)))) (U_2_bool (MapType0Select (Reads2 Multisets._default.Fold$A@@1 Multisets._default.Fold$A@@1 Multisets._default.Fold$A@@1 $h0@@6 |add#0@@5| |x#0@@16| |y#0@@24|) ($Box |o#0@@3|))))) (= ($Box $o@@66) ($Box |o#0@@3|)))) :qid |Multisetsidfy.157:15| :skolemid |4751| :pattern ( (MapType0Select (Reads2 Multisets._default.Fold$A@@1 Multisets._default.Fold$A@@1 Multisets._default.Fold$A@@1 $h0@@6 |add#0@@5| |x#0@@16| |y#0@@24|) ($Box |o#0@@3|))) )))) (= (MapType1Select (MapType0Select $h0@@6 $o@@66) $f@@6) (MapType1Select (MapType0Select $h1@@6 $o@@66) $f@@6)))) :qid |unknown.0:0| :skolemid |4752| :no-pattern (type $o@@66) :no-pattern (type $f@@6) :no-pattern (U_2_int $o@@66) :no-pattern (U_2_bool $o@@66) :no-pattern (U_2_int $f@@6) :no-pattern (U_2_bool $f@@6) ))) (= (Multisets.__default.Fold Multisets._default.Fold$A@@1 $ly@@744 $h0@@6 |zero#0@@5| |add#0@@5| |inv#0@@5| |s#0@@327|) (Multisets.__default.Fold Multisets._default.Fold$A@@1 $ly@@744 $h1@@6 |zero#0@@5| |add#0@@5| |inv#0@@5| |s#0@@327|))) :qid |unknown.0:0| :skolemid |4753| :pattern ( ($IsHeapAnchor $h0@@6) ($HeapSucc $h0@@6 $h1@@6) (Multisets.__default.Fold Multisets._default.Fold$A@@1 $ly@@744 $h1@@6 |zero#0@@5| |add#0@@5| |inv#0@@5| |s#0@@327|)) )))
(assert  (=> true (forall ((Multisets._default.Fold$A@@2 T@U) ($ly@@745 T@U) ($Heap@@98 T@U) (|zero#0@@6| T@U) (|add#0@@6| T@U) (|inv#0@@6| T@U) (|s#0@@328| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Multisets._default.Fold$A@@2) TyType) (= (type $ly@@745) LayerTypeType)) (= (type $Heap@@98) (MapType0Type refType MapType1Type))) (= (type |zero#0@@6|) BoxType)) (= (type |add#0@@6|) HandleTypeType)) (= (type |inv#0@@6|) HandleTypeType)) (= (type |s#0@@328|) (MapType0Type BoxType intType))) (or (|Multisets.__default.Fold#canCall| Multisets._default.Fold$A@@2 $Heap@@98 |zero#0@@6| |add#0@@6| |inv#0@@6| |s#0@@328|) (and (and (and (and (and ($IsGoodHeap $Heap@@98) ($IsBox |zero#0@@6| Multisets._default.Fold$A@@2)) ($Is |add#0@@6| (Tclass._System.___hFunc2 Multisets._default.Fold$A@@2 Multisets._default.Fold$A@@2 Multisets._default.Fold$A@@2))) ($Is |inv#0@@6| (Tclass._System.___hTotalFunc1 Multisets._default.Fold$A@@2 TBool))) ($Is |s#0@@328| (TMultiSet Multisets._default.Fold$A@@2))) (and (Multisets.__default.Foldable Multisets._default.Fold$A@@2 $Heap@@98 |zero#0@@6| |add#0@@6| |inv#0@@6|) (forall ((|x#1@@14| T@U) ) (!  (=> (= (type |x#1@@14|) BoxType) (=> (and ($IsBox |x#1@@14| Multisets._default.Fold$A@@2) (> (U_2_int (MapType0Select |s#0@@328| |x#1@@14|)) 0)) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Fold$A@@2 TBool $Heap@@98 |inv#0@@6| |x#1@@14|))))) :qid |Multisetsidfy.154:21| :skolemid |4754| :pattern ( ($Unbox boolType (Apply1 Multisets._default.Fold$A@@2 TBool $Heap@@98 |inv#0@@6| |x#1@@14|))) :pattern ( (MapType0Select |s#0@@328| |x#1@@14|)) )))))) (and (and (=> (= (|MultiSet#Card| |s#0@@328|) (LitInt 0)) (= (Multisets.__default.Fold Multisets._default.Fold$A@@2 $ly@@745 $Heap@@98 |zero#0@@6| |add#0@@6| |inv#0@@6| |s#0@@328|) |zero#0@@6|)) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Fold$A@@2 TBool $Heap@@98 |inv#0@@6| (Multisets.__default.Fold Multisets._default.Fold$A@@2 $ly@@745 $Heap@@98 |zero#0@@6| |add#0@@6| |inv#0@@6| |s#0@@328|))))) ($IsBox (Multisets.__default.Fold Multisets._default.Fold$A@@2 $ly@@745 $Heap@@98 |zero#0@@6| |add#0@@6| |inv#0@@6| |s#0@@328|) Multisets._default.Fold$A@@2))) :qid |unknown.0:0| :skolemid |4755| :pattern ( (Multisets.__default.Fold Multisets._default.Fold$A@@2 $ly@@745 $Heap@@98 |zero#0@@6| |add#0@@6| |inv#0@@6| |s#0@@328|)) ))))
(assert (forall ((Multisets._default.Fold$A@@3 T@U) ($ly@@746 T@U) ($Heap@@99 T@U) (|zero#0@@7| T@U) (|add#0@@7| T@U) (|inv#0@@7| T@U) (|s#0@@329| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Multisets._default.Fold$A@@3) TyType) (= (type $ly@@746) LayerTypeType)) (= (type $Heap@@99) (MapType0Type refType MapType1Type))) (= (type |zero#0@@7|) BoxType)) (= (type |add#0@@7|) HandleTypeType)) (= (type |inv#0@@7|) HandleTypeType)) (= (type |s#0@@329|) (MapType0Type BoxType intType))) (and (and (and (and ($IsGoodHeap $Heap@@99) ($IsBox |zero#0@@7| Multisets._default.Fold$A@@3)) ($Is |add#0@@7| (Tclass._System.___hFunc2 Multisets._default.Fold$A@@3 Multisets._default.Fold$A@@3 Multisets._default.Fold$A@@3))) ($Is |inv#0@@7| (Tclass._System.___hTotalFunc1 Multisets._default.Fold$A@@3 TBool))) ($Is |s#0@@329| (TMultiSet Multisets._default.Fold$A@@3)))) (= (|Multisets.__default.Fold#requires| Multisets._default.Fold$A@@3 $ly@@746 $Heap@@99 |zero#0@@7| |add#0@@7| |inv#0@@7| |s#0@@329|)  (and (Multisets.__default.Foldable Multisets._default.Fold$A@@3 $Heap@@99 |zero#0@@7| |add#0@@7| |inv#0@@7|) (forall ((|x#2@@2| T@U) ) (!  (=> (= (type |x#2@@2|) BoxType) (=> (and ($IsBox |x#2@@2| Multisets._default.Fold$A@@3) (> (U_2_int (MapType0Select |s#0@@329| |x#2@@2|)) 0)) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Fold$A@@3 TBool $Heap@@99 |inv#0@@7| |x#2@@2|))))) :qid |Multisetsidfy.154:21| :skolemid |4756| :pattern ( ($Unbox boolType (Apply1 Multisets._default.Fold$A@@3 TBool $Heap@@99 |inv#0@@7| |x#2@@2|))) :pattern ( (MapType0Select |s#0@@329| |x#2@@2|)) ))))) :qid |unknown.0:0| :skolemid |4757| :pattern ( (|Multisets.__default.Fold#requires| Multisets._default.Fold$A@@3 $ly@@746 $Heap@@99 |zero#0@@7| |add#0@@7| |inv#0@@7| |s#0@@329|) ($IsGoodHeap $Heap@@99)) )))
(assert  (=> true (forall ((Multisets._default.Fold$A@@4 T@U) ($ly@@747 T@U) ($Heap@@100 T@U) (|zero#0@@8| T@U) (|add#0@@8| T@U) (|inv#0@@8| T@U) (|s#0@@330| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Multisets._default.Fold$A@@4) TyType) (= (type $ly@@747) LayerTypeType)) (= (type $Heap@@100) (MapType0Type refType MapType1Type))) (= (type |zero#0@@8|) BoxType)) (= (type |add#0@@8|) HandleTypeType)) (= (type |inv#0@@8|) HandleTypeType)) (= (type |s#0@@330|) (MapType0Type BoxType intType))) (or (|Multisets.__default.Fold#canCall| Multisets._default.Fold$A@@4 $Heap@@100 |zero#0@@8| |add#0@@8| |inv#0@@8| |s#0@@330|) (and (and (and (and (and ($IsGoodHeap $Heap@@100) ($IsBox |zero#0@@8| Multisets._default.Fold$A@@4)) ($Is |add#0@@8| (Tclass._System.___hFunc2 Multisets._default.Fold$A@@4 Multisets._default.Fold$A@@4 Multisets._default.Fold$A@@4))) ($Is |inv#0@@8| (Tclass._System.___hTotalFunc1 Multisets._default.Fold$A@@4 TBool))) ($Is |s#0@@330| (TMultiSet Multisets._default.Fold$A@@4))) (and (Multisets.__default.Foldable Multisets._default.Fold$A@@4 $Heap@@100 |zero#0@@8| |add#0@@8| |inv#0@@8|) (forall ((|x#2@@3| T@U) ) (!  (=> (= (type |x#2@@3|) BoxType) (=> (and ($IsBox |x#2@@3| Multisets._default.Fold$A@@4) (> (U_2_int (MapType0Select |s#0@@330| |x#2@@3|)) 0)) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.Fold$A@@4 TBool $Heap@@100 |inv#0@@8| |x#2@@3|))))) :qid |Multisetsidfy.154:21| :skolemid |4756| :pattern ( ($Unbox boolType (Apply1 Multisets._default.Fold$A@@4 TBool $Heap@@100 |inv#0@@8| |x#2@@3|))) :pattern ( (MapType0Select |s#0@@330| |x#2@@3|)) )))))) (and (=> (not (= (|MultiSet#Card| |s#0@@330|) (LitInt 0))) (and (|Multisets.__default.Choose#canCall| Multisets._default.Fold$A@@4 |s#0@@330|) (let ((|a#0@@212| (Multisets.__default.Choose Multisets._default.Fold$A@@4 StartFuel_Multisets._default.Choose |s#0@@330|))) (|Multisets.__default.Fold#canCall| Multisets._default.Fold$A@@4 $Heap@@100 |zero#0@@8| |add#0@@8| |inv#0@@8| (|MultiSet#Difference| |s#0@@330| (|MultiSet#UnionOne| (|MultiSet#Empty| BoxType) |a#0@@212|)))))) (= (Multisets.__default.Fold Multisets._default.Fold$A@@4 ($LS $ly@@747) $Heap@@100 |zero#0@@8| |add#0@@8| |inv#0@@8| |s#0@@330|) (ite (= (|MultiSet#Card| |s#0@@330|) (LitInt 0)) |zero#0@@8| (let ((|a#0@@213| (Multisets.__default.Choose Multisets._default.Fold$A@@4 StartFuel_Multisets._default.Choose |s#0@@330|))) (Apply2 Multisets._default.Fold$A@@4 Multisets._default.Fold$A@@4 Multisets._default.Fold$A@@4 $Heap@@100 |add#0@@8| |a#0@@213| (Multisets.__default.Fold Multisets._default.Fold$A@@4 $ly@@747 $Heap@@100 |zero#0@@8| |add#0@@8| |inv#0@@8| (|MultiSet#Difference| |s#0@@330| (|MultiSet#UnionOne| (|MultiSet#Empty| BoxType) |a#0@@213|))))))))) :qid |unknown.0:0| :skolemid |4758| :pattern ( (Multisets.__default.Fold Multisets._default.Fold$A@@4 ($LS $ly@@747) $Heap@@100 |zero#0@@8| |add#0@@8| |inv#0@@8| |s#0@@330|) ($IsGoodHeap $Heap@@100)) ))))
(assert (forall ((arg0@@730 T@U) (arg1@@382 T@U) (arg2@@236 T@U) (arg3@@163 T@U) ) (! (= (type (Multisets.__default.FoldSimple arg0@@730 arg1@@382 arg2@@236 arg3@@163)) BoxType) :qid |funType:Multisets.__default.FoldSimple| :pattern ( (Multisets.__default.FoldSimple arg0@@730 arg1@@382 arg2@@236 arg3@@163)) )))
(assert  (=> true (forall ((Multisets._default.FoldSimple$A T@U) (|zero#0@@9| T@U) (|add#0@@9| T@U) (|s#0@@331| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.FoldSimple$A) TyType) (= (type |zero#0@@9|) BoxType)) (= (type |add#0@@9|) HandleTypeType)) (= (type |s#0@@331|) (MapType0Type BoxType intType))) (or (|Multisets.__default.FoldSimple#canCall| Multisets._default.FoldSimple$A |zero#0@@9| |add#0@@9| |s#0@@331|) (and (and ($IsBox |zero#0@@9| Multisets._default.FoldSimple$A) ($Is |add#0@@9| (Tclass._System.___hTotalFunc2 Multisets._default.FoldSimple$A Multisets._default.FoldSimple$A Multisets._default.FoldSimple$A))) ($Is |s#0@@331| (TMultiSet Multisets._default.FoldSimple$A))))) (and (=> (= (|MultiSet#Card| |s#0@@331|) (LitInt 0)) (= (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A |zero#0@@9| |add#0@@9| |s#0@@331|) |zero#0@@9|)) ($IsBox (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A |zero#0@@9| |add#0@@9| |s#0@@331|) Multisets._default.FoldSimple$A))) :qid |unknown.0:0| :skolemid |4759| :pattern ( (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A |zero#0@@9| |add#0@@9| |s#0@@331|)) ))))
(assert (forall ((Multisets._default.FoldSimple$A@@0 T@U) ($Heap@@101 T@U) (|zero#0@@10| T@U) (|add#0@@10| T@U) (|s#0@@332| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.FoldSimple$A@@0) TyType) (= (type $Heap@@101) (MapType0Type refType MapType1Type))) (= (type |zero#0@@10|) BoxType)) (= (type |add#0@@10|) HandleTypeType)) (= (type |s#0@@332|) (MapType0Type BoxType intType))) (and (and (and ($IsGoodHeap $Heap@@101) ($IsBox |zero#0@@10| Multisets._default.FoldSimple$A@@0)) ($Is |add#0@@10| (Tclass._System.___hTotalFunc2 Multisets._default.FoldSimple$A@@0 Multisets._default.FoldSimple$A@@0 Multisets._default.FoldSimple$A@@0))) ($Is |s#0@@332| (TMultiSet Multisets._default.FoldSimple$A@@0)))) (= (|Multisets.__default.FoldSimple#requires| Multisets._default.FoldSimple$A@@0 |zero#0@@10| |add#0@@10| |s#0@@332|) true)) :qid |unknown.0:0| :skolemid |4760| :pattern ( (|Multisets.__default.FoldSimple#requires| Multisets._default.FoldSimple$A@@0 |zero#0@@10| |add#0@@10| |s#0@@332|) ($IsGoodHeap $Heap@@101)) )))
(assert  (and (and (forall ((arg0@@731 T@U) ) (! (= (type (|lambda#276| arg0@@731)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#276| :pattern ( (|lambda#276| arg0@@731)) )) (forall ((arg0@@732 T@U) ) (! (= (type (|lambda#277| arg0@@732)) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType)) :qid |funType:lambda#277| :pattern ( (|lambda#277| arg0@@732)) ))) (= (type StartFuel_Multisets._default.Fold) LayerTypeType)))
(assert  (=> true (forall ((Multisets._default.FoldSimple$A@@1 T@U) ($Heap@@102 T@U) (|zero#0@@11| T@U) (|add#0@@11| T@U) (|s#0@@333| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.FoldSimple$A@@1) TyType) (= (type $Heap@@102) (MapType0Type refType MapType1Type))) (= (type |zero#0@@11|) BoxType)) (= (type |add#0@@11|) HandleTypeType)) (= (type |s#0@@333|) (MapType0Type BoxType intType))) (or (|Multisets.__default.FoldSimple#canCall| Multisets._default.FoldSimple$A@@1 |zero#0@@11| |add#0@@11| |s#0@@333|) (and (and (and ($IsGoodHeap $Heap@@102) ($IsBox |zero#0@@11| Multisets._default.FoldSimple$A@@1)) ($Is |add#0@@11| (Tclass._System.___hTotalFunc2 Multisets._default.FoldSimple$A@@1 Multisets._default.FoldSimple$A@@1 Multisets._default.FoldSimple$A@@1))) ($Is |s#0@@333| (TMultiSet Multisets._default.FoldSimple$A@@1))))) (and (|Multisets.__default.Fold#canCall| Multisets._default.FoldSimple$A@@1 $Heap@@102 |zero#0@@11| |add#0@@11| (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#276| ($Box (Lit (bool_2_U true)))) (|lambda#277| Multisets._default.FoldSimple$A@@1) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ))) |s#0@@333|) (= (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A@@1 |zero#0@@11| |add#0@@11| |s#0@@333|) (Multisets.__default.Fold Multisets._default.FoldSimple$A@@1 StartFuel_Multisets._default.Fold $Heap@@102 |zero#0@@11| |add#0@@11| (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#276| ($Box (Lit (bool_2_U true)))) (|lambda#277| Multisets._default.FoldSimple$A@@1) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ))) |s#0@@333|)))) :qid |unknown.0:0| :skolemid |4761| :pattern ( (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A@@1 |zero#0@@11| |add#0@@11| |s#0@@333|) ($IsGoodHeap $Heap@@102)) ))))
(assert  (=> true (forall ((Multisets._default.FoldSimple$A@@2 T@U) ($Heap@@103 T@U) (|zero#0@@12| T@U) (|add#0@@12| T@U) (|s#0@@334| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.FoldSimple$A@@2) TyType) (= (type $Heap@@103) (MapType0Type refType MapType1Type))) (= (type |zero#0@@12|) BoxType)) (= (type |add#0@@12|) HandleTypeType)) (= (type |s#0@@334|) (MapType0Type BoxType intType))) (or (|Multisets.__default.FoldSimple#canCall| Multisets._default.FoldSimple$A@@2 |zero#0@@12| |add#0@@12| (Lit |s#0@@334|)) (and (and (and ($IsGoodHeap $Heap@@103) ($IsBox |zero#0@@12| Multisets._default.FoldSimple$A@@2)) ($Is |add#0@@12| (Tclass._System.___hTotalFunc2 Multisets._default.FoldSimple$A@@2 Multisets._default.FoldSimple$A@@2 Multisets._default.FoldSimple$A@@2))) ($Is |s#0@@334| (TMultiSet Multisets._default.FoldSimple$A@@2))))) (and (|Multisets.__default.Fold#canCall| Multisets._default.FoldSimple$A@@2 $Heap@@103 |zero#0@@12| |add#0@@12| (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#276| ($Box (Lit (bool_2_U true)))) (|lambda#277| Multisets._default.FoldSimple$A@@2) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ))) (Lit |s#0@@334|)) (= (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A@@2 |zero#0@@12| |add#0@@12| (Lit |s#0@@334|)) (Multisets.__default.Fold Multisets._default.FoldSimple$A@@2 StartFuel_Multisets._default.Fold $Heap@@103 |zero#0@@12| |add#0@@12| (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#276| ($Box (Lit (bool_2_U true)))) (|lambda#277| Multisets._default.FoldSimple$A@@2) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ))) (Lit |s#0@@334|))))) :qid |unknown.0:0| :weight 3 :skolemid |4762| :pattern ( (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A@@2 |zero#0@@12| |add#0@@12| (Lit |s#0@@334|)) ($IsGoodHeap $Heap@@103)) ))))
(assert  (=> true (forall ((Multisets._default.FoldSimple$A@@3 T@U) ($Heap@@104 T@U) (|zero#0@@13| T@U) (|add#0@@13| T@U) (|s#0@@335| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.FoldSimple$A@@3) TyType) (= (type $Heap@@104) (MapType0Type refType MapType1Type))) (= (type |zero#0@@13|) BoxType)) (= (type |add#0@@13|) HandleTypeType)) (= (type |s#0@@335|) (MapType0Type BoxType intType))) (or (|Multisets.__default.FoldSimple#canCall| Multisets._default.FoldSimple$A@@3 (Lit |zero#0@@13|) (Lit |add#0@@13|) (Lit |s#0@@335|)) (and (and (and ($IsGoodHeap $Heap@@104) ($IsBox |zero#0@@13| Multisets._default.FoldSimple$A@@3)) ($Is |add#0@@13| (Tclass._System.___hTotalFunc2 Multisets._default.FoldSimple$A@@3 Multisets._default.FoldSimple$A@@3 Multisets._default.FoldSimple$A@@3))) ($Is |s#0@@335| (TMultiSet Multisets._default.FoldSimple$A@@3))))) (and (|Multisets.__default.Fold#canCall| Multisets._default.FoldSimple$A@@3 $Heap@@104 (Lit |zero#0@@13|) (Lit |add#0@@13|) (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#276| ($Box (Lit (bool_2_U true)))) (|lambda#277| Multisets._default.FoldSimple$A@@3) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ))) (Lit |s#0@@335|)) (= (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A@@3 (Lit |zero#0@@13|) (Lit |add#0@@13|) (Lit |s#0@@335|)) (Multisets.__default.Fold Multisets._default.FoldSimple$A@@3 StartFuel_Multisets._default.Fold $Heap@@104 (Lit |zero#0@@13|) (Lit |add#0@@13|) (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#276| ($Box (Lit (bool_2_U true)))) (|lambda#277| Multisets._default.FoldSimple$A@@3) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ))) (Lit |s#0@@335|))))) :qid |unknown.0:0| :weight 3 :skolemid |4763| :pattern ( (Multisets.__default.FoldSimple Multisets._default.FoldSimple$A@@3 (Lit |zero#0@@13|) (Lit |add#0@@13|) (Lit |s#0@@335|)) ($IsGoodHeap $Heap@@104)) ))))
(assert (forall ((Multisets._default.IsIdentity$A T@U) ($ly@@748 T@U) ($Heap@@105 T@U) (|add#0@@14| T@U) (|inv#0@@9| T@U) (|zero#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsIdentity$A) TyType) (= (type $ly@@748) LayerTypeType)) (= (type $Heap@@105) (MapType0Type refType MapType1Type))) (= (type |add#0@@14|) HandleTypeType)) (= (type |inv#0@@9|) HandleTypeType)) (= (type |zero#0@@14|) BoxType)) (= (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A ($LS $ly@@748) $Heap@@105 |add#0@@14| |inv#0@@9| |zero#0@@14|) (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A $ly@@748 $Heap@@105 |add#0@@14| |inv#0@@9| |zero#0@@14|))) :qid |unknown.0:0| :skolemid |4764| :pattern ( (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A ($LS $ly@@748) $Heap@@105 |add#0@@14| |inv#0@@9| |zero#0@@14|)) )))
(assert (forall ((Multisets._default.IsIdentity$A@@0 T@U) ($ly@@749 T@U) ($Heap@@106 T@U) (|add#0@@15| T@U) (|inv#0@@10| T@U) (|zero#0@@15| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsIdentity$A@@0) TyType) (= (type $ly@@749) LayerTypeType)) (= (type $Heap@@106) (MapType0Type refType MapType1Type))) (= (type |add#0@@15|) HandleTypeType)) (= (type |inv#0@@10|) HandleTypeType)) (= (type |zero#0@@15|) BoxType)) (= (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@0 $ly@@749 $Heap@@106 |add#0@@15| |inv#0@@10| |zero#0@@15|) (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@0 $LZ $Heap@@106 |add#0@@15| |inv#0@@10| |zero#0@@15|))) :qid |unknown.0:0| :skolemid |4765| :pattern ( (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@0 (AsFuelBottom $ly@@749) $Heap@@106 |add#0@@15| |inv#0@@10| |zero#0@@15|)) )))
(assert (forall ((Multisets._default.IsIdentity$A@@1 T@U) ($ly@@750 T@U) ($h0@@7 T@U) ($h1@@7 T@U) (|add#0@@16| T@U) (|inv#0@@11| T@U) (|zero#0@@16| T@U) ) (!  (=> (and (and (and (and (and (and (and (and (= (type Multisets._default.IsIdentity$A@@1) TyType) (= (type $ly@@750) LayerTypeType)) (= (type $h0@@7) (MapType0Type refType MapType1Type))) (= (type $h1@@7) (MapType0Type refType MapType1Type))) (= (type |add#0@@16|) HandleTypeType)) (= (type |inv#0@@11|) HandleTypeType)) (= (type |zero#0@@16|) BoxType)) (and (and (and ($IsGoodHeap $h0@@7) ($IsGoodHeap $h1@@7)) (or (|Multisets.__default.IsIdentity#canCall| Multisets._default.IsIdentity$A@@1 $h0@@7 |add#0@@16| |inv#0@@11| |zero#0@@16|) (and (and ($Is |add#0@@16| (Tclass._System.___hFunc2 Multisets._default.IsIdentity$A@@1 Multisets._default.IsIdentity$A@@1 Multisets._default.IsIdentity$A@@1)) ($Is |inv#0@@11| (Tclass._System.___hTotalFunc1 Multisets._default.IsIdentity$A@@1 TBool))) ($IsBox |zero#0@@16| Multisets._default.IsIdentity$A@@1)))) (and ($IsHeapAnchor $h0@@7) ($HeapSucc $h0@@7 $h1@@7)))) (forall (($o@@67 T@U) ($f@@7 T@U) ) (! (let ((alpha@@14 (FieldTypeInv0 (type $f@@7)))) (=> (and (and (= (type $o@@67) refType) (= (type $f@@7) (FieldType alpha@@14))) (and (not (= $o@@67 null)) (exists ((|x#0@@17| T@U) (|y#0@@25| T@U) (|o#0@@4| T@U) ) (!  (and (and (and (= (type |x#0@@17|) BoxType) (= (type |y#0@@25|) BoxType)) (= (type |o#0@@4|) refType)) (and (and (and (and ($IsBox |x#0@@17| Multisets._default.IsIdentity$A@@1) ($IsBox |y#0@@25| Multisets._default.IsIdentity$A@@1)) ($Is |o#0@@4| Tclass._System.object?)) (and (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsIdentity$A@@1 TBool $h0@@7 |inv#0@@11| |x#0@@17|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsIdentity$A@@1 TBool $h0@@7 |inv#0@@11| |y#0@@25|)))) (U_2_bool (MapType0Select (Reads2 Multisets._default.IsIdentity$A@@1 Multisets._default.IsIdentity$A@@1 Multisets._default.IsIdentity$A@@1 $h0@@7 |add#0@@16| |x#0@@17| |y#0@@25|) ($Box |o#0@@4|))))) (= ($Box $o@@67) ($Box |o#0@@4|)))) :qid |Multisetsidfy.187:15| :skolemid |4766| :pattern ( (MapType0Select (Reads2 Multisets._default.IsIdentity$A@@1 Multisets._default.IsIdentity$A@@1 Multisets._default.IsIdentity$A@@1 $h0@@7 |add#0@@16| |x#0@@17| |y#0@@25|) ($Box |o#0@@4|))) )))) (= (MapType1Select (MapType0Select $h0@@7 $o@@67) $f@@7) (MapType1Select (MapType0Select $h1@@7 $o@@67) $f@@7)))) :qid |unknown.0:0| :skolemid |4767| :no-pattern (type $o@@67) :no-pattern (type $f@@7) :no-pattern (U_2_int $o@@67) :no-pattern (U_2_bool $o@@67) :no-pattern (U_2_int $f@@7) :no-pattern (U_2_bool $f@@7) ))) (= (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@1 $ly@@750 $h0@@7 |add#0@@16| |inv#0@@11| |zero#0@@16|) (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@1 $ly@@750 $h1@@7 |add#0@@16| |inv#0@@11| |zero#0@@16|))) :qid |unknown.0:0| :skolemid |4768| :pattern ( ($IsHeapAnchor $h0@@7) ($HeapSucc $h0@@7 $h1@@7) (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@1 $ly@@750 $h1@@7 |add#0@@16| |inv#0@@11| |zero#0@@16|)) )))
(assert  (=> true (forall ((Multisets._default.IsIdentity$A@@2 T@U) ($ly@@751 T@U) ($Heap@@107 T@U) (|add#0@@17| T@U) (|inv#0@@12| T@U) (|zero#0@@17| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.IsIdentity$A@@2) TyType) (= (type $ly@@751) LayerTypeType)) (= (type $Heap@@107) (MapType0Type refType MapType1Type))) (= (type |add#0@@17|) HandleTypeType)) (= (type |inv#0@@12|) HandleTypeType)) (= (type |zero#0@@17|) BoxType)) (or (|Multisets.__default.IsIdentity#canCall| Multisets._default.IsIdentity$A@@2 $Heap@@107 |add#0@@17| |inv#0@@12| |zero#0@@17|) (and (and (and ($IsGoodHeap $Heap@@107) ($Is |add#0@@17| (Tclass._System.___hFunc2 Multisets._default.IsIdentity$A@@2 Multisets._default.IsIdentity$A@@2 Multisets._default.IsIdentity$A@@2))) ($Is |inv#0@@12| (Tclass._System.___hTotalFunc1 Multisets._default.IsIdentity$A@@2 TBool))) ($IsBox |zero#0@@17| Multisets._default.IsIdentity$A@@2)))) true) :qid |unknown.0:0| :skolemid |4769| :pattern ( (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@2 $ly@@751 $Heap@@107 |add#0@@17| |inv#0@@12| |zero#0@@17|)) ))))
(assert (forall ((Multisets._default.IsIdentity$A@@3 T@U) ($ly@@752 T@U) ($Heap@@108 T@U) (|add#0@@18| T@U) (|inv#0@@13| T@U) (|zero#0@@18| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.IsIdentity$A@@3) TyType) (= (type $ly@@752) LayerTypeType)) (= (type $Heap@@108) (MapType0Type refType MapType1Type))) (= (type |add#0@@18|) HandleTypeType)) (= (type |inv#0@@13|) HandleTypeType)) (= (type |zero#0@@18|) BoxType)) (and (and (and ($IsGoodHeap $Heap@@108) ($Is |add#0@@18| (Tclass._System.___hFunc2 Multisets._default.IsIdentity$A@@3 Multisets._default.IsIdentity$A@@3 Multisets._default.IsIdentity$A@@3))) ($Is |inv#0@@13| (Tclass._System.___hTotalFunc1 Multisets._default.IsIdentity$A@@3 TBool))) ($IsBox |zero#0@@18| Multisets._default.IsIdentity$A@@3))) (= (|Multisets.__default.IsIdentity#requires| Multisets._default.IsIdentity$A@@3 $ly@@752 $Heap@@108 |add#0@@18| |inv#0@@13| |zero#0@@18|) true)) :qid |unknown.0:0| :skolemid |4770| :pattern ( (|Multisets.__default.IsIdentity#requires| Multisets._default.IsIdentity$A@@3 $ly@@752 $Heap@@108 |add#0@@18| |inv#0@@13| |zero#0@@18|) ($IsGoodHeap $Heap@@108)) )))
(assert  (=> true (forall ((Multisets._default.IsIdentity$A@@4 T@U) ($ly@@753 T@U) ($Heap@@109 T@U) (|add#0@@19| T@U) (|inv#0@@14| T@U) (|zero#0@@19| T@U) ) (!  (=> (and (and (and (and (and (and (= (type Multisets._default.IsIdentity$A@@4) TyType) (= (type $ly@@753) LayerTypeType)) (= (type $Heap@@109) (MapType0Type refType MapType1Type))) (= (type |add#0@@19|) HandleTypeType)) (= (type |inv#0@@14|) HandleTypeType)) (= (type |zero#0@@19|) BoxType)) (or (|Multisets.__default.IsIdentity#canCall| Multisets._default.IsIdentity$A@@4 $Heap@@109 |add#0@@19| |inv#0@@14| |zero#0@@19|) (and (and (and ($IsGoodHeap $Heap@@109) ($Is |add#0@@19| (Tclass._System.___hFunc2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4))) ($Is |inv#0@@14| (Tclass._System.___hTotalFunc1 Multisets._default.IsIdentity$A@@4 TBool))) ($IsBox |zero#0@@19| Multisets._default.IsIdentity$A@@4)))) (and (|Multisets.__default.Foldable#canCall| Multisets._default.IsIdentity$A@@4 $Heap@@109 |zero#0@@19| |add#0@@19| |inv#0@@14|) (= (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@4 ($LS $ly@@753) $Heap@@109 |add#0@@19| |inv#0@@14| |zero#0@@19|)  (and (Multisets.__default.Foldable Multisets._default.IsIdentity$A@@4 $Heap@@109 |zero#0@@19| |add#0@@19| |inv#0@@14|) (forall ((|a#0@@214| T@U) ) (!  (=> (= (type |a#0@@214|) BoxType) (=> (and ($IsBox |a#0@@214| Multisets._default.IsIdentity$A@@4) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsIdentity$A@@4 TBool $Heap@@109 |inv#0@@14| |a#0@@214|)))) (and (= (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@109 |add#0@@19| |zero#0@@19| |a#0@@214|) (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@109 |add#0@@19| |a#0@@214| |zero#0@@19|)) (= (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@109 |add#0@@19| |a#0@@214| |zero#0@@19|) |a#0@@214|)))) :qid |Multisetsidfy.190:15| :skolemid |4771| :pattern ( (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@109 |add#0@@19| |a#0@@214| |zero#0@@19|)) :pattern ( (Apply2 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 Multisets._default.IsIdentity$A@@4 $Heap@@109 |add#0@@19| |zero#0@@19| |a#0@@214|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsIdentity$A@@4 TBool $Heap@@109 |inv#0@@14| |a#0@@214|))) )))))) :qid |unknown.0:0| :skolemid |4772| :pattern ( (Multisets.__default.IsIdentity Multisets._default.IsIdentity$A@@4 ($LS $ly@@753) $Heap@@109 |add#0@@19| |inv#0@@14| |zero#0@@19|) ($IsGoodHeap $Heap@@109)) ))))
(assert (forall ((Multisets._default.IsCommutative$A T@U) ($ly@@754 T@U) ($Heap@@110 T@U) (|add#0@@20| T@U) (|inv#0@@15| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.IsCommutative$A) TyType) (= (type $ly@@754) LayerTypeType)) (= (type $Heap@@110) (MapType0Type refType MapType1Type))) (= (type |add#0@@20|) HandleTypeType)) (= (type |inv#0@@15|) HandleTypeType)) (= (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A ($LS $ly@@754) $Heap@@110 |add#0@@20| |inv#0@@15|) (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A $ly@@754 $Heap@@110 |add#0@@20| |inv#0@@15|))) :qid |unknown.0:0| :skolemid |4773| :pattern ( (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A ($LS $ly@@754) $Heap@@110 |add#0@@20| |inv#0@@15|)) )))
(assert (forall ((Multisets._default.IsCommutative$A@@0 T@U) ($ly@@755 T@U) ($Heap@@111 T@U) (|add#0@@21| T@U) (|inv#0@@16| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.IsCommutative$A@@0) TyType) (= (type $ly@@755) LayerTypeType)) (= (type $Heap@@111) (MapType0Type refType MapType1Type))) (= (type |add#0@@21|) HandleTypeType)) (= (type |inv#0@@16|) HandleTypeType)) (= (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@0 $ly@@755 $Heap@@111 |add#0@@21| |inv#0@@16|) (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@0 $LZ $Heap@@111 |add#0@@21| |inv#0@@16|))) :qid |unknown.0:0| :skolemid |4774| :pattern ( (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@0 (AsFuelBottom $ly@@755) $Heap@@111 |add#0@@21| |inv#0@@16|)) )))
(assert (forall ((Multisets._default.IsCommutative$A@@1 T@U) ($ly@@756 T@U) ($h0@@8 T@U) ($h1@@8 T@U) (|add#0@@22| T@U) (|inv#0@@17| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Multisets._default.IsCommutative$A@@1) TyType) (= (type $ly@@756) LayerTypeType)) (= (type $h0@@8) (MapType0Type refType MapType1Type))) (= (type $h1@@8) (MapType0Type refType MapType1Type))) (= (type |add#0@@22|) HandleTypeType)) (= (type |inv#0@@17|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@8) ($IsGoodHeap $h1@@8)) (or (|Multisets.__default.IsCommutative#canCall| Multisets._default.IsCommutative$A@@1 $h0@@8 |add#0@@22| |inv#0@@17|) (and ($Is |add#0@@22| (Tclass._System.___hFunc2 Multisets._default.IsCommutative$A@@1 Multisets._default.IsCommutative$A@@1 Multisets._default.IsCommutative$A@@1)) ($Is |inv#0@@17| (Tclass._System.___hTotalFunc1 Multisets._default.IsCommutative$A@@1 TBool))))) (and ($IsHeapAnchor $h0@@8) ($HeapSucc $h0@@8 $h1@@8)))) (forall (($o@@68 T@U) ($f@@8 T@U) ) (! (let ((alpha@@15 (FieldTypeInv0 (type $f@@8)))) (=> (and (and (= (type $o@@68) refType) (= (type $f@@8) (FieldType alpha@@15))) (and (not (= $o@@68 null)) (exists ((|x#0@@18| T@U) (|y#0@@26| T@U) (|o#0@@5| T@U) ) (!  (and (and (and (= (type |x#0@@18|) BoxType) (= (type |y#0@@26|) BoxType)) (= (type |o#0@@5|) refType)) (and (and (and (and ($IsBox |x#0@@18| Multisets._default.IsCommutative$A@@1) ($IsBox |y#0@@26| Multisets._default.IsCommutative$A@@1)) ($Is |o#0@@5| Tclass._System.object?)) (and (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@1 TBool $h0@@8 |inv#0@@17| |x#0@@18|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@1 TBool $h0@@8 |inv#0@@17| |y#0@@26|)))) (U_2_bool (MapType0Select (Reads2 Multisets._default.IsCommutative$A@@1 Multisets._default.IsCommutative$A@@1 Multisets._default.IsCommutative$A@@1 $h0@@8 |add#0@@22| |x#0@@18| |y#0@@26|) ($Box |o#0@@5|))))) (= ($Box $o@@68) ($Box |o#0@@5|)))) :qid |Multisetsidfy.195:15| :skolemid |4775| :pattern ( (MapType0Select (Reads2 Multisets._default.IsCommutative$A@@1 Multisets._default.IsCommutative$A@@1 Multisets._default.IsCommutative$A@@1 $h0@@8 |add#0@@22| |x#0@@18| |y#0@@26|) ($Box |o#0@@5|))) )))) (= (MapType1Select (MapType0Select $h0@@8 $o@@68) $f@@8) (MapType1Select (MapType0Select $h1@@8 $o@@68) $f@@8)))) :qid |unknown.0:0| :skolemid |4776| :no-pattern (type $o@@68) :no-pattern (type $f@@8) :no-pattern (U_2_int $o@@68) :no-pattern (U_2_bool $o@@68) :no-pattern (U_2_int $f@@8) :no-pattern (U_2_bool $f@@8) ))) (= (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@1 $ly@@756 $h0@@8 |add#0@@22| |inv#0@@17|) (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@1 $ly@@756 $h1@@8 |add#0@@22| |inv#0@@17|))) :qid |unknown.0:0| :skolemid |4777| :pattern ( ($IsHeapAnchor $h0@@8) ($HeapSucc $h0@@8 $h1@@8) (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@1 $ly@@756 $h1@@8 |add#0@@22| |inv#0@@17|)) )))
(assert  (=> true (forall ((Multisets._default.IsCommutative$A@@2 T@U) ($ly@@757 T@U) ($Heap@@112 T@U) (|add#0@@23| T@U) (|inv#0@@18| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsCommutative$A@@2) TyType) (= (type $ly@@757) LayerTypeType)) (= (type $Heap@@112) (MapType0Type refType MapType1Type))) (= (type |add#0@@23|) HandleTypeType)) (= (type |inv#0@@18|) HandleTypeType)) (or (|Multisets.__default.IsCommutative#canCall| Multisets._default.IsCommutative$A@@2 $Heap@@112 |add#0@@23| |inv#0@@18|) (and (and (and ($IsGoodHeap $Heap@@112) ($Is |add#0@@23| (Tclass._System.___hFunc2 Multisets._default.IsCommutative$A@@2 Multisets._default.IsCommutative$A@@2 Multisets._default.IsCommutative$A@@2))) ($Is |inv#0@@18| (Tclass._System.___hTotalFunc1 Multisets._default.IsCommutative$A@@2 TBool))) (forall ((|x#1@@15| T@U) (|y#1@@13| T@U) ) (!  (=> (and (= (type |x#1@@15|) BoxType) (= (type |y#1@@13|) BoxType)) (=> (and (and ($IsBox |x#1@@15| Multisets._default.IsCommutative$A@@2) ($IsBox |y#1@@13| Multisets._default.IsCommutative$A@@2)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@2 TBool $Heap@@112 |inv#0@@18| |x#1@@15|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@2 TBool $Heap@@112 |inv#0@@18| |y#1@@13|))))) (Requires2 Multisets._default.IsCommutative$A@@2 Multisets._default.IsCommutative$A@@2 Multisets._default.IsCommutative$A@@2 $Heap@@112 |add#0@@23| |x#1@@15| |y#1@@13|))) :qid |Multisetsidfy.194:21| :skolemid |4778| :pattern ( (Requires2 Multisets._default.IsCommutative$A@@2 Multisets._default.IsCommutative$A@@2 Multisets._default.IsCommutative$A@@2 $Heap@@112 |add#0@@23| |x#1@@15| |y#1@@13|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@2 TBool $Heap@@112 |inv#0@@18| |y#1@@13|)) ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@2 TBool $Heap@@112 |inv#0@@18| |x#1@@15|))) ))))) true) :qid |unknown.0:0| :skolemid |4779| :pattern ( (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@2 $ly@@757 $Heap@@112 |add#0@@23| |inv#0@@18|)) ))))
(assert (forall ((Multisets._default.IsCommutative$A@@3 T@U) ($ly@@758 T@U) ($Heap@@113 T@U) (|add#0@@24| T@U) (|inv#0@@19| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsCommutative$A@@3) TyType) (= (type $ly@@758) LayerTypeType)) (= (type $Heap@@113) (MapType0Type refType MapType1Type))) (= (type |add#0@@24|) HandleTypeType)) (= (type |inv#0@@19|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@113) ($Is |add#0@@24| (Tclass._System.___hFunc2 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3))) ($Is |inv#0@@19| (Tclass._System.___hTotalFunc1 Multisets._default.IsCommutative$A@@3 TBool)))) (= (|Multisets.__default.IsCommutative#requires| Multisets._default.IsCommutative$A@@3 $ly@@758 $Heap@@113 |add#0@@24| |inv#0@@19|) (forall ((|x#2@@4| T@U) (|y#2@@0| T@U) ) (!  (=> (and (= (type |x#2@@4|) BoxType) (= (type |y#2@@0|) BoxType)) (=> (and (and ($IsBox |x#2@@4| Multisets._default.IsCommutative$A@@3) ($IsBox |y#2@@0| Multisets._default.IsCommutative$A@@3)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@3 TBool $Heap@@113 |inv#0@@19| |x#2@@4|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@3 TBool $Heap@@113 |inv#0@@19| |y#2@@0|))))) (Requires2 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3 $Heap@@113 |add#0@@24| |x#2@@4| |y#2@@0|))) :qid |Multisetsidfy.194:21| :skolemid |4780| :pattern ( (Requires2 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3 Multisets._default.IsCommutative$A@@3 $Heap@@113 |add#0@@24| |x#2@@4| |y#2@@0|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@3 TBool $Heap@@113 |inv#0@@19| |y#2@@0|)) ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@3 TBool $Heap@@113 |inv#0@@19| |x#2@@4|))) )))) :qid |unknown.0:0| :skolemid |4781| :pattern ( (|Multisets.__default.IsCommutative#requires| Multisets._default.IsCommutative$A@@3 $ly@@758 $Heap@@113 |add#0@@24| |inv#0@@19|) ($IsGoodHeap $Heap@@113)) )))
(assert  (=> true (forall ((Multisets._default.IsCommutative$A@@4 T@U) ($ly@@759 T@U) ($Heap@@114 T@U) (|add#0@@25| T@U) (|inv#0@@20| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsCommutative$A@@4) TyType) (= (type $ly@@759) LayerTypeType)) (= (type $Heap@@114) (MapType0Type refType MapType1Type))) (= (type |add#0@@25|) HandleTypeType)) (= (type |inv#0@@20|) HandleTypeType)) (or (|Multisets.__default.IsCommutative#canCall| Multisets._default.IsCommutative$A@@4 $Heap@@114 |add#0@@25| |inv#0@@20|) (and (and (and ($IsGoodHeap $Heap@@114) ($Is |add#0@@25| (Tclass._System.___hFunc2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4))) ($Is |inv#0@@20| (Tclass._System.___hTotalFunc1 Multisets._default.IsCommutative$A@@4 TBool))) (forall ((|x#2@@5| T@U) (|y#2@@1| T@U) ) (!  (=> (and (= (type |x#2@@5|) BoxType) (= (type |y#2@@1|) BoxType)) (=> (and (and ($IsBox |x#2@@5| Multisets._default.IsCommutative$A@@4) ($IsBox |y#2@@1| Multisets._default.IsCommutative$A@@4)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@114 |inv#0@@20| |x#2@@5|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@114 |inv#0@@20| |y#2@@1|))))) (Requires2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@114 |add#0@@25| |x#2@@5| |y#2@@1|))) :qid |Multisetsidfy.194:21| :skolemid |4780| :pattern ( (Requires2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@114 |add#0@@25| |x#2@@5| |y#2@@1|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@114 |inv#0@@20| |y#2@@1|)) ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@114 |inv#0@@20| |x#2@@5|))) ))))) (= (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@4 ($LS $ly@@759) $Heap@@114 |add#0@@25| |inv#0@@20|) (forall ((|a#0@@215| T@U) (|b#0@@160| T@U) ) (!  (=> (and (= (type |a#0@@215|) BoxType) (= (type |b#0@@160|) BoxType)) (=> (and (and ($IsBox |a#0@@215| Multisets._default.IsCommutative$A@@4) ($IsBox |b#0@@160| Multisets._default.IsCommutative$A@@4)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@114 |inv#0@@20| |a#0@@215|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@114 |inv#0@@20| |b#0@@160|))))) (= (Apply2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@114 |add#0@@25| |a#0@@215| |b#0@@160|) (Apply2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@114 |add#0@@25| |b#0@@160| |a#0@@215|)))) :qid |Multisetsidfy.197:12| :skolemid |4782| :pattern ( (Apply2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@114 |add#0@@25| |b#0@@160| |a#0@@215|)) :pattern ( (Apply2 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 Multisets._default.IsCommutative$A@@4 $Heap@@114 |add#0@@25| |a#0@@215| |b#0@@160|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@114 |inv#0@@20| |b#0@@160|)) ($Unbox boolType (Apply1 Multisets._default.IsCommutative$A@@4 TBool $Heap@@114 |inv#0@@20| |a#0@@215|))) )))) :qid |unknown.0:0| :skolemid |4783| :pattern ( (Multisets.__default.IsCommutative Multisets._default.IsCommutative$A@@4 ($LS $ly@@759) $Heap@@114 |add#0@@25| |inv#0@@20|) ($IsGoodHeap $Heap@@114)) ))))
(assert (forall ((Multisets._default.IsAssociative$A T@U) ($ly@@760 T@U) ($Heap@@115 T@U) (|add#0@@26| T@U) (|inv#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.IsAssociative$A) TyType) (= (type $ly@@760) LayerTypeType)) (= (type $Heap@@115) (MapType0Type refType MapType1Type))) (= (type |add#0@@26|) HandleTypeType)) (= (type |inv#0@@21|) HandleTypeType)) (= (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A ($LS $ly@@760) $Heap@@115 |add#0@@26| |inv#0@@21|) (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A $ly@@760 $Heap@@115 |add#0@@26| |inv#0@@21|))) :qid |unknown.0:0| :skolemid |4784| :pattern ( (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A ($LS $ly@@760) $Heap@@115 |add#0@@26| |inv#0@@21|)) )))
(assert (forall ((Multisets._default.IsAssociative$A@@0 T@U) ($ly@@761 T@U) ($Heap@@116 T@U) (|add#0@@27| T@U) (|inv#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.IsAssociative$A@@0) TyType) (= (type $ly@@761) LayerTypeType)) (= (type $Heap@@116) (MapType0Type refType MapType1Type))) (= (type |add#0@@27|) HandleTypeType)) (= (type |inv#0@@22|) HandleTypeType)) (= (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@0 $ly@@761 $Heap@@116 |add#0@@27| |inv#0@@22|) (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@0 $LZ $Heap@@116 |add#0@@27| |inv#0@@22|))) :qid |unknown.0:0| :skolemid |4785| :pattern ( (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@0 (AsFuelBottom $ly@@761) $Heap@@116 |add#0@@27| |inv#0@@22|)) )))
(assert (forall ((Multisets._default.IsAssociative$A@@1 T@U) ($ly@@762 T@U) ($h0@@9 T@U) ($h1@@9 T@U) (|add#0@@28| T@U) (|inv#0@@23| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type Multisets._default.IsAssociative$A@@1) TyType) (= (type $ly@@762) LayerTypeType)) (= (type $h0@@9) (MapType0Type refType MapType1Type))) (= (type $h1@@9) (MapType0Type refType MapType1Type))) (= (type |add#0@@28|) HandleTypeType)) (= (type |inv#0@@23|) HandleTypeType)) (and (and (and ($IsGoodHeap $h0@@9) ($IsGoodHeap $h1@@9)) (or (|Multisets.__default.IsAssociative#canCall| Multisets._default.IsAssociative$A@@1 $h0@@9 |add#0@@28| |inv#0@@23|) (and ($Is |add#0@@28| (Tclass._System.___hFunc2 Multisets._default.IsAssociative$A@@1 Multisets._default.IsAssociative$A@@1 Multisets._default.IsAssociative$A@@1)) ($Is |inv#0@@23| (Tclass._System.___hTotalFunc1 Multisets._default.IsAssociative$A@@1 TBool))))) (and ($IsHeapAnchor $h0@@9) ($HeapSucc $h0@@9 $h1@@9)))) (forall (($o@@69 T@U) ($f@@9 T@U) ) (! (let ((alpha@@16 (FieldTypeInv0 (type $f@@9)))) (=> (and (and (= (type $o@@69) refType) (= (type $f@@9) (FieldType alpha@@16))) (and (not (= $o@@69 null)) (exists ((|x#0@@19| T@U) (|y#0@@27| T@U) (|o#0@@6| T@U) ) (!  (and (and (and (= (type |x#0@@19|) BoxType) (= (type |y#0@@27|) BoxType)) (= (type |o#0@@6|) refType)) (and (and (and (and ($IsBox |x#0@@19| Multisets._default.IsAssociative$A@@1) ($IsBox |y#0@@27| Multisets._default.IsAssociative$A@@1)) ($Is |o#0@@6| Tclass._System.object?)) (and (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@1 TBool $h0@@9 |inv#0@@23| |x#0@@19|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@1 TBool $h0@@9 |inv#0@@23| |y#0@@27|)))) (U_2_bool (MapType0Select (Reads2 Multisets._default.IsAssociative$A@@1 Multisets._default.IsAssociative$A@@1 Multisets._default.IsAssociative$A@@1 $h0@@9 |add#0@@28| |x#0@@19| |y#0@@27|) ($Box |o#0@@6|))))) (= ($Box $o@@69) ($Box |o#0@@6|)))) :qid |Multisetsidfy.202:15| :skolemid |4786| :pattern ( (MapType0Select (Reads2 Multisets._default.IsAssociative$A@@1 Multisets._default.IsAssociative$A@@1 Multisets._default.IsAssociative$A@@1 $h0@@9 |add#0@@28| |x#0@@19| |y#0@@27|) ($Box |o#0@@6|))) )))) (= (MapType1Select (MapType0Select $h0@@9 $o@@69) $f@@9) (MapType1Select (MapType0Select $h1@@9 $o@@69) $f@@9)))) :qid |unknown.0:0| :skolemid |4787| :no-pattern (type $o@@69) :no-pattern (type $f@@9) :no-pattern (U_2_int $o@@69) :no-pattern (U_2_bool $o@@69) :no-pattern (U_2_int $f@@9) :no-pattern (U_2_bool $f@@9) ))) (= (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@1 $ly@@762 $h0@@9 |add#0@@28| |inv#0@@23|) (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@1 $ly@@762 $h1@@9 |add#0@@28| |inv#0@@23|))) :qid |unknown.0:0| :skolemid |4788| :pattern ( ($IsHeapAnchor $h0@@9) ($HeapSucc $h0@@9 $h1@@9) (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@1 $ly@@762 $h1@@9 |add#0@@28| |inv#0@@23|)) )))
(assert  (=> true (forall ((Multisets._default.IsAssociative$A@@2 T@U) ($ly@@763 T@U) ($Heap@@117 T@U) (|add#0@@29| T@U) (|inv#0@@24| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsAssociative$A@@2) TyType) (= (type $ly@@763) LayerTypeType)) (= (type $Heap@@117) (MapType0Type refType MapType1Type))) (= (type |add#0@@29|) HandleTypeType)) (= (type |inv#0@@24|) HandleTypeType)) (or (|Multisets.__default.IsAssociative#canCall| Multisets._default.IsAssociative$A@@2 $Heap@@117 |add#0@@29| |inv#0@@24|) (and (and (and ($IsGoodHeap $Heap@@117) ($Is |add#0@@29| (Tclass._System.___hFunc2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2))) ($Is |inv#0@@24| (Tclass._System.___hTotalFunc1 Multisets._default.IsAssociative$A@@2 TBool))) (and (forall ((|x#1@@16| T@U) (|y#1@@14| T@U) ) (!  (=> (and (= (type |x#1@@16|) BoxType) (= (type |y#1@@14|) BoxType)) (=> (and (and ($IsBox |x#1@@16| Multisets._default.IsAssociative$A@@2) ($IsBox |y#1@@14| Multisets._default.IsAssociative$A@@2)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@2 TBool $Heap@@117 |inv#0@@24| |x#1@@16|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@2 TBool $Heap@@117 |inv#0@@24| |y#1@@14|))))) (Requires2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 $Heap@@117 |add#0@@29| |x#1@@16| |y#1@@14|))) :qid |Multisetsidfy.201:21| :skolemid |4789| :pattern ( (Requires2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 $Heap@@117 |add#0@@29| |x#1@@16| |y#1@@14|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@2 TBool $Heap@@117 |inv#0@@24| |y#1@@14|)) ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@2 TBool $Heap@@117 |inv#0@@24| |x#1@@16|))) )) (forall ((|x#2@@6| T@U) (|y#2@@2| T@U) ) (!  (=> (and (= (type |x#2@@6|) BoxType) (= (type |y#2@@2|) BoxType)) (=> (and (and ($IsBox |x#2@@6| Multisets._default.IsAssociative$A@@2) ($IsBox |y#2@@2| Multisets._default.IsAssociative$A@@2)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@2 TBool $Heap@@117 |inv#0@@24| |x#2@@6|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@2 TBool $Heap@@117 |inv#0@@24| |y#2@@2|))))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@2 TBool $Heap@@117 |inv#0@@24| (Apply2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 $Heap@@117 |add#0@@29| |x#2@@6| |y#2@@2|)))))) :qid |Multisetsidfy.201:21| :skolemid |4790| :pattern ( (Apply2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 Multisets._default.IsAssociative$A@@2 $Heap@@117 |add#0@@29| |x#2@@6| |y#2@@2|)) )))))) true) :qid |unknown.0:0| :skolemid |4791| :pattern ( (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@2 $ly@@763 $Heap@@117 |add#0@@29| |inv#0@@24|)) ))))
(assert (forall ((Multisets._default.IsAssociative$A@@3 T@U) ($ly@@764 T@U) ($Heap@@118 T@U) (|add#0@@30| T@U) (|inv#0@@25| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsAssociative$A@@3) TyType) (= (type $ly@@764) LayerTypeType)) (= (type $Heap@@118) (MapType0Type refType MapType1Type))) (= (type |add#0@@30|) HandleTypeType)) (= (type |inv#0@@25|) HandleTypeType)) (and (and ($IsGoodHeap $Heap@@118) ($Is |add#0@@30| (Tclass._System.___hFunc2 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3))) ($Is |inv#0@@25| (Tclass._System.___hTotalFunc1 Multisets._default.IsAssociative$A@@3 TBool)))) (= (|Multisets.__default.IsAssociative#requires| Multisets._default.IsAssociative$A@@3 $ly@@764 $Heap@@118 |add#0@@30| |inv#0@@25|)  (and (forall ((|x#3@@1| T@U) (|y#3| T@U) ) (!  (=> (and (= (type |x#3@@1|) BoxType) (= (type |y#3|) BoxType)) (=> (and (and ($IsBox |x#3@@1| Multisets._default.IsAssociative$A@@3) ($IsBox |y#3| Multisets._default.IsAssociative$A@@3)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@118 |inv#0@@25| |x#3@@1|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@118 |inv#0@@25| |y#3|))))) (Requires2 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 $Heap@@118 |add#0@@30| |x#3@@1| |y#3|))) :qid |Multisetsidfy.201:21| :skolemid |4792| :pattern ( (Requires2 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 $Heap@@118 |add#0@@30| |x#3@@1| |y#3|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@118 |inv#0@@25| |y#3|)) ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@118 |inv#0@@25| |x#3@@1|))) )) (forall ((|x#4| T@U) (|y#4| T@U) ) (!  (=> (and (= (type |x#4|) BoxType) (= (type |y#4|) BoxType)) (=> (and (and ($IsBox |x#4| Multisets._default.IsAssociative$A@@3) ($IsBox |y#4| Multisets._default.IsAssociative$A@@3)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@118 |inv#0@@25| |x#4|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@118 |inv#0@@25| |y#4|))))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@3 TBool $Heap@@118 |inv#0@@25| (Apply2 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 $Heap@@118 |add#0@@30| |x#4| |y#4|)))))) :qid |Multisetsidfy.201:21| :skolemid |4793| :pattern ( (Apply2 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 Multisets._default.IsAssociative$A@@3 $Heap@@118 |add#0@@30| |x#4| |y#4|)) ))))) :qid |unknown.0:0| :skolemid |4794| :pattern ( (|Multisets.__default.IsAssociative#requires| Multisets._default.IsAssociative$A@@3 $ly@@764 $Heap@@118 |add#0@@30| |inv#0@@25|) ($IsGoodHeap $Heap@@118)) )))
(assert  (=> true (forall ((Multisets._default.IsAssociative$A@@4 T@U) ($ly@@765 T@U) ($Heap@@119 T@U) (|add#0@@31| T@U) (|inv#0@@26| T@U) ) (!  (=> (and (and (and (and (and (= (type Multisets._default.IsAssociative$A@@4) TyType) (= (type $ly@@765) LayerTypeType)) (= (type $Heap@@119) (MapType0Type refType MapType1Type))) (= (type |add#0@@31|) HandleTypeType)) (= (type |inv#0@@26|) HandleTypeType)) (or (|Multisets.__default.IsAssociative#canCall| Multisets._default.IsAssociative$A@@4 $Heap@@119 |add#0@@31| |inv#0@@26|) (and (and (and ($IsGoodHeap $Heap@@119) ($Is |add#0@@31| (Tclass._System.___hFunc2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4))) ($Is |inv#0@@26| (Tclass._System.___hTotalFunc1 Multisets._default.IsAssociative$A@@4 TBool))) (and (forall ((|x#3@@2| T@U) (|y#3@@0| T@U) ) (!  (=> (and (= (type |x#3@@2|) BoxType) (= (type |y#3@@0|) BoxType)) (=> (and (and ($IsBox |x#3@@2| Multisets._default.IsAssociative$A@@4) ($IsBox |y#3@@0| Multisets._default.IsAssociative$A@@4)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@119 |inv#0@@26| |x#3@@2|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@119 |inv#0@@26| |y#3@@0|))))) (Requires2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@119 |add#0@@31| |x#3@@2| |y#3@@0|))) :qid |Multisetsidfy.201:21| :skolemid |4792| :pattern ( (Requires2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@119 |add#0@@31| |x#3@@2| |y#3@@0|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@119 |inv#0@@26| |y#3@@0|)) ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@119 |inv#0@@26| |x#3@@2|))) )) (forall ((|x#4@@0| T@U) (|y#4@@0| T@U) ) (!  (=> (and (= (type |x#4@@0|) BoxType) (= (type |y#4@@0|) BoxType)) (=> (and (and ($IsBox |x#4@@0| Multisets._default.IsAssociative$A@@4) ($IsBox |y#4@@0| Multisets._default.IsAssociative$A@@4)) (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@119 |inv#0@@26| |x#4@@0|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@119 |inv#0@@26| |y#4@@0|))))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@119 |inv#0@@26| (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@119 |add#0@@31| |x#4@@0| |y#4@@0|)))))) :qid |Multisetsidfy.201:21| :skolemid |4793| :pattern ( (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@119 |add#0@@31| |x#4@@0| |y#4@@0|)) )))))) (= (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@4 ($LS $ly@@765) $Heap@@119 |add#0@@31| |inv#0@@26|) (forall ((|a#0@@216| T@U) (|b#0@@161| T@U) (|c#0@@13| T@U) ) (!  (=> (and (and (= (type |a#0@@216|) BoxType) (= (type |b#0@@161|) BoxType)) (= (type |c#0@@13|) BoxType)) (=> (and (and (and ($IsBox |a#0@@216| Multisets._default.IsAssociative$A@@4) ($IsBox |b#0@@161| Multisets._default.IsAssociative$A@@4)) ($IsBox |c#0@@13| Multisets._default.IsAssociative$A@@4)) (and (and (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@119 |inv#0@@26| |a#0@@216|))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@119 |inv#0@@26| |b#0@@161|)))) (U_2_bool ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@119 |inv#0@@26| |c#0@@13|))))) (= (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@119 |add#0@@31| (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@119 |add#0@@31| |a#0@@216| |b#0@@161|) |c#0@@13|) (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@119 |add#0@@31| |a#0@@216| (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@119 |add#0@@31| |b#0@@161| |c#0@@13|))))) :qid |Multisetsidfy.204:12| :skolemid |4795| :pattern ( (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@119 |add#0@@31| |a#0@@216| (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@119 |add#0@@31| |b#0@@161| |c#0@@13|))) :pattern ( (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@119 |add#0@@31| (Apply2 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 Multisets._default.IsAssociative$A@@4 $Heap@@119 |add#0@@31| |a#0@@216| |b#0@@161|) |c#0@@13|)) :pattern ( ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@119 |inv#0@@26| |c#0@@13|)) ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@119 |inv#0@@26| |b#0@@161|)) ($Unbox boolType (Apply1 Multisets._default.IsAssociative$A@@4 TBool $Heap@@119 |inv#0@@26| |a#0@@216|))) )))) :qid |unknown.0:0| :skolemid |4796| :pattern ( (Multisets.__default.IsAssociative Multisets._default.IsAssociative$A@@4 ($LS $ly@@765) $Heap@@119 |add#0@@31| |inv#0@@26|) ($IsGoodHeap $Heap@@119)) ))))
(assert  (=> true (forall ((Multisets._default.IsIdentitySimple$A T@U) (|add#0@@32| T@U) (|zero#0@@20| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.IsIdentitySimple$A) TyType) (= (type |add#0@@32|) HandleTypeType)) (= (type |zero#0@@20|) BoxType)) (or (|Multisets.__default.IsIdentitySimple#canCall| Multisets._default.IsIdentitySimple$A |add#0@@32| |zero#0@@20|) (and ($Is |add#0@@32| (Tclass._System.___hTotalFunc2 Multisets._default.IsIdentitySimple$A Multisets._default.IsIdentitySimple$A Multisets._default.IsIdentitySimple$A)) ($IsBox |zero#0@@20| Multisets._default.IsIdentitySimple$A)))) true) :qid |unknown.0:0| :skolemid |4797| :pattern ( (Multisets.__default.IsIdentitySimple Multisets._default.IsIdentitySimple$A |add#0@@32| |zero#0@@20|)) ))))
(assert (forall ((Multisets._default.IsIdentitySimple$A@@0 T@U) ($Heap@@120 T@U) (|add#0@@33| T@U) (|zero#0@@21| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.IsIdentitySimple$A@@0) TyType) (= (type $Heap@@120) (MapType0Type refType MapType1Type))) (= (type |add#0@@33|) HandleTypeType)) (= (type |zero#0@@21|) BoxType)) (and (and ($IsGoodHeap $Heap@@120) ($Is |add#0@@33| (Tclass._System.___hTotalFunc2 Multisets._default.IsIdentitySimple$A@@0 Multisets._default.IsIdentitySimple$A@@0 Multisets._default.IsIdentitySimple$A@@0))) ($IsBox |zero#0@@21| Multisets._default.IsIdentitySimple$A@@0))) (= (|Multisets.__default.IsIdentitySimple#requires| Multisets._default.IsIdentitySimple$A@@0 |add#0@@33| |zero#0@@21|) true)) :qid |unknown.0:0| :skolemid |4798| :pattern ( (|Multisets.__default.IsIdentitySimple#requires| Multisets._default.IsIdentitySimple$A@@0 |add#0@@33| |zero#0@@21|) ($IsGoodHeap $Heap@@120)) )))
(assert (= (type StartFuel_Multisets._default.IsIdentity) LayerTypeType))
(assert  (=> true (forall ((Multisets._default.IsIdentitySimple$A@@1 T@U) ($Heap@@121 T@U) (|add#0@@34| T@U) (|zero#0@@22| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.IsIdentitySimple$A@@1) TyType) (= (type $Heap@@121) (MapType0Type refType MapType1Type))) (= (type |add#0@@34|) HandleTypeType)) (= (type |zero#0@@22|) BoxType)) (or (|Multisets.__default.IsIdentitySimple#canCall| Multisets._default.IsIdentitySimple$A@@1 |add#0@@34| |zero#0@@22|) (and (and ($IsGoodHeap $Heap@@121) ($Is |add#0@@34| (Tclass._System.___hTotalFunc2 Multisets._default.IsIdentitySimple$A@@1 Multisets._default.IsIdentitySimple$A@@1 Multisets._default.IsIdentitySimple$A@@1))) ($IsBox |zero#0@@22| Multisets._default.IsIdentitySimple$A@@1)))) (and (|Multisets.__default.IsIdentity#canCall| Multisets._default.IsIdentitySimple$A@@1 $Heap@@121 |add#0@@34| (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#276| ($Box (Lit (bool_2_U true)))) (|lambda#277| Multisets._default.IsIdentitySimple$A@@1) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ))) |zero#0@@22|) (= (Multisets.__default.IsIdentitySimple Multisets._default.IsIdentitySimple$A@@1 |add#0@@34| |zero#0@@22|) (Multisets.__default.IsIdentity Multisets._default.IsIdentitySimple$A@@1 StartFuel_Multisets._default.IsIdentity $Heap@@121 |add#0@@34| (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#276| ($Box (Lit (bool_2_U true)))) (|lambda#277| Multisets._default.IsIdentitySimple$A@@1) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ))) |zero#0@@22|)))) :qid |unknown.0:0| :skolemid |4799| :pattern ( (Multisets.__default.IsIdentitySimple Multisets._default.IsIdentitySimple$A@@1 |add#0@@34| |zero#0@@22|) ($IsGoodHeap $Heap@@121)) ))))
(assert  (=> true (forall ((Multisets._default.IsIdentitySimple$A@@2 T@U) ($Heap@@122 T@U) (|add#0@@35| T@U) (|zero#0@@23| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.IsIdentitySimple$A@@2) TyType) (= (type $Heap@@122) (MapType0Type refType MapType1Type))) (= (type |add#0@@35|) HandleTypeType)) (= (type |zero#0@@23|) BoxType)) (or (|Multisets.__default.IsIdentitySimple#canCall| Multisets._default.IsIdentitySimple$A@@2 (Lit |add#0@@35|) (Lit |zero#0@@23|)) (and (and ($IsGoodHeap $Heap@@122) ($Is |add#0@@35| (Tclass._System.___hTotalFunc2 Multisets._default.IsIdentitySimple$A@@2 Multisets._default.IsIdentitySimple$A@@2 Multisets._default.IsIdentitySimple$A@@2))) ($IsBox |zero#0@@23| Multisets._default.IsIdentitySimple$A@@2)))) (and (|Multisets.__default.IsIdentity#canCall| Multisets._default.IsIdentitySimple$A@@2 $Heap@@122 (Lit |add#0@@35|) (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#276| ($Box (Lit (bool_2_U true)))) (|lambda#277| Multisets._default.IsIdentitySimple$A@@2) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ))) (Lit |zero#0@@23|)) (= (Multisets.__default.IsIdentitySimple Multisets._default.IsIdentitySimple$A@@2 (Lit |add#0@@35|) (Lit |zero#0@@23|)) (Multisets.__default.IsIdentity Multisets._default.IsIdentitySimple$A@@2 StartFuel_Multisets._default.IsIdentity $Heap@@122 (Lit |add#0@@35|) (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#276| ($Box (Lit (bool_2_U true)))) (|lambda#277| Multisets._default.IsIdentitySimple$A@@2) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ))) (Lit |zero#0@@23|))))) :qid |unknown.0:0| :weight 3 :skolemid |4800| :pattern ( (Multisets.__default.IsIdentitySimple Multisets._default.IsIdentitySimple$A@@2 (Lit |add#0@@35|) (Lit |zero#0@@23|)) ($IsGoodHeap $Heap@@122)) ))))
(assert  (=> true (forall ((Multisets._default.IsCommutativeSimple$A T@U) (|add#0@@36| T@U) ) (!  (=> (and (and (= (type Multisets._default.IsCommutativeSimple$A) TyType) (= (type |add#0@@36|) HandleTypeType)) (or (|Multisets.__default.IsCommutativeSimple#canCall| Multisets._default.IsCommutativeSimple$A |add#0@@36|) ($Is |add#0@@36| (Tclass._System.___hTotalFunc2 Multisets._default.IsCommutativeSimple$A Multisets._default.IsCommutativeSimple$A Multisets._default.IsCommutativeSimple$A)))) true) :qid |unknown.0:0| :skolemid |4801| :pattern ( (Multisets.__default.IsCommutativeSimple Multisets._default.IsCommutativeSimple$A |add#0@@36|)) ))))
(assert (forall ((Multisets._default.IsCommutativeSimple$A@@0 T@U) ($Heap@@123 T@U) (|add#0@@37| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.IsCommutativeSimple$A@@0) TyType) (= (type $Heap@@123) (MapType0Type refType MapType1Type))) (= (type |add#0@@37|) HandleTypeType)) (and ($IsGoodHeap $Heap@@123) ($Is |add#0@@37| (Tclass._System.___hTotalFunc2 Multisets._default.IsCommutativeSimple$A@@0 Multisets._default.IsCommutativeSimple$A@@0 Multisets._default.IsCommutativeSimple$A@@0)))) (= (|Multisets.__default.IsCommutativeSimple#requires| Multisets._default.IsCommutativeSimple$A@@0 |add#0@@37|) true)) :qid |unknown.0:0| :skolemid |4802| :pattern ( (|Multisets.__default.IsCommutativeSimple#requires| Multisets._default.IsCommutativeSimple$A@@0 |add#0@@37|) ($IsGoodHeap $Heap@@123)) )))
(assert (= (type StartFuel_Multisets._default.IsCommutative) LayerTypeType))
(assert  (=> true (forall ((Multisets._default.IsCommutativeSimple$A@@1 T@U) ($Heap@@124 T@U) (|add#0@@38| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.IsCommutativeSimple$A@@1) TyType) (= (type $Heap@@124) (MapType0Type refType MapType1Type))) (= (type |add#0@@38|) HandleTypeType)) (or (|Multisets.__default.IsCommutativeSimple#canCall| Multisets._default.IsCommutativeSimple$A@@1 |add#0@@38|) (and ($IsGoodHeap $Heap@@124) ($Is |add#0@@38| (Tclass._System.___hTotalFunc2 Multisets._default.IsCommutativeSimple$A@@1 Multisets._default.IsCommutativeSimple$A@@1 Multisets._default.IsCommutativeSimple$A@@1))))) (and (|Multisets.__default.IsCommutative#canCall| Multisets._default.IsCommutativeSimple$A@@1 $Heap@@124 |add#0@@38| (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#276| ($Box (Lit (bool_2_U true)))) (|lambda#277| Multisets._default.IsCommutativeSimple$A@@1) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ)))) (= (Multisets.__default.IsCommutativeSimple Multisets._default.IsCommutativeSimple$A@@1 |add#0@@38|) (Multisets.__default.IsCommutative Multisets._default.IsCommutativeSimple$A@@1 StartFuel_Multisets._default.IsCommutative $Heap@@124 |add#0@@38| (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#276| ($Box (Lit (bool_2_U true)))) (|lambda#277| Multisets._default.IsCommutativeSimple$A@@1) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ))))))) :qid |unknown.0:0| :skolemid |4803| :pattern ( (Multisets.__default.IsCommutativeSimple Multisets._default.IsCommutativeSimple$A@@1 |add#0@@38|) ($IsGoodHeap $Heap@@124)) ))))
(assert  (=> true (forall ((Multisets._default.IsCommutativeSimple$A@@2 T@U) ($Heap@@125 T@U) (|add#0@@39| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.IsCommutativeSimple$A@@2) TyType) (= (type $Heap@@125) (MapType0Type refType MapType1Type))) (= (type |add#0@@39|) HandleTypeType)) (or (|Multisets.__default.IsCommutativeSimple#canCall| Multisets._default.IsCommutativeSimple$A@@2 (Lit |add#0@@39|)) (and ($IsGoodHeap $Heap@@125) ($Is |add#0@@39| (Tclass._System.___hTotalFunc2 Multisets._default.IsCommutativeSimple$A@@2 Multisets._default.IsCommutativeSimple$A@@2 Multisets._default.IsCommutativeSimple$A@@2))))) (and (|Multisets.__default.IsCommutative#canCall| Multisets._default.IsCommutativeSimple$A@@2 $Heap@@125 (Lit |add#0@@39|) (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#276| ($Box (Lit (bool_2_U true)))) (|lambda#277| Multisets._default.IsCommutativeSimple$A@@2) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ)))) (= (Multisets.__default.IsCommutativeSimple Multisets._default.IsCommutativeSimple$A@@2 (Lit |add#0@@39|)) (Multisets.__default.IsCommutative Multisets._default.IsCommutativeSimple$A@@2 StartFuel_Multisets._default.IsCommutative $Heap@@125 (Lit |add#0@@39|) (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#276| ($Box (Lit (bool_2_U true)))) (|lambda#277| Multisets._default.IsCommutativeSimple$A@@2) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ))))))) :qid |unknown.0:0| :weight 3 :skolemid |4804| :pattern ( (Multisets.__default.IsCommutativeSimple Multisets._default.IsCommutativeSimple$A@@2 (Lit |add#0@@39|)) ($IsGoodHeap $Heap@@125)) ))))
(assert  (=> true (forall ((Multisets._default.IsAssociativeSimple$A T@U) (|add#0@@40| T@U) ) (!  (=> (and (and (= (type Multisets._default.IsAssociativeSimple$A) TyType) (= (type |add#0@@40|) HandleTypeType)) (or (|Multisets.__default.IsAssociativeSimple#canCall| Multisets._default.IsAssociativeSimple$A |add#0@@40|) ($Is |add#0@@40| (Tclass._System.___hTotalFunc2 Multisets._default.IsAssociativeSimple$A Multisets._default.IsAssociativeSimple$A Multisets._default.IsAssociativeSimple$A)))) true) :qid |unknown.0:0| :skolemid |4805| :pattern ( (Multisets.__default.IsAssociativeSimple Multisets._default.IsAssociativeSimple$A |add#0@@40|)) ))))
(assert (forall ((Multisets._default.IsAssociativeSimple$A@@0 T@U) ($Heap@@126 T@U) (|add#0@@41| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.IsAssociativeSimple$A@@0) TyType) (= (type $Heap@@126) (MapType0Type refType MapType1Type))) (= (type |add#0@@41|) HandleTypeType)) (and ($IsGoodHeap $Heap@@126) ($Is |add#0@@41| (Tclass._System.___hTotalFunc2 Multisets._default.IsAssociativeSimple$A@@0 Multisets._default.IsAssociativeSimple$A@@0 Multisets._default.IsAssociativeSimple$A@@0)))) (= (|Multisets.__default.IsAssociativeSimple#requires| Multisets._default.IsAssociativeSimple$A@@0 |add#0@@41|) true)) :qid |unknown.0:0| :skolemid |4806| :pattern ( (|Multisets.__default.IsAssociativeSimple#requires| Multisets._default.IsAssociativeSimple$A@@0 |add#0@@41|) ($IsGoodHeap $Heap@@126)) )))
(assert (= (type StartFuel_Multisets._default.IsAssociative) LayerTypeType))
(assert  (=> true (forall ((Multisets._default.IsAssociativeSimple$A@@1 T@U) ($Heap@@127 T@U) (|add#0@@42| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.IsAssociativeSimple$A@@1) TyType) (= (type $Heap@@127) (MapType0Type refType MapType1Type))) (= (type |add#0@@42|) HandleTypeType)) (or (|Multisets.__default.IsAssociativeSimple#canCall| Multisets._default.IsAssociativeSimple$A@@1 |add#0@@42|) (and ($IsGoodHeap $Heap@@127) ($Is |add#0@@42| (Tclass._System.___hTotalFunc2 Multisets._default.IsAssociativeSimple$A@@1 Multisets._default.IsAssociativeSimple$A@@1 Multisets._default.IsAssociativeSimple$A@@1))))) (and (|Multisets.__default.IsAssociative#canCall| Multisets._default.IsAssociativeSimple$A@@1 $Heap@@127 |add#0@@42| (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#276| ($Box (Lit (bool_2_U true)))) (|lambda#277| Multisets._default.IsAssociativeSimple$A@@1) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ)))) (= (Multisets.__default.IsAssociativeSimple Multisets._default.IsAssociativeSimple$A@@1 |add#0@@42|) (Multisets.__default.IsAssociative Multisets._default.IsAssociativeSimple$A@@1 StartFuel_Multisets._default.IsAssociative $Heap@@127 |add#0@@42| (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#276| ($Box (Lit (bool_2_U true)))) (|lambda#277| Multisets._default.IsAssociativeSimple$A@@1) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ))))))) :qid |unknown.0:0| :skolemid |4807| :pattern ( (Multisets.__default.IsAssociativeSimple Multisets._default.IsAssociativeSimple$A@@1 |add#0@@42|) ($IsGoodHeap $Heap@@127)) ))))
(assert  (=> true (forall ((Multisets._default.IsAssociativeSimple$A@@2 T@U) ($Heap@@128 T@U) (|add#0@@43| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.IsAssociativeSimple$A@@2) TyType) (= (type $Heap@@128) (MapType0Type refType MapType1Type))) (= (type |add#0@@43|) HandleTypeType)) (or (|Multisets.__default.IsAssociativeSimple#canCall| Multisets._default.IsAssociativeSimple$A@@2 (Lit |add#0@@43|)) (and ($IsGoodHeap $Heap@@128) ($Is |add#0@@43| (Tclass._System.___hTotalFunc2 Multisets._default.IsAssociativeSimple$A@@2 Multisets._default.IsAssociativeSimple$A@@2 Multisets._default.IsAssociativeSimple$A@@2))))) (and (|Multisets.__default.IsAssociative#canCall| Multisets._default.IsAssociativeSimple$A@@2 $Heap@@128 (Lit |add#0@@43|) (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#276| ($Box (Lit (bool_2_U true)))) (|lambda#277| Multisets._default.IsAssociativeSimple$A@@2) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ)))) (= (Multisets.__default.IsAssociativeSimple Multisets._default.IsAssociativeSimple$A@@2 (Lit |add#0@@43|)) (Multisets.__default.IsAssociative Multisets._default.IsAssociativeSimple$A@@2 StartFuel_Multisets._default.IsAssociative $Heap@@128 (Lit |add#0@@43|) (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#276| ($Box (Lit (bool_2_U true)))) (|lambda#277| Multisets._default.IsAssociativeSimple$A@@2) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ))))))) :qid |unknown.0:0| :weight 3 :skolemid |4808| :pattern ( (Multisets.__default.IsAssociativeSimple Multisets._default.IsAssociativeSimple$A@@2 (Lit |add#0@@43|)) ($IsGoodHeap $Heap@@128)) ))))
(assert  (=> true (forall ((|x#0@@20| Int) (|y#0@@28| Int) ) (!  (=> (or (|Multisets.__default.AddNat#canCall| |x#0@@20| |y#0@@28|) (and (<= (LitInt 0) |x#0@@20|) (<= (LitInt 0) |y#0@@28|))) (<= (LitInt 0) (Multisets.__default.AddNat |x#0@@20| |y#0@@28|))) :qid |Multisetsidfy.363:19| :skolemid |4809| :pattern ( (Multisets.__default.AddNat |x#0@@20| |y#0@@28|)) ))))
(assert (forall ((|x#0@@21| Int) (|y#0@@29| Int) ) (!  (=> (and (<= (LitInt 0) |x#0@@21|) (<= (LitInt 0) |y#0@@29|)) (= (|Multisets.__default.AddNat#requires| |x#0@@21| |y#0@@29|) true)) :qid |Multisetsidfy.363:19| :skolemid |4810| :pattern ( (|Multisets.__default.AddNat#requires| |x#0@@21| |y#0@@29|)) )))
(assert  (=> true (forall ((|x#0@@22| Int) (|y#0@@30| Int) ) (!  (=> (or (|Multisets.__default.AddNat#canCall| |x#0@@22| |y#0@@30|) (and (<= (LitInt 0) |x#0@@22|) (<= (LitInt 0) |y#0@@30|))) (= (Multisets.__default.AddNat |x#0@@22| |y#0@@30|) (+ |x#0@@22| |y#0@@30|))) :qid |Multisetsidfy.363:19| :skolemid |4811| :pattern ( (Multisets.__default.AddNat |x#0@@22| |y#0@@30|)) ))))
(assert  (=> true (forall ((|x#0@@23| Int) (|y#0@@31| Int) ) (!  (=> (or (|Multisets.__default.AddNat#canCall| (LitInt |x#0@@23|) (LitInt |y#0@@31|)) (and (<= (LitInt 0) |x#0@@23|) (<= (LitInt 0) |y#0@@31|))) (= (Multisets.__default.AddNat (LitInt |x#0@@23|) (LitInt |y#0@@31|)) (LitInt (+ |x#0@@23| |y#0@@31|)))) :qid |Multisetsidfy.363:19| :weight 3 :skolemid |4812| :pattern ( (Multisets.__default.AddNat (LitInt |x#0@@23|) (LitInt |y#0@@31|))) ))))
(assert (forall ((arg0@@733 T@U) (arg1@@383 T@U) (arg2@@237 T@U) ) (! (= (type (Multisets.__default.ValueMultisetFn arg0@@733 arg1@@383 arg2@@237)) HandleTypeType) :qid |funType:Multisets.__default.ValueMultisetFn| :pattern ( (Multisets.__default.ValueMultisetFn arg0@@733 arg1@@383 arg2@@237)) )))
(assert  (=> true (forall ((Multisets._default.ValueMultisetFn$A T@U) (Multisets._default.ValueMultisetFn$B T@U) (|m#0@@160| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.ValueMultisetFn$A) TyType) (= (type Multisets._default.ValueMultisetFn$B) TyType)) (= (type |m#0@@160|) (MapType BoxType BoxType))) (or (|Multisets.__default.ValueMultisetFn#canCall| Multisets._default.ValueMultisetFn$A Multisets._default.ValueMultisetFn$B |m#0@@160|) ($Is |m#0@@160| (TMap Multisets._default.ValueMultisetFn$A Multisets._default.ValueMultisetFn$B)))) ($Is (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultisetFn$A Multisets._default.ValueMultisetFn$B |m#0@@160|) (Tclass._System.___hFunc1 Multisets._default.ValueMultisetFn$A Multisets._default.ValueMultisetFn$B))) :qid |unknown.0:0| :skolemid |4813| :pattern ( (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultisetFn$A Multisets._default.ValueMultisetFn$B |m#0@@160|)) ))))
(assert (forall ((Multisets._default.ValueMultisetFn$A@@0 T@U) (Multisets._default.ValueMultisetFn$B@@0 T@U) (|m#0@@161| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.ValueMultisetFn$A@@0) TyType) (= (type Multisets._default.ValueMultisetFn$B@@0) TyType)) (= (type |m#0@@161|) (MapType BoxType BoxType))) ($Is |m#0@@161| (TMap Multisets._default.ValueMultisetFn$A@@0 Multisets._default.ValueMultisetFn$B@@0))) (= (|Multisets.__default.ValueMultisetFn#requires| Multisets._default.ValueMultisetFn$A@@0 Multisets._default.ValueMultisetFn$B@@0 |m#0@@161|) true)) :qid |unknown.0:0| :skolemid |4814| :pattern ( (|Multisets.__default.ValueMultisetFn#requires| Multisets._default.ValueMultisetFn$A@@0 Multisets._default.ValueMultisetFn$B@@0 |m#0@@161|)) )))
(assert  (and (forall ((arg0@@734 T@U) ) (! (= (type (|lambda#366| arg0@@734)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#366| :pattern ( (|lambda#366| arg0@@734)) )) (forall ((arg0@@735 T@U) (arg1@@384 T@U) ) (! (= (type (|lambda#367| arg0@@735 arg1@@384)) (MapType2Type (MapType0Type refType MapType1Type) BoxType boolType)) :qid |funType:lambda#367| :pattern ( (|lambda#367| arg0@@735 arg1@@384)) ))))
(assert  (=> true (forall ((Multisets._default.ValueMultisetFn$A@@1 T@U) (Multisets._default.ValueMultisetFn$B@@1 T@U) (|m#0@@162| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.ValueMultisetFn$A@@1) TyType) (= (type Multisets._default.ValueMultisetFn$B@@1) TyType)) (= (type |m#0@@162|) (MapType BoxType BoxType))) (or (|Multisets.__default.ValueMultisetFn#canCall| Multisets._default.ValueMultisetFn$A@@1 Multisets._default.ValueMultisetFn$B@@1 |m#0@@162|) ($Is |m#0@@162| (TMap Multisets._default.ValueMultisetFn$A@@1 Multisets._default.ValueMultisetFn$B@@1)))) (= (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultisetFn$A@@1 Multisets._default.ValueMultisetFn$B@@1 |m#0@@162|) (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#366| (|Map#Elements| |m#0@@162|)) (|lambda#367| Multisets._default.ValueMultisetFn$A@@1 (|Map#Domain| |m#0@@162|)) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ))))) :qid |unknown.0:0| :skolemid |4815| :pattern ( (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultisetFn$A@@1 Multisets._default.ValueMultisetFn$B@@1 |m#0@@162|)) ))))
(assert  (=> true (forall ((Multisets._default.ValueMultisetFn$A@@2 T@U) (Multisets._default.ValueMultisetFn$B@@2 T@U) (|m#0@@163| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.ValueMultisetFn$A@@2) TyType) (= (type Multisets._default.ValueMultisetFn$B@@2) TyType)) (= (type |m#0@@163|) (MapType BoxType BoxType))) (or (|Multisets.__default.ValueMultisetFn#canCall| Multisets._default.ValueMultisetFn$A@@2 Multisets._default.ValueMultisetFn$B@@2 (Lit |m#0@@163|)) ($Is |m#0@@163| (TMap Multisets._default.ValueMultisetFn$A@@2 Multisets._default.ValueMultisetFn$B@@2)))) (= (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultisetFn$A@@2 Multisets._default.ValueMultisetFn$B@@2 (Lit |m#0@@163|)) (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#366| (|Map#Elements| (Lit |m#0@@163|))) (|lambda#367| Multisets._default.ValueMultisetFn$A@@2 (|Map#Domain| |m#0@@163|)) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $LZ))))) :qid |unknown.0:0| :weight 3 :skolemid |4816| :pattern ( (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultisetFn$A@@2 Multisets._default.ValueMultisetFn$B@@2 (Lit |m#0@@163|))) ))))
(assert (forall ((arg0@@736 T@U) (arg1@@385 T@U) (arg2@@238 T@U) ) (! (= (type (Multisets.__default.ValueMultiset arg0@@736 arg1@@385 arg2@@238)) (MapType0Type BoxType intType)) :qid |funType:Multisets.__default.ValueMultiset| :pattern ( (Multisets.__default.ValueMultiset arg0@@736 arg1@@385 arg2@@238)) )))
(assert  (=> true (forall ((Multisets._default.ValueMultiset$A T@U) (Multisets._default.ValueMultiset$B T@U) (|m#0@@164| T@U) ) (!  (=> (and (and (and (= (type Multisets._default.ValueMultiset$A) TyType) (= (type Multisets._default.ValueMultiset$B) TyType)) (= (type |m#0@@164|) (MapType BoxType BoxType))) (or (|Multisets.__default.ValueMultiset#canCall| Multisets._default.ValueMultiset$A Multisets._default.ValueMultiset$B |m#0@@164|) ($Is |m#0@@164| (TMap Multisets._default.ValueMultiset$A Multisets._default.ValueMultiset$B)))) ($Is (Multisets.__default.ValueMultiset Multisets._default.ValueMultiset$A Multisets._default.ValueMultiset$B |m#0@@164|) (TMultiSet Multisets._default.ValueMultiset$B))) :qid |unknown.0:0| :skolemid |4817| :pattern ( (Multisets.__default.ValueMultiset Multisets._default.ValueMultiset$A Multisets._default.ValueMultiset$B |m#0@@164|)) ))))
(assert (forall ((Multisets._default.ValueMultiset$A@@0 T@U) (Multisets._default.ValueMultiset$B@@0 T@U) ($Heap@@129 T@U) (|m#0@@165| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.ValueMultiset$A@@0) TyType) (= (type Multisets._default.ValueMultiset$B@@0) TyType)) (= (type $Heap@@129) (MapType0Type refType MapType1Type))) (= (type |m#0@@165|) (MapType BoxType BoxType))) (and ($IsGoodHeap $Heap@@129) ($Is |m#0@@165| (TMap Multisets._default.ValueMultiset$A@@0 Multisets._default.ValueMultiset$B@@0)))) (= (|Multisets.__default.ValueMultiset#requires| Multisets._default.ValueMultiset$A@@0 Multisets._default.ValueMultiset$B@@0 |m#0@@165|) true)) :qid |unknown.0:0| :skolemid |4818| :pattern ( (|Multisets.__default.ValueMultiset#requires| Multisets._default.ValueMultiset$A@@0 Multisets._default.ValueMultiset$B@@0 |m#0@@165|) ($IsGoodHeap $Heap@@129)) )))
(assert (= (type StartFuel_Multisets._default.Apply) LayerTypeType))
(assert  (=> true (forall ((Multisets._default.ValueMultiset$A@@1 T@U) (Multisets._default.ValueMultiset$B@@1 T@U) ($Heap@@130 T@U) (|m#0@@166| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.ValueMultiset$A@@1) TyType) (= (type Multisets._default.ValueMultiset$B@@1) TyType)) (= (type $Heap@@130) (MapType0Type refType MapType1Type))) (= (type |m#0@@166|) (MapType BoxType BoxType))) (or (|Multisets.__default.ValueMultiset#canCall| Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 |m#0@@166|) (and ($IsGoodHeap $Heap@@130) ($Is |m#0@@166| (TMap Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1))))) (and (and (|Multisets.__default.ValueMultisetFn#canCall| Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 |m#0@@166|) (|Multisets.__default.Apply#canCall| Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 $Heap@@130 (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 |m#0@@166|) (|MultiSet#FromSet| (|Map#Domain| |m#0@@166|)))) (= (Multisets.__default.ValueMultiset Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 |m#0@@166|) (Multisets.__default.Apply Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 StartFuel_Multisets._default.Apply $Heap@@130 (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 |m#0@@166|) (|MultiSet#FromSet| (|Map#Domain| |m#0@@166|)))))) :qid |unknown.0:0| :skolemid |4819| :pattern ( (Multisets.__default.ValueMultiset Multisets._default.ValueMultiset$A@@1 Multisets._default.ValueMultiset$B@@1 |m#0@@166|) ($IsGoodHeap $Heap@@130)) ))))
(assert  (=> true (forall ((Multisets._default.ValueMultiset$A@@2 T@U) (Multisets._default.ValueMultiset$B@@2 T@U) ($Heap@@131 T@U) (|m#0@@167| T@U) ) (!  (=> (and (and (and (and (= (type Multisets._default.ValueMultiset$A@@2) TyType) (= (type Multisets._default.ValueMultiset$B@@2) TyType)) (= (type $Heap@@131) (MapType0Type refType MapType1Type))) (= (type |m#0@@167|) (MapType BoxType BoxType))) (or (|Multisets.__default.ValueMultiset#canCall| Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 (Lit |m#0@@167|)) (and ($IsGoodHeap $Heap@@131) ($Is |m#0@@167| (TMap Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2))))) (and (and (|Multisets.__default.ValueMultisetFn#canCall| Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 (Lit |m#0@@167|)) (|Multisets.__default.Apply#canCall| Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 $Heap@@131 (Lit (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 (Lit |m#0@@167|))) (|MultiSet#FromSet| (Lit (|Map#Domain| (Lit |m#0@@167|)))))) (= (Multisets.__default.ValueMultiset Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 (Lit |m#0@@167|)) (Multisets.__default.Apply Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 StartFuel_Multisets._default.Apply $Heap@@131 (Lit (Multisets.__default.ValueMultisetFn Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 (Lit |m#0@@167|))) (|MultiSet#FromSet| (Lit (|Map#Domain| (Lit |m#0@@167|)))))))) :qid |unknown.0:0| :weight 3 :skolemid |4820| :pattern ( (Multisets.__default.ValueMultiset Multisets._default.ValueMultiset$A@@2 Multisets._default.ValueMultiset$B@@2 (Lit |m#0@@167|)) ($IsGoodHeap $Heap@@131)) ))))
(assert (forall ((arg0@@737 T@U) (arg1@@386 T@U) ) (! (= (type (|#MapSeqs.SeqPair.SeqPair| arg0@@737 arg1@@386)) DatatypeTypeType) :qid |funType:#MapSeqs.SeqPair.SeqPair| :pattern ( (|#MapSeqs.SeqPair.SeqPair| arg0@@737 arg1@@386)) )))
(assert (forall ((|a#0#0#0@@3| T@U) (|a#0#1#0@@1| T@U) ) (!  (=> (and (= (type |a#0#0#0@@3|) (SeqType BoxType)) (= (type |a#0#1#0@@1|) (SeqType BoxType))) (= (DatatypeCtorId (|#MapSeqs.SeqPair.SeqPair| |a#0#0#0@@3| |a#0#1#0@@1|)) |##MapSeqs.SeqPair.SeqPair|)) :qid |MapSeqsidfy.51:30| :skolemid |4821| :pattern ( (|#MapSeqs.SeqPair.SeqPair| |a#0#0#0@@3| |a#0#1#0@@1|)) )))
(assert (forall ((d@@158 T@U) ) (!  (=> (= (type d@@158) DatatypeTypeType) (= (MapSeqs.SeqPair.SeqPair_q d@@158) (= (DatatypeCtorId d@@158) |##MapSeqs.SeqPair.SeqPair|))) :qid |unknown.0:0| :skolemid |4822| :pattern ( (MapSeqs.SeqPair.SeqPair_q d@@158)) )))
(assert (forall ((d@@159 T@U) ) (!  (=> (and (= (type d@@159) DatatypeTypeType) (MapSeqs.SeqPair.SeqPair_q d@@159)) (exists ((|a#1#0#0@@3| T@U) (|a#1#1#0@@1| T@U) ) (!  (and (and (= (type |a#1#0#0@@3|) (SeqType BoxType)) (= (type |a#1#1#0@@1|) (SeqType BoxType))) (= d@@159 (|#MapSeqs.SeqPair.SeqPair| |a#1#0#0@@3| |a#1#1#0@@1|))) :qid |MapSeqsidfy.51:30| :skolemid |4823| :no-pattern (type |a#1#0#0@@3|) :no-pattern (type |a#1#1#0@@1|) :no-pattern (U_2_int |a#1#0#0@@3|) :no-pattern (U_2_bool |a#1#0#0@@3|) :no-pattern (U_2_int |a#1#1#0@@1|) :no-pattern (U_2_bool |a#1#1#0@@1|) ))) :qid |unknown.0:0| :skolemid |4824| :pattern ( (MapSeqs.SeqPair.SeqPair_q d@@159)) )))
(assert (= (type Tclass.MapSeqs.SeqPair) TyType))
(assert (= (Tag Tclass.MapSeqs.SeqPair) Tagclass.MapSeqs.SeqPair))
(assert (= (TagFamily Tclass.MapSeqs.SeqPair) tytagFamily$SeqPair))
(assert (forall ((bx@@193 T@U) ) (!  (=> (and (= (type bx@@193) BoxType) ($IsBox bx@@193 Tclass.MapSeqs.SeqPair)) (and (= ($Box ($Unbox DatatypeTypeType bx@@193)) bx@@193) ($Is ($Unbox DatatypeTypeType bx@@193) Tclass.MapSeqs.SeqPair))) :qid |unknown.0:0| :skolemid |4825| :pattern ( ($IsBox bx@@193 Tclass.MapSeqs.SeqPair)) )))
(assert (forall ((|a#2#0#0@@3| T@U) (|a#2#1#0@@1| T@U) ) (!  (=> (and (= (type |a#2#0#0@@3|) (SeqType BoxType)) (= (type |a#2#1#0@@1|) (SeqType BoxType))) (= ($Is (|#MapSeqs.SeqPair.SeqPair| |a#2#0#0@@3| |a#2#1#0@@1|) Tclass.MapSeqs.SeqPair)  (and ($Is |a#2#0#0@@3| (TSeq Tclass.KeyType.Key)) ($Is |a#2#1#0@@1| (TSeq Tclass.ValueMessage.Message))))) :qid |MapSeqsidfy.51:30| :skolemid |4826| :pattern ( ($Is (|#MapSeqs.SeqPair.SeqPair| |a#2#0#0@@3| |a#2#1#0@@1|) Tclass.MapSeqs.SeqPair)) )))
(assert (forall ((|a#3#0#0@@3| T@U) (|a#3#1#0@@1| T@U) ($h@@172 T@U) ) (!  (=> (and (and (and (= (type |a#3#0#0@@3|) (SeqType BoxType)) (= (type |a#3#1#0@@1|) (SeqType BoxType))) (= (type $h@@172) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@172)) (= ($IsAlloc (|#MapSeqs.SeqPair.SeqPair| |a#3#0#0@@3| |a#3#1#0@@1|) Tclass.MapSeqs.SeqPair $h@@172)  (and ($IsAlloc |a#3#0#0@@3| (TSeq Tclass.KeyType.Key) $h@@172) ($IsAlloc |a#3#1#0@@1| (TSeq Tclass.ValueMessage.Message) $h@@172)))) :qid |MapSeqsidfy.51:30| :skolemid |4827| :pattern ( ($IsAlloc (|#MapSeqs.SeqPair.SeqPair| |a#3#0#0@@3| |a#3#1#0@@1|) Tclass.MapSeqs.SeqPair $h@@172)) )))
(assert (forall ((arg0@@738 T@U) ) (! (= (type (MapSeqs.SeqPair.keys arg0@@738)) (SeqType BoxType)) :qid |funType:MapSeqs.SeqPair.keys| :pattern ( (MapSeqs.SeqPair.keys arg0@@738)) )))
(assert (forall ((d@@160 T@U) ($h@@173 T@U) ) (!  (=> (and (and (= (type d@@160) DatatypeTypeType) (= (type $h@@173) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@173) (and (MapSeqs.SeqPair.SeqPair_q d@@160) ($IsAlloc d@@160 Tclass.MapSeqs.SeqPair $h@@173)))) ($IsAlloc (MapSeqs.SeqPair.keys d@@160) (TSeq Tclass.KeyType.Key) $h@@173)) :qid |unknown.0:0| :skolemid |4828| :pattern ( ($IsAlloc (MapSeqs.SeqPair.keys d@@160) (TSeq Tclass.KeyType.Key) $h@@173)) )))
(assert (forall ((arg0@@739 T@U) ) (! (= (type (MapSeqs.SeqPair.msgs arg0@@739)) (SeqType BoxType)) :qid |funType:MapSeqs.SeqPair.msgs| :pattern ( (MapSeqs.SeqPair.msgs arg0@@739)) )))
(assert (forall ((d@@161 T@U) ($h@@174 T@U) ) (!  (=> (and (and (= (type d@@161) DatatypeTypeType) (= (type $h@@174) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@174) (and (MapSeqs.SeqPair.SeqPair_q d@@161) ($IsAlloc d@@161 Tclass.MapSeqs.SeqPair $h@@174)))) ($IsAlloc (MapSeqs.SeqPair.msgs d@@161) (TSeq Tclass.ValueMessage.Message) $h@@174)) :qid |unknown.0:0| :skolemid |4829| :pattern ( ($IsAlloc (MapSeqs.SeqPair.msgs d@@161) (TSeq Tclass.ValueMessage.Message) $h@@174)) )))
(assert (forall ((|a#4#0#0@@3| T@U) (|a#4#1#0@@1| T@U) ) (!  (=> (and (= (type |a#4#0#0@@3|) (SeqType BoxType)) (= (type |a#4#1#0@@1|) (SeqType BoxType))) (= (|#MapSeqs.SeqPair.SeqPair| (Lit |a#4#0#0@@3|) (Lit |a#4#1#0@@1|)) (Lit (|#MapSeqs.SeqPair.SeqPair| |a#4#0#0@@3| |a#4#1#0@@1|)))) :qid |MapSeqsidfy.51:30| :skolemid |4830| :pattern ( (|#MapSeqs.SeqPair.SeqPair| (Lit |a#4#0#0@@3|) (Lit |a#4#1#0@@1|))) )))
(assert (forall ((|a#5#0#0@@4| T@U) (|a#5#1#0@@1| T@U) ) (!  (=> (and (= (type |a#5#0#0@@4|) (SeqType BoxType)) (= (type |a#5#1#0@@1|) (SeqType BoxType))) (= (MapSeqs.SeqPair.keys (|#MapSeqs.SeqPair.SeqPair| |a#5#0#0@@4| |a#5#1#0@@1|)) |a#5#0#0@@4|)) :qid |MapSeqsidfy.51:30| :skolemid |4831| :pattern ( (|#MapSeqs.SeqPair.SeqPair| |a#5#0#0@@4| |a#5#1#0@@1|)) )))
(assert (forall ((|a#6#0#0@@4| T@U) (|a#6#1#0@@1| T@U) (i@@35 Int) ) (!  (=> (and (and (= (type |a#6#0#0@@4|) (SeqType BoxType)) (= (type |a#6#1#0@@1|) (SeqType BoxType))) (and (<= 0 i@@35) (< i@@35 (|Seq#Length| |a#6#0#0@@4|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#6#0#0@@4| i@@35))) (DtRank (|#MapSeqs.SeqPair.SeqPair| |a#6#0#0@@4| |a#6#1#0@@1|)))) :qid |MapSeqsidfy.51:30| :skolemid |4832| :pattern ( (|Seq#Index| |a#6#0#0@@4| i@@35) (|#MapSeqs.SeqPair.SeqPair| |a#6#0#0@@4| |a#6#1#0@@1|)) )))
(assert (forall ((|a#7#0#0@@4| T@U) (|a#7#1#0@@1| T@U) ) (!  (=> (and (= (type |a#7#0#0@@4|) (SeqType BoxType)) (= (type |a#7#1#0@@1|) (SeqType BoxType))) (< (|Seq#Rank| |a#7#0#0@@4|) (DtRank (|#MapSeqs.SeqPair.SeqPair| |a#7#0#0@@4| |a#7#1#0@@1|)))) :qid |MapSeqsidfy.51:30| :skolemid |4833| :pattern ( (|#MapSeqs.SeqPair.SeqPair| |a#7#0#0@@4| |a#7#1#0@@1|)) )))
(assert (forall ((|a#8#0#0@@3| T@U) (|a#8#1#0@@1| T@U) ) (!  (=> (and (= (type |a#8#0#0@@3|) (SeqType BoxType)) (= (type |a#8#1#0@@1|) (SeqType BoxType))) (= (MapSeqs.SeqPair.msgs (|#MapSeqs.SeqPair.SeqPair| |a#8#0#0@@3| |a#8#1#0@@1|)) |a#8#1#0@@1|)) :qid |MapSeqsidfy.51:30| :skolemid |4834| :pattern ( (|#MapSeqs.SeqPair.SeqPair| |a#8#0#0@@3| |a#8#1#0@@1|)) )))
(assert (forall ((|a#9#0#0@@2| T@U) (|a#9#1#0@@0| T@U) (i@@36 Int) ) (!  (=> (and (and (= (type |a#9#0#0@@2|) (SeqType BoxType)) (= (type |a#9#1#0@@0|) (SeqType BoxType))) (and (<= 0 i@@36) (< i@@36 (|Seq#Length| |a#9#1#0@@0|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#9#1#0@@0| i@@36))) (DtRank (|#MapSeqs.SeqPair.SeqPair| |a#9#0#0@@2| |a#9#1#0@@0|)))) :qid |MapSeqsidfy.51:30| :skolemid |4835| :pattern ( (|Seq#Index| |a#9#1#0@@0| i@@36) (|#MapSeqs.SeqPair.SeqPair| |a#9#0#0@@2| |a#9#1#0@@0|)) )))
(assert (forall ((|a#10#0#0@@2| T@U) (|a#10#1#0@@0| T@U) ) (!  (=> (and (= (type |a#10#0#0@@2|) (SeqType BoxType)) (= (type |a#10#1#0@@0|) (SeqType BoxType))) (< (|Seq#Rank| |a#10#1#0@@0|) (DtRank (|#MapSeqs.SeqPair.SeqPair| |a#10#0#0@@2| |a#10#1#0@@0|)))) :qid |MapSeqsidfy.51:30| :skolemid |4836| :pattern ( (|#MapSeqs.SeqPair.SeqPair| |a#10#0#0@@2| |a#10#1#0@@0|)) )))
(assert (forall ((d@@162 T@U) ) (!  (=> (and (= (type d@@162) DatatypeTypeType) (|$IsA#MapSeqs.SeqPair| d@@162)) (MapSeqs.SeqPair.SeqPair_q d@@162)) :qid |unknown.0:0| :skolemid |4837| :pattern ( (|$IsA#MapSeqs.SeqPair| d@@162)) )))
(assert (forall ((d@@163 T@U) ) (!  (=> (and (= (type d@@163) DatatypeTypeType) ($Is d@@163 Tclass.MapSeqs.SeqPair)) (MapSeqs.SeqPair.SeqPair_q d@@163)) :qid |unknown.0:0| :skolemid |4838| :pattern ( (MapSeqs.SeqPair.SeqPair_q d@@163) ($Is d@@163 Tclass.MapSeqs.SeqPair)) )))
(assert (forall ((a@@184 T@U) (b@@115 T@U) ) (!  (=> (and (and (= (type a@@184) DatatypeTypeType) (= (type b@@115) DatatypeTypeType)) true) (= (|MapSeqs.SeqPair#Equal| a@@184 b@@115)  (and (|Seq#Equal| (MapSeqs.SeqPair.keys a@@184) (MapSeqs.SeqPair.keys b@@115)) (|Seq#Equal| (MapSeqs.SeqPair.msgs a@@184) (MapSeqs.SeqPair.msgs b@@115))))) :qid |unknown.0:0| :skolemid |4839| :pattern ( (|MapSeqs.SeqPair#Equal| a@@184 b@@115)) )))
(assert (forall ((a@@185 T@U) (b@@116 T@U) ) (!  (=> (and (= (type a@@185) DatatypeTypeType) (= (type b@@116) DatatypeTypeType)) (= (|MapSeqs.SeqPair#Equal| a@@185 b@@116) (= a@@185 b@@116))) :qid |unknown.0:0| :skolemid |4840| :pattern ( (|MapSeqs.SeqPair#Equal| a@@185 b@@116)) )))
(assert (= (type Tclass.MapSeqs.__default) TyType))
(assert (= (Tag Tclass.MapSeqs.__default) Tagclass.MapSeqs.__default))
(assert (= (TagFamily Tclass.MapSeqs.__default) tytagFamily$_default))
(assert (forall (($o@@70 T@U) ) (!  (=> (= (type $o@@70) refType) (= ($Is $o@@70 Tclass.MapSeqs.__default)  (or (= $o@@70 null) (= (dtype $o@@70) Tclass.MapSeqs.__default)))) :qid |unknown.0:0| :skolemid |4841| :pattern ( ($Is $o@@70 Tclass.MapSeqs.__default)) )))
(assert (forall (($o@@71 T@U) ($h@@175 T@U) ) (!  (=> (and (= (type $o@@71) refType) (= (type $h@@175) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@71 Tclass.MapSeqs.__default $h@@175)  (or (= $o@@71 null) (U_2_bool (MapType1Select (MapType0Select $h@@175 $o@@71) alloc))))) :qid |unknown.0:0| :skolemid |4842| :pattern ( ($IsAlloc $o@@71 Tclass.MapSeqs.__default $h@@175)) )))
(assert (forall (($ly@@766 T@U) (|keys#0@@19| T@U) (|msgs#0@@9| T@U) ) (!  (=> (and (and (= (type $ly@@766) LayerTypeType) (= (type |keys#0@@19|) (SeqType BoxType))) (= (type |msgs#0@@9|) (SeqType BoxType))) (= (MapSeqs.__default.map__of__seqs ($LS $ly@@766) |keys#0@@19| |msgs#0@@9|) (MapSeqs.__default.map__of__seqs $ly@@766 |keys#0@@19| |msgs#0@@9|))) :qid |MapSeqsidfy.31:12| :skolemid |4843| :pattern ( (MapSeqs.__default.map__of__seqs ($LS $ly@@766) |keys#0@@19| |msgs#0@@9|)) )))
(assert (forall (($ly@@767 T@U) (|keys#0@@20| T@U) (|msgs#0@@10| T@U) ) (!  (=> (and (and (= (type $ly@@767) LayerTypeType) (= (type |keys#0@@20|) (SeqType BoxType))) (= (type |msgs#0@@10|) (SeqType BoxType))) (= (MapSeqs.__default.map__of__seqs $ly@@767 |keys#0@@20| |msgs#0@@10|) (MapSeqs.__default.map__of__seqs $LZ |keys#0@@20| |msgs#0@@10|))) :qid |MapSeqsidfy.31:12| :skolemid |4844| :pattern ( (MapSeqs.__default.map__of__seqs (AsFuelBottom $ly@@767) |keys#0@@20| |msgs#0@@10|)) )))
(assert  (=> true (forall (($ly@@768 T@U) (|keys#0@@21| T@U) (|msgs#0@@11| T@U) ) (!  (=> (and (and (and (= (type $ly@@768) LayerTypeType) (= (type |keys#0@@21|) (SeqType BoxType))) (= (type |msgs#0@@11|) (SeqType BoxType))) (or (|MapSeqs.__default.map__of__seqs#canCall| |keys#0@@21| |msgs#0@@11|) (and (and ($Is |keys#0@@21| (TSeq Tclass.KeyType.Key)) ($Is |msgs#0@@11| (TSeq Tclass.ValueMessage.Message))) (= (|Seq#Length| |keys#0@@21|) (|Seq#Length| |msgs#0@@11|))))) ($Is (MapSeqs.__default.map__of__seqs $ly@@768 |keys#0@@21| |msgs#0@@11|) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) :qid |MapSeqsidfy.31:12| :skolemid |4845| :pattern ( (MapSeqs.__default.map__of__seqs $ly@@768 |keys#0@@21| |msgs#0@@11|)) ))))
(assert (forall (($ly@@769 T@U) (|keys#0@@22| T@U) (|msgs#0@@12| T@U) ) (!  (=> (and (and (and (= (type $ly@@769) LayerTypeType) (= (type |keys#0@@22|) (SeqType BoxType))) (= (type |msgs#0@@12|) (SeqType BoxType))) (and ($Is |keys#0@@22| (TSeq Tclass.KeyType.Key)) ($Is |msgs#0@@12| (TSeq Tclass.ValueMessage.Message)))) (= (|MapSeqs.__default.map__of__seqs#requires| $ly@@769 |keys#0@@22| |msgs#0@@12|) (= (|Seq#Length| |keys#0@@22|) (|Seq#Length| |msgs#0@@12|)))) :qid |MapSeqsidfy.31:12| :skolemid |4846| :pattern ( (|MapSeqs.__default.map__of__seqs#requires| $ly@@769 |keys#0@@22| |msgs#0@@12|)) )))
(assert (forall ((arg0@@740 T@U) ) (! (= (type (MapSeqs.__default.maximumKey arg0@@740)) DatatypeTypeType) :qid |funType:MapSeqs.__default.maximumKey| :pattern ( (MapSeqs.__default.maximumKey arg0@@740)) )))
(assert  (=> true (forall ((|b#0@@162| T@U) ) (!  (=> (and (= (type |b#0@@162|) (MapType0Type BoxType boolType)) (or (|MapSeqs.__default.maximumKey#canCall| |b#0@@162|) ($Is |b#0@@162| (TSet Tclass.KeyType.Key)))) ($Is (MapSeqs.__default.maximumKey |b#0@@162|) (Tclass.Options.Option Tclass.KeyType.Key))) :qid |MapSeqsidfy.40:23| :skolemid |4847| :pattern ( (MapSeqs.__default.maximumKey |b#0@@162|)) ))))
(assert (forall ((|b#0@@163| T@U) ) (!  (=> (and (= (type |b#0@@163|) (MapType0Type BoxType boolType)) ($Is |b#0@@163| (TSet Tclass.KeyType.Key))) (= (|MapSeqs.__default.maximumKey#requires| |b#0@@163|) true)) :qid |MapSeqsidfy.40:23| :skolemid |4848| :pattern ( (|MapSeqs.__default.maximumKey#requires| |b#0@@163|)) )))
(assert (forall ((arg0@@741 T@U) (arg1@@387 T@U) ) (! (= (type (MapSeqs.__default.seqs__of__map arg0@@741 arg1@@387)) DatatypeTypeType) :qid |funType:MapSeqs.__default.seqs__of__map| :pattern ( (MapSeqs.__default.seqs__of__map arg0@@741 arg1@@387)) )))
(assert (forall (($ly@@770 T@U) (|m#0@@168| T@U) ) (!  (=> (and (= (type $ly@@770) LayerTypeType) (= (type |m#0@@168|) (MapType BoxType BoxType))) (= (MapSeqs.__default.seqs__of__map ($LS $ly@@770) |m#0@@168|) (MapSeqs.__default.seqs__of__map $ly@@770 |m#0@@168|))) :qid |MapSeqsidfy.53:12| :skolemid |4849| :pattern ( (MapSeqs.__default.seqs__of__map ($LS $ly@@770) |m#0@@168|)) )))
(assert (forall (($ly@@771 T@U) (|m#0@@169| T@U) ) (!  (=> (and (= (type $ly@@771) LayerTypeType) (= (type |m#0@@169|) (MapType BoxType BoxType))) (= (MapSeqs.__default.seqs__of__map $ly@@771 |m#0@@169|) (MapSeqs.__default.seqs__of__map $LZ |m#0@@169|))) :qid |MapSeqsidfy.53:12| :skolemid |4850| :pattern ( (MapSeqs.__default.seqs__of__map (AsFuelBottom $ly@@771) |m#0@@169|)) )))
(assert  (=> true (forall (($ly@@772 T@U) (|m#0@@170| T@U) ) (!  (=> (and (and (= (type $ly@@772) LayerTypeType) (= (type |m#0@@170|) (MapType BoxType BoxType))) (or (|MapSeqs.__default.seqs__of__map#canCall| |m#0@@170|) ($Is |m#0@@170| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (= (|Seq#Length| (MapSeqs.SeqPair.keys (MapSeqs.__default.seqs__of__map $ly@@772 |m#0@@170|))) (|Seq#Length| (MapSeqs.SeqPair.msgs (MapSeqs.__default.seqs__of__map $ly@@772 |m#0@@170|)))) ($Is (MapSeqs.__default.seqs__of__map $ly@@772 |m#0@@170|) Tclass.MapSeqs.SeqPair))) :qid |MapSeqsidfy.53:12| :skolemid |4851| :pattern ( (MapSeqs.__default.seqs__of__map $ly@@772 |m#0@@170|)) ))))
(assert (forall (($ly@@773 T@U) (|m#0@@171| T@U) ) (!  (=> (and (and (= (type $ly@@773) LayerTypeType) (= (type |m#0@@171|) (MapType BoxType BoxType))) ($Is |m#0@@171| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) (= (|MapSeqs.__default.seqs__of__map#requires| $ly@@773 |m#0@@171|) true)) :qid |MapSeqsidfy.53:12| :skolemid |4852| :pattern ( (|MapSeqs.__default.seqs__of__map#requires| $ly@@773 |m#0@@171|)) )))
(assert (forall ((|a#0#0#0@@4| T@U) (|a#0#1#0@@2| T@U) ) (!  (=> (and (= (type |a#0#0#0@@4|) (SeqType BoxType)) (= (type |a#0#1#0@@2|) (SeqType BoxType))) (= (DatatypeCtorId (|#BucketsLib.Bucket.Bucket| |a#0#0#0@@4| |a#0#1#0@@2|)) |##BucketsLib.Bucket.Bucket|)) :qid |BucketsLibidfy.46:28| :skolemid |4855| :pattern ( (|#BucketsLib.Bucket.Bucket| |a#0#0#0@@4| |a#0#1#0@@2|)) )))
(assert (forall ((d@@164 T@U) ) (!  (=> (= (type d@@164) DatatypeTypeType) (= (BucketsLib.Bucket.Bucket_q d@@164) (= (DatatypeCtorId d@@164) |##BucketsLib.Bucket.Bucket|))) :qid |unknown.0:0| :skolemid |4856| :pattern ( (BucketsLib.Bucket.Bucket_q d@@164)) )))
(assert (forall ((d@@165 T@U) ) (!  (=> (and (= (type d@@165) DatatypeTypeType) (BucketsLib.Bucket.Bucket_q d@@165)) (exists ((|a#1#0#0@@4| T@U) (|a#1#1#0@@2| T@U) ) (!  (and (and (= (type |a#1#0#0@@4|) (SeqType BoxType)) (= (type |a#1#1#0@@2|) (SeqType BoxType))) (= d@@165 (|#BucketsLib.Bucket.Bucket| |a#1#0#0@@4| |a#1#1#0@@2|))) :qid |BucketsLibidfy.46:28| :skolemid |4857| :no-pattern (type |a#1#0#0@@4|) :no-pattern (type |a#1#1#0@@2|) :no-pattern (U_2_int |a#1#0#0@@4|) :no-pattern (U_2_bool |a#1#0#0@@4|) :no-pattern (U_2_int |a#1#1#0@@2|) :no-pattern (U_2_bool |a#1#1#0@@2|) ))) :qid |unknown.0:0| :skolemid |4858| :pattern ( (BucketsLib.Bucket.Bucket_q d@@165)) )))
(assert (forall ((|a#2#0#0@@4| T@U) (|a#2#1#0@@2| T@U) ) (!  (=> (and (= (type |a#2#0#0@@4|) (SeqType BoxType)) (= (type |a#2#1#0@@2|) (SeqType BoxType))) (= ($Is (|#BucketsLib.Bucket.Bucket| |a#2#0#0@@4| |a#2#1#0@@2|) Tclass.BucketsLib.Bucket)  (and ($Is |a#2#0#0@@4| (TSeq Tclass.KeyType.Key)) ($Is |a#2#1#0@@2| (TSeq Tclass.ValueMessage.Message))))) :qid |BucketsLibidfy.46:28| :skolemid |4859| :pattern ( ($Is (|#BucketsLib.Bucket.Bucket| |a#2#0#0@@4| |a#2#1#0@@2|) Tclass.BucketsLib.Bucket)) )))
(assert (forall ((|a#3#0#0@@4| T@U) (|a#3#1#0@@2| T@U) ($h@@176 T@U) ) (!  (=> (and (and (and (= (type |a#3#0#0@@4|) (SeqType BoxType)) (= (type |a#3#1#0@@2|) (SeqType BoxType))) (= (type $h@@176) (MapType0Type refType MapType1Type))) ($IsGoodHeap $h@@176)) (= ($IsAlloc (|#BucketsLib.Bucket.Bucket| |a#3#0#0@@4| |a#3#1#0@@2|) Tclass.BucketsLib.Bucket $h@@176)  (and ($IsAlloc |a#3#0#0@@4| (TSeq Tclass.KeyType.Key) $h@@176) ($IsAlloc |a#3#1#0@@2| (TSeq Tclass.ValueMessage.Message) $h@@176)))) :qid |BucketsLibidfy.46:28| :skolemid |4860| :pattern ( ($IsAlloc (|#BucketsLib.Bucket.Bucket| |a#3#0#0@@4| |a#3#1#0@@2|) Tclass.BucketsLib.Bucket $h@@176)) )))
(assert (forall ((d@@166 T@U) ($h@@177 T@U) ) (!  (=> (and (and (= (type d@@166) DatatypeTypeType) (= (type $h@@177) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@177) (and (BucketsLib.Bucket.Bucket_q d@@166) ($IsAlloc d@@166 Tclass.BucketsLib.Bucket $h@@177)))) ($IsAlloc (BucketsLib.Bucket.keys d@@166) (TSeq Tclass.KeyType.Key) $h@@177)) :qid |unknown.0:0| :skolemid |4861| :pattern ( ($IsAlloc (BucketsLib.Bucket.keys d@@166) (TSeq Tclass.KeyType.Key) $h@@177)) )))
(assert (forall ((d@@167 T@U) ($h@@178 T@U) ) (!  (=> (and (and (= (type d@@167) DatatypeTypeType) (= (type $h@@178) (MapType0Type refType MapType1Type))) (and ($IsGoodHeap $h@@178) (and (BucketsLib.Bucket.Bucket_q d@@167) ($IsAlloc d@@167 Tclass.BucketsLib.Bucket $h@@178)))) ($IsAlloc (BucketsLib.Bucket.msgs d@@167) (TSeq Tclass.ValueMessage.Message) $h@@178)) :qid |unknown.0:0| :skolemid |4862| :pattern ( ($IsAlloc (BucketsLib.Bucket.msgs d@@167) (TSeq Tclass.ValueMessage.Message) $h@@178)) )))
(assert (forall ((|a#4#0#0@@4| T@U) (|a#4#1#0@@2| T@U) ) (!  (=> (and (= (type |a#4#0#0@@4|) (SeqType BoxType)) (= (type |a#4#1#0@@2|) (SeqType BoxType))) (= (|#BucketsLib.Bucket.Bucket| (Lit |a#4#0#0@@4|) (Lit |a#4#1#0@@2|)) (Lit (|#BucketsLib.Bucket.Bucket| |a#4#0#0@@4| |a#4#1#0@@2|)))) :qid |BucketsLibidfy.46:28| :skolemid |4863| :pattern ( (|#BucketsLib.Bucket.Bucket| (Lit |a#4#0#0@@4|) (Lit |a#4#1#0@@2|))) )))
(assert (forall ((|a#5#0#0@@5| T@U) (|a#5#1#0@@2| T@U) ) (!  (=> (and (= (type |a#5#0#0@@5|) (SeqType BoxType)) (= (type |a#5#1#0@@2|) (SeqType BoxType))) (= (BucketsLib.Bucket.keys (|#BucketsLib.Bucket.Bucket| |a#5#0#0@@5| |a#5#1#0@@2|)) |a#5#0#0@@5|)) :qid |BucketsLibidfy.46:28| :skolemid |4864| :pattern ( (|#BucketsLib.Bucket.Bucket| |a#5#0#0@@5| |a#5#1#0@@2|)) )))
(assert (forall ((|a#6#0#0@@5| T@U) (|a#6#1#0@@2| T@U) (i@@37 Int) ) (!  (=> (and (and (= (type |a#6#0#0@@5|) (SeqType BoxType)) (= (type |a#6#1#0@@2|) (SeqType BoxType))) (and (<= 0 i@@37) (< i@@37 (|Seq#Length| |a#6#0#0@@5|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#6#0#0@@5| i@@37))) (DtRank (|#BucketsLib.Bucket.Bucket| |a#6#0#0@@5| |a#6#1#0@@2|)))) :qid |BucketsLibidfy.46:28| :skolemid |4865| :pattern ( (|Seq#Index| |a#6#0#0@@5| i@@37) (|#BucketsLib.Bucket.Bucket| |a#6#0#0@@5| |a#6#1#0@@2|)) )))
(assert (forall ((|a#7#0#0@@5| T@U) (|a#7#1#0@@2| T@U) ) (!  (=> (and (= (type |a#7#0#0@@5|) (SeqType BoxType)) (= (type |a#7#1#0@@2|) (SeqType BoxType))) (< (|Seq#Rank| |a#7#0#0@@5|) (DtRank (|#BucketsLib.Bucket.Bucket| |a#7#0#0@@5| |a#7#1#0@@2|)))) :qid |BucketsLibidfy.46:28| :skolemid |4866| :pattern ( (|#BucketsLib.Bucket.Bucket| |a#7#0#0@@5| |a#7#1#0@@2|)) )))
(assert (forall ((|a#8#0#0@@4| T@U) (|a#8#1#0@@2| T@U) ) (!  (=> (and (= (type |a#8#0#0@@4|) (SeqType BoxType)) (= (type |a#8#1#0@@2|) (SeqType BoxType))) (= (BucketsLib.Bucket.msgs (|#BucketsLib.Bucket.Bucket| |a#8#0#0@@4| |a#8#1#0@@2|)) |a#8#1#0@@2|)) :qid |BucketsLibidfy.46:28| :skolemid |4867| :pattern ( (|#BucketsLib.Bucket.Bucket| |a#8#0#0@@4| |a#8#1#0@@2|)) )))
(assert (forall ((|a#9#0#0@@3| T@U) (|a#9#1#0@@1| T@U) (i@@38 Int) ) (!  (=> (and (and (= (type |a#9#0#0@@3|) (SeqType BoxType)) (= (type |a#9#1#0@@1|) (SeqType BoxType))) (and (<= 0 i@@38) (< i@@38 (|Seq#Length| |a#9#1#0@@1|)))) (< (DtRank ($Unbox DatatypeTypeType (|Seq#Index| |a#9#1#0@@1| i@@38))) (DtRank (|#BucketsLib.Bucket.Bucket| |a#9#0#0@@3| |a#9#1#0@@1|)))) :qid |BucketsLibidfy.46:28| :skolemid |4868| :pattern ( (|Seq#Index| |a#9#1#0@@1| i@@38) (|#BucketsLib.Bucket.Bucket| |a#9#0#0@@3| |a#9#1#0@@1|)) )))
(assert (forall ((|a#10#0#0@@3| T@U) (|a#10#1#0@@1| T@U) ) (!  (=> (and (= (type |a#10#0#0@@3|) (SeqType BoxType)) (= (type |a#10#1#0@@1|) (SeqType BoxType))) (< (|Seq#Rank| |a#10#1#0@@1|) (DtRank (|#BucketsLib.Bucket.Bucket| |a#10#0#0@@3| |a#10#1#0@@1|)))) :qid |BucketsLibidfy.46:28| :skolemid |4869| :pattern ( (|#BucketsLib.Bucket.Bucket| |a#10#0#0@@3| |a#10#1#0@@1|)) )))
(assert (forall ((d@@168 T@U) ) (!  (=> (and (= (type d@@168) DatatypeTypeType) (|$IsA#BucketsLib.Bucket| d@@168)) (BucketsLib.Bucket.Bucket_q d@@168)) :qid |unknown.0:0| :skolemid |4870| :pattern ( (|$IsA#BucketsLib.Bucket| d@@168)) )))
(assert (forall ((d@@169 T@U) ) (!  (=> (and (= (type d@@169) DatatypeTypeType) ($Is d@@169 Tclass.BucketsLib.Bucket)) (BucketsLib.Bucket.Bucket_q d@@169)) :qid |unknown.0:0| :skolemid |4871| :pattern ( (BucketsLib.Bucket.Bucket_q d@@169) ($Is d@@169 Tclass.BucketsLib.Bucket)) )))
(assert (forall ((a@@186 T@U) (b@@117 T@U) ) (!  (=> (and (and (= (type a@@186) DatatypeTypeType) (= (type b@@117) DatatypeTypeType)) true) (= (|BucketsLib.Bucket#Equal| a@@186 b@@117)  (and (|Seq#Equal| (BucketsLib.Bucket.keys a@@186) (BucketsLib.Bucket.keys b@@117)) (|Seq#Equal| (BucketsLib.Bucket.msgs a@@186) (BucketsLib.Bucket.msgs b@@117))))) :qid |unknown.0:0| :skolemid |4872| :pattern ( (|BucketsLib.Bucket#Equal| a@@186 b@@117)) )))
(assert (forall ((a@@187 T@U) (b@@118 T@U) ) (!  (=> (and (= (type a@@187) DatatypeTypeType) (= (type b@@118) DatatypeTypeType)) (= (|BucketsLib.Bucket#Equal| a@@187 b@@118) (= a@@187 b@@118))) :qid |unknown.0:0| :skolemid |4873| :pattern ( (|BucketsLib.Bucket#Equal| a@@187 b@@118)) )))
(assert (forall ((arg0@@742 T@U) ) (! (= (type (BucketsLib.Bucket.as__map arg0@@742)) (MapType BoxType BoxType)) :qid |funType:BucketsLib.Bucket.as__map| :pattern ( (BucketsLib.Bucket.as__map arg0@@742)) )))
(assert  (=> true (forall ((this@@11 T@U) ) (!  (=> (and (= (type this@@11) DatatypeTypeType) (or (|BucketsLib.Bucket.as__map#canCall| this@@11) (and ($Is this@@11 Tclass.BucketsLib.Bucket) (= (|Seq#Length| (BucketsLib.Bucket.keys this@@11)) (|Seq#Length| (BucketsLib.Bucket.msgs this@@11)))))) (and (=> (BucketsLib.__default.WFBucket this@@11) (BucketsLib.__default.WFBucketMap (BucketsLib.Bucket.as__map this@@11))) ($Is (BucketsLib.Bucket.as__map this@@11) (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) :qid |BucketsLibidfy.48:14| :skolemid |4874| :pattern ( (BucketsLib.Bucket.as__map this@@11)) ))))
(assert (forall ((this@@12 T@U) ) (!  (=> (and (= (type this@@12) DatatypeTypeType) ($Is this@@12 Tclass.BucketsLib.Bucket)) (= (|BucketsLib.Bucket.as__map#requires| this@@12) (= (|Seq#Length| (BucketsLib.Bucket.keys this@@12)) (|Seq#Length| (BucketsLib.Bucket.msgs this@@12))))) :qid |BucketsLibidfy.48:14| :skolemid |4875| :pattern ( (|BucketsLib.Bucket.as__map#requires| this@@12)) )))
(assert  (=> true (forall ((this@@13 T@U) ) (!  (=> (and (= (type this@@13) DatatypeTypeType) (or (|BucketsLib.Bucket.as__map#canCall| this@@13) (and ($Is this@@13 Tclass.BucketsLib.Bucket) (= (|Seq#Length| (BucketsLib.Bucket.keys this@@13)) (|Seq#Length| (BucketsLib.Bucket.msgs this@@13)))))) (and (and (and (BucketsLib.Bucket.Bucket_q this@@13) (BucketsLib.Bucket.Bucket_q this@@13)) (|MapSeqs.__default.map__of__seqs#canCall| (BucketsLib.Bucket.keys this@@13) (BucketsLib.Bucket.msgs this@@13))) (= (BucketsLib.Bucket.as__map this@@13) (MapSeqs.__default.map__of__seqs ($LS $LZ) (BucketsLib.Bucket.keys this@@13) (BucketsLib.Bucket.msgs this@@13))))) :qid |BucketsLibidfy.48:14| :skolemid |4876| :pattern ( (BucketsLib.Bucket.as__map this@@13)) ))))
(assert  (=> true (forall ((this@@14 T@U) ) (!  (=> (and (= (type this@@14) DatatypeTypeType) (or (|BucketsLib.Bucket.as__map#canCall| (Lit this@@14)) (and ($Is this@@14 Tclass.BucketsLib.Bucket) (= (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit this@@14)))) (|Seq#Length| (Lit (BucketsLib.Bucket.msgs (Lit this@@14)))))))) (and (and (and (BucketsLib.Bucket.Bucket_q (Lit this@@14)) (BucketsLib.Bucket.Bucket_q (Lit this@@14))) (|MapSeqs.__default.map__of__seqs#canCall| (Lit (BucketsLib.Bucket.keys (Lit this@@14))) (Lit (BucketsLib.Bucket.msgs (Lit this@@14))))) (= (BucketsLib.Bucket.as__map (Lit this@@14)) (MapSeqs.__default.map__of__seqs ($LS $LZ) (Lit (BucketsLib.Bucket.keys (Lit this@@14))) (Lit (BucketsLib.Bucket.msgs (Lit this@@14))))))) :qid |BucketsLibidfy.48:14| :weight 3 :skolemid |4877| :pattern ( (BucketsLib.Bucket.as__map (Lit this@@14))) ))))
(assert (= (type Tclass.BucketsLib.__default) TyType))
(assert (= (Tag Tclass.BucketsLib.__default) Tagclass.BucketsLib.__default))
(assert (= (TagFamily Tclass.BucketsLib.__default) tytagFamily$_default))
(assert (forall ((bx@@194 T@U) ) (!  (=> (and (= (type bx@@194) BoxType) ($IsBox bx@@194 Tclass.BucketsLib.__default)) (and (= ($Box ($Unbox refType bx@@194)) bx@@194) ($Is ($Unbox refType bx@@194) Tclass.BucketsLib.__default))) :qid |unknown.0:0| :skolemid |4878| :pattern ( ($IsBox bx@@194 Tclass.BucketsLib.__default)) )))
(assert (forall (($o@@72 T@U) ) (!  (=> (= (type $o@@72) refType) (= ($Is $o@@72 Tclass.BucketsLib.__default)  (or (= $o@@72 null) (= (dtype $o@@72) Tclass.BucketsLib.__default)))) :qid |unknown.0:0| :skolemid |4879| :pattern ( ($Is $o@@72 Tclass.BucketsLib.__default)) )))
(assert (forall (($o@@73 T@U) ($h@@179 T@U) ) (!  (=> (and (= (type $o@@73) refType) (= (type $h@@179) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@73 Tclass.BucketsLib.__default $h@@179)  (or (= $o@@73 null) (U_2_bool (MapType1Select (MapType0Select $h@@179 $o@@73) alloc))))) :qid |unknown.0:0| :skolemid |4880| :pattern ( ($IsAlloc $o@@73 Tclass.BucketsLib.__default $h@@179)) )))
(assert  (=> true (forall ((|bucket#0@@35| T@U) ) (!  (=> (and (= (type |bucket#0@@35|) (MapType BoxType BoxType)) (or (|BucketsLib.__default.WFBucketMap#canCall| |bucket#0@@35|) ($Is |bucket#0@@35| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) true) :qid |BucketsLibidfy.57:25| :skolemid |4881| :pattern ( (BucketsLib.__default.WFBucketMap |bucket#0@@35|)) ))))
(assert (forall ((|bucket#0@@36| T@U) ) (!  (=> (and (= (type |bucket#0@@36|) (MapType BoxType BoxType)) ($Is |bucket#0@@36| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) (= (|BucketsLib.__default.WFBucketMap#requires| |bucket#0@@36|) true)) :qid |BucketsLibidfy.57:25| :skolemid |4882| :pattern ( (|BucketsLib.__default.WFBucketMap#requires| |bucket#0@@36|)) )))
(assert  (=> true (forall ((|bucket#0@@37| T@U) ) (!  (=> (and (= (type |bucket#0@@37|) (MapType BoxType BoxType)) (or (|BucketsLib.__default.WFBucketMap#canCall| |bucket#0@@37|) ($Is |bucket#0@@37| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (forall ((|message#0| T@U) ) (!  (=> (and (and (= (type |message#0|) DatatypeTypeType) ($Is |message#0| Tclass.ValueMessage.Message)) (U_2_bool (MapType0Select (|Map#Values| |bucket#0@@37|) ($Box |message#0|)))) (and (and (|$IsA#ValueMessage.Message| |message#0|) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) |ValueMessage.__default.IdentityMessage#canCall|)) :qid |BucketsLibidfy.59:12| :skolemid |4884| :pattern ( (MapType0Select (|Map#Values| |bucket#0@@37|) ($Box |message#0|))) )) (= (BucketsLib.__default.WFBucketMap |bucket#0@@37|) (forall ((|message#0@@0| T@U) ) (!  (=> (and (and (= (type |message#0@@0|) DatatypeTypeType) ($Is |message#0@@0| Tclass.ValueMessage.Message)) (U_2_bool (MapType0Select (|Map#Values| |bucket#0@@37|) ($Box |message#0@@0|)))) (not (|ValueMessage.Message#Equal| |message#0@@0| ValueMessage.__default.IdentityMessage))) :qid |BucketsLibidfy.59:12| :skolemid |4883| :pattern ( (MapType0Select (|Map#Values| |bucket#0@@37|) ($Box |message#0@@0|))) ))))) :qid |BucketsLibidfy.57:25| :skolemid |4885| :pattern ( (BucketsLib.__default.WFBucketMap |bucket#0@@37|)) ))))
(assert  (=> true (forall ((|bucket#0@@38| T@U) ) (!  (=> (and (= (type |bucket#0@@38|) (MapType BoxType BoxType)) (or (|BucketsLib.__default.WFBucketMap#canCall| (Lit |bucket#0@@38|)) ($Is |bucket#0@@38| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (forall ((|message#1| T@U) ) (!  (=> (and (and (= (type |message#1|) DatatypeTypeType) ($Is |message#1| Tclass.ValueMessage.Message)) (U_2_bool (MapType0Select (Lit (|Map#Values| (Lit |bucket#0@@38|))) ($Box |message#1|)))) (and (and (|$IsA#ValueMessage.Message| |message#1|) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) |ValueMessage.__default.IdentityMessage#canCall|)) :qid |BucketsLibidfy.59:12| :skolemid |4887| :pattern ( (MapType0Select (|Map#Values| |bucket#0@@38|) ($Box |message#1|))) )) (= (BucketsLib.__default.WFBucketMap (Lit |bucket#0@@38|)) (forall ((|message#1@@0| T@U) ) (!  (=> (and (and (= (type |message#1@@0|) DatatypeTypeType) ($Is |message#1@@0| Tclass.ValueMessage.Message)) (U_2_bool (MapType0Select (Lit (|Map#Values| (Lit |bucket#0@@38|))) ($Box |message#1@@0|)))) (not (|ValueMessage.Message#Equal| |message#1@@0| ValueMessage.__default.IdentityMessage))) :qid |BucketsLibidfy.59:12| :skolemid |4886| :pattern ( (MapType0Select (|Map#Values| |bucket#0@@38|) ($Box |message#1@@0|))) ))))) :qid |BucketsLibidfy.57:25| :weight 3 :skolemid |4888| :pattern ( (BucketsLib.__default.WFBucketMap (Lit |bucket#0@@38|))) ))))
(assert  (=> true (forall ((|messages#0| T@U) ) (!  (=> (and (= (type |messages#0|) (SeqType BoxType)) (or (|BucketsLib.__default.WFMessageSeq#canCall| |messages#0|) ($Is |messages#0| (TSeq Tclass.ValueMessage.Message)))) true) :qid |BucketsLibidfy.64:26| :skolemid |4889| :pattern ( (BucketsLib.__default.WFMessageSeq |messages#0|)) ))))
(assert (forall ((|messages#0@@0| T@U) ) (!  (=> (and (= (type |messages#0@@0|) (SeqType BoxType)) ($Is |messages#0@@0| (TSeq Tclass.ValueMessage.Message))) (= (|BucketsLib.__default.WFMessageSeq#requires| |messages#0@@0|) true)) :qid |BucketsLibidfy.64:26| :skolemid |4890| :pattern ( (|BucketsLib.__default.WFMessageSeq#requires| |messages#0@@0|)) )))
(assert  (=> true (forall ((|messages#0@@1| T@U) ) (!  (=> (and (= (type |messages#0@@1|) (SeqType BoxType)) (or (|BucketsLib.__default.WFMessageSeq#canCall| |messages#0@@1|) ($Is |messages#0@@1| (TSeq Tclass.ValueMessage.Message)))) (and (forall ((|i#0@@155| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@155|) (< |i#0@@155| (|Seq#Length| |messages#0@@1|))) (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@1| |i#0@@155|))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) |ValueMessage.__default.IdentityMessage#canCall|)) :qid |BucketsLibidfy.66:12| :skolemid |4892| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@1| |i#0@@155|))) )) (= (BucketsLib.__default.WFMessageSeq |messages#0@@1|) (forall ((|i#0@@156| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@156|) (< |i#0@@156| (|Seq#Length| |messages#0@@1|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@1| |i#0@@156|)) ValueMessage.__default.IdentityMessage))) :qid |BucketsLibidfy.66:12| :skolemid |4891| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@1| |i#0@@156|))) ))))) :qid |BucketsLibidfy.64:26| :skolemid |4893| :pattern ( (BucketsLib.__default.WFMessageSeq |messages#0@@1|)) ))))
(assert  (=> true (forall ((|messages#0@@2| T@U) ) (!  (=> (and (= (type |messages#0@@2|) (SeqType BoxType)) (or (|BucketsLib.__default.WFMessageSeq#canCall| (Lit |messages#0@@2|)) ($Is |messages#0@@2| (TSeq Tclass.ValueMessage.Message)))) (and (forall ((|i#1@@65| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@65|) (< |i#1@@65| (|Seq#Length| (Lit |messages#0@@2|)))) (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |messages#0@@2|) |i#1@@65|))) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) |ValueMessage.__default.IdentityMessage#canCall|)) :qid |BucketsLibidfy.66:12| :skolemid |4895| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@2| |i#1@@65|))) )) (= (BucketsLib.__default.WFMessageSeq (Lit |messages#0@@2|)) (forall ((|i#1@@66| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@66|) (< |i#1@@66| (|Seq#Length| (Lit |messages#0@@2|)))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |messages#0@@2|) |i#1@@66|)) ValueMessage.__default.IdentityMessage))) :qid |BucketsLibidfy.66:12| :skolemid |4894| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |messages#0@@2| |i#1@@66|))) ))))) :qid |BucketsLibidfy.64:26| :weight 3 :skolemid |4896| :pattern ( (BucketsLib.__default.WFMessageSeq (Lit |messages#0@@2|))) ))))
(assert  (=> true (forall ((|bucket#0@@39| T@U) ) (!  (=> (and (= (type |bucket#0@@39|) DatatypeTypeType) (or (|BucketsLib.__default.PreWFBucket#canCall| |bucket#0@@39|) ($Is |bucket#0@@39| Tclass.BucketsLib.Bucket))) true) :qid |BucketsLibidfy.70:25| :skolemid |4897| :pattern ( (BucketsLib.__default.PreWFBucket |bucket#0@@39|)) ))))
(assert (forall ((|bucket#0@@40| T@U) ) (!  (=> (and (= (type |bucket#0@@40|) DatatypeTypeType) ($Is |bucket#0@@40| Tclass.BucketsLib.Bucket)) (= (|BucketsLib.__default.PreWFBucket#requires| |bucket#0@@40|) true)) :qid |BucketsLibidfy.70:25| :skolemid |4898| :pattern ( (|BucketsLib.__default.PreWFBucket#requires| |bucket#0@@40|)) )))
(assert  (=> true (forall ((|bucket#0@@41| T@U) ) (!  (=> (and (= (type |bucket#0@@41|) DatatypeTypeType) (or (|BucketsLib.__default.PreWFBucket#canCall| |bucket#0@@41|) ($Is |bucket#0@@41| Tclass.BucketsLib.Bucket))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (BucketsLib.Bucket.Bucket_q |bucket#0@@41|) (BucketsLib.Bucket.Bucket_q |bucket#0@@41|))) (= (BucketsLib.__default.PreWFBucket |bucket#0@@41|)  (and true (= (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@41|)) (|Seq#Length| (BucketsLib.Bucket.msgs |bucket#0@@41|))))))) :qid |BucketsLibidfy.70:25| :skolemid |4899| :pattern ( (BucketsLib.__default.PreWFBucket |bucket#0@@41|)) ))))
(assert  (=> true (forall ((|bucket#0@@42| T@U) ) (!  (=> (and (= (type |bucket#0@@42|) DatatypeTypeType) (or (|BucketsLib.__default.PreWFBucket#canCall| (Lit |bucket#0@@42|)) ($Is |bucket#0@@42| Tclass.BucketsLib.Bucket))) (and (=> (U_2_bool (Lit (bool_2_U true))) (and (BucketsLib.Bucket.Bucket_q (Lit |bucket#0@@42|)) (BucketsLib.Bucket.Bucket_q (Lit |bucket#0@@42|)))) (= (BucketsLib.__default.PreWFBucket (Lit |bucket#0@@42|))  (and true (= (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@42|)))) (|Seq#Length| (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@42|))))))))) :qid |BucketsLibidfy.70:25| :weight 3 :skolemid |4900| :pattern ( (BucketsLib.__default.PreWFBucket (Lit |bucket#0@@42|))) ))))
(assert  (=> true (forall ((|bucket#0@@43| T@U) ) (!  (=> (and (= (type |bucket#0@@43|) DatatypeTypeType) (or (|BucketsLib.__default.WFBucket#canCall| |bucket#0@@43|) ($Is |bucket#0@@43| Tclass.BucketsLib.Bucket))) true) :qid |BucketsLibidfy.75:22| :skolemid |4901| :pattern ( (BucketsLib.__default.WFBucket |bucket#0@@43|)) ))))
(assert (forall ((|bucket#0@@44| T@U) ) (!  (=> (and (= (type |bucket#0@@44|) DatatypeTypeType) ($Is |bucket#0@@44| Tclass.BucketsLib.Bucket)) (= (|BucketsLib.__default.WFBucket#requires| |bucket#0@@44|) true)) :qid |BucketsLibidfy.75:22| :skolemid |4902| :pattern ( (|BucketsLib.__default.WFBucket#requires| |bucket#0@@44|)) )))
(assert  (=> true (forall ((|bucket#0@@45| T@U) ) (!  (=> (and (= (type |bucket#0@@45|) DatatypeTypeType) (or (|BucketsLib.__default.WFBucket#canCall| |bucket#0@@45|) ($Is |bucket#0@@45| Tclass.BucketsLib.Bucket))) (and (and (|BucketsLib.__default.PreWFBucket#canCall| |bucket#0@@45|) (=> (BucketsLib.__default.PreWFBucket |bucket#0@@45|) (and (BucketsLib.Bucket.Bucket_q |bucket#0@@45|) (|BucketsLib.__default.WFMessageSeq#canCall| (BucketsLib.Bucket.msgs |bucket#0@@45|))))) (= (BucketsLib.__default.WFBucket |bucket#0@@45|)  (and (BucketsLib.__default.PreWFBucket |bucket#0@@45|) (BucketsLib.__default.WFMessageSeq (BucketsLib.Bucket.msgs |bucket#0@@45|)))))) :qid |BucketsLibidfy.75:22| :skolemid |4903| :pattern ( (BucketsLib.__default.WFBucket |bucket#0@@45|)) ))))
(assert  (=> true (forall ((|bucket#0@@46| T@U) ) (!  (=> (and (= (type |bucket#0@@46|) DatatypeTypeType) (or (|BucketsLib.__default.WFBucket#canCall| (Lit |bucket#0@@46|)) ($Is |bucket#0@@46| Tclass.BucketsLib.Bucket))) (and (and (|BucketsLib.__default.PreWFBucket#canCall| (Lit |bucket#0@@46|)) (=> (U_2_bool (Lit (bool_2_U (BucketsLib.__default.PreWFBucket (Lit |bucket#0@@46|))))) (and (BucketsLib.Bucket.Bucket_q (Lit |bucket#0@@46|)) (|BucketsLib.__default.WFMessageSeq#canCall| (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@46|))))))) (= (BucketsLib.__default.WFBucket (Lit |bucket#0@@46|)) (U_2_bool (Lit (bool_2_U  (and (BucketsLib.__default.PreWFBucket (Lit |bucket#0@@46|)) (BucketsLib.__default.WFMessageSeq (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@46|))))))))))) :qid |BucketsLibidfy.75:22| :weight 3 :skolemid |4904| :pattern ( (BucketsLib.__default.WFBucket (Lit |bucket#0@@46|))) ))))
(assert  (=> true (forall ((|bucket#0@@47| T@U) ) (!  (=> (and (= (type |bucket#0@@47|) DatatypeTypeType) (or (|BucketsLib.__default.BucketWellMarshalled#canCall| |bucket#0@@47|) ($Is |bucket#0@@47| Tclass.BucketsLib.Bucket))) true) :qid |BucketsLibidfy.81:34| :skolemid |4905| :pattern ( (BucketsLib.__default.BucketWellMarshalled |bucket#0@@47|)) ))))
(assert (forall ((|bucket#0@@48| T@U) ) (!  (=> (and (= (type |bucket#0@@48|) DatatypeTypeType) ($Is |bucket#0@@48| Tclass.BucketsLib.Bucket)) (= (|BucketsLib.__default.BucketWellMarshalled#requires| |bucket#0@@48|) true)) :qid |BucketsLibidfy.81:34| :skolemid |4906| :pattern ( (|BucketsLib.__default.BucketWellMarshalled#requires| |bucket#0@@48|)) )))
(assert  (=> true (forall ((|bucket#0@@49| T@U) ) (!  (=> (and (= (type |bucket#0@@49|) DatatypeTypeType) (or (|BucketsLib.__default.BucketWellMarshalled#canCall| |bucket#0@@49|) ($Is |bucket#0@@49| Tclass.BucketsLib.Bucket))) (and (and (BucketsLib.Bucket.Bucket_q |bucket#0@@49|) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketsLib.Bucket.keys |bucket#0@@49|))) (= (BucketsLib.__default.BucketWellMarshalled |bucket#0@@49|) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketsLib.Bucket.keys |bucket#0@@49|))))) :qid |BucketsLibidfy.81:34| :skolemid |4907| :pattern ( (BucketsLib.__default.BucketWellMarshalled |bucket#0@@49|)) ))))
(assert  (=> true (forall ((|bucket#0@@50| T@U) ) (!  (=> (and (= (type |bucket#0@@50|) DatatypeTypeType) (or (|BucketsLib.__default.BucketWellMarshalled#canCall| (Lit |bucket#0@@50|)) ($Is |bucket#0@@50| Tclass.BucketsLib.Bucket))) (and (and (BucketsLib.Bucket.Bucket_q (Lit |bucket#0@@50|)) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@50|))))) (= (BucketsLib.__default.BucketWellMarshalled (Lit |bucket#0@@50|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@50|))))))) :qid |BucketsLibidfy.81:34| :weight 3 :skolemid |4908| :pattern ( (BucketsLib.__default.BucketWellMarshalled (Lit |bucket#0@@50|))) ))))
(assert  (=> true (forall ((|blist#0| T@U) ) (!  (=> (and (= (type |blist#0|) (SeqType BoxType)) (or (|BucketsLib.__default.BucketListWellMarshalled#canCall| |blist#0|) ($Is |blist#0| (TSeq Tclass.BucketsLib.Bucket)))) true) :qid |BucketsLibidfy.86:38| :skolemid |4909| :pattern ( (BucketsLib.__default.BucketListWellMarshalled |blist#0|)) ))))
(assert (forall ((|blist#0@@0| T@U) ) (!  (=> (and (= (type |blist#0@@0|) (SeqType BoxType)) ($Is |blist#0@@0| (TSeq Tclass.BucketsLib.Bucket))) (= (|BucketsLib.__default.BucketListWellMarshalled#requires| |blist#0@@0|) true)) :qid |BucketsLibidfy.86:38| :skolemid |4910| :pattern ( (|BucketsLib.__default.BucketListWellMarshalled#requires| |blist#0@@0|)) )))
(assert  (=> true (forall ((|blist#0@@1| T@U) ) (!  (=> (and (= (type |blist#0@@1|) (SeqType BoxType)) (or (|BucketsLib.__default.BucketListWellMarshalled#canCall| |blist#0@@1|) ($Is |blist#0@@1| (TSeq Tclass.BucketsLib.Bucket)))) (and (forall ((|i#0@@157| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@157|) (< |i#0@@157| (|Seq#Length| |blist#0@@1|))) (|BucketsLib.__default.BucketWellMarshalled#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@1| |i#0@@157|)))) :qid |BucketsLibidfy.88:12| :skolemid |4912| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@1| |i#0@@157|))) )) (= (BucketsLib.__default.BucketListWellMarshalled |blist#0@@1|) (forall ((|i#0@@158| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@158|) (< |i#0@@158| (|Seq#Length| |blist#0@@1|))) (BucketsLib.__default.BucketWellMarshalled ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@1| |i#0@@158|)))) :qid |BucketsLibidfy.88:12| :skolemid |4911| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@1| |i#0@@158|))) ))))) :qid |BucketsLibidfy.86:38| :skolemid |4913| :pattern ( (BucketsLib.__default.BucketListWellMarshalled |blist#0@@1|)) ))))
(assert  (=> true (forall ((|blist#0@@2| T@U) ) (!  (=> (and (= (type |blist#0@@2|) (SeqType BoxType)) (or (|BucketsLib.__default.BucketListWellMarshalled#canCall| (Lit |blist#0@@2|)) ($Is |blist#0@@2| (TSeq Tclass.BucketsLib.Bucket)))) (and (forall ((|i#1@@67| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@67|) (< |i#1@@67| (|Seq#Length| (Lit |blist#0@@2|)))) (|BucketsLib.__default.BucketWellMarshalled#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@2|) |i#1@@67|)))) :qid |BucketsLibidfy.88:12| :skolemid |4915| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@2| |i#1@@67|))) )) (= (BucketsLib.__default.BucketListWellMarshalled (Lit |blist#0@@2|)) (forall ((|i#1@@68| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@68|) (< |i#1@@68| (|Seq#Length| (Lit |blist#0@@2|)))) (BucketsLib.__default.BucketWellMarshalled ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@2|) |i#1@@68|)))) :qid |BucketsLibidfy.88:12| :skolemid |4914| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@2| |i#1@@68|))) ))))) :qid |BucketsLibidfy.86:38| :weight 3 :skolemid |4916| :pattern ( (BucketsLib.__default.BucketListWellMarshalled (Lit |blist#0@@2|))) ))))
(assert  (=> true (=> true (and (and (and (BucketsLib.__default.WFBucket BucketsLib.__default.EmptyBucket) (|Map#Equal| (BucketsLib.Bucket.as__map BucketsLib.__default.EmptyBucket) (|Map#Empty| BoxType BoxType))) (BucketsLib.__default.BucketWellMarshalled BucketsLib.__default.EmptyBucket)) ($Is BucketsLib.__default.EmptyBucket Tclass.BucketsLib.Bucket)))))
(assert (= |BucketsLib.__default.EmptyBucket#requires| true))
(assert  (=> true (=> true (= BucketsLib.__default.EmptyBucket (Lit (|#BucketsLib.Bucket.Bucket| (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType))))))))
(assert  (=> true (=> true (= BucketsLib.__default.EmptyBucket (Lit (|#BucketsLib.Bucket.Bucket| (Lit (|Seq#Empty| BoxType)) (Lit (|Seq#Empty| BoxType))))))))
(assert (forall ((arg0@@743 T@U) (arg1@@388 T@U) ) (! (= (type (BucketsLib.__default.SingletonBucket arg0@@743 arg1@@388)) DatatypeTypeType) :qid |funType:BucketsLib.__default.SingletonBucket| :pattern ( (BucketsLib.__default.SingletonBucket arg0@@743 arg1@@388)) )))
(assert  (=> true (forall ((|key#0@@208| T@U) (|msg#0@@9| T@U) ) (!  (=> (and (and (= (type |key#0@@208|) (SeqType BoxType)) (= (type |msg#0@@9|) DatatypeTypeType)) (or (|BucketsLib.__default.SingletonBucket#canCall| |key#0@@208| |msg#0@@9|) (and ($Is |key#0@@208| Tclass.KeyType.Key) ($Is |msg#0@@9| Tclass.ValueMessage.Message)))) (and (and (and (BucketsLib.__default.PreWFBucket (BucketsLib.__default.SingletonBucket |key#0@@208| |msg#0@@9|)) (BucketsLib.__default.BucketWellMarshalled (BucketsLib.__default.SingletonBucket |key#0@@208| |msg#0@@9|))) (=> (not (|ValueMessage.Message#Equal| |msg#0@@9| ValueMessage.__default.IdentityMessage)) (BucketsLib.__default.WFBucket (BucketsLib.__default.SingletonBucket |key#0@@208| |msg#0@@9|)))) ($Is (BucketsLib.__default.SingletonBucket |key#0@@208| |msg#0@@9|) Tclass.BucketsLib.Bucket))) :qid |BucketsLibidfy.100:28| :skolemid |4917| :pattern ( (BucketsLib.__default.SingletonBucket |key#0@@208| |msg#0@@9|)) ))))
(assert (forall ((|key#0@@209| T@U) (|msg#0@@10| T@U) ) (!  (=> (and (and (= (type |key#0@@209|) (SeqType BoxType)) (= (type |msg#0@@10|) DatatypeTypeType)) (and ($Is |key#0@@209| Tclass.KeyType.Key) ($Is |msg#0@@10| Tclass.ValueMessage.Message))) (= (|BucketsLib.__default.SingletonBucket#requires| |key#0@@209| |msg#0@@10|) true)) :qid |BucketsLibidfy.100:28| :skolemid |4918| :pattern ( (|BucketsLib.__default.SingletonBucket#requires| |key#0@@209| |msg#0@@10|)) )))
(assert  (=> true (forall ((|key#0@@210| T@U) (|msg#0@@11| T@U) ) (!  (=> (and (and (= (type |key#0@@210|) (SeqType BoxType)) (= (type |msg#0@@11|) DatatypeTypeType)) (or (|BucketsLib.__default.SingletonBucket#canCall| |key#0@@210| |msg#0@@11|) (and ($Is |key#0@@210| Tclass.KeyType.Key) ($Is |msg#0@@11| Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.SingletonBucket |key#0@@210| |msg#0@@11|) (|#BucketsLib.Bucket.Bucket| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#0@@210|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#0@@11|))))) :qid |BucketsLibidfy.100:28| :skolemid |4919| :pattern ( (BucketsLib.__default.SingletonBucket |key#0@@210| |msg#0@@11|)) ))))
(assert  (=> true (forall ((|key#0@@211| T@U) (|msg#0@@12| T@U) ) (!  (=> (and (and (= (type |key#0@@211|) (SeqType BoxType)) (= (type |msg#0@@12|) DatatypeTypeType)) (or (|BucketsLib.__default.SingletonBucket#canCall| (Lit |key#0@@211|) (Lit |msg#0@@12|)) (and ($Is |key#0@@211| Tclass.KeyType.Key) ($Is |msg#0@@12| Tclass.ValueMessage.Message)))) (= (BucketsLib.__default.SingletonBucket (Lit |key#0@@211|) (Lit |msg#0@@12|)) (Lit (|#BucketsLib.Bucket.Bucket| (Lit (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit |key#0@@211|)))) (Lit (|Seq#Build| (|Seq#Empty| BoxType) ($Box (Lit |msg#0@@12|)))))))) :qid |BucketsLibidfy.100:28| :weight 3 :skolemid |4920| :pattern ( (BucketsLib.__default.SingletonBucket (Lit |key#0@@211|) (Lit |msg#0@@12|))) ))))
(assert (forall ((arg0@@744 T@U) ) (! (= (type (BucketsLib.__default.BucketDropLast arg0@@744)) DatatypeTypeType) :qid |funType:BucketsLib.__default.BucketDropLast| :pattern ( (BucketsLib.__default.BucketDropLast arg0@@744)) )))
(assert  (=> true (forall ((|bucket#0@@51| T@U) ) (!  (=> (and (= (type |bucket#0@@51|) DatatypeTypeType) (or (|BucketsLib.__default.BucketDropLast#canCall| |bucket#0@@51|) (and ($Is |bucket#0@@51| Tclass.BucketsLib.Bucket) (and (BucketsLib.__default.PreWFBucket |bucket#0@@51|) (< 0 (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@51|))))))) ($Is (BucketsLib.__default.BucketDropLast |bucket#0@@51|) Tclass.BucketsLib.Bucket)) :qid |BucketsLibidfy.108:27| :skolemid |4921| :pattern ( (BucketsLib.__default.BucketDropLast |bucket#0@@51|)) ))))
(assert (forall ((|bucket#0@@52| T@U) ) (!  (=> (and (= (type |bucket#0@@52|) DatatypeTypeType) ($Is |bucket#0@@52| Tclass.BucketsLib.Bucket)) (= (|BucketsLib.__default.BucketDropLast#requires| |bucket#0@@52|)  (and (BucketsLib.__default.PreWFBucket |bucket#0@@52|) (< 0 (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@52|)))))) :qid |BucketsLibidfy.108:27| :skolemid |4922| :pattern ( (|BucketsLib.__default.BucketDropLast#requires| |bucket#0@@52|)) )))
(assert  (=> true (forall ((|bucket#0@@53| T@U) ) (!  (=> (and (= (type |bucket#0@@53|) DatatypeTypeType) (or (|BucketsLib.__default.BucketDropLast#canCall| |bucket#0@@53|) (and ($Is |bucket#0@@53| Tclass.BucketsLib.Bucket) (and (BucketsLib.__default.PreWFBucket |bucket#0@@53|) (< 0 (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@53|))))))) (and (and (and (BucketsLib.Bucket.Bucket_q |bucket#0@@53|) (|Sequences.__default.DropLast#canCall| Tclass.KeyType.Key (BucketsLib.Bucket.keys |bucket#0@@53|))) (and (BucketsLib.Bucket.Bucket_q |bucket#0@@53|) (|Sequences.__default.DropLast#canCall| Tclass.ValueMessage.Message (BucketsLib.Bucket.msgs |bucket#0@@53|)))) (= (BucketsLib.__default.BucketDropLast |bucket#0@@53|) (|#BucketsLib.Bucket.Bucket| (Sequences.__default.DropLast Tclass.KeyType.Key (BucketsLib.Bucket.keys |bucket#0@@53|)) (Sequences.__default.DropLast Tclass.ValueMessage.Message (BucketsLib.Bucket.msgs |bucket#0@@53|)))))) :qid |BucketsLibidfy.108:27| :skolemid |4923| :pattern ( (BucketsLib.__default.BucketDropLast |bucket#0@@53|)) ))))
(assert  (=> true (forall ((|bucket#0@@54| T@U) ) (!  (=> (and (= (type |bucket#0@@54|) DatatypeTypeType) (or (|BucketsLib.__default.BucketDropLast#canCall| (Lit |bucket#0@@54|)) (and ($Is |bucket#0@@54| Tclass.BucketsLib.Bucket) (and (U_2_bool (Lit (bool_2_U (BucketsLib.__default.PreWFBucket (Lit |bucket#0@@54|))))) (< 0 (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@54|))))))))) (and (and (and (BucketsLib.Bucket.Bucket_q (Lit |bucket#0@@54|)) (|Sequences.__default.DropLast#canCall| Tclass.KeyType.Key (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@54|))))) (and (BucketsLib.Bucket.Bucket_q (Lit |bucket#0@@54|)) (|Sequences.__default.DropLast#canCall| Tclass.ValueMessage.Message (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@54|)))))) (= (BucketsLib.__default.BucketDropLast (Lit |bucket#0@@54|)) (Lit (|#BucketsLib.Bucket.Bucket| (Lit (Sequences.__default.DropLast Tclass.KeyType.Key (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@54|))))) (Lit (Sequences.__default.DropLast Tclass.ValueMessage.Message (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@54|)))))))))) :qid |BucketsLibidfy.108:27| :weight 3 :skolemid |4924| :pattern ( (BucketsLib.__default.BucketDropLast (Lit |bucket#0@@54|))) ))))
(assert  (=> true (forall ((|bucket#0@@55| T@U) (|pivots#0@@40| T@U) (|i#0@@159| Int) ) (!  (=> (and (and (= (type |bucket#0@@55|) DatatypeTypeType) (= (type |pivots#0@@40|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketAt#canCall| |bucket#0@@55| |pivots#0@@40| |i#0@@159|) (and (and ($Is |bucket#0@@55| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@40| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (BoundedPivotsLib.__default.WFPivots |pivots#0@@40|)))) true) :qid |BucketsLibidfy.142:24| :skolemid |4925| :pattern ( (BucketsLib.__default.WFBucketAt |bucket#0@@55| |pivots#0@@40| |i#0@@159|)) ))))
(assert (forall ((|bucket#0@@56| T@U) (|pivots#0@@41| T@U) (|i#0@@160| Int) ) (!  (=> (and (and (= (type |bucket#0@@56|) DatatypeTypeType) (= (type |pivots#0@@41|) (SeqType BoxType))) (and ($Is |bucket#0@@56| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@41| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (= (|BucketsLib.__default.WFBucketAt#requires| |bucket#0@@56| |pivots#0@@41| |i#0@@160|) (BoundedPivotsLib.__default.WFPivots |pivots#0@@41|))) :qid |BucketsLibidfy.142:24| :skolemid |4926| :pattern ( (|BucketsLib.__default.WFBucketAt#requires| |bucket#0@@56| |pivots#0@@41| |i#0@@160|)) )))
(assert  (=> true (forall ((|bucket#0@@57| T@U) (|pivots#0@@42| T@U) (|i#0@@161| Int) ) (!  (=> (and (and (= (type |bucket#0@@57|) DatatypeTypeType) (= (type |pivots#0@@42|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketAt#canCall| |bucket#0@@57| |pivots#0@@42| |i#0@@161|) (and (and ($Is |bucket#0@@57| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@42| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (BoundedPivotsLib.__default.WFPivots |pivots#0@@42|)))) (and (and (|BucketsLib.__default.WFBucket#canCall| |bucket#0@@57|) (=> (BucketsLib.__default.WFBucket |bucket#0@@57|) (and (forall ((|key#0@@212| T@U) ) (!  (=> (and (= (type |key#0@@212|) (SeqType BoxType)) ($Is |key#0@@212| Tclass.KeyType.Key)) (and (BucketsLib.Bucket.Bucket_q |bucket#0@@57|) (=> (|Seq#Contains| (BucketsLib.Bucket.keys |bucket#0@@57|) ($Box |key#0@@212|)) (|BoundedPivotsLib.__default.BoundedKey#canCall| |pivots#0@@42| |key#0@@212|)))) :qid |BucketsLibidfy.146:16| :skolemid |4929| :pattern ( (BoundedPivotsLib.__default.BoundedKey |pivots#0@@42| |key#0@@212|)) :pattern ( (|Seq#Contains| (BucketsLib.Bucket.keys |bucket#0@@57|) ($Box |key#0@@212|))) )) (=> (forall ((|key#0@@213| T@U) ) (!  (=> (= (type |key#0@@213|) (SeqType BoxType)) (=> (and ($Is |key#0@@213| Tclass.KeyType.Key) (|Seq#Contains| (BucketsLib.Bucket.keys |bucket#0@@57|) ($Box |key#0@@213|))) (BoundedPivotsLib.__default.BoundedKey |pivots#0@@42| |key#0@@213|))) :qid |BucketsLibidfy.146:16| :skolemid |4931| :pattern ( (BoundedPivotsLib.__default.BoundedKey |pivots#0@@42| |key#0@@213|)) :pattern ( (|Seq#Contains| (BucketsLib.Bucket.keys |bucket#0@@57|) ($Box |key#0@@213|))) )) (forall ((|key#1@@15| T@U) ) (!  (=> (and (= (type |key#1@@15|) (SeqType BoxType)) ($Is |key#1@@15| Tclass.KeyType.Key)) (and (BucketsLib.Bucket.Bucket_q |bucket#0@@57|) (=> (|Seq#Contains| (BucketsLib.Bucket.keys |bucket#0@@57|) ($Box |key#1@@15|)) (|BoundedPivotsLib.__default.Route#canCall| |pivots#0@@42| |key#1@@15|)))) :qid |BucketsLibidfy.147:16| :skolemid |4930| :pattern ( (BoundedPivotsLib.__default.Route |pivots#0@@42| |key#1@@15|)) :pattern ( (|Seq#Contains| (BucketsLib.Bucket.keys |bucket#0@@57|) ($Box |key#1@@15|))) )))))) (= (BucketsLib.__default.WFBucketAt |bucket#0@@57| |pivots#0@@42| |i#0@@161|)  (and (and (BucketsLib.__default.WFBucket |bucket#0@@57|) (forall ((|key#0@@214| T@U) ) (!  (=> (= (type |key#0@@214|) (SeqType BoxType)) (=> (and ($Is |key#0@@214| Tclass.KeyType.Key) (|Seq#Contains| (BucketsLib.Bucket.keys |bucket#0@@57|) ($Box |key#0@@214|))) (BoundedPivotsLib.__default.BoundedKey |pivots#0@@42| |key#0@@214|))) :qid |BucketsLibidfy.146:16| :skolemid |4927| :pattern ( (BoundedPivotsLib.__default.BoundedKey |pivots#0@@42| |key#0@@214|)) :pattern ( (|Seq#Contains| (BucketsLib.Bucket.keys |bucket#0@@57|) ($Box |key#0@@214|))) ))) (forall ((|key#1@@16| T@U) ) (!  (=> (= (type |key#1@@16|) (SeqType BoxType)) (=> (and ($Is |key#1@@16| Tclass.KeyType.Key) (|Seq#Contains| (BucketsLib.Bucket.keys |bucket#0@@57|) ($Box |key#1@@16|))) (= (BoundedPivotsLib.__default.Route |pivots#0@@42| |key#1@@16|) |i#0@@161|))) :qid |BucketsLibidfy.147:16| :skolemid |4928| :pattern ( (BoundedPivotsLib.__default.Route |pivots#0@@42| |key#1@@16|)) :pattern ( (|Seq#Contains| (BucketsLib.Bucket.keys |bucket#0@@57|) ($Box |key#1@@16|))) )))))) :qid |BucketsLibidfy.142:24| :skolemid |4932| :pattern ( (BucketsLib.__default.WFBucketAt |bucket#0@@57| |pivots#0@@42| |i#0@@161|)) ))))
(assert  (=> true (forall ((|bucket#0@@58| T@U) (|pivots#0@@43| T@U) (|i#0@@162| Int) ) (!  (=> (and (and (= (type |bucket#0@@58|) DatatypeTypeType) (= (type |pivots#0@@43|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketAt#canCall| (Lit |bucket#0@@58|) (Lit |pivots#0@@43|) (LitInt |i#0@@162|)) (and (and ($Is |bucket#0@@58| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@43| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.WFPivots (Lit |pivots#0@@43|)))))))) (and (and (|BucketsLib.__default.WFBucket#canCall| (Lit |bucket#0@@58|)) (=> (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucket (Lit |bucket#0@@58|))))) (and (forall ((|key#2@@2| T@U) ) (!  (=> (and (= (type |key#2@@2|) (SeqType BoxType)) ($Is |key#2@@2| Tclass.KeyType.Key)) (and (BucketsLib.Bucket.Bucket_q (Lit |bucket#0@@58|)) (=> (|Seq#Contains| (BucketsLib.Bucket.keys (Lit |bucket#0@@58|)) ($Box |key#2@@2|)) (|BoundedPivotsLib.__default.BoundedKey#canCall| (Lit |pivots#0@@43|) |key#2@@2|)))) :qid |BucketsLibidfy.146:16| :skolemid |4935| :pattern ( (BoundedPivotsLib.__default.BoundedKey |pivots#0@@43| |key#2@@2|)) :pattern ( (|Seq#Contains| (BucketsLib.Bucket.keys |bucket#0@@58|) ($Box |key#2@@2|))) )) (=> (forall ((|key#2@@3| T@U) ) (!  (=> (= (type |key#2@@3|) (SeqType BoxType)) (=> (and ($Is |key#2@@3| Tclass.KeyType.Key) (|Seq#Contains| (BucketsLib.Bucket.keys (Lit |bucket#0@@58|)) ($Box |key#2@@3|))) (BoundedPivotsLib.__default.BoundedKey (Lit |pivots#0@@43|) |key#2@@3|))) :qid |BucketsLibidfy.146:16| :skolemid |4937| :pattern ( (BoundedPivotsLib.__default.BoundedKey |pivots#0@@43| |key#2@@3|)) :pattern ( (|Seq#Contains| (BucketsLib.Bucket.keys |bucket#0@@58|) ($Box |key#2@@3|))) )) (forall ((|key#3@@2| T@U) ) (!  (=> (and (= (type |key#3@@2|) (SeqType BoxType)) ($Is |key#3@@2| Tclass.KeyType.Key)) (and (BucketsLib.Bucket.Bucket_q (Lit |bucket#0@@58|)) (=> (|Seq#Contains| (BucketsLib.Bucket.keys (Lit |bucket#0@@58|)) ($Box |key#3@@2|)) (|BoundedPivotsLib.__default.Route#canCall| (Lit |pivots#0@@43|) |key#3@@2|)))) :qid |BucketsLibidfy.147:16| :skolemid |4936| :pattern ( (BoundedPivotsLib.__default.Route |pivots#0@@43| |key#3@@2|)) :pattern ( (|Seq#Contains| (BucketsLib.Bucket.keys |bucket#0@@58|) ($Box |key#3@@2|))) )))))) (= (BucketsLib.__default.WFBucketAt (Lit |bucket#0@@58|) (Lit |pivots#0@@43|) (LitInt |i#0@@162|))  (and (and (BucketsLib.__default.WFBucket (Lit |bucket#0@@58|)) (forall ((|key#2@@4| T@U) ) (!  (=> (= (type |key#2@@4|) (SeqType BoxType)) (=> (and ($Is |key#2@@4| Tclass.KeyType.Key) (|Seq#Contains| (BucketsLib.Bucket.keys (Lit |bucket#0@@58|)) ($Box |key#2@@4|))) (BoundedPivotsLib.__default.BoundedKey (Lit |pivots#0@@43|) |key#2@@4|))) :qid |BucketsLibidfy.146:16| :skolemid |4933| :pattern ( (BoundedPivotsLib.__default.BoundedKey |pivots#0@@43| |key#2@@4|)) :pattern ( (|Seq#Contains| (BucketsLib.Bucket.keys |bucket#0@@58|) ($Box |key#2@@4|))) ))) (forall ((|key#3@@3| T@U) ) (!  (=> (= (type |key#3@@3|) (SeqType BoxType)) (=> (and ($Is |key#3@@3| Tclass.KeyType.Key) (|Seq#Contains| (BucketsLib.Bucket.keys (Lit |bucket#0@@58|)) ($Box |key#3@@3|))) (= (BoundedPivotsLib.__default.Route (Lit |pivots#0@@43|) |key#3@@3|) (LitInt |i#0@@162|)))) :qid |BucketsLibidfy.147:16| :skolemid |4934| :pattern ( (BoundedPivotsLib.__default.Route |pivots#0@@43| |key#3@@3|)) :pattern ( (|Seq#Contains| (BucketsLib.Bucket.keys |bucket#0@@58|) ($Box |key#3@@3|))) )))))) :qid |BucketsLibidfy.142:24| :weight 3 :skolemid |4938| :pattern ( (BucketsLib.__default.WFBucketAt (Lit |bucket#0@@58|) (Lit |pivots#0@@43|) (LitInt |i#0@@162|))) ))))
(assert  (=> true (forall ((|blist#0@@3| T@U) (|pivots#0@@44| T@U) ) (!  (=> (and (and (= (type |blist#0@@3|) (SeqType BoxType)) (= (type |pivots#0@@44|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketList#canCall| |blist#0@@3| |pivots#0@@44|) (and ($Is |blist#0@@3| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@44| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))))) true) :qid |BucketsLibidfy.162:26| :skolemid |4939| :pattern ( (BucketsLib.__default.WFBucketList |blist#0@@3| |pivots#0@@44|)) ))))
(assert (forall ((|blist#0@@4| T@U) (|pivots#0@@45| T@U) ) (!  (=> (and (and (= (type |blist#0@@4|) (SeqType BoxType)) (= (type |pivots#0@@45|) (SeqType BoxType))) (and ($Is |blist#0@@4| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@45| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (= (|BucketsLib.__default.WFBucketList#requires| |blist#0@@4| |pivots#0@@45|) true)) :qid |BucketsLibidfy.162:26| :skolemid |4940| :pattern ( (|BucketsLib.__default.WFBucketList#requires| |blist#0@@4| |pivots#0@@45|)) )))
(assert  (=> true (forall ((|blist#0@@5| T@U) (|pivots#0@@46| T@U) ) (!  (=> (and (and (= (type |blist#0@@5|) (SeqType BoxType)) (= (type |pivots#0@@46|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketList#canCall| |blist#0@@5| |pivots#0@@46|) (and ($Is |blist#0@@5| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@46| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))))) (and (and (|BoundedPivotsLib.__default.WFPivots#canCall| |pivots#0@@46|) (=> (BoundedPivotsLib.__default.WFPivots |pivots#0@@46|) (and (|BoundedPivotsLib.__default.NumBuckets#canCall| |pivots#0@@46|) (=> (= (|Seq#Length| |blist#0@@5|) (BoundedPivotsLib.__default.NumBuckets |pivots#0@@46|)) (forall ((|i#0@@163| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@163|) (< |i#0@@163| (|Seq#Length| |blist#0@@5|))) (|BucketsLib.__default.WFBucket#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@5| |i#0@@163|)))) :qid |BucketsLibidfy.166:16| :skolemid |4942| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@5| |i#0@@163|))) )))))) (= (BucketsLib.__default.WFBucketList |blist#0@@5| |pivots#0@@46|)  (and (and (BoundedPivotsLib.__default.WFPivots |pivots#0@@46|) (= (|Seq#Length| |blist#0@@5|) (BoundedPivotsLib.__default.NumBuckets |pivots#0@@46|))) (forall ((|i#0@@164| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@164|) (< |i#0@@164| (|Seq#Length| |blist#0@@5|))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@5| |i#0@@164|)))) :qid |BucketsLibidfy.166:16| :skolemid |4941| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@5| |i#0@@164|))) )))))) :qid |BucketsLibidfy.162:26| :skolemid |4943| :pattern ( (BucketsLib.__default.WFBucketList |blist#0@@5| |pivots#0@@46|)) ))))
(assert  (=> true (forall ((|blist#0@@6| T@U) (|pivots#0@@47| T@U) ) (!  (=> (and (and (= (type |blist#0@@6|) (SeqType BoxType)) (= (type |pivots#0@@47|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketList#canCall| (Lit |blist#0@@6|) (Lit |pivots#0@@47|)) (and ($Is |blist#0@@6| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@47| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))))) (and (and (|BoundedPivotsLib.__default.WFPivots#canCall| (Lit |pivots#0@@47|)) (=> (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.WFPivots (Lit |pivots#0@@47|))))) (and (|BoundedPivotsLib.__default.NumBuckets#canCall| (Lit |pivots#0@@47|)) (=> (= (|Seq#Length| (Lit |blist#0@@6|)) (LitInt (BoundedPivotsLib.__default.NumBuckets (Lit |pivots#0@@47|)))) (forall ((|i#1@@69| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@69|) (< |i#1@@69| (|Seq#Length| (Lit |blist#0@@6|)))) (|BucketsLib.__default.WFBucket#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@6|) |i#1@@69|)))) :qid |BucketsLibidfy.166:16| :skolemid |4945| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@6| |i#1@@69|))) )))))) (= (BucketsLib.__default.WFBucketList (Lit |blist#0@@6|) (Lit |pivots#0@@47|))  (and (and (BoundedPivotsLib.__default.WFPivots (Lit |pivots#0@@47|)) (= (|Seq#Length| (Lit |blist#0@@6|)) (LitInt (BoundedPivotsLib.__default.NumBuckets (Lit |pivots#0@@47|))))) (forall ((|i#1@@70| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@70|) (< |i#1@@70| (|Seq#Length| (Lit |blist#0@@6|)))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@6|) |i#1@@70|)))) :qid |BucketsLibidfy.166:16| :skolemid |4944| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@6| |i#1@@70|))) )))))) :qid |BucketsLibidfy.162:26| :weight 3 :skolemid |4946| :pattern ( (BucketsLib.__default.WFBucketList (Lit |blist#0@@6|) (Lit |pivots#0@@47|))) ))))
(assert  (=> true (forall ((|blist#0@@7| T@U) (|pivots#0@@48| T@U) ) (!  (=> (and (and (= (type |blist#0@@7|) (SeqType BoxType)) (= (type |pivots#0@@48|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketListProper#canCall| |blist#0@@7| |pivots#0@@48|) (and ($Is |blist#0@@7| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@48| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))))) true) :qid |BucketsLibidfy.169:32| :skolemid |4947| :pattern ( (BucketsLib.__default.WFBucketListProper |blist#0@@7| |pivots#0@@48|)) ))))
(assert (forall ((|blist#0@@8| T@U) (|pivots#0@@49| T@U) ) (!  (=> (and (and (= (type |blist#0@@8|) (SeqType BoxType)) (= (type |pivots#0@@49|) (SeqType BoxType))) (and ($Is |blist#0@@8| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@49| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (= (|BucketsLib.__default.WFBucketListProper#requires| |blist#0@@8| |pivots#0@@49|) true)) :qid |BucketsLibidfy.169:32| :skolemid |4948| :pattern ( (|BucketsLib.__default.WFBucketListProper#requires| |blist#0@@8| |pivots#0@@49|)) )))
(assert  (=> true (forall ((|blist#0@@9| T@U) (|pivots#0@@50| T@U) ) (!  (=> (and (and (= (type |blist#0@@9|) (SeqType BoxType)) (= (type |pivots#0@@50|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketListProper#canCall| |blist#0@@9| |pivots#0@@50|) (and ($Is |blist#0@@9| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@50| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))))) (and (and (|BucketsLib.__default.WFBucketList#canCall| |blist#0@@9| |pivots#0@@50|) (=> (BucketsLib.__default.WFBucketList |blist#0@@9| |pivots#0@@50|) (forall ((|i#0@@165| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@165|) (< |i#0@@165| (|Seq#Length| |blist#0@@9|))) (|BucketsLib.__default.WFBucketAt#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@9| |i#0@@165|)) |pivots#0@@50| |i#0@@165|)) :qid |BucketsLibidfy.172:16| :skolemid |4950| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@9| |i#0@@165|))) )))) (= (BucketsLib.__default.WFBucketListProper |blist#0@@9| |pivots#0@@50|)  (and (BucketsLib.__default.WFBucketList |blist#0@@9| |pivots#0@@50|) (forall ((|i#0@@166| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@166|) (< |i#0@@166| (|Seq#Length| |blist#0@@9|))) (BucketsLib.__default.WFBucketAt ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@9| |i#0@@166|)) |pivots#0@@50| |i#0@@166|)) :qid |BucketsLibidfy.172:16| :skolemid |4949| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@9| |i#0@@166|))) )))))) :qid |BucketsLibidfy.169:32| :skolemid |4951| :pattern ( (BucketsLib.__default.WFBucketListProper |blist#0@@9| |pivots#0@@50|)) ))))
(assert  (=> true (forall ((|blist#0@@10| T@U) (|pivots#0@@51| T@U) ) (!  (=> (and (and (= (type |blist#0@@10|) (SeqType BoxType)) (= (type |pivots#0@@51|) (SeqType BoxType))) (or (|BucketsLib.__default.WFBucketListProper#canCall| (Lit |blist#0@@10|) (Lit |pivots#0@@51|)) (and ($Is |blist#0@@10| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@51| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))))) (and (and (|BucketsLib.__default.WFBucketList#canCall| (Lit |blist#0@@10|) (Lit |pivots#0@@51|)) (=> (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketList (Lit |blist#0@@10|) (Lit |pivots#0@@51|))))) (forall ((|i#1@@71| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@71|) (< |i#1@@71| (|Seq#Length| (Lit |blist#0@@10|)))) (|BucketsLib.__default.WFBucketAt#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@10|) |i#1@@71|)) (Lit |pivots#0@@51|) |i#1@@71|)) :qid |BucketsLibidfy.172:16| :skolemid |4953| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@10| |i#1@@71|))) )))) (= (BucketsLib.__default.WFBucketListProper (Lit |blist#0@@10|) (Lit |pivots#0@@51|))  (and (BucketsLib.__default.WFBucketList (Lit |blist#0@@10|) (Lit |pivots#0@@51|)) (forall ((|i#1@@72| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@72|) (< |i#1@@72| (|Seq#Length| (Lit |blist#0@@10|)))) (BucketsLib.__default.WFBucketAt ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@10|) |i#1@@72|)) (Lit |pivots#0@@51|) |i#1@@72|)) :qid |BucketsLibidfy.172:16| :skolemid |4952| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@10| |i#1@@72|))) )))))) :qid |BucketsLibidfy.169:32| :weight 3 :skolemid |4954| :pattern ( (BucketsLib.__default.WFBucketListProper (Lit |blist#0@@10|) (Lit |pivots#0@@51|))) ))))
(assert  (=> true (forall ((|bucket#0@@59| T@U) (|pivots#0@@52| T@U) ) (!  (=> (and (and (= (type |bucket#0@@59|) DatatypeTypeType) (= (type |pivots#0@@52|) (SeqType BoxType))) (or (|BucketsLib.__default.BoundedBucket#canCall| |bucket#0@@59| |pivots#0@@52|) (and ($Is |bucket#0@@59| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@52| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))))) true) :qid |BucketsLibidfy.175:27| :skolemid |4955| :pattern ( (BucketsLib.__default.BoundedBucket |bucket#0@@59| |pivots#0@@52|)) ))))
(assert (forall ((|bucket#0@@60| T@U) (|pivots#0@@53| T@U) ) (!  (=> (and (and (= (type |bucket#0@@60|) DatatypeTypeType) (= (type |pivots#0@@53|) (SeqType BoxType))) (and ($Is |bucket#0@@60| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@53| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (= (|BucketsLib.__default.BoundedBucket#requires| |bucket#0@@60| |pivots#0@@53|) true)) :qid |BucketsLibidfy.175:27| :skolemid |4956| :pattern ( (|BucketsLib.__default.BoundedBucket#requires| |bucket#0@@60| |pivots#0@@53|)) )))
(assert  (=> true (forall ((|bucket#0@@61| T@U) (|pivots#0@@54| T@U) ) (!  (=> (and (and (= (type |bucket#0@@61|) DatatypeTypeType) (= (type |pivots#0@@54|) (SeqType BoxType))) (or (|BucketsLib.__default.BoundedBucket#canCall| |bucket#0@@61| |pivots#0@@54|) (and ($Is |bucket#0@@61| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@54| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))))) (and (and (|BoundedPivotsLib.__default.WFPivots#canCall| |pivots#0@@54|) (=> (BoundedPivotsLib.__default.WFPivots |pivots#0@@54|) (forall ((|key#0@@215| T@U) ) (!  (=> (and (= (type |key#0@@215|) (SeqType BoxType)) ($Is |key#0@@215| Tclass.KeyType.Key)) (and (BucketsLib.Bucket.Bucket_q |bucket#0@@61|) (=> (|Seq#Contains| (BucketsLib.Bucket.keys |bucket#0@@61|) ($Box |key#0@@215|)) (|BoundedPivotsLib.__default.BoundedKey#canCall| |pivots#0@@54| |key#0@@215|)))) :qid |BucketsLibidfy.178:16| :skolemid |4958| :pattern ( (BoundedPivotsLib.__default.BoundedKey |pivots#0@@54| |key#0@@215|)) :pattern ( (|Seq#Contains| (BucketsLib.Bucket.keys |bucket#0@@61|) ($Box |key#0@@215|))) )))) (= (BucketsLib.__default.BoundedBucket |bucket#0@@61| |pivots#0@@54|)  (and (BoundedPivotsLib.__default.WFPivots |pivots#0@@54|) (forall ((|key#0@@216| T@U) ) (!  (=> (= (type |key#0@@216|) (SeqType BoxType)) (=> (and ($Is |key#0@@216| Tclass.KeyType.Key) (|Seq#Contains| (BucketsLib.Bucket.keys |bucket#0@@61|) ($Box |key#0@@216|))) (BoundedPivotsLib.__default.BoundedKey |pivots#0@@54| |key#0@@216|))) :qid |BucketsLibidfy.178:16| :skolemid |4957| :pattern ( (BoundedPivotsLib.__default.BoundedKey |pivots#0@@54| |key#0@@216|)) :pattern ( (|Seq#Contains| (BucketsLib.Bucket.keys |bucket#0@@61|) ($Box |key#0@@216|))) )))))) :qid |BucketsLibidfy.175:27| :skolemid |4959| :pattern ( (BucketsLib.__default.BoundedBucket |bucket#0@@61| |pivots#0@@54|)) ))))
(assert  (=> true (forall ((|bucket#0@@62| T@U) (|pivots#0@@55| T@U) ) (!  (=> (and (and (= (type |bucket#0@@62|) DatatypeTypeType) (= (type |pivots#0@@55|) (SeqType BoxType))) (or (|BucketsLib.__default.BoundedBucket#canCall| (Lit |bucket#0@@62|) (Lit |pivots#0@@55|)) (and ($Is |bucket#0@@62| Tclass.BucketsLib.Bucket) ($Is |pivots#0@@55| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))))) (and (and (|BoundedPivotsLib.__default.WFPivots#canCall| (Lit |pivots#0@@55|)) (=> (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.WFPivots (Lit |pivots#0@@55|))))) (forall ((|key#1@@17| T@U) ) (!  (=> (and (= (type |key#1@@17|) (SeqType BoxType)) ($Is |key#1@@17| Tclass.KeyType.Key)) (and (BucketsLib.Bucket.Bucket_q (Lit |bucket#0@@62|)) (=> (|Seq#Contains| (BucketsLib.Bucket.keys (Lit |bucket#0@@62|)) ($Box |key#1@@17|)) (|BoundedPivotsLib.__default.BoundedKey#canCall| (Lit |pivots#0@@55|) |key#1@@17|)))) :qid |BucketsLibidfy.178:16| :skolemid |4961| :pattern ( (BoundedPivotsLib.__default.BoundedKey |pivots#0@@55| |key#1@@17|)) :pattern ( (|Seq#Contains| (BucketsLib.Bucket.keys |bucket#0@@62|) ($Box |key#1@@17|))) )))) (= (BucketsLib.__default.BoundedBucket (Lit |bucket#0@@62|) (Lit |pivots#0@@55|))  (and (BoundedPivotsLib.__default.WFPivots (Lit |pivots#0@@55|)) (forall ((|key#1@@18| T@U) ) (!  (=> (= (type |key#1@@18|) (SeqType BoxType)) (=> (and ($Is |key#1@@18| Tclass.KeyType.Key) (|Seq#Contains| (BucketsLib.Bucket.keys (Lit |bucket#0@@62|)) ($Box |key#1@@18|))) (BoundedPivotsLib.__default.BoundedKey (Lit |pivots#0@@55|) |key#1@@18|))) :qid |BucketsLibidfy.178:16| :skolemid |4960| :pattern ( (BoundedPivotsLib.__default.BoundedKey |pivots#0@@55| |key#1@@18|)) :pattern ( (|Seq#Contains| (BucketsLib.Bucket.keys |bucket#0@@62|) ($Box |key#1@@18|))) )))))) :qid |BucketsLibidfy.175:27| :weight 3 :skolemid |4962| :pattern ( (BucketsLib.__default.BoundedBucket (Lit |bucket#0@@62|) (Lit |pivots#0@@55|))) ))))
(assert  (=> true (forall ((|blist#0@@11| T@U) (|pivots#0@@56| T@U) ) (!  (=> (and (and (= (type |blist#0@@11|) (SeqType BoxType)) (= (type |pivots#0@@56|) (SeqType BoxType))) (or (|BucketsLib.__default.BoundedBucketList#canCall| |blist#0@@11| |pivots#0@@56|) (and ($Is |blist#0@@11| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@56| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))))) true) :qid |BucketsLibidfy.181:31| :skolemid |4963| :pattern ( (BucketsLib.__default.BoundedBucketList |blist#0@@11| |pivots#0@@56|)) ))))
(assert (forall ((|blist#0@@12| T@U) (|pivots#0@@57| T@U) ) (!  (=> (and (and (= (type |blist#0@@12|) (SeqType BoxType)) (= (type |pivots#0@@57|) (SeqType BoxType))) (and ($Is |blist#0@@12| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@57| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element)))) (= (|BucketsLib.__default.BoundedBucketList#requires| |blist#0@@12| |pivots#0@@57|) true)) :qid |BucketsLibidfy.181:31| :skolemid |4964| :pattern ( (|BucketsLib.__default.BoundedBucketList#requires| |blist#0@@12| |pivots#0@@57|)) )))
(assert  (=> true (forall ((|blist#0@@13| T@U) (|pivots#0@@58| T@U) ) (!  (=> (and (and (= (type |blist#0@@13|) (SeqType BoxType)) (= (type |pivots#0@@58|) (SeqType BoxType))) (or (|BucketsLib.__default.BoundedBucketList#canCall| |blist#0@@13| |pivots#0@@58|) (and ($Is |blist#0@@13| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@58| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))))) (and (and (|BoundedPivotsLib.__default.WFPivots#canCall| |pivots#0@@58|) (=> (BoundedPivotsLib.__default.WFPivots |pivots#0@@58|) (forall ((|i#0@@167| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@167|) (< |i#0@@167| (|Seq#Length| |blist#0@@13|))) (and (|BucketsLib.__default.PreWFBucket#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@13| |i#0@@167|))) (=> (BucketsLib.__default.PreWFBucket ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@13| |i#0@@167|))) (|BucketsLib.__default.BoundedBucket#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@13| |i#0@@167|)) |pivots#0@@58|)))) :qid |BucketsLibidfy.184:16| :skolemid |4966| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@13| |i#0@@167|))) )))) (= (BucketsLib.__default.BoundedBucketList |blist#0@@13| |pivots#0@@58|)  (and (BoundedPivotsLib.__default.WFPivots |pivots#0@@58|) (forall ((|i#0@@168| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@168|) (< |i#0@@168| (|Seq#Length| |blist#0@@13|))) (and (BucketsLib.__default.PreWFBucket ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@13| |i#0@@168|))) (BucketsLib.__default.BoundedBucket ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@13| |i#0@@168|)) |pivots#0@@58|))) :qid |BucketsLibidfy.184:16| :skolemid |4965| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@13| |i#0@@168|))) )))))) :qid |BucketsLibidfy.181:31| :skolemid |4967| :pattern ( (BucketsLib.__default.BoundedBucketList |blist#0@@13| |pivots#0@@58|)) ))))
(assert  (=> true (forall ((|blist#0@@14| T@U) (|pivots#0@@59| T@U) ) (!  (=> (and (and (= (type |blist#0@@14|) (SeqType BoxType)) (= (type |pivots#0@@59|) (SeqType BoxType))) (or (|BucketsLib.__default.BoundedBucketList#canCall| (Lit |blist#0@@14|) (Lit |pivots#0@@59|)) (and ($Is |blist#0@@14| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@59| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))))) (and (and (|BoundedPivotsLib.__default.WFPivots#canCall| (Lit |pivots#0@@59|)) (=> (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.WFPivots (Lit |pivots#0@@59|))))) (forall ((|i#1@@73| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@73|) (< |i#1@@73| (|Seq#Length| (Lit |blist#0@@14|)))) (and (|BucketsLib.__default.PreWFBucket#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@14|) |i#1@@73|))) (=> (BucketsLib.__default.PreWFBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@14|) |i#1@@73|))) (|BucketsLib.__default.BoundedBucket#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@14|) |i#1@@73|)) (Lit |pivots#0@@59|))))) :qid |BucketsLibidfy.184:16| :skolemid |4969| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@14| |i#1@@73|))) )))) (= (BucketsLib.__default.BoundedBucketList (Lit |blist#0@@14|) (Lit |pivots#0@@59|))  (and (BoundedPivotsLib.__default.WFPivots (Lit |pivots#0@@59|)) (forall ((|i#1@@74| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@74|) (< |i#1@@74| (|Seq#Length| (Lit |blist#0@@14|)))) (and (BucketsLib.__default.PreWFBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@14|) |i#1@@74|))) (BucketsLib.__default.BoundedBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@14|) |i#1@@74|)) (Lit |pivots#0@@59|)))) :qid |BucketsLibidfy.184:16| :skolemid |4968| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@14| |i#1@@74|))) )))))) :qid |BucketsLibidfy.181:31| :weight 3 :skolemid |4970| :pattern ( (BucketsLib.__default.BoundedBucketList (Lit |blist#0@@14|) (Lit |pivots#0@@59|))) ))))
(assert (forall ((arg0@@745 T@U) (arg1@@389 T@U) ) (! (= (type (BucketsLib.__default.B arg0@@745 arg1@@389)) DatatypeTypeType) :qid |funType:BucketsLib.__default.B| :pattern ( (BucketsLib.__default.B arg0@@745 arg1@@389)) )))
(assert (forall (($ly@@774 T@U) (|m#0@@172| T@U) ) (!  (=> (and (= (type $ly@@774) LayerTypeType) (= (type |m#0@@172|) (MapType BoxType BoxType))) (= (BucketsLib.__default.B ($LS $ly@@774) |m#0@@172|) (BucketsLib.__default.B $ly@@774 |m#0@@172|))) :qid |BucketsLibidfy.189:22| :skolemid |4971| :pattern ( (BucketsLib.__default.B ($LS $ly@@774) |m#0@@172|)) )))
(assert (forall (($ly@@775 T@U) (|m#0@@173| T@U) ) (!  (=> (and (= (type $ly@@775) LayerTypeType) (= (type |m#0@@173|) (MapType BoxType BoxType))) (= (BucketsLib.__default.B $ly@@775 |m#0@@173|) (BucketsLib.__default.B $LZ |m#0@@173|))) :qid |BucketsLibidfy.189:22| :skolemid |4972| :pattern ( (BucketsLib.__default.B (AsFuelBottom $ly@@775) |m#0@@173|)) )))
(assert  (=> true (forall (($ly@@776 T@U) (|m#0@@174| T@U) ) (!  (=> (and (and (= (type $ly@@776) LayerTypeType) (= (type |m#0@@174|) (MapType BoxType BoxType))) (or (|BucketsLib.__default.B#canCall| |m#0@@174|) ($Is |m#0@@174| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (and (and (and (BucketsLib.__default.PreWFBucket (BucketsLib.__default.B $ly@@776 |m#0@@174|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketsLib.Bucket.keys (BucketsLib.__default.B $ly@@776 |m#0@@174|)))) (|Map#Equal| (BucketsLib.Bucket.as__map (BucketsLib.__default.B $ly@@776 |m#0@@174|)) |m#0@@174|)) (=> (BucketsLib.__default.WFBucketMap |m#0@@174|) (BucketsLib.__default.WFBucket (BucketsLib.__default.B $ly@@776 |m#0@@174|)))) ($Is (BucketsLib.__default.B $ly@@776 |m#0@@174|) Tclass.BucketsLib.Bucket))) :qid |BucketsLibidfy.189:22| :skolemid |4973| :pattern ( (BucketsLib.__default.B $ly@@776 |m#0@@174|)) ))))
(assert (forall (($ly@@777 T@U) (|m#0@@175| T@U) ) (!  (=> (and (and (= (type $ly@@777) LayerTypeType) (= (type |m#0@@175|) (MapType BoxType BoxType))) ($Is |m#0@@175| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) (= (|BucketsLib.__default.B#requires| $ly@@777 |m#0@@175|) true)) :qid |BucketsLibidfy.189:22| :skolemid |4974| :pattern ( (|BucketsLib.__default.B#requires| $ly@@777 |m#0@@175|)) )))
(assert  (=> true (forall (($ly@@778 T@U) (|m#0@@176| T@U) ) (!  (=> (and (and (= (type $ly@@778) LayerTypeType) (= (type |m#0@@176|) (MapType BoxType BoxType))) (or (|BucketsLib.__default.B#canCall| |m#0@@176|) ($Is |m#0@@176| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (and (|MapSeqs.__default.seqs__of__map#canCall| |m#0@@176|) (let ((|sp#0| (MapSeqs.__default.seqs__of__map ($LS $LZ) |m#0@@176|))) (and (MapSeqs.SeqPair.SeqPair_q |sp#0|) (MapSeqs.SeqPair.SeqPair_q |sp#0|)))) (= (BucketsLib.__default.B ($LS $ly@@778) |m#0@@176|) (let ((|sp#0@@0| (MapSeqs.__default.seqs__of__map ($LS $LZ) |m#0@@176|))) (let ((|b#0@@164| (|#BucketsLib.Bucket.Bucket| (MapSeqs.SeqPair.keys |sp#0@@0|) (MapSeqs.SeqPair.msgs |sp#0@@0|)))) |b#0@@164|))))) :qid |BucketsLibidfy.189:22| :skolemid |4975| :pattern ( (BucketsLib.__default.B ($LS $ly@@778) |m#0@@176|)) ))))
(assert  (=> true (forall (($ly@@779 T@U) (|m#0@@177| T@U) ) (!  (=> (and (and (= (type $ly@@779) LayerTypeType) (= (type |m#0@@177|) (MapType BoxType BoxType))) (or (|BucketsLib.__default.B#canCall| (Lit |m#0@@177|)) ($Is |m#0@@177| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (and (|MapSeqs.__default.seqs__of__map#canCall| (Lit |m#0@@177|)) (let ((|sp#1| (MapSeqs.__default.seqs__of__map ($LS $LZ) (Lit |m#0@@177|)))) (and (MapSeqs.SeqPair.SeqPair_q |sp#1|) (MapSeqs.SeqPair.SeqPair_q |sp#1|)))) (= (BucketsLib.__default.B ($LS $ly@@779) (Lit |m#0@@177|)) (let ((|sp#1@@0| (MapSeqs.__default.seqs__of__map ($LS $LZ) (Lit |m#0@@177|)))) (let ((|b#1@@12| (|#BucketsLib.Bucket.Bucket| (MapSeqs.SeqPair.keys |sp#1@@0|) (MapSeqs.SeqPair.msgs |sp#1@@0|)))) |b#1@@12|))))) :qid |BucketsLibidfy.189:22| :weight 3 :skolemid |4976| :pattern ( (BucketsLib.__default.B ($LS $ly@@779) (Lit |m#0@@177|))) ))))
(assert (forall ((arg0@@746 T@U) (arg1@@390 T@U) (arg2@@239 T@U) ) (! (= (type (BucketsLib.__default.BucketInsert arg0@@746 arg1@@390 arg2@@239)) DatatypeTypeType) :qid |funType:BucketsLib.__default.BucketInsert| :pattern ( (BucketsLib.__default.BucketInsert arg0@@746 arg1@@390 arg2@@239)) )))
(assert  (=> true (forall ((|bucket#0@@63| T@U) (|key#0@@217| T@U) (|msg#0@@13| T@U) ) (!  (=> (and (and (and (= (type |bucket#0@@63|) DatatypeTypeType) (= (type |key#0@@217|) (SeqType BoxType))) (= (type |msg#0@@13|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketInsert#canCall| |bucket#0@@63| |key#0@@217| |msg#0@@13|) (and (and (and ($Is |bucket#0@@63| Tclass.BucketsLib.Bucket) ($Is |key#0@@217| Tclass.KeyType.Key)) ($Is |msg#0@@13| Tclass.ValueMessage.Message)) (BucketsLib.__default.PreWFBucket |bucket#0@@63|)))) ($Is (BucketsLib.__default.BucketInsert |bucket#0@@63| |key#0@@217| |msg#0@@13|) Tclass.BucketsLib.Bucket)) :qid |BucketsLibidfy.224:25| :skolemid |4977| :pattern ( (BucketsLib.__default.BucketInsert |bucket#0@@63| |key#0@@217| |msg#0@@13|)) ))))
(assert (forall ((|bucket#0@@64| T@U) (|key#0@@218| T@U) (|msg#0@@14| T@U) ) (!  (=> (and (and (and (= (type |bucket#0@@64|) DatatypeTypeType) (= (type |key#0@@218|) (SeqType BoxType))) (= (type |msg#0@@14|) DatatypeTypeType)) (and (and ($Is |bucket#0@@64| Tclass.BucketsLib.Bucket) ($Is |key#0@@218| Tclass.KeyType.Key)) ($Is |msg#0@@14| Tclass.ValueMessage.Message))) (= (|BucketsLib.__default.BucketInsert#requires| |bucket#0@@64| |key#0@@218| |msg#0@@14|) (BucketsLib.__default.PreWFBucket |bucket#0@@64|))) :qid |BucketsLibidfy.224:25| :skolemid |4978| :pattern ( (|BucketsLib.__default.BucketInsert#requires| |bucket#0@@64| |key#0@@218| |msg#0@@14|)) )))
(assert (= (type StartFuel_BucketsLib._default.B) LayerTypeType))
(assert  (=> true (forall ((|bucket#0@@65| T@U) (|key#0@@219| T@U) (|msg#0@@15| T@U) ) (!  (=> (and (and (and (= (type |bucket#0@@65|) DatatypeTypeType) (= (type |key#0@@219|) (SeqType BoxType))) (= (type |msg#0@@15|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketInsert#canCall| |bucket#0@@65| |key#0@@219| |msg#0@@15|) (and (and (and ($Is |bucket#0@@65| Tclass.BucketsLib.Bucket) ($Is |key#0@@219| Tclass.KeyType.Key)) ($Is |msg#0@@15| Tclass.ValueMessage.Message)) (BucketsLib.__default.PreWFBucket |bucket#0@@65|)))) (and (and (|BucketsLib.Bucket.as__map#canCall| |bucket#0@@65|) (let ((|m#0@@178| (BucketsLib.Bucket.as__map |bucket#0@@65|))) (and (and (|BucketMaps.__default.BucketGet#canCall| |m#0@@178| |key#0@@219|) (|ValueMessage.__default.Merge#canCall| |msg#0@@15| (BucketMaps.__default.BucketGet |m#0@@178| |key#0@@219|))) (let ((|mergedMsg#0| (ValueMessage.__default.Merge |msg#0@@15| (BucketMaps.__default.BucketGet |m#0@@178| |key#0@@219|)))) (and (and (and (and (|$IsA#ValueMessage.Message| |mergedMsg#0|) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) |ValueMessage.__default.IdentityMessage#canCall|) (=> (|ValueMessage.Message#Equal| |mergedMsg#0| ValueMessage.__default.IdentityMessage) (and (|Maps.__default.MapRemove1#canCall| Tclass.KeyType.Key Tclass.ValueMessage.Message |m#0@@178| ($Box |key#0@@219|)) (|BucketsLib.__default.B#canCall| (Maps.__default.MapRemove1 Tclass.KeyType.Key Tclass.ValueMessage.Message |m#0@@178| ($Box |key#0@@219|)))))) (=> (not (|ValueMessage.Message#Equal| |mergedMsg#0| ValueMessage.__default.IdentityMessage)) (|BucketsLib.__default.B#canCall| (|Map#Build| |m#0@@178| ($Box |key#0@@219|) ($Box |mergedMsg#0|))))))))) (= (BucketsLib.__default.BucketInsert |bucket#0@@65| |key#0@@219| |msg#0@@15|) (let ((|m#0@@179| (BucketsLib.Bucket.as__map |bucket#0@@65|))) (let ((|mergedMsg#0@@0| (ValueMessage.__default.Merge |msg#0@@15| (BucketMaps.__default.BucketGet |m#0@@179| |key#0@@219|)))) (ite (|ValueMessage.Message#Equal| |mergedMsg#0@@0| ValueMessage.__default.IdentityMessage) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Maps.__default.MapRemove1 Tclass.KeyType.Key Tclass.ValueMessage.Message |m#0@@179| ($Box |key#0@@219|))) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Build| |m#0@@179| ($Box |key#0@@219|) ($Box |mergedMsg#0@@0|))))))))) :qid |BucketsLibidfy.224:25| :skolemid |4979| :pattern ( (BucketsLib.__default.BucketInsert |bucket#0@@65| |key#0@@219| |msg#0@@15|)) ))))
(assert  (=> true (forall ((|bucket#0@@66| T@U) (|key#0@@220| T@U) (|msg#0@@16| T@U) ) (!  (=> (and (and (and (= (type |bucket#0@@66|) DatatypeTypeType) (= (type |key#0@@220|) (SeqType BoxType))) (= (type |msg#0@@16|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketInsert#canCall| (Lit |bucket#0@@66|) (Lit |key#0@@220|) (Lit |msg#0@@16|)) (and (and (and ($Is |bucket#0@@66| Tclass.BucketsLib.Bucket) ($Is |key#0@@220| Tclass.KeyType.Key)) ($Is |msg#0@@16| Tclass.ValueMessage.Message)) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.PreWFBucket (Lit |bucket#0@@66|)))))))) (and (and (|BucketsLib.Bucket.as__map#canCall| (Lit |bucket#0@@66|)) (let ((|m#1| (Lit (BucketsLib.Bucket.as__map (Lit |bucket#0@@66|))))) (and (and (|BucketMaps.__default.BucketGet#canCall| |m#1| (Lit |key#0@@220|)) (|ValueMessage.__default.Merge#canCall| (Lit |msg#0@@16|) (BucketMaps.__default.BucketGet |m#1| (Lit |key#0@@220|)))) (let ((|mergedMsg#1| (ValueMessage.__default.Merge (Lit |msg#0@@16|) (BucketMaps.__default.BucketGet |m#1| (Lit |key#0@@220|))))) (and (and (and (and (|$IsA#ValueMessage.Message| |mergedMsg#1|) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) |ValueMessage.__default.IdentityMessage#canCall|) (=> (|ValueMessage.Message#Equal| |mergedMsg#1| ValueMessage.__default.IdentityMessage) (and (|Maps.__default.MapRemove1#canCall| Tclass.KeyType.Key Tclass.ValueMessage.Message |m#1| ($Box (Lit |key#0@@220|))) (|BucketsLib.__default.B#canCall| (Maps.__default.MapRemove1 Tclass.KeyType.Key Tclass.ValueMessage.Message |m#1| ($Box (Lit |key#0@@220|))))))) (=> (not (|ValueMessage.Message#Equal| |mergedMsg#1| ValueMessage.__default.IdentityMessage)) (|BucketsLib.__default.B#canCall| (|Map#Build| |m#1| ($Box (Lit |key#0@@220|)) ($Box |mergedMsg#1|))))))))) (= (BucketsLib.__default.BucketInsert (Lit |bucket#0@@66|) (Lit |key#0@@220|) (Lit |msg#0@@16|)) (let ((|m#1@@0| (Lit (BucketsLib.Bucket.as__map (Lit |bucket#0@@66|))))) (let ((|mergedMsg#1@@0| (Lit (ValueMessage.__default.Merge (Lit |msg#0@@16|) (Lit (BucketMaps.__default.BucketGet |m#1@@0| (Lit |key#0@@220|))))))) (ite (|ValueMessage.Message#Equal| |mergedMsg#1@@0| ValueMessage.__default.IdentityMessage) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (Lit (Maps.__default.MapRemove1 Tclass.KeyType.Key Tclass.ValueMessage.Message |m#1@@0| ($Box (Lit |key#0@@220|))))) (BucketsLib.__default.B StartFuel_BucketsLib._default.B (|Map#Build| |m#1@@0| ($Box (Lit |key#0@@220|)) ($Box |mergedMsg#1@@0|))))))))) :qid |BucketsLibidfy.224:25| :weight 3 :skolemid |4980| :pattern ( (BucketsLib.__default.BucketInsert (Lit |bucket#0@@66|) (Lit |key#0@@220|) (Lit |msg#0@@16|))) ))))
(assert (forall ((arg0@@747 T@U) (arg1@@391 T@U) (arg2@@240 T@U) (arg3@@164 T@U) ) (! (= (type (BucketsLib.__default.BucketListInsert arg0@@747 arg1@@391 arg2@@240 arg3@@164)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.BucketListInsert| :pattern ( (BucketsLib.__default.BucketListInsert arg0@@747 arg1@@391 arg2@@240 arg3@@164)) )))
(assert  (=> true (forall ((|blist#0@@15| T@U) (|pivots#0@@60| T@U) (|key#0@@221| T@U) (|msg#0@@17| T@U) ) (!  (=> (and (and (and (and (= (type |blist#0@@15|) (SeqType BoxType)) (= (type |pivots#0@@60|) (SeqType BoxType))) (= (type |key#0@@221|) (SeqType BoxType))) (= (type |msg#0@@17|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketListInsert#canCall| |blist#0@@15| |pivots#0@@60| |key#0@@221| |msg#0@@17|) (and (and (and (and ($Is |blist#0@@15| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@60| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |key#0@@221| Tclass.KeyType.Key)) ($Is |msg#0@@17| Tclass.ValueMessage.Message)) (and (BucketsLib.__default.WFBucketList |blist#0@@15| |pivots#0@@60|) (BoundedPivotsLib.__default.BoundedKey |pivots#0@@60| |key#0@@221|))))) ($Is (BucketsLib.__default.BucketListInsert |blist#0@@15| |pivots#0@@60| |key#0@@221| |msg#0@@17|) (TSeq Tclass.BucketsLib.Bucket))) :qid |BucketsLibidfy.235:29| :skolemid |4981| :pattern ( (BucketsLib.__default.BucketListInsert |blist#0@@15| |pivots#0@@60| |key#0@@221| |msg#0@@17|)) ))))
(assert (forall ((|blist#0@@16| T@U) (|pivots#0@@61| T@U) (|key#0@@222| T@U) (|msg#0@@18| T@U) ) (!  (=> (and (and (and (and (= (type |blist#0@@16|) (SeqType BoxType)) (= (type |pivots#0@@61|) (SeqType BoxType))) (= (type |key#0@@222|) (SeqType BoxType))) (= (type |msg#0@@18|) DatatypeTypeType)) (and (and (and ($Is |blist#0@@16| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@61| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |key#0@@222| Tclass.KeyType.Key)) ($Is |msg#0@@18| Tclass.ValueMessage.Message))) (= (|BucketsLib.__default.BucketListInsert#requires| |blist#0@@16| |pivots#0@@61| |key#0@@222| |msg#0@@18|)  (and (BucketsLib.__default.WFBucketList |blist#0@@16| |pivots#0@@61|) (BoundedPivotsLib.__default.BoundedKey |pivots#0@@61| |key#0@@222|)))) :qid |BucketsLibidfy.235:29| :skolemid |4982| :pattern ( (|BucketsLib.__default.BucketListInsert#requires| |blist#0@@16| |pivots#0@@61| |key#0@@222| |msg#0@@18|)) )))
(assert  (=> true (forall ((|blist#0@@17| T@U) (|pivots#0@@62| T@U) (|key#0@@223| T@U) (|msg#0@@19| T@U) ) (!  (=> (and (and (and (and (= (type |blist#0@@17|) (SeqType BoxType)) (= (type |pivots#0@@62|) (SeqType BoxType))) (= (type |key#0@@223|) (SeqType BoxType))) (= (type |msg#0@@19|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketListInsert#canCall| |blist#0@@17| |pivots#0@@62| |key#0@@223| |msg#0@@19|) (and (and (and (and ($Is |blist#0@@17| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@62| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |key#0@@223| Tclass.KeyType.Key)) ($Is |msg#0@@19| Tclass.ValueMessage.Message)) (and (BucketsLib.__default.WFBucketList |blist#0@@17| |pivots#0@@62|) (BoundedPivotsLib.__default.BoundedKey |pivots#0@@62| |key#0@@223|))))) (and (and (|BoundedPivotsLib.__default.Route#canCall| |pivots#0@@62| |key#0@@223|) (let ((|i#0@@169| (BoundedPivotsLib.__default.Route |pivots#0@@62| |key#0@@223|))) (|BucketsLib.__default.BucketInsert#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@17| |i#0@@169|)) |key#0@@223| |msg#0@@19|))) (= (BucketsLib.__default.BucketListInsert |blist#0@@17| |pivots#0@@62| |key#0@@223| |msg#0@@19|) (let ((|i#0@@170| (BoundedPivotsLib.__default.Route |pivots#0@@62| |key#0@@223|))) (|Seq#Update| |blist#0@@17| |i#0@@170| ($Box (BucketsLib.__default.BucketInsert ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@17| |i#0@@170|)) |key#0@@223| |msg#0@@19|))))))) :qid |BucketsLibidfy.235:29| :skolemid |4983| :pattern ( (BucketsLib.__default.BucketListInsert |blist#0@@17| |pivots#0@@62| |key#0@@223| |msg#0@@19|)) ))))
(assert  (=> true (forall ((|blist#0@@18| T@U) (|pivots#0@@63| T@U) (|key#0@@224| T@U) (|msg#0@@20| T@U) ) (!  (=> (and (and (and (and (= (type |blist#0@@18|) (SeqType BoxType)) (= (type |pivots#0@@63|) (SeqType BoxType))) (= (type |key#0@@224|) (SeqType BoxType))) (= (type |msg#0@@20|) DatatypeTypeType)) (or (|BucketsLib.__default.BucketListInsert#canCall| (Lit |blist#0@@18|) (Lit |pivots#0@@63|) (Lit |key#0@@224|) (Lit |msg#0@@20|)) (and (and (and (and ($Is |blist#0@@18| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@63| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |key#0@@224| Tclass.KeyType.Key)) ($Is |msg#0@@20| Tclass.ValueMessage.Message)) (and (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketList (Lit |blist#0@@18|) (Lit |pivots#0@@63|))))) (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.BoundedKey (Lit |pivots#0@@63|) (Lit |key#0@@224|))))))))) (and (and (|BoundedPivotsLib.__default.Route#canCall| (Lit |pivots#0@@63|) (Lit |key#0@@224|)) (let ((|i#1@@75| (LitInt (BoundedPivotsLib.__default.Route (Lit |pivots#0@@63|) (Lit |key#0@@224|))))) (|BucketsLib.__default.BucketInsert#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@18|) |i#1@@75|)) (Lit |key#0@@224|) (Lit |msg#0@@20|)))) (= (BucketsLib.__default.BucketListInsert (Lit |blist#0@@18|) (Lit |pivots#0@@63|) (Lit |key#0@@224|) (Lit |msg#0@@20|)) (let ((|i#1@@76| (LitInt (BoundedPivotsLib.__default.Route (Lit |pivots#0@@63|) (Lit |key#0@@224|))))) (|Seq#Update| (Lit |blist#0@@18|) |i#1@@76| ($Box (BucketsLib.__default.BucketInsert ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@18|) |i#1@@76|)) (Lit |key#0@@224|) (Lit |msg#0@@20|)))))))) :qid |BucketsLibidfy.235:29| :weight 3 :skolemid |4984| :pattern ( (BucketsLib.__default.BucketListInsert (Lit |blist#0@@18|) (Lit |pivots#0@@63|) (Lit |key#0@@224|) (Lit |msg#0@@20|))) ))))
(assert (forall ((arg0@@748 T@U) (arg1@@392 T@U) (arg2@@241 T@U) ) (! (= (type (BucketsLib.__default.BucketListGet arg0@@748 arg1@@392 arg2@@241)) DatatypeTypeType) :qid |funType:BucketsLib.__default.BucketListGet| :pattern ( (BucketsLib.__default.BucketListGet arg0@@748 arg1@@392 arg2@@241)) )))
(assert  (=> true (forall ((|blist#0@@19| T@U) (|pivots#0@@64| T@U) (|key#0@@225| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@19|) (SeqType BoxType)) (= (type |pivots#0@@64|) (SeqType BoxType))) (= (type |key#0@@225|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListGet#canCall| |blist#0@@19| |pivots#0@@64| |key#0@@225|) (and (and (and ($Is |blist#0@@19| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@64| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |key#0@@225| Tclass.KeyType.Key)) (and (BucketsLib.__default.WFBucketList |blist#0@@19| |pivots#0@@64|) (BoundedPivotsLib.__default.BoundedKey |pivots#0@@64| |key#0@@225|))))) ($Is (BucketsLib.__default.BucketListGet |blist#0@@19| |pivots#0@@64| |key#0@@225|) Tclass.ValueMessage.Message)) :qid |BucketsLibidfy.244:26| :skolemid |4985| :pattern ( (BucketsLib.__default.BucketListGet |blist#0@@19| |pivots#0@@64| |key#0@@225|)) ))))
(assert (forall ((|blist#0@@20| T@U) (|pivots#0@@65| T@U) (|key#0@@226| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@20|) (SeqType BoxType)) (= (type |pivots#0@@65|) (SeqType BoxType))) (= (type |key#0@@226|) (SeqType BoxType))) (and (and ($Is |blist#0@@20| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@65| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |key#0@@226| Tclass.KeyType.Key))) (= (|BucketsLib.__default.BucketListGet#requires| |blist#0@@20| |pivots#0@@65| |key#0@@226|)  (and (BucketsLib.__default.WFBucketList |blist#0@@20| |pivots#0@@65|) (BoundedPivotsLib.__default.BoundedKey |pivots#0@@65| |key#0@@226|)))) :qid |BucketsLibidfy.244:26| :skolemid |4986| :pattern ( (|BucketsLib.__default.BucketListGet#requires| |blist#0@@20| |pivots#0@@65| |key#0@@226|)) )))
(assert  (=> true (forall ((|blist#0@@21| T@U) (|pivots#0@@66| T@U) (|key#0@@227| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@21|) (SeqType BoxType)) (= (type |pivots#0@@66|) (SeqType BoxType))) (= (type |key#0@@227|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListGet#canCall| |blist#0@@21| |pivots#0@@66| |key#0@@227|) (and (and (and ($Is |blist#0@@21| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@66| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |key#0@@227| Tclass.KeyType.Key)) (and (BucketsLib.__default.WFBucketList |blist#0@@21| |pivots#0@@66|) (BoundedPivotsLib.__default.BoundedKey |pivots#0@@66| |key#0@@227|))))) (and (and (and (|BoundedPivotsLib.__default.Route#canCall| |pivots#0@@66| |key#0@@227|) (|BucketsLib.Bucket.as__map#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@21| (BoundedPivotsLib.__default.Route |pivots#0@@66| |key#0@@227|))))) (|BucketMaps.__default.BucketGet#canCall| (BucketsLib.Bucket.as__map ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@21| (BoundedPivotsLib.__default.Route |pivots#0@@66| |key#0@@227|)))) |key#0@@227|)) (= (BucketsLib.__default.BucketListGet |blist#0@@21| |pivots#0@@66| |key#0@@227|) (BucketMaps.__default.BucketGet (BucketsLib.Bucket.as__map ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@21| (BoundedPivotsLib.__default.Route |pivots#0@@66| |key#0@@227|)))) |key#0@@227|)))) :qid |BucketsLibidfy.244:26| :skolemid |4987| :pattern ( (BucketsLib.__default.BucketListGet |blist#0@@21| |pivots#0@@66| |key#0@@227|)) ))))
(assert  (=> true (forall ((|blist#0@@22| T@U) (|pivots#0@@67| T@U) (|key#0@@228| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@22|) (SeqType BoxType)) (= (type |pivots#0@@67|) (SeqType BoxType))) (= (type |key#0@@228|) (SeqType BoxType))) (or (|BucketsLib.__default.BucketListGet#canCall| (Lit |blist#0@@22|) (Lit |pivots#0@@67|) (Lit |key#0@@228|)) (and (and (and ($Is |blist#0@@22| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@67| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |key#0@@228| Tclass.KeyType.Key)) (and (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketList (Lit |blist#0@@22|) (Lit |pivots#0@@67|))))) (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.BoundedKey (Lit |pivots#0@@67|) (Lit |key#0@@228|))))))))) (and (and (and (|BoundedPivotsLib.__default.Route#canCall| (Lit |pivots#0@@67|) (Lit |key#0@@228|)) (|BucketsLib.Bucket.as__map#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@22|) (LitInt (BoundedPivotsLib.__default.Route (Lit |pivots#0@@67|) (Lit |key#0@@228|))))))) (|BucketMaps.__default.BucketGet#canCall| (BucketsLib.Bucket.as__map ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@22|) (LitInt (BoundedPivotsLib.__default.Route (Lit |pivots#0@@67|) (Lit |key#0@@228|)))))) (Lit |key#0@@228|))) (= (BucketsLib.__default.BucketListGet (Lit |blist#0@@22|) (Lit |pivots#0@@67|) (Lit |key#0@@228|)) (BucketMaps.__default.BucketGet (BucketsLib.Bucket.as__map ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@22|) (LitInt (BoundedPivotsLib.__default.Route (Lit |pivots#0@@67|) (Lit |key#0@@228|)))))) (Lit |key#0@@228|))))) :qid |BucketsLibidfy.244:26| :weight 3 :skolemid |4988| :pattern ( (BucketsLib.__default.BucketListGet (Lit |blist#0@@22|) (Lit |pivots#0@@67|) (Lit |key#0@@228|))) ))))
(assert (forall ((arg0@@749 T@U) (arg1@@393 T@U) (arg2@@242 T@U) ) (! (= (type (BucketsLib.__default.SplitBucketLeft arg0@@749 arg1@@393 arg2@@242)) DatatypeTypeType) :qid |funType:BucketsLib.__default.SplitBucketLeft| :pattern ( (BucketsLib.__default.SplitBucketLeft arg0@@749 arg1@@393 arg2@@242)) )))
(assert (forall (($ly@@780 T@U) (|bucket#0@@67| T@U) (|pivot#0@@31| T@U) ) (!  (=> (and (and (= (type $ly@@780) LayerTypeType) (= (type |bucket#0@@67|) DatatypeTypeType)) (= (type |pivot#0@@31|) (SeqType BoxType))) (= (BucketsLib.__default.SplitBucketLeft ($LS $ly@@780) |bucket#0@@67| |pivot#0@@31|) (BucketsLib.__default.SplitBucketLeft $ly@@780 |bucket#0@@67| |pivot#0@@31|))) :qid |BucketsLibidfy.279:22| :skolemid |4989| :pattern ( (BucketsLib.__default.SplitBucketLeft ($LS $ly@@780) |bucket#0@@67| |pivot#0@@31|)) )))
(assert (forall (($ly@@781 T@U) (|bucket#0@@68| T@U) (|pivot#0@@32| T@U) ) (!  (=> (and (and (= (type $ly@@781) LayerTypeType) (= (type |bucket#0@@68|) DatatypeTypeType)) (= (type |pivot#0@@32|) (SeqType BoxType))) (= (BucketsLib.__default.SplitBucketLeft $ly@@781 |bucket#0@@68| |pivot#0@@32|) (BucketsLib.__default.SplitBucketLeft $LZ |bucket#0@@68| |pivot#0@@32|))) :qid |BucketsLibidfy.279:22| :skolemid |4990| :pattern ( (BucketsLib.__default.SplitBucketLeft (AsFuelBottom $ly@@781) |bucket#0@@68| |pivot#0@@32|)) )))
(assert  (=> true (forall (($ly@@782 T@U) (|bucket#0@@69| T@U) (|pivot#0@@33| T@U) ) (!  (=> (and (and (and (= (type $ly@@782) LayerTypeType) (= (type |bucket#0@@69|) DatatypeTypeType)) (= (type |pivot#0@@33|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketLeft#canCall| |bucket#0@@69| |pivot#0@@33|) (and (and ($Is |bucket#0@@69| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@33| Tclass.KeyType.Key)) (BucketsLib.__default.PreWFBucket |bucket#0@@69|)))) (and (BucketsLib.__default.PreWFBucket (BucketsLib.__default.SplitBucketLeft $ly@@782 |bucket#0@@69| |pivot#0@@33|)) ($Is (BucketsLib.__default.SplitBucketLeft $ly@@782 |bucket#0@@69| |pivot#0@@33|) Tclass.BucketsLib.Bucket))) :qid |BucketsLibidfy.279:22| :skolemid |4991| :pattern ( (BucketsLib.__default.SplitBucketLeft $ly@@782 |bucket#0@@69| |pivot#0@@33|)) ))))
(assert (forall (($ly@@783 T@U) (|bucket#0@@70| T@U) (|pivot#0@@34| T@U) ) (!  (=> (and (and (and (= (type $ly@@783) LayerTypeType) (= (type |bucket#0@@70|) DatatypeTypeType)) (= (type |pivot#0@@34|) (SeqType BoxType))) (and ($Is |bucket#0@@70| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@34| Tclass.KeyType.Key))) (= (|BucketsLib.__default.SplitBucketLeft#requires| $ly@@783 |bucket#0@@70| |pivot#0@@34|) (BucketsLib.__default.PreWFBucket |bucket#0@@70|))) :qid |BucketsLibidfy.279:22| :skolemid |4992| :pattern ( (|BucketsLib.__default.SplitBucketLeft#requires| $ly@@783 |bucket#0@@70| |pivot#0@@34|)) )))
(assert (= (type StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType))
(assert  (=> true (forall (($ly@@784 T@U) (|bucket#0@@71| T@U) (|pivot#0@@35| T@U) ) (!  (=> (and (and (and (= (type $ly@@784) LayerTypeType) (= (type |bucket#0@@71|) DatatypeTypeType)) (= (type |pivot#0@@35|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketLeft#canCall| |bucket#0@@71| |pivot#0@@35|) (and (and ($Is |bucket#0@@71| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@35| Tclass.KeyType.Key)) (BucketsLib.__default.PreWFBucket |bucket#0@@71|)))) (and (and (and (BucketsLib.Bucket.Bucket_q |bucket#0@@71|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (BucketsLib.Bucket.keys |bucket#0@@71|) |pivot#0@@35|)) (and (BucketsLib.Bucket.Bucket_q |bucket#0@@71|) (BucketsLib.Bucket.Bucket_q |bucket#0@@71|))) (= (BucketsLib.__default.SplitBucketLeft ($LS $ly@@784) |bucket#0@@71| |pivot#0@@35|) (let ((|i#0@@171| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte (BucketsLib.Bucket.keys |bucket#0@@71|) |pivot#0@@35|))) (|#BucketsLib.Bucket.Bucket| (|Seq#Take| (BucketsLib.Bucket.keys |bucket#0@@71|) |i#0@@171|) (|Seq#Take| (BucketsLib.Bucket.msgs |bucket#0@@71|) |i#0@@171|)))))) :qid |BucketsLibidfy.279:22| :skolemid |4993| :pattern ( (BucketsLib.__default.SplitBucketLeft ($LS $ly@@784) |bucket#0@@71| |pivot#0@@35|)) ))))
(assert  (=> true (forall (($ly@@785 T@U) (|bucket#0@@72| T@U) (|pivot#0@@36| T@U) ) (!  (=> (and (and (and (= (type $ly@@785) LayerTypeType) (= (type |bucket#0@@72|) DatatypeTypeType)) (= (type |pivot#0@@36|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketLeft#canCall| (Lit |bucket#0@@72|) (Lit |pivot#0@@36|)) (and (and ($Is |bucket#0@@72| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@36| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.PreWFBucket (Lit |bucket#0@@72|)))))))) (and (and (and (BucketsLib.Bucket.Bucket_q (Lit |bucket#0@@72|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@72|))) (Lit |pivot#0@@36|))) (and (BucketsLib.Bucket.Bucket_q (Lit |bucket#0@@72|)) (BucketsLib.Bucket.Bucket_q (Lit |bucket#0@@72|)))) (= (BucketsLib.__default.SplitBucketLeft ($LS $ly@@785) (Lit |bucket#0@@72|) (Lit |pivot#0@@36|)) (let ((|i#1@@77| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@72|))) (Lit |pivot#0@@36|)))) (|#BucketsLib.Bucket.Bucket| (|Seq#Take| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@72|))) |i#1@@77|) (|Seq#Take| (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@72|))) |i#1@@77|)))))) :qid |BucketsLibidfy.279:22| :weight 3 :skolemid |4994| :pattern ( (BucketsLib.__default.SplitBucketLeft ($LS $ly@@785) (Lit |bucket#0@@72|) (Lit |pivot#0@@36|))) ))))
(assert (forall ((arg0@@750 T@U) (arg1@@394 T@U) (arg2@@243 T@U) ) (! (= (type (BucketsLib.__default.SplitBucketRight arg0@@750 arg1@@394 arg2@@243)) DatatypeTypeType) :qid |funType:BucketsLib.__default.SplitBucketRight| :pattern ( (BucketsLib.__default.SplitBucketRight arg0@@750 arg1@@394 arg2@@243)) )))
(assert (forall (($ly@@786 T@U) (|bucket#0@@73| T@U) (|pivot#0@@37| T@U) ) (!  (=> (and (and (= (type $ly@@786) LayerTypeType) (= (type |bucket#0@@73|) DatatypeTypeType)) (= (type |pivot#0@@37|) (SeqType BoxType))) (= (BucketsLib.__default.SplitBucketRight ($LS $ly@@786) |bucket#0@@73| |pivot#0@@37|) (BucketsLib.__default.SplitBucketRight $ly@@786 |bucket#0@@73| |pivot#0@@37|))) :qid |BucketsLibidfy.287:22| :skolemid |4995| :pattern ( (BucketsLib.__default.SplitBucketRight ($LS $ly@@786) |bucket#0@@73| |pivot#0@@37|)) )))
(assert (forall (($ly@@787 T@U) (|bucket#0@@74| T@U) (|pivot#0@@38| T@U) ) (!  (=> (and (and (= (type $ly@@787) LayerTypeType) (= (type |bucket#0@@74|) DatatypeTypeType)) (= (type |pivot#0@@38|) (SeqType BoxType))) (= (BucketsLib.__default.SplitBucketRight $ly@@787 |bucket#0@@74| |pivot#0@@38|) (BucketsLib.__default.SplitBucketRight $LZ |bucket#0@@74| |pivot#0@@38|))) :qid |BucketsLibidfy.287:22| :skolemid |4996| :pattern ( (BucketsLib.__default.SplitBucketRight (AsFuelBottom $ly@@787) |bucket#0@@74| |pivot#0@@38|)) )))
(assert  (=> true (forall (($ly@@788 T@U) (|bucket#0@@75| T@U) (|pivot#0@@39| T@U) ) (!  (=> (and (and (and (= (type $ly@@788) LayerTypeType) (= (type |bucket#0@@75|) DatatypeTypeType)) (= (type |pivot#0@@39|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketRight#canCall| |bucket#0@@75| |pivot#0@@39|) (and (and ($Is |bucket#0@@75| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@39| Tclass.KeyType.Key)) (BucketsLib.__default.PreWFBucket |bucket#0@@75|)))) (and (BucketsLib.__default.PreWFBucket (BucketsLib.__default.SplitBucketRight $ly@@788 |bucket#0@@75| |pivot#0@@39|)) ($Is (BucketsLib.__default.SplitBucketRight $ly@@788 |bucket#0@@75| |pivot#0@@39|) Tclass.BucketsLib.Bucket))) :qid |BucketsLibidfy.287:22| :skolemid |4997| :pattern ( (BucketsLib.__default.SplitBucketRight $ly@@788 |bucket#0@@75| |pivot#0@@39|)) ))))
(assert (forall (($ly@@789 T@U) (|bucket#0@@76| T@U) (|pivot#0@@40| T@U) ) (!  (=> (and (and (and (= (type $ly@@789) LayerTypeType) (= (type |bucket#0@@76|) DatatypeTypeType)) (= (type |pivot#0@@40|) (SeqType BoxType))) (and ($Is |bucket#0@@76| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@40| Tclass.KeyType.Key))) (= (|BucketsLib.__default.SplitBucketRight#requires| $ly@@789 |bucket#0@@76| |pivot#0@@40|) (BucketsLib.__default.PreWFBucket |bucket#0@@76|))) :qid |BucketsLibidfy.287:22| :skolemid |4998| :pattern ( (|BucketsLib.__default.SplitBucketRight#requires| $ly@@789 |bucket#0@@76| |pivot#0@@40|)) )))
(assert  (=> true (forall (($ly@@790 T@U) (|bucket#0@@77| T@U) (|pivot#0@@41| T@U) ) (!  (=> (and (and (and (= (type $ly@@790) LayerTypeType) (= (type |bucket#0@@77|) DatatypeTypeType)) (= (type |pivot#0@@41|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketRight#canCall| |bucket#0@@77| |pivot#0@@41|) (and (and ($Is |bucket#0@@77| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@41| Tclass.KeyType.Key)) (BucketsLib.__default.PreWFBucket |bucket#0@@77|)))) (and (and (and (BucketsLib.Bucket.Bucket_q |bucket#0@@77|) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (BucketsLib.Bucket.keys |bucket#0@@77|) |pivot#0@@41|)) (and (BucketsLib.Bucket.Bucket_q |bucket#0@@77|) (BucketsLib.Bucket.Bucket_q |bucket#0@@77|))) (= (BucketsLib.__default.SplitBucketRight ($LS $ly@@790) |bucket#0@@77| |pivot#0@@41|) (let ((|i#0@@172| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte (BucketsLib.Bucket.keys |bucket#0@@77|) |pivot#0@@41|))) (|#BucketsLib.Bucket.Bucket| (|Seq#Drop| (BucketsLib.Bucket.keys |bucket#0@@77|) |i#0@@172|) (|Seq#Drop| (BucketsLib.Bucket.msgs |bucket#0@@77|) |i#0@@172|)))))) :qid |BucketsLibidfy.287:22| :skolemid |4999| :pattern ( (BucketsLib.__default.SplitBucketRight ($LS $ly@@790) |bucket#0@@77| |pivot#0@@41|)) ))))
(assert  (=> true (forall (($ly@@791 T@U) (|bucket#0@@78| T@U) (|pivot#0@@42| T@U) ) (!  (=> (and (and (and (= (type $ly@@791) LayerTypeType) (= (type |bucket#0@@78|) DatatypeTypeType)) (= (type |pivot#0@@42|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketRight#canCall| (Lit |bucket#0@@78|) (Lit |pivot#0@@42|)) (and (and ($Is |bucket#0@@78| Tclass.BucketsLib.Bucket) ($Is |pivot#0@@42| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.PreWFBucket (Lit |bucket#0@@78|)))))))) (and (and (and (BucketsLib.Bucket.Bucket_q (Lit |bucket#0@@78|)) (|Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte#canCall| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@78|))) (Lit |pivot#0@@42|))) (and (BucketsLib.Bucket.Bucket_q (Lit |bucket#0@@78|)) (BucketsLib.Bucket.Bucket_q (Lit |bucket#0@@78|)))) (= (BucketsLib.__default.SplitBucketRight ($LS $ly@@791) (Lit |bucket#0@@78|) (Lit |pivot#0@@42|)) (let ((|i#1@@78| (Lexicographic__Byte__Order.__default.binarySearchIndexOfFirstKeyGte StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@78|))) (Lit |pivot#0@@42|)))) (|#BucketsLib.Bucket.Bucket| (|Seq#Drop| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@78|))) |i#1@@78|) (|Seq#Drop| (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@78|))) |i#1@@78|)))))) :qid |BucketsLibidfy.287:22| :weight 3 :skolemid |5000| :pattern ( (BucketsLib.__default.SplitBucketRight ($LS $ly@@791) (Lit |bucket#0@@78|) (Lit |pivot#0@@42|))) ))))
(assert (forall ((arg0@@751 T@U) (arg1@@395 T@U) (arg2@@244 Int) (arg3@@165 T@U) ) (! (= (type (BucketsLib.__default.SplitBucketListLeft arg0@@751 arg1@@395 arg2@@244 arg3@@165)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.SplitBucketListLeft| :pattern ( (BucketsLib.__default.SplitBucketListLeft arg0@@751 arg1@@395 arg2@@244 arg3@@165)) )))
(assert  (=> true (forall ((|blist#0@@23| T@U) (|pivots#0@@68| T@U) (|cLeft#0| Int) (|key#0@@229| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@23|) (SeqType BoxType)) (= (type |pivots#0@@68|) (SeqType BoxType))) (= (type |key#0@@229|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketListLeft#canCall| |blist#0@@23| |pivots#0@@68| |cLeft#0| |key#0@@229|) (and (and (and ($Is |blist#0@@23| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@68| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |key#0@@229| Tclass.KeyType.Key)) (and (and (BucketsLib.__default.WFBucketList |blist#0@@23| |pivots#0@@68|) (BoundedPivotsLib.__default.ValidLeftCutOffKey |pivots#0@@68| |key#0@@229|)) (= (BoundedPivotsLib.__default.CutoffForLeft StartFuel_BoundedPivotsLib._default.CutoffForLeft |pivots#0@@68| |key#0@@229|) |cLeft#0|))))) ($Is (BucketsLib.__default.SplitBucketListLeft |blist#0@@23| |pivots#0@@68| |cLeft#0| |key#0@@229|) (TSeq Tclass.BucketsLib.Bucket))) :qid |BucketsLibidfy.295:32| :skolemid |5001| :pattern ( (BucketsLib.__default.SplitBucketListLeft |blist#0@@23| |pivots#0@@68| |cLeft#0| |key#0@@229|)) ))))
(assert (forall ((|blist#0@@24| T@U) (|pivots#0@@69| T@U) (|cLeft#0@@0| Int) (|key#0@@230| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@24|) (SeqType BoxType)) (= (type |pivots#0@@69|) (SeqType BoxType))) (= (type |key#0@@230|) (SeqType BoxType))) (and (and ($Is |blist#0@@24| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@69| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |key#0@@230| Tclass.KeyType.Key))) (= (|BucketsLib.__default.SplitBucketListLeft#requires| |blist#0@@24| |pivots#0@@69| |cLeft#0@@0| |key#0@@230|)  (and (and (BucketsLib.__default.WFBucketList |blist#0@@24| |pivots#0@@69|) (BoundedPivotsLib.__default.ValidLeftCutOffKey |pivots#0@@69| |key#0@@230|)) (= (BoundedPivotsLib.__default.CutoffForLeft StartFuel_BoundedPivotsLib._default.CutoffForLeft |pivots#0@@69| |key#0@@230|) |cLeft#0@@0|)))) :qid |BucketsLibidfy.295:32| :skolemid |5002| :pattern ( (|BucketsLib.__default.SplitBucketListLeft#requires| |blist#0@@24| |pivots#0@@69| |cLeft#0@@0| |key#0@@230|)) )))
(assert (= (type StartFuel_BucketsLib._default.SplitBucketLeft) LayerTypeType))
(assert  (=> true (forall ((|blist#0@@25| T@U) (|pivots#0@@70| T@U) (|cLeft#0@@1| Int) (|key#0@@231| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@25|) (SeqType BoxType)) (= (type |pivots#0@@70|) (SeqType BoxType))) (= (type |key#0@@231|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketListLeft#canCall| |blist#0@@25| |pivots#0@@70| |cLeft#0@@1| |key#0@@231|) (and (and (and ($Is |blist#0@@25| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@70| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |key#0@@231| Tclass.KeyType.Key)) (and (and (BucketsLib.__default.WFBucketList |blist#0@@25| |pivots#0@@70|) (BoundedPivotsLib.__default.ValidLeftCutOffKey |pivots#0@@70| |key#0@@231|)) (= (BoundedPivotsLib.__default.CutoffForLeft StartFuel_BoundedPivotsLib._default.CutoffForLeft |pivots#0@@70| |key#0@@231|) |cLeft#0@@1|))))) (and (|BucketsLib.__default.SplitBucketLeft#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@25| |cLeft#0@@1|)) |key#0@@231|) (= (BucketsLib.__default.SplitBucketListLeft |blist#0@@25| |pivots#0@@70| |cLeft#0@@1| |key#0@@231|) (|Seq#Append| (|Seq#Take| |blist#0@@25| |cLeft#0@@1|) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.SplitBucketLeft StartFuel_BucketsLib._default.SplitBucketLeft ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@25| |cLeft#0@@1|)) |key#0@@231|))))))) :qid |BucketsLibidfy.295:32| :skolemid |5003| :pattern ( (BucketsLib.__default.SplitBucketListLeft |blist#0@@25| |pivots#0@@70| |cLeft#0@@1| |key#0@@231|)) ))))
(assert  (=> true (forall ((|blist#0@@26| T@U) (|pivots#0@@71| T@U) (|cLeft#0@@2| Int) (|key#0@@232| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@26|) (SeqType BoxType)) (= (type |pivots#0@@71|) (SeqType BoxType))) (= (type |key#0@@232|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketListLeft#canCall| (Lit |blist#0@@26|) (Lit |pivots#0@@71|) (LitInt |cLeft#0@@2|) (Lit |key#0@@232|)) (and (and (and ($Is |blist#0@@26| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@71| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |key#0@@232| Tclass.KeyType.Key)) (and (and (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketList (Lit |blist#0@@26|) (Lit |pivots#0@@71|))))) (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.ValidLeftCutOffKey (Lit |pivots#0@@71|) (Lit |key#0@@232|)))))) (= (BoundedPivotsLib.__default.CutoffForLeft StartFuel_BoundedPivotsLib._default.CutoffForLeft (Lit |pivots#0@@71|) (Lit |key#0@@232|)) (LitInt |cLeft#0@@2|)))))) (and (|BucketsLib.__default.SplitBucketLeft#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@26|) (LitInt |cLeft#0@@2|))) (Lit |key#0@@232|)) (= (BucketsLib.__default.SplitBucketListLeft (Lit |blist#0@@26|) (Lit |pivots#0@@71|) (LitInt |cLeft#0@@2|) (Lit |key#0@@232|)) (|Seq#Append| (|Seq#Take| (Lit |blist#0@@26|) (LitInt |cLeft#0@@2|)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.SplitBucketLeft StartFuel_BucketsLib._default.SplitBucketLeft ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@26|) (LitInt |cLeft#0@@2|))) (Lit |key#0@@232|)))))))) :qid |BucketsLibidfy.295:32| :weight 3 :skolemid |5004| :pattern ( (BucketsLib.__default.SplitBucketListLeft (Lit |blist#0@@26|) (Lit |pivots#0@@71|) (LitInt |cLeft#0@@2|) (Lit |key#0@@232|))) ))))
(assert (forall ((arg0@@752 T@U) (arg1@@396 T@U) (arg2@@245 Int) (arg3@@166 T@U) ) (! (= (type (BucketsLib.__default.SplitBucketListRight arg0@@752 arg1@@396 arg2@@245 arg3@@166)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.SplitBucketListRight| :pattern ( (BucketsLib.__default.SplitBucketListRight arg0@@752 arg1@@396 arg2@@245 arg3@@166)) )))
(assert  (=> true (forall ((|blist#0@@27| T@U) (|pivots#0@@72| T@U) (|cRight#0| Int) (|key#0@@233| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@27|) (SeqType BoxType)) (= (type |pivots#0@@72|) (SeqType BoxType))) (= (type |key#0@@233|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketListRight#canCall| |blist#0@@27| |pivots#0@@72| |cRight#0| |key#0@@233|) (and (and (and ($Is |blist#0@@27| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@72| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |key#0@@233| Tclass.KeyType.Key)) (and (and (BucketsLib.__default.WFBucketList |blist#0@@27| |pivots#0@@72|) (BoundedPivotsLib.__default.BoundedKey |pivots#0@@72| |key#0@@233|)) (= (BoundedPivotsLib.__default.CutoffForRight StartFuel_BoundedPivotsLib._default.CutoffForRight |pivots#0@@72| |key#0@@233|) |cRight#0|))))) ($Is (BucketsLib.__default.SplitBucketListRight |blist#0@@27| |pivots#0@@72| |cRight#0| |key#0@@233|) (TSeq Tclass.BucketsLib.Bucket))) :qid |BucketsLibidfy.303:33| :skolemid |5005| :pattern ( (BucketsLib.__default.SplitBucketListRight |blist#0@@27| |pivots#0@@72| |cRight#0| |key#0@@233|)) ))))
(assert (forall ((|blist#0@@28| T@U) (|pivots#0@@73| T@U) (|cRight#0@@0| Int) (|key#0@@234| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@28|) (SeqType BoxType)) (= (type |pivots#0@@73|) (SeqType BoxType))) (= (type |key#0@@234|) (SeqType BoxType))) (and (and ($Is |blist#0@@28| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@73| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |key#0@@234| Tclass.KeyType.Key))) (= (|BucketsLib.__default.SplitBucketListRight#requires| |blist#0@@28| |pivots#0@@73| |cRight#0@@0| |key#0@@234|)  (and (and (BucketsLib.__default.WFBucketList |blist#0@@28| |pivots#0@@73|) (BoundedPivotsLib.__default.BoundedKey |pivots#0@@73| |key#0@@234|)) (= (BoundedPivotsLib.__default.CutoffForRight StartFuel_BoundedPivotsLib._default.CutoffForRight |pivots#0@@73| |key#0@@234|) |cRight#0@@0|)))) :qid |BucketsLibidfy.303:33| :skolemid |5006| :pattern ( (|BucketsLib.__default.SplitBucketListRight#requires| |blist#0@@28| |pivots#0@@73| |cRight#0@@0| |key#0@@234|)) )))
(assert (= (type StartFuel_BucketsLib._default.SplitBucketRight) LayerTypeType))
(assert  (=> true (forall ((|blist#0@@29| T@U) (|pivots#0@@74| T@U) (|cRight#0@@1| Int) (|key#0@@235| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@29|) (SeqType BoxType)) (= (type |pivots#0@@74|) (SeqType BoxType))) (= (type |key#0@@235|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketListRight#canCall| |blist#0@@29| |pivots#0@@74| |cRight#0@@1| |key#0@@235|) (and (and (and ($Is |blist#0@@29| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@74| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |key#0@@235| Tclass.KeyType.Key)) (and (and (BucketsLib.__default.WFBucketList |blist#0@@29| |pivots#0@@74|) (BoundedPivotsLib.__default.BoundedKey |pivots#0@@74| |key#0@@235|)) (= (BoundedPivotsLib.__default.CutoffForRight StartFuel_BoundedPivotsLib._default.CutoffForRight |pivots#0@@74| |key#0@@235|) |cRight#0@@1|))))) (and (|BucketsLib.__default.SplitBucketRight#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@29| |cRight#0@@1|)) |key#0@@235|) (= (BucketsLib.__default.SplitBucketListRight |blist#0@@29| |pivots#0@@74| |cRight#0@@1| |key#0@@235|) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.SplitBucketRight StartFuel_BucketsLib._default.SplitBucketRight ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@29| |cRight#0@@1|)) |key#0@@235|))) (|Seq#Drop| |blist#0@@29| (+ |cRight#0@@1| 1)))))) :qid |BucketsLibidfy.303:33| :skolemid |5007| :pattern ( (BucketsLib.__default.SplitBucketListRight |blist#0@@29| |pivots#0@@74| |cRight#0@@1| |key#0@@235|)) ))))
(assert  (=> true (forall ((|blist#0@@30| T@U) (|pivots#0@@75| T@U) (|cRight#0@@2| Int) (|key#0@@236| T@U) ) (!  (=> (and (and (and (= (type |blist#0@@30|) (SeqType BoxType)) (= (type |pivots#0@@75|) (SeqType BoxType))) (= (type |key#0@@236|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketListRight#canCall| (Lit |blist#0@@30|) (Lit |pivots#0@@75|) (LitInt |cRight#0@@2|) (Lit |key#0@@236|)) (and (and (and ($Is |blist#0@@30| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivots#0@@75| (TSeq Tclass.Upperbounded__Lexicographic__Byte__Order.Element))) ($Is |key#0@@236| Tclass.KeyType.Key)) (and (and (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucketList (Lit |blist#0@@30|) (Lit |pivots#0@@75|))))) (U_2_bool (Lit (bool_2_U (BoundedPivotsLib.__default.BoundedKey (Lit |pivots#0@@75|) (Lit |key#0@@236|)))))) (= (BoundedPivotsLib.__default.CutoffForRight StartFuel_BoundedPivotsLib._default.CutoffForRight (Lit |pivots#0@@75|) (Lit |key#0@@236|)) (LitInt |cRight#0@@2|)))))) (and (|BucketsLib.__default.SplitBucketRight#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@30|) (LitInt |cRight#0@@2|))) (Lit |key#0@@236|)) (= (BucketsLib.__default.SplitBucketListRight (Lit |blist#0@@30|) (Lit |pivots#0@@75|) (LitInt |cRight#0@@2|) (Lit |key#0@@236|)) (|Seq#Append| (|Seq#Build| (|Seq#Empty| BoxType) ($Box (BucketsLib.__default.SplitBucketRight StartFuel_BucketsLib._default.SplitBucketRight ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@30|) (LitInt |cRight#0@@2|))) (Lit |key#0@@236|)))) (|Seq#Drop| (Lit |blist#0@@30|) (LitInt (+ |cRight#0@@2| 1))))))) :qid |BucketsLibidfy.303:33| :weight 3 :skolemid |5008| :pattern ( (BucketsLib.__default.SplitBucketListRight (Lit |blist#0@@30|) (Lit |pivots#0@@75|) (LitInt |cRight#0@@2|) (Lit |key#0@@236|))) ))))
(assert (forall ((arg0@@753 T@U) (arg1@@397 T@U) (arg2@@246 Int) (arg3@@167 T@U) ) (! (= (type (BucketsLib.__default.SplitBucketInList arg0@@753 arg1@@397 arg2@@246 arg3@@167)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.SplitBucketInList| :pattern ( (BucketsLib.__default.SplitBucketInList arg0@@753 arg1@@397 arg2@@246 arg3@@167)) )))
(assert (forall (($ly@@792 T@U) (|blist#0@@31| T@U) (|slot#0| Int) (|pivot#0@@43| T@U) ) (!  (=> (and (and (= (type $ly@@792) LayerTypeType) (= (type |blist#0@@31|) (SeqType BoxType))) (= (type |pivot#0@@43|) (SeqType BoxType))) (= (BucketsLib.__default.SplitBucketInList ($LS $ly@@792) |blist#0@@31| |slot#0| |pivot#0@@43|) (BucketsLib.__default.SplitBucketInList $ly@@792 |blist#0@@31| |slot#0| |pivot#0@@43|))) :qid |BucketsLibidfy.311:22| :skolemid |5009| :pattern ( (BucketsLib.__default.SplitBucketInList ($LS $ly@@792) |blist#0@@31| |slot#0| |pivot#0@@43|)) )))
(assert (forall (($ly@@793 T@U) (|blist#0@@32| T@U) (|slot#0@@0| Int) (|pivot#0@@44| T@U) ) (!  (=> (and (and (= (type $ly@@793) LayerTypeType) (= (type |blist#0@@32|) (SeqType BoxType))) (= (type |pivot#0@@44|) (SeqType BoxType))) (= (BucketsLib.__default.SplitBucketInList $ly@@793 |blist#0@@32| |slot#0@@0| |pivot#0@@44|) (BucketsLib.__default.SplitBucketInList $LZ |blist#0@@32| |slot#0@@0| |pivot#0@@44|))) :qid |BucketsLibidfy.311:22| :skolemid |5010| :pattern ( (BucketsLib.__default.SplitBucketInList (AsFuelBottom $ly@@793) |blist#0@@32| |slot#0@@0| |pivot#0@@44|)) )))
(assert  (=> true (forall (($ly@@794 T@U) (|blist#0@@33| T@U) (|slot#0@@1| Int) (|pivot#0@@45| T@U) ) (!  (=> (and (and (and (= (type $ly@@794) LayerTypeType) (= (type |blist#0@@33|) (SeqType BoxType))) (= (type |pivot#0@@45|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketInList#canCall| |blist#0@@33| |slot#0@@1| |pivot#0@@45|) (and (and ($Is |blist#0@@33| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivot#0@@45| Tclass.KeyType.Key)) (and (and (<= (LitInt 0) |slot#0@@1|) (< |slot#0@@1| (|Seq#Length| |blist#0@@33|))) (BucketsLib.__default.PreWFBucket ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@33| |slot#0@@1|))))))) ($Is (BucketsLib.__default.SplitBucketInList $ly@@794 |blist#0@@33| |slot#0@@1| |pivot#0@@45|) (TSeq Tclass.BucketsLib.Bucket))) :qid |BucketsLibidfy.311:22| :skolemid |5011| :pattern ( (BucketsLib.__default.SplitBucketInList $ly@@794 |blist#0@@33| |slot#0@@1| |pivot#0@@45|)) ))))
(assert (forall (($ly@@795 T@U) (|blist#0@@34| T@U) (|slot#0@@2| Int) (|pivot#0@@46| T@U) ) (!  (=> (and (and (and (= (type $ly@@795) LayerTypeType) (= (type |blist#0@@34|) (SeqType BoxType))) (= (type |pivot#0@@46|) (SeqType BoxType))) (and ($Is |blist#0@@34| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivot#0@@46| Tclass.KeyType.Key))) (= (|BucketsLib.__default.SplitBucketInList#requires| $ly@@795 |blist#0@@34| |slot#0@@2| |pivot#0@@46|)  (and (and (<= (LitInt 0) |slot#0@@2|) (< |slot#0@@2| (|Seq#Length| |blist#0@@34|))) (BucketsLib.__default.PreWFBucket ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@34| |slot#0@@2|)))))) :qid |BucketsLibidfy.311:22| :skolemid |5012| :pattern ( (|BucketsLib.__default.SplitBucketInList#requires| $ly@@795 |blist#0@@34| |slot#0@@2| |pivot#0@@46|)) )))
(assert (= (type StartFuel_Sequences._default.replace1with2) LayerTypeType))
(assert  (=> true (forall (($ly@@796 T@U) (|blist#0@@35| T@U) (|slot#0@@3| Int) (|pivot#0@@47| T@U) ) (!  (=> (and (and (and (= (type $ly@@796) LayerTypeType) (= (type |blist#0@@35|) (SeqType BoxType))) (= (type |pivot#0@@47|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketInList#canCall| |blist#0@@35| |slot#0@@3| |pivot#0@@47|) (and (and ($Is |blist#0@@35| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivot#0@@47| Tclass.KeyType.Key)) (and (and (<= (LitInt 0) |slot#0@@3|) (< |slot#0@@3| (|Seq#Length| |blist#0@@35|))) (BucketsLib.__default.PreWFBucket ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@35| |slot#0@@3|))))))) (and (and (and (|BucketsLib.__default.SplitBucketLeft#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@35| |slot#0@@3|)) |pivot#0@@47|) (|BucketsLib.__default.SplitBucketRight#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@35| |slot#0@@3|)) |pivot#0@@47|)) (|Sequences.__default.replace1with2#canCall| Tclass.BucketsLib.Bucket |blist#0@@35| ($Box (BucketsLib.__default.SplitBucketLeft StartFuel_BucketsLib._default.SplitBucketLeft ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@35| |slot#0@@3|)) |pivot#0@@47|)) ($Box (BucketsLib.__default.SplitBucketRight StartFuel_BucketsLib._default.SplitBucketRight ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@35| |slot#0@@3|)) |pivot#0@@47|)) |slot#0@@3|)) (= (BucketsLib.__default.SplitBucketInList ($LS $ly@@796) |blist#0@@35| |slot#0@@3| |pivot#0@@47|) (Sequences.__default.replace1with2 Tclass.BucketsLib.Bucket StartFuel_Sequences._default.replace1with2 |blist#0@@35| ($Box (BucketsLib.__default.SplitBucketLeft StartFuel_BucketsLib._default.SplitBucketLeft ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@35| |slot#0@@3|)) |pivot#0@@47|)) ($Box (BucketsLib.__default.SplitBucketRight StartFuel_BucketsLib._default.SplitBucketRight ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@35| |slot#0@@3|)) |pivot#0@@47|)) |slot#0@@3|)))) :qid |BucketsLibidfy.311:22| :skolemid |5013| :pattern ( (BucketsLib.__default.SplitBucketInList ($LS $ly@@796) |blist#0@@35| |slot#0@@3| |pivot#0@@47|)) ))))
(assert  (=> true (forall (($ly@@797 T@U) (|blist#0@@36| T@U) (|slot#0@@4| Int) (|pivot#0@@48| T@U) ) (!  (=> (and (and (and (= (type $ly@@797) LayerTypeType) (= (type |blist#0@@36|) (SeqType BoxType))) (= (type |pivot#0@@48|) (SeqType BoxType))) (or (|BucketsLib.__default.SplitBucketInList#canCall| (Lit |blist#0@@36|) (LitInt |slot#0@@4|) (Lit |pivot#0@@48|)) (and (and ($Is |blist#0@@36| (TSeq Tclass.BucketsLib.Bucket)) ($Is |pivot#0@@48| Tclass.KeyType.Key)) (and (and (<= (LitInt 0) (LitInt |slot#0@@4|)) (< |slot#0@@4| (|Seq#Length| (Lit |blist#0@@36|)))) (BucketsLib.__default.PreWFBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@36|) (LitInt |slot#0@@4|)))))))) (and (and (and (|BucketsLib.__default.SplitBucketLeft#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@36|) (LitInt |slot#0@@4|))) (Lit |pivot#0@@48|)) (|BucketsLib.__default.SplitBucketRight#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@36|) (LitInt |slot#0@@4|))) (Lit |pivot#0@@48|))) (|Sequences.__default.replace1with2#canCall| Tclass.BucketsLib.Bucket (Lit |blist#0@@36|) ($Box (BucketsLib.__default.SplitBucketLeft StartFuel_BucketsLib._default.SplitBucketLeft ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@36|) (LitInt |slot#0@@4|))) (Lit |pivot#0@@48|))) ($Box (BucketsLib.__default.SplitBucketRight StartFuel_BucketsLib._default.SplitBucketRight ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@36|) (LitInt |slot#0@@4|))) (Lit |pivot#0@@48|))) (LitInt |slot#0@@4|))) (= (BucketsLib.__default.SplitBucketInList ($LS $ly@@797) (Lit |blist#0@@36|) (LitInt |slot#0@@4|) (Lit |pivot#0@@48|)) (Sequences.__default.replace1with2 Tclass.BucketsLib.Bucket StartFuel_Sequences._default.replace1with2 (Lit |blist#0@@36|) ($Box (BucketsLib.__default.SplitBucketLeft StartFuel_BucketsLib._default.SplitBucketLeft ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@36|) (LitInt |slot#0@@4|))) (Lit |pivot#0@@48|))) ($Box (BucketsLib.__default.SplitBucketRight StartFuel_BucketsLib._default.SplitBucketRight ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@36|) (LitInt |slot#0@@4|))) (Lit |pivot#0@@48|))) (LitInt |slot#0@@4|))))) :qid |BucketsLibidfy.311:22| :weight 3 :skolemid |5014| :pattern ( (BucketsLib.__default.SplitBucketInList ($LS $ly@@797) (Lit |blist#0@@36|) (LitInt |slot#0@@4|) (Lit |pivot#0@@48|))) ))))
(assert (forall ((arg0@@754 T@U) (arg1@@398 T@U) (arg2@@247 T@U) ) (! (= (type (BucketsLib.__default.MergeBuckets arg0@@754 arg1@@398 arg2@@247)) DatatypeTypeType) :qid |funType:BucketsLib.__default.MergeBuckets| :pattern ( (BucketsLib.__default.MergeBuckets arg0@@754 arg1@@398 arg2@@247)) )))
(assert (forall (($ly@@798 T@U) (|left#0@@11| T@U) (|right#0@@11| T@U) ) (!  (=> (and (and (= (type $ly@@798) LayerTypeType) (= (type |left#0@@11|) DatatypeTypeType)) (= (type |right#0@@11|) DatatypeTypeType)) (= (BucketsLib.__default.MergeBuckets ($LS $ly@@798) |left#0@@11| |right#0@@11|) (BucketsLib.__default.MergeBuckets $ly@@798 |left#0@@11| |right#0@@11|))) :qid |BucketsLibidfy.321:22| :skolemid |5015| :pattern ( (BucketsLib.__default.MergeBuckets ($LS $ly@@798) |left#0@@11| |right#0@@11|)) )))
(assert (forall (($ly@@799 T@U) (|left#0@@12| T@U) (|right#0@@12| T@U) ) (!  (=> (and (and (= (type $ly@@799) LayerTypeType) (= (type |left#0@@12|) DatatypeTypeType)) (= (type |right#0@@12|) DatatypeTypeType)) (= (BucketsLib.__default.MergeBuckets $ly@@799 |left#0@@12| |right#0@@12|) (BucketsLib.__default.MergeBuckets $LZ |left#0@@12| |right#0@@12|))) :qid |BucketsLibidfy.321:22| :skolemid |5016| :pattern ( (BucketsLib.__default.MergeBuckets (AsFuelBottom $ly@@799) |left#0@@12| |right#0@@12|)) )))
(assert  (=> true (forall (($ly@@800 T@U) (|left#0@@13| T@U) (|right#0@@13| T@U) ) (!  (=> (and (and (and (= (type $ly@@800) LayerTypeType) (= (type |left#0@@13|) DatatypeTypeType)) (= (type |right#0@@13|) DatatypeTypeType)) (or (|BucketsLib.__default.MergeBuckets#canCall| |left#0@@13| |right#0@@13|) (and (and ($Is |left#0@@13| Tclass.BucketsLib.Bucket) ($Is |right#0@@13| Tclass.BucketsLib.Bucket)) (and (BucketsLib.__default.PreWFBucket |left#0@@13|) (BucketsLib.__default.PreWFBucket |right#0@@13|))))) (and (BucketsLib.__default.PreWFBucket (BucketsLib.__default.MergeBuckets $ly@@800 |left#0@@13| |right#0@@13|)) ($Is (BucketsLib.__default.MergeBuckets $ly@@800 |left#0@@13| |right#0@@13|) Tclass.BucketsLib.Bucket))) :qid |BucketsLibidfy.321:22| :skolemid |5017| :pattern ( (BucketsLib.__default.MergeBuckets $ly@@800 |left#0@@13| |right#0@@13|)) ))))
(assert (forall (($ly@@801 T@U) (|left#0@@14| T@U) (|right#0@@14| T@U) ) (!  (=> (and (and (and (= (type $ly@@801) LayerTypeType) (= (type |left#0@@14|) DatatypeTypeType)) (= (type |right#0@@14|) DatatypeTypeType)) (and ($Is |left#0@@14| Tclass.BucketsLib.Bucket) ($Is |right#0@@14| Tclass.BucketsLib.Bucket))) (= (|BucketsLib.__default.MergeBuckets#requires| $ly@@801 |left#0@@14| |right#0@@14|)  (and (BucketsLib.__default.PreWFBucket |left#0@@14|) (BucketsLib.__default.PreWFBucket |right#0@@14|)))) :qid |BucketsLibidfy.321:22| :skolemid |5018| :pattern ( (|BucketsLib.__default.MergeBuckets#requires| $ly@@801 |left#0@@14| |right#0@@14|)) )))
(assert  (=> true (forall (($ly@@802 T@U) (|left#0@@15| T@U) (|right#0@@15| T@U) ) (!  (=> (and (and (and (= (type $ly@@802) LayerTypeType) (= (type |left#0@@15|) DatatypeTypeType)) (= (type |right#0@@15|) DatatypeTypeType)) (or (|BucketsLib.__default.MergeBuckets#canCall| |left#0@@15| |right#0@@15|) (and (and ($Is |left#0@@15| Tclass.BucketsLib.Bucket) ($Is |right#0@@15| Tclass.BucketsLib.Bucket)) (and (BucketsLib.__default.PreWFBucket |left#0@@15|) (BucketsLib.__default.PreWFBucket |right#0@@15|))))) (and (and (and (BucketsLib.Bucket.Bucket_q |left#0@@15|) (BucketsLib.Bucket.Bucket_q |right#0@@15|)) (and (BucketsLib.Bucket.Bucket_q |left#0@@15|) (BucketsLib.Bucket.Bucket_q |right#0@@15|))) (= (BucketsLib.__default.MergeBuckets ($LS $ly@@802) |left#0@@15| |right#0@@15|) (|#BucketsLib.Bucket.Bucket| (|Seq#Append| (BucketsLib.Bucket.keys |left#0@@15|) (BucketsLib.Bucket.keys |right#0@@15|)) (|Seq#Append| (BucketsLib.Bucket.msgs |left#0@@15|) (BucketsLib.Bucket.msgs |right#0@@15|)))))) :qid |BucketsLibidfy.321:22| :skolemid |5019| :pattern ( (BucketsLib.__default.MergeBuckets ($LS $ly@@802) |left#0@@15| |right#0@@15|)) ))))
(assert  (=> true (forall (($ly@@803 T@U) (|left#0@@16| T@U) (|right#0@@16| T@U) ) (!  (=> (and (and (and (= (type $ly@@803) LayerTypeType) (= (type |left#0@@16|) DatatypeTypeType)) (= (type |right#0@@16|) DatatypeTypeType)) (or (|BucketsLib.__default.MergeBuckets#canCall| (Lit |left#0@@16|) (Lit |right#0@@16|)) (and (and ($Is |left#0@@16| Tclass.BucketsLib.Bucket) ($Is |right#0@@16| Tclass.BucketsLib.Bucket)) (and (U_2_bool (Lit (bool_2_U (BucketsLib.__default.PreWFBucket (Lit |left#0@@16|))))) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.PreWFBucket (Lit |right#0@@16|))))))))) (and (and (and (BucketsLib.Bucket.Bucket_q (Lit |left#0@@16|)) (BucketsLib.Bucket.Bucket_q (Lit |right#0@@16|))) (and (BucketsLib.Bucket.Bucket_q (Lit |left#0@@16|)) (BucketsLib.Bucket.Bucket_q (Lit |right#0@@16|)))) (= (BucketsLib.__default.MergeBuckets ($LS $ly@@803) (Lit |left#0@@16|) (Lit |right#0@@16|)) (|#BucketsLib.Bucket.Bucket| (|Seq#Append| (BucketsLib.Bucket.keys (Lit |left#0@@16|)) (BucketsLib.Bucket.keys (Lit |right#0@@16|))) (|Seq#Append| (BucketsLib.Bucket.msgs (Lit |left#0@@16|)) (BucketsLib.Bucket.msgs (Lit |right#0@@16|))))))) :qid |BucketsLibidfy.321:22| :weight 3 :skolemid |5020| :pattern ( (BucketsLib.__default.MergeBuckets ($LS $ly@@803) (Lit |left#0@@16|) (Lit |right#0@@16|))) ))))
(assert (forall ((arg0@@755 T@U) (arg1@@399 T@U) (arg2@@248 Int) ) (! (= (type (BucketsLib.__default.MergeBucketsInList arg0@@755 arg1@@399 arg2@@248)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.MergeBucketsInList| :pattern ( (BucketsLib.__default.MergeBucketsInList arg0@@755 arg1@@399 arg2@@248)) )))
(assert (forall (($ly@@804 T@U) (|blist#0@@37| T@U) (|slot#0@@5| Int) ) (!  (=> (and (= (type $ly@@804) LayerTypeType) (= (type |blist#0@@37|) (SeqType BoxType))) (= (BucketsLib.__default.MergeBucketsInList ($LS $ly@@804) |blist#0@@37| |slot#0@@5|) (BucketsLib.__default.MergeBucketsInList $ly@@804 |blist#0@@37| |slot#0@@5|))) :qid |BucketsLibidfy.329:22| :skolemid |5021| :pattern ( (BucketsLib.__default.MergeBucketsInList ($LS $ly@@804) |blist#0@@37| |slot#0@@5|)) )))
(assert (forall (($ly@@805 T@U) (|blist#0@@38| T@U) (|slot#0@@6| Int) ) (!  (=> (and (= (type $ly@@805) LayerTypeType) (= (type |blist#0@@38|) (SeqType BoxType))) (= (BucketsLib.__default.MergeBucketsInList $ly@@805 |blist#0@@38| |slot#0@@6|) (BucketsLib.__default.MergeBucketsInList $LZ |blist#0@@38| |slot#0@@6|))) :qid |BucketsLibidfy.329:22| :skolemid |5022| :pattern ( (BucketsLib.__default.MergeBucketsInList (AsFuelBottom $ly@@805) |blist#0@@38| |slot#0@@6|)) )))
(assert  (=> true (forall (($ly@@806 T@U) (|blist#0@@39| T@U) (|slot#0@@7| Int) ) (!  (=> (and (and (= (type $ly@@806) LayerTypeType) (= (type |blist#0@@39|) (SeqType BoxType))) (or (|BucketsLib.__default.MergeBucketsInList#canCall| |blist#0@@39| |slot#0@@7|) (and ($Is |blist#0@@39| (TSeq Tclass.BucketsLib.Bucket)) (and (and (and (<= (LitInt 0) |slot#0@@7|) (< |slot#0@@7| (- (|Seq#Length| |blist#0@@39|) 1))) (BucketsLib.__default.PreWFBucket ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@39| |slot#0@@7|)))) (BucketsLib.__default.PreWFBucket ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@39| (+ |slot#0@@7| 1)))))))) (and (and (= (|Seq#Length| (BucketsLib.__default.MergeBucketsInList $ly@@806 |blist#0@@39| |slot#0@@7|)) (- (|Seq#Length| |blist#0@@39|) 1)) (BucketsLib.__default.PreWFBucket ($Unbox DatatypeTypeType (|Seq#Index| (BucketsLib.__default.MergeBucketsInList $ly@@806 |blist#0@@39| |slot#0@@7|) |slot#0@@7|)))) ($Is (BucketsLib.__default.MergeBucketsInList $ly@@806 |blist#0@@39| |slot#0@@7|) (TSeq Tclass.BucketsLib.Bucket)))) :qid |BucketsLibidfy.329:22| :skolemid |5023| :pattern ( (BucketsLib.__default.MergeBucketsInList $ly@@806 |blist#0@@39| |slot#0@@7|)) ))))
(assert (forall (($ly@@807 T@U) (|blist#0@@40| T@U) (|slot#0@@8| Int) ) (!  (=> (and (and (= (type $ly@@807) LayerTypeType) (= (type |blist#0@@40|) (SeqType BoxType))) ($Is |blist#0@@40| (TSeq Tclass.BucketsLib.Bucket))) (= (|BucketsLib.__default.MergeBucketsInList#requires| $ly@@807 |blist#0@@40| |slot#0@@8|)  (and (and (and (<= (LitInt 0) |slot#0@@8|) (< |slot#0@@8| (- (|Seq#Length| |blist#0@@40|) 1))) (BucketsLib.__default.PreWFBucket ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@40| |slot#0@@8|)))) (BucketsLib.__default.PreWFBucket ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@40| (+ |slot#0@@8| 1))))))) :qid |BucketsLibidfy.329:22| :skolemid |5024| :pattern ( (|BucketsLib.__default.MergeBucketsInList#requires| $ly@@807 |blist#0@@40| |slot#0@@8|)) )))
(assert  (and (= (type StartFuel_BucketsLib._default.MergeBuckets) LayerTypeType) (= (type StartFuel_Sequences._default.replace2with1) LayerTypeType)))
(assert  (=> true (forall (($ly@@808 T@U) (|blist#0@@41| T@U) (|slot#0@@9| Int) ) (!  (=> (and (and (= (type $ly@@808) LayerTypeType) (= (type |blist#0@@41|) (SeqType BoxType))) (or (|BucketsLib.__default.MergeBucketsInList#canCall| |blist#0@@41| |slot#0@@9|) (and ($Is |blist#0@@41| (TSeq Tclass.BucketsLib.Bucket)) (and (and (and (<= (LitInt 0) |slot#0@@9|) (< |slot#0@@9| (- (|Seq#Length| |blist#0@@41|) 1))) (BucketsLib.__default.PreWFBucket ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@41| |slot#0@@9|)))) (BucketsLib.__default.PreWFBucket ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@41| (+ |slot#0@@9| 1)))))))) (and (and (|BucketsLib.__default.MergeBuckets#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@41| |slot#0@@9|)) ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@41| (+ |slot#0@@9| 1)))) (|Sequences.__default.replace2with1#canCall| Tclass.BucketsLib.Bucket |blist#0@@41| ($Box (BucketsLib.__default.MergeBuckets StartFuel_BucketsLib._default.MergeBuckets ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@41| |slot#0@@9|)) ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@41| (+ |slot#0@@9| 1))))) |slot#0@@9|)) (= (BucketsLib.__default.MergeBucketsInList ($LS $ly@@808) |blist#0@@41| |slot#0@@9|) (Sequences.__default.replace2with1 Tclass.BucketsLib.Bucket StartFuel_Sequences._default.replace2with1 |blist#0@@41| ($Box (BucketsLib.__default.MergeBuckets StartFuel_BucketsLib._default.MergeBuckets ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@41| |slot#0@@9|)) ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@41| (+ |slot#0@@9| 1))))) |slot#0@@9|)))) :qid |BucketsLibidfy.329:22| :skolemid |5025| :pattern ( (BucketsLib.__default.MergeBucketsInList ($LS $ly@@808) |blist#0@@41| |slot#0@@9|)) ))))
(assert  (=> true (forall (($ly@@809 T@U) (|blist#0@@42| T@U) (|slot#0@@10| Int) ) (!  (=> (and (and (= (type $ly@@809) LayerTypeType) (= (type |blist#0@@42|) (SeqType BoxType))) (or (|BucketsLib.__default.MergeBucketsInList#canCall| (Lit |blist#0@@42|) (LitInt |slot#0@@10|)) (and ($Is |blist#0@@42| (TSeq Tclass.BucketsLib.Bucket)) (and (and (and (<= (LitInt 0) (LitInt |slot#0@@10|)) (< |slot#0@@10| (- (|Seq#Length| (Lit |blist#0@@42|)) 1))) (BucketsLib.__default.PreWFBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@42|) (LitInt |slot#0@@10|))))) (BucketsLib.__default.PreWFBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@42|) (LitInt (+ |slot#0@@10| 1))))))))) (and (and (|BucketsLib.__default.MergeBuckets#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@42|) (LitInt |slot#0@@10|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@42|) (LitInt (+ |slot#0@@10| 1))))) (|Sequences.__default.replace2with1#canCall| Tclass.BucketsLib.Bucket (Lit |blist#0@@42|) ($Box (BucketsLib.__default.MergeBuckets StartFuel_BucketsLib._default.MergeBuckets ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@42|) (LitInt |slot#0@@10|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@42|) (LitInt (+ |slot#0@@10| 1)))))) (LitInt |slot#0@@10|))) (= (BucketsLib.__default.MergeBucketsInList ($LS $ly@@809) (Lit |blist#0@@42|) (LitInt |slot#0@@10|)) (Sequences.__default.replace2with1 Tclass.BucketsLib.Bucket StartFuel_Sequences._default.replace2with1 (Lit |blist#0@@42|) ($Box (BucketsLib.__default.MergeBuckets StartFuel_BucketsLib._default.MergeBuckets ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@42|) (LitInt |slot#0@@10|))) ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@42|) (LitInt (+ |slot#0@@10| 1)))))) (LitInt |slot#0@@10|))))) :qid |BucketsLibidfy.329:22| :weight 3 :skolemid |5026| :pattern ( (BucketsLib.__default.MergeBucketsInList ($LS $ly@@809) (Lit |blist#0@@42|) (LitInt |slot#0@@10|))) ))))
(assert (forall ((arg0@@756 T@U) (arg1@@400 T@U) (arg2@@249 T@U) ) (! (= (type (BucketsLib.__default.binarySearch arg0@@756 arg1@@400 arg2@@249)) DatatypeTypeType) :qid |funType:BucketsLib.__default.binarySearch| :pattern ( (BucketsLib.__default.binarySearch arg0@@756 arg1@@400 arg2@@249)) )))
(assert (forall (($ly@@810 T@U) (|keys#0@@23| T@U) (|key#0@@237| T@U) ) (!  (=> (and (and (= (type $ly@@810) LayerTypeType) (= (type |keys#0@@23|) (SeqType BoxType))) (= (type |key#0@@237|) (SeqType BoxType))) (= (BucketsLib.__default.binarySearch ($LS $ly@@810) |keys#0@@23| |key#0@@237|) (BucketsLib.__default.binarySearch $ly@@810 |keys#0@@23| |key#0@@237|))) :qid |BucketsLibidfy.657:12| :skolemid |5027| :pattern ( (BucketsLib.__default.binarySearch ($LS $ly@@810) |keys#0@@23| |key#0@@237|)) )))
(assert (forall (($ly@@811 T@U) (|keys#0@@24| T@U) (|key#0@@238| T@U) ) (!  (=> (and (and (= (type $ly@@811) LayerTypeType) (= (type |keys#0@@24|) (SeqType BoxType))) (= (type |key#0@@238|) (SeqType BoxType))) (= (BucketsLib.__default.binarySearch $ly@@811 |keys#0@@24| |key#0@@238|) (BucketsLib.__default.binarySearch $LZ |keys#0@@24| |key#0@@238|))) :qid |BucketsLibidfy.657:12| :skolemid |5028| :pattern ( (BucketsLib.__default.binarySearch (AsFuelBottom $ly@@811) |keys#0@@24| |key#0@@238|)) )))
(assert  (=> true (forall (($ly@@812 T@U) (|keys#0@@25| T@U) (|key#0@@239| T@U) ) (!  (=> (and (and (and (= (type $ly@@812) LayerTypeType) (= (type |keys#0@@25|) (SeqType BoxType))) (= (type |key#0@@239|) (SeqType BoxType))) (or (|BucketsLib.__default.binarySearch#canCall| |keys#0@@25| |key#0@@239|) (and ($Is |keys#0@@25| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@239| Tclass.KeyType.Key)))) (and (and (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted |keys#0@@25|) (=> (Options.Option.None_q (BucketsLib.__default.binarySearch $ly@@812 |keys#0@@25| |key#0@@239|)) (not (|Seq#Contains| |keys#0@@25| ($Box |key#0@@239|))))) (=> (Options.Option.Some_q (BucketsLib.__default.binarySearch $ly@@812 |keys#0@@25| |key#0@@239|)) (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (Options.Option.value (BucketsLib.__default.binarySearch $ly@@812 |keys#0@@25| |key#0@@239|))))) (< (U_2_int ($Unbox intType (Options.Option.value (BucketsLib.__default.binarySearch $ly@@812 |keys#0@@25| |key#0@@239|)))) (|Seq#Length| |keys#0@@25|))) (|Seq#Equal| |key#0@@239| ($Unbox (SeqType BoxType) (|Seq#Index| |keys#0@@25| (U_2_int ($Unbox intType (Options.Option.value (BucketsLib.__default.binarySearch $ly@@812 |keys#0@@25| |key#0@@239|)))))))))) ($Is (BucketsLib.__default.binarySearch $ly@@812 |keys#0@@25| |key#0@@239|) (Tclass.Options.Option Tclass._System.nat)))) :qid |BucketsLibidfy.657:12| :skolemid |5029| :pattern ( (BucketsLib.__default.binarySearch $ly@@812 |keys#0@@25| |key#0@@239|)) ))))
(assert (forall (($ly@@813 T@U) (|keys#0@@26| T@U) (|key#0@@240| T@U) ) (!  (=> (and (and (and (= (type $ly@@813) LayerTypeType) (= (type |keys#0@@26|) (SeqType BoxType))) (= (type |key#0@@240|) (SeqType BoxType))) (and ($Is |keys#0@@26| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@240| Tclass.KeyType.Key))) (= (|BucketsLib.__default.binarySearch#requires| $ly@@813 |keys#0@@26| |key#0@@240|) true)) :qid |BucketsLibidfy.657:12| :skolemid |5030| :pattern ( (|BucketsLib.__default.binarySearch#requires| $ly@@813 |keys#0@@26| |key#0@@240|)) )))
(assert  (=> true (forall (($ly@@814 T@U) (|keys#0@@27| T@U) (|key#0@@241| T@U) ) (!  (=> (and (and (and (= (type $ly@@814) LayerTypeType) (= (type |keys#0@@27|) (SeqType BoxType))) (= (type |key#0@@241|) (SeqType BoxType))) (or (|BucketsLib.__default.binarySearch#canCall| |keys#0@@27| |key#0@@241|) (and ($Is |keys#0@@27| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@241| Tclass.KeyType.Key)))) (and (=> (not (= (|Seq#Length| |keys#0@@27|) (LitInt 0))) (let ((|mid#0@@11| (Div (|Seq#Length| |keys#0@@27|) (LitInt 2)))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| |key#0@@241| ($Unbox (SeqType BoxType) (|Seq#Index| |keys#0@@27| |mid#0@@11|))) (=> (Lexicographic__Byte__Order.__default.lt |key#0@@241| ($Unbox (SeqType BoxType) (|Seq#Index| |keys#0@@27| |mid#0@@11|))) (|BucketsLib.__default.binarySearch#canCall| (|Seq#Take| |keys#0@@27| |mid#0@@11|) |key#0@@241|))) (=> (not (Lexicographic__Byte__Order.__default.lt |key#0@@241| ($Unbox (SeqType BoxType) (|Seq#Index| |keys#0@@27| |mid#0@@11|)))) (=> (not (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |keys#0@@27| |mid#0@@11|)) |key#0@@241|)) (|BucketsLib.__default.binarySearch#canCall| (|Seq#Drop| |keys#0@@27| (+ |mid#0@@11| 1)) |key#0@@241|)))))) (= (BucketsLib.__default.binarySearch ($LS $ly@@814) |keys#0@@27| |key#0@@241|) (ite (= (|Seq#Length| |keys#0@@27|) (LitInt 0)) |#Options.Option.None| (let ((|mid#0@@12| (Div (|Seq#Length| |keys#0@@27|) (LitInt 2)))) (ite (Lexicographic__Byte__Order.__default.lt |key#0@@241| ($Unbox (SeqType BoxType) (|Seq#Index| |keys#0@@27| |mid#0@@12|))) (BucketsLib.__default.binarySearch $ly@@814 (|Seq#Take| |keys#0@@27| |mid#0@@12|) |key#0@@241|) (ite (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |keys#0@@27| |mid#0@@12|)) |key#0@@241|) (|#Options.Option.Some| ($Box (int_2_U |mid#0@@12|))) (let ((|sub#0@@7| (BucketsLib.__default.binarySearch $ly@@814 (|Seq#Drop| |keys#0@@27| (+ |mid#0@@12| 1)) |key#0@@241|))) (ite (Options.Option.Some_q |sub#0@@7|) (|#Options.Option.Some| ($Box (int_2_U (+ (+ |mid#0@@12| 1) (U_2_int ($Unbox intType (Options.Option.value |sub#0@@7|))))))) |#Options.Option.None|))))))))) :qid |BucketsLibidfy.657:12| :skolemid |5031| :pattern ( (BucketsLib.__default.binarySearch ($LS $ly@@814) |keys#0@@27| |key#0@@241|)) ))))
(assert  (=> true (forall (($ly@@815 T@U) (|keys#0@@28| T@U) (|key#0@@242| T@U) ) (!  (=> (and (and (and (= (type $ly@@815) LayerTypeType) (= (type |keys#0@@28|) (SeqType BoxType))) (= (type |key#0@@242|) (SeqType BoxType))) (or (|BucketsLib.__default.binarySearch#canCall| (Lit |keys#0@@28|) (Lit |key#0@@242|)) (and ($Is |keys#0@@28| (TSeq Tclass.KeyType.Key)) ($Is |key#0@@242| Tclass.KeyType.Key)))) (and (=> (not (= (|Seq#Length| (Lit |keys#0@@28|)) (LitInt 0))) (let ((|mid#1@@11| (Div (|Seq#Length| (Lit |keys#0@@28|)) (LitInt 2)))) (and (and (|Lexicographic__Byte__Order.__default.lt#canCall| (Lit |key#0@@242|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |keys#0@@28|) |mid#1@@11|))) (=> (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@242|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |keys#0@@28|) |mid#1@@11|))) (|BucketsLib.__default.binarySearch#canCall| (|Seq#Take| (Lit |keys#0@@28|) |mid#1@@11|) (Lit |key#0@@242|)))) (=> (not (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@242|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |keys#0@@28|) |mid#1@@11|)))) (=> (not (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |keys#0@@28|) |mid#1@@11|)) |key#0@@242|)) (|BucketsLib.__default.binarySearch#canCall| (|Seq#Drop| (Lit |keys#0@@28|) (+ |mid#1@@11| 1)) (Lit |key#0@@242|))))))) (= (BucketsLib.__default.binarySearch ($LS $ly@@815) (Lit |keys#0@@28|) (Lit |key#0@@242|)) (ite (= (|Seq#Length| (Lit |keys#0@@28|)) (LitInt 0)) |#Options.Option.None| (let ((|mid#1@@12| (Div (|Seq#Length| (Lit |keys#0@@28|)) (LitInt 2)))) (ite (Lexicographic__Byte__Order.__default.lt (Lit |key#0@@242|) ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |keys#0@@28|) |mid#1@@12|))) (BucketsLib.__default.binarySearch ($LS $ly@@815) (|Seq#Take| (Lit |keys#0@@28|) |mid#1@@12|) (Lit |key#0@@242|)) (ite (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit |keys#0@@28|) |mid#1@@12|)) |key#0@@242|) (|#Options.Option.Some| ($Box (int_2_U |mid#1@@12|))) (let ((|sub#1| (BucketsLib.__default.binarySearch ($LS $ly@@815) (|Seq#Drop| (Lit |keys#0@@28|) (+ |mid#1@@12| 1)) (Lit |key#0@@242|)))) (ite (Options.Option.Some_q |sub#1|) (|#Options.Option.Some| ($Box (int_2_U (+ (+ |mid#1@@12| 1) (U_2_int ($Unbox intType (Options.Option.value |sub#1|))))))) |#Options.Option.None|))))))))) :qid |BucketsLibidfy.657:12| :weight 3 :skolemid |5032| :pattern ( (BucketsLib.__default.binarySearch ($LS $ly@@815) (Lit |keys#0@@28|) (Lit |key#0@@242|))) ))))
(assert (forall ((arg0@@757 T@U) (arg1@@401 T@U) ) (! (= (type (BucketsLib.__default.bucketBinarySearchLookup arg0@@757 arg1@@401)) DatatypeTypeType) :qid |funType:BucketsLib.__default.bucketBinarySearchLookup| :pattern ( (BucketsLib.__default.bucketBinarySearchLookup arg0@@757 arg1@@401)) )))
(assert  (=> true (forall ((|bucket#0@@79| T@U) (|key#0@@243| T@U) ) (!  (=> (and (and (= (type |bucket#0@@79|) DatatypeTypeType) (= (type |key#0@@243|) (SeqType BoxType))) (or (|BucketsLib.__default.bucketBinarySearchLookup#canCall| |bucket#0@@79| |key#0@@243|) (and (and ($Is |bucket#0@@79| Tclass.BucketsLib.Bucket) ($Is |key#0@@243| Tclass.KeyType.Key)) (BucketsLib.__default.WFBucket |bucket#0@@79|)))) (and (and (=> (BucketsLib.__default.BucketWellMarshalled |bucket#0@@79|) (=> (Options.Option.None_q (BucketsLib.__default.bucketBinarySearchLookup |bucket#0@@79| |key#0@@243|)) (not (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.as__map |bucket#0@@79|)) ($Box |key#0@@243|)))))) (=> (BucketsLib.__default.BucketWellMarshalled |bucket#0@@79|) (=> (Options.Option.Some_q (BucketsLib.__default.bucketBinarySearchLookup |bucket#0@@79| |key#0@@243|)) (and (U_2_bool (MapType0Select (|Map#Domain| (BucketsLib.Bucket.as__map |bucket#0@@79|)) ($Box |key#0@@243|))) (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (BucketsLib.Bucket.as__map |bucket#0@@79|)) ($Box |key#0@@243|))) ($Unbox DatatypeTypeType (Options.Option.value (BucketsLib.__default.bucketBinarySearchLookup |bucket#0@@79| |key#0@@243|)))))))) ($Is (BucketsLib.__default.bucketBinarySearchLookup |bucket#0@@79| |key#0@@243|) (Tclass.Options.Option Tclass.ValueMessage.Message)))) :qid |BucketsLibidfy.681:37| :skolemid |5033| :pattern ( (BucketsLib.__default.bucketBinarySearchLookup |bucket#0@@79| |key#0@@243|)) ))))
(assert (forall ((|bucket#0@@80| T@U) (|key#0@@244| T@U) ) (!  (=> (and (and (= (type |bucket#0@@80|) DatatypeTypeType) (= (type |key#0@@244|) (SeqType BoxType))) (and ($Is |bucket#0@@80| Tclass.BucketsLib.Bucket) ($Is |key#0@@244| Tclass.KeyType.Key))) (= (|BucketsLib.__default.bucketBinarySearchLookup#requires| |bucket#0@@80| |key#0@@244|) (BucketsLib.__default.WFBucket |bucket#0@@80|))) :qid |BucketsLibidfy.681:37| :skolemid |5034| :pattern ( (|BucketsLib.__default.bucketBinarySearchLookup#requires| |bucket#0@@80| |key#0@@244|)) )))
(assert  (=> true (forall ((|bucket#0@@81| T@U) (|key#0@@245| T@U) ) (!  (=> (and (and (= (type |bucket#0@@81|) DatatypeTypeType) (= (type |key#0@@245|) (SeqType BoxType))) (or (|BucketsLib.__default.bucketBinarySearchLookup#canCall| |bucket#0@@81| |key#0@@245|) (and (and ($Is |bucket#0@@81| Tclass.BucketsLib.Bucket) ($Is |key#0@@245| Tclass.KeyType.Key)) (BucketsLib.__default.WFBucket |bucket#0@@81|)))) (and (and (and (BucketsLib.Bucket.Bucket_q |bucket#0@@81|) (|BucketsLib.__default.binarySearch#canCall| (BucketsLib.Bucket.keys |bucket#0@@81|) |key#0@@245|)) (let ((|i#0@@173| (BucketsLib.__default.binarySearch ($LS $LZ) (BucketsLib.Bucket.keys |bucket#0@@81|) |key#0@@245|))) (=> (Options.Option.Some_q |i#0@@173|) (and (and (|BucketsLib.__default.BucketWellMarshalled#canCall| |bucket#0@@81|) (=> (BucketsLib.__default.BucketWellMarshalled |bucket#0@@81|) (BucketsLib.Bucket.Bucket_q |bucket#0@@81|))) (=> (not (BucketsLib.__default.BucketWellMarshalled |bucket#0@@81|)) (BucketsLib.Bucket.Bucket_q |bucket#0@@81|)))))) (= (BucketsLib.__default.bucketBinarySearchLookup |bucket#0@@81| |key#0@@245|) (let ((|i#0@@174| (BucketsLib.__default.binarySearch ($LS $LZ) (BucketsLib.Bucket.keys |bucket#0@@81|) |key#0@@245|))) (ite (Options.Option.Some_q |i#0@@174|) (ite (BucketsLib.__default.BucketWellMarshalled |bucket#0@@81|) (|#Options.Option.Some| (|Seq#Index| (BucketsLib.Bucket.msgs |bucket#0@@81|) (U_2_int ($Unbox intType (Options.Option.value |i#0@@174|))))) (|#Options.Option.Some| (|Seq#Index| (BucketsLib.Bucket.msgs |bucket#0@@81|) (U_2_int ($Unbox intType (Options.Option.value |i#0@@174|)))))) |#Options.Option.None|))))) :qid |BucketsLibidfy.681:37| :skolemid |5035| :pattern ( (BucketsLib.__default.bucketBinarySearchLookup |bucket#0@@81| |key#0@@245|)) ))))
(assert  (=> true (forall ((|bucket#0@@82| T@U) (|key#0@@246| T@U) ) (!  (=> (and (and (= (type |bucket#0@@82|) DatatypeTypeType) (= (type |key#0@@246|) (SeqType BoxType))) (or (|BucketsLib.__default.bucketBinarySearchLookup#canCall| (Lit |bucket#0@@82|) (Lit |key#0@@246|)) (and (and ($Is |bucket#0@@82| Tclass.BucketsLib.Bucket) ($Is |key#0@@246| Tclass.KeyType.Key)) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucket (Lit |bucket#0@@82|)))))))) (and (and (and (BucketsLib.Bucket.Bucket_q (Lit |bucket#0@@82|)) (|BucketsLib.__default.binarySearch#canCall| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@82|))) (Lit |key#0@@246|))) (let ((|i#1@@79| (Lit (BucketsLib.__default.binarySearch ($LS $LZ) (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@82|))) (Lit |key#0@@246|))))) (=> (Options.Option.Some_q |i#1@@79|) (and (and (|BucketsLib.__default.BucketWellMarshalled#canCall| (Lit |bucket#0@@82|)) (=> (U_2_bool (Lit (bool_2_U (BucketsLib.__default.BucketWellMarshalled (Lit |bucket#0@@82|))))) (BucketsLib.Bucket.Bucket_q (Lit |bucket#0@@82|)))) (=> (not (U_2_bool (Lit (bool_2_U (BucketsLib.__default.BucketWellMarshalled (Lit |bucket#0@@82|)))))) (BucketsLib.Bucket.Bucket_q (Lit |bucket#0@@82|))))))) (= (BucketsLib.__default.bucketBinarySearchLookup (Lit |bucket#0@@82|) (Lit |key#0@@246|)) (let ((|i#1@@80| (Lit (BucketsLib.__default.binarySearch ($LS $LZ) (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@82|))) (Lit |key#0@@246|))))) (ite (Options.Option.Some_q |i#1@@80|) (ite (BucketsLib.__default.BucketWellMarshalled (Lit |bucket#0@@82|)) (|#Options.Option.Some| (|Seq#Index| (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@82|))) (LitInt (U_2_int ($Unbox intType (Options.Option.value |i#1@@80|)))))) (|#Options.Option.Some| (|Seq#Index| (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@82|))) (LitInt (U_2_int ($Unbox intType (Options.Option.value |i#1@@80|))))))) |#Options.Option.None|))))) :qid |BucketsLibidfy.681:37| :weight 3 :skolemid |5036| :pattern ( (BucketsLib.__default.bucketBinarySearchLookup (Lit |bucket#0@@82|) (Lit |key#0@@246|))) ))))
(assert (forall ((arg0@@758 T@U) ) (! (= (type (BucketsLib.__default.getMiddleKey arg0@@758)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.getMiddleKey| :pattern ( (BucketsLib.__default.getMiddleKey arg0@@758)) )))
(assert  (=> true (forall ((|bucket#0@@83| T@U) ) (!  (=> (and (= (type |bucket#0@@83|) DatatypeTypeType) (or (|BucketsLib.__default.getMiddleKey#canCall| |bucket#0@@83|) (and ($Is |bucket#0@@83| Tclass.BucketsLib.Bucket) (BucketsLib.__default.WFBucket |bucket#0@@83|)))) ($Is (BucketsLib.__default.getMiddleKey |bucket#0@@83|) Tclass.KeyType.Key)) :qid |BucketsLibidfy.706:25| :skolemid |5037| :pattern ( (BucketsLib.__default.getMiddleKey |bucket#0@@83|)) ))))
(assert (forall ((|bucket#0@@84| T@U) ) (!  (=> (and (= (type |bucket#0@@84|) DatatypeTypeType) ($Is |bucket#0@@84| Tclass.BucketsLib.Bucket)) (= (|BucketsLib.__default.getMiddleKey#requires| |bucket#0@@84|) (BucketsLib.__default.WFBucket |bucket#0@@84|))) :qid |BucketsLibidfy.706:25| :skolemid |5038| :pattern ( (|BucketsLib.__default.getMiddleKey#requires| |bucket#0@@84|)) )))
(assert  (=> true (forall ((|bucket#0@@85| T@U) ) (!  (=> (and (= (type |bucket#0@@85|) DatatypeTypeType) (or (|BucketsLib.__default.getMiddleKey#canCall| |bucket#0@@85|) (and ($Is |bucket#0@@85| Tclass.BucketsLib.Bucket) (BucketsLib.__default.WFBucket |bucket#0@@85|)))) (and (and (BucketsLib.Bucket.Bucket_q |bucket#0@@85|) (=> (not (= (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@85|)) (LitInt 0))) (and (BucketsLib.Bucket.Bucket_q |bucket#0@@85|) (BucketsLib.Bucket.Bucket_q |bucket#0@@85|)))) (= (BucketsLib.__default.getMiddleKey |bucket#0@@85|) (ite (= (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@85|)) (LitInt 0)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 0)))) (let ((|key#0@@247| ($Unbox (SeqType BoxType) (|Seq#Index| (BucketsLib.Bucket.keys |bucket#0@@85|) (Div (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@85|)) (LitInt 2)))))) (ite (= (|Seq#Length| |key#0@@247|) (LitInt 0)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 0)))) |key#0@@247|)))))) :qid |BucketsLibidfy.706:25| :skolemid |5039| :pattern ( (BucketsLib.__default.getMiddleKey |bucket#0@@85|)) ))))
(assert  (=> true (forall ((|bucket#0@@86| T@U) ) (!  (=> (and (= (type |bucket#0@@86|) DatatypeTypeType) (or (|BucketsLib.__default.getMiddleKey#canCall| (Lit |bucket#0@@86|)) (and ($Is |bucket#0@@86| Tclass.BucketsLib.Bucket) (U_2_bool (Lit (bool_2_U (BucketsLib.__default.WFBucket (Lit |bucket#0@@86|)))))))) (and (and (BucketsLib.Bucket.Bucket_q (Lit |bucket#0@@86|)) (=> (not (= (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@86|)))) (LitInt 0))) (and (BucketsLib.Bucket.Bucket_q (Lit |bucket#0@@86|)) (BucketsLib.Bucket.Bucket_q (Lit |bucket#0@@86|))))) (= (BucketsLib.__default.getMiddleKey (Lit |bucket#0@@86|)) (ite (= (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@86|)))) (LitInt 0)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 0)))) (let ((|key#1@@19| ($Unbox (SeqType BoxType) (|Seq#Index| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@86|))) (Div (|Seq#Length| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@86|)))) (LitInt 2)))))) (ite (= (|Seq#Length| |key#1@@19|) (LitInt 0)) (|Seq#Build| (|Seq#Empty| BoxType) ($Box (int_2_U (LitInt 0)))) |key#1@@19|)))))) :qid |BucketsLibidfy.706:25| :weight 3 :skolemid |5040| :pattern ( (BucketsLib.__default.getMiddleKey (Lit |bucket#0@@86|))) ))))
(assert (forall ((arg0@@759 T@U) (arg1@@402 T@U) ) (! (= (type (BucketsLib.__default.MapsOfBucketList arg0@@759 arg1@@402)) (SeqType BoxType)) :qid |funType:BucketsLib.__default.MapsOfBucketList| :pattern ( (BucketsLib.__default.MapsOfBucketList arg0@@759 arg1@@402)) )))
(assert (forall (($ly@@816 T@U) (|blist#0@@43| T@U) ) (!  (=> (and (= (type $ly@@816) LayerTypeType) (= (type |blist#0@@43|) (SeqType BoxType))) (= (BucketsLib.__default.MapsOfBucketList ($LS $ly@@816) |blist#0@@43|) (BucketsLib.__default.MapsOfBucketList $ly@@816 |blist#0@@43|))) :qid |BucketsLibidfy.730:22| :skolemid |5041| :pattern ( (BucketsLib.__default.MapsOfBucketList ($LS $ly@@816) |blist#0@@43|)) )))
(assert (forall (($ly@@817 T@U) (|blist#0@@44| T@U) ) (!  (=> (and (= (type $ly@@817) LayerTypeType) (= (type |blist#0@@44|) (SeqType BoxType))) (= (BucketsLib.__default.MapsOfBucketList $ly@@817 |blist#0@@44|) (BucketsLib.__default.MapsOfBucketList $LZ |blist#0@@44|))) :qid |BucketsLibidfy.730:22| :skolemid |5042| :pattern ( (BucketsLib.__default.MapsOfBucketList (AsFuelBottom $ly@@817) |blist#0@@44|)) )))
(assert  (=> true (forall (($ly@@818 T@U) (|blist#0@@45| T@U) ) (!  (=> (and (and (= (type $ly@@818) LayerTypeType) (= (type |blist#0@@45|) (SeqType BoxType))) (or (|BucketsLib.__default.MapsOfBucketList#canCall| |blist#0@@45|) (and ($Is |blist#0@@45| (TSeq Tclass.BucketsLib.Bucket)) (forall ((|i#0@@175| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@175|) (< |i#0@@175| (|Seq#Length| |blist#0@@45|))) (BucketsLib.__default.PreWFBucket ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@45| |i#0@@175|)))) :qid |BucketsLibidfy.731:19| :skolemid |5043| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@45| |i#0@@175|))) ))))) (and (and (= (|Seq#Length| (BucketsLib.__default.MapsOfBucketList $ly@@818 |blist#0@@45|)) (|Seq#Length| |blist#0@@45|)) (forall ((|i#1@@81| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@81|) (< |i#1@@81| (|Seq#Length| (BucketsLib.__default.MapsOfBucketList $ly@@818 |blist#0@@45|)))) (|Map#Equal| ($Unbox (MapType BoxType BoxType) (|Seq#Index| (BucketsLib.__default.MapsOfBucketList $ly@@818 |blist#0@@45|) |i#1@@81|)) (BucketsLib.Bucket.as__map ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@45| |i#1@@81|))))) :qid |BucketsLibidfy.733:18| :skolemid |5044| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@45| |i#1@@81|))) :pattern ( ($Unbox (MapType BoxType BoxType) (|Seq#Index| (BucketsLib.__default.MapsOfBucketList $ly@@818 |blist#0@@45|) |i#1@@81|))) ))) ($Is (BucketsLib.__default.MapsOfBucketList $ly@@818 |blist#0@@45|) (TSeq (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))))) :qid |BucketsLibidfy.730:22| :skolemid |5045| :pattern ( (BucketsLib.__default.MapsOfBucketList $ly@@818 |blist#0@@45|)) ))))
(assert (forall (($ly@@819 T@U) ($Heap@@132 T@U) (|blist#0@@46| T@U) ) (!  (=> (and (and (and (= (type $ly@@819) LayerTypeType) (= (type $Heap@@132) (MapType0Type refType MapType1Type))) (= (type |blist#0@@46|) (SeqType BoxType))) (and ($IsGoodHeap $Heap@@132) ($Is |blist#0@@46| (TSeq Tclass.BucketsLib.Bucket)))) (= (|BucketsLib.__default.MapsOfBucketList#requires| $ly@@819 |blist#0@@46|) (forall ((|i#2@@23| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@23|) (< |i#2@@23| (|Seq#Length| |blist#0@@46|))) (BucketsLib.__default.PreWFBucket ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@46| |i#2@@23|)))) :qid |BucketsLibidfy.731:19| :skolemid |5046| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@46| |i#2@@23|))) )))) :qid |BucketsLibidfy.730:22| :skolemid |5047| :pattern ( (|BucketsLib.__default.MapsOfBucketList#requires| $ly@@819 |blist#0@@46|) ($IsGoodHeap $Heap@@132)) )))
(assert (forall ((arg0@@760 T@U) ) (! (= (type (|lambda#376| arg0@@760)) (MapType2Type (MapType0Type refType MapType1Type) BoxType BoxType)) :qid |funType:lambda#376| :pattern ( (|lambda#376| arg0@@760)) )))
(assert  (=> true (forall (($ly@@820 T@U) ($Heap@@133 T@U) (|blist#0@@47| T@U) ) (!  (=> (and (and (and (= (type $ly@@820) LayerTypeType) (= (type $Heap@@133) (MapType0Type refType MapType1Type))) (= (type |blist#0@@47|) (SeqType BoxType))) (or (|BucketsLib.__default.MapsOfBucketList#canCall| |blist#0@@47|) (and (and ($IsGoodHeap $Heap@@133) ($Is |blist#0@@47| (TSeq Tclass.BucketsLib.Bucket))) (forall ((|i#2@@24| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@24|) (< |i#2@@24| (|Seq#Length| |blist#0@@47|))) (BucketsLib.__default.PreWFBucket ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@47| |i#2@@24|)))) :qid |BucketsLibidfy.731:19| :skolemid |5046| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@47| |i#2@@24|))) ))))) (and (forall ((|$l#1#i#0@@0| Int) ) (!  (=> (and (<= (LitInt 0) |$l#1#i#0@@0|) (< |$l#1#i#0@@0| (|Seq#Length| |blist#0@@47|))) (|BucketsLib.Bucket.as__map#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@47| |$l#1#i#0@@0|)))) :qid |unknown.0:0| :skolemid |5048| )) (= (BucketsLib.__default.MapsOfBucketList ($LS $ly@@820) |blist#0@@47|) (|Seq#Create| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@@133 (|Seq#Length| |blist#0@@47|) (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#376| |blist#0@@47|) (|lambda#161| TInt (LitInt 0) (|Seq#Length| |blist#0@@47|)) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) $ly@@820)))))) :qid |BucketsLibidfy.730:22| :skolemid |5049| :pattern ( (BucketsLib.__default.MapsOfBucketList ($LS $ly@@820) |blist#0@@47|) ($IsGoodHeap $Heap@@133)) ))))
(assert  (=> true (forall (($ly@@821 T@U) ($Heap@@134 T@U) (|blist#0@@48| T@U) ) (!  (=> (and (and (and (= (type $ly@@821) LayerTypeType) (= (type $Heap@@134) (MapType0Type refType MapType1Type))) (= (type |blist#0@@48|) (SeqType BoxType))) (or (|BucketsLib.__default.MapsOfBucketList#canCall| (Lit |blist#0@@48|)) (and (and ($IsGoodHeap $Heap@@134) ($Is |blist#0@@48| (TSeq Tclass.BucketsLib.Bucket))) (forall ((|i#3@@16| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@16|) (< |i#3@@16| (|Seq#Length| (Lit |blist#0@@48|)))) (BucketsLib.__default.PreWFBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@48|) |i#3@@16|)))) :qid |BucketsLibidfy.731:19| :skolemid |5050| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |blist#0@@48| |i#3@@16|))) ))))) (and (forall ((|$l#3#i#0@@0| Int) ) (!  (=> (and (<= (LitInt 0) |$l#3#i#0@@0|) (< |$l#3#i#0@@0| (|Seq#Length| (Lit |blist#0@@48|)))) (|BucketsLib.Bucket.as__map#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |blist#0@@48|) |$l#3#i#0@@0|)))) :qid |unknown.0:0| :skolemid |5051| )) (= (BucketsLib.__default.MapsOfBucketList ($LS $ly@@821) (Lit |blist#0@@48|)) (|Seq#Create| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@@134 (|Seq#Length| (Lit |blist#0@@48|)) (Lit (AtLayer (|lambda#164| (Handle1 (|lambda#376| (Lit |blist#0@@48|)) (|lambda#161| TInt (LitInt 0) (|Seq#Length| (Lit |blist#0@@48|))) (|lambda#163| (SetRef_to_SetBox (|lambda#162| false))))) ($LS $ly@@821))))))) :qid |BucketsLibidfy.730:22| :weight 3 :skolemid |5052| :pattern ( (BucketsLib.__default.MapsOfBucketList ($LS $ly@@821) (Lit |blist#0@@48|)) ($IsGoodHeap $Heap@@134)) ))))
(assert (= (type Tclass.Bounds.__default) TyType))
(assert (= (Tag Tclass.Bounds.__default) Tagclass.Bounds.__default))
(assert (= (TagFamily Tclass.Bounds.__default) tytagFamily$_default))
(assert (forall ((bx@@195 T@U) ) (!  (=> (and (= (type bx@@195) BoxType) ($IsBox bx@@195 Tclass.Bounds.__default)) (and (= ($Box ($Unbox refType bx@@195)) bx@@195) ($Is ($Unbox refType bx@@195) Tclass.Bounds.__default))) :qid |unknown.0:0| :skolemid |5053| :pattern ( ($IsBox bx@@195 Tclass.Bounds.__default)) )))
(assert (forall (($o@@74 T@U) ) (!  (=> (= (type $o@@74) refType) (= ($Is $o@@74 Tclass.Bounds.__default)  (or (= $o@@74 null) (= (dtype $o@@74) Tclass.Bounds.__default)))) :qid |unknown.0:0| :skolemid |5054| :pattern ( ($Is $o@@74 Tclass.Bounds.__default)) )))
(assert (forall (($o@@75 T@U) ($h@@180 T@U) ) (!  (=> (and (= (type $o@@75) refType) (= (type $h@@180) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@75 Tclass.Bounds.__default $h@@180)  (or (= $o@@75 null) (U_2_bool (MapType1Select (MapType0Select $h@@180 $o@@75) alloc))))) :qid |unknown.0:0| :skolemid |5055| :pattern ( ($IsAlloc $o@@75 Tclass.Bounds.__default $h@@180)) )))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.NodeBlockSizeUint64) (< Bounds.__default.NodeBlockSizeUint64 18446744073709551616)))))
(assert (= |Bounds.__default.NodeBlockSizeUint64#requires| true))
(assert  (=> true (=> true (= Bounds.__default.NodeBlockSizeUint64 (LitInt (Mul (LitInt (Mul (LitInt 2) (LitInt 1024))) (LitInt 1024)))))))
(assert  (=> true (=> true (= Bounds.__default.NodeBlockSizeUint64 (LitInt (Mul (LitInt (Mul (LitInt 2) (LitInt 1024))) (LitInt 1024)))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.MinNodeBlockIndexUint64) (< Bounds.__default.MinNodeBlockIndexUint64 18446744073709551616)))))
(assert (= |Bounds.__default.MinNodeBlockIndexUint64#requires| true))
(assert  (=> true (=> true (and (and (and (and (and |Bounds.__default.SuperblockSizeUint64#canCall| (and |Bounds.__default.DiskNumJournalBlocksUint64#canCall| |Bounds.__default.JournalBlockSizeUint64#canCall|)) |Bounds.__default.IndirectionTableBlockSizeUint64#canCall|) |Bounds.__default.NodeBlockSizeUint64#canCall|) |Bounds.__default.NodeBlockSizeUint64#canCall|) (= Bounds.__default.MinNodeBlockIndexUint64 (LitInt (Div (- (+ (+ (+ (Mul (LitInt 2) (LitInt Bounds.__default.SuperblockSizeUint64)) (Mul (LitInt Bounds.__default.DiskNumJournalBlocksUint64) (LitInt Bounds.__default.JournalBlockSizeUint64))) (Mul (LitInt 2) (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))) Bounds.__default.NodeBlockSizeUint64) 1) (LitInt Bounds.__default.NodeBlockSizeUint64))))))))
(assert  (=> true (=> true (and (and (and (and (and |Bounds.__default.SuperblockSizeUint64#canCall| (and |Bounds.__default.DiskNumJournalBlocksUint64#canCall| |Bounds.__default.JournalBlockSizeUint64#canCall|)) |Bounds.__default.IndirectionTableBlockSizeUint64#canCall|) |Bounds.__default.NodeBlockSizeUint64#canCall|) |Bounds.__default.NodeBlockSizeUint64#canCall|) (= Bounds.__default.MinNodeBlockIndexUint64 (LitInt (Div (- (+ (+ (+ (Mul (LitInt 2) (LitInt Bounds.__default.SuperblockSizeUint64)) (Mul (LitInt Bounds.__default.DiskNumJournalBlocksUint64) (LitInt Bounds.__default.JournalBlockSizeUint64))) (Mul (LitInt 2) (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))) Bounds.__default.NodeBlockSizeUint64) 1) (LitInt Bounds.__default.NodeBlockSizeUint64))))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.SuperblockSizeUint64) (< Bounds.__default.SuperblockSizeUint64 18446744073709551616)))))
(assert (= |Bounds.__default.SuperblockSizeUint64#requires| true))
(assert  (=> true (=> true (= Bounds.__default.SuperblockSizeUint64 (LitInt 4096)))))
(assert  (=> true (=> true (= Bounds.__default.SuperblockSizeUint64 (LitInt 4096)))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.JournalBlockSizeUint64) (< Bounds.__default.JournalBlockSizeUint64 18446744073709551616)))))
(assert (= |Bounds.__default.JournalBlockSizeUint64#requires| true))
(assert  (=> true (=> true (= Bounds.__default.JournalBlockSizeUint64 (LitInt 4096)))))
(assert  (=> true (=> true (= Bounds.__default.JournalBlockSizeUint64 (LitInt 4096)))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.DiskNumJournalBlocksUint64) (< Bounds.__default.DiskNumJournalBlocksUint64 18446744073709551616)))))
(assert (= |Bounds.__default.DiskNumJournalBlocksUint64#requires| true))
(assert  (=> true (=> true (= Bounds.__default.DiskNumJournalBlocksUint64 (LitInt (Mul (LitInt 64) (LitInt 1024)))))))
(assert  (=> true (=> true (= Bounds.__default.DiskNumJournalBlocksUint64 (LitInt (Mul (LitInt 64) (LitInt 1024)))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.IndirectionTableBlockSizeUint64) (< Bounds.__default.IndirectionTableBlockSizeUint64 18446744073709551616)))))
(assert (= |Bounds.__default.IndirectionTableBlockSizeUint64#requires| true))
(assert  (=> true (=> true (= Bounds.__default.IndirectionTableBlockSizeUint64 (LitInt (Mul (LitInt (Mul (LitInt 24) (LitInt 1024))) (LitInt 1024)))))))
(assert  (=> true (=> true (= Bounds.__default.IndirectionTableBlockSizeUint64 (LitInt (Mul (LitInt (Mul (LitInt 24) (LitInt 1024))) (LitInt 1024)))))))
(assert  (=> true (=> true (and (and (<= (LitInt Bounds.__default.IndirectionTableBlockSizeUint64) Bounds.__default.LargestBlockSizeOfAnyTypeUint64) (<= (LitInt Bounds.__default.NodeBlockSizeUint64) Bounds.__default.LargestBlockSizeOfAnyTypeUint64)) (and (<= (LitInt 0) Bounds.__default.LargestBlockSizeOfAnyTypeUint64) (< Bounds.__default.LargestBlockSizeOfAnyTypeUint64 18446744073709551616))))))
(assert (= |Bounds.__default.LargestBlockSizeOfAnyTypeUint64#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| (= Bounds.__default.LargestBlockSizeOfAnyTypeUint64 (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| (= Bounds.__default.LargestBlockSizeOfAnyTypeUint64 (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.MaxTotalBucketWeightUint64) (< Bounds.__default.MaxTotalBucketWeightUint64 18446744073709551616)))))
(assert (= |Bounds.__default.MaxTotalBucketWeightUint64#requires| true))
(assert  (=> true (=> true (= Bounds.__default.MaxTotalBucketWeightUint64 (LitInt (- (Mul (LitInt (Mul (LitInt 2) (LitInt 1024))) (LitInt 1024)) 65536))))))
(assert  (=> true (=> true (= Bounds.__default.MaxTotalBucketWeightUint64 (LitInt (- (Mul (LitInt (Mul (LitInt 2) (LitInt 1024))) (LitInt 1024)) 65536))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.MaxCacheSizeUint64) (< Bounds.__default.MaxCacheSizeUint64 18446744073709551616)))))
(assert (= |Bounds.__default.MaxCacheSizeUint64#requires| true))
(assert  (=> true (=> true (= Bounds.__default.MaxCacheSizeUint64 (LitInt 100)))))
(assert  (=> true (=> true (= Bounds.__default.MaxCacheSizeUint64 (LitInt 100)))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.MaxNumChildrenUint64) (< Bounds.__default.MaxNumChildrenUint64 18446744073709551616)))))
(assert (= |Bounds.__default.MaxNumChildrenUint64#requires| true))
(assert  (=> true (=> true (= Bounds.__default.MaxNumChildrenUint64 (LitInt 8)))))
(assert  (=> true (=> true (= Bounds.__default.MaxNumChildrenUint64 (LitInt 8)))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.FlushTriggerWeightUint64) (< Bounds.__default.FlushTriggerWeightUint64 18446744073709551616)))))
(assert (= |Bounds.__default.FlushTriggerWeightUint64#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.MaxTotalBucketWeightUint64#canCall| (= Bounds.__default.FlushTriggerWeightUint64 (LitInt (Div Bounds.__default.MaxTotalBucketWeightUint64 (LitInt 8))))))))
(assert  (=> true (=> true (and |Bounds.__default.MaxTotalBucketWeightUint64#canCall| (= Bounds.__default.FlushTriggerWeightUint64 (LitInt (Div Bounds.__default.MaxTotalBucketWeightUint64 (LitInt 8))))))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.NumBlocksUint64) (< Bounds.__default.NumBlocksUint64 18446744073709551616)))))
(assert (= |Bounds.__default.NumBlocksUint64#requires| true))
(assert  (=> true (=> true (= Bounds.__default.NumBlocksUint64 (LitInt 1048576)))))
(assert  (=> true (=> true (= Bounds.__default.NumBlocksUint64 (LitInt 1048576)))))
(assert  (=> true (=> true (and (<= (LitInt 0) Bounds.__default.IndirectionTableMaxSizeUint64) (< Bounds.__default.IndirectionTableMaxSizeUint64 18446744073709551616)))))
(assert (= |Bounds.__default.IndirectionTableMaxSizeUint64#requires| true))
(assert  (=> true (=> true (= Bounds.__default.IndirectionTableMaxSizeUint64 (LitInt 4294967296)))))
(assert  (=> true (=> true (= Bounds.__default.IndirectionTableMaxSizeUint64 (LitInt 4294967296)))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.SuperblockSize#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.SuperblockSizeUint64#canCall| (= Bounds.__default.SuperblockSize (LitInt Bounds.__default.SuperblockSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.SuperblockSizeUint64#canCall| (= Bounds.__default.SuperblockSize (LitInt Bounds.__default.SuperblockSizeUint64))))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.IndirectionTableBlockSize#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| (= Bounds.__default.IndirectionTableBlockSize (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableBlockSizeUint64#canCall| (= Bounds.__default.IndirectionTableBlockSize (LitInt Bounds.__default.IndirectionTableBlockSizeUint64))))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.NodeBlockSize#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.NodeBlockSizeUint64#canCall| (= Bounds.__default.NodeBlockSize (LitInt Bounds.__default.NodeBlockSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.NodeBlockSizeUint64#canCall| (= Bounds.__default.NodeBlockSize (LitInt Bounds.__default.NodeBlockSizeUint64))))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.MinNodeBlockIndex#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.MinNodeBlockIndexUint64#canCall| (= Bounds.__default.MinNodeBlockIndex (LitInt Bounds.__default.MinNodeBlockIndexUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.MinNodeBlockIndexUint64#canCall| (= Bounds.__default.MinNodeBlockIndex (LitInt Bounds.__default.MinNodeBlockIndexUint64))))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.MaxNumChildren#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.MaxNumChildrenUint64#canCall| (= Bounds.__default.MaxNumChildren (LitInt Bounds.__default.MaxNumChildrenUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.MaxNumChildrenUint64#canCall| (= Bounds.__default.MaxNumChildren (LitInt Bounds.__default.MaxNumChildrenUint64))))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.MaxTotalBucketWeight#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.MaxTotalBucketWeightUint64#canCall| (= Bounds.__default.MaxTotalBucketWeight (LitInt Bounds.__default.MaxTotalBucketWeightUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.MaxTotalBucketWeightUint64#canCall| (= Bounds.__default.MaxTotalBucketWeight (LitInt Bounds.__default.MaxTotalBucketWeightUint64))))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.MaxCacheSize#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.MaxCacheSizeUint64#canCall| (= Bounds.__default.MaxCacheSize (LitInt Bounds.__default.MaxCacheSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.MaxCacheSizeUint64#canCall| (= Bounds.__default.MaxCacheSize (LitInt Bounds.__default.MaxCacheSizeUint64))))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.FlushTriggerWeight#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.FlushTriggerWeightUint64#canCall| (= Bounds.__default.FlushTriggerWeight (LitInt Bounds.__default.FlushTriggerWeightUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.FlushTriggerWeightUint64#canCall| (= Bounds.__default.FlushTriggerWeight (LitInt Bounds.__default.FlushTriggerWeightUint64))))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.NumBlocks#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.NumBlocksUint64#canCall| (= Bounds.__default.NumBlocks (LitInt Bounds.__default.NumBlocksUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.NumBlocksUint64#canCall| (= Bounds.__default.NumBlocks (LitInt Bounds.__default.NumBlocksUint64))))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.IndirectionTableMaxSize#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableMaxSizeUint64#canCall| (= Bounds.__default.IndirectionTableMaxSize (LitInt Bounds.__default.IndirectionTableMaxSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.IndirectionTableMaxSizeUint64#canCall| (= Bounds.__default.IndirectionTableMaxSize (LitInt Bounds.__default.IndirectionTableMaxSizeUint64))))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.JournalBlockSize#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.JournalBlockSizeUint64#canCall| (= Bounds.__default.JournalBlockSize (LitInt Bounds.__default.JournalBlockSizeUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.JournalBlockSizeUint64#canCall| (= Bounds.__default.JournalBlockSize (LitInt Bounds.__default.JournalBlockSizeUint64))))))
(assert  (=> true (=> true true)))
(assert (= |Bounds.__default.DiskNumJournalBlocks#requires| true))
(assert  (=> true (=> true (and |Bounds.__default.DiskNumJournalBlocksUint64#canCall| (= Bounds.__default.DiskNumJournalBlocks (LitInt Bounds.__default.DiskNumJournalBlocksUint64))))))
(assert  (=> true (=> true (and |Bounds.__default.DiskNumJournalBlocksUint64#canCall| (= Bounds.__default.DiskNumJournalBlocks (LitInt Bounds.__default.DiskNumJournalBlocksUint64))))))
(assert (= (type Tclass.BucketWeights.__default) TyType))
(assert (= (Tag Tclass.BucketWeights.__default) Tagclass.BucketWeights.__default))
(assert (= (TagFamily Tclass.BucketWeights.__default) tytagFamily$_default))
(assert (forall ((bx@@196 T@U) ) (!  (=> (and (= (type bx@@196) BoxType) ($IsBox bx@@196 Tclass.BucketWeights.__default)) (and (= ($Box ($Unbox refType bx@@196)) bx@@196) ($Is ($Unbox refType bx@@196) Tclass.BucketWeights.__default))) :qid |unknown.0:0| :skolemid |5056| :pattern ( ($IsBox bx@@196 Tclass.BucketWeights.__default)) )))
(assert (forall (($o@@76 T@U) ) (!  (=> (= (type $o@@76) refType) (= ($Is $o@@76 Tclass.BucketWeights.__default)  (or (= $o@@76 null) (= (dtype $o@@76) Tclass.BucketWeights.__default)))) :qid |unknown.0:0| :skolemid |5057| :pattern ( ($Is $o@@76 Tclass.BucketWeights.__default)) )))
(assert (forall (($o@@77 T@U) ($h@@181 T@U) ) (!  (=> (and (= (type $o@@77) refType) (= (type $h@@181) (MapType0Type refType MapType1Type))) (= ($IsAlloc $o@@77 Tclass.BucketWeights.__default $h@@181)  (or (= $o@@77 null) (U_2_bool (MapType1Select (MapType0Select $h@@181 $o@@77) alloc))))) :qid |unknown.0:0| :skolemid |5058| :pattern ( ($IsAlloc $o@@77 Tclass.BucketWeights.__default $h@@181)) )))
(assert  (=> true (forall ((|key#0@@248| T@U) ) (!  (=> (and (= (type |key#0@@248|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightKey#canCall| |key#0@@248|) ($Is |key#0@@248| Tclass.KeyType.Key))) (and (>= (BucketWeights.__default.WeightKey |key#0@@248|) (LitInt 0)) (<= (LitInt 0) (BucketWeights.__default.WeightKey |key#0@@248|)))) :qid |BucketWeightsidfy.36:22| :skolemid |5059| :pattern ( (BucketWeights.__default.WeightKey |key#0@@248|)) ))))
(assert (forall ((|key#0@@249| T@U) ) (!  (=> (and (= (type |key#0@@249|) (SeqType BoxType)) ($Is |key#0@@249| Tclass.KeyType.Key)) (= (|BucketWeights.__default.WeightKey#requires| |key#0@@249|) true)) :qid |BucketWeightsidfy.36:22| :skolemid |5060| :pattern ( (|BucketWeights.__default.WeightKey#requires| |key#0@@249|)) )))
(assert  (=> true (forall ((|key#0@@250| T@U) ) (!  (=> (and (= (type |key#0@@250|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightKey#canCall| |key#0@@250|) ($Is |key#0@@250| Tclass.KeyType.Key))) (= (BucketWeights.__default.WeightKey |key#0@@250|) (+ 4 (|Seq#Length| |key#0@@250|)))) :qid |BucketWeightsidfy.36:22| :skolemid |5061| :pattern ( (BucketWeights.__default.WeightKey |key#0@@250|)) ))))
(assert  (=> true (forall ((|key#0@@251| T@U) ) (!  (=> (and (= (type |key#0@@251|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightKey#canCall| (Lit |key#0@@251|)) ($Is |key#0@@251| Tclass.KeyType.Key))) (= (BucketWeights.__default.WeightKey (Lit |key#0@@251|)) (+ 4 (|Seq#Length| (Lit |key#0@@251|))))) :qid |BucketWeightsidfy.36:22| :weight 3 :skolemid |5062| :pattern ( (BucketWeights.__default.WeightKey (Lit |key#0@@251|))) ))))
(assert  (=> true (forall ((|msg#0@@21| T@U) ) (!  (=> (and (= (type |msg#0@@21|) DatatypeTypeType) (or (|BucketWeights.__default.WeightMessage#canCall| |msg#0@@21|) ($Is |msg#0@@21| Tclass.ValueMessage.Message))) (and (>= (BucketWeights.__default.WeightMessage |msg#0@@21|) (LitInt 0)) (<= (LitInt 0) (BucketWeights.__default.WeightMessage |msg#0@@21|)))) :qid |BucketWeightsidfy.42:26| :skolemid |5063| :pattern ( (BucketWeights.__default.WeightMessage |msg#0@@21|)) ))))
(assert (forall ((|msg#0@@22| T@U) ) (!  (=> (and (= (type |msg#0@@22|) DatatypeTypeType) ($Is |msg#0@@22| Tclass.ValueMessage.Message)) (= (|BucketWeights.__default.WeightMessage#requires| |msg#0@@22|) true)) :qid |BucketWeightsidfy.42:26| :skolemid |5064| :pattern ( (|BucketWeights.__default.WeightMessage#requires| |msg#0@@22|)) )))
(assert  (=> true (forall ((|msg#0@@23| T@U) ) (!  (=> (and (= (type |msg#0@@23|) DatatypeTypeType) (or (|BucketWeights.__default.WeightMessage#canCall| |msg#0@@23|) ($Is |msg#0@@23| Tclass.ValueMessage.Message))) (and (=> (ValueMessage.Message.Define_q |msg#0@@23|) (let ((|value#1@@0| (ValueMessage.Message.value |msg#0@@23|))) (|ValueType.__default.Len#canCall| |value#1@@0|))) (= (BucketWeights.__default.WeightMessage |msg#0@@23|) (ite (ValueMessage.Message.Define_q |msg#0@@23|) (let ((|value#0@@4| (ValueMessage.Message.value |msg#0@@23|))) (+ 4 (ValueType.__default.Len |value#0@@4|))) (LitInt 0))))) :qid |BucketWeightsidfy.42:26| :skolemid |5065| :pattern ( (BucketWeights.__default.WeightMessage |msg#0@@23|)) ))))
(assert  (=> true (forall ((|msg#0@@24| T@U) ) (!  (=> (and (= (type |msg#0@@24|) DatatypeTypeType) (or (|BucketWeights.__default.WeightMessage#canCall| (Lit |msg#0@@24|)) ($Is |msg#0@@24| Tclass.ValueMessage.Message))) (and (=> (U_2_bool (Lit (bool_2_U (ValueMessage.Message.Define_q (Lit |msg#0@@24|))))) (let ((|value#3@@0| (Lit (ValueMessage.Message.value (Lit |msg#0@@24|))))) (|ValueType.__default.Len#canCall| |value#3@@0|))) (= (BucketWeights.__default.WeightMessage (Lit |msg#0@@24|)) (ite (ValueMessage.Message.Define_q (Lit |msg#0@@24|)) (let ((|value#2@@0| (Lit (ValueMessage.Message.value (Lit |msg#0@@24|))))) (LitInt (+ 4 (ValueType.__default.Len |value#2@@0|)))) (LitInt 0))))) :qid |BucketWeightsidfy.42:26| :weight 3 :skolemid |5066| :pattern ( (BucketWeights.__default.WeightMessage (Lit |msg#0@@24|))) ))))
(assert (forall (($ly@@822 T@U) (|keys#0@@29| T@U) ) (!  (=> (and (= (type $ly@@822) LayerTypeType) (= (type |keys#0@@29|) (MapType0Type BoxType intType))) (= (BucketWeights.__default.WeightKeyMultiset ($LS $ly@@822) |keys#0@@29|) (BucketWeights.__default.WeightKeyMultiset $ly@@822 |keys#0@@29|))) :qid |BucketWeightsidfy.51:22| :skolemid |5067| :pattern ( (BucketWeights.__default.WeightKeyMultiset ($LS $ly@@822) |keys#0@@29|)) )))
(assert (forall (($ly@@823 T@U) (|keys#0@@30| T@U) ) (!  (=> (and (= (type $ly@@823) LayerTypeType) (= (type |keys#0@@30|) (MapType0Type BoxType intType))) (= (BucketWeights.__default.WeightKeyMultiset $ly@@823 |keys#0@@30|) (BucketWeights.__default.WeightKeyMultiset $LZ |keys#0@@30|))) :qid |BucketWeightsidfy.51:22| :skolemid |5068| :pattern ( (BucketWeights.__default.WeightKeyMultiset (AsFuelBottom $ly@@823) |keys#0@@30|)) )))
(assert  (=> true (forall (($ly@@824 T@U) (|keys#0@@31| T@U) ) (!  (=> (and (and (= (type $ly@@824) LayerTypeType) (= (type |keys#0@@31|) (MapType0Type BoxType intType))) (or (|BucketWeights.__default.WeightKeyMultiset#canCall| |keys#0@@31|) ($Is |keys#0@@31| (TMultiSet Tclass.KeyType.Key)))) (and (=> (= (|MultiSet#Card| |keys#0@@31|) (LitInt 0)) (= (BucketWeights.__default.WeightKeyMultiset $ly@@824 |keys#0@@31|) (LitInt 0))) (<= (LitInt 0) (BucketWeights.__default.WeightKeyMultiset $ly@@824 |keys#0@@31|)))) :qid |BucketWeightsidfy.51:22| :skolemid |5069| :pattern ( (BucketWeights.__default.WeightKeyMultiset $ly@@824 |keys#0@@31|)) ))))
(assert (forall (($ly@@825 T@U) ($Heap@@135 T@U) (|keys#0@@32| T@U) ) (!  (=> (and (and (and (= (type $ly@@825) LayerTypeType) (= (type $Heap@@135) (MapType0Type refType MapType1Type))) (= (type |keys#0@@32|) (MapType0Type BoxType intType))) (and ($IsGoodHeap $Heap@@135) ($Is |keys#0@@32| (TMultiSet Tclass.KeyType.Key)))) (= (|BucketWeights.__default.WeightKeyMultiset#requires| $ly@@825 |keys#0@@32|) true)) :qid |BucketWeightsidfy.51:22| :skolemid |5070| :pattern ( (|BucketWeights.__default.WeightKeyMultiset#requires| $ly@@825 |keys#0@@32|) ($IsGoodHeap $Heap@@135)) )))
(assert (= (type |BucketWeights.__default.WeightKey#Handle|) HandleTypeType))
(assert (forall (($heap T@U) (|$fh$0x#0| T@U) ) (!  (=> (and (= (type $heap) (MapType0Type refType MapType1Type)) (= (type |$fh$0x#0|) BoxType)) (= (Apply1 Tclass.KeyType.Key Tclass._System.nat $heap |BucketWeights.__default.WeightKey#Handle| |$fh$0x#0|) ($Box (int_2_U (BucketWeights.__default.WeightKey ($Unbox (SeqType BoxType) |$fh$0x#0|)))))) :qid |DafnyPreludebpl.545:12| :skolemid |5071| :pattern ( (Apply1 Tclass.KeyType.Key Tclass._System.nat $heap |BucketWeights.__default.WeightKey#Handle| |$fh$0x#0|)) )))
(assert (forall (($heap@@0 T@U) (|$fh$0x#0@@0| T@U) ) (!  (=> (and (= (type $heap@@0) (MapType0Type refType MapType1Type)) (= (type |$fh$0x#0@@0|) BoxType)) (= (Requires1 Tclass.KeyType.Key Tclass._System.nat $heap@@0 |BucketWeights.__default.WeightKey#Handle| |$fh$0x#0@@0|) (|BucketWeights.__default.WeightKey#requires| ($Unbox (SeqType BoxType) |$fh$0x#0@@0|)))) :qid |DafnyPreludebpl.545:12| :skolemid |5072| :pattern ( (Requires1 Tclass.KeyType.Key Tclass._System.nat $heap@@0 |BucketWeights.__default.WeightKey#Handle| |$fh$0x#0@@0|)) )))
(assert (forall (($bx T@U) ($heap@@1 T@U) (|$fh$0x#0@@1| T@U) ) (!  (=> (and (and (= (type $bx) BoxType) (= (type $heap@@1) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0@@1|) BoxType)) (= (U_2_bool (MapType0Select (Reads1 Tclass.KeyType.Key Tclass._System.nat $heap@@1 |BucketWeights.__default.WeightKey#Handle| |$fh$0x#0@@1|) $bx)) false)) :qid |unknown.0:0| :skolemid |5073| :pattern ( (MapType0Select (Reads1 Tclass.KeyType.Key Tclass._System.nat $heap@@1 |BucketWeights.__default.WeightKey#Handle| |$fh$0x#0@@1|) $bx)) )))
(assert (forall (($heap@@2 T@U) (|$fh$0x#0@@2| T@U) ) (!  (=> (and (= (type $heap@@2) (MapType0Type refType MapType1Type)) (= (type |$fh$0x#0@@2|) (SeqType BoxType))) (= (BucketWeights.__default.WeightKey |$fh$0x#0@@2|) (U_2_int ($Unbox intType (Apply1 Tclass.KeyType.Key Tclass._System.nat $heap@@2 |BucketWeights.__default.WeightKey#Handle| ($Box |$fh$0x#0@@2|)))))) :qid |DafnyPreludebpl.545:12| :skolemid |5074| :pattern ( (BucketWeights.__default.WeightKey |$fh$0x#0@@2|) ($IsGoodHeap $heap@@2)) )))
(assert (= (type |Multisets.__default.AddNat#Handle|) HandleTypeType))
(assert (forall (($heap@@3 T@U) (|$fh$0x#0@@3| T@U) (|$fh$0x#1| T@U) ) (!  (=> (and (and (= (type $heap@@3) (MapType0Type refType MapType1Type)) (= (type |$fh$0x#0@@3|) BoxType)) (= (type |$fh$0x#1|) BoxType)) (= (Apply2 Tclass._System.nat Tclass._System.nat Tclass._System.nat $heap@@3 |Multisets.__default.AddNat#Handle| |$fh$0x#0@@3| |$fh$0x#1|) ($Box (int_2_U (Multisets.__default.AddNat (U_2_int ($Unbox intType |$fh$0x#0@@3|)) (U_2_int ($Unbox intType |$fh$0x#1|))))))) :qid |DafnyPreludebpl.545:12| :skolemid |5075| :pattern ( (Apply2 Tclass._System.nat Tclass._System.nat Tclass._System.nat $heap@@3 |Multisets.__default.AddNat#Handle| |$fh$0x#0@@3| |$fh$0x#1|)) )))
(assert (forall (($heap@@4 T@U) (|$fh$0x#0@@4| T@U) (|$fh$0x#1@@0| T@U) ) (!  (=> (and (and (= (type $heap@@4) (MapType0Type refType MapType1Type)) (= (type |$fh$0x#0@@4|) BoxType)) (= (type |$fh$0x#1@@0|) BoxType)) (= (Requires2 Tclass._System.nat Tclass._System.nat Tclass._System.nat $heap@@4 |Multisets.__default.AddNat#Handle| |$fh$0x#0@@4| |$fh$0x#1@@0|) (|Multisets.__default.AddNat#requires| (U_2_int ($Unbox intType |$fh$0x#0@@4|)) (U_2_int ($Unbox intType |$fh$0x#1@@0|))))) :qid |DafnyPreludebpl.545:12| :skolemid |5076| :pattern ( (Requires2 Tclass._System.nat Tclass._System.nat Tclass._System.nat $heap@@4 |Multisets.__default.AddNat#Handle| |$fh$0x#0@@4| |$fh$0x#1@@0|)) )))
(assert (forall (($bx@@0 T@U) ($heap@@5 T@U) (|$fh$0x#0@@5| T@U) (|$fh$0x#1@@1| T@U) ) (!  (=> (and (and (and (= (type $bx@@0) BoxType) (= (type $heap@@5) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0@@5|) BoxType)) (= (type |$fh$0x#1@@1|) BoxType)) (= (U_2_bool (MapType0Select (Reads2 Tclass._System.nat Tclass._System.nat Tclass._System.nat $heap@@5 |Multisets.__default.AddNat#Handle| |$fh$0x#0@@5| |$fh$0x#1@@1|) $bx@@0)) false)) :qid |unknown.0:0| :skolemid |5077| :pattern ( (MapType0Select (Reads2 Tclass._System.nat Tclass._System.nat Tclass._System.nat $heap@@5 |Multisets.__default.AddNat#Handle| |$fh$0x#0@@5| |$fh$0x#1@@1|) $bx@@0)) )))
(assert (forall (($heap@@6 T@U) (|$fh$0x#0@@6| Int) (|$fh$0x#1@@2| Int) ) (!  (=> (= (type $heap@@6) (MapType0Type refType MapType1Type)) (= (Multisets.__default.AddNat |$fh$0x#0@@6| |$fh$0x#1@@2|) (U_2_int ($Unbox intType (Apply2 Tclass._System.nat Tclass._System.nat Tclass._System.nat $heap@@6 |Multisets.__default.AddNat#Handle| ($Box (int_2_U |$fh$0x#0@@6|)) ($Box (int_2_U |$fh$0x#1@@2|))))))) :qid |DafnyPreludebpl.545:12| :skolemid |5078| :pattern ( (Multisets.__default.AddNat |$fh$0x#0@@6| |$fh$0x#1@@2|) ($IsGoodHeap $heap@@6)) )))
(assert  (=> true (forall (($ly@@826 T@U) ($Heap@@136 T@U) (|keys#0@@33| T@U) ) (!  (=> (and (and (and (= (type $ly@@826) LayerTypeType) (= (type $Heap@@136) (MapType0Type refType MapType1Type))) (= (type |keys#0@@33|) (MapType0Type BoxType intType))) (or (|BucketWeights.__default.WeightKeyMultiset#canCall| |keys#0@@33|) (and ($IsGoodHeap $Heap@@136) ($Is |keys#0@@33| (TMultiSet Tclass.KeyType.Key))))) (and (and (|Multisets.__default.Apply#canCall| Tclass.KeyType.Key Tclass._System.nat $Heap@@136 |BucketWeights.__default.WeightKey#Handle| |keys#0@@33|) (let ((|weights#0| (Multisets.__default.Apply Tclass.KeyType.Key Tclass._System.nat StartFuel_Multisets._default.Apply $Heap@@136 |BucketWeights.__default.WeightKey#Handle| |keys#0@@33|))) (|Multisets.__default.FoldSimple#canCall| Tclass._System.nat ($Box (int_2_U (LitInt 0))) |Multisets.__default.AddNat#Handle| |weights#0|))) (= (BucketWeights.__default.WeightKeyMultiset ($LS $ly@@826) |keys#0@@33|) (U_2_int (let ((|weights#0@@0| (Multisets.__default.Apply Tclass.KeyType.Key Tclass._System.nat StartFuel_Multisets._default.Apply $Heap@@136 |BucketWeights.__default.WeightKey#Handle| |keys#0@@33|))) ($Unbox intType (Multisets.__default.FoldSimple Tclass._System.nat ($Box (int_2_U (LitInt 0))) |Multisets.__default.AddNat#Handle| |weights#0@@0|))))))) :qid |BucketWeightsidfy.51:22| :skolemid |5079| :pattern ( (BucketWeights.__default.WeightKeyMultiset ($LS $ly@@826) |keys#0@@33|) ($IsGoodHeap $Heap@@136)) ))))
(assert  (=> true (forall (($ly@@827 T@U) ($Heap@@137 T@U) (|keys#0@@34| T@U) ) (!  (=> (and (and (and (= (type $ly@@827) LayerTypeType) (= (type $Heap@@137) (MapType0Type refType MapType1Type))) (= (type |keys#0@@34|) (MapType0Type BoxType intType))) (or (|BucketWeights.__default.WeightKeyMultiset#canCall| (Lit |keys#0@@34|)) (and ($IsGoodHeap $Heap@@137) ($Is |keys#0@@34| (TMultiSet Tclass.KeyType.Key))))) (and (and (|Multisets.__default.Apply#canCall| Tclass.KeyType.Key Tclass._System.nat $Heap@@137 |BucketWeights.__default.WeightKey#Handle| (Lit |keys#0@@34|)) (let ((|weights#1| (Multisets.__default.Apply Tclass.KeyType.Key Tclass._System.nat StartFuel_Multisets._default.Apply $Heap@@137 |BucketWeights.__default.WeightKey#Handle| (Lit |keys#0@@34|)))) (|Multisets.__default.FoldSimple#canCall| Tclass._System.nat ($Box (int_2_U (LitInt 0))) |Multisets.__default.AddNat#Handle| |weights#1|))) (= (BucketWeights.__default.WeightKeyMultiset ($LS $ly@@827) (Lit |keys#0@@34|)) (U_2_int (let ((|weights#1@@0| (Multisets.__default.Apply Tclass.KeyType.Key Tclass._System.nat StartFuel_Multisets._default.Apply $Heap@@137 |BucketWeights.__default.WeightKey#Handle| (Lit |keys#0@@34|)))) ($Unbox intType (Multisets.__default.FoldSimple Tclass._System.nat ($Box (int_2_U (LitInt 0))) |Multisets.__default.AddNat#Handle| |weights#1@@0|))))))) :qid |BucketWeightsidfy.51:22| :weight 3 :skolemid |5080| :pattern ( (BucketWeights.__default.WeightKeyMultiset ($LS $ly@@827) (Lit |keys#0@@34|)) ($IsGoodHeap $Heap@@137)) ))))
(assert (forall (($ly@@828 T@U) (|msgs#0@@13| T@U) ) (!  (=> (and (= (type $ly@@828) LayerTypeType) (= (type |msgs#0@@13|) (MapType0Type BoxType intType))) (= (BucketWeights.__default.WeightMessageMultiset ($LS $ly@@828) |msgs#0@@13|) (BucketWeights.__default.WeightMessageMultiset $ly@@828 |msgs#0@@13|))) :qid |BucketWeightsidfy.59:22| :skolemid |5081| :pattern ( (BucketWeights.__default.WeightMessageMultiset ($LS $ly@@828) |msgs#0@@13|)) )))
(assert (forall (($ly@@829 T@U) (|msgs#0@@14| T@U) ) (!  (=> (and (= (type $ly@@829) LayerTypeType) (= (type |msgs#0@@14|) (MapType0Type BoxType intType))) (= (BucketWeights.__default.WeightMessageMultiset $ly@@829 |msgs#0@@14|) (BucketWeights.__default.WeightMessageMultiset $LZ |msgs#0@@14|))) :qid |BucketWeightsidfy.59:22| :skolemid |5082| :pattern ( (BucketWeights.__default.WeightMessageMultiset (AsFuelBottom $ly@@829) |msgs#0@@14|)) )))
(assert  (=> true (forall (($ly@@830 T@U) (|msgs#0@@15| T@U) ) (!  (=> (and (and (= (type $ly@@830) LayerTypeType) (= (type |msgs#0@@15|) (MapType0Type BoxType intType))) (or (|BucketWeights.__default.WeightMessageMultiset#canCall| |msgs#0@@15|) ($Is |msgs#0@@15| (TMultiSet Tclass.ValueMessage.Message)))) (and (=> (= (|MultiSet#Card| |msgs#0@@15|) (LitInt 0)) (= (BucketWeights.__default.WeightMessageMultiset $ly@@830 |msgs#0@@15|) (LitInt 0))) (<= (LitInt 0) (BucketWeights.__default.WeightMessageMultiset $ly@@830 |msgs#0@@15|)))) :qid |BucketWeightsidfy.59:22| :skolemid |5083| :pattern ( (BucketWeights.__default.WeightMessageMultiset $ly@@830 |msgs#0@@15|)) ))))
(assert (forall (($ly@@831 T@U) ($Heap@@138 T@U) (|msgs#0@@16| T@U) ) (!  (=> (and (and (and (= (type $ly@@831) LayerTypeType) (= (type $Heap@@138) (MapType0Type refType MapType1Type))) (= (type |msgs#0@@16|) (MapType0Type BoxType intType))) (and ($IsGoodHeap $Heap@@138) ($Is |msgs#0@@16| (TMultiSet Tclass.ValueMessage.Message)))) (= (|BucketWeights.__default.WeightMessageMultiset#requires| $ly@@831 |msgs#0@@16|) true)) :qid |BucketWeightsidfy.59:22| :skolemid |5084| :pattern ( (|BucketWeights.__default.WeightMessageMultiset#requires| $ly@@831 |msgs#0@@16|) ($IsGoodHeap $Heap@@138)) )))
(assert (= (type |BucketWeights.__default.WeightMessage#Handle|) HandleTypeType))
(assert (forall (($heap@@7 T@U) (|$fh$0x#0@@7| T@U) ) (!  (=> (and (= (type $heap@@7) (MapType0Type refType MapType1Type)) (= (type |$fh$0x#0@@7|) BoxType)) (= (Apply1 Tclass.ValueMessage.Message Tclass._System.nat $heap@@7 |BucketWeights.__default.WeightMessage#Handle| |$fh$0x#0@@7|) ($Box (int_2_U (BucketWeights.__default.WeightMessage ($Unbox DatatypeTypeType |$fh$0x#0@@7|)))))) :qid |DafnyPreludebpl.545:12| :skolemid |5085| :pattern ( (Apply1 Tclass.ValueMessage.Message Tclass._System.nat $heap@@7 |BucketWeights.__default.WeightMessage#Handle| |$fh$0x#0@@7|)) )))
(assert (forall (($heap@@8 T@U) (|$fh$0x#0@@8| T@U) ) (!  (=> (and (= (type $heap@@8) (MapType0Type refType MapType1Type)) (= (type |$fh$0x#0@@8|) BoxType)) (= (Requires1 Tclass.ValueMessage.Message Tclass._System.nat $heap@@8 |BucketWeights.__default.WeightMessage#Handle| |$fh$0x#0@@8|) (|BucketWeights.__default.WeightMessage#requires| ($Unbox DatatypeTypeType |$fh$0x#0@@8|)))) :qid |DafnyPreludebpl.545:12| :skolemid |5086| :pattern ( (Requires1 Tclass.ValueMessage.Message Tclass._System.nat $heap@@8 |BucketWeights.__default.WeightMessage#Handle| |$fh$0x#0@@8|)) )))
(assert (forall (($bx@@1 T@U) ($heap@@9 T@U) (|$fh$0x#0@@9| T@U) ) (!  (=> (and (and (= (type $bx@@1) BoxType) (= (type $heap@@9) (MapType0Type refType MapType1Type))) (= (type |$fh$0x#0@@9|) BoxType)) (= (U_2_bool (MapType0Select (Reads1 Tclass.ValueMessage.Message Tclass._System.nat $heap@@9 |BucketWeights.__default.WeightMessage#Handle| |$fh$0x#0@@9|) $bx@@1)) false)) :qid |unknown.0:0| :skolemid |5087| :pattern ( (MapType0Select (Reads1 Tclass.ValueMessage.Message Tclass._System.nat $heap@@9 |BucketWeights.__default.WeightMessage#Handle| |$fh$0x#0@@9|) $bx@@1)) )))
(assert (forall (($heap@@10 T@U) (|$fh$0x#0@@10| T@U) ) (!  (=> (and (= (type $heap@@10) (MapType0Type refType MapType1Type)) (= (type |$fh$0x#0@@10|) DatatypeTypeType)) (= (BucketWeights.__default.WeightMessage |$fh$0x#0@@10|) (U_2_int ($Unbox intType (Apply1 Tclass.ValueMessage.Message Tclass._System.nat $heap@@10 |BucketWeights.__default.WeightMessage#Handle| ($Box |$fh$0x#0@@10|)))))) :qid |DafnyPreludebpl.545:12| :skolemid |5088| :pattern ( (BucketWeights.__default.WeightMessage |$fh$0x#0@@10|) ($IsGoodHeap $heap@@10)) )))
(assert  (=> true (forall (($ly@@832 T@U) ($Heap@@139 T@U) (|msgs#0@@17| T@U) ) (!  (=> (and (and (and (= (type $ly@@832) LayerTypeType) (= (type $Heap@@139) (MapType0Type refType MapType1Type))) (= (type |msgs#0@@17|) (MapType0Type BoxType intType))) (or (|BucketWeights.__default.WeightMessageMultiset#canCall| |msgs#0@@17|) (and ($IsGoodHeap $Heap@@139) ($Is |msgs#0@@17| (TMultiSet Tclass.ValueMessage.Message))))) (and (and (|Multisets.__default.Apply#canCall| Tclass.ValueMessage.Message Tclass._System.nat $Heap@@139 |BucketWeights.__default.WeightMessage#Handle| |msgs#0@@17|) (let ((|weights#0@@1| (Multisets.__default.Apply Tclass.ValueMessage.Message Tclass._System.nat StartFuel_Multisets._default.Apply $Heap@@139 |BucketWeights.__default.WeightMessage#Handle| |msgs#0@@17|))) (|Multisets.__default.FoldSimple#canCall| Tclass._System.nat ($Box (int_2_U (LitInt 0))) |Multisets.__default.AddNat#Handle| |weights#0@@1|))) (= (BucketWeights.__default.WeightMessageMultiset ($LS $ly@@832) |msgs#0@@17|) (U_2_int (let ((|weights#0@@2| (Multisets.__default.Apply Tclass.ValueMessage.Message Tclass._System.nat StartFuel_Multisets._default.Apply $Heap@@139 |BucketWeights.__default.WeightMessage#Handle| |msgs#0@@17|))) ($Unbox intType (Multisets.__default.FoldSimple Tclass._System.nat ($Box (int_2_U (LitInt 0))) |Multisets.__default.AddNat#Handle| |weights#0@@2|))))))) :qid |BucketWeightsidfy.59:22| :skolemid |5089| :pattern ( (BucketWeights.__default.WeightMessageMultiset ($LS $ly@@832) |msgs#0@@17|) ($IsGoodHeap $Heap@@139)) ))))
(assert  (=> true (forall (($ly@@833 T@U) ($Heap@@140 T@U) (|msgs#0@@18| T@U) ) (!  (=> (and (and (and (= (type $ly@@833) LayerTypeType) (= (type $Heap@@140) (MapType0Type refType MapType1Type))) (= (type |msgs#0@@18|) (MapType0Type BoxType intType))) (or (|BucketWeights.__default.WeightMessageMultiset#canCall| (Lit |msgs#0@@18|)) (and ($IsGoodHeap $Heap@@140) ($Is |msgs#0@@18| (TMultiSet Tclass.ValueMessage.Message))))) (and (and (|Multisets.__default.Apply#canCall| Tclass.ValueMessage.Message Tclass._System.nat $Heap@@140 |BucketWeights.__default.WeightMessage#Handle| (Lit |msgs#0@@18|)) (let ((|weights#1@@1| (Multisets.__default.Apply Tclass.ValueMessage.Message Tclass._System.nat StartFuel_Multisets._default.Apply $Heap@@140 |BucketWeights.__default.WeightMessage#Handle| (Lit |msgs#0@@18|)))) (|Multisets.__default.FoldSimple#canCall| Tclass._System.nat ($Box (int_2_U (LitInt 0))) |Multisets.__default.AddNat#Handle| |weights#1@@1|))) (= (BucketWeights.__default.WeightMessageMultiset ($LS $ly@@833) (Lit |msgs#0@@18|)) (U_2_int (let ((|weights#1@@2| (Multisets.__default.Apply Tclass.ValueMessage.Message Tclass._System.nat StartFuel_Multisets._default.Apply $Heap@@140 |BucketWeights.__default.WeightMessage#Handle| (Lit |msgs#0@@18|)))) ($Unbox intType (Multisets.__default.FoldSimple Tclass._System.nat ($Box (int_2_U (LitInt 0))) |Multisets.__default.AddNat#Handle| |weights#1@@2|))))))) :qid |BucketWeightsidfy.59:22| :weight 3 :skolemid |5090| :pattern ( (BucketWeights.__default.WeightMessageMultiset ($LS $ly@@833) (Lit |msgs#0@@18|)) ($IsGoodHeap $Heap@@140)) ))))
(assert  (=> true (forall ((|keys#0@@35| T@U) ) (!  (=> (and (= (type |keys#0@@35|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightKeyList#canCall| |keys#0@@35|) ($Is |keys#0@@35| (TSeq Tclass.KeyType.Key)))) (and (=> (= (|Seq#Length| |keys#0@@35|) (LitInt 0)) (= (BucketWeights.__default.WeightKeyList |keys#0@@35|) (LitInt 0))) (<= (LitInt 0) (BucketWeights.__default.WeightKeyList |keys#0@@35|)))) :qid |BucketWeightsidfy.67:26| :skolemid |5091| :pattern ( (BucketWeights.__default.WeightKeyList |keys#0@@35|)) ))))
(assert (forall ((|keys#0@@36| T@U) ) (!  (=> (and (= (type |keys#0@@36|) (SeqType BoxType)) ($Is |keys#0@@36| (TSeq Tclass.KeyType.Key))) (= (|BucketWeights.__default.WeightKeyList#requires| |keys#0@@36|) true)) :qid |BucketWeightsidfy.67:26| :skolemid |5092| :pattern ( (|BucketWeights.__default.WeightKeyList#requires| |keys#0@@36|)) )))
(assert (= (type StartFuel_BucketWeights._default.WeightKeyMultiset) LayerTypeType))
(assert  (=> true (forall ((|keys#0@@37| T@U) ) (!  (=> (and (= (type |keys#0@@37|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightKeyList#canCall| |keys#0@@37|) ($Is |keys#0@@37| (TSeq Tclass.KeyType.Key)))) (and (|BucketWeights.__default.WeightKeyMultiset#canCall| (|MultiSet#FromSeq| |keys#0@@37|)) (= (BucketWeights.__default.WeightKeyList |keys#0@@37|) (BucketWeights.__default.WeightKeyMultiset StartFuel_BucketWeights._default.WeightKeyMultiset (|MultiSet#FromSeq| |keys#0@@37|))))) :qid |BucketWeightsidfy.67:26| :skolemid |5093| :pattern ( (BucketWeights.__default.WeightKeyList |keys#0@@37|)) ))))
(assert  (=> true (forall ((|keys#0@@38| T@U) ) (!  (=> (and (= (type |keys#0@@38|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightKeyList#canCall| (Lit |keys#0@@38|)) ($Is |keys#0@@38| (TSeq Tclass.KeyType.Key)))) (and (|BucketWeights.__default.WeightKeyMultiset#canCall| (|MultiSet#FromSeq| (Lit |keys#0@@38|))) (= (BucketWeights.__default.WeightKeyList (Lit |keys#0@@38|)) (BucketWeights.__default.WeightKeyMultiset StartFuel_BucketWeights._default.WeightKeyMultiset (|MultiSet#FromSeq| (Lit |keys#0@@38|)))))) :qid |BucketWeightsidfy.67:26| :weight 3 :skolemid |5094| :pattern ( (BucketWeights.__default.WeightKeyList (Lit |keys#0@@38|))) ))))
(assert  (=> true (forall ((|msgs#0@@19| T@U) ) (!  (=> (and (= (type |msgs#0@@19|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightMessageList#canCall| |msgs#0@@19|) ($Is |msgs#0@@19| (TSeq Tclass.ValueMessage.Message)))) (and (=> (= (|Seq#Length| |msgs#0@@19|) (LitInt 0)) (= (BucketWeights.__default.WeightMessageList |msgs#0@@19|) (LitInt 0))) (<= (LitInt 0) (BucketWeights.__default.WeightMessageList |msgs#0@@19|)))) :qid |BucketWeightsidfy.73:30| :skolemid |5095| :pattern ( (BucketWeights.__default.WeightMessageList |msgs#0@@19|)) ))))
(assert (forall ((|msgs#0@@20| T@U) ) (!  (=> (and (= (type |msgs#0@@20|) (SeqType BoxType)) ($Is |msgs#0@@20| (TSeq Tclass.ValueMessage.Message))) (= (|BucketWeights.__default.WeightMessageList#requires| |msgs#0@@20|) true)) :qid |BucketWeightsidfy.73:30| :skolemid |5096| :pattern ( (|BucketWeights.__default.WeightMessageList#requires| |msgs#0@@20|)) )))
(assert (= (type StartFuel_BucketWeights._default.WeightMessageMultiset) LayerTypeType))
(assert  (=> true (forall ((|msgs#0@@21| T@U) ) (!  (=> (and (= (type |msgs#0@@21|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightMessageList#canCall| |msgs#0@@21|) ($Is |msgs#0@@21| (TSeq Tclass.ValueMessage.Message)))) (and (|BucketWeights.__default.WeightMessageMultiset#canCall| (|MultiSet#FromSeq| |msgs#0@@21|)) (= (BucketWeights.__default.WeightMessageList |msgs#0@@21|) (BucketWeights.__default.WeightMessageMultiset StartFuel_BucketWeights._default.WeightMessageMultiset (|MultiSet#FromSeq| |msgs#0@@21|))))) :qid |BucketWeightsidfy.73:30| :skolemid |5097| :pattern ( (BucketWeights.__default.WeightMessageList |msgs#0@@21|)) ))))
(assert  (=> true (forall ((|msgs#0@@22| T@U) ) (!  (=> (and (= (type |msgs#0@@22|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightMessageList#canCall| (Lit |msgs#0@@22|)) ($Is |msgs#0@@22| (TSeq Tclass.ValueMessage.Message)))) (and (|BucketWeights.__default.WeightMessageMultiset#canCall| (|MultiSet#FromSeq| (Lit |msgs#0@@22|))) (= (BucketWeights.__default.WeightMessageList (Lit |msgs#0@@22|)) (BucketWeights.__default.WeightMessageMultiset StartFuel_BucketWeights._default.WeightMessageMultiset (|MultiSet#FromSeq| (Lit |msgs#0@@22|)))))) :qid |BucketWeightsidfy.73:30| :weight 3 :skolemid |5098| :pattern ( (BucketWeights.__default.WeightMessageList (Lit |msgs#0@@22|))) ))))
(assert  (=> true (forall ((|bucket#0@@87| T@U) ) (!  (=> (and (= (type |bucket#0@@87|) DatatypeTypeType) (or (|BucketWeights.__default.WeightBucket#canCall| |bucket#0@@87|) ($Is |bucket#0@@87| Tclass.BucketsLib.Bucket))) (and (=> (and (= (|Seq#Length| (BucketsLib.Bucket.keys |bucket#0@@87|)) (|Seq#Length| (BucketsLib.Bucket.msgs |bucket#0@@87|))) (= (|Seq#Length| (BucketsLib.Bucket.msgs |bucket#0@@87|)) (LitInt 0))) (= (BucketWeights.__default.WeightBucket |bucket#0@@87|) (LitInt 0))) (<= (LitInt 0) (BucketWeights.__default.WeightBucket |bucket#0@@87|)))) :qid |BucketWeightsidfy.79:25| :skolemid |5099| :pattern ( (BucketWeights.__default.WeightBucket |bucket#0@@87|)) ))))
(assert (forall ((|bucket#0@@88| T@U) ) (!  (=> (and (= (type |bucket#0@@88|) DatatypeTypeType) ($Is |bucket#0@@88| Tclass.BucketsLib.Bucket)) (= (|BucketWeights.__default.WeightBucket#requires| |bucket#0@@88|) true)) :qid |BucketWeightsidfy.79:25| :skolemid |5100| :pattern ( (|BucketWeights.__default.WeightBucket#requires| |bucket#0@@88|)) )))
(assert  (=> true (forall ((|bucket#0@@89| T@U) ) (!  (=> (and (= (type |bucket#0@@89|) DatatypeTypeType) (or (|BucketWeights.__default.WeightBucket#canCall| |bucket#0@@89|) ($Is |bucket#0@@89| Tclass.BucketsLib.Bucket))) (and (and (and (BucketsLib.Bucket.Bucket_q |bucket#0@@89|) (|BucketWeights.__default.WeightKeyList#canCall| (BucketsLib.Bucket.keys |bucket#0@@89|))) (and (BucketsLib.Bucket.Bucket_q |bucket#0@@89|) (|BucketWeights.__default.WeightMessageList#canCall| (BucketsLib.Bucket.msgs |bucket#0@@89|)))) (= (BucketWeights.__default.WeightBucket |bucket#0@@89|) (+ (BucketWeights.__default.WeightKeyList (BucketsLib.Bucket.keys |bucket#0@@89|)) (BucketWeights.__default.WeightMessageList (BucketsLib.Bucket.msgs |bucket#0@@89|)))))) :qid |BucketWeightsidfy.79:25| :skolemid |5101| :pattern ( (BucketWeights.__default.WeightBucket |bucket#0@@89|)) ))))
(assert  (=> true (forall ((|bucket#0@@90| T@U) ) (!  (=> (and (= (type |bucket#0@@90|) DatatypeTypeType) (or (|BucketWeights.__default.WeightBucket#canCall| (Lit |bucket#0@@90|)) ($Is |bucket#0@@90| Tclass.BucketsLib.Bucket))) (and (and (and (BucketsLib.Bucket.Bucket_q (Lit |bucket#0@@90|)) (|BucketWeights.__default.WeightKeyList#canCall| (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@90|))))) (and (BucketsLib.Bucket.Bucket_q (Lit |bucket#0@@90|)) (|BucketWeights.__default.WeightMessageList#canCall| (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@90|)))))) (= (BucketWeights.__default.WeightBucket (Lit |bucket#0@@90|)) (LitInt (+ (BucketWeights.__default.WeightKeyList (Lit (BucketsLib.Bucket.keys (Lit |bucket#0@@90|)))) (BucketWeights.__default.WeightMessageList (Lit (BucketsLib.Bucket.msgs (Lit |bucket#0@@90|))))))))) :qid |BucketWeightsidfy.79:25| :weight 3 :skolemid |5102| :pattern ( (BucketWeights.__default.WeightBucket (Lit |bucket#0@@90|))) ))))
(assert (forall (($ly@@834 T@U) (|buckets#0@@5| T@U) ) (!  (=> (and (= (type $ly@@834) LayerTypeType) (= (type |buckets#0@@5|) (SeqType BoxType))) (= (BucketWeights.__default.WeightBucketList ($LS $ly@@834) |buckets#0@@5|) (BucketWeights.__default.WeightBucketList $ly@@834 |buckets#0@@5|))) :qid |BucketWeightsidfy.85:22| :skolemid |5103| :pattern ( (BucketWeights.__default.WeightBucketList ($LS $ly@@834) |buckets#0@@5|)) )))
(assert (forall (($ly@@835 T@U) (|buckets#0@@6| T@U) ) (!  (=> (and (= (type $ly@@835) LayerTypeType) (= (type |buckets#0@@6|) (SeqType BoxType))) (= (BucketWeights.__default.WeightBucketList $ly@@835 |buckets#0@@6|) (BucketWeights.__default.WeightBucketList $LZ |buckets#0@@6|))) :qid |BucketWeightsidfy.85:22| :skolemid |5104| :pattern ( (BucketWeights.__default.WeightBucketList (AsFuelBottom $ly@@835) |buckets#0@@6|)) )))
(assert  (=> true (forall (($ly@@836 T@U) (|buckets#0@@7| T@U) ) (!  (=> (and (and (= (type $ly@@836) LayerTypeType) (= (type |buckets#0@@7|) (SeqType BoxType))) (or (|BucketWeights.__default.WeightBucketList#canCall| |buckets#0@@7|) ($Is |buckets#0@@7| (TSeq Tclass.BucketsLib.Bucket)))) (<= (LitInt 0) (BucketWeights.__default.WeightBucketList $ly@@836 |buckets#0@@7|))) :qid |BucketWeightsidfy.85:22| :skolemid |5105| :pattern ( (BucketWeights.__default.WeightBucketList $ly@@836 |buckets#0@@7|)) ))))
(assert (forall (($ly@@837 T@U) (|buckets#0@@8| T@U) ) (!  (=> (and (and (= (type $ly@@837) LayerTypeType) (= (type |buckets#0@@8|) (SeqType BoxType))) ($Is |buckets#0@@8| (TSeq Tclass.BucketsLib.Bucket))) (= (|BucketWeights.__default.WeightBucketList#requires| $ly@@837 |buckets#0@@8|) true)) :qid |BucketWeightsidfy.85:22| :skolemid |5106| :pattern ( (|BucketWeights.__default.WeightBucketList#requires| $ly@@837 |buckets#0@@8|)) )))
(assert  (=> true (forall (($ly@@838 T@U) (|buckets#0@@9| T@U) ) (!  (=> (and (and (= (type $ly@@838) LayerTypeType) (= (type |buckets#0@@9|) (SeqType BoxType))) (or (|BucketWeights.__default.WeightBucketList#canCall| |buckets#0@@9|) ($Is |buckets#0@@9| (TSeq Tclass.BucketsLib.Bucket)))) (and (=> (not (= (|Seq#Length| |buckets#0@@9|) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.BucketsLib.Bucket |buckets#0@@9|) (|BucketWeights.__default.WeightBucketList#canCall| (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@9|))) (and (|Sequences.__default.Last#canCall| Tclass.BucketsLib.Bucket |buckets#0@@9|) (|BucketWeights.__default.WeightBucket#canCall| ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket |buckets#0@@9|)))))) (= (BucketWeights.__default.WeightBucketList ($LS $ly@@838) |buckets#0@@9|) (ite (= (|Seq#Length| |buckets#0@@9|) (LitInt 0)) 0 (+ (BucketWeights.__default.WeightBucketList $ly@@838 (Sequences.__default.DropLast Tclass.BucketsLib.Bucket |buckets#0@@9|)) (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket |buckets#0@@9|)))))))) :qid |BucketWeightsidfy.85:22| :skolemid |5107| :pattern ( (BucketWeights.__default.WeightBucketList ($LS $ly@@838) |buckets#0@@9|)) ))))
(assert  (=> true (forall (($ly@@839 T@U) (|buckets#0@@10| T@U) ) (!  (=> (and (and (= (type $ly@@839) LayerTypeType) (= (type |buckets#0@@10|) (SeqType BoxType))) (or (|BucketWeights.__default.WeightBucketList#canCall| (Lit |buckets#0@@10|)) ($Is |buckets#0@@10| (TSeq Tclass.BucketsLib.Bucket)))) (and (=> (not (= (|Seq#Length| (Lit |buckets#0@@10|)) (LitInt 0))) (and (and (|Sequences.__default.DropLast#canCall| Tclass.BucketsLib.Bucket (Lit |buckets#0@@10|)) (|BucketWeights.__default.WeightBucketList#canCall| (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@10|))))) (and (|Sequences.__default.Last#canCall| Tclass.BucketsLib.Bucket (Lit |buckets#0@@10|)) (|BucketWeights.__default.WeightBucket#canCall| (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (Lit |buckets#0@@10|)))))))) (= (BucketWeights.__default.WeightBucketList ($LS $ly@@839) (Lit |buckets#0@@10|)) (ite (= (|Seq#Length| (Lit |buckets#0@@10|)) (LitInt 0)) 0 (+ (BucketWeights.__default.WeightBucketList ($LS $ly@@839) (Lit (Sequences.__default.DropLast Tclass.BucketsLib.Bucket (Lit |buckets#0@@10|)))) (BucketWeights.__default.WeightBucket (Lit ($Unbox DatatypeTypeType (Sequences.__default.Last Tclass.BucketsLib.Bucket (Lit |buckets#0@@10|)))))))))) :qid |BucketWeightsidfy.85:22| :weight 3 :skolemid |5108| :pattern ( (BucketWeights.__default.WeightBucketList ($LS $ly@@839) (Lit |buckets#0@@10|))) ))))
(assert (forall (($ly@@840 T@U) (|m#0@@180| T@U) ) (!  (=> (and (= (type $ly@@840) LayerTypeType) (= (type |m#0@@180|) (MapType BoxType BoxType))) (= (BucketWeights.__default.WeightBucketMap ($LS $ly@@840) |m#0@@180|) (BucketWeights.__default.WeightBucketMap $ly@@840 |m#0@@180|))) :qid |BucketWeightsidfy.93:22| :skolemid |5109| :pattern ( (BucketWeights.__default.WeightBucketMap ($LS $ly@@840) |m#0@@180|)) )))
(assert (forall (($ly@@841 T@U) (|m#0@@181| T@U) ) (!  (=> (and (= (type $ly@@841) LayerTypeType) (= (type |m#0@@181|) (MapType BoxType BoxType))) (= (BucketWeights.__default.WeightBucketMap $ly@@841 |m#0@@181|) (BucketWeights.__default.WeightBucketMap $LZ |m#0@@181|))) :qid |BucketWeightsidfy.93:22| :skolemid |5110| :pattern ( (BucketWeights.__default.WeightBucketMap (AsFuelBottom $ly@@841) |m#0@@181|)) )))
(assert  (=> true (forall (($ly@@842 T@U) (|m#0@@182| T@U) ) (!  (=> (and (and (= (type $ly@@842) LayerTypeType) (= (type |m#0@@182|) (MapType BoxType BoxType))) (or (|BucketWeights.__default.WeightBucketMap#canCall| |m#0@@182|) ($Is |m#0@@182| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (<= (LitInt 0) (BucketWeights.__default.WeightBucketMap $ly@@842 |m#0@@182|))) :qid |BucketWeightsidfy.93:22| :skolemid |5111| :pattern ( (BucketWeights.__default.WeightBucketMap $ly@@842 |m#0@@182|)) ))))
(assert (forall (($ly@@843 T@U) (|m#0@@183| T@U) ) (!  (=> (and (and (= (type $ly@@843) LayerTypeType) (= (type |m#0@@183|) (MapType BoxType BoxType))) ($Is |m#0@@183| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message))) (= (|BucketWeights.__default.WeightBucketMap#requires| $ly@@843 |m#0@@183|) true)) :qid |BucketWeightsidfy.93:22| :skolemid |5112| :pattern ( (|BucketWeights.__default.WeightBucketMap#requires| $ly@@843 |m#0@@183|)) )))
(assert  (=> true (forall (($ly@@844 T@U) (|m#0@@184| T@U) ) (!  (=> (and (and (= (type $ly@@844) LayerTypeType) (= (type |m#0@@184|) (MapType BoxType BoxType))) (or (|BucketWeights.__default.WeightBucketMap#canCall| |m#0@@184|) ($Is |m#0@@184| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (and (|BucketWeights.__default.WeightKeyMultiset#canCall| (|MultiSet#FromSet| (|Map#Domain| |m#0@@184|))) (and (|Multisets.__default.ValueMultiset#canCall| Tclass.KeyType.Key Tclass.ValueMessage.Message |m#0@@184|) (|BucketWeights.__default.WeightMessageMultiset#canCall| (Multisets.__default.ValueMultiset Tclass.KeyType.Key Tclass.ValueMessage.Message |m#0@@184|)))) (= (BucketWeights.__default.WeightBucketMap ($LS $ly@@844) |m#0@@184|) (+ (BucketWeights.__default.WeightKeyMultiset StartFuel_BucketWeights._default.WeightKeyMultiset (|MultiSet#FromSet| (|Map#Domain| |m#0@@184|))) (BucketWeights.__default.WeightMessageMultiset StartFuel_BucketWeights._default.WeightMessageMultiset (Multisets.__default.ValueMultiset Tclass.KeyType.Key Tclass.ValueMessage.Message |m#0@@184|)))))) :qid |BucketWeightsidfy.93:22| :skolemid |5113| :pattern ( (BucketWeights.__default.WeightBucketMap ($LS $ly@@844) |m#0@@184|)) ))))
(assert  (=> true (forall (($ly@@845 T@U) (|m#0@@185| T@U) ) (!  (=> (and (and (= (type $ly@@845) LayerTypeType) (= (type |m#0@@185|) (MapType BoxType BoxType))) (or (|BucketWeights.__default.WeightBucketMap#canCall| (Lit |m#0@@185|)) ($Is |m#0@@185| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)))) (and (and (|BucketWeights.__default.WeightKeyMultiset#canCall| (|MultiSet#FromSet| (Lit (|Map#Domain| (Lit |m#0@@185|))))) (and (|Multisets.__default.ValueMultiset#canCall| Tclass.KeyType.Key Tclass.ValueMessage.Message (Lit |m#0@@185|)) (|BucketWeights.__default.WeightMessageMultiset#canCall| (Lit (Multisets.__default.ValueMultiset Tclass.KeyType.Key Tclass.ValueMessage.Message (Lit |m#0@@185|)))))) (= (BucketWeights.__default.WeightBucketMap ($LS $ly@@845) (Lit |m#0@@185|)) (+ (BucketWeights.__default.WeightKeyMultiset StartFuel_BucketWeights._default.WeightKeyMultiset (|MultiSet#FromSet| (Lit (|Map#Domain| (Lit |m#0@@185|))))) (BucketWeights.__default.WeightMessageMultiset StartFuel_BucketWeights._default.WeightMessageMultiset (Lit (Multisets.__default.ValueMultiset Tclass.KeyType.Key Tclass.ValueMessage.Message (Lit |m#0@@185|)))))))) :qid |BucketWeightsidfy.93:22| :weight 3 :skolemid |5114| :pattern ( (BucketWeights.__default.WeightBucketMap ($LS $ly@@845) (Lit |m#0@@185|))) ))))
(assert  (=> true (forall ((|key#0@@252| T@U) ) (!  (=> (and (= (type |key#0@@252|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightKeyUint64#canCall| |key#0@@252|) ($Is |key#0@@252| Tclass.KeyType.Key))) (and (= (BucketWeights.__default.WeightKeyUint64 |key#0@@252|) (BucketWeights.__default.WeightKey |key#0@@252|)) (and (<= (LitInt 0) (BucketWeights.__default.WeightKeyUint64 |key#0@@252|)) (< (BucketWeights.__default.WeightKeyUint64 |key#0@@252|) 18446744073709551616)))) :qid |BucketWeightsidfy.98:35| :skolemid |5115| :pattern ( (BucketWeights.__default.WeightKeyUint64 |key#0@@252|)) ))))
(assert (forall ((|key#0@@253| T@U) ) (!  (=> (and (= (type |key#0@@253|) (SeqType BoxType)) ($Is |key#0@@253| Tclass.KeyType.Key)) (= (|BucketWeights.__default.WeightKeyUint64#requires| |key#0@@253|) true)) :qid |BucketWeightsidfy.98:35| :skolemid |5116| :pattern ( (|BucketWeights.__default.WeightKeyUint64#requires| |key#0@@253|)) )))
(assert  (=> true (forall ((|key#0@@254| T@U) ) (!  (=> (and (= (type |key#0@@254|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightKeyUint64#canCall| |key#0@@254|) ($Is |key#0@@254| Tclass.KeyType.Key))) (= (BucketWeights.__default.WeightKeyUint64 |key#0@@254|) (+ 4 (|Seq#Length| |key#0@@254|)))) :qid |BucketWeightsidfy.98:35| :skolemid |5117| :pattern ( (BucketWeights.__default.WeightKeyUint64 |key#0@@254|)) ))))
(assert  (=> true (forall ((|key#0@@255| T@U) ) (!  (=> (and (= (type |key#0@@255|) (SeqType BoxType)) (or (|BucketWeights.__default.WeightKeyUint64#canCall| (Lit |key#0@@255|)) ($Is |key#0@@255| Tclass.KeyType.Key))) (= (BucketWeights.__default.WeightKeyUint64 (Lit |key#0@@255|)) (+ 4 (|Seq#Length| (Lit |key#0@@255|))))) :qid |BucketWeightsidfy.98:35| :weight 3 :skolemid |5118| :pattern ( (BucketWeights.__default.WeightKeyUint64 (Lit |key#0@@255|))) ))))
(assert  (=> true (forall ((|msg#0@@25| T@U) ) (!  (=> (and (= (type |msg#0@@25|) DatatypeTypeType) (or (|BucketWeights.__default.WeightMessageUint64#canCall| |msg#0@@25|) ($Is |msg#0@@25| Tclass.ValueMessage.Message))) (and (= (BucketWeights.__default.WeightMessageUint64 |msg#0@@25|) (BucketWeights.__default.WeightMessage |msg#0@@25|)) (and (<= (LitInt 0) (BucketWeights.__default.WeightMessageUint64 |msg#0@@25|)) (< (BucketWeights.__default.WeightMessageUint64 |msg#0@@25|) 18446744073709551616)))) :qid |BucketWeightsidfy.104:39| :skolemid |5119| :pattern ( (BucketWeights.__default.WeightMessageUint64 |msg#0@@25|)) ))))
(assert (forall ((|msg#0@@26| T@U) ) (!  (=> (and (= (type |msg#0@@26|) DatatypeTypeType) ($Is |msg#0@@26| Tclass.ValueMessage.Message)) (= (|BucketWeights.__default.WeightMessageUint64#requires| |msg#0@@26|) true)) :qid |BucketWeightsidfy.104:39| :skolemid |5120| :pattern ( (|BucketWeights.__default.WeightMessageUint64#requires| |msg#0@@26|)) )))
(assert  (=> true (forall ((|msg#0@@27| T@U) ) (!  (=> (and (= (type |msg#0@@27|) DatatypeTypeType) (or (|BucketWeights.__default.WeightMessageUint64#canCall| |msg#0@@27|) ($Is |msg#0@@27| Tclass.ValueMessage.Message))) (= (BucketWeights.__default.WeightMessageUint64 |msg#0@@27|) (ite (ValueMessage.Message.Define_q |msg#0@@27|) (let ((|value#0@@5| (ValueMessage.Message.value |msg#0@@27|))) (+ 4 (|Seq#Length| |value#0@@5|))) (LitInt 0)))) :qid |BucketWeightsidfy.104:39| :skolemid |5121| :pattern ( (BucketWeights.__default.WeightMessageUint64 |msg#0@@27|)) ))))
(assert  (=> true (forall ((|msg#0@@28| T@U) ) (!  (=> (and (= (type |msg#0@@28|) DatatypeTypeType) (or (|BucketWeights.__default.WeightMessageUint64#canCall| (Lit |msg#0@@28|)) ($Is |msg#0@@28| Tclass.ValueMessage.Message))) (= (BucketWeights.__default.WeightMessageUint64 (Lit |msg#0@@28|)) (ite (ValueMessage.Message.Define_q (Lit |msg#0@@28|)) (let ((|value#2@@1| (Lit (ValueMessage.Message.value (Lit |msg#0@@28|))))) (+ 4 (|Seq#Length| |value#2@@1|))) (LitInt 0)))) :qid |BucketWeightsidfy.104:39| :weight 3 :skolemid |5122| :pattern ( (BucketWeights.__default.WeightMessageUint64 (Lit |msg#0@@28|))) ))))
(assert (forall ((arg0@@761 T@U) (arg1@@403 T@U) (arg2@@250 Int) (arg3@@168 Int) (arg4@@120 Int) ) (! (= (type (BucketWeights.__default.biggestSlotIterate arg0@@761 arg1@@403 arg2@@250 arg3@@168 arg4@@120)) DatatypeTypeType) :qid |funType:BucketWeights.__default.biggestSlotIterate| :pattern ( (BucketWeights.__default.biggestSlotIterate arg0@@761 arg1@@403 arg2@@250 arg3@@168 arg4@@120)) )))
(assert (forall (($ly@@846 T@U) (|buckets#0@@11| T@U) (|j#0@@29| Int) (|bestIdx#0| Int) (|bestWeight#0| Int) ) (!  (=> (and (= (type $ly@@846) LayerTypeType) (= (type |buckets#0@@11|) (SeqType BoxType))) (= (BucketWeights.__default.biggestSlotIterate ($LS $ly@@846) |buckets#0@@11| |j#0@@29| |bestIdx#0| |bestWeight#0|) (BucketWeights.__default.biggestSlotIterate $ly@@846 |buckets#0@@11| |j#0@@29| |bestIdx#0| |bestWeight#0|))) :qid |BucketWeightsidfy.139:12| :skolemid |5123| :pattern ( (BucketWeights.__default.biggestSlotIterate ($LS $ly@@846) |buckets#0@@11| |j#0@@29| |bestIdx#0| |bestWeight#0|)) )))
(assert (forall (($ly@@847 T@U) (|buckets#0@@12| T@U) (|j#0@@30| Int) (|bestIdx#0@@0| Int) (|bestWeight#0@@0| Int) ) (!  (=> (and (= (type $ly@@847) LayerTypeType) (= (type |buckets#0@@12|) (SeqType BoxType))) (= (BucketWeights.__default.biggestSlotIterate $ly@@847 |buckets#0@@12| |j#0@@30| |bestIdx#0@@0| |bestWeight#0@@0|) (BucketWeights.__default.biggestSlotIterate $LZ |buckets#0@@12| |j#0@@30| |bestIdx#0@@0| |bestWeight#0@@0|))) :qid |BucketWeightsidfy.139:12| :skolemid |5124| :pattern ( (BucketWeights.__default.biggestSlotIterate (AsFuelBottom $ly@@847) |buckets#0@@12| |j#0@@30| |bestIdx#0@@0| |bestWeight#0@@0|)) )))
(assert  (=> true (forall (($ly@@848 T@U) (|buckets#0@@13| T@U) (|j#0@@31| Int) (|bestIdx#0@@1| Int) (|bestWeight#0@@1| Int) ) (!  (=> (and (and (= (type $ly@@848) LayerTypeType) (= (type |buckets#0@@13|) (SeqType BoxType))) (or (|BucketWeights.__default.biggestSlotIterate#canCall| |buckets#0@@13| |j#0@@31| |bestIdx#0@@1| |bestWeight#0@@1|) (and (and (and (and ($Is |buckets#0@@13| (TSeq Tclass.BucketsLib.Bucket)) (and (<= (LitInt 0) |j#0@@31|) (< |j#0@@31| 18446744073709551616))) (and (<= (LitInt 0) |bestIdx#0@@1|) (< |bestIdx#0@@1| 18446744073709551616))) (and (<= (LitInt 0) |bestWeight#0@@1|) (< |bestWeight#0@@1| 18446744073709551616))) (and (and (and (and (and (and (<= (LitInt 0) |bestIdx#0@@1|) (< |bestIdx#0@@1| (|Seq#Length| |buckets#0@@13|))) (and (<= (LitInt 0) |bestWeight#0@@1|) (<= |bestWeight#0@@1| (LitInt Bounds.__default.MaxTotalBucketWeight)))) (and (and (<= (LitInt 1) |j#0@@31|) (<= |j#0@@31| (|Seq#Length| |buckets#0@@13|))) (<= (|Seq#Length| |buckets#0@@13|) (LitInt Bounds.__default.MaxNumChildren)))) (forall ((|i#0@@176| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@176|) (< |i#0@@176| (|Seq#Length| |buckets#0@@13|))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@13| |i#0@@176|)))) :qid |BucketWeightsidfy.143:19| :skolemid |5125| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@13| |i#0@@176|))) ))) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList |buckets#0@@13|) (LitInt Bounds.__default.MaxTotalBucketWeight))) (= (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@13| |bestIdx#0@@1|))) |bestWeight#0@@1|))))) (and (and (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (_System.Tuple2._0 (BucketWeights.__default.biggestSlotIterate $ly@@848 |buckets#0@@13| |j#0@@31| |bestIdx#0@@1| |bestWeight#0@@1|))))) (< (U_2_int ($Unbox intType (_System.Tuple2._0 (BucketWeights.__default.biggestSlotIterate $ly@@848 |buckets#0@@13| |j#0@@31| |bestIdx#0@@1| |bestWeight#0@@1|)))) (|Seq#Length| |buckets#0@@13|))) (and (<= (LitInt 0) (U_2_int ($Unbox intType (_System.Tuple2._1 (BucketWeights.__default.biggestSlotIterate $ly@@848 |buckets#0@@13| |j#0@@31| |bestIdx#0@@1| |bestWeight#0@@1|))))) (<= (U_2_int ($Unbox intType (_System.Tuple2._1 (BucketWeights.__default.biggestSlotIterate $ly@@848 |buckets#0@@13| |j#0@@31| |bestIdx#0@@1| |bestWeight#0@@1|)))) (LitInt Bounds.__default.MaxTotalBucketWeight)))) (= (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@13| (U_2_int ($Unbox intType (_System.Tuple2._0 (BucketWeights.__default.biggestSlotIterate $ly@@848 |buckets#0@@13| |j#0@@31| |bestIdx#0@@1| |bestWeight#0@@1|))))))) (U_2_int ($Unbox intType (_System.Tuple2._1 (BucketWeights.__default.biggestSlotIterate $ly@@848 |buckets#0@@13| |j#0@@31| |bestIdx#0@@1| |bestWeight#0@@1|)))))) ($Is (BucketWeights.__default.biggestSlotIterate $ly@@848 |buckets#0@@13| |j#0@@31| |bestIdx#0@@1| |bestWeight#0@@1|) (Tclass._System.Tuple2 Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64)))) :qid |BucketWeightsidfy.139:12| :skolemid |5126| :pattern ( (BucketWeights.__default.biggestSlotIterate $ly@@848 |buckets#0@@13| |j#0@@31| |bestIdx#0@@1| |bestWeight#0@@1|)) ))))
(assert (forall (($ly@@849 T@U) (|buckets#0@@14| T@U) (|j#0@@32| Int) (|bestIdx#0@@2| Int) (|bestWeight#0@@2| Int) ) (!  (=> (and (= (type $ly@@849) LayerTypeType) (= (type |buckets#0@@14|) (SeqType BoxType))) (=> (and (and (and ($Is |buckets#0@@14| (TSeq Tclass.BucketsLib.Bucket)) (and (<= (LitInt 0) |j#0@@32|) (< |j#0@@32| 18446744073709551616))) (and (<= (LitInt 0) |bestIdx#0@@2|) (< |bestIdx#0@@2| 18446744073709551616))) (and (<= (LitInt 0) |bestWeight#0@@2|) (< |bestWeight#0@@2| 18446744073709551616))) (= (|BucketWeights.__default.biggestSlotIterate#requires| $ly@@849 |buckets#0@@14| |j#0@@32| |bestIdx#0@@2| |bestWeight#0@@2|)  (and (and (and (and (and (and (<= (LitInt 0) |bestIdx#0@@2|) (< |bestIdx#0@@2| (|Seq#Length| |buckets#0@@14|))) (and (<= (LitInt 0) |bestWeight#0@@2|) (<= |bestWeight#0@@2| (LitInt Bounds.__default.MaxTotalBucketWeight)))) (and (and (<= (LitInt 1) |j#0@@32|) (<= |j#0@@32| (|Seq#Length| |buckets#0@@14|))) (<= (|Seq#Length| |buckets#0@@14|) (LitInt Bounds.__default.MaxNumChildren)))) (forall ((|i#1@@82| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@82|) (< |i#1@@82| (|Seq#Length| |buckets#0@@14|))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@14| |i#1@@82|)))) :qid |BucketWeightsidfy.143:19| :skolemid |5127| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@14| |i#1@@82|))) ))) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList |buckets#0@@14|) (LitInt Bounds.__default.MaxTotalBucketWeight))) (= (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@14| |bestIdx#0@@2|))) |bestWeight#0@@2|))))) :qid |BucketWeightsidfy.139:12| :skolemid |5128| :pattern ( (|BucketWeights.__default.biggestSlotIterate#requires| $ly@@849 |buckets#0@@14| |j#0@@32| |bestIdx#0@@2| |bestWeight#0@@2|)) )))
(assert  (=> true (forall (($ly@@850 T@U) (|buckets#0@@15| T@U) (|j#0@@33| Int) (|bestIdx#0@@3| Int) (|bestWeight#0@@3| Int) ) (!  (=> (and (and (= (type $ly@@850) LayerTypeType) (= (type |buckets#0@@15|) (SeqType BoxType))) (or (|BucketWeights.__default.biggestSlotIterate#canCall| |buckets#0@@15| |j#0@@33| |bestIdx#0@@3| |bestWeight#0@@3|) (and (and (and (and ($Is |buckets#0@@15| (TSeq Tclass.BucketsLib.Bucket)) (and (<= (LitInt 0) |j#0@@33|) (< |j#0@@33| 18446744073709551616))) (and (<= (LitInt 0) |bestIdx#0@@3|) (< |bestIdx#0@@3| 18446744073709551616))) (and (<= (LitInt 0) |bestWeight#0@@3|) (< |bestWeight#0@@3| 18446744073709551616))) (and (and (and (and (and (and (<= (LitInt 0) |bestIdx#0@@3|) (< |bestIdx#0@@3| (|Seq#Length| |buckets#0@@15|))) (and (<= (LitInt 0) |bestWeight#0@@3|) (<= |bestWeight#0@@3| (LitInt Bounds.__default.MaxTotalBucketWeight)))) (and (and (<= (LitInt 1) |j#0@@33|) (<= |j#0@@33| (|Seq#Length| |buckets#0@@15|))) (<= (|Seq#Length| |buckets#0@@15|) (LitInt Bounds.__default.MaxNumChildren)))) (forall ((|i#1@@83| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@83|) (< |i#1@@83| (|Seq#Length| |buckets#0@@15|))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@15| |i#1@@83|)))) :qid |BucketWeightsidfy.143:19| :skolemid |5127| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@15| |i#1@@83|))) ))) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList |buckets#0@@15|) (LitInt Bounds.__default.MaxTotalBucketWeight))) (= (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@15| |bestIdx#0@@3|))) |bestWeight#0@@3|))))) (and (=> (not (= |j#0@@33| (|Seq#Length| |buckets#0@@15|))) (and (|BucketWeights.__default.WeightBucket#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@15| |j#0@@33|))) (let ((|w#0| (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@15| |j#0@@33|))))) (and (=> (> |w#0| |bestWeight#0@@3|) (|BucketWeights.__default.biggestSlotIterate#canCall| |buckets#0@@15| (+ |j#0@@33| 1) |j#0@@33| |w#0|)) (=> (>= |bestWeight#0@@3| |w#0|) (|BucketWeights.__default.biggestSlotIterate#canCall| |buckets#0@@15| (+ |j#0@@33| 1) |bestIdx#0@@3| |bestWeight#0@@3|)))))) (= (BucketWeights.__default.biggestSlotIterate ($LS $ly@@850) |buckets#0@@15| |j#0@@33| |bestIdx#0@@3| |bestWeight#0@@3|) (ite (= |j#0@@33| (|Seq#Length| |buckets#0@@15|)) (|#_System._tuple#2._#Make2| ($Box (int_2_U |bestIdx#0@@3|)) ($Box (int_2_U |bestWeight#0@@3|))) (let ((|w#0@@0| (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@15| |j#0@@33|))))) (ite (> |w#0@@0| |bestWeight#0@@3|) (BucketWeights.__default.biggestSlotIterate $ly@@850 |buckets#0@@15| (+ |j#0@@33| 1) |j#0@@33| |w#0@@0|) (BucketWeights.__default.biggestSlotIterate $ly@@850 |buckets#0@@15| (+ |j#0@@33| 1) |bestIdx#0@@3| |bestWeight#0@@3|))))))) :qid |BucketWeightsidfy.139:12| :skolemid |5129| :pattern ( (BucketWeights.__default.biggestSlotIterate ($LS $ly@@850) |buckets#0@@15| |j#0@@33| |bestIdx#0@@3| |bestWeight#0@@3|)) ))))
(assert  (=> true (forall (($ly@@851 T@U) (|buckets#0@@16| T@U) (|j#0@@34| Int) (|bestIdx#0@@4| Int) (|bestWeight#0@@4| Int) ) (!  (=> (and (and (= (type $ly@@851) LayerTypeType) (= (type |buckets#0@@16|) (SeqType BoxType))) (or (|BucketWeights.__default.biggestSlotIterate#canCall| (Lit |buckets#0@@16|) (LitInt |j#0@@34|) |bestIdx#0@@4| |bestWeight#0@@4|) (and (and (and (and ($Is |buckets#0@@16| (TSeq Tclass.BucketsLib.Bucket)) (and (<= (LitInt 0) |j#0@@34|) (< |j#0@@34| 18446744073709551616))) (and (<= (LitInt 0) |bestIdx#0@@4|) (< |bestIdx#0@@4| 18446744073709551616))) (and (<= (LitInt 0) |bestWeight#0@@4|) (< |bestWeight#0@@4| 18446744073709551616))) (and (and (and (and (and (and (<= (LitInt 0) |bestIdx#0@@4|) (< |bestIdx#0@@4| (|Seq#Length| (Lit |buckets#0@@16|)))) (and (<= (LitInt 0) |bestWeight#0@@4|) (<= |bestWeight#0@@4| (LitInt Bounds.__default.MaxTotalBucketWeight)))) (and (and (<= (LitInt 1) (LitInt |j#0@@34|)) (<= (LitInt |j#0@@34|) (|Seq#Length| (Lit |buckets#0@@16|)))) (<= (|Seq#Length| (Lit |buckets#0@@16|)) (LitInt Bounds.__default.MaxNumChildren)))) (forall ((|i#2@@25| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@25|) (< |i#2@@25| (|Seq#Length| (Lit |buckets#0@@16|)))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |buckets#0@@16|) |i#2@@25|)))) :qid |BucketWeightsidfy.143:19| :skolemid |5130| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@16| |i#2@@25|))) ))) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (Lit |buckets#0@@16|)) (LitInt Bounds.__default.MaxTotalBucketWeight))) (= (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |buckets#0@@16|) |bestIdx#0@@4|))) |bestWeight#0@@4|))))) (and (=> (not (= (LitInt |j#0@@34|) (|Seq#Length| (Lit |buckets#0@@16|)))) (and (|BucketWeights.__default.WeightBucket#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |buckets#0@@16|) (LitInt |j#0@@34|)))) (let ((|w#1| (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |buckets#0@@16|) (LitInt |j#0@@34|)))))) (and (=> (> |w#1| |bestWeight#0@@4|) (|BucketWeights.__default.biggestSlotIterate#canCall| (Lit |buckets#0@@16|) (LitInt (+ |j#0@@34| 1)) (LitInt |j#0@@34|) |w#1|)) (=> (>= |bestWeight#0@@4| |w#1|) (|BucketWeights.__default.biggestSlotIterate#canCall| (Lit |buckets#0@@16|) (LitInt (+ |j#0@@34| 1)) |bestIdx#0@@4| |bestWeight#0@@4|)))))) (= (BucketWeights.__default.biggestSlotIterate ($LS $ly@@851) (Lit |buckets#0@@16|) (LitInt |j#0@@34|) |bestIdx#0@@4| |bestWeight#0@@4|) (ite (= (LitInt |j#0@@34|) (|Seq#Length| (Lit |buckets#0@@16|))) (|#_System._tuple#2._#Make2| ($Box (int_2_U |bestIdx#0@@4|)) ($Box (int_2_U |bestWeight#0@@4|))) (let ((|w#1@@0| (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |buckets#0@@16|) (LitInt |j#0@@34|)))))) (ite (> |w#1@@0| |bestWeight#0@@4|) (BucketWeights.__default.biggestSlotIterate ($LS $ly@@851) (Lit |buckets#0@@16|) (LitInt (+ |j#0@@34| 1)) (LitInt |j#0@@34|) |w#1@@0|) (BucketWeights.__default.biggestSlotIterate ($LS $ly@@851) (Lit |buckets#0@@16|) (LitInt (+ |j#0@@34| 1)) |bestIdx#0@@4| |bestWeight#0@@4|))))))) :qid |BucketWeightsidfy.139:12| :weight 3 :skolemid |5131| :pattern ( (BucketWeights.__default.biggestSlotIterate ($LS $ly@@851) (Lit |buckets#0@@16|) (LitInt |j#0@@34|) |bestIdx#0@@4| |bestWeight#0@@4|)) ))))
(assert  (=> true (forall (($ly@@852 T@U) (|buckets#0@@17| T@U) (|j#0@@35| Int) (|bestIdx#0@@5| Int) (|bestWeight#0@@5| Int) ) (!  (=> (and (and (= (type $ly@@852) LayerTypeType) (= (type |buckets#0@@17|) (SeqType BoxType))) (or (|BucketWeights.__default.biggestSlotIterate#canCall| (Lit |buckets#0@@17|) (LitInt |j#0@@35|) (LitInt |bestIdx#0@@5|) (LitInt |bestWeight#0@@5|)) (and (and (and (and ($Is |buckets#0@@17| (TSeq Tclass.BucketsLib.Bucket)) (and (<= (LitInt 0) |j#0@@35|) (< |j#0@@35| 18446744073709551616))) (and (<= (LitInt 0) |bestIdx#0@@5|) (< |bestIdx#0@@5| 18446744073709551616))) (and (<= (LitInt 0) |bestWeight#0@@5|) (< |bestWeight#0@@5| 18446744073709551616))) (and (and (and (and (and (and (<= (LitInt 0) (LitInt |bestIdx#0@@5|)) (< |bestIdx#0@@5| (|Seq#Length| (Lit |buckets#0@@17|)))) (and (<= (LitInt 0) (LitInt |bestWeight#0@@5|)) (<= (LitInt |bestWeight#0@@5|) (LitInt Bounds.__default.MaxTotalBucketWeight)))) (and (and (<= (LitInt 1) (LitInt |j#0@@35|)) (<= (LitInt |j#0@@35|) (|Seq#Length| (Lit |buckets#0@@17|)))) (<= (|Seq#Length| (Lit |buckets#0@@17|)) (LitInt Bounds.__default.MaxNumChildren)))) (forall ((|i#3@@17| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@17|) (< |i#3@@17| (|Seq#Length| (Lit |buckets#0@@17|)))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |buckets#0@@17|) |i#3@@17|)))) :qid |BucketWeightsidfy.143:19| :skolemid |5132| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@17| |i#3@@17|))) ))) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (Lit |buckets#0@@17|)) (LitInt Bounds.__default.MaxTotalBucketWeight))) (= (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |buckets#0@@17|) (LitInt |bestIdx#0@@5|)))) (LitInt |bestWeight#0@@5|)))))) (and (=> (not (= (LitInt |j#0@@35|) (|Seq#Length| (Lit |buckets#0@@17|)))) (and (|BucketWeights.__default.WeightBucket#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |buckets#0@@17|) (LitInt |j#0@@35|)))) (let ((|w#2| (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |buckets#0@@17|) (LitInt |j#0@@35|)))))) (and (=> (> |w#2| |bestWeight#0@@5|) (|BucketWeights.__default.biggestSlotIterate#canCall| (Lit |buckets#0@@17|) (LitInt (+ |j#0@@35| 1)) (LitInt |j#0@@35|) |w#2|)) (=> (>= |bestWeight#0@@5| |w#2|) (|BucketWeights.__default.biggestSlotIterate#canCall| (Lit |buckets#0@@17|) (LitInt (+ |j#0@@35| 1)) (LitInt |bestIdx#0@@5|) (LitInt |bestWeight#0@@5|))))))) (= (BucketWeights.__default.biggestSlotIterate ($LS $ly@@852) (Lit |buckets#0@@17|) (LitInt |j#0@@35|) (LitInt |bestIdx#0@@5|) (LitInt |bestWeight#0@@5|)) (ite (= (LitInt |j#0@@35|) (|Seq#Length| (Lit |buckets#0@@17|))) (|#_System._tuple#2._#Make2| ($Box (int_2_U (LitInt |bestIdx#0@@5|))) ($Box (int_2_U (LitInt |bestWeight#0@@5|)))) (let ((|w#2@@0| (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |buckets#0@@17|) (LitInt |j#0@@35|)))))) (ite (> |w#2@@0| |bestWeight#0@@5|) (BucketWeights.__default.biggestSlotIterate ($LS $ly@@852) (Lit |buckets#0@@17|) (LitInt (+ |j#0@@35| 1)) (LitInt |j#0@@35|) |w#2@@0|) (BucketWeights.__default.biggestSlotIterate ($LS $ly@@852) (Lit |buckets#0@@17|) (LitInt (+ |j#0@@35| 1)) (LitInt |bestIdx#0@@5|) (LitInt |bestWeight#0@@5|)))))))) :qid |BucketWeightsidfy.139:12| :weight 3 :skolemid |5133| :pattern ( (BucketWeights.__default.biggestSlotIterate ($LS $ly@@852) (Lit |buckets#0@@17|) (LitInt |j#0@@35|) (LitInt |bestIdx#0@@5|) (LitInt |bestWeight#0@@5|))) ))))
(assert (forall ((arg0@@762 T@U) ) (! (= (type (BucketWeights.__default.biggestSlot arg0@@762)) DatatypeTypeType) :qid |funType:BucketWeights.__default.biggestSlot| :pattern ( (BucketWeights.__default.biggestSlot arg0@@762)) )))
(assert  (=> true (forall ((|buckets#0@@18| T@U) ) (!  (=> (and (= (type |buckets#0@@18|) (SeqType BoxType)) (or (|BucketWeights.__default.biggestSlot#canCall| |buckets#0@@18|) (and ($Is |buckets#0@@18| (TSeq Tclass.BucketsLib.Bucket)) (and (and (and (> (|Seq#Length| |buckets#0@@18|) 0) (<= (|Seq#Length| |buckets#0@@18|) (LitInt Bounds.__default.MaxNumChildren))) (forall ((|i#0@@177| Int) ) (!  (=> (and (<= (LitInt 0) |i#0@@177|) (< |i#0@@177| (|Seq#Length| |buckets#0@@18|))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@18| |i#0@@177|)))) :qid |BucketWeightsidfy.168:19| :skolemid |5134| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@18| |i#0@@177|))) ))) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList |buckets#0@@18|) (LitInt Bounds.__default.MaxTotalBucketWeight)))))) (and (and (and (and (<= (LitInt 0) (U_2_int ($Unbox intType (_System.Tuple2._0 (BucketWeights.__default.biggestSlot |buckets#0@@18|))))) (< (U_2_int ($Unbox intType (_System.Tuple2._0 (BucketWeights.__default.biggestSlot |buckets#0@@18|)))) (|Seq#Length| |buckets#0@@18|))) (and (<= (LitInt 0) (U_2_int ($Unbox intType (_System.Tuple2._1 (BucketWeights.__default.biggestSlot |buckets#0@@18|))))) (<= (U_2_int ($Unbox intType (_System.Tuple2._1 (BucketWeights.__default.biggestSlot |buckets#0@@18|)))) (LitInt Bounds.__default.MaxTotalBucketWeight)))) (= (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@18| (U_2_int ($Unbox intType (_System.Tuple2._0 (BucketWeights.__default.biggestSlot |buckets#0@@18|))))))) (U_2_int ($Unbox intType (_System.Tuple2._1 (BucketWeights.__default.biggestSlot |buckets#0@@18|)))))) ($Is (BucketWeights.__default.biggestSlot |buckets#0@@18|) (Tclass._System.Tuple2 Tclass.NativeTypes.uint64 Tclass.NativeTypes.uint64)))) :qid |BucketWeightsidfy.165:24| :skolemid |5135| :pattern ( (BucketWeights.__default.biggestSlot |buckets#0@@18|)) ))))
(assert (forall ((|buckets#0@@19| T@U) ) (!  (=> (and (= (type |buckets#0@@19|) (SeqType BoxType)) ($Is |buckets#0@@19| (TSeq Tclass.BucketsLib.Bucket))) (= (|BucketWeights.__default.biggestSlot#requires| |buckets#0@@19|)  (and (and (and (> (|Seq#Length| |buckets#0@@19|) 0) (<= (|Seq#Length| |buckets#0@@19|) (LitInt Bounds.__default.MaxNumChildren))) (forall ((|i#1@@84| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@84|) (< |i#1@@84| (|Seq#Length| |buckets#0@@19|))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@19| |i#1@@84|)))) :qid |BucketWeightsidfy.168:19| :skolemid |5136| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@19| |i#1@@84|))) ))) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList |buckets#0@@19|) (LitInt Bounds.__default.MaxTotalBucketWeight))))) :qid |BucketWeightsidfy.165:24| :skolemid |5137| :pattern ( (|BucketWeights.__default.biggestSlot#requires| |buckets#0@@19|)) )))
(assert  (=> true (forall ((|buckets#0@@20| T@U) ) (!  (=> (and (= (type |buckets#0@@20|) (SeqType BoxType)) (or (|BucketWeights.__default.biggestSlot#canCall| |buckets#0@@20|) (and ($Is |buckets#0@@20| (TSeq Tclass.BucketsLib.Bucket)) (and (and (and (> (|Seq#Length| |buckets#0@@20|) 0) (<= (|Seq#Length| |buckets#0@@20|) (LitInt Bounds.__default.MaxNumChildren))) (forall ((|i#1@@85| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@85|) (< |i#1@@85| (|Seq#Length| |buckets#0@@20|))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@20| |i#1@@85|)))) :qid |BucketWeightsidfy.168:19| :skolemid |5136| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@20| |i#1@@85|))) ))) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList |buckets#0@@20|) (LitInt Bounds.__default.MaxTotalBucketWeight)))))) (and (and (|BucketWeights.__default.WeightBucket#canCall| ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@20| (LitInt 0)))) (|BucketWeights.__default.biggestSlotIterate#canCall| |buckets#0@@20| (LitInt 1) (LitInt 0) (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@20| (LitInt 0)))))) (= (BucketWeights.__default.biggestSlot |buckets#0@@20|) (BucketWeights.__default.biggestSlotIterate ($LS $LZ) |buckets#0@@20| (LitInt 1) (LitInt 0) (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@20| (LitInt 0)))))))) :qid |BucketWeightsidfy.165:24| :skolemid |5138| :pattern ( (BucketWeights.__default.biggestSlot |buckets#0@@20|)) ))))
(assert  (=> true (forall ((|buckets#0@@21| T@U) ) (!  (=> (and (= (type |buckets#0@@21|) (SeqType BoxType)) (or (|BucketWeights.__default.biggestSlot#canCall| (Lit |buckets#0@@21|)) (and ($Is |buckets#0@@21| (TSeq Tclass.BucketsLib.Bucket)) (and (and (and (> (|Seq#Length| (Lit |buckets#0@@21|)) 0) (<= (|Seq#Length| (Lit |buckets#0@@21|)) (LitInt Bounds.__default.MaxNumChildren))) (forall ((|i#2@@26| Int) ) (!  (=> (and (<= (LitInt 0) |i#2@@26|) (< |i#2@@26| (|Seq#Length| (Lit |buckets#0@@21|)))) (BucketsLib.__default.WFBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |buckets#0@@21|) |i#2@@26|)))) :qid |BucketWeightsidfy.168:19| :skolemid |5139| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |buckets#0@@21| |i#2@@26|))) ))) (<= (BucketWeights.__default.WeightBucketList StartFuel_BucketWeights._default.WeightBucketList (Lit |buckets#0@@21|)) (LitInt Bounds.__default.MaxTotalBucketWeight)))))) (and (and (|BucketWeights.__default.WeightBucket#canCall| ($Unbox DatatypeTypeType (|Seq#Index| (Lit |buckets#0@@21|) (LitInt 0)))) (|BucketWeights.__default.biggestSlotIterate#canCall| (Lit |buckets#0@@21|) (LitInt 1) (LitInt 0) (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |buckets#0@@21|) (LitInt 0)))))) (= (BucketWeights.__default.biggestSlot (Lit |buckets#0@@21|)) (BucketWeights.__default.biggestSlotIterate ($LS $LZ) (Lit |buckets#0@@21|) (LitInt 1) (LitInt 0) (BucketWeights.__default.WeightBucket ($Unbox DatatypeTypeType (|Seq#Index| (Lit |buckets#0@@21|) (LitInt 0)))))))) :qid |BucketWeightsidfy.165:24| :weight 3 :skolemid |5140| :pattern ( (BucketWeights.__default.biggestSlot (Lit |buckets#0@@21|))) ))))
(assert  (and (and (and (and (and (and (and (forall ((arg0@@763 T@T) (arg1@@404 T@T) ) (! (= (Ctor (MapType9Type arg0@@763 arg1@@404)) 31) :qid |ctor:MapType9Type| )) (forall ((arg0@@764 T@T) (arg1@@405 T@T) ) (! (= (MapType9TypeInv0 (MapType9Type arg0@@764 arg1@@405)) arg0@@764) :qid |typeInv:MapType9TypeInv0| :pattern ( (MapType9Type arg0@@764 arg1@@405)) ))) (forall ((arg0@@765 T@T) (arg1@@406 T@T) ) (! (= (MapType9TypeInv1 (MapType9Type arg0@@765 arg1@@406)) arg1@@406) :qid |typeInv:MapType9TypeInv1| :pattern ( (MapType9Type arg0@@765 arg1@@406)) ))) (forall ((arg0@@766 T@U) (arg1@@407 T@U) (arg2@@251 T@U) ) (! (let ((aVar1@@9 (MapType9TypeInv1 (type arg0@@766)))) (= (type (MapType9Select arg0@@766 arg1@@407 arg2@@251)) aVar1@@9)) :qid |funType:MapType9Select| :pattern ( (MapType9Select arg0@@766 arg1@@407 arg2@@251)) ))) (forall ((arg0@@767 T@U) (arg1@@408 T@U) (arg2@@252 T@U) (arg3@@169 T@U) ) (! (let ((aVar1@@10 (type arg3@@169))) (let ((aVar0@@7 (type arg1@@408))) (= (type (MapType9Store arg0@@767 arg1@@408 arg2@@252 arg3@@169)) (MapType9Type aVar0@@7 aVar1@@10)))) :qid |funType:MapType9Store| :pattern ( (MapType9Store arg0@@767 arg1@@408 arg2@@252 arg3@@169)) ))) (forall ((m@@100 T@U) (x0@@57 T@U) (x1@@51 T@U) (val@@58 T@U) ) (! (let ((aVar1@@11 (MapType9TypeInv1 (type m@@100)))) (=> (= (type val@@58) aVar1@@11) (= (MapType9Select (MapType9Store m@@100 x0@@57 x1@@51 val@@58) x0@@57 x1@@51) val@@58))) :qid |mapAx0:MapType9Select| :weight 0 ))) (and (and (forall ((val@@59 T@U) (m@@101 T@U) (x0@@58 T@U) (x1@@52 T@U) (y0@@48 T@U) (y1@@44 T@U) ) (!  (or (= x0@@58 y0@@48) (= (MapType9Select (MapType9Store m@@101 x0@@58 x1@@52 val@@59) y0@@48 y1@@44) (MapType9Select m@@101 y0@@48 y1@@44))) :qid |mapAx1:MapType9Select:0| :weight 0 )) (forall ((val@@60 T@U) (m@@102 T@U) (x0@@59 T@U) (x1@@53 T@U) (y0@@49 T@U) (y1@@45 T@U) ) (!  (or (= x1@@53 y1@@45) (= (MapType9Select (MapType9Store m@@102 x0@@59 x1@@53 val@@60) y0@@49 y1@@45) (MapType9Select m@@102 y0@@49 y1@@45))) :qid |mapAx1:MapType9Select:1| :weight 0 ))) (forall ((val@@61 T@U) (m@@103 T@U) (x0@@60 T@U) (x1@@54 T@U) (y0@@50 T@U) (y1@@46 T@U) ) (!  (or true (= (MapType9Select (MapType9Store m@@103 x0@@60 x1@@54 val@@61) y0@@50 y1@@46) (MapType9Select m@@103 y0@@50 y1@@46))) :qid |mapAx2:MapType9Select| :weight 0 )))) (forall ((arg0@@768 T@U) (arg1@@409 T@U) (arg2@@253 T@U) (arg3@@170 Bool) ) (! (= (type (|lambda#0| arg0@@768 arg1@@409 arg2@@253 arg3@@170)) (MapType9Type refType boolType)) :qid |funType:lambda#0| :pattern ( (|lambda#0| arg0@@768 arg1@@409 arg2@@253 arg3@@170)) ))))
(assert (forall ((|l#0@@5| T@U) (|l#1| T@U) (|l#2| T@U) (|l#3| Bool) ($o@@78 T@U) ($f@@10 T@U) ) (! (let ((alpha@@17 (FieldTypeInv0 (type $f@@10)))) (=> (and (and (and (and (= (type |l#0@@5|) refType) (= (type |l#1|) (MapType0Type refType MapType1Type))) (= (type |l#2|) (FieldType boolType))) (= (type $o@@78) refType)) (= (type $f@@10) (FieldType alpha@@17))) (= (U_2_bool (MapType9Select (|lambda#0| |l#0@@5| |l#1| |l#2| |l#3|) $o@@78 $f@@10))  (=> (and (not (= $o@@78 |l#0@@5|)) (U_2_bool (MapType1Select (MapType0Select |l#1| $o@@78) |l#2|))) |l#3|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5141| :pattern ( (MapType9Select (|lambda#0| |l#0@@5| |l#1| |l#2| |l#3|) $o@@78 $f@@10)) )))
(assert (forall ((arg0@@769 T@U) (arg1@@410 T@U) (arg2@@254 T@U) (arg3@@171 Bool) ) (! (= (type (|lambda#1| arg0@@769 arg1@@410 arg2@@254 arg3@@171)) (MapType9Type refType boolType)) :qid |funType:lambda#1| :pattern ( (|lambda#1| arg0@@769 arg1@@410 arg2@@254 arg3@@171)) )))
(assert (forall ((|l#0@@6| T@U) (|l#1@@0| T@U) (|l#2@@0| T@U) (|l#3@@0| Bool) ($o@@79 T@U) ($f@@11 T@U) ) (! (let ((alpha@@18 (FieldTypeInv0 (type $f@@11)))) (=> (and (and (and (and (= (type |l#0@@6|) refType) (= (type |l#1@@0|) (MapType0Type refType MapType1Type))) (= (type |l#2@@0|) (FieldType boolType))) (= (type $o@@79) refType)) (= (type $f@@11) (FieldType alpha@@18))) (= (U_2_bool (MapType9Select (|lambda#1| |l#0@@6| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@79 $f@@11))  (=> (and (not (= $o@@79 |l#0@@6|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@0| $o@@79) |l#2@@0|))) |l#3@@0|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5142| :pattern ( (MapType9Select (|lambda#1| |l#0@@6| |l#1@@0| |l#2@@0| |l#3@@0|) $o@@79 $f@@11)) )))
(assert (forall ((|l#0@@7| T@U) (|l#1@@1| T@U) (|$y#0| T@U) ) (!  (=> (and (and (= (type |l#0@@7|) TyType) (= (type |l#1@@1|) (SeqType BoxType))) (= (type |$y#0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#2| |l#0@@7| |l#1@@1|) |$y#0|))  (and ($IsBox |$y#0| |l#0@@7|) (|Seq#Contains| |l#1@@1| |$y#0|)))) :qid |KeyTypesdfy.10:8| :skolemid |5143| :pattern ( (MapType0Select (|lambda#2| |l#0@@7| |l#1@@1|) |$y#0|)) )))
(assert (forall ((arg0@@770 T@U) (arg1@@411 T@U) (arg2@@255 T@U) (arg3@@172 Bool) ) (! (= (type (|lambda#6| arg0@@770 arg1@@411 arg2@@255 arg3@@172)) (MapType9Type refType boolType)) :qid |funType:lambda#6| :pattern ( (|lambda#6| arg0@@770 arg1@@411 arg2@@255 arg3@@172)) )))
(assert (forall ((|l#0@@8| T@U) (|l#1@@2| T@U) (|l#2@@1| T@U) (|l#3@@1| Bool) ($o@@80 T@U) ($f@@12 T@U) ) (! (let ((alpha@@19 (FieldTypeInv0 (type $f@@12)))) (=> (and (and (and (and (= (type |l#0@@8|) refType) (= (type |l#1@@2|) (MapType0Type refType MapType1Type))) (= (type |l#2@@1|) (FieldType boolType))) (= (type $o@@80) refType)) (= (type $f@@12) (FieldType alpha@@19))) (= (U_2_bool (MapType9Select (|lambda#6| |l#0@@8| |l#1@@2| |l#2@@1| |l#3@@1|) $o@@80 $f@@12))  (=> (and (not (= $o@@80 |l#0@@8|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@2| $o@@80) |l#2@@1|))) |l#3@@1|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5144| :pattern ( (MapType9Select (|lambda#6| |l#0@@8| |l#1@@2| |l#2@@1| |l#3@@1|) $o@@80 $f@@12)) )))
(assert (forall ((arg0@@771 T@U) (arg1@@412 T@U) (arg2@@256 T@U) (arg3@@173 Bool) ) (! (= (type (|lambda#7| arg0@@771 arg1@@412 arg2@@256 arg3@@173)) (MapType9Type refType boolType)) :qid |funType:lambda#7| :pattern ( (|lambda#7| arg0@@771 arg1@@412 arg2@@256 arg3@@173)) )))
(assert (forall ((|l#0@@9| T@U) (|l#1@@3| T@U) (|l#2@@2| T@U) (|l#3@@2| Bool) ($o@@81 T@U) ($f@@13 T@U) ) (! (let ((alpha@@20 (FieldTypeInv0 (type $f@@13)))) (=> (and (and (and (and (= (type |l#0@@9|) refType) (= (type |l#1@@3|) (MapType0Type refType MapType1Type))) (= (type |l#2@@2|) (FieldType boolType))) (= (type $o@@81) refType)) (= (type $f@@13) (FieldType alpha@@20))) (= (U_2_bool (MapType9Select (|lambda#7| |l#0@@9| |l#1@@3| |l#2@@2| |l#3@@2|) $o@@81 $f@@13))  (=> (and (not (= $o@@81 |l#0@@9|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@3| $o@@81) |l#2@@2|))) |l#3@@2|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5145| :pattern ( (MapType9Select (|lambda#7| |l#0@@9| |l#1@@3| |l#2@@2| |l#3@@2|) $o@@81 $f@@13)) )))
(assert (forall ((|l#0@@10| T@U) (|l#1@@4| T@U) (|l#2@@3| T@U) (|$w#0| T@U) ) (!  (=> (and (and (and (= (type |l#0@@10|) TyType) (= (type |l#1@@4|) (MapType0Type BoxType boolType))) (= (type |l#2@@3|) (MapType0Type BoxType boolType))) (= (type |$w#0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#10| |l#0@@10| |l#1@@4| |l#2@@3|) |$w#0|))  (and ($IsBox |$w#0| |l#0@@10|) (and (U_2_bool (MapType0Select |l#1@@4| |$w#0|)) (U_2_bool (MapType0Select |l#2@@3| |$w#0|)))))) :qid |KeyTypesdfy.10:8| :skolemid |5146| :pattern ( (MapType0Select (|lambda#10| |l#0@@10| |l#1@@4| |l#2@@3|) |$w#0|)) )))
(assert (forall ((|l#0@@11| T@U) (|$w#0@@0| T@U) ) (!  (=> (and (= (type |l#0@@11|) (MapType0Type BoxType BoxType)) (= (type |$w#0@@0|) BoxType)) (= (MapType0Select (|lambda#11| |l#0@@11|) |$w#0@@0|) (MapType0Select |l#0@@11| |$w#0@@0|))) :qid |BucketFlushModelidfy.75:15| :skolemid |5147| :pattern ( (MapType0Select (|lambda#11| |l#0@@11|) |$w#0@@0|)) )))
(assert (forall ((arg0@@772 T@U) (arg1@@413 T@U) (arg2@@257 T@U) (arg3@@174 Bool) ) (! (= (type (|lambda#14| arg0@@772 arg1@@413 arg2@@257 arg3@@174)) (MapType9Type refType boolType)) :qid |funType:lambda#14| :pattern ( (|lambda#14| arg0@@772 arg1@@413 arg2@@257 arg3@@174)) )))
(assert (forall ((|l#0@@12| T@U) (|l#1@@5| T@U) (|l#2@@4| T@U) (|l#3@@3| Bool) ($o@@82 T@U) ($f@@14 T@U) ) (! (let ((alpha@@21 (FieldTypeInv0 (type $f@@14)))) (=> (and (and (and (and (= (type |l#0@@12|) refType) (= (type |l#1@@5|) (MapType0Type refType MapType1Type))) (= (type |l#2@@4|) (FieldType boolType))) (= (type $o@@82) refType)) (= (type $f@@14) (FieldType alpha@@21))) (= (U_2_bool (MapType9Select (|lambda#14| |l#0@@12| |l#1@@5| |l#2@@4| |l#3@@3|) $o@@82 $f@@14))  (=> (and (not (= $o@@82 |l#0@@12|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@5| $o@@82) |l#2@@4|))) |l#3@@3|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5148| :pattern ( (MapType9Select (|lambda#14| |l#0@@12| |l#1@@5| |l#2@@4| |l#3@@3|) $o@@82 $f@@14)) )))
(assert (forall ((arg0@@773 T@U) (arg1@@414 T@U) (arg2@@258 T@U) (arg3@@175 Bool) ) (! (= (type (|lambda#15| arg0@@773 arg1@@414 arg2@@258 arg3@@175)) (MapType9Type refType boolType)) :qid |funType:lambda#15| :pattern ( (|lambda#15| arg0@@773 arg1@@414 arg2@@258 arg3@@175)) )))
(assert (forall ((|l#0@@13| T@U) (|l#1@@6| T@U) (|l#2@@5| T@U) (|l#3@@4| Bool) ($o@@83 T@U) ($f@@15 T@U) ) (! (let ((alpha@@22 (FieldTypeInv0 (type $f@@15)))) (=> (and (and (and (and (= (type |l#0@@13|) refType) (= (type |l#1@@6|) (MapType0Type refType MapType1Type))) (= (type |l#2@@5|) (FieldType boolType))) (= (type $o@@83) refType)) (= (type $f@@15) (FieldType alpha@@22))) (= (U_2_bool (MapType9Select (|lambda#15| |l#0@@13| |l#1@@6| |l#2@@5| |l#3@@4|) $o@@83 $f@@15))  (=> (and (not (= $o@@83 |l#0@@13|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@6| $o@@83) |l#2@@5|))) |l#3@@4|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5149| :pattern ( (MapType9Select (|lambda#15| |l#0@@13| |l#1@@6| |l#2@@5| |l#3@@4|) $o@@83 $f@@15)) )))
(assert (forall ((arg0@@774 T@U) (arg1@@415 T@U) (arg2@@259 T@U) (arg3@@176 Bool) ) (! (= (type (|lambda#18| arg0@@774 arg1@@415 arg2@@259 arg3@@176)) (MapType9Type refType boolType)) :qid |funType:lambda#18| :pattern ( (|lambda#18| arg0@@774 arg1@@415 arg2@@259 arg3@@176)) )))
(assert (forall ((|l#0@@14| T@U) (|l#1@@7| T@U) (|l#2@@6| T@U) (|l#3@@5| Bool) ($o@@84 T@U) ($f@@16 T@U) ) (! (let ((alpha@@23 (FieldTypeInv0 (type $f@@16)))) (=> (and (and (and (and (= (type |l#0@@14|) refType) (= (type |l#1@@7|) (MapType0Type refType MapType1Type))) (= (type |l#2@@6|) (FieldType boolType))) (= (type $o@@84) refType)) (= (type $f@@16) (FieldType alpha@@23))) (= (U_2_bool (MapType9Select (|lambda#18| |l#0@@14| |l#1@@7| |l#2@@6| |l#3@@5|) $o@@84 $f@@16))  (=> (and (not (= $o@@84 |l#0@@14|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@7| $o@@84) |l#2@@6|))) |l#3@@5|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5150| :pattern ( (MapType9Select (|lambda#18| |l#0@@14| |l#1@@7| |l#2@@6| |l#3@@5|) $o@@84 $f@@16)) )))
(assert (forall ((arg0@@775 T@U) (arg1@@416 T@U) (arg2@@260 T@U) (arg3@@177 Bool) ) (! (= (type (|lambda#19| arg0@@775 arg1@@416 arg2@@260 arg3@@177)) (MapType9Type refType boolType)) :qid |funType:lambda#19| :pattern ( (|lambda#19| arg0@@775 arg1@@416 arg2@@260 arg3@@177)) )))
(assert (forall ((|l#0@@15| T@U) (|l#1@@8| T@U) (|l#2@@7| T@U) (|l#3@@6| Bool) ($o@@85 T@U) ($f@@17 T@U) ) (! (let ((alpha@@24 (FieldTypeInv0 (type $f@@17)))) (=> (and (and (and (and (= (type |l#0@@15|) refType) (= (type |l#1@@8|) (MapType0Type refType MapType1Type))) (= (type |l#2@@7|) (FieldType boolType))) (= (type $o@@85) refType)) (= (type $f@@17) (FieldType alpha@@24))) (= (U_2_bool (MapType9Select (|lambda#19| |l#0@@15| |l#1@@8| |l#2@@7| |l#3@@6|) $o@@85 $f@@17))  (=> (and (not (= $o@@85 |l#0@@15|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@8| $o@@85) |l#2@@7|))) |l#3@@6|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5151| :pattern ( (MapType9Select (|lambda#19| |l#0@@15| |l#1@@8| |l#2@@7| |l#3@@6|) $o@@85 $f@@17)) )))
(assert (forall ((arg0@@776 T@U) (arg1@@417 T@U) (arg2@@261 T@U) (arg3@@178 Bool) ) (! (= (type (|lambda#20| arg0@@776 arg1@@417 arg2@@261 arg3@@178)) (MapType9Type refType boolType)) :qid |funType:lambda#20| :pattern ( (|lambda#20| arg0@@776 arg1@@417 arg2@@261 arg3@@178)) )))
(assert (forall ((|l#0@@16| T@U) (|l#1@@9| T@U) (|l#2@@8| T@U) (|l#3@@7| Bool) ($o@@86 T@U) ($f@@18 T@U) ) (! (let ((alpha@@25 (FieldTypeInv0 (type $f@@18)))) (=> (and (and (and (and (= (type |l#0@@16|) refType) (= (type |l#1@@9|) (MapType0Type refType MapType1Type))) (= (type |l#2@@8|) (FieldType boolType))) (= (type $o@@86) refType)) (= (type $f@@18) (FieldType alpha@@25))) (= (U_2_bool (MapType9Select (|lambda#20| |l#0@@16| |l#1@@9| |l#2@@8| |l#3@@7|) $o@@86 $f@@18))  (=> (and (not (= $o@@86 |l#0@@16|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@9| $o@@86) |l#2@@8|))) |l#3@@7|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5152| :pattern ( (MapType9Select (|lambda#20| |l#0@@16| |l#1@@9| |l#2@@8| |l#3@@7|) $o@@86 $f@@18)) )))
(assert (forall ((arg0@@777 T@U) (arg1@@418 T@U) (arg2@@262 T@U) (arg3@@179 Bool) ) (! (= (type (|lambda#21| arg0@@777 arg1@@418 arg2@@262 arg3@@179)) (MapType9Type refType boolType)) :qid |funType:lambda#21| :pattern ( (|lambda#21| arg0@@777 arg1@@418 arg2@@262 arg3@@179)) )))
(assert (forall ((|l#0@@17| T@U) (|l#1@@10| T@U) (|l#2@@9| T@U) (|l#3@@8| Bool) ($o@@87 T@U) ($f@@19 T@U) ) (! (let ((alpha@@26 (FieldTypeInv0 (type $f@@19)))) (=> (and (and (and (and (= (type |l#0@@17|) refType) (= (type |l#1@@10|) (MapType0Type refType MapType1Type))) (= (type |l#2@@9|) (FieldType boolType))) (= (type $o@@87) refType)) (= (type $f@@19) (FieldType alpha@@26))) (= (U_2_bool (MapType9Select (|lambda#21| |l#0@@17| |l#1@@10| |l#2@@9| |l#3@@8|) $o@@87 $f@@19))  (=> (and (not (= $o@@87 |l#0@@17|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@10| $o@@87) |l#2@@9|))) |l#3@@8|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5153| :pattern ( (MapType9Select (|lambda#21| |l#0@@17| |l#1@@10| |l#2@@9| |l#3@@8|) $o@@87 $f@@19)) )))
(assert (forall ((|l#0@@18| T@U) (|l#1@@11| T@U) (|l#2@@10| T@U) (|l#3@@9| T@U) (|l#4| T@U) (|l#5| T@U) (|$w#0@@1| T@U) ) (!  (=> (and (and (and (and (and (and (= (type |l#0@@18|) TyType) (= (type |l#1@@11|) (MapType0Type BoxType boolType))) (= (type |l#2@@10|) (MapType BoxType BoxType))) (= (type |l#3@@9|) (MapType BoxType BoxType))) (= (type |l#4|) (MapType BoxType BoxType))) (= (type |l#5|) DatatypeTypeType)) (= (type |$w#0@@1|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#22| |l#0@@18| |l#1@@11| |l#2@@10| |l#3@@9| |l#4| |l#5|) |$w#0@@1|))  (and ($IsBox |$w#0@@1| |l#0@@18|) (and (U_2_bool (MapType0Select |l#1@@11| |$w#0@@1|)) (not (|ValueMessage.Message#Equal| (BucketFlushModel.__default.topBotAccMergeForKey |l#2@@10| |l#3@@9| |l#4| ($Unbox (SeqType BoxType) |$w#0@@1|)) |l#5|)))))) :qid |KeyTypesdfy.10:8| :skolemid |5154| :pattern ( (MapType0Select (|lambda#22| |l#0@@18| |l#1@@11| |l#2@@10| |l#3@@9| |l#4| |l#5|) |$w#0@@1|)) )))
(assert (forall ((|l#0@@19| T@U) (|l#1@@12| T@U) (|l#2@@11| T@U) (|$w#0@@2| T@U) ) (!  (=> (and (and (and (= (type |l#0@@19|) (MapType BoxType BoxType)) (= (type |l#1@@12|) (MapType BoxType BoxType))) (= (type |l#2@@11|) (MapType BoxType BoxType))) (= (type |$w#0@@2|) BoxType)) (= (MapType0Select (|lambda#23| |l#0@@19| |l#1@@12| |l#2@@11|) |$w#0@@2|) ($Box (BucketFlushModel.__default.topBotAccMergeForKey |l#0@@19| |l#1@@12| |l#2@@11| ($Unbox (SeqType BoxType) |$w#0@@2|))))) :qid |BucketFlushModelidfy.174:5| :skolemid |5155| :pattern ( (MapType0Select (|lambda#23| |l#0@@19| |l#1@@12| |l#2@@11|) |$w#0@@2|)) )))
(assert (forall ((arg0@@778 T@U) (arg1@@419 T@U) (arg2@@263 T@U) (arg3@@180 Bool) ) (! (= (type (|lambda#26| arg0@@778 arg1@@419 arg2@@263 arg3@@180)) (MapType9Type refType boolType)) :qid |funType:lambda#26| :pattern ( (|lambda#26| arg0@@778 arg1@@419 arg2@@263 arg3@@180)) )))
(assert (forall ((|l#0@@20| T@U) (|l#1@@13| T@U) (|l#2@@12| T@U) (|l#3@@10| Bool) ($o@@88 T@U) ($f@@20 T@U) ) (! (let ((alpha@@27 (FieldTypeInv0 (type $f@@20)))) (=> (and (and (and (and (= (type |l#0@@20|) refType) (= (type |l#1@@13|) (MapType0Type refType MapType1Type))) (= (type |l#2@@12|) (FieldType boolType))) (= (type $o@@88) refType)) (= (type $f@@20) (FieldType alpha@@27))) (= (U_2_bool (MapType9Select (|lambda#26| |l#0@@20| |l#1@@13| |l#2@@12| |l#3@@10|) $o@@88 $f@@20))  (=> (and (not (= $o@@88 |l#0@@20|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@13| $o@@88) |l#2@@12|))) |l#3@@10|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5156| :pattern ( (MapType9Select (|lambda#26| |l#0@@20| |l#1@@13| |l#2@@12| |l#3@@10|) $o@@88 $f@@20)) )))
(assert (forall ((arg0@@779 T@U) (arg1@@420 T@U) (arg2@@264 T@U) (arg3@@181 Bool) ) (! (= (type (|lambda#27| arg0@@779 arg1@@420 arg2@@264 arg3@@181)) (MapType9Type refType boolType)) :qid |funType:lambda#27| :pattern ( (|lambda#27| arg0@@779 arg1@@420 arg2@@264 arg3@@181)) )))
(assert (forall ((|l#0@@21| T@U) (|l#1@@14| T@U) (|l#2@@13| T@U) (|l#3@@11| Bool) ($o@@89 T@U) ($f@@21 T@U) ) (! (let ((alpha@@28 (FieldTypeInv0 (type $f@@21)))) (=> (and (and (and (and (= (type |l#0@@21|) refType) (= (type |l#1@@14|) (MapType0Type refType MapType1Type))) (= (type |l#2@@13|) (FieldType boolType))) (= (type $o@@89) refType)) (= (type $f@@21) (FieldType alpha@@28))) (= (U_2_bool (MapType9Select (|lambda#27| |l#0@@21| |l#1@@14| |l#2@@13| |l#3@@11|) $o@@89 $f@@21))  (=> (and (not (= $o@@89 |l#0@@21|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@14| $o@@89) |l#2@@13|))) |l#3@@11|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5157| :pattern ( (MapType9Select (|lambda#27| |l#0@@21| |l#1@@14| |l#2@@13| |l#3@@11|) $o@@89 $f@@21)) )))
(assert (forall ((arg0@@780 T@U) (arg1@@421 T@U) (arg2@@265 T@U) (arg3@@182 Bool) ) (! (= (type (|lambda#30| arg0@@780 arg1@@421 arg2@@265 arg3@@182)) (MapType9Type refType boolType)) :qid |funType:lambda#30| :pattern ( (|lambda#30| arg0@@780 arg1@@421 arg2@@265 arg3@@182)) )))
(assert (forall ((|l#0@@22| T@U) (|l#1@@15| T@U) (|l#2@@14| T@U) (|l#3@@12| Bool) ($o@@90 T@U) ($f@@22 T@U) ) (! (let ((alpha@@29 (FieldTypeInv0 (type $f@@22)))) (=> (and (and (and (and (= (type |l#0@@22|) refType) (= (type |l#1@@15|) (MapType0Type refType MapType1Type))) (= (type |l#2@@14|) (FieldType boolType))) (= (type $o@@90) refType)) (= (type $f@@22) (FieldType alpha@@29))) (= (U_2_bool (MapType9Select (|lambda#30| |l#0@@22| |l#1@@15| |l#2@@14| |l#3@@12|) $o@@90 $f@@22))  (=> (and (not (= $o@@90 |l#0@@22|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@15| $o@@90) |l#2@@14|))) |l#3@@12|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5158| :pattern ( (MapType9Select (|lambda#30| |l#0@@22| |l#1@@15| |l#2@@14| |l#3@@12|) $o@@90 $f@@22)) )))
(assert (forall ((arg0@@781 T@U) (arg1@@422 T@U) (arg2@@266 T@U) (arg3@@183 Bool) ) (! (= (type (|lambda#31| arg0@@781 arg1@@422 arg2@@266 arg3@@183)) (MapType9Type refType boolType)) :qid |funType:lambda#31| :pattern ( (|lambda#31| arg0@@781 arg1@@422 arg2@@266 arg3@@183)) )))
(assert (forall ((|l#0@@23| T@U) (|l#1@@16| T@U) (|l#2@@15| T@U) (|l#3@@13| Bool) ($o@@91 T@U) ($f@@23 T@U) ) (! (let ((alpha@@30 (FieldTypeInv0 (type $f@@23)))) (=> (and (and (and (and (= (type |l#0@@23|) refType) (= (type |l#1@@16|) (MapType0Type refType MapType1Type))) (= (type |l#2@@15|) (FieldType boolType))) (= (type $o@@91) refType)) (= (type $f@@23) (FieldType alpha@@30))) (= (U_2_bool (MapType9Select (|lambda#31| |l#0@@23| |l#1@@16| |l#2@@15| |l#3@@13|) $o@@91 $f@@23))  (=> (and (not (= $o@@91 |l#0@@23|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@16| $o@@91) |l#2@@15|))) |l#3@@13|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5159| :pattern ( (MapType9Select (|lambda#31| |l#0@@23| |l#1@@16| |l#2@@15| |l#3@@13|) $o@@91 $f@@23)) )))
(assert (forall ((arg0@@782 T@U) (arg1@@423 T@U) (arg2@@267 T@U) (arg3@@184 Bool) ) (! (= (type (|lambda#32| arg0@@782 arg1@@423 arg2@@267 arg3@@184)) (MapType9Type refType boolType)) :qid |funType:lambda#32| :pattern ( (|lambda#32| arg0@@782 arg1@@423 arg2@@267 arg3@@184)) )))
(assert (forall ((|l#0@@24| T@U) (|l#1@@17| T@U) (|l#2@@16| T@U) (|l#3@@14| Bool) ($o@@92 T@U) ($f@@24 T@U) ) (! (let ((alpha@@31 (FieldTypeInv0 (type $f@@24)))) (=> (and (and (and (and (= (type |l#0@@24|) refType) (= (type |l#1@@17|) (MapType0Type refType MapType1Type))) (= (type |l#2@@16|) (FieldType boolType))) (= (type $o@@92) refType)) (= (type $f@@24) (FieldType alpha@@31))) (= (U_2_bool (MapType9Select (|lambda#32| |l#0@@24| |l#1@@17| |l#2@@16| |l#3@@14|) $o@@92 $f@@24))  (=> (and (not (= $o@@92 |l#0@@24|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@17| $o@@92) |l#2@@16|))) |l#3@@14|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5160| :pattern ( (MapType9Select (|lambda#32| |l#0@@24| |l#1@@17| |l#2@@16| |l#3@@14|) $o@@92 $f@@24)) )))
(assert (forall ((arg0@@783 T@U) (arg1@@424 T@U) (arg2@@268 T@U) (arg3@@185 Bool) ) (! (= (type (|lambda#33| arg0@@783 arg1@@424 arg2@@268 arg3@@185)) (MapType9Type refType boolType)) :qid |funType:lambda#33| :pattern ( (|lambda#33| arg0@@783 arg1@@424 arg2@@268 arg3@@185)) )))
(assert (forall ((|l#0@@25| T@U) (|l#1@@18| T@U) (|l#2@@17| T@U) (|l#3@@15| Bool) ($o@@93 T@U) ($f@@25 T@U) ) (! (let ((alpha@@32 (FieldTypeInv0 (type $f@@25)))) (=> (and (and (and (and (= (type |l#0@@25|) refType) (= (type |l#1@@18|) (MapType0Type refType MapType1Type))) (= (type |l#2@@17|) (FieldType boolType))) (= (type $o@@93) refType)) (= (type $f@@25) (FieldType alpha@@32))) (= (U_2_bool (MapType9Select (|lambda#33| |l#0@@25| |l#1@@18| |l#2@@17| |l#3@@15|) $o@@93 $f@@25))  (=> (and (not (= $o@@93 |l#0@@25|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@18| $o@@93) |l#2@@17|))) |l#3@@15|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5161| :pattern ( (MapType9Select (|lambda#33| |l#0@@25| |l#1@@18| |l#2@@17| |l#3@@15|) $o@@93 $f@@25)) )))
(assert (forall ((arg0@@784 T@U) (arg1@@425 T@U) (arg2@@269 T@U) (arg3@@186 Bool) ) (! (= (type (|lambda#34| arg0@@784 arg1@@425 arg2@@269 arg3@@186)) (MapType9Type refType boolType)) :qid |funType:lambda#34| :pattern ( (|lambda#34| arg0@@784 arg1@@425 arg2@@269 arg3@@186)) )))
(assert (forall ((|l#0@@26| T@U) (|l#1@@19| T@U) (|l#2@@18| T@U) (|l#3@@16| Bool) ($o@@94 T@U) ($f@@26 T@U) ) (! (let ((alpha@@33 (FieldTypeInv0 (type $f@@26)))) (=> (and (and (and (and (= (type |l#0@@26|) refType) (= (type |l#1@@19|) (MapType0Type refType MapType1Type))) (= (type |l#2@@18|) (FieldType boolType))) (= (type $o@@94) refType)) (= (type $f@@26) (FieldType alpha@@33))) (= (U_2_bool (MapType9Select (|lambda#34| |l#0@@26| |l#1@@19| |l#2@@18| |l#3@@16|) $o@@94 $f@@26))  (=> (and (not (= $o@@94 |l#0@@26|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@19| $o@@94) |l#2@@18|))) |l#3@@16|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5162| :pattern ( (MapType9Select (|lambda#34| |l#0@@26| |l#1@@19| |l#2@@18| |l#3@@16|) $o@@94 $f@@26)) )))
(assert (forall ((arg0@@785 T@U) (arg1@@426 T@U) (arg2@@270 T@U) (arg3@@187 Bool) ) (! (= (type (|lambda#35| arg0@@785 arg1@@426 arg2@@270 arg3@@187)) (MapType9Type refType boolType)) :qid |funType:lambda#35| :pattern ( (|lambda#35| arg0@@785 arg1@@426 arg2@@270 arg3@@187)) )))
(assert (forall ((|l#0@@27| T@U) (|l#1@@20| T@U) (|l#2@@19| T@U) (|l#3@@17| Bool) ($o@@95 T@U) ($f@@27 T@U) ) (! (let ((alpha@@34 (FieldTypeInv0 (type $f@@27)))) (=> (and (and (and (and (= (type |l#0@@27|) refType) (= (type |l#1@@20|) (MapType0Type refType MapType1Type))) (= (type |l#2@@19|) (FieldType boolType))) (= (type $o@@95) refType)) (= (type $f@@27) (FieldType alpha@@34))) (= (U_2_bool (MapType9Select (|lambda#35| |l#0@@27| |l#1@@20| |l#2@@19| |l#3@@17|) $o@@95 $f@@27))  (=> (and (not (= $o@@95 |l#0@@27|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@20| $o@@95) |l#2@@19|))) |l#3@@17|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5163| :pattern ( (MapType9Select (|lambda#35| |l#0@@27| |l#1@@20| |l#2@@19| |l#3@@17|) $o@@95 $f@@27)) )))
(assert (forall ((arg0@@786 T@U) (arg1@@427 T@U) (arg2@@271 T@U) (arg3@@188 Bool) ) (! (= (type (|lambda#36| arg0@@786 arg1@@427 arg2@@271 arg3@@188)) (MapType9Type refType boolType)) :qid |funType:lambda#36| :pattern ( (|lambda#36| arg0@@786 arg1@@427 arg2@@271 arg3@@188)) )))
(assert (forall ((|l#0@@28| T@U) (|l#1@@21| T@U) (|l#2@@20| T@U) (|l#3@@18| Bool) ($o@@96 T@U) ($f@@28 T@U) ) (! (let ((alpha@@35 (FieldTypeInv0 (type $f@@28)))) (=> (and (and (and (and (= (type |l#0@@28|) refType) (= (type |l#1@@21|) (MapType0Type refType MapType1Type))) (= (type |l#2@@20|) (FieldType boolType))) (= (type $o@@96) refType)) (= (type $f@@28) (FieldType alpha@@35))) (= (U_2_bool (MapType9Select (|lambda#36| |l#0@@28| |l#1@@21| |l#2@@20| |l#3@@18|) $o@@96 $f@@28))  (=> (and (not (= $o@@96 |l#0@@28|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@21| $o@@96) |l#2@@20|))) |l#3@@18|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5164| :pattern ( (MapType9Select (|lambda#36| |l#0@@28| |l#1@@21| |l#2@@20| |l#3@@18|) $o@@96 $f@@28)) )))
(assert (forall ((arg0@@787 T@U) (arg1@@428 T@U) (arg2@@272 T@U) (arg3@@189 Bool) ) (! (= (type (|lambda#37| arg0@@787 arg1@@428 arg2@@272 arg3@@189)) (MapType9Type refType boolType)) :qid |funType:lambda#37| :pattern ( (|lambda#37| arg0@@787 arg1@@428 arg2@@272 arg3@@189)) )))
(assert (forall ((|l#0@@29| T@U) (|l#1@@22| T@U) (|l#2@@21| T@U) (|l#3@@19| Bool) ($o@@97 T@U) ($f@@29 T@U) ) (! (let ((alpha@@36 (FieldTypeInv0 (type $f@@29)))) (=> (and (and (and (and (= (type |l#0@@29|) refType) (= (type |l#1@@22|) (MapType0Type refType MapType1Type))) (= (type |l#2@@21|) (FieldType boolType))) (= (type $o@@97) refType)) (= (type $f@@29) (FieldType alpha@@36))) (= (U_2_bool (MapType9Select (|lambda#37| |l#0@@29| |l#1@@22| |l#2@@21| |l#3@@19|) $o@@97 $f@@29))  (=> (and (not (= $o@@97 |l#0@@29|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@22| $o@@97) |l#2@@21|))) |l#3@@19|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5165| :pattern ( (MapType9Select (|lambda#37| |l#0@@29| |l#1@@22| |l#2@@21| |l#3@@19|) $o@@97 $f@@29)) )))
(assert (forall ((arg0@@788 T@U) (arg1@@429 T@U) (arg2@@273 T@U) (arg3@@190 Bool) ) (! (= (type (|lambda#38| arg0@@788 arg1@@429 arg2@@273 arg3@@190)) (MapType9Type refType boolType)) :qid |funType:lambda#38| :pattern ( (|lambda#38| arg0@@788 arg1@@429 arg2@@273 arg3@@190)) )))
(assert (forall ((|l#0@@30| T@U) (|l#1@@23| T@U) (|l#2@@22| T@U) (|l#3@@20| Bool) ($o@@98 T@U) ($f@@30 T@U) ) (! (let ((alpha@@37 (FieldTypeInv0 (type $f@@30)))) (=> (and (and (and (and (= (type |l#0@@30|) refType) (= (type |l#1@@23|) (MapType0Type refType MapType1Type))) (= (type |l#2@@22|) (FieldType boolType))) (= (type $o@@98) refType)) (= (type $f@@30) (FieldType alpha@@37))) (= (U_2_bool (MapType9Select (|lambda#38| |l#0@@30| |l#1@@23| |l#2@@22| |l#3@@20|) $o@@98 $f@@30))  (=> (and (not (= $o@@98 |l#0@@30|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@23| $o@@98) |l#2@@22|))) |l#3@@20|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5166| :pattern ( (MapType9Select (|lambda#38| |l#0@@30| |l#1@@23| |l#2@@22| |l#3@@20|) $o@@98 $f@@30)) )))
(assert (forall ((arg0@@789 T@U) (arg1@@430 T@U) (arg2@@274 T@U) (arg3@@191 Bool) ) (! (= (type (|lambda#39| arg0@@789 arg1@@430 arg2@@274 arg3@@191)) (MapType9Type refType boolType)) :qid |funType:lambda#39| :pattern ( (|lambda#39| arg0@@789 arg1@@430 arg2@@274 arg3@@191)) )))
(assert (forall ((|l#0@@31| T@U) (|l#1@@24| T@U) (|l#2@@23| T@U) (|l#3@@21| Bool) ($o@@99 T@U) ($f@@31 T@U) ) (! (let ((alpha@@38 (FieldTypeInv0 (type $f@@31)))) (=> (and (and (and (and (= (type |l#0@@31|) refType) (= (type |l#1@@24|) (MapType0Type refType MapType1Type))) (= (type |l#2@@23|) (FieldType boolType))) (= (type $o@@99) refType)) (= (type $f@@31) (FieldType alpha@@38))) (= (U_2_bool (MapType9Select (|lambda#39| |l#0@@31| |l#1@@24| |l#2@@23| |l#3@@21|) $o@@99 $f@@31))  (=> (and (not (= $o@@99 |l#0@@31|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@24| $o@@99) |l#2@@23|))) |l#3@@21|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5167| :pattern ( (MapType9Select (|lambda#39| |l#0@@31| |l#1@@24| |l#2@@23| |l#3@@21|) $o@@99 $f@@31)) )))
(assert (forall ((arg0@@790 T@U) (arg1@@431 T@U) (arg2@@275 T@U) (arg3@@192 Bool) ) (! (= (type (|lambda#40| arg0@@790 arg1@@431 arg2@@275 arg3@@192)) (MapType9Type refType boolType)) :qid |funType:lambda#40| :pattern ( (|lambda#40| arg0@@790 arg1@@431 arg2@@275 arg3@@192)) )))
(assert (forall ((|l#0@@32| T@U) (|l#1@@25| T@U) (|l#2@@24| T@U) (|l#3@@22| Bool) ($o@@100 T@U) ($f@@32 T@U) ) (! (let ((alpha@@39 (FieldTypeInv0 (type $f@@32)))) (=> (and (and (and (and (= (type |l#0@@32|) refType) (= (type |l#1@@25|) (MapType0Type refType MapType1Type))) (= (type |l#2@@24|) (FieldType boolType))) (= (type $o@@100) refType)) (= (type $f@@32) (FieldType alpha@@39))) (= (U_2_bool (MapType9Select (|lambda#40| |l#0@@32| |l#1@@25| |l#2@@24| |l#3@@22|) $o@@100 $f@@32))  (=> (and (not (= $o@@100 |l#0@@32|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@25| $o@@100) |l#2@@24|))) |l#3@@22|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5168| :pattern ( (MapType9Select (|lambda#40| |l#0@@32| |l#1@@25| |l#2@@24| |l#3@@22|) $o@@100 $f@@32)) )))
(assert (forall ((arg0@@791 T@U) (arg1@@432 T@U) (arg2@@276 T@U) (arg3@@193 Bool) ) (! (= (type (|lambda#41| arg0@@791 arg1@@432 arg2@@276 arg3@@193)) (MapType9Type refType boolType)) :qid |funType:lambda#41| :pattern ( (|lambda#41| arg0@@791 arg1@@432 arg2@@276 arg3@@193)) )))
(assert (forall ((|l#0@@33| T@U) (|l#1@@26| T@U) (|l#2@@25| T@U) (|l#3@@23| Bool) ($o@@101 T@U) ($f@@33 T@U) ) (! (let ((alpha@@40 (FieldTypeInv0 (type $f@@33)))) (=> (and (and (and (and (= (type |l#0@@33|) refType) (= (type |l#1@@26|) (MapType0Type refType MapType1Type))) (= (type |l#2@@25|) (FieldType boolType))) (= (type $o@@101) refType)) (= (type $f@@33) (FieldType alpha@@40))) (= (U_2_bool (MapType9Select (|lambda#41| |l#0@@33| |l#1@@26| |l#2@@25| |l#3@@23|) $o@@101 $f@@33))  (=> (and (not (= $o@@101 |l#0@@33|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@26| $o@@101) |l#2@@25|))) |l#3@@23|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5169| :pattern ( (MapType9Select (|lambda#41| |l#0@@33| |l#1@@26| |l#2@@25| |l#3@@23|) $o@@101 $f@@33)) )))
(assert (forall ((arg0@@792 T@U) (arg1@@433 T@U) (arg2@@277 T@U) (arg3@@194 Bool) ) (! (= (type (|lambda#42| arg0@@792 arg1@@433 arg2@@277 arg3@@194)) (MapType9Type refType boolType)) :qid |funType:lambda#42| :pattern ( (|lambda#42| arg0@@792 arg1@@433 arg2@@277 arg3@@194)) )))
(assert (forall ((|l#0@@34| T@U) (|l#1@@27| T@U) (|l#2@@26| T@U) (|l#3@@24| Bool) ($o@@102 T@U) ($f@@34 T@U) ) (! (let ((alpha@@41 (FieldTypeInv0 (type $f@@34)))) (=> (and (and (and (and (= (type |l#0@@34|) refType) (= (type |l#1@@27|) (MapType0Type refType MapType1Type))) (= (type |l#2@@26|) (FieldType boolType))) (= (type $o@@102) refType)) (= (type $f@@34) (FieldType alpha@@41))) (= (U_2_bool (MapType9Select (|lambda#42| |l#0@@34| |l#1@@27| |l#2@@26| |l#3@@24|) $o@@102 $f@@34))  (=> (and (not (= $o@@102 |l#0@@34|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@27| $o@@102) |l#2@@26|))) |l#3@@24|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5170| :pattern ( (MapType9Select (|lambda#42| |l#0@@34| |l#1@@27| |l#2@@26| |l#3@@24|) $o@@102 $f@@34)) )))
(assert (forall ((arg0@@793 T@U) (arg1@@434 T@U) (arg2@@278 T@U) (arg3@@195 Bool) ) (! (= (type (|lambda#43| arg0@@793 arg1@@434 arg2@@278 arg3@@195)) (MapType9Type refType boolType)) :qid |funType:lambda#43| :pattern ( (|lambda#43| arg0@@793 arg1@@434 arg2@@278 arg3@@195)) )))
(assert (forall ((|l#0@@35| T@U) (|l#1@@28| T@U) (|l#2@@27| T@U) (|l#3@@25| Bool) ($o@@103 T@U) ($f@@35 T@U) ) (! (let ((alpha@@42 (FieldTypeInv0 (type $f@@35)))) (=> (and (and (and (and (= (type |l#0@@35|) refType) (= (type |l#1@@28|) (MapType0Type refType MapType1Type))) (= (type |l#2@@27|) (FieldType boolType))) (= (type $o@@103) refType)) (= (type $f@@35) (FieldType alpha@@42))) (= (U_2_bool (MapType9Select (|lambda#43| |l#0@@35| |l#1@@28| |l#2@@27| |l#3@@25|) $o@@103 $f@@35))  (=> (and (not (= $o@@103 |l#0@@35|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@28| $o@@103) |l#2@@27|))) |l#3@@25|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5171| :pattern ( (MapType9Select (|lambda#43| |l#0@@35| |l#1@@28| |l#2@@27| |l#3@@25|) $o@@103 $f@@35)) )))
(assert (forall ((arg0@@794 T@U) (arg1@@435 T@U) (arg2@@279 T@U) (arg3@@196 Bool) ) (! (= (type (|lambda#44| arg0@@794 arg1@@435 arg2@@279 arg3@@196)) (MapType9Type refType boolType)) :qid |funType:lambda#44| :pattern ( (|lambda#44| arg0@@794 arg1@@435 arg2@@279 arg3@@196)) )))
(assert (forall ((|l#0@@36| T@U) (|l#1@@29| T@U) (|l#2@@28| T@U) (|l#3@@26| Bool) ($o@@104 T@U) ($f@@36 T@U) ) (! (let ((alpha@@43 (FieldTypeInv0 (type $f@@36)))) (=> (and (and (and (and (= (type |l#0@@36|) refType) (= (type |l#1@@29|) (MapType0Type refType MapType1Type))) (= (type |l#2@@28|) (FieldType boolType))) (= (type $o@@104) refType)) (= (type $f@@36) (FieldType alpha@@43))) (= (U_2_bool (MapType9Select (|lambda#44| |l#0@@36| |l#1@@29| |l#2@@28| |l#3@@26|) $o@@104 $f@@36))  (=> (and (not (= $o@@104 |l#0@@36|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@29| $o@@104) |l#2@@28|))) |l#3@@26|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5172| :pattern ( (MapType9Select (|lambda#44| |l#0@@36| |l#1@@29| |l#2@@28| |l#3@@26|) $o@@104 $f@@36)) )))
(assert (forall ((arg0@@795 T@U) (arg1@@436 T@U) (arg2@@280 T@U) (arg3@@197 Bool) ) (! (= (type (|lambda#45| arg0@@795 arg1@@436 arg2@@280 arg3@@197)) (MapType9Type refType boolType)) :qid |funType:lambda#45| :pattern ( (|lambda#45| arg0@@795 arg1@@436 arg2@@280 arg3@@197)) )))
(assert (forall ((|l#0@@37| T@U) (|l#1@@30| T@U) (|l#2@@29| T@U) (|l#3@@27| Bool) ($o@@105 T@U) ($f@@37 T@U) ) (! (let ((alpha@@44 (FieldTypeInv0 (type $f@@37)))) (=> (and (and (and (and (= (type |l#0@@37|) refType) (= (type |l#1@@30|) (MapType0Type refType MapType1Type))) (= (type |l#2@@29|) (FieldType boolType))) (= (type $o@@105) refType)) (= (type $f@@37) (FieldType alpha@@44))) (= (U_2_bool (MapType9Select (|lambda#45| |l#0@@37| |l#1@@30| |l#2@@29| |l#3@@27|) $o@@105 $f@@37))  (=> (and (not (= $o@@105 |l#0@@37|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@30| $o@@105) |l#2@@29|))) |l#3@@27|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5173| :pattern ( (MapType9Select (|lambda#45| |l#0@@37| |l#1@@30| |l#2@@29| |l#3@@27|) $o@@105 $f@@37)) )))
(assert (forall ((arg0@@796 T@U) (arg1@@437 T@U) (arg2@@281 T@U) (arg3@@198 Bool) ) (! (= (type (|lambda#46| arg0@@796 arg1@@437 arg2@@281 arg3@@198)) (MapType9Type refType boolType)) :qid |funType:lambda#46| :pattern ( (|lambda#46| arg0@@796 arg1@@437 arg2@@281 arg3@@198)) )))
(assert (forall ((|l#0@@38| T@U) (|l#1@@31| T@U) (|l#2@@30| T@U) (|l#3@@28| Bool) ($o@@106 T@U) ($f@@38 T@U) ) (! (let ((alpha@@45 (FieldTypeInv0 (type $f@@38)))) (=> (and (and (and (and (= (type |l#0@@38|) refType) (= (type |l#1@@31|) (MapType0Type refType MapType1Type))) (= (type |l#2@@30|) (FieldType boolType))) (= (type $o@@106) refType)) (= (type $f@@38) (FieldType alpha@@45))) (= (U_2_bool (MapType9Select (|lambda#46| |l#0@@38| |l#1@@31| |l#2@@30| |l#3@@28|) $o@@106 $f@@38))  (=> (and (not (= $o@@106 |l#0@@38|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@31| $o@@106) |l#2@@30|))) |l#3@@28|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5174| :pattern ( (MapType9Select (|lambda#46| |l#0@@38| |l#1@@31| |l#2@@30| |l#3@@28|) $o@@106 $f@@38)) )))
(assert (forall ((arg0@@797 T@U) (arg1@@438 T@U) (arg2@@282 T@U) (arg3@@199 Bool) ) (! (= (type (|lambda#47| arg0@@797 arg1@@438 arg2@@282 arg3@@199)) (MapType9Type refType boolType)) :qid |funType:lambda#47| :pattern ( (|lambda#47| arg0@@797 arg1@@438 arg2@@282 arg3@@199)) )))
(assert (forall ((|l#0@@39| T@U) (|l#1@@32| T@U) (|l#2@@31| T@U) (|l#3@@29| Bool) ($o@@107 T@U) ($f@@39 T@U) ) (! (let ((alpha@@46 (FieldTypeInv0 (type $f@@39)))) (=> (and (and (and (and (= (type |l#0@@39|) refType) (= (type |l#1@@32|) (MapType0Type refType MapType1Type))) (= (type |l#2@@31|) (FieldType boolType))) (= (type $o@@107) refType)) (= (type $f@@39) (FieldType alpha@@46))) (= (U_2_bool (MapType9Select (|lambda#47| |l#0@@39| |l#1@@32| |l#2@@31| |l#3@@29|) $o@@107 $f@@39))  (=> (and (not (= $o@@107 |l#0@@39|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@32| $o@@107) |l#2@@31|))) |l#3@@29|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5175| :pattern ( (MapType9Select (|lambda#47| |l#0@@39| |l#1@@32| |l#2@@31| |l#3@@29|) $o@@107 $f@@39)) )))
(assert (forall ((arg0@@798 T@U) (arg1@@439 T@U) (arg2@@283 T@U) (arg3@@200 Bool) ) (! (= (type (|lambda#48| arg0@@798 arg1@@439 arg2@@283 arg3@@200)) (MapType9Type refType boolType)) :qid |funType:lambda#48| :pattern ( (|lambda#48| arg0@@798 arg1@@439 arg2@@283 arg3@@200)) )))
(assert (forall ((|l#0@@40| T@U) (|l#1@@33| T@U) (|l#2@@32| T@U) (|l#3@@30| Bool) ($o@@108 T@U) ($f@@40 T@U) ) (! (let ((alpha@@47 (FieldTypeInv0 (type $f@@40)))) (=> (and (and (and (and (= (type |l#0@@40|) refType) (= (type |l#1@@33|) (MapType0Type refType MapType1Type))) (= (type |l#2@@32|) (FieldType boolType))) (= (type $o@@108) refType)) (= (type $f@@40) (FieldType alpha@@47))) (= (U_2_bool (MapType9Select (|lambda#48| |l#0@@40| |l#1@@33| |l#2@@32| |l#3@@30|) $o@@108 $f@@40))  (=> (and (not (= $o@@108 |l#0@@40|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@33| $o@@108) |l#2@@32|))) |l#3@@30|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5176| :pattern ( (MapType9Select (|lambda#48| |l#0@@40| |l#1@@33| |l#2@@32| |l#3@@30|) $o@@108 $f@@40)) )))
(assert (forall ((arg0@@799 T@U) (arg1@@440 T@U) (arg2@@284 T@U) (arg3@@201 Bool) ) (! (= (type (|lambda#49| arg0@@799 arg1@@440 arg2@@284 arg3@@201)) (MapType9Type refType boolType)) :qid |funType:lambda#49| :pattern ( (|lambda#49| arg0@@799 arg1@@440 arg2@@284 arg3@@201)) )))
(assert (forall ((|l#0@@41| T@U) (|l#1@@34| T@U) (|l#2@@33| T@U) (|l#3@@31| Bool) ($o@@109 T@U) ($f@@41 T@U) ) (! (let ((alpha@@48 (FieldTypeInv0 (type $f@@41)))) (=> (and (and (and (and (= (type |l#0@@41|) refType) (= (type |l#1@@34|) (MapType0Type refType MapType1Type))) (= (type |l#2@@33|) (FieldType boolType))) (= (type $o@@109) refType)) (= (type $f@@41) (FieldType alpha@@48))) (= (U_2_bool (MapType9Select (|lambda#49| |l#0@@41| |l#1@@34| |l#2@@33| |l#3@@31|) $o@@109 $f@@41))  (=> (and (not (= $o@@109 |l#0@@41|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@34| $o@@109) |l#2@@33|))) |l#3@@31|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5177| :pattern ( (MapType9Select (|lambda#49| |l#0@@41| |l#1@@34| |l#2@@33| |l#3@@31|) $o@@109 $f@@41)) )))
(assert (forall ((arg0@@800 T@U) (arg1@@441 T@U) (arg2@@285 T@U) (arg3@@202 Bool) ) (! (= (type (|lambda#50| arg0@@800 arg1@@441 arg2@@285 arg3@@202)) (MapType9Type refType boolType)) :qid |funType:lambda#50| :pattern ( (|lambda#50| arg0@@800 arg1@@441 arg2@@285 arg3@@202)) )))
(assert (forall ((|l#0@@42| T@U) (|l#1@@35| T@U) (|l#2@@34| T@U) (|l#3@@32| Bool) ($o@@110 T@U) ($f@@42 T@U) ) (! (let ((alpha@@49 (FieldTypeInv0 (type $f@@42)))) (=> (and (and (and (and (= (type |l#0@@42|) refType) (= (type |l#1@@35|) (MapType0Type refType MapType1Type))) (= (type |l#2@@34|) (FieldType boolType))) (= (type $o@@110) refType)) (= (type $f@@42) (FieldType alpha@@49))) (= (U_2_bool (MapType9Select (|lambda#50| |l#0@@42| |l#1@@35| |l#2@@34| |l#3@@32|) $o@@110 $f@@42))  (=> (and (not (= $o@@110 |l#0@@42|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@35| $o@@110) |l#2@@34|))) |l#3@@32|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5178| :pattern ( (MapType9Select (|lambda#50| |l#0@@42| |l#1@@35| |l#2@@34| |l#3@@32|) $o@@110 $f@@42)) )))
(assert (forall ((arg0@@801 T@U) (arg1@@442 T@U) (arg2@@286 T@U) (arg3@@203 Bool) ) (! (= (type (|lambda#51| arg0@@801 arg1@@442 arg2@@286 arg3@@203)) (MapType9Type refType boolType)) :qid |funType:lambda#51| :pattern ( (|lambda#51| arg0@@801 arg1@@442 arg2@@286 arg3@@203)) )))
(assert (forall ((|l#0@@43| T@U) (|l#1@@36| T@U) (|l#2@@35| T@U) (|l#3@@33| Bool) ($o@@111 T@U) ($f@@43 T@U) ) (! (let ((alpha@@50 (FieldTypeInv0 (type $f@@43)))) (=> (and (and (and (and (= (type |l#0@@43|) refType) (= (type |l#1@@36|) (MapType0Type refType MapType1Type))) (= (type |l#2@@35|) (FieldType boolType))) (= (type $o@@111) refType)) (= (type $f@@43) (FieldType alpha@@50))) (= (U_2_bool (MapType9Select (|lambda#51| |l#0@@43| |l#1@@36| |l#2@@35| |l#3@@33|) $o@@111 $f@@43))  (=> (and (not (= $o@@111 |l#0@@43|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@36| $o@@111) |l#2@@35|))) |l#3@@33|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5179| :pattern ( (MapType9Select (|lambda#51| |l#0@@43| |l#1@@36| |l#2@@35| |l#3@@33|) $o@@111 $f@@43)) )))
(assert (forall ((arg0@@802 T@U) (arg1@@443 T@U) (arg2@@287 T@U) (arg3@@204 Bool) ) (! (= (type (|lambda#52| arg0@@802 arg1@@443 arg2@@287 arg3@@204)) (MapType9Type refType boolType)) :qid |funType:lambda#52| :pattern ( (|lambda#52| arg0@@802 arg1@@443 arg2@@287 arg3@@204)) )))
(assert (forall ((|l#0@@44| T@U) (|l#1@@37| T@U) (|l#2@@36| T@U) (|l#3@@34| Bool) ($o@@112 T@U) ($f@@44 T@U) ) (! (let ((alpha@@51 (FieldTypeInv0 (type $f@@44)))) (=> (and (and (and (and (= (type |l#0@@44|) refType) (= (type |l#1@@37|) (MapType0Type refType MapType1Type))) (= (type |l#2@@36|) (FieldType boolType))) (= (type $o@@112) refType)) (= (type $f@@44) (FieldType alpha@@51))) (= (U_2_bool (MapType9Select (|lambda#52| |l#0@@44| |l#1@@37| |l#2@@36| |l#3@@34|) $o@@112 $f@@44))  (=> (and (not (= $o@@112 |l#0@@44|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@37| $o@@112) |l#2@@36|))) |l#3@@34|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5180| :pattern ( (MapType9Select (|lambda#52| |l#0@@44| |l#1@@37| |l#2@@36| |l#3@@34|) $o@@112 $f@@44)) )))
(assert (forall ((arg0@@803 T@U) (arg1@@444 T@U) (arg2@@288 T@U) (arg3@@205 Bool) ) (! (= (type (|lambda#53| arg0@@803 arg1@@444 arg2@@288 arg3@@205)) (MapType9Type refType boolType)) :qid |funType:lambda#53| :pattern ( (|lambda#53| arg0@@803 arg1@@444 arg2@@288 arg3@@205)) )))
(assert (forall ((|l#0@@45| T@U) (|l#1@@38| T@U) (|l#2@@37| T@U) (|l#3@@35| Bool) ($o@@113 T@U) ($f@@45 T@U) ) (! (let ((alpha@@52 (FieldTypeInv0 (type $f@@45)))) (=> (and (and (and (and (= (type |l#0@@45|) refType) (= (type |l#1@@38|) (MapType0Type refType MapType1Type))) (= (type |l#2@@37|) (FieldType boolType))) (= (type $o@@113) refType)) (= (type $f@@45) (FieldType alpha@@52))) (= (U_2_bool (MapType9Select (|lambda#53| |l#0@@45| |l#1@@38| |l#2@@37| |l#3@@35|) $o@@113 $f@@45))  (=> (and (not (= $o@@113 |l#0@@45|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@38| $o@@113) |l#2@@37|))) |l#3@@35|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5181| :pattern ( (MapType9Select (|lambda#53| |l#0@@45| |l#1@@38| |l#2@@37| |l#3@@35|) $o@@113 $f@@45)) )))
(assert (forall ((arg0@@804 T@U) (arg1@@445 T@U) (arg2@@289 T@U) (arg3@@206 Bool) ) (! (= (type (|lambda#54| arg0@@804 arg1@@445 arg2@@289 arg3@@206)) (MapType9Type refType boolType)) :qid |funType:lambda#54| :pattern ( (|lambda#54| arg0@@804 arg1@@445 arg2@@289 arg3@@206)) )))
(assert (forall ((|l#0@@46| T@U) (|l#1@@39| T@U) (|l#2@@38| T@U) (|l#3@@36| Bool) ($o@@114 T@U) ($f@@46 T@U) ) (! (let ((alpha@@53 (FieldTypeInv0 (type $f@@46)))) (=> (and (and (and (and (= (type |l#0@@46|) refType) (= (type |l#1@@39|) (MapType0Type refType MapType1Type))) (= (type |l#2@@38|) (FieldType boolType))) (= (type $o@@114) refType)) (= (type $f@@46) (FieldType alpha@@53))) (= (U_2_bool (MapType9Select (|lambda#54| |l#0@@46| |l#1@@39| |l#2@@38| |l#3@@36|) $o@@114 $f@@46))  (=> (and (not (= $o@@114 |l#0@@46|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@39| $o@@114) |l#2@@38|))) |l#3@@36|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5182| :pattern ( (MapType9Select (|lambda#54| |l#0@@46| |l#1@@39| |l#2@@38| |l#3@@36|) $o@@114 $f@@46)) )))
(assert (forall ((arg0@@805 T@U) (arg1@@446 T@U) (arg2@@290 T@U) (arg3@@207 Bool) ) (! (= (type (|lambda#55| arg0@@805 arg1@@446 arg2@@290 arg3@@207)) (MapType9Type refType boolType)) :qid |funType:lambda#55| :pattern ( (|lambda#55| arg0@@805 arg1@@446 arg2@@290 arg3@@207)) )))
(assert (forall ((|l#0@@47| T@U) (|l#1@@40| T@U) (|l#2@@39| T@U) (|l#3@@37| Bool) ($o@@115 T@U) ($f@@47 T@U) ) (! (let ((alpha@@54 (FieldTypeInv0 (type $f@@47)))) (=> (and (and (and (and (= (type |l#0@@47|) refType) (= (type |l#1@@40|) (MapType0Type refType MapType1Type))) (= (type |l#2@@39|) (FieldType boolType))) (= (type $o@@115) refType)) (= (type $f@@47) (FieldType alpha@@54))) (= (U_2_bool (MapType9Select (|lambda#55| |l#0@@47| |l#1@@40| |l#2@@39| |l#3@@37|) $o@@115 $f@@47))  (=> (and (not (= $o@@115 |l#0@@47|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@40| $o@@115) |l#2@@39|))) |l#3@@37|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5183| :pattern ( (MapType9Select (|lambda#55| |l#0@@47| |l#1@@40| |l#2@@39| |l#3@@37|) $o@@115 $f@@47)) )))
(assert (forall ((|l#0@@48| Int) (|l#1@@41| Int) (|l#2@@40| T@U) (|l#3@@38| T@U) (|$y#0@@0| T@U) ) (!  (=> (and (and (= (type |l#2@@40|) (SeqType BoxType)) (= (type |l#3@@38|) (SeqType BoxType))) (= (type |$y#0@@0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#56| |l#0@@48| |l#1@@41| |l#2@@40| |l#3@@38|) |$y#0@@0|)) (exists ((|i#0@@178| Int) ) (!  (and (and (<= |l#0@@48| |i#0@@178|) (< |i#0@@178| |l#1@@41|)) (= |$y#0@@0| (|Seq#Index| |l#2@@40| |i#0@@178|))) :qid |BucketFlushModelidfy.1006:11| :skolemid |1912| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |l#3@@38| |i#0@@178|))) )))) :qid |unknown.0:0| :skolemid |5184| :pattern ( (MapType0Select (|lambda#56| |l#0@@48| |l#1@@41| |l#2@@40| |l#3@@38|) |$y#0@@0|)) )))
(assert (forall ((arg0@@806 T@U) (arg1@@447 T@U) (arg2@@291 T@U) (arg3@@208 Bool) ) (! (= (type (|lambda#60| arg0@@806 arg1@@447 arg2@@291 arg3@@208)) (MapType9Type refType boolType)) :qid |funType:lambda#60| :pattern ( (|lambda#60| arg0@@806 arg1@@447 arg2@@291 arg3@@208)) )))
(assert (forall ((|l#0@@49| T@U) (|l#1@@42| T@U) (|l#2@@41| T@U) (|l#3@@39| Bool) ($o@@116 T@U) ($f@@48 T@U) ) (! (let ((alpha@@55 (FieldTypeInv0 (type $f@@48)))) (=> (and (and (and (and (= (type |l#0@@49|) refType) (= (type |l#1@@42|) (MapType0Type refType MapType1Type))) (= (type |l#2@@41|) (FieldType boolType))) (= (type $o@@116) refType)) (= (type $f@@48) (FieldType alpha@@55))) (= (U_2_bool (MapType9Select (|lambda#60| |l#0@@49| |l#1@@42| |l#2@@41| |l#3@@39|) $o@@116 $f@@48))  (=> (and (not (= $o@@116 |l#0@@49|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@42| $o@@116) |l#2@@41|))) |l#3@@39|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5185| :pattern ( (MapType9Select (|lambda#60| |l#0@@49| |l#1@@42| |l#2@@41| |l#3@@39|) $o@@116 $f@@48)) )))
(assert (forall ((arg0@@807 T@U) (arg1@@448 T@U) (arg2@@292 T@U) (arg3@@209 Bool) ) (! (= (type (|lambda#61| arg0@@807 arg1@@448 arg2@@292 arg3@@209)) (MapType9Type refType boolType)) :qid |funType:lambda#61| :pattern ( (|lambda#61| arg0@@807 arg1@@448 arg2@@292 arg3@@209)) )))
(assert (forall ((|l#0@@50| T@U) (|l#1@@43| T@U) (|l#2@@42| T@U) (|l#3@@40| Bool) ($o@@117 T@U) ($f@@49 T@U) ) (! (let ((alpha@@56 (FieldTypeInv0 (type $f@@49)))) (=> (and (and (and (and (= (type |l#0@@50|) refType) (= (type |l#1@@43|) (MapType0Type refType MapType1Type))) (= (type |l#2@@42|) (FieldType boolType))) (= (type $o@@117) refType)) (= (type $f@@49) (FieldType alpha@@56))) (= (U_2_bool (MapType9Select (|lambda#61| |l#0@@50| |l#1@@43| |l#2@@42| |l#3@@40|) $o@@117 $f@@49))  (=> (and (not (= $o@@117 |l#0@@50|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@43| $o@@117) |l#2@@42|))) |l#3@@40|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5186| :pattern ( (MapType9Select (|lambda#61| |l#0@@50| |l#1@@43| |l#2@@42| |l#3@@40|) $o@@117 $f@@49)) )))
(assert (forall ((arg0@@808 T@U) (arg1@@449 T@U) (arg2@@293 T@U) (arg3@@210 Bool) ) (! (= (type (|lambda#64| arg0@@808 arg1@@449 arg2@@293 arg3@@210)) (MapType9Type refType boolType)) :qid |funType:lambda#64| :pattern ( (|lambda#64| arg0@@808 arg1@@449 arg2@@293 arg3@@210)) )))
(assert (forall ((|l#0@@51| T@U) (|l#1@@44| T@U) (|l#2@@43| T@U) (|l#3@@41| Bool) ($o@@118 T@U) ($f@@50 T@U) ) (! (let ((alpha@@57 (FieldTypeInv0 (type $f@@50)))) (=> (and (and (and (and (= (type |l#0@@51|) refType) (= (type |l#1@@44|) (MapType0Type refType MapType1Type))) (= (type |l#2@@43|) (FieldType boolType))) (= (type $o@@118) refType)) (= (type $f@@50) (FieldType alpha@@57))) (= (U_2_bool (MapType9Select (|lambda#64| |l#0@@51| |l#1@@44| |l#2@@43| |l#3@@41|) $o@@118 $f@@50))  (=> (and (not (= $o@@118 |l#0@@51|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@44| $o@@118) |l#2@@43|))) |l#3@@41|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5187| :pattern ( (MapType9Select (|lambda#64| |l#0@@51| |l#1@@44| |l#2@@43| |l#3@@41|) $o@@118 $f@@50)) )))
(assert (forall ((arg0@@809 T@U) (arg1@@450 T@U) (arg2@@294 T@U) (arg3@@211 Bool) ) (! (= (type (|lambda#65| arg0@@809 arg1@@450 arg2@@294 arg3@@211)) (MapType9Type refType boolType)) :qid |funType:lambda#65| :pattern ( (|lambda#65| arg0@@809 arg1@@450 arg2@@294 arg3@@211)) )))
(assert (forall ((|l#0@@52| T@U) (|l#1@@45| T@U) (|l#2@@44| T@U) (|l#3@@42| Bool) ($o@@119 T@U) ($f@@51 T@U) ) (! (let ((alpha@@58 (FieldTypeInv0 (type $f@@51)))) (=> (and (and (and (and (= (type |l#0@@52|) refType) (= (type |l#1@@45|) (MapType0Type refType MapType1Type))) (= (type |l#2@@44|) (FieldType boolType))) (= (type $o@@119) refType)) (= (type $f@@51) (FieldType alpha@@58))) (= (U_2_bool (MapType9Select (|lambda#65| |l#0@@52| |l#1@@45| |l#2@@44| |l#3@@42|) $o@@119 $f@@51))  (=> (and (not (= $o@@119 |l#0@@52|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@45| $o@@119) |l#2@@44|))) |l#3@@42|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5188| :pattern ( (MapType9Select (|lambda#65| |l#0@@52| |l#1@@45| |l#2@@44| |l#3@@42|) $o@@119 $f@@51)) )))
(assert (forall ((arg0@@810 T@U) (arg1@@451 T@U) (arg2@@295 T@U) (arg3@@212 Bool) ) (! (= (type (|lambda#66| arg0@@810 arg1@@451 arg2@@295 arg3@@212)) (MapType9Type refType boolType)) :qid |funType:lambda#66| :pattern ( (|lambda#66| arg0@@810 arg1@@451 arg2@@295 arg3@@212)) )))
(assert (forall ((|l#0@@53| T@U) (|l#1@@46| T@U) (|l#2@@45| T@U) (|l#3@@43| Bool) ($o@@120 T@U) ($f@@52 T@U) ) (! (let ((alpha@@59 (FieldTypeInv0 (type $f@@52)))) (=> (and (and (and (and (= (type |l#0@@53|) refType) (= (type |l#1@@46|) (MapType0Type refType MapType1Type))) (= (type |l#2@@45|) (FieldType boolType))) (= (type $o@@120) refType)) (= (type $f@@52) (FieldType alpha@@59))) (= (U_2_bool (MapType9Select (|lambda#66| |l#0@@53| |l#1@@46| |l#2@@45| |l#3@@43|) $o@@120 $f@@52))  (=> (and (not (= $o@@120 |l#0@@53|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@46| $o@@120) |l#2@@45|))) |l#3@@43|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5189| :pattern ( (MapType9Select (|lambda#66| |l#0@@53| |l#1@@46| |l#2@@45| |l#3@@43|) $o@@120 $f@@52)) )))
(assert (forall ((arg0@@811 T@U) (arg1@@452 T@U) (arg2@@296 T@U) (arg3@@213 Bool) ) (! (= (type (|lambda#67| arg0@@811 arg1@@452 arg2@@296 arg3@@213)) (MapType9Type refType boolType)) :qid |funType:lambda#67| :pattern ( (|lambda#67| arg0@@811 arg1@@452 arg2@@296 arg3@@213)) )))
(assert (forall ((|l#0@@54| T@U) (|l#1@@47| T@U) (|l#2@@46| T@U) (|l#3@@44| Bool) ($o@@121 T@U) ($f@@53 T@U) ) (! (let ((alpha@@60 (FieldTypeInv0 (type $f@@53)))) (=> (and (and (and (and (= (type |l#0@@54|) refType) (= (type |l#1@@47|) (MapType0Type refType MapType1Type))) (= (type |l#2@@46|) (FieldType boolType))) (= (type $o@@121) refType)) (= (type $f@@53) (FieldType alpha@@60))) (= (U_2_bool (MapType9Select (|lambda#67| |l#0@@54| |l#1@@47| |l#2@@46| |l#3@@44|) $o@@121 $f@@53))  (=> (and (not (= $o@@121 |l#0@@54|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@47| $o@@121) |l#2@@46|))) |l#3@@44|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5190| :pattern ( (MapType9Select (|lambda#67| |l#0@@54| |l#1@@47| |l#2@@46| |l#3@@44|) $o@@121 $f@@53)) )))
(assert (forall ((arg0@@812 T@U) (arg1@@453 T@U) (arg2@@297 T@U) (arg3@@214 Bool) ) (! (= (type (|lambda#68| arg0@@812 arg1@@453 arg2@@297 arg3@@214)) (MapType9Type refType boolType)) :qid |funType:lambda#68| :pattern ( (|lambda#68| arg0@@812 arg1@@453 arg2@@297 arg3@@214)) )))
(assert (forall ((|l#0@@55| T@U) (|l#1@@48| T@U) (|l#2@@47| T@U) (|l#3@@45| Bool) ($o@@122 T@U) ($f@@54 T@U) ) (! (let ((alpha@@61 (FieldTypeInv0 (type $f@@54)))) (=> (and (and (and (and (= (type |l#0@@55|) refType) (= (type |l#1@@48|) (MapType0Type refType MapType1Type))) (= (type |l#2@@47|) (FieldType boolType))) (= (type $o@@122) refType)) (= (type $f@@54) (FieldType alpha@@61))) (= (U_2_bool (MapType9Select (|lambda#68| |l#0@@55| |l#1@@48| |l#2@@47| |l#3@@45|) $o@@122 $f@@54))  (=> (and (not (= $o@@122 |l#0@@55|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@48| $o@@122) |l#2@@47|))) |l#3@@45|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5191| :pattern ( (MapType9Select (|lambda#68| |l#0@@55| |l#1@@48| |l#2@@47| |l#3@@45|) $o@@122 $f@@54)) )))
(assert (forall ((arg0@@813 T@U) (arg1@@454 T@U) (arg2@@298 T@U) (arg3@@215 Bool) ) (! (= (type (|lambda#69| arg0@@813 arg1@@454 arg2@@298 arg3@@215)) (MapType9Type refType boolType)) :qid |funType:lambda#69| :pattern ( (|lambda#69| arg0@@813 arg1@@454 arg2@@298 arg3@@215)) )))
(assert (forall ((|l#0@@56| T@U) (|l#1@@49| T@U) (|l#2@@48| T@U) (|l#3@@46| Bool) ($o@@123 T@U) ($f@@55 T@U) ) (! (let ((alpha@@62 (FieldTypeInv0 (type $f@@55)))) (=> (and (and (and (and (= (type |l#0@@56|) refType) (= (type |l#1@@49|) (MapType0Type refType MapType1Type))) (= (type |l#2@@48|) (FieldType boolType))) (= (type $o@@123) refType)) (= (type $f@@55) (FieldType alpha@@62))) (= (U_2_bool (MapType9Select (|lambda#69| |l#0@@56| |l#1@@49| |l#2@@48| |l#3@@46|) $o@@123 $f@@55))  (=> (and (not (= $o@@123 |l#0@@56|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@49| $o@@123) |l#2@@48|))) |l#3@@46|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5192| :pattern ( (MapType9Select (|lambda#69| |l#0@@56| |l#1@@49| |l#2@@48| |l#3@@46|) $o@@123 $f@@55)) )))
(assert (forall ((arg0@@814 T@U) (arg1@@455 T@U) (arg2@@299 T@U) (arg3@@216 Bool) ) (! (= (type (|lambda#70| arg0@@814 arg1@@455 arg2@@299 arg3@@216)) (MapType9Type refType boolType)) :qid |funType:lambda#70| :pattern ( (|lambda#70| arg0@@814 arg1@@455 arg2@@299 arg3@@216)) )))
(assert (forall ((|l#0@@57| T@U) (|l#1@@50| T@U) (|l#2@@49| T@U) (|l#3@@47| Bool) ($o@@124 T@U) ($f@@56 T@U) ) (! (let ((alpha@@63 (FieldTypeInv0 (type $f@@56)))) (=> (and (and (and (and (= (type |l#0@@57|) refType) (= (type |l#1@@50|) (MapType0Type refType MapType1Type))) (= (type |l#2@@49|) (FieldType boolType))) (= (type $o@@124) refType)) (= (type $f@@56) (FieldType alpha@@63))) (= (U_2_bool (MapType9Select (|lambda#70| |l#0@@57| |l#1@@50| |l#2@@49| |l#3@@47|) $o@@124 $f@@56))  (=> (and (not (= $o@@124 |l#0@@57|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@50| $o@@124) |l#2@@49|))) |l#3@@47|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5193| :pattern ( (MapType9Select (|lambda#70| |l#0@@57| |l#1@@50| |l#2@@49| |l#3@@47|) $o@@124 $f@@56)) )))
(assert (forall ((arg0@@815 T@U) (arg1@@456 T@U) (arg2@@300 T@U) (arg3@@217 Bool) ) (! (= (type (|lambda#71| arg0@@815 arg1@@456 arg2@@300 arg3@@217)) (MapType9Type refType boolType)) :qid |funType:lambda#71| :pattern ( (|lambda#71| arg0@@815 arg1@@456 arg2@@300 arg3@@217)) )))
(assert (forall ((|l#0@@58| T@U) (|l#1@@51| T@U) (|l#2@@50| T@U) (|l#3@@48| Bool) ($o@@125 T@U) ($f@@57 T@U) ) (! (let ((alpha@@64 (FieldTypeInv0 (type $f@@57)))) (=> (and (and (and (and (= (type |l#0@@58|) refType) (= (type |l#1@@51|) (MapType0Type refType MapType1Type))) (= (type |l#2@@50|) (FieldType boolType))) (= (type $o@@125) refType)) (= (type $f@@57) (FieldType alpha@@64))) (= (U_2_bool (MapType9Select (|lambda#71| |l#0@@58| |l#1@@51| |l#2@@50| |l#3@@48|) $o@@125 $f@@57))  (=> (and (not (= $o@@125 |l#0@@58|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@51| $o@@125) |l#2@@50|))) |l#3@@48|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5194| :pattern ( (MapType9Select (|lambda#71| |l#0@@58| |l#1@@51| |l#2@@50| |l#3@@48|) $o@@125 $f@@57)) )))
(assert (forall ((arg0@@816 T@U) (arg1@@457 T@U) (arg2@@301 T@U) (arg3@@218 Bool) ) (! (= (type (|lambda#72| arg0@@816 arg1@@457 arg2@@301 arg3@@218)) (MapType9Type refType boolType)) :qid |funType:lambda#72| :pattern ( (|lambda#72| arg0@@816 arg1@@457 arg2@@301 arg3@@218)) )))
(assert (forall ((|l#0@@59| T@U) (|l#1@@52| T@U) (|l#2@@51| T@U) (|l#3@@49| Bool) ($o@@126 T@U) ($f@@58 T@U) ) (! (let ((alpha@@65 (FieldTypeInv0 (type $f@@58)))) (=> (and (and (and (and (= (type |l#0@@59|) refType) (= (type |l#1@@52|) (MapType0Type refType MapType1Type))) (= (type |l#2@@51|) (FieldType boolType))) (= (type $o@@126) refType)) (= (type $f@@58) (FieldType alpha@@65))) (= (U_2_bool (MapType9Select (|lambda#72| |l#0@@59| |l#1@@52| |l#2@@51| |l#3@@49|) $o@@126 $f@@58))  (=> (and (not (= $o@@126 |l#0@@59|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@52| $o@@126) |l#2@@51|))) |l#3@@49|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5195| :pattern ( (MapType9Select (|lambda#72| |l#0@@59| |l#1@@52| |l#2@@51| |l#3@@49|) $o@@126 $f@@58)) )))
(assert (forall ((arg0@@817 T@U) (arg1@@458 T@U) (arg2@@302 T@U) (arg3@@219 Bool) ) (! (= (type (|lambda#73| arg0@@817 arg1@@458 arg2@@302 arg3@@219)) (MapType9Type refType boolType)) :qid |funType:lambda#73| :pattern ( (|lambda#73| arg0@@817 arg1@@458 arg2@@302 arg3@@219)) )))
(assert (forall ((|l#0@@60| T@U) (|l#1@@53| T@U) (|l#2@@52| T@U) (|l#3@@50| Bool) ($o@@127 T@U) ($f@@59 T@U) ) (! (let ((alpha@@66 (FieldTypeInv0 (type $f@@59)))) (=> (and (and (and (and (= (type |l#0@@60|) refType) (= (type |l#1@@53|) (MapType0Type refType MapType1Type))) (= (type |l#2@@52|) (FieldType boolType))) (= (type $o@@127) refType)) (= (type $f@@59) (FieldType alpha@@66))) (= (U_2_bool (MapType9Select (|lambda#73| |l#0@@60| |l#1@@53| |l#2@@52| |l#3@@50|) $o@@127 $f@@59))  (=> (and (not (= $o@@127 |l#0@@60|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@53| $o@@127) |l#2@@52|))) |l#3@@50|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5196| :pattern ( (MapType9Select (|lambda#73| |l#0@@60| |l#1@@53| |l#2@@52| |l#3@@50|) $o@@127 $f@@59)) )))
(assert (forall ((arg0@@818 T@U) (arg1@@459 T@U) (arg2@@303 T@U) (arg3@@220 Bool) ) (! (= (type (|lambda#74| arg0@@818 arg1@@459 arg2@@303 arg3@@220)) (MapType9Type refType boolType)) :qid |funType:lambda#74| :pattern ( (|lambda#74| arg0@@818 arg1@@459 arg2@@303 arg3@@220)) )))
(assert (forall ((|l#0@@61| T@U) (|l#1@@54| T@U) (|l#2@@53| T@U) (|l#3@@51| Bool) ($o@@128 T@U) ($f@@60 T@U) ) (! (let ((alpha@@67 (FieldTypeInv0 (type $f@@60)))) (=> (and (and (and (and (= (type |l#0@@61|) refType) (= (type |l#1@@54|) (MapType0Type refType MapType1Type))) (= (type |l#2@@53|) (FieldType boolType))) (= (type $o@@128) refType)) (= (type $f@@60) (FieldType alpha@@67))) (= (U_2_bool (MapType9Select (|lambda#74| |l#0@@61| |l#1@@54| |l#2@@53| |l#3@@51|) $o@@128 $f@@60))  (=> (and (not (= $o@@128 |l#0@@61|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@54| $o@@128) |l#2@@53|))) |l#3@@51|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5197| :pattern ( (MapType9Select (|lambda#74| |l#0@@61| |l#1@@54| |l#2@@53| |l#3@@51|) $o@@128 $f@@60)) )))
(assert (forall ((arg0@@819 T@U) (arg1@@460 T@U) (arg2@@304 T@U) (arg3@@221 Bool) ) (! (= (type (|lambda#75| arg0@@819 arg1@@460 arg2@@304 arg3@@221)) (MapType9Type refType boolType)) :qid |funType:lambda#75| :pattern ( (|lambda#75| arg0@@819 arg1@@460 arg2@@304 arg3@@221)) )))
(assert (forall ((|l#0@@62| T@U) (|l#1@@55| T@U) (|l#2@@54| T@U) (|l#3@@52| Bool) ($o@@129 T@U) ($f@@61 T@U) ) (! (let ((alpha@@68 (FieldTypeInv0 (type $f@@61)))) (=> (and (and (and (and (= (type |l#0@@62|) refType) (= (type |l#1@@55|) (MapType0Type refType MapType1Type))) (= (type |l#2@@54|) (FieldType boolType))) (= (type $o@@129) refType)) (= (type $f@@61) (FieldType alpha@@68))) (= (U_2_bool (MapType9Select (|lambda#75| |l#0@@62| |l#1@@55| |l#2@@54| |l#3@@52|) $o@@129 $f@@61))  (=> (and (not (= $o@@129 |l#0@@62|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@55| $o@@129) |l#2@@54|))) |l#3@@52|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5198| :pattern ( (MapType9Select (|lambda#75| |l#0@@62| |l#1@@55| |l#2@@54| |l#3@@52|) $o@@129 $f@@61)) )))
(assert (forall ((arg0@@820 T@U) (arg1@@461 T@U) (arg2@@305 T@U) (arg3@@222 Bool) ) (! (= (type (|lambda#76| arg0@@820 arg1@@461 arg2@@305 arg3@@222)) (MapType9Type refType boolType)) :qid |funType:lambda#76| :pattern ( (|lambda#76| arg0@@820 arg1@@461 arg2@@305 arg3@@222)) )))
(assert (forall ((|l#0@@63| T@U) (|l#1@@56| T@U) (|l#2@@55| T@U) (|l#3@@53| Bool) ($o@@130 T@U) ($f@@62 T@U) ) (! (let ((alpha@@69 (FieldTypeInv0 (type $f@@62)))) (=> (and (and (and (and (= (type |l#0@@63|) refType) (= (type |l#1@@56|) (MapType0Type refType MapType1Type))) (= (type |l#2@@55|) (FieldType boolType))) (= (type $o@@130) refType)) (= (type $f@@62) (FieldType alpha@@69))) (= (U_2_bool (MapType9Select (|lambda#76| |l#0@@63| |l#1@@56| |l#2@@55| |l#3@@53|) $o@@130 $f@@62))  (=> (and (not (= $o@@130 |l#0@@63|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@56| $o@@130) |l#2@@55|))) |l#3@@53|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5199| :pattern ( (MapType9Select (|lambda#76| |l#0@@63| |l#1@@56| |l#2@@55| |l#3@@53|) $o@@130 $f@@62)) )))
(assert (forall ((arg0@@821 T@U) (arg1@@462 T@U) (arg2@@306 T@U) (arg3@@223 Bool) ) (! (= (type (|lambda#77| arg0@@821 arg1@@462 arg2@@306 arg3@@223)) (MapType9Type refType boolType)) :qid |funType:lambda#77| :pattern ( (|lambda#77| arg0@@821 arg1@@462 arg2@@306 arg3@@223)) )))
(assert (forall ((|l#0@@64| T@U) (|l#1@@57| T@U) (|l#2@@56| T@U) (|l#3@@54| Bool) ($o@@131 T@U) ($f@@63 T@U) ) (! (let ((alpha@@70 (FieldTypeInv0 (type $f@@63)))) (=> (and (and (and (and (= (type |l#0@@64|) refType) (= (type |l#1@@57|) (MapType0Type refType MapType1Type))) (= (type |l#2@@56|) (FieldType boolType))) (= (type $o@@131) refType)) (= (type $f@@63) (FieldType alpha@@70))) (= (U_2_bool (MapType9Select (|lambda#77| |l#0@@64| |l#1@@57| |l#2@@56| |l#3@@54|) $o@@131 $f@@63))  (=> (and (not (= $o@@131 |l#0@@64|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@57| $o@@131) |l#2@@56|))) |l#3@@54|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5200| :pattern ( (MapType9Select (|lambda#77| |l#0@@64| |l#1@@57| |l#2@@56| |l#3@@54|) $o@@131 $f@@63)) )))
(assert (forall ((arg0@@822 T@U) (arg1@@463 T@U) (arg2@@307 T@U) (arg3@@224 Bool) ) (! (= (type (|lambda#78| arg0@@822 arg1@@463 arg2@@307 arg3@@224)) (MapType9Type refType boolType)) :qid |funType:lambda#78| :pattern ( (|lambda#78| arg0@@822 arg1@@463 arg2@@307 arg3@@224)) )))
(assert (forall ((|l#0@@65| T@U) (|l#1@@58| T@U) (|l#2@@57| T@U) (|l#3@@55| Bool) ($o@@132 T@U) ($f@@64 T@U) ) (! (let ((alpha@@71 (FieldTypeInv0 (type $f@@64)))) (=> (and (and (and (and (= (type |l#0@@65|) refType) (= (type |l#1@@58|) (MapType0Type refType MapType1Type))) (= (type |l#2@@57|) (FieldType boolType))) (= (type $o@@132) refType)) (= (type $f@@64) (FieldType alpha@@71))) (= (U_2_bool (MapType9Select (|lambda#78| |l#0@@65| |l#1@@58| |l#2@@57| |l#3@@55|) $o@@132 $f@@64))  (=> (and (not (= $o@@132 |l#0@@65|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@58| $o@@132) |l#2@@57|))) |l#3@@55|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5201| :pattern ( (MapType9Select (|lambda#78| |l#0@@65| |l#1@@58| |l#2@@57| |l#3@@55|) $o@@132 $f@@64)) )))
(assert (forall ((arg0@@823 T@U) (arg1@@464 T@U) (arg2@@308 T@U) (arg3@@225 Bool) ) (! (= (type (|lambda#79| arg0@@823 arg1@@464 arg2@@308 arg3@@225)) (MapType9Type refType boolType)) :qid |funType:lambda#79| :pattern ( (|lambda#79| arg0@@823 arg1@@464 arg2@@308 arg3@@225)) )))
(assert (forall ((|l#0@@66| T@U) (|l#1@@59| T@U) (|l#2@@58| T@U) (|l#3@@56| Bool) ($o@@133 T@U) ($f@@65 T@U) ) (! (let ((alpha@@72 (FieldTypeInv0 (type $f@@65)))) (=> (and (and (and (and (= (type |l#0@@66|) refType) (= (type |l#1@@59|) (MapType0Type refType MapType1Type))) (= (type |l#2@@58|) (FieldType boolType))) (= (type $o@@133) refType)) (= (type $f@@65) (FieldType alpha@@72))) (= (U_2_bool (MapType9Select (|lambda#79| |l#0@@66| |l#1@@59| |l#2@@58| |l#3@@56|) $o@@133 $f@@65))  (=> (and (not (= $o@@133 |l#0@@66|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@59| $o@@133) |l#2@@58|))) |l#3@@56|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5202| :pattern ( (MapType9Select (|lambda#79| |l#0@@66| |l#1@@59| |l#2@@58| |l#3@@56|) $o@@133 $f@@65)) )))
(assert (forall ((arg0@@824 T@U) (arg1@@465 T@U) (arg2@@309 T@U) (arg3@@226 Bool) ) (! (= (type (|lambda#80| arg0@@824 arg1@@465 arg2@@309 arg3@@226)) (MapType9Type refType boolType)) :qid |funType:lambda#80| :pattern ( (|lambda#80| arg0@@824 arg1@@465 arg2@@309 arg3@@226)) )))
(assert (forall ((|l#0@@67| T@U) (|l#1@@60| T@U) (|l#2@@59| T@U) (|l#3@@57| Bool) ($o@@134 T@U) ($f@@66 T@U) ) (! (let ((alpha@@73 (FieldTypeInv0 (type $f@@66)))) (=> (and (and (and (and (= (type |l#0@@67|) refType) (= (type |l#1@@60|) (MapType0Type refType MapType1Type))) (= (type |l#2@@59|) (FieldType boolType))) (= (type $o@@134) refType)) (= (type $f@@66) (FieldType alpha@@73))) (= (U_2_bool (MapType9Select (|lambda#80| |l#0@@67| |l#1@@60| |l#2@@59| |l#3@@57|) $o@@134 $f@@66))  (=> (and (not (= $o@@134 |l#0@@67|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@60| $o@@134) |l#2@@59|))) |l#3@@57|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5203| :pattern ( (MapType9Select (|lambda#80| |l#0@@67| |l#1@@60| |l#2@@59| |l#3@@57|) $o@@134 $f@@66)) )))
(assert (forall ((arg0@@825 T@U) (arg1@@466 T@U) (arg2@@310 T@U) (arg3@@227 Bool) ) (! (= (type (|lambda#81| arg0@@825 arg1@@466 arg2@@310 arg3@@227)) (MapType9Type refType boolType)) :qid |funType:lambda#81| :pattern ( (|lambda#81| arg0@@825 arg1@@466 arg2@@310 arg3@@227)) )))
(assert (forall ((|l#0@@68| T@U) (|l#1@@61| T@U) (|l#2@@60| T@U) (|l#3@@58| Bool) ($o@@135 T@U) ($f@@67 T@U) ) (! (let ((alpha@@74 (FieldTypeInv0 (type $f@@67)))) (=> (and (and (and (and (= (type |l#0@@68|) refType) (= (type |l#1@@61|) (MapType0Type refType MapType1Type))) (= (type |l#2@@60|) (FieldType boolType))) (= (type $o@@135) refType)) (= (type $f@@67) (FieldType alpha@@74))) (= (U_2_bool (MapType9Select (|lambda#81| |l#0@@68| |l#1@@61| |l#2@@60| |l#3@@58|) $o@@135 $f@@67))  (=> (and (not (= $o@@135 |l#0@@68|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@61| $o@@135) |l#2@@60|))) |l#3@@58|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5204| :pattern ( (MapType9Select (|lambda#81| |l#0@@68| |l#1@@61| |l#2@@60| |l#3@@58|) $o@@135 $f@@67)) )))
(assert (forall ((arg0@@826 T@U) (arg1@@467 T@U) (arg2@@311 T@U) (arg3@@228 Bool) ) (! (= (type (|lambda#82| arg0@@826 arg1@@467 arg2@@311 arg3@@228)) (MapType9Type refType boolType)) :qid |funType:lambda#82| :pattern ( (|lambda#82| arg0@@826 arg1@@467 arg2@@311 arg3@@228)) )))
(assert (forall ((|l#0@@69| T@U) (|l#1@@62| T@U) (|l#2@@61| T@U) (|l#3@@59| Bool) ($o@@136 T@U) ($f@@68 T@U) ) (! (let ((alpha@@75 (FieldTypeInv0 (type $f@@68)))) (=> (and (and (and (and (= (type |l#0@@69|) refType) (= (type |l#1@@62|) (MapType0Type refType MapType1Type))) (= (type |l#2@@61|) (FieldType boolType))) (= (type $o@@136) refType)) (= (type $f@@68) (FieldType alpha@@75))) (= (U_2_bool (MapType9Select (|lambda#82| |l#0@@69| |l#1@@62| |l#2@@61| |l#3@@59|) $o@@136 $f@@68))  (=> (and (not (= $o@@136 |l#0@@69|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@62| $o@@136) |l#2@@61|))) |l#3@@59|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5205| :pattern ( (MapType9Select (|lambda#82| |l#0@@69| |l#1@@62| |l#2@@61| |l#3@@59|) $o@@136 $f@@68)) )))
(assert (forall ((arg0@@827 T@U) (arg1@@468 T@U) (arg2@@312 T@U) (arg3@@229 Bool) ) (! (= (type (|lambda#83| arg0@@827 arg1@@468 arg2@@312 arg3@@229)) (MapType9Type refType boolType)) :qid |funType:lambda#83| :pattern ( (|lambda#83| arg0@@827 arg1@@468 arg2@@312 arg3@@229)) )))
(assert (forall ((|l#0@@70| T@U) (|l#1@@63| T@U) (|l#2@@62| T@U) (|l#3@@60| Bool) ($o@@137 T@U) ($f@@69 T@U) ) (! (let ((alpha@@76 (FieldTypeInv0 (type $f@@69)))) (=> (and (and (and (and (= (type |l#0@@70|) refType) (= (type |l#1@@63|) (MapType0Type refType MapType1Type))) (= (type |l#2@@62|) (FieldType boolType))) (= (type $o@@137) refType)) (= (type $f@@69) (FieldType alpha@@76))) (= (U_2_bool (MapType9Select (|lambda#83| |l#0@@70| |l#1@@63| |l#2@@62| |l#3@@60|) $o@@137 $f@@69))  (=> (and (not (= $o@@137 |l#0@@70|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@63| $o@@137) |l#2@@62|))) |l#3@@60|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5206| :pattern ( (MapType9Select (|lambda#83| |l#0@@70| |l#1@@63| |l#2@@62| |l#3@@60|) $o@@137 $f@@69)) )))
(assert (forall ((arg0@@828 T@U) (arg1@@469 T@U) (arg2@@313 T@U) (arg3@@230 Bool) ) (! (= (type (|lambda#84| arg0@@828 arg1@@469 arg2@@313 arg3@@230)) (MapType9Type refType boolType)) :qid |funType:lambda#84| :pattern ( (|lambda#84| arg0@@828 arg1@@469 arg2@@313 arg3@@230)) )))
(assert (forall ((|l#0@@71| T@U) (|l#1@@64| T@U) (|l#2@@63| T@U) (|l#3@@61| Bool) ($o@@138 T@U) ($f@@70 T@U) ) (! (let ((alpha@@77 (FieldTypeInv0 (type $f@@70)))) (=> (and (and (and (and (= (type |l#0@@71|) refType) (= (type |l#1@@64|) (MapType0Type refType MapType1Type))) (= (type |l#2@@63|) (FieldType boolType))) (= (type $o@@138) refType)) (= (type $f@@70) (FieldType alpha@@77))) (= (U_2_bool (MapType9Select (|lambda#84| |l#0@@71| |l#1@@64| |l#2@@63| |l#3@@61|) $o@@138 $f@@70))  (=> (and (not (= $o@@138 |l#0@@71|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@64| $o@@138) |l#2@@63|))) |l#3@@61|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5207| :pattern ( (MapType9Select (|lambda#84| |l#0@@71| |l#1@@64| |l#2@@63| |l#3@@61|) $o@@138 $f@@70)) )))
(assert (forall ((arg0@@829 T@U) (arg1@@470 T@U) (arg2@@314 T@U) (arg3@@231 Bool) ) (! (= (type (|lambda#85| arg0@@829 arg1@@470 arg2@@314 arg3@@231)) (MapType9Type refType boolType)) :qid |funType:lambda#85| :pattern ( (|lambda#85| arg0@@829 arg1@@470 arg2@@314 arg3@@231)) )))
(assert (forall ((|l#0@@72| T@U) (|l#1@@65| T@U) (|l#2@@64| T@U) (|l#3@@62| Bool) ($o@@139 T@U) ($f@@71 T@U) ) (! (let ((alpha@@78 (FieldTypeInv0 (type $f@@71)))) (=> (and (and (and (and (= (type |l#0@@72|) refType) (= (type |l#1@@65|) (MapType0Type refType MapType1Type))) (= (type |l#2@@64|) (FieldType boolType))) (= (type $o@@139) refType)) (= (type $f@@71) (FieldType alpha@@78))) (= (U_2_bool (MapType9Select (|lambda#85| |l#0@@72| |l#1@@65| |l#2@@64| |l#3@@62|) $o@@139 $f@@71))  (=> (and (not (= $o@@139 |l#0@@72|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@65| $o@@139) |l#2@@64|))) |l#3@@62|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5208| :pattern ( (MapType9Select (|lambda#85| |l#0@@72| |l#1@@65| |l#2@@64| |l#3@@62|) $o@@139 $f@@71)) )))
(assert (forall ((arg0@@830 T@U) (arg1@@471 T@U) (arg2@@315 T@U) (arg3@@232 Bool) ) (! (= (type (|lambda#86| arg0@@830 arg1@@471 arg2@@315 arg3@@232)) (MapType9Type refType boolType)) :qid |funType:lambda#86| :pattern ( (|lambda#86| arg0@@830 arg1@@471 arg2@@315 arg3@@232)) )))
(assert (forall ((|l#0@@73| T@U) (|l#1@@66| T@U) (|l#2@@65| T@U) (|l#3@@63| Bool) ($o@@140 T@U) ($f@@72 T@U) ) (! (let ((alpha@@79 (FieldTypeInv0 (type $f@@72)))) (=> (and (and (and (and (= (type |l#0@@73|) refType) (= (type |l#1@@66|) (MapType0Type refType MapType1Type))) (= (type |l#2@@65|) (FieldType boolType))) (= (type $o@@140) refType)) (= (type $f@@72) (FieldType alpha@@79))) (= (U_2_bool (MapType9Select (|lambda#86| |l#0@@73| |l#1@@66| |l#2@@65| |l#3@@63|) $o@@140 $f@@72))  (=> (and (not (= $o@@140 |l#0@@73|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@66| $o@@140) |l#2@@65|))) |l#3@@63|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5209| :pattern ( (MapType9Select (|lambda#86| |l#0@@73| |l#1@@66| |l#2@@65| |l#3@@63|) $o@@140 $f@@72)) )))
(assert (forall ((arg0@@831 T@U) (arg1@@472 T@U) (arg2@@316 T@U) (arg3@@233 Bool) ) (! (= (type (|lambda#87| arg0@@831 arg1@@472 arg2@@316 arg3@@233)) (MapType9Type refType boolType)) :qid |funType:lambda#87| :pattern ( (|lambda#87| arg0@@831 arg1@@472 arg2@@316 arg3@@233)) )))
(assert (forall ((|l#0@@74| T@U) (|l#1@@67| T@U) (|l#2@@66| T@U) (|l#3@@64| Bool) ($o@@141 T@U) ($f@@73 T@U) ) (! (let ((alpha@@80 (FieldTypeInv0 (type $f@@73)))) (=> (and (and (and (and (= (type |l#0@@74|) refType) (= (type |l#1@@67|) (MapType0Type refType MapType1Type))) (= (type |l#2@@66|) (FieldType boolType))) (= (type $o@@141) refType)) (= (type $f@@73) (FieldType alpha@@80))) (= (U_2_bool (MapType9Select (|lambda#87| |l#0@@74| |l#1@@67| |l#2@@66| |l#3@@64|) $o@@141 $f@@73))  (=> (and (not (= $o@@141 |l#0@@74|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@67| $o@@141) |l#2@@66|))) |l#3@@64|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5210| :pattern ( (MapType9Select (|lambda#87| |l#0@@74| |l#1@@67| |l#2@@66| |l#3@@64|) $o@@141 $f@@73)) )))
(assert (forall ((arg0@@832 T@U) (arg1@@473 T@U) (arg2@@317 T@U) (arg3@@234 Bool) ) (! (= (type (|lambda#88| arg0@@832 arg1@@473 arg2@@317 arg3@@234)) (MapType9Type refType boolType)) :qid |funType:lambda#88| :pattern ( (|lambda#88| arg0@@832 arg1@@473 arg2@@317 arg3@@234)) )))
(assert (forall ((|l#0@@75| T@U) (|l#1@@68| T@U) (|l#2@@67| T@U) (|l#3@@65| Bool) ($o@@142 T@U) ($f@@74 T@U) ) (! (let ((alpha@@81 (FieldTypeInv0 (type $f@@74)))) (=> (and (and (and (and (= (type |l#0@@75|) refType) (= (type |l#1@@68|) (MapType0Type refType MapType1Type))) (= (type |l#2@@67|) (FieldType boolType))) (= (type $o@@142) refType)) (= (type $f@@74) (FieldType alpha@@81))) (= (U_2_bool (MapType9Select (|lambda#88| |l#0@@75| |l#1@@68| |l#2@@67| |l#3@@65|) $o@@142 $f@@74))  (=> (and (not (= $o@@142 |l#0@@75|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@68| $o@@142) |l#2@@67|))) |l#3@@65|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5211| :pattern ( (MapType9Select (|lambda#88| |l#0@@75| |l#1@@68| |l#2@@67| |l#3@@65|) $o@@142 $f@@74)) )))
(assert (forall ((arg0@@833 T@U) (arg1@@474 T@U) (arg2@@318 T@U) (arg3@@235 Bool) ) (! (= (type (|lambda#89| arg0@@833 arg1@@474 arg2@@318 arg3@@235)) (MapType9Type refType boolType)) :qid |funType:lambda#89| :pattern ( (|lambda#89| arg0@@833 arg1@@474 arg2@@318 arg3@@235)) )))
(assert (forall ((|l#0@@76| T@U) (|l#1@@69| T@U) (|l#2@@68| T@U) (|l#3@@66| Bool) ($o@@143 T@U) ($f@@75 T@U) ) (! (let ((alpha@@82 (FieldTypeInv0 (type $f@@75)))) (=> (and (and (and (and (= (type |l#0@@76|) refType) (= (type |l#1@@69|) (MapType0Type refType MapType1Type))) (= (type |l#2@@68|) (FieldType boolType))) (= (type $o@@143) refType)) (= (type $f@@75) (FieldType alpha@@82))) (= (U_2_bool (MapType9Select (|lambda#89| |l#0@@76| |l#1@@69| |l#2@@68| |l#3@@66|) $o@@143 $f@@75))  (=> (and (not (= $o@@143 |l#0@@76|)) (U_2_bool (MapType1Select (MapType0Select |l#1@@69| $o@@143) |l#2@@68|))) |l#3@@66|)))) :qid |DafnyPreludebpl.129:1| :skolemid |5212| :pattern ( (MapType9Select (|lambda#89| |l#0@@76| |l#1@@69| |l#2@@68| |l#3@@66|) $o@@143 $f@@75)) )))
(assert (forall ((|l#0@@77| T@U) (|l#1@@70| T@U) (|l#2@@69| Int) (|$y#0@@1| T@U) ) (!  (=> (and (and (= (type |l#0@@77|) TyType) (= (type |l#1@@70|) (MapType0Type BoxType intType))) (= (type |$y#0@@1|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#90| |l#0@@77| |l#1@@70| |l#2@@69|) |$y#0@@1|))  (and ($IsBox |$y#0@@1| |l#0@@77|) (> (U_2_int (MapType0Select |l#1@@70| |$y#0@@1|)) |l#2@@69|)))) :qid |unknown.0:0| :skolemid |5213| :pattern ( (MapType0Select (|lambda#90| |l#0@@77| |l#1@@70| |l#2@@69|) |$y#0@@1|)) )))
(assert (forall ((|l#0@@78| T@U) (|l#1@@71| T@U) (|$y#0@@2| T@U) ) (!  (=> (and (and (= (type |l#0@@78|) TyType) (= (type |l#1@@71|) (MapType0Type BoxType boolType))) (= (type |$y#0@@2|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#92| |l#0@@78| |l#1@@71|) |$y#0@@2|))  (and ($IsBox |$y#0@@2| |l#0@@78|) (U_2_bool (MapType0Select |l#1@@71| |$y#0@@2|))))) :qid |unknown.0:0| :skolemid |5214| :pattern ( (MapType0Select (|lambda#92| |l#0@@78| |l#1@@71|) |$y#0@@2|)) )))
(assert (forall ((|l#0@@79| T@U) (|l#1@@72| Int) (|l#2@@70| Int) (|$y#0@@3| T@U) ) (!  (=> (and (= (type |l#0@@79|) TyType) (= (type |$y#0@@3|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#98| |l#0@@79| |l#1@@72| |l#2@@70|) |$y#0@@3|))  (and ($IsBox |$y#0@@3| |l#0@@79|) (and (<= |l#1@@72| (U_2_int ($Unbox intType |$y#0@@3|))) (< (U_2_int ($Unbox intType |$y#0@@3|)) |l#2@@70|))))) :qid |DafnyPreludebpl.22:1| :skolemid |5215| :pattern ( (MapType0Select (|lambda#98| |l#0@@79| |l#1@@72| |l#2@@70|) |$y#0@@3|)) )))
(assert (forall ((|l#0@@80| T@U) (|l#1@@73| T@U) (|l#2@@71| T@U) (|$w#0@@3| T@U) ) (!  (=> (and (and (and (= (type |l#0@@80|) TyType) (= (type |l#1@@73|) (MapType0Type BoxType boolType))) (= (type |l#2@@71|) BoxType)) (= (type |$w#0@@3|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#100| |l#0@@80| |l#1@@73| |l#2@@71|) |$w#0@@3|))  (and ($IsBox |$w#0@@3| |l#0@@80|) (and (U_2_bool (MapType0Select |l#1@@73| |$w#0@@3|)) (not (= |$w#0@@3| |l#2@@71|)))))) :qid |unknown.0:0| :skolemid |5216| :pattern ( (MapType0Select (|lambda#100| |l#0@@80| |l#1@@73| |l#2@@71|) |$w#0@@3|)) )))
(assert (forall ((|l#0@@81| T@U) (|l#1@@74| T@U) (|l#2@@72| T@U) (|$w#0@@4| T@U) ) (!  (=> (and (and (and (= (type |l#0@@81|) TyType) (= (type |l#1@@74|) (MapType0Type BoxType boolType))) (= (type |l#2@@72|) (MapType0Type BoxType boolType))) (= (type |$w#0@@4|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#106| |l#0@@81| |l#1@@74| |l#2@@72|) |$w#0@@4|))  (and ($IsBox |$w#0@@4| |l#0@@81|) (and (U_2_bool (MapType0Select |l#1@@74| |$w#0@@4|)) (not (U_2_bool (MapType0Select |l#2@@72| |$w#0@@4|))))))) :qid |unknown.0:0| :skolemid |5217| :pattern ( (MapType0Select (|lambda#106| |l#0@@81| |l#1@@74| |l#2@@72|) |$w#0@@4|)) )))
(assert (forall ((|l#0@@82| T@U) (|l#1@@75| T@U) (|l#2@@73| T@U) (|$w#0@@5| T@U) ) (!  (=> (and (and (and (= (type |l#0@@82|) (MapType0Type BoxType boolType)) (= (type |l#1@@75|) (MapType0Type BoxType BoxType))) (= (type |l#2@@73|) (MapType0Type BoxType BoxType))) (= (type |$w#0@@5|) BoxType)) (= (MapType0Select (|lambda#133| |l#0@@82| |l#1@@75| |l#2@@73|) |$w#0@@5|) (ite (U_2_bool (MapType0Select |l#0@@82| |$w#0@@5|)) (MapType0Select |l#1@@75| |$w#0@@5|) (MapType0Select |l#2@@73| |$w#0@@5|)))) :qid |Mapsidfy.115:52| :skolemid |5218| :pattern ( (MapType0Select (|lambda#133| |l#0@@82| |l#1@@75| |l#2@@73|) |$w#0@@5|)) )))
(assert (forall ((|l#0@@83| T@U) (|l#1@@76| T@U) (|l#2@@74| T@U) (|l#3@@67| T@U) (|l#4@@0| T@U) (|$w#0@@6| T@U) ) (!  (=> (and (and (and (and (and (= (type |l#0@@83|) (MapType0Type BoxType boolType)) (= (type |l#1@@76|) (MapType0Type BoxType BoxType))) (= (type |l#2@@74|) (MapType0Type BoxType boolType))) (= (type |l#3@@67|) (MapType0Type BoxType BoxType))) (= (type |l#4@@0|) (MapType0Type BoxType BoxType))) (= (type |$w#0@@6|) BoxType)) (= (MapType0Select (|lambda#153| |l#0@@83| |l#1@@76| |l#2@@74| |l#3@@67| |l#4@@0|) |$w#0@@6|) (ite (U_2_bool (MapType0Select |l#0@@83| |$w#0@@6|)) (MapType0Select |l#1@@76| |$w#0@@6|) (ite (U_2_bool (MapType0Select |l#2@@74| |$w#0@@6|)) (MapType0Select |l#3@@67| |$w#0@@6|) (MapType0Select |l#4@@0| |$w#0@@6|))))) :qid |Mapsidfy.190:9| :skolemid |5219| :pattern ( (MapType0Select (|lambda#153| |l#0@@83| |l#1@@76| |l#2@@74| |l#3@@67| |l#4@@0|) |$w#0@@6|)) )))
(assert (forall ((|l#0@@84| T@U) (|l#1@@77| T@U) (|$l#0#heap#0| T@U) (|$l#0#i#0| T@U) ) (!  (=> (and (and (and (= (type |l#0@@84|) TyType) (= (type |l#1@@77|) (SeqType BoxType))) (= (type |$l#0#heap#0|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0|) BoxType)) (= (MapType2Select (|lambda#160| |l#0@@84| |l#1@@77|) |$l#0#heap#0| |$l#0#i#0|) ($Box (bool_2_U (LinearMaybe.__default.has |l#0@@84| (|Seq#Index| |l#1@@77| (U_2_int ($Unbox intType |$l#0#i#0|)))))))) :qid |unknown.0:0| :skolemid |5220| :pattern ( (MapType2Select (|lambda#160| |l#0@@84| |l#1@@77|) |$l#0#heap#0| |$l#0#i#0|)) )))
(assert (forall ((|l#0@@85| T@U) (|l#1@@78| Int) (|l#2@@75| Int) (|$l#0#heap#0@@0| T@U) (|$l#0#i#0@@0| T@U) ) (!  (=> (and (and (= (type |l#0@@85|) TyType) (= (type |$l#0#heap#0@@0|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@0|) BoxType)) (= (U_2_bool (MapType2Select (|lambda#161| |l#0@@85| |l#1@@78| |l#2@@75|) |$l#0#heap#0@@0| |$l#0#i#0@@0|))  (and ($IsBox |$l#0#i#0@@0| |l#0@@85|) (and (<= |l#1@@78| (U_2_int ($Unbox intType |$l#0#i#0@@0|))) (< (U_2_int ($Unbox intType |$l#0#i#0@@0|)) |l#2@@75|))))) :qid |DafnyPreludebpl.22:1| :skolemid |5221| :pattern ( (MapType2Select (|lambda#161| |l#0@@85| |l#1@@78| |l#2@@75|) |$l#0#heap#0@@0| |$l#0#i#0@@0|)) )))
(assert (forall ((|l#0@@86| Bool) (|$l#0#o#0| T@U) ) (!  (=> (= (type |$l#0#o#0|) refType) (= (U_2_bool (MapType0Select (|lambda#162| |l#0@@86|) |$l#0#o#0|)) |l#0@@86|)) :qid |unknown.0:0| :skolemid |5222| :pattern ( (MapType0Select (|lambda#162| |l#0@@86|) |$l#0#o#0|)) )))
(assert (forall ((|l#0@@87| T@U) (|$l#0#heap#0@@1| T@U) (|$l#0#i#0@@1| T@U) ) (!  (=> (and (and (= (type |l#0@@87|) (MapType0Type BoxType boolType)) (= (type |$l#0#heap#0@@1|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@1|) BoxType)) (= (MapType2Select (|lambda#163| |l#0@@87|) |$l#0#heap#0@@1| |$l#0#i#0@@1|) |l#0@@87|)) :qid |LinearSequencesdfy.68:25| :skolemid |5223| :pattern ( (MapType2Select (|lambda#163| |l#0@@87|) |$l#0#heap#0@@1| |$l#0#i#0@@1|)) )))
(assert (forall ((|l#0@@88| T@U) (|$l#0#ly#0| T@U) ) (!  (=> (and (= (type |l#0@@88|) HandleTypeType) (= (type |$l#0#ly#0|) LayerTypeType)) (= (MapType0Select (|lambda#164| |l#0@@88|) |$l#0#ly#0|) |l#0@@88|)) :qid |LinearSequencesdfy.68:25| :skolemid |5224| :pattern ( (MapType0Select (|lambda#164| |l#0@@88|) |$l#0#ly#0|)) )))
(assert (forall ((|l#0@@89| T@U) (|l#1@@79| Int) (|$y#2| T@U) ) (!  (=> (and (= (type |l#0@@89|) TyType) (= (type |$y#2|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#170| |l#0@@89| |l#1@@79|) |$y#2|))  (and ($IsBox |$y#2| |l#0@@89|) (Byte__Order.__default.lt (U_2_int ($Unbox intType |$y#2|)) |l#1@@79|)))) :qid |NativeTypessdfy.6:31| :skolemid |5225| :pattern ( (MapType0Select (|lambda#170| |l#0@@89| |l#1@@79|) |$y#2|)) )))
(assert (forall ((|l#0@@90| T@U) (|l#1@@80| T@U) (|l#2@@76| Int) (|$y#3| T@U) ) (!  (=> (and (and (= (type |l#0@@90|) TyType) (= (type |l#1@@80|) LayerTypeType)) (= (type |$y#3|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#172| |l#0@@90| |l#1@@80| |l#2@@76|) |$y#3|))  (and ($IsBox |$y#3| |l#0@@90|) (Byte__Order.__default.lte |l#1@@80| |l#2@@76| (U_2_int ($Unbox intType |$y#3|)))))) :qid |NativeTypessdfy.6:31| :skolemid |5226| :pattern ( (MapType0Select (|lambda#172| |l#0@@90| |l#1@@80| |l#2@@76|) |$y#3|)) )))
(assert (forall ((|l#0@@91| T@U) (|l#1@@81| T@U) (|$y#2@@0| T@U) ) (!  (=> (and (and (= (type |l#0@@91|) TyType) (= (type |l#1@@81|) (SeqType BoxType))) (= (type |$y#2@@0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#186| |l#0@@91| |l#1@@81|) |$y#2@@0|))  (and ($IsBox |$y#2@@0| |l#0@@91|) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) |$y#2@@0|) |l#1@@81|)))) :qid |unknown.0:0| :skolemid |5227| :pattern ( (MapType0Select (|lambda#186| |l#0@@91| |l#1@@81|) |$y#2@@0|)) )))
(assert (forall ((|l#0@@92| T@U) (|l#1@@82| T@U) (|$y#3@@0| T@U) ) (!  (=> (and (and (= (type |l#0@@92|) TyType) (= (type |l#1@@82|) (SeqType BoxType))) (= (type |$y#3@@0|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#188| |l#0@@92| |l#1@@82|) |$y#3@@0|))  (and ($IsBox |$y#3@@0| |l#0@@92|) (Lexicographic__Byte__Order.__default.lte |l#1@@82| ($Unbox (SeqType BoxType) |$y#3@@0|))))) :qid |unknown.0:0| :skolemid |5228| :pattern ( (MapType0Select (|lambda#188| |l#0@@92| |l#1@@82|) |$y#3@@0|)) )))
(assert (forall ((|l#0@@93| T@U) (|$l#0#heap#0@@2| T@U) (|$l#0#i#0@@2| T@U) ) (!  (=> (and (and (= (type |l#0@@93|) (SeqType BoxType)) (= (type |$l#0#heap#0@@2|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@2|) BoxType)) (= (MapType2Select (|lambda#202| |l#0@@93|) |$l#0#heap#0@@2| |$l#0#i#0@@2|) ($Box (|#Upperbounded_Lexicographic_Byte_Order.Element.Element| ($Unbox (SeqType BoxType) (|Seq#Index| |l#0@@93| (U_2_int ($Unbox intType |$l#0#i#0@@2|)))))))) :qid |totalorderidfyUpperboundedLexicographicByteOrder.813:23| :skolemid |5229| :pattern ( (MapType2Select (|lambda#202| |l#0@@93|) |$l#0#heap#0@@2| |$l#0#i#0@@2|)) )))
(assert (forall ((|l#0@@94| T@U) (|l#1@@83| T@U) (|$y#2@@1| T@U) ) (!  (=> (and (and (= (type |l#0@@94|) TyType) (= (type |l#1@@83|) DatatypeTypeType)) (= (type |$y#2@@1|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#212| |l#0@@94| |l#1@@83|) |$y#2@@1|))  (and ($IsBox |$y#2@@1| |l#0@@94|) (Upperbounded__Lexicographic__Byte__Order.__default.lt ($Unbox DatatypeTypeType |$y#2@@1|) |l#1@@83|)))) :qid |totalorderidfyUpperboundedLexicographicByteOrder.809:12| :skolemid |5230| :pattern ( (MapType0Select (|lambda#212| |l#0@@94| |l#1@@83|) |$y#2@@1|)) )))
(assert (forall ((|l#0@@95| T@U) (|l#1@@84| T@U) (|$y#3@@1| T@U) ) (!  (=> (and (and (= (type |l#0@@95|) TyType) (= (type |l#1@@84|) DatatypeTypeType)) (= (type |$y#3@@1|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#214| |l#0@@95| |l#1@@84|) |$y#3@@1|))  (and ($IsBox |$y#3@@1| |l#0@@95|) (Upperbounded__Lexicographic__Byte__Order.__default.lte |l#1@@84| ($Unbox DatatypeTypeType |$y#3@@1|))))) :qid |totalorderidfyUpperboundedLexicographicByteOrder.809:12| :skolemid |5231| :pattern ( (MapType0Select (|lambda#214| |l#0@@95| |l#1@@84|) |$y#3@@1|)) )))
(assert (forall ((|l#0@@96| T@U) (|l#1@@85| T@U) (|l#2@@77| T@U) (|l#3@@68| Int) (|$y#0@@4| T@U) ) (!  (=> (and (and (and (= (type |l#0@@96|) TyType) (= (type |l#1@@85|) (SeqType BoxType))) (= (type |l#2@@77|) (SeqType BoxType))) (= (type |$y#0@@4|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#238| |l#0@@96| |l#1@@85| |l#2@@77| |l#3@@68|) |$y#0@@4|))  (and ($IsBox |$y#0@@4| |l#0@@96|) (and (BoundedPivotsLib.__default.BoundedKey |l#1@@85| ($Unbox (SeqType BoxType) |$y#0@@4|)) (= (BoundedPivotsLib.__default.Route |l#2@@77| ($Unbox (SeqType BoxType) |$y#0@@4|)) |l#3@@68|))))) :qid |KeyTypesdfy.10:8| :skolemid |5232| :pattern ( (MapType0Select (|lambda#238| |l#0@@96| |l#1@@85| |l#2@@77| |l#3@@68|) |$y#0@@4|)) )))
(assert (forall ((|l#0@@97| T@U) (|$w#0@@7| T@U) ) (!  (=> (and (= (type |l#0@@97|) TyType) (= (type |$w#0@@7|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#240| |l#0@@97|) |$w#0@@7|))  (and ($IsBox |$w#0@@7| |l#0@@97|) (MapSpec.__default.InDomain ($Unbox (SeqType BoxType) |$w#0@@7|))))) :qid |KeyTypesdfy.10:8| :skolemid |5233| :pattern ( (MapType0Select (|lambda#240| |l#0@@97|) |$w#0@@7|)) )))
(assert (forall ((|l#0@@98| T@U) (|$w#0@@8| T@U) ) (!  (=> (and (= (type |l#0@@98|) BoxType) (= (type |$w#0@@8|) BoxType)) (= (MapType0Select (|lambda#241| |l#0@@98|) |$w#0@@8|) |l#0@@98|)) :qid |MapSpecsdfy.47:5| :skolemid |5234| :pattern ( (MapType0Select (|lambda#241| |l#0@@98|) |$w#0@@8|)) )))
(assert (forall ((|l#0@@99| T@U) (|l#1@@86| T@U) (|l#2@@78| T@U) (|l#3@@69| T@U) (|l#4@@1| Int) (|l#5@@0| T@U) (|l#6| T@U) (|l#7| T@U) (|$w#0@@9| T@U) ) (!  (=> (and (and (and (and (and (and (and (= (type |l#0@@99|) TyType) (= (type |l#1@@86|) (MapType0Type BoxType boolType))) (= (type |l#2@@78|) (SeqType BoxType))) (= (type |l#3@@69|) (SeqType BoxType))) (= (type |l#5@@0|) (MapType BoxType BoxType))) (= (type |l#6|) (MapType BoxType BoxType))) (= (type |l#7|) DatatypeTypeType)) (= (type |$w#0@@9|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#244| |l#0@@99| |l#1@@86| |l#2@@78| |l#3@@69| |l#4@@1| |l#5@@0| |l#6| |l#7|) |$w#0@@9|))  (and ($IsBox |$w#0@@9| |l#0@@99|) (and (and (and (U_2_bool (MapType0Select |l#1@@86| |$w#0@@9|)) (BoundedPivotsLib.__default.BoundedKey |l#2@@78| ($Unbox (SeqType BoxType) |$w#0@@9|))) (= (BoundedPivotsLib.__default.Route |l#3@@69| ($Unbox (SeqType BoxType) |$w#0@@9|)) |l#4@@1|)) (not (|ValueMessage.Message#Equal| (ValueMessage.__default.Merge (BucketMaps.__default.BucketGet |l#5@@0| ($Unbox (SeqType BoxType) |$w#0@@9|)) (BucketMaps.__default.BucketGet |l#6| ($Unbox (SeqType BoxType) |$w#0@@9|))) |l#7|)))))) :qid |KeyTypesdfy.10:8| :skolemid |5235| :pattern ( (MapType0Select (|lambda#244| |l#0@@99| |l#1@@86| |l#2@@78| |l#3@@69| |l#4@@1| |l#5@@0| |l#6| |l#7|) |$w#0@@9|)) )))
(assert (forall ((|l#0@@100| T@U) (|l#1@@87| T@U) (|$w#0@@10| T@U) ) (!  (=> (and (and (= (type |l#0@@100|) (MapType BoxType BoxType)) (= (type |l#1@@87|) (MapType BoxType BoxType))) (= (type |$w#0@@10|) BoxType)) (= (MapType0Select (|lambda#245| |l#0@@100| |l#1@@87|) |$w#0@@10|) ($Box (ValueMessage.__default.Merge (BucketMaps.__default.BucketGet |l#0@@100| ($Unbox (SeqType BoxType) |$w#0@@10|)) (BucketMaps.__default.BucketGet |l#1@@87| ($Unbox (SeqType BoxType) |$w#0@@10|)))))) :qid |BucketMapidfy.28:32| :skolemid |5236| :pattern ( (MapType0Select (|lambda#245| |l#0@@100| |l#1@@87|) |$w#0@@10|)) )))
(assert (forall ((|l#0@@101| T@U) (|l#1@@88| T@U) (|l#2@@79| T@U) (|l#3@@70| T@U) (|$w#0@@11| T@U) ) (!  (=> (and (and (and (and (= (type |l#0@@101|) TyType) (= (type |l#1@@88|) (MapType0Type BoxType boolType))) (= (type |l#2@@79|) DatatypeTypeType)) (= (type |l#3@@70|) DatatypeTypeType)) (= (type |$w#0@@11|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#256| |l#0@@101| |l#1@@88| |l#2@@79| |l#3@@70|) |$w#0@@11|))  (and ($IsBox |$w#0@@11| |l#0@@101|) (and (U_2_bool (MapType0Select |l#1@@88| |$w#0@@11|)) (MapSpec.__default.InRange |l#2@@79| ($Unbox (SeqType BoxType) |$w#0@@11|) |l#3@@70|))))) :qid |KeyTypesdfy.10:8| :skolemid |5237| :pattern ( (MapType0Select (|lambda#256| |l#0@@101| |l#1@@88| |l#2@@79| |l#3@@70|) |$w#0@@11|)) )))
(assert (forall ((|l#0@@102| T@U) (|l#1@@89| T@U) (|l#2@@80| T@U) (|$w#0@@12| T@U) ) (!  (=> (and (and (and (= (type |l#0@@102|) TyType) (= (type |l#1@@89|) (MapType0Type BoxType boolType))) (= (type |l#2@@80|) DatatypeTypeType)) (= (type |$w#0@@12|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#260| |l#0@@102| |l#1@@89| |l#2@@80|) |$w#0@@12|))  (and ($IsBox |$w#0@@12| |l#0@@102|) (and (U_2_bool (MapType0Select |l#1@@89| |$w#0@@12|)) (MapSpec.__default.LowerBound |l#2@@80| ($Unbox (SeqType BoxType) |$w#0@@12|)))))) :qid |KeyTypesdfy.10:8| :skolemid |5238| :pattern ( (MapType0Select (|lambda#260| |l#0@@102| |l#1@@89| |l#2@@80|) |$w#0@@12|)) )))
(assert (forall ((|l#0@@103| T@U) (|l#1@@90| T@U) (|l#2@@81| T@U) (|$w#0@@13| T@U) ) (!  (=> (and (and (and (= (type |l#0@@103|) TyType) (= (type |l#1@@90|) (MapType0Type BoxType boolType))) (= (type |l#2@@81|) DatatypeTypeType)) (= (type |$w#0@@13|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#264| |l#0@@103| |l#1@@90| |l#2@@81|) |$w#0@@13|))  (and ($IsBox |$w#0@@13| |l#0@@103|) (and (U_2_bool (MapType0Select |l#1@@90| |$w#0@@13|)) (MapSpec.__default.UpperBound ($Unbox (SeqType BoxType) |$w#0@@13|) |l#2@@81|))))) :qid |KeyTypesdfy.10:8| :skolemid |5239| :pattern ( (MapType0Select (|lambda#264| |l#0@@103| |l#1@@90| |l#2@@81|) |$w#0@@13|)) )))
(assert (forall ((|l#0@@104| T@U) (|l#1@@91| T@U) (|l#2@@82| T@U) (|l#3@@71| T@U) (|l#4@@2| T@U) (|$w#0@@14| T@U) ) (!  (=> (and (and (and (and (and (= (type |l#0@@104|) TyType) (= (type |l#1@@91|) (MapType0Type BoxType boolType))) (= (type |l#2@@82|) (MapType0Type BoxType BoxType))) (= (type |l#3@@71|) DatatypeTypeType)) (= (type |l#4@@2|) (SeqType BoxType))) (= (type |$w#0@@14|) BoxType)) (= (U_2_bool (MapType0Select (|lambda#272| |l#0@@104| |l#1@@91| |l#2@@82| |l#3@@71| |l#4@@2|) |$w#0@@14|))  (and ($IsBox |$w#0@@14| |l#0@@104|) (and (U_2_bool (MapType0Select |l#1@@91| |$w#0@@14|)) (not (|Seq#Equal| (ValueMessage.Message.value (ValueMessage.__default.Merge ($Unbox DatatypeTypeType (MapType0Select |l#2@@82| |$w#0@@14|)) |l#3@@71|)) |l#4@@2|)))))) :qid |KeyTypesdfy.10:8| :skolemid |5240| :pattern ( (MapType0Select (|lambda#272| |l#0@@104| |l#1@@91| |l#2@@82| |l#3@@71| |l#4@@2|) |$w#0@@14|)) )))
(assert (forall ((|l#0@@105| T@U) (|l#1@@92| T@U) (|$w#0@@15| T@U) ) (!  (=> (and (and (= (type |l#0@@105|) (MapType0Type BoxType BoxType)) (= (type |l#1@@92|) DatatypeTypeType)) (= (type |$w#0@@15|) BoxType)) (= (MapType0Select (|lambda#273| |l#0@@105| |l#1@@92|) |$w#0@@15|) ($Box (ValueMessage.Message.value (ValueMessage.__default.Merge ($Unbox DatatypeTypeType (MapType0Select |l#0@@105| |$w#0@@15|)) |l#1@@92|))))) :qid |BucketMapidfy.165:22| :skolemid |5241| :pattern ( (MapType0Select (|lambda#273| |l#0@@105| |l#1@@92|) |$w#0@@15|)) )))
(assert (forall ((|l#0@@106| T@U) (|$l#2#heap#0| T@U) (|$l#2#x#0| T@U) ) (!  (=> (and (and (= (type |l#0@@106|) BoxType) (= (type |$l#2#heap#0|) (MapType0Type refType MapType1Type))) (= (type |$l#2#x#0|) BoxType)) (= (MapType2Select (|lambda#276| |l#0@@106|) |$l#2#heap#0| |$l#2#x#0|) |l#0@@106|)) :qid |Multisetsidfy.169:26| :skolemid |5242| :pattern ( (MapType2Select (|lambda#276| |l#0@@106|) |$l#2#heap#0| |$l#2#x#0|)) )))
(assert (forall ((|l#0@@107| T@U) (|$l#2#heap#0@@0| T@U) (|$l#2#x#0@@0| T@U) ) (!  (=> (and (and (= (type |l#0@@107|) TyType) (= (type |$l#2#heap#0@@0|) (MapType0Type refType MapType1Type))) (= (type |$l#2#x#0@@0|) BoxType)) (= (U_2_bool (MapType2Select (|lambda#277| |l#0@@107|) |$l#2#heap#0@@0| |$l#2#x#0@@0|)) ($IsBox |$l#2#x#0@@0| |l#0@@107|))) :qid |unknown.0:0| :skolemid |5243| :pattern ( (MapType2Select (|lambda#277| |l#0@@107|) |$l#2#heap#0@@0| |$l#2#x#0@@0|)) )))
(assert (forall ((|l#0@@108| T@U) (|$l#0#heap#0@@3| T@U) (|$l#0#x#0| T@U) ) (!  (=> (and (and (= (type |l#0@@108|) (MapType0Type BoxType BoxType)) (= (type |$l#0#heap#0@@3|) (MapType0Type refType MapType1Type))) (= (type |$l#0#x#0|) BoxType)) (= (MapType2Select (|lambda#366| |l#0@@108|) |$l#0#heap#0@@3| |$l#0#x#0|) (MapType0Select |l#0@@108| |$l#0#x#0|))) :qid |Multisetsidfy.381:27| :skolemid |5244| :pattern ( (MapType2Select (|lambda#366| |l#0@@108|) |$l#0#heap#0@@3| |$l#0#x#0|)) )))
(assert (forall ((|l#0@@109| T@U) (|l#1@@93| T@U) (|$l#0#heap#0@@4| T@U) (|$l#0#x#0@@0| T@U) ) (!  (=> (and (and (and (= (type |l#0@@109|) TyType) (= (type |l#1@@93|) (MapType0Type BoxType boolType))) (= (type |$l#0#heap#0@@4|) (MapType0Type refType MapType1Type))) (= (type |$l#0#x#0@@0|) BoxType)) (= (U_2_bool (MapType2Select (|lambda#367| |l#0@@109| |l#1@@93|) |$l#0#heap#0@@4| |$l#0#x#0@@0|))  (and ($IsBox |$l#0#x#0@@0| |l#0@@109|) (U_2_bool (MapType0Select |l#1@@93| |$l#0#x#0@@0|))))) :qid |unknown.0:0| :skolemid |5245| :pattern ( (MapType2Select (|lambda#367| |l#0@@109| |l#1@@93|) |$l#0#heap#0@@4| |$l#0#x#0@@0|)) )))
(assert (forall ((|l#0@@110| T@U) (|$l#0#heap#0@@5| T@U) (|$l#0#i#0@@3| T@U) ) (!  (=> (and (and (= (type |l#0@@110|) (SeqType BoxType)) (= (type |$l#0#heap#0@@5|) (MapType0Type refType MapType1Type))) (= (type |$l#0#i#0@@3|) BoxType)) (= (MapType2Select (|lambda#376| |l#0@@110|) |$l#0#heap#0@@5| |$l#0#i#0@@3|) ($Box (BucketsLib.Bucket.as__map ($Unbox DatatypeTypeType (|Seq#Index| |l#0@@110| (U_2_int ($Unbox intType |$l#0#i#0@@3|)))))))) :qid |BucketsLibidfy.730:39| :skolemid |5246| :pattern ( (MapType2Select (|lambda#376| |l#0@@110|) |$l#0#heap#0@@5| |$l#0#i#0@@3|)) )))
(declare-fun ControlFlow (Int Int) Int)
(declare-fun |b#0_0@0| () T@U)
(declare-fun |k#0_0@0| () T@U)
(declare-fun |a#0_0@0| () T@U)
(declare-fun |bot_keys#0@@6| () T@U)
(declare-fun |bot_from#0@@6| () Int)
(declare-fun |bot_msgs#0@@6| () T@U)
(declare-fun |keys##0_0_0_0@0| () T@U)
(declare-fun |msgs##0_0_0_0@0| () T@U)
(declare-fun $_Frame@0 () T@U)
(declare-fun $Heap@40 () T@U)
(declare-fun |call5formal@i#0@0| () Int)
(declare-fun $Heap@37 () T@U)
(declare-fun |call5formal@i#0@0@@0| () Int)
(declare-fun |acc_keys#0@@6| () T@U)
(declare-fun |acc_msgs#0@@6| () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun $Heap@30 () T@U)
(declare-fun |##keys#0_0_0@0| () T@U)
(declare-fun |##msgs#0_0_0@0| () T@U)
(declare-fun $Heap@39 () T@U)
(declare-fun |call5formal@i#0@0@@1| () Int)
(declare-fun $Heap@38 () T@U)
(declare-fun |keys##0_1@0| () T@U)
(declare-fun |msgs##0_1@0| () T@U)
(declare-fun |i##0_0@0| () Int)
(declare-fun |res#2@0| () T@U)
(declare-fun |keys##0_0@0| () T@U)
(declare-fun |msgs##0_0@0| () T@U)
(declare-fun $Heap@1 () T@U)
(declare-fun |k#0_2@0| () T@U)
(declare-fun |acc#2@0| () T@U)
(declare-fun |bot#2@0| () T@U)
(declare-fun |keys##0_2@0| () T@U)
(declare-fun |msgs##0_2@0| () T@U)
(declare-fun $Heap@35 () T@U)
(declare-fun |call5formal@i#0@0@@2| () Int)
(declare-fun |keys##0_3@0| () T@U)
(declare-fun |msgs##0_3@0| () T@U)
(declare-fun |i##0_1@0| () Int)
(declare-fun $Heap@36 () T@U)
(declare-fun $Heap@33 () T@U)
(declare-fun |call5formal@i#0@0@@3| () Int)
(declare-fun |keys##0_3_1@0| () T@U)
(declare-fun |msgs##0_3_1@0| () T@U)
(declare-fun $Heap@34 () T@U)
(declare-fun |top_keys#0@@29| () T@U)
(declare-fun |top_msgs#0@@14| () T@U)
(declare-fun |from#0@@16| () Int)
(declare-fun |to#0@@16| () Int)
(declare-fun $Heap@32 () T@U)
(declare-fun MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0 () T@U)
(declare-fun |##run#0_0@0| () T@U)
(declare-fun $Heap@31 () T@U)
(declare-fun |##from#1_0_0_0_0@0| () Int)
(declare-fun |##keys#1_0_0_0_0@0| () T@U)
(declare-fun |##msgs#1_0_0_0_0@0| () T@U)
(declare-fun |##top#1_0_0_0_0@0| () T@U)
(declare-fun |##bot#1_0_0_0_0@0| () T@U)
(declare-fun |##acc#1_0_0_0_0@0| () T@U)
(declare-fun $Heap@28 () T@U)
(declare-fun |##from#1_0_0_0_2@0| () Int)
(declare-fun |key#1_0@0| () T@U)
(declare-fun |topmsg#1_0@0| () T@U)
(declare-fun $Heap@29 () T@U)
(declare-fun |##keys#1_0_0_0_2@0| () T@U)
(declare-fun |##msgs#1_0_0_0_2@0| () T@U)
(declare-fun |##keys#1_0_0_0_3@0| () T@U)
(declare-fun |##msgs#1_0_0_0_3@0| () T@U)
(declare-fun |botmsg#1_0@0| () T@U)
(declare-fun |##keys#1_0_0_0_4@0| () T@U)
(declare-fun |##msgs#1_0_0_0_4@0| () T@U)
(declare-fun |##from#1_0_0_0_3@0| () Int)
(declare-fun |##top#1_0_0_0_1@0| () T@U)
(declare-fun |from##1_0_0_1_0@0| () Int)
(declare-fun |bot_from##1_0_0_1_0@0| () Int)
(declare-fun |slack#0@@12| () Int)
(declare-fun |slack##1_0_0_1_0@0| () Int)
(declare-fun $Heap@27 () T@U)
(declare-fun StartFuelAssert_BucketFlushModel._default.mergeToOneChild () T@U)
(declare-fun |##from#1_0_0_1_0@0| () Int)
(declare-fun |##keys#1_0_0_1_0@0| () T@U)
(declare-fun |##msgs#1_0_0_1_0@0| () T@U)
(declare-fun |##top#1_0_0_1_0@0| () T@U)
(declare-fun |##bot#1_0_0_1_0@0| () T@U)
(declare-fun |##acc#1_0_0_1_0@0| () T@U)
(declare-fun $Heap@26 () T@U)
(declare-fun $Heap@25 () T@U)
(declare-fun |##top#1_1_0_0_0@0| () T@U)
(declare-fun $Heap@23 () T@U)
(declare-fun |from##1_0@0| () Int)
(declare-fun |bot_from##1_0@0| () Int)
(declare-fun |acc_keys##1_0@0| () T@U)
(declare-fun |acc_msgs##1_0@0| () T@U)
(declare-fun |msg#1_0@0| () T@U)
(declare-fun |delta#1_0@0| () Int)
(declare-fun |slack##1_0@0| () Int)
(declare-fun $Heap@24 () T@U)
(declare-fun |##from#1_2_0_0@0| () Int)
(declare-fun |##keys#1_2_0_0@0| () T@U)
(declare-fun |##msgs#1_2_0_0@0| () T@U)
(declare-fun |##keys#1_2_0_1@0| () T@U)
(declare-fun |##msgs#1_2_0_1@0| () T@U)
(declare-fun |##top#1_2_0_0@0| () T@U)
(declare-fun |##bot#1_2_0_0@0| () T@U)
(declare-fun |##acc#1_2_0_0@0| () T@U)
(declare-fun $Heap@20 () T@U)
(declare-fun $Heap@21 () T@U)
(declare-fun $Heap@22 () T@U)
(declare-fun |##top#1_2_0_1@0| () T@U)
(declare-fun $Heap@18 () T@U)
(declare-fun |from##1_2_1_0@0| () Int)
(declare-fun |bot_from##1_2_1_0@0| () Int)
(declare-fun |acc_keys##1_2_1_0@0| () T@U)
(declare-fun |acc_msgs##1_2_1_0@0| () T@U)
(declare-fun |slack##1_2_1_0@0| () Int)
(declare-fun $Heap@19 () T@U)
(declare-fun |##from#1_2_1_0@0| () Int)
(declare-fun |##keys#1_2_1_0@0| () T@U)
(declare-fun |##msgs#1_2_1_0@0| () T@U)
(declare-fun |##keys#1_2_1_1@0| () T@U)
(declare-fun |##msgs#1_2_1_1@0| () T@U)
(declare-fun |##top#1_2_1_0@0| () T@U)
(declare-fun |##bot#1_2_1_0@0| () T@U)
(declare-fun |##acc#1_2_1_0@0| () T@U)
(declare-fun $Heap@17 () T@U)
(declare-fun $Heap@16 () T@U)
(declare-fun |##top#2_0_0_0_0@0| () T@U)
(declare-fun $Heap@14 () T@U)
(declare-fun |from##2_0@0| () Int)
(declare-fun |acc_keys##2_0@0| () T@U)
(declare-fun |key#2_0@0| () T@U)
(declare-fun |acc_msgs##2_0@0| () T@U)
(declare-fun |msg#2_0@0| () T@U)
(declare-fun |delta#2_0@0| () Int)
(declare-fun |slack##2_0@0| () Int)
(declare-fun $Heap@15 () T@U)
(declare-fun |##from#2_1_0_0@0| () Int)
(declare-fun |##keys#2_1_0_0@0| () T@U)
(declare-fun |##msgs#2_1_0_0@0| () T@U)
(declare-fun |##top#2_1_0_0@0| () T@U)
(declare-fun |##acc#2_1_0_0@0| () T@U)
(declare-fun $Heap@12 () T@U)
(declare-fun $Heap@13 () T@U)
(declare-fun |##top#2_1_0_1@0| () T@U)
(declare-fun $Heap@10 () T@U)
(declare-fun |from##2_1_1_0@0| () Int)
(declare-fun |acc_keys##2_1_1_0@0| () T@U)
(declare-fun |acc_msgs##2_1_1_0@0| () T@U)
(declare-fun |slack##2_1_1_0@0| () Int)
(declare-fun $Heap@11 () T@U)
(declare-fun |##from#2_1_1_0@0| () Int)
(declare-fun |##keys#2_1_1_0@0| () T@U)
(declare-fun |##msgs#2_1_1_0@0| () T@U)
(declare-fun |##top#2_1_1_0@0| () T@U)
(declare-fun |##acc#2_1_1_0@0| () T@U)
(declare-fun |##run#0_1@0| () T@U)
(declare-fun |##top#0_0@0| () T@U)
(declare-fun |##run#1_1_0@0| () T@U)
(declare-fun |##run#1_0@0| () T@U)
(declare-fun |##run#2_0_0@0| () T@U)
(declare-fun |##run#2_0@0| () T@U)
(declare-fun $Heap@8 () T@U)
(declare-fun |bot_from##0@0| () Int)
(declare-fun |acc_keys##0@0| () T@U)
(declare-fun |key#0@0| () T@U)
(declare-fun |acc_msgs##0@0| () T@U)
(declare-fun |msg#0@0| () T@U)
(declare-fun $Heap@9 () T@U)
(declare-fun |##run#6@0| () T@U)
(declare-fun |##keys#3_0_0@0| () T@U)
(declare-fun |##msgs#3_0_0@0| () T@U)
(declare-fun |##keys#3_0_1@0| () T@U)
(declare-fun |##msgs#3_0_1@0| () T@U)
(declare-fun |##top#3_0_0@0| () T@U)
(declare-fun |##bot#3_0_0@0| () T@U)
(declare-fun |##acc#3_0_0@0| () T@U)
(declare-fun $Heap@6 () T@U)
(declare-fun $Heap@7 () T@U)
(declare-fun |##top#3_0_1@0| () T@U)
(declare-fun $Heap@4 () T@U)
(declare-fun |bot_from##3_1_0@0| () Int)
(declare-fun |acc_keys##3_1_0@0| () T@U)
(declare-fun |acc_msgs##3_1_0@0| () T@U)
(declare-fun $Heap@5 () T@U)
(declare-fun |##keys#3_1_0@0| () T@U)
(declare-fun |##msgs#3_1_0@0| () T@U)
(declare-fun |##keys#3_1_1@0| () T@U)
(declare-fun |##msgs#3_1_1@0| () T@U)
(declare-fun |##top#3_1_0@0| () T@U)
(declare-fun |##bot#3_1_0@0| () T@U)
(declare-fun |##acc#3_1_0@0| () T@U)
(declare-fun |##a#2@0| () T@U)
(declare-fun |##b#2@0| () T@U)
(declare-fun $Heap@3 () T@U)
(declare-fun |##run#5@0| () T@U)
(declare-fun $Heap@2 () T@U)
(declare-fun StartFuel_Sequences._default.Range () T@U)
(declare-fun StartFuelAssert_Sequences._default.Range () T@U)
(declare-fun StartFuel_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuelAssert_Sequences._default.ApplyOpaque () T@U)
(declare-fun StartFuel_Sequences._default.remove () T@U)
(declare-fun StartFuelAssert_Sequences._default.remove () T@U)
(declare-fun StartFuel_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuelAssert_Sequences._default.RemoveOneValue () T@U)
(declare-fun StartFuelAssert_Sequences._default.insert () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace1with2 () T@U)
(declare-fun StartFuelAssert_Sequences._default.replace2with1 () T@U)
(declare-fun StartFuel_Sequences._default.concat () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat () T@U)
(declare-fun StartFuel_Sequences._default.concat3 () T@U)
(declare-fun StartFuelAssert_Sequences._default.concat3 () T@U)
(declare-fun StartFuel_Sequences._default.concatSeq () T@U)
(declare-fun StartFuelAssert_Sequences._default.concatSeq () T@U)
(declare-fun StartFuel_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsPrefix () T@U)
(declare-fun StartFuel_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.IsSuffix () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexIterate () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndex () T@U)
(declare-fun StartFuel_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqOfLength () T@U)
(declare-fun StartFuel_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuelAssert_Sequences._default.SeqIndexUpdate () T@U)
(declare-fun StartFuel_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Zip () T@U)
(declare-fun StartFuelAssert_Sequences._default.Unzip () T@U)
(declare-fun StartFuel_Sequences._default.Flatten () T@U)
(declare-fun StartFuelAssert_Sequences._default.Flatten () T@U)
(declare-fun StartFuel_Sequences._default.seqMax () T@U)
(declare-fun StartFuelAssert_Sequences._default.seqMax () T@U)
(declare-fun StartFuel_Sequences._default.fill () T@U)
(declare-fun StartFuelAssert_Sequences._default.fill () T@U)
(declare-fun StartFuel_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemoveStrong () T@U)
(declare-fun StartFuel_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuelAssert_Maps._default.MapRemove1Strong () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove () T@U)
(declare-fun StartFuel_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapRemove1 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.MapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferA () T@U)
(declare-fun StartFuel_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnionPreferB () T@U)
(declare-fun StartFuel_Maps._default.IMapUnion () T@U)
(declare-fun StartFuelAssert_Maps._default.IMapUnion () T@U)
(declare-fun StartFuel_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_Maps._default.MapDisjointUnion3 () T@U)
(declare-fun StartFuelAssert_SeqComparison._default.lte () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.lte () T@U)
(declare-fun StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuel_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuel_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.minimum () T@U)
(declare-fun StartFuel_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.maximum () T@U)
(declare-fun StartFuel_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.minimum () T@U)
(declare-fun StartFuel_Lexicographic_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.maximum () T@U)
(declare-fun StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte () T@U)
(declare-fun StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt () T@U)
(declare-fun StartFuel_Upperbounded_Lexicographic_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.NotMinimum () T@U)
(declare-fun StartFuel_Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap () T@U)
(declare-fun StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.minimum () T@U)
(declare-fun StartFuel_Upperbounded_Lexicographic_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.minimumOpt () T@U)
(declare-fun StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.maximum () T@U)
(declare-fun StartFuel_Upperbounded_Lexicographic_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.maximumOpt () T@U)
(declare-fun StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted () T@U)
(declare-fun StartFuelAssert_BoundedPivotsLib._default.CutoffForLeft () T@U)
(declare-fun StartFuelAssert_BoundedPivotsLib._default.CutoffForRight () T@U)
(declare-fun StartFuel_BucketMaps._default.BucketIntersect () T@U)
(declare-fun StartFuelAssert_BucketMaps._default.BucketIntersect () T@U)
(declare-fun StartFuel_BucketMaps._default.BucketComplement () T@U)
(declare-fun StartFuelAssert_BucketMaps._default.BucketComplement () T@U)
(declare-fun StartFuel_BucketMaps._default.ClampRange () T@U)
(declare-fun StartFuelAssert_BucketMaps._default.ClampRange () T@U)
(declare-fun StartFuel_BucketMaps._default.ClampStart () T@U)
(declare-fun StartFuelAssert_BucketMaps._default.ClampStart () T@U)
(declare-fun StartFuel_BucketMaps._default.ClampEnd () T@U)
(declare-fun StartFuelAssert_BucketMaps._default.ClampEnd () T@U)
(declare-fun StartFuelAssert_BucketMaps._default.Compose () T@U)
(declare-fun StartFuel_BucketMaps._default.ComposeSeq () T@U)
(declare-fun StartFuelAssert_BucketMaps._default.ComposeSeq () T@U)
(declare-fun StartFuel_BucketMaps._default.KeyValueMapOfBucket () T@U)
(declare-fun StartFuelAssert_BucketMaps._default.KeyValueMapOfBucket () T@U)
(declare-fun StartFuel_BucketMaps._default.SortedSeqOfKeyValueMap () T@U)
(declare-fun StartFuelAssert_BucketMaps._default.SortedSeqOfKeyValueMap () T@U)
(declare-fun StartFuelAssert_Multisets._default.Choose () T@U)
(declare-fun StartFuelAssert_Multisets._default.Apply () T@U)
(declare-fun StartFuelAssert_Multisets._default.Fold () T@U)
(declare-fun StartFuelAssert_Multisets._default.IsIdentity () T@U)
(declare-fun StartFuelAssert_Multisets._default.IsCommutative () T@U)
(declare-fun StartFuelAssert_Multisets._default.IsAssociative () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.B () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.SplitBucketLeft () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.SplitBucketRight () T@U)
(declare-fun StartFuel_BucketsLib._default.SplitBucketInList () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.SplitBucketInList () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.MergeBuckets () T@U)
(declare-fun StartFuel_BucketsLib._default.MergeBucketsInList () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.MergeBucketsInList () T@U)
(declare-fun StartFuel_BucketsLib._default.MapsOfBucketList () T@U)
(declare-fun StartFuelAssert_BucketsLib._default.MapsOfBucketList () T@U)
(declare-fun StartFuelAssert_BucketWeights._default.WeightKeyMultiset () T@U)
(declare-fun StartFuelAssert_BucketWeights._default.WeightMessageMultiset () T@U)
(declare-fun StartFuelAssert_BucketWeights._default.WeightBucketList () T@U)
(declare-fun StartFuel_BucketWeights._default.WeightBucketMap () T@U)
(declare-fun StartFuelAssert_BucketWeights._default.WeightBucketMap () T@U)
(declare-fun StartFuelAssert_BucketFlushModel._default.mergeToChildren () T@U)
(declare-fun StartFuel_BucketFlushModel._default.partialFlush () T@U)
(declare-fun StartFuelAssert_BucketFlushModel._default.partialFlush () T@U)
(declare-fun $Heap@@141 () T@U)
(declare-fun $Heap@0 () T@U)
(declare-fun MoreFuel_BucketFlushModel._default.mergeToOneChild0 () T@U)
(declare-fun |##keys#3@0| () T@U)
(declare-fun |##msgs#3@0| () T@U)
(declare-fun |top#2@0| () T@U)
(declare-fun |##keys#4@0| () T@U)
(declare-fun |##msgs#4@0| () T@U)
(declare-fun |##run#4@0| () T@U)
(declare-fun |res#2| () T@U)
(declare-fun |top#2| () T@U)
(declare-fun |bot#2| () T@U)
(declare-fun |acc#2| () T@U)
(declare-fun |a#0_0| () T@U)
(declare-fun |b#0_0| () T@U)
(declare-fun |key#1_0| () T@U)
(declare-fun |topmsg#1_0| () T@U)
(declare-fun |botmsg#1_0| () T@U)
(declare-fun |msg#1_0| () T@U)
(declare-fun |key#2_0| () T@U)
(declare-fun |msg#2_0| () T@U)
(declare-fun |key#0@@256| () T@U)
(declare-fun |msg#0@@29| () T@U)
(assert  (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (and (= (type $_Frame@0) (MapType9Type refType boolType)) (= (type $Heap@2) (MapType0Type refType MapType1Type))) (= (type $Heap@1) (MapType0Type refType MapType1Type))) (= (type MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted) LayerTypeType)) (= (type |bot_keys#0@@6|) (SeqType BoxType))) (= (type $Heap@3) (MapType0Type refType MapType1Type))) (= (type |top_keys#0@@29|) (SeqType BoxType))) (= (type |res#2@0|) DatatypeTypeType)) (= (type $Heap@4) (MapType0Type refType MapType1Type))) (= (type |acc_keys##3_1_0@0|) (SeqType BoxType))) (= (type |acc_keys#0@@6|) (SeqType BoxType))) (= (type |key#0@0|) (SeqType BoxType))) (= (type |acc_msgs##3_1_0@0|) (SeqType BoxType))) (= (type |acc_msgs#0@@6|) (SeqType BoxType))) (= (type |msg#0@0|) DatatypeTypeType)) (= (type |top_msgs#0@@14|) (SeqType BoxType))) (= (type |bot_msgs#0@@6|) (SeqType BoxType))) (= (type $Heap@5) (MapType0Type refType MapType1Type))) (= (type StartFuelAssert_BucketFlushModel._default.mergeToOneChild) LayerTypeType)) (= (type |##keys#3_1_0@0|) (SeqType BoxType))) (= (type |##msgs#3_1_0@0|) (SeqType BoxType))) (= (type |##keys#3_1_1@0|) (SeqType BoxType))) (= (type |##msgs#3_1_1@0|) (SeqType BoxType))) (= (type |##top#3_1_0@0|) (MapType BoxType BoxType))) (= (type |##bot#3_1_0@0|) (MapType BoxType BoxType))) (= (type |##acc#3_1_0@0|) (MapType BoxType BoxType))) (= (type |##keys#3_0_0@0|) (SeqType BoxType))) (= (type |##msgs#3_0_0@0|) (SeqType BoxType))) (= (type |##keys#3_0_1@0|) (SeqType BoxType))) (= (type |##msgs#3_0_1@0|) (SeqType BoxType))) (= (type |##top#3_0_0@0|) (MapType BoxType BoxType))) (= (type |##bot#3_0_0@0|) (MapType BoxType BoxType))) (= (type |##acc#3_0_0@0|) (MapType BoxType BoxType))) (= (type $Heap@6) (MapType0Type refType MapType1Type))) (= (type $Heap@7) (MapType0Type refType MapType1Type))) (= (type |##top#3_0_1@0|) (MapType BoxType BoxType))) (= (type |bot#2@0|) (MapType BoxType BoxType))) (= (type |acc#2@0|) (MapType BoxType BoxType))) (= (type $Heap@8) (MapType0Type refType MapType1Type))) (= (type |acc_keys##0@0|) (SeqType BoxType))) (= (type |acc_msgs##0@0|) (SeqType BoxType))) (= (type $Heap@9) (MapType0Type refType MapType1Type))) (= (type |##run#6@0|) (SeqType BoxType))) (= (type $Heap@10) (MapType0Type refType MapType1Type))) (= (type |acc_keys##2_1_1_0@0|) (SeqType BoxType))) (= (type |key#2_0@0|) (SeqType BoxType))) (= (type |acc_msgs##2_1_1_0@0|) (SeqType BoxType))) (= (type |msg#2_0@0|) DatatypeTypeType)) (= (type $Heap@11) (MapType0Type refType MapType1Type))) (= (type |##keys#2_1_1_0@0|) (SeqType BoxType))) (= (type |##msgs#2_1_1_0@0|) (SeqType BoxType))) (= (type |##top#2_1_1_0@0|) (MapType BoxType BoxType))) (= (type |##acc#2_1_1_0@0|) (MapType BoxType BoxType))) (= (type |##keys#2_1_0_0@0|) (SeqType BoxType))) (= (type |##msgs#2_1_0_0@0|) (SeqType BoxType))) (= (type |##top#2_1_0_0@0|) (MapType BoxType BoxType))) (= (type |##acc#2_1_0_0@0|) (MapType BoxType BoxType))) (= (type $Heap@12) (MapType0Type refType MapType1Type))) (= (type $Heap@13) (MapType0Type refType MapType1Type))) (= (type |##top#2_1_0_1@0|) (MapType BoxType BoxType))) (= (type $Heap@14) (MapType0Type refType MapType1Type))) (= (type |acc_keys##2_0@0|) (SeqType BoxType))) (= (type |acc_msgs##2_0@0|) (SeqType BoxType))) (= (type $Heap@15) (MapType0Type refType MapType1Type))) (= (type |##run#2_0@0|) (SeqType BoxType))) (= (type $Heap@16) (MapType0Type refType MapType1Type))) (= (type |##top#2_0_0_0_0@0|) (MapType BoxType BoxType))) (= (type $Heap@17) (MapType0Type refType MapType1Type))) (= (type |##run#2_0_0@0|) (SeqType BoxType))) (= (type |##a#2@0|) (SeqType BoxType))) (= (type |##b#2@0|) (SeqType BoxType))) (= (type $Heap@18) (MapType0Type refType MapType1Type))) (= (type |acc_keys##1_2_1_0@0|) (SeqType BoxType))) (= (type |key#1_0@0|) (SeqType BoxType))) (= (type |acc_msgs##1_2_1_0@0|) (SeqType BoxType))) (= (type |msg#1_0@0|) DatatypeTypeType)) (= (type $Heap@19) (MapType0Type refType MapType1Type))) (= (type |##keys#1_2_1_0@0|) (SeqType BoxType))) (= (type |##msgs#1_2_1_0@0|) (SeqType BoxType))) (= (type |##keys#1_2_1_1@0|) (SeqType BoxType))) (= (type |##msgs#1_2_1_1@0|) (SeqType BoxType))) (= (type |##top#1_2_1_0@0|) (MapType BoxType BoxType))) (= (type |##bot#1_2_1_0@0|) (MapType BoxType BoxType))) (= (type |##acc#1_2_1_0@0|) (MapType BoxType BoxType))) (= (type |##keys#1_2_0_0@0|) (SeqType BoxType))) (= (type |##msgs#1_2_0_0@0|) (SeqType BoxType))) (= (type |##keys#1_2_0_1@0|) (SeqType BoxType))) (= (type |##msgs#1_2_0_1@0|) (SeqType BoxType))) (= (type |##top#1_2_0_0@0|) (MapType BoxType BoxType))) (= (type |##bot#1_2_0_0@0|) (MapType BoxType BoxType))) (= (type |##acc#1_2_0_0@0|) (MapType BoxType BoxType))) (= (type $Heap@20) (MapType0Type refType MapType1Type))) (= (type $Heap@21) (MapType0Type refType MapType1Type))) (= (type $Heap@22) (MapType0Type refType MapType1Type))) (= (type |##top#1_2_0_1@0|) (MapType BoxType BoxType))) (= (type $Heap@23) (MapType0Type refType MapType1Type))) (= (type |acc_keys##1_0@0|) (SeqType BoxType))) (= (type |acc_msgs##1_0@0|) (SeqType BoxType))) (= (type $Heap@24) (MapType0Type refType MapType1Type))) (= (type |##run#1_0@0|) (SeqType BoxType))) (= (type $Heap@25) (MapType0Type refType MapType1Type))) (= (type |##top#1_1_0_0_0@0|) (MapType BoxType BoxType))) (= (type $Heap@26) (MapType0Type refType MapType1Type))) (= (type |##run#1_1_0@0|) (SeqType BoxType))) (= (type |botmsg#1_0@0|) DatatypeTypeType)) (= (type $Heap@27) (MapType0Type refType MapType1Type))) (= (type |##keys#1_0_0_1_0@0|) (SeqType BoxType))) (= (type |##msgs#1_0_0_1_0@0|) (SeqType BoxType))) (= (type |##top#1_0_0_1_0@0|) (MapType BoxType BoxType))) (= (type |##bot#1_0_0_1_0@0|) (MapType BoxType BoxType))) (= (type |##acc#1_0_0_1_0@0|) (MapType BoxType BoxType))) (= (type |##keys#1_0_0_0_0@0|) (SeqType BoxType))) (= (type |##msgs#1_0_0_0_0@0|) (SeqType BoxType))) (= (type |##top#1_0_0_0_0@0|) (MapType BoxType BoxType))) (= (type |##bot#1_0_0_0_0@0|) (MapType BoxType BoxType))) (= (type |##acc#1_0_0_0_0@0|) (MapType BoxType BoxType))) (= (type $Heap@28) (MapType0Type refType MapType1Type))) (= (type |topmsg#1_0@0|) DatatypeTypeType)) (= (type $Heap@29) (MapType0Type refType MapType1Type))) (= (type |##keys#1_0_0_0_2@0|) (SeqType BoxType))) (= (type |##msgs#1_0_0_0_2@0|) (SeqType BoxType))) (= (type |##keys#1_0_0_0_3@0|) (SeqType BoxType))) (= (type |##msgs#1_0_0_0_3@0|) (SeqType BoxType))) (= (type |##keys#1_0_0_0_4@0|) (SeqType BoxType))) (= (type |##msgs#1_0_0_0_4@0|) (SeqType BoxType))) (= (type |##top#1_0_0_0_1@0|) (MapType BoxType BoxType))) (= (type $Heap@31) (MapType0Type refType MapType1Type))) (= (type |a#0_0@0|) (MapType BoxType BoxType))) (= (type |b#0_0@0|) (MapType BoxType BoxType))) (= (type |##run#0_1@0|) (SeqType BoxType))) (= (type $Heap@32) (MapType0Type refType MapType1Type))) (= (type |k#0_2@0|) (SeqType BoxType))) (= (type $Heap@33) (MapType0Type refType MapType1Type))) (= (type |keys##0_3_1@0|) (SeqType BoxType))) (= (type |msgs##0_3_1@0|) (SeqType BoxType))) (= (type $Heap@34) (MapType0Type refType MapType1Type))) (= (type |keys##0_2@0|) (SeqType BoxType))) (= (type |msgs##0_2@0|) (SeqType BoxType))) (= (type $Heap@35) (MapType0Type refType MapType1Type))) (= (type |keys##0_3@0|) (SeqType BoxType))) (= (type |msgs##0_3@0|) (SeqType BoxType))) (= (type $Heap@36) (MapType0Type refType MapType1Type))) (= (type |##run#0_0@0|) (SeqType BoxType))) (= (type |k#0_0@0|) (SeqType BoxType))) (= (type $Heap@39) (MapType0Type refType MapType1Type))) (= (type $Heap@38) (MapType0Type refType MapType1Type))) (= (type |keys##0_1@0|) (SeqType BoxType))) (= (type |msgs##0_1@0|) (SeqType BoxType))) (= (type $Heap@30) (MapType0Type refType MapType1Type))) (= (type |keys##0_0_0_0@0|) (SeqType BoxType))) (= (type |msgs##0_0_0_0@0|) (SeqType BoxType))) (= (type $Heap@40) (MapType0Type refType MapType1Type))) (= (type $Heap@37) (MapType0Type refType MapType1Type))) (= (type |##keys#0_0_0@0|) (SeqType BoxType))) (= (type |##msgs#0_0_0@0|) (SeqType BoxType))) (= (type |keys##0_0@0|) (SeqType BoxType))) (= (type |msgs##0_0@0|) (SeqType BoxType))) (= (type |##top#0_0@0|) (MapType BoxType BoxType))) (= (type |##run#5@0|) (SeqType BoxType))) (= (type StartFuel_Sequences._default.Range) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Range) LayerTypeType)) (= (type StartFuel_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.ApplyOpaque) LayerTypeType)) (= (type StartFuel_Sequences._default.remove) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.remove) LayerTypeType)) (= (type StartFuel_Sequences._default.RemoveOneValue) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.RemoveOneValue) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.insert) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace1with2) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.replace2with1) LayerTypeType)) (= (type StartFuel_Sequences._default.concat) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat) LayerTypeType)) (= (type StartFuel_Sequences._default.concat3) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concat3) LayerTypeType)) (= (type StartFuel_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.concatSeq) LayerTypeType)) (= (type StartFuel_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsPrefix) LayerTypeType)) (= (type StartFuel_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.IsSuffix) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexIterate) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndex) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqOfLength) LayerTypeType)) (= (type StartFuel_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.SeqIndexUpdate) LayerTypeType)) (= (type StartFuel_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Zip) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Unzip) LayerTypeType)) (= (type StartFuel_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.Flatten) LayerTypeType)) (= (type StartFuel_Sequences._default.seqMax) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.seqMax) LayerTypeType)) (= (type StartFuel_Sequences._default.fill) LayerTypeType)) (= (type StartFuelAssert_Sequences._default.fill) LayerTypeType)) (= (type StartFuel_Maps._default.MapRemoveStrong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemoveStrong) LayerTypeType)) (= (type StartFuel_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapRemove1Strong) LayerTypeType)) (= (type StartFuel_Maps._default.IMapRemove) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove) LayerTypeType)) (= (type StartFuel_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapRemove1) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnionPreferB) LayerTypeType)) (= (type StartFuel_Maps._default.MapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferA) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnionPreferB) LayerTypeType)) (= (type StartFuel_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuelAssert_Maps._default.IMapUnion) LayerTypeType)) (= (type StartFuel_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuelAssert_Maps._default.MapDisjointUnion3) LayerTypeType)) (= (type StartFuelAssert_SeqComparison._default.lte) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.lte) LayerTypeType)) (= (type StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuel_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuel_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.minimum) LayerTypeType)) (= (type StartFuel_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.maximum) LayerTypeType)) (= (type StartFuel_Byte_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Byte_Order._default.IsStrictlySorted) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.minimum) LayerTypeType)) (= (type StartFuel_Lexicographic_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.maximum) LayerTypeType)) (= (type StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) LayerTypeType)) (= (type StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) LayerTypeType)) (= (type StartFuel_Upperbounded_Lexicographic_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.NotMinimum) LayerTypeType)) (= (type StartFuel_Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap) LayerTypeType)) (= (type StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.minimum) LayerTypeType)) (= (type StartFuel_Upperbounded_Lexicographic_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.minimumOpt) LayerTypeType)) (= (type StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.maximum) LayerTypeType)) (= (type StartFuel_Upperbounded_Lexicographic_Byte_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.maximumOpt) LayerTypeType)) (= (type StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted) LayerTypeType)) (= (type StartFuelAssert_BoundedPivotsLib._default.CutoffForLeft) LayerTypeType)) (= (type StartFuelAssert_BoundedPivotsLib._default.CutoffForRight) LayerTypeType)) (= (type StartFuel_BucketMaps._default.BucketIntersect) LayerTypeType)) (= (type StartFuelAssert_BucketMaps._default.BucketIntersect) LayerTypeType)) (= (type StartFuel_BucketMaps._default.BucketComplement) LayerTypeType)) (= (type StartFuelAssert_BucketMaps._default.BucketComplement) LayerTypeType)) (= (type StartFuel_BucketMaps._default.ClampRange) LayerTypeType)) (= (type StartFuelAssert_BucketMaps._default.ClampRange) LayerTypeType)) (= (type StartFuel_BucketMaps._default.ClampStart) LayerTypeType)) (= (type StartFuelAssert_BucketMaps._default.ClampStart) LayerTypeType)) (= (type StartFuel_BucketMaps._default.ClampEnd) LayerTypeType)) (= (type StartFuelAssert_BucketMaps._default.ClampEnd) LayerTypeType)) (= (type StartFuelAssert_BucketMaps._default.Compose) LayerTypeType)) (= (type StartFuel_BucketMaps._default.ComposeSeq) LayerTypeType)) (= (type StartFuelAssert_BucketMaps._default.ComposeSeq) LayerTypeType)) (= (type StartFuel_BucketMaps._default.KeyValueMapOfBucket) LayerTypeType)) (= (type StartFuelAssert_BucketMaps._default.KeyValueMapOfBucket) LayerTypeType)) (= (type StartFuel_BucketMaps._default.SortedSeqOfKeyValueMap) LayerTypeType)) (= (type StartFuelAssert_BucketMaps._default.SortedSeqOfKeyValueMap) LayerTypeType)) (= (type StartFuelAssert_Multisets._default.Choose) LayerTypeType)) (= (type StartFuelAssert_Multisets._default.Apply) LayerTypeType)) (= (type StartFuelAssert_Multisets._default.Fold) LayerTypeType)) (= (type StartFuelAssert_Multisets._default.IsIdentity) LayerTypeType)) (= (type StartFuelAssert_Multisets._default.IsCommutative) LayerTypeType)) (= (type StartFuelAssert_Multisets._default.IsAssociative) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.B) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.SplitBucketLeft) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.SplitBucketRight) LayerTypeType)) (= (type StartFuel_BucketsLib._default.SplitBucketInList) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.SplitBucketInList) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.MergeBuckets) LayerTypeType)) (= (type StartFuel_BucketsLib._default.MergeBucketsInList) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.MergeBucketsInList) LayerTypeType)) (= (type StartFuel_BucketsLib._default.MapsOfBucketList) LayerTypeType)) (= (type StartFuelAssert_BucketsLib._default.MapsOfBucketList) LayerTypeType)) (= (type StartFuelAssert_BucketWeights._default.WeightKeyMultiset) LayerTypeType)) (= (type StartFuelAssert_BucketWeights._default.WeightMessageMultiset) LayerTypeType)) (= (type StartFuelAssert_BucketWeights._default.WeightBucketList) LayerTypeType)) (= (type StartFuel_BucketWeights._default.WeightBucketMap) LayerTypeType)) (= (type StartFuelAssert_BucketWeights._default.WeightBucketMap) LayerTypeType)) (= (type StartFuelAssert_BucketFlushModel._default.mergeToChildren) LayerTypeType)) (= (type StartFuel_BucketFlushModel._default.partialFlush) LayerTypeType)) (= (type StartFuelAssert_BucketFlushModel._default.partialFlush) LayerTypeType)) (= (type $Heap@@141) (MapType0Type refType MapType1Type))) (= (type $Heap@0) (MapType0Type refType MapType1Type))) (= (type MoreFuel_BucketFlushModel._default.mergeToOneChild0) LayerTypeType)) (= (type |##keys#3@0|) (SeqType BoxType))) (= (type |##msgs#3@0|) (SeqType BoxType))) (= (type |top#2@0|) (MapType BoxType BoxType))) (= (type |##keys#4@0|) (SeqType BoxType))) (= (type |##msgs#4@0|) (SeqType BoxType))) (= (type |##run#4@0|) (SeqType BoxType))) (= (type |res#2|) DatatypeTypeType)) (= (type |top#2|) (MapType BoxType BoxType))) (= (type |bot#2|) (MapType BoxType BoxType))) (= (type |acc#2|) (MapType BoxType BoxType))) (= (type |a#0_0|) (MapType BoxType BoxType))) (= (type |b#0_0|) (MapType BoxType BoxType))) (= (type |key#1_0|) (SeqType BoxType))) (= (type |topmsg#1_0|) DatatypeTypeType)) (= (type |botmsg#1_0|) DatatypeTypeType)) (= (type |msg#1_0|) DatatypeTypeType)) (= (type |key#2_0|) (SeqType BoxType))) (= (type |msg#2_0|) DatatypeTypeType)) (= (type |key#0@@256|) (SeqType BoxType))) (= (type |msg#0@@29|) DatatypeTypeType)))
(push 1)
(set-info :boogie-vc-id Impl$$BucketFlushModel.__default.mergeToOneOneChild__eq__topBotAccMerge)
(assert (not (=> (= (ControlFlow 0 0) 863671) (let ((anon13_correct  (and (=> (= (ControlFlow 0 116102) (- 0 892591)) (U_2_bool (MapType0Select (|Map#Domain| |b#0_0@0|) ($Box |k#0_0@0|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |b#0_0@0|) ($Box |k#0_0@0|))) (=> (= (ControlFlow 0 116102) (- 0 892599)) (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#0_0@0|) ($Box |k#0_0@0|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |b#0_0@0|) ($Box |k#0_0@0|))))))))) (let ((anon80_Else_correct  (=> (and (not (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|))) ($Box |k#0_0@0|)))) (= (ControlFlow 0 116089) 116102)) anon13_correct))) (let ((anon80_Then_correct  (=> (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|))) ($Box |k#0_0@0|))) (and (=> (= (ControlFlow 0 116087) (- 0 892326)) (and (<= 0 |bot_from#0@@6|) (<= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)))) (=> (and (<= 0 |bot_from#0@@6|) (<= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|))) (=> (= |keys##0_0_0_0@0| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|)) (and (=> (= (ControlFlow 0 116087) (- 0 892356)) (and (<= 0 |bot_from#0@@6|) (<= |bot_from#0@@6| (|Seq#Length| |bot_msgs#0@@6|)))) (=> (and (<= 0 |bot_from#0@@6|) (<= |bot_from#0@@6| (|Seq#Length| |bot_msgs#0@@6|))) (=> (= |msgs##0_0_0_0@0| (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)) (and (=> (= (ControlFlow 0 116087) (- 0 892390)) (forall (($o@@144 T@U) ($f@@76 T@U) ) (! (let ((alpha@@83 (FieldTypeInv0 (type $f@@76)))) (=> (and (and (= (type $o@@144) refType) (= (type $f@@76) (FieldType alpha@@83))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@144 $f@@76)))) :qid |BucketFlushModelidfy.358:30| :skolemid |1655| :no-pattern (type $o@@144) :no-pattern (type $f@@76) :no-pattern (U_2_int $o@@144) :no-pattern (U_2_bool $o@@144) :no-pattern (U_2_int $f@@76) :no-pattern (U_2_bool $f@@76) ))) (=> (forall (($o@@145 T@U) ($f@@77 T@U) ) (! (let ((alpha@@84 (FieldTypeInv0 (type $f@@77)))) (=> (and (and (= (type $o@@145) refType) (= (type $f@@77) (FieldType alpha@@84))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@145 $f@@77)))) :qid |BucketFlushModelidfy.358:30| :skolemid |1655| :no-pattern (type $o@@145) :no-pattern (type $f@@77) :no-pattern (U_2_int $o@@145) :no-pattern (U_2_bool $o@@145) :no-pattern (U_2_int $f@@77) :no-pattern (U_2_bool $f@@77) )) (and (=> (= (ControlFlow 0 116087) (- 0 892410)) (= (|Seq#Length| |keys##0_0_0_0@0|) (|Seq#Length| |msgs##0_0_0_0@0|))) (=> (= (|Seq#Length| |keys##0_0_0_0@0|) (|Seq#Length| |msgs##0_0_0_0@0|)) (and (=> (= (ControlFlow 0 116087) (- 0 892418)) (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |keys##0_0_0_0@0| |msgs##0_0_0_0@0|)) ($Box |k#0_0@0|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |keys##0_0_0_0@0| |msgs##0_0_0_0@0|)) ($Box |k#0_0@0|))) (=> (and (and (and ($IsGoodHeap $Heap@40) ($IsHeapAnchor $Heap@40)) (<= (LitInt 0) |call5formal@i#0@0|)) (and (< |call5formal@i#0@0| (|Seq#Length| |keys##0_0_0_0@0|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |keys##0_0_0_0@0| |call5formal@i#0@0|)) |k#0_0@0|))) (=> (and (and (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (|Seq#Index| |msgs##0_0_0_0@0| |call5formal@i#0@0|))) (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MapSeqs.__default.map__of__seqs ($LS $LZ) |keys##0_0_0_0@0| |msgs##0_0_0_0@0|)) ($Box |k#0_0@0|))))) (|MapSeqs.__default.map__of__seqs#canCall| |keys##0_0_0_0@0| |msgs##0_0_0_0@0|)) (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |msgs##0_0_0_0@0| |call5formal@i#0@0|)) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |keys##0_0_0_0@0| |msgs##0_0_0_0@0|)) ($Box |k#0_0@0|))))) (and (= $Heap@37 $Heap@40) (= (ControlFlow 0 116087) 116102))) anon13_correct))))))))))))))))) (let ((anon79_Then_correct  (=> (< |call5formal@i#0@0@@0| (|Seq#Length| |acc_keys#0@@6|)) (and (=> (= (ControlFlow 0 116085) (- 0 891497)) (forall (($o@@146 T@U) ($f@@78 T@U) ) (! (let ((alpha@@85 (FieldTypeInv0 (type $f@@78)))) (=> (and (and (= (type $o@@146) refType) (= (type $f@@78) (FieldType alpha@@85))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@146 $f@@78)))) :qid |BucketFlushModelidfy.356:23| :skolemid |1654| :no-pattern (type $o@@146) :no-pattern (type $f@@78) :no-pattern (U_2_int $o@@146) :no-pattern (U_2_bool $o@@146) :no-pattern (U_2_int $f@@78) :no-pattern (U_2_bool $f@@78) ))) (=> (forall (($o@@147 T@U) ($f@@79 T@U) ) (! (let ((alpha@@86 (FieldTypeInv0 (type $f@@79)))) (=> (and (and (= (type $o@@147) refType) (= (type $f@@79) (FieldType alpha@@86))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@147 $f@@79)))) :qid |BucketFlushModelidfy.356:23| :skolemid |1654| :no-pattern (type $o@@147) :no-pattern (type $f@@79) :no-pattern (U_2_int $o@@147) :no-pattern (U_2_bool $o@@147) :no-pattern (U_2_int $f@@79) :no-pattern (U_2_bool $f@@79) )) (and (=> (= (ControlFlow 0 116085) (- 0 891517)) (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|))) (=> (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116085) (- 0 891525)) (<= (LitInt 0) |call5formal@i#0@0@@0|)) (=> (<= (LitInt 0) |call5formal@i#0@0@@0|) (and (=> (= (ControlFlow 0 116085) (- 0 891532)) (< |call5formal@i#0@0@@0| (|Seq#Length| |acc_keys#0@@6|))) (=> (< |call5formal@i#0@0@@0| (|Seq#Length| |acc_keys#0@@6|)) (and (=> (= (ControlFlow 0 116085) (- 0 891538)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys#0@@6|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys#0@@6|) (=> (and (and ($IsGoodHeap $Heap@37) ($IsHeapAnchor $Heap@37)) (and (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys#0@@6| |acc_msgs#0@@6|) (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys#0@@6| |acc_msgs#0@@6|)) (|Seq#Index| |acc_keys#0@@6| |call5formal@i#0@0@@0|))))) (=> (and (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MapSeqs.__default.map__of__seqs ($LS $LZ) |acc_keys#0@@6| |acc_msgs#0@@6|)) (|Seq#Index| |acc_keys#0@@6| |call5formal@i#0@0@@0|)))) (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs#0@@6| |call5formal@i#0@0@@0|)))) (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys#0@@6| |acc_msgs#0@@6|)) (and (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys#0@@6| |acc_msgs#0@@6|)) (|Seq#Index| |acc_keys#0@@6| |call5formal@i#0@0@@0|))) ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs#0@@6| |call5formal@i#0@0@@0|))) (= $Heap@30 $Heap@37))) (and (=> (= (ControlFlow 0 116085) (- 0 891661)) (and (<= 0 |bot_from#0@@6|) (<= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)))) (=> (and (<= 0 |bot_from#0@@6|) (<= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|))) (and (=> (= (ControlFlow 0 116085) (- 0 891677)) (and (<= 0 |bot_from#0@@6|) (<= |bot_from#0@@6| (|Seq#Length| |bot_msgs#0@@6|)))) (=> (and (<= 0 |bot_from#0@@6|) (<= |bot_from#0@@6| (|Seq#Length| |bot_msgs#0@@6|))) (=> (and (and (= |##keys#0_0_0@0| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|)) ($IsAlloc |##keys#0_0_0@0| (TSeq Tclass.KeyType.Key) $Heap@37)) (and (= |##msgs#0_0_0@0| (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)) ($IsAlloc |##msgs#0_0_0@0| (TSeq Tclass.ValueMessage.Message) $Heap@37))) (and (=> (= (ControlFlow 0 116085) (- 0 891733)) (= (|Seq#Length| |##keys#0_0_0@0|) (|Seq#Length| |##msgs#0_0_0@0|))) (=> (= (|Seq#Length| |##keys#0_0_0@0|) (|Seq#Length| |##msgs#0_0_0@0|)) (=> (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|))) (and (=> (= (ControlFlow 0 116085) 116087) anon80_Then_correct) (=> (= (ControlFlow 0 116085) 116089) anon80_Else_correct))))))))))))))))))))))))) (let ((anon81_Else_correct  (=> (and (not (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS $LZ) |acc_keys#0@@6| |acc_msgs#0@@6|)) ($Box |k#0_0@0|)))) (= (ControlFlow 0 116100) 116102)) anon13_correct))) (let ((anon81_Then_correct  (=> (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS $LZ) |acc_keys#0@@6| |acc_msgs#0@@6|)) ($Box |k#0_0@0|))) (and (=> (= (ControlFlow 0 116098) (- 0 892106)) (forall (($o@@148 T@U) ($f@@80 T@U) ) (! (let ((alpha@@87 (FieldTypeInv0 (type $f@@80)))) (=> (and (and (= (type $o@@148) refType) (= (type $f@@80) (FieldType alpha@@87))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@148 $f@@80)))) :qid |BucketFlushModelidfy.364:30| :skolemid |1657| :no-pattern (type $o@@148) :no-pattern (type $f@@80) :no-pattern (U_2_int $o@@148) :no-pattern (U_2_bool $o@@148) :no-pattern (U_2_int $f@@80) :no-pattern (U_2_bool $f@@80) ))) (=> (forall (($o@@149 T@U) ($f@@81 T@U) ) (! (let ((alpha@@88 (FieldTypeInv0 (type $f@@81)))) (=> (and (and (= (type $o@@149) refType) (= (type $f@@81) (FieldType alpha@@88))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@149 $f@@81)))) :qid |BucketFlushModelidfy.364:30| :skolemid |1657| :no-pattern (type $o@@149) :no-pattern (type $f@@81) :no-pattern (U_2_int $o@@149) :no-pattern (U_2_bool $o@@149) :no-pattern (U_2_int $f@@81) :no-pattern (U_2_bool $f@@81) )) (and (=> (= (ControlFlow 0 116098) (- 0 892126)) (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|))) (=> (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116098) (- 0 892134)) (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys#0@@6| |acc_msgs#0@@6|)) ($Box |k#0_0@0|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys#0@@6| |acc_msgs#0@@6|)) ($Box |k#0_0@0|))) (=> (and (and (and ($IsGoodHeap $Heap@39) ($IsHeapAnchor $Heap@39)) (<= (LitInt 0) |call5formal@i#0@0@@1|)) (and (< |call5formal@i#0@0@@1| (|Seq#Length| |acc_keys#0@@6|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys#0@@6| |call5formal@i#0@0@@1|)) |k#0_0@0|))) (=> (and (and (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs#0@@6| |call5formal@i#0@0@@1|))) (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MapSeqs.__default.map__of__seqs ($LS $LZ) |acc_keys#0@@6| |acc_msgs#0@@6|)) ($Box |k#0_0@0|))))) (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys#0@@6| |acc_msgs#0@@6|)) (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs#0@@6| |call5formal@i#0@0@@1|)) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys#0@@6| |acc_msgs#0@@6|)) ($Box |k#0_0@0|))))) (and (= $Heap@38 $Heap@39) (= (ControlFlow 0 116098) 116102))) anon13_correct))))))))))) (let ((anon79_Else_correct  (=> (<= (|Seq#Length| |acc_keys#0@@6|) |call5formal@i#0@0@@0|) (and (=> (= (ControlFlow 0 116096) (- 0 891784)) (and (<= 0 |bot_from#0@@6|) (<= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)))) (=> (and (<= 0 |bot_from#0@@6|) (<= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|))) (=> (= |keys##0_1@0| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|)) (and (=> (= (ControlFlow 0 116096) (- 0 891814)) (and (<= 0 |bot_from#0@@6|) (<= |bot_from#0@@6| (|Seq#Length| |bot_msgs#0@@6|)))) (=> (and (<= 0 |bot_from#0@@6|) (<= |bot_from#0@@6| (|Seq#Length| |bot_msgs#0@@6|))) (=> (and (= |msgs##0_1@0| (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)) (= |i##0_0@0| (- |call5formal@i#0@0@@0| (|Seq#Length| |acc_keys#0@@6|)))) (and (=> (= (ControlFlow 0 116096) (- 0 891859)) (forall (($o@@150 T@U) ($f@@82 T@U) ) (! (let ((alpha@@89 (FieldTypeInv0 (type $f@@82)))) (=> (and (and (= (type $o@@150) refType) (= (type $f@@82) (FieldType alpha@@89))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@150 $f@@82)))) :qid |BucketFlushModelidfy.361:23| :skolemid |1656| :no-pattern (type $o@@150) :no-pattern (type $f@@82) :no-pattern (U_2_int $o@@150) :no-pattern (U_2_bool $o@@150) :no-pattern (U_2_int $f@@82) :no-pattern (U_2_bool $f@@82) ))) (=> (forall (($o@@151 T@U) ($f@@83 T@U) ) (! (let ((alpha@@90 (FieldTypeInv0 (type $f@@83)))) (=> (and (and (= (type $o@@151) refType) (= (type $f@@83) (FieldType alpha@@90))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@151 $f@@83)))) :qid |BucketFlushModelidfy.361:23| :skolemid |1656| :no-pattern (type $o@@151) :no-pattern (type $f@@83) :no-pattern (U_2_int $o@@151) :no-pattern (U_2_bool $o@@151) :no-pattern (U_2_int $f@@83) :no-pattern (U_2_bool $f@@83) )) (and (=> (= (ControlFlow 0 116096) (- 0 891879)) (= (|Seq#Length| |keys##0_1@0|) (|Seq#Length| |msgs##0_1@0|))) (=> (= (|Seq#Length| |keys##0_1@0|) (|Seq#Length| |msgs##0_1@0|)) (and (=> (= (ControlFlow 0 116096) (- 0 891887)) (<= (LitInt 0) |i##0_0@0|)) (=> (<= (LitInt 0) |i##0_0@0|) (and (=> (= (ControlFlow 0 116096) (- 0 891894)) (< |i##0_0@0| (|Seq#Length| |keys##0_1@0|))) (=> (< |i##0_0@0| (|Seq#Length| |keys##0_1@0|)) (and (=> (= (ControlFlow 0 116096) (- 0 891900)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |keys##0_1@0|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |keys##0_1@0|) (=> (and (and ($IsGoodHeap $Heap@38) ($IsHeapAnchor $Heap@38)) (and (|MapSeqs.__default.map__of__seqs#canCall| |keys##0_1@0| |msgs##0_1@0|) (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |keys##0_1@0| |msgs##0_1@0|)) (|Seq#Index| |keys##0_1@0| |i##0_0@0|))))) (=> (and (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MapSeqs.__default.map__of__seqs ($LS $LZ) |keys##0_1@0| |msgs##0_1@0|)) (|Seq#Index| |keys##0_1@0| |i##0_0@0|)))) (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (|Seq#Index| |msgs##0_1@0| |i##0_0@0|)))) (|MapSeqs.__default.map__of__seqs#canCall| |keys##0_1@0| |msgs##0_1@0|)) (and (and (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |keys##0_1@0| |msgs##0_1@0|)) (|Seq#Index| |keys##0_1@0| |i##0_0@0|))) ($Unbox DatatypeTypeType (|Seq#Index| |msgs##0_1@0| |i##0_0@0|))) (= $Heap@30 $Heap@38)) (and ($IsAlloc |acc_keys#0@@6| (TSeq Tclass.KeyType.Key) $Heap@38) ($IsAlloc |acc_msgs#0@@6| (TSeq Tclass.ValueMessage.Message) $Heap@38)))) (and (=> (= (ControlFlow 0 116096) (- 0 892045)) (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|))) (=> (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|)) (=> (and (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys#0@@6| |acc_msgs#0@@6|) (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys#0@@6| |acc_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116096) 116098) anon81_Then_correct) (=> (= (ControlFlow 0 116096) 116100) anon81_Else_correct)))))))))))))))))))))))))) (let ((anon78_Then_correct  (=> (and (and (and ($Is |k#0_0@0| Tclass.KeyType.Key) (U_2_bool (MapType0Select (|Map#Domain| |a#0_0@0|) ($Box |k#0_0@0|)))) (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)) (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)))) (and (and (= |keys##0_0@0| (BucketFlushModel.singleMergeResult.keys |res#2@0|)) (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|))) (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)) (= |msgs##0_0@0| (BucketFlushModel.singleMergeResult.msgs |res#2@0|))))) (and (=> (= (ControlFlow 0 116078) (- 0 889682)) (forall (($o@@152 T@U) ($f@@84 T@U) ) (! (let ((alpha@@91 (FieldTypeInv0 (type $f@@84)))) (=> (and (and (= (type $o@@152) refType) (= (type $f@@84) (FieldType alpha@@91))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@152 $f@@84)))) :qid |BucketFlushModelidfy.354:26| :skolemid |1653| :no-pattern (type $o@@152) :no-pattern (type $f@@84) :no-pattern (U_2_int $o@@152) :no-pattern (U_2_bool $o@@152) :no-pattern (U_2_int $f@@84) :no-pattern (U_2_bool $f@@84) ))) (=> (forall (($o@@153 T@U) ($f@@85 T@U) ) (! (let ((alpha@@92 (FieldTypeInv0 (type $f@@85)))) (=> (and (and (= (type $o@@153) refType) (= (type $f@@85) (FieldType alpha@@92))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@153 $f@@85)))) :qid |BucketFlushModelidfy.354:26| :skolemid |1653| :no-pattern (type $o@@153) :no-pattern (type $f@@85) :no-pattern (U_2_int $o@@153) :no-pattern (U_2_bool $o@@153) :no-pattern (U_2_int $f@@85) :no-pattern (U_2_bool $f@@85) )) (and (=> (= (ControlFlow 0 116078) (- 0 889702)) (= (|Seq#Length| |keys##0_0@0|) (|Seq#Length| |msgs##0_0@0|))) (=> (= (|Seq#Length| |keys##0_0@0|) (|Seq#Length| |msgs##0_0@0|)) (and (=> (= (ControlFlow 0 116078) (- 0 889710)) (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |keys##0_0@0| |msgs##0_0@0|)) ($Box |k#0_0@0|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |keys##0_0@0| |msgs##0_0@0|)) ($Box |k#0_0@0|))) (=> (and (and (and (and ($IsGoodHeap $Heap@30) ($IsHeapAnchor $Heap@30)) (<= (LitInt 0) |call5formal@i#0@0@@0|)) (and (< |call5formal@i#0@0@@0| (|Seq#Length| |keys##0_0@0|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |keys##0_0@0| |call5formal@i#0@0@@0|)) |k#0_0@0|))) (and (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (|Seq#Index| |msgs##0_0@0| |call5formal@i#0@0@@0|))) (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MapSeqs.__default.map__of__seqs ($LS $LZ) |keys##0_0@0| |msgs##0_0@0|)) ($Box |k#0_0@0|))))) (|MapSeqs.__default.map__of__seqs#canCall| |keys##0_0@0| |msgs##0_0@0|)) (and (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |msgs##0_0@0| |call5formal@i#0@0@@0|)) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |keys##0_0@0| |msgs##0_0@0|)) ($Box |k#0_0@0|)))) (= $Heap@1 $Heap@30)))) (and (=> (= (ControlFlow 0 116078) 116085) anon79_Then_correct) (=> (= (ControlFlow 0 116078) 116096) anon79_Else_correct)))))))))))) (let ((anon23_correct  (=> (= (ControlFlow 0 116134) (- 0 891466)) (U_2_bool (MapType0Select (|Map#Domain| |a#0_0@0|) ($Box |k#0_2@0|)))))) (let ((anon85_Else_correct  (=> (not (U_2_bool (MapType0Select (|Map#Domain| |acc#2@0|) ($Box |k#0_2@0|)))) (and (=> (= (ControlFlow 0 116132) (- 0 890989)) (U_2_bool (MapType0Select (|Map#Domain| |bot#2@0|) ($Box |k#0_2@0|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| |bot#2@0|) ($Box |k#0_2@0|))) (and (=> (= (ControlFlow 0 116132) (- 0 890999)) (and (<= 0 |bot_from#0@@6|) (<= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)))) (=> (and (<= 0 |bot_from#0@@6|) (<= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|))) (=> (= |keys##0_2@0| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|)) (and (=> (= (ControlFlow 0 116132) (- 0 891029)) (and (<= 0 |bot_from#0@@6|) (<= |bot_from#0@@6| (|Seq#Length| |bot_msgs#0@@6|)))) (=> (and (<= 0 |bot_from#0@@6|) (<= |bot_from#0@@6| (|Seq#Length| |bot_msgs#0@@6|))) (=> (= |msgs##0_2@0| (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)) (and (=> (= (ControlFlow 0 116132) (- 0 891063)) (forall (($o@@154 T@U) ($f@@86 T@U) ) (! (let ((alpha@@93 (FieldTypeInv0 (type $f@@86)))) (=> (and (and (= (type $o@@154) refType) (= (type $f@@86) (FieldType alpha@@93))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@154 $f@@86)))) :qid |BucketFlushModelidfy.380:28| :skolemid |1662| :no-pattern (type $o@@154) :no-pattern (type $f@@86) :no-pattern (U_2_int $o@@154) :no-pattern (U_2_bool $o@@154) :no-pattern (U_2_int $f@@86) :no-pattern (U_2_bool $f@@86) ))) (=> (forall (($o@@155 T@U) ($f@@87 T@U) ) (! (let ((alpha@@94 (FieldTypeInv0 (type $f@@87)))) (=> (and (and (= (type $o@@155) refType) (= (type $f@@87) (FieldType alpha@@94))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@155 $f@@87)))) :qid |BucketFlushModelidfy.380:28| :skolemid |1662| :no-pattern (type $o@@155) :no-pattern (type $f@@87) :no-pattern (U_2_int $o@@155) :no-pattern (U_2_bool $o@@155) :no-pattern (U_2_int $f@@87) :no-pattern (U_2_bool $f@@87) )) (and (=> (= (ControlFlow 0 116132) (- 0 891083)) (= (|Seq#Length| |keys##0_2@0|) (|Seq#Length| |msgs##0_2@0|))) (=> (= (|Seq#Length| |keys##0_2@0|) (|Seq#Length| |msgs##0_2@0|)) (and (=> (= (ControlFlow 0 116132) (- 0 891091)) (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |keys##0_2@0| |msgs##0_2@0|)) ($Box |k#0_2@0|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |keys##0_2@0| |msgs##0_2@0|)) ($Box |k#0_2@0|))) (=> (and (and (and ($IsGoodHeap $Heap@35) ($IsHeapAnchor $Heap@35)) (<= (LitInt 0) |call5formal@i#0@0@@2|)) (and (< |call5formal@i#0@0@@2| (|Seq#Length| |keys##0_2@0|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |keys##0_2@0| |call5formal@i#0@0@@2|)) |k#0_2@0|))) (=> (and (and (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (|Seq#Index| |msgs##0_2@0| |call5formal@i#0@0@@2|))) (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MapSeqs.__default.map__of__seqs ($LS $LZ) |keys##0_2@0| |msgs##0_2@0|)) ($Box |k#0_2@0|))))) (|MapSeqs.__default.map__of__seqs#canCall| |keys##0_2@0| |msgs##0_2@0|)) (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |msgs##0_2@0| |call5formal@i#0@0@@2|)) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |keys##0_2@0| |msgs##0_2@0|)) ($Box |k#0_2@0|))))) (and (and (and (= $Heap@1 $Heap@35) (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|))) (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)) (= |keys##0_3@0| (BucketFlushModel.singleMergeResult.keys |res#2@0|)))) (and (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)) (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|))) (and (= |msgs##0_3@0| (BucketFlushModel.singleMergeResult.msgs |res#2@0|)) (= |i##0_1@0| (+ |call5formal@i#0@0@@2| (|Seq#Length| |acc_keys#0@@6|))))))) (and (=> (= (ControlFlow 0 116132) (- 0 891302)) (forall (($o@@156 T@U) ($f@@88 T@U) ) (! (let ((alpha@@95 (FieldTypeInv0 (type $f@@88)))) (=> (and (and (= (type $o@@156) refType) (= (type $f@@88) (FieldType alpha@@95))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@156 $f@@88)))) :qid |BucketFlushModelidfy.381:23| :skolemid |1663| :no-pattern (type $o@@156) :no-pattern (type $f@@88) :no-pattern (U_2_int $o@@156) :no-pattern (U_2_bool $o@@156) :no-pattern (U_2_int $f@@88) :no-pattern (U_2_bool $f@@88) ))) (=> (forall (($o@@157 T@U) ($f@@89 T@U) ) (! (let ((alpha@@96 (FieldTypeInv0 (type $f@@89)))) (=> (and (and (= (type $o@@157) refType) (= (type $f@@89) (FieldType alpha@@96))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@157 $f@@89)))) :qid |BucketFlushModelidfy.381:23| :skolemid |1663| :no-pattern (type $o@@157) :no-pattern (type $f@@89) :no-pattern (U_2_int $o@@157) :no-pattern (U_2_bool $o@@157) :no-pattern (U_2_int $f@@89) :no-pattern (U_2_bool $f@@89) )) (and (=> (= (ControlFlow 0 116132) (- 0 891322)) (= (|Seq#Length| |keys##0_3@0|) (|Seq#Length| |msgs##0_3@0|))) (=> (= (|Seq#Length| |keys##0_3@0|) (|Seq#Length| |msgs##0_3@0|)) (and (=> (= (ControlFlow 0 116132) (- 0 891330)) (<= (LitInt 0) |i##0_1@0|)) (=> (<= (LitInt 0) |i##0_1@0|) (and (=> (= (ControlFlow 0 116132) (- 0 891337)) (< |i##0_1@0| (|Seq#Length| |keys##0_3@0|))) (=> (< |i##0_1@0| (|Seq#Length| |keys##0_3@0|)) (and (=> (= (ControlFlow 0 116132) (- 0 891343)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |keys##0_3@0|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |keys##0_3@0|) (=> (and (and ($IsGoodHeap $Heap@36) ($IsHeapAnchor $Heap@36)) (and (|MapSeqs.__default.map__of__seqs#canCall| |keys##0_3@0| |msgs##0_3@0|) (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |keys##0_3@0| |msgs##0_3@0|)) (|Seq#Index| |keys##0_3@0| |i##0_1@0|))))) (=> (and (and (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MapSeqs.__default.map__of__seqs ($LS $LZ) |keys##0_3@0| |msgs##0_3@0|)) (|Seq#Index| |keys##0_3@0| |i##0_1@0|)))) (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (|Seq#Index| |msgs##0_3@0| |i##0_1@0|)))) (|MapSeqs.__default.map__of__seqs#canCall| |keys##0_3@0| |msgs##0_3@0|)) (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |keys##0_3@0| |msgs##0_3@0|)) (|Seq#Index| |keys##0_3@0| |i##0_1@0|))) ($Unbox DatatypeTypeType (|Seq#Index| |msgs##0_3@0| |i##0_1@0|)))) (and (= $Heap@35 $Heap@36) (= (ControlFlow 0 116132) 116134))) anon23_correct))))))))))))))))))))))))))))))) (let ((anon85_Then_correct  (=> (U_2_bool (MapType0Select (|Map#Domain| |acc#2@0|) ($Box |k#0_2@0|))) (and (=> (= (ControlFlow 0 116130) (- 0 890541)) (forall (($o@@158 T@U) ($f@@90 T@U) ) (! (let ((alpha@@97 (FieldTypeInv0 (type $f@@90)))) (=> (and (and (= (type $o@@158) refType) (= (type $f@@90) (FieldType alpha@@97))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@158 $f@@90)))) :qid |BucketFlushModelidfy.375:28| :skolemid |1660| :no-pattern (type $o@@158) :no-pattern (type $f@@90) :no-pattern (U_2_int $o@@158) :no-pattern (U_2_bool $o@@158) :no-pattern (U_2_int $f@@90) :no-pattern (U_2_bool $f@@90) ))) (=> (forall (($o@@159 T@U) ($f@@91 T@U) ) (! (let ((alpha@@98 (FieldTypeInv0 (type $f@@91)))) (=> (and (and (= (type $o@@159) refType) (= (type $f@@91) (FieldType alpha@@98))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@159 $f@@91)))) :qid |BucketFlushModelidfy.375:28| :skolemid |1660| :no-pattern (type $o@@159) :no-pattern (type $f@@91) :no-pattern (U_2_int $o@@159) :no-pattern (U_2_bool $o@@159) :no-pattern (U_2_int $f@@91) :no-pattern (U_2_bool $f@@91) )) (and (=> (= (ControlFlow 0 116130) (- 0 890561)) (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|))) (=> (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116130) (- 0 890569)) (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys#0@@6| |acc_msgs#0@@6|)) ($Box |k#0_2@0|)))) (=> (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys#0@@6| |acc_msgs#0@@6|)) ($Box |k#0_2@0|))) (=> (and (and (and (and (and ($IsGoodHeap $Heap@33) ($IsHeapAnchor $Heap@33)) (<= (LitInt 0) |call5formal@i#0@0@@3|)) (and (< |call5formal@i#0@0@@3| (|Seq#Length| |acc_keys#0@@6|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys#0@@6| |call5formal@i#0@0@@3|)) |k#0_2@0|))) (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs#0@@6| |call5formal@i#0@0@@3|))) (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MapSeqs.__default.map__of__seqs ($LS $LZ) |acc_keys#0@@6| |acc_msgs#0@@6|)) ($Box |k#0_2@0|))))) (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys#0@@6| |acc_msgs#0@@6|))) (and (and (and (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs#0@@6| |call5formal@i#0@0@@3|)) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys#0@@6| |acc_msgs#0@@6|)) ($Box |k#0_2@0|)))) (= $Heap@1 $Heap@33)) (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)) (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)))) (and (and (= |keys##0_3_1@0| (BucketFlushModel.singleMergeResult.keys |res#2@0|)) (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|))) (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)) (= |msgs##0_3_1@0| (BucketFlushModel.singleMergeResult.msgs |res#2@0|)))))) (and (=> (= (ControlFlow 0 116130) (- 0 890769)) (forall (($o@@160 T@U) ($f@@92 T@U) ) (! (let ((alpha@@99 (FieldTypeInv0 (type $f@@92)))) (=> (and (and (= (type $o@@160) refType) (= (type $f@@92) (FieldType alpha@@99))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@160 $f@@92)))) :qid |BucketFlushModelidfy.376:23| :skolemid |1661| :no-pattern (type $o@@160) :no-pattern (type $f@@92) :no-pattern (U_2_int $o@@160) :no-pattern (U_2_bool $o@@160) :no-pattern (U_2_int $f@@92) :no-pattern (U_2_bool $f@@92) ))) (=> (forall (($o@@161 T@U) ($f@@93 T@U) ) (! (let ((alpha@@100 (FieldTypeInv0 (type $f@@93)))) (=> (and (and (= (type $o@@161) refType) (= (type $f@@93) (FieldType alpha@@100))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@161 $f@@93)))) :qid |BucketFlushModelidfy.376:23| :skolemid |1661| :no-pattern (type $o@@161) :no-pattern (type $f@@93) :no-pattern (U_2_int $o@@161) :no-pattern (U_2_bool $o@@161) :no-pattern (U_2_int $f@@93) :no-pattern (U_2_bool $f@@93) )) (and (=> (= (ControlFlow 0 116130) (- 0 890789)) (= (|Seq#Length| |keys##0_3_1@0|) (|Seq#Length| |msgs##0_3_1@0|))) (=> (= (|Seq#Length| |keys##0_3_1@0|) (|Seq#Length| |msgs##0_3_1@0|)) (and (=> (= (ControlFlow 0 116130) (- 0 890797)) (<= (LitInt 0) |call5formal@i#0@0@@3|)) (=> (<= (LitInt 0) |call5formal@i#0@0@@3|) (and (=> (= (ControlFlow 0 116130) (- 0 890804)) (< |call5formal@i#0@0@@3| (|Seq#Length| |keys##0_3_1@0|))) (=> (< |call5formal@i#0@0@@3| (|Seq#Length| |keys##0_3_1@0|)) (and (=> (= (ControlFlow 0 116130) (- 0 890810)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |keys##0_3_1@0|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |keys##0_3_1@0|) (=> (and (and ($IsGoodHeap $Heap@34) ($IsHeapAnchor $Heap@34)) (and (|MapSeqs.__default.map__of__seqs#canCall| |keys##0_3_1@0| |msgs##0_3_1@0|) (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |keys##0_3_1@0| |msgs##0_3_1@0|)) (|Seq#Index| |keys##0_3_1@0| |call5formal@i#0@0@@3|))))) (=> (and (and (and (and (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MapSeqs.__default.map__of__seqs ($LS $LZ) |keys##0_3_1@0| |msgs##0_3_1@0|)) (|Seq#Index| |keys##0_3_1@0| |call5formal@i#0@0@@3|)))) (|$IsA#ValueMessage.Message| ($Unbox DatatypeTypeType (|Seq#Index| |msgs##0_3_1@0| |call5formal@i#0@0@@3|)))) (|MapSeqs.__default.map__of__seqs#canCall| |keys##0_3_1@0| |msgs##0_3_1@0|)) (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |keys##0_3_1@0| |msgs##0_3_1@0|)) (|Seq#Index| |keys##0_3_1@0| |call5formal@i#0@0@@3|))) ($Unbox DatatypeTypeType (|Seq#Index| |msgs##0_3_1@0| |call5formal@i#0@0@@3|)))) (and (= $Heap@33 $Heap@34) (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)))) (and (=> (= (ControlFlow 0 116130) (- 0 890941)) (and (<= 0 |call5formal@i#0@0@@3|) (< |call5formal@i#0@0@@3| (|Seq#Length| (BucketFlushModel.singleMergeResult.keys |res#2@0|))))) (=> (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)) (and (=> (= (ControlFlow 0 116130) (- 0 890964)) (|Seq#Equal| |k#0_2@0| ($Unbox (SeqType BoxType) (|Seq#Index| (BucketFlushModel.singleMergeResult.keys |res#2@0|) |call5formal@i#0@0@@3|)))) (=> (|Seq#Equal| |k#0_2@0| ($Unbox (SeqType BoxType) (|Seq#Index| (BucketFlushModel.singleMergeResult.keys |res#2@0|) |call5formal@i#0@0@@3|))) (=> (= (ControlFlow 0 116130) 116134) anon23_correct))))))))))))))))))))))))))) (let ((anon84_Else_correct  (=> (not (U_2_bool (MapType0Select (|Map#Domain| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|)) ($Box |k#0_2@0|)))) (and (=> (= (ControlFlow 0 116128) 116130) anon85_Then_correct) (=> (= (ControlFlow 0 116128) 116132) anon85_Else_correct))))) (let ((anon84_Then_correct  (=> (and (U_2_bool (MapType0Select (|Map#Domain| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|)) ($Box |k#0_2@0|))) (= (ControlFlow 0 116121) (- 0 890493))) false))) (let ((anon83_Else_correct  (=> (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#2@0|)) ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@1)) (=> (and (and ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@1) ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@1)) (and ($IsAlloc (int_2_U |from#0@@16|) Tclass._System.nat $Heap@1) ($IsAlloc (int_2_U |to#0@@16|) Tclass._System.nat $Heap@1))) (and (=> (= (ControlFlow 0 116112) (- 0 890350)) (<= (LitInt 0) |from#0@@16|)) (and (=> (= (ControlFlow 0 116112) (- 0 890357)) (<= |from#0@@16| |to#0@@16|)) (and (=> (= (ControlFlow 0 116112) (- 0 890361)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116112) (- 0 890367)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (=> (and (and (and (<= (LitInt 0) |from#0@@16|) (<= |from#0@@16| |to#0@@16|)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (and (=> (= (ControlFlow 0 116112) (- 0 890406)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= |from#0@@16| (BucketFlushModel.singleMergeResult.end |res#2@0|)))) (and (=> (= (ControlFlow 0 116112) (- 0 890417)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|)))) (=> (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (and (<= |from#0@@16| (BucketFlushModel.singleMergeResult.end |res#2@0|)) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|)))) (=> (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|)) (and (=> (= (ControlFlow 0 116112) 116121) anon84_Then_correct) (=> (= (ControlFlow 0 116112) 116128) anon84_Else_correct))))))))))))))) (let ((anon83_Then_correct  (and (=> (= (ControlFlow 0 116110) (- 0 890224)) (forall (($o@@162 T@U) ($f@@94 T@U) ) (! (let ((alpha@@101 (FieldTypeInv0 (type $f@@94)))) (=> (and (and (= (type $o@@162) refType) (= (type $f@@94) (FieldType alpha@@101))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@162 $f@@94)))) :qid |BucketFlushModelidfy.371:71| :skolemid |1659| :no-pattern (type $o@@162) :no-pattern (type $f@@94) :no-pattern (U_2_int $o@@162) :no-pattern (U_2_bool $o@@162) :no-pattern (U_2_int $f@@94) :no-pattern (U_2_bool $f@@94) ))) (=> (forall (($o@@163 T@U) ($f@@95 T@U) ) (! (let ((alpha@@102 (FieldTypeInv0 (type $f@@95)))) (=> (and (and (= (type $o@@163) refType) (= (type $f@@95) (FieldType alpha@@102))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@163 $f@@95)))) :qid |BucketFlushModelidfy.371:71| :skolemid |1659| :no-pattern (type $o@@163) :no-pattern (type $f@@95) :no-pattern (U_2_int $o@@163) :no-pattern (U_2_bool $o@@163) :no-pattern (U_2_int $f@@95) :no-pattern (U_2_bool $f@@95) )) (=> (and (and (and ($IsGoodHeap $Heap@32) ($IsHeapAnchor $Heap@32)) (= $Heap@1 $Heap@32)) (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0)))) (and (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0) MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0) (= (ControlFlow 0 116110) (- 0 890288))))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#2@0|))))))) (let ((anon82_Then_correct  (=> (and (and (and ($Is |k#0_2@0| Tclass.KeyType.Key) (U_2_bool (MapType0Select (|Map#Domain| |b#0_0@0|) ($Box |k#0_2@0|)))) (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)) (= |##run#0_0@0| (BucketFlushModel.singleMergeResult.keys |res#2@0|)))) (and (and ($IsAlloc |##run#0_0@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@1) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketFlushModel.singleMergeResult.keys |res#2@0|))) (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketFlushModel.singleMergeResult.keys |res#2@0|))))) (and (=> (= (ControlFlow 0 116108) 116110) anon83_Then_correct) (=> (= (ControlFlow 0 116108) 116112) anon83_Else_correct))))) (let ((anon86_Then_correct  (and (=> (= (ControlFlow 0 116140) (- 0 890144)) (forall (($o@@164 T@U) ($f@@96 T@U) ) (! (let ((alpha@@103 (FieldTypeInv0 (type $f@@96)))) (=> (and (and (= (type $o@@164) refType) (= (type $f@@96) (FieldType alpha@@103))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@164 $f@@96)))) :qid |BucketFlushModelidfy.386:32| :skolemid |1665| :no-pattern (type $o@@164) :no-pattern (type $f@@96) :no-pattern (U_2_int $o@@164) :no-pattern (U_2_bool $o@@164) :no-pattern (U_2_int $f@@96) :no-pattern (U_2_bool $f@@96) ))) (=> (forall (($o@@165 T@U) ($f@@97 T@U) ) (! (let ((alpha@@104 (FieldTypeInv0 (type $f@@97)))) (=> (and (and (= (type $o@@165) refType) (= (type $f@@97) (FieldType alpha@@104))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@165 $f@@97)))) :qid |BucketFlushModelidfy.386:32| :skolemid |1665| :no-pattern (type $o@@165) :no-pattern (type $f@@97) :no-pattern (U_2_int $o@@165) :no-pattern (U_2_bool $o@@165) :no-pattern (U_2_int $f@@97) :no-pattern (U_2_bool $f@@97) )) (=> (and (and (and ($IsGoodHeap $Heap@31) ($IsHeapAnchor $Heap@31)) (= $Heap@1 $Heap@31)) (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0)))) (and (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0) MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0) (= (ControlFlow 0 116140) (- 0 890208))))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#2@0|))))))) (let ((anon92_Then_correct  (=> (and (and ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@1) ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@1)) (and ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@1) ($Is (int_2_U (+ |from#0@@16| 1)) Tclass._System.nat))) (=> (and (and (and (= |##from#1_0_0_0_0@0| (+ |from#0@@16| 1)) ($IsAlloc (int_2_U |##from#1_0_0_0_0@0|) Tclass._System.nat $Heap@1)) (and ($IsAlloc (int_2_U |to#0@@16|) Tclass._System.nat $Heap@1) (<= (LitInt 0) |##from#1_0_0_0_0@0|))) (and (and (<= |##from#1_0_0_0_0@0| |to#0@@16|) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= |##from#1_0_0_0_0@0| (BucketFlushModel.singleMergeResult.end |res#2@0|)))))) (=> (and (and (and (and (and (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|))) (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|)) (and (<= 0 (+ |bot_from#0@@6| 1)) (<= (+ |bot_from#0@@6| 1) (|Seq#Length| |bot_keys#0@@6|)))) (and (and (<= 0 (+ |bot_from#0@@6| 1)) (<= (+ |bot_from#0@@6| 1) (|Seq#Length| |bot_msgs#0@@6|))) (= |##keys#1_0_0_0_0@0| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1))))) (and (and (and ($IsAlloc |##keys#1_0_0_0_0@0| (TSeq Tclass.KeyType.Key) $Heap@1) (= |##msgs#1_0_0_0_0@0| (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1)))) (and ($IsAlloc |##msgs#1_0_0_0_0@0| (TSeq Tclass.ValueMessage.Message) $Heap@1) (= (|Seq#Length| |##keys#1_0_0_0_0@0|) (|Seq#Length| |##msgs#1_0_0_0_0@0|)))) (and (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) ($IsAlloc |acc_keys#0@@6| (TSeq Tclass.KeyType.Key) $Heap@1)) (and ($IsAlloc |acc_msgs#0@@6| (TSeq Tclass.ValueMessage.Message) $Heap@1) (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|)))))) (and (and (and (and (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys#0@@6| |acc_msgs#0@@6|) (= |##top#1_0_0_0_0@0| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|))) (and ($IsAlloc |##top#1_0_0_0_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@1) (= |##bot#1_0_0_0_0@0| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1)))))) (and (and ($IsAlloc |##bot#1_0_0_0_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@1) (= |##acc#1_0_0_0_0@0| (MapSeqs.__default.map__of__seqs ($LS $LZ) |acc_keys#0@@6| |acc_msgs#0@@6|))) (and ($IsAlloc |##acc#1_0_0_0_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@1) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (MapSeqs.__default.map__of__seqs ($LS $LZ) |acc_keys#0@@6| |acc_msgs#0@@6|))))) (and (and (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1)))) (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys#0@@6| |acc_msgs#0@@6|)) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (MapSeqs.__default.map__of__seqs ($LS $LZ) |acc_keys#0@@6| |acc_msgs#0@@6|))))) (and (=> (= (ControlFlow 0 116181) (- 0 887836)) (forall (($o@@166 T@U) ($f@@98 T@U) ) (! (let ((alpha@@105 (FieldTypeInv0 (type $f@@98)))) (=> (and (and (= (type $o@@166) refType) (= (type $f@@98) (FieldType alpha@@105))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@166 $f@@98)))) :qid |BucketFlushModelidfy.446:31| :skolemid |1666| :no-pattern (type $o@@166) :no-pattern (type $f@@98) :no-pattern (U_2_int $o@@166) :no-pattern (U_2_bool $o@@166) :no-pattern (U_2_int $f@@98) :no-pattern (U_2_bool $f@@98) ))) (=> (forall (($o@@167 T@U) ($f@@99 T@U) ) (! (let ((alpha@@106 (FieldTypeInv0 (type $f@@99)))) (=> (and (and (= (type $o@@167) refType) (= (type $f@@99) (FieldType alpha@@106))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@167 $f@@99)))) :qid |BucketFlushModelidfy.446:31| :skolemid |1666| :no-pattern (type $o@@167) :no-pattern (type $f@@99) :no-pattern (U_2_int $o@@167) :no-pattern (U_2_bool $o@@167) :no-pattern (U_2_int $f@@99) :no-pattern (U_2_bool $f@@99) )) (and (=> (= (ControlFlow 0 116181) (- 0 887860)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (=> (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|)) (and (=> (= (ControlFlow 0 116181) (- 0 887868)) (<= (LitInt 0) |from#0@@16|)) (=> (<= (LitInt 0) |from#0@@16|) (and (=> (= (ControlFlow 0 116181) (- 0 887875)) (< |from#0@@16| |to#0@@16|)) (=> (< |from#0@@16| |to#0@@16|) (and (=> (= (ControlFlow 0 116181) (- 0 887879)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (=> (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|)) (and (=> (= (ControlFlow 0 116181) (- 0 887885)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (+ |from#0@@16| 1) (BucketFlushModel.singleMergeResult.end |res#2@0|)))) (=> (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (+ |from#0@@16| 1) (BucketFlushModel.singleMergeResult.end |res#2@0|))) (and (=> (= (ControlFlow 0 116181) (- 0 887900)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|)))) (=> (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116181) (- 0 887913)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |top_keys#0@@29|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |top_keys#0@@29|) (=> (and ($IsGoodHeap $Heap@28) ($IsHeapAnchor $Heap@28)) (=> (and (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|)) (|Map#Equal| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|Map#Build| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (|Seq#Index| |top_keys#0@@29| |from#0@@16|) (|Seq#Index| |top_msgs#0@@14| |from#0@@16|)))) (=> (and (and (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (not (U_2_bool (MapType0Select (|Map#Domain| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|)) (|Seq#Index| |top_keys#0@@29| |from#0@@16|))))) (and (= $Heap@1 $Heap@28) ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@28))) (and (and ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@28) ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@28)) (and ($IsAlloc (int_2_U |from#0@@16|) Tclass._System.nat $Heap@28) ($IsAlloc (int_2_U |to#0@@16|) Tclass._System.nat $Heap@28)))) (and (=> (= (ControlFlow 0 116181) (- 0 888070)) (<= (LitInt 0) |from#0@@16|)) (and (=> (= (ControlFlow 0 116181) (- 0 888077)) (<= |from#0@@16| |to#0@@16|)) (and (=> (= (ControlFlow 0 116181) (- 0 888081)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116181) (- 0 888087)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (and (=> (= (ControlFlow 0 116181) (- 0 888095)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= |from#0@@16| (BucketFlushModel.singleMergeResult.end |res#2@0|)))) (and (=> (= (ControlFlow 0 116181) (- 0 888106)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|)))) (=> (and (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@28)) (and ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@28) ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@28))) (and (=> (= (ControlFlow 0 116181) (- 0 888158)) ($Is (int_2_U (+ |from#0@@16| 1)) Tclass._System.nat)) (=> ($Is (int_2_U (+ |from#0@@16| 1)) Tclass._System.nat) (=> (= |##from#1_0_0_0_2@0| (+ |from#0@@16| 1)) (=> (and ($IsAlloc (int_2_U |##from#1_0_0_0_2@0|) Tclass._System.nat $Heap@28) ($IsAlloc (int_2_U |to#0@@16|) Tclass._System.nat $Heap@28)) (and (=> (= (ControlFlow 0 116181) (- 0 888195)) (<= (LitInt 0) |##from#1_0_0_0_2@0|)) (and (=> (= (ControlFlow 0 116181) (- 0 888202)) (<= |##from#1_0_0_0_2@0| |to#0@@16|)) (and (=> (= (ControlFlow 0 116181) (- 0 888206)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116181) (- 0 888212)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (and (=> (= (ControlFlow 0 116181) (- 0 888220)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= |##from#1_0_0_0_2@0| (BucketFlushModel.singleMergeResult.end |res#2@0|)))) (and (=> (= (ControlFlow 0 116181) (- 0 888231)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|)))) (=> (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (=> (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|)) (and (=> (= (ControlFlow 0 116181) (- 0 888287)) (|Map#Equal| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|Map#Build| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) ($Box |key#1_0@0|) ($Box |topmsg#1_0@0|)))) (=> (|Map#Equal| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|Map#Build| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) ($Box |key#1_0@0|) ($Box |topmsg#1_0@0|))) (and (=> (= (ControlFlow 0 116181) (- 0 888338)) (forall (($o@@168 T@U) ($f@@100 T@U) ) (! (let ((alpha@@107 (FieldTypeInv0 (type $f@@100)))) (=> (and (and (= (type $o@@168) refType) (= (type $f@@100) (FieldType alpha@@107))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@168 $f@@100)))) :qid |BucketFlushModelidfy.449:34| :skolemid |1667| :no-pattern (type $o@@168) :no-pattern (type $f@@100) :no-pattern (U_2_int $o@@168) :no-pattern (U_2_bool $o@@168) :no-pattern (U_2_int $f@@100) :no-pattern (U_2_bool $f@@100) ))) (=> (forall (($o@@169 T@U) ($f@@101 T@U) ) (! (let ((alpha@@108 (FieldTypeInv0 (type $f@@101)))) (=> (and (and (= (type $o@@169) refType) (= (type $f@@101) (FieldType alpha@@108))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@169 $f@@101)))) :qid |BucketFlushModelidfy.449:34| :skolemid |1667| :no-pattern (type $o@@169) :no-pattern (type $f@@101) :no-pattern (U_2_int $o@@169) :no-pattern (U_2_bool $o@@169) :no-pattern (U_2_int $f@@101) :no-pattern (U_2_bool $f@@101) )) (and (=> (= (ControlFlow 0 116181) (- 0 888358)) (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|))) (=> (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116181) (- 0 888366)) (<= (LitInt 0) |bot_from#0@@6|)) (=> (<= (LitInt 0) |bot_from#0@@6|) (and (=> (= (ControlFlow 0 116181) (- 0 888373)) (< |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|))) (=> (< |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)) (and (=> (= (ControlFlow 0 116181) (- 0 888379)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|) (=> (and (and (and ($IsGoodHeap $Heap@29) ($IsHeapAnchor $Heap@29)) (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)))) (and (and (|Map#Equal| (|Map#Build| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (|Seq#Index| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Index| |bot_msgs#0@@6| |bot_from#0@@6|)) (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|))) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1)))) (and (not (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1)))) (|Seq#Index| |bot_keys#0@@6| |bot_from#0@@6|)))) (= $Heap@28 $Heap@29)))) (and (=> (= (ControlFlow 0 116181) (- 0 888542)) (and (<= 0 |bot_from#0@@6|) (<= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)))) (and (=> (= (ControlFlow 0 116181) (- 0 888558)) (and (<= 0 |bot_from#0@@6|) (<= |bot_from#0@@6| (|Seq#Length| |bot_msgs#0@@6|)))) (=> (and (and (= |##keys#1_0_0_0_2@0| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|)) ($IsAlloc |##keys#1_0_0_0_2@0| (TSeq Tclass.KeyType.Key) $Heap@29)) (and (= |##msgs#1_0_0_0_2@0| (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)) ($IsAlloc |##msgs#1_0_0_0_2@0| (TSeq Tclass.ValueMessage.Message) $Heap@29))) (and (=> (= (ControlFlow 0 116181) (- 0 888614)) (= (|Seq#Length| |##keys#1_0_0_0_2@0|) (|Seq#Length| |##msgs#1_0_0_0_2@0|))) (=> (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)) (and (=> (= (ControlFlow 0 116181) (- 0 888636)) (and (<= 0 (+ |bot_from#0@@6| 1)) (<= (+ |bot_from#0@@6| 1) (|Seq#Length| |bot_keys#0@@6|)))) (and (=> (= (ControlFlow 0 116181) (- 0 888660)) (and (<= 0 (+ |bot_from#0@@6| 1)) (<= (+ |bot_from#0@@6| 1) (|Seq#Length| |bot_msgs#0@@6|)))) (=> (and (and (= |##keys#1_0_0_0_3@0| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1))) ($IsAlloc |##keys#1_0_0_0_3@0| (TSeq Tclass.KeyType.Key) $Heap@29)) (and (= |##msgs#1_0_0_0_3@0| (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) ($IsAlloc |##msgs#1_0_0_0_3@0| (TSeq Tclass.ValueMessage.Message) $Heap@29))) (and (=> (= (ControlFlow 0 116181) (- 0 888732)) (= (|Seq#Length| |##keys#1_0_0_0_3@0|) (|Seq#Length| |##msgs#1_0_0_0_3@0|))) (=> (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (=> (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1)))) (and (=> (= (ControlFlow 0 116181) (- 0 888800)) (|Map#Equal| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)) (|Map#Build| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) ($Box |key#1_0@0|) ($Box |botmsg#1_0@0|)))) (=> (|Map#Equal| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)) (|Map#Build| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) ($Box |key#1_0@0|) ($Box |botmsg#1_0@0|))) (and (=> (= (ControlFlow 0 116181) (- 0 888914)) (not (U_2_bool (MapType0Select (|Map#Domain| |acc#2@0|) ($Box |key#1_0@0|))))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| |acc#2@0|) ($Box |key#1_0@0|)))) (and (=> (= (ControlFlow 0 116181) (- 0 888924)) (and (<= 0 (+ |bot_from#0@@6| 1)) (<= (+ |bot_from#0@@6| 1) (|Seq#Length| |bot_keys#0@@6|)))) (and (=> (= (ControlFlow 0 116181) (- 0 888948)) (and (<= 0 (+ |bot_from#0@@6| 1)) (<= (+ |bot_from#0@@6| 1) (|Seq#Length| |bot_msgs#0@@6|)))) (=> (and (and (= |##keys#1_0_0_0_4@0| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1))) ($IsAlloc |##keys#1_0_0_0_4@0| (TSeq Tclass.KeyType.Key) $Heap@29)) (and (= |##msgs#1_0_0_0_4@0| (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) ($IsAlloc |##msgs#1_0_0_0_4@0| (TSeq Tclass.ValueMessage.Message) $Heap@29))) (and (=> (= (ControlFlow 0 116181) (- 0 889020)) (= (|Seq#Length| |##keys#1_0_0_0_4@0|) (|Seq#Length| |##msgs#1_0_0_0_4@0|))) (=> (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1)))) (and (=> (= (ControlFlow 0 116181) (- 0 889072)) (not (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1)))) ($Box |key#1_0@0|))))) (=> (and (and (not (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1)))) ($Box |key#1_0@0|)))) ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@29)) (and ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@29) ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@29))) (and (=> (= (ControlFlow 0 116181) (- 0 889172)) ($Is (int_2_U (+ |from#0@@16| 1)) Tclass._System.nat)) (=> ($Is (int_2_U (+ |from#0@@16| 1)) Tclass._System.nat) (=> (= |##from#1_0_0_0_3@0| (+ |from#0@@16| 1)) (=> (and ($IsAlloc (int_2_U |##from#1_0_0_0_3@0|) Tclass._System.nat $Heap@29) ($IsAlloc (int_2_U |to#0@@16|) Tclass._System.nat $Heap@29)) (and (=> (= (ControlFlow 0 116181) (- 0 889209)) (<= (LitInt 0) |##from#1_0_0_0_3@0|)) (and (=> (= (ControlFlow 0 116181) (- 0 889216)) (<= |##from#1_0_0_0_3@0| |to#0@@16|)) (and (=> (= (ControlFlow 0 116181) (- 0 889220)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116181) (- 0 889226)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (and (=> (= (ControlFlow 0 116181) (- 0 889234)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= |##from#1_0_0_0_3@0| (BucketFlushModel.singleMergeResult.end |res#2@0|)))) (and (=> (= (ControlFlow 0 116181) (- 0 889245)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|)))) (=> (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|)) (and (=> (= (ControlFlow 0 116181) (- 0 889288)) (not (U_2_bool (MapType0Select (|Map#Domain| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|)) ($Box |key#1_0@0|))))) (=> (not (U_2_bool (MapType0Select (|Map#Domain| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|)) ($Box |key#1_0@0|)))) (=> ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@29) (=> (and (and ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@29) ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@29)) (and ($IsAlloc (int_2_U |from#0@@16|) Tclass._System.nat $Heap@29) ($IsAlloc (int_2_U |to#0@@16|) Tclass._System.nat $Heap@29))) (and (=> (= (ControlFlow 0 116181) (- 0 889358)) (<= (LitInt 0) |from#0@@16|)) (and (=> (= (ControlFlow 0 116181) (- 0 889365)) (<= |from#0@@16| |to#0@@16|)) (and (=> (= (ControlFlow 0 116181) (- 0 889369)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116181) (- 0 889375)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (and (=> (= (ControlFlow 0 116181) (- 0 889383)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= |from#0@@16| (BucketFlushModel.singleMergeResult.end |res#2@0|)))) (and (=> (= (ControlFlow 0 116181) (- 0 889394)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|)))) (=> (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (= |##top#1_0_0_0_1@0| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|))) (=> (and (and (and ($IsAlloc |##top#1_0_0_0_1@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@29) ($IsAlloc |bot#2@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@29)) (and ($IsAlloc |acc#2@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@29) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|))) (and (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|)) (= (ControlFlow 0 116181) (- 0 889512)))) (|Map#Equal| (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys#0@@6| |acc_msgs#0@@6|)) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((anon91_Then_correct  (=> (and (and ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@1) (= (|Seq#Length| (BucketFlushModel.singleMergeResult.keys |res#2@0|)) (|Seq#Length| (BucketFlushModel.singleMergeResult.msgs |res#2@0|)))) (and (|BucketFlushModel.singleMergeResult.bucketMap#canCall| |res#2@0|) (|BucketFlushModel.singleMergeResult.bucketMap#canCall| |res#2@0|))) (and (=> (= (ControlFlow 0 116177) (- 0 885675)) ($Is (int_2_U (+ |from#0@@16| 1)) Tclass._System.nat)) (=> ($Is (int_2_U (+ |from#0@@16| 1)) Tclass._System.nat) (=> (= |from##1_0_0_1_0@0| (+ |from#0@@16| 1)) (and (=> (= (ControlFlow 0 116177) (- 0 885714)) ($Is (int_2_U (+ |bot_from#0@@6| 1)) Tclass._System.nat)) (=> ($Is (int_2_U (+ |bot_from#0@@6| 1)) Tclass._System.nat) (=> (= |bot_from##1_0_0_1_0@0| (+ |bot_from#0@@6| 1)) (=> (and ($IsAlloc |key#1_0@0| Tclass.KeyType.Key $Heap@1) (|BucketWeights.__default.WeightKey#canCall| |key#1_0@0|)) (=> (and (and ($IsAlloc |botmsg#1_0@0| Tclass.ValueMessage.Message $Heap@1) (|BucketWeights.__default.WeightMessage#canCall| |botmsg#1_0@0|)) (and (|BucketWeights.__default.WeightKey#canCall| |key#1_0@0|) (|BucketWeights.__default.WeightMessage#canCall| |botmsg#1_0@0|))) (and (=> (= (ControlFlow 0 116177) (- 0 885776)) ($Is (int_2_U (+ (+ |slack#0@@12| (BucketWeights.__default.WeightKey |key#1_0@0|)) (BucketWeights.__default.WeightMessage |botmsg#1_0@0|))) Tclass._System.nat)) (=> ($Is (int_2_U (+ (+ |slack#0@@12| (BucketWeights.__default.WeightKey |key#1_0@0|)) (BucketWeights.__default.WeightMessage |botmsg#1_0@0|))) Tclass._System.nat) (=> (= |slack##1_0_0_1_0@0| (+ (+ |slack#0@@12| (BucketWeights.__default.WeightKey |key#1_0@0|)) (BucketWeights.__default.WeightMessage |botmsg#1_0@0|))) (and (=> (= (ControlFlow 0 116177) (- 0 885810)) (forall (($o@@170 T@U) ($f@@102 T@U) ) (! (let ((alpha@@109 (FieldTypeInv0 (type $f@@102)))) (=> (and (and (= (type $o@@170) refType) (= (type $f@@102) (FieldType alpha@@109))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@170 $f@@102)))) :qid |BucketFlushModelidfy.435:49| :skolemid |1668| :no-pattern (type $o@@170) :no-pattern (type $f@@102) :no-pattern (U_2_int $o@@170) :no-pattern (U_2_bool $o@@170) :no-pattern (U_2_int $f@@102) :no-pattern (U_2_bool $f@@102) ))) (=> (forall (($o@@171 T@U) ($f@@103 T@U) ) (! (let ((alpha@@110 (FieldTypeInv0 (type $f@@103)))) (=> (and (and (= (type $o@@171) refType) (= (type $f@@103) (FieldType alpha@@110))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@171 $f@@103)))) :qid |BucketFlushModelidfy.435:49| :skolemid |1668| :no-pattern (type $o@@171) :no-pattern (type $f@@103) :no-pattern (U_2_int $o@@171) :no-pattern (U_2_bool $o@@171) :no-pattern (U_2_int $f@@103) :no-pattern (U_2_bool $f@@103) )) (and (=> (= (ControlFlow 0 116177) (- 0 885824)) (or (<= 0 (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)) (= (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from##1_0_0_1_0@0|) |bot_from##1_0_0_1_0@0|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)))) (=> (or (<= 0 (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)) (= (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from##1_0_0_1_0@0|) |bot_from##1_0_0_1_0@0|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|))) (and (=> (= (ControlFlow 0 116177) (- 0 885882)) (< (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from##1_0_0_1_0@0|) |bot_from##1_0_0_1_0@0|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|))) (=> (< (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from##1_0_0_1_0@0|) |bot_from##1_0_0_1_0@0|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)) (and (=> (= (ControlFlow 0 116177) (- 0 885936)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (=> (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|)) (and (=> (= (ControlFlow 0 116177) (- 0 885944)) (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|))) (=> (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116177) (- 0 885952)) (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|))) (=> (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116177) (- 0 885960)) (<= |from##1_0_0_1_0@0| |to#0@@16|)) (=> (<= |from##1_0_0_1_0@0| |to#0@@16|) (and (=> (= (ControlFlow 0 116177) (- 0 885964)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (=> (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|)) (and (=> (= (ControlFlow 0 116177) (- 0 885970)) (<= |bot_from##1_0_0_1_0@0| (|Seq#Length| |bot_keys#0@@6|))) (=> (<= |bot_from##1_0_0_1_0@0| (|Seq#Length| |bot_keys#0@@6|)) (and (=> (= (ControlFlow 0 116177) (- 0 885976)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys#0@@6|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys#0@@6|) (and (=> (= (ControlFlow 0 116177) (- 0 885981)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |top_keys#0@@29|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |top_keys#0@@29|) (and (=> (= (ControlFlow 0 116177) (- 0 885986)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|) (and (=> (= (ControlFlow 0 116177) (- 0 885991)) (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys#0@@6| |top_keys#0@@29| |from##1_0_0_1_0@0|) (or (BucketFlushModel.__default.seq__lt |acc_keys#0@@6| |top_keys#0@@29| |from##1_0_0_1_0@0|) (forall ((|i#6@@3| Int) (|j#0@@36| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#6@@3|) (< |i#6@@3| (|Seq#Length| |acc_keys#0@@6|))) (and (<= |from##1_0_0_1_0@0| |j#0@@36|) (< |j#0@@36| (|Seq#Length| |top_keys#0@@29|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys#0@@6| |i#6@@3|)) ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@36|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1632| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@36|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys#0@@6| |i#6@@3|))) ))))) (=> (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys#0@@6| |top_keys#0@@29| |from##1_0_0_1_0@0|) (or (BucketFlushModel.__default.seq__lt |acc_keys#0@@6| |top_keys#0@@29| |from##1_0_0_1_0@0|) (forall ((|i#6@@4| Int) (|j#0@@37| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#6@@4|) (< |i#6@@4| (|Seq#Length| |acc_keys#0@@6|))) (and (<= |from##1_0_0_1_0@0| |j#0@@37|) (< |j#0@@37| (|Seq#Length| |top_keys#0@@29|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys#0@@6| |i#6@@4|)) ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@37|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1632| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@37|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys#0@@6| |i#6@@4|))) )))) (and (=> (= (ControlFlow 0 116177) (- 0 886082)) (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys#0@@6| |bot_keys#0@@6| |bot_from##1_0_0_1_0@0|) (or (BucketFlushModel.__default.seq__lt |acc_keys#0@@6| |bot_keys#0@@6| |bot_from##1_0_0_1_0@0|) (forall ((|i#7@@3| Int) (|j#1@@19| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#7@@3|) (< |i#7@@3| (|Seq#Length| |acc_keys#0@@6|))) (and (<= |bot_from##1_0_0_1_0@0| |j#1@@19|) (< |j#1@@19| (|Seq#Length| |bot_keys#0@@6|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys#0@@6| |i#7@@3|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@19|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1634| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@19|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys#0@@6| |i#7@@3|))) ))))) (=> (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys#0@@6| |bot_keys#0@@6| |bot_from##1_0_0_1_0@0|) (or (BucketFlushModel.__default.seq__lt |acc_keys#0@@6| |bot_keys#0@@6| |bot_from##1_0_0_1_0@0|) (forall ((|i#7@@4| Int) (|j#1@@20| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#7@@4|) (< |i#7@@4| (|Seq#Length| |acc_keys#0@@6|))) (and (<= |bot_from##1_0_0_1_0@0| |j#1@@20|) (< |j#1@@20| (|Seq#Length| |bot_keys#0@@6|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys#0@@6| |i#7@@4|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@20|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1634| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@20|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys#0@@6| |i#7@@4|))) )))) (and (=> (= (ControlFlow 0 116177) (- 0 886173)) (forall ((|i#1@@86| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@86|) (< |i#1@@86| (|Seq#Length| |bot_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@86|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.311:19| :skolemid |1636| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@86|))) ))) (=> (forall ((|i#1@@87| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@87|) (< |i#1@@87| (|Seq#Length| |bot_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@87|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.311:19| :skolemid |1636| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@87|))) )) (and (=> (= (ControlFlow 0 116177) (- 0 886220)) (forall ((|i#3@@18| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@18|) (< |i#3@@18| (|Seq#Length| |top_msgs#0@@14|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@18|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.312:19| :skolemid |1637| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@18|))) ))) (=> (forall ((|i#3@@19| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@19|) (< |i#3@@19| (|Seq#Length| |top_msgs#0@@14|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@19|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.312:19| :skolemid |1637| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@19|))) )) (and (=> (= (ControlFlow 0 116177) (- 0 886267)) (forall ((|i#5@@3| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@3|) (< |i#5@@3| (|Seq#Length| |acc_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs#0@@6| |i#5@@3|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.313:19| :skolemid |1638| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs#0@@6| |i#5@@3|))) ))) (=> (forall ((|i#5@@4| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@4|) (< |i#5@@4| (|Seq#Length| |acc_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs#0@@6| |i#5@@4|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.313:19| :skolemid |1638| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs#0@@6| |i#5@@4|))) )) (=> (and ($IsGoodHeap $Heap@27) ($IsHeapAnchor $Heap@27)) (=> (and (and (and (|BucketFlushModel.__default.mergeToOneChild#canCall| |top_keys#0@@29| |top_msgs#0@@14| |from##1_0_0_1_0@0| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from##1_0_0_1_0@0| |acc_keys#0@@6| |acc_msgs#0@@6| |slack##1_0_0_1_0@0|) (let ((|res#0@@1| (BucketFlushModel.__default.mergeToOneChild StartFuel_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from##1_0_0_1_0@0| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from##1_0_0_1_0@0| |acc_keys#0@@6| |acc_msgs#0@@6| |slack##1_0_0_1_0@0|))) (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| (|Seq#Take| |top_keys#0@@29| |to#0@@16|) |from##1_0_0_1_0@0|) (|Seq#Drop| (|Seq#Take| |top_msgs#0@@14| |to#0@@16|) |from##1_0_0_1_0@0|)) (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| |bot_from##1_0_0_1_0@0|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from##1_0_0_1_0@0|)) (let ((|bot#0@@13| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| |bot_from##1_0_0_1_0@0|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from##1_0_0_1_0@0|)))) (and (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys#0@@6| |acc_msgs#0@@6|) (let ((|acc#0@@7| (MapSeqs.__default.map__of__seqs ($LS $LZ) |acc_keys#0@@6| |acc_msgs#0@@6|))) (and (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#0@@1|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#0@@1|)) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketFlushModel.singleMergeResult.keys |res#0@@1|))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#0@@1|)) (and (|BucketFlushModel.singleMergeResult.bucketMap#canCall| |res#0@@1|) (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#0@@1| |top_keys#0@@29| |top_msgs#0@@14| |from##1_0_0_1_0@0| |to#0@@16|) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#0@@1| |top_keys#0@@29| |top_msgs#0@@14| |from##1_0_0_1_0@0| |to#0@@16|) |bot#0@@13| |acc#0@@7|)))))))))))) (and (let ((|res#0@@2| (BucketFlushModel.__default.mergeToOneChild StartFuelAssert_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from##1_0_0_1_0@0| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from##1_0_0_1_0@0| |acc_keys#0@@6| |acc_msgs#0@@6| |slack##1_0_0_1_0@0|))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#0@@2|))) (let ((|res#0@@3| (BucketFlushModel.__default.mergeToOneChild StartFuelAssert_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from##1_0_0_1_0@0| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from##1_0_0_1_0@0| |acc_keys#0@@6| |acc_msgs#0@@6| |slack##1_0_0_1_0@0|))) (let ((|bot#0@@14| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| |bot_from##1_0_0_1_0@0|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from##1_0_0_1_0@0|)))) (let ((|acc#0@@8| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys#0@@6| |acc_msgs#0@@6|))) (|Map#Equal| (BucketFlushModel.singleMergeResult.bucketMap |res#0@@3|) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#0@@3| |top_keys#0@@29| |top_msgs#0@@14| |from##1_0_0_1_0@0| |to#0@@16|) |bot#0@@14| |acc#0@@8|))))))) (and (and (= $Heap@1 $Heap@27) ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@27)) (and ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@27) ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@27)))) (and (=> (= (ControlFlow 0 116177) (- 0 886686)) ($Is (int_2_U (+ |from#0@@16| 1)) Tclass._System.nat)) (=> ($Is (int_2_U (+ |from#0@@16| 1)) Tclass._System.nat) (=> (= |##from#1_0_0_1_0@0| (+ |from#0@@16| 1)) (=> (and ($IsAlloc (int_2_U |##from#1_0_0_1_0@0|) Tclass._System.nat $Heap@27) ($IsAlloc (int_2_U |to#0@@16|) Tclass._System.nat $Heap@27)) (and (=> (= (ControlFlow 0 116177) (- 0 886723)) (<= (LitInt 0) |##from#1_0_0_1_0@0|)) (and (=> (= (ControlFlow 0 116177) (- 0 886730)) (<= |##from#1_0_0_1_0@0| |to#0@@16|)) (and (=> (= (ControlFlow 0 116177) (- 0 886734)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116177) (- 0 886740)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (and (=> (= (ControlFlow 0 116177) (- 0 886748)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= |##from#1_0_0_1_0@0| (BucketFlushModel.singleMergeResult.end |res#2@0|)))) (and (=> (= (ControlFlow 0 116177) (- 0 886759)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|)))) (=> (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (and (=> (= (ControlFlow 0 116177) (- 0 886787)) (and (<= 0 (+ |bot_from#0@@6| 1)) (<= (+ |bot_from#0@@6| 1) (|Seq#Length| |bot_keys#0@@6|)))) (and (=> (= (ControlFlow 0 116177) (- 0 886811)) (and (<= 0 (+ |bot_from#0@@6| 1)) (<= (+ |bot_from#0@@6| 1) (|Seq#Length| |bot_msgs#0@@6|)))) (=> (and (and (= |##keys#1_0_0_1_0@0| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1))) ($IsAlloc |##keys#1_0_0_1_0@0| (TSeq Tclass.KeyType.Key) $Heap@27)) (and (= |##msgs#1_0_0_1_0@0| (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) ($IsAlloc |##msgs#1_0_0_1_0@0| (TSeq Tclass.ValueMessage.Message) $Heap@27))) (and (=> (= (ControlFlow 0 116177) (- 0 886883)) (= (|Seq#Length| |##keys#1_0_0_1_0@0|) (|Seq#Length| |##msgs#1_0_0_1_0@0|))) (=> (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (=> (and ($IsAlloc |acc_keys#0@@6| (TSeq Tclass.KeyType.Key) $Heap@27) ($IsAlloc |acc_msgs#0@@6| (TSeq Tclass.ValueMessage.Message) $Heap@27)) (and (=> (= (ControlFlow 0 116177) (- 0 886935)) (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|))) (=> (and (and (and (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys#0@@6| |acc_msgs#0@@6|) (= |##top#1_0_0_1_0@0| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|))) (and ($IsAlloc |##top#1_0_0_1_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@27) (= |##bot#1_0_0_1_0@0| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1)))))) (and (and ($IsAlloc |##bot#1_0_0_1_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@27) (= |##acc#1_0_0_1_0@0| (MapSeqs.__default.map__of__seqs ($LS $LZ) |acc_keys#0@@6| |acc_msgs#0@@6|))) (and ($IsAlloc |##acc#1_0_0_1_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@27) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (MapSeqs.__default.map__of__seqs ($LS $LZ) |acc_keys#0@@6| |acc_msgs#0@@6|))))) (=> (and (and (and (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1)))) (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys#0@@6| |acc_msgs#0@@6|)) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (MapSeqs.__default.map__of__seqs ($LS $LZ) |acc_keys#0@@6| |acc_msgs#0@@6|))) (= (ControlFlow 0 116177) (- 0 887203))) (|Map#Equal| (BucketFlushModel.singleMergeResult.bucketMap |res#2@0|) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys#0@@6| |acc_msgs#0@@6|))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((anon90_Then_correct  (=> (and ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@1) (= (ControlFlow 0 116173) (- 0 885619))) (= (|Seq#Length| (BucketFlushModel.singleMergeResult.keys |res#2@0|)) (|Seq#Length| (BucketFlushModel.singleMergeResult.msgs |res#2@0|)))))) (let ((anon96_Then_correct  (and (=> (= (ControlFlow 0 116206) (- 0 885533)) (forall (($o@@172 T@U) ($f@@104 T@U) ) (! (let ((alpha@@111 (FieldTypeInv0 (type $f@@104)))) (=> (and (and (= (type $o@@172) refType) (= (type $f@@104) (FieldType alpha@@111))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@172 $f@@104)))) :qid |BucketFlushModelidfy.475:36| :skolemid |1670| :no-pattern (type $o@@172) :no-pattern (type $f@@104) :no-pattern (U_2_int $o@@172) :no-pattern (U_2_bool $o@@172) :no-pattern (U_2_int $f@@104) :no-pattern (U_2_bool $f@@104) ))) (=> (forall (($o@@173 T@U) ($f@@105 T@U) ) (! (let ((alpha@@112 (FieldTypeInv0 (type $f@@105)))) (=> (and (and (= (type $o@@173) refType) (= (type $f@@105) (FieldType alpha@@112))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@173 $f@@105)))) :qid |BucketFlushModelidfy.475:36| :skolemid |1670| :no-pattern (type $o@@173) :no-pattern (type $f@@105) :no-pattern (U_2_int $o@@173) :no-pattern (U_2_bool $o@@173) :no-pattern (U_2_int $f@@105) :no-pattern (U_2_bool $f@@105) )) (=> (and (and (and ($IsGoodHeap $Heap@26) ($IsHeapAnchor $Heap@26)) (= $Heap@1 $Heap@26)) (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0)))) (and (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0) MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0) (= (ControlFlow 0 116206) (- 0 885597))))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#2@0|))))))) (let ((anon95_Then_correct  (=> ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@1) (=> (and (and (and (= (|Seq#Length| (BucketFlushModel.singleMergeResult.keys |res#2@0|)) (|Seq#Length| (BucketFlushModel.singleMergeResult.msgs |res#2@0|))) (|BucketFlushModel.singleMergeResult.bucketMap#canCall| |res#2@0|)) (and (|BucketFlushModel.singleMergeResult.bucketMap#canCall| |res#2@0|) ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@1))) (and (and ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@1) ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@1)) (and ($IsAlloc (int_2_U |from#0@@16|) Tclass._System.nat $Heap@1) ($IsAlloc (int_2_U |to#0@@16|) Tclass._System.nat $Heap@1)))) (and (=> (= (ControlFlow 0 116200) (- 0 884735)) (<= (LitInt 0) |from#0@@16|)) (and (=> (= (ControlFlow 0 116200) (- 0 884742)) (<= |from#0@@16| |to#0@@16|)) (and (=> (= (ControlFlow 0 116200) (- 0 884746)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116200) (- 0 884752)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (and (=> (= (ControlFlow 0 116200) (- 0 884760)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= |from#0@@16| (BucketFlushModel.singleMergeResult.end |res#2@0|)))) (and (=> (= (ControlFlow 0 116200) (- 0 884771)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|)))) (=> (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|)) (and (=> (= (ControlFlow 0 116200) (- 0 884806)) (|Map#Equal| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|Map#Empty| BoxType BoxType))) (=> (|Map#Equal| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|Map#Empty| BoxType BoxType)) (and (=> (= (ControlFlow 0 116200) (- 0 884848)) (forall (($o@@174 T@U) ($f@@106 T@U) ) (! (let ((alpha@@113 (FieldTypeInv0 (type $f@@106)))) (=> (and (and (= (type $o@@174) refType) (= (type $f@@106) (FieldType alpha@@113))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@174 $f@@106)))) :qid |BucketFlushModelidfy.468:42| :skolemid |1669| :no-pattern (type $o@@174) :no-pattern (type $f@@106) :no-pattern (U_2_int $o@@174) :no-pattern (U_2_bool $o@@174) :no-pattern (U_2_int $f@@106) :no-pattern (U_2_bool $f@@106) ))) (=> (forall (($o@@175 T@U) ($f@@107 T@U) ) (! (let ((alpha@@114 (FieldTypeInv0 (type $f@@107)))) (=> (and (and (= (type $o@@175) refType) (= (type $f@@107) (FieldType alpha@@114))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@175 $f@@107)))) :qid |BucketFlushModelidfy.468:42| :skolemid |1669| :no-pattern (type $o@@175) :no-pattern (type $f@@107) :no-pattern (U_2_int $o@@175) :no-pattern (U_2_bool $o@@175) :no-pattern (U_2_int $f@@107) :no-pattern (U_2_bool $f@@107) )) (and (=> (= (ControlFlow 0 116200) (- 0 884872)) (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|))) (=> (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116200) (- 0 884880)) (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|))) (=> (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116200) (- 0 884888)) (<= (LitInt 0) |bot_from#0@@6|)) (=> (<= (LitInt 0) |bot_from#0@@6|) (and (=> (= (ControlFlow 0 116200) (- 0 884895)) (<= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|))) (=> (<= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)) (and (=> (= (ControlFlow 0 116200) (- 0 884901)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys#0@@6|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys#0@@6|) (and (=> (= (ControlFlow 0 116200) (- 0 884906)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|) (and (=> (= (ControlFlow 0 116200) (- 0 884911)) (forall ((|i#1@@88| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@88|) (< |i#1@@88| (|Seq#Length| |acc_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs#0@@6| |i#1@@88|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.241:19| :skolemid |1605| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs#0@@6| |i#1@@88|))) ))) (=> (forall ((|i#1@@89| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@89|) (< |i#1@@89| (|Seq#Length| |acc_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs#0@@6| |i#1@@89|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.241:19| :skolemid |1605| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs#0@@6| |i#1@@89|))) )) (and (=> (= (ControlFlow 0 116200) (- 0 884958)) (forall ((|i#3@@20| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@20|) (< |i#3@@20| (|Seq#Length| |bot_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#3@@20|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.242:19| :skolemid |1606| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#3@@20|))) ))) (=> (forall ((|i#3@@21| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@21|) (< |i#3@@21| (|Seq#Length| |bot_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#3@@21|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.242:19| :skolemid |1606| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#3@@21|))) )) (and (=> (= (ControlFlow 0 116200) (- 0 885005)) (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys#0@@6| |bot_keys#0@@6| |bot_from#0@@6|) (or (BucketFlushModel.__default.seq__lt |acc_keys#0@@6| |bot_keys#0@@6| |bot_from#0@@6|) (forall ((|i#4@@3| Int) (|j#0@@38| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#4@@3|) (< |i#4@@3| (|Seq#Length| |acc_keys#0@@6|))) (and (<= |bot_from#0@@6| |j#0@@38|) (< |j#0@@38| (|Seq#Length| |bot_keys#0@@6|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys#0@@6| |i#4@@3|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#0@@38|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1607| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#0@@38|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys#0@@6| |i#4@@3|))) ))))) (=> (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys#0@@6| |bot_keys#0@@6| |bot_from#0@@6|) (or (BucketFlushModel.__default.seq__lt |acc_keys#0@@6| |bot_keys#0@@6| |bot_from#0@@6|) (forall ((|i#4@@4| Int) (|j#0@@39| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#4@@4|) (< |i#4@@4| (|Seq#Length| |acc_keys#0@@6|))) (and (<= |bot_from#0@@6| |j#0@@39|) (< |j#0@@39| (|Seq#Length| |bot_keys#0@@6|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys#0@@6| |i#4@@4|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#0@@39|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1607| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#0@@39|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys#0@@6| |i#4@@4|))) )))) (=> (and ($IsGoodHeap $Heap@25) ($IsHeapAnchor $Heap@25)) (=> (and (and (and (and (and (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)) (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys#0@@6| |acc_msgs#0@@6|)) (|BucketFlushModel.__default.topBotAccMerge#canCall| (Lit (|Map#Empty| BoxType BoxType)) (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)) (MapSeqs.__default.map__of__seqs ($LS $LZ) |acc_keys#0@@6| |acc_msgs#0@@6|))) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Append| |acc_keys#0@@6| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|)) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)))) (|Map#Equal| (BucketFlushModel.__default.topBotAccMerge (Lit (|Map#Empty| BoxType BoxType)) (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)) (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys#0@@6| |acc_msgs#0@@6|)) (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Append| |acc_keys#0@@6| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|)) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|))))) (and (= $Heap@1 $Heap@25) ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@25))) (and (and ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@25) ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@25)) (and ($IsAlloc (int_2_U |from#0@@16|) Tclass._System.nat $Heap@25) ($IsAlloc (int_2_U |to#0@@16|) Tclass._System.nat $Heap@25)))) (and (=> (= (ControlFlow 0 116200) (- 0 885290)) (<= (LitInt 0) |from#0@@16|)) (and (=> (= (ControlFlow 0 116200) (- 0 885297)) (<= |from#0@@16| |to#0@@16|)) (and (=> (= (ControlFlow 0 116200) (- 0 885301)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116200) (- 0 885307)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (and (=> (= (ControlFlow 0 116200) (- 0 885315)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= |from#0@@16| (BucketFlushModel.singleMergeResult.end |res#2@0|)))) (and (=> (= (ControlFlow 0 116200) (- 0 885326)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|)))) (=> (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (= |##top#1_1_0_0_0@0| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|))) (=> (and (and (and ($IsAlloc |##top#1_1_0_0_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@25) ($IsAlloc |bot#2@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@25)) (and ($IsAlloc |acc#2@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@25) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|))) (and (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|)) (= (ControlFlow 0 116200) (- 0 885444)))) (|Map#Equal| (BucketFlushModel.singleMergeResult.bucketMap |res#2@0|) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|))))))))))))))))))))))))))))))))))))))))))))) (let ((anon94_Then_correct  (=> (and ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@1) (= (ControlFlow 0 116196) (- 0 884645))) (= (|Seq#Length| (BucketFlushModel.singleMergeResult.keys |res#2@0|)) (|Seq#Length| (BucketFlushModel.singleMergeResult.msgs |res#2@0|)))))) (let ((anon100_Then_correct  (and (=> (= (ControlFlow 0 116228) (- 0 883574)) (forall (($o@@176 T@U) ($f@@108 T@U) ) (! (let ((alpha@@115 (FieldTypeInv0 (type $f@@108)))) (=> (and (and (= (type $o@@176) refType) (= (type $f@@108) (FieldType alpha@@115))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@176 $f@@108)))) :qid |BucketFlushModelidfy.504:36| :skolemid |1676| :no-pattern (type $o@@176) :no-pattern (type $f@@108) :no-pattern (U_2_int $o@@176) :no-pattern (U_2_bool $o@@176) :no-pattern (U_2_int $f@@108) :no-pattern (U_2_bool $f@@108) ))) (=> (forall (($o@@177 T@U) ($f@@109 T@U) ) (! (let ((alpha@@116 (FieldTypeInv0 (type $f@@109)))) (=> (and (and (= (type $o@@177) refType) (= (type $f@@109) (FieldType alpha@@116))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@177 $f@@109)))) :qid |BucketFlushModelidfy.504:36| :skolemid |1676| :no-pattern (type $o@@177) :no-pattern (type $f@@109) :no-pattern (U_2_int $o@@177) :no-pattern (U_2_bool $o@@177) :no-pattern (U_2_int $f@@109) :no-pattern (U_2_bool $f@@109) )) (=> (and ($IsGoodHeap $Heap@23) ($IsHeapAnchor $Heap@23)) (=> (and (and (= $Heap@1 $Heap@23) (= StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0))) (and (= StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0) MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0))) (and (=> (= (ControlFlow 0 116228) (- 0 883650)) ($Is (int_2_U (+ |from#0@@16| 1)) Tclass._System.nat)) (=> ($Is (int_2_U (+ |from#0@@16| 1)) Tclass._System.nat) (=> (= |from##1_0@0| (+ |from#0@@16| 1)) (and (=> (= (ControlFlow 0 116228) (- 0 883689)) ($Is (int_2_U (+ |bot_from#0@@6| 1)) Tclass._System.nat)) (=> ($Is (int_2_U (+ |bot_from#0@@6| 1)) Tclass._System.nat) (=> (= |bot_from##1_0@0| (+ |bot_from#0@@6| 1)) (=> (and (= |acc_keys##1_0@0| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#1_0@0|)))) (= |acc_msgs##1_0@0| (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#1_0@0|))))) (and (=> (= (ControlFlow 0 116228) (- 0 883755)) ($Is (int_2_U (- |slack#0@@12| |delta#1_0@0|)) Tclass._System.nat)) (=> ($Is (int_2_U (- |slack#0@@12| |delta#1_0@0|)) Tclass._System.nat) (=> (= |slack##1_0@0| (- |slack#0@@12| |delta#1_0@0|)) (and (=> (= (ControlFlow 0 116228) (- 0 883775)) (forall (($o@@178 T@U) ($f@@110 T@U) ) (! (let ((alpha@@117 (FieldTypeInv0 (type $f@@110)))) (=> (and (and (= (type $o@@178) refType) (= (type $f@@110) (FieldType alpha@@117))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@178 $f@@110)))) :qid |BucketFlushModelidfy.505:49| :skolemid |1677| :no-pattern (type $o@@178) :no-pattern (type $f@@110) :no-pattern (U_2_int $o@@178) :no-pattern (U_2_bool $o@@178) :no-pattern (U_2_int $f@@110) :no-pattern (U_2_bool $f@@110) ))) (=> (forall (($o@@179 T@U) ($f@@111 T@U) ) (! (let ((alpha@@118 (FieldTypeInv0 (type $f@@111)))) (=> (and (and (= (type $o@@179) refType) (= (type $f@@111) (FieldType alpha@@118))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@179 $f@@111)))) :qid |BucketFlushModelidfy.505:49| :skolemid |1677| :no-pattern (type $o@@179) :no-pattern (type $f@@111) :no-pattern (U_2_int $o@@179) :no-pattern (U_2_bool $o@@179) :no-pattern (U_2_int $f@@111) :no-pattern (U_2_bool $f@@111) )) (and (=> (= (ControlFlow 0 116228) (- 0 883789)) (or (<= 0 (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)) (= (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from##1_0@0|) |bot_from##1_0@0|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)))) (=> (or (<= 0 (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)) (= (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from##1_0@0|) |bot_from##1_0@0|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|))) (and (=> (= (ControlFlow 0 116228) (- 0 883847)) (< (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from##1_0@0|) |bot_from##1_0@0|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|))) (=> (< (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from##1_0@0|) |bot_from##1_0@0|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)) (and (=> (= (ControlFlow 0 116228) (- 0 883901)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (=> (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|)) (and (=> (= (ControlFlow 0 116228) (- 0 883909)) (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|))) (=> (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116228) (- 0 883917)) (= (|Seq#Length| |acc_keys##1_0@0|) (|Seq#Length| |acc_msgs##1_0@0|))) (=> (= (|Seq#Length| |acc_keys##1_0@0|) (|Seq#Length| |acc_msgs##1_0@0|)) (and (=> (= (ControlFlow 0 116228) (- 0 883925)) (<= |from##1_0@0| |to#0@@16|)) (=> (<= |from##1_0@0| |to#0@@16|) (and (=> (= (ControlFlow 0 116228) (- 0 883929)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (=> (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|)) (and (=> (= (ControlFlow 0 116228) (- 0 883935)) (<= |bot_from##1_0@0| (|Seq#Length| |bot_keys#0@@6|))) (=> (<= |bot_from##1_0@0| (|Seq#Length| |bot_keys#0@@6|)) (and (=> (= (ControlFlow 0 116228) (- 0 883941)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys##1_0@0|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys##1_0@0|) (and (=> (= (ControlFlow 0 116228) (- 0 883946)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |top_keys#0@@29|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |top_keys#0@@29|) (and (=> (= (ControlFlow 0 116228) (- 0 883951)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|) (and (=> (= (ControlFlow 0 116228) (- 0 883956)) (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##1_0@0| |top_keys#0@@29| |from##1_0@0|) (or (BucketFlushModel.__default.seq__lt |acc_keys##1_0@0| |top_keys#0@@29| |from##1_0@0|) (forall ((|i#6@@5| Int) (|j#0@@40| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#6@@5|) (< |i#6@@5| (|Seq#Length| |acc_keys##1_0@0|))) (and (<= |from##1_0@0| |j#0@@40|) (< |j#0@@40| (|Seq#Length| |top_keys#0@@29|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##1_0@0| |i#6@@5|)) ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@40|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1632| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@40|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##1_0@0| |i#6@@5|))) ))))) (=> (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##1_0@0| |top_keys#0@@29| |from##1_0@0|) (or (BucketFlushModel.__default.seq__lt |acc_keys##1_0@0| |top_keys#0@@29| |from##1_0@0|) (forall ((|i#6@@6| Int) (|j#0@@41| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#6@@6|) (< |i#6@@6| (|Seq#Length| |acc_keys##1_0@0|))) (and (<= |from##1_0@0| |j#0@@41|) (< |j#0@@41| (|Seq#Length| |top_keys#0@@29|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##1_0@0| |i#6@@6|)) ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@41|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1632| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@41|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##1_0@0| |i#6@@6|))) )))) (and (=> (= (ControlFlow 0 116228) (- 0 884047)) (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##1_0@0| |bot_keys#0@@6| |bot_from##1_0@0|) (or (BucketFlushModel.__default.seq__lt |acc_keys##1_0@0| |bot_keys#0@@6| |bot_from##1_0@0|) (forall ((|i#7@@5| Int) (|j#1@@21| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#7@@5|) (< |i#7@@5| (|Seq#Length| |acc_keys##1_0@0|))) (and (<= |bot_from##1_0@0| |j#1@@21|) (< |j#1@@21| (|Seq#Length| |bot_keys#0@@6|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##1_0@0| |i#7@@5|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@21|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1634| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@21|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##1_0@0| |i#7@@5|))) ))))) (=> (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##1_0@0| |bot_keys#0@@6| |bot_from##1_0@0|) (or (BucketFlushModel.__default.seq__lt |acc_keys##1_0@0| |bot_keys#0@@6| |bot_from##1_0@0|) (forall ((|i#7@@6| Int) (|j#1@@22| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#7@@6|) (< |i#7@@6| (|Seq#Length| |acc_keys##1_0@0|))) (and (<= |bot_from##1_0@0| |j#1@@22|) (< |j#1@@22| (|Seq#Length| |bot_keys#0@@6|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##1_0@0| |i#7@@6|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@22|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1634| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@22|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##1_0@0| |i#7@@6|))) )))) (and (=> (= (ControlFlow 0 116228) (- 0 884138)) (forall ((|i#1@@90| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@90|) (< |i#1@@90| (|Seq#Length| |bot_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@90|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.311:19| :skolemid |1636| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@90|))) ))) (=> (forall ((|i#1@@91| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@91|) (< |i#1@@91| (|Seq#Length| |bot_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@91|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.311:19| :skolemid |1636| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@91|))) )) (and (=> (= (ControlFlow 0 116228) (- 0 884185)) (forall ((|i#3@@22| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@22|) (< |i#3@@22| (|Seq#Length| |top_msgs#0@@14|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@22|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.312:19| :skolemid |1637| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@22|))) ))) (=> (forall ((|i#3@@23| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@23|) (< |i#3@@23| (|Seq#Length| |top_msgs#0@@14|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@23|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.312:19| :skolemid |1637| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@23|))) )) (and (=> (= (ControlFlow 0 116228) (- 0 884232)) (forall ((|i#5@@5| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@5|) (< |i#5@@5| (|Seq#Length| |acc_msgs##1_0@0|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##1_0@0| |i#5@@5|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.313:19| :skolemid |1638| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##1_0@0| |i#5@@5|))) ))) (=> (forall ((|i#5@@6| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@6|) (< |i#5@@6| (|Seq#Length| |acc_msgs##1_0@0|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##1_0@0| |i#5@@6|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.313:19| :skolemid |1638| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##1_0@0| |i#5@@6|))) )) (=> (and (and (and ($IsGoodHeap $Heap@24) ($IsHeapAnchor $Heap@24)) (and (|BucketFlushModel.__default.mergeToOneChild#canCall| |top_keys#0@@29| |top_msgs#0@@14| |from##1_0@0| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from##1_0@0| |acc_keys##1_0@0| |acc_msgs##1_0@0| |slack##1_0@0|) (let ((|res#0@@4| (BucketFlushModel.__default.mergeToOneChild StartFuel_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from##1_0@0| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from##1_0@0| |acc_keys##1_0@0| |acc_msgs##1_0@0| |slack##1_0@0|))) (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| (|Seq#Take| |top_keys#0@@29| |to#0@@16|) |from##1_0@0|) (|Seq#Drop| (|Seq#Take| |top_msgs#0@@14| |to#0@@16|) |from##1_0@0|)) (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| |bot_from##1_0@0|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from##1_0@0|)) (let ((|bot#0@@15| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| |bot_from##1_0@0|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from##1_0@0|)))) (and (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys##1_0@0| |acc_msgs##1_0@0|) (let ((|acc#0@@9| (MapSeqs.__default.map__of__seqs ($LS $LZ) |acc_keys##1_0@0| |acc_msgs##1_0@0|))) (and (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#0@@4|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#0@@4|)) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketFlushModel.singleMergeResult.keys |res#0@@4|))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#0@@4|)) (and (|BucketFlushModel.singleMergeResult.bucketMap#canCall| |res#0@@4|) (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#0@@4| |top_keys#0@@29| |top_msgs#0@@14| |from##1_0@0| |to#0@@16|) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#0@@4| |top_keys#0@@29| |top_msgs#0@@14| |from##1_0@0| |to#0@@16|) |bot#0@@15| |acc#0@@9|))))))))))))) (and (and (let ((|res#0@@5| (BucketFlushModel.__default.mergeToOneChild StartFuelAssert_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from##1_0@0| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from##1_0@0| |acc_keys##1_0@0| |acc_msgs##1_0@0| |slack##1_0@0|))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#0@@5|))) (let ((|res#0@@6| (BucketFlushModel.__default.mergeToOneChild StartFuelAssert_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from##1_0@0| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from##1_0@0| |acc_keys##1_0@0| |acc_msgs##1_0@0| |slack##1_0@0|))) (let ((|bot#0@@16| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| |bot_from##1_0@0|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from##1_0@0|)))) (let ((|acc#0@@10| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys##1_0@0| |acc_msgs##1_0@0|))) (|Map#Equal| (BucketFlushModel.singleMergeResult.bucketMap |res#0@@6|) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#0@@6| |top_keys#0@@29| |top_msgs#0@@14| |from##1_0@0| |to#0@@16|) |bot#0@@16| |acc#0@@10|)))))) (and (= $Heap@23 $Heap@24) (= (ControlFlow 0 116228) (- 0 884623))))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#2@0|))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((anon99_Then_correct  (=> (and (and (and (and ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@1) ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@1)) (and ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@1) ($Is (int_2_U (+ |from#0@@16| 1)) Tclass._System.nat))) (and (and (= |##from#1_2_0_0@0| (+ |from#0@@16| 1)) ($IsAlloc (int_2_U |##from#1_2_0_0@0|) Tclass._System.nat $Heap@1)) (and ($IsAlloc (int_2_U |to#0@@16|) Tclass._System.nat $Heap@1) (<= (LitInt 0) |##from#1_2_0_0@0|)))) (and (and (and (<= |##from#1_2_0_0@0| |to#0@@16|) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= |##from#1_2_0_0@0| (BucketFlushModel.singleMergeResult.end |res#2@0|))))) (and (and (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|))) (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|)) (and (<= 0 (+ |bot_from#0@@6| 1)) (<= (+ |bot_from#0@@6| 1) (|Seq#Length| |bot_keys#0@@6|)))))) (=> (and (and (and (and (and (<= 0 (+ |bot_from#0@@6| 1)) (<= (+ |bot_from#0@@6| 1) (|Seq#Length| |bot_msgs#0@@6|))) (= |##keys#1_2_0_0@0| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)))) (and ($IsAlloc |##keys#1_2_0_0@0| (TSeq Tclass.KeyType.Key) $Heap@1) (= |##msgs#1_2_0_0@0| (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))))) (and (and (and ($IsAlloc |##msgs#1_2_0_0@0| (TSeq Tclass.ValueMessage.Message) $Heap@1) (= (|Seq#Length| |##keys#1_2_0_0@0|) (|Seq#Length| |##msgs#1_2_0_0@0|))) (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (= |##keys#1_2_0_1@0| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#1_0@0|)))))) (and (and ($IsAlloc |##keys#1_2_0_1@0| (TSeq Tclass.KeyType.Key) $Heap@1) (= |##msgs#1_2_0_1@0| (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#1_0@0|))))) (and ($IsAlloc |##msgs#1_2_0_1@0| (TSeq Tclass.ValueMessage.Message) $Heap@1) (= (|Seq#Length| |##keys#1_2_0_1@0|) (|Seq#Length| |##msgs#1_2_0_1@0|)))))) (and (and (and (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#1_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#1_0@0|)))) (= |##top#1_2_0_0@0| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|))) (and ($IsAlloc |##top#1_2_0_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@1) (= |##bot#1_2_0_0@0| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1)))))) (and (and ($IsAlloc |##bot#1_2_0_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@1) (= |##acc#1_2_0_0@0| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#1_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#1_0@0|)))))) (and ($IsAlloc |##acc#1_2_0_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@1) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#1_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#1_0@0|)))))))) (and (and (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1)))) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#1_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#1_0@0|))))) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#1_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#1_0@0|)))))))) (and (=> (= (ControlFlow 0 116222) (- 0 882570)) (forall (($o@@180 T@U) ($f@@112 T@U) ) (! (let ((alpha@@119 (FieldTypeInv0 (type $f@@112)))) (=> (and (and (= (type $o@@180) refType) (= (type $f@@112) (FieldType alpha@@119))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@180 $f@@112)))) :qid |BucketFlushModelidfy.495:36| :skolemid |1671| :no-pattern (type $o@@180) :no-pattern (type $f@@112) :no-pattern (U_2_int $o@@180) :no-pattern (U_2_bool $o@@180) :no-pattern (U_2_int $f@@112) :no-pattern (U_2_bool $f@@112) ))) (=> (forall (($o@@181 T@U) ($f@@113 T@U) ) (! (let ((alpha@@120 (FieldTypeInv0 (type $f@@113)))) (=> (and (and (= (type $o@@181) refType) (= (type $f@@113) (FieldType alpha@@120))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@181 $f@@113)))) :qid |BucketFlushModelidfy.495:36| :skolemid |1671| :no-pattern (type $o@@181) :no-pattern (type $f@@113) :no-pattern (U_2_int $o@@181) :no-pattern (U_2_bool $o@@181) :no-pattern (U_2_int $f@@113) :no-pattern (U_2_bool $f@@113) )) (and (=> (= (ControlFlow 0 116222) (- 0 882592)) (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|))) (=> (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116222) (- 0 882600)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys#0@@6|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys#0@@6|) (and (=> (= (ControlFlow 0 116222) (- 0 882605)) (forall ((|k#0@@66| T@U) ) (!  (=> (= (type |k#0@@66|) (SeqType BoxType)) (=> (and ($Is |k#0@@66| (TSeq Tclass.NativeTypes.byte)) (|Seq#Contains| |acc_keys#0@@6| ($Box |k#0@@66|))) (Lexicographic__Byte__Order.__default.lt |k#0@@66| |key#1_0@0|))) :qid |MapSeqsidfy.336:19| :skolemid |4853| :pattern ( (Lexicographic__Byte__Order.__default.lt |k#0@@66| |key#1_0@0|)) :pattern ( (|Seq#Contains| |acc_keys#0@@6| ($Box |k#0@@66|))) ))) (=> (forall ((|k#0@@67| T@U) ) (!  (=> (= (type |k#0@@67|) (SeqType BoxType)) (=> (and ($Is |k#0@@67| (TSeq Tclass.NativeTypes.byte)) (|Seq#Contains| |acc_keys#0@@6| ($Box |k#0@@67|))) (Lexicographic__Byte__Order.__default.lt |k#0@@67| |key#1_0@0|))) :qid |MapSeqsidfy.336:19| :skolemid |4853| :pattern ( (Lexicographic__Byte__Order.__default.lt |k#0@@67| |key#1_0@0|)) :pattern ( (|Seq#Contains| |acc_keys#0@@6| ($Box |k#0@@67|))) )) (=> (and (and (and ($IsGoodHeap $Heap@20) ($IsHeapAnchor $Heap@20)) (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#1_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#1_0@0|)))) (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys#0@@6| |acc_msgs#0@@6|))) (and (and (|Map#Equal| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#1_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#1_0@0|)))) (|Map#Build| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys#0@@6| |acc_msgs#0@@6|) ($Box |key#1_0@0|) ($Box |msg#1_0@0|))) (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys#0@@6| |acc_msgs#0@@6|)) (and (not (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys#0@@6| |acc_msgs#0@@6|)) ($Box |key#1_0@0|)))) (= $Heap@1 $Heap@20)))) (and (=> (= (ControlFlow 0 116222) (- 0 882802)) (forall (($o@@182 T@U) ($f@@114 T@U) ) (! (let ((alpha@@121 (FieldTypeInv0 (type $f@@114)))) (=> (and (and (= (type $o@@182) refType) (= (type $f@@114) (FieldType alpha@@121))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@182 $f@@114)))) :qid |BucketFlushModelidfy.496:33| :skolemid |1672| :no-pattern (type $o@@182) :no-pattern (type $f@@114) :no-pattern (U_2_int $o@@182) :no-pattern (U_2_bool $o@@182) :no-pattern (U_2_int $f@@114) :no-pattern (U_2_bool $f@@114) ))) (=> (forall (($o@@183 T@U) ($f@@115 T@U) ) (! (let ((alpha@@122 (FieldTypeInv0 (type $f@@115)))) (=> (and (and (= (type $o@@183) refType) (= (type $f@@115) (FieldType alpha@@122))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@183 $f@@115)))) :qid |BucketFlushModelidfy.496:33| :skolemid |1672| :no-pattern (type $o@@183) :no-pattern (type $f@@115) :no-pattern (U_2_int $o@@183) :no-pattern (U_2_bool $o@@183) :no-pattern (U_2_int $f@@115) :no-pattern (U_2_bool $f@@115) )) (and (=> (= (ControlFlow 0 116222) (- 0 882826)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (=> (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|)) (and (=> (= (ControlFlow 0 116222) (- 0 882834)) (<= (LitInt 0) |from#0@@16|)) (=> (<= (LitInt 0) |from#0@@16|) (and (=> (= (ControlFlow 0 116222) (- 0 882841)) (< |from#0@@16| |to#0@@16|)) (=> (< |from#0@@16| |to#0@@16|) (and (=> (= (ControlFlow 0 116222) (- 0 882845)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (=> (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|)) (and (=> (= (ControlFlow 0 116222) (- 0 882851)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (+ |from#0@@16| 1) (BucketFlushModel.singleMergeResult.end |res#2@0|)))) (=> (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (+ |from#0@@16| 1) (BucketFlushModel.singleMergeResult.end |res#2@0|))) (and (=> (= (ControlFlow 0 116222) (- 0 882866)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|)))) (=> (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116222) (- 0 882879)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |top_keys#0@@29|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |top_keys#0@@29|) (=> (and (and (and ($IsGoodHeap $Heap@21) ($IsHeapAnchor $Heap@21)) (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|))) (and (and (|Map#Equal| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|Map#Build| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (|Seq#Index| |top_keys#0@@29| |from#0@@16|) (|Seq#Index| |top_msgs#0@@14| |from#0@@16|))) (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|)) (and (not (U_2_bool (MapType0Select (|Map#Domain| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|)) (|Seq#Index| |top_keys#0@@29| |from#0@@16|)))) (= $Heap@20 $Heap@21)))) (and (=> (= (ControlFlow 0 116222) (- 0 883005)) (forall (($o@@184 T@U) ($f@@116 T@U) ) (! (let ((alpha@@123 (FieldTypeInv0 (type $f@@116)))) (=> (and (and (= (type $o@@184) refType) (= (type $f@@116) (FieldType alpha@@123))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@184 $f@@116)))) :qid |BucketFlushModelidfy.497:36| :skolemid |1673| :no-pattern (type $o@@184) :no-pattern (type $f@@116) :no-pattern (U_2_int $o@@184) :no-pattern (U_2_bool $o@@184) :no-pattern (U_2_int $f@@116) :no-pattern (U_2_bool $f@@116) ))) (=> (forall (($o@@185 T@U) ($f@@117 T@U) ) (! (let ((alpha@@124 (FieldTypeInv0 (type $f@@117)))) (=> (and (and (= (type $o@@185) refType) (= (type $f@@117) (FieldType alpha@@124))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@185 $f@@117)))) :qid |BucketFlushModelidfy.497:36| :skolemid |1673| :no-pattern (type $o@@185) :no-pattern (type $f@@117) :no-pattern (U_2_int $o@@185) :no-pattern (U_2_bool $o@@185) :no-pattern (U_2_int $f@@117) :no-pattern (U_2_bool $f@@117) )) (and (=> (= (ControlFlow 0 116222) (- 0 883025)) (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|))) (=> (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116222) (- 0 883033)) (<= (LitInt 0) |bot_from#0@@6|)) (=> (<= (LitInt 0) |bot_from#0@@6|) (and (=> (= (ControlFlow 0 116222) (- 0 883040)) (< |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|))) (=> (< |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)) (and (=> (= (ControlFlow 0 116222) (- 0 883046)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|) (=> (and ($IsGoodHeap $Heap@22) ($IsHeapAnchor $Heap@22)) (=> (and (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|))) (|Map#Equal| (|Map#Build| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (|Seq#Index| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Index| |bot_msgs#0@@6| |bot_from#0@@6|)) (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)))) (=> (and (and (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (not (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1)))) (|Seq#Index| |bot_keys#0@@6| |bot_from#0@@6|))))) (and (= $Heap@21 $Heap@22) ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@22))) (and (and ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@22) ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@22)) (and ($IsAlloc (int_2_U |from#0@@16|) Tclass._System.nat $Heap@22) ($IsAlloc (int_2_U |to#0@@16|) Tclass._System.nat $Heap@22)))) (and (=> (= (ControlFlow 0 116222) (- 0 883255)) (<= (LitInt 0) |from#0@@16|)) (and (=> (= (ControlFlow 0 116222) (- 0 883262)) (<= |from#0@@16| |to#0@@16|)) (and (=> (= (ControlFlow 0 116222) (- 0 883266)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116222) (- 0 883272)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (and (=> (= (ControlFlow 0 116222) (- 0 883280)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= |from#0@@16| (BucketFlushModel.singleMergeResult.end |res#2@0|)))) (and (=> (= (ControlFlow 0 116222) (- 0 883291)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|)))) (=> (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (= |##top#1_2_0_1@0| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|))) (=> (and (and (and ($IsAlloc |##top#1_2_0_1@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@22) ($IsAlloc |bot#2@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@22)) (and ($IsAlloc |acc#2@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@22) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|))) (and (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|)) (= (ControlFlow 0 116222) (- 0 883409)))) (|Map#Equal| (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#1_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#1_0@0|))))) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((anon98_Then_correct  (=> (and (and ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@1) (= (|Seq#Length| (BucketFlushModel.singleMergeResult.keys |res#2@0|)) (|Seq#Length| (BucketFlushModel.singleMergeResult.msgs |res#2@0|)))) (and (|BucketFlushModel.singleMergeResult.bucketMap#canCall| |res#2@0|) (|BucketFlushModel.singleMergeResult.bucketMap#canCall| |res#2@0|))) (and (=> (= (ControlFlow 0 116218) (- 0 880043)) (forall (($o@@186 T@U) ($f@@118 T@U) ) (! (let ((alpha@@125 (FieldTypeInv0 (type $f@@118)))) (=> (and (and (= (type $o@@186) refType) (= (type $f@@118) (FieldType alpha@@125))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@186 $f@@118)))) :qid |BucketFlushModelidfy.481:38| :skolemid |1674| :no-pattern (type $o@@186) :no-pattern (type $f@@118) :no-pattern (U_2_int $o@@186) :no-pattern (U_2_bool $o@@186) :no-pattern (U_2_int $f@@118) :no-pattern (U_2_bool $f@@118) ))) (=> (forall (($o@@187 T@U) ($f@@119 T@U) ) (! (let ((alpha@@126 (FieldTypeInv0 (type $f@@119)))) (=> (and (and (= (type $o@@187) refType) (= (type $f@@119) (FieldType alpha@@126))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@187 $f@@119)))) :qid |BucketFlushModelidfy.481:38| :skolemid |1674| :no-pattern (type $o@@187) :no-pattern (type $f@@119) :no-pattern (U_2_int $o@@187) :no-pattern (U_2_bool $o@@187) :no-pattern (U_2_int $f@@119) :no-pattern (U_2_bool $f@@119) )) (=> (and ($IsGoodHeap $Heap@18) ($IsHeapAnchor $Heap@18)) (=> (and (and (= $Heap@1 $Heap@18) (= StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0))) (and (= StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0) MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0))) (and (=> (= (ControlFlow 0 116218) (- 0 880119)) ($Is (int_2_U (+ |from#0@@16| 1)) Tclass._System.nat)) (=> ($Is (int_2_U (+ |from#0@@16| 1)) Tclass._System.nat) (=> (= |from##1_2_1_0@0| (+ |from#0@@16| 1)) (and (=> (= (ControlFlow 0 116218) (- 0 880158)) ($Is (int_2_U (+ |bot_from#0@@6| 1)) Tclass._System.nat)) (=> ($Is (int_2_U (+ |bot_from#0@@6| 1)) Tclass._System.nat) (=> (= |bot_from##1_2_1_0@0| (+ |bot_from#0@@6| 1)) (=> (and (= |acc_keys##1_2_1_0@0| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#1_0@0|)))) (= |acc_msgs##1_2_1_0@0| (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#1_0@0|))))) (and (=> (= (ControlFlow 0 116218) (- 0 880224)) ($Is (int_2_U (- |slack#0@@12| |delta#1_0@0|)) Tclass._System.nat)) (=> ($Is (int_2_U (- |slack#0@@12| |delta#1_0@0|)) Tclass._System.nat) (=> (= |slack##1_2_1_0@0| (- |slack#0@@12| |delta#1_0@0|)) (and (=> (= (ControlFlow 0 116218) (- 0 880244)) (forall (($o@@188 T@U) ($f@@120 T@U) ) (! (let ((alpha@@127 (FieldTypeInv0 (type $f@@120)))) (=> (and (and (= (type $o@@188) refType) (= (type $f@@120) (FieldType alpha@@127))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@188 $f@@120)))) :qid |BucketFlushModelidfy.482:51| :skolemid |1675| :no-pattern (type $o@@188) :no-pattern (type $f@@120) :no-pattern (U_2_int $o@@188) :no-pattern (U_2_bool $o@@188) :no-pattern (U_2_int $f@@120) :no-pattern (U_2_bool $f@@120) ))) (=> (forall (($o@@189 T@U) ($f@@121 T@U) ) (! (let ((alpha@@128 (FieldTypeInv0 (type $f@@121)))) (=> (and (and (= (type $o@@189) refType) (= (type $f@@121) (FieldType alpha@@128))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@189 $f@@121)))) :qid |BucketFlushModelidfy.482:51| :skolemid |1675| :no-pattern (type $o@@189) :no-pattern (type $f@@121) :no-pattern (U_2_int $o@@189) :no-pattern (U_2_bool $o@@189) :no-pattern (U_2_int $f@@121) :no-pattern (U_2_bool $f@@121) )) (and (=> (= (ControlFlow 0 116218) (- 0 880258)) (or (<= 0 (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)) (= (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from##1_2_1_0@0|) |bot_from##1_2_1_0@0|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)))) (=> (or (<= 0 (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)) (= (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from##1_2_1_0@0|) |bot_from##1_2_1_0@0|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|))) (and (=> (= (ControlFlow 0 116218) (- 0 880316)) (< (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from##1_2_1_0@0|) |bot_from##1_2_1_0@0|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|))) (=> (< (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from##1_2_1_0@0|) |bot_from##1_2_1_0@0|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)) (and (=> (= (ControlFlow 0 116218) (- 0 880370)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (=> (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|)) (and (=> (= (ControlFlow 0 116218) (- 0 880378)) (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|))) (=> (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116218) (- 0 880386)) (= (|Seq#Length| |acc_keys##1_2_1_0@0|) (|Seq#Length| |acc_msgs##1_2_1_0@0|))) (=> (= (|Seq#Length| |acc_keys##1_2_1_0@0|) (|Seq#Length| |acc_msgs##1_2_1_0@0|)) (and (=> (= (ControlFlow 0 116218) (- 0 880394)) (<= |from##1_2_1_0@0| |to#0@@16|)) (=> (<= |from##1_2_1_0@0| |to#0@@16|) (and (=> (= (ControlFlow 0 116218) (- 0 880398)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (=> (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|)) (and (=> (= (ControlFlow 0 116218) (- 0 880404)) (<= |bot_from##1_2_1_0@0| (|Seq#Length| |bot_keys#0@@6|))) (=> (<= |bot_from##1_2_1_0@0| (|Seq#Length| |bot_keys#0@@6|)) (and (=> (= (ControlFlow 0 116218) (- 0 880410)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys##1_2_1_0@0|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys##1_2_1_0@0|) (and (=> (= (ControlFlow 0 116218) (- 0 880415)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |top_keys#0@@29|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |top_keys#0@@29|) (and (=> (= (ControlFlow 0 116218) (- 0 880420)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|) (and (=> (= (ControlFlow 0 116218) (- 0 880425)) (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##1_2_1_0@0| |top_keys#0@@29| |from##1_2_1_0@0|) (or (BucketFlushModel.__default.seq__lt |acc_keys##1_2_1_0@0| |top_keys#0@@29| |from##1_2_1_0@0|) (forall ((|i#6@@7| Int) (|j#0@@42| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#6@@7|) (< |i#6@@7| (|Seq#Length| |acc_keys##1_2_1_0@0|))) (and (<= |from##1_2_1_0@0| |j#0@@42|) (< |j#0@@42| (|Seq#Length| |top_keys#0@@29|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##1_2_1_0@0| |i#6@@7|)) ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@42|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1632| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@42|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##1_2_1_0@0| |i#6@@7|))) ))))) (=> (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##1_2_1_0@0| |top_keys#0@@29| |from##1_2_1_0@0|) (or (BucketFlushModel.__default.seq__lt |acc_keys##1_2_1_0@0| |top_keys#0@@29| |from##1_2_1_0@0|) (forall ((|i#6@@8| Int) (|j#0@@43| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#6@@8|) (< |i#6@@8| (|Seq#Length| |acc_keys##1_2_1_0@0|))) (and (<= |from##1_2_1_0@0| |j#0@@43|) (< |j#0@@43| (|Seq#Length| |top_keys#0@@29|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##1_2_1_0@0| |i#6@@8|)) ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@43|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1632| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@43|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##1_2_1_0@0| |i#6@@8|))) )))) (and (=> (= (ControlFlow 0 116218) (- 0 880516)) (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##1_2_1_0@0| |bot_keys#0@@6| |bot_from##1_2_1_0@0|) (or (BucketFlushModel.__default.seq__lt |acc_keys##1_2_1_0@0| |bot_keys#0@@6| |bot_from##1_2_1_0@0|) (forall ((|i#7@@7| Int) (|j#1@@23| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#7@@7|) (< |i#7@@7| (|Seq#Length| |acc_keys##1_2_1_0@0|))) (and (<= |bot_from##1_2_1_0@0| |j#1@@23|) (< |j#1@@23| (|Seq#Length| |bot_keys#0@@6|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##1_2_1_0@0| |i#7@@7|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@23|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1634| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@23|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##1_2_1_0@0| |i#7@@7|))) ))))) (=> (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##1_2_1_0@0| |bot_keys#0@@6| |bot_from##1_2_1_0@0|) (or (BucketFlushModel.__default.seq__lt |acc_keys##1_2_1_0@0| |bot_keys#0@@6| |bot_from##1_2_1_0@0|) (forall ((|i#7@@8| Int) (|j#1@@24| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#7@@8|) (< |i#7@@8| (|Seq#Length| |acc_keys##1_2_1_0@0|))) (and (<= |bot_from##1_2_1_0@0| |j#1@@24|) (< |j#1@@24| (|Seq#Length| |bot_keys#0@@6|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##1_2_1_0@0| |i#7@@8|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@24|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1634| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@24|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##1_2_1_0@0| |i#7@@8|))) )))) (and (=> (= (ControlFlow 0 116218) (- 0 880607)) (forall ((|i#1@@92| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@92|) (< |i#1@@92| (|Seq#Length| |bot_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@92|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.311:19| :skolemid |1636| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@92|))) ))) (=> (forall ((|i#1@@93| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@93|) (< |i#1@@93| (|Seq#Length| |bot_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@93|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.311:19| :skolemid |1636| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@93|))) )) (and (=> (= (ControlFlow 0 116218) (- 0 880654)) (forall ((|i#3@@24| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@24|) (< |i#3@@24| (|Seq#Length| |top_msgs#0@@14|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@24|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.312:19| :skolemid |1637| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@24|))) ))) (=> (forall ((|i#3@@25| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@25|) (< |i#3@@25| (|Seq#Length| |top_msgs#0@@14|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@25|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.312:19| :skolemid |1637| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@25|))) )) (and (=> (= (ControlFlow 0 116218) (- 0 880701)) (forall ((|i#5@@7| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@7|) (< |i#5@@7| (|Seq#Length| |acc_msgs##1_2_1_0@0|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##1_2_1_0@0| |i#5@@7|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.313:19| :skolemid |1638| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##1_2_1_0@0| |i#5@@7|))) ))) (=> (forall ((|i#5@@8| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@8|) (< |i#5@@8| (|Seq#Length| |acc_msgs##1_2_1_0@0|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##1_2_1_0@0| |i#5@@8|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.313:19| :skolemid |1638| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##1_2_1_0@0| |i#5@@8|))) )) (=> (and ($IsGoodHeap $Heap@19) ($IsHeapAnchor $Heap@19)) (=> (and (and (and (|BucketFlushModel.__default.mergeToOneChild#canCall| |top_keys#0@@29| |top_msgs#0@@14| |from##1_2_1_0@0| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from##1_2_1_0@0| |acc_keys##1_2_1_0@0| |acc_msgs##1_2_1_0@0| |slack##1_2_1_0@0|) (let ((|res#0@@7| (BucketFlushModel.__default.mergeToOneChild StartFuel_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from##1_2_1_0@0| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from##1_2_1_0@0| |acc_keys##1_2_1_0@0| |acc_msgs##1_2_1_0@0| |slack##1_2_1_0@0|))) (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| (|Seq#Take| |top_keys#0@@29| |to#0@@16|) |from##1_2_1_0@0|) (|Seq#Drop| (|Seq#Take| |top_msgs#0@@14| |to#0@@16|) |from##1_2_1_0@0|)) (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| |bot_from##1_2_1_0@0|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from##1_2_1_0@0|)) (let ((|bot#0@@17| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| |bot_from##1_2_1_0@0|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from##1_2_1_0@0|)))) (and (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys##1_2_1_0@0| |acc_msgs##1_2_1_0@0|) (let ((|acc#0@@11| (MapSeqs.__default.map__of__seqs ($LS $LZ) |acc_keys##1_2_1_0@0| |acc_msgs##1_2_1_0@0|))) (and (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#0@@7|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#0@@7|)) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketFlushModel.singleMergeResult.keys |res#0@@7|))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#0@@7|)) (and (|BucketFlushModel.singleMergeResult.bucketMap#canCall| |res#0@@7|) (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#0@@7| |top_keys#0@@29| |top_msgs#0@@14| |from##1_2_1_0@0| |to#0@@16|) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#0@@7| |top_keys#0@@29| |top_msgs#0@@14| |from##1_2_1_0@0| |to#0@@16|) |bot#0@@17| |acc#0@@11|)))))))))))) (and (let ((|res#0@@8| (BucketFlushModel.__default.mergeToOneChild StartFuelAssert_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from##1_2_1_0@0| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from##1_2_1_0@0| |acc_keys##1_2_1_0@0| |acc_msgs##1_2_1_0@0| |slack##1_2_1_0@0|))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#0@@8|))) (let ((|res#0@@9| (BucketFlushModel.__default.mergeToOneChild StartFuelAssert_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from##1_2_1_0@0| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from##1_2_1_0@0| |acc_keys##1_2_1_0@0| |acc_msgs##1_2_1_0@0| |slack##1_2_1_0@0|))) (let ((|bot#0@@18| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| |bot_from##1_2_1_0@0|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from##1_2_1_0@0|)))) (let ((|acc#0@@12| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys##1_2_1_0@0| |acc_msgs##1_2_1_0@0|))) (|Map#Equal| (BucketFlushModel.singleMergeResult.bucketMap |res#0@@9|) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#0@@9| |top_keys#0@@29| |top_msgs#0@@14| |from##1_2_1_0@0| |to#0@@16|) |bot#0@@18| |acc#0@@12|))))))) (and (and (= $Heap@18 $Heap@19) ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@19)) (and ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@19) ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@19)))) (and (=> (= (ControlFlow 0 116218) (- 0 881120)) ($Is (int_2_U (+ |from#0@@16| 1)) Tclass._System.nat)) (=> ($Is (int_2_U (+ |from#0@@16| 1)) Tclass._System.nat) (=> (= |##from#1_2_1_0@0| (+ |from#0@@16| 1)) (=> (and ($IsAlloc (int_2_U |##from#1_2_1_0@0|) Tclass._System.nat $Heap@19) ($IsAlloc (int_2_U |to#0@@16|) Tclass._System.nat $Heap@19)) (and (=> (= (ControlFlow 0 116218) (- 0 881157)) (<= (LitInt 0) |##from#1_2_1_0@0|)) (and (=> (= (ControlFlow 0 116218) (- 0 881164)) (<= |##from#1_2_1_0@0| |to#0@@16|)) (and (=> (= (ControlFlow 0 116218) (- 0 881168)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116218) (- 0 881174)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (and (=> (= (ControlFlow 0 116218) (- 0 881182)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= |##from#1_2_1_0@0| (BucketFlushModel.singleMergeResult.end |res#2@0|)))) (and (=> (= (ControlFlow 0 116218) (- 0 881193)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|)))) (=> (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (and (=> (= (ControlFlow 0 116218) (- 0 881221)) (and (<= 0 (+ |bot_from#0@@6| 1)) (<= (+ |bot_from#0@@6| 1) (|Seq#Length| |bot_keys#0@@6|)))) (and (=> (= (ControlFlow 0 116218) (- 0 881245)) (and (<= 0 (+ |bot_from#0@@6| 1)) (<= (+ |bot_from#0@@6| 1) (|Seq#Length| |bot_msgs#0@@6|)))) (=> (and (and (= |##keys#1_2_1_0@0| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1))) ($IsAlloc |##keys#1_2_1_0@0| (TSeq Tclass.KeyType.Key) $Heap@19)) (and (= |##msgs#1_2_1_0@0| (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) ($IsAlloc |##msgs#1_2_1_0@0| (TSeq Tclass.ValueMessage.Message) $Heap@19))) (and (=> (= (ControlFlow 0 116218) (- 0 881317)) (= (|Seq#Length| |##keys#1_2_1_0@0|) (|Seq#Length| |##msgs#1_2_1_0@0|))) (=> (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (=> (and (and (= |##keys#1_2_1_1@0| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#1_0@0|)))) ($IsAlloc |##keys#1_2_1_1@0| (TSeq Tclass.KeyType.Key) $Heap@19)) (and (= |##msgs#1_2_1_1@0| (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#1_0@0|)))) ($IsAlloc |##msgs#1_2_1_1@0| (TSeq Tclass.ValueMessage.Message) $Heap@19))) (and (=> (= (ControlFlow 0 116218) (- 0 881401)) (= (|Seq#Length| |##keys#1_2_1_1@0|) (|Seq#Length| |##msgs#1_2_1_1@0|))) (=> (and (and (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#1_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#1_0@0|)))) (= |##top#1_2_1_0@0| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|))) (and ($IsAlloc |##top#1_2_1_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@19) (= |##bot#1_2_1_0@0| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1)))))) (and (and ($IsAlloc |##bot#1_2_1_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@19) (= |##acc#1_2_1_0@0| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#1_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#1_0@0|)))))) (and ($IsAlloc |##acc#1_2_1_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@19) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#1_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#1_0@0|)))))))) (=> (and (and (and (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1)))) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#1_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#1_0@0|))))) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#1_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#1_0@0|)))))) (= (ControlFlow 0 116218) (- 0 881779))) (|Map#Equal| (BucketFlushModel.singleMergeResult.bucketMap |res#2@0|) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#1_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#1_0@0|))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((anon97_Then_correct  (=> (and ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@1) (= (ControlFlow 0 116214) (- 0 879999))) (= (|Seq#Length| (BucketFlushModel.singleMergeResult.keys |res#2@0|)) (|Seq#Length| (BucketFlushModel.singleMergeResult.msgs |res#2@0|)))))) (let ((anon106_Then_correct  (and (=> (= (ControlFlow 0 116271) (- 0 879841)) (forall (($o@@190 T@U) ($f@@122 T@U) ) (! (let ((alpha@@129 (FieldTypeInv0 (type $f@@122)))) (=> (and (and (= (type $o@@190) refType) (= (type $f@@122) (FieldType alpha@@129))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@190 $f@@122)))) :qid |BucketFlushModelidfy.530:34| :skolemid |1679| :no-pattern (type $o@@190) :no-pattern (type $f@@122) :no-pattern (U_2_int $o@@190) :no-pattern (U_2_bool $o@@190) :no-pattern (U_2_int $f@@122) :no-pattern (U_2_bool $f@@122) ))) (=> (forall (($o@@191 T@U) ($f@@123 T@U) ) (! (let ((alpha@@130 (FieldTypeInv0 (type $f@@123)))) (=> (and (and (= (type $o@@191) refType) (= (type $f@@123) (FieldType alpha@@130))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@191 $f@@123)))) :qid |BucketFlushModelidfy.530:34| :skolemid |1679| :no-pattern (type $o@@191) :no-pattern (type $f@@123) :no-pattern (U_2_int $o@@191) :no-pattern (U_2_bool $o@@191) :no-pattern (U_2_int $f@@123) :no-pattern (U_2_bool $f@@123) )) (=> (and (and (and ($IsGoodHeap $Heap@17) ($IsHeapAnchor $Heap@17)) (= $Heap@1 $Heap@17)) (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0)))) (and (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0) MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0) (= (ControlFlow 0 116271) (- 0 879905))))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#2@0|))))))) (let ((anon105_Then_correct  (=> ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@1) (=> (and (and (and (= (|Seq#Length| (BucketFlushModel.singleMergeResult.keys |res#2@0|)) (|Seq#Length| (BucketFlushModel.singleMergeResult.msgs |res#2@0|))) (|BucketFlushModel.singleMergeResult.bucketMap#canCall| |res#2@0|)) (and (|BucketFlushModel.singleMergeResult.bucketMap#canCall| |res#2@0|) ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@1))) (and (and ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@1) ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@1)) (and ($IsAlloc (int_2_U |from#0@@16|) Tclass._System.nat $Heap@1) ($IsAlloc (int_2_U |to#0@@16|) Tclass._System.nat $Heap@1)))) (and (=> (= (ControlFlow 0 116265) (- 0 879043)) (<= (LitInt 0) |from#0@@16|)) (and (=> (= (ControlFlow 0 116265) (- 0 879050)) (<= |from#0@@16| |to#0@@16|)) (and (=> (= (ControlFlow 0 116265) (- 0 879054)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116265) (- 0 879060)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (and (=> (= (ControlFlow 0 116265) (- 0 879068)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= |from#0@@16| (BucketFlushModel.singleMergeResult.end |res#2@0|)))) (and (=> (= (ControlFlow 0 116265) (- 0 879079)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|)))) (=> (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|)) (and (=> (= (ControlFlow 0 116265) (- 0 879114)) (|Map#Equal| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|Map#Empty| BoxType BoxType))) (=> (|Map#Equal| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|Map#Empty| BoxType BoxType)) (and (=> (= (ControlFlow 0 116265) (- 0 879156)) (forall (($o@@192 T@U) ($f@@124 T@U) ) (! (let ((alpha@@131 (FieldTypeInv0 (type $f@@124)))) (=> (and (and (= (type $o@@192) refType) (= (type $f@@124) (FieldType alpha@@131))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@192 $f@@124)))) :qid |BucketFlushModelidfy.523:40| :skolemid |1678| :no-pattern (type $o@@192) :no-pattern (type $f@@124) :no-pattern (U_2_int $o@@192) :no-pattern (U_2_bool $o@@192) :no-pattern (U_2_int $f@@124) :no-pattern (U_2_bool $f@@124) ))) (=> (forall (($o@@193 T@U) ($f@@125 T@U) ) (! (let ((alpha@@132 (FieldTypeInv0 (type $f@@125)))) (=> (and (and (= (type $o@@193) refType) (= (type $f@@125) (FieldType alpha@@132))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@193 $f@@125)))) :qid |BucketFlushModelidfy.523:40| :skolemid |1678| :no-pattern (type $o@@193) :no-pattern (type $f@@125) :no-pattern (U_2_int $o@@193) :no-pattern (U_2_bool $o@@193) :no-pattern (U_2_int $f@@125) :no-pattern (U_2_bool $f@@125) )) (and (=> (= (ControlFlow 0 116265) (- 0 879180)) (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|))) (=> (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116265) (- 0 879188)) (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|))) (=> (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116265) (- 0 879196)) (<= (LitInt 0) |bot_from#0@@6|)) (=> (<= (LitInt 0) |bot_from#0@@6|) (and (=> (= (ControlFlow 0 116265) (- 0 879203)) (<= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|))) (=> (<= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)) (and (=> (= (ControlFlow 0 116265) (- 0 879209)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys#0@@6|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys#0@@6|) (and (=> (= (ControlFlow 0 116265) (- 0 879214)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|) (and (=> (= (ControlFlow 0 116265) (- 0 879219)) (forall ((|i#1@@94| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@94|) (< |i#1@@94| (|Seq#Length| |acc_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs#0@@6| |i#1@@94|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.241:19| :skolemid |1605| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs#0@@6| |i#1@@94|))) ))) (=> (forall ((|i#1@@95| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@95|) (< |i#1@@95| (|Seq#Length| |acc_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs#0@@6| |i#1@@95|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.241:19| :skolemid |1605| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs#0@@6| |i#1@@95|))) )) (and (=> (= (ControlFlow 0 116265) (- 0 879266)) (forall ((|i#3@@26| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@26|) (< |i#3@@26| (|Seq#Length| |bot_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#3@@26|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.242:19| :skolemid |1606| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#3@@26|))) ))) (=> (forall ((|i#3@@27| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@27|) (< |i#3@@27| (|Seq#Length| |bot_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#3@@27|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.242:19| :skolemid |1606| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#3@@27|))) )) (and (=> (= (ControlFlow 0 116265) (- 0 879313)) (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys#0@@6| |bot_keys#0@@6| |bot_from#0@@6|) (or (BucketFlushModel.__default.seq__lt |acc_keys#0@@6| |bot_keys#0@@6| |bot_from#0@@6|) (forall ((|i#4@@5| Int) (|j#0@@44| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#4@@5|) (< |i#4@@5| (|Seq#Length| |acc_keys#0@@6|))) (and (<= |bot_from#0@@6| |j#0@@44|) (< |j#0@@44| (|Seq#Length| |bot_keys#0@@6|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys#0@@6| |i#4@@5|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#0@@44|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1607| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#0@@44|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys#0@@6| |i#4@@5|))) ))))) (=> (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys#0@@6| |bot_keys#0@@6| |bot_from#0@@6|) (or (BucketFlushModel.__default.seq__lt |acc_keys#0@@6| |bot_keys#0@@6| |bot_from#0@@6|) (forall ((|i#4@@6| Int) (|j#0@@45| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#4@@6|) (< |i#4@@6| (|Seq#Length| |acc_keys#0@@6|))) (and (<= |bot_from#0@@6| |j#0@@45|) (< |j#0@@45| (|Seq#Length| |bot_keys#0@@6|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys#0@@6| |i#4@@6|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#0@@45|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1607| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#0@@45|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys#0@@6| |i#4@@6|))) )))) (=> (and ($IsGoodHeap $Heap@16) ($IsHeapAnchor $Heap@16)) (=> (and (and (and (and (and (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)) (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys#0@@6| |acc_msgs#0@@6|)) (|BucketFlushModel.__default.topBotAccMerge#canCall| (Lit (|Map#Empty| BoxType BoxType)) (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)) (MapSeqs.__default.map__of__seqs ($LS $LZ) |acc_keys#0@@6| |acc_msgs#0@@6|))) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Append| |acc_keys#0@@6| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|)) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)))) (|Map#Equal| (BucketFlushModel.__default.topBotAccMerge (Lit (|Map#Empty| BoxType BoxType)) (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)) (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys#0@@6| |acc_msgs#0@@6|)) (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Append| |acc_keys#0@@6| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|)) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|))))) (and (= $Heap@1 $Heap@16) ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@16))) (and (and ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@16) ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@16)) (and ($IsAlloc (int_2_U |from#0@@16|) Tclass._System.nat $Heap@16) ($IsAlloc (int_2_U |to#0@@16|) Tclass._System.nat $Heap@16)))) (and (=> (= (ControlFlow 0 116265) (- 0 879598)) (<= (LitInt 0) |from#0@@16|)) (and (=> (= (ControlFlow 0 116265) (- 0 879605)) (<= |from#0@@16| |to#0@@16|)) (and (=> (= (ControlFlow 0 116265) (- 0 879609)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116265) (- 0 879615)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (and (=> (= (ControlFlow 0 116265) (- 0 879623)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= |from#0@@16| (BucketFlushModel.singleMergeResult.end |res#2@0|)))) (and (=> (= (ControlFlow 0 116265) (- 0 879634)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|)))) (=> (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (= |##top#2_0_0_0_0@0| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|))) (=> (and (and (and ($IsAlloc |##top#2_0_0_0_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@16) ($IsAlloc |bot#2@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@16)) (and ($IsAlloc |acc#2@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@16) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|))) (and (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|)) (= (ControlFlow 0 116265) (- 0 879752)))) (|Map#Equal| (BucketFlushModel.singleMergeResult.bucketMap |res#2@0|) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|))))))))))))))))))))))))))))))))))))))))))))) (let ((anon104_Then_correct  (=> (and ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@1) (= (ControlFlow 0 116261) (- 0 878953))) (= (|Seq#Length| (BucketFlushModel.singleMergeResult.keys |res#2@0|)) (|Seq#Length| (BucketFlushModel.singleMergeResult.msgs |res#2@0|)))))) (let ((anon110_Then_correct  (and (=> (= (ControlFlow 0 116293) (- 0 877901)) (forall (($o@@194 T@U) ($f@@126 T@U) ) (! (let ((alpha@@133 (FieldTypeInv0 (type $f@@126)))) (=> (and (and (= (type $o@@194) refType) (= (type $f@@126) (FieldType alpha@@133))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@194 $f@@126)))) :qid |BucketFlushModelidfy.556:34| :skolemid |1684| :no-pattern (type $o@@194) :no-pattern (type $f@@126) :no-pattern (U_2_int $o@@194) :no-pattern (U_2_bool $o@@194) :no-pattern (U_2_int $f@@126) :no-pattern (U_2_bool $f@@126) ))) (=> (forall (($o@@195 T@U) ($f@@127 T@U) ) (! (let ((alpha@@134 (FieldTypeInv0 (type $f@@127)))) (=> (and (and (= (type $o@@195) refType) (= (type $f@@127) (FieldType alpha@@134))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@195 $f@@127)))) :qid |BucketFlushModelidfy.556:34| :skolemid |1684| :no-pattern (type $o@@195) :no-pattern (type $f@@127) :no-pattern (U_2_int $o@@195) :no-pattern (U_2_bool $o@@195) :no-pattern (U_2_int $f@@127) :no-pattern (U_2_bool $f@@127) )) (=> (and ($IsGoodHeap $Heap@14) ($IsHeapAnchor $Heap@14)) (=> (and (and (= $Heap@1 $Heap@14) (= StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0))) (and (= StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0) MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0))) (and (=> (= (ControlFlow 0 116293) (- 0 877977)) ($Is (int_2_U (+ |from#0@@16| 1)) Tclass._System.nat)) (=> ($Is (int_2_U (+ |from#0@@16| 1)) Tclass._System.nat) (=> (= |from##2_0@0| (+ |from#0@@16| 1)) (=> (and (= |acc_keys##2_0@0| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#2_0@0|)))) (= |acc_msgs##2_0@0| (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#2_0@0|))))) (and (=> (= (ControlFlow 0 116293) (- 0 878063)) ($Is (int_2_U (- |slack#0@@12| |delta#2_0@0|)) Tclass._System.nat)) (=> ($Is (int_2_U (- |slack#0@@12| |delta#2_0@0|)) Tclass._System.nat) (=> (= |slack##2_0@0| (- |slack#0@@12| |delta#2_0@0|)) (and (=> (= (ControlFlow 0 116293) (- 0 878083)) (forall (($o@@196 T@U) ($f@@128 T@U) ) (! (let ((alpha@@135 (FieldTypeInv0 (type $f@@128)))) (=> (and (and (= (type $o@@196) refType) (= (type $f@@128) (FieldType alpha@@135))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@196 $f@@128)))) :qid |BucketFlushModelidfy.557:47| :skolemid |1685| :no-pattern (type $o@@196) :no-pattern (type $f@@128) :no-pattern (U_2_int $o@@196) :no-pattern (U_2_bool $o@@196) :no-pattern (U_2_int $f@@128) :no-pattern (U_2_bool $f@@128) ))) (=> (forall (($o@@197 T@U) ($f@@129 T@U) ) (! (let ((alpha@@136 (FieldTypeInv0 (type $f@@129)))) (=> (and (and (= (type $o@@197) refType) (= (type $f@@129) (FieldType alpha@@136))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@197 $f@@129)))) :qid |BucketFlushModelidfy.557:47| :skolemid |1685| :no-pattern (type $o@@197) :no-pattern (type $f@@129) :no-pattern (U_2_int $o@@197) :no-pattern (U_2_bool $o@@197) :no-pattern (U_2_int $f@@129) :no-pattern (U_2_bool $f@@129) )) (and (=> (= (ControlFlow 0 116293) (- 0 878097)) (or (<= 0 (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)) (= (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from##2_0@0|) |bot_from#0@@6|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)))) (=> (or (<= 0 (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)) (= (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from##2_0@0|) |bot_from#0@@6|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|))) (and (=> (= (ControlFlow 0 116293) (- 0 878155)) (< (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from##2_0@0|) |bot_from#0@@6|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|))) (=> (< (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from##2_0@0|) |bot_from#0@@6|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)) (and (=> (= (ControlFlow 0 116293) (- 0 878209)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (=> (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|)) (and (=> (= (ControlFlow 0 116293) (- 0 878217)) (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|))) (=> (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116293) (- 0 878225)) (= (|Seq#Length| |acc_keys##2_0@0|) (|Seq#Length| |acc_msgs##2_0@0|))) (=> (= (|Seq#Length| |acc_keys##2_0@0|) (|Seq#Length| |acc_msgs##2_0@0|)) (and (=> (= (ControlFlow 0 116293) (- 0 878233)) (<= |from##2_0@0| |to#0@@16|)) (=> (<= |from##2_0@0| |to#0@@16|) (and (=> (= (ControlFlow 0 116293) (- 0 878237)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (=> (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|)) (and (=> (= (ControlFlow 0 116293) (- 0 878243)) (<= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|))) (=> (<= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)) (and (=> (= (ControlFlow 0 116293) (- 0 878249)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys##2_0@0|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys##2_0@0|) (and (=> (= (ControlFlow 0 116293) (- 0 878254)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |top_keys#0@@29|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |top_keys#0@@29|) (and (=> (= (ControlFlow 0 116293) (- 0 878259)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|) (and (=> (= (ControlFlow 0 116293) (- 0 878264)) (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##2_0@0| |top_keys#0@@29| |from##2_0@0|) (or (BucketFlushModel.__default.seq__lt |acc_keys##2_0@0| |top_keys#0@@29| |from##2_0@0|) (forall ((|i#6@@9| Int) (|j#0@@46| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#6@@9|) (< |i#6@@9| (|Seq#Length| |acc_keys##2_0@0|))) (and (<= |from##2_0@0| |j#0@@46|) (< |j#0@@46| (|Seq#Length| |top_keys#0@@29|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##2_0@0| |i#6@@9|)) ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@46|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1632| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@46|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##2_0@0| |i#6@@9|))) ))))) (=> (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##2_0@0| |top_keys#0@@29| |from##2_0@0|) (or (BucketFlushModel.__default.seq__lt |acc_keys##2_0@0| |top_keys#0@@29| |from##2_0@0|) (forall ((|i#6@@10| Int) (|j#0@@47| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#6@@10|) (< |i#6@@10| (|Seq#Length| |acc_keys##2_0@0|))) (and (<= |from##2_0@0| |j#0@@47|) (< |j#0@@47| (|Seq#Length| |top_keys#0@@29|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##2_0@0| |i#6@@10|)) ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@47|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1632| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@47|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##2_0@0| |i#6@@10|))) )))) (and (=> (= (ControlFlow 0 116293) (- 0 878355)) (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##2_0@0| |bot_keys#0@@6| |bot_from#0@@6|) (or (BucketFlushModel.__default.seq__lt |acc_keys##2_0@0| |bot_keys#0@@6| |bot_from#0@@6|) (forall ((|i#7@@9| Int) (|j#1@@25| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#7@@9|) (< |i#7@@9| (|Seq#Length| |acc_keys##2_0@0|))) (and (<= |bot_from#0@@6| |j#1@@25|) (< |j#1@@25| (|Seq#Length| |bot_keys#0@@6|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##2_0@0| |i#7@@9|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@25|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1634| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@25|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##2_0@0| |i#7@@9|))) ))))) (=> (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##2_0@0| |bot_keys#0@@6| |bot_from#0@@6|) (or (BucketFlushModel.__default.seq__lt |acc_keys##2_0@0| |bot_keys#0@@6| |bot_from#0@@6|) (forall ((|i#7@@10| Int) (|j#1@@26| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#7@@10|) (< |i#7@@10| (|Seq#Length| |acc_keys##2_0@0|))) (and (<= |bot_from#0@@6| |j#1@@26|) (< |j#1@@26| (|Seq#Length| |bot_keys#0@@6|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##2_0@0| |i#7@@10|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@26|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1634| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@26|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##2_0@0| |i#7@@10|))) )))) (and (=> (= (ControlFlow 0 116293) (- 0 878446)) (forall ((|i#1@@96| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@96|) (< |i#1@@96| (|Seq#Length| |bot_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@96|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.311:19| :skolemid |1636| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@96|))) ))) (=> (forall ((|i#1@@97| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@97|) (< |i#1@@97| (|Seq#Length| |bot_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@97|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.311:19| :skolemid |1636| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@97|))) )) (and (=> (= (ControlFlow 0 116293) (- 0 878493)) (forall ((|i#3@@28| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@28|) (< |i#3@@28| (|Seq#Length| |top_msgs#0@@14|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@28|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.312:19| :skolemid |1637| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@28|))) ))) (=> (forall ((|i#3@@29| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@29|) (< |i#3@@29| (|Seq#Length| |top_msgs#0@@14|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@29|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.312:19| :skolemid |1637| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@29|))) )) (and (=> (= (ControlFlow 0 116293) (- 0 878540)) (forall ((|i#5@@9| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@9|) (< |i#5@@9| (|Seq#Length| |acc_msgs##2_0@0|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##2_0@0| |i#5@@9|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.313:19| :skolemid |1638| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##2_0@0| |i#5@@9|))) ))) (=> (forall ((|i#5@@10| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@10|) (< |i#5@@10| (|Seq#Length| |acc_msgs##2_0@0|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##2_0@0| |i#5@@10|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.313:19| :skolemid |1638| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##2_0@0| |i#5@@10|))) )) (=> (and (and (and ($IsGoodHeap $Heap@15) ($IsHeapAnchor $Heap@15)) (and (|BucketFlushModel.__default.mergeToOneChild#canCall| |top_keys#0@@29| |top_msgs#0@@14| |from##2_0@0| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from#0@@6| |acc_keys##2_0@0| |acc_msgs##2_0@0| |slack##2_0@0|) (let ((|res#0@@10| (BucketFlushModel.__default.mergeToOneChild StartFuel_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from##2_0@0| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from#0@@6| |acc_keys##2_0@0| |acc_msgs##2_0@0| |slack##2_0@0|))) (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| (|Seq#Take| |top_keys#0@@29| |to#0@@16|) |from##2_0@0|) (|Seq#Drop| (|Seq#Take| |top_msgs#0@@14| |to#0@@16|) |from##2_0@0|)) (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)) (let ((|bot#0@@19| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)))) (and (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys##2_0@0| |acc_msgs##2_0@0|) (let ((|acc#0@@13| (MapSeqs.__default.map__of__seqs ($LS $LZ) |acc_keys##2_0@0| |acc_msgs##2_0@0|))) (and (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#0@@10|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#0@@10|)) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketFlushModel.singleMergeResult.keys |res#0@@10|))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#0@@10|)) (and (|BucketFlushModel.singleMergeResult.bucketMap#canCall| |res#0@@10|) (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#0@@10| |top_keys#0@@29| |top_msgs#0@@14| |from##2_0@0| |to#0@@16|) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#0@@10| |top_keys#0@@29| |top_msgs#0@@14| |from##2_0@0| |to#0@@16|) |bot#0@@19| |acc#0@@13|))))))))))))) (and (and (let ((|res#0@@11| (BucketFlushModel.__default.mergeToOneChild StartFuelAssert_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from##2_0@0| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from#0@@6| |acc_keys##2_0@0| |acc_msgs##2_0@0| |slack##2_0@0|))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#0@@11|))) (let ((|res#0@@12| (BucketFlushModel.__default.mergeToOneChild StartFuelAssert_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from##2_0@0| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from#0@@6| |acc_keys##2_0@0| |acc_msgs##2_0@0| |slack##2_0@0|))) (let ((|bot#0@@20| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)))) (let ((|acc#0@@14| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys##2_0@0| |acc_msgs##2_0@0|))) (|Map#Equal| (BucketFlushModel.singleMergeResult.bucketMap |res#0@@12|) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#0@@12| |top_keys#0@@29| |top_msgs#0@@14| |from##2_0@0| |to#0@@16|) |bot#0@@20| |acc#0@@14|)))))) (and (= $Heap@14 $Heap@15) (= (ControlFlow 0 116293) (- 0 878931))))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#2@0|)))))))))))))))))))))))))))))))))))))))))))))))))) (let ((anon109_Then_correct  (=> (and ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@1) ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@1)) (=> (and (and ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@1) ($Is (int_2_U (+ |from#0@@16| 1)) Tclass._System.nat)) (and (= |##from#2_1_0_0@0| (+ |from#0@@16| 1)) ($IsAlloc (int_2_U |##from#2_1_0_0@0|) Tclass._System.nat $Heap@1))) (=> (and (and (and ($IsAlloc (int_2_U |to#0@@16|) Tclass._System.nat $Heap@1) (<= (LitInt 0) |##from#2_1_0_0@0|)) (and (<= |##from#2_1_0_0@0| |to#0@@16|) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|)))) (and (and (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= |##from#2_1_0_0@0| (BucketFlushModel.singleMergeResult.end |res#2@0|)))) (and (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|))) (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|)))) (=> (and (and (and (and (= |##keys#2_1_0_0@0| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#2_0@0|)))) ($IsAlloc |##keys#2_1_0_0@0| (TSeq Tclass.KeyType.Key) $Heap@1)) (and (= |##msgs#2_1_0_0@0| (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#2_0@0|)))) ($IsAlloc |##msgs#2_1_0_0@0| (TSeq Tclass.ValueMessage.Message) $Heap@1))) (and (and (= (|Seq#Length| |##keys#2_1_0_0@0|) (|Seq#Length| |##msgs#2_1_0_0@0|)) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#2_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#2_0@0|))))) (and (= |##top#2_1_0_0@0| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|)) ($IsAlloc |##top#2_1_0_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@1)))) (and (and (and ($IsAlloc |bot#2@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@1) (= |##acc#2_1_0_0@0| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#2_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#2_0@0|)))))) (and ($IsAlloc |##acc#2_1_0_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@1) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) |bot#2@0| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#2_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#2_0@0|))))))) (and (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#2_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#2_0@0|))))) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) |bot#2@0| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#2_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#2_0@0|)))))))) (and (=> (= (ControlFlow 0 116287) (- 0 877143)) (forall (($o@@198 T@U) ($f@@130 T@U) ) (! (let ((alpha@@137 (FieldTypeInv0 (type $f@@130)))) (=> (and (and (= (type $o@@198) refType) (= (type $f@@130) (FieldType alpha@@137))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@198 $f@@130)))) :qid |BucketFlushModelidfy.548:34| :skolemid |1680| :no-pattern (type $o@@198) :no-pattern (type $f@@130) :no-pattern (U_2_int $o@@198) :no-pattern (U_2_bool $o@@198) :no-pattern (U_2_int $f@@130) :no-pattern (U_2_bool $f@@130) ))) (=> (forall (($o@@199 T@U) ($f@@131 T@U) ) (! (let ((alpha@@138 (FieldTypeInv0 (type $f@@131)))) (=> (and (and (= (type $o@@199) refType) (= (type $f@@131) (FieldType alpha@@138))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@199 $f@@131)))) :qid |BucketFlushModelidfy.548:34| :skolemid |1680| :no-pattern (type $o@@199) :no-pattern (type $f@@131) :no-pattern (U_2_int $o@@199) :no-pattern (U_2_bool $o@@199) :no-pattern (U_2_int $f@@131) :no-pattern (U_2_bool $f@@131) )) (and (=> (= (ControlFlow 0 116287) (- 0 877165)) (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|))) (=> (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116287) (- 0 877173)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys#0@@6|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys#0@@6|) (and (=> (= (ControlFlow 0 116287) (- 0 877178)) (forall ((|k#0@@68| T@U) ) (!  (=> (= (type |k#0@@68|) (SeqType BoxType)) (=> (and ($Is |k#0@@68| (TSeq Tclass.NativeTypes.byte)) (|Seq#Contains| |acc_keys#0@@6| ($Box |k#0@@68|))) (Lexicographic__Byte__Order.__default.lt |k#0@@68| |key#2_0@0|))) :qid |MapSeqsidfy.336:19| :skolemid |4853| :pattern ( (Lexicographic__Byte__Order.__default.lt |k#0@@68| |key#2_0@0|)) :pattern ( (|Seq#Contains| |acc_keys#0@@6| ($Box |k#0@@68|))) ))) (=> (forall ((|k#0@@69| T@U) ) (!  (=> (= (type |k#0@@69|) (SeqType BoxType)) (=> (and ($Is |k#0@@69| (TSeq Tclass.NativeTypes.byte)) (|Seq#Contains| |acc_keys#0@@6| ($Box |k#0@@69|))) (Lexicographic__Byte__Order.__default.lt |k#0@@69| |key#2_0@0|))) :qid |MapSeqsidfy.336:19| :skolemid |4853| :pattern ( (Lexicographic__Byte__Order.__default.lt |k#0@@69| |key#2_0@0|)) :pattern ( (|Seq#Contains| |acc_keys#0@@6| ($Box |k#0@@69|))) )) (=> (and (and (and ($IsGoodHeap $Heap@12) ($IsHeapAnchor $Heap@12)) (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#2_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#2_0@0|)))) (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys#0@@6| |acc_msgs#0@@6|))) (and (and (|Map#Equal| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#2_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#2_0@0|)))) (|Map#Build| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys#0@@6| |acc_msgs#0@@6|) ($Box |key#2_0@0|) ($Box |msg#2_0@0|))) (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys#0@@6| |acc_msgs#0@@6|)) (and (not (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys#0@@6| |acc_msgs#0@@6|)) ($Box |key#2_0@0|)))) (= $Heap@1 $Heap@12)))) (and (=> (= (ControlFlow 0 116287) (- 0 877375)) (forall (($o@@200 T@U) ($f@@132 T@U) ) (! (let ((alpha@@139 (FieldTypeInv0 (type $f@@132)))) (=> (and (and (= (type $o@@200) refType) (= (type $f@@132) (FieldType alpha@@139))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@200 $f@@132)))) :qid |BucketFlushModelidfy.549:31| :skolemid |1681| :no-pattern (type $o@@200) :no-pattern (type $f@@132) :no-pattern (U_2_int $o@@200) :no-pattern (U_2_bool $o@@200) :no-pattern (U_2_int $f@@132) :no-pattern (U_2_bool $f@@132) ))) (=> (forall (($o@@201 T@U) ($f@@133 T@U) ) (! (let ((alpha@@140 (FieldTypeInv0 (type $f@@133)))) (=> (and (and (= (type $o@@201) refType) (= (type $f@@133) (FieldType alpha@@140))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@201 $f@@133)))) :qid |BucketFlushModelidfy.549:31| :skolemid |1681| :no-pattern (type $o@@201) :no-pattern (type $f@@133) :no-pattern (U_2_int $o@@201) :no-pattern (U_2_bool $o@@201) :no-pattern (U_2_int $f@@133) :no-pattern (U_2_bool $f@@133) )) (and (=> (= (ControlFlow 0 116287) (- 0 877399)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (=> (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|)) (and (=> (= (ControlFlow 0 116287) (- 0 877407)) (<= (LitInt 0) |from#0@@16|)) (=> (<= (LitInt 0) |from#0@@16|) (and (=> (= (ControlFlow 0 116287) (- 0 877414)) (< |from#0@@16| |to#0@@16|)) (=> (< |from#0@@16| |to#0@@16|) (and (=> (= (ControlFlow 0 116287) (- 0 877418)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (=> (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|)) (and (=> (= (ControlFlow 0 116287) (- 0 877424)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (+ |from#0@@16| 1) (BucketFlushModel.singleMergeResult.end |res#2@0|)))) (=> (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (+ |from#0@@16| 1) (BucketFlushModel.singleMergeResult.end |res#2@0|))) (and (=> (= (ControlFlow 0 116287) (- 0 877439)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|)))) (=> (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116287) (- 0 877452)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |top_keys#0@@29|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |top_keys#0@@29|) (=> (and ($IsGoodHeap $Heap@13) ($IsHeapAnchor $Heap@13)) (=> (and (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|)) (|Map#Equal| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|Map#Build| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (|Seq#Index| |top_keys#0@@29| |from#0@@16|) (|Seq#Index| |top_msgs#0@@14| |from#0@@16|)))) (=> (and (and (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (not (U_2_bool (MapType0Select (|Map#Domain| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|)) (|Seq#Index| |top_keys#0@@29| |from#0@@16|))))) (and (= $Heap@12 $Heap@13) ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@13))) (and (and ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@13) ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@13)) (and ($IsAlloc (int_2_U |from#0@@16|) Tclass._System.nat $Heap@13) ($IsAlloc (int_2_U |to#0@@16|) Tclass._System.nat $Heap@13)))) (and (=> (= (ControlFlow 0 116287) (- 0 877609)) (<= (LitInt 0) |from#0@@16|)) (and (=> (= (ControlFlow 0 116287) (- 0 877616)) (<= |from#0@@16| |to#0@@16|)) (and (=> (= (ControlFlow 0 116287) (- 0 877620)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116287) (- 0 877626)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (and (=> (= (ControlFlow 0 116287) (- 0 877634)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= |from#0@@16| (BucketFlushModel.singleMergeResult.end |res#2@0|)))) (and (=> (= (ControlFlow 0 116287) (- 0 877645)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|)))) (=> (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (= |##top#2_1_0_1@0| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|))) (=> (and (and (and ($IsAlloc |##top#2_1_0_1@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@13) ($IsAlloc |bot#2@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@13)) (and ($IsAlloc |acc#2@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@13) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|))) (and (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|)) (= (ControlFlow 0 116287) (- 0 877763)))) (|Map#Equal| (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) |bot#2@0| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#2_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#2_0@0|))))) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|)))))))))))))))))))))))))))))))))))))))))))) (let ((anon108_Then_correct  (=> (and (and ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@1) (= (|Seq#Length| (BucketFlushModel.singleMergeResult.keys |res#2@0|)) (|Seq#Length| (BucketFlushModel.singleMergeResult.msgs |res#2@0|)))) (and (|BucketFlushModel.singleMergeResult.bucketMap#canCall| |res#2@0|) (|BucketFlushModel.singleMergeResult.bucketMap#canCall| |res#2@0|))) (and (=> (= (ControlFlow 0 116283) (- 0 875122)) (forall (($o@@202 T@U) ($f@@134 T@U) ) (! (let ((alpha@@141 (FieldTypeInv0 (type $f@@134)))) (=> (and (and (= (type $o@@202) refType) (= (type $f@@134) (FieldType alpha@@141))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@202 $f@@134)))) :qid |BucketFlushModelidfy.537:36| :skolemid |1682| :no-pattern (type $o@@202) :no-pattern (type $f@@134) :no-pattern (U_2_int $o@@202) :no-pattern (U_2_bool $o@@202) :no-pattern (U_2_int $f@@134) :no-pattern (U_2_bool $f@@134) ))) (=> (forall (($o@@203 T@U) ($f@@135 T@U) ) (! (let ((alpha@@142 (FieldTypeInv0 (type $f@@135)))) (=> (and (and (= (type $o@@203) refType) (= (type $f@@135) (FieldType alpha@@142))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@203 $f@@135)))) :qid |BucketFlushModelidfy.537:36| :skolemid |1682| :no-pattern (type $o@@203) :no-pattern (type $f@@135) :no-pattern (U_2_int $o@@203) :no-pattern (U_2_bool $o@@203) :no-pattern (U_2_int $f@@135) :no-pattern (U_2_bool $f@@135) )) (=> (and ($IsGoodHeap $Heap@10) ($IsHeapAnchor $Heap@10)) (=> (and (and (= $Heap@1 $Heap@10) (= StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0))) (and (= StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0) MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0))) (and (=> (= (ControlFlow 0 116283) (- 0 875198)) ($Is (int_2_U (+ |from#0@@16| 1)) Tclass._System.nat)) (=> ($Is (int_2_U (+ |from#0@@16| 1)) Tclass._System.nat) (=> (= |from##2_1_1_0@0| (+ |from#0@@16| 1)) (=> (and (= |acc_keys##2_1_1_0@0| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#2_0@0|)))) (= |acc_msgs##2_1_1_0@0| (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#2_0@0|))))) (and (=> (= (ControlFlow 0 116283) (- 0 875284)) ($Is (int_2_U (- |slack#0@@12| |delta#2_0@0|)) Tclass._System.nat)) (=> ($Is (int_2_U (- |slack#0@@12| |delta#2_0@0|)) Tclass._System.nat) (=> (= |slack##2_1_1_0@0| (- |slack#0@@12| |delta#2_0@0|)) (and (=> (= (ControlFlow 0 116283) (- 0 875304)) (forall (($o@@204 T@U) ($f@@136 T@U) ) (! (let ((alpha@@143 (FieldTypeInv0 (type $f@@136)))) (=> (and (and (= (type $o@@204) refType) (= (type $f@@136) (FieldType alpha@@143))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@204 $f@@136)))) :qid |BucketFlushModelidfy.538:49| :skolemid |1683| :no-pattern (type $o@@204) :no-pattern (type $f@@136) :no-pattern (U_2_int $o@@204) :no-pattern (U_2_bool $o@@204) :no-pattern (U_2_int $f@@136) :no-pattern (U_2_bool $f@@136) ))) (=> (forall (($o@@205 T@U) ($f@@137 T@U) ) (! (let ((alpha@@144 (FieldTypeInv0 (type $f@@137)))) (=> (and (and (= (type $o@@205) refType) (= (type $f@@137) (FieldType alpha@@144))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@205 $f@@137)))) :qid |BucketFlushModelidfy.538:49| :skolemid |1683| :no-pattern (type $o@@205) :no-pattern (type $f@@137) :no-pattern (U_2_int $o@@205) :no-pattern (U_2_bool $o@@205) :no-pattern (U_2_int $f@@137) :no-pattern (U_2_bool $f@@137) )) (and (=> (= (ControlFlow 0 116283) (- 0 875318)) (or (<= 0 (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)) (= (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from##2_1_1_0@0|) |bot_from#0@@6|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)))) (=> (or (<= 0 (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)) (= (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from##2_1_1_0@0|) |bot_from#0@@6|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|))) (and (=> (= (ControlFlow 0 116283) (- 0 875376)) (< (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from##2_1_1_0@0|) |bot_from#0@@6|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|))) (=> (< (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from##2_1_1_0@0|) |bot_from#0@@6|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)) (and (=> (= (ControlFlow 0 116283) (- 0 875430)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (=> (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|)) (and (=> (= (ControlFlow 0 116283) (- 0 875438)) (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|))) (=> (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116283) (- 0 875446)) (= (|Seq#Length| |acc_keys##2_1_1_0@0|) (|Seq#Length| |acc_msgs##2_1_1_0@0|))) (=> (= (|Seq#Length| |acc_keys##2_1_1_0@0|) (|Seq#Length| |acc_msgs##2_1_1_0@0|)) (and (=> (= (ControlFlow 0 116283) (- 0 875454)) (<= |from##2_1_1_0@0| |to#0@@16|)) (=> (<= |from##2_1_1_0@0| |to#0@@16|) (and (=> (= (ControlFlow 0 116283) (- 0 875458)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (=> (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|)) (and (=> (= (ControlFlow 0 116283) (- 0 875464)) (<= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|))) (=> (<= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)) (and (=> (= (ControlFlow 0 116283) (- 0 875470)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys##2_1_1_0@0|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys##2_1_1_0@0|) (and (=> (= (ControlFlow 0 116283) (- 0 875475)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |top_keys#0@@29|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |top_keys#0@@29|) (and (=> (= (ControlFlow 0 116283) (- 0 875480)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|) (and (=> (= (ControlFlow 0 116283) (- 0 875485)) (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##2_1_1_0@0| |top_keys#0@@29| |from##2_1_1_0@0|) (or (BucketFlushModel.__default.seq__lt |acc_keys##2_1_1_0@0| |top_keys#0@@29| |from##2_1_1_0@0|) (forall ((|i#6@@11| Int) (|j#0@@48| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#6@@11|) (< |i#6@@11| (|Seq#Length| |acc_keys##2_1_1_0@0|))) (and (<= |from##2_1_1_0@0| |j#0@@48|) (< |j#0@@48| (|Seq#Length| |top_keys#0@@29|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##2_1_1_0@0| |i#6@@11|)) ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@48|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1632| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@48|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##2_1_1_0@0| |i#6@@11|))) ))))) (=> (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##2_1_1_0@0| |top_keys#0@@29| |from##2_1_1_0@0|) (or (BucketFlushModel.__default.seq__lt |acc_keys##2_1_1_0@0| |top_keys#0@@29| |from##2_1_1_0@0|) (forall ((|i#6@@12| Int) (|j#0@@49| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#6@@12|) (< |i#6@@12| (|Seq#Length| |acc_keys##2_1_1_0@0|))) (and (<= |from##2_1_1_0@0| |j#0@@49|) (< |j#0@@49| (|Seq#Length| |top_keys#0@@29|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##2_1_1_0@0| |i#6@@12|)) ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@49|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1632| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@49|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##2_1_1_0@0| |i#6@@12|))) )))) (and (=> (= (ControlFlow 0 116283) (- 0 875576)) (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##2_1_1_0@0| |bot_keys#0@@6| |bot_from#0@@6|) (or (BucketFlushModel.__default.seq__lt |acc_keys##2_1_1_0@0| |bot_keys#0@@6| |bot_from#0@@6|) (forall ((|i#7@@11| Int) (|j#1@@27| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#7@@11|) (< |i#7@@11| (|Seq#Length| |acc_keys##2_1_1_0@0|))) (and (<= |bot_from#0@@6| |j#1@@27|) (< |j#1@@27| (|Seq#Length| |bot_keys#0@@6|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##2_1_1_0@0| |i#7@@11|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@27|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1634| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@27|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##2_1_1_0@0| |i#7@@11|))) ))))) (=> (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##2_1_1_0@0| |bot_keys#0@@6| |bot_from#0@@6|) (or (BucketFlushModel.__default.seq__lt |acc_keys##2_1_1_0@0| |bot_keys#0@@6| |bot_from#0@@6|) (forall ((|i#7@@12| Int) (|j#1@@28| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#7@@12|) (< |i#7@@12| (|Seq#Length| |acc_keys##2_1_1_0@0|))) (and (<= |bot_from#0@@6| |j#1@@28|) (< |j#1@@28| (|Seq#Length| |bot_keys#0@@6|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##2_1_1_0@0| |i#7@@12|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@28|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1634| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@28|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##2_1_1_0@0| |i#7@@12|))) )))) (and (=> (= (ControlFlow 0 116283) (- 0 875667)) (forall ((|i#1@@98| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@98|) (< |i#1@@98| (|Seq#Length| |bot_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@98|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.311:19| :skolemid |1636| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@98|))) ))) (=> (forall ((|i#1@@99| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@99|) (< |i#1@@99| (|Seq#Length| |bot_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@99|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.311:19| :skolemid |1636| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@99|))) )) (and (=> (= (ControlFlow 0 116283) (- 0 875714)) (forall ((|i#3@@30| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@30|) (< |i#3@@30| (|Seq#Length| |top_msgs#0@@14|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@30|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.312:19| :skolemid |1637| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@30|))) ))) (=> (forall ((|i#3@@31| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@31|) (< |i#3@@31| (|Seq#Length| |top_msgs#0@@14|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@31|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.312:19| :skolemid |1637| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@31|))) )) (and (=> (= (ControlFlow 0 116283) (- 0 875761)) (forall ((|i#5@@11| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@11|) (< |i#5@@11| (|Seq#Length| |acc_msgs##2_1_1_0@0|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##2_1_1_0@0| |i#5@@11|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.313:19| :skolemid |1638| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##2_1_1_0@0| |i#5@@11|))) ))) (=> (forall ((|i#5@@12| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@12|) (< |i#5@@12| (|Seq#Length| |acc_msgs##2_1_1_0@0|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##2_1_1_0@0| |i#5@@12|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.313:19| :skolemid |1638| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##2_1_1_0@0| |i#5@@12|))) )) (=> (and ($IsGoodHeap $Heap@11) ($IsHeapAnchor $Heap@11)) (=> (and (and (and (|BucketFlushModel.__default.mergeToOneChild#canCall| |top_keys#0@@29| |top_msgs#0@@14| |from##2_1_1_0@0| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from#0@@6| |acc_keys##2_1_1_0@0| |acc_msgs##2_1_1_0@0| |slack##2_1_1_0@0|) (let ((|res#0@@13| (BucketFlushModel.__default.mergeToOneChild StartFuel_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from##2_1_1_0@0| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from#0@@6| |acc_keys##2_1_1_0@0| |acc_msgs##2_1_1_0@0| |slack##2_1_1_0@0|))) (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| (|Seq#Take| |top_keys#0@@29| |to#0@@16|) |from##2_1_1_0@0|) (|Seq#Drop| (|Seq#Take| |top_msgs#0@@14| |to#0@@16|) |from##2_1_1_0@0|)) (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)) (let ((|bot#0@@21| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)))) (and (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys##2_1_1_0@0| |acc_msgs##2_1_1_0@0|) (let ((|acc#0@@15| (MapSeqs.__default.map__of__seqs ($LS $LZ) |acc_keys##2_1_1_0@0| |acc_msgs##2_1_1_0@0|))) (and (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#0@@13|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#0@@13|)) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketFlushModel.singleMergeResult.keys |res#0@@13|))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#0@@13|)) (and (|BucketFlushModel.singleMergeResult.bucketMap#canCall| |res#0@@13|) (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#0@@13| |top_keys#0@@29| |top_msgs#0@@14| |from##2_1_1_0@0| |to#0@@16|) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#0@@13| |top_keys#0@@29| |top_msgs#0@@14| |from##2_1_1_0@0| |to#0@@16|) |bot#0@@21| |acc#0@@15|)))))))))))) (and (let ((|res#0@@14| (BucketFlushModel.__default.mergeToOneChild StartFuelAssert_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from##2_1_1_0@0| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from#0@@6| |acc_keys##2_1_1_0@0| |acc_msgs##2_1_1_0@0| |slack##2_1_1_0@0|))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#0@@14|))) (let ((|res#0@@15| (BucketFlushModel.__default.mergeToOneChild StartFuelAssert_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from##2_1_1_0@0| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from#0@@6| |acc_keys##2_1_1_0@0| |acc_msgs##2_1_1_0@0| |slack##2_1_1_0@0|))) (let ((|bot#0@@22| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)))) (let ((|acc#0@@16| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys##2_1_1_0@0| |acc_msgs##2_1_1_0@0|))) (|Map#Equal| (BucketFlushModel.singleMergeResult.bucketMap |res#0@@15|) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#0@@15| |top_keys#0@@29| |top_msgs#0@@14| |from##2_1_1_0@0| |to#0@@16|) |bot#0@@22| |acc#0@@16|))))))) (and (and (= $Heap@10 $Heap@11) ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@11)) (and ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@11) ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@11)))) (and (=> (= (ControlFlow 0 116283) (- 0 876180)) ($Is (int_2_U (+ |from#0@@16| 1)) Tclass._System.nat)) (=> ($Is (int_2_U (+ |from#0@@16| 1)) Tclass._System.nat) (=> (= |##from#2_1_1_0@0| (+ |from#0@@16| 1)) (=> (and ($IsAlloc (int_2_U |##from#2_1_1_0@0|) Tclass._System.nat $Heap@11) ($IsAlloc (int_2_U |to#0@@16|) Tclass._System.nat $Heap@11)) (and (=> (= (ControlFlow 0 116283) (- 0 876217)) (<= (LitInt 0) |##from#2_1_1_0@0|)) (and (=> (= (ControlFlow 0 116283) (- 0 876224)) (<= |##from#2_1_1_0@0| |to#0@@16|)) (and (=> (= (ControlFlow 0 116283) (- 0 876228)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116283) (- 0 876234)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (and (=> (= (ControlFlow 0 116283) (- 0 876242)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= |##from#2_1_1_0@0| (BucketFlushModel.singleMergeResult.end |res#2@0|)))) (and (=> (= (ControlFlow 0 116283) (- 0 876253)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|)))) (=> (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (=> (and (and (= |##keys#2_1_1_0@0| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#2_0@0|)))) ($IsAlloc |##keys#2_1_1_0@0| (TSeq Tclass.KeyType.Key) $Heap@11)) (and (= |##msgs#2_1_1_0@0| (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#2_0@0|)))) ($IsAlloc |##msgs#2_1_1_0@0| (TSeq Tclass.ValueMessage.Message) $Heap@11))) (and (=> (= (ControlFlow 0 116283) (- 0 876335)) (= (|Seq#Length| |##keys#2_1_1_0@0|) (|Seq#Length| |##msgs#2_1_1_0@0|))) (=> (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#2_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#2_0@0|)))) (=> (and (= |##top#2_1_1_0@0| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|)) ($IsAlloc |##top#2_1_1_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@11)) (=> (and (and ($IsAlloc |bot#2@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@11) (= |##acc#2_1_1_0@0| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#2_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#2_0@0|)))))) (and ($IsAlloc |##acc#2_1_1_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@11) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) |bot#2@0| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#2_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#2_0@0|))))))) (=> (and (and (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#2_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#2_0@0|))))) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) |bot#2@0| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#2_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#2_0@0|)))))) (= (ControlFlow 0 116283) (- 0 876609))) (|Map#Equal| (BucketFlushModel.singleMergeResult.bucketMap |res#2@0|) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| (+ |from#0@@16| 1) |to#0@@16|) |bot#2@0| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#2_0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#2_0@0|))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((anon107_Then_correct  (=> (and ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@1) (= (ControlFlow 0 116279) (- 0 875078))) (= (|Seq#Length| (BucketFlushModel.singleMergeResult.keys |res#2@0|)) (|Seq#Length| (BucketFlushModel.singleMergeResult.msgs |res#2@0|)))))) (let ((GeneratedUnifiedExit_correct  (and (=> (= (ControlFlow 0 863483) (- 0 892627)) (let ((|res#0@@16| (BucketFlushModel.__default.mergeToOneChild StartFuelAssert_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from#0@@6| |acc_keys#0@@6| |acc_msgs#0@@6| |slack#0@@12|))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#0@@16|)))) (=> (let ((|res#0@@17| (BucketFlushModel.__default.mergeToOneChild StartFuelAssert_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from#0@@6| |acc_keys#0@@6| |acc_msgs#0@@6| |slack#0@@12|))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#0@@17|))) (=> (= (ControlFlow 0 863483) (- 0 892727)) (let ((|res#0@@18| (BucketFlushModel.__default.mergeToOneChild StartFuelAssert_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from#0@@6| |acc_keys#0@@6| |acc_msgs#0@@6| |slack#0@@12|))) (let ((|bot#0@@23| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)))) (let ((|acc#0@@17| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys#0@@6| |acc_msgs#0@@6|))) (|Map#Equal| (BucketFlushModel.singleMergeResult.bucketMap |res#0@@18|) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#0@@18| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#0@@23| |acc#0@@17|)))))))))) (let ((anon86_Else_correct  (=> (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#2@0|)) (= (ControlFlow 0 116142) 863483)) GeneratedUnifiedExit_correct))) (let ((anon82_Else_correct  (=> (forall ((|k#0_3| T@U) ) (!  (=> (= (type |k#0_3|) (SeqType BoxType)) (=> (and ($Is |k#0_3| Tclass.KeyType.Key) (U_2_bool (MapType0Select (|Map#Domain| |b#0_0@0|) ($Box |k#0_3|)))) (U_2_bool (MapType0Select (|Map#Domain| |a#0_0@0|) ($Box |k#0_3|))))) :qid |BucketFlushModelidfy.368:14| :skolemid |1664| :pattern ( (MapType0Select (|Map#Domain| |a#0_0@0|) ($Box |k#0_3|))) :pattern ( (MapType0Select (|Map#Domain| |b#0_0@0|) ($Box |k#0_3|))) )) (and (=> (= (ControlFlow 0 116136) (- 0 890093)) (|Map#Equal| |a#0_0@0| |b#0_0@0|)) (=> (|Map#Equal| |a#0_0@0| |b#0_0@0|) (=> (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)) (= |##run#0_1@0| (BucketFlushModel.singleMergeResult.keys |res#2@0|))) (=> (and (and ($IsAlloc |##run#0_1@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@1) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketFlushModel.singleMergeResult.keys |res#2@0|))) (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketFlushModel.singleMergeResult.keys |res#2@0|)))) (and (=> (= (ControlFlow 0 116136) 116140) anon86_Then_correct) (=> (= (ControlFlow 0 116136) 116142) anon86_Else_correct))))))))) (let ((anon78_Else_correct  (=> (forall ((|k#0_1| T@U) ) (!  (=> (= (type |k#0_1|) (SeqType BoxType)) (=> (and ($Is |k#0_1| Tclass.KeyType.Key) (U_2_bool (MapType0Select (|Map#Domain| |a#0_0@0|) ($Box |k#0_1|)))) (and (U_2_bool (MapType0Select (|Map#Domain| |b#0_0@0|) ($Box |k#0_1|))) (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#0_0@0|) ($Box |k#0_1|))) ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |b#0_0@0|) ($Box |k#0_1|))))))) :qid |BucketFlushModelidfy.350:14| :skolemid |1658| :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |b#0_0@0|) ($Box |k#0_1|)))) :pattern ( ($Unbox DatatypeTypeType (MapType0Select (|Map#Elements| |a#0_0@0|) ($Box |k#0_1|)))) :pattern ( (MapType0Select (|Map#Domain| |b#0_0@0|) ($Box |k#0_1|))) :pattern ( (MapType0Select (|Map#Domain| |a#0_0@0|) ($Box |k#0_1|))) )) (and (=> (= (ControlFlow 0 116104) 116108) anon82_Then_correct) (=> (= (ControlFlow 0 116104) 116136) anon82_Else_correct))))) (let ((anon77_Then_correct  (=> (and (= |from#0@@16| |to#0@@16|) ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@1)) (and (=> (= (ControlFlow 0 116071) (- 0 869625)) (= (|Seq#Length| (BucketFlushModel.singleMergeResult.keys |res#2@0|)) (|Seq#Length| (BucketFlushModel.singleMergeResult.msgs |res#2@0|)))) (=> (= (|Seq#Length| (BucketFlushModel.singleMergeResult.keys |res#2@0|)) (|Seq#Length| (BucketFlushModel.singleMergeResult.msgs |res#2@0|))) (=> (and (and (and (|BucketFlushModel.singleMergeResult.bucketMap#canCall| |res#2@0|) (|BucketFlushModel.singleMergeResult.bucketMap#canCall| |res#2@0|)) (and (= |a#0_0@0| (BucketFlushModel.singleMergeResult.bucketMap |res#2@0|)) ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@1))) (and (and ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@1) ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@1)) (and ($IsAlloc (int_2_U |from#0@@16|) Tclass._System.nat $Heap@1) ($IsAlloc (int_2_U |to#0@@16|) Tclass._System.nat $Heap@1)))) (and (=> (= (ControlFlow 0 116071) (- 0 869714)) (<= (LitInt 0) |from#0@@16|)) (and (=> (= (ControlFlow 0 116071) (- 0 869721)) (<= |from#0@@16| |to#0@@16|)) (and (=> (= (ControlFlow 0 116071) (- 0 869725)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116071) (- 0 869731)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (=> (and (and (and (<= (LitInt 0) |from#0@@16|) (<= |from#0@@16| |to#0@@16|)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (and (=> (= (ControlFlow 0 116071) (- 0 869770)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= |from#0@@16| (BucketFlushModel.singleMergeResult.end |res#2@0|)))) (and (=> (= (ControlFlow 0 116071) (- 0 869781)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|)))) (=> (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (and (<= |from#0@@16| (BucketFlushModel.singleMergeResult.end |res#2@0|)) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|)))) (=> (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (= |##top#0_0@0| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|))) (=> (and (and ($IsAlloc |##top#0_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@1) ($IsAlloc |bot#2@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@1)) (and ($IsAlloc |acc#2@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@1) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|))) (=> (and (and (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|)) (and (= |b#0_0@0| (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|)) ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@1))) (and (and ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@1) ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@1)) (and ($IsAlloc (int_2_U |from#0@@16|) Tclass._System.nat $Heap@1) ($IsAlloc (int_2_U |to#0@@16|) Tclass._System.nat $Heap@1)))) (and (=> (= (ControlFlow 0 116071) (- 0 869989)) (<= (LitInt 0) |from#0@@16|)) (and (=> (= (ControlFlow 0 116071) (- 0 869996)) (<= |from#0@@16| |to#0@@16|)) (and (=> (= (ControlFlow 0 116071) (- 0 870000)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116071) (- 0 870006)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (and (=> (= (ControlFlow 0 116071) (- 0 870014)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= |from#0@@16| (BucketFlushModel.singleMergeResult.end |res#2@0|)))) (and (=> (= (ControlFlow 0 116071) (- 0 870025)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|)))) (=> (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|)) (and (=> (= (ControlFlow 0 116071) (- 0 870060)) (|Map#Equal| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|Map#Empty| BoxType BoxType))) (=> (|Map#Equal| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|Map#Empty| BoxType BoxType)) (and (=> (= (ControlFlow 0 116071) 116078) anon78_Then_correct) (=> (= (ControlFlow 0 116071) 116104) anon78_Else_correct)))))))))))))))))))))))))))) (let ((anon92_Else_correct  (=> (and (|Map#Equal| (BucketFlushModel.singleMergeResult.bucketMap |res#2@0|) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|)) (= (ControlFlow 0 116183) 863483)) GeneratedUnifiedExit_correct))) (let ((anon89_Then_correct  (=> (|ValueMessage.Message#Equal| |msg#1_0@0| ValueMessage.__default.IdentityMessage) (and (and (and (=> (= (ControlFlow 0 116171) 116173) anon90_Then_correct) (=> (= (ControlFlow 0 116171) 116177) anon91_Then_correct)) (=> (= (ControlFlow 0 116171) 116181) anon92_Then_correct)) (=> (= (ControlFlow 0 116171) 116183) anon92_Else_correct))))) (let ((anon96_Else_correct  (=> (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#2@0|)) (= (ControlFlow 0 116208) 863483)) GeneratedUnifiedExit_correct))) (let ((anon95_Else_correct  (=> (|Map#Equal| (BucketFlushModel.singleMergeResult.bucketMap |res#2@0|) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|)) (=> (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)) (= |##run#1_1_0@0| (BucketFlushModel.singleMergeResult.keys |res#2@0|))) (=> (and (and ($IsAlloc |##run#1_1_0@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@1) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketFlushModel.singleMergeResult.keys |res#2@0|))) (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketFlushModel.singleMergeResult.keys |res#2@0|)))) (and (=> (= (ControlFlow 0 116202) 116206) anon96_Then_correct) (=> (= (ControlFlow 0 116202) 116208) anon96_Else_correct))))))) (let ((anon93_Then_correct  (=> (> |delta#1_0@0| |slack#0@@12|) (and (and (=> (= (ControlFlow 0 116194) 116196) anon94_Then_correct) (=> (= (ControlFlow 0 116194) 116200) anon95_Then_correct)) (=> (= (ControlFlow 0 116194) 116202) anon95_Else_correct))))) (let ((anon100_Else_correct  (=> (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#2@0|)) (= (ControlFlow 0 116230) 863483)) GeneratedUnifiedExit_correct))) (let ((anon99_Else_correct  (=> (|Map#Equal| (BucketFlushModel.singleMergeResult.bucketMap |res#2@0|) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|)) (=> (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)) (= |##run#1_0@0| (BucketFlushModel.singleMergeResult.keys |res#2@0|))) (=> (and (and ($IsAlloc |##run#1_0@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@1) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketFlushModel.singleMergeResult.keys |res#2@0|))) (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketFlushModel.singleMergeResult.keys |res#2@0|)))) (and (=> (= (ControlFlow 0 116224) 116228) anon100_Then_correct) (=> (= (ControlFlow 0 116224) 116230) anon100_Else_correct))))))) (let ((anon93_Else_correct  (=> (>= |slack#0@@12| |delta#1_0@0|) (and (and (and (=> (= (ControlFlow 0 116212) 116214) anon97_Then_correct) (=> (= (ControlFlow 0 116212) 116218) anon98_Then_correct)) (=> (= (ControlFlow 0 116212) 116222) anon99_Then_correct)) (=> (= (ControlFlow 0 116212) 116224) anon99_Else_correct))))) (let ((anon89_Else_correct  (=> (not (|ValueMessage.Message#Equal| |msg#1_0@0| ValueMessage.__default.IdentityMessage)) (=> (and (and (and ($IsAlloc |msg#1_0@0| Tclass.ValueMessage.Message $Heap@1) (|BucketWeights.__default.WeightMessage#canCall| |msg#1_0@0|)) (and ($IsAlloc |botmsg#1_0@0| Tclass.ValueMessage.Message $Heap@1) (|BucketWeights.__default.WeightMessage#canCall| |botmsg#1_0@0|))) (and (and (|BucketWeights.__default.WeightMessage#canCall| |msg#1_0@0|) (|BucketWeights.__default.WeightMessage#canCall| |botmsg#1_0@0|)) (= |delta#1_0@0| (- (BucketWeights.__default.WeightMessage |msg#1_0@0|) (BucketWeights.__default.WeightMessage |botmsg#1_0@0|))))) (and (=> (= (ControlFlow 0 116192) 116194) anon93_Then_correct) (=> (= (ControlFlow 0 116192) 116212) anon93_Else_correct)))))) (let ((anon88_Then_correct  (=> (and (< |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |from#0@@16|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |bot_from#0@@6|)))) (and (=> (= (ControlFlow 0 116169) (- 0 870167)) (and (<= 0 |from#0@@16|) (< |from#0@@16| (|Seq#Length| |top_keys#0@@29|)))) (=> (and (<= 0 |from#0@@16|) (< |from#0@@16| (|Seq#Length| |top_keys#0@@29|))) (=> (= |key#1_0@0| ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |from#0@@16|))) (and (=> (= (ControlFlow 0 116169) (- 0 870205)) (and (<= 0 |from#0@@16|) (< |from#0@@16| (|Seq#Length| |top_msgs#0@@14|)))) (=> (and (<= 0 |from#0@@16|) (< |from#0@@16| (|Seq#Length| |top_msgs#0@@14|))) (=> (= |topmsg#1_0@0| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |from#0@@16|))) (and (=> (= (ControlFlow 0 116169) (- 0 870243)) (and (<= 0 |bot_from#0@@6|) (< |bot_from#0@@6| (|Seq#Length| |bot_msgs#0@@6|)))) (=> (and (<= 0 |bot_from#0@@6|) (< |bot_from#0@@6| (|Seq#Length| |bot_msgs#0@@6|))) (=> (= |botmsg#1_0@0| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |bot_from#0@@6|))) (=> (and ($IsAlloc |topmsg#1_0@0| Tclass.ValueMessage.Message $Heap@1) ($IsAlloc |botmsg#1_0@0| Tclass.ValueMessage.Message $Heap@1)) (=> (and (and (and (|ValueMessage.__default.Merge#canCall| |topmsg#1_0@0| |botmsg#1_0@0|) (|ValueMessage.__default.Merge#canCall| |topmsg#1_0@0| |botmsg#1_0@0|)) (and (= |msg#1_0@0| (ValueMessage.__default.Merge |topmsg#1_0@0| |botmsg#1_0@0|)) |ValueMessage.__default.IdentityMessage#canCall|)) (and (and (|$IsA#ValueMessage.Message| |msg#1_0@0|) (|$IsA#ValueMessage.Message| (Lit ValueMessage.__default.IdentityMessage))) |ValueMessage.__default.IdentityMessage#canCall|)) (and (=> (= (ControlFlow 0 116169) 116171) anon89_Then_correct) (=> (= (ControlFlow 0 116169) 116192) anon89_Else_correct)))))))))))))))) (let ((anon106_Else_correct  (=> (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#2@0|)) (= (ControlFlow 0 116273) 863483)) GeneratedUnifiedExit_correct))) (let ((anon105_Else_correct  (=> (|Map#Equal| (BucketFlushModel.singleMergeResult.bucketMap |res#2@0|) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|)) (=> (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)) (= |##run#2_0_0@0| (BucketFlushModel.singleMergeResult.keys |res#2@0|))) (=> (and (and ($IsAlloc |##run#2_0_0@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@1) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketFlushModel.singleMergeResult.keys |res#2@0|))) (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketFlushModel.singleMergeResult.keys |res#2@0|)))) (and (=> (= (ControlFlow 0 116267) 116271) anon106_Then_correct) (=> (= (ControlFlow 0 116267) 116273) anon106_Else_correct))))))) (let ((anon103_Then_correct  (=> (> |delta#2_0@0| |slack#0@@12|) (and (and (=> (= (ControlFlow 0 116259) 116261) anon104_Then_correct) (=> (= (ControlFlow 0 116259) 116265) anon105_Then_correct)) (=> (= (ControlFlow 0 116259) 116267) anon105_Else_correct))))) (let ((anon110_Else_correct  (=> (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#2@0|)) (= (ControlFlow 0 116295) 863483)) GeneratedUnifiedExit_correct))) (let ((anon109_Else_correct  (=> (|Map#Equal| (BucketFlushModel.singleMergeResult.bucketMap |res#2@0|) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|)) (=> (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)) (= |##run#2_0@0| (BucketFlushModel.singleMergeResult.keys |res#2@0|))) (=> (and (and ($IsAlloc |##run#2_0@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@1) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketFlushModel.singleMergeResult.keys |res#2@0|))) (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketFlushModel.singleMergeResult.keys |res#2@0|)))) (and (=> (= (ControlFlow 0 116289) 116293) anon110_Then_correct) (=> (= (ControlFlow 0 116289) 116295) anon110_Else_correct))))))) (let ((anon103_Else_correct  (=> (>= |slack#0@@12| |delta#2_0@0|) (and (and (and (=> (= (ControlFlow 0 116277) 116279) anon107_Then_correct) (=> (= (ControlFlow 0 116277) 116283) anon108_Then_correct)) (=> (= (ControlFlow 0 116277) 116287) anon109_Then_correct)) (=> (= (ControlFlow 0 116277) 116289) anon109_Else_correct))))) (let ((anon102_Then_correct  (=> (or (= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |from#0@@16|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |bot_from#0@@6|)))) (and (=> (= (ControlFlow 0 116257) (- 0 870552)) (and (<= 0 |from#0@@16|) (< |from#0@@16| (|Seq#Length| |top_keys#0@@29|)))) (=> (and (<= 0 |from#0@@16|) (< |from#0@@16| (|Seq#Length| |top_keys#0@@29|))) (=> (= |key#2_0@0| ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |from#0@@16|))) (and (=> (= (ControlFlow 0 116257) (- 0 870590)) (and (<= 0 |from#0@@16|) (< |from#0@@16| (|Seq#Length| |top_msgs#0@@14|)))) (=> (and (<= 0 |from#0@@16|) (< |from#0@@16| (|Seq#Length| |top_msgs#0@@14|))) (=> (= |msg#2_0@0| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |from#0@@16|))) (=> (and (and (and ($IsAlloc |key#2_0@0| Tclass.KeyType.Key $Heap@1) (|BucketWeights.__default.WeightKey#canCall| |key#2_0@0|)) (and ($IsAlloc |msg#2_0@0| Tclass.ValueMessage.Message $Heap@1) (|BucketWeights.__default.WeightMessage#canCall| |msg#2_0@0|))) (and (and (|BucketWeights.__default.WeightKey#canCall| |key#2_0@0|) (|BucketWeights.__default.WeightMessage#canCall| |msg#2_0@0|)) (= |delta#2_0@0| (+ (BucketWeights.__default.WeightKey |key#2_0@0|) (BucketWeights.__default.WeightMessage |msg#2_0@0|))))) (and (=> (= (ControlFlow 0 116257) 116259) anon103_Then_correct) (=> (= (ControlFlow 0 116257) 116277) anon103_Else_correct)))))))))))) (let ((anon114_Else_correct  (=> (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#2@0|)) (= (ControlFlow 0 116317) 863483)) GeneratedUnifiedExit_correct))) (let ((anon114_Then_correct  (and (=> (= (ControlFlow 0 116315) (- 0 874033)) (forall (($o@@206 T@U) ($f@@138 T@U) ) (! (let ((alpha@@145 (FieldTypeInv0 (type $f@@138)))) (=> (and (and (= (type $o@@206) refType) (= (type $f@@138) (FieldType alpha@@145))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@206 $f@@138)))) :qid |BucketFlushModelidfy.593:32| :skolemid |1690| :no-pattern (type $o@@206) :no-pattern (type $f@@138) :no-pattern (U_2_int $o@@206) :no-pattern (U_2_bool $o@@206) :no-pattern (U_2_int $f@@138) :no-pattern (U_2_bool $f@@138) ))) (=> (forall (($o@@207 T@U) ($f@@139 T@U) ) (! (let ((alpha@@146 (FieldTypeInv0 (type $f@@139)))) (=> (and (and (= (type $o@@207) refType) (= (type $f@@139) (FieldType alpha@@146))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@207 $f@@139)))) :qid |BucketFlushModelidfy.593:32| :skolemid |1690| :no-pattern (type $o@@207) :no-pattern (type $f@@139) :no-pattern (U_2_int $o@@207) :no-pattern (U_2_bool $o@@207) :no-pattern (U_2_int $f@@139) :no-pattern (U_2_bool $f@@139) )) (=> (and ($IsGoodHeap $Heap@8) ($IsHeapAnchor $Heap@8)) (=> (and (and (= $Heap@1 $Heap@8) (= StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0))) (and (= StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0) MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0))) (and (=> (= (ControlFlow 0 116315) (- 0 874129)) ($Is (int_2_U (+ |bot_from#0@@6| 1)) Tclass._System.nat)) (=> ($Is (int_2_U (+ |bot_from#0@@6| 1)) Tclass._System.nat) (=> (= |bot_from##0@0| (+ |bot_from#0@@6| 1)) (=> (and (= |acc_keys##0@0| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#0@0|)))) (= |acc_msgs##0@0| (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#0@0|))))) (and (=> (= (ControlFlow 0 116315) (- 0 874198)) (forall (($o@@208 T@U) ($f@@140 T@U) ) (! (let ((alpha@@147 (FieldTypeInv0 (type $f@@140)))) (=> (and (and (= (type $o@@208) refType) (= (type $f@@140) (FieldType alpha@@147))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@208 $f@@140)))) :qid |BucketFlushModelidfy.594:45| :skolemid |1691| :no-pattern (type $o@@208) :no-pattern (type $f@@140) :no-pattern (U_2_int $o@@208) :no-pattern (U_2_bool $o@@208) :no-pattern (U_2_int $f@@140) :no-pattern (U_2_bool $f@@140) ))) (=> (forall (($o@@209 T@U) ($f@@141 T@U) ) (! (let ((alpha@@148 (FieldTypeInv0 (type $f@@141)))) (=> (and (and (= (type $o@@209) refType) (= (type $f@@141) (FieldType alpha@@148))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@209 $f@@141)))) :qid |BucketFlushModelidfy.594:45| :skolemid |1691| :no-pattern (type $o@@209) :no-pattern (type $f@@141) :no-pattern (U_2_int $o@@209) :no-pattern (U_2_bool $o@@209) :no-pattern (U_2_int $f@@141) :no-pattern (U_2_bool $f@@141) )) (and (=> (= (ControlFlow 0 116315) (- 0 874212)) (or (<= 0 (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)) (= (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from##0@0|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)))) (=> (or (<= 0 (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)) (= (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from##0@0|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|))) (and (=> (= (ControlFlow 0 116315) (- 0 874270)) (< (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from##0@0|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|))) (=> (< (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from##0@0|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)) (and (=> (= (ControlFlow 0 116315) (- 0 874324)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (=> (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|)) (and (=> (= (ControlFlow 0 116315) (- 0 874332)) (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|))) (=> (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116315) (- 0 874340)) (= (|Seq#Length| |acc_keys##0@0|) (|Seq#Length| |acc_msgs##0@0|))) (=> (= (|Seq#Length| |acc_keys##0@0|) (|Seq#Length| |acc_msgs##0@0|)) (and (=> (= (ControlFlow 0 116315) (- 0 874348)) (<= |from#0@@16| |to#0@@16|)) (=> (<= |from#0@@16| |to#0@@16|) (and (=> (= (ControlFlow 0 116315) (- 0 874352)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (=> (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|)) (and (=> (= (ControlFlow 0 116315) (- 0 874358)) (<= |bot_from##0@0| (|Seq#Length| |bot_keys#0@@6|))) (=> (<= |bot_from##0@0| (|Seq#Length| |bot_keys#0@@6|)) (and (=> (= (ControlFlow 0 116315) (- 0 874364)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys##0@0|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys##0@0|) (and (=> (= (ControlFlow 0 116315) (- 0 874369)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |top_keys#0@@29|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |top_keys#0@@29|) (and (=> (= (ControlFlow 0 116315) (- 0 874374)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|) (and (=> (= (ControlFlow 0 116315) (- 0 874379)) (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##0@0| |top_keys#0@@29| |from#0@@16|) (or (BucketFlushModel.__default.seq__lt |acc_keys##0@0| |top_keys#0@@29| |from#0@@16|) (forall ((|i#6@@13| Int) (|j#0@@50| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#6@@13|) (< |i#6@@13| (|Seq#Length| |acc_keys##0@0|))) (and (<= |from#0@@16| |j#0@@50|) (< |j#0@@50| (|Seq#Length| |top_keys#0@@29|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##0@0| |i#6@@13|)) ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@50|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1632| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@50|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##0@0| |i#6@@13|))) ))))) (=> (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##0@0| |top_keys#0@@29| |from#0@@16|) (or (BucketFlushModel.__default.seq__lt |acc_keys##0@0| |top_keys#0@@29| |from#0@@16|) (forall ((|i#6@@14| Int) (|j#0@@51| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#6@@14|) (< |i#6@@14| (|Seq#Length| |acc_keys##0@0|))) (and (<= |from#0@@16| |j#0@@51|) (< |j#0@@51| (|Seq#Length| |top_keys#0@@29|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##0@0| |i#6@@14|)) ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@51|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1632| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@51|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##0@0| |i#6@@14|))) )))) (and (=> (= (ControlFlow 0 116315) (- 0 874470)) (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##0@0| |bot_keys#0@@6| |bot_from##0@0|) (or (BucketFlushModel.__default.seq__lt |acc_keys##0@0| |bot_keys#0@@6| |bot_from##0@0|) (forall ((|i#7@@13| Int) (|j#1@@29| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#7@@13|) (< |i#7@@13| (|Seq#Length| |acc_keys##0@0|))) (and (<= |bot_from##0@0| |j#1@@29|) (< |j#1@@29| (|Seq#Length| |bot_keys#0@@6|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##0@0| |i#7@@13|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@29|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1634| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@29|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##0@0| |i#7@@13|))) ))))) (=> (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##0@0| |bot_keys#0@@6| |bot_from##0@0|) (or (BucketFlushModel.__default.seq__lt |acc_keys##0@0| |bot_keys#0@@6| |bot_from##0@0|) (forall ((|i#7@@14| Int) (|j#1@@30| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#7@@14|) (< |i#7@@14| (|Seq#Length| |acc_keys##0@0|))) (and (<= |bot_from##0@0| |j#1@@30|) (< |j#1@@30| (|Seq#Length| |bot_keys#0@@6|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##0@0| |i#7@@14|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@30|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1634| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@30|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##0@0| |i#7@@14|))) )))) (and (=> (= (ControlFlow 0 116315) (- 0 874561)) (forall ((|i#1@@100| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@100|) (< |i#1@@100| (|Seq#Length| |bot_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@100|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.311:19| :skolemid |1636| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@100|))) ))) (=> (forall ((|i#1@@101| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@101|) (< |i#1@@101| (|Seq#Length| |bot_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@101|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.311:19| :skolemid |1636| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@101|))) )) (and (=> (= (ControlFlow 0 116315) (- 0 874608)) (forall ((|i#3@@32| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@32|) (< |i#3@@32| (|Seq#Length| |top_msgs#0@@14|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@32|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.312:19| :skolemid |1637| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@32|))) ))) (=> (forall ((|i#3@@33| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@33|) (< |i#3@@33| (|Seq#Length| |top_msgs#0@@14|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@33|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.312:19| :skolemid |1637| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@33|))) )) (and (=> (= (ControlFlow 0 116315) (- 0 874655)) (forall ((|i#5@@13| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@13|) (< |i#5@@13| (|Seq#Length| |acc_msgs##0@0|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##0@0| |i#5@@13|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.313:19| :skolemid |1638| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##0@0| |i#5@@13|))) ))) (=> (forall ((|i#5@@14| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@14|) (< |i#5@@14| (|Seq#Length| |acc_msgs##0@0|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##0@0| |i#5@@14|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.313:19| :skolemid |1638| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##0@0| |i#5@@14|))) )) (=> (and (and (and ($IsGoodHeap $Heap@9) ($IsHeapAnchor $Heap@9)) (and (|BucketFlushModel.__default.mergeToOneChild#canCall| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from##0@0| |acc_keys##0@0| |acc_msgs##0@0| |slack#0@@12|) (let ((|res#0@@19| (BucketFlushModel.__default.mergeToOneChild StartFuel_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from##0@0| |acc_keys##0@0| |acc_msgs##0@0| |slack#0@@12|))) (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| (|Seq#Take| |top_keys#0@@29| |to#0@@16|) |from#0@@16|) (|Seq#Drop| (|Seq#Take| |top_msgs#0@@14| |to#0@@16|) |from#0@@16|)) (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| |bot_from##0@0|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from##0@0|)) (let ((|bot#0@@24| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| |bot_from##0@0|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from##0@0|)))) (and (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys##0@0| |acc_msgs##0@0|) (let ((|acc#0@@18| (MapSeqs.__default.map__of__seqs ($LS $LZ) |acc_keys##0@0| |acc_msgs##0@0|))) (and (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#0@@19|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#0@@19|)) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketFlushModel.singleMergeResult.keys |res#0@@19|))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#0@@19|)) (and (|BucketFlushModel.singleMergeResult.bucketMap#canCall| |res#0@@19|) (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#0@@19| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#0@@19| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#0@@24| |acc#0@@18|))))))))))))) (and (and (let ((|res#0@@20| (BucketFlushModel.__default.mergeToOneChild StartFuelAssert_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from##0@0| |acc_keys##0@0| |acc_msgs##0@0| |slack#0@@12|))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#0@@20|))) (let ((|res#0@@21| (BucketFlushModel.__default.mergeToOneChild StartFuelAssert_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from##0@0| |acc_keys##0@0| |acc_msgs##0@0| |slack#0@@12|))) (let ((|bot#0@@25| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| |bot_from##0@0|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from##0@0|)))) (let ((|acc#0@@19| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys##0@0| |acc_msgs##0@0|))) (|Map#Equal| (BucketFlushModel.singleMergeResult.bucketMap |res#0@@21|) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#0@@21| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#0@@25| |acc#0@@19|)))))) (and (= $Heap@8 $Heap@9) (= (ControlFlow 0 116315) (- 0 875046))))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#2@0|))))))))))))))))))))))))))))))))))))))))))))))) (let ((anon113_Else_correct  (=> (|Map#Equal| (BucketFlushModel.singleMergeResult.bucketMap |res#2@0|) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|)) (=> (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)) (= |##run#6@0| (BucketFlushModel.singleMergeResult.keys |res#2@0|))) (=> (and (and ($IsAlloc |##run#6@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@1) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketFlushModel.singleMergeResult.keys |res#2@0|))) (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#2@0|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|)) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketFlushModel.singleMergeResult.keys |res#2@0|)))) (and (=> (= (ControlFlow 0 116311) 116315) anon114_Then_correct) (=> (= (ControlFlow 0 116311) 116317) anon114_Else_correct))))))) (let ((anon113_Then_correct  (=> (and ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@1) ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@1)) (=> (and (and ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@1) ($IsAlloc (int_2_U |from#0@@16|) Tclass._System.nat $Heap@1)) (and ($IsAlloc (int_2_U |to#0@@16|) Tclass._System.nat $Heap@1) (<= (LitInt 0) |from#0@@16|))) (=> (and (and (and (<= |from#0@@16| |to#0@@16|) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= |from#0@@16| (BucketFlushModel.singleMergeResult.end |res#2@0|))))) (and (and (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|))) (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|)) (and (<= 0 (+ |bot_from#0@@6| 1)) (<= (+ |bot_from#0@@6| 1) (|Seq#Length| |bot_keys#0@@6|))))) (=> (and (and (and (and (and (<= 0 (+ |bot_from#0@@6| 1)) (<= (+ |bot_from#0@@6| 1) (|Seq#Length| |bot_msgs#0@@6|))) (= |##keys#3_0_0@0| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)))) (and ($IsAlloc |##keys#3_0_0@0| (TSeq Tclass.KeyType.Key) $Heap@1) (= |##msgs#3_0_0@0| (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))))) (and (and (and ($IsAlloc |##msgs#3_0_0@0| (TSeq Tclass.ValueMessage.Message) $Heap@1) (= (|Seq#Length| |##keys#3_0_0@0|) (|Seq#Length| |##msgs#3_0_0@0|))) (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (= |##keys#3_0_1@0| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#0@0|)))))) (and (and ($IsAlloc |##keys#3_0_1@0| (TSeq Tclass.KeyType.Key) $Heap@1) (= |##msgs#3_0_1@0| (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#0@0|))))) (and ($IsAlloc |##msgs#3_0_1@0| (TSeq Tclass.ValueMessage.Message) $Heap@1) (= (|Seq#Length| |##keys#3_0_1@0|) (|Seq#Length| |##msgs#3_0_1@0|)))))) (and (and (and (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#0@0|)))) (= |##top#3_0_0@0| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|))) (and ($IsAlloc |##top#3_0_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@1) (= |##bot#3_0_0@0| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1)))))) (and (and ($IsAlloc |##bot#3_0_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@1) (= |##acc#3_0_0@0| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#0@0|)))))) (and ($IsAlloc |##acc#3_0_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@1) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#0@0|)))))))) (and (and (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1)))) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#0@0|))))) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#0@0|)))))))) (and (=> (= (ControlFlow 0 116309) (- 0 873242)) (forall (($o@@210 T@U) ($f@@142 T@U) ) (! (let ((alpha@@149 (FieldTypeInv0 (type $f@@142)))) (=> (and (and (= (type $o@@210) refType) (= (type $f@@142) (FieldType alpha@@149))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@210 $f@@142)))) :qid |BucketFlushModelidfy.584:32| :skolemid |1686| :no-pattern (type $o@@210) :no-pattern (type $f@@142) :no-pattern (U_2_int $o@@210) :no-pattern (U_2_bool $o@@210) :no-pattern (U_2_int $f@@142) :no-pattern (U_2_bool $f@@142) ))) (=> (forall (($o@@211 T@U) ($f@@143 T@U) ) (! (let ((alpha@@150 (FieldTypeInv0 (type $f@@143)))) (=> (and (and (= (type $o@@211) refType) (= (type $f@@143) (FieldType alpha@@150))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@211 $f@@143)))) :qid |BucketFlushModelidfy.584:32| :skolemid |1686| :no-pattern (type $o@@211) :no-pattern (type $f@@143) :no-pattern (U_2_int $o@@211) :no-pattern (U_2_bool $o@@211) :no-pattern (U_2_int $f@@143) :no-pattern (U_2_bool $f@@143) )) (and (=> (= (ControlFlow 0 116309) (- 0 873262)) (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|))) (=> (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116309) (- 0 873270)) (<= (LitInt 0) |bot_from#0@@6|)) (=> (<= (LitInt 0) |bot_from#0@@6|) (and (=> (= (ControlFlow 0 116309) (- 0 873277)) (< |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|))) (=> (< |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)) (and (=> (= (ControlFlow 0 116309) (- 0 873283)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|) (=> (and (and (and ($IsGoodHeap $Heap@6) ($IsHeapAnchor $Heap@6)) (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)))) (and (and (|Map#Equal| (|Map#Build| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (|Seq#Index| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Index| |bot_msgs#0@@6| |bot_from#0@@6|)) (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|))) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1)))) (and (not (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1)))) (|Seq#Index| |bot_keys#0@@6| |bot_from#0@@6|)))) (= $Heap@1 $Heap@6)))) (and (=> (= (ControlFlow 0 116309) (- 0 873464)) (forall (($o@@212 T@U) ($f@@144 T@U) ) (! (let ((alpha@@151 (FieldTypeInv0 (type $f@@144)))) (=> (and (and (= (type $o@@212) refType) (= (type $f@@144) (FieldType alpha@@151))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@212 $f@@144)))) :qid |BucketFlushModelidfy.585:32| :skolemid |1687| :no-pattern (type $o@@212) :no-pattern (type $f@@144) :no-pattern (U_2_int $o@@212) :no-pattern (U_2_bool $o@@212) :no-pattern (U_2_int $f@@144) :no-pattern (U_2_bool $f@@144) ))) (=> (forall (($o@@213 T@U) ($f@@145 T@U) ) (! (let ((alpha@@152 (FieldTypeInv0 (type $f@@145)))) (=> (and (and (= (type $o@@213) refType) (= (type $f@@145) (FieldType alpha@@152))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@213 $f@@145)))) :qid |BucketFlushModelidfy.585:32| :skolemid |1687| :no-pattern (type $o@@213) :no-pattern (type $f@@145) :no-pattern (U_2_int $o@@213) :no-pattern (U_2_bool $o@@213) :no-pattern (U_2_int $f@@145) :no-pattern (U_2_bool $f@@145) )) (and (=> (= (ControlFlow 0 116309) (- 0 873486)) (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|))) (=> (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116309) (- 0 873494)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys#0@@6|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys#0@@6|) (and (=> (= (ControlFlow 0 116309) (- 0 873499)) (forall ((|k#0@@70| T@U) ) (!  (=> (= (type |k#0@@70|) (SeqType BoxType)) (=> (and ($Is |k#0@@70| (TSeq Tclass.NativeTypes.byte)) (|Seq#Contains| |acc_keys#0@@6| ($Box |k#0@@70|))) (Lexicographic__Byte__Order.__default.lt |k#0@@70| |key#0@0|))) :qid |MapSeqsidfy.336:19| :skolemid |4853| :pattern ( (Lexicographic__Byte__Order.__default.lt |k#0@@70| |key#0@0|)) :pattern ( (|Seq#Contains| |acc_keys#0@@6| ($Box |k#0@@70|))) ))) (=> (forall ((|k#0@@71| T@U) ) (!  (=> (= (type |k#0@@71|) (SeqType BoxType)) (=> (and ($Is |k#0@@71| (TSeq Tclass.NativeTypes.byte)) (|Seq#Contains| |acc_keys#0@@6| ($Box |k#0@@71|))) (Lexicographic__Byte__Order.__default.lt |k#0@@71| |key#0@0|))) :qid |MapSeqsidfy.336:19| :skolemid |4853| :pattern ( (Lexicographic__Byte__Order.__default.lt |k#0@@71| |key#0@0|)) :pattern ( (|Seq#Contains| |acc_keys#0@@6| ($Box |k#0@@71|))) )) (=> (and ($IsGoodHeap $Heap@7) ($IsHeapAnchor $Heap@7)) (=> (and (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#0@0|)))) (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys#0@@6| |acc_msgs#0@@6|)) (|Map#Equal| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#0@0|)))) (|Map#Build| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys#0@@6| |acc_msgs#0@@6|) ($Box |key#0@0|) ($Box |msg#0@0|)))) (=> (and (and (and (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys#0@@6| |acc_msgs#0@@6|) (not (U_2_bool (MapType0Select (|Map#Domain| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys#0@@6| |acc_msgs#0@@6|)) ($Box |key#0@0|))))) (and (= $Heap@6 $Heap@7) ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@7))) (and (and ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@7) ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@7)) (and ($IsAlloc (int_2_U |from#0@@16|) Tclass._System.nat $Heap@7) ($IsAlloc (int_2_U |to#0@@16|) Tclass._System.nat $Heap@7)))) (and (=> (= (ControlFlow 0 116309) (- 0 873718)) (<= (LitInt 0) |from#0@@16|)) (and (=> (= (ControlFlow 0 116309) (- 0 873725)) (<= |from#0@@16| |to#0@@16|)) (and (=> (= (ControlFlow 0 116309) (- 0 873729)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116309) (- 0 873735)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (and (=> (= (ControlFlow 0 116309) (- 0 873743)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= |from#0@@16| (BucketFlushModel.singleMergeResult.end |res#2@0|)))) (and (=> (= (ControlFlow 0 116309) (- 0 873754)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|)))) (=> (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (= |##top#3_0_1@0| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|))) (=> (and (and (and ($IsAlloc |##top#3_0_1@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@7) ($IsAlloc |bot#2@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@7)) (and ($IsAlloc |acc#2@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@7) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|))) (and (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|)) (= (ControlFlow 0 116309) (- 0 873872)))) (|Map#Equal| (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#0@0|))))) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#2@0| |acc#2@0|)))))))))))))))))))))))))))))))))))))) (let ((anon112_Then_correct  (=> (and (and ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@1) (= (|Seq#Length| (BucketFlushModel.singleMergeResult.keys |res#2@0|)) (|Seq#Length| (BucketFlushModel.singleMergeResult.msgs |res#2@0|)))) (and (|BucketFlushModel.singleMergeResult.bucketMap#canCall| |res#2@0|) (|BucketFlushModel.singleMergeResult.bucketMap#canCall| |res#2@0|))) (and (=> (= (ControlFlow 0 116305) (- 0 870836)) (forall (($o@@214 T@U) ($f@@146 T@U) ) (! (let ((alpha@@153 (FieldTypeInv0 (type $f@@146)))) (=> (and (and (= (type $o@@214) refType) (= (type $f@@146) (FieldType alpha@@153))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@214 $f@@146)))) :qid |BucketFlushModelidfy.571:34| :skolemid |1688| :no-pattern (type $o@@214) :no-pattern (type $f@@146) :no-pattern (U_2_int $o@@214) :no-pattern (U_2_bool $o@@214) :no-pattern (U_2_int $f@@146) :no-pattern (U_2_bool $f@@146) ))) (=> (forall (($o@@215 T@U) ($f@@147 T@U) ) (! (let ((alpha@@154 (FieldTypeInv0 (type $f@@147)))) (=> (and (and (= (type $o@@215) refType) (= (type $f@@147) (FieldType alpha@@154))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@215 $f@@147)))) :qid |BucketFlushModelidfy.571:34| :skolemid |1688| :no-pattern (type $o@@215) :no-pattern (type $f@@147) :no-pattern (U_2_int $o@@215) :no-pattern (U_2_bool $o@@215) :no-pattern (U_2_int $f@@147) :no-pattern (U_2_bool $f@@147) )) (=> (and ($IsGoodHeap $Heap@4) ($IsHeapAnchor $Heap@4)) (=> (and (and (= $Heap@1 $Heap@4) (= StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0))) (and (= StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0))) (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0) MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0))) (and (=> (= (ControlFlow 0 116305) (- 0 870932)) ($Is (int_2_U (+ |bot_from#0@@6| 1)) Tclass._System.nat)) (=> ($Is (int_2_U (+ |bot_from#0@@6| 1)) Tclass._System.nat) (=> (= |bot_from##3_1_0@0| (+ |bot_from#0@@6| 1)) (=> (and (= |acc_keys##3_1_0@0| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#0@0|)))) (= |acc_msgs##3_1_0@0| (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#0@0|))))) (and (=> (= (ControlFlow 0 116305) (- 0 871001)) (forall (($o@@216 T@U) ($f@@148 T@U) ) (! (let ((alpha@@155 (FieldTypeInv0 (type $f@@148)))) (=> (and (and (= (type $o@@216) refType) (= (type $f@@148) (FieldType alpha@@155))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@216 $f@@148)))) :qid |BucketFlushModelidfy.572:47| :skolemid |1689| :no-pattern (type $o@@216) :no-pattern (type $f@@148) :no-pattern (U_2_int $o@@216) :no-pattern (U_2_bool $o@@216) :no-pattern (U_2_int $f@@148) :no-pattern (U_2_bool $f@@148) ))) (=> (forall (($o@@217 T@U) ($f@@149 T@U) ) (! (let ((alpha@@156 (FieldTypeInv0 (type $f@@149)))) (=> (and (and (= (type $o@@217) refType) (= (type $f@@149) (FieldType alpha@@156))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@217 $f@@149)))) :qid |BucketFlushModelidfy.572:47| :skolemid |1689| :no-pattern (type $o@@217) :no-pattern (type $f@@149) :no-pattern (U_2_int $o@@217) :no-pattern (U_2_bool $o@@217) :no-pattern (U_2_int $f@@149) :no-pattern (U_2_bool $f@@149) )) (and (=> (= (ControlFlow 0 116305) (- 0 871015)) (or (<= 0 (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)) (= (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from##3_1_0@0|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)))) (=> (or (<= 0 (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)) (= (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from##3_1_0@0|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|))) (and (=> (= (ControlFlow 0 116305) (- 0 871073)) (< (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from##3_1_0@0|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|))) (=> (< (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from##3_1_0@0|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)) (and (=> (= (ControlFlow 0 116305) (- 0 871127)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (=> (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|)) (and (=> (= (ControlFlow 0 116305) (- 0 871135)) (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|))) (=> (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116305) (- 0 871143)) (= (|Seq#Length| |acc_keys##3_1_0@0|) (|Seq#Length| |acc_msgs##3_1_0@0|))) (=> (= (|Seq#Length| |acc_keys##3_1_0@0|) (|Seq#Length| |acc_msgs##3_1_0@0|)) (and (=> (= (ControlFlow 0 116305) (- 0 871151)) (<= |from#0@@16| |to#0@@16|)) (=> (<= |from#0@@16| |to#0@@16|) (and (=> (= (ControlFlow 0 116305) (- 0 871155)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (=> (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|)) (and (=> (= (ControlFlow 0 116305) (- 0 871161)) (<= |bot_from##3_1_0@0| (|Seq#Length| |bot_keys#0@@6|))) (=> (<= |bot_from##3_1_0@0| (|Seq#Length| |bot_keys#0@@6|)) (and (=> (= (ControlFlow 0 116305) (- 0 871167)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys##3_1_0@0|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys##3_1_0@0|) (and (=> (= (ControlFlow 0 116305) (- 0 871172)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |top_keys#0@@29|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |top_keys#0@@29|) (and (=> (= (ControlFlow 0 116305) (- 0 871177)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|)) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|) (and (=> (= (ControlFlow 0 116305) (- 0 871182)) (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##3_1_0@0| |top_keys#0@@29| |from#0@@16|) (or (BucketFlushModel.__default.seq__lt |acc_keys##3_1_0@0| |top_keys#0@@29| |from#0@@16|) (forall ((|i#6@@15| Int) (|j#0@@52| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#6@@15|) (< |i#6@@15| (|Seq#Length| |acc_keys##3_1_0@0|))) (and (<= |from#0@@16| |j#0@@52|) (< |j#0@@52| (|Seq#Length| |top_keys#0@@29|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##3_1_0@0| |i#6@@15|)) ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@52|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1632| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@52|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##3_1_0@0| |i#6@@15|))) ))))) (=> (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##3_1_0@0| |top_keys#0@@29| |from#0@@16|) (or (BucketFlushModel.__default.seq__lt |acc_keys##3_1_0@0| |top_keys#0@@29| |from#0@@16|) (forall ((|i#6@@16| Int) (|j#0@@53| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#6@@16|) (< |i#6@@16| (|Seq#Length| |acc_keys##3_1_0@0|))) (and (<= |from#0@@16| |j#0@@53|) (< |j#0@@53| (|Seq#Length| |top_keys#0@@29|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##3_1_0@0| |i#6@@16|)) ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@53|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1632| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#0@@53|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##3_1_0@0| |i#6@@16|))) )))) (and (=> (= (ControlFlow 0 116305) (- 0 871273)) (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##3_1_0@0| |bot_keys#0@@6| |bot_from##3_1_0@0|) (or (BucketFlushModel.__default.seq__lt |acc_keys##3_1_0@0| |bot_keys#0@@6| |bot_from##3_1_0@0|) (forall ((|i#7@@15| Int) (|j#1@@31| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#7@@15|) (< |i#7@@15| (|Seq#Length| |acc_keys##3_1_0@0|))) (and (<= |bot_from##3_1_0@0| |j#1@@31|) (< |j#1@@31| (|Seq#Length| |bot_keys#0@@6|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##3_1_0@0| |i#7@@15|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@31|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1634| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@31|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##3_1_0@0| |i#7@@15|))) ))))) (=> (=> (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys##3_1_0@0| |bot_keys#0@@6| |bot_from##3_1_0@0|) (or (BucketFlushModel.__default.seq__lt |acc_keys##3_1_0@0| |bot_keys#0@@6| |bot_from##3_1_0@0|) (forall ((|i#7@@16| Int) (|j#1@@32| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#7@@16|) (< |i#7@@16| (|Seq#Length| |acc_keys##3_1_0@0|))) (and (<= |bot_from##3_1_0@0| |j#1@@32|) (< |j#1@@32| (|Seq#Length| |bot_keys#0@@6|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##3_1_0@0| |i#7@@16|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@32|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1634| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#1@@32|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys##3_1_0@0| |i#7@@16|))) )))) (and (=> (= (ControlFlow 0 116305) (- 0 871364)) (forall ((|i#1@@102| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@102|) (< |i#1@@102| (|Seq#Length| |bot_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@102|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.311:19| :skolemid |1636| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@102|))) ))) (=> (forall ((|i#1@@103| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@103|) (< |i#1@@103| (|Seq#Length| |bot_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@103|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.311:19| :skolemid |1636| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@103|))) )) (and (=> (= (ControlFlow 0 116305) (- 0 871411)) (forall ((|i#3@@34| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@34|) (< |i#3@@34| (|Seq#Length| |top_msgs#0@@14|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@34|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.312:19| :skolemid |1637| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@34|))) ))) (=> (forall ((|i#3@@35| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@35|) (< |i#3@@35| (|Seq#Length| |top_msgs#0@@14|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@35|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.312:19| :skolemid |1637| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@35|))) )) (and (=> (= (ControlFlow 0 116305) (- 0 871458)) (forall ((|i#5@@15| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@15|) (< |i#5@@15| (|Seq#Length| |acc_msgs##3_1_0@0|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##3_1_0@0| |i#5@@15|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.313:19| :skolemid |1638| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##3_1_0@0| |i#5@@15|))) ))) (=> (forall ((|i#5@@16| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@16|) (< |i#5@@16| (|Seq#Length| |acc_msgs##3_1_0@0|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##3_1_0@0| |i#5@@16|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.313:19| :skolemid |1638| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs##3_1_0@0| |i#5@@16|))) )) (=> (and (and ($IsGoodHeap $Heap@5) ($IsHeapAnchor $Heap@5)) (and (|BucketFlushModel.__default.mergeToOneChild#canCall| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from##3_1_0@0| |acc_keys##3_1_0@0| |acc_msgs##3_1_0@0| |slack#0@@12|) (let ((|res#0@@22| (BucketFlushModel.__default.mergeToOneChild StartFuel_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from##3_1_0@0| |acc_keys##3_1_0@0| |acc_msgs##3_1_0@0| |slack#0@@12|))) (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| (|Seq#Take| |top_keys#0@@29| |to#0@@16|) |from#0@@16|) (|Seq#Drop| (|Seq#Take| |top_msgs#0@@14| |to#0@@16|) |from#0@@16|)) (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| |bot_from##3_1_0@0|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from##3_1_0@0|)) (let ((|bot#0@@26| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| |bot_from##3_1_0@0|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from##3_1_0@0|)))) (and (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys##3_1_0@0| |acc_msgs##3_1_0@0|) (let ((|acc#0@@20| (MapSeqs.__default.map__of__seqs ($LS $LZ) |acc_keys##3_1_0@0| |acc_msgs##3_1_0@0|))) (and (and (or (BucketFlushModel.singleMergeResult.MergeCompleted_q |res#0@@22|) (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#0@@22|)) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (BucketFlushModel.singleMergeResult.keys |res#0@@22|))) (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#0@@22|)) (and (|BucketFlushModel.singleMergeResult.bucketMap#canCall| |res#0@@22|) (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#0@@22| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#0@@22| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#0@@26| |acc#0@@20|))))))))))))) (=> (and (and (and (let ((|res#0@@23| (BucketFlushModel.__default.mergeToOneChild StartFuelAssert_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from##3_1_0@0| |acc_keys##3_1_0@0| |acc_msgs##3_1_0@0| |slack#0@@12|))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#0@@23|))) (let ((|res#0@@24| (BucketFlushModel.__default.mergeToOneChild StartFuelAssert_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from##3_1_0@0| |acc_keys##3_1_0@0| |acc_msgs##3_1_0@0| |slack#0@@12|))) (let ((|bot#0@@27| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| |bot_from##3_1_0@0|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from##3_1_0@0|)))) (let ((|acc#0@@21| (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) |acc_keys##3_1_0@0| |acc_msgs##3_1_0@0|))) (|Map#Equal| (BucketFlushModel.singleMergeResult.bucketMap |res#0@@24|) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#0@@24| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) |bot#0@@27| |acc#0@@21|)))))) (and (= $Heap@4 $Heap@5) ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@5))) (and (and ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@5) ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@5)) (and ($IsAlloc (int_2_U |from#0@@16|) Tclass._System.nat $Heap@5) ($IsAlloc (int_2_U |to#0@@16|) Tclass._System.nat $Heap@5)))) (and (=> (= (ControlFlow 0 116305) (- 0 871895)) (<= (LitInt 0) |from#0@@16|)) (and (=> (= (ControlFlow 0 116305) (- 0 871902)) (<= |from#0@@16| |to#0@@16|)) (and (=> (= (ControlFlow 0 116305) (- 0 871906)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116305) (- 0 871912)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (and (=> (= (ControlFlow 0 116305) (- 0 871920)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= |from#0@@16| (BucketFlushModel.singleMergeResult.end |res#2@0|)))) (and (=> (= (ControlFlow 0 116305) (- 0 871931)) (=> (BucketFlushModel.singleMergeResult.SlackExhausted_q |res#2@0|) (<= (BucketFlushModel.singleMergeResult.end |res#2@0|) (|Seq#Length| |top_keys#0@@29|)))) (=> (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (and (=> (= (ControlFlow 0 116305) (- 0 871955)) (and (<= 0 (+ |bot_from#0@@6| 1)) (<= (+ |bot_from#0@@6| 1) (|Seq#Length| |bot_keys#0@@6|)))) (and (=> (= (ControlFlow 0 116305) (- 0 871979)) (and (<= 0 (+ |bot_from#0@@6| 1)) (<= (+ |bot_from#0@@6| 1) (|Seq#Length| |bot_msgs#0@@6|)))) (=> (and (and (= |##keys#3_1_0@0| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1))) ($IsAlloc |##keys#3_1_0@0| (TSeq Tclass.KeyType.Key) $Heap@5)) (and (= |##msgs#3_1_0@0| (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) ($IsAlloc |##msgs#3_1_0@0| (TSeq Tclass.ValueMessage.Message) $Heap@5))) (and (=> (= (ControlFlow 0 116305) (- 0 872051)) (= (|Seq#Length| |##keys#3_1_0@0|) (|Seq#Length| |##msgs#3_1_0@0|))) (=> (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (=> (and (and (= |##keys#3_1_1@0| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#0@0|)))) ($IsAlloc |##keys#3_1_1@0| (TSeq Tclass.KeyType.Key) $Heap@5)) (and (= |##msgs#3_1_1@0| (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#0@0|)))) ($IsAlloc |##msgs#3_1_1@0| (TSeq Tclass.ValueMessage.Message) $Heap@5))) (and (=> (= (ControlFlow 0 116305) (- 0 872135)) (= (|Seq#Length| |##keys#3_1_1@0|) (|Seq#Length| |##msgs#3_1_1@0|))) (=> (and (and (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#0@0|)))) (= |##top#3_1_0@0| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|))) (and ($IsAlloc |##top#3_1_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@5) (= |##bot#3_1_0@0| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1)))))) (and (and ($IsAlloc |##bot#3_1_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@5) (= |##acc#3_1_0@0| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#0@0|)))))) (and ($IsAlloc |##acc#3_1_0@0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@5) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#0@0|)))))))) (=> (and (and (and (and (|BucketFlushModel.singleMergeResult.flushedMap#canCall| |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1)))) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#0@0|))))) (|BucketFlushModel.__default.topBotAccMerge#canCall| (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#0@0|)))))) (= (ControlFlow 0 116305) (- 0 872497))) (|Map#Equal| (BucketFlushModel.singleMergeResult.bucketMap |res#2@0|) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#2@0| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16|) (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Drop| |bot_keys#0@@6| (+ |bot_from#0@@6| 1)) (|Seq#Drop| |bot_msgs#0@@6| (+ |bot_from#0@@6| 1))) (MapSeqs.__default.map__of__seqs ($LS ($LS $LZ)) (|Seq#Append| |acc_keys#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |key#0@0|))) (|Seq#Append| |acc_msgs#0@@6| (|Seq#Build| (|Seq#Empty| BoxType) ($Box |msg#0@0|))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) (let ((anon111_Then_correct  (=> (and ($IsAlloc |res#2@0| Tclass.BucketFlushModel.singleMergeResult $Heap@1) (= (ControlFlow 0 116301) (- 0 870792))) (= (|Seq#Length| (BucketFlushModel.singleMergeResult.keys |res#2@0|)) (|Seq#Length| (BucketFlushModel.singleMergeResult.msgs |res#2@0|)))))) (let ((anon102_Else_correct  (=> (not (or (= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |from#0@@16|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |bot_from#0@@6|))))) (and (=> (= (ControlFlow 0 116299) (- 0 870712)) (and (<= 0 |bot_from#0@@6|) (< |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)))) (=> (and (<= 0 |bot_from#0@@6|) (< |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|))) (=> (= |key#0@0| ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |bot_from#0@@6|))) (and (=> (= (ControlFlow 0 116299) (- 0 870750)) (and (<= 0 |bot_from#0@@6|) (< |bot_from#0@@6| (|Seq#Length| |bot_msgs#0@@6|)))) (=> (and (<= 0 |bot_from#0@@6|) (< |bot_from#0@@6| (|Seq#Length| |bot_msgs#0@@6|))) (=> (= |msg#0@0| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |bot_from#0@@6|))) (and (and (and (=> (= (ControlFlow 0 116299) 116301) anon111_Then_correct) (=> (= (ControlFlow 0 116299) 116305) anon112_Then_correct)) (=> (= (ControlFlow 0 116299) 116309) anon113_Then_correct)) (=> (= (ControlFlow 0 116299) 116311) anon113_Else_correct))))))))))) (let ((anon53_correct  (=> (=> (not (= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|))) (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |from#0@@16|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |bot_from#0@@6|)))) (and (=> (= (ControlFlow 0 116250) 116257) anon102_Then_correct) (=> (= (ControlFlow 0 116250) 116299) anon102_Else_correct))))) (let ((anon101_Else_correct  (=> (and (= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)) (= (ControlFlow 0 116243) 116250)) anon53_correct))) (let ((anon101_Then_correct  (=> (not (= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|))) (and (=> (= (ControlFlow 0 116241) (- 0 870376)) (and (<= 0 |from#0@@16|) (< |from#0@@16| (|Seq#Length| |top_keys#0@@29|)))) (=> (and (<= 0 |from#0@@16|) (< |from#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116241) (- 0 870392)) (and (<= 0 |bot_from#0@@6|) (< |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)))) (=> (and (<= 0 |bot_from#0@@6|) (< |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|))) (=> (and (= |##a#2@0| ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |from#0@@16|))) ($IsAlloc |##a#2@0| (TSeq Tclass.NativeTypes.byte) $Heap@1)) (=> (and (and (= |##b#2@0| ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |bot_from#0@@6|))) ($IsAlloc |##b#2@0| (TSeq Tclass.NativeTypes.byte) $Heap@1)) (and (|Lexicographic__Byte__Order.__default.lt#canCall| ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |from#0@@16|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |bot_from#0@@6|))) (= (ControlFlow 0 116241) 116250))) anon53_correct))))))))) (let ((anon88_Else_correct  (=> (not (and (< |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)) (|Seq#Equal| ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |from#0@@16|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |bot_from#0@@6|))))) (and (=> (= (ControlFlow 0 116239) 116241) anon101_Then_correct) (=> (= (ControlFlow 0 116239) 116243) anon101_Else_correct))))) (let ((anon30_correct  (and (=> (= (ControlFlow 0 116162) 116169) anon88_Then_correct) (=> (= (ControlFlow 0 116162) 116239) anon88_Else_correct)))) (let ((anon87_Else_correct  (=> (and (<= (|Seq#Length| |bot_keys#0@@6|) |bot_from#0@@6|) (= (ControlFlow 0 116155) 116162)) anon30_correct))) (let ((anon87_Then_correct  (=> (< |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)) (and (=> (= (ControlFlow 0 116153) (- 0 870091)) (and (<= 0 |from#0@@16|) (< |from#0@@16| (|Seq#Length| |top_keys#0@@29|)))) (=> (and (<= 0 |from#0@@16|) (< |from#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116153) (- 0 870107)) (and (<= 0 |bot_from#0@@6|) (< |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)))) (=> (and (<= 0 |bot_from#0@@6|) (< |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|))) (=> (= (ControlFlow 0 116153) 116162) anon30_correct)))))))) (let ((anon77_Else_correct  (=> (not (= |from#0@@16| |to#0@@16|)) (and (=> (= (ControlFlow 0 116151) 116153) anon87_Then_correct) (=> (= (ControlFlow 0 116151) 116155) anon87_Else_correct))))) (let ((anon76_Else_correct  (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (|Seq#Drop| (|Seq#Take| |top_keys#0@@29| |to#0@@16|) |from#0@@16|)) (and (=> (= (ControlFlow 0 116062) 116071) anon77_Then_correct) (=> (= (ControlFlow 0 116062) 116151) anon77_Else_correct))))) (let ((anon76_Then_correct  (and (=> (= (ControlFlow 0 116060) (- 0 869515)) (forall (($o@@218 T@U) ($f@@150 T@U) ) (! (let ((alpha@@157 (FieldTypeInv0 (type $f@@150)))) (=> (and (and (= (type $o@@218) refType) (= (type $f@@150) (FieldType alpha@@157))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@218 $f@@150)))) :qid |BucketFlushModelidfy.342:77| :skolemid |1652| :no-pattern (type $o@@218) :no-pattern (type $f@@150) :no-pattern (U_2_int $o@@218) :no-pattern (U_2_bool $o@@218) :no-pattern (U_2_int $f@@150) :no-pattern (U_2_bool $f@@150) ))) (=> (forall (($o@@219 T@U) ($f@@151 T@U) ) (! (let ((alpha@@158 (FieldTypeInv0 (type $f@@151)))) (=> (and (and (= (type $o@@219) refType) (= (type $f@@151) (FieldType alpha@@158))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@219 $f@@151)))) :qid |BucketFlushModelidfy.342:77| :skolemid |1652| :no-pattern (type $o@@219) :no-pattern (type $f@@151) :no-pattern (U_2_int $o@@219) :no-pattern (U_2_bool $o@@219) :no-pattern (U_2_int $f@@151) :no-pattern (U_2_bool $f@@151) )) (=> (and (and (and ($IsGoodHeap $Heap@3) ($IsHeapAnchor $Heap@3)) (= $Heap@1 $Heap@3)) (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0)))) (and (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0) MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0) (= (ControlFlow 0 116060) (- 0 869579))))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (|Seq#Drop| (|Seq#Take| |top_keys#0@@29| |to#0@@16|) |from#0@@16|))))))) (let ((anon75_Else_correct  (=> (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|)) (and (=> (= (ControlFlow 0 116056) (- 0 869415)) (and (<= 0 |from#0@@16|) (<= |from#0@@16| (|Seq#Length| |top_keys#0@@29|)))) (and (=> (= (ControlFlow 0 116056) (- 0 869431)) (and (<= |from#0@@16| |to#0@@16|) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|)))) (and (=> (= (ControlFlow 0 116056) (- 0 869447)) ($Is (|Seq#Drop| (|Seq#Take| |top_keys#0@@29| |to#0@@16|) |from#0@@16|) (TSeq (TSeq Tclass.NativeTypes.byte)))) (=> ($Is (|Seq#Drop| (|Seq#Take| |top_keys#0@@29| |to#0@@16|) |from#0@@16|) (TSeq (TSeq Tclass.NativeTypes.byte))) (=> (and (and (= |##run#5@0| (|Seq#Drop| (|Seq#Take| |top_keys#0@@29| |to#0@@16|) |from#0@@16|)) ($IsAlloc |##run#5@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@1)) (and (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (|Seq#Drop| (|Seq#Take| |top_keys#0@@29| |to#0@@16|) |from#0@@16|)) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (|Seq#Drop| (|Seq#Take| |top_keys#0@@29| |to#0@@16|) |from#0@@16|)))) (and (=> (= (ControlFlow 0 116056) 116060) anon76_Then_correct) (=> (= (ControlFlow 0 116056) 116062) anon76_Else_correct)))))))))) (let ((anon75_Then_correct  (and (=> (= (ControlFlow 0 116054) (- 0 869329)) (forall (($o@@220 T@U) ($f@@152 T@U) ) (! (let ((alpha@@159 (FieldTypeInv0 (type $f@@152)))) (=> (and (and (= (type $o@@220) refType) (= (type $f@@152) (FieldType alpha@@159))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@220 $f@@152)))) :qid |BucketFlushModelidfy.341:79| :skolemid |1651| :no-pattern (type $o@@220) :no-pattern (type $f@@152) :no-pattern (U_2_int $o@@220) :no-pattern (U_2_bool $o@@220) :no-pattern (U_2_int $f@@152) :no-pattern (U_2_bool $f@@152) ))) (=> (forall (($o@@221 T@U) ($f@@153 T@U) ) (! (let ((alpha@@160 (FieldTypeInv0 (type $f@@153)))) (=> (and (and (= (type $o@@221) refType) (= (type $f@@153) (FieldType alpha@@160))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@221 $f@@153)))) :qid |BucketFlushModelidfy.341:79| :skolemid |1651| :no-pattern (type $o@@221) :no-pattern (type $f@@153) :no-pattern (U_2_int $o@@221) :no-pattern (U_2_bool $o@@221) :no-pattern (U_2_int $f@@153) :no-pattern (U_2_bool $f@@153) )) (=> (and (and (and ($IsGoodHeap $Heap@2) ($IsHeapAnchor $Heap@2)) (= $Heap@1 $Heap@2)) (and (and (= StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0)) (= StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted ($LS ($LS MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0)))) (and (= (AsFuelBottom MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0) MoreFuel_Lexicographic_Byte_Order._default.IsStrictlySorted0) (= (ControlFlow 0 116054) (- 0 869393))))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|))))))) (let ((anon0_correct  (=> (= (AsFuelBottom StartFuel_Sequences._default.NoDupes) StartFuel_Sequences._default.NoDupes) (=> (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.NoDupes) StartFuelAssert_Sequences._default.NoDupes) (= (AsFuelBottom StartFuel_Sequences._default.Range) StartFuel_Sequences._default.Range)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Range) StartFuelAssert_Sequences._default.Range) (= (AsFuelBottom StartFuel_Sequences._default.ApplyOpaque) StartFuel_Sequences._default.ApplyOpaque))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.ApplyOpaque) StartFuelAssert_Sequences._default.ApplyOpaque) (= (AsFuelBottom StartFuel_Sequences._default.remove) StartFuel_Sequences._default.remove)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.remove) StartFuelAssert_Sequences._default.remove) (= (AsFuelBottom StartFuel_Sequences._default.RemoveOneValue) StartFuel_Sequences._default.RemoveOneValue)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.RemoveOneValue) StartFuelAssert_Sequences._default.RemoveOneValue) (= (AsFuelBottom StartFuel_Sequences._default.insert) StartFuel_Sequences._default.insert)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.insert) StartFuelAssert_Sequences._default.insert) (= (AsFuelBottom StartFuel_Sequences._default.replace1with2) StartFuel_Sequences._default.replace1with2))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace1with2) StartFuelAssert_Sequences._default.replace1with2) (= (AsFuelBottom StartFuel_Sequences._default.replace2with1) StartFuel_Sequences._default.replace2with1)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.replace2with1) StartFuelAssert_Sequences._default.replace2with1) (= (AsFuelBottom StartFuel_Sequences._default.concat) StartFuel_Sequences._default.concat))))) (=> (and (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat) StartFuelAssert_Sequences._default.concat) (= (AsFuelBottom StartFuel_Sequences._default.concat3) StartFuel_Sequences._default.concat3)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concat3) StartFuelAssert_Sequences._default.concat3) (= (AsFuelBottom StartFuel_Sequences._default.concatSeq) StartFuel_Sequences._default.concatSeq))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.concatSeq) StartFuelAssert_Sequences._default.concatSeq) (= (AsFuelBottom StartFuel_Sequences._default.IsPrefix) StartFuel_Sequences._default.IsPrefix)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsPrefix) StartFuelAssert_Sequences._default.IsPrefix) (= (AsFuelBottom StartFuel_Sequences._default.IsSuffix) StartFuel_Sequences._default.IsSuffix)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.IsSuffix) StartFuelAssert_Sequences._default.IsSuffix) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexIterate) StartFuel_Sequences._default.SeqIndexIterate)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexIterate) StartFuelAssert_Sequences._default.SeqIndexIterate) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndex) StartFuel_Sequences._default.SeqIndex))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndex) StartFuelAssert_Sequences._default.SeqIndex) (= (AsFuelBottom StartFuel_Sequences._default.SeqOfLength) StartFuel_Sequences._default.SeqOfLength)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqOfLength) StartFuelAssert_Sequences._default.SeqOfLength) (= (AsFuelBottom StartFuel_Sequences._default.SeqIndexUpdate) StartFuel_Sequences._default.SeqIndexUpdate))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.SeqIndexUpdate) StartFuelAssert_Sequences._default.SeqIndexUpdate) (= (AsFuelBottom StartFuel_Sequences._default.Zip) StartFuel_Sequences._default.Zip)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Zip) StartFuelAssert_Sequences._default.Zip) (= (AsFuelBottom StartFuel_Sequences._default.Unzip) StartFuel_Sequences._default.Unzip))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Unzip) StartFuelAssert_Sequences._default.Unzip) (= (AsFuelBottom StartFuel_Sequences._default.FlattenShape) StartFuel_Sequences._default.FlattenShape)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenShape) StartFuelAssert_Sequences._default.FlattenShape) (= (AsFuelBottom StartFuel_Sequences._default.FlattenLength) StartFuel_Sequences._default.FlattenLength)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.FlattenLength) StartFuelAssert_Sequences._default.FlattenLength) (= (AsFuelBottom StartFuel_Sequences._default.Flatten) StartFuel_Sequences._default.Flatten)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.Flatten) StartFuelAssert_Sequences._default.Flatten) (= (AsFuelBottom StartFuel_Sequences._default.seqMax) StartFuel_Sequences._default.seqMax))) (and (and (= (AsFuelBottom StartFuelAssert_Sequences._default.seqMax) StartFuelAssert_Sequences._default.seqMax) (= (AsFuelBottom StartFuel_Sequences._default.fill) StartFuel_Sequences._default.fill)) (and (= (AsFuelBottom StartFuelAssert_Sequences._default.fill) StartFuelAssert_Sequences._default.fill) (= (AsFuelBottom StartFuel_MapRemove_s._default.MapRemove1) StartFuel_MapRemove_s._default.MapRemove1)))))) (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_MapRemove_s._default.MapRemove1) StartFuelAssert_MapRemove_s._default.MapRemove1) (= (AsFuelBottom StartFuel_Maps._default.MapRemove) StartFuel_Maps._default.MapRemove)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove) StartFuelAssert_Maps._default.MapRemove) (= (AsFuelBottom StartFuel_Maps._default.MapRemoveStrong) StartFuel_Maps._default.MapRemoveStrong))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemoveStrong) StartFuelAssert_Maps._default.MapRemoveStrong) (= (AsFuelBottom StartFuel_Maps._default.MapRemove1Strong) StartFuel_Maps._default.MapRemove1Strong)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapRemove1Strong) StartFuelAssert_Maps._default.MapRemove1Strong) (= (AsFuelBottom StartFuel_Maps._default.IMapRemove) StartFuel_Maps._default.IMapRemove)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove) StartFuelAssert_Maps._default.IMapRemove) (= (AsFuelBottom StartFuel_Maps._default.IMapRemove1) StartFuel_Maps._default.IMapRemove1)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapRemove1) StartFuelAssert_Maps._default.IMapRemove1) (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion) StartFuel_Maps._default.MapDisjointUnion))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion) StartFuelAssert_Maps._default.MapDisjointUnion) (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferA) StartFuel_Maps._default.MapUnionPreferA)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferA) StartFuelAssert_Maps._default.MapUnionPreferA) (= (AsFuelBottom StartFuel_Maps._default.MapUnionPreferB) StartFuel_Maps._default.MapUnionPreferB))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnionPreferB) StartFuelAssert_Maps._default.MapUnionPreferB) (= (AsFuelBottom StartFuel_Maps._default.MapUnion) StartFuel_Maps._default.MapUnion)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapUnion) StartFuelAssert_Maps._default.MapUnion) (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferA) StartFuel_Maps._default.IMapUnionPreferA))) (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferA) StartFuelAssert_Maps._default.IMapUnionPreferA) (= (AsFuelBottom StartFuel_Maps._default.IMapUnionPreferB) StartFuel_Maps._default.IMapUnionPreferB)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnionPreferB) StartFuelAssert_Maps._default.IMapUnionPreferB) (= (AsFuelBottom StartFuel_Maps._default.IMapUnion) StartFuel_Maps._default.IMapUnion)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Maps._default.IMapUnion) StartFuelAssert_Maps._default.IMapUnion) (= (AsFuelBottom StartFuel_Maps._default.MapDisjointUnion3) StartFuel_Maps._default.MapDisjointUnion3)) (and (= (AsFuelBottom StartFuelAssert_Maps._default.MapDisjointUnion3) StartFuelAssert_Maps._default.MapDisjointUnion3) (= (AsFuelBottom StartFuel_SeqComparison._default.lte) StartFuel_SeqComparison._default.lte))) (and (and (= (AsFuelBottom StartFuelAssert_SeqComparison._default.lte) StartFuelAssert_SeqComparison._default.lte) (= (AsFuelBottom StartFuel_Byte_Order._default.lte) StartFuel_Byte_Order._default.lte)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.lte) StartFuelAssert_Byte_Order._default.lte) (= (AsFuelBottom StartFuel_Byte_Order._default.ltedef) StartFuel_Byte_Order._default.ltedef))))))) (=> (and (and (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.ltedef) StartFuelAssert_Byte_Order._default.ltedef) (= (AsFuelBottom StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGte)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGte) (= (AsFuelBottom StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuel_Byte_Order._default.binarySearchIndexOfFirstKeyGt))) (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuelAssert_Byte_Order._default.binarySearchIndexOfFirstKeyGt) (= (AsFuelBottom StartFuel_Byte_Order._default.NotMinimum) StartFuel_Byte_Order._default.NotMinimum)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.NotMinimum) StartFuelAssert_Byte_Order._default.NotMinimum) (= (AsFuelBottom StartFuel_Byte_Order._default.SortedSeqForMap) StartFuel_Byte_Order._default.SortedSeqForMap)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.SortedSeqForMap) StartFuelAssert_Byte_Order._default.SortedSeqForMap) (= (AsFuelBottom StartFuel_Byte_Order._default.minimum) StartFuel_Byte_Order._default.minimum)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.minimum) StartFuelAssert_Byte_Order._default.minimum) (= (AsFuelBottom StartFuel_Byte_Order._default.minimumOpt) StartFuel_Byte_Order._default.minimumOpt))) (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.minimumOpt) StartFuelAssert_Byte_Order._default.minimumOpt) (= (AsFuelBottom StartFuel_Byte_Order._default.maximum) StartFuel_Byte_Order._default.maximum)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.maximum) StartFuelAssert_Byte_Order._default.maximum) (= (AsFuelBottom StartFuel_Byte_Order._default.maximumOpt) StartFuel_Byte_Order._default.maximumOpt))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.maximumOpt) StartFuelAssert_Byte_Order._default.maximumOpt) (= (AsFuelBottom StartFuel_Byte_Order._default.IsSorted) StartFuel_Byte_Order._default.IsSorted)) (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.IsSorted) StartFuelAssert_Byte_Order._default.IsSorted) (= (AsFuelBottom StartFuel_Byte_Order._default.IsStrictlySorted) StartFuel_Byte_Order._default.IsStrictlySorted))) (and (and (= (AsFuelBottom StartFuelAssert_Byte_Order._default.IsStrictlySorted) StartFuelAssert_Byte_Order._default.IsStrictlySorted) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte)) (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuel_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuelAssert_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.NotMinimum) StartFuel_Lexicographic_Byte_Order._default.NotMinimum)) (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum) StartFuelAssert_Lexicographic_Byte_Order._default.NotMinimum) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap) StartFuel_Lexicographic_Byte_Order._default.SortedSeqForMap))) (and (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap) StartFuelAssert_Lexicographic_Byte_Order._default.SortedSeqForMap) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.minimum) StartFuel_Lexicographic_Byte_Order._default.minimum)) (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.minimum) StartFuelAssert_Lexicographic_Byte_Order._default.minimum) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.minimumOpt) StartFuel_Lexicographic_Byte_Order._default.minimumOpt)))))) (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt) StartFuelAssert_Lexicographic_Byte_Order._default.minimumOpt) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.maximum) StartFuel_Lexicographic_Byte_Order._default.maximum)) (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.maximum) StartFuelAssert_Lexicographic_Byte_Order._default.maximum) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.maximumOpt) StartFuel_Lexicographic_Byte_Order._default.maximumOpt))) (and (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt) StartFuelAssert_Lexicographic_Byte_Order._default.maximumOpt) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.IsSorted) StartFuel_Lexicographic_Byte_Order._default.IsSorted)) (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted) StartFuelAssert_Lexicographic_Byte_Order._default.IsSorted) (= (AsFuelBottom StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted) StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted) StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted) (= (AsFuelBottom StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte)) (and (= (AsFuelBottom StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGte) (= (AsFuelBottom StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuel_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt))) (and (and (= (AsFuelBottom StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.binarySearchIndexOfFirstKeyGt) (= (AsFuelBottom StartFuel_Upperbounded_Lexicographic_Byte_Order._default.NotMinimum) StartFuel_Upperbounded_Lexicographic_Byte_Order._default.NotMinimum)) (and (= (AsFuelBottom StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.NotMinimum) StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.NotMinimum) (= (AsFuelBottom StartFuel_Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap) StartFuel_Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap) StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.SortedSeqForMap) (= (AsFuelBottom StartFuel_Upperbounded_Lexicographic_Byte_Order._default.minimum) StartFuel_Upperbounded_Lexicographic_Byte_Order._default.minimum)) (and (= (AsFuelBottom StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.minimum) StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.minimum) (= (AsFuelBottom StartFuel_Upperbounded_Lexicographic_Byte_Order._default.minimumOpt) StartFuel_Upperbounded_Lexicographic_Byte_Order._default.minimumOpt))) (and (and (= (AsFuelBottom StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.minimumOpt) StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.minimumOpt) (= (AsFuelBottom StartFuel_Upperbounded_Lexicographic_Byte_Order._default.maximum) StartFuel_Upperbounded_Lexicographic_Byte_Order._default.maximum)) (and (= (AsFuelBottom StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.maximum) StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.maximum) (= (AsFuelBottom StartFuel_Upperbounded_Lexicographic_Byte_Order._default.maximumOpt) StartFuel_Upperbounded_Lexicographic_Byte_Order._default.maximumOpt)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.maximumOpt) StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.maximumOpt) (= (AsFuelBottom StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted) StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsSorted)) (and (= (AsFuelBottom StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsSorted) StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsSorted) (= (AsFuelBottom StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted) StartFuel_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted))) (and (and (= (AsFuelBottom StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted) StartFuelAssert_Upperbounded_Lexicographic_Byte_Order._default.IsStrictlySorted) (= (AsFuelBottom StartFuel_BoundedPivotsLib._default.CutoffForLeft) StartFuel_BoundedPivotsLib._default.CutoffForLeft)) (and (= (AsFuelBottom StartFuelAssert_BoundedPivotsLib._default.CutoffForLeft) StartFuelAssert_BoundedPivotsLib._default.CutoffForLeft) (= (AsFuelBottom StartFuel_BoundedPivotsLib._default.CutoffForRight) StartFuel_BoundedPivotsLib._default.CutoffForRight))))))) (and (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_BoundedPivotsLib._default.CutoffForRight) StartFuelAssert_BoundedPivotsLib._default.CutoffForRight) (= (AsFuelBottom StartFuel_BucketMaps._default.BucketIntersect) StartFuel_BucketMaps._default.BucketIntersect)) (and (= (AsFuelBottom StartFuelAssert_BucketMaps._default.BucketIntersect) StartFuelAssert_BucketMaps._default.BucketIntersect) (= (AsFuelBottom StartFuel_BucketMaps._default.BucketComplement) StartFuel_BucketMaps._default.BucketComplement))) (and (and (= (AsFuelBottom StartFuelAssert_BucketMaps._default.BucketComplement) StartFuelAssert_BucketMaps._default.BucketComplement) (= (AsFuelBottom StartFuel_BucketMaps._default.ClampRange) StartFuel_BucketMaps._default.ClampRange)) (and (= (AsFuelBottom StartFuelAssert_BucketMaps._default.ClampRange) StartFuelAssert_BucketMaps._default.ClampRange) (= (AsFuelBottom StartFuel_BucketMaps._default.ClampStart) StartFuel_BucketMaps._default.ClampStart)))) (and (and (and (= (AsFuelBottom StartFuelAssert_BucketMaps._default.ClampStart) StartFuelAssert_BucketMaps._default.ClampStart) (= (AsFuelBottom StartFuel_BucketMaps._default.ClampEnd) StartFuel_BucketMaps._default.ClampEnd)) (and (= (AsFuelBottom StartFuelAssert_BucketMaps._default.ClampEnd) StartFuelAssert_BucketMaps._default.ClampEnd) (= (AsFuelBottom StartFuel_BucketMaps._default.Compose) StartFuel_BucketMaps._default.Compose))) (and (and (= (AsFuelBottom StartFuelAssert_BucketMaps._default.Compose) StartFuelAssert_BucketMaps._default.Compose) (= (AsFuelBottom StartFuel_BucketMaps._default.ComposeSeq) StartFuel_BucketMaps._default.ComposeSeq)) (and (= (AsFuelBottom StartFuelAssert_BucketMaps._default.ComposeSeq) StartFuelAssert_BucketMaps._default.ComposeSeq) (= (AsFuelBottom StartFuel_BucketMaps._default.KeyValueMapOfBucket) StartFuel_BucketMaps._default.KeyValueMapOfBucket))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_BucketMaps._default.KeyValueMapOfBucket) StartFuelAssert_BucketMaps._default.KeyValueMapOfBucket) (= (AsFuelBottom StartFuel_BucketMaps._default.SortedSeqOfKeyValueMap) StartFuel_BucketMaps._default.SortedSeqOfKeyValueMap)) (and (= (AsFuelBottom StartFuelAssert_BucketMaps._default.SortedSeqOfKeyValueMap) StartFuelAssert_BucketMaps._default.SortedSeqOfKeyValueMap) (= (AsFuelBottom StartFuel_Multisets._default.Choose) StartFuel_Multisets._default.Choose))) (and (and (= (AsFuelBottom StartFuelAssert_Multisets._default.Choose) StartFuelAssert_Multisets._default.Choose) (= (AsFuelBottom StartFuel_Multisets._default.Apply) StartFuel_Multisets._default.Apply)) (and (= (AsFuelBottom StartFuelAssert_Multisets._default.Apply) StartFuelAssert_Multisets._default.Apply) (= (AsFuelBottom StartFuel_Multisets._default.Fold) StartFuel_Multisets._default.Fold)))) (and (and (and (= (AsFuelBottom StartFuelAssert_Multisets._default.Fold) StartFuelAssert_Multisets._default.Fold) (= (AsFuelBottom StartFuel_Multisets._default.IsIdentity) StartFuel_Multisets._default.IsIdentity)) (and (= (AsFuelBottom StartFuelAssert_Multisets._default.IsIdentity) StartFuelAssert_Multisets._default.IsIdentity) (= (AsFuelBottom StartFuel_Multisets._default.IsCommutative) StartFuel_Multisets._default.IsCommutative))) (and (and (= (AsFuelBottom StartFuelAssert_Multisets._default.IsCommutative) StartFuelAssert_Multisets._default.IsCommutative) (= (AsFuelBottom StartFuel_Multisets._default.IsAssociative) StartFuel_Multisets._default.IsAssociative)) (and (= (AsFuelBottom StartFuelAssert_Multisets._default.IsAssociative) StartFuelAssert_Multisets._default.IsAssociative) (= (AsFuelBottom StartFuel_BucketsLib._default.B) StartFuel_BucketsLib._default.B)))))) (and (and (and (and (and (= (AsFuelBottom StartFuelAssert_BucketsLib._default.B) StartFuelAssert_BucketsLib._default.B) (= (AsFuelBottom StartFuel_BucketsLib._default.SplitBucketLeft) StartFuel_BucketsLib._default.SplitBucketLeft)) (and (= (AsFuelBottom StartFuelAssert_BucketsLib._default.SplitBucketLeft) StartFuelAssert_BucketsLib._default.SplitBucketLeft) (= (AsFuelBottom StartFuel_BucketsLib._default.SplitBucketRight) StartFuel_BucketsLib._default.SplitBucketRight))) (and (and (= (AsFuelBottom StartFuelAssert_BucketsLib._default.SplitBucketRight) StartFuelAssert_BucketsLib._default.SplitBucketRight) (= (AsFuelBottom StartFuel_BucketsLib._default.SplitBucketInList) StartFuel_BucketsLib._default.SplitBucketInList)) (and (= (AsFuelBottom StartFuelAssert_BucketsLib._default.SplitBucketInList) StartFuelAssert_BucketsLib._default.SplitBucketInList) (= (AsFuelBottom StartFuel_BucketsLib._default.MergeBuckets) StartFuel_BucketsLib._default.MergeBuckets)))) (and (and (and (= (AsFuelBottom StartFuelAssert_BucketsLib._default.MergeBuckets) StartFuelAssert_BucketsLib._default.MergeBuckets) (= (AsFuelBottom StartFuel_BucketsLib._default.MergeBucketsInList) StartFuel_BucketsLib._default.MergeBucketsInList)) (and (= (AsFuelBottom StartFuelAssert_BucketsLib._default.MergeBucketsInList) StartFuelAssert_BucketsLib._default.MergeBucketsInList) (= (AsFuelBottom StartFuel_BucketsLib._default.MapsOfBucketList) StartFuel_BucketsLib._default.MapsOfBucketList))) (and (and (= (AsFuelBottom StartFuelAssert_BucketsLib._default.MapsOfBucketList) StartFuelAssert_BucketsLib._default.MapsOfBucketList) (= (AsFuelBottom StartFuel_BucketWeights._default.WeightKeyMultiset) StartFuel_BucketWeights._default.WeightKeyMultiset)) (and (= (AsFuelBottom StartFuelAssert_BucketWeights._default.WeightKeyMultiset) StartFuelAssert_BucketWeights._default.WeightKeyMultiset) (= (AsFuelBottom StartFuel_BucketWeights._default.WeightMessageMultiset) StartFuel_BucketWeights._default.WeightMessageMultiset))))) (and (and (and (and (= (AsFuelBottom StartFuelAssert_BucketWeights._default.WeightMessageMultiset) StartFuelAssert_BucketWeights._default.WeightMessageMultiset) (= (AsFuelBottom StartFuel_BucketWeights._default.WeightBucketList) StartFuel_BucketWeights._default.WeightBucketList)) (and (= (AsFuelBottom StartFuelAssert_BucketWeights._default.WeightBucketList) StartFuelAssert_BucketWeights._default.WeightBucketList) (= (AsFuelBottom StartFuel_BucketWeights._default.WeightBucketMap) StartFuel_BucketWeights._default.WeightBucketMap))) (and (and (= (AsFuelBottom StartFuelAssert_BucketWeights._default.WeightBucketMap) StartFuelAssert_BucketWeights._default.WeightBucketMap) (= (AsFuelBottom StartFuel_BucketFlushModel._default.mergeToOneChild) StartFuel_BucketFlushModel._default.mergeToOneChild)) (and (= (AsFuelBottom StartFuelAssert_BucketFlushModel._default.mergeToOneChild) StartFuelAssert_BucketFlushModel._default.mergeToOneChild) (= (AsFuelBottom StartFuel_BucketFlushModel._default.mergeToChildren) StartFuel_BucketFlushModel._default.mergeToChildren)))) (and (and (and (= (AsFuelBottom StartFuelAssert_BucketFlushModel._default.mergeToChildren) StartFuelAssert_BucketFlushModel._default.mergeToChildren) (= (AsFuelBottom StartFuel_BucketFlushModel._default.partialFlush) StartFuel_BucketFlushModel._default.partialFlush)) (and (= (AsFuelBottom StartFuelAssert_BucketFlushModel._default.partialFlush) StartFuelAssert_BucketFlushModel._default.partialFlush) (= $_Frame@0 (|lambda#37| null $Heap@@141 alloc false)))) (and (and ($IsGoodHeap $Heap@0) ($IsHeapAnchor $Heap@0)) (and (= $Heap@@141 $Heap@0) (forall ((|$ih#top_keys0#0| T@U) (|$ih#top_msgs0#0| T@U) (|$ih#from0#0| Int) (|$ih#to0#0| Int) (|$ih#bot_keys0#0| T@U) (|$ih#bot_msgs0#0| T@U) (|$ih#bot_from0#0| Int) (|$ih#acc_keys0#0| T@U) (|$ih#acc_msgs0#0| T@U) (|$ih#slack0#0| Int) ) (!  (=> (and (and (and (and (and (= (type |$ih#top_keys0#0|) (SeqType BoxType)) (= (type |$ih#top_msgs0#0|) (SeqType BoxType))) (= (type |$ih#bot_keys0#0|) (SeqType BoxType))) (= (type |$ih#bot_msgs0#0|) (SeqType BoxType))) (= (type |$ih#acc_keys0#0|) (SeqType BoxType))) (= (type |$ih#acc_msgs0#0|) (SeqType BoxType))) (=> (and (and (and (and (and (and (and (and (and (and (and ($Is |$ih#top_keys0#0| (TSeq Tclass.KeyType.Key)) ($Is |$ih#top_msgs0#0| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |$ih#from0#0|)) (<= (LitInt 0) |$ih#to0#0|)) ($Is |$ih#bot_keys0#0| (TSeq Tclass.KeyType.Key))) ($Is |$ih#bot_msgs0#0| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |$ih#bot_from0#0|)) ($Is |$ih#acc_keys0#0| (TSeq Tclass.KeyType.Key))) ($Is |$ih#acc_msgs0#0| (TSeq Tclass.ValueMessage.Message))) (<= (LitInt 0) |$ih#slack0#0|)) (and (and (and (and (and (and (and (and (and (and (and (and (= (|Seq#Length| |$ih#top_keys0#0|) (|Seq#Length| |$ih#top_msgs0#0|)) (= (|Seq#Length| |$ih#bot_keys0#0|) (|Seq#Length| |$ih#bot_msgs0#0|))) (= (|Seq#Length| |$ih#acc_keys0#0|) (|Seq#Length| |$ih#acc_msgs0#0|))) (and (<= |$ih#from0#0| |$ih#to0#0|) (<= |$ih#to0#0| (|Seq#Length| |$ih#top_keys0#0|)))) (<= |$ih#bot_from0#0| (|Seq#Length| |$ih#bot_keys0#0|))) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted |$ih#acc_keys0#0|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted |$ih#top_keys0#0|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted |$ih#bot_keys0#0|)) (BucketFlushModel.__default.seq__lt |$ih#acc_keys0#0| |$ih#top_keys0#0| |$ih#from0#0|)) (BucketFlushModel.__default.seq__lt |$ih#acc_keys0#0| |$ih#bot_keys0#0| |$ih#bot_from0#0|)) (forall ((|i#10| Int) ) (!  (=> (and (<= (LitInt 0) |i#10|) (< |i#10| (|Seq#Length| |$ih#bot_msgs0#0|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |$ih#bot_msgs0#0| |i#10|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.311:19| :skolemid |1646| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |$ih#bot_msgs0#0| |i#10|))) ))) (forall ((|i#11| Int) ) (!  (=> (and (<= (LitInt 0) |i#11|) (< |i#11| (|Seq#Length| |$ih#top_msgs0#0|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |$ih#top_msgs0#0| |i#11|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.312:19| :skolemid |1647| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |$ih#top_msgs0#0| |i#11|))) ))) (forall ((|i#12| Int) ) (!  (=> (and (<= (LitInt 0) |i#12|) (< |i#12| (|Seq#Length| |$ih#acc_msgs0#0|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |$ih#acc_msgs0#0| |i#12|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.313:19| :skolemid |1648| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |$ih#acc_msgs0#0| |i#12|))) )))) (and (<= 0 (- (- (+ (|Seq#Length| |$ih#top_keys0#0|) (|Seq#Length| |$ih#bot_keys0#0|)) |$ih#from0#0|) |$ih#bot_from0#0|)) (< (- (- (+ (|Seq#Length| |$ih#top_keys0#0|) (|Seq#Length| |$ih#bot_keys0#0|)) |$ih#from0#0|) |$ih#bot_from0#0|) (- (- (+ (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |bot_keys#0@@6|)) |from#0@@16|) |bot_from#0@@6|)))) (let ((|res#1@@1| (BucketFlushModel.__default.mergeToOneChild StartFuel_BucketFlushModel._default.mergeToOneChild |$ih#top_keys0#0| |$ih#top_msgs0#0| |$ih#from0#0| |$ih#to0#0| |$ih#bot_keys0#0| |$ih#bot_msgs0#0| |$ih#bot_from0#0| |$ih#acc_keys0#0| |$ih#acc_msgs0#0| |$ih#slack0#0|))) (let ((|bot#1| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |$ih#bot_keys0#0| |$ih#bot_from0#0|) (|Seq#Drop| |$ih#bot_msgs0#0| |$ih#bot_from0#0|)))) (let ((|acc#1| (MapSeqs.__default.map__of__seqs ($LS $LZ) |$ih#acc_keys0#0| |$ih#acc_msgs0#0|))) (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuel_Lexicographic_Byte_Order._default.IsStrictlySorted (BucketFlushModel.singleMergeResult.keys |res#1@@1|)) (|Map#Equal| (BucketFlushModel.singleMergeResult.bucketMap |res#1@@1|) (BucketFlushModel.__default.topBotAccMerge (BucketFlushModel.singleMergeResult.flushedMap |res#1@@1| |$ih#top_keys0#0| |$ih#top_msgs0#0| |$ih#from0#0| |$ih#to0#0|) |bot#1| |acc#1|)))))))) :qid |BucketFlushModelidfy.291:7| :skolemid |1649| :no-pattern (type |$ih#top_keys0#0|) :no-pattern (type |$ih#top_msgs0#0|) :no-pattern (type |$ih#bot_keys0#0|) :no-pattern (type |$ih#bot_msgs0#0|) :no-pattern (type |$ih#acc_keys0#0|) :no-pattern (type |$ih#acc_msgs0#0|) :no-pattern (U_2_int |$ih#top_keys0#0|) :no-pattern (U_2_bool |$ih#top_keys0#0|) :no-pattern (U_2_int |$ih#top_msgs0#0|) :no-pattern (U_2_bool |$ih#top_msgs0#0|) :no-pattern (U_2_int |$ih#bot_keys0#0|) :no-pattern (U_2_bool |$ih#bot_keys0#0|) :no-pattern (U_2_int |$ih#bot_msgs0#0|) :no-pattern (U_2_bool |$ih#bot_msgs0#0|) :no-pattern (U_2_int |$ih#acc_keys0#0|) :no-pattern (U_2_bool |$ih#acc_keys0#0|) :no-pattern (U_2_int |$ih#acc_msgs0#0|) :no-pattern (U_2_bool |$ih#acc_msgs0#0|) ))))))))) (and (=> (= (ControlFlow 0 116052) (- 0 868513)) (forall (($o@@222 T@U) ($f@@154 T@U) ) (! (let ((alpha@@161 (FieldTypeInv0 (type $f@@154)))) (=> (and (and (= (type $o@@222) refType) (= (type $f@@154) (FieldType alpha@@161))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@222 $f@@154)))) :qid |BucketFlushModelidfy.330:27| :skolemid |1650| :no-pattern (type $o@@222) :no-pattern (type $f@@154) :no-pattern (U_2_int $o@@222) :no-pattern (U_2_bool $o@@222) :no-pattern (U_2_int $f@@154) :no-pattern (U_2_bool $f@@154) ))) (=> (forall (($o@@223 T@U) ($f@@155 T@U) ) (! (let ((alpha@@162 (FieldTypeInv0 (type $f@@155)))) (=> (and (and (= (type $o@@223) refType) (= (type $f@@155) (FieldType alpha@@162))) false) (U_2_bool (MapType9Select $_Frame@0 $o@@223 $f@@155)))) :qid |BucketFlushModelidfy.330:27| :skolemid |1650| :no-pattern (type $o@@223) :no-pattern (type $f@@155) :no-pattern (U_2_int $o@@223) :no-pattern (U_2_bool $o@@223) :no-pattern (U_2_int $f@@155) :no-pattern (U_2_bool $f@@155) )) (=> (and (and (and (and ($IsGoodHeap $Heap@1) ($IsHeapAnchor $Heap@1)) (and (= $Heap@0 $Heap@1) (= StartFuel_BucketFlushModel._default.mergeToOneChild ($LS MoreFuel_BucketFlushModel._default.mergeToOneChild0)))) (and (and (= StartFuelAssert_BucketFlushModel._default.mergeToOneChild ($LS ($LS MoreFuel_BucketFlushModel._default.mergeToOneChild0))) (= (AsFuelBottom MoreFuel_BucketFlushModel._default.mergeToOneChild0) MoreFuel_BucketFlushModel._default.mergeToOneChild0)) (and ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@1) ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@1)))) (and (and (and ($IsAlloc (int_2_U |from#0@@16|) Tclass._System.nat $Heap@1) ($IsAlloc (int_2_U |to#0@@16|) Tclass._System.nat $Heap@1)) (and ($IsAlloc |bot_keys#0@@6| (TSeq Tclass.KeyType.Key) $Heap@1) ($IsAlloc |bot_msgs#0@@6| (TSeq Tclass.ValueMessage.Message) $Heap@1))) (and (and ($IsAlloc (int_2_U |bot_from#0@@6|) Tclass._System.nat $Heap@1) ($IsAlloc |acc_keys#0@@6| (TSeq Tclass.KeyType.Key) $Heap@1)) (and ($IsAlloc |acc_msgs#0@@6| (TSeq Tclass.ValueMessage.Message) $Heap@1) ($IsAlloc (int_2_U |slack#0@@12|) Tclass._System.nat $Heap@1))))) (and (=> (= (ControlFlow 0 116052) (- 0 868681)) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|))) (=> (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|)) (and (=> (= (ControlFlow 0 116052) (- 0 868697)) (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|))) (=> (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116052) (- 0 868713)) (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|))) (=> (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|)) (and (=> (= (ControlFlow 0 116052) (- 0 868729)) (<= |from#0@@16| |to#0@@16|)) (and (=> (= (ControlFlow 0 116052) (- 0 868733)) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (=> (and (<= |from#0@@16| |to#0@@16|) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116052) (- 0 868751)) (<= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|))) (=> (and (and (<= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)) (|BucketFlushModel.__default.mergeToOneChild#canCall| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from#0@@6| |acc_keys#0@@6| |acc_msgs#0@@6| |slack#0@@12|)) (and (|BucketFlushModel.__default.mergeToOneChild#canCall| |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from#0@@6| |acc_keys#0@@6| |acc_msgs#0@@6| |slack#0@@12|) (= |res#2@0| (BucketFlushModel.__default.mergeToOneChild StartFuel_BucketFlushModel._default.mergeToOneChild |top_keys#0@@29| |top_msgs#0@@14| |from#0@@16| |to#0@@16| |bot_keys#0@@6| |bot_msgs#0@@6| |bot_from#0@@6| |acc_keys#0@@6| |acc_msgs#0@@6| |slack#0@@12|)))) (and (=> (= (ControlFlow 0 116052) (- 0 868841)) (and (<= 0 |from#0@@16|) (<= |from#0@@16| (|Seq#Length| |top_keys#0@@29|)))) (=> (and (<= 0 |from#0@@16|) (<= |from#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116052) (- 0 868857)) (and (<= |from#0@@16| |to#0@@16|) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|)))) (=> (and (<= |from#0@@16| |to#0@@16|) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|))) (and (=> (= (ControlFlow 0 116052) (- 0 868873)) (and (<= 0 |from#0@@16|) (<= |from#0@@16| (|Seq#Length| |top_msgs#0@@14|)))) (=> (and (<= 0 |from#0@@16|) (<= |from#0@@16| (|Seq#Length| |top_msgs#0@@14|))) (and (=> (= (ControlFlow 0 116052) (- 0 868889)) (and (<= |from#0@@16| |to#0@@16|) (<= |to#0@@16| (|Seq#Length| |top_msgs#0@@14|)))) (=> (and (<= |from#0@@16| |to#0@@16|) (<= |to#0@@16| (|Seq#Length| |top_msgs#0@@14|))) (=> (and (and (= |##keys#3@0| (|Seq#Drop| (|Seq#Take| |top_keys#0@@29| |to#0@@16|) |from#0@@16|)) ($IsAlloc |##keys#3@0| (TSeq Tclass.KeyType.Key) $Heap@1)) (and (= |##msgs#3@0| (|Seq#Drop| (|Seq#Take| |top_msgs#0@@14| |to#0@@16|) |from#0@@16|)) ($IsAlloc |##msgs#3@0| (TSeq Tclass.ValueMessage.Message) $Heap@1))) (and (=> (= (ControlFlow 0 116052) (- 0 868953)) (= (|Seq#Length| |##keys#3@0|) (|Seq#Length| |##msgs#3@0|))) (=> (and (and (= (|Seq#Length| |##keys#3@0|) (|Seq#Length| |##msgs#3@0|)) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| (|Seq#Take| |top_keys#0@@29| |to#0@@16|) |from#0@@16|) (|Seq#Drop| (|Seq#Take| |top_msgs#0@@14| |to#0@@16|) |from#0@@16|))) (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| (|Seq#Take| |top_keys#0@@29| |to#0@@16|) |from#0@@16|) (|Seq#Drop| (|Seq#Take| |top_msgs#0@@14| |to#0@@16|) |from#0@@16|)) (= |top#2@0| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| (|Seq#Take| |top_keys#0@@29| |to#0@@16|) |from#0@@16|) (|Seq#Drop| (|Seq#Take| |top_msgs#0@@14| |to#0@@16|) |from#0@@16|))))) (and (=> (= (ControlFlow 0 116052) (- 0 869049)) (and (<= 0 |bot_from#0@@6|) (<= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)))) (=> (and (<= 0 |bot_from#0@@6|) (<= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|))) (and (=> (= (ControlFlow 0 116052) (- 0 869065)) (and (<= 0 |bot_from#0@@6|) (<= |bot_from#0@@6| (|Seq#Length| |bot_msgs#0@@6|)))) (=> (and (<= 0 |bot_from#0@@6|) (<= |bot_from#0@@6| (|Seq#Length| |bot_msgs#0@@6|))) (=> (and (and (= |##keys#4@0| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|)) ($IsAlloc |##keys#4@0| (TSeq Tclass.KeyType.Key) $Heap@1)) (and (= |##msgs#4@0| (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)) ($IsAlloc |##msgs#4@0| (TSeq Tclass.ValueMessage.Message) $Heap@1))) (and (=> (= (ControlFlow 0 116052) (- 0 869121)) (= (|Seq#Length| |##keys#4@0|) (|Seq#Length| |##msgs#4@0|))) (=> (and (= (|Seq#Length| |##keys#4@0|) (|Seq#Length| |##msgs#4@0|)) (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|))) (=> (and (and (|MapSeqs.__default.map__of__seqs#canCall| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)) (= |bot#2@0| (MapSeqs.__default.map__of__seqs ($LS $LZ) (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (|Seq#Drop| |bot_msgs#0@@6| |bot_from#0@@6|)))) (and ($IsAlloc |acc_keys#0@@6| (TSeq Tclass.KeyType.Key) $Heap@1) ($IsAlloc |acc_msgs#0@@6| (TSeq Tclass.ValueMessage.Message) $Heap@1))) (and (=> (= (ControlFlow 0 116052) (- 0 869215)) (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|))) (=> (and (and (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|)) (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys#0@@6| |acc_msgs#0@@6|)) (and (|MapSeqs.__default.map__of__seqs#canCall| |acc_keys#0@@6| |acc_msgs#0@@6|) (= |acc#2@0| (MapSeqs.__default.map__of__seqs ($LS $LZ) |acc_keys#0@@6| |acc_msgs#0@@6|)))) (and (=> (= (ControlFlow 0 116052) (- 0 869261)) (and (<= 0 |bot_from#0@@6|) (<= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)))) (and (=> (= (ControlFlow 0 116052) (- 0 869277)) ($Is (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (TSeq (TSeq Tclass.NativeTypes.byte)))) (=> ($Is (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|) (TSeq (TSeq Tclass.NativeTypes.byte))) (=> (and (and (= |##run#4@0| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|)) ($IsAlloc |##run#4@0| (TSeq (TSeq Tclass.NativeTypes.byte)) $Heap@1)) (and (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|)) (|Lexicographic__Byte__Order.__default.IsStrictlySorted#canCall| (|Seq#Drop| |bot_keys#0@@6| |bot_from#0@@6|)))) (and (=> (= (ControlFlow 0 116052) 116054) anon75_Then_correct) (=> (= (ControlFlow 0 116052) 116056) anon75_Else_correct))))))))))))))))))))))))))))))))))))))))))))))) (let ((PreconditionGeneratedEntry_correct  (=> (and ($IsGoodHeap $Heap@@141) ($IsHeapAnchor $Heap@@141)) (=> (and (and (and (and ($Is |top_keys#0@@29| (TSeq Tclass.KeyType.Key)) ($IsAlloc |top_keys#0@@29| (TSeq Tclass.KeyType.Key) $Heap@@141)) (and ($Is |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message)) ($IsAlloc |top_msgs#0@@14| (TSeq Tclass.ValueMessage.Message) $Heap@@141))) (and (and (<= (LitInt 0) |from#0@@16|) (<= (LitInt 0) |to#0@@16|)) (and ($Is |bot_keys#0@@6| (TSeq Tclass.KeyType.Key)) ($IsAlloc |bot_keys#0@@6| (TSeq Tclass.KeyType.Key) $Heap@@141)))) (and (and (and ($Is |bot_msgs#0@@6| (TSeq Tclass.ValueMessage.Message)) ($IsAlloc |bot_msgs#0@@6| (TSeq Tclass.ValueMessage.Message) $Heap@@141)) (<= (LitInt 0) |bot_from#0@@6|)) (and ($Is |acc_keys#0@@6| (TSeq Tclass.KeyType.Key)) ($IsAlloc |acc_keys#0@@6| (TSeq Tclass.KeyType.Key) $Heap@@141)))) (=> (and (and (and (and (and (and ($Is |acc_msgs#0@@6| (TSeq Tclass.ValueMessage.Message)) ($IsAlloc |acc_msgs#0@@6| (TSeq Tclass.ValueMessage.Message) $Heap@@141)) (<= (LitInt 0) |slack#0@@12|)) (and ($Is |res#2| Tclass.BucketFlushModel.singleMergeResult) ($IsAlloc |res#2| Tclass.BucketFlushModel.singleMergeResult $Heap@@141))) (and (and ($Is |top#2| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($IsAlloc |top#2| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@@141)) (and ($Is |bot#2| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($IsAlloc |bot#2| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@@141)))) (and (and (and ($Is |acc#2| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($IsAlloc |acc#2| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@@141)) (and ($Is |a#0_0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($IsAlloc |a#0_0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@@141))) (and (and ($Is |b#0_0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message)) ($IsAlloc |b#0_0| (TMap Tclass.KeyType.Key Tclass.ValueMessage.Message) $Heap@@141)) (and ($Is |key#1_0| Tclass.KeyType.Key) ($IsAlloc |key#1_0| Tclass.KeyType.Key $Heap@@141))))) (and (and (and (and (and ($Is |topmsg#1_0| Tclass.ValueMessage.Message) ($IsAlloc |topmsg#1_0| Tclass.ValueMessage.Message $Heap@@141)) (and ($Is |botmsg#1_0| Tclass.ValueMessage.Message) ($IsAlloc |botmsg#1_0| Tclass.ValueMessage.Message $Heap@@141))) (and (and ($Is |msg#1_0| Tclass.ValueMessage.Message) ($IsAlloc |msg#1_0| Tclass.ValueMessage.Message $Heap@@141)) (and ($Is |key#2_0| Tclass.KeyType.Key) ($IsAlloc |key#2_0| Tclass.KeyType.Key $Heap@@141)))) (and (and (and ($Is |msg#2_0| Tclass.ValueMessage.Message) ($IsAlloc |msg#2_0| Tclass.ValueMessage.Message $Heap@@141)) (and ($Is |key#0@@256| Tclass.KeyType.Key) ($IsAlloc |key#0@@256| Tclass.KeyType.Key $Heap@@141))) (and (and ($Is |msg#0@@29| Tclass.ValueMessage.Message) ($IsAlloc |msg#0@@29| Tclass.ValueMessage.Message $Heap@@141)) (and (= 18 $FunctionContextHeight) (= (|Seq#Length| |top_keys#0@@29|) (|Seq#Length| |top_msgs#0@@14|)))))) (and (and (and (and (= (|Seq#Length| |bot_keys#0@@6|) (|Seq#Length| |bot_msgs#0@@6|)) (= (|Seq#Length| |acc_keys#0@@6|) (|Seq#Length| |acc_msgs#0@@6|))) (and (<= |from#0@@16| |to#0@@16|) (<= |to#0@@16| (|Seq#Length| |top_keys#0@@29|)))) (and (and (<= |bot_from#0@@6| (|Seq#Length| |bot_keys#0@@6|)) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |acc_keys#0@@6|)) (and (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |top_keys#0@@29|) (Lexicographic__Byte__Order.__default.IsStrictlySorted StartFuelAssert_Lexicographic_Byte_Order._default.IsStrictlySorted |bot_keys#0@@6|)))) (and (and (and (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys#0@@6| |top_keys#0@@29| |from#0@@16|) (and (BucketFlushModel.__default.seq__lt |acc_keys#0@@6| |top_keys#0@@29| |from#0@@16|) (forall ((|i#8@@3| Int) (|j#2@@1| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#8@@3|) (< |i#8@@3| (|Seq#Length| |acc_keys#0@@6|))) (and (<= |from#0@@16| |j#2@@1|) (< |j#2@@1| (|Seq#Length| |top_keys#0@@29|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys#0@@6| |i#8@@3|)) ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#2@@1|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1640| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |top_keys#0@@29| |j#2@@1|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys#0@@6| |i#8@@3|))) )))) (and (|BucketFlushModel.__default.seq__lt#canCall| |acc_keys#0@@6| |bot_keys#0@@6| |bot_from#0@@6|) (and (BucketFlushModel.__default.seq__lt |acc_keys#0@@6| |bot_keys#0@@6| |bot_from#0@@6|) (forall ((|i#9@@1| Int) (|j#3| Int) ) (!  (=> (and (and (<= (LitInt 0) |i#9@@1|) (< |i#9@@1| (|Seq#Length| |acc_keys#0@@6|))) (and (<= |bot_from#0@@6| |j#3|) (< |j#3| (|Seq#Length| |bot_keys#0@@6|)))) (Lexicographic__Byte__Order.__default.lt ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys#0@@6| |i#9@@1|)) ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#3|)))) :qid |BucketFlushModelidfy.228:12| :skolemid |1642| :pattern ( ($Unbox (SeqType BoxType) (|Seq#Index| |bot_keys#0@@6| |j#3|)) ($Unbox (SeqType BoxType) (|Seq#Index| |acc_keys#0@@6| |i#9@@1|))) ))))) (and (and (forall ((|i#1@@104| Int) ) (!  (=> (and (<= (LitInt 0) |i#1@@104|) (< |i#1@@104| (|Seq#Length| |bot_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@104|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.311:19| :skolemid |1643| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |bot_msgs#0@@6| |i#1@@104|))) )) (forall ((|i#3@@36| Int) ) (!  (=> (and (<= (LitInt 0) |i#3@@36|) (< |i#3@@36| (|Seq#Length| |top_msgs#0@@14|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@36|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.312:19| :skolemid |1644| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |top_msgs#0@@14| |i#3@@36|))) ))) (and (forall ((|i#5@@17| Int) ) (!  (=> (and (<= (LitInt 0) |i#5@@17|) (< |i#5@@17| (|Seq#Length| |acc_msgs#0@@6|))) (not (|ValueMessage.Message#Equal| ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs#0@@6| |i#5@@17|)) ValueMessage.__default.IdentityMessage))) :qid |BucketFlushModelidfy.313:19| :skolemid |1645| :pattern ( ($Unbox DatatypeTypeType (|Seq#Index| |acc_msgs#0@@6| |i#5@@17|))) )) (= (ControlFlow 0 863671) 116052))))))) anon0_correct))))) PreconditionGeneratedEntry_correct)))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))))) ))
(check-sat)
